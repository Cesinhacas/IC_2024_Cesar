
MCS_F1_certo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb70  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005dc  0800ec80  0800ec80  0000fc80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f25c  0800f25c  000111e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f25c  0800f25c  0001025c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f264  0800f264  000111e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f264  0800f264  00010264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f268  0800f268  00010268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800f26c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003644  200001e8  0800f454  000111e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000382c  0800f454  0001182c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000111e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009782  00000000  00000000  00011211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002443  00000000  00000000  0001a993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0001cdd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000797  00000000  00000000  0001d810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019478  00000000  00000000  0001dfa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a7f  00000000  00000000  0003741f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085553  00000000  00000000  00047e9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd3f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e14  00000000  00000000  000cd434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000d1248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ec68 	.word	0x0800ec68

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800ec68 	.word	0x0800ec68

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_d2lz>:
 800113c:	b538      	push	{r3, r4, r5, lr}
 800113e:	2200      	movs	r2, #0
 8001140:	2300      	movs	r3, #0
 8001142:	4604      	mov	r4, r0
 8001144:	460d      	mov	r5, r1
 8001146:	f7ff fc39 	bl	80009bc <__aeabi_dcmplt>
 800114a:	b928      	cbnz	r0, 8001158 <__aeabi_d2lz+0x1c>
 800114c:	4620      	mov	r0, r4
 800114e:	4629      	mov	r1, r5
 8001150:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001154:	f000 b80a 	b.w	800116c <__aeabi_d2ulz>
 8001158:	4620      	mov	r0, r4
 800115a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800115e:	f000 f805 	bl	800116c <__aeabi_d2ulz>
 8001162:	4240      	negs	r0, r0
 8001164:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001168:	bd38      	pop	{r3, r4, r5, pc}
 800116a:	bf00      	nop

0800116c <__aeabi_d2ulz>:
 800116c:	b5d0      	push	{r4, r6, r7, lr}
 800116e:	2200      	movs	r2, #0
 8001170:	4b0b      	ldr	r3, [pc, #44]	@ (80011a0 <__aeabi_d2ulz+0x34>)
 8001172:	4606      	mov	r6, r0
 8001174:	460f      	mov	r7, r1
 8001176:	f7ff f9af 	bl	80004d8 <__aeabi_dmul>
 800117a:	f7ff fc85 	bl	8000a88 <__aeabi_d2uiz>
 800117e:	4604      	mov	r4, r0
 8001180:	f7ff f930 	bl	80003e4 <__aeabi_ui2d>
 8001184:	2200      	movs	r2, #0
 8001186:	4b07      	ldr	r3, [pc, #28]	@ (80011a4 <__aeabi_d2ulz+0x38>)
 8001188:	f7ff f9a6 	bl	80004d8 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4630      	mov	r0, r6
 8001192:	4639      	mov	r1, r7
 8001194:	f7fe ffe8 	bl	8000168 <__aeabi_dsub>
 8001198:	f7ff fc76 	bl	8000a88 <__aeabi_d2uiz>
 800119c:	4621      	mov	r1, r4
 800119e:	bdd0      	pop	{r4, r6, r7, pc}
 80011a0:	3df00000 	.word	0x3df00000
 80011a4:	41f00000 	.word	0x41f00000

080011a8 <inverter_matriz>:
#include <math.h>
#include "calib.h"


void inverter_matriz(float matriz[N][N], float inversa[N][N])
{
 80011a8:	b5b0      	push	{r4, r5, r7, lr}
 80011aa:	b08a      	sub	sp, #40	@ 0x28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
    // Inicializando a matriz identidade na matriz inversa
    for (int i = 0; i < N; i++) {
 80011b2:	2300      	movs	r3, #0
 80011b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80011b6:	e02a      	b.n	800120e <inverter_matriz+0x66>
        for (int j = 0; j < N; j++) {
 80011b8:	2300      	movs	r3, #0
 80011ba:	623b      	str	r3, [r7, #32]
 80011bc:	e021      	b.n	8001202 <inverter_matriz+0x5a>
            if (i == j) {
 80011be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011c0:	6a3b      	ldr	r3, [r7, #32]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d10d      	bne.n	80011e2 <inverter_matriz+0x3a>
                inversa[i][j] = 1;
 80011c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011c8:	4613      	mov	r3, r2
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	4413      	add	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	461a      	mov	r2, r3
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	4413      	add	r3, r2
 80011d6:	6a3a      	ldr	r2, [r7, #32]
 80011d8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80011dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80011e0:	e00c      	b.n	80011fc <inverter_matriz+0x54>
            } else {
                inversa[i][j] = 0;
 80011e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011e4:	4613      	mov	r3, r2
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	4413      	add	r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	461a      	mov	r2, r3
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	4413      	add	r3, r2
 80011f2:	6a3a      	ldr	r2, [r7, #32]
 80011f4:	f04f 0100 	mov.w	r1, #0
 80011f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int j = 0; j < N; j++) {
 80011fc:	6a3b      	ldr	r3, [r7, #32]
 80011fe:	3301      	adds	r3, #1
 8001200:	623b      	str	r3, [r7, #32]
 8001202:	6a3b      	ldr	r3, [r7, #32]
 8001204:	2b08      	cmp	r3, #8
 8001206:	ddda      	ble.n	80011be <inverter_matriz+0x16>
    for (int i = 0; i < N; i++) {
 8001208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120a:	3301      	adds	r3, #1
 800120c:	627b      	str	r3, [r7, #36]	@ 0x24
 800120e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001210:	2b08      	cmp	r3, #8
 8001212:	ddd1      	ble.n	80011b8 <inverter_matriz+0x10>
            }
        }
    }

    // Aplicando o método de Gauss-Jordan
    for (int i = 0; i < N; i++)
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
 8001218:	e0c7      	b.n	80013aa <inverter_matriz+0x202>
    {
        float pivot = matriz[i][i];
 800121a:	69fa      	ldr	r2, [r7, #28]
 800121c:	4613      	mov	r3, r2
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	4413      	add	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	461a      	mov	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4413      	add	r3, r2
 800122a:	69fa      	ldr	r2, [r7, #28]
 800122c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001230:	60fb      	str	r3, [r7, #12]
        for (int j = 0; j < N; j++)
 8001232:	2300      	movs	r3, #0
 8001234:	61bb      	str	r3, [r7, #24]
 8001236:	e038      	b.n	80012aa <inverter_matriz+0x102>
        {
            matriz[i][j] /= pivot;
 8001238:	69fa      	ldr	r2, [r7, #28]
 800123a:	4613      	mov	r3, r2
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	4413      	add	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	461a      	mov	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4413      	add	r3, r2
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800124e:	69fa      	ldr	r2, [r7, #28]
 8001250:	4613      	mov	r3, r2
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	4413      	add	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	461a      	mov	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	189c      	adds	r4, r3, r2
 800125e:	68f9      	ldr	r1, [r7, #12]
 8001260:	f7ff fe44 	bl	8000eec <__aeabi_fdiv>
 8001264:	4603      	mov	r3, r0
 8001266:	461a      	mov	r2, r3
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
            inversa[i][j] /= pivot;
 800126e:	69fa      	ldr	r2, [r7, #28]
 8001270:	4613      	mov	r3, r2
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	4413      	add	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	461a      	mov	r2, r3
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	4413      	add	r3, r2
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001284:	69fa      	ldr	r2, [r7, #28]
 8001286:	4613      	mov	r3, r2
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	4413      	add	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	461a      	mov	r2, r3
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	189c      	adds	r4, r3, r2
 8001294:	68f9      	ldr	r1, [r7, #12]
 8001296:	f7ff fe29 	bl	8000eec <__aeabi_fdiv>
 800129a:	4603      	mov	r3, r0
 800129c:	461a      	mov	r2, r3
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        for (int j = 0; j < N; j++)
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	3301      	adds	r3, #1
 80012a8:	61bb      	str	r3, [r7, #24]
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	2b08      	cmp	r3, #8
 80012ae:	ddc3      	ble.n	8001238 <inverter_matriz+0x90>
        }

        for (int k = 0; k < N; k++)
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	e073      	b.n	800139e <inverter_matriz+0x1f6>
        {
            if (k != i)
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d06c      	beq.n	8001398 <inverter_matriz+0x1f0>
            {
                float fator = matriz[k][i];
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	4613      	mov	r3, r2
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	4413      	add	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	461a      	mov	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	69fa      	ldr	r2, [r7, #28]
 80012d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012d4:	60bb      	str	r3, [r7, #8]
                for (int j = 0; j < N; j++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	e05a      	b.n	8001392 <inverter_matriz+0x1ea>
                {
                    matriz[k][j] -= fator * matriz[i][j];
 80012dc:	697a      	ldr	r2, [r7, #20]
 80012de:	4613      	mov	r3, r2
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	4413      	add	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	461a      	mov	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4413      	add	r3, r2
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80012f2:	69fa      	ldr	r2, [r7, #28]
 80012f4:	4613      	mov	r3, r2
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	4413      	add	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	461a      	mov	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001308:	68b9      	ldr	r1, [r7, #8]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fd3a 	bl	8000d84 <__aeabi_fmul>
 8001310:	4603      	mov	r3, r0
 8001312:	4619      	mov	r1, r3
 8001314:	697a      	ldr	r2, [r7, #20]
 8001316:	4613      	mov	r3, r2
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	4413      	add	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	461a      	mov	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	189c      	adds	r4, r3, r2
 8001324:	4628      	mov	r0, r5
 8001326:	f7ff fc23 	bl	8000b70 <__aeabi_fsub>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
                    inversa[k][j] -= fator * inversa[i][j];
 8001334:	697a      	ldr	r2, [r7, #20]
 8001336:	4613      	mov	r3, r2
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	4413      	add	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	461a      	mov	r2, r3
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	4413      	add	r3, r2
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800134a:	69fa      	ldr	r2, [r7, #28]
 800134c:	4613      	mov	r3, r2
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	4413      	add	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	461a      	mov	r2, r3
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	4413      	add	r3, r2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001360:	68b9      	ldr	r1, [r7, #8]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fd0e 	bl	8000d84 <__aeabi_fmul>
 8001368:	4603      	mov	r3, r0
 800136a:	4619      	mov	r1, r3
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	4613      	mov	r3, r2
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	4413      	add	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	461a      	mov	r2, r3
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	189c      	adds	r4, r3, r2
 800137c:	4628      	mov	r0, r5
 800137e:	f7ff fbf7 	bl	8000b70 <__aeabi_fsub>
 8001382:	4603      	mov	r3, r0
 8001384:	461a      	mov	r2, r3
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
                for (int j = 0; j < N; j++)
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	3301      	adds	r3, #1
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	2b08      	cmp	r3, #8
 8001396:	dda1      	ble.n	80012dc <inverter_matriz+0x134>
        for (int k = 0; k < N; k++)
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	3301      	adds	r3, #1
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	2b08      	cmp	r3, #8
 80013a2:	dd88      	ble.n	80012b6 <inverter_matriz+0x10e>
    for (int i = 0; i < N; i++)
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	3301      	adds	r3, #1
 80013a8:	61fb      	str	r3, [r7, #28]
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	2b08      	cmp	r3, #8
 80013ae:	f77f af34 	ble.w	800121a <inverter_matriz+0x72>
                }
            }
        }
    }
}
 80013b2:	bf00      	nop
 80013b4:	bf00      	nop
 80013b6:	3728      	adds	r7, #40	@ 0x28
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bdb0      	pop	{r4, r5, r7, pc}
 80013bc:	0000      	movs	r0, r0
	...

080013c0 <NLLS>:


uint8_t NLLS(float *mx, float *my, float *mz, float *p)
{
 80013c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013c4:	f5ad 3db8 	sub.w	sp, sp, #94208	@ 0x17000
 80013c8:	b091      	sub	sp, #68	@ 0x44
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80013d0:	f844 0c34 	str.w	r0, [r4, #-52]
 80013d4:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80013d8:	f840 1c38 	str.w	r1, [r0, #-56]
 80013dc:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80013e0:	f841 2c3c 	str.w	r2, [r1, #-60]
 80013e4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80013e8:	f842 3c40 	str.w	r3, [r2, #-64]
	uint8_t passo = 0, loop = 1;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80013f2:	f102 023f 	add.w	r2, r2, #63	@ 0x3f
 80013f6:	7013      	strb	r3, [r2, #0]
 80013f8:	2301      	movs	r3, #1
 80013fa:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80013fe:	f102 023e 	add.w	r2, r2, #62	@ 0x3e
 8001402:	7013      	strb	r3, [r2, #0]
	float sf = 1;
 8001404:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001408:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800140c:	f502 72ee 	add.w	r2, r2, #476	@ 0x1dc
 8001410:	6013      	str	r3, [r2, #0]
	float p0[9] = {1, 1, 1, 0, 0, 0, 0, 0, 0}, Be[tam], e[tam], f[tam], sx, sy, sz, bx, by, bz, rho, phi, lambida, error_ant, J, delta_J, mat_H[N][tam];
 8001412:	4bb8      	ldr	r3, [pc, #736]	@ (80016f4 <NLLS+0x334>)
 8001414:	f507 34b7 	add.w	r4, r7, #93696	@ 0x16e00
 8001418:	f504 74ce 	add.w	r4, r4, #412	@ 0x19c
 800141c:	461d      	mov	r5, r3
 800141e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001420:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001422:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001424:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001426:	682b      	ldr	r3, [r5, #0]
 8001428:	6023      	str	r3, [r4, #0]
	float sin_phi, sin_rho, sin_lambda, cos_phi, cos_rho, cos_lambda;
	float Ht_H[N][N], Ht_e[N], inv[N][N], mul_mat[N][tam];

	for (int i=0; i < tam; i++)
 800142a:	2300      	movs	r3, #0
 800142c:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8001430:	f102 020c 	add.w	r2, r2, #12
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	e01c      	b.n	8001472 <NLLS+0xb2>
	{
		Be[i] = 1*sf;
 8001438:	f507 33b0 	add.w	r3, r7, #90112	@ 0x16000
 800143c:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8001440:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001444:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8001448:	f102 020c 	add.w	r2, r2, #12
 800144c:	6812      	ldr	r2, [r2, #0]
 800144e:	f507 31b7 	add.w	r1, r7, #93696	@ 0x16e00
 8001452:	f501 71ee 	add.w	r1, r1, #476	@ 0x1dc
 8001456:	6809      	ldr	r1, [r1, #0]
 8001458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i=0; i < tam; i++)
 800145c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001460:	f103 030c 	add.w	r3, r3, #12
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	3301      	adds	r3, #1
 8001468:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 800146c:	f102 020c 	add.w	r2, r2, #12
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001476:	f103 030c 	add.w	r3, r3, #12
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8001480:	dbda      	blt.n	8001438 <NLLS+0x78>
	}

	while(loop == 1)
 8001482:	f004 bb45 	b.w	8005b10 <NLLS+0x4750>
	{
		sx = p0[0];
 8001486:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800148a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8001494:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8001498:	6013      	str	r3, [r2, #0]
		sy = p0[1];
 800149a:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800149e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80014a8:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 80014ac:	6013      	str	r3, [r2, #0]
		sz = p0[2];
 80014ae:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80014b2:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80014bc:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 80014c0:	6013      	str	r3, [r2, #0]
		bx = p0[3];
 80014c2:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80014c6:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80014d0:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 80014d4:	6013      	str	r3, [r2, #0]
		by = p0[4];
 80014d6:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80014da:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80014e4:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80014e8:	6013      	str	r3, [r2, #0]
		bz = p0[5];
 80014ea:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80014ee:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80014f8:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80014fc:	6013      	str	r3, [r2, #0]
		rho = p0[6];
 80014fe:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001502:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 800150c:	f102 0220 	add.w	r2, r2, #32
 8001510:	6013      	str	r3, [r2, #0]
		phi = p0[7];
 8001512:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001516:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8001520:	f102 021c 	add.w	r2, r2, #28
 8001524:	6013      	str	r3, [r2, #0]
		lambida = p0[8];
 8001526:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800152a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8001534:	f102 0218 	add.w	r2, r2, #24
 8001538:	6013      	str	r3, [r2, #0]

		sin_phi = phi - (phi*phi*phi)/6;// + (phi*phi*phi*phi*phi)/120;
 800153a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800153e:	f103 031c 	add.w	r3, r3, #28
 8001542:	6819      	ldr	r1, [r3, #0]
 8001544:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001548:	f103 031c 	add.w	r3, r3, #28
 800154c:	6818      	ldr	r0, [r3, #0]
 800154e:	f7ff fc19 	bl	8000d84 <__aeabi_fmul>
 8001552:	4603      	mov	r3, r0
 8001554:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8001558:	f102 021c 	add.w	r2, r2, #28
 800155c:	6811      	ldr	r1, [r2, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fc10 	bl	8000d84 <__aeabi_fmul>
 8001564:	4603      	mov	r3, r0
 8001566:	4964      	ldr	r1, [pc, #400]	@ (80016f8 <NLLS+0x338>)
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fcbf 	bl	8000eec <__aeabi_fdiv>
 800156e:	4603      	mov	r3, r0
 8001570:	4619      	mov	r1, r3
 8001572:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001576:	f103 031c 	add.w	r3, r3, #28
 800157a:	6818      	ldr	r0, [r3, #0]
 800157c:	f7ff faf8 	bl	8000b70 <__aeabi_fsub>
 8001580:	4603      	mov	r3, r0
 8001582:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8001586:	f502 72ec 	add.w	r2, r2, #472	@ 0x1d8
 800158a:	6013      	str	r3, [r2, #0]
		sin_rho = rho - (rho*rho*rho)/6;// + (rho*rho*rho*rho*rho)/120;
 800158c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001590:	f103 0320 	add.w	r3, r3, #32
 8001594:	6819      	ldr	r1, [r3, #0]
 8001596:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800159a:	f103 0320 	add.w	r3, r3, #32
 800159e:	6818      	ldr	r0, [r3, #0]
 80015a0:	f7ff fbf0 	bl	8000d84 <__aeabi_fmul>
 80015a4:	4603      	mov	r3, r0
 80015a6:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80015aa:	f102 0220 	add.w	r2, r2, #32
 80015ae:	6811      	ldr	r1, [r2, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fbe7 	bl	8000d84 <__aeabi_fmul>
 80015b6:	4603      	mov	r3, r0
 80015b8:	494f      	ldr	r1, [pc, #316]	@ (80016f8 <NLLS+0x338>)
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff fc96 	bl	8000eec <__aeabi_fdiv>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4619      	mov	r1, r3
 80015c4:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80015c8:	f103 0320 	add.w	r3, r3, #32
 80015cc:	6818      	ldr	r0, [r3, #0]
 80015ce:	f7ff facf 	bl	8000b70 <__aeabi_fsub>
 80015d2:	4603      	mov	r3, r0
 80015d4:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80015d8:	f502 72ea 	add.w	r2, r2, #468	@ 0x1d4
 80015dc:	6013      	str	r3, [r2, #0]
		sin_lambda = lambida - (lambida*lambida*lambida)/6;// + (lambida*lambida*lambida*lambida*lambida)/120;
 80015de:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80015e2:	f103 0318 	add.w	r3, r3, #24
 80015e6:	6819      	ldr	r1, [r3, #0]
 80015e8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80015ec:	f103 0318 	add.w	r3, r3, #24
 80015f0:	6818      	ldr	r0, [r3, #0]
 80015f2:	f7ff fbc7 	bl	8000d84 <__aeabi_fmul>
 80015f6:	4603      	mov	r3, r0
 80015f8:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80015fc:	f102 0218 	add.w	r2, r2, #24
 8001600:	6811      	ldr	r1, [r2, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fbbe 	bl	8000d84 <__aeabi_fmul>
 8001608:	4603      	mov	r3, r0
 800160a:	493b      	ldr	r1, [pc, #236]	@ (80016f8 <NLLS+0x338>)
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fc6d 	bl	8000eec <__aeabi_fdiv>
 8001612:	4603      	mov	r3, r0
 8001614:	4619      	mov	r1, r3
 8001616:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800161a:	f103 0318 	add.w	r3, r3, #24
 800161e:	6818      	ldr	r0, [r3, #0]
 8001620:	f7ff faa6 	bl	8000b70 <__aeabi_fsub>
 8001624:	4603      	mov	r3, r0
 8001626:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800162a:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 800162e:	6013      	str	r3, [r2, #0]
		cos_phi = 1 - (phi*phi)/2;// + (phi*phi*phi*phi)/24;
 8001630:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001634:	f103 031c 	add.w	r3, r3, #28
 8001638:	6819      	ldr	r1, [r3, #0]
 800163a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800163e:	f103 031c 	add.w	r3, r3, #28
 8001642:	6818      	ldr	r0, [r3, #0]
 8001644:	f7ff fb9e 	bl	8000d84 <__aeabi_fmul>
 8001648:	4603      	mov	r3, r0
 800164a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fc4c 	bl	8000eec <__aeabi_fdiv>
 8001654:	4603      	mov	r3, r0
 8001656:	4619      	mov	r1, r3
 8001658:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800165c:	f7ff fa88 	bl	8000b70 <__aeabi_fsub>
 8001660:	4603      	mov	r3, r0
 8001662:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8001666:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 800166a:	6013      	str	r3, [r2, #0]
		cos_rho = 1 - (rho*rho)/2;// + (rho*rho*rho*rho)/24;
 800166c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001670:	f103 0320 	add.w	r3, r3, #32
 8001674:	6819      	ldr	r1, [r3, #0]
 8001676:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800167a:	f103 0320 	add.w	r3, r3, #32
 800167e:	6818      	ldr	r0, [r3, #0]
 8001680:	f7ff fb80 	bl	8000d84 <__aeabi_fmul>
 8001684:	4603      	mov	r3, r0
 8001686:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff fc2e 	bl	8000eec <__aeabi_fdiv>
 8001690:	4603      	mov	r3, r0
 8001692:	4619      	mov	r1, r3
 8001694:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001698:	f7ff fa6a 	bl	8000b70 <__aeabi_fsub>
 800169c:	4603      	mov	r3, r0
 800169e:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80016a2:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 80016a6:	6013      	str	r3, [r2, #0]
		cos_lambda = 1 - (lambida*lambida)/2;// + (lambida*lambida*lambida*lambida)/24;
 80016a8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80016ac:	f103 0318 	add.w	r3, r3, #24
 80016b0:	6819      	ldr	r1, [r3, #0]
 80016b2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80016b6:	f103 0318 	add.w	r3, r3, #24
 80016ba:	6818      	ldr	r0, [r3, #0]
 80016bc:	f7ff fb62 	bl	8000d84 <__aeabi_fmul>
 80016c0:	4603      	mov	r3, r0
 80016c2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fc10 	bl	8000eec <__aeabi_fdiv>
 80016cc:	4603      	mov	r3, r0
 80016ce:	4619      	mov	r1, r3
 80016d0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80016d4:	f7ff fa4c 	bl	8000b70 <__aeabi_fsub>
 80016d8:	4603      	mov	r3, r0
 80016da:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80016de:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 80016e2:	6013      	str	r3, [r2, #0]

		for(int i=0; i < tam; i++)
 80016e4:	2300      	movs	r3, #0
 80016e6:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80016ea:	f102 0208 	add.w	r2, r2, #8
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	f003 beda 	b.w	80054a8 <NLLS+0x40e8>
 80016f4:	0800ec80 	.word	0x0800ec80
 80016f8:	40c00000 	.word	0x40c00000
		{
			f[i] = ((mx[i]-bx)*(mx[i]-bx))/(sx*sx) + ((sx*(my[i]-by) - sy*sin_rho*(mx[i]-bx))*((sx*(my[i]-by) - sy*sin_rho*(mx[i]-bx))))/((sx*sy*cos_rho)*(sx*sy*cos_rho)) + ((sx*sy*cos_rho*(mz[i]-bz) - sx*sz*sin_lambda*(my[i]-by) + sy*sz*(sin_lambda*sin_rho - cos_rho*sin_phi*cos_lambda)*(mx[i]-bx))*(sx*sy*cos_rho*(mz[i]-bz) - sx*sz*sin_lambda*(my[i]-by) + sy*sz*(sin_lambda*sin_rho - cos_rho*sin_phi*cos_lambda)*(mx[i]-bx)))/((sx*sy*sz*cos_rho*cos_phi*cos_lambda)*(sx*sy*sz*cos_rho*cos_phi*cos_lambda));
 80016fc:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001700:	f103 0308 	add.w	r3, r3, #8
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800170c:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8001710:	4413      	add	r3, r2
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8001718:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 800171c:	6811      	ldr	r1, [r2, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fa26 	bl	8000b70 <__aeabi_fsub>
 8001724:	4603      	mov	r3, r0
 8001726:	461c      	mov	r4, r3
 8001728:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800172c:	f103 0308 	add.w	r3, r3, #8
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001738:	f852 2c34 	ldr.w	r2, [r2, #-52]
 800173c:	4413      	add	r3, r2
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8001744:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8001748:	6811      	ldr	r1, [r2, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff fa10 	bl	8000b70 <__aeabi_fsub>
 8001750:	4603      	mov	r3, r0
 8001752:	4619      	mov	r1, r3
 8001754:	4620      	mov	r0, r4
 8001756:	f7ff fb15 	bl	8000d84 <__aeabi_fmul>
 800175a:	4603      	mov	r3, r0
 800175c:	461c      	mov	r4, r3
 800175e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001762:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001766:	6819      	ldr	r1, [r3, #0]
 8001768:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800176c:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001770:	6818      	ldr	r0, [r3, #0]
 8001772:	f7ff fb07 	bl	8000d84 <__aeabi_fmul>
 8001776:	4603      	mov	r3, r0
 8001778:	4619      	mov	r1, r3
 800177a:	4620      	mov	r0, r4
 800177c:	f7ff fbb6 	bl	8000eec <__aeabi_fdiv>
 8001780:	4603      	mov	r3, r0
 8001782:	461c      	mov	r4, r3
 8001784:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001788:	f103 0308 	add.w	r3, r3, #8
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001794:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8001798:	4413      	add	r3, r2
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80017a0:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80017a4:	6811      	ldr	r1, [r2, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff f9e2 	bl	8000b70 <__aeabi_fsub>
 80017ac:	4603      	mov	r3, r0
 80017ae:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80017b2:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 80017b6:	6811      	ldr	r1, [r2, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fae3 	bl	8000d84 <__aeabi_fmul>
 80017be:	4603      	mov	r3, r0
 80017c0:	461d      	mov	r5, r3
 80017c2:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80017c6:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 80017ca:	6819      	ldr	r1, [r3, #0]
 80017cc:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80017d0:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80017d4:	6818      	ldr	r0, [r3, #0]
 80017d6:	f7ff fad5 	bl	8000d84 <__aeabi_fmul>
 80017da:	4603      	mov	r3, r0
 80017dc:	461e      	mov	r6, r3
 80017de:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80017e2:	f103 0308 	add.w	r3, r3, #8
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80017ee:	f852 2c34 	ldr.w	r2, [r2, #-52]
 80017f2:	4413      	add	r3, r2
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80017fa:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 80017fe:	6811      	ldr	r1, [r2, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff f9b5 	bl	8000b70 <__aeabi_fsub>
 8001806:	4603      	mov	r3, r0
 8001808:	4619      	mov	r1, r3
 800180a:	4630      	mov	r0, r6
 800180c:	f7ff faba 	bl	8000d84 <__aeabi_fmul>
 8001810:	4603      	mov	r3, r0
 8001812:	4619      	mov	r1, r3
 8001814:	4628      	mov	r0, r5
 8001816:	f7ff f9ab 	bl	8000b70 <__aeabi_fsub>
 800181a:	4603      	mov	r3, r0
 800181c:	461d      	mov	r5, r3
 800181e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001822:	f103 0308 	add.w	r3, r3, #8
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800182e:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8001832:	4413      	add	r3, r2
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 800183a:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800183e:	6811      	ldr	r1, [r2, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff f995 	bl	8000b70 <__aeabi_fsub>
 8001846:	4603      	mov	r3, r0
 8001848:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 800184c:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8001850:	6811      	ldr	r1, [r2, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fa96 	bl	8000d84 <__aeabi_fmul>
 8001858:	4603      	mov	r3, r0
 800185a:	461e      	mov	r6, r3
 800185c:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001860:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8001864:	6819      	ldr	r1, [r3, #0]
 8001866:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800186a:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	f7ff fa88 	bl	8000d84 <__aeabi_fmul>
 8001874:	4603      	mov	r3, r0
 8001876:	4698      	mov	r8, r3
 8001878:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800187c:	f103 0308 	add.w	r3, r3, #8
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001888:	f852 2c34 	ldr.w	r2, [r2, #-52]
 800188c:	4413      	add	r3, r2
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8001894:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8001898:	6811      	ldr	r1, [r2, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff f968 	bl	8000b70 <__aeabi_fsub>
 80018a0:	4603      	mov	r3, r0
 80018a2:	4619      	mov	r1, r3
 80018a4:	4640      	mov	r0, r8
 80018a6:	f7ff fa6d 	bl	8000d84 <__aeabi_fmul>
 80018aa:	4603      	mov	r3, r0
 80018ac:	4619      	mov	r1, r3
 80018ae:	4630      	mov	r0, r6
 80018b0:	f7ff f95e 	bl	8000b70 <__aeabi_fsub>
 80018b4:	4603      	mov	r3, r0
 80018b6:	4619      	mov	r1, r3
 80018b8:	4628      	mov	r0, r5
 80018ba:	f7ff fa63 	bl	8000d84 <__aeabi_fmul>
 80018be:	4603      	mov	r3, r0
 80018c0:	461d      	mov	r5, r3
 80018c2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80018c6:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80018ca:	6819      	ldr	r1, [r3, #0]
 80018cc:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80018d0:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80018d4:	6818      	ldr	r0, [r3, #0]
 80018d6:	f7ff fa55 	bl	8000d84 <__aeabi_fmul>
 80018da:	4603      	mov	r3, r0
 80018dc:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80018e0:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 80018e4:	6811      	ldr	r1, [r2, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff fa4c 	bl	8000d84 <__aeabi_fmul>
 80018ec:	4603      	mov	r3, r0
 80018ee:	461e      	mov	r6, r3
 80018f0:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80018f4:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80018f8:	6819      	ldr	r1, [r3, #0]
 80018fa:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80018fe:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001902:	6818      	ldr	r0, [r3, #0]
 8001904:	f7ff fa3e 	bl	8000d84 <__aeabi_fmul>
 8001908:	4603      	mov	r3, r0
 800190a:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800190e:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8001912:	6811      	ldr	r1, [r2, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fa35 	bl	8000d84 <__aeabi_fmul>
 800191a:	4603      	mov	r3, r0
 800191c:	4619      	mov	r1, r3
 800191e:	4630      	mov	r0, r6
 8001920:	f7ff fa30 	bl	8000d84 <__aeabi_fmul>
 8001924:	4603      	mov	r3, r0
 8001926:	4619      	mov	r1, r3
 8001928:	4628      	mov	r0, r5
 800192a:	f7ff fadf 	bl	8000eec <__aeabi_fdiv>
 800192e:	4603      	mov	r3, r0
 8001930:	4619      	mov	r1, r3
 8001932:	4620      	mov	r0, r4
 8001934:	f7ff f91e 	bl	8000b74 <__addsf3>
 8001938:	4603      	mov	r3, r0
 800193a:	461c      	mov	r4, r3
 800193c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001940:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001944:	6819      	ldr	r1, [r3, #0]
 8001946:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800194a:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800194e:	6818      	ldr	r0, [r3, #0]
 8001950:	f7ff fa18 	bl	8000d84 <__aeabi_fmul>
 8001954:	4603      	mov	r3, r0
 8001956:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800195a:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 800195e:	6811      	ldr	r1, [r2, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fa0f 	bl	8000d84 <__aeabi_fmul>
 8001966:	4603      	mov	r3, r0
 8001968:	461d      	mov	r5, r3
 800196a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800196e:	f103 0308 	add.w	r3, r3, #8
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800197a:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 800197e:	4413      	add	r3, r2
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8001986:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 800198a:	6811      	ldr	r1, [r2, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff f8ef 	bl	8000b70 <__aeabi_fsub>
 8001992:	4603      	mov	r3, r0
 8001994:	4619      	mov	r1, r3
 8001996:	4628      	mov	r0, r5
 8001998:	f7ff f9f4 	bl	8000d84 <__aeabi_fmul>
 800199c:	4603      	mov	r3, r0
 800199e:	461d      	mov	r5, r3
 80019a0:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80019a4:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80019a8:	6819      	ldr	r1, [r3, #0]
 80019aa:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80019ae:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80019b2:	6818      	ldr	r0, [r3, #0]
 80019b4:	f7ff f9e6 	bl	8000d84 <__aeabi_fmul>
 80019b8:	4603      	mov	r3, r0
 80019ba:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80019be:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 80019c2:	6811      	ldr	r1, [r2, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff f9dd 	bl	8000d84 <__aeabi_fmul>
 80019ca:	4603      	mov	r3, r0
 80019cc:	461e      	mov	r6, r3
 80019ce:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80019d2:	f103 0308 	add.w	r3, r3, #8
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80019de:	f852 2c38 	ldr.w	r2, [r2, #-56]
 80019e2:	4413      	add	r3, r2
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80019ea:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80019ee:	6811      	ldr	r1, [r2, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff f8bd 	bl	8000b70 <__aeabi_fsub>
 80019f6:	4603      	mov	r3, r0
 80019f8:	4619      	mov	r1, r3
 80019fa:	4630      	mov	r0, r6
 80019fc:	f7ff f9c2 	bl	8000d84 <__aeabi_fmul>
 8001a00:	4603      	mov	r3, r0
 8001a02:	4619      	mov	r1, r3
 8001a04:	4628      	mov	r0, r5
 8001a06:	f7ff f8b3 	bl	8000b70 <__aeabi_fsub>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	461d      	mov	r5, r3
 8001a0e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001a12:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001a16:	6819      	ldr	r1, [r3, #0]
 8001a18:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001a1c:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001a20:	6818      	ldr	r0, [r3, #0]
 8001a22:	f7ff f9af 	bl	8000d84 <__aeabi_fmul>
 8001a26:	4603      	mov	r3, r0
 8001a28:	461e      	mov	r6, r3
 8001a2a:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001a2e:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8001a32:	6819      	ldr	r1, [r3, #0]
 8001a34:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001a38:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8001a3c:	6818      	ldr	r0, [r3, #0]
 8001a3e:	f7ff f9a1 	bl	8000d84 <__aeabi_fmul>
 8001a42:	4603      	mov	r3, r0
 8001a44:	4698      	mov	r8, r3
 8001a46:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001a4a:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8001a4e:	6819      	ldr	r1, [r3, #0]
 8001a50:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001a54:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001a58:	6818      	ldr	r0, [r3, #0]
 8001a5a:	f7ff f993 	bl	8000d84 <__aeabi_fmul>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8001a64:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 8001a68:	6811      	ldr	r1, [r2, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff f98a 	bl	8000d84 <__aeabi_fmul>
 8001a70:	4603      	mov	r3, r0
 8001a72:	4619      	mov	r1, r3
 8001a74:	4640      	mov	r0, r8
 8001a76:	f7ff f87b 	bl	8000b70 <__aeabi_fsub>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4630      	mov	r0, r6
 8001a80:	f7ff f980 	bl	8000d84 <__aeabi_fmul>
 8001a84:	4603      	mov	r3, r0
 8001a86:	461e      	mov	r6, r3
 8001a88:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001a8c:	f103 0308 	add.w	r3, r3, #8
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001a98:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8001aa4:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8001aa8:	6811      	ldr	r1, [r2, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff f860 	bl	8000b70 <__aeabi_fsub>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4630      	mov	r0, r6
 8001ab6:	f7ff f965 	bl	8000d84 <__aeabi_fmul>
 8001aba:	4603      	mov	r3, r0
 8001abc:	4619      	mov	r1, r3
 8001abe:	4628      	mov	r0, r5
 8001ac0:	f7ff f858 	bl	8000b74 <__addsf3>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	461d      	mov	r5, r3
 8001ac8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001acc:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001ad0:	6819      	ldr	r1, [r3, #0]
 8001ad2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001ad6:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001ada:	6818      	ldr	r0, [r3, #0]
 8001adc:	f7ff f952 	bl	8000d84 <__aeabi_fmul>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8001ae6:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8001aea:	6811      	ldr	r1, [r2, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff f949 	bl	8000d84 <__aeabi_fmul>
 8001af2:	4603      	mov	r3, r0
 8001af4:	461e      	mov	r6, r3
 8001af6:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001afa:	f103 0308 	add.w	r3, r3, #8
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001b06:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8001b12:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8001b16:	6811      	ldr	r1, [r2, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff f829 	bl	8000b70 <__aeabi_fsub>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4619      	mov	r1, r3
 8001b22:	4630      	mov	r0, r6
 8001b24:	f7ff f92e 	bl	8000d84 <__aeabi_fmul>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	461e      	mov	r6, r3
 8001b2c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001b30:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001b34:	6819      	ldr	r1, [r3, #0]
 8001b36:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001b3a:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001b3e:	6818      	ldr	r0, [r3, #0]
 8001b40:	f7ff f920 	bl	8000d84 <__aeabi_fmul>
 8001b44:	4603      	mov	r3, r0
 8001b46:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8001b4a:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 8001b4e:	6811      	ldr	r1, [r2, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff f917 	bl	8000d84 <__aeabi_fmul>
 8001b56:	4603      	mov	r3, r0
 8001b58:	4698      	mov	r8, r3
 8001b5a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001b5e:	f103 0308 	add.w	r3, r3, #8
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001b6a:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8001b6e:	4413      	add	r3, r2
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8001b76:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001b7a:	6811      	ldr	r1, [r2, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fff7 	bl	8000b70 <__aeabi_fsub>
 8001b82:	4603      	mov	r3, r0
 8001b84:	4619      	mov	r1, r3
 8001b86:	4640      	mov	r0, r8
 8001b88:	f7ff f8fc 	bl	8000d84 <__aeabi_fmul>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4630      	mov	r0, r6
 8001b92:	f7fe ffed 	bl	8000b70 <__aeabi_fsub>
 8001b96:	4603      	mov	r3, r0
 8001b98:	461e      	mov	r6, r3
 8001b9a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001b9e:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001ba2:	6819      	ldr	r1, [r3, #0]
 8001ba4:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001ba8:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001bac:	6818      	ldr	r0, [r3, #0]
 8001bae:	f7ff f8e9 	bl	8000d84 <__aeabi_fmul>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	4698      	mov	r8, r3
 8001bb6:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001bba:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8001bbe:	6819      	ldr	r1, [r3, #0]
 8001bc0:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001bc4:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8001bc8:	6818      	ldr	r0, [r3, #0]
 8001bca:	f7ff f8db 	bl	8000d84 <__aeabi_fmul>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4699      	mov	r9, r3
 8001bd2:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001bd6:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8001bda:	6819      	ldr	r1, [r3, #0]
 8001bdc:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001be0:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001be4:	6818      	ldr	r0, [r3, #0]
 8001be6:	f7ff f8cd 	bl	8000d84 <__aeabi_fmul>
 8001bea:	4603      	mov	r3, r0
 8001bec:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8001bf0:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 8001bf4:	6811      	ldr	r1, [r2, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff f8c4 	bl	8000d84 <__aeabi_fmul>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4648      	mov	r0, r9
 8001c02:	f7fe ffb5 	bl	8000b70 <__aeabi_fsub>
 8001c06:	4603      	mov	r3, r0
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4640      	mov	r0, r8
 8001c0c:	f7ff f8ba 	bl	8000d84 <__aeabi_fmul>
 8001c10:	4603      	mov	r3, r0
 8001c12:	4698      	mov	r8, r3
 8001c14:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001c18:	f103 0308 	add.w	r3, r3, #8
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001c24:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8001c28:	4413      	add	r3, r2
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8001c30:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8001c34:	6811      	ldr	r1, [r2, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe ff9a 	bl	8000b70 <__aeabi_fsub>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4640      	mov	r0, r8
 8001c42:	f7ff f89f 	bl	8000d84 <__aeabi_fmul>
 8001c46:	4603      	mov	r3, r0
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4630      	mov	r0, r6
 8001c4c:	f7fe ff92 	bl	8000b74 <__addsf3>
 8001c50:	4603      	mov	r3, r0
 8001c52:	4619      	mov	r1, r3
 8001c54:	4628      	mov	r0, r5
 8001c56:	f7ff f895 	bl	8000d84 <__aeabi_fmul>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	461d      	mov	r5, r3
 8001c5e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001c62:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001c66:	6819      	ldr	r1, [r3, #0]
 8001c68:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001c6c:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001c70:	6818      	ldr	r0, [r3, #0]
 8001c72:	f7ff f887 	bl	8000d84 <__aeabi_fmul>
 8001c76:	4603      	mov	r3, r0
 8001c78:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8001c7c:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8001c80:	6811      	ldr	r1, [r2, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff f87e 	bl	8000d84 <__aeabi_fmul>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8001c8e:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8001c92:	6811      	ldr	r1, [r2, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff f875 	bl	8000d84 <__aeabi_fmul>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8001ca0:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 8001ca4:	6811      	ldr	r1, [r2, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff f86c 	bl	8000d84 <__aeabi_fmul>
 8001cac:	4603      	mov	r3, r0
 8001cae:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8001cb2:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 8001cb6:	6811      	ldr	r1, [r2, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff f863 	bl	8000d84 <__aeabi_fmul>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	461e      	mov	r6, r3
 8001cc2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001cc6:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001cca:	6819      	ldr	r1, [r3, #0]
 8001ccc:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001cd0:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001cd4:	6818      	ldr	r0, [r3, #0]
 8001cd6:	f7ff f855 	bl	8000d84 <__aeabi_fmul>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8001ce0:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8001ce4:	6811      	ldr	r1, [r2, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff f84c 	bl	8000d84 <__aeabi_fmul>
 8001cec:	4603      	mov	r3, r0
 8001cee:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8001cf2:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8001cf6:	6811      	ldr	r1, [r2, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff f843 	bl	8000d84 <__aeabi_fmul>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8001d04:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 8001d08:	6811      	ldr	r1, [r2, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff f83a 	bl	8000d84 <__aeabi_fmul>
 8001d10:	4603      	mov	r3, r0
 8001d12:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8001d16:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 8001d1a:	6811      	ldr	r1, [r2, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff f831 	bl	8000d84 <__aeabi_fmul>
 8001d22:	4603      	mov	r3, r0
 8001d24:	4619      	mov	r1, r3
 8001d26:	4630      	mov	r0, r6
 8001d28:	f7ff f82c 	bl	8000d84 <__aeabi_fmul>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4628      	mov	r0, r5
 8001d32:	f7ff f8db 	bl	8000eec <__aeabi_fdiv>
 8001d36:	4603      	mov	r3, r0
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	f7fe ff1a 	bl	8000b74 <__addsf3>
 8001d40:	4603      	mov	r3, r0
 8001d42:	4619      	mov	r1, r3
 8001d44:	f507 33a0 	add.w	r3, r7, #81920	@ 0x14000
 8001d48:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8001d4c:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8001d50:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8001d54:	f102 0208 	add.w	r2, r2, #8
 8001d58:	6812      	ldr	r2, [r2, #0]
 8001d5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			e[i] = (Be[i] * Be[i]) - f[i];
 8001d5e:	f507 33b0 	add.w	r3, r7, #90112	@ 0x16000
 8001d62:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8001d66:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d6a:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8001d6e:	f102 0208 	add.w	r2, r2, #8
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001d78:	f507 33b0 	add.w	r3, r7, #90112	@ 0x16000
 8001d7c:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8001d80:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d84:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8001d88:	f102 0208 	add.w	r2, r2, #8
 8001d8c:	6812      	ldr	r2, [r2, #0]
 8001d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d92:	4619      	mov	r1, r3
 8001d94:	f7fe fff6 	bl	8000d84 <__aeabi_fmul>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f507 33a0 	add.w	r3, r7, #81920	@ 0x14000
 8001da0:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8001da4:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8001da8:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8001dac:	f102 0208 	add.w	r2, r2, #8
 8001db0:	6812      	ldr	r2, [r2, #0]
 8001db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db6:	4619      	mov	r1, r3
 8001db8:	f7fe feda 	bl	8000b70 <__aeabi_fsub>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	f507 33a8 	add.w	r3, r7, #86016	@ 0x15000
 8001dc4:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8001dc8:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8001dcc:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8001dd0:	f102 0208 	add.w	r2, r2, #8
 8001dd4:	6812      	ldr	r2, [r2, #0]
 8001dd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			mat_H[0][i] = (2*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))*(by - my[i]))/(sx*sx*sy*sy*cos_rho*cos_rho) - (2*((sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))))/((sx*sx*sx)*sy*sy*cos_rho*cos_rho) - (2*((bx - mx[i])*(bx - mx[i])))/(sx*sx*sx) - (2*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])) * (sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/((sx*sx*sx)*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho) + (2*(sy*cos_rho*(bz - mz[i]) - sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8001dda:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001dde:	f103 0308 	add.w	r3, r3, #8
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001dea:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8001dee:	4413      	add	r3, r2
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4619      	mov	r1, r3
 8001df4:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001df8:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001dfc:	6818      	ldr	r0, [r3, #0]
 8001dfe:	f7fe feb7 	bl	8000b70 <__aeabi_fsub>
 8001e02:	4603      	mov	r3, r0
 8001e04:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8001e08:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8001e0c:	6811      	ldr	r1, [r2, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe ffb8 	bl	8000d84 <__aeabi_fmul>
 8001e14:	4603      	mov	r3, r0
 8001e16:	461c      	mov	r4, r3
 8001e18:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001e1c:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8001e20:	6819      	ldr	r1, [r3, #0]
 8001e22:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001e26:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001e2a:	6818      	ldr	r0, [r3, #0]
 8001e2c:	f7fe ffaa 	bl	8000d84 <__aeabi_fmul>
 8001e30:	4603      	mov	r3, r0
 8001e32:	461d      	mov	r5, r3
 8001e34:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001e38:	f103 0308 	add.w	r3, r3, #8
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001e44:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8001e48:	4413      	add	r3, r2
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001e52:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001e56:	6818      	ldr	r0, [r3, #0]
 8001e58:	f7fe fe8a 	bl	8000b70 <__aeabi_fsub>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4628      	mov	r0, r5
 8001e62:	f7fe ff8f 	bl	8000d84 <__aeabi_fmul>
 8001e66:	4603      	mov	r3, r0
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	f7fe fe80 	bl	8000b70 <__aeabi_fsub>
 8001e70:	4603      	mov	r3, r0
 8001e72:	4619      	mov	r1, r3
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe fe7d 	bl	8000b74 <__addsf3>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	461c      	mov	r4, r3
 8001e7e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001e82:	f103 0308 	add.w	r3, r3, #8
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001e8e:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8001e92:	4413      	add	r3, r2
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4619      	mov	r1, r3
 8001e98:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001e9c:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001ea0:	6818      	ldr	r0, [r3, #0]
 8001ea2:	f7fe fe65 	bl	8000b70 <__aeabi_fsub>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4620      	mov	r0, r4
 8001eac:	f7fe ff6a 	bl	8000d84 <__aeabi_fmul>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	461c      	mov	r4, r3
 8001eb4:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001eb8:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001ebc:	6819      	ldr	r1, [r3, #0]
 8001ebe:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001ec2:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	f7fe ff5c 	bl	8000d84 <__aeabi_fmul>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8001ed2:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8001ed6:	6811      	ldr	r1, [r2, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe ff53 	bl	8000d84 <__aeabi_fmul>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8001ee4:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8001ee8:	6811      	ldr	r1, [r2, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe ff4a 	bl	8000d84 <__aeabi_fmul>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8001ef6:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8001efa:	6811      	ldr	r1, [r2, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe ff41 	bl	8000d84 <__aeabi_fmul>
 8001f02:	4603      	mov	r3, r0
 8001f04:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8001f08:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8001f0c:	6811      	ldr	r1, [r2, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7fe ff38 	bl	8000d84 <__aeabi_fmul>
 8001f14:	4603      	mov	r3, r0
 8001f16:	4619      	mov	r1, r3
 8001f18:	4620      	mov	r0, r4
 8001f1a:	f7fe ffe7 	bl	8000eec <__aeabi_fdiv>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	461c      	mov	r4, r3
 8001f22:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001f26:	f103 0308 	add.w	r3, r3, #8
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001f32:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8001f36:	4413      	add	r3, r2
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001f40:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001f44:	6818      	ldr	r0, [r3, #0]
 8001f46:	f7fe fe13 	bl	8000b70 <__aeabi_fsub>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8001f50:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8001f54:	6811      	ldr	r1, [r2, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe ff14 	bl	8000d84 <__aeabi_fmul>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	461d      	mov	r5, r3
 8001f60:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001f64:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8001f68:	6819      	ldr	r1, [r3, #0]
 8001f6a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001f6e:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001f72:	6818      	ldr	r0, [r3, #0]
 8001f74:	f7fe ff06 	bl	8000d84 <__aeabi_fmul>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	461e      	mov	r6, r3
 8001f7c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001f80:	f103 0308 	add.w	r3, r3, #8
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001f8c:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8001f90:	4413      	add	r3, r2
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4619      	mov	r1, r3
 8001f96:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001f9a:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001f9e:	6818      	ldr	r0, [r3, #0]
 8001fa0:	f7fe fde6 	bl	8000b70 <__aeabi_fsub>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4630      	mov	r0, r6
 8001faa:	f7fe feeb 	bl	8000d84 <__aeabi_fmul>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4628      	mov	r0, r5
 8001fb4:	f7fe fddc 	bl	8000b70 <__aeabi_fsub>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	461d      	mov	r5, r3
 8001fbc:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001fc0:	f103 0308 	add.w	r3, r3, #8
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001fcc:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001fda:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001fde:	6818      	ldr	r0, [r3, #0]
 8001fe0:	f7fe fdc6 	bl	8000b70 <__aeabi_fsub>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8001fea:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8001fee:	6811      	ldr	r1, [r2, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe fec7 	bl	8000d84 <__aeabi_fmul>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	461e      	mov	r6, r3
 8001ffa:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001ffe:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8002002:	6819      	ldr	r1, [r3, #0]
 8002004:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002008:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800200c:	6818      	ldr	r0, [r3, #0]
 800200e:	f7fe feb9 	bl	8000d84 <__aeabi_fmul>
 8002012:	4603      	mov	r3, r0
 8002014:	4698      	mov	r8, r3
 8002016:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800201a:	f103 0308 	add.w	r3, r3, #8
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002026:	f852 2c34 	ldr.w	r2, [r2, #-52]
 800202a:	4413      	add	r3, r2
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4619      	mov	r1, r3
 8002030:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002034:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8002038:	6818      	ldr	r0, [r3, #0]
 800203a:	f7fe fd99 	bl	8000b70 <__aeabi_fsub>
 800203e:	4603      	mov	r3, r0
 8002040:	4619      	mov	r1, r3
 8002042:	4640      	mov	r0, r8
 8002044:	f7fe fe9e 	bl	8000d84 <__aeabi_fmul>
 8002048:	4603      	mov	r3, r0
 800204a:	4619      	mov	r1, r3
 800204c:	4630      	mov	r0, r6
 800204e:	f7fe fd8f 	bl	8000b70 <__aeabi_fsub>
 8002052:	4603      	mov	r3, r0
 8002054:	4619      	mov	r1, r3
 8002056:	4628      	mov	r0, r5
 8002058:	f7fe fe94 	bl	8000d84 <__aeabi_fmul>
 800205c:	4603      	mov	r3, r0
 800205e:	4619      	mov	r1, r3
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe fd87 	bl	8000b74 <__addsf3>
 8002066:	4603      	mov	r3, r0
 8002068:	461d      	mov	r5, r3
 800206a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800206e:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002072:	6819      	ldr	r1, [r3, #0]
 8002074:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002078:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800207c:	6818      	ldr	r0, [r3, #0]
 800207e:	f7fe fe81 	bl	8000d84 <__aeabi_fmul>
 8002082:	4603      	mov	r3, r0
 8002084:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8002088:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 800208c:	6811      	ldr	r1, [r2, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe fe78 	bl	8000d84 <__aeabi_fmul>
 8002094:	4603      	mov	r3, r0
 8002096:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 800209a:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 800209e:	6811      	ldr	r1, [r2, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe fe6f 	bl	8000d84 <__aeabi_fmul>
 80020a6:	4603      	mov	r3, r0
 80020a8:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80020ac:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 80020b0:	6811      	ldr	r1, [r2, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fe66 	bl	8000d84 <__aeabi_fmul>
 80020b8:	4603      	mov	r3, r0
 80020ba:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80020be:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 80020c2:	6811      	ldr	r1, [r2, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe fe5d 	bl	8000d84 <__aeabi_fmul>
 80020ca:	4603      	mov	r3, r0
 80020cc:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80020d0:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 80020d4:	6811      	ldr	r1, [r2, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe fe54 	bl	8000d84 <__aeabi_fmul>
 80020dc:	4603      	mov	r3, r0
 80020de:	4619      	mov	r1, r3
 80020e0:	4628      	mov	r0, r5
 80020e2:	f7fe ff03 	bl	8000eec <__aeabi_fdiv>
 80020e6:	4603      	mov	r3, r0
 80020e8:	4619      	mov	r1, r3
 80020ea:	4620      	mov	r0, r4
 80020ec:	f7fe fd40 	bl	8000b70 <__aeabi_fsub>
 80020f0:	4603      	mov	r3, r0
 80020f2:	461c      	mov	r4, r3
 80020f4:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80020f8:	f103 0308 	add.w	r3, r3, #8
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002104:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8002108:	4413      	add	r3, r2
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4619      	mov	r1, r3
 800210e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002112:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8002116:	6818      	ldr	r0, [r3, #0]
 8002118:	f7fe fd2a 	bl	8000b70 <__aeabi_fsub>
 800211c:	4603      	mov	r3, r0
 800211e:	461d      	mov	r5, r3
 8002120:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002124:	f103 0308 	add.w	r3, r3, #8
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002130:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8002134:	4413      	add	r3, r2
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4619      	mov	r1, r3
 800213a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800213e:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8002142:	6818      	ldr	r0, [r3, #0]
 8002144:	f7fe fd14 	bl	8000b70 <__aeabi_fsub>
 8002148:	4603      	mov	r3, r0
 800214a:	4619      	mov	r1, r3
 800214c:	4628      	mov	r0, r5
 800214e:	f7fe fe19 	bl	8000d84 <__aeabi_fmul>
 8002152:	4603      	mov	r3, r0
 8002154:	4619      	mov	r1, r3
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe fd0c 	bl	8000b74 <__addsf3>
 800215c:	4603      	mov	r3, r0
 800215e:	461d      	mov	r5, r3
 8002160:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002164:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002168:	6819      	ldr	r1, [r3, #0]
 800216a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800216e:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002172:	6818      	ldr	r0, [r3, #0]
 8002174:	f7fe fe06 	bl	8000d84 <__aeabi_fmul>
 8002178:	4603      	mov	r3, r0
 800217a:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 800217e:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8002182:	6811      	ldr	r1, [r2, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f7fe fdfd 	bl	8000d84 <__aeabi_fmul>
 800218a:	4603      	mov	r3, r0
 800218c:	4619      	mov	r1, r3
 800218e:	4628      	mov	r0, r5
 8002190:	f7fe feac 	bl	8000eec <__aeabi_fdiv>
 8002194:	4603      	mov	r3, r0
 8002196:	4619      	mov	r1, r3
 8002198:	4620      	mov	r0, r4
 800219a:	f7fe fce9 	bl	8000b70 <__aeabi_fsub>
 800219e:	4603      	mov	r3, r0
 80021a0:	461c      	mov	r4, r3
 80021a2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80021a6:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80021aa:	6819      	ldr	r1, [r3, #0]
 80021ac:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80021b0:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80021b4:	6818      	ldr	r0, [r3, #0]
 80021b6:	f7fe fde5 	bl	8000d84 <__aeabi_fmul>
 80021ba:	4603      	mov	r3, r0
 80021bc:	461d      	mov	r5, r3
 80021be:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80021c2:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 80021c6:	6819      	ldr	r1, [r3, #0]
 80021c8:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80021cc:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80021d0:	6818      	ldr	r0, [r3, #0]
 80021d2:	f7fe fdd7 	bl	8000d84 <__aeabi_fmul>
 80021d6:	4603      	mov	r3, r0
 80021d8:	461e      	mov	r6, r3
 80021da:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80021de:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 80021e2:	6819      	ldr	r1, [r3, #0]
 80021e4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80021e8:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 80021ec:	6818      	ldr	r0, [r3, #0]
 80021ee:	f7fe fdc9 	bl	8000d84 <__aeabi_fmul>
 80021f2:	4603      	mov	r3, r0
 80021f4:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80021f8:	f502 72ec 	add.w	r2, r2, #472	@ 0x1d8
 80021fc:	6811      	ldr	r1, [r2, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7fe fdc0 	bl	8000d84 <__aeabi_fmul>
 8002204:	4603      	mov	r3, r0
 8002206:	4619      	mov	r1, r3
 8002208:	4630      	mov	r0, r6
 800220a:	f7fe fcb1 	bl	8000b70 <__aeabi_fsub>
 800220e:	4603      	mov	r3, r0
 8002210:	4619      	mov	r1, r3
 8002212:	4628      	mov	r0, r5
 8002214:	f7fe fdb6 	bl	8000d84 <__aeabi_fmul>
 8002218:	4603      	mov	r3, r0
 800221a:	461d      	mov	r5, r3
 800221c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002220:	f103 0308 	add.w	r3, r3, #8
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800222c:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8002230:	4413      	add	r3, r2
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4619      	mov	r1, r3
 8002236:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800223a:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	f7fe fc96 	bl	8000b70 <__aeabi_fsub>
 8002244:	4603      	mov	r3, r0
 8002246:	4619      	mov	r1, r3
 8002248:	4628      	mov	r0, r5
 800224a:	f7fe fd9b 	bl	8000d84 <__aeabi_fmul>
 800224e:	4603      	mov	r3, r0
 8002250:	461d      	mov	r5, r3
 8002252:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002256:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800225a:	6819      	ldr	r1, [r3, #0]
 800225c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002260:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002264:	6818      	ldr	r0, [r3, #0]
 8002266:	f7fe fd8d 	bl	8000d84 <__aeabi_fmul>
 800226a:	4603      	mov	r3, r0
 800226c:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002270:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8002274:	6811      	ldr	r1, [r2, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe fd84 	bl	8000d84 <__aeabi_fmul>
 800227c:	4603      	mov	r3, r0
 800227e:	461e      	mov	r6, r3
 8002280:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002284:	f103 0308 	add.w	r3, r3, #8
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002290:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8002294:	4413      	add	r3, r2
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4619      	mov	r1, r3
 800229a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800229e:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80022a2:	6818      	ldr	r0, [r3, #0]
 80022a4:	f7fe fc64 	bl	8000b70 <__aeabi_fsub>
 80022a8:	4603      	mov	r3, r0
 80022aa:	4619      	mov	r1, r3
 80022ac:	4630      	mov	r0, r6
 80022ae:	f7fe fd69 	bl	8000d84 <__aeabi_fmul>
 80022b2:	4603      	mov	r3, r0
 80022b4:	4619      	mov	r1, r3
 80022b6:	4628      	mov	r0, r5
 80022b8:	f7fe fc5c 	bl	8000b74 <__addsf3>
 80022bc:	4603      	mov	r3, r0
 80022be:	461d      	mov	r5, r3
 80022c0:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80022c4:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80022c8:	6819      	ldr	r1, [r3, #0]
 80022ca:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80022ce:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80022d2:	6818      	ldr	r0, [r3, #0]
 80022d4:	f7fe fd56 	bl	8000d84 <__aeabi_fmul>
 80022d8:	4603      	mov	r3, r0
 80022da:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80022de:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 80022e2:	6811      	ldr	r1, [r2, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe fd4d 	bl	8000d84 <__aeabi_fmul>
 80022ea:	4603      	mov	r3, r0
 80022ec:	461e      	mov	r6, r3
 80022ee:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80022f2:	f103 0308 	add.w	r3, r3, #8
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80022fe:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8002302:	4413      	add	r3, r2
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4619      	mov	r1, r3
 8002308:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800230c:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002310:	6818      	ldr	r0, [r3, #0]
 8002312:	f7fe fc2d 	bl	8000b70 <__aeabi_fsub>
 8002316:	4603      	mov	r3, r0
 8002318:	4619      	mov	r1, r3
 800231a:	4630      	mov	r0, r6
 800231c:	f7fe fd32 	bl	8000d84 <__aeabi_fmul>
 8002320:	4603      	mov	r3, r0
 8002322:	4619      	mov	r1, r3
 8002324:	4628      	mov	r0, r5
 8002326:	f7fe fc23 	bl	8000b70 <__aeabi_fsub>
 800232a:	4603      	mov	r3, r0
 800232c:	461d      	mov	r5, r3
 800232e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002332:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8002336:	6819      	ldr	r1, [r3, #0]
 8002338:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800233c:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8002340:	6818      	ldr	r0, [r3, #0]
 8002342:	f7fe fd1f 	bl	8000d84 <__aeabi_fmul>
 8002346:	4603      	mov	r3, r0
 8002348:	461e      	mov	r6, r3
 800234a:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800234e:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8002352:	6819      	ldr	r1, [r3, #0]
 8002354:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002358:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 800235c:	6818      	ldr	r0, [r3, #0]
 800235e:	f7fe fd11 	bl	8000d84 <__aeabi_fmul>
 8002362:	4603      	mov	r3, r0
 8002364:	4698      	mov	r8, r3
 8002366:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800236a:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 800236e:	6819      	ldr	r1, [r3, #0]
 8002370:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002374:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8002378:	6818      	ldr	r0, [r3, #0]
 800237a:	f7fe fd03 	bl	8000d84 <__aeabi_fmul>
 800237e:	4603      	mov	r3, r0
 8002380:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002384:	f502 72ec 	add.w	r2, r2, #472	@ 0x1d8
 8002388:	6811      	ldr	r1, [r2, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe fcfa 	bl	8000d84 <__aeabi_fmul>
 8002390:	4603      	mov	r3, r0
 8002392:	4619      	mov	r1, r3
 8002394:	4640      	mov	r0, r8
 8002396:	f7fe fbeb 	bl	8000b70 <__aeabi_fsub>
 800239a:	4603      	mov	r3, r0
 800239c:	4619      	mov	r1, r3
 800239e:	4630      	mov	r0, r6
 80023a0:	f7fe fcf0 	bl	8000d84 <__aeabi_fmul>
 80023a4:	4603      	mov	r3, r0
 80023a6:	461e      	mov	r6, r3
 80023a8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80023ac:	f103 0308 	add.w	r3, r3, #8
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80023b8:	f852 2c34 	ldr.w	r2, [r2, #-52]
 80023bc:	4413      	add	r3, r2
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4619      	mov	r1, r3
 80023c2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80023c6:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80023ca:	6818      	ldr	r0, [r3, #0]
 80023cc:	f7fe fbd0 	bl	8000b70 <__aeabi_fsub>
 80023d0:	4603      	mov	r3, r0
 80023d2:	4619      	mov	r1, r3
 80023d4:	4630      	mov	r0, r6
 80023d6:	f7fe fcd5 	bl	8000d84 <__aeabi_fmul>
 80023da:	4603      	mov	r3, r0
 80023dc:	461e      	mov	r6, r3
 80023de:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80023e2:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80023e6:	6819      	ldr	r1, [r3, #0]
 80023e8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80023ec:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80023f0:	6818      	ldr	r0, [r3, #0]
 80023f2:	f7fe fcc7 	bl	8000d84 <__aeabi_fmul>
 80023f6:	4603      	mov	r3, r0
 80023f8:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80023fc:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8002400:	6811      	ldr	r1, [r2, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe fcbe 	bl	8000d84 <__aeabi_fmul>
 8002408:	4603      	mov	r3, r0
 800240a:	4698      	mov	r8, r3
 800240c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002410:	f103 0308 	add.w	r3, r3, #8
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800241c:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8002420:	4413      	add	r3, r2
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4619      	mov	r1, r3
 8002426:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800242a:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800242e:	6818      	ldr	r0, [r3, #0]
 8002430:	f7fe fb9e 	bl	8000b70 <__aeabi_fsub>
 8002434:	4603      	mov	r3, r0
 8002436:	4619      	mov	r1, r3
 8002438:	4640      	mov	r0, r8
 800243a:	f7fe fca3 	bl	8000d84 <__aeabi_fmul>
 800243e:	4603      	mov	r3, r0
 8002440:	4619      	mov	r1, r3
 8002442:	4630      	mov	r0, r6
 8002444:	f7fe fb96 	bl	8000b74 <__addsf3>
 8002448:	4603      	mov	r3, r0
 800244a:	461e      	mov	r6, r3
 800244c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002450:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8002454:	6819      	ldr	r1, [r3, #0]
 8002456:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800245a:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800245e:	6818      	ldr	r0, [r3, #0]
 8002460:	f7fe fc90 	bl	8000d84 <__aeabi_fmul>
 8002464:	4603      	mov	r3, r0
 8002466:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800246a:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 800246e:	6811      	ldr	r1, [r2, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f7fe fc87 	bl	8000d84 <__aeabi_fmul>
 8002476:	4603      	mov	r3, r0
 8002478:	4698      	mov	r8, r3
 800247a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800247e:	f103 0308 	add.w	r3, r3, #8
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800248a:	f852 2c38 	ldr.w	r2, [r2, #-56]
 800248e:	4413      	add	r3, r2
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4619      	mov	r1, r3
 8002494:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002498:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800249c:	6818      	ldr	r0, [r3, #0]
 800249e:	f7fe fb67 	bl	8000b70 <__aeabi_fsub>
 80024a2:	4603      	mov	r3, r0
 80024a4:	4619      	mov	r1, r3
 80024a6:	4640      	mov	r0, r8
 80024a8:	f7fe fc6c 	bl	8000d84 <__aeabi_fmul>
 80024ac:	4603      	mov	r3, r0
 80024ae:	4619      	mov	r1, r3
 80024b0:	4630      	mov	r0, r6
 80024b2:	f7fe fb5d 	bl	8000b70 <__aeabi_fsub>
 80024b6:	4603      	mov	r3, r0
 80024b8:	4619      	mov	r1, r3
 80024ba:	4628      	mov	r0, r5
 80024bc:	f7fe fc62 	bl	8000d84 <__aeabi_fmul>
 80024c0:	4603      	mov	r3, r0
 80024c2:	4619      	mov	r1, r3
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fe fb55 	bl	8000b74 <__addsf3>
 80024ca:	4603      	mov	r3, r0
 80024cc:	461d      	mov	r5, r3
 80024ce:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80024d2:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80024d6:	6819      	ldr	r1, [r3, #0]
 80024d8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80024dc:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80024e0:	6818      	ldr	r0, [r3, #0]
 80024e2:	f7fe fc4f 	bl	8000d84 <__aeabi_fmul>
 80024e6:	4603      	mov	r3, r0
 80024e8:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80024ec:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 80024f0:	6811      	ldr	r1, [r2, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe fc46 	bl	8000d84 <__aeabi_fmul>
 80024f8:	4603      	mov	r3, r0
 80024fa:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80024fe:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8002502:	6811      	ldr	r1, [r2, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f7fe fc3d 	bl	8000d84 <__aeabi_fmul>
 800250a:	4603      	mov	r3, r0
 800250c:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8002510:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8002514:	6811      	ldr	r1, [r2, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe fc34 	bl	8000d84 <__aeabi_fmul>
 800251c:	4603      	mov	r3, r0
 800251e:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8002522:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8002526:	6811      	ldr	r1, [r2, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f7fe fc2b 	bl	8000d84 <__aeabi_fmul>
 800252e:	4603      	mov	r3, r0
 8002530:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8002534:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8002538:	6811      	ldr	r1, [r2, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f7fe fc22 	bl	8000d84 <__aeabi_fmul>
 8002540:	4603      	mov	r3, r0
 8002542:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002546:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 800254a:	6811      	ldr	r1, [r2, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f7fe fc19 	bl	8000d84 <__aeabi_fmul>
 8002552:	4603      	mov	r3, r0
 8002554:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002558:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 800255c:	6811      	ldr	r1, [r2, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe fc10 	bl	8000d84 <__aeabi_fmul>
 8002564:	4603      	mov	r3, r0
 8002566:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800256a:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 800256e:	6811      	ldr	r1, [r2, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7fe fc07 	bl	8000d84 <__aeabi_fmul>
 8002576:	4603      	mov	r3, r0
 8002578:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800257c:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 8002580:	6811      	ldr	r1, [r2, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe fbfe 	bl	8000d84 <__aeabi_fmul>
 8002588:	4603      	mov	r3, r0
 800258a:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800258e:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8002592:	6811      	ldr	r1, [r2, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f7fe fbf5 	bl	8000d84 <__aeabi_fmul>
 800259a:	4603      	mov	r3, r0
 800259c:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80025a0:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 80025a4:	6811      	ldr	r1, [r2, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fe fbec 	bl	8000d84 <__aeabi_fmul>
 80025ac:	4603      	mov	r3, r0
 80025ae:	4619      	mov	r1, r3
 80025b0:	4628      	mov	r0, r5
 80025b2:	f7fe fc9b 	bl	8000eec <__aeabi_fdiv>
 80025b6:	4603      	mov	r3, r0
 80025b8:	4619      	mov	r1, r3
 80025ba:	4620      	mov	r0, r4
 80025bc:	f7fe fad8 	bl	8000b70 <__aeabi_fsub>
 80025c0:	4603      	mov	r3, r0
 80025c2:	461c      	mov	r4, r3
 80025c4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80025c8:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 80025cc:	6819      	ldr	r1, [r3, #0]
 80025ce:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80025d2:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	f7fe fbd4 	bl	8000d84 <__aeabi_fmul>
 80025dc:	4603      	mov	r3, r0
 80025de:	461d      	mov	r5, r3
 80025e0:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80025e4:	f103 0308 	add.w	r3, r3, #8
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80025f0:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 80025f4:	4413      	add	r3, r2
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4619      	mov	r1, r3
 80025fa:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80025fe:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8002602:	6818      	ldr	r0, [r3, #0]
 8002604:	f7fe fab4 	bl	8000b70 <__aeabi_fsub>
 8002608:	4603      	mov	r3, r0
 800260a:	4619      	mov	r1, r3
 800260c:	4628      	mov	r0, r5
 800260e:	f7fe fbb9 	bl	8000d84 <__aeabi_fmul>
 8002612:	4603      	mov	r3, r0
 8002614:	461d      	mov	r5, r3
 8002616:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800261a:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 800261e:	6819      	ldr	r1, [r3, #0]
 8002620:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002624:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8002628:	6818      	ldr	r0, [r3, #0]
 800262a:	f7fe fbab 	bl	8000d84 <__aeabi_fmul>
 800262e:	4603      	mov	r3, r0
 8002630:	461e      	mov	r6, r3
 8002632:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002636:	f103 0308 	add.w	r3, r3, #8
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002642:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8002646:	4413      	add	r3, r2
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4619      	mov	r1, r3
 800264c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002650:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	f7fe fa8b 	bl	8000b70 <__aeabi_fsub>
 800265a:	4603      	mov	r3, r0
 800265c:	4619      	mov	r1, r3
 800265e:	4630      	mov	r0, r6
 8002660:	f7fe fb90 	bl	8000d84 <__aeabi_fmul>
 8002664:	4603      	mov	r3, r0
 8002666:	4619      	mov	r1, r3
 8002668:	4628      	mov	r0, r5
 800266a:	f7fe fa81 	bl	8000b70 <__aeabi_fsub>
 800266e:	4603      	mov	r3, r0
 8002670:	4619      	mov	r1, r3
 8002672:	4618      	mov	r0, r3
 8002674:	f7fe fa7e 	bl	8000b74 <__addsf3>
 8002678:	4603      	mov	r3, r0
 800267a:	461d      	mov	r5, r3
 800267c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002680:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8002684:	6819      	ldr	r1, [r3, #0]
 8002686:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800268a:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	f7fe fb78 	bl	8000d84 <__aeabi_fmul>
 8002694:	4603      	mov	r3, r0
 8002696:	461e      	mov	r6, r3
 8002698:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800269c:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 80026a0:	6819      	ldr	r1, [r3, #0]
 80026a2:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80026a6:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80026aa:	6818      	ldr	r0, [r3, #0]
 80026ac:	f7fe fb6a 	bl	8000d84 <__aeabi_fmul>
 80026b0:	4603      	mov	r3, r0
 80026b2:	4698      	mov	r8, r3
 80026b4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80026b8:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 80026bc:	6819      	ldr	r1, [r3, #0]
 80026be:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80026c2:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 80026c6:	6818      	ldr	r0, [r3, #0]
 80026c8:	f7fe fb5c 	bl	8000d84 <__aeabi_fmul>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80026d2:	f502 72ec 	add.w	r2, r2, #472	@ 0x1d8
 80026d6:	6811      	ldr	r1, [r2, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fe fb53 	bl	8000d84 <__aeabi_fmul>
 80026de:	4603      	mov	r3, r0
 80026e0:	4619      	mov	r1, r3
 80026e2:	4640      	mov	r0, r8
 80026e4:	f7fe fa44 	bl	8000b70 <__aeabi_fsub>
 80026e8:	4603      	mov	r3, r0
 80026ea:	4619      	mov	r1, r3
 80026ec:	4630      	mov	r0, r6
 80026ee:	f7fe fb49 	bl	8000d84 <__aeabi_fmul>
 80026f2:	4603      	mov	r3, r0
 80026f4:	461e      	mov	r6, r3
 80026f6:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80026fa:	f103 0308 	add.w	r3, r3, #8
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002706:	f852 2c34 	ldr.w	r2, [r2, #-52]
 800270a:	4413      	add	r3, r2
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4619      	mov	r1, r3
 8002710:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002714:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8002718:	6818      	ldr	r0, [r3, #0]
 800271a:	f7fe fa29 	bl	8000b70 <__aeabi_fsub>
 800271e:	4603      	mov	r3, r0
 8002720:	4619      	mov	r1, r3
 8002722:	4630      	mov	r0, r6
 8002724:	f7fe fb2e 	bl	8000d84 <__aeabi_fmul>
 8002728:	4603      	mov	r3, r0
 800272a:	461e      	mov	r6, r3
 800272c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002730:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8002734:	6819      	ldr	r1, [r3, #0]
 8002736:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800273a:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	f7fe fb20 	bl	8000d84 <__aeabi_fmul>
 8002744:	4603      	mov	r3, r0
 8002746:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800274a:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 800274e:	6811      	ldr	r1, [r2, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f7fe fb17 	bl	8000d84 <__aeabi_fmul>
 8002756:	4603      	mov	r3, r0
 8002758:	4698      	mov	r8, r3
 800275a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800275e:	f103 0308 	add.w	r3, r3, #8
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800276a:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 800276e:	4413      	add	r3, r2
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4619      	mov	r1, r3
 8002774:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002778:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800277c:	6818      	ldr	r0, [r3, #0]
 800277e:	f7fe f9f7 	bl	8000b70 <__aeabi_fsub>
 8002782:	4603      	mov	r3, r0
 8002784:	4619      	mov	r1, r3
 8002786:	4640      	mov	r0, r8
 8002788:	f7fe fafc 	bl	8000d84 <__aeabi_fmul>
 800278c:	4603      	mov	r3, r0
 800278e:	4619      	mov	r1, r3
 8002790:	4630      	mov	r0, r6
 8002792:	f7fe f9ef 	bl	8000b74 <__addsf3>
 8002796:	4603      	mov	r3, r0
 8002798:	461e      	mov	r6, r3
 800279a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800279e:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80027a2:	6819      	ldr	r1, [r3, #0]
 80027a4:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80027a8:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80027ac:	6818      	ldr	r0, [r3, #0]
 80027ae:	f7fe fae9 	bl	8000d84 <__aeabi_fmul>
 80027b2:	4603      	mov	r3, r0
 80027b4:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80027b8:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 80027bc:	6811      	ldr	r1, [r2, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fe fae0 	bl	8000d84 <__aeabi_fmul>
 80027c4:	4603      	mov	r3, r0
 80027c6:	4698      	mov	r8, r3
 80027c8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80027cc:	f103 0308 	add.w	r3, r3, #8
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80027d8:	f852 2c38 	ldr.w	r2, [r2, #-56]
 80027dc:	4413      	add	r3, r2
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4619      	mov	r1, r3
 80027e2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80027e6:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80027ea:	6818      	ldr	r0, [r3, #0]
 80027ec:	f7fe f9c0 	bl	8000b70 <__aeabi_fsub>
 80027f0:	4603      	mov	r3, r0
 80027f2:	4619      	mov	r1, r3
 80027f4:	4640      	mov	r0, r8
 80027f6:	f7fe fac5 	bl	8000d84 <__aeabi_fmul>
 80027fa:	4603      	mov	r3, r0
 80027fc:	4619      	mov	r1, r3
 80027fe:	4630      	mov	r0, r6
 8002800:	f7fe f9b6 	bl	8000b70 <__aeabi_fsub>
 8002804:	4603      	mov	r3, r0
 8002806:	4619      	mov	r1, r3
 8002808:	4628      	mov	r0, r5
 800280a:	f7fe fabb 	bl	8000d84 <__aeabi_fmul>
 800280e:	4603      	mov	r3, r0
 8002810:	461d      	mov	r5, r3
 8002812:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002816:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800281a:	6819      	ldr	r1, [r3, #0]
 800281c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002820:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002824:	6818      	ldr	r0, [r3, #0]
 8002826:	f7fe faad 	bl	8000d84 <__aeabi_fmul>
 800282a:	4603      	mov	r3, r0
 800282c:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8002830:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8002834:	6811      	ldr	r1, [r2, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7fe faa4 	bl	8000d84 <__aeabi_fmul>
 800283c:	4603      	mov	r3, r0
 800283e:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8002842:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8002846:	6811      	ldr	r1, [r2, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f7fe fa9b 	bl	8000d84 <__aeabi_fmul>
 800284e:	4603      	mov	r3, r0
 8002850:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8002854:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8002858:	6811      	ldr	r1, [r2, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f7fe fa92 	bl	8000d84 <__aeabi_fmul>
 8002860:	4603      	mov	r3, r0
 8002862:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8002866:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 800286a:	6811      	ldr	r1, [r2, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f7fe fa89 	bl	8000d84 <__aeabi_fmul>
 8002872:	4603      	mov	r3, r0
 8002874:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002878:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 800287c:	6811      	ldr	r1, [r2, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f7fe fa80 	bl	8000d84 <__aeabi_fmul>
 8002884:	4603      	mov	r3, r0
 8002886:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800288a:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 800288e:	6811      	ldr	r1, [r2, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f7fe fa77 	bl	8000d84 <__aeabi_fmul>
 8002896:	4603      	mov	r3, r0
 8002898:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800289c:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 80028a0:	6811      	ldr	r1, [r2, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe fa6e 	bl	8000d84 <__aeabi_fmul>
 80028a8:	4603      	mov	r3, r0
 80028aa:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80028ae:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 80028b2:	6811      	ldr	r1, [r2, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fe fa65 	bl	8000d84 <__aeabi_fmul>
 80028ba:	4603      	mov	r3, r0
 80028bc:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80028c0:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 80028c4:	6811      	ldr	r1, [r2, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe fa5c 	bl	8000d84 <__aeabi_fmul>
 80028cc:	4603      	mov	r3, r0
 80028ce:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80028d2:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 80028d6:	6811      	ldr	r1, [r2, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fe fa53 	bl	8000d84 <__aeabi_fmul>
 80028de:	4603      	mov	r3, r0
 80028e0:	4619      	mov	r1, r3
 80028e2:	4628      	mov	r0, r5
 80028e4:	f7fe fb02 	bl	8000eec <__aeabi_fdiv>
 80028e8:	4603      	mov	r3, r0
 80028ea:	4619      	mov	r1, r3
 80028ec:	4620      	mov	r0, r4
 80028ee:	f7fe f941 	bl	8000b74 <__addsf3>
 80028f2:	4603      	mov	r3, r0
 80028f4:	4619      	mov	r1, r3
 80028f6:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 80028fa:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80028fe:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002902:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8002906:	f102 0208 	add.w	r2, r2, #8
 800290a:	6812      	ldr	r2, [r2, #0]
 800290c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			mat_H[1][i] = -(2*(by - my[i])*(by*sx*sz*sin_lambda*sin_lambda - my[i]*sx*sz*sin_lambda*sin_lambda + by*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - my[i]*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - bz*sx*sy*cos_rho*sin_lambda + mz[i]*sx*sy*cos_rho*sin_lambda - bx*sy*sz*sin_lambda*sin_lambda*sin_rho + mx[i]*sy*sz*sin_lambda*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + mx[i]*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + bx*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi - mx[i]*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi))/(sx*(sy*sy*sy)*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8002910:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002914:	f103 0308 	add.w	r3, r3, #8
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002920:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8002924:	4413      	add	r3, r2
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4619      	mov	r1, r3
 800292a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800292e:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002932:	6818      	ldr	r0, [r3, #0]
 8002934:	f7fe f91c 	bl	8000b70 <__aeabi_fsub>
 8002938:	4603      	mov	r3, r0
 800293a:	4619      	mov	r1, r3
 800293c:	4618      	mov	r0, r3
 800293e:	f7fe f919 	bl	8000b74 <__addsf3>
 8002942:	4603      	mov	r3, r0
 8002944:	461c      	mov	r4, r3
 8002946:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800294a:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800294e:	6819      	ldr	r1, [r3, #0]
 8002950:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002954:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002958:	6818      	ldr	r0, [r3, #0]
 800295a:	f7fe fa13 	bl	8000d84 <__aeabi_fmul>
 800295e:	4603      	mov	r3, r0
 8002960:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8002964:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8002968:	6811      	ldr	r1, [r2, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7fe fa0a 	bl	8000d84 <__aeabi_fmul>
 8002970:	4603      	mov	r3, r0
 8002972:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002976:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 800297a:	6811      	ldr	r1, [r2, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f7fe fa01 	bl	8000d84 <__aeabi_fmul>
 8002982:	4603      	mov	r3, r0
 8002984:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002988:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 800298c:	6811      	ldr	r1, [r2, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f7fe f9f8 	bl	8000d84 <__aeabi_fmul>
 8002994:	4603      	mov	r3, r0
 8002996:	461d      	mov	r5, r3
 8002998:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800299c:	f103 0308 	add.w	r3, r3, #8
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80029a8:	f852 2c38 	ldr.w	r2, [r2, #-56]
 80029ac:	4413      	add	r3, r2
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80029b4:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 80029b8:	6811      	ldr	r1, [r2, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe f9e2 	bl	8000d84 <__aeabi_fmul>
 80029c0:	4603      	mov	r3, r0
 80029c2:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80029c6:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 80029ca:	6811      	ldr	r1, [r2, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fe f9d9 	bl	8000d84 <__aeabi_fmul>
 80029d2:	4603      	mov	r3, r0
 80029d4:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80029d8:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 80029dc:	6811      	ldr	r1, [r2, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fe f9d0 	bl	8000d84 <__aeabi_fmul>
 80029e4:	4603      	mov	r3, r0
 80029e6:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80029ea:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 80029ee:	6811      	ldr	r1, [r2, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fe f9c7 	bl	8000d84 <__aeabi_fmul>
 80029f6:	4603      	mov	r3, r0
 80029f8:	4619      	mov	r1, r3
 80029fa:	4628      	mov	r0, r5
 80029fc:	f7fe f8b8 	bl	8000b70 <__aeabi_fsub>
 8002a00:	4603      	mov	r3, r0
 8002a02:	461d      	mov	r5, r3
 8002a04:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002a08:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002a0c:	6819      	ldr	r1, [r3, #0]
 8002a0e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002a12:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002a16:	6818      	ldr	r0, [r3, #0]
 8002a18:	f7fe f9b4 	bl	8000d84 <__aeabi_fmul>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8002a22:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8002a26:	6811      	ldr	r1, [r2, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fe f9ab 	bl	8000d84 <__aeabi_fmul>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002a34:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 8002a38:	6811      	ldr	r1, [r2, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7fe f9a2 	bl	8000d84 <__aeabi_fmul>
 8002a40:	4603      	mov	r3, r0
 8002a42:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002a46:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 8002a4a:	6811      	ldr	r1, [r2, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fe f999 	bl	8000d84 <__aeabi_fmul>
 8002a52:	4603      	mov	r3, r0
 8002a54:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002a58:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 8002a5c:	6811      	ldr	r1, [r2, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fe f990 	bl	8000d84 <__aeabi_fmul>
 8002a64:	4603      	mov	r3, r0
 8002a66:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002a6a:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 8002a6e:	6811      	ldr	r1, [r2, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fe f987 	bl	8000d84 <__aeabi_fmul>
 8002a76:	4603      	mov	r3, r0
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4628      	mov	r0, r5
 8002a7c:	f7fe f87a 	bl	8000b74 <__addsf3>
 8002a80:	4603      	mov	r3, r0
 8002a82:	461d      	mov	r5, r3
 8002a84:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002a88:	f103 0308 	add.w	r3, r3, #8
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002a94:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8002a98:	4413      	add	r3, r2
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8002aa0:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8002aa4:	6811      	ldr	r1, [r2, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fe f96c 	bl	8000d84 <__aeabi_fmul>
 8002aac:	4603      	mov	r3, r0
 8002aae:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8002ab2:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8002ab6:	6811      	ldr	r1, [r2, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7fe f963 	bl	8000d84 <__aeabi_fmul>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002ac4:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 8002ac8:	6811      	ldr	r1, [r2, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fe f95a 	bl	8000d84 <__aeabi_fmul>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002ad6:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 8002ada:	6811      	ldr	r1, [r2, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fe f951 	bl	8000d84 <__aeabi_fmul>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002ae8:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 8002aec:	6811      	ldr	r1, [r2, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fe f948 	bl	8000d84 <__aeabi_fmul>
 8002af4:	4603      	mov	r3, r0
 8002af6:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002afa:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 8002afe:	6811      	ldr	r1, [r2, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7fe f93f 	bl	8000d84 <__aeabi_fmul>
 8002b06:	4603      	mov	r3, r0
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4628      	mov	r0, r5
 8002b0c:	f7fe f830 	bl	8000b70 <__aeabi_fsub>
 8002b10:	4603      	mov	r3, r0
 8002b12:	461d      	mov	r5, r3
 8002b14:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002b18:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002b1c:	6819      	ldr	r1, [r3, #0]
 8002b1e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002b22:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8002b26:	6818      	ldr	r0, [r3, #0]
 8002b28:	f7fe f92c 	bl	8000d84 <__aeabi_fmul>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8002b32:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8002b36:	6811      	ldr	r1, [r2, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fe f923 	bl	8000d84 <__aeabi_fmul>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002b44:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8002b48:	6811      	ldr	r1, [r2, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe f91a 	bl	8000d84 <__aeabi_fmul>
 8002b50:	4603      	mov	r3, r0
 8002b52:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002b56:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 8002b5a:	6811      	ldr	r1, [r2, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fe f911 	bl	8000d84 <__aeabi_fmul>
 8002b62:	4603      	mov	r3, r0
 8002b64:	4619      	mov	r1, r3
 8002b66:	4628      	mov	r0, r5
 8002b68:	f7fe f802 	bl	8000b70 <__aeabi_fsub>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	461d      	mov	r5, r3
 8002b70:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002b74:	f103 0308 	add.w	r3, r3, #8
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002b80:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8002b84:	4413      	add	r3, r2
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8002b8c:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8002b90:	6811      	ldr	r1, [r2, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fe f8f6 	bl	8000d84 <__aeabi_fmul>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8002b9e:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8002ba2:	6811      	ldr	r1, [r2, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fe f8ed 	bl	8000d84 <__aeabi_fmul>
 8002baa:	4603      	mov	r3, r0
 8002bac:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002bb0:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8002bb4:	6811      	ldr	r1, [r2, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fe f8e4 	bl	8000d84 <__aeabi_fmul>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002bc2:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 8002bc6:	6811      	ldr	r1, [r2, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fe f8db 	bl	8000d84 <__aeabi_fmul>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4628      	mov	r0, r5
 8002bd4:	f7fd ffce 	bl	8000b74 <__addsf3>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	461d      	mov	r5, r3
 8002bdc:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002be0:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8002be4:	6819      	ldr	r1, [r3, #0]
 8002be6:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002bea:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	f7fe f8c8 	bl	8000d84 <__aeabi_fmul>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8002bfa:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8002bfe:	6811      	ldr	r1, [r2, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7fe f8bf 	bl	8000d84 <__aeabi_fmul>
 8002c06:	4603      	mov	r3, r0
 8002c08:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002c0c:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 8002c10:	6811      	ldr	r1, [r2, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fe f8b6 	bl	8000d84 <__aeabi_fmul>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002c1e:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 8002c22:	6811      	ldr	r1, [r2, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fe f8ad 	bl	8000d84 <__aeabi_fmul>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002c30:	f502 72ea 	add.w	r2, r2, #468	@ 0x1d4
 8002c34:	6811      	ldr	r1, [r2, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fe f8a4 	bl	8000d84 <__aeabi_fmul>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4628      	mov	r0, r5
 8002c42:	f7fd ff95 	bl	8000b70 <__aeabi_fsub>
 8002c46:	4603      	mov	r3, r0
 8002c48:	461d      	mov	r5, r3
 8002c4a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002c4e:	f103 0308 	add.w	r3, r3, #8
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002c5a:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8002c5e:	4413      	add	r3, r2
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8002c66:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8002c6a:	6811      	ldr	r1, [r2, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fe f889 	bl	8000d84 <__aeabi_fmul>
 8002c72:	4603      	mov	r3, r0
 8002c74:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8002c78:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8002c7c:	6811      	ldr	r1, [r2, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fe f880 	bl	8000d84 <__aeabi_fmul>
 8002c84:	4603      	mov	r3, r0
 8002c86:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002c8a:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 8002c8e:	6811      	ldr	r1, [r2, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fe f877 	bl	8000d84 <__aeabi_fmul>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002c9c:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 8002ca0:	6811      	ldr	r1, [r2, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fe f86e 	bl	8000d84 <__aeabi_fmul>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002cae:	f502 72ea 	add.w	r2, r2, #468	@ 0x1d4
 8002cb2:	6811      	ldr	r1, [r2, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fe f865 	bl	8000d84 <__aeabi_fmul>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4628      	mov	r0, r5
 8002cc0:	f7fd ff58 	bl	8000b74 <__addsf3>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	461d      	mov	r5, r3
 8002cc8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002ccc:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8002cd0:	6819      	ldr	r1, [r3, #0]
 8002cd2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002cd6:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8002cda:	6818      	ldr	r0, [r3, #0]
 8002cdc:	f7fe f852 	bl	8000d84 <__aeabi_fmul>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8002ce6:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8002cea:	6811      	ldr	r1, [r2, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7fe f849 	bl	8000d84 <__aeabi_fmul>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002cf8:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 8002cfc:	6811      	ldr	r1, [r2, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fe f840 	bl	8000d84 <__aeabi_fmul>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002d0a:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 8002d0e:	6811      	ldr	r1, [r2, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fe f837 	bl	8000d84 <__aeabi_fmul>
 8002d16:	4603      	mov	r3, r0
 8002d18:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002d1c:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 8002d20:	6811      	ldr	r1, [r2, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fe f82e 	bl	8000d84 <__aeabi_fmul>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002d2e:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 8002d32:	6811      	ldr	r1, [r2, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fe f825 	bl	8000d84 <__aeabi_fmul>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002d40:	f502 72ea 	add.w	r2, r2, #468	@ 0x1d4
 8002d44:	6811      	ldr	r1, [r2, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fe f81c 	bl	8000d84 <__aeabi_fmul>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4628      	mov	r0, r5
 8002d52:	f7fd ff0d 	bl	8000b70 <__aeabi_fsub>
 8002d56:	4603      	mov	r3, r0
 8002d58:	461d      	mov	r5, r3
 8002d5a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002d5e:	f103 0308 	add.w	r3, r3, #8
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002d6a:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8002d6e:	4413      	add	r3, r2
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8002d76:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8002d7a:	6811      	ldr	r1, [r2, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fe f801 	bl	8000d84 <__aeabi_fmul>
 8002d82:	4603      	mov	r3, r0
 8002d84:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8002d88:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8002d8c:	6811      	ldr	r1, [r2, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fd fff8 	bl	8000d84 <__aeabi_fmul>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002d9a:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 8002d9e:	6811      	ldr	r1, [r2, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7fd ffef 	bl	8000d84 <__aeabi_fmul>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002dac:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 8002db0:	6811      	ldr	r1, [r2, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fd ffe6 	bl	8000d84 <__aeabi_fmul>
 8002db8:	4603      	mov	r3, r0
 8002dba:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002dbe:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 8002dc2:	6811      	ldr	r1, [r2, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fd ffdd 	bl	8000d84 <__aeabi_fmul>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002dd0:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 8002dd4:	6811      	ldr	r1, [r2, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fd ffd4 	bl	8000d84 <__aeabi_fmul>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002de2:	f502 72ea 	add.w	r2, r2, #468	@ 0x1d4
 8002de6:	6811      	ldr	r1, [r2, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fd ffcb 	bl	8000d84 <__aeabi_fmul>
 8002dee:	4603      	mov	r3, r0
 8002df0:	4619      	mov	r1, r3
 8002df2:	4628      	mov	r0, r5
 8002df4:	f7fd febe 	bl	8000b74 <__addsf3>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	461d      	mov	r5, r3
 8002dfc:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002e00:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8002e04:	6819      	ldr	r1, [r3, #0]
 8002e06:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002e0a:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8002e0e:	6818      	ldr	r0, [r3, #0]
 8002e10:	f7fd ffb8 	bl	8000d84 <__aeabi_fmul>
 8002e14:	4603      	mov	r3, r0
 8002e16:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8002e1a:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8002e1e:	6811      	ldr	r1, [r2, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7fd ffaf 	bl	8000d84 <__aeabi_fmul>
 8002e26:	4603      	mov	r3, r0
 8002e28:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002e2c:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 8002e30:	6811      	ldr	r1, [r2, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fd ffa6 	bl	8000d84 <__aeabi_fmul>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002e3e:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8002e42:	6811      	ldr	r1, [r2, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fd ff9d 	bl	8000d84 <__aeabi_fmul>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002e50:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 8002e54:	6811      	ldr	r1, [r2, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fd ff94 	bl	8000d84 <__aeabi_fmul>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002e62:	f502 72ec 	add.w	r2, r2, #472	@ 0x1d8
 8002e66:	6811      	ldr	r1, [r2, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fd ff8b 	bl	8000d84 <__aeabi_fmul>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	4619      	mov	r1, r3
 8002e72:	4628      	mov	r0, r5
 8002e74:	f7fd fe7e 	bl	8000b74 <__addsf3>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	461d      	mov	r5, r3
 8002e7c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002e80:	f103 0308 	add.w	r3, r3, #8
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002e8c:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8002e90:	4413      	add	r3, r2
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8002e98:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8002e9c:	6811      	ldr	r1, [r2, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fd ff70 	bl	8000d84 <__aeabi_fmul>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8002eaa:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8002eae:	6811      	ldr	r1, [r2, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fd ff67 	bl	8000d84 <__aeabi_fmul>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002ebc:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 8002ec0:	6811      	ldr	r1, [r2, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7fd ff5e 	bl	8000d84 <__aeabi_fmul>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002ece:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8002ed2:	6811      	ldr	r1, [r2, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fd ff55 	bl	8000d84 <__aeabi_fmul>
 8002eda:	4603      	mov	r3, r0
 8002edc:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002ee0:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 8002ee4:	6811      	ldr	r1, [r2, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fd ff4c 	bl	8000d84 <__aeabi_fmul>
 8002eec:	4603      	mov	r3, r0
 8002eee:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002ef2:	f502 72ec 	add.w	r2, r2, #472	@ 0x1d8
 8002ef6:	6811      	ldr	r1, [r2, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7fd ff43 	bl	8000d84 <__aeabi_fmul>
 8002efe:	4603      	mov	r3, r0
 8002f00:	4619      	mov	r1, r3
 8002f02:	4628      	mov	r0, r5
 8002f04:	f7fd fe34 	bl	8000b70 <__aeabi_fsub>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4620      	mov	r0, r4
 8002f0e:	f7fd ff39 	bl	8000d84 <__aeabi_fmul>
 8002f12:	4603      	mov	r3, r0
 8002f14:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8002f18:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002f1c:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8002f20:	6819      	ldr	r1, [r3, #0]
 8002f22:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002f26:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8002f2a:	6818      	ldr	r0, [r3, #0]
 8002f2c:	f7fd ff2a 	bl	8000d84 <__aeabi_fmul>
 8002f30:	4603      	mov	r3, r0
 8002f32:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8002f36:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8002f3a:	6811      	ldr	r1, [r2, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fd ff21 	bl	8000d84 <__aeabi_fmul>
 8002f42:	4603      	mov	r3, r0
 8002f44:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8002f48:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8002f4c:	6811      	ldr	r1, [r2, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fd ff18 	bl	8000d84 <__aeabi_fmul>
 8002f54:	4603      	mov	r3, r0
 8002f56:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8002f5a:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8002f5e:	6811      	ldr	r1, [r2, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7fd ff0f 	bl	8000d84 <__aeabi_fmul>
 8002f66:	4603      	mov	r3, r0
 8002f68:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002f6c:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 8002f70:	6811      	ldr	r1, [r2, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fd ff06 	bl	8000d84 <__aeabi_fmul>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002f7e:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 8002f82:	6811      	ldr	r1, [r2, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7fd fefd 	bl	8000d84 <__aeabi_fmul>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002f90:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 8002f94:	6811      	ldr	r1, [r2, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fd fef4 	bl	8000d84 <__aeabi_fmul>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002fa2:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 8002fa6:	6811      	ldr	r1, [r2, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fd feeb 	bl	8000d84 <__aeabi_fmul>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002fb4:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8002fb8:	6811      	ldr	r1, [r2, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fd fee2 	bl	8000d84 <__aeabi_fmul>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8002fc6:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8002fca:	6811      	ldr	r1, [r2, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7fd fed9 	bl	8000d84 <__aeabi_fmul>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4620      	mov	r0, r4
 8002fd8:	f7fd ff88 	bl	8000eec <__aeabi_fdiv>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	4619      	mov	r1, r3
 8002fe0:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 8002fe4:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8002fe8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002fec:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8002ff0:	f102 0208 	add.w	r2, r2, #8
 8002ff4:	6812      	ldr	r2, [r2, #0]
 8002ff6:	f502 628b 	add.w	r2, r2, #1112	@ 0x458
 8002ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			mat_H[2][i] = -(2*(bz - mz[i])*(bz*sx*sy*cos_rho - by*sx*sz*sin_lambda - mz[i]*sx*sy*cos_rho + my[i]*sx*sz*sin_lambda + bx*sy*sz*sin_lambda*sin_rho - mx[i]*sy*sz*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_rho*sin_phi + mx[i]*sy*sz*cos_lambda*cos_rho*sin_phi))/(sx*sy*(sz*sz*sz)*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho);
 8002ffe:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003002:	f103 0308 	add.w	r3, r3, #8
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800300e:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8003012:	4413      	add	r3, r2
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4619      	mov	r1, r3
 8003018:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800301c:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8003020:	6818      	ldr	r0, [r3, #0]
 8003022:	f7fd fda5 	bl	8000b70 <__aeabi_fsub>
 8003026:	4603      	mov	r3, r0
 8003028:	4619      	mov	r1, r3
 800302a:	4618      	mov	r0, r3
 800302c:	f7fd fda2 	bl	8000b74 <__addsf3>
 8003030:	4603      	mov	r3, r0
 8003032:	461c      	mov	r4, r3
 8003034:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003038:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800303c:	6819      	ldr	r1, [r3, #0]
 800303e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003042:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8003046:	6818      	ldr	r0, [r3, #0]
 8003048:	f7fd fe9c 	bl	8000d84 <__aeabi_fmul>
 800304c:	4603      	mov	r3, r0
 800304e:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8003052:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8003056:	6811      	ldr	r1, [r2, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f7fd fe93 	bl	8000d84 <__aeabi_fmul>
 800305e:	4603      	mov	r3, r0
 8003060:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8003064:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8003068:	6811      	ldr	r1, [r2, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f7fd fe8a 	bl	8000d84 <__aeabi_fmul>
 8003070:	4603      	mov	r3, r0
 8003072:	461d      	mov	r5, r3
 8003074:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003078:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800307c:	6819      	ldr	r1, [r3, #0]
 800307e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003082:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	f7fd fe7c 	bl	8000d84 <__aeabi_fmul>
 800308c:	4603      	mov	r3, r0
 800308e:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8003092:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8003096:	6811      	ldr	r1, [r2, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	f7fd fe73 	bl	8000d84 <__aeabi_fmul>
 800309e:	4603      	mov	r3, r0
 80030a0:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80030a4:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 80030a8:	6811      	ldr	r1, [r2, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fd fe6a 	bl	8000d84 <__aeabi_fmul>
 80030b0:	4603      	mov	r3, r0
 80030b2:	4619      	mov	r1, r3
 80030b4:	4628      	mov	r0, r5
 80030b6:	f7fd fd5b 	bl	8000b70 <__aeabi_fsub>
 80030ba:	4603      	mov	r3, r0
 80030bc:	461d      	mov	r5, r3
 80030be:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80030c2:	f103 0308 	add.w	r3, r3, #8
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80030ce:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 80030d2:	4413      	add	r3, r2
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80030da:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 80030de:	6811      	ldr	r1, [r2, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7fd fe4f 	bl	8000d84 <__aeabi_fmul>
 80030e6:	4603      	mov	r3, r0
 80030e8:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80030ec:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 80030f0:	6811      	ldr	r1, [r2, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fd fe46 	bl	8000d84 <__aeabi_fmul>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80030fe:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8003102:	6811      	ldr	r1, [r2, #0]
 8003104:	4618      	mov	r0, r3
 8003106:	f7fd fe3d 	bl	8000d84 <__aeabi_fmul>
 800310a:	4603      	mov	r3, r0
 800310c:	4619      	mov	r1, r3
 800310e:	4628      	mov	r0, r5
 8003110:	f7fd fd2e 	bl	8000b70 <__aeabi_fsub>
 8003114:	4603      	mov	r3, r0
 8003116:	461d      	mov	r5, r3
 8003118:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800311c:	f103 0308 	add.w	r3, r3, #8
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003128:	f852 2c38 	ldr.w	r2, [r2, #-56]
 800312c:	4413      	add	r3, r2
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8003134:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8003138:	6811      	ldr	r1, [r2, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	f7fd fe22 	bl	8000d84 <__aeabi_fmul>
 8003140:	4603      	mov	r3, r0
 8003142:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8003146:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 800314a:	6811      	ldr	r1, [r2, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f7fd fe19 	bl	8000d84 <__aeabi_fmul>
 8003152:	4603      	mov	r3, r0
 8003154:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8003158:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 800315c:	6811      	ldr	r1, [r2, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f7fd fe10 	bl	8000d84 <__aeabi_fmul>
 8003164:	4603      	mov	r3, r0
 8003166:	4619      	mov	r1, r3
 8003168:	4628      	mov	r0, r5
 800316a:	f7fd fd03 	bl	8000b74 <__addsf3>
 800316e:	4603      	mov	r3, r0
 8003170:	461d      	mov	r5, r3
 8003172:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003176:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800317a:	6819      	ldr	r1, [r3, #0]
 800317c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003180:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8003184:	6818      	ldr	r0, [r3, #0]
 8003186:	f7fd fdfd 	bl	8000d84 <__aeabi_fmul>
 800318a:	4603      	mov	r3, r0
 800318c:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8003190:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8003194:	6811      	ldr	r1, [r2, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f7fd fdf4 	bl	8000d84 <__aeabi_fmul>
 800319c:	4603      	mov	r3, r0
 800319e:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80031a2:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 80031a6:	6811      	ldr	r1, [r2, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7fd fdeb 	bl	8000d84 <__aeabi_fmul>
 80031ae:	4603      	mov	r3, r0
 80031b0:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80031b4:	f502 72ea 	add.w	r2, r2, #468	@ 0x1d4
 80031b8:	6811      	ldr	r1, [r2, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fd fde2 	bl	8000d84 <__aeabi_fmul>
 80031c0:	4603      	mov	r3, r0
 80031c2:	4619      	mov	r1, r3
 80031c4:	4628      	mov	r0, r5
 80031c6:	f7fd fcd5 	bl	8000b74 <__addsf3>
 80031ca:	4603      	mov	r3, r0
 80031cc:	461d      	mov	r5, r3
 80031ce:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80031d2:	f103 0308 	add.w	r3, r3, #8
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80031de:	f852 2c34 	ldr.w	r2, [r2, #-52]
 80031e2:	4413      	add	r3, r2
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80031ea:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 80031ee:	6811      	ldr	r1, [r2, #0]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7fd fdc7 	bl	8000d84 <__aeabi_fmul>
 80031f6:	4603      	mov	r3, r0
 80031f8:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80031fc:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8003200:	6811      	ldr	r1, [r2, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f7fd fdbe 	bl	8000d84 <__aeabi_fmul>
 8003208:	4603      	mov	r3, r0
 800320a:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800320e:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 8003212:	6811      	ldr	r1, [r2, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f7fd fdb5 	bl	8000d84 <__aeabi_fmul>
 800321a:	4603      	mov	r3, r0
 800321c:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8003220:	f502 72ea 	add.w	r2, r2, #468	@ 0x1d4
 8003224:	6811      	ldr	r1, [r2, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f7fd fdac 	bl	8000d84 <__aeabi_fmul>
 800322c:	4603      	mov	r3, r0
 800322e:	4619      	mov	r1, r3
 8003230:	4628      	mov	r0, r5
 8003232:	f7fd fc9d 	bl	8000b70 <__aeabi_fsub>
 8003236:	4603      	mov	r3, r0
 8003238:	461d      	mov	r5, r3
 800323a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800323e:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8003242:	6819      	ldr	r1, [r3, #0]
 8003244:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003248:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 800324c:	6818      	ldr	r0, [r3, #0]
 800324e:	f7fd fd99 	bl	8000d84 <__aeabi_fmul>
 8003252:	4603      	mov	r3, r0
 8003254:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8003258:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 800325c:	6811      	ldr	r1, [r2, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f7fd fd90 	bl	8000d84 <__aeabi_fmul>
 8003264:	4603      	mov	r3, r0
 8003266:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800326a:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 800326e:	6811      	ldr	r1, [r2, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f7fd fd87 	bl	8000d84 <__aeabi_fmul>
 8003276:	4603      	mov	r3, r0
 8003278:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800327c:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8003280:	6811      	ldr	r1, [r2, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f7fd fd7e 	bl	8000d84 <__aeabi_fmul>
 8003288:	4603      	mov	r3, r0
 800328a:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800328e:	f502 72ec 	add.w	r2, r2, #472	@ 0x1d8
 8003292:	6811      	ldr	r1, [r2, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f7fd fd75 	bl	8000d84 <__aeabi_fmul>
 800329a:	4603      	mov	r3, r0
 800329c:	4619      	mov	r1, r3
 800329e:	4628      	mov	r0, r5
 80032a0:	f7fd fc66 	bl	8000b70 <__aeabi_fsub>
 80032a4:	4603      	mov	r3, r0
 80032a6:	461d      	mov	r5, r3
 80032a8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80032ac:	f103 0308 	add.w	r3, r3, #8
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80032b8:	f852 2c34 	ldr.w	r2, [r2, #-52]
 80032bc:	4413      	add	r3, r2
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80032c4:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 80032c8:	6811      	ldr	r1, [r2, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fd fd5a 	bl	8000d84 <__aeabi_fmul>
 80032d0:	4603      	mov	r3, r0
 80032d2:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80032d6:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 80032da:	6811      	ldr	r1, [r2, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fd fd51 	bl	8000d84 <__aeabi_fmul>
 80032e2:	4603      	mov	r3, r0
 80032e4:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80032e8:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 80032ec:	6811      	ldr	r1, [r2, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fd fd48 	bl	8000d84 <__aeabi_fmul>
 80032f4:	4603      	mov	r3, r0
 80032f6:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80032fa:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 80032fe:	6811      	ldr	r1, [r2, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f7fd fd3f 	bl	8000d84 <__aeabi_fmul>
 8003306:	4603      	mov	r3, r0
 8003308:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800330c:	f502 72ec 	add.w	r2, r2, #472	@ 0x1d8
 8003310:	6811      	ldr	r1, [r2, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f7fd fd36 	bl	8000d84 <__aeabi_fmul>
 8003318:	4603      	mov	r3, r0
 800331a:	4619      	mov	r1, r3
 800331c:	4628      	mov	r0, r5
 800331e:	f7fd fc29 	bl	8000b74 <__addsf3>
 8003322:	4603      	mov	r3, r0
 8003324:	4619      	mov	r1, r3
 8003326:	4620      	mov	r0, r4
 8003328:	f7fd fd2c 	bl	8000d84 <__aeabi_fmul>
 800332c:	4603      	mov	r3, r0
 800332e:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8003332:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003336:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800333a:	6819      	ldr	r1, [r3, #0]
 800333c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003340:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8003344:	6818      	ldr	r0, [r3, #0]
 8003346:	f7fd fd1d 	bl	8000d84 <__aeabi_fmul>
 800334a:	4603      	mov	r3, r0
 800334c:	461d      	mov	r5, r3
 800334e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003352:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8003356:	6819      	ldr	r1, [r3, #0]
 8003358:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800335c:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8003360:	6818      	ldr	r0, [r3, #0]
 8003362:	f7fd fd0f 	bl	8000d84 <__aeabi_fmul>
 8003366:	4603      	mov	r3, r0
 8003368:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 800336c:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8003370:	6811      	ldr	r1, [r2, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f7fd fd06 	bl	8000d84 <__aeabi_fmul>
 8003378:	4603      	mov	r3, r0
 800337a:	4619      	mov	r1, r3
 800337c:	4628      	mov	r0, r5
 800337e:	f7fd fd01 	bl	8000d84 <__aeabi_fmul>
 8003382:	4603      	mov	r3, r0
 8003384:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8003388:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 800338c:	6811      	ldr	r1, [r2, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f7fd fcf8 	bl	8000d84 <__aeabi_fmul>
 8003394:	4603      	mov	r3, r0
 8003396:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800339a:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 800339e:	6811      	ldr	r1, [r2, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7fd fcef 	bl	8000d84 <__aeabi_fmul>
 80033a6:	4603      	mov	r3, r0
 80033a8:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80033ac:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 80033b0:	6811      	ldr	r1, [r2, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fd fce6 	bl	8000d84 <__aeabi_fmul>
 80033b8:	4603      	mov	r3, r0
 80033ba:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80033be:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 80033c2:	6811      	ldr	r1, [r2, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fd fcdd 	bl	8000d84 <__aeabi_fmul>
 80033ca:	4603      	mov	r3, r0
 80033cc:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80033d0:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 80033d4:	6811      	ldr	r1, [r2, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fd fcd4 	bl	8000d84 <__aeabi_fmul>
 80033dc:	4603      	mov	r3, r0
 80033de:	4619      	mov	r1, r3
 80033e0:	4620      	mov	r0, r4
 80033e2:	f7fd fd83 	bl	8000eec <__aeabi_fdiv>
 80033e6:	4603      	mov	r3, r0
 80033e8:	4619      	mov	r1, r3
 80033ea:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 80033ee:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80033f2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80033f6:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80033fa:	f102 0208 	add.w	r2, r2, #8
 80033fe:	6812      	ldr	r2, [r2, #0]
 8003400:	f502 620b 	add.w	r2, r2, #2224	@ 0x8b0
 8003404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			mat_H[3][i] = (2*bx - 2*mx[i])/sx*sx - (2*sin_rho*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i])))/(sx*sx*sy*cos_rho*cos_rho) + (2*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sz*cos_lambda*cos_lambda*2*cos_phi*cos_phi*cos_rho*cos_rho);
 8003408:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800340c:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4619      	mov	r1, r3
 8003414:	4618      	mov	r0, r3
 8003416:	f7fd fbad 	bl	8000b74 <__addsf3>
 800341a:	4603      	mov	r3, r0
 800341c:	461c      	mov	r4, r3
 800341e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003422:	f103 0308 	add.w	r3, r3, #8
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800342e:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8003432:	4413      	add	r3, r2
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4619      	mov	r1, r3
 8003438:	4618      	mov	r0, r3
 800343a:	f7fd fb9b 	bl	8000b74 <__addsf3>
 800343e:	4603      	mov	r3, r0
 8003440:	4619      	mov	r1, r3
 8003442:	4620      	mov	r0, r4
 8003444:	f7fd fb94 	bl	8000b70 <__aeabi_fsub>
 8003448:	4603      	mov	r3, r0
 800344a:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 800344e:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8003452:	6811      	ldr	r1, [r2, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f7fd fd49 	bl	8000eec <__aeabi_fdiv>
 800345a:	4603      	mov	r3, r0
 800345c:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8003460:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8003464:	6811      	ldr	r1, [r2, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f7fd fc8c 	bl	8000d84 <__aeabi_fmul>
 800346c:	4603      	mov	r3, r0
 800346e:	461c      	mov	r4, r3
 8003470:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003474:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4619      	mov	r1, r3
 800347c:	4618      	mov	r0, r3
 800347e:	f7fd fb79 	bl	8000b74 <__addsf3>
 8003482:	4603      	mov	r3, r0
 8003484:	461d      	mov	r5, r3
 8003486:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800348a:	f103 0308 	add.w	r3, r3, #8
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003496:	f852 2c38 	ldr.w	r2, [r2, #-56]
 800349a:	4413      	add	r3, r2
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4619      	mov	r1, r3
 80034a0:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80034a4:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80034a8:	6818      	ldr	r0, [r3, #0]
 80034aa:	f7fd fb61 	bl	8000b70 <__aeabi_fsub>
 80034ae:	4603      	mov	r3, r0
 80034b0:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80034b4:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 80034b8:	6811      	ldr	r1, [r2, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fd fc62 	bl	8000d84 <__aeabi_fmul>
 80034c0:	4603      	mov	r3, r0
 80034c2:	461e      	mov	r6, r3
 80034c4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80034c8:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 80034cc:	6819      	ldr	r1, [r3, #0]
 80034ce:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80034d2:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80034d6:	6818      	ldr	r0, [r3, #0]
 80034d8:	f7fd fc54 	bl	8000d84 <__aeabi_fmul>
 80034dc:	4603      	mov	r3, r0
 80034de:	4698      	mov	r8, r3
 80034e0:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80034e4:	f103 0308 	add.w	r3, r3, #8
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80034f0:	f852 2c34 	ldr.w	r2, [r2, #-52]
 80034f4:	4413      	add	r3, r2
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4619      	mov	r1, r3
 80034fa:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80034fe:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8003502:	6818      	ldr	r0, [r3, #0]
 8003504:	f7fd fb34 	bl	8000b70 <__aeabi_fsub>
 8003508:	4603      	mov	r3, r0
 800350a:	4619      	mov	r1, r3
 800350c:	4640      	mov	r0, r8
 800350e:	f7fd fc39 	bl	8000d84 <__aeabi_fmul>
 8003512:	4603      	mov	r3, r0
 8003514:	4619      	mov	r1, r3
 8003516:	4630      	mov	r0, r6
 8003518:	f7fd fb2a 	bl	8000b70 <__aeabi_fsub>
 800351c:	4603      	mov	r3, r0
 800351e:	4619      	mov	r1, r3
 8003520:	4628      	mov	r0, r5
 8003522:	f7fd fc2f 	bl	8000d84 <__aeabi_fmul>
 8003526:	4603      	mov	r3, r0
 8003528:	461d      	mov	r5, r3
 800352a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800352e:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8003532:	6819      	ldr	r1, [r3, #0]
 8003534:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003538:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800353c:	6818      	ldr	r0, [r3, #0]
 800353e:	f7fd fc21 	bl	8000d84 <__aeabi_fmul>
 8003542:	4603      	mov	r3, r0
 8003544:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8003548:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 800354c:	6811      	ldr	r1, [r2, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f7fd fc18 	bl	8000d84 <__aeabi_fmul>
 8003554:	4603      	mov	r3, r0
 8003556:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800355a:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 800355e:	6811      	ldr	r1, [r2, #0]
 8003560:	4618      	mov	r0, r3
 8003562:	f7fd fc0f 	bl	8000d84 <__aeabi_fmul>
 8003566:	4603      	mov	r3, r0
 8003568:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800356c:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8003570:	6811      	ldr	r1, [r2, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f7fd fc06 	bl	8000d84 <__aeabi_fmul>
 8003578:	4603      	mov	r3, r0
 800357a:	4619      	mov	r1, r3
 800357c:	4628      	mov	r0, r5
 800357e:	f7fd fcb5 	bl	8000eec <__aeabi_fdiv>
 8003582:	4603      	mov	r3, r0
 8003584:	4619      	mov	r1, r3
 8003586:	4620      	mov	r0, r4
 8003588:	f7fd faf2 	bl	8000b70 <__aeabi_fsub>
 800358c:	4603      	mov	r3, r0
 800358e:	461c      	mov	r4, r3
 8003590:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003594:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8003598:	6819      	ldr	r1, [r3, #0]
 800359a:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800359e:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80035a2:	6818      	ldr	r0, [r3, #0]
 80035a4:	f7fd fbee 	bl	8000d84 <__aeabi_fmul>
 80035a8:	4603      	mov	r3, r0
 80035aa:	461d      	mov	r5, r3
 80035ac:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80035b0:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 80035b4:	6819      	ldr	r1, [r3, #0]
 80035b6:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80035ba:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 80035be:	6818      	ldr	r0, [r3, #0]
 80035c0:	f7fd fbe0 	bl	8000d84 <__aeabi_fmul>
 80035c4:	4603      	mov	r3, r0
 80035c6:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80035ca:	f502 72ec 	add.w	r2, r2, #472	@ 0x1d8
 80035ce:	6811      	ldr	r1, [r2, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fd fbd7 	bl	8000d84 <__aeabi_fmul>
 80035d6:	4603      	mov	r3, r0
 80035d8:	4619      	mov	r1, r3
 80035da:	4628      	mov	r0, r5
 80035dc:	f7fd fac8 	bl	8000b70 <__aeabi_fsub>
 80035e0:	4603      	mov	r3, r0
 80035e2:	4619      	mov	r1, r3
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fd fac5 	bl	8000b74 <__addsf3>
 80035ea:	4603      	mov	r3, r0
 80035ec:	461d      	mov	r5, r3
 80035ee:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80035f2:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80035f6:	6819      	ldr	r1, [r3, #0]
 80035f8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80035fc:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8003600:	6818      	ldr	r0, [r3, #0]
 8003602:	f7fd fbbf 	bl	8000d84 <__aeabi_fmul>
 8003606:	4603      	mov	r3, r0
 8003608:	461e      	mov	r6, r3
 800360a:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800360e:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8003612:	6819      	ldr	r1, [r3, #0]
 8003614:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003618:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 800361c:	6818      	ldr	r0, [r3, #0]
 800361e:	f7fd fbb1 	bl	8000d84 <__aeabi_fmul>
 8003622:	4603      	mov	r3, r0
 8003624:	4698      	mov	r8, r3
 8003626:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800362a:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 800362e:	6819      	ldr	r1, [r3, #0]
 8003630:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003634:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8003638:	6818      	ldr	r0, [r3, #0]
 800363a:	f7fd fba3 	bl	8000d84 <__aeabi_fmul>
 800363e:	4603      	mov	r3, r0
 8003640:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8003644:	f502 72ec 	add.w	r2, r2, #472	@ 0x1d8
 8003648:	6811      	ldr	r1, [r2, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7fd fb9a 	bl	8000d84 <__aeabi_fmul>
 8003650:	4603      	mov	r3, r0
 8003652:	4619      	mov	r1, r3
 8003654:	4640      	mov	r0, r8
 8003656:	f7fd fa8b 	bl	8000b70 <__aeabi_fsub>
 800365a:	4603      	mov	r3, r0
 800365c:	4619      	mov	r1, r3
 800365e:	4630      	mov	r0, r6
 8003660:	f7fd fb90 	bl	8000d84 <__aeabi_fmul>
 8003664:	4603      	mov	r3, r0
 8003666:	461e      	mov	r6, r3
 8003668:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800366c:	f103 0308 	add.w	r3, r3, #8
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003678:	f852 2c34 	ldr.w	r2, [r2, #-52]
 800367c:	4413      	add	r3, r2
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4619      	mov	r1, r3
 8003682:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003686:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 800368a:	6818      	ldr	r0, [r3, #0]
 800368c:	f7fd fa70 	bl	8000b70 <__aeabi_fsub>
 8003690:	4603      	mov	r3, r0
 8003692:	4619      	mov	r1, r3
 8003694:	4630      	mov	r0, r6
 8003696:	f7fd fb75 	bl	8000d84 <__aeabi_fmul>
 800369a:	4603      	mov	r3, r0
 800369c:	461e      	mov	r6, r3
 800369e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80036a2:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80036a6:	6819      	ldr	r1, [r3, #0]
 80036a8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80036ac:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80036b0:	6818      	ldr	r0, [r3, #0]
 80036b2:	f7fd fb67 	bl	8000d84 <__aeabi_fmul>
 80036b6:	4603      	mov	r3, r0
 80036b8:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80036bc:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 80036c0:	6811      	ldr	r1, [r2, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fd fb5e 	bl	8000d84 <__aeabi_fmul>
 80036c8:	4603      	mov	r3, r0
 80036ca:	4698      	mov	r8, r3
 80036cc:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80036d0:	f103 0308 	add.w	r3, r3, #8
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80036dc:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 80036e0:	4413      	add	r3, r2
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4619      	mov	r1, r3
 80036e6:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80036ea:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80036ee:	6818      	ldr	r0, [r3, #0]
 80036f0:	f7fd fa3e 	bl	8000b70 <__aeabi_fsub>
 80036f4:	4603      	mov	r3, r0
 80036f6:	4619      	mov	r1, r3
 80036f8:	4640      	mov	r0, r8
 80036fa:	f7fd fb43 	bl	8000d84 <__aeabi_fmul>
 80036fe:	4603      	mov	r3, r0
 8003700:	4619      	mov	r1, r3
 8003702:	4630      	mov	r0, r6
 8003704:	f7fd fa36 	bl	8000b74 <__addsf3>
 8003708:	4603      	mov	r3, r0
 800370a:	461e      	mov	r6, r3
 800370c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003710:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8003714:	6819      	ldr	r1, [r3, #0]
 8003716:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800371a:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800371e:	6818      	ldr	r0, [r3, #0]
 8003720:	f7fd fb30 	bl	8000d84 <__aeabi_fmul>
 8003724:	4603      	mov	r3, r0
 8003726:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800372a:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 800372e:	6811      	ldr	r1, [r2, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f7fd fb27 	bl	8000d84 <__aeabi_fmul>
 8003736:	4603      	mov	r3, r0
 8003738:	4698      	mov	r8, r3
 800373a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800373e:	f103 0308 	add.w	r3, r3, #8
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800374a:	f852 2c38 	ldr.w	r2, [r2, #-56]
 800374e:	4413      	add	r3, r2
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4619      	mov	r1, r3
 8003754:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003758:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800375c:	6818      	ldr	r0, [r3, #0]
 800375e:	f7fd fa07 	bl	8000b70 <__aeabi_fsub>
 8003762:	4603      	mov	r3, r0
 8003764:	4619      	mov	r1, r3
 8003766:	4640      	mov	r0, r8
 8003768:	f7fd fb0c 	bl	8000d84 <__aeabi_fmul>
 800376c:	4603      	mov	r3, r0
 800376e:	4619      	mov	r1, r3
 8003770:	4630      	mov	r0, r6
 8003772:	f7fd f9fd 	bl	8000b70 <__aeabi_fsub>
 8003776:	4603      	mov	r3, r0
 8003778:	4619      	mov	r1, r3
 800377a:	4628      	mov	r0, r5
 800377c:	f7fd fb02 	bl	8000d84 <__aeabi_fmul>
 8003780:	4603      	mov	r3, r0
 8003782:	461d      	mov	r5, r3
 8003784:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003788:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800378c:	6819      	ldr	r1, [r3, #0]
 800378e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003792:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8003796:	6818      	ldr	r0, [r3, #0]
 8003798:	f7fd faf4 	bl	8000d84 <__aeabi_fmul>
 800379c:	4603      	mov	r3, r0
 800379e:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80037a2:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 80037a6:	6811      	ldr	r1, [r2, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7fd faeb 	bl	8000d84 <__aeabi_fmul>
 80037ae:	4603      	mov	r3, r0
 80037b0:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80037b4:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 80037b8:	6811      	ldr	r1, [r2, #0]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fd fae2 	bl	8000d84 <__aeabi_fmul>
 80037c0:	4603      	mov	r3, r0
 80037c2:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80037c6:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 80037ca:	6811      	ldr	r1, [r2, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fd fad9 	bl	8000d84 <__aeabi_fmul>
 80037d2:	4603      	mov	r3, r0
 80037d4:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80037d8:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 80037dc:	6811      	ldr	r1, [r2, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fd fad0 	bl	8000d84 <__aeabi_fmul>
 80037e4:	4603      	mov	r3, r0
 80037e6:	4619      	mov	r1, r3
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fd f9c3 	bl	8000b74 <__addsf3>
 80037ee:	4603      	mov	r3, r0
 80037f0:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80037f4:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 80037f8:	6811      	ldr	r1, [r2, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fd fac2 	bl	8000d84 <__aeabi_fmul>
 8003800:	4603      	mov	r3, r0
 8003802:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8003806:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 800380a:	6811      	ldr	r1, [r2, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f7fd fab9 	bl	8000d84 <__aeabi_fmul>
 8003812:	4603      	mov	r3, r0
 8003814:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8003818:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 800381c:	6811      	ldr	r1, [r2, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f7fd fab0 	bl	8000d84 <__aeabi_fmul>
 8003824:	4603      	mov	r3, r0
 8003826:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800382a:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 800382e:	6811      	ldr	r1, [r2, #0]
 8003830:	4618      	mov	r0, r3
 8003832:	f7fd faa7 	bl	8000d84 <__aeabi_fmul>
 8003836:	4603      	mov	r3, r0
 8003838:	4619      	mov	r1, r3
 800383a:	4628      	mov	r0, r5
 800383c:	f7fd fb56 	bl	8000eec <__aeabi_fdiv>
 8003840:	4603      	mov	r3, r0
 8003842:	4619      	mov	r1, r3
 8003844:	4620      	mov	r0, r4
 8003846:	f7fd f995 	bl	8000b74 <__addsf3>
 800384a:	4603      	mov	r3, r0
 800384c:	4619      	mov	r1, r3
 800384e:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 8003852:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8003856:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800385a:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 800385e:	f102 0208 	add.w	r2, r2, #8
 8003862:	6812      	ldr	r2, [r2, #0]
 8003864:	f602 5208 	addw	r2, r2, #3336	@ 0xd08
 8003868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			mat_H[4][i] = (2*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i])))/(sx*sy*sy*cos_rho*cos_rho) - (2*sin_lambda*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sy*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 800386c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003870:	f103 0308 	add.w	r3, r3, #8
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800387c:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8003880:	4413      	add	r3, r2
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4619      	mov	r1, r3
 8003886:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800388a:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800388e:	6818      	ldr	r0, [r3, #0]
 8003890:	f7fd f96e 	bl	8000b70 <__aeabi_fsub>
 8003894:	4603      	mov	r3, r0
 8003896:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 800389a:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 800389e:	6811      	ldr	r1, [r2, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7fd fa6f 	bl	8000d84 <__aeabi_fmul>
 80038a6:	4603      	mov	r3, r0
 80038a8:	461c      	mov	r4, r3
 80038aa:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80038ae:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 80038b2:	6819      	ldr	r1, [r3, #0]
 80038b4:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80038b8:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80038bc:	6818      	ldr	r0, [r3, #0]
 80038be:	f7fd fa61 	bl	8000d84 <__aeabi_fmul>
 80038c2:	4603      	mov	r3, r0
 80038c4:	461d      	mov	r5, r3
 80038c6:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80038ca:	f103 0308 	add.w	r3, r3, #8
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80038d6:	f852 2c34 	ldr.w	r2, [r2, #-52]
 80038da:	4413      	add	r3, r2
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4619      	mov	r1, r3
 80038e0:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80038e4:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80038e8:	6818      	ldr	r0, [r3, #0]
 80038ea:	f7fd f941 	bl	8000b70 <__aeabi_fsub>
 80038ee:	4603      	mov	r3, r0
 80038f0:	4619      	mov	r1, r3
 80038f2:	4628      	mov	r0, r5
 80038f4:	f7fd fa46 	bl	8000d84 <__aeabi_fmul>
 80038f8:	4603      	mov	r3, r0
 80038fa:	4619      	mov	r1, r3
 80038fc:	4620      	mov	r0, r4
 80038fe:	f7fd f937 	bl	8000b70 <__aeabi_fsub>
 8003902:	4603      	mov	r3, r0
 8003904:	4619      	mov	r1, r3
 8003906:	4618      	mov	r0, r3
 8003908:	f7fd f934 	bl	8000b74 <__addsf3>
 800390c:	4603      	mov	r3, r0
 800390e:	461c      	mov	r4, r3
 8003910:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003914:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8003918:	6819      	ldr	r1, [r3, #0]
 800391a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800391e:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8003922:	6818      	ldr	r0, [r3, #0]
 8003924:	f7fd fa2e 	bl	8000d84 <__aeabi_fmul>
 8003928:	4603      	mov	r3, r0
 800392a:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 800392e:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8003932:	6811      	ldr	r1, [r2, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f7fd fa25 	bl	8000d84 <__aeabi_fmul>
 800393a:	4603      	mov	r3, r0
 800393c:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8003940:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8003944:	6811      	ldr	r1, [r2, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f7fd fa1c 	bl	8000d84 <__aeabi_fmul>
 800394c:	4603      	mov	r3, r0
 800394e:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8003952:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8003956:	6811      	ldr	r1, [r2, #0]
 8003958:	4618      	mov	r0, r3
 800395a:	f7fd fa13 	bl	8000d84 <__aeabi_fmul>
 800395e:	4603      	mov	r3, r0
 8003960:	4619      	mov	r1, r3
 8003962:	4620      	mov	r0, r4
 8003964:	f7fd fac2 	bl	8000eec <__aeabi_fdiv>
 8003968:	4603      	mov	r3, r0
 800396a:	461c      	mov	r4, r3
 800396c:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003970:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4619      	mov	r1, r3
 8003978:	4618      	mov	r0, r3
 800397a:	f7fd f8fb 	bl	8000b74 <__addsf3>
 800397e:	4603      	mov	r3, r0
 8003980:	461d      	mov	r5, r3
 8003982:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003986:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800398a:	6819      	ldr	r1, [r3, #0]
 800398c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003990:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8003994:	6818      	ldr	r0, [r3, #0]
 8003996:	f7fd f9f5 	bl	8000d84 <__aeabi_fmul>
 800399a:	4603      	mov	r3, r0
 800399c:	461e      	mov	r6, r3
 800399e:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80039a2:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 80039a6:	6819      	ldr	r1, [r3, #0]
 80039a8:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80039ac:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80039b0:	6818      	ldr	r0, [r3, #0]
 80039b2:	f7fd f9e7 	bl	8000d84 <__aeabi_fmul>
 80039b6:	4603      	mov	r3, r0
 80039b8:	4698      	mov	r8, r3
 80039ba:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80039be:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 80039c2:	6819      	ldr	r1, [r3, #0]
 80039c4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80039c8:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 80039cc:	6818      	ldr	r0, [r3, #0]
 80039ce:	f7fd f9d9 	bl	8000d84 <__aeabi_fmul>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80039d8:	f502 72ec 	add.w	r2, r2, #472	@ 0x1d8
 80039dc:	6811      	ldr	r1, [r2, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fd f9d0 	bl	8000d84 <__aeabi_fmul>
 80039e4:	4603      	mov	r3, r0
 80039e6:	4619      	mov	r1, r3
 80039e8:	4640      	mov	r0, r8
 80039ea:	f7fd f8c1 	bl	8000b70 <__aeabi_fsub>
 80039ee:	4603      	mov	r3, r0
 80039f0:	4619      	mov	r1, r3
 80039f2:	4630      	mov	r0, r6
 80039f4:	f7fd f9c6 	bl	8000d84 <__aeabi_fmul>
 80039f8:	4603      	mov	r3, r0
 80039fa:	461e      	mov	r6, r3
 80039fc:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003a00:	f103 0308 	add.w	r3, r3, #8
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003a0c:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8003a10:	4413      	add	r3, r2
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4619      	mov	r1, r3
 8003a16:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003a1a:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8003a1e:	6818      	ldr	r0, [r3, #0]
 8003a20:	f7fd f8a6 	bl	8000b70 <__aeabi_fsub>
 8003a24:	4603      	mov	r3, r0
 8003a26:	4619      	mov	r1, r3
 8003a28:	4630      	mov	r0, r6
 8003a2a:	f7fd f9ab 	bl	8000d84 <__aeabi_fmul>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	461e      	mov	r6, r3
 8003a32:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003a36:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8003a3a:	6819      	ldr	r1, [r3, #0]
 8003a3c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003a40:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8003a44:	6818      	ldr	r0, [r3, #0]
 8003a46:	f7fd f99d 	bl	8000d84 <__aeabi_fmul>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8003a50:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8003a54:	6811      	ldr	r1, [r2, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fd f994 	bl	8000d84 <__aeabi_fmul>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	4698      	mov	r8, r3
 8003a60:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003a64:	f103 0308 	add.w	r3, r3, #8
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003a70:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8003a74:	4413      	add	r3, r2
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4619      	mov	r1, r3
 8003a7a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003a7e:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8003a82:	6818      	ldr	r0, [r3, #0]
 8003a84:	f7fd f874 	bl	8000b70 <__aeabi_fsub>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	4640      	mov	r0, r8
 8003a8e:	f7fd f979 	bl	8000d84 <__aeabi_fmul>
 8003a92:	4603      	mov	r3, r0
 8003a94:	4619      	mov	r1, r3
 8003a96:	4630      	mov	r0, r6
 8003a98:	f7fd f86c 	bl	8000b74 <__addsf3>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	461e      	mov	r6, r3
 8003aa0:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003aa4:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8003aa8:	6819      	ldr	r1, [r3, #0]
 8003aaa:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003aae:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8003ab2:	6818      	ldr	r0, [r3, #0]
 8003ab4:	f7fd f966 	bl	8000d84 <__aeabi_fmul>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8003abe:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 8003ac2:	6811      	ldr	r1, [r2, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7fd f95d 	bl	8000d84 <__aeabi_fmul>
 8003aca:	4603      	mov	r3, r0
 8003acc:	4698      	mov	r8, r3
 8003ace:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003ad2:	f103 0308 	add.w	r3, r3, #8
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003ade:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003aec:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8003af0:	6818      	ldr	r0, [r3, #0]
 8003af2:	f7fd f83d 	bl	8000b70 <__aeabi_fsub>
 8003af6:	4603      	mov	r3, r0
 8003af8:	4619      	mov	r1, r3
 8003afa:	4640      	mov	r0, r8
 8003afc:	f7fd f942 	bl	8000d84 <__aeabi_fmul>
 8003b00:	4603      	mov	r3, r0
 8003b02:	4619      	mov	r1, r3
 8003b04:	4630      	mov	r0, r6
 8003b06:	f7fd f833 	bl	8000b70 <__aeabi_fsub>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4628      	mov	r0, r5
 8003b10:	f7fd f938 	bl	8000d84 <__aeabi_fmul>
 8003b14:	4603      	mov	r3, r0
 8003b16:	461d      	mov	r5, r3
 8003b18:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003b1c:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8003b20:	6819      	ldr	r1, [r3, #0]
 8003b22:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003b26:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8003b2a:	6818      	ldr	r0, [r3, #0]
 8003b2c:	f7fd f92a 	bl	8000d84 <__aeabi_fmul>
 8003b30:	4603      	mov	r3, r0
 8003b32:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8003b36:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8003b3a:	6811      	ldr	r1, [r2, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fd f921 	bl	8000d84 <__aeabi_fmul>
 8003b42:	4603      	mov	r3, r0
 8003b44:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8003b48:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8003b4c:	6811      	ldr	r1, [r2, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fd f918 	bl	8000d84 <__aeabi_fmul>
 8003b54:	4603      	mov	r3, r0
 8003b56:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8003b5a:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 8003b5e:	6811      	ldr	r1, [r2, #0]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7fd f90f 	bl	8000d84 <__aeabi_fmul>
 8003b66:	4603      	mov	r3, r0
 8003b68:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8003b6c:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 8003b70:	6811      	ldr	r1, [r2, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fd f906 	bl	8000d84 <__aeabi_fmul>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8003b7e:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 8003b82:	6811      	ldr	r1, [r2, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7fd f8fd 	bl	8000d84 <__aeabi_fmul>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8003b90:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 8003b94:	6811      	ldr	r1, [r2, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fd f8f4 	bl	8000d84 <__aeabi_fmul>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8003ba2:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8003ba6:	6811      	ldr	r1, [r2, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fd f8eb 	bl	8000d84 <__aeabi_fmul>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8003bb4:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8003bb8:	6811      	ldr	r1, [r2, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fd f8e2 	bl	8000d84 <__aeabi_fmul>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	4628      	mov	r0, r5
 8003bc6:	f7fd f991 	bl	8000eec <__aeabi_fdiv>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4620      	mov	r0, r4
 8003bd0:	f7fc ffce 	bl	8000b70 <__aeabi_fsub>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 8003bdc:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8003be0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003be4:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8003be8:	f102 0208 	add.w	r2, r2, #8
 8003bec:	6812      	ldr	r2, [r2, #0]
 8003bee:	f502 528b 	add.w	r2, r2, #4448	@ 0x1160
 8003bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			mat_H[5][i] = (2*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho);
 8003bf6:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003bfa:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8003bfe:	6819      	ldr	r1, [r3, #0]
 8003c00:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003c04:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8003c08:	6818      	ldr	r0, [r3, #0]
 8003c0a:	f7fd f8bb 	bl	8000d84 <__aeabi_fmul>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	461c      	mov	r4, r3
 8003c12:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003c16:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8003c1a:	6819      	ldr	r1, [r3, #0]
 8003c1c:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003c20:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	f7fd f8ad 	bl	8000d84 <__aeabi_fmul>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	461d      	mov	r5, r3
 8003c2e:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003c32:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8003c36:	6819      	ldr	r1, [r3, #0]
 8003c38:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003c3c:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	f7fd f89f 	bl	8000d84 <__aeabi_fmul>
 8003c46:	4603      	mov	r3, r0
 8003c48:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8003c4c:	f502 72ec 	add.w	r2, r2, #472	@ 0x1d8
 8003c50:	6811      	ldr	r1, [r2, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fd f896 	bl	8000d84 <__aeabi_fmul>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	4628      	mov	r0, r5
 8003c5e:	f7fc ff87 	bl	8000b70 <__aeabi_fsub>
 8003c62:	4603      	mov	r3, r0
 8003c64:	4619      	mov	r1, r3
 8003c66:	4620      	mov	r0, r4
 8003c68:	f7fd f88c 	bl	8000d84 <__aeabi_fmul>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	461c      	mov	r4, r3
 8003c70:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003c74:	f103 0308 	add.w	r3, r3, #8
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003c80:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8003c84:	4413      	add	r3, r2
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4619      	mov	r1, r3
 8003c8a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003c8e:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8003c92:	6818      	ldr	r0, [r3, #0]
 8003c94:	f7fc ff6c 	bl	8000b70 <__aeabi_fsub>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	4620      	mov	r0, r4
 8003c9e:	f7fd f871 	bl	8000d84 <__aeabi_fmul>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	461c      	mov	r4, r3
 8003ca6:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003caa:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8003cae:	6819      	ldr	r1, [r3, #0]
 8003cb0:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003cb4:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8003cb8:	6818      	ldr	r0, [r3, #0]
 8003cba:	f7fd f863 	bl	8000d84 <__aeabi_fmul>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8003cc4:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8003cc8:	6811      	ldr	r1, [r2, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fd f85a 	bl	8000d84 <__aeabi_fmul>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	461d      	mov	r5, r3
 8003cd4:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003cd8:	f103 0308 	add.w	r3, r3, #8
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003ce4:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8003ce8:	4413      	add	r3, r2
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4619      	mov	r1, r3
 8003cee:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003cf2:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8003cf6:	6818      	ldr	r0, [r3, #0]
 8003cf8:	f7fc ff3a 	bl	8000b70 <__aeabi_fsub>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	4619      	mov	r1, r3
 8003d00:	4628      	mov	r0, r5
 8003d02:	f7fd f83f 	bl	8000d84 <__aeabi_fmul>
 8003d06:	4603      	mov	r3, r0
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4620      	mov	r0, r4
 8003d0c:	f7fc ff32 	bl	8000b74 <__addsf3>
 8003d10:	4603      	mov	r3, r0
 8003d12:	461c      	mov	r4, r3
 8003d14:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003d18:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8003d1c:	6819      	ldr	r1, [r3, #0]
 8003d1e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003d22:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8003d26:	6818      	ldr	r0, [r3, #0]
 8003d28:	f7fd f82c 	bl	8000d84 <__aeabi_fmul>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8003d32:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 8003d36:	6811      	ldr	r1, [r2, #0]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7fd f823 	bl	8000d84 <__aeabi_fmul>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	461d      	mov	r5, r3
 8003d42:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003d46:	f103 0308 	add.w	r3, r3, #8
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003d52:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8003d56:	4413      	add	r3, r2
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003d60:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8003d64:	6818      	ldr	r0, [r3, #0]
 8003d66:	f7fc ff03 	bl	8000b70 <__aeabi_fsub>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4628      	mov	r0, r5
 8003d70:	f7fd f808 	bl	8000d84 <__aeabi_fmul>
 8003d74:	4603      	mov	r3, r0
 8003d76:	4619      	mov	r1, r3
 8003d78:	4620      	mov	r0, r4
 8003d7a:	f7fc fef9 	bl	8000b70 <__aeabi_fsub>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	4619      	mov	r1, r3
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fc fef6 	bl	8000b74 <__addsf3>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	461c      	mov	r4, r3
 8003d8c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003d90:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8003d94:	6819      	ldr	r1, [r3, #0]
 8003d96:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003d9a:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8003d9e:	6818      	ldr	r0, [r3, #0]
 8003da0:	f7fc fff0 	bl	8000d84 <__aeabi_fmul>
 8003da4:	4603      	mov	r3, r0
 8003da6:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8003daa:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8003dae:	6811      	ldr	r1, [r2, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7fc ffe7 	bl	8000d84 <__aeabi_fmul>
 8003db6:	4603      	mov	r3, r0
 8003db8:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8003dbc:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8003dc0:	6811      	ldr	r1, [r2, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fc ffde 	bl	8000d84 <__aeabi_fmul>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8003dce:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 8003dd2:	6811      	ldr	r1, [r2, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7fc ffd5 	bl	8000d84 <__aeabi_fmul>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8003de0:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 8003de4:	6811      	ldr	r1, [r2, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fc ffcc 	bl	8000d84 <__aeabi_fmul>
 8003dec:	4603      	mov	r3, r0
 8003dee:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8003df2:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 8003df6:	6811      	ldr	r1, [r2, #0]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fc ffc3 	bl	8000d84 <__aeabi_fmul>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8003e04:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 8003e08:	6811      	ldr	r1, [r2, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7fc ffba 	bl	8000d84 <__aeabi_fmul>
 8003e10:	4603      	mov	r3, r0
 8003e12:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8003e16:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8003e1a:	6811      	ldr	r1, [r2, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7fc ffb1 	bl	8000d84 <__aeabi_fmul>
 8003e22:	4603      	mov	r3, r0
 8003e24:	4619      	mov	r1, r3
 8003e26:	4620      	mov	r0, r4
 8003e28:	f7fd f860 	bl	8000eec <__aeabi_fdiv>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	4619      	mov	r1, r3
 8003e30:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 8003e34:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8003e38:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8003e3c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003e40:	f103 0308 	add.w	r3, r3, #8
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f503 53ad 	add.w	r3, r3, #5536	@ 0x15a0
 8003e4a:	3318      	adds	r3, #24
 8003e4c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			mat_H[6][i] = -(2*(bx*sy - mx[i]*sy - by*sx*sin_rho + my[i]*sx*sin_rho)*(by*sx*sz*sin_lambda*sin_lambda - my[i]*sx*sz*sin_lambda*sin_lambda + by*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - my[i]*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - bz*sx*sy*cos_rho*sin_lambda + mz[i]*sx*sy*cos_rho*sin_lambda - bx*sy*sz*sin_lambda*sin_lambda*sin_rho + mx[i]*sy*sz*sin_lambda*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + mx[i]*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + bx*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi - mx[i]*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi))/(sx*sx*sy*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*(cos_rho*cos_rho*cos_rho));
 8003e50:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003e54:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8003e58:	6819      	ldr	r1, [r3, #0]
 8003e5a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003e5e:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8003e62:	6818      	ldr	r0, [r3, #0]
 8003e64:	f7fc ff8e 	bl	8000d84 <__aeabi_fmul>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	461c      	mov	r4, r3
 8003e6c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003e70:	f103 0308 	add.w	r3, r3, #8
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003e7c:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8003e80:	4413      	add	r3, r2
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8003e88:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8003e8c:	6811      	ldr	r1, [r2, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fc ff78 	bl	8000d84 <__aeabi_fmul>
 8003e94:	4603      	mov	r3, r0
 8003e96:	4619      	mov	r1, r3
 8003e98:	4620      	mov	r0, r4
 8003e9a:	f7fc fe69 	bl	8000b70 <__aeabi_fsub>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	461c      	mov	r4, r3
 8003ea2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003ea6:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8003eaa:	6819      	ldr	r1, [r3, #0]
 8003eac:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003eb0:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8003eb4:	6818      	ldr	r0, [r3, #0]
 8003eb6:	f7fc ff65 	bl	8000d84 <__aeabi_fmul>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8003ec0:	f502 72ea 	add.w	r2, r2, #468	@ 0x1d4
 8003ec4:	6811      	ldr	r1, [r2, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fc ff5c 	bl	8000d84 <__aeabi_fmul>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	f7fc fe4d 	bl	8000b70 <__aeabi_fsub>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	461c      	mov	r4, r3
 8003eda:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003ede:	f103 0308 	add.w	r3, r3, #8
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003eea:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8003eee:	4413      	add	r3, r2
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8003ef6:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8003efa:	6811      	ldr	r1, [r2, #0]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7fc ff41 	bl	8000d84 <__aeabi_fmul>
 8003f02:	4603      	mov	r3, r0
 8003f04:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8003f08:	f502 72ea 	add.w	r2, r2, #468	@ 0x1d4
 8003f0c:	6811      	ldr	r1, [r2, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fc ff38 	bl	8000d84 <__aeabi_fmul>
 8003f14:	4603      	mov	r3, r0
 8003f16:	4619      	mov	r1, r3
 8003f18:	4620      	mov	r0, r4
 8003f1a:	f7fc fe2b 	bl	8000b74 <__addsf3>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	4619      	mov	r1, r3
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fc fe26 	bl	8000b74 <__addsf3>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	461c      	mov	r4, r3
 8003f2c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003f30:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8003f34:	6819      	ldr	r1, [r3, #0]
 8003f36:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003f3a:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8003f3e:	6818      	ldr	r0, [r3, #0]
 8003f40:	f7fc ff20 	bl	8000d84 <__aeabi_fmul>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8003f4a:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8003f4e:	6811      	ldr	r1, [r2, #0]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7fc ff17 	bl	8000d84 <__aeabi_fmul>
 8003f56:	4603      	mov	r3, r0
 8003f58:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8003f5c:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 8003f60:	6811      	ldr	r1, [r2, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fc ff0e 	bl	8000d84 <__aeabi_fmul>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8003f6e:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 8003f72:	6811      	ldr	r1, [r2, #0]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7fc ff05 	bl	8000d84 <__aeabi_fmul>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	461d      	mov	r5, r3
 8003f7e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003f82:	f103 0308 	add.w	r3, r3, #8
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003f8e:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8003f92:	4413      	add	r3, r2
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8003f9a:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8003f9e:	6811      	ldr	r1, [r2, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fc feef 	bl	8000d84 <__aeabi_fmul>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8003fac:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8003fb0:	6811      	ldr	r1, [r2, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fc fee6 	bl	8000d84 <__aeabi_fmul>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8003fbe:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 8003fc2:	6811      	ldr	r1, [r2, #0]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7fc fedd 	bl	8000d84 <__aeabi_fmul>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8003fd0:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 8003fd4:	6811      	ldr	r1, [r2, #0]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fc fed4 	bl	8000d84 <__aeabi_fmul>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4628      	mov	r0, r5
 8003fe2:	f7fc fdc5 	bl	8000b70 <__aeabi_fsub>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	461d      	mov	r5, r3
 8003fea:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003fee:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8003ff2:	6819      	ldr	r1, [r3, #0]
 8003ff4:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003ff8:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8003ffc:	6818      	ldr	r0, [r3, #0]
 8003ffe:	f7fc fec1 	bl	8000d84 <__aeabi_fmul>
 8004002:	4603      	mov	r3, r0
 8004004:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8004008:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 800400c:	6811      	ldr	r1, [r2, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f7fc feb8 	bl	8000d84 <__aeabi_fmul>
 8004014:	4603      	mov	r3, r0
 8004016:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800401a:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 800401e:	6811      	ldr	r1, [r2, #0]
 8004020:	4618      	mov	r0, r3
 8004022:	f7fc feaf 	bl	8000d84 <__aeabi_fmul>
 8004026:	4603      	mov	r3, r0
 8004028:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800402c:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 8004030:	6811      	ldr	r1, [r2, #0]
 8004032:	4618      	mov	r0, r3
 8004034:	f7fc fea6 	bl	8000d84 <__aeabi_fmul>
 8004038:	4603      	mov	r3, r0
 800403a:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800403e:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 8004042:	6811      	ldr	r1, [r2, #0]
 8004044:	4618      	mov	r0, r3
 8004046:	f7fc fe9d 	bl	8000d84 <__aeabi_fmul>
 800404a:	4603      	mov	r3, r0
 800404c:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004050:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 8004054:	6811      	ldr	r1, [r2, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f7fc fe94 	bl	8000d84 <__aeabi_fmul>
 800405c:	4603      	mov	r3, r0
 800405e:	4619      	mov	r1, r3
 8004060:	4628      	mov	r0, r5
 8004062:	f7fc fd87 	bl	8000b74 <__addsf3>
 8004066:	4603      	mov	r3, r0
 8004068:	461d      	mov	r5, r3
 800406a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800406e:	f103 0308 	add.w	r3, r3, #8
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800407a:	f852 2c38 	ldr.w	r2, [r2, #-56]
 800407e:	4413      	add	r3, r2
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8004086:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 800408a:	6811      	ldr	r1, [r2, #0]
 800408c:	4618      	mov	r0, r3
 800408e:	f7fc fe79 	bl	8000d84 <__aeabi_fmul>
 8004092:	4603      	mov	r3, r0
 8004094:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8004098:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 800409c:	6811      	ldr	r1, [r2, #0]
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fc fe70 	bl	8000d84 <__aeabi_fmul>
 80040a4:	4603      	mov	r3, r0
 80040a6:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80040aa:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 80040ae:	6811      	ldr	r1, [r2, #0]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7fc fe67 	bl	8000d84 <__aeabi_fmul>
 80040b6:	4603      	mov	r3, r0
 80040b8:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80040bc:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 80040c0:	6811      	ldr	r1, [r2, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7fc fe5e 	bl	8000d84 <__aeabi_fmul>
 80040c8:	4603      	mov	r3, r0
 80040ca:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80040ce:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 80040d2:	6811      	ldr	r1, [r2, #0]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7fc fe55 	bl	8000d84 <__aeabi_fmul>
 80040da:	4603      	mov	r3, r0
 80040dc:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80040e0:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 80040e4:	6811      	ldr	r1, [r2, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fc fe4c 	bl	8000d84 <__aeabi_fmul>
 80040ec:	4603      	mov	r3, r0
 80040ee:	4619      	mov	r1, r3
 80040f0:	4628      	mov	r0, r5
 80040f2:	f7fc fd3d 	bl	8000b70 <__aeabi_fsub>
 80040f6:	4603      	mov	r3, r0
 80040f8:	461d      	mov	r5, r3
 80040fa:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80040fe:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8004102:	6819      	ldr	r1, [r3, #0]
 8004104:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004108:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800410c:	6818      	ldr	r0, [r3, #0]
 800410e:	f7fc fe39 	bl	8000d84 <__aeabi_fmul>
 8004112:	4603      	mov	r3, r0
 8004114:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8004118:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 800411c:	6811      	ldr	r1, [r2, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f7fc fe30 	bl	8000d84 <__aeabi_fmul>
 8004124:	4603      	mov	r3, r0
 8004126:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800412a:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 800412e:	6811      	ldr	r1, [r2, #0]
 8004130:	4618      	mov	r0, r3
 8004132:	f7fc fe27 	bl	8000d84 <__aeabi_fmul>
 8004136:	4603      	mov	r3, r0
 8004138:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800413c:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 8004140:	6811      	ldr	r1, [r2, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f7fc fe1e 	bl	8000d84 <__aeabi_fmul>
 8004148:	4603      	mov	r3, r0
 800414a:	4619      	mov	r1, r3
 800414c:	4628      	mov	r0, r5
 800414e:	f7fc fd0f 	bl	8000b70 <__aeabi_fsub>
 8004152:	4603      	mov	r3, r0
 8004154:	461d      	mov	r5, r3
 8004156:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800415a:	f103 0308 	add.w	r3, r3, #8
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004166:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 800416a:	4413      	add	r3, r2
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8004172:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8004176:	6811      	ldr	r1, [r2, #0]
 8004178:	4618      	mov	r0, r3
 800417a:	f7fc fe03 	bl	8000d84 <__aeabi_fmul>
 800417e:	4603      	mov	r3, r0
 8004180:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8004184:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8004188:	6811      	ldr	r1, [r2, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f7fc fdfa 	bl	8000d84 <__aeabi_fmul>
 8004190:	4603      	mov	r3, r0
 8004192:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004196:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 800419a:	6811      	ldr	r1, [r2, #0]
 800419c:	4618      	mov	r0, r3
 800419e:	f7fc fdf1 	bl	8000d84 <__aeabi_fmul>
 80041a2:	4603      	mov	r3, r0
 80041a4:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80041a8:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 80041ac:	6811      	ldr	r1, [r2, #0]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fc fde8 	bl	8000d84 <__aeabi_fmul>
 80041b4:	4603      	mov	r3, r0
 80041b6:	4619      	mov	r1, r3
 80041b8:	4628      	mov	r0, r5
 80041ba:	f7fc fcdb 	bl	8000b74 <__addsf3>
 80041be:	4603      	mov	r3, r0
 80041c0:	461d      	mov	r5, r3
 80041c2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80041c6:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80041ca:	6819      	ldr	r1, [r3, #0]
 80041cc:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80041d0:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80041d4:	6818      	ldr	r0, [r3, #0]
 80041d6:	f7fc fdd5 	bl	8000d84 <__aeabi_fmul>
 80041da:	4603      	mov	r3, r0
 80041dc:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80041e0:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 80041e4:	6811      	ldr	r1, [r2, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fc fdcc 	bl	8000d84 <__aeabi_fmul>
 80041ec:	4603      	mov	r3, r0
 80041ee:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80041f2:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 80041f6:	6811      	ldr	r1, [r2, #0]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7fc fdc3 	bl	8000d84 <__aeabi_fmul>
 80041fe:	4603      	mov	r3, r0
 8004200:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004204:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 8004208:	6811      	ldr	r1, [r2, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f7fc fdba 	bl	8000d84 <__aeabi_fmul>
 8004210:	4603      	mov	r3, r0
 8004212:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004216:	f502 72ea 	add.w	r2, r2, #468	@ 0x1d4
 800421a:	6811      	ldr	r1, [r2, #0]
 800421c:	4618      	mov	r0, r3
 800421e:	f7fc fdb1 	bl	8000d84 <__aeabi_fmul>
 8004222:	4603      	mov	r3, r0
 8004224:	4619      	mov	r1, r3
 8004226:	4628      	mov	r0, r5
 8004228:	f7fc fca2 	bl	8000b70 <__aeabi_fsub>
 800422c:	4603      	mov	r3, r0
 800422e:	461d      	mov	r5, r3
 8004230:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004234:	f103 0308 	add.w	r3, r3, #8
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004240:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8004244:	4413      	add	r3, r2
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 800424c:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8004250:	6811      	ldr	r1, [r2, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f7fc fd96 	bl	8000d84 <__aeabi_fmul>
 8004258:	4603      	mov	r3, r0
 800425a:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 800425e:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8004262:	6811      	ldr	r1, [r2, #0]
 8004264:	4618      	mov	r0, r3
 8004266:	f7fc fd8d 	bl	8000d84 <__aeabi_fmul>
 800426a:	4603      	mov	r3, r0
 800426c:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004270:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 8004274:	6811      	ldr	r1, [r2, #0]
 8004276:	4618      	mov	r0, r3
 8004278:	f7fc fd84 	bl	8000d84 <__aeabi_fmul>
 800427c:	4603      	mov	r3, r0
 800427e:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004282:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 8004286:	6811      	ldr	r1, [r2, #0]
 8004288:	4618      	mov	r0, r3
 800428a:	f7fc fd7b 	bl	8000d84 <__aeabi_fmul>
 800428e:	4603      	mov	r3, r0
 8004290:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004294:	f502 72ea 	add.w	r2, r2, #468	@ 0x1d4
 8004298:	6811      	ldr	r1, [r2, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f7fc fd72 	bl	8000d84 <__aeabi_fmul>
 80042a0:	4603      	mov	r3, r0
 80042a2:	4619      	mov	r1, r3
 80042a4:	4628      	mov	r0, r5
 80042a6:	f7fc fc65 	bl	8000b74 <__addsf3>
 80042aa:	4603      	mov	r3, r0
 80042ac:	461d      	mov	r5, r3
 80042ae:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80042b2:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80042b6:	6819      	ldr	r1, [r3, #0]
 80042b8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80042bc:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80042c0:	6818      	ldr	r0, [r3, #0]
 80042c2:	f7fc fd5f 	bl	8000d84 <__aeabi_fmul>
 80042c6:	4603      	mov	r3, r0
 80042c8:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80042cc:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 80042d0:	6811      	ldr	r1, [r2, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fc fd56 	bl	8000d84 <__aeabi_fmul>
 80042d8:	4603      	mov	r3, r0
 80042da:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80042de:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 80042e2:	6811      	ldr	r1, [r2, #0]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7fc fd4d 	bl	8000d84 <__aeabi_fmul>
 80042ea:	4603      	mov	r3, r0
 80042ec:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80042f0:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 80042f4:	6811      	ldr	r1, [r2, #0]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fc fd44 	bl	8000d84 <__aeabi_fmul>
 80042fc:	4603      	mov	r3, r0
 80042fe:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004302:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 8004306:	6811      	ldr	r1, [r2, #0]
 8004308:	4618      	mov	r0, r3
 800430a:	f7fc fd3b 	bl	8000d84 <__aeabi_fmul>
 800430e:	4603      	mov	r3, r0
 8004310:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004314:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 8004318:	6811      	ldr	r1, [r2, #0]
 800431a:	4618      	mov	r0, r3
 800431c:	f7fc fd32 	bl	8000d84 <__aeabi_fmul>
 8004320:	4603      	mov	r3, r0
 8004322:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004326:	f502 72ea 	add.w	r2, r2, #468	@ 0x1d4
 800432a:	6811      	ldr	r1, [r2, #0]
 800432c:	4618      	mov	r0, r3
 800432e:	f7fc fd29 	bl	8000d84 <__aeabi_fmul>
 8004332:	4603      	mov	r3, r0
 8004334:	4619      	mov	r1, r3
 8004336:	4628      	mov	r0, r5
 8004338:	f7fc fc1a 	bl	8000b70 <__aeabi_fsub>
 800433c:	4603      	mov	r3, r0
 800433e:	461d      	mov	r5, r3
 8004340:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004344:	f103 0308 	add.w	r3, r3, #8
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004350:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8004354:	4413      	add	r3, r2
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 800435c:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8004360:	6811      	ldr	r1, [r2, #0]
 8004362:	4618      	mov	r0, r3
 8004364:	f7fc fd0e 	bl	8000d84 <__aeabi_fmul>
 8004368:	4603      	mov	r3, r0
 800436a:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 800436e:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8004372:	6811      	ldr	r1, [r2, #0]
 8004374:	4618      	mov	r0, r3
 8004376:	f7fc fd05 	bl	8000d84 <__aeabi_fmul>
 800437a:	4603      	mov	r3, r0
 800437c:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004380:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 8004384:	6811      	ldr	r1, [r2, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f7fc fcfc 	bl	8000d84 <__aeabi_fmul>
 800438c:	4603      	mov	r3, r0
 800438e:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004392:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 8004396:	6811      	ldr	r1, [r2, #0]
 8004398:	4618      	mov	r0, r3
 800439a:	f7fc fcf3 	bl	8000d84 <__aeabi_fmul>
 800439e:	4603      	mov	r3, r0
 80043a0:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80043a4:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 80043a8:	6811      	ldr	r1, [r2, #0]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fc fcea 	bl	8000d84 <__aeabi_fmul>
 80043b0:	4603      	mov	r3, r0
 80043b2:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80043b6:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 80043ba:	6811      	ldr	r1, [r2, #0]
 80043bc:	4618      	mov	r0, r3
 80043be:	f7fc fce1 	bl	8000d84 <__aeabi_fmul>
 80043c2:	4603      	mov	r3, r0
 80043c4:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80043c8:	f502 72ea 	add.w	r2, r2, #468	@ 0x1d4
 80043cc:	6811      	ldr	r1, [r2, #0]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fc fcd8 	bl	8000d84 <__aeabi_fmul>
 80043d4:	4603      	mov	r3, r0
 80043d6:	4619      	mov	r1, r3
 80043d8:	4628      	mov	r0, r5
 80043da:	f7fc fbcb 	bl	8000b74 <__addsf3>
 80043de:	4603      	mov	r3, r0
 80043e0:	461d      	mov	r5, r3
 80043e2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80043e6:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80043ea:	6819      	ldr	r1, [r3, #0]
 80043ec:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80043f0:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80043f4:	6818      	ldr	r0, [r3, #0]
 80043f6:	f7fc fcc5 	bl	8000d84 <__aeabi_fmul>
 80043fa:	4603      	mov	r3, r0
 80043fc:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8004400:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8004404:	6811      	ldr	r1, [r2, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f7fc fcbc 	bl	8000d84 <__aeabi_fmul>
 800440c:	4603      	mov	r3, r0
 800440e:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004412:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 8004416:	6811      	ldr	r1, [r2, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f7fc fcb3 	bl	8000d84 <__aeabi_fmul>
 800441e:	4603      	mov	r3, r0
 8004420:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004424:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8004428:	6811      	ldr	r1, [r2, #0]
 800442a:	4618      	mov	r0, r3
 800442c:	f7fc fcaa 	bl	8000d84 <__aeabi_fmul>
 8004430:	4603      	mov	r3, r0
 8004432:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004436:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 800443a:	6811      	ldr	r1, [r2, #0]
 800443c:	4618      	mov	r0, r3
 800443e:	f7fc fca1 	bl	8000d84 <__aeabi_fmul>
 8004442:	4603      	mov	r3, r0
 8004444:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004448:	f502 72ec 	add.w	r2, r2, #472	@ 0x1d8
 800444c:	6811      	ldr	r1, [r2, #0]
 800444e:	4618      	mov	r0, r3
 8004450:	f7fc fc98 	bl	8000d84 <__aeabi_fmul>
 8004454:	4603      	mov	r3, r0
 8004456:	4619      	mov	r1, r3
 8004458:	4628      	mov	r0, r5
 800445a:	f7fc fb8b 	bl	8000b74 <__addsf3>
 800445e:	4603      	mov	r3, r0
 8004460:	461d      	mov	r5, r3
 8004462:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004466:	f103 0308 	add.w	r3, r3, #8
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004472:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8004476:	4413      	add	r3, r2
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 800447e:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8004482:	6811      	ldr	r1, [r2, #0]
 8004484:	4618      	mov	r0, r3
 8004486:	f7fc fc7d 	bl	8000d84 <__aeabi_fmul>
 800448a:	4603      	mov	r3, r0
 800448c:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8004490:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8004494:	6811      	ldr	r1, [r2, #0]
 8004496:	4618      	mov	r0, r3
 8004498:	f7fc fc74 	bl	8000d84 <__aeabi_fmul>
 800449c:	4603      	mov	r3, r0
 800449e:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80044a2:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 80044a6:	6811      	ldr	r1, [r2, #0]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7fc fc6b 	bl	8000d84 <__aeabi_fmul>
 80044ae:	4603      	mov	r3, r0
 80044b0:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80044b4:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 80044b8:	6811      	ldr	r1, [r2, #0]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fc fc62 	bl	8000d84 <__aeabi_fmul>
 80044c0:	4603      	mov	r3, r0
 80044c2:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80044c6:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 80044ca:	6811      	ldr	r1, [r2, #0]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7fc fc59 	bl	8000d84 <__aeabi_fmul>
 80044d2:	4603      	mov	r3, r0
 80044d4:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80044d8:	f502 72ec 	add.w	r2, r2, #472	@ 0x1d8
 80044dc:	6811      	ldr	r1, [r2, #0]
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fc fc50 	bl	8000d84 <__aeabi_fmul>
 80044e4:	4603      	mov	r3, r0
 80044e6:	4619      	mov	r1, r3
 80044e8:	4628      	mov	r0, r5
 80044ea:	f7fc fb41 	bl	8000b70 <__aeabi_fsub>
 80044ee:	4603      	mov	r3, r0
 80044f0:	4619      	mov	r1, r3
 80044f2:	4620      	mov	r0, r4
 80044f4:	f7fc fc46 	bl	8000d84 <__aeabi_fmul>
 80044f8:	4603      	mov	r3, r0
 80044fa:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 80044fe:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004502:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8004506:	6819      	ldr	r1, [r3, #0]
 8004508:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800450c:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8004510:	6818      	ldr	r0, [r3, #0]
 8004512:	f7fc fc37 	bl	8000d84 <__aeabi_fmul>
 8004516:	4603      	mov	r3, r0
 8004518:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 800451c:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8004520:	6811      	ldr	r1, [r2, #0]
 8004522:	4618      	mov	r0, r3
 8004524:	f7fc fc2e 	bl	8000d84 <__aeabi_fmul>
 8004528:	4603      	mov	r3, r0
 800452a:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 800452e:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8004532:	6811      	ldr	r1, [r2, #0]
 8004534:	4618      	mov	r0, r3
 8004536:	f7fc fc25 	bl	8000d84 <__aeabi_fmul>
 800453a:	4603      	mov	r3, r0
 800453c:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8004540:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8004544:	6811      	ldr	r1, [r2, #0]
 8004546:	4618      	mov	r0, r3
 8004548:	f7fc fc1c 	bl	8000d84 <__aeabi_fmul>
 800454c:	4603      	mov	r3, r0
 800454e:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004552:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 8004556:	6811      	ldr	r1, [r2, #0]
 8004558:	4618      	mov	r0, r3
 800455a:	f7fc fc13 	bl	8000d84 <__aeabi_fmul>
 800455e:	4603      	mov	r3, r0
 8004560:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004564:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 8004568:	6811      	ldr	r1, [r2, #0]
 800456a:	4618      	mov	r0, r3
 800456c:	f7fc fc0a 	bl	8000d84 <__aeabi_fmul>
 8004570:	4603      	mov	r3, r0
 8004572:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004576:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 800457a:	6811      	ldr	r1, [r2, #0]
 800457c:	4618      	mov	r0, r3
 800457e:	f7fc fc01 	bl	8000d84 <__aeabi_fmul>
 8004582:	4603      	mov	r3, r0
 8004584:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004588:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 800458c:	6811      	ldr	r1, [r2, #0]
 800458e:	4618      	mov	r0, r3
 8004590:	f7fc fbf8 	bl	8000d84 <__aeabi_fmul>
 8004594:	4603      	mov	r3, r0
 8004596:	461d      	mov	r5, r3
 8004598:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800459c:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 80045a0:	6819      	ldr	r1, [r3, #0]
 80045a2:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80045a6:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 80045aa:	6818      	ldr	r0, [r3, #0]
 80045ac:	f7fc fbea 	bl	8000d84 <__aeabi_fmul>
 80045b0:	4603      	mov	r3, r0
 80045b2:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80045b6:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 80045ba:	6811      	ldr	r1, [r2, #0]
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fc fbe1 	bl	8000d84 <__aeabi_fmul>
 80045c2:	4603      	mov	r3, r0
 80045c4:	4619      	mov	r1, r3
 80045c6:	4628      	mov	r0, r5
 80045c8:	f7fc fbdc 	bl	8000d84 <__aeabi_fmul>
 80045cc:	4603      	mov	r3, r0
 80045ce:	4619      	mov	r1, r3
 80045d0:	4620      	mov	r0, r4
 80045d2:	f7fc fc8b 	bl	8000eec <__aeabi_fdiv>
 80045d6:	4603      	mov	r3, r0
 80045d8:	4619      	mov	r1, r3
 80045da:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 80045de:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80045e2:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 80045e6:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80045ea:	f103 0308 	add.w	r3, r3, #8
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f503 53d0 	add.w	r3, r3, #6656	@ 0x1a00
 80045f4:	3310      	adds	r3, #16
 80045f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			mat_H[7][i] = (2*sin_phi*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*(cos_phi*cos_phi*cos_phi)*cos_rho*cos_rho) - (2*(bx - mx[i])*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sz*cos_lambda*cos_phi*cos_rho);
 80045fa:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80045fe:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4619      	mov	r1, r3
 8004606:	4618      	mov	r0, r3
 8004608:	f7fc fab4 	bl	8000b74 <__addsf3>
 800460c:	4603      	mov	r3, r0
 800460e:	461c      	mov	r4, r3
 8004610:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004614:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8004618:	6819      	ldr	r1, [r3, #0]
 800461a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800461e:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8004622:	6818      	ldr	r0, [r3, #0]
 8004624:	f7fc fbae 	bl	8000d84 <__aeabi_fmul>
 8004628:	4603      	mov	r3, r0
 800462a:	461d      	mov	r5, r3
 800462c:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004630:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8004634:	6819      	ldr	r1, [r3, #0]
 8004636:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800463a:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 800463e:	6818      	ldr	r0, [r3, #0]
 8004640:	f7fc fba0 	bl	8000d84 <__aeabi_fmul>
 8004644:	4603      	mov	r3, r0
 8004646:	461e      	mov	r6, r3
 8004648:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800464c:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8004650:	6819      	ldr	r1, [r3, #0]
 8004652:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004656:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 800465a:	6818      	ldr	r0, [r3, #0]
 800465c:	f7fc fb92 	bl	8000d84 <__aeabi_fmul>
 8004660:	4603      	mov	r3, r0
 8004662:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004666:	f502 72ec 	add.w	r2, r2, #472	@ 0x1d8
 800466a:	6811      	ldr	r1, [r2, #0]
 800466c:	4618      	mov	r0, r3
 800466e:	f7fc fb89 	bl	8000d84 <__aeabi_fmul>
 8004672:	4603      	mov	r3, r0
 8004674:	4619      	mov	r1, r3
 8004676:	4630      	mov	r0, r6
 8004678:	f7fc fa7a 	bl	8000b70 <__aeabi_fsub>
 800467c:	4603      	mov	r3, r0
 800467e:	4619      	mov	r1, r3
 8004680:	4628      	mov	r0, r5
 8004682:	f7fc fb7f 	bl	8000d84 <__aeabi_fmul>
 8004686:	4603      	mov	r3, r0
 8004688:	461d      	mov	r5, r3
 800468a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800468e:	f103 0308 	add.w	r3, r3, #8
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800469a:	f852 2c34 	ldr.w	r2, [r2, #-52]
 800469e:	4413      	add	r3, r2
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4619      	mov	r1, r3
 80046a4:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80046a8:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	f7fc fa5f 	bl	8000b70 <__aeabi_fsub>
 80046b2:	4603      	mov	r3, r0
 80046b4:	4619      	mov	r1, r3
 80046b6:	4628      	mov	r0, r5
 80046b8:	f7fc fb64 	bl	8000d84 <__aeabi_fmul>
 80046bc:	4603      	mov	r3, r0
 80046be:	461d      	mov	r5, r3
 80046c0:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80046c4:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80046c8:	6819      	ldr	r1, [r3, #0]
 80046ca:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80046ce:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80046d2:	6818      	ldr	r0, [r3, #0]
 80046d4:	f7fc fb56 	bl	8000d84 <__aeabi_fmul>
 80046d8:	4603      	mov	r3, r0
 80046da:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80046de:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 80046e2:	6811      	ldr	r1, [r2, #0]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7fc fb4d 	bl	8000d84 <__aeabi_fmul>
 80046ea:	4603      	mov	r3, r0
 80046ec:	461e      	mov	r6, r3
 80046ee:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80046f2:	f103 0308 	add.w	r3, r3, #8
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80046fe:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8004702:	4413      	add	r3, r2
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4619      	mov	r1, r3
 8004708:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800470c:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8004710:	6818      	ldr	r0, [r3, #0]
 8004712:	f7fc fa2d 	bl	8000b70 <__aeabi_fsub>
 8004716:	4603      	mov	r3, r0
 8004718:	4619      	mov	r1, r3
 800471a:	4630      	mov	r0, r6
 800471c:	f7fc fb32 	bl	8000d84 <__aeabi_fmul>
 8004720:	4603      	mov	r3, r0
 8004722:	4619      	mov	r1, r3
 8004724:	4628      	mov	r0, r5
 8004726:	f7fc fa25 	bl	8000b74 <__addsf3>
 800472a:	4603      	mov	r3, r0
 800472c:	461d      	mov	r5, r3
 800472e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004732:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8004736:	6819      	ldr	r1, [r3, #0]
 8004738:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800473c:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8004740:	6818      	ldr	r0, [r3, #0]
 8004742:	f7fc fb1f 	bl	8000d84 <__aeabi_fmul>
 8004746:	4603      	mov	r3, r0
 8004748:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800474c:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 8004750:	6811      	ldr	r1, [r2, #0]
 8004752:	4618      	mov	r0, r3
 8004754:	f7fc fb16 	bl	8000d84 <__aeabi_fmul>
 8004758:	4603      	mov	r3, r0
 800475a:	461e      	mov	r6, r3
 800475c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004760:	f103 0308 	add.w	r3, r3, #8
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800476c:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8004770:	4413      	add	r3, r2
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4619      	mov	r1, r3
 8004776:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800477a:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800477e:	6818      	ldr	r0, [r3, #0]
 8004780:	f7fc f9f6 	bl	8000b70 <__aeabi_fsub>
 8004784:	4603      	mov	r3, r0
 8004786:	4619      	mov	r1, r3
 8004788:	4630      	mov	r0, r6
 800478a:	f7fc fafb 	bl	8000d84 <__aeabi_fmul>
 800478e:	4603      	mov	r3, r0
 8004790:	4619      	mov	r1, r3
 8004792:	4628      	mov	r0, r5
 8004794:	f7fc f9ec 	bl	8000b70 <__aeabi_fsub>
 8004798:	4603      	mov	r3, r0
 800479a:	461d      	mov	r5, r3
 800479c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80047a0:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80047a4:	6819      	ldr	r1, [r3, #0]
 80047a6:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80047aa:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80047ae:	6818      	ldr	r0, [r3, #0]
 80047b0:	f7fc fae8 	bl	8000d84 <__aeabi_fmul>
 80047b4:	4603      	mov	r3, r0
 80047b6:	461e      	mov	r6, r3
 80047b8:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80047bc:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 80047c0:	6819      	ldr	r1, [r3, #0]
 80047c2:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80047c6:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80047ca:	6818      	ldr	r0, [r3, #0]
 80047cc:	f7fc fada 	bl	8000d84 <__aeabi_fmul>
 80047d0:	4603      	mov	r3, r0
 80047d2:	4698      	mov	r8, r3
 80047d4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80047d8:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 80047dc:	6819      	ldr	r1, [r3, #0]
 80047de:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80047e2:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 80047e6:	6818      	ldr	r0, [r3, #0]
 80047e8:	f7fc facc 	bl	8000d84 <__aeabi_fmul>
 80047ec:	4603      	mov	r3, r0
 80047ee:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80047f2:	f502 72ec 	add.w	r2, r2, #472	@ 0x1d8
 80047f6:	6811      	ldr	r1, [r2, #0]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7fc fac3 	bl	8000d84 <__aeabi_fmul>
 80047fe:	4603      	mov	r3, r0
 8004800:	4619      	mov	r1, r3
 8004802:	4640      	mov	r0, r8
 8004804:	f7fc f9b4 	bl	8000b70 <__aeabi_fsub>
 8004808:	4603      	mov	r3, r0
 800480a:	4619      	mov	r1, r3
 800480c:	4630      	mov	r0, r6
 800480e:	f7fc fab9 	bl	8000d84 <__aeabi_fmul>
 8004812:	4603      	mov	r3, r0
 8004814:	461e      	mov	r6, r3
 8004816:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800481a:	f103 0308 	add.w	r3, r3, #8
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004826:	f852 2c34 	ldr.w	r2, [r2, #-52]
 800482a:	4413      	add	r3, r2
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4619      	mov	r1, r3
 8004830:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004834:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8004838:	6818      	ldr	r0, [r3, #0]
 800483a:	f7fc f999 	bl	8000b70 <__aeabi_fsub>
 800483e:	4603      	mov	r3, r0
 8004840:	4619      	mov	r1, r3
 8004842:	4630      	mov	r0, r6
 8004844:	f7fc fa9e 	bl	8000d84 <__aeabi_fmul>
 8004848:	4603      	mov	r3, r0
 800484a:	461e      	mov	r6, r3
 800484c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004850:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8004854:	6819      	ldr	r1, [r3, #0]
 8004856:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800485a:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800485e:	6818      	ldr	r0, [r3, #0]
 8004860:	f7fc fa90 	bl	8000d84 <__aeabi_fmul>
 8004864:	4603      	mov	r3, r0
 8004866:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800486a:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 800486e:	6811      	ldr	r1, [r2, #0]
 8004870:	4618      	mov	r0, r3
 8004872:	f7fc fa87 	bl	8000d84 <__aeabi_fmul>
 8004876:	4603      	mov	r3, r0
 8004878:	4698      	mov	r8, r3
 800487a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800487e:	f103 0308 	add.w	r3, r3, #8
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800488a:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 800488e:	4413      	add	r3, r2
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4619      	mov	r1, r3
 8004894:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004898:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800489c:	6818      	ldr	r0, [r3, #0]
 800489e:	f7fc f967 	bl	8000b70 <__aeabi_fsub>
 80048a2:	4603      	mov	r3, r0
 80048a4:	4619      	mov	r1, r3
 80048a6:	4640      	mov	r0, r8
 80048a8:	f7fc fa6c 	bl	8000d84 <__aeabi_fmul>
 80048ac:	4603      	mov	r3, r0
 80048ae:	4619      	mov	r1, r3
 80048b0:	4630      	mov	r0, r6
 80048b2:	f7fc f95f 	bl	8000b74 <__addsf3>
 80048b6:	4603      	mov	r3, r0
 80048b8:	461e      	mov	r6, r3
 80048ba:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80048be:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80048c2:	6819      	ldr	r1, [r3, #0]
 80048c4:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80048c8:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80048cc:	6818      	ldr	r0, [r3, #0]
 80048ce:	f7fc fa59 	bl	8000d84 <__aeabi_fmul>
 80048d2:	4603      	mov	r3, r0
 80048d4:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80048d8:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 80048dc:	6811      	ldr	r1, [r2, #0]
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fc fa50 	bl	8000d84 <__aeabi_fmul>
 80048e4:	4603      	mov	r3, r0
 80048e6:	4698      	mov	r8, r3
 80048e8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80048ec:	f103 0308 	add.w	r3, r3, #8
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80048f8:	f852 2c38 	ldr.w	r2, [r2, #-56]
 80048fc:	4413      	add	r3, r2
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4619      	mov	r1, r3
 8004902:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004906:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800490a:	6818      	ldr	r0, [r3, #0]
 800490c:	f7fc f930 	bl	8000b70 <__aeabi_fsub>
 8004910:	4603      	mov	r3, r0
 8004912:	4619      	mov	r1, r3
 8004914:	4640      	mov	r0, r8
 8004916:	f7fc fa35 	bl	8000d84 <__aeabi_fmul>
 800491a:	4603      	mov	r3, r0
 800491c:	4619      	mov	r1, r3
 800491e:	4630      	mov	r0, r6
 8004920:	f7fc f926 	bl	8000b70 <__aeabi_fsub>
 8004924:	4603      	mov	r3, r0
 8004926:	4619      	mov	r1, r3
 8004928:	4628      	mov	r0, r5
 800492a:	f7fc fa2b 	bl	8000d84 <__aeabi_fmul>
 800492e:	4603      	mov	r3, r0
 8004930:	4619      	mov	r1, r3
 8004932:	4620      	mov	r0, r4
 8004934:	f7fc fa26 	bl	8000d84 <__aeabi_fmul>
 8004938:	4603      	mov	r3, r0
 800493a:	461c      	mov	r4, r3
 800493c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004940:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8004944:	6819      	ldr	r1, [r3, #0]
 8004946:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800494a:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800494e:	6818      	ldr	r0, [r3, #0]
 8004950:	f7fc fa18 	bl	8000d84 <__aeabi_fmul>
 8004954:	4603      	mov	r3, r0
 8004956:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 800495a:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 800495e:	6811      	ldr	r1, [r2, #0]
 8004960:	4618      	mov	r0, r3
 8004962:	f7fc fa0f 	bl	8000d84 <__aeabi_fmul>
 8004966:	4603      	mov	r3, r0
 8004968:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 800496c:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8004970:	6811      	ldr	r1, [r2, #0]
 8004972:	4618      	mov	r0, r3
 8004974:	f7fc fa06 	bl	8000d84 <__aeabi_fmul>
 8004978:	4603      	mov	r3, r0
 800497a:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 800497e:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8004982:	6811      	ldr	r1, [r2, #0]
 8004984:	4618      	mov	r0, r3
 8004986:	f7fc f9fd 	bl	8000d84 <__aeabi_fmul>
 800498a:	4603      	mov	r3, r0
 800498c:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8004990:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8004994:	6811      	ldr	r1, [r2, #0]
 8004996:	4618      	mov	r0, r3
 8004998:	f7fc f9f4 	bl	8000d84 <__aeabi_fmul>
 800499c:	4603      	mov	r3, r0
 800499e:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80049a2:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 80049a6:	6811      	ldr	r1, [r2, #0]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7fc f9eb 	bl	8000d84 <__aeabi_fmul>
 80049ae:	4603      	mov	r3, r0
 80049b0:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80049b4:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 80049b8:	6811      	ldr	r1, [r2, #0]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fc f9e2 	bl	8000d84 <__aeabi_fmul>
 80049c0:	4603      	mov	r3, r0
 80049c2:	461d      	mov	r5, r3
 80049c4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80049c8:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 80049cc:	6819      	ldr	r1, [r3, #0]
 80049ce:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80049d2:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 80049d6:	6818      	ldr	r0, [r3, #0]
 80049d8:	f7fc f9d4 	bl	8000d84 <__aeabi_fmul>
 80049dc:	4603      	mov	r3, r0
 80049de:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80049e2:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 80049e6:	6811      	ldr	r1, [r2, #0]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7fc f9cb 	bl	8000d84 <__aeabi_fmul>
 80049ee:	4603      	mov	r3, r0
 80049f0:	4619      	mov	r1, r3
 80049f2:	4628      	mov	r0, r5
 80049f4:	f7fc f9c6 	bl	8000d84 <__aeabi_fmul>
 80049f8:	4603      	mov	r3, r0
 80049fa:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80049fe:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8004a02:	6811      	ldr	r1, [r2, #0]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7fc f9bd 	bl	8000d84 <__aeabi_fmul>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004a10:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8004a14:	6811      	ldr	r1, [r2, #0]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fc f9b4 	bl	8000d84 <__aeabi_fmul>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	4619      	mov	r1, r3
 8004a20:	4620      	mov	r0, r4
 8004a22:	f7fc fa63 	bl	8000eec <__aeabi_fdiv>
 8004a26:	4603      	mov	r3, r0
 8004a28:	461c      	mov	r4, r3
 8004a2a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004a2e:	f103 0308 	add.w	r3, r3, #8
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004a3a:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8004a3e:	4413      	add	r3, r2
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4619      	mov	r1, r3
 8004a44:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004a48:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8004a4c:	6818      	ldr	r0, [r3, #0]
 8004a4e:	f7fc f88f 	bl	8000b70 <__aeabi_fsub>
 8004a52:	4603      	mov	r3, r0
 8004a54:	4619      	mov	r1, r3
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fc f88c 	bl	8000b74 <__addsf3>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	461d      	mov	r5, r3
 8004a60:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004a64:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8004a68:	6819      	ldr	r1, [r3, #0]
 8004a6a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004a6e:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8004a72:	6818      	ldr	r0, [r3, #0]
 8004a74:	f7fc f986 	bl	8000d84 <__aeabi_fmul>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	461e      	mov	r6, r3
 8004a7c:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004a80:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8004a84:	6819      	ldr	r1, [r3, #0]
 8004a86:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004a8a:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8004a8e:	6818      	ldr	r0, [r3, #0]
 8004a90:	f7fc f978 	bl	8000d84 <__aeabi_fmul>
 8004a94:	4603      	mov	r3, r0
 8004a96:	4698      	mov	r8, r3
 8004a98:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004a9c:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8004aa0:	6819      	ldr	r1, [r3, #0]
 8004aa2:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004aa6:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8004aaa:	6818      	ldr	r0, [r3, #0]
 8004aac:	f7fc f96a 	bl	8000d84 <__aeabi_fmul>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004ab6:	f502 72ec 	add.w	r2, r2, #472	@ 0x1d8
 8004aba:	6811      	ldr	r1, [r2, #0]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7fc f961 	bl	8000d84 <__aeabi_fmul>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4640      	mov	r0, r8
 8004ac8:	f7fc f852 	bl	8000b70 <__aeabi_fsub>
 8004acc:	4603      	mov	r3, r0
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4630      	mov	r0, r6
 8004ad2:	f7fc f957 	bl	8000d84 <__aeabi_fmul>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	461e      	mov	r6, r3
 8004ada:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004ade:	f103 0308 	add.w	r3, r3, #8
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004aea:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8004aee:	4413      	add	r3, r2
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4619      	mov	r1, r3
 8004af4:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004af8:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8004afc:	6818      	ldr	r0, [r3, #0]
 8004afe:	f7fc f837 	bl	8000b70 <__aeabi_fsub>
 8004b02:	4603      	mov	r3, r0
 8004b04:	4619      	mov	r1, r3
 8004b06:	4630      	mov	r0, r6
 8004b08:	f7fc f93c 	bl	8000d84 <__aeabi_fmul>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	461e      	mov	r6, r3
 8004b10:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004b14:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8004b18:	6819      	ldr	r1, [r3, #0]
 8004b1a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004b1e:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8004b22:	6818      	ldr	r0, [r3, #0]
 8004b24:	f7fc f92e 	bl	8000d84 <__aeabi_fmul>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004b2e:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8004b32:	6811      	ldr	r1, [r2, #0]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7fc f925 	bl	8000d84 <__aeabi_fmul>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	4698      	mov	r8, r3
 8004b3e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004b42:	f103 0308 	add.w	r3, r3, #8
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004b4e:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8004b52:	4413      	add	r3, r2
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4619      	mov	r1, r3
 8004b58:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004b5c:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8004b60:	6818      	ldr	r0, [r3, #0]
 8004b62:	f7fc f805 	bl	8000b70 <__aeabi_fsub>
 8004b66:	4603      	mov	r3, r0
 8004b68:	4619      	mov	r1, r3
 8004b6a:	4640      	mov	r0, r8
 8004b6c:	f7fc f90a 	bl	8000d84 <__aeabi_fmul>
 8004b70:	4603      	mov	r3, r0
 8004b72:	4619      	mov	r1, r3
 8004b74:	4630      	mov	r0, r6
 8004b76:	f7fb fffd 	bl	8000b74 <__addsf3>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	461e      	mov	r6, r3
 8004b7e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004b82:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8004b86:	6819      	ldr	r1, [r3, #0]
 8004b88:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004b8c:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8004b90:	6818      	ldr	r0, [r3, #0]
 8004b92:	f7fc f8f7 	bl	8000d84 <__aeabi_fmul>
 8004b96:	4603      	mov	r3, r0
 8004b98:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004b9c:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 8004ba0:	6811      	ldr	r1, [r2, #0]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7fc f8ee 	bl	8000d84 <__aeabi_fmul>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	4698      	mov	r8, r3
 8004bac:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004bb0:	f103 0308 	add.w	r3, r3, #8
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004bbc:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004bca:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8004bce:	6818      	ldr	r0, [r3, #0]
 8004bd0:	f7fb ffce 	bl	8000b70 <__aeabi_fsub>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	4640      	mov	r0, r8
 8004bda:	f7fc f8d3 	bl	8000d84 <__aeabi_fmul>
 8004bde:	4603      	mov	r3, r0
 8004be0:	4619      	mov	r1, r3
 8004be2:	4630      	mov	r0, r6
 8004be4:	f7fb ffc4 	bl	8000b70 <__aeabi_fsub>
 8004be8:	4603      	mov	r3, r0
 8004bea:	4619      	mov	r1, r3
 8004bec:	4628      	mov	r0, r5
 8004bee:	f7fc f8c9 	bl	8000d84 <__aeabi_fmul>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	461d      	mov	r5, r3
 8004bf6:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004bfa:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8004bfe:	6819      	ldr	r1, [r3, #0]
 8004c00:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004c04:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8004c08:	6818      	ldr	r0, [r3, #0]
 8004c0a:	f7fc f8bb 	bl	8000d84 <__aeabi_fmul>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8004c14:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8004c18:	6811      	ldr	r1, [r2, #0]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7fc f8b2 	bl	8000d84 <__aeabi_fmul>
 8004c20:	4603      	mov	r3, r0
 8004c22:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8004c26:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8004c2a:	6811      	ldr	r1, [r2, #0]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7fc f8a9 	bl	8000d84 <__aeabi_fmul>
 8004c32:	4603      	mov	r3, r0
 8004c34:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004c38:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 8004c3c:	6811      	ldr	r1, [r2, #0]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fc f8a0 	bl	8000d84 <__aeabi_fmul>
 8004c44:	4603      	mov	r3, r0
 8004c46:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004c4a:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 8004c4e:	6811      	ldr	r1, [r2, #0]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7fc f897 	bl	8000d84 <__aeabi_fmul>
 8004c56:	4603      	mov	r3, r0
 8004c58:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004c5c:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8004c60:	6811      	ldr	r1, [r2, #0]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fc f88e 	bl	8000d84 <__aeabi_fmul>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	4628      	mov	r0, r5
 8004c6e:	f7fc f93d 	bl	8000eec <__aeabi_fdiv>
 8004c72:	4603      	mov	r3, r0
 8004c74:	4619      	mov	r1, r3
 8004c76:	4620      	mov	r0, r4
 8004c78:	f7fb ff7a 	bl	8000b70 <__aeabi_fsub>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	4619      	mov	r1, r3
 8004c80:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 8004c84:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8004c88:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8004c8c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004c90:	f103 0308 	add.w	r3, r3, #8
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f503 53f3 	add.w	r3, r3, #7776	@ 0x1e60
 8004c9a:	3308      	adds	r3, #8
 8004c9c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			mat_H[8][i] = (2*sin_lambda*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/(sx*sx*sy*sy*sz*sz*(cos_lambda*cos_lambda*cos_lambda)*cos_phi*cos_phi*(cos_rho*cos_rho)) + (2*(sy*sz*(cos_lambda*sin_rho + cos_rho*sin_lambda*sin_phi)*(bx - mx[i]) - sx*sz*cos_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8004ca0:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004ca4:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4619      	mov	r1, r3
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7fb ff61 	bl	8000b74 <__addsf3>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	461c      	mov	r4, r3
 8004cb6:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004cba:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8004cbe:	6819      	ldr	r1, [r3, #0]
 8004cc0:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004cc4:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8004cc8:	6818      	ldr	r0, [r3, #0]
 8004cca:	f7fc f85b 	bl	8000d84 <__aeabi_fmul>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	461d      	mov	r5, r3
 8004cd2:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004cd6:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8004cda:	6819      	ldr	r1, [r3, #0]
 8004cdc:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004ce0:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8004ce4:	6818      	ldr	r0, [r3, #0]
 8004ce6:	f7fc f84d 	bl	8000d84 <__aeabi_fmul>
 8004cea:	4603      	mov	r3, r0
 8004cec:	461e      	mov	r6, r3
 8004cee:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004cf2:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8004cf6:	6819      	ldr	r1, [r3, #0]
 8004cf8:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004cfc:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8004d00:	6818      	ldr	r0, [r3, #0]
 8004d02:	f7fc f83f 	bl	8000d84 <__aeabi_fmul>
 8004d06:	4603      	mov	r3, r0
 8004d08:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004d0c:	f502 72ec 	add.w	r2, r2, #472	@ 0x1d8
 8004d10:	6811      	ldr	r1, [r2, #0]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fc f836 	bl	8000d84 <__aeabi_fmul>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	4630      	mov	r0, r6
 8004d1e:	f7fb ff27 	bl	8000b70 <__aeabi_fsub>
 8004d22:	4603      	mov	r3, r0
 8004d24:	4619      	mov	r1, r3
 8004d26:	4628      	mov	r0, r5
 8004d28:	f7fc f82c 	bl	8000d84 <__aeabi_fmul>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	461d      	mov	r5, r3
 8004d30:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004d34:	f103 0308 	add.w	r3, r3, #8
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004d40:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8004d44:	4413      	add	r3, r2
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4619      	mov	r1, r3
 8004d4a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004d4e:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8004d52:	6818      	ldr	r0, [r3, #0]
 8004d54:	f7fb ff0c 	bl	8000b70 <__aeabi_fsub>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	4628      	mov	r0, r5
 8004d5e:	f7fc f811 	bl	8000d84 <__aeabi_fmul>
 8004d62:	4603      	mov	r3, r0
 8004d64:	461d      	mov	r5, r3
 8004d66:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004d6a:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8004d6e:	6819      	ldr	r1, [r3, #0]
 8004d70:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004d74:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8004d78:	6818      	ldr	r0, [r3, #0]
 8004d7a:	f7fc f803 	bl	8000d84 <__aeabi_fmul>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004d84:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8004d88:	6811      	ldr	r1, [r2, #0]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fb fffa 	bl	8000d84 <__aeabi_fmul>
 8004d90:	4603      	mov	r3, r0
 8004d92:	461e      	mov	r6, r3
 8004d94:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004d98:	f103 0308 	add.w	r3, r3, #8
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004da4:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8004da8:	4413      	add	r3, r2
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4619      	mov	r1, r3
 8004dae:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004db2:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8004db6:	6818      	ldr	r0, [r3, #0]
 8004db8:	f7fb feda 	bl	8000b70 <__aeabi_fsub>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	4630      	mov	r0, r6
 8004dc2:	f7fb ffdf 	bl	8000d84 <__aeabi_fmul>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	4619      	mov	r1, r3
 8004dca:	4628      	mov	r0, r5
 8004dcc:	f7fb fed2 	bl	8000b74 <__addsf3>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	461d      	mov	r5, r3
 8004dd4:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004dd8:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8004ddc:	6819      	ldr	r1, [r3, #0]
 8004dde:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004de2:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8004de6:	6818      	ldr	r0, [r3, #0]
 8004de8:	f7fb ffcc 	bl	8000d84 <__aeabi_fmul>
 8004dec:	4603      	mov	r3, r0
 8004dee:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004df2:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 8004df6:	6811      	ldr	r1, [r2, #0]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7fb ffc3 	bl	8000d84 <__aeabi_fmul>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	461e      	mov	r6, r3
 8004e02:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004e06:	f103 0308 	add.w	r3, r3, #8
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004e12:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8004e16:	4413      	add	r3, r2
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004e20:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8004e24:	6818      	ldr	r0, [r3, #0]
 8004e26:	f7fb fea3 	bl	8000b70 <__aeabi_fsub>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4630      	mov	r0, r6
 8004e30:	f7fb ffa8 	bl	8000d84 <__aeabi_fmul>
 8004e34:	4603      	mov	r3, r0
 8004e36:	4619      	mov	r1, r3
 8004e38:	4628      	mov	r0, r5
 8004e3a:	f7fb fe99 	bl	8000b70 <__aeabi_fsub>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	461d      	mov	r5, r3
 8004e42:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004e46:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8004e4a:	6819      	ldr	r1, [r3, #0]
 8004e4c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004e50:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8004e54:	6818      	ldr	r0, [r3, #0]
 8004e56:	f7fb ff95 	bl	8000d84 <__aeabi_fmul>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	461e      	mov	r6, r3
 8004e5e:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004e62:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8004e66:	6819      	ldr	r1, [r3, #0]
 8004e68:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004e6c:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8004e70:	6818      	ldr	r0, [r3, #0]
 8004e72:	f7fb ff87 	bl	8000d84 <__aeabi_fmul>
 8004e76:	4603      	mov	r3, r0
 8004e78:	4698      	mov	r8, r3
 8004e7a:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004e7e:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8004e82:	6819      	ldr	r1, [r3, #0]
 8004e84:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004e88:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8004e8c:	6818      	ldr	r0, [r3, #0]
 8004e8e:	f7fb ff79 	bl	8000d84 <__aeabi_fmul>
 8004e92:	4603      	mov	r3, r0
 8004e94:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004e98:	f502 72ec 	add.w	r2, r2, #472	@ 0x1d8
 8004e9c:	6811      	ldr	r1, [r2, #0]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fb ff70 	bl	8000d84 <__aeabi_fmul>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	4640      	mov	r0, r8
 8004eaa:	f7fb fe61 	bl	8000b70 <__aeabi_fsub>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	4630      	mov	r0, r6
 8004eb4:	f7fb ff66 	bl	8000d84 <__aeabi_fmul>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	461e      	mov	r6, r3
 8004ebc:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004ec0:	f103 0308 	add.w	r3, r3, #8
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004ecc:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004eda:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8004ede:	6818      	ldr	r0, [r3, #0]
 8004ee0:	f7fb fe46 	bl	8000b70 <__aeabi_fsub>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4630      	mov	r0, r6
 8004eea:	f7fb ff4b 	bl	8000d84 <__aeabi_fmul>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	461e      	mov	r6, r3
 8004ef2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004ef6:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8004efa:	6819      	ldr	r1, [r3, #0]
 8004efc:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004f00:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8004f04:	6818      	ldr	r0, [r3, #0]
 8004f06:	f7fb ff3d 	bl	8000d84 <__aeabi_fmul>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004f10:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8004f14:	6811      	ldr	r1, [r2, #0]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fb ff34 	bl	8000d84 <__aeabi_fmul>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	4698      	mov	r8, r3
 8004f20:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004f24:	f103 0308 	add.w	r3, r3, #8
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004f30:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8004f34:	4413      	add	r3, r2
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4619      	mov	r1, r3
 8004f3a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004f3e:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8004f42:	6818      	ldr	r0, [r3, #0]
 8004f44:	f7fb fe14 	bl	8000b70 <__aeabi_fsub>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	4640      	mov	r0, r8
 8004f4e:	f7fb ff19 	bl	8000d84 <__aeabi_fmul>
 8004f52:	4603      	mov	r3, r0
 8004f54:	4619      	mov	r1, r3
 8004f56:	4630      	mov	r0, r6
 8004f58:	f7fb fe0c 	bl	8000b74 <__addsf3>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	461e      	mov	r6, r3
 8004f60:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004f64:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8004f68:	6819      	ldr	r1, [r3, #0]
 8004f6a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004f6e:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8004f72:	6818      	ldr	r0, [r3, #0]
 8004f74:	f7fb ff06 	bl	8000d84 <__aeabi_fmul>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004f7e:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 8004f82:	6811      	ldr	r1, [r2, #0]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7fb fefd 	bl	8000d84 <__aeabi_fmul>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	4698      	mov	r8, r3
 8004f8e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004f92:	f103 0308 	add.w	r3, r3, #8
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004f9e:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004fac:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8004fb0:	6818      	ldr	r0, [r3, #0]
 8004fb2:	f7fb fddd 	bl	8000b70 <__aeabi_fsub>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4640      	mov	r0, r8
 8004fbc:	f7fb fee2 	bl	8000d84 <__aeabi_fmul>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	4630      	mov	r0, r6
 8004fc6:	f7fb fdd3 	bl	8000b70 <__aeabi_fsub>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	4619      	mov	r1, r3
 8004fce:	4628      	mov	r0, r5
 8004fd0:	f7fb fed8 	bl	8000d84 <__aeabi_fmul>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	4620      	mov	r0, r4
 8004fda:	f7fb fed3 	bl	8000d84 <__aeabi_fmul>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	461c      	mov	r4, r3
 8004fe2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004fe6:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8004fea:	6819      	ldr	r1, [r3, #0]
 8004fec:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004ff0:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8004ff4:	6818      	ldr	r0, [r3, #0]
 8004ff6:	f7fb fec5 	bl	8000d84 <__aeabi_fmul>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8005000:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8005004:	6811      	ldr	r1, [r2, #0]
 8005006:	4618      	mov	r0, r3
 8005008:	f7fb febc 	bl	8000d84 <__aeabi_fmul>
 800500c:	4603      	mov	r3, r0
 800500e:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8005012:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8005016:	6811      	ldr	r1, [r2, #0]
 8005018:	4618      	mov	r0, r3
 800501a:	f7fb feb3 	bl	8000d84 <__aeabi_fmul>
 800501e:	4603      	mov	r3, r0
 8005020:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8005024:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8005028:	6811      	ldr	r1, [r2, #0]
 800502a:	4618      	mov	r0, r3
 800502c:	f7fb feaa 	bl	8000d84 <__aeabi_fmul>
 8005030:	4603      	mov	r3, r0
 8005032:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8005036:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 800503a:	6811      	ldr	r1, [r2, #0]
 800503c:	4618      	mov	r0, r3
 800503e:	f7fb fea1 	bl	8000d84 <__aeabi_fmul>
 8005042:	4603      	mov	r3, r0
 8005044:	461d      	mov	r5, r3
 8005046:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800504a:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 800504e:	6819      	ldr	r1, [r3, #0]
 8005050:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8005054:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8005058:	6818      	ldr	r0, [r3, #0]
 800505a:	f7fb fe93 	bl	8000d84 <__aeabi_fmul>
 800505e:	4603      	mov	r3, r0
 8005060:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8005064:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 8005068:	6811      	ldr	r1, [r2, #0]
 800506a:	4618      	mov	r0, r3
 800506c:	f7fb fe8a 	bl	8000d84 <__aeabi_fmul>
 8005070:	4603      	mov	r3, r0
 8005072:	4619      	mov	r1, r3
 8005074:	4628      	mov	r0, r5
 8005076:	f7fb fe85 	bl	8000d84 <__aeabi_fmul>
 800507a:	4603      	mov	r3, r0
 800507c:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8005080:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 8005084:	6811      	ldr	r1, [r2, #0]
 8005086:	4618      	mov	r0, r3
 8005088:	f7fb fe7c 	bl	8000d84 <__aeabi_fmul>
 800508c:	4603      	mov	r3, r0
 800508e:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8005092:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 8005096:	6811      	ldr	r1, [r2, #0]
 8005098:	4618      	mov	r0, r3
 800509a:	f7fb fe73 	bl	8000d84 <__aeabi_fmul>
 800509e:	4603      	mov	r3, r0
 80050a0:	461d      	mov	r5, r3
 80050a2:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80050a6:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 80050aa:	6819      	ldr	r1, [r3, #0]
 80050ac:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80050b0:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 80050b4:	6818      	ldr	r0, [r3, #0]
 80050b6:	f7fb fe65 	bl	8000d84 <__aeabi_fmul>
 80050ba:	4603      	mov	r3, r0
 80050bc:	4619      	mov	r1, r3
 80050be:	4628      	mov	r0, r5
 80050c0:	f7fb fe60 	bl	8000d84 <__aeabi_fmul>
 80050c4:	4603      	mov	r3, r0
 80050c6:	4619      	mov	r1, r3
 80050c8:	4620      	mov	r0, r4
 80050ca:	f7fb ff0f 	bl	8000eec <__aeabi_fdiv>
 80050ce:	4603      	mov	r3, r0
 80050d0:	461c      	mov	r4, r3
 80050d2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80050d6:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80050da:	6819      	ldr	r1, [r3, #0]
 80050dc:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80050e0:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80050e4:	6818      	ldr	r0, [r3, #0]
 80050e6:	f7fb fe4d 	bl	8000d84 <__aeabi_fmul>
 80050ea:	4603      	mov	r3, r0
 80050ec:	461d      	mov	r5, r3
 80050ee:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80050f2:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 80050f6:	6819      	ldr	r1, [r3, #0]
 80050f8:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80050fc:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8005100:	6818      	ldr	r0, [r3, #0]
 8005102:	f7fb fe3f 	bl	8000d84 <__aeabi_fmul>
 8005106:	4603      	mov	r3, r0
 8005108:	461e      	mov	r6, r3
 800510a:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800510e:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8005112:	6819      	ldr	r1, [r3, #0]
 8005114:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8005118:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 800511c:	6818      	ldr	r0, [r3, #0]
 800511e:	f7fb fe31 	bl	8000d84 <__aeabi_fmul>
 8005122:	4603      	mov	r3, r0
 8005124:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8005128:	f502 72ec 	add.w	r2, r2, #472	@ 0x1d8
 800512c:	6811      	ldr	r1, [r2, #0]
 800512e:	4618      	mov	r0, r3
 8005130:	f7fb fe28 	bl	8000d84 <__aeabi_fmul>
 8005134:	4603      	mov	r3, r0
 8005136:	4619      	mov	r1, r3
 8005138:	4630      	mov	r0, r6
 800513a:	f7fb fd1b 	bl	8000b74 <__addsf3>
 800513e:	4603      	mov	r3, r0
 8005140:	4619      	mov	r1, r3
 8005142:	4628      	mov	r0, r5
 8005144:	f7fb fe1e 	bl	8000d84 <__aeabi_fmul>
 8005148:	4603      	mov	r3, r0
 800514a:	461d      	mov	r5, r3
 800514c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8005150:	f103 0308 	add.w	r3, r3, #8
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800515c:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8005160:	4413      	add	r3, r2
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4619      	mov	r1, r3
 8005166:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800516a:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 800516e:	6818      	ldr	r0, [r3, #0]
 8005170:	f7fb fcfe 	bl	8000b70 <__aeabi_fsub>
 8005174:	4603      	mov	r3, r0
 8005176:	4619      	mov	r1, r3
 8005178:	4628      	mov	r0, r5
 800517a:	f7fb fe03 	bl	8000d84 <__aeabi_fmul>
 800517e:	4603      	mov	r3, r0
 8005180:	461d      	mov	r5, r3
 8005182:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8005186:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800518a:	6819      	ldr	r1, [r3, #0]
 800518c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8005190:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8005194:	6818      	ldr	r0, [r3, #0]
 8005196:	f7fb fdf5 	bl	8000d84 <__aeabi_fmul>
 800519a:	4603      	mov	r3, r0
 800519c:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80051a0:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 80051a4:	6811      	ldr	r1, [r2, #0]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fb fdec 	bl	8000d84 <__aeabi_fmul>
 80051ac:	4603      	mov	r3, r0
 80051ae:	461e      	mov	r6, r3
 80051b0:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80051b4:	f103 0308 	add.w	r3, r3, #8
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80051c0:	f852 2c38 	ldr.w	r2, [r2, #-56]
 80051c4:	4413      	add	r3, r2
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4619      	mov	r1, r3
 80051ca:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80051ce:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80051d2:	6818      	ldr	r0, [r3, #0]
 80051d4:	f7fb fccc 	bl	8000b70 <__aeabi_fsub>
 80051d8:	4603      	mov	r3, r0
 80051da:	4619      	mov	r1, r3
 80051dc:	4630      	mov	r0, r6
 80051de:	f7fb fdd1 	bl	8000d84 <__aeabi_fmul>
 80051e2:	4603      	mov	r3, r0
 80051e4:	4619      	mov	r1, r3
 80051e6:	4628      	mov	r0, r5
 80051e8:	f7fb fcc2 	bl	8000b70 <__aeabi_fsub>
 80051ec:	4603      	mov	r3, r0
 80051ee:	4619      	mov	r1, r3
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7fb fcbf 	bl	8000b74 <__addsf3>
 80051f6:	4603      	mov	r3, r0
 80051f8:	461d      	mov	r5, r3
 80051fa:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80051fe:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8005202:	6819      	ldr	r1, [r3, #0]
 8005204:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8005208:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800520c:	6818      	ldr	r0, [r3, #0]
 800520e:	f7fb fdb9 	bl	8000d84 <__aeabi_fmul>
 8005212:	4603      	mov	r3, r0
 8005214:	461e      	mov	r6, r3
 8005216:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800521a:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 800521e:	6819      	ldr	r1, [r3, #0]
 8005220:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8005224:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8005228:	6818      	ldr	r0, [r3, #0]
 800522a:	f7fb fdab 	bl	8000d84 <__aeabi_fmul>
 800522e:	4603      	mov	r3, r0
 8005230:	4698      	mov	r8, r3
 8005232:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8005236:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 800523a:	6819      	ldr	r1, [r3, #0]
 800523c:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8005240:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8005244:	6818      	ldr	r0, [r3, #0]
 8005246:	f7fb fd9d 	bl	8000d84 <__aeabi_fmul>
 800524a:	4603      	mov	r3, r0
 800524c:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8005250:	f502 72ec 	add.w	r2, r2, #472	@ 0x1d8
 8005254:	6811      	ldr	r1, [r2, #0]
 8005256:	4618      	mov	r0, r3
 8005258:	f7fb fd94 	bl	8000d84 <__aeabi_fmul>
 800525c:	4603      	mov	r3, r0
 800525e:	4619      	mov	r1, r3
 8005260:	4640      	mov	r0, r8
 8005262:	f7fb fc85 	bl	8000b70 <__aeabi_fsub>
 8005266:	4603      	mov	r3, r0
 8005268:	4619      	mov	r1, r3
 800526a:	4630      	mov	r0, r6
 800526c:	f7fb fd8a 	bl	8000d84 <__aeabi_fmul>
 8005270:	4603      	mov	r3, r0
 8005272:	461e      	mov	r6, r3
 8005274:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8005278:	f103 0308 	add.w	r3, r3, #8
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8005284:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8005288:	4413      	add	r3, r2
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4619      	mov	r1, r3
 800528e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8005292:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8005296:	6818      	ldr	r0, [r3, #0]
 8005298:	f7fb fc6a 	bl	8000b70 <__aeabi_fsub>
 800529c:	4603      	mov	r3, r0
 800529e:	4619      	mov	r1, r3
 80052a0:	4630      	mov	r0, r6
 80052a2:	f7fb fd6f 	bl	8000d84 <__aeabi_fmul>
 80052a6:	4603      	mov	r3, r0
 80052a8:	461e      	mov	r6, r3
 80052aa:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80052ae:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80052b2:	6819      	ldr	r1, [r3, #0]
 80052b4:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80052b8:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80052bc:	6818      	ldr	r0, [r3, #0]
 80052be:	f7fb fd61 	bl	8000d84 <__aeabi_fmul>
 80052c2:	4603      	mov	r3, r0
 80052c4:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80052c8:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 80052cc:	6811      	ldr	r1, [r2, #0]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7fb fd58 	bl	8000d84 <__aeabi_fmul>
 80052d4:	4603      	mov	r3, r0
 80052d6:	4698      	mov	r8, r3
 80052d8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80052dc:	f103 0308 	add.w	r3, r3, #8
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80052e8:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 80052ec:	4413      	add	r3, r2
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4619      	mov	r1, r3
 80052f2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80052f6:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80052fa:	6818      	ldr	r0, [r3, #0]
 80052fc:	f7fb fc38 	bl	8000b70 <__aeabi_fsub>
 8005300:	4603      	mov	r3, r0
 8005302:	4619      	mov	r1, r3
 8005304:	4640      	mov	r0, r8
 8005306:	f7fb fd3d 	bl	8000d84 <__aeabi_fmul>
 800530a:	4603      	mov	r3, r0
 800530c:	4619      	mov	r1, r3
 800530e:	4630      	mov	r0, r6
 8005310:	f7fb fc30 	bl	8000b74 <__addsf3>
 8005314:	4603      	mov	r3, r0
 8005316:	461e      	mov	r6, r3
 8005318:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800531c:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8005320:	6819      	ldr	r1, [r3, #0]
 8005322:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8005326:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800532a:	6818      	ldr	r0, [r3, #0]
 800532c:	f7fb fd2a 	bl	8000d84 <__aeabi_fmul>
 8005330:	4603      	mov	r3, r0
 8005332:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8005336:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 800533a:	6811      	ldr	r1, [r2, #0]
 800533c:	4618      	mov	r0, r3
 800533e:	f7fb fd21 	bl	8000d84 <__aeabi_fmul>
 8005342:	4603      	mov	r3, r0
 8005344:	4698      	mov	r8, r3
 8005346:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800534a:	f103 0308 	add.w	r3, r3, #8
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8005356:	f852 2c38 	ldr.w	r2, [r2, #-56]
 800535a:	4413      	add	r3, r2
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4619      	mov	r1, r3
 8005360:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8005364:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8005368:	6818      	ldr	r0, [r3, #0]
 800536a:	f7fb fc01 	bl	8000b70 <__aeabi_fsub>
 800536e:	4603      	mov	r3, r0
 8005370:	4619      	mov	r1, r3
 8005372:	4640      	mov	r0, r8
 8005374:	f7fb fd06 	bl	8000d84 <__aeabi_fmul>
 8005378:	4603      	mov	r3, r0
 800537a:	4619      	mov	r1, r3
 800537c:	4630      	mov	r0, r6
 800537e:	f7fb fbf7 	bl	8000b70 <__aeabi_fsub>
 8005382:	4603      	mov	r3, r0
 8005384:	4619      	mov	r1, r3
 8005386:	4628      	mov	r0, r5
 8005388:	f7fb fcfc 	bl	8000d84 <__aeabi_fmul>
 800538c:	4603      	mov	r3, r0
 800538e:	461d      	mov	r5, r3
 8005390:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8005394:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8005398:	6819      	ldr	r1, [r3, #0]
 800539a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800539e:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80053a2:	6818      	ldr	r0, [r3, #0]
 80053a4:	f7fb fcee 	bl	8000d84 <__aeabi_fmul>
 80053a8:	4603      	mov	r3, r0
 80053aa:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80053ae:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 80053b2:	6811      	ldr	r1, [r2, #0]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f7fb fce5 	bl	8000d84 <__aeabi_fmul>
 80053ba:	4603      	mov	r3, r0
 80053bc:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80053c0:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 80053c4:	6811      	ldr	r1, [r2, #0]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7fb fcdc 	bl	8000d84 <__aeabi_fmul>
 80053cc:	4603      	mov	r3, r0
 80053ce:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80053d2:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 80053d6:	6811      	ldr	r1, [r2, #0]
 80053d8:	4618      	mov	r0, r3
 80053da:	f7fb fcd3 	bl	8000d84 <__aeabi_fmul>
 80053de:	4603      	mov	r3, r0
 80053e0:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80053e4:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 80053e8:	6811      	ldr	r1, [r2, #0]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7fb fcca 	bl	8000d84 <__aeabi_fmul>
 80053f0:	4603      	mov	r3, r0
 80053f2:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80053f6:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 80053fa:	6811      	ldr	r1, [r2, #0]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7fb fcc1 	bl	8000d84 <__aeabi_fmul>
 8005402:	4603      	mov	r3, r0
 8005404:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8005408:	f502 72e2 	add.w	r2, r2, #452	@ 0x1c4
 800540c:	6811      	ldr	r1, [r2, #0]
 800540e:	4618      	mov	r0, r3
 8005410:	f7fb fcb8 	bl	8000d84 <__aeabi_fmul>
 8005414:	4603      	mov	r3, r0
 8005416:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800541a:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 800541e:	6811      	ldr	r1, [r2, #0]
 8005420:	4618      	mov	r0, r3
 8005422:	f7fb fcaf 	bl	8000d84 <__aeabi_fmul>
 8005426:	4603      	mov	r3, r0
 8005428:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800542c:	f502 72e6 	add.w	r2, r2, #460	@ 0x1cc
 8005430:	6811      	ldr	r1, [r2, #0]
 8005432:	4618      	mov	r0, r3
 8005434:	f7fb fca6 	bl	8000d84 <__aeabi_fmul>
 8005438:	4603      	mov	r3, r0
 800543a:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800543e:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8005442:	6811      	ldr	r1, [r2, #0]
 8005444:	4618      	mov	r0, r3
 8005446:	f7fb fc9d 	bl	8000d84 <__aeabi_fmul>
 800544a:	4603      	mov	r3, r0
 800544c:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8005450:	f502 72e4 	add.w	r2, r2, #456	@ 0x1c8
 8005454:	6811      	ldr	r1, [r2, #0]
 8005456:	4618      	mov	r0, r3
 8005458:	f7fb fc94 	bl	8000d84 <__aeabi_fmul>
 800545c:	4603      	mov	r3, r0
 800545e:	4619      	mov	r1, r3
 8005460:	4628      	mov	r0, r5
 8005462:	f7fb fd43 	bl	8000eec <__aeabi_fdiv>
 8005466:	4603      	mov	r3, r0
 8005468:	4619      	mov	r1, r3
 800546a:	4620      	mov	r0, r4
 800546c:	f7fb fb82 	bl	8000b74 <__addsf3>
 8005470:	4603      	mov	r3, r0
 8005472:	4619      	mov	r1, r3
 8005474:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 8005478:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800547c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005480:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8005484:	f102 0208 	add.w	r2, r2, #8
 8005488:	6812      	ldr	r2, [r2, #0]
 800548a:	f502 520b 	add.w	r2, r2, #8896	@ 0x22c0
 800548e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(int i=0; i < tam; i++)
 8005492:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8005496:	f103 0308 	add.w	r3, r3, #8
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	3301      	adds	r3, #1
 800549e:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80054a2:	f102 0208 	add.w	r2, r2, #8
 80054a6:	6013      	str	r3, [r2, #0]
 80054a8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80054ac:	f103 0308 	add.w	r3, r3, #8
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 80054b6:	f6fc a921 	blt.w	80016fc <NLLS+0x33c>
		}

		J = 0;
 80054ba:	f04f 0300 	mov.w	r3, #0
 80054be:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80054c2:	f102 0210 	add.w	r2, r2, #16
 80054c6:	6013      	str	r3, [r2, #0]

		for(int i=0; i < tam; i++)
 80054c8:	2300      	movs	r3, #0
 80054ca:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80054ce:	f102 0204 	add.w	r2, r2, #4
 80054d2:	6013      	str	r3, [r2, #0]
 80054d4:	e03c      	b.n	8005550 <NLLS+0x4190>
		{
			J += (e[i] * e[i])/2;
 80054d6:	f507 33a8 	add.w	r3, r7, #86016	@ 0x15000
 80054da:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80054de:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 80054e2:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80054e6:	f102 0204 	add.w	r2, r2, #4
 80054ea:	6812      	ldr	r2, [r2, #0]
 80054ec:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80054f0:	f507 33a8 	add.w	r3, r7, #86016	@ 0x15000
 80054f4:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80054f8:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 80054fc:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8005500:	f102 0204 	add.w	r2, r2, #4
 8005504:	6812      	ldr	r2, [r2, #0]
 8005506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800550a:	4619      	mov	r1, r3
 800550c:	f7fb fc3a 	bl	8000d84 <__aeabi_fmul>
 8005510:	4603      	mov	r3, r0
 8005512:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005516:	4618      	mov	r0, r3
 8005518:	f7fb fce8 	bl	8000eec <__aeabi_fdiv>
 800551c:	4603      	mov	r3, r0
 800551e:	4619      	mov	r1, r3
 8005520:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8005524:	f103 0310 	add.w	r3, r3, #16
 8005528:	6818      	ldr	r0, [r3, #0]
 800552a:	f7fb fb23 	bl	8000b74 <__addsf3>
 800552e:	4603      	mov	r3, r0
 8005530:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8005534:	f102 0210 	add.w	r2, r2, #16
 8005538:	6013      	str	r3, [r2, #0]
		for(int i=0; i < tam; i++)
 800553a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800553e:	f103 0304 	add.w	r3, r3, #4
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3301      	adds	r3, #1
 8005546:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 800554a:	f102 0204 	add.w	r2, r2, #4
 800554e:	6013      	str	r3, [r2, #0]
 8005550:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8005554:	f103 0304 	add.w	r3, r3, #4
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 800555e:	dbba      	blt.n	80054d6 <NLLS+0x4116>
		}

		if(passo < 2)
 8005560:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8005564:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d80a      	bhi.n	8005584 <NLLS+0x41c4>
		{
			error_ant = J;
 800556e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8005572:	f103 0310 	add.w	r3, r3, #16
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 800557c:	f102 0214 	add.w	r2, r2, #20
 8005580:	6013      	str	r3, [r2, #0]
 8005582:	e052      	b.n	800562a <NLLS+0x426a>
		}
		else
		{
			delta_J = 100*fabs(J-error_ant)/J;
 8005584:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8005588:	f103 0314 	add.w	r3, r3, #20
 800558c:	6819      	ldr	r1, [r3, #0]
 800558e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8005592:	f103 0310 	add.w	r3, r3, #16
 8005596:	6818      	ldr	r0, [r3, #0]
 8005598:	f7fb faea 	bl	8000b70 <__aeabi_fsub>
 800559c:	4603      	mov	r3, r0
 800559e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fa ff40 	bl	8000428 <__aeabi_f2d>
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	4b9c      	ldr	r3, [pc, #624]	@ (8005820 <NLLS+0x4460>)
 80055ae:	f7fa ff93 	bl	80004d8 <__aeabi_dmul>
 80055b2:	4602      	mov	r2, r0
 80055b4:	460b      	mov	r3, r1
 80055b6:	4614      	mov	r4, r2
 80055b8:	461d      	mov	r5, r3
 80055ba:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80055be:	f103 0310 	add.w	r3, r3, #16
 80055c2:	6818      	ldr	r0, [r3, #0]
 80055c4:	f7fa ff30 	bl	8000428 <__aeabi_f2d>
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	4620      	mov	r0, r4
 80055ce:	4629      	mov	r1, r5
 80055d0:	f7fb f8ac 	bl	800072c <__aeabi_ddiv>
 80055d4:	4602      	mov	r2, r0
 80055d6:	460b      	mov	r3, r1
 80055d8:	4610      	mov	r0, r2
 80055da:	4619      	mov	r1, r3
 80055dc:	f7fb fa74 	bl	8000ac8 <__aeabi_d2f>
 80055e0:	4603      	mov	r3, r0
 80055e2:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80055e6:	f502 72e0 	add.w	r2, r2, #448	@ 0x1c0
 80055ea:	6013      	str	r3, [r2, #0]
			if(delta_J < 0.05)
 80055ec:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80055f0:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 80055f4:	6818      	ldr	r0, [r3, #0]
 80055f6:	f7fa ff17 	bl	8000428 <__aeabi_f2d>
 80055fa:	a387      	add	r3, pc, #540	@ (adr r3, 8005818 <NLLS+0x4458>)
 80055fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005600:	f7fb f9dc 	bl	80009bc <__aeabi_dcmplt>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d005      	beq.n	8005616 <NLLS+0x4256>
			{
				loop = 0;
 800560a:	2300      	movs	r3, #0
 800560c:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8005610:	f102 023e 	add.w	r2, r2, #62	@ 0x3e
 8005614:	7013      	strb	r3, [r2, #0]
			}
			error_ant = J;
 8005616:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800561a:	f103 0310 	add.w	r3, r3, #16
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8005624:	f102 0214 	add.w	r2, r2, #20
 8005628:	6013      	str	r3, [r2, #0]
		}

		for(int i = 0; i < N; i++)
 800562a:	2300      	movs	r3, #0
 800562c:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8005630:	6013      	str	r3, [r2, #0]
 8005632:	e0ae      	b.n	8005792 <NLLS+0x43d2>
		{
			for(int j = 0; j < N; j++)
 8005634:	2300      	movs	r3, #0
 8005636:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800563a:	f502 72fe 	add.w	r2, r2, #508	@ 0x1fc
 800563e:	6013      	str	r3, [r2, #0]
 8005640:	e098      	b.n	8005774 <NLLS+0x43b4>
			{
				Ht_H[i][j] = 0;
 8005642:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 8005646:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800564a:	f5a3 711a 	sub.w	r1, r3, #616	@ 0x268
 800564e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	4613      	mov	r3, r2
 8005656:	00db      	lsls	r3, r3, #3
 8005658:	4413      	add	r3, r2
 800565a:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800565e:	f502 72fe 	add.w	r2, r2, #508	@ 0x1fc
 8005662:	6812      	ldr	r2, [r2, #0]
 8005664:	4413      	add	r3, r2
 8005666:	f04f 0200 	mov.w	r2, #0
 800566a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(int k = 0; k < tam; k++)
 800566e:	2300      	movs	r3, #0
 8005670:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8005674:	f502 72fc 	add.w	r2, r2, #504	@ 0x1f8
 8005678:	6013      	str	r3, [r2, #0]
 800567a:	e068      	b.n	800574e <NLLS+0x438e>
				{
					Ht_H[i][j] += mat_H[i][k]*mat_H[j][k];
 800567c:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 8005680:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8005684:	f5a3 711a 	sub.w	r1, r3, #616	@ 0x268
 8005688:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	4613      	mov	r3, r2
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	4413      	add	r3, r2
 8005694:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8005698:	f502 72fe 	add.w	r2, r2, #508	@ 0x1fc
 800569c:	6812      	ldr	r2, [r2, #0]
 800569e:	4413      	add	r3, r2
 80056a0:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 80056a4:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 80056a8:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80056ac:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80056b0:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80056b4:	6812      	ldr	r2, [r2, #0]
 80056b6:	f44f 618b 	mov.w	r1, #1112	@ 0x458
 80056ba:	fb02 f101 	mul.w	r1, r2, r1
 80056be:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80056c2:	f502 72fc 	add.w	r2, r2, #504	@ 0x1f8
 80056c6:	6812      	ldr	r2, [r2, #0]
 80056c8:	440a      	add	r2, r1
 80056ca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80056ce:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 80056d2:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80056d6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80056da:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80056de:	f502 72fe 	add.w	r2, r2, #508	@ 0x1fc
 80056e2:	6812      	ldr	r2, [r2, #0]
 80056e4:	f44f 618b 	mov.w	r1, #1112	@ 0x458
 80056e8:	fb02 f101 	mul.w	r1, r2, r1
 80056ec:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80056f0:	f502 72fc 	add.w	r2, r2, #504	@ 0x1f8
 80056f4:	6812      	ldr	r2, [r2, #0]
 80056f6:	440a      	add	r2, r1
 80056f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056fc:	4619      	mov	r1, r3
 80056fe:	f7fb fb41 	bl	8000d84 <__aeabi_fmul>
 8005702:	4603      	mov	r3, r0
 8005704:	4619      	mov	r1, r3
 8005706:	4620      	mov	r0, r4
 8005708:	f7fb fa34 	bl	8000b74 <__addsf3>
 800570c:	4603      	mov	r3, r0
 800570e:	4618      	mov	r0, r3
 8005710:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 8005714:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8005718:	f5a3 711a 	sub.w	r1, r3, #616	@ 0x268
 800571c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	4613      	mov	r3, r2
 8005724:	00db      	lsls	r3, r3, #3
 8005726:	4413      	add	r3, r2
 8005728:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800572c:	f502 72fe 	add.w	r2, r2, #508	@ 0x1fc
 8005730:	6812      	ldr	r2, [r2, #0]
 8005732:	4413      	add	r3, r2
 8005734:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
				for(int k = 0; k < tam; k++)
 8005738:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800573c:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	3301      	adds	r3, #1
 8005744:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8005748:	f502 72fc 	add.w	r2, r2, #504	@ 0x1f8
 800574c:	6013      	str	r3, [r2, #0]
 800574e:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8005752:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 800575c:	db8e      	blt.n	800567c <NLLS+0x42bc>
			for(int j = 0; j < N; j++)
 800575e:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8005762:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	3301      	adds	r3, #1
 800576a:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800576e:	f502 72fe 	add.w	r2, r2, #508	@ 0x1fc
 8005772:	6013      	str	r3, [r2, #0]
 8005774:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8005778:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2b08      	cmp	r3, #8
 8005780:	f77f af5f 	ble.w	8005642 <NLLS+0x4282>
		for(int i = 0; i < N; i++)
 8005784:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3301      	adds	r3, #1
 800578c:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8005790:	6013      	str	r3, [r2, #0]
 8005792:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2b08      	cmp	r3, #8
 800579a:	f77f af4b 	ble.w	8005634 <NLLS+0x4274>
				}
			}
		}

		inverter_matriz(Ht_H, inv);
 800579e:	f507 421d 	add.w	r2, r7, #40192	@ 0x9d00
 80057a2:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 80057a6:	3ad0      	subs	r2, #208	@ 0xd0
 80057a8:	f507 431e 	add.w	r3, r7, #40448	@ 0x9e00
 80057ac:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80057b0:	3b68      	subs	r3, #104	@ 0x68
 80057b2:	4611      	mov	r1, r2
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7fb fcf7 	bl	80011a8 <inverter_matriz>

		for(int i = 0; i < N; i++)
 80057ba:	2300      	movs	r3, #0
 80057bc:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80057c0:	f502 72fa 	add.w	r2, r2, #500	@ 0x1f4
 80057c4:	6013      	str	r3, [r2, #0]
 80057c6:	e0c1      	b.n	800594c <NLLS+0x458c>
		{
			for(int j = 0; j < tam; j++)
 80057c8:	2300      	movs	r3, #0
 80057ca:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80057ce:	f502 72f8 	add.w	r2, r2, #496	@ 0x1f0
 80057d2:	6013      	str	r3, [r2, #0]
 80057d4:	e0a6      	b.n	8005924 <NLLS+0x4564>
			{
				mul_mat[i][j] = 0;
 80057d6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80057da:	4619      	mov	r1, r3
 80057dc:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80057e0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f44f 628b 	mov.w	r2, #1112	@ 0x458
 80057ea:	fb03 f202 	mul.w	r2, r3, r2
 80057ee:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80057f2:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4413      	add	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	440b      	add	r3, r1
 80057fe:	f04f 0200 	mov.w	r2, #0
 8005802:	f843 2c30 	str.w	r2, [r3, #-48]
				for(int k = 0; k < N; k++)
 8005806:	2300      	movs	r3, #0
 8005808:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800580c:	f502 72f6 	add.w	r2, r2, #492	@ 0x1ec
 8005810:	6013      	str	r3, [r2, #0]
 8005812:	e075      	b.n	8005900 <NLLS+0x4540>
 8005814:	f3af 8000 	nop.w
 8005818:	9999999a 	.word	0x9999999a
 800581c:	3fa99999 	.word	0x3fa99999
 8005820:	40590000 	.word	0x40590000
				{
					mul_mat[i][j] += inv[i][k]*mat_H[k][j];
 8005824:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005828:	4619      	mov	r1, r3
 800582a:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800582e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f44f 628b 	mov.w	r2, #1112	@ 0x458
 8005838:	fb03 f202 	mul.w	r2, r3, r2
 800583c:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8005840:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4413      	add	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	440b      	add	r3, r1
 800584c:	f853 4c30 	ldr.w	r4, [r3, #-48]
 8005850:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 8005854:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8005858:	f5a3 7174 	sub.w	r1, r3, #976	@ 0x3d0
 800585c:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8005860:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	4613      	mov	r3, r2
 8005868:	00db      	lsls	r3, r3, #3
 800586a:	4413      	add	r3, r2
 800586c:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8005870:	f502 72f6 	add.w	r2, r2, #492	@ 0x1ec
 8005874:	6812      	ldr	r2, [r2, #0]
 8005876:	4413      	add	r3, r2
 8005878:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800587c:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 8005880:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8005884:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005888:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800588c:	f502 72f6 	add.w	r2, r2, #492	@ 0x1ec
 8005890:	6812      	ldr	r2, [r2, #0]
 8005892:	f44f 618b 	mov.w	r1, #1112	@ 0x458
 8005896:	fb02 f101 	mul.w	r1, r2, r1
 800589a:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800589e:	f502 72f8 	add.w	r2, r2, #496	@ 0x1f0
 80058a2:	6812      	ldr	r2, [r2, #0]
 80058a4:	440a      	add	r2, r1
 80058a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058aa:	4619      	mov	r1, r3
 80058ac:	f7fb fa6a 	bl	8000d84 <__aeabi_fmul>
 80058b0:	4603      	mov	r3, r0
 80058b2:	4619      	mov	r1, r3
 80058b4:	4620      	mov	r0, r4
 80058b6:	f7fb f95d 	bl	8000b74 <__addsf3>
 80058ba:	4603      	mov	r3, r0
 80058bc:	4619      	mov	r1, r3
 80058be:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80058c2:	4618      	mov	r0, r3
 80058c4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80058c8:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f44f 628b 	mov.w	r2, #1112	@ 0x458
 80058d2:	fb03 f202 	mul.w	r2, r3, r2
 80058d6:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80058da:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4413      	add	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4403      	add	r3, r0
 80058e6:	f843 1c30 	str.w	r1, [r3, #-48]
				for(int k = 0; k < N; k++)
 80058ea:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80058ee:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	3301      	adds	r3, #1
 80058f6:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80058fa:	f502 72f6 	add.w	r2, r2, #492	@ 0x1ec
 80058fe:	6013      	str	r3, [r2, #0]
 8005900:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8005904:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2b08      	cmp	r3, #8
 800590c:	dd8a      	ble.n	8005824 <NLLS+0x4464>
			for(int j = 0; j < tam; j++)
 800590e:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8005912:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	3301      	adds	r3, #1
 800591a:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800591e:	f502 72f8 	add.w	r2, r2, #496	@ 0x1f0
 8005922:	6013      	str	r3, [r2, #0]
 8005924:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8005928:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8005932:	f6ff af50 	blt.w	80057d6 <NLLS+0x4416>
		for(int i = 0; i < N; i++)
 8005936:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800593a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	3301      	adds	r3, #1
 8005942:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8005946:	f502 72fa 	add.w	r2, r2, #500	@ 0x1f4
 800594a:	6013      	str	r3, [r2, #0]
 800594c:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8005950:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2b08      	cmp	r3, #8
 8005958:	f77f af36 	ble.w	80057c8 <NLLS+0x4408>
				}
			}
		}

		for(int i = 0; i < N; i++)
 800595c:	2300      	movs	r3, #0
 800595e:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8005962:	f502 72f4 	add.w	r2, r2, #488	@ 0x1e8
 8005966:	6013      	str	r3, [r2, #0]
 8005968:	e07a      	b.n	8005a60 <NLLS+0x46a0>
		{
			Ht_e[i] = 0;
 800596a:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 800596e:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8005972:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8005976:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800597a:	f502 72f4 	add.w	r2, r2, #488	@ 0x1e8
 800597e:	6812      	ldr	r2, [r2, #0]
 8005980:	f04f 0100 	mov.w	r1, #0
 8005984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(int j = 0; j < tam; j++)
 8005988:	2300      	movs	r3, #0
 800598a:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800598e:	f502 72f2 	add.w	r2, r2, #484	@ 0x1e4
 8005992:	6013      	str	r3, [r2, #0]
 8005994:	e051      	b.n	8005a3a <NLLS+0x467a>
			{
				Ht_e[i] += mul_mat[i][j]*e[j];
 8005996:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 800599a:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800599e:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 80059a2:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80059a6:	f502 72f4 	add.w	r2, r2, #488	@ 0x1e8
 80059aa:	6812      	ldr	r2, [r2, #0]
 80059ac:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80059b0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80059b4:	4619      	mov	r1, r3
 80059b6:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80059ba:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f44f 628b 	mov.w	r2, #1112	@ 0x458
 80059c4:	fb03 f202 	mul.w	r2, r3, r2
 80059c8:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80059cc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4413      	add	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	440b      	add	r3, r1
 80059d8:	f853 0c30 	ldr.w	r0, [r3, #-48]
 80059dc:	f507 33a8 	add.w	r3, r7, #86016	@ 0x15000
 80059e0:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80059e4:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 80059e8:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80059ec:	f502 72f2 	add.w	r2, r2, #484	@ 0x1e4
 80059f0:	6812      	ldr	r2, [r2, #0]
 80059f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059f6:	4619      	mov	r1, r3
 80059f8:	f7fb f9c4 	bl	8000d84 <__aeabi_fmul>
 80059fc:	4603      	mov	r3, r0
 80059fe:	4619      	mov	r1, r3
 8005a00:	4620      	mov	r0, r4
 8005a02:	f7fb f8b7 	bl	8000b74 <__addsf3>
 8005a06:	4603      	mov	r3, r0
 8005a08:	4619      	mov	r1, r3
 8005a0a:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 8005a0e:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8005a12:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8005a16:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8005a1a:	f502 72f4 	add.w	r2, r2, #488	@ 0x1e8
 8005a1e:	6812      	ldr	r2, [r2, #0]
 8005a20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(int j = 0; j < tam; j++)
 8005a24:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8005a28:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8005a34:	f502 72f2 	add.w	r2, r2, #484	@ 0x1e4
 8005a38:	6013      	str	r3, [r2, #0]
 8005a3a:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8005a3e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8005a48:	dba5      	blt.n	8005996 <NLLS+0x45d6>
		for(int i = 0; i < N; i++)
 8005a4a:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8005a4e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	3301      	adds	r3, #1
 8005a56:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8005a5a:	f502 72f4 	add.w	r2, r2, #488	@ 0x1e8
 8005a5e:	6013      	str	r3, [r2, #0]
 8005a60:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8005a64:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2b08      	cmp	r3, #8
 8005a6c:	f77f af7d 	ble.w	800596a <NLLS+0x45aa>
			}
		}

		for(int i = 0; i < N; i++)
 8005a70:	2300      	movs	r3, #0
 8005a72:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8005a76:	f502 72f0 	add.w	r2, r2, #480	@ 0x1e0
 8005a7a:	6013      	str	r3, [r2, #0]
 8005a7c:	e036      	b.n	8005aec <NLLS+0x472c>
		{
			p0[i] += Ht_e[i];
 8005a7e:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8005a82:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	f503 33b8 	add.w	r3, r3, #94208	@ 0x17000
 8005a8e:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8005a92:	443b      	add	r3, r7
 8005a94:	f853 0ca4 	ldr.w	r0, [r3, #-164]
 8005a98:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 8005a9c:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8005aa0:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8005aa4:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8005aa8:	f502 72f0 	add.w	r2, r2, #480	@ 0x1e0
 8005aac:	6812      	ldr	r2, [r2, #0]
 8005aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	f7fb f85e 	bl	8000b74 <__addsf3>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	461a      	mov	r2, r3
 8005abc:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8005ac0:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	f503 33b8 	add.w	r3, r3, #94208	@ 0x17000
 8005acc:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8005ad0:	443b      	add	r3, r7
 8005ad2:	f843 2ca4 	str.w	r2, [r3, #-164]
		for(int i = 0; i < N; i++)
 8005ad6:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8005ada:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8005ae6:	f502 72f0 	add.w	r2, r2, #480	@ 0x1e0
 8005aea:	6013      	str	r3, [r2, #0]
 8005aec:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8005af0:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b08      	cmp	r3, #8
 8005af8:	ddc1      	ble.n	8005a7e <NLLS+0x46be>
		}

		passo++;
 8005afa:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8005afe:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	3301      	adds	r3, #1
 8005b06:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8005b0a:	f102 023f 	add.w	r2, r2, #63	@ 0x3f
 8005b0e:	7013      	strb	r3, [r2, #0]
	while(loop == 1)
 8005b10:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8005b14:	f103 033e 	add.w	r3, r3, #62	@ 0x3e
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	f43b acb3 	beq.w	8001486 <NLLS+0xc6>
	}
    p[0] = sx;
 8005b20:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005b24:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8005b28:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8005b2c:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8005b30:	6812      	ldr	r2, [r2, #0]
 8005b32:	601a      	str	r2, [r3, #0]
    p[1] = sy;
 8005b34:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005b38:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8005b3c:	3304      	adds	r3, #4
 8005b3e:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8005b42:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8005b46:	6812      	ldr	r2, [r2, #0]
 8005b48:	601a      	str	r2, [r3, #0]
    p[2] = sz;
 8005b4a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005b4e:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8005b52:	3308      	adds	r3, #8
 8005b54:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8005b58:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8005b5c:	6812      	ldr	r2, [r2, #0]
 8005b5e:	601a      	str	r2, [r3, #0]
    p[3] = bx;
 8005b60:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005b64:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8005b68:	330c      	adds	r3, #12
 8005b6a:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8005b6e:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8005b72:	6812      	ldr	r2, [r2, #0]
 8005b74:	601a      	str	r2, [r3, #0]
    p[4] = by;
 8005b76:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005b7a:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8005b7e:	3310      	adds	r3, #16
 8005b80:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8005b84:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8005b88:	6812      	ldr	r2, [r2, #0]
 8005b8a:	601a      	str	r2, [r3, #0]
    p[5] = bz;
 8005b8c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005b90:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8005b94:	3314      	adds	r3, #20
 8005b96:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8005b9a:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8005b9e:	6812      	ldr	r2, [r2, #0]
 8005ba0:	601a      	str	r2, [r3, #0]
    p[6] = rho;
 8005ba2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005ba6:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8005baa:	3318      	adds	r3, #24
 8005bac:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8005bb0:	f102 0220 	add.w	r2, r2, #32
 8005bb4:	6812      	ldr	r2, [r2, #0]
 8005bb6:	601a      	str	r2, [r3, #0]
    p[7] = phi;
 8005bb8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005bbc:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8005bc0:	331c      	adds	r3, #28
 8005bc2:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8005bc6:	f102 021c 	add.w	r2, r2, #28
 8005bca:	6812      	ldr	r2, [r2, #0]
 8005bcc:	601a      	str	r2, [r3, #0]
    p[8] = lambida;
 8005bce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005bd2:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8005bd6:	3320      	adds	r3, #32
 8005bd8:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8005bdc:	f102 0218 	add.w	r2, r2, #24
 8005be0:	6812      	ldr	r2, [r2, #0]
 8005be2:	601a      	str	r2, [r3, #0]

    return passo;
 8005be4:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8005be8:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 8005bec:	781b      	ldrb	r3, [r3, #0]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f507 37b8 	add.w	r7, r7, #94208	@ 0x17000
 8005bf4:	3744      	adds	r7, #68	@ 0x44
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005bfc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c02:	f107 0308 	add.w	r3, r7, #8
 8005c06:	2200      	movs	r2, #0
 8005c08:	601a      	str	r2, [r3, #0]
 8005c0a:	605a      	str	r2, [r3, #4]
 8005c0c:	609a      	str	r2, [r3, #8]
 8005c0e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005c10:	4b1f      	ldr	r3, [pc, #124]	@ (8005c90 <MX_GPIO_Init+0x94>)
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	4a1e      	ldr	r2, [pc, #120]	@ (8005c90 <MX_GPIO_Init+0x94>)
 8005c16:	f043 0320 	orr.w	r3, r3, #32
 8005c1a:	6193      	str	r3, [r2, #24]
 8005c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8005c90 <MX_GPIO_Init+0x94>)
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	f003 0320 	and.w	r3, r3, #32
 8005c24:	607b      	str	r3, [r7, #4]
 8005c26:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c28:	4b19      	ldr	r3, [pc, #100]	@ (8005c90 <MX_GPIO_Init+0x94>)
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	4a18      	ldr	r2, [pc, #96]	@ (8005c90 <MX_GPIO_Init+0x94>)
 8005c2e:	f043 0304 	orr.w	r3, r3, #4
 8005c32:	6193      	str	r3, [r2, #24]
 8005c34:	4b16      	ldr	r3, [pc, #88]	@ (8005c90 <MX_GPIO_Init+0x94>)
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	f003 0304 	and.w	r3, r3, #4
 8005c3c:	603b      	str	r3, [r7, #0]
 8005c3e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SD_CS_Pin|finished_Pin|running_Pin, GPIO_PIN_RESET);
 8005c40:	2200      	movs	r2, #0
 8005c42:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8005c46:	4813      	ldr	r0, [pc, #76]	@ (8005c94 <MX_GPIO_Init+0x98>)
 8005c48:	f001 f844 	bl	8006cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8005c4c:	2310      	movs	r3, #16
 8005c4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c50:	2301      	movs	r3, #1
 8005c52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c54:	2300      	movs	r3, #0
 8005c56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8005c5c:	f107 0308 	add.w	r3, r7, #8
 8005c60:	4619      	mov	r1, r3
 8005c62:	480c      	ldr	r0, [pc, #48]	@ (8005c94 <MX_GPIO_Init+0x98>)
 8005c64:	f000 feb2 	bl	80069cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = finished_Pin|running_Pin;
 8005c68:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8005c6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c72:	2300      	movs	r3, #0
 8005c74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c76:	2302      	movs	r3, #2
 8005c78:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c7a:	f107 0308 	add.w	r3, r7, #8
 8005c7e:	4619      	mov	r1, r3
 8005c80:	4804      	ldr	r0, [pc, #16]	@ (8005c94 <MX_GPIO_Init+0x98>)
 8005c82:	f000 fea3 	bl	80069cc <HAL_GPIO_Init>

}
 8005c86:	bf00      	nop
 8005c88:	3718      	adds	r7, #24
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	40021000 	.word	0x40021000
 8005c94:	40010800 	.word	0x40010800

08005c98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005c98:	b590      	push	{r4, r7, lr}
 8005c9a:	f5ad 4dfa 	sub.w	sp, sp, #32000	@ 0x7d00
 8005c9e:	b081      	sub	sp, #4
 8005ca0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005ca2:	f000 fc87 	bl	80065b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005ca6:	f000 fa57 	bl	8006158 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005caa:	f7ff ffa7 	bl	8005bfc <MX_GPIO_Init>
  MX_SPI1_Init();
 8005cae:	f000 faa1 	bl	80061f4 <MX_SPI1_Init>
  MX_FATFS_Init();
 8005cb2:	f001 fdc5 	bl	8007840 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  char file_read[25] = {0};
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	f507 42f9 	add.w	r2, r7, #31872	@ 0x7c80
 8005cbc:	f102 0244 	add.w	r2, r2, #68	@ 0x44
 8005cc0:	6013      	str	r3, [r2, #0]
 8005cc2:	f507 43f9 	add.w	r3, r7, #31872	@ 0x7c80
 8005cc6:	f103 0348 	add.w	r3, r3, #72	@ 0x48
 8005cca:	2200      	movs	r2, #0
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	605a      	str	r2, [r3, #4]
 8005cd0:	609a      	str	r2, [r3, #8]
 8005cd2:	60da      	str	r2, [r3, #12]
 8005cd4:	611a      	str	r2, [r3, #16]
 8005cd6:	751a      	strb	r2, [r3, #20]
  uint32_t start_time = 0;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	f507 42f9 	add.w	r2, r7, #31872	@ 0x7c80
 8005cde:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 8005ce2:	6013      	str	r3, [r2, #0]
  uint16_t file_cont = 1;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	f507 42f9 	add.w	r2, r7, #31872	@ 0x7c80
 8005cea:	f102 027e 	add.w	r2, r2, #126	@ 0x7e
 8005cee:	8013      	strh	r3, [r2, #0]
  float NLLS_time = 0;//, NLLS_time = 0;
 8005cf0:	f04f 0300 	mov.w	r3, #0
 8005cf4:	f507 42f9 	add.w	r2, r7, #31872	@ 0x7c80
 8005cf8:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8005cfc:	6013      	str	r3, [r2, #0]

  FATFS fs;
  FRESULT res;

  // Monta o sistema de arquivos na unidade lógica "0:"
  res = f_mount(&fs, "0:", 1);
 8005cfe:	f507 43f5 	add.w	r3, r7, #31360	@ 0x7a80
 8005d02:	f103 0314 	add.w	r3, r3, #20
 8005d06:	2201      	movs	r2, #1
 8005d08:	49ba      	ldr	r1, [pc, #744]	@ (8005ff4 <main+0x35c>)
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f003 fc8c 	bl	8009628 <f_mount>
 8005d10:	4603      	mov	r3, r0
 8005d12:	f507 42f9 	add.w	r2, r7, #31872	@ 0x7c80
 8005d16:	f102 025f 	add.w	r2, r2, #95	@ 0x5f
 8005d1a:	7013      	strb	r3, [r2, #0]
  if (res != FR_OK) {
 8005d1c:	f507 43f9 	add.w	r3, r7, #31872	@ 0x7c80
 8005d20:	f103 035f 	add.w	r3, r3, #95	@ 0x5f
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d001      	beq.n	8005d2e <main+0x96>
	  //printf("Falha ao montar o sistema de arquivos: %d\n", res);
	  Error_Handler(); // ou retorne um erro
 8005d2a:	f000 fa5c 	bl	80061e6 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	if(file_cont >= 3001)
 8005d2e:	f507 43f9 	add.w	r3, r7, #31872	@ 0x7c80
 8005d32:	f103 037e 	add.w	r3, r3, #126	@ 0x7e
 8005d36:	881b      	ldrh	r3, [r3, #0]
 8005d38:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d901      	bls.n	8005d44 <main+0xac>
	  	{
	  		return 1;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e1f9      	b.n	8006138 <main+0x4a0>
	  	}

	  	sprintf(file_read, "0:/DATA1/run%d.txt", file_cont);  // Prefixo de volume (0:) é comum no FatFs
 8005d44:	f507 43f9 	add.w	r3, r7, #31872	@ 0x7c80
 8005d48:	f103 037e 	add.w	r3, r3, #126	@ 0x7e
 8005d4c:	881a      	ldrh	r2, [r3, #0]
 8005d4e:	f507 43f9 	add.w	r3, r7, #31872	@ 0x7c80
 8005d52:	f103 0344 	add.w	r3, r3, #68	@ 0x44
 8005d56:	49a8      	ldr	r1, [pc, #672]	@ (8005ff8 <main+0x360>)
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f006 f8fd 	bl	800bf58 <siprintf>

	  	FIL fil;
	  	FRESULT res;

	  	res = f_open(&fil, file_read, FA_READ);
 8005d5e:	f507 41f9 	add.w	r1, r7, #31872	@ 0x7c80
 8005d62:	f101 0144 	add.w	r1, r1, #68	@ 0x44
 8005d66:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8005d6a:	3b7c      	subs	r3, #124	@ 0x7c
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f003 fca2 	bl	80096b8 <f_open>
 8005d74:	4603      	mov	r3, r0
 8005d76:	f507 42f9 	add.w	r2, r7, #31872	@ 0x7c80
 8005d7a:	f102 025e 	add.w	r2, r2, #94	@ 0x5e
 8005d7e:	7013      	strb	r3, [r2, #0]
	  	if (res != FR_OK)
 8005d80:	f507 43f9 	add.w	r3, r7, #31872	@ 0x7c80
 8005d84:	f103 035e 	add.w	r3, r3, #94	@ 0x5e
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d001      	beq.n	8005d92 <main+0xfa>
	  	{
	  		return 1;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e1d2      	b.n	8006138 <main+0x4a0>
	  	}

	  	char line[30670];
	  	UINT br; // Bytes lidos

	  	float *linhas[] = {mx, my, mz};  // Vetor de ponteiros para facilitar o acesso
 8005d92:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8005d96:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8005d9a:	4a98      	ldr	r2, [pc, #608]	@ (8005ffc <main+0x364>)
 8005d9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8005d9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	  	for (int i = 0; i < 3; i++)
 8005da2:	2300      	movs	r3, #0
 8005da4:	f507 42f9 	add.w	r2, r7, #31872	@ 0x7c80
 8005da8:	f102 0278 	add.w	r2, r2, #120	@ 0x78
 8005dac:	6013      	str	r3, [r2, #0]
 8005dae:	e0c1      	b.n	8005f34 <main+0x29c>
	  	{
	  		// lê uma linha completa (até '\n' ou fim do buffer)
	  		int line_pos = 0;
 8005db0:	2300      	movs	r3, #0
 8005db2:	f507 42f9 	add.w	r2, r7, #31872	@ 0x7c80
 8005db6:	f102 0274 	add.w	r2, r2, #116	@ 0x74
 8005dba:	6013      	str	r3, [r2, #0]
	  		char ch;
	  		do {
	  			res = f_read(&fil, &ch, 1, &br);
 8005dbc:	f507 43f5 	add.w	r3, r7, #31360	@ 0x7a80
 8005dc0:	f103 0310 	add.w	r3, r3, #16
 8005dc4:	f507 41f4 	add.w	r1, r7, #31232	@ 0x7a00
 8005dc8:	f101 017f 	add.w	r1, r1, #127	@ 0x7f
 8005dcc:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 8005dd0:	387c      	subs	r0, #124	@ 0x7c
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f003 fee5 	bl	8009ba2 <f_read>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	f507 42f9 	add.w	r2, r7, #31872	@ 0x7c80
 8005dde:	f102 025e 	add.w	r2, r2, #94	@ 0x5e
 8005de2:	7013      	strb	r3, [r2, #0]
	  			if (res != FR_OK || br == 0) {
 8005de4:	f507 43f9 	add.w	r3, r7, #31872	@ 0x7c80
 8005de8:	f103 035e 	add.w	r3, r3, #94	@ 0x5e
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d106      	bne.n	8005e00 <main+0x168>
 8005df2:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8005df6:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d101      	bne.n	8005e04 <main+0x16c>
	  				return 1;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e199      	b.n	8006138 <main+0x4a0>
	  			}
	  			line[line_pos++] = ch;
 8005e04:	f507 43f9 	add.w	r3, r7, #31872	@ 0x7c80
 8005e08:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	1c5a      	adds	r2, r3, #1
 8005e10:	f507 41f9 	add.w	r1, r7, #31872	@ 0x7c80
 8005e14:	f101 0174 	add.w	r1, r1, #116	@ 0x74
 8005e18:	600a      	str	r2, [r1, #0]
 8005e1a:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8005e1e:	f2a2 2281 	subw	r2, r2, #641	@ 0x281
 8005e22:	7811      	ldrb	r1, [r2, #0]
 8005e24:	f507 6250 	add.w	r2, r7, #3328	@ 0xd00
 8005e28:	f5a2 6225 	sub.w	r2, r2, #2640	@ 0xa50
 8005e2c:	54d1      	strb	r1, [r2, r3]
	  		} while (ch != '\n' && line_pos < sizeof(line)-1);
 8005e2e:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8005e32:	f2a3 2381 	subw	r3, r3, #641	@ 0x281
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b0a      	cmp	r3, #10
 8005e3a:	d008      	beq.n	8005e4e <main+0x1b6>
 8005e3c:	f507 43f9 	add.w	r3, r7, #31872	@ 0x7c80
 8005e40:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f247 72cc 	movw	r2, #30668	@ 0x77cc
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d9b6      	bls.n	8005dbc <main+0x124>
	  		line[line_pos] = '\0';
 8005e4e:	f507 6350 	add.w	r3, r7, #3328	@ 0xd00
 8005e52:	f5a3 6225 	sub.w	r2, r3, #2640	@ 0xa50
 8005e56:	f507 43f9 	add.w	r3, r7, #31872	@ 0x7c80
 8005e5a:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4413      	add	r3, r2
 8005e62:	2200      	movs	r2, #0
 8005e64:	701a      	strb	r2, [r3, #0]

	  		char *token = strtok(line, ",");
 8005e66:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8005e6a:	3b50      	subs	r3, #80	@ 0x50
 8005e6c:	4964      	ldr	r1, [pc, #400]	@ (8006000 <main+0x368>)
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f006 f8f0 	bl	800c054 <strtok>
 8005e74:	f507 43f9 	add.w	r3, r7, #31872	@ 0x7c80
 8005e78:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8005e7c:	6018      	str	r0, [r3, #0]
	  		int j = 0;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	f507 42f9 	add.w	r2, r7, #31872	@ 0x7c80
 8005e84:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8005e88:	6013      	str	r3, [r2, #0]

	  		while (token != NULL && j < tam)
 8005e8a:	e02f      	b.n	8005eec <main+0x254>
	  		{
	  			linhas[i][j] = strtof(token, NULL);
 8005e8c:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8005e90:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8005e94:	f507 42f9 	add.w	r2, r7, #31872	@ 0x7c80
 8005e98:	f102 0278 	add.w	r2, r2, #120	@ 0x78
 8005e9c:	6812      	ldr	r2, [r2, #0]
 8005e9e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005ea2:	f507 43f9 	add.w	r3, r7, #31872	@ 0x7c80
 8005ea6:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	18d4      	adds	r4, r2, r3
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	f507 43f9 	add.w	r3, r7, #31872	@ 0x7c80
 8005eb6:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8005eba:	6818      	ldr	r0, [r3, #0]
 8005ebc:	f005 f8c6 	bl	800b04c <strtof>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	6023      	str	r3, [r4, #0]
	  			token = strtok(NULL, ",");
 8005ec4:	494e      	ldr	r1, [pc, #312]	@ (8006000 <main+0x368>)
 8005ec6:	2000      	movs	r0, #0
 8005ec8:	f006 f8c4 	bl	800c054 <strtok>
 8005ecc:	f507 43f9 	add.w	r3, r7, #31872	@ 0x7c80
 8005ed0:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8005ed4:	6018      	str	r0, [r3, #0]
	  			j++;
 8005ed6:	f507 43f9 	add.w	r3, r7, #31872	@ 0x7c80
 8005eda:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	f507 42f9 	add.w	r2, r7, #31872	@ 0x7c80
 8005ee6:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8005eea:	6013      	str	r3, [r2, #0]
	  		while (token != NULL && j < tam)
 8005eec:	f507 43f9 	add.w	r3, r7, #31872	@ 0x7c80
 8005ef0:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d007      	beq.n	8005f0a <main+0x272>
 8005efa:	f507 43f9 	add.w	r3, r7, #31872	@ 0x7c80
 8005efe:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8005f08:	dbc0      	blt.n	8005e8c <main+0x1f4>
	  		}

	  		if (j != tam)
 8005f0a:	f507 43f9 	add.w	r3, r7, #31872	@ 0x7c80
 8005f0e:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8005f18:	d001      	beq.n	8005f1e <main+0x286>
	  		{
	  			return 1;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e10c      	b.n	8006138 <main+0x4a0>
	  	for (int i = 0; i < 3; i++)
 8005f1e:	f507 43f9 	add.w	r3, r7, #31872	@ 0x7c80
 8005f22:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	f507 42f9 	add.w	r2, r7, #31872	@ 0x7c80
 8005f2e:	f102 0278 	add.w	r2, r2, #120	@ 0x78
 8005f32:	6013      	str	r3, [r2, #0]
 8005f34:	f507 43f9 	add.w	r3, r7, #31872	@ 0x7c80
 8005f38:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	f77f af36 	ble.w	8005db0 <main+0x118>
	  		}
	  	}

	  	f_close(&fil);
 8005f44:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8005f48:	3b7c      	subs	r3, #124	@ 0x7c
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f004 f9fb 	bl	800a346 <f_close>

	  	/*start_time = HAL_GetTick();
	  	ETS(mx, my, mz, p1);
	  	ETS_time = HAL_GetTick() - start_time;*/

	  	start_time = HAL_GetTick();
 8005f50:	f000 fb88 	bl	8006664 <HAL_GetTick>
 8005f54:	f507 43f9 	add.w	r3, r7, #31872	@ 0x7c80
 8005f58:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 8005f5c:	6018      	str	r0, [r3, #0]
	  	passos_NLLS = NLLS(mx, my, mz, p1);
 8005f5e:	4b29      	ldr	r3, [pc, #164]	@ (8006004 <main+0x36c>)
 8005f60:	4a29      	ldr	r2, [pc, #164]	@ (8006008 <main+0x370>)
 8005f62:	492a      	ldr	r1, [pc, #168]	@ (800600c <main+0x374>)
 8005f64:	482a      	ldr	r0, [pc, #168]	@ (8006010 <main+0x378>)
 8005f66:	f7fb fa2b 	bl	80013c0 <NLLS>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	4b29      	ldr	r3, [pc, #164]	@ (8006014 <main+0x37c>)
 8005f70:	701a      	strb	r2, [r3, #0]
	  	NLLS_time = HAL_GetTick() - start_time;
 8005f72:	f000 fb77 	bl	8006664 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	f507 43f9 	add.w	r3, r7, #31872	@ 0x7c80
 8005f7c:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7fa fea5 	bl	8000cd4 <__aeabi_ui2f>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	f507 42f9 	add.w	r2, r7, #31872	@ 0x7c80
 8005f90:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8005f94:	6013      	str	r3, [r2, #0]


	  	sprintf(file_read, "0:/RES/run%d.txt", file_cont);
 8005f96:	f507 43f9 	add.w	r3, r7, #31872	@ 0x7c80
 8005f9a:	f103 037e 	add.w	r3, r3, #126	@ 0x7e
 8005f9e:	881a      	ldrh	r2, [r3, #0]
 8005fa0:	f507 43f9 	add.w	r3, r7, #31872	@ 0x7c80
 8005fa4:	f103 0344 	add.w	r3, r3, #68	@ 0x44
 8005fa8:	491b      	ldr	r1, [pc, #108]	@ (8006018 <main+0x380>)
 8005faa:	4618      	mov	r0, r3
 8005fac:	f005 ffd4 	bl	800bf58 <siprintf>
	  	res = f_open(&fil, file_read, FA_WRITE | FA_CREATE_ALWAYS);
 8005fb0:	f507 41f9 	add.w	r1, r7, #31872	@ 0x7c80
 8005fb4:	f101 0144 	add.w	r1, r1, #68	@ 0x44
 8005fb8:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8005fbc:	3b7c      	subs	r3, #124	@ 0x7c
 8005fbe:	220a      	movs	r2, #10
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f003 fb79 	bl	80096b8 <f_open>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	f507 42f9 	add.w	r2, r7, #31872	@ 0x7c80
 8005fcc:	f102 025e 	add.w	r2, r2, #94	@ 0x5e
 8005fd0:	7013      	strb	r3, [r2, #0]
	  	if (res != FR_OK)
 8005fd2:	f507 43f9 	add.w	r3, r7, #31872	@ 0x7c80
 8005fd6:	f103 035e 	add.w	r3, r3, #94	@ 0x5e
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <main+0x34c>
	  	{
	  		return 1;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e0a9      	b.n	8006138 <main+0x4a0>
	  	}

	  	char out_line[128];
	  	UINT bw;

	  	for (int i = 0; i < 9; i++) {
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	f507 42f9 	add.w	r2, r7, #31872	@ 0x7c80
 8005fea:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8005fee:	6013      	str	r3, [r2, #0]
 8005ff0:	e043      	b.n	800607a <main+0x3e2>
 8005ff2:	bf00      	nop
 8005ff4:	0800eca4 	.word	0x0800eca4
 8005ff8:	0800eca8 	.word	0x0800eca8
 8005ffc:	0800ecdc 	.word	0x0800ecdc
 8006000:	0800ecbc 	.word	0x0800ecbc
 8006004:	20003624 	.word	0x20003624
 8006008:	200024c4 	.word	0x200024c4
 800600c:	20001364 	.word	0x20001364
 8006010:	20000204 	.word	0x20000204
 8006014:	20003648 	.word	0x20003648
 8006018:	0800ecc0 	.word	0x0800ecc0
	  		sprintf(out_line, "%f\n", p1[i]);
 800601c:	4a49      	ldr	r2, [pc, #292]	@ (8006144 <main+0x4ac>)
 800601e:	f507 43f9 	add.w	r3, r7, #31872	@ 0x7c80
 8006022:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800602c:	4618      	mov	r0, r3
 800602e:	f7fa f9fb 	bl	8000428 <__aeabi_f2d>
 8006032:	4602      	mov	r2, r0
 8006034:	460b      	mov	r3, r1
 8006036:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 800603a:	387c      	subs	r0, #124	@ 0x7c
 800603c:	4942      	ldr	r1, [pc, #264]	@ (8006148 <main+0x4b0>)
 800603e:	f005 ff8b 	bl	800bf58 <siprintf>
	  		f_write(&fil, out_line, strlen(out_line), &bw);
 8006042:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8006046:	3b7c      	subs	r3, #124	@ 0x7c
 8006048:	4618      	mov	r0, r3
 800604a:	f7fa f881 	bl	8000150 <strlen>
 800604e:	4602      	mov	r2, r0
 8006050:	f507 43f5 	add.w	r3, r7, #31360	@ 0x7a80
 8006054:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8006058:	397c      	subs	r1, #124	@ 0x7c
 800605a:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 800605e:	387c      	subs	r0, #124	@ 0x7c
 8006060:	f003 ff0a 	bl	8009e78 <f_write>
	  	for (int i = 0; i < 9; i++) {
 8006064:	f507 43f9 	add.w	r3, r7, #31872	@ 0x7c80
 8006068:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	3301      	adds	r3, #1
 8006070:	f507 42f9 	add.w	r2, r7, #31872	@ 0x7c80
 8006074:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8006078:	6013      	str	r3, [r2, #0]
 800607a:	f507 43f9 	add.w	r3, r7, #31872	@ 0x7c80
 800607e:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2b08      	cmp	r3, #8
 8006086:	ddc9      	ble.n	800601c <main+0x384>
	  	}

	  	sprintf(out_line, "%f\n", NLLS_time);
 8006088:	f507 43f9 	add.w	r3, r7, #31872	@ 0x7c80
 800608c:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 8006090:	6818      	ldr	r0, [r3, #0]
 8006092:	f7fa f9c9 	bl	8000428 <__aeabi_f2d>
 8006096:	4602      	mov	r2, r0
 8006098:	460b      	mov	r3, r1
 800609a:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 800609e:	387c      	subs	r0, #124	@ 0x7c
 80060a0:	4929      	ldr	r1, [pc, #164]	@ (8006148 <main+0x4b0>)
 80060a2:	f005 ff59 	bl	800bf58 <siprintf>
	  	f_write(&fil, out_line, strlen(out_line), &bw);
 80060a6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80060aa:	3b7c      	subs	r3, #124	@ 0x7c
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7fa f84f 	bl	8000150 <strlen>
 80060b2:	4602      	mov	r2, r0
 80060b4:	f507 43f5 	add.w	r3, r7, #31360	@ 0x7a80
 80060b8:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 80060bc:	397c      	subs	r1, #124	@ 0x7c
 80060be:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 80060c2:	387c      	subs	r0, #124	@ 0x7c
 80060c4:	f003 fed8 	bl	8009e78 <f_write>

	  	sprintf(out_line, "%u\n", passos_NLLS);
 80060c8:	4b20      	ldr	r3, [pc, #128]	@ (800614c <main+0x4b4>)
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	461a      	mov	r2, r3
 80060ce:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80060d2:	3b7c      	subs	r3, #124	@ 0x7c
 80060d4:	491e      	ldr	r1, [pc, #120]	@ (8006150 <main+0x4b8>)
 80060d6:	4618      	mov	r0, r3
 80060d8:	f005 ff3e 	bl	800bf58 <siprintf>
	  	f_write(&fil, out_line, strlen(out_line), &bw);
 80060dc:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80060e0:	3b7c      	subs	r3, #124	@ 0x7c
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7fa f834 	bl	8000150 <strlen>
 80060e8:	4602      	mov	r2, r0
 80060ea:	f507 43f5 	add.w	r3, r7, #31360	@ 0x7a80
 80060ee:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 80060f2:	397c      	subs	r1, #124	@ 0x7c
 80060f4:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 80060f8:	387c      	subs	r0, #124	@ 0x7c
 80060fa:	f003 febd 	bl	8009e78 <f_write>

	  	f_close(&fil);
 80060fe:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8006102:	3b7c      	subs	r3, #124	@ 0x7c
 8006104:	4618      	mov	r0, r3
 8006106:	f004 f91e 	bl	800a346 <f_close>

	  	file_cont++;
 800610a:	f507 43f9 	add.w	r3, r7, #31872	@ 0x7c80
 800610e:	f103 037e 	add.w	r3, r3, #126	@ 0x7e
 8006112:	881b      	ldrh	r3, [r3, #0]
 8006114:	3301      	adds	r3, #1
 8006116:	f507 42f9 	add.w	r2, r7, #31872	@ 0x7c80
 800611a:	f102 027e 	add.w	r2, r2, #126	@ 0x7e
 800611e:	8013      	strh	r3, [r2, #0]
	  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8006120:	2180      	movs	r1, #128	@ 0x80
 8006122:	480c      	ldr	r0, [pc, #48]	@ (8006154 <main+0x4bc>)
 8006124:	f000 fdee 	bl	8006d04 <HAL_GPIO_TogglePin>
	  	HAL_Delay(100);
 8006128:	2064      	movs	r0, #100	@ 0x64
 800612a:	f000 faa5 	bl	8006678 <HAL_Delay>
	  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800612e:	2180      	movs	r1, #128	@ 0x80
 8006130:	4808      	ldr	r0, [pc, #32]	@ (8006154 <main+0x4bc>)
 8006132:	f000 fde7 	bl	8006d04 <HAL_GPIO_TogglePin>
  {
 8006136:	e5fa      	b.n	8005d2e <main+0x96>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8006138:	4618      	mov	r0, r3
 800613a:	f507 47fa 	add.w	r7, r7, #32000	@ 0x7d00
 800613e:	3704      	adds	r7, #4
 8006140:	46bd      	mov	sp, r7
 8006142:	bd90      	pop	{r4, r7, pc}
 8006144:	20003624 	.word	0x20003624
 8006148:	0800ecd4 	.word	0x0800ecd4
 800614c:	20003648 	.word	0x20003648
 8006150:	0800ecd8 	.word	0x0800ecd8
 8006154:	40010c00 	.word	0x40010c00

08006158 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b090      	sub	sp, #64	@ 0x40
 800615c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800615e:	f107 0318 	add.w	r3, r7, #24
 8006162:	2228      	movs	r2, #40	@ 0x28
 8006164:	2100      	movs	r1, #0
 8006166:	4618      	mov	r0, r3
 8006168:	f005 ff59 	bl	800c01e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800616c:	1d3b      	adds	r3, r7, #4
 800616e:	2200      	movs	r2, #0
 8006170:	601a      	str	r2, [r3, #0]
 8006172:	605a      	str	r2, [r3, #4]
 8006174:	609a      	str	r2, [r3, #8]
 8006176:	60da      	str	r2, [r3, #12]
 8006178:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800617a:	2301      	movs	r3, #1
 800617c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800617e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006182:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8006184:	2300      	movs	r3, #0
 8006186:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006188:	2301      	movs	r3, #1
 800618a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800618c:	2302      	movs	r3, #2
 800618e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006190:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006194:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006196:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800619a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800619c:	f107 0318 	add.w	r3, r7, #24
 80061a0:	4618      	mov	r0, r3
 80061a2:	f000 fdc9 	bl	8006d38 <HAL_RCC_OscConfig>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d001      	beq.n	80061b0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80061ac:	f000 f81b 	bl	80061e6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80061b0:	230f      	movs	r3, #15
 80061b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80061b4:	2302      	movs	r3, #2
 80061b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80061b8:	2300      	movs	r3, #0
 80061ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80061bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80061c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80061c2:	2300      	movs	r3, #0
 80061c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80061c6:	1d3b      	adds	r3, r7, #4
 80061c8:	2102      	movs	r1, #2
 80061ca:	4618      	mov	r0, r3
 80061cc:	f001 f836 	bl	800723c <HAL_RCC_ClockConfig>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d001      	beq.n	80061da <SystemClock_Config+0x82>
  {
    Error_Handler();
 80061d6:	f000 f806 	bl	80061e6 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80061da:	f001 f919 	bl	8007410 <HAL_RCC_EnableCSS>
}
 80061de:	bf00      	nop
 80061e0:	3740      	adds	r7, #64	@ 0x40
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80061e6:	b480      	push	{r7}
 80061e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80061ea:	b672      	cpsid	i
}
 80061ec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80061ee:	bf00      	nop
 80061f0:	e7fd      	b.n	80061ee <Error_Handler+0x8>
	...

080061f4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80061f8:	4b17      	ldr	r3, [pc, #92]	@ (8006258 <MX_SPI1_Init+0x64>)
 80061fa:	4a18      	ldr	r2, [pc, #96]	@ (800625c <MX_SPI1_Init+0x68>)
 80061fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80061fe:	4b16      	ldr	r3, [pc, #88]	@ (8006258 <MX_SPI1_Init+0x64>)
 8006200:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006204:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006206:	4b14      	ldr	r3, [pc, #80]	@ (8006258 <MX_SPI1_Init+0x64>)
 8006208:	2200      	movs	r2, #0
 800620a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800620c:	4b12      	ldr	r3, [pc, #72]	@ (8006258 <MX_SPI1_Init+0x64>)
 800620e:	2200      	movs	r2, #0
 8006210:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006212:	4b11      	ldr	r3, [pc, #68]	@ (8006258 <MX_SPI1_Init+0x64>)
 8006214:	2200      	movs	r2, #0
 8006216:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006218:	4b0f      	ldr	r3, [pc, #60]	@ (8006258 <MX_SPI1_Init+0x64>)
 800621a:	2200      	movs	r2, #0
 800621c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800621e:	4b0e      	ldr	r3, [pc, #56]	@ (8006258 <MX_SPI1_Init+0x64>)
 8006220:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006224:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8006226:	4b0c      	ldr	r3, [pc, #48]	@ (8006258 <MX_SPI1_Init+0x64>)
 8006228:	2238      	movs	r2, #56	@ 0x38
 800622a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800622c:	4b0a      	ldr	r3, [pc, #40]	@ (8006258 <MX_SPI1_Init+0x64>)
 800622e:	2200      	movs	r2, #0
 8006230:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006232:	4b09      	ldr	r3, [pc, #36]	@ (8006258 <MX_SPI1_Init+0x64>)
 8006234:	2200      	movs	r2, #0
 8006236:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006238:	4b07      	ldr	r3, [pc, #28]	@ (8006258 <MX_SPI1_Init+0x64>)
 800623a:	2200      	movs	r2, #0
 800623c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800623e:	4b06      	ldr	r3, [pc, #24]	@ (8006258 <MX_SPI1_Init+0x64>)
 8006240:	220a      	movs	r2, #10
 8006242:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006244:	4804      	ldr	r0, [pc, #16]	@ (8006258 <MX_SPI1_Init+0x64>)
 8006246:	f001 f97b 	bl	8007540 <HAL_SPI_Init>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d001      	beq.n	8006254 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8006250:	f7ff ffc9 	bl	80061e6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006254:	bf00      	nop
 8006256:	bd80      	pop	{r7, pc}
 8006258:	2000364c 	.word	0x2000364c
 800625c:	40013000 	.word	0x40013000

08006260 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b088      	sub	sp, #32
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006268:	f107 0310 	add.w	r3, r7, #16
 800626c:	2200      	movs	r2, #0
 800626e:	601a      	str	r2, [r3, #0]
 8006270:	605a      	str	r2, [r3, #4]
 8006272:	609a      	str	r2, [r3, #8]
 8006274:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a1f      	ldr	r2, [pc, #124]	@ (80062f8 <HAL_SPI_MspInit+0x98>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d137      	bne.n	80062f0 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006280:	4b1e      	ldr	r3, [pc, #120]	@ (80062fc <HAL_SPI_MspInit+0x9c>)
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	4a1d      	ldr	r2, [pc, #116]	@ (80062fc <HAL_SPI_MspInit+0x9c>)
 8006286:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800628a:	6193      	str	r3, [r2, #24]
 800628c:	4b1b      	ldr	r3, [pc, #108]	@ (80062fc <HAL_SPI_MspInit+0x9c>)
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006294:	60fb      	str	r3, [r7, #12]
 8006296:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006298:	4b18      	ldr	r3, [pc, #96]	@ (80062fc <HAL_SPI_MspInit+0x9c>)
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	4a17      	ldr	r2, [pc, #92]	@ (80062fc <HAL_SPI_MspInit+0x9c>)
 800629e:	f043 0304 	orr.w	r3, r3, #4
 80062a2:	6193      	str	r3, [r2, #24]
 80062a4:	4b15      	ldr	r3, [pc, #84]	@ (80062fc <HAL_SPI_MspInit+0x9c>)
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	f003 0304 	and.w	r3, r3, #4
 80062ac:	60bb      	str	r3, [r7, #8]
 80062ae:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80062b0:	23a0      	movs	r3, #160	@ 0xa0
 80062b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062b4:	2302      	movs	r3, #2
 80062b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80062b8:	2303      	movs	r3, #3
 80062ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062bc:	f107 0310 	add.w	r3, r7, #16
 80062c0:	4619      	mov	r1, r3
 80062c2:	480f      	ldr	r0, [pc, #60]	@ (8006300 <HAL_SPI_MspInit+0xa0>)
 80062c4:	f000 fb82 	bl	80069cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80062c8:	2340      	movs	r3, #64	@ 0x40
 80062ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80062cc:	2300      	movs	r3, #0
 80062ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062d0:	2300      	movs	r3, #0
 80062d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062d4:	f107 0310 	add.w	r3, r7, #16
 80062d8:	4619      	mov	r1, r3
 80062da:	4809      	ldr	r0, [pc, #36]	@ (8006300 <HAL_SPI_MspInit+0xa0>)
 80062dc:	f000 fb76 	bl	80069cc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80062e0:	2200      	movs	r2, #0
 80062e2:	2100      	movs	r1, #0
 80062e4:	2023      	movs	r0, #35	@ 0x23
 80062e6:	f000 fac2 	bl	800686e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80062ea:	2023      	movs	r0, #35	@ 0x23
 80062ec:	f000 fadb 	bl	80068a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80062f0:	bf00      	nop
 80062f2:	3720      	adds	r7, #32
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	40013000 	.word	0x40013000
 80062fc:	40021000 	.word	0x40021000
 8006300:	40010800 	.word	0x40010800

08006304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800630a:	4b15      	ldr	r3, [pc, #84]	@ (8006360 <HAL_MspInit+0x5c>)
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	4a14      	ldr	r2, [pc, #80]	@ (8006360 <HAL_MspInit+0x5c>)
 8006310:	f043 0301 	orr.w	r3, r3, #1
 8006314:	6193      	str	r3, [r2, #24]
 8006316:	4b12      	ldr	r3, [pc, #72]	@ (8006360 <HAL_MspInit+0x5c>)
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	60bb      	str	r3, [r7, #8]
 8006320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006322:	4b0f      	ldr	r3, [pc, #60]	@ (8006360 <HAL_MspInit+0x5c>)
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	4a0e      	ldr	r2, [pc, #56]	@ (8006360 <HAL_MspInit+0x5c>)
 8006328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800632c:	61d3      	str	r3, [r2, #28]
 800632e:	4b0c      	ldr	r3, [pc, #48]	@ (8006360 <HAL_MspInit+0x5c>)
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006336:	607b      	str	r3, [r7, #4]
 8006338:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800633a:	4b0a      	ldr	r3, [pc, #40]	@ (8006364 <HAL_MspInit+0x60>)
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	60fb      	str	r3, [r7, #12]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8006346:	60fb      	str	r3, [r7, #12]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800634e:	60fb      	str	r3, [r7, #12]
 8006350:	4a04      	ldr	r2, [pc, #16]	@ (8006364 <HAL_MspInit+0x60>)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006356:	bf00      	nop
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	bc80      	pop	{r7}
 800635e:	4770      	bx	lr
 8006360:	40021000 	.word	0x40021000
 8006364:	40010000 	.word	0x40010000

08006368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800636c:	f001 f8b0 	bl	80074d0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006370:	bf00      	nop
 8006372:	e7fd      	b.n	8006370 <NMI_Handler+0x8>

08006374 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006374:	b480      	push	{r7}
 8006376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006378:	bf00      	nop
 800637a:	e7fd      	b.n	8006378 <HardFault_Handler+0x4>

0800637c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800637c:	b480      	push	{r7}
 800637e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006380:	bf00      	nop
 8006382:	e7fd      	b.n	8006380 <MemManage_Handler+0x4>

08006384 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006384:	b480      	push	{r7}
 8006386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006388:	bf00      	nop
 800638a:	e7fd      	b.n	8006388 <BusFault_Handler+0x4>

0800638c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800638c:	b480      	push	{r7}
 800638e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006390:	bf00      	nop
 8006392:	e7fd      	b.n	8006390 <UsageFault_Handler+0x4>

08006394 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006394:	b480      	push	{r7}
 8006396:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006398:	bf00      	nop
 800639a:	46bd      	mov	sp, r7
 800639c:	bc80      	pop	{r7}
 800639e:	4770      	bx	lr

080063a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80063a0:	b480      	push	{r7}
 80063a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80063a4:	bf00      	nop
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bc80      	pop	{r7}
 80063aa:	4770      	bx	lr

080063ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80063ac:	b480      	push	{r7}
 80063ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80063b0:	bf00      	nop
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bc80      	pop	{r7}
 80063b6:	4770      	bx	lr

080063b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80063bc:	f000 f940 	bl	8006640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80063c0:	bf00      	nop
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80063c8:	4802      	ldr	r0, [pc, #8]	@ (80063d4 <SPI1_IRQHandler+0x10>)
 80063ca:	f001 f93d 	bl	8007648 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80063ce:	bf00      	nop
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	2000364c 	.word	0x2000364c

080063d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80063d8:	b480      	push	{r7}
 80063da:	af00      	add	r7, sp, #0
  return 1;
 80063dc:	2301      	movs	r3, #1
}
 80063de:	4618      	mov	r0, r3
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bc80      	pop	{r7}
 80063e4:	4770      	bx	lr

080063e6 <_kill>:

int _kill(int pid, int sig)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b082      	sub	sp, #8
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
 80063ee:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80063f0:	f005 fed6 	bl	800c1a0 <__errno>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2216      	movs	r2, #22
 80063f8:	601a      	str	r2, [r3, #0]
  return -1;
 80063fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3708      	adds	r7, #8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <_exit>:

void _exit (int status)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b082      	sub	sp, #8
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800640e:	f04f 31ff 	mov.w	r1, #4294967295
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f7ff ffe7 	bl	80063e6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006418:	bf00      	nop
 800641a:	e7fd      	b.n	8006418 <_exit+0x12>

0800641c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006428:	2300      	movs	r3, #0
 800642a:	617b      	str	r3, [r7, #20]
 800642c:	e00a      	b.n	8006444 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800642e:	f3af 8000 	nop.w
 8006432:	4601      	mov	r1, r0
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	1c5a      	adds	r2, r3, #1
 8006438:	60ba      	str	r2, [r7, #8]
 800643a:	b2ca      	uxtb	r2, r1
 800643c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	3301      	adds	r3, #1
 8006442:	617b      	str	r3, [r7, #20]
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	429a      	cmp	r2, r3
 800644a:	dbf0      	blt.n	800642e <_read+0x12>
  }

  return len;
 800644c:	687b      	ldr	r3, [r7, #4]
}
 800644e:	4618      	mov	r0, r3
 8006450:	3718      	adds	r7, #24
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b086      	sub	sp, #24
 800645a:	af00      	add	r7, sp, #0
 800645c:	60f8      	str	r0, [r7, #12]
 800645e:	60b9      	str	r1, [r7, #8]
 8006460:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006462:	2300      	movs	r3, #0
 8006464:	617b      	str	r3, [r7, #20]
 8006466:	e009      	b.n	800647c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	1c5a      	adds	r2, r3, #1
 800646c:	60ba      	str	r2, [r7, #8]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	4618      	mov	r0, r3
 8006472:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	3301      	adds	r3, #1
 800647a:	617b      	str	r3, [r7, #20]
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	429a      	cmp	r2, r3
 8006482:	dbf1      	blt.n	8006468 <_write+0x12>
  }
  return len;
 8006484:	687b      	ldr	r3, [r7, #4]
}
 8006486:	4618      	mov	r0, r3
 8006488:	3718      	adds	r7, #24
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <_close>:

int _close(int file)
{
 800648e:	b480      	push	{r7}
 8006490:	b083      	sub	sp, #12
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006496:	f04f 33ff 	mov.w	r3, #4294967295
}
 800649a:	4618      	mov	r0, r3
 800649c:	370c      	adds	r7, #12
 800649e:	46bd      	mov	sp, r7
 80064a0:	bc80      	pop	{r7}
 80064a2:	4770      	bx	lr

080064a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80064b4:	605a      	str	r2, [r3, #4]
  return 0;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	bc80      	pop	{r7}
 80064c0:	4770      	bx	lr

080064c2 <_isatty>:

int _isatty(int file)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b083      	sub	sp, #12
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80064ca:	2301      	movs	r3, #1
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bc80      	pop	{r7}
 80064d4:	4770      	bx	lr

080064d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b085      	sub	sp, #20
 80064da:	af00      	add	r7, sp, #0
 80064dc:	60f8      	str	r0, [r7, #12]
 80064de:	60b9      	str	r1, [r7, #8]
 80064e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3714      	adds	r7, #20
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bc80      	pop	{r7}
 80064ec:	4770      	bx	lr
	...

080064f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80064f8:	4a14      	ldr	r2, [pc, #80]	@ (800654c <_sbrk+0x5c>)
 80064fa:	4b15      	ldr	r3, [pc, #84]	@ (8006550 <_sbrk+0x60>)
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006504:	4b13      	ldr	r3, [pc, #76]	@ (8006554 <_sbrk+0x64>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d102      	bne.n	8006512 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800650c:	4b11      	ldr	r3, [pc, #68]	@ (8006554 <_sbrk+0x64>)
 800650e:	4a12      	ldr	r2, [pc, #72]	@ (8006558 <_sbrk+0x68>)
 8006510:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006512:	4b10      	ldr	r3, [pc, #64]	@ (8006554 <_sbrk+0x64>)
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4413      	add	r3, r2
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	429a      	cmp	r2, r3
 800651e:	d207      	bcs.n	8006530 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006520:	f005 fe3e 	bl	800c1a0 <__errno>
 8006524:	4603      	mov	r3, r0
 8006526:	220c      	movs	r2, #12
 8006528:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800652a:	f04f 33ff 	mov.w	r3, #4294967295
 800652e:	e009      	b.n	8006544 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006530:	4b08      	ldr	r3, [pc, #32]	@ (8006554 <_sbrk+0x64>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006536:	4b07      	ldr	r3, [pc, #28]	@ (8006554 <_sbrk+0x64>)
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4413      	add	r3, r2
 800653e:	4a05      	ldr	r2, [pc, #20]	@ (8006554 <_sbrk+0x64>)
 8006540:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006542:	68fb      	ldr	r3, [r7, #12]
}
 8006544:	4618      	mov	r0, r3
 8006546:	3718      	adds	r7, #24
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	20005000 	.word	0x20005000
 8006550:	00000400 	.word	0x00000400
 8006554:	200036a4 	.word	0x200036a4
 8006558:	20003830 	.word	0x20003830

0800655c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800655c:	b480      	push	{r7}
 800655e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006560:	bf00      	nop
 8006562:	46bd      	mov	sp, r7
 8006564:	bc80      	pop	{r7}
 8006566:	4770      	bx	lr

08006568 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006568:	f7ff fff8 	bl	800655c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800656c:	480b      	ldr	r0, [pc, #44]	@ (800659c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800656e:	490c      	ldr	r1, [pc, #48]	@ (80065a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8006570:	4a0c      	ldr	r2, [pc, #48]	@ (80065a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8006572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006574:	e002      	b.n	800657c <LoopCopyDataInit>

08006576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800657a:	3304      	adds	r3, #4

0800657c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800657c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800657e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006580:	d3f9      	bcc.n	8006576 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006582:	4a09      	ldr	r2, [pc, #36]	@ (80065a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8006584:	4c09      	ldr	r4, [pc, #36]	@ (80065ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006588:	e001      	b.n	800658e <LoopFillZerobss>

0800658a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800658a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800658c:	3204      	adds	r2, #4

0800658e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800658e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006590:	d3fb      	bcc.n	800658a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006592:	f005 fe0b 	bl	800c1ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006596:	f7ff fb7f 	bl	8005c98 <main>
  bx lr
 800659a:	4770      	bx	lr
  ldr r0, =_sdata
 800659c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80065a0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80065a4:	0800f26c 	.word	0x0800f26c
  ldr r2, =_sbss
 80065a8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80065ac:	2000382c 	.word	0x2000382c

080065b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80065b0:	e7fe      	b.n	80065b0 <ADC1_2_IRQHandler>
	...

080065b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80065b8:	4b08      	ldr	r3, [pc, #32]	@ (80065dc <HAL_Init+0x28>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a07      	ldr	r2, [pc, #28]	@ (80065dc <HAL_Init+0x28>)
 80065be:	f043 0310 	orr.w	r3, r3, #16
 80065c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80065c4:	2003      	movs	r0, #3
 80065c6:	f000 f947 	bl	8006858 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80065ca:	200f      	movs	r0, #15
 80065cc:	f000 f808 	bl	80065e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80065d0:	f7ff fe98 	bl	8006304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	40022000 	.word	0x40022000

080065e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80065e8:	4b12      	ldr	r3, [pc, #72]	@ (8006634 <HAL_InitTick+0x54>)
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	4b12      	ldr	r3, [pc, #72]	@ (8006638 <HAL_InitTick+0x58>)
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	4619      	mov	r1, r3
 80065f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80065f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80065fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 f95f 	bl	80068c2 <HAL_SYSTICK_Config>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d001      	beq.n	800660e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e00e      	b.n	800662c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2b0f      	cmp	r3, #15
 8006612:	d80a      	bhi.n	800662a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006614:	2200      	movs	r2, #0
 8006616:	6879      	ldr	r1, [r7, #4]
 8006618:	f04f 30ff 	mov.w	r0, #4294967295
 800661c:	f000 f927 	bl	800686e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006620:	4a06      	ldr	r2, [pc, #24]	@ (800663c <HAL_InitTick+0x5c>)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006626:	2300      	movs	r3, #0
 8006628:	e000      	b.n	800662c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
}
 800662c:	4618      	mov	r0, r3
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	20000000 	.word	0x20000000
 8006638:	20000008 	.word	0x20000008
 800663c:	20000004 	.word	0x20000004

08006640 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006640:	b480      	push	{r7}
 8006642:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006644:	4b05      	ldr	r3, [pc, #20]	@ (800665c <HAL_IncTick+0x1c>)
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	461a      	mov	r2, r3
 800664a:	4b05      	ldr	r3, [pc, #20]	@ (8006660 <HAL_IncTick+0x20>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4413      	add	r3, r2
 8006650:	4a03      	ldr	r2, [pc, #12]	@ (8006660 <HAL_IncTick+0x20>)
 8006652:	6013      	str	r3, [r2, #0]
}
 8006654:	bf00      	nop
 8006656:	46bd      	mov	sp, r7
 8006658:	bc80      	pop	{r7}
 800665a:	4770      	bx	lr
 800665c:	20000008 	.word	0x20000008
 8006660:	200036a8 	.word	0x200036a8

08006664 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006664:	b480      	push	{r7}
 8006666:	af00      	add	r7, sp, #0
  return uwTick;
 8006668:	4b02      	ldr	r3, [pc, #8]	@ (8006674 <HAL_GetTick+0x10>)
 800666a:	681b      	ldr	r3, [r3, #0]
}
 800666c:	4618      	mov	r0, r3
 800666e:	46bd      	mov	sp, r7
 8006670:	bc80      	pop	{r7}
 8006672:	4770      	bx	lr
 8006674:	200036a8 	.word	0x200036a8

08006678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006680:	f7ff fff0 	bl	8006664 <HAL_GetTick>
 8006684:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006690:	d005      	beq.n	800669e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006692:	4b0a      	ldr	r3, [pc, #40]	@ (80066bc <HAL_Delay+0x44>)
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	461a      	mov	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	4413      	add	r3, r2
 800669c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800669e:	bf00      	nop
 80066a0:	f7ff ffe0 	bl	8006664 <HAL_GetTick>
 80066a4:	4602      	mov	r2, r0
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d8f7      	bhi.n	80066a0 <HAL_Delay+0x28>
  {
  }
}
 80066b0:	bf00      	nop
 80066b2:	bf00      	nop
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	20000008 	.word	0x20000008

080066c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f003 0307 	and.w	r3, r3, #7
 80066ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80066d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006704 <__NVIC_SetPriorityGrouping+0x44>)
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80066dc:	4013      	ands	r3, r2
 80066de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80066e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80066ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80066f2:	4a04      	ldr	r2, [pc, #16]	@ (8006704 <__NVIC_SetPriorityGrouping+0x44>)
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	60d3      	str	r3, [r2, #12]
}
 80066f8:	bf00      	nop
 80066fa:	3714      	adds	r7, #20
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bc80      	pop	{r7}
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	e000ed00 	.word	0xe000ed00

08006708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006708:	b480      	push	{r7}
 800670a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800670c:	4b04      	ldr	r3, [pc, #16]	@ (8006720 <__NVIC_GetPriorityGrouping+0x18>)
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	0a1b      	lsrs	r3, r3, #8
 8006712:	f003 0307 	and.w	r3, r3, #7
}
 8006716:	4618      	mov	r0, r3
 8006718:	46bd      	mov	sp, r7
 800671a:	bc80      	pop	{r7}
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	e000ed00 	.word	0xe000ed00

08006724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	4603      	mov	r3, r0
 800672c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800672e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006732:	2b00      	cmp	r3, #0
 8006734:	db0b      	blt.n	800674e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006736:	79fb      	ldrb	r3, [r7, #7]
 8006738:	f003 021f 	and.w	r2, r3, #31
 800673c:	4906      	ldr	r1, [pc, #24]	@ (8006758 <__NVIC_EnableIRQ+0x34>)
 800673e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006742:	095b      	lsrs	r3, r3, #5
 8006744:	2001      	movs	r0, #1
 8006746:	fa00 f202 	lsl.w	r2, r0, r2
 800674a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800674e:	bf00      	nop
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	bc80      	pop	{r7}
 8006756:	4770      	bx	lr
 8006758:	e000e100 	.word	0xe000e100

0800675c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	4603      	mov	r3, r0
 8006764:	6039      	str	r1, [r7, #0]
 8006766:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800676c:	2b00      	cmp	r3, #0
 800676e:	db0a      	blt.n	8006786 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	b2da      	uxtb	r2, r3
 8006774:	490c      	ldr	r1, [pc, #48]	@ (80067a8 <__NVIC_SetPriority+0x4c>)
 8006776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800677a:	0112      	lsls	r2, r2, #4
 800677c:	b2d2      	uxtb	r2, r2
 800677e:	440b      	add	r3, r1
 8006780:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006784:	e00a      	b.n	800679c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	b2da      	uxtb	r2, r3
 800678a:	4908      	ldr	r1, [pc, #32]	@ (80067ac <__NVIC_SetPriority+0x50>)
 800678c:	79fb      	ldrb	r3, [r7, #7]
 800678e:	f003 030f 	and.w	r3, r3, #15
 8006792:	3b04      	subs	r3, #4
 8006794:	0112      	lsls	r2, r2, #4
 8006796:	b2d2      	uxtb	r2, r2
 8006798:	440b      	add	r3, r1
 800679a:	761a      	strb	r2, [r3, #24]
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bc80      	pop	{r7}
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	e000e100 	.word	0xe000e100
 80067ac:	e000ed00 	.word	0xe000ed00

080067b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b089      	sub	sp, #36	@ 0x24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f003 0307 	and.w	r3, r3, #7
 80067c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	f1c3 0307 	rsb	r3, r3, #7
 80067ca:	2b04      	cmp	r3, #4
 80067cc:	bf28      	it	cs
 80067ce:	2304      	movcs	r3, #4
 80067d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	3304      	adds	r3, #4
 80067d6:	2b06      	cmp	r3, #6
 80067d8:	d902      	bls.n	80067e0 <NVIC_EncodePriority+0x30>
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	3b03      	subs	r3, #3
 80067de:	e000      	b.n	80067e2 <NVIC_EncodePriority+0x32>
 80067e0:	2300      	movs	r3, #0
 80067e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067e4:	f04f 32ff 	mov.w	r2, #4294967295
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	fa02 f303 	lsl.w	r3, r2, r3
 80067ee:	43da      	mvns	r2, r3
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	401a      	ands	r2, r3
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80067f8:	f04f 31ff 	mov.w	r1, #4294967295
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006802:	43d9      	mvns	r1, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006808:	4313      	orrs	r3, r2
         );
}
 800680a:	4618      	mov	r0, r3
 800680c:	3724      	adds	r7, #36	@ 0x24
 800680e:	46bd      	mov	sp, r7
 8006810:	bc80      	pop	{r7}
 8006812:	4770      	bx	lr

08006814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	3b01      	subs	r3, #1
 8006820:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006824:	d301      	bcc.n	800682a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006826:	2301      	movs	r3, #1
 8006828:	e00f      	b.n	800684a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800682a:	4a0a      	ldr	r2, [pc, #40]	@ (8006854 <SysTick_Config+0x40>)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	3b01      	subs	r3, #1
 8006830:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006832:	210f      	movs	r1, #15
 8006834:	f04f 30ff 	mov.w	r0, #4294967295
 8006838:	f7ff ff90 	bl	800675c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800683c:	4b05      	ldr	r3, [pc, #20]	@ (8006854 <SysTick_Config+0x40>)
 800683e:	2200      	movs	r2, #0
 8006840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006842:	4b04      	ldr	r3, [pc, #16]	@ (8006854 <SysTick_Config+0x40>)
 8006844:	2207      	movs	r2, #7
 8006846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3708      	adds	r7, #8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	e000e010 	.word	0xe000e010

08006858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f7ff ff2d 	bl	80066c0 <__NVIC_SetPriorityGrouping>
}
 8006866:	bf00      	nop
 8006868:	3708      	adds	r7, #8
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800686e:	b580      	push	{r7, lr}
 8006870:	b086      	sub	sp, #24
 8006872:	af00      	add	r7, sp, #0
 8006874:	4603      	mov	r3, r0
 8006876:	60b9      	str	r1, [r7, #8]
 8006878:	607a      	str	r2, [r7, #4]
 800687a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800687c:	2300      	movs	r3, #0
 800687e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006880:	f7ff ff42 	bl	8006708 <__NVIC_GetPriorityGrouping>
 8006884:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	68b9      	ldr	r1, [r7, #8]
 800688a:	6978      	ldr	r0, [r7, #20]
 800688c:	f7ff ff90 	bl	80067b0 <NVIC_EncodePriority>
 8006890:	4602      	mov	r2, r0
 8006892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006896:	4611      	mov	r1, r2
 8006898:	4618      	mov	r0, r3
 800689a:	f7ff ff5f 	bl	800675c <__NVIC_SetPriority>
}
 800689e:	bf00      	nop
 80068a0:	3718      	adds	r7, #24
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b082      	sub	sp, #8
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	4603      	mov	r3, r0
 80068ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80068b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7ff ff35 	bl	8006724 <__NVIC_EnableIRQ>
}
 80068ba:	bf00      	nop
 80068bc:	3708      	adds	r7, #8
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b082      	sub	sp, #8
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7ff ffa2 	bl	8006814 <SysTick_Config>
 80068d0:	4603      	mov	r3, r0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
	...

080068dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068e4:	2300      	movs	r3, #0
 80068e6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d005      	beq.n	8006900 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2204      	movs	r2, #4
 80068f8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	73fb      	strb	r3, [r7, #15]
 80068fe:	e051      	b.n	80069a4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 020e 	bic.w	r2, r2, #14
 800690e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f022 0201 	bic.w	r2, r2, #1
 800691e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a22      	ldr	r2, [pc, #136]	@ (80069b0 <HAL_DMA_Abort_IT+0xd4>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d029      	beq.n	800697e <HAL_DMA_Abort_IT+0xa2>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a21      	ldr	r2, [pc, #132]	@ (80069b4 <HAL_DMA_Abort_IT+0xd8>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d022      	beq.n	800697a <HAL_DMA_Abort_IT+0x9e>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a1f      	ldr	r2, [pc, #124]	@ (80069b8 <HAL_DMA_Abort_IT+0xdc>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d01a      	beq.n	8006974 <HAL_DMA_Abort_IT+0x98>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a1e      	ldr	r2, [pc, #120]	@ (80069bc <HAL_DMA_Abort_IT+0xe0>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d012      	beq.n	800696e <HAL_DMA_Abort_IT+0x92>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a1c      	ldr	r2, [pc, #112]	@ (80069c0 <HAL_DMA_Abort_IT+0xe4>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d00a      	beq.n	8006968 <HAL_DMA_Abort_IT+0x8c>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a1b      	ldr	r2, [pc, #108]	@ (80069c4 <HAL_DMA_Abort_IT+0xe8>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d102      	bne.n	8006962 <HAL_DMA_Abort_IT+0x86>
 800695c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006960:	e00e      	b.n	8006980 <HAL_DMA_Abort_IT+0xa4>
 8006962:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006966:	e00b      	b.n	8006980 <HAL_DMA_Abort_IT+0xa4>
 8006968:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800696c:	e008      	b.n	8006980 <HAL_DMA_Abort_IT+0xa4>
 800696e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006972:	e005      	b.n	8006980 <HAL_DMA_Abort_IT+0xa4>
 8006974:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006978:	e002      	b.n	8006980 <HAL_DMA_Abort_IT+0xa4>
 800697a:	2310      	movs	r3, #16
 800697c:	e000      	b.n	8006980 <HAL_DMA_Abort_IT+0xa4>
 800697e:	2301      	movs	r3, #1
 8006980:	4a11      	ldr	r2, [pc, #68]	@ (80069c8 <HAL_DMA_Abort_IT+0xec>)
 8006982:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006998:	2b00      	cmp	r3, #0
 800699a:	d003      	beq.n	80069a4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	4798      	blx	r3
    } 
  }
  return status;
 80069a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	40020008 	.word	0x40020008
 80069b4:	4002001c 	.word	0x4002001c
 80069b8:	40020030 	.word	0x40020030
 80069bc:	40020044 	.word	0x40020044
 80069c0:	40020058 	.word	0x40020058
 80069c4:	4002006c 	.word	0x4002006c
 80069c8:	40020000 	.word	0x40020000

080069cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b08b      	sub	sp, #44	@ 0x2c
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80069d6:	2300      	movs	r3, #0
 80069d8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80069da:	2300      	movs	r3, #0
 80069dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80069de:	e169      	b.n	8006cb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80069e0:	2201      	movs	r2, #1
 80069e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e4:	fa02 f303 	lsl.w	r3, r2, r3
 80069e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	69fa      	ldr	r2, [r7, #28]
 80069f0:	4013      	ands	r3, r2
 80069f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80069f4:	69ba      	ldr	r2, [r7, #24]
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	f040 8158 	bne.w	8006cae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	4a9a      	ldr	r2, [pc, #616]	@ (8006c6c <HAL_GPIO_Init+0x2a0>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d05e      	beq.n	8006ac6 <HAL_GPIO_Init+0xfa>
 8006a08:	4a98      	ldr	r2, [pc, #608]	@ (8006c6c <HAL_GPIO_Init+0x2a0>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d875      	bhi.n	8006afa <HAL_GPIO_Init+0x12e>
 8006a0e:	4a98      	ldr	r2, [pc, #608]	@ (8006c70 <HAL_GPIO_Init+0x2a4>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d058      	beq.n	8006ac6 <HAL_GPIO_Init+0xfa>
 8006a14:	4a96      	ldr	r2, [pc, #600]	@ (8006c70 <HAL_GPIO_Init+0x2a4>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d86f      	bhi.n	8006afa <HAL_GPIO_Init+0x12e>
 8006a1a:	4a96      	ldr	r2, [pc, #600]	@ (8006c74 <HAL_GPIO_Init+0x2a8>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d052      	beq.n	8006ac6 <HAL_GPIO_Init+0xfa>
 8006a20:	4a94      	ldr	r2, [pc, #592]	@ (8006c74 <HAL_GPIO_Init+0x2a8>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d869      	bhi.n	8006afa <HAL_GPIO_Init+0x12e>
 8006a26:	4a94      	ldr	r2, [pc, #592]	@ (8006c78 <HAL_GPIO_Init+0x2ac>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d04c      	beq.n	8006ac6 <HAL_GPIO_Init+0xfa>
 8006a2c:	4a92      	ldr	r2, [pc, #584]	@ (8006c78 <HAL_GPIO_Init+0x2ac>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d863      	bhi.n	8006afa <HAL_GPIO_Init+0x12e>
 8006a32:	4a92      	ldr	r2, [pc, #584]	@ (8006c7c <HAL_GPIO_Init+0x2b0>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d046      	beq.n	8006ac6 <HAL_GPIO_Init+0xfa>
 8006a38:	4a90      	ldr	r2, [pc, #576]	@ (8006c7c <HAL_GPIO_Init+0x2b0>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d85d      	bhi.n	8006afa <HAL_GPIO_Init+0x12e>
 8006a3e:	2b12      	cmp	r3, #18
 8006a40:	d82a      	bhi.n	8006a98 <HAL_GPIO_Init+0xcc>
 8006a42:	2b12      	cmp	r3, #18
 8006a44:	d859      	bhi.n	8006afa <HAL_GPIO_Init+0x12e>
 8006a46:	a201      	add	r2, pc, #4	@ (adr r2, 8006a4c <HAL_GPIO_Init+0x80>)
 8006a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4c:	08006ac7 	.word	0x08006ac7
 8006a50:	08006aa1 	.word	0x08006aa1
 8006a54:	08006ab3 	.word	0x08006ab3
 8006a58:	08006af5 	.word	0x08006af5
 8006a5c:	08006afb 	.word	0x08006afb
 8006a60:	08006afb 	.word	0x08006afb
 8006a64:	08006afb 	.word	0x08006afb
 8006a68:	08006afb 	.word	0x08006afb
 8006a6c:	08006afb 	.word	0x08006afb
 8006a70:	08006afb 	.word	0x08006afb
 8006a74:	08006afb 	.word	0x08006afb
 8006a78:	08006afb 	.word	0x08006afb
 8006a7c:	08006afb 	.word	0x08006afb
 8006a80:	08006afb 	.word	0x08006afb
 8006a84:	08006afb 	.word	0x08006afb
 8006a88:	08006afb 	.word	0x08006afb
 8006a8c:	08006afb 	.word	0x08006afb
 8006a90:	08006aa9 	.word	0x08006aa9
 8006a94:	08006abd 	.word	0x08006abd
 8006a98:	4a79      	ldr	r2, [pc, #484]	@ (8006c80 <HAL_GPIO_Init+0x2b4>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d013      	beq.n	8006ac6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006a9e:	e02c      	b.n	8006afa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	623b      	str	r3, [r7, #32]
          break;
 8006aa6:	e029      	b.n	8006afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	3304      	adds	r3, #4
 8006aae:	623b      	str	r3, [r7, #32]
          break;
 8006ab0:	e024      	b.n	8006afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	3308      	adds	r3, #8
 8006ab8:	623b      	str	r3, [r7, #32]
          break;
 8006aba:	e01f      	b.n	8006afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	330c      	adds	r3, #12
 8006ac2:	623b      	str	r3, [r7, #32]
          break;
 8006ac4:	e01a      	b.n	8006afc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d102      	bne.n	8006ad4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006ace:	2304      	movs	r3, #4
 8006ad0:	623b      	str	r3, [r7, #32]
          break;
 8006ad2:	e013      	b.n	8006afc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d105      	bne.n	8006ae8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006adc:	2308      	movs	r3, #8
 8006ade:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	69fa      	ldr	r2, [r7, #28]
 8006ae4:	611a      	str	r2, [r3, #16]
          break;
 8006ae6:	e009      	b.n	8006afc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006ae8:	2308      	movs	r3, #8
 8006aea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	69fa      	ldr	r2, [r7, #28]
 8006af0:	615a      	str	r2, [r3, #20]
          break;
 8006af2:	e003      	b.n	8006afc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006af4:	2300      	movs	r3, #0
 8006af6:	623b      	str	r3, [r7, #32]
          break;
 8006af8:	e000      	b.n	8006afc <HAL_GPIO_Init+0x130>
          break;
 8006afa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	2bff      	cmp	r3, #255	@ 0xff
 8006b00:	d801      	bhi.n	8006b06 <HAL_GPIO_Init+0x13a>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	e001      	b.n	8006b0a <HAL_GPIO_Init+0x13e>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	3304      	adds	r3, #4
 8006b0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	2bff      	cmp	r3, #255	@ 0xff
 8006b10:	d802      	bhi.n	8006b18 <HAL_GPIO_Init+0x14c>
 8006b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	e002      	b.n	8006b1e <HAL_GPIO_Init+0x152>
 8006b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1a:	3b08      	subs	r3, #8
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	210f      	movs	r1, #15
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	fa01 f303 	lsl.w	r3, r1, r3
 8006b2c:	43db      	mvns	r3, r3
 8006b2e:	401a      	ands	r2, r3
 8006b30:	6a39      	ldr	r1, [r7, #32]
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	fa01 f303 	lsl.w	r3, r1, r3
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f000 80b1 	beq.w	8006cae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006b4c:	4b4d      	ldr	r3, [pc, #308]	@ (8006c84 <HAL_GPIO_Init+0x2b8>)
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	4a4c      	ldr	r2, [pc, #304]	@ (8006c84 <HAL_GPIO_Init+0x2b8>)
 8006b52:	f043 0301 	orr.w	r3, r3, #1
 8006b56:	6193      	str	r3, [r2, #24]
 8006b58:	4b4a      	ldr	r3, [pc, #296]	@ (8006c84 <HAL_GPIO_Init+0x2b8>)
 8006b5a:	699b      	ldr	r3, [r3, #24]
 8006b5c:	f003 0301 	and.w	r3, r3, #1
 8006b60:	60bb      	str	r3, [r7, #8]
 8006b62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006b64:	4a48      	ldr	r2, [pc, #288]	@ (8006c88 <HAL_GPIO_Init+0x2bc>)
 8006b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b68:	089b      	lsrs	r3, r3, #2
 8006b6a:	3302      	adds	r3, #2
 8006b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b74:	f003 0303 	and.w	r3, r3, #3
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	220f      	movs	r2, #15
 8006b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b80:	43db      	mvns	r3, r3
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	4013      	ands	r3, r2
 8006b86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a40      	ldr	r2, [pc, #256]	@ (8006c8c <HAL_GPIO_Init+0x2c0>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d013      	beq.n	8006bb8 <HAL_GPIO_Init+0x1ec>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a3f      	ldr	r2, [pc, #252]	@ (8006c90 <HAL_GPIO_Init+0x2c4>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d00d      	beq.n	8006bb4 <HAL_GPIO_Init+0x1e8>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a3e      	ldr	r2, [pc, #248]	@ (8006c94 <HAL_GPIO_Init+0x2c8>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d007      	beq.n	8006bb0 <HAL_GPIO_Init+0x1e4>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a3d      	ldr	r2, [pc, #244]	@ (8006c98 <HAL_GPIO_Init+0x2cc>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d101      	bne.n	8006bac <HAL_GPIO_Init+0x1e0>
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e006      	b.n	8006bba <HAL_GPIO_Init+0x1ee>
 8006bac:	2304      	movs	r3, #4
 8006bae:	e004      	b.n	8006bba <HAL_GPIO_Init+0x1ee>
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	e002      	b.n	8006bba <HAL_GPIO_Init+0x1ee>
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e000      	b.n	8006bba <HAL_GPIO_Init+0x1ee>
 8006bb8:	2300      	movs	r3, #0
 8006bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bbc:	f002 0203 	and.w	r2, r2, #3
 8006bc0:	0092      	lsls	r2, r2, #2
 8006bc2:	4093      	lsls	r3, r2
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006bca:	492f      	ldr	r1, [pc, #188]	@ (8006c88 <HAL_GPIO_Init+0x2bc>)
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bce:	089b      	lsrs	r3, r3, #2
 8006bd0:	3302      	adds	r3, #2
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d006      	beq.n	8006bf2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006be4:	4b2d      	ldr	r3, [pc, #180]	@ (8006c9c <HAL_GPIO_Init+0x2d0>)
 8006be6:	689a      	ldr	r2, [r3, #8]
 8006be8:	492c      	ldr	r1, [pc, #176]	@ (8006c9c <HAL_GPIO_Init+0x2d0>)
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	608b      	str	r3, [r1, #8]
 8006bf0:	e006      	b.n	8006c00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006bf2:	4b2a      	ldr	r3, [pc, #168]	@ (8006c9c <HAL_GPIO_Init+0x2d0>)
 8006bf4:	689a      	ldr	r2, [r3, #8]
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	43db      	mvns	r3, r3
 8006bfa:	4928      	ldr	r1, [pc, #160]	@ (8006c9c <HAL_GPIO_Init+0x2d0>)
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d006      	beq.n	8006c1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006c0c:	4b23      	ldr	r3, [pc, #140]	@ (8006c9c <HAL_GPIO_Init+0x2d0>)
 8006c0e:	68da      	ldr	r2, [r3, #12]
 8006c10:	4922      	ldr	r1, [pc, #136]	@ (8006c9c <HAL_GPIO_Init+0x2d0>)
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	60cb      	str	r3, [r1, #12]
 8006c18:	e006      	b.n	8006c28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006c1a:	4b20      	ldr	r3, [pc, #128]	@ (8006c9c <HAL_GPIO_Init+0x2d0>)
 8006c1c:	68da      	ldr	r2, [r3, #12]
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	43db      	mvns	r3, r3
 8006c22:	491e      	ldr	r1, [pc, #120]	@ (8006c9c <HAL_GPIO_Init+0x2d0>)
 8006c24:	4013      	ands	r3, r2
 8006c26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d006      	beq.n	8006c42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006c34:	4b19      	ldr	r3, [pc, #100]	@ (8006c9c <HAL_GPIO_Init+0x2d0>)
 8006c36:	685a      	ldr	r2, [r3, #4]
 8006c38:	4918      	ldr	r1, [pc, #96]	@ (8006c9c <HAL_GPIO_Init+0x2d0>)
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	604b      	str	r3, [r1, #4]
 8006c40:	e006      	b.n	8006c50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006c42:	4b16      	ldr	r3, [pc, #88]	@ (8006c9c <HAL_GPIO_Init+0x2d0>)
 8006c44:	685a      	ldr	r2, [r3, #4]
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	43db      	mvns	r3, r3
 8006c4a:	4914      	ldr	r1, [pc, #80]	@ (8006c9c <HAL_GPIO_Init+0x2d0>)
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d021      	beq.n	8006ca0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8006c9c <HAL_GPIO_Init+0x2d0>)
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	490e      	ldr	r1, [pc, #56]	@ (8006c9c <HAL_GPIO_Init+0x2d0>)
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	600b      	str	r3, [r1, #0]
 8006c68:	e021      	b.n	8006cae <HAL_GPIO_Init+0x2e2>
 8006c6a:	bf00      	nop
 8006c6c:	10320000 	.word	0x10320000
 8006c70:	10310000 	.word	0x10310000
 8006c74:	10220000 	.word	0x10220000
 8006c78:	10210000 	.word	0x10210000
 8006c7c:	10120000 	.word	0x10120000
 8006c80:	10110000 	.word	0x10110000
 8006c84:	40021000 	.word	0x40021000
 8006c88:	40010000 	.word	0x40010000
 8006c8c:	40010800 	.word	0x40010800
 8006c90:	40010c00 	.word	0x40010c00
 8006c94:	40011000 	.word	0x40011000
 8006c98:	40011400 	.word	0x40011400
 8006c9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8006cd0 <HAL_GPIO_Init+0x304>)
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	43db      	mvns	r3, r3
 8006ca8:	4909      	ldr	r1, [pc, #36]	@ (8006cd0 <HAL_GPIO_Init+0x304>)
 8006caa:	4013      	ands	r3, r2
 8006cac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cba:	fa22 f303 	lsr.w	r3, r2, r3
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f47f ae8e 	bne.w	80069e0 <HAL_GPIO_Init+0x14>
  }
}
 8006cc4:	bf00      	nop
 8006cc6:	bf00      	nop
 8006cc8:	372c      	adds	r7, #44	@ 0x2c
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bc80      	pop	{r7}
 8006cce:	4770      	bx	lr
 8006cd0:	40010400 	.word	0x40010400

08006cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	460b      	mov	r3, r1
 8006cde:	807b      	strh	r3, [r7, #2]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006ce4:	787b      	ldrb	r3, [r7, #1]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d003      	beq.n	8006cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006cea:	887a      	ldrh	r2, [r7, #2]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006cf0:	e003      	b.n	8006cfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006cf2:	887b      	ldrh	r3, [r7, #2]
 8006cf4:	041a      	lsls	r2, r3, #16
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	611a      	str	r2, [r3, #16]
}
 8006cfa:	bf00      	nop
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bc80      	pop	{r7}
 8006d02:	4770      	bx	lr

08006d04 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006d16:	887a      	ldrh	r2, [r7, #2]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	041a      	lsls	r2, r3, #16
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	43d9      	mvns	r1, r3
 8006d22:	887b      	ldrh	r3, [r7, #2]
 8006d24:	400b      	ands	r3, r1
 8006d26:	431a      	orrs	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	611a      	str	r2, [r3, #16]
}
 8006d2c:	bf00      	nop
 8006d2e:	3714      	adds	r7, #20
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bc80      	pop	{r7}
 8006d34:	4770      	bx	lr
	...

08006d38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d101      	bne.n	8006d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e272      	b.n	8007230 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f000 8087 	beq.w	8006e66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006d58:	4b92      	ldr	r3, [pc, #584]	@ (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	f003 030c 	and.w	r3, r3, #12
 8006d60:	2b04      	cmp	r3, #4
 8006d62:	d00c      	beq.n	8006d7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006d64:	4b8f      	ldr	r3, [pc, #572]	@ (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f003 030c 	and.w	r3, r3, #12
 8006d6c:	2b08      	cmp	r3, #8
 8006d6e:	d112      	bne.n	8006d96 <HAL_RCC_OscConfig+0x5e>
 8006d70:	4b8c      	ldr	r3, [pc, #560]	@ (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d7c:	d10b      	bne.n	8006d96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d7e:	4b89      	ldr	r3, [pc, #548]	@ (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d06c      	beq.n	8006e64 <HAL_RCC_OscConfig+0x12c>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d168      	bne.n	8006e64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e24c      	b.n	8007230 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d9e:	d106      	bne.n	8006dae <HAL_RCC_OscConfig+0x76>
 8006da0:	4b80      	ldr	r3, [pc, #512]	@ (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a7f      	ldr	r2, [pc, #508]	@ (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006da6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006daa:	6013      	str	r3, [r2, #0]
 8006dac:	e02e      	b.n	8006e0c <HAL_RCC_OscConfig+0xd4>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d10c      	bne.n	8006dd0 <HAL_RCC_OscConfig+0x98>
 8006db6:	4b7b      	ldr	r3, [pc, #492]	@ (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a7a      	ldr	r2, [pc, #488]	@ (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006dbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dc0:	6013      	str	r3, [r2, #0]
 8006dc2:	4b78      	ldr	r3, [pc, #480]	@ (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a77      	ldr	r2, [pc, #476]	@ (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006dc8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006dcc:	6013      	str	r3, [r2, #0]
 8006dce:	e01d      	b.n	8006e0c <HAL_RCC_OscConfig+0xd4>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006dd8:	d10c      	bne.n	8006df4 <HAL_RCC_OscConfig+0xbc>
 8006dda:	4b72      	ldr	r3, [pc, #456]	@ (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a71      	ldr	r2, [pc, #452]	@ (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006de0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006de4:	6013      	str	r3, [r2, #0]
 8006de6:	4b6f      	ldr	r3, [pc, #444]	@ (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a6e      	ldr	r2, [pc, #440]	@ (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006dec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006df0:	6013      	str	r3, [r2, #0]
 8006df2:	e00b      	b.n	8006e0c <HAL_RCC_OscConfig+0xd4>
 8006df4:	4b6b      	ldr	r3, [pc, #428]	@ (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a6a      	ldr	r2, [pc, #424]	@ (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006dfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dfe:	6013      	str	r3, [r2, #0]
 8006e00:	4b68      	ldr	r3, [pc, #416]	@ (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a67      	ldr	r2, [pc, #412]	@ (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006e06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d013      	beq.n	8006e3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e14:	f7ff fc26 	bl	8006664 <HAL_GetTick>
 8006e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e1a:	e008      	b.n	8006e2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e1c:	f7ff fc22 	bl	8006664 <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	2b64      	cmp	r3, #100	@ 0x64
 8006e28:	d901      	bls.n	8006e2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e200      	b.n	8007230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e2e:	4b5d      	ldr	r3, [pc, #372]	@ (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d0f0      	beq.n	8006e1c <HAL_RCC_OscConfig+0xe4>
 8006e3a:	e014      	b.n	8006e66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e3c:	f7ff fc12 	bl	8006664 <HAL_GetTick>
 8006e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e42:	e008      	b.n	8006e56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e44:	f7ff fc0e 	bl	8006664 <HAL_GetTick>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	2b64      	cmp	r3, #100	@ 0x64
 8006e50:	d901      	bls.n	8006e56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e1ec      	b.n	8007230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e56:	4b53      	ldr	r3, [pc, #332]	@ (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1f0      	bne.n	8006e44 <HAL_RCC_OscConfig+0x10c>
 8006e62:	e000      	b.n	8006e66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0302 	and.w	r3, r3, #2
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d063      	beq.n	8006f3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006e72:	4b4c      	ldr	r3, [pc, #304]	@ (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f003 030c 	and.w	r3, r3, #12
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00b      	beq.n	8006e96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006e7e:	4b49      	ldr	r3, [pc, #292]	@ (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	f003 030c 	and.w	r3, r3, #12
 8006e86:	2b08      	cmp	r3, #8
 8006e88:	d11c      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x18c>
 8006e8a:	4b46      	ldr	r3, [pc, #280]	@ (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d116      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e96:	4b43      	ldr	r3, [pc, #268]	@ (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0302 	and.w	r3, r3, #2
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d005      	beq.n	8006eae <HAL_RCC_OscConfig+0x176>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d001      	beq.n	8006eae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e1c0      	b.n	8007230 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006eae:	4b3d      	ldr	r3, [pc, #244]	@ (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	00db      	lsls	r3, r3, #3
 8006ebc:	4939      	ldr	r1, [pc, #228]	@ (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ec2:	e03a      	b.n	8006f3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d020      	beq.n	8006f0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ecc:	4b36      	ldr	r3, [pc, #216]	@ (8006fa8 <HAL_RCC_OscConfig+0x270>)
 8006ece:	2201      	movs	r2, #1
 8006ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ed2:	f7ff fbc7 	bl	8006664 <HAL_GetTick>
 8006ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ed8:	e008      	b.n	8006eec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006eda:	f7ff fbc3 	bl	8006664 <HAL_GetTick>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d901      	bls.n	8006eec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e1a1      	b.n	8007230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006eec:	4b2d      	ldr	r3, [pc, #180]	@ (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 0302 	and.w	r3, r3, #2
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d0f0      	beq.n	8006eda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ef8:	4b2a      	ldr	r3, [pc, #168]	@ (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	695b      	ldr	r3, [r3, #20]
 8006f04:	00db      	lsls	r3, r3, #3
 8006f06:	4927      	ldr	r1, [pc, #156]	@ (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	600b      	str	r3, [r1, #0]
 8006f0c:	e015      	b.n	8006f3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f0e:	4b26      	ldr	r3, [pc, #152]	@ (8006fa8 <HAL_RCC_OscConfig+0x270>)
 8006f10:	2200      	movs	r2, #0
 8006f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f14:	f7ff fba6 	bl	8006664 <HAL_GetTick>
 8006f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f1a:	e008      	b.n	8006f2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f1c:	f7ff fba2 	bl	8006664 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d901      	bls.n	8006f2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e180      	b.n	8007230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f2e:	4b1d      	ldr	r3, [pc, #116]	@ (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 0302 	and.w	r3, r3, #2
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1f0      	bne.n	8006f1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 0308 	and.w	r3, r3, #8
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d03a      	beq.n	8006fbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d019      	beq.n	8006f82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f4e:	4b17      	ldr	r3, [pc, #92]	@ (8006fac <HAL_RCC_OscConfig+0x274>)
 8006f50:	2201      	movs	r2, #1
 8006f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f54:	f7ff fb86 	bl	8006664 <HAL_GetTick>
 8006f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f5a:	e008      	b.n	8006f6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f5c:	f7ff fb82 	bl	8006664 <HAL_GetTick>
 8006f60:	4602      	mov	r2, r0
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d901      	bls.n	8006f6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e160      	b.n	8007230 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f72:	f003 0302 	and.w	r3, r3, #2
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d0f0      	beq.n	8006f5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006f7a:	2001      	movs	r0, #1
 8006f7c:	f000 fabc 	bl	80074f8 <RCC_Delay>
 8006f80:	e01c      	b.n	8006fbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f82:	4b0a      	ldr	r3, [pc, #40]	@ (8006fac <HAL_RCC_OscConfig+0x274>)
 8006f84:	2200      	movs	r2, #0
 8006f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f88:	f7ff fb6c 	bl	8006664 <HAL_GetTick>
 8006f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f8e:	e00f      	b.n	8006fb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f90:	f7ff fb68 	bl	8006664 <HAL_GetTick>
 8006f94:	4602      	mov	r2, r0
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d908      	bls.n	8006fb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e146      	b.n	8007230 <HAL_RCC_OscConfig+0x4f8>
 8006fa2:	bf00      	nop
 8006fa4:	40021000 	.word	0x40021000
 8006fa8:	42420000 	.word	0x42420000
 8006fac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fb0:	4b92      	ldr	r3, [pc, #584]	@ (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb4:	f003 0302 	and.w	r3, r3, #2
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1e9      	bne.n	8006f90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0304 	and.w	r3, r3, #4
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 80a6 	beq.w	8007116 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fce:	4b8b      	ldr	r3, [pc, #556]	@ (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8006fd0:	69db      	ldr	r3, [r3, #28]
 8006fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10d      	bne.n	8006ff6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fda:	4b88      	ldr	r3, [pc, #544]	@ (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8006fdc:	69db      	ldr	r3, [r3, #28]
 8006fde:	4a87      	ldr	r2, [pc, #540]	@ (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8006fe0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fe4:	61d3      	str	r3, [r2, #28]
 8006fe6:	4b85      	ldr	r3, [pc, #532]	@ (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8006fe8:	69db      	ldr	r3, [r3, #28]
 8006fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fee:	60bb      	str	r3, [r7, #8]
 8006ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ff6:	4b82      	ldr	r3, [pc, #520]	@ (8007200 <HAL_RCC_OscConfig+0x4c8>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d118      	bne.n	8007034 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007002:	4b7f      	ldr	r3, [pc, #508]	@ (8007200 <HAL_RCC_OscConfig+0x4c8>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a7e      	ldr	r2, [pc, #504]	@ (8007200 <HAL_RCC_OscConfig+0x4c8>)
 8007008:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800700c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800700e:	f7ff fb29 	bl	8006664 <HAL_GetTick>
 8007012:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007014:	e008      	b.n	8007028 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007016:	f7ff fb25 	bl	8006664 <HAL_GetTick>
 800701a:	4602      	mov	r2, r0
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	2b64      	cmp	r3, #100	@ 0x64
 8007022:	d901      	bls.n	8007028 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007024:	2303      	movs	r3, #3
 8007026:	e103      	b.n	8007230 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007028:	4b75      	ldr	r3, [pc, #468]	@ (8007200 <HAL_RCC_OscConfig+0x4c8>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007030:	2b00      	cmp	r3, #0
 8007032:	d0f0      	beq.n	8007016 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d106      	bne.n	800704a <HAL_RCC_OscConfig+0x312>
 800703c:	4b6f      	ldr	r3, [pc, #444]	@ (80071fc <HAL_RCC_OscConfig+0x4c4>)
 800703e:	6a1b      	ldr	r3, [r3, #32]
 8007040:	4a6e      	ldr	r2, [pc, #440]	@ (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8007042:	f043 0301 	orr.w	r3, r3, #1
 8007046:	6213      	str	r3, [r2, #32]
 8007048:	e02d      	b.n	80070a6 <HAL_RCC_OscConfig+0x36e>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10c      	bne.n	800706c <HAL_RCC_OscConfig+0x334>
 8007052:	4b6a      	ldr	r3, [pc, #424]	@ (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8007054:	6a1b      	ldr	r3, [r3, #32]
 8007056:	4a69      	ldr	r2, [pc, #420]	@ (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8007058:	f023 0301 	bic.w	r3, r3, #1
 800705c:	6213      	str	r3, [r2, #32]
 800705e:	4b67      	ldr	r3, [pc, #412]	@ (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8007060:	6a1b      	ldr	r3, [r3, #32]
 8007062:	4a66      	ldr	r2, [pc, #408]	@ (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8007064:	f023 0304 	bic.w	r3, r3, #4
 8007068:	6213      	str	r3, [r2, #32]
 800706a:	e01c      	b.n	80070a6 <HAL_RCC_OscConfig+0x36e>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	2b05      	cmp	r3, #5
 8007072:	d10c      	bne.n	800708e <HAL_RCC_OscConfig+0x356>
 8007074:	4b61      	ldr	r3, [pc, #388]	@ (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	4a60      	ldr	r2, [pc, #384]	@ (80071fc <HAL_RCC_OscConfig+0x4c4>)
 800707a:	f043 0304 	orr.w	r3, r3, #4
 800707e:	6213      	str	r3, [r2, #32]
 8007080:	4b5e      	ldr	r3, [pc, #376]	@ (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8007082:	6a1b      	ldr	r3, [r3, #32]
 8007084:	4a5d      	ldr	r2, [pc, #372]	@ (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8007086:	f043 0301 	orr.w	r3, r3, #1
 800708a:	6213      	str	r3, [r2, #32]
 800708c:	e00b      	b.n	80070a6 <HAL_RCC_OscConfig+0x36e>
 800708e:	4b5b      	ldr	r3, [pc, #364]	@ (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	4a5a      	ldr	r2, [pc, #360]	@ (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8007094:	f023 0301 	bic.w	r3, r3, #1
 8007098:	6213      	str	r3, [r2, #32]
 800709a:	4b58      	ldr	r3, [pc, #352]	@ (80071fc <HAL_RCC_OscConfig+0x4c4>)
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	4a57      	ldr	r2, [pc, #348]	@ (80071fc <HAL_RCC_OscConfig+0x4c4>)
 80070a0:	f023 0304 	bic.w	r3, r3, #4
 80070a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d015      	beq.n	80070da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070ae:	f7ff fad9 	bl	8006664 <HAL_GetTick>
 80070b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070b4:	e00a      	b.n	80070cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070b6:	f7ff fad5 	bl	8006664 <HAL_GetTick>
 80070ba:	4602      	mov	r2, r0
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d901      	bls.n	80070cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e0b1      	b.n	8007230 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070cc:	4b4b      	ldr	r3, [pc, #300]	@ (80071fc <HAL_RCC_OscConfig+0x4c4>)
 80070ce:	6a1b      	ldr	r3, [r3, #32]
 80070d0:	f003 0302 	and.w	r3, r3, #2
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d0ee      	beq.n	80070b6 <HAL_RCC_OscConfig+0x37e>
 80070d8:	e014      	b.n	8007104 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070da:	f7ff fac3 	bl	8006664 <HAL_GetTick>
 80070de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070e0:	e00a      	b.n	80070f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070e2:	f7ff fabf 	bl	8006664 <HAL_GetTick>
 80070e6:	4602      	mov	r2, r0
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d901      	bls.n	80070f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e09b      	b.n	8007230 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070f8:	4b40      	ldr	r3, [pc, #256]	@ (80071fc <HAL_RCC_OscConfig+0x4c4>)
 80070fa:	6a1b      	ldr	r3, [r3, #32]
 80070fc:	f003 0302 	and.w	r3, r3, #2
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1ee      	bne.n	80070e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007104:	7dfb      	ldrb	r3, [r7, #23]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d105      	bne.n	8007116 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800710a:	4b3c      	ldr	r3, [pc, #240]	@ (80071fc <HAL_RCC_OscConfig+0x4c4>)
 800710c:	69db      	ldr	r3, [r3, #28]
 800710e:	4a3b      	ldr	r2, [pc, #236]	@ (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8007110:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007114:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	69db      	ldr	r3, [r3, #28]
 800711a:	2b00      	cmp	r3, #0
 800711c:	f000 8087 	beq.w	800722e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007120:	4b36      	ldr	r3, [pc, #216]	@ (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	f003 030c 	and.w	r3, r3, #12
 8007128:	2b08      	cmp	r3, #8
 800712a:	d061      	beq.n	80071f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	69db      	ldr	r3, [r3, #28]
 8007130:	2b02      	cmp	r3, #2
 8007132:	d146      	bne.n	80071c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007134:	4b33      	ldr	r3, [pc, #204]	@ (8007204 <HAL_RCC_OscConfig+0x4cc>)
 8007136:	2200      	movs	r2, #0
 8007138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800713a:	f7ff fa93 	bl	8006664 <HAL_GetTick>
 800713e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007140:	e008      	b.n	8007154 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007142:	f7ff fa8f 	bl	8006664 <HAL_GetTick>
 8007146:	4602      	mov	r2, r0
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	2b02      	cmp	r3, #2
 800714e:	d901      	bls.n	8007154 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e06d      	b.n	8007230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007154:	4b29      	ldr	r3, [pc, #164]	@ (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1f0      	bne.n	8007142 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a1b      	ldr	r3, [r3, #32]
 8007164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007168:	d108      	bne.n	800717c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800716a:	4b24      	ldr	r3, [pc, #144]	@ (80071fc <HAL_RCC_OscConfig+0x4c4>)
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	4921      	ldr	r1, [pc, #132]	@ (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8007178:	4313      	orrs	r3, r2
 800717a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800717c:	4b1f      	ldr	r3, [pc, #124]	@ (80071fc <HAL_RCC_OscConfig+0x4c4>)
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a19      	ldr	r1, [r3, #32]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800718c:	430b      	orrs	r3, r1
 800718e:	491b      	ldr	r1, [pc, #108]	@ (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8007190:	4313      	orrs	r3, r2
 8007192:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007194:	4b1b      	ldr	r3, [pc, #108]	@ (8007204 <HAL_RCC_OscConfig+0x4cc>)
 8007196:	2201      	movs	r2, #1
 8007198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800719a:	f7ff fa63 	bl	8006664 <HAL_GetTick>
 800719e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80071a0:	e008      	b.n	80071b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071a2:	f7ff fa5f 	bl	8006664 <HAL_GetTick>
 80071a6:	4602      	mov	r2, r0
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d901      	bls.n	80071b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	e03d      	b.n	8007230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80071b4:	4b11      	ldr	r3, [pc, #68]	@ (80071fc <HAL_RCC_OscConfig+0x4c4>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d0f0      	beq.n	80071a2 <HAL_RCC_OscConfig+0x46a>
 80071c0:	e035      	b.n	800722e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071c2:	4b10      	ldr	r3, [pc, #64]	@ (8007204 <HAL_RCC_OscConfig+0x4cc>)
 80071c4:	2200      	movs	r2, #0
 80071c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071c8:	f7ff fa4c 	bl	8006664 <HAL_GetTick>
 80071cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80071ce:	e008      	b.n	80071e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071d0:	f7ff fa48 	bl	8006664 <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d901      	bls.n	80071e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e026      	b.n	8007230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80071e2:	4b06      	ldr	r3, [pc, #24]	@ (80071fc <HAL_RCC_OscConfig+0x4c4>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1f0      	bne.n	80071d0 <HAL_RCC_OscConfig+0x498>
 80071ee:	e01e      	b.n	800722e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	69db      	ldr	r3, [r3, #28]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d107      	bne.n	8007208 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e019      	b.n	8007230 <HAL_RCC_OscConfig+0x4f8>
 80071fc:	40021000 	.word	0x40021000
 8007200:	40007000 	.word	0x40007000
 8007204:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007208:	4b0b      	ldr	r3, [pc, #44]	@ (8007238 <HAL_RCC_OscConfig+0x500>)
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	429a      	cmp	r2, r3
 800721a:	d106      	bne.n	800722a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007226:	429a      	cmp	r2, r3
 8007228:	d001      	beq.n	800722e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e000      	b.n	8007230 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3718      	adds	r7, #24
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	40021000 	.word	0x40021000

0800723c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d101      	bne.n	8007250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	e0d0      	b.n	80073f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007250:	4b6a      	ldr	r3, [pc, #424]	@ (80073fc <HAL_RCC_ClockConfig+0x1c0>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0307 	and.w	r3, r3, #7
 8007258:	683a      	ldr	r2, [r7, #0]
 800725a:	429a      	cmp	r2, r3
 800725c:	d910      	bls.n	8007280 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800725e:	4b67      	ldr	r3, [pc, #412]	@ (80073fc <HAL_RCC_ClockConfig+0x1c0>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f023 0207 	bic.w	r2, r3, #7
 8007266:	4965      	ldr	r1, [pc, #404]	@ (80073fc <HAL_RCC_ClockConfig+0x1c0>)
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	4313      	orrs	r3, r2
 800726c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800726e:	4b63      	ldr	r3, [pc, #396]	@ (80073fc <HAL_RCC_ClockConfig+0x1c0>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0307 	and.w	r3, r3, #7
 8007276:	683a      	ldr	r2, [r7, #0]
 8007278:	429a      	cmp	r2, r3
 800727a:	d001      	beq.n	8007280 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	e0b8      	b.n	80073f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0302 	and.w	r3, r3, #2
 8007288:	2b00      	cmp	r3, #0
 800728a:	d020      	beq.n	80072ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 0304 	and.w	r3, r3, #4
 8007294:	2b00      	cmp	r3, #0
 8007296:	d005      	beq.n	80072a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007298:	4b59      	ldr	r3, [pc, #356]	@ (8007400 <HAL_RCC_ClockConfig+0x1c4>)
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	4a58      	ldr	r2, [pc, #352]	@ (8007400 <HAL_RCC_ClockConfig+0x1c4>)
 800729e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80072a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0308 	and.w	r3, r3, #8
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d005      	beq.n	80072bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80072b0:	4b53      	ldr	r3, [pc, #332]	@ (8007400 <HAL_RCC_ClockConfig+0x1c4>)
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	4a52      	ldr	r2, [pc, #328]	@ (8007400 <HAL_RCC_ClockConfig+0x1c4>)
 80072b6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80072ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072bc:	4b50      	ldr	r3, [pc, #320]	@ (8007400 <HAL_RCC_ClockConfig+0x1c4>)
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	494d      	ldr	r1, [pc, #308]	@ (8007400 <HAL_RCC_ClockConfig+0x1c4>)
 80072ca:	4313      	orrs	r3, r2
 80072cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d040      	beq.n	800735c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d107      	bne.n	80072f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072e2:	4b47      	ldr	r3, [pc, #284]	@ (8007400 <HAL_RCC_ClockConfig+0x1c4>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d115      	bne.n	800731a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e07f      	b.n	80073f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	2b02      	cmp	r3, #2
 80072f8:	d107      	bne.n	800730a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072fa:	4b41      	ldr	r3, [pc, #260]	@ (8007400 <HAL_RCC_ClockConfig+0x1c4>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007302:	2b00      	cmp	r3, #0
 8007304:	d109      	bne.n	800731a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e073      	b.n	80073f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800730a:	4b3d      	ldr	r3, [pc, #244]	@ (8007400 <HAL_RCC_ClockConfig+0x1c4>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 0302 	and.w	r3, r3, #2
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e06b      	b.n	80073f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800731a:	4b39      	ldr	r3, [pc, #228]	@ (8007400 <HAL_RCC_ClockConfig+0x1c4>)
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	f023 0203 	bic.w	r2, r3, #3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	4936      	ldr	r1, [pc, #216]	@ (8007400 <HAL_RCC_ClockConfig+0x1c4>)
 8007328:	4313      	orrs	r3, r2
 800732a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800732c:	f7ff f99a 	bl	8006664 <HAL_GetTick>
 8007330:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007332:	e00a      	b.n	800734a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007334:	f7ff f996 	bl	8006664 <HAL_GetTick>
 8007338:	4602      	mov	r2, r0
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007342:	4293      	cmp	r3, r2
 8007344:	d901      	bls.n	800734a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007346:	2303      	movs	r3, #3
 8007348:	e053      	b.n	80073f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800734a:	4b2d      	ldr	r3, [pc, #180]	@ (8007400 <HAL_RCC_ClockConfig+0x1c4>)
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	f003 020c 	and.w	r2, r3, #12
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	429a      	cmp	r2, r3
 800735a:	d1eb      	bne.n	8007334 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800735c:	4b27      	ldr	r3, [pc, #156]	@ (80073fc <HAL_RCC_ClockConfig+0x1c0>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 0307 	and.w	r3, r3, #7
 8007364:	683a      	ldr	r2, [r7, #0]
 8007366:	429a      	cmp	r2, r3
 8007368:	d210      	bcs.n	800738c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800736a:	4b24      	ldr	r3, [pc, #144]	@ (80073fc <HAL_RCC_ClockConfig+0x1c0>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f023 0207 	bic.w	r2, r3, #7
 8007372:	4922      	ldr	r1, [pc, #136]	@ (80073fc <HAL_RCC_ClockConfig+0x1c0>)
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	4313      	orrs	r3, r2
 8007378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800737a:	4b20      	ldr	r3, [pc, #128]	@ (80073fc <HAL_RCC_ClockConfig+0x1c0>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 0307 	and.w	r3, r3, #7
 8007382:	683a      	ldr	r2, [r7, #0]
 8007384:	429a      	cmp	r2, r3
 8007386:	d001      	beq.n	800738c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	e032      	b.n	80073f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 0304 	and.w	r3, r3, #4
 8007394:	2b00      	cmp	r3, #0
 8007396:	d008      	beq.n	80073aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007398:	4b19      	ldr	r3, [pc, #100]	@ (8007400 <HAL_RCC_ClockConfig+0x1c4>)
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	4916      	ldr	r1, [pc, #88]	@ (8007400 <HAL_RCC_ClockConfig+0x1c4>)
 80073a6:	4313      	orrs	r3, r2
 80073a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0308 	and.w	r3, r3, #8
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d009      	beq.n	80073ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80073b6:	4b12      	ldr	r3, [pc, #72]	@ (8007400 <HAL_RCC_ClockConfig+0x1c4>)
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	00db      	lsls	r3, r3, #3
 80073c4:	490e      	ldr	r1, [pc, #56]	@ (8007400 <HAL_RCC_ClockConfig+0x1c4>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80073ca:	f000 f82d 	bl	8007428 <HAL_RCC_GetSysClockFreq>
 80073ce:	4602      	mov	r2, r0
 80073d0:	4b0b      	ldr	r3, [pc, #44]	@ (8007400 <HAL_RCC_ClockConfig+0x1c4>)
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	091b      	lsrs	r3, r3, #4
 80073d6:	f003 030f 	and.w	r3, r3, #15
 80073da:	490a      	ldr	r1, [pc, #40]	@ (8007404 <HAL_RCC_ClockConfig+0x1c8>)
 80073dc:	5ccb      	ldrb	r3, [r1, r3]
 80073de:	fa22 f303 	lsr.w	r3, r2, r3
 80073e2:	4a09      	ldr	r2, [pc, #36]	@ (8007408 <HAL_RCC_ClockConfig+0x1cc>)
 80073e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80073e6:	4b09      	ldr	r3, [pc, #36]	@ (800740c <HAL_RCC_ClockConfig+0x1d0>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7ff f8f8 	bl	80065e0 <HAL_InitTick>

  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	40022000 	.word	0x40022000
 8007400:	40021000 	.word	0x40021000
 8007404:	0800ed2c 	.word	0x0800ed2c
 8007408:	20000000 	.word	0x20000000
 800740c:	20000004 	.word	0x20000004

08007410 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007410:	b480      	push	{r7}
 8007412:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8007414:	4b03      	ldr	r3, [pc, #12]	@ (8007424 <HAL_RCC_EnableCSS+0x14>)
 8007416:	2201      	movs	r2, #1
 8007418:	601a      	str	r2, [r3, #0]
}
 800741a:	bf00      	nop
 800741c:	46bd      	mov	sp, r7
 800741e:	bc80      	pop	{r7}
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	4242004c 	.word	0x4242004c

08007428 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007428:	b480      	push	{r7}
 800742a:	b087      	sub	sp, #28
 800742c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800742e:	2300      	movs	r3, #0
 8007430:	60fb      	str	r3, [r7, #12]
 8007432:	2300      	movs	r3, #0
 8007434:	60bb      	str	r3, [r7, #8]
 8007436:	2300      	movs	r3, #0
 8007438:	617b      	str	r3, [r7, #20]
 800743a:	2300      	movs	r3, #0
 800743c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800743e:	2300      	movs	r3, #0
 8007440:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007442:	4b1e      	ldr	r3, [pc, #120]	@ (80074bc <HAL_RCC_GetSysClockFreq+0x94>)
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f003 030c 	and.w	r3, r3, #12
 800744e:	2b04      	cmp	r3, #4
 8007450:	d002      	beq.n	8007458 <HAL_RCC_GetSysClockFreq+0x30>
 8007452:	2b08      	cmp	r3, #8
 8007454:	d003      	beq.n	800745e <HAL_RCC_GetSysClockFreq+0x36>
 8007456:	e027      	b.n	80074a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007458:	4b19      	ldr	r3, [pc, #100]	@ (80074c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800745a:	613b      	str	r3, [r7, #16]
      break;
 800745c:	e027      	b.n	80074ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	0c9b      	lsrs	r3, r3, #18
 8007462:	f003 030f 	and.w	r3, r3, #15
 8007466:	4a17      	ldr	r2, [pc, #92]	@ (80074c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007468:	5cd3      	ldrb	r3, [r2, r3]
 800746a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007472:	2b00      	cmp	r3, #0
 8007474:	d010      	beq.n	8007498 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007476:	4b11      	ldr	r3, [pc, #68]	@ (80074bc <HAL_RCC_GetSysClockFreq+0x94>)
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	0c5b      	lsrs	r3, r3, #17
 800747c:	f003 0301 	and.w	r3, r3, #1
 8007480:	4a11      	ldr	r2, [pc, #68]	@ (80074c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007482:	5cd3      	ldrb	r3, [r2, r3]
 8007484:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a0d      	ldr	r2, [pc, #52]	@ (80074c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800748a:	fb03 f202 	mul.w	r2, r3, r2
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	fbb2 f3f3 	udiv	r3, r2, r3
 8007494:	617b      	str	r3, [r7, #20]
 8007496:	e004      	b.n	80074a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a0c      	ldr	r2, [pc, #48]	@ (80074cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800749c:	fb02 f303 	mul.w	r3, r2, r3
 80074a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	613b      	str	r3, [r7, #16]
      break;
 80074a6:	e002      	b.n	80074ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80074a8:	4b05      	ldr	r3, [pc, #20]	@ (80074c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80074aa:	613b      	str	r3, [r7, #16]
      break;
 80074ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80074ae:	693b      	ldr	r3, [r7, #16]
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	371c      	adds	r7, #28
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bc80      	pop	{r7}
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	40021000 	.word	0x40021000
 80074c0:	007a1200 	.word	0x007a1200
 80074c4:	0800ed3c 	.word	0x0800ed3c
 80074c8:	0800ed4c 	.word	0x0800ed4c
 80074cc:	003d0900 	.word	0x003d0900

080074d0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80074d4:	4b06      	ldr	r3, [pc, #24]	@ (80074f0 <HAL_RCC_NMI_IRQHandler+0x20>)
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074dc:	2b80      	cmp	r3, #128	@ 0x80
 80074de:	d104      	bne.n	80074ea <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80074e0:	f000 f828 	bl	8007534 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80074e4:	4b03      	ldr	r3, [pc, #12]	@ (80074f4 <HAL_RCC_NMI_IRQHandler+0x24>)
 80074e6:	2280      	movs	r2, #128	@ 0x80
 80074e8:	701a      	strb	r2, [r3, #0]
  }
}
 80074ea:	bf00      	nop
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	40021000 	.word	0x40021000
 80074f4:	4002100a 	.word	0x4002100a

080074f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007500:	4b0a      	ldr	r3, [pc, #40]	@ (800752c <RCC_Delay+0x34>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a0a      	ldr	r2, [pc, #40]	@ (8007530 <RCC_Delay+0x38>)
 8007506:	fba2 2303 	umull	r2, r3, r2, r3
 800750a:	0a5b      	lsrs	r3, r3, #9
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	fb02 f303 	mul.w	r3, r2, r3
 8007512:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007514:	bf00      	nop
  }
  while (Delay --);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	1e5a      	subs	r2, r3, #1
 800751a:	60fa      	str	r2, [r7, #12]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d1f9      	bne.n	8007514 <RCC_Delay+0x1c>
}
 8007520:	bf00      	nop
 8007522:	bf00      	nop
 8007524:	3714      	adds	r7, #20
 8007526:	46bd      	mov	sp, r7
 8007528:	bc80      	pop	{r7}
 800752a:	4770      	bx	lr
 800752c:	20000000 	.word	0x20000000
 8007530:	10624dd3 	.word	0x10624dd3

08007534 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8007534:	b480      	push	{r7}
 8007536:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8007538:	bf00      	nop
 800753a:	46bd      	mov	sp, r7
 800753c:	bc80      	pop	{r7}
 800753e:	4770      	bx	lr

08007540 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d101      	bne.n	8007552 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	e076      	b.n	8007640 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007556:	2b00      	cmp	r3, #0
 8007558:	d108      	bne.n	800756c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007562:	d009      	beq.n	8007578 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	61da      	str	r2, [r3, #28]
 800756a:	e005      	b.n	8007578 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007584:	b2db      	uxtb	r3, r3
 8007586:	2b00      	cmp	r3, #0
 8007588:	d106      	bne.n	8007598 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f7fe fe64 	bl	8006260 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2202      	movs	r2, #2
 800759c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80075c0:	431a      	orrs	r2, r3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075ca:	431a      	orrs	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	f003 0302 	and.w	r3, r3, #2
 80075d4:	431a      	orrs	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	695b      	ldr	r3, [r3, #20]
 80075da:	f003 0301 	and.w	r3, r3, #1
 80075de:	431a      	orrs	r2, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075e8:	431a      	orrs	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	69db      	ldr	r3, [r3, #28]
 80075ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80075f2:	431a      	orrs	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a1b      	ldr	r3, [r3, #32]
 80075f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075fc:	ea42 0103 	orr.w	r1, r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007604:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	430a      	orrs	r2, r1
 800760e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	0c1a      	lsrs	r2, r3, #16
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f002 0204 	and.w	r2, r2, #4
 800761e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	69da      	ldr	r2, [r3, #28]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800762e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3708      	adds	r7, #8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b088      	sub	sp, #32
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10e      	bne.n	8007688 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007670:	2b00      	cmp	r3, #0
 8007672:	d009      	beq.n	8007688 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800767a:	2b00      	cmp	r3, #0
 800767c:	d004      	beq.n	8007688 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	4798      	blx	r3
    return;
 8007686:	e0b7      	b.n	80077f8 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	f003 0302 	and.w	r3, r3, #2
 800768e:	2b00      	cmp	r3, #0
 8007690:	d009      	beq.n	80076a6 <HAL_SPI_IRQHandler+0x5e>
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007698:	2b00      	cmp	r3, #0
 800769a:	d004      	beq.n	80076a6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	4798      	blx	r3
    return;
 80076a4:	e0a8      	b.n	80077f8 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	f003 0320 	and.w	r3, r3, #32
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d105      	bne.n	80076bc <HAL_SPI_IRQHandler+0x74>
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f000 809e 	beq.w	80077f8 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	f003 0320 	and.w	r3, r3, #32
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	f000 8098 	beq.w	80077f8 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d023      	beq.n	800771a <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b03      	cmp	r3, #3
 80076dc:	d011      	beq.n	8007702 <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076e2:	f043 0204 	orr.w	r2, r3, #4
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076ea:	2300      	movs	r3, #0
 80076ec:	617b      	str	r3, [r7, #20]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	617b      	str	r3, [r7, #20]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	617b      	str	r3, [r7, #20]
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	e00b      	b.n	800771a <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007702:	2300      	movs	r3, #0
 8007704:	613b      	str	r3, [r7, #16]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	613b      	str	r3, [r7, #16]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	613b      	str	r3, [r7, #16]
 8007716:	693b      	ldr	r3, [r7, #16]
        return;
 8007718:	e06e      	b.n	80077f8 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	f003 0320 	and.w	r3, r3, #32
 8007720:	2b00      	cmp	r3, #0
 8007722:	d014      	beq.n	800774e <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007728:	f043 0201 	orr.w	r2, r3, #1
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007730:	2300      	movs	r3, #0
 8007732:	60fb      	str	r3, [r7, #12]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	60fb      	str	r3, [r7, #12]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800774a:	601a      	str	r2, [r3, #0]
 800774c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007752:	2b00      	cmp	r3, #0
 8007754:	d04f      	beq.n	80077f6 <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007764:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	f003 0302 	and.w	r3, r3, #2
 8007774:	2b00      	cmp	r3, #0
 8007776:	d104      	bne.n	8007782 <HAL_SPI_IRQHandler+0x13a>
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	f003 0301 	and.w	r3, r3, #1
 800777e:	2b00      	cmp	r3, #0
 8007780:	d034      	beq.n	80077ec <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	685a      	ldr	r2, [r3, #4]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f022 0203 	bic.w	r2, r2, #3
 8007790:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007796:	2b00      	cmp	r3, #0
 8007798:	d011      	beq.n	80077be <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800779e:	4a18      	ldr	r2, [pc, #96]	@ (8007800 <HAL_SPI_IRQHandler+0x1b8>)
 80077a0:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7ff f898 	bl	80068dc <HAL_DMA_Abort_IT>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d005      	beq.n	80077be <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d016      	beq.n	80077f4 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077ca:	4a0d      	ldr	r2, [pc, #52]	@ (8007800 <HAL_SPI_IRQHandler+0x1b8>)
 80077cc:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7ff f882 	bl	80068dc <HAL_DMA_Abort_IT>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00a      	beq.n	80077f4 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80077ea:	e003      	b.n	80077f4 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 f809 	bl	8007804 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80077f2:	e000      	b.n	80077f6 <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 80077f4:	bf00      	nop
    return;
 80077f6:	bf00      	nop
  }
}
 80077f8:	3720      	adds	r7, #32
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	08007817 	.word	0x08007817

08007804 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800780c:	bf00      	nop
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	bc80      	pop	{r7}
 8007814:	4770      	bx	lr

08007816 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b084      	sub	sp, #16
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007822:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f7ff ffe7 	bl	8007804 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007836:	bf00      	nop
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
	...

08007840 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007844:	4904      	ldr	r1, [pc, #16]	@ (8007858 <MX_FATFS_Init+0x18>)
 8007846:	4805      	ldr	r0, [pc, #20]	@ (800785c <MX_FATFS_Init+0x1c>)
 8007848:	f002 fdf0 	bl	800a42c <FATFS_LinkDriver>
 800784c:	4603      	mov	r3, r0
 800784e:	461a      	mov	r2, r3
 8007850:	4b03      	ldr	r3, [pc, #12]	@ (8007860 <MX_FATFS_Init+0x20>)
 8007852:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007854:	bf00      	nop
 8007856:	bd80      	pop	{r7, pc}
 8007858:	200036b0 	.word	0x200036b0
 800785c:	2000000c 	.word	0x2000000c
 8007860:	200036ac 	.word	0x200036ac

08007864 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007864:	b480      	push	{r7}
 8007866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007868:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800786a:	4618      	mov	r0, r3
 800786c:	46bd      	mov	sp, r7
 800786e:	bc80      	pop	{r7}
 8007870:	4770      	bx	lr
	...

08007874 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	4603      	mov	r3, r0
 800787c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800787e:	4b05      	ldr	r3, [pc, #20]	@ (8007894 <USER_initialize+0x20>)
 8007880:	2201      	movs	r2, #1
 8007882:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007884:	4b03      	ldr	r3, [pc, #12]	@ (8007894 <USER_initialize+0x20>)
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800788a:	4618      	mov	r0, r3
 800788c:	370c      	adds	r7, #12
 800788e:	46bd      	mov	sp, r7
 8007890:	bc80      	pop	{r7}
 8007892:	4770      	bx	lr
 8007894:	20000009 	.word	0x20000009

08007898 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	4603      	mov	r3, r0
 80078a0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80078a2:	4b05      	ldr	r3, [pc, #20]	@ (80078b8 <USER_status+0x20>)
 80078a4:	2201      	movs	r2, #1
 80078a6:	701a      	strb	r2, [r3, #0]
    return Stat;
 80078a8:	4b03      	ldr	r3, [pc, #12]	@ (80078b8 <USER_status+0x20>)
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	370c      	adds	r7, #12
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bc80      	pop	{r7}
 80078b6:	4770      	bx	lr
 80078b8:	20000009 	.word	0x20000009

080078bc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80078bc:	b480      	push	{r7}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60b9      	str	r1, [r7, #8]
 80078c4:	607a      	str	r2, [r7, #4]
 80078c6:	603b      	str	r3, [r7, #0]
 80078c8:	4603      	mov	r3, r0
 80078ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80078cc:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3714      	adds	r7, #20
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bc80      	pop	{r7}
 80078d6:	4770      	bx	lr

080078d8 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60b9      	str	r1, [r7, #8]
 80078e0:	607a      	str	r2, [r7, #4]
 80078e2:	603b      	str	r3, [r7, #0]
 80078e4:	4603      	mov	r3, r0
 80078e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80078e8:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3714      	adds	r7, #20
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bc80      	pop	{r7}
 80078f2:	4770      	bx	lr

080078f4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b085      	sub	sp, #20
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	4603      	mov	r3, r0
 80078fc:	603a      	str	r2, [r7, #0]
 80078fe:	71fb      	strb	r3, [r7, #7]
 8007900:	460b      	mov	r3, r1
 8007902:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	73fb      	strb	r3, [r7, #15]
    return res;
 8007908:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800790a:	4618      	mov	r0, r3
 800790c:	3714      	adds	r7, #20
 800790e:	46bd      	mov	sp, r7
 8007910:	bc80      	pop	{r7}
 8007912:	4770      	bx	lr

08007914 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	4603      	mov	r3, r0
 800791c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800791e:	79fb      	ldrb	r3, [r7, #7]
 8007920:	4a08      	ldr	r2, [pc, #32]	@ (8007944 <disk_status+0x30>)
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	4413      	add	r3, r2
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	79fa      	ldrb	r2, [r7, #7]
 800792c:	4905      	ldr	r1, [pc, #20]	@ (8007944 <disk_status+0x30>)
 800792e:	440a      	add	r2, r1
 8007930:	7a12      	ldrb	r2, [r2, #8]
 8007932:	4610      	mov	r0, r2
 8007934:	4798      	blx	r3
 8007936:	4603      	mov	r3, r0
 8007938:	73fb      	strb	r3, [r7, #15]
  return stat;
 800793a:	7bfb      	ldrb	r3, [r7, #15]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	200036d4 	.word	0x200036d4

08007948 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	4603      	mov	r3, r0
 8007950:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007952:	2300      	movs	r3, #0
 8007954:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8007956:	79fb      	ldrb	r3, [r7, #7]
 8007958:	4a0d      	ldr	r2, [pc, #52]	@ (8007990 <disk_initialize+0x48>)
 800795a:	5cd3      	ldrb	r3, [r2, r3]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d111      	bne.n	8007984 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8007960:	79fb      	ldrb	r3, [r7, #7]
 8007962:	4a0b      	ldr	r2, [pc, #44]	@ (8007990 <disk_initialize+0x48>)
 8007964:	2101      	movs	r1, #1
 8007966:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007968:	79fb      	ldrb	r3, [r7, #7]
 800796a:	4a09      	ldr	r2, [pc, #36]	@ (8007990 <disk_initialize+0x48>)
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	4413      	add	r3, r2
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	79fa      	ldrb	r2, [r7, #7]
 8007976:	4906      	ldr	r1, [pc, #24]	@ (8007990 <disk_initialize+0x48>)
 8007978:	440a      	add	r2, r1
 800797a:	7a12      	ldrb	r2, [r2, #8]
 800797c:	4610      	mov	r0, r2
 800797e:	4798      	blx	r3
 8007980:	4603      	mov	r3, r0
 8007982:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007984:	7bfb      	ldrb	r3, [r7, #15]
}
 8007986:	4618      	mov	r0, r3
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	200036d4 	.word	0x200036d4

08007994 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007994:	b590      	push	{r4, r7, lr}
 8007996:	b087      	sub	sp, #28
 8007998:	af00      	add	r7, sp, #0
 800799a:	60b9      	str	r1, [r7, #8]
 800799c:	607a      	str	r2, [r7, #4]
 800799e:	603b      	str	r3, [r7, #0]
 80079a0:	4603      	mov	r3, r0
 80079a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80079a4:	7bfb      	ldrb	r3, [r7, #15]
 80079a6:	4a0a      	ldr	r2, [pc, #40]	@ (80079d0 <disk_read+0x3c>)
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4413      	add	r3, r2
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	689c      	ldr	r4, [r3, #8]
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
 80079b2:	4a07      	ldr	r2, [pc, #28]	@ (80079d0 <disk_read+0x3c>)
 80079b4:	4413      	add	r3, r2
 80079b6:	7a18      	ldrb	r0, [r3, #8]
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	68b9      	ldr	r1, [r7, #8]
 80079be:	47a0      	blx	r4
 80079c0:	4603      	mov	r3, r0
 80079c2:	75fb      	strb	r3, [r7, #23]
  return res;
 80079c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	371c      	adds	r7, #28
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd90      	pop	{r4, r7, pc}
 80079ce:	bf00      	nop
 80079d0:	200036d4 	.word	0x200036d4

080079d4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80079d4:	b590      	push	{r4, r7, lr}
 80079d6:	b087      	sub	sp, #28
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60b9      	str	r1, [r7, #8]
 80079dc:	607a      	str	r2, [r7, #4]
 80079de:	603b      	str	r3, [r7, #0]
 80079e0:	4603      	mov	r3, r0
 80079e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80079e4:	7bfb      	ldrb	r3, [r7, #15]
 80079e6:	4a0a      	ldr	r2, [pc, #40]	@ (8007a10 <disk_write+0x3c>)
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	4413      	add	r3, r2
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	68dc      	ldr	r4, [r3, #12]
 80079f0:	7bfb      	ldrb	r3, [r7, #15]
 80079f2:	4a07      	ldr	r2, [pc, #28]	@ (8007a10 <disk_write+0x3c>)
 80079f4:	4413      	add	r3, r2
 80079f6:	7a18      	ldrb	r0, [r3, #8]
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	68b9      	ldr	r1, [r7, #8]
 80079fe:	47a0      	blx	r4
 8007a00:	4603      	mov	r3, r0
 8007a02:	75fb      	strb	r3, [r7, #23]
  return res;
 8007a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	371c      	adds	r7, #28
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd90      	pop	{r4, r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	200036d4 	.word	0x200036d4

08007a14 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	603a      	str	r2, [r7, #0]
 8007a1e:	71fb      	strb	r3, [r7, #7]
 8007a20:	460b      	mov	r3, r1
 8007a22:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007a24:	79fb      	ldrb	r3, [r7, #7]
 8007a26:	4a09      	ldr	r2, [pc, #36]	@ (8007a4c <disk_ioctl+0x38>)
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	4413      	add	r3, r2
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	79fa      	ldrb	r2, [r7, #7]
 8007a32:	4906      	ldr	r1, [pc, #24]	@ (8007a4c <disk_ioctl+0x38>)
 8007a34:	440a      	add	r2, r1
 8007a36:	7a10      	ldrb	r0, [r2, #8]
 8007a38:	79b9      	ldrb	r1, [r7, #6]
 8007a3a:	683a      	ldr	r2, [r7, #0]
 8007a3c:	4798      	blx	r3
 8007a3e:	4603      	mov	r3, r0
 8007a40:	73fb      	strb	r3, [r7, #15]
  return res;
 8007a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	200036d4 	.word	0x200036d4

08007a50 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007a50:	b480      	push	{r7}
 8007a52:	b087      	sub	sp, #28
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8007a64:	e007      	b.n	8007a76 <mem_cpy+0x26>
		*d++ = *s++;
 8007a66:	693a      	ldr	r2, [r7, #16]
 8007a68:	1c53      	adds	r3, r2, #1
 8007a6a:	613b      	str	r3, [r7, #16]
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	1c59      	adds	r1, r3, #1
 8007a70:	6179      	str	r1, [r7, #20]
 8007a72:	7812      	ldrb	r2, [r2, #0]
 8007a74:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	1e5a      	subs	r2, r3, #1
 8007a7a:	607a      	str	r2, [r7, #4]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1f2      	bne.n	8007a66 <mem_cpy+0x16>
}
 8007a80:	bf00      	nop
 8007a82:	bf00      	nop
 8007a84:	371c      	adds	r7, #28
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bc80      	pop	{r7}
 8007a8a:	4770      	bx	lr

08007a8c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007a8c:	b480      	push	{r7}
 8007a8e:	b087      	sub	sp, #28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8007a9c:	e005      	b.n	8007aaa <mem_set+0x1e>
		*d++ = (BYTE)val;
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	1c5a      	adds	r2, r3, #1
 8007aa2:	617a      	str	r2, [r7, #20]
 8007aa4:	68ba      	ldr	r2, [r7, #8]
 8007aa6:	b2d2      	uxtb	r2, r2
 8007aa8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	1e5a      	subs	r2, r3, #1
 8007aae:	607a      	str	r2, [r7, #4]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1f4      	bne.n	8007a9e <mem_set+0x12>
}
 8007ab4:	bf00      	nop
 8007ab6:	bf00      	nop
 8007ab8:	371c      	adds	r7, #28
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bc80      	pop	{r7}
 8007abe:	4770      	bx	lr

08007ac0 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8007ac0:	b480      	push	{r7}
 8007ac2:	b089      	sub	sp, #36	@ 0x24
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	61fb      	str	r3, [r7, #28]
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8007ad8:	bf00      	nop
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	1e5a      	subs	r2, r3, #1
 8007ade:	607a      	str	r2, [r7, #4]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00d      	beq.n	8007b00 <mem_cmp+0x40>
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	1c5a      	adds	r2, r3, #1
 8007ae8:	61fa      	str	r2, [r7, #28]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	4619      	mov	r1, r3
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	1c5a      	adds	r2, r3, #1
 8007af2:	61ba      	str	r2, [r7, #24]
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	1acb      	subs	r3, r1, r3
 8007af8:	617b      	str	r3, [r7, #20]
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d0ec      	beq.n	8007ada <mem_cmp+0x1a>
	return r;
 8007b00:	697b      	ldr	r3, [r7, #20]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3724      	adds	r7, #36	@ 0x24
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bc80      	pop	{r7}
 8007b0a:	4770      	bx	lr

08007b0c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007b16:	e002      	b.n	8007b1e <chk_chr+0x12>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	607b      	str	r3, [r7, #4]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d005      	beq.n	8007b32 <chk_chr+0x26>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d1f2      	bne.n	8007b18 <chk_chr+0xc>
	return *str;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	781b      	ldrb	r3, [r3, #0]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	370c      	adds	r7, #12
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bc80      	pop	{r7}
 8007b3e:	4770      	bx	lr

08007b40 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	60bb      	str	r3, [r7, #8]
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	60fb      	str	r3, [r7, #12]
 8007b52:	e038      	b.n	8007bc6 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8007b54:	492f      	ldr	r1, [pc, #188]	@ (8007c14 <chk_lock+0xd4>)
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	4613      	mov	r3, r2
 8007b5a:	005b      	lsls	r3, r3, #1
 8007b5c:	4413      	add	r3, r2
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	440b      	add	r3, r1
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d029      	beq.n	8007bbc <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8007b68:	492a      	ldr	r1, [pc, #168]	@ (8007c14 <chk_lock+0xd4>)
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	005b      	lsls	r3, r3, #1
 8007b70:	4413      	add	r3, r2
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	440b      	add	r3, r1
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d11e      	bne.n	8007bc0 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8007b82:	4924      	ldr	r1, [pc, #144]	@ (8007c14 <chk_lock+0xd4>)
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	4613      	mov	r3, r2
 8007b88:	005b      	lsls	r3, r3, #1
 8007b8a:	4413      	add	r3, r2
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	440b      	add	r3, r1
 8007b90:	3304      	adds	r3, #4
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d110      	bne.n	8007bc0 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8007b9e:	491d      	ldr	r1, [pc, #116]	@ (8007c14 <chk_lock+0xd4>)
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	005b      	lsls	r3, r3, #1
 8007ba6:	4413      	add	r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	440b      	add	r3, r1
 8007bac:	3308      	adds	r3, #8
 8007bae:	881a      	ldrh	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
				Files[i].clu == dp->sclust &&
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d102      	bne.n	8007bc0 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8007bba:	e007      	b.n	8007bcc <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	60fb      	str	r3, [r7, #12]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d9c3      	bls.n	8007b54 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d109      	bne.n	8007be6 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d102      	bne.n	8007bde <chk_lock+0x9e>
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d101      	bne.n	8007be2 <chk_lock+0xa2>
 8007bde:	2300      	movs	r3, #0
 8007be0:	e013      	b.n	8007c0a <chk_lock+0xca>
 8007be2:	2312      	movs	r3, #18
 8007be4:	e011      	b.n	8007c0a <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d10b      	bne.n	8007c04 <chk_lock+0xc4>
 8007bec:	4909      	ldr	r1, [pc, #36]	@ (8007c14 <chk_lock+0xd4>)
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	005b      	lsls	r3, r3, #1
 8007bf4:	4413      	add	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	440b      	add	r3, r1
 8007bfa:	330a      	adds	r3, #10
 8007bfc:	881b      	ldrh	r3, [r3, #0]
 8007bfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c02:	d101      	bne.n	8007c08 <chk_lock+0xc8>
 8007c04:	2310      	movs	r3, #16
 8007c06:	e000      	b.n	8007c0a <chk_lock+0xca>
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3714      	adds	r7, #20
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bc80      	pop	{r7}
 8007c12:	4770      	bx	lr
 8007c14:	200036bc 	.word	0x200036bc

08007c18 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	607b      	str	r3, [r7, #4]
 8007c22:	e002      	b.n	8007c2a <enq_lock+0x12>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	3301      	adds	r3, #1
 8007c28:	607b      	str	r3, [r7, #4]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d809      	bhi.n	8007c44 <enq_lock+0x2c>
 8007c30:	490a      	ldr	r1, [pc, #40]	@ (8007c5c <enq_lock+0x44>)
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	4613      	mov	r3, r2
 8007c36:	005b      	lsls	r3, r3, #1
 8007c38:	4413      	add	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	440b      	add	r3, r1
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d1ef      	bne.n	8007c24 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	bf14      	ite	ne
 8007c4a:	2301      	movne	r3, #1
 8007c4c:	2300      	moveq	r3, #0
 8007c4e:	b2db      	uxtb	r3, r3
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bc80      	pop	{r7}
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	200036bc 	.word	0x200036bc

08007c60 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b085      	sub	sp, #20
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	60fb      	str	r3, [r7, #12]
 8007c6e:	e02b      	b.n	8007cc8 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8007c70:	4955      	ldr	r1, [pc, #340]	@ (8007dc8 <inc_lock+0x168>)
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	4613      	mov	r3, r2
 8007c76:	005b      	lsls	r3, r3, #1
 8007c78:	4413      	add	r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	440b      	add	r3, r1
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d11b      	bne.n	8007cc2 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8007c8a:	494f      	ldr	r1, [pc, #316]	@ (8007dc8 <inc_lock+0x168>)
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	4613      	mov	r3, r2
 8007c90:	005b      	lsls	r3, r3, #1
 8007c92:	4413      	add	r3, r2
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	440b      	add	r3, r1
 8007c98:	3304      	adds	r3, #4
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
		if (Files[i].fs == dp->fs &&
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d10d      	bne.n	8007cc2 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8007ca6:	4948      	ldr	r1, [pc, #288]	@ (8007dc8 <inc_lock+0x168>)
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	4613      	mov	r3, r2
 8007cac:	005b      	lsls	r3, r3, #1
 8007cae:	4413      	add	r3, r2
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	440b      	add	r3, r1
 8007cb4:	3308      	adds	r3, #8
 8007cb6:	881a      	ldrh	r2, [r3, #0]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
			Files[i].clu == dp->sclust &&
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d006      	beq.n	8007cd0 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	60fb      	str	r3, [r7, #12]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d9d0      	bls.n	8007c70 <inc_lock+0x10>
 8007cce:	e000      	b.n	8007cd2 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8007cd0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	d145      	bne.n	8007d64 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	60fb      	str	r3, [r7, #12]
 8007cdc:	e002      	b.n	8007ce4 <inc_lock+0x84>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	60fb      	str	r3, [r7, #12]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d809      	bhi.n	8007cfe <inc_lock+0x9e>
 8007cea:	4937      	ldr	r1, [pc, #220]	@ (8007dc8 <inc_lock+0x168>)
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	4613      	mov	r3, r2
 8007cf0:	005b      	lsls	r3, r3, #1
 8007cf2:	4413      	add	r3, r2
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	440b      	add	r3, r1
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1ef      	bne.n	8007cde <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d101      	bne.n	8007d08 <inc_lock+0xa8>
 8007d04:	2300      	movs	r3, #0
 8007d06:	e05a      	b.n	8007dbe <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 1200 	ldr.w	r1, [r3, #512]	@ 0x200
 8007d0e:	482e      	ldr	r0, [pc, #184]	@ (8007dc8 <inc_lock+0x168>)
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	4613      	mov	r3, r2
 8007d14:	005b      	lsls	r3, r3, #1
 8007d16:	4413      	add	r3, r2
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	4403      	add	r3, r0
 8007d1c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 8007d24:	4828      	ldr	r0, [pc, #160]	@ (8007dc8 <inc_lock+0x168>)
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	4613      	mov	r3, r2
 8007d2a:	005b      	lsls	r3, r3, #1
 8007d2c:	4413      	add	r3, r2
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	4403      	add	r3, r0
 8007d32:	3304      	adds	r3, #4
 8007d34:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8b3 0206 	ldrh.w	r0, [r3, #518]	@ 0x206
 8007d3c:	4922      	ldr	r1, [pc, #136]	@ (8007dc8 <inc_lock+0x168>)
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	4613      	mov	r3, r2
 8007d42:	005b      	lsls	r3, r3, #1
 8007d44:	4413      	add	r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	440b      	add	r3, r1
 8007d4a:	3308      	adds	r3, #8
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8007d50:	491d      	ldr	r1, [pc, #116]	@ (8007dc8 <inc_lock+0x168>)
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	4613      	mov	r3, r2
 8007d56:	005b      	lsls	r3, r3, #1
 8007d58:	4413      	add	r3, r2
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	440b      	add	r3, r1
 8007d5e:	330a      	adds	r3, #10
 8007d60:	2200      	movs	r2, #0
 8007d62:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00c      	beq.n	8007d84 <inc_lock+0x124>
 8007d6a:	4917      	ldr	r1, [pc, #92]	@ (8007dc8 <inc_lock+0x168>)
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	005b      	lsls	r3, r3, #1
 8007d72:	4413      	add	r3, r2
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	440b      	add	r3, r1
 8007d78:	330a      	adds	r3, #10
 8007d7a:	881b      	ldrh	r3, [r3, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d001      	beq.n	8007d84 <inc_lock+0x124>
 8007d80:	2300      	movs	r3, #0
 8007d82:	e01c      	b.n	8007dbe <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10b      	bne.n	8007da2 <inc_lock+0x142>
 8007d8a:	490f      	ldr	r1, [pc, #60]	@ (8007dc8 <inc_lock+0x168>)
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	4613      	mov	r3, r2
 8007d90:	005b      	lsls	r3, r3, #1
 8007d92:	4413      	add	r3, r2
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	440b      	add	r3, r1
 8007d98:	330a      	adds	r3, #10
 8007d9a:	881b      	ldrh	r3, [r3, #0]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	b299      	uxth	r1, r3
 8007da0:	e001      	b.n	8007da6 <inc_lock+0x146>
 8007da2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007da6:	4808      	ldr	r0, [pc, #32]	@ (8007dc8 <inc_lock+0x168>)
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	4613      	mov	r3, r2
 8007dac:	005b      	lsls	r3, r3, #1
 8007dae:	4413      	add	r3, r2
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4403      	add	r3, r0
 8007db4:	330a      	adds	r3, #10
 8007db6:	460a      	mov	r2, r1
 8007db8:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	3301      	adds	r3, #1
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3714      	adds	r7, #20
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bc80      	pop	{r7}
 8007dc6:	4770      	bx	lr
 8007dc8:	200036bc 	.word	0x200036bc

08007dcc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b085      	sub	sp, #20
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	3b01      	subs	r3, #1
 8007dd8:	607b      	str	r3, [r7, #4]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d82e      	bhi.n	8007e3e <dec_lock+0x72>
		n = Files[i].ctr;
 8007de0:	491b      	ldr	r1, [pc, #108]	@ (8007e50 <dec_lock+0x84>)
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	4613      	mov	r3, r2
 8007de6:	005b      	lsls	r3, r3, #1
 8007de8:	4413      	add	r3, r2
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	440b      	add	r3, r1
 8007dee:	330a      	adds	r3, #10
 8007df0:	881b      	ldrh	r3, [r3, #0]
 8007df2:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007df4:	89fb      	ldrh	r3, [r7, #14]
 8007df6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dfa:	d101      	bne.n	8007e00 <dec_lock+0x34>
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8007e00:	89fb      	ldrh	r3, [r7, #14]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d002      	beq.n	8007e0c <dec_lock+0x40>
 8007e06:	89fb      	ldrh	r3, [r7, #14]
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007e0c:	4910      	ldr	r1, [pc, #64]	@ (8007e50 <dec_lock+0x84>)
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	4613      	mov	r3, r2
 8007e12:	005b      	lsls	r3, r3, #1
 8007e14:	4413      	add	r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	440b      	add	r3, r1
 8007e1a:	330a      	adds	r3, #10
 8007e1c:	89fa      	ldrh	r2, [r7, #14]
 8007e1e:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007e20:	89fb      	ldrh	r3, [r7, #14]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d108      	bne.n	8007e38 <dec_lock+0x6c>
 8007e26:	490a      	ldr	r1, [pc, #40]	@ (8007e50 <dec_lock+0x84>)
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	005b      	lsls	r3, r3, #1
 8007e2e:	4413      	add	r3, r2
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	440b      	add	r3, r1
 8007e34:	2200      	movs	r2, #0
 8007e36:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	737b      	strb	r3, [r7, #13]
 8007e3c:	e001      	b.n	8007e42 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007e3e:	2302      	movs	r3, #2
 8007e40:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007e42:	7b7b      	ldrb	r3, [r7, #13]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3714      	adds	r7, #20
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bc80      	pop	{r7}
 8007e4c:	4770      	bx	lr
 8007e4e:	bf00      	nop
 8007e50:	200036bc 	.word	0x200036bc

08007e54 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	60fb      	str	r3, [r7, #12]
 8007e60:	e016      	b.n	8007e90 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007e62:	4910      	ldr	r1, [pc, #64]	@ (8007ea4 <clear_lock+0x50>)
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	4613      	mov	r3, r2
 8007e68:	005b      	lsls	r3, r3, #1
 8007e6a:	4413      	add	r3, r2
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	440b      	add	r3, r1
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d108      	bne.n	8007e8a <clear_lock+0x36>
 8007e78:	490a      	ldr	r1, [pc, #40]	@ (8007ea4 <clear_lock+0x50>)
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	005b      	lsls	r3, r3, #1
 8007e80:	4413      	add	r3, r2
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	440b      	add	r3, r1
 8007e86:	2200      	movs	r2, #0
 8007e88:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	60fb      	str	r3, [r7, #12]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d9e5      	bls.n	8007e62 <clear_lock+0xe>
	}
}
 8007e96:	bf00      	nop
 8007e98:	bf00      	nop
 8007e9a:	3714      	adds	r7, #20
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bc80      	pop	{r7}
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	200036bc 	.word	0x200036bc

08007ea8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d038      	beq.n	8007f30 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8007ec4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8007ecc:	6879      	ldr	r1, [r7, #4]
 8007ece:	2301      	movs	r3, #1
 8007ed0:	697a      	ldr	r2, [r7, #20]
 8007ed2:	f7ff fd7f 	bl	80079d4 <disk_write>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d002      	beq.n	8007ee2 <sync_window+0x3a>
			res = FR_DISK_ERR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	73fb      	strb	r3, [r7, #15]
 8007ee0:	e026      	b.n	8007f30 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8007ef0:	697a      	ldr	r2, [r7, #20]
 8007ef2:	1ad2      	subs	r2, r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d218      	bcs.n	8007f30 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8007f04:	613b      	str	r3, [r7, #16]
 8007f06:	e010      	b.n	8007f2a <sync_window+0x82>
					wsect += fs->fsize;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8007f0e:	697a      	ldr	r2, [r7, #20]
 8007f10:	4413      	add	r3, r2
 8007f12:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8007f1a:	6879      	ldr	r1, [r7, #4]
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	f7ff fd58 	bl	80079d4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	3b01      	subs	r3, #1
 8007f28:	613b      	str	r3, [r7, #16]
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d8eb      	bhi.n	8007f08 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8007f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3718      	adds	r7, #24
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b084      	sub	sp, #16
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
 8007f42:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007f44:	2300      	movs	r3, #0
 8007f46:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8007f4e:	683a      	ldr	r2, [r7, #0]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d01b      	beq.n	8007f8c <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f7ff ffa7 	bl	8007ea8 <sync_window>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007f5e:	7bfb      	ldrb	r3, [r7, #15]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d113      	bne.n	8007f8c <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8007f6a:	6879      	ldr	r1, [r7, #4]
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	683a      	ldr	r2, [r7, #0]
 8007f70:	f7ff fd10 	bl	8007994 <disk_read>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d004      	beq.n	8007f84 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f7e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	683a      	ldr	r2, [r7, #0]
 8007f88:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
		}
	}
	return res;
 8007f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b084      	sub	sp, #16
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f7ff ff82 	bl	8007ea8 <sync_window>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007fa8:	7bfb      	ldrb	r3, [r7, #15]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f040 809b 	bne.w	80080e6 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007fb6:	2b03      	cmp	r3, #3
 8007fb8:	f040 8088 	bne.w	80080cc <sync_fs+0x136>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	f040 8082 	bne.w	80080cc <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007fce:	2100      	movs	r1, #0
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7ff fd5b 	bl	8007a8c <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2255      	movs	r2, #85	@ 0x55
 8007fda:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	22aa      	movs	r2, #170	@ 0xaa
 8007fe2:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2252      	movs	r2, #82	@ 0x52
 8007fea:	701a      	strb	r2, [r3, #0]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2252      	movs	r2, #82	@ 0x52
 8007ff0:	705a      	strb	r2, [r3, #1]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2261      	movs	r2, #97	@ 0x61
 8007ff6:	709a      	strb	r2, [r3, #2]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2241      	movs	r2, #65	@ 0x41
 8007ffc:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2272      	movs	r2, #114	@ 0x72
 8008002:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2272      	movs	r2, #114	@ 0x72
 800800a:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2241      	movs	r2, #65	@ 0x41
 8008012:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2261      	movs	r2, #97	@ 0x61
 800801a:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008024:	b2da      	uxtb	r2, r3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008032:	b29b      	uxth	r3, r3
 8008034:	0a1b      	lsrs	r3, r3, #8
 8008036:	b29b      	uxth	r3, r3
 8008038:	b2da      	uxtb	r2, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008046:	0c1b      	lsrs	r3, r3, #16
 8008048:	b2da      	uxtb	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008056:	0e1b      	lsrs	r3, r3, #24
 8008058:	b2da      	uxtb	r2, r3
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8008066:	b2da      	uxtb	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8008074:	b29b      	uxth	r3, r3
 8008076:	0a1b      	lsrs	r3, r3, #8
 8008078:	b29b      	uxth	r3, r3
 800807a:	b2da      	uxtb	r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8008088:	0c1b      	lsrs	r3, r3, #16
 800808a:	b2da      	uxtb	r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8008098:	0e1b      	lsrs	r3, r3, #24
 800809a:	b2da      	uxtb	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80080a8:	1c5a      	adds	r2, r3, #1
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 80080b6:	6879      	ldr	r1, [r7, #4]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
 80080be:	2301      	movs	r3, #1
 80080c0:	f7ff fc88 	bl	80079d4 <disk_write>
			fs->fsi_flag = 0;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80080d2:	2200      	movs	r2, #0
 80080d4:	2100      	movs	r1, #0
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7ff fc9c 	bl	8007a14 <disk_ioctl>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d001      	beq.n	80080e6 <sync_fs+0x150>
			res = FR_DISK_ERR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80080e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3710      	adds	r7, #16
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	3b02      	subs	r3, #2
 80080fe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008106:	3b02      	subs	r3, #2
 8008108:	683a      	ldr	r2, [r7, #0]
 800810a:	429a      	cmp	r2, r3
 800810c:	d301      	bcc.n	8008112 <clust2sect+0x22>
 800810e:	2300      	movs	r3, #0
 8008110:	e00a      	b.n	8008128 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8008118:	461a      	mov	r2, r3
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	fb03 f202 	mul.w	r2, r3, r2
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8008126:	4413      	add	r3, r2
}
 8008128:	4618      	mov	r0, r3
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	bc80      	pop	{r7}
 8008130:	4770      	bx	lr

08008132 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b086      	sub	sp, #24
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
 800813a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	2b01      	cmp	r3, #1
 8008140:	d905      	bls.n	800814e <get_fat+0x1c>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008148:	683a      	ldr	r2, [r7, #0]
 800814a:	429a      	cmp	r2, r3
 800814c:	d302      	bcc.n	8008154 <get_fat+0x22>
		val = 1;	/* Internal error */
 800814e:	2301      	movs	r3, #1
 8008150:	617b      	str	r3, [r7, #20]
 8008152:	e0a2      	b.n	800829a <get_fat+0x168>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008154:	f04f 33ff 	mov.w	r3, #4294967295
 8008158:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008160:	2b03      	cmp	r3, #3
 8008162:	d067      	beq.n	8008234 <get_fat+0x102>
 8008164:	2b03      	cmp	r3, #3
 8008166:	f300 808e 	bgt.w	8008286 <get_fat+0x154>
 800816a:	2b01      	cmp	r3, #1
 800816c:	d002      	beq.n	8008174 <get_fat+0x42>
 800816e:	2b02      	cmp	r3, #2
 8008170:	d03f      	beq.n	80081f2 <get_fat+0xc0>
 8008172:	e088      	b.n	8008286 <get_fat+0x154>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	60fb      	str	r3, [r7, #12]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	085b      	lsrs	r3, r3, #1
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	4413      	add	r3, r2
 8008180:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	0a5b      	lsrs	r3, r3, #9
 800818c:	4413      	add	r3, r2
 800818e:	4619      	mov	r1, r3
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f7ff fed2 	bl	8007f3a <move_window>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d177      	bne.n	800828c <get_fat+0x15a>
			wc = fs->win.d8[bc++ % SS(fs)];
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	1c5a      	adds	r2, r3, #1
 80081a0:	60fa      	str	r2, [r7, #12]
 80081a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	5cd3      	ldrb	r3, [r2, r3]
 80081aa:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	0a5b      	lsrs	r3, r3, #9
 80081b6:	4413      	add	r3, r2
 80081b8:	4619      	mov	r1, r3
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f7ff febd 	bl	8007f3a <move_window>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d164      	bne.n	8008290 <get_fat+0x15e>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	5cd3      	ldrb	r3, [r2, r3]
 80081d0:	021b      	lsls	r3, r3, #8
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	f003 0301 	and.w	r3, r3, #1
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d002      	beq.n	80081e8 <get_fat+0xb6>
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	091b      	lsrs	r3, r3, #4
 80081e6:	e002      	b.n	80081ee <get_fat+0xbc>
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081ee:	617b      	str	r3, [r7, #20]
			break;
 80081f0:	e053      	b.n	800829a <get_fat+0x168>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	0a1b      	lsrs	r3, r3, #8
 80081fc:	4413      	add	r3, r2
 80081fe:	4619      	mov	r1, r3
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f7ff fe9a 	bl	8007f3a <move_window>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d143      	bne.n	8008294 <get_fat+0x162>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	005b      	lsls	r3, r3, #1
 8008210:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	4413      	add	r3, r2
 8008218:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	3301      	adds	r3, #1
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	021b      	lsls	r3, r3, #8
 8008222:	b21a      	sxth	r2, r3
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	b21b      	sxth	r3, r3
 800822a:	4313      	orrs	r3, r2
 800822c:	b21b      	sxth	r3, r3
 800822e:	b29b      	uxth	r3, r3
 8008230:	617b      	str	r3, [r7, #20]
			break;
 8008232:	e032      	b.n	800829a <get_fat+0x168>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	09db      	lsrs	r3, r3, #7
 800823e:	4413      	add	r3, r2
 8008240:	4619      	mov	r1, r3
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f7ff fe79 	bl	8007f3a <move_window>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	d124      	bne.n	8008298 <get_fat+0x166>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	4413      	add	r3, r2
 800825a:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	3303      	adds	r3, #3
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	061a      	lsls	r2, r3, #24
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	3302      	adds	r3, #2
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	041b      	lsls	r3, r3, #16
 800826c:	431a      	orrs	r2, r3
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	3301      	adds	r3, #1
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	021b      	lsls	r3, r3, #8
 8008276:	4313      	orrs	r3, r2
 8008278:	693a      	ldr	r2, [r7, #16]
 800827a:	7812      	ldrb	r2, [r2, #0]
 800827c:	4313      	orrs	r3, r2
 800827e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008282:	617b      	str	r3, [r7, #20]
			break;
 8008284:	e009      	b.n	800829a <get_fat+0x168>

		default:
			val = 1;	/* Internal error */
 8008286:	2301      	movs	r3, #1
 8008288:	617b      	str	r3, [r7, #20]
 800828a:	e006      	b.n	800829a <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800828c:	bf00      	nop
 800828e:	e004      	b.n	800829a <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008290:	bf00      	nop
 8008292:	e002      	b.n	800829a <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008294:	bf00      	nop
 8008296:	e000      	b.n	800829a <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008298:	bf00      	nop
		}
	}

	return val;
 800829a:	697b      	ldr	r3, [r7, #20]
}
 800829c:	4618      	mov	r0, r3
 800829e:	3718      	adds	r7, #24
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b088      	sub	sp, #32
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d905      	bls.n	80082c2 <put_fat+0x1e>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80082bc:	68ba      	ldr	r2, [r7, #8]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d302      	bcc.n	80082c8 <put_fat+0x24>
		res = FR_INT_ERR;
 80082c2:	2302      	movs	r3, #2
 80082c4:	77fb      	strb	r3, [r7, #31]
 80082c6:	e0f6      	b.n	80084b6 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80082ce:	2b03      	cmp	r3, #3
 80082d0:	f000 809e 	beq.w	8008410 <put_fat+0x16c>
 80082d4:	2b03      	cmp	r3, #3
 80082d6:	f300 80e4 	bgt.w	80084a2 <put_fat+0x1fe>
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d002      	beq.n	80082e4 <put_fat+0x40>
 80082de:	2b02      	cmp	r3, #2
 80082e0:	d06f      	beq.n	80083c2 <put_fat+0x11e>
 80082e2:	e0de      	b.n	80084a2 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	617b      	str	r3, [r7, #20]
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	085b      	lsrs	r3, r3, #1
 80082ec:	697a      	ldr	r2, [r7, #20]
 80082ee:	4413      	add	r3, r2
 80082f0:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	0a5b      	lsrs	r3, r3, #9
 80082fc:	4413      	add	r3, r2
 80082fe:	4619      	mov	r1, r3
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f7ff fe1a 	bl	8007f3a <move_window>
 8008306:	4603      	mov	r3, r0
 8008308:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800830a:	7ffb      	ldrb	r3, [r7, #31]
 800830c:	2b00      	cmp	r3, #0
 800830e:	f040 80cb 	bne.w	80084a8 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	1c5a      	adds	r2, r3, #1
 8008316:	617a      	str	r2, [r7, #20]
 8008318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	4413      	add	r3, r2
 8008320:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	f003 0301 	and.w	r3, r3, #1
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00d      	beq.n	8008348 <put_fat+0xa4>
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	b25b      	sxtb	r3, r3
 8008332:	f003 030f 	and.w	r3, r3, #15
 8008336:	b25a      	sxtb	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	b2db      	uxtb	r3, r3
 800833c:	011b      	lsls	r3, r3, #4
 800833e:	b25b      	sxtb	r3, r3
 8008340:	4313      	orrs	r3, r2
 8008342:	b25b      	sxtb	r3, r3
 8008344:	b2db      	uxtb	r3, r3
 8008346:	e001      	b.n	800834c <put_fat+0xa8>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	b2db      	uxtb	r3, r3
 800834c:	69ba      	ldr	r2, [r7, #24]
 800834e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2201      	movs	r2, #1
 8008354:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	0a5b      	lsrs	r3, r3, #9
 8008362:	4413      	add	r3, r2
 8008364:	4619      	mov	r1, r3
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f7ff fde7 	bl	8007f3a <move_window>
 800836c:	4603      	mov	r3, r0
 800836e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008370:	7ffb      	ldrb	r3, [r7, #31]
 8008372:	2b00      	cmp	r3, #0
 8008374:	f040 809a 	bne.w	80084ac <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	4413      	add	r3, r2
 8008382:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	f003 0301 	and.w	r3, r3, #1
 800838a:	2b00      	cmp	r3, #0
 800838c:	d003      	beq.n	8008396 <put_fat+0xf2>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	091b      	lsrs	r3, r3, #4
 8008392:	b2db      	uxtb	r3, r3
 8008394:	e00e      	b.n	80083b4 <put_fat+0x110>
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	b25b      	sxtb	r3, r3
 800839c:	f023 030f 	bic.w	r3, r3, #15
 80083a0:	b25a      	sxtb	r2, r3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	0a1b      	lsrs	r3, r3, #8
 80083a6:	b25b      	sxtb	r3, r3
 80083a8:	f003 030f 	and.w	r3, r3, #15
 80083ac:	b25b      	sxtb	r3, r3
 80083ae:	4313      	orrs	r3, r2
 80083b0:	b25b      	sxtb	r3, r3
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	69ba      	ldr	r2, [r7, #24]
 80083b6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 80083c0:	e079      	b.n	80084b6 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	0a1b      	lsrs	r3, r3, #8
 80083cc:	4413      	add	r3, r2
 80083ce:	4619      	mov	r1, r3
 80083d0:	68f8      	ldr	r0, [r7, #12]
 80083d2:	f7ff fdb2 	bl	8007f3a <move_window>
 80083d6:	4603      	mov	r3, r0
 80083d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80083da:	7ffb      	ldrb	r3, [r7, #31]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d167      	bne.n	80084b0 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	005b      	lsls	r3, r3, #1
 80083e4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	4413      	add	r3, r2
 80083ec:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	b2da      	uxtb	r2, r3
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	701a      	strb	r2, [r3, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	0a1b      	lsrs	r3, r3, #8
 80083fc:	b29a      	uxth	r2, r3
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	3301      	adds	r3, #1
 8008402:	b2d2      	uxtb	r2, r2
 8008404:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2201      	movs	r2, #1
 800840a:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 800840e:	e052      	b.n	80084b6 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	09db      	lsrs	r3, r3, #7
 800841a:	4413      	add	r3, r2
 800841c:	4619      	mov	r1, r3
 800841e:	68f8      	ldr	r0, [r7, #12]
 8008420:	f7ff fd8b 	bl	8007f3a <move_window>
 8008424:	4603      	mov	r3, r0
 8008426:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008428:	7ffb      	ldrb	r3, [r7, #31]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d142      	bne.n	80084b4 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	4413      	add	r3, r2
 800843a:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800843c:	69bb      	ldr	r3, [r7, #24]
 800843e:	3303      	adds	r3, #3
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	061a      	lsls	r2, r3, #24
 8008444:	69bb      	ldr	r3, [r7, #24]
 8008446:	3302      	adds	r3, #2
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	041b      	lsls	r3, r3, #16
 800844c:	431a      	orrs	r2, r3
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	3301      	adds	r3, #1
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	021b      	lsls	r3, r3, #8
 8008456:	4313      	orrs	r3, r2
 8008458:	69ba      	ldr	r2, [r7, #24]
 800845a:	7812      	ldrb	r2, [r2, #0]
 800845c:	4313      	orrs	r3, r2
 800845e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	4313      	orrs	r3, r2
 8008466:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	b2da      	uxtb	r2, r3
 800846c:	69bb      	ldr	r3, [r7, #24]
 800846e:	701a      	strb	r2, [r3, #0]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	b29b      	uxth	r3, r3
 8008474:	0a1b      	lsrs	r3, r3, #8
 8008476:	b29a      	uxth	r2, r3
 8008478:	69bb      	ldr	r3, [r7, #24]
 800847a:	3301      	adds	r3, #1
 800847c:	b2d2      	uxtb	r2, r2
 800847e:	701a      	strb	r2, [r3, #0]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	0c1a      	lsrs	r2, r3, #16
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	3302      	adds	r3, #2
 8008488:	b2d2      	uxtb	r2, r2
 800848a:	701a      	strb	r2, [r3, #0]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	0e1a      	lsrs	r2, r3, #24
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	3303      	adds	r3, #3
 8008494:	b2d2      	uxtb	r2, r2
 8008496:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 80084a0:	e009      	b.n	80084b6 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 80084a2:	2302      	movs	r3, #2
 80084a4:	77fb      	strb	r3, [r7, #31]
 80084a6:	e006      	b.n	80084b6 <put_fat+0x212>
			if (res != FR_OK) break;
 80084a8:	bf00      	nop
 80084aa:	e004      	b.n	80084b6 <put_fat+0x212>
			if (res != FR_OK) break;
 80084ac:	bf00      	nop
 80084ae:	e002      	b.n	80084b6 <put_fat+0x212>
			if (res != FR_OK) break;
 80084b0:	bf00      	nop
 80084b2:	e000      	b.n	80084b6 <put_fat+0x212>
			if (res != FR_OK) break;
 80084b4:	bf00      	nop
		}
	}

	return res;
 80084b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3720      	adds	r7, #32
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d905      	bls.n	80084dc <remove_chain+0x1c>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80084d6:	683a      	ldr	r2, [r7, #0]
 80084d8:	429a      	cmp	r2, r3
 80084da:	d302      	bcc.n	80084e2 <remove_chain+0x22>
		res = FR_INT_ERR;
 80084dc:	2302      	movs	r3, #2
 80084de:	73fb      	strb	r3, [r7, #15]
 80084e0:	e043      	b.n	800856a <remove_chain+0xaa>

	} else {
		res = FR_OK;
 80084e2:	2300      	movs	r3, #0
 80084e4:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80084e6:	e036      	b.n	8008556 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80084e8:	6839      	ldr	r1, [r7, #0]
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f7ff fe21 	bl	8008132 <get_fat>
 80084f0:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d035      	beq.n	8008564 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d102      	bne.n	8008504 <remove_chain+0x44>
 80084fe:	2302      	movs	r3, #2
 8008500:	73fb      	strb	r3, [r7, #15]
 8008502:	e032      	b.n	800856a <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800850a:	d102      	bne.n	8008512 <remove_chain+0x52>
 800850c:	2301      	movs	r3, #1
 800850e:	73fb      	strb	r3, [r7, #15]
 8008510:	e02b      	b.n	800856a <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8008512:	2200      	movs	r2, #0
 8008514:	6839      	ldr	r1, [r7, #0]
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f7ff fec4 	bl	80082a4 <put_fat>
 800851c:	4603      	mov	r3, r0
 800851e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8008520:	7bfb      	ldrb	r3, [r7, #15]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d120      	bne.n	8008568 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800852c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008530:	d00f      	beq.n	8008552 <remove_chain+0x92>
				fs->free_clust++;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008538:	1c5a      	adds	r2, r3, #1
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
				fs->fsi_flag |= 1;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 8008546:	f043 0301 	orr.w	r3, r3, #1
 800854a:	b2da      	uxtb	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800855c:	683a      	ldr	r2, [r7, #0]
 800855e:	429a      	cmp	r2, r3
 8008560:	d3c2      	bcc.n	80084e8 <remove_chain+0x28>
 8008562:	e002      	b.n	800856a <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8008564:	bf00      	nop
 8008566:	e000      	b.n	800856a <remove_chain+0xaa>
			if (res != FR_OK) break;
 8008568:	bf00      	nop
		}
	}

	return res;
 800856a:	7bfb      	ldrb	r3, [r7, #15]
}
 800856c:	4618      	mov	r0, r3
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b086      	sub	sp, #24
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d10f      	bne.n	80085a4 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800858a:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d005      	beq.n	800859e <create_chain+0x2a>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008598:	693a      	ldr	r2, [r7, #16]
 800859a:	429a      	cmp	r2, r3
 800859c:	d31c      	bcc.n	80085d8 <create_chain+0x64>
 800859e:	2301      	movs	r3, #1
 80085a0:	613b      	str	r3, [r7, #16]
 80085a2:	e019      	b.n	80085d8 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80085a4:	6839      	ldr	r1, [r7, #0]
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f7ff fdc3 	bl	8008132 <get_fat>
 80085ac:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d801      	bhi.n	80085b8 <create_chain+0x44>
 80085b4:	2301      	movs	r3, #1
 80085b6:	e076      	b.n	80086a6 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085be:	d101      	bne.n	80085c4 <create_chain+0x50>
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	e070      	b.n	80086a6 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d201      	bcs.n	80085d4 <create_chain+0x60>
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	e068      	b.n	80086a6 <create_chain+0x132>
		scl = clst;
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	3301      	adds	r3, #1
 80085e0:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80085e8:	697a      	ldr	r2, [r7, #20]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d307      	bcc.n	80085fe <create_chain+0x8a>
			ncl = 2;
 80085ee:	2302      	movs	r3, #2
 80085f0:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80085f2:	697a      	ldr	r2, [r7, #20]
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d901      	bls.n	80085fe <create_chain+0x8a>
 80085fa:	2300      	movs	r3, #0
 80085fc:	e053      	b.n	80086a6 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80085fe:	6979      	ldr	r1, [r7, #20]
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f7ff fd96 	bl	8008132 <get_fat>
 8008606:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d00e      	beq.n	800862c <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008614:	d002      	beq.n	800861c <create_chain+0xa8>
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	2b01      	cmp	r3, #1
 800861a:	d101      	bne.n	8008620 <create_chain+0xac>
			return cs;
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	e042      	b.n	80086a6 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8008620:	697a      	ldr	r2, [r7, #20]
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	429a      	cmp	r2, r3
 8008626:	d1d9      	bne.n	80085dc <create_chain+0x68>
 8008628:	2300      	movs	r3, #0
 800862a:	e03c      	b.n	80086a6 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800862c:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800862e:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 8008632:	6979      	ldr	r1, [r7, #20]
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f7ff fe35 	bl	80082a4 <put_fat>
 800863a:	4603      	mov	r3, r0
 800863c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800863e:	7bfb      	ldrb	r3, [r7, #15]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d109      	bne.n	8008658 <create_chain+0xe4>
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d006      	beq.n	8008658 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800864a:	697a      	ldr	r2, [r7, #20]
 800864c:	6839      	ldr	r1, [r7, #0]
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f7ff fe28 	bl	80082a4 <put_fat>
 8008654:	4603      	mov	r3, r0
 8008656:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8008658:	7bfb      	ldrb	r3, [r7, #15]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d11a      	bne.n	8008694 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800866c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008670:	d018      	beq.n	80086a4 <create_chain+0x130>
			fs->free_clust--;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008678:	1e5a      	subs	r2, r3, #1
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			fs->fsi_flag |= 1;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 8008686:	f043 0301 	orr.w	r3, r3, #1
 800868a:	b2da      	uxtb	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
 8008692:	e007      	b.n	80086a4 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8008694:	7bfb      	ldrb	r3, [r7, #15]
 8008696:	2b01      	cmp	r3, #1
 8008698:	d102      	bne.n	80086a0 <create_chain+0x12c>
 800869a:	f04f 33ff 	mov.w	r3, #4294967295
 800869e:	e000      	b.n	80086a2 <create_chain+0x12e>
 80086a0:	2301      	movs	r3, #1
 80086a2:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80086a4:	697b      	ldr	r3, [r7, #20]
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3718      	adds	r7, #24
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b087      	sub	sp, #28
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 80086be:	3304      	adds	r3, #4
 80086c0:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	0a5b      	lsrs	r3, r3, #9
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 80086cc:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 80086d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80086d4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	1d1a      	adds	r2, r3, #4
 80086da:	613a      	str	r2, [r7, #16]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d101      	bne.n	80086ea <clmt_clust+0x3c>
 80086e6:	2300      	movs	r3, #0
 80086e8:	e010      	b.n	800870c <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 80086ea:	697a      	ldr	r2, [r7, #20]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d307      	bcc.n	8008702 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 80086f2:	697a      	ldr	r2, [r7, #20]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	1ad3      	subs	r3, r2, r3
 80086f8:	617b      	str	r3, [r7, #20]
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	3304      	adds	r3, #4
 80086fe:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008700:	e7e9      	b.n	80086d6 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8008702:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	4413      	add	r3, r2
}
 800870c:	4618      	mov	r0, r3
 800870e:	371c      	adds	r7, #28
 8008710:	46bd      	mov	sp, r7
 8008712:	bc80      	pop	{r7}
 8008714:	4770      	bx	lr

08008716 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b086      	sub	sp, #24
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
 800871e:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	b29a      	uxth	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8008730:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	2b01      	cmp	r3, #1
 8008736:	d007      	beq.n	8008748 <dir_sdi+0x32>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800873e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008742:	697a      	ldr	r2, [r7, #20]
 8008744:	429a      	cmp	r2, r3
 8008746:	d301      	bcc.n	800874c <dir_sdi+0x36>
		return FR_INT_ERR;
 8008748:	2302      	movs	r3, #2
 800874a:	e074      	b.n	8008836 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d10c      	bne.n	800876c <dir_sdi+0x56>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008758:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800875c:	2b03      	cmp	r3, #3
 800875e:	d105      	bne.n	800876c <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008766:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 800876a:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d111      	bne.n	8008796 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008778:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800877c:	461a      	mov	r2, r3
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	4293      	cmp	r3, r2
 8008782:	d301      	bcc.n	8008788 <dir_sdi+0x72>
			return FR_INT_ERR;
 8008784:	2302      	movs	r3, #2
 8008786:	e056      	b.n	8008836 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800878e:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8008792:	613b      	str	r3, [r7, #16]
 8008794:	e032      	b.n	80087fc <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800879c:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 80087a0:	011b      	lsls	r3, r3, #4
 80087a2:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80087a4:	e01e      	b.n	80087e4 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80087ac:	6979      	ldr	r1, [r7, #20]
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7ff fcbf 	bl	8008132 <get_fat>
 80087b4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087bc:	d101      	bne.n	80087c2 <dir_sdi+0xac>
 80087be:	2301      	movs	r3, #1
 80087c0:	e039      	b.n	8008836 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d907      	bls.n	80087d8 <dir_sdi+0xc2>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80087ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80087d2:	697a      	ldr	r2, [r7, #20]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d301      	bcc.n	80087dc <dir_sdi+0xc6>
				return FR_INT_ERR;
 80087d8:	2302      	movs	r3, #2
 80087da:	e02c      	b.n	8008836 <dir_sdi+0x120>
			idx -= ic;
 80087dc:	683a      	ldr	r2, [r7, #0]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	1ad3      	subs	r3, r2, r3
 80087e2:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80087e4:	683a      	ldr	r2, [r7, #0]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d2dc      	bcs.n	80087a6 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80087f2:	6979      	ldr	r1, [r7, #20]
 80087f4:	4618      	mov	r0, r3
 80087f6:	f7ff fc7b 	bl	80080f0 <clust2sect>
 80087fa:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	697a      	ldr	r2, [r7, #20]
 8008800:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	if (!sect) return FR_INT_ERR;
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d101      	bne.n	800880e <dir_sdi+0xf8>
 800880a:	2302      	movs	r3, #2
 800880c:	e013      	b.n	8008836 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	091a      	lsrs	r2, r3, #4
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	441a      	add	r2, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008822:	461a      	mov	r2, r3
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	f003 030f 	and.w	r3, r3, #15
 800882a:	015b      	lsls	r3, r3, #5
 800882c:	441a      	add	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	return FR_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	3718      	adds	r7, #24
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800883e:	b590      	push	{r4, r7, lr}
 8008840:	b087      	sub	sp, #28
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 800884e:	3301      	adds	r3, #1
 8008850:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	b29b      	uxth	r3, r3
 8008856:	2b00      	cmp	r3, #0
 8008858:	d004      	beq.n	8008864 <dir_next+0x26>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008860:	2b00      	cmp	r3, #0
 8008862:	d101      	bne.n	8008868 <dir_next+0x2a>
		return FR_NO_FILE;
 8008864:	2304      	movs	r3, #4
 8008866:	e0dd      	b.n	8008a24 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f003 030f 	and.w	r3, r3, #15
 800886e:	2b00      	cmp	r3, #0
 8008870:	f040 80c6 	bne.w	8008a00 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800887a:	1c5a      	adds	r2, r3, #1
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

		if (!dp->clust) {		/* Static table */
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8008888:	2b00      	cmp	r3, #0
 800888a:	d10b      	bne.n	80088a4 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008892:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8008896:	461a      	mov	r2, r3
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	4293      	cmp	r3, r2
 800889c:	f0c0 80b0 	bcc.w	8008a00 <dir_next+0x1c2>
				return FR_NO_FILE;
 80088a0:	2304      	movs	r3, #4
 80088a2:	e0bf      	b.n	8008a24 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	091b      	lsrs	r3, r3, #4
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 80088ae:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 80088b2:	3a01      	subs	r2, #1
 80088b4:	4013      	ands	r3, r2
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	f040 80a2 	bne.w	8008a00 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80088c8:	4619      	mov	r1, r3
 80088ca:	4610      	mov	r0, r2
 80088cc:	f7ff fc31 	bl	8008132 <get_fat>
 80088d0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d801      	bhi.n	80088dc <dir_next+0x9e>
 80088d8:	2302      	movs	r3, #2
 80088da:	e0a3      	b.n	8008a24 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e2:	d101      	bne.n	80088e8 <dir_next+0xaa>
 80088e4:	2301      	movs	r3, #1
 80088e6:	e09d      	b.n	8008a24 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80088ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80088f2:	697a      	ldr	r2, [r7, #20]
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d374      	bcc.n	80089e2 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d101      	bne.n	8008902 <dir_next+0xc4>
 80088fe:	2304      	movs	r3, #4
 8008900:	e090      	b.n	8008a24 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800890e:	4619      	mov	r1, r3
 8008910:	4610      	mov	r0, r2
 8008912:	f7ff fe2f 	bl	8008574 <create_chain>
 8008916:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d101      	bne.n	8008922 <dir_next+0xe4>
 800891e:	2307      	movs	r3, #7
 8008920:	e080      	b.n	8008a24 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	2b01      	cmp	r3, #1
 8008926:	d101      	bne.n	800892c <dir_next+0xee>
 8008928:	2302      	movs	r3, #2
 800892a:	e07b      	b.n	8008a24 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008932:	d101      	bne.n	8008938 <dir_next+0xfa>
 8008934:	2301      	movs	r3, #1
 8008936:	e075      	b.n	8008a24 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800893e:	4618      	mov	r0, r3
 8008940:	f7ff fab2 	bl	8007ea8 <sync_window>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d001      	beq.n	800894e <dir_next+0x110>
 800894a:	2301      	movs	r3, #1
 800894c:	e06a      	b.n	8008a24 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008954:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008958:	2100      	movs	r1, #0
 800895a:	4618      	mov	r0, r3
 800895c:	f7ff f896 	bl	8007a8c <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8d3 4200 	ldr.w	r4, [r3, #512]	@ 0x200
 800896c:	6979      	ldr	r1, [r7, #20]
 800896e:	4610      	mov	r0, r2
 8008970:	f7ff fbbe 	bl	80080f0 <clust2sect>
 8008974:	4603      	mov	r3, r0
 8008976:	f8c4 322c 	str.w	r3, [r4, #556]	@ 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800897a:	2300      	movs	r3, #0
 800897c:	613b      	str	r3, [r7, #16]
 800897e:	e01b      	b.n	80089b8 <dir_next+0x17a>
						dp->fs->wflag = 1;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008986:	2201      	movs	r2, #1
 8008988:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008992:	4618      	mov	r0, r3
 8008994:	f7ff fa88 	bl	8007ea8 <sync_window>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d001      	beq.n	80089a2 <dir_next+0x164>
 800899e:	2301      	movs	r3, #1
 80089a0:	e040      	b.n	8008a24 <dir_next+0x1e6>
						dp->fs->winsect++;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80089a8:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
 80089ac:	3201      	adds	r2, #1
 80089ae:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	3301      	adds	r3, #1
 80089b6:	613b      	str	r3, [r7, #16]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80089be:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 80089c2:	461a      	mov	r2, r3
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d3da      	bcc.n	8008980 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80089d0:	f8d3 122c 	ldr.w	r1, [r3, #556]	@ 0x22c
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80089da:	693a      	ldr	r2, [r7, #16]
 80089dc:	1a8a      	subs	r2, r1, r2
 80089de:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	697a      	ldr	r2, [r7, #20]
 80089e6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80089f0:	6979      	ldr	r1, [r7, #20]
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7ff fb7c 	bl	80080f0 <clust2sect>
 80089f8:	4602      	mov	r2, r0
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	b29a      	uxth	r2, r3
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008a10:	461a      	mov	r2, r3
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f003 030f 	and.w	r3, r3, #15
 8008a18:	015b      	lsls	r3, r3, #5
 8008a1a:	441a      	add	r2, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	return FR_OK;
 8008a22:	2300      	movs	r3, #0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	371c      	adds	r7, #28
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd90      	pop	{r4, r7, pc}

08008a2c <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8008a36:	2100      	movs	r1, #0
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f7ff fe6c 	bl	8008716 <dir_sdi>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008a42:	7bfb      	ldrb	r3, [r7, #15]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d131      	bne.n	8008aac <dir_alloc+0x80>
		n = 0;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008a58:	4619      	mov	r1, r3
 8008a5a:	4610      	mov	r0, r2
 8008a5c:	f7ff fa6d 	bl	8007f3a <move_window>
 8008a60:	4603      	mov	r3, r0
 8008a62:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8008a64:	7bfb      	ldrb	r3, [r7, #15]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d11f      	bne.n	8008aaa <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	2be5      	cmp	r3, #229	@ 0xe5
 8008a74:	d005      	beq.n	8008a82 <dir_alloc+0x56>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d107      	bne.n	8008a92 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	3301      	adds	r3, #1
 8008a86:	60bb      	str	r3, [r7, #8]
 8008a88:	68ba      	ldr	r2, [r7, #8]
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d102      	bne.n	8008a96 <dir_alloc+0x6a>
 8008a90:	e00c      	b.n	8008aac <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008a92:	2300      	movs	r3, #0
 8008a94:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8008a96:	2101      	movs	r1, #1
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f7ff fed0 	bl	800883e <dir_next>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8008aa2:	7bfb      	ldrb	r3, [r7, #15]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d0d1      	beq.n	8008a4c <dir_alloc+0x20>
 8008aa8:	e000      	b.n	8008aac <dir_alloc+0x80>
			if (res != FR_OK) break;
 8008aaa:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008aac:	7bfb      	ldrb	r3, [r7, #15]
 8008aae:	2b04      	cmp	r3, #4
 8008ab0:	d101      	bne.n	8008ab6 <dir_alloc+0x8a>
 8008ab2:	2307      	movs	r3, #7
 8008ab4:	73fb      	strb	r3, [r7, #15]
	return res;
 8008ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3710      	adds	r7, #16
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b085      	sub	sp, #20
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	331b      	adds	r3, #27
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	021b      	lsls	r3, r3, #8
 8008ad2:	b21a      	sxth	r2, r3
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	331a      	adds	r3, #26
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	b21b      	sxth	r3, r3
 8008adc:	4313      	orrs	r3, r2
 8008ade:	b21b      	sxth	r3, r3
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008aea:	2b03      	cmp	r3, #3
 8008aec:	d10f      	bne.n	8008b0e <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	3315      	adds	r3, #21
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	021b      	lsls	r3, r3, #8
 8008af6:	b21a      	sxth	r2, r3
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	3314      	adds	r3, #20
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	b21b      	sxth	r3, r3
 8008b00:	4313      	orrs	r3, r2
 8008b02:	b21b      	sxth	r3, r3
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	041b      	lsls	r3, r3, #16
 8008b08:	68fa      	ldr	r2, [r7, #12]
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	60fb      	str	r3, [r7, #12]

	return cl;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3714      	adds	r7, #20
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bc80      	pop	{r7}
 8008b18:	4770      	bx	lr

08008b1a <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8008b1a:	b480      	push	{r7}
 8008b1c:	b083      	sub	sp, #12
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
 8008b22:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	331a      	adds	r3, #26
 8008b28:	683a      	ldr	r2, [r7, #0]
 8008b2a:	b2d2      	uxtb	r2, r2
 8008b2c:	701a      	strb	r2, [r3, #0]
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	0a1b      	lsrs	r3, r3, #8
 8008b34:	b29a      	uxth	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	331b      	adds	r3, #27
 8008b3a:	b2d2      	uxtb	r2, r2
 8008b3c:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	0c1a      	lsrs	r2, r3, #16
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	3314      	adds	r3, #20
 8008b46:	b2d2      	uxtb	r2, r2
 8008b48:	701a      	strb	r2, [r3, #0]
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	0c1b      	lsrs	r3, r3, #16
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	0a1b      	lsrs	r3, r3, #8
 8008b52:	b29a      	uxth	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	3315      	adds	r3, #21
 8008b58:	b2d2      	uxtb	r2, r2
 8008b5a:	701a      	strb	r2, [r3, #0]
}
 8008b5c:	bf00      	nop
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bc80      	pop	{r7}
 8008b64:	4770      	bx	lr

08008b66 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b086      	sub	sp, #24
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008b6e:	2100      	movs	r1, #0
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f7ff fdd0 	bl	8008716 <dir_sdi>
 8008b76:	4603      	mov	r3, r0
 8008b78:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008b7a:	7dfb      	ldrb	r3, [r7, #23]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d001      	beq.n	8008b84 <dir_find+0x1e>
 8008b80:	7dfb      	ldrb	r3, [r7, #23]
 8008b82:	e03b      	b.n	8008bfc <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008b90:	4619      	mov	r1, r3
 8008b92:	4610      	mov	r0, r2
 8008b94:	f7ff f9d1 	bl	8007f3a <move_window>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008b9c:	7dfb      	ldrb	r3, [r7, #23]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d128      	bne.n	8008bf4 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008ba8:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008bb0:	7bfb      	ldrb	r3, [r7, #15]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d102      	bne.n	8008bbc <dir_find+0x56>
 8008bb6:	2304      	movs	r3, #4
 8008bb8:	75fb      	strb	r3, [r7, #23]
 8008bba:	e01e      	b.n	8008bfa <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	330b      	adds	r3, #11
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	f003 0308 	and.w	r3, r3, #8
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10a      	bne.n	8008be0 <dir_find+0x7a>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008bd0:	220b      	movs	r2, #11
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	6938      	ldr	r0, [r7, #16]
 8008bd6:	f7fe ff73 	bl	8007ac0 <mem_cmp>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d00b      	beq.n	8008bf8 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8008be0:	2100      	movs	r1, #0
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f7ff fe2b 	bl	800883e <dir_next>
 8008be8:	4603      	mov	r3, r0
 8008bea:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008bec:	7dfb      	ldrb	r3, [r7, #23]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d0c8      	beq.n	8008b84 <dir_find+0x1e>
 8008bf2:	e002      	b.n	8008bfa <dir_find+0x94>
		if (res != FR_OK) break;
 8008bf4:	bf00      	nop
 8008bf6:	e000      	b.n	8008bfa <dir_find+0x94>
			break;
 8008bf8:	bf00      	nop

	return res;
 8008bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3718      	adds	r7, #24
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008c0c:	2101      	movs	r1, #1
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f7ff ff0c 	bl	8008a2c <dir_alloc>
 8008c14:	4603      	mov	r3, r0
 8008c16:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8008c18:	7bfb      	ldrb	r3, [r7, #15]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d126      	bne.n	8008c6c <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	4610      	mov	r0, r2
 8008c2e:	f7ff f984 	bl	8007f3a <move_window>
 8008c32:	4603      	mov	r3, r0
 8008c34:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008c36:	7bfb      	ldrb	r3, [r7, #15]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d117      	bne.n	8008c6c <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008c42:	2220      	movs	r2, #32
 8008c44:	2100      	movs	r1, #0
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7fe ff20 	bl	8007a8c <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8d3 0214 	ldr.w	r0, [r3, #532]	@ 0x214
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008c58:	220b      	movs	r2, #11
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	f7fe fef8 	bl	8007a50 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
		}
	}

	return res;
 8008c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
	...

08008c78 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b088      	sub	sp, #32
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	60fb      	str	r3, [r7, #12]
 8008c88:	e002      	b.n	8008c90 <create_name+0x18>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	60fb      	str	r3, [r7, #12]
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	2b2f      	cmp	r3, #47	@ 0x2f
 8008c96:	d0f8      	beq.n	8008c8a <create_name+0x12>
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	2b5c      	cmp	r3, #92	@ 0x5c
 8008c9e:	d0f4      	beq.n	8008c8a <create_name+0x12>
	sfn = dp->fn;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008ca6:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008ca8:	220b      	movs	r2, #11
 8008caa:	2120      	movs	r1, #32
 8008cac:	68b8      	ldr	r0, [r7, #8]
 8008cae:	f7fe feed 	bl	8007a8c <mem_set>
	si = i = b = 0; ni = 8;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	77fb      	strb	r3, [r7, #31]
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	613b      	str	r3, [r7, #16]
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	617b      	str	r3, [r7, #20]
 8008cbe:	2308      	movs	r3, #8
 8008cc0:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	1c5a      	adds	r2, r3, #1
 8008cc6:	617a      	str	r2, [r7, #20]
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	4413      	add	r3, r2
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8008cd0:	7fbb      	ldrb	r3, [r7, #30]
 8008cd2:	2b20      	cmp	r3, #32
 8008cd4:	d953      	bls.n	8008d7e <create_name+0x106>
 8008cd6:	7fbb      	ldrb	r3, [r7, #30]
 8008cd8:	2b2f      	cmp	r3, #47	@ 0x2f
 8008cda:	d050      	beq.n	8008d7e <create_name+0x106>
 8008cdc:	7fbb      	ldrb	r3, [r7, #30]
 8008cde:	2b5c      	cmp	r3, #92	@ 0x5c
 8008ce0:	d04d      	beq.n	8008d7e <create_name+0x106>
		if (c == '.' || i >= ni) {
 8008ce2:	7fbb      	ldrb	r3, [r7, #30]
 8008ce4:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ce6:	d003      	beq.n	8008cf0 <create_name+0x78>
 8008ce8:	693a      	ldr	r2, [r7, #16]
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d30f      	bcc.n	8008d10 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	2b08      	cmp	r3, #8
 8008cf4:	d102      	bne.n	8008cfc <create_name+0x84>
 8008cf6:	7fbb      	ldrb	r3, [r7, #30]
 8008cf8:	2b2e      	cmp	r3, #46	@ 0x2e
 8008cfa:	d001      	beq.n	8008d00 <create_name+0x88>
 8008cfc:	2306      	movs	r3, #6
 8008cfe:	e073      	b.n	8008de8 <create_name+0x170>
			i = 8; ni = 11;
 8008d00:	2308      	movs	r3, #8
 8008d02:	613b      	str	r3, [r7, #16]
 8008d04:	230b      	movs	r3, #11
 8008d06:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8008d08:	7ffb      	ldrb	r3, [r7, #31]
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	77fb      	strb	r3, [r7, #31]
 8008d0e:	e035      	b.n	8008d7c <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008d10:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	da08      	bge.n	8008d2a <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8008d18:	7ffb      	ldrb	r3, [r7, #31]
 8008d1a:	f043 0303 	orr.w	r3, r3, #3
 8008d1e:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008d20:	7fbb      	ldrb	r3, [r7, #30]
 8008d22:	3b80      	subs	r3, #128	@ 0x80
 8008d24:	4a32      	ldr	r2, [pc, #200]	@ (8008df0 <create_name+0x178>)
 8008d26:	5cd3      	ldrb	r3, [r2, r3]
 8008d28:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8008d2a:	7fbb      	ldrb	r3, [r7, #30]
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	4831      	ldr	r0, [pc, #196]	@ (8008df4 <create_name+0x17c>)
 8008d30:	f7fe feec 	bl	8007b0c <chk_chr>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d001      	beq.n	8008d3e <create_name+0xc6>
				return FR_INVALID_NAME;
 8008d3a:	2306      	movs	r3, #6
 8008d3c:	e054      	b.n	8008de8 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8008d3e:	7fbb      	ldrb	r3, [r7, #30]
 8008d40:	2b40      	cmp	r3, #64	@ 0x40
 8008d42:	d907      	bls.n	8008d54 <create_name+0xdc>
 8008d44:	7fbb      	ldrb	r3, [r7, #30]
 8008d46:	2b5a      	cmp	r3, #90	@ 0x5a
 8008d48:	d804      	bhi.n	8008d54 <create_name+0xdc>
				b |= 2;
 8008d4a:	7ffb      	ldrb	r3, [r7, #31]
 8008d4c:	f043 0302 	orr.w	r3, r3, #2
 8008d50:	77fb      	strb	r3, [r7, #31]
 8008d52:	e00c      	b.n	8008d6e <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8008d54:	7fbb      	ldrb	r3, [r7, #30]
 8008d56:	2b60      	cmp	r3, #96	@ 0x60
 8008d58:	d909      	bls.n	8008d6e <create_name+0xf6>
 8008d5a:	7fbb      	ldrb	r3, [r7, #30]
 8008d5c:	2b7a      	cmp	r3, #122	@ 0x7a
 8008d5e:	d806      	bhi.n	8008d6e <create_name+0xf6>
					b |= 1; c -= 0x20;
 8008d60:	7ffb      	ldrb	r3, [r7, #31]
 8008d62:	f043 0301 	orr.w	r3, r3, #1
 8008d66:	77fb      	strb	r3, [r7, #31]
 8008d68:	7fbb      	ldrb	r3, [r7, #30]
 8008d6a:	3b20      	subs	r3, #32
 8008d6c:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	1c5a      	adds	r2, r3, #1
 8008d72:	613a      	str	r2, [r7, #16]
 8008d74:	68ba      	ldr	r2, [r7, #8]
 8008d76:	4413      	add	r3, r2
 8008d78:	7fba      	ldrb	r2, [r7, #30]
 8008d7a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008d7c:	e7a1      	b.n	8008cc2 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	441a      	add	r2, r3
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8008d88:	7fbb      	ldrb	r3, [r7, #30]
 8008d8a:	2b20      	cmp	r3, #32
 8008d8c:	d801      	bhi.n	8008d92 <create_name+0x11a>
 8008d8e:	2304      	movs	r3, #4
 8008d90:	e000      	b.n	8008d94 <create_name+0x11c>
 8008d92:	2300      	movs	r3, #0
 8008d94:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d101      	bne.n	8008da0 <create_name+0x128>
 8008d9c:	2306      	movs	r3, #6
 8008d9e:	e023      	b.n	8008de8 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	2be5      	cmp	r3, #229	@ 0xe5
 8008da6:	d102      	bne.n	8008dae <create_name+0x136>
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	2205      	movs	r2, #5
 8008dac:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	2b08      	cmp	r3, #8
 8008db2:	d102      	bne.n	8008dba <create_name+0x142>
 8008db4:	7ffb      	ldrb	r3, [r7, #31]
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8008dba:	7ffb      	ldrb	r3, [r7, #31]
 8008dbc:	f003 0303 	and.w	r3, r3, #3
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d103      	bne.n	8008dcc <create_name+0x154>
 8008dc4:	7fbb      	ldrb	r3, [r7, #30]
 8008dc6:	f043 0310 	orr.w	r3, r3, #16
 8008dca:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8008dcc:	7ffb      	ldrb	r3, [r7, #31]
 8008dce:	f003 030c 	and.w	r3, r3, #12
 8008dd2:	2b04      	cmp	r3, #4
 8008dd4:	d103      	bne.n	8008dde <create_name+0x166>
 8008dd6:	7fbb      	ldrb	r3, [r7, #30]
 8008dd8:	f043 0308 	orr.w	r3, r3, #8
 8008ddc:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	330b      	adds	r3, #11
 8008de2:	7fba      	ldrb	r2, [r7, #30]
 8008de4:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008de6:	2300      	movs	r3, #0
#endif
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3720      	adds	r7, #32
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	0800ed50 	.word	0x0800ed50
 8008df4:	0800ece8 	.word	0x0800ece8

08008df8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	2b2f      	cmp	r3, #47	@ 0x2f
 8008e08:	d003      	beq.n	8008e12 <follow_path+0x1a>
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	2b5c      	cmp	r3, #92	@ 0x5c
 8008e10:	d102      	bne.n	8008e18 <follow_path+0x20>
		path++;
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	3301      	adds	r3, #1
 8008e16:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	2b1f      	cmp	r3, #31
 8008e26:	d80a      	bhi.n	8008e3e <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8008e28:	2100      	movs	r1, #0
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f7ff fc73 	bl	8008716 <dir_sdi>
 8008e30:	4603      	mov	r3, r0
 8008e32:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8008e3c:	e045      	b.n	8008eca <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008e3e:	463b      	mov	r3, r7
 8008e40:	4619      	mov	r1, r3
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f7ff ff18 	bl	8008c78 <create_name>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8008e4c:	7bfb      	ldrb	r3, [r7, #15]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d136      	bne.n	8008ec0 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f7ff fe87 	bl	8008b66 <dir_find>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008e62:	7adb      	ldrb	r3, [r3, #11]
 8008e64:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d00a      	beq.n	8008e82 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008e6c:	7bfb      	ldrb	r3, [r7, #15]
 8008e6e:	2b04      	cmp	r3, #4
 8008e70:	d128      	bne.n	8008ec4 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008e72:	7bbb      	ldrb	r3, [r7, #14]
 8008e74:	f003 0304 	and.w	r3, r3, #4
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d123      	bne.n	8008ec4 <follow_path+0xcc>
 8008e7c:	2305      	movs	r3, #5
 8008e7e:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8008e80:	e020      	b.n	8008ec4 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008e82:	7bbb      	ldrb	r3, [r7, #14]
 8008e84:	f003 0304 	and.w	r3, r3, #4
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d11d      	bne.n	8008ec8 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008e92:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	330b      	adds	r3, #11
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	f003 0310 	and.w	r3, r3, #16
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d102      	bne.n	8008ea8 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8008ea2:	2305      	movs	r3, #5
 8008ea4:	73fb      	strb	r3, [r7, #15]
 8008ea6:	e010      	b.n	8008eca <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008eae:	68b9      	ldr	r1, [r7, #8]
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f7ff fe05 	bl	8008ac0 <ld_clust>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008ebe:	e7be      	b.n	8008e3e <follow_path+0x46>
			if (res != FR_OK) break;
 8008ec0:	bf00      	nop
 8008ec2:	e002      	b.n	8008eca <follow_path+0xd2>
				break;
 8008ec4:	bf00      	nop
 8008ec6:	e000      	b.n	8008eca <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008ec8:	bf00      	nop
		}
	}

	return res;
 8008eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3710      	adds	r7, #16
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b087      	sub	sp, #28
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008edc:	f04f 33ff 	mov.w	r3, #4294967295
 8008ee0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d031      	beq.n	8008f4e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	617b      	str	r3, [r7, #20]
 8008ef0:	e002      	b.n	8008ef8 <get_ldnumber+0x24>
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	617b      	str	r3, [r7, #20]
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	2b20      	cmp	r3, #32
 8008efe:	d903      	bls.n	8008f08 <get_ldnumber+0x34>
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	2b3a      	cmp	r3, #58	@ 0x3a
 8008f06:	d1f4      	bne.n	8008ef2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	2b3a      	cmp	r3, #58	@ 0x3a
 8008f0e:	d11c      	bne.n	8008f4a <get_ldnumber+0x76>
			tp = *path;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	1c5a      	adds	r2, r3, #1
 8008f1a:	60fa      	str	r2, [r7, #12]
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	3b30      	subs	r3, #48	@ 0x30
 8008f20:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	2b09      	cmp	r3, #9
 8008f26:	d80e      	bhi.n	8008f46 <get_ldnumber+0x72>
 8008f28:	68fa      	ldr	r2, [r7, #12]
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d10a      	bne.n	8008f46 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d107      	bne.n	8008f46 <get_ldnumber+0x72>
					vol = (int)i;
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	617b      	str	r3, [r7, #20]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	697a      	ldr	r2, [r7, #20]
 8008f44:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	e002      	b.n	8008f50 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008f4e:	693b      	ldr	r3, [r7, #16]
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	371c      	adds	r7, #28
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bc80      	pop	{r7}
 8008f58:	4770      	bx	lr
	...

08008f5c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f04f 32ff 	mov.w	r2, #4294967295
 8008f74:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8008f78:	6839      	ldr	r1, [r7, #0]
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f7fe ffdd 	bl	8007f3a <move_window>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d001      	beq.n	8008f8a <check_fs+0x2e>
		return 3;
 8008f86:	2303      	movs	r3, #3
 8008f88:	e04a      	b.n	8009020 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008f90:	3301      	adds	r3, #1
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	021b      	lsls	r3, r3, #8
 8008f96:	b21a      	sxth	r2, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8008f9e:	b21b      	sxth	r3, r3
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	b21b      	sxth	r3, r3
 8008fa4:	4a20      	ldr	r2, [pc, #128]	@ (8009028 <check_fs+0xcc>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d001      	beq.n	8008fae <check_fs+0x52>
		return 2;
 8008faa:	2302      	movs	r3, #2
 8008fac:	e038      	b.n	8009020 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	3336      	adds	r3, #54	@ 0x36
 8008fb2:	3303      	adds	r3, #3
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	061a      	lsls	r2, r3, #24
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	3336      	adds	r3, #54	@ 0x36
 8008fbc:	3302      	adds	r3, #2
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	041b      	lsls	r3, r3, #16
 8008fc2:	431a      	orrs	r2, r3
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	3336      	adds	r3, #54	@ 0x36
 8008fc8:	3301      	adds	r3, #1
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	021b      	lsls	r3, r3, #8
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008fdc:	4a13      	ldr	r2, [pc, #76]	@ (800902c <check_fs+0xd0>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d101      	bne.n	8008fe6 <check_fs+0x8a>
		return 0;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	e01c      	b.n	8009020 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	3352      	adds	r3, #82	@ 0x52
 8008fea:	3303      	adds	r3, #3
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	061a      	lsls	r2, r3, #24
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	3352      	adds	r3, #82	@ 0x52
 8008ff4:	3302      	adds	r3, #2
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	041b      	lsls	r3, r3, #16
 8008ffa:	431a      	orrs	r2, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	3352      	adds	r3, #82	@ 0x52
 8009000:	3301      	adds	r3, #1
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	021b      	lsls	r3, r3, #8
 8009006:	4313      	orrs	r3, r2
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 800900e:	4313      	orrs	r3, r2
 8009010:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009014:	4a05      	ldr	r2, [pc, #20]	@ (800902c <check_fs+0xd0>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d101      	bne.n	800901e <check_fs+0xc2>
		return 0;
 800901a:	2300      	movs	r3, #0
 800901c:	e000      	b.n	8009020 <check_fs+0xc4>

	return 1;
 800901e:	2301      	movs	r3, #1
}
 8009020:	4618      	mov	r0, r3
 8009022:	3708      	adds	r7, #8
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	ffffaa55 	.word	0xffffaa55
 800902c:	00544146 	.word	0x00544146

08009030 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b096      	sub	sp, #88	@ 0x58
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	4613      	mov	r3, r2
 800903c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2200      	movs	r2, #0
 8009042:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009044:	68b8      	ldr	r0, [r7, #8]
 8009046:	f7ff ff45 	bl	8008ed4 <get_ldnumber>
 800904a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800904c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800904e:	2b00      	cmp	r3, #0
 8009050:	da01      	bge.n	8009056 <find_volume+0x26>
 8009052:	230b      	movs	r3, #11
 8009054:	e2a8      	b.n	80095a8 <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009056:	4a9d      	ldr	r2, [pc, #628]	@ (80092cc <find_volume+0x29c>)
 8009058:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800905a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800905e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009062:	2b00      	cmp	r3, #0
 8009064:	d101      	bne.n	800906a <find_volume+0x3a>
 8009066:	230c      	movs	r3, #12
 8009068:	e29e      	b.n	80095a8 <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800906e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8009070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009072:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009076:	2b00      	cmp	r3, #0
 8009078:	d01b      	beq.n	80090b2 <find_volume+0x82>
		stat = disk_status(fs->drv);
 800907a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800907c:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009080:	4618      	mov	r0, r3
 8009082:	f7fe fc47 	bl	8007914 <disk_status>
 8009086:	4603      	mov	r3, r0
 8009088:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800908c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009090:	f003 0301 	and.w	r3, r3, #1
 8009094:	2b00      	cmp	r3, #0
 8009096:	d10c      	bne.n	80090b2 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8009098:	79fb      	ldrb	r3, [r7, #7]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d007      	beq.n	80090ae <find_volume+0x7e>
 800909e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80090a2:	f003 0304 	and.w	r3, r3, #4
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d001      	beq.n	80090ae <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 80090aa:	230a      	movs	r3, #10
 80090ac:	e27c      	b.n	80095a8 <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 80090ae:	2300      	movs	r3, #0
 80090b0:	e27a      	b.n	80095a8 <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80090b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090b4:	2200      	movs	r2, #0
 80090b6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80090ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090bc:	b2da      	uxtb	r2, r3
 80090be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090c0:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80090c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090c6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7fe fc3c 	bl	8007948 <disk_initialize>
 80090d0:	4603      	mov	r3, r0
 80090d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80090d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80090da:	f003 0301 	and.w	r3, r3, #1
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d001      	beq.n	80090e6 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80090e2:	2303      	movs	r3, #3
 80090e4:	e260      	b.n	80095a8 <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80090e6:	79fb      	ldrb	r3, [r7, #7]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d007      	beq.n	80090fc <find_volume+0xcc>
 80090ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80090f0:	f003 0304 	and.w	r3, r3, #4
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d001      	beq.n	80090fc <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 80090f8:	230a      	movs	r3, #10
 80090fa:	e255      	b.n	80095a8 <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80090fc:	2300      	movs	r3, #0
 80090fe:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8009100:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009102:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009104:	f7ff ff2a 	bl	8008f5c <check_fs>
 8009108:	4603      	mov	r3, r0
 800910a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800910e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009112:	2b01      	cmp	r3, #1
 8009114:	d153      	bne.n	80091be <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8009116:	2300      	movs	r3, #0
 8009118:	643b      	str	r3, [r7, #64]	@ 0x40
 800911a:	e028      	b.n	800916e <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800911c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800911e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009120:	011b      	lsls	r3, r3, #4
 8009122:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009126:	4413      	add	r3, r2
 8009128:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800912a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800912c:	3304      	adds	r3, #4
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d012      	beq.n	800915a <find_volume+0x12a>
 8009134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009136:	330b      	adds	r3, #11
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	061a      	lsls	r2, r3, #24
 800913c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800913e:	330a      	adds	r3, #10
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	041b      	lsls	r3, r3, #16
 8009144:	431a      	orrs	r2, r3
 8009146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009148:	3309      	adds	r3, #9
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	021b      	lsls	r3, r3, #8
 800914e:	4313      	orrs	r3, r2
 8009150:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009152:	3208      	adds	r2, #8
 8009154:	7812      	ldrb	r2, [r2, #0]
 8009156:	431a      	orrs	r2, r3
 8009158:	e000      	b.n	800915c <find_volume+0x12c>
 800915a:	2200      	movs	r2, #0
 800915c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	3358      	adds	r3, #88	@ 0x58
 8009162:	443b      	add	r3, r7
 8009164:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8009168:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800916a:	3301      	adds	r3, #1
 800916c:	643b      	str	r3, [r7, #64]	@ 0x40
 800916e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009170:	2b03      	cmp	r3, #3
 8009172:	d9d3      	bls.n	800911c <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8009174:	2300      	movs	r3, #0
 8009176:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8009178:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800917a:	2b00      	cmp	r3, #0
 800917c:	d002      	beq.n	8009184 <find_volume+0x154>
 800917e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009180:	3b01      	subs	r3, #1
 8009182:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8009184:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	3358      	adds	r3, #88	@ 0x58
 800918a:	443b      	add	r3, r7
 800918c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009190:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8009192:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009194:	2b00      	cmp	r3, #0
 8009196:	d005      	beq.n	80091a4 <find_volume+0x174>
 8009198:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800919a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800919c:	f7ff fede 	bl	8008f5c <check_fs>
 80091a0:	4603      	mov	r3, r0
 80091a2:	e000      	b.n	80091a6 <find_volume+0x176>
 80091a4:	2302      	movs	r3, #2
 80091a6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80091aa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d005      	beq.n	80091be <find_volume+0x18e>
 80091b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091b4:	3301      	adds	r3, #1
 80091b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80091b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091ba:	2b03      	cmp	r3, #3
 80091bc:	d9e2      	bls.n	8009184 <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80091be:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80091c2:	2b03      	cmp	r3, #3
 80091c4:	d101      	bne.n	80091ca <find_volume+0x19a>
 80091c6:	2301      	movs	r3, #1
 80091c8:	e1ee      	b.n	80095a8 <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80091ca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d001      	beq.n	80091d6 <find_volume+0x1a6>
 80091d2:	230d      	movs	r3, #13
 80091d4:	e1e8      	b.n	80095a8 <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80091d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d8:	7b1b      	ldrb	r3, [r3, #12]
 80091da:	021b      	lsls	r3, r3, #8
 80091dc:	b21a      	sxth	r2, r3
 80091de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e0:	7adb      	ldrb	r3, [r3, #11]
 80091e2:	b21b      	sxth	r3, r3
 80091e4:	4313      	orrs	r3, r2
 80091e6:	b21b      	sxth	r3, r3
 80091e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091ec:	d001      	beq.n	80091f2 <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 80091ee:	230d      	movs	r3, #13
 80091f0:	e1da      	b.n	80095a8 <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80091f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f4:	7ddb      	ldrb	r3, [r3, #23]
 80091f6:	021b      	lsls	r3, r3, #8
 80091f8:	b21a      	sxth	r2, r3
 80091fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091fc:	7d9b      	ldrb	r3, [r3, #22]
 80091fe:	b21b      	sxth	r3, r3
 8009200:	4313      	orrs	r3, r2
 8009202:	b21b      	sxth	r3, r3
 8009204:	b29b      	uxth	r3, r3
 8009206:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8009208:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800920a:	2b00      	cmp	r3, #0
 800920c:	d112      	bne.n	8009234 <find_volume+0x204>
 800920e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009210:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8009214:	061a      	lsls	r2, r3, #24
 8009216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009218:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800921c:	041b      	lsls	r3, r3, #16
 800921e:	431a      	orrs	r2, r3
 8009220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009222:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009226:	021b      	lsls	r3, r3, #8
 8009228:	4313      	orrs	r3, r2
 800922a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800922c:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8009230:	4313      	orrs	r3, r2
 8009232:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 8009234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009236:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009238:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800923c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800923e:	7c1a      	ldrb	r2, [r3, #16]
 8009240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009242:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8009246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009248:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 800924c:	2b01      	cmp	r3, #1
 800924e:	d006      	beq.n	800925e <find_volume+0x22e>
 8009250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009252:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8009256:	2b02      	cmp	r3, #2
 8009258:	d001      	beq.n	800925e <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 800925a:	230d      	movs	r3, #13
 800925c:	e1a4      	b.n	80095a8 <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800925e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009260:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8009264:	461a      	mov	r2, r3
 8009266:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009268:	fb02 f303 	mul.w	r3, r2, r3
 800926c:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800926e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009270:	7b5a      	ldrb	r2, [r3, #13]
 8009272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009274:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8009278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800927a:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00a      	beq.n	8009298 <find_volume+0x268>
 8009282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009284:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8009288:	461a      	mov	r2, r3
 800928a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800928c:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8009290:	3b01      	subs	r3, #1
 8009292:	4013      	ands	r3, r2
 8009294:	2b00      	cmp	r3, #0
 8009296:	d001      	beq.n	800929c <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 8009298:	230d      	movs	r3, #13
 800929a:	e185      	b.n	80095a8 <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800929c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800929e:	7c9b      	ldrb	r3, [r3, #18]
 80092a0:	021b      	lsls	r3, r3, #8
 80092a2:	b21a      	sxth	r2, r3
 80092a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092a6:	7c5b      	ldrb	r3, [r3, #17]
 80092a8:	b21b      	sxth	r3, r3
 80092aa:	4313      	orrs	r3, r2
 80092ac:	b21b      	sxth	r3, r3
 80092ae:	b29a      	uxth	r2, r3
 80092b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b2:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80092b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b8:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 80092bc:	f003 030f 	and.w	r3, r3, #15
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d004      	beq.n	80092d0 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 80092c6:	230d      	movs	r3, #13
 80092c8:	e16e      	b.n	80095a8 <find_volume+0x578>
 80092ca:	bf00      	nop
 80092cc:	200036b4 	.word	0x200036b4

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80092d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092d2:	7d1b      	ldrb	r3, [r3, #20]
 80092d4:	021b      	lsls	r3, r3, #8
 80092d6:	b21a      	sxth	r2, r3
 80092d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092da:	7cdb      	ldrb	r3, [r3, #19]
 80092dc:	b21b      	sxth	r3, r3
 80092de:	4313      	orrs	r3, r2
 80092e0:	b21b      	sxth	r3, r3
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80092e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d112      	bne.n	8009312 <find_volume+0x2e2>
 80092ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ee:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80092f2:	061a      	lsls	r2, r3, #24
 80092f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092f6:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80092fa:	041b      	lsls	r3, r3, #16
 80092fc:	431a      	orrs	r2, r3
 80092fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009300:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009304:	021b      	lsls	r3, r3, #8
 8009306:	4313      	orrs	r3, r2
 8009308:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800930a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800930e:	4313      	orrs	r3, r2
 8009310:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8009312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009314:	7bdb      	ldrb	r3, [r3, #15]
 8009316:	021b      	lsls	r3, r3, #8
 8009318:	b21a      	sxth	r2, r3
 800931a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800931c:	7b9b      	ldrb	r3, [r3, #14]
 800931e:	b21b      	sxth	r3, r3
 8009320:	4313      	orrs	r3, r2
 8009322:	b21b      	sxth	r3, r3
 8009324:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8009326:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009328:	2b00      	cmp	r3, #0
 800932a:	d101      	bne.n	8009330 <find_volume+0x300>
 800932c:	230d      	movs	r3, #13
 800932e:	e13b      	b.n	80095a8 <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8009330:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009332:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009334:	4413      	add	r3, r2
 8009336:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009338:	f8b2 2208 	ldrh.w	r2, [r2, #520]	@ 0x208
 800933c:	0912      	lsrs	r2, r2, #4
 800933e:	b292      	uxth	r2, r2
 8009340:	4413      	add	r3, r2
 8009342:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009344:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009348:	429a      	cmp	r2, r3
 800934a:	d201      	bcs.n	8009350 <find_volume+0x320>
 800934c:	230d      	movs	r3, #13
 800934e:	e12b      	b.n	80095a8 <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8009350:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009358:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 800935c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009360:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8009362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009364:	2b00      	cmp	r3, #0
 8009366:	d101      	bne.n	800936c <find_volume+0x33c>
 8009368:	230d      	movs	r3, #13
 800936a:	e11d      	b.n	80095a8 <find_volume+0x578>
	fmt = FS_FAT12;
 800936c:	2301      	movs	r3, #1
 800936e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8009372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009374:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009378:	4293      	cmp	r3, r2
 800937a:	d902      	bls.n	8009382 <find_volume+0x352>
 800937c:	2302      	movs	r3, #2
 800937e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8009382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009384:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009388:	4293      	cmp	r3, r2
 800938a:	d902      	bls.n	8009392 <find_volume+0x362>
 800938c:	2303      	movs	r3, #3
 800938e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8009392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009394:	1c9a      	adds	r2, r3, #2
 8009396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009398:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
	fs->volbase = bsect;								/* Volume start sector */
 800939c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800939e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80093a0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80093a4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80093a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093a8:	441a      	add	r2, r3
 80093aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ac:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 80093b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80093b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b4:	441a      	add	r2, r3
 80093b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093b8:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
	if (fmt == FS_FAT32) {
 80093bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80093c0:	2b03      	cmp	r3, #3
 80093c2:	d121      	bne.n	8009408 <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80093c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093c6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d001      	beq.n	80093d2 <find_volume+0x3a2>
 80093ce:	230d      	movs	r3, #13
 80093d0:	e0ea      	b.n	80095a8 <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80093d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093d4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80093d8:	061a      	lsls	r2, r3, #24
 80093da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093dc:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80093e0:	041b      	lsls	r3, r3, #16
 80093e2:	431a      	orrs	r2, r3
 80093e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093e6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80093ea:	021b      	lsls	r3, r3, #8
 80093ec:	4313      	orrs	r3, r2
 80093ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80093f0:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 80093f4:	431a      	orrs	r2, r3
 80093f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f8:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80093fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	647b      	str	r3, [r7, #68]	@ 0x44
 8009406:	e025      	b.n	8009454 <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8009408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800940a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800940e:	2b00      	cmp	r3, #0
 8009410:	d101      	bne.n	8009416 <find_volume+0x3e6>
 8009412:	230d      	movs	r3, #13
 8009414:	e0c8      	b.n	80095a8 <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8009416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009418:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 800941c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800941e:	441a      	add	r2, r3
 8009420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009422:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009426:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800942a:	2b02      	cmp	r3, #2
 800942c:	d104      	bne.n	8009438 <find_volume+0x408>
 800942e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009430:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009434:	005b      	lsls	r3, r3, #1
 8009436:	e00c      	b.n	8009452 <find_volume+0x422>
 8009438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800943a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800943e:	4613      	mov	r3, r2
 8009440:	005b      	lsls	r3, r3, #1
 8009442:	4413      	add	r3, r2
 8009444:	085a      	lsrs	r2, r3, #1
 8009446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009448:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800944c:	f003 0301 	and.w	r3, r3, #1
 8009450:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8009452:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8009454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009456:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800945a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800945c:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8009460:	0a5b      	lsrs	r3, r3, #9
 8009462:	429a      	cmp	r2, r3
 8009464:	d201      	bcs.n	800946a <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 8009466:	230d      	movs	r3, #13
 8009468:	e09e      	b.n	80095a8 <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800946a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800946c:	f04f 32ff 	mov.w	r2, #4294967295
 8009470:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
 8009474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009476:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800947a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800947c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8009480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009482:	2280      	movs	r2, #128	@ 0x80
 8009484:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8009488:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800948c:	2b03      	cmp	r3, #3
 800948e:	d177      	bne.n	8009580 <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8009490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009492:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009496:	021b      	lsls	r3, r3, #8
 8009498:	b21a      	sxth	r2, r3
 800949a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800949c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80094a0:	b21b      	sxth	r3, r3
 80094a2:	4313      	orrs	r3, r2
 80094a4:	b21b      	sxth	r3, r3
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d16a      	bne.n	8009580 <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 80094aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094ac:	3301      	adds	r3, #1
 80094ae:	4619      	mov	r1, r3
 80094b0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80094b2:	f7fe fd42 	bl	8007f3a <move_window>
 80094b6:	4603      	mov	r3, r0
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d161      	bne.n	8009580 <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 80094bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094be:	2200      	movs	r2, #0
 80094c0:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80094c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094c6:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 80094ca:	021b      	lsls	r3, r3, #8
 80094cc:	b21a      	sxth	r2, r3
 80094ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d0:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 80094d4:	b21b      	sxth	r3, r3
 80094d6:	4313      	orrs	r3, r2
 80094d8:	b21b      	sxth	r3, r3
 80094da:	4a35      	ldr	r2, [pc, #212]	@ (80095b0 <find_volume+0x580>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d14f      	bne.n	8009580 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80094e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094e2:	78db      	ldrb	r3, [r3, #3]
 80094e4:	061a      	lsls	r2, r3, #24
 80094e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094e8:	789b      	ldrb	r3, [r3, #2]
 80094ea:	041b      	lsls	r3, r3, #16
 80094ec:	431a      	orrs	r2, r3
 80094ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f0:	785b      	ldrb	r3, [r3, #1]
 80094f2:	021b      	lsls	r3, r3, #8
 80094f4:	4313      	orrs	r3, r2
 80094f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80094f8:	7812      	ldrb	r2, [r2, #0]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	4a2d      	ldr	r2, [pc, #180]	@ (80095b4 <find_volume+0x584>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d13e      	bne.n	8009580 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8009502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009504:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 8009508:	061a      	lsls	r2, r3, #24
 800950a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800950c:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 8009510:	041b      	lsls	r3, r3, #16
 8009512:	431a      	orrs	r2, r3
 8009514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009516:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 800951a:	021b      	lsls	r3, r3, #8
 800951c:	4313      	orrs	r3, r2
 800951e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009520:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 8009524:	4313      	orrs	r3, r2
 8009526:	4a24      	ldr	r2, [pc, #144]	@ (80095b8 <find_volume+0x588>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d129      	bne.n	8009580 <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800952c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800952e:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 8009532:	061a      	lsls	r2, r3, #24
 8009534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009536:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 800953a:	041b      	lsls	r3, r3, #16
 800953c:	431a      	orrs	r2, r3
 800953e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009540:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 8009544:	021b      	lsls	r3, r3, #8
 8009546:	4313      	orrs	r3, r2
 8009548:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800954a:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 800954e:	431a      	orrs	r2, r3
 8009550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009552:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8009556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009558:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 800955c:	061a      	lsls	r2, r3, #24
 800955e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009560:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 8009564:	041b      	lsls	r3, r3, #16
 8009566:	431a      	orrs	r2, r3
 8009568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800956a:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 800956e:	021b      	lsls	r3, r3, #8
 8009570:	4313      	orrs	r3, r2
 8009572:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009574:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 8009578:	431a      	orrs	r2, r3
 800957a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800957c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8009580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009582:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8009586:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800958a:	4b0c      	ldr	r3, [pc, #48]	@ (80095bc <find_volume+0x58c>)
 800958c:	881b      	ldrh	r3, [r3, #0]
 800958e:	3301      	adds	r3, #1
 8009590:	b29a      	uxth	r2, r3
 8009592:	4b0a      	ldr	r3, [pc, #40]	@ (80095bc <find_volume+0x58c>)
 8009594:	801a      	strh	r2, [r3, #0]
 8009596:	4b09      	ldr	r3, [pc, #36]	@ (80095bc <find_volume+0x58c>)
 8009598:	881a      	ldrh	r2, [r3, #0]
 800959a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800959c:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80095a0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80095a2:	f7fe fc57 	bl	8007e54 <clear_lock>
#endif

	return FR_OK;
 80095a6:	2300      	movs	r3, #0
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3758      	adds	r7, #88	@ 0x58
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	ffffaa55 	.word	0xffffaa55
 80095b4:	41615252 	.word	0x41615252
 80095b8:	61417272 	.word	0x61417272
 80095bc:	200036b8 	.word	0x200036b8

080095c0 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d022      	beq.n	8009618 <validate+0x58>
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d01d      	beq.n	8009618 <validate+0x58>
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80095e2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d016      	beq.n	8009618 <validate+0x58>
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80095f0:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d10c      	bne.n	8009618 <validate+0x58>
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009604:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009608:	4618      	mov	r0, r3
 800960a:	f7fe f983 	bl	8007914 <disk_status>
 800960e:	4603      	mov	r3, r0
 8009610:	f003 0301 	and.w	r3, r3, #1
 8009614:	2b00      	cmp	r3, #0
 8009616:	d001      	beq.n	800961c <validate+0x5c>
		return FR_INVALID_OBJECT;
 8009618:	2309      	movs	r3, #9
 800961a:	e000      	b.n	800961e <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800961c:	2300      	movs	r3, #0
}
 800961e:	4618      	mov	r0, r3
 8009620:	3710      	adds	r7, #16
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
	...

08009628 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b088      	sub	sp, #32
 800962c:	af00      	add	r7, sp, #0
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	4613      	mov	r3, r2
 8009634:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800963a:	f107 0310 	add.w	r3, r7, #16
 800963e:	4618      	mov	r0, r3
 8009640:	f7ff fc48 	bl	8008ed4 <get_ldnumber>
 8009644:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009646:	69fb      	ldr	r3, [r7, #28]
 8009648:	2b00      	cmp	r3, #0
 800964a:	da01      	bge.n	8009650 <f_mount+0x28>
 800964c:	230b      	movs	r3, #11
 800964e:	e02d      	b.n	80096ac <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009650:	4a18      	ldr	r2, [pc, #96]	@ (80096b4 <f_mount+0x8c>)
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009658:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d006      	beq.n	800966e <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8009660:	69b8      	ldr	r0, [r7, #24]
 8009662:	f7fe fbf7 	bl	8007e54 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009666:	69bb      	ldr	r3, [r7, #24]
 8009668:	2200      	movs	r2, #0
 800966a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	}

	if (fs) {
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d003      	beq.n	800967c <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2200      	movs	r2, #0
 8009678:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	490d      	ldr	r1, [pc, #52]	@ (80096b4 <f_mount+0x8c>)
 8009680:	69fb      	ldr	r3, [r7, #28]
 8009682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d002      	beq.n	8009692 <f_mount+0x6a>
 800968c:	79fb      	ldrb	r3, [r7, #7]
 800968e:	2b01      	cmp	r3, #1
 8009690:	d001      	beq.n	8009696 <f_mount+0x6e>
 8009692:	2300      	movs	r3, #0
 8009694:	e00a      	b.n	80096ac <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8009696:	f107 0108 	add.w	r1, r7, #8
 800969a:	f107 030c 	add.w	r3, r7, #12
 800969e:	2200      	movs	r2, #0
 80096a0:	4618      	mov	r0, r3
 80096a2:	f7ff fcc5 	bl	8009030 <find_volume>
 80096a6:	4603      	mov	r3, r0
 80096a8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80096aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3720      	adds	r7, #32
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	200036b4 	.word	0x200036b4

080096b8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	f5ad 7d14 	sub.w	sp, sp, #592	@ 0x250
 80096be:	af00      	add	r7, sp, #0
 80096c0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80096c4:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80096c8:	6018      	str	r0, [r3, #0]
 80096ca:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80096ce:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80096d2:	6019      	str	r1, [r3, #0]
 80096d4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80096d8:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80096dc:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80096de:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80096e2:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d101      	bne.n	80096f0 <f_open+0x38>
 80096ec:	2309      	movs	r3, #9
 80096ee:	e253      	b.n	8009b98 <f_open+0x4e0>
	fp->fs = 0;			/* Clear file object */
 80096f0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80096f4:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8009700:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009704:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8009708:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 800970c:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 8009710:	7812      	ldrb	r2, [r2, #0]
 8009712:	f002 021f 	and.w	r2, r2, #31
 8009716:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8009718:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800971c:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	f023 0301 	bic.w	r3, r3, #1
 8009726:	b2da      	uxtb	r2, r3
 8009728:	f107 0108 	add.w	r1, r7, #8
 800972c:	f107 0320 	add.w	r3, r7, #32
 8009730:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8009734:	4618      	mov	r0, r3
 8009736:	f7ff fc7b 	bl	8009030 <find_volume>
 800973a:	4603      	mov	r3, r0
 800973c:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8009740:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8009744:	2b00      	cmp	r3, #0
 8009746:	f040 8225 	bne.w	8009b94 <f_open+0x4dc>
		INIT_BUF(dj);
 800974a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800974e:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8009752:	f107 0214 	add.w	r2, r7, #20
 8009756:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 800975a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800975e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	f107 0320 	add.w	r3, r7, #32
 8009768:	4611      	mov	r1, r2
 800976a:	4618      	mov	r0, r3
 800976c:	f7ff fb44 	bl	8008df8 <follow_path>
 8009770:	4603      	mov	r3, r0
 8009772:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
		dir = dj.dir;
 8009776:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800977a:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800977e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009782:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009786:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800978a:	2b00      	cmp	r3, #0
 800978c:	d11b      	bne.n	80097c6 <f_open+0x10e>
			if (!dir)	/* Default directory itself */
 800978e:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8009792:	2b00      	cmp	r3, #0
 8009794:	d103      	bne.n	800979e <f_open+0xe6>
				res = FR_INVALID_NAME;
 8009796:	2306      	movs	r3, #6
 8009798:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 800979c:	e013      	b.n	80097c6 <f_open+0x10e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800979e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80097a2:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	bf8c      	ite	hi
 80097ac:	2301      	movhi	r3, #1
 80097ae:	2300      	movls	r3, #0
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	461a      	mov	r2, r3
 80097b4:	f107 0320 	add.w	r3, r7, #32
 80097b8:	4611      	mov	r1, r2
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7fe f9c0 	bl	8007b40 <chk_lock>
 80097c0:	4603      	mov	r3, r0
 80097c2:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80097c6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80097ca:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	f003 031c 	and.w	r3, r3, #28
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	f000 80e6 	beq.w	80099a6 <f_open+0x2ee>
			if (res != FR_OK) {					/* No file, create new */
 80097da:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d027      	beq.n	8009832 <f_open+0x17a>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80097e2:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80097e6:	2b04      	cmp	r3, #4
 80097e8:	d10e      	bne.n	8009808 <f_open+0x150>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80097ea:	f7fe fa15 	bl	8007c18 <enq_lock>
 80097ee:	4603      	mov	r3, r0
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d006      	beq.n	8009802 <f_open+0x14a>
 80097f4:	f107 0320 	add.w	r3, r7, #32
 80097f8:	4618      	mov	r0, r3
 80097fa:	f7ff fa03 	bl	8008c04 <dir_register>
 80097fe:	4603      	mov	r3, r0
 8009800:	e000      	b.n	8009804 <f_open+0x14c>
 8009802:	2312      	movs	r3, #18
 8009804:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009808:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800980c:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8009810:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8009814:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 8009818:	7812      	ldrb	r2, [r2, #0]
 800981a:	f042 0208 	orr.w	r2, r2, #8
 800981e:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8009820:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009824:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8009828:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800982c:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 8009830:	e017      	b.n	8009862 <f_open+0x1aa>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009832:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8009836:	330b      	adds	r3, #11
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	f003 0311 	and.w	r3, r3, #17
 800983e:	2b00      	cmp	r3, #0
 8009840:	d003      	beq.n	800984a <f_open+0x192>
					res = FR_DENIED;
 8009842:	2307      	movs	r3, #7
 8009844:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 8009848:	e00b      	b.n	8009862 <f_open+0x1aa>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800984a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800984e:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8009852:	781b      	ldrb	r3, [r3, #0]
 8009854:	f003 0304 	and.w	r3, r3, #4
 8009858:	2b00      	cmp	r3, #0
 800985a:	d002      	beq.n	8009862 <f_open+0x1aa>
						res = FR_EXIST;
 800985c:	2308      	movs	r3, #8
 800985e:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009862:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8009866:	2b00      	cmp	r3, #0
 8009868:	f040 80c1 	bne.w	80099ee <f_open+0x336>
 800986c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009870:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	f003 0308 	and.w	r3, r3, #8
 800987a:	2b00      	cmp	r3, #0
 800987c:	f000 80b7 	beq.w	80099ee <f_open+0x336>
				dw = GET_FATTIME();				/* Created time */
 8009880:	f7fd fff0 	bl	8007864 <get_fattime>
 8009884:	f8c7 0244 	str.w	r0, [r7, #580]	@ 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8009888:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800988c:	330e      	adds	r3, #14
 800988e:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8009892:	b2d2      	uxtb	r2, r2
 8009894:	701a      	strb	r2, [r3, #0]
 8009896:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 800989a:	b29b      	uxth	r3, r3
 800989c:	0a1b      	lsrs	r3, r3, #8
 800989e:	b29a      	uxth	r2, r3
 80098a0:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80098a4:	330f      	adds	r3, #15
 80098a6:	b2d2      	uxtb	r2, r2
 80098a8:	701a      	strb	r2, [r3, #0]
 80098aa:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 80098ae:	0c1a      	lsrs	r2, r3, #16
 80098b0:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80098b4:	3310      	adds	r3, #16
 80098b6:	b2d2      	uxtb	r2, r2
 80098b8:	701a      	strb	r2, [r3, #0]
 80098ba:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 80098be:	0e1a      	lsrs	r2, r3, #24
 80098c0:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80098c4:	3311      	adds	r3, #17
 80098c6:	b2d2      	uxtb	r2, r2
 80098c8:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80098ca:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80098ce:	330b      	adds	r3, #11
 80098d0:	2200      	movs	r2, #0
 80098d2:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80098d4:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80098d8:	331c      	adds	r3, #28
 80098da:	2200      	movs	r2, #0
 80098dc:	701a      	strb	r2, [r3, #0]
 80098de:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80098e2:	331d      	adds	r3, #29
 80098e4:	2200      	movs	r2, #0
 80098e6:	701a      	strb	r2, [r3, #0]
 80098e8:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80098ec:	331e      	adds	r3, #30
 80098ee:	2200      	movs	r2, #0
 80098f0:	701a      	strb	r2, [r3, #0]
 80098f2:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80098f6:	331f      	adds	r3, #31
 80098f8:	2200      	movs	r2, #0
 80098fa:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80098fc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009900:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8009904:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009908:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 800990c:	4618      	mov	r0, r3
 800990e:	f7ff f8d7 	bl	8008ac0 <ld_clust>
 8009912:	f8c7 0240 	str.w	r0, [r7, #576]	@ 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 8009916:	2100      	movs	r1, #0
 8009918:	f8d7 0248 	ldr.w	r0, [r7, #584]	@ 0x248
 800991c:	f7ff f8fd 	bl	8008b1a <st_clust>
				dj.fs->wflag = 1;
 8009920:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009924:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8009928:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800992c:	2201      	movs	r2, #1
 800992e:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8009932:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8009936:	2b00      	cmp	r3, #0
 8009938:	d059      	beq.n	80099ee <f_open+0x336>
					dw = dj.fs->winsect;
 800993a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800993e:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8009942:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009946:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800994a:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
					res = remove_chain(dj.fs, cl);
 800994e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009952:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8009956:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800995a:	f8d7 1240 	ldr.w	r1, [r7, #576]	@ 0x240
 800995e:	4618      	mov	r0, r3
 8009960:	f7fe fdae 	bl	80084c0 <remove_chain>
 8009964:	4603      	mov	r3, r0
 8009966:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
					if (res == FR_OK) {
 800996a:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800996e:	2b00      	cmp	r3, #0
 8009970:	d13d      	bne.n	80099ee <f_open+0x336>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8009972:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009976:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800997a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800997e:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 8009982:	3a01      	subs	r2, #1
 8009984:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
						res = move_window(dj.fs, dw);
 8009988:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800998c:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8009990:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009994:	f8d7 1244 	ldr.w	r1, [r7, #580]	@ 0x244
 8009998:	4618      	mov	r0, r3
 800999a:	f7fe face 	bl	8007f3a <move_window>
 800999e:	4603      	mov	r3, r0
 80099a0:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 80099a4:	e023      	b.n	80099ee <f_open+0x336>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80099a6:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d11f      	bne.n	80099ee <f_open+0x336>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80099ae:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80099b2:	330b      	adds	r3, #11
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	f003 0310 	and.w	r3, r3, #16
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d003      	beq.n	80099c6 <f_open+0x30e>
					res = FR_NO_FILE;
 80099be:	2304      	movs	r3, #4
 80099c0:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 80099c4:	e013      	b.n	80099ee <f_open+0x336>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80099c6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80099ca:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	f003 0302 	and.w	r3, r3, #2
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d00a      	beq.n	80099ee <f_open+0x336>
 80099d8:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80099dc:	330b      	adds	r3, #11
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	f003 0301 	and.w	r3, r3, #1
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d002      	beq.n	80099ee <f_open+0x336>
						res = FR_DENIED;
 80099e8:	2307      	movs	r3, #7
 80099ea:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
				}
			}
		}
		if (res == FR_OK) {
 80099ee:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d151      	bne.n	8009a9a <f_open+0x3e2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80099f6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80099fa:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	f003 0308 	and.w	r3, r3, #8
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d00b      	beq.n	8009a20 <f_open+0x368>
				mode |= FA__WRITTEN;
 8009a08:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009a0c:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8009a10:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8009a14:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 8009a18:	7812      	ldrb	r2, [r2, #0]
 8009a1a:	f042 0220 	orr.w	r2, r2, #32
 8009a1e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8009a20:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009a24:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8009a28:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009a2c:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
 8009a30:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009a34:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
			fp->dir_ptr = dir;
 8009a3e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009a42:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8009a4c:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009a50:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009a54:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	bf8c      	ite	hi
 8009a5e:	2301      	movhi	r3, #1
 8009a60:	2300      	movls	r3, #0
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	461a      	mov	r2, r3
 8009a66:	f107 0320 	add.w	r3, r7, #32
 8009a6a:	4611      	mov	r1, r2
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f7fe f8f7 	bl	8007c60 <inc_lock>
 8009a72:	4602      	mov	r2, r0
 8009a74:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009a78:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8009a82:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009a86:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d102      	bne.n	8009a9a <f_open+0x3e2>
 8009a94:	2302      	movs	r3, #2
 8009a96:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8009a9a:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d178      	bne.n	8009b94 <f_open+0x4dc>
			fp->flag = mode;					/* File access mode */
 8009aa2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009aa6:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8009ab0:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 8009ab4:	7812      	ldrb	r2, [r2, #0]
 8009ab6:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			fp->err = 0;						/* Clear error flag */
 8009aba:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009abe:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8009aca:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009ace:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8009ad2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009ad6:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7fe fff0 	bl	8008ac0 <ld_clust>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009ae6:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8009af0:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8009af4:	331f      	adds	r3, #31
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	061a      	lsls	r2, r3, #24
 8009afa:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8009afe:	331e      	adds	r3, #30
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	041b      	lsls	r3, r3, #16
 8009b04:	431a      	orrs	r2, r3
 8009b06:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8009b0a:	331d      	adds	r3, #29
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	021b      	lsls	r3, r3, #8
 8009b10:	4313      	orrs	r3, r2
 8009b12:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8009b16:	321c      	adds	r2, #28
 8009b18:	7812      	ldrb	r2, [r2, #0]
 8009b1a:	431a      	orrs	r2, r3
 8009b1c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009b20:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
			fp->fptr = 0;						/* File pointer */
 8009b2a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009b2e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2200      	movs	r2, #0
 8009b36:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			fp->dsect = 0;
 8009b3a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009b3e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	2200      	movs	r2, #0
 8009b46:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8009b4a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009b4e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2200      	movs	r2, #0
 8009b56:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8009b5a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009b5e:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8009b62:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8009b66:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009b6a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
			fp->id = fp->fs->id;
 8009b74:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009b78:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009b82:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 8009b86:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009b8a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8009b94:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f507 7714 	add.w	r7, r7, #592	@ 0x250
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b08c      	sub	sp, #48	@ 0x30
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	60f8      	str	r0, [r7, #12]
 8009baa:	60b9      	str	r1, [r7, #8]
 8009bac:	607a      	str	r2, [r7, #4]
 8009bae:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8009bba:	68f8      	ldr	r0, [r7, #12]
 8009bbc:	f7ff fd00 	bl	80095c0 <validate>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8009bc4:	7ffb      	ldrb	r3, [r7, #31]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d001      	beq.n	8009bce <f_read+0x2c>
 8009bca:	7ffb      	ldrb	r3, [r7, #31]
 8009bcc:	e150      	b.n	8009e70 <f_read+0x2ce>
	if (fp->err)								/* Check error */
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d003      	beq.n	8009be0 <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 8009bde:	e147      	b.n	8009e70 <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8009be6:	f003 0301 	and.w	r3, r3, #1
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d101      	bne.n	8009bf2 <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8009bee:	2307      	movs	r3, #7
 8009bf0:	e13e      	b.n	8009e70 <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8009bfe:	1ad3      	subs	r3, r2, r3
 8009c00:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	429a      	cmp	r2, r3
 8009c08:	f240 812d 	bls.w	8009e66 <f_read+0x2c4>
 8009c0c:	69bb      	ldr	r3, [r7, #24]
 8009c0e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009c10:	e129      	b.n	8009e66 <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8009c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	f040 80f2 	bne.w	8009e06 <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8009c28:	0a5b      	lsrs	r3, r3, #9
 8009c2a:	b2da      	uxtb	r2, r3
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009c32:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8009c36:	3b01      	subs	r3, #1
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	4013      	ands	r3, r2
 8009c3c:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8009c3e:	7dfb      	ldrb	r3, [r7, #23]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d139      	bne.n	8009cb8 <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d104      	bne.n	8009c58 <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c56:	e018      	b.n	8009c8a <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d008      	beq.n	8009c74 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8009c68:	4619      	mov	r1, r3
 8009c6a:	68f8      	ldr	r0, [r7, #12]
 8009c6c:	f7fe fd1f 	bl	80086ae <clmt_clust>
 8009c70:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009c72:	e00a      	b.n	8009c8a <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009c80:	4619      	mov	r1, r3
 8009c82:	4610      	mov	r0, r2
 8009c84:	f7fe fa55 	bl	8008132 <get_fat>
 8009c88:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8009c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d805      	bhi.n	8009c9c <f_read+0xfa>
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2202      	movs	r2, #2
 8009c94:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8009c98:	2302      	movs	r3, #2
 8009c9a:	e0e9      	b.n	8009e70 <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca2:	d105      	bne.n	8009cb0 <f_read+0x10e>
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8009cac:	2301      	movs	r3, #1
 8009cae:	e0df      	b.n	8009e70 <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cb4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	4610      	mov	r0, r2
 8009cc8:	f7fe fa12 	bl	80080f0 <clust2sect>
 8009ccc:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d105      	bne.n	8009ce0 <f_read+0x13e>
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2202      	movs	r2, #2
 8009cd8:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8009cdc:	2302      	movs	r3, #2
 8009cde:	e0c7      	b.n	8009e70 <f_read+0x2ce>
			sect += csect;
 8009ce0:	7dfb      	ldrb	r3, [r7, #23]
 8009ce2:	693a      	ldr	r2, [r7, #16]
 8009ce4:	4413      	add	r3, r2
 8009ce6:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	0a5b      	lsrs	r3, r3, #9
 8009cec:	627b      	str	r3, [r7, #36]	@ 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d046      	beq.n	8009d82 <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8009cf4:	7dfa      	ldrb	r2, [r7, #23]
 8009cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf8:	4413      	add	r3, r2
 8009cfa:	68fa      	ldr	r2, [r7, #12]
 8009cfc:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 8009d00:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d908      	bls.n	8009d1a <f_read+0x178>
					cc = fp->fs->csize - csect;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009d0e:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8009d12:	461a      	mov	r2, r3
 8009d14:	7dfb      	ldrb	r3, [r7, #23]
 8009d16:	1ad3      	subs	r3, r2, r3
 8009d18:	627b      	str	r3, [r7, #36]	@ 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009d20:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8009d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d26:	693a      	ldr	r2, [r7, #16]
 8009d28:	6a39      	ldr	r1, [r7, #32]
 8009d2a:	f7fd fe33 	bl	8007994 <disk_read>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d005      	beq.n	8009d40 <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2201      	movs	r2, #1
 8009d38:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	e097      	b.n	8009e70 <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8009d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d015      	beq.n	8009d7a <f_read+0x1d8>
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	1ad3      	subs	r3, r2, r3
 8009d58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	d90d      	bls.n	8009d7a <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	1ad3      	subs	r3, r2, r3
 8009d68:	025b      	lsls	r3, r3, #9
 8009d6a:	6a3a      	ldr	r2, [r7, #32]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	68f9      	ldr	r1, [r7, #12]
 8009d70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7fd fe6b 	bl	8007a50 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8009d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d7c:	025b      	lsls	r3, r3, #9
 8009d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
				continue;
 8009d80:	e05b      	b.n	8009e3a <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8009d88:	693a      	ldr	r2, [r7, #16]
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d037      	beq.n	8009dfe <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8009d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d01d      	beq.n	8009dd8 <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009da2:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8009da6:	68f9      	ldr	r1, [r7, #12]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8009dae:	2301      	movs	r3, #1
 8009db0:	f7fd fe10 	bl	80079d4 <disk_write>
 8009db4:	4603      	mov	r3, r0
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d005      	beq.n	8009dc6 <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e054      	b.n	8009e70 <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8009dcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009dd0:	b2da      	uxtb	r2, r3
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009dde:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8009de2:	68f9      	ldr	r1, [r7, #12]
 8009de4:	2301      	movs	r3, #1
 8009de6:	693a      	ldr	r2, [r7, #16]
 8009de8:	f7fd fdd4 	bl	8007994 <disk_read>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d005      	beq.n	8009dfe <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2201      	movs	r2, #1
 8009df6:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e038      	b.n	8009e70 <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	693a      	ldr	r2, [r7, #16]
 8009e02:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8009e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e10:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8009e14:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (rcnt > btr) rcnt = btr;
 8009e16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d901      	bls.n	8009e22 <f_read+0x280>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	62bb      	str	r3, [r7, #40]	@ 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8009e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	4413      	add	r3, r2
 8009e30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e32:	4619      	mov	r1, r3
 8009e34:	6a38      	ldr	r0, [r7, #32]
 8009e36:	f7fd fe0b 	bl	8007a50 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009e3a:	6a3a      	ldr	r2, [r7, #32]
 8009e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e3e:	4413      	add	r3, r2
 8009e40:	623b      	str	r3, [r7, #32]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e4a:	441a      	add	r2, r3
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e58:	441a      	add	r2, r3
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	601a      	str	r2, [r3, #0]
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e62:	1ad3      	subs	r3, r2, r3
 8009e64:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	f47f aed2 	bne.w	8009c12 <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8009e6e:	2300      	movs	r3, #0
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3730      	adds	r7, #48	@ 0x30
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b08a      	sub	sp, #40	@ 0x28
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	607a      	str	r2, [r7, #4]
 8009e84:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8009e90:	68f8      	ldr	r0, [r7, #12]
 8009e92:	f7ff fb95 	bl	80095c0 <validate>
 8009e96:	4603      	mov	r3, r0
 8009e98:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8009e9a:	7dfb      	ldrb	r3, [r7, #23]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d001      	beq.n	8009ea4 <f_write+0x2c>
 8009ea0:	7dfb      	ldrb	r3, [r7, #23]
 8009ea2:	e192      	b.n	800a1ca <f_write+0x352>
	if (fp->err)							/* Check error */
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d003      	beq.n	8009eb6 <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 8009eb4:	e189      	b.n	800a1ca <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8009ebc:	f003 0302 	and.w	r3, r3, #2
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d101      	bne.n	8009ec8 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8009ec4:	2307      	movs	r3, #7
 8009ec6:	e180      	b.n	800a1ca <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	441a      	add	r2, r3
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	f080 8158 	bcs.w	800a18e <f_write+0x316>
 8009ede:	2300      	movs	r3, #0
 8009ee0:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8009ee2:	e154      	b.n	800a18e <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8009eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	f040 8114 	bne.w	800a11c <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8009efa:	0a5b      	lsrs	r3, r3, #9
 8009efc:	b2da      	uxtb	r2, r3
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009f04:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8009f08:	3b01      	subs	r3, #1
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	4013      	ands	r3, r2
 8009f0e:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8009f10:	7dbb      	ldrb	r3, [r7, #22]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d151      	bne.n	8009fba <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d10f      	bne.n	8009f40 <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009f26:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8009f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d121      	bne.n	8009f72 <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009f34:	2100      	movs	r1, #0
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7fe fb1c 	bl	8008574 <create_chain>
 8009f3c:	6278      	str	r0, [r7, #36]	@ 0x24
 8009f3e:	e018      	b.n	8009f72 <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d008      	beq.n	8009f5c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8009f50:	4619      	mov	r1, r3
 8009f52:	68f8      	ldr	r0, [r7, #12]
 8009f54:	f7fe fbab 	bl	80086ae <clmt_clust>
 8009f58:	6278      	str	r0, [r7, #36]	@ 0x24
 8009f5a:	e00a      	b.n	8009f72 <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009f68:	4619      	mov	r1, r3
 8009f6a:	4610      	mov	r0, r2
 8009f6c:	f7fe fb02 	bl	8008574 <create_chain>
 8009f70:	6278      	str	r0, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	f000 810f 	beq.w	800a198 <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8009f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d105      	bne.n	8009f8c <f_write+0x114>
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2202      	movs	r2, #2
 8009f84:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8009f88:	2302      	movs	r3, #2
 8009f8a:	e11e      	b.n	800a1ca <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f92:	d105      	bne.n	8009fa0 <f_write+0x128>
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2201      	movs	r2, #1
 8009f98:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	e114      	b.n	800a1ca <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fa4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d103      	bne.n	8009fba <f_write+0x142>
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fb6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8009fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d01d      	beq.n	800a004 <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009fce:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8009fd2:	68f9      	ldr	r1, [r7, #12]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8009fda:	2301      	movs	r3, #1
 8009fdc:	f7fd fcfa 	bl	80079d4 <disk_write>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d005      	beq.n	8009ff2 <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2201      	movs	r2, #1
 8009fea:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8009fee:	2301      	movs	r3, #1
 8009ff0:	e0eb      	b.n	800a1ca <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8009ff8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ffc:	b2da      	uxtb	r2, r3
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a010:	4619      	mov	r1, r3
 800a012:	4610      	mov	r0, r2
 800a014:	f7fe f86c 	bl	80080f0 <clust2sect>
 800a018:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d105      	bne.n	800a02c <f_write+0x1b4>
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2202      	movs	r2, #2
 800a024:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800a028:	2302      	movs	r3, #2
 800a02a:	e0ce      	b.n	800a1ca <f_write+0x352>
			sect += csect;
 800a02c:	7dbb      	ldrb	r3, [r7, #22]
 800a02e:	693a      	ldr	r2, [r7, #16]
 800a030:	4413      	add	r3, r2
 800a032:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	0a5b      	lsrs	r3, r3, #9
 800a038:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a03a:	69fb      	ldr	r3, [r7, #28]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d048      	beq.n	800a0d2 <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800a040:	7dba      	ldrb	r2, [r7, #22]
 800a042:	69fb      	ldr	r3, [r7, #28]
 800a044:	4413      	add	r3, r2
 800a046:	68fa      	ldr	r2, [r7, #12]
 800a048:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 800a04c:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 800a050:	4293      	cmp	r3, r2
 800a052:	d908      	bls.n	800a066 <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a05a:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800a05e:	461a      	mov	r2, r3
 800a060:	7dbb      	ldrb	r3, [r7, #22]
 800a062:	1ad3      	subs	r3, r2, r3
 800a064:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a06c:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800a070:	69fb      	ldr	r3, [r7, #28]
 800a072:	693a      	ldr	r2, [r7, #16]
 800a074:	69b9      	ldr	r1, [r7, #24]
 800a076:	f7fd fcad 	bl	80079d4 <disk_write>
 800a07a:	4603      	mov	r3, r0
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d005      	beq.n	800a08c <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2201      	movs	r2, #1
 800a084:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800a088:	2301      	movs	r3, #1
 800a08a:	e09e      	b.n	800a1ca <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	1ad3      	subs	r3, r2, r3
 800a096:	69fa      	ldr	r2, [r7, #28]
 800a098:	429a      	cmp	r2, r3
 800a09a:	d916      	bls.n	800a0ca <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	1ad3      	subs	r3, r2, r3
 800a0a8:	025b      	lsls	r3, r3, #9
 800a0aa:	69ba      	ldr	r2, [r7, #24]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	f7fd fccc 	bl	8007a50 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800a0be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a0c2:	b2da      	uxtb	r2, r3
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800a0ca:	69fb      	ldr	r3, [r7, #28]
 800a0cc:	025b      	lsls	r3, r3, #9
 800a0ce:	623b      	str	r3, [r7, #32]
				continue;
 800a0d0:	e047      	b.n	800a162 <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800a0d8:	693a      	ldr	r2, [r7, #16]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d01a      	beq.n	800a114 <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d212      	bcs.n	800a114 <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a0f4:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800a0f8:	68f9      	ldr	r1, [r7, #12]
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	693a      	ldr	r2, [r7, #16]
 800a0fe:	f7fd fc49 	bl	8007994 <disk_read>
 800a102:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800a104:	2b00      	cmp	r3, #0
 800a106:	d005      	beq.n	800a114 <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800a110:	2301      	movs	r3, #1
 800a112:	e05a      	b.n	800a1ca <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	693a      	ldr	r2, [r7, #16]
 800a118:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800a122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a126:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800a12a:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800a12c:	6a3a      	ldr	r2, [r7, #32]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	429a      	cmp	r2, r3
 800a132:	d901      	bls.n	800a138 <f_write+0x2c0>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800a13e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a142:	68fa      	ldr	r2, [r7, #12]
 800a144:	4413      	add	r3, r2
 800a146:	6a3a      	ldr	r2, [r7, #32]
 800a148:	69b9      	ldr	r1, [r7, #24]
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7fd fc80 	bl	8007a50 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800a156:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a15a:	b2da      	uxtb	r2, r3
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800a162:	69ba      	ldr	r2, [r7, #24]
 800a164:	6a3b      	ldr	r3, [r7, #32]
 800a166:	4413      	add	r3, r2
 800a168:	61bb      	str	r3, [r7, #24]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a170:	6a3b      	ldr	r3, [r7, #32]
 800a172:	441a      	add	r2, r3
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	6a3b      	ldr	r3, [r7, #32]
 800a180:	441a      	add	r2, r3
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	601a      	str	r2, [r3, #0]
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	6a3b      	ldr	r3, [r7, #32]
 800a18a:	1ad3      	subs	r3, r2, r3
 800a18c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2b00      	cmp	r3, #0
 800a192:	f47f aea7 	bne.w	8009ee4 <f_write+0x6c>
 800a196:	e000      	b.n	800a19a <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a198:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d905      	bls.n	800a1b6 <f_write+0x33e>
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800a1bc:	f043 0320 	orr.w	r3, r3, #32
 800a1c0:	b2da      	uxtb	r2, r3
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206

	LEAVE_FF(fp->fs, FR_OK);
 800a1c8:	2300      	movs	r3, #0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3728      	adds	r7, #40	@ 0x28
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}

0800a1d2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a1d2:	b580      	push	{r7, lr}
 800a1d4:	b086      	sub	sp, #24
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f7ff f9f0 	bl	80095c0 <validate>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a1e4:	7dfb      	ldrb	r3, [r7, #23]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	f040 80a8 	bne.w	800a33c <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800a1f2:	f003 0320 	and.w	r3, r3, #32
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	f000 80a0 	beq.w	800a33c <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800a202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a206:	2b00      	cmp	r3, #0
 800a208:	d019      	beq.n	800a23e <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a210:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800a214:	6879      	ldr	r1, [r7, #4]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800a21c:	2301      	movs	r3, #1
 800a21e:	f7fd fbd9 	bl	80079d4 <disk_write>
 800a222:	4603      	mov	r3, r0
 800a224:	2b00      	cmp	r3, #0
 800a226:	d001      	beq.n	800a22c <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800a228:	2301      	movs	r3, #1
 800a22a:	e088      	b.n	800a33e <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800a232:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a236:	b2da      	uxtb	r2, r3
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800a24a:	4619      	mov	r1, r3
 800a24c:	4610      	mov	r0, r2
 800a24e:	f7fd fe74 	bl	8007f3a <move_window>
 800a252:	4603      	mov	r3, r0
 800a254:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800a256:	7dfb      	ldrb	r3, [r7, #23]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d16f      	bne.n	800a33c <f_sync+0x16a>
				dir = fp->dir_ptr;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800a262:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	330b      	adds	r3, #11
 800a268:	781a      	ldrb	r2, [r3, #0]
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	330b      	adds	r3, #11
 800a26e:	f042 0220 	orr.w	r2, r2, #32
 800a272:	b2d2      	uxtb	r2, r2
 800a274:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	331c      	adds	r3, #28
 800a280:	b2d2      	uxtb	r2, r2
 800a282:	701a      	strb	r2, [r3, #0]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	0a1b      	lsrs	r3, r3, #8
 800a28e:	b29a      	uxth	r2, r3
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	331d      	adds	r3, #29
 800a294:	b2d2      	uxtb	r2, r2
 800a296:	701a      	strb	r2, [r3, #0]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800a29e:	0c1a      	lsrs	r2, r3, #16
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	331e      	adds	r3, #30
 800a2a4:	b2d2      	uxtb	r2, r2
 800a2a6:	701a      	strb	r2, [r3, #0]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800a2ae:	0e1a      	lsrs	r2, r3, #24
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	331f      	adds	r3, #31
 800a2b4:	b2d2      	uxtb	r2, r2
 800a2b6:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a2be:	4619      	mov	r1, r3
 800a2c0:	6938      	ldr	r0, [r7, #16]
 800a2c2:	f7fe fc2a 	bl	8008b1a <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800a2c6:	f7fd facd 	bl	8007864 <get_fattime>
 800a2ca:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	3316      	adds	r3, #22
 800a2d0:	68fa      	ldr	r2, [r7, #12]
 800a2d2:	b2d2      	uxtb	r2, r2
 800a2d4:	701a      	strb	r2, [r3, #0]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	0a1b      	lsrs	r3, r3, #8
 800a2dc:	b29a      	uxth	r2, r3
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	3317      	adds	r3, #23
 800a2e2:	b2d2      	uxtb	r2, r2
 800a2e4:	701a      	strb	r2, [r3, #0]
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	0c1a      	lsrs	r2, r3, #16
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	3318      	adds	r3, #24
 800a2ee:	b2d2      	uxtb	r2, r2
 800a2f0:	701a      	strb	r2, [r3, #0]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	0e1a      	lsrs	r2, r3, #24
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	3319      	adds	r3, #25
 800a2fa:	b2d2      	uxtb	r2, r2
 800a2fc:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	3312      	adds	r3, #18
 800a302:	2200      	movs	r2, #0
 800a304:	701a      	strb	r2, [r3, #0]
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	3313      	adds	r3, #19
 800a30a:	2200      	movs	r2, #0
 800a30c:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800a314:	f023 0320 	bic.w	r3, r3, #32
 800a318:	b2da      	uxtb	r2, r3
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				fp->fs->wflag = 1;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a326:	2201      	movs	r2, #1
 800a328:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				res = sync_fs(fp->fs);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a332:	4618      	mov	r0, r3
 800a334:	f7fd fe2f 	bl	8007f96 <sync_fs>
 800a338:	4603      	mov	r3, r0
 800a33a:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800a33c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3718      	adds	r7, #24
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}

0800a346 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800a346:	b580      	push	{r7, lr}
 800a348:	b084      	sub	sp, #16
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f7ff ff3f 	bl	800a1d2 <f_sync>
 800a354:	4603      	mov	r3, r0
 800a356:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a358:	7bfb      	ldrb	r3, [r7, #15]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d116      	bne.n	800a38c <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f7ff f92e 	bl	80095c0 <validate>
 800a364:	4603      	mov	r3, r0
 800a366:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a368:	7bfb      	ldrb	r3, [r7, #15]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d10e      	bne.n	800a38c <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 800a374:	4618      	mov	r0, r3
 800a376:	f7fd fd29 	bl	8007dcc <dec_lock>
 800a37a:	4603      	mov	r3, r0
 800a37c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a37e:	7bfb      	ldrb	r3, [r7, #15]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d103      	bne.n	800a38c <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a38c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3710      	adds	r7, #16
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
	...

0800a398 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a398:	b480      	push	{r7}
 800a39a:	b087      	sub	sp, #28
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800a3ae:	4b1e      	ldr	r3, [pc, #120]	@ (800a428 <FATFS_LinkDriverEx+0x90>)
 800a3b0:	7a5b      	ldrb	r3, [r3, #9]
 800a3b2:	b2db      	uxtb	r3, r3
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d831      	bhi.n	800a41c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a3b8:	4b1b      	ldr	r3, [pc, #108]	@ (800a428 <FATFS_LinkDriverEx+0x90>)
 800a3ba:	7a5b      	ldrb	r3, [r3, #9]
 800a3bc:	b2db      	uxtb	r3, r3
 800a3be:	461a      	mov	r2, r3
 800a3c0:	4b19      	ldr	r3, [pc, #100]	@ (800a428 <FATFS_LinkDriverEx+0x90>)
 800a3c2:	2100      	movs	r1, #0
 800a3c4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800a3c6:	4b18      	ldr	r3, [pc, #96]	@ (800a428 <FATFS_LinkDriverEx+0x90>)
 800a3c8:	7a5b      	ldrb	r3, [r3, #9]
 800a3ca:	b2db      	uxtb	r3, r3
 800a3cc:	4a16      	ldr	r2, [pc, #88]	@ (800a428 <FATFS_LinkDriverEx+0x90>)
 800a3ce:	009b      	lsls	r3, r3, #2
 800a3d0:	4413      	add	r3, r2
 800a3d2:	68fa      	ldr	r2, [r7, #12]
 800a3d4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800a3d6:	4b14      	ldr	r3, [pc, #80]	@ (800a428 <FATFS_LinkDriverEx+0x90>)
 800a3d8:	7a5b      	ldrb	r3, [r3, #9]
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	461a      	mov	r2, r3
 800a3de:	4b12      	ldr	r3, [pc, #72]	@ (800a428 <FATFS_LinkDriverEx+0x90>)
 800a3e0:	4413      	add	r3, r2
 800a3e2:	79fa      	ldrb	r2, [r7, #7]
 800a3e4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a3e6:	4b10      	ldr	r3, [pc, #64]	@ (800a428 <FATFS_LinkDriverEx+0x90>)
 800a3e8:	7a5b      	ldrb	r3, [r3, #9]
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	1c5a      	adds	r2, r3, #1
 800a3ee:	b2d1      	uxtb	r1, r2
 800a3f0:	4a0d      	ldr	r2, [pc, #52]	@ (800a428 <FATFS_LinkDriverEx+0x90>)
 800a3f2:	7251      	strb	r1, [r2, #9]
 800a3f4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a3f6:	7dbb      	ldrb	r3, [r7, #22]
 800a3f8:	3330      	adds	r3, #48	@ 0x30
 800a3fa:	b2da      	uxtb	r2, r3
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	3301      	adds	r3, #1
 800a404:	223a      	movs	r2, #58	@ 0x3a
 800a406:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	3302      	adds	r3, #2
 800a40c:	222f      	movs	r2, #47	@ 0x2f
 800a40e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	3303      	adds	r3, #3
 800a414:	2200      	movs	r2, #0
 800a416:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a418:	2300      	movs	r3, #0
 800a41a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800a41c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a41e:	4618      	mov	r0, r3
 800a420:	371c      	adds	r7, #28
 800a422:	46bd      	mov	sp, r7
 800a424:	bc80      	pop	{r7}
 800a426:	4770      	bx	lr
 800a428:	200036d4 	.word	0x200036d4

0800a42c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a436:	2200      	movs	r2, #0
 800a438:	6839      	ldr	r1, [r7, #0]
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f7ff ffac 	bl	800a398 <FATFS_LinkDriverEx>
 800a440:	4603      	mov	r3, r0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3708      	adds	r7, #8
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <sulp>:
 800a44a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a44e:	460f      	mov	r7, r1
 800a450:	4690      	mov	r8, r2
 800a452:	f003 fd25 	bl	800dea0 <__ulp>
 800a456:	4604      	mov	r4, r0
 800a458:	460d      	mov	r5, r1
 800a45a:	f1b8 0f00 	cmp.w	r8, #0
 800a45e:	d011      	beq.n	800a484 <sulp+0x3a>
 800a460:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a464:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a468:	2b00      	cmp	r3, #0
 800a46a:	dd0b      	ble.n	800a484 <sulp+0x3a>
 800a46c:	2400      	movs	r4, #0
 800a46e:	051b      	lsls	r3, r3, #20
 800a470:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a474:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a478:	4622      	mov	r2, r4
 800a47a:	462b      	mov	r3, r5
 800a47c:	f7f6 f82c 	bl	80004d8 <__aeabi_dmul>
 800a480:	4604      	mov	r4, r0
 800a482:	460d      	mov	r5, r1
 800a484:	4620      	mov	r0, r4
 800a486:	4629      	mov	r1, r5
 800a488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a48c:	0000      	movs	r0, r0
	...

0800a490 <_strtod_l>:
 800a490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a494:	b09f      	sub	sp, #124	@ 0x7c
 800a496:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a498:	2200      	movs	r2, #0
 800a49a:	460c      	mov	r4, r1
 800a49c:	921a      	str	r2, [sp, #104]	@ 0x68
 800a49e:	f04f 0a00 	mov.w	sl, #0
 800a4a2:	f04f 0b00 	mov.w	fp, #0
 800a4a6:	460a      	mov	r2, r1
 800a4a8:	9005      	str	r0, [sp, #20]
 800a4aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800a4ac:	7811      	ldrb	r1, [r2, #0]
 800a4ae:	292b      	cmp	r1, #43	@ 0x2b
 800a4b0:	d048      	beq.n	800a544 <_strtod_l+0xb4>
 800a4b2:	d836      	bhi.n	800a522 <_strtod_l+0x92>
 800a4b4:	290d      	cmp	r1, #13
 800a4b6:	d830      	bhi.n	800a51a <_strtod_l+0x8a>
 800a4b8:	2908      	cmp	r1, #8
 800a4ba:	d830      	bhi.n	800a51e <_strtod_l+0x8e>
 800a4bc:	2900      	cmp	r1, #0
 800a4be:	d039      	beq.n	800a534 <_strtod_l+0xa4>
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a4c4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a4c6:	782a      	ldrb	r2, [r5, #0]
 800a4c8:	2a30      	cmp	r2, #48	@ 0x30
 800a4ca:	f040 80b1 	bne.w	800a630 <_strtod_l+0x1a0>
 800a4ce:	786a      	ldrb	r2, [r5, #1]
 800a4d0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a4d4:	2a58      	cmp	r2, #88	@ 0x58
 800a4d6:	d16c      	bne.n	800a5b2 <_strtod_l+0x122>
 800a4d8:	9302      	str	r3, [sp, #8]
 800a4da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4dc:	4a8e      	ldr	r2, [pc, #568]	@ (800a718 <_strtod_l+0x288>)
 800a4de:	9301      	str	r3, [sp, #4]
 800a4e0:	ab1a      	add	r3, sp, #104	@ 0x68
 800a4e2:	9300      	str	r3, [sp, #0]
 800a4e4:	9805      	ldr	r0, [sp, #20]
 800a4e6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a4e8:	a919      	add	r1, sp, #100	@ 0x64
 800a4ea:	f002 fdcd 	bl	800d088 <__gethex>
 800a4ee:	f010 060f 	ands.w	r6, r0, #15
 800a4f2:	4604      	mov	r4, r0
 800a4f4:	d005      	beq.n	800a502 <_strtod_l+0x72>
 800a4f6:	2e06      	cmp	r6, #6
 800a4f8:	d126      	bne.n	800a548 <_strtod_l+0xb8>
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	3501      	adds	r5, #1
 800a4fe:	9519      	str	r5, [sp, #100]	@ 0x64
 800a500:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a502:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a504:	2b00      	cmp	r3, #0
 800a506:	f040 8584 	bne.w	800b012 <_strtod_l+0xb82>
 800a50a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a50c:	b1bb      	cbz	r3, 800a53e <_strtod_l+0xae>
 800a50e:	4650      	mov	r0, sl
 800a510:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800a514:	b01f      	add	sp, #124	@ 0x7c
 800a516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a51a:	2920      	cmp	r1, #32
 800a51c:	d1d0      	bne.n	800a4c0 <_strtod_l+0x30>
 800a51e:	3201      	adds	r2, #1
 800a520:	e7c3      	b.n	800a4aa <_strtod_l+0x1a>
 800a522:	292d      	cmp	r1, #45	@ 0x2d
 800a524:	d1cc      	bne.n	800a4c0 <_strtod_l+0x30>
 800a526:	2101      	movs	r1, #1
 800a528:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a52a:	1c51      	adds	r1, r2, #1
 800a52c:	9119      	str	r1, [sp, #100]	@ 0x64
 800a52e:	7852      	ldrb	r2, [r2, #1]
 800a530:	2a00      	cmp	r2, #0
 800a532:	d1c7      	bne.n	800a4c4 <_strtod_l+0x34>
 800a534:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a536:	9419      	str	r4, [sp, #100]	@ 0x64
 800a538:	2b00      	cmp	r3, #0
 800a53a:	f040 8568 	bne.w	800b00e <_strtod_l+0xb7e>
 800a53e:	4650      	mov	r0, sl
 800a540:	4659      	mov	r1, fp
 800a542:	e7e7      	b.n	800a514 <_strtod_l+0x84>
 800a544:	2100      	movs	r1, #0
 800a546:	e7ef      	b.n	800a528 <_strtod_l+0x98>
 800a548:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a54a:	b13a      	cbz	r2, 800a55c <_strtod_l+0xcc>
 800a54c:	2135      	movs	r1, #53	@ 0x35
 800a54e:	a81c      	add	r0, sp, #112	@ 0x70
 800a550:	f003 fd96 	bl	800e080 <__copybits>
 800a554:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a556:	9805      	ldr	r0, [sp, #20]
 800a558:	f003 f970 	bl	800d83c <_Bfree>
 800a55c:	3e01      	subs	r6, #1
 800a55e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a560:	2e04      	cmp	r6, #4
 800a562:	d806      	bhi.n	800a572 <_strtod_l+0xe2>
 800a564:	e8df f006 	tbb	[pc, r6]
 800a568:	201d0314 	.word	0x201d0314
 800a56c:	14          	.byte	0x14
 800a56d:	00          	.byte	0x00
 800a56e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a572:	05e1      	lsls	r1, r4, #23
 800a574:	bf48      	it	mi
 800a576:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a57a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a57e:	0d1b      	lsrs	r3, r3, #20
 800a580:	051b      	lsls	r3, r3, #20
 800a582:	2b00      	cmp	r3, #0
 800a584:	d1bd      	bne.n	800a502 <_strtod_l+0x72>
 800a586:	f001 fe0b 	bl	800c1a0 <__errno>
 800a58a:	2322      	movs	r3, #34	@ 0x22
 800a58c:	6003      	str	r3, [r0, #0]
 800a58e:	e7b8      	b.n	800a502 <_strtod_l+0x72>
 800a590:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a594:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a598:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a59c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a5a0:	e7e7      	b.n	800a572 <_strtod_l+0xe2>
 800a5a2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800a71c <_strtod_l+0x28c>
 800a5a6:	e7e4      	b.n	800a572 <_strtod_l+0xe2>
 800a5a8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a5ac:	f04f 3aff 	mov.w	sl, #4294967295
 800a5b0:	e7df      	b.n	800a572 <_strtod_l+0xe2>
 800a5b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a5b4:	1c5a      	adds	r2, r3, #1
 800a5b6:	9219      	str	r2, [sp, #100]	@ 0x64
 800a5b8:	785b      	ldrb	r3, [r3, #1]
 800a5ba:	2b30      	cmp	r3, #48	@ 0x30
 800a5bc:	d0f9      	beq.n	800a5b2 <_strtod_l+0x122>
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d09f      	beq.n	800a502 <_strtod_l+0x72>
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a5c8:	220a      	movs	r2, #10
 800a5ca:	930c      	str	r3, [sp, #48]	@ 0x30
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	461f      	mov	r7, r3
 800a5d0:	9308      	str	r3, [sp, #32]
 800a5d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5d4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a5d6:	7805      	ldrb	r5, [r0, #0]
 800a5d8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a5dc:	b2d9      	uxtb	r1, r3
 800a5de:	2909      	cmp	r1, #9
 800a5e0:	d928      	bls.n	800a634 <_strtod_l+0x1a4>
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	494e      	ldr	r1, [pc, #312]	@ (800a720 <_strtod_l+0x290>)
 800a5e6:	f001 fd22 	bl	800c02e <strncmp>
 800a5ea:	2800      	cmp	r0, #0
 800a5ec:	d032      	beq.n	800a654 <_strtod_l+0x1c4>
 800a5ee:	2000      	movs	r0, #0
 800a5f0:	462a      	mov	r2, r5
 800a5f2:	4681      	mov	r9, r0
 800a5f4:	463d      	mov	r5, r7
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	2a65      	cmp	r2, #101	@ 0x65
 800a5fa:	d001      	beq.n	800a600 <_strtod_l+0x170>
 800a5fc:	2a45      	cmp	r2, #69	@ 0x45
 800a5fe:	d114      	bne.n	800a62a <_strtod_l+0x19a>
 800a600:	b91d      	cbnz	r5, 800a60a <_strtod_l+0x17a>
 800a602:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a604:	4302      	orrs	r2, r0
 800a606:	d095      	beq.n	800a534 <_strtod_l+0xa4>
 800a608:	2500      	movs	r5, #0
 800a60a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a60c:	1c62      	adds	r2, r4, #1
 800a60e:	9219      	str	r2, [sp, #100]	@ 0x64
 800a610:	7862      	ldrb	r2, [r4, #1]
 800a612:	2a2b      	cmp	r2, #43	@ 0x2b
 800a614:	d077      	beq.n	800a706 <_strtod_l+0x276>
 800a616:	2a2d      	cmp	r2, #45	@ 0x2d
 800a618:	d07b      	beq.n	800a712 <_strtod_l+0x282>
 800a61a:	f04f 0c00 	mov.w	ip, #0
 800a61e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a622:	2909      	cmp	r1, #9
 800a624:	f240 8082 	bls.w	800a72c <_strtod_l+0x29c>
 800a628:	9419      	str	r4, [sp, #100]	@ 0x64
 800a62a:	f04f 0800 	mov.w	r8, #0
 800a62e:	e0a2      	b.n	800a776 <_strtod_l+0x2e6>
 800a630:	2300      	movs	r3, #0
 800a632:	e7c7      	b.n	800a5c4 <_strtod_l+0x134>
 800a634:	2f08      	cmp	r7, #8
 800a636:	bfd5      	itete	le
 800a638:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a63a:	9908      	ldrgt	r1, [sp, #32]
 800a63c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a640:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a644:	f100 0001 	add.w	r0, r0, #1
 800a648:	bfd4      	ite	le
 800a64a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a64c:	9308      	strgt	r3, [sp, #32]
 800a64e:	3701      	adds	r7, #1
 800a650:	9019      	str	r0, [sp, #100]	@ 0x64
 800a652:	e7bf      	b.n	800a5d4 <_strtod_l+0x144>
 800a654:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a656:	1c5a      	adds	r2, r3, #1
 800a658:	9219      	str	r2, [sp, #100]	@ 0x64
 800a65a:	785a      	ldrb	r2, [r3, #1]
 800a65c:	b37f      	cbz	r7, 800a6be <_strtod_l+0x22e>
 800a65e:	4681      	mov	r9, r0
 800a660:	463d      	mov	r5, r7
 800a662:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a666:	2b09      	cmp	r3, #9
 800a668:	d912      	bls.n	800a690 <_strtod_l+0x200>
 800a66a:	2301      	movs	r3, #1
 800a66c:	e7c4      	b.n	800a5f8 <_strtod_l+0x168>
 800a66e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a670:	3001      	adds	r0, #1
 800a672:	1c5a      	adds	r2, r3, #1
 800a674:	9219      	str	r2, [sp, #100]	@ 0x64
 800a676:	785a      	ldrb	r2, [r3, #1]
 800a678:	2a30      	cmp	r2, #48	@ 0x30
 800a67a:	d0f8      	beq.n	800a66e <_strtod_l+0x1de>
 800a67c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a680:	2b08      	cmp	r3, #8
 800a682:	f200 84cb 	bhi.w	800b01c <_strtod_l+0xb8c>
 800a686:	4681      	mov	r9, r0
 800a688:	2000      	movs	r0, #0
 800a68a:	4605      	mov	r5, r0
 800a68c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a68e:	930c      	str	r3, [sp, #48]	@ 0x30
 800a690:	3a30      	subs	r2, #48	@ 0x30
 800a692:	f100 0301 	add.w	r3, r0, #1
 800a696:	d02a      	beq.n	800a6ee <_strtod_l+0x25e>
 800a698:	4499      	add	r9, r3
 800a69a:	210a      	movs	r1, #10
 800a69c:	462b      	mov	r3, r5
 800a69e:	eb00 0c05 	add.w	ip, r0, r5
 800a6a2:	4563      	cmp	r3, ip
 800a6a4:	d10d      	bne.n	800a6c2 <_strtod_l+0x232>
 800a6a6:	1c69      	adds	r1, r5, #1
 800a6a8:	4401      	add	r1, r0
 800a6aa:	4428      	add	r0, r5
 800a6ac:	2808      	cmp	r0, #8
 800a6ae:	dc16      	bgt.n	800a6de <_strtod_l+0x24e>
 800a6b0:	230a      	movs	r3, #10
 800a6b2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a6b4:	fb03 2300 	mla	r3, r3, r0, r2
 800a6b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	e018      	b.n	800a6f0 <_strtod_l+0x260>
 800a6be:	4638      	mov	r0, r7
 800a6c0:	e7da      	b.n	800a678 <_strtod_l+0x1e8>
 800a6c2:	2b08      	cmp	r3, #8
 800a6c4:	f103 0301 	add.w	r3, r3, #1
 800a6c8:	dc03      	bgt.n	800a6d2 <_strtod_l+0x242>
 800a6ca:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a6cc:	434e      	muls	r6, r1
 800a6ce:	960a      	str	r6, [sp, #40]	@ 0x28
 800a6d0:	e7e7      	b.n	800a6a2 <_strtod_l+0x212>
 800a6d2:	2b10      	cmp	r3, #16
 800a6d4:	bfde      	ittt	le
 800a6d6:	9e08      	ldrle	r6, [sp, #32]
 800a6d8:	434e      	mulle	r6, r1
 800a6da:	9608      	strle	r6, [sp, #32]
 800a6dc:	e7e1      	b.n	800a6a2 <_strtod_l+0x212>
 800a6de:	280f      	cmp	r0, #15
 800a6e0:	dceb      	bgt.n	800a6ba <_strtod_l+0x22a>
 800a6e2:	230a      	movs	r3, #10
 800a6e4:	9808      	ldr	r0, [sp, #32]
 800a6e6:	fb03 2300 	mla	r3, r3, r0, r2
 800a6ea:	9308      	str	r3, [sp, #32]
 800a6ec:	e7e5      	b.n	800a6ba <_strtod_l+0x22a>
 800a6ee:	4629      	mov	r1, r5
 800a6f0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a6f2:	460d      	mov	r5, r1
 800a6f4:	1c50      	adds	r0, r2, #1
 800a6f6:	9019      	str	r0, [sp, #100]	@ 0x64
 800a6f8:	7852      	ldrb	r2, [r2, #1]
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	e7b1      	b.n	800a662 <_strtod_l+0x1d2>
 800a6fe:	f04f 0900 	mov.w	r9, #0
 800a702:	2301      	movs	r3, #1
 800a704:	e77d      	b.n	800a602 <_strtod_l+0x172>
 800a706:	f04f 0c00 	mov.w	ip, #0
 800a70a:	1ca2      	adds	r2, r4, #2
 800a70c:	9219      	str	r2, [sp, #100]	@ 0x64
 800a70e:	78a2      	ldrb	r2, [r4, #2]
 800a710:	e785      	b.n	800a61e <_strtod_l+0x18e>
 800a712:	f04f 0c01 	mov.w	ip, #1
 800a716:	e7f8      	b.n	800a70a <_strtod_l+0x27a>
 800a718:	0800ede8 	.word	0x0800ede8
 800a71c:	7ff00000 	.word	0x7ff00000
 800a720:	0800edd0 	.word	0x0800edd0
 800a724:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a726:	1c51      	adds	r1, r2, #1
 800a728:	9119      	str	r1, [sp, #100]	@ 0x64
 800a72a:	7852      	ldrb	r2, [r2, #1]
 800a72c:	2a30      	cmp	r2, #48	@ 0x30
 800a72e:	d0f9      	beq.n	800a724 <_strtod_l+0x294>
 800a730:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a734:	2908      	cmp	r1, #8
 800a736:	f63f af78 	bhi.w	800a62a <_strtod_l+0x19a>
 800a73a:	f04f 080a 	mov.w	r8, #10
 800a73e:	3a30      	subs	r2, #48	@ 0x30
 800a740:	920e      	str	r2, [sp, #56]	@ 0x38
 800a742:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a744:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a746:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a748:	1c56      	adds	r6, r2, #1
 800a74a:	9619      	str	r6, [sp, #100]	@ 0x64
 800a74c:	7852      	ldrb	r2, [r2, #1]
 800a74e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a752:	f1be 0f09 	cmp.w	lr, #9
 800a756:	d939      	bls.n	800a7cc <_strtod_l+0x33c>
 800a758:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a75a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a75e:	1a76      	subs	r6, r6, r1
 800a760:	2e08      	cmp	r6, #8
 800a762:	dc03      	bgt.n	800a76c <_strtod_l+0x2dc>
 800a764:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a766:	4588      	cmp	r8, r1
 800a768:	bfa8      	it	ge
 800a76a:	4688      	movge	r8, r1
 800a76c:	f1bc 0f00 	cmp.w	ip, #0
 800a770:	d001      	beq.n	800a776 <_strtod_l+0x2e6>
 800a772:	f1c8 0800 	rsb	r8, r8, #0
 800a776:	2d00      	cmp	r5, #0
 800a778:	d14e      	bne.n	800a818 <_strtod_l+0x388>
 800a77a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a77c:	4308      	orrs	r0, r1
 800a77e:	f47f aec0 	bne.w	800a502 <_strtod_l+0x72>
 800a782:	2b00      	cmp	r3, #0
 800a784:	f47f aed6 	bne.w	800a534 <_strtod_l+0xa4>
 800a788:	2a69      	cmp	r2, #105	@ 0x69
 800a78a:	d028      	beq.n	800a7de <_strtod_l+0x34e>
 800a78c:	dc25      	bgt.n	800a7da <_strtod_l+0x34a>
 800a78e:	2a49      	cmp	r2, #73	@ 0x49
 800a790:	d025      	beq.n	800a7de <_strtod_l+0x34e>
 800a792:	2a4e      	cmp	r2, #78	@ 0x4e
 800a794:	f47f aece 	bne.w	800a534 <_strtod_l+0xa4>
 800a798:	499a      	ldr	r1, [pc, #616]	@ (800aa04 <_strtod_l+0x574>)
 800a79a:	a819      	add	r0, sp, #100	@ 0x64
 800a79c:	f002 fe96 	bl	800d4cc <__match>
 800a7a0:	2800      	cmp	r0, #0
 800a7a2:	f43f aec7 	beq.w	800a534 <_strtod_l+0xa4>
 800a7a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a7a8:	781b      	ldrb	r3, [r3, #0]
 800a7aa:	2b28      	cmp	r3, #40	@ 0x28
 800a7ac:	d12e      	bne.n	800a80c <_strtod_l+0x37c>
 800a7ae:	4996      	ldr	r1, [pc, #600]	@ (800aa08 <_strtod_l+0x578>)
 800a7b0:	aa1c      	add	r2, sp, #112	@ 0x70
 800a7b2:	a819      	add	r0, sp, #100	@ 0x64
 800a7b4:	f002 fe9e 	bl	800d4f4 <__hexnan>
 800a7b8:	2805      	cmp	r0, #5
 800a7ba:	d127      	bne.n	800a80c <_strtod_l+0x37c>
 800a7bc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a7be:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a7c2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a7c6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a7ca:	e69a      	b.n	800a502 <_strtod_l+0x72>
 800a7cc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a7ce:	fb08 2101 	mla	r1, r8, r1, r2
 800a7d2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a7d6:	920e      	str	r2, [sp, #56]	@ 0x38
 800a7d8:	e7b5      	b.n	800a746 <_strtod_l+0x2b6>
 800a7da:	2a6e      	cmp	r2, #110	@ 0x6e
 800a7dc:	e7da      	b.n	800a794 <_strtod_l+0x304>
 800a7de:	498b      	ldr	r1, [pc, #556]	@ (800aa0c <_strtod_l+0x57c>)
 800a7e0:	a819      	add	r0, sp, #100	@ 0x64
 800a7e2:	f002 fe73 	bl	800d4cc <__match>
 800a7e6:	2800      	cmp	r0, #0
 800a7e8:	f43f aea4 	beq.w	800a534 <_strtod_l+0xa4>
 800a7ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a7ee:	4988      	ldr	r1, [pc, #544]	@ (800aa10 <_strtod_l+0x580>)
 800a7f0:	3b01      	subs	r3, #1
 800a7f2:	a819      	add	r0, sp, #100	@ 0x64
 800a7f4:	9319      	str	r3, [sp, #100]	@ 0x64
 800a7f6:	f002 fe69 	bl	800d4cc <__match>
 800a7fa:	b910      	cbnz	r0, 800a802 <_strtod_l+0x372>
 800a7fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a7fe:	3301      	adds	r3, #1
 800a800:	9319      	str	r3, [sp, #100]	@ 0x64
 800a802:	f04f 0a00 	mov.w	sl, #0
 800a806:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800aa14 <_strtod_l+0x584>
 800a80a:	e67a      	b.n	800a502 <_strtod_l+0x72>
 800a80c:	4882      	ldr	r0, [pc, #520]	@ (800aa18 <_strtod_l+0x588>)
 800a80e:	f001 fd11 	bl	800c234 <nan>
 800a812:	4682      	mov	sl, r0
 800a814:	468b      	mov	fp, r1
 800a816:	e674      	b.n	800a502 <_strtod_l+0x72>
 800a818:	eba8 0309 	sub.w	r3, r8, r9
 800a81c:	2f00      	cmp	r7, #0
 800a81e:	bf08      	it	eq
 800a820:	462f      	moveq	r7, r5
 800a822:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a824:	2d10      	cmp	r5, #16
 800a826:	462c      	mov	r4, r5
 800a828:	9309      	str	r3, [sp, #36]	@ 0x24
 800a82a:	bfa8      	it	ge
 800a82c:	2410      	movge	r4, #16
 800a82e:	f7f5 fdd9 	bl	80003e4 <__aeabi_ui2d>
 800a832:	2d09      	cmp	r5, #9
 800a834:	4682      	mov	sl, r0
 800a836:	468b      	mov	fp, r1
 800a838:	dc11      	bgt.n	800a85e <_strtod_l+0x3ce>
 800a83a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	f43f ae60 	beq.w	800a502 <_strtod_l+0x72>
 800a842:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a844:	dd76      	ble.n	800a934 <_strtod_l+0x4a4>
 800a846:	2b16      	cmp	r3, #22
 800a848:	dc5d      	bgt.n	800a906 <_strtod_l+0x476>
 800a84a:	4974      	ldr	r1, [pc, #464]	@ (800aa1c <_strtod_l+0x58c>)
 800a84c:	4652      	mov	r2, sl
 800a84e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a852:	465b      	mov	r3, fp
 800a854:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a858:	f7f5 fe3e 	bl	80004d8 <__aeabi_dmul>
 800a85c:	e7d9      	b.n	800a812 <_strtod_l+0x382>
 800a85e:	4b6f      	ldr	r3, [pc, #444]	@ (800aa1c <_strtod_l+0x58c>)
 800a860:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a864:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a868:	f7f5 fe36 	bl	80004d8 <__aeabi_dmul>
 800a86c:	4682      	mov	sl, r0
 800a86e:	9808      	ldr	r0, [sp, #32]
 800a870:	468b      	mov	fp, r1
 800a872:	f7f5 fdb7 	bl	80003e4 <__aeabi_ui2d>
 800a876:	4602      	mov	r2, r0
 800a878:	460b      	mov	r3, r1
 800a87a:	4650      	mov	r0, sl
 800a87c:	4659      	mov	r1, fp
 800a87e:	f7f5 fc75 	bl	800016c <__adddf3>
 800a882:	2d0f      	cmp	r5, #15
 800a884:	4682      	mov	sl, r0
 800a886:	468b      	mov	fp, r1
 800a888:	ddd7      	ble.n	800a83a <_strtod_l+0x3aa>
 800a88a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a88c:	1b2c      	subs	r4, r5, r4
 800a88e:	441c      	add	r4, r3
 800a890:	2c00      	cmp	r4, #0
 800a892:	f340 8096 	ble.w	800a9c2 <_strtod_l+0x532>
 800a896:	f014 030f 	ands.w	r3, r4, #15
 800a89a:	d00a      	beq.n	800a8b2 <_strtod_l+0x422>
 800a89c:	495f      	ldr	r1, [pc, #380]	@ (800aa1c <_strtod_l+0x58c>)
 800a89e:	4652      	mov	r2, sl
 800a8a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a8a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8a8:	465b      	mov	r3, fp
 800a8aa:	f7f5 fe15 	bl	80004d8 <__aeabi_dmul>
 800a8ae:	4682      	mov	sl, r0
 800a8b0:	468b      	mov	fp, r1
 800a8b2:	f034 040f 	bics.w	r4, r4, #15
 800a8b6:	d073      	beq.n	800a9a0 <_strtod_l+0x510>
 800a8b8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a8bc:	dd48      	ble.n	800a950 <_strtod_l+0x4c0>
 800a8be:	2400      	movs	r4, #0
 800a8c0:	46a0      	mov	r8, r4
 800a8c2:	46a1      	mov	r9, r4
 800a8c4:	940a      	str	r4, [sp, #40]	@ 0x28
 800a8c6:	2322      	movs	r3, #34	@ 0x22
 800a8c8:	f04f 0a00 	mov.w	sl, #0
 800a8cc:	9a05      	ldr	r2, [sp, #20]
 800a8ce:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800aa14 <_strtod_l+0x584>
 800a8d2:	6013      	str	r3, [r2, #0]
 800a8d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	f43f ae13 	beq.w	800a502 <_strtod_l+0x72>
 800a8dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a8de:	9805      	ldr	r0, [sp, #20]
 800a8e0:	f002 ffac 	bl	800d83c <_Bfree>
 800a8e4:	4649      	mov	r1, r9
 800a8e6:	9805      	ldr	r0, [sp, #20]
 800a8e8:	f002 ffa8 	bl	800d83c <_Bfree>
 800a8ec:	4641      	mov	r1, r8
 800a8ee:	9805      	ldr	r0, [sp, #20]
 800a8f0:	f002 ffa4 	bl	800d83c <_Bfree>
 800a8f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a8f6:	9805      	ldr	r0, [sp, #20]
 800a8f8:	f002 ffa0 	bl	800d83c <_Bfree>
 800a8fc:	4621      	mov	r1, r4
 800a8fe:	9805      	ldr	r0, [sp, #20]
 800a900:	f002 ff9c 	bl	800d83c <_Bfree>
 800a904:	e5fd      	b.n	800a502 <_strtod_l+0x72>
 800a906:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a908:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a90c:	4293      	cmp	r3, r2
 800a90e:	dbbc      	blt.n	800a88a <_strtod_l+0x3fa>
 800a910:	4c42      	ldr	r4, [pc, #264]	@ (800aa1c <_strtod_l+0x58c>)
 800a912:	f1c5 050f 	rsb	r5, r5, #15
 800a916:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a91a:	4652      	mov	r2, sl
 800a91c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a920:	465b      	mov	r3, fp
 800a922:	f7f5 fdd9 	bl	80004d8 <__aeabi_dmul>
 800a926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a928:	1b5d      	subs	r5, r3, r5
 800a92a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a92e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a932:	e791      	b.n	800a858 <_strtod_l+0x3c8>
 800a934:	3316      	adds	r3, #22
 800a936:	dba8      	blt.n	800a88a <_strtod_l+0x3fa>
 800a938:	4b38      	ldr	r3, [pc, #224]	@ (800aa1c <_strtod_l+0x58c>)
 800a93a:	eba9 0808 	sub.w	r8, r9, r8
 800a93e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a942:	4650      	mov	r0, sl
 800a944:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a948:	4659      	mov	r1, fp
 800a94a:	f7f5 feef 	bl	800072c <__aeabi_ddiv>
 800a94e:	e760      	b.n	800a812 <_strtod_l+0x382>
 800a950:	4b33      	ldr	r3, [pc, #204]	@ (800aa20 <_strtod_l+0x590>)
 800a952:	4650      	mov	r0, sl
 800a954:	9308      	str	r3, [sp, #32]
 800a956:	2300      	movs	r3, #0
 800a958:	4659      	mov	r1, fp
 800a95a:	461e      	mov	r6, r3
 800a95c:	1124      	asrs	r4, r4, #4
 800a95e:	2c01      	cmp	r4, #1
 800a960:	dc21      	bgt.n	800a9a6 <_strtod_l+0x516>
 800a962:	b10b      	cbz	r3, 800a968 <_strtod_l+0x4d8>
 800a964:	4682      	mov	sl, r0
 800a966:	468b      	mov	fp, r1
 800a968:	492d      	ldr	r1, [pc, #180]	@ (800aa20 <_strtod_l+0x590>)
 800a96a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a96e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a972:	4652      	mov	r2, sl
 800a974:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a978:	465b      	mov	r3, fp
 800a97a:	f7f5 fdad 	bl	80004d8 <__aeabi_dmul>
 800a97e:	4b25      	ldr	r3, [pc, #148]	@ (800aa14 <_strtod_l+0x584>)
 800a980:	460a      	mov	r2, r1
 800a982:	400b      	ands	r3, r1
 800a984:	4927      	ldr	r1, [pc, #156]	@ (800aa24 <_strtod_l+0x594>)
 800a986:	4682      	mov	sl, r0
 800a988:	428b      	cmp	r3, r1
 800a98a:	d898      	bhi.n	800a8be <_strtod_l+0x42e>
 800a98c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a990:	428b      	cmp	r3, r1
 800a992:	bf86      	itte	hi
 800a994:	f04f 3aff 	movhi.w	sl, #4294967295
 800a998:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800aa28 <_strtod_l+0x598>
 800a99c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	9308      	str	r3, [sp, #32]
 800a9a4:	e07a      	b.n	800aa9c <_strtod_l+0x60c>
 800a9a6:	07e2      	lsls	r2, r4, #31
 800a9a8:	d505      	bpl.n	800a9b6 <_strtod_l+0x526>
 800a9aa:	9b08      	ldr	r3, [sp, #32]
 800a9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b0:	f7f5 fd92 	bl	80004d8 <__aeabi_dmul>
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	9a08      	ldr	r2, [sp, #32]
 800a9b8:	3601      	adds	r6, #1
 800a9ba:	3208      	adds	r2, #8
 800a9bc:	1064      	asrs	r4, r4, #1
 800a9be:	9208      	str	r2, [sp, #32]
 800a9c0:	e7cd      	b.n	800a95e <_strtod_l+0x4ce>
 800a9c2:	d0ed      	beq.n	800a9a0 <_strtod_l+0x510>
 800a9c4:	4264      	negs	r4, r4
 800a9c6:	f014 020f 	ands.w	r2, r4, #15
 800a9ca:	d00a      	beq.n	800a9e2 <_strtod_l+0x552>
 800a9cc:	4b13      	ldr	r3, [pc, #76]	@ (800aa1c <_strtod_l+0x58c>)
 800a9ce:	4650      	mov	r0, sl
 800a9d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9d4:	4659      	mov	r1, fp
 800a9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9da:	f7f5 fea7 	bl	800072c <__aeabi_ddiv>
 800a9de:	4682      	mov	sl, r0
 800a9e0:	468b      	mov	fp, r1
 800a9e2:	1124      	asrs	r4, r4, #4
 800a9e4:	d0dc      	beq.n	800a9a0 <_strtod_l+0x510>
 800a9e6:	2c1f      	cmp	r4, #31
 800a9e8:	dd20      	ble.n	800aa2c <_strtod_l+0x59c>
 800a9ea:	2400      	movs	r4, #0
 800a9ec:	46a0      	mov	r8, r4
 800a9ee:	46a1      	mov	r9, r4
 800a9f0:	940a      	str	r4, [sp, #40]	@ 0x28
 800a9f2:	2322      	movs	r3, #34	@ 0x22
 800a9f4:	9a05      	ldr	r2, [sp, #20]
 800a9f6:	f04f 0a00 	mov.w	sl, #0
 800a9fa:	f04f 0b00 	mov.w	fp, #0
 800a9fe:	6013      	str	r3, [r2, #0]
 800aa00:	e768      	b.n	800a8d4 <_strtod_l+0x444>
 800aa02:	bf00      	nop
 800aa04:	0800ee35 	.word	0x0800ee35
 800aa08:	0800edd4 	.word	0x0800edd4
 800aa0c:	0800ee2d 	.word	0x0800ee2d
 800aa10:	0800ef19 	.word	0x0800ef19
 800aa14:	7ff00000 	.word	0x7ff00000
 800aa18:	0800ef15 	.word	0x0800ef15
 800aa1c:	0800f080 	.word	0x0800f080
 800aa20:	0800f058 	.word	0x0800f058
 800aa24:	7ca00000 	.word	0x7ca00000
 800aa28:	7fefffff 	.word	0x7fefffff
 800aa2c:	f014 0310 	ands.w	r3, r4, #16
 800aa30:	bf18      	it	ne
 800aa32:	236a      	movne	r3, #106	@ 0x6a
 800aa34:	4650      	mov	r0, sl
 800aa36:	9308      	str	r3, [sp, #32]
 800aa38:	4659      	mov	r1, fp
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	4ea9      	ldr	r6, [pc, #676]	@ (800ace4 <_strtod_l+0x854>)
 800aa3e:	07e2      	lsls	r2, r4, #31
 800aa40:	d504      	bpl.n	800aa4c <_strtod_l+0x5bc>
 800aa42:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aa46:	f7f5 fd47 	bl	80004d8 <__aeabi_dmul>
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	1064      	asrs	r4, r4, #1
 800aa4e:	f106 0608 	add.w	r6, r6, #8
 800aa52:	d1f4      	bne.n	800aa3e <_strtod_l+0x5ae>
 800aa54:	b10b      	cbz	r3, 800aa5a <_strtod_l+0x5ca>
 800aa56:	4682      	mov	sl, r0
 800aa58:	468b      	mov	fp, r1
 800aa5a:	9b08      	ldr	r3, [sp, #32]
 800aa5c:	b1b3      	cbz	r3, 800aa8c <_strtod_l+0x5fc>
 800aa5e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800aa62:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	4659      	mov	r1, fp
 800aa6a:	dd0f      	ble.n	800aa8c <_strtod_l+0x5fc>
 800aa6c:	2b1f      	cmp	r3, #31
 800aa6e:	dd57      	ble.n	800ab20 <_strtod_l+0x690>
 800aa70:	2b34      	cmp	r3, #52	@ 0x34
 800aa72:	bfd8      	it	le
 800aa74:	f04f 33ff 	movle.w	r3, #4294967295
 800aa78:	f04f 0a00 	mov.w	sl, #0
 800aa7c:	bfcf      	iteee	gt
 800aa7e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800aa82:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800aa86:	4093      	lslle	r3, r2
 800aa88:	ea03 0b01 	andle.w	fp, r3, r1
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	2300      	movs	r3, #0
 800aa90:	4650      	mov	r0, sl
 800aa92:	4659      	mov	r1, fp
 800aa94:	f7f5 ff88 	bl	80009a8 <__aeabi_dcmpeq>
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	d1a6      	bne.n	800a9ea <_strtod_l+0x55a>
 800aa9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa9e:	463a      	mov	r2, r7
 800aaa0:	9300      	str	r3, [sp, #0]
 800aaa2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800aaa4:	462b      	mov	r3, r5
 800aaa6:	9805      	ldr	r0, [sp, #20]
 800aaa8:	f002 ff30 	bl	800d90c <__s2b>
 800aaac:	900a      	str	r0, [sp, #40]	@ 0x28
 800aaae:	2800      	cmp	r0, #0
 800aab0:	f43f af05 	beq.w	800a8be <_strtod_l+0x42e>
 800aab4:	2400      	movs	r4, #0
 800aab6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aab8:	eba9 0308 	sub.w	r3, r9, r8
 800aabc:	2a00      	cmp	r2, #0
 800aabe:	bfa8      	it	ge
 800aac0:	2300      	movge	r3, #0
 800aac2:	46a0      	mov	r8, r4
 800aac4:	9312      	str	r3, [sp, #72]	@ 0x48
 800aac6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800aaca:	9316      	str	r3, [sp, #88]	@ 0x58
 800aacc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aace:	9805      	ldr	r0, [sp, #20]
 800aad0:	6859      	ldr	r1, [r3, #4]
 800aad2:	f002 fe73 	bl	800d7bc <_Balloc>
 800aad6:	4681      	mov	r9, r0
 800aad8:	2800      	cmp	r0, #0
 800aada:	f43f aef4 	beq.w	800a8c6 <_strtod_l+0x436>
 800aade:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aae0:	300c      	adds	r0, #12
 800aae2:	691a      	ldr	r2, [r3, #16]
 800aae4:	f103 010c 	add.w	r1, r3, #12
 800aae8:	3202      	adds	r2, #2
 800aaea:	0092      	lsls	r2, r2, #2
 800aaec:	f001 fb93 	bl	800c216 <memcpy>
 800aaf0:	ab1c      	add	r3, sp, #112	@ 0x70
 800aaf2:	9301      	str	r3, [sp, #4]
 800aaf4:	ab1b      	add	r3, sp, #108	@ 0x6c
 800aaf6:	9300      	str	r3, [sp, #0]
 800aaf8:	4652      	mov	r2, sl
 800aafa:	465b      	mov	r3, fp
 800aafc:	9805      	ldr	r0, [sp, #20]
 800aafe:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ab02:	f003 fa35 	bl	800df70 <__d2b>
 800ab06:	901a      	str	r0, [sp, #104]	@ 0x68
 800ab08:	2800      	cmp	r0, #0
 800ab0a:	f43f aedc 	beq.w	800a8c6 <_strtod_l+0x436>
 800ab0e:	2101      	movs	r1, #1
 800ab10:	9805      	ldr	r0, [sp, #20]
 800ab12:	f002 ff91 	bl	800da38 <__i2b>
 800ab16:	4680      	mov	r8, r0
 800ab18:	b948      	cbnz	r0, 800ab2e <_strtod_l+0x69e>
 800ab1a:	f04f 0800 	mov.w	r8, #0
 800ab1e:	e6d2      	b.n	800a8c6 <_strtod_l+0x436>
 800ab20:	f04f 32ff 	mov.w	r2, #4294967295
 800ab24:	fa02 f303 	lsl.w	r3, r2, r3
 800ab28:	ea03 0a0a 	and.w	sl, r3, sl
 800ab2c:	e7ae      	b.n	800aa8c <_strtod_l+0x5fc>
 800ab2e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ab30:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ab32:	2d00      	cmp	r5, #0
 800ab34:	bfab      	itete	ge
 800ab36:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ab38:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ab3a:	18ef      	addge	r7, r5, r3
 800ab3c:	1b5e      	sublt	r6, r3, r5
 800ab3e:	9b08      	ldr	r3, [sp, #32]
 800ab40:	bfa8      	it	ge
 800ab42:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ab44:	eba5 0503 	sub.w	r5, r5, r3
 800ab48:	4415      	add	r5, r2
 800ab4a:	4b67      	ldr	r3, [pc, #412]	@ (800ace8 <_strtod_l+0x858>)
 800ab4c:	f105 35ff 	add.w	r5, r5, #4294967295
 800ab50:	bfb8      	it	lt
 800ab52:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ab54:	429d      	cmp	r5, r3
 800ab56:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ab5a:	da50      	bge.n	800abfe <_strtod_l+0x76e>
 800ab5c:	1b5b      	subs	r3, r3, r5
 800ab5e:	2b1f      	cmp	r3, #31
 800ab60:	f04f 0101 	mov.w	r1, #1
 800ab64:	eba2 0203 	sub.w	r2, r2, r3
 800ab68:	dc3d      	bgt.n	800abe6 <_strtod_l+0x756>
 800ab6a:	fa01 f303 	lsl.w	r3, r1, r3
 800ab6e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ab70:	2300      	movs	r3, #0
 800ab72:	9310      	str	r3, [sp, #64]	@ 0x40
 800ab74:	18bd      	adds	r5, r7, r2
 800ab76:	9b08      	ldr	r3, [sp, #32]
 800ab78:	42af      	cmp	r7, r5
 800ab7a:	4416      	add	r6, r2
 800ab7c:	441e      	add	r6, r3
 800ab7e:	463b      	mov	r3, r7
 800ab80:	bfa8      	it	ge
 800ab82:	462b      	movge	r3, r5
 800ab84:	42b3      	cmp	r3, r6
 800ab86:	bfa8      	it	ge
 800ab88:	4633      	movge	r3, r6
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	bfc2      	ittt	gt
 800ab8e:	1aed      	subgt	r5, r5, r3
 800ab90:	1af6      	subgt	r6, r6, r3
 800ab92:	1aff      	subgt	r7, r7, r3
 800ab94:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	dd16      	ble.n	800abc8 <_strtod_l+0x738>
 800ab9a:	4641      	mov	r1, r8
 800ab9c:	461a      	mov	r2, r3
 800ab9e:	9805      	ldr	r0, [sp, #20]
 800aba0:	f003 f808 	bl	800dbb4 <__pow5mult>
 800aba4:	4680      	mov	r8, r0
 800aba6:	2800      	cmp	r0, #0
 800aba8:	d0b7      	beq.n	800ab1a <_strtod_l+0x68a>
 800abaa:	4601      	mov	r1, r0
 800abac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800abae:	9805      	ldr	r0, [sp, #20]
 800abb0:	f002 ff58 	bl	800da64 <__multiply>
 800abb4:	900e      	str	r0, [sp, #56]	@ 0x38
 800abb6:	2800      	cmp	r0, #0
 800abb8:	f43f ae85 	beq.w	800a8c6 <_strtod_l+0x436>
 800abbc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800abbe:	9805      	ldr	r0, [sp, #20]
 800abc0:	f002 fe3c 	bl	800d83c <_Bfree>
 800abc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abc6:	931a      	str	r3, [sp, #104]	@ 0x68
 800abc8:	2d00      	cmp	r5, #0
 800abca:	dc1d      	bgt.n	800ac08 <_strtod_l+0x778>
 800abcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abce:	2b00      	cmp	r3, #0
 800abd0:	dd23      	ble.n	800ac1a <_strtod_l+0x78a>
 800abd2:	4649      	mov	r1, r9
 800abd4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800abd6:	9805      	ldr	r0, [sp, #20]
 800abd8:	f002 ffec 	bl	800dbb4 <__pow5mult>
 800abdc:	4681      	mov	r9, r0
 800abde:	b9e0      	cbnz	r0, 800ac1a <_strtod_l+0x78a>
 800abe0:	f04f 0900 	mov.w	r9, #0
 800abe4:	e66f      	b.n	800a8c6 <_strtod_l+0x436>
 800abe6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800abea:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800abee:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800abf2:	35e2      	adds	r5, #226	@ 0xe2
 800abf4:	fa01 f305 	lsl.w	r3, r1, r5
 800abf8:	9310      	str	r3, [sp, #64]	@ 0x40
 800abfa:	9113      	str	r1, [sp, #76]	@ 0x4c
 800abfc:	e7ba      	b.n	800ab74 <_strtod_l+0x6e4>
 800abfe:	2300      	movs	r3, #0
 800ac00:	9310      	str	r3, [sp, #64]	@ 0x40
 800ac02:	2301      	movs	r3, #1
 800ac04:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ac06:	e7b5      	b.n	800ab74 <_strtod_l+0x6e4>
 800ac08:	462a      	mov	r2, r5
 800ac0a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac0c:	9805      	ldr	r0, [sp, #20]
 800ac0e:	f003 f82b 	bl	800dc68 <__lshift>
 800ac12:	901a      	str	r0, [sp, #104]	@ 0x68
 800ac14:	2800      	cmp	r0, #0
 800ac16:	d1d9      	bne.n	800abcc <_strtod_l+0x73c>
 800ac18:	e655      	b.n	800a8c6 <_strtod_l+0x436>
 800ac1a:	2e00      	cmp	r6, #0
 800ac1c:	dd07      	ble.n	800ac2e <_strtod_l+0x79e>
 800ac1e:	4649      	mov	r1, r9
 800ac20:	4632      	mov	r2, r6
 800ac22:	9805      	ldr	r0, [sp, #20]
 800ac24:	f003 f820 	bl	800dc68 <__lshift>
 800ac28:	4681      	mov	r9, r0
 800ac2a:	2800      	cmp	r0, #0
 800ac2c:	d0d8      	beq.n	800abe0 <_strtod_l+0x750>
 800ac2e:	2f00      	cmp	r7, #0
 800ac30:	dd08      	ble.n	800ac44 <_strtod_l+0x7b4>
 800ac32:	4641      	mov	r1, r8
 800ac34:	463a      	mov	r2, r7
 800ac36:	9805      	ldr	r0, [sp, #20]
 800ac38:	f003 f816 	bl	800dc68 <__lshift>
 800ac3c:	4680      	mov	r8, r0
 800ac3e:	2800      	cmp	r0, #0
 800ac40:	f43f ae41 	beq.w	800a8c6 <_strtod_l+0x436>
 800ac44:	464a      	mov	r2, r9
 800ac46:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac48:	9805      	ldr	r0, [sp, #20]
 800ac4a:	f003 f895 	bl	800dd78 <__mdiff>
 800ac4e:	4604      	mov	r4, r0
 800ac50:	2800      	cmp	r0, #0
 800ac52:	f43f ae38 	beq.w	800a8c6 <_strtod_l+0x436>
 800ac56:	68c3      	ldr	r3, [r0, #12]
 800ac58:	4641      	mov	r1, r8
 800ac5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	60c3      	str	r3, [r0, #12]
 800ac60:	f003 f86e 	bl	800dd40 <__mcmp>
 800ac64:	2800      	cmp	r0, #0
 800ac66:	da45      	bge.n	800acf4 <_strtod_l+0x864>
 800ac68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac6a:	ea53 030a 	orrs.w	r3, r3, sl
 800ac6e:	d16b      	bne.n	800ad48 <_strtod_l+0x8b8>
 800ac70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d167      	bne.n	800ad48 <_strtod_l+0x8b8>
 800ac78:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac7c:	0d1b      	lsrs	r3, r3, #20
 800ac7e:	051b      	lsls	r3, r3, #20
 800ac80:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ac84:	d960      	bls.n	800ad48 <_strtod_l+0x8b8>
 800ac86:	6963      	ldr	r3, [r4, #20]
 800ac88:	b913      	cbnz	r3, 800ac90 <_strtod_l+0x800>
 800ac8a:	6923      	ldr	r3, [r4, #16]
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	dd5b      	ble.n	800ad48 <_strtod_l+0x8b8>
 800ac90:	4621      	mov	r1, r4
 800ac92:	2201      	movs	r2, #1
 800ac94:	9805      	ldr	r0, [sp, #20]
 800ac96:	f002 ffe7 	bl	800dc68 <__lshift>
 800ac9a:	4641      	mov	r1, r8
 800ac9c:	4604      	mov	r4, r0
 800ac9e:	f003 f84f 	bl	800dd40 <__mcmp>
 800aca2:	2800      	cmp	r0, #0
 800aca4:	dd50      	ble.n	800ad48 <_strtod_l+0x8b8>
 800aca6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800acaa:	9a08      	ldr	r2, [sp, #32]
 800acac:	0d1b      	lsrs	r3, r3, #20
 800acae:	051b      	lsls	r3, r3, #20
 800acb0:	2a00      	cmp	r2, #0
 800acb2:	d06a      	beq.n	800ad8a <_strtod_l+0x8fa>
 800acb4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800acb8:	d867      	bhi.n	800ad8a <_strtod_l+0x8fa>
 800acba:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800acbe:	f67f ae98 	bls.w	800a9f2 <_strtod_l+0x562>
 800acc2:	4650      	mov	r0, sl
 800acc4:	4659      	mov	r1, fp
 800acc6:	4b09      	ldr	r3, [pc, #36]	@ (800acec <_strtod_l+0x85c>)
 800acc8:	2200      	movs	r2, #0
 800acca:	f7f5 fc05 	bl	80004d8 <__aeabi_dmul>
 800acce:	4b08      	ldr	r3, [pc, #32]	@ (800acf0 <_strtod_l+0x860>)
 800acd0:	4682      	mov	sl, r0
 800acd2:	400b      	ands	r3, r1
 800acd4:	468b      	mov	fp, r1
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	f47f ae00 	bne.w	800a8dc <_strtod_l+0x44c>
 800acdc:	2322      	movs	r3, #34	@ 0x22
 800acde:	9a05      	ldr	r2, [sp, #20]
 800ace0:	6013      	str	r3, [r2, #0]
 800ace2:	e5fb      	b.n	800a8dc <_strtod_l+0x44c>
 800ace4:	0800ee00 	.word	0x0800ee00
 800ace8:	fffffc02 	.word	0xfffffc02
 800acec:	39500000 	.word	0x39500000
 800acf0:	7ff00000 	.word	0x7ff00000
 800acf4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800acf8:	d165      	bne.n	800adc6 <_strtod_l+0x936>
 800acfa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800acfc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad00:	b35a      	cbz	r2, 800ad5a <_strtod_l+0x8ca>
 800ad02:	4a99      	ldr	r2, [pc, #612]	@ (800af68 <_strtod_l+0xad8>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d12b      	bne.n	800ad60 <_strtod_l+0x8d0>
 800ad08:	9b08      	ldr	r3, [sp, #32]
 800ad0a:	4651      	mov	r1, sl
 800ad0c:	b303      	cbz	r3, 800ad50 <_strtod_l+0x8c0>
 800ad0e:	465a      	mov	r2, fp
 800ad10:	4b96      	ldr	r3, [pc, #600]	@ (800af6c <_strtod_l+0xadc>)
 800ad12:	4013      	ands	r3, r2
 800ad14:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ad18:	f04f 32ff 	mov.w	r2, #4294967295
 800ad1c:	d81b      	bhi.n	800ad56 <_strtod_l+0x8c6>
 800ad1e:	0d1b      	lsrs	r3, r3, #20
 800ad20:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ad24:	fa02 f303 	lsl.w	r3, r2, r3
 800ad28:	4299      	cmp	r1, r3
 800ad2a:	d119      	bne.n	800ad60 <_strtod_l+0x8d0>
 800ad2c:	4b90      	ldr	r3, [pc, #576]	@ (800af70 <_strtod_l+0xae0>)
 800ad2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d102      	bne.n	800ad3a <_strtod_l+0x8aa>
 800ad34:	3101      	adds	r1, #1
 800ad36:	f43f adc6 	beq.w	800a8c6 <_strtod_l+0x436>
 800ad3a:	f04f 0a00 	mov.w	sl, #0
 800ad3e:	4b8b      	ldr	r3, [pc, #556]	@ (800af6c <_strtod_l+0xadc>)
 800ad40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad42:	401a      	ands	r2, r3
 800ad44:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ad48:	9b08      	ldr	r3, [sp, #32]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d1b9      	bne.n	800acc2 <_strtod_l+0x832>
 800ad4e:	e5c5      	b.n	800a8dc <_strtod_l+0x44c>
 800ad50:	f04f 33ff 	mov.w	r3, #4294967295
 800ad54:	e7e8      	b.n	800ad28 <_strtod_l+0x898>
 800ad56:	4613      	mov	r3, r2
 800ad58:	e7e6      	b.n	800ad28 <_strtod_l+0x898>
 800ad5a:	ea53 030a 	orrs.w	r3, r3, sl
 800ad5e:	d0a2      	beq.n	800aca6 <_strtod_l+0x816>
 800ad60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ad62:	b1db      	cbz	r3, 800ad9c <_strtod_l+0x90c>
 800ad64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad66:	4213      	tst	r3, r2
 800ad68:	d0ee      	beq.n	800ad48 <_strtod_l+0x8b8>
 800ad6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad6c:	4650      	mov	r0, sl
 800ad6e:	4659      	mov	r1, fp
 800ad70:	9a08      	ldr	r2, [sp, #32]
 800ad72:	b1bb      	cbz	r3, 800ada4 <_strtod_l+0x914>
 800ad74:	f7ff fb69 	bl	800a44a <sulp>
 800ad78:	4602      	mov	r2, r0
 800ad7a:	460b      	mov	r3, r1
 800ad7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad80:	f7f5 f9f4 	bl	800016c <__adddf3>
 800ad84:	4682      	mov	sl, r0
 800ad86:	468b      	mov	fp, r1
 800ad88:	e7de      	b.n	800ad48 <_strtod_l+0x8b8>
 800ad8a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ad8e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ad92:	f04f 3aff 	mov.w	sl, #4294967295
 800ad96:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ad9a:	e7d5      	b.n	800ad48 <_strtod_l+0x8b8>
 800ad9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ad9e:	ea13 0f0a 	tst.w	r3, sl
 800ada2:	e7e1      	b.n	800ad68 <_strtod_l+0x8d8>
 800ada4:	f7ff fb51 	bl	800a44a <sulp>
 800ada8:	4602      	mov	r2, r0
 800adaa:	460b      	mov	r3, r1
 800adac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800adb0:	f7f5 f9da 	bl	8000168 <__aeabi_dsub>
 800adb4:	2200      	movs	r2, #0
 800adb6:	2300      	movs	r3, #0
 800adb8:	4682      	mov	sl, r0
 800adba:	468b      	mov	fp, r1
 800adbc:	f7f5 fdf4 	bl	80009a8 <__aeabi_dcmpeq>
 800adc0:	2800      	cmp	r0, #0
 800adc2:	d0c1      	beq.n	800ad48 <_strtod_l+0x8b8>
 800adc4:	e615      	b.n	800a9f2 <_strtod_l+0x562>
 800adc6:	4641      	mov	r1, r8
 800adc8:	4620      	mov	r0, r4
 800adca:	f003 f929 	bl	800e020 <__ratio>
 800adce:	2200      	movs	r2, #0
 800add0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800add4:	4606      	mov	r6, r0
 800add6:	460f      	mov	r7, r1
 800add8:	f7f5 fdfa 	bl	80009d0 <__aeabi_dcmple>
 800addc:	2800      	cmp	r0, #0
 800adde:	d06d      	beq.n	800aebc <_strtod_l+0xa2c>
 800ade0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d178      	bne.n	800aed8 <_strtod_l+0xa48>
 800ade6:	f1ba 0f00 	cmp.w	sl, #0
 800adea:	d156      	bne.n	800ae9a <_strtod_l+0xa0a>
 800adec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800adee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d158      	bne.n	800aea8 <_strtod_l+0xa18>
 800adf6:	2200      	movs	r2, #0
 800adf8:	4630      	mov	r0, r6
 800adfa:	4639      	mov	r1, r7
 800adfc:	4b5d      	ldr	r3, [pc, #372]	@ (800af74 <_strtod_l+0xae4>)
 800adfe:	f7f5 fddd 	bl	80009bc <__aeabi_dcmplt>
 800ae02:	2800      	cmp	r0, #0
 800ae04:	d157      	bne.n	800aeb6 <_strtod_l+0xa26>
 800ae06:	4630      	mov	r0, r6
 800ae08:	4639      	mov	r1, r7
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	4b5a      	ldr	r3, [pc, #360]	@ (800af78 <_strtod_l+0xae8>)
 800ae0e:	f7f5 fb63 	bl	80004d8 <__aeabi_dmul>
 800ae12:	4606      	mov	r6, r0
 800ae14:	460f      	mov	r7, r1
 800ae16:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ae1a:	9606      	str	r6, [sp, #24]
 800ae1c:	9307      	str	r3, [sp, #28]
 800ae1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ae22:	4d52      	ldr	r5, [pc, #328]	@ (800af6c <_strtod_l+0xadc>)
 800ae24:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ae28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae2a:	401d      	ands	r5, r3
 800ae2c:	4b53      	ldr	r3, [pc, #332]	@ (800af7c <_strtod_l+0xaec>)
 800ae2e:	429d      	cmp	r5, r3
 800ae30:	f040 80aa 	bne.w	800af88 <_strtod_l+0xaf8>
 800ae34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae36:	4650      	mov	r0, sl
 800ae38:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ae3c:	4659      	mov	r1, fp
 800ae3e:	f003 f82f 	bl	800dea0 <__ulp>
 800ae42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ae46:	f7f5 fb47 	bl	80004d8 <__aeabi_dmul>
 800ae4a:	4652      	mov	r2, sl
 800ae4c:	465b      	mov	r3, fp
 800ae4e:	f7f5 f98d 	bl	800016c <__adddf3>
 800ae52:	460b      	mov	r3, r1
 800ae54:	4945      	ldr	r1, [pc, #276]	@ (800af6c <_strtod_l+0xadc>)
 800ae56:	4a4a      	ldr	r2, [pc, #296]	@ (800af80 <_strtod_l+0xaf0>)
 800ae58:	4019      	ands	r1, r3
 800ae5a:	4291      	cmp	r1, r2
 800ae5c:	4682      	mov	sl, r0
 800ae5e:	d942      	bls.n	800aee6 <_strtod_l+0xa56>
 800ae60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ae62:	4b43      	ldr	r3, [pc, #268]	@ (800af70 <_strtod_l+0xae0>)
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d103      	bne.n	800ae70 <_strtod_l+0x9e0>
 800ae68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ae6a:	3301      	adds	r3, #1
 800ae6c:	f43f ad2b 	beq.w	800a8c6 <_strtod_l+0x436>
 800ae70:	f04f 3aff 	mov.w	sl, #4294967295
 800ae74:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800af70 <_strtod_l+0xae0>
 800ae78:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ae7a:	9805      	ldr	r0, [sp, #20]
 800ae7c:	f002 fcde 	bl	800d83c <_Bfree>
 800ae80:	4649      	mov	r1, r9
 800ae82:	9805      	ldr	r0, [sp, #20]
 800ae84:	f002 fcda 	bl	800d83c <_Bfree>
 800ae88:	4641      	mov	r1, r8
 800ae8a:	9805      	ldr	r0, [sp, #20]
 800ae8c:	f002 fcd6 	bl	800d83c <_Bfree>
 800ae90:	4621      	mov	r1, r4
 800ae92:	9805      	ldr	r0, [sp, #20]
 800ae94:	f002 fcd2 	bl	800d83c <_Bfree>
 800ae98:	e618      	b.n	800aacc <_strtod_l+0x63c>
 800ae9a:	f1ba 0f01 	cmp.w	sl, #1
 800ae9e:	d103      	bne.n	800aea8 <_strtod_l+0xa18>
 800aea0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	f43f ada5 	beq.w	800a9f2 <_strtod_l+0x562>
 800aea8:	2200      	movs	r2, #0
 800aeaa:	4b36      	ldr	r3, [pc, #216]	@ (800af84 <_strtod_l+0xaf4>)
 800aeac:	2600      	movs	r6, #0
 800aeae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aeb2:	4f30      	ldr	r7, [pc, #192]	@ (800af74 <_strtod_l+0xae4>)
 800aeb4:	e7b3      	b.n	800ae1e <_strtod_l+0x98e>
 800aeb6:	2600      	movs	r6, #0
 800aeb8:	4f2f      	ldr	r7, [pc, #188]	@ (800af78 <_strtod_l+0xae8>)
 800aeba:	e7ac      	b.n	800ae16 <_strtod_l+0x986>
 800aebc:	4630      	mov	r0, r6
 800aebe:	4639      	mov	r1, r7
 800aec0:	4b2d      	ldr	r3, [pc, #180]	@ (800af78 <_strtod_l+0xae8>)
 800aec2:	2200      	movs	r2, #0
 800aec4:	f7f5 fb08 	bl	80004d8 <__aeabi_dmul>
 800aec8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aeca:	4606      	mov	r6, r0
 800aecc:	460f      	mov	r7, r1
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d0a1      	beq.n	800ae16 <_strtod_l+0x986>
 800aed2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800aed6:	e7a2      	b.n	800ae1e <_strtod_l+0x98e>
 800aed8:	2200      	movs	r2, #0
 800aeda:	4b26      	ldr	r3, [pc, #152]	@ (800af74 <_strtod_l+0xae4>)
 800aedc:	4616      	mov	r6, r2
 800aede:	461f      	mov	r7, r3
 800aee0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aee4:	e79b      	b.n	800ae1e <_strtod_l+0x98e>
 800aee6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800aeea:	9b08      	ldr	r3, [sp, #32]
 800aeec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d1c1      	bne.n	800ae78 <_strtod_l+0x9e8>
 800aef4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aef8:	0d1b      	lsrs	r3, r3, #20
 800aefa:	051b      	lsls	r3, r3, #20
 800aefc:	429d      	cmp	r5, r3
 800aefe:	d1bb      	bne.n	800ae78 <_strtod_l+0x9e8>
 800af00:	4630      	mov	r0, r6
 800af02:	4639      	mov	r1, r7
 800af04:	f7f6 f91a 	bl	800113c <__aeabi_d2lz>
 800af08:	f7f5 fab8 	bl	800047c <__aeabi_l2d>
 800af0c:	4602      	mov	r2, r0
 800af0e:	460b      	mov	r3, r1
 800af10:	4630      	mov	r0, r6
 800af12:	4639      	mov	r1, r7
 800af14:	f7f5 f928 	bl	8000168 <__aeabi_dsub>
 800af18:	460b      	mov	r3, r1
 800af1a:	4602      	mov	r2, r0
 800af1c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800af20:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800af24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af26:	ea46 060a 	orr.w	r6, r6, sl
 800af2a:	431e      	orrs	r6, r3
 800af2c:	d069      	beq.n	800b002 <_strtod_l+0xb72>
 800af2e:	a30a      	add	r3, pc, #40	@ (adr r3, 800af58 <_strtod_l+0xac8>)
 800af30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af34:	f7f5 fd42 	bl	80009bc <__aeabi_dcmplt>
 800af38:	2800      	cmp	r0, #0
 800af3a:	f47f accf 	bne.w	800a8dc <_strtod_l+0x44c>
 800af3e:	a308      	add	r3, pc, #32	@ (adr r3, 800af60 <_strtod_l+0xad0>)
 800af40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af48:	f7f5 fd56 	bl	80009f8 <__aeabi_dcmpgt>
 800af4c:	2800      	cmp	r0, #0
 800af4e:	d093      	beq.n	800ae78 <_strtod_l+0x9e8>
 800af50:	e4c4      	b.n	800a8dc <_strtod_l+0x44c>
 800af52:	bf00      	nop
 800af54:	f3af 8000 	nop.w
 800af58:	94a03595 	.word	0x94a03595
 800af5c:	3fdfffff 	.word	0x3fdfffff
 800af60:	35afe535 	.word	0x35afe535
 800af64:	3fe00000 	.word	0x3fe00000
 800af68:	000fffff 	.word	0x000fffff
 800af6c:	7ff00000 	.word	0x7ff00000
 800af70:	7fefffff 	.word	0x7fefffff
 800af74:	3ff00000 	.word	0x3ff00000
 800af78:	3fe00000 	.word	0x3fe00000
 800af7c:	7fe00000 	.word	0x7fe00000
 800af80:	7c9fffff 	.word	0x7c9fffff
 800af84:	bff00000 	.word	0xbff00000
 800af88:	9b08      	ldr	r3, [sp, #32]
 800af8a:	b323      	cbz	r3, 800afd6 <_strtod_l+0xb46>
 800af8c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800af90:	d821      	bhi.n	800afd6 <_strtod_l+0xb46>
 800af92:	a327      	add	r3, pc, #156	@ (adr r3, 800b030 <_strtod_l+0xba0>)
 800af94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af98:	4630      	mov	r0, r6
 800af9a:	4639      	mov	r1, r7
 800af9c:	f7f5 fd18 	bl	80009d0 <__aeabi_dcmple>
 800afa0:	b1a0      	cbz	r0, 800afcc <_strtod_l+0xb3c>
 800afa2:	4639      	mov	r1, r7
 800afa4:	4630      	mov	r0, r6
 800afa6:	f7f5 fd6f 	bl	8000a88 <__aeabi_d2uiz>
 800afaa:	2801      	cmp	r0, #1
 800afac:	bf38      	it	cc
 800afae:	2001      	movcc	r0, #1
 800afb0:	f7f5 fa18 	bl	80003e4 <__aeabi_ui2d>
 800afb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afb6:	4606      	mov	r6, r0
 800afb8:	460f      	mov	r7, r1
 800afba:	b9fb      	cbnz	r3, 800affc <_strtod_l+0xb6c>
 800afbc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800afc0:	9014      	str	r0, [sp, #80]	@ 0x50
 800afc2:	9315      	str	r3, [sp, #84]	@ 0x54
 800afc4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800afc8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800afcc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800afce:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800afd2:	1b5b      	subs	r3, r3, r5
 800afd4:	9311      	str	r3, [sp, #68]	@ 0x44
 800afd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800afda:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800afde:	f002 ff5f 	bl	800dea0 <__ulp>
 800afe2:	4602      	mov	r2, r0
 800afe4:	460b      	mov	r3, r1
 800afe6:	4650      	mov	r0, sl
 800afe8:	4659      	mov	r1, fp
 800afea:	f7f5 fa75 	bl	80004d8 <__aeabi_dmul>
 800afee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800aff2:	f7f5 f8bb 	bl	800016c <__adddf3>
 800aff6:	4682      	mov	sl, r0
 800aff8:	468b      	mov	fp, r1
 800affa:	e776      	b.n	800aeea <_strtod_l+0xa5a>
 800affc:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b000:	e7e0      	b.n	800afc4 <_strtod_l+0xb34>
 800b002:	a30d      	add	r3, pc, #52	@ (adr r3, 800b038 <_strtod_l+0xba8>)
 800b004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b008:	f7f5 fcd8 	bl	80009bc <__aeabi_dcmplt>
 800b00c:	e79e      	b.n	800af4c <_strtod_l+0xabc>
 800b00e:	2300      	movs	r3, #0
 800b010:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b012:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b014:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b016:	6013      	str	r3, [r2, #0]
 800b018:	f7ff ba77 	b.w	800a50a <_strtod_l+0x7a>
 800b01c:	2a65      	cmp	r2, #101	@ 0x65
 800b01e:	f43f ab6e 	beq.w	800a6fe <_strtod_l+0x26e>
 800b022:	2a45      	cmp	r2, #69	@ 0x45
 800b024:	f43f ab6b 	beq.w	800a6fe <_strtod_l+0x26e>
 800b028:	2301      	movs	r3, #1
 800b02a:	f7ff bba6 	b.w	800a77a <_strtod_l+0x2ea>
 800b02e:	bf00      	nop
 800b030:	ffc00000 	.word	0xffc00000
 800b034:	41dfffff 	.word	0x41dfffff
 800b038:	94a03595 	.word	0x94a03595
 800b03c:	3fcfffff 	.word	0x3fcfffff

0800b040 <_strtod_r>:
 800b040:	4b01      	ldr	r3, [pc, #4]	@ (800b048 <_strtod_r+0x8>)
 800b042:	f7ff ba25 	b.w	800a490 <_strtod_l>
 800b046:	bf00      	nop
 800b048:	2000002c 	.word	0x2000002c

0800b04c <strtof>:
 800b04c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b050:	4d24      	ldr	r5, [pc, #144]	@ (800b0e4 <strtof+0x98>)
 800b052:	460a      	mov	r2, r1
 800b054:	4b24      	ldr	r3, [pc, #144]	@ (800b0e8 <strtof+0x9c>)
 800b056:	4601      	mov	r1, r0
 800b058:	6828      	ldr	r0, [r5, #0]
 800b05a:	f7ff fa19 	bl	800a490 <_strtod_l>
 800b05e:	4602      	mov	r2, r0
 800b060:	460b      	mov	r3, r1
 800b062:	4606      	mov	r6, r0
 800b064:	460f      	mov	r7, r1
 800b066:	f7f5 fcd1 	bl	8000a0c <__aeabi_dcmpun>
 800b06a:	b168      	cbz	r0, 800b088 <strtof+0x3c>
 800b06c:	2f00      	cmp	r7, #0
 800b06e:	481f      	ldr	r0, [pc, #124]	@ (800b0ec <strtof+0xa0>)
 800b070:	da06      	bge.n	800b080 <strtof+0x34>
 800b072:	f001 f8e5 	bl	800c240 <nanf>
 800b076:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800b07a:	4620      	mov	r0, r4
 800b07c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b080:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b084:	f001 b8dc 	b.w	800c240 <nanf>
 800b088:	4639      	mov	r1, r7
 800b08a:	4630      	mov	r0, r6
 800b08c:	f7f5 fd1c 	bl	8000ac8 <__aeabi_d2f>
 800b090:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800b094:	4604      	mov	r4, r0
 800b096:	4916      	ldr	r1, [pc, #88]	@ (800b0f0 <strtof+0xa4>)
 800b098:	4640      	mov	r0, r8
 800b09a:	f7f6 f839 	bl	8001110 <__aeabi_fcmpun>
 800b09e:	b9b0      	cbnz	r0, 800b0ce <strtof+0x82>
 800b0a0:	4640      	mov	r0, r8
 800b0a2:	4913      	ldr	r1, [pc, #76]	@ (800b0f0 <strtof+0xa4>)
 800b0a4:	f7f6 f816 	bl	80010d4 <__aeabi_fcmple>
 800b0a8:	b988      	cbnz	r0, 800b0ce <strtof+0x82>
 800b0aa:	f027 4900 	bic.w	r9, r7, #2147483648	@ 0x80000000
 800b0ae:	f04f 32ff 	mov.w	r2, #4294967295
 800b0b2:	4630      	mov	r0, r6
 800b0b4:	4649      	mov	r1, r9
 800b0b6:	4b0f      	ldr	r3, [pc, #60]	@ (800b0f4 <strtof+0xa8>)
 800b0b8:	f7f5 fca8 	bl	8000a0c <__aeabi_dcmpun>
 800b0bc:	b970      	cbnz	r0, 800b0dc <strtof+0x90>
 800b0be:	f04f 32ff 	mov.w	r2, #4294967295
 800b0c2:	4630      	mov	r0, r6
 800b0c4:	4649      	mov	r1, r9
 800b0c6:	4b0b      	ldr	r3, [pc, #44]	@ (800b0f4 <strtof+0xa8>)
 800b0c8:	f7f5 fc82 	bl	80009d0 <__aeabi_dcmple>
 800b0cc:	b930      	cbnz	r0, 800b0dc <strtof+0x90>
 800b0ce:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800b0d2:	d1d2      	bne.n	800b07a <strtof+0x2e>
 800b0d4:	4b08      	ldr	r3, [pc, #32]	@ (800b0f8 <strtof+0xac>)
 800b0d6:	403b      	ands	r3, r7
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d0ce      	beq.n	800b07a <strtof+0x2e>
 800b0dc:	2222      	movs	r2, #34	@ 0x22
 800b0de:	682b      	ldr	r3, [r5, #0]
 800b0e0:	601a      	str	r2, [r3, #0]
 800b0e2:	e7ca      	b.n	800b07a <strtof+0x2e>
 800b0e4:	20000198 	.word	0x20000198
 800b0e8:	2000002c 	.word	0x2000002c
 800b0ec:	0800ef15 	.word	0x0800ef15
 800b0f0:	7f7fffff 	.word	0x7f7fffff
 800b0f4:	7fefffff 	.word	0x7fefffff
 800b0f8:	7ff00000 	.word	0x7ff00000

0800b0fc <__cvt>:
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b102:	461d      	mov	r5, r3
 800b104:	bfbb      	ittet	lt
 800b106:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800b10a:	461d      	movlt	r5, r3
 800b10c:	2300      	movge	r3, #0
 800b10e:	232d      	movlt	r3, #45	@ 0x2d
 800b110:	b088      	sub	sp, #32
 800b112:	4614      	mov	r4, r2
 800b114:	bfb8      	it	lt
 800b116:	4614      	movlt	r4, r2
 800b118:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b11a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800b11c:	7013      	strb	r3, [r2, #0]
 800b11e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b120:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800b124:	f023 0820 	bic.w	r8, r3, #32
 800b128:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b12c:	d005      	beq.n	800b13a <__cvt+0x3e>
 800b12e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b132:	d100      	bne.n	800b136 <__cvt+0x3a>
 800b134:	3601      	adds	r6, #1
 800b136:	2302      	movs	r3, #2
 800b138:	e000      	b.n	800b13c <__cvt+0x40>
 800b13a:	2303      	movs	r3, #3
 800b13c:	aa07      	add	r2, sp, #28
 800b13e:	9204      	str	r2, [sp, #16]
 800b140:	aa06      	add	r2, sp, #24
 800b142:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b146:	e9cd 3600 	strd	r3, r6, [sp]
 800b14a:	4622      	mov	r2, r4
 800b14c:	462b      	mov	r3, r5
 800b14e:	f001 f923 	bl	800c398 <_dtoa_r>
 800b152:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b156:	4607      	mov	r7, r0
 800b158:	d119      	bne.n	800b18e <__cvt+0x92>
 800b15a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b15c:	07db      	lsls	r3, r3, #31
 800b15e:	d50e      	bpl.n	800b17e <__cvt+0x82>
 800b160:	eb00 0906 	add.w	r9, r0, r6
 800b164:	2200      	movs	r2, #0
 800b166:	2300      	movs	r3, #0
 800b168:	4620      	mov	r0, r4
 800b16a:	4629      	mov	r1, r5
 800b16c:	f7f5 fc1c 	bl	80009a8 <__aeabi_dcmpeq>
 800b170:	b108      	cbz	r0, 800b176 <__cvt+0x7a>
 800b172:	f8cd 901c 	str.w	r9, [sp, #28]
 800b176:	2230      	movs	r2, #48	@ 0x30
 800b178:	9b07      	ldr	r3, [sp, #28]
 800b17a:	454b      	cmp	r3, r9
 800b17c:	d31e      	bcc.n	800b1bc <__cvt+0xc0>
 800b17e:	4638      	mov	r0, r7
 800b180:	9b07      	ldr	r3, [sp, #28]
 800b182:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b184:	1bdb      	subs	r3, r3, r7
 800b186:	6013      	str	r3, [r2, #0]
 800b188:	b008      	add	sp, #32
 800b18a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b18e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b192:	eb00 0906 	add.w	r9, r0, r6
 800b196:	d1e5      	bne.n	800b164 <__cvt+0x68>
 800b198:	7803      	ldrb	r3, [r0, #0]
 800b19a:	2b30      	cmp	r3, #48	@ 0x30
 800b19c:	d10a      	bne.n	800b1b4 <__cvt+0xb8>
 800b19e:	2200      	movs	r2, #0
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	4620      	mov	r0, r4
 800b1a4:	4629      	mov	r1, r5
 800b1a6:	f7f5 fbff 	bl	80009a8 <__aeabi_dcmpeq>
 800b1aa:	b918      	cbnz	r0, 800b1b4 <__cvt+0xb8>
 800b1ac:	f1c6 0601 	rsb	r6, r6, #1
 800b1b0:	f8ca 6000 	str.w	r6, [sl]
 800b1b4:	f8da 3000 	ldr.w	r3, [sl]
 800b1b8:	4499      	add	r9, r3
 800b1ba:	e7d3      	b.n	800b164 <__cvt+0x68>
 800b1bc:	1c59      	adds	r1, r3, #1
 800b1be:	9107      	str	r1, [sp, #28]
 800b1c0:	701a      	strb	r2, [r3, #0]
 800b1c2:	e7d9      	b.n	800b178 <__cvt+0x7c>

0800b1c4 <__exponent>:
 800b1c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1c6:	2900      	cmp	r1, #0
 800b1c8:	bfb6      	itet	lt
 800b1ca:	232d      	movlt	r3, #45	@ 0x2d
 800b1cc:	232b      	movge	r3, #43	@ 0x2b
 800b1ce:	4249      	neglt	r1, r1
 800b1d0:	2909      	cmp	r1, #9
 800b1d2:	7002      	strb	r2, [r0, #0]
 800b1d4:	7043      	strb	r3, [r0, #1]
 800b1d6:	dd29      	ble.n	800b22c <__exponent+0x68>
 800b1d8:	f10d 0307 	add.w	r3, sp, #7
 800b1dc:	461d      	mov	r5, r3
 800b1de:	270a      	movs	r7, #10
 800b1e0:	fbb1 f6f7 	udiv	r6, r1, r7
 800b1e4:	461a      	mov	r2, r3
 800b1e6:	fb07 1416 	mls	r4, r7, r6, r1
 800b1ea:	3430      	adds	r4, #48	@ 0x30
 800b1ec:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b1f0:	460c      	mov	r4, r1
 800b1f2:	2c63      	cmp	r4, #99	@ 0x63
 800b1f4:	4631      	mov	r1, r6
 800b1f6:	f103 33ff 	add.w	r3, r3, #4294967295
 800b1fa:	dcf1      	bgt.n	800b1e0 <__exponent+0x1c>
 800b1fc:	3130      	adds	r1, #48	@ 0x30
 800b1fe:	1e94      	subs	r4, r2, #2
 800b200:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b204:	4623      	mov	r3, r4
 800b206:	1c41      	adds	r1, r0, #1
 800b208:	42ab      	cmp	r3, r5
 800b20a:	d30a      	bcc.n	800b222 <__exponent+0x5e>
 800b20c:	f10d 0309 	add.w	r3, sp, #9
 800b210:	1a9b      	subs	r3, r3, r2
 800b212:	42ac      	cmp	r4, r5
 800b214:	bf88      	it	hi
 800b216:	2300      	movhi	r3, #0
 800b218:	3302      	adds	r3, #2
 800b21a:	4403      	add	r3, r0
 800b21c:	1a18      	subs	r0, r3, r0
 800b21e:	b003      	add	sp, #12
 800b220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b222:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b226:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b22a:	e7ed      	b.n	800b208 <__exponent+0x44>
 800b22c:	2330      	movs	r3, #48	@ 0x30
 800b22e:	3130      	adds	r1, #48	@ 0x30
 800b230:	7083      	strb	r3, [r0, #2]
 800b232:	70c1      	strb	r1, [r0, #3]
 800b234:	1d03      	adds	r3, r0, #4
 800b236:	e7f1      	b.n	800b21c <__exponent+0x58>

0800b238 <_printf_float>:
 800b238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b23c:	b091      	sub	sp, #68	@ 0x44
 800b23e:	460c      	mov	r4, r1
 800b240:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800b244:	4616      	mov	r6, r2
 800b246:	461f      	mov	r7, r3
 800b248:	4605      	mov	r5, r0
 800b24a:	f000 ff5f 	bl	800c10c <_localeconv_r>
 800b24e:	6803      	ldr	r3, [r0, #0]
 800b250:	4618      	mov	r0, r3
 800b252:	9308      	str	r3, [sp, #32]
 800b254:	f7f4 ff7c 	bl	8000150 <strlen>
 800b258:	2300      	movs	r3, #0
 800b25a:	930e      	str	r3, [sp, #56]	@ 0x38
 800b25c:	f8d8 3000 	ldr.w	r3, [r8]
 800b260:	9009      	str	r0, [sp, #36]	@ 0x24
 800b262:	3307      	adds	r3, #7
 800b264:	f023 0307 	bic.w	r3, r3, #7
 800b268:	f103 0208 	add.w	r2, r3, #8
 800b26c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b270:	f8d4 b000 	ldr.w	fp, [r4]
 800b274:	f8c8 2000 	str.w	r2, [r8]
 800b278:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b27c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b280:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b282:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b286:	f04f 32ff 	mov.w	r2, #4294967295
 800b28a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b28e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b292:	4b9c      	ldr	r3, [pc, #624]	@ (800b504 <_printf_float+0x2cc>)
 800b294:	f7f5 fbba 	bl	8000a0c <__aeabi_dcmpun>
 800b298:	bb70      	cbnz	r0, 800b2f8 <_printf_float+0xc0>
 800b29a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b29e:	f04f 32ff 	mov.w	r2, #4294967295
 800b2a2:	4b98      	ldr	r3, [pc, #608]	@ (800b504 <_printf_float+0x2cc>)
 800b2a4:	f7f5 fb94 	bl	80009d0 <__aeabi_dcmple>
 800b2a8:	bb30      	cbnz	r0, 800b2f8 <_printf_float+0xc0>
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	4640      	mov	r0, r8
 800b2b0:	4649      	mov	r1, r9
 800b2b2:	f7f5 fb83 	bl	80009bc <__aeabi_dcmplt>
 800b2b6:	b110      	cbz	r0, 800b2be <_printf_float+0x86>
 800b2b8:	232d      	movs	r3, #45	@ 0x2d
 800b2ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2be:	4a92      	ldr	r2, [pc, #584]	@ (800b508 <_printf_float+0x2d0>)
 800b2c0:	4b92      	ldr	r3, [pc, #584]	@ (800b50c <_printf_float+0x2d4>)
 800b2c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b2c6:	bf94      	ite	ls
 800b2c8:	4690      	movls	r8, r2
 800b2ca:	4698      	movhi	r8, r3
 800b2cc:	2303      	movs	r3, #3
 800b2ce:	f04f 0900 	mov.w	r9, #0
 800b2d2:	6123      	str	r3, [r4, #16]
 800b2d4:	f02b 0304 	bic.w	r3, fp, #4
 800b2d8:	6023      	str	r3, [r4, #0]
 800b2da:	4633      	mov	r3, r6
 800b2dc:	4621      	mov	r1, r4
 800b2de:	4628      	mov	r0, r5
 800b2e0:	9700      	str	r7, [sp, #0]
 800b2e2:	aa0f      	add	r2, sp, #60	@ 0x3c
 800b2e4:	f000 f9d4 	bl	800b690 <_printf_common>
 800b2e8:	3001      	adds	r0, #1
 800b2ea:	f040 8090 	bne.w	800b40e <_printf_float+0x1d6>
 800b2ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b2f2:	b011      	add	sp, #68	@ 0x44
 800b2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2f8:	4642      	mov	r2, r8
 800b2fa:	464b      	mov	r3, r9
 800b2fc:	4640      	mov	r0, r8
 800b2fe:	4649      	mov	r1, r9
 800b300:	f7f5 fb84 	bl	8000a0c <__aeabi_dcmpun>
 800b304:	b148      	cbz	r0, 800b31a <_printf_float+0xe2>
 800b306:	464b      	mov	r3, r9
 800b308:	2b00      	cmp	r3, #0
 800b30a:	bfb8      	it	lt
 800b30c:	232d      	movlt	r3, #45	@ 0x2d
 800b30e:	4a80      	ldr	r2, [pc, #512]	@ (800b510 <_printf_float+0x2d8>)
 800b310:	bfb8      	it	lt
 800b312:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b316:	4b7f      	ldr	r3, [pc, #508]	@ (800b514 <_printf_float+0x2dc>)
 800b318:	e7d3      	b.n	800b2c2 <_printf_float+0x8a>
 800b31a:	6863      	ldr	r3, [r4, #4]
 800b31c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800b320:	1c5a      	adds	r2, r3, #1
 800b322:	d13f      	bne.n	800b3a4 <_printf_float+0x16c>
 800b324:	2306      	movs	r3, #6
 800b326:	6063      	str	r3, [r4, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800b32e:	6023      	str	r3, [r4, #0]
 800b330:	9206      	str	r2, [sp, #24]
 800b332:	aa0e      	add	r2, sp, #56	@ 0x38
 800b334:	e9cd a204 	strd	sl, r2, [sp, #16]
 800b338:	aa0d      	add	r2, sp, #52	@ 0x34
 800b33a:	9203      	str	r2, [sp, #12]
 800b33c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800b340:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b344:	6863      	ldr	r3, [r4, #4]
 800b346:	4642      	mov	r2, r8
 800b348:	9300      	str	r3, [sp, #0]
 800b34a:	4628      	mov	r0, r5
 800b34c:	464b      	mov	r3, r9
 800b34e:	910a      	str	r1, [sp, #40]	@ 0x28
 800b350:	f7ff fed4 	bl	800b0fc <__cvt>
 800b354:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b356:	4680      	mov	r8, r0
 800b358:	2947      	cmp	r1, #71	@ 0x47
 800b35a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b35c:	d128      	bne.n	800b3b0 <_printf_float+0x178>
 800b35e:	1cc8      	adds	r0, r1, #3
 800b360:	db02      	blt.n	800b368 <_printf_float+0x130>
 800b362:	6863      	ldr	r3, [r4, #4]
 800b364:	4299      	cmp	r1, r3
 800b366:	dd40      	ble.n	800b3ea <_printf_float+0x1b2>
 800b368:	f1aa 0a02 	sub.w	sl, sl, #2
 800b36c:	fa5f fa8a 	uxtb.w	sl, sl
 800b370:	4652      	mov	r2, sl
 800b372:	3901      	subs	r1, #1
 800b374:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b378:	910d      	str	r1, [sp, #52]	@ 0x34
 800b37a:	f7ff ff23 	bl	800b1c4 <__exponent>
 800b37e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b380:	4681      	mov	r9, r0
 800b382:	1813      	adds	r3, r2, r0
 800b384:	2a01      	cmp	r2, #1
 800b386:	6123      	str	r3, [r4, #16]
 800b388:	dc02      	bgt.n	800b390 <_printf_float+0x158>
 800b38a:	6822      	ldr	r2, [r4, #0]
 800b38c:	07d2      	lsls	r2, r2, #31
 800b38e:	d501      	bpl.n	800b394 <_printf_float+0x15c>
 800b390:	3301      	adds	r3, #1
 800b392:	6123      	str	r3, [r4, #16]
 800b394:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d09e      	beq.n	800b2da <_printf_float+0xa2>
 800b39c:	232d      	movs	r3, #45	@ 0x2d
 800b39e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3a2:	e79a      	b.n	800b2da <_printf_float+0xa2>
 800b3a4:	2947      	cmp	r1, #71	@ 0x47
 800b3a6:	d1bf      	bne.n	800b328 <_printf_float+0xf0>
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d1bd      	bne.n	800b328 <_printf_float+0xf0>
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	e7ba      	b.n	800b326 <_printf_float+0xee>
 800b3b0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b3b4:	d9dc      	bls.n	800b370 <_printf_float+0x138>
 800b3b6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b3ba:	d118      	bne.n	800b3ee <_printf_float+0x1b6>
 800b3bc:	2900      	cmp	r1, #0
 800b3be:	6863      	ldr	r3, [r4, #4]
 800b3c0:	dd0b      	ble.n	800b3da <_printf_float+0x1a2>
 800b3c2:	6121      	str	r1, [r4, #16]
 800b3c4:	b913      	cbnz	r3, 800b3cc <_printf_float+0x194>
 800b3c6:	6822      	ldr	r2, [r4, #0]
 800b3c8:	07d0      	lsls	r0, r2, #31
 800b3ca:	d502      	bpl.n	800b3d2 <_printf_float+0x19a>
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	440b      	add	r3, r1
 800b3d0:	6123      	str	r3, [r4, #16]
 800b3d2:	f04f 0900 	mov.w	r9, #0
 800b3d6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b3d8:	e7dc      	b.n	800b394 <_printf_float+0x15c>
 800b3da:	b913      	cbnz	r3, 800b3e2 <_printf_float+0x1aa>
 800b3dc:	6822      	ldr	r2, [r4, #0]
 800b3de:	07d2      	lsls	r2, r2, #31
 800b3e0:	d501      	bpl.n	800b3e6 <_printf_float+0x1ae>
 800b3e2:	3302      	adds	r3, #2
 800b3e4:	e7f4      	b.n	800b3d0 <_printf_float+0x198>
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	e7f2      	b.n	800b3d0 <_printf_float+0x198>
 800b3ea:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b3ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3f0:	4299      	cmp	r1, r3
 800b3f2:	db05      	blt.n	800b400 <_printf_float+0x1c8>
 800b3f4:	6823      	ldr	r3, [r4, #0]
 800b3f6:	6121      	str	r1, [r4, #16]
 800b3f8:	07d8      	lsls	r0, r3, #31
 800b3fa:	d5ea      	bpl.n	800b3d2 <_printf_float+0x19a>
 800b3fc:	1c4b      	adds	r3, r1, #1
 800b3fe:	e7e7      	b.n	800b3d0 <_printf_float+0x198>
 800b400:	2900      	cmp	r1, #0
 800b402:	bfcc      	ite	gt
 800b404:	2201      	movgt	r2, #1
 800b406:	f1c1 0202 	rsble	r2, r1, #2
 800b40a:	4413      	add	r3, r2
 800b40c:	e7e0      	b.n	800b3d0 <_printf_float+0x198>
 800b40e:	6823      	ldr	r3, [r4, #0]
 800b410:	055a      	lsls	r2, r3, #21
 800b412:	d407      	bmi.n	800b424 <_printf_float+0x1ec>
 800b414:	6923      	ldr	r3, [r4, #16]
 800b416:	4642      	mov	r2, r8
 800b418:	4631      	mov	r1, r6
 800b41a:	4628      	mov	r0, r5
 800b41c:	47b8      	blx	r7
 800b41e:	3001      	adds	r0, #1
 800b420:	d12b      	bne.n	800b47a <_printf_float+0x242>
 800b422:	e764      	b.n	800b2ee <_printf_float+0xb6>
 800b424:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b428:	f240 80dc 	bls.w	800b5e4 <_printf_float+0x3ac>
 800b42c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b430:	2200      	movs	r2, #0
 800b432:	2300      	movs	r3, #0
 800b434:	f7f5 fab8 	bl	80009a8 <__aeabi_dcmpeq>
 800b438:	2800      	cmp	r0, #0
 800b43a:	d033      	beq.n	800b4a4 <_printf_float+0x26c>
 800b43c:	2301      	movs	r3, #1
 800b43e:	4631      	mov	r1, r6
 800b440:	4628      	mov	r0, r5
 800b442:	4a35      	ldr	r2, [pc, #212]	@ (800b518 <_printf_float+0x2e0>)
 800b444:	47b8      	blx	r7
 800b446:	3001      	adds	r0, #1
 800b448:	f43f af51 	beq.w	800b2ee <_printf_float+0xb6>
 800b44c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800b450:	4543      	cmp	r3, r8
 800b452:	db02      	blt.n	800b45a <_printf_float+0x222>
 800b454:	6823      	ldr	r3, [r4, #0]
 800b456:	07d8      	lsls	r0, r3, #31
 800b458:	d50f      	bpl.n	800b47a <_printf_float+0x242>
 800b45a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b45e:	4631      	mov	r1, r6
 800b460:	4628      	mov	r0, r5
 800b462:	47b8      	blx	r7
 800b464:	3001      	adds	r0, #1
 800b466:	f43f af42 	beq.w	800b2ee <_printf_float+0xb6>
 800b46a:	f04f 0900 	mov.w	r9, #0
 800b46e:	f108 38ff 	add.w	r8, r8, #4294967295
 800b472:	f104 0a1a 	add.w	sl, r4, #26
 800b476:	45c8      	cmp	r8, r9
 800b478:	dc09      	bgt.n	800b48e <_printf_float+0x256>
 800b47a:	6823      	ldr	r3, [r4, #0]
 800b47c:	079b      	lsls	r3, r3, #30
 800b47e:	f100 8102 	bmi.w	800b686 <_printf_float+0x44e>
 800b482:	68e0      	ldr	r0, [r4, #12]
 800b484:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b486:	4298      	cmp	r0, r3
 800b488:	bfb8      	it	lt
 800b48a:	4618      	movlt	r0, r3
 800b48c:	e731      	b.n	800b2f2 <_printf_float+0xba>
 800b48e:	2301      	movs	r3, #1
 800b490:	4652      	mov	r2, sl
 800b492:	4631      	mov	r1, r6
 800b494:	4628      	mov	r0, r5
 800b496:	47b8      	blx	r7
 800b498:	3001      	adds	r0, #1
 800b49a:	f43f af28 	beq.w	800b2ee <_printf_float+0xb6>
 800b49e:	f109 0901 	add.w	r9, r9, #1
 800b4a2:	e7e8      	b.n	800b476 <_printf_float+0x23e>
 800b4a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	dc38      	bgt.n	800b51c <_printf_float+0x2e4>
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	4631      	mov	r1, r6
 800b4ae:	4628      	mov	r0, r5
 800b4b0:	4a19      	ldr	r2, [pc, #100]	@ (800b518 <_printf_float+0x2e0>)
 800b4b2:	47b8      	blx	r7
 800b4b4:	3001      	adds	r0, #1
 800b4b6:	f43f af1a 	beq.w	800b2ee <_printf_float+0xb6>
 800b4ba:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800b4be:	ea59 0303 	orrs.w	r3, r9, r3
 800b4c2:	d102      	bne.n	800b4ca <_printf_float+0x292>
 800b4c4:	6823      	ldr	r3, [r4, #0]
 800b4c6:	07d9      	lsls	r1, r3, #31
 800b4c8:	d5d7      	bpl.n	800b47a <_printf_float+0x242>
 800b4ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b4ce:	4631      	mov	r1, r6
 800b4d0:	4628      	mov	r0, r5
 800b4d2:	47b8      	blx	r7
 800b4d4:	3001      	adds	r0, #1
 800b4d6:	f43f af0a 	beq.w	800b2ee <_printf_float+0xb6>
 800b4da:	f04f 0a00 	mov.w	sl, #0
 800b4de:	f104 0b1a 	add.w	fp, r4, #26
 800b4e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b4e4:	425b      	negs	r3, r3
 800b4e6:	4553      	cmp	r3, sl
 800b4e8:	dc01      	bgt.n	800b4ee <_printf_float+0x2b6>
 800b4ea:	464b      	mov	r3, r9
 800b4ec:	e793      	b.n	800b416 <_printf_float+0x1de>
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	465a      	mov	r2, fp
 800b4f2:	4631      	mov	r1, r6
 800b4f4:	4628      	mov	r0, r5
 800b4f6:	47b8      	blx	r7
 800b4f8:	3001      	adds	r0, #1
 800b4fa:	f43f aef8 	beq.w	800b2ee <_printf_float+0xb6>
 800b4fe:	f10a 0a01 	add.w	sl, sl, #1
 800b502:	e7ee      	b.n	800b4e2 <_printf_float+0x2aa>
 800b504:	7fefffff 	.word	0x7fefffff
 800b508:	0800ee28 	.word	0x0800ee28
 800b50c:	0800ee2c 	.word	0x0800ee2c
 800b510:	0800ee30 	.word	0x0800ee30
 800b514:	0800ee34 	.word	0x0800ee34
 800b518:	0800ee38 	.word	0x0800ee38
 800b51c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b51e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b522:	4553      	cmp	r3, sl
 800b524:	bfa8      	it	ge
 800b526:	4653      	movge	r3, sl
 800b528:	2b00      	cmp	r3, #0
 800b52a:	4699      	mov	r9, r3
 800b52c:	dc36      	bgt.n	800b59c <_printf_float+0x364>
 800b52e:	f04f 0b00 	mov.w	fp, #0
 800b532:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b536:	f104 021a 	add.w	r2, r4, #26
 800b53a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b53c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b53e:	eba3 0309 	sub.w	r3, r3, r9
 800b542:	455b      	cmp	r3, fp
 800b544:	dc31      	bgt.n	800b5aa <_printf_float+0x372>
 800b546:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b548:	459a      	cmp	sl, r3
 800b54a:	dc3a      	bgt.n	800b5c2 <_printf_float+0x38a>
 800b54c:	6823      	ldr	r3, [r4, #0]
 800b54e:	07da      	lsls	r2, r3, #31
 800b550:	d437      	bmi.n	800b5c2 <_printf_float+0x38a>
 800b552:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b554:	ebaa 0903 	sub.w	r9, sl, r3
 800b558:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b55a:	ebaa 0303 	sub.w	r3, sl, r3
 800b55e:	4599      	cmp	r9, r3
 800b560:	bfa8      	it	ge
 800b562:	4699      	movge	r9, r3
 800b564:	f1b9 0f00 	cmp.w	r9, #0
 800b568:	dc33      	bgt.n	800b5d2 <_printf_float+0x39a>
 800b56a:	f04f 0800 	mov.w	r8, #0
 800b56e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b572:	f104 0b1a 	add.w	fp, r4, #26
 800b576:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b578:	ebaa 0303 	sub.w	r3, sl, r3
 800b57c:	eba3 0309 	sub.w	r3, r3, r9
 800b580:	4543      	cmp	r3, r8
 800b582:	f77f af7a 	ble.w	800b47a <_printf_float+0x242>
 800b586:	2301      	movs	r3, #1
 800b588:	465a      	mov	r2, fp
 800b58a:	4631      	mov	r1, r6
 800b58c:	4628      	mov	r0, r5
 800b58e:	47b8      	blx	r7
 800b590:	3001      	adds	r0, #1
 800b592:	f43f aeac 	beq.w	800b2ee <_printf_float+0xb6>
 800b596:	f108 0801 	add.w	r8, r8, #1
 800b59a:	e7ec      	b.n	800b576 <_printf_float+0x33e>
 800b59c:	4642      	mov	r2, r8
 800b59e:	4631      	mov	r1, r6
 800b5a0:	4628      	mov	r0, r5
 800b5a2:	47b8      	blx	r7
 800b5a4:	3001      	adds	r0, #1
 800b5a6:	d1c2      	bne.n	800b52e <_printf_float+0x2f6>
 800b5a8:	e6a1      	b.n	800b2ee <_printf_float+0xb6>
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	4631      	mov	r1, r6
 800b5ae:	4628      	mov	r0, r5
 800b5b0:	920a      	str	r2, [sp, #40]	@ 0x28
 800b5b2:	47b8      	blx	r7
 800b5b4:	3001      	adds	r0, #1
 800b5b6:	f43f ae9a 	beq.w	800b2ee <_printf_float+0xb6>
 800b5ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b5bc:	f10b 0b01 	add.w	fp, fp, #1
 800b5c0:	e7bb      	b.n	800b53a <_printf_float+0x302>
 800b5c2:	4631      	mov	r1, r6
 800b5c4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b5c8:	4628      	mov	r0, r5
 800b5ca:	47b8      	blx	r7
 800b5cc:	3001      	adds	r0, #1
 800b5ce:	d1c0      	bne.n	800b552 <_printf_float+0x31a>
 800b5d0:	e68d      	b.n	800b2ee <_printf_float+0xb6>
 800b5d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b5d4:	464b      	mov	r3, r9
 800b5d6:	4631      	mov	r1, r6
 800b5d8:	4628      	mov	r0, r5
 800b5da:	4442      	add	r2, r8
 800b5dc:	47b8      	blx	r7
 800b5de:	3001      	adds	r0, #1
 800b5e0:	d1c3      	bne.n	800b56a <_printf_float+0x332>
 800b5e2:	e684      	b.n	800b2ee <_printf_float+0xb6>
 800b5e4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b5e8:	f1ba 0f01 	cmp.w	sl, #1
 800b5ec:	dc01      	bgt.n	800b5f2 <_printf_float+0x3ba>
 800b5ee:	07db      	lsls	r3, r3, #31
 800b5f0:	d536      	bpl.n	800b660 <_printf_float+0x428>
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	4642      	mov	r2, r8
 800b5f6:	4631      	mov	r1, r6
 800b5f8:	4628      	mov	r0, r5
 800b5fa:	47b8      	blx	r7
 800b5fc:	3001      	adds	r0, #1
 800b5fe:	f43f ae76 	beq.w	800b2ee <_printf_float+0xb6>
 800b602:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b606:	4631      	mov	r1, r6
 800b608:	4628      	mov	r0, r5
 800b60a:	47b8      	blx	r7
 800b60c:	3001      	adds	r0, #1
 800b60e:	f43f ae6e 	beq.w	800b2ee <_printf_float+0xb6>
 800b612:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b616:	2200      	movs	r2, #0
 800b618:	2300      	movs	r3, #0
 800b61a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b61e:	f7f5 f9c3 	bl	80009a8 <__aeabi_dcmpeq>
 800b622:	b9c0      	cbnz	r0, 800b656 <_printf_float+0x41e>
 800b624:	4653      	mov	r3, sl
 800b626:	f108 0201 	add.w	r2, r8, #1
 800b62a:	4631      	mov	r1, r6
 800b62c:	4628      	mov	r0, r5
 800b62e:	47b8      	blx	r7
 800b630:	3001      	adds	r0, #1
 800b632:	d10c      	bne.n	800b64e <_printf_float+0x416>
 800b634:	e65b      	b.n	800b2ee <_printf_float+0xb6>
 800b636:	2301      	movs	r3, #1
 800b638:	465a      	mov	r2, fp
 800b63a:	4631      	mov	r1, r6
 800b63c:	4628      	mov	r0, r5
 800b63e:	47b8      	blx	r7
 800b640:	3001      	adds	r0, #1
 800b642:	f43f ae54 	beq.w	800b2ee <_printf_float+0xb6>
 800b646:	f108 0801 	add.w	r8, r8, #1
 800b64a:	45d0      	cmp	r8, sl
 800b64c:	dbf3      	blt.n	800b636 <_printf_float+0x3fe>
 800b64e:	464b      	mov	r3, r9
 800b650:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b654:	e6e0      	b.n	800b418 <_printf_float+0x1e0>
 800b656:	f04f 0800 	mov.w	r8, #0
 800b65a:	f104 0b1a 	add.w	fp, r4, #26
 800b65e:	e7f4      	b.n	800b64a <_printf_float+0x412>
 800b660:	2301      	movs	r3, #1
 800b662:	4642      	mov	r2, r8
 800b664:	e7e1      	b.n	800b62a <_printf_float+0x3f2>
 800b666:	2301      	movs	r3, #1
 800b668:	464a      	mov	r2, r9
 800b66a:	4631      	mov	r1, r6
 800b66c:	4628      	mov	r0, r5
 800b66e:	47b8      	blx	r7
 800b670:	3001      	adds	r0, #1
 800b672:	f43f ae3c 	beq.w	800b2ee <_printf_float+0xb6>
 800b676:	f108 0801 	add.w	r8, r8, #1
 800b67a:	68e3      	ldr	r3, [r4, #12]
 800b67c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b67e:	1a5b      	subs	r3, r3, r1
 800b680:	4543      	cmp	r3, r8
 800b682:	dcf0      	bgt.n	800b666 <_printf_float+0x42e>
 800b684:	e6fd      	b.n	800b482 <_printf_float+0x24a>
 800b686:	f04f 0800 	mov.w	r8, #0
 800b68a:	f104 0919 	add.w	r9, r4, #25
 800b68e:	e7f4      	b.n	800b67a <_printf_float+0x442>

0800b690 <_printf_common>:
 800b690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b694:	4616      	mov	r6, r2
 800b696:	4698      	mov	r8, r3
 800b698:	688a      	ldr	r2, [r1, #8]
 800b69a:	690b      	ldr	r3, [r1, #16]
 800b69c:	4607      	mov	r7, r0
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	bfb8      	it	lt
 800b6a2:	4613      	movlt	r3, r2
 800b6a4:	6033      	str	r3, [r6, #0]
 800b6a6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b6aa:	460c      	mov	r4, r1
 800b6ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b6b0:	b10a      	cbz	r2, 800b6b6 <_printf_common+0x26>
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	6033      	str	r3, [r6, #0]
 800b6b6:	6823      	ldr	r3, [r4, #0]
 800b6b8:	0699      	lsls	r1, r3, #26
 800b6ba:	bf42      	ittt	mi
 800b6bc:	6833      	ldrmi	r3, [r6, #0]
 800b6be:	3302      	addmi	r3, #2
 800b6c0:	6033      	strmi	r3, [r6, #0]
 800b6c2:	6825      	ldr	r5, [r4, #0]
 800b6c4:	f015 0506 	ands.w	r5, r5, #6
 800b6c8:	d106      	bne.n	800b6d8 <_printf_common+0x48>
 800b6ca:	f104 0a19 	add.w	sl, r4, #25
 800b6ce:	68e3      	ldr	r3, [r4, #12]
 800b6d0:	6832      	ldr	r2, [r6, #0]
 800b6d2:	1a9b      	subs	r3, r3, r2
 800b6d4:	42ab      	cmp	r3, r5
 800b6d6:	dc2b      	bgt.n	800b730 <_printf_common+0xa0>
 800b6d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b6dc:	6822      	ldr	r2, [r4, #0]
 800b6de:	3b00      	subs	r3, #0
 800b6e0:	bf18      	it	ne
 800b6e2:	2301      	movne	r3, #1
 800b6e4:	0692      	lsls	r2, r2, #26
 800b6e6:	d430      	bmi.n	800b74a <_printf_common+0xba>
 800b6e8:	4641      	mov	r1, r8
 800b6ea:	4638      	mov	r0, r7
 800b6ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b6f0:	47c8      	blx	r9
 800b6f2:	3001      	adds	r0, #1
 800b6f4:	d023      	beq.n	800b73e <_printf_common+0xae>
 800b6f6:	6823      	ldr	r3, [r4, #0]
 800b6f8:	6922      	ldr	r2, [r4, #16]
 800b6fa:	f003 0306 	and.w	r3, r3, #6
 800b6fe:	2b04      	cmp	r3, #4
 800b700:	bf14      	ite	ne
 800b702:	2500      	movne	r5, #0
 800b704:	6833      	ldreq	r3, [r6, #0]
 800b706:	f04f 0600 	mov.w	r6, #0
 800b70a:	bf08      	it	eq
 800b70c:	68e5      	ldreq	r5, [r4, #12]
 800b70e:	f104 041a 	add.w	r4, r4, #26
 800b712:	bf08      	it	eq
 800b714:	1aed      	subeq	r5, r5, r3
 800b716:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b71a:	bf08      	it	eq
 800b71c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b720:	4293      	cmp	r3, r2
 800b722:	bfc4      	itt	gt
 800b724:	1a9b      	subgt	r3, r3, r2
 800b726:	18ed      	addgt	r5, r5, r3
 800b728:	42b5      	cmp	r5, r6
 800b72a:	d11a      	bne.n	800b762 <_printf_common+0xd2>
 800b72c:	2000      	movs	r0, #0
 800b72e:	e008      	b.n	800b742 <_printf_common+0xb2>
 800b730:	2301      	movs	r3, #1
 800b732:	4652      	mov	r2, sl
 800b734:	4641      	mov	r1, r8
 800b736:	4638      	mov	r0, r7
 800b738:	47c8      	blx	r9
 800b73a:	3001      	adds	r0, #1
 800b73c:	d103      	bne.n	800b746 <_printf_common+0xb6>
 800b73e:	f04f 30ff 	mov.w	r0, #4294967295
 800b742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b746:	3501      	adds	r5, #1
 800b748:	e7c1      	b.n	800b6ce <_printf_common+0x3e>
 800b74a:	2030      	movs	r0, #48	@ 0x30
 800b74c:	18e1      	adds	r1, r4, r3
 800b74e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b752:	1c5a      	adds	r2, r3, #1
 800b754:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b758:	4422      	add	r2, r4
 800b75a:	3302      	adds	r3, #2
 800b75c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b760:	e7c2      	b.n	800b6e8 <_printf_common+0x58>
 800b762:	2301      	movs	r3, #1
 800b764:	4622      	mov	r2, r4
 800b766:	4641      	mov	r1, r8
 800b768:	4638      	mov	r0, r7
 800b76a:	47c8      	blx	r9
 800b76c:	3001      	adds	r0, #1
 800b76e:	d0e6      	beq.n	800b73e <_printf_common+0xae>
 800b770:	3601      	adds	r6, #1
 800b772:	e7d9      	b.n	800b728 <_printf_common+0x98>

0800b774 <_printf_i>:
 800b774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b778:	7e0f      	ldrb	r7, [r1, #24]
 800b77a:	4691      	mov	r9, r2
 800b77c:	2f78      	cmp	r7, #120	@ 0x78
 800b77e:	4680      	mov	r8, r0
 800b780:	460c      	mov	r4, r1
 800b782:	469a      	mov	sl, r3
 800b784:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b786:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b78a:	d807      	bhi.n	800b79c <_printf_i+0x28>
 800b78c:	2f62      	cmp	r7, #98	@ 0x62
 800b78e:	d80a      	bhi.n	800b7a6 <_printf_i+0x32>
 800b790:	2f00      	cmp	r7, #0
 800b792:	f000 80d3 	beq.w	800b93c <_printf_i+0x1c8>
 800b796:	2f58      	cmp	r7, #88	@ 0x58
 800b798:	f000 80ba 	beq.w	800b910 <_printf_i+0x19c>
 800b79c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b7a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b7a4:	e03a      	b.n	800b81c <_printf_i+0xa8>
 800b7a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b7aa:	2b15      	cmp	r3, #21
 800b7ac:	d8f6      	bhi.n	800b79c <_printf_i+0x28>
 800b7ae:	a101      	add	r1, pc, #4	@ (adr r1, 800b7b4 <_printf_i+0x40>)
 800b7b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b7b4:	0800b80d 	.word	0x0800b80d
 800b7b8:	0800b821 	.word	0x0800b821
 800b7bc:	0800b79d 	.word	0x0800b79d
 800b7c0:	0800b79d 	.word	0x0800b79d
 800b7c4:	0800b79d 	.word	0x0800b79d
 800b7c8:	0800b79d 	.word	0x0800b79d
 800b7cc:	0800b821 	.word	0x0800b821
 800b7d0:	0800b79d 	.word	0x0800b79d
 800b7d4:	0800b79d 	.word	0x0800b79d
 800b7d8:	0800b79d 	.word	0x0800b79d
 800b7dc:	0800b79d 	.word	0x0800b79d
 800b7e0:	0800b923 	.word	0x0800b923
 800b7e4:	0800b84b 	.word	0x0800b84b
 800b7e8:	0800b8dd 	.word	0x0800b8dd
 800b7ec:	0800b79d 	.word	0x0800b79d
 800b7f0:	0800b79d 	.word	0x0800b79d
 800b7f4:	0800b945 	.word	0x0800b945
 800b7f8:	0800b79d 	.word	0x0800b79d
 800b7fc:	0800b84b 	.word	0x0800b84b
 800b800:	0800b79d 	.word	0x0800b79d
 800b804:	0800b79d 	.word	0x0800b79d
 800b808:	0800b8e5 	.word	0x0800b8e5
 800b80c:	6833      	ldr	r3, [r6, #0]
 800b80e:	1d1a      	adds	r2, r3, #4
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	6032      	str	r2, [r6, #0]
 800b814:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b818:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b81c:	2301      	movs	r3, #1
 800b81e:	e09e      	b.n	800b95e <_printf_i+0x1ea>
 800b820:	6833      	ldr	r3, [r6, #0]
 800b822:	6820      	ldr	r0, [r4, #0]
 800b824:	1d19      	adds	r1, r3, #4
 800b826:	6031      	str	r1, [r6, #0]
 800b828:	0606      	lsls	r6, r0, #24
 800b82a:	d501      	bpl.n	800b830 <_printf_i+0xbc>
 800b82c:	681d      	ldr	r5, [r3, #0]
 800b82e:	e003      	b.n	800b838 <_printf_i+0xc4>
 800b830:	0645      	lsls	r5, r0, #25
 800b832:	d5fb      	bpl.n	800b82c <_printf_i+0xb8>
 800b834:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b838:	2d00      	cmp	r5, #0
 800b83a:	da03      	bge.n	800b844 <_printf_i+0xd0>
 800b83c:	232d      	movs	r3, #45	@ 0x2d
 800b83e:	426d      	negs	r5, r5
 800b840:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b844:	230a      	movs	r3, #10
 800b846:	4859      	ldr	r0, [pc, #356]	@ (800b9ac <_printf_i+0x238>)
 800b848:	e011      	b.n	800b86e <_printf_i+0xfa>
 800b84a:	6821      	ldr	r1, [r4, #0]
 800b84c:	6833      	ldr	r3, [r6, #0]
 800b84e:	0608      	lsls	r0, r1, #24
 800b850:	f853 5b04 	ldr.w	r5, [r3], #4
 800b854:	d402      	bmi.n	800b85c <_printf_i+0xe8>
 800b856:	0649      	lsls	r1, r1, #25
 800b858:	bf48      	it	mi
 800b85a:	b2ad      	uxthmi	r5, r5
 800b85c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b85e:	6033      	str	r3, [r6, #0]
 800b860:	bf14      	ite	ne
 800b862:	230a      	movne	r3, #10
 800b864:	2308      	moveq	r3, #8
 800b866:	4851      	ldr	r0, [pc, #324]	@ (800b9ac <_printf_i+0x238>)
 800b868:	2100      	movs	r1, #0
 800b86a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b86e:	6866      	ldr	r6, [r4, #4]
 800b870:	2e00      	cmp	r6, #0
 800b872:	bfa8      	it	ge
 800b874:	6821      	ldrge	r1, [r4, #0]
 800b876:	60a6      	str	r6, [r4, #8]
 800b878:	bfa4      	itt	ge
 800b87a:	f021 0104 	bicge.w	r1, r1, #4
 800b87e:	6021      	strge	r1, [r4, #0]
 800b880:	b90d      	cbnz	r5, 800b886 <_printf_i+0x112>
 800b882:	2e00      	cmp	r6, #0
 800b884:	d04b      	beq.n	800b91e <_printf_i+0x1aa>
 800b886:	4616      	mov	r6, r2
 800b888:	fbb5 f1f3 	udiv	r1, r5, r3
 800b88c:	fb03 5711 	mls	r7, r3, r1, r5
 800b890:	5dc7      	ldrb	r7, [r0, r7]
 800b892:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b896:	462f      	mov	r7, r5
 800b898:	42bb      	cmp	r3, r7
 800b89a:	460d      	mov	r5, r1
 800b89c:	d9f4      	bls.n	800b888 <_printf_i+0x114>
 800b89e:	2b08      	cmp	r3, #8
 800b8a0:	d10b      	bne.n	800b8ba <_printf_i+0x146>
 800b8a2:	6823      	ldr	r3, [r4, #0]
 800b8a4:	07df      	lsls	r7, r3, #31
 800b8a6:	d508      	bpl.n	800b8ba <_printf_i+0x146>
 800b8a8:	6923      	ldr	r3, [r4, #16]
 800b8aa:	6861      	ldr	r1, [r4, #4]
 800b8ac:	4299      	cmp	r1, r3
 800b8ae:	bfde      	ittt	le
 800b8b0:	2330      	movle	r3, #48	@ 0x30
 800b8b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b8b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b8ba:	1b92      	subs	r2, r2, r6
 800b8bc:	6122      	str	r2, [r4, #16]
 800b8be:	464b      	mov	r3, r9
 800b8c0:	4621      	mov	r1, r4
 800b8c2:	4640      	mov	r0, r8
 800b8c4:	f8cd a000 	str.w	sl, [sp]
 800b8c8:	aa03      	add	r2, sp, #12
 800b8ca:	f7ff fee1 	bl	800b690 <_printf_common>
 800b8ce:	3001      	adds	r0, #1
 800b8d0:	d14a      	bne.n	800b968 <_printf_i+0x1f4>
 800b8d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b8d6:	b004      	add	sp, #16
 800b8d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8dc:	6823      	ldr	r3, [r4, #0]
 800b8de:	f043 0320 	orr.w	r3, r3, #32
 800b8e2:	6023      	str	r3, [r4, #0]
 800b8e4:	2778      	movs	r7, #120	@ 0x78
 800b8e6:	4832      	ldr	r0, [pc, #200]	@ (800b9b0 <_printf_i+0x23c>)
 800b8e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b8ec:	6823      	ldr	r3, [r4, #0]
 800b8ee:	6831      	ldr	r1, [r6, #0]
 800b8f0:	061f      	lsls	r7, r3, #24
 800b8f2:	f851 5b04 	ldr.w	r5, [r1], #4
 800b8f6:	d402      	bmi.n	800b8fe <_printf_i+0x18a>
 800b8f8:	065f      	lsls	r7, r3, #25
 800b8fa:	bf48      	it	mi
 800b8fc:	b2ad      	uxthmi	r5, r5
 800b8fe:	6031      	str	r1, [r6, #0]
 800b900:	07d9      	lsls	r1, r3, #31
 800b902:	bf44      	itt	mi
 800b904:	f043 0320 	orrmi.w	r3, r3, #32
 800b908:	6023      	strmi	r3, [r4, #0]
 800b90a:	b11d      	cbz	r5, 800b914 <_printf_i+0x1a0>
 800b90c:	2310      	movs	r3, #16
 800b90e:	e7ab      	b.n	800b868 <_printf_i+0xf4>
 800b910:	4826      	ldr	r0, [pc, #152]	@ (800b9ac <_printf_i+0x238>)
 800b912:	e7e9      	b.n	800b8e8 <_printf_i+0x174>
 800b914:	6823      	ldr	r3, [r4, #0]
 800b916:	f023 0320 	bic.w	r3, r3, #32
 800b91a:	6023      	str	r3, [r4, #0]
 800b91c:	e7f6      	b.n	800b90c <_printf_i+0x198>
 800b91e:	4616      	mov	r6, r2
 800b920:	e7bd      	b.n	800b89e <_printf_i+0x12a>
 800b922:	6833      	ldr	r3, [r6, #0]
 800b924:	6825      	ldr	r5, [r4, #0]
 800b926:	1d18      	adds	r0, r3, #4
 800b928:	6961      	ldr	r1, [r4, #20]
 800b92a:	6030      	str	r0, [r6, #0]
 800b92c:	062e      	lsls	r6, r5, #24
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	d501      	bpl.n	800b936 <_printf_i+0x1c2>
 800b932:	6019      	str	r1, [r3, #0]
 800b934:	e002      	b.n	800b93c <_printf_i+0x1c8>
 800b936:	0668      	lsls	r0, r5, #25
 800b938:	d5fb      	bpl.n	800b932 <_printf_i+0x1be>
 800b93a:	8019      	strh	r1, [r3, #0]
 800b93c:	2300      	movs	r3, #0
 800b93e:	4616      	mov	r6, r2
 800b940:	6123      	str	r3, [r4, #16]
 800b942:	e7bc      	b.n	800b8be <_printf_i+0x14a>
 800b944:	6833      	ldr	r3, [r6, #0]
 800b946:	2100      	movs	r1, #0
 800b948:	1d1a      	adds	r2, r3, #4
 800b94a:	6032      	str	r2, [r6, #0]
 800b94c:	681e      	ldr	r6, [r3, #0]
 800b94e:	6862      	ldr	r2, [r4, #4]
 800b950:	4630      	mov	r0, r6
 800b952:	f000 fc52 	bl	800c1fa <memchr>
 800b956:	b108      	cbz	r0, 800b95c <_printf_i+0x1e8>
 800b958:	1b80      	subs	r0, r0, r6
 800b95a:	6060      	str	r0, [r4, #4]
 800b95c:	6863      	ldr	r3, [r4, #4]
 800b95e:	6123      	str	r3, [r4, #16]
 800b960:	2300      	movs	r3, #0
 800b962:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b966:	e7aa      	b.n	800b8be <_printf_i+0x14a>
 800b968:	4632      	mov	r2, r6
 800b96a:	4649      	mov	r1, r9
 800b96c:	4640      	mov	r0, r8
 800b96e:	6923      	ldr	r3, [r4, #16]
 800b970:	47d0      	blx	sl
 800b972:	3001      	adds	r0, #1
 800b974:	d0ad      	beq.n	800b8d2 <_printf_i+0x15e>
 800b976:	6823      	ldr	r3, [r4, #0]
 800b978:	079b      	lsls	r3, r3, #30
 800b97a:	d413      	bmi.n	800b9a4 <_printf_i+0x230>
 800b97c:	68e0      	ldr	r0, [r4, #12]
 800b97e:	9b03      	ldr	r3, [sp, #12]
 800b980:	4298      	cmp	r0, r3
 800b982:	bfb8      	it	lt
 800b984:	4618      	movlt	r0, r3
 800b986:	e7a6      	b.n	800b8d6 <_printf_i+0x162>
 800b988:	2301      	movs	r3, #1
 800b98a:	4632      	mov	r2, r6
 800b98c:	4649      	mov	r1, r9
 800b98e:	4640      	mov	r0, r8
 800b990:	47d0      	blx	sl
 800b992:	3001      	adds	r0, #1
 800b994:	d09d      	beq.n	800b8d2 <_printf_i+0x15e>
 800b996:	3501      	adds	r5, #1
 800b998:	68e3      	ldr	r3, [r4, #12]
 800b99a:	9903      	ldr	r1, [sp, #12]
 800b99c:	1a5b      	subs	r3, r3, r1
 800b99e:	42ab      	cmp	r3, r5
 800b9a0:	dcf2      	bgt.n	800b988 <_printf_i+0x214>
 800b9a2:	e7eb      	b.n	800b97c <_printf_i+0x208>
 800b9a4:	2500      	movs	r5, #0
 800b9a6:	f104 0619 	add.w	r6, r4, #25
 800b9aa:	e7f5      	b.n	800b998 <_printf_i+0x224>
 800b9ac:	0800ee3a 	.word	0x0800ee3a
 800b9b0:	0800ee4b 	.word	0x0800ee4b

0800b9b4 <_scanf_float>:
 800b9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9b8:	b087      	sub	sp, #28
 800b9ba:	9303      	str	r3, [sp, #12]
 800b9bc:	688b      	ldr	r3, [r1, #8]
 800b9be:	4617      	mov	r7, r2
 800b9c0:	1e5a      	subs	r2, r3, #1
 800b9c2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b9c6:	bf82      	ittt	hi
 800b9c8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b9cc:	eb03 0b05 	addhi.w	fp, r3, r5
 800b9d0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b9d4:	460a      	mov	r2, r1
 800b9d6:	f04f 0500 	mov.w	r5, #0
 800b9da:	bf88      	it	hi
 800b9dc:	608b      	strhi	r3, [r1, #8]
 800b9de:	680b      	ldr	r3, [r1, #0]
 800b9e0:	4680      	mov	r8, r0
 800b9e2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b9e6:	f842 3b1c 	str.w	r3, [r2], #28
 800b9ea:	460c      	mov	r4, r1
 800b9ec:	bf98      	it	ls
 800b9ee:	f04f 0b00 	movls.w	fp, #0
 800b9f2:	4616      	mov	r6, r2
 800b9f4:	46aa      	mov	sl, r5
 800b9f6:	46a9      	mov	r9, r5
 800b9f8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b9fc:	9201      	str	r2, [sp, #4]
 800b9fe:	9502      	str	r5, [sp, #8]
 800ba00:	68a2      	ldr	r2, [r4, #8]
 800ba02:	b152      	cbz	r2, 800ba1a <_scanf_float+0x66>
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	2b4e      	cmp	r3, #78	@ 0x4e
 800ba0a:	d865      	bhi.n	800bad8 <_scanf_float+0x124>
 800ba0c:	2b40      	cmp	r3, #64	@ 0x40
 800ba0e:	d83d      	bhi.n	800ba8c <_scanf_float+0xd8>
 800ba10:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ba14:	b2c8      	uxtb	r0, r1
 800ba16:	280e      	cmp	r0, #14
 800ba18:	d93b      	bls.n	800ba92 <_scanf_float+0xde>
 800ba1a:	f1b9 0f00 	cmp.w	r9, #0
 800ba1e:	d003      	beq.n	800ba28 <_scanf_float+0x74>
 800ba20:	6823      	ldr	r3, [r4, #0]
 800ba22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ba26:	6023      	str	r3, [r4, #0]
 800ba28:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ba2c:	f1ba 0f01 	cmp.w	sl, #1
 800ba30:	f200 8118 	bhi.w	800bc64 <_scanf_float+0x2b0>
 800ba34:	9b01      	ldr	r3, [sp, #4]
 800ba36:	429e      	cmp	r6, r3
 800ba38:	f200 8109 	bhi.w	800bc4e <_scanf_float+0x29a>
 800ba3c:	2001      	movs	r0, #1
 800ba3e:	b007      	add	sp, #28
 800ba40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba44:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ba48:	2a0d      	cmp	r2, #13
 800ba4a:	d8e6      	bhi.n	800ba1a <_scanf_float+0x66>
 800ba4c:	a101      	add	r1, pc, #4	@ (adr r1, 800ba54 <_scanf_float+0xa0>)
 800ba4e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ba52:	bf00      	nop
 800ba54:	0800bb9b 	.word	0x0800bb9b
 800ba58:	0800ba1b 	.word	0x0800ba1b
 800ba5c:	0800ba1b 	.word	0x0800ba1b
 800ba60:	0800ba1b 	.word	0x0800ba1b
 800ba64:	0800bbfb 	.word	0x0800bbfb
 800ba68:	0800bbd3 	.word	0x0800bbd3
 800ba6c:	0800ba1b 	.word	0x0800ba1b
 800ba70:	0800ba1b 	.word	0x0800ba1b
 800ba74:	0800bba9 	.word	0x0800bba9
 800ba78:	0800ba1b 	.word	0x0800ba1b
 800ba7c:	0800ba1b 	.word	0x0800ba1b
 800ba80:	0800ba1b 	.word	0x0800ba1b
 800ba84:	0800ba1b 	.word	0x0800ba1b
 800ba88:	0800bb61 	.word	0x0800bb61
 800ba8c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800ba90:	e7da      	b.n	800ba48 <_scanf_float+0x94>
 800ba92:	290e      	cmp	r1, #14
 800ba94:	d8c1      	bhi.n	800ba1a <_scanf_float+0x66>
 800ba96:	a001      	add	r0, pc, #4	@ (adr r0, 800ba9c <_scanf_float+0xe8>)
 800ba98:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ba9c:	0800bb51 	.word	0x0800bb51
 800baa0:	0800ba1b 	.word	0x0800ba1b
 800baa4:	0800bb51 	.word	0x0800bb51
 800baa8:	0800bbe7 	.word	0x0800bbe7
 800baac:	0800ba1b 	.word	0x0800ba1b
 800bab0:	0800baf9 	.word	0x0800baf9
 800bab4:	0800bb37 	.word	0x0800bb37
 800bab8:	0800bb37 	.word	0x0800bb37
 800babc:	0800bb37 	.word	0x0800bb37
 800bac0:	0800bb37 	.word	0x0800bb37
 800bac4:	0800bb37 	.word	0x0800bb37
 800bac8:	0800bb37 	.word	0x0800bb37
 800bacc:	0800bb37 	.word	0x0800bb37
 800bad0:	0800bb37 	.word	0x0800bb37
 800bad4:	0800bb37 	.word	0x0800bb37
 800bad8:	2b6e      	cmp	r3, #110	@ 0x6e
 800bada:	d809      	bhi.n	800baf0 <_scanf_float+0x13c>
 800badc:	2b60      	cmp	r3, #96	@ 0x60
 800bade:	d8b1      	bhi.n	800ba44 <_scanf_float+0x90>
 800bae0:	2b54      	cmp	r3, #84	@ 0x54
 800bae2:	d07b      	beq.n	800bbdc <_scanf_float+0x228>
 800bae4:	2b59      	cmp	r3, #89	@ 0x59
 800bae6:	d198      	bne.n	800ba1a <_scanf_float+0x66>
 800bae8:	2d07      	cmp	r5, #7
 800baea:	d196      	bne.n	800ba1a <_scanf_float+0x66>
 800baec:	2508      	movs	r5, #8
 800baee:	e02c      	b.n	800bb4a <_scanf_float+0x196>
 800baf0:	2b74      	cmp	r3, #116	@ 0x74
 800baf2:	d073      	beq.n	800bbdc <_scanf_float+0x228>
 800baf4:	2b79      	cmp	r3, #121	@ 0x79
 800baf6:	e7f6      	b.n	800bae6 <_scanf_float+0x132>
 800baf8:	6821      	ldr	r1, [r4, #0]
 800bafa:	05c8      	lsls	r0, r1, #23
 800bafc:	d51b      	bpl.n	800bb36 <_scanf_float+0x182>
 800bafe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800bb02:	6021      	str	r1, [r4, #0]
 800bb04:	f109 0901 	add.w	r9, r9, #1
 800bb08:	f1bb 0f00 	cmp.w	fp, #0
 800bb0c:	d003      	beq.n	800bb16 <_scanf_float+0x162>
 800bb0e:	3201      	adds	r2, #1
 800bb10:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bb14:	60a2      	str	r2, [r4, #8]
 800bb16:	68a3      	ldr	r3, [r4, #8]
 800bb18:	3b01      	subs	r3, #1
 800bb1a:	60a3      	str	r3, [r4, #8]
 800bb1c:	6923      	ldr	r3, [r4, #16]
 800bb1e:	3301      	adds	r3, #1
 800bb20:	6123      	str	r3, [r4, #16]
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	3b01      	subs	r3, #1
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	607b      	str	r3, [r7, #4]
 800bb2a:	f340 8087 	ble.w	800bc3c <_scanf_float+0x288>
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	3301      	adds	r3, #1
 800bb32:	603b      	str	r3, [r7, #0]
 800bb34:	e764      	b.n	800ba00 <_scanf_float+0x4c>
 800bb36:	eb1a 0105 	adds.w	r1, sl, r5
 800bb3a:	f47f af6e 	bne.w	800ba1a <_scanf_float+0x66>
 800bb3e:	460d      	mov	r5, r1
 800bb40:	468a      	mov	sl, r1
 800bb42:	6822      	ldr	r2, [r4, #0]
 800bb44:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800bb48:	6022      	str	r2, [r4, #0]
 800bb4a:	f806 3b01 	strb.w	r3, [r6], #1
 800bb4e:	e7e2      	b.n	800bb16 <_scanf_float+0x162>
 800bb50:	6822      	ldr	r2, [r4, #0]
 800bb52:	0610      	lsls	r0, r2, #24
 800bb54:	f57f af61 	bpl.w	800ba1a <_scanf_float+0x66>
 800bb58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bb5c:	6022      	str	r2, [r4, #0]
 800bb5e:	e7f4      	b.n	800bb4a <_scanf_float+0x196>
 800bb60:	f1ba 0f00 	cmp.w	sl, #0
 800bb64:	d10e      	bne.n	800bb84 <_scanf_float+0x1d0>
 800bb66:	f1b9 0f00 	cmp.w	r9, #0
 800bb6a:	d10e      	bne.n	800bb8a <_scanf_float+0x1d6>
 800bb6c:	6822      	ldr	r2, [r4, #0]
 800bb6e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bb72:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bb76:	d108      	bne.n	800bb8a <_scanf_float+0x1d6>
 800bb78:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bb7c:	f04f 0a01 	mov.w	sl, #1
 800bb80:	6022      	str	r2, [r4, #0]
 800bb82:	e7e2      	b.n	800bb4a <_scanf_float+0x196>
 800bb84:	f1ba 0f02 	cmp.w	sl, #2
 800bb88:	d055      	beq.n	800bc36 <_scanf_float+0x282>
 800bb8a:	2d01      	cmp	r5, #1
 800bb8c:	d002      	beq.n	800bb94 <_scanf_float+0x1e0>
 800bb8e:	2d04      	cmp	r5, #4
 800bb90:	f47f af43 	bne.w	800ba1a <_scanf_float+0x66>
 800bb94:	3501      	adds	r5, #1
 800bb96:	b2ed      	uxtb	r5, r5
 800bb98:	e7d7      	b.n	800bb4a <_scanf_float+0x196>
 800bb9a:	f1ba 0f01 	cmp.w	sl, #1
 800bb9e:	f47f af3c 	bne.w	800ba1a <_scanf_float+0x66>
 800bba2:	f04f 0a02 	mov.w	sl, #2
 800bba6:	e7d0      	b.n	800bb4a <_scanf_float+0x196>
 800bba8:	b97d      	cbnz	r5, 800bbca <_scanf_float+0x216>
 800bbaa:	f1b9 0f00 	cmp.w	r9, #0
 800bbae:	f47f af37 	bne.w	800ba20 <_scanf_float+0x6c>
 800bbb2:	6822      	ldr	r2, [r4, #0]
 800bbb4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bbb8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bbbc:	f040 8103 	bne.w	800bdc6 <_scanf_float+0x412>
 800bbc0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bbc4:	2501      	movs	r5, #1
 800bbc6:	6022      	str	r2, [r4, #0]
 800bbc8:	e7bf      	b.n	800bb4a <_scanf_float+0x196>
 800bbca:	2d03      	cmp	r5, #3
 800bbcc:	d0e2      	beq.n	800bb94 <_scanf_float+0x1e0>
 800bbce:	2d05      	cmp	r5, #5
 800bbd0:	e7de      	b.n	800bb90 <_scanf_float+0x1dc>
 800bbd2:	2d02      	cmp	r5, #2
 800bbd4:	f47f af21 	bne.w	800ba1a <_scanf_float+0x66>
 800bbd8:	2503      	movs	r5, #3
 800bbda:	e7b6      	b.n	800bb4a <_scanf_float+0x196>
 800bbdc:	2d06      	cmp	r5, #6
 800bbde:	f47f af1c 	bne.w	800ba1a <_scanf_float+0x66>
 800bbe2:	2507      	movs	r5, #7
 800bbe4:	e7b1      	b.n	800bb4a <_scanf_float+0x196>
 800bbe6:	6822      	ldr	r2, [r4, #0]
 800bbe8:	0591      	lsls	r1, r2, #22
 800bbea:	f57f af16 	bpl.w	800ba1a <_scanf_float+0x66>
 800bbee:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800bbf2:	6022      	str	r2, [r4, #0]
 800bbf4:	f8cd 9008 	str.w	r9, [sp, #8]
 800bbf8:	e7a7      	b.n	800bb4a <_scanf_float+0x196>
 800bbfa:	6822      	ldr	r2, [r4, #0]
 800bbfc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800bc00:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800bc04:	d006      	beq.n	800bc14 <_scanf_float+0x260>
 800bc06:	0550      	lsls	r0, r2, #21
 800bc08:	f57f af07 	bpl.w	800ba1a <_scanf_float+0x66>
 800bc0c:	f1b9 0f00 	cmp.w	r9, #0
 800bc10:	f000 80d9 	beq.w	800bdc6 <_scanf_float+0x412>
 800bc14:	0591      	lsls	r1, r2, #22
 800bc16:	bf58      	it	pl
 800bc18:	9902      	ldrpl	r1, [sp, #8]
 800bc1a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bc1e:	bf58      	it	pl
 800bc20:	eba9 0101 	subpl.w	r1, r9, r1
 800bc24:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800bc28:	f04f 0900 	mov.w	r9, #0
 800bc2c:	bf58      	it	pl
 800bc2e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bc32:	6022      	str	r2, [r4, #0]
 800bc34:	e789      	b.n	800bb4a <_scanf_float+0x196>
 800bc36:	f04f 0a03 	mov.w	sl, #3
 800bc3a:	e786      	b.n	800bb4a <_scanf_float+0x196>
 800bc3c:	4639      	mov	r1, r7
 800bc3e:	4640      	mov	r0, r8
 800bc40:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bc44:	4798      	blx	r3
 800bc46:	2800      	cmp	r0, #0
 800bc48:	f43f aeda 	beq.w	800ba00 <_scanf_float+0x4c>
 800bc4c:	e6e5      	b.n	800ba1a <_scanf_float+0x66>
 800bc4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bc52:	463a      	mov	r2, r7
 800bc54:	4640      	mov	r0, r8
 800bc56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bc5a:	4798      	blx	r3
 800bc5c:	6923      	ldr	r3, [r4, #16]
 800bc5e:	3b01      	subs	r3, #1
 800bc60:	6123      	str	r3, [r4, #16]
 800bc62:	e6e7      	b.n	800ba34 <_scanf_float+0x80>
 800bc64:	1e6b      	subs	r3, r5, #1
 800bc66:	2b06      	cmp	r3, #6
 800bc68:	d824      	bhi.n	800bcb4 <_scanf_float+0x300>
 800bc6a:	2d02      	cmp	r5, #2
 800bc6c:	d836      	bhi.n	800bcdc <_scanf_float+0x328>
 800bc6e:	9b01      	ldr	r3, [sp, #4]
 800bc70:	429e      	cmp	r6, r3
 800bc72:	f67f aee3 	bls.w	800ba3c <_scanf_float+0x88>
 800bc76:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bc7a:	463a      	mov	r2, r7
 800bc7c:	4640      	mov	r0, r8
 800bc7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bc82:	4798      	blx	r3
 800bc84:	6923      	ldr	r3, [r4, #16]
 800bc86:	3b01      	subs	r3, #1
 800bc88:	6123      	str	r3, [r4, #16]
 800bc8a:	e7f0      	b.n	800bc6e <_scanf_float+0x2ba>
 800bc8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bc90:	463a      	mov	r2, r7
 800bc92:	4640      	mov	r0, r8
 800bc94:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800bc98:	4798      	blx	r3
 800bc9a:	6923      	ldr	r3, [r4, #16]
 800bc9c:	3b01      	subs	r3, #1
 800bc9e:	6123      	str	r3, [r4, #16]
 800bca0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bca4:	fa5f fa8a 	uxtb.w	sl, sl
 800bca8:	f1ba 0f02 	cmp.w	sl, #2
 800bcac:	d1ee      	bne.n	800bc8c <_scanf_float+0x2d8>
 800bcae:	3d03      	subs	r5, #3
 800bcb0:	b2ed      	uxtb	r5, r5
 800bcb2:	1b76      	subs	r6, r6, r5
 800bcb4:	6823      	ldr	r3, [r4, #0]
 800bcb6:	05da      	lsls	r2, r3, #23
 800bcb8:	d530      	bpl.n	800bd1c <_scanf_float+0x368>
 800bcba:	055b      	lsls	r3, r3, #21
 800bcbc:	d511      	bpl.n	800bce2 <_scanf_float+0x32e>
 800bcbe:	9b01      	ldr	r3, [sp, #4]
 800bcc0:	429e      	cmp	r6, r3
 800bcc2:	f67f aebb 	bls.w	800ba3c <_scanf_float+0x88>
 800bcc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bcca:	463a      	mov	r2, r7
 800bccc:	4640      	mov	r0, r8
 800bcce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bcd2:	4798      	blx	r3
 800bcd4:	6923      	ldr	r3, [r4, #16]
 800bcd6:	3b01      	subs	r3, #1
 800bcd8:	6123      	str	r3, [r4, #16]
 800bcda:	e7f0      	b.n	800bcbe <_scanf_float+0x30a>
 800bcdc:	46aa      	mov	sl, r5
 800bcde:	46b3      	mov	fp, r6
 800bce0:	e7de      	b.n	800bca0 <_scanf_float+0x2ec>
 800bce2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bce6:	6923      	ldr	r3, [r4, #16]
 800bce8:	2965      	cmp	r1, #101	@ 0x65
 800bcea:	f103 33ff 	add.w	r3, r3, #4294967295
 800bcee:	f106 35ff 	add.w	r5, r6, #4294967295
 800bcf2:	6123      	str	r3, [r4, #16]
 800bcf4:	d00c      	beq.n	800bd10 <_scanf_float+0x35c>
 800bcf6:	2945      	cmp	r1, #69	@ 0x45
 800bcf8:	d00a      	beq.n	800bd10 <_scanf_float+0x35c>
 800bcfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bcfe:	463a      	mov	r2, r7
 800bd00:	4640      	mov	r0, r8
 800bd02:	4798      	blx	r3
 800bd04:	6923      	ldr	r3, [r4, #16]
 800bd06:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bd0a:	3b01      	subs	r3, #1
 800bd0c:	1eb5      	subs	r5, r6, #2
 800bd0e:	6123      	str	r3, [r4, #16]
 800bd10:	463a      	mov	r2, r7
 800bd12:	4640      	mov	r0, r8
 800bd14:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bd18:	4798      	blx	r3
 800bd1a:	462e      	mov	r6, r5
 800bd1c:	6822      	ldr	r2, [r4, #0]
 800bd1e:	f012 0210 	ands.w	r2, r2, #16
 800bd22:	d001      	beq.n	800bd28 <_scanf_float+0x374>
 800bd24:	2000      	movs	r0, #0
 800bd26:	e68a      	b.n	800ba3e <_scanf_float+0x8a>
 800bd28:	7032      	strb	r2, [r6, #0]
 800bd2a:	6823      	ldr	r3, [r4, #0]
 800bd2c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bd30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bd34:	d11c      	bne.n	800bd70 <_scanf_float+0x3bc>
 800bd36:	9b02      	ldr	r3, [sp, #8]
 800bd38:	454b      	cmp	r3, r9
 800bd3a:	eba3 0209 	sub.w	r2, r3, r9
 800bd3e:	d123      	bne.n	800bd88 <_scanf_float+0x3d4>
 800bd40:	2200      	movs	r2, #0
 800bd42:	4640      	mov	r0, r8
 800bd44:	9901      	ldr	r1, [sp, #4]
 800bd46:	f7ff f97b 	bl	800b040 <_strtod_r>
 800bd4a:	9b03      	ldr	r3, [sp, #12]
 800bd4c:	6825      	ldr	r5, [r4, #0]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f015 0f02 	tst.w	r5, #2
 800bd54:	4606      	mov	r6, r0
 800bd56:	460f      	mov	r7, r1
 800bd58:	f103 0204 	add.w	r2, r3, #4
 800bd5c:	d01f      	beq.n	800bd9e <_scanf_float+0x3ea>
 800bd5e:	9903      	ldr	r1, [sp, #12]
 800bd60:	600a      	str	r2, [r1, #0]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	e9c3 6700 	strd	r6, r7, [r3]
 800bd68:	68e3      	ldr	r3, [r4, #12]
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	60e3      	str	r3, [r4, #12]
 800bd6e:	e7d9      	b.n	800bd24 <_scanf_float+0x370>
 800bd70:	9b04      	ldr	r3, [sp, #16]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d0e4      	beq.n	800bd40 <_scanf_float+0x38c>
 800bd76:	9905      	ldr	r1, [sp, #20]
 800bd78:	230a      	movs	r3, #10
 800bd7a:	4640      	mov	r0, r8
 800bd7c:	3101      	adds	r1, #1
 800bd7e:	f002 fa3d 	bl	800e1fc <_strtol_r>
 800bd82:	9b04      	ldr	r3, [sp, #16]
 800bd84:	9e05      	ldr	r6, [sp, #20]
 800bd86:	1ac2      	subs	r2, r0, r3
 800bd88:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800bd8c:	429e      	cmp	r6, r3
 800bd8e:	bf28      	it	cs
 800bd90:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800bd94:	4630      	mov	r0, r6
 800bd96:	490d      	ldr	r1, [pc, #52]	@ (800bdcc <_scanf_float+0x418>)
 800bd98:	f000 f8de 	bl	800bf58 <siprintf>
 800bd9c:	e7d0      	b.n	800bd40 <_scanf_float+0x38c>
 800bd9e:	076d      	lsls	r5, r5, #29
 800bda0:	d4dd      	bmi.n	800bd5e <_scanf_float+0x3aa>
 800bda2:	9d03      	ldr	r5, [sp, #12]
 800bda4:	602a      	str	r2, [r5, #0]
 800bda6:	681d      	ldr	r5, [r3, #0]
 800bda8:	4602      	mov	r2, r0
 800bdaa:	460b      	mov	r3, r1
 800bdac:	f7f4 fe2e 	bl	8000a0c <__aeabi_dcmpun>
 800bdb0:	b120      	cbz	r0, 800bdbc <_scanf_float+0x408>
 800bdb2:	4807      	ldr	r0, [pc, #28]	@ (800bdd0 <_scanf_float+0x41c>)
 800bdb4:	f000 fa44 	bl	800c240 <nanf>
 800bdb8:	6028      	str	r0, [r5, #0]
 800bdba:	e7d5      	b.n	800bd68 <_scanf_float+0x3b4>
 800bdbc:	4630      	mov	r0, r6
 800bdbe:	4639      	mov	r1, r7
 800bdc0:	f7f4 fe82 	bl	8000ac8 <__aeabi_d2f>
 800bdc4:	e7f8      	b.n	800bdb8 <_scanf_float+0x404>
 800bdc6:	f04f 0900 	mov.w	r9, #0
 800bdca:	e62d      	b.n	800ba28 <_scanf_float+0x74>
 800bdcc:	0800ee5c 	.word	0x0800ee5c
 800bdd0:	0800ef15 	.word	0x0800ef15

0800bdd4 <std>:
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	b510      	push	{r4, lr}
 800bdd8:	4604      	mov	r4, r0
 800bdda:	e9c0 3300 	strd	r3, r3, [r0]
 800bdde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bde2:	6083      	str	r3, [r0, #8]
 800bde4:	8181      	strh	r1, [r0, #12]
 800bde6:	6643      	str	r3, [r0, #100]	@ 0x64
 800bde8:	81c2      	strh	r2, [r0, #14]
 800bdea:	6183      	str	r3, [r0, #24]
 800bdec:	4619      	mov	r1, r3
 800bdee:	2208      	movs	r2, #8
 800bdf0:	305c      	adds	r0, #92	@ 0x5c
 800bdf2:	f000 f914 	bl	800c01e <memset>
 800bdf6:	4b0d      	ldr	r3, [pc, #52]	@ (800be2c <std+0x58>)
 800bdf8:	6224      	str	r4, [r4, #32]
 800bdfa:	6263      	str	r3, [r4, #36]	@ 0x24
 800bdfc:	4b0c      	ldr	r3, [pc, #48]	@ (800be30 <std+0x5c>)
 800bdfe:	62a3      	str	r3, [r4, #40]	@ 0x28
 800be00:	4b0c      	ldr	r3, [pc, #48]	@ (800be34 <std+0x60>)
 800be02:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800be04:	4b0c      	ldr	r3, [pc, #48]	@ (800be38 <std+0x64>)
 800be06:	6323      	str	r3, [r4, #48]	@ 0x30
 800be08:	4b0c      	ldr	r3, [pc, #48]	@ (800be3c <std+0x68>)
 800be0a:	429c      	cmp	r4, r3
 800be0c:	d006      	beq.n	800be1c <std+0x48>
 800be0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800be12:	4294      	cmp	r4, r2
 800be14:	d002      	beq.n	800be1c <std+0x48>
 800be16:	33d0      	adds	r3, #208	@ 0xd0
 800be18:	429c      	cmp	r4, r3
 800be1a:	d105      	bne.n	800be28 <std+0x54>
 800be1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800be20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be24:	f000 b9e6 	b.w	800c1f4 <__retarget_lock_init_recursive>
 800be28:	bd10      	pop	{r4, pc}
 800be2a:	bf00      	nop
 800be2c:	0800bf99 	.word	0x0800bf99
 800be30:	0800bfbb 	.word	0x0800bfbb
 800be34:	0800bff3 	.word	0x0800bff3
 800be38:	0800c017 	.word	0x0800c017
 800be3c:	200036e0 	.word	0x200036e0

0800be40 <stdio_exit_handler>:
 800be40:	4a02      	ldr	r2, [pc, #8]	@ (800be4c <stdio_exit_handler+0xc>)
 800be42:	4903      	ldr	r1, [pc, #12]	@ (800be50 <stdio_exit_handler+0x10>)
 800be44:	4803      	ldr	r0, [pc, #12]	@ (800be54 <stdio_exit_handler+0x14>)
 800be46:	f000 b869 	b.w	800bf1c <_fwalk_sglue>
 800be4a:	bf00      	nop
 800be4c:	20000020 	.word	0x20000020
 800be50:	0800e5c9 	.word	0x0800e5c9
 800be54:	2000019c 	.word	0x2000019c

0800be58 <cleanup_stdio>:
 800be58:	6841      	ldr	r1, [r0, #4]
 800be5a:	4b0c      	ldr	r3, [pc, #48]	@ (800be8c <cleanup_stdio+0x34>)
 800be5c:	b510      	push	{r4, lr}
 800be5e:	4299      	cmp	r1, r3
 800be60:	4604      	mov	r4, r0
 800be62:	d001      	beq.n	800be68 <cleanup_stdio+0x10>
 800be64:	f002 fbb0 	bl	800e5c8 <_fflush_r>
 800be68:	68a1      	ldr	r1, [r4, #8]
 800be6a:	4b09      	ldr	r3, [pc, #36]	@ (800be90 <cleanup_stdio+0x38>)
 800be6c:	4299      	cmp	r1, r3
 800be6e:	d002      	beq.n	800be76 <cleanup_stdio+0x1e>
 800be70:	4620      	mov	r0, r4
 800be72:	f002 fba9 	bl	800e5c8 <_fflush_r>
 800be76:	68e1      	ldr	r1, [r4, #12]
 800be78:	4b06      	ldr	r3, [pc, #24]	@ (800be94 <cleanup_stdio+0x3c>)
 800be7a:	4299      	cmp	r1, r3
 800be7c:	d004      	beq.n	800be88 <cleanup_stdio+0x30>
 800be7e:	4620      	mov	r0, r4
 800be80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be84:	f002 bba0 	b.w	800e5c8 <_fflush_r>
 800be88:	bd10      	pop	{r4, pc}
 800be8a:	bf00      	nop
 800be8c:	200036e0 	.word	0x200036e0
 800be90:	20003748 	.word	0x20003748
 800be94:	200037b0 	.word	0x200037b0

0800be98 <global_stdio_init.part.0>:
 800be98:	b510      	push	{r4, lr}
 800be9a:	4b0b      	ldr	r3, [pc, #44]	@ (800bec8 <global_stdio_init.part.0+0x30>)
 800be9c:	4c0b      	ldr	r4, [pc, #44]	@ (800becc <global_stdio_init.part.0+0x34>)
 800be9e:	4a0c      	ldr	r2, [pc, #48]	@ (800bed0 <global_stdio_init.part.0+0x38>)
 800bea0:	4620      	mov	r0, r4
 800bea2:	601a      	str	r2, [r3, #0]
 800bea4:	2104      	movs	r1, #4
 800bea6:	2200      	movs	r2, #0
 800bea8:	f7ff ff94 	bl	800bdd4 <std>
 800beac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800beb0:	2201      	movs	r2, #1
 800beb2:	2109      	movs	r1, #9
 800beb4:	f7ff ff8e 	bl	800bdd4 <std>
 800beb8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bebc:	2202      	movs	r2, #2
 800bebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bec2:	2112      	movs	r1, #18
 800bec4:	f7ff bf86 	b.w	800bdd4 <std>
 800bec8:	20003818 	.word	0x20003818
 800becc:	200036e0 	.word	0x200036e0
 800bed0:	0800be41 	.word	0x0800be41

0800bed4 <__sfp_lock_acquire>:
 800bed4:	4801      	ldr	r0, [pc, #4]	@ (800bedc <__sfp_lock_acquire+0x8>)
 800bed6:	f000 b98e 	b.w	800c1f6 <__retarget_lock_acquire_recursive>
 800beda:	bf00      	nop
 800bedc:	20003821 	.word	0x20003821

0800bee0 <__sfp_lock_release>:
 800bee0:	4801      	ldr	r0, [pc, #4]	@ (800bee8 <__sfp_lock_release+0x8>)
 800bee2:	f000 b989 	b.w	800c1f8 <__retarget_lock_release_recursive>
 800bee6:	bf00      	nop
 800bee8:	20003821 	.word	0x20003821

0800beec <__sinit>:
 800beec:	b510      	push	{r4, lr}
 800beee:	4604      	mov	r4, r0
 800bef0:	f7ff fff0 	bl	800bed4 <__sfp_lock_acquire>
 800bef4:	6a23      	ldr	r3, [r4, #32]
 800bef6:	b11b      	cbz	r3, 800bf00 <__sinit+0x14>
 800bef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800befc:	f7ff bff0 	b.w	800bee0 <__sfp_lock_release>
 800bf00:	4b04      	ldr	r3, [pc, #16]	@ (800bf14 <__sinit+0x28>)
 800bf02:	6223      	str	r3, [r4, #32]
 800bf04:	4b04      	ldr	r3, [pc, #16]	@ (800bf18 <__sinit+0x2c>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d1f5      	bne.n	800bef8 <__sinit+0xc>
 800bf0c:	f7ff ffc4 	bl	800be98 <global_stdio_init.part.0>
 800bf10:	e7f2      	b.n	800bef8 <__sinit+0xc>
 800bf12:	bf00      	nop
 800bf14:	0800be59 	.word	0x0800be59
 800bf18:	20003818 	.word	0x20003818

0800bf1c <_fwalk_sglue>:
 800bf1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf20:	4607      	mov	r7, r0
 800bf22:	4688      	mov	r8, r1
 800bf24:	4614      	mov	r4, r2
 800bf26:	2600      	movs	r6, #0
 800bf28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf2c:	f1b9 0901 	subs.w	r9, r9, #1
 800bf30:	d505      	bpl.n	800bf3e <_fwalk_sglue+0x22>
 800bf32:	6824      	ldr	r4, [r4, #0]
 800bf34:	2c00      	cmp	r4, #0
 800bf36:	d1f7      	bne.n	800bf28 <_fwalk_sglue+0xc>
 800bf38:	4630      	mov	r0, r6
 800bf3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf3e:	89ab      	ldrh	r3, [r5, #12]
 800bf40:	2b01      	cmp	r3, #1
 800bf42:	d907      	bls.n	800bf54 <_fwalk_sglue+0x38>
 800bf44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf48:	3301      	adds	r3, #1
 800bf4a:	d003      	beq.n	800bf54 <_fwalk_sglue+0x38>
 800bf4c:	4629      	mov	r1, r5
 800bf4e:	4638      	mov	r0, r7
 800bf50:	47c0      	blx	r8
 800bf52:	4306      	orrs	r6, r0
 800bf54:	3568      	adds	r5, #104	@ 0x68
 800bf56:	e7e9      	b.n	800bf2c <_fwalk_sglue+0x10>

0800bf58 <siprintf>:
 800bf58:	b40e      	push	{r1, r2, r3}
 800bf5a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bf5e:	b500      	push	{lr}
 800bf60:	b09c      	sub	sp, #112	@ 0x70
 800bf62:	ab1d      	add	r3, sp, #116	@ 0x74
 800bf64:	9002      	str	r0, [sp, #8]
 800bf66:	9006      	str	r0, [sp, #24]
 800bf68:	9107      	str	r1, [sp, #28]
 800bf6a:	9104      	str	r1, [sp, #16]
 800bf6c:	4808      	ldr	r0, [pc, #32]	@ (800bf90 <siprintf+0x38>)
 800bf6e:	4909      	ldr	r1, [pc, #36]	@ (800bf94 <siprintf+0x3c>)
 800bf70:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf74:	9105      	str	r1, [sp, #20]
 800bf76:	6800      	ldr	r0, [r0, #0]
 800bf78:	a902      	add	r1, sp, #8
 800bf7a:	9301      	str	r3, [sp, #4]
 800bf7c:	f002 f9a8 	bl	800e2d0 <_svfiprintf_r>
 800bf80:	2200      	movs	r2, #0
 800bf82:	9b02      	ldr	r3, [sp, #8]
 800bf84:	701a      	strb	r2, [r3, #0]
 800bf86:	b01c      	add	sp, #112	@ 0x70
 800bf88:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf8c:	b003      	add	sp, #12
 800bf8e:	4770      	bx	lr
 800bf90:	20000198 	.word	0x20000198
 800bf94:	ffff0208 	.word	0xffff0208

0800bf98 <__sread>:
 800bf98:	b510      	push	{r4, lr}
 800bf9a:	460c      	mov	r4, r1
 800bf9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfa0:	f000 f8da 	bl	800c158 <_read_r>
 800bfa4:	2800      	cmp	r0, #0
 800bfa6:	bfab      	itete	ge
 800bfa8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bfaa:	89a3      	ldrhlt	r3, [r4, #12]
 800bfac:	181b      	addge	r3, r3, r0
 800bfae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bfb2:	bfac      	ite	ge
 800bfb4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bfb6:	81a3      	strhlt	r3, [r4, #12]
 800bfb8:	bd10      	pop	{r4, pc}

0800bfba <__swrite>:
 800bfba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfbe:	461f      	mov	r7, r3
 800bfc0:	898b      	ldrh	r3, [r1, #12]
 800bfc2:	4605      	mov	r5, r0
 800bfc4:	05db      	lsls	r3, r3, #23
 800bfc6:	460c      	mov	r4, r1
 800bfc8:	4616      	mov	r6, r2
 800bfca:	d505      	bpl.n	800bfd8 <__swrite+0x1e>
 800bfcc:	2302      	movs	r3, #2
 800bfce:	2200      	movs	r2, #0
 800bfd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfd4:	f000 f8ae 	bl	800c134 <_lseek_r>
 800bfd8:	89a3      	ldrh	r3, [r4, #12]
 800bfda:	4632      	mov	r2, r6
 800bfdc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bfe0:	81a3      	strh	r3, [r4, #12]
 800bfe2:	4628      	mov	r0, r5
 800bfe4:	463b      	mov	r3, r7
 800bfe6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfee:	f000 b8c5 	b.w	800c17c <_write_r>

0800bff2 <__sseek>:
 800bff2:	b510      	push	{r4, lr}
 800bff4:	460c      	mov	r4, r1
 800bff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bffa:	f000 f89b 	bl	800c134 <_lseek_r>
 800bffe:	1c43      	adds	r3, r0, #1
 800c000:	89a3      	ldrh	r3, [r4, #12]
 800c002:	bf15      	itete	ne
 800c004:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c006:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c00a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c00e:	81a3      	strheq	r3, [r4, #12]
 800c010:	bf18      	it	ne
 800c012:	81a3      	strhne	r3, [r4, #12]
 800c014:	bd10      	pop	{r4, pc}

0800c016 <__sclose>:
 800c016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c01a:	f000 b87b 	b.w	800c114 <_close_r>

0800c01e <memset>:
 800c01e:	4603      	mov	r3, r0
 800c020:	4402      	add	r2, r0
 800c022:	4293      	cmp	r3, r2
 800c024:	d100      	bne.n	800c028 <memset+0xa>
 800c026:	4770      	bx	lr
 800c028:	f803 1b01 	strb.w	r1, [r3], #1
 800c02c:	e7f9      	b.n	800c022 <memset+0x4>

0800c02e <strncmp>:
 800c02e:	b510      	push	{r4, lr}
 800c030:	b16a      	cbz	r2, 800c04e <strncmp+0x20>
 800c032:	3901      	subs	r1, #1
 800c034:	1884      	adds	r4, r0, r2
 800c036:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c03a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c03e:	429a      	cmp	r2, r3
 800c040:	d103      	bne.n	800c04a <strncmp+0x1c>
 800c042:	42a0      	cmp	r0, r4
 800c044:	d001      	beq.n	800c04a <strncmp+0x1c>
 800c046:	2a00      	cmp	r2, #0
 800c048:	d1f5      	bne.n	800c036 <strncmp+0x8>
 800c04a:	1ad0      	subs	r0, r2, r3
 800c04c:	bd10      	pop	{r4, pc}
 800c04e:	4610      	mov	r0, r2
 800c050:	e7fc      	b.n	800c04c <strncmp+0x1e>
	...

0800c054 <strtok>:
 800c054:	4b16      	ldr	r3, [pc, #88]	@ (800c0b0 <strtok+0x5c>)
 800c056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c05a:	681f      	ldr	r7, [r3, #0]
 800c05c:	4605      	mov	r5, r0
 800c05e:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800c060:	460e      	mov	r6, r1
 800c062:	b9ec      	cbnz	r4, 800c0a0 <strtok+0x4c>
 800c064:	2050      	movs	r0, #80	@ 0x50
 800c066:	f001 fae1 	bl	800d62c <malloc>
 800c06a:	4602      	mov	r2, r0
 800c06c:	6478      	str	r0, [r7, #68]	@ 0x44
 800c06e:	b920      	cbnz	r0, 800c07a <strtok+0x26>
 800c070:	215b      	movs	r1, #91	@ 0x5b
 800c072:	4b10      	ldr	r3, [pc, #64]	@ (800c0b4 <strtok+0x60>)
 800c074:	4810      	ldr	r0, [pc, #64]	@ (800c0b8 <strtok+0x64>)
 800c076:	f000 f8e7 	bl	800c248 <__assert_func>
 800c07a:	e9c0 4400 	strd	r4, r4, [r0]
 800c07e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c082:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c086:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800c08a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800c08e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800c092:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800c096:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800c09a:	6184      	str	r4, [r0, #24]
 800c09c:	7704      	strb	r4, [r0, #28]
 800c09e:	6244      	str	r4, [r0, #36]	@ 0x24
 800c0a0:	4631      	mov	r1, r6
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0ac:	f000 b806 	b.w	800c0bc <__strtok_r>
 800c0b0:	20000198 	.word	0x20000198
 800c0b4:	0800ee61 	.word	0x0800ee61
 800c0b8:	0800ee78 	.word	0x0800ee78

0800c0bc <__strtok_r>:
 800c0bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0be:	4604      	mov	r4, r0
 800c0c0:	b908      	cbnz	r0, 800c0c6 <__strtok_r+0xa>
 800c0c2:	6814      	ldr	r4, [r2, #0]
 800c0c4:	b144      	cbz	r4, 800c0d8 <__strtok_r+0x1c>
 800c0c6:	460f      	mov	r7, r1
 800c0c8:	4620      	mov	r0, r4
 800c0ca:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c0ce:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c0d2:	b91e      	cbnz	r6, 800c0dc <__strtok_r+0x20>
 800c0d4:	b965      	cbnz	r5, 800c0f0 <__strtok_r+0x34>
 800c0d6:	6015      	str	r5, [r2, #0]
 800c0d8:	2000      	movs	r0, #0
 800c0da:	e005      	b.n	800c0e8 <__strtok_r+0x2c>
 800c0dc:	42b5      	cmp	r5, r6
 800c0de:	d1f6      	bne.n	800c0ce <__strtok_r+0x12>
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d1f0      	bne.n	800c0c6 <__strtok_r+0xa>
 800c0e4:	6014      	str	r4, [r2, #0]
 800c0e6:	7003      	strb	r3, [r0, #0]
 800c0e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0ea:	461c      	mov	r4, r3
 800c0ec:	e00c      	b.n	800c108 <__strtok_r+0x4c>
 800c0ee:	b915      	cbnz	r5, 800c0f6 <__strtok_r+0x3a>
 800c0f0:	460e      	mov	r6, r1
 800c0f2:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c0f6:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c0fa:	42ab      	cmp	r3, r5
 800c0fc:	d1f7      	bne.n	800c0ee <__strtok_r+0x32>
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d0f3      	beq.n	800c0ea <__strtok_r+0x2e>
 800c102:	2300      	movs	r3, #0
 800c104:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c108:	6014      	str	r4, [r2, #0]
 800c10a:	e7ed      	b.n	800c0e8 <__strtok_r+0x2c>

0800c10c <_localeconv_r>:
 800c10c:	4800      	ldr	r0, [pc, #0]	@ (800c110 <_localeconv_r+0x4>)
 800c10e:	4770      	bx	lr
 800c110:	2000011c 	.word	0x2000011c

0800c114 <_close_r>:
 800c114:	b538      	push	{r3, r4, r5, lr}
 800c116:	2300      	movs	r3, #0
 800c118:	4d05      	ldr	r5, [pc, #20]	@ (800c130 <_close_r+0x1c>)
 800c11a:	4604      	mov	r4, r0
 800c11c:	4608      	mov	r0, r1
 800c11e:	602b      	str	r3, [r5, #0]
 800c120:	f7fa f9b5 	bl	800648e <_close>
 800c124:	1c43      	adds	r3, r0, #1
 800c126:	d102      	bne.n	800c12e <_close_r+0x1a>
 800c128:	682b      	ldr	r3, [r5, #0]
 800c12a:	b103      	cbz	r3, 800c12e <_close_r+0x1a>
 800c12c:	6023      	str	r3, [r4, #0]
 800c12e:	bd38      	pop	{r3, r4, r5, pc}
 800c130:	2000381c 	.word	0x2000381c

0800c134 <_lseek_r>:
 800c134:	b538      	push	{r3, r4, r5, lr}
 800c136:	4604      	mov	r4, r0
 800c138:	4608      	mov	r0, r1
 800c13a:	4611      	mov	r1, r2
 800c13c:	2200      	movs	r2, #0
 800c13e:	4d05      	ldr	r5, [pc, #20]	@ (800c154 <_lseek_r+0x20>)
 800c140:	602a      	str	r2, [r5, #0]
 800c142:	461a      	mov	r2, r3
 800c144:	f7fa f9c7 	bl	80064d6 <_lseek>
 800c148:	1c43      	adds	r3, r0, #1
 800c14a:	d102      	bne.n	800c152 <_lseek_r+0x1e>
 800c14c:	682b      	ldr	r3, [r5, #0]
 800c14e:	b103      	cbz	r3, 800c152 <_lseek_r+0x1e>
 800c150:	6023      	str	r3, [r4, #0]
 800c152:	bd38      	pop	{r3, r4, r5, pc}
 800c154:	2000381c 	.word	0x2000381c

0800c158 <_read_r>:
 800c158:	b538      	push	{r3, r4, r5, lr}
 800c15a:	4604      	mov	r4, r0
 800c15c:	4608      	mov	r0, r1
 800c15e:	4611      	mov	r1, r2
 800c160:	2200      	movs	r2, #0
 800c162:	4d05      	ldr	r5, [pc, #20]	@ (800c178 <_read_r+0x20>)
 800c164:	602a      	str	r2, [r5, #0]
 800c166:	461a      	mov	r2, r3
 800c168:	f7fa f958 	bl	800641c <_read>
 800c16c:	1c43      	adds	r3, r0, #1
 800c16e:	d102      	bne.n	800c176 <_read_r+0x1e>
 800c170:	682b      	ldr	r3, [r5, #0]
 800c172:	b103      	cbz	r3, 800c176 <_read_r+0x1e>
 800c174:	6023      	str	r3, [r4, #0]
 800c176:	bd38      	pop	{r3, r4, r5, pc}
 800c178:	2000381c 	.word	0x2000381c

0800c17c <_write_r>:
 800c17c:	b538      	push	{r3, r4, r5, lr}
 800c17e:	4604      	mov	r4, r0
 800c180:	4608      	mov	r0, r1
 800c182:	4611      	mov	r1, r2
 800c184:	2200      	movs	r2, #0
 800c186:	4d05      	ldr	r5, [pc, #20]	@ (800c19c <_write_r+0x20>)
 800c188:	602a      	str	r2, [r5, #0]
 800c18a:	461a      	mov	r2, r3
 800c18c:	f7fa f963 	bl	8006456 <_write>
 800c190:	1c43      	adds	r3, r0, #1
 800c192:	d102      	bne.n	800c19a <_write_r+0x1e>
 800c194:	682b      	ldr	r3, [r5, #0]
 800c196:	b103      	cbz	r3, 800c19a <_write_r+0x1e>
 800c198:	6023      	str	r3, [r4, #0]
 800c19a:	bd38      	pop	{r3, r4, r5, pc}
 800c19c:	2000381c 	.word	0x2000381c

0800c1a0 <__errno>:
 800c1a0:	4b01      	ldr	r3, [pc, #4]	@ (800c1a8 <__errno+0x8>)
 800c1a2:	6818      	ldr	r0, [r3, #0]
 800c1a4:	4770      	bx	lr
 800c1a6:	bf00      	nop
 800c1a8:	20000198 	.word	0x20000198

0800c1ac <__libc_init_array>:
 800c1ac:	b570      	push	{r4, r5, r6, lr}
 800c1ae:	2600      	movs	r6, #0
 800c1b0:	4d0c      	ldr	r5, [pc, #48]	@ (800c1e4 <__libc_init_array+0x38>)
 800c1b2:	4c0d      	ldr	r4, [pc, #52]	@ (800c1e8 <__libc_init_array+0x3c>)
 800c1b4:	1b64      	subs	r4, r4, r5
 800c1b6:	10a4      	asrs	r4, r4, #2
 800c1b8:	42a6      	cmp	r6, r4
 800c1ba:	d109      	bne.n	800c1d0 <__libc_init_array+0x24>
 800c1bc:	f002 fd54 	bl	800ec68 <_init>
 800c1c0:	2600      	movs	r6, #0
 800c1c2:	4d0a      	ldr	r5, [pc, #40]	@ (800c1ec <__libc_init_array+0x40>)
 800c1c4:	4c0a      	ldr	r4, [pc, #40]	@ (800c1f0 <__libc_init_array+0x44>)
 800c1c6:	1b64      	subs	r4, r4, r5
 800c1c8:	10a4      	asrs	r4, r4, #2
 800c1ca:	42a6      	cmp	r6, r4
 800c1cc:	d105      	bne.n	800c1da <__libc_init_array+0x2e>
 800c1ce:	bd70      	pop	{r4, r5, r6, pc}
 800c1d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1d4:	4798      	blx	r3
 800c1d6:	3601      	adds	r6, #1
 800c1d8:	e7ee      	b.n	800c1b8 <__libc_init_array+0xc>
 800c1da:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1de:	4798      	blx	r3
 800c1e0:	3601      	adds	r6, #1
 800c1e2:	e7f2      	b.n	800c1ca <__libc_init_array+0x1e>
 800c1e4:	0800f264 	.word	0x0800f264
 800c1e8:	0800f264 	.word	0x0800f264
 800c1ec:	0800f264 	.word	0x0800f264
 800c1f0:	0800f268 	.word	0x0800f268

0800c1f4 <__retarget_lock_init_recursive>:
 800c1f4:	4770      	bx	lr

0800c1f6 <__retarget_lock_acquire_recursive>:
 800c1f6:	4770      	bx	lr

0800c1f8 <__retarget_lock_release_recursive>:
 800c1f8:	4770      	bx	lr

0800c1fa <memchr>:
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	b510      	push	{r4, lr}
 800c1fe:	b2c9      	uxtb	r1, r1
 800c200:	4402      	add	r2, r0
 800c202:	4293      	cmp	r3, r2
 800c204:	4618      	mov	r0, r3
 800c206:	d101      	bne.n	800c20c <memchr+0x12>
 800c208:	2000      	movs	r0, #0
 800c20a:	e003      	b.n	800c214 <memchr+0x1a>
 800c20c:	7804      	ldrb	r4, [r0, #0]
 800c20e:	3301      	adds	r3, #1
 800c210:	428c      	cmp	r4, r1
 800c212:	d1f6      	bne.n	800c202 <memchr+0x8>
 800c214:	bd10      	pop	{r4, pc}

0800c216 <memcpy>:
 800c216:	440a      	add	r2, r1
 800c218:	4291      	cmp	r1, r2
 800c21a:	f100 33ff 	add.w	r3, r0, #4294967295
 800c21e:	d100      	bne.n	800c222 <memcpy+0xc>
 800c220:	4770      	bx	lr
 800c222:	b510      	push	{r4, lr}
 800c224:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c228:	4291      	cmp	r1, r2
 800c22a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c22e:	d1f9      	bne.n	800c224 <memcpy+0xe>
 800c230:	bd10      	pop	{r4, pc}
	...

0800c234 <nan>:
 800c234:	2000      	movs	r0, #0
 800c236:	4901      	ldr	r1, [pc, #4]	@ (800c23c <nan+0x8>)
 800c238:	4770      	bx	lr
 800c23a:	bf00      	nop
 800c23c:	7ff80000 	.word	0x7ff80000

0800c240 <nanf>:
 800c240:	4800      	ldr	r0, [pc, #0]	@ (800c244 <nanf+0x4>)
 800c242:	4770      	bx	lr
 800c244:	7fc00000 	.word	0x7fc00000

0800c248 <__assert_func>:
 800c248:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c24a:	4614      	mov	r4, r2
 800c24c:	461a      	mov	r2, r3
 800c24e:	4b09      	ldr	r3, [pc, #36]	@ (800c274 <__assert_func+0x2c>)
 800c250:	4605      	mov	r5, r0
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	68d8      	ldr	r0, [r3, #12]
 800c256:	b954      	cbnz	r4, 800c26e <__assert_func+0x26>
 800c258:	4b07      	ldr	r3, [pc, #28]	@ (800c278 <__assert_func+0x30>)
 800c25a:	461c      	mov	r4, r3
 800c25c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c260:	9100      	str	r1, [sp, #0]
 800c262:	462b      	mov	r3, r5
 800c264:	4905      	ldr	r1, [pc, #20]	@ (800c27c <__assert_func+0x34>)
 800c266:	f002 f9d7 	bl	800e618 <fiprintf>
 800c26a:	f002 fa11 	bl	800e690 <abort>
 800c26e:	4b04      	ldr	r3, [pc, #16]	@ (800c280 <__assert_func+0x38>)
 800c270:	e7f4      	b.n	800c25c <__assert_func+0x14>
 800c272:	bf00      	nop
 800c274:	20000198 	.word	0x20000198
 800c278:	0800ef15 	.word	0x0800ef15
 800c27c:	0800eee7 	.word	0x0800eee7
 800c280:	0800eeda 	.word	0x0800eeda

0800c284 <quorem>:
 800c284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c288:	6903      	ldr	r3, [r0, #16]
 800c28a:	690c      	ldr	r4, [r1, #16]
 800c28c:	4607      	mov	r7, r0
 800c28e:	42a3      	cmp	r3, r4
 800c290:	db7e      	blt.n	800c390 <quorem+0x10c>
 800c292:	3c01      	subs	r4, #1
 800c294:	00a3      	lsls	r3, r4, #2
 800c296:	f100 0514 	add.w	r5, r0, #20
 800c29a:	f101 0814 	add.w	r8, r1, #20
 800c29e:	9300      	str	r3, [sp, #0]
 800c2a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c2a4:	9301      	str	r3, [sp, #4]
 800c2a6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c2aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c2ae:	3301      	adds	r3, #1
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	fbb2 f6f3 	udiv	r6, r2, r3
 800c2b6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c2ba:	d32e      	bcc.n	800c31a <quorem+0x96>
 800c2bc:	f04f 0a00 	mov.w	sl, #0
 800c2c0:	46c4      	mov	ip, r8
 800c2c2:	46ae      	mov	lr, r5
 800c2c4:	46d3      	mov	fp, sl
 800c2c6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c2ca:	b298      	uxth	r0, r3
 800c2cc:	fb06 a000 	mla	r0, r6, r0, sl
 800c2d0:	0c1b      	lsrs	r3, r3, #16
 800c2d2:	0c02      	lsrs	r2, r0, #16
 800c2d4:	fb06 2303 	mla	r3, r6, r3, r2
 800c2d8:	f8de 2000 	ldr.w	r2, [lr]
 800c2dc:	b280      	uxth	r0, r0
 800c2de:	b292      	uxth	r2, r2
 800c2e0:	1a12      	subs	r2, r2, r0
 800c2e2:	445a      	add	r2, fp
 800c2e4:	f8de 0000 	ldr.w	r0, [lr]
 800c2e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c2ec:	b29b      	uxth	r3, r3
 800c2ee:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c2f2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c2f6:	b292      	uxth	r2, r2
 800c2f8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c2fc:	45e1      	cmp	r9, ip
 800c2fe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c302:	f84e 2b04 	str.w	r2, [lr], #4
 800c306:	d2de      	bcs.n	800c2c6 <quorem+0x42>
 800c308:	9b00      	ldr	r3, [sp, #0]
 800c30a:	58eb      	ldr	r3, [r5, r3]
 800c30c:	b92b      	cbnz	r3, 800c31a <quorem+0x96>
 800c30e:	9b01      	ldr	r3, [sp, #4]
 800c310:	3b04      	subs	r3, #4
 800c312:	429d      	cmp	r5, r3
 800c314:	461a      	mov	r2, r3
 800c316:	d32f      	bcc.n	800c378 <quorem+0xf4>
 800c318:	613c      	str	r4, [r7, #16]
 800c31a:	4638      	mov	r0, r7
 800c31c:	f001 fd10 	bl	800dd40 <__mcmp>
 800c320:	2800      	cmp	r0, #0
 800c322:	db25      	blt.n	800c370 <quorem+0xec>
 800c324:	4629      	mov	r1, r5
 800c326:	2000      	movs	r0, #0
 800c328:	f858 2b04 	ldr.w	r2, [r8], #4
 800c32c:	f8d1 c000 	ldr.w	ip, [r1]
 800c330:	fa1f fe82 	uxth.w	lr, r2
 800c334:	fa1f f38c 	uxth.w	r3, ip
 800c338:	eba3 030e 	sub.w	r3, r3, lr
 800c33c:	4403      	add	r3, r0
 800c33e:	0c12      	lsrs	r2, r2, #16
 800c340:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c344:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c348:	b29b      	uxth	r3, r3
 800c34a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c34e:	45c1      	cmp	r9, r8
 800c350:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c354:	f841 3b04 	str.w	r3, [r1], #4
 800c358:	d2e6      	bcs.n	800c328 <quorem+0xa4>
 800c35a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c35e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c362:	b922      	cbnz	r2, 800c36e <quorem+0xea>
 800c364:	3b04      	subs	r3, #4
 800c366:	429d      	cmp	r5, r3
 800c368:	461a      	mov	r2, r3
 800c36a:	d30b      	bcc.n	800c384 <quorem+0x100>
 800c36c:	613c      	str	r4, [r7, #16]
 800c36e:	3601      	adds	r6, #1
 800c370:	4630      	mov	r0, r6
 800c372:	b003      	add	sp, #12
 800c374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c378:	6812      	ldr	r2, [r2, #0]
 800c37a:	3b04      	subs	r3, #4
 800c37c:	2a00      	cmp	r2, #0
 800c37e:	d1cb      	bne.n	800c318 <quorem+0x94>
 800c380:	3c01      	subs	r4, #1
 800c382:	e7c6      	b.n	800c312 <quorem+0x8e>
 800c384:	6812      	ldr	r2, [r2, #0]
 800c386:	3b04      	subs	r3, #4
 800c388:	2a00      	cmp	r2, #0
 800c38a:	d1ef      	bne.n	800c36c <quorem+0xe8>
 800c38c:	3c01      	subs	r4, #1
 800c38e:	e7ea      	b.n	800c366 <quorem+0xe2>
 800c390:	2000      	movs	r0, #0
 800c392:	e7ee      	b.n	800c372 <quorem+0xee>
 800c394:	0000      	movs	r0, r0
	...

0800c398 <_dtoa_r>:
 800c398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c39c:	4614      	mov	r4, r2
 800c39e:	461d      	mov	r5, r3
 800c3a0:	69c7      	ldr	r7, [r0, #28]
 800c3a2:	b097      	sub	sp, #92	@ 0x5c
 800c3a4:	4683      	mov	fp, r0
 800c3a6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c3aa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800c3ac:	b97f      	cbnz	r7, 800c3ce <_dtoa_r+0x36>
 800c3ae:	2010      	movs	r0, #16
 800c3b0:	f001 f93c 	bl	800d62c <malloc>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	f8cb 001c 	str.w	r0, [fp, #28]
 800c3ba:	b920      	cbnz	r0, 800c3c6 <_dtoa_r+0x2e>
 800c3bc:	21ef      	movs	r1, #239	@ 0xef
 800c3be:	4ba8      	ldr	r3, [pc, #672]	@ (800c660 <_dtoa_r+0x2c8>)
 800c3c0:	48a8      	ldr	r0, [pc, #672]	@ (800c664 <_dtoa_r+0x2cc>)
 800c3c2:	f7ff ff41 	bl	800c248 <__assert_func>
 800c3c6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c3ca:	6007      	str	r7, [r0, #0]
 800c3cc:	60c7      	str	r7, [r0, #12]
 800c3ce:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c3d2:	6819      	ldr	r1, [r3, #0]
 800c3d4:	b159      	cbz	r1, 800c3ee <_dtoa_r+0x56>
 800c3d6:	685a      	ldr	r2, [r3, #4]
 800c3d8:	2301      	movs	r3, #1
 800c3da:	4093      	lsls	r3, r2
 800c3dc:	604a      	str	r2, [r1, #4]
 800c3de:	608b      	str	r3, [r1, #8]
 800c3e0:	4658      	mov	r0, fp
 800c3e2:	f001 fa2b 	bl	800d83c <_Bfree>
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c3ec:	601a      	str	r2, [r3, #0]
 800c3ee:	1e2b      	subs	r3, r5, #0
 800c3f0:	bfaf      	iteee	ge
 800c3f2:	2300      	movge	r3, #0
 800c3f4:	2201      	movlt	r2, #1
 800c3f6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c3fa:	9303      	strlt	r3, [sp, #12]
 800c3fc:	bfa8      	it	ge
 800c3fe:	6033      	strge	r3, [r6, #0]
 800c400:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c404:	4b98      	ldr	r3, [pc, #608]	@ (800c668 <_dtoa_r+0x2d0>)
 800c406:	bfb8      	it	lt
 800c408:	6032      	strlt	r2, [r6, #0]
 800c40a:	ea33 0308 	bics.w	r3, r3, r8
 800c40e:	d112      	bne.n	800c436 <_dtoa_r+0x9e>
 800c410:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c414:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c416:	6013      	str	r3, [r2, #0]
 800c418:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c41c:	4323      	orrs	r3, r4
 800c41e:	f000 8550 	beq.w	800cec2 <_dtoa_r+0xb2a>
 800c422:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c424:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800c66c <_dtoa_r+0x2d4>
 800c428:	2b00      	cmp	r3, #0
 800c42a:	f000 8552 	beq.w	800ced2 <_dtoa_r+0xb3a>
 800c42e:	f10a 0303 	add.w	r3, sl, #3
 800c432:	f000 bd4c 	b.w	800cece <_dtoa_r+0xb36>
 800c436:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c43a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c43e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c442:	2200      	movs	r2, #0
 800c444:	2300      	movs	r3, #0
 800c446:	f7f4 faaf 	bl	80009a8 <__aeabi_dcmpeq>
 800c44a:	4607      	mov	r7, r0
 800c44c:	b158      	cbz	r0, 800c466 <_dtoa_r+0xce>
 800c44e:	2301      	movs	r3, #1
 800c450:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c452:	6013      	str	r3, [r2, #0]
 800c454:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c456:	b113      	cbz	r3, 800c45e <_dtoa_r+0xc6>
 800c458:	4b85      	ldr	r3, [pc, #532]	@ (800c670 <_dtoa_r+0x2d8>)
 800c45a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c45c:	6013      	str	r3, [r2, #0]
 800c45e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800c674 <_dtoa_r+0x2dc>
 800c462:	f000 bd36 	b.w	800ced2 <_dtoa_r+0xb3a>
 800c466:	ab14      	add	r3, sp, #80	@ 0x50
 800c468:	9301      	str	r3, [sp, #4]
 800c46a:	ab15      	add	r3, sp, #84	@ 0x54
 800c46c:	9300      	str	r3, [sp, #0]
 800c46e:	4658      	mov	r0, fp
 800c470:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c474:	f001 fd7c 	bl	800df70 <__d2b>
 800c478:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800c47c:	4681      	mov	r9, r0
 800c47e:	2e00      	cmp	r6, #0
 800c480:	d077      	beq.n	800c572 <_dtoa_r+0x1da>
 800c482:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c486:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c488:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c48c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c490:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c494:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c498:	9712      	str	r7, [sp, #72]	@ 0x48
 800c49a:	4619      	mov	r1, r3
 800c49c:	2200      	movs	r2, #0
 800c49e:	4b76      	ldr	r3, [pc, #472]	@ (800c678 <_dtoa_r+0x2e0>)
 800c4a0:	f7f3 fe62 	bl	8000168 <__aeabi_dsub>
 800c4a4:	a368      	add	r3, pc, #416	@ (adr r3, 800c648 <_dtoa_r+0x2b0>)
 800c4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4aa:	f7f4 f815 	bl	80004d8 <__aeabi_dmul>
 800c4ae:	a368      	add	r3, pc, #416	@ (adr r3, 800c650 <_dtoa_r+0x2b8>)
 800c4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b4:	f7f3 fe5a 	bl	800016c <__adddf3>
 800c4b8:	4604      	mov	r4, r0
 800c4ba:	4630      	mov	r0, r6
 800c4bc:	460d      	mov	r5, r1
 800c4be:	f7f3 ffa1 	bl	8000404 <__aeabi_i2d>
 800c4c2:	a365      	add	r3, pc, #404	@ (adr r3, 800c658 <_dtoa_r+0x2c0>)
 800c4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c8:	f7f4 f806 	bl	80004d8 <__aeabi_dmul>
 800c4cc:	4602      	mov	r2, r0
 800c4ce:	460b      	mov	r3, r1
 800c4d0:	4620      	mov	r0, r4
 800c4d2:	4629      	mov	r1, r5
 800c4d4:	f7f3 fe4a 	bl	800016c <__adddf3>
 800c4d8:	4604      	mov	r4, r0
 800c4da:	460d      	mov	r5, r1
 800c4dc:	f7f4 faac 	bl	8000a38 <__aeabi_d2iz>
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	4607      	mov	r7, r0
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	4620      	mov	r0, r4
 800c4e8:	4629      	mov	r1, r5
 800c4ea:	f7f4 fa67 	bl	80009bc <__aeabi_dcmplt>
 800c4ee:	b140      	cbz	r0, 800c502 <_dtoa_r+0x16a>
 800c4f0:	4638      	mov	r0, r7
 800c4f2:	f7f3 ff87 	bl	8000404 <__aeabi_i2d>
 800c4f6:	4622      	mov	r2, r4
 800c4f8:	462b      	mov	r3, r5
 800c4fa:	f7f4 fa55 	bl	80009a8 <__aeabi_dcmpeq>
 800c4fe:	b900      	cbnz	r0, 800c502 <_dtoa_r+0x16a>
 800c500:	3f01      	subs	r7, #1
 800c502:	2f16      	cmp	r7, #22
 800c504:	d853      	bhi.n	800c5ae <_dtoa_r+0x216>
 800c506:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c50a:	4b5c      	ldr	r3, [pc, #368]	@ (800c67c <_dtoa_r+0x2e4>)
 800c50c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c514:	f7f4 fa52 	bl	80009bc <__aeabi_dcmplt>
 800c518:	2800      	cmp	r0, #0
 800c51a:	d04a      	beq.n	800c5b2 <_dtoa_r+0x21a>
 800c51c:	2300      	movs	r3, #0
 800c51e:	3f01      	subs	r7, #1
 800c520:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c522:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c524:	1b9b      	subs	r3, r3, r6
 800c526:	1e5a      	subs	r2, r3, #1
 800c528:	bf46      	itte	mi
 800c52a:	f1c3 0801 	rsbmi	r8, r3, #1
 800c52e:	2300      	movmi	r3, #0
 800c530:	f04f 0800 	movpl.w	r8, #0
 800c534:	9209      	str	r2, [sp, #36]	@ 0x24
 800c536:	bf48      	it	mi
 800c538:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800c53a:	2f00      	cmp	r7, #0
 800c53c:	db3b      	blt.n	800c5b6 <_dtoa_r+0x21e>
 800c53e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c540:	970e      	str	r7, [sp, #56]	@ 0x38
 800c542:	443b      	add	r3, r7
 800c544:	9309      	str	r3, [sp, #36]	@ 0x24
 800c546:	2300      	movs	r3, #0
 800c548:	930a      	str	r3, [sp, #40]	@ 0x28
 800c54a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c54c:	2b09      	cmp	r3, #9
 800c54e:	d866      	bhi.n	800c61e <_dtoa_r+0x286>
 800c550:	2b05      	cmp	r3, #5
 800c552:	bfc4      	itt	gt
 800c554:	3b04      	subgt	r3, #4
 800c556:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800c558:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c55a:	bfc8      	it	gt
 800c55c:	2400      	movgt	r4, #0
 800c55e:	f1a3 0302 	sub.w	r3, r3, #2
 800c562:	bfd8      	it	le
 800c564:	2401      	movle	r4, #1
 800c566:	2b03      	cmp	r3, #3
 800c568:	d864      	bhi.n	800c634 <_dtoa_r+0x29c>
 800c56a:	e8df f003 	tbb	[pc, r3]
 800c56e:	382b      	.short	0x382b
 800c570:	5636      	.short	0x5636
 800c572:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c576:	441e      	add	r6, r3
 800c578:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c57c:	2b20      	cmp	r3, #32
 800c57e:	bfc1      	itttt	gt
 800c580:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c584:	fa08 f803 	lslgt.w	r8, r8, r3
 800c588:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c58c:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c590:	bfd6      	itet	le
 800c592:	f1c3 0320 	rsble	r3, r3, #32
 800c596:	ea48 0003 	orrgt.w	r0, r8, r3
 800c59a:	fa04 f003 	lslle.w	r0, r4, r3
 800c59e:	f7f3 ff21 	bl	80003e4 <__aeabi_ui2d>
 800c5a2:	2201      	movs	r2, #1
 800c5a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c5a8:	3e01      	subs	r6, #1
 800c5aa:	9212      	str	r2, [sp, #72]	@ 0x48
 800c5ac:	e775      	b.n	800c49a <_dtoa_r+0x102>
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	e7b6      	b.n	800c520 <_dtoa_r+0x188>
 800c5b2:	900f      	str	r0, [sp, #60]	@ 0x3c
 800c5b4:	e7b5      	b.n	800c522 <_dtoa_r+0x18a>
 800c5b6:	427b      	negs	r3, r7
 800c5b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	eba8 0807 	sub.w	r8, r8, r7
 800c5c0:	930e      	str	r3, [sp, #56]	@ 0x38
 800c5c2:	e7c2      	b.n	800c54a <_dtoa_r+0x1b2>
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c5c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	dc35      	bgt.n	800c63a <_dtoa_r+0x2a2>
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	461a      	mov	r2, r3
 800c5d2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c5d6:	9221      	str	r2, [sp, #132]	@ 0x84
 800c5d8:	e00b      	b.n	800c5f2 <_dtoa_r+0x25a>
 800c5da:	2301      	movs	r3, #1
 800c5dc:	e7f3      	b.n	800c5c6 <_dtoa_r+0x22e>
 800c5de:	2300      	movs	r3, #0
 800c5e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c5e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c5e4:	18fb      	adds	r3, r7, r3
 800c5e6:	9308      	str	r3, [sp, #32]
 800c5e8:	3301      	adds	r3, #1
 800c5ea:	2b01      	cmp	r3, #1
 800c5ec:	9307      	str	r3, [sp, #28]
 800c5ee:	bfb8      	it	lt
 800c5f0:	2301      	movlt	r3, #1
 800c5f2:	2100      	movs	r1, #0
 800c5f4:	2204      	movs	r2, #4
 800c5f6:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c5fa:	f102 0514 	add.w	r5, r2, #20
 800c5fe:	429d      	cmp	r5, r3
 800c600:	d91f      	bls.n	800c642 <_dtoa_r+0x2aa>
 800c602:	6041      	str	r1, [r0, #4]
 800c604:	4658      	mov	r0, fp
 800c606:	f001 f8d9 	bl	800d7bc <_Balloc>
 800c60a:	4682      	mov	sl, r0
 800c60c:	2800      	cmp	r0, #0
 800c60e:	d139      	bne.n	800c684 <_dtoa_r+0x2ec>
 800c610:	4602      	mov	r2, r0
 800c612:	f240 11af 	movw	r1, #431	@ 0x1af
 800c616:	4b1a      	ldr	r3, [pc, #104]	@ (800c680 <_dtoa_r+0x2e8>)
 800c618:	e6d2      	b.n	800c3c0 <_dtoa_r+0x28>
 800c61a:	2301      	movs	r3, #1
 800c61c:	e7e0      	b.n	800c5e0 <_dtoa_r+0x248>
 800c61e:	2401      	movs	r4, #1
 800c620:	2300      	movs	r3, #0
 800c622:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c624:	9320      	str	r3, [sp, #128]	@ 0x80
 800c626:	f04f 33ff 	mov.w	r3, #4294967295
 800c62a:	2200      	movs	r2, #0
 800c62c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c630:	2312      	movs	r3, #18
 800c632:	e7d0      	b.n	800c5d6 <_dtoa_r+0x23e>
 800c634:	2301      	movs	r3, #1
 800c636:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c638:	e7f5      	b.n	800c626 <_dtoa_r+0x28e>
 800c63a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c63c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c640:	e7d7      	b.n	800c5f2 <_dtoa_r+0x25a>
 800c642:	3101      	adds	r1, #1
 800c644:	0052      	lsls	r2, r2, #1
 800c646:	e7d8      	b.n	800c5fa <_dtoa_r+0x262>
 800c648:	636f4361 	.word	0x636f4361
 800c64c:	3fd287a7 	.word	0x3fd287a7
 800c650:	8b60c8b3 	.word	0x8b60c8b3
 800c654:	3fc68a28 	.word	0x3fc68a28
 800c658:	509f79fb 	.word	0x509f79fb
 800c65c:	3fd34413 	.word	0x3fd34413
 800c660:	0800ee61 	.word	0x0800ee61
 800c664:	0800ef23 	.word	0x0800ef23
 800c668:	7ff00000 	.word	0x7ff00000
 800c66c:	0800ef1f 	.word	0x0800ef1f
 800c670:	0800ee39 	.word	0x0800ee39
 800c674:	0800ee38 	.word	0x0800ee38
 800c678:	3ff80000 	.word	0x3ff80000
 800c67c:	0800f080 	.word	0x0800f080
 800c680:	0800ef7b 	.word	0x0800ef7b
 800c684:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c688:	6018      	str	r0, [r3, #0]
 800c68a:	9b07      	ldr	r3, [sp, #28]
 800c68c:	2b0e      	cmp	r3, #14
 800c68e:	f200 80a4 	bhi.w	800c7da <_dtoa_r+0x442>
 800c692:	2c00      	cmp	r4, #0
 800c694:	f000 80a1 	beq.w	800c7da <_dtoa_r+0x442>
 800c698:	2f00      	cmp	r7, #0
 800c69a:	dd33      	ble.n	800c704 <_dtoa_r+0x36c>
 800c69c:	4b86      	ldr	r3, [pc, #536]	@ (800c8b8 <_dtoa_r+0x520>)
 800c69e:	f007 020f 	and.w	r2, r7, #15
 800c6a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c6a6:	05f8      	lsls	r0, r7, #23
 800c6a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c6ac:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c6b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c6b4:	d516      	bpl.n	800c6e4 <_dtoa_r+0x34c>
 800c6b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c6ba:	4b80      	ldr	r3, [pc, #512]	@ (800c8bc <_dtoa_r+0x524>)
 800c6bc:	2603      	movs	r6, #3
 800c6be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c6c2:	f7f4 f833 	bl	800072c <__aeabi_ddiv>
 800c6c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6ca:	f004 040f 	and.w	r4, r4, #15
 800c6ce:	4d7b      	ldr	r5, [pc, #492]	@ (800c8bc <_dtoa_r+0x524>)
 800c6d0:	b954      	cbnz	r4, 800c6e8 <_dtoa_r+0x350>
 800c6d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c6d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6da:	f7f4 f827 	bl	800072c <__aeabi_ddiv>
 800c6de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6e2:	e028      	b.n	800c736 <_dtoa_r+0x39e>
 800c6e4:	2602      	movs	r6, #2
 800c6e6:	e7f2      	b.n	800c6ce <_dtoa_r+0x336>
 800c6e8:	07e1      	lsls	r1, r4, #31
 800c6ea:	d508      	bpl.n	800c6fe <_dtoa_r+0x366>
 800c6ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c6f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c6f4:	f7f3 fef0 	bl	80004d8 <__aeabi_dmul>
 800c6f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c6fc:	3601      	adds	r6, #1
 800c6fe:	1064      	asrs	r4, r4, #1
 800c700:	3508      	adds	r5, #8
 800c702:	e7e5      	b.n	800c6d0 <_dtoa_r+0x338>
 800c704:	f000 80d2 	beq.w	800c8ac <_dtoa_r+0x514>
 800c708:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c70c:	427c      	negs	r4, r7
 800c70e:	4b6a      	ldr	r3, [pc, #424]	@ (800c8b8 <_dtoa_r+0x520>)
 800c710:	f004 020f 	and.w	r2, r4, #15
 800c714:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c71c:	f7f3 fedc 	bl	80004d8 <__aeabi_dmul>
 800c720:	2602      	movs	r6, #2
 800c722:	2300      	movs	r3, #0
 800c724:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c728:	4d64      	ldr	r5, [pc, #400]	@ (800c8bc <_dtoa_r+0x524>)
 800c72a:	1124      	asrs	r4, r4, #4
 800c72c:	2c00      	cmp	r4, #0
 800c72e:	f040 80b2 	bne.w	800c896 <_dtoa_r+0x4fe>
 800c732:	2b00      	cmp	r3, #0
 800c734:	d1d3      	bne.n	800c6de <_dtoa_r+0x346>
 800c736:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c73a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	f000 80b7 	beq.w	800c8b0 <_dtoa_r+0x518>
 800c742:	2200      	movs	r2, #0
 800c744:	4620      	mov	r0, r4
 800c746:	4629      	mov	r1, r5
 800c748:	4b5d      	ldr	r3, [pc, #372]	@ (800c8c0 <_dtoa_r+0x528>)
 800c74a:	f7f4 f937 	bl	80009bc <__aeabi_dcmplt>
 800c74e:	2800      	cmp	r0, #0
 800c750:	f000 80ae 	beq.w	800c8b0 <_dtoa_r+0x518>
 800c754:	9b07      	ldr	r3, [sp, #28]
 800c756:	2b00      	cmp	r3, #0
 800c758:	f000 80aa 	beq.w	800c8b0 <_dtoa_r+0x518>
 800c75c:	9b08      	ldr	r3, [sp, #32]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	dd37      	ble.n	800c7d2 <_dtoa_r+0x43a>
 800c762:	1e7b      	subs	r3, r7, #1
 800c764:	4620      	mov	r0, r4
 800c766:	9304      	str	r3, [sp, #16]
 800c768:	2200      	movs	r2, #0
 800c76a:	4629      	mov	r1, r5
 800c76c:	4b55      	ldr	r3, [pc, #340]	@ (800c8c4 <_dtoa_r+0x52c>)
 800c76e:	f7f3 feb3 	bl	80004d8 <__aeabi_dmul>
 800c772:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c776:	9c08      	ldr	r4, [sp, #32]
 800c778:	3601      	adds	r6, #1
 800c77a:	4630      	mov	r0, r6
 800c77c:	f7f3 fe42 	bl	8000404 <__aeabi_i2d>
 800c780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c784:	f7f3 fea8 	bl	80004d8 <__aeabi_dmul>
 800c788:	2200      	movs	r2, #0
 800c78a:	4b4f      	ldr	r3, [pc, #316]	@ (800c8c8 <_dtoa_r+0x530>)
 800c78c:	f7f3 fcee 	bl	800016c <__adddf3>
 800c790:	4605      	mov	r5, r0
 800c792:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c796:	2c00      	cmp	r4, #0
 800c798:	f040 809a 	bne.w	800c8d0 <_dtoa_r+0x538>
 800c79c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	4b4a      	ldr	r3, [pc, #296]	@ (800c8cc <_dtoa_r+0x534>)
 800c7a4:	f7f3 fce0 	bl	8000168 <__aeabi_dsub>
 800c7a8:	4602      	mov	r2, r0
 800c7aa:	460b      	mov	r3, r1
 800c7ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c7b0:	462a      	mov	r2, r5
 800c7b2:	4633      	mov	r3, r6
 800c7b4:	f7f4 f920 	bl	80009f8 <__aeabi_dcmpgt>
 800c7b8:	2800      	cmp	r0, #0
 800c7ba:	f040 828e 	bne.w	800ccda <_dtoa_r+0x942>
 800c7be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7c2:	462a      	mov	r2, r5
 800c7c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c7c8:	f7f4 f8f8 	bl	80009bc <__aeabi_dcmplt>
 800c7cc:	2800      	cmp	r0, #0
 800c7ce:	f040 8127 	bne.w	800ca20 <_dtoa_r+0x688>
 800c7d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c7d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c7da:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	f2c0 8163 	blt.w	800caa8 <_dtoa_r+0x710>
 800c7e2:	2f0e      	cmp	r7, #14
 800c7e4:	f300 8160 	bgt.w	800caa8 <_dtoa_r+0x710>
 800c7e8:	4b33      	ldr	r3, [pc, #204]	@ (800c8b8 <_dtoa_r+0x520>)
 800c7ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c7ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c7f2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c7f6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	da03      	bge.n	800c804 <_dtoa_r+0x46c>
 800c7fc:	9b07      	ldr	r3, [sp, #28]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	f340 8100 	ble.w	800ca04 <_dtoa_r+0x66c>
 800c804:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c808:	4656      	mov	r6, sl
 800c80a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c80e:	4620      	mov	r0, r4
 800c810:	4629      	mov	r1, r5
 800c812:	f7f3 ff8b 	bl	800072c <__aeabi_ddiv>
 800c816:	f7f4 f90f 	bl	8000a38 <__aeabi_d2iz>
 800c81a:	4680      	mov	r8, r0
 800c81c:	f7f3 fdf2 	bl	8000404 <__aeabi_i2d>
 800c820:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c824:	f7f3 fe58 	bl	80004d8 <__aeabi_dmul>
 800c828:	4602      	mov	r2, r0
 800c82a:	460b      	mov	r3, r1
 800c82c:	4620      	mov	r0, r4
 800c82e:	4629      	mov	r1, r5
 800c830:	f7f3 fc9a 	bl	8000168 <__aeabi_dsub>
 800c834:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c838:	9d07      	ldr	r5, [sp, #28]
 800c83a:	f806 4b01 	strb.w	r4, [r6], #1
 800c83e:	eba6 040a 	sub.w	r4, r6, sl
 800c842:	42a5      	cmp	r5, r4
 800c844:	4602      	mov	r2, r0
 800c846:	460b      	mov	r3, r1
 800c848:	f040 8116 	bne.w	800ca78 <_dtoa_r+0x6e0>
 800c84c:	f7f3 fc8e 	bl	800016c <__adddf3>
 800c850:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c854:	4604      	mov	r4, r0
 800c856:	460d      	mov	r5, r1
 800c858:	f7f4 f8ce 	bl	80009f8 <__aeabi_dcmpgt>
 800c85c:	2800      	cmp	r0, #0
 800c85e:	f040 80f8 	bne.w	800ca52 <_dtoa_r+0x6ba>
 800c862:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c866:	4620      	mov	r0, r4
 800c868:	4629      	mov	r1, r5
 800c86a:	f7f4 f89d 	bl	80009a8 <__aeabi_dcmpeq>
 800c86e:	b118      	cbz	r0, 800c878 <_dtoa_r+0x4e0>
 800c870:	f018 0f01 	tst.w	r8, #1
 800c874:	f040 80ed 	bne.w	800ca52 <_dtoa_r+0x6ba>
 800c878:	4649      	mov	r1, r9
 800c87a:	4658      	mov	r0, fp
 800c87c:	f000 ffde 	bl	800d83c <_Bfree>
 800c880:	2300      	movs	r3, #0
 800c882:	7033      	strb	r3, [r6, #0]
 800c884:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c886:	3701      	adds	r7, #1
 800c888:	601f      	str	r7, [r3, #0]
 800c88a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	f000 8320 	beq.w	800ced2 <_dtoa_r+0xb3a>
 800c892:	601e      	str	r6, [r3, #0]
 800c894:	e31d      	b.n	800ced2 <_dtoa_r+0xb3a>
 800c896:	07e2      	lsls	r2, r4, #31
 800c898:	d505      	bpl.n	800c8a6 <_dtoa_r+0x50e>
 800c89a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c89e:	f7f3 fe1b 	bl	80004d8 <__aeabi_dmul>
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	3601      	adds	r6, #1
 800c8a6:	1064      	asrs	r4, r4, #1
 800c8a8:	3508      	adds	r5, #8
 800c8aa:	e73f      	b.n	800c72c <_dtoa_r+0x394>
 800c8ac:	2602      	movs	r6, #2
 800c8ae:	e742      	b.n	800c736 <_dtoa_r+0x39e>
 800c8b0:	9c07      	ldr	r4, [sp, #28]
 800c8b2:	9704      	str	r7, [sp, #16]
 800c8b4:	e761      	b.n	800c77a <_dtoa_r+0x3e2>
 800c8b6:	bf00      	nop
 800c8b8:	0800f080 	.word	0x0800f080
 800c8bc:	0800f058 	.word	0x0800f058
 800c8c0:	3ff00000 	.word	0x3ff00000
 800c8c4:	40240000 	.word	0x40240000
 800c8c8:	401c0000 	.word	0x401c0000
 800c8cc:	40140000 	.word	0x40140000
 800c8d0:	4b70      	ldr	r3, [pc, #448]	@ (800ca94 <_dtoa_r+0x6fc>)
 800c8d2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c8d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c8d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c8dc:	4454      	add	r4, sl
 800c8de:	2900      	cmp	r1, #0
 800c8e0:	d045      	beq.n	800c96e <_dtoa_r+0x5d6>
 800c8e2:	2000      	movs	r0, #0
 800c8e4:	496c      	ldr	r1, [pc, #432]	@ (800ca98 <_dtoa_r+0x700>)
 800c8e6:	f7f3 ff21 	bl	800072c <__aeabi_ddiv>
 800c8ea:	4633      	mov	r3, r6
 800c8ec:	462a      	mov	r2, r5
 800c8ee:	f7f3 fc3b 	bl	8000168 <__aeabi_dsub>
 800c8f2:	4656      	mov	r6, sl
 800c8f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c8f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8fc:	f7f4 f89c 	bl	8000a38 <__aeabi_d2iz>
 800c900:	4605      	mov	r5, r0
 800c902:	f7f3 fd7f 	bl	8000404 <__aeabi_i2d>
 800c906:	4602      	mov	r2, r0
 800c908:	460b      	mov	r3, r1
 800c90a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c90e:	f7f3 fc2b 	bl	8000168 <__aeabi_dsub>
 800c912:	4602      	mov	r2, r0
 800c914:	460b      	mov	r3, r1
 800c916:	3530      	adds	r5, #48	@ 0x30
 800c918:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c91c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c920:	f806 5b01 	strb.w	r5, [r6], #1
 800c924:	f7f4 f84a 	bl	80009bc <__aeabi_dcmplt>
 800c928:	2800      	cmp	r0, #0
 800c92a:	d163      	bne.n	800c9f4 <_dtoa_r+0x65c>
 800c92c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c930:	2000      	movs	r0, #0
 800c932:	495a      	ldr	r1, [pc, #360]	@ (800ca9c <_dtoa_r+0x704>)
 800c934:	f7f3 fc18 	bl	8000168 <__aeabi_dsub>
 800c938:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c93c:	f7f4 f83e 	bl	80009bc <__aeabi_dcmplt>
 800c940:	2800      	cmp	r0, #0
 800c942:	f040 8087 	bne.w	800ca54 <_dtoa_r+0x6bc>
 800c946:	42a6      	cmp	r6, r4
 800c948:	f43f af43 	beq.w	800c7d2 <_dtoa_r+0x43a>
 800c94c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c950:	2200      	movs	r2, #0
 800c952:	4b53      	ldr	r3, [pc, #332]	@ (800caa0 <_dtoa_r+0x708>)
 800c954:	f7f3 fdc0 	bl	80004d8 <__aeabi_dmul>
 800c958:	2200      	movs	r2, #0
 800c95a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c95e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c962:	4b4f      	ldr	r3, [pc, #316]	@ (800caa0 <_dtoa_r+0x708>)
 800c964:	f7f3 fdb8 	bl	80004d8 <__aeabi_dmul>
 800c968:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c96c:	e7c4      	b.n	800c8f8 <_dtoa_r+0x560>
 800c96e:	4631      	mov	r1, r6
 800c970:	4628      	mov	r0, r5
 800c972:	f7f3 fdb1 	bl	80004d8 <__aeabi_dmul>
 800c976:	4656      	mov	r6, sl
 800c978:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c97c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c97e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c982:	f7f4 f859 	bl	8000a38 <__aeabi_d2iz>
 800c986:	4605      	mov	r5, r0
 800c988:	f7f3 fd3c 	bl	8000404 <__aeabi_i2d>
 800c98c:	4602      	mov	r2, r0
 800c98e:	460b      	mov	r3, r1
 800c990:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c994:	f7f3 fbe8 	bl	8000168 <__aeabi_dsub>
 800c998:	4602      	mov	r2, r0
 800c99a:	460b      	mov	r3, r1
 800c99c:	3530      	adds	r5, #48	@ 0x30
 800c99e:	f806 5b01 	strb.w	r5, [r6], #1
 800c9a2:	42a6      	cmp	r6, r4
 800c9a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c9a8:	f04f 0200 	mov.w	r2, #0
 800c9ac:	d124      	bne.n	800c9f8 <_dtoa_r+0x660>
 800c9ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c9b2:	4b39      	ldr	r3, [pc, #228]	@ (800ca98 <_dtoa_r+0x700>)
 800c9b4:	f7f3 fbda 	bl	800016c <__adddf3>
 800c9b8:	4602      	mov	r2, r0
 800c9ba:	460b      	mov	r3, r1
 800c9bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9c0:	f7f4 f81a 	bl	80009f8 <__aeabi_dcmpgt>
 800c9c4:	2800      	cmp	r0, #0
 800c9c6:	d145      	bne.n	800ca54 <_dtoa_r+0x6bc>
 800c9c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c9cc:	2000      	movs	r0, #0
 800c9ce:	4932      	ldr	r1, [pc, #200]	@ (800ca98 <_dtoa_r+0x700>)
 800c9d0:	f7f3 fbca 	bl	8000168 <__aeabi_dsub>
 800c9d4:	4602      	mov	r2, r0
 800c9d6:	460b      	mov	r3, r1
 800c9d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9dc:	f7f3 ffee 	bl	80009bc <__aeabi_dcmplt>
 800c9e0:	2800      	cmp	r0, #0
 800c9e2:	f43f aef6 	beq.w	800c7d2 <_dtoa_r+0x43a>
 800c9e6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c9e8:	1e73      	subs	r3, r6, #1
 800c9ea:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c9ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c9f0:	2b30      	cmp	r3, #48	@ 0x30
 800c9f2:	d0f8      	beq.n	800c9e6 <_dtoa_r+0x64e>
 800c9f4:	9f04      	ldr	r7, [sp, #16]
 800c9f6:	e73f      	b.n	800c878 <_dtoa_r+0x4e0>
 800c9f8:	4b29      	ldr	r3, [pc, #164]	@ (800caa0 <_dtoa_r+0x708>)
 800c9fa:	f7f3 fd6d 	bl	80004d8 <__aeabi_dmul>
 800c9fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca02:	e7bc      	b.n	800c97e <_dtoa_r+0x5e6>
 800ca04:	d10c      	bne.n	800ca20 <_dtoa_r+0x688>
 800ca06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	4b25      	ldr	r3, [pc, #148]	@ (800caa4 <_dtoa_r+0x70c>)
 800ca0e:	f7f3 fd63 	bl	80004d8 <__aeabi_dmul>
 800ca12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca16:	f7f3 ffe5 	bl	80009e4 <__aeabi_dcmpge>
 800ca1a:	2800      	cmp	r0, #0
 800ca1c:	f000 815b 	beq.w	800ccd6 <_dtoa_r+0x93e>
 800ca20:	2400      	movs	r4, #0
 800ca22:	4625      	mov	r5, r4
 800ca24:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ca26:	4656      	mov	r6, sl
 800ca28:	43db      	mvns	r3, r3
 800ca2a:	9304      	str	r3, [sp, #16]
 800ca2c:	2700      	movs	r7, #0
 800ca2e:	4621      	mov	r1, r4
 800ca30:	4658      	mov	r0, fp
 800ca32:	f000 ff03 	bl	800d83c <_Bfree>
 800ca36:	2d00      	cmp	r5, #0
 800ca38:	d0dc      	beq.n	800c9f4 <_dtoa_r+0x65c>
 800ca3a:	b12f      	cbz	r7, 800ca48 <_dtoa_r+0x6b0>
 800ca3c:	42af      	cmp	r7, r5
 800ca3e:	d003      	beq.n	800ca48 <_dtoa_r+0x6b0>
 800ca40:	4639      	mov	r1, r7
 800ca42:	4658      	mov	r0, fp
 800ca44:	f000 fefa 	bl	800d83c <_Bfree>
 800ca48:	4629      	mov	r1, r5
 800ca4a:	4658      	mov	r0, fp
 800ca4c:	f000 fef6 	bl	800d83c <_Bfree>
 800ca50:	e7d0      	b.n	800c9f4 <_dtoa_r+0x65c>
 800ca52:	9704      	str	r7, [sp, #16]
 800ca54:	4633      	mov	r3, r6
 800ca56:	461e      	mov	r6, r3
 800ca58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca5c:	2a39      	cmp	r2, #57	@ 0x39
 800ca5e:	d107      	bne.n	800ca70 <_dtoa_r+0x6d8>
 800ca60:	459a      	cmp	sl, r3
 800ca62:	d1f8      	bne.n	800ca56 <_dtoa_r+0x6be>
 800ca64:	9a04      	ldr	r2, [sp, #16]
 800ca66:	3201      	adds	r2, #1
 800ca68:	9204      	str	r2, [sp, #16]
 800ca6a:	2230      	movs	r2, #48	@ 0x30
 800ca6c:	f88a 2000 	strb.w	r2, [sl]
 800ca70:	781a      	ldrb	r2, [r3, #0]
 800ca72:	3201      	adds	r2, #1
 800ca74:	701a      	strb	r2, [r3, #0]
 800ca76:	e7bd      	b.n	800c9f4 <_dtoa_r+0x65c>
 800ca78:	2200      	movs	r2, #0
 800ca7a:	4b09      	ldr	r3, [pc, #36]	@ (800caa0 <_dtoa_r+0x708>)
 800ca7c:	f7f3 fd2c 	bl	80004d8 <__aeabi_dmul>
 800ca80:	2200      	movs	r2, #0
 800ca82:	2300      	movs	r3, #0
 800ca84:	4604      	mov	r4, r0
 800ca86:	460d      	mov	r5, r1
 800ca88:	f7f3 ff8e 	bl	80009a8 <__aeabi_dcmpeq>
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	f43f aebc 	beq.w	800c80a <_dtoa_r+0x472>
 800ca92:	e6f1      	b.n	800c878 <_dtoa_r+0x4e0>
 800ca94:	0800f080 	.word	0x0800f080
 800ca98:	3fe00000 	.word	0x3fe00000
 800ca9c:	3ff00000 	.word	0x3ff00000
 800caa0:	40240000 	.word	0x40240000
 800caa4:	40140000 	.word	0x40140000
 800caa8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800caaa:	2a00      	cmp	r2, #0
 800caac:	f000 80db 	beq.w	800cc66 <_dtoa_r+0x8ce>
 800cab0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cab2:	2a01      	cmp	r2, #1
 800cab4:	f300 80bf 	bgt.w	800cc36 <_dtoa_r+0x89e>
 800cab8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800caba:	2a00      	cmp	r2, #0
 800cabc:	f000 80b7 	beq.w	800cc2e <_dtoa_r+0x896>
 800cac0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cac4:	4646      	mov	r6, r8
 800cac6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cac8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800caca:	2101      	movs	r1, #1
 800cacc:	441a      	add	r2, r3
 800cace:	4658      	mov	r0, fp
 800cad0:	4498      	add	r8, r3
 800cad2:	9209      	str	r2, [sp, #36]	@ 0x24
 800cad4:	f000 ffb0 	bl	800da38 <__i2b>
 800cad8:	4605      	mov	r5, r0
 800cada:	b15e      	cbz	r6, 800caf4 <_dtoa_r+0x75c>
 800cadc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cade:	2b00      	cmp	r3, #0
 800cae0:	dd08      	ble.n	800caf4 <_dtoa_r+0x75c>
 800cae2:	42b3      	cmp	r3, r6
 800cae4:	bfa8      	it	ge
 800cae6:	4633      	movge	r3, r6
 800cae8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800caea:	eba8 0803 	sub.w	r8, r8, r3
 800caee:	1af6      	subs	r6, r6, r3
 800caf0:	1ad3      	subs	r3, r2, r3
 800caf2:	9309      	str	r3, [sp, #36]	@ 0x24
 800caf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800caf6:	b1f3      	cbz	r3, 800cb36 <_dtoa_r+0x79e>
 800caf8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	f000 80b7 	beq.w	800cc6e <_dtoa_r+0x8d6>
 800cb00:	b18c      	cbz	r4, 800cb26 <_dtoa_r+0x78e>
 800cb02:	4629      	mov	r1, r5
 800cb04:	4622      	mov	r2, r4
 800cb06:	4658      	mov	r0, fp
 800cb08:	f001 f854 	bl	800dbb4 <__pow5mult>
 800cb0c:	464a      	mov	r2, r9
 800cb0e:	4601      	mov	r1, r0
 800cb10:	4605      	mov	r5, r0
 800cb12:	4658      	mov	r0, fp
 800cb14:	f000 ffa6 	bl	800da64 <__multiply>
 800cb18:	4649      	mov	r1, r9
 800cb1a:	9004      	str	r0, [sp, #16]
 800cb1c:	4658      	mov	r0, fp
 800cb1e:	f000 fe8d 	bl	800d83c <_Bfree>
 800cb22:	9b04      	ldr	r3, [sp, #16]
 800cb24:	4699      	mov	r9, r3
 800cb26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb28:	1b1a      	subs	r2, r3, r4
 800cb2a:	d004      	beq.n	800cb36 <_dtoa_r+0x79e>
 800cb2c:	4649      	mov	r1, r9
 800cb2e:	4658      	mov	r0, fp
 800cb30:	f001 f840 	bl	800dbb4 <__pow5mult>
 800cb34:	4681      	mov	r9, r0
 800cb36:	2101      	movs	r1, #1
 800cb38:	4658      	mov	r0, fp
 800cb3a:	f000 ff7d 	bl	800da38 <__i2b>
 800cb3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb40:	4604      	mov	r4, r0
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	f000 81c9 	beq.w	800ceda <_dtoa_r+0xb42>
 800cb48:	461a      	mov	r2, r3
 800cb4a:	4601      	mov	r1, r0
 800cb4c:	4658      	mov	r0, fp
 800cb4e:	f001 f831 	bl	800dbb4 <__pow5mult>
 800cb52:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cb54:	4604      	mov	r4, r0
 800cb56:	2b01      	cmp	r3, #1
 800cb58:	f300 808f 	bgt.w	800cc7a <_dtoa_r+0x8e2>
 800cb5c:	9b02      	ldr	r3, [sp, #8]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	f040 8087 	bne.w	800cc72 <_dtoa_r+0x8da>
 800cb64:	9b03      	ldr	r3, [sp, #12]
 800cb66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	f040 8083 	bne.w	800cc76 <_dtoa_r+0x8de>
 800cb70:	9b03      	ldr	r3, [sp, #12]
 800cb72:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cb76:	0d1b      	lsrs	r3, r3, #20
 800cb78:	051b      	lsls	r3, r3, #20
 800cb7a:	b12b      	cbz	r3, 800cb88 <_dtoa_r+0x7f0>
 800cb7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb7e:	f108 0801 	add.w	r8, r8, #1
 800cb82:	3301      	adds	r3, #1
 800cb84:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb86:	2301      	movs	r3, #1
 800cb88:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	f000 81aa 	beq.w	800cee6 <_dtoa_r+0xb4e>
 800cb92:	6923      	ldr	r3, [r4, #16]
 800cb94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cb98:	6918      	ldr	r0, [r3, #16]
 800cb9a:	f000 ff01 	bl	800d9a0 <__hi0bits>
 800cb9e:	f1c0 0020 	rsb	r0, r0, #32
 800cba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cba4:	4418      	add	r0, r3
 800cba6:	f010 001f 	ands.w	r0, r0, #31
 800cbaa:	d071      	beq.n	800cc90 <_dtoa_r+0x8f8>
 800cbac:	f1c0 0320 	rsb	r3, r0, #32
 800cbb0:	2b04      	cmp	r3, #4
 800cbb2:	dd65      	ble.n	800cc80 <_dtoa_r+0x8e8>
 800cbb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbb6:	f1c0 001c 	rsb	r0, r0, #28
 800cbba:	4403      	add	r3, r0
 800cbbc:	4480      	add	r8, r0
 800cbbe:	4406      	add	r6, r0
 800cbc0:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbc2:	f1b8 0f00 	cmp.w	r8, #0
 800cbc6:	dd05      	ble.n	800cbd4 <_dtoa_r+0x83c>
 800cbc8:	4649      	mov	r1, r9
 800cbca:	4642      	mov	r2, r8
 800cbcc:	4658      	mov	r0, fp
 800cbce:	f001 f84b 	bl	800dc68 <__lshift>
 800cbd2:	4681      	mov	r9, r0
 800cbd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	dd05      	ble.n	800cbe6 <_dtoa_r+0x84e>
 800cbda:	4621      	mov	r1, r4
 800cbdc:	461a      	mov	r2, r3
 800cbde:	4658      	mov	r0, fp
 800cbe0:	f001 f842 	bl	800dc68 <__lshift>
 800cbe4:	4604      	mov	r4, r0
 800cbe6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d053      	beq.n	800cc94 <_dtoa_r+0x8fc>
 800cbec:	4621      	mov	r1, r4
 800cbee:	4648      	mov	r0, r9
 800cbf0:	f001 f8a6 	bl	800dd40 <__mcmp>
 800cbf4:	2800      	cmp	r0, #0
 800cbf6:	da4d      	bge.n	800cc94 <_dtoa_r+0x8fc>
 800cbf8:	1e7b      	subs	r3, r7, #1
 800cbfa:	4649      	mov	r1, r9
 800cbfc:	9304      	str	r3, [sp, #16]
 800cbfe:	220a      	movs	r2, #10
 800cc00:	2300      	movs	r3, #0
 800cc02:	4658      	mov	r0, fp
 800cc04:	f000 fe3c 	bl	800d880 <__multadd>
 800cc08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cc0a:	4681      	mov	r9, r0
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	f000 816c 	beq.w	800ceea <_dtoa_r+0xb52>
 800cc12:	2300      	movs	r3, #0
 800cc14:	4629      	mov	r1, r5
 800cc16:	220a      	movs	r2, #10
 800cc18:	4658      	mov	r0, fp
 800cc1a:	f000 fe31 	bl	800d880 <__multadd>
 800cc1e:	9b08      	ldr	r3, [sp, #32]
 800cc20:	4605      	mov	r5, r0
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	dc61      	bgt.n	800ccea <_dtoa_r+0x952>
 800cc26:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cc28:	2b02      	cmp	r3, #2
 800cc2a:	dc3b      	bgt.n	800cca4 <_dtoa_r+0x90c>
 800cc2c:	e05d      	b.n	800ccea <_dtoa_r+0x952>
 800cc2e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cc30:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cc34:	e746      	b.n	800cac4 <_dtoa_r+0x72c>
 800cc36:	9b07      	ldr	r3, [sp, #28]
 800cc38:	1e5c      	subs	r4, r3, #1
 800cc3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc3c:	42a3      	cmp	r3, r4
 800cc3e:	bfbf      	itttt	lt
 800cc40:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800cc42:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800cc44:	1ae3      	sublt	r3, r4, r3
 800cc46:	18d2      	addlt	r2, r2, r3
 800cc48:	bfa8      	it	ge
 800cc4a:	1b1c      	subge	r4, r3, r4
 800cc4c:	9b07      	ldr	r3, [sp, #28]
 800cc4e:	bfbe      	ittt	lt
 800cc50:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800cc52:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800cc54:	2400      	movlt	r4, #0
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	bfb5      	itete	lt
 800cc5a:	eba8 0603 	sublt.w	r6, r8, r3
 800cc5e:	4646      	movge	r6, r8
 800cc60:	2300      	movlt	r3, #0
 800cc62:	9b07      	ldrge	r3, [sp, #28]
 800cc64:	e730      	b.n	800cac8 <_dtoa_r+0x730>
 800cc66:	4646      	mov	r6, r8
 800cc68:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cc6a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800cc6c:	e735      	b.n	800cada <_dtoa_r+0x742>
 800cc6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cc70:	e75c      	b.n	800cb2c <_dtoa_r+0x794>
 800cc72:	2300      	movs	r3, #0
 800cc74:	e788      	b.n	800cb88 <_dtoa_r+0x7f0>
 800cc76:	9b02      	ldr	r3, [sp, #8]
 800cc78:	e786      	b.n	800cb88 <_dtoa_r+0x7f0>
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc7e:	e788      	b.n	800cb92 <_dtoa_r+0x7fa>
 800cc80:	d09f      	beq.n	800cbc2 <_dtoa_r+0x82a>
 800cc82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc84:	331c      	adds	r3, #28
 800cc86:	441a      	add	r2, r3
 800cc88:	4498      	add	r8, r3
 800cc8a:	441e      	add	r6, r3
 800cc8c:	9209      	str	r2, [sp, #36]	@ 0x24
 800cc8e:	e798      	b.n	800cbc2 <_dtoa_r+0x82a>
 800cc90:	4603      	mov	r3, r0
 800cc92:	e7f6      	b.n	800cc82 <_dtoa_r+0x8ea>
 800cc94:	9b07      	ldr	r3, [sp, #28]
 800cc96:	9704      	str	r7, [sp, #16]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	dc20      	bgt.n	800ccde <_dtoa_r+0x946>
 800cc9c:	9308      	str	r3, [sp, #32]
 800cc9e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cca0:	2b02      	cmp	r3, #2
 800cca2:	dd1e      	ble.n	800cce2 <_dtoa_r+0x94a>
 800cca4:	9b08      	ldr	r3, [sp, #32]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	f47f aebc 	bne.w	800ca24 <_dtoa_r+0x68c>
 800ccac:	4621      	mov	r1, r4
 800ccae:	2205      	movs	r2, #5
 800ccb0:	4658      	mov	r0, fp
 800ccb2:	f000 fde5 	bl	800d880 <__multadd>
 800ccb6:	4601      	mov	r1, r0
 800ccb8:	4604      	mov	r4, r0
 800ccba:	4648      	mov	r0, r9
 800ccbc:	f001 f840 	bl	800dd40 <__mcmp>
 800ccc0:	2800      	cmp	r0, #0
 800ccc2:	f77f aeaf 	ble.w	800ca24 <_dtoa_r+0x68c>
 800ccc6:	2331      	movs	r3, #49	@ 0x31
 800ccc8:	4656      	mov	r6, sl
 800ccca:	f806 3b01 	strb.w	r3, [r6], #1
 800ccce:	9b04      	ldr	r3, [sp, #16]
 800ccd0:	3301      	adds	r3, #1
 800ccd2:	9304      	str	r3, [sp, #16]
 800ccd4:	e6aa      	b.n	800ca2c <_dtoa_r+0x694>
 800ccd6:	9c07      	ldr	r4, [sp, #28]
 800ccd8:	9704      	str	r7, [sp, #16]
 800ccda:	4625      	mov	r5, r4
 800ccdc:	e7f3      	b.n	800ccc6 <_dtoa_r+0x92e>
 800ccde:	9b07      	ldr	r3, [sp, #28]
 800cce0:	9308      	str	r3, [sp, #32]
 800cce2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	f000 8104 	beq.w	800cef2 <_dtoa_r+0xb5a>
 800ccea:	2e00      	cmp	r6, #0
 800ccec:	dd05      	ble.n	800ccfa <_dtoa_r+0x962>
 800ccee:	4629      	mov	r1, r5
 800ccf0:	4632      	mov	r2, r6
 800ccf2:	4658      	mov	r0, fp
 800ccf4:	f000 ffb8 	bl	800dc68 <__lshift>
 800ccf8:	4605      	mov	r5, r0
 800ccfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d05a      	beq.n	800cdb6 <_dtoa_r+0xa1e>
 800cd00:	4658      	mov	r0, fp
 800cd02:	6869      	ldr	r1, [r5, #4]
 800cd04:	f000 fd5a 	bl	800d7bc <_Balloc>
 800cd08:	4606      	mov	r6, r0
 800cd0a:	b928      	cbnz	r0, 800cd18 <_dtoa_r+0x980>
 800cd0c:	4602      	mov	r2, r0
 800cd0e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cd12:	4b83      	ldr	r3, [pc, #524]	@ (800cf20 <_dtoa_r+0xb88>)
 800cd14:	f7ff bb54 	b.w	800c3c0 <_dtoa_r+0x28>
 800cd18:	692a      	ldr	r2, [r5, #16]
 800cd1a:	f105 010c 	add.w	r1, r5, #12
 800cd1e:	3202      	adds	r2, #2
 800cd20:	0092      	lsls	r2, r2, #2
 800cd22:	300c      	adds	r0, #12
 800cd24:	f7ff fa77 	bl	800c216 <memcpy>
 800cd28:	2201      	movs	r2, #1
 800cd2a:	4631      	mov	r1, r6
 800cd2c:	4658      	mov	r0, fp
 800cd2e:	f000 ff9b 	bl	800dc68 <__lshift>
 800cd32:	462f      	mov	r7, r5
 800cd34:	4605      	mov	r5, r0
 800cd36:	f10a 0301 	add.w	r3, sl, #1
 800cd3a:	9307      	str	r3, [sp, #28]
 800cd3c:	9b08      	ldr	r3, [sp, #32]
 800cd3e:	4453      	add	r3, sl
 800cd40:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd42:	9b02      	ldr	r3, [sp, #8]
 800cd44:	f003 0301 	and.w	r3, r3, #1
 800cd48:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd4a:	9b07      	ldr	r3, [sp, #28]
 800cd4c:	4621      	mov	r1, r4
 800cd4e:	3b01      	subs	r3, #1
 800cd50:	4648      	mov	r0, r9
 800cd52:	9302      	str	r3, [sp, #8]
 800cd54:	f7ff fa96 	bl	800c284 <quorem>
 800cd58:	4639      	mov	r1, r7
 800cd5a:	9008      	str	r0, [sp, #32]
 800cd5c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cd60:	4648      	mov	r0, r9
 800cd62:	f000 ffed 	bl	800dd40 <__mcmp>
 800cd66:	462a      	mov	r2, r5
 800cd68:	9009      	str	r0, [sp, #36]	@ 0x24
 800cd6a:	4621      	mov	r1, r4
 800cd6c:	4658      	mov	r0, fp
 800cd6e:	f001 f803 	bl	800dd78 <__mdiff>
 800cd72:	68c2      	ldr	r2, [r0, #12]
 800cd74:	4606      	mov	r6, r0
 800cd76:	bb02      	cbnz	r2, 800cdba <_dtoa_r+0xa22>
 800cd78:	4601      	mov	r1, r0
 800cd7a:	4648      	mov	r0, r9
 800cd7c:	f000 ffe0 	bl	800dd40 <__mcmp>
 800cd80:	4602      	mov	r2, r0
 800cd82:	4631      	mov	r1, r6
 800cd84:	4658      	mov	r0, fp
 800cd86:	920c      	str	r2, [sp, #48]	@ 0x30
 800cd88:	f000 fd58 	bl	800d83c <_Bfree>
 800cd8c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cd8e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cd90:	9e07      	ldr	r6, [sp, #28]
 800cd92:	ea43 0102 	orr.w	r1, r3, r2
 800cd96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd98:	4319      	orrs	r1, r3
 800cd9a:	d110      	bne.n	800cdbe <_dtoa_r+0xa26>
 800cd9c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cda0:	d029      	beq.n	800cdf6 <_dtoa_r+0xa5e>
 800cda2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	dd02      	ble.n	800cdae <_dtoa_r+0xa16>
 800cda8:	9b08      	ldr	r3, [sp, #32]
 800cdaa:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800cdae:	9b02      	ldr	r3, [sp, #8]
 800cdb0:	f883 8000 	strb.w	r8, [r3]
 800cdb4:	e63b      	b.n	800ca2e <_dtoa_r+0x696>
 800cdb6:	4628      	mov	r0, r5
 800cdb8:	e7bb      	b.n	800cd32 <_dtoa_r+0x99a>
 800cdba:	2201      	movs	r2, #1
 800cdbc:	e7e1      	b.n	800cd82 <_dtoa_r+0x9ea>
 800cdbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	db04      	blt.n	800cdce <_dtoa_r+0xa36>
 800cdc4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800cdc6:	430b      	orrs	r3, r1
 800cdc8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cdca:	430b      	orrs	r3, r1
 800cdcc:	d120      	bne.n	800ce10 <_dtoa_r+0xa78>
 800cdce:	2a00      	cmp	r2, #0
 800cdd0:	dded      	ble.n	800cdae <_dtoa_r+0xa16>
 800cdd2:	4649      	mov	r1, r9
 800cdd4:	2201      	movs	r2, #1
 800cdd6:	4658      	mov	r0, fp
 800cdd8:	f000 ff46 	bl	800dc68 <__lshift>
 800cddc:	4621      	mov	r1, r4
 800cdde:	4681      	mov	r9, r0
 800cde0:	f000 ffae 	bl	800dd40 <__mcmp>
 800cde4:	2800      	cmp	r0, #0
 800cde6:	dc03      	bgt.n	800cdf0 <_dtoa_r+0xa58>
 800cde8:	d1e1      	bne.n	800cdae <_dtoa_r+0xa16>
 800cdea:	f018 0f01 	tst.w	r8, #1
 800cdee:	d0de      	beq.n	800cdae <_dtoa_r+0xa16>
 800cdf0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cdf4:	d1d8      	bne.n	800cda8 <_dtoa_r+0xa10>
 800cdf6:	2339      	movs	r3, #57	@ 0x39
 800cdf8:	9a02      	ldr	r2, [sp, #8]
 800cdfa:	7013      	strb	r3, [r2, #0]
 800cdfc:	4633      	mov	r3, r6
 800cdfe:	461e      	mov	r6, r3
 800ce00:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ce04:	3b01      	subs	r3, #1
 800ce06:	2a39      	cmp	r2, #57	@ 0x39
 800ce08:	d052      	beq.n	800ceb0 <_dtoa_r+0xb18>
 800ce0a:	3201      	adds	r2, #1
 800ce0c:	701a      	strb	r2, [r3, #0]
 800ce0e:	e60e      	b.n	800ca2e <_dtoa_r+0x696>
 800ce10:	2a00      	cmp	r2, #0
 800ce12:	dd07      	ble.n	800ce24 <_dtoa_r+0xa8c>
 800ce14:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ce18:	d0ed      	beq.n	800cdf6 <_dtoa_r+0xa5e>
 800ce1a:	9a02      	ldr	r2, [sp, #8]
 800ce1c:	f108 0301 	add.w	r3, r8, #1
 800ce20:	7013      	strb	r3, [r2, #0]
 800ce22:	e604      	b.n	800ca2e <_dtoa_r+0x696>
 800ce24:	9b07      	ldr	r3, [sp, #28]
 800ce26:	9a07      	ldr	r2, [sp, #28]
 800ce28:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ce2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	d028      	beq.n	800ce84 <_dtoa_r+0xaec>
 800ce32:	4649      	mov	r1, r9
 800ce34:	2300      	movs	r3, #0
 800ce36:	220a      	movs	r2, #10
 800ce38:	4658      	mov	r0, fp
 800ce3a:	f000 fd21 	bl	800d880 <__multadd>
 800ce3e:	42af      	cmp	r7, r5
 800ce40:	4681      	mov	r9, r0
 800ce42:	f04f 0300 	mov.w	r3, #0
 800ce46:	f04f 020a 	mov.w	r2, #10
 800ce4a:	4639      	mov	r1, r7
 800ce4c:	4658      	mov	r0, fp
 800ce4e:	d107      	bne.n	800ce60 <_dtoa_r+0xac8>
 800ce50:	f000 fd16 	bl	800d880 <__multadd>
 800ce54:	4607      	mov	r7, r0
 800ce56:	4605      	mov	r5, r0
 800ce58:	9b07      	ldr	r3, [sp, #28]
 800ce5a:	3301      	adds	r3, #1
 800ce5c:	9307      	str	r3, [sp, #28]
 800ce5e:	e774      	b.n	800cd4a <_dtoa_r+0x9b2>
 800ce60:	f000 fd0e 	bl	800d880 <__multadd>
 800ce64:	4629      	mov	r1, r5
 800ce66:	4607      	mov	r7, r0
 800ce68:	2300      	movs	r3, #0
 800ce6a:	220a      	movs	r2, #10
 800ce6c:	4658      	mov	r0, fp
 800ce6e:	f000 fd07 	bl	800d880 <__multadd>
 800ce72:	4605      	mov	r5, r0
 800ce74:	e7f0      	b.n	800ce58 <_dtoa_r+0xac0>
 800ce76:	9b08      	ldr	r3, [sp, #32]
 800ce78:	2700      	movs	r7, #0
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	bfcc      	ite	gt
 800ce7e:	461e      	movgt	r6, r3
 800ce80:	2601      	movle	r6, #1
 800ce82:	4456      	add	r6, sl
 800ce84:	4649      	mov	r1, r9
 800ce86:	2201      	movs	r2, #1
 800ce88:	4658      	mov	r0, fp
 800ce8a:	f000 feed 	bl	800dc68 <__lshift>
 800ce8e:	4621      	mov	r1, r4
 800ce90:	4681      	mov	r9, r0
 800ce92:	f000 ff55 	bl	800dd40 <__mcmp>
 800ce96:	2800      	cmp	r0, #0
 800ce98:	dcb0      	bgt.n	800cdfc <_dtoa_r+0xa64>
 800ce9a:	d102      	bne.n	800cea2 <_dtoa_r+0xb0a>
 800ce9c:	f018 0f01 	tst.w	r8, #1
 800cea0:	d1ac      	bne.n	800cdfc <_dtoa_r+0xa64>
 800cea2:	4633      	mov	r3, r6
 800cea4:	461e      	mov	r6, r3
 800cea6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ceaa:	2a30      	cmp	r2, #48	@ 0x30
 800ceac:	d0fa      	beq.n	800cea4 <_dtoa_r+0xb0c>
 800ceae:	e5be      	b.n	800ca2e <_dtoa_r+0x696>
 800ceb0:	459a      	cmp	sl, r3
 800ceb2:	d1a4      	bne.n	800cdfe <_dtoa_r+0xa66>
 800ceb4:	9b04      	ldr	r3, [sp, #16]
 800ceb6:	3301      	adds	r3, #1
 800ceb8:	9304      	str	r3, [sp, #16]
 800ceba:	2331      	movs	r3, #49	@ 0x31
 800cebc:	f88a 3000 	strb.w	r3, [sl]
 800cec0:	e5b5      	b.n	800ca2e <_dtoa_r+0x696>
 800cec2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800cec4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800cf24 <_dtoa_r+0xb8c>
 800cec8:	b11b      	cbz	r3, 800ced2 <_dtoa_r+0xb3a>
 800ceca:	f10a 0308 	add.w	r3, sl, #8
 800cece:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ced0:	6013      	str	r3, [r2, #0]
 800ced2:	4650      	mov	r0, sl
 800ced4:	b017      	add	sp, #92	@ 0x5c
 800ced6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceda:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cedc:	2b01      	cmp	r3, #1
 800cede:	f77f ae3d 	ble.w	800cb5c <_dtoa_r+0x7c4>
 800cee2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cee4:	930a      	str	r3, [sp, #40]	@ 0x28
 800cee6:	2001      	movs	r0, #1
 800cee8:	e65b      	b.n	800cba2 <_dtoa_r+0x80a>
 800ceea:	9b08      	ldr	r3, [sp, #32]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	f77f aed6 	ble.w	800cc9e <_dtoa_r+0x906>
 800cef2:	4656      	mov	r6, sl
 800cef4:	4621      	mov	r1, r4
 800cef6:	4648      	mov	r0, r9
 800cef8:	f7ff f9c4 	bl	800c284 <quorem>
 800cefc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cf00:	9b08      	ldr	r3, [sp, #32]
 800cf02:	f806 8b01 	strb.w	r8, [r6], #1
 800cf06:	eba6 020a 	sub.w	r2, r6, sl
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	ddb3      	ble.n	800ce76 <_dtoa_r+0xade>
 800cf0e:	4649      	mov	r1, r9
 800cf10:	2300      	movs	r3, #0
 800cf12:	220a      	movs	r2, #10
 800cf14:	4658      	mov	r0, fp
 800cf16:	f000 fcb3 	bl	800d880 <__multadd>
 800cf1a:	4681      	mov	r9, r0
 800cf1c:	e7ea      	b.n	800cef4 <_dtoa_r+0xb5c>
 800cf1e:	bf00      	nop
 800cf20:	0800ef7b 	.word	0x0800ef7b
 800cf24:	0800ef16 	.word	0x0800ef16

0800cf28 <_free_r>:
 800cf28:	b538      	push	{r3, r4, r5, lr}
 800cf2a:	4605      	mov	r5, r0
 800cf2c:	2900      	cmp	r1, #0
 800cf2e:	d040      	beq.n	800cfb2 <_free_r+0x8a>
 800cf30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf34:	1f0c      	subs	r4, r1, #4
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	bfb8      	it	lt
 800cf3a:	18e4      	addlt	r4, r4, r3
 800cf3c:	f000 fc32 	bl	800d7a4 <__malloc_lock>
 800cf40:	4a1c      	ldr	r2, [pc, #112]	@ (800cfb4 <_free_r+0x8c>)
 800cf42:	6813      	ldr	r3, [r2, #0]
 800cf44:	b933      	cbnz	r3, 800cf54 <_free_r+0x2c>
 800cf46:	6063      	str	r3, [r4, #4]
 800cf48:	6014      	str	r4, [r2, #0]
 800cf4a:	4628      	mov	r0, r5
 800cf4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf50:	f000 bc2e 	b.w	800d7b0 <__malloc_unlock>
 800cf54:	42a3      	cmp	r3, r4
 800cf56:	d908      	bls.n	800cf6a <_free_r+0x42>
 800cf58:	6820      	ldr	r0, [r4, #0]
 800cf5a:	1821      	adds	r1, r4, r0
 800cf5c:	428b      	cmp	r3, r1
 800cf5e:	bf01      	itttt	eq
 800cf60:	6819      	ldreq	r1, [r3, #0]
 800cf62:	685b      	ldreq	r3, [r3, #4]
 800cf64:	1809      	addeq	r1, r1, r0
 800cf66:	6021      	streq	r1, [r4, #0]
 800cf68:	e7ed      	b.n	800cf46 <_free_r+0x1e>
 800cf6a:	461a      	mov	r2, r3
 800cf6c:	685b      	ldr	r3, [r3, #4]
 800cf6e:	b10b      	cbz	r3, 800cf74 <_free_r+0x4c>
 800cf70:	42a3      	cmp	r3, r4
 800cf72:	d9fa      	bls.n	800cf6a <_free_r+0x42>
 800cf74:	6811      	ldr	r1, [r2, #0]
 800cf76:	1850      	adds	r0, r2, r1
 800cf78:	42a0      	cmp	r0, r4
 800cf7a:	d10b      	bne.n	800cf94 <_free_r+0x6c>
 800cf7c:	6820      	ldr	r0, [r4, #0]
 800cf7e:	4401      	add	r1, r0
 800cf80:	1850      	adds	r0, r2, r1
 800cf82:	4283      	cmp	r3, r0
 800cf84:	6011      	str	r1, [r2, #0]
 800cf86:	d1e0      	bne.n	800cf4a <_free_r+0x22>
 800cf88:	6818      	ldr	r0, [r3, #0]
 800cf8a:	685b      	ldr	r3, [r3, #4]
 800cf8c:	4408      	add	r0, r1
 800cf8e:	6010      	str	r0, [r2, #0]
 800cf90:	6053      	str	r3, [r2, #4]
 800cf92:	e7da      	b.n	800cf4a <_free_r+0x22>
 800cf94:	d902      	bls.n	800cf9c <_free_r+0x74>
 800cf96:	230c      	movs	r3, #12
 800cf98:	602b      	str	r3, [r5, #0]
 800cf9a:	e7d6      	b.n	800cf4a <_free_r+0x22>
 800cf9c:	6820      	ldr	r0, [r4, #0]
 800cf9e:	1821      	adds	r1, r4, r0
 800cfa0:	428b      	cmp	r3, r1
 800cfa2:	bf01      	itttt	eq
 800cfa4:	6819      	ldreq	r1, [r3, #0]
 800cfa6:	685b      	ldreq	r3, [r3, #4]
 800cfa8:	1809      	addeq	r1, r1, r0
 800cfaa:	6021      	streq	r1, [r4, #0]
 800cfac:	6063      	str	r3, [r4, #4]
 800cfae:	6054      	str	r4, [r2, #4]
 800cfb0:	e7cb      	b.n	800cf4a <_free_r+0x22>
 800cfb2:	bd38      	pop	{r3, r4, r5, pc}
 800cfb4:	20003828 	.word	0x20003828

0800cfb8 <rshift>:
 800cfb8:	6903      	ldr	r3, [r0, #16]
 800cfba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cfbe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cfc2:	f100 0414 	add.w	r4, r0, #20
 800cfc6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cfca:	dd46      	ble.n	800d05a <rshift+0xa2>
 800cfcc:	f011 011f 	ands.w	r1, r1, #31
 800cfd0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cfd4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cfd8:	d10c      	bne.n	800cff4 <rshift+0x3c>
 800cfda:	4629      	mov	r1, r5
 800cfdc:	f100 0710 	add.w	r7, r0, #16
 800cfe0:	42b1      	cmp	r1, r6
 800cfe2:	d335      	bcc.n	800d050 <rshift+0x98>
 800cfe4:	1a9b      	subs	r3, r3, r2
 800cfe6:	009b      	lsls	r3, r3, #2
 800cfe8:	1eea      	subs	r2, r5, #3
 800cfea:	4296      	cmp	r6, r2
 800cfec:	bf38      	it	cc
 800cfee:	2300      	movcc	r3, #0
 800cff0:	4423      	add	r3, r4
 800cff2:	e015      	b.n	800d020 <rshift+0x68>
 800cff4:	46a1      	mov	r9, r4
 800cff6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cffa:	f1c1 0820 	rsb	r8, r1, #32
 800cffe:	40cf      	lsrs	r7, r1
 800d000:	f105 0e04 	add.w	lr, r5, #4
 800d004:	4576      	cmp	r6, lr
 800d006:	46f4      	mov	ip, lr
 800d008:	d816      	bhi.n	800d038 <rshift+0x80>
 800d00a:	1a9a      	subs	r2, r3, r2
 800d00c:	0092      	lsls	r2, r2, #2
 800d00e:	3a04      	subs	r2, #4
 800d010:	3501      	adds	r5, #1
 800d012:	42ae      	cmp	r6, r5
 800d014:	bf38      	it	cc
 800d016:	2200      	movcc	r2, #0
 800d018:	18a3      	adds	r3, r4, r2
 800d01a:	50a7      	str	r7, [r4, r2]
 800d01c:	b107      	cbz	r7, 800d020 <rshift+0x68>
 800d01e:	3304      	adds	r3, #4
 800d020:	42a3      	cmp	r3, r4
 800d022:	eba3 0204 	sub.w	r2, r3, r4
 800d026:	bf08      	it	eq
 800d028:	2300      	moveq	r3, #0
 800d02a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d02e:	6102      	str	r2, [r0, #16]
 800d030:	bf08      	it	eq
 800d032:	6143      	streq	r3, [r0, #20]
 800d034:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d038:	f8dc c000 	ldr.w	ip, [ip]
 800d03c:	fa0c fc08 	lsl.w	ip, ip, r8
 800d040:	ea4c 0707 	orr.w	r7, ip, r7
 800d044:	f849 7b04 	str.w	r7, [r9], #4
 800d048:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d04c:	40cf      	lsrs	r7, r1
 800d04e:	e7d9      	b.n	800d004 <rshift+0x4c>
 800d050:	f851 cb04 	ldr.w	ip, [r1], #4
 800d054:	f847 cf04 	str.w	ip, [r7, #4]!
 800d058:	e7c2      	b.n	800cfe0 <rshift+0x28>
 800d05a:	4623      	mov	r3, r4
 800d05c:	e7e0      	b.n	800d020 <rshift+0x68>

0800d05e <__hexdig_fun>:
 800d05e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d062:	2b09      	cmp	r3, #9
 800d064:	d802      	bhi.n	800d06c <__hexdig_fun+0xe>
 800d066:	3820      	subs	r0, #32
 800d068:	b2c0      	uxtb	r0, r0
 800d06a:	4770      	bx	lr
 800d06c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d070:	2b05      	cmp	r3, #5
 800d072:	d801      	bhi.n	800d078 <__hexdig_fun+0x1a>
 800d074:	3847      	subs	r0, #71	@ 0x47
 800d076:	e7f7      	b.n	800d068 <__hexdig_fun+0xa>
 800d078:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d07c:	2b05      	cmp	r3, #5
 800d07e:	d801      	bhi.n	800d084 <__hexdig_fun+0x26>
 800d080:	3827      	subs	r0, #39	@ 0x27
 800d082:	e7f1      	b.n	800d068 <__hexdig_fun+0xa>
 800d084:	2000      	movs	r0, #0
 800d086:	4770      	bx	lr

0800d088 <__gethex>:
 800d088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d08c:	468a      	mov	sl, r1
 800d08e:	4690      	mov	r8, r2
 800d090:	b085      	sub	sp, #20
 800d092:	9302      	str	r3, [sp, #8]
 800d094:	680b      	ldr	r3, [r1, #0]
 800d096:	9001      	str	r0, [sp, #4]
 800d098:	1c9c      	adds	r4, r3, #2
 800d09a:	46a1      	mov	r9, r4
 800d09c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d0a0:	2830      	cmp	r0, #48	@ 0x30
 800d0a2:	d0fa      	beq.n	800d09a <__gethex+0x12>
 800d0a4:	eba9 0303 	sub.w	r3, r9, r3
 800d0a8:	f1a3 0b02 	sub.w	fp, r3, #2
 800d0ac:	f7ff ffd7 	bl	800d05e <__hexdig_fun>
 800d0b0:	4605      	mov	r5, r0
 800d0b2:	2800      	cmp	r0, #0
 800d0b4:	d168      	bne.n	800d188 <__gethex+0x100>
 800d0b6:	2201      	movs	r2, #1
 800d0b8:	4648      	mov	r0, r9
 800d0ba:	499f      	ldr	r1, [pc, #636]	@ (800d338 <__gethex+0x2b0>)
 800d0bc:	f7fe ffb7 	bl	800c02e <strncmp>
 800d0c0:	4607      	mov	r7, r0
 800d0c2:	2800      	cmp	r0, #0
 800d0c4:	d167      	bne.n	800d196 <__gethex+0x10e>
 800d0c6:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d0ca:	4626      	mov	r6, r4
 800d0cc:	f7ff ffc7 	bl	800d05e <__hexdig_fun>
 800d0d0:	2800      	cmp	r0, #0
 800d0d2:	d062      	beq.n	800d19a <__gethex+0x112>
 800d0d4:	4623      	mov	r3, r4
 800d0d6:	7818      	ldrb	r0, [r3, #0]
 800d0d8:	4699      	mov	r9, r3
 800d0da:	2830      	cmp	r0, #48	@ 0x30
 800d0dc:	f103 0301 	add.w	r3, r3, #1
 800d0e0:	d0f9      	beq.n	800d0d6 <__gethex+0x4e>
 800d0e2:	f7ff ffbc 	bl	800d05e <__hexdig_fun>
 800d0e6:	fab0 f580 	clz	r5, r0
 800d0ea:	f04f 0b01 	mov.w	fp, #1
 800d0ee:	096d      	lsrs	r5, r5, #5
 800d0f0:	464a      	mov	r2, r9
 800d0f2:	4616      	mov	r6, r2
 800d0f4:	7830      	ldrb	r0, [r6, #0]
 800d0f6:	3201      	adds	r2, #1
 800d0f8:	f7ff ffb1 	bl	800d05e <__hexdig_fun>
 800d0fc:	2800      	cmp	r0, #0
 800d0fe:	d1f8      	bne.n	800d0f2 <__gethex+0x6a>
 800d100:	2201      	movs	r2, #1
 800d102:	4630      	mov	r0, r6
 800d104:	498c      	ldr	r1, [pc, #560]	@ (800d338 <__gethex+0x2b0>)
 800d106:	f7fe ff92 	bl	800c02e <strncmp>
 800d10a:	2800      	cmp	r0, #0
 800d10c:	d13f      	bne.n	800d18e <__gethex+0x106>
 800d10e:	b944      	cbnz	r4, 800d122 <__gethex+0x9a>
 800d110:	1c74      	adds	r4, r6, #1
 800d112:	4622      	mov	r2, r4
 800d114:	4616      	mov	r6, r2
 800d116:	7830      	ldrb	r0, [r6, #0]
 800d118:	3201      	adds	r2, #1
 800d11a:	f7ff ffa0 	bl	800d05e <__hexdig_fun>
 800d11e:	2800      	cmp	r0, #0
 800d120:	d1f8      	bne.n	800d114 <__gethex+0x8c>
 800d122:	1ba4      	subs	r4, r4, r6
 800d124:	00a7      	lsls	r7, r4, #2
 800d126:	7833      	ldrb	r3, [r6, #0]
 800d128:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d12c:	2b50      	cmp	r3, #80	@ 0x50
 800d12e:	d13e      	bne.n	800d1ae <__gethex+0x126>
 800d130:	7873      	ldrb	r3, [r6, #1]
 800d132:	2b2b      	cmp	r3, #43	@ 0x2b
 800d134:	d033      	beq.n	800d19e <__gethex+0x116>
 800d136:	2b2d      	cmp	r3, #45	@ 0x2d
 800d138:	d034      	beq.n	800d1a4 <__gethex+0x11c>
 800d13a:	2400      	movs	r4, #0
 800d13c:	1c71      	adds	r1, r6, #1
 800d13e:	7808      	ldrb	r0, [r1, #0]
 800d140:	f7ff ff8d 	bl	800d05e <__hexdig_fun>
 800d144:	1e43      	subs	r3, r0, #1
 800d146:	b2db      	uxtb	r3, r3
 800d148:	2b18      	cmp	r3, #24
 800d14a:	d830      	bhi.n	800d1ae <__gethex+0x126>
 800d14c:	f1a0 0210 	sub.w	r2, r0, #16
 800d150:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d154:	f7ff ff83 	bl	800d05e <__hexdig_fun>
 800d158:	f100 3cff 	add.w	ip, r0, #4294967295
 800d15c:	fa5f fc8c 	uxtb.w	ip, ip
 800d160:	f1bc 0f18 	cmp.w	ip, #24
 800d164:	f04f 030a 	mov.w	r3, #10
 800d168:	d91e      	bls.n	800d1a8 <__gethex+0x120>
 800d16a:	b104      	cbz	r4, 800d16e <__gethex+0xe6>
 800d16c:	4252      	negs	r2, r2
 800d16e:	4417      	add	r7, r2
 800d170:	f8ca 1000 	str.w	r1, [sl]
 800d174:	b1ed      	cbz	r5, 800d1b2 <__gethex+0x12a>
 800d176:	f1bb 0f00 	cmp.w	fp, #0
 800d17a:	bf0c      	ite	eq
 800d17c:	2506      	moveq	r5, #6
 800d17e:	2500      	movne	r5, #0
 800d180:	4628      	mov	r0, r5
 800d182:	b005      	add	sp, #20
 800d184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d188:	2500      	movs	r5, #0
 800d18a:	462c      	mov	r4, r5
 800d18c:	e7b0      	b.n	800d0f0 <__gethex+0x68>
 800d18e:	2c00      	cmp	r4, #0
 800d190:	d1c7      	bne.n	800d122 <__gethex+0x9a>
 800d192:	4627      	mov	r7, r4
 800d194:	e7c7      	b.n	800d126 <__gethex+0x9e>
 800d196:	464e      	mov	r6, r9
 800d198:	462f      	mov	r7, r5
 800d19a:	2501      	movs	r5, #1
 800d19c:	e7c3      	b.n	800d126 <__gethex+0x9e>
 800d19e:	2400      	movs	r4, #0
 800d1a0:	1cb1      	adds	r1, r6, #2
 800d1a2:	e7cc      	b.n	800d13e <__gethex+0xb6>
 800d1a4:	2401      	movs	r4, #1
 800d1a6:	e7fb      	b.n	800d1a0 <__gethex+0x118>
 800d1a8:	fb03 0002 	mla	r0, r3, r2, r0
 800d1ac:	e7ce      	b.n	800d14c <__gethex+0xc4>
 800d1ae:	4631      	mov	r1, r6
 800d1b0:	e7de      	b.n	800d170 <__gethex+0xe8>
 800d1b2:	4629      	mov	r1, r5
 800d1b4:	eba6 0309 	sub.w	r3, r6, r9
 800d1b8:	3b01      	subs	r3, #1
 800d1ba:	2b07      	cmp	r3, #7
 800d1bc:	dc0a      	bgt.n	800d1d4 <__gethex+0x14c>
 800d1be:	9801      	ldr	r0, [sp, #4]
 800d1c0:	f000 fafc 	bl	800d7bc <_Balloc>
 800d1c4:	4604      	mov	r4, r0
 800d1c6:	b940      	cbnz	r0, 800d1da <__gethex+0x152>
 800d1c8:	4602      	mov	r2, r0
 800d1ca:	21e4      	movs	r1, #228	@ 0xe4
 800d1cc:	4b5b      	ldr	r3, [pc, #364]	@ (800d33c <__gethex+0x2b4>)
 800d1ce:	485c      	ldr	r0, [pc, #368]	@ (800d340 <__gethex+0x2b8>)
 800d1d0:	f7ff f83a 	bl	800c248 <__assert_func>
 800d1d4:	3101      	adds	r1, #1
 800d1d6:	105b      	asrs	r3, r3, #1
 800d1d8:	e7ef      	b.n	800d1ba <__gethex+0x132>
 800d1da:	2300      	movs	r3, #0
 800d1dc:	f100 0a14 	add.w	sl, r0, #20
 800d1e0:	4655      	mov	r5, sl
 800d1e2:	469b      	mov	fp, r3
 800d1e4:	45b1      	cmp	r9, r6
 800d1e6:	d337      	bcc.n	800d258 <__gethex+0x1d0>
 800d1e8:	f845 bb04 	str.w	fp, [r5], #4
 800d1ec:	eba5 050a 	sub.w	r5, r5, sl
 800d1f0:	10ad      	asrs	r5, r5, #2
 800d1f2:	6125      	str	r5, [r4, #16]
 800d1f4:	4658      	mov	r0, fp
 800d1f6:	f000 fbd3 	bl	800d9a0 <__hi0bits>
 800d1fa:	016d      	lsls	r5, r5, #5
 800d1fc:	f8d8 6000 	ldr.w	r6, [r8]
 800d200:	1a2d      	subs	r5, r5, r0
 800d202:	42b5      	cmp	r5, r6
 800d204:	dd54      	ble.n	800d2b0 <__gethex+0x228>
 800d206:	1bad      	subs	r5, r5, r6
 800d208:	4629      	mov	r1, r5
 800d20a:	4620      	mov	r0, r4
 800d20c:	f000 ff5b 	bl	800e0c6 <__any_on>
 800d210:	4681      	mov	r9, r0
 800d212:	b178      	cbz	r0, 800d234 <__gethex+0x1ac>
 800d214:	f04f 0901 	mov.w	r9, #1
 800d218:	1e6b      	subs	r3, r5, #1
 800d21a:	1159      	asrs	r1, r3, #5
 800d21c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d220:	f003 021f 	and.w	r2, r3, #31
 800d224:	fa09 f202 	lsl.w	r2, r9, r2
 800d228:	420a      	tst	r2, r1
 800d22a:	d003      	beq.n	800d234 <__gethex+0x1ac>
 800d22c:	454b      	cmp	r3, r9
 800d22e:	dc36      	bgt.n	800d29e <__gethex+0x216>
 800d230:	f04f 0902 	mov.w	r9, #2
 800d234:	4629      	mov	r1, r5
 800d236:	4620      	mov	r0, r4
 800d238:	f7ff febe 	bl	800cfb8 <rshift>
 800d23c:	442f      	add	r7, r5
 800d23e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d242:	42bb      	cmp	r3, r7
 800d244:	da42      	bge.n	800d2cc <__gethex+0x244>
 800d246:	4621      	mov	r1, r4
 800d248:	9801      	ldr	r0, [sp, #4]
 800d24a:	f000 faf7 	bl	800d83c <_Bfree>
 800d24e:	2300      	movs	r3, #0
 800d250:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d252:	25a3      	movs	r5, #163	@ 0xa3
 800d254:	6013      	str	r3, [r2, #0]
 800d256:	e793      	b.n	800d180 <__gethex+0xf8>
 800d258:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d25c:	2a2e      	cmp	r2, #46	@ 0x2e
 800d25e:	d012      	beq.n	800d286 <__gethex+0x1fe>
 800d260:	2b20      	cmp	r3, #32
 800d262:	d104      	bne.n	800d26e <__gethex+0x1e6>
 800d264:	f845 bb04 	str.w	fp, [r5], #4
 800d268:	f04f 0b00 	mov.w	fp, #0
 800d26c:	465b      	mov	r3, fp
 800d26e:	7830      	ldrb	r0, [r6, #0]
 800d270:	9303      	str	r3, [sp, #12]
 800d272:	f7ff fef4 	bl	800d05e <__hexdig_fun>
 800d276:	9b03      	ldr	r3, [sp, #12]
 800d278:	f000 000f 	and.w	r0, r0, #15
 800d27c:	4098      	lsls	r0, r3
 800d27e:	ea4b 0b00 	orr.w	fp, fp, r0
 800d282:	3304      	adds	r3, #4
 800d284:	e7ae      	b.n	800d1e4 <__gethex+0x15c>
 800d286:	45b1      	cmp	r9, r6
 800d288:	d8ea      	bhi.n	800d260 <__gethex+0x1d8>
 800d28a:	2201      	movs	r2, #1
 800d28c:	4630      	mov	r0, r6
 800d28e:	492a      	ldr	r1, [pc, #168]	@ (800d338 <__gethex+0x2b0>)
 800d290:	9303      	str	r3, [sp, #12]
 800d292:	f7fe fecc 	bl	800c02e <strncmp>
 800d296:	9b03      	ldr	r3, [sp, #12]
 800d298:	2800      	cmp	r0, #0
 800d29a:	d1e1      	bne.n	800d260 <__gethex+0x1d8>
 800d29c:	e7a2      	b.n	800d1e4 <__gethex+0x15c>
 800d29e:	4620      	mov	r0, r4
 800d2a0:	1ea9      	subs	r1, r5, #2
 800d2a2:	f000 ff10 	bl	800e0c6 <__any_on>
 800d2a6:	2800      	cmp	r0, #0
 800d2a8:	d0c2      	beq.n	800d230 <__gethex+0x1a8>
 800d2aa:	f04f 0903 	mov.w	r9, #3
 800d2ae:	e7c1      	b.n	800d234 <__gethex+0x1ac>
 800d2b0:	da09      	bge.n	800d2c6 <__gethex+0x23e>
 800d2b2:	1b75      	subs	r5, r6, r5
 800d2b4:	4621      	mov	r1, r4
 800d2b6:	462a      	mov	r2, r5
 800d2b8:	9801      	ldr	r0, [sp, #4]
 800d2ba:	f000 fcd5 	bl	800dc68 <__lshift>
 800d2be:	4604      	mov	r4, r0
 800d2c0:	1b7f      	subs	r7, r7, r5
 800d2c2:	f100 0a14 	add.w	sl, r0, #20
 800d2c6:	f04f 0900 	mov.w	r9, #0
 800d2ca:	e7b8      	b.n	800d23e <__gethex+0x1b6>
 800d2cc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d2d0:	42bd      	cmp	r5, r7
 800d2d2:	dd6f      	ble.n	800d3b4 <__gethex+0x32c>
 800d2d4:	1bed      	subs	r5, r5, r7
 800d2d6:	42ae      	cmp	r6, r5
 800d2d8:	dc34      	bgt.n	800d344 <__gethex+0x2bc>
 800d2da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d2de:	2b02      	cmp	r3, #2
 800d2e0:	d022      	beq.n	800d328 <__gethex+0x2a0>
 800d2e2:	2b03      	cmp	r3, #3
 800d2e4:	d024      	beq.n	800d330 <__gethex+0x2a8>
 800d2e6:	2b01      	cmp	r3, #1
 800d2e8:	d115      	bne.n	800d316 <__gethex+0x28e>
 800d2ea:	42ae      	cmp	r6, r5
 800d2ec:	d113      	bne.n	800d316 <__gethex+0x28e>
 800d2ee:	2e01      	cmp	r6, #1
 800d2f0:	d10b      	bne.n	800d30a <__gethex+0x282>
 800d2f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d2f6:	9a02      	ldr	r2, [sp, #8]
 800d2f8:	2562      	movs	r5, #98	@ 0x62
 800d2fa:	6013      	str	r3, [r2, #0]
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	6123      	str	r3, [r4, #16]
 800d300:	f8ca 3000 	str.w	r3, [sl]
 800d304:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d306:	601c      	str	r4, [r3, #0]
 800d308:	e73a      	b.n	800d180 <__gethex+0xf8>
 800d30a:	4620      	mov	r0, r4
 800d30c:	1e71      	subs	r1, r6, #1
 800d30e:	f000 feda 	bl	800e0c6 <__any_on>
 800d312:	2800      	cmp	r0, #0
 800d314:	d1ed      	bne.n	800d2f2 <__gethex+0x26a>
 800d316:	4621      	mov	r1, r4
 800d318:	9801      	ldr	r0, [sp, #4]
 800d31a:	f000 fa8f 	bl	800d83c <_Bfree>
 800d31e:	2300      	movs	r3, #0
 800d320:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d322:	2550      	movs	r5, #80	@ 0x50
 800d324:	6013      	str	r3, [r2, #0]
 800d326:	e72b      	b.n	800d180 <__gethex+0xf8>
 800d328:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d1f3      	bne.n	800d316 <__gethex+0x28e>
 800d32e:	e7e0      	b.n	800d2f2 <__gethex+0x26a>
 800d330:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d332:	2b00      	cmp	r3, #0
 800d334:	d1dd      	bne.n	800d2f2 <__gethex+0x26a>
 800d336:	e7ee      	b.n	800d316 <__gethex+0x28e>
 800d338:	0800edd0 	.word	0x0800edd0
 800d33c:	0800ef7b 	.word	0x0800ef7b
 800d340:	0800ef8c 	.word	0x0800ef8c
 800d344:	1e6f      	subs	r7, r5, #1
 800d346:	f1b9 0f00 	cmp.w	r9, #0
 800d34a:	d130      	bne.n	800d3ae <__gethex+0x326>
 800d34c:	b127      	cbz	r7, 800d358 <__gethex+0x2d0>
 800d34e:	4639      	mov	r1, r7
 800d350:	4620      	mov	r0, r4
 800d352:	f000 feb8 	bl	800e0c6 <__any_on>
 800d356:	4681      	mov	r9, r0
 800d358:	2301      	movs	r3, #1
 800d35a:	4629      	mov	r1, r5
 800d35c:	1b76      	subs	r6, r6, r5
 800d35e:	2502      	movs	r5, #2
 800d360:	117a      	asrs	r2, r7, #5
 800d362:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d366:	f007 071f 	and.w	r7, r7, #31
 800d36a:	40bb      	lsls	r3, r7
 800d36c:	4213      	tst	r3, r2
 800d36e:	4620      	mov	r0, r4
 800d370:	bf18      	it	ne
 800d372:	f049 0902 	orrne.w	r9, r9, #2
 800d376:	f7ff fe1f 	bl	800cfb8 <rshift>
 800d37a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d37e:	f1b9 0f00 	cmp.w	r9, #0
 800d382:	d047      	beq.n	800d414 <__gethex+0x38c>
 800d384:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d388:	2b02      	cmp	r3, #2
 800d38a:	d015      	beq.n	800d3b8 <__gethex+0x330>
 800d38c:	2b03      	cmp	r3, #3
 800d38e:	d017      	beq.n	800d3c0 <__gethex+0x338>
 800d390:	2b01      	cmp	r3, #1
 800d392:	d109      	bne.n	800d3a8 <__gethex+0x320>
 800d394:	f019 0f02 	tst.w	r9, #2
 800d398:	d006      	beq.n	800d3a8 <__gethex+0x320>
 800d39a:	f8da 3000 	ldr.w	r3, [sl]
 800d39e:	ea49 0903 	orr.w	r9, r9, r3
 800d3a2:	f019 0f01 	tst.w	r9, #1
 800d3a6:	d10e      	bne.n	800d3c6 <__gethex+0x33e>
 800d3a8:	f045 0510 	orr.w	r5, r5, #16
 800d3ac:	e032      	b.n	800d414 <__gethex+0x38c>
 800d3ae:	f04f 0901 	mov.w	r9, #1
 800d3b2:	e7d1      	b.n	800d358 <__gethex+0x2d0>
 800d3b4:	2501      	movs	r5, #1
 800d3b6:	e7e2      	b.n	800d37e <__gethex+0x2f6>
 800d3b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3ba:	f1c3 0301 	rsb	r3, r3, #1
 800d3be:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d3c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d0f0      	beq.n	800d3a8 <__gethex+0x320>
 800d3c6:	f04f 0c00 	mov.w	ip, #0
 800d3ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d3ce:	f104 0314 	add.w	r3, r4, #20
 800d3d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d3d6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3e0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d3e4:	d01b      	beq.n	800d41e <__gethex+0x396>
 800d3e6:	3201      	adds	r2, #1
 800d3e8:	6002      	str	r2, [r0, #0]
 800d3ea:	2d02      	cmp	r5, #2
 800d3ec:	f104 0314 	add.w	r3, r4, #20
 800d3f0:	d13c      	bne.n	800d46c <__gethex+0x3e4>
 800d3f2:	f8d8 2000 	ldr.w	r2, [r8]
 800d3f6:	3a01      	subs	r2, #1
 800d3f8:	42b2      	cmp	r2, r6
 800d3fa:	d109      	bne.n	800d410 <__gethex+0x388>
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	1171      	asrs	r1, r6, #5
 800d400:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d404:	f006 061f 	and.w	r6, r6, #31
 800d408:	fa02 f606 	lsl.w	r6, r2, r6
 800d40c:	421e      	tst	r6, r3
 800d40e:	d13a      	bne.n	800d486 <__gethex+0x3fe>
 800d410:	f045 0520 	orr.w	r5, r5, #32
 800d414:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d416:	601c      	str	r4, [r3, #0]
 800d418:	9b02      	ldr	r3, [sp, #8]
 800d41a:	601f      	str	r7, [r3, #0]
 800d41c:	e6b0      	b.n	800d180 <__gethex+0xf8>
 800d41e:	4299      	cmp	r1, r3
 800d420:	f843 cc04 	str.w	ip, [r3, #-4]
 800d424:	d8d9      	bhi.n	800d3da <__gethex+0x352>
 800d426:	68a3      	ldr	r3, [r4, #8]
 800d428:	459b      	cmp	fp, r3
 800d42a:	db17      	blt.n	800d45c <__gethex+0x3d4>
 800d42c:	6861      	ldr	r1, [r4, #4]
 800d42e:	9801      	ldr	r0, [sp, #4]
 800d430:	3101      	adds	r1, #1
 800d432:	f000 f9c3 	bl	800d7bc <_Balloc>
 800d436:	4681      	mov	r9, r0
 800d438:	b918      	cbnz	r0, 800d442 <__gethex+0x3ba>
 800d43a:	4602      	mov	r2, r0
 800d43c:	2184      	movs	r1, #132	@ 0x84
 800d43e:	4b19      	ldr	r3, [pc, #100]	@ (800d4a4 <__gethex+0x41c>)
 800d440:	e6c5      	b.n	800d1ce <__gethex+0x146>
 800d442:	6922      	ldr	r2, [r4, #16]
 800d444:	f104 010c 	add.w	r1, r4, #12
 800d448:	3202      	adds	r2, #2
 800d44a:	0092      	lsls	r2, r2, #2
 800d44c:	300c      	adds	r0, #12
 800d44e:	f7fe fee2 	bl	800c216 <memcpy>
 800d452:	4621      	mov	r1, r4
 800d454:	9801      	ldr	r0, [sp, #4]
 800d456:	f000 f9f1 	bl	800d83c <_Bfree>
 800d45a:	464c      	mov	r4, r9
 800d45c:	6923      	ldr	r3, [r4, #16]
 800d45e:	1c5a      	adds	r2, r3, #1
 800d460:	6122      	str	r2, [r4, #16]
 800d462:	2201      	movs	r2, #1
 800d464:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d468:	615a      	str	r2, [r3, #20]
 800d46a:	e7be      	b.n	800d3ea <__gethex+0x362>
 800d46c:	6922      	ldr	r2, [r4, #16]
 800d46e:	455a      	cmp	r2, fp
 800d470:	dd0b      	ble.n	800d48a <__gethex+0x402>
 800d472:	2101      	movs	r1, #1
 800d474:	4620      	mov	r0, r4
 800d476:	f7ff fd9f 	bl	800cfb8 <rshift>
 800d47a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d47e:	3701      	adds	r7, #1
 800d480:	42bb      	cmp	r3, r7
 800d482:	f6ff aee0 	blt.w	800d246 <__gethex+0x1be>
 800d486:	2501      	movs	r5, #1
 800d488:	e7c2      	b.n	800d410 <__gethex+0x388>
 800d48a:	f016 061f 	ands.w	r6, r6, #31
 800d48e:	d0fa      	beq.n	800d486 <__gethex+0x3fe>
 800d490:	4453      	add	r3, sl
 800d492:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d496:	f000 fa83 	bl	800d9a0 <__hi0bits>
 800d49a:	f1c6 0620 	rsb	r6, r6, #32
 800d49e:	42b0      	cmp	r0, r6
 800d4a0:	dbe7      	blt.n	800d472 <__gethex+0x3ea>
 800d4a2:	e7f0      	b.n	800d486 <__gethex+0x3fe>
 800d4a4:	0800ef7b 	.word	0x0800ef7b

0800d4a8 <L_shift>:
 800d4a8:	f1c2 0208 	rsb	r2, r2, #8
 800d4ac:	0092      	lsls	r2, r2, #2
 800d4ae:	b570      	push	{r4, r5, r6, lr}
 800d4b0:	f1c2 0620 	rsb	r6, r2, #32
 800d4b4:	6843      	ldr	r3, [r0, #4]
 800d4b6:	6804      	ldr	r4, [r0, #0]
 800d4b8:	fa03 f506 	lsl.w	r5, r3, r6
 800d4bc:	432c      	orrs	r4, r5
 800d4be:	40d3      	lsrs	r3, r2
 800d4c0:	6004      	str	r4, [r0, #0]
 800d4c2:	f840 3f04 	str.w	r3, [r0, #4]!
 800d4c6:	4288      	cmp	r0, r1
 800d4c8:	d3f4      	bcc.n	800d4b4 <L_shift+0xc>
 800d4ca:	bd70      	pop	{r4, r5, r6, pc}

0800d4cc <__match>:
 800d4cc:	b530      	push	{r4, r5, lr}
 800d4ce:	6803      	ldr	r3, [r0, #0]
 800d4d0:	3301      	adds	r3, #1
 800d4d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4d6:	b914      	cbnz	r4, 800d4de <__match+0x12>
 800d4d8:	6003      	str	r3, [r0, #0]
 800d4da:	2001      	movs	r0, #1
 800d4dc:	bd30      	pop	{r4, r5, pc}
 800d4de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4e2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d4e6:	2d19      	cmp	r5, #25
 800d4e8:	bf98      	it	ls
 800d4ea:	3220      	addls	r2, #32
 800d4ec:	42a2      	cmp	r2, r4
 800d4ee:	d0f0      	beq.n	800d4d2 <__match+0x6>
 800d4f0:	2000      	movs	r0, #0
 800d4f2:	e7f3      	b.n	800d4dc <__match+0x10>

0800d4f4 <__hexnan>:
 800d4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4f8:	2500      	movs	r5, #0
 800d4fa:	680b      	ldr	r3, [r1, #0]
 800d4fc:	4682      	mov	sl, r0
 800d4fe:	115e      	asrs	r6, r3, #5
 800d500:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d504:	f013 031f 	ands.w	r3, r3, #31
 800d508:	bf18      	it	ne
 800d50a:	3604      	addne	r6, #4
 800d50c:	1f37      	subs	r7, r6, #4
 800d50e:	4690      	mov	r8, r2
 800d510:	46b9      	mov	r9, r7
 800d512:	463c      	mov	r4, r7
 800d514:	46ab      	mov	fp, r5
 800d516:	b087      	sub	sp, #28
 800d518:	6801      	ldr	r1, [r0, #0]
 800d51a:	9301      	str	r3, [sp, #4]
 800d51c:	f846 5c04 	str.w	r5, [r6, #-4]
 800d520:	9502      	str	r5, [sp, #8]
 800d522:	784a      	ldrb	r2, [r1, #1]
 800d524:	1c4b      	adds	r3, r1, #1
 800d526:	9303      	str	r3, [sp, #12]
 800d528:	b342      	cbz	r2, 800d57c <__hexnan+0x88>
 800d52a:	4610      	mov	r0, r2
 800d52c:	9105      	str	r1, [sp, #20]
 800d52e:	9204      	str	r2, [sp, #16]
 800d530:	f7ff fd95 	bl	800d05e <__hexdig_fun>
 800d534:	2800      	cmp	r0, #0
 800d536:	d151      	bne.n	800d5dc <__hexnan+0xe8>
 800d538:	9a04      	ldr	r2, [sp, #16]
 800d53a:	9905      	ldr	r1, [sp, #20]
 800d53c:	2a20      	cmp	r2, #32
 800d53e:	d818      	bhi.n	800d572 <__hexnan+0x7e>
 800d540:	9b02      	ldr	r3, [sp, #8]
 800d542:	459b      	cmp	fp, r3
 800d544:	dd13      	ble.n	800d56e <__hexnan+0x7a>
 800d546:	454c      	cmp	r4, r9
 800d548:	d206      	bcs.n	800d558 <__hexnan+0x64>
 800d54a:	2d07      	cmp	r5, #7
 800d54c:	dc04      	bgt.n	800d558 <__hexnan+0x64>
 800d54e:	462a      	mov	r2, r5
 800d550:	4649      	mov	r1, r9
 800d552:	4620      	mov	r0, r4
 800d554:	f7ff ffa8 	bl	800d4a8 <L_shift>
 800d558:	4544      	cmp	r4, r8
 800d55a:	d952      	bls.n	800d602 <__hexnan+0x10e>
 800d55c:	2300      	movs	r3, #0
 800d55e:	f1a4 0904 	sub.w	r9, r4, #4
 800d562:	f844 3c04 	str.w	r3, [r4, #-4]
 800d566:	461d      	mov	r5, r3
 800d568:	464c      	mov	r4, r9
 800d56a:	f8cd b008 	str.w	fp, [sp, #8]
 800d56e:	9903      	ldr	r1, [sp, #12]
 800d570:	e7d7      	b.n	800d522 <__hexnan+0x2e>
 800d572:	2a29      	cmp	r2, #41	@ 0x29
 800d574:	d157      	bne.n	800d626 <__hexnan+0x132>
 800d576:	3102      	adds	r1, #2
 800d578:	f8ca 1000 	str.w	r1, [sl]
 800d57c:	f1bb 0f00 	cmp.w	fp, #0
 800d580:	d051      	beq.n	800d626 <__hexnan+0x132>
 800d582:	454c      	cmp	r4, r9
 800d584:	d206      	bcs.n	800d594 <__hexnan+0xa0>
 800d586:	2d07      	cmp	r5, #7
 800d588:	dc04      	bgt.n	800d594 <__hexnan+0xa0>
 800d58a:	462a      	mov	r2, r5
 800d58c:	4649      	mov	r1, r9
 800d58e:	4620      	mov	r0, r4
 800d590:	f7ff ff8a 	bl	800d4a8 <L_shift>
 800d594:	4544      	cmp	r4, r8
 800d596:	d936      	bls.n	800d606 <__hexnan+0x112>
 800d598:	4623      	mov	r3, r4
 800d59a:	f1a8 0204 	sub.w	r2, r8, #4
 800d59e:	f853 1b04 	ldr.w	r1, [r3], #4
 800d5a2:	429f      	cmp	r7, r3
 800d5a4:	f842 1f04 	str.w	r1, [r2, #4]!
 800d5a8:	d2f9      	bcs.n	800d59e <__hexnan+0xaa>
 800d5aa:	1b3b      	subs	r3, r7, r4
 800d5ac:	f023 0303 	bic.w	r3, r3, #3
 800d5b0:	3304      	adds	r3, #4
 800d5b2:	3401      	adds	r4, #1
 800d5b4:	3e03      	subs	r6, #3
 800d5b6:	42b4      	cmp	r4, r6
 800d5b8:	bf88      	it	hi
 800d5ba:	2304      	movhi	r3, #4
 800d5bc:	2200      	movs	r2, #0
 800d5be:	4443      	add	r3, r8
 800d5c0:	f843 2b04 	str.w	r2, [r3], #4
 800d5c4:	429f      	cmp	r7, r3
 800d5c6:	d2fb      	bcs.n	800d5c0 <__hexnan+0xcc>
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	b91b      	cbnz	r3, 800d5d4 <__hexnan+0xe0>
 800d5cc:	4547      	cmp	r7, r8
 800d5ce:	d128      	bne.n	800d622 <__hexnan+0x12e>
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	603b      	str	r3, [r7, #0]
 800d5d4:	2005      	movs	r0, #5
 800d5d6:	b007      	add	sp, #28
 800d5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5dc:	3501      	adds	r5, #1
 800d5de:	2d08      	cmp	r5, #8
 800d5e0:	f10b 0b01 	add.w	fp, fp, #1
 800d5e4:	dd06      	ble.n	800d5f4 <__hexnan+0x100>
 800d5e6:	4544      	cmp	r4, r8
 800d5e8:	d9c1      	bls.n	800d56e <__hexnan+0x7a>
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	2501      	movs	r5, #1
 800d5ee:	f844 3c04 	str.w	r3, [r4, #-4]
 800d5f2:	3c04      	subs	r4, #4
 800d5f4:	6822      	ldr	r2, [r4, #0]
 800d5f6:	f000 000f 	and.w	r0, r0, #15
 800d5fa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d5fe:	6020      	str	r0, [r4, #0]
 800d600:	e7b5      	b.n	800d56e <__hexnan+0x7a>
 800d602:	2508      	movs	r5, #8
 800d604:	e7b3      	b.n	800d56e <__hexnan+0x7a>
 800d606:	9b01      	ldr	r3, [sp, #4]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d0dd      	beq.n	800d5c8 <__hexnan+0xd4>
 800d60c:	f04f 32ff 	mov.w	r2, #4294967295
 800d610:	f1c3 0320 	rsb	r3, r3, #32
 800d614:	40da      	lsrs	r2, r3
 800d616:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d61a:	4013      	ands	r3, r2
 800d61c:	f846 3c04 	str.w	r3, [r6, #-4]
 800d620:	e7d2      	b.n	800d5c8 <__hexnan+0xd4>
 800d622:	3f04      	subs	r7, #4
 800d624:	e7d0      	b.n	800d5c8 <__hexnan+0xd4>
 800d626:	2004      	movs	r0, #4
 800d628:	e7d5      	b.n	800d5d6 <__hexnan+0xe2>
	...

0800d62c <malloc>:
 800d62c:	4b02      	ldr	r3, [pc, #8]	@ (800d638 <malloc+0xc>)
 800d62e:	4601      	mov	r1, r0
 800d630:	6818      	ldr	r0, [r3, #0]
 800d632:	f000 b825 	b.w	800d680 <_malloc_r>
 800d636:	bf00      	nop
 800d638:	20000198 	.word	0x20000198

0800d63c <sbrk_aligned>:
 800d63c:	b570      	push	{r4, r5, r6, lr}
 800d63e:	4e0f      	ldr	r6, [pc, #60]	@ (800d67c <sbrk_aligned+0x40>)
 800d640:	460c      	mov	r4, r1
 800d642:	6831      	ldr	r1, [r6, #0]
 800d644:	4605      	mov	r5, r0
 800d646:	b911      	cbnz	r1, 800d64e <sbrk_aligned+0x12>
 800d648:	f001 f812 	bl	800e670 <_sbrk_r>
 800d64c:	6030      	str	r0, [r6, #0]
 800d64e:	4621      	mov	r1, r4
 800d650:	4628      	mov	r0, r5
 800d652:	f001 f80d 	bl	800e670 <_sbrk_r>
 800d656:	1c43      	adds	r3, r0, #1
 800d658:	d103      	bne.n	800d662 <sbrk_aligned+0x26>
 800d65a:	f04f 34ff 	mov.w	r4, #4294967295
 800d65e:	4620      	mov	r0, r4
 800d660:	bd70      	pop	{r4, r5, r6, pc}
 800d662:	1cc4      	adds	r4, r0, #3
 800d664:	f024 0403 	bic.w	r4, r4, #3
 800d668:	42a0      	cmp	r0, r4
 800d66a:	d0f8      	beq.n	800d65e <sbrk_aligned+0x22>
 800d66c:	1a21      	subs	r1, r4, r0
 800d66e:	4628      	mov	r0, r5
 800d670:	f000 fffe 	bl	800e670 <_sbrk_r>
 800d674:	3001      	adds	r0, #1
 800d676:	d1f2      	bne.n	800d65e <sbrk_aligned+0x22>
 800d678:	e7ef      	b.n	800d65a <sbrk_aligned+0x1e>
 800d67a:	bf00      	nop
 800d67c:	20003824 	.word	0x20003824

0800d680 <_malloc_r>:
 800d680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d684:	1ccd      	adds	r5, r1, #3
 800d686:	f025 0503 	bic.w	r5, r5, #3
 800d68a:	3508      	adds	r5, #8
 800d68c:	2d0c      	cmp	r5, #12
 800d68e:	bf38      	it	cc
 800d690:	250c      	movcc	r5, #12
 800d692:	2d00      	cmp	r5, #0
 800d694:	4606      	mov	r6, r0
 800d696:	db01      	blt.n	800d69c <_malloc_r+0x1c>
 800d698:	42a9      	cmp	r1, r5
 800d69a:	d904      	bls.n	800d6a6 <_malloc_r+0x26>
 800d69c:	230c      	movs	r3, #12
 800d69e:	6033      	str	r3, [r6, #0]
 800d6a0:	2000      	movs	r0, #0
 800d6a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d77c <_malloc_r+0xfc>
 800d6aa:	f000 f87b 	bl	800d7a4 <__malloc_lock>
 800d6ae:	f8d8 3000 	ldr.w	r3, [r8]
 800d6b2:	461c      	mov	r4, r3
 800d6b4:	bb44      	cbnz	r4, 800d708 <_malloc_r+0x88>
 800d6b6:	4629      	mov	r1, r5
 800d6b8:	4630      	mov	r0, r6
 800d6ba:	f7ff ffbf 	bl	800d63c <sbrk_aligned>
 800d6be:	1c43      	adds	r3, r0, #1
 800d6c0:	4604      	mov	r4, r0
 800d6c2:	d158      	bne.n	800d776 <_malloc_r+0xf6>
 800d6c4:	f8d8 4000 	ldr.w	r4, [r8]
 800d6c8:	4627      	mov	r7, r4
 800d6ca:	2f00      	cmp	r7, #0
 800d6cc:	d143      	bne.n	800d756 <_malloc_r+0xd6>
 800d6ce:	2c00      	cmp	r4, #0
 800d6d0:	d04b      	beq.n	800d76a <_malloc_r+0xea>
 800d6d2:	6823      	ldr	r3, [r4, #0]
 800d6d4:	4639      	mov	r1, r7
 800d6d6:	4630      	mov	r0, r6
 800d6d8:	eb04 0903 	add.w	r9, r4, r3
 800d6dc:	f000 ffc8 	bl	800e670 <_sbrk_r>
 800d6e0:	4581      	cmp	r9, r0
 800d6e2:	d142      	bne.n	800d76a <_malloc_r+0xea>
 800d6e4:	6821      	ldr	r1, [r4, #0]
 800d6e6:	4630      	mov	r0, r6
 800d6e8:	1a6d      	subs	r5, r5, r1
 800d6ea:	4629      	mov	r1, r5
 800d6ec:	f7ff ffa6 	bl	800d63c <sbrk_aligned>
 800d6f0:	3001      	adds	r0, #1
 800d6f2:	d03a      	beq.n	800d76a <_malloc_r+0xea>
 800d6f4:	6823      	ldr	r3, [r4, #0]
 800d6f6:	442b      	add	r3, r5
 800d6f8:	6023      	str	r3, [r4, #0]
 800d6fa:	f8d8 3000 	ldr.w	r3, [r8]
 800d6fe:	685a      	ldr	r2, [r3, #4]
 800d700:	bb62      	cbnz	r2, 800d75c <_malloc_r+0xdc>
 800d702:	f8c8 7000 	str.w	r7, [r8]
 800d706:	e00f      	b.n	800d728 <_malloc_r+0xa8>
 800d708:	6822      	ldr	r2, [r4, #0]
 800d70a:	1b52      	subs	r2, r2, r5
 800d70c:	d420      	bmi.n	800d750 <_malloc_r+0xd0>
 800d70e:	2a0b      	cmp	r2, #11
 800d710:	d917      	bls.n	800d742 <_malloc_r+0xc2>
 800d712:	1961      	adds	r1, r4, r5
 800d714:	42a3      	cmp	r3, r4
 800d716:	6025      	str	r5, [r4, #0]
 800d718:	bf18      	it	ne
 800d71a:	6059      	strne	r1, [r3, #4]
 800d71c:	6863      	ldr	r3, [r4, #4]
 800d71e:	bf08      	it	eq
 800d720:	f8c8 1000 	streq.w	r1, [r8]
 800d724:	5162      	str	r2, [r4, r5]
 800d726:	604b      	str	r3, [r1, #4]
 800d728:	4630      	mov	r0, r6
 800d72a:	f000 f841 	bl	800d7b0 <__malloc_unlock>
 800d72e:	f104 000b 	add.w	r0, r4, #11
 800d732:	1d23      	adds	r3, r4, #4
 800d734:	f020 0007 	bic.w	r0, r0, #7
 800d738:	1ac2      	subs	r2, r0, r3
 800d73a:	bf1c      	itt	ne
 800d73c:	1a1b      	subne	r3, r3, r0
 800d73e:	50a3      	strne	r3, [r4, r2]
 800d740:	e7af      	b.n	800d6a2 <_malloc_r+0x22>
 800d742:	6862      	ldr	r2, [r4, #4]
 800d744:	42a3      	cmp	r3, r4
 800d746:	bf0c      	ite	eq
 800d748:	f8c8 2000 	streq.w	r2, [r8]
 800d74c:	605a      	strne	r2, [r3, #4]
 800d74e:	e7eb      	b.n	800d728 <_malloc_r+0xa8>
 800d750:	4623      	mov	r3, r4
 800d752:	6864      	ldr	r4, [r4, #4]
 800d754:	e7ae      	b.n	800d6b4 <_malloc_r+0x34>
 800d756:	463c      	mov	r4, r7
 800d758:	687f      	ldr	r7, [r7, #4]
 800d75a:	e7b6      	b.n	800d6ca <_malloc_r+0x4a>
 800d75c:	461a      	mov	r2, r3
 800d75e:	685b      	ldr	r3, [r3, #4]
 800d760:	42a3      	cmp	r3, r4
 800d762:	d1fb      	bne.n	800d75c <_malloc_r+0xdc>
 800d764:	2300      	movs	r3, #0
 800d766:	6053      	str	r3, [r2, #4]
 800d768:	e7de      	b.n	800d728 <_malloc_r+0xa8>
 800d76a:	230c      	movs	r3, #12
 800d76c:	4630      	mov	r0, r6
 800d76e:	6033      	str	r3, [r6, #0]
 800d770:	f000 f81e 	bl	800d7b0 <__malloc_unlock>
 800d774:	e794      	b.n	800d6a0 <_malloc_r+0x20>
 800d776:	6005      	str	r5, [r0, #0]
 800d778:	e7d6      	b.n	800d728 <_malloc_r+0xa8>
 800d77a:	bf00      	nop
 800d77c:	20003828 	.word	0x20003828

0800d780 <__ascii_mbtowc>:
 800d780:	b082      	sub	sp, #8
 800d782:	b901      	cbnz	r1, 800d786 <__ascii_mbtowc+0x6>
 800d784:	a901      	add	r1, sp, #4
 800d786:	b142      	cbz	r2, 800d79a <__ascii_mbtowc+0x1a>
 800d788:	b14b      	cbz	r3, 800d79e <__ascii_mbtowc+0x1e>
 800d78a:	7813      	ldrb	r3, [r2, #0]
 800d78c:	600b      	str	r3, [r1, #0]
 800d78e:	7812      	ldrb	r2, [r2, #0]
 800d790:	1e10      	subs	r0, r2, #0
 800d792:	bf18      	it	ne
 800d794:	2001      	movne	r0, #1
 800d796:	b002      	add	sp, #8
 800d798:	4770      	bx	lr
 800d79a:	4610      	mov	r0, r2
 800d79c:	e7fb      	b.n	800d796 <__ascii_mbtowc+0x16>
 800d79e:	f06f 0001 	mvn.w	r0, #1
 800d7a2:	e7f8      	b.n	800d796 <__ascii_mbtowc+0x16>

0800d7a4 <__malloc_lock>:
 800d7a4:	4801      	ldr	r0, [pc, #4]	@ (800d7ac <__malloc_lock+0x8>)
 800d7a6:	f7fe bd26 	b.w	800c1f6 <__retarget_lock_acquire_recursive>
 800d7aa:	bf00      	nop
 800d7ac:	20003820 	.word	0x20003820

0800d7b0 <__malloc_unlock>:
 800d7b0:	4801      	ldr	r0, [pc, #4]	@ (800d7b8 <__malloc_unlock+0x8>)
 800d7b2:	f7fe bd21 	b.w	800c1f8 <__retarget_lock_release_recursive>
 800d7b6:	bf00      	nop
 800d7b8:	20003820 	.word	0x20003820

0800d7bc <_Balloc>:
 800d7bc:	b570      	push	{r4, r5, r6, lr}
 800d7be:	69c6      	ldr	r6, [r0, #28]
 800d7c0:	4604      	mov	r4, r0
 800d7c2:	460d      	mov	r5, r1
 800d7c4:	b976      	cbnz	r6, 800d7e4 <_Balloc+0x28>
 800d7c6:	2010      	movs	r0, #16
 800d7c8:	f7ff ff30 	bl	800d62c <malloc>
 800d7cc:	4602      	mov	r2, r0
 800d7ce:	61e0      	str	r0, [r4, #28]
 800d7d0:	b920      	cbnz	r0, 800d7dc <_Balloc+0x20>
 800d7d2:	216b      	movs	r1, #107	@ 0x6b
 800d7d4:	4b17      	ldr	r3, [pc, #92]	@ (800d834 <_Balloc+0x78>)
 800d7d6:	4818      	ldr	r0, [pc, #96]	@ (800d838 <_Balloc+0x7c>)
 800d7d8:	f7fe fd36 	bl	800c248 <__assert_func>
 800d7dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d7e0:	6006      	str	r6, [r0, #0]
 800d7e2:	60c6      	str	r6, [r0, #12]
 800d7e4:	69e6      	ldr	r6, [r4, #28]
 800d7e6:	68f3      	ldr	r3, [r6, #12]
 800d7e8:	b183      	cbz	r3, 800d80c <_Balloc+0x50>
 800d7ea:	69e3      	ldr	r3, [r4, #28]
 800d7ec:	68db      	ldr	r3, [r3, #12]
 800d7ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d7f2:	b9b8      	cbnz	r0, 800d824 <_Balloc+0x68>
 800d7f4:	2101      	movs	r1, #1
 800d7f6:	fa01 f605 	lsl.w	r6, r1, r5
 800d7fa:	1d72      	adds	r2, r6, #5
 800d7fc:	4620      	mov	r0, r4
 800d7fe:	0092      	lsls	r2, r2, #2
 800d800:	f000 ff4d 	bl	800e69e <_calloc_r>
 800d804:	b160      	cbz	r0, 800d820 <_Balloc+0x64>
 800d806:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d80a:	e00e      	b.n	800d82a <_Balloc+0x6e>
 800d80c:	2221      	movs	r2, #33	@ 0x21
 800d80e:	2104      	movs	r1, #4
 800d810:	4620      	mov	r0, r4
 800d812:	f000 ff44 	bl	800e69e <_calloc_r>
 800d816:	69e3      	ldr	r3, [r4, #28]
 800d818:	60f0      	str	r0, [r6, #12]
 800d81a:	68db      	ldr	r3, [r3, #12]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d1e4      	bne.n	800d7ea <_Balloc+0x2e>
 800d820:	2000      	movs	r0, #0
 800d822:	bd70      	pop	{r4, r5, r6, pc}
 800d824:	6802      	ldr	r2, [r0, #0]
 800d826:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d82a:	2300      	movs	r3, #0
 800d82c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d830:	e7f7      	b.n	800d822 <_Balloc+0x66>
 800d832:	bf00      	nop
 800d834:	0800ee61 	.word	0x0800ee61
 800d838:	0800efec 	.word	0x0800efec

0800d83c <_Bfree>:
 800d83c:	b570      	push	{r4, r5, r6, lr}
 800d83e:	69c6      	ldr	r6, [r0, #28]
 800d840:	4605      	mov	r5, r0
 800d842:	460c      	mov	r4, r1
 800d844:	b976      	cbnz	r6, 800d864 <_Bfree+0x28>
 800d846:	2010      	movs	r0, #16
 800d848:	f7ff fef0 	bl	800d62c <malloc>
 800d84c:	4602      	mov	r2, r0
 800d84e:	61e8      	str	r0, [r5, #28]
 800d850:	b920      	cbnz	r0, 800d85c <_Bfree+0x20>
 800d852:	218f      	movs	r1, #143	@ 0x8f
 800d854:	4b08      	ldr	r3, [pc, #32]	@ (800d878 <_Bfree+0x3c>)
 800d856:	4809      	ldr	r0, [pc, #36]	@ (800d87c <_Bfree+0x40>)
 800d858:	f7fe fcf6 	bl	800c248 <__assert_func>
 800d85c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d860:	6006      	str	r6, [r0, #0]
 800d862:	60c6      	str	r6, [r0, #12]
 800d864:	b13c      	cbz	r4, 800d876 <_Bfree+0x3a>
 800d866:	69eb      	ldr	r3, [r5, #28]
 800d868:	6862      	ldr	r2, [r4, #4]
 800d86a:	68db      	ldr	r3, [r3, #12]
 800d86c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d870:	6021      	str	r1, [r4, #0]
 800d872:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d876:	bd70      	pop	{r4, r5, r6, pc}
 800d878:	0800ee61 	.word	0x0800ee61
 800d87c:	0800efec 	.word	0x0800efec

0800d880 <__multadd>:
 800d880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d884:	4607      	mov	r7, r0
 800d886:	460c      	mov	r4, r1
 800d888:	461e      	mov	r6, r3
 800d88a:	2000      	movs	r0, #0
 800d88c:	690d      	ldr	r5, [r1, #16]
 800d88e:	f101 0c14 	add.w	ip, r1, #20
 800d892:	f8dc 3000 	ldr.w	r3, [ip]
 800d896:	3001      	adds	r0, #1
 800d898:	b299      	uxth	r1, r3
 800d89a:	fb02 6101 	mla	r1, r2, r1, r6
 800d89e:	0c1e      	lsrs	r6, r3, #16
 800d8a0:	0c0b      	lsrs	r3, r1, #16
 800d8a2:	fb02 3306 	mla	r3, r2, r6, r3
 800d8a6:	b289      	uxth	r1, r1
 800d8a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d8ac:	4285      	cmp	r5, r0
 800d8ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d8b2:	f84c 1b04 	str.w	r1, [ip], #4
 800d8b6:	dcec      	bgt.n	800d892 <__multadd+0x12>
 800d8b8:	b30e      	cbz	r6, 800d8fe <__multadd+0x7e>
 800d8ba:	68a3      	ldr	r3, [r4, #8]
 800d8bc:	42ab      	cmp	r3, r5
 800d8be:	dc19      	bgt.n	800d8f4 <__multadd+0x74>
 800d8c0:	6861      	ldr	r1, [r4, #4]
 800d8c2:	4638      	mov	r0, r7
 800d8c4:	3101      	adds	r1, #1
 800d8c6:	f7ff ff79 	bl	800d7bc <_Balloc>
 800d8ca:	4680      	mov	r8, r0
 800d8cc:	b928      	cbnz	r0, 800d8da <__multadd+0x5a>
 800d8ce:	4602      	mov	r2, r0
 800d8d0:	21ba      	movs	r1, #186	@ 0xba
 800d8d2:	4b0c      	ldr	r3, [pc, #48]	@ (800d904 <__multadd+0x84>)
 800d8d4:	480c      	ldr	r0, [pc, #48]	@ (800d908 <__multadd+0x88>)
 800d8d6:	f7fe fcb7 	bl	800c248 <__assert_func>
 800d8da:	6922      	ldr	r2, [r4, #16]
 800d8dc:	f104 010c 	add.w	r1, r4, #12
 800d8e0:	3202      	adds	r2, #2
 800d8e2:	0092      	lsls	r2, r2, #2
 800d8e4:	300c      	adds	r0, #12
 800d8e6:	f7fe fc96 	bl	800c216 <memcpy>
 800d8ea:	4621      	mov	r1, r4
 800d8ec:	4638      	mov	r0, r7
 800d8ee:	f7ff ffa5 	bl	800d83c <_Bfree>
 800d8f2:	4644      	mov	r4, r8
 800d8f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d8f8:	3501      	adds	r5, #1
 800d8fa:	615e      	str	r6, [r3, #20]
 800d8fc:	6125      	str	r5, [r4, #16]
 800d8fe:	4620      	mov	r0, r4
 800d900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d904:	0800ef7b 	.word	0x0800ef7b
 800d908:	0800efec 	.word	0x0800efec

0800d90c <__s2b>:
 800d90c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d910:	4615      	mov	r5, r2
 800d912:	2209      	movs	r2, #9
 800d914:	461f      	mov	r7, r3
 800d916:	3308      	adds	r3, #8
 800d918:	460c      	mov	r4, r1
 800d91a:	fb93 f3f2 	sdiv	r3, r3, r2
 800d91e:	4606      	mov	r6, r0
 800d920:	2201      	movs	r2, #1
 800d922:	2100      	movs	r1, #0
 800d924:	429a      	cmp	r2, r3
 800d926:	db09      	blt.n	800d93c <__s2b+0x30>
 800d928:	4630      	mov	r0, r6
 800d92a:	f7ff ff47 	bl	800d7bc <_Balloc>
 800d92e:	b940      	cbnz	r0, 800d942 <__s2b+0x36>
 800d930:	4602      	mov	r2, r0
 800d932:	21d3      	movs	r1, #211	@ 0xd3
 800d934:	4b18      	ldr	r3, [pc, #96]	@ (800d998 <__s2b+0x8c>)
 800d936:	4819      	ldr	r0, [pc, #100]	@ (800d99c <__s2b+0x90>)
 800d938:	f7fe fc86 	bl	800c248 <__assert_func>
 800d93c:	0052      	lsls	r2, r2, #1
 800d93e:	3101      	adds	r1, #1
 800d940:	e7f0      	b.n	800d924 <__s2b+0x18>
 800d942:	9b08      	ldr	r3, [sp, #32]
 800d944:	2d09      	cmp	r5, #9
 800d946:	6143      	str	r3, [r0, #20]
 800d948:	f04f 0301 	mov.w	r3, #1
 800d94c:	6103      	str	r3, [r0, #16]
 800d94e:	dd16      	ble.n	800d97e <__s2b+0x72>
 800d950:	f104 0909 	add.w	r9, r4, #9
 800d954:	46c8      	mov	r8, r9
 800d956:	442c      	add	r4, r5
 800d958:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d95c:	4601      	mov	r1, r0
 800d95e:	220a      	movs	r2, #10
 800d960:	4630      	mov	r0, r6
 800d962:	3b30      	subs	r3, #48	@ 0x30
 800d964:	f7ff ff8c 	bl	800d880 <__multadd>
 800d968:	45a0      	cmp	r8, r4
 800d96a:	d1f5      	bne.n	800d958 <__s2b+0x4c>
 800d96c:	f1a5 0408 	sub.w	r4, r5, #8
 800d970:	444c      	add	r4, r9
 800d972:	1b2d      	subs	r5, r5, r4
 800d974:	1963      	adds	r3, r4, r5
 800d976:	42bb      	cmp	r3, r7
 800d978:	db04      	blt.n	800d984 <__s2b+0x78>
 800d97a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d97e:	2509      	movs	r5, #9
 800d980:	340a      	adds	r4, #10
 800d982:	e7f6      	b.n	800d972 <__s2b+0x66>
 800d984:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d988:	4601      	mov	r1, r0
 800d98a:	220a      	movs	r2, #10
 800d98c:	4630      	mov	r0, r6
 800d98e:	3b30      	subs	r3, #48	@ 0x30
 800d990:	f7ff ff76 	bl	800d880 <__multadd>
 800d994:	e7ee      	b.n	800d974 <__s2b+0x68>
 800d996:	bf00      	nop
 800d998:	0800ef7b 	.word	0x0800ef7b
 800d99c:	0800efec 	.word	0x0800efec

0800d9a0 <__hi0bits>:
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d9a6:	bf3a      	itte	cc
 800d9a8:	0403      	lslcc	r3, r0, #16
 800d9aa:	2010      	movcc	r0, #16
 800d9ac:	2000      	movcs	r0, #0
 800d9ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d9b2:	bf3c      	itt	cc
 800d9b4:	021b      	lslcc	r3, r3, #8
 800d9b6:	3008      	addcc	r0, #8
 800d9b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d9bc:	bf3c      	itt	cc
 800d9be:	011b      	lslcc	r3, r3, #4
 800d9c0:	3004      	addcc	r0, #4
 800d9c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d9c6:	bf3c      	itt	cc
 800d9c8:	009b      	lslcc	r3, r3, #2
 800d9ca:	3002      	addcc	r0, #2
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	db05      	blt.n	800d9dc <__hi0bits+0x3c>
 800d9d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d9d4:	f100 0001 	add.w	r0, r0, #1
 800d9d8:	bf08      	it	eq
 800d9da:	2020      	moveq	r0, #32
 800d9dc:	4770      	bx	lr

0800d9de <__lo0bits>:
 800d9de:	6803      	ldr	r3, [r0, #0]
 800d9e0:	4602      	mov	r2, r0
 800d9e2:	f013 0007 	ands.w	r0, r3, #7
 800d9e6:	d00b      	beq.n	800da00 <__lo0bits+0x22>
 800d9e8:	07d9      	lsls	r1, r3, #31
 800d9ea:	d421      	bmi.n	800da30 <__lo0bits+0x52>
 800d9ec:	0798      	lsls	r0, r3, #30
 800d9ee:	bf49      	itett	mi
 800d9f0:	085b      	lsrmi	r3, r3, #1
 800d9f2:	089b      	lsrpl	r3, r3, #2
 800d9f4:	2001      	movmi	r0, #1
 800d9f6:	6013      	strmi	r3, [r2, #0]
 800d9f8:	bf5c      	itt	pl
 800d9fa:	2002      	movpl	r0, #2
 800d9fc:	6013      	strpl	r3, [r2, #0]
 800d9fe:	4770      	bx	lr
 800da00:	b299      	uxth	r1, r3
 800da02:	b909      	cbnz	r1, 800da08 <__lo0bits+0x2a>
 800da04:	2010      	movs	r0, #16
 800da06:	0c1b      	lsrs	r3, r3, #16
 800da08:	b2d9      	uxtb	r1, r3
 800da0a:	b909      	cbnz	r1, 800da10 <__lo0bits+0x32>
 800da0c:	3008      	adds	r0, #8
 800da0e:	0a1b      	lsrs	r3, r3, #8
 800da10:	0719      	lsls	r1, r3, #28
 800da12:	bf04      	itt	eq
 800da14:	091b      	lsreq	r3, r3, #4
 800da16:	3004      	addeq	r0, #4
 800da18:	0799      	lsls	r1, r3, #30
 800da1a:	bf04      	itt	eq
 800da1c:	089b      	lsreq	r3, r3, #2
 800da1e:	3002      	addeq	r0, #2
 800da20:	07d9      	lsls	r1, r3, #31
 800da22:	d403      	bmi.n	800da2c <__lo0bits+0x4e>
 800da24:	085b      	lsrs	r3, r3, #1
 800da26:	f100 0001 	add.w	r0, r0, #1
 800da2a:	d003      	beq.n	800da34 <__lo0bits+0x56>
 800da2c:	6013      	str	r3, [r2, #0]
 800da2e:	4770      	bx	lr
 800da30:	2000      	movs	r0, #0
 800da32:	4770      	bx	lr
 800da34:	2020      	movs	r0, #32
 800da36:	4770      	bx	lr

0800da38 <__i2b>:
 800da38:	b510      	push	{r4, lr}
 800da3a:	460c      	mov	r4, r1
 800da3c:	2101      	movs	r1, #1
 800da3e:	f7ff febd 	bl	800d7bc <_Balloc>
 800da42:	4602      	mov	r2, r0
 800da44:	b928      	cbnz	r0, 800da52 <__i2b+0x1a>
 800da46:	f240 1145 	movw	r1, #325	@ 0x145
 800da4a:	4b04      	ldr	r3, [pc, #16]	@ (800da5c <__i2b+0x24>)
 800da4c:	4804      	ldr	r0, [pc, #16]	@ (800da60 <__i2b+0x28>)
 800da4e:	f7fe fbfb 	bl	800c248 <__assert_func>
 800da52:	2301      	movs	r3, #1
 800da54:	6144      	str	r4, [r0, #20]
 800da56:	6103      	str	r3, [r0, #16]
 800da58:	bd10      	pop	{r4, pc}
 800da5a:	bf00      	nop
 800da5c:	0800ef7b 	.word	0x0800ef7b
 800da60:	0800efec 	.word	0x0800efec

0800da64 <__multiply>:
 800da64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da68:	4614      	mov	r4, r2
 800da6a:	690a      	ldr	r2, [r1, #16]
 800da6c:	6923      	ldr	r3, [r4, #16]
 800da6e:	460f      	mov	r7, r1
 800da70:	429a      	cmp	r2, r3
 800da72:	bfa2      	ittt	ge
 800da74:	4623      	movge	r3, r4
 800da76:	460c      	movge	r4, r1
 800da78:	461f      	movge	r7, r3
 800da7a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800da7e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800da82:	68a3      	ldr	r3, [r4, #8]
 800da84:	6861      	ldr	r1, [r4, #4]
 800da86:	eb0a 0609 	add.w	r6, sl, r9
 800da8a:	42b3      	cmp	r3, r6
 800da8c:	b085      	sub	sp, #20
 800da8e:	bfb8      	it	lt
 800da90:	3101      	addlt	r1, #1
 800da92:	f7ff fe93 	bl	800d7bc <_Balloc>
 800da96:	b930      	cbnz	r0, 800daa6 <__multiply+0x42>
 800da98:	4602      	mov	r2, r0
 800da9a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800da9e:	4b43      	ldr	r3, [pc, #268]	@ (800dbac <__multiply+0x148>)
 800daa0:	4843      	ldr	r0, [pc, #268]	@ (800dbb0 <__multiply+0x14c>)
 800daa2:	f7fe fbd1 	bl	800c248 <__assert_func>
 800daa6:	f100 0514 	add.w	r5, r0, #20
 800daaa:	462b      	mov	r3, r5
 800daac:	2200      	movs	r2, #0
 800daae:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dab2:	4543      	cmp	r3, r8
 800dab4:	d321      	bcc.n	800dafa <__multiply+0x96>
 800dab6:	f107 0114 	add.w	r1, r7, #20
 800daba:	f104 0214 	add.w	r2, r4, #20
 800dabe:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800dac2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800dac6:	9302      	str	r3, [sp, #8]
 800dac8:	1b13      	subs	r3, r2, r4
 800daca:	3b15      	subs	r3, #21
 800dacc:	f023 0303 	bic.w	r3, r3, #3
 800dad0:	3304      	adds	r3, #4
 800dad2:	f104 0715 	add.w	r7, r4, #21
 800dad6:	42ba      	cmp	r2, r7
 800dad8:	bf38      	it	cc
 800dada:	2304      	movcc	r3, #4
 800dadc:	9301      	str	r3, [sp, #4]
 800dade:	9b02      	ldr	r3, [sp, #8]
 800dae0:	9103      	str	r1, [sp, #12]
 800dae2:	428b      	cmp	r3, r1
 800dae4:	d80c      	bhi.n	800db00 <__multiply+0x9c>
 800dae6:	2e00      	cmp	r6, #0
 800dae8:	dd03      	ble.n	800daf2 <__multiply+0x8e>
 800daea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d05a      	beq.n	800dba8 <__multiply+0x144>
 800daf2:	6106      	str	r6, [r0, #16]
 800daf4:	b005      	add	sp, #20
 800daf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dafa:	f843 2b04 	str.w	r2, [r3], #4
 800dafe:	e7d8      	b.n	800dab2 <__multiply+0x4e>
 800db00:	f8b1 a000 	ldrh.w	sl, [r1]
 800db04:	f1ba 0f00 	cmp.w	sl, #0
 800db08:	d023      	beq.n	800db52 <__multiply+0xee>
 800db0a:	46a9      	mov	r9, r5
 800db0c:	f04f 0c00 	mov.w	ip, #0
 800db10:	f104 0e14 	add.w	lr, r4, #20
 800db14:	f85e 7b04 	ldr.w	r7, [lr], #4
 800db18:	f8d9 3000 	ldr.w	r3, [r9]
 800db1c:	fa1f fb87 	uxth.w	fp, r7
 800db20:	b29b      	uxth	r3, r3
 800db22:	fb0a 330b 	mla	r3, sl, fp, r3
 800db26:	4463      	add	r3, ip
 800db28:	f8d9 c000 	ldr.w	ip, [r9]
 800db2c:	0c3f      	lsrs	r7, r7, #16
 800db2e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800db32:	fb0a c707 	mla	r7, sl, r7, ip
 800db36:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800db3a:	b29b      	uxth	r3, r3
 800db3c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800db40:	4572      	cmp	r2, lr
 800db42:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800db46:	f849 3b04 	str.w	r3, [r9], #4
 800db4a:	d8e3      	bhi.n	800db14 <__multiply+0xb0>
 800db4c:	9b01      	ldr	r3, [sp, #4]
 800db4e:	f845 c003 	str.w	ip, [r5, r3]
 800db52:	9b03      	ldr	r3, [sp, #12]
 800db54:	3104      	adds	r1, #4
 800db56:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800db5a:	f1b9 0f00 	cmp.w	r9, #0
 800db5e:	d021      	beq.n	800dba4 <__multiply+0x140>
 800db60:	46ae      	mov	lr, r5
 800db62:	f04f 0a00 	mov.w	sl, #0
 800db66:	682b      	ldr	r3, [r5, #0]
 800db68:	f104 0c14 	add.w	ip, r4, #20
 800db6c:	f8bc b000 	ldrh.w	fp, [ip]
 800db70:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800db74:	b29b      	uxth	r3, r3
 800db76:	fb09 770b 	mla	r7, r9, fp, r7
 800db7a:	4457      	add	r7, sl
 800db7c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800db80:	f84e 3b04 	str.w	r3, [lr], #4
 800db84:	f85c 3b04 	ldr.w	r3, [ip], #4
 800db88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800db8c:	f8be 3000 	ldrh.w	r3, [lr]
 800db90:	4562      	cmp	r2, ip
 800db92:	fb09 330a 	mla	r3, r9, sl, r3
 800db96:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800db9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800db9e:	d8e5      	bhi.n	800db6c <__multiply+0x108>
 800dba0:	9f01      	ldr	r7, [sp, #4]
 800dba2:	51eb      	str	r3, [r5, r7]
 800dba4:	3504      	adds	r5, #4
 800dba6:	e79a      	b.n	800dade <__multiply+0x7a>
 800dba8:	3e01      	subs	r6, #1
 800dbaa:	e79c      	b.n	800dae6 <__multiply+0x82>
 800dbac:	0800ef7b 	.word	0x0800ef7b
 800dbb0:	0800efec 	.word	0x0800efec

0800dbb4 <__pow5mult>:
 800dbb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dbb8:	4615      	mov	r5, r2
 800dbba:	f012 0203 	ands.w	r2, r2, #3
 800dbbe:	4607      	mov	r7, r0
 800dbc0:	460e      	mov	r6, r1
 800dbc2:	d007      	beq.n	800dbd4 <__pow5mult+0x20>
 800dbc4:	4c25      	ldr	r4, [pc, #148]	@ (800dc5c <__pow5mult+0xa8>)
 800dbc6:	3a01      	subs	r2, #1
 800dbc8:	2300      	movs	r3, #0
 800dbca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dbce:	f7ff fe57 	bl	800d880 <__multadd>
 800dbd2:	4606      	mov	r6, r0
 800dbd4:	10ad      	asrs	r5, r5, #2
 800dbd6:	d03d      	beq.n	800dc54 <__pow5mult+0xa0>
 800dbd8:	69fc      	ldr	r4, [r7, #28]
 800dbda:	b97c      	cbnz	r4, 800dbfc <__pow5mult+0x48>
 800dbdc:	2010      	movs	r0, #16
 800dbde:	f7ff fd25 	bl	800d62c <malloc>
 800dbe2:	4602      	mov	r2, r0
 800dbe4:	61f8      	str	r0, [r7, #28]
 800dbe6:	b928      	cbnz	r0, 800dbf4 <__pow5mult+0x40>
 800dbe8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800dbec:	4b1c      	ldr	r3, [pc, #112]	@ (800dc60 <__pow5mult+0xac>)
 800dbee:	481d      	ldr	r0, [pc, #116]	@ (800dc64 <__pow5mult+0xb0>)
 800dbf0:	f7fe fb2a 	bl	800c248 <__assert_func>
 800dbf4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dbf8:	6004      	str	r4, [r0, #0]
 800dbfa:	60c4      	str	r4, [r0, #12]
 800dbfc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800dc00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dc04:	b94c      	cbnz	r4, 800dc1a <__pow5mult+0x66>
 800dc06:	f240 2171 	movw	r1, #625	@ 0x271
 800dc0a:	4638      	mov	r0, r7
 800dc0c:	f7ff ff14 	bl	800da38 <__i2b>
 800dc10:	2300      	movs	r3, #0
 800dc12:	4604      	mov	r4, r0
 800dc14:	f8c8 0008 	str.w	r0, [r8, #8]
 800dc18:	6003      	str	r3, [r0, #0]
 800dc1a:	f04f 0900 	mov.w	r9, #0
 800dc1e:	07eb      	lsls	r3, r5, #31
 800dc20:	d50a      	bpl.n	800dc38 <__pow5mult+0x84>
 800dc22:	4631      	mov	r1, r6
 800dc24:	4622      	mov	r2, r4
 800dc26:	4638      	mov	r0, r7
 800dc28:	f7ff ff1c 	bl	800da64 <__multiply>
 800dc2c:	4680      	mov	r8, r0
 800dc2e:	4631      	mov	r1, r6
 800dc30:	4638      	mov	r0, r7
 800dc32:	f7ff fe03 	bl	800d83c <_Bfree>
 800dc36:	4646      	mov	r6, r8
 800dc38:	106d      	asrs	r5, r5, #1
 800dc3a:	d00b      	beq.n	800dc54 <__pow5mult+0xa0>
 800dc3c:	6820      	ldr	r0, [r4, #0]
 800dc3e:	b938      	cbnz	r0, 800dc50 <__pow5mult+0x9c>
 800dc40:	4622      	mov	r2, r4
 800dc42:	4621      	mov	r1, r4
 800dc44:	4638      	mov	r0, r7
 800dc46:	f7ff ff0d 	bl	800da64 <__multiply>
 800dc4a:	6020      	str	r0, [r4, #0]
 800dc4c:	f8c0 9000 	str.w	r9, [r0]
 800dc50:	4604      	mov	r4, r0
 800dc52:	e7e4      	b.n	800dc1e <__pow5mult+0x6a>
 800dc54:	4630      	mov	r0, r6
 800dc56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc5a:	bf00      	nop
 800dc5c:	0800f048 	.word	0x0800f048
 800dc60:	0800ee61 	.word	0x0800ee61
 800dc64:	0800efec 	.word	0x0800efec

0800dc68 <__lshift>:
 800dc68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc6c:	460c      	mov	r4, r1
 800dc6e:	4607      	mov	r7, r0
 800dc70:	4691      	mov	r9, r2
 800dc72:	6923      	ldr	r3, [r4, #16]
 800dc74:	6849      	ldr	r1, [r1, #4]
 800dc76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dc7a:	68a3      	ldr	r3, [r4, #8]
 800dc7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dc80:	f108 0601 	add.w	r6, r8, #1
 800dc84:	42b3      	cmp	r3, r6
 800dc86:	db0b      	blt.n	800dca0 <__lshift+0x38>
 800dc88:	4638      	mov	r0, r7
 800dc8a:	f7ff fd97 	bl	800d7bc <_Balloc>
 800dc8e:	4605      	mov	r5, r0
 800dc90:	b948      	cbnz	r0, 800dca6 <__lshift+0x3e>
 800dc92:	4602      	mov	r2, r0
 800dc94:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800dc98:	4b27      	ldr	r3, [pc, #156]	@ (800dd38 <__lshift+0xd0>)
 800dc9a:	4828      	ldr	r0, [pc, #160]	@ (800dd3c <__lshift+0xd4>)
 800dc9c:	f7fe fad4 	bl	800c248 <__assert_func>
 800dca0:	3101      	adds	r1, #1
 800dca2:	005b      	lsls	r3, r3, #1
 800dca4:	e7ee      	b.n	800dc84 <__lshift+0x1c>
 800dca6:	2300      	movs	r3, #0
 800dca8:	f100 0114 	add.w	r1, r0, #20
 800dcac:	f100 0210 	add.w	r2, r0, #16
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	4553      	cmp	r3, sl
 800dcb4:	db33      	blt.n	800dd1e <__lshift+0xb6>
 800dcb6:	6920      	ldr	r0, [r4, #16]
 800dcb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dcbc:	f104 0314 	add.w	r3, r4, #20
 800dcc0:	f019 091f 	ands.w	r9, r9, #31
 800dcc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dcc8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dccc:	d02b      	beq.n	800dd26 <__lshift+0xbe>
 800dcce:	468a      	mov	sl, r1
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	f1c9 0e20 	rsb	lr, r9, #32
 800dcd6:	6818      	ldr	r0, [r3, #0]
 800dcd8:	fa00 f009 	lsl.w	r0, r0, r9
 800dcdc:	4310      	orrs	r0, r2
 800dcde:	f84a 0b04 	str.w	r0, [sl], #4
 800dce2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dce6:	459c      	cmp	ip, r3
 800dce8:	fa22 f20e 	lsr.w	r2, r2, lr
 800dcec:	d8f3      	bhi.n	800dcd6 <__lshift+0x6e>
 800dcee:	ebac 0304 	sub.w	r3, ip, r4
 800dcf2:	3b15      	subs	r3, #21
 800dcf4:	f023 0303 	bic.w	r3, r3, #3
 800dcf8:	3304      	adds	r3, #4
 800dcfa:	f104 0015 	add.w	r0, r4, #21
 800dcfe:	4584      	cmp	ip, r0
 800dd00:	bf38      	it	cc
 800dd02:	2304      	movcc	r3, #4
 800dd04:	50ca      	str	r2, [r1, r3]
 800dd06:	b10a      	cbz	r2, 800dd0c <__lshift+0xa4>
 800dd08:	f108 0602 	add.w	r6, r8, #2
 800dd0c:	3e01      	subs	r6, #1
 800dd0e:	4638      	mov	r0, r7
 800dd10:	4621      	mov	r1, r4
 800dd12:	612e      	str	r6, [r5, #16]
 800dd14:	f7ff fd92 	bl	800d83c <_Bfree>
 800dd18:	4628      	mov	r0, r5
 800dd1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd1e:	f842 0f04 	str.w	r0, [r2, #4]!
 800dd22:	3301      	adds	r3, #1
 800dd24:	e7c5      	b.n	800dcb2 <__lshift+0x4a>
 800dd26:	3904      	subs	r1, #4
 800dd28:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd2c:	459c      	cmp	ip, r3
 800dd2e:	f841 2f04 	str.w	r2, [r1, #4]!
 800dd32:	d8f9      	bhi.n	800dd28 <__lshift+0xc0>
 800dd34:	e7ea      	b.n	800dd0c <__lshift+0xa4>
 800dd36:	bf00      	nop
 800dd38:	0800ef7b 	.word	0x0800ef7b
 800dd3c:	0800efec 	.word	0x0800efec

0800dd40 <__mcmp>:
 800dd40:	4603      	mov	r3, r0
 800dd42:	690a      	ldr	r2, [r1, #16]
 800dd44:	6900      	ldr	r0, [r0, #16]
 800dd46:	b530      	push	{r4, r5, lr}
 800dd48:	1a80      	subs	r0, r0, r2
 800dd4a:	d10e      	bne.n	800dd6a <__mcmp+0x2a>
 800dd4c:	3314      	adds	r3, #20
 800dd4e:	3114      	adds	r1, #20
 800dd50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dd54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dd58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dd5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dd60:	4295      	cmp	r5, r2
 800dd62:	d003      	beq.n	800dd6c <__mcmp+0x2c>
 800dd64:	d205      	bcs.n	800dd72 <__mcmp+0x32>
 800dd66:	f04f 30ff 	mov.w	r0, #4294967295
 800dd6a:	bd30      	pop	{r4, r5, pc}
 800dd6c:	42a3      	cmp	r3, r4
 800dd6e:	d3f3      	bcc.n	800dd58 <__mcmp+0x18>
 800dd70:	e7fb      	b.n	800dd6a <__mcmp+0x2a>
 800dd72:	2001      	movs	r0, #1
 800dd74:	e7f9      	b.n	800dd6a <__mcmp+0x2a>
	...

0800dd78 <__mdiff>:
 800dd78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd7c:	4689      	mov	r9, r1
 800dd7e:	4606      	mov	r6, r0
 800dd80:	4611      	mov	r1, r2
 800dd82:	4648      	mov	r0, r9
 800dd84:	4614      	mov	r4, r2
 800dd86:	f7ff ffdb 	bl	800dd40 <__mcmp>
 800dd8a:	1e05      	subs	r5, r0, #0
 800dd8c:	d112      	bne.n	800ddb4 <__mdiff+0x3c>
 800dd8e:	4629      	mov	r1, r5
 800dd90:	4630      	mov	r0, r6
 800dd92:	f7ff fd13 	bl	800d7bc <_Balloc>
 800dd96:	4602      	mov	r2, r0
 800dd98:	b928      	cbnz	r0, 800dda6 <__mdiff+0x2e>
 800dd9a:	f240 2137 	movw	r1, #567	@ 0x237
 800dd9e:	4b3e      	ldr	r3, [pc, #248]	@ (800de98 <__mdiff+0x120>)
 800dda0:	483e      	ldr	r0, [pc, #248]	@ (800de9c <__mdiff+0x124>)
 800dda2:	f7fe fa51 	bl	800c248 <__assert_func>
 800dda6:	2301      	movs	r3, #1
 800dda8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ddac:	4610      	mov	r0, r2
 800ddae:	b003      	add	sp, #12
 800ddb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddb4:	bfbc      	itt	lt
 800ddb6:	464b      	movlt	r3, r9
 800ddb8:	46a1      	movlt	r9, r4
 800ddba:	4630      	mov	r0, r6
 800ddbc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ddc0:	bfba      	itte	lt
 800ddc2:	461c      	movlt	r4, r3
 800ddc4:	2501      	movlt	r5, #1
 800ddc6:	2500      	movge	r5, #0
 800ddc8:	f7ff fcf8 	bl	800d7bc <_Balloc>
 800ddcc:	4602      	mov	r2, r0
 800ddce:	b918      	cbnz	r0, 800ddd8 <__mdiff+0x60>
 800ddd0:	f240 2145 	movw	r1, #581	@ 0x245
 800ddd4:	4b30      	ldr	r3, [pc, #192]	@ (800de98 <__mdiff+0x120>)
 800ddd6:	e7e3      	b.n	800dda0 <__mdiff+0x28>
 800ddd8:	f100 0b14 	add.w	fp, r0, #20
 800dddc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dde0:	f109 0310 	add.w	r3, r9, #16
 800dde4:	60c5      	str	r5, [r0, #12]
 800dde6:	f04f 0c00 	mov.w	ip, #0
 800ddea:	f109 0514 	add.w	r5, r9, #20
 800ddee:	46d9      	mov	r9, fp
 800ddf0:	6926      	ldr	r6, [r4, #16]
 800ddf2:	f104 0e14 	add.w	lr, r4, #20
 800ddf6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ddfa:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ddfe:	9301      	str	r3, [sp, #4]
 800de00:	9b01      	ldr	r3, [sp, #4]
 800de02:	f85e 0b04 	ldr.w	r0, [lr], #4
 800de06:	f853 af04 	ldr.w	sl, [r3, #4]!
 800de0a:	b281      	uxth	r1, r0
 800de0c:	9301      	str	r3, [sp, #4]
 800de0e:	fa1f f38a 	uxth.w	r3, sl
 800de12:	1a5b      	subs	r3, r3, r1
 800de14:	0c00      	lsrs	r0, r0, #16
 800de16:	4463      	add	r3, ip
 800de18:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800de1c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800de20:	b29b      	uxth	r3, r3
 800de22:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800de26:	4576      	cmp	r6, lr
 800de28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800de2c:	f849 3b04 	str.w	r3, [r9], #4
 800de30:	d8e6      	bhi.n	800de00 <__mdiff+0x88>
 800de32:	1b33      	subs	r3, r6, r4
 800de34:	3b15      	subs	r3, #21
 800de36:	f023 0303 	bic.w	r3, r3, #3
 800de3a:	3415      	adds	r4, #21
 800de3c:	3304      	adds	r3, #4
 800de3e:	42a6      	cmp	r6, r4
 800de40:	bf38      	it	cc
 800de42:	2304      	movcc	r3, #4
 800de44:	441d      	add	r5, r3
 800de46:	445b      	add	r3, fp
 800de48:	461e      	mov	r6, r3
 800de4a:	462c      	mov	r4, r5
 800de4c:	4544      	cmp	r4, r8
 800de4e:	d30e      	bcc.n	800de6e <__mdiff+0xf6>
 800de50:	f108 0103 	add.w	r1, r8, #3
 800de54:	1b49      	subs	r1, r1, r5
 800de56:	f021 0103 	bic.w	r1, r1, #3
 800de5a:	3d03      	subs	r5, #3
 800de5c:	45a8      	cmp	r8, r5
 800de5e:	bf38      	it	cc
 800de60:	2100      	movcc	r1, #0
 800de62:	440b      	add	r3, r1
 800de64:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800de68:	b199      	cbz	r1, 800de92 <__mdiff+0x11a>
 800de6a:	6117      	str	r7, [r2, #16]
 800de6c:	e79e      	b.n	800ddac <__mdiff+0x34>
 800de6e:	46e6      	mov	lr, ip
 800de70:	f854 1b04 	ldr.w	r1, [r4], #4
 800de74:	fa1f fc81 	uxth.w	ip, r1
 800de78:	44f4      	add	ip, lr
 800de7a:	0c08      	lsrs	r0, r1, #16
 800de7c:	4471      	add	r1, lr
 800de7e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800de82:	b289      	uxth	r1, r1
 800de84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800de88:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800de8c:	f846 1b04 	str.w	r1, [r6], #4
 800de90:	e7dc      	b.n	800de4c <__mdiff+0xd4>
 800de92:	3f01      	subs	r7, #1
 800de94:	e7e6      	b.n	800de64 <__mdiff+0xec>
 800de96:	bf00      	nop
 800de98:	0800ef7b 	.word	0x0800ef7b
 800de9c:	0800efec 	.word	0x0800efec

0800dea0 <__ulp>:
 800dea0:	4b0e      	ldr	r3, [pc, #56]	@ (800dedc <__ulp+0x3c>)
 800dea2:	400b      	ands	r3, r1
 800dea4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	dc08      	bgt.n	800debe <__ulp+0x1e>
 800deac:	425b      	negs	r3, r3
 800deae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800deb2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800deb6:	da04      	bge.n	800dec2 <__ulp+0x22>
 800deb8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800debc:	4113      	asrs	r3, r2
 800debe:	2200      	movs	r2, #0
 800dec0:	e008      	b.n	800ded4 <__ulp+0x34>
 800dec2:	f1a2 0314 	sub.w	r3, r2, #20
 800dec6:	2b1e      	cmp	r3, #30
 800dec8:	bfd6      	itet	le
 800deca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800dece:	2201      	movgt	r2, #1
 800ded0:	40da      	lsrle	r2, r3
 800ded2:	2300      	movs	r3, #0
 800ded4:	4619      	mov	r1, r3
 800ded6:	4610      	mov	r0, r2
 800ded8:	4770      	bx	lr
 800deda:	bf00      	nop
 800dedc:	7ff00000 	.word	0x7ff00000

0800dee0 <__b2d>:
 800dee0:	6902      	ldr	r2, [r0, #16]
 800dee2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dee4:	f100 0614 	add.w	r6, r0, #20
 800dee8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800deec:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800def0:	4f1e      	ldr	r7, [pc, #120]	@ (800df6c <__b2d+0x8c>)
 800def2:	4620      	mov	r0, r4
 800def4:	f7ff fd54 	bl	800d9a0 <__hi0bits>
 800def8:	4603      	mov	r3, r0
 800defa:	f1c0 0020 	rsb	r0, r0, #32
 800defe:	2b0a      	cmp	r3, #10
 800df00:	f1a2 0504 	sub.w	r5, r2, #4
 800df04:	6008      	str	r0, [r1, #0]
 800df06:	dc12      	bgt.n	800df2e <__b2d+0x4e>
 800df08:	42ae      	cmp	r6, r5
 800df0a:	bf2c      	ite	cs
 800df0c:	2200      	movcs	r2, #0
 800df0e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800df12:	f1c3 0c0b 	rsb	ip, r3, #11
 800df16:	3315      	adds	r3, #21
 800df18:	fa24 fe0c 	lsr.w	lr, r4, ip
 800df1c:	fa04 f303 	lsl.w	r3, r4, r3
 800df20:	fa22 f20c 	lsr.w	r2, r2, ip
 800df24:	ea4e 0107 	orr.w	r1, lr, r7
 800df28:	431a      	orrs	r2, r3
 800df2a:	4610      	mov	r0, r2
 800df2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df2e:	42ae      	cmp	r6, r5
 800df30:	bf36      	itet	cc
 800df32:	f1a2 0508 	subcc.w	r5, r2, #8
 800df36:	2200      	movcs	r2, #0
 800df38:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800df3c:	3b0b      	subs	r3, #11
 800df3e:	d012      	beq.n	800df66 <__b2d+0x86>
 800df40:	f1c3 0720 	rsb	r7, r3, #32
 800df44:	fa22 f107 	lsr.w	r1, r2, r7
 800df48:	409c      	lsls	r4, r3
 800df4a:	430c      	orrs	r4, r1
 800df4c:	42b5      	cmp	r5, r6
 800df4e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800df52:	bf94      	ite	ls
 800df54:	2400      	movls	r4, #0
 800df56:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800df5a:	409a      	lsls	r2, r3
 800df5c:	40fc      	lsrs	r4, r7
 800df5e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800df62:	4322      	orrs	r2, r4
 800df64:	e7e1      	b.n	800df2a <__b2d+0x4a>
 800df66:	ea44 0107 	orr.w	r1, r4, r7
 800df6a:	e7de      	b.n	800df2a <__b2d+0x4a>
 800df6c:	3ff00000 	.word	0x3ff00000

0800df70 <__d2b>:
 800df70:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800df74:	2101      	movs	r1, #1
 800df76:	4690      	mov	r8, r2
 800df78:	4699      	mov	r9, r3
 800df7a:	9e08      	ldr	r6, [sp, #32]
 800df7c:	f7ff fc1e 	bl	800d7bc <_Balloc>
 800df80:	4604      	mov	r4, r0
 800df82:	b930      	cbnz	r0, 800df92 <__d2b+0x22>
 800df84:	4602      	mov	r2, r0
 800df86:	f240 310f 	movw	r1, #783	@ 0x30f
 800df8a:	4b23      	ldr	r3, [pc, #140]	@ (800e018 <__d2b+0xa8>)
 800df8c:	4823      	ldr	r0, [pc, #140]	@ (800e01c <__d2b+0xac>)
 800df8e:	f7fe f95b 	bl	800c248 <__assert_func>
 800df92:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800df96:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800df9a:	b10d      	cbz	r5, 800dfa0 <__d2b+0x30>
 800df9c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dfa0:	9301      	str	r3, [sp, #4]
 800dfa2:	f1b8 0300 	subs.w	r3, r8, #0
 800dfa6:	d024      	beq.n	800dff2 <__d2b+0x82>
 800dfa8:	4668      	mov	r0, sp
 800dfaa:	9300      	str	r3, [sp, #0]
 800dfac:	f7ff fd17 	bl	800d9de <__lo0bits>
 800dfb0:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dfb4:	b1d8      	cbz	r0, 800dfee <__d2b+0x7e>
 800dfb6:	f1c0 0320 	rsb	r3, r0, #32
 800dfba:	fa02 f303 	lsl.w	r3, r2, r3
 800dfbe:	430b      	orrs	r3, r1
 800dfc0:	40c2      	lsrs	r2, r0
 800dfc2:	6163      	str	r3, [r4, #20]
 800dfc4:	9201      	str	r2, [sp, #4]
 800dfc6:	9b01      	ldr	r3, [sp, #4]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	bf0c      	ite	eq
 800dfcc:	2201      	moveq	r2, #1
 800dfce:	2202      	movne	r2, #2
 800dfd0:	61a3      	str	r3, [r4, #24]
 800dfd2:	6122      	str	r2, [r4, #16]
 800dfd4:	b1ad      	cbz	r5, 800e002 <__d2b+0x92>
 800dfd6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800dfda:	4405      	add	r5, r0
 800dfdc:	6035      	str	r5, [r6, #0]
 800dfde:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800dfe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfe4:	6018      	str	r0, [r3, #0]
 800dfe6:	4620      	mov	r0, r4
 800dfe8:	b002      	add	sp, #8
 800dfea:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800dfee:	6161      	str	r1, [r4, #20]
 800dff0:	e7e9      	b.n	800dfc6 <__d2b+0x56>
 800dff2:	a801      	add	r0, sp, #4
 800dff4:	f7ff fcf3 	bl	800d9de <__lo0bits>
 800dff8:	9b01      	ldr	r3, [sp, #4]
 800dffa:	2201      	movs	r2, #1
 800dffc:	6163      	str	r3, [r4, #20]
 800dffe:	3020      	adds	r0, #32
 800e000:	e7e7      	b.n	800dfd2 <__d2b+0x62>
 800e002:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e006:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e00a:	6030      	str	r0, [r6, #0]
 800e00c:	6918      	ldr	r0, [r3, #16]
 800e00e:	f7ff fcc7 	bl	800d9a0 <__hi0bits>
 800e012:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e016:	e7e4      	b.n	800dfe2 <__d2b+0x72>
 800e018:	0800ef7b 	.word	0x0800ef7b
 800e01c:	0800efec 	.word	0x0800efec

0800e020 <__ratio>:
 800e020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e024:	b085      	sub	sp, #20
 800e026:	e9cd 1000 	strd	r1, r0, [sp]
 800e02a:	a902      	add	r1, sp, #8
 800e02c:	f7ff ff58 	bl	800dee0 <__b2d>
 800e030:	468b      	mov	fp, r1
 800e032:	4606      	mov	r6, r0
 800e034:	460f      	mov	r7, r1
 800e036:	9800      	ldr	r0, [sp, #0]
 800e038:	a903      	add	r1, sp, #12
 800e03a:	f7ff ff51 	bl	800dee0 <__b2d>
 800e03e:	460d      	mov	r5, r1
 800e040:	9b01      	ldr	r3, [sp, #4]
 800e042:	4689      	mov	r9, r1
 800e044:	6919      	ldr	r1, [r3, #16]
 800e046:	9b00      	ldr	r3, [sp, #0]
 800e048:	4604      	mov	r4, r0
 800e04a:	691b      	ldr	r3, [r3, #16]
 800e04c:	4630      	mov	r0, r6
 800e04e:	1ac9      	subs	r1, r1, r3
 800e050:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e054:	1a9b      	subs	r3, r3, r2
 800e056:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	bfcd      	iteet	gt
 800e05e:	463a      	movgt	r2, r7
 800e060:	462a      	movle	r2, r5
 800e062:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e066:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800e06a:	bfd8      	it	le
 800e06c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e070:	464b      	mov	r3, r9
 800e072:	4622      	mov	r2, r4
 800e074:	4659      	mov	r1, fp
 800e076:	f7f2 fb59 	bl	800072c <__aeabi_ddiv>
 800e07a:	b005      	add	sp, #20
 800e07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e080 <__copybits>:
 800e080:	3901      	subs	r1, #1
 800e082:	b570      	push	{r4, r5, r6, lr}
 800e084:	1149      	asrs	r1, r1, #5
 800e086:	6914      	ldr	r4, [r2, #16]
 800e088:	3101      	adds	r1, #1
 800e08a:	f102 0314 	add.w	r3, r2, #20
 800e08e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e092:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e096:	1f05      	subs	r5, r0, #4
 800e098:	42a3      	cmp	r3, r4
 800e09a:	d30c      	bcc.n	800e0b6 <__copybits+0x36>
 800e09c:	1aa3      	subs	r3, r4, r2
 800e09e:	3b11      	subs	r3, #17
 800e0a0:	f023 0303 	bic.w	r3, r3, #3
 800e0a4:	3211      	adds	r2, #17
 800e0a6:	42a2      	cmp	r2, r4
 800e0a8:	bf88      	it	hi
 800e0aa:	2300      	movhi	r3, #0
 800e0ac:	4418      	add	r0, r3
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	4288      	cmp	r0, r1
 800e0b2:	d305      	bcc.n	800e0c0 <__copybits+0x40>
 800e0b4:	bd70      	pop	{r4, r5, r6, pc}
 800e0b6:	f853 6b04 	ldr.w	r6, [r3], #4
 800e0ba:	f845 6f04 	str.w	r6, [r5, #4]!
 800e0be:	e7eb      	b.n	800e098 <__copybits+0x18>
 800e0c0:	f840 3b04 	str.w	r3, [r0], #4
 800e0c4:	e7f4      	b.n	800e0b0 <__copybits+0x30>

0800e0c6 <__any_on>:
 800e0c6:	f100 0214 	add.w	r2, r0, #20
 800e0ca:	6900      	ldr	r0, [r0, #16]
 800e0cc:	114b      	asrs	r3, r1, #5
 800e0ce:	4298      	cmp	r0, r3
 800e0d0:	b510      	push	{r4, lr}
 800e0d2:	db11      	blt.n	800e0f8 <__any_on+0x32>
 800e0d4:	dd0a      	ble.n	800e0ec <__any_on+0x26>
 800e0d6:	f011 011f 	ands.w	r1, r1, #31
 800e0da:	d007      	beq.n	800e0ec <__any_on+0x26>
 800e0dc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e0e0:	fa24 f001 	lsr.w	r0, r4, r1
 800e0e4:	fa00 f101 	lsl.w	r1, r0, r1
 800e0e8:	428c      	cmp	r4, r1
 800e0ea:	d10b      	bne.n	800e104 <__any_on+0x3e>
 800e0ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e0f0:	4293      	cmp	r3, r2
 800e0f2:	d803      	bhi.n	800e0fc <__any_on+0x36>
 800e0f4:	2000      	movs	r0, #0
 800e0f6:	bd10      	pop	{r4, pc}
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	e7f7      	b.n	800e0ec <__any_on+0x26>
 800e0fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e100:	2900      	cmp	r1, #0
 800e102:	d0f5      	beq.n	800e0f0 <__any_on+0x2a>
 800e104:	2001      	movs	r0, #1
 800e106:	e7f6      	b.n	800e0f6 <__any_on+0x30>

0800e108 <_strtol_l.constprop.0>:
 800e108:	2b24      	cmp	r3, #36	@ 0x24
 800e10a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e10e:	4686      	mov	lr, r0
 800e110:	4690      	mov	r8, r2
 800e112:	d801      	bhi.n	800e118 <_strtol_l.constprop.0+0x10>
 800e114:	2b01      	cmp	r3, #1
 800e116:	d106      	bne.n	800e126 <_strtol_l.constprop.0+0x1e>
 800e118:	f7fe f842 	bl	800c1a0 <__errno>
 800e11c:	2316      	movs	r3, #22
 800e11e:	6003      	str	r3, [r0, #0]
 800e120:	2000      	movs	r0, #0
 800e122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e126:	460d      	mov	r5, r1
 800e128:	4833      	ldr	r0, [pc, #204]	@ (800e1f8 <_strtol_l.constprop.0+0xf0>)
 800e12a:	462a      	mov	r2, r5
 800e12c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e130:	5d06      	ldrb	r6, [r0, r4]
 800e132:	f016 0608 	ands.w	r6, r6, #8
 800e136:	d1f8      	bne.n	800e12a <_strtol_l.constprop.0+0x22>
 800e138:	2c2d      	cmp	r4, #45	@ 0x2d
 800e13a:	d12d      	bne.n	800e198 <_strtol_l.constprop.0+0x90>
 800e13c:	2601      	movs	r6, #1
 800e13e:	782c      	ldrb	r4, [r5, #0]
 800e140:	1c95      	adds	r5, r2, #2
 800e142:	f033 0210 	bics.w	r2, r3, #16
 800e146:	d109      	bne.n	800e15c <_strtol_l.constprop.0+0x54>
 800e148:	2c30      	cmp	r4, #48	@ 0x30
 800e14a:	d12a      	bne.n	800e1a2 <_strtol_l.constprop.0+0x9a>
 800e14c:	782a      	ldrb	r2, [r5, #0]
 800e14e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e152:	2a58      	cmp	r2, #88	@ 0x58
 800e154:	d125      	bne.n	800e1a2 <_strtol_l.constprop.0+0x9a>
 800e156:	2310      	movs	r3, #16
 800e158:	786c      	ldrb	r4, [r5, #1]
 800e15a:	3502      	adds	r5, #2
 800e15c:	2200      	movs	r2, #0
 800e15e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e162:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e166:	fbbc f9f3 	udiv	r9, ip, r3
 800e16a:	4610      	mov	r0, r2
 800e16c:	fb03 ca19 	mls	sl, r3, r9, ip
 800e170:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e174:	2f09      	cmp	r7, #9
 800e176:	d81b      	bhi.n	800e1b0 <_strtol_l.constprop.0+0xa8>
 800e178:	463c      	mov	r4, r7
 800e17a:	42a3      	cmp	r3, r4
 800e17c:	dd27      	ble.n	800e1ce <_strtol_l.constprop.0+0xc6>
 800e17e:	1c57      	adds	r7, r2, #1
 800e180:	d007      	beq.n	800e192 <_strtol_l.constprop.0+0x8a>
 800e182:	4581      	cmp	r9, r0
 800e184:	d320      	bcc.n	800e1c8 <_strtol_l.constprop.0+0xc0>
 800e186:	d101      	bne.n	800e18c <_strtol_l.constprop.0+0x84>
 800e188:	45a2      	cmp	sl, r4
 800e18a:	db1d      	blt.n	800e1c8 <_strtol_l.constprop.0+0xc0>
 800e18c:	2201      	movs	r2, #1
 800e18e:	fb00 4003 	mla	r0, r0, r3, r4
 800e192:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e196:	e7eb      	b.n	800e170 <_strtol_l.constprop.0+0x68>
 800e198:	2c2b      	cmp	r4, #43	@ 0x2b
 800e19a:	bf04      	itt	eq
 800e19c:	782c      	ldrbeq	r4, [r5, #0]
 800e19e:	1c95      	addeq	r5, r2, #2
 800e1a0:	e7cf      	b.n	800e142 <_strtol_l.constprop.0+0x3a>
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d1da      	bne.n	800e15c <_strtol_l.constprop.0+0x54>
 800e1a6:	2c30      	cmp	r4, #48	@ 0x30
 800e1a8:	bf0c      	ite	eq
 800e1aa:	2308      	moveq	r3, #8
 800e1ac:	230a      	movne	r3, #10
 800e1ae:	e7d5      	b.n	800e15c <_strtol_l.constprop.0+0x54>
 800e1b0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e1b4:	2f19      	cmp	r7, #25
 800e1b6:	d801      	bhi.n	800e1bc <_strtol_l.constprop.0+0xb4>
 800e1b8:	3c37      	subs	r4, #55	@ 0x37
 800e1ba:	e7de      	b.n	800e17a <_strtol_l.constprop.0+0x72>
 800e1bc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e1c0:	2f19      	cmp	r7, #25
 800e1c2:	d804      	bhi.n	800e1ce <_strtol_l.constprop.0+0xc6>
 800e1c4:	3c57      	subs	r4, #87	@ 0x57
 800e1c6:	e7d8      	b.n	800e17a <_strtol_l.constprop.0+0x72>
 800e1c8:	f04f 32ff 	mov.w	r2, #4294967295
 800e1cc:	e7e1      	b.n	800e192 <_strtol_l.constprop.0+0x8a>
 800e1ce:	1c53      	adds	r3, r2, #1
 800e1d0:	d108      	bne.n	800e1e4 <_strtol_l.constprop.0+0xdc>
 800e1d2:	2322      	movs	r3, #34	@ 0x22
 800e1d4:	4660      	mov	r0, ip
 800e1d6:	f8ce 3000 	str.w	r3, [lr]
 800e1da:	f1b8 0f00 	cmp.w	r8, #0
 800e1de:	d0a0      	beq.n	800e122 <_strtol_l.constprop.0+0x1a>
 800e1e0:	1e69      	subs	r1, r5, #1
 800e1e2:	e006      	b.n	800e1f2 <_strtol_l.constprop.0+0xea>
 800e1e4:	b106      	cbz	r6, 800e1e8 <_strtol_l.constprop.0+0xe0>
 800e1e6:	4240      	negs	r0, r0
 800e1e8:	f1b8 0f00 	cmp.w	r8, #0
 800e1ec:	d099      	beq.n	800e122 <_strtol_l.constprop.0+0x1a>
 800e1ee:	2a00      	cmp	r2, #0
 800e1f0:	d1f6      	bne.n	800e1e0 <_strtol_l.constprop.0+0xd8>
 800e1f2:	f8c8 1000 	str.w	r1, [r8]
 800e1f6:	e794      	b.n	800e122 <_strtol_l.constprop.0+0x1a>
 800e1f8:	0800f149 	.word	0x0800f149

0800e1fc <_strtol_r>:
 800e1fc:	f7ff bf84 	b.w	800e108 <_strtol_l.constprop.0>

0800e200 <__ascii_wctomb>:
 800e200:	4603      	mov	r3, r0
 800e202:	4608      	mov	r0, r1
 800e204:	b141      	cbz	r1, 800e218 <__ascii_wctomb+0x18>
 800e206:	2aff      	cmp	r2, #255	@ 0xff
 800e208:	d904      	bls.n	800e214 <__ascii_wctomb+0x14>
 800e20a:	228a      	movs	r2, #138	@ 0x8a
 800e20c:	f04f 30ff 	mov.w	r0, #4294967295
 800e210:	601a      	str	r2, [r3, #0]
 800e212:	4770      	bx	lr
 800e214:	2001      	movs	r0, #1
 800e216:	700a      	strb	r2, [r1, #0]
 800e218:	4770      	bx	lr

0800e21a <__ssputs_r>:
 800e21a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e21e:	461f      	mov	r7, r3
 800e220:	688e      	ldr	r6, [r1, #8]
 800e222:	4682      	mov	sl, r0
 800e224:	42be      	cmp	r6, r7
 800e226:	460c      	mov	r4, r1
 800e228:	4690      	mov	r8, r2
 800e22a:	680b      	ldr	r3, [r1, #0]
 800e22c:	d82d      	bhi.n	800e28a <__ssputs_r+0x70>
 800e22e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e232:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e236:	d026      	beq.n	800e286 <__ssputs_r+0x6c>
 800e238:	6965      	ldr	r5, [r4, #20]
 800e23a:	6909      	ldr	r1, [r1, #16]
 800e23c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e240:	eba3 0901 	sub.w	r9, r3, r1
 800e244:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e248:	1c7b      	adds	r3, r7, #1
 800e24a:	444b      	add	r3, r9
 800e24c:	106d      	asrs	r5, r5, #1
 800e24e:	429d      	cmp	r5, r3
 800e250:	bf38      	it	cc
 800e252:	461d      	movcc	r5, r3
 800e254:	0553      	lsls	r3, r2, #21
 800e256:	d527      	bpl.n	800e2a8 <__ssputs_r+0x8e>
 800e258:	4629      	mov	r1, r5
 800e25a:	f7ff fa11 	bl	800d680 <_malloc_r>
 800e25e:	4606      	mov	r6, r0
 800e260:	b360      	cbz	r0, 800e2bc <__ssputs_r+0xa2>
 800e262:	464a      	mov	r2, r9
 800e264:	6921      	ldr	r1, [r4, #16]
 800e266:	f7fd ffd6 	bl	800c216 <memcpy>
 800e26a:	89a3      	ldrh	r3, [r4, #12]
 800e26c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e270:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e274:	81a3      	strh	r3, [r4, #12]
 800e276:	6126      	str	r6, [r4, #16]
 800e278:	444e      	add	r6, r9
 800e27a:	6026      	str	r6, [r4, #0]
 800e27c:	463e      	mov	r6, r7
 800e27e:	6165      	str	r5, [r4, #20]
 800e280:	eba5 0509 	sub.w	r5, r5, r9
 800e284:	60a5      	str	r5, [r4, #8]
 800e286:	42be      	cmp	r6, r7
 800e288:	d900      	bls.n	800e28c <__ssputs_r+0x72>
 800e28a:	463e      	mov	r6, r7
 800e28c:	4632      	mov	r2, r6
 800e28e:	4641      	mov	r1, r8
 800e290:	6820      	ldr	r0, [r4, #0]
 800e292:	f000 f9d3 	bl	800e63c <memmove>
 800e296:	2000      	movs	r0, #0
 800e298:	68a3      	ldr	r3, [r4, #8]
 800e29a:	1b9b      	subs	r3, r3, r6
 800e29c:	60a3      	str	r3, [r4, #8]
 800e29e:	6823      	ldr	r3, [r4, #0]
 800e2a0:	4433      	add	r3, r6
 800e2a2:	6023      	str	r3, [r4, #0]
 800e2a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2a8:	462a      	mov	r2, r5
 800e2aa:	f000 fa0c 	bl	800e6c6 <_realloc_r>
 800e2ae:	4606      	mov	r6, r0
 800e2b0:	2800      	cmp	r0, #0
 800e2b2:	d1e0      	bne.n	800e276 <__ssputs_r+0x5c>
 800e2b4:	4650      	mov	r0, sl
 800e2b6:	6921      	ldr	r1, [r4, #16]
 800e2b8:	f7fe fe36 	bl	800cf28 <_free_r>
 800e2bc:	230c      	movs	r3, #12
 800e2be:	f8ca 3000 	str.w	r3, [sl]
 800e2c2:	89a3      	ldrh	r3, [r4, #12]
 800e2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e2c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e2cc:	81a3      	strh	r3, [r4, #12]
 800e2ce:	e7e9      	b.n	800e2a4 <__ssputs_r+0x8a>

0800e2d0 <_svfiprintf_r>:
 800e2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2d4:	4698      	mov	r8, r3
 800e2d6:	898b      	ldrh	r3, [r1, #12]
 800e2d8:	4607      	mov	r7, r0
 800e2da:	061b      	lsls	r3, r3, #24
 800e2dc:	460d      	mov	r5, r1
 800e2de:	4614      	mov	r4, r2
 800e2e0:	b09d      	sub	sp, #116	@ 0x74
 800e2e2:	d510      	bpl.n	800e306 <_svfiprintf_r+0x36>
 800e2e4:	690b      	ldr	r3, [r1, #16]
 800e2e6:	b973      	cbnz	r3, 800e306 <_svfiprintf_r+0x36>
 800e2e8:	2140      	movs	r1, #64	@ 0x40
 800e2ea:	f7ff f9c9 	bl	800d680 <_malloc_r>
 800e2ee:	6028      	str	r0, [r5, #0]
 800e2f0:	6128      	str	r0, [r5, #16]
 800e2f2:	b930      	cbnz	r0, 800e302 <_svfiprintf_r+0x32>
 800e2f4:	230c      	movs	r3, #12
 800e2f6:	603b      	str	r3, [r7, #0]
 800e2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e2fc:	b01d      	add	sp, #116	@ 0x74
 800e2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e302:	2340      	movs	r3, #64	@ 0x40
 800e304:	616b      	str	r3, [r5, #20]
 800e306:	2300      	movs	r3, #0
 800e308:	9309      	str	r3, [sp, #36]	@ 0x24
 800e30a:	2320      	movs	r3, #32
 800e30c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e310:	2330      	movs	r3, #48	@ 0x30
 800e312:	f04f 0901 	mov.w	r9, #1
 800e316:	f8cd 800c 	str.w	r8, [sp, #12]
 800e31a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800e4b4 <_svfiprintf_r+0x1e4>
 800e31e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e322:	4623      	mov	r3, r4
 800e324:	469a      	mov	sl, r3
 800e326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e32a:	b10a      	cbz	r2, 800e330 <_svfiprintf_r+0x60>
 800e32c:	2a25      	cmp	r2, #37	@ 0x25
 800e32e:	d1f9      	bne.n	800e324 <_svfiprintf_r+0x54>
 800e330:	ebba 0b04 	subs.w	fp, sl, r4
 800e334:	d00b      	beq.n	800e34e <_svfiprintf_r+0x7e>
 800e336:	465b      	mov	r3, fp
 800e338:	4622      	mov	r2, r4
 800e33a:	4629      	mov	r1, r5
 800e33c:	4638      	mov	r0, r7
 800e33e:	f7ff ff6c 	bl	800e21a <__ssputs_r>
 800e342:	3001      	adds	r0, #1
 800e344:	f000 80a7 	beq.w	800e496 <_svfiprintf_r+0x1c6>
 800e348:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e34a:	445a      	add	r2, fp
 800e34c:	9209      	str	r2, [sp, #36]	@ 0x24
 800e34e:	f89a 3000 	ldrb.w	r3, [sl]
 800e352:	2b00      	cmp	r3, #0
 800e354:	f000 809f 	beq.w	800e496 <_svfiprintf_r+0x1c6>
 800e358:	2300      	movs	r3, #0
 800e35a:	f04f 32ff 	mov.w	r2, #4294967295
 800e35e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e362:	f10a 0a01 	add.w	sl, sl, #1
 800e366:	9304      	str	r3, [sp, #16]
 800e368:	9307      	str	r3, [sp, #28]
 800e36a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e36e:	931a      	str	r3, [sp, #104]	@ 0x68
 800e370:	4654      	mov	r4, sl
 800e372:	2205      	movs	r2, #5
 800e374:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e378:	484e      	ldr	r0, [pc, #312]	@ (800e4b4 <_svfiprintf_r+0x1e4>)
 800e37a:	f7fd ff3e 	bl	800c1fa <memchr>
 800e37e:	9a04      	ldr	r2, [sp, #16]
 800e380:	b9d8      	cbnz	r0, 800e3ba <_svfiprintf_r+0xea>
 800e382:	06d0      	lsls	r0, r2, #27
 800e384:	bf44      	itt	mi
 800e386:	2320      	movmi	r3, #32
 800e388:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e38c:	0711      	lsls	r1, r2, #28
 800e38e:	bf44      	itt	mi
 800e390:	232b      	movmi	r3, #43	@ 0x2b
 800e392:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e396:	f89a 3000 	ldrb.w	r3, [sl]
 800e39a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e39c:	d015      	beq.n	800e3ca <_svfiprintf_r+0xfa>
 800e39e:	4654      	mov	r4, sl
 800e3a0:	2000      	movs	r0, #0
 800e3a2:	f04f 0c0a 	mov.w	ip, #10
 800e3a6:	9a07      	ldr	r2, [sp, #28]
 800e3a8:	4621      	mov	r1, r4
 800e3aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3ae:	3b30      	subs	r3, #48	@ 0x30
 800e3b0:	2b09      	cmp	r3, #9
 800e3b2:	d94b      	bls.n	800e44c <_svfiprintf_r+0x17c>
 800e3b4:	b1b0      	cbz	r0, 800e3e4 <_svfiprintf_r+0x114>
 800e3b6:	9207      	str	r2, [sp, #28]
 800e3b8:	e014      	b.n	800e3e4 <_svfiprintf_r+0x114>
 800e3ba:	eba0 0308 	sub.w	r3, r0, r8
 800e3be:	fa09 f303 	lsl.w	r3, r9, r3
 800e3c2:	4313      	orrs	r3, r2
 800e3c4:	46a2      	mov	sl, r4
 800e3c6:	9304      	str	r3, [sp, #16]
 800e3c8:	e7d2      	b.n	800e370 <_svfiprintf_r+0xa0>
 800e3ca:	9b03      	ldr	r3, [sp, #12]
 800e3cc:	1d19      	adds	r1, r3, #4
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	9103      	str	r1, [sp, #12]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	bfbb      	ittet	lt
 800e3d6:	425b      	neglt	r3, r3
 800e3d8:	f042 0202 	orrlt.w	r2, r2, #2
 800e3dc:	9307      	strge	r3, [sp, #28]
 800e3de:	9307      	strlt	r3, [sp, #28]
 800e3e0:	bfb8      	it	lt
 800e3e2:	9204      	strlt	r2, [sp, #16]
 800e3e4:	7823      	ldrb	r3, [r4, #0]
 800e3e6:	2b2e      	cmp	r3, #46	@ 0x2e
 800e3e8:	d10a      	bne.n	800e400 <_svfiprintf_r+0x130>
 800e3ea:	7863      	ldrb	r3, [r4, #1]
 800e3ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800e3ee:	d132      	bne.n	800e456 <_svfiprintf_r+0x186>
 800e3f0:	9b03      	ldr	r3, [sp, #12]
 800e3f2:	3402      	adds	r4, #2
 800e3f4:	1d1a      	adds	r2, r3, #4
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	9203      	str	r2, [sp, #12]
 800e3fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e3fe:	9305      	str	r3, [sp, #20]
 800e400:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800e4b8 <_svfiprintf_r+0x1e8>
 800e404:	2203      	movs	r2, #3
 800e406:	4650      	mov	r0, sl
 800e408:	7821      	ldrb	r1, [r4, #0]
 800e40a:	f7fd fef6 	bl	800c1fa <memchr>
 800e40e:	b138      	cbz	r0, 800e420 <_svfiprintf_r+0x150>
 800e410:	2240      	movs	r2, #64	@ 0x40
 800e412:	9b04      	ldr	r3, [sp, #16]
 800e414:	eba0 000a 	sub.w	r0, r0, sl
 800e418:	4082      	lsls	r2, r0
 800e41a:	4313      	orrs	r3, r2
 800e41c:	3401      	adds	r4, #1
 800e41e:	9304      	str	r3, [sp, #16]
 800e420:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e424:	2206      	movs	r2, #6
 800e426:	4825      	ldr	r0, [pc, #148]	@ (800e4bc <_svfiprintf_r+0x1ec>)
 800e428:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e42c:	f7fd fee5 	bl	800c1fa <memchr>
 800e430:	2800      	cmp	r0, #0
 800e432:	d036      	beq.n	800e4a2 <_svfiprintf_r+0x1d2>
 800e434:	4b22      	ldr	r3, [pc, #136]	@ (800e4c0 <_svfiprintf_r+0x1f0>)
 800e436:	bb1b      	cbnz	r3, 800e480 <_svfiprintf_r+0x1b0>
 800e438:	9b03      	ldr	r3, [sp, #12]
 800e43a:	3307      	adds	r3, #7
 800e43c:	f023 0307 	bic.w	r3, r3, #7
 800e440:	3308      	adds	r3, #8
 800e442:	9303      	str	r3, [sp, #12]
 800e444:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e446:	4433      	add	r3, r6
 800e448:	9309      	str	r3, [sp, #36]	@ 0x24
 800e44a:	e76a      	b.n	800e322 <_svfiprintf_r+0x52>
 800e44c:	460c      	mov	r4, r1
 800e44e:	2001      	movs	r0, #1
 800e450:	fb0c 3202 	mla	r2, ip, r2, r3
 800e454:	e7a8      	b.n	800e3a8 <_svfiprintf_r+0xd8>
 800e456:	2300      	movs	r3, #0
 800e458:	f04f 0c0a 	mov.w	ip, #10
 800e45c:	4619      	mov	r1, r3
 800e45e:	3401      	adds	r4, #1
 800e460:	9305      	str	r3, [sp, #20]
 800e462:	4620      	mov	r0, r4
 800e464:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e468:	3a30      	subs	r2, #48	@ 0x30
 800e46a:	2a09      	cmp	r2, #9
 800e46c:	d903      	bls.n	800e476 <_svfiprintf_r+0x1a6>
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d0c6      	beq.n	800e400 <_svfiprintf_r+0x130>
 800e472:	9105      	str	r1, [sp, #20]
 800e474:	e7c4      	b.n	800e400 <_svfiprintf_r+0x130>
 800e476:	4604      	mov	r4, r0
 800e478:	2301      	movs	r3, #1
 800e47a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e47e:	e7f0      	b.n	800e462 <_svfiprintf_r+0x192>
 800e480:	ab03      	add	r3, sp, #12
 800e482:	9300      	str	r3, [sp, #0]
 800e484:	462a      	mov	r2, r5
 800e486:	4638      	mov	r0, r7
 800e488:	4b0e      	ldr	r3, [pc, #56]	@ (800e4c4 <_svfiprintf_r+0x1f4>)
 800e48a:	a904      	add	r1, sp, #16
 800e48c:	f7fc fed4 	bl	800b238 <_printf_float>
 800e490:	1c42      	adds	r2, r0, #1
 800e492:	4606      	mov	r6, r0
 800e494:	d1d6      	bne.n	800e444 <_svfiprintf_r+0x174>
 800e496:	89ab      	ldrh	r3, [r5, #12]
 800e498:	065b      	lsls	r3, r3, #25
 800e49a:	f53f af2d 	bmi.w	800e2f8 <_svfiprintf_r+0x28>
 800e49e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e4a0:	e72c      	b.n	800e2fc <_svfiprintf_r+0x2c>
 800e4a2:	ab03      	add	r3, sp, #12
 800e4a4:	9300      	str	r3, [sp, #0]
 800e4a6:	462a      	mov	r2, r5
 800e4a8:	4638      	mov	r0, r7
 800e4aa:	4b06      	ldr	r3, [pc, #24]	@ (800e4c4 <_svfiprintf_r+0x1f4>)
 800e4ac:	a904      	add	r1, sp, #16
 800e4ae:	f7fd f961 	bl	800b774 <_printf_i>
 800e4b2:	e7ed      	b.n	800e490 <_svfiprintf_r+0x1c0>
 800e4b4:	0800f249 	.word	0x0800f249
 800e4b8:	0800f24f 	.word	0x0800f24f
 800e4bc:	0800f253 	.word	0x0800f253
 800e4c0:	0800b239 	.word	0x0800b239
 800e4c4:	0800e21b 	.word	0x0800e21b

0800e4c8 <__sflush_r>:
 800e4c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4ce:	0716      	lsls	r6, r2, #28
 800e4d0:	4605      	mov	r5, r0
 800e4d2:	460c      	mov	r4, r1
 800e4d4:	d454      	bmi.n	800e580 <__sflush_r+0xb8>
 800e4d6:	684b      	ldr	r3, [r1, #4]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	dc02      	bgt.n	800e4e2 <__sflush_r+0x1a>
 800e4dc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	dd48      	ble.n	800e574 <__sflush_r+0xac>
 800e4e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e4e4:	2e00      	cmp	r6, #0
 800e4e6:	d045      	beq.n	800e574 <__sflush_r+0xac>
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e4ee:	682f      	ldr	r7, [r5, #0]
 800e4f0:	6a21      	ldr	r1, [r4, #32]
 800e4f2:	602b      	str	r3, [r5, #0]
 800e4f4:	d030      	beq.n	800e558 <__sflush_r+0x90>
 800e4f6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e4f8:	89a3      	ldrh	r3, [r4, #12]
 800e4fa:	0759      	lsls	r1, r3, #29
 800e4fc:	d505      	bpl.n	800e50a <__sflush_r+0x42>
 800e4fe:	6863      	ldr	r3, [r4, #4]
 800e500:	1ad2      	subs	r2, r2, r3
 800e502:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e504:	b10b      	cbz	r3, 800e50a <__sflush_r+0x42>
 800e506:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e508:	1ad2      	subs	r2, r2, r3
 800e50a:	2300      	movs	r3, #0
 800e50c:	4628      	mov	r0, r5
 800e50e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e510:	6a21      	ldr	r1, [r4, #32]
 800e512:	47b0      	blx	r6
 800e514:	1c43      	adds	r3, r0, #1
 800e516:	89a3      	ldrh	r3, [r4, #12]
 800e518:	d106      	bne.n	800e528 <__sflush_r+0x60>
 800e51a:	6829      	ldr	r1, [r5, #0]
 800e51c:	291d      	cmp	r1, #29
 800e51e:	d82b      	bhi.n	800e578 <__sflush_r+0xb0>
 800e520:	4a28      	ldr	r2, [pc, #160]	@ (800e5c4 <__sflush_r+0xfc>)
 800e522:	410a      	asrs	r2, r1
 800e524:	07d6      	lsls	r6, r2, #31
 800e526:	d427      	bmi.n	800e578 <__sflush_r+0xb0>
 800e528:	2200      	movs	r2, #0
 800e52a:	6062      	str	r2, [r4, #4]
 800e52c:	6922      	ldr	r2, [r4, #16]
 800e52e:	04d9      	lsls	r1, r3, #19
 800e530:	6022      	str	r2, [r4, #0]
 800e532:	d504      	bpl.n	800e53e <__sflush_r+0x76>
 800e534:	1c42      	adds	r2, r0, #1
 800e536:	d101      	bne.n	800e53c <__sflush_r+0x74>
 800e538:	682b      	ldr	r3, [r5, #0]
 800e53a:	b903      	cbnz	r3, 800e53e <__sflush_r+0x76>
 800e53c:	6560      	str	r0, [r4, #84]	@ 0x54
 800e53e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e540:	602f      	str	r7, [r5, #0]
 800e542:	b1b9      	cbz	r1, 800e574 <__sflush_r+0xac>
 800e544:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e548:	4299      	cmp	r1, r3
 800e54a:	d002      	beq.n	800e552 <__sflush_r+0x8a>
 800e54c:	4628      	mov	r0, r5
 800e54e:	f7fe fceb 	bl	800cf28 <_free_r>
 800e552:	2300      	movs	r3, #0
 800e554:	6363      	str	r3, [r4, #52]	@ 0x34
 800e556:	e00d      	b.n	800e574 <__sflush_r+0xac>
 800e558:	2301      	movs	r3, #1
 800e55a:	4628      	mov	r0, r5
 800e55c:	47b0      	blx	r6
 800e55e:	4602      	mov	r2, r0
 800e560:	1c50      	adds	r0, r2, #1
 800e562:	d1c9      	bne.n	800e4f8 <__sflush_r+0x30>
 800e564:	682b      	ldr	r3, [r5, #0]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d0c6      	beq.n	800e4f8 <__sflush_r+0x30>
 800e56a:	2b1d      	cmp	r3, #29
 800e56c:	d001      	beq.n	800e572 <__sflush_r+0xaa>
 800e56e:	2b16      	cmp	r3, #22
 800e570:	d11d      	bne.n	800e5ae <__sflush_r+0xe6>
 800e572:	602f      	str	r7, [r5, #0]
 800e574:	2000      	movs	r0, #0
 800e576:	e021      	b.n	800e5bc <__sflush_r+0xf4>
 800e578:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e57c:	b21b      	sxth	r3, r3
 800e57e:	e01a      	b.n	800e5b6 <__sflush_r+0xee>
 800e580:	690f      	ldr	r7, [r1, #16]
 800e582:	2f00      	cmp	r7, #0
 800e584:	d0f6      	beq.n	800e574 <__sflush_r+0xac>
 800e586:	0793      	lsls	r3, r2, #30
 800e588:	bf18      	it	ne
 800e58a:	2300      	movne	r3, #0
 800e58c:	680e      	ldr	r6, [r1, #0]
 800e58e:	bf08      	it	eq
 800e590:	694b      	ldreq	r3, [r1, #20]
 800e592:	1bf6      	subs	r6, r6, r7
 800e594:	600f      	str	r7, [r1, #0]
 800e596:	608b      	str	r3, [r1, #8]
 800e598:	2e00      	cmp	r6, #0
 800e59a:	ddeb      	ble.n	800e574 <__sflush_r+0xac>
 800e59c:	4633      	mov	r3, r6
 800e59e:	463a      	mov	r2, r7
 800e5a0:	4628      	mov	r0, r5
 800e5a2:	6a21      	ldr	r1, [r4, #32]
 800e5a4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800e5a8:	47e0      	blx	ip
 800e5aa:	2800      	cmp	r0, #0
 800e5ac:	dc07      	bgt.n	800e5be <__sflush_r+0xf6>
 800e5ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e5b6:	f04f 30ff 	mov.w	r0, #4294967295
 800e5ba:	81a3      	strh	r3, [r4, #12]
 800e5bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5be:	4407      	add	r7, r0
 800e5c0:	1a36      	subs	r6, r6, r0
 800e5c2:	e7e9      	b.n	800e598 <__sflush_r+0xd0>
 800e5c4:	dfbffffe 	.word	0xdfbffffe

0800e5c8 <_fflush_r>:
 800e5c8:	b538      	push	{r3, r4, r5, lr}
 800e5ca:	690b      	ldr	r3, [r1, #16]
 800e5cc:	4605      	mov	r5, r0
 800e5ce:	460c      	mov	r4, r1
 800e5d0:	b913      	cbnz	r3, 800e5d8 <_fflush_r+0x10>
 800e5d2:	2500      	movs	r5, #0
 800e5d4:	4628      	mov	r0, r5
 800e5d6:	bd38      	pop	{r3, r4, r5, pc}
 800e5d8:	b118      	cbz	r0, 800e5e2 <_fflush_r+0x1a>
 800e5da:	6a03      	ldr	r3, [r0, #32]
 800e5dc:	b90b      	cbnz	r3, 800e5e2 <_fflush_r+0x1a>
 800e5de:	f7fd fc85 	bl	800beec <__sinit>
 800e5e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d0f3      	beq.n	800e5d2 <_fflush_r+0xa>
 800e5ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e5ec:	07d0      	lsls	r0, r2, #31
 800e5ee:	d404      	bmi.n	800e5fa <_fflush_r+0x32>
 800e5f0:	0599      	lsls	r1, r3, #22
 800e5f2:	d402      	bmi.n	800e5fa <_fflush_r+0x32>
 800e5f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e5f6:	f7fd fdfe 	bl	800c1f6 <__retarget_lock_acquire_recursive>
 800e5fa:	4628      	mov	r0, r5
 800e5fc:	4621      	mov	r1, r4
 800e5fe:	f7ff ff63 	bl	800e4c8 <__sflush_r>
 800e602:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e604:	4605      	mov	r5, r0
 800e606:	07da      	lsls	r2, r3, #31
 800e608:	d4e4      	bmi.n	800e5d4 <_fflush_r+0xc>
 800e60a:	89a3      	ldrh	r3, [r4, #12]
 800e60c:	059b      	lsls	r3, r3, #22
 800e60e:	d4e1      	bmi.n	800e5d4 <_fflush_r+0xc>
 800e610:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e612:	f7fd fdf1 	bl	800c1f8 <__retarget_lock_release_recursive>
 800e616:	e7dd      	b.n	800e5d4 <_fflush_r+0xc>

0800e618 <fiprintf>:
 800e618:	b40e      	push	{r1, r2, r3}
 800e61a:	b503      	push	{r0, r1, lr}
 800e61c:	4601      	mov	r1, r0
 800e61e:	ab03      	add	r3, sp, #12
 800e620:	4805      	ldr	r0, [pc, #20]	@ (800e638 <fiprintf+0x20>)
 800e622:	f853 2b04 	ldr.w	r2, [r3], #4
 800e626:	6800      	ldr	r0, [r0, #0]
 800e628:	9301      	str	r3, [sp, #4]
 800e62a:	f000 f8a1 	bl	800e770 <_vfiprintf_r>
 800e62e:	b002      	add	sp, #8
 800e630:	f85d eb04 	ldr.w	lr, [sp], #4
 800e634:	b003      	add	sp, #12
 800e636:	4770      	bx	lr
 800e638:	20000198 	.word	0x20000198

0800e63c <memmove>:
 800e63c:	4288      	cmp	r0, r1
 800e63e:	b510      	push	{r4, lr}
 800e640:	eb01 0402 	add.w	r4, r1, r2
 800e644:	d902      	bls.n	800e64c <memmove+0x10>
 800e646:	4284      	cmp	r4, r0
 800e648:	4623      	mov	r3, r4
 800e64a:	d807      	bhi.n	800e65c <memmove+0x20>
 800e64c:	1e43      	subs	r3, r0, #1
 800e64e:	42a1      	cmp	r1, r4
 800e650:	d008      	beq.n	800e664 <memmove+0x28>
 800e652:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e656:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e65a:	e7f8      	b.n	800e64e <memmove+0x12>
 800e65c:	4601      	mov	r1, r0
 800e65e:	4402      	add	r2, r0
 800e660:	428a      	cmp	r2, r1
 800e662:	d100      	bne.n	800e666 <memmove+0x2a>
 800e664:	bd10      	pop	{r4, pc}
 800e666:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e66a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e66e:	e7f7      	b.n	800e660 <memmove+0x24>

0800e670 <_sbrk_r>:
 800e670:	b538      	push	{r3, r4, r5, lr}
 800e672:	2300      	movs	r3, #0
 800e674:	4d05      	ldr	r5, [pc, #20]	@ (800e68c <_sbrk_r+0x1c>)
 800e676:	4604      	mov	r4, r0
 800e678:	4608      	mov	r0, r1
 800e67a:	602b      	str	r3, [r5, #0]
 800e67c:	f7f7 ff38 	bl	80064f0 <_sbrk>
 800e680:	1c43      	adds	r3, r0, #1
 800e682:	d102      	bne.n	800e68a <_sbrk_r+0x1a>
 800e684:	682b      	ldr	r3, [r5, #0]
 800e686:	b103      	cbz	r3, 800e68a <_sbrk_r+0x1a>
 800e688:	6023      	str	r3, [r4, #0]
 800e68a:	bd38      	pop	{r3, r4, r5, pc}
 800e68c:	2000381c 	.word	0x2000381c

0800e690 <abort>:
 800e690:	2006      	movs	r0, #6
 800e692:	b508      	push	{r3, lr}
 800e694:	f000 fa40 	bl	800eb18 <raise>
 800e698:	2001      	movs	r0, #1
 800e69a:	f7f7 feb4 	bl	8006406 <_exit>

0800e69e <_calloc_r>:
 800e69e:	b570      	push	{r4, r5, r6, lr}
 800e6a0:	fba1 5402 	umull	r5, r4, r1, r2
 800e6a4:	b93c      	cbnz	r4, 800e6b6 <_calloc_r+0x18>
 800e6a6:	4629      	mov	r1, r5
 800e6a8:	f7fe ffea 	bl	800d680 <_malloc_r>
 800e6ac:	4606      	mov	r6, r0
 800e6ae:	b928      	cbnz	r0, 800e6bc <_calloc_r+0x1e>
 800e6b0:	2600      	movs	r6, #0
 800e6b2:	4630      	mov	r0, r6
 800e6b4:	bd70      	pop	{r4, r5, r6, pc}
 800e6b6:	220c      	movs	r2, #12
 800e6b8:	6002      	str	r2, [r0, #0]
 800e6ba:	e7f9      	b.n	800e6b0 <_calloc_r+0x12>
 800e6bc:	462a      	mov	r2, r5
 800e6be:	4621      	mov	r1, r4
 800e6c0:	f7fd fcad 	bl	800c01e <memset>
 800e6c4:	e7f5      	b.n	800e6b2 <_calloc_r+0x14>

0800e6c6 <_realloc_r>:
 800e6c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6ca:	4680      	mov	r8, r0
 800e6cc:	4615      	mov	r5, r2
 800e6ce:	460c      	mov	r4, r1
 800e6d0:	b921      	cbnz	r1, 800e6dc <_realloc_r+0x16>
 800e6d2:	4611      	mov	r1, r2
 800e6d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6d8:	f7fe bfd2 	b.w	800d680 <_malloc_r>
 800e6dc:	b92a      	cbnz	r2, 800e6ea <_realloc_r+0x24>
 800e6de:	f7fe fc23 	bl	800cf28 <_free_r>
 800e6e2:	2400      	movs	r4, #0
 800e6e4:	4620      	mov	r0, r4
 800e6e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6ea:	f000 fa31 	bl	800eb50 <_malloc_usable_size_r>
 800e6ee:	4285      	cmp	r5, r0
 800e6f0:	4606      	mov	r6, r0
 800e6f2:	d802      	bhi.n	800e6fa <_realloc_r+0x34>
 800e6f4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e6f8:	d8f4      	bhi.n	800e6e4 <_realloc_r+0x1e>
 800e6fa:	4629      	mov	r1, r5
 800e6fc:	4640      	mov	r0, r8
 800e6fe:	f7fe ffbf 	bl	800d680 <_malloc_r>
 800e702:	4607      	mov	r7, r0
 800e704:	2800      	cmp	r0, #0
 800e706:	d0ec      	beq.n	800e6e2 <_realloc_r+0x1c>
 800e708:	42b5      	cmp	r5, r6
 800e70a:	462a      	mov	r2, r5
 800e70c:	4621      	mov	r1, r4
 800e70e:	bf28      	it	cs
 800e710:	4632      	movcs	r2, r6
 800e712:	f7fd fd80 	bl	800c216 <memcpy>
 800e716:	4621      	mov	r1, r4
 800e718:	4640      	mov	r0, r8
 800e71a:	f7fe fc05 	bl	800cf28 <_free_r>
 800e71e:	463c      	mov	r4, r7
 800e720:	e7e0      	b.n	800e6e4 <_realloc_r+0x1e>

0800e722 <__sfputc_r>:
 800e722:	6893      	ldr	r3, [r2, #8]
 800e724:	b410      	push	{r4}
 800e726:	3b01      	subs	r3, #1
 800e728:	2b00      	cmp	r3, #0
 800e72a:	6093      	str	r3, [r2, #8]
 800e72c:	da07      	bge.n	800e73e <__sfputc_r+0x1c>
 800e72e:	6994      	ldr	r4, [r2, #24]
 800e730:	42a3      	cmp	r3, r4
 800e732:	db01      	blt.n	800e738 <__sfputc_r+0x16>
 800e734:	290a      	cmp	r1, #10
 800e736:	d102      	bne.n	800e73e <__sfputc_r+0x1c>
 800e738:	bc10      	pop	{r4}
 800e73a:	f000 b931 	b.w	800e9a0 <__swbuf_r>
 800e73e:	6813      	ldr	r3, [r2, #0]
 800e740:	1c58      	adds	r0, r3, #1
 800e742:	6010      	str	r0, [r2, #0]
 800e744:	7019      	strb	r1, [r3, #0]
 800e746:	4608      	mov	r0, r1
 800e748:	bc10      	pop	{r4}
 800e74a:	4770      	bx	lr

0800e74c <__sfputs_r>:
 800e74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e74e:	4606      	mov	r6, r0
 800e750:	460f      	mov	r7, r1
 800e752:	4614      	mov	r4, r2
 800e754:	18d5      	adds	r5, r2, r3
 800e756:	42ac      	cmp	r4, r5
 800e758:	d101      	bne.n	800e75e <__sfputs_r+0x12>
 800e75a:	2000      	movs	r0, #0
 800e75c:	e007      	b.n	800e76e <__sfputs_r+0x22>
 800e75e:	463a      	mov	r2, r7
 800e760:	4630      	mov	r0, r6
 800e762:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e766:	f7ff ffdc 	bl	800e722 <__sfputc_r>
 800e76a:	1c43      	adds	r3, r0, #1
 800e76c:	d1f3      	bne.n	800e756 <__sfputs_r+0xa>
 800e76e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e770 <_vfiprintf_r>:
 800e770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e774:	460d      	mov	r5, r1
 800e776:	4614      	mov	r4, r2
 800e778:	4698      	mov	r8, r3
 800e77a:	4606      	mov	r6, r0
 800e77c:	b09d      	sub	sp, #116	@ 0x74
 800e77e:	b118      	cbz	r0, 800e788 <_vfiprintf_r+0x18>
 800e780:	6a03      	ldr	r3, [r0, #32]
 800e782:	b90b      	cbnz	r3, 800e788 <_vfiprintf_r+0x18>
 800e784:	f7fd fbb2 	bl	800beec <__sinit>
 800e788:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e78a:	07d9      	lsls	r1, r3, #31
 800e78c:	d405      	bmi.n	800e79a <_vfiprintf_r+0x2a>
 800e78e:	89ab      	ldrh	r3, [r5, #12]
 800e790:	059a      	lsls	r2, r3, #22
 800e792:	d402      	bmi.n	800e79a <_vfiprintf_r+0x2a>
 800e794:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e796:	f7fd fd2e 	bl	800c1f6 <__retarget_lock_acquire_recursive>
 800e79a:	89ab      	ldrh	r3, [r5, #12]
 800e79c:	071b      	lsls	r3, r3, #28
 800e79e:	d501      	bpl.n	800e7a4 <_vfiprintf_r+0x34>
 800e7a0:	692b      	ldr	r3, [r5, #16]
 800e7a2:	b99b      	cbnz	r3, 800e7cc <_vfiprintf_r+0x5c>
 800e7a4:	4629      	mov	r1, r5
 800e7a6:	4630      	mov	r0, r6
 800e7a8:	f000 f938 	bl	800ea1c <__swsetup_r>
 800e7ac:	b170      	cbz	r0, 800e7cc <_vfiprintf_r+0x5c>
 800e7ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e7b0:	07dc      	lsls	r4, r3, #31
 800e7b2:	d504      	bpl.n	800e7be <_vfiprintf_r+0x4e>
 800e7b4:	f04f 30ff 	mov.w	r0, #4294967295
 800e7b8:	b01d      	add	sp, #116	@ 0x74
 800e7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7be:	89ab      	ldrh	r3, [r5, #12]
 800e7c0:	0598      	lsls	r0, r3, #22
 800e7c2:	d4f7      	bmi.n	800e7b4 <_vfiprintf_r+0x44>
 800e7c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e7c6:	f7fd fd17 	bl	800c1f8 <__retarget_lock_release_recursive>
 800e7ca:	e7f3      	b.n	800e7b4 <_vfiprintf_r+0x44>
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7d0:	2320      	movs	r3, #32
 800e7d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e7d6:	2330      	movs	r3, #48	@ 0x30
 800e7d8:	f04f 0901 	mov.w	r9, #1
 800e7dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800e7e0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800e98c <_vfiprintf_r+0x21c>
 800e7e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e7e8:	4623      	mov	r3, r4
 800e7ea:	469a      	mov	sl, r3
 800e7ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7f0:	b10a      	cbz	r2, 800e7f6 <_vfiprintf_r+0x86>
 800e7f2:	2a25      	cmp	r2, #37	@ 0x25
 800e7f4:	d1f9      	bne.n	800e7ea <_vfiprintf_r+0x7a>
 800e7f6:	ebba 0b04 	subs.w	fp, sl, r4
 800e7fa:	d00b      	beq.n	800e814 <_vfiprintf_r+0xa4>
 800e7fc:	465b      	mov	r3, fp
 800e7fe:	4622      	mov	r2, r4
 800e800:	4629      	mov	r1, r5
 800e802:	4630      	mov	r0, r6
 800e804:	f7ff ffa2 	bl	800e74c <__sfputs_r>
 800e808:	3001      	adds	r0, #1
 800e80a:	f000 80a7 	beq.w	800e95c <_vfiprintf_r+0x1ec>
 800e80e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e810:	445a      	add	r2, fp
 800e812:	9209      	str	r2, [sp, #36]	@ 0x24
 800e814:	f89a 3000 	ldrb.w	r3, [sl]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	f000 809f 	beq.w	800e95c <_vfiprintf_r+0x1ec>
 800e81e:	2300      	movs	r3, #0
 800e820:	f04f 32ff 	mov.w	r2, #4294967295
 800e824:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e828:	f10a 0a01 	add.w	sl, sl, #1
 800e82c:	9304      	str	r3, [sp, #16]
 800e82e:	9307      	str	r3, [sp, #28]
 800e830:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e834:	931a      	str	r3, [sp, #104]	@ 0x68
 800e836:	4654      	mov	r4, sl
 800e838:	2205      	movs	r2, #5
 800e83a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e83e:	4853      	ldr	r0, [pc, #332]	@ (800e98c <_vfiprintf_r+0x21c>)
 800e840:	f7fd fcdb 	bl	800c1fa <memchr>
 800e844:	9a04      	ldr	r2, [sp, #16]
 800e846:	b9d8      	cbnz	r0, 800e880 <_vfiprintf_r+0x110>
 800e848:	06d1      	lsls	r1, r2, #27
 800e84a:	bf44      	itt	mi
 800e84c:	2320      	movmi	r3, #32
 800e84e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e852:	0713      	lsls	r3, r2, #28
 800e854:	bf44      	itt	mi
 800e856:	232b      	movmi	r3, #43	@ 0x2b
 800e858:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e85c:	f89a 3000 	ldrb.w	r3, [sl]
 800e860:	2b2a      	cmp	r3, #42	@ 0x2a
 800e862:	d015      	beq.n	800e890 <_vfiprintf_r+0x120>
 800e864:	4654      	mov	r4, sl
 800e866:	2000      	movs	r0, #0
 800e868:	f04f 0c0a 	mov.w	ip, #10
 800e86c:	9a07      	ldr	r2, [sp, #28]
 800e86e:	4621      	mov	r1, r4
 800e870:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e874:	3b30      	subs	r3, #48	@ 0x30
 800e876:	2b09      	cmp	r3, #9
 800e878:	d94b      	bls.n	800e912 <_vfiprintf_r+0x1a2>
 800e87a:	b1b0      	cbz	r0, 800e8aa <_vfiprintf_r+0x13a>
 800e87c:	9207      	str	r2, [sp, #28]
 800e87e:	e014      	b.n	800e8aa <_vfiprintf_r+0x13a>
 800e880:	eba0 0308 	sub.w	r3, r0, r8
 800e884:	fa09 f303 	lsl.w	r3, r9, r3
 800e888:	4313      	orrs	r3, r2
 800e88a:	46a2      	mov	sl, r4
 800e88c:	9304      	str	r3, [sp, #16]
 800e88e:	e7d2      	b.n	800e836 <_vfiprintf_r+0xc6>
 800e890:	9b03      	ldr	r3, [sp, #12]
 800e892:	1d19      	adds	r1, r3, #4
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	9103      	str	r1, [sp, #12]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	bfbb      	ittet	lt
 800e89c:	425b      	neglt	r3, r3
 800e89e:	f042 0202 	orrlt.w	r2, r2, #2
 800e8a2:	9307      	strge	r3, [sp, #28]
 800e8a4:	9307      	strlt	r3, [sp, #28]
 800e8a6:	bfb8      	it	lt
 800e8a8:	9204      	strlt	r2, [sp, #16]
 800e8aa:	7823      	ldrb	r3, [r4, #0]
 800e8ac:	2b2e      	cmp	r3, #46	@ 0x2e
 800e8ae:	d10a      	bne.n	800e8c6 <_vfiprintf_r+0x156>
 800e8b0:	7863      	ldrb	r3, [r4, #1]
 800e8b2:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8b4:	d132      	bne.n	800e91c <_vfiprintf_r+0x1ac>
 800e8b6:	9b03      	ldr	r3, [sp, #12]
 800e8b8:	3402      	adds	r4, #2
 800e8ba:	1d1a      	adds	r2, r3, #4
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	9203      	str	r2, [sp, #12]
 800e8c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e8c4:	9305      	str	r3, [sp, #20]
 800e8c6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800e990 <_vfiprintf_r+0x220>
 800e8ca:	2203      	movs	r2, #3
 800e8cc:	4650      	mov	r0, sl
 800e8ce:	7821      	ldrb	r1, [r4, #0]
 800e8d0:	f7fd fc93 	bl	800c1fa <memchr>
 800e8d4:	b138      	cbz	r0, 800e8e6 <_vfiprintf_r+0x176>
 800e8d6:	2240      	movs	r2, #64	@ 0x40
 800e8d8:	9b04      	ldr	r3, [sp, #16]
 800e8da:	eba0 000a 	sub.w	r0, r0, sl
 800e8de:	4082      	lsls	r2, r0
 800e8e0:	4313      	orrs	r3, r2
 800e8e2:	3401      	adds	r4, #1
 800e8e4:	9304      	str	r3, [sp, #16]
 800e8e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8ea:	2206      	movs	r2, #6
 800e8ec:	4829      	ldr	r0, [pc, #164]	@ (800e994 <_vfiprintf_r+0x224>)
 800e8ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e8f2:	f7fd fc82 	bl	800c1fa <memchr>
 800e8f6:	2800      	cmp	r0, #0
 800e8f8:	d03f      	beq.n	800e97a <_vfiprintf_r+0x20a>
 800e8fa:	4b27      	ldr	r3, [pc, #156]	@ (800e998 <_vfiprintf_r+0x228>)
 800e8fc:	bb1b      	cbnz	r3, 800e946 <_vfiprintf_r+0x1d6>
 800e8fe:	9b03      	ldr	r3, [sp, #12]
 800e900:	3307      	adds	r3, #7
 800e902:	f023 0307 	bic.w	r3, r3, #7
 800e906:	3308      	adds	r3, #8
 800e908:	9303      	str	r3, [sp, #12]
 800e90a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e90c:	443b      	add	r3, r7
 800e90e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e910:	e76a      	b.n	800e7e8 <_vfiprintf_r+0x78>
 800e912:	460c      	mov	r4, r1
 800e914:	2001      	movs	r0, #1
 800e916:	fb0c 3202 	mla	r2, ip, r2, r3
 800e91a:	e7a8      	b.n	800e86e <_vfiprintf_r+0xfe>
 800e91c:	2300      	movs	r3, #0
 800e91e:	f04f 0c0a 	mov.w	ip, #10
 800e922:	4619      	mov	r1, r3
 800e924:	3401      	adds	r4, #1
 800e926:	9305      	str	r3, [sp, #20]
 800e928:	4620      	mov	r0, r4
 800e92a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e92e:	3a30      	subs	r2, #48	@ 0x30
 800e930:	2a09      	cmp	r2, #9
 800e932:	d903      	bls.n	800e93c <_vfiprintf_r+0x1cc>
 800e934:	2b00      	cmp	r3, #0
 800e936:	d0c6      	beq.n	800e8c6 <_vfiprintf_r+0x156>
 800e938:	9105      	str	r1, [sp, #20]
 800e93a:	e7c4      	b.n	800e8c6 <_vfiprintf_r+0x156>
 800e93c:	4604      	mov	r4, r0
 800e93e:	2301      	movs	r3, #1
 800e940:	fb0c 2101 	mla	r1, ip, r1, r2
 800e944:	e7f0      	b.n	800e928 <_vfiprintf_r+0x1b8>
 800e946:	ab03      	add	r3, sp, #12
 800e948:	9300      	str	r3, [sp, #0]
 800e94a:	462a      	mov	r2, r5
 800e94c:	4630      	mov	r0, r6
 800e94e:	4b13      	ldr	r3, [pc, #76]	@ (800e99c <_vfiprintf_r+0x22c>)
 800e950:	a904      	add	r1, sp, #16
 800e952:	f7fc fc71 	bl	800b238 <_printf_float>
 800e956:	4607      	mov	r7, r0
 800e958:	1c78      	adds	r0, r7, #1
 800e95a:	d1d6      	bne.n	800e90a <_vfiprintf_r+0x19a>
 800e95c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e95e:	07d9      	lsls	r1, r3, #31
 800e960:	d405      	bmi.n	800e96e <_vfiprintf_r+0x1fe>
 800e962:	89ab      	ldrh	r3, [r5, #12]
 800e964:	059a      	lsls	r2, r3, #22
 800e966:	d402      	bmi.n	800e96e <_vfiprintf_r+0x1fe>
 800e968:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e96a:	f7fd fc45 	bl	800c1f8 <__retarget_lock_release_recursive>
 800e96e:	89ab      	ldrh	r3, [r5, #12]
 800e970:	065b      	lsls	r3, r3, #25
 800e972:	f53f af1f 	bmi.w	800e7b4 <_vfiprintf_r+0x44>
 800e976:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e978:	e71e      	b.n	800e7b8 <_vfiprintf_r+0x48>
 800e97a:	ab03      	add	r3, sp, #12
 800e97c:	9300      	str	r3, [sp, #0]
 800e97e:	462a      	mov	r2, r5
 800e980:	4630      	mov	r0, r6
 800e982:	4b06      	ldr	r3, [pc, #24]	@ (800e99c <_vfiprintf_r+0x22c>)
 800e984:	a904      	add	r1, sp, #16
 800e986:	f7fc fef5 	bl	800b774 <_printf_i>
 800e98a:	e7e4      	b.n	800e956 <_vfiprintf_r+0x1e6>
 800e98c:	0800f249 	.word	0x0800f249
 800e990:	0800f24f 	.word	0x0800f24f
 800e994:	0800f253 	.word	0x0800f253
 800e998:	0800b239 	.word	0x0800b239
 800e99c:	0800e74d 	.word	0x0800e74d

0800e9a0 <__swbuf_r>:
 800e9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9a2:	460e      	mov	r6, r1
 800e9a4:	4614      	mov	r4, r2
 800e9a6:	4605      	mov	r5, r0
 800e9a8:	b118      	cbz	r0, 800e9b2 <__swbuf_r+0x12>
 800e9aa:	6a03      	ldr	r3, [r0, #32]
 800e9ac:	b90b      	cbnz	r3, 800e9b2 <__swbuf_r+0x12>
 800e9ae:	f7fd fa9d 	bl	800beec <__sinit>
 800e9b2:	69a3      	ldr	r3, [r4, #24]
 800e9b4:	60a3      	str	r3, [r4, #8]
 800e9b6:	89a3      	ldrh	r3, [r4, #12]
 800e9b8:	071a      	lsls	r2, r3, #28
 800e9ba:	d501      	bpl.n	800e9c0 <__swbuf_r+0x20>
 800e9bc:	6923      	ldr	r3, [r4, #16]
 800e9be:	b943      	cbnz	r3, 800e9d2 <__swbuf_r+0x32>
 800e9c0:	4621      	mov	r1, r4
 800e9c2:	4628      	mov	r0, r5
 800e9c4:	f000 f82a 	bl	800ea1c <__swsetup_r>
 800e9c8:	b118      	cbz	r0, 800e9d2 <__swbuf_r+0x32>
 800e9ca:	f04f 37ff 	mov.w	r7, #4294967295
 800e9ce:	4638      	mov	r0, r7
 800e9d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9d2:	6823      	ldr	r3, [r4, #0]
 800e9d4:	6922      	ldr	r2, [r4, #16]
 800e9d6:	b2f6      	uxtb	r6, r6
 800e9d8:	1a98      	subs	r0, r3, r2
 800e9da:	6963      	ldr	r3, [r4, #20]
 800e9dc:	4637      	mov	r7, r6
 800e9de:	4283      	cmp	r3, r0
 800e9e0:	dc05      	bgt.n	800e9ee <__swbuf_r+0x4e>
 800e9e2:	4621      	mov	r1, r4
 800e9e4:	4628      	mov	r0, r5
 800e9e6:	f7ff fdef 	bl	800e5c8 <_fflush_r>
 800e9ea:	2800      	cmp	r0, #0
 800e9ec:	d1ed      	bne.n	800e9ca <__swbuf_r+0x2a>
 800e9ee:	68a3      	ldr	r3, [r4, #8]
 800e9f0:	3b01      	subs	r3, #1
 800e9f2:	60a3      	str	r3, [r4, #8]
 800e9f4:	6823      	ldr	r3, [r4, #0]
 800e9f6:	1c5a      	adds	r2, r3, #1
 800e9f8:	6022      	str	r2, [r4, #0]
 800e9fa:	701e      	strb	r6, [r3, #0]
 800e9fc:	6962      	ldr	r2, [r4, #20]
 800e9fe:	1c43      	adds	r3, r0, #1
 800ea00:	429a      	cmp	r2, r3
 800ea02:	d004      	beq.n	800ea0e <__swbuf_r+0x6e>
 800ea04:	89a3      	ldrh	r3, [r4, #12]
 800ea06:	07db      	lsls	r3, r3, #31
 800ea08:	d5e1      	bpl.n	800e9ce <__swbuf_r+0x2e>
 800ea0a:	2e0a      	cmp	r6, #10
 800ea0c:	d1df      	bne.n	800e9ce <__swbuf_r+0x2e>
 800ea0e:	4621      	mov	r1, r4
 800ea10:	4628      	mov	r0, r5
 800ea12:	f7ff fdd9 	bl	800e5c8 <_fflush_r>
 800ea16:	2800      	cmp	r0, #0
 800ea18:	d0d9      	beq.n	800e9ce <__swbuf_r+0x2e>
 800ea1a:	e7d6      	b.n	800e9ca <__swbuf_r+0x2a>

0800ea1c <__swsetup_r>:
 800ea1c:	b538      	push	{r3, r4, r5, lr}
 800ea1e:	4b29      	ldr	r3, [pc, #164]	@ (800eac4 <__swsetup_r+0xa8>)
 800ea20:	4605      	mov	r5, r0
 800ea22:	6818      	ldr	r0, [r3, #0]
 800ea24:	460c      	mov	r4, r1
 800ea26:	b118      	cbz	r0, 800ea30 <__swsetup_r+0x14>
 800ea28:	6a03      	ldr	r3, [r0, #32]
 800ea2a:	b90b      	cbnz	r3, 800ea30 <__swsetup_r+0x14>
 800ea2c:	f7fd fa5e 	bl	800beec <__sinit>
 800ea30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea34:	0719      	lsls	r1, r3, #28
 800ea36:	d422      	bmi.n	800ea7e <__swsetup_r+0x62>
 800ea38:	06da      	lsls	r2, r3, #27
 800ea3a:	d407      	bmi.n	800ea4c <__swsetup_r+0x30>
 800ea3c:	2209      	movs	r2, #9
 800ea3e:	602a      	str	r2, [r5, #0]
 800ea40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea44:	f04f 30ff 	mov.w	r0, #4294967295
 800ea48:	81a3      	strh	r3, [r4, #12]
 800ea4a:	e033      	b.n	800eab4 <__swsetup_r+0x98>
 800ea4c:	0758      	lsls	r0, r3, #29
 800ea4e:	d512      	bpl.n	800ea76 <__swsetup_r+0x5a>
 800ea50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ea52:	b141      	cbz	r1, 800ea66 <__swsetup_r+0x4a>
 800ea54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ea58:	4299      	cmp	r1, r3
 800ea5a:	d002      	beq.n	800ea62 <__swsetup_r+0x46>
 800ea5c:	4628      	mov	r0, r5
 800ea5e:	f7fe fa63 	bl	800cf28 <_free_r>
 800ea62:	2300      	movs	r3, #0
 800ea64:	6363      	str	r3, [r4, #52]	@ 0x34
 800ea66:	89a3      	ldrh	r3, [r4, #12]
 800ea68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ea6c:	81a3      	strh	r3, [r4, #12]
 800ea6e:	2300      	movs	r3, #0
 800ea70:	6063      	str	r3, [r4, #4]
 800ea72:	6923      	ldr	r3, [r4, #16]
 800ea74:	6023      	str	r3, [r4, #0]
 800ea76:	89a3      	ldrh	r3, [r4, #12]
 800ea78:	f043 0308 	orr.w	r3, r3, #8
 800ea7c:	81a3      	strh	r3, [r4, #12]
 800ea7e:	6923      	ldr	r3, [r4, #16]
 800ea80:	b94b      	cbnz	r3, 800ea96 <__swsetup_r+0x7a>
 800ea82:	89a3      	ldrh	r3, [r4, #12]
 800ea84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ea88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ea8c:	d003      	beq.n	800ea96 <__swsetup_r+0x7a>
 800ea8e:	4621      	mov	r1, r4
 800ea90:	4628      	mov	r0, r5
 800ea92:	f000 f88a 	bl	800ebaa <__smakebuf_r>
 800ea96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea9a:	f013 0201 	ands.w	r2, r3, #1
 800ea9e:	d00a      	beq.n	800eab6 <__swsetup_r+0x9a>
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	60a2      	str	r2, [r4, #8]
 800eaa4:	6962      	ldr	r2, [r4, #20]
 800eaa6:	4252      	negs	r2, r2
 800eaa8:	61a2      	str	r2, [r4, #24]
 800eaaa:	6922      	ldr	r2, [r4, #16]
 800eaac:	b942      	cbnz	r2, 800eac0 <__swsetup_r+0xa4>
 800eaae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800eab2:	d1c5      	bne.n	800ea40 <__swsetup_r+0x24>
 800eab4:	bd38      	pop	{r3, r4, r5, pc}
 800eab6:	0799      	lsls	r1, r3, #30
 800eab8:	bf58      	it	pl
 800eaba:	6962      	ldrpl	r2, [r4, #20]
 800eabc:	60a2      	str	r2, [r4, #8]
 800eabe:	e7f4      	b.n	800eaaa <__swsetup_r+0x8e>
 800eac0:	2000      	movs	r0, #0
 800eac2:	e7f7      	b.n	800eab4 <__swsetup_r+0x98>
 800eac4:	20000198 	.word	0x20000198

0800eac8 <_raise_r>:
 800eac8:	291f      	cmp	r1, #31
 800eaca:	b538      	push	{r3, r4, r5, lr}
 800eacc:	4605      	mov	r5, r0
 800eace:	460c      	mov	r4, r1
 800ead0:	d904      	bls.n	800eadc <_raise_r+0x14>
 800ead2:	2316      	movs	r3, #22
 800ead4:	6003      	str	r3, [r0, #0]
 800ead6:	f04f 30ff 	mov.w	r0, #4294967295
 800eada:	bd38      	pop	{r3, r4, r5, pc}
 800eadc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800eade:	b112      	cbz	r2, 800eae6 <_raise_r+0x1e>
 800eae0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eae4:	b94b      	cbnz	r3, 800eafa <_raise_r+0x32>
 800eae6:	4628      	mov	r0, r5
 800eae8:	f000 f830 	bl	800eb4c <_getpid_r>
 800eaec:	4622      	mov	r2, r4
 800eaee:	4601      	mov	r1, r0
 800eaf0:	4628      	mov	r0, r5
 800eaf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eaf6:	f000 b817 	b.w	800eb28 <_kill_r>
 800eafa:	2b01      	cmp	r3, #1
 800eafc:	d00a      	beq.n	800eb14 <_raise_r+0x4c>
 800eafe:	1c59      	adds	r1, r3, #1
 800eb00:	d103      	bne.n	800eb0a <_raise_r+0x42>
 800eb02:	2316      	movs	r3, #22
 800eb04:	6003      	str	r3, [r0, #0]
 800eb06:	2001      	movs	r0, #1
 800eb08:	e7e7      	b.n	800eada <_raise_r+0x12>
 800eb0a:	2100      	movs	r1, #0
 800eb0c:	4620      	mov	r0, r4
 800eb0e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800eb12:	4798      	blx	r3
 800eb14:	2000      	movs	r0, #0
 800eb16:	e7e0      	b.n	800eada <_raise_r+0x12>

0800eb18 <raise>:
 800eb18:	4b02      	ldr	r3, [pc, #8]	@ (800eb24 <raise+0xc>)
 800eb1a:	4601      	mov	r1, r0
 800eb1c:	6818      	ldr	r0, [r3, #0]
 800eb1e:	f7ff bfd3 	b.w	800eac8 <_raise_r>
 800eb22:	bf00      	nop
 800eb24:	20000198 	.word	0x20000198

0800eb28 <_kill_r>:
 800eb28:	b538      	push	{r3, r4, r5, lr}
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	4d06      	ldr	r5, [pc, #24]	@ (800eb48 <_kill_r+0x20>)
 800eb2e:	4604      	mov	r4, r0
 800eb30:	4608      	mov	r0, r1
 800eb32:	4611      	mov	r1, r2
 800eb34:	602b      	str	r3, [r5, #0]
 800eb36:	f7f7 fc56 	bl	80063e6 <_kill>
 800eb3a:	1c43      	adds	r3, r0, #1
 800eb3c:	d102      	bne.n	800eb44 <_kill_r+0x1c>
 800eb3e:	682b      	ldr	r3, [r5, #0]
 800eb40:	b103      	cbz	r3, 800eb44 <_kill_r+0x1c>
 800eb42:	6023      	str	r3, [r4, #0]
 800eb44:	bd38      	pop	{r3, r4, r5, pc}
 800eb46:	bf00      	nop
 800eb48:	2000381c 	.word	0x2000381c

0800eb4c <_getpid_r>:
 800eb4c:	f7f7 bc44 	b.w	80063d8 <_getpid>

0800eb50 <_malloc_usable_size_r>:
 800eb50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb54:	1f18      	subs	r0, r3, #4
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	bfbc      	itt	lt
 800eb5a:	580b      	ldrlt	r3, [r1, r0]
 800eb5c:	18c0      	addlt	r0, r0, r3
 800eb5e:	4770      	bx	lr

0800eb60 <__swhatbuf_r>:
 800eb60:	b570      	push	{r4, r5, r6, lr}
 800eb62:	460c      	mov	r4, r1
 800eb64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb68:	4615      	mov	r5, r2
 800eb6a:	2900      	cmp	r1, #0
 800eb6c:	461e      	mov	r6, r3
 800eb6e:	b096      	sub	sp, #88	@ 0x58
 800eb70:	da0c      	bge.n	800eb8c <__swhatbuf_r+0x2c>
 800eb72:	89a3      	ldrh	r3, [r4, #12]
 800eb74:	2100      	movs	r1, #0
 800eb76:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800eb7a:	bf14      	ite	ne
 800eb7c:	2340      	movne	r3, #64	@ 0x40
 800eb7e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800eb82:	2000      	movs	r0, #0
 800eb84:	6031      	str	r1, [r6, #0]
 800eb86:	602b      	str	r3, [r5, #0]
 800eb88:	b016      	add	sp, #88	@ 0x58
 800eb8a:	bd70      	pop	{r4, r5, r6, pc}
 800eb8c:	466a      	mov	r2, sp
 800eb8e:	f000 f849 	bl	800ec24 <_fstat_r>
 800eb92:	2800      	cmp	r0, #0
 800eb94:	dbed      	blt.n	800eb72 <__swhatbuf_r+0x12>
 800eb96:	9901      	ldr	r1, [sp, #4]
 800eb98:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800eb9c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800eba0:	4259      	negs	r1, r3
 800eba2:	4159      	adcs	r1, r3
 800eba4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eba8:	e7eb      	b.n	800eb82 <__swhatbuf_r+0x22>

0800ebaa <__smakebuf_r>:
 800ebaa:	898b      	ldrh	r3, [r1, #12]
 800ebac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ebae:	079d      	lsls	r5, r3, #30
 800ebb0:	4606      	mov	r6, r0
 800ebb2:	460c      	mov	r4, r1
 800ebb4:	d507      	bpl.n	800ebc6 <__smakebuf_r+0x1c>
 800ebb6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ebba:	6023      	str	r3, [r4, #0]
 800ebbc:	6123      	str	r3, [r4, #16]
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	6163      	str	r3, [r4, #20]
 800ebc2:	b003      	add	sp, #12
 800ebc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebc6:	466a      	mov	r2, sp
 800ebc8:	ab01      	add	r3, sp, #4
 800ebca:	f7ff ffc9 	bl	800eb60 <__swhatbuf_r>
 800ebce:	9f00      	ldr	r7, [sp, #0]
 800ebd0:	4605      	mov	r5, r0
 800ebd2:	4639      	mov	r1, r7
 800ebd4:	4630      	mov	r0, r6
 800ebd6:	f7fe fd53 	bl	800d680 <_malloc_r>
 800ebda:	b948      	cbnz	r0, 800ebf0 <__smakebuf_r+0x46>
 800ebdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebe0:	059a      	lsls	r2, r3, #22
 800ebe2:	d4ee      	bmi.n	800ebc2 <__smakebuf_r+0x18>
 800ebe4:	f023 0303 	bic.w	r3, r3, #3
 800ebe8:	f043 0302 	orr.w	r3, r3, #2
 800ebec:	81a3      	strh	r3, [r4, #12]
 800ebee:	e7e2      	b.n	800ebb6 <__smakebuf_r+0xc>
 800ebf0:	89a3      	ldrh	r3, [r4, #12]
 800ebf2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ebf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ebfa:	81a3      	strh	r3, [r4, #12]
 800ebfc:	9b01      	ldr	r3, [sp, #4]
 800ebfe:	6020      	str	r0, [r4, #0]
 800ec00:	b15b      	cbz	r3, 800ec1a <__smakebuf_r+0x70>
 800ec02:	4630      	mov	r0, r6
 800ec04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec08:	f000 f81e 	bl	800ec48 <_isatty_r>
 800ec0c:	b128      	cbz	r0, 800ec1a <__smakebuf_r+0x70>
 800ec0e:	89a3      	ldrh	r3, [r4, #12]
 800ec10:	f023 0303 	bic.w	r3, r3, #3
 800ec14:	f043 0301 	orr.w	r3, r3, #1
 800ec18:	81a3      	strh	r3, [r4, #12]
 800ec1a:	89a3      	ldrh	r3, [r4, #12]
 800ec1c:	431d      	orrs	r5, r3
 800ec1e:	81a5      	strh	r5, [r4, #12]
 800ec20:	e7cf      	b.n	800ebc2 <__smakebuf_r+0x18>
	...

0800ec24 <_fstat_r>:
 800ec24:	b538      	push	{r3, r4, r5, lr}
 800ec26:	2300      	movs	r3, #0
 800ec28:	4d06      	ldr	r5, [pc, #24]	@ (800ec44 <_fstat_r+0x20>)
 800ec2a:	4604      	mov	r4, r0
 800ec2c:	4608      	mov	r0, r1
 800ec2e:	4611      	mov	r1, r2
 800ec30:	602b      	str	r3, [r5, #0]
 800ec32:	f7f7 fc37 	bl	80064a4 <_fstat>
 800ec36:	1c43      	adds	r3, r0, #1
 800ec38:	d102      	bne.n	800ec40 <_fstat_r+0x1c>
 800ec3a:	682b      	ldr	r3, [r5, #0]
 800ec3c:	b103      	cbz	r3, 800ec40 <_fstat_r+0x1c>
 800ec3e:	6023      	str	r3, [r4, #0]
 800ec40:	bd38      	pop	{r3, r4, r5, pc}
 800ec42:	bf00      	nop
 800ec44:	2000381c 	.word	0x2000381c

0800ec48 <_isatty_r>:
 800ec48:	b538      	push	{r3, r4, r5, lr}
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	4d05      	ldr	r5, [pc, #20]	@ (800ec64 <_isatty_r+0x1c>)
 800ec4e:	4604      	mov	r4, r0
 800ec50:	4608      	mov	r0, r1
 800ec52:	602b      	str	r3, [r5, #0]
 800ec54:	f7f7 fc35 	bl	80064c2 <_isatty>
 800ec58:	1c43      	adds	r3, r0, #1
 800ec5a:	d102      	bne.n	800ec62 <_isatty_r+0x1a>
 800ec5c:	682b      	ldr	r3, [r5, #0]
 800ec5e:	b103      	cbz	r3, 800ec62 <_isatty_r+0x1a>
 800ec60:	6023      	str	r3, [r4, #0]
 800ec62:	bd38      	pop	{r3, r4, r5, pc}
 800ec64:	2000381c 	.word	0x2000381c

0800ec68 <_init>:
 800ec68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec6a:	bf00      	nop
 800ec6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec6e:	bc08      	pop	{r3}
 800ec70:	469e      	mov	lr, r3
 800ec72:	4770      	bx	lr

0800ec74 <_fini>:
 800ec74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec76:	bf00      	nop
 800ec78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec7a:	bc08      	pop	{r3}
 800ec7c:	469e      	mov	lr, r3
 800ec7e:	4770      	bx	lr
