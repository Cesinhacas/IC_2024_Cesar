
MCS_m7_certo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012b60  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d8c  08012d30  08012d30  00013d30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013abc  08013abc  000151e8  2**0
                  CONTENTS
  4 .ARM          00000008  08013abc  08013abc  00014abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013ac4  08013ac4  000151e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013ac4  08013ac4  00014ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013ac8  08013ac8  00014ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08013acc  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ae8  200001e8  08013cb4  000151e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003cd0  08013cb4  00015cd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000151e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc4b  00000000  00000000  00015218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000231c  00000000  00000000  00020e63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  00023180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000085d  00000000  00000000  00023c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027ce8  00000000  00000000  000244e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014533  00000000  00000000  0004c1cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e725d  00000000  00000000  00060700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014795d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004354  00000000  00000000  001479a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0014bcf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012d18 	.word	0x08012d18

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	08012d18 	.word	0x08012d18

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <inverter_matriz>:
#include <stdlib.h>
#include <math.h>
#include "calib.h"

void inverter_matriz(float matriz[N][N], float inversa[N][N])
{
 8001024:	b480      	push	{r7}
 8001026:	b08b      	sub	sp, #44	@ 0x2c
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
    // Inicializando a matriz identidade na matriz inversa
    for (int i = 0; i < N; i++) {
 800102e:	2300      	movs	r3, #0
 8001030:	627b      	str	r3, [r7, #36]	@ 0x24
 8001032:	e02c      	b.n	800108e <inverter_matriz+0x6a>
        for (int j = 0; j < N; j++) {
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
 8001038:	e023      	b.n	8001082 <inverter_matriz+0x5e>
            if (i == j) {
 800103a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800103c:	6a3b      	ldr	r3, [r7, #32]
 800103e:	429a      	cmp	r2, r3
 8001040:	d10e      	bne.n	8001060 <inverter_matriz+0x3c>
                inversa[i][j] = 1;
 8001042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001044:	4613      	mov	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	4413      	add	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	461a      	mov	r2, r3
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	441a      	add	r2, r3
 8001052:	6a3b      	ldr	r3, [r7, #32]
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4413      	add	r3, r2
 8001058:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	e00d      	b.n	800107c <inverter_matriz+0x58>
            } else {
                inversa[i][j] = 0;
 8001060:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001062:	4613      	mov	r3, r2
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	4413      	add	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	461a      	mov	r2, r3
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	441a      	add	r2, r3
 8001070:	6a3b      	ldr	r3, [r7, #32]
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	4413      	add	r3, r2
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < N; j++) {
 800107c:	6a3b      	ldr	r3, [r7, #32]
 800107e:	3301      	adds	r3, #1
 8001080:	623b      	str	r3, [r7, #32]
 8001082:	6a3b      	ldr	r3, [r7, #32]
 8001084:	2b08      	cmp	r3, #8
 8001086:	ddd8      	ble.n	800103a <inverter_matriz+0x16>
    for (int i = 0; i < N; i++) {
 8001088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800108a:	3301      	adds	r3, #1
 800108c:	627b      	str	r3, [r7, #36]	@ 0x24
 800108e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001090:	2b08      	cmp	r3, #8
 8001092:	ddcf      	ble.n	8001034 <inverter_matriz+0x10>
            }
        }
    }

    // Aplicando o método de Gauss-Jordan
    for (int i = 0; i < N; i++)
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]
 8001098:	e0d1      	b.n	800123e <inverter_matriz+0x21a>
    {
        float pivot = matriz[i][i];
 800109a:	69fa      	ldr	r2, [r7, #28]
 800109c:	4613      	mov	r3, r2
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	4413      	add	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	461a      	mov	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	441a      	add	r2, r3
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	60fb      	str	r3, [r7, #12]
        for (int j = 0; j < N; j++)
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]
 80010b8:	e03e      	b.n	8001138 <inverter_matriz+0x114>
        {
            matriz[i][j] /= pivot;
 80010ba:	69fa      	ldr	r2, [r7, #28]
 80010bc:	4613      	mov	r3, r2
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	4413      	add	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	461a      	mov	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	441a      	add	r2, r3
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	edd3 6a00 	vldr	s13, [r3]
 80010d4:	69fa      	ldr	r2, [r7, #28]
 80010d6:	4613      	mov	r3, r2
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	4413      	add	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	461a      	mov	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	441a      	add	r2, r3
 80010e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80010e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	4413      	add	r3, r2
 80010f2:	edc3 7a00 	vstr	s15, [r3]
            inversa[i][j] /= pivot;
 80010f6:	69fa      	ldr	r2, [r7, #28]
 80010f8:	4613      	mov	r3, r2
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	4413      	add	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	461a      	mov	r2, r3
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	441a      	add	r2, r3
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	edd3 6a00 	vldr	s13, [r3]
 8001110:	69fa      	ldr	r2, [r7, #28]
 8001112:	4613      	mov	r3, r2
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	4413      	add	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	461a      	mov	r2, r3
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	441a      	add	r2, r3
 8001120:	ed97 7a03 	vldr	s14, [r7, #12]
 8001124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4413      	add	r3, r2
 800112e:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < N; j++)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	3301      	adds	r3, #1
 8001136:	61bb      	str	r3, [r7, #24]
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	2b08      	cmp	r3, #8
 800113c:	ddbd      	ble.n	80010ba <inverter_matriz+0x96>
        }

        for (int k = 0; k < N; k++)
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	e076      	b.n	8001232 <inverter_matriz+0x20e>
        {
            if (k != i)
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	429a      	cmp	r2, r3
 800114a:	d06f      	beq.n	800122c <inverter_matriz+0x208>
            {
                float fator = matriz[k][i];
 800114c:	697a      	ldr	r2, [r7, #20]
 800114e:	4613      	mov	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	4413      	add	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	461a      	mov	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	441a      	add	r2, r3
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	60bb      	str	r3, [r7, #8]
                for (int j = 0; j < N; j++)
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	e05c      	b.n	8001226 <inverter_matriz+0x202>
                {
                    matriz[k][j] -= fator * matriz[i][j];
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	4613      	mov	r3, r2
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	4413      	add	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	461a      	mov	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	441a      	add	r2, r3
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	ed93 7a00 	vldr	s14, [r3]
 8001186:	69fa      	ldr	r2, [r7, #28]
 8001188:	4613      	mov	r3, r2
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	4413      	add	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	461a      	mov	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	441a      	add	r2, r3
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	edd3 6a00 	vldr	s13, [r3]
 80011a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80011a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	4613      	mov	r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	4413      	add	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	461a      	mov	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	441a      	add	r2, r3
 80011b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	edc3 7a00 	vstr	s15, [r3]
                    inversa[k][j] -= fator * inversa[i][j];
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	4613      	mov	r3, r2
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	4413      	add	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	461a      	mov	r2, r3
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	441a      	add	r2, r3
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	ed93 7a00 	vldr	s14, [r3]
 80011e0:	69fa      	ldr	r2, [r7, #28]
 80011e2:	4613      	mov	r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	4413      	add	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	461a      	mov	r2, r3
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	441a      	add	r2, r3
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	edd3 6a00 	vldr	s13, [r3]
 80011fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80011fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	4613      	mov	r3, r2
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	4413      	add	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	461a      	mov	r2, r3
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	441a      	add	r2, r3
 8001212:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	edc3 7a00 	vstr	s15, [r3]
                for (int j = 0; j < N; j++)
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	3301      	adds	r3, #1
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	2b08      	cmp	r3, #8
 800122a:	dd9f      	ble.n	800116c <inverter_matriz+0x148>
        for (int k = 0; k < N; k++)
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	3301      	adds	r3, #1
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	2b08      	cmp	r3, #8
 8001236:	dd85      	ble.n	8001144 <inverter_matriz+0x120>
    for (int i = 0; i < N; i++)
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	3301      	adds	r3, #1
 800123c:	61fb      	str	r3, [r7, #28]
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	2b08      	cmp	r3, #8
 8001242:	f77f af2a 	ble.w	800109a <inverter_matriz+0x76>
                }
            }
        }
    }
}
 8001246:	bf00      	nop
 8001248:	bf00      	nop
 800124a:	372c      	adds	r7, #44	@ 0x2c
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	0000      	movs	r0, r0
	...

08001258 <NLLS>:


uint8_t NLLS(float *mx, float *my, float *mz, float *p)
{
 8001258:	b5b0      	push	{r4, r5, r7, lr}
 800125a:	f5ad 3db8 	sub.w	sp, sp, #94208	@ 0x17000
 800125e:	b090      	sub	sp, #64	@ 0x40
 8001260:	af00      	add	r7, sp, #0
 8001262:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001266:	f844 0c34 	str.w	r0, [r4, #-52]
 800126a:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800126e:	f840 1c38 	str.w	r1, [r0, #-56]
 8001272:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8001276:	f841 2c3c 	str.w	r2, [r1, #-60]
 800127a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800127e:	f842 3c40 	str.w	r3, [r2, #-64]
	uint8_t passo = 0, loop = 1;
 8001282:	2300      	movs	r3, #0
 8001284:	4a59      	ldr	r2, [pc, #356]	@ (80013ec <NLLS+0x194>)
 8001286:	443a      	add	r2, r7
 8001288:	7013      	strb	r3, [r2, #0]
 800128a:	2301      	movs	r3, #1
 800128c:	4a58      	ldr	r2, [pc, #352]	@ (80013f0 <NLLS+0x198>)
 800128e:	443a      	add	r2, r7
 8001290:	7013      	strb	r3, [r2, #0]
	float sf = 1;
 8001292:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001296:	4a57      	ldr	r2, [pc, #348]	@ (80013f4 <NLLS+0x19c>)
 8001298:	443a      	add	r2, r7
 800129a:	6013      	str	r3, [r2, #0]
	float p0[9] = {1, 1, 1, 0, 0, 0, 0, 0, 0}, Be[tam], e[tam], f[tam], sx, sy, sz, bx, by, bz, rho, phi, lambida, error_ant = 0, J, delta_J, mat_H[N][tam];
 800129c:	4b56      	ldr	r3, [pc, #344]	@ (80013f8 <NLLS+0x1a0>)
 800129e:	4c57      	ldr	r4, [pc, #348]	@ (80013fc <NLLS+0x1a4>)
 80012a0:	443c      	add	r4, r7
 80012a2:	461d      	mov	r5, r3
 80012a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ac:	682b      	ldr	r3, [r5, #0]
 80012ae:	6023      	str	r3, [r4, #0]
 80012b0:	f04f 0300 	mov.w	r3, #0
 80012b4:	4a52      	ldr	r2, [pc, #328]	@ (8001400 <NLLS+0x1a8>)
 80012b6:	443a      	add	r2, r7
 80012b8:	6013      	str	r3, [r2, #0]
	float sin_phi, sin_rho, sin_lambda, cos_phi, cos_rho, cos_lambda;
	float Ht_H[N][N], Ht_e[N], inv[N][N], mul_mat[N][tam];

	for (int i=0; i < tam; i++)
 80012ba:	2300      	movs	r3, #0
 80012bc:	4a51      	ldr	r2, [pc, #324]	@ (8001404 <NLLS+0x1ac>)
 80012be:	443a      	add	r2, r7
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	e013      	b.n	80012ec <NLLS+0x94>
	{
		Be[i] = 1*sf;
 80012c4:	4b50      	ldr	r3, [pc, #320]	@ (8001408 <NLLS+0x1b0>)
 80012c6:	443b      	add	r3, r7
 80012c8:	f5a3 7201 	sub.w	r2, r3, #516	@ 0x204
 80012cc:	4b4d      	ldr	r3, [pc, #308]	@ (8001404 <NLLS+0x1ac>)
 80012ce:	443b      	add	r3, r7
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	4a47      	ldr	r2, [pc, #284]	@ (80013f4 <NLLS+0x19c>)
 80012d8:	443a      	add	r2, r7
 80012da:	6812      	ldr	r2, [r2, #0]
 80012dc:	601a      	str	r2, [r3, #0]
	for (int i=0; i < tam; i++)
 80012de:	4b49      	ldr	r3, [pc, #292]	@ (8001404 <NLLS+0x1ac>)
 80012e0:	443b      	add	r3, r7
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	3301      	adds	r3, #1
 80012e6:	4a47      	ldr	r2, [pc, #284]	@ (8001404 <NLLS+0x1ac>)
 80012e8:	443a      	add	r2, r7
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	4b45      	ldr	r3, [pc, #276]	@ (8001404 <NLLS+0x1ac>)
 80012ee:	443b      	add	r3, r7
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 80012f6:	dbe5      	blt.n	80012c4 <NLLS+0x6c>
	}

	while(loop == 1)
 80012f8:	f003 b925 	b.w	8004546 <NLLS+0x32ee>
	{
		sx = p0[0];
 80012fc:	4b3f      	ldr	r3, [pc, #252]	@ (80013fc <NLLS+0x1a4>)
 80012fe:	443b      	add	r3, r7
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a42      	ldr	r2, [pc, #264]	@ (800140c <NLLS+0x1b4>)
 8001304:	443a      	add	r2, r7
 8001306:	6013      	str	r3, [r2, #0]
		sy = p0[1];
 8001308:	4b41      	ldr	r3, [pc, #260]	@ (8001410 <NLLS+0x1b8>)
 800130a:	443b      	add	r3, r7
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a41      	ldr	r2, [pc, #260]	@ (8001414 <NLLS+0x1bc>)
 8001310:	443a      	add	r2, r7
 8001312:	6013      	str	r3, [r2, #0]
		sz = p0[2];
 8001314:	4b40      	ldr	r3, [pc, #256]	@ (8001418 <NLLS+0x1c0>)
 8001316:	443b      	add	r3, r7
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a40      	ldr	r2, [pc, #256]	@ (800141c <NLLS+0x1c4>)
 800131c:	443a      	add	r2, r7
 800131e:	6013      	str	r3, [r2, #0]
		bx = p0[3];
 8001320:	4b3f      	ldr	r3, [pc, #252]	@ (8001420 <NLLS+0x1c8>)
 8001322:	443b      	add	r3, r7
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a3f      	ldr	r2, [pc, #252]	@ (8001424 <NLLS+0x1cc>)
 8001328:	443a      	add	r2, r7
 800132a:	6013      	str	r3, [r2, #0]
		by = p0[4];
 800132c:	4b3e      	ldr	r3, [pc, #248]	@ (8001428 <NLLS+0x1d0>)
 800132e:	443b      	add	r3, r7
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a3e      	ldr	r2, [pc, #248]	@ (800142c <NLLS+0x1d4>)
 8001334:	443a      	add	r2, r7
 8001336:	6013      	str	r3, [r2, #0]
		bz = p0[5];
 8001338:	4b3d      	ldr	r3, [pc, #244]	@ (8001430 <NLLS+0x1d8>)
 800133a:	443b      	add	r3, r7
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a3d      	ldr	r2, [pc, #244]	@ (8001434 <NLLS+0x1dc>)
 8001340:	443a      	add	r2, r7
 8001342:	6013      	str	r3, [r2, #0]
		rho = p0[6];
 8001344:	4b3c      	ldr	r3, [pc, #240]	@ (8001438 <NLLS+0x1e0>)
 8001346:	443b      	add	r3, r7
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a3c      	ldr	r2, [pc, #240]	@ (800143c <NLLS+0x1e4>)
 800134c:	443a      	add	r2, r7
 800134e:	6013      	str	r3, [r2, #0]
		phi = p0[7];
 8001350:	4b3b      	ldr	r3, [pc, #236]	@ (8001440 <NLLS+0x1e8>)
 8001352:	443b      	add	r3, r7
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a3b      	ldr	r2, [pc, #236]	@ (8001444 <NLLS+0x1ec>)
 8001358:	443a      	add	r2, r7
 800135a:	6013      	str	r3, [r2, #0]
		lambida = p0[8];
 800135c:	4b3a      	ldr	r3, [pc, #232]	@ (8001448 <NLLS+0x1f0>)
 800135e:	443b      	add	r3, r7
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a3a      	ldr	r2, [pc, #232]	@ (800144c <NLLS+0x1f4>)
 8001364:	443a      	add	r2, r7
 8001366:	6013      	str	r3, [r2, #0]

		sin_phi = sinf(phi);//phi - (phi*phi*phi)/6;// + (phi*phi*phi*phi*phi)/120;
 8001368:	4b36      	ldr	r3, [pc, #216]	@ (8001444 <NLLS+0x1ec>)
 800136a:	443b      	add	r3, r7
 800136c:	ed93 0a00 	vldr	s0, [r3]
 8001370:	f010 ff9c 	bl	80122ac <sinf>
 8001374:	4b36      	ldr	r3, [pc, #216]	@ (8001450 <NLLS+0x1f8>)
 8001376:	443b      	add	r3, r7
 8001378:	ed83 0a00 	vstr	s0, [r3]
		sin_rho = sinf(rho);//rho - (rho*rho*rho)/6;// + (rho*rho*rho*rho*rho)/120;
 800137c:	4b2f      	ldr	r3, [pc, #188]	@ (800143c <NLLS+0x1e4>)
 800137e:	443b      	add	r3, r7
 8001380:	ed93 0a00 	vldr	s0, [r3]
 8001384:	f010 ff92 	bl	80122ac <sinf>
 8001388:	4b32      	ldr	r3, [pc, #200]	@ (8001454 <NLLS+0x1fc>)
 800138a:	443b      	add	r3, r7
 800138c:	ed83 0a00 	vstr	s0, [r3]
		sin_lambda = sinf(lambida);//lambida - (lambida*lambida*lambida)/6;// + (lambida*lambida*lambida*lambida*lambida)/120;
 8001390:	4b2e      	ldr	r3, [pc, #184]	@ (800144c <NLLS+0x1f4>)
 8001392:	443b      	add	r3, r7
 8001394:	ed93 0a00 	vldr	s0, [r3]
 8001398:	f010 ff88 	bl	80122ac <sinf>
 800139c:	4b2e      	ldr	r3, [pc, #184]	@ (8001458 <NLLS+0x200>)
 800139e:	443b      	add	r3, r7
 80013a0:	ed83 0a00 	vstr	s0, [r3]
		cos_phi = cosf(phi);//1 - (phi*phi)/2;// + (phi*phi*phi*phi)/24;
 80013a4:	4b27      	ldr	r3, [pc, #156]	@ (8001444 <NLLS+0x1ec>)
 80013a6:	443b      	add	r3, r7
 80013a8:	ed93 0a00 	vldr	s0, [r3]
 80013ac:	f010 ff32 	bl	8012214 <cosf>
 80013b0:	4b2a      	ldr	r3, [pc, #168]	@ (800145c <NLLS+0x204>)
 80013b2:	443b      	add	r3, r7
 80013b4:	ed83 0a00 	vstr	s0, [r3]
		cos_rho = cosf(rho);//1 - (rho*rho)/2;// + (rho*rho*rho*rho)/24;
 80013b8:	4b20      	ldr	r3, [pc, #128]	@ (800143c <NLLS+0x1e4>)
 80013ba:	443b      	add	r3, r7
 80013bc:	ed93 0a00 	vldr	s0, [r3]
 80013c0:	f010 ff28 	bl	8012214 <cosf>
 80013c4:	4b26      	ldr	r3, [pc, #152]	@ (8001460 <NLLS+0x208>)
 80013c6:	443b      	add	r3, r7
 80013c8:	ed83 0a00 	vstr	s0, [r3]
		cos_lambda = cosf(lambida);//1 - (lambida*lambida)/2;// + (lambida*lambida*lambida*lambida)/24;
 80013cc:	4b1f      	ldr	r3, [pc, #124]	@ (800144c <NLLS+0x1f4>)
 80013ce:	443b      	add	r3, r7
 80013d0:	ed93 0a00 	vldr	s0, [r3]
 80013d4:	f010 ff1e 	bl	8012214 <cosf>
 80013d8:	4b22      	ldr	r3, [pc, #136]	@ (8001464 <NLLS+0x20c>)
 80013da:	443b      	add	r3, r7
 80013dc:	ed83 0a00 	vstr	s0, [r3]

		for(int i=0; i < tam; i++)
 80013e0:	2300      	movs	r3, #0
 80013e2:	4a21      	ldr	r2, [pc, #132]	@ (8001468 <NLLS+0x210>)
 80013e4:	443a      	add	r2, r7
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	f002 bdfb 	b.w	8003fe2 <NLLS+0x2d8a>
 80013ec:	0001703f 	.word	0x0001703f
 80013f0:	0001703e 	.word	0x0001703e
 80013f4:	00016fdc 	.word	0x00016fdc
 80013f8:	08012d30 	.word	0x08012d30
 80013fc:	00016f9c 	.word	0x00016f9c
 8001400:	00017014 	.word	0x00017014
 8001404:	0001700c 	.word	0x0001700c
 8001408:	00016040 	.word	0x00016040
 800140c:	00017038 	.word	0x00017038
 8001410:	00016fa0 	.word	0x00016fa0
 8001414:	00017034 	.word	0x00017034
 8001418:	00016fa4 	.word	0x00016fa4
 800141c:	00017030 	.word	0x00017030
 8001420:	00016fa8 	.word	0x00016fa8
 8001424:	0001702c 	.word	0x0001702c
 8001428:	00016fac 	.word	0x00016fac
 800142c:	00017028 	.word	0x00017028
 8001430:	00016fb0 	.word	0x00016fb0
 8001434:	00017024 	.word	0x00017024
 8001438:	00016fb4 	.word	0x00016fb4
 800143c:	00017020 	.word	0x00017020
 8001440:	00016fb8 	.word	0x00016fb8
 8001444:	0001701c 	.word	0x0001701c
 8001448:	00016fbc 	.word	0x00016fbc
 800144c:	00017018 	.word	0x00017018
 8001450:	00016fd8 	.word	0x00016fd8
 8001454:	00016fd4 	.word	0x00016fd4
 8001458:	00016fd0 	.word	0x00016fd0
 800145c:	00016fcc 	.word	0x00016fcc
 8001460:	00016fc8 	.word	0x00016fc8
 8001464:	00016fc4 	.word	0x00016fc4
 8001468:	00017008 	.word	0x00017008
		{
			f[i] = ((mx[i]-bx)*(mx[i]-bx))/(sx*sx) + ((sx*(my[i]-by) - sy*sin_rho*(mx[i]-bx))*((sx*(my[i]-by) - sy*sin_rho*(mx[i]-bx))))/((sx*sy*cos_rho)*(sx*sy*cos_rho)) + ((sx*sy*cos_rho*(mz[i]-bz) - sx*sz*sin_lambda*(my[i]-by) + sy*sz*(sin_lambda*sin_rho - cos_rho*sin_phi*cos_lambda)*(mx[i]-bx))*(sx*sy*cos_rho*(mz[i]-bz) - sx*sz*sin_lambda*(my[i]-by) + sy*sz*(sin_lambda*sin_rho - cos_rho*sin_phi*cos_lambda)*(mx[i]-bx)))/((sx*sy*sz*cos_rho*cos_phi*cos_lambda)*(sx*sy*sz*cos_rho*cos_phi*cos_lambda));
 800146c:	4bc1      	ldr	r3, [pc, #772]	@ (8001774 <NLLS+0x51c>)
 800146e:	443b      	add	r3, r7
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001478:	f852 2c34 	ldr.w	r2, [r2, #-52]
 800147c:	4413      	add	r3, r2
 800147e:	ed93 7a00 	vldr	s14, [r3]
 8001482:	4bbd      	ldr	r3, [pc, #756]	@ (8001778 <NLLS+0x520>)
 8001484:	443b      	add	r3, r7
 8001486:	edd3 7a00 	vldr	s15, [r3]
 800148a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800148e:	4bb9      	ldr	r3, [pc, #740]	@ (8001774 <NLLS+0x51c>)
 8001490:	443b      	add	r3, r7
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800149a:	f852 2c34 	ldr.w	r2, [r2, #-52]
 800149e:	4413      	add	r3, r2
 80014a0:	edd3 6a00 	vldr	s13, [r3]
 80014a4:	4bb4      	ldr	r3, [pc, #720]	@ (8001778 <NLLS+0x520>)
 80014a6:	443b      	add	r3, r7
 80014a8:	edd3 7a00 	vldr	s15, [r3]
 80014ac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80014b0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80014b4:	4bb1      	ldr	r3, [pc, #708]	@ (800177c <NLLS+0x524>)
 80014b6:	443b      	add	r3, r7
 80014b8:	edd3 7a00 	vldr	s15, [r3]
 80014bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014c4:	4bab      	ldr	r3, [pc, #684]	@ (8001774 <NLLS+0x51c>)
 80014c6:	443b      	add	r3, r7
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80014d0:	f852 2c38 	ldr.w	r2, [r2, #-56]
 80014d4:	4413      	add	r3, r2
 80014d6:	edd3 6a00 	vldr	s13, [r3]
 80014da:	4ba9      	ldr	r3, [pc, #676]	@ (8001780 <NLLS+0x528>)
 80014dc:	443b      	add	r3, r7
 80014de:	edd3 7a00 	vldr	s15, [r3]
 80014e2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014e6:	4ba5      	ldr	r3, [pc, #660]	@ (800177c <NLLS+0x524>)
 80014e8:	443b      	add	r3, r7
 80014ea:	edd3 7a00 	vldr	s15, [r3]
 80014ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014f2:	4ba4      	ldr	r3, [pc, #656]	@ (8001784 <NLLS+0x52c>)
 80014f4:	443b      	add	r3, r7
 80014f6:	ed93 6a00 	vldr	s12, [r3]
 80014fa:	4ba3      	ldr	r3, [pc, #652]	@ (8001788 <NLLS+0x530>)
 80014fc:	443b      	add	r3, r7
 80014fe:	edd3 7a00 	vldr	s15, [r3]
 8001502:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001506:	4b9b      	ldr	r3, [pc, #620]	@ (8001774 <NLLS+0x51c>)
 8001508:	443b      	add	r3, r7
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001512:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8001516:	4413      	add	r3, r2
 8001518:	edd3 5a00 	vldr	s11, [r3]
 800151c:	4b96      	ldr	r3, [pc, #600]	@ (8001778 <NLLS+0x520>)
 800151e:	443b      	add	r3, r7
 8001520:	edd3 7a00 	vldr	s15, [r3]
 8001524:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001528:	ee66 7a27 	vmul.f32	s15, s12, s15
 800152c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001530:	4b90      	ldr	r3, [pc, #576]	@ (8001774 <NLLS+0x51c>)
 8001532:	443b      	add	r3, r7
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800153c:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8001540:	4413      	add	r3, r2
 8001542:	ed93 6a00 	vldr	s12, [r3]
 8001546:	4b8e      	ldr	r3, [pc, #568]	@ (8001780 <NLLS+0x528>)
 8001548:	443b      	add	r3, r7
 800154a:	edd3 7a00 	vldr	s15, [r3]
 800154e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001552:	4b8a      	ldr	r3, [pc, #552]	@ (800177c <NLLS+0x524>)
 8001554:	443b      	add	r3, r7
 8001556:	edd3 7a00 	vldr	s15, [r3]
 800155a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800155e:	4b89      	ldr	r3, [pc, #548]	@ (8001784 <NLLS+0x52c>)
 8001560:	443b      	add	r3, r7
 8001562:	edd3 5a00 	vldr	s11, [r3]
 8001566:	4b88      	ldr	r3, [pc, #544]	@ (8001788 <NLLS+0x530>)
 8001568:	443b      	add	r3, r7
 800156a:	edd3 7a00 	vldr	s15, [r3]
 800156e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001572:	4b80      	ldr	r3, [pc, #512]	@ (8001774 <NLLS+0x51c>)
 8001574:	443b      	add	r3, r7
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800157e:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8001582:	4413      	add	r3, r2
 8001584:	ed93 5a00 	vldr	s10, [r3]
 8001588:	4b7b      	ldr	r3, [pc, #492]	@ (8001778 <NLLS+0x520>)
 800158a:	443b      	add	r3, r7
 800158c:	edd3 7a00 	vldr	s15, [r3]
 8001590:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001594:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001598:	ee76 7a67 	vsub.f32	s15, s12, s15
 800159c:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80015a0:	4b76      	ldr	r3, [pc, #472]	@ (800177c <NLLS+0x524>)
 80015a2:	443b      	add	r3, r7
 80015a4:	edd3 6a00 	vldr	s13, [r3]
 80015a8:	4b76      	ldr	r3, [pc, #472]	@ (8001784 <NLLS+0x52c>)
 80015aa:	443b      	add	r3, r7
 80015ac:	edd3 7a00 	vldr	s15, [r3]
 80015b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015b4:	4b75      	ldr	r3, [pc, #468]	@ (800178c <NLLS+0x534>)
 80015b6:	443b      	add	r3, r7
 80015b8:	edd3 7a00 	vldr	s15, [r3]
 80015bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015c0:	4b6e      	ldr	r3, [pc, #440]	@ (800177c <NLLS+0x524>)
 80015c2:	443b      	add	r3, r7
 80015c4:	edd3 5a00 	vldr	s11, [r3]
 80015c8:	4b6e      	ldr	r3, [pc, #440]	@ (8001784 <NLLS+0x52c>)
 80015ca:	443b      	add	r3, r7
 80015cc:	edd3 7a00 	vldr	s15, [r3]
 80015d0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80015d4:	4b6d      	ldr	r3, [pc, #436]	@ (800178c <NLLS+0x534>)
 80015d6:	443b      	add	r3, r7
 80015d8:	edd3 7a00 	vldr	s15, [r3]
 80015dc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80015e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015e4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80015e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015ec:	4b63      	ldr	r3, [pc, #396]	@ (800177c <NLLS+0x524>)
 80015ee:	443b      	add	r3, r7
 80015f0:	edd3 6a00 	vldr	s13, [r3]
 80015f4:	4b63      	ldr	r3, [pc, #396]	@ (8001784 <NLLS+0x52c>)
 80015f6:	443b      	add	r3, r7
 80015f8:	edd3 7a00 	vldr	s15, [r3]
 80015fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001600:	4b62      	ldr	r3, [pc, #392]	@ (800178c <NLLS+0x534>)
 8001602:	443b      	add	r3, r7
 8001604:	edd3 7a00 	vldr	s15, [r3]
 8001608:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800160c:	4b59      	ldr	r3, [pc, #356]	@ (8001774 <NLLS+0x51c>)
 800160e:	443b      	add	r3, r7
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001618:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 800161c:	4413      	add	r3, r2
 800161e:	ed93 6a00 	vldr	s12, [r3]
 8001622:	4b5b      	ldr	r3, [pc, #364]	@ (8001790 <NLLS+0x538>)
 8001624:	443b      	add	r3, r7
 8001626:	edd3 7a00 	vldr	s15, [r3]
 800162a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800162e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001632:	4b52      	ldr	r3, [pc, #328]	@ (800177c <NLLS+0x524>)
 8001634:	443b      	add	r3, r7
 8001636:	ed93 6a00 	vldr	s12, [r3]
 800163a:	4b56      	ldr	r3, [pc, #344]	@ (8001794 <NLLS+0x53c>)
 800163c:	443b      	add	r3, r7
 800163e:	edd3 7a00 	vldr	s15, [r3]
 8001642:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001646:	4b54      	ldr	r3, [pc, #336]	@ (8001798 <NLLS+0x540>)
 8001648:	443b      	add	r3, r7
 800164a:	edd3 7a00 	vldr	s15, [r3]
 800164e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001652:	4b48      	ldr	r3, [pc, #288]	@ (8001774 <NLLS+0x51c>)
 8001654:	443b      	add	r3, r7
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800165e:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8001662:	4413      	add	r3, r2
 8001664:	edd3 5a00 	vldr	s11, [r3]
 8001668:	4b45      	ldr	r3, [pc, #276]	@ (8001780 <NLLS+0x528>)
 800166a:	443b      	add	r3, r7
 800166c:	edd3 7a00 	vldr	s15, [r3]
 8001670:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001674:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001678:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800167c:	4b41      	ldr	r3, [pc, #260]	@ (8001784 <NLLS+0x52c>)
 800167e:	443b      	add	r3, r7
 8001680:	ed93 6a00 	vldr	s12, [r3]
 8001684:	4b43      	ldr	r3, [pc, #268]	@ (8001794 <NLLS+0x53c>)
 8001686:	443b      	add	r3, r7
 8001688:	edd3 7a00 	vldr	s15, [r3]
 800168c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001690:	4b41      	ldr	r3, [pc, #260]	@ (8001798 <NLLS+0x540>)
 8001692:	443b      	add	r3, r7
 8001694:	edd3 5a00 	vldr	s11, [r3]
 8001698:	4b3b      	ldr	r3, [pc, #236]	@ (8001788 <NLLS+0x530>)
 800169a:	443b      	add	r3, r7
 800169c:	edd3 7a00 	vldr	s15, [r3]
 80016a0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80016a4:	4b39      	ldr	r3, [pc, #228]	@ (800178c <NLLS+0x534>)
 80016a6:	443b      	add	r3, r7
 80016a8:	ed93 5a00 	vldr	s10, [r3]
 80016ac:	4b3b      	ldr	r3, [pc, #236]	@ (800179c <NLLS+0x544>)
 80016ae:	443b      	add	r3, r7
 80016b0:	edd3 7a00 	vldr	s15, [r3]
 80016b4:	ee25 5a27 	vmul.f32	s10, s10, s15
 80016b8:	4b39      	ldr	r3, [pc, #228]	@ (80017a0 <NLLS+0x548>)
 80016ba:	443b      	add	r3, r7
 80016bc:	edd3 7a00 	vldr	s15, [r3]
 80016c0:	ee65 7a27 	vmul.f32	s15, s10, s15
 80016c4:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80016c8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80016cc:	4b29      	ldr	r3, [pc, #164]	@ (8001774 <NLLS+0x51c>)
 80016ce:	443b      	add	r3, r7
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80016d8:	f852 2c34 	ldr.w	r2, [r2, #-52]
 80016dc:	4413      	add	r3, r2
 80016de:	edd3 5a00 	vldr	s11, [r3]
 80016e2:	4b25      	ldr	r3, [pc, #148]	@ (8001778 <NLLS+0x520>)
 80016e4:	443b      	add	r3, r7
 80016e6:	edd3 7a00 	vldr	s15, [r3]
 80016ea:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80016ee:	ee66 7a27 	vmul.f32	s15, s12, s15
 80016f2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80016f6:	4b21      	ldr	r3, [pc, #132]	@ (800177c <NLLS+0x524>)
 80016f8:	443b      	add	r3, r7
 80016fa:	ed93 6a00 	vldr	s12, [r3]
 80016fe:	4b21      	ldr	r3, [pc, #132]	@ (8001784 <NLLS+0x52c>)
 8001700:	443b      	add	r3, r7
 8001702:	edd3 7a00 	vldr	s15, [r3]
 8001706:	ee26 6a27 	vmul.f32	s12, s12, s15
 800170a:	4b20      	ldr	r3, [pc, #128]	@ (800178c <NLLS+0x534>)
 800170c:	443b      	add	r3, r7
 800170e:	edd3 7a00 	vldr	s15, [r3]
 8001712:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001716:	4b17      	ldr	r3, [pc, #92]	@ (8001774 <NLLS+0x51c>)
 8001718:	443b      	add	r3, r7
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001722:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8001726:	4413      	add	r3, r2
 8001728:	edd3 5a00 	vldr	s11, [r3]
 800172c:	4b18      	ldr	r3, [pc, #96]	@ (8001790 <NLLS+0x538>)
 800172e:	443b      	add	r3, r7
 8001730:	edd3 7a00 	vldr	s15, [r3]
 8001734:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001738:	ee26 6a27 	vmul.f32	s12, s12, s15
 800173c:	4b0f      	ldr	r3, [pc, #60]	@ (800177c <NLLS+0x524>)
 800173e:	443b      	add	r3, r7
 8001740:	edd3 5a00 	vldr	s11, [r3]
 8001744:	4b13      	ldr	r3, [pc, #76]	@ (8001794 <NLLS+0x53c>)
 8001746:	443b      	add	r3, r7
 8001748:	edd3 7a00 	vldr	s15, [r3]
 800174c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001750:	4b11      	ldr	r3, [pc, #68]	@ (8001798 <NLLS+0x540>)
 8001752:	443b      	add	r3, r7
 8001754:	edd3 7a00 	vldr	s15, [r3]
 8001758:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800175c:	4b05      	ldr	r3, [pc, #20]	@ (8001774 <NLLS+0x51c>)
 800175e:	443b      	add	r3, r7
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001768:	f852 2c38 	ldr.w	r2, [r2, #-56]
 800176c:	4413      	add	r3, r2
 800176e:	ed93 5a00 	vldr	s10, [r3]
 8001772:	e017      	b.n	80017a4 <NLLS+0x54c>
 8001774:	00017008 	.word	0x00017008
 8001778:	0001702c 	.word	0x0001702c
 800177c:	00017038 	.word	0x00017038
 8001780:	00017028 	.word	0x00017028
 8001784:	00017034 	.word	0x00017034
 8001788:	00016fd4 	.word	0x00016fd4
 800178c:	00016fc8 	.word	0x00016fc8
 8001790:	00017024 	.word	0x00017024
 8001794:	00017030 	.word	0x00017030
 8001798:	00016fd0 	.word	0x00016fd0
 800179c:	00016fd8 	.word	0x00016fd8
 80017a0:	00016fc4 	.word	0x00016fc4
 80017a4:	4bc0      	ldr	r3, [pc, #768]	@ (8001aa8 <NLLS+0x850>)
 80017a6:	443b      	add	r3, r7
 80017a8:	edd3 7a00 	vldr	s15, [r3]
 80017ac:	ee75 7a67 	vsub.f32	s15, s10, s15
 80017b0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80017b4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80017b8:	4bbc      	ldr	r3, [pc, #752]	@ (8001aac <NLLS+0x854>)
 80017ba:	443b      	add	r3, r7
 80017bc:	edd3 5a00 	vldr	s11, [r3]
 80017c0:	4bbb      	ldr	r3, [pc, #748]	@ (8001ab0 <NLLS+0x858>)
 80017c2:	443b      	add	r3, r7
 80017c4:	edd3 7a00 	vldr	s15, [r3]
 80017c8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80017cc:	4bb9      	ldr	r3, [pc, #740]	@ (8001ab4 <NLLS+0x85c>)
 80017ce:	443b      	add	r3, r7
 80017d0:	ed93 5a00 	vldr	s10, [r3]
 80017d4:	4bb8      	ldr	r3, [pc, #736]	@ (8001ab8 <NLLS+0x860>)
 80017d6:	443b      	add	r3, r7
 80017d8:	edd3 7a00 	vldr	s15, [r3]
 80017dc:	ee25 5a27 	vmul.f32	s10, s10, s15
 80017e0:	4bb6      	ldr	r3, [pc, #728]	@ (8001abc <NLLS+0x864>)
 80017e2:	443b      	add	r3, r7
 80017e4:	edd3 4a00 	vldr	s9, [r3]
 80017e8:	4bb5      	ldr	r3, [pc, #724]	@ (8001ac0 <NLLS+0x868>)
 80017ea:	443b      	add	r3, r7
 80017ec:	edd3 7a00 	vldr	s15, [r3]
 80017f0:	ee64 4aa7 	vmul.f32	s9, s9, s15
 80017f4:	4bb3      	ldr	r3, [pc, #716]	@ (8001ac4 <NLLS+0x86c>)
 80017f6:	443b      	add	r3, r7
 80017f8:	edd3 7a00 	vldr	s15, [r3]
 80017fc:	ee64 7aa7 	vmul.f32	s15, s9, s15
 8001800:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001804:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001808:	4baf      	ldr	r3, [pc, #700]	@ (8001ac8 <NLLS+0x870>)
 800180a:	443b      	add	r3, r7
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001814:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8001818:	4413      	add	r3, r2
 800181a:	ed93 5a00 	vldr	s10, [r3]
 800181e:	4bab      	ldr	r3, [pc, #684]	@ (8001acc <NLLS+0x874>)
 8001820:	443b      	add	r3, r7
 8001822:	edd3 7a00 	vldr	s15, [r3]
 8001826:	ee75 7a67 	vsub.f32	s15, s10, s15
 800182a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800182e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001832:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001836:	4ba6      	ldr	r3, [pc, #664]	@ (8001ad0 <NLLS+0x878>)
 8001838:	443b      	add	r3, r7
 800183a:	edd3 6a00 	vldr	s13, [r3]
 800183e:	4b9b      	ldr	r3, [pc, #620]	@ (8001aac <NLLS+0x854>)
 8001840:	443b      	add	r3, r7
 8001842:	edd3 7a00 	vldr	s15, [r3]
 8001846:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800184a:	4b99      	ldr	r3, [pc, #612]	@ (8001ab0 <NLLS+0x858>)
 800184c:	443b      	add	r3, r7
 800184e:	edd3 7a00 	vldr	s15, [r3]
 8001852:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001856:	4b99      	ldr	r3, [pc, #612]	@ (8001abc <NLLS+0x864>)
 8001858:	443b      	add	r3, r7
 800185a:	edd3 7a00 	vldr	s15, [r3]
 800185e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001862:	4b9c      	ldr	r3, [pc, #624]	@ (8001ad4 <NLLS+0x87c>)
 8001864:	443b      	add	r3, r7
 8001866:	edd3 7a00 	vldr	s15, [r3]
 800186a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800186e:	4b95      	ldr	r3, [pc, #596]	@ (8001ac4 <NLLS+0x86c>)
 8001870:	443b      	add	r3, r7
 8001872:	edd3 7a00 	vldr	s15, [r3]
 8001876:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800187a:	4b95      	ldr	r3, [pc, #596]	@ (8001ad0 <NLLS+0x878>)
 800187c:	443b      	add	r3, r7
 800187e:	edd3 5a00 	vldr	s11, [r3]
 8001882:	4b8a      	ldr	r3, [pc, #552]	@ (8001aac <NLLS+0x854>)
 8001884:	443b      	add	r3, r7
 8001886:	edd3 7a00 	vldr	s15, [r3]
 800188a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800188e:	4b88      	ldr	r3, [pc, #544]	@ (8001ab0 <NLLS+0x858>)
 8001890:	443b      	add	r3, r7
 8001892:	edd3 7a00 	vldr	s15, [r3]
 8001896:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800189a:	4b88      	ldr	r3, [pc, #544]	@ (8001abc <NLLS+0x864>)
 800189c:	443b      	add	r3, r7
 800189e:	edd3 7a00 	vldr	s15, [r3]
 80018a2:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80018a6:	4b8b      	ldr	r3, [pc, #556]	@ (8001ad4 <NLLS+0x87c>)
 80018a8:	443b      	add	r3, r7
 80018aa:	edd3 7a00 	vldr	s15, [r3]
 80018ae:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80018b2:	4b84      	ldr	r3, [pc, #528]	@ (8001ac4 <NLLS+0x86c>)
 80018b4:	443b      	add	r3, r7
 80018b6:	edd3 7a00 	vldr	s15, [r3]
 80018ba:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80018be:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018c2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80018c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ca:	4b83      	ldr	r3, [pc, #524]	@ (8001ad8 <NLLS+0x880>)
 80018cc:	443b      	add	r3, r7
 80018ce:	f2a3 42c4 	subw	r2, r3, #1220	@ 0x4c4
 80018d2:	4b7d      	ldr	r3, [pc, #500]	@ (8001ac8 <NLLS+0x870>)
 80018d4:	443b      	add	r3, r7
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	edc3 7a00 	vstr	s15, [r3]

			e[i] = (Be[i] * Be[i]) - f[i];
 80018e0:	4b7e      	ldr	r3, [pc, #504]	@ (8001adc <NLLS+0x884>)
 80018e2:	443b      	add	r3, r7
 80018e4:	f5a3 7201 	sub.w	r2, r3, #516	@ 0x204
 80018e8:	4b77      	ldr	r3, [pc, #476]	@ (8001ac8 <NLLS+0x870>)
 80018ea:	443b      	add	r3, r7
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	ed93 7a00 	vldr	s14, [r3]
 80018f6:	4b79      	ldr	r3, [pc, #484]	@ (8001adc <NLLS+0x884>)
 80018f8:	443b      	add	r3, r7
 80018fa:	f5a3 7201 	sub.w	r2, r3, #516	@ 0x204
 80018fe:	4b72      	ldr	r3, [pc, #456]	@ (8001ac8 <NLLS+0x870>)
 8001900:	443b      	add	r3, r7
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	edd3 7a00 	vldr	s15, [r3]
 800190c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001910:	4b71      	ldr	r3, [pc, #452]	@ (8001ad8 <NLLS+0x880>)
 8001912:	443b      	add	r3, r7
 8001914:	f2a3 42c4 	subw	r2, r3, #1220	@ 0x4c4
 8001918:	4b6b      	ldr	r3, [pc, #428]	@ (8001ac8 <NLLS+0x870>)
 800191a:	443b      	add	r3, r7
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	edd3 7a00 	vldr	s15, [r3]
 8001926:	ee77 7a67 	vsub.f32	s15, s14, s15
 800192a:	4b6d      	ldr	r3, [pc, #436]	@ (8001ae0 <NLLS+0x888>)
 800192c:	443b      	add	r3, r7
 800192e:	f5a3 7259 	sub.w	r2, r3, #868	@ 0x364
 8001932:	4b65      	ldr	r3, [pc, #404]	@ (8001ac8 <NLLS+0x870>)
 8001934:	443b      	add	r3, r7
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	edc3 7a00 	vstr	s15, [r3]

			mat_H[0][i] = (2*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))*(by - my[i]))/(sx*sx*sy*sy*cos_rho*cos_rho) - (2*((sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))))/((sx*sx*sx)*sy*sy*cos_rho*cos_rho) - (2*((bx - mx[i])*(bx - mx[i])))/(sx*sx*sx) - (2*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])) * (sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/((sx*sx*sx)*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho) + (2*(sy*cos_rho*(bz - mz[i]) - sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8001940:	4b61      	ldr	r3, [pc, #388]	@ (8001ac8 <NLLS+0x870>)
 8001942:	443b      	add	r3, r7
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800194c:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8001950:	4413      	add	r3, r2
 8001952:	edd3 7a00 	vldr	s15, [r3]
 8001956:	4b54      	ldr	r3, [pc, #336]	@ (8001aa8 <NLLS+0x850>)
 8001958:	443b      	add	r3, r7
 800195a:	ed93 7a00 	vldr	s14, [r3]
 800195e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001962:	4b5b      	ldr	r3, [pc, #364]	@ (8001ad0 <NLLS+0x878>)
 8001964:	443b      	add	r3, r7
 8001966:	edd3 7a00 	vldr	s15, [r3]
 800196a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800196e:	4b4f      	ldr	r3, [pc, #316]	@ (8001aac <NLLS+0x854>)
 8001970:	443b      	add	r3, r7
 8001972:	edd3 6a00 	vldr	s13, [r3]
 8001976:	4b50      	ldr	r3, [pc, #320]	@ (8001ab8 <NLLS+0x860>)
 8001978:	443b      	add	r3, r7
 800197a:	edd3 7a00 	vldr	s15, [r3]
 800197e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001982:	4b51      	ldr	r3, [pc, #324]	@ (8001ac8 <NLLS+0x870>)
 8001984:	443b      	add	r3, r7
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800198e:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8001992:	4413      	add	r3, r2
 8001994:	edd3 7a00 	vldr	s15, [r3]
 8001998:	4b4c      	ldr	r3, [pc, #304]	@ (8001acc <NLLS+0x874>)
 800199a:	443b      	add	r3, r7
 800199c:	ed93 6a00 	vldr	s12, [r3]
 80019a0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80019a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ac:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80019b0:	4b45      	ldr	r3, [pc, #276]	@ (8001ac8 <NLLS+0x870>)
 80019b2:	443b      	add	r3, r7
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80019bc:	f852 2c38 	ldr.w	r2, [r2, #-56]
 80019c0:	4413      	add	r3, r2
 80019c2:	edd3 7a00 	vldr	s15, [r3]
 80019c6:	4b38      	ldr	r3, [pc, #224]	@ (8001aa8 <NLLS+0x850>)
 80019c8:	443b      	add	r3, r7
 80019ca:	edd3 6a00 	vldr	s13, [r3]
 80019ce:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019d2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80019d6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ad0 <NLLS+0x878>)
 80019d8:	443b      	add	r3, r7
 80019da:	edd3 7a00 	vldr	s15, [r3]
 80019de:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80019e2:	4b32      	ldr	r3, [pc, #200]	@ (8001aac <NLLS+0x854>)
 80019e4:	443b      	add	r3, r7
 80019e6:	edd3 7a00 	vldr	s15, [r3]
 80019ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ee:	4b2f      	ldr	r3, [pc, #188]	@ (8001aac <NLLS+0x854>)
 80019f0:	443b      	add	r3, r7
 80019f2:	edd3 7a00 	vldr	s15, [r3]
 80019f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019fa:	4b30      	ldr	r3, [pc, #192]	@ (8001abc <NLLS+0x864>)
 80019fc:	443b      	add	r3, r7
 80019fe:	edd3 7a00 	vldr	s15, [r3]
 8001a02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a06:	4b2d      	ldr	r3, [pc, #180]	@ (8001abc <NLLS+0x864>)
 8001a08:	443b      	add	r3, r7
 8001a0a:	edd3 7a00 	vldr	s15, [r3]
 8001a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a16:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac8 <NLLS+0x870>)
 8001a18:	443b      	add	r3, r7
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001a22:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8001a26:	4413      	add	r3, r2
 8001a28:	edd3 7a00 	vldr	s15, [r3]
 8001a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa8 <NLLS+0x850>)
 8001a2e:	443b      	add	r3, r7
 8001a30:	edd3 6a00 	vldr	s13, [r3]
 8001a34:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a38:	4b25      	ldr	r3, [pc, #148]	@ (8001ad0 <NLLS+0x878>)
 8001a3a:	443b      	add	r3, r7
 8001a3c:	edd3 7a00 	vldr	s15, [r3]
 8001a40:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a44:	4b19      	ldr	r3, [pc, #100]	@ (8001aac <NLLS+0x854>)
 8001a46:	443b      	add	r3, r7
 8001a48:	ed93 6a00 	vldr	s12, [r3]
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab8 <NLLS+0x860>)
 8001a4e:	443b      	add	r3, r7
 8001a50:	edd3 7a00 	vldr	s15, [r3]
 8001a54:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a58:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac8 <NLLS+0x870>)
 8001a5a:	443b      	add	r3, r7
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001a64:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8001a68:	4413      	add	r3, r2
 8001a6a:	edd3 7a00 	vldr	s15, [r3]
 8001a6e:	4b17      	ldr	r3, [pc, #92]	@ (8001acc <NLLS+0x874>)
 8001a70:	443b      	add	r3, r7
 8001a72:	edd3 5a00 	vldr	s11, [r3]
 8001a76:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001a7a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a7e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a82:	4b11      	ldr	r3, [pc, #68]	@ (8001ac8 <NLLS+0x870>)
 8001a84:	443b      	add	r3, r7
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001a8e:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8001a92:	4413      	add	r3, r2
 8001a94:	edd3 7a00 	vldr	s15, [r3]
 8001a98:	4b03      	ldr	r3, [pc, #12]	@ (8001aa8 <NLLS+0x850>)
 8001a9a:	443b      	add	r3, r7
 8001a9c:	ed93 6a00 	vldr	s12, [r3]
 8001aa0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001aa4:	e01e      	b.n	8001ae4 <NLLS+0x88c>
 8001aa6:	bf00      	nop
 8001aa8:	00017028 	.word	0x00017028
 8001aac:	00017034 	.word	0x00017034
 8001ab0:	00017030 	.word	0x00017030
 8001ab4:	00016fd0 	.word	0x00016fd0
 8001ab8:	00016fd4 	.word	0x00016fd4
 8001abc:	00016fc8 	.word	0x00016fc8
 8001ac0:	00016fd8 	.word	0x00016fd8
 8001ac4:	00016fc4 	.word	0x00016fc4
 8001ac8:	00017008 	.word	0x00017008
 8001acc:	0001702c 	.word	0x0001702c
 8001ad0:	00017038 	.word	0x00017038
 8001ad4:	00016fcc 	.word	0x00016fcc
 8001ad8:	00014040 	.word	0x00014040
 8001adc:	00016040 	.word	0x00016040
 8001ae0:	00015040 	.word	0x00015040
 8001ae4:	4bc2      	ldr	r3, [pc, #776]	@ (8001df0 <NLLS+0xb98>)
 8001ae6:	443b      	add	r3, r7
 8001ae8:	edd3 7a00 	vldr	s15, [r3]
 8001aec:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001af0:	4bc0      	ldr	r3, [pc, #768]	@ (8001df4 <NLLS+0xb9c>)
 8001af2:	443b      	add	r3, r7
 8001af4:	edd3 5a00 	vldr	s11, [r3]
 8001af8:	4bbf      	ldr	r3, [pc, #764]	@ (8001df8 <NLLS+0xba0>)
 8001afa:	443b      	add	r3, r7
 8001afc:	edd3 7a00 	vldr	s15, [r3]
 8001b00:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001b04:	4bbd      	ldr	r3, [pc, #756]	@ (8001dfc <NLLS+0xba4>)
 8001b06:	443b      	add	r3, r7
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001b10:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8001b14:	4413      	add	r3, r2
 8001b16:	edd3 7a00 	vldr	s15, [r3]
 8001b1a:	4bb9      	ldr	r3, [pc, #740]	@ (8001e00 <NLLS+0xba8>)
 8001b1c:	443b      	add	r3, r7
 8001b1e:	ed93 5a00 	vldr	s10, [r3]
 8001b22:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001b26:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b2a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b32:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8001b36:	4bae      	ldr	r3, [pc, #696]	@ (8001df0 <NLLS+0xb98>)
 8001b38:	443b      	add	r3, r7
 8001b3a:	edd3 7a00 	vldr	s15, [r3]
 8001b3e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001b42:	4bab      	ldr	r3, [pc, #684]	@ (8001df0 <NLLS+0xb98>)
 8001b44:	443b      	add	r3, r7
 8001b46:	edd3 7a00 	vldr	s15, [r3]
 8001b4a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b4e:	4ba9      	ldr	r3, [pc, #676]	@ (8001df4 <NLLS+0xb9c>)
 8001b50:	443b      	add	r3, r7
 8001b52:	edd3 7a00 	vldr	s15, [r3]
 8001b56:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b5a:	4ba6      	ldr	r3, [pc, #664]	@ (8001df4 <NLLS+0xb9c>)
 8001b5c:	443b      	add	r3, r7
 8001b5e:	edd3 7a00 	vldr	s15, [r3]
 8001b62:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b66:	4ba7      	ldr	r3, [pc, #668]	@ (8001e04 <NLLS+0xbac>)
 8001b68:	443b      	add	r3, r7
 8001b6a:	edd3 7a00 	vldr	s15, [r3]
 8001b6e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b72:	4ba4      	ldr	r3, [pc, #656]	@ (8001e04 <NLLS+0xbac>)
 8001b74:	443b      	add	r3, r7
 8001b76:	edd3 7a00 	vldr	s15, [r3]
 8001b7a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b7e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001b82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b86:	4b9d      	ldr	r3, [pc, #628]	@ (8001dfc <NLLS+0xba4>)
 8001b88:	443b      	add	r3, r7
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001b92:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8001b96:	4413      	add	r3, r2
 8001b98:	edd3 7a00 	vldr	s15, [r3]
 8001b9c:	4b98      	ldr	r3, [pc, #608]	@ (8001e00 <NLLS+0xba8>)
 8001b9e:	443b      	add	r3, r7
 8001ba0:	edd3 6a00 	vldr	s13, [r3]
 8001ba4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ba8:	4b94      	ldr	r3, [pc, #592]	@ (8001dfc <NLLS+0xba4>)
 8001baa:	443b      	add	r3, r7
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001bb4:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8001bb8:	4413      	add	r3, r2
 8001bba:	edd3 7a00 	vldr	s15, [r3]
 8001bbe:	4b90      	ldr	r3, [pc, #576]	@ (8001e00 <NLLS+0xba8>)
 8001bc0:	443b      	add	r3, r7
 8001bc2:	ed93 6a00 	vldr	s12, [r3]
 8001bc6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001bca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bce:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8001bd2:	4b87      	ldr	r3, [pc, #540]	@ (8001df0 <NLLS+0xb98>)
 8001bd4:	443b      	add	r3, r7
 8001bd6:	edd3 7a00 	vldr	s15, [r3]
 8001bda:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001bde:	4b84      	ldr	r3, [pc, #528]	@ (8001df0 <NLLS+0xb98>)
 8001be0:	443b      	add	r3, r7
 8001be2:	edd3 7a00 	vldr	s15, [r3]
 8001be6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bea:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001bee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bf2:	4b80      	ldr	r3, [pc, #512]	@ (8001df4 <NLLS+0xb9c>)
 8001bf4:	443b      	add	r3, r7
 8001bf6:	edd3 6a00 	vldr	s13, [r3]
 8001bfa:	4b83      	ldr	r3, [pc, #524]	@ (8001e08 <NLLS+0xbb0>)
 8001bfc:	443b      	add	r3, r7
 8001bfe:	edd3 7a00 	vldr	s15, [r3]
 8001c02:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c06:	4b81      	ldr	r3, [pc, #516]	@ (8001e0c <NLLS+0xbb4>)
 8001c08:	443b      	add	r3, r7
 8001c0a:	ed93 6a00 	vldr	s12, [r3]
 8001c0e:	4b7a      	ldr	r3, [pc, #488]	@ (8001df8 <NLLS+0xba0>)
 8001c10:	443b      	add	r3, r7
 8001c12:	edd3 7a00 	vldr	s15, [r3]
 8001c16:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c1a:	4b7d      	ldr	r3, [pc, #500]	@ (8001e10 <NLLS+0xbb8>)
 8001c1c:	443b      	add	r3, r7
 8001c1e:	edd3 5a00 	vldr	s11, [r3]
 8001c22:	4b78      	ldr	r3, [pc, #480]	@ (8001e04 <NLLS+0xbac>)
 8001c24:	443b      	add	r3, r7
 8001c26:	edd3 7a00 	vldr	s15, [r3]
 8001c2a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001c2e:	4b79      	ldr	r3, [pc, #484]	@ (8001e14 <NLLS+0xbbc>)
 8001c30:	443b      	add	r3, r7
 8001c32:	edd3 7a00 	vldr	s15, [r3]
 8001c36:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c3a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c42:	4b6e      	ldr	r3, [pc, #440]	@ (8001dfc <NLLS+0xba4>)
 8001c44:	443b      	add	r3, r7
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001c4e:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8001c52:	4413      	add	r3, r2
 8001c54:	edd3 7a00 	vldr	s15, [r3]
 8001c58:	4b69      	ldr	r3, [pc, #420]	@ (8001e00 <NLLS+0xba8>)
 8001c5a:	443b      	add	r3, r7
 8001c5c:	ed93 6a00 	vldr	s12, [r3]
 8001c60:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c64:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c68:	4b61      	ldr	r3, [pc, #388]	@ (8001df0 <NLLS+0xb98>)
 8001c6a:	443b      	add	r3, r7
 8001c6c:	ed93 6a00 	vldr	s12, [r3]
 8001c70:	4b60      	ldr	r3, [pc, #384]	@ (8001df4 <NLLS+0xb9c>)
 8001c72:	443b      	add	r3, r7
 8001c74:	edd3 7a00 	vldr	s15, [r3]
 8001c78:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c7c:	4b61      	ldr	r3, [pc, #388]	@ (8001e04 <NLLS+0xbac>)
 8001c7e:	443b      	add	r3, r7
 8001c80:	edd3 7a00 	vldr	s15, [r3]
 8001c84:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c88:	4b5c      	ldr	r3, [pc, #368]	@ (8001dfc <NLLS+0xba4>)
 8001c8a:	443b      	add	r3, r7
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001c94:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8001c98:	4413      	add	r3, r2
 8001c9a:	edd3 7a00 	vldr	s15, [r3]
 8001c9e:	4b5e      	ldr	r3, [pc, #376]	@ (8001e18 <NLLS+0xbc0>)
 8001ca0:	443b      	add	r3, r7
 8001ca2:	edd3 5a00 	vldr	s11, [r3]
 8001ca6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001caa:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cae:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001cb2:	4b4f      	ldr	r3, [pc, #316]	@ (8001df0 <NLLS+0xb98>)
 8001cb4:	443b      	add	r3, r7
 8001cb6:	ed93 6a00 	vldr	s12, [r3]
 8001cba:	4b53      	ldr	r3, [pc, #332]	@ (8001e08 <NLLS+0xbb0>)
 8001cbc:	443b      	add	r3, r7
 8001cbe:	edd3 7a00 	vldr	s15, [r3]
 8001cc2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001cc6:	4b51      	ldr	r3, [pc, #324]	@ (8001e0c <NLLS+0xbb4>)
 8001cc8:	443b      	add	r3, r7
 8001cca:	edd3 7a00 	vldr	s15, [r3]
 8001cce:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001cd2:	4b4a      	ldr	r3, [pc, #296]	@ (8001dfc <NLLS+0xba4>)
 8001cd4:	443b      	add	r3, r7
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001cde:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	edd3 7a00 	vldr	s15, [r3]
 8001ce8:	4b4c      	ldr	r3, [pc, #304]	@ (8001e1c <NLLS+0xbc4>)
 8001cea:	443b      	add	r3, r7
 8001cec:	edd3 5a00 	vldr	s11, [r3]
 8001cf0:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001cf4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cf8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001cfc:	4b3d      	ldr	r3, [pc, #244]	@ (8001df4 <NLLS+0xb9c>)
 8001cfe:	443b      	add	r3, r7
 8001d00:	ed93 6a00 	vldr	s12, [r3]
 8001d04:	4b40      	ldr	r3, [pc, #256]	@ (8001e08 <NLLS+0xbb0>)
 8001d06:	443b      	add	r3, r7
 8001d08:	edd3 7a00 	vldr	s15, [r3]
 8001d0c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d10:	4b3e      	ldr	r3, [pc, #248]	@ (8001e0c <NLLS+0xbb4>)
 8001d12:	443b      	add	r3, r7
 8001d14:	edd3 5a00 	vldr	s11, [r3]
 8001d18:	4b37      	ldr	r3, [pc, #220]	@ (8001df8 <NLLS+0xba0>)
 8001d1a:	443b      	add	r3, r7
 8001d1c:	edd3 7a00 	vldr	s15, [r3]
 8001d20:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001d24:	4b3a      	ldr	r3, [pc, #232]	@ (8001e10 <NLLS+0xbb8>)
 8001d26:	443b      	add	r3, r7
 8001d28:	ed93 5a00 	vldr	s10, [r3]
 8001d2c:	4b35      	ldr	r3, [pc, #212]	@ (8001e04 <NLLS+0xbac>)
 8001d2e:	443b      	add	r3, r7
 8001d30:	edd3 7a00 	vldr	s15, [r3]
 8001d34:	ee25 5a27 	vmul.f32	s10, s10, s15
 8001d38:	4b36      	ldr	r3, [pc, #216]	@ (8001e14 <NLLS+0xbbc>)
 8001d3a:	443b      	add	r3, r7
 8001d3c:	edd3 7a00 	vldr	s15, [r3]
 8001d40:	ee65 7a27 	vmul.f32	s15, s10, s15
 8001d44:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001d48:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d4c:	4b2b      	ldr	r3, [pc, #172]	@ (8001dfc <NLLS+0xba4>)
 8001d4e:	443b      	add	r3, r7
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001d58:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	edd3 7a00 	vldr	s15, [r3]
 8001d62:	4b27      	ldr	r3, [pc, #156]	@ (8001e00 <NLLS+0xba8>)
 8001d64:	443b      	add	r3, r7
 8001d66:	edd3 5a00 	vldr	s11, [r3]
 8001d6a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001d6e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d72:	4b1f      	ldr	r3, [pc, #124]	@ (8001df0 <NLLS+0xb98>)
 8001d74:	443b      	add	r3, r7
 8001d76:	edd3 5a00 	vldr	s11, [r3]
 8001d7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001df4 <NLLS+0xb9c>)
 8001d7c:	443b      	add	r3, r7
 8001d7e:	edd3 7a00 	vldr	s15, [r3]
 8001d82:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001d86:	4b1f      	ldr	r3, [pc, #124]	@ (8001e04 <NLLS+0xbac>)
 8001d88:	443b      	add	r3, r7
 8001d8a:	edd3 7a00 	vldr	s15, [r3]
 8001d8e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001d92:	4b1a      	ldr	r3, [pc, #104]	@ (8001dfc <NLLS+0xba4>)
 8001d94:	443b      	add	r3, r7
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001d9e:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8001da2:	4413      	add	r3, r2
 8001da4:	edd3 7a00 	vldr	s15, [r3]
 8001da8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e18 <NLLS+0xbc0>)
 8001daa:	443b      	add	r3, r7
 8001dac:	ed93 5a00 	vldr	s10, [r3]
 8001db0:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001db4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001db8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001df0 <NLLS+0xb98>)
 8001dbe:	443b      	add	r3, r7
 8001dc0:	edd3 5a00 	vldr	s11, [r3]
 8001dc4:	4b10      	ldr	r3, [pc, #64]	@ (8001e08 <NLLS+0xbb0>)
 8001dc6:	443b      	add	r3, r7
 8001dc8:	edd3 7a00 	vldr	s15, [r3]
 8001dcc:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8001e0c <NLLS+0xbb4>)
 8001dd2:	443b      	add	r3, r7
 8001dd4:	edd3 7a00 	vldr	s15, [r3]
 8001dd8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001ddc:	4b07      	ldr	r3, [pc, #28]	@ (8001dfc <NLLS+0xba4>)
 8001dde:	443b      	add	r3, r7
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001de8:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8001dec:	4413      	add	r3, r2
 8001dee:	e017      	b.n	8001e20 <NLLS+0xbc8>
 8001df0:	00017038 	.word	0x00017038
 8001df4:	00017034 	.word	0x00017034
 8001df8:	00016fd4 	.word	0x00016fd4
 8001dfc:	00017008 	.word	0x00017008
 8001e00:	0001702c 	.word	0x0001702c
 8001e04:	00016fc8 	.word	0x00016fc8
 8001e08:	00017030 	.word	0x00017030
 8001e0c:	00016fd0 	.word	0x00016fd0
 8001e10:	00016fc4 	.word	0x00016fc4
 8001e14:	00016fd8 	.word	0x00016fd8
 8001e18:	00017024 	.word	0x00017024
 8001e1c:	00017028 	.word	0x00017028
 8001e20:	edd3 7a00 	vldr	s15, [r3]
 8001e24:	4bc2      	ldr	r3, [pc, #776]	@ (8002130 <NLLS+0xed8>)
 8001e26:	443b      	add	r3, r7
 8001e28:	ed93 5a00 	vldr	s10, [r3]
 8001e2c:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001e30:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e34:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e3c:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8001e40:	4bbc      	ldr	r3, [pc, #752]	@ (8002134 <NLLS+0xedc>)
 8001e42:	443b      	add	r3, r7
 8001e44:	edd3 7a00 	vldr	s15, [r3]
 8001e48:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001e4c:	4bb9      	ldr	r3, [pc, #740]	@ (8002134 <NLLS+0xedc>)
 8001e4e:	443b      	add	r3, r7
 8001e50:	edd3 7a00 	vldr	s15, [r3]
 8001e54:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e58:	4bb7      	ldr	r3, [pc, #732]	@ (8002138 <NLLS+0xee0>)
 8001e5a:	443b      	add	r3, r7
 8001e5c:	edd3 7a00 	vldr	s15, [r3]
 8001e60:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e64:	4bb4      	ldr	r3, [pc, #720]	@ (8002138 <NLLS+0xee0>)
 8001e66:	443b      	add	r3, r7
 8001e68:	edd3 7a00 	vldr	s15, [r3]
 8001e6c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e70:	4bb2      	ldr	r3, [pc, #712]	@ (800213c <NLLS+0xee4>)
 8001e72:	443b      	add	r3, r7
 8001e74:	edd3 7a00 	vldr	s15, [r3]
 8001e78:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e7c:	4baf      	ldr	r3, [pc, #700]	@ (800213c <NLLS+0xee4>)
 8001e7e:	443b      	add	r3, r7
 8001e80:	edd3 7a00 	vldr	s15, [r3]
 8001e84:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e88:	4bad      	ldr	r3, [pc, #692]	@ (8002140 <NLLS+0xee8>)
 8001e8a:	443b      	add	r3, r7
 8001e8c:	edd3 7a00 	vldr	s15, [r3]
 8001e90:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e94:	4baa      	ldr	r3, [pc, #680]	@ (8002140 <NLLS+0xee8>)
 8001e96:	443b      	add	r3, r7
 8001e98:	edd3 7a00 	vldr	s15, [r3]
 8001e9c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ea0:	4ba8      	ldr	r3, [pc, #672]	@ (8002144 <NLLS+0xeec>)
 8001ea2:	443b      	add	r3, r7
 8001ea4:	edd3 7a00 	vldr	s15, [r3]
 8001ea8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001eac:	4ba5      	ldr	r3, [pc, #660]	@ (8002144 <NLLS+0xeec>)
 8001eae:	443b      	add	r3, r7
 8001eb0:	edd3 7a00 	vldr	s15, [r3]
 8001eb4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001eb8:	4ba3      	ldr	r3, [pc, #652]	@ (8002148 <NLLS+0xef0>)
 8001eba:	443b      	add	r3, r7
 8001ebc:	edd3 7a00 	vldr	s15, [r3]
 8001ec0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ec4:	4ba0      	ldr	r3, [pc, #640]	@ (8002148 <NLLS+0xef0>)
 8001ec6:	443b      	add	r3, r7
 8001ec8:	edd3 7a00 	vldr	s15, [r3]
 8001ecc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ed0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001ed4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ed8:	4b97      	ldr	r3, [pc, #604]	@ (8002138 <NLLS+0xee0>)
 8001eda:	443b      	add	r3, r7
 8001edc:	edd3 6a00 	vldr	s13, [r3]
 8001ee0:	4b99      	ldr	r3, [pc, #612]	@ (8002148 <NLLS+0xef0>)
 8001ee2:	443b      	add	r3, r7
 8001ee4:	edd3 7a00 	vldr	s15, [r3]
 8001ee8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001eec:	4b97      	ldr	r3, [pc, #604]	@ (800214c <NLLS+0xef4>)
 8001eee:	443b      	add	r3, r7
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001ef8:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8001efc:	4413      	add	r3, r2
 8001efe:	edd3 7a00 	vldr	s15, [r3]
 8001f02:	4b93      	ldr	r3, [pc, #588]	@ (8002150 <NLLS+0xef8>)
 8001f04:	443b      	add	r3, r7
 8001f06:	ed93 6a00 	vldr	s12, [r3]
 8001f0a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001f0e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f12:	4b8a      	ldr	r3, [pc, #552]	@ (800213c <NLLS+0xee4>)
 8001f14:	443b      	add	r3, r7
 8001f16:	ed93 6a00 	vldr	s12, [r3]
 8001f1a:	4b8e      	ldr	r3, [pc, #568]	@ (8002154 <NLLS+0xefc>)
 8001f1c:	443b      	add	r3, r7
 8001f1e:	edd3 7a00 	vldr	s15, [r3]
 8001f22:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001f26:	4b89      	ldr	r3, [pc, #548]	@ (800214c <NLLS+0xef4>)
 8001f28:	443b      	add	r3, r7
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001f32:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8001f36:	4413      	add	r3, r2
 8001f38:	edd3 7a00 	vldr	s15, [r3]
 8001f3c:	4b7c      	ldr	r3, [pc, #496]	@ (8002130 <NLLS+0xed8>)
 8001f3e:	443b      	add	r3, r7
 8001f40:	edd3 5a00 	vldr	s11, [r3]
 8001f44:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001f48:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f4c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001f50:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001f54:	4b78      	ldr	r3, [pc, #480]	@ (8002138 <NLLS+0xee0>)
 8001f56:	443b      	add	r3, r7
 8001f58:	ed93 6a00 	vldr	s12, [r3]
 8001f5c:	4b77      	ldr	r3, [pc, #476]	@ (800213c <NLLS+0xee4>)
 8001f5e:	443b      	add	r3, r7
 8001f60:	edd3 7a00 	vldr	s15, [r3]
 8001f64:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001f68:	4b7a      	ldr	r3, [pc, #488]	@ (8002154 <NLLS+0xefc>)
 8001f6a:	443b      	add	r3, r7
 8001f6c:	edd3 5a00 	vldr	s11, [r3]
 8001f70:	4b79      	ldr	r3, [pc, #484]	@ (8002158 <NLLS+0xf00>)
 8001f72:	443b      	add	r3, r7
 8001f74:	edd3 7a00 	vldr	s15, [r3]
 8001f78:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001f7c:	4b70      	ldr	r3, [pc, #448]	@ (8002140 <NLLS+0xee8>)
 8001f7e:	443b      	add	r3, r7
 8001f80:	ed93 5a00 	vldr	s10, [r3]
 8001f84:	4b70      	ldr	r3, [pc, #448]	@ (8002148 <NLLS+0xef0>)
 8001f86:	443b      	add	r3, r7
 8001f88:	edd3 7a00 	vldr	s15, [r3]
 8001f8c:	ee25 5a27 	vmul.f32	s10, s10, s15
 8001f90:	4b72      	ldr	r3, [pc, #456]	@ (800215c <NLLS+0xf04>)
 8001f92:	443b      	add	r3, r7
 8001f94:	edd3 7a00 	vldr	s15, [r3]
 8001f98:	ee65 7a27 	vmul.f32	s15, s10, s15
 8001f9c:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001fa0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001fa4:	4b69      	ldr	r3, [pc, #420]	@ (800214c <NLLS+0xef4>)
 8001fa6:	443b      	add	r3, r7
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001fb0:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	edd3 7a00 	vldr	s15, [r3]
 8001fba:	4b69      	ldr	r3, [pc, #420]	@ (8002160 <NLLS+0xf08>)
 8001fbc:	443b      	add	r3, r7
 8001fbe:	edd3 5a00 	vldr	s11, [r3]
 8001fc2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001fc6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001fca:	4b5a      	ldr	r3, [pc, #360]	@ (8002134 <NLLS+0xedc>)
 8001fcc:	443b      	add	r3, r7
 8001fce:	edd3 5a00 	vldr	s11, [r3]
 8001fd2:	4b59      	ldr	r3, [pc, #356]	@ (8002138 <NLLS+0xee0>)
 8001fd4:	443b      	add	r3, r7
 8001fd6:	edd3 7a00 	vldr	s15, [r3]
 8001fda:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001fde:	4b5a      	ldr	r3, [pc, #360]	@ (8002148 <NLLS+0xef0>)
 8001fe0:	443b      	add	r3, r7
 8001fe2:	edd3 7a00 	vldr	s15, [r3]
 8001fe6:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001fea:	4b58      	ldr	r3, [pc, #352]	@ (800214c <NLLS+0xef4>)
 8001fec:	443b      	add	r3, r7
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001ff6:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	edd3 7a00 	vldr	s15, [r3]
 8002000:	4b53      	ldr	r3, [pc, #332]	@ (8002150 <NLLS+0xef8>)
 8002002:	443b      	add	r3, r7
 8002004:	ed93 5a00 	vldr	s10, [r3]
 8002008:	ee75 7a67 	vsub.f32	s15, s10, s15
 800200c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002010:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002014:	4b47      	ldr	r3, [pc, #284]	@ (8002134 <NLLS+0xedc>)
 8002016:	443b      	add	r3, r7
 8002018:	edd3 5a00 	vldr	s11, [r3]
 800201c:	4b47      	ldr	r3, [pc, #284]	@ (800213c <NLLS+0xee4>)
 800201e:	443b      	add	r3, r7
 8002020:	edd3 7a00 	vldr	s15, [r3]
 8002024:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002028:	4b4a      	ldr	r3, [pc, #296]	@ (8002154 <NLLS+0xefc>)
 800202a:	443b      	add	r3, r7
 800202c:	edd3 7a00 	vldr	s15, [r3]
 8002030:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002034:	4b45      	ldr	r3, [pc, #276]	@ (800214c <NLLS+0xef4>)
 8002036:	443b      	add	r3, r7
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002040:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8002044:	4413      	add	r3, r2
 8002046:	edd3 7a00 	vldr	s15, [r3]
 800204a:	4b39      	ldr	r3, [pc, #228]	@ (8002130 <NLLS+0xed8>)
 800204c:	443b      	add	r3, r7
 800204e:	ed93 5a00 	vldr	s10, [r3]
 8002052:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002056:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800205a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800205e:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002062:	4b34      	ldr	r3, [pc, #208]	@ (8002134 <NLLS+0xedc>)
 8002064:	443b      	add	r3, r7
 8002066:	edd3 7a00 	vldr	s15, [r3]
 800206a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800206e:	4b32      	ldr	r3, [pc, #200]	@ (8002138 <NLLS+0xee0>)
 8002070:	443b      	add	r3, r7
 8002072:	edd3 7a00 	vldr	s15, [r3]
 8002076:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800207a:	4b2f      	ldr	r3, [pc, #188]	@ (8002138 <NLLS+0xee0>)
 800207c:	443b      	add	r3, r7
 800207e:	edd3 7a00 	vldr	s15, [r3]
 8002082:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002086:	4b2d      	ldr	r3, [pc, #180]	@ (800213c <NLLS+0xee4>)
 8002088:	443b      	add	r3, r7
 800208a:	edd3 7a00 	vldr	s15, [r3]
 800208e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002092:	4b2a      	ldr	r3, [pc, #168]	@ (800213c <NLLS+0xee4>)
 8002094:	443b      	add	r3, r7
 8002096:	edd3 7a00 	vldr	s15, [r3]
 800209a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800209e:	4b28      	ldr	r3, [pc, #160]	@ (8002140 <NLLS+0xee8>)
 80020a0:	443b      	add	r3, r7
 80020a2:	edd3 7a00 	vldr	s15, [r3]
 80020a6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020aa:	4b25      	ldr	r3, [pc, #148]	@ (8002140 <NLLS+0xee8>)
 80020ac:	443b      	add	r3, r7
 80020ae:	edd3 7a00 	vldr	s15, [r3]
 80020b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020b6:	4b23      	ldr	r3, [pc, #140]	@ (8002144 <NLLS+0xeec>)
 80020b8:	443b      	add	r3, r7
 80020ba:	edd3 7a00 	vldr	s15, [r3]
 80020be:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020c2:	4b20      	ldr	r3, [pc, #128]	@ (8002144 <NLLS+0xeec>)
 80020c4:	443b      	add	r3, r7
 80020c6:	edd3 7a00 	vldr	s15, [r3]
 80020ca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002148 <NLLS+0xef0>)
 80020d0:	443b      	add	r3, r7
 80020d2:	edd3 7a00 	vldr	s15, [r3]
 80020d6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020da:	4b1b      	ldr	r3, [pc, #108]	@ (8002148 <NLLS+0xef0>)
 80020dc:	443b      	add	r3, r7
 80020de:	edd3 7a00 	vldr	s15, [r3]
 80020e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020e6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80020ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ee:	f24a 0340 	movw	r3, #41024	@ 0xa040
 80020f2:	443b      	add	r3, r7
 80020f4:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 80020f8:	4b14      	ldr	r3, [pc, #80]	@ (800214c <NLLS+0xef4>)
 80020fa:	443b      	add	r3, r7
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	edc3 7a00 	vstr	s15, [r3]

			mat_H[1][i] = -(2*(by - my[i])*(by*sx*sz*sin_lambda*sin_lambda - my[i]*sx*sz*sin_lambda*sin_lambda + by*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - my[i]*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - bz*sx*sy*cos_rho*sin_lambda + mz[i]*sx*sy*cos_rho*sin_lambda - bx*sy*sz*sin_lambda*sin_lambda*sin_rho + mx[i]*sy*sz*sin_lambda*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + mx[i]*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + bx*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi - mx[i]*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi))/(sx*(sy*sy*sy)*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8002106:	4b11      	ldr	r3, [pc, #68]	@ (800214c <NLLS+0xef4>)
 8002108:	443b      	add	r3, r7
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002112:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8002116:	4413      	add	r3, r2
 8002118:	edd3 7a00 	vldr	s15, [r3]
 800211c:	4b04      	ldr	r3, [pc, #16]	@ (8002130 <NLLS+0xed8>)
 800211e:	443b      	add	r3, r7
 8002120:	ed93 7a00 	vldr	s14, [r3]
 8002124:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002128:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800212c:	e01a      	b.n	8002164 <NLLS+0xf0c>
 800212e:	bf00      	nop
 8002130:	00017028 	.word	0x00017028
 8002134:	00017038 	.word	0x00017038
 8002138:	00017034 	.word	0x00017034
 800213c:	00017030 	.word	0x00017030
 8002140:	00016fc4 	.word	0x00016fc4
 8002144:	00016fcc 	.word	0x00016fcc
 8002148:	00016fc8 	.word	0x00016fc8
 800214c:	00017008 	.word	0x00017008
 8002150:	00017024 	.word	0x00017024
 8002154:	00016fd0 	.word	0x00016fd0
 8002158:	00016fd4 	.word	0x00016fd4
 800215c:	00016fd8 	.word	0x00016fd8
 8002160:	0001702c 	.word	0x0001702c
 8002164:	4bbf      	ldr	r3, [pc, #764]	@ (8002464 <NLLS+0x120c>)
 8002166:	443b      	add	r3, r7
 8002168:	edd3 6a00 	vldr	s13, [r3]
 800216c:	4bbe      	ldr	r3, [pc, #760]	@ (8002468 <NLLS+0x1210>)
 800216e:	443b      	add	r3, r7
 8002170:	edd3 7a00 	vldr	s15, [r3]
 8002174:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002178:	4bbc      	ldr	r3, [pc, #752]	@ (800246c <NLLS+0x1214>)
 800217a:	443b      	add	r3, r7
 800217c:	edd3 7a00 	vldr	s15, [r3]
 8002180:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002184:	4bba      	ldr	r3, [pc, #744]	@ (8002470 <NLLS+0x1218>)
 8002186:	443b      	add	r3, r7
 8002188:	edd3 7a00 	vldr	s15, [r3]
 800218c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002190:	4bb7      	ldr	r3, [pc, #732]	@ (8002470 <NLLS+0x1218>)
 8002192:	443b      	add	r3, r7
 8002194:	edd3 7a00 	vldr	s15, [r3]
 8002198:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800219c:	4bb5      	ldr	r3, [pc, #724]	@ (8002474 <NLLS+0x121c>)
 800219e:	443b      	add	r3, r7
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80021a8:	f852 2c38 	ldr.w	r2, [r2, #-56]
 80021ac:	4413      	add	r3, r2
 80021ae:	ed93 6a00 	vldr	s12, [r3]
 80021b2:	4bad      	ldr	r3, [pc, #692]	@ (8002468 <NLLS+0x1210>)
 80021b4:	443b      	add	r3, r7
 80021b6:	edd3 7a00 	vldr	s15, [r3]
 80021ba:	ee26 6a27 	vmul.f32	s12, s12, s15
 80021be:	4bab      	ldr	r3, [pc, #684]	@ (800246c <NLLS+0x1214>)
 80021c0:	443b      	add	r3, r7
 80021c2:	edd3 7a00 	vldr	s15, [r3]
 80021c6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80021ca:	4ba9      	ldr	r3, [pc, #676]	@ (8002470 <NLLS+0x1218>)
 80021cc:	443b      	add	r3, r7
 80021ce:	edd3 7a00 	vldr	s15, [r3]
 80021d2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80021d6:	4ba6      	ldr	r3, [pc, #664]	@ (8002470 <NLLS+0x1218>)
 80021d8:	443b      	add	r3, r7
 80021da:	edd3 7a00 	vldr	s15, [r3]
 80021de:	ee66 7a27 	vmul.f32	s15, s12, s15
 80021e2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80021e6:	4b9f      	ldr	r3, [pc, #636]	@ (8002464 <NLLS+0x120c>)
 80021e8:	443b      	add	r3, r7
 80021ea:	ed93 6a00 	vldr	s12, [r3]
 80021ee:	4b9e      	ldr	r3, [pc, #632]	@ (8002468 <NLLS+0x1210>)
 80021f0:	443b      	add	r3, r7
 80021f2:	edd3 7a00 	vldr	s15, [r3]
 80021f6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80021fa:	4b9c      	ldr	r3, [pc, #624]	@ (800246c <NLLS+0x1214>)
 80021fc:	443b      	add	r3, r7
 80021fe:	edd3 7a00 	vldr	s15, [r3]
 8002202:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002206:	4b9c      	ldr	r3, [pc, #624]	@ (8002478 <NLLS+0x1220>)
 8002208:	443b      	add	r3, r7
 800220a:	edd3 7a00 	vldr	s15, [r3]
 800220e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002212:	4b99      	ldr	r3, [pc, #612]	@ (8002478 <NLLS+0x1220>)
 8002214:	443b      	add	r3, r7
 8002216:	edd3 7a00 	vldr	s15, [r3]
 800221a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800221e:	4b97      	ldr	r3, [pc, #604]	@ (800247c <NLLS+0x1224>)
 8002220:	443b      	add	r3, r7
 8002222:	edd3 7a00 	vldr	s15, [r3]
 8002226:	ee26 6a27 	vmul.f32	s12, s12, s15
 800222a:	4b94      	ldr	r3, [pc, #592]	@ (800247c <NLLS+0x1224>)
 800222c:	443b      	add	r3, r7
 800222e:	edd3 7a00 	vldr	s15, [r3]
 8002232:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002236:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800223a:	4b8e      	ldr	r3, [pc, #568]	@ (8002474 <NLLS+0x121c>)
 800223c:	443b      	add	r3, r7
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002246:	f852 2c38 	ldr.w	r2, [r2, #-56]
 800224a:	4413      	add	r3, r2
 800224c:	ed93 6a00 	vldr	s12, [r3]
 8002250:	4b85      	ldr	r3, [pc, #532]	@ (8002468 <NLLS+0x1210>)
 8002252:	443b      	add	r3, r7
 8002254:	edd3 7a00 	vldr	s15, [r3]
 8002258:	ee26 6a27 	vmul.f32	s12, s12, s15
 800225c:	4b83      	ldr	r3, [pc, #524]	@ (800246c <NLLS+0x1214>)
 800225e:	443b      	add	r3, r7
 8002260:	edd3 7a00 	vldr	s15, [r3]
 8002264:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002268:	4b83      	ldr	r3, [pc, #524]	@ (8002478 <NLLS+0x1220>)
 800226a:	443b      	add	r3, r7
 800226c:	edd3 7a00 	vldr	s15, [r3]
 8002270:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002274:	4b80      	ldr	r3, [pc, #512]	@ (8002478 <NLLS+0x1220>)
 8002276:	443b      	add	r3, r7
 8002278:	edd3 7a00 	vldr	s15, [r3]
 800227c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002280:	4b7e      	ldr	r3, [pc, #504]	@ (800247c <NLLS+0x1224>)
 8002282:	443b      	add	r3, r7
 8002284:	edd3 7a00 	vldr	s15, [r3]
 8002288:	ee26 6a27 	vmul.f32	s12, s12, s15
 800228c:	4b7b      	ldr	r3, [pc, #492]	@ (800247c <NLLS+0x1224>)
 800228e:	443b      	add	r3, r7
 8002290:	edd3 7a00 	vldr	s15, [r3]
 8002294:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002298:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800229c:	4b78      	ldr	r3, [pc, #480]	@ (8002480 <NLLS+0x1228>)
 800229e:	443b      	add	r3, r7
 80022a0:	ed93 6a00 	vldr	s12, [r3]
 80022a4:	4b70      	ldr	r3, [pc, #448]	@ (8002468 <NLLS+0x1210>)
 80022a6:	443b      	add	r3, r7
 80022a8:	edd3 7a00 	vldr	s15, [r3]
 80022ac:	ee26 6a27 	vmul.f32	s12, s12, s15
 80022b0:	4b74      	ldr	r3, [pc, #464]	@ (8002484 <NLLS+0x122c>)
 80022b2:	443b      	add	r3, r7
 80022b4:	edd3 7a00 	vldr	s15, [r3]
 80022b8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80022bc:	4b72      	ldr	r3, [pc, #456]	@ (8002488 <NLLS+0x1230>)
 80022be:	443b      	add	r3, r7
 80022c0:	edd3 7a00 	vldr	s15, [r3]
 80022c4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80022c8:	4b69      	ldr	r3, [pc, #420]	@ (8002470 <NLLS+0x1218>)
 80022ca:	443b      	add	r3, r7
 80022cc:	edd3 7a00 	vldr	s15, [r3]
 80022d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022d4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80022d8:	4b66      	ldr	r3, [pc, #408]	@ (8002474 <NLLS+0x121c>)
 80022da:	443b      	add	r3, r7
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80022e4:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 80022e8:	4413      	add	r3, r2
 80022ea:	ed93 6a00 	vldr	s12, [r3]
 80022ee:	4b5e      	ldr	r3, [pc, #376]	@ (8002468 <NLLS+0x1210>)
 80022f0:	443b      	add	r3, r7
 80022f2:	edd3 7a00 	vldr	s15, [r3]
 80022f6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80022fa:	4b62      	ldr	r3, [pc, #392]	@ (8002484 <NLLS+0x122c>)
 80022fc:	443b      	add	r3, r7
 80022fe:	edd3 7a00 	vldr	s15, [r3]
 8002302:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002306:	4b60      	ldr	r3, [pc, #384]	@ (8002488 <NLLS+0x1230>)
 8002308:	443b      	add	r3, r7
 800230a:	edd3 7a00 	vldr	s15, [r3]
 800230e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002312:	4b57      	ldr	r3, [pc, #348]	@ (8002470 <NLLS+0x1218>)
 8002314:	443b      	add	r3, r7
 8002316:	edd3 7a00 	vldr	s15, [r3]
 800231a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800231e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002322:	4b5a      	ldr	r3, [pc, #360]	@ (800248c <NLLS+0x1234>)
 8002324:	443b      	add	r3, r7
 8002326:	ed93 6a00 	vldr	s12, [r3]
 800232a:	4b56      	ldr	r3, [pc, #344]	@ (8002484 <NLLS+0x122c>)
 800232c:	443b      	add	r3, r7
 800232e:	edd3 7a00 	vldr	s15, [r3]
 8002332:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002336:	4b4d      	ldr	r3, [pc, #308]	@ (800246c <NLLS+0x1214>)
 8002338:	443b      	add	r3, r7
 800233a:	edd3 7a00 	vldr	s15, [r3]
 800233e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002342:	4b4b      	ldr	r3, [pc, #300]	@ (8002470 <NLLS+0x1218>)
 8002344:	443b      	add	r3, r7
 8002346:	edd3 7a00 	vldr	s15, [r3]
 800234a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800234e:	4b48      	ldr	r3, [pc, #288]	@ (8002470 <NLLS+0x1218>)
 8002350:	443b      	add	r3, r7
 8002352:	edd3 7a00 	vldr	s15, [r3]
 8002356:	ee26 6a27 	vmul.f32	s12, s12, s15
 800235a:	4b4d      	ldr	r3, [pc, #308]	@ (8002490 <NLLS+0x1238>)
 800235c:	443b      	add	r3, r7
 800235e:	edd3 7a00 	vldr	s15, [r3]
 8002362:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002366:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800236a:	4b42      	ldr	r3, [pc, #264]	@ (8002474 <NLLS+0x121c>)
 800236c:	443b      	add	r3, r7
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002376:	f852 2c34 	ldr.w	r2, [r2, #-52]
 800237a:	4413      	add	r3, r2
 800237c:	ed93 6a00 	vldr	s12, [r3]
 8002380:	4b40      	ldr	r3, [pc, #256]	@ (8002484 <NLLS+0x122c>)
 8002382:	443b      	add	r3, r7
 8002384:	edd3 7a00 	vldr	s15, [r3]
 8002388:	ee26 6a27 	vmul.f32	s12, s12, s15
 800238c:	4b37      	ldr	r3, [pc, #220]	@ (800246c <NLLS+0x1214>)
 800238e:	443b      	add	r3, r7
 8002390:	edd3 7a00 	vldr	s15, [r3]
 8002394:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002398:	4b35      	ldr	r3, [pc, #212]	@ (8002470 <NLLS+0x1218>)
 800239a:	443b      	add	r3, r7
 800239c:	edd3 7a00 	vldr	s15, [r3]
 80023a0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023a4:	4b32      	ldr	r3, [pc, #200]	@ (8002470 <NLLS+0x1218>)
 80023a6:	443b      	add	r3, r7
 80023a8:	edd3 7a00 	vldr	s15, [r3]
 80023ac:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023b0:	4b37      	ldr	r3, [pc, #220]	@ (8002490 <NLLS+0x1238>)
 80023b2:	443b      	add	r3, r7
 80023b4:	edd3 7a00 	vldr	s15, [r3]
 80023b8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80023bc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80023c0:	4b32      	ldr	r3, [pc, #200]	@ (800248c <NLLS+0x1234>)
 80023c2:	443b      	add	r3, r7
 80023c4:	ed93 6a00 	vldr	s12, [r3]
 80023c8:	4b2e      	ldr	r3, [pc, #184]	@ (8002484 <NLLS+0x122c>)
 80023ca:	443b      	add	r3, r7
 80023cc:	edd3 7a00 	vldr	s15, [r3]
 80023d0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023d4:	4b25      	ldr	r3, [pc, #148]	@ (800246c <NLLS+0x1214>)
 80023d6:	443b      	add	r3, r7
 80023d8:	edd3 7a00 	vldr	s15, [r3]
 80023dc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023e0:	4b25      	ldr	r3, [pc, #148]	@ (8002478 <NLLS+0x1220>)
 80023e2:	443b      	add	r3, r7
 80023e4:	edd3 7a00 	vldr	s15, [r3]
 80023e8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023ec:	4b22      	ldr	r3, [pc, #136]	@ (8002478 <NLLS+0x1220>)
 80023ee:	443b      	add	r3, r7
 80023f0:	edd3 7a00 	vldr	s15, [r3]
 80023f4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023f8:	4b20      	ldr	r3, [pc, #128]	@ (800247c <NLLS+0x1224>)
 80023fa:	443b      	add	r3, r7
 80023fc:	edd3 7a00 	vldr	s15, [r3]
 8002400:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002404:	4b1d      	ldr	r3, [pc, #116]	@ (800247c <NLLS+0x1224>)
 8002406:	443b      	add	r3, r7
 8002408:	edd3 7a00 	vldr	s15, [r3]
 800240c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002410:	4b1f      	ldr	r3, [pc, #124]	@ (8002490 <NLLS+0x1238>)
 8002412:	443b      	add	r3, r7
 8002414:	edd3 7a00 	vldr	s15, [r3]
 8002418:	ee66 7a27 	vmul.f32	s15, s12, s15
 800241c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002420:	4b14      	ldr	r3, [pc, #80]	@ (8002474 <NLLS+0x121c>)
 8002422:	443b      	add	r3, r7
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800242c:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8002430:	4413      	add	r3, r2
 8002432:	ed93 6a00 	vldr	s12, [r3]
 8002436:	4b13      	ldr	r3, [pc, #76]	@ (8002484 <NLLS+0x122c>)
 8002438:	443b      	add	r3, r7
 800243a:	edd3 7a00 	vldr	s15, [r3]
 800243e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002442:	4b0a      	ldr	r3, [pc, #40]	@ (800246c <NLLS+0x1214>)
 8002444:	443b      	add	r3, r7
 8002446:	edd3 7a00 	vldr	s15, [r3]
 800244a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800244e:	4b0a      	ldr	r3, [pc, #40]	@ (8002478 <NLLS+0x1220>)
 8002450:	443b      	add	r3, r7
 8002452:	edd3 7a00 	vldr	s15, [r3]
 8002456:	ee26 6a27 	vmul.f32	s12, s12, s15
 800245a:	4b07      	ldr	r3, [pc, #28]	@ (8002478 <NLLS+0x1220>)
 800245c:	443b      	add	r3, r7
 800245e:	edd3 7a00 	vldr	s15, [r3]
 8002462:	e017      	b.n	8002494 <NLLS+0x123c>
 8002464:	00017028 	.word	0x00017028
 8002468:	00017038 	.word	0x00017038
 800246c:	00017030 	.word	0x00017030
 8002470:	00016fd0 	.word	0x00016fd0
 8002474:	00017008 	.word	0x00017008
 8002478:	00016fc4 	.word	0x00016fc4
 800247c:	00016fcc 	.word	0x00016fcc
 8002480:	00017024 	.word	0x00017024
 8002484:	00017034 	.word	0x00017034
 8002488:	00016fc8 	.word	0x00016fc8
 800248c:	0001702c 	.word	0x0001702c
 8002490:	00016fd4 	.word	0x00016fd4
 8002494:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002498:	4bc0      	ldr	r3, [pc, #768]	@ (800279c <NLLS+0x1544>)
 800249a:	443b      	add	r3, r7
 800249c:	edd3 7a00 	vldr	s15, [r3]
 80024a0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024a4:	4bbd      	ldr	r3, [pc, #756]	@ (800279c <NLLS+0x1544>)
 80024a6:	443b      	add	r3, r7
 80024a8:	edd3 7a00 	vldr	s15, [r3]
 80024ac:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024b0:	4bbb      	ldr	r3, [pc, #748]	@ (80027a0 <NLLS+0x1548>)
 80024b2:	443b      	add	r3, r7
 80024b4:	edd3 7a00 	vldr	s15, [r3]
 80024b8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80024bc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80024c0:	4bb8      	ldr	r3, [pc, #736]	@ (80027a4 <NLLS+0x154c>)
 80024c2:	443b      	add	r3, r7
 80024c4:	ed93 6a00 	vldr	s12, [r3]
 80024c8:	4bb7      	ldr	r3, [pc, #732]	@ (80027a8 <NLLS+0x1550>)
 80024ca:	443b      	add	r3, r7
 80024cc:	edd3 7a00 	vldr	s15, [r3]
 80024d0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024d4:	4bb5      	ldr	r3, [pc, #724]	@ (80027ac <NLLS+0x1554>)
 80024d6:	443b      	add	r3, r7
 80024d8:	edd3 7a00 	vldr	s15, [r3]
 80024dc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024e0:	4bb3      	ldr	r3, [pc, #716]	@ (80027b0 <NLLS+0x1558>)
 80024e2:	443b      	add	r3, r7
 80024e4:	edd3 7a00 	vldr	s15, [r3]
 80024e8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024ec:	4bb1      	ldr	r3, [pc, #708]	@ (80027b4 <NLLS+0x155c>)
 80024ee:	443b      	add	r3, r7
 80024f0:	edd3 7a00 	vldr	s15, [r3]
 80024f4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024f8:	4baf      	ldr	r3, [pc, #700]	@ (80027b8 <NLLS+0x1560>)
 80024fa:	443b      	add	r3, r7
 80024fc:	edd3 7a00 	vldr	s15, [r3]
 8002500:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002504:	4bad      	ldr	r3, [pc, #692]	@ (80027bc <NLLS+0x1564>)
 8002506:	443b      	add	r3, r7
 8002508:	edd3 7a00 	vldr	s15, [r3]
 800250c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002510:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002514:	4baa      	ldr	r3, [pc, #680]	@ (80027c0 <NLLS+0x1568>)
 8002516:	443b      	add	r3, r7
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002520:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8002524:	4413      	add	r3, r2
 8002526:	ed93 6a00 	vldr	s12, [r3]
 800252a:	4b9f      	ldr	r3, [pc, #636]	@ (80027a8 <NLLS+0x1550>)
 800252c:	443b      	add	r3, r7
 800252e:	edd3 7a00 	vldr	s15, [r3]
 8002532:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002536:	4b9d      	ldr	r3, [pc, #628]	@ (80027ac <NLLS+0x1554>)
 8002538:	443b      	add	r3, r7
 800253a:	edd3 7a00 	vldr	s15, [r3]
 800253e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002542:	4b9b      	ldr	r3, [pc, #620]	@ (80027b0 <NLLS+0x1558>)
 8002544:	443b      	add	r3, r7
 8002546:	edd3 7a00 	vldr	s15, [r3]
 800254a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800254e:	4b99      	ldr	r3, [pc, #612]	@ (80027b4 <NLLS+0x155c>)
 8002550:	443b      	add	r3, r7
 8002552:	edd3 7a00 	vldr	s15, [r3]
 8002556:	ee26 6a27 	vmul.f32	s12, s12, s15
 800255a:	4b97      	ldr	r3, [pc, #604]	@ (80027b8 <NLLS+0x1560>)
 800255c:	443b      	add	r3, r7
 800255e:	edd3 7a00 	vldr	s15, [r3]
 8002562:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002566:	4b95      	ldr	r3, [pc, #596]	@ (80027bc <NLLS+0x1564>)
 8002568:	443b      	add	r3, r7
 800256a:	edd3 7a00 	vldr	s15, [r3]
 800256e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002572:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800257a:	eef1 6a67 	vneg.f32	s13, s15
 800257e:	4b8a      	ldr	r3, [pc, #552]	@ (80027a8 <NLLS+0x1550>)
 8002580:	443b      	add	r3, r7
 8002582:	edd3 7a00 	vldr	s15, [r3]
 8002586:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800258a:	4b87      	ldr	r3, [pc, #540]	@ (80027a8 <NLLS+0x1550>)
 800258c:	443b      	add	r3, r7
 800258e:	edd3 7a00 	vldr	s15, [r3]
 8002592:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002596:	4b8b      	ldr	r3, [pc, #556]	@ (80027c4 <NLLS+0x156c>)
 8002598:	443b      	add	r3, r7
 800259a:	edd3 7a00 	vldr	s15, [r3]
 800259e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025a2:	4b82      	ldr	r3, [pc, #520]	@ (80027ac <NLLS+0x1554>)
 80025a4:	443b      	add	r3, r7
 80025a6:	edd3 7a00 	vldr	s15, [r3]
 80025aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025ae:	4b80      	ldr	r3, [pc, #512]	@ (80027b0 <NLLS+0x1558>)
 80025b0:	443b      	add	r3, r7
 80025b2:	edd3 7a00 	vldr	s15, [r3]
 80025b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025ba:	4b7d      	ldr	r3, [pc, #500]	@ (80027b0 <NLLS+0x1558>)
 80025bc:	443b      	add	r3, r7
 80025be:	edd3 7a00 	vldr	s15, [r3]
 80025c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025c6:	4b75      	ldr	r3, [pc, #468]	@ (800279c <NLLS+0x1544>)
 80025c8:	443b      	add	r3, r7
 80025ca:	edd3 7a00 	vldr	s15, [r3]
 80025ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025d2:	4b72      	ldr	r3, [pc, #456]	@ (800279c <NLLS+0x1544>)
 80025d4:	443b      	add	r3, r7
 80025d6:	edd3 7a00 	vldr	s15, [r3]
 80025da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025de:	4b75      	ldr	r3, [pc, #468]	@ (80027b4 <NLLS+0x155c>)
 80025e0:	443b      	add	r3, r7
 80025e2:	edd3 7a00 	vldr	s15, [r3]
 80025e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025ea:	4b72      	ldr	r3, [pc, #456]	@ (80027b4 <NLLS+0x155c>)
 80025ec:	443b      	add	r3, r7
 80025ee:	edd3 7a00 	vldr	s15, [r3]
 80025f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025fa:	f24a 0340 	movw	r3, #41024	@ 0xa040
 80025fe:	443b      	add	r3, r7
 8002600:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8002604:	4b6e      	ldr	r3, [pc, #440]	@ (80027c0 <NLLS+0x1568>)
 8002606:	443b      	add	r3, r7
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f503 638b 	add.w	r3, r3, #1112	@ 0x458
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	edc3 7a00 	vstr	s15, [r3]

			mat_H[2][i] = -(2*(bz - mz[i])*(bz*sx*sy*cos_rho - by*sx*sz*sin_lambda - mz[i]*sx*sy*cos_rho + my[i]*sx*sz*sin_lambda + bx*sy*sz*sin_lambda*sin_rho - mx[i]*sy*sz*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_rho*sin_phi + mx[i]*sy*sz*cos_lambda*cos_rho*sin_phi))/(sx*sy*(sz*sz*sz)*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho);
 8002616:	4b6a      	ldr	r3, [pc, #424]	@ (80027c0 <NLLS+0x1568>)
 8002618:	443b      	add	r3, r7
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002622:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8002626:	4413      	add	r3, r2
 8002628:	edd3 7a00 	vldr	s15, [r3]
 800262c:	4b66      	ldr	r3, [pc, #408]	@ (80027c8 <NLLS+0x1570>)
 800262e:	443b      	add	r3, r7
 8002630:	ed93 7a00 	vldr	s14, [r3]
 8002634:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002638:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800263c:	4b62      	ldr	r3, [pc, #392]	@ (80027c8 <NLLS+0x1570>)
 800263e:	443b      	add	r3, r7
 8002640:	edd3 6a00 	vldr	s13, [r3]
 8002644:	4b5f      	ldr	r3, [pc, #380]	@ (80027c4 <NLLS+0x156c>)
 8002646:	443b      	add	r3, r7
 8002648:	edd3 7a00 	vldr	s15, [r3]
 800264c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002650:	4b55      	ldr	r3, [pc, #340]	@ (80027a8 <NLLS+0x1550>)
 8002652:	443b      	add	r3, r7
 8002654:	edd3 7a00 	vldr	s15, [r3]
 8002658:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800265c:	4b55      	ldr	r3, [pc, #340]	@ (80027b4 <NLLS+0x155c>)
 800265e:	443b      	add	r3, r7
 8002660:	edd3 7a00 	vldr	s15, [r3]
 8002664:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002668:	4b58      	ldr	r3, [pc, #352]	@ (80027cc <NLLS+0x1574>)
 800266a:	443b      	add	r3, r7
 800266c:	ed93 6a00 	vldr	s12, [r3]
 8002670:	4b54      	ldr	r3, [pc, #336]	@ (80027c4 <NLLS+0x156c>)
 8002672:	443b      	add	r3, r7
 8002674:	edd3 7a00 	vldr	s15, [r3]
 8002678:	ee26 6a27 	vmul.f32	s12, s12, s15
 800267c:	4b4b      	ldr	r3, [pc, #300]	@ (80027ac <NLLS+0x1554>)
 800267e:	443b      	add	r3, r7
 8002680:	edd3 7a00 	vldr	s15, [r3]
 8002684:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002688:	4b4b      	ldr	r3, [pc, #300]	@ (80027b8 <NLLS+0x1560>)
 800268a:	443b      	add	r3, r7
 800268c:	edd3 7a00 	vldr	s15, [r3]
 8002690:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002694:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002698:	4b49      	ldr	r3, [pc, #292]	@ (80027c0 <NLLS+0x1568>)
 800269a:	443b      	add	r3, r7
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80026a4:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 80026a8:	4413      	add	r3, r2
 80026aa:	ed93 6a00 	vldr	s12, [r3]
 80026ae:	4b45      	ldr	r3, [pc, #276]	@ (80027c4 <NLLS+0x156c>)
 80026b0:	443b      	add	r3, r7
 80026b2:	edd3 7a00 	vldr	s15, [r3]
 80026b6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80026ba:	4b3b      	ldr	r3, [pc, #236]	@ (80027a8 <NLLS+0x1550>)
 80026bc:	443b      	add	r3, r7
 80026be:	edd3 7a00 	vldr	s15, [r3]
 80026c2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80026c6:	4b3b      	ldr	r3, [pc, #236]	@ (80027b4 <NLLS+0x155c>)
 80026c8:	443b      	add	r3, r7
 80026ca:	edd3 7a00 	vldr	s15, [r3]
 80026ce:	ee66 7a27 	vmul.f32	s15, s12, s15
 80026d2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80026d6:	4b3a      	ldr	r3, [pc, #232]	@ (80027c0 <NLLS+0x1568>)
 80026d8:	443b      	add	r3, r7
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80026e2:	f852 2c38 	ldr.w	r2, [r2, #-56]
 80026e6:	4413      	add	r3, r2
 80026e8:	ed93 6a00 	vldr	s12, [r3]
 80026ec:	4b35      	ldr	r3, [pc, #212]	@ (80027c4 <NLLS+0x156c>)
 80026ee:	443b      	add	r3, r7
 80026f0:	edd3 7a00 	vldr	s15, [r3]
 80026f4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80026f8:	4b2c      	ldr	r3, [pc, #176]	@ (80027ac <NLLS+0x1554>)
 80026fa:	443b      	add	r3, r7
 80026fc:	edd3 7a00 	vldr	s15, [r3]
 8002700:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002704:	4b2c      	ldr	r3, [pc, #176]	@ (80027b8 <NLLS+0x1560>)
 8002706:	443b      	add	r3, r7
 8002708:	edd3 7a00 	vldr	s15, [r3]
 800270c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002710:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002714:	4b23      	ldr	r3, [pc, #140]	@ (80027a4 <NLLS+0x154c>)
 8002716:	443b      	add	r3, r7
 8002718:	ed93 6a00 	vldr	s12, [r3]
 800271c:	4b22      	ldr	r3, [pc, #136]	@ (80027a8 <NLLS+0x1550>)
 800271e:	443b      	add	r3, r7
 8002720:	edd3 7a00 	vldr	s15, [r3]
 8002724:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002728:	4b20      	ldr	r3, [pc, #128]	@ (80027ac <NLLS+0x1554>)
 800272a:	443b      	add	r3, r7
 800272c:	edd3 7a00 	vldr	s15, [r3]
 8002730:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002734:	4b20      	ldr	r3, [pc, #128]	@ (80027b8 <NLLS+0x1560>)
 8002736:	443b      	add	r3, r7
 8002738:	edd3 7a00 	vldr	s15, [r3]
 800273c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002740:	4b17      	ldr	r3, [pc, #92]	@ (80027a0 <NLLS+0x1548>)
 8002742:	443b      	add	r3, r7
 8002744:	edd3 7a00 	vldr	s15, [r3]
 8002748:	ee66 7a27 	vmul.f32	s15, s12, s15
 800274c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002750:	4b1b      	ldr	r3, [pc, #108]	@ (80027c0 <NLLS+0x1568>)
 8002752:	443b      	add	r3, r7
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800275c:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8002760:	4413      	add	r3, r2
 8002762:	ed93 6a00 	vldr	s12, [r3]
 8002766:	4b10      	ldr	r3, [pc, #64]	@ (80027a8 <NLLS+0x1550>)
 8002768:	443b      	add	r3, r7
 800276a:	edd3 7a00 	vldr	s15, [r3]
 800276e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002772:	4b0e      	ldr	r3, [pc, #56]	@ (80027ac <NLLS+0x1554>)
 8002774:	443b      	add	r3, r7
 8002776:	edd3 7a00 	vldr	s15, [r3]
 800277a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800277e:	4b0e      	ldr	r3, [pc, #56]	@ (80027b8 <NLLS+0x1560>)
 8002780:	443b      	add	r3, r7
 8002782:	edd3 7a00 	vldr	s15, [r3]
 8002786:	ee26 6a27 	vmul.f32	s12, s12, s15
 800278a:	4b05      	ldr	r3, [pc, #20]	@ (80027a0 <NLLS+0x1548>)
 800278c:	443b      	add	r3, r7
 800278e:	edd3 7a00 	vldr	s15, [r3]
 8002792:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002796:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800279a:	e019      	b.n	80027d0 <NLLS+0x1578>
 800279c:	00016fcc 	.word	0x00016fcc
 80027a0:	00016fd4 	.word	0x00016fd4
 80027a4:	0001702c 	.word	0x0001702c
 80027a8:	00017034 	.word	0x00017034
 80027ac:	00017030 	.word	0x00017030
 80027b0:	00016fc4 	.word	0x00016fc4
 80027b4:	00016fc8 	.word	0x00016fc8
 80027b8:	00016fd0 	.word	0x00016fd0
 80027bc:	00016fd8 	.word	0x00016fd8
 80027c0:	00017008 	.word	0x00017008
 80027c4:	00017038 	.word	0x00017038
 80027c8:	00017024 	.word	0x00017024
 80027cc:	00017028 	.word	0x00017028
 80027d0:	4bc0      	ldr	r3, [pc, #768]	@ (8002ad4 <NLLS+0x187c>)
 80027d2:	443b      	add	r3, r7
 80027d4:	ed93 6a00 	vldr	s12, [r3]
 80027d8:	4bbf      	ldr	r3, [pc, #764]	@ (8002ad8 <NLLS+0x1880>)
 80027da:	443b      	add	r3, r7
 80027dc:	edd3 7a00 	vldr	s15, [r3]
 80027e0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80027e4:	4bbd      	ldr	r3, [pc, #756]	@ (8002adc <NLLS+0x1884>)
 80027e6:	443b      	add	r3, r7
 80027e8:	edd3 7a00 	vldr	s15, [r3]
 80027ec:	ee26 6a27 	vmul.f32	s12, s12, s15
 80027f0:	4bbb      	ldr	r3, [pc, #748]	@ (8002ae0 <NLLS+0x1888>)
 80027f2:	443b      	add	r3, r7
 80027f4:	edd3 7a00 	vldr	s15, [r3]
 80027f8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80027fc:	4bb9      	ldr	r3, [pc, #740]	@ (8002ae4 <NLLS+0x188c>)
 80027fe:	443b      	add	r3, r7
 8002800:	edd3 7a00 	vldr	s15, [r3]
 8002804:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002808:	4bb7      	ldr	r3, [pc, #732]	@ (8002ae8 <NLLS+0x1890>)
 800280a:	443b      	add	r3, r7
 800280c:	edd3 7a00 	vldr	s15, [r3]
 8002810:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002814:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002818:	4bb4      	ldr	r3, [pc, #720]	@ (8002aec <NLLS+0x1894>)
 800281a:	443b      	add	r3, r7
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002824:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8002828:	4413      	add	r3, r2
 800282a:	ed93 6a00 	vldr	s12, [r3]
 800282e:	4baa      	ldr	r3, [pc, #680]	@ (8002ad8 <NLLS+0x1880>)
 8002830:	443b      	add	r3, r7
 8002832:	edd3 7a00 	vldr	s15, [r3]
 8002836:	ee26 6a27 	vmul.f32	s12, s12, s15
 800283a:	4ba8      	ldr	r3, [pc, #672]	@ (8002adc <NLLS+0x1884>)
 800283c:	443b      	add	r3, r7
 800283e:	edd3 7a00 	vldr	s15, [r3]
 8002842:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002846:	4ba6      	ldr	r3, [pc, #664]	@ (8002ae0 <NLLS+0x1888>)
 8002848:	443b      	add	r3, r7
 800284a:	edd3 7a00 	vldr	s15, [r3]
 800284e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002852:	4ba4      	ldr	r3, [pc, #656]	@ (8002ae4 <NLLS+0x188c>)
 8002854:	443b      	add	r3, r7
 8002856:	edd3 7a00 	vldr	s15, [r3]
 800285a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800285e:	4ba2      	ldr	r3, [pc, #648]	@ (8002ae8 <NLLS+0x1890>)
 8002860:	443b      	add	r3, r7
 8002862:	edd3 7a00 	vldr	s15, [r3]
 8002866:	ee66 7a27 	vmul.f32	s15, s12, s15
 800286a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800286e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002872:	eef1 6a67 	vneg.f32	s13, s15
 8002876:	4b9e      	ldr	r3, [pc, #632]	@ (8002af0 <NLLS+0x1898>)
 8002878:	443b      	add	r3, r7
 800287a:	ed93 7a00 	vldr	s14, [r3]
 800287e:	4b96      	ldr	r3, [pc, #600]	@ (8002ad8 <NLLS+0x1880>)
 8002880:	443b      	add	r3, r7
 8002882:	edd3 7a00 	vldr	s15, [r3]
 8002886:	ee27 7a27 	vmul.f32	s14, s14, s15
 800288a:	4b94      	ldr	r3, [pc, #592]	@ (8002adc <NLLS+0x1884>)
 800288c:	443b      	add	r3, r7
 800288e:	edd3 7a00 	vldr	s15, [r3]
 8002892:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8002896:	4b91      	ldr	r3, [pc, #580]	@ (8002adc <NLLS+0x1884>)
 8002898:	443b      	add	r3, r7
 800289a:	edd3 7a00 	vldr	s15, [r3]
 800289e:	ee66 7a27 	vmul.f32	s15, s12, s15
 80028a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028a6:	4b8e      	ldr	r3, [pc, #568]	@ (8002ae0 <NLLS+0x1888>)
 80028a8:	443b      	add	r3, r7
 80028aa:	edd3 7a00 	vldr	s15, [r3]
 80028ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028b2:	4b8b      	ldr	r3, [pc, #556]	@ (8002ae0 <NLLS+0x1888>)
 80028b4:	443b      	add	r3, r7
 80028b6:	edd3 7a00 	vldr	s15, [r3]
 80028ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028be:	4b8d      	ldr	r3, [pc, #564]	@ (8002af4 <NLLS+0x189c>)
 80028c0:	443b      	add	r3, r7
 80028c2:	edd3 7a00 	vldr	s15, [r3]
 80028c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028ca:	4b8a      	ldr	r3, [pc, #552]	@ (8002af4 <NLLS+0x189c>)
 80028cc:	443b      	add	r3, r7
 80028ce:	edd3 7a00 	vldr	s15, [r3]
 80028d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028d6:	4b83      	ldr	r3, [pc, #524]	@ (8002ae4 <NLLS+0x188c>)
 80028d8:	443b      	add	r3, r7
 80028da:	edd3 7a00 	vldr	s15, [r3]
 80028de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028e6:	f24a 0340 	movw	r3, #41024	@ 0xa040
 80028ea:	443b      	add	r3, r7
 80028ec:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 80028f0:	4b7e      	ldr	r3, [pc, #504]	@ (8002aec <NLLS+0x1894>)
 80028f2:	443b      	add	r3, r7
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	edc3 7a00 	vstr	s15, [r3]

			mat_H[3][i] = (2*bx - 2*mx[i])/sx*sx - (2*sin_rho*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i])))/(sx*sx*sy*cos_rho*cos_rho) + (2*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sz*cos_lambda*cos_lambda*2*cos_phi*cos_phi*cos_rho*cos_rho);
 8002902:	4b74      	ldr	r3, [pc, #464]	@ (8002ad4 <NLLS+0x187c>)
 8002904:	443b      	add	r3, r7
 8002906:	edd3 7a00 	vldr	s15, [r3]
 800290a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800290e:	4b77      	ldr	r3, [pc, #476]	@ (8002aec <NLLS+0x1894>)
 8002910:	443b      	add	r3, r7
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800291a:	f852 2c34 	ldr.w	r2, [r2, #-52]
 800291e:	4413      	add	r3, r2
 8002920:	edd3 7a00 	vldr	s15, [r3]
 8002924:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002928:	ee77 6a67 	vsub.f32	s13, s14, s15
 800292c:	4b70      	ldr	r3, [pc, #448]	@ (8002af0 <NLLS+0x1898>)
 800292e:	443b      	add	r3, r7
 8002930:	edd3 7a00 	vldr	s15, [r3]
 8002934:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002938:	4b6d      	ldr	r3, [pc, #436]	@ (8002af0 <NLLS+0x1898>)
 800293a:	443b      	add	r3, r7
 800293c:	edd3 7a00 	vldr	s15, [r3]
 8002940:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002944:	4b6c      	ldr	r3, [pc, #432]	@ (8002af8 <NLLS+0x18a0>)
 8002946:	443b      	add	r3, r7
 8002948:	edd3 7a00 	vldr	s15, [r3]
 800294c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002950:	4b66      	ldr	r3, [pc, #408]	@ (8002aec <NLLS+0x1894>)
 8002952:	443b      	add	r3, r7
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800295c:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8002960:	4413      	add	r3, r2
 8002962:	edd3 7a00 	vldr	s15, [r3]
 8002966:	4b65      	ldr	r3, [pc, #404]	@ (8002afc <NLLS+0x18a4>)
 8002968:	443b      	add	r3, r7
 800296a:	ed93 6a00 	vldr	s12, [r3]
 800296e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002972:	4b5f      	ldr	r3, [pc, #380]	@ (8002af0 <NLLS+0x1898>)
 8002974:	443b      	add	r3, r7
 8002976:	edd3 7a00 	vldr	s15, [r3]
 800297a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800297e:	4b56      	ldr	r3, [pc, #344]	@ (8002ad8 <NLLS+0x1880>)
 8002980:	443b      	add	r3, r7
 8002982:	edd3 5a00 	vldr	s11, [r3]
 8002986:	4b5c      	ldr	r3, [pc, #368]	@ (8002af8 <NLLS+0x18a0>)
 8002988:	443b      	add	r3, r7
 800298a:	edd3 7a00 	vldr	s15, [r3]
 800298e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002992:	4b56      	ldr	r3, [pc, #344]	@ (8002aec <NLLS+0x1894>)
 8002994:	443b      	add	r3, r7
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800299e:	f852 2c34 	ldr.w	r2, [r2, #-52]
 80029a2:	4413      	add	r3, r2
 80029a4:	edd3 7a00 	vldr	s15, [r3]
 80029a8:	4b4a      	ldr	r3, [pc, #296]	@ (8002ad4 <NLLS+0x187c>)
 80029aa:	443b      	add	r3, r7
 80029ac:	ed93 5a00 	vldr	s10, [r3]
 80029b0:	ee75 7a67 	vsub.f32	s15, s10, s15
 80029b4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80029b8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80029bc:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80029c0:	4b4b      	ldr	r3, [pc, #300]	@ (8002af0 <NLLS+0x1898>)
 80029c2:	443b      	add	r3, r7
 80029c4:	edd3 7a00 	vldr	s15, [r3]
 80029c8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80029cc:	4b42      	ldr	r3, [pc, #264]	@ (8002ad8 <NLLS+0x1880>)
 80029ce:	443b      	add	r3, r7
 80029d0:	edd3 7a00 	vldr	s15, [r3]
 80029d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80029d8:	4b42      	ldr	r3, [pc, #264]	@ (8002ae4 <NLLS+0x188c>)
 80029da:	443b      	add	r3, r7
 80029dc:	edd3 7a00 	vldr	s15, [r3]
 80029e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80029e4:	4b3f      	ldr	r3, [pc, #252]	@ (8002ae4 <NLLS+0x188c>)
 80029e6:	443b      	add	r3, r7
 80029e8:	edd3 7a00 	vldr	s15, [r3]
 80029ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80029f0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80029f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029f8:	4b41      	ldr	r3, [pc, #260]	@ (8002b00 <NLLS+0x18a8>)
 80029fa:	443b      	add	r3, r7
 80029fc:	edd3 6a00 	vldr	s13, [r3]
 8002a00:	4b3d      	ldr	r3, [pc, #244]	@ (8002af8 <NLLS+0x18a0>)
 8002a02:	443b      	add	r3, r7
 8002a04:	edd3 7a00 	vldr	s15, [r3]
 8002a08:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a0c:	4b34      	ldr	r3, [pc, #208]	@ (8002ae0 <NLLS+0x1888>)
 8002a0e:	443b      	add	r3, r7
 8002a10:	ed93 6a00 	vldr	s12, [r3]
 8002a14:	4b33      	ldr	r3, [pc, #204]	@ (8002ae4 <NLLS+0x188c>)
 8002a16:	443b      	add	r3, r7
 8002a18:	edd3 7a00 	vldr	s15, [r3]
 8002a1c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a20:	4b31      	ldr	r3, [pc, #196]	@ (8002ae8 <NLLS+0x1890>)
 8002a22:	443b      	add	r3, r7
 8002a24:	edd3 7a00 	vldr	s15, [r3]
 8002a28:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002a2c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a30:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002a34:	4b28      	ldr	r3, [pc, #160]	@ (8002ad8 <NLLS+0x1880>)
 8002a36:	443b      	add	r3, r7
 8002a38:	ed93 6a00 	vldr	s12, [r3]
 8002a3c:	4b27      	ldr	r3, [pc, #156]	@ (8002adc <NLLS+0x1884>)
 8002a3e:	443b      	add	r3, r7
 8002a40:	edd3 7a00 	vldr	s15, [r3]
 8002a44:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a48:	4b2d      	ldr	r3, [pc, #180]	@ (8002b00 <NLLS+0x18a8>)
 8002a4a:	443b      	add	r3, r7
 8002a4c:	edd3 5a00 	vldr	s11, [r3]
 8002a50:	4b29      	ldr	r3, [pc, #164]	@ (8002af8 <NLLS+0x18a0>)
 8002a52:	443b      	add	r3, r7
 8002a54:	edd3 7a00 	vldr	s15, [r3]
 8002a58:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002a5c:	4b20      	ldr	r3, [pc, #128]	@ (8002ae0 <NLLS+0x1888>)
 8002a5e:	443b      	add	r3, r7
 8002a60:	ed93 5a00 	vldr	s10, [r3]
 8002a64:	4b1f      	ldr	r3, [pc, #124]	@ (8002ae4 <NLLS+0x188c>)
 8002a66:	443b      	add	r3, r7
 8002a68:	edd3 7a00 	vldr	s15, [r3]
 8002a6c:	ee25 5a27 	vmul.f32	s10, s10, s15
 8002a70:	4b1d      	ldr	r3, [pc, #116]	@ (8002ae8 <NLLS+0x1890>)
 8002a72:	443b      	add	r3, r7
 8002a74:	edd3 7a00 	vldr	s15, [r3]
 8002a78:	ee65 7a27 	vmul.f32	s15, s10, s15
 8002a7c:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8002a80:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a84:	4b19      	ldr	r3, [pc, #100]	@ (8002aec <NLLS+0x1894>)
 8002a86:	443b      	add	r3, r7
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002a90:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8002a94:	4413      	add	r3, r2
 8002a96:	edd3 7a00 	vldr	s15, [r3]
 8002a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad4 <NLLS+0x187c>)
 8002a9c:	443b      	add	r3, r7
 8002a9e:	edd3 5a00 	vldr	s11, [r3]
 8002aa2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8002aa6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002aaa:	4b11      	ldr	r3, [pc, #68]	@ (8002af0 <NLLS+0x1898>)
 8002aac:	443b      	add	r3, r7
 8002aae:	edd3 5a00 	vldr	s11, [r3]
 8002ab2:	4b09      	ldr	r3, [pc, #36]	@ (8002ad8 <NLLS+0x1880>)
 8002ab4:	443b      	add	r3, r7
 8002ab6:	edd3 7a00 	vldr	s15, [r3]
 8002aba:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002abe:	4b09      	ldr	r3, [pc, #36]	@ (8002ae4 <NLLS+0x188c>)
 8002ac0:	443b      	add	r3, r7
 8002ac2:	edd3 7a00 	vldr	s15, [r3]
 8002ac6:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002aca:	4b08      	ldr	r3, [pc, #32]	@ (8002aec <NLLS+0x1894>)
 8002acc:	443b      	add	r3, r7
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	e017      	b.n	8002b04 <NLLS+0x18ac>
 8002ad4:	0001702c 	.word	0x0001702c
 8002ad8:	00017034 	.word	0x00017034
 8002adc:	00017030 	.word	0x00017030
 8002ae0:	00016fc4 	.word	0x00016fc4
 8002ae4:	00016fc8 	.word	0x00016fc8
 8002ae8:	00016fd8 	.word	0x00016fd8
 8002aec:	00017008 	.word	0x00017008
 8002af0:	00017038 	.word	0x00017038
 8002af4:	00016fcc 	.word	0x00016fcc
 8002af8:	00016fd4 	.word	0x00016fd4
 8002afc:	00017028 	.word	0x00017028
 8002b00:	00016fd0 	.word	0x00016fd0
 8002b04:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002b08:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	edd3 7a00 	vldr	s15, [r3]
 8002b12:	4bc2      	ldr	r3, [pc, #776]	@ (8002e1c <NLLS+0x1bc4>)
 8002b14:	443b      	add	r3, r7
 8002b16:	ed93 5a00 	vldr	s10, [r3]
 8002b1a:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002b1e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002b22:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002b26:	4bbe      	ldr	r3, [pc, #760]	@ (8002e20 <NLLS+0x1bc8>)
 8002b28:	443b      	add	r3, r7
 8002b2a:	edd3 5a00 	vldr	s11, [r3]
 8002b2e:	4bbd      	ldr	r3, [pc, #756]	@ (8002e24 <NLLS+0x1bcc>)
 8002b30:	443b      	add	r3, r7
 8002b32:	edd3 7a00 	vldr	s15, [r3]
 8002b36:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002b3a:	4bbb      	ldr	r3, [pc, #748]	@ (8002e28 <NLLS+0x1bd0>)
 8002b3c:	443b      	add	r3, r7
 8002b3e:	edd3 7a00 	vldr	s15, [r3]
 8002b42:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002b46:	4bb9      	ldr	r3, [pc, #740]	@ (8002e2c <NLLS+0x1bd4>)
 8002b48:	443b      	add	r3, r7
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002b52:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8002b56:	4413      	add	r3, r2
 8002b58:	edd3 7a00 	vldr	s15, [r3]
 8002b5c:	4bb4      	ldr	r3, [pc, #720]	@ (8002e30 <NLLS+0x1bd8>)
 8002b5e:	443b      	add	r3, r7
 8002b60:	ed93 5a00 	vldr	s10, [r3]
 8002b64:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002b68:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002b6c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002b70:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002b74:	4baa      	ldr	r3, [pc, #680]	@ (8002e20 <NLLS+0x1bc8>)
 8002b76:	443b      	add	r3, r7
 8002b78:	edd3 7a00 	vldr	s15, [r3]
 8002b7c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002b80:	4bac      	ldr	r3, [pc, #688]	@ (8002e34 <NLLS+0x1bdc>)
 8002b82:	443b      	add	r3, r7
 8002b84:	edd3 7a00 	vldr	s15, [r3]
 8002b88:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b8c:	4ba5      	ldr	r3, [pc, #660]	@ (8002e24 <NLLS+0x1bcc>)
 8002b8e:	443b      	add	r3, r7
 8002b90:	edd3 7a00 	vldr	s15, [r3]
 8002b94:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b98:	4ba7      	ldr	r3, [pc, #668]	@ (8002e38 <NLLS+0x1be0>)
 8002b9a:	443b      	add	r3, r7
 8002b9c:	edd3 7a00 	vldr	s15, [r3]
 8002ba0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ba4:	4ba4      	ldr	r3, [pc, #656]	@ (8002e38 <NLLS+0x1be0>)
 8002ba6:	443b      	add	r3, r7
 8002ba8:	edd3 7a00 	vldr	s15, [r3]
 8002bac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bb0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002bb4:	4ba1      	ldr	r3, [pc, #644]	@ (8002e3c <NLLS+0x1be4>)
 8002bb6:	443b      	add	r3, r7
 8002bb8:	edd3 7a00 	vldr	s15, [r3]
 8002bbc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002bc0:	4b9e      	ldr	r3, [pc, #632]	@ (8002e3c <NLLS+0x1be4>)
 8002bc2:	443b      	add	r3, r7
 8002bc4:	edd3 7a00 	vldr	s15, [r3]
 8002bc8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002bcc:	4b9c      	ldr	r3, [pc, #624]	@ (8002e40 <NLLS+0x1be8>)
 8002bce:	443b      	add	r3, r7
 8002bd0:	edd3 7a00 	vldr	s15, [r3]
 8002bd4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002bd8:	4b99      	ldr	r3, [pc, #612]	@ (8002e40 <NLLS+0x1be8>)
 8002bda:	443b      	add	r3, r7
 8002bdc:	edd3 7a00 	vldr	s15, [r3]
 8002be0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002be4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bec:	f24a 0340 	movw	r3, #41024	@ 0xa040
 8002bf0:	443b      	add	r3, r7
 8002bf2:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8002bf6:	4b8d      	ldr	r3, [pc, #564]	@ (8002e2c <NLLS+0x1bd4>)
 8002bf8:	443b      	add	r3, r7
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f603 5308 	addw	r3, r3, #3336	@ 0xd08
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	edc3 7a00 	vstr	s15, [r3]

			mat_H[4][i] = (2*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i])))/(sx*sy*sy*cos_rho*cos_rho) - (2*sin_lambda*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sy*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8002c08:	4b88      	ldr	r3, [pc, #544]	@ (8002e2c <NLLS+0x1bd4>)
 8002c0a:	443b      	add	r3, r7
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002c14:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8002c18:	4413      	add	r3, r2
 8002c1a:	edd3 7a00 	vldr	s15, [r3]
 8002c1e:	4b84      	ldr	r3, [pc, #528]	@ (8002e30 <NLLS+0x1bd8>)
 8002c20:	443b      	add	r3, r7
 8002c22:	ed93 7a00 	vldr	s14, [r3]
 8002c26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c2a:	4b7d      	ldr	r3, [pc, #500]	@ (8002e20 <NLLS+0x1bc8>)
 8002c2c:	443b      	add	r3, r7
 8002c2e:	edd3 7a00 	vldr	s15, [r3]
 8002c32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c36:	4b7f      	ldr	r3, [pc, #508]	@ (8002e34 <NLLS+0x1bdc>)
 8002c38:	443b      	add	r3, r7
 8002c3a:	edd3 6a00 	vldr	s13, [r3]
 8002c3e:	4b81      	ldr	r3, [pc, #516]	@ (8002e44 <NLLS+0x1bec>)
 8002c40:	443b      	add	r3, r7
 8002c42:	edd3 7a00 	vldr	s15, [r3]
 8002c46:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c4a:	4b78      	ldr	r3, [pc, #480]	@ (8002e2c <NLLS+0x1bd4>)
 8002c4c:	443b      	add	r3, r7
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002c56:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	edd3 7a00 	vldr	s15, [r3]
 8002c60:	4b79      	ldr	r3, [pc, #484]	@ (8002e48 <NLLS+0x1bf0>)
 8002c62:	443b      	add	r3, r7
 8002c64:	ed93 6a00 	vldr	s12, [r3]
 8002c68:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002c6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c74:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002c78:	4b69      	ldr	r3, [pc, #420]	@ (8002e20 <NLLS+0x1bc8>)
 8002c7a:	443b      	add	r3, r7
 8002c7c:	ed93 7a00 	vldr	s14, [r3]
 8002c80:	4b6c      	ldr	r3, [pc, #432]	@ (8002e34 <NLLS+0x1bdc>)
 8002c82:	443b      	add	r3, r7
 8002c84:	edd3 7a00 	vldr	s15, [r3]
 8002c88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c8c:	4b69      	ldr	r3, [pc, #420]	@ (8002e34 <NLLS+0x1bdc>)
 8002c8e:	443b      	add	r3, r7
 8002c90:	edd3 7a00 	vldr	s15, [r3]
 8002c94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c98:	4b69      	ldr	r3, [pc, #420]	@ (8002e40 <NLLS+0x1be8>)
 8002c9a:	443b      	add	r3, r7
 8002c9c:	edd3 7a00 	vldr	s15, [r3]
 8002ca0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ca4:	4b66      	ldr	r3, [pc, #408]	@ (8002e40 <NLLS+0x1be8>)
 8002ca6:	443b      	add	r3, r7
 8002ca8:	edd3 7a00 	vldr	s15, [r3]
 8002cac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cb4:	4b5c      	ldr	r3, [pc, #368]	@ (8002e28 <NLLS+0x1bd0>)
 8002cb6:	443b      	add	r3, r7
 8002cb8:	edd3 7a00 	vldr	s15, [r3]
 8002cbc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002cc0:	4b5c      	ldr	r3, [pc, #368]	@ (8002e34 <NLLS+0x1bdc>)
 8002cc2:	443b      	add	r3, r7
 8002cc4:	ed93 6a00 	vldr	s12, [r3]
 8002cc8:	4b56      	ldr	r3, [pc, #344]	@ (8002e24 <NLLS+0x1bcc>)
 8002cca:	443b      	add	r3, r7
 8002ccc:	edd3 7a00 	vldr	s15, [r3]
 8002cd0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002cd4:	4b54      	ldr	r3, [pc, #336]	@ (8002e28 <NLLS+0x1bd0>)
 8002cd6:	443b      	add	r3, r7
 8002cd8:	edd3 5a00 	vldr	s11, [r3]
 8002cdc:	4b59      	ldr	r3, [pc, #356]	@ (8002e44 <NLLS+0x1bec>)
 8002cde:	443b      	add	r3, r7
 8002ce0:	edd3 7a00 	vldr	s15, [r3]
 8002ce4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002ce8:	4b53      	ldr	r3, [pc, #332]	@ (8002e38 <NLLS+0x1be0>)
 8002cea:	443b      	add	r3, r7
 8002cec:	ed93 5a00 	vldr	s10, [r3]
 8002cf0:	4b53      	ldr	r3, [pc, #332]	@ (8002e40 <NLLS+0x1be8>)
 8002cf2:	443b      	add	r3, r7
 8002cf4:	edd3 7a00 	vldr	s15, [r3]
 8002cf8:	ee25 5a27 	vmul.f32	s10, s10, s15
 8002cfc:	4b53      	ldr	r3, [pc, #332]	@ (8002e4c <NLLS+0x1bf4>)
 8002cfe:	443b      	add	r3, r7
 8002d00:	edd3 7a00 	vldr	s15, [r3]
 8002d04:	ee65 7a27 	vmul.f32	s15, s10, s15
 8002d08:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8002d0c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002d10:	4b46      	ldr	r3, [pc, #280]	@ (8002e2c <NLLS+0x1bd4>)
 8002d12:	443b      	add	r3, r7
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002d1c:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8002d20:	4413      	add	r3, r2
 8002d22:	edd3 7a00 	vldr	s15, [r3]
 8002d26:	4b48      	ldr	r3, [pc, #288]	@ (8002e48 <NLLS+0x1bf0>)
 8002d28:	443b      	add	r3, r7
 8002d2a:	edd3 5a00 	vldr	s11, [r3]
 8002d2e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8002d32:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002d36:	4b3a      	ldr	r3, [pc, #232]	@ (8002e20 <NLLS+0x1bc8>)
 8002d38:	443b      	add	r3, r7
 8002d3a:	edd3 5a00 	vldr	s11, [r3]
 8002d3e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e34 <NLLS+0x1bdc>)
 8002d40:	443b      	add	r3, r7
 8002d42:	edd3 7a00 	vldr	s15, [r3]
 8002d46:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002d4a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e40 <NLLS+0x1be8>)
 8002d4c:	443b      	add	r3, r7
 8002d4e:	edd3 7a00 	vldr	s15, [r3]
 8002d52:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002d56:	4b35      	ldr	r3, [pc, #212]	@ (8002e2c <NLLS+0x1bd4>)
 8002d58:	443b      	add	r3, r7
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002d62:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8002d66:	4413      	add	r3, r2
 8002d68:	edd3 7a00 	vldr	s15, [r3]
 8002d6c:	4b2b      	ldr	r3, [pc, #172]	@ (8002e1c <NLLS+0x1bc4>)
 8002d6e:	443b      	add	r3, r7
 8002d70:	ed93 5a00 	vldr	s10, [r3]
 8002d74:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002d78:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002d7c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002d80:	4b27      	ldr	r3, [pc, #156]	@ (8002e20 <NLLS+0x1bc8>)
 8002d82:	443b      	add	r3, r7
 8002d84:	edd3 5a00 	vldr	s11, [r3]
 8002d88:	4b26      	ldr	r3, [pc, #152]	@ (8002e24 <NLLS+0x1bcc>)
 8002d8a:	443b      	add	r3, r7
 8002d8c:	edd3 7a00 	vldr	s15, [r3]
 8002d90:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002d94:	4b24      	ldr	r3, [pc, #144]	@ (8002e28 <NLLS+0x1bd0>)
 8002d96:	443b      	add	r3, r7
 8002d98:	edd3 7a00 	vldr	s15, [r3]
 8002d9c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002da0:	4b22      	ldr	r3, [pc, #136]	@ (8002e2c <NLLS+0x1bd4>)
 8002da2:	443b      	add	r3, r7
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002dac:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8002db0:	4413      	add	r3, r2
 8002db2:	edd3 7a00 	vldr	s15, [r3]
 8002db6:	4b1e      	ldr	r3, [pc, #120]	@ (8002e30 <NLLS+0x1bd8>)
 8002db8:	443b      	add	r3, r7
 8002dba:	ed93 5a00 	vldr	s10, [r3]
 8002dbe:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002dc2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002dc6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002dca:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002dce:	4b14      	ldr	r3, [pc, #80]	@ (8002e20 <NLLS+0x1bc8>)
 8002dd0:	443b      	add	r3, r7
 8002dd2:	edd3 6a00 	vldr	s13, [r3]
 8002dd6:	4b17      	ldr	r3, [pc, #92]	@ (8002e34 <NLLS+0x1bdc>)
 8002dd8:	443b      	add	r3, r7
 8002dda:	edd3 7a00 	vldr	s15, [r3]
 8002dde:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002de2:	4b14      	ldr	r3, [pc, #80]	@ (8002e34 <NLLS+0x1bdc>)
 8002de4:	443b      	add	r3, r7
 8002de6:	edd3 7a00 	vldr	s15, [r3]
 8002dea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002dee:	4b0d      	ldr	r3, [pc, #52]	@ (8002e24 <NLLS+0x1bcc>)
 8002df0:	443b      	add	r3, r7
 8002df2:	edd3 7a00 	vldr	s15, [r3]
 8002df6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8002e38 <NLLS+0x1be0>)
 8002dfc:	443b      	add	r3, r7
 8002dfe:	edd3 7a00 	vldr	s15, [r3]
 8002e02:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e06:	4b0c      	ldr	r3, [pc, #48]	@ (8002e38 <NLLS+0x1be0>)
 8002e08:	443b      	add	r3, r7
 8002e0a:	edd3 7a00 	vldr	s15, [r3]
 8002e0e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e12:	4b0a      	ldr	r3, [pc, #40]	@ (8002e3c <NLLS+0x1be4>)
 8002e14:	443b      	add	r3, r7
 8002e16:	edd3 7a00 	vldr	s15, [r3]
 8002e1a:	e019      	b.n	8002e50 <NLLS+0x1bf8>
 8002e1c:	00017024 	.word	0x00017024
 8002e20:	00017038 	.word	0x00017038
 8002e24:	00017030 	.word	0x00017030
 8002e28:	00016fd0 	.word	0x00016fd0
 8002e2c:	00017008 	.word	0x00017008
 8002e30:	00017028 	.word	0x00017028
 8002e34:	00017034 	.word	0x00017034
 8002e38:	00016fc4 	.word	0x00016fc4
 8002e3c:	00016fcc 	.word	0x00016fcc
 8002e40:	00016fc8 	.word	0x00016fc8
 8002e44:	00016fd4 	.word	0x00016fd4
 8002e48:	0001702c 	.word	0x0001702c
 8002e4c:	00016fd8 	.word	0x00016fd8
 8002e50:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e54:	4bc0      	ldr	r3, [pc, #768]	@ (8003158 <NLLS+0x1f00>)
 8002e56:	443b      	add	r3, r7
 8002e58:	edd3 7a00 	vldr	s15, [r3]
 8002e5c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e60:	4bbe      	ldr	r3, [pc, #760]	@ (800315c <NLLS+0x1f04>)
 8002e62:	443b      	add	r3, r7
 8002e64:	edd3 7a00 	vldr	s15, [r3]
 8002e68:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e6c:	4bbb      	ldr	r3, [pc, #748]	@ (800315c <NLLS+0x1f04>)
 8002e6e:	443b      	add	r3, r7
 8002e70:	edd3 7a00 	vldr	s15, [r3]
 8002e74:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e78:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002e7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e80:	f24a 0340 	movw	r3, #41024	@ 0xa040
 8002e84:	443b      	add	r3, r7
 8002e86:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8002e8a:	4bb5      	ldr	r3, [pc, #724]	@ (8003160 <NLLS+0x1f08>)
 8002e8c:	443b      	add	r3, r7
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f503 538b 	add.w	r3, r3, #4448	@ 0x1160
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	edc3 7a00 	vstr	s15, [r3]

			mat_H[5][i] = (2*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho);
 8002e9c:	4bb1      	ldr	r3, [pc, #708]	@ (8003164 <NLLS+0x1f0c>)
 8002e9e:	443b      	add	r3, r7
 8002ea0:	ed93 7a00 	vldr	s14, [r3]
 8002ea4:	4bb0      	ldr	r3, [pc, #704]	@ (8003168 <NLLS+0x1f10>)
 8002ea6:	443b      	add	r3, r7
 8002ea8:	edd3 7a00 	vldr	s15, [r3]
 8002eac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002eb0:	4bae      	ldr	r3, [pc, #696]	@ (800316c <NLLS+0x1f14>)
 8002eb2:	443b      	add	r3, r7
 8002eb4:	edd3 6a00 	vldr	s13, [r3]
 8002eb8:	4bad      	ldr	r3, [pc, #692]	@ (8003170 <NLLS+0x1f18>)
 8002eba:	443b      	add	r3, r7
 8002ebc:	edd3 7a00 	vldr	s15, [r3]
 8002ec0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ec4:	4bab      	ldr	r3, [pc, #684]	@ (8003174 <NLLS+0x1f1c>)
 8002ec6:	443b      	add	r3, r7
 8002ec8:	ed93 6a00 	vldr	s12, [r3]
 8002ecc:	4ba3      	ldr	r3, [pc, #652]	@ (800315c <NLLS+0x1f04>)
 8002ece:	443b      	add	r3, r7
 8002ed0:	edd3 7a00 	vldr	s15, [r3]
 8002ed4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002ed8:	4ba7      	ldr	r3, [pc, #668]	@ (8003178 <NLLS+0x1f20>)
 8002eda:	443b      	add	r3, r7
 8002edc:	edd3 7a00 	vldr	s15, [r3]
 8002ee0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002ee4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002ee8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002eec:	4b9c      	ldr	r3, [pc, #624]	@ (8003160 <NLLS+0x1f08>)
 8002eee:	443b      	add	r3, r7
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002ef8:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8002efc:	4413      	add	r3, r2
 8002efe:	edd3 7a00 	vldr	s15, [r3]
 8002f02:	4b9e      	ldr	r3, [pc, #632]	@ (800317c <NLLS+0x1f24>)
 8002f04:	443b      	add	r3, r7
 8002f06:	edd3 6a00 	vldr	s13, [r3]
 8002f0a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002f0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f12:	4b9b      	ldr	r3, [pc, #620]	@ (8003180 <NLLS+0x1f28>)
 8002f14:	443b      	add	r3, r7
 8002f16:	edd3 6a00 	vldr	s13, [r3]
 8002f1a:	4b92      	ldr	r3, [pc, #584]	@ (8003164 <NLLS+0x1f0c>)
 8002f1c:	443b      	add	r3, r7
 8002f1e:	edd3 7a00 	vldr	s15, [r3]
 8002f22:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f26:	4b8d      	ldr	r3, [pc, #564]	@ (800315c <NLLS+0x1f04>)
 8002f28:	443b      	add	r3, r7
 8002f2a:	edd3 7a00 	vldr	s15, [r3]
 8002f2e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f32:	4b8b      	ldr	r3, [pc, #556]	@ (8003160 <NLLS+0x1f08>)
 8002f34:	443b      	add	r3, r7
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002f3e:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8002f42:	4413      	add	r3, r2
 8002f44:	edd3 7a00 	vldr	s15, [r3]
 8002f48:	4b8e      	ldr	r3, [pc, #568]	@ (8003184 <NLLS+0x1f2c>)
 8002f4a:	443b      	add	r3, r7
 8002f4c:	ed93 6a00 	vldr	s12, [r3]
 8002f50:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002f54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f5c:	4b88      	ldr	r3, [pc, #544]	@ (8003180 <NLLS+0x1f28>)
 8002f5e:	443b      	add	r3, r7
 8002f60:	edd3 6a00 	vldr	s13, [r3]
 8002f64:	4b80      	ldr	r3, [pc, #512]	@ (8003168 <NLLS+0x1f10>)
 8002f66:	443b      	add	r3, r7
 8002f68:	edd3 7a00 	vldr	s15, [r3]
 8002f6c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f70:	4b7e      	ldr	r3, [pc, #504]	@ (800316c <NLLS+0x1f14>)
 8002f72:	443b      	add	r3, r7
 8002f74:	edd3 7a00 	vldr	s15, [r3]
 8002f78:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f7c:	4b78      	ldr	r3, [pc, #480]	@ (8003160 <NLLS+0x1f08>)
 8002f7e:	443b      	add	r3, r7
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002f88:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	edd3 7a00 	vldr	s15, [r3]
 8002f92:	4b7d      	ldr	r3, [pc, #500]	@ (8003188 <NLLS+0x1f30>)
 8002f94:	443b      	add	r3, r7
 8002f96:	ed93 6a00 	vldr	s12, [r3]
 8002f9a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002f9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fa6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002faa:	4b75      	ldr	r3, [pc, #468]	@ (8003180 <NLLS+0x1f28>)
 8002fac:	443b      	add	r3, r7
 8002fae:	ed93 7a00 	vldr	s14, [r3]
 8002fb2:	4b6c      	ldr	r3, [pc, #432]	@ (8003164 <NLLS+0x1f0c>)
 8002fb4:	443b      	add	r3, r7
 8002fb6:	edd3 7a00 	vldr	s15, [r3]
 8002fba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fbe:	4b6a      	ldr	r3, [pc, #424]	@ (8003168 <NLLS+0x1f10>)
 8002fc0:	443b      	add	r3, r7
 8002fc2:	edd3 7a00 	vldr	s15, [r3]
 8002fc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fca:	4b67      	ldr	r3, [pc, #412]	@ (8003168 <NLLS+0x1f10>)
 8002fcc:	443b      	add	r3, r7
 8002fce:	edd3 7a00 	vldr	s15, [r3]
 8002fd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fd6:	4b67      	ldr	r3, [pc, #412]	@ (8003174 <NLLS+0x1f1c>)
 8002fd8:	443b      	add	r3, r7
 8002fda:	edd3 7a00 	vldr	s15, [r3]
 8002fde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fe2:	4b64      	ldr	r3, [pc, #400]	@ (8003174 <NLLS+0x1f1c>)
 8002fe4:	443b      	add	r3, r7
 8002fe6:	edd3 7a00 	vldr	s15, [r3]
 8002fea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fee:	4b5a      	ldr	r3, [pc, #360]	@ (8003158 <NLLS+0x1f00>)
 8002ff0:	443b      	add	r3, r7
 8002ff2:	edd3 7a00 	vldr	s15, [r3]
 8002ff6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ffa:	4b57      	ldr	r3, [pc, #348]	@ (8003158 <NLLS+0x1f00>)
 8002ffc:	443b      	add	r3, r7
 8002ffe:	edd3 7a00 	vldr	s15, [r3]
 8003002:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003006:	4b55      	ldr	r3, [pc, #340]	@ (800315c <NLLS+0x1f04>)
 8003008:	443b      	add	r3, r7
 800300a:	edd3 7a00 	vldr	s15, [r3]
 800300e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003012:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003016:	f24a 0340 	movw	r3, #41024	@ 0xa040
 800301a:	443b      	add	r3, r7
 800301c:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8003020:	4b4f      	ldr	r3, [pc, #316]	@ (8003160 <NLLS+0x1f08>)
 8003022:	443b      	add	r3, r7
 8003024:	6819      	ldr	r1, [r3, #0]
 8003026:	f241 53b8 	movw	r3, #5560	@ 0x15b8
 800302a:	440b      	add	r3, r1
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	edc3 7a00 	vstr	s15, [r3]

			mat_H[6][i] = -(2*(bx*sy - mx[i]*sy - by*sx*sin_rho + my[i]*sx*sin_rho)*(by*sx*sz*sin_lambda*sin_lambda - my[i]*sx*sz*sin_lambda*sin_lambda + by*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - my[i]*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - bz*sx*sy*cos_rho*sin_lambda + mz[i]*sx*sy*cos_rho*sin_lambda - bx*sy*sz*sin_lambda*sin_lambda*sin_rho + mx[i]*sy*sz*sin_lambda*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + mx[i]*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + bx*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi - mx[i]*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi))/(sx*sx*sy*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*(cos_rho*cos_rho*cos_rho));
 8003034:	4b51      	ldr	r3, [pc, #324]	@ (800317c <NLLS+0x1f24>)
 8003036:	443b      	add	r3, r7
 8003038:	ed93 7a00 	vldr	s14, [r3]
 800303c:	4b49      	ldr	r3, [pc, #292]	@ (8003164 <NLLS+0x1f0c>)
 800303e:	443b      	add	r3, r7
 8003040:	edd3 7a00 	vldr	s15, [r3]
 8003044:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003048:	4b45      	ldr	r3, [pc, #276]	@ (8003160 <NLLS+0x1f08>)
 800304a:	443b      	add	r3, r7
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003054:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8003058:	4413      	add	r3, r2
 800305a:	edd3 6a00 	vldr	s13, [r3]
 800305e:	4b41      	ldr	r3, [pc, #260]	@ (8003164 <NLLS+0x1f0c>)
 8003060:	443b      	add	r3, r7
 8003062:	edd3 7a00 	vldr	s15, [r3]
 8003066:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800306a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800306e:	4b46      	ldr	r3, [pc, #280]	@ (8003188 <NLLS+0x1f30>)
 8003070:	443b      	add	r3, r7
 8003072:	edd3 6a00 	vldr	s13, [r3]
 8003076:	4b42      	ldr	r3, [pc, #264]	@ (8003180 <NLLS+0x1f28>)
 8003078:	443b      	add	r3, r7
 800307a:	edd3 7a00 	vldr	s15, [r3]
 800307e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003082:	4b3b      	ldr	r3, [pc, #236]	@ (8003170 <NLLS+0x1f18>)
 8003084:	443b      	add	r3, r7
 8003086:	edd3 7a00 	vldr	s15, [r3]
 800308a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800308e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003092:	4b33      	ldr	r3, [pc, #204]	@ (8003160 <NLLS+0x1f08>)
 8003094:	443b      	add	r3, r7
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800309e:	f852 2c38 	ldr.w	r2, [r2, #-56]
 80030a2:	4413      	add	r3, r2
 80030a4:	edd3 6a00 	vldr	s13, [r3]
 80030a8:	4b35      	ldr	r3, [pc, #212]	@ (8003180 <NLLS+0x1f28>)
 80030aa:	443b      	add	r3, r7
 80030ac:	edd3 7a00 	vldr	s15, [r3]
 80030b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80030b4:	4b2e      	ldr	r3, [pc, #184]	@ (8003170 <NLLS+0x1f18>)
 80030b6:	443b      	add	r3, r7
 80030b8:	edd3 7a00 	vldr	s15, [r3]
 80030bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030c4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80030c8:	4b2f      	ldr	r3, [pc, #188]	@ (8003188 <NLLS+0x1f30>)
 80030ca:	443b      	add	r3, r7
 80030cc:	edd3 6a00 	vldr	s13, [r3]
 80030d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003180 <NLLS+0x1f28>)
 80030d2:	443b      	add	r3, r7
 80030d4:	edd3 7a00 	vldr	s15, [r3]
 80030d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80030dc:	4b22      	ldr	r3, [pc, #136]	@ (8003168 <NLLS+0x1f10>)
 80030de:	443b      	add	r3, r7
 80030e0:	edd3 7a00 	vldr	s15, [r3]
 80030e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80030e8:	4b20      	ldr	r3, [pc, #128]	@ (800316c <NLLS+0x1f14>)
 80030ea:	443b      	add	r3, r7
 80030ec:	edd3 7a00 	vldr	s15, [r3]
 80030f0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80030f4:	4b1d      	ldr	r3, [pc, #116]	@ (800316c <NLLS+0x1f14>)
 80030f6:	443b      	add	r3, r7
 80030f8:	edd3 7a00 	vldr	s15, [r3]
 80030fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003100:	4b17      	ldr	r3, [pc, #92]	@ (8003160 <NLLS+0x1f08>)
 8003102:	443b      	add	r3, r7
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800310c:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8003110:	4413      	add	r3, r2
 8003112:	ed93 6a00 	vldr	s12, [r3]
 8003116:	4b1a      	ldr	r3, [pc, #104]	@ (8003180 <NLLS+0x1f28>)
 8003118:	443b      	add	r3, r7
 800311a:	edd3 7a00 	vldr	s15, [r3]
 800311e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003122:	4b11      	ldr	r3, [pc, #68]	@ (8003168 <NLLS+0x1f10>)
 8003124:	443b      	add	r3, r7
 8003126:	edd3 7a00 	vldr	s15, [r3]
 800312a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800312e:	4b0f      	ldr	r3, [pc, #60]	@ (800316c <NLLS+0x1f14>)
 8003130:	443b      	add	r3, r7
 8003132:	edd3 7a00 	vldr	s15, [r3]
 8003136:	ee26 6a27 	vmul.f32	s12, s12, s15
 800313a:	4b0c      	ldr	r3, [pc, #48]	@ (800316c <NLLS+0x1f14>)
 800313c:	443b      	add	r3, r7
 800313e:	edd3 7a00 	vldr	s15, [r3]
 8003142:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003146:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800314a:	4b0f      	ldr	r3, [pc, #60]	@ (8003188 <NLLS+0x1f30>)
 800314c:	443b      	add	r3, r7
 800314e:	ed93 6a00 	vldr	s12, [r3]
 8003152:	4b0b      	ldr	r3, [pc, #44]	@ (8003180 <NLLS+0x1f28>)
 8003154:	443b      	add	r3, r7
 8003156:	e019      	b.n	800318c <NLLS+0x1f34>
 8003158:	00016fcc 	.word	0x00016fcc
 800315c:	00016fc8 	.word	0x00016fc8
 8003160:	00017008 	.word	0x00017008
 8003164:	00017034 	.word	0x00017034
 8003168:	00017030 	.word	0x00017030
 800316c:	00016fd0 	.word	0x00016fd0
 8003170:	00016fd4 	.word	0x00016fd4
 8003174:	00016fc4 	.word	0x00016fc4
 8003178:	00016fd8 	.word	0x00016fd8
 800317c:	0001702c 	.word	0x0001702c
 8003180:	00017038 	.word	0x00017038
 8003184:	00017024 	.word	0x00017024
 8003188:	00017028 	.word	0x00017028
 800318c:	edd3 7a00 	vldr	s15, [r3]
 8003190:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003194:	4bbf      	ldr	r3, [pc, #764]	@ (8003494 <NLLS+0x223c>)
 8003196:	443b      	add	r3, r7
 8003198:	edd3 7a00 	vldr	s15, [r3]
 800319c:	ee26 6a27 	vmul.f32	s12, s12, s15
 80031a0:	4bbd      	ldr	r3, [pc, #756]	@ (8003498 <NLLS+0x2240>)
 80031a2:	443b      	add	r3, r7
 80031a4:	edd3 7a00 	vldr	s15, [r3]
 80031a8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80031ac:	4bba      	ldr	r3, [pc, #744]	@ (8003498 <NLLS+0x2240>)
 80031ae:	443b      	add	r3, r7
 80031b0:	edd3 7a00 	vldr	s15, [r3]
 80031b4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80031b8:	4bb8      	ldr	r3, [pc, #736]	@ (800349c <NLLS+0x2244>)
 80031ba:	443b      	add	r3, r7
 80031bc:	edd3 7a00 	vldr	s15, [r3]
 80031c0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80031c4:	4bb5      	ldr	r3, [pc, #724]	@ (800349c <NLLS+0x2244>)
 80031c6:	443b      	add	r3, r7
 80031c8:	edd3 7a00 	vldr	s15, [r3]
 80031cc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80031d0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80031d4:	4bb2      	ldr	r3, [pc, #712]	@ (80034a0 <NLLS+0x2248>)
 80031d6:	443b      	add	r3, r7
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80031e0:	f852 2c38 	ldr.w	r2, [r2, #-56]
 80031e4:	4413      	add	r3, r2
 80031e6:	ed93 6a00 	vldr	s12, [r3]
 80031ea:	4bae      	ldr	r3, [pc, #696]	@ (80034a4 <NLLS+0x224c>)
 80031ec:	443b      	add	r3, r7
 80031ee:	edd3 7a00 	vldr	s15, [r3]
 80031f2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80031f6:	4ba7      	ldr	r3, [pc, #668]	@ (8003494 <NLLS+0x223c>)
 80031f8:	443b      	add	r3, r7
 80031fa:	edd3 7a00 	vldr	s15, [r3]
 80031fe:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003202:	4ba5      	ldr	r3, [pc, #660]	@ (8003498 <NLLS+0x2240>)
 8003204:	443b      	add	r3, r7
 8003206:	edd3 7a00 	vldr	s15, [r3]
 800320a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800320e:	4ba2      	ldr	r3, [pc, #648]	@ (8003498 <NLLS+0x2240>)
 8003210:	443b      	add	r3, r7
 8003212:	edd3 7a00 	vldr	s15, [r3]
 8003216:	ee26 6a27 	vmul.f32	s12, s12, s15
 800321a:	4ba0      	ldr	r3, [pc, #640]	@ (800349c <NLLS+0x2244>)
 800321c:	443b      	add	r3, r7
 800321e:	edd3 7a00 	vldr	s15, [r3]
 8003222:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003226:	4b9d      	ldr	r3, [pc, #628]	@ (800349c <NLLS+0x2244>)
 8003228:	443b      	add	r3, r7
 800322a:	edd3 7a00 	vldr	s15, [r3]
 800322e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003232:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003236:	4b9c      	ldr	r3, [pc, #624]	@ (80034a8 <NLLS+0x2250>)
 8003238:	443b      	add	r3, r7
 800323a:	ed93 6a00 	vldr	s12, [r3]
 800323e:	4b99      	ldr	r3, [pc, #612]	@ (80034a4 <NLLS+0x224c>)
 8003240:	443b      	add	r3, r7
 8003242:	edd3 7a00 	vldr	s15, [r3]
 8003246:	ee26 6a27 	vmul.f32	s12, s12, s15
 800324a:	4b98      	ldr	r3, [pc, #608]	@ (80034ac <NLLS+0x2254>)
 800324c:	443b      	add	r3, r7
 800324e:	edd3 7a00 	vldr	s15, [r3]
 8003252:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003256:	4b96      	ldr	r3, [pc, #600]	@ (80034b0 <NLLS+0x2258>)
 8003258:	443b      	add	r3, r7
 800325a:	edd3 7a00 	vldr	s15, [r3]
 800325e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003262:	4b94      	ldr	r3, [pc, #592]	@ (80034b4 <NLLS+0x225c>)
 8003264:	443b      	add	r3, r7
 8003266:	edd3 7a00 	vldr	s15, [r3]
 800326a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800326e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003272:	4b8b      	ldr	r3, [pc, #556]	@ (80034a0 <NLLS+0x2248>)
 8003274:	443b      	add	r3, r7
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800327e:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8003282:	4413      	add	r3, r2
 8003284:	ed93 6a00 	vldr	s12, [r3]
 8003288:	4b86      	ldr	r3, [pc, #536]	@ (80034a4 <NLLS+0x224c>)
 800328a:	443b      	add	r3, r7
 800328c:	edd3 7a00 	vldr	s15, [r3]
 8003290:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003294:	4b85      	ldr	r3, [pc, #532]	@ (80034ac <NLLS+0x2254>)
 8003296:	443b      	add	r3, r7
 8003298:	edd3 7a00 	vldr	s15, [r3]
 800329c:	ee26 6a27 	vmul.f32	s12, s12, s15
 80032a0:	4b83      	ldr	r3, [pc, #524]	@ (80034b0 <NLLS+0x2258>)
 80032a2:	443b      	add	r3, r7
 80032a4:	edd3 7a00 	vldr	s15, [r3]
 80032a8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80032ac:	4b81      	ldr	r3, [pc, #516]	@ (80034b4 <NLLS+0x225c>)
 80032ae:	443b      	add	r3, r7
 80032b0:	edd3 7a00 	vldr	s15, [r3]
 80032b4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80032b8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80032bc:	4b7e      	ldr	r3, [pc, #504]	@ (80034b8 <NLLS+0x2260>)
 80032be:	443b      	add	r3, r7
 80032c0:	ed93 6a00 	vldr	s12, [r3]
 80032c4:	4b79      	ldr	r3, [pc, #484]	@ (80034ac <NLLS+0x2254>)
 80032c6:	443b      	add	r3, r7
 80032c8:	edd3 7a00 	vldr	s15, [r3]
 80032cc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80032d0:	4b70      	ldr	r3, [pc, #448]	@ (8003494 <NLLS+0x223c>)
 80032d2:	443b      	add	r3, r7
 80032d4:	edd3 7a00 	vldr	s15, [r3]
 80032d8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80032dc:	4b75      	ldr	r3, [pc, #468]	@ (80034b4 <NLLS+0x225c>)
 80032de:	443b      	add	r3, r7
 80032e0:	edd3 7a00 	vldr	s15, [r3]
 80032e4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80032e8:	4b72      	ldr	r3, [pc, #456]	@ (80034b4 <NLLS+0x225c>)
 80032ea:	443b      	add	r3, r7
 80032ec:	edd3 7a00 	vldr	s15, [r3]
 80032f0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80032f4:	4b71      	ldr	r3, [pc, #452]	@ (80034bc <NLLS+0x2264>)
 80032f6:	443b      	add	r3, r7
 80032f8:	edd3 7a00 	vldr	s15, [r3]
 80032fc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003300:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003304:	4b66      	ldr	r3, [pc, #408]	@ (80034a0 <NLLS+0x2248>)
 8003306:	443b      	add	r3, r7
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003310:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8003314:	4413      	add	r3, r2
 8003316:	ed93 6a00 	vldr	s12, [r3]
 800331a:	4b64      	ldr	r3, [pc, #400]	@ (80034ac <NLLS+0x2254>)
 800331c:	443b      	add	r3, r7
 800331e:	edd3 7a00 	vldr	s15, [r3]
 8003322:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003326:	4b5b      	ldr	r3, [pc, #364]	@ (8003494 <NLLS+0x223c>)
 8003328:	443b      	add	r3, r7
 800332a:	edd3 7a00 	vldr	s15, [r3]
 800332e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003332:	4b60      	ldr	r3, [pc, #384]	@ (80034b4 <NLLS+0x225c>)
 8003334:	443b      	add	r3, r7
 8003336:	edd3 7a00 	vldr	s15, [r3]
 800333a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800333e:	4b5d      	ldr	r3, [pc, #372]	@ (80034b4 <NLLS+0x225c>)
 8003340:	443b      	add	r3, r7
 8003342:	edd3 7a00 	vldr	s15, [r3]
 8003346:	ee26 6a27 	vmul.f32	s12, s12, s15
 800334a:	4b5c      	ldr	r3, [pc, #368]	@ (80034bc <NLLS+0x2264>)
 800334c:	443b      	add	r3, r7
 800334e:	edd3 7a00 	vldr	s15, [r3]
 8003352:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003356:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800335a:	4b57      	ldr	r3, [pc, #348]	@ (80034b8 <NLLS+0x2260>)
 800335c:	443b      	add	r3, r7
 800335e:	ed93 6a00 	vldr	s12, [r3]
 8003362:	4b52      	ldr	r3, [pc, #328]	@ (80034ac <NLLS+0x2254>)
 8003364:	443b      	add	r3, r7
 8003366:	edd3 7a00 	vldr	s15, [r3]
 800336a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800336e:	4b49      	ldr	r3, [pc, #292]	@ (8003494 <NLLS+0x223c>)
 8003370:	443b      	add	r3, r7
 8003372:	edd3 7a00 	vldr	s15, [r3]
 8003376:	ee26 6a27 	vmul.f32	s12, s12, s15
 800337a:	4b47      	ldr	r3, [pc, #284]	@ (8003498 <NLLS+0x2240>)
 800337c:	443b      	add	r3, r7
 800337e:	edd3 7a00 	vldr	s15, [r3]
 8003382:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003386:	4b44      	ldr	r3, [pc, #272]	@ (8003498 <NLLS+0x2240>)
 8003388:	443b      	add	r3, r7
 800338a:	edd3 7a00 	vldr	s15, [r3]
 800338e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003392:	4b42      	ldr	r3, [pc, #264]	@ (800349c <NLLS+0x2244>)
 8003394:	443b      	add	r3, r7
 8003396:	edd3 7a00 	vldr	s15, [r3]
 800339a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800339e:	4b3f      	ldr	r3, [pc, #252]	@ (800349c <NLLS+0x2244>)
 80033a0:	443b      	add	r3, r7
 80033a2:	edd3 7a00 	vldr	s15, [r3]
 80033a6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80033aa:	4b44      	ldr	r3, [pc, #272]	@ (80034bc <NLLS+0x2264>)
 80033ac:	443b      	add	r3, r7
 80033ae:	edd3 7a00 	vldr	s15, [r3]
 80033b2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80033b6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80033ba:	4b39      	ldr	r3, [pc, #228]	@ (80034a0 <NLLS+0x2248>)
 80033bc:	443b      	add	r3, r7
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80033c6:	f852 2c34 	ldr.w	r2, [r2, #-52]
 80033ca:	4413      	add	r3, r2
 80033cc:	ed93 6a00 	vldr	s12, [r3]
 80033d0:	4b36      	ldr	r3, [pc, #216]	@ (80034ac <NLLS+0x2254>)
 80033d2:	443b      	add	r3, r7
 80033d4:	edd3 7a00 	vldr	s15, [r3]
 80033d8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80033dc:	4b2d      	ldr	r3, [pc, #180]	@ (8003494 <NLLS+0x223c>)
 80033de:	443b      	add	r3, r7
 80033e0:	edd3 7a00 	vldr	s15, [r3]
 80033e4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80033e8:	4b2b      	ldr	r3, [pc, #172]	@ (8003498 <NLLS+0x2240>)
 80033ea:	443b      	add	r3, r7
 80033ec:	edd3 7a00 	vldr	s15, [r3]
 80033f0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80033f4:	4b28      	ldr	r3, [pc, #160]	@ (8003498 <NLLS+0x2240>)
 80033f6:	443b      	add	r3, r7
 80033f8:	edd3 7a00 	vldr	s15, [r3]
 80033fc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003400:	4b26      	ldr	r3, [pc, #152]	@ (800349c <NLLS+0x2244>)
 8003402:	443b      	add	r3, r7
 8003404:	edd3 7a00 	vldr	s15, [r3]
 8003408:	ee26 6a27 	vmul.f32	s12, s12, s15
 800340c:	4b23      	ldr	r3, [pc, #140]	@ (800349c <NLLS+0x2244>)
 800340e:	443b      	add	r3, r7
 8003410:	edd3 7a00 	vldr	s15, [r3]
 8003414:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003418:	4b28      	ldr	r3, [pc, #160]	@ (80034bc <NLLS+0x2264>)
 800341a:	443b      	add	r3, r7
 800341c:	edd3 7a00 	vldr	s15, [r3]
 8003420:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003424:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003428:	4b23      	ldr	r3, [pc, #140]	@ (80034b8 <NLLS+0x2260>)
 800342a:	443b      	add	r3, r7
 800342c:	ed93 6a00 	vldr	s12, [r3]
 8003430:	4b1e      	ldr	r3, [pc, #120]	@ (80034ac <NLLS+0x2254>)
 8003432:	443b      	add	r3, r7
 8003434:	edd3 7a00 	vldr	s15, [r3]
 8003438:	ee26 6a27 	vmul.f32	s12, s12, s15
 800343c:	4b15      	ldr	r3, [pc, #84]	@ (8003494 <NLLS+0x223c>)
 800343e:	443b      	add	r3, r7
 8003440:	edd3 7a00 	vldr	s15, [r3]
 8003444:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003448:	4b13      	ldr	r3, [pc, #76]	@ (8003498 <NLLS+0x2240>)
 800344a:	443b      	add	r3, r7
 800344c:	edd3 7a00 	vldr	s15, [r3]
 8003450:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003454:	4b16      	ldr	r3, [pc, #88]	@ (80034b0 <NLLS+0x2258>)
 8003456:	443b      	add	r3, r7
 8003458:	edd3 7a00 	vldr	s15, [r3]
 800345c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003460:	4b14      	ldr	r3, [pc, #80]	@ (80034b4 <NLLS+0x225c>)
 8003462:	443b      	add	r3, r7
 8003464:	edd3 7a00 	vldr	s15, [r3]
 8003468:	ee26 6a27 	vmul.f32	s12, s12, s15
 800346c:	4b14      	ldr	r3, [pc, #80]	@ (80034c0 <NLLS+0x2268>)
 800346e:	443b      	add	r3, r7
 8003470:	edd3 7a00 	vldr	s15, [r3]
 8003474:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003478:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800347c:	4b08      	ldr	r3, [pc, #32]	@ (80034a0 <NLLS+0x2248>)
 800347e:	443b      	add	r3, r7
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003488:	f852 2c34 	ldr.w	r2, [r2, #-52]
 800348c:	4413      	add	r3, r2
 800348e:	ed93 6a00 	vldr	s12, [r3]
 8003492:	e017      	b.n	80034c4 <NLLS+0x226c>
 8003494:	00017030 	.word	0x00017030
 8003498:	00016fc4 	.word	0x00016fc4
 800349c:	00016fcc 	.word	0x00016fcc
 80034a0:	00017008 	.word	0x00017008
 80034a4:	00017038 	.word	0x00017038
 80034a8:	00017024 	.word	0x00017024
 80034ac:	00017034 	.word	0x00017034
 80034b0:	00016fc8 	.word	0x00016fc8
 80034b4:	00016fd0 	.word	0x00016fd0
 80034b8:	0001702c 	.word	0x0001702c
 80034bc:	00016fd4 	.word	0x00016fd4
 80034c0:	00016fd8 	.word	0x00016fd8
 80034c4:	4bc0      	ldr	r3, [pc, #768]	@ (80037c8 <NLLS+0x2570>)
 80034c6:	443b      	add	r3, r7
 80034c8:	edd3 7a00 	vldr	s15, [r3]
 80034cc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80034d0:	4bbe      	ldr	r3, [pc, #760]	@ (80037cc <NLLS+0x2574>)
 80034d2:	443b      	add	r3, r7
 80034d4:	edd3 7a00 	vldr	s15, [r3]
 80034d8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80034dc:	4bbc      	ldr	r3, [pc, #752]	@ (80037d0 <NLLS+0x2578>)
 80034de:	443b      	add	r3, r7
 80034e0:	edd3 7a00 	vldr	s15, [r3]
 80034e4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80034e8:	4bba      	ldr	r3, [pc, #744]	@ (80037d4 <NLLS+0x257c>)
 80034ea:	443b      	add	r3, r7
 80034ec:	edd3 7a00 	vldr	s15, [r3]
 80034f0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80034f4:	4bb8      	ldr	r3, [pc, #736]	@ (80037d8 <NLLS+0x2580>)
 80034f6:	443b      	add	r3, r7
 80034f8:	edd3 7a00 	vldr	s15, [r3]
 80034fc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003500:	4bb6      	ldr	r3, [pc, #728]	@ (80037dc <NLLS+0x2584>)
 8003502:	443b      	add	r3, r7
 8003504:	edd3 7a00 	vldr	s15, [r3]
 8003508:	ee66 7a27 	vmul.f32	s15, s12, s15
 800350c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003514:	eef1 6a67 	vneg.f32	s13, s15
 8003518:	4bb1      	ldr	r3, [pc, #708]	@ (80037e0 <NLLS+0x2588>)
 800351a:	443b      	add	r3, r7
 800351c:	edd3 7a00 	vldr	s15, [r3]
 8003520:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003524:	4ba8      	ldr	r3, [pc, #672]	@ (80037c8 <NLLS+0x2570>)
 8003526:	443b      	add	r3, r7
 8003528:	edd3 7a00 	vldr	s15, [r3]
 800352c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003530:	4ba5      	ldr	r3, [pc, #660]	@ (80037c8 <NLLS+0x2570>)
 8003532:	443b      	add	r3, r7
 8003534:	edd3 7a00 	vldr	s15, [r3]
 8003538:	ee27 7a27 	vmul.f32	s14, s14, s15
 800353c:	4ba3      	ldr	r3, [pc, #652]	@ (80037cc <NLLS+0x2574>)
 800353e:	443b      	add	r3, r7
 8003540:	edd3 7a00 	vldr	s15, [r3]
 8003544:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003548:	4ba1      	ldr	r3, [pc, #644]	@ (80037d0 <NLLS+0x2578>)
 800354a:	443b      	add	r3, r7
 800354c:	edd3 7a00 	vldr	s15, [r3]
 8003550:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003554:	4b9e      	ldr	r3, [pc, #632]	@ (80037d0 <NLLS+0x2578>)
 8003556:	443b      	add	r3, r7
 8003558:	edd3 7a00 	vldr	s15, [r3]
 800355c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003560:	4ba0      	ldr	r3, [pc, #640]	@ (80037e4 <NLLS+0x258c>)
 8003562:	443b      	add	r3, r7
 8003564:	edd3 7a00 	vldr	s15, [r3]
 8003568:	ee27 7a27 	vmul.f32	s14, s14, s15
 800356c:	4b9d      	ldr	r3, [pc, #628]	@ (80037e4 <NLLS+0x258c>)
 800356e:	443b      	add	r3, r7
 8003570:	edd3 7a00 	vldr	s15, [r3]
 8003574:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003578:	4b96      	ldr	r3, [pc, #600]	@ (80037d4 <NLLS+0x257c>)
 800357a:	443b      	add	r3, r7
 800357c:	edd3 7a00 	vldr	s15, [r3]
 8003580:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8003584:	4b93      	ldr	r3, [pc, #588]	@ (80037d4 <NLLS+0x257c>)
 8003586:	443b      	add	r3, r7
 8003588:	edd3 7a00 	vldr	s15, [r3]
 800358c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003590:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003594:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003598:	f24a 0340 	movw	r3, #41024	@ 0xa040
 800359c:	443b      	add	r3, r7
 800359e:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 80035a2:	4b91      	ldr	r3, [pc, #580]	@ (80037e8 <NLLS+0x2590>)
 80035a4:	443b      	add	r3, r7
 80035a6:	6819      	ldr	r1, [r3, #0]
 80035a8:	f641 2310 	movw	r3, #6672	@ 0x1a10
 80035ac:	440b      	add	r3, r1
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	edc3 7a00 	vstr	s15, [r3]

			mat_H[7][i] = (2*sin_phi*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*(cos_phi*cos_phi*cos_phi)*cos_rho*cos_rho) - (2*(bx - mx[i])*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sz*cos_lambda*cos_phi*cos_rho);
 80035b6:	4b89      	ldr	r3, [pc, #548]	@ (80037dc <NLLS+0x2584>)
 80035b8:	443b      	add	r3, r7
 80035ba:	edd3 7a00 	vldr	s15, [r3]
 80035be:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80035c2:	4b81      	ldr	r3, [pc, #516]	@ (80037c8 <NLLS+0x2570>)
 80035c4:	443b      	add	r3, r7
 80035c6:	edd3 6a00 	vldr	s13, [r3]
 80035ca:	4b80      	ldr	r3, [pc, #512]	@ (80037cc <NLLS+0x2574>)
 80035cc:	443b      	add	r3, r7
 80035ce:	edd3 7a00 	vldr	s15, [r3]
 80035d2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80035d6:	4b80      	ldr	r3, [pc, #512]	@ (80037d8 <NLLS+0x2580>)
 80035d8:	443b      	add	r3, r7
 80035da:	ed93 6a00 	vldr	s12, [r3]
 80035de:	4b83      	ldr	r3, [pc, #524]	@ (80037ec <NLLS+0x2594>)
 80035e0:	443b      	add	r3, r7
 80035e2:	edd3 7a00 	vldr	s15, [r3]
 80035e6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80035ea:	4b79      	ldr	r3, [pc, #484]	@ (80037d0 <NLLS+0x2578>)
 80035ec:	443b      	add	r3, r7
 80035ee:	edd3 5a00 	vldr	s11, [r3]
 80035f2:	4b78      	ldr	r3, [pc, #480]	@ (80037d4 <NLLS+0x257c>)
 80035f4:	443b      	add	r3, r7
 80035f6:	edd3 7a00 	vldr	s15, [r3]
 80035fa:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80035fe:	4b77      	ldr	r3, [pc, #476]	@ (80037dc <NLLS+0x2584>)
 8003600:	443b      	add	r3, r7
 8003602:	edd3 7a00 	vldr	s15, [r3]
 8003606:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800360a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800360e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003612:	4b75      	ldr	r3, [pc, #468]	@ (80037e8 <NLLS+0x2590>)
 8003614:	443b      	add	r3, r7
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800361e:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8003622:	4413      	add	r3, r2
 8003624:	edd3 7a00 	vldr	s15, [r3]
 8003628:	4b71      	ldr	r3, [pc, #452]	@ (80037f0 <NLLS+0x2598>)
 800362a:	443b      	add	r3, r7
 800362c:	ed93 6a00 	vldr	s12, [r3]
 8003630:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003634:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003638:	4b69      	ldr	r3, [pc, #420]	@ (80037e0 <NLLS+0x2588>)
 800363a:	443b      	add	r3, r7
 800363c:	ed93 6a00 	vldr	s12, [r3]
 8003640:	4b61      	ldr	r3, [pc, #388]	@ (80037c8 <NLLS+0x2570>)
 8003642:	443b      	add	r3, r7
 8003644:	edd3 7a00 	vldr	s15, [r3]
 8003648:	ee26 6a27 	vmul.f32	s12, s12, s15
 800364c:	4b61      	ldr	r3, [pc, #388]	@ (80037d4 <NLLS+0x257c>)
 800364e:	443b      	add	r3, r7
 8003650:	edd3 7a00 	vldr	s15, [r3]
 8003654:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003658:	4b63      	ldr	r3, [pc, #396]	@ (80037e8 <NLLS+0x2590>)
 800365a:	443b      	add	r3, r7
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003664:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8003668:	4413      	add	r3, r2
 800366a:	edd3 7a00 	vldr	s15, [r3]
 800366e:	4b61      	ldr	r3, [pc, #388]	@ (80037f4 <NLLS+0x259c>)
 8003670:	443b      	add	r3, r7
 8003672:	edd3 5a00 	vldr	s11, [r3]
 8003676:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800367a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800367e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003682:	4b57      	ldr	r3, [pc, #348]	@ (80037e0 <NLLS+0x2588>)
 8003684:	443b      	add	r3, r7
 8003686:	ed93 6a00 	vldr	s12, [r3]
 800368a:	4b50      	ldr	r3, [pc, #320]	@ (80037cc <NLLS+0x2574>)
 800368c:	443b      	add	r3, r7
 800368e:	edd3 7a00 	vldr	s15, [r3]
 8003692:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003696:	4b50      	ldr	r3, [pc, #320]	@ (80037d8 <NLLS+0x2580>)
 8003698:	443b      	add	r3, r7
 800369a:	edd3 7a00 	vldr	s15, [r3]
 800369e:	ee26 6a27 	vmul.f32	s12, s12, s15
 80036a2:	4b51      	ldr	r3, [pc, #324]	@ (80037e8 <NLLS+0x2590>)
 80036a4:	443b      	add	r3, r7
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80036ae:	f852 2c38 	ldr.w	r2, [r2, #-56]
 80036b2:	4413      	add	r3, r2
 80036b4:	edd3 7a00 	vldr	s15, [r3]
 80036b8:	4b4f      	ldr	r3, [pc, #316]	@ (80037f8 <NLLS+0x25a0>)
 80036ba:	443b      	add	r3, r7
 80036bc:	edd3 5a00 	vldr	s11, [r3]
 80036c0:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80036c4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80036c8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80036cc:	4b3e      	ldr	r3, [pc, #248]	@ (80037c8 <NLLS+0x2570>)
 80036ce:	443b      	add	r3, r7
 80036d0:	ed93 6a00 	vldr	s12, [r3]
 80036d4:	4b3d      	ldr	r3, [pc, #244]	@ (80037cc <NLLS+0x2574>)
 80036d6:	443b      	add	r3, r7
 80036d8:	edd3 7a00 	vldr	s15, [r3]
 80036dc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80036e0:	4b3d      	ldr	r3, [pc, #244]	@ (80037d8 <NLLS+0x2580>)
 80036e2:	443b      	add	r3, r7
 80036e4:	edd3 5a00 	vldr	s11, [r3]
 80036e8:	4b40      	ldr	r3, [pc, #256]	@ (80037ec <NLLS+0x2594>)
 80036ea:	443b      	add	r3, r7
 80036ec:	edd3 7a00 	vldr	s15, [r3]
 80036f0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80036f4:	4b36      	ldr	r3, [pc, #216]	@ (80037d0 <NLLS+0x2578>)
 80036f6:	443b      	add	r3, r7
 80036f8:	ed93 5a00 	vldr	s10, [r3]
 80036fc:	4b35      	ldr	r3, [pc, #212]	@ (80037d4 <NLLS+0x257c>)
 80036fe:	443b      	add	r3, r7
 8003700:	edd3 7a00 	vldr	s15, [r3]
 8003704:	ee25 5a27 	vmul.f32	s10, s10, s15
 8003708:	4b34      	ldr	r3, [pc, #208]	@ (80037dc <NLLS+0x2584>)
 800370a:	443b      	add	r3, r7
 800370c:	edd3 7a00 	vldr	s15, [r3]
 8003710:	ee65 7a27 	vmul.f32	s15, s10, s15
 8003714:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003718:	ee26 6a27 	vmul.f32	s12, s12, s15
 800371c:	4b32      	ldr	r3, [pc, #200]	@ (80037e8 <NLLS+0x2590>)
 800371e:	443b      	add	r3, r7
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003728:	f852 2c34 	ldr.w	r2, [r2, #-52]
 800372c:	4413      	add	r3, r2
 800372e:	edd3 7a00 	vldr	s15, [r3]
 8003732:	4b2f      	ldr	r3, [pc, #188]	@ (80037f0 <NLLS+0x2598>)
 8003734:	443b      	add	r3, r7
 8003736:	edd3 5a00 	vldr	s11, [r3]
 800373a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800373e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003742:	4b27      	ldr	r3, [pc, #156]	@ (80037e0 <NLLS+0x2588>)
 8003744:	443b      	add	r3, r7
 8003746:	edd3 5a00 	vldr	s11, [r3]
 800374a:	4b1f      	ldr	r3, [pc, #124]	@ (80037c8 <NLLS+0x2570>)
 800374c:	443b      	add	r3, r7
 800374e:	edd3 7a00 	vldr	s15, [r3]
 8003752:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003756:	4b1f      	ldr	r3, [pc, #124]	@ (80037d4 <NLLS+0x257c>)
 8003758:	443b      	add	r3, r7
 800375a:	edd3 7a00 	vldr	s15, [r3]
 800375e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003762:	4b21      	ldr	r3, [pc, #132]	@ (80037e8 <NLLS+0x2590>)
 8003764:	443b      	add	r3, r7
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800376e:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8003772:	4413      	add	r3, r2
 8003774:	edd3 7a00 	vldr	s15, [r3]
 8003778:	4b1e      	ldr	r3, [pc, #120]	@ (80037f4 <NLLS+0x259c>)
 800377a:	443b      	add	r3, r7
 800377c:	ed93 5a00 	vldr	s10, [r3]
 8003780:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003784:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003788:	ee36 6a27 	vadd.f32	s12, s12, s15
 800378c:	4b14      	ldr	r3, [pc, #80]	@ (80037e0 <NLLS+0x2588>)
 800378e:	443b      	add	r3, r7
 8003790:	edd3 5a00 	vldr	s11, [r3]
 8003794:	4b0d      	ldr	r3, [pc, #52]	@ (80037cc <NLLS+0x2574>)
 8003796:	443b      	add	r3, r7
 8003798:	edd3 7a00 	vldr	s15, [r3]
 800379c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80037a0:	4b0d      	ldr	r3, [pc, #52]	@ (80037d8 <NLLS+0x2580>)
 80037a2:	443b      	add	r3, r7
 80037a4:	edd3 7a00 	vldr	s15, [r3]
 80037a8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80037ac:	4b0e      	ldr	r3, [pc, #56]	@ (80037e8 <NLLS+0x2590>)
 80037ae:	443b      	add	r3, r7
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80037b8:	f852 2c38 	ldr.w	r2, [r2, #-56]
 80037bc:	4413      	add	r3, r2
 80037be:	edd3 7a00 	vldr	s15, [r3]
 80037c2:	4b0d      	ldr	r3, [pc, #52]	@ (80037f8 <NLLS+0x25a0>)
 80037c4:	443b      	add	r3, r7
 80037c6:	e019      	b.n	80037fc <NLLS+0x25a4>
 80037c8:	00017034 	.word	0x00017034
 80037cc:	00017030 	.word	0x00017030
 80037d0:	00016fc4 	.word	0x00016fc4
 80037d4:	00016fc8 	.word	0x00016fc8
 80037d8:	00016fd0 	.word	0x00016fd0
 80037dc:	00016fd8 	.word	0x00016fd8
 80037e0:	00017038 	.word	0x00017038
 80037e4:	00016fcc 	.word	0x00016fcc
 80037e8:	00017008 	.word	0x00017008
 80037ec:	00016fd4 	.word	0x00016fd4
 80037f0:	0001702c 	.word	0x0001702c
 80037f4:	00017024 	.word	0x00017024
 80037f8:	00017028 	.word	0x00017028
 80037fc:	ed93 5a00 	vldr	s10, [r3]
 8003800:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003804:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003808:	ee76 7a67 	vsub.f32	s15, s12, s15
 800380c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003810:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003814:	4bc0      	ldr	r3, [pc, #768]	@ (8003b18 <NLLS+0x28c0>)
 8003816:	443b      	add	r3, r7
 8003818:	edd3 7a00 	vldr	s15, [r3]
 800381c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003820:	4bbe      	ldr	r3, [pc, #760]	@ (8003b1c <NLLS+0x28c4>)
 8003822:	443b      	add	r3, r7
 8003824:	edd3 7a00 	vldr	s15, [r3]
 8003828:	ee27 7a27 	vmul.f32	s14, s14, s15
 800382c:	4bbb      	ldr	r3, [pc, #748]	@ (8003b1c <NLLS+0x28c4>)
 800382e:	443b      	add	r3, r7
 8003830:	edd3 7a00 	vldr	s15, [r3]
 8003834:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003838:	4bb9      	ldr	r3, [pc, #740]	@ (8003b20 <NLLS+0x28c8>)
 800383a:	443b      	add	r3, r7
 800383c:	edd3 7a00 	vldr	s15, [r3]
 8003840:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003844:	4bb6      	ldr	r3, [pc, #728]	@ (8003b20 <NLLS+0x28c8>)
 8003846:	443b      	add	r3, r7
 8003848:	edd3 7a00 	vldr	s15, [r3]
 800384c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003850:	4bb4      	ldr	r3, [pc, #720]	@ (8003b24 <NLLS+0x28cc>)
 8003852:	443b      	add	r3, r7
 8003854:	edd3 7a00 	vldr	s15, [r3]
 8003858:	ee27 7a27 	vmul.f32	s14, s14, s15
 800385c:	4bb1      	ldr	r3, [pc, #708]	@ (8003b24 <NLLS+0x28cc>)
 800385e:	443b      	add	r3, r7
 8003860:	edd3 7a00 	vldr	s15, [r3]
 8003864:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003868:	4baf      	ldr	r3, [pc, #700]	@ (8003b28 <NLLS+0x28d0>)
 800386a:	443b      	add	r3, r7
 800386c:	edd3 7a00 	vldr	s15, [r3]
 8003870:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8003874:	4bac      	ldr	r3, [pc, #688]	@ (8003b28 <NLLS+0x28d0>)
 8003876:	443b      	add	r3, r7
 8003878:	edd3 7a00 	vldr	s15, [r3]
 800387c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003880:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003884:	4ba9      	ldr	r3, [pc, #676]	@ (8003b2c <NLLS+0x28d4>)
 8003886:	443b      	add	r3, r7
 8003888:	edd3 7a00 	vldr	s15, [r3]
 800388c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003890:	4ba6      	ldr	r3, [pc, #664]	@ (8003b2c <NLLS+0x28d4>)
 8003892:	443b      	add	r3, r7
 8003894:	edd3 7a00 	vldr	s15, [r3]
 8003898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800389c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038a0:	4ba3      	ldr	r3, [pc, #652]	@ (8003b30 <NLLS+0x28d8>)
 80038a2:	443b      	add	r3, r7
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80038ac:	f852 2c34 	ldr.w	r2, [r2, #-52]
 80038b0:	4413      	add	r3, r2
 80038b2:	edd3 7a00 	vldr	s15, [r3]
 80038b6:	4b9f      	ldr	r3, [pc, #636]	@ (8003b34 <NLLS+0x28dc>)
 80038b8:	443b      	add	r3, r7
 80038ba:	edd3 6a00 	vldr	s13, [r3]
 80038be:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80038c2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80038c6:	4b95      	ldr	r3, [pc, #596]	@ (8003b1c <NLLS+0x28c4>)
 80038c8:	443b      	add	r3, r7
 80038ca:	ed93 6a00 	vldr	s12, [r3]
 80038ce:	4b94      	ldr	r3, [pc, #592]	@ (8003b20 <NLLS+0x28c8>)
 80038d0:	443b      	add	r3, r7
 80038d2:	edd3 7a00 	vldr	s15, [r3]
 80038d6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80038da:	4b97      	ldr	r3, [pc, #604]	@ (8003b38 <NLLS+0x28e0>)
 80038dc:	443b      	add	r3, r7
 80038de:	edd3 5a00 	vldr	s11, [r3]
 80038e2:	4b96      	ldr	r3, [pc, #600]	@ (8003b3c <NLLS+0x28e4>)
 80038e4:	443b      	add	r3, r7
 80038e6:	edd3 7a00 	vldr	s15, [r3]
 80038ea:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80038ee:	4b8d      	ldr	r3, [pc, #564]	@ (8003b24 <NLLS+0x28cc>)
 80038f0:	443b      	add	r3, r7
 80038f2:	ed93 5a00 	vldr	s10, [r3]
 80038f6:	4b8d      	ldr	r3, [pc, #564]	@ (8003b2c <NLLS+0x28d4>)
 80038f8:	443b      	add	r3, r7
 80038fa:	edd3 7a00 	vldr	s15, [r3]
 80038fe:	ee25 5a27 	vmul.f32	s10, s10, s15
 8003902:	4b8f      	ldr	r3, [pc, #572]	@ (8003b40 <NLLS+0x28e8>)
 8003904:	443b      	add	r3, r7
 8003906:	edd3 7a00 	vldr	s15, [r3]
 800390a:	ee65 7a27 	vmul.f32	s15, s10, s15
 800390e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003912:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003916:	4b86      	ldr	r3, [pc, #536]	@ (8003b30 <NLLS+0x28d8>)
 8003918:	443b      	add	r3, r7
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003922:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8003926:	4413      	add	r3, r2
 8003928:	edd3 7a00 	vldr	s15, [r3]
 800392c:	4b81      	ldr	r3, [pc, #516]	@ (8003b34 <NLLS+0x28dc>)
 800392e:	443b      	add	r3, r7
 8003930:	edd3 5a00 	vldr	s11, [r3]
 8003934:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003938:	ee26 6a27 	vmul.f32	s12, s12, s15
 800393c:	4b76      	ldr	r3, [pc, #472]	@ (8003b18 <NLLS+0x28c0>)
 800393e:	443b      	add	r3, r7
 8003940:	edd3 5a00 	vldr	s11, [r3]
 8003944:	4b75      	ldr	r3, [pc, #468]	@ (8003b1c <NLLS+0x28c4>)
 8003946:	443b      	add	r3, r7
 8003948:	edd3 7a00 	vldr	s15, [r3]
 800394c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003950:	4b76      	ldr	r3, [pc, #472]	@ (8003b2c <NLLS+0x28d4>)
 8003952:	443b      	add	r3, r7
 8003954:	edd3 7a00 	vldr	s15, [r3]
 8003958:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800395c:	4b74      	ldr	r3, [pc, #464]	@ (8003b30 <NLLS+0x28d8>)
 800395e:	443b      	add	r3, r7
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003968:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 800396c:	4413      	add	r3, r2
 800396e:	edd3 7a00 	vldr	s15, [r3]
 8003972:	4b74      	ldr	r3, [pc, #464]	@ (8003b44 <NLLS+0x28ec>)
 8003974:	443b      	add	r3, r7
 8003976:	ed93 5a00 	vldr	s10, [r3]
 800397a:	ee75 7a67 	vsub.f32	s15, s10, s15
 800397e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003982:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003986:	4b64      	ldr	r3, [pc, #400]	@ (8003b18 <NLLS+0x28c0>)
 8003988:	443b      	add	r3, r7
 800398a:	edd3 5a00 	vldr	s11, [r3]
 800398e:	4b64      	ldr	r3, [pc, #400]	@ (8003b20 <NLLS+0x28c8>)
 8003990:	443b      	add	r3, r7
 8003992:	edd3 7a00 	vldr	s15, [r3]
 8003996:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800399a:	4b67      	ldr	r3, [pc, #412]	@ (8003b38 <NLLS+0x28e0>)
 800399c:	443b      	add	r3, r7
 800399e:	edd3 7a00 	vldr	s15, [r3]
 80039a2:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80039a6:	4b62      	ldr	r3, [pc, #392]	@ (8003b30 <NLLS+0x28d8>)
 80039a8:	443b      	add	r3, r7
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80039b2:	f852 2c38 	ldr.w	r2, [r2, #-56]
 80039b6:	4413      	add	r3, r2
 80039b8:	edd3 7a00 	vldr	s15, [r3]
 80039bc:	4b62      	ldr	r3, [pc, #392]	@ (8003b48 <NLLS+0x28f0>)
 80039be:	443b      	add	r3, r7
 80039c0:	ed93 5a00 	vldr	s10, [r3]
 80039c4:	ee75 7a67 	vsub.f32	s15, s10, s15
 80039c8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80039cc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80039d0:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80039d4:	4b50      	ldr	r3, [pc, #320]	@ (8003b18 <NLLS+0x28c0>)
 80039d6:	443b      	add	r3, r7
 80039d8:	edd3 7a00 	vldr	s15, [r3]
 80039dc:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80039e0:	4b4e      	ldr	r3, [pc, #312]	@ (8003b1c <NLLS+0x28c4>)
 80039e2:	443b      	add	r3, r7
 80039e4:	edd3 7a00 	vldr	s15, [r3]
 80039e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80039ec:	4b4c      	ldr	r3, [pc, #304]	@ (8003b20 <NLLS+0x28c8>)
 80039ee:	443b      	add	r3, r7
 80039f0:	edd3 7a00 	vldr	s15, [r3]
 80039f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80039f8:	4b4a      	ldr	r3, [pc, #296]	@ (8003b24 <NLLS+0x28cc>)
 80039fa:	443b      	add	r3, r7
 80039fc:	edd3 7a00 	vldr	s15, [r3]
 8003a00:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003a04:	4b48      	ldr	r3, [pc, #288]	@ (8003b28 <NLLS+0x28d0>)
 8003a06:	443b      	add	r3, r7
 8003a08:	edd3 7a00 	vldr	s15, [r3]
 8003a0c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003a10:	4b46      	ldr	r3, [pc, #280]	@ (8003b2c <NLLS+0x28d4>)
 8003a12:	443b      	add	r3, r7
 8003a14:	edd3 7a00 	vldr	s15, [r3]
 8003a18:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003a1c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003a20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a24:	f24a 0340 	movw	r3, #41024	@ 0xa040
 8003a28:	443b      	add	r3, r7
 8003a2a:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8003a2e:	4b40      	ldr	r3, [pc, #256]	@ (8003b30 <NLLS+0x28d8>)
 8003a30:	443b      	add	r3, r7
 8003a32:	6819      	ldr	r1, [r3, #0]
 8003a34:	f641 6368 	movw	r3, #7784	@ 0x1e68
 8003a38:	440b      	add	r3, r1
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	edc3 7a00 	vstr	s15, [r3]

			mat_H[8][i] = (2*sin_lambda*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/(sx*sx*sy*sy*sz*sz*(cos_lambda*cos_lambda*cos_lambda)*cos_phi*cos_phi*(cos_rho*cos_rho)) + (2*(sy*sz*(cos_lambda*sin_rho + cos_rho*sin_lambda*sin_phi)*(bx - mx[i]) - sx*sz*cos_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8003a42:	4b3d      	ldr	r3, [pc, #244]	@ (8003b38 <NLLS+0x28e0>)
 8003a44:	443b      	add	r3, r7
 8003a46:	edd3 7a00 	vldr	s15, [r3]
 8003a4a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003a4e:	4b33      	ldr	r3, [pc, #204]	@ (8003b1c <NLLS+0x28c4>)
 8003a50:	443b      	add	r3, r7
 8003a52:	edd3 6a00 	vldr	s13, [r3]
 8003a56:	4b32      	ldr	r3, [pc, #200]	@ (8003b20 <NLLS+0x28c8>)
 8003a58:	443b      	add	r3, r7
 8003a5a:	edd3 7a00 	vldr	s15, [r3]
 8003a5e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003a62:	4b35      	ldr	r3, [pc, #212]	@ (8003b38 <NLLS+0x28e0>)
 8003a64:	443b      	add	r3, r7
 8003a66:	ed93 6a00 	vldr	s12, [r3]
 8003a6a:	4b34      	ldr	r3, [pc, #208]	@ (8003b3c <NLLS+0x28e4>)
 8003a6c:	443b      	add	r3, r7
 8003a6e:	edd3 7a00 	vldr	s15, [r3]
 8003a72:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003a76:	4b2b      	ldr	r3, [pc, #172]	@ (8003b24 <NLLS+0x28cc>)
 8003a78:	443b      	add	r3, r7
 8003a7a:	edd3 5a00 	vldr	s11, [r3]
 8003a7e:	4b2b      	ldr	r3, [pc, #172]	@ (8003b2c <NLLS+0x28d4>)
 8003a80:	443b      	add	r3, r7
 8003a82:	edd3 7a00 	vldr	s15, [r3]
 8003a86:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003a8a:	4b2d      	ldr	r3, [pc, #180]	@ (8003b40 <NLLS+0x28e8>)
 8003a8c:	443b      	add	r3, r7
 8003a8e:	edd3 7a00 	vldr	s15, [r3]
 8003a92:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003a96:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003a9a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003a9e:	4b24      	ldr	r3, [pc, #144]	@ (8003b30 <NLLS+0x28d8>)
 8003aa0:	443b      	add	r3, r7
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003aaa:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8003aae:	4413      	add	r3, r2
 8003ab0:	edd3 7a00 	vldr	s15, [r3]
 8003ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8003b34 <NLLS+0x28dc>)
 8003ab6:	443b      	add	r3, r7
 8003ab8:	ed93 6a00 	vldr	s12, [r3]
 8003abc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003ac0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003ac4:	4b14      	ldr	r3, [pc, #80]	@ (8003b18 <NLLS+0x28c0>)
 8003ac6:	443b      	add	r3, r7
 8003ac8:	ed93 6a00 	vldr	s12, [r3]
 8003acc:	4b13      	ldr	r3, [pc, #76]	@ (8003b1c <NLLS+0x28c4>)
 8003ace:	443b      	add	r3, r7
 8003ad0:	edd3 7a00 	vldr	s15, [r3]
 8003ad4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003ad8:	4b14      	ldr	r3, [pc, #80]	@ (8003b2c <NLLS+0x28d4>)
 8003ada:	443b      	add	r3, r7
 8003adc:	edd3 7a00 	vldr	s15, [r3]
 8003ae0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003ae4:	4b12      	ldr	r3, [pc, #72]	@ (8003b30 <NLLS+0x28d8>)
 8003ae6:	443b      	add	r3, r7
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003af0:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8003af4:	4413      	add	r3, r2
 8003af6:	edd3 7a00 	vldr	s15, [r3]
 8003afa:	4b12      	ldr	r3, [pc, #72]	@ (8003b44 <NLLS+0x28ec>)
 8003afc:	443b      	add	r3, r7
 8003afe:	edd3 5a00 	vldr	s11, [r3]
 8003b02:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003b06:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003b0a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003b0e:	4b02      	ldr	r3, [pc, #8]	@ (8003b18 <NLLS+0x28c0>)
 8003b10:	443b      	add	r3, r7
 8003b12:	ed93 6a00 	vldr	s12, [r3]
 8003b16:	e019      	b.n	8003b4c <NLLS+0x28f4>
 8003b18:	00017038 	.word	0x00017038
 8003b1c:	00017034 	.word	0x00017034
 8003b20:	00017030 	.word	0x00017030
 8003b24:	00016fc4 	.word	0x00016fc4
 8003b28:	00016fcc 	.word	0x00016fcc
 8003b2c:	00016fc8 	.word	0x00016fc8
 8003b30:	00017008 	.word	0x00017008
 8003b34:	0001702c 	.word	0x0001702c
 8003b38:	00016fd0 	.word	0x00016fd0
 8003b3c:	00016fd4 	.word	0x00016fd4
 8003b40:	00016fd8 	.word	0x00016fd8
 8003b44:	00017024 	.word	0x00017024
 8003b48:	00017028 	.word	0x00017028
 8003b4c:	4bc1      	ldr	r3, [pc, #772]	@ (8003e54 <NLLS+0x2bfc>)
 8003b4e:	443b      	add	r3, r7
 8003b50:	edd3 7a00 	vldr	s15, [r3]
 8003b54:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003b58:	4bbf      	ldr	r3, [pc, #764]	@ (8003e58 <NLLS+0x2c00>)
 8003b5a:	443b      	add	r3, r7
 8003b5c:	edd3 7a00 	vldr	s15, [r3]
 8003b60:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003b64:	4bbd      	ldr	r3, [pc, #756]	@ (8003e5c <NLLS+0x2c04>)
 8003b66:	443b      	add	r3, r7
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003b70:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8003b74:	4413      	add	r3, r2
 8003b76:	edd3 7a00 	vldr	s15, [r3]
 8003b7a:	4bb9      	ldr	r3, [pc, #740]	@ (8003e60 <NLLS+0x2c08>)
 8003b7c:	443b      	add	r3, r7
 8003b7e:	edd3 5a00 	vldr	s11, [r3]
 8003b82:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003b86:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003b8a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003b8e:	4bb5      	ldr	r3, [pc, #724]	@ (8003e64 <NLLS+0x2c0c>)
 8003b90:	443b      	add	r3, r7
 8003b92:	ed93 6a00 	vldr	s12, [r3]
 8003b96:	4baf      	ldr	r3, [pc, #700]	@ (8003e54 <NLLS+0x2bfc>)
 8003b98:	443b      	add	r3, r7
 8003b9a:	edd3 7a00 	vldr	s15, [r3]
 8003b9e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003ba2:	4bad      	ldr	r3, [pc, #692]	@ (8003e58 <NLLS+0x2c00>)
 8003ba4:	443b      	add	r3, r7
 8003ba6:	edd3 5a00 	vldr	s11, [r3]
 8003baa:	4baf      	ldr	r3, [pc, #700]	@ (8003e68 <NLLS+0x2c10>)
 8003bac:	443b      	add	r3, r7
 8003bae:	edd3 7a00 	vldr	s15, [r3]
 8003bb2:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003bb6:	4bad      	ldr	r3, [pc, #692]	@ (8003e6c <NLLS+0x2c14>)
 8003bb8:	443b      	add	r3, r7
 8003bba:	ed93 5a00 	vldr	s10, [r3]
 8003bbe:	4bac      	ldr	r3, [pc, #688]	@ (8003e70 <NLLS+0x2c18>)
 8003bc0:	443b      	add	r3, r7
 8003bc2:	edd3 7a00 	vldr	s15, [r3]
 8003bc6:	ee25 5a27 	vmul.f32	s10, s10, s15
 8003bca:	4baa      	ldr	r3, [pc, #680]	@ (8003e74 <NLLS+0x2c1c>)
 8003bcc:	443b      	add	r3, r7
 8003bce:	edd3 7a00 	vldr	s15, [r3]
 8003bd2:	ee65 7a27 	vmul.f32	s15, s10, s15
 8003bd6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003bda:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003bde:	4b9f      	ldr	r3, [pc, #636]	@ (8003e5c <NLLS+0x2c04>)
 8003be0:	443b      	add	r3, r7
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003bea:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8003bee:	4413      	add	r3, r2
 8003bf0:	edd3 7a00 	vldr	s15, [r3]
 8003bf4:	4ba0      	ldr	r3, [pc, #640]	@ (8003e78 <NLLS+0x2c20>)
 8003bf6:	443b      	add	r3, r7
 8003bf8:	edd3 5a00 	vldr	s11, [r3]
 8003bfc:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003c00:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003c04:	4b9d      	ldr	r3, [pc, #628]	@ (8003e7c <NLLS+0x2c24>)
 8003c06:	443b      	add	r3, r7
 8003c08:	edd3 5a00 	vldr	s11, [r3]
 8003c0c:	4b95      	ldr	r3, [pc, #596]	@ (8003e64 <NLLS+0x2c0c>)
 8003c0e:	443b      	add	r3, r7
 8003c10:	edd3 7a00 	vldr	s15, [r3]
 8003c14:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003c18:	4b95      	ldr	r3, [pc, #596]	@ (8003e70 <NLLS+0x2c18>)
 8003c1a:	443b      	add	r3, r7
 8003c1c:	edd3 7a00 	vldr	s15, [r3]
 8003c20:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003c24:	4b8d      	ldr	r3, [pc, #564]	@ (8003e5c <NLLS+0x2c04>)
 8003c26:	443b      	add	r3, r7
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003c30:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8003c34:	4413      	add	r3, r2
 8003c36:	edd3 7a00 	vldr	s15, [r3]
 8003c3a:	4b91      	ldr	r3, [pc, #580]	@ (8003e80 <NLLS+0x2c28>)
 8003c3c:	443b      	add	r3, r7
 8003c3e:	ed93 5a00 	vldr	s10, [r3]
 8003c42:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003c46:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003c4a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003c4e:	4b8b      	ldr	r3, [pc, #556]	@ (8003e7c <NLLS+0x2c24>)
 8003c50:	443b      	add	r3, r7
 8003c52:	edd3 5a00 	vldr	s11, [r3]
 8003c56:	4b7f      	ldr	r3, [pc, #508]	@ (8003e54 <NLLS+0x2bfc>)
 8003c58:	443b      	add	r3, r7
 8003c5a:	edd3 7a00 	vldr	s15, [r3]
 8003c5e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003c62:	4b7d      	ldr	r3, [pc, #500]	@ (8003e58 <NLLS+0x2c00>)
 8003c64:	443b      	add	r3, r7
 8003c66:	edd3 7a00 	vldr	s15, [r3]
 8003c6a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003c6e:	4b7b      	ldr	r3, [pc, #492]	@ (8003e5c <NLLS+0x2c04>)
 8003c70:	443b      	add	r3, r7
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003c7a:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8003c7e:	4413      	add	r3, r2
 8003c80:	edd3 7a00 	vldr	s15, [r3]
 8003c84:	4b76      	ldr	r3, [pc, #472]	@ (8003e60 <NLLS+0x2c08>)
 8003c86:	443b      	add	r3, r7
 8003c88:	ed93 5a00 	vldr	s10, [r3]
 8003c8c:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003c90:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003c94:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003c98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c9c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003ca0:	4b76      	ldr	r3, [pc, #472]	@ (8003e7c <NLLS+0x2c24>)
 8003ca2:	443b      	add	r3, r7
 8003ca4:	edd3 7a00 	vldr	s15, [r3]
 8003ca8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003cac:	4b6d      	ldr	r3, [pc, #436]	@ (8003e64 <NLLS+0x2c0c>)
 8003cae:	443b      	add	r3, r7
 8003cb0:	edd3 7a00 	vldr	s15, [r3]
 8003cb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cb8:	4b6a      	ldr	r3, [pc, #424]	@ (8003e64 <NLLS+0x2c0c>)
 8003cba:	443b      	add	r3, r7
 8003cbc:	edd3 7a00 	vldr	s15, [r3]
 8003cc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cc4:	4b63      	ldr	r3, [pc, #396]	@ (8003e54 <NLLS+0x2bfc>)
 8003cc6:	443b      	add	r3, r7
 8003cc8:	edd3 7a00 	vldr	s15, [r3]
 8003ccc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cd0:	4b60      	ldr	r3, [pc, #384]	@ (8003e54 <NLLS+0x2bfc>)
 8003cd2:	443b      	add	r3, r7
 8003cd4:	edd3 7a00 	vldr	s15, [r3]
 8003cd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cdc:	4b63      	ldr	r3, [pc, #396]	@ (8003e6c <NLLS+0x2c14>)
 8003cde:	443b      	add	r3, r7
 8003ce0:	edd3 7a00 	vldr	s15, [r3]
 8003ce4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8003ce8:	4b60      	ldr	r3, [pc, #384]	@ (8003e6c <NLLS+0x2c14>)
 8003cea:	443b      	add	r3, r7
 8003cec:	edd3 7a00 	vldr	s15, [r3]
 8003cf0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003cf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cf8:	4b62      	ldr	r3, [pc, #392]	@ (8003e84 <NLLS+0x2c2c>)
 8003cfa:	443b      	add	r3, r7
 8003cfc:	edd3 7a00 	vldr	s15, [r3]
 8003d00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d04:	4b5f      	ldr	r3, [pc, #380]	@ (8003e84 <NLLS+0x2c2c>)
 8003d06:	443b      	add	r3, r7
 8003d08:	edd3 7a00 	vldr	s15, [r3]
 8003d0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d10:	4b57      	ldr	r3, [pc, #348]	@ (8003e70 <NLLS+0x2c18>)
 8003d12:	443b      	add	r3, r7
 8003d14:	edd3 7a00 	vldr	s15, [r3]
 8003d18:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003d1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d24:	4b4f      	ldr	r3, [pc, #316]	@ (8003e64 <NLLS+0x2c0c>)
 8003d26:	443b      	add	r3, r7
 8003d28:	edd3 6a00 	vldr	s13, [r3]
 8003d2c:	4b49      	ldr	r3, [pc, #292]	@ (8003e54 <NLLS+0x2bfc>)
 8003d2e:	443b      	add	r3, r7
 8003d30:	edd3 7a00 	vldr	s15, [r3]
 8003d34:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003d38:	4b4c      	ldr	r3, [pc, #304]	@ (8003e6c <NLLS+0x2c14>)
 8003d3a:	443b      	add	r3, r7
 8003d3c:	ed93 6a00 	vldr	s12, [r3]
 8003d40:	4b49      	ldr	r3, [pc, #292]	@ (8003e68 <NLLS+0x2c10>)
 8003d42:	443b      	add	r3, r7
 8003d44:	edd3 7a00 	vldr	s15, [r3]
 8003d48:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003d4c:	4b48      	ldr	r3, [pc, #288]	@ (8003e70 <NLLS+0x2c18>)
 8003d4e:	443b      	add	r3, r7
 8003d50:	edd3 5a00 	vldr	s11, [r3]
 8003d54:	4b40      	ldr	r3, [pc, #256]	@ (8003e58 <NLLS+0x2c00>)
 8003d56:	443b      	add	r3, r7
 8003d58:	edd3 7a00 	vldr	s15, [r3]
 8003d5c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003d60:	4b44      	ldr	r3, [pc, #272]	@ (8003e74 <NLLS+0x2c1c>)
 8003d62:	443b      	add	r3, r7
 8003d64:	edd3 7a00 	vldr	s15, [r3]
 8003d68:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003d6c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003d70:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003d74:	4b39      	ldr	r3, [pc, #228]	@ (8003e5c <NLLS+0x2c04>)
 8003d76:	443b      	add	r3, r7
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003d80:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8003d84:	4413      	add	r3, r2
 8003d86:	edd3 7a00 	vldr	s15, [r3]
 8003d8a:	4b3b      	ldr	r3, [pc, #236]	@ (8003e78 <NLLS+0x2c20>)
 8003d8c:	443b      	add	r3, r7
 8003d8e:	ed93 6a00 	vldr	s12, [r3]
 8003d92:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003d96:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003d9a:	4b38      	ldr	r3, [pc, #224]	@ (8003e7c <NLLS+0x2c24>)
 8003d9c:	443b      	add	r3, r7
 8003d9e:	ed93 6a00 	vldr	s12, [r3]
 8003da2:	4b2c      	ldr	r3, [pc, #176]	@ (8003e54 <NLLS+0x2bfc>)
 8003da4:	443b      	add	r3, r7
 8003da6:	edd3 7a00 	vldr	s15, [r3]
 8003daa:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003dae:	4b2f      	ldr	r3, [pc, #188]	@ (8003e6c <NLLS+0x2c14>)
 8003db0:	443b      	add	r3, r7
 8003db2:	edd3 7a00 	vldr	s15, [r3]
 8003db6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003dba:	4b28      	ldr	r3, [pc, #160]	@ (8003e5c <NLLS+0x2c04>)
 8003dbc:	443b      	add	r3, r7
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003dc6:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8003dca:	4413      	add	r3, r2
 8003dcc:	edd3 7a00 	vldr	s15, [r3]
 8003dd0:	4b23      	ldr	r3, [pc, #140]	@ (8003e60 <NLLS+0x2c08>)
 8003dd2:	443b      	add	r3, r7
 8003dd4:	edd3 5a00 	vldr	s11, [r3]
 8003dd8:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003ddc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003de0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003de4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003de8:	4b1e      	ldr	r3, [pc, #120]	@ (8003e64 <NLLS+0x2c0c>)
 8003dea:	443b      	add	r3, r7
 8003dec:	ed93 6a00 	vldr	s12, [r3]
 8003df0:	4b18      	ldr	r3, [pc, #96]	@ (8003e54 <NLLS+0x2bfc>)
 8003df2:	443b      	add	r3, r7
 8003df4:	edd3 7a00 	vldr	s15, [r3]
 8003df8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003dfc:	4b16      	ldr	r3, [pc, #88]	@ (8003e58 <NLLS+0x2c00>)
 8003dfe:	443b      	add	r3, r7
 8003e00:	edd3 5a00 	vldr	s11, [r3]
 8003e04:	4b18      	ldr	r3, [pc, #96]	@ (8003e68 <NLLS+0x2c10>)
 8003e06:	443b      	add	r3, r7
 8003e08:	edd3 7a00 	vldr	s15, [r3]
 8003e0c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003e10:	4b16      	ldr	r3, [pc, #88]	@ (8003e6c <NLLS+0x2c14>)
 8003e12:	443b      	add	r3, r7
 8003e14:	ed93 5a00 	vldr	s10, [r3]
 8003e18:	4b15      	ldr	r3, [pc, #84]	@ (8003e70 <NLLS+0x2c18>)
 8003e1a:	443b      	add	r3, r7
 8003e1c:	edd3 7a00 	vldr	s15, [r3]
 8003e20:	ee25 5a27 	vmul.f32	s10, s10, s15
 8003e24:	4b13      	ldr	r3, [pc, #76]	@ (8003e74 <NLLS+0x2c1c>)
 8003e26:	443b      	add	r3, r7
 8003e28:	edd3 7a00 	vldr	s15, [r3]
 8003e2c:	ee65 7a27 	vmul.f32	s15, s10, s15
 8003e30:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003e34:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003e38:	4b08      	ldr	r3, [pc, #32]	@ (8003e5c <NLLS+0x2c04>)
 8003e3a:	443b      	add	r3, r7
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003e44:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8003e48:	4413      	add	r3, r2
 8003e4a:	edd3 7a00 	vldr	s15, [r3]
 8003e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e78 <NLLS+0x2c20>)
 8003e50:	443b      	add	r3, r7
 8003e52:	e019      	b.n	8003e88 <NLLS+0x2c30>
 8003e54:	00017030 	.word	0x00017030
 8003e58:	00016fd0 	.word	0x00016fd0
 8003e5c:	00017008 	.word	0x00017008
 8003e60:	00017028 	.word	0x00017028
 8003e64:	00017034 	.word	0x00017034
 8003e68:	00016fd4 	.word	0x00016fd4
 8003e6c:	00016fc4 	.word	0x00016fc4
 8003e70:	00016fc8 	.word	0x00016fc8
 8003e74:	00016fd8 	.word	0x00016fd8
 8003e78:	0001702c 	.word	0x0001702c
 8003e7c:	00017038 	.word	0x00017038
 8003e80:	00017024 	.word	0x00017024
 8003e84:	00016fcc 	.word	0x00016fcc
 8003e88:	edd3 5a00 	vldr	s11, [r3]
 8003e8c:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003e90:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003e94:	4ba8      	ldr	r3, [pc, #672]	@ (8004138 <NLLS+0x2ee0>)
 8003e96:	443b      	add	r3, r7
 8003e98:	edd3 5a00 	vldr	s11, [r3]
 8003e9c:	4ba7      	ldr	r3, [pc, #668]	@ (800413c <NLLS+0x2ee4>)
 8003e9e:	443b      	add	r3, r7
 8003ea0:	edd3 7a00 	vldr	s15, [r3]
 8003ea4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003ea8:	4ba5      	ldr	r3, [pc, #660]	@ (8004140 <NLLS+0x2ee8>)
 8003eaa:	443b      	add	r3, r7
 8003eac:	edd3 7a00 	vldr	s15, [r3]
 8003eb0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003eb4:	4ba3      	ldr	r3, [pc, #652]	@ (8004144 <NLLS+0x2eec>)
 8003eb6:	443b      	add	r3, r7
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003ec0:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	edd3 7a00 	vldr	s15, [r3]
 8003eca:	4b9f      	ldr	r3, [pc, #636]	@ (8004148 <NLLS+0x2ef0>)
 8003ecc:	443b      	add	r3, r7
 8003ece:	ed93 5a00 	vldr	s10, [r3]
 8003ed2:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003ed6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003eda:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003ede:	4b96      	ldr	r3, [pc, #600]	@ (8004138 <NLLS+0x2ee0>)
 8003ee0:	443b      	add	r3, r7
 8003ee2:	edd3 5a00 	vldr	s11, [r3]
 8003ee6:	4b99      	ldr	r3, [pc, #612]	@ (800414c <NLLS+0x2ef4>)
 8003ee8:	443b      	add	r3, r7
 8003eea:	edd3 7a00 	vldr	s15, [r3]
 8003eee:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003ef2:	4b97      	ldr	r3, [pc, #604]	@ (8004150 <NLLS+0x2ef8>)
 8003ef4:	443b      	add	r3, r7
 8003ef6:	edd3 7a00 	vldr	s15, [r3]
 8003efa:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003efe:	4b91      	ldr	r3, [pc, #580]	@ (8004144 <NLLS+0x2eec>)
 8003f00:	443b      	add	r3, r7
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003f0a:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8003f0e:	4413      	add	r3, r2
 8003f10:	edd3 7a00 	vldr	s15, [r3]
 8003f14:	4b8f      	ldr	r3, [pc, #572]	@ (8004154 <NLLS+0x2efc>)
 8003f16:	443b      	add	r3, r7
 8003f18:	ed93 5a00 	vldr	s10, [r3]
 8003f1c:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003f20:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003f24:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003f28:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8003f2c:	4b82      	ldr	r3, [pc, #520]	@ (8004138 <NLLS+0x2ee0>)
 8003f2e:	443b      	add	r3, r7
 8003f30:	edd3 7a00 	vldr	s15, [r3]
 8003f34:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8003f38:	4b80      	ldr	r3, [pc, #512]	@ (800413c <NLLS+0x2ee4>)
 8003f3a:	443b      	add	r3, r7
 8003f3c:	edd3 7a00 	vldr	s15, [r3]
 8003f40:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003f44:	4b7d      	ldr	r3, [pc, #500]	@ (800413c <NLLS+0x2ee4>)
 8003f46:	443b      	add	r3, r7
 8003f48:	edd3 7a00 	vldr	s15, [r3]
 8003f4c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003f50:	4b7e      	ldr	r3, [pc, #504]	@ (800414c <NLLS+0x2ef4>)
 8003f52:	443b      	add	r3, r7
 8003f54:	edd3 7a00 	vldr	s15, [r3]
 8003f58:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003f5c:	4b7b      	ldr	r3, [pc, #492]	@ (800414c <NLLS+0x2ef4>)
 8003f5e:	443b      	add	r3, r7
 8003f60:	edd3 7a00 	vldr	s15, [r3]
 8003f64:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003f68:	4b7b      	ldr	r3, [pc, #492]	@ (8004158 <NLLS+0x2f00>)
 8003f6a:	443b      	add	r3, r7
 8003f6c:	edd3 7a00 	vldr	s15, [r3]
 8003f70:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003f74:	4b78      	ldr	r3, [pc, #480]	@ (8004158 <NLLS+0x2f00>)
 8003f76:	443b      	add	r3, r7
 8003f78:	edd3 7a00 	vldr	s15, [r3]
 8003f7c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003f80:	4b76      	ldr	r3, [pc, #472]	@ (800415c <NLLS+0x2f04>)
 8003f82:	443b      	add	r3, r7
 8003f84:	edd3 7a00 	vldr	s15, [r3]
 8003f88:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003f8c:	4b73      	ldr	r3, [pc, #460]	@ (800415c <NLLS+0x2f04>)
 8003f8e:	443b      	add	r3, r7
 8003f90:	edd3 7a00 	vldr	s15, [r3]
 8003f94:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003f98:	4b69      	ldr	r3, [pc, #420]	@ (8004140 <NLLS+0x2ee8>)
 8003f9a:	443b      	add	r3, r7
 8003f9c:	edd3 7a00 	vldr	s15, [r3]
 8003fa0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003fa4:	4b66      	ldr	r3, [pc, #408]	@ (8004140 <NLLS+0x2ee8>)
 8003fa6:	443b      	add	r3, r7
 8003fa8:	edd3 7a00 	vldr	s15, [r3]
 8003fac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003fb0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003fb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fb8:	f24a 0340 	movw	r3, #41024	@ 0xa040
 8003fbc:	443b      	add	r3, r7
 8003fbe:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8003fc2:	4b60      	ldr	r3, [pc, #384]	@ (8004144 <NLLS+0x2eec>)
 8003fc4:	443b      	add	r3, r7
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f503 530b 	add.w	r3, r3, #8896	@ 0x22c0
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	edc3 7a00 	vstr	s15, [r3]
		for(int i=0; i < tam; i++)
 8003fd4:	4b5b      	ldr	r3, [pc, #364]	@ (8004144 <NLLS+0x2eec>)
 8003fd6:	443b      	add	r3, r7
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	3301      	adds	r3, #1
 8003fdc:	4a59      	ldr	r2, [pc, #356]	@ (8004144 <NLLS+0x2eec>)
 8003fde:	443a      	add	r2, r7
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	4b58      	ldr	r3, [pc, #352]	@ (8004144 <NLLS+0x2eec>)
 8003fe4:	443b      	add	r3, r7
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8003fec:	f6fd aa3e 	blt.w	800146c <NLLS+0x214>
		}

		J = 0;
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	4a5a      	ldr	r2, [pc, #360]	@ (8004160 <NLLS+0x2f08>)
 8003ff6:	443a      	add	r2, r7
 8003ff8:	6013      	str	r3, [r2, #0]

		for(int i=0; i < tam; i++)
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	4a59      	ldr	r2, [pc, #356]	@ (8004164 <NLLS+0x2f0c>)
 8003ffe:	443a      	add	r2, r7
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	e02c      	b.n	800405e <NLLS+0x2e06>
		{
			J += (e[i] * e[i])/2;
 8004004:	4b58      	ldr	r3, [pc, #352]	@ (8004168 <NLLS+0x2f10>)
 8004006:	443b      	add	r3, r7
 8004008:	f5a3 7259 	sub.w	r2, r3, #868	@ 0x364
 800400c:	4b55      	ldr	r3, [pc, #340]	@ (8004164 <NLLS+0x2f0c>)
 800400e:	443b      	add	r3, r7
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	ed93 7a00 	vldr	s14, [r3]
 800401a:	4b53      	ldr	r3, [pc, #332]	@ (8004168 <NLLS+0x2f10>)
 800401c:	443b      	add	r3, r7
 800401e:	f5a3 7259 	sub.w	r2, r3, #868	@ 0x364
 8004022:	4b50      	ldr	r3, [pc, #320]	@ (8004164 <NLLS+0x2f0c>)
 8004024:	443b      	add	r3, r7
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	edd3 7a00 	vldr	s15, [r3]
 8004030:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004034:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8004038:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800403c:	4b48      	ldr	r3, [pc, #288]	@ (8004160 <NLLS+0x2f08>)
 800403e:	443b      	add	r3, r7
 8004040:	ed93 7a00 	vldr	s14, [r3]
 8004044:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004048:	4b45      	ldr	r3, [pc, #276]	@ (8004160 <NLLS+0x2f08>)
 800404a:	443b      	add	r3, r7
 800404c:	edc3 7a00 	vstr	s15, [r3]
		for(int i=0; i < tam; i++)
 8004050:	4b44      	ldr	r3, [pc, #272]	@ (8004164 <NLLS+0x2f0c>)
 8004052:	443b      	add	r3, r7
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	3301      	adds	r3, #1
 8004058:	4a42      	ldr	r2, [pc, #264]	@ (8004164 <NLLS+0x2f0c>)
 800405a:	443a      	add	r2, r7
 800405c:	6013      	str	r3, [r2, #0]
 800405e:	4b41      	ldr	r3, [pc, #260]	@ (8004164 <NLLS+0x2f0c>)
 8004060:	443b      	add	r3, r7
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8004068:	dbcc      	blt.n	8004004 <NLLS+0x2dac>
		}

		if(passo < 2)
 800406a:	4b40      	ldr	r3, [pc, #256]	@ (800416c <NLLS+0x2f14>)
 800406c:	443b      	add	r3, r7
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d806      	bhi.n	8004082 <NLLS+0x2e2a>
		{
			error_ant = J;
 8004074:	4b3a      	ldr	r3, [pc, #232]	@ (8004160 <NLLS+0x2f08>)
 8004076:	443b      	add	r3, r7
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a3d      	ldr	r2, [pc, #244]	@ (8004170 <NLLS+0x2f18>)
 800407c:	443a      	add	r2, r7
 800407e:	6013      	str	r3, [r2, #0]
 8004080:	e030      	b.n	80040e4 <NLLS+0x2e8c>
		}
		else
		{
			delta_J = 100*fabsf(J-error_ant)/J;
 8004082:	4b37      	ldr	r3, [pc, #220]	@ (8004160 <NLLS+0x2f08>)
 8004084:	443b      	add	r3, r7
 8004086:	ed93 7a00 	vldr	s14, [r3]
 800408a:	4b39      	ldr	r3, [pc, #228]	@ (8004170 <NLLS+0x2f18>)
 800408c:	443b      	add	r3, r7
 800408e:	edd3 7a00 	vldr	s15, [r3]
 8004092:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004096:	eef0 7ae7 	vabs.f32	s15, s15
 800409a:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8004174 <NLLS+0x2f1c>
 800409e:	ee67 6a87 	vmul.f32	s13, s15, s14
 80040a2:	4b2f      	ldr	r3, [pc, #188]	@ (8004160 <NLLS+0x2f08>)
 80040a4:	443b      	add	r3, r7
 80040a6:	ed93 7a00 	vldr	s14, [r3]
 80040aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040ae:	4b32      	ldr	r3, [pc, #200]	@ (8004178 <NLLS+0x2f20>)
 80040b0:	443b      	add	r3, r7
 80040b2:	edc3 7a00 	vstr	s15, [r3]
			if(delta_J < 0.05)
 80040b6:	4b30      	ldr	r3, [pc, #192]	@ (8004178 <NLLS+0x2f20>)
 80040b8:	443b      	add	r3, r7
 80040ba:	6818      	ldr	r0, [r3, #0]
 80040bc:	f7fc fa64 	bl	8000588 <__aeabi_f2d>
 80040c0:	a31b      	add	r3, pc, #108	@ (adr r3, 8004130 <NLLS+0x2ed8>)
 80040c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c6:	f7fc fd29 	bl	8000b1c <__aeabi_dcmplt>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d003      	beq.n	80040d8 <NLLS+0x2e80>
			{
				loop = 0;
 80040d0:	2300      	movs	r3, #0
 80040d2:	4a2a      	ldr	r2, [pc, #168]	@ (800417c <NLLS+0x2f24>)
 80040d4:	443a      	add	r2, r7
 80040d6:	7013      	strb	r3, [r2, #0]
			}
			error_ant = J;
 80040d8:	4b21      	ldr	r3, [pc, #132]	@ (8004160 <NLLS+0x2f08>)
 80040da:	443b      	add	r3, r7
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a24      	ldr	r2, [pc, #144]	@ (8004170 <NLLS+0x2f18>)
 80040e0:	443a      	add	r2, r7
 80040e2:	6013      	str	r3, [r2, #0]
		}

		for(int i = 0; i < N; i++)
 80040e4:	2300      	movs	r3, #0
 80040e6:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80040ea:	6013      	str	r3, [r2, #0]
 80040ec:	e0bf      	b.n	800426e <NLLS+0x3016>
		{
			for(int j = 0; j < N; j++)
 80040ee:	2300      	movs	r3, #0
 80040f0:	4a23      	ldr	r2, [pc, #140]	@ (8004180 <NLLS+0x2f28>)
 80040f2:	443a      	add	r2, r7
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	e0ad      	b.n	8004254 <NLLS+0x2ffc>
			{
				Ht_H[i][j] = 0;
 80040f8:	f24a 0340 	movw	r3, #41024	@ 0xa040
 80040fc:	443b      	add	r3, r7
 80040fe:	f5a3 711a 	sub.w	r1, r3, #616	@ 0x268
 8004102:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	4613      	mov	r3, r2
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	4413      	add	r3, r2
 800410e:	4a1c      	ldr	r2, [pc, #112]	@ (8004180 <NLLS+0x2f28>)
 8004110:	443a      	add	r2, r7
 8004112:	6812      	ldr	r2, [r2, #0]
 8004114:	4413      	add	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	440b      	add	r3, r1
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	601a      	str	r2, [r3, #0]
				for(int k = 0; k < tam; k++)
 8004120:	2300      	movs	r3, #0
 8004122:	4a18      	ldr	r2, [pc, #96]	@ (8004184 <NLLS+0x2f2c>)
 8004124:	443a      	add	r2, r7
 8004126:	6013      	str	r3, [r2, #0]
 8004128:	e087      	b.n	800423a <NLLS+0x2fe2>
 800412a:	bf00      	nop
 800412c:	f3af 8000 	nop.w
 8004130:	9999999a 	.word	0x9999999a
 8004134:	3fa99999 	.word	0x3fa99999
 8004138:	00017038 	.word	0x00017038
 800413c:	00017034 	.word	0x00017034
 8004140:	00016fc8 	.word	0x00016fc8
 8004144:	00017008 	.word	0x00017008
 8004148:	00017024 	.word	0x00017024
 800414c:	00017030 	.word	0x00017030
 8004150:	00016fd0 	.word	0x00016fd0
 8004154:	00017028 	.word	0x00017028
 8004158:	00016fc4 	.word	0x00016fc4
 800415c:	00016fcc 	.word	0x00016fcc
 8004160:	00017010 	.word	0x00017010
 8004164:	00017004 	.word	0x00017004
 8004168:	00015040 	.word	0x00015040
 800416c:	0001703f 	.word	0x0001703f
 8004170:	00017014 	.word	0x00017014
 8004174:	42c80000 	.word	0x42c80000
 8004178:	00016fc0 	.word	0x00016fc0
 800417c:	0001703e 	.word	0x0001703e
 8004180:	00016ffc 	.word	0x00016ffc
 8004184:	00016ff8 	.word	0x00016ff8
				{
					Ht_H[i][j] += mat_H[i][k]*mat_H[j][k];
 8004188:	f24a 0340 	movw	r3, #41024	@ 0xa040
 800418c:	443b      	add	r3, r7
 800418e:	f5a3 711a 	sub.w	r1, r3, #616	@ 0x268
 8004192:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	4613      	mov	r3, r2
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	4413      	add	r3, r2
 800419e:	4a97      	ldr	r2, [pc, #604]	@ (80043fc <NLLS+0x31a4>)
 80041a0:	443a      	add	r2, r7
 80041a2:	6812      	ldr	r2, [r2, #0]
 80041a4:	4413      	add	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	440b      	add	r3, r1
 80041aa:	ed93 7a00 	vldr	s14, [r3]
 80041ae:	f24a 0340 	movw	r3, #41024	@ 0xa040
 80041b2:	443b      	add	r3, r7
 80041b4:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 80041b8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f44f 618b 	mov.w	r1, #1112	@ 0x458
 80041c2:	fb03 f101 	mul.w	r1, r3, r1
 80041c6:	4b8e      	ldr	r3, [pc, #568]	@ (8004400 <NLLS+0x31a8>)
 80041c8:	443b      	add	r3, r7
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	440b      	add	r3, r1
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	edd3 6a00 	vldr	s13, [r3]
 80041d6:	f24a 0340 	movw	r3, #41024	@ 0xa040
 80041da:	443b      	add	r3, r7
 80041dc:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 80041e0:	4b86      	ldr	r3, [pc, #536]	@ (80043fc <NLLS+0x31a4>)
 80041e2:	443b      	add	r3, r7
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f44f 618b 	mov.w	r1, #1112	@ 0x458
 80041ea:	fb03 f101 	mul.w	r1, r3, r1
 80041ee:	4b84      	ldr	r3, [pc, #528]	@ (8004400 <NLLS+0x31a8>)
 80041f0:	443b      	add	r3, r7
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	440b      	add	r3, r1
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	edd3 7a00 	vldr	s15, [r3]
 80041fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004206:	f24a 0340 	movw	r3, #41024	@ 0xa040
 800420a:	443b      	add	r3, r7
 800420c:	f5a3 711a 	sub.w	r1, r3, #616	@ 0x268
 8004210:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	4613      	mov	r3, r2
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	4413      	add	r3, r2
 800421c:	4a77      	ldr	r2, [pc, #476]	@ (80043fc <NLLS+0x31a4>)
 800421e:	443a      	add	r2, r7
 8004220:	6812      	ldr	r2, [r2, #0]
 8004222:	4413      	add	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	440b      	add	r3, r1
 8004228:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < tam; k++)
 800422c:	4b74      	ldr	r3, [pc, #464]	@ (8004400 <NLLS+0x31a8>)
 800422e:	443b      	add	r3, r7
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	3301      	adds	r3, #1
 8004234:	4a72      	ldr	r2, [pc, #456]	@ (8004400 <NLLS+0x31a8>)
 8004236:	443a      	add	r2, r7
 8004238:	6013      	str	r3, [r2, #0]
 800423a:	4b71      	ldr	r3, [pc, #452]	@ (8004400 <NLLS+0x31a8>)
 800423c:	443b      	add	r3, r7
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8004244:	dba0      	blt.n	8004188 <NLLS+0x2f30>
			for(int j = 0; j < N; j++)
 8004246:	4b6d      	ldr	r3, [pc, #436]	@ (80043fc <NLLS+0x31a4>)
 8004248:	443b      	add	r3, r7
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3301      	adds	r3, #1
 800424e:	4a6b      	ldr	r2, [pc, #428]	@ (80043fc <NLLS+0x31a4>)
 8004250:	443a      	add	r2, r7
 8004252:	6013      	str	r3, [r2, #0]
 8004254:	4b69      	ldr	r3, [pc, #420]	@ (80043fc <NLLS+0x31a4>)
 8004256:	443b      	add	r3, r7
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2b08      	cmp	r3, #8
 800425c:	f77f af4c 	ble.w	80040f8 <NLLS+0x2ea0>
		for(int i = 0; i < N; i++)
 8004260:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	3301      	adds	r3, #1
 8004268:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2b08      	cmp	r3, #8
 8004276:	f77f af3a 	ble.w	80040ee <NLLS+0x2e96>
				}
			}
		}

		inverter_matriz(Ht_H, inv);
 800427a:	4a62      	ldr	r2, [pc, #392]	@ (8004404 <NLLS+0x31ac>)
 800427c:	4b62      	ldr	r3, [pc, #392]	@ (8004408 <NLLS+0x31b0>)
 800427e:	4413      	add	r3, r2
 8004280:	19da      	adds	r2, r3, r7
 8004282:	4b62      	ldr	r3, [pc, #392]	@ (800440c <NLLS+0x31b4>)
 8004284:	f503 33b8 	add.w	r3, r3, #94208	@ 0x17000
 8004288:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800428c:	443b      	add	r3, r7
 800428e:	4611      	mov	r1, r2
 8004290:	4618      	mov	r0, r3
 8004292:	f7fc fec7 	bl	8001024 <inverter_matriz>

		for(int i = 0; i < N; i++)
 8004296:	2300      	movs	r3, #0
 8004298:	4a5d      	ldr	r2, [pc, #372]	@ (8004410 <NLLS+0x31b8>)
 800429a:	443a      	add	r2, r7
 800429c:	6013      	str	r3, [r2, #0]
 800429e:	e08f      	b.n	80043c0 <NLLS+0x3168>
		{
			for(int j = 0; j < tam; j++)
 80042a0:	2300      	movs	r3, #0
 80042a2:	4a5c      	ldr	r2, [pc, #368]	@ (8004414 <NLLS+0x31bc>)
 80042a4:	443a      	add	r2, r7
 80042a6:	6013      	str	r3, [r2, #0]
 80042a8:	e07c      	b.n	80043a4 <NLLS+0x314c>
			{
				mul_mat[i][j] = 0;
 80042aa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80042ae:	4619      	mov	r1, r3
 80042b0:	4b57      	ldr	r3, [pc, #348]	@ (8004410 <NLLS+0x31b8>)
 80042b2:	443b      	add	r3, r7
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f44f 628b 	mov.w	r2, #1112	@ 0x458
 80042ba:	fb03 f202 	mul.w	r2, r3, r2
 80042be:	4b55      	ldr	r3, [pc, #340]	@ (8004414 <NLLS+0x31bc>)
 80042c0:	443b      	add	r3, r7
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4413      	add	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	3b30      	subs	r3, #48	@ 0x30
 80042cc:	f04f 0200 	mov.w	r2, #0
 80042d0:	601a      	str	r2, [r3, #0]
				for(int k = 0; k < N; k++)
 80042d2:	2300      	movs	r3, #0
 80042d4:	4a50      	ldr	r2, [pc, #320]	@ (8004418 <NLLS+0x31c0>)
 80042d6:	443a      	add	r2, r7
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	e057      	b.n	800438c <NLLS+0x3134>
				{
					mul_mat[i][j] += inv[i][k]*mat_H[k][j];
 80042dc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80042e0:	4619      	mov	r1, r3
 80042e2:	4b4b      	ldr	r3, [pc, #300]	@ (8004410 <NLLS+0x31b8>)
 80042e4:	443b      	add	r3, r7
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f44f 628b 	mov.w	r2, #1112	@ 0x458
 80042ec:	fb03 f202 	mul.w	r2, r3, r2
 80042f0:	4b48      	ldr	r3, [pc, #288]	@ (8004414 <NLLS+0x31bc>)
 80042f2:	443b      	add	r3, r7
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4413      	add	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	440b      	add	r3, r1
 80042fc:	3b30      	subs	r3, #48	@ 0x30
 80042fe:	ed93 7a00 	vldr	s14, [r3]
 8004302:	f24a 0340 	movw	r3, #41024	@ 0xa040
 8004306:	443b      	add	r3, r7
 8004308:	f5a3 7174 	sub.w	r1, r3, #976	@ 0x3d0
 800430c:	4b40      	ldr	r3, [pc, #256]	@ (8004410 <NLLS+0x31b8>)
 800430e:	443b      	add	r3, r7
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	4613      	mov	r3, r2
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	4413      	add	r3, r2
 8004318:	4a3f      	ldr	r2, [pc, #252]	@ (8004418 <NLLS+0x31c0>)
 800431a:	443a      	add	r2, r7
 800431c:	6812      	ldr	r2, [r2, #0]
 800431e:	4413      	add	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	440b      	add	r3, r1
 8004324:	edd3 6a00 	vldr	s13, [r3]
 8004328:	f24a 0340 	movw	r3, #41024	@ 0xa040
 800432c:	443b      	add	r3, r7
 800432e:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8004332:	4b39      	ldr	r3, [pc, #228]	@ (8004418 <NLLS+0x31c0>)
 8004334:	443b      	add	r3, r7
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f44f 618b 	mov.w	r1, #1112	@ 0x458
 800433c:	fb03 f101 	mul.w	r1, r3, r1
 8004340:	4b34      	ldr	r3, [pc, #208]	@ (8004414 <NLLS+0x31bc>)
 8004342:	443b      	add	r3, r7
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	440b      	add	r3, r1
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4413      	add	r3, r2
 800434c:	edd3 7a00 	vldr	s15, [r3]
 8004350:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004354:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004358:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800435c:	4619      	mov	r1, r3
 800435e:	4b2c      	ldr	r3, [pc, #176]	@ (8004410 <NLLS+0x31b8>)
 8004360:	443b      	add	r3, r7
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f44f 628b 	mov.w	r2, #1112	@ 0x458
 8004368:	fb03 f202 	mul.w	r2, r3, r2
 800436c:	4b29      	ldr	r3, [pc, #164]	@ (8004414 <NLLS+0x31bc>)
 800436e:	443b      	add	r3, r7
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4413      	add	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	440b      	add	r3, r1
 8004378:	3b30      	subs	r3, #48	@ 0x30
 800437a:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < N; k++)
 800437e:	4b26      	ldr	r3, [pc, #152]	@ (8004418 <NLLS+0x31c0>)
 8004380:	443b      	add	r3, r7
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	3301      	adds	r3, #1
 8004386:	4a24      	ldr	r2, [pc, #144]	@ (8004418 <NLLS+0x31c0>)
 8004388:	443a      	add	r2, r7
 800438a:	6013      	str	r3, [r2, #0]
 800438c:	4b22      	ldr	r3, [pc, #136]	@ (8004418 <NLLS+0x31c0>)
 800438e:	443b      	add	r3, r7
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b08      	cmp	r3, #8
 8004394:	dda2      	ble.n	80042dc <NLLS+0x3084>
			for(int j = 0; j < tam; j++)
 8004396:	4b1f      	ldr	r3, [pc, #124]	@ (8004414 <NLLS+0x31bc>)
 8004398:	443b      	add	r3, r7
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3301      	adds	r3, #1
 800439e:	4a1d      	ldr	r2, [pc, #116]	@ (8004414 <NLLS+0x31bc>)
 80043a0:	443a      	add	r2, r7
 80043a2:	6013      	str	r3, [r2, #0]
 80043a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004414 <NLLS+0x31bc>)
 80043a6:	443b      	add	r3, r7
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 80043ae:	f6ff af7c 	blt.w	80042aa <NLLS+0x3052>
		for(int i = 0; i < N; i++)
 80043b2:	4b17      	ldr	r3, [pc, #92]	@ (8004410 <NLLS+0x31b8>)
 80043b4:	443b      	add	r3, r7
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3301      	adds	r3, #1
 80043ba:	4a15      	ldr	r2, [pc, #84]	@ (8004410 <NLLS+0x31b8>)
 80043bc:	443a      	add	r2, r7
 80043be:	6013      	str	r3, [r2, #0]
 80043c0:	4b13      	ldr	r3, [pc, #76]	@ (8004410 <NLLS+0x31b8>)
 80043c2:	443b      	add	r3, r7
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b08      	cmp	r3, #8
 80043c8:	f77f af6a 	ble.w	80042a0 <NLLS+0x3048>
				}
			}
		}

		for(int i = 0; i < N; i++)
 80043cc:	2300      	movs	r3, #0
 80043ce:	4a13      	ldr	r2, [pc, #76]	@ (800441c <NLLS+0x31c4>)
 80043d0:	443a      	add	r2, r7
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	e074      	b.n	80044c0 <NLLS+0x3268>
		{
			Ht_e[i] = 0;
 80043d6:	f24a 0340 	movw	r3, #41024	@ 0xa040
 80043da:	443b      	add	r3, r7
 80043dc:	f5a3 7223 	sub.w	r2, r3, #652	@ 0x28c
 80043e0:	4b0e      	ldr	r3, [pc, #56]	@ (800441c <NLLS+0x31c4>)
 80043e2:	443b      	add	r3, r7
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	f04f 0200 	mov.w	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]
			for(int j = 0; j < tam; j++)
 80043f0:	2300      	movs	r3, #0
 80043f2:	4a0b      	ldr	r2, [pc, #44]	@ (8004420 <NLLS+0x31c8>)
 80043f4:	443a      	add	r2, r7
 80043f6:	6013      	str	r3, [r2, #0]
 80043f8:	e055      	b.n	80044a6 <NLLS+0x324e>
 80043fa:	bf00      	nop
 80043fc:	00016ffc 	.word	0x00016ffc
 8004400:	00016ff8 	.word	0x00016ff8
 8004404:	ffff2c30 	.word	0xffff2c30
 8004408:	00017040 	.word	0x00017040
 800440c:	ffff2d98 	.word	0xffff2d98
 8004410:	00016ff4 	.word	0x00016ff4
 8004414:	00016ff0 	.word	0x00016ff0
 8004418:	00016fec 	.word	0x00016fec
 800441c:	00016fe8 	.word	0x00016fe8
 8004420:	00016fe4 	.word	0x00016fe4
			{
				Ht_e[i] += mul_mat[i][j]*e[j];
 8004424:	f24a 0340 	movw	r3, #41024	@ 0xa040
 8004428:	443b      	add	r3, r7
 800442a:	f5a3 7223 	sub.w	r2, r3, #652	@ 0x28c
 800442e:	4b75      	ldr	r3, [pc, #468]	@ (8004604 <NLLS+0x33ac>)
 8004430:	443b      	add	r3, r7
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4413      	add	r3, r2
 8004438:	ed93 7a00 	vldr	s14, [r3]
 800443c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004440:	4619      	mov	r1, r3
 8004442:	4b70      	ldr	r3, [pc, #448]	@ (8004604 <NLLS+0x33ac>)
 8004444:	443b      	add	r3, r7
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f44f 628b 	mov.w	r2, #1112	@ 0x458
 800444c:	fb03 f202 	mul.w	r2, r3, r2
 8004450:	4b6d      	ldr	r3, [pc, #436]	@ (8004608 <NLLS+0x33b0>)
 8004452:	443b      	add	r3, r7
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4413      	add	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	440b      	add	r3, r1
 800445c:	3b30      	subs	r3, #48	@ 0x30
 800445e:	edd3 6a00 	vldr	s13, [r3]
 8004462:	4b6a      	ldr	r3, [pc, #424]	@ (800460c <NLLS+0x33b4>)
 8004464:	443b      	add	r3, r7
 8004466:	f5a3 7259 	sub.w	r2, r3, #868	@ 0x364
 800446a:	4b67      	ldr	r3, [pc, #412]	@ (8004608 <NLLS+0x33b0>)
 800446c:	443b      	add	r3, r7
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4413      	add	r3, r2
 8004474:	edd3 7a00 	vldr	s15, [r3]
 8004478:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800447c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004480:	f24a 0340 	movw	r3, #41024	@ 0xa040
 8004484:	443b      	add	r3, r7
 8004486:	f5a3 7223 	sub.w	r2, r3, #652	@ 0x28c
 800448a:	4b5e      	ldr	r3, [pc, #376]	@ (8004604 <NLLS+0x33ac>)
 800448c:	443b      	add	r3, r7
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4413      	add	r3, r2
 8004494:	edc3 7a00 	vstr	s15, [r3]
			for(int j = 0; j < tam; j++)
 8004498:	4b5b      	ldr	r3, [pc, #364]	@ (8004608 <NLLS+0x33b0>)
 800449a:	443b      	add	r3, r7
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	3301      	adds	r3, #1
 80044a0:	4a59      	ldr	r2, [pc, #356]	@ (8004608 <NLLS+0x33b0>)
 80044a2:	443a      	add	r2, r7
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	4b58      	ldr	r3, [pc, #352]	@ (8004608 <NLLS+0x33b0>)
 80044a8:	443b      	add	r3, r7
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 80044b0:	dbb8      	blt.n	8004424 <NLLS+0x31cc>
		for(int i = 0; i < N; i++)
 80044b2:	4b54      	ldr	r3, [pc, #336]	@ (8004604 <NLLS+0x33ac>)
 80044b4:	443b      	add	r3, r7
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	3301      	adds	r3, #1
 80044ba:	4a52      	ldr	r2, [pc, #328]	@ (8004604 <NLLS+0x33ac>)
 80044bc:	443a      	add	r2, r7
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	4b50      	ldr	r3, [pc, #320]	@ (8004604 <NLLS+0x33ac>)
 80044c2:	443b      	add	r3, r7
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2b08      	cmp	r3, #8
 80044c8:	dd85      	ble.n	80043d6 <NLLS+0x317e>
			}
		}

		for(int i = 0; i < N; i++)
 80044ca:	2300      	movs	r3, #0
 80044cc:	4a50      	ldr	r2, [pc, #320]	@ (8004610 <NLLS+0x33b8>)
 80044ce:	443a      	add	r2, r7
 80044d0:	6013      	str	r3, [r2, #0]
 80044d2:	e02c      	b.n	800452e <NLLS+0x32d6>
		{
			p0[i] += Ht_e[i];
 80044d4:	4b4e      	ldr	r3, [pc, #312]	@ (8004610 <NLLS+0x33b8>)
 80044d6:	443b      	add	r3, r7
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	f503 33b8 	add.w	r3, r3, #94208	@ 0x17000
 80044e0:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80044e4:	443b      	add	r3, r7
 80044e6:	3ba4      	subs	r3, #164	@ 0xa4
 80044e8:	ed93 7a00 	vldr	s14, [r3]
 80044ec:	f24a 0340 	movw	r3, #41024	@ 0xa040
 80044f0:	443b      	add	r3, r7
 80044f2:	f5a3 7223 	sub.w	r2, r3, #652	@ 0x28c
 80044f6:	4b46      	ldr	r3, [pc, #280]	@ (8004610 <NLLS+0x33b8>)
 80044f8:	443b      	add	r3, r7
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4413      	add	r3, r2
 8004500:	edd3 7a00 	vldr	s15, [r3]
 8004504:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004508:	4b41      	ldr	r3, [pc, #260]	@ (8004610 <NLLS+0x33b8>)
 800450a:	443b      	add	r3, r7
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	f503 33b8 	add.w	r3, r3, #94208	@ 0x17000
 8004514:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8004518:	443b      	add	r3, r7
 800451a:	3ba4      	subs	r3, #164	@ 0xa4
 800451c:	edc3 7a00 	vstr	s15, [r3]
		for(int i = 0; i < N; i++)
 8004520:	4b3b      	ldr	r3, [pc, #236]	@ (8004610 <NLLS+0x33b8>)
 8004522:	443b      	add	r3, r7
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	3301      	adds	r3, #1
 8004528:	4a39      	ldr	r2, [pc, #228]	@ (8004610 <NLLS+0x33b8>)
 800452a:	443a      	add	r2, r7
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	4b38      	ldr	r3, [pc, #224]	@ (8004610 <NLLS+0x33b8>)
 8004530:	443b      	add	r3, r7
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b08      	cmp	r3, #8
 8004536:	ddcd      	ble.n	80044d4 <NLLS+0x327c>
		}

		passo++;
 8004538:	4b36      	ldr	r3, [pc, #216]	@ (8004614 <NLLS+0x33bc>)
 800453a:	443b      	add	r3, r7
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	3301      	adds	r3, #1
 8004540:	4a34      	ldr	r2, [pc, #208]	@ (8004614 <NLLS+0x33bc>)
 8004542:	443a      	add	r2, r7
 8004544:	7013      	strb	r3, [r2, #0]
	while(loop == 1)
 8004546:	4b34      	ldr	r3, [pc, #208]	@ (8004618 <NLLS+0x33c0>)
 8004548:	443b      	add	r3, r7
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2b01      	cmp	r3, #1
 800454e:	f43c aed5 	beq.w	80012fc <NLLS+0xa4>
	}
    p[0] = sx;
 8004552:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004556:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800455a:	4a30      	ldr	r2, [pc, #192]	@ (800461c <NLLS+0x33c4>)
 800455c:	443a      	add	r2, r7
 800455e:	6812      	ldr	r2, [r2, #0]
 8004560:	601a      	str	r2, [r3, #0]
    p[1] = sy;
 8004562:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004566:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800456a:	3304      	adds	r3, #4
 800456c:	4a2c      	ldr	r2, [pc, #176]	@ (8004620 <NLLS+0x33c8>)
 800456e:	443a      	add	r2, r7
 8004570:	6812      	ldr	r2, [r2, #0]
 8004572:	601a      	str	r2, [r3, #0]
    p[2] = sz;
 8004574:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004578:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800457c:	3308      	adds	r3, #8
 800457e:	4a29      	ldr	r2, [pc, #164]	@ (8004624 <NLLS+0x33cc>)
 8004580:	443a      	add	r2, r7
 8004582:	6812      	ldr	r2, [r2, #0]
 8004584:	601a      	str	r2, [r3, #0]
    p[3] = bx;
 8004586:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800458a:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800458e:	330c      	adds	r3, #12
 8004590:	4a25      	ldr	r2, [pc, #148]	@ (8004628 <NLLS+0x33d0>)
 8004592:	443a      	add	r2, r7
 8004594:	6812      	ldr	r2, [r2, #0]
 8004596:	601a      	str	r2, [r3, #0]
    p[4] = by;
 8004598:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800459c:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80045a0:	3310      	adds	r3, #16
 80045a2:	4a22      	ldr	r2, [pc, #136]	@ (800462c <NLLS+0x33d4>)
 80045a4:	443a      	add	r2, r7
 80045a6:	6812      	ldr	r2, [r2, #0]
 80045a8:	601a      	str	r2, [r3, #0]
    p[5] = bz;
 80045aa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80045ae:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80045b2:	3314      	adds	r3, #20
 80045b4:	4a1e      	ldr	r2, [pc, #120]	@ (8004630 <NLLS+0x33d8>)
 80045b6:	443a      	add	r2, r7
 80045b8:	6812      	ldr	r2, [r2, #0]
 80045ba:	601a      	str	r2, [r3, #0]
    p[6] = rho;
 80045bc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80045c0:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80045c4:	3318      	adds	r3, #24
 80045c6:	4a1b      	ldr	r2, [pc, #108]	@ (8004634 <NLLS+0x33dc>)
 80045c8:	443a      	add	r2, r7
 80045ca:	6812      	ldr	r2, [r2, #0]
 80045cc:	601a      	str	r2, [r3, #0]
    p[7] = phi;
 80045ce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80045d2:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80045d6:	331c      	adds	r3, #28
 80045d8:	4a17      	ldr	r2, [pc, #92]	@ (8004638 <NLLS+0x33e0>)
 80045da:	443a      	add	r2, r7
 80045dc:	6812      	ldr	r2, [r2, #0]
 80045de:	601a      	str	r2, [r3, #0]
    p[8] = lambida;
 80045e0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80045e4:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80045e8:	3320      	adds	r3, #32
 80045ea:	4a14      	ldr	r2, [pc, #80]	@ (800463c <NLLS+0x33e4>)
 80045ec:	443a      	add	r2, r7
 80045ee:	6812      	ldr	r2, [r2, #0]
 80045f0:	601a      	str	r2, [r3, #0]

    return passo;
 80045f2:	4b08      	ldr	r3, [pc, #32]	@ (8004614 <NLLS+0x33bc>)
 80045f4:	443b      	add	r3, r7
 80045f6:	781b      	ldrb	r3, [r3, #0]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	f507 37b8 	add.w	r7, r7, #94208	@ 0x17000
 80045fe:	3740      	adds	r7, #64	@ 0x40
 8004600:	46bd      	mov	sp, r7
 8004602:	bdb0      	pop	{r4, r5, r7, pc}
 8004604:	00016fe8 	.word	0x00016fe8
 8004608:	00016fe4 	.word	0x00016fe4
 800460c:	00015040 	.word	0x00015040
 8004610:	00016fe0 	.word	0x00016fe0
 8004614:	0001703f 	.word	0x0001703f
 8004618:	0001703e 	.word	0x0001703e
 800461c:	00017038 	.word	0x00017038
 8004620:	00017034 	.word	0x00017034
 8004624:	00017030 	.word	0x00017030
 8004628:	0001702c 	.word	0x0001702c
 800462c:	00017028 	.word	0x00017028
 8004630:	00017024 	.word	0x00017024
 8004634:	00017020 	.word	0x00017020
 8004638:	0001701c 	.word	0x0001701c
 800463c:	00017018 	.word	0x00017018

08004640 <ETS>:

void ETS(float *mx, float *my, float *mz, float *p)
{
 8004640:	b590      	push	{r4, r7, lr}
 8004642:	ed2d 8b02 	vpush	{d8}
 8004646:	f5ad 3da6 	sub.w	sp, sp, #84992	@ 0x14c00
 800464a:	b0db      	sub	sp, #364	@ 0x16c
 800464c:	af00      	add	r7, sp, #0
 800464e:	f607 5468 	addw	r4, r7, #3432	@ 0xd68
 8004652:	f6a4 545c 	subw	r4, r4, #3420	@ 0xd5c
 8004656:	6020      	str	r0, [r4, #0]
 8004658:	f607 5068 	addw	r0, r7, #3432	@ 0xd68
 800465c:	f5a0 6056 	sub.w	r0, r0, #3424	@ 0xd60
 8004660:	6001      	str	r1, [r0, #0]
 8004662:	f607 5168 	addw	r1, r7, #3432	@ 0xd68
 8004666:	f6a1 5164 	subw	r1, r1, #3428	@ 0xd64
 800466a:	600a      	str	r2, [r1, #0]
 800466c:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 8004670:	f6a2 5268 	subw	r2, r2, #3432	@ 0xd68
 8004674:	6013      	str	r3, [r2, #0]
    //Cria a matriz H
    float mat_H[N][tam], my_2[tam];
    float H_Ht[N][N], inv[N][N];
    float mul_mat[N][tam];
    float X[N];
    float psi7 = 0, psi8 = 0, divs = 0, n1 = 0, n2 = 0, n3 = 0, n4 = 0, n5 = 0, n6 = 0, bx = 0, by = 0, bz = 0, sx = 0, sy = 0, sz = 0, rho = 0, phi = 0, lambida = 0;
 8004676:	f04f 0300 	mov.w	r3, #0
 800467a:	4a40      	ldr	r2, [pc, #256]	@ (800477c <ETS+0x13c>)
 800467c:	443a      	add	r2, r7
 800467e:	6013      	str	r3, [r2, #0]
 8004680:	f04f 0300 	mov.w	r3, #0
 8004684:	4a3e      	ldr	r2, [pc, #248]	@ (8004780 <ETS+0x140>)
 8004686:	443a      	add	r2, r7
 8004688:	6013      	str	r3, [r2, #0]
 800468a:	f04f 0300 	mov.w	r3, #0
 800468e:	4a3d      	ldr	r2, [pc, #244]	@ (8004784 <ETS+0x144>)
 8004690:	443a      	add	r2, r7
 8004692:	6013      	str	r3, [r2, #0]
 8004694:	f04f 0300 	mov.w	r3, #0
 8004698:	4a3b      	ldr	r2, [pc, #236]	@ (8004788 <ETS+0x148>)
 800469a:	443a      	add	r2, r7
 800469c:	6013      	str	r3, [r2, #0]
 800469e:	f04f 0300 	mov.w	r3, #0
 80046a2:	4a3a      	ldr	r2, [pc, #232]	@ (800478c <ETS+0x14c>)
 80046a4:	443a      	add	r2, r7
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	f04f 0300 	mov.w	r3, #0
 80046ac:	4a38      	ldr	r2, [pc, #224]	@ (8004790 <ETS+0x150>)
 80046ae:	443a      	add	r2, r7
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	f04f 0300 	mov.w	r3, #0
 80046b6:	4a37      	ldr	r2, [pc, #220]	@ (8004794 <ETS+0x154>)
 80046b8:	443a      	add	r2, r7
 80046ba:	6013      	str	r3, [r2, #0]
 80046bc:	f04f 0300 	mov.w	r3, #0
 80046c0:	4a35      	ldr	r2, [pc, #212]	@ (8004798 <ETS+0x158>)
 80046c2:	443a      	add	r2, r7
 80046c4:	6013      	str	r3, [r2, #0]
 80046c6:	f04f 0300 	mov.w	r3, #0
 80046ca:	4a34      	ldr	r2, [pc, #208]	@ (800479c <ETS+0x15c>)
 80046cc:	443a      	add	r2, r7
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	f04f 0300 	mov.w	r3, #0
 80046d4:	4a32      	ldr	r2, [pc, #200]	@ (80047a0 <ETS+0x160>)
 80046d6:	443a      	add	r2, r7
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	f04f 0300 	mov.w	r3, #0
 80046de:	4a31      	ldr	r2, [pc, #196]	@ (80047a4 <ETS+0x164>)
 80046e0:	443a      	add	r2, r7
 80046e2:	6013      	str	r3, [r2, #0]
 80046e4:	f04f 0300 	mov.w	r3, #0
 80046e8:	4a2f      	ldr	r2, [pc, #188]	@ (80047a8 <ETS+0x168>)
 80046ea:	443a      	add	r2, r7
 80046ec:	6013      	str	r3, [r2, #0]
 80046ee:	f04f 0300 	mov.w	r3, #0
 80046f2:	4a2e      	ldr	r2, [pc, #184]	@ (80047ac <ETS+0x16c>)
 80046f4:	443a      	add	r2, r7
 80046f6:	6013      	str	r3, [r2, #0]
 80046f8:	f04f 0300 	mov.w	r3, #0
 80046fc:	4a2c      	ldr	r2, [pc, #176]	@ (80047b0 <ETS+0x170>)
 80046fe:	443a      	add	r2, r7
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	f04f 0300 	mov.w	r3, #0
 8004706:	4a2b      	ldr	r2, [pc, #172]	@ (80047b4 <ETS+0x174>)
 8004708:	443a      	add	r2, r7
 800470a:	6013      	str	r3, [r2, #0]
 800470c:	f04f 0300 	mov.w	r3, #0
 8004710:	4a29      	ldr	r2, [pc, #164]	@ (80047b8 <ETS+0x178>)
 8004712:	443a      	add	r2, r7
 8004714:	6013      	str	r3, [r2, #0]
 8004716:	f04f 0300 	mov.w	r3, #0
 800471a:	4a28      	ldr	r2, [pc, #160]	@ (80047bc <ETS+0x17c>)
 800471c:	443a      	add	r2, r7
 800471e:	6013      	str	r3, [r2, #0]
 8004720:	f04f 0300 	mov.w	r3, #0
 8004724:	4a26      	ldr	r2, [pc, #152]	@ (80047c0 <ETS+0x180>)
 8004726:	443a      	add	r2, r7
 8004728:	6013      	str	r3, [r2, #0]
    float X1_2 = 0, X2_2 = 0, X3_2 = 0, X4_2 = 0, X5_2 = 0, X6_2 = 0, X7_2 = 0;
 800472a:	f04f 0300 	mov.w	r3, #0
 800472e:	4a25      	ldr	r2, [pc, #148]	@ (80047c4 <ETS+0x184>)
 8004730:	443a      	add	r2, r7
 8004732:	6013      	str	r3, [r2, #0]
 8004734:	f04f 0300 	mov.w	r3, #0
 8004738:	4a23      	ldr	r2, [pc, #140]	@ (80047c8 <ETS+0x188>)
 800473a:	443a      	add	r2, r7
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	f04f 0300 	mov.w	r3, #0
 8004742:	4a22      	ldr	r2, [pc, #136]	@ (80047cc <ETS+0x18c>)
 8004744:	443a      	add	r2, r7
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	f04f 0300 	mov.w	r3, #0
 800474c:	4a20      	ldr	r2, [pc, #128]	@ (80047d0 <ETS+0x190>)
 800474e:	443a      	add	r2, r7
 8004750:	6013      	str	r3, [r2, #0]
 8004752:	f04f 0300 	mov.w	r3, #0
 8004756:	4a1f      	ldr	r2, [pc, #124]	@ (80047d4 <ETS+0x194>)
 8004758:	443a      	add	r2, r7
 800475a:	6013      	str	r3, [r2, #0]
 800475c:	f04f 0300 	mov.w	r3, #0
 8004760:	4a1d      	ldr	r2, [pc, #116]	@ (80047d8 <ETS+0x198>)
 8004762:	443a      	add	r2, r7
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	f04f 0300 	mov.w	r3, #0
 800476a:	4a1c      	ldr	r2, [pc, #112]	@ (80047dc <ETS+0x19c>)
 800476c:	443a      	add	r2, r7
 800476e:	6013      	str	r3, [r2, #0]
    for(int i=0; i < tam; i++)
 8004770:	2300      	movs	r3, #0
 8004772:	4a1b      	ldr	r2, [pc, #108]	@ (80047e0 <ETS+0x1a0>)
 8004774:	443a      	add	r2, r7
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	e183      	b.n	8004a82 <ETS+0x442>
 800477a:	bf00      	nop
 800477c:	00014d40 	.word	0x00014d40
 8004780:	00014d3c 	.word	0x00014d3c
 8004784:	00014d38 	.word	0x00014d38
 8004788:	00014d34 	.word	0x00014d34
 800478c:	00014d30 	.word	0x00014d30
 8004790:	00014d2c 	.word	0x00014d2c
 8004794:	00014d28 	.word	0x00014d28
 8004798:	00014d24 	.word	0x00014d24
 800479c:	00014d20 	.word	0x00014d20
 80047a0:	00014d1c 	.word	0x00014d1c
 80047a4:	00014d18 	.word	0x00014d18
 80047a8:	00014d14 	.word	0x00014d14
 80047ac:	00014d10 	.word	0x00014d10
 80047b0:	00014d0c 	.word	0x00014d0c
 80047b4:	00014d08 	.word	0x00014d08
 80047b8:	00014d04 	.word	0x00014d04
 80047bc:	00014d00 	.word	0x00014d00
 80047c0:	00014cfc 	.word	0x00014cfc
 80047c4:	00014cf8 	.word	0x00014cf8
 80047c8:	00014cf4 	.word	0x00014cf4
 80047cc:	00014cf0 	.word	0x00014cf0
 80047d0:	00014cec 	.word	0x00014cec
 80047d4:	00014ce8 	.word	0x00014ce8
 80047d8:	00014ce4 	.word	0x00014ce4
 80047dc:	00014ce0 	.word	0x00014ce0
 80047e0:	00014d64 	.word	0x00014d64
    {
        mat_H[0][i] = mx[i]*mx[i];
 80047e4:	4baf      	ldr	r3, [pc, #700]	@ (8004aa4 <ETS+0x464>)
 80047e6:	443b      	add	r3, r7
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 80047f0:	f6a2 525c 	subw	r2, r2, #3420	@ 0xd5c
 80047f4:	6812      	ldr	r2, [r2, #0]
 80047f6:	4413      	add	r3, r2
 80047f8:	ed93 7a00 	vldr	s14, [r3]
 80047fc:	4ba9      	ldr	r3, [pc, #676]	@ (8004aa4 <ETS+0x464>)
 80047fe:	443b      	add	r3, r7
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 8004808:	f6a2 525c 	subw	r2, r2, #3420	@ 0xd5c
 800480c:	6812      	ldr	r2, [r2, #0]
 800480e:	4413      	add	r3, r2
 8004810:	edd3 7a00 	vldr	s15, [r3]
 8004814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004818:	f64b 5368 	movw	r3, #48488	@ 0xbd68
 800481c:	443b      	add	r3, r7
 800481e:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 8004822:	4ba0      	ldr	r3, [pc, #640]	@ (8004aa4 <ETS+0x464>)
 8004824:	443b      	add	r3, r7
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	edc3 7a00 	vstr	s15, [r3]
        mat_H[1][i] = mx[i]*my[i];
 8004830:	4b9c      	ldr	r3, [pc, #624]	@ (8004aa4 <ETS+0x464>)
 8004832:	443b      	add	r3, r7
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 800483c:	f6a2 525c 	subw	r2, r2, #3420	@ 0xd5c
 8004840:	6812      	ldr	r2, [r2, #0]
 8004842:	4413      	add	r3, r2
 8004844:	ed93 7a00 	vldr	s14, [r3]
 8004848:	4b96      	ldr	r3, [pc, #600]	@ (8004aa4 <ETS+0x464>)
 800484a:	443b      	add	r3, r7
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 8004854:	f5a2 6256 	sub.w	r2, r2, #3424	@ 0xd60
 8004858:	6812      	ldr	r2, [r2, #0]
 800485a:	4413      	add	r3, r2
 800485c:	edd3 7a00 	vldr	s15, [r3]
 8004860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004864:	f64b 5368 	movw	r3, #48488	@ 0xbd68
 8004868:	443b      	add	r3, r7
 800486a:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 800486e:	4b8d      	ldr	r3, [pc, #564]	@ (8004aa4 <ETS+0x464>)
 8004870:	443b      	add	r3, r7
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f503 638b 	add.w	r3, r3, #1112	@ 0x458
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	edc3 7a00 	vstr	s15, [r3]
        mat_H[2][i] = mx[i]*mz[i];
 8004880:	4b88      	ldr	r3, [pc, #544]	@ (8004aa4 <ETS+0x464>)
 8004882:	443b      	add	r3, r7
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 800488c:	f6a2 525c 	subw	r2, r2, #3420	@ 0xd5c
 8004890:	6812      	ldr	r2, [r2, #0]
 8004892:	4413      	add	r3, r2
 8004894:	ed93 7a00 	vldr	s14, [r3]
 8004898:	4b82      	ldr	r3, [pc, #520]	@ (8004aa4 <ETS+0x464>)
 800489a:	443b      	add	r3, r7
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 80048a4:	f6a2 5264 	subw	r2, r2, #3428	@ 0xd64
 80048a8:	6812      	ldr	r2, [r2, #0]
 80048aa:	4413      	add	r3, r2
 80048ac:	edd3 7a00 	vldr	s15, [r3]
 80048b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b4:	f64b 5368 	movw	r3, #48488	@ 0xbd68
 80048b8:	443b      	add	r3, r7
 80048ba:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 80048be:	4b79      	ldr	r3, [pc, #484]	@ (8004aa4 <ETS+0x464>)
 80048c0:	443b      	add	r3, r7
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4413      	add	r3, r2
 80048cc:	edc3 7a00 	vstr	s15, [r3]
        mat_H[3][i] = my[i]*mz[i];
 80048d0:	4b74      	ldr	r3, [pc, #464]	@ (8004aa4 <ETS+0x464>)
 80048d2:	443b      	add	r3, r7
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 80048dc:	f5a2 6256 	sub.w	r2, r2, #3424	@ 0xd60
 80048e0:	6812      	ldr	r2, [r2, #0]
 80048e2:	4413      	add	r3, r2
 80048e4:	ed93 7a00 	vldr	s14, [r3]
 80048e8:	4b6e      	ldr	r3, [pc, #440]	@ (8004aa4 <ETS+0x464>)
 80048ea:	443b      	add	r3, r7
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 80048f4:	f6a2 5264 	subw	r2, r2, #3428	@ 0xd64
 80048f8:	6812      	ldr	r2, [r2, #0]
 80048fa:	4413      	add	r3, r2
 80048fc:	edd3 7a00 	vldr	s15, [r3]
 8004900:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004904:	f64b 5368 	movw	r3, #48488	@ 0xbd68
 8004908:	443b      	add	r3, r7
 800490a:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 800490e:	4b65      	ldr	r3, [pc, #404]	@ (8004aa4 <ETS+0x464>)
 8004910:	443b      	add	r3, r7
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f603 5308 	addw	r3, r3, #3336	@ 0xd08
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	edc3 7a00 	vstr	s15, [r3]
        mat_H[4][i] = mz[i]*mz[i];
 8004920:	4b60      	ldr	r3, [pc, #384]	@ (8004aa4 <ETS+0x464>)
 8004922:	443b      	add	r3, r7
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 800492c:	f6a2 5264 	subw	r2, r2, #3428	@ 0xd64
 8004930:	6812      	ldr	r2, [r2, #0]
 8004932:	4413      	add	r3, r2
 8004934:	ed93 7a00 	vldr	s14, [r3]
 8004938:	4b5a      	ldr	r3, [pc, #360]	@ (8004aa4 <ETS+0x464>)
 800493a:	443b      	add	r3, r7
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 8004944:	f6a2 5264 	subw	r2, r2, #3428	@ 0xd64
 8004948:	6812      	ldr	r2, [r2, #0]
 800494a:	4413      	add	r3, r2
 800494c:	edd3 7a00 	vldr	s15, [r3]
 8004950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004954:	f64b 5368 	movw	r3, #48488	@ 0xbd68
 8004958:	443b      	add	r3, r7
 800495a:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 800495e:	4b51      	ldr	r3, [pc, #324]	@ (8004aa4 <ETS+0x464>)
 8004960:	443b      	add	r3, r7
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f503 538b 	add.w	r3, r3, #4448	@ 0x1160
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	edc3 7a00 	vstr	s15, [r3]
        mat_H[5][i] = mx[i];
 8004970:	4b4c      	ldr	r3, [pc, #304]	@ (8004aa4 <ETS+0x464>)
 8004972:	443b      	add	r3, r7
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 800497c:	f6a2 525c 	subw	r2, r2, #3420	@ 0xd5c
 8004980:	6812      	ldr	r2, [r2, #0]
 8004982:	4413      	add	r3, r2
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	f64b 5368 	movw	r3, #48488	@ 0xbd68
 800498a:	443b      	add	r3, r7
 800498c:	f6a3 41e8 	subw	r1, r3, #3304	@ 0xce8
 8004990:	4b44      	ldr	r3, [pc, #272]	@ (8004aa4 <ETS+0x464>)
 8004992:	443b      	add	r3, r7
 8004994:	6818      	ldr	r0, [r3, #0]
 8004996:	f241 53b8 	movw	r3, #5560	@ 0x15b8
 800499a:	4403      	add	r3, r0
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	440b      	add	r3, r1
 80049a0:	601a      	str	r2, [r3, #0]
        mat_H[6][i] = my[i];
 80049a2:	4b40      	ldr	r3, [pc, #256]	@ (8004aa4 <ETS+0x464>)
 80049a4:	443b      	add	r3, r7
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 80049ae:	f5a2 6256 	sub.w	r2, r2, #3424	@ 0xd60
 80049b2:	6812      	ldr	r2, [r2, #0]
 80049b4:	4413      	add	r3, r2
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	f64b 5368 	movw	r3, #48488	@ 0xbd68
 80049bc:	443b      	add	r3, r7
 80049be:	f6a3 41e8 	subw	r1, r3, #3304	@ 0xce8
 80049c2:	4b38      	ldr	r3, [pc, #224]	@ (8004aa4 <ETS+0x464>)
 80049c4:	443b      	add	r3, r7
 80049c6:	6818      	ldr	r0, [r3, #0]
 80049c8:	f641 2310 	movw	r3, #6672	@ 0x1a10
 80049cc:	4403      	add	r3, r0
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	440b      	add	r3, r1
 80049d2:	601a      	str	r2, [r3, #0]
        mat_H[7][i] = mz[i];
 80049d4:	4b33      	ldr	r3, [pc, #204]	@ (8004aa4 <ETS+0x464>)
 80049d6:	443b      	add	r3, r7
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 80049e0:	f6a2 5264 	subw	r2, r2, #3428	@ 0xd64
 80049e4:	6812      	ldr	r2, [r2, #0]
 80049e6:	4413      	add	r3, r2
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	f64b 5368 	movw	r3, #48488	@ 0xbd68
 80049ee:	443b      	add	r3, r7
 80049f0:	f6a3 41e8 	subw	r1, r3, #3304	@ 0xce8
 80049f4:	4b2b      	ldr	r3, [pc, #172]	@ (8004aa4 <ETS+0x464>)
 80049f6:	443b      	add	r3, r7
 80049f8:	6818      	ldr	r0, [r3, #0]
 80049fa:	f641 6368 	movw	r3, #7784	@ 0x1e68
 80049fe:	4403      	add	r3, r0
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	440b      	add	r3, r1
 8004a04:	601a      	str	r2, [r3, #0]
        mat_H[8][i] = 1;
 8004a06:	f64b 5368 	movw	r3, #48488	@ 0xbd68
 8004a0a:	443b      	add	r3, r7
 8004a0c:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 8004a10:	4b24      	ldr	r3, [pc, #144]	@ (8004aa4 <ETS+0x464>)
 8004a12:	443b      	add	r3, r7
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f503 530b 	add.w	r3, r3, #8896	@ 0x22c0
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004a22:	601a      	str	r2, [r3, #0]
        my_2[i] = -(my[i]*my[i]);
 8004a24:	4b1f      	ldr	r3, [pc, #124]	@ (8004aa4 <ETS+0x464>)
 8004a26:	443b      	add	r3, r7
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 8004a30:	f5a2 6256 	sub.w	r2, r2, #3424	@ 0xd60
 8004a34:	6812      	ldr	r2, [r2, #0]
 8004a36:	4413      	add	r3, r2
 8004a38:	ed93 7a00 	vldr	s14, [r3]
 8004a3c:	4b19      	ldr	r3, [pc, #100]	@ (8004aa4 <ETS+0x464>)
 8004a3e:	443b      	add	r3, r7
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 8004a48:	f5a2 6256 	sub.w	r2, r2, #3424	@ 0xd60
 8004a4c:	6812      	ldr	r2, [r2, #0]
 8004a4e:	4413      	add	r3, r2
 8004a50:	edd3 7a00 	vldr	s15, [r3]
 8004a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a58:	eef1 7a67 	vneg.f32	s15, s15
 8004a5c:	f64a 5368 	movw	r3, #44392	@ 0xad68
 8004a60:	443b      	add	r3, r7
 8004a62:	f6a3 6248 	subw	r2, r3, #3656	@ 0xe48
 8004a66:	4b0f      	ldr	r3, [pc, #60]	@ (8004aa4 <ETS+0x464>)
 8004a68:	443b      	add	r3, r7
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	edc3 7a00 	vstr	s15, [r3]
    for(int i=0; i < tam; i++)
 8004a74:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa4 <ETS+0x464>)
 8004a76:	443b      	add	r3, r7
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	4a09      	ldr	r2, [pc, #36]	@ (8004aa4 <ETS+0x464>)
 8004a7e:	443a      	add	r2, r7
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	4b08      	ldr	r3, [pc, #32]	@ (8004aa4 <ETS+0x464>)
 8004a84:	443b      	add	r3, r7
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8004a8c:	f6ff aeaa 	blt.w	80047e4 <ETS+0x1a4>
    }

    //Multiplicação da matriz H por sua transposta
    for(int i=0; i < N; i++)
 8004a90:	2300      	movs	r3, #0
 8004a92:	4a05      	ldr	r2, [pc, #20]	@ (8004aa8 <ETS+0x468>)
 8004a94:	443a      	add	r2, r7
 8004a96:	6013      	str	r3, [r2, #0]
 8004a98:	e096      	b.n	8004bc8 <ETS+0x588>
    {
        for(int j=0; j < N; j++)
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	4a03      	ldr	r2, [pc, #12]	@ (8004aac <ETS+0x46c>)
 8004a9e:	443a      	add	r2, r7
 8004aa0:	6013      	str	r3, [r2, #0]
 8004aa2:	e084      	b.n	8004bae <ETS+0x56e>
 8004aa4:	00014d64 	.word	0x00014d64
 8004aa8:	00014d60 	.word	0x00014d60
 8004aac:	00014d5c 	.word	0x00014d5c
        {
            H_Ht[i][j] = 0;
 8004ab0:	f64a 5368 	movw	r3, #44392	@ 0xad68
 8004ab4:	443b      	add	r3, r7
 8004ab6:	f6a3 718c 	subw	r1, r3, #3980	@ 0xf8c
 8004aba:	4ba6      	ldr	r3, [pc, #664]	@ (8004d54 <ETS+0x714>)
 8004abc:	443b      	add	r3, r7
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	4413      	add	r3, r2
 8004ac6:	4aa4      	ldr	r2, [pc, #656]	@ (8004d58 <ETS+0x718>)
 8004ac8:	443a      	add	r2, r7
 8004aca:	6812      	ldr	r2, [r2, #0]
 8004acc:	4413      	add	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	440b      	add	r3, r1
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	601a      	str	r2, [r3, #0]
            for(int k = 0; k < tam; k++)
 8004ad8:	2300      	movs	r3, #0
 8004ada:	4aa0      	ldr	r2, [pc, #640]	@ (8004d5c <ETS+0x71c>)
 8004adc:	443a      	add	r2, r7
 8004ade:	6013      	str	r3, [r2, #0]
 8004ae0:	e058      	b.n	8004b94 <ETS+0x554>
            {
                H_Ht[i][j] += mat_H[i][k]*mat_H[j][k];
 8004ae2:	f64a 5368 	movw	r3, #44392	@ 0xad68
 8004ae6:	443b      	add	r3, r7
 8004ae8:	f6a3 718c 	subw	r1, r3, #3980	@ 0xf8c
 8004aec:	4b99      	ldr	r3, [pc, #612]	@ (8004d54 <ETS+0x714>)
 8004aee:	443b      	add	r3, r7
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	4613      	mov	r3, r2
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	4413      	add	r3, r2
 8004af8:	4a97      	ldr	r2, [pc, #604]	@ (8004d58 <ETS+0x718>)
 8004afa:	443a      	add	r2, r7
 8004afc:	6812      	ldr	r2, [r2, #0]
 8004afe:	4413      	add	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	440b      	add	r3, r1
 8004b04:	ed93 7a00 	vldr	s14, [r3]
 8004b08:	f64b 5368 	movw	r3, #48488	@ 0xbd68
 8004b0c:	443b      	add	r3, r7
 8004b0e:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 8004b12:	4b90      	ldr	r3, [pc, #576]	@ (8004d54 <ETS+0x714>)
 8004b14:	443b      	add	r3, r7
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f44f 618b 	mov.w	r1, #1112	@ 0x458
 8004b1c:	fb03 f101 	mul.w	r1, r3, r1
 8004b20:	4b8e      	ldr	r3, [pc, #568]	@ (8004d5c <ETS+0x71c>)
 8004b22:	443b      	add	r3, r7
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	440b      	add	r3, r1
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4413      	add	r3, r2
 8004b2c:	edd3 6a00 	vldr	s13, [r3]
 8004b30:	f64b 5368 	movw	r3, #48488	@ 0xbd68
 8004b34:	443b      	add	r3, r7
 8004b36:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 8004b3a:	4b87      	ldr	r3, [pc, #540]	@ (8004d58 <ETS+0x718>)
 8004b3c:	443b      	add	r3, r7
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f44f 618b 	mov.w	r1, #1112	@ 0x458
 8004b44:	fb03 f101 	mul.w	r1, r3, r1
 8004b48:	4b84      	ldr	r3, [pc, #528]	@ (8004d5c <ETS+0x71c>)
 8004b4a:	443b      	add	r3, r7
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	440b      	add	r3, r1
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	edd3 7a00 	vldr	s15, [r3]
 8004b58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b60:	f64a 5368 	movw	r3, #44392	@ 0xad68
 8004b64:	443b      	add	r3, r7
 8004b66:	f6a3 718c 	subw	r1, r3, #3980	@ 0xf8c
 8004b6a:	4b7a      	ldr	r3, [pc, #488]	@ (8004d54 <ETS+0x714>)
 8004b6c:	443b      	add	r3, r7
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	4613      	mov	r3, r2
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	4413      	add	r3, r2
 8004b76:	4a78      	ldr	r2, [pc, #480]	@ (8004d58 <ETS+0x718>)
 8004b78:	443a      	add	r2, r7
 8004b7a:	6812      	ldr	r2, [r2, #0]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	440b      	add	r3, r1
 8004b82:	edc3 7a00 	vstr	s15, [r3]
            for(int k = 0; k < tam; k++)
 8004b86:	4b75      	ldr	r3, [pc, #468]	@ (8004d5c <ETS+0x71c>)
 8004b88:	443b      	add	r3, r7
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	4a73      	ldr	r2, [pc, #460]	@ (8004d5c <ETS+0x71c>)
 8004b90:	443a      	add	r2, r7
 8004b92:	6013      	str	r3, [r2, #0]
 8004b94:	4b71      	ldr	r3, [pc, #452]	@ (8004d5c <ETS+0x71c>)
 8004b96:	443b      	add	r3, r7
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8004b9e:	dba0      	blt.n	8004ae2 <ETS+0x4a2>
        for(int j=0; j < N; j++)
 8004ba0:	4b6d      	ldr	r3, [pc, #436]	@ (8004d58 <ETS+0x718>)
 8004ba2:	443b      	add	r3, r7
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	4a6b      	ldr	r2, [pc, #428]	@ (8004d58 <ETS+0x718>)
 8004baa:	443a      	add	r2, r7
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	4b6a      	ldr	r3, [pc, #424]	@ (8004d58 <ETS+0x718>)
 8004bb0:	443b      	add	r3, r7
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	f77f af7b 	ble.w	8004ab0 <ETS+0x470>
    for(int i=0; i < N; i++)
 8004bba:	4b66      	ldr	r3, [pc, #408]	@ (8004d54 <ETS+0x714>)
 8004bbc:	443b      	add	r3, r7
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	4a64      	ldr	r2, [pc, #400]	@ (8004d54 <ETS+0x714>)
 8004bc4:	443a      	add	r2, r7
 8004bc6:	6013      	str	r3, [r2, #0]
 8004bc8:	4b62      	ldr	r3, [pc, #392]	@ (8004d54 <ETS+0x714>)
 8004bca:	443b      	add	r3, r7
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2b08      	cmp	r3, #8
 8004bd0:	f77f af63 	ble.w	8004a9a <ETS+0x45a>
            }
        }
    }

    inverter_matriz(H_Ht, inv);
 8004bd4:	4a62      	ldr	r2, [pc, #392]	@ (8004d60 <ETS+0x720>)
 8004bd6:	4b63      	ldr	r3, [pc, #396]	@ (8004d64 <ETS+0x724>)
 8004bd8:	4413      	add	r3, r2
 8004bda:	19da      	adds	r2, r3, r7
 8004bdc:	4b62      	ldr	r3, [pc, #392]	@ (8004d68 <ETS+0x728>)
 8004bde:	f503 33a6 	add.w	r3, r3, #84992	@ 0x14c00
 8004be2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004be6:	443b      	add	r3, r7
 8004be8:	4611      	mov	r1, r2
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fc fa1a 	bl	8001024 <inverter_matriz>

    //Multiplica a inversa por H transposta
    for(int i=0; i < N; i++)
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	4a5e      	ldr	r2, [pc, #376]	@ (8004d6c <ETS+0x72c>)
 8004bf4:	443a      	add	r2, r7
 8004bf6:	6013      	str	r3, [r2, #0]
 8004bf8:	e08f      	b.n	8004d1a <ETS+0x6da>
    {
        for(int j=0; j < tam; j++)
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	4a5c      	ldr	r2, [pc, #368]	@ (8004d70 <ETS+0x730>)
 8004bfe:	443a      	add	r2, r7
 8004c00:	6013      	str	r3, [r2, #0]
 8004c02:	e07c      	b.n	8004cfe <ETS+0x6be>
        {
            mul_mat[i][j] = 0;
 8004c04:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8004c08:	f5a3 6253 	sub.w	r2, r3, #3376	@ 0xd30
 8004c0c:	4b57      	ldr	r3, [pc, #348]	@ (8004d6c <ETS+0x72c>)
 8004c0e:	443b      	add	r3, r7
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f44f 618b 	mov.w	r1, #1112	@ 0x458
 8004c16:	fb03 f101 	mul.w	r1, r3, r1
 8004c1a:	4b55      	ldr	r3, [pc, #340]	@ (8004d70 <ETS+0x730>)
 8004c1c:	443b      	add	r3, r7
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	440b      	add	r3, r1
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	f04f 0200 	mov.w	r2, #0
 8004c2a:	601a      	str	r2, [r3, #0]
            for(int k=0; k < N; k++)
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	4a51      	ldr	r2, [pc, #324]	@ (8004d74 <ETS+0x734>)
 8004c30:	443a      	add	r2, r7
 8004c32:	6013      	str	r3, [r2, #0]
 8004c34:	e057      	b.n	8004ce6 <ETS+0x6a6>
            {
                mul_mat[i][j] += inv[i][k]*mat_H[k][j];
 8004c36:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8004c3a:	f5a3 6253 	sub.w	r2, r3, #3376	@ 0xd30
 8004c3e:	4b4b      	ldr	r3, [pc, #300]	@ (8004d6c <ETS+0x72c>)
 8004c40:	443b      	add	r3, r7
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f44f 618b 	mov.w	r1, #1112	@ 0x458
 8004c48:	fb03 f101 	mul.w	r1, r3, r1
 8004c4c:	4b48      	ldr	r3, [pc, #288]	@ (8004d70 <ETS+0x730>)
 8004c4e:	443b      	add	r3, r7
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	440b      	add	r3, r1
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	ed93 7a00 	vldr	s14, [r3]
 8004c5c:	f649 5368 	movw	r3, #40296	@ 0x9d68
 8004c60:	443b      	add	r3, r7
 8004c62:	4619      	mov	r1, r3
 8004c64:	4b41      	ldr	r3, [pc, #260]	@ (8004d6c <ETS+0x72c>)
 8004c66:	443b      	add	r3, r7
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	4413      	add	r3, r2
 8004c70:	4a40      	ldr	r2, [pc, #256]	@ (8004d74 <ETS+0x734>)
 8004c72:	443a      	add	r2, r7
 8004c74:	6812      	ldr	r2, [r2, #0]
 8004c76:	4413      	add	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	440b      	add	r3, r1
 8004c7c:	3bd0      	subs	r3, #208	@ 0xd0
 8004c7e:	edd3 6a00 	vldr	s13, [r3]
 8004c82:	f64b 5368 	movw	r3, #48488	@ 0xbd68
 8004c86:	443b      	add	r3, r7
 8004c88:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 8004c8c:	4b39      	ldr	r3, [pc, #228]	@ (8004d74 <ETS+0x734>)
 8004c8e:	443b      	add	r3, r7
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f44f 618b 	mov.w	r1, #1112	@ 0x458
 8004c96:	fb03 f101 	mul.w	r1, r3, r1
 8004c9a:	4b35      	ldr	r3, [pc, #212]	@ (8004d70 <ETS+0x730>)
 8004c9c:	443b      	add	r3, r7
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	440b      	add	r3, r1
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	edd3 7a00 	vldr	s15, [r3]
 8004caa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cb2:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8004cb6:	f5a3 6253 	sub.w	r2, r3, #3376	@ 0xd30
 8004cba:	4b2c      	ldr	r3, [pc, #176]	@ (8004d6c <ETS+0x72c>)
 8004cbc:	443b      	add	r3, r7
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f44f 618b 	mov.w	r1, #1112	@ 0x458
 8004cc4:	fb03 f101 	mul.w	r1, r3, r1
 8004cc8:	4b29      	ldr	r3, [pc, #164]	@ (8004d70 <ETS+0x730>)
 8004cca:	443b      	add	r3, r7
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	440b      	add	r3, r1
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	edc3 7a00 	vstr	s15, [r3]
            for(int k=0; k < N; k++)
 8004cd8:	4b26      	ldr	r3, [pc, #152]	@ (8004d74 <ETS+0x734>)
 8004cda:	443b      	add	r3, r7
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	4a24      	ldr	r2, [pc, #144]	@ (8004d74 <ETS+0x734>)
 8004ce2:	443a      	add	r2, r7
 8004ce4:	6013      	str	r3, [r2, #0]
 8004ce6:	4b23      	ldr	r3, [pc, #140]	@ (8004d74 <ETS+0x734>)
 8004ce8:	443b      	add	r3, r7
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	dda2      	ble.n	8004c36 <ETS+0x5f6>
        for(int j=0; j < tam; j++)
 8004cf0:	4b1f      	ldr	r3, [pc, #124]	@ (8004d70 <ETS+0x730>)
 8004cf2:	443b      	add	r3, r7
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8004d70 <ETS+0x730>)
 8004cfa:	443a      	add	r2, r7
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8004d70 <ETS+0x730>)
 8004d00:	443b      	add	r3, r7
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8004d08:	f6ff af7c 	blt.w	8004c04 <ETS+0x5c4>
    for(int i=0; i < N; i++)
 8004d0c:	4b17      	ldr	r3, [pc, #92]	@ (8004d6c <ETS+0x72c>)
 8004d0e:	443b      	add	r3, r7
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	3301      	adds	r3, #1
 8004d14:	4a15      	ldr	r2, [pc, #84]	@ (8004d6c <ETS+0x72c>)
 8004d16:	443a      	add	r2, r7
 8004d18:	6013      	str	r3, [r2, #0]
 8004d1a:	4b14      	ldr	r3, [pc, #80]	@ (8004d6c <ETS+0x72c>)
 8004d1c:	443b      	add	r3, r7
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	f77f af6a 	ble.w	8004bfa <ETS+0x5ba>
            }
        }
    }

    //Resultado da psedo-inversa
    for(int i=0; i < N; i++)
 8004d26:	2300      	movs	r3, #0
 8004d28:	4a13      	ldr	r2, [pc, #76]	@ (8004d78 <ETS+0x738>)
 8004d2a:	443a      	add	r2, r7
 8004d2c:	6013      	str	r3, [r2, #0]
 8004d2e:	e074      	b.n	8004e1a <ETS+0x7da>
    {
        X[i] = 0;
 8004d30:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8004d34:	f6a3 5254 	subw	r2, r3, #3412	@ 0xd54
 8004d38:	4b0f      	ldr	r3, [pc, #60]	@ (8004d78 <ETS+0x738>)
 8004d3a:	443b      	add	r3, r7
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	f04f 0200 	mov.w	r2, #0
 8004d46:	601a      	str	r2, [r3, #0]
        for(int j=0; j < tam; j++)
 8004d48:	2300      	movs	r3, #0
 8004d4a:	4a0c      	ldr	r2, [pc, #48]	@ (8004d7c <ETS+0x73c>)
 8004d4c:	443a      	add	r2, r7
 8004d4e:	6013      	str	r3, [r2, #0]
 8004d50:	e056      	b.n	8004e00 <ETS+0x7c0>
 8004d52:	bf00      	nop
 8004d54:	00014d60 	.word	0x00014d60
 8004d58:	00014d5c 	.word	0x00014d5c
 8004d5c:	00014d58 	.word	0x00014d58
 8004d60:	ffff4f30 	.word	0xffff4f30
 8004d64:	00014d68 	.word	0x00014d68
 8004d68:	ffff5074 	.word	0xffff5074
 8004d6c:	00014d54 	.word	0x00014d54
 8004d70:	00014d50 	.word	0x00014d50
 8004d74:	00014d4c 	.word	0x00014d4c
 8004d78:	00014d48 	.word	0x00014d48
 8004d7c:	00014d44 	.word	0x00014d44
        {
            X[i] += mul_mat[i][j]*my_2[j];
 8004d80:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8004d84:	f6a3 5254 	subw	r2, r3, #3412	@ 0xd54
 8004d88:	4bdc      	ldr	r3, [pc, #880]	@ (80050fc <ETS+0xabc>)
 8004d8a:	443b      	add	r3, r7
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	ed93 7a00 	vldr	s14, [r3]
 8004d96:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8004d9a:	f5a3 6253 	sub.w	r2, r3, #3376	@ 0xd30
 8004d9e:	4bd7      	ldr	r3, [pc, #860]	@ (80050fc <ETS+0xabc>)
 8004da0:	443b      	add	r3, r7
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f44f 618b 	mov.w	r1, #1112	@ 0x458
 8004da8:	fb03 f101 	mul.w	r1, r3, r1
 8004dac:	4bd4      	ldr	r3, [pc, #848]	@ (8005100 <ETS+0xac0>)
 8004dae:	443b      	add	r3, r7
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	440b      	add	r3, r1
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4413      	add	r3, r2
 8004db8:	edd3 6a00 	vldr	s13, [r3]
 8004dbc:	f64a 5368 	movw	r3, #44392	@ 0xad68
 8004dc0:	443b      	add	r3, r7
 8004dc2:	f6a3 6248 	subw	r2, r3, #3656	@ 0xe48
 8004dc6:	4bce      	ldr	r3, [pc, #824]	@ (8005100 <ETS+0xac0>)
 8004dc8:	443b      	add	r3, r7
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	edd3 7a00 	vldr	s15, [r3]
 8004dd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004dd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ddc:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8004de0:	f6a3 5254 	subw	r2, r3, #3412	@ 0xd54
 8004de4:	4bc5      	ldr	r3, [pc, #788]	@ (80050fc <ETS+0xabc>)
 8004de6:	443b      	add	r3, r7
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	edc3 7a00 	vstr	s15, [r3]
        for(int j=0; j < tam; j++)
 8004df2:	4bc3      	ldr	r3, [pc, #780]	@ (8005100 <ETS+0xac0>)
 8004df4:	443b      	add	r3, r7
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	4ac1      	ldr	r2, [pc, #772]	@ (8005100 <ETS+0xac0>)
 8004dfc:	443a      	add	r2, r7
 8004dfe:	6013      	str	r3, [r2, #0]
 8004e00:	4bbf      	ldr	r3, [pc, #764]	@ (8005100 <ETS+0xac0>)
 8004e02:	443b      	add	r3, r7
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8004e0a:	dbb9      	blt.n	8004d80 <ETS+0x740>
    for(int i=0; i < N; i++)
 8004e0c:	4bbb      	ldr	r3, [pc, #748]	@ (80050fc <ETS+0xabc>)
 8004e0e:	443b      	add	r3, r7
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	3301      	adds	r3, #1
 8004e14:	4ab9      	ldr	r2, [pc, #740]	@ (80050fc <ETS+0xabc>)
 8004e16:	443a      	add	r2, r7
 8004e18:	6013      	str	r3, [r2, #0]
 8004e1a:	4bb8      	ldr	r3, [pc, #736]	@ (80050fc <ETS+0xabc>)
 8004e1c:	443b      	add	r3, r7
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b08      	cmp	r3, #8
 8004e22:	dd85      	ble.n	8004d30 <ETS+0x6f0>
        }
    }


    // Segundo passo, encontrando os parâmetros
    X1_2 = X[1]*X[1];
 8004e24:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8004e28:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8004e2c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004e30:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8004e34:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8004e38:	edd3 7a01 	vldr	s15, [r3, #4]
 8004e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e40:	4bb0      	ldr	r3, [pc, #704]	@ (8005104 <ETS+0xac4>)
 8004e42:	443b      	add	r3, r7
 8004e44:	edc3 7a00 	vstr	s15, [r3]
    X2_2 = X[2]*X[2];
 8004e48:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8004e4c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8004e50:	ed93 7a02 	vldr	s14, [r3, #8]
 8004e54:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8004e58:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8004e5c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e64:	4ba8      	ldr	r3, [pc, #672]	@ (8005108 <ETS+0xac8>)
 8004e66:	443b      	add	r3, r7
 8004e68:	edc3 7a00 	vstr	s15, [r3]
    X3_2 = X[3]*X[3];
 8004e6c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8004e70:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8004e74:	ed93 7a03 	vldr	s14, [r3, #12]
 8004e78:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8004e7c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8004e80:	edd3 7a03 	vldr	s15, [r3, #12]
 8004e84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e88:	4ba0      	ldr	r3, [pc, #640]	@ (800510c <ETS+0xacc>)
 8004e8a:	443b      	add	r3, r7
 8004e8c:	edc3 7a00 	vstr	s15, [r3]
    X4_2 = X[4]*X[4];
 8004e90:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8004e94:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8004e98:	ed93 7a04 	vldr	s14, [r3, #16]
 8004e9c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8004ea0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8004ea4:	edd3 7a04 	vldr	s15, [r3, #16]
 8004ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eac:	4b98      	ldr	r3, [pc, #608]	@ (8005110 <ETS+0xad0>)
 8004eae:	443b      	add	r3, r7
 8004eb0:	edc3 7a00 	vstr	s15, [r3]
    X5_2 = X[5]*X[5];
 8004eb4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8004eb8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8004ebc:	ed93 7a05 	vldr	s14, [r3, #20]
 8004ec0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8004ec4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8004ec8:	edd3 7a05 	vldr	s15, [r3, #20]
 8004ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ed0:	4b90      	ldr	r3, [pc, #576]	@ (8005114 <ETS+0xad4>)
 8004ed2:	443b      	add	r3, r7
 8004ed4:	edc3 7a00 	vstr	s15, [r3]
    X6_2 = X[6]*X[6];
 8004ed8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8004edc:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8004ee0:	ed93 7a06 	vldr	s14, [r3, #24]
 8004ee4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8004ee8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8004eec:	edd3 7a06 	vldr	s15, [r3, #24]
 8004ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ef4:	4b88      	ldr	r3, [pc, #544]	@ (8005118 <ETS+0xad8>)
 8004ef6:	443b      	add	r3, r7
 8004ef8:	edc3 7a00 	vstr	s15, [r3]
    X7_2 = X[7]*X[7];
 8004efc:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8004f00:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8004f04:	ed93 7a07 	vldr	s14, [r3, #28]
 8004f08:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8004f0c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8004f10:	edd3 7a07 	vldr	s15, [r3, #28]
 8004f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f18:	4b80      	ldr	r3, [pc, #512]	@ (800511c <ETS+0xadc>)
 8004f1a:	443b      	add	r3, r7
 8004f1c:	edc3 7a00 	vstr	s15, [r3]

    psi7 = 2*(X[4]*X1_2 - X[1]*X[2]*X[3] + X2_2 + X[0]*X3_2 - 4*X[0]*X[4]);
 8004f20:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8004f24:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8004f28:	ed93 7a04 	vldr	s14, [r3, #16]
 8004f2c:	4b75      	ldr	r3, [pc, #468]	@ (8005104 <ETS+0xac4>)
 8004f2e:	443b      	add	r3, r7
 8004f30:	edd3 7a00 	vldr	s15, [r3]
 8004f34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004f38:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8004f3c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8004f40:	edd3 6a01 	vldr	s13, [r3, #4]
 8004f44:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8004f48:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8004f4c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004f50:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004f54:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8004f58:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8004f5c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004f60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004f68:	4b67      	ldr	r3, [pc, #412]	@ (8005108 <ETS+0xac8>)
 8004f6a:	443b      	add	r3, r7
 8004f6c:	edd3 7a00 	vldr	s15, [r3]
 8004f70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004f74:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8004f78:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8004f7c:	edd3 6a00 	vldr	s13, [r3]
 8004f80:	4b62      	ldr	r3, [pc, #392]	@ (800510c <ETS+0xacc>)
 8004f82:	443b      	add	r3, r7
 8004f84:	edd3 7a00 	vldr	s15, [r3]
 8004f88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004f90:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8004f94:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8004f98:	edd3 7a00 	vldr	s15, [r3]
 8004f9c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8004fa0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004fa4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8004fa8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8004fac:	edd3 7a04 	vldr	s15, [r3, #16]
 8004fb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fb8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004fbc:	4b58      	ldr	r3, [pc, #352]	@ (8005120 <ETS+0xae0>)
 8004fbe:	443b      	add	r3, r7
 8004fc0:	edc3 7a00 	vstr	s15, [r3]
    bx = -(X3_2 * X[5] + 2*X[2]*X[7] - 4*X[4]*X[5] - X[1]*X[3]*X[7] + 2*X[1]*X[4]*X[6] - X[2]*X[3]*X[6]) / psi7;
 8004fc4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8004fc8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8004fcc:	ed93 7a05 	vldr	s14, [r3, #20]
 8004fd0:	4b4e      	ldr	r3, [pc, #312]	@ (800510c <ETS+0xacc>)
 8004fd2:	443b      	add	r3, r7
 8004fd4:	edd3 7a00 	vldr	s15, [r3]
 8004fd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004fdc:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8004fe0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8004fe4:	edd3 7a02 	vldr	s15, [r3, #8]
 8004fe8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004fec:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8004ff0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8004ff4:	edd3 7a07 	vldr	s15, [r3, #28]
 8004ff8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ffc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005000:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005004:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005008:	edd3 7a04 	vldr	s15, [r3, #16]
 800500c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005010:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005014:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005018:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800501c:	edd3 7a05 	vldr	s15, [r3, #20]
 8005020:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005024:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005028:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800502c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005030:	edd3 6a01 	vldr	s13, [r3, #4]
 8005034:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005038:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800503c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005040:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005044:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005048:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800504c:	edd3 7a07 	vldr	s15, [r3, #28]
 8005050:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005054:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005058:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800505c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005060:	edd3 7a01 	vldr	s15, [r3, #4]
 8005064:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005068:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800506c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005070:	edd3 7a04 	vldr	s15, [r3, #16]
 8005074:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005078:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800507c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005080:	edd3 7a06 	vldr	s15, [r3, #24]
 8005084:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005088:	ee37 7a27 	vadd.f32	s14, s14, s15
 800508c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005090:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005094:	edd3 6a02 	vldr	s13, [r3, #8]
 8005098:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800509c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80050a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80050a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80050a8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80050ac:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80050b0:	edd3 7a06 	vldr	s15, [r3, #24]
 80050b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050bc:	eef1 6a67 	vneg.f32	s13, s15
 80050c0:	4b17      	ldr	r3, [pc, #92]	@ (8005120 <ETS+0xae0>)
 80050c2:	443b      	add	r3, r7
 80050c4:	ed93 7a00 	vldr	s14, [r3]
 80050c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050cc:	4b15      	ldr	r3, [pc, #84]	@ (8005124 <ETS+0xae4>)
 80050ce:	443b      	add	r3, r7
 80050d0:	edc3 7a00 	vstr	s15, [r3]
    by = -(X2_2 * X[6] + 2*X[0]*X[3]*X[7] - 4*X[0]*X[4]*X[6] - X[1]*X[2]*X[7] + 2*X[1]*X[4]*X[5] - X[2]*X[3]*X[5]) / psi7;
 80050d4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80050d8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80050dc:	ed93 7a06 	vldr	s14, [r3, #24]
 80050e0:	4b09      	ldr	r3, [pc, #36]	@ (8005108 <ETS+0xac8>)
 80050e2:	443b      	add	r3, r7
 80050e4:	edd3 7a00 	vldr	s15, [r3]
 80050e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80050ec:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80050f0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80050f4:	edd3 7a00 	vldr	s15, [r3]
 80050f8:	e016      	b.n	8005128 <ETS+0xae8>
 80050fa:	bf00      	nop
 80050fc:	00014d48 	.word	0x00014d48
 8005100:	00014d44 	.word	0x00014d44
 8005104:	00014cf8 	.word	0x00014cf8
 8005108:	00014cf4 	.word	0x00014cf4
 800510c:	00014cf0 	.word	0x00014cf0
 8005110:	00014cec 	.word	0x00014cec
 8005114:	00014ce8 	.word	0x00014ce8
 8005118:	00014ce4 	.word	0x00014ce4
 800511c:	00014ce0 	.word	0x00014ce0
 8005120:	00014d40 	.word	0x00014d40
 8005124:	00014d1c 	.word	0x00014d1c
 8005128:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800512c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005130:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005134:	edd3 7a03 	vldr	s15, [r3, #12]
 8005138:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800513c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005140:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005144:	edd3 7a07 	vldr	s15, [r3, #28]
 8005148:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800514c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005150:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005154:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005158:	edd3 7a00 	vldr	s15, [r3]
 800515c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005160:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005164:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005168:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800516c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005170:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005174:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005178:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800517c:	edd3 7a06 	vldr	s15, [r3, #24]
 8005180:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005184:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005188:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800518c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005190:	edd3 6a01 	vldr	s13, [r3, #4]
 8005194:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005198:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800519c:	edd3 7a02 	vldr	s15, [r3, #8]
 80051a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80051a4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80051a8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80051ac:	edd3 7a07 	vldr	s15, [r3, #28]
 80051b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80051b8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80051bc:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80051c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80051c4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80051c8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80051cc:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80051d0:	edd3 7a04 	vldr	s15, [r3, #16]
 80051d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80051d8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80051dc:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80051e0:	edd3 7a05 	vldr	s15, [r3, #20]
 80051e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80051ec:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80051f0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80051f4:	edd3 6a02 	vldr	s13, [r3, #8]
 80051f8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80051fc:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005200:	edd3 7a03 	vldr	s15, [r3, #12]
 8005204:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005208:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800520c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005210:	edd3 7a05 	vldr	s15, [r3, #20]
 8005214:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800521c:	eef1 6a67 	vneg.f32	s13, s15
 8005220:	4bef      	ldr	r3, [pc, #956]	@ (80055e0 <ETS+0xfa0>)
 8005222:	443b      	add	r3, r7
 8005224:	ed93 7a00 	vldr	s14, [r3]
 8005228:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800522c:	4bed      	ldr	r3, [pc, #948]	@ (80055e4 <ETS+0xfa4>)
 800522e:	443b      	add	r3, r7
 8005230:	edc3 7a00 	vstr	s15, [r3]
    bz = -(X1_2*X[7] - 4*X[0]*X[7] + 2*X[2]*X[5] + 2*X[0]*X[3]*X[6] - X[1]*X[2]*X[6] - X[1]*X[3]*X[5]) / psi7;
 8005234:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005238:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800523c:	ed93 7a07 	vldr	s14, [r3, #28]
 8005240:	4be9      	ldr	r3, [pc, #932]	@ (80055e8 <ETS+0xfa8>)
 8005242:	443b      	add	r3, r7
 8005244:	edd3 7a00 	vldr	s15, [r3]
 8005248:	ee27 7a27 	vmul.f32	s14, s14, s15
 800524c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005250:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005254:	edd3 7a00 	vldr	s15, [r3]
 8005258:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800525c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005260:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005264:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005268:	edd3 7a07 	vldr	s15, [r3, #28]
 800526c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005270:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005274:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005278:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800527c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005280:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005284:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005288:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800528c:	edd3 7a05 	vldr	s15, [r3, #20]
 8005290:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005294:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005298:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800529c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80052a0:	edd3 7a00 	vldr	s15, [r3]
 80052a4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80052a8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80052ac:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80052b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80052b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80052b8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80052bc:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80052c0:	edd3 7a06 	vldr	s15, [r3, #24]
 80052c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80052cc:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80052d0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80052d4:	edd3 6a01 	vldr	s13, [r3, #4]
 80052d8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80052dc:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80052e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80052e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80052e8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80052ec:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80052f0:	edd3 7a06 	vldr	s15, [r3, #24]
 80052f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80052fc:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005300:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005304:	edd3 6a01 	vldr	s13, [r3, #4]
 8005308:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800530c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005310:	edd3 7a03 	vldr	s15, [r3, #12]
 8005314:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005318:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800531c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005320:	edd3 7a05 	vldr	s15, [r3, #20]
 8005324:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005328:	ee77 7a67 	vsub.f32	s15, s14, s15
 800532c:	eef1 6a67 	vneg.f32	s13, s15
 8005330:	4bab      	ldr	r3, [pc, #684]	@ (80055e0 <ETS+0xfa0>)
 8005332:	443b      	add	r3, r7
 8005334:	ed93 7a00 	vldr	s14, [r3]
 8005338:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800533c:	4bab      	ldr	r3, [pc, #684]	@ (80055ec <ETS+0xfac>)
 800533e:	443b      	add	r3, r7
 8005340:	edc3 7a00 	vstr	s15, [r3]

    psi8 = -X1_2*X7_2 + 4*X[4]*X[8]*X1_2 - 4*X[8]*X[1]*X[2]*X[3] + 2*X[1]*X[2]*X[6]*X[7] + 2*X[1]*X[3]*X[5]*X[7] - 4*X[4]*X[1]*X[5]*X[6] - X2_2*X6_2 + 4*X[8]*X2_2 + 2*X[2]*X[3]*X[5]*X[6] - 4*X[2]*X[5]*X[7] - X3_2*X5_2 + 4*X[0]*X[8]*X3_2 + 4*X[4]*X5_2 + 4*X[0]*X[4]*X6_2 + 4*X[0]*X7_2 - 16*X[0]*X[4]*X[8] - 4*X[0]*X[3]*X[6]*X[7];
 8005344:	4ba8      	ldr	r3, [pc, #672]	@ (80055e8 <ETS+0xfa8>)
 8005346:	443b      	add	r3, r7
 8005348:	edd3 7a00 	vldr	s15, [r3]
 800534c:	eeb1 7a67 	vneg.f32	s14, s15
 8005350:	4ba7      	ldr	r3, [pc, #668]	@ (80055f0 <ETS+0xfb0>)
 8005352:	443b      	add	r3, r7
 8005354:	edd3 7a00 	vldr	s15, [r3]
 8005358:	ee27 7a27 	vmul.f32	s14, s14, s15
 800535c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005360:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005364:	edd3 7a04 	vldr	s15, [r3, #16]
 8005368:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800536c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005370:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005374:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005378:	edd3 7a08 	vldr	s15, [r3, #32]
 800537c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005380:	4b99      	ldr	r3, [pc, #612]	@ (80055e8 <ETS+0xfa8>)
 8005382:	443b      	add	r3, r7
 8005384:	edd3 7a00 	vldr	s15, [r3]
 8005388:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800538c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005390:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005394:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005398:	edd3 7a08 	vldr	s15, [r3, #32]
 800539c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80053a0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80053a4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80053a8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80053ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80053b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80053b4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80053b8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80053bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80053c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80053c4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80053c8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80053cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80053d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80053d8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80053dc:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80053e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80053e4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80053e8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80053ec:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80053f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80053f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80053f8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80053fc:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005400:	edd3 7a06 	vldr	s15, [r3, #24]
 8005404:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005408:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800540c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005410:	edd3 7a07 	vldr	s15, [r3, #28]
 8005414:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005418:	ee37 7a27 	vadd.f32	s14, s14, s15
 800541c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005420:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005424:	edd3 7a01 	vldr	s15, [r3, #4]
 8005428:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800542c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005430:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005434:	edd3 7a03 	vldr	s15, [r3, #12]
 8005438:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800543c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005440:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005444:	edd3 7a05 	vldr	s15, [r3, #20]
 8005448:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800544c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005450:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005454:	edd3 7a07 	vldr	s15, [r3, #28]
 8005458:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800545c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005460:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005464:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005468:	edd3 7a04 	vldr	s15, [r3, #16]
 800546c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005470:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005474:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005478:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800547c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005480:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005484:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005488:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800548c:	edd3 7a05 	vldr	s15, [r3, #20]
 8005490:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005494:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005498:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800549c:	edd3 7a06 	vldr	s15, [r3, #24]
 80054a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80054a8:	4b52      	ldr	r3, [pc, #328]	@ (80055f4 <ETS+0xfb4>)
 80054aa:	443b      	add	r3, r7
 80054ac:	edd3 6a00 	vldr	s13, [r3]
 80054b0:	4b51      	ldr	r3, [pc, #324]	@ (80055f8 <ETS+0xfb8>)
 80054b2:	443b      	add	r3, r7
 80054b4:	edd3 7a00 	vldr	s15, [r3]
 80054b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80054c0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80054c4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80054c8:	edd3 7a08 	vldr	s15, [r3, #32]
 80054cc:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80054d0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80054d4:	4b47      	ldr	r3, [pc, #284]	@ (80055f4 <ETS+0xfb4>)
 80054d6:	443b      	add	r3, r7
 80054d8:	edd3 7a00 	vldr	s15, [r3]
 80054dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80054e4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80054e8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80054ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80054f0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80054f4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80054f8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80054fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8005500:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005504:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005508:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800550c:	edd3 7a05 	vldr	s15, [r3, #20]
 8005510:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005514:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005518:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800551c:	edd3 7a06 	vldr	s15, [r3, #24]
 8005520:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005524:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005528:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800552c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005530:	edd3 7a02 	vldr	s15, [r3, #8]
 8005534:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005538:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800553c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005540:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005544:	edd3 7a05 	vldr	s15, [r3, #20]
 8005548:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800554c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005550:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005554:	edd3 7a07 	vldr	s15, [r3, #28]
 8005558:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800555c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005560:	4b26      	ldr	r3, [pc, #152]	@ (80055fc <ETS+0xfbc>)
 8005562:	443b      	add	r3, r7
 8005564:	edd3 6a00 	vldr	s13, [r3]
 8005568:	4b25      	ldr	r3, [pc, #148]	@ (8005600 <ETS+0xfc0>)
 800556a:	443b      	add	r3, r7
 800556c:	edd3 7a00 	vldr	s15, [r3]
 8005570:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005574:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005578:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800557c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005580:	edd3 7a00 	vldr	s15, [r3]
 8005584:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005588:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800558c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005590:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005594:	edd3 7a08 	vldr	s15, [r3, #32]
 8005598:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800559c:	4b17      	ldr	r3, [pc, #92]	@ (80055fc <ETS+0xfbc>)
 800559e:	443b      	add	r3, r7
 80055a0:	edd3 7a00 	vldr	s15, [r3]
 80055a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055ac:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80055b0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80055b4:	edd3 7a04 	vldr	s15, [r3, #16]
 80055b8:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80055bc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80055c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005600 <ETS+0xfc0>)
 80055c2:	443b      	add	r3, r7
 80055c4:	edd3 7a00 	vldr	s15, [r3]
 80055c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055d0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80055d4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80055d8:	edd3 7a00 	vldr	s15, [r3]
 80055dc:	e012      	b.n	8005604 <ETS+0xfc4>
 80055de:	bf00      	nop
 80055e0:	00014d40 	.word	0x00014d40
 80055e4:	00014d18 	.word	0x00014d18
 80055e8:	00014cf8 	.word	0x00014cf8
 80055ec:	00014d14 	.word	0x00014d14
 80055f0:	00014ce0 	.word	0x00014ce0
 80055f4:	00014cf4 	.word	0x00014cf4
 80055f8:	00014ce4 	.word	0x00014ce4
 80055fc:	00014cf0 	.word	0x00014cf0
 8005600:	00014ce8 	.word	0x00014ce8
 8005604:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005608:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800560c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005610:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005614:	edd3 7a04 	vldr	s15, [r3, #16]
 8005618:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800561c:	4be5      	ldr	r3, [pc, #916]	@ (80059b4 <ETS+0x1374>)
 800561e:	443b      	add	r3, r7
 8005620:	edd3 7a00 	vldr	s15, [r3]
 8005624:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005628:	ee37 7a27 	vadd.f32	s14, s14, s15
 800562c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005630:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005634:	edd3 7a00 	vldr	s15, [r3]
 8005638:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800563c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005640:	4bdd      	ldr	r3, [pc, #884]	@ (80059b8 <ETS+0x1378>)
 8005642:	443b      	add	r3, r7
 8005644:	edd3 7a00 	vldr	s15, [r3]
 8005648:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800564c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005650:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005654:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005658:	edd3 7a00 	vldr	s15, [r3]
 800565c:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8005660:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005664:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005668:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800566c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005670:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005674:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005678:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800567c:	edd3 7a08 	vldr	s15, [r3, #32]
 8005680:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005684:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005688:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800568c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005690:	edd3 7a00 	vldr	s15, [r3]
 8005694:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005698:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800569c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80056a0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80056a4:	edd3 7a03 	vldr	s15, [r3, #12]
 80056a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80056ac:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80056b0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80056b4:	edd3 7a06 	vldr	s15, [r3, #24]
 80056b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80056bc:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80056c0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80056c4:	edd3 7a07 	vldr	s15, [r3, #28]
 80056c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056d0:	4bba      	ldr	r3, [pc, #744]	@ (80059bc <ETS+0x137c>)
 80056d2:	443b      	add	r3, r7
 80056d4:	edc3 7a00 	vstr	s15, [r3]

    divs =  2 * fabsf(X[4])*fabsf(X[4])*fabsf(X[4]) * (X[4] * X1_2 - X[1] * X[2] * X[3] + X2_2 + X[0] * X3_2 - 4 * X[0] * X[4]);
 80056d8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80056dc:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80056e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80056e4:	eef0 7ae7 	vabs.f32	s15, s15
 80056e8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80056ec:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80056f0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80056f4:	edd3 7a04 	vldr	s15, [r3, #16]
 80056f8:	eef0 7ae7 	vabs.f32	s15, s15
 80056fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005700:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005704:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005708:	edd3 7a04 	vldr	s15, [r3, #16]
 800570c:	eef0 7ae7 	vabs.f32	s15, s15
 8005710:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005714:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005718:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800571c:	edd3 6a04 	vldr	s13, [r3, #16]
 8005720:	4ba7      	ldr	r3, [pc, #668]	@ (80059c0 <ETS+0x1380>)
 8005722:	443b      	add	r3, r7
 8005724:	edd3 7a00 	vldr	s15, [r3]
 8005728:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800572c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005730:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005734:	ed93 6a01 	vldr	s12, [r3, #4]
 8005738:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800573c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005740:	edd3 7a02 	vldr	s15, [r3, #8]
 8005744:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005748:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800574c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005750:	edd3 7a03 	vldr	s15, [r3, #12]
 8005754:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005758:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800575c:	4b99      	ldr	r3, [pc, #612]	@ (80059c4 <ETS+0x1384>)
 800575e:	443b      	add	r3, r7
 8005760:	edd3 7a00 	vldr	s15, [r3]
 8005764:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005768:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800576c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005770:	ed93 6a00 	vldr	s12, [r3]
 8005774:	4b94      	ldr	r3, [pc, #592]	@ (80059c8 <ETS+0x1388>)
 8005776:	443b      	add	r3, r7
 8005778:	edd3 7a00 	vldr	s15, [r3]
 800577c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005780:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005784:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005788:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800578c:	edd3 7a00 	vldr	s15, [r3]
 8005790:	eeb1 6a00 	vmov.f32	s12, #16	@ 0x40800000  4.0
 8005794:	ee27 6a86 	vmul.f32	s12, s15, s12
 8005798:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800579c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80057a0:	edd3 7a04 	vldr	s15, [r3, #16]
 80057a4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80057a8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80057ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057b0:	4b86      	ldr	r3, [pc, #536]	@ (80059cc <ETS+0x138c>)
 80057b2:	443b      	add	r3, r7
 80057b4:	edc3 7a00 	vstr	s15, [r3]

    sx = -X4_2*X[4] * sqrtf(psi8 * (-X3_2 + 4*X[4])) / (divs);
 80057b8:	4b85      	ldr	r3, [pc, #532]	@ (80059d0 <ETS+0x1390>)
 80057ba:	443b      	add	r3, r7
 80057bc:	edd3 7a00 	vldr	s15, [r3]
 80057c0:	eeb1 7a67 	vneg.f32	s14, s15
 80057c4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80057c8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80057cc:	edd3 7a04 	vldr	s15, [r3, #16]
 80057d0:	ee27 8a27 	vmul.f32	s16, s14, s15
 80057d4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80057d8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80057dc:	edd3 7a04 	vldr	s15, [r3, #16]
 80057e0:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80057e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80057e8:	4b77      	ldr	r3, [pc, #476]	@ (80059c8 <ETS+0x1388>)
 80057ea:	443b      	add	r3, r7
 80057ec:	edd3 7a00 	vldr	s15, [r3]
 80057f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80057f4:	4b71      	ldr	r3, [pc, #452]	@ (80059bc <ETS+0x137c>)
 80057f6:	443b      	add	r3, r7
 80057f8:	edd3 7a00 	vldr	s15, [r3]
 80057fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005800:	eeb0 0a67 	vmov.f32	s0, s15
 8005804:	f00c fc14 	bl	8012030 <sqrtf>
 8005808:	eef0 7a40 	vmov.f32	s15, s0
 800580c:	ee68 6a27 	vmul.f32	s13, s16, s15
 8005810:	4b6e      	ldr	r3, [pc, #440]	@ (80059cc <ETS+0x138c>)
 8005812:	443b      	add	r3, r7
 8005814:	ed93 7a00 	vldr	s14, [r3]
 8005818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800581c:	4b6d      	ldr	r3, [pc, #436]	@ (80059d4 <ETS+0x1394>)
 800581e:	443b      	add	r3, r7
 8005820:	edc3 7a00 	vstr	s15, [r3]
    sy = -X4_2*X[4] * sqrtf(psi8 * (-X2_2 + 4*X[0]*X[4])) / (divs);
 8005824:	4b6a      	ldr	r3, [pc, #424]	@ (80059d0 <ETS+0x1390>)
 8005826:	443b      	add	r3, r7
 8005828:	edd3 7a00 	vldr	s15, [r3]
 800582c:	eeb1 7a67 	vneg.f32	s14, s15
 8005830:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005834:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005838:	edd3 7a04 	vldr	s15, [r3, #16]
 800583c:	ee27 8a27 	vmul.f32	s16, s14, s15
 8005840:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005844:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005848:	edd3 7a00 	vldr	s15, [r3]
 800584c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8005850:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005854:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005858:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800585c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005860:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005864:	4b57      	ldr	r3, [pc, #348]	@ (80059c4 <ETS+0x1384>)
 8005866:	443b      	add	r3, r7
 8005868:	edd3 7a00 	vldr	s15, [r3]
 800586c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005870:	4b52      	ldr	r3, [pc, #328]	@ (80059bc <ETS+0x137c>)
 8005872:	443b      	add	r3, r7
 8005874:	edd3 7a00 	vldr	s15, [r3]
 8005878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800587c:	eeb0 0a67 	vmov.f32	s0, s15
 8005880:	f00c fbd6 	bl	8012030 <sqrtf>
 8005884:	eef0 7a40 	vmov.f32	s15, s0
 8005888:	ee68 6a27 	vmul.f32	s13, s16, s15
 800588c:	4b4f      	ldr	r3, [pc, #316]	@ (80059cc <ETS+0x138c>)
 800588e:	443b      	add	r3, r7
 8005890:	ed93 7a00 	vldr	s14, [r3]
 8005894:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005898:	4b4f      	ldr	r3, [pc, #316]	@ (80059d8 <ETS+0x1398>)
 800589a:	443b      	add	r3, r7
 800589c:	edc3 7a00 	vstr	s15, [r3]
    sz = -X4_2*X[4] * sqrtf(psi8 * (-X1_2 + 4*X[0])) / (divs);
 80058a0:	4b4b      	ldr	r3, [pc, #300]	@ (80059d0 <ETS+0x1390>)
 80058a2:	443b      	add	r3, r7
 80058a4:	edd3 7a00 	vldr	s15, [r3]
 80058a8:	eeb1 7a67 	vneg.f32	s14, s15
 80058ac:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80058b0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80058b4:	edd3 7a04 	vldr	s15, [r3, #16]
 80058b8:	ee27 8a27 	vmul.f32	s16, s14, s15
 80058bc:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80058c0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80058c4:	edd3 7a00 	vldr	s15, [r3]
 80058c8:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80058cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80058d0:	4b3b      	ldr	r3, [pc, #236]	@ (80059c0 <ETS+0x1380>)
 80058d2:	443b      	add	r3, r7
 80058d4:	edd3 7a00 	vldr	s15, [r3]
 80058d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80058dc:	4b37      	ldr	r3, [pc, #220]	@ (80059bc <ETS+0x137c>)
 80058de:	443b      	add	r3, r7
 80058e0:	edd3 7a00 	vldr	s15, [r3]
 80058e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e8:	eeb0 0a67 	vmov.f32	s0, s15
 80058ec:	f00c fba0 	bl	8012030 <sqrtf>
 80058f0:	eef0 7a40 	vmov.f32	s15, s0
 80058f4:	ee68 6a27 	vmul.f32	s13, s16, s15
 80058f8:	4b34      	ldr	r3, [pc, #208]	@ (80059cc <ETS+0x138c>)
 80058fa:	443b      	add	r3, r7
 80058fc:	ed93 7a00 	vldr	s14, [r3]
 8005900:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005904:	4b35      	ldr	r3, [pc, #212]	@ (80059dc <ETS+0x139c>)
 8005906:	443b      	add	r3, r7
 8005908:	edc3 7a00 	vstr	s15, [r3]

    rho = (2 * X[1]*X[4] - X[2]*X[3]) / (2*X4_2 * sqrtf(-(X[4]*X1_2 - X[1]*X[2]*X[3] + X2_2 + X[0]*X3_2 - 4*X[0]*X[4]) / (X4_2*X[4])));
 800590c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005910:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005914:	edd3 7a01 	vldr	s15, [r3, #4]
 8005918:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800591c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005920:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005924:	edd3 7a04 	vldr	s15, [r3, #16]
 8005928:	ee27 7a27 	vmul.f32	s14, s14, s15
 800592c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005930:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005934:	edd3 6a02 	vldr	s13, [r3, #8]
 8005938:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800593c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005940:	edd3 7a03 	vldr	s15, [r3, #12]
 8005944:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005948:	ee37 8a67 	vsub.f32	s16, s14, s15
 800594c:	4b20      	ldr	r3, [pc, #128]	@ (80059d0 <ETS+0x1390>)
 800594e:	443b      	add	r3, r7
 8005950:	edd3 7a00 	vldr	s15, [r3]
 8005954:	ee77 8aa7 	vadd.f32	s17, s15, s15
 8005958:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800595c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005960:	ed93 7a04 	vldr	s14, [r3, #16]
 8005964:	4b16      	ldr	r3, [pc, #88]	@ (80059c0 <ETS+0x1380>)
 8005966:	443b      	add	r3, r7
 8005968:	edd3 7a00 	vldr	s15, [r3]
 800596c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005970:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005974:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005978:	edd3 6a01 	vldr	s13, [r3, #4]
 800597c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005980:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005984:	edd3 7a02 	vldr	s15, [r3, #8]
 8005988:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800598c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005990:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005994:	edd3 7a03 	vldr	s15, [r3, #12]
 8005998:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800599c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80059a0:	4b08      	ldr	r3, [pc, #32]	@ (80059c4 <ETS+0x1384>)
 80059a2:	443b      	add	r3, r7
 80059a4:	edd3 7a00 	vldr	s15, [r3]
 80059a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059ac:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80059b0:	e016      	b.n	80059e0 <ETS+0x13a0>
 80059b2:	bf00      	nop
 80059b4:	00014ce4 	.word	0x00014ce4
 80059b8:	00014ce0 	.word	0x00014ce0
 80059bc:	00014d3c 	.word	0x00014d3c
 80059c0:	00014cf8 	.word	0x00014cf8
 80059c4:	00014cf4 	.word	0x00014cf4
 80059c8:	00014cf0 	.word	0x00014cf0
 80059cc:	00014d38 	.word	0x00014d38
 80059d0:	00014cec 	.word	0x00014cec
 80059d4:	00014d10 	.word	0x00014d10
 80059d8:	00014d0c 	.word	0x00014d0c
 80059dc:	00014d08 	.word	0x00014d08
 80059e0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80059e4:	edd3 6a00 	vldr	s13, [r3]
 80059e8:	4be5      	ldr	r3, [pc, #916]	@ (8005d80 <ETS+0x1740>)
 80059ea:	443b      	add	r3, r7
 80059ec:	edd3 7a00 	vldr	s15, [r3]
 80059f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059f8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80059fc:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005a00:	edd3 7a00 	vldr	s15, [r3]
 8005a04:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005a08:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005a0c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005a10:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005a14:	edd3 7a04 	vldr	s15, [r3, #16]
 8005a18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a20:	eeb1 7a67 	vneg.f32	s14, s15
 8005a24:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005a28:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005a2c:	edd3 6a04 	vldr	s13, [r3, #16]
 8005a30:	4bd4      	ldr	r3, [pc, #848]	@ (8005d84 <ETS+0x1744>)
 8005a32:	443b      	add	r3, r7
 8005a34:	edd3 7a00 	vldr	s15, [r3]
 8005a38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a3c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005a40:	eeb0 0a66 	vmov.f32	s0, s13
 8005a44:	f00c faf4 	bl	8012030 <sqrtf>
 8005a48:	eef0 7a40 	vmov.f32	s15, s0
 8005a4c:	ee28 7aa7 	vmul.f32	s14, s17, s15
 8005a50:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8005a54:	4bcc      	ldr	r3, [pc, #816]	@ (8005d88 <ETS+0x1748>)
 8005a56:	443b      	add	r3, r7
 8005a58:	edc3 7a00 	vstr	s15, [r3]
    rho = -atanf(rho);
 8005a5c:	4bca      	ldr	r3, [pc, #808]	@ (8005d88 <ETS+0x1748>)
 8005a5e:	443b      	add	r3, r7
 8005a60:	ed93 0a00 	vldr	s0, [r3]
 8005a64:	f00c fb02 	bl	801206c <atanf>
 8005a68:	eef0 7a40 	vmov.f32	s15, s0
 8005a6c:	eef1 7a67 	vneg.f32	s15, s15
 8005a70:	4bc5      	ldr	r3, [pc, #788]	@ (8005d88 <ETS+0x1748>)
 8005a72:	443b      	add	r3, r7
 8005a74:	edc3 7a00 	vstr	s15, [r3]
    lambida = -atanf((X[3] / X[4]) * sqrtf(-(X4_2 * (X[4]*X1_2 - X[1]*X[2]*X[3] + X2_2 - 4*X[0]*X[4]) / (2*X1_2*X3_2*X[4] - 4* X1_2 * X4_2 - 4*X1_2 * X4_2 - X[1]*X[2]*X3_2*X[3] + X2_2 * X3_2 + X[0]* X3_2*X3_2 - 8*X[0]*X3_2*X[4] + 16*X[0]*X4_2))));
 8005a78:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005a7c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005a80:	ed93 7a03 	vldr	s14, [r3, #12]
 8005a84:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005a88:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005a8c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005a90:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8005a94:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005a98:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005a9c:	ed93 7a04 	vldr	s14, [r3, #16]
 8005aa0:	4bba      	ldr	r3, [pc, #744]	@ (8005d8c <ETS+0x174c>)
 8005aa2:	443b      	add	r3, r7
 8005aa4:	edd3 7a00 	vldr	s15, [r3]
 8005aa8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005aac:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005ab0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005ab4:	edd3 6a01 	vldr	s13, [r3, #4]
 8005ab8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005abc:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005ac0:	edd3 7a02 	vldr	s15, [r3, #8]
 8005ac4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005ac8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005acc:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005ad0:	edd3 7a03 	vldr	s15, [r3, #12]
 8005ad4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ad8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005adc:	4bac      	ldr	r3, [pc, #688]	@ (8005d90 <ETS+0x1750>)
 8005ade:	443b      	add	r3, r7
 8005ae0:	edd3 7a00 	vldr	s15, [r3]
 8005ae4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ae8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005aec:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005af0:	edd3 7a00 	vldr	s15, [r3]
 8005af4:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005af8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005afc:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005b00:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005b04:	edd3 7a04 	vldr	s15, [r3, #16]
 8005b08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005b10:	4b9c      	ldr	r3, [pc, #624]	@ (8005d84 <ETS+0x1744>)
 8005b12:	443b      	add	r3, r7
 8005b14:	edd3 7a00 	vldr	s15, [r3]
 8005b18:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005b1c:	4b9b      	ldr	r3, [pc, #620]	@ (8005d8c <ETS+0x174c>)
 8005b1e:	443b      	add	r3, r7
 8005b20:	edd3 7a00 	vldr	s15, [r3]
 8005b24:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005b28:	4b95      	ldr	r3, [pc, #596]	@ (8005d80 <ETS+0x1740>)
 8005b2a:	443b      	add	r3, r7
 8005b2c:	edd3 7a00 	vldr	s15, [r3]
 8005b30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b34:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005b38:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005b3c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005b40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b44:	4b91      	ldr	r3, [pc, #580]	@ (8005d8c <ETS+0x174c>)
 8005b46:	443b      	add	r3, r7
 8005b48:	edd3 7a00 	vldr	s15, [r3]
 8005b4c:	eeb1 6a00 	vmov.f32	s12, #16	@ 0x40800000  4.0
 8005b50:	ee27 6a86 	vmul.f32	s12, s15, s12
 8005b54:	4b8b      	ldr	r3, [pc, #556]	@ (8005d84 <ETS+0x1744>)
 8005b56:	443b      	add	r3, r7
 8005b58:	edd3 7a00 	vldr	s15, [r3]
 8005b5c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005b60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005b64:	4b89      	ldr	r3, [pc, #548]	@ (8005d8c <ETS+0x174c>)
 8005b66:	443b      	add	r3, r7
 8005b68:	edd3 7a00 	vldr	s15, [r3]
 8005b6c:	eeb1 6a00 	vmov.f32	s12, #16	@ 0x40800000  4.0
 8005b70:	ee27 6a86 	vmul.f32	s12, s15, s12
 8005b74:	4b83      	ldr	r3, [pc, #524]	@ (8005d84 <ETS+0x1744>)
 8005b76:	443b      	add	r3, r7
 8005b78:	edd3 7a00 	vldr	s15, [r3]
 8005b7c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005b80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005b84:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005b88:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005b8c:	ed93 6a01 	vldr	s12, [r3, #4]
 8005b90:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005b94:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005b98:	edd3 7a02 	vldr	s15, [r3, #8]
 8005b9c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005ba0:	4b77      	ldr	r3, [pc, #476]	@ (8005d80 <ETS+0x1740>)
 8005ba2:	443b      	add	r3, r7
 8005ba4:	edd3 7a00 	vldr	s15, [r3]
 8005ba8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005bac:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005bb0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005bb4:	edd3 7a03 	vldr	s15, [r3, #12]
 8005bb8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005bbc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005bc0:	4b73      	ldr	r3, [pc, #460]	@ (8005d90 <ETS+0x1750>)
 8005bc2:	443b      	add	r3, r7
 8005bc4:	ed93 6a00 	vldr	s12, [r3]
 8005bc8:	4b6d      	ldr	r3, [pc, #436]	@ (8005d80 <ETS+0x1740>)
 8005bca:	443b      	add	r3, r7
 8005bcc:	edd3 7a00 	vldr	s15, [r3]
 8005bd0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005bd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005bd8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005bdc:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005be0:	ed93 6a00 	vldr	s12, [r3]
 8005be4:	4b66      	ldr	r3, [pc, #408]	@ (8005d80 <ETS+0x1740>)
 8005be6:	443b      	add	r3, r7
 8005be8:	edd3 7a00 	vldr	s15, [r3]
 8005bec:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005bf0:	4b63      	ldr	r3, [pc, #396]	@ (8005d80 <ETS+0x1740>)
 8005bf2:	443b      	add	r3, r7
 8005bf4:	edd3 7a00 	vldr	s15, [r3]
 8005bf8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005bfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c00:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005c04:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005c08:	edd3 7a00 	vldr	s15, [r3]
 8005c0c:	eeb2 6a00 	vmov.f32	s12, #32	@ 0x41000000  8.0
 8005c10:	ee27 6a86 	vmul.f32	s12, s15, s12
 8005c14:	4b5a      	ldr	r3, [pc, #360]	@ (8005d80 <ETS+0x1740>)
 8005c16:	443b      	add	r3, r7
 8005c18:	edd3 7a00 	vldr	s15, [r3]
 8005c1c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005c20:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005c24:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005c28:	edd3 7a04 	vldr	s15, [r3, #16]
 8005c2c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005c30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c34:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005c38:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005c3c:	edd3 7a00 	vldr	s15, [r3]
 8005c40:	eeb3 6a00 	vmov.f32	s12, #48	@ 0x41800000  16.0
 8005c44:	ee27 6a86 	vmul.f32	s12, s15, s12
 8005c48:	4b4e      	ldr	r3, [pc, #312]	@ (8005d84 <ETS+0x1744>)
 8005c4a:	443b      	add	r3, r7
 8005c4c:	edd3 7a00 	vldr	s15, [r3]
 8005c50:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005c54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c5c:	eef1 7a67 	vneg.f32	s15, s15
 8005c60:	eeb0 0a67 	vmov.f32	s0, s15
 8005c64:	f00c f9e4 	bl	8012030 <sqrtf>
 8005c68:	eef0 7a40 	vmov.f32	s15, s0
 8005c6c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005c70:	eeb0 0a67 	vmov.f32	s0, s15
 8005c74:	f00c f9fa 	bl	801206c <atanf>
 8005c78:	eef0 7a40 	vmov.f32	s15, s0
 8005c7c:	eef1 7a67 	vneg.f32	s15, s15
 8005c80:	4b44      	ldr	r3, [pc, #272]	@ (8005d94 <ETS+0x1754>)
 8005c82:	443b      	add	r3, r7
 8005c84:	edc3 7a00 	vstr	s15, [r3]

    n1 = -X1_2*X7_2 + 4*X1_2*X[4]*X[8] - 4*X[1]*X[2]*X[3]*X[8] + 2*X[1]*X[2]*X[6]*X[7] + 2*X[1]*X[3]*X[5]*X[7] - 4*X[1]*X[4]*X[5]*X[6] - X2_2*X6_2 + 2*X[2]*X[3]*X[5]*X[6] + 4*X2_2*X[8] - 4*X[2]*X[5]*X[7] - X3_2*X5_2 + 4*X[1]*X3_2*X[8] - 4*X[0]*X[3]*X[6]*X[7] + 4*X[4]*X5_2 + 4*X[0]*X[4]*X6_2 + 4*X[0]*X7_2 - 16*X[0]*X[4]*X[8];
 8005c88:	4b40      	ldr	r3, [pc, #256]	@ (8005d8c <ETS+0x174c>)
 8005c8a:	443b      	add	r3, r7
 8005c8c:	edd3 7a00 	vldr	s15, [r3]
 8005c90:	eeb1 7a67 	vneg.f32	s14, s15
 8005c94:	4b40      	ldr	r3, [pc, #256]	@ (8005d98 <ETS+0x1758>)
 8005c96:	443b      	add	r3, r7
 8005c98:	edd3 7a00 	vldr	s15, [r3]
 8005c9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ca0:	4b3a      	ldr	r3, [pc, #232]	@ (8005d8c <ETS+0x174c>)
 8005ca2:	443b      	add	r3, r7
 8005ca4:	edd3 7a00 	vldr	s15, [r3]
 8005ca8:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005cac:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005cb0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005cb4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005cb8:	edd3 7a04 	vldr	s15, [r3, #16]
 8005cbc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005cc0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005cc4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005cc8:	edd3 7a08 	vldr	s15, [r3, #32]
 8005ccc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005cd4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005cd8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005cdc:	edd3 7a01 	vldr	s15, [r3, #4]
 8005ce0:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005ce4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005ce8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005cec:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005cf0:	edd3 7a02 	vldr	s15, [r3, #8]
 8005cf4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005cf8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005cfc:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005d00:	edd3 7a03 	vldr	s15, [r3, #12]
 8005d04:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005d08:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005d0c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005d10:	edd3 7a08 	vldr	s15, [r3, #32]
 8005d14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005d1c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005d20:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005d24:	edd3 7a01 	vldr	s15, [r3, #4]
 8005d28:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005d2c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005d30:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005d34:	edd3 7a02 	vldr	s15, [r3, #8]
 8005d38:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005d3c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005d40:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005d44:	edd3 7a06 	vldr	s15, [r3, #24]
 8005d48:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005d4c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005d50:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005d54:	edd3 7a07 	vldr	s15, [r3, #28]
 8005d58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d60:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005d64:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005d68:	edd3 7a01 	vldr	s15, [r3, #4]
 8005d6c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005d70:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005d74:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005d78:	edd3 7a03 	vldr	s15, [r3, #12]
 8005d7c:	e00e      	b.n	8005d9c <ETS+0x175c>
 8005d7e:	bf00      	nop
 8005d80:	00014cf0 	.word	0x00014cf0
 8005d84:	00014cec 	.word	0x00014cec
 8005d88:	00014d04 	.word	0x00014d04
 8005d8c:	00014cf8 	.word	0x00014cf8
 8005d90:	00014cf4 	.word	0x00014cf4
 8005d94:	00014cfc 	.word	0x00014cfc
 8005d98:	00014ce0 	.word	0x00014ce0
 8005d9c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005da0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005da4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005da8:	edd3 7a05 	vldr	s15, [r3, #20]
 8005dac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005db0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005db4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005db8:	edd3 7a07 	vldr	s15, [r3, #28]
 8005dbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005dc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005dc4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005dc8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005dcc:	edd3 7a01 	vldr	s15, [r3, #4]
 8005dd0:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005dd4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005dd8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005ddc:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005de0:	edd3 7a04 	vldr	s15, [r3, #16]
 8005de4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005de8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005dec:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005df0:	edd3 7a05 	vldr	s15, [r3, #20]
 8005df4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005df8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005dfc:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005e00:	edd3 7a06 	vldr	s15, [r3, #24]
 8005e04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e0c:	4be7      	ldr	r3, [pc, #924]	@ (80061ac <ETS+0x1b6c>)
 8005e0e:	443b      	add	r3, r7
 8005e10:	edd3 6a00 	vldr	s13, [r3]
 8005e14:	4be6      	ldr	r3, [pc, #920]	@ (80061b0 <ETS+0x1b70>)
 8005e16:	443b      	add	r3, r7
 8005e18:	edd3 7a00 	vldr	s15, [r3]
 8005e1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e24:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005e28:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005e2c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005e30:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005e34:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005e38:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005e3c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005e40:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005e44:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005e48:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005e4c:	edd3 7a05 	vldr	s15, [r3, #20]
 8005e50:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005e54:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005e58:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005e5c:	edd3 7a06 	vldr	s15, [r3, #24]
 8005e60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e68:	4bd0      	ldr	r3, [pc, #832]	@ (80061ac <ETS+0x1b6c>)
 8005e6a:	443b      	add	r3, r7
 8005e6c:	edd3 7a00 	vldr	s15, [r3]
 8005e70:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005e74:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005e78:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005e7c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005e80:	edd3 7a08 	vldr	s15, [r3, #32]
 8005e84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e8c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005e90:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005e94:	edd3 7a02 	vldr	s15, [r3, #8]
 8005e98:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005e9c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005ea0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005ea4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005ea8:	edd3 7a05 	vldr	s15, [r3, #20]
 8005eac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005eb0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005eb4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005eb8:	edd3 7a07 	vldr	s15, [r3, #28]
 8005ebc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ec0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ec4:	4bbb      	ldr	r3, [pc, #748]	@ (80061b4 <ETS+0x1b74>)
 8005ec6:	443b      	add	r3, r7
 8005ec8:	edd3 6a00 	vldr	s13, [r3]
 8005ecc:	4bba      	ldr	r3, [pc, #744]	@ (80061b8 <ETS+0x1b78>)
 8005ece:	443b      	add	r3, r7
 8005ed0:	edd3 7a00 	vldr	s15, [r3]
 8005ed4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ed8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005edc:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005ee0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005ee4:	edd3 7a01 	vldr	s15, [r3, #4]
 8005ee8:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005eec:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005ef0:	4bb0      	ldr	r3, [pc, #704]	@ (80061b4 <ETS+0x1b74>)
 8005ef2:	443b      	add	r3, r7
 8005ef4:	edd3 7a00 	vldr	s15, [r3]
 8005ef8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005efc:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005f00:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005f04:	edd3 7a08 	vldr	s15, [r3, #32]
 8005f08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f10:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005f14:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005f18:	edd3 7a00 	vldr	s15, [r3]
 8005f1c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005f20:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005f24:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005f28:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005f2c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005f30:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005f34:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005f38:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005f3c:	edd3 7a06 	vldr	s15, [r3, #24]
 8005f40:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005f44:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005f48:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005f4c:	edd3 7a07 	vldr	s15, [r3, #28]
 8005f50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f54:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f58:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005f5c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005f60:	edd3 7a04 	vldr	s15, [r3, #16]
 8005f64:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005f68:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005f6c:	4b92      	ldr	r3, [pc, #584]	@ (80061b8 <ETS+0x1b78>)
 8005f6e:	443b      	add	r3, r7
 8005f70:	edd3 7a00 	vldr	s15, [r3]
 8005f74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f7c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005f80:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005f84:	edd3 7a00 	vldr	s15, [r3]
 8005f88:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005f8c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005f90:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005f94:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005f98:	edd3 7a04 	vldr	s15, [r3, #16]
 8005f9c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005fa0:	4b83      	ldr	r3, [pc, #524]	@ (80061b0 <ETS+0x1b70>)
 8005fa2:	443b      	add	r3, r7
 8005fa4:	edd3 7a00 	vldr	s15, [r3]
 8005fa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005fb0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005fb4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005fb8:	edd3 7a00 	vldr	s15, [r3]
 8005fbc:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005fc0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005fc4:	4b7d      	ldr	r3, [pc, #500]	@ (80061bc <ETS+0x1b7c>)
 8005fc6:	443b      	add	r3, r7
 8005fc8:	edd3 7a00 	vldr	s15, [r3]
 8005fcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005fd4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005fd8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005fdc:	edd3 7a00 	vldr	s15, [r3]
 8005fe0:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8005fe4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005fe8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005fec:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005ff0:	edd3 7a04 	vldr	s15, [r3, #16]
 8005ff4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005ff8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005ffc:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006000:	edd3 7a08 	vldr	s15, [r3, #32]
 8006004:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800600c:	4b6c      	ldr	r3, [pc, #432]	@ (80061c0 <ETS+0x1b80>)
 800600e:	443b      	add	r3, r7
 8006010:	edc3 7a00 	vstr	s15, [r3]
    n2 = X1_2*X[4] - X[1]*X[2]*X[3] + X2_2 + X[0]*X3_2 - 4*X[0]*X[4];
 8006014:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006018:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800601c:	ed93 7a04 	vldr	s14, [r3, #16]
 8006020:	4b68      	ldr	r3, [pc, #416]	@ (80061c4 <ETS+0x1b84>)
 8006022:	443b      	add	r3, r7
 8006024:	edd3 7a00 	vldr	s15, [r3]
 8006028:	ee27 7a27 	vmul.f32	s14, s14, s15
 800602c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006030:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006034:	edd3 6a01 	vldr	s13, [r3, #4]
 8006038:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800603c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006040:	edd3 7a02 	vldr	s15, [r3, #8]
 8006044:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006048:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800604c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006050:	edd3 7a03 	vldr	s15, [r3, #12]
 8006054:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006058:	ee37 7a67 	vsub.f32	s14, s14, s15
 800605c:	4b53      	ldr	r3, [pc, #332]	@ (80061ac <ETS+0x1b6c>)
 800605e:	443b      	add	r3, r7
 8006060:	edd3 7a00 	vldr	s15, [r3]
 8006064:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006068:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800606c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006070:	edd3 6a00 	vldr	s13, [r3]
 8006074:	4b4f      	ldr	r3, [pc, #316]	@ (80061b4 <ETS+0x1b74>)
 8006076:	443b      	add	r3, r7
 8006078:	edd3 7a00 	vldr	s15, [r3]
 800607c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006080:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006084:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006088:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800608c:	edd3 7a00 	vldr	s15, [r3]
 8006090:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8006094:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006098:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800609c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80060a0:	edd3 7a04 	vldr	s15, [r3, #16]
 80060a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060ac:	4b46      	ldr	r3, [pc, #280]	@ (80061c8 <ETS+0x1b88>)
 80060ae:	443b      	add	r3, r7
 80060b0:	edc3 7a00 	vstr	s15, [r3]
    n3 = 2*X1_2*X3_2*X[4] - 4*X1_2*X4_2 - X[1]*X[2]*X3_2*X[3] + X2_2*X3_2 + X[0]*X3_2 - 8*X[0]*X3_2*X[4] + 16*X[0]*X4_2;
 80060b4:	4b43      	ldr	r3, [pc, #268]	@ (80061c4 <ETS+0x1b84>)
 80060b6:	443b      	add	r3, r7
 80060b8:	edd3 7a00 	vldr	s15, [r3]
 80060bc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80060c0:	4b3c      	ldr	r3, [pc, #240]	@ (80061b4 <ETS+0x1b74>)
 80060c2:	443b      	add	r3, r7
 80060c4:	edd3 7a00 	vldr	s15, [r3]
 80060c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060cc:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80060d0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80060d4:	edd3 7a04 	vldr	s15, [r3, #16]
 80060d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060dc:	4b39      	ldr	r3, [pc, #228]	@ (80061c4 <ETS+0x1b84>)
 80060de:	443b      	add	r3, r7
 80060e0:	edd3 7a00 	vldr	s15, [r3]
 80060e4:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80060e8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80060ec:	4b37      	ldr	r3, [pc, #220]	@ (80061cc <ETS+0x1b8c>)
 80060ee:	443b      	add	r3, r7
 80060f0:	edd3 7a00 	vldr	s15, [r3]
 80060f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80060fc:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006100:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006104:	edd3 6a01 	vldr	s13, [r3, #4]
 8006108:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800610c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006110:	edd3 7a02 	vldr	s15, [r3, #8]
 8006114:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006118:	4b26      	ldr	r3, [pc, #152]	@ (80061b4 <ETS+0x1b74>)
 800611a:	443b      	add	r3, r7
 800611c:	edd3 7a00 	vldr	s15, [r3]
 8006120:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006124:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006128:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800612c:	edd3 7a03 	vldr	s15, [r3, #12]
 8006130:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006134:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006138:	4b1c      	ldr	r3, [pc, #112]	@ (80061ac <ETS+0x1b6c>)
 800613a:	443b      	add	r3, r7
 800613c:	edd3 6a00 	vldr	s13, [r3]
 8006140:	4b1c      	ldr	r3, [pc, #112]	@ (80061b4 <ETS+0x1b74>)
 8006142:	443b      	add	r3, r7
 8006144:	edd3 7a00 	vldr	s15, [r3]
 8006148:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800614c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006150:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006154:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006158:	edd3 6a00 	vldr	s13, [r3]
 800615c:	4b15      	ldr	r3, [pc, #84]	@ (80061b4 <ETS+0x1b74>)
 800615e:	443b      	add	r3, r7
 8006160:	edd3 7a00 	vldr	s15, [r3]
 8006164:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006168:	ee37 7a27 	vadd.f32	s14, s14, s15
 800616c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006170:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006174:	edd3 7a00 	vldr	s15, [r3]
 8006178:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800617c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006180:	4b0c      	ldr	r3, [pc, #48]	@ (80061b4 <ETS+0x1b74>)
 8006182:	443b      	add	r3, r7
 8006184:	edd3 7a00 	vldr	s15, [r3]
 8006188:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800618c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006190:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006194:	edd3 7a04 	vldr	s15, [r3, #16]
 8006198:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800619c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80061a0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80061a4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80061a8:	e012      	b.n	80061d0 <ETS+0x1b90>
 80061aa:	bf00      	nop
 80061ac:	00014cf4 	.word	0x00014cf4
 80061b0:	00014ce4 	.word	0x00014ce4
 80061b4:	00014cf0 	.word	0x00014cf0
 80061b8:	00014ce8 	.word	0x00014ce8
 80061bc:	00014ce0 	.word	0x00014ce0
 80061c0:	00014d34 	.word	0x00014d34
 80061c4:	00014cf8 	.word	0x00014cf8
 80061c8:	00014d30 	.word	0x00014d30
 80061cc:	00014cec 	.word	0x00014cec
 80061d0:	edd3 7a00 	vldr	s15, [r3]
 80061d4:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80061d8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80061dc:	4bbd      	ldr	r3, [pc, #756]	@ (80064d4 <ETS+0x1e94>)
 80061de:	443b      	add	r3, r7
 80061e0:	edd3 7a00 	vldr	s15, [r3]
 80061e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061ec:	4bba      	ldr	r3, [pc, #744]	@ (80064d8 <ETS+0x1e98>)
 80061ee:	443b      	add	r3, r7
 80061f0:	edc3 7a00 	vstr	s15, [r3]
    n4 = 4*X[4] - X3_2;
 80061f4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80061f8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80061fc:	edd3 7a04 	vldr	s15, [r3, #16]
 8006200:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8006204:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006208:	4bb4      	ldr	r3, [pc, #720]	@ (80064dc <ETS+0x1e9c>)
 800620a:	443b      	add	r3, r7
 800620c:	edd3 7a00 	vldr	s15, [r3]
 8006210:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006214:	4bb2      	ldr	r3, [pc, #712]	@ (80064e0 <ETS+0x1ea0>)
 8006216:	443b      	add	r3, r7
 8006218:	edc3 7a00 	vstr	s15, [r3]
    n5 = 4*X[0]*X[4] - X2_2;
 800621c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006220:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006224:	edd3 7a00 	vldr	s15, [r3]
 8006228:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800622c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006230:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006234:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006238:	edd3 7a04 	vldr	s15, [r3, #16]
 800623c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006240:	4ba8      	ldr	r3, [pc, #672]	@ (80064e4 <ETS+0x1ea4>)
 8006242:	443b      	add	r3, r7
 8006244:	edd3 7a00 	vldr	s15, [r3]
 8006248:	ee77 7a67 	vsub.f32	s15, s14, s15
 800624c:	4ba6      	ldr	r3, [pc, #664]	@ (80064e8 <ETS+0x1ea8>)
 800624e:	443b      	add	r3, r7
 8006250:	edc3 7a00 	vstr	s15, [r3]
    n6 = 4*X[0] - X1_2;
 8006254:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006258:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800625c:	edd3 7a00 	vldr	s15, [r3]
 8006260:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8006264:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006268:	4ba0      	ldr	r3, [pc, #640]	@ (80064ec <ETS+0x1eac>)
 800626a:	443b      	add	r3, r7
 800626c:	edd3 7a00 	vldr	s15, [r3]
 8006270:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006274:	4b9e      	ldr	r3, [pc, #632]	@ (80064f0 <ETS+0x1eb0>)
 8006276:	443b      	add	r3, r7
 8006278:	edc3 7a00 	vstr	s15, [r3]

    phi = -atanf((fabsf(X[4])*sqrtf(n1*n5) * (2*X[2] - X[1]*X[3]) * sqrtf((X[4]*n4*n6) / n3)) / (X4_2 * sqrtf(-n2 / X[4]) * sqrtf(n1*n6) * sqrtf(-(n2 * n4) / n3) * sqrtf(-(n4*n5) / (X[4]*n2))));
 800627c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006280:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006284:	edd3 7a04 	vldr	s15, [r3, #16]
 8006288:	eeb0 8ae7 	vabs.f32	s16, s15
 800628c:	4b99      	ldr	r3, [pc, #612]	@ (80064f4 <ETS+0x1eb4>)
 800628e:	443b      	add	r3, r7
 8006290:	ed93 7a00 	vldr	s14, [r3]
 8006294:	4b94      	ldr	r3, [pc, #592]	@ (80064e8 <ETS+0x1ea8>)
 8006296:	443b      	add	r3, r7
 8006298:	edd3 7a00 	vldr	s15, [r3]
 800629c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062a0:	eeb0 0a67 	vmov.f32	s0, s15
 80062a4:	f00b fec4 	bl	8012030 <sqrtf>
 80062a8:	eef0 7a40 	vmov.f32	s15, s0
 80062ac:	ee28 7a27 	vmul.f32	s14, s16, s15
 80062b0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80062b4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80062b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80062bc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80062c0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80062c4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80062c8:	ed93 6a01 	vldr	s12, [r3, #4]
 80062cc:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80062d0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80062d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80062d8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80062dc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80062e0:	ee27 8a27 	vmul.f32	s16, s14, s15
 80062e4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80062e8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80062ec:	ed93 7a04 	vldr	s14, [r3, #16]
 80062f0:	4b7b      	ldr	r3, [pc, #492]	@ (80064e0 <ETS+0x1ea0>)
 80062f2:	443b      	add	r3, r7
 80062f4:	edd3 7a00 	vldr	s15, [r3]
 80062f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062fc:	4b7c      	ldr	r3, [pc, #496]	@ (80064f0 <ETS+0x1eb0>)
 80062fe:	443b      	add	r3, r7
 8006300:	edd3 7a00 	vldr	s15, [r3]
 8006304:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006308:	4b73      	ldr	r3, [pc, #460]	@ (80064d8 <ETS+0x1e98>)
 800630a:	443b      	add	r3, r7
 800630c:	edd3 7a00 	vldr	s15, [r3]
 8006310:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006314:	eeb0 0a66 	vmov.f32	s0, s13
 8006318:	f00b fe8a 	bl	8012030 <sqrtf>
 800631c:	eef0 7a40 	vmov.f32	s15, s0
 8006320:	ee28 8a27 	vmul.f32	s16, s16, s15
 8006324:	4b74      	ldr	r3, [pc, #464]	@ (80064f8 <ETS+0x1eb8>)
 8006326:	443b      	add	r3, r7
 8006328:	edd3 7a00 	vldr	s15, [r3]
 800632c:	eeb1 7a67 	vneg.f32	s14, s15
 8006330:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006334:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006338:	edd3 7a04 	vldr	s15, [r3, #16]
 800633c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006340:	eeb0 0a66 	vmov.f32	s0, s13
 8006344:	f00b fe74 	bl	8012030 <sqrtf>
 8006348:	eeb0 7a40 	vmov.f32	s14, s0
 800634c:	4b61      	ldr	r3, [pc, #388]	@ (80064d4 <ETS+0x1e94>)
 800634e:	443b      	add	r3, r7
 8006350:	edd3 7a00 	vldr	s15, [r3]
 8006354:	ee67 8a27 	vmul.f32	s17, s14, s15
 8006358:	4b66      	ldr	r3, [pc, #408]	@ (80064f4 <ETS+0x1eb4>)
 800635a:	443b      	add	r3, r7
 800635c:	ed93 7a00 	vldr	s14, [r3]
 8006360:	4b63      	ldr	r3, [pc, #396]	@ (80064f0 <ETS+0x1eb0>)
 8006362:	443b      	add	r3, r7
 8006364:	edd3 7a00 	vldr	s15, [r3]
 8006368:	ee67 7a27 	vmul.f32	s15, s14, s15
 800636c:	eeb0 0a67 	vmov.f32	s0, s15
 8006370:	f00b fe5e 	bl	8012030 <sqrtf>
 8006374:	eef0 7a40 	vmov.f32	s15, s0
 8006378:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800637c:	4b5e      	ldr	r3, [pc, #376]	@ (80064f8 <ETS+0x1eb8>)
 800637e:	443b      	add	r3, r7
 8006380:	ed93 7a00 	vldr	s14, [r3]
 8006384:	4b56      	ldr	r3, [pc, #344]	@ (80064e0 <ETS+0x1ea0>)
 8006386:	443b      	add	r3, r7
 8006388:	edd3 7a00 	vldr	s15, [r3]
 800638c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006390:	eeb1 7a67 	vneg.f32	s14, s15
 8006394:	4b50      	ldr	r3, [pc, #320]	@ (80064d8 <ETS+0x1e98>)
 8006396:	443b      	add	r3, r7
 8006398:	edd3 7a00 	vldr	s15, [r3]
 800639c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80063a0:	eeb0 0a66 	vmov.f32	s0, s13
 80063a4:	f00b fe44 	bl	8012030 <sqrtf>
 80063a8:	eef0 7a40 	vmov.f32	s15, s0
 80063ac:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80063b0:	4b4b      	ldr	r3, [pc, #300]	@ (80064e0 <ETS+0x1ea0>)
 80063b2:	443b      	add	r3, r7
 80063b4:	ed93 7a00 	vldr	s14, [r3]
 80063b8:	4b4b      	ldr	r3, [pc, #300]	@ (80064e8 <ETS+0x1ea8>)
 80063ba:	443b      	add	r3, r7
 80063bc:	edd3 7a00 	vldr	s15, [r3]
 80063c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063c4:	eeb1 7a67 	vneg.f32	s14, s15
 80063c8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80063cc:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80063d0:	edd3 6a04 	vldr	s13, [r3, #16]
 80063d4:	4b48      	ldr	r3, [pc, #288]	@ (80064f8 <ETS+0x1eb8>)
 80063d6:	443b      	add	r3, r7
 80063d8:	edd3 7a00 	vldr	s15, [r3]
 80063dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063e0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80063e4:	eeb0 0a66 	vmov.f32	s0, s13
 80063e8:	f00b fe22 	bl	8012030 <sqrtf>
 80063ec:	eef0 7a40 	vmov.f32	s15, s0
 80063f0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80063f4:	ee88 7a27 	vdiv.f32	s14, s16, s15
 80063f8:	eeb0 0a47 	vmov.f32	s0, s14
 80063fc:	f00b fe36 	bl	801206c <atanf>
 8006400:	eef0 7a40 	vmov.f32	s15, s0
 8006404:	eef1 7a67 	vneg.f32	s15, s15
 8006408:	4b3c      	ldr	r3, [pc, #240]	@ (80064fc <ETS+0x1ebc>)
 800640a:	443b      	add	r3, r7
 800640c:	edc3 7a00 	vstr	s15, [r3]

    p[0] = sx;
 8006410:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006414:	f6a3 5368 	subw	r3, r3, #3432	@ 0xd68
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a39      	ldr	r2, [pc, #228]	@ (8006500 <ETS+0x1ec0>)
 800641c:	443a      	add	r2, r7
 800641e:	6812      	ldr	r2, [r2, #0]
 8006420:	601a      	str	r2, [r3, #0]
    p[1] = sy;
 8006422:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006426:	f6a3 5368 	subw	r3, r3, #3432	@ 0xd68
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	3304      	adds	r3, #4
 800642e:	4a35      	ldr	r2, [pc, #212]	@ (8006504 <ETS+0x1ec4>)
 8006430:	443a      	add	r2, r7
 8006432:	6812      	ldr	r2, [r2, #0]
 8006434:	601a      	str	r2, [r3, #0]
    p[2] = sz;
 8006436:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800643a:	f6a3 5368 	subw	r3, r3, #3432	@ 0xd68
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	3308      	adds	r3, #8
 8006442:	4a31      	ldr	r2, [pc, #196]	@ (8006508 <ETS+0x1ec8>)
 8006444:	443a      	add	r2, r7
 8006446:	6812      	ldr	r2, [r2, #0]
 8006448:	601a      	str	r2, [r3, #0]
    p[3] = bx;
 800644a:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800644e:	f6a3 5368 	subw	r3, r3, #3432	@ 0xd68
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	330c      	adds	r3, #12
 8006456:	4a2d      	ldr	r2, [pc, #180]	@ (800650c <ETS+0x1ecc>)
 8006458:	443a      	add	r2, r7
 800645a:	6812      	ldr	r2, [r2, #0]
 800645c:	601a      	str	r2, [r3, #0]
    p[4] = by;
 800645e:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006462:	f6a3 5368 	subw	r3, r3, #3432	@ 0xd68
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	3310      	adds	r3, #16
 800646a:	4a29      	ldr	r2, [pc, #164]	@ (8006510 <ETS+0x1ed0>)
 800646c:	443a      	add	r2, r7
 800646e:	6812      	ldr	r2, [r2, #0]
 8006470:	601a      	str	r2, [r3, #0]
    p[5] = bz;
 8006472:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006476:	f6a3 5368 	subw	r3, r3, #3432	@ 0xd68
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	3314      	adds	r3, #20
 800647e:	4a25      	ldr	r2, [pc, #148]	@ (8006514 <ETS+0x1ed4>)
 8006480:	443a      	add	r2, r7
 8006482:	6812      	ldr	r2, [r2, #0]
 8006484:	601a      	str	r2, [r3, #0]
    p[6] = rho;
 8006486:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800648a:	f6a3 5368 	subw	r3, r3, #3432	@ 0xd68
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	3318      	adds	r3, #24
 8006492:	4a21      	ldr	r2, [pc, #132]	@ (8006518 <ETS+0x1ed8>)
 8006494:	443a      	add	r2, r7
 8006496:	6812      	ldr	r2, [r2, #0]
 8006498:	601a      	str	r2, [r3, #0]
    p[7] = phi;
 800649a:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800649e:	f6a3 5368 	subw	r3, r3, #3432	@ 0xd68
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	331c      	adds	r3, #28
 80064a6:	4a15      	ldr	r2, [pc, #84]	@ (80064fc <ETS+0x1ebc>)
 80064a8:	443a      	add	r2, r7
 80064aa:	6812      	ldr	r2, [r2, #0]
 80064ac:	601a      	str	r2, [r3, #0]
    p[8] = lambida;
 80064ae:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80064b2:	f6a3 5368 	subw	r3, r3, #3432	@ 0xd68
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3320      	adds	r3, #32
 80064ba:	4a18      	ldr	r2, [pc, #96]	@ (800651c <ETS+0x1edc>)
 80064bc:	443a      	add	r2, r7
 80064be:	6812      	ldr	r2, [r2, #0]
 80064c0:	601a      	str	r2, [r3, #0]
}
 80064c2:	bf00      	nop
 80064c4:	f507 37a6 	add.w	r7, r7, #84992	@ 0x14c00
 80064c8:	f507 77b6 	add.w	r7, r7, #364	@ 0x16c
 80064cc:	46bd      	mov	sp, r7
 80064ce:	ecbd 8b02 	vpop	{d8}
 80064d2:	bd90      	pop	{r4, r7, pc}
 80064d4:	00014cec 	.word	0x00014cec
 80064d8:	00014d2c 	.word	0x00014d2c
 80064dc:	00014cf0 	.word	0x00014cf0
 80064e0:	00014d28 	.word	0x00014d28
 80064e4:	00014cf4 	.word	0x00014cf4
 80064e8:	00014d24 	.word	0x00014d24
 80064ec:	00014cf8 	.word	0x00014cf8
 80064f0:	00014d20 	.word	0x00014d20
 80064f4:	00014d34 	.word	0x00014d34
 80064f8:	00014d30 	.word	0x00014d30
 80064fc:	00014d00 	.word	0x00014d00
 8006500:	00014d10 	.word	0x00014d10
 8006504:	00014d0c 	.word	0x00014d0c
 8006508:	00014d08 	.word	0x00014d08
 800650c:	00014d1c 	.word	0x00014d1c
 8006510:	00014d18 	.word	0x00014d18
 8006514:	00014d14 	.word	0x00014d14
 8006518:	00014d04 	.word	0x00014d04
 800651c:	00014cfc 	.word	0x00014cfc

08006520 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b08c      	sub	sp, #48	@ 0x30
 8006524:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006526:	f107 031c 	add.w	r3, r7, #28
 800652a:	2200      	movs	r2, #0
 800652c:	601a      	str	r2, [r3, #0]
 800652e:	605a      	str	r2, [r3, #4]
 8006530:	609a      	str	r2, [r3, #8]
 8006532:	60da      	str	r2, [r3, #12]
 8006534:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006536:	4b8f      	ldr	r3, [pc, #572]	@ (8006774 <MX_GPIO_Init+0x254>)
 8006538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800653a:	4a8e      	ldr	r2, [pc, #568]	@ (8006774 <MX_GPIO_Init+0x254>)
 800653c:	f043 0304 	orr.w	r3, r3, #4
 8006540:	6313      	str	r3, [r2, #48]	@ 0x30
 8006542:	4b8c      	ldr	r3, [pc, #560]	@ (8006774 <MX_GPIO_Init+0x254>)
 8006544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006546:	f003 0304 	and.w	r3, r3, #4
 800654a:	61bb      	str	r3, [r7, #24]
 800654c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800654e:	4b89      	ldr	r3, [pc, #548]	@ (8006774 <MX_GPIO_Init+0x254>)
 8006550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006552:	4a88      	ldr	r2, [pc, #544]	@ (8006774 <MX_GPIO_Init+0x254>)
 8006554:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006558:	6313      	str	r3, [r2, #48]	@ 0x30
 800655a:	4b86      	ldr	r3, [pc, #536]	@ (8006774 <MX_GPIO_Init+0x254>)
 800655c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800655e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006562:	617b      	str	r3, [r7, #20]
 8006564:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006566:	4b83      	ldr	r3, [pc, #524]	@ (8006774 <MX_GPIO_Init+0x254>)
 8006568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800656a:	4a82      	ldr	r2, [pc, #520]	@ (8006774 <MX_GPIO_Init+0x254>)
 800656c:	f043 0301 	orr.w	r3, r3, #1
 8006570:	6313      	str	r3, [r2, #48]	@ 0x30
 8006572:	4b80      	ldr	r3, [pc, #512]	@ (8006774 <MX_GPIO_Init+0x254>)
 8006574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	613b      	str	r3, [r7, #16]
 800657c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800657e:	4b7d      	ldr	r3, [pc, #500]	@ (8006774 <MX_GPIO_Init+0x254>)
 8006580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006582:	4a7c      	ldr	r2, [pc, #496]	@ (8006774 <MX_GPIO_Init+0x254>)
 8006584:	f043 0302 	orr.w	r3, r3, #2
 8006588:	6313      	str	r3, [r2, #48]	@ 0x30
 800658a:	4b7a      	ldr	r3, [pc, #488]	@ (8006774 <MX_GPIO_Init+0x254>)
 800658c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800658e:	f003 0302 	and.w	r3, r3, #2
 8006592:	60fb      	str	r3, [r7, #12]
 8006594:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006596:	4b77      	ldr	r3, [pc, #476]	@ (8006774 <MX_GPIO_Init+0x254>)
 8006598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800659a:	4a76      	ldr	r2, [pc, #472]	@ (8006774 <MX_GPIO_Init+0x254>)
 800659c:	f043 0308 	orr.w	r3, r3, #8
 80065a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80065a2:	4b74      	ldr	r3, [pc, #464]	@ (8006774 <MX_GPIO_Init+0x254>)
 80065a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065a6:	f003 0308 	and.w	r3, r3, #8
 80065aa:	60bb      	str	r3, [r7, #8]
 80065ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80065ae:	4b71      	ldr	r3, [pc, #452]	@ (8006774 <MX_GPIO_Init+0x254>)
 80065b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065b2:	4a70      	ldr	r2, [pc, #448]	@ (8006774 <MX_GPIO_Init+0x254>)
 80065b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80065ba:	4b6e      	ldr	r3, [pc, #440]	@ (8006774 <MX_GPIO_Init+0x254>)
 80065bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065c2:	607b      	str	r3, [r7, #4]
 80065c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SINC_master_GPIO_Port, SINC_master_Pin, GPIO_PIN_RESET);
 80065c6:	2200      	movs	r2, #0
 80065c8:	2108      	movs	r1, #8
 80065ca:	486b      	ldr	r0, [pc, #428]	@ (8006778 <MX_GPIO_Init+0x258>)
 80065cc:	f001 fabe 	bl	8007b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80065d0:	2200      	movs	r2, #0
 80065d2:	f244 0181 	movw	r1, #16513	@ 0x4081
 80065d6:	4869      	ldr	r0, [pc, #420]	@ (800677c <MX_GPIO_Init+0x25c>)
 80065d8:	f001 fab8 	bl	8007b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80065dc:	2200      	movs	r2, #0
 80065de:	2140      	movs	r1, #64	@ 0x40
 80065e0:	4867      	ldr	r0, [pc, #412]	@ (8006780 <MX_GPIO_Init+0x260>)
 80065e2:	f001 fab3 	bl	8007b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80065e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80065ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80065ec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80065f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065f2:	2300      	movs	r3, #0
 80065f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80065f6:	f107 031c 	add.w	r3, r7, #28
 80065fa:	4619      	mov	r1, r3
 80065fc:	4861      	ldr	r0, [pc, #388]	@ (8006784 <MX_GPIO_Init+0x264>)
 80065fe:	f001 f8f9 	bl	80077f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SINC_slave_Pin;
 8006602:	2301      	movs	r3, #1
 8006604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006606:	2300      	movs	r3, #0
 8006608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800660a:	2300      	movs	r3, #0
 800660c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SINC_slave_GPIO_Port, &GPIO_InitStruct);
 800660e:	f107 031c 	add.w	r3, r7, #28
 8006612:	4619      	mov	r1, r3
 8006614:	485b      	ldr	r0, [pc, #364]	@ (8006784 <MX_GPIO_Init+0x264>)
 8006616:	f001 f8ed 	bl	80077f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin;
 800661a:	2302      	movs	r3, #2
 800661c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800661e:	2302      	movs	r3, #2
 8006620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006622:	2300      	movs	r3, #0
 8006624:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006626:	2303      	movs	r3, #3
 8006628:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800662a:	230b      	movs	r3, #11
 800662c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_MDC_GPIO_Port, &GPIO_InitStruct);
 800662e:	f107 031c 	add.w	r3, r7, #28
 8006632:	4619      	mov	r1, r3
 8006634:	4853      	ldr	r0, [pc, #332]	@ (8006784 <MX_GPIO_Init+0x264>)
 8006636:	f001 f8dd 	bl	80077f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 800663a:	2306      	movs	r3, #6
 800663c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800663e:	2302      	movs	r3, #2
 8006640:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006642:	2300      	movs	r3, #0
 8006644:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006646:	2303      	movs	r3, #3
 8006648:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800664a:	230b      	movs	r3, #11
 800664c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800664e:	f107 031c 	add.w	r3, r7, #28
 8006652:	4619      	mov	r1, r3
 8006654:	4848      	ldr	r0, [pc, #288]	@ (8006778 <MX_GPIO_Init+0x258>)
 8006656:	f001 f8cd 	bl	80077f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SINC_master_Pin;
 800665a:	2308      	movs	r3, #8
 800665c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800665e:	2301      	movs	r3, #1
 8006660:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006662:	2300      	movs	r3, #0
 8006664:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006666:	2303      	movs	r3, #3
 8006668:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SINC_master_GPIO_Port, &GPIO_InitStruct);
 800666a:	f107 031c 	add.w	r3, r7, #28
 800666e:	4619      	mov	r1, r3
 8006670:	4841      	ldr	r0, [pc, #260]	@ (8006778 <MX_GPIO_Init+0x258>)
 8006672:	f001 f8bf 	bl	80077f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8006676:	f244 0381 	movw	r3, #16513	@ 0x4081
 800667a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800667c:	2301      	movs	r3, #1
 800667e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006680:	2300      	movs	r3, #0
 8006682:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006684:	2300      	movs	r3, #0
 8006686:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006688:	f107 031c 	add.w	r3, r7, #28
 800668c:	4619      	mov	r1, r3
 800668e:	483b      	ldr	r0, [pc, #236]	@ (800677c <MX_GPIO_Init+0x25c>)
 8006690:	f001 f8b0 	bl	80077f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006694:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800669a:	2302      	movs	r3, #2
 800669c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800669e:	2300      	movs	r3, #0
 80066a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066a2:	2303      	movs	r3, #3
 80066a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80066a6:	230b      	movs	r3, #11
 80066a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80066aa:	f107 031c 	add.w	r3, r7, #28
 80066ae:	4619      	mov	r1, r3
 80066b0:	4832      	ldr	r0, [pc, #200]	@ (800677c <MX_GPIO_Init+0x25c>)
 80066b2:	f001 f89f 	bl	80077f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80066b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80066ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066bc:	2302      	movs	r3, #2
 80066be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066c0:	2300      	movs	r3, #0
 80066c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066c4:	2303      	movs	r3, #3
 80066c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80066c8:	2307      	movs	r3, #7
 80066ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80066cc:	f107 031c 	add.w	r3, r7, #28
 80066d0:	4619      	mov	r1, r3
 80066d2:	482d      	ldr	r0, [pc, #180]	@ (8006788 <MX_GPIO_Init+0x268>)
 80066d4:	f001 f88e 	bl	80077f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80066d8:	2340      	movs	r3, #64	@ 0x40
 80066da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066dc:	2301      	movs	r3, #1
 80066de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066e0:	2300      	movs	r3, #0
 80066e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066e4:	2300      	movs	r3, #0
 80066e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80066e8:	f107 031c 	add.w	r3, r7, #28
 80066ec:	4619      	mov	r1, r3
 80066ee:	4824      	ldr	r0, [pc, #144]	@ (8006780 <MX_GPIO_Init+0x260>)
 80066f0:	f001 f880 	bl	80077f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80066f4:	2380      	movs	r3, #128	@ 0x80
 80066f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80066f8:	2300      	movs	r3, #0
 80066fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066fc:	2300      	movs	r3, #0
 80066fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8006700:	f107 031c 	add.w	r3, r7, #28
 8006704:	4619      	mov	r1, r3
 8006706:	481e      	ldr	r0, [pc, #120]	@ (8006780 <MX_GPIO_Init+0x260>)
 8006708:	f001 f874 	bl	80077f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800670c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8006710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006712:	2302      	movs	r3, #2
 8006714:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006716:	2300      	movs	r3, #0
 8006718:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800671a:	2303      	movs	r3, #3
 800671c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800671e:	230a      	movs	r3, #10
 8006720:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006722:	f107 031c 	add.w	r3, r7, #28
 8006726:	4619      	mov	r1, r3
 8006728:	4813      	ldr	r0, [pc, #76]	@ (8006778 <MX_GPIO_Init+0x258>)
 800672a:	f001 f863 	bl	80077f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800672e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006734:	2300      	movs	r3, #0
 8006736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006738:	2300      	movs	r3, #0
 800673a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800673c:	f107 031c 	add.w	r3, r7, #28
 8006740:	4619      	mov	r1, r3
 8006742:	480d      	ldr	r0, [pc, #52]	@ (8006778 <MX_GPIO_Init+0x258>)
 8006744:	f001 f856 	bl	80077f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006748:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800674c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800674e:	2302      	movs	r3, #2
 8006750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006752:	2300      	movs	r3, #0
 8006754:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006756:	2303      	movs	r3, #3
 8006758:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800675a:	230b      	movs	r3, #11
 800675c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800675e:	f107 031c 	add.w	r3, r7, #28
 8006762:	4619      	mov	r1, r3
 8006764:	4806      	ldr	r0, [pc, #24]	@ (8006780 <MX_GPIO_Init+0x260>)
 8006766:	f001 f845 	bl	80077f4 <HAL_GPIO_Init>

}
 800676a:	bf00      	nop
 800676c:	3730      	adds	r7, #48	@ 0x30
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	40023800 	.word	0x40023800
 8006778:	40020000 	.word	0x40020000
 800677c:	40020400 	.word	0x40020400
 8006780:	40021800 	.word	0x40021800
 8006784:	40020800 	.word	0x40020800
 8006788:	40020c00 	.word	0x40020c00

0800678c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800678c:	b5b0      	push	{r4, r5, r7, lr}
 800678e:	f5ad 4dfb 	sub.w	sp, sp, #32128	@ 0x7d80
 8006792:	b082      	sub	sp, #8
 8006794:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
  char file_read[25] = {0};
 8006796:	2300      	movs	r3, #0
 8006798:	f647 523c 	movw	r2, #32060	@ 0x7d3c
 800679c:	443a      	add	r2, r7
 800679e:	6013      	str	r3, [r2, #0]
 80067a0:	f647 5340 	movw	r3, #32064	@ 0x7d40
 80067a4:	443b      	add	r3, r7
 80067a6:	2200      	movs	r2, #0
 80067a8:	601a      	str	r2, [r3, #0]
 80067aa:	605a      	str	r2, [r3, #4]
 80067ac:	609a      	str	r2, [r3, #8]
 80067ae:	60da      	str	r2, [r3, #12]
 80067b0:	611a      	str	r2, [r3, #16]
 80067b2:	751a      	strb	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80067b4:	f000 feb7 	bl	8007526 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80067b8:	f000 fa3c 	bl	8006c34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80067bc:	f7ff feb0 	bl	8006520 <MX_GPIO_Init>
  MX_SPI3_Init();
 80067c0:	f000 fc80 	bl	80070c4 <MX_SPI3_Init>
  MX_FATFS_Init();
 80067c4:	f002 fc54 	bl	8009070 <MX_FATFS_Init>
  MX_SPI1_Init();
 80067c8:	f000 fc3e 	bl	8007048 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  uint32_t start_time = 0;
 80067cc:	2300      	movs	r3, #0
 80067ce:	f647 5264 	movw	r2, #32100	@ 0x7d64
 80067d2:	443a      	add	r2, r7
 80067d4:	6013      	str	r3, [r2, #0]
  uint16_t file_cont = 1;
 80067d6:	2301      	movs	r3, #1
 80067d8:	f647 527e 	movw	r2, #32126	@ 0x7d7e
 80067dc:	443a      	add	r2, r7
 80067de:	8013      	strh	r3, [r2, #0]

  FATFS fs;
  FRESULT res;

  // Monta o sistema de arquivos na unidade lógica "0:"
  res = f_mount(&fs, "0:", 1);
 80067e0:	f647 23bc 	movw	r3, #31420	@ 0x7abc
 80067e4:	443b      	add	r3, r7
 80067e6:	2201      	movs	r2, #1
 80067e8:	49b6      	ldr	r1, [pc, #728]	@ (8006ac4 <main+0x338>)
 80067ea:	4618      	mov	r0, r3
 80067ec:	f005 ff60 	bl	800c6b0 <f_mount>
 80067f0:	4603      	mov	r3, r0
 80067f2:	f647 5263 	movw	r2, #32099	@ 0x7d63
 80067f6:	443a      	add	r2, r7
 80067f8:	7013      	strb	r3, [r2, #0]
  if (res != FR_OK) {
 80067fa:	f647 5363 	movw	r3, #32099	@ 0x7d63
 80067fe:	443b      	add	r3, r7
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d001      	beq.n	800680a <main+0x7e>
      //printf("Falha ao montar o sistema de arquivos: %d\n", res);
      Error_Handler(); // ou retorne um erro
 8006806:	f000 fa7b 	bl	8006d00 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(file_cont >= 3001)
 800680a:	f647 537e 	movw	r3, #32126	@ 0x7d7e
 800680e:	443b      	add	r3, r7
 8006810:	881b      	ldrh	r3, [r3, #0]
 8006812:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8006816:	4293      	cmp	r3, r2
 8006818:	d901      	bls.n	800681e <main+0x92>
	{
		return 1;
 800681a:	2301      	movs	r3, #1
 800681c:	e1fc      	b.n	8006c18 <main+0x48c>
	}

	sprintf(file_read, "0:/DATA1/run%d.txt", file_cont);  // Prefixo de volume (0:) é comum no FatFs
 800681e:	f647 537e 	movw	r3, #32126	@ 0x7d7e
 8006822:	443b      	add	r3, r7
 8006824:	881a      	ldrh	r2, [r3, #0]
 8006826:	f647 533c 	movw	r3, #32060	@ 0x7d3c
 800682a:	443b      	add	r3, r7
 800682c:	49a6      	ldr	r1, [pc, #664]	@ (8006ac8 <main+0x33c>)
 800682e:	4618      	mov	r0, r3
 8006830:	f008 fd72 	bl	800f318 <siprintf>

	FIL fil;
	FRESULT res;

	res = f_open(&fil, file_read, FA_READ);
 8006834:	f647 513c 	movw	r1, #32060	@ 0x7d3c
 8006838:	4439      	add	r1, r7
 800683a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800683e:	2201      	movs	r2, #1
 8006840:	4618      	mov	r0, r3
 8006842:	f005 ff7b 	bl	800c73c <f_open>
 8006846:	4603      	mov	r3, r0
 8006848:	f647 5262 	movw	r2, #32098	@ 0x7d62
 800684c:	443a      	add	r2, r7
 800684e:	7013      	strb	r3, [r2, #0]
	if (res != FR_OK)
 8006850:	f647 5362 	movw	r3, #32098	@ 0x7d62
 8006854:	443b      	add	r3, r7
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d001      	beq.n	8006860 <main+0xd4>
	{
		return 1;
 800685c:	2301      	movs	r3, #1
 800685e:	e1db      	b.n	8006c18 <main+0x48c>
	}

	char line[30670];
	UINT br; // Bytes lidos

	float *linhas[] = {mx, my, mz};  // Vetor de ponteiros para facilitar o acesso
 8006860:	f507 43fb 	add.w	r3, r7, #32128	@ 0x7d80
 8006864:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 8006868:	4a98      	ldr	r2, [pc, #608]	@ (8006acc <main+0x340>)
 800686a:	ca07      	ldmia	r2, {r0, r1, r2}
 800686c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	for (int i = 0; i < 3; i++)
 8006870:	2300      	movs	r3, #0
 8006872:	f647 5278 	movw	r2, #32120	@ 0x7d78
 8006876:	443a      	add	r2, r7
 8006878:	6013      	str	r3, [r2, #0]
 800687a:	e0ad      	b.n	80069d8 <main+0x24c>
	{
		// lê uma linha completa (até '\n' ou fim do buffer)
		int line_pos = 0;
 800687c:	2300      	movs	r3, #0
 800687e:	f647 5274 	movw	r2, #32116	@ 0x7d74
 8006882:	443a      	add	r2, r7
 8006884:	6013      	str	r3, [r2, #0]
		char ch;
		do {
			res = f_read(&fil, &ch, 1, &br);
 8006886:	f647 23b8 	movw	r3, #31416	@ 0x7ab8
 800688a:	443b      	add	r3, r7
 800688c:	f647 21a7 	movw	r1, #31399	@ 0x7aa7
 8006890:	4439      	add	r1, r7
 8006892:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8006896:	2201      	movs	r2, #1
 8006898:	f006 fa0d 	bl	800ccb6 <f_read>
 800689c:	4603      	mov	r3, r0
 800689e:	f647 5262 	movw	r2, #32098	@ 0x7d62
 80068a2:	443a      	add	r2, r7
 80068a4:	7013      	strb	r3, [r2, #0]
			if (res != FR_OK || br == 0) {
 80068a6:	f647 5362 	movw	r3, #32098	@ 0x7d62
 80068aa:	443b      	add	r3, r7
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d106      	bne.n	80068c0 <main+0x134>
 80068b2:	f507 43fb 	add.w	r3, r7, #32128	@ 0x7d80
 80068b6:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d101      	bne.n	80068c4 <main+0x138>
				return 1;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e1a9      	b.n	8006c18 <main+0x48c>
			}
			line[line_pos++] = ch;
 80068c4:	f647 5374 	movw	r3, #32116	@ 0x7d74
 80068c8:	443b      	add	r3, r7
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	1c5a      	adds	r2, r3, #1
 80068ce:	f647 5174 	movw	r1, #32116	@ 0x7d74
 80068d2:	4439      	add	r1, r7
 80068d4:	600a      	str	r2, [r1, #0]
 80068d6:	f507 42fb 	add.w	r2, r7, #32128	@ 0x7d80
 80068da:	f2a2 22d9 	subw	r2, r2, #729	@ 0x2d9
 80068de:	7811      	ldrb	r1, [r2, #0]
 80068e0:	f507 6258 	add.w	r2, r7, #3456	@ 0xd80
 80068e4:	f6a2 22a8 	subw	r2, r2, #2728	@ 0xaa8
 80068e8:	54d1      	strb	r1, [r2, r3]
		} while (ch != '\n' && line_pos < sizeof(line)-1);
 80068ea:	f507 43fb 	add.w	r3, r7, #32128	@ 0x7d80
 80068ee:	f2a3 23d9 	subw	r3, r3, #729	@ 0x2d9
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	2b0a      	cmp	r3, #10
 80068f6:	d007      	beq.n	8006908 <main+0x17c>
 80068f8:	f647 5374 	movw	r3, #32116	@ 0x7d74
 80068fc:	443b      	add	r3, r7
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f247 72cc 	movw	r2, #30668	@ 0x77cc
 8006904:	4293      	cmp	r3, r2
 8006906:	d9be      	bls.n	8006886 <main+0xfa>
		line[line_pos] = '\0';
 8006908:	f507 6358 	add.w	r3, r7, #3456	@ 0xd80
 800690c:	f6a3 22a8 	subw	r2, r3, #2728	@ 0xaa8
 8006910:	f647 5374 	movw	r3, #32116	@ 0x7d74
 8006914:	443b      	add	r3, r7
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4413      	add	r3, r2
 800691a:	2200      	movs	r2, #0
 800691c:	701a      	strb	r2, [r3, #0]

		char *token = strtok(line, ",");
 800691e:	4b6c      	ldr	r3, [pc, #432]	@ (8006ad0 <main+0x344>)
 8006920:	f503 43fb 	add.w	r3, r3, #32128	@ 0x7d80
 8006924:	443b      	add	r3, r7
 8006926:	496b      	ldr	r1, [pc, #428]	@ (8006ad4 <main+0x348>)
 8006928:	4618      	mov	r0, r3
 800692a:	f008 fd73 	bl	800f414 <strtok>
 800692e:	f647 5370 	movw	r3, #32112	@ 0x7d70
 8006932:	443b      	add	r3, r7
 8006934:	6018      	str	r0, [r3, #0]
		int j = 0;
 8006936:	2300      	movs	r3, #0
 8006938:	f647 526c 	movw	r2, #32108	@ 0x7d6c
 800693c:	443a      	add	r2, r7
 800693e:	6013      	str	r3, [r2, #0]

		while (token != NULL && j < tam)
 8006940:	e02b      	b.n	800699a <main+0x20e>
		{
			linhas[i][j] = strtof(token, NULL);
 8006942:	f507 43fb 	add.w	r3, r7, #32128	@ 0x7d80
 8006946:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 800694a:	f647 5278 	movw	r2, #32120	@ 0x7d78
 800694e:	443a      	add	r2, r7
 8006950:	6812      	ldr	r2, [r2, #0]
 8006952:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006956:	f647 536c 	movw	r3, #32108	@ 0x7d6c
 800695a:	443b      	add	r3, r7
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	18d4      	adds	r4, r2, r3
 8006962:	2100      	movs	r1, #0
 8006964:	f647 5370 	movw	r3, #32112	@ 0x7d70
 8006968:	443b      	add	r3, r7
 800696a:	6818      	ldr	r0, [r3, #0]
 800696c:	f007 fd42 	bl	800e3f4 <strtof>
 8006970:	eef0 7a40 	vmov.f32	s15, s0
 8006974:	edc4 7a00 	vstr	s15, [r4]
			token = strtok(NULL, ",");
 8006978:	4956      	ldr	r1, [pc, #344]	@ (8006ad4 <main+0x348>)
 800697a:	2000      	movs	r0, #0
 800697c:	f008 fd4a 	bl	800f414 <strtok>
 8006980:	f647 5370 	movw	r3, #32112	@ 0x7d70
 8006984:	443b      	add	r3, r7
 8006986:	6018      	str	r0, [r3, #0]
			j++;
 8006988:	f647 536c 	movw	r3, #32108	@ 0x7d6c
 800698c:	443b      	add	r3, r7
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	3301      	adds	r3, #1
 8006992:	f647 526c 	movw	r2, #32108	@ 0x7d6c
 8006996:	443a      	add	r2, r7
 8006998:	6013      	str	r3, [r2, #0]
		while (token != NULL && j < tam)
 800699a:	f647 5370 	movw	r3, #32112	@ 0x7d70
 800699e:	443b      	add	r3, r7
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d006      	beq.n	80069b4 <main+0x228>
 80069a6:	f647 536c 	movw	r3, #32108	@ 0x7d6c
 80069aa:	443b      	add	r3, r7
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 80069b2:	dbc6      	blt.n	8006942 <main+0x1b6>
		}

		if (j != tam)
 80069b4:	f647 536c 	movw	r3, #32108	@ 0x7d6c
 80069b8:	443b      	add	r3, r7
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 80069c0:	d001      	beq.n	80069c6 <main+0x23a>
		{
			return 1;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e128      	b.n	8006c18 <main+0x48c>
	for (int i = 0; i < 3; i++)
 80069c6:	f647 5378 	movw	r3, #32120	@ 0x7d78
 80069ca:	443b      	add	r3, r7
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	3301      	adds	r3, #1
 80069d0:	f647 5278 	movw	r2, #32120	@ 0x7d78
 80069d4:	443a      	add	r2, r7
 80069d6:	6013      	str	r3, [r2, #0]
 80069d8:	f647 5378 	movw	r3, #32120	@ 0x7d78
 80069dc:	443b      	add	r3, r7
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	f77f af4b 	ble.w	800687c <main+0xf0>
		}
	}

	f_close(&fil);
 80069e6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80069ea:	4618      	mov	r0, r3
 80069ec:	f006 fdad 	bl	800d54a <f_close>
		mx_[i].flutuante = mx[i];
		my_[i].flutuante = my[i];
		mz_[i].flutuante = mz[i];
	}*/

	start_time = HAL_GetTick();
 80069f0:	f000 fdea 	bl	80075c8 <HAL_GetTick>
 80069f4:	f647 5364 	movw	r3, #32100	@ 0x7d64
 80069f8:	443b      	add	r3, r7
 80069fa:	6018      	str	r0, [r3, #0]
	ETS(mx, my, mz, p0);
 80069fc:	f647 43f4 	movw	r3, #31988	@ 0x7cf4
 8006a00:	443b      	add	r3, r7
 8006a02:	4a35      	ldr	r2, [pc, #212]	@ (8006ad8 <main+0x34c>)
 8006a04:	4935      	ldr	r1, [pc, #212]	@ (8006adc <main+0x350>)
 8006a06:	4836      	ldr	r0, [pc, #216]	@ (8006ae0 <main+0x354>)
 8006a08:	f7fd fe1a 	bl	8004640 <ETS>
	ETS_time = HAL_GetTick() - start_time;
 8006a0c:	f000 fddc 	bl	80075c8 <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	f647 5364 	movw	r3, #32100	@ 0x7d64
 8006a16:	443b      	add	r3, r7
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	ee07 3a90 	vmov	s15, r3
 8006a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a24:	f647 535c 	movw	r3, #32092	@ 0x7d5c
 8006a28:	443b      	add	r3, r7
 8006a2a:	edc3 7a00 	vstr	s15, [r3]

	start_time = HAL_GetTick();
 8006a2e:	f000 fdcb 	bl	80075c8 <HAL_GetTick>
 8006a32:	f647 5364 	movw	r3, #32100	@ 0x7d64
 8006a36:	443b      	add	r3, r7
 8006a38:	6018      	str	r0, [r3, #0]
	passos_NLLS = NLLS(mx, my, mz, p1);
 8006a3a:	f647 5318 	movw	r3, #32024	@ 0x7d18
 8006a3e:	443b      	add	r3, r7
 8006a40:	4a25      	ldr	r2, [pc, #148]	@ (8006ad8 <main+0x34c>)
 8006a42:	4926      	ldr	r1, [pc, #152]	@ (8006adc <main+0x350>)
 8006a44:	4826      	ldr	r0, [pc, #152]	@ (8006ae0 <main+0x354>)
 8006a46:	f7fa fc07 	bl	8001258 <NLLS>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	4b25      	ldr	r3, [pc, #148]	@ (8006ae4 <main+0x358>)
 8006a50:	701a      	strb	r2, [r3, #0]
	NLLS_time = HAL_GetTick() - start_time;
 8006a52:	f000 fdb9 	bl	80075c8 <HAL_GetTick>
 8006a56:	4602      	mov	r2, r0
 8006a58:	f647 5364 	movw	r3, #32100	@ 0x7d64
 8006a5c:	443b      	add	r3, r7
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	ee07 3a90 	vmov	s15, r3
 8006a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a6a:	f647 5358 	movw	r3, #32088	@ 0x7d58
 8006a6e:	443b      	add	r3, r7
 8006a70:	edc3 7a00 	vstr	s15, [r3]
	{
		p0[i] = param1[i].flutuante;
		p1[i] = param2[i].flutuante;
	}*/

	sprintf(file_read, "0:/RES/run%d.txt", file_cont);
 8006a74:	f647 537e 	movw	r3, #32126	@ 0x7d7e
 8006a78:	443b      	add	r3, r7
 8006a7a:	881a      	ldrh	r2, [r3, #0]
 8006a7c:	f647 533c 	movw	r3, #32060	@ 0x7d3c
 8006a80:	443b      	add	r3, r7
 8006a82:	4919      	ldr	r1, [pc, #100]	@ (8006ae8 <main+0x35c>)
 8006a84:	4618      	mov	r0, r3
 8006a86:	f008 fc47 	bl	800f318 <siprintf>
	res = f_open(&fil, file_read, FA_WRITE | FA_CREATE_ALWAYS);
 8006a8a:	f647 513c 	movw	r1, #32060	@ 0x7d3c
 8006a8e:	4439      	add	r1, r7
 8006a90:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8006a94:	220a      	movs	r2, #10
 8006a96:	4618      	mov	r0, r3
 8006a98:	f005 fe50 	bl	800c73c <f_open>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	f647 5262 	movw	r2, #32098	@ 0x7d62
 8006aa2:	443a      	add	r2, r7
 8006aa4:	7013      	strb	r3, [r2, #0]
	if (res != FR_OK)
 8006aa6:	f647 5362 	movw	r3, #32098	@ 0x7d62
 8006aaa:	443b      	add	r3, r7
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <main+0x32a>
	{
		return 1;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e0b0      	b.n	8006c18 <main+0x48c>
	}

	char out_line[128];
	UINT bw;

	for (int i = 0; i < 9; i++) {
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f647 5268 	movw	r2, #32104	@ 0x7d68
 8006abc:	443a      	add	r2, r7
 8006abe:	6013      	str	r3, [r2, #0]
 8006ac0:	e050      	b.n	8006b64 <main+0x3d8>
 8006ac2:	bf00      	nop
 8006ac4:	08012d54 	.word	0x08012d54
 8006ac8:	08012d58 	.word	0x08012d58
 8006acc:	08012d94 	.word	0x08012d94
 8006ad0:	ffff8558 	.word	0xffff8558
 8006ad4:	08012d6c 	.word	0x08012d6c
 8006ad8:	200024c4 	.word	0x200024c4
 8006adc:	20001364 	.word	0x20001364
 8006ae0:	20000204 	.word	0x20000204
 8006ae4:	20003624 	.word	0x20003624
 8006ae8:	08012d70 	.word	0x08012d70
		sprintf(out_line, "%f, %f\n", p0[i], p1[i]);
 8006aec:	f647 5368 	movw	r3, #32104	@ 0x7d68
 8006af0:	443b      	add	r3, r7
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	f503 43fb 	add.w	r3, r3, #32128	@ 0x7d80
 8006afa:	443b      	add	r3, r7
 8006afc:	3b8c      	subs	r3, #140	@ 0x8c
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7f9 fd41 	bl	8000588 <__aeabi_f2d>
 8006b06:	4604      	mov	r4, r0
 8006b08:	460d      	mov	r5, r1
 8006b0a:	f647 5368 	movw	r3, #32104	@ 0x7d68
 8006b0e:	443b      	add	r3, r7
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	f503 43fb 	add.w	r3, r3, #32128	@ 0x7d80
 8006b18:	443b      	add	r3, r7
 8006b1a:	3b68      	subs	r3, #104	@ 0x68
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f7f9 fd32 	bl	8000588 <__aeabi_f2d>
 8006b24:	4602      	mov	r2, r0
 8006b26:	460b      	mov	r3, r1
 8006b28:	4638      	mov	r0, r7
 8006b2a:	e9cd 2300 	strd	r2, r3, [sp]
 8006b2e:	4622      	mov	r2, r4
 8006b30:	462b      	mov	r3, r5
 8006b32:	493c      	ldr	r1, [pc, #240]	@ (8006c24 <main+0x498>)
 8006b34:	f008 fbf0 	bl	800f318 <siprintf>
		f_write(&fil, out_line, strlen(out_line), &bw);
 8006b38:	463b      	mov	r3, r7
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7f9 fbb8 	bl	80002b0 <strlen>
 8006b40:	4602      	mov	r2, r0
 8006b42:	f647 23a8 	movw	r3, #31400	@ 0x7aa8
 8006b46:	443b      	add	r3, r7
 8006b48:	4639      	mov	r1, r7
 8006b4a:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8006b4e:	f006 fa2a 	bl	800cfa6 <f_write>
	for (int i = 0; i < 9; i++) {
 8006b52:	f647 5368 	movw	r3, #32104	@ 0x7d68
 8006b56:	443b      	add	r3, r7
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	f647 5268 	movw	r2, #32104	@ 0x7d68
 8006b60:	443a      	add	r2, r7
 8006b62:	6013      	str	r3, [r2, #0]
 8006b64:	f647 5368 	movw	r3, #32104	@ 0x7d68
 8006b68:	443b      	add	r3, r7
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2b08      	cmp	r3, #8
 8006b6e:	ddbd      	ble.n	8006aec <main+0x360>
	}

	sprintf(out_line, "%f, %f\n", ETS_time, NLLS_time);
 8006b70:	f647 535c 	movw	r3, #32092	@ 0x7d5c
 8006b74:	443b      	add	r3, r7
 8006b76:	6818      	ldr	r0, [r3, #0]
 8006b78:	f7f9 fd06 	bl	8000588 <__aeabi_f2d>
 8006b7c:	4604      	mov	r4, r0
 8006b7e:	460d      	mov	r5, r1
 8006b80:	f647 5358 	movw	r3, #32088	@ 0x7d58
 8006b84:	443b      	add	r3, r7
 8006b86:	6818      	ldr	r0, [r3, #0]
 8006b88:	f7f9 fcfe 	bl	8000588 <__aeabi_f2d>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	460b      	mov	r3, r1
 8006b90:	4638      	mov	r0, r7
 8006b92:	e9cd 2300 	strd	r2, r3, [sp]
 8006b96:	4622      	mov	r2, r4
 8006b98:	462b      	mov	r3, r5
 8006b9a:	4922      	ldr	r1, [pc, #136]	@ (8006c24 <main+0x498>)
 8006b9c:	f008 fbbc 	bl	800f318 <siprintf>
	f_write(&fil, out_line, strlen(out_line), &bw);
 8006ba0:	463b      	mov	r3, r7
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7f9 fb84 	bl	80002b0 <strlen>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	f647 23a8 	movw	r3, #31400	@ 0x7aa8
 8006bae:	443b      	add	r3, r7
 8006bb0:	4639      	mov	r1, r7
 8006bb2:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8006bb6:	f006 f9f6 	bl	800cfa6 <f_write>

	sprintf(out_line, "0, %u\n", passos_NLLS);
 8006bba:	4b1b      	ldr	r3, [pc, #108]	@ (8006c28 <main+0x49c>)
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	463b      	mov	r3, r7
 8006bc2:	491a      	ldr	r1, [pc, #104]	@ (8006c2c <main+0x4a0>)
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f008 fba7 	bl	800f318 <siprintf>
	f_write(&fil, out_line, strlen(out_line), &bw);
 8006bca:	463b      	mov	r3, r7
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7f9 fb6f 	bl	80002b0 <strlen>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	f647 23a8 	movw	r3, #31400	@ 0x7aa8
 8006bd8:	443b      	add	r3, r7
 8006bda:	4639      	mov	r1, r7
 8006bdc:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8006be0:	f006 f9e1 	bl	800cfa6 <f_write>

	f_close(&fil);
 8006be4:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8006be8:	4618      	mov	r0, r3
 8006bea:	f006 fcae 	bl	800d54a <f_close>

	file_cont++;
 8006bee:	f647 537e 	movw	r3, #32126	@ 0x7d7e
 8006bf2:	443b      	add	r3, r7
 8006bf4:	881b      	ldrh	r3, [r3, #0]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	f647 527e 	movw	r2, #32126	@ 0x7d7e
 8006bfc:	443a      	add	r2, r7
 8006bfe:	8013      	strh	r3, [r2, #0]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8006c00:	2180      	movs	r1, #128	@ 0x80
 8006c02:	480b      	ldr	r0, [pc, #44]	@ (8006c30 <main+0x4a4>)
 8006c04:	f000 ffbb 	bl	8007b7e <HAL_GPIO_TogglePin>
	HAL_Delay(10);
 8006c08:	200a      	movs	r0, #10
 8006c0a:	f000 fce9 	bl	80075e0 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8006c0e:	2180      	movs	r1, #128	@ 0x80
 8006c10:	4807      	ldr	r0, [pc, #28]	@ (8006c30 <main+0x4a4>)
 8006c12:	f000 ffb4 	bl	8007b7e <HAL_GPIO_TogglePin>
  {
 8006c16:	e5f8      	b.n	800680a <main+0x7e>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f507 47fb 	add.w	r7, r7, #32128	@ 0x7d80
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bdb0      	pop	{r4, r5, r7, pc}
 8006c22:	bf00      	nop
 8006c24:	08012d84 	.word	0x08012d84
 8006c28:	20003624 	.word	0x20003624
 8006c2c:	08012d8c 	.word	0x08012d8c
 8006c30:	40020400 	.word	0x40020400

08006c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b094      	sub	sp, #80	@ 0x50
 8006c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006c3a:	f107 0320 	add.w	r3, r7, #32
 8006c3e:	2230      	movs	r2, #48	@ 0x30
 8006c40:	2100      	movs	r1, #0
 8006c42:	4618      	mov	r0, r3
 8006c44:	f008 fbcb 	bl	800f3de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006c48:	f107 030c 	add.w	r3, r7, #12
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	601a      	str	r2, [r3, #0]
 8006c50:	605a      	str	r2, [r3, #4]
 8006c52:	609a      	str	r2, [r3, #8]
 8006c54:	60da      	str	r2, [r3, #12]
 8006c56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006c58:	4b27      	ldr	r3, [pc, #156]	@ (8006cf8 <SystemClock_Config+0xc4>)
 8006c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c5c:	4a26      	ldr	r2, [pc, #152]	@ (8006cf8 <SystemClock_Config+0xc4>)
 8006c5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c62:	6413      	str	r3, [r2, #64]	@ 0x40
 8006c64:	4b24      	ldr	r3, [pc, #144]	@ (8006cf8 <SystemClock_Config+0xc4>)
 8006c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c6c:	60bb      	str	r3, [r7, #8]
 8006c6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c70:	4b22      	ldr	r3, [pc, #136]	@ (8006cfc <SystemClock_Config+0xc8>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a21      	ldr	r2, [pc, #132]	@ (8006cfc <SystemClock_Config+0xc8>)
 8006c76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c7a:	6013      	str	r3, [r2, #0]
 8006c7c:	4b1f      	ldr	r3, [pc, #124]	@ (8006cfc <SystemClock_Config+0xc8>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006c84:	607b      	str	r3, [r7, #4]
 8006c86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006c88:	2302      	movs	r3, #2
 8006c8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006c90:	2310      	movs	r3, #16
 8006c92:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006c94:	2302      	movs	r3, #2
 8006c96:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006c9c:	2308      	movs	r3, #8
 8006c9e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8006ca0:	23b4      	movs	r3, #180	@ 0xb4
 8006ca2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8006ca8:	2302      	movs	r3, #2
 8006caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006cac:	f107 0320 	add.w	r3, r7, #32
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f000 ff7f 	bl	8007bb4 <HAL_RCC_OscConfig>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d001      	beq.n	8006cc0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8006cbc:	f000 f820 	bl	8006d00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006cc0:	230f      	movs	r3, #15
 8006cc2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006ccc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8006cd0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006cd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006cd6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006cd8:	f107 030c 	add.w	r3, r7, #12
 8006cdc:	2105      	movs	r1, #5
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f001 fa0c 	bl	80080fc <HAL_RCC_ClockConfig>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d001      	beq.n	8006cee <SystemClock_Config+0xba>
  {
    Error_Handler();
 8006cea:	f000 f809 	bl	8006d00 <Error_Handler>
  }
}
 8006cee:	bf00      	nop
 8006cf0:	3750      	adds	r7, #80	@ 0x50
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	40023800 	.word	0x40023800
 8006cfc:	40007000 	.word	0x40007000

08006d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006d04:	b672      	cpsid	i
}
 8006d06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 8006d08:	2201      	movs	r2, #1
 8006d0a:	2101      	movs	r1, #1
 8006d0c:	4802      	ldr	r0, [pc, #8]	@ (8006d18 <Error_Handler+0x18>)
 8006d0e:	f000 ff1d 	bl	8007b4c <HAL_GPIO_WritePin>
  while (1)
 8006d12:	bf00      	nop
 8006d14:	e7fd      	b.n	8006d12 <Error_Handler+0x12>
 8006d16:	bf00      	nop
 8006d18:	40020400 	.word	0x40020400

08006d1c <SD_SendDummyClock>:
#define SD_CS_LOW()   HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET)
#define SD_CS_HIGH()  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET)

extern SPI_HandleTypeDef hspi3; // Use a instância correta do SPI

static void SD_SendDummyClock(void) {
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
    uint8_t dummy = 0xFF;
 8006d22:	23ff      	movs	r3, #255	@ 0xff
 8006d24:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < 10; i++)
 8006d26:	2300      	movs	r3, #0
 8006d28:	607b      	str	r3, [r7, #4]
 8006d2a:	e009      	b.n	8006d40 <SD_SendDummyClock+0x24>
        HAL_SPI_Transmit(&hspi3, &dummy, 1, HAL_MAX_DELAY);
 8006d2c:	1cf9      	adds	r1, r7, #3
 8006d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d32:	2201      	movs	r2, #1
 8006d34:	4806      	ldr	r0, [pc, #24]	@ (8006d50 <SD_SendDummyClock+0x34>)
 8006d36:	f001 fc7e 	bl	8008636 <HAL_SPI_Transmit>
    for (int i = 0; i < 10; i++)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	607b      	str	r3, [r7, #4]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2b09      	cmp	r3, #9
 8006d44:	ddf2      	ble.n	8006d2c <SD_SendDummyClock+0x10>
}
 8006d46:	bf00      	nop
 8006d48:	bf00      	nop
 8006d4a:	3708      	adds	r7, #8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	2000368c 	.word	0x2000368c

08006d54 <SD_TransmitByte>:

static uint8_t SD_TransmitByte(uint8_t data) {
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b086      	sub	sp, #24
 8006d58:	af02      	add	r7, sp, #8
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	71fb      	strb	r3, [r7, #7]
    uint8_t received;
    HAL_SPI_TransmitReceive(&hspi3, &data, &received, 1, HAL_MAX_DELAY);
 8006d5e:	f107 020f 	add.w	r2, r7, #15
 8006d62:	1df9      	adds	r1, r7, #7
 8006d64:	f04f 33ff 	mov.w	r3, #4294967295
 8006d68:	9300      	str	r3, [sp, #0]
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	4803      	ldr	r0, [pc, #12]	@ (8006d7c <SD_TransmitByte+0x28>)
 8006d6e:	f001 fdd8 	bl	8008922 <HAL_SPI_TransmitReceive>
    return received;
 8006d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3710      	adds	r7, #16
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	2000368c 	.word	0x2000368c

08006d80 <SD_ReceiveByte>:

static uint8_t SD_ReceiveByte(void) {
 8006d80:	b580      	push	{r7, lr}
 8006d82:	af00      	add	r7, sp, #0
    return SD_TransmitByte(0xFF);
 8006d84:	20ff      	movs	r0, #255	@ 0xff
 8006d86:	f7ff ffe5 	bl	8006d54 <SD_TransmitByte>
 8006d8a:	4603      	mov	r3, r0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <SD_WaitReady>:

static uint8_t SD_WaitReady(void) {
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
    uint8_t res;
    uint32_t timeout = HAL_GetTick();
 8006d96:	f000 fc17 	bl	80075c8 <HAL_GetTick>
 8006d9a:	6078      	str	r0, [r7, #4]
    do {
        res = SD_ReceiveByte();
 8006d9c:	f7ff fff0 	bl	8006d80 <SD_ReceiveByte>
 8006da0:	4603      	mov	r3, r0
 8006da2:	70fb      	strb	r3, [r7, #3]
        if (res == 0xFF) return 1;
 8006da4:	78fb      	ldrb	r3, [r7, #3]
 8006da6:	2bff      	cmp	r3, #255	@ 0xff
 8006da8:	d101      	bne.n	8006dae <SD_WaitReady+0x1e>
 8006daa:	2301      	movs	r3, #1
 8006dac:	e008      	b.n	8006dc0 <SD_WaitReady+0x30>
    } while ((HAL_GetTick() - timeout) < 500);
 8006dae:	f000 fc0b 	bl	80075c8 <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006dbc:	d3ee      	bcc.n	8006d9c <SD_WaitReady+0xc>
    return 0;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3708      	adds	r7, #8
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <SD_Select>:

static void SD_Select(void) {
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	af00      	add	r7, sp, #0
    SD_CS_LOW();
 8006dcc:	2200      	movs	r2, #0
 8006dce:	2110      	movs	r1, #16
 8006dd0:	4803      	ldr	r0, [pc, #12]	@ (8006de0 <SD_Select+0x18>)
 8006dd2:	f000 febb 	bl	8007b4c <HAL_GPIO_WritePin>
    SD_ReceiveByte();
 8006dd6:	f7ff ffd3 	bl	8006d80 <SD_ReceiveByte>
}
 8006dda:	bf00      	nop
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	40020000 	.word	0x40020000

08006de4 <SD_Deselect>:

static void SD_Deselect(void) {
 8006de4:	b580      	push	{r7, lr}
 8006de6:	af00      	add	r7, sp, #0
    SD_CS_HIGH();
 8006de8:	2201      	movs	r2, #1
 8006dea:	2110      	movs	r1, #16
 8006dec:	4803      	ldr	r0, [pc, #12]	@ (8006dfc <SD_Deselect+0x18>)
 8006dee:	f000 fead 	bl	8007b4c <HAL_GPIO_WritePin>
    SD_ReceiveByte();
 8006df2:	f7ff ffc5 	bl	8006d80 <SD_ReceiveByte>
}
 8006df6:	bf00      	nop
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	40020000 	.word	0x40020000

08006e00 <SD_SendCommand>:

static uint8_t SD_SendCommand(uint8_t cmd, uint32_t arg, uint8_t crc) {
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	4603      	mov	r3, r0
 8006e08:	6039      	str	r1, [r7, #0]
 8006e0a:	71fb      	strb	r3, [r7, #7]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[6];
    buf[0] = 0x40 | cmd;
 8006e10:	79fb      	ldrb	r3, [r7, #7]
 8006e12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	723b      	strb	r3, [r7, #8]
    buf[1] = (arg >> 24) & 0xFF;
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	0e1b      	lsrs	r3, r3, #24
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	727b      	strb	r3, [r7, #9]
    buf[2] = (arg >> 16) & 0xFF;
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	0c1b      	lsrs	r3, r3, #16
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	72bb      	strb	r3, [r7, #10]
    buf[3] = (arg >> 8) & 0xFF;
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	0a1b      	lsrs	r3, r3, #8
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	72fb      	strb	r3, [r7, #11]
    buf[4] = arg & 0xFF;
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	733b      	strb	r3, [r7, #12]
    buf[5] = crc;
 8006e38:	79bb      	ldrb	r3, [r7, #6]
 8006e3a:	737b      	strb	r3, [r7, #13]

    SD_Deselect();
 8006e3c:	f7ff ffd2 	bl	8006de4 <SD_Deselect>
    SD_Select();
 8006e40:	f7ff ffc2 	bl	8006dc8 <SD_Select>

    if (!SD_WaitReady()) {
 8006e44:	f7ff ffa4 	bl	8006d90 <SD_WaitReady>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d103      	bne.n	8006e56 <SD_SendCommand+0x56>
        SD_Deselect();
 8006e4e:	f7ff ffc9 	bl	8006de4 <SD_Deselect>
        return 0xFF;
 8006e52:	23ff      	movs	r3, #255	@ 0xff
 8006e54:	e024      	b.n	8006ea0 <SD_SendCommand+0xa0>
    }

    for (int i = 0; i < 6; i++)
 8006e56:	2300      	movs	r3, #0
 8006e58:	617b      	str	r3, [r7, #20]
 8006e5a:	e00a      	b.n	8006e72 <SD_SendCommand+0x72>
        SD_TransmitByte(buf[i]);
 8006e5c:	f107 0208 	add.w	r2, r7, #8
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	4413      	add	r3, r2
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7ff ff74 	bl	8006d54 <SD_TransmitByte>
    for (int i = 0; i < 6; i++)
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	617b      	str	r3, [r7, #20]
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	2b05      	cmp	r3, #5
 8006e76:	ddf1      	ble.n	8006e5c <SD_SendCommand+0x5c>

    // Aguarda resposta (bit 7 == 0)
    for (int i = 0; i < 10; i++) {
 8006e78:	2300      	movs	r3, #0
 8006e7a:	613b      	str	r3, [r7, #16]
 8006e7c:	e00c      	b.n	8006e98 <SD_SendCommand+0x98>
        uint8_t res = SD_ReceiveByte();
 8006e7e:	f7ff ff7f 	bl	8006d80 <SD_ReceiveByte>
 8006e82:	4603      	mov	r3, r0
 8006e84:	73fb      	strb	r3, [r7, #15]
        if ((res & 0x80) == 0)
 8006e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	db01      	blt.n	8006e92 <SD_SendCommand+0x92>
            return res;
 8006e8e:	7bfb      	ldrb	r3, [r7, #15]
 8006e90:	e006      	b.n	8006ea0 <SD_SendCommand+0xa0>
    for (int i = 0; i < 10; i++) {
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	3301      	adds	r3, #1
 8006e96:	613b      	str	r3, [r7, #16]
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	2b09      	cmp	r3, #9
 8006e9c:	ddef      	ble.n	8006e7e <SD_SendCommand+0x7e>
    }

    return 0xFF;
 8006e9e:	23ff      	movs	r3, #255	@ 0xff
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3718      	adds	r7, #24
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <SD_Init>:

uint8_t SD_Init(void) {
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
    SD_CS_HIGH();
 8006eae:	2201      	movs	r2, #1
 8006eb0:	2110      	movs	r1, #16
 8006eb2:	4820      	ldr	r0, [pc, #128]	@ (8006f34 <SD_Init+0x8c>)
 8006eb4:	f000 fe4a 	bl	8007b4c <HAL_GPIO_WritePin>
    SD_SendDummyClock(); // 80 clocks
 8006eb8:	f7ff ff30 	bl	8006d1c <SD_SendDummyClock>

    uint8_t res = SD_SendCommand(CMD0, 0, 0x95);
 8006ebc:	2295      	movs	r2, #149	@ 0x95
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	2000      	movs	r0, #0
 8006ec2:	f7ff ff9d 	bl	8006e00 <SD_SendCommand>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	71fb      	strb	r3, [r7, #7]
    if (res != 0x01) return SD_ERROR;
 8006eca:	79fb      	ldrb	r3, [r7, #7]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d001      	beq.n	8006ed4 <SD_Init+0x2c>
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e02b      	b.n	8006f2c <SD_Init+0x84>

    res = SD_SendCommand(CMD8, 0x1AA, 0x87);
 8006ed4:	2287      	movs	r2, #135	@ 0x87
 8006ed6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8006eda:	2008      	movs	r0, #8
 8006edc:	f7ff ff90 	bl	8006e00 <SD_SendCommand>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	71fb      	strb	r3, [r7, #7]
    if (res != 0x01) return SD_ERROR;
 8006ee4:	79fb      	ldrb	r3, [r7, #7]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d001      	beq.n	8006eee <SD_Init+0x46>
 8006eea:	2301      	movs	r3, #1
 8006eec:	e01e      	b.n	8006f2c <SD_Init+0x84>

    // Espera inicialização
    do {
        SD_SendCommand(CMD55, 0, 0x01);
 8006eee:	2201      	movs	r2, #1
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	2037      	movs	r0, #55	@ 0x37
 8006ef4:	f7ff ff84 	bl	8006e00 <SD_SendCommand>
        res = SD_SendCommand(ACMD41, 0x40000000, 0x01);
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006efe:	2029      	movs	r0, #41	@ 0x29
 8006f00:	f7ff ff7e 	bl	8006e00 <SD_SendCommand>
 8006f04:	4603      	mov	r3, r0
 8006f06:	71fb      	strb	r3, [r7, #7]
    } while (res != 0x00);
 8006f08:	79fb      	ldrb	r3, [r7, #7]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1ef      	bne.n	8006eee <SD_Init+0x46>

    res = SD_SendCommand(CMD58, 0, 0x01);
 8006f0e:	2201      	movs	r2, #1
 8006f10:	2100      	movs	r1, #0
 8006f12:	203a      	movs	r0, #58	@ 0x3a
 8006f14:	f7ff ff74 	bl	8006e00 <SD_SendCommand>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	71fb      	strb	r3, [r7, #7]
    SD_Deselect();
 8006f1c:	f7ff ff62 	bl	8006de4 <SD_Deselect>
    return (res == 0x00) ? SD_OK : SD_ERROR;
 8006f20:	79fb      	ldrb	r3, [r7, #7]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	bf14      	ite	ne
 8006f26:	2301      	movne	r3, #1
 8006f28:	2300      	moveq	r3, #0
 8006f2a:	b2db      	uxtb	r3, r3
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3708      	adds	r7, #8
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	40020000 	.word	0x40020000

08006f38 <SD_ReadBlock>:

uint8_t SD_ReadBlock(uint32_t blockAddr, uint8_t* buff) {
 8006f38:	b590      	push	{r4, r7, lr}
 8006f3a:	b087      	sub	sp, #28
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
    uint8_t token;

    if (SD_SendCommand(CMD17, blockAddr, 0x01) != 0x00)
 8006f42:	2201      	movs	r2, #1
 8006f44:	6879      	ldr	r1, [r7, #4]
 8006f46:	2011      	movs	r0, #17
 8006f48:	f7ff ff5a 	bl	8006e00 <SD_SendCommand>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <SD_ReadBlock+0x1e>
        return SD_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e030      	b.n	8006fb8 <SD_ReadBlock+0x80>

    // Espera token 0xFE (início do bloco)
    for (int i = 0; i < 10000; i++) {
 8006f56:	2300      	movs	r3, #0
 8006f58:	613b      	str	r3, [r7, #16]
 8006f5a:	e009      	b.n	8006f70 <SD_ReadBlock+0x38>
        token = SD_ReceiveByte();
 8006f5c:	f7ff ff10 	bl	8006d80 <SD_ReceiveByte>
 8006f60:	4603      	mov	r3, r0
 8006f62:	75fb      	strb	r3, [r7, #23]
        if (token == 0xFE) break;
 8006f64:	7dfb      	ldrb	r3, [r7, #23]
 8006f66:	2bfe      	cmp	r3, #254	@ 0xfe
 8006f68:	d008      	beq.n	8006f7c <SD_ReadBlock+0x44>
    for (int i = 0; i < 10000; i++) {
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	613b      	str	r3, [r7, #16]
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	f242 720f 	movw	r2, #9999	@ 0x270f
 8006f76:	4293      	cmp	r3, r2
 8006f78:	ddf0      	ble.n	8006f5c <SD_ReadBlock+0x24>
 8006f7a:	e000      	b.n	8006f7e <SD_ReadBlock+0x46>
        if (token == 0xFE) break;
 8006f7c:	bf00      	nop
    }
    if (token != 0xFE) return SD_ERROR;
 8006f7e:	7dfb      	ldrb	r3, [r7, #23]
 8006f80:	2bfe      	cmp	r3, #254	@ 0xfe
 8006f82:	d001      	beq.n	8006f88 <SD_ReadBlock+0x50>
 8006f84:	2301      	movs	r3, #1
 8006f86:	e017      	b.n	8006fb8 <SD_ReadBlock+0x80>

    for (int i = 0; i < 512; i++)
 8006f88:	2300      	movs	r3, #0
 8006f8a:	60fb      	str	r3, [r7, #12]
 8006f8c:	e009      	b.n	8006fa2 <SD_ReadBlock+0x6a>
        buff[i] = SD_ReceiveByte();
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	683a      	ldr	r2, [r7, #0]
 8006f92:	18d4      	adds	r4, r2, r3
 8006f94:	f7ff fef4 	bl	8006d80 <SD_ReceiveByte>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	7023      	strb	r3, [r4, #0]
    for (int i = 0; i < 512; i++)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	60fb      	str	r3, [r7, #12]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fa8:	dbf1      	blt.n	8006f8e <SD_ReadBlock+0x56>

    SD_ReceiveByte(); // Discard CRC
 8006faa:	f7ff fee9 	bl	8006d80 <SD_ReceiveByte>
    SD_ReceiveByte();
 8006fae:	f7ff fee7 	bl	8006d80 <SD_ReceiveByte>

    SD_Deselect();
 8006fb2:	f7ff ff17 	bl	8006de4 <SD_Deselect>
    return SD_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	371c      	adds	r7, #28
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd90      	pop	{r4, r7, pc}

08006fc0 <SD_WriteBlock>:

uint8_t SD_WriteBlock(uint32_t blockAddr, const uint8_t* buff) {
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
    if (SD_SendCommand(CMD24, blockAddr, 0x01) != 0x00)
 8006fca:	2201      	movs	r2, #1
 8006fcc:	6879      	ldr	r1, [r7, #4]
 8006fce:	2018      	movs	r0, #24
 8006fd0:	f7ff ff16 	bl	8006e00 <SD_SendCommand>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d001      	beq.n	8006fde <SD_WriteBlock+0x1e>
        return SD_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e02f      	b.n	800703e <SD_WriteBlock+0x7e>

    SD_TransmitByte(0xFE); // Start token
 8006fde:	20fe      	movs	r0, #254	@ 0xfe
 8006fe0:	f7ff feb8 	bl	8006d54 <SD_TransmitByte>

    for (int i = 0; i < 512; i++)
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	60fb      	str	r3, [r7, #12]
 8006fe8:	e009      	b.n	8006ffe <SD_WriteBlock+0x3e>
        SD_TransmitByte(buff[i]);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	4413      	add	r3, r2
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7ff feae 	bl	8006d54 <SD_TransmitByte>
    for (int i = 0; i < 512; i++)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	60fb      	str	r3, [r7, #12]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007004:	dbf1      	blt.n	8006fea <SD_WriteBlock+0x2a>

    SD_TransmitByte(0xFF); // Dummy CRC
 8007006:	20ff      	movs	r0, #255	@ 0xff
 8007008:	f7ff fea4 	bl	8006d54 <SD_TransmitByte>
    SD_TransmitByte(0xFF);
 800700c:	20ff      	movs	r0, #255	@ 0xff
 800700e:	f7ff fea1 	bl	8006d54 <SD_TransmitByte>

    uint8_t resp = SD_ReceiveByte();
 8007012:	f7ff feb5 	bl	8006d80 <SD_ReceiveByte>
 8007016:	4603      	mov	r3, r0
 8007018:	72fb      	strb	r3, [r7, #11]
    if ((resp & 0x1F) != 0x05) {
 800701a:	7afb      	ldrb	r3, [r7, #11]
 800701c:	f003 031f 	and.w	r3, r3, #31
 8007020:	2b05      	cmp	r3, #5
 8007022:	d003      	beq.n	800702c <SD_WriteBlock+0x6c>
        SD_Deselect();
 8007024:	f7ff fede 	bl	8006de4 <SD_Deselect>
        return SD_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e008      	b.n	800703e <SD_WriteBlock+0x7e>
    }

    while (!SD_ReceiveByte()); // Espera escrever
 800702c:	bf00      	nop
 800702e:	f7ff fea7 	bl	8006d80 <SD_ReceiveByte>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d0fa      	beq.n	800702e <SD_WriteBlock+0x6e>

    SD_Deselect();
 8007038:	f7ff fed4 	bl	8006de4 <SD_Deselect>
    return SD_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
	...

08007048 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800704c:	4b1b      	ldr	r3, [pc, #108]	@ (80070bc <MX_SPI1_Init+0x74>)
 800704e:	4a1c      	ldr	r2, [pc, #112]	@ (80070c0 <MX_SPI1_Init+0x78>)
 8007050:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007052:	4b1a      	ldr	r3, [pc, #104]	@ (80070bc <MX_SPI1_Init+0x74>)
 8007054:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8007058:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800705a:	4b18      	ldr	r3, [pc, #96]	@ (80070bc <MX_SPI1_Init+0x74>)
 800705c:	2200      	movs	r2, #0
 800705e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007060:	4b16      	ldr	r3, [pc, #88]	@ (80070bc <MX_SPI1_Init+0x74>)
 8007062:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8007066:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007068:	4b14      	ldr	r3, [pc, #80]	@ (80070bc <MX_SPI1_Init+0x74>)
 800706a:	2200      	movs	r2, #0
 800706c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800706e:	4b13      	ldr	r3, [pc, #76]	@ (80070bc <MX_SPI1_Init+0x74>)
 8007070:	2200      	movs	r2, #0
 8007072:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8007074:	4b11      	ldr	r3, [pc, #68]	@ (80070bc <MX_SPI1_Init+0x74>)
 8007076:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800707a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800707c:	4b0f      	ldr	r3, [pc, #60]	@ (80070bc <MX_SPI1_Init+0x74>)
 800707e:	2220      	movs	r2, #32
 8007080:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007082:	4b0e      	ldr	r3, [pc, #56]	@ (80070bc <MX_SPI1_Init+0x74>)
 8007084:	2200      	movs	r2, #0
 8007086:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007088:	4b0c      	ldr	r3, [pc, #48]	@ (80070bc <MX_SPI1_Init+0x74>)
 800708a:	2200      	movs	r2, #0
 800708c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800708e:	4b0b      	ldr	r3, [pc, #44]	@ (80070bc <MX_SPI1_Init+0x74>)
 8007090:	2200      	movs	r2, #0
 8007092:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8007094:	4b09      	ldr	r3, [pc, #36]	@ (80070bc <MX_SPI1_Init+0x74>)
 8007096:	2207      	movs	r2, #7
 8007098:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800709a:	4b08      	ldr	r3, [pc, #32]	@ (80070bc <MX_SPI1_Init+0x74>)
 800709c:	2200      	movs	r2, #0
 800709e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80070a0:	4b06      	ldr	r3, [pc, #24]	@ (80070bc <MX_SPI1_Init+0x74>)
 80070a2:	2208      	movs	r2, #8
 80070a4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80070a6:	4805      	ldr	r0, [pc, #20]	@ (80070bc <MX_SPI1_Init+0x74>)
 80070a8:	f001 fa1a 	bl	80084e0 <HAL_SPI_Init>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d001      	beq.n	80070b6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80070b2:	f7ff fe25 	bl	8006d00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80070b6:	bf00      	nop
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	20003628 	.word	0x20003628
 80070c0:	40013000 	.word	0x40013000

080070c4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80070c8:	4b1b      	ldr	r3, [pc, #108]	@ (8007138 <MX_SPI3_Init+0x74>)
 80070ca:	4a1c      	ldr	r2, [pc, #112]	@ (800713c <MX_SPI3_Init+0x78>)
 80070cc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80070ce:	4b1a      	ldr	r3, [pc, #104]	@ (8007138 <MX_SPI3_Init+0x74>)
 80070d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80070d4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80070d6:	4b18      	ldr	r3, [pc, #96]	@ (8007138 <MX_SPI3_Init+0x74>)
 80070d8:	2200      	movs	r2, #0
 80070da:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80070dc:	4b16      	ldr	r3, [pc, #88]	@ (8007138 <MX_SPI3_Init+0x74>)
 80070de:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80070e2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80070e4:	4b14      	ldr	r3, [pc, #80]	@ (8007138 <MX_SPI3_Init+0x74>)
 80070e6:	2200      	movs	r2, #0
 80070e8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80070ea:	4b13      	ldr	r3, [pc, #76]	@ (8007138 <MX_SPI3_Init+0x74>)
 80070ec:	2200      	movs	r2, #0
 80070ee:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80070f0:	4b11      	ldr	r3, [pc, #68]	@ (8007138 <MX_SPI3_Init+0x74>)
 80070f2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80070f6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80070f8:	4b0f      	ldr	r3, [pc, #60]	@ (8007138 <MX_SPI3_Init+0x74>)
 80070fa:	2200      	movs	r2, #0
 80070fc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80070fe:	4b0e      	ldr	r3, [pc, #56]	@ (8007138 <MX_SPI3_Init+0x74>)
 8007100:	2200      	movs	r2, #0
 8007102:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007104:	4b0c      	ldr	r3, [pc, #48]	@ (8007138 <MX_SPI3_Init+0x74>)
 8007106:	2200      	movs	r2, #0
 8007108:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800710a:	4b0b      	ldr	r3, [pc, #44]	@ (8007138 <MX_SPI3_Init+0x74>)
 800710c:	2200      	movs	r2, #0
 800710e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8007110:	4b09      	ldr	r3, [pc, #36]	@ (8007138 <MX_SPI3_Init+0x74>)
 8007112:	2207      	movs	r2, #7
 8007114:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007116:	4b08      	ldr	r3, [pc, #32]	@ (8007138 <MX_SPI3_Init+0x74>)
 8007118:	2200      	movs	r2, #0
 800711a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800711c:	4b06      	ldr	r3, [pc, #24]	@ (8007138 <MX_SPI3_Init+0x74>)
 800711e:	2208      	movs	r2, #8
 8007120:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007122:	4805      	ldr	r0, [pc, #20]	@ (8007138 <MX_SPI3_Init+0x74>)
 8007124:	f001 f9dc 	bl	80084e0 <HAL_SPI_Init>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d001      	beq.n	8007132 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800712e:	f7ff fde7 	bl	8006d00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8007132:	bf00      	nop
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	2000368c 	.word	0x2000368c
 800713c:	40003c00 	.word	0x40003c00

08007140 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b08c      	sub	sp, #48	@ 0x30
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007148:	f107 031c 	add.w	r3, r7, #28
 800714c:	2200      	movs	r2, #0
 800714e:	601a      	str	r2, [r3, #0]
 8007150:	605a      	str	r2, [r3, #4]
 8007152:	609a      	str	r2, [r3, #8]
 8007154:	60da      	str	r2, [r3, #12]
 8007156:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a3c      	ldr	r2, [pc, #240]	@ (8007250 <HAL_SPI_MspInit+0x110>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d129      	bne.n	80071b6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007162:	4b3c      	ldr	r3, [pc, #240]	@ (8007254 <HAL_SPI_MspInit+0x114>)
 8007164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007166:	4a3b      	ldr	r2, [pc, #236]	@ (8007254 <HAL_SPI_MspInit+0x114>)
 8007168:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800716c:	6453      	str	r3, [r2, #68]	@ 0x44
 800716e:	4b39      	ldr	r3, [pc, #228]	@ (8007254 <HAL_SPI_MspInit+0x114>)
 8007170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007172:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007176:	61bb      	str	r3, [r7, #24]
 8007178:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800717a:	4b36      	ldr	r3, [pc, #216]	@ (8007254 <HAL_SPI_MspInit+0x114>)
 800717c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800717e:	4a35      	ldr	r2, [pc, #212]	@ (8007254 <HAL_SPI_MspInit+0x114>)
 8007180:	f043 0301 	orr.w	r3, r3, #1
 8007184:	6313      	str	r3, [r2, #48]	@ 0x30
 8007186:	4b33      	ldr	r3, [pc, #204]	@ (8007254 <HAL_SPI_MspInit+0x114>)
 8007188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	617b      	str	r3, [r7, #20]
 8007190:	697b      	ldr	r3, [r7, #20]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 8007192:	f248 03e0 	movw	r3, #32992	@ 0x80e0
 8007196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007198:	2302      	movs	r3, #2
 800719a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800719c:	2300      	movs	r3, #0
 800719e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071a0:	2303      	movs	r3, #3
 80071a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80071a4:	2305      	movs	r3, #5
 80071a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071a8:	f107 031c 	add.w	r3, r7, #28
 80071ac:	4619      	mov	r1, r3
 80071ae:	482a      	ldr	r0, [pc, #168]	@ (8007258 <HAL_SPI_MspInit+0x118>)
 80071b0:	f000 fb20 	bl	80077f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80071b4:	e048      	b.n	8007248 <HAL_SPI_MspInit+0x108>
  else if(spiHandle->Instance==SPI3)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a28      	ldr	r2, [pc, #160]	@ (800725c <HAL_SPI_MspInit+0x11c>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d143      	bne.n	8007248 <HAL_SPI_MspInit+0x108>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80071c0:	4b24      	ldr	r3, [pc, #144]	@ (8007254 <HAL_SPI_MspInit+0x114>)
 80071c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071c4:	4a23      	ldr	r2, [pc, #140]	@ (8007254 <HAL_SPI_MspInit+0x114>)
 80071c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80071cc:	4b21      	ldr	r3, [pc, #132]	@ (8007254 <HAL_SPI_MspInit+0x114>)
 80071ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071d4:	613b      	str	r3, [r7, #16]
 80071d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071d8:	4b1e      	ldr	r3, [pc, #120]	@ (8007254 <HAL_SPI_MspInit+0x114>)
 80071da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071dc:	4a1d      	ldr	r2, [pc, #116]	@ (8007254 <HAL_SPI_MspInit+0x114>)
 80071de:	f043 0301 	orr.w	r3, r3, #1
 80071e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80071e4:	4b1b      	ldr	r3, [pc, #108]	@ (8007254 <HAL_SPI_MspInit+0x114>)
 80071e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071e8:	f003 0301 	and.w	r3, r3, #1
 80071ec:	60fb      	str	r3, [r7, #12]
 80071ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071f0:	4b18      	ldr	r3, [pc, #96]	@ (8007254 <HAL_SPI_MspInit+0x114>)
 80071f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071f4:	4a17      	ldr	r2, [pc, #92]	@ (8007254 <HAL_SPI_MspInit+0x114>)
 80071f6:	f043 0302 	orr.w	r3, r3, #2
 80071fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80071fc:	4b15      	ldr	r3, [pc, #84]	@ (8007254 <HAL_SPI_MspInit+0x114>)
 80071fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007200:	f003 0302 	and.w	r3, r3, #2
 8007204:	60bb      	str	r3, [r7, #8]
 8007206:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007208:	2310      	movs	r3, #16
 800720a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800720c:	2302      	movs	r3, #2
 800720e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007210:	2300      	movs	r3, #0
 8007212:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007214:	2303      	movs	r3, #3
 8007216:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007218:	2306      	movs	r3, #6
 800721a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800721c:	f107 031c 	add.w	r3, r7, #28
 8007220:	4619      	mov	r1, r3
 8007222:	480d      	ldr	r0, [pc, #52]	@ (8007258 <HAL_SPI_MspInit+0x118>)
 8007224:	f000 fae6 	bl	80077f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8007228:	2338      	movs	r3, #56	@ 0x38
 800722a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800722c:	2302      	movs	r3, #2
 800722e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007230:	2300      	movs	r3, #0
 8007232:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007234:	2303      	movs	r3, #3
 8007236:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007238:	2306      	movs	r3, #6
 800723a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800723c:	f107 031c 	add.w	r3, r7, #28
 8007240:	4619      	mov	r1, r3
 8007242:	4807      	ldr	r0, [pc, #28]	@ (8007260 <HAL_SPI_MspInit+0x120>)
 8007244:	f000 fad6 	bl	80077f4 <HAL_GPIO_Init>
}
 8007248:	bf00      	nop
 800724a:	3730      	adds	r7, #48	@ 0x30
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	40013000 	.word	0x40013000
 8007254:	40023800 	.word	0x40023800
 8007258:	40020000 	.word	0x40020000
 800725c:	40003c00 	.word	0x40003c00
 8007260:	40020400 	.word	0x40020400

08007264 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800726a:	4b0f      	ldr	r3, [pc, #60]	@ (80072a8 <HAL_MspInit+0x44>)
 800726c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800726e:	4a0e      	ldr	r2, [pc, #56]	@ (80072a8 <HAL_MspInit+0x44>)
 8007270:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007274:	6413      	str	r3, [r2, #64]	@ 0x40
 8007276:	4b0c      	ldr	r3, [pc, #48]	@ (80072a8 <HAL_MspInit+0x44>)
 8007278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800727a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800727e:	607b      	str	r3, [r7, #4]
 8007280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007282:	4b09      	ldr	r3, [pc, #36]	@ (80072a8 <HAL_MspInit+0x44>)
 8007284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007286:	4a08      	ldr	r2, [pc, #32]	@ (80072a8 <HAL_MspInit+0x44>)
 8007288:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800728c:	6453      	str	r3, [r2, #68]	@ 0x44
 800728e:	4b06      	ldr	r3, [pc, #24]	@ (80072a8 <HAL_MspInit+0x44>)
 8007290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007292:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007296:	603b      	str	r3, [r7, #0]
 8007298:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800729a:	bf00      	nop
 800729c:	370c      	adds	r7, #12
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	40023800 	.word	0x40023800

080072ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80072ac:	b480      	push	{r7}
 80072ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80072b0:	bf00      	nop
 80072b2:	e7fd      	b.n	80072b0 <NMI_Handler+0x4>

080072b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80072b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80072bc:	4804      	ldr	r0, [pc, #16]	@ (80072d0 <HardFault_Handler+0x1c>)
 80072be:	f000 fc5e 	bl	8007b7e <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80072c2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80072c6:	f000 f98b 	bl	80075e0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80072ca:	bf00      	nop
 80072cc:	e7f4      	b.n	80072b8 <HardFault_Handler+0x4>
 80072ce:	bf00      	nop
 80072d0:	40020400 	.word	0x40020400

080072d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80072d4:	b480      	push	{r7}
 80072d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80072d8:	bf00      	nop
 80072da:	e7fd      	b.n	80072d8 <MemManage_Handler+0x4>

080072dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80072dc:	b480      	push	{r7}
 80072de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80072e0:	bf00      	nop
 80072e2:	e7fd      	b.n	80072e0 <BusFault_Handler+0x4>

080072e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80072e4:	b480      	push	{r7}
 80072e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80072e8:	bf00      	nop
 80072ea:	e7fd      	b.n	80072e8 <UsageFault_Handler+0x4>

080072ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80072ec:	b480      	push	{r7}
 80072ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80072f0:	bf00      	nop
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr

080072fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80072fa:	b480      	push	{r7}
 80072fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80072fe:	bf00      	nop
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007308:	b480      	push	{r7}
 800730a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800730c:	bf00      	nop
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr

08007316 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800731a:	f000 f941 	bl	80075a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800731e:	bf00      	nop
 8007320:	bd80      	pop	{r7, pc}

08007322 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007322:	b480      	push	{r7}
 8007324:	af00      	add	r7, sp, #0
  return 1;
 8007326:	2301      	movs	r3, #1
}
 8007328:	4618      	mov	r0, r3
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr

08007332 <_kill>:

int _kill(int pid, int sig)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b082      	sub	sp, #8
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800733c:	f008 f910 	bl	800f560 <__errno>
 8007340:	4603      	mov	r3, r0
 8007342:	2216      	movs	r2, #22
 8007344:	601a      	str	r2, [r3, #0]
  return -1;
 8007346:	f04f 33ff 	mov.w	r3, #4294967295
}
 800734a:	4618      	mov	r0, r3
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <_exit>:

void _exit (int status)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b082      	sub	sp, #8
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800735a:	f04f 31ff 	mov.w	r1, #4294967295
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f7ff ffe7 	bl	8007332 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007364:	bf00      	nop
 8007366:	e7fd      	b.n	8007364 <_exit+0x12>

08007368 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007374:	2300      	movs	r3, #0
 8007376:	617b      	str	r3, [r7, #20]
 8007378:	e00a      	b.n	8007390 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800737a:	f3af 8000 	nop.w
 800737e:	4601      	mov	r1, r0
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	1c5a      	adds	r2, r3, #1
 8007384:	60ba      	str	r2, [r7, #8]
 8007386:	b2ca      	uxtb	r2, r1
 8007388:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	3301      	adds	r3, #1
 800738e:	617b      	str	r3, [r7, #20]
 8007390:	697a      	ldr	r2, [r7, #20]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	429a      	cmp	r2, r3
 8007396:	dbf0      	blt.n	800737a <_read+0x12>
  }

  return len;
 8007398:	687b      	ldr	r3, [r7, #4]
}
 800739a:	4618      	mov	r0, r3
 800739c:	3718      	adds	r7, #24
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b086      	sub	sp, #24
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	60f8      	str	r0, [r7, #12]
 80073aa:	60b9      	str	r1, [r7, #8]
 80073ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80073ae:	2300      	movs	r3, #0
 80073b0:	617b      	str	r3, [r7, #20]
 80073b2:	e009      	b.n	80073c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	1c5a      	adds	r2, r3, #1
 80073b8:	60ba      	str	r2, [r7, #8]
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	4618      	mov	r0, r3
 80073be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	3301      	adds	r3, #1
 80073c6:	617b      	str	r3, [r7, #20]
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	dbf1      	blt.n	80073b4 <_write+0x12>
  }
  return len;
 80073d0:	687b      	ldr	r3, [r7, #4]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3718      	adds	r7, #24
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <_close>:

int _close(int file)
{
 80073da:	b480      	push	{r7}
 80073dc:	b083      	sub	sp, #12
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80073e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80073f2:	b480      	push	{r7}
 80073f4:	b083      	sub	sp, #12
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
 80073fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007402:	605a      	str	r2, [r3, #4]
  return 0;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	370c      	adds	r7, #12
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr

08007412 <_isatty>:

int _isatty(int file)
{
 8007412:	b480      	push	{r7}
 8007414:	b083      	sub	sp, #12
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800741a:	2301      	movs	r3, #1
}
 800741c:	4618      	mov	r0, r3
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3714      	adds	r7, #20
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
	...

08007444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b086      	sub	sp, #24
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800744c:	4a14      	ldr	r2, [pc, #80]	@ (80074a0 <_sbrk+0x5c>)
 800744e:	4b15      	ldr	r3, [pc, #84]	@ (80074a4 <_sbrk+0x60>)
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007458:	4b13      	ldr	r3, [pc, #76]	@ (80074a8 <_sbrk+0x64>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d102      	bne.n	8007466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007460:	4b11      	ldr	r3, [pc, #68]	@ (80074a8 <_sbrk+0x64>)
 8007462:	4a12      	ldr	r2, [pc, #72]	@ (80074ac <_sbrk+0x68>)
 8007464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007466:	4b10      	ldr	r3, [pc, #64]	@ (80074a8 <_sbrk+0x64>)
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4413      	add	r3, r2
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	429a      	cmp	r2, r3
 8007472:	d207      	bcs.n	8007484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007474:	f008 f874 	bl	800f560 <__errno>
 8007478:	4603      	mov	r3, r0
 800747a:	220c      	movs	r2, #12
 800747c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800747e:	f04f 33ff 	mov.w	r3, #4294967295
 8007482:	e009      	b.n	8007498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007484:	4b08      	ldr	r3, [pc, #32]	@ (80074a8 <_sbrk+0x64>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800748a:	4b07      	ldr	r3, [pc, #28]	@ (80074a8 <_sbrk+0x64>)
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4413      	add	r3, r2
 8007492:	4a05      	ldr	r2, [pc, #20]	@ (80074a8 <_sbrk+0x64>)
 8007494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007496:	68fb      	ldr	r3, [r7, #12]
}
 8007498:	4618      	mov	r0, r3
 800749a:	3718      	adds	r7, #24
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	20050000 	.word	0x20050000
 80074a4:	00000400 	.word	0x00000400
 80074a8:	200036f0 	.word	0x200036f0
 80074ac:	20003cd0 	.word	0x20003cd0

080074b0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80074b0:	b480      	push	{r7}
 80074b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80074b4:	4b06      	ldr	r3, [pc, #24]	@ (80074d0 <SystemInit+0x20>)
 80074b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074ba:	4a05      	ldr	r2, [pc, #20]	@ (80074d0 <SystemInit+0x20>)
 80074bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80074c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80074c4:	bf00      	nop
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	e000ed00 	.word	0xe000ed00

080074d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80074d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800750c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80074d8:	f7ff ffea 	bl	80074b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80074dc:	480c      	ldr	r0, [pc, #48]	@ (8007510 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80074de:	490d      	ldr	r1, [pc, #52]	@ (8007514 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80074e0:	4a0d      	ldr	r2, [pc, #52]	@ (8007518 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80074e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80074e4:	e002      	b.n	80074ec <LoopCopyDataInit>

080074e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80074e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80074e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80074ea:	3304      	adds	r3, #4

080074ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80074ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80074ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80074f0:	d3f9      	bcc.n	80074e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80074f2:	4a0a      	ldr	r2, [pc, #40]	@ (800751c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80074f4:	4c0a      	ldr	r4, [pc, #40]	@ (8007520 <LoopFillZerobss+0x22>)
  movs r3, #0
 80074f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80074f8:	e001      	b.n	80074fe <LoopFillZerobss>

080074fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80074fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80074fc:	3204      	adds	r2, #4

080074fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80074fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007500:	d3fb      	bcc.n	80074fa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8007502:	f008 f833 	bl	800f56c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007506:	f7ff f941 	bl	800678c <main>
  bx  lr    
 800750a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800750c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8007510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007514:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8007518:	08013acc 	.word	0x08013acc
  ldr r2, =_sbss
 800751c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8007520:	20003cd0 	.word	0x20003cd0

08007524 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007524:	e7fe      	b.n	8007524 <ADC_IRQHandler>

08007526 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007526:	b580      	push	{r7, lr}
 8007528:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800752a:	2003      	movs	r0, #3
 800752c:	f000 f92e 	bl	800778c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007530:	2000      	movs	r0, #0
 8007532:	f000 f805 	bl	8007540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007536:	f7ff fe95 	bl	8007264 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	bd80      	pop	{r7, pc}

08007540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007548:	4b12      	ldr	r3, [pc, #72]	@ (8007594 <HAL_InitTick+0x54>)
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	4b12      	ldr	r3, [pc, #72]	@ (8007598 <HAL_InitTick+0x58>)
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	4619      	mov	r1, r3
 8007552:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007556:	fbb3 f3f1 	udiv	r3, r3, r1
 800755a:	fbb2 f3f3 	udiv	r3, r2, r3
 800755e:	4618      	mov	r0, r3
 8007560:	f000 f93b 	bl	80077da <HAL_SYSTICK_Config>
 8007564:	4603      	mov	r3, r0
 8007566:	2b00      	cmp	r3, #0
 8007568:	d001      	beq.n	800756e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	e00e      	b.n	800758c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2b0f      	cmp	r3, #15
 8007572:	d80a      	bhi.n	800758a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007574:	2200      	movs	r2, #0
 8007576:	6879      	ldr	r1, [r7, #4]
 8007578:	f04f 30ff 	mov.w	r0, #4294967295
 800757c:	f000 f911 	bl	80077a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007580:	4a06      	ldr	r2, [pc, #24]	@ (800759c <HAL_InitTick+0x5c>)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007586:	2300      	movs	r3, #0
 8007588:	e000      	b.n	800758c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
}
 800758c:	4618      	mov	r0, r3
 800758e:	3708      	adds	r7, #8
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	20000000 	.word	0x20000000
 8007598:	20000008 	.word	0x20000008
 800759c:	20000004 	.word	0x20000004

080075a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80075a0:	b480      	push	{r7}
 80075a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80075a4:	4b06      	ldr	r3, [pc, #24]	@ (80075c0 <HAL_IncTick+0x20>)
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	461a      	mov	r2, r3
 80075aa:	4b06      	ldr	r3, [pc, #24]	@ (80075c4 <HAL_IncTick+0x24>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4413      	add	r3, r2
 80075b0:	4a04      	ldr	r2, [pc, #16]	@ (80075c4 <HAL_IncTick+0x24>)
 80075b2:	6013      	str	r3, [r2, #0]
}
 80075b4:	bf00      	nop
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	20000008 	.word	0x20000008
 80075c4:	200036f4 	.word	0x200036f4

080075c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80075c8:	b480      	push	{r7}
 80075ca:	af00      	add	r7, sp, #0
  return uwTick;
 80075cc:	4b03      	ldr	r3, [pc, #12]	@ (80075dc <HAL_GetTick+0x14>)
 80075ce:	681b      	ldr	r3, [r3, #0]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	200036f4 	.word	0x200036f4

080075e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80075e8:	f7ff ffee 	bl	80075c8 <HAL_GetTick>
 80075ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f8:	d005      	beq.n	8007606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80075fa:	4b0a      	ldr	r3, [pc, #40]	@ (8007624 <HAL_Delay+0x44>)
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	461a      	mov	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	4413      	add	r3, r2
 8007604:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007606:	bf00      	nop
 8007608:	f7ff ffde 	bl	80075c8 <HAL_GetTick>
 800760c:	4602      	mov	r2, r0
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	429a      	cmp	r2, r3
 8007616:	d8f7      	bhi.n	8007608 <HAL_Delay+0x28>
  {
  }
}
 8007618:	bf00      	nop
 800761a:	bf00      	nop
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	20000008 	.word	0x20000008

08007628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f003 0307 	and.w	r3, r3, #7
 8007636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007638:	4b0b      	ldr	r3, [pc, #44]	@ (8007668 <__NVIC_SetPriorityGrouping+0x40>)
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800763e:	68ba      	ldr	r2, [r7, #8]
 8007640:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007644:	4013      	ands	r3, r2
 8007646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007650:	4b06      	ldr	r3, [pc, #24]	@ (800766c <__NVIC_SetPriorityGrouping+0x44>)
 8007652:	4313      	orrs	r3, r2
 8007654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007656:	4a04      	ldr	r2, [pc, #16]	@ (8007668 <__NVIC_SetPriorityGrouping+0x40>)
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	60d3      	str	r3, [r2, #12]
}
 800765c:	bf00      	nop
 800765e:	3714      	adds	r7, #20
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr
 8007668:	e000ed00 	.word	0xe000ed00
 800766c:	05fa0000 	.word	0x05fa0000

08007670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007670:	b480      	push	{r7}
 8007672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007674:	4b04      	ldr	r3, [pc, #16]	@ (8007688 <__NVIC_GetPriorityGrouping+0x18>)
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	0a1b      	lsrs	r3, r3, #8
 800767a:	f003 0307 	and.w	r3, r3, #7
}
 800767e:	4618      	mov	r0, r3
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr
 8007688:	e000ed00 	.word	0xe000ed00

0800768c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	4603      	mov	r3, r0
 8007694:	6039      	str	r1, [r7, #0]
 8007696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800769c:	2b00      	cmp	r3, #0
 800769e:	db0a      	blt.n	80076b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	b2da      	uxtb	r2, r3
 80076a4:	490c      	ldr	r1, [pc, #48]	@ (80076d8 <__NVIC_SetPriority+0x4c>)
 80076a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076aa:	0112      	lsls	r2, r2, #4
 80076ac:	b2d2      	uxtb	r2, r2
 80076ae:	440b      	add	r3, r1
 80076b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80076b4:	e00a      	b.n	80076cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	b2da      	uxtb	r2, r3
 80076ba:	4908      	ldr	r1, [pc, #32]	@ (80076dc <__NVIC_SetPriority+0x50>)
 80076bc:	79fb      	ldrb	r3, [r7, #7]
 80076be:	f003 030f 	and.w	r3, r3, #15
 80076c2:	3b04      	subs	r3, #4
 80076c4:	0112      	lsls	r2, r2, #4
 80076c6:	b2d2      	uxtb	r2, r2
 80076c8:	440b      	add	r3, r1
 80076ca:	761a      	strb	r2, [r3, #24]
}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr
 80076d8:	e000e100 	.word	0xe000e100
 80076dc:	e000ed00 	.word	0xe000ed00

080076e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b089      	sub	sp, #36	@ 0x24
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f003 0307 	and.w	r3, r3, #7
 80076f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	f1c3 0307 	rsb	r3, r3, #7
 80076fa:	2b04      	cmp	r3, #4
 80076fc:	bf28      	it	cs
 80076fe:	2304      	movcs	r3, #4
 8007700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	3304      	adds	r3, #4
 8007706:	2b06      	cmp	r3, #6
 8007708:	d902      	bls.n	8007710 <NVIC_EncodePriority+0x30>
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	3b03      	subs	r3, #3
 800770e:	e000      	b.n	8007712 <NVIC_EncodePriority+0x32>
 8007710:	2300      	movs	r3, #0
 8007712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007714:	f04f 32ff 	mov.w	r2, #4294967295
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	fa02 f303 	lsl.w	r3, r2, r3
 800771e:	43da      	mvns	r2, r3
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	401a      	ands	r2, r3
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007728:	f04f 31ff 	mov.w	r1, #4294967295
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	fa01 f303 	lsl.w	r3, r1, r3
 8007732:	43d9      	mvns	r1, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007738:	4313      	orrs	r3, r2
         );
}
 800773a:	4618      	mov	r0, r3
 800773c:	3724      	adds	r7, #36	@ 0x24
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
	...

08007748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	3b01      	subs	r3, #1
 8007754:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007758:	d301      	bcc.n	800775e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800775a:	2301      	movs	r3, #1
 800775c:	e00f      	b.n	800777e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800775e:	4a0a      	ldr	r2, [pc, #40]	@ (8007788 <SysTick_Config+0x40>)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	3b01      	subs	r3, #1
 8007764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007766:	210f      	movs	r1, #15
 8007768:	f04f 30ff 	mov.w	r0, #4294967295
 800776c:	f7ff ff8e 	bl	800768c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007770:	4b05      	ldr	r3, [pc, #20]	@ (8007788 <SysTick_Config+0x40>)
 8007772:	2200      	movs	r2, #0
 8007774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007776:	4b04      	ldr	r3, [pc, #16]	@ (8007788 <SysTick_Config+0x40>)
 8007778:	2207      	movs	r2, #7
 800777a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3708      	adds	r7, #8
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	e000e010 	.word	0xe000e010

0800778c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f7ff ff47 	bl	8007628 <__NVIC_SetPriorityGrouping>
}
 800779a:	bf00      	nop
 800779c:	3708      	adds	r7, #8
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b086      	sub	sp, #24
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	4603      	mov	r3, r0
 80077aa:	60b9      	str	r1, [r7, #8]
 80077ac:	607a      	str	r2, [r7, #4]
 80077ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80077b0:	2300      	movs	r3, #0
 80077b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80077b4:	f7ff ff5c 	bl	8007670 <__NVIC_GetPriorityGrouping>
 80077b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	68b9      	ldr	r1, [r7, #8]
 80077be:	6978      	ldr	r0, [r7, #20]
 80077c0:	f7ff ff8e 	bl	80076e0 <NVIC_EncodePriority>
 80077c4:	4602      	mov	r2, r0
 80077c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077ca:	4611      	mov	r1, r2
 80077cc:	4618      	mov	r0, r3
 80077ce:	f7ff ff5d 	bl	800768c <__NVIC_SetPriority>
}
 80077d2:	bf00      	nop
 80077d4:	3718      	adds	r7, #24
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b082      	sub	sp, #8
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7ff ffb0 	bl	8007748 <SysTick_Config>
 80077e8:	4603      	mov	r3, r0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3708      	adds	r7, #8
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
	...

080077f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b089      	sub	sp, #36	@ 0x24
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80077fe:	2300      	movs	r3, #0
 8007800:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007802:	2300      	movs	r3, #0
 8007804:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007806:	2300      	movs	r3, #0
 8007808:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800780a:	2300      	movs	r3, #0
 800780c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800780e:	2300      	movs	r3, #0
 8007810:	61fb      	str	r3, [r7, #28]
 8007812:	e175      	b.n	8007b00 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007814:	2201      	movs	r2, #1
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	fa02 f303 	lsl.w	r3, r2, r3
 800781c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	697a      	ldr	r2, [r7, #20]
 8007824:	4013      	ands	r3, r2
 8007826:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8007828:	693a      	ldr	r2, [r7, #16]
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	429a      	cmp	r2, r3
 800782e:	f040 8164 	bne.w	8007afa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	f003 0303 	and.w	r3, r3, #3
 800783a:	2b01      	cmp	r3, #1
 800783c:	d005      	beq.n	800784a <HAL_GPIO_Init+0x56>
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	f003 0303 	and.w	r3, r3, #3
 8007846:	2b02      	cmp	r3, #2
 8007848:	d130      	bne.n	80078ac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	005b      	lsls	r3, r3, #1
 8007854:	2203      	movs	r2, #3
 8007856:	fa02 f303 	lsl.w	r3, r2, r3
 800785a:	43db      	mvns	r3, r3
 800785c:	69ba      	ldr	r2, [r7, #24]
 800785e:	4013      	ands	r3, r2
 8007860:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	68da      	ldr	r2, [r3, #12]
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	005b      	lsls	r3, r3, #1
 800786a:	fa02 f303 	lsl.w	r3, r2, r3
 800786e:	69ba      	ldr	r2, [r7, #24]
 8007870:	4313      	orrs	r3, r2
 8007872:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	69ba      	ldr	r2, [r7, #24]
 8007878:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007880:	2201      	movs	r2, #1
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	fa02 f303 	lsl.w	r3, r2, r3
 8007888:	43db      	mvns	r3, r3
 800788a:	69ba      	ldr	r2, [r7, #24]
 800788c:	4013      	ands	r3, r2
 800788e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	091b      	lsrs	r3, r3, #4
 8007896:	f003 0201 	and.w	r2, r3, #1
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	fa02 f303 	lsl.w	r3, r2, r3
 80078a0:	69ba      	ldr	r2, [r7, #24]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	69ba      	ldr	r2, [r7, #24]
 80078aa:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	f003 0303 	and.w	r3, r3, #3
 80078b4:	2b03      	cmp	r3, #3
 80078b6:	d017      	beq.n	80078e8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	005b      	lsls	r3, r3, #1
 80078c2:	2203      	movs	r2, #3
 80078c4:	fa02 f303 	lsl.w	r3, r2, r3
 80078c8:	43db      	mvns	r3, r3
 80078ca:	69ba      	ldr	r2, [r7, #24]
 80078cc:	4013      	ands	r3, r2
 80078ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	689a      	ldr	r2, [r3, #8]
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	005b      	lsls	r3, r3, #1
 80078d8:	fa02 f303 	lsl.w	r3, r2, r3
 80078dc:	69ba      	ldr	r2, [r7, #24]
 80078de:	4313      	orrs	r3, r2
 80078e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	69ba      	ldr	r2, [r7, #24]
 80078e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	f003 0303 	and.w	r3, r3, #3
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d123      	bne.n	800793c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	08da      	lsrs	r2, r3, #3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	3208      	adds	r2, #8
 80078fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	f003 0307 	and.w	r3, r3, #7
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	220f      	movs	r2, #15
 800790c:	fa02 f303 	lsl.w	r3, r2, r3
 8007910:	43db      	mvns	r3, r3
 8007912:	69ba      	ldr	r2, [r7, #24]
 8007914:	4013      	ands	r3, r2
 8007916:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	691a      	ldr	r2, [r3, #16]
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	f003 0307 	and.w	r3, r3, #7
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	fa02 f303 	lsl.w	r3, r2, r3
 8007928:	69ba      	ldr	r2, [r7, #24]
 800792a:	4313      	orrs	r3, r2
 800792c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	08da      	lsrs	r2, r3, #3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	3208      	adds	r2, #8
 8007936:	69b9      	ldr	r1, [r7, #24]
 8007938:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	005b      	lsls	r3, r3, #1
 8007946:	2203      	movs	r2, #3
 8007948:	fa02 f303 	lsl.w	r3, r2, r3
 800794c:	43db      	mvns	r3, r3
 800794e:	69ba      	ldr	r2, [r7, #24]
 8007950:	4013      	ands	r3, r2
 8007952:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	f003 0203 	and.w	r2, r3, #3
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	005b      	lsls	r3, r3, #1
 8007960:	fa02 f303 	lsl.w	r3, r2, r3
 8007964:	69ba      	ldr	r2, [r7, #24]
 8007966:	4313      	orrs	r3, r2
 8007968:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	69ba      	ldr	r2, [r7, #24]
 800796e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007978:	2b00      	cmp	r3, #0
 800797a:	f000 80be 	beq.w	8007afa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800797e:	4b66      	ldr	r3, [pc, #408]	@ (8007b18 <HAL_GPIO_Init+0x324>)
 8007980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007982:	4a65      	ldr	r2, [pc, #404]	@ (8007b18 <HAL_GPIO_Init+0x324>)
 8007984:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007988:	6453      	str	r3, [r2, #68]	@ 0x44
 800798a:	4b63      	ldr	r3, [pc, #396]	@ (8007b18 <HAL_GPIO_Init+0x324>)
 800798c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800798e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007992:	60fb      	str	r3, [r7, #12]
 8007994:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007996:	4a61      	ldr	r2, [pc, #388]	@ (8007b1c <HAL_GPIO_Init+0x328>)
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	089b      	lsrs	r3, r3, #2
 800799c:	3302      	adds	r3, #2
 800799e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	f003 0303 	and.w	r3, r3, #3
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	220f      	movs	r2, #15
 80079ae:	fa02 f303 	lsl.w	r3, r2, r3
 80079b2:	43db      	mvns	r3, r3
 80079b4:	69ba      	ldr	r2, [r7, #24]
 80079b6:	4013      	ands	r3, r2
 80079b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a58      	ldr	r2, [pc, #352]	@ (8007b20 <HAL_GPIO_Init+0x32c>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d037      	beq.n	8007a32 <HAL_GPIO_Init+0x23e>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a57      	ldr	r2, [pc, #348]	@ (8007b24 <HAL_GPIO_Init+0x330>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d031      	beq.n	8007a2e <HAL_GPIO_Init+0x23a>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a56      	ldr	r2, [pc, #344]	@ (8007b28 <HAL_GPIO_Init+0x334>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d02b      	beq.n	8007a2a <HAL_GPIO_Init+0x236>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4a55      	ldr	r2, [pc, #340]	@ (8007b2c <HAL_GPIO_Init+0x338>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d025      	beq.n	8007a26 <HAL_GPIO_Init+0x232>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a54      	ldr	r2, [pc, #336]	@ (8007b30 <HAL_GPIO_Init+0x33c>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d01f      	beq.n	8007a22 <HAL_GPIO_Init+0x22e>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4a53      	ldr	r2, [pc, #332]	@ (8007b34 <HAL_GPIO_Init+0x340>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d019      	beq.n	8007a1e <HAL_GPIO_Init+0x22a>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a52      	ldr	r2, [pc, #328]	@ (8007b38 <HAL_GPIO_Init+0x344>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d013      	beq.n	8007a1a <HAL_GPIO_Init+0x226>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4a51      	ldr	r2, [pc, #324]	@ (8007b3c <HAL_GPIO_Init+0x348>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d00d      	beq.n	8007a16 <HAL_GPIO_Init+0x222>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a50      	ldr	r2, [pc, #320]	@ (8007b40 <HAL_GPIO_Init+0x34c>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d007      	beq.n	8007a12 <HAL_GPIO_Init+0x21e>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4a4f      	ldr	r2, [pc, #316]	@ (8007b44 <HAL_GPIO_Init+0x350>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d101      	bne.n	8007a0e <HAL_GPIO_Init+0x21a>
 8007a0a:	2309      	movs	r3, #9
 8007a0c:	e012      	b.n	8007a34 <HAL_GPIO_Init+0x240>
 8007a0e:	230a      	movs	r3, #10
 8007a10:	e010      	b.n	8007a34 <HAL_GPIO_Init+0x240>
 8007a12:	2308      	movs	r3, #8
 8007a14:	e00e      	b.n	8007a34 <HAL_GPIO_Init+0x240>
 8007a16:	2307      	movs	r3, #7
 8007a18:	e00c      	b.n	8007a34 <HAL_GPIO_Init+0x240>
 8007a1a:	2306      	movs	r3, #6
 8007a1c:	e00a      	b.n	8007a34 <HAL_GPIO_Init+0x240>
 8007a1e:	2305      	movs	r3, #5
 8007a20:	e008      	b.n	8007a34 <HAL_GPIO_Init+0x240>
 8007a22:	2304      	movs	r3, #4
 8007a24:	e006      	b.n	8007a34 <HAL_GPIO_Init+0x240>
 8007a26:	2303      	movs	r3, #3
 8007a28:	e004      	b.n	8007a34 <HAL_GPIO_Init+0x240>
 8007a2a:	2302      	movs	r3, #2
 8007a2c:	e002      	b.n	8007a34 <HAL_GPIO_Init+0x240>
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e000      	b.n	8007a34 <HAL_GPIO_Init+0x240>
 8007a32:	2300      	movs	r3, #0
 8007a34:	69fa      	ldr	r2, [r7, #28]
 8007a36:	f002 0203 	and.w	r2, r2, #3
 8007a3a:	0092      	lsls	r2, r2, #2
 8007a3c:	4093      	lsls	r3, r2
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007a44:	4935      	ldr	r1, [pc, #212]	@ (8007b1c <HAL_GPIO_Init+0x328>)
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	089b      	lsrs	r3, r3, #2
 8007a4a:	3302      	adds	r3, #2
 8007a4c:	69ba      	ldr	r2, [r7, #24]
 8007a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007a52:	4b3d      	ldr	r3, [pc, #244]	@ (8007b48 <HAL_GPIO_Init+0x354>)
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	43db      	mvns	r3, r3
 8007a5c:	69ba      	ldr	r2, [r7, #24]
 8007a5e:	4013      	ands	r3, r2
 8007a60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d003      	beq.n	8007a76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007a6e:	69ba      	ldr	r2, [r7, #24]
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007a76:	4a34      	ldr	r2, [pc, #208]	@ (8007b48 <HAL_GPIO_Init+0x354>)
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007a7c:	4b32      	ldr	r3, [pc, #200]	@ (8007b48 <HAL_GPIO_Init+0x354>)
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	43db      	mvns	r3, r3
 8007a86:	69ba      	ldr	r2, [r7, #24]
 8007a88:	4013      	ands	r3, r2
 8007a8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d003      	beq.n	8007aa0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007a98:	69ba      	ldr	r2, [r7, #24]
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007aa0:	4a29      	ldr	r2, [pc, #164]	@ (8007b48 <HAL_GPIO_Init+0x354>)
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007aa6:	4b28      	ldr	r3, [pc, #160]	@ (8007b48 <HAL_GPIO_Init+0x354>)
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	43db      	mvns	r3, r3
 8007ab0:	69ba      	ldr	r2, [r7, #24]
 8007ab2:	4013      	ands	r3, r2
 8007ab4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d003      	beq.n	8007aca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007ac2:	69ba      	ldr	r2, [r7, #24]
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007aca:	4a1f      	ldr	r2, [pc, #124]	@ (8007b48 <HAL_GPIO_Init+0x354>)
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8007b48 <HAL_GPIO_Init+0x354>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	43db      	mvns	r3, r3
 8007ada:	69ba      	ldr	r2, [r7, #24]
 8007adc:	4013      	ands	r3, r2
 8007ade:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d003      	beq.n	8007af4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007aec:	69ba      	ldr	r2, [r7, #24]
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	4313      	orrs	r3, r2
 8007af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007af4:	4a14      	ldr	r2, [pc, #80]	@ (8007b48 <HAL_GPIO_Init+0x354>)
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	3301      	adds	r3, #1
 8007afe:	61fb      	str	r3, [r7, #28]
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	2b0f      	cmp	r3, #15
 8007b04:	f67f ae86 	bls.w	8007814 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007b08:	bf00      	nop
 8007b0a:	bf00      	nop
 8007b0c:	3724      	adds	r7, #36	@ 0x24
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	40023800 	.word	0x40023800
 8007b1c:	40013800 	.word	0x40013800
 8007b20:	40020000 	.word	0x40020000
 8007b24:	40020400 	.word	0x40020400
 8007b28:	40020800 	.word	0x40020800
 8007b2c:	40020c00 	.word	0x40020c00
 8007b30:	40021000 	.word	0x40021000
 8007b34:	40021400 	.word	0x40021400
 8007b38:	40021800 	.word	0x40021800
 8007b3c:	40021c00 	.word	0x40021c00
 8007b40:	40022000 	.word	0x40022000
 8007b44:	40022400 	.word	0x40022400
 8007b48:	40013c00 	.word	0x40013c00

08007b4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	460b      	mov	r3, r1
 8007b56:	807b      	strh	r3, [r7, #2]
 8007b58:	4613      	mov	r3, r2
 8007b5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007b5c:	787b      	ldrb	r3, [r7, #1]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d003      	beq.n	8007b6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007b62:	887a      	ldrh	r2, [r7, #2]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007b68:	e003      	b.n	8007b72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007b6a:	887b      	ldrh	r3, [r7, #2]
 8007b6c:	041a      	lsls	r2, r3, #16
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	619a      	str	r2, [r3, #24]
}
 8007b72:	bf00      	nop
 8007b74:	370c      	adds	r7, #12
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr

08007b7e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007b7e:	b480      	push	{r7}
 8007b80:	b085      	sub	sp, #20
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
 8007b86:	460b      	mov	r3, r1
 8007b88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	695b      	ldr	r3, [r3, #20]
 8007b8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007b90:	887a      	ldrh	r2, [r7, #2]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	4013      	ands	r3, r2
 8007b96:	041a      	lsls	r2, r3, #16
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	43d9      	mvns	r1, r3
 8007b9c:	887b      	ldrh	r3, [r7, #2]
 8007b9e:	400b      	ands	r3, r1
 8007ba0:	431a      	orrs	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	619a      	str	r2, [r3, #24]
}
 8007ba6:	bf00      	nop
 8007ba8:	3714      	adds	r7, #20
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
	...

08007bb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b086      	sub	sp, #24
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d101      	bne.n	8007bca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e291      	b.n	80080ee <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0301 	and.w	r3, r3, #1
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f000 8087 	beq.w	8007ce6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007bd8:	4b96      	ldr	r3, [pc, #600]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	f003 030c 	and.w	r3, r3, #12
 8007be0:	2b04      	cmp	r3, #4
 8007be2:	d00c      	beq.n	8007bfe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007be4:	4b93      	ldr	r3, [pc, #588]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	f003 030c 	and.w	r3, r3, #12
 8007bec:	2b08      	cmp	r3, #8
 8007bee:	d112      	bne.n	8007c16 <HAL_RCC_OscConfig+0x62>
 8007bf0:	4b90      	ldr	r3, [pc, #576]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bf8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007bfc:	d10b      	bne.n	8007c16 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bfe:	4b8d      	ldr	r3, [pc, #564]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d06c      	beq.n	8007ce4 <HAL_RCC_OscConfig+0x130>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d168      	bne.n	8007ce4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e26b      	b.n	80080ee <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c1e:	d106      	bne.n	8007c2e <HAL_RCC_OscConfig+0x7a>
 8007c20:	4b84      	ldr	r3, [pc, #528]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a83      	ldr	r2, [pc, #524]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007c26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c2a:	6013      	str	r3, [r2, #0]
 8007c2c:	e02e      	b.n	8007c8c <HAL_RCC_OscConfig+0xd8>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d10c      	bne.n	8007c50 <HAL_RCC_OscConfig+0x9c>
 8007c36:	4b7f      	ldr	r3, [pc, #508]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a7e      	ldr	r2, [pc, #504]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007c3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c40:	6013      	str	r3, [r2, #0]
 8007c42:	4b7c      	ldr	r3, [pc, #496]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a7b      	ldr	r2, [pc, #492]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007c48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007c4c:	6013      	str	r3, [r2, #0]
 8007c4e:	e01d      	b.n	8007c8c <HAL_RCC_OscConfig+0xd8>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c58:	d10c      	bne.n	8007c74 <HAL_RCC_OscConfig+0xc0>
 8007c5a:	4b76      	ldr	r3, [pc, #472]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a75      	ldr	r2, [pc, #468]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007c60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007c64:	6013      	str	r3, [r2, #0]
 8007c66:	4b73      	ldr	r3, [pc, #460]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a72      	ldr	r2, [pc, #456]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007c6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c70:	6013      	str	r3, [r2, #0]
 8007c72:	e00b      	b.n	8007c8c <HAL_RCC_OscConfig+0xd8>
 8007c74:	4b6f      	ldr	r3, [pc, #444]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a6e      	ldr	r2, [pc, #440]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007c7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c7e:	6013      	str	r3, [r2, #0]
 8007c80:	4b6c      	ldr	r3, [pc, #432]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a6b      	ldr	r2, [pc, #428]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007c86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d013      	beq.n	8007cbc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c94:	f7ff fc98 	bl	80075c8 <HAL_GetTick>
 8007c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c9a:	e008      	b.n	8007cae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c9c:	f7ff fc94 	bl	80075c8 <HAL_GetTick>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	1ad3      	subs	r3, r2, r3
 8007ca6:	2b64      	cmp	r3, #100	@ 0x64
 8007ca8:	d901      	bls.n	8007cae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e21f      	b.n	80080ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cae:	4b61      	ldr	r3, [pc, #388]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d0f0      	beq.n	8007c9c <HAL_RCC_OscConfig+0xe8>
 8007cba:	e014      	b.n	8007ce6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cbc:	f7ff fc84 	bl	80075c8 <HAL_GetTick>
 8007cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007cc2:	e008      	b.n	8007cd6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007cc4:	f7ff fc80 	bl	80075c8 <HAL_GetTick>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	2b64      	cmp	r3, #100	@ 0x64
 8007cd0:	d901      	bls.n	8007cd6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	e20b      	b.n	80080ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007cd6:	4b57      	ldr	r3, [pc, #348]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1f0      	bne.n	8007cc4 <HAL_RCC_OscConfig+0x110>
 8007ce2:	e000      	b.n	8007ce6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 0302 	and.w	r3, r3, #2
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d069      	beq.n	8007dc6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007cf2:	4b50      	ldr	r3, [pc, #320]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	f003 030c 	and.w	r3, r3, #12
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00b      	beq.n	8007d16 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007cfe:	4b4d      	ldr	r3, [pc, #308]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	f003 030c 	and.w	r3, r3, #12
 8007d06:	2b08      	cmp	r3, #8
 8007d08:	d11c      	bne.n	8007d44 <HAL_RCC_OscConfig+0x190>
 8007d0a:	4b4a      	ldr	r3, [pc, #296]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d116      	bne.n	8007d44 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d16:	4b47      	ldr	r3, [pc, #284]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 0302 	and.w	r3, r3, #2
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d005      	beq.n	8007d2e <HAL_RCC_OscConfig+0x17a>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d001      	beq.n	8007d2e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e1df      	b.n	80080ee <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d2e:	4b41      	ldr	r3, [pc, #260]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	00db      	lsls	r3, r3, #3
 8007d3c:	493d      	ldr	r1, [pc, #244]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d42:	e040      	b.n	8007dc6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d023      	beq.n	8007d94 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d4c:	4b39      	ldr	r3, [pc, #228]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a38      	ldr	r2, [pc, #224]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007d52:	f043 0301 	orr.w	r3, r3, #1
 8007d56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d58:	f7ff fc36 	bl	80075c8 <HAL_GetTick>
 8007d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d5e:	e008      	b.n	8007d72 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d60:	f7ff fc32 	bl	80075c8 <HAL_GetTick>
 8007d64:	4602      	mov	r2, r0
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d901      	bls.n	8007d72 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	e1bd      	b.n	80080ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d72:	4b30      	ldr	r3, [pc, #192]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 0302 	and.w	r3, r3, #2
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d0f0      	beq.n	8007d60 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d7e:	4b2d      	ldr	r3, [pc, #180]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	00db      	lsls	r3, r3, #3
 8007d8c:	4929      	ldr	r1, [pc, #164]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	600b      	str	r3, [r1, #0]
 8007d92:	e018      	b.n	8007dc6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d94:	4b27      	ldr	r3, [pc, #156]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a26      	ldr	r2, [pc, #152]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007d9a:	f023 0301 	bic.w	r3, r3, #1
 8007d9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007da0:	f7ff fc12 	bl	80075c8 <HAL_GetTick>
 8007da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007da6:	e008      	b.n	8007dba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007da8:	f7ff fc0e 	bl	80075c8 <HAL_GetTick>
 8007dac:	4602      	mov	r2, r0
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	d901      	bls.n	8007dba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007db6:	2303      	movs	r3, #3
 8007db8:	e199      	b.n	80080ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007dba:	4b1e      	ldr	r3, [pc, #120]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 0302 	and.w	r3, r3, #2
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1f0      	bne.n	8007da8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 0308 	and.w	r3, r3, #8
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d038      	beq.n	8007e44 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d019      	beq.n	8007e0e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007dda:	4b16      	ldr	r3, [pc, #88]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007ddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007dde:	4a15      	ldr	r2, [pc, #84]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007de0:	f043 0301 	orr.w	r3, r3, #1
 8007de4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007de6:	f7ff fbef 	bl	80075c8 <HAL_GetTick>
 8007dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007dec:	e008      	b.n	8007e00 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007dee:	f7ff fbeb 	bl	80075c8 <HAL_GetTick>
 8007df2:	4602      	mov	r2, r0
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	1ad3      	subs	r3, r2, r3
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	d901      	bls.n	8007e00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007dfc:	2303      	movs	r3, #3
 8007dfe:	e176      	b.n	80080ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e00:	4b0c      	ldr	r3, [pc, #48]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007e02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e04:	f003 0302 	and.w	r3, r3, #2
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d0f0      	beq.n	8007dee <HAL_RCC_OscConfig+0x23a>
 8007e0c:	e01a      	b.n	8007e44 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e0e:	4b09      	ldr	r3, [pc, #36]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007e10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e12:	4a08      	ldr	r2, [pc, #32]	@ (8007e34 <HAL_RCC_OscConfig+0x280>)
 8007e14:	f023 0301 	bic.w	r3, r3, #1
 8007e18:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e1a:	f7ff fbd5 	bl	80075c8 <HAL_GetTick>
 8007e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e20:	e00a      	b.n	8007e38 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e22:	f7ff fbd1 	bl	80075c8 <HAL_GetTick>
 8007e26:	4602      	mov	r2, r0
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	1ad3      	subs	r3, r2, r3
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d903      	bls.n	8007e38 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007e30:	2303      	movs	r3, #3
 8007e32:	e15c      	b.n	80080ee <HAL_RCC_OscConfig+0x53a>
 8007e34:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e38:	4b91      	ldr	r3, [pc, #580]	@ (8008080 <HAL_RCC_OscConfig+0x4cc>)
 8007e3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e3c:	f003 0302 	and.w	r3, r3, #2
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d1ee      	bne.n	8007e22 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 0304 	and.w	r3, r3, #4
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f000 80a4 	beq.w	8007f9a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e52:	4b8b      	ldr	r3, [pc, #556]	@ (8008080 <HAL_RCC_OscConfig+0x4cc>)
 8007e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d10d      	bne.n	8007e7a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e5e:	4b88      	ldr	r3, [pc, #544]	@ (8008080 <HAL_RCC_OscConfig+0x4cc>)
 8007e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e62:	4a87      	ldr	r2, [pc, #540]	@ (8008080 <HAL_RCC_OscConfig+0x4cc>)
 8007e64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e68:	6413      	str	r3, [r2, #64]	@ 0x40
 8007e6a:	4b85      	ldr	r3, [pc, #532]	@ (8008080 <HAL_RCC_OscConfig+0x4cc>)
 8007e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e72:	60bb      	str	r3, [r7, #8]
 8007e74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e76:	2301      	movs	r3, #1
 8007e78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e7a:	4b82      	ldr	r3, [pc, #520]	@ (8008084 <HAL_RCC_OscConfig+0x4d0>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d118      	bne.n	8007eb8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007e86:	4b7f      	ldr	r3, [pc, #508]	@ (8008084 <HAL_RCC_OscConfig+0x4d0>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a7e      	ldr	r2, [pc, #504]	@ (8008084 <HAL_RCC_OscConfig+0x4d0>)
 8007e8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e92:	f7ff fb99 	bl	80075c8 <HAL_GetTick>
 8007e96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e98:	e008      	b.n	8007eac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e9a:	f7ff fb95 	bl	80075c8 <HAL_GetTick>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	2b64      	cmp	r3, #100	@ 0x64
 8007ea6:	d901      	bls.n	8007eac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e120      	b.n	80080ee <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007eac:	4b75      	ldr	r3, [pc, #468]	@ (8008084 <HAL_RCC_OscConfig+0x4d0>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d0f0      	beq.n	8007e9a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d106      	bne.n	8007ece <HAL_RCC_OscConfig+0x31a>
 8007ec0:	4b6f      	ldr	r3, [pc, #444]	@ (8008080 <HAL_RCC_OscConfig+0x4cc>)
 8007ec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ec4:	4a6e      	ldr	r2, [pc, #440]	@ (8008080 <HAL_RCC_OscConfig+0x4cc>)
 8007ec6:	f043 0301 	orr.w	r3, r3, #1
 8007eca:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ecc:	e02d      	b.n	8007f2a <HAL_RCC_OscConfig+0x376>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d10c      	bne.n	8007ef0 <HAL_RCC_OscConfig+0x33c>
 8007ed6:	4b6a      	ldr	r3, [pc, #424]	@ (8008080 <HAL_RCC_OscConfig+0x4cc>)
 8007ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007eda:	4a69      	ldr	r2, [pc, #420]	@ (8008080 <HAL_RCC_OscConfig+0x4cc>)
 8007edc:	f023 0301 	bic.w	r3, r3, #1
 8007ee0:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ee2:	4b67      	ldr	r3, [pc, #412]	@ (8008080 <HAL_RCC_OscConfig+0x4cc>)
 8007ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ee6:	4a66      	ldr	r2, [pc, #408]	@ (8008080 <HAL_RCC_OscConfig+0x4cc>)
 8007ee8:	f023 0304 	bic.w	r3, r3, #4
 8007eec:	6713      	str	r3, [r2, #112]	@ 0x70
 8007eee:	e01c      	b.n	8007f2a <HAL_RCC_OscConfig+0x376>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	2b05      	cmp	r3, #5
 8007ef6:	d10c      	bne.n	8007f12 <HAL_RCC_OscConfig+0x35e>
 8007ef8:	4b61      	ldr	r3, [pc, #388]	@ (8008080 <HAL_RCC_OscConfig+0x4cc>)
 8007efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007efc:	4a60      	ldr	r2, [pc, #384]	@ (8008080 <HAL_RCC_OscConfig+0x4cc>)
 8007efe:	f043 0304 	orr.w	r3, r3, #4
 8007f02:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f04:	4b5e      	ldr	r3, [pc, #376]	@ (8008080 <HAL_RCC_OscConfig+0x4cc>)
 8007f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f08:	4a5d      	ldr	r2, [pc, #372]	@ (8008080 <HAL_RCC_OscConfig+0x4cc>)
 8007f0a:	f043 0301 	orr.w	r3, r3, #1
 8007f0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f10:	e00b      	b.n	8007f2a <HAL_RCC_OscConfig+0x376>
 8007f12:	4b5b      	ldr	r3, [pc, #364]	@ (8008080 <HAL_RCC_OscConfig+0x4cc>)
 8007f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f16:	4a5a      	ldr	r2, [pc, #360]	@ (8008080 <HAL_RCC_OscConfig+0x4cc>)
 8007f18:	f023 0301 	bic.w	r3, r3, #1
 8007f1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f1e:	4b58      	ldr	r3, [pc, #352]	@ (8008080 <HAL_RCC_OscConfig+0x4cc>)
 8007f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f22:	4a57      	ldr	r2, [pc, #348]	@ (8008080 <HAL_RCC_OscConfig+0x4cc>)
 8007f24:	f023 0304 	bic.w	r3, r3, #4
 8007f28:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d015      	beq.n	8007f5e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f32:	f7ff fb49 	bl	80075c8 <HAL_GetTick>
 8007f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f38:	e00a      	b.n	8007f50 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f3a:	f7ff fb45 	bl	80075c8 <HAL_GetTick>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d901      	bls.n	8007f50 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	e0ce      	b.n	80080ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f50:	4b4b      	ldr	r3, [pc, #300]	@ (8008080 <HAL_RCC_OscConfig+0x4cc>)
 8007f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f54:	f003 0302 	and.w	r3, r3, #2
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d0ee      	beq.n	8007f3a <HAL_RCC_OscConfig+0x386>
 8007f5c:	e014      	b.n	8007f88 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f5e:	f7ff fb33 	bl	80075c8 <HAL_GetTick>
 8007f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f64:	e00a      	b.n	8007f7c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f66:	f7ff fb2f 	bl	80075c8 <HAL_GetTick>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d901      	bls.n	8007f7c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	e0b8      	b.n	80080ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f7c:	4b40      	ldr	r3, [pc, #256]	@ (8008080 <HAL_RCC_OscConfig+0x4cc>)
 8007f7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f80:	f003 0302 	and.w	r3, r3, #2
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d1ee      	bne.n	8007f66 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007f88:	7dfb      	ldrb	r3, [r7, #23]
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d105      	bne.n	8007f9a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f8e:	4b3c      	ldr	r3, [pc, #240]	@ (8008080 <HAL_RCC_OscConfig+0x4cc>)
 8007f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f92:	4a3b      	ldr	r2, [pc, #236]	@ (8008080 <HAL_RCC_OscConfig+0x4cc>)
 8007f94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f98:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f000 80a4 	beq.w	80080ec <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007fa4:	4b36      	ldr	r3, [pc, #216]	@ (8008080 <HAL_RCC_OscConfig+0x4cc>)
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	f003 030c 	and.w	r3, r3, #12
 8007fac:	2b08      	cmp	r3, #8
 8007fae:	d06b      	beq.n	8008088 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	699b      	ldr	r3, [r3, #24]
 8007fb4:	2b02      	cmp	r3, #2
 8007fb6:	d149      	bne.n	800804c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fb8:	4b31      	ldr	r3, [pc, #196]	@ (8008080 <HAL_RCC_OscConfig+0x4cc>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a30      	ldr	r2, [pc, #192]	@ (8008080 <HAL_RCC_OscConfig+0x4cc>)
 8007fbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007fc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fc4:	f7ff fb00 	bl	80075c8 <HAL_GetTick>
 8007fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fca:	e008      	b.n	8007fde <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fcc:	f7ff fafc 	bl	80075c8 <HAL_GetTick>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	1ad3      	subs	r3, r2, r3
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d901      	bls.n	8007fde <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e087      	b.n	80080ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fde:	4b28      	ldr	r3, [pc, #160]	@ (8008080 <HAL_RCC_OscConfig+0x4cc>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1f0      	bne.n	8007fcc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	69da      	ldr	r2, [r3, #28]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a1b      	ldr	r3, [r3, #32]
 8007ff2:	431a      	orrs	r2, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ff8:	019b      	lsls	r3, r3, #6
 8007ffa:	431a      	orrs	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008000:	085b      	lsrs	r3, r3, #1
 8008002:	3b01      	subs	r3, #1
 8008004:	041b      	lsls	r3, r3, #16
 8008006:	431a      	orrs	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800800c:	061b      	lsls	r3, r3, #24
 800800e:	4313      	orrs	r3, r2
 8008010:	4a1b      	ldr	r2, [pc, #108]	@ (8008080 <HAL_RCC_OscConfig+0x4cc>)
 8008012:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008016:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008018:	4b19      	ldr	r3, [pc, #100]	@ (8008080 <HAL_RCC_OscConfig+0x4cc>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a18      	ldr	r2, [pc, #96]	@ (8008080 <HAL_RCC_OscConfig+0x4cc>)
 800801e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008024:	f7ff fad0 	bl	80075c8 <HAL_GetTick>
 8008028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800802a:	e008      	b.n	800803e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800802c:	f7ff facc 	bl	80075c8 <HAL_GetTick>
 8008030:	4602      	mov	r2, r0
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	1ad3      	subs	r3, r2, r3
 8008036:	2b02      	cmp	r3, #2
 8008038:	d901      	bls.n	800803e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800803a:	2303      	movs	r3, #3
 800803c:	e057      	b.n	80080ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800803e:	4b10      	ldr	r3, [pc, #64]	@ (8008080 <HAL_RCC_OscConfig+0x4cc>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008046:	2b00      	cmp	r3, #0
 8008048:	d0f0      	beq.n	800802c <HAL_RCC_OscConfig+0x478>
 800804a:	e04f      	b.n	80080ec <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800804c:	4b0c      	ldr	r3, [pc, #48]	@ (8008080 <HAL_RCC_OscConfig+0x4cc>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a0b      	ldr	r2, [pc, #44]	@ (8008080 <HAL_RCC_OscConfig+0x4cc>)
 8008052:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008056:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008058:	f7ff fab6 	bl	80075c8 <HAL_GetTick>
 800805c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800805e:	e008      	b.n	8008072 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008060:	f7ff fab2 	bl	80075c8 <HAL_GetTick>
 8008064:	4602      	mov	r2, r0
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	2b02      	cmp	r3, #2
 800806c:	d901      	bls.n	8008072 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800806e:	2303      	movs	r3, #3
 8008070:	e03d      	b.n	80080ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008072:	4b03      	ldr	r3, [pc, #12]	@ (8008080 <HAL_RCC_OscConfig+0x4cc>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800807a:	2b00      	cmp	r3, #0
 800807c:	d1f0      	bne.n	8008060 <HAL_RCC_OscConfig+0x4ac>
 800807e:	e035      	b.n	80080ec <HAL_RCC_OscConfig+0x538>
 8008080:	40023800 	.word	0x40023800
 8008084:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008088:	4b1b      	ldr	r3, [pc, #108]	@ (80080f8 <HAL_RCC_OscConfig+0x544>)
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	699b      	ldr	r3, [r3, #24]
 8008092:	2b01      	cmp	r3, #1
 8008094:	d028      	beq.n	80080e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d121      	bne.n	80080e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d11a      	bne.n	80080e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80080b8:	4013      	ands	r3, r2
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80080be:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d111      	bne.n	80080e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ce:	085b      	lsrs	r3, r3, #1
 80080d0:	3b01      	subs	r3, #1
 80080d2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d107      	bne.n	80080e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d001      	beq.n	80080ec <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	e000      	b.n	80080ee <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3718      	adds	r7, #24
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	40023800 	.word	0x40023800

080080fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008106:	2300      	movs	r3, #0
 8008108:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d101      	bne.n	8008114 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	e0d0      	b.n	80082b6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008114:	4b6a      	ldr	r3, [pc, #424]	@ (80082c0 <HAL_RCC_ClockConfig+0x1c4>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f003 030f 	and.w	r3, r3, #15
 800811c:	683a      	ldr	r2, [r7, #0]
 800811e:	429a      	cmp	r2, r3
 8008120:	d910      	bls.n	8008144 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008122:	4b67      	ldr	r3, [pc, #412]	@ (80082c0 <HAL_RCC_ClockConfig+0x1c4>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f023 020f 	bic.w	r2, r3, #15
 800812a:	4965      	ldr	r1, [pc, #404]	@ (80082c0 <HAL_RCC_ClockConfig+0x1c4>)
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	4313      	orrs	r3, r2
 8008130:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008132:	4b63      	ldr	r3, [pc, #396]	@ (80082c0 <HAL_RCC_ClockConfig+0x1c4>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 030f 	and.w	r3, r3, #15
 800813a:	683a      	ldr	r2, [r7, #0]
 800813c:	429a      	cmp	r2, r3
 800813e:	d001      	beq.n	8008144 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008140:	2301      	movs	r3, #1
 8008142:	e0b8      	b.n	80082b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 0302 	and.w	r3, r3, #2
 800814c:	2b00      	cmp	r3, #0
 800814e:	d020      	beq.n	8008192 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 0304 	and.w	r3, r3, #4
 8008158:	2b00      	cmp	r3, #0
 800815a:	d005      	beq.n	8008168 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800815c:	4b59      	ldr	r3, [pc, #356]	@ (80082c4 <HAL_RCC_ClockConfig+0x1c8>)
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	4a58      	ldr	r2, [pc, #352]	@ (80082c4 <HAL_RCC_ClockConfig+0x1c8>)
 8008162:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008166:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 0308 	and.w	r3, r3, #8
 8008170:	2b00      	cmp	r3, #0
 8008172:	d005      	beq.n	8008180 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008174:	4b53      	ldr	r3, [pc, #332]	@ (80082c4 <HAL_RCC_ClockConfig+0x1c8>)
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	4a52      	ldr	r2, [pc, #328]	@ (80082c4 <HAL_RCC_ClockConfig+0x1c8>)
 800817a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800817e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008180:	4b50      	ldr	r3, [pc, #320]	@ (80082c4 <HAL_RCC_ClockConfig+0x1c8>)
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	494d      	ldr	r1, [pc, #308]	@ (80082c4 <HAL_RCC_ClockConfig+0x1c8>)
 800818e:	4313      	orrs	r3, r2
 8008190:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f003 0301 	and.w	r3, r3, #1
 800819a:	2b00      	cmp	r3, #0
 800819c:	d040      	beq.n	8008220 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d107      	bne.n	80081b6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081a6:	4b47      	ldr	r3, [pc, #284]	@ (80082c4 <HAL_RCC_ClockConfig+0x1c8>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d115      	bne.n	80081de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80081b2:	2301      	movs	r3, #1
 80081b4:	e07f      	b.n	80082b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d107      	bne.n	80081ce <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081be:	4b41      	ldr	r3, [pc, #260]	@ (80082c4 <HAL_RCC_ClockConfig+0x1c8>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d109      	bne.n	80081de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	e073      	b.n	80082b6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081ce:	4b3d      	ldr	r3, [pc, #244]	@ (80082c4 <HAL_RCC_ClockConfig+0x1c8>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 0302 	and.w	r3, r3, #2
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d101      	bne.n	80081de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	e06b      	b.n	80082b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80081de:	4b39      	ldr	r3, [pc, #228]	@ (80082c4 <HAL_RCC_ClockConfig+0x1c8>)
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	f023 0203 	bic.w	r2, r3, #3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	4936      	ldr	r1, [pc, #216]	@ (80082c4 <HAL_RCC_ClockConfig+0x1c8>)
 80081ec:	4313      	orrs	r3, r2
 80081ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081f0:	f7ff f9ea 	bl	80075c8 <HAL_GetTick>
 80081f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081f6:	e00a      	b.n	800820e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80081f8:	f7ff f9e6 	bl	80075c8 <HAL_GetTick>
 80081fc:	4602      	mov	r2, r0
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008206:	4293      	cmp	r3, r2
 8008208:	d901      	bls.n	800820e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800820a:	2303      	movs	r3, #3
 800820c:	e053      	b.n	80082b6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800820e:	4b2d      	ldr	r3, [pc, #180]	@ (80082c4 <HAL_RCC_ClockConfig+0x1c8>)
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	f003 020c 	and.w	r2, r3, #12
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	429a      	cmp	r2, r3
 800821e:	d1eb      	bne.n	80081f8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008220:	4b27      	ldr	r3, [pc, #156]	@ (80082c0 <HAL_RCC_ClockConfig+0x1c4>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 030f 	and.w	r3, r3, #15
 8008228:	683a      	ldr	r2, [r7, #0]
 800822a:	429a      	cmp	r2, r3
 800822c:	d210      	bcs.n	8008250 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800822e:	4b24      	ldr	r3, [pc, #144]	@ (80082c0 <HAL_RCC_ClockConfig+0x1c4>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f023 020f 	bic.w	r2, r3, #15
 8008236:	4922      	ldr	r1, [pc, #136]	@ (80082c0 <HAL_RCC_ClockConfig+0x1c4>)
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	4313      	orrs	r3, r2
 800823c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800823e:	4b20      	ldr	r3, [pc, #128]	@ (80082c0 <HAL_RCC_ClockConfig+0x1c4>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f003 030f 	and.w	r3, r3, #15
 8008246:	683a      	ldr	r2, [r7, #0]
 8008248:	429a      	cmp	r2, r3
 800824a:	d001      	beq.n	8008250 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	e032      	b.n	80082b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 0304 	and.w	r3, r3, #4
 8008258:	2b00      	cmp	r3, #0
 800825a:	d008      	beq.n	800826e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800825c:	4b19      	ldr	r3, [pc, #100]	@ (80082c4 <HAL_RCC_ClockConfig+0x1c8>)
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	4916      	ldr	r1, [pc, #88]	@ (80082c4 <HAL_RCC_ClockConfig+0x1c8>)
 800826a:	4313      	orrs	r3, r2
 800826c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f003 0308 	and.w	r3, r3, #8
 8008276:	2b00      	cmp	r3, #0
 8008278:	d009      	beq.n	800828e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800827a:	4b12      	ldr	r3, [pc, #72]	@ (80082c4 <HAL_RCC_ClockConfig+0x1c8>)
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	00db      	lsls	r3, r3, #3
 8008288:	490e      	ldr	r1, [pc, #56]	@ (80082c4 <HAL_RCC_ClockConfig+0x1c8>)
 800828a:	4313      	orrs	r3, r2
 800828c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800828e:	f000 f821 	bl	80082d4 <HAL_RCC_GetSysClockFreq>
 8008292:	4602      	mov	r2, r0
 8008294:	4b0b      	ldr	r3, [pc, #44]	@ (80082c4 <HAL_RCC_ClockConfig+0x1c8>)
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	091b      	lsrs	r3, r3, #4
 800829a:	f003 030f 	and.w	r3, r3, #15
 800829e:	490a      	ldr	r1, [pc, #40]	@ (80082c8 <HAL_RCC_ClockConfig+0x1cc>)
 80082a0:	5ccb      	ldrb	r3, [r1, r3]
 80082a2:	fa22 f303 	lsr.w	r3, r2, r3
 80082a6:	4a09      	ldr	r2, [pc, #36]	@ (80082cc <HAL_RCC_ClockConfig+0x1d0>)
 80082a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80082aa:	4b09      	ldr	r3, [pc, #36]	@ (80082d0 <HAL_RCC_ClockConfig+0x1d4>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7ff f946 	bl	8007540 <HAL_InitTick>

  return HAL_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	40023c00 	.word	0x40023c00
 80082c4:	40023800 	.word	0x40023800
 80082c8:	08012df4 	.word	0x08012df4
 80082cc:	20000000 	.word	0x20000000
 80082d0:	20000004 	.word	0x20000004

080082d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80082d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082d8:	b094      	sub	sp, #80	@ 0x50
 80082da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80082dc:	2300      	movs	r3, #0
 80082de:	647b      	str	r3, [r7, #68]	@ 0x44
 80082e0:	2300      	movs	r3, #0
 80082e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082e4:	2300      	movs	r3, #0
 80082e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80082e8:	2300      	movs	r3, #0
 80082ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80082ec:	4b79      	ldr	r3, [pc, #484]	@ (80084d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	f003 030c 	and.w	r3, r3, #12
 80082f4:	2b08      	cmp	r3, #8
 80082f6:	d00d      	beq.n	8008314 <HAL_RCC_GetSysClockFreq+0x40>
 80082f8:	2b08      	cmp	r3, #8
 80082fa:	f200 80e1 	bhi.w	80084c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d002      	beq.n	8008308 <HAL_RCC_GetSysClockFreq+0x34>
 8008302:	2b04      	cmp	r3, #4
 8008304:	d003      	beq.n	800830e <HAL_RCC_GetSysClockFreq+0x3a>
 8008306:	e0db      	b.n	80084c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008308:	4b73      	ldr	r3, [pc, #460]	@ (80084d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800830a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800830c:	e0db      	b.n	80084c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800830e:	4b73      	ldr	r3, [pc, #460]	@ (80084dc <HAL_RCC_GetSysClockFreq+0x208>)
 8008310:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008312:	e0d8      	b.n	80084c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008314:	4b6f      	ldr	r3, [pc, #444]	@ (80084d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800831c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800831e:	4b6d      	ldr	r3, [pc, #436]	@ (80084d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008326:	2b00      	cmp	r3, #0
 8008328:	d063      	beq.n	80083f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800832a:	4b6a      	ldr	r3, [pc, #424]	@ (80084d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	099b      	lsrs	r3, r3, #6
 8008330:	2200      	movs	r2, #0
 8008332:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008334:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800833c:	633b      	str	r3, [r7, #48]	@ 0x30
 800833e:	2300      	movs	r3, #0
 8008340:	637b      	str	r3, [r7, #52]	@ 0x34
 8008342:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008346:	4622      	mov	r2, r4
 8008348:	462b      	mov	r3, r5
 800834a:	f04f 0000 	mov.w	r0, #0
 800834e:	f04f 0100 	mov.w	r1, #0
 8008352:	0159      	lsls	r1, r3, #5
 8008354:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008358:	0150      	lsls	r0, r2, #5
 800835a:	4602      	mov	r2, r0
 800835c:	460b      	mov	r3, r1
 800835e:	4621      	mov	r1, r4
 8008360:	1a51      	subs	r1, r2, r1
 8008362:	6139      	str	r1, [r7, #16]
 8008364:	4629      	mov	r1, r5
 8008366:	eb63 0301 	sbc.w	r3, r3, r1
 800836a:	617b      	str	r3, [r7, #20]
 800836c:	f04f 0200 	mov.w	r2, #0
 8008370:	f04f 0300 	mov.w	r3, #0
 8008374:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008378:	4659      	mov	r1, fp
 800837a:	018b      	lsls	r3, r1, #6
 800837c:	4651      	mov	r1, sl
 800837e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008382:	4651      	mov	r1, sl
 8008384:	018a      	lsls	r2, r1, #6
 8008386:	4651      	mov	r1, sl
 8008388:	ebb2 0801 	subs.w	r8, r2, r1
 800838c:	4659      	mov	r1, fp
 800838e:	eb63 0901 	sbc.w	r9, r3, r1
 8008392:	f04f 0200 	mov.w	r2, #0
 8008396:	f04f 0300 	mov.w	r3, #0
 800839a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800839e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80083a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80083a6:	4690      	mov	r8, r2
 80083a8:	4699      	mov	r9, r3
 80083aa:	4623      	mov	r3, r4
 80083ac:	eb18 0303 	adds.w	r3, r8, r3
 80083b0:	60bb      	str	r3, [r7, #8]
 80083b2:	462b      	mov	r3, r5
 80083b4:	eb49 0303 	adc.w	r3, r9, r3
 80083b8:	60fb      	str	r3, [r7, #12]
 80083ba:	f04f 0200 	mov.w	r2, #0
 80083be:	f04f 0300 	mov.w	r3, #0
 80083c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80083c6:	4629      	mov	r1, r5
 80083c8:	024b      	lsls	r3, r1, #9
 80083ca:	4621      	mov	r1, r4
 80083cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80083d0:	4621      	mov	r1, r4
 80083d2:	024a      	lsls	r2, r1, #9
 80083d4:	4610      	mov	r0, r2
 80083d6:	4619      	mov	r1, r3
 80083d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083da:	2200      	movs	r2, #0
 80083dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80083de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80083e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80083e4:	f7f8 fc70 	bl	8000cc8 <__aeabi_uldivmod>
 80083e8:	4602      	mov	r2, r0
 80083ea:	460b      	mov	r3, r1
 80083ec:	4613      	mov	r3, r2
 80083ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083f0:	e058      	b.n	80084a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80083f2:	4b38      	ldr	r3, [pc, #224]	@ (80084d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	099b      	lsrs	r3, r3, #6
 80083f8:	2200      	movs	r2, #0
 80083fa:	4618      	mov	r0, r3
 80083fc:	4611      	mov	r1, r2
 80083fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008402:	623b      	str	r3, [r7, #32]
 8008404:	2300      	movs	r3, #0
 8008406:	627b      	str	r3, [r7, #36]	@ 0x24
 8008408:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800840c:	4642      	mov	r2, r8
 800840e:	464b      	mov	r3, r9
 8008410:	f04f 0000 	mov.w	r0, #0
 8008414:	f04f 0100 	mov.w	r1, #0
 8008418:	0159      	lsls	r1, r3, #5
 800841a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800841e:	0150      	lsls	r0, r2, #5
 8008420:	4602      	mov	r2, r0
 8008422:	460b      	mov	r3, r1
 8008424:	4641      	mov	r1, r8
 8008426:	ebb2 0a01 	subs.w	sl, r2, r1
 800842a:	4649      	mov	r1, r9
 800842c:	eb63 0b01 	sbc.w	fp, r3, r1
 8008430:	f04f 0200 	mov.w	r2, #0
 8008434:	f04f 0300 	mov.w	r3, #0
 8008438:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800843c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008440:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008444:	ebb2 040a 	subs.w	r4, r2, sl
 8008448:	eb63 050b 	sbc.w	r5, r3, fp
 800844c:	f04f 0200 	mov.w	r2, #0
 8008450:	f04f 0300 	mov.w	r3, #0
 8008454:	00eb      	lsls	r3, r5, #3
 8008456:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800845a:	00e2      	lsls	r2, r4, #3
 800845c:	4614      	mov	r4, r2
 800845e:	461d      	mov	r5, r3
 8008460:	4643      	mov	r3, r8
 8008462:	18e3      	adds	r3, r4, r3
 8008464:	603b      	str	r3, [r7, #0]
 8008466:	464b      	mov	r3, r9
 8008468:	eb45 0303 	adc.w	r3, r5, r3
 800846c:	607b      	str	r3, [r7, #4]
 800846e:	f04f 0200 	mov.w	r2, #0
 8008472:	f04f 0300 	mov.w	r3, #0
 8008476:	e9d7 4500 	ldrd	r4, r5, [r7]
 800847a:	4629      	mov	r1, r5
 800847c:	028b      	lsls	r3, r1, #10
 800847e:	4621      	mov	r1, r4
 8008480:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008484:	4621      	mov	r1, r4
 8008486:	028a      	lsls	r2, r1, #10
 8008488:	4610      	mov	r0, r2
 800848a:	4619      	mov	r1, r3
 800848c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800848e:	2200      	movs	r2, #0
 8008490:	61bb      	str	r3, [r7, #24]
 8008492:	61fa      	str	r2, [r7, #28]
 8008494:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008498:	f7f8 fc16 	bl	8000cc8 <__aeabi_uldivmod>
 800849c:	4602      	mov	r2, r0
 800849e:	460b      	mov	r3, r1
 80084a0:	4613      	mov	r3, r2
 80084a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80084a4:	4b0b      	ldr	r3, [pc, #44]	@ (80084d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	0c1b      	lsrs	r3, r3, #16
 80084aa:	f003 0303 	and.w	r3, r3, #3
 80084ae:	3301      	adds	r3, #1
 80084b0:	005b      	lsls	r3, r3, #1
 80084b2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80084b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80084b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80084bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80084be:	e002      	b.n	80084c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80084c0:	4b05      	ldr	r3, [pc, #20]	@ (80084d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80084c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80084c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80084c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3750      	adds	r7, #80	@ 0x50
 80084cc:	46bd      	mov	sp, r7
 80084ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084d2:	bf00      	nop
 80084d4:	40023800 	.word	0x40023800
 80084d8:	00f42400 	.word	0x00f42400
 80084dc:	007a1200 	.word	0x007a1200

080084e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d101      	bne.n	80084f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	e09d      	b.n	800862e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d108      	bne.n	800850c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008502:	d009      	beq.n	8008518 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	61da      	str	r2, [r3, #28]
 800850a:	e005      	b.n	8008518 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008524:	b2db      	uxtb	r3, r3
 8008526:	2b00      	cmp	r3, #0
 8008528:	d106      	bne.n	8008538 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f7fe fe04 	bl	8007140 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2202      	movs	r2, #2
 800853c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800854e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008558:	d902      	bls.n	8008560 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800855a:	2300      	movs	r3, #0
 800855c:	60fb      	str	r3, [r7, #12]
 800855e:	e002      	b.n	8008566 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008560:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008564:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	68db      	ldr	r3, [r3, #12]
 800856a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800856e:	d007      	beq.n	8008580 <HAL_SPI_Init+0xa0>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008578:	d002      	beq.n	8008580 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008590:	431a      	orrs	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	f003 0302 	and.w	r3, r3, #2
 800859a:	431a      	orrs	r2, r3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	695b      	ldr	r3, [r3, #20]
 80085a0:	f003 0301 	and.w	r3, r3, #1
 80085a4:	431a      	orrs	r2, r3
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	699b      	ldr	r3, [r3, #24]
 80085aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80085ae:	431a      	orrs	r2, r3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	69db      	ldr	r3, [r3, #28]
 80085b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80085b8:	431a      	orrs	r2, r3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a1b      	ldr	r3, [r3, #32]
 80085be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085c2:	ea42 0103 	orr.w	r1, r2, r3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ca:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	430a      	orrs	r2, r1
 80085d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	699b      	ldr	r3, [r3, #24]
 80085da:	0c1b      	lsrs	r3, r3, #16
 80085dc:	f003 0204 	and.w	r2, r3, #4
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085e4:	f003 0310 	and.w	r3, r3, #16
 80085e8:	431a      	orrs	r2, r3
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085ee:	f003 0308 	and.w	r3, r3, #8
 80085f2:	431a      	orrs	r2, r3
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80085fc:	ea42 0103 	orr.w	r1, r2, r3
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	430a      	orrs	r2, r1
 800860c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	69da      	ldr	r2, [r3, #28]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800861c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b088      	sub	sp, #32
 800863a:	af00      	add	r7, sp, #0
 800863c:	60f8      	str	r0, [r7, #12]
 800863e:	60b9      	str	r1, [r7, #8]
 8008640:	603b      	str	r3, [r7, #0]
 8008642:	4613      	mov	r3, r2
 8008644:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008646:	f7fe ffbf 	bl	80075c8 <HAL_GetTick>
 800864a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800864c:	88fb      	ldrh	r3, [r7, #6]
 800864e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008656:	b2db      	uxtb	r3, r3
 8008658:	2b01      	cmp	r3, #1
 800865a:	d001      	beq.n	8008660 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800865c:	2302      	movs	r3, #2
 800865e:	e15c      	b.n	800891a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d002      	beq.n	800866c <HAL_SPI_Transmit+0x36>
 8008666:	88fb      	ldrh	r3, [r7, #6]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d101      	bne.n	8008670 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	e154      	b.n	800891a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008676:	2b01      	cmp	r3, #1
 8008678:	d101      	bne.n	800867e <HAL_SPI_Transmit+0x48>
 800867a:	2302      	movs	r3, #2
 800867c:	e14d      	b.n	800891a <HAL_SPI_Transmit+0x2e4>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2201      	movs	r2, #1
 8008682:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2203      	movs	r2, #3
 800868a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2200      	movs	r2, #0
 8008692:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	68ba      	ldr	r2, [r7, #8]
 8008698:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	88fa      	ldrh	r2, [r7, #6]
 800869e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	88fa      	ldrh	r2, [r7, #6]
 80086a4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2200      	movs	r2, #0
 80086aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2200      	movs	r2, #0
 80086b8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2200      	movs	r2, #0
 80086c0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2200      	movs	r2, #0
 80086c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086d0:	d10f      	bne.n	80086f2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80086e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80086f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086fc:	2b40      	cmp	r3, #64	@ 0x40
 80086fe:	d007      	beq.n	8008710 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800870e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008718:	d952      	bls.n	80087c0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d002      	beq.n	8008728 <HAL_SPI_Transmit+0xf2>
 8008722:	8b7b      	ldrh	r3, [r7, #26]
 8008724:	2b01      	cmp	r3, #1
 8008726:	d145      	bne.n	80087b4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800872c:	881a      	ldrh	r2, [r3, #0]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008738:	1c9a      	adds	r2, r3, #2
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008742:	b29b      	uxth	r3, r3
 8008744:	3b01      	subs	r3, #1
 8008746:	b29a      	uxth	r2, r3
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800874c:	e032      	b.n	80087b4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	f003 0302 	and.w	r3, r3, #2
 8008758:	2b02      	cmp	r3, #2
 800875a:	d112      	bne.n	8008782 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008760:	881a      	ldrh	r2, [r3, #0]
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800876c:	1c9a      	adds	r2, r3, #2
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008776:	b29b      	uxth	r3, r3
 8008778:	3b01      	subs	r3, #1
 800877a:	b29a      	uxth	r2, r3
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008780:	e018      	b.n	80087b4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008782:	f7fe ff21 	bl	80075c8 <HAL_GetTick>
 8008786:	4602      	mov	r2, r0
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	683a      	ldr	r2, [r7, #0]
 800878e:	429a      	cmp	r2, r3
 8008790:	d803      	bhi.n	800879a <HAL_SPI_Transmit+0x164>
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008798:	d102      	bne.n	80087a0 <HAL_SPI_Transmit+0x16a>
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d109      	bne.n	80087b4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80087b0:	2303      	movs	r3, #3
 80087b2:	e0b2      	b.n	800891a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d1c7      	bne.n	800874e <HAL_SPI_Transmit+0x118>
 80087be:	e083      	b.n	80088c8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d002      	beq.n	80087ce <HAL_SPI_Transmit+0x198>
 80087c8:	8b7b      	ldrh	r3, [r7, #26]
 80087ca:	2b01      	cmp	r3, #1
 80087cc:	d177      	bne.n	80088be <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d912      	bls.n	80087fe <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087dc:	881a      	ldrh	r2, [r3, #0]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087e8:	1c9a      	adds	r2, r3, #2
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	3b02      	subs	r3, #2
 80087f6:	b29a      	uxth	r2, r3
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80087fc:	e05f      	b.n	80088be <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	330c      	adds	r3, #12
 8008808:	7812      	ldrb	r2, [r2, #0]
 800880a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008810:	1c5a      	adds	r2, r3, #1
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800881a:	b29b      	uxth	r3, r3
 800881c:	3b01      	subs	r3, #1
 800881e:	b29a      	uxth	r2, r3
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008824:	e04b      	b.n	80088be <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	f003 0302 	and.w	r3, r3, #2
 8008830:	2b02      	cmp	r3, #2
 8008832:	d12b      	bne.n	800888c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008838:	b29b      	uxth	r3, r3
 800883a:	2b01      	cmp	r3, #1
 800883c:	d912      	bls.n	8008864 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008842:	881a      	ldrh	r2, [r3, #0]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800884e:	1c9a      	adds	r2, r3, #2
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008858:	b29b      	uxth	r3, r3
 800885a:	3b02      	subs	r3, #2
 800885c:	b29a      	uxth	r2, r3
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008862:	e02c      	b.n	80088be <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	330c      	adds	r3, #12
 800886e:	7812      	ldrb	r2, [r2, #0]
 8008870:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008876:	1c5a      	adds	r2, r3, #1
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008880:	b29b      	uxth	r3, r3
 8008882:	3b01      	subs	r3, #1
 8008884:	b29a      	uxth	r2, r3
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800888a:	e018      	b.n	80088be <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800888c:	f7fe fe9c 	bl	80075c8 <HAL_GetTick>
 8008890:	4602      	mov	r2, r0
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	1ad3      	subs	r3, r2, r3
 8008896:	683a      	ldr	r2, [r7, #0]
 8008898:	429a      	cmp	r2, r3
 800889a:	d803      	bhi.n	80088a4 <HAL_SPI_Transmit+0x26e>
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a2:	d102      	bne.n	80088aa <HAL_SPI_Transmit+0x274>
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d109      	bne.n	80088be <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2201      	movs	r2, #1
 80088ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80088ba:	2303      	movs	r3, #3
 80088bc:	e02d      	b.n	800891a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d1ae      	bne.n	8008826 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80088c8:	69fa      	ldr	r2, [r7, #28]
 80088ca:	6839      	ldr	r1, [r7, #0]
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	f000 fb65 	bl	8008f9c <SPI_EndRxTxTransaction>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d002      	beq.n	80088de <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2220      	movs	r2, #32
 80088dc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d10a      	bne.n	80088fc <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80088e6:	2300      	movs	r3, #0
 80088e8:	617b      	str	r3, [r7, #20]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	617b      	str	r3, [r7, #20]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	617b      	str	r3, [r7, #20]
 80088fa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2200      	movs	r2, #0
 8008908:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008910:	2b00      	cmp	r3, #0
 8008912:	d001      	beq.n	8008918 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	e000      	b.n	800891a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8008918:	2300      	movs	r3, #0
  }
}
 800891a:	4618      	mov	r0, r3
 800891c:	3720      	adds	r7, #32
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008922:	b580      	push	{r7, lr}
 8008924:	b08a      	sub	sp, #40	@ 0x28
 8008926:	af00      	add	r7, sp, #0
 8008928:	60f8      	str	r0, [r7, #12]
 800892a:	60b9      	str	r1, [r7, #8]
 800892c:	607a      	str	r2, [r7, #4]
 800892e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008930:	2301      	movs	r3, #1
 8008932:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008934:	f7fe fe48 	bl	80075c8 <HAL_GetTick>
 8008938:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008940:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008948:	887b      	ldrh	r3, [r7, #2]
 800894a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800894c:	887b      	ldrh	r3, [r7, #2]
 800894e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008950:	7ffb      	ldrb	r3, [r7, #31]
 8008952:	2b01      	cmp	r3, #1
 8008954:	d00c      	beq.n	8008970 <HAL_SPI_TransmitReceive+0x4e>
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800895c:	d106      	bne.n	800896c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d102      	bne.n	800896c <HAL_SPI_TransmitReceive+0x4a>
 8008966:	7ffb      	ldrb	r3, [r7, #31]
 8008968:	2b04      	cmp	r3, #4
 800896a:	d001      	beq.n	8008970 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800896c:	2302      	movs	r3, #2
 800896e:	e1f3      	b.n	8008d58 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d005      	beq.n	8008982 <HAL_SPI_TransmitReceive+0x60>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d002      	beq.n	8008982 <HAL_SPI_TransmitReceive+0x60>
 800897c:	887b      	ldrh	r3, [r7, #2]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d101      	bne.n	8008986 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	e1e8      	b.n	8008d58 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800898c:	2b01      	cmp	r3, #1
 800898e:	d101      	bne.n	8008994 <HAL_SPI_TransmitReceive+0x72>
 8008990:	2302      	movs	r3, #2
 8008992:	e1e1      	b.n	8008d58 <HAL_SPI_TransmitReceive+0x436>
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2201      	movs	r2, #1
 8008998:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	2b04      	cmp	r3, #4
 80089a6:	d003      	beq.n	80089b0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2205      	movs	r2, #5
 80089ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2200      	movs	r2, #0
 80089b4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	887a      	ldrh	r2, [r7, #2]
 80089c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	887a      	ldrh	r2, [r7, #2]
 80089c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	887a      	ldrh	r2, [r7, #2]
 80089d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	887a      	ldrh	r2, [r7, #2]
 80089dc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2200      	movs	r2, #0
 80089e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2200      	movs	r2, #0
 80089e8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80089f2:	d802      	bhi.n	80089fa <HAL_SPI_TransmitReceive+0xd8>
 80089f4:	8abb      	ldrh	r3, [r7, #20]
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d908      	bls.n	8008a0c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	685a      	ldr	r2, [r3, #4]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008a08:	605a      	str	r2, [r3, #4]
 8008a0a:	e007      	b.n	8008a1c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	685a      	ldr	r2, [r3, #4]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008a1a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a26:	2b40      	cmp	r3, #64	@ 0x40
 8008a28:	d007      	beq.n	8008a3a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008a42:	f240 8083 	bls.w	8008b4c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d002      	beq.n	8008a54 <HAL_SPI_TransmitReceive+0x132>
 8008a4e:	8afb      	ldrh	r3, [r7, #22]
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d16f      	bne.n	8008b34 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a58:	881a      	ldrh	r2, [r3, #0]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a64:	1c9a      	adds	r2, r3, #2
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	3b01      	subs	r3, #1
 8008a72:	b29a      	uxth	r2, r3
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a78:	e05c      	b.n	8008b34 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	f003 0302 	and.w	r3, r3, #2
 8008a84:	2b02      	cmp	r3, #2
 8008a86:	d11b      	bne.n	8008ac0 <HAL_SPI_TransmitReceive+0x19e>
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d016      	beq.n	8008ac0 <HAL_SPI_TransmitReceive+0x19e>
 8008a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d113      	bne.n	8008ac0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a9c:	881a      	ldrh	r2, [r3, #0]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aa8:	1c9a      	adds	r2, r3, #2
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	3b01      	subs	r3, #1
 8008ab6:	b29a      	uxth	r2, r3
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008abc:	2300      	movs	r3, #0
 8008abe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	f003 0301 	and.w	r3, r3, #1
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d11c      	bne.n	8008b08 <HAL_SPI_TransmitReceive+0x1e6>
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d016      	beq.n	8008b08 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	68da      	ldr	r2, [r3, #12]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ae4:	b292      	uxth	r2, r2
 8008ae6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aec:	1c9a      	adds	r2, r3, #2
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	3b01      	subs	r3, #1
 8008afc:	b29a      	uxth	r2, r3
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008b04:	2301      	movs	r3, #1
 8008b06:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008b08:	f7fe fd5e 	bl	80075c8 <HAL_GetTick>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	6a3b      	ldr	r3, [r7, #32]
 8008b10:	1ad3      	subs	r3, r2, r3
 8008b12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d80d      	bhi.n	8008b34 <HAL_SPI_TransmitReceive+0x212>
 8008b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b1e:	d009      	beq.n	8008b34 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8008b30:	2303      	movs	r3, #3
 8008b32:	e111      	b.n	8008d58 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d19d      	bne.n	8008a7a <HAL_SPI_TransmitReceive+0x158>
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d197      	bne.n	8008a7a <HAL_SPI_TransmitReceive+0x158>
 8008b4a:	e0e5      	b.n	8008d18 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d003      	beq.n	8008b5c <HAL_SPI_TransmitReceive+0x23a>
 8008b54:	8afb      	ldrh	r3, [r7, #22]
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	f040 80d1 	bne.w	8008cfe <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d912      	bls.n	8008b8c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b6a:	881a      	ldrh	r2, [r3, #0]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b76:	1c9a      	adds	r2, r3, #2
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	3b02      	subs	r3, #2
 8008b84:	b29a      	uxth	r2, r3
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008b8a:	e0b8      	b.n	8008cfe <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	330c      	adds	r3, #12
 8008b96:	7812      	ldrb	r2, [r2, #0]
 8008b98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b9e:	1c5a      	adds	r2, r3, #1
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	3b01      	subs	r3, #1
 8008bac:	b29a      	uxth	r2, r3
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008bb2:	e0a4      	b.n	8008cfe <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	f003 0302 	and.w	r3, r3, #2
 8008bbe:	2b02      	cmp	r3, #2
 8008bc0:	d134      	bne.n	8008c2c <HAL_SPI_TransmitReceive+0x30a>
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d02f      	beq.n	8008c2c <HAL_SPI_TransmitReceive+0x30a>
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d12c      	bne.n	8008c2c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d912      	bls.n	8008c02 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008be0:	881a      	ldrh	r2, [r3, #0]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bec:	1c9a      	adds	r2, r3, #2
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	3b02      	subs	r3, #2
 8008bfa:	b29a      	uxth	r2, r3
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008c00:	e012      	b.n	8008c28 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	330c      	adds	r3, #12
 8008c0c:	7812      	ldrb	r2, [r2, #0]
 8008c0e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c14:	1c5a      	adds	r2, r3, #1
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	3b01      	subs	r3, #1
 8008c22:	b29a      	uxth	r2, r3
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	f003 0301 	and.w	r3, r3, #1
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d148      	bne.n	8008ccc <HAL_SPI_TransmitReceive+0x3aa>
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d042      	beq.n	8008ccc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d923      	bls.n	8008c9a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68da      	ldr	r2, [r3, #12]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c5c:	b292      	uxth	r2, r2
 8008c5e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c64:	1c9a      	adds	r2, r3, #2
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	3b02      	subs	r3, #2
 8008c74:	b29a      	uxth	r2, r3
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d81f      	bhi.n	8008cc8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	685a      	ldr	r2, [r3, #4]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008c96:	605a      	str	r2, [r3, #4]
 8008c98:	e016      	b.n	8008cc8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f103 020c 	add.w	r2, r3, #12
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ca6:	7812      	ldrb	r2, [r2, #0]
 8008ca8:	b2d2      	uxtb	r2, r2
 8008caa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cb0:	1c5a      	adds	r2, r3, #1
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	3b01      	subs	r3, #1
 8008cc0:	b29a      	uxth	r2, r3
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008ccc:	f7fe fc7c 	bl	80075c8 <HAL_GetTick>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	6a3b      	ldr	r3, [r7, #32]
 8008cd4:	1ad3      	subs	r3, r2, r3
 8008cd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d803      	bhi.n	8008ce4 <HAL_SPI_TransmitReceive+0x3c2>
 8008cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce2:	d102      	bne.n	8008cea <HAL_SPI_TransmitReceive+0x3c8>
 8008ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d109      	bne.n	8008cfe <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2201      	movs	r2, #1
 8008cee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	e02c      	b.n	8008d58 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	f47f af55 	bne.w	8008bb4 <HAL_SPI_TransmitReceive+0x292>
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	f47f af4e 	bne.w	8008bb4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d18:	6a3a      	ldr	r2, [r7, #32]
 8008d1a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	f000 f93d 	bl	8008f9c <SPI_EndRxTxTransaction>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d008      	beq.n	8008d3a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2220      	movs	r2, #32
 8008d2c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2200      	movs	r2, #0
 8008d32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	e00e      	b.n	8008d58 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2200      	movs	r2, #0
 8008d46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d001      	beq.n	8008d56 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	e000      	b.n	8008d58 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8008d56:	2300      	movs	r3, #0
  }
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3728      	adds	r7, #40	@ 0x28
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b088      	sub	sp, #32
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	603b      	str	r3, [r7, #0]
 8008d6c:	4613      	mov	r3, r2
 8008d6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008d70:	f7fe fc2a 	bl	80075c8 <HAL_GetTick>
 8008d74:	4602      	mov	r2, r0
 8008d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d78:	1a9b      	subs	r3, r3, r2
 8008d7a:	683a      	ldr	r2, [r7, #0]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008d80:	f7fe fc22 	bl	80075c8 <HAL_GetTick>
 8008d84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008d86:	4b39      	ldr	r3, [pc, #228]	@ (8008e6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	015b      	lsls	r3, r3, #5
 8008d8c:	0d1b      	lsrs	r3, r3, #20
 8008d8e:	69fa      	ldr	r2, [r7, #28]
 8008d90:	fb02 f303 	mul.w	r3, r2, r3
 8008d94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d96:	e055      	b.n	8008e44 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d9e:	d051      	beq.n	8008e44 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008da0:	f7fe fc12 	bl	80075c8 <HAL_GetTick>
 8008da4:	4602      	mov	r2, r0
 8008da6:	69bb      	ldr	r3, [r7, #24]
 8008da8:	1ad3      	subs	r3, r2, r3
 8008daa:	69fa      	ldr	r2, [r7, #28]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d902      	bls.n	8008db6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d13d      	bne.n	8008e32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	685a      	ldr	r2, [r3, #4]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008dc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008dce:	d111      	bne.n	8008df4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008dd8:	d004      	beq.n	8008de4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008de2:	d107      	bne.n	8008df4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008df2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008df8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008dfc:	d10f      	bne.n	8008e1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008e0c:	601a      	str	r2, [r3, #0]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008e1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2201      	movs	r2, #1
 8008e22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008e2e:	2303      	movs	r3, #3
 8008e30:	e018      	b.n	8008e64 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d102      	bne.n	8008e3e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	61fb      	str	r3, [r7, #28]
 8008e3c:	e002      	b.n	8008e44 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	3b01      	subs	r3, #1
 8008e42:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	689a      	ldr	r2, [r3, #8]
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	4013      	ands	r3, r2
 8008e4e:	68ba      	ldr	r2, [r7, #8]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	bf0c      	ite	eq
 8008e54:	2301      	moveq	r3, #1
 8008e56:	2300      	movne	r3, #0
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	79fb      	ldrb	r3, [r7, #7]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d19a      	bne.n	8008d98 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8008e62:	2300      	movs	r3, #0
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3720      	adds	r7, #32
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	20000000 	.word	0x20000000

08008e70 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b08a      	sub	sp, #40	@ 0x28
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]
 8008e7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008e82:	f7fe fba1 	bl	80075c8 <HAL_GetTick>
 8008e86:	4602      	mov	r2, r0
 8008e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e8a:	1a9b      	subs	r3, r3, r2
 8008e8c:	683a      	ldr	r2, [r7, #0]
 8008e8e:	4413      	add	r3, r2
 8008e90:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008e92:	f7fe fb99 	bl	80075c8 <HAL_GetTick>
 8008e96:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	330c      	adds	r3, #12
 8008e9e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008ea0:	4b3d      	ldr	r3, [pc, #244]	@ (8008f98 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	009b      	lsls	r3, r3, #2
 8008ea8:	4413      	add	r3, r2
 8008eaa:	00da      	lsls	r2, r3, #3
 8008eac:	1ad3      	subs	r3, r2, r3
 8008eae:	0d1b      	lsrs	r3, r3, #20
 8008eb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008eb2:	fb02 f303 	mul.w	r3, r2, r3
 8008eb6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008eb8:	e061      	b.n	8008f7e <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008ec0:	d107      	bne.n	8008ed2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d104      	bne.n	8008ed2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008ed0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed8:	d051      	beq.n	8008f7e <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008eda:	f7fe fb75 	bl	80075c8 <HAL_GetTick>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	6a3b      	ldr	r3, [r7, #32]
 8008ee2:	1ad3      	subs	r3, r2, r3
 8008ee4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d902      	bls.n	8008ef0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d13d      	bne.n	8008f6c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	685a      	ldr	r2, [r3, #4]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008efe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008f08:	d111      	bne.n	8008f2e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f12:	d004      	beq.n	8008f1e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f1c:	d107      	bne.n	8008f2e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f2c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f36:	d10f      	bne.n	8008f58 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008f46:	601a      	str	r2, [r3, #0]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008f56:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2200      	movs	r2, #0
 8008f64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008f68:	2303      	movs	r3, #3
 8008f6a:	e011      	b.n	8008f90 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008f6c:	69bb      	ldr	r3, [r7, #24]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d102      	bne.n	8008f78 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 8008f72:	2300      	movs	r3, #0
 8008f74:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f76:	e002      	b.n	8008f7e <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 8008f78:	69bb      	ldr	r3, [r7, #24]
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	689a      	ldr	r2, [r3, #8]
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	4013      	ands	r3, r2
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d195      	bne.n	8008eba <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 8008f8e:	2300      	movs	r3, #0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3728      	adds	r7, #40	@ 0x28
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	20000000 	.word	0x20000000

08008f9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b088      	sub	sp, #32
 8008fa0:	af02      	add	r7, sp, #8
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	9300      	str	r3, [sp, #0]
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008fb4:	68f8      	ldr	r0, [r7, #12]
 8008fb6:	f7ff ff5b 	bl	8008e70 <SPI_WaitFifoStateUntilTimeout>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d007      	beq.n	8008fd0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fc4:	f043 0220 	orr.w	r2, r3, #32
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008fcc:	2303      	movs	r3, #3
 8008fce:	e046      	b.n	800905e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008fd0:	4b25      	ldr	r3, [pc, #148]	@ (8009068 <SPI_EndRxTxTransaction+0xcc>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a25      	ldr	r2, [pc, #148]	@ (800906c <SPI_EndRxTxTransaction+0xd0>)
 8008fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8008fda:	0d5b      	lsrs	r3, r3, #21
 8008fdc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008fe0:	fb02 f303 	mul.w	r3, r2, r3
 8008fe4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008fee:	d112      	bne.n	8009016 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	9300      	str	r3, [sp, #0]
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	2180      	movs	r1, #128	@ 0x80
 8008ffa:	68f8      	ldr	r0, [r7, #12]
 8008ffc:	f7ff feb0 	bl	8008d60 <SPI_WaitFlagStateUntilTimeout>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d016      	beq.n	8009034 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800900a:	f043 0220 	orr.w	r2, r3, #32
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009012:	2303      	movs	r3, #3
 8009014:	e023      	b.n	800905e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d00a      	beq.n	8009032 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	3b01      	subs	r3, #1
 8009020:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800902c:	2b80      	cmp	r3, #128	@ 0x80
 800902e:	d0f2      	beq.n	8009016 <SPI_EndRxTxTransaction+0x7a>
 8009030:	e000      	b.n	8009034 <SPI_EndRxTxTransaction+0x98>
        break;
 8009032:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	9300      	str	r3, [sp, #0]
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	2200      	movs	r2, #0
 800903c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	f7ff ff15 	bl	8008e70 <SPI_WaitFifoStateUntilTimeout>
 8009046:	4603      	mov	r3, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d007      	beq.n	800905c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009050:	f043 0220 	orr.w	r2, r3, #32
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009058:	2303      	movs	r3, #3
 800905a:	e000      	b.n	800905e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	3718      	adds	r7, #24
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	20000000 	.word	0x20000000
 800906c:	165e9f81 	.word	0x165e9f81

08009070 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009074:	4904      	ldr	r1, [pc, #16]	@ (8009088 <MX_FATFS_Init+0x18>)
 8009076:	4805      	ldr	r0, [pc, #20]	@ (800908c <MX_FATFS_Init+0x1c>)
 8009078:	f004 fade 	bl	800d638 <FATFS_LinkDriver>
 800907c:	4603      	mov	r3, r0
 800907e:	461a      	mov	r2, r3
 8009080:	4b03      	ldr	r3, [pc, #12]	@ (8009090 <MX_FATFS_Init+0x20>)
 8009082:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009084:	bf00      	nop
 8009086:	bd80      	pop	{r7, pc}
 8009088:	200036fc 	.word	0x200036fc
 800908c:	2000000c 	.word	0x2000000c
 8009090:	200036f8 	.word	0x200036f8

08009094 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009094:	b480      	push	{r7}
 8009096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009098:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800909a:	4618      	mov	r0, r3
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr

080090a4 <disk_status>:
    disk_ioctl
#endif
};


DSTATUS disk_status(BYTE pdrv) {
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	4603      	mov	r3, r0
 80090ac:	71fb      	strb	r3, [r7, #7]
    if (pdrv == DEV_MMC) {
 80090ae:	79fb      	ldrb	r3, [r7, #7]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d101      	bne.n	80090b8 <disk_status+0x14>
        return 0;  // OK
 80090b4:	2300      	movs	r3, #0
 80090b6:	e000      	b.n	80090ba <disk_status+0x16>
    }
    return STA_NOINIT;
 80090b8:	2301      	movs	r3, #1
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	370c      	adds	r7, #12
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr

080090c6 <disk_initialize>:

DSTATUS disk_initialize(BYTE pdrv) {
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b082      	sub	sp, #8
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	4603      	mov	r3, r0
 80090ce:	71fb      	strb	r3, [r7, #7]
    if (pdrv == DEV_MMC) {
 80090d0:	79fb      	ldrb	r3, [r7, #7]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d108      	bne.n	80090e8 <disk_initialize+0x22>
        return (SD_Init() == SD_OK) ? 0 : STA_NOINIT;
 80090d6:	f7fd fee7 	bl	8006ea8 <SD_Init>
 80090da:	4603      	mov	r3, r0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	bf14      	ite	ne
 80090e0:	2301      	movne	r3, #1
 80090e2:	2300      	moveq	r3, #0
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	e000      	b.n	80090ea <disk_initialize+0x24>
    }
    return STA_NOINIT;
 80090e8:	2301      	movs	r3, #1
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3708      	adds	r7, #8
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <disk_read>:

DRESULT disk_read(BYTE pdrv, BYTE* buff, LBA_t sector, UINT count) {
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b086      	sub	sp, #24
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	607a      	str	r2, [r7, #4]
 80090fc:	603b      	str	r3, [r7, #0]
 80090fe:	4603      	mov	r3, r0
 8009100:	73fb      	strb	r3, [r7, #15]
    if (pdrv != DEV_MMC || count == 0) return RES_PARERR;
 8009102:	7bfb      	ldrb	r3, [r7, #15]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d102      	bne.n	800910e <disk_read+0x1c>
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d101      	bne.n	8009112 <disk_read+0x20>
 800910e:	2304      	movs	r3, #4
 8009110:	e01a      	b.n	8009148 <disk_read+0x56>

    for (UINT i = 0; i < count; i++) {
 8009112:	2300      	movs	r3, #0
 8009114:	617b      	str	r3, [r7, #20]
 8009116:	e012      	b.n	800913e <disk_read+0x4c>
        if (SD_ReadBlock((sector + i) * 512, buff + (512 * i)) != SD_OK)
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	4413      	add	r3, r2
 800911e:	0258      	lsls	r0, r3, #9
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	025b      	lsls	r3, r3, #9
 8009124:	68ba      	ldr	r2, [r7, #8]
 8009126:	4413      	add	r3, r2
 8009128:	4619      	mov	r1, r3
 800912a:	f7fd ff05 	bl	8006f38 <SD_ReadBlock>
 800912e:	4603      	mov	r3, r0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d001      	beq.n	8009138 <disk_read+0x46>
            return RES_ERROR;
 8009134:	2301      	movs	r3, #1
 8009136:	e007      	b.n	8009148 <disk_read+0x56>
    for (UINT i = 0; i < count; i++) {
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	3301      	adds	r3, #1
 800913c:	617b      	str	r3, [r7, #20]
 800913e:	697a      	ldr	r2, [r7, #20]
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	429a      	cmp	r2, r3
 8009144:	d3e8      	bcc.n	8009118 <disk_read+0x26>
    }

    return RES_OK;
 8009146:	2300      	movs	r3, #0
}
 8009148:	4618      	mov	r0, r3
 800914a:	3718      	adds	r7, #24
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <disk_write>:

DRESULT disk_write(BYTE pdrv, const BYTE* buff, LBA_t sector, UINT count) {
 8009150:	b580      	push	{r7, lr}
 8009152:	b086      	sub	sp, #24
 8009154:	af00      	add	r7, sp, #0
 8009156:	60b9      	str	r1, [r7, #8]
 8009158:	607a      	str	r2, [r7, #4]
 800915a:	603b      	str	r3, [r7, #0]
 800915c:	4603      	mov	r3, r0
 800915e:	73fb      	strb	r3, [r7, #15]
#if FF_FS_READONLY
    return RES_WRPRT;
#else
    if (pdrv != DEV_MMC || count == 0) return RES_PARERR;
 8009160:	7bfb      	ldrb	r3, [r7, #15]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d102      	bne.n	800916c <disk_write+0x1c>
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d101      	bne.n	8009170 <disk_write+0x20>
 800916c:	2304      	movs	r3, #4
 800916e:	e01a      	b.n	80091a6 <disk_write+0x56>

    for (UINT i = 0; i < count; i++) {
 8009170:	2300      	movs	r3, #0
 8009172:	617b      	str	r3, [r7, #20]
 8009174:	e012      	b.n	800919c <disk_write+0x4c>
        if (SD_WriteBlock((sector + i) * 512, buff + (512 * i)) != SD_OK)
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	4413      	add	r3, r2
 800917c:	0258      	lsls	r0, r3, #9
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	025b      	lsls	r3, r3, #9
 8009182:	68ba      	ldr	r2, [r7, #8]
 8009184:	4413      	add	r3, r2
 8009186:	4619      	mov	r1, r3
 8009188:	f7fd ff1a 	bl	8006fc0 <SD_WriteBlock>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d001      	beq.n	8009196 <disk_write+0x46>
            return RES_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	e007      	b.n	80091a6 <disk_write+0x56>
    for (UINT i = 0; i < count; i++) {
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	3301      	adds	r3, #1
 800919a:	617b      	str	r3, [r7, #20]
 800919c:	697a      	ldr	r2, [r7, #20]
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d3e8      	bcc.n	8009176 <disk_write+0x26>
    }

    return RES_OK;
 80091a4:	2300      	movs	r3, #0
#endif
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3718      	adds	r7, #24
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
	...

080091b0 <disk_ioctl>:

DRESULT disk_ioctl(BYTE pdrv, BYTE cmd, void* buff) {
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	4603      	mov	r3, r0
 80091b8:	603a      	str	r2, [r7, #0]
 80091ba:	71fb      	strb	r3, [r7, #7]
 80091bc:	460b      	mov	r3, r1
 80091be:	71bb      	strb	r3, [r7, #6]
    if (pdrv != DEV_MMC) return RES_PARERR;
 80091c0:	79fb      	ldrb	r3, [r7, #7]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d001      	beq.n	80091ca <disk_ioctl+0x1a>
 80091c6:	2304      	movs	r3, #4
 80091c8:	e022      	b.n	8009210 <disk_ioctl+0x60>

    switch (cmd) {
 80091ca:	79bb      	ldrb	r3, [r7, #6]
 80091cc:	2b03      	cmp	r3, #3
 80091ce:	d81e      	bhi.n	800920e <disk_ioctl+0x5e>
 80091d0:	a201      	add	r2, pc, #4	@ (adr r2, 80091d8 <disk_ioctl+0x28>)
 80091d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d6:	bf00      	nop
 80091d8:	080091e9 	.word	0x080091e9
 80091dc:	080091ed 	.word	0x080091ed
 80091e0:	080091f9 	.word	0x080091f9
 80091e4:	08009205 	.word	0x08009205
        case CTRL_SYNC:
            return RES_OK;
 80091e8:	2300      	movs	r3, #0
 80091ea:	e011      	b.n	8009210 <disk_ioctl+0x60>
        case GET_SECTOR_COUNT:
            *(DWORD*)buff = 32768;  // Exemplo: 16 MB
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80091f2:	601a      	str	r2, [r3, #0]
            return RES_OK;
 80091f4:	2300      	movs	r3, #0
 80091f6:	e00b      	b.n	8009210 <disk_ioctl+0x60>
        case GET_SECTOR_SIZE:
            *(WORD*)buff = 512;
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80091fe:	801a      	strh	r2, [r3, #0]
            return RES_OK;
 8009200:	2300      	movs	r3, #0
 8009202:	e005      	b.n	8009210 <disk_ioctl+0x60>
        case GET_BLOCK_SIZE:
            *(DWORD*)buff = 1;
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	2201      	movs	r2, #1
 8009208:	601a      	str	r2, [r3, #0]
            return RES_OK;
 800920a:	2300      	movs	r3, #0
 800920c:	e000      	b.n	8009210 <disk_ioctl+0x60>
    }

    return RES_PARERR;
 800920e:	2304      	movs	r3, #4
}
 8009210:	4618      	mov	r0, r3
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800921c:	b480      	push	{r7}
 800921e:	b085      	sub	sp, #20
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	3301      	adds	r3, #1
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800922c:	89fb      	ldrh	r3, [r7, #14]
 800922e:	021b      	lsls	r3, r3, #8
 8009230:	b21a      	sxth	r2, r3
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	b21b      	sxth	r3, r3
 8009238:	4313      	orrs	r3, r2
 800923a:	b21b      	sxth	r3, r3
 800923c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800923e:	89fb      	ldrh	r3, [r7, #14]
}
 8009240:	4618      	mov	r0, r3
 8009242:	3714      	adds	r7, #20
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr

0800924c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800924c:	b480      	push	{r7}
 800924e:	b085      	sub	sp, #20
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	3303      	adds	r3, #3
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	021b      	lsls	r3, r3, #8
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	3202      	adds	r2, #2
 8009264:	7812      	ldrb	r2, [r2, #0]
 8009266:	4313      	orrs	r3, r2
 8009268:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	021b      	lsls	r3, r3, #8
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	3201      	adds	r2, #1
 8009272:	7812      	ldrb	r2, [r2, #0]
 8009274:	4313      	orrs	r3, r2
 8009276:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	021b      	lsls	r3, r3, #8
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	7812      	ldrb	r2, [r2, #0]
 8009280:	4313      	orrs	r3, r2
 8009282:	60fb      	str	r3, [r7, #12]
	return rv;
 8009284:	68fb      	ldr	r3, [r7, #12]
}
 8009286:	4618      	mov	r0, r3
 8009288:	3714      	adds	r7, #20
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr

08009292 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8009292:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009296:	b09d      	sub	sp, #116	@ 0x74
 8009298:	af00      	add	r7, sp, #0
 800929a:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 800929c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800929e:	3307      	adds	r3, #7
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	2200      	movs	r2, #0
 80092a6:	469a      	mov	sl, r3
 80092a8:	4693      	mov	fp, r2
 80092aa:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 80092ae:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80092b2:	f04f 0000 	mov.w	r0, #0
 80092b6:	f04f 0100 	mov.w	r1, #0
 80092ba:	0219      	lsls	r1, r3, #8
 80092bc:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80092c0:	0210      	lsls	r0, r2, #8
 80092c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092c4:	3306      	adds	r3, #6
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	2200      	movs	r2, #0
 80092cc:	461c      	mov	r4, r3
 80092ce:	4615      	mov	r5, r2
 80092d0:	ea40 0804 	orr.w	r8, r0, r4
 80092d4:	ea41 0905 	orr.w	r9, r1, r5
 80092d8:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 80092dc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80092e0:	f04f 0000 	mov.w	r0, #0
 80092e4:	f04f 0100 	mov.w	r1, #0
 80092e8:	0219      	lsls	r1, r3, #8
 80092ea:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80092ee:	0210      	lsls	r0, r2, #8
 80092f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092f2:	3305      	adds	r3, #5
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	2200      	movs	r2, #0
 80092fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80092fc:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80092fe:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8009302:	4623      	mov	r3, r4
 8009304:	4303      	orrs	r3, r0
 8009306:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009308:	462b      	mov	r3, r5
 800930a:	430b      	orrs	r3, r1
 800930c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800930e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8009312:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 8009316:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800931a:	f04f 0000 	mov.w	r0, #0
 800931e:	f04f 0100 	mov.w	r1, #0
 8009322:	0219      	lsls	r1, r3, #8
 8009324:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009328:	0210      	lsls	r0, r2, #8
 800932a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800932c:	3304      	adds	r3, #4
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	b2db      	uxtb	r3, r3
 8009332:	2200      	movs	r2, #0
 8009334:	653b      	str	r3, [r7, #80]	@ 0x50
 8009336:	657a      	str	r2, [r7, #84]	@ 0x54
 8009338:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800933c:	4623      	mov	r3, r4
 800933e:	4303      	orrs	r3, r0
 8009340:	623b      	str	r3, [r7, #32]
 8009342:	462b      	mov	r3, r5
 8009344:	430b      	orrs	r3, r1
 8009346:	627b      	str	r3, [r7, #36]	@ 0x24
 8009348:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800934c:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 8009350:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8009354:	f04f 0000 	mov.w	r0, #0
 8009358:	f04f 0100 	mov.w	r1, #0
 800935c:	0219      	lsls	r1, r3, #8
 800935e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009362:	0210      	lsls	r0, r2, #8
 8009364:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009366:	3303      	adds	r3, #3
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	b2db      	uxtb	r3, r3
 800936c:	2200      	movs	r2, #0
 800936e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009370:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009372:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8009376:	4623      	mov	r3, r4
 8009378:	4303      	orrs	r3, r0
 800937a:	61bb      	str	r3, [r7, #24]
 800937c:	462b      	mov	r3, r5
 800937e:	430b      	orrs	r3, r1
 8009380:	61fb      	str	r3, [r7, #28]
 8009382:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8009386:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 800938a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800938e:	f04f 0000 	mov.w	r0, #0
 8009392:	f04f 0100 	mov.w	r1, #0
 8009396:	0219      	lsls	r1, r3, #8
 8009398:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800939c:	0210      	lsls	r0, r2, #8
 800939e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093a0:	3302      	adds	r3, #2
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	2200      	movs	r2, #0
 80093a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80093aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80093ac:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 80093b0:	4623      	mov	r3, r4
 80093b2:	4303      	orrs	r3, r0
 80093b4:	613b      	str	r3, [r7, #16]
 80093b6:	462b      	mov	r3, r5
 80093b8:	430b      	orrs	r3, r1
 80093ba:	617b      	str	r3, [r7, #20]
 80093bc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80093c0:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 80093c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80093c8:	f04f 0200 	mov.w	r2, #0
 80093cc:	f04f 0300 	mov.w	r3, #0
 80093d0:	020b      	lsls	r3, r1, #8
 80093d2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80093d6:	0202      	lsls	r2, r0, #8
 80093d8:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80093da:	3101      	adds	r1, #1
 80093dc:	7809      	ldrb	r1, [r1, #0]
 80093de:	b2c9      	uxtb	r1, r1
 80093e0:	2000      	movs	r0, #0
 80093e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80093e4:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80093e6:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80093ea:	4621      	mov	r1, r4
 80093ec:	4311      	orrs	r1, r2
 80093ee:	60b9      	str	r1, [r7, #8]
 80093f0:	4629      	mov	r1, r5
 80093f2:	4319      	orrs	r1, r3
 80093f4:	60f9      	str	r1, [r7, #12]
 80093f6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80093fa:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 80093fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009402:	f04f 0200 	mov.w	r2, #0
 8009406:	f04f 0300 	mov.w	r3, #0
 800940a:	020b      	lsls	r3, r1, #8
 800940c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009410:	0202      	lsls	r2, r0, #8
 8009412:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009414:	7809      	ldrb	r1, [r1, #0]
 8009416:	b2c9      	uxtb	r1, r1
 8009418:	2000      	movs	r0, #0
 800941a:	6339      	str	r1, [r7, #48]	@ 0x30
 800941c:	6378      	str	r0, [r7, #52]	@ 0x34
 800941e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009422:	4621      	mov	r1, r4
 8009424:	4311      	orrs	r1, r2
 8009426:	6039      	str	r1, [r7, #0]
 8009428:	4629      	mov	r1, r5
 800942a:	4319      	orrs	r1, r3
 800942c:	6079      	str	r1, [r7, #4]
 800942e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8009432:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 8009436:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 800943a:	4610      	mov	r0, r2
 800943c:	4619      	mov	r1, r3
 800943e:	3774      	adds	r7, #116	@ 0x74
 8009440:	46bd      	mov	sp, r7
 8009442:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009446:	4770      	bx	lr

08009448 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	460b      	mov	r3, r1
 8009452:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	1c5a      	adds	r2, r3, #1
 8009458:	607a      	str	r2, [r7, #4]
 800945a:	887a      	ldrh	r2, [r7, #2]
 800945c:	b2d2      	uxtb	r2, r2
 800945e:	701a      	strb	r2, [r3, #0]
 8009460:	887b      	ldrh	r3, [r7, #2]
 8009462:	0a1b      	lsrs	r3, r3, #8
 8009464:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	1c5a      	adds	r2, r3, #1
 800946a:	607a      	str	r2, [r7, #4]
 800946c:	887a      	ldrh	r2, [r7, #2]
 800946e:	b2d2      	uxtb	r2, r2
 8009470:	701a      	strb	r2, [r3, #0]
}
 8009472:	bf00      	nop
 8009474:	370c      	adds	r7, #12
 8009476:	46bd      	mov	sp, r7
 8009478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947c:	4770      	bx	lr

0800947e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800947e:	b480      	push	{r7}
 8009480:	b083      	sub	sp, #12
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
 8009486:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	1c5a      	adds	r2, r3, #1
 800948c:	607a      	str	r2, [r7, #4]
 800948e:	683a      	ldr	r2, [r7, #0]
 8009490:	b2d2      	uxtb	r2, r2
 8009492:	701a      	strb	r2, [r3, #0]
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	0a1b      	lsrs	r3, r3, #8
 8009498:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	1c5a      	adds	r2, r3, #1
 800949e:	607a      	str	r2, [r7, #4]
 80094a0:	683a      	ldr	r2, [r7, #0]
 80094a2:	b2d2      	uxtb	r2, r2
 80094a4:	701a      	strb	r2, [r3, #0]
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	0a1b      	lsrs	r3, r3, #8
 80094aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	1c5a      	adds	r2, r3, #1
 80094b0:	607a      	str	r2, [r7, #4]
 80094b2:	683a      	ldr	r2, [r7, #0]
 80094b4:	b2d2      	uxtb	r2, r2
 80094b6:	701a      	strb	r2, [r3, #0]
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	0a1b      	lsrs	r3, r3, #8
 80094bc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	1c5a      	adds	r2, r3, #1
 80094c2:	607a      	str	r2, [r7, #4]
 80094c4:	683a      	ldr	r2, [r7, #0]
 80094c6:	b2d2      	uxtb	r2, r2
 80094c8:	701a      	strb	r2, [r3, #0]
}
 80094ca:	bf00      	nop
 80094cc:	370c      	adds	r7, #12
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr

080094d6 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 80094d6:	b480      	push	{r7}
 80094d8:	b085      	sub	sp, #20
 80094da:	af00      	add	r7, sp, #0
 80094dc:	60f8      	str	r0, [r7, #12]
 80094de:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	1c5a      	adds	r2, r3, #1
 80094e6:	60fa      	str	r2, [r7, #12]
 80094e8:	783a      	ldrb	r2, [r7, #0]
 80094ea:	701a      	strb	r2, [r3, #0]
 80094ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094f0:	f04f 0200 	mov.w	r2, #0
 80094f4:	f04f 0300 	mov.w	r3, #0
 80094f8:	0a02      	lsrs	r2, r0, #8
 80094fa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80094fe:	0a0b      	lsrs	r3, r1, #8
 8009500:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	1c5a      	adds	r2, r3, #1
 8009508:	60fa      	str	r2, [r7, #12]
 800950a:	783a      	ldrb	r2, [r7, #0]
 800950c:	701a      	strb	r2, [r3, #0]
 800950e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009512:	f04f 0200 	mov.w	r2, #0
 8009516:	f04f 0300 	mov.w	r3, #0
 800951a:	0a02      	lsrs	r2, r0, #8
 800951c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009520:	0a0b      	lsrs	r3, r1, #8
 8009522:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	1c5a      	adds	r2, r3, #1
 800952a:	60fa      	str	r2, [r7, #12]
 800952c:	783a      	ldrb	r2, [r7, #0]
 800952e:	701a      	strb	r2, [r3, #0]
 8009530:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009534:	f04f 0200 	mov.w	r2, #0
 8009538:	f04f 0300 	mov.w	r3, #0
 800953c:	0a02      	lsrs	r2, r0, #8
 800953e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009542:	0a0b      	lsrs	r3, r1, #8
 8009544:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	1c5a      	adds	r2, r3, #1
 800954c:	60fa      	str	r2, [r7, #12]
 800954e:	783a      	ldrb	r2, [r7, #0]
 8009550:	701a      	strb	r2, [r3, #0]
 8009552:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009556:	f04f 0200 	mov.w	r2, #0
 800955a:	f04f 0300 	mov.w	r3, #0
 800955e:	0a02      	lsrs	r2, r0, #8
 8009560:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009564:	0a0b      	lsrs	r3, r1, #8
 8009566:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	1c5a      	adds	r2, r3, #1
 800956e:	60fa      	str	r2, [r7, #12]
 8009570:	783a      	ldrb	r2, [r7, #0]
 8009572:	701a      	strb	r2, [r3, #0]
 8009574:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009578:	f04f 0200 	mov.w	r2, #0
 800957c:	f04f 0300 	mov.w	r3, #0
 8009580:	0a02      	lsrs	r2, r0, #8
 8009582:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009586:	0a0b      	lsrs	r3, r1, #8
 8009588:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	1c5a      	adds	r2, r3, #1
 8009590:	60fa      	str	r2, [r7, #12]
 8009592:	783a      	ldrb	r2, [r7, #0]
 8009594:	701a      	strb	r2, [r3, #0]
 8009596:	e9d7 0100 	ldrd	r0, r1, [r7]
 800959a:	f04f 0200 	mov.w	r2, #0
 800959e:	f04f 0300 	mov.w	r3, #0
 80095a2:	0a02      	lsrs	r2, r0, #8
 80095a4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80095a8:	0a0b      	lsrs	r3, r1, #8
 80095aa:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	1c5a      	adds	r2, r3, #1
 80095b2:	60fa      	str	r2, [r7, #12]
 80095b4:	783a      	ldrb	r2, [r7, #0]
 80095b6:	701a      	strb	r2, [r3, #0]
 80095b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095bc:	f04f 0200 	mov.w	r2, #0
 80095c0:	f04f 0300 	mov.w	r3, #0
 80095c4:	0a02      	lsrs	r2, r0, #8
 80095c6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80095ca:	0a0b      	lsrs	r3, r1, #8
 80095cc:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	1c5a      	adds	r2, r3, #1
 80095d4:	60fa      	str	r2, [r7, #12]
 80095d6:	783a      	ldrb	r2, [r7, #0]
 80095d8:	701a      	strb	r2, [r3, #0]
}
 80095da:	bf00      	nop
 80095dc:	3714      	adds	r7, #20
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr

080095e6 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80095e6:	b480      	push	{r7}
 80095e8:	b087      	sub	sp, #28
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	60f8      	str	r0, [r7, #12]
 80095ee:	60b9      	str	r1, [r7, #8]
 80095f0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d00d      	beq.n	800961c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009600:	693a      	ldr	r2, [r7, #16]
 8009602:	1c53      	adds	r3, r2, #1
 8009604:	613b      	str	r3, [r7, #16]
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	1c59      	adds	r1, r3, #1
 800960a:	6179      	str	r1, [r7, #20]
 800960c:	7812      	ldrb	r2, [r2, #0]
 800960e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	3b01      	subs	r3, #1
 8009614:	607b      	str	r3, [r7, #4]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d1f1      	bne.n	8009600 <mem_cpy+0x1a>
	}
}
 800961c:	bf00      	nop
 800961e:	371c      	adds	r7, #28
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009628:	b480      	push	{r7}
 800962a:	b087      	sub	sp, #28
 800962c:	af00      	add	r7, sp, #0
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	1c5a      	adds	r2, r3, #1
 800963c:	617a      	str	r2, [r7, #20]
 800963e:	68ba      	ldr	r2, [r7, #8]
 8009640:	b2d2      	uxtb	r2, r2
 8009642:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	3b01      	subs	r3, #1
 8009648:	607b      	str	r3, [r7, #4]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d1f3      	bne.n	8009638 <mem_set+0x10>
}
 8009650:	bf00      	nop
 8009652:	bf00      	nop
 8009654:	371c      	adds	r7, #28
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr

0800965e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800965e:	b480      	push	{r7}
 8009660:	b089      	sub	sp, #36	@ 0x24
 8009662:	af00      	add	r7, sp, #0
 8009664:	60f8      	str	r0, [r7, #12]
 8009666:	60b9      	str	r1, [r7, #8]
 8009668:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	61fb      	str	r3, [r7, #28]
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009672:	2300      	movs	r3, #0
 8009674:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009676:	69fb      	ldr	r3, [r7, #28]
 8009678:	1c5a      	adds	r2, r3, #1
 800967a:	61fa      	str	r2, [r7, #28]
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	4619      	mov	r1, r3
 8009680:	69bb      	ldr	r3, [r7, #24]
 8009682:	1c5a      	adds	r2, r3, #1
 8009684:	61ba      	str	r2, [r7, #24]
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	1acb      	subs	r3, r1, r3
 800968a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	3b01      	subs	r3, #1
 8009690:	607b      	str	r3, [r7, #4]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d002      	beq.n	800969e <mem_cmp+0x40>
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d0eb      	beq.n	8009676 <mem_cmp+0x18>

	return r;
 800969e:	697b      	ldr	r3, [r7, #20]
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3724      	adds	r7, #36	@ 0x24
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80096b6:	e002      	b.n	80096be <chk_chr+0x12>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	3301      	adds	r3, #1
 80096bc:	607b      	str	r3, [r7, #4]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d005      	beq.n	80096d2 <chk_chr+0x26>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	461a      	mov	r2, r3
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d1f2      	bne.n	80096b8 <chk_chr+0xc>
	return *str;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	781b      	ldrb	r3, [r3, #0]
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	370c      	adds	r7, #12
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr
	...

080096e4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b085      	sub	sp, #20
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80096ee:	2300      	movs	r3, #0
 80096f0:	60bb      	str	r3, [r7, #8]
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	60fb      	str	r3, [r7, #12]
 80096f6:	e029      	b.n	800974c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80096f8:	4a27      	ldr	r2, [pc, #156]	@ (8009798 <chk_lock+0xb4>)
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	011b      	lsls	r3, r3, #4
 80096fe:	4413      	add	r3, r2
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d01d      	beq.n	8009742 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009706:	4a24      	ldr	r2, [pc, #144]	@ (8009798 <chk_lock+0xb4>)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	011b      	lsls	r3, r3, #4
 800970c:	4413      	add	r3, r2
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	429a      	cmp	r2, r3
 8009716:	d116      	bne.n	8009746 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009718:	4a1f      	ldr	r2, [pc, #124]	@ (8009798 <chk_lock+0xb4>)
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	011b      	lsls	r3, r3, #4
 800971e:	4413      	add	r3, r2
 8009720:	3304      	adds	r3, #4
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009728:	429a      	cmp	r2, r3
 800972a:	d10c      	bne.n	8009746 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800972c:	4a1a      	ldr	r2, [pc, #104]	@ (8009798 <chk_lock+0xb4>)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	011b      	lsls	r3, r3, #4
 8009732:	4413      	add	r3, r2
 8009734:	3308      	adds	r3, #8
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 800973c:	429a      	cmp	r2, r3
 800973e:	d102      	bne.n	8009746 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009740:	e007      	b.n	8009752 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009742:	2301      	movs	r3, #1
 8009744:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	3301      	adds	r3, #1
 800974a:	60fb      	str	r3, [r7, #12]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d0d2      	beq.n	80096f8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2b01      	cmp	r3, #1
 8009756:	d109      	bne.n	800976c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d102      	bne.n	8009764 <chk_lock+0x80>
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	2b02      	cmp	r3, #2
 8009762:	d101      	bne.n	8009768 <chk_lock+0x84>
 8009764:	2300      	movs	r3, #0
 8009766:	e010      	b.n	800978a <chk_lock+0xa6>
 8009768:	2312      	movs	r3, #18
 800976a:	e00e      	b.n	800978a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d108      	bne.n	8009784 <chk_lock+0xa0>
 8009772:	4a09      	ldr	r2, [pc, #36]	@ (8009798 <chk_lock+0xb4>)
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	011b      	lsls	r3, r3, #4
 8009778:	4413      	add	r3, r2
 800977a:	330c      	adds	r3, #12
 800977c:	881b      	ldrh	r3, [r3, #0]
 800977e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009782:	d101      	bne.n	8009788 <chk_lock+0xa4>
 8009784:	2310      	movs	r3, #16
 8009786:	e000      	b.n	800978a <chk_lock+0xa6>
 8009788:	2300      	movs	r3, #0
}
 800978a:	4618      	mov	r0, r3
 800978c:	3714      	adds	r7, #20
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr
 8009796:	bf00      	nop
 8009798:	20003708 	.word	0x20003708

0800979c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800979c:	b480      	push	{r7}
 800979e:	b083      	sub	sp, #12
 80097a0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80097a2:	2300      	movs	r3, #0
 80097a4:	607b      	str	r3, [r7, #4]
 80097a6:	e002      	b.n	80097ae <enq_lock+0x12>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	3301      	adds	r3, #1
 80097ac:	607b      	str	r3, [r7, #4]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d106      	bne.n	80097c2 <enq_lock+0x26>
 80097b4:	4a09      	ldr	r2, [pc, #36]	@ (80097dc <enq_lock+0x40>)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	011b      	lsls	r3, r3, #4
 80097ba:	4413      	add	r3, r2
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d1f2      	bne.n	80097a8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	bf14      	ite	ne
 80097c8:	2301      	movne	r3, #1
 80097ca:	2300      	moveq	r3, #0
 80097cc:	b2db      	uxtb	r3, r3
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	370c      	adds	r7, #12
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr
 80097da:	bf00      	nop
 80097dc:	20003708 	.word	0x20003708

080097e0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b085      	sub	sp, #20
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80097ea:	2300      	movs	r3, #0
 80097ec:	60fb      	str	r3, [r7, #12]
 80097ee:	e01f      	b.n	8009830 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80097f0:	4a41      	ldr	r2, [pc, #260]	@ (80098f8 <inc_lock+0x118>)
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	011b      	lsls	r3, r3, #4
 80097f6:	4413      	add	r3, r2
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	429a      	cmp	r2, r3
 8009800:	d113      	bne.n	800982a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009802:	4a3d      	ldr	r2, [pc, #244]	@ (80098f8 <inc_lock+0x118>)
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	011b      	lsls	r3, r3, #4
 8009808:	4413      	add	r3, r2
 800980a:	3304      	adds	r3, #4
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009812:	429a      	cmp	r2, r3
 8009814:	d109      	bne.n	800982a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009816:	4a38      	ldr	r2, [pc, #224]	@ (80098f8 <inc_lock+0x118>)
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	011b      	lsls	r3, r3, #4
 800981c:	4413      	add	r3, r2
 800981e:	3308      	adds	r3, #8
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			Files[i].clu == dp->obj.sclust &&
 8009826:	429a      	cmp	r2, r3
 8009828:	d006      	beq.n	8009838 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	3301      	adds	r3, #1
 800982e:	60fb      	str	r3, [r7, #12]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d0dc      	beq.n	80097f0 <inc_lock+0x10>
 8009836:	e000      	b.n	800983a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009838:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2b01      	cmp	r3, #1
 800983e:	d132      	bne.n	80098a6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009840:	2300      	movs	r3, #0
 8009842:	60fb      	str	r3, [r7, #12]
 8009844:	e002      	b.n	800984c <inc_lock+0x6c>
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	3301      	adds	r3, #1
 800984a:	60fb      	str	r3, [r7, #12]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d106      	bne.n	8009860 <inc_lock+0x80>
 8009852:	4a29      	ldr	r2, [pc, #164]	@ (80098f8 <inc_lock+0x118>)
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	011b      	lsls	r3, r3, #4
 8009858:	4413      	add	r3, r2
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d1f2      	bne.n	8009846 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2b01      	cmp	r3, #1
 8009864:	d101      	bne.n	800986a <inc_lock+0x8a>
 8009866:	2300      	movs	r3, #0
 8009868:	e040      	b.n	80098ec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681a      	ldr	r2, [r3, #0]
 800986e:	4922      	ldr	r1, [pc, #136]	@ (80098f8 <inc_lock+0x118>)
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	011b      	lsls	r3, r3, #4
 8009874:	440b      	add	r3, r1
 8009876:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	689a      	ldr	r2, [r3, #8]
 800987c:	491e      	ldr	r1, [pc, #120]	@ (80098f8 <inc_lock+0x118>)
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	011b      	lsls	r3, r3, #4
 8009882:	440b      	add	r3, r1
 8009884:	3304      	adds	r3, #4
 8009886:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800988c:	491a      	ldr	r1, [pc, #104]	@ (80098f8 <inc_lock+0x118>)
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	011b      	lsls	r3, r3, #4
 8009892:	440b      	add	r3, r1
 8009894:	3308      	adds	r3, #8
 8009896:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009898:	4a17      	ldr	r2, [pc, #92]	@ (80098f8 <inc_lock+0x118>)
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	011b      	lsls	r3, r3, #4
 800989e:	4413      	add	r3, r2
 80098a0:	330c      	adds	r3, #12
 80098a2:	2200      	movs	r2, #0
 80098a4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d009      	beq.n	80098c0 <inc_lock+0xe0>
 80098ac:	4a12      	ldr	r2, [pc, #72]	@ (80098f8 <inc_lock+0x118>)
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	011b      	lsls	r3, r3, #4
 80098b2:	4413      	add	r3, r2
 80098b4:	330c      	adds	r3, #12
 80098b6:	881b      	ldrh	r3, [r3, #0]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d001      	beq.n	80098c0 <inc_lock+0xe0>
 80098bc:	2300      	movs	r3, #0
 80098be:	e015      	b.n	80098ec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d108      	bne.n	80098d8 <inc_lock+0xf8>
 80098c6:	4a0c      	ldr	r2, [pc, #48]	@ (80098f8 <inc_lock+0x118>)
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	011b      	lsls	r3, r3, #4
 80098cc:	4413      	add	r3, r2
 80098ce:	330c      	adds	r3, #12
 80098d0:	881b      	ldrh	r3, [r3, #0]
 80098d2:	3301      	adds	r3, #1
 80098d4:	b29a      	uxth	r2, r3
 80098d6:	e001      	b.n	80098dc <inc_lock+0xfc>
 80098d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80098dc:	4906      	ldr	r1, [pc, #24]	@ (80098f8 <inc_lock+0x118>)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	011b      	lsls	r3, r3, #4
 80098e2:	440b      	add	r3, r1
 80098e4:	330c      	adds	r3, #12
 80098e6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	3301      	adds	r3, #1
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3714      	adds	r7, #20
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr
 80098f8:	20003708 	.word	0x20003708

080098fc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b085      	sub	sp, #20
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	3b01      	subs	r3, #1
 8009908:	607b      	str	r3, [r7, #4]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d125      	bne.n	800995c <dec_lock+0x60>
		n = Files[i].ctr;
 8009910:	4a17      	ldr	r2, [pc, #92]	@ (8009970 <dec_lock+0x74>)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	011b      	lsls	r3, r3, #4
 8009916:	4413      	add	r3, r2
 8009918:	330c      	adds	r3, #12
 800991a:	881b      	ldrh	r3, [r3, #0]
 800991c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800991e:	89fb      	ldrh	r3, [r7, #14]
 8009920:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009924:	d101      	bne.n	800992a <dec_lock+0x2e>
 8009926:	2300      	movs	r3, #0
 8009928:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800992a:	89fb      	ldrh	r3, [r7, #14]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d002      	beq.n	8009936 <dec_lock+0x3a>
 8009930:	89fb      	ldrh	r3, [r7, #14]
 8009932:	3b01      	subs	r3, #1
 8009934:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009936:	4a0e      	ldr	r2, [pc, #56]	@ (8009970 <dec_lock+0x74>)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	011b      	lsls	r3, r3, #4
 800993c:	4413      	add	r3, r2
 800993e:	330c      	adds	r3, #12
 8009940:	89fa      	ldrh	r2, [r7, #14]
 8009942:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009944:	89fb      	ldrh	r3, [r7, #14]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d105      	bne.n	8009956 <dec_lock+0x5a>
 800994a:	4a09      	ldr	r2, [pc, #36]	@ (8009970 <dec_lock+0x74>)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	011b      	lsls	r3, r3, #4
 8009950:	4413      	add	r3, r2
 8009952:	2200      	movs	r2, #0
 8009954:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009956:	2300      	movs	r3, #0
 8009958:	737b      	strb	r3, [r7, #13]
 800995a:	e001      	b.n	8009960 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800995c:	2302      	movs	r3, #2
 800995e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009960:	7b7b      	ldrb	r3, [r7, #13]
}
 8009962:	4618      	mov	r0, r3
 8009964:	3714      	adds	r7, #20
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop
 8009970:	20003708 	.word	0x20003708

08009974 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009974:	b480      	push	{r7}
 8009976:	b085      	sub	sp, #20
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800997c:	2300      	movs	r3, #0
 800997e:	60fb      	str	r3, [r7, #12]
 8009980:	e010      	b.n	80099a4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009982:	4a0d      	ldr	r2, [pc, #52]	@ (80099b8 <clear_lock+0x44>)
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	011b      	lsls	r3, r3, #4
 8009988:	4413      	add	r3, r2
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	429a      	cmp	r2, r3
 8009990:	d105      	bne.n	800999e <clear_lock+0x2a>
 8009992:	4a09      	ldr	r2, [pc, #36]	@ (80099b8 <clear_lock+0x44>)
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	011b      	lsls	r3, r3, #4
 8009998:	4413      	add	r3, r2
 800999a:	2200      	movs	r2, #0
 800999c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	3301      	adds	r3, #1
 80099a2:	60fb      	str	r3, [r7, #12]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d0eb      	beq.n	8009982 <clear_lock+0xe>
	}
}
 80099aa:	bf00      	nop
 80099ac:	bf00      	nop
 80099ae:	3714      	adds	r7, #20
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr
 80099b8:	20003708 	.word	0x20003708

080099bc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b086      	sub	sp, #24
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80099c4:	2300      	movs	r3, #0
 80099c6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	78db      	ldrb	r3, [r3, #3]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d034      	beq.n	8009a3a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099d4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	7858      	ldrb	r0, [r3, #1]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80099e0:	2301      	movs	r3, #1
 80099e2:	697a      	ldr	r2, [r7, #20]
 80099e4:	f7ff fbb4 	bl	8009150 <disk_write>
 80099e8:	4603      	mov	r3, r0
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d002      	beq.n	80099f4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80099ee:	2301      	movs	r3, #1
 80099f0:	73fb      	strb	r3, [r7, #15]
 80099f2:	e022      	b.n	8009a3a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099fe:	697a      	ldr	r2, [r7, #20]
 8009a00:	1ad2      	subs	r2, r2, r3
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6a1b      	ldr	r3, [r3, #32]
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d217      	bcs.n	8009a3a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	789b      	ldrb	r3, [r3, #2]
 8009a0e:	613b      	str	r3, [r7, #16]
 8009a10:	e010      	b.n	8009a34 <sync_window+0x78>
					wsect += fs->fsize;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6a1b      	ldr	r3, [r3, #32]
 8009a16:	697a      	ldr	r2, [r7, #20]
 8009a18:	4413      	add	r3, r2
 8009a1a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	7858      	ldrb	r0, [r3, #1]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009a26:	2301      	movs	r3, #1
 8009a28:	697a      	ldr	r2, [r7, #20]
 8009a2a:	f7ff fb91 	bl	8009150 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	3b01      	subs	r3, #1
 8009a32:	613b      	str	r3, [r7, #16]
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d8eb      	bhi.n	8009a12 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3718      	adds	r7, #24
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a56:	683a      	ldr	r2, [r7, #0]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d01b      	beq.n	8009a94 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f7ff ffad 	bl	80099bc <sync_window>
 8009a62:	4603      	mov	r3, r0
 8009a64:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009a66:	7bfb      	ldrb	r3, [r7, #15]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d113      	bne.n	8009a94 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	7858      	ldrb	r0, [r3, #1]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009a76:	2301      	movs	r3, #1
 8009a78:	683a      	ldr	r2, [r7, #0]
 8009a7a:	f7ff fb3a 	bl	80090f2 <disk_read>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d004      	beq.n	8009a8e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009a84:	f04f 33ff 	mov.w	r3, #4294967295
 8009a88:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	683a      	ldr	r2, [r7, #0]
 8009a92:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8009a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
	...

08009aa0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f7ff ff87 	bl	80099bc <sync_window>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009ab2:	7bfb      	ldrb	r3, [r7, #15]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d158      	bne.n	8009b6a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	2b03      	cmp	r3, #3
 8009abe:	d148      	bne.n	8009b52 <sync_fs+0xb2>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	791b      	ldrb	r3, [r3, #4]
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d144      	bne.n	8009b52 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	3338      	adds	r3, #56	@ 0x38
 8009acc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009ad0:	2100      	movs	r1, #0
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7ff fda8 	bl	8009628 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	3338      	adds	r3, #56	@ 0x38
 8009adc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009ae0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f7ff fcaf 	bl	8009448 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	3338      	adds	r3, #56	@ 0x38
 8009aee:	4921      	ldr	r1, [pc, #132]	@ (8009b74 <sync_fs+0xd4>)
 8009af0:	4618      	mov	r0, r3
 8009af2:	f7ff fcc4 	bl	800947e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	3338      	adds	r3, #56	@ 0x38
 8009afa:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009afe:	491e      	ldr	r1, [pc, #120]	@ (8009b78 <sync_fs+0xd8>)
 8009b00:	4618      	mov	r0, r3
 8009b02:	f7ff fcbc 	bl	800947e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	3338      	adds	r3, #56	@ 0x38
 8009b0a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	699b      	ldr	r3, [r3, #24]
 8009b12:	4619      	mov	r1, r3
 8009b14:	4610      	mov	r0, r2
 8009b16:	f7ff fcb2 	bl	800947e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	3338      	adds	r3, #56	@ 0x38
 8009b1e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	695b      	ldr	r3, [r3, #20]
 8009b26:	4619      	mov	r1, r3
 8009b28:	4610      	mov	r0, r2
 8009b2a:	f7ff fca8 	bl	800947e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b32:	1c5a      	adds	r2, r3, #1
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	7858      	ldrb	r0, [r3, #1]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b46:	2301      	movs	r3, #1
 8009b48:	f7ff fb02 	bl	8009150 <disk_write>
			fs->fsi_flag = 0;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	785b      	ldrb	r3, [r3, #1]
 8009b56:	2200      	movs	r2, #0
 8009b58:	2100      	movs	r1, #0
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7ff fb28 	bl	80091b0 <disk_ioctl>
 8009b60:	4603      	mov	r3, r0
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d001      	beq.n	8009b6a <sync_fs+0xca>
 8009b66:	2301      	movs	r3, #1
 8009b68:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3710      	adds	r7, #16
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}
 8009b74:	41615252 	.word	0x41615252
 8009b78:	61417272 	.word	0x61417272

08009b7c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	3b02      	subs	r3, #2
 8009b8a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	69db      	ldr	r3, [r3, #28]
 8009b90:	3b02      	subs	r3, #2
 8009b92:	683a      	ldr	r2, [r7, #0]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d301      	bcc.n	8009b9c <clust2sect+0x20>
 8009b98:	2300      	movs	r3, #0
 8009b9a:	e008      	b.n	8009bae <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	895b      	ldrh	r3, [r3, #10]
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	fb03 f202 	mul.w	r2, r3, r2
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bac:	4413      	add	r3, r2
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	370c      	adds	r7, #12
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr
	...

08009bbc <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b088      	sub	sp, #32
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009bc6:	6879      	ldr	r1, [r7, #4]
 8009bc8:	6809      	ldr	r1, [r1, #0]
 8009bca:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009bcc:	6839      	ldr	r1, [r7, #0]
 8009bce:	2901      	cmp	r1, #1
 8009bd0:	d904      	bls.n	8009bdc <get_fat+0x20>
 8009bd2:	69b9      	ldr	r1, [r7, #24]
 8009bd4:	69c9      	ldr	r1, [r1, #28]
 8009bd6:	6838      	ldr	r0, [r7, #0]
 8009bd8:	4288      	cmp	r0, r1
 8009bda:	d302      	bcc.n	8009be2 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009bdc:	2301      	movs	r3, #1
 8009bde:	61fb      	str	r3, [r7, #28]
 8009be0:	e100      	b.n	8009de4 <get_fat+0x228>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009be2:	f04f 31ff 	mov.w	r1, #4294967295
 8009be6:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 8009be8:	69b9      	ldr	r1, [r7, #24]
 8009bea:	7809      	ldrb	r1, [r1, #0]
 8009bec:	3901      	subs	r1, #1
 8009bee:	2903      	cmp	r1, #3
 8009bf0:	f200 80ec 	bhi.w	8009dcc <get_fat+0x210>
 8009bf4:	a001      	add	r0, pc, #4	@ (adr r0, 8009bfc <get_fat+0x40>)
 8009bf6:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009bfa:	bf00      	nop
 8009bfc:	08009c0d 	.word	0x08009c0d
 8009c00:	08009c93 	.word	0x08009c93
 8009c04:	08009cc9 	.word	0x08009cc9
 8009c08:	08009d01 	.word	0x08009d01
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	60fb      	str	r3, [r7, #12]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	085b      	lsrs	r3, r3, #1
 8009c14:	68fa      	ldr	r2, [r7, #12]
 8009c16:	4413      	add	r3, r2
 8009c18:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009c1a:	69bb      	ldr	r3, [r7, #24]
 8009c1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	0a5b      	lsrs	r3, r3, #9
 8009c22:	4413      	add	r3, r2
 8009c24:	4619      	mov	r1, r3
 8009c26:	69b8      	ldr	r0, [r7, #24]
 8009c28:	f7ff ff0c 	bl	8009a44 <move_window>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	f040 80cf 	bne.w	8009dd2 <get_fat+0x216>
			wc = fs->win[bc++ % SS(fs)];
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	1c5a      	adds	r2, r3, #1
 8009c38:	60fa      	str	r2, [r7, #12]
 8009c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c3e:	69ba      	ldr	r2, [r7, #24]
 8009c40:	4413      	add	r3, r2
 8009c42:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009c46:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	0a5b      	lsrs	r3, r3, #9
 8009c50:	4413      	add	r3, r2
 8009c52:	4619      	mov	r1, r3
 8009c54:	69b8      	ldr	r0, [r7, #24]
 8009c56:	f7ff fef5 	bl	8009a44 <move_window>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f040 80ba 	bne.w	8009dd6 <get_fat+0x21a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c68:	69ba      	ldr	r2, [r7, #24]
 8009c6a:	4413      	add	r3, r2
 8009c6c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009c70:	021b      	lsls	r3, r3, #8
 8009c72:	68ba      	ldr	r2, [r7, #8]
 8009c74:	4313      	orrs	r3, r2
 8009c76:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	f003 0301 	and.w	r3, r3, #1
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d002      	beq.n	8009c88 <get_fat+0xcc>
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	091b      	lsrs	r3, r3, #4
 8009c86:	e002      	b.n	8009c8e <get_fat+0xd2>
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c8e:	61fb      	str	r3, [r7, #28]
			break;
 8009c90:	e0a8      	b.n	8009de4 <get_fat+0x228>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009c92:	69bb      	ldr	r3, [r7, #24]
 8009c94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	0a1b      	lsrs	r3, r3, #8
 8009c9a:	4413      	add	r3, r2
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	69b8      	ldr	r0, [r7, #24]
 8009ca0:	f7ff fed0 	bl	8009a44 <move_window>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	f040 8097 	bne.w	8009dda <get_fat+0x21e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009cac:	69bb      	ldr	r3, [r7, #24]
 8009cae:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	005b      	lsls	r3, r3, #1
 8009cb6:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8009cba:	4413      	add	r3, r2
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f7ff faad 	bl	800921c <ld_word>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	61fb      	str	r3, [r7, #28]
			break;
 8009cc6:	e08d      	b.n	8009de4 <get_fat+0x228>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009cc8:	69bb      	ldr	r3, [r7, #24]
 8009cca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	09db      	lsrs	r3, r3, #7
 8009cd0:	4413      	add	r3, r2
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	69b8      	ldr	r0, [r7, #24]
 8009cd6:	f7ff feb5 	bl	8009a44 <move_window>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d17e      	bne.n	8009dde <get_fat+0x222>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009ce0:	69bb      	ldr	r3, [r7, #24]
 8009ce2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009cee:	4413      	add	r3, r2
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7ff faab 	bl	800924c <ld_dword>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009cfc:	61fb      	str	r3, [r7, #28]
			break;
 8009cfe:	e071      	b.n	8009de4 <get_fat+0x228>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 8009d00:	6879      	ldr	r1, [r7, #4]
 8009d02:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8009d06:	4301      	orrs	r1, r0
 8009d08:	d060      	beq.n	8009dcc <get_fat+0x210>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8009d0a:	6879      	ldr	r1, [r7, #4]
 8009d0c:	6889      	ldr	r1, [r1, #8]
 8009d0e:	6838      	ldr	r0, [r7, #0]
 8009d10:	1a41      	subs	r1, r0, r1
 8009d12:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8009d14:	6879      	ldr	r1, [r7, #4]
 8009d16:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8009d1a:	1e42      	subs	r2, r0, #1
 8009d1c:	f141 33ff 	adc.w	r3, r1, #4294967295
 8009d20:	f04f 0000 	mov.w	r0, #0
 8009d24:	f04f 0100 	mov.w	r1, #0
 8009d28:	0a50      	lsrs	r0, r2, #9
 8009d2a:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8009d2e:	0a59      	lsrs	r1, r3, #9
 8009d30:	4602      	mov	r2, r0
 8009d32:	69bb      	ldr	r3, [r7, #24]
 8009d34:	895b      	ldrh	r3, [r3, #10]
 8009d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d3a:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	79db      	ldrb	r3, [r3, #7]
 8009d40:	2b02      	cmp	r3, #2
 8009d42:	d10e      	bne.n	8009d62 <get_fat+0x1a6>
					if (cofs <= clen) {
 8009d44:	697a      	ldr	r2, [r7, #20]
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d80a      	bhi.n	8009d62 <get_fat+0x1a6>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8009d4c:	697a      	ldr	r2, [r7, #20]
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d002      	beq.n	8009d5a <get_fat+0x19e>
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	3301      	adds	r3, #1
 8009d58:	e001      	b.n	8009d5e <get_fat+0x1a2>
 8009d5a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8009d5e:	61fb      	str	r3, [r7, #28]
						break;
 8009d60:	e040      	b.n	8009de4 <get_fat+0x228>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	79db      	ldrb	r3, [r3, #7]
 8009d66:	2b03      	cmp	r3, #3
 8009d68:	d108      	bne.n	8009d7c <get_fat+0x1c0>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	699b      	ldr	r3, [r3, #24]
 8009d6e:	697a      	ldr	r2, [r7, #20]
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d203      	bcs.n	8009d7c <get_fat+0x1c0>
					val = clst + 1; 	/* Generate the value */
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	3301      	adds	r3, #1
 8009d78:	61fb      	str	r3, [r7, #28]
					break;
 8009d7a:	e033      	b.n	8009de4 <get_fat+0x228>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	79db      	ldrb	r3, [r3, #7]
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	d023      	beq.n	8009dcc <get_fat+0x210>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	69db      	ldr	r3, [r3, #28]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d003      	beq.n	8009d94 <get_fat+0x1d8>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8009d8c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8009d90:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8009d92:	e027      	b.n	8009de4 <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009d94:	69bb      	ldr	r3, [r7, #24]
 8009d96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	09db      	lsrs	r3, r3, #7
 8009d9c:	4413      	add	r3, r2
 8009d9e:	4619      	mov	r1, r3
 8009da0:	69b8      	ldr	r0, [r7, #24]
 8009da2:	f7ff fe4f 	bl	8009a44 <move_window>
 8009da6:	4603      	mov	r3, r0
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d11a      	bne.n	8009de2 <get_fat+0x226>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8009dac:	69bb      	ldr	r3, [r7, #24]
 8009dae:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009dba:	4413      	add	r3, r2
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7ff fa45 	bl	800924c <ld_dword>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009dc8:	61fb      	str	r3, [r7, #28]
					break;
 8009dca:	e00b      	b.n	8009de4 <get_fat+0x228>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009dcc:	2301      	movs	r3, #1
 8009dce:	61fb      	str	r3, [r7, #28]
 8009dd0:	e008      	b.n	8009de4 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009dd2:	bf00      	nop
 8009dd4:	e006      	b.n	8009de4 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009dd6:	bf00      	nop
 8009dd8:	e004      	b.n	8009de4 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009dda:	bf00      	nop
 8009ddc:	e002      	b.n	8009de4 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009dde:	bf00      	nop
 8009de0:	e000      	b.n	8009de4 <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009de2:	bf00      	nop
		}
	}

	return val;
 8009de4:	69fb      	ldr	r3, [r7, #28]
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3720      	adds	r7, #32
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop

08009df0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009df0:	b590      	push	{r4, r7, lr}
 8009df2:	b089      	sub	sp, #36	@ 0x24
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	60f8      	str	r0, [r7, #12]
 8009df8:	60b9      	str	r1, [r7, #8]
 8009dfa:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009dfc:	2302      	movs	r3, #2
 8009dfe:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	f240 80dd 	bls.w	8009fc2 <put_fat+0x1d2>
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	69db      	ldr	r3, [r3, #28]
 8009e0c:	68ba      	ldr	r2, [r7, #8]
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	f080 80d7 	bcs.w	8009fc2 <put_fat+0x1d2>
		switch (fs->fs_type) {
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	2b04      	cmp	r3, #4
 8009e1a:	f300 80d2 	bgt.w	8009fc2 <put_fat+0x1d2>
 8009e1e:	2b03      	cmp	r3, #3
 8009e20:	f280 8093 	bge.w	8009f4a <put_fat+0x15a>
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d002      	beq.n	8009e2e <put_fat+0x3e>
 8009e28:	2b02      	cmp	r3, #2
 8009e2a:	d06e      	beq.n	8009f0a <put_fat+0x11a>
 8009e2c:	e0c9      	b.n	8009fc2 <put_fat+0x1d2>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	61bb      	str	r3, [r7, #24]
 8009e32:	69bb      	ldr	r3, [r7, #24]
 8009e34:	085b      	lsrs	r3, r3, #1
 8009e36:	69ba      	ldr	r2, [r7, #24]
 8009e38:	4413      	add	r3, r2
 8009e3a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009e40:	69bb      	ldr	r3, [r7, #24]
 8009e42:	0a5b      	lsrs	r3, r3, #9
 8009e44:	4413      	add	r3, r2
 8009e46:	4619      	mov	r1, r3
 8009e48:	68f8      	ldr	r0, [r7, #12]
 8009e4a:	f7ff fdfb 	bl	8009a44 <move_window>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009e52:	7ffb      	ldrb	r3, [r7, #31]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	f040 80ad 	bne.w	8009fb4 <put_fat+0x1c4>
			p = fs->win + bc++ % SS(fs);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009e60:	69bb      	ldr	r3, [r7, #24]
 8009e62:	1c59      	adds	r1, r3, #1
 8009e64:	61b9      	str	r1, [r7, #24]
 8009e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e6a:	4413      	add	r3, r2
 8009e6c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	f003 0301 	and.w	r3, r3, #1
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d00d      	beq.n	8009e94 <put_fat+0xa4>
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	b25b      	sxtb	r3, r3
 8009e7e:	f003 030f 	and.w	r3, r3, #15
 8009e82:	b25a      	sxtb	r2, r3
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	011b      	lsls	r3, r3, #4
 8009e8a:	b25b      	sxtb	r3, r3
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	b25b      	sxtb	r3, r3
 8009e90:	b2db      	uxtb	r3, r3
 8009e92:	e001      	b.n	8009e98 <put_fat+0xa8>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	697a      	ldr	r2, [r7, #20]
 8009e9a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009ea6:	69bb      	ldr	r3, [r7, #24]
 8009ea8:	0a5b      	lsrs	r3, r3, #9
 8009eaa:	4413      	add	r3, r2
 8009eac:	4619      	mov	r1, r3
 8009eae:	68f8      	ldr	r0, [r7, #12]
 8009eb0:	f7ff fdc8 	bl	8009a44 <move_window>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009eb8:	7ffb      	ldrb	r3, [r7, #31]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d17c      	bne.n	8009fb8 <put_fat+0x1c8>
			p = fs->win + bc % SS(fs);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009ec4:	69bb      	ldr	r3, [r7, #24]
 8009ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eca:	4413      	add	r3, r2
 8009ecc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	f003 0301 	and.w	r3, r3, #1
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d003      	beq.n	8009ee0 <put_fat+0xf0>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	091b      	lsrs	r3, r3, #4
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	e00e      	b.n	8009efe <put_fat+0x10e>
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	b25b      	sxtb	r3, r3
 8009ee6:	f023 030f 	bic.w	r3, r3, #15
 8009eea:	b25a      	sxtb	r2, r3
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	0a1b      	lsrs	r3, r3, #8
 8009ef0:	b25b      	sxtb	r3, r3
 8009ef2:	f003 030f 	and.w	r3, r3, #15
 8009ef6:	b25b      	sxtb	r3, r3
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	b25b      	sxtb	r3, r3
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	697a      	ldr	r2, [r7, #20]
 8009f00:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2201      	movs	r2, #1
 8009f06:	70da      	strb	r2, [r3, #3]
			break;
 8009f08:	e05b      	b.n	8009fc2 <put_fat+0x1d2>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	0a1b      	lsrs	r3, r3, #8
 8009f12:	4413      	add	r3, r2
 8009f14:	4619      	mov	r1, r3
 8009f16:	68f8      	ldr	r0, [r7, #12]
 8009f18:	f7ff fd94 	bl	8009a44 <move_window>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009f20:	7ffb      	ldrb	r3, [r7, #31]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d14a      	bne.n	8009fbc <put_fat+0x1cc>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	005b      	lsls	r3, r3, #1
 8009f30:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8009f34:	4413      	add	r3, r2
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	b292      	uxth	r2, r2
 8009f3a:	4611      	mov	r1, r2
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f7ff fa83 	bl	8009448 <st_word>
			fs->wflag = 1;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2201      	movs	r2, #1
 8009f46:	70da      	strb	r2, [r3, #3]
			break;
 8009f48:	e03b      	b.n	8009fc2 <put_fat+0x1d2>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	09db      	lsrs	r3, r3, #7
 8009f52:	4413      	add	r3, r2
 8009f54:	4619      	mov	r1, r3
 8009f56:	68f8      	ldr	r0, [r7, #12]
 8009f58:	f7ff fd74 	bl	8009a44 <move_window>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009f60:	7ffb      	ldrb	r3, [r7, #31]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d12c      	bne.n	8009fc0 <put_fat+0x1d0>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	2b04      	cmp	r3, #4
 8009f6c:	d012      	beq.n	8009f94 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009f82:	4413      	add	r3, r2
 8009f84:	4618      	mov	r0, r3
 8009f86:	f7ff f961 	bl	800924c <ld_dword>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009f90:	4323      	orrs	r3, r4
 8009f92:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009fa2:	4413      	add	r3, r2
 8009fa4:	6879      	ldr	r1, [r7, #4]
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f7ff fa69 	bl	800947e <st_dword>
			fs->wflag = 1;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2201      	movs	r2, #1
 8009fb0:	70da      	strb	r2, [r3, #3]
			break;
 8009fb2:	e006      	b.n	8009fc2 <put_fat+0x1d2>
			if (res != FR_OK) break;
 8009fb4:	bf00      	nop
 8009fb6:	e004      	b.n	8009fc2 <put_fat+0x1d2>
			if (res != FR_OK) break;
 8009fb8:	bf00      	nop
 8009fba:	e002      	b.n	8009fc2 <put_fat+0x1d2>
			if (res != FR_OK) break;
 8009fbc:	bf00      	nop
 8009fbe:	e000      	b.n	8009fc2 <put_fat+0x1d2>
			if (res != FR_OK) break;
 8009fc0:	bf00      	nop
		}
	}
	return res;
 8009fc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3724      	adds	r7, #36	@ 0x24
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd90      	pop	{r4, r7, pc}

08009fcc <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b08a      	sub	sp, #40	@ 0x28
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	3b02      	subs	r3, #2
 8009fdc:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	69db      	ldr	r3, [r3, #28]
 8009fe2:	3b02      	subs	r3, #2
 8009fe4:	68ba      	ldr	r2, [r7, #8]
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d301      	bcc.n	8009fee <find_bitmap+0x22>
 8009fea:	2300      	movs	r3, #0
 8009fec:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	61fb      	str	r3, [r7, #28]
 8009ff2:	69fb      	ldr	r3, [r7, #28]
 8009ff4:	61bb      	str	r3, [r7, #24]
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009ffe:	69fb      	ldr	r3, [r7, #28]
 800a000:	0b1b      	lsrs	r3, r3, #12
 800a002:	4413      	add	r3, r2
 800a004:	4619      	mov	r1, r3
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f7ff fd1c 	bl	8009a44 <move_window>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d002      	beq.n	800a018 <find_bitmap+0x4c>
 800a012:	f04f 33ff 	mov.w	r3, #4294967295
 800a016:	e051      	b.n	800a0bc <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800a018:	69fb      	ldr	r3, [r7, #28]
 800a01a:	08db      	lsrs	r3, r3, #3
 800a01c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a020:	623b      	str	r3, [r7, #32]
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	f003 0307 	and.w	r3, r3, #7
 800a028:	2201      	movs	r2, #1
 800a02a:	fa02 f303 	lsl.w	r3, r2, r3
 800a02e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800a032:	68fa      	ldr	r2, [r7, #12]
 800a034:	6a3b      	ldr	r3, [r7, #32]
 800a036:	4413      	add	r3, r2
 800a038:	3338      	adds	r3, #56	@ 0x38
 800a03a:	781a      	ldrb	r2, [r3, #0]
 800a03c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a040:	4013      	ands	r3, r2
 800a042:	74fb      	strb	r3, [r7, #19]
 800a044:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a048:	005b      	lsls	r3, r3, #1
 800a04a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800a04e:	69fb      	ldr	r3, [r7, #28]
 800a050:	3301      	adds	r3, #1
 800a052:	61fb      	str	r3, [r7, #28]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	69db      	ldr	r3, [r3, #28]
 800a058:	3b02      	subs	r3, #2
 800a05a:	69fa      	ldr	r2, [r7, #28]
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d307      	bcc.n	800a070 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 800a060:	2300      	movs	r3, #0
 800a062:	61fb      	str	r3, [r7, #28]
 800a064:	2300      	movs	r3, #0
 800a066:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a06a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a06e:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800a070:	7cfb      	ldrb	r3, [r7, #19]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d109      	bne.n	800a08a <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	3301      	adds	r3, #1
 800a07a:	617b      	str	r3, [r7, #20]
 800a07c:	697a      	ldr	r2, [r7, #20]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	429a      	cmp	r2, r3
 800a082:	d106      	bne.n	800a092 <find_bitmap+0xc6>
 800a084:	69bb      	ldr	r3, [r7, #24]
 800a086:	3302      	adds	r3, #2
 800a088:	e018      	b.n	800a0bc <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	61bb      	str	r3, [r7, #24]
 800a08e:	2300      	movs	r3, #0
 800a090:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800a092:	69fa      	ldr	r2, [r7, #28]
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	429a      	cmp	r2, r3
 800a098:	d101      	bne.n	800a09e <find_bitmap+0xd2>
 800a09a:	2300      	movs	r3, #0
 800a09c:	e00e      	b.n	800a0bc <find_bitmap+0xf0>
			} while (bm);
 800a09e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d1c5      	bne.n	800a032 <find_bitmap+0x66>
			bm = 1;
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 800a0ac:	6a3b      	ldr	r3, [r7, #32]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	623b      	str	r3, [r7, #32]
 800a0b2:	6a3b      	ldr	r3, [r7, #32]
 800a0b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0b8:	d3bb      	bcc.n	800a032 <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800a0ba:	e79e      	b.n	8009ffa <find_bitmap+0x2e>
	}
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3728      	adds	r7, #40	@ 0x28
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b088      	sub	sp, #32
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	60f8      	str	r0, [r7, #12]
 800a0cc:	60b9      	str	r1, [r7, #8]
 800a0ce:	607a      	str	r2, [r7, #4]
 800a0d0:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	3b02      	subs	r3, #2
 800a0d6:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	0b1b      	lsrs	r3, r3, #12
 800a0e0:	4413      	add	r3, r2
 800a0e2:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	08db      	lsrs	r3, r3, #3
 800a0e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0ec:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	f003 0307 	and.w	r3, r3, #7
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a0fa:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	1c5a      	adds	r2, r3, #1
 800a100:	617a      	str	r2, [r7, #20]
 800a102:	4619      	mov	r1, r3
 800a104:	68f8      	ldr	r0, [r7, #12]
 800a106:	f7ff fc9d 	bl	8009a44 <move_window>
 800a10a:	4603      	mov	r3, r0
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d001      	beq.n	800a114 <change_bitmap+0x50>
 800a110:	2301      	movs	r3, #1
 800a112:	e03d      	b.n	800a190 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800a114:	68fa      	ldr	r2, [r7, #12]
 800a116:	69bb      	ldr	r3, [r7, #24]
 800a118:	4413      	add	r3, r2
 800a11a:	3338      	adds	r3, #56	@ 0x38
 800a11c:	781a      	ldrb	r2, [r3, #0]
 800a11e:	7ffb      	ldrb	r3, [r7, #31]
 800a120:	4013      	ands	r3, r2
 800a122:	b2db      	uxtb	r3, r3
 800a124:	2b00      	cmp	r3, #0
 800a126:	bf14      	ite	ne
 800a128:	2301      	movne	r3, #1
 800a12a:	2300      	moveq	r3, #0
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	461a      	mov	r2, r3
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	4293      	cmp	r3, r2
 800a134:	d101      	bne.n	800a13a <change_bitmap+0x76>
 800a136:	2302      	movs	r3, #2
 800a138:	e02a      	b.n	800a190 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 800a13a:	68fa      	ldr	r2, [r7, #12]
 800a13c:	69bb      	ldr	r3, [r7, #24]
 800a13e:	4413      	add	r3, r2
 800a140:	3338      	adds	r3, #56	@ 0x38
 800a142:	781a      	ldrb	r2, [r3, #0]
 800a144:	7ffb      	ldrb	r3, [r7, #31]
 800a146:	4053      	eors	r3, r2
 800a148:	b2d9      	uxtb	r1, r3
 800a14a:	68fa      	ldr	r2, [r7, #12]
 800a14c:	69bb      	ldr	r3, [r7, #24]
 800a14e:	4413      	add	r3, r2
 800a150:	3338      	adds	r3, #56	@ 0x38
 800a152:	460a      	mov	r2, r1
 800a154:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2201      	movs	r2, #1
 800a15a:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	3b01      	subs	r3, #1
 800a160:	607b      	str	r3, [r7, #4]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d101      	bne.n	800a16c <change_bitmap+0xa8>
 800a168:	2300      	movs	r3, #0
 800a16a:	e011      	b.n	800a190 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 800a16c:	7ffb      	ldrb	r3, [r7, #31]
 800a16e:	005b      	lsls	r3, r3, #1
 800a170:	77fb      	strb	r3, [r7, #31]
 800a172:	7ffb      	ldrb	r3, [r7, #31]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d1cd      	bne.n	800a114 <change_bitmap+0x50>
			bm = 1;
 800a178:	2301      	movs	r3, #1
 800a17a:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800a17c:	69bb      	ldr	r3, [r7, #24]
 800a17e:	3301      	adds	r3, #1
 800a180:	61bb      	str	r3, [r7, #24]
 800a182:	69bb      	ldr	r3, [r7, #24]
 800a184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a188:	d3c4      	bcc.n	800a114 <change_bitmap+0x50>
		i = 0;
 800a18a:	2300      	movs	r3, #0
 800a18c:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800a18e:	e7b5      	b.n	800a0fc <change_bitmap+0x38>
	}
}
 800a190:	4618      	mov	r0, r3
 800a192:	3720      	adds	r7, #32
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b086      	sub	sp, #24
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	79db      	ldrb	r3, [r3, #7]
 800a1a4:	2b03      	cmp	r3, #3
 800a1a6:	d121      	bne.n	800a1ec <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	689b      	ldr	r3, [r3, #8]
 800a1ac:	617b      	str	r3, [r7, #20]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	699b      	ldr	r3, [r3, #24]
 800a1b2:	613b      	str	r3, [r7, #16]
 800a1b4:	e014      	b.n	800a1e0 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6818      	ldr	r0, [r3, #0]
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	3301      	adds	r3, #1
 800a1be:	461a      	mov	r2, r3
 800a1c0:	6979      	ldr	r1, [r7, #20]
 800a1c2:	f7ff fe15 	bl	8009df0 <put_fat>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800a1ca:	7bfb      	ldrb	r3, [r7, #15]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d001      	beq.n	800a1d4 <fill_first_frag+0x3c>
 800a1d0:	7bfb      	ldrb	r3, [r7, #15]
 800a1d2:	e00c      	b.n	800a1ee <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	617b      	str	r3, [r7, #20]
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	3b01      	subs	r3, #1
 800a1de:	613b      	str	r3, [r7, #16]
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d1e7      	bne.n	800a1b6 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800a1ec:	2300      	movs	r3, #0
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3718      	adds	r7, #24
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}

0800a1f6 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800a1f6:	b580      	push	{r7, lr}
 800a1f8:	b086      	sub	sp, #24
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	60f8      	str	r0, [r7, #12]
 800a1fe:	60b9      	str	r1, [r7, #8]
 800a200:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800a202:	e020      	b.n	800a246 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6818      	ldr	r0, [r3, #0]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	69db      	ldr	r3, [r3, #28]
 800a20c:	68ba      	ldr	r2, [r7, #8]
 800a20e:	1ad3      	subs	r3, r2, r3
 800a210:	1c59      	adds	r1, r3, #1
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	69db      	ldr	r3, [r3, #28]
 800a216:	2b01      	cmp	r3, #1
 800a218:	d905      	bls.n	800a226 <fill_last_frag+0x30>
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	69db      	ldr	r3, [r3, #28]
 800a21e:	68ba      	ldr	r2, [r7, #8]
 800a220:	1ad3      	subs	r3, r2, r3
 800a222:	3302      	adds	r3, #2
 800a224:	e000      	b.n	800a228 <fill_last_frag+0x32>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	461a      	mov	r2, r3
 800a22a:	f7ff fde1 	bl	8009df0 <put_fat>
 800a22e:	4603      	mov	r3, r0
 800a230:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800a232:	7dfb      	ldrb	r3, [r7, #23]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d001      	beq.n	800a23c <fill_last_frag+0x46>
 800a238:	7dfb      	ldrb	r3, [r7, #23]
 800a23a:	e009      	b.n	800a250 <fill_last_frag+0x5a>
		obj->n_frag--;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	69db      	ldr	r3, [r3, #28]
 800a240:	1e5a      	subs	r2, r3, #1
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	69db      	ldr	r3, [r3, #28]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d1da      	bne.n	800a204 <fill_last_frag+0xe>
	}
	return FR_OK;
 800a24e:	2300      	movs	r3, #0
}
 800a250:	4618      	mov	r0, r3
 800a252:	3718      	adds	r7, #24
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b08a      	sub	sp, #40	@ 0x28
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	60f8      	str	r0, [r7, #12]
 800a260:	60b9      	str	r1, [r7, #8]
 800a262:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a264:	2300      	movs	r3, #0
 800a266:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	627b      	str	r3, [r7, #36]	@ 0x24
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d904      	bls.n	800a286 <remove_chain+0x2e>
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	69db      	ldr	r3, [r3, #28]
 800a280:	68ba      	ldr	r2, [r7, #8]
 800a282:	429a      	cmp	r2, r3
 800a284:	d301      	bcc.n	800a28a <remove_chain+0x32>
 800a286:	2302      	movs	r3, #2
 800a288:	e096      	b.n	800a3b8 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d014      	beq.n	800a2ba <remove_chain+0x62>
 800a290:	69bb      	ldr	r3, [r7, #24]
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	2b04      	cmp	r3, #4
 800a296:	d103      	bne.n	800a2a0 <remove_chain+0x48>
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	79db      	ldrb	r3, [r3, #7]
 800a29c:	2b02      	cmp	r3, #2
 800a29e:	d00c      	beq.n	800a2ba <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a2a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a2a4:	6879      	ldr	r1, [r7, #4]
 800a2a6:	69b8      	ldr	r0, [r7, #24]
 800a2a8:	f7ff fda2 	bl	8009df0 <put_fat>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a2b0:	7ffb      	ldrb	r3, [r7, #31]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d001      	beq.n	800a2ba <remove_chain+0x62>
 800a2b6:	7ffb      	ldrb	r3, [r7, #31]
 800a2b8:	e07e      	b.n	800a3b8 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a2ba:	68b9      	ldr	r1, [r7, #8]
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	f7ff fc7d 	bl	8009bbc <get_fat>
 800a2c2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d055      	beq.n	800a376 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d101      	bne.n	800a2d4 <remove_chain+0x7c>
 800a2d0:	2302      	movs	r3, #2
 800a2d2:	e071      	b.n	800a3b8 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2da:	d101      	bne.n	800a2e0 <remove_chain+0x88>
 800a2dc:	2301      	movs	r3, #1
 800a2de:	e06b      	b.n	800a3b8 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800a2e0:	69bb      	ldr	r3, [r7, #24]
 800a2e2:	781b      	ldrb	r3, [r3, #0]
 800a2e4:	2b04      	cmp	r3, #4
 800a2e6:	d00b      	beq.n	800a300 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	68b9      	ldr	r1, [r7, #8]
 800a2ec:	69b8      	ldr	r0, [r7, #24]
 800a2ee:	f7ff fd7f 	bl	8009df0 <put_fat>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a2f6:	7ffb      	ldrb	r3, [r7, #31]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d001      	beq.n	800a300 <remove_chain+0xa8>
 800a2fc:	7ffb      	ldrb	r3, [r7, #31]
 800a2fe:	e05b      	b.n	800a3b8 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a300:	69bb      	ldr	r3, [r7, #24]
 800a302:	699a      	ldr	r2, [r3, #24]
 800a304:	69bb      	ldr	r3, [r7, #24]
 800a306:	69db      	ldr	r3, [r3, #28]
 800a308:	3b02      	subs	r3, #2
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d20b      	bcs.n	800a326 <remove_chain+0xce>
			fs->free_clst++;
 800a30e:	69bb      	ldr	r3, [r7, #24]
 800a310:	699b      	ldr	r3, [r3, #24]
 800a312:	1c5a      	adds	r2, r3, #1
 800a314:	69bb      	ldr	r3, [r7, #24]
 800a316:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800a318:	69bb      	ldr	r3, [r7, #24]
 800a31a:	791b      	ldrb	r3, [r3, #4]
 800a31c:	f043 0301 	orr.w	r3, r3, #1
 800a320:	b2da      	uxtb	r2, r3
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800a326:	6a3b      	ldr	r3, [r7, #32]
 800a328:	3301      	adds	r3, #1
 800a32a:	697a      	ldr	r2, [r7, #20]
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d102      	bne.n	800a336 <remove_chain+0xde>
			ecl = nxt;
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	623b      	str	r3, [r7, #32]
 800a334:	e017      	b.n	800a366 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800a336:	69bb      	ldr	r3, [r7, #24]
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	2b04      	cmp	r3, #4
 800a33c:	d10f      	bne.n	800a35e <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800a33e:	6a3a      	ldr	r2, [r7, #32]
 800a340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a342:	1ad3      	subs	r3, r2, r3
 800a344:	1c5a      	adds	r2, r3, #1
 800a346:	2300      	movs	r3, #0
 800a348:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a34a:	69b8      	ldr	r0, [r7, #24]
 800a34c:	f7ff feba 	bl	800a0c4 <change_bitmap>
 800a350:	4603      	mov	r3, r0
 800a352:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800a354:	7ffb      	ldrb	r3, [r7, #31]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d001      	beq.n	800a35e <remove_chain+0x106>
 800a35a:	7ffb      	ldrb	r3, [r7, #31]
 800a35c:	e02c      	b.n	800a3b8 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	623b      	str	r3, [r7, #32]
 800a362:	6a3b      	ldr	r3, [r7, #32]
 800a364:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a36a:	69bb      	ldr	r3, [r7, #24]
 800a36c:	69db      	ldr	r3, [r3, #28]
 800a36e:	68ba      	ldr	r2, [r7, #8]
 800a370:	429a      	cmp	r2, r3
 800a372:	d3a2      	bcc.n	800a2ba <remove_chain+0x62>
 800a374:	e000      	b.n	800a378 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800a376:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800a378:	69bb      	ldr	r3, [r7, #24]
 800a37a:	781b      	ldrb	r3, [r3, #0]
 800a37c:	2b04      	cmp	r3, #4
 800a37e:	d11a      	bne.n	800a3b6 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d103      	bne.n	800a38e <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2200      	movs	r2, #0
 800a38a:	71da      	strb	r2, [r3, #7]
 800a38c:	e013      	b.n	800a3b6 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	79db      	ldrb	r3, [r3, #7]
 800a392:	2b03      	cmp	r3, #3
 800a394:	d10f      	bne.n	800a3b6 <remove_chain+0x15e>
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	689b      	ldr	r3, [r3, #8]
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d30a      	bcc.n	800a3b6 <remove_chain+0x15e>
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	689a      	ldr	r2, [r3, #8]
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	699b      	ldr	r3, [r3, #24]
 800a3a8:	4413      	add	r3, r2
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d802      	bhi.n	800a3b6 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2202      	movs	r2, #2
 800a3b4:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800a3b6:	2300      	movs	r3, #0
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3728      	adds	r7, #40	@ 0x28
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b088      	sub	sp, #32
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d10d      	bne.n	800a3f2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	695b      	ldr	r3, [r3, #20]
 800a3da:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a3dc:	69bb      	ldr	r3, [r7, #24]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d004      	beq.n	800a3ec <create_chain+0x2c>
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	69db      	ldr	r3, [r3, #28]
 800a3e6:	69ba      	ldr	r2, [r7, #24]
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d31b      	bcc.n	800a424 <create_chain+0x64>
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	61bb      	str	r3, [r7, #24]
 800a3f0:	e018      	b.n	800a424 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a3f2:	6839      	ldr	r1, [r7, #0]
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f7ff fbe1 	bl	8009bbc <get_fat>
 800a3fa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	d801      	bhi.n	800a406 <create_chain+0x46>
 800a402:	2301      	movs	r3, #1
 800a404:	e0d9      	b.n	800a5ba <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a40c:	d101      	bne.n	800a412 <create_chain+0x52>
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	e0d3      	b.n	800a5ba <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	69db      	ldr	r3, [r3, #28]
 800a416:	68fa      	ldr	r2, [r7, #12]
 800a418:	429a      	cmp	r2, r3
 800a41a:	d201      	bcs.n	800a420 <create_chain+0x60>
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	e0cc      	b.n	800a5ba <create_chain+0x1fa>
		scl = clst;
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	2b04      	cmp	r3, #4
 800a42a:	d164      	bne.n	800a4f6 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800a42c:	2201      	movs	r2, #1
 800a42e:	69b9      	ldr	r1, [r7, #24]
 800a430:	6938      	ldr	r0, [r7, #16]
 800a432:	f7ff fdcb 	bl	8009fcc <find_bitmap>
 800a436:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800a438:	69fb      	ldr	r3, [r7, #28]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d003      	beq.n	800a446 <create_chain+0x86>
 800a43e:	69fb      	ldr	r3, [r7, #28]
 800a440:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a444:	d101      	bne.n	800a44a <create_chain+0x8a>
 800a446:	69fb      	ldr	r3, [r7, #28]
 800a448:	e0b7      	b.n	800a5ba <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800a44a:	2301      	movs	r3, #1
 800a44c:	2201      	movs	r2, #1
 800a44e:	69f9      	ldr	r1, [r7, #28]
 800a450:	6938      	ldr	r0, [r7, #16]
 800a452:	f7ff fe37 	bl	800a0c4 <change_bitmap>
 800a456:	4603      	mov	r3, r0
 800a458:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800a45a:	7dfb      	ldrb	r3, [r7, #23]
 800a45c:	2b02      	cmp	r3, #2
 800a45e:	d101      	bne.n	800a464 <create_chain+0xa4>
 800a460:	2301      	movs	r3, #1
 800a462:	e0aa      	b.n	800a5ba <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800a464:	7dfb      	ldrb	r3, [r7, #23]
 800a466:	2b01      	cmp	r3, #1
 800a468:	d102      	bne.n	800a470 <create_chain+0xb0>
 800a46a:	f04f 33ff 	mov.w	r3, #4294967295
 800a46e:	e0a4      	b.n	800a5ba <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d103      	bne.n	800a47e <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2202      	movs	r2, #2
 800a47a:	71da      	strb	r2, [r3, #7]
 800a47c:	e011      	b.n	800a4a2 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	79db      	ldrb	r3, [r3, #7]
 800a482:	2b02      	cmp	r3, #2
 800a484:	d10d      	bne.n	800a4a2 <create_chain+0xe2>
 800a486:	69bb      	ldr	r3, [r7, #24]
 800a488:	3301      	adds	r3, #1
 800a48a:	69fa      	ldr	r2, [r7, #28]
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d008      	beq.n	800a4a2 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	689b      	ldr	r3, [r3, #8]
 800a494:	69ba      	ldr	r2, [r7, #24]
 800a496:	1ad2      	subs	r2, r2, r3
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2203      	movs	r2, #3
 800a4a0:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	79db      	ldrb	r3, [r3, #7]
 800a4a6:	2b02      	cmp	r3, #2
 800a4a8:	d064      	beq.n	800a574 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	69fa      	ldr	r2, [r7, #28]
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d10b      	bne.n	800a4cc <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	69db      	ldr	r3, [r3, #28]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d003      	beq.n	800a4c4 <create_chain+0x104>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	69db      	ldr	r3, [r3, #28]
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	e000      	b.n	800a4c6 <create_chain+0x106>
 800a4c4:	2302      	movs	r3, #2
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	61d3      	str	r3, [r2, #28]
 800a4ca:	e053      	b.n	800a574 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	69db      	ldr	r3, [r3, #28]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d102      	bne.n	800a4da <create_chain+0x11a>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800a4da:	69fa      	ldr	r2, [r7, #28]
 800a4dc:	6839      	ldr	r1, [r7, #0]
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f7ff fe89 	bl	800a1f6 <fill_last_frag>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800a4e8:	7dfb      	ldrb	r3, [r7, #23]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d142      	bne.n	800a574 <create_chain+0x1b4>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	61da      	str	r2, [r3, #28]
 800a4f4:	e03e      	b.n	800a574 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a4f6:	69bb      	ldr	r3, [r7, #24]
 800a4f8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a4fa:	69fb      	ldr	r3, [r7, #28]
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	69db      	ldr	r3, [r3, #28]
 800a504:	69fa      	ldr	r2, [r7, #28]
 800a506:	429a      	cmp	r2, r3
 800a508:	d307      	bcc.n	800a51a <create_chain+0x15a>
				ncl = 2;
 800a50a:	2302      	movs	r3, #2
 800a50c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a50e:	69fa      	ldr	r2, [r7, #28]
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	429a      	cmp	r2, r3
 800a514:	d901      	bls.n	800a51a <create_chain+0x15a>
 800a516:	2300      	movs	r3, #0
 800a518:	e04f      	b.n	800a5ba <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a51a:	69f9      	ldr	r1, [r7, #28]
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f7ff fb4d 	bl	8009bbc <get_fat>
 800a522:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d00e      	beq.n	800a548 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d003      	beq.n	800a538 <create_chain+0x178>
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a536:	d101      	bne.n	800a53c <create_chain+0x17c>
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	e03e      	b.n	800a5ba <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800a53c:	69fa      	ldr	r2, [r7, #28]
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	429a      	cmp	r2, r3
 800a542:	d1da      	bne.n	800a4fa <create_chain+0x13a>
 800a544:	2300      	movs	r3, #0
 800a546:	e038      	b.n	800a5ba <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800a548:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a54a:	f04f 32ff 	mov.w	r2, #4294967295
 800a54e:	69f9      	ldr	r1, [r7, #28]
 800a550:	6938      	ldr	r0, [r7, #16]
 800a552:	f7ff fc4d 	bl	8009df0 <put_fat>
 800a556:	4603      	mov	r3, r0
 800a558:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a55a:	7dfb      	ldrb	r3, [r7, #23]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d109      	bne.n	800a574 <create_chain+0x1b4>
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d006      	beq.n	800a574 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a566:	69fa      	ldr	r2, [r7, #28]
 800a568:	6839      	ldr	r1, [r7, #0]
 800a56a:	6938      	ldr	r0, [r7, #16]
 800a56c:	f7ff fc40 	bl	8009df0 <put_fat>
 800a570:	4603      	mov	r3, r0
 800a572:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a574:	7dfb      	ldrb	r3, [r7, #23]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d116      	bne.n	800a5a8 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	69fa      	ldr	r2, [r7, #28]
 800a57e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	699a      	ldr	r2, [r3, #24]
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	69db      	ldr	r3, [r3, #28]
 800a588:	3b02      	subs	r3, #2
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d804      	bhi.n	800a598 <create_chain+0x1d8>
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	699b      	ldr	r3, [r3, #24]
 800a592:	1e5a      	subs	r2, r3, #1
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	791b      	ldrb	r3, [r3, #4]
 800a59c:	f043 0301 	orr.w	r3, r3, #1
 800a5a0:	b2da      	uxtb	r2, r3
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	711a      	strb	r2, [r3, #4]
 800a5a6:	e007      	b.n	800a5b8 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a5a8:	7dfb      	ldrb	r3, [r7, #23]
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d102      	bne.n	800a5b4 <create_chain+0x1f4>
 800a5ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a5b2:	e000      	b.n	800a5b6 <create_chain+0x1f6>
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a5b8:	69fb      	ldr	r3, [r7, #28]
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3720      	adds	r7, #32
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}

0800a5c2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a5c2:	b5b0      	push	{r4, r5, r7, lr}
 800a5c4:	b088      	sub	sp, #32
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	60f8      	str	r0, [r7, #12]
 800a5ca:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5d8:	3304      	adds	r3, #4
 800a5da:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a5dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5e0:	f04f 0000 	mov.w	r0, #0
 800a5e4:	f04f 0100 	mov.w	r1, #0
 800a5e8:	0a50      	lsrs	r0, r2, #9
 800a5ea:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800a5ee:	0a59      	lsrs	r1, r3, #9
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	895b      	ldrh	r3, [r3, #10]
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	461c      	mov	r4, r3
 800a5fa:	4615      	mov	r5, r2
 800a5fc:	4622      	mov	r2, r4
 800a5fe:	462b      	mov	r3, r5
 800a600:	f7f6 fb62 	bl	8000cc8 <__aeabi_uldivmod>
 800a604:	4602      	mov	r2, r0
 800a606:	460b      	mov	r3, r1
 800a608:	4613      	mov	r3, r2
 800a60a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a60c:	69bb      	ldr	r3, [r7, #24]
 800a60e:	1d1a      	adds	r2, r3, #4
 800a610:	61ba      	str	r2, [r7, #24]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d101      	bne.n	800a620 <clmt_clust+0x5e>
 800a61c:	2300      	movs	r3, #0
 800a61e:	e010      	b.n	800a642 <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 800a620:	69fa      	ldr	r2, [r7, #28]
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	429a      	cmp	r2, r3
 800a626:	d307      	bcc.n	800a638 <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 800a628:	69fa      	ldr	r2, [r7, #28]
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	1ad3      	subs	r3, r2, r3
 800a62e:	61fb      	str	r3, [r7, #28]
 800a630:	69bb      	ldr	r3, [r7, #24]
 800a632:	3304      	adds	r3, #4
 800a634:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a636:	e7e9      	b.n	800a60c <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 800a638:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a63a:	69bb      	ldr	r3, [r7, #24]
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	69fb      	ldr	r3, [r7, #28]
 800a640:	4413      	add	r3, r2
}
 800a642:	4618      	mov	r0, r3
 800a644:	3720      	adds	r7, #32
 800a646:	46bd      	mov	sp, r7
 800a648:	bdb0      	pop	{r4, r5, r7, pc}

0800a64a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a64a:	b580      	push	{r7, lr}
 800a64c:	b086      	sub	sp, #24
 800a64e:	af00      	add	r7, sp, #0
 800a650:	6078      	str	r0, [r7, #4]
 800a652:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	2b04      	cmp	r3, #4
 800a660:	d102      	bne.n	800a668 <dir_sdi+0x1e>
 800a662:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a666:	e001      	b.n	800a66c <dir_sdi+0x22>
 800a668:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d904      	bls.n	800a67c <dir_sdi+0x32>
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	f003 031f 	and.w	r3, r3, #31
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d001      	beq.n	800a680 <dir_sdi+0x36>
		return FR_INT_ERR;
 800a67c:	2302      	movs	r3, #2
 800a67e:	e066      	b.n	800a74e <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	683a      	ldr	r2, [r7, #0]
 800a684:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	689b      	ldr	r3, [r3, #8]
 800a68a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d109      	bne.n	800a6a6 <dir_sdi+0x5c>
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	2b02      	cmp	r3, #2
 800a698:	d905      	bls.n	800a6a6 <dir_sdi+0x5c>
		clst = fs->dirbase;
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a69e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d10c      	bne.n	800a6c6 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	095b      	lsrs	r3, r3, #5
 800a6b0:	693a      	ldr	r2, [r7, #16]
 800a6b2:	8912      	ldrh	r2, [r2, #8]
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d301      	bcc.n	800a6bc <dir_sdi+0x72>
 800a6b8:	2302      	movs	r3, #2
 800a6ba:	e048      	b.n	800a74e <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	639a      	str	r2, [r3, #56]	@ 0x38
 800a6c4:	e029      	b.n	800a71a <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	895b      	ldrh	r3, [r3, #10]
 800a6ca:	025b      	lsls	r3, r3, #9
 800a6cc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a6ce:	e019      	b.n	800a704 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6979      	ldr	r1, [r7, #20]
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f7ff fa71 	bl	8009bbc <get_fat>
 800a6da:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6e2:	d101      	bne.n	800a6e8 <dir_sdi+0x9e>
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	e032      	b.n	800a74e <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d904      	bls.n	800a6f8 <dir_sdi+0xae>
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	69db      	ldr	r3, [r3, #28]
 800a6f2:	697a      	ldr	r2, [r7, #20]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d301      	bcc.n	800a6fc <dir_sdi+0xb2>
 800a6f8:	2302      	movs	r3, #2
 800a6fa:	e028      	b.n	800a74e <dir_sdi+0x104>
			ofs -= csz;
 800a6fc:	683a      	ldr	r2, [r7, #0]
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	1ad3      	subs	r3, r2, r3
 800a702:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a704:	683a      	ldr	r2, [r7, #0]
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	429a      	cmp	r2, r3
 800a70a:	d2e1      	bcs.n	800a6d0 <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 800a70c:	6979      	ldr	r1, [r7, #20]
 800a70e:	6938      	ldr	r0, [r7, #16]
 800a710:	f7ff fa34 	bl	8009b7c <clust2sect>
 800a714:	4602      	mov	r2, r0
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	697a      	ldr	r2, [r7, #20]
 800a71e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a724:	2b00      	cmp	r3, #0
 800a726:	d101      	bne.n	800a72c <dir_sdi+0xe2>
 800a728:	2302      	movs	r3, #2
 800a72a:	e010      	b.n	800a74e <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	0a5b      	lsrs	r3, r3, #9
 800a734:	441a      	add	r2, r3
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a746:	441a      	add	r2, r3
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800a74c:	2300      	movs	r3, #0
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3718      	adds	r7, #24
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a756:	b580      	push	{r7, lr}
 800a758:	b086      	sub	sp, #24
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
 800a75e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a76a:	3320      	adds	r3, #32
 800a76c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a772:	2b00      	cmp	r3, #0
 800a774:	d00b      	beq.n	800a78e <dir_next+0x38>
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	781b      	ldrb	r3, [r3, #0]
 800a77a:	2b04      	cmp	r3, #4
 800a77c:	d102      	bne.n	800a784 <dir_next+0x2e>
 800a77e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a782:	e001      	b.n	800a788 <dir_next+0x32>
 800a784:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d801      	bhi.n	800a792 <dir_next+0x3c>
 800a78e:	2304      	movs	r3, #4
 800a790:	e0b2      	b.n	800a8f8 <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a798:	2b00      	cmp	r3, #0
 800a79a:	f040 80a0 	bne.w	800a8de <dir_next+0x188>
		dp->sect++;				/* Next sector */
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7a2:	1c5a      	adds	r2, r3, #1
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	639a      	str	r2, [r3, #56]	@ 0x38

		if (!dp->clust) {		/* Static table */
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d10b      	bne.n	800a7c8 <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	095b      	lsrs	r3, r3, #5
 800a7b4:	68fa      	ldr	r2, [r7, #12]
 800a7b6:	8912      	ldrh	r2, [r2, #8]
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	f0c0 8090 	bcc.w	800a8de <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	639a      	str	r2, [r3, #56]	@ 0x38
 800a7c4:	2304      	movs	r3, #4
 800a7c6:	e097      	b.n	800a8f8 <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	0a5b      	lsrs	r3, r3, #9
 800a7cc:	68fa      	ldr	r2, [r7, #12]
 800a7ce:	8952      	ldrh	r2, [r2, #10]
 800a7d0:	3a01      	subs	r2, #1
 800a7d2:	4013      	ands	r3, r2
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	f040 8082 	bne.w	800a8de <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	4610      	mov	r0, r2
 800a7e4:	f7ff f9ea 	bl	8009bbc <get_fat>
 800a7e8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d801      	bhi.n	800a7f4 <dir_next+0x9e>
 800a7f0:	2302      	movs	r3, #2
 800a7f2:	e081      	b.n	800a8f8 <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7fa:	d101      	bne.n	800a800 <dir_next+0xaa>
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e07b      	b.n	800a8f8 <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	69db      	ldr	r3, [r3, #28]
 800a804:	697a      	ldr	r2, [r7, #20]
 800a806:	429a      	cmp	r2, r3
 800a808:	d35f      	bcc.n	800a8ca <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d104      	bne.n	800a81a <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2200      	movs	r2, #0
 800a814:	639a      	str	r2, [r3, #56]	@ 0x38
 800a816:	2304      	movs	r3, #4
 800a818:	e06e      	b.n	800a8f8 <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a81a:	687a      	ldr	r2, [r7, #4]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a820:	4619      	mov	r1, r3
 800a822:	4610      	mov	r0, r2
 800a824:	f7ff fdcc 	bl	800a3c0 <create_chain>
 800a828:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d101      	bne.n	800a834 <dir_next+0xde>
 800a830:	2307      	movs	r3, #7
 800a832:	e061      	b.n	800a8f8 <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	2b01      	cmp	r3, #1
 800a838:	d101      	bne.n	800a83e <dir_next+0xe8>
 800a83a:	2302      	movs	r3, #2
 800a83c:	e05c      	b.n	800a8f8 <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a844:	d101      	bne.n	800a84a <dir_next+0xf4>
 800a846:	2301      	movs	r3, #1
 800a848:	e056      	b.n	800a8f8 <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	79db      	ldrb	r3, [r3, #7]
 800a84e:	f043 0304 	orr.w	r3, r3, #4
 800a852:	b2da      	uxtb	r2, r3
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a858:	68f8      	ldr	r0, [r7, #12]
 800a85a:	f7ff f8af 	bl	80099bc <sync_window>
 800a85e:	4603      	mov	r3, r0
 800a860:	2b00      	cmp	r3, #0
 800a862:	d001      	beq.n	800a868 <dir_next+0x112>
 800a864:	2301      	movs	r3, #1
 800a866:	e047      	b.n	800a8f8 <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	3338      	adds	r3, #56	@ 0x38
 800a86c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a870:	2100      	movs	r1, #0
 800a872:	4618      	mov	r0, r3
 800a874:	f7fe fed8 	bl	8009628 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a878:	2300      	movs	r3, #0
 800a87a:	613b      	str	r3, [r7, #16]
 800a87c:	6979      	ldr	r1, [r7, #20]
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	f7ff f97c 	bl	8009b7c <clust2sect>
 800a884:	4602      	mov	r2, r0
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	635a      	str	r2, [r3, #52]	@ 0x34
 800a88a:	e012      	b.n	800a8b2 <dir_next+0x15c>
						fs->wflag = 1;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2201      	movs	r2, #1
 800a890:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a892:	68f8      	ldr	r0, [r7, #12]
 800a894:	f7ff f892 	bl	80099bc <sync_window>
 800a898:	4603      	mov	r3, r0
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d001      	beq.n	800a8a2 <dir_next+0x14c>
 800a89e:	2301      	movs	r3, #1
 800a8a0:	e02a      	b.n	800a8f8 <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	613b      	str	r3, [r7, #16]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8ac:	1c5a      	adds	r2, r3, #1
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	635a      	str	r2, [r3, #52]	@ 0x34
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	895b      	ldrh	r3, [r3, #10]
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d3e6      	bcc.n	800a88c <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	1ad2      	subs	r2, r2, r3
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	697a      	ldr	r2, [r7, #20]
 800a8ce:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 800a8d0:	6979      	ldr	r1, [r7, #20]
 800a8d2:	68f8      	ldr	r0, [r7, #12]
 800a8d4:	f7ff f952 	bl	8009b7c <clust2sect>
 800a8d8:	4602      	mov	r2, r0
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	68ba      	ldr	r2, [r7, #8]
 800a8e2:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8f0:	441a      	add	r2, r3
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3718      	adds	r7, #24
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b086      	sub	sp, #24
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a910:	2100      	movs	r1, #0
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f7ff fe99 	bl	800a64a <dir_sdi>
 800a918:	4603      	mov	r3, r0
 800a91a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a91c:	7dfb      	ldrb	r3, [r7, #23]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d140      	bne.n	800a9a4 <dir_alloc+0xa4>
		n = 0;
 800a922:	2300      	movs	r3, #0
 800a924:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a92a:	4619      	mov	r1, r3
 800a92c:	68f8      	ldr	r0, [r7, #12]
 800a92e:	f7ff f889 	bl	8009a44 <move_window>
 800a932:	4603      	mov	r3, r0
 800a934:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a936:	7dfb      	ldrb	r3, [r7, #23]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d132      	bne.n	800a9a2 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	781b      	ldrb	r3, [r3, #0]
 800a940:	2b04      	cmp	r3, #4
 800a942:	d108      	bne.n	800a956 <dir_alloc+0x56>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	b25b      	sxtb	r3, r3
 800a94c:	43db      	mvns	r3, r3
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	09db      	lsrs	r3, r3, #7
 800a952:	b2db      	uxtb	r3, r3
 800a954:	e00f      	b.n	800a976 <dir_alloc+0x76>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	2be5      	cmp	r3, #229	@ 0xe5
 800a95e:	d004      	beq.n	800a96a <dir_alloc+0x6a>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a964:	781b      	ldrb	r3, [r3, #0]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d101      	bne.n	800a96e <dir_alloc+0x6e>
 800a96a:	2301      	movs	r3, #1
 800a96c:	e000      	b.n	800a970 <dir_alloc+0x70>
 800a96e:	2300      	movs	r3, #0
 800a970:	f003 0301 	and.w	r3, r3, #1
 800a974:	b2db      	uxtb	r3, r3
 800a976:	2b00      	cmp	r3, #0
 800a978:	d007      	beq.n	800a98a <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	3301      	adds	r3, #1
 800a97e:	613b      	str	r3, [r7, #16]
 800a980:	693a      	ldr	r2, [r7, #16]
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	429a      	cmp	r2, r3
 800a986:	d102      	bne.n	800a98e <dir_alloc+0x8e>
 800a988:	e00c      	b.n	800a9a4 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a98a:	2300      	movs	r3, #0
 800a98c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a98e:	2101      	movs	r1, #1
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f7ff fee0 	bl	800a756 <dir_next>
 800a996:	4603      	mov	r3, r0
 800a998:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a99a:	7dfb      	ldrb	r3, [r7, #23]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d0c2      	beq.n	800a926 <dir_alloc+0x26>
 800a9a0:	e000      	b.n	800a9a4 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800a9a2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a9a4:	7dfb      	ldrb	r3, [r7, #23]
 800a9a6:	2b04      	cmp	r3, #4
 800a9a8:	d101      	bne.n	800a9ae <dir_alloc+0xae>
 800a9aa:	2307      	movs	r3, #7
 800a9ac:	75fb      	strb	r3, [r7, #23]
	return res;
 800a9ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3718      	adds	r7, #24
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b084      	sub	sp, #16
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	331a      	adds	r3, #26
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7fe fc28 	bl	800921c <ld_word>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	2b03      	cmp	r3, #3
 800a9d6:	d109      	bne.n	800a9ec <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	3314      	adds	r3, #20
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f7fe fc1d 	bl	800921c <ld_word>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	041b      	lsls	r3, r3, #16
 800a9e6:	68fa      	ldr	r2, [r7, #12]
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3710      	adds	r7, #16
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}

0800a9f6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a9f6:	b580      	push	{r7, lr}
 800a9f8:	b084      	sub	sp, #16
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	60f8      	str	r0, [r7, #12]
 800a9fe:	60b9      	str	r1, [r7, #8]
 800aa00:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	331a      	adds	r3, #26
 800aa06:	687a      	ldr	r2, [r7, #4]
 800aa08:	b292      	uxth	r2, r2
 800aa0a:	4611      	mov	r1, r2
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7fe fd1b 	bl	8009448 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	781b      	ldrb	r3, [r3, #0]
 800aa16:	2b03      	cmp	r3, #3
 800aa18:	d109      	bne.n	800aa2e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	f103 0214 	add.w	r2, r3, #20
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	0c1b      	lsrs	r3, r3, #16
 800aa24:	b29b      	uxth	r3, r3
 800aa26:	4619      	mov	r1, r3
 800aa28:	4610      	mov	r0, r2
 800aa2a:	f7fe fd0d 	bl	8009448 <st_word>
	}
}
 800aa2e:	bf00      	nop
 800aa30:	3710      	adds	r7, #16
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
	...

0800aa38 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800aa38:	b590      	push	{r4, r7, lr}
 800aa3a:	b087      	sub	sp, #28
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	331a      	adds	r3, #26
 800aa46:	4618      	mov	r0, r3
 800aa48:	f7fe fbe8 	bl	800921c <ld_word>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d001      	beq.n	800aa56 <cmp_lfn+0x1e>
 800aa52:	2300      	movs	r3, #0
 800aa54:	e059      	b.n	800ab0a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aa5e:	1e5a      	subs	r2, r3, #1
 800aa60:	4613      	mov	r3, r2
 800aa62:	005b      	lsls	r3, r3, #1
 800aa64:	4413      	add	r3, r2
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	4413      	add	r3, r2
 800aa6a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	81fb      	strh	r3, [r7, #14]
 800aa70:	2300      	movs	r3, #0
 800aa72:	613b      	str	r3, [r7, #16]
 800aa74:	e033      	b.n	800aade <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800aa76:	4a27      	ldr	r2, [pc, #156]	@ (800ab14 <cmp_lfn+0xdc>)
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	4413      	add	r3, r2
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	461a      	mov	r2, r3
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	4413      	add	r3, r2
 800aa84:	4618      	mov	r0, r3
 800aa86:	f7fe fbc9 	bl	800921c <ld_word>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800aa8e:	89fb      	ldrh	r3, [r7, #14]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d01a      	beq.n	800aaca <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	2bfe      	cmp	r3, #254	@ 0xfe
 800aa98:	d812      	bhi.n	800aac0 <cmp_lfn+0x88>
 800aa9a:	89bb      	ldrh	r3, [r7, #12]
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f002 fe17 	bl	800d6d0 <ff_wtoupper>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	461c      	mov	r4, r3
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	1c5a      	adds	r2, r3, #1
 800aaaa:	617a      	str	r2, [r7, #20]
 800aaac:	005b      	lsls	r3, r3, #1
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	4413      	add	r3, r2
 800aab2:	881b      	ldrh	r3, [r3, #0]
 800aab4:	4618      	mov	r0, r3
 800aab6:	f002 fe0b 	bl	800d6d0 <ff_wtoupper>
 800aaba:	4603      	mov	r3, r0
 800aabc:	429c      	cmp	r4, r3
 800aabe:	d001      	beq.n	800aac4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800aac0:	2300      	movs	r3, #0
 800aac2:	e022      	b.n	800ab0a <cmp_lfn+0xd2>
			}
			wc = uc;
 800aac4:	89bb      	ldrh	r3, [r7, #12]
 800aac6:	81fb      	strh	r3, [r7, #14]
 800aac8:	e006      	b.n	800aad8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800aaca:	89bb      	ldrh	r3, [r7, #12]
 800aacc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d001      	beq.n	800aad8 <cmp_lfn+0xa0>
 800aad4:	2300      	movs	r3, #0
 800aad6:	e018      	b.n	800ab0a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	3301      	adds	r3, #1
 800aadc:	613b      	str	r3, [r7, #16]
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	2b0c      	cmp	r3, #12
 800aae2:	d9c8      	bls.n	800aa76 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d00b      	beq.n	800ab08 <cmp_lfn+0xd0>
 800aaf0:	89fb      	ldrh	r3, [r7, #14]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d008      	beq.n	800ab08 <cmp_lfn+0xd0>
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	005b      	lsls	r3, r3, #1
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	4413      	add	r3, r2
 800aafe:	881b      	ldrh	r3, [r3, #0]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d001      	beq.n	800ab08 <cmp_lfn+0xd0>
 800ab04:	2300      	movs	r3, #0
 800ab06:	e000      	b.n	800ab0a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ab08:	2301      	movs	r3, #1
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	371c      	adds	r7, #28
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd90      	pop	{r4, r7, pc}
 800ab12:	bf00      	nop
 800ab14:	08012e84 	.word	0x08012e84

0800ab18 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b086      	sub	sp, #24
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	331a      	adds	r3, #26
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7fe fb78 	bl	800921c <ld_word>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d001      	beq.n	800ab36 <pick_lfn+0x1e>
 800ab32:	2300      	movs	r3, #0
 800ab34:	e04d      	b.n	800abd2 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab3e:	1e5a      	subs	r2, r3, #1
 800ab40:	4613      	mov	r3, r2
 800ab42:	005b      	lsls	r3, r3, #1
 800ab44:	4413      	add	r3, r2
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	4413      	add	r3, r2
 800ab4a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	81fb      	strh	r3, [r7, #14]
 800ab50:	2300      	movs	r3, #0
 800ab52:	613b      	str	r3, [r7, #16]
 800ab54:	e028      	b.n	800aba8 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ab56:	4a21      	ldr	r2, [pc, #132]	@ (800abdc <pick_lfn+0xc4>)
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	4413      	add	r3, r2
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	461a      	mov	r2, r3
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	4413      	add	r3, r2
 800ab64:	4618      	mov	r0, r3
 800ab66:	f7fe fb59 	bl	800921c <ld_word>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ab6e:	89fb      	ldrh	r3, [r7, #14]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d00f      	beq.n	800ab94 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	2bfe      	cmp	r3, #254	@ 0xfe
 800ab78:	d901      	bls.n	800ab7e <pick_lfn+0x66>
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	e029      	b.n	800abd2 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800ab7e:	89bb      	ldrh	r3, [r7, #12]
 800ab80:	81fb      	strh	r3, [r7, #14]
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	1c5a      	adds	r2, r3, #1
 800ab86:	617a      	str	r2, [r7, #20]
 800ab88:	005b      	lsls	r3, r3, #1
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	4413      	add	r3, r2
 800ab8e:	89fa      	ldrh	r2, [r7, #14]
 800ab90:	801a      	strh	r2, [r3, #0]
 800ab92:	e006      	b.n	800aba2 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ab94:	89bb      	ldrh	r3, [r7, #12]
 800ab96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d001      	beq.n	800aba2 <pick_lfn+0x8a>
 800ab9e:	2300      	movs	r3, #0
 800aba0:	e017      	b.n	800abd2 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	3301      	adds	r3, #1
 800aba6:	613b      	str	r3, [r7, #16]
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	2b0c      	cmp	r3, #12
 800abac:	d9d3      	bls.n	800ab56 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d00a      	beq.n	800abd0 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	2bfe      	cmp	r3, #254	@ 0xfe
 800abbe:	d901      	bls.n	800abc4 <pick_lfn+0xac>
 800abc0:	2300      	movs	r3, #0
 800abc2:	e006      	b.n	800abd2 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	005b      	lsls	r3, r3, #1
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	4413      	add	r3, r2
 800abcc:	2200      	movs	r2, #0
 800abce:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800abd0:	2301      	movs	r3, #1
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3718      	adds	r7, #24
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop
 800abdc:	08012e84 	.word	0x08012e84

0800abe0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b088      	sub	sp, #32
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	60f8      	str	r0, [r7, #12]
 800abe8:	60b9      	str	r1, [r7, #8]
 800abea:	4611      	mov	r1, r2
 800abec:	461a      	mov	r2, r3
 800abee:	460b      	mov	r3, r1
 800abf0:	71fb      	strb	r3, [r7, #7]
 800abf2:	4613      	mov	r3, r2
 800abf4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	330d      	adds	r3, #13
 800abfa:	79ba      	ldrb	r2, [r7, #6]
 800abfc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	330b      	adds	r3, #11
 800ac02:	220f      	movs	r2, #15
 800ac04:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	330c      	adds	r3, #12
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	331a      	adds	r3, #26
 800ac12:	2100      	movs	r1, #0
 800ac14:	4618      	mov	r0, r3
 800ac16:	f7fe fc17 	bl	8009448 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ac1a:	79fb      	ldrb	r3, [r7, #7]
 800ac1c:	1e5a      	subs	r2, r3, #1
 800ac1e:	4613      	mov	r3, r2
 800ac20:	005b      	lsls	r3, r3, #1
 800ac22:	4413      	add	r3, r2
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	4413      	add	r3, r2
 800ac28:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	82fb      	strh	r3, [r7, #22]
 800ac2e:	2300      	movs	r3, #0
 800ac30:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ac32:	8afb      	ldrh	r3, [r7, #22]
 800ac34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d007      	beq.n	800ac4c <put_lfn+0x6c>
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	1c5a      	adds	r2, r3, #1
 800ac40:	61fa      	str	r2, [r7, #28]
 800ac42:	005b      	lsls	r3, r3, #1
 800ac44:	68fa      	ldr	r2, [r7, #12]
 800ac46:	4413      	add	r3, r2
 800ac48:	881b      	ldrh	r3, [r3, #0]
 800ac4a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ac4c:	4a17      	ldr	r2, [pc, #92]	@ (800acac <put_lfn+0xcc>)
 800ac4e:	69bb      	ldr	r3, [r7, #24]
 800ac50:	4413      	add	r3, r2
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	461a      	mov	r2, r3
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	4413      	add	r3, r2
 800ac5a:	8afa      	ldrh	r2, [r7, #22]
 800ac5c:	4611      	mov	r1, r2
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7fe fbf2 	bl	8009448 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ac64:	8afb      	ldrh	r3, [r7, #22]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d102      	bne.n	800ac70 <put_lfn+0x90>
 800ac6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ac6e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ac70:	69bb      	ldr	r3, [r7, #24]
 800ac72:	3301      	adds	r3, #1
 800ac74:	61bb      	str	r3, [r7, #24]
 800ac76:	69bb      	ldr	r3, [r7, #24]
 800ac78:	2b0c      	cmp	r3, #12
 800ac7a:	d9da      	bls.n	800ac32 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ac7c:	8afb      	ldrh	r3, [r7, #22]
 800ac7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d006      	beq.n	800ac94 <put_lfn+0xb4>
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	005b      	lsls	r3, r3, #1
 800ac8a:	68fa      	ldr	r2, [r7, #12]
 800ac8c:	4413      	add	r3, r2
 800ac8e:	881b      	ldrh	r3, [r3, #0]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d103      	bne.n	800ac9c <put_lfn+0xbc>
 800ac94:	79fb      	ldrb	r3, [r7, #7]
 800ac96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac9a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	79fa      	ldrb	r2, [r7, #7]
 800aca0:	701a      	strb	r2, [r3, #0]
}
 800aca2:	bf00      	nop
 800aca4:	3720      	adds	r7, #32
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	bf00      	nop
 800acac:	08012e84 	.word	0x08012e84

0800acb0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b08c      	sub	sp, #48	@ 0x30
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	60f8      	str	r0, [r7, #12]
 800acb8:	60b9      	str	r1, [r7, #8]
 800acba:	607a      	str	r2, [r7, #4]
 800acbc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800acbe:	220b      	movs	r2, #11
 800acc0:	68b9      	ldr	r1, [r7, #8]
 800acc2:	68f8      	ldr	r0, [r7, #12]
 800acc4:	f7fe fc8f 	bl	80095e6 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	2b05      	cmp	r3, #5
 800accc:	d929      	bls.n	800ad22 <gen_numname+0x72>
		sr = seq;
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800acd2:	e020      	b.n	800ad16 <gen_numname+0x66>
			wc = *lfn++;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	1c9a      	adds	r2, r3, #2
 800acd8:	607a      	str	r2, [r7, #4]
 800acda:	881b      	ldrh	r3, [r3, #0]
 800acdc:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800acde:	2300      	movs	r3, #0
 800ace0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ace2:	e015      	b.n	800ad10 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800ace4:	69fb      	ldr	r3, [r7, #28]
 800ace6:	005a      	lsls	r2, r3, #1
 800ace8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800acea:	f003 0301 	and.w	r3, r3, #1
 800acee:	4413      	add	r3, r2
 800acf0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800acf2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800acf4:	085b      	lsrs	r3, r3, #1
 800acf6:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800acf8:	69fb      	ldr	r3, [r7, #28]
 800acfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d003      	beq.n	800ad0a <gen_numname+0x5a>
 800ad02:	69fa      	ldr	r2, [r7, #28]
 800ad04:	4b30      	ldr	r3, [pc, #192]	@ (800adc8 <gen_numname+0x118>)
 800ad06:	4053      	eors	r3, r2
 800ad08:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ad0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad0c:	3301      	adds	r3, #1
 800ad0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ad10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad12:	2b0f      	cmp	r3, #15
 800ad14:	d9e6      	bls.n	800ace4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	881b      	ldrh	r3, [r3, #0]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d1da      	bne.n	800acd4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ad1e:	69fb      	ldr	r3, [r7, #28]
 800ad20:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ad22:	2307      	movs	r3, #7
 800ad24:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	b2db      	uxtb	r3, r3
 800ad2a:	f003 030f 	and.w	r3, r3, #15
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	3330      	adds	r3, #48	@ 0x30
 800ad32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800ad36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ad3a:	2b39      	cmp	r3, #57	@ 0x39
 800ad3c:	d904      	bls.n	800ad48 <gen_numname+0x98>
 800ad3e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ad42:	3307      	adds	r3, #7
 800ad44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800ad48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad4a:	1e5a      	subs	r2, r3, #1
 800ad4c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ad4e:	3330      	adds	r3, #48	@ 0x30
 800ad50:	443b      	add	r3, r7
 800ad52:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800ad56:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	091b      	lsrs	r3, r3, #4
 800ad5e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d1df      	bne.n	800ad26 <gen_numname+0x76>
	ns[i] = '~';
 800ad66:	f107 0214 	add.w	r2, r7, #20
 800ad6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad6c:	4413      	add	r3, r2
 800ad6e:	227e      	movs	r2, #126	@ 0x7e
 800ad70:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ad72:	2300      	movs	r3, #0
 800ad74:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad76:	e002      	b.n	800ad7e <gen_numname+0xce>
 800ad78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad7a:	3301      	adds	r3, #1
 800ad7c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d205      	bcs.n	800ad92 <gen_numname+0xe2>
 800ad86:	68fa      	ldr	r2, [r7, #12]
 800ad88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad8a:	4413      	add	r3, r2
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	2b20      	cmp	r3, #32
 800ad90:	d1f2      	bne.n	800ad78 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ad92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad94:	2b07      	cmp	r3, #7
 800ad96:	d807      	bhi.n	800ada8 <gen_numname+0xf8>
 800ad98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad9a:	1c5a      	adds	r2, r3, #1
 800ad9c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ad9e:	3330      	adds	r3, #48	@ 0x30
 800ada0:	443b      	add	r3, r7
 800ada2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ada6:	e000      	b.n	800adaa <gen_numname+0xfa>
 800ada8:	2120      	movs	r1, #32
 800adaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adac:	1c5a      	adds	r2, r3, #1
 800adae:	627a      	str	r2, [r7, #36]	@ 0x24
 800adb0:	68fa      	ldr	r2, [r7, #12]
 800adb2:	4413      	add	r3, r2
 800adb4:	460a      	mov	r2, r1
 800adb6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800adb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adba:	2b07      	cmp	r3, #7
 800adbc:	d9e9      	bls.n	800ad92 <gen_numname+0xe2>
}
 800adbe:	bf00      	nop
 800adc0:	bf00      	nop
 800adc2:	3730      	adds	r7, #48	@ 0x30
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	00011021 	.word	0x00011021

0800adcc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800adcc:	b480      	push	{r7}
 800adce:	b085      	sub	sp, #20
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800add4:	2300      	movs	r3, #0
 800add6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800add8:	230b      	movs	r3, #11
 800adda:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800addc:	7bfb      	ldrb	r3, [r7, #15]
 800adde:	b2da      	uxtb	r2, r3
 800ade0:	0852      	lsrs	r2, r2, #1
 800ade2:	01db      	lsls	r3, r3, #7
 800ade4:	4313      	orrs	r3, r2
 800ade6:	b2da      	uxtb	r2, r3
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	1c59      	adds	r1, r3, #1
 800adec:	6079      	str	r1, [r7, #4]
 800adee:	781b      	ldrb	r3, [r3, #0]
 800adf0:	4413      	add	r3, r2
 800adf2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	3b01      	subs	r3, #1
 800adf8:	60bb      	str	r3, [r7, #8]
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d1ed      	bne.n	800addc <sum_sfn+0x10>
	return sum;
 800ae00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3714      	adds	r7, #20
 800ae06:	46bd      	mov	sp, r7
 800ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0c:	4770      	bx	lr

0800ae0e <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800ae0e:	b480      	push	{r7}
 800ae10:	b087      	sub	sp, #28
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	3301      	adds	r3, #1
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	3301      	adds	r3, #1
 800ae1e:	015b      	lsls	r3, r3, #5
 800ae20:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800ae22:	2300      	movs	r3, #0
 800ae24:	827b      	strh	r3, [r7, #18]
 800ae26:	2300      	movs	r3, #0
 800ae28:	617b      	str	r3, [r7, #20]
 800ae2a:	e017      	b.n	800ae5c <xdir_sum+0x4e>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	2b02      	cmp	r3, #2
 800ae30:	d103      	bne.n	800ae3a <xdir_sum+0x2c>
			i++;
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	3301      	adds	r3, #1
 800ae36:	617b      	str	r3, [r7, #20]
 800ae38:	e00d      	b.n	800ae56 <xdir_sum+0x48>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800ae3a:	8a7b      	ldrh	r3, [r7, #18]
 800ae3c:	03db      	lsls	r3, r3, #15
 800ae3e:	b29a      	uxth	r2, r3
 800ae40:	8a7b      	ldrh	r3, [r7, #18]
 800ae42:	085b      	lsrs	r3, r3, #1
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	4413      	add	r3, r2
 800ae48:	b29b      	uxth	r3, r3
 800ae4a:	6879      	ldr	r1, [r7, #4]
 800ae4c:	697a      	ldr	r2, [r7, #20]
 800ae4e:	440a      	add	r2, r1
 800ae50:	7812      	ldrb	r2, [r2, #0]
 800ae52:	4413      	add	r3, r2
 800ae54:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	3301      	adds	r3, #1
 800ae5a:	617b      	str	r3, [r7, #20]
 800ae5c:	697a      	ldr	r2, [r7, #20]
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d3e3      	bcc.n	800ae2c <xdir_sum+0x1e>
		}
	}
	return sum;
 800ae64:	8a7b      	ldrh	r3, [r7, #18]
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	371c      	adds	r7, #28
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr

0800ae72 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800ae72:	b580      	push	{r7, lr}
 800ae74:	b084      	sub	sp, #16
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800ae7e:	e01f      	b.n	800aec0 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800ae80:	89bb      	ldrh	r3, [r7, #12]
 800ae82:	4618      	mov	r0, r3
 800ae84:	f002 fc24 	bl	800d6d0 <ff_wtoupper>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800ae8c:	89fb      	ldrh	r3, [r7, #14]
 800ae8e:	03db      	lsls	r3, r3, #15
 800ae90:	b29a      	uxth	r2, r3
 800ae92:	89fb      	ldrh	r3, [r7, #14]
 800ae94:	085b      	lsrs	r3, r3, #1
 800ae96:	b29b      	uxth	r3, r3
 800ae98:	4413      	add	r3, r2
 800ae9a:	b29a      	uxth	r2, r3
 800ae9c:	89bb      	ldrh	r3, [r7, #12]
 800ae9e:	b2db      	uxtb	r3, r3
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	4413      	add	r3, r2
 800aea4:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800aea6:	89fb      	ldrh	r3, [r7, #14]
 800aea8:	03db      	lsls	r3, r3, #15
 800aeaa:	b29a      	uxth	r2, r3
 800aeac:	89fb      	ldrh	r3, [r7, #14]
 800aeae:	085b      	lsrs	r3, r3, #1
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	4413      	add	r3, r2
 800aeb4:	b29a      	uxth	r2, r3
 800aeb6:	89bb      	ldrh	r3, [r7, #12]
 800aeb8:	0a1b      	lsrs	r3, r3, #8
 800aeba:	b29b      	uxth	r3, r3
 800aebc:	4413      	add	r3, r2
 800aebe:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	1c9a      	adds	r2, r3, #2
 800aec4:	607a      	str	r2, [r7, #4]
 800aec6:	881b      	ldrh	r3, [r3, #0]
 800aec8:	81bb      	strh	r3, [r7, #12]
 800aeca:	89bb      	ldrh	r3, [r7, #12]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d1d7      	bne.n	800ae80 <xname_sum+0xe>
	}
	return sum;
 800aed0:	89fb      	ldrh	r3, [r7, #14]
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3710      	adds	r7, #16
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
	...

0800aedc <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800aedc:	b590      	push	{r4, r7, lr}
 800aede:	b087      	sub	sp, #28
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	691b      	ldr	r3, [r3, #16]
 800aeea:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aef4:	4619      	mov	r1, r3
 800aef6:	4610      	mov	r0, r2
 800aef8:	f7fe fda4 	bl	8009a44 <move_window>
 800aefc:	4603      	mov	r3, r0
 800aefe:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800af00:	7bfb      	ldrb	r3, [r7, #15]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d001      	beq.n	800af0a <load_xdir+0x2e>
 800af06:	7bfb      	ldrb	r3, [r7, #15]
 800af08:	e09f      	b.n	800b04a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	2b85      	cmp	r3, #133	@ 0x85
 800af12:	d001      	beq.n	800af18 <load_xdir+0x3c>
 800af14:	2302      	movs	r3, #2
 800af16:	e098      	b.n	800b04a <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af1c:	2220      	movs	r2, #32
 800af1e:	4619      	mov	r1, r3
 800af20:	6938      	ldr	r0, [r7, #16]
 800af22:	f7fe fb60 	bl	80095e6 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	3301      	adds	r3, #1
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	3301      	adds	r3, #1
 800af2e:	015b      	lsls	r3, r3, #5
 800af30:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	2b5f      	cmp	r3, #95	@ 0x5f
 800af36:	d903      	bls.n	800af40 <load_xdir+0x64>
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800af3e:	d901      	bls.n	800af44 <load_xdir+0x68>
 800af40:	2302      	movs	r3, #2
 800af42:	e082      	b.n	800b04a <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800af44:	2100      	movs	r1, #0
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f7ff fc05 	bl	800a756 <dir_next>
 800af4c:	4603      	mov	r3, r0
 800af4e:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800af50:	7bfb      	ldrb	r3, [r7, #15]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d001      	beq.n	800af5a <load_xdir+0x7e>
 800af56:	7bfb      	ldrb	r3, [r7, #15]
 800af58:	e077      	b.n	800b04a <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681a      	ldr	r2, [r3, #0]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af62:	4619      	mov	r1, r3
 800af64:	4610      	mov	r0, r2
 800af66:	f7fe fd6d 	bl	8009a44 <move_window>
 800af6a:	4603      	mov	r3, r0
 800af6c:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800af6e:	7bfb      	ldrb	r3, [r7, #15]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d001      	beq.n	800af78 <load_xdir+0x9c>
 800af74:	7bfb      	ldrb	r3, [r7, #15]
 800af76:	e068      	b.n	800b04a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	2bc0      	cmp	r3, #192	@ 0xc0
 800af80:	d001      	beq.n	800af86 <load_xdir+0xaa>
 800af82:	2302      	movs	r3, #2
 800af84:	e061      	b.n	800b04a <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	f103 0020 	add.w	r0, r3, #32
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af90:	2220      	movs	r2, #32
 800af92:	4619      	mov	r1, r3
 800af94:	f7fe fb27 	bl	80095e6 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	3323      	adds	r3, #35	@ 0x23
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	332c      	adds	r3, #44	@ 0x2c
 800afa0:	4a2c      	ldr	r2, [pc, #176]	@ (800b054 <load_xdir+0x178>)
 800afa2:	fba2 2303 	umull	r2, r3, r2, r3
 800afa6:	08db      	lsrs	r3, r3, #3
 800afa8:	015b      	lsls	r3, r3, #5
 800afaa:	68ba      	ldr	r2, [r7, #8]
 800afac:	429a      	cmp	r2, r3
 800afae:	d201      	bcs.n	800afb4 <load_xdir+0xd8>
 800afb0:	2302      	movs	r3, #2
 800afb2:	e04a      	b.n	800b04a <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800afb4:	2340      	movs	r3, #64	@ 0x40
 800afb6:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800afb8:	2100      	movs	r1, #0
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f7ff fbcb 	bl	800a756 <dir_next>
 800afc0:	4603      	mov	r3, r0
 800afc2:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800afc4:	7bfb      	ldrb	r3, [r7, #15]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d001      	beq.n	800afce <load_xdir+0xf2>
 800afca:	7bfb      	ldrb	r3, [r7, #15]
 800afcc:	e03d      	b.n	800b04a <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681a      	ldr	r2, [r3, #0]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afd6:	4619      	mov	r1, r3
 800afd8:	4610      	mov	r0, r2
 800afda:	f7fe fd33 	bl	8009a44 <move_window>
 800afde:	4603      	mov	r3, r0
 800afe0:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800afe2:	7bfb      	ldrb	r3, [r7, #15]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d001      	beq.n	800afec <load_xdir+0x110>
 800afe8:	7bfb      	ldrb	r3, [r7, #15]
 800afea:	e02e      	b.n	800b04a <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aff0:	781b      	ldrb	r3, [r3, #0]
 800aff2:	2bc1      	cmp	r3, #193	@ 0xc1
 800aff4:	d001      	beq.n	800affa <load_xdir+0x11e>
 800aff6:	2302      	movs	r3, #2
 800aff8:	e027      	b.n	800b04a <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800b000:	d208      	bcs.n	800b014 <load_xdir+0x138>
 800b002:	693a      	ldr	r2, [r7, #16]
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	18d0      	adds	r0, r2, r3
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b00c:	2220      	movs	r2, #32
 800b00e:	4619      	mov	r1, r3
 800b010:	f7fe fae9 	bl	80095e6 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	3320      	adds	r3, #32
 800b018:	617b      	str	r3, [r7, #20]
 800b01a:	697a      	ldr	r2, [r7, #20]
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	429a      	cmp	r2, r3
 800b020:	d3ca      	bcc.n	800afb8 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800b028:	d80e      	bhi.n	800b048 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800b02a:	6938      	ldr	r0, [r7, #16]
 800b02c:	f7ff feef 	bl	800ae0e <xdir_sum>
 800b030:	4603      	mov	r3, r0
 800b032:	461c      	mov	r4, r3
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	3302      	adds	r3, #2
 800b038:	4618      	mov	r0, r3
 800b03a:	f7fe f8ef 	bl	800921c <ld_word>
 800b03e:	4603      	mov	r3, r0
 800b040:	429c      	cmp	r4, r3
 800b042:	d001      	beq.n	800b048 <load_xdir+0x16c>
 800b044:	2302      	movs	r3, #2
 800b046:	e000      	b.n	800b04a <load_xdir+0x16e>
	}
	return FR_OK;
 800b048:	2300      	movs	r3, #0
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	371c      	adds	r7, #28
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd90      	pop	{r4, r7, pc}
 800b052:	bf00      	nop
 800b054:	88888889 	.word	0x88888889

0800b058 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800b058:	b5b0      	push	{r4, r5, r7, lr}
 800b05a:	b084      	sub	sp, #16
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800b062:	6839      	ldr	r1, [r7, #0]
 800b064:	6808      	ldr	r0, [r1, #0]
 800b066:	6879      	ldr	r1, [r7, #4]
 800b068:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800b06a:	6839      	ldr	r1, [r7, #0]
 800b06c:	6a08      	ldr	r0, [r1, #32]
 800b06e:	6879      	ldr	r1, [r7, #4]
 800b070:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800b072:	6839      	ldr	r1, [r7, #0]
 800b074:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800b076:	b2c8      	uxtb	r0, r1
 800b078:	6879      	ldr	r1, [r7, #4]
 800b07a:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800b07c:	6839      	ldr	r1, [r7, #0]
 800b07e:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800b080:	2000      	movs	r0, #0
 800b082:	460c      	mov	r4, r1
 800b084:	4605      	mov	r5, r0
 800b086:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 800b08a:	2300      	movs	r3, #0
 800b08c:	6879      	ldr	r1, [r7, #4]
 800b08e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b09e:	4619      	mov	r1, r3
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f7ff fad2 	bl	800a64a <dir_sdi>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b0aa:	7bfb      	ldrb	r3, [r7, #15]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d104      	bne.n	800b0ba <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f7ff ff13 	bl	800aedc <load_xdir>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800b0ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3710      	adds	r7, #16
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bdb0      	pop	{r4, r5, r7, pc}

0800b0c4 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800b0c4:	b590      	push	{r4, r7, lr}
 800b0c6:	b087      	sub	sp, #28
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	691b      	ldr	r3, [r3, #16]
 800b0d2:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	1c9c      	adds	r4, r3, #2
 800b0d8:	68f8      	ldr	r0, [r7, #12]
 800b0da:	f7ff fe98 	bl	800ae0e <xdir_sum>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	4619      	mov	r1, r3
 800b0e2:	4620      	mov	r0, r4
 800b0e4:	f7fe f9b0 	bl	8009448 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	781b      	ldrb	r3, [r3, #0]
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b0f6:	4619      	mov	r1, r3
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f7ff faa6 	bl	800a64a <dir_sdi>
 800b0fe:	4603      	mov	r3, r0
 800b100:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800b102:	e026      	b.n	800b152 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681a      	ldr	r2, [r3, #0]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b10c:	4619      	mov	r1, r3
 800b10e:	4610      	mov	r0, r2
 800b110:	f7fe fc98 	bl	8009a44 <move_window>
 800b114:	4603      	mov	r3, r0
 800b116:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b118:	7dfb      	ldrb	r3, [r7, #23]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d11d      	bne.n	800b15a <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b122:	2220      	movs	r2, #32
 800b124:	68f9      	ldr	r1, [r7, #12]
 800b126:	4618      	mov	r0, r3
 800b128:	f7fe fa5d 	bl	80095e6 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	2201      	movs	r2, #1
 800b132:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	3b01      	subs	r3, #1
 800b138:	613b      	str	r3, [r7, #16]
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d00e      	beq.n	800b15e <store_xdir+0x9a>
		dirb += SZDIRE;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	3320      	adds	r3, #32
 800b144:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800b146:	2100      	movs	r1, #0
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f7ff fb04 	bl	800a756 <dir_next>
 800b14e:	4603      	mov	r3, r0
 800b150:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800b152:	7dfb      	ldrb	r3, [r7, #23]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d0d5      	beq.n	800b104 <store_xdir+0x40>
 800b158:	e002      	b.n	800b160 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800b15a:	bf00      	nop
 800b15c:	e000      	b.n	800b160 <store_xdir+0x9c>
		if (--nent == 0) break;
 800b15e:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800b160:	7dfb      	ldrb	r3, [r7, #23]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d002      	beq.n	800b16c <store_xdir+0xa8>
 800b166:	7dfb      	ldrb	r3, [r7, #23]
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d101      	bne.n	800b170 <store_xdir+0xac>
 800b16c:	7dfb      	ldrb	r3, [r7, #23]
 800b16e:	e000      	b.n	800b172 <store_xdir+0xae>
 800b170:	2302      	movs	r3, #2
}
 800b172:	4618      	mov	r0, r3
 800b174:	371c      	adds	r7, #28
 800b176:	46bd      	mov	sp, r7
 800b178:	bd90      	pop	{r4, r7, pc}

0800b17a <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800b17a:	b590      	push	{r4, r7, lr}
 800b17c:	b085      	sub	sp, #20
 800b17e:	af00      	add	r7, sp, #0
 800b180:	6078      	str	r0, [r7, #4]
 800b182:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800b184:	2240      	movs	r2, #64	@ 0x40
 800b186:	2100      	movs	r1, #0
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f7fe fa4d 	bl	8009628 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2285      	movs	r2, #133	@ 0x85
 800b192:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	3320      	adds	r3, #32
 800b198:	22c0      	movs	r2, #192	@ 0xc0
 800b19a:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800b19c:	2300      	movs	r3, #0
 800b19e:	72bb      	strb	r3, [r7, #10]
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	72fb      	strb	r3, [r7, #11]
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	813b      	strh	r3, [r7, #8]
 800b1a8:	2340      	movs	r3, #64	@ 0x40
 800b1aa:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	1c5a      	adds	r2, r3, #1
 800b1b0:	60fa      	str	r2, [r7, #12]
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	4413      	add	r3, r2
 800b1b6:	22c1      	movs	r2, #193	@ 0xc1
 800b1b8:	701a      	strb	r2, [r3, #0]
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	1c5a      	adds	r2, r3, #1
 800b1be:	60fa      	str	r2, [r7, #12]
 800b1c0:	687a      	ldr	r2, [r7, #4]
 800b1c2:	4413      	add	r3, r2
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800b1c8:	893b      	ldrh	r3, [r7, #8]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d00b      	beq.n	800b1e6 <create_xdir+0x6c>
 800b1ce:	7abb      	ldrb	r3, [r7, #10]
 800b1d0:	005b      	lsls	r3, r3, #1
 800b1d2:	683a      	ldr	r2, [r7, #0]
 800b1d4:	4413      	add	r3, r2
 800b1d6:	881b      	ldrh	r3, [r3, #0]
 800b1d8:	813b      	strh	r3, [r7, #8]
 800b1da:	893b      	ldrh	r3, [r7, #8]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d002      	beq.n	800b1e6 <create_xdir+0x6c>
 800b1e0:	7abb      	ldrb	r3, [r7, #10]
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800b1e6:	687a      	ldr	r2, [r7, #4]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	4413      	add	r3, r2
 800b1ec:	893a      	ldrh	r2, [r7, #8]
 800b1ee:	4611      	mov	r1, r2
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f7fe f929 	bl	8009448 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	3302      	adds	r3, #2
 800b1fa:	60fb      	str	r3, [r7, #12]
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f003 031f 	and.w	r3, r3, #31
 800b202:	2b00      	cmp	r3, #0
 800b204:	d1e0      	bne.n	800b1c8 <create_xdir+0x4e>
		nb++;
 800b206:	7afb      	ldrb	r3, [r7, #11]
 800b208:	3301      	adds	r3, #1
 800b20a:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800b20c:	7abb      	ldrb	r3, [r7, #10]
 800b20e:	005b      	lsls	r3, r3, #1
 800b210:	683a      	ldr	r2, [r7, #0]
 800b212:	4413      	add	r3, r2
 800b214:	881b      	ldrh	r3, [r3, #0]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d1c8      	bne.n	800b1ac <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	3323      	adds	r3, #35	@ 0x23
 800b21e:	7aba      	ldrb	r2, [r7, #10]
 800b220:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	3301      	adds	r3, #1
 800b226:	7afa      	ldrb	r2, [r7, #11]
 800b228:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800b230:	6838      	ldr	r0, [r7, #0]
 800b232:	f7ff fe1e 	bl	800ae72 <xname_sum>
 800b236:	4603      	mov	r3, r0
 800b238:	4619      	mov	r1, r3
 800b23a:	4620      	mov	r0, r4
 800b23c:	f7fe f904 	bl	8009448 <st_word>
}
 800b240:	bf00      	nop
 800b242:	3714      	adds	r7, #20
 800b244:	46bd      	mov	sp, r7
 800b246:	bd90      	pop	{r4, r7, pc}

0800b248 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b086      	sub	sp, #24
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800b252:	2304      	movs	r3, #4
 800b254:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800b25c:	23ff      	movs	r3, #255	@ 0xff
 800b25e:	757b      	strb	r3, [r7, #21]
 800b260:	23ff      	movs	r3, #255	@ 0xff
 800b262:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800b264:	e09f      	b.n	800b3a6 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b26a:	4619      	mov	r1, r3
 800b26c:	6938      	ldr	r0, [r7, #16]
 800b26e:	f7fe fbe9 	bl	8009a44 <move_window>
 800b272:	4603      	mov	r3, r0
 800b274:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b276:	7dfb      	ldrb	r3, [r7, #23]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	f040 809a 	bne.w	800b3b2 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b282:	781b      	ldrb	r3, [r3, #0]
 800b284:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800b286:	7dbb      	ldrb	r3, [r7, #22]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d102      	bne.n	800b292 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800b28c:	2304      	movs	r3, #4
 800b28e:	75fb      	strb	r3, [r7, #23]
 800b290:	e096      	b.n	800b3c0 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	2b04      	cmp	r3, #4
 800b298:	d118      	bne.n	800b2cc <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800b29a:	7dbb      	ldrb	r3, [r7, #22]
 800b29c:	2b85      	cmp	r3, #133	@ 0x85
 800b29e:	d179      	bne.n	800b394 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f7ff fe17 	bl	800aedc <load_xdir>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800b2b2:	7dfb      	ldrb	r3, [r7, #23]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d17e      	bne.n	800b3b6 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	691b      	ldr	r3, [r3, #16]
 800b2bc:	3304      	adds	r3, #4
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b2c4:	b2da      	uxtb	r2, r3
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	719a      	strb	r2, [r3, #6]
					}
					break;
 800b2ca:	e074      	b.n	800b3b6 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2d0:	330b      	adds	r3, #11
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b2d8:	73fb      	strb	r3, [r7, #15]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	7bfa      	ldrb	r2, [r7, #15]
 800b2de:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800b2e0:	7dbb      	ldrb	r3, [r7, #22]
 800b2e2:	2be5      	cmp	r3, #229	@ 0xe5
 800b2e4:	d00e      	beq.n	800b304 <dir_read+0xbc>
 800b2e6:	7dbb      	ldrb	r3, [r7, #22]
 800b2e8:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2ea:	d00b      	beq.n	800b304 <dir_read+0xbc>
 800b2ec:	7bfb      	ldrb	r3, [r7, #15]
 800b2ee:	f023 0320 	bic.w	r3, r3, #32
 800b2f2:	2b08      	cmp	r3, #8
 800b2f4:	bf0c      	ite	eq
 800b2f6:	2301      	moveq	r3, #1
 800b2f8:	2300      	movne	r3, #0
 800b2fa:	b2db      	uxtb	r3, r3
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	4293      	cmp	r3, r2
 800b302:	d002      	beq.n	800b30a <dir_read+0xc2>
				ord = 0xFF;
 800b304:	23ff      	movs	r3, #255	@ 0xff
 800b306:	757b      	strb	r3, [r7, #21]
 800b308:	e044      	b.n	800b394 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800b30a:	7bfb      	ldrb	r3, [r7, #15]
 800b30c:	2b0f      	cmp	r3, #15
 800b30e:	d12f      	bne.n	800b370 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800b310:	7dbb      	ldrb	r3, [r7, #22]
 800b312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b316:	2b00      	cmp	r3, #0
 800b318:	d00d      	beq.n	800b336 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b31e:	7b5b      	ldrb	r3, [r3, #13]
 800b320:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800b322:	7dbb      	ldrb	r3, [r7, #22]
 800b324:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b328:	75bb      	strb	r3, [r7, #22]
 800b32a:	7dbb      	ldrb	r3, [r7, #22]
 800b32c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b336:	7dba      	ldrb	r2, [r7, #22]
 800b338:	7d7b      	ldrb	r3, [r7, #21]
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d115      	bne.n	800b36a <dir_read+0x122>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b342:	330d      	adds	r3, #13
 800b344:	781b      	ldrb	r3, [r3, #0]
 800b346:	7d3a      	ldrb	r2, [r7, #20]
 800b348:	429a      	cmp	r2, r3
 800b34a:	d10e      	bne.n	800b36a <dir_read+0x122>
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	68da      	ldr	r2, [r3, #12]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b354:	4619      	mov	r1, r3
 800b356:	4610      	mov	r0, r2
 800b358:	f7ff fbde 	bl	800ab18 <pick_lfn>
 800b35c:	4603      	mov	r3, r0
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d003      	beq.n	800b36a <dir_read+0x122>
 800b362:	7d7b      	ldrb	r3, [r7, #21]
 800b364:	3b01      	subs	r3, #1
 800b366:	b2db      	uxtb	r3, r3
 800b368:	e000      	b.n	800b36c <dir_read+0x124>
 800b36a:	23ff      	movs	r3, #255	@ 0xff
 800b36c:	757b      	strb	r3, [r7, #21]
 800b36e:	e011      	b.n	800b394 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800b370:	7d7b      	ldrb	r3, [r7, #21]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d109      	bne.n	800b38a <dir_read+0x142>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b37a:	4618      	mov	r0, r3
 800b37c:	f7ff fd26 	bl	800adcc <sum_sfn>
 800b380:	4603      	mov	r3, r0
 800b382:	461a      	mov	r2, r3
 800b384:	7d3b      	ldrb	r3, [r7, #20]
 800b386:	4293      	cmp	r3, r2
 800b388:	d017      	beq.n	800b3ba <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f04f 32ff 	mov.w	r2, #4294967295
 800b390:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 800b392:	e012      	b.n	800b3ba <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800b394:	2100      	movs	r1, #0
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f7ff f9dd 	bl	800a756 <dir_next>
 800b39c:	4603      	mov	r3, r0
 800b39e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b3a0:	7dfb      	ldrb	r3, [r7, #23]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d10b      	bne.n	800b3be <dir_read+0x176>
	while (dp->sect) {
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	f47f af5b 	bne.w	800b266 <dir_read+0x1e>
 800b3b0:	e006      	b.n	800b3c0 <dir_read+0x178>
		if (res != FR_OK) break;
 800b3b2:	bf00      	nop
 800b3b4:	e004      	b.n	800b3c0 <dir_read+0x178>
					break;
 800b3b6:	bf00      	nop
 800b3b8:	e002      	b.n	800b3c0 <dir_read+0x178>
					break;
 800b3ba:	bf00      	nop
 800b3bc:	e000      	b.n	800b3c0 <dir_read+0x178>
		if (res != FR_OK) break;
 800b3be:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800b3c0:	7dfb      	ldrb	r3, [r7, #23]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d002      	beq.n	800b3cc <dir_read+0x184>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 800b3cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3718      	adds	r7, #24
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}

0800b3d6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b3d6:	b590      	push	{r4, r7, lr}
 800b3d8:	b089      	sub	sp, #36	@ 0x24
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b3e4:	2100      	movs	r1, #0
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f7ff f92f 	bl	800a64a <dir_sdi>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800b3f0:	7ffb      	ldrb	r3, [r7, #31]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d001      	beq.n	800b3fa <dir_find+0x24>
 800b3f6:	7ffb      	ldrb	r3, [r7, #31]
 800b3f8:	e113      	b.n	800b622 <dir_find+0x24c>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	781b      	ldrb	r3, [r3, #0]
 800b3fe:	2b04      	cmp	r3, #4
 800b400:	d165      	bne.n	800b4ce <dir_find+0xf8>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	68db      	ldr	r3, [r3, #12]
 800b406:	4618      	mov	r0, r3
 800b408:	f7ff fd33 	bl	800ae72 <xname_sum>
 800b40c:	4603      	mov	r3, r0
 800b40e:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800b410:	e050      	b.n	800b4b4 <dir_find+0xde>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	691b      	ldr	r3, [r3, #16]
 800b416:	3324      	adds	r3, #36	@ 0x24
 800b418:	4618      	mov	r0, r3
 800b41a:	f7fd feff 	bl	800921c <ld_word>
 800b41e:	4603      	mov	r3, r0
 800b420:	461a      	mov	r2, r3
 800b422:	893b      	ldrh	r3, [r7, #8]
 800b424:	4293      	cmp	r3, r2
 800b426:	d144      	bne.n	800b4b2 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	691b      	ldr	r3, [r3, #16]
 800b42c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800b430:	76fb      	strb	r3, [r7, #27]
 800b432:	2340      	movs	r3, #64	@ 0x40
 800b434:	617b      	str	r3, [r7, #20]
 800b436:	2300      	movs	r3, #0
 800b438:	613b      	str	r3, [r7, #16]
 800b43a:	e029      	b.n	800b490 <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	f003 031f 	and.w	r3, r3, #31
 800b442:	2b00      	cmp	r3, #0
 800b444:	d102      	bne.n	800b44c <dir_find+0x76>
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	3302      	adds	r3, #2
 800b44a:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	691a      	ldr	r2, [r3, #16]
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	4413      	add	r3, r2
 800b454:	4618      	mov	r0, r3
 800b456:	f7fd fee1 	bl	800921c <ld_word>
 800b45a:	4603      	mov	r3, r0
 800b45c:	4618      	mov	r0, r3
 800b45e:	f002 f937 	bl	800d6d0 <ff_wtoupper>
 800b462:	4603      	mov	r3, r0
 800b464:	461c      	mov	r4, r3
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	68da      	ldr	r2, [r3, #12]
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	005b      	lsls	r3, r3, #1
 800b46e:	4413      	add	r3, r2
 800b470:	881b      	ldrh	r3, [r3, #0]
 800b472:	4618      	mov	r0, r3
 800b474:	f002 f92c 	bl	800d6d0 <ff_wtoupper>
 800b478:	4603      	mov	r3, r0
 800b47a:	429c      	cmp	r4, r3
 800b47c:	d10c      	bne.n	800b498 <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800b47e:	7efb      	ldrb	r3, [r7, #27]
 800b480:	3b01      	subs	r3, #1
 800b482:	76fb      	strb	r3, [r7, #27]
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	3302      	adds	r3, #2
 800b488:	617b      	str	r3, [r7, #20]
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	3301      	adds	r3, #1
 800b48e:	613b      	str	r3, [r7, #16]
 800b490:	7efb      	ldrb	r3, [r7, #27]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d1d2      	bne.n	800b43c <dir_find+0x66>
 800b496:	e000      	b.n	800b49a <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800b498:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800b49a:	7efb      	ldrb	r3, [r7, #27]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d109      	bne.n	800b4b4 <dir_find+0xde>
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	68da      	ldr	r2, [r3, #12]
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	005b      	lsls	r3, r3, #1
 800b4a8:	4413      	add	r3, r2
 800b4aa:	881b      	ldrh	r3, [r3, #0]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d00b      	beq.n	800b4c8 <dir_find+0xf2>
 800b4b0:	e000      	b.n	800b4b4 <dir_find+0xde>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800b4b2:	bf00      	nop
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800b4b4:	2100      	movs	r1, #0
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f7ff fec6 	bl	800b248 <dir_read>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	77fb      	strb	r3, [r7, #31]
 800b4c0:	7ffb      	ldrb	r3, [r7, #31]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d0a5      	beq.n	800b412 <dir_find+0x3c>
 800b4c6:	e000      	b.n	800b4ca <dir_find+0xf4>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800b4c8:	bf00      	nop
		}
		return res;
 800b4ca:	7ffb      	ldrb	r3, [r7, #31]
 800b4cc:	e0a9      	b.n	800b622 <dir_find+0x24c>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b4ce:	23ff      	movs	r3, #255	@ 0xff
 800b4d0:	773b      	strb	r3, [r7, #28]
 800b4d2:	7f3b      	ldrb	r3, [r7, #28]
 800b4d4:	777b      	strb	r3, [r7, #29]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b4dc:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	68f8      	ldr	r0, [r7, #12]
 800b4e6:	f7fe faad 	bl	8009a44 <move_window>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800b4ee:	7ffb      	ldrb	r3, [r7, #31]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	f040 8090 	bne.w	800b616 <dir_find+0x240>
		c = dp->dir[DIR_Name];
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4fa:	781b      	ldrb	r3, [r3, #0]
 800b4fc:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b4fe:	7fbb      	ldrb	r3, [r7, #30]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d102      	bne.n	800b50a <dir_find+0x134>
 800b504:	2304      	movs	r3, #4
 800b506:	77fb      	strb	r3, [r7, #31]
 800b508:	e08a      	b.n	800b620 <dir_find+0x24a>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b50e:	330b      	adds	r3, #11
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b516:	72fb      	strb	r3, [r7, #11]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	7afa      	ldrb	r2, [r7, #11]
 800b51c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b51e:	7fbb      	ldrb	r3, [r7, #30]
 800b520:	2be5      	cmp	r3, #229	@ 0xe5
 800b522:	d007      	beq.n	800b534 <dir_find+0x15e>
 800b524:	7afb      	ldrb	r3, [r7, #11]
 800b526:	f003 0308 	and.w	r3, r3, #8
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d009      	beq.n	800b542 <dir_find+0x16c>
 800b52e:	7afb      	ldrb	r3, [r7, #11]
 800b530:	2b0f      	cmp	r3, #15
 800b532:	d006      	beq.n	800b542 <dir_find+0x16c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b534:	23ff      	movs	r3, #255	@ 0xff
 800b536:	777b      	strb	r3, [r7, #29]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f04f 32ff 	mov.w	r2, #4294967295
 800b53e:	64da      	str	r2, [r3, #76]	@ 0x4c
 800b540:	e05e      	b.n	800b600 <dir_find+0x22a>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b542:	7afb      	ldrb	r3, [r7, #11]
 800b544:	2b0f      	cmp	r3, #15
 800b546:	d136      	bne.n	800b5b6 <dir_find+0x1e0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800b54e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b552:	2b00      	cmp	r3, #0
 800b554:	d154      	bne.n	800b600 <dir_find+0x22a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b556:	7fbb      	ldrb	r3, [r7, #30]
 800b558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d00d      	beq.n	800b57c <dir_find+0x1a6>
						sum = dp->dir[LDIR_Chksum];
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b564:	7b5b      	ldrb	r3, [r3, #13]
 800b566:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b568:	7fbb      	ldrb	r3, [r7, #30]
 800b56a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b56e:	77bb      	strb	r3, [r7, #30]
 800b570:	7fbb      	ldrb	r3, [r7, #30]
 800b572:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b57c:	7fba      	ldrb	r2, [r7, #30]
 800b57e:	7f7b      	ldrb	r3, [r7, #29]
 800b580:	429a      	cmp	r2, r3
 800b582:	d115      	bne.n	800b5b0 <dir_find+0x1da>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b588:	330d      	adds	r3, #13
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	7f3a      	ldrb	r2, [r7, #28]
 800b58e:	429a      	cmp	r2, r3
 800b590:	d10e      	bne.n	800b5b0 <dir_find+0x1da>
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	68da      	ldr	r2, [r3, #12]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b59a:	4619      	mov	r1, r3
 800b59c:	4610      	mov	r0, r2
 800b59e:	f7ff fa4b 	bl	800aa38 <cmp_lfn>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d003      	beq.n	800b5b0 <dir_find+0x1da>
 800b5a8:	7f7b      	ldrb	r3, [r7, #29]
 800b5aa:	3b01      	subs	r3, #1
 800b5ac:	b2db      	uxtb	r3, r3
 800b5ae:	e000      	b.n	800b5b2 <dir_find+0x1dc>
 800b5b0:	23ff      	movs	r3, #255	@ 0xff
 800b5b2:	777b      	strb	r3, [r7, #29]
 800b5b4:	e024      	b.n	800b600 <dir_find+0x22a>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b5b6:	7f7b      	ldrb	r3, [r7, #29]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d109      	bne.n	800b5d0 <dir_find+0x1fa>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f7ff fc03 	bl	800adcc <sum_sfn>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	7f3b      	ldrb	r3, [r7, #28]
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d024      	beq.n	800b61a <dir_find+0x244>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800b5d6:	f003 0301 	and.w	r3, r3, #1
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d10a      	bne.n	800b5f4 <dir_find+0x21e>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	3340      	adds	r3, #64	@ 0x40
 800b5e6:	220b      	movs	r2, #11
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	f7fe f838 	bl	800965e <mem_cmp>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d014      	beq.n	800b61e <dir_find+0x248>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b5f4:	23ff      	movs	r3, #255	@ 0xff
 800b5f6:	777b      	strb	r3, [r7, #29]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b5fe:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b600:	2100      	movs	r1, #0
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f7ff f8a7 	bl	800a756 <dir_next>
 800b608:	4603      	mov	r3, r0
 800b60a:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800b60c:	7ffb      	ldrb	r3, [r7, #31]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	f43f af65 	beq.w	800b4de <dir_find+0x108>
 800b614:	e004      	b.n	800b620 <dir_find+0x24a>
		if (res != FR_OK) break;
 800b616:	bf00      	nop
 800b618:	e002      	b.n	800b620 <dir_find+0x24a>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b61a:	bf00      	nop
 800b61c:	e000      	b.n	800b620 <dir_find+0x24a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b61e:	bf00      	nop

	return res;
 800b620:	7ffb      	ldrb	r3, [r7, #31]
}
 800b622:	4618      	mov	r0, r3
 800b624:	3724      	adds	r7, #36	@ 0x24
 800b626:	46bd      	mov	sp, r7
 800b628:	bd90      	pop	{r4, r7, pc}
	...

0800b62c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b62c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b630:	b0a0      	sub	sp, #128	@ 0x80
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800b642:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800b646:	2b00      	cmp	r3, #0
 800b648:	d001      	beq.n	800b64e <dir_register+0x22>
 800b64a:	2306      	movs	r3, #6
 800b64c:	e18e      	b.n	800b96c <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800b64e:	2300      	movs	r3, #0
 800b650:	677b      	str	r3, [r7, #116]	@ 0x74
 800b652:	e002      	b.n	800b65a <dir_register+0x2e>
 800b654:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b656:	3301      	adds	r3, #1
 800b658:	677b      	str	r3, [r7, #116]	@ 0x74
 800b65a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b65c:	68da      	ldr	r2, [r3, #12]
 800b65e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b660:	005b      	lsls	r3, r3, #1
 800b662:	4413      	add	r3, r2
 800b664:	881b      	ldrh	r3, [r3, #0]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d1f4      	bne.n	800b654 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b66a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	2b04      	cmp	r3, #4
 800b670:	f040 809f 	bne.w	800b7b2 <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800b674:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b676:	330e      	adds	r3, #14
 800b678:	4aa2      	ldr	r2, [pc, #648]	@ (800b904 <dir_register+0x2d8>)
 800b67a:	fba2 2303 	umull	r2, r3, r2, r3
 800b67e:	08db      	lsrs	r3, r3, #3
 800b680:	3302      	adds	r3, #2
 800b682:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800b684:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f7ff f93a 	bl	800a900 <dir_alloc>
 800b68c:	4603      	mov	r3, r0
 800b68e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 800b692:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b696:	2b00      	cmp	r3, #0
 800b698:	d002      	beq.n	800b6a0 <dir_register+0x74>
 800b69a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b69e:	e165      	b.n	800b96c <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b6a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b6a6:	3b01      	subs	r3, #1
 800b6a8:	015b      	lsls	r3, r3, #5
 800b6aa:	1ad2      	subs	r2, r2, r3
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	689b      	ldr	r3, [r3, #8]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d072      	beq.n	800b79e <dir_register+0x172>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	79db      	ldrb	r3, [r3, #7]
 800b6bc:	f003 0304 	and.w	r3, r3, #4
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d06c      	beq.n	800b79e <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b6ca:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b6cc:	8949      	ldrh	r1, [r1, #10]
 800b6ce:	0249      	lsls	r1, r1, #9
 800b6d0:	2000      	movs	r0, #0
 800b6d2:	460c      	mov	r4, r1
 800b6d4:	4605      	mov	r5, r0
 800b6d6:	eb12 0804 	adds.w	r8, r2, r4
 800b6da:	eb43 0905 	adc.w	r9, r3, r5
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f7fe fd56 	bl	800a198 <fill_first_frag>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800b6f2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d002      	beq.n	800b700 <dir_register+0xd4>
 800b6fa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b6fe:	e135      	b.n	800b96c <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b706:	f04f 32ff 	mov.w	r2, #4294967295
 800b70a:	4619      	mov	r1, r3
 800b70c:	f7fe fd73 	bl	800a1f6 <fill_last_frag>
 800b710:	4603      	mov	r3, r0
 800b712:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800b716:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d002      	beq.n	800b724 <dir_register+0xf8>
 800b71e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b722:	e123      	b.n	800b96c <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800b724:	687a      	ldr	r2, [r7, #4]
 800b726:	f107 0308 	add.w	r3, r7, #8
 800b72a:	4611      	mov	r1, r2
 800b72c:	4618      	mov	r0, r3
 800b72e:	f7ff fc93 	bl	800b058 <load_obj_dir>
 800b732:	4603      	mov	r3, r0
 800b734:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800b738:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d002      	beq.n	800b746 <dir_register+0x11a>
 800b740:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b744:	e112      	b.n	800b96c <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800b746:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b748:	691b      	ldr	r3, [r3, #16]
 800b74a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b754:	4608      	mov	r0, r1
 800b756:	f7fd febe 	bl	80094d6 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800b75a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b75c:	691b      	ldr	r3, [r3, #16]
 800b75e:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b768:	4608      	mov	r0, r1
 800b76a:	f7fd feb4 	bl	80094d6 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	79da      	ldrb	r2, [r3, #7]
 800b772:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b774:	691b      	ldr	r3, [r3, #16]
 800b776:	3321      	adds	r3, #33	@ 0x21
 800b778:	f042 0201 	orr.w	r2, r2, #1
 800b77c:	b2d2      	uxtb	r2, r2
 800b77e:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800b780:	f107 0308 	add.w	r3, r7, #8
 800b784:	4618      	mov	r0, r3
 800b786:	f7ff fc9d 	bl	800b0c4 <store_xdir>
 800b78a:	4603      	mov	r3, r0
 800b78c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800b790:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b794:	2b00      	cmp	r3, #0
 800b796:	d002      	beq.n	800b79e <dir_register+0x172>
 800b798:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b79c:	e0e6      	b.n	800b96c <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800b79e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7a0:	691a      	ldr	r2, [r3, #16]
 800b7a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7a4:	68db      	ldr	r3, [r3, #12]
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	4610      	mov	r0, r2
 800b7aa:	f7ff fce6 	bl	800b17a <create_xdir>
		return FR_OK;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	e0dc      	b.n	800b96c <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800b7b8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800b7bc:	220c      	movs	r2, #12
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f7fd ff11 	bl	80095e6 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b7c4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b7c8:	f003 0301 	and.w	r3, r3, #1
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d033      	beq.n	800b838 <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2240      	movs	r2, #64	@ 0x40
 800b7d4:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 800b7d8:	2301      	movs	r3, #1
 800b7da:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b7dc:	e016      	b.n	800b80c <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800b7e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7e6:	68da      	ldr	r2, [r3, #12]
 800b7e8:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800b7ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b7ee:	f7ff fa5f 	bl	800acb0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f7ff fdef 	bl	800b3d6 <dir_find>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 800b7fe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b802:	2b00      	cmp	r3, #0
 800b804:	d106      	bne.n	800b814 <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 800b806:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b808:	3301      	adds	r3, #1
 800b80a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b80c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b80e:	2b63      	cmp	r3, #99	@ 0x63
 800b810:	d9e5      	bls.n	800b7de <dir_register+0x1b2>
 800b812:	e000      	b.n	800b816 <dir_register+0x1ea>
			if (res != FR_OK) break;
 800b814:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b816:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b818:	2b64      	cmp	r3, #100	@ 0x64
 800b81a:	d101      	bne.n	800b820 <dir_register+0x1f4>
 800b81c:	2307      	movs	r3, #7
 800b81e:	e0a5      	b.n	800b96c <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b820:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b824:	2b04      	cmp	r3, #4
 800b826:	d002      	beq.n	800b82e <dir_register+0x202>
 800b828:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b82c:	e09e      	b.n	800b96c <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b82e:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b838:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b83c:	f003 0302 	and.w	r3, r3, #2
 800b840:	2b00      	cmp	r3, #0
 800b842:	d007      	beq.n	800b854 <dir_register+0x228>
 800b844:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b846:	330c      	adds	r3, #12
 800b848:	4a2f      	ldr	r2, [pc, #188]	@ (800b908 <dir_register+0x2dc>)
 800b84a:	fba2 2303 	umull	r2, r3, r2, r3
 800b84e:	089b      	lsrs	r3, r3, #2
 800b850:	3301      	adds	r3, #1
 800b852:	e000      	b.n	800b856 <dir_register+0x22a>
 800b854:	2301      	movs	r3, #1
 800b856:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b858:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f7ff f850 	bl	800a900 <dir_alloc>
 800b860:	4603      	mov	r3, r0
 800b862:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b866:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d14f      	bne.n	800b90e <dir_register+0x2e2>
 800b86e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b870:	3b01      	subs	r3, #1
 800b872:	673b      	str	r3, [r7, #112]	@ 0x70
 800b874:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b876:	2b00      	cmp	r3, #0
 800b878:	d049      	beq.n	800b90e <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b87e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b880:	015b      	lsls	r3, r3, #5
 800b882:	1ad3      	subs	r3, r2, r3
 800b884:	4619      	mov	r1, r3
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f7fe fedf 	bl	800a64a <dir_sdi>
 800b88c:	4603      	mov	r3, r0
 800b88e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800b892:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b896:	2b00      	cmp	r3, #0
 800b898:	d139      	bne.n	800b90e <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	3340      	adds	r3, #64	@ 0x40
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f7ff fa94 	bl	800adcc <sum_sfn>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b8b2:	f7fe f8c7 	bl	8009a44 <move_window>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 800b8bc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d123      	bne.n	800b90c <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b8c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8c6:	68d8      	ldr	r0, [r3, #12]
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800b8cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b8ce:	b2da      	uxtb	r2, r3
 800b8d0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800b8d4:	f7ff f984 	bl	800abe0 <put_lfn>
				fs->wflag = 1;
 800b8d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8da:	2201      	movs	r2, #1
 800b8dc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b8de:	2100      	movs	r1, #0
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f7fe ff38 	bl	800a756 <dir_next>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --nent);
 800b8ec:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d10c      	bne.n	800b90e <dir_register+0x2e2>
 800b8f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b8f6:	3b01      	subs	r3, #1
 800b8f8:	673b      	str	r3, [r7, #112]	@ 0x70
 800b8fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d1d4      	bne.n	800b8aa <dir_register+0x27e>
 800b900:	e005      	b.n	800b90e <dir_register+0x2e2>
 800b902:	bf00      	nop
 800b904:	88888889 	.word	0x88888889
 800b908:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800b90c:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b90e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b912:	2b00      	cmp	r3, #0
 800b914:	d128      	bne.n	800b968 <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b91a:	4619      	mov	r1, r3
 800b91c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b91e:	f7fe f891 	bl	8009a44 <move_window>
 800b922:	4603      	mov	r3, r0
 800b924:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800b928:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d11b      	bne.n	800b968 <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b934:	2220      	movs	r2, #32
 800b936:	2100      	movs	r1, #0
 800b938:	4618      	mov	r0, r3
 800b93a:	f7fd fe75 	bl	8009628 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	3340      	adds	r3, #64	@ 0x40
 800b946:	220b      	movs	r2, #11
 800b948:	4619      	mov	r1, r3
 800b94a:	f7fd fe4c 	bl	80095e6 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b958:	330c      	adds	r3, #12
 800b95a:	f002 0218 	and.w	r2, r2, #24
 800b95e:	b2d2      	uxtb	r2, r2
 800b960:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b962:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b964:	2201      	movs	r2, #1
 800b966:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b968:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3780      	adds	r7, #128	@ 0x80
 800b970:	46bd      	mov	sp, r7
 800b972:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b976:	bf00      	nop

0800b978 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b08a      	sub	sp, #40	@ 0x28
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	613b      	str	r3, [r7, #16]
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	68db      	ldr	r3, [r3, #12]
 800b98e:	60fb      	str	r3, [r7, #12]
 800b990:	2300      	movs	r3, #0
 800b992:	617b      	str	r3, [r7, #20]
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b998:	69bb      	ldr	r3, [r7, #24]
 800b99a:	1c5a      	adds	r2, r3, #1
 800b99c:	61ba      	str	r2, [r7, #24]
 800b99e:	693a      	ldr	r2, [r7, #16]
 800b9a0:	4413      	add	r3, r2
 800b9a2:	781b      	ldrb	r3, [r3, #0]
 800b9a4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b9a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b9a8:	2b1f      	cmp	r3, #31
 800b9aa:	d940      	bls.n	800ba2e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b9ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b9ae:	2b2f      	cmp	r3, #47	@ 0x2f
 800b9b0:	d006      	beq.n	800b9c0 <create_name+0x48>
 800b9b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b9b4:	2b5c      	cmp	r3, #92	@ 0x5c
 800b9b6:	d110      	bne.n	800b9da <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b9b8:	e002      	b.n	800b9c0 <create_name+0x48>
 800b9ba:	69bb      	ldr	r3, [r7, #24]
 800b9bc:	3301      	adds	r3, #1
 800b9be:	61bb      	str	r3, [r7, #24]
 800b9c0:	693a      	ldr	r2, [r7, #16]
 800b9c2:	69bb      	ldr	r3, [r7, #24]
 800b9c4:	4413      	add	r3, r2
 800b9c6:	781b      	ldrb	r3, [r3, #0]
 800b9c8:	2b2f      	cmp	r3, #47	@ 0x2f
 800b9ca:	d0f6      	beq.n	800b9ba <create_name+0x42>
 800b9cc:	693a      	ldr	r2, [r7, #16]
 800b9ce:	69bb      	ldr	r3, [r7, #24]
 800b9d0:	4413      	add	r3, r2
 800b9d2:	781b      	ldrb	r3, [r3, #0]
 800b9d4:	2b5c      	cmp	r3, #92	@ 0x5c
 800b9d6:	d0f0      	beq.n	800b9ba <create_name+0x42>
			break;
 800b9d8:	e02a      	b.n	800ba30 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	2bfe      	cmp	r3, #254	@ 0xfe
 800b9de:	d901      	bls.n	800b9e4 <create_name+0x6c>
 800b9e0:	2306      	movs	r3, #6
 800b9e2:	e17d      	b.n	800bce0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b9e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b9e6:	b2db      	uxtb	r3, r3
 800b9e8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b9ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b9ec:	2101      	movs	r1, #1
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f001 fe32 	bl	800d658 <ff_convert>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b9f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d101      	bne.n	800ba02 <create_name+0x8a>
 800b9fe:	2306      	movs	r3, #6
 800ba00:	e16e      	b.n	800bce0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800ba02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba04:	2b7f      	cmp	r3, #127	@ 0x7f
 800ba06:	d809      	bhi.n	800ba1c <create_name+0xa4>
 800ba08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba0a:	4619      	mov	r1, r3
 800ba0c:	488d      	ldr	r0, [pc, #564]	@ (800bc44 <create_name+0x2cc>)
 800ba0e:	f7fd fe4d 	bl	80096ac <chk_chr>
 800ba12:	4603      	mov	r3, r0
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d001      	beq.n	800ba1c <create_name+0xa4>
 800ba18:	2306      	movs	r3, #6
 800ba1a:	e161      	b.n	800bce0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	1c5a      	adds	r2, r3, #1
 800ba20:	617a      	str	r2, [r7, #20]
 800ba22:	005b      	lsls	r3, r3, #1
 800ba24:	68fa      	ldr	r2, [r7, #12]
 800ba26:	4413      	add	r3, r2
 800ba28:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ba2a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ba2c:	e7b4      	b.n	800b998 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ba2e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ba30:	693a      	ldr	r2, [r7, #16]
 800ba32:	69bb      	ldr	r3, [r7, #24]
 800ba34:	441a      	add	r2, r3
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ba3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba3c:	2b1f      	cmp	r3, #31
 800ba3e:	d801      	bhi.n	800ba44 <create_name+0xcc>
 800ba40:	2304      	movs	r3, #4
 800ba42:	e000      	b.n	800ba46 <create_name+0xce>
 800ba44:	2300      	movs	r3, #0
 800ba46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ba4a:	e011      	b.n	800ba70 <create_name+0xf8>
		w = lfn[di - 1];
 800ba4c:	697a      	ldr	r2, [r7, #20]
 800ba4e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ba52:	4413      	add	r3, r2
 800ba54:	005b      	lsls	r3, r3, #1
 800ba56:	68fa      	ldr	r2, [r7, #12]
 800ba58:	4413      	add	r3, r2
 800ba5a:	881b      	ldrh	r3, [r3, #0]
 800ba5c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800ba5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba60:	2b20      	cmp	r3, #32
 800ba62:	d002      	beq.n	800ba6a <create_name+0xf2>
 800ba64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba66:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba68:	d106      	bne.n	800ba78 <create_name+0x100>
		di--;
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	3b01      	subs	r3, #1
 800ba6e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d1ea      	bne.n	800ba4c <create_name+0xd4>
 800ba76:	e000      	b.n	800ba7a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800ba78:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	005b      	lsls	r3, r3, #1
 800ba7e:	68fa      	ldr	r2, [r7, #12]
 800ba80:	4413      	add	r3, r2
 800ba82:	2200      	movs	r2, #0
 800ba84:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d101      	bne.n	800ba90 <create_name+0x118>
 800ba8c:	2306      	movs	r3, #6
 800ba8e:	e127      	b.n	800bce0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	3340      	adds	r3, #64	@ 0x40
 800ba94:	220b      	movs	r2, #11
 800ba96:	2120      	movs	r1, #32
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f7fd fdc5 	bl	8009628 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ba9e:	2300      	movs	r3, #0
 800baa0:	61bb      	str	r3, [r7, #24]
 800baa2:	e002      	b.n	800baaa <create_name+0x132>
 800baa4:	69bb      	ldr	r3, [r7, #24]
 800baa6:	3301      	adds	r3, #1
 800baa8:	61bb      	str	r3, [r7, #24]
 800baaa:	69bb      	ldr	r3, [r7, #24]
 800baac:	005b      	lsls	r3, r3, #1
 800baae:	68fa      	ldr	r2, [r7, #12]
 800bab0:	4413      	add	r3, r2
 800bab2:	881b      	ldrh	r3, [r3, #0]
 800bab4:	2b20      	cmp	r3, #32
 800bab6:	d0f5      	beq.n	800baa4 <create_name+0x12c>
 800bab8:	69bb      	ldr	r3, [r7, #24]
 800baba:	005b      	lsls	r3, r3, #1
 800babc:	68fa      	ldr	r2, [r7, #12]
 800babe:	4413      	add	r3, r2
 800bac0:	881b      	ldrh	r3, [r3, #0]
 800bac2:	2b2e      	cmp	r3, #46	@ 0x2e
 800bac4:	d0ee      	beq.n	800baa4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800bac6:	69bb      	ldr	r3, [r7, #24]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d009      	beq.n	800bae0 <create_name+0x168>
 800bacc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bad0:	f043 0303 	orr.w	r3, r3, #3
 800bad4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800bad8:	e002      	b.n	800bae0 <create_name+0x168>
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	3b01      	subs	r3, #1
 800bade:	617b      	str	r3, [r7, #20]
 800bae0:	697b      	ldr	r3, [r7, #20]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d009      	beq.n	800bafa <create_name+0x182>
 800bae6:	697a      	ldr	r2, [r7, #20]
 800bae8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800baec:	4413      	add	r3, r2
 800baee:	005b      	lsls	r3, r3, #1
 800baf0:	68fa      	ldr	r2, [r7, #12]
 800baf2:	4413      	add	r3, r2
 800baf4:	881b      	ldrh	r3, [r3, #0]
 800baf6:	2b2e      	cmp	r3, #46	@ 0x2e
 800baf8:	d1ef      	bne.n	800bada <create_name+0x162>

	i = b = 0; ni = 8;
 800bafa:	2300      	movs	r3, #0
 800bafc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800bb00:	2300      	movs	r3, #0
 800bb02:	623b      	str	r3, [r7, #32]
 800bb04:	2308      	movs	r3, #8
 800bb06:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800bb08:	69bb      	ldr	r3, [r7, #24]
 800bb0a:	1c5a      	adds	r2, r3, #1
 800bb0c:	61ba      	str	r2, [r7, #24]
 800bb0e:	005b      	lsls	r3, r3, #1
 800bb10:	68fa      	ldr	r2, [r7, #12]
 800bb12:	4413      	add	r3, r2
 800bb14:	881b      	ldrh	r3, [r3, #0]
 800bb16:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800bb18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	f000 8090 	beq.w	800bc40 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800bb20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bb22:	2b20      	cmp	r3, #32
 800bb24:	d006      	beq.n	800bb34 <create_name+0x1bc>
 800bb26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bb28:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb2a:	d10a      	bne.n	800bb42 <create_name+0x1ca>
 800bb2c:	69ba      	ldr	r2, [r7, #24]
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d006      	beq.n	800bb42 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800bb34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb38:	f043 0303 	orr.w	r3, r3, #3
 800bb3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bb40:	e07d      	b.n	800bc3e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800bb42:	6a3a      	ldr	r2, [r7, #32]
 800bb44:	69fb      	ldr	r3, [r7, #28]
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d203      	bcs.n	800bb52 <create_name+0x1da>
 800bb4a:	69ba      	ldr	r2, [r7, #24]
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d123      	bne.n	800bb9a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800bb52:	69fb      	ldr	r3, [r7, #28]
 800bb54:	2b0b      	cmp	r3, #11
 800bb56:	d106      	bne.n	800bb66 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800bb58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb5c:	f043 0303 	orr.w	r3, r3, #3
 800bb60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bb64:	e075      	b.n	800bc52 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800bb66:	69ba      	ldr	r2, [r7, #24]
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	429a      	cmp	r2, r3
 800bb6c:	d005      	beq.n	800bb7a <create_name+0x202>
 800bb6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb72:	f043 0303 	orr.w	r3, r3, #3
 800bb76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800bb7a:	69ba      	ldr	r2, [r7, #24]
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d866      	bhi.n	800bc50 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	61bb      	str	r3, [r7, #24]
 800bb86:	2308      	movs	r3, #8
 800bb88:	623b      	str	r3, [r7, #32]
 800bb8a:	230b      	movs	r3, #11
 800bb8c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800bb8e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bb92:	009b      	lsls	r3, r3, #2
 800bb94:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800bb98:	e051      	b.n	800bc3e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800bb9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bb9c:	2b7f      	cmp	r3, #127	@ 0x7f
 800bb9e:	d914      	bls.n	800bbca <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800bba0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bba2:	2100      	movs	r1, #0
 800bba4:	4618      	mov	r0, r3
 800bba6:	f001 fd57 	bl	800d658 <ff_convert>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800bbae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d004      	beq.n	800bbbe <create_name+0x246>
 800bbb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bbb6:	3b80      	subs	r3, #128	@ 0x80
 800bbb8:	4a23      	ldr	r2, [pc, #140]	@ (800bc48 <create_name+0x2d0>)
 800bbba:	5cd3      	ldrb	r3, [r2, r3]
 800bbbc:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800bbbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bbc2:	f043 0302 	orr.w	r3, r3, #2
 800bbc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800bbca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d007      	beq.n	800bbe0 <create_name+0x268>
 800bbd0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bbd2:	4619      	mov	r1, r3
 800bbd4:	481d      	ldr	r0, [pc, #116]	@ (800bc4c <create_name+0x2d4>)
 800bbd6:	f7fd fd69 	bl	80096ac <chk_chr>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d008      	beq.n	800bbf2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800bbe0:	235f      	movs	r3, #95	@ 0x5f
 800bbe2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800bbe4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bbe8:	f043 0303 	orr.w	r3, r3, #3
 800bbec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bbf0:	e01b      	b.n	800bc2a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800bbf2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bbf4:	2b40      	cmp	r3, #64	@ 0x40
 800bbf6:	d909      	bls.n	800bc0c <create_name+0x294>
 800bbf8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bbfa:	2b5a      	cmp	r3, #90	@ 0x5a
 800bbfc:	d806      	bhi.n	800bc0c <create_name+0x294>
					b |= 2;
 800bbfe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bc02:	f043 0302 	orr.w	r3, r3, #2
 800bc06:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800bc0a:	e00e      	b.n	800bc2a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800bc0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bc0e:	2b60      	cmp	r3, #96	@ 0x60
 800bc10:	d90b      	bls.n	800bc2a <create_name+0x2b2>
 800bc12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bc14:	2b7a      	cmp	r3, #122	@ 0x7a
 800bc16:	d808      	bhi.n	800bc2a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800bc18:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bc1c:	f043 0301 	orr.w	r3, r3, #1
 800bc20:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800bc24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bc26:	3b20      	subs	r3, #32
 800bc28:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800bc2a:	6a3b      	ldr	r3, [r7, #32]
 800bc2c:	1c5a      	adds	r2, r3, #1
 800bc2e:	623a      	str	r2, [r7, #32]
 800bc30:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800bc32:	b2d1      	uxtb	r1, r2
 800bc34:	687a      	ldr	r2, [r7, #4]
 800bc36:	4413      	add	r3, r2
 800bc38:	460a      	mov	r2, r1
 800bc3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		w = lfn[si++];					/* Get an LFN character */
 800bc3e:	e763      	b.n	800bb08 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800bc40:	bf00      	nop
 800bc42:	e006      	b.n	800bc52 <create_name+0x2da>
 800bc44:	08012da0 	.word	0x08012da0
 800bc48:	08012e04 	.word	0x08012e04
 800bc4c:	08012dac 	.word	0x08012dac
			if (si > di) break;			/* No extension */
 800bc50:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bc58:	2be5      	cmp	r3, #229	@ 0xe5
 800bc5a:	d103      	bne.n	800bc64 <create_name+0x2ec>
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2205      	movs	r2, #5
 800bc60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;
 800bc64:	69fb      	ldr	r3, [r7, #28]
 800bc66:	2b08      	cmp	r3, #8
 800bc68:	d104      	bne.n	800bc74 <create_name+0x2fc>
 800bc6a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bc6e:	009b      	lsls	r3, r3, #2
 800bc70:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800bc74:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bc78:	f003 030c 	and.w	r3, r3, #12
 800bc7c:	2b0c      	cmp	r3, #12
 800bc7e:	d005      	beq.n	800bc8c <create_name+0x314>
 800bc80:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bc84:	f003 0303 	and.w	r3, r3, #3
 800bc88:	2b03      	cmp	r3, #3
 800bc8a:	d105      	bne.n	800bc98 <create_name+0x320>
 800bc8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc90:	f043 0302 	orr.w	r3, r3, #2
 800bc94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800bc98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc9c:	f003 0302 	and.w	r3, r3, #2
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d117      	bne.n	800bcd4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800bca4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bca8:	f003 0303 	and.w	r3, r3, #3
 800bcac:	2b01      	cmp	r3, #1
 800bcae:	d105      	bne.n	800bcbc <create_name+0x344>
 800bcb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bcb4:	f043 0310 	orr.w	r3, r3, #16
 800bcb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800bcbc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bcc0:	f003 030c 	and.w	r3, r3, #12
 800bcc4:	2b04      	cmp	r3, #4
 800bcc6:	d105      	bne.n	800bcd4 <create_name+0x35c>
 800bcc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bccc:	f043 0308 	orr.w	r3, r3, #8
 800bcd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bcda:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 800bcde:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3728      	adds	r7, #40	@ 0x28
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}

0800bce8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b086      	sub	sp, #24
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bcfc:	e002      	b.n	800bd04 <follow_path+0x1c>
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	3301      	adds	r3, #1
 800bd02:	603b      	str	r3, [r7, #0]
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	781b      	ldrb	r3, [r3, #0]
 800bd08:	2b2f      	cmp	r3, #47	@ 0x2f
 800bd0a:	d0f8      	beq.n	800bcfe <follow_path+0x16>
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	781b      	ldrb	r3, [r3, #0]
 800bd10:	2b5c      	cmp	r3, #92	@ 0x5c
 800bd12:	d0f4      	beq.n	800bcfe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	2200      	movs	r2, #0
 800bd18:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	781b      	ldrb	r3, [r3, #0]
 800bd24:	2b1f      	cmp	r3, #31
 800bd26:	d80a      	bhi.n	800bd3e <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2280      	movs	r2, #128	@ 0x80
 800bd2c:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 800bd30:	2100      	movs	r1, #0
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f7fe fc89 	bl	800a64a <dir_sdi>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	75fb      	strb	r3, [r7, #23]
 800bd3c:	e078      	b.n	800be30 <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bd3e:	463b      	mov	r3, r7
 800bd40:	4619      	mov	r1, r3
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f7ff fe18 	bl	800b978 <create_name>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bd4c:	7dfb      	ldrb	r3, [r7, #23]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d169      	bne.n	800be26 <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f7ff fb3f 	bl	800b3d6 <dir_find>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800bd62:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bd64:	7dfb      	ldrb	r3, [r7, #23]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d00a      	beq.n	800bd80 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bd6a:	7dfb      	ldrb	r3, [r7, #23]
 800bd6c:	2b04      	cmp	r3, #4
 800bd6e:	d15c      	bne.n	800be2a <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bd70:	7afb      	ldrb	r3, [r7, #11]
 800bd72:	f003 0304 	and.w	r3, r3, #4
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d157      	bne.n	800be2a <follow_path+0x142>
 800bd7a:	2305      	movs	r3, #5
 800bd7c:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bd7e:	e054      	b.n	800be2a <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bd80:	7afb      	ldrb	r3, [r7, #11]
 800bd82:	f003 0304 	and.w	r3, r3, #4
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d151      	bne.n	800be2e <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	799b      	ldrb	r3, [r3, #6]
 800bd8e:	f003 0310 	and.w	r3, r3, #16
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d102      	bne.n	800bd9c <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800bd96:	2305      	movs	r3, #5
 800bd98:	75fb      	strb	r3, [r7, #23]
 800bd9a:	e049      	b.n	800be30 <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	781b      	ldrb	r3, [r3, #0]
 800bda0:	2b04      	cmp	r3, #4
 800bda2:	d130      	bne.n	800be06 <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	689a      	ldr	r2, [r3, #8]
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800bdb2:	4613      	mov	r3, r2
 800bdb4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800bdb8:	693a      	ldr	r2, [r7, #16]
 800bdba:	79d2      	ldrb	r2, [r2, #7]
 800bdbc:	431a      	orrs	r2, r3
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	625a      	str	r2, [r3, #36]	@ 0x24
				obj->c_ofs = dp->blk_ofs;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	629a      	str	r2, [r3, #40]	@ 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	691b      	ldr	r3, [r3, #16]
 800bdce:	3334      	adds	r3, #52	@ 0x34
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7fd fa3b 	bl	800924c <ld_dword>
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	691b      	ldr	r3, [r3, #16]
 800bde0:	3321      	adds	r3, #33	@ 0x21
 800bde2:	781b      	ldrb	r3, [r3, #0]
 800bde4:	f003 0302 	and.w	r3, r3, #2
 800bde8:	b2da      	uxtb	r2, r3
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	691b      	ldr	r3, [r3, #16]
 800bdf2:	3338      	adds	r3, #56	@ 0x38
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f7fd fa4c 	bl	8009292 <ld_qword>
 800bdfa:	4602      	mov	r2, r0
 800bdfc:	460b      	mov	r3, r1
 800bdfe:	6939      	ldr	r1, [r7, #16]
 800be00:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800be04:	e79b      	b.n	800bd3e <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be14:	4413      	add	r3, r2
 800be16:	4619      	mov	r1, r3
 800be18:	68f8      	ldr	r0, [r7, #12]
 800be1a:	f7fe fdcd 	bl	800a9b8 <ld_clust>
 800be1e:	4602      	mov	r2, r0
 800be20:	693b      	ldr	r3, [r7, #16]
 800be22:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800be24:	e78b      	b.n	800bd3e <follow_path+0x56>
			if (res != FR_OK) break;
 800be26:	bf00      	nop
 800be28:	e002      	b.n	800be30 <follow_path+0x148>
				break;
 800be2a:	bf00      	nop
 800be2c:	e000      	b.n	800be30 <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800be2e:	bf00      	nop
			}
		}
	}

	return res;
 800be30:	7dfb      	ldrb	r3, [r7, #23]
}
 800be32:	4618      	mov	r0, r3
 800be34:	3718      	adds	r7, #24
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}

0800be3a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800be3a:	b480      	push	{r7}
 800be3c:	b087      	sub	sp, #28
 800be3e:	af00      	add	r7, sp, #0
 800be40:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800be42:	f04f 33ff 	mov.w	r3, #4294967295
 800be46:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d031      	beq.n	800beb4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	617b      	str	r3, [r7, #20]
 800be56:	e002      	b.n	800be5e <get_ldnumber+0x24>
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	3301      	adds	r3, #1
 800be5c:	617b      	str	r3, [r7, #20]
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	2b1f      	cmp	r3, #31
 800be64:	d903      	bls.n	800be6e <get_ldnumber+0x34>
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	781b      	ldrb	r3, [r3, #0]
 800be6a:	2b3a      	cmp	r3, #58	@ 0x3a
 800be6c:	d1f4      	bne.n	800be58 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	781b      	ldrb	r3, [r3, #0]
 800be72:	2b3a      	cmp	r3, #58	@ 0x3a
 800be74:	d11c      	bne.n	800beb0 <get_ldnumber+0x76>
			tp = *path;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	1c5a      	adds	r2, r3, #1
 800be80:	60fa      	str	r2, [r7, #12]
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	3b30      	subs	r3, #48	@ 0x30
 800be86:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	2b09      	cmp	r3, #9
 800be8c:	d80e      	bhi.n	800beac <get_ldnumber+0x72>
 800be8e:	68fa      	ldr	r2, [r7, #12]
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	429a      	cmp	r2, r3
 800be94:	d10a      	bne.n	800beac <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d107      	bne.n	800beac <get_ldnumber+0x72>
					vol = (int)i;
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	3301      	adds	r3, #1
 800bea4:	617b      	str	r3, [r7, #20]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	697a      	ldr	r2, [r7, #20]
 800beaa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	e002      	b.n	800beb6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800beb0:	2300      	movs	r3, #0
 800beb2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800beb4:	693b      	ldr	r3, [r7, #16]
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	371c      	adds	r7, #28
 800beba:	46bd      	mov	sp, r7
 800bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec0:	4770      	bx	lr
	...

0800bec4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b082      	sub	sp, #8
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2200      	movs	r2, #0
 800bed2:	70da      	strb	r2, [r3, #3]
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f04f 32ff 	mov.w	r2, #4294967295
 800beda:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bedc:	6839      	ldr	r1, [r7, #0]
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f7fd fdb0 	bl	8009a44 <move_window>
 800bee4:	4603      	mov	r3, r0
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d001      	beq.n	800beee <check_fs+0x2a>
 800beea:	2304      	movs	r3, #4
 800beec:	e044      	b.n	800bf78 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	3338      	adds	r3, #56	@ 0x38
 800bef2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7fd f990 	bl	800921c <ld_word>
 800befc:	4603      	mov	r3, r0
 800befe:	461a      	mov	r2, r3
 800bf00:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d001      	beq.n	800bf0c <check_fs+0x48>
 800bf08:	2303      	movs	r3, #3
 800bf0a:	e035      	b.n	800bf78 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800bf12:	2be9      	cmp	r3, #233	@ 0xe9
 800bf14:	d009      	beq.n	800bf2a <check_fs+0x66>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800bf1c:	2beb      	cmp	r3, #235	@ 0xeb
 800bf1e:	d11e      	bne.n	800bf5e <check_fs+0x9a>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800bf26:	2b90      	cmp	r3, #144	@ 0x90
 800bf28:	d119      	bne.n	800bf5e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	3338      	adds	r3, #56	@ 0x38
 800bf2e:	3336      	adds	r3, #54	@ 0x36
 800bf30:	4618      	mov	r0, r3
 800bf32:	f7fd f98b 	bl	800924c <ld_dword>
 800bf36:	4603      	mov	r3, r0
 800bf38:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800bf3c:	4a10      	ldr	r2, [pc, #64]	@ (800bf80 <check_fs+0xbc>)
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	d101      	bne.n	800bf46 <check_fs+0x82>
 800bf42:	2300      	movs	r3, #0
 800bf44:	e018      	b.n	800bf78 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	3338      	adds	r3, #56	@ 0x38
 800bf4a:	3352      	adds	r3, #82	@ 0x52
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f7fd f97d 	bl	800924c <ld_dword>
 800bf52:	4603      	mov	r3, r0
 800bf54:	4a0b      	ldr	r2, [pc, #44]	@ (800bf84 <check_fs+0xc0>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d101      	bne.n	800bf5e <check_fs+0x9a>
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	e00c      	b.n	800bf78 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	3338      	adds	r3, #56	@ 0x38
 800bf62:	220b      	movs	r2, #11
 800bf64:	4908      	ldr	r1, [pc, #32]	@ (800bf88 <check_fs+0xc4>)
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7fd fb79 	bl	800965e <mem_cmp>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d101      	bne.n	800bf76 <check_fs+0xb2>
 800bf72:	2301      	movs	r3, #1
 800bf74:	e000      	b.n	800bf78 <check_fs+0xb4>
#endif
	return 2;
 800bf76:	2302      	movs	r3, #2
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3708      	adds	r7, #8
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}
 800bf80:	00544146 	.word	0x00544146
 800bf84:	33544146 	.word	0x33544146
 800bf88:	08012db4 	.word	0x08012db4

0800bf8c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bf8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bf90:	b09c      	sub	sp, #112	@ 0x70
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	61f8      	str	r0, [r7, #28]
 800bf96:	61b9      	str	r1, [r7, #24]
 800bf98:	4613      	mov	r3, r2
 800bf9a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bf9c:	69bb      	ldr	r3, [r7, #24]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bfa2:	69f8      	ldr	r0, [r7, #28]
 800bfa4:	f7ff ff49 	bl	800be3a <get_ldnumber>
 800bfa8:	6578      	str	r0, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800bfaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	da01      	bge.n	800bfb4 <find_volume+0x28>
 800bfb0:	230b      	movs	r3, #11
 800bfb2:	e337      	b.n	800c624 <find_volume+0x698>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bfb4:	4a99      	ldr	r2, [pc, #612]	@ (800c21c <find_volume+0x290>)
 800bfb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bfb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfbc:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bfbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d101      	bne.n	800bfc8 <find_volume+0x3c>
 800bfc4:	230c      	movs	r3, #12
 800bfc6:	e32d      	b.n	800c624 <find_volume+0x698>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bfc8:	69bb      	ldr	r3, [r7, #24]
 800bfca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bfcc:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bfce:	7dfb      	ldrb	r3, [r7, #23]
 800bfd0:	f023 0301 	bic.w	r3, r3, #1
 800bfd4:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bfd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfd8:	781b      	ldrb	r3, [r3, #0]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d01a      	beq.n	800c014 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800bfde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfe0:	785b      	ldrb	r3, [r3, #1]
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f7fd f85e 	bl	80090a4 <disk_status>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bfee:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800bff2:	f003 0301 	and.w	r3, r3, #1
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d10c      	bne.n	800c014 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bffa:	7dfb      	ldrb	r3, [r7, #23]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d007      	beq.n	800c010 <find_volume+0x84>
 800c000:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800c004:	f003 0304 	and.w	r3, r3, #4
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d001      	beq.n	800c010 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800c00c:	230a      	movs	r3, #10
 800c00e:	e309      	b.n	800c624 <find_volume+0x698>
			}
			return FR_OK;				/* The file system object is valid */
 800c010:	2300      	movs	r3, #0
 800c012:	e307      	b.n	800c624 <find_volume+0x698>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c014:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c016:	2200      	movs	r2, #0
 800c018:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c01a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c01c:	b2da      	uxtb	r2, r3
 800c01e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c020:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c022:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c024:	785b      	ldrb	r3, [r3, #1]
 800c026:	4618      	mov	r0, r3
 800c028:	f7fd f84d 	bl	80090c6 <disk_initialize>
 800c02c:	4603      	mov	r3, r0
 800c02e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c032:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800c036:	f003 0301 	and.w	r3, r3, #1
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d001      	beq.n	800c042 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c03e:	2303      	movs	r3, #3
 800c040:	e2f0      	b.n	800c624 <find_volume+0x698>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c042:	7dfb      	ldrb	r3, [r7, #23]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d007      	beq.n	800c058 <find_volume+0xcc>
 800c048:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800c04c:	f003 0304 	and.w	r3, r3, #4
 800c050:	2b00      	cmp	r3, #0
 800c052:	d001      	beq.n	800c058 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800c054:	230a      	movs	r3, #10
 800c056:	e2e5      	b.n	800c624 <find_volume+0x698>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c058:	2300      	movs	r3, #0
 800c05a:	66bb      	str	r3, [r7, #104]	@ 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c05c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c05e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800c060:	f7ff ff30 	bl	800bec4 <check_fs>
 800c064:	4603      	mov	r3, r0
 800c066:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c06a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800c06e:	2b02      	cmp	r3, #2
 800c070:	d14d      	bne.n	800c10e <find_volume+0x182>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c072:	2300      	movs	r3, #0
 800c074:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c076:	e020      	b.n	800c0ba <find_volume+0x12e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c078:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c07a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800c07e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c080:	011b      	lsls	r3, r3, #4
 800c082:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800c086:	4413      	add	r3, r2
 800c088:	64bb      	str	r3, [r7, #72]	@ 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c08a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c08c:	3304      	adds	r3, #4
 800c08e:	781b      	ldrb	r3, [r3, #0]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d006      	beq.n	800c0a2 <find_volume+0x116>
 800c094:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c096:	3308      	adds	r3, #8
 800c098:	4618      	mov	r0, r3
 800c09a:	f7fd f8d7 	bl	800924c <ld_dword>
 800c09e:	4602      	mov	r2, r0
 800c0a0:	e000      	b.n	800c0a4 <find_volume+0x118>
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	3360      	adds	r3, #96	@ 0x60
 800c0aa:	f107 0110 	add.w	r1, r7, #16
 800c0ae:	440b      	add	r3, r1
 800c0b0:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c0b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c0b6:	3301      	adds	r3, #1
 800c0b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c0ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c0bc:	2b03      	cmp	r3, #3
 800c0be:	d9db      	bls.n	800c078 <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (i) i--;
 800c0c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d002      	beq.n	800c0d0 <find_volume+0x144>
 800c0ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c0cc:	3b01      	subs	r3, #1
 800c0ce:	65bb      	str	r3, [r7, #88]	@ 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c0d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c0d2:	009b      	lsls	r3, r3, #2
 800c0d4:	3360      	adds	r3, #96	@ 0x60
 800c0d6:	f107 0210 	add.w	r2, r7, #16
 800c0da:	4413      	add	r3, r2
 800c0dc:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800c0e0:	66bb      	str	r3, [r7, #104]	@ 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c0e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d005      	beq.n	800c0f4 <find_volume+0x168>
 800c0e8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c0ea:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800c0ec:	f7ff feea 	bl	800bec4 <check_fs>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	e000      	b.n	800c0f6 <find_volume+0x16a>
 800c0f4:	2303      	movs	r3, #3
 800c0f6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c0fa:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800c0fe:	2b01      	cmp	r3, #1
 800c100:	d905      	bls.n	800c10e <find_volume+0x182>
 800c102:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c104:	3301      	adds	r3, #1
 800c106:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c108:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c10a:	2b03      	cmp	r3, #3
 800c10c:	d9e0      	bls.n	800c0d0 <find_volume+0x144>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c10e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800c112:	2b04      	cmp	r3, #4
 800c114:	d101      	bne.n	800c11a <find_volume+0x18e>
 800c116:	2301      	movs	r3, #1
 800c118:	e284      	b.n	800c624 <find_volume+0x698>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c11a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800c11e:	2b01      	cmp	r3, #1
 800c120:	d901      	bls.n	800c126 <find_volume+0x19a>
 800c122:	230d      	movs	r3, #13
 800c124:	e27e      	b.n	800c624 <find_volume+0x698>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800c126:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800c12a:	2b01      	cmp	r3, #1
 800c12c:	f040 80fa 	bne.w	800c324 <find_volume+0x398>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800c130:	230b      	movs	r3, #11
 800c132:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c134:	e002      	b.n	800c13c <find_volume+0x1b0>
 800c136:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c138:	3301      	adds	r3, #1
 800c13a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c13c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c13e:	2b3f      	cmp	r3, #63	@ 0x3f
 800c140:	d806      	bhi.n	800c150 <find_volume+0x1c4>
 800c142:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c144:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c146:	4413      	add	r3, r2
 800c148:	3338      	adds	r3, #56	@ 0x38
 800c14a:	781b      	ldrb	r3, [r3, #0]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d0f2      	beq.n	800c136 <find_volume+0x1aa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800c150:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c152:	2b3f      	cmp	r3, #63	@ 0x3f
 800c154:	d801      	bhi.n	800c15a <find_volume+0x1ce>
 800c156:	230d      	movs	r3, #13
 800c158:	e264      	b.n	800c624 <find_volume+0x698>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800c15a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c15c:	3338      	adds	r3, #56	@ 0x38
 800c15e:	3368      	adds	r3, #104	@ 0x68
 800c160:	4618      	mov	r0, r3
 800c162:	f7fd f85b 	bl	800921c <ld_word>
 800c166:	4603      	mov	r3, r0
 800c168:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c16c:	d001      	beq.n	800c172 <find_volume+0x1e6>
 800c16e:	230d      	movs	r3, #13
 800c170:	e258      	b.n	800c624 <find_volume+0x698>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800c172:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c174:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800c178:	2b09      	cmp	r3, #9
 800c17a:	d001      	beq.n	800c180 <find_volume+0x1f4>
			return FR_NO_FILESYSTEM;
 800c17c:	230d      	movs	r3, #13
 800c17e:	e251      	b.n	800c624 <find_volume+0x698>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800c180:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c182:	3338      	adds	r3, #56	@ 0x38
 800c184:	3348      	adds	r3, #72	@ 0x48
 800c186:	4618      	mov	r0, r3
 800c188:	f7fd f883 	bl	8009292 <ld_qword>
 800c18c:	4602      	mov	r2, r0
 800c18e:	460b      	mov	r3, r1
 800c190:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c192:	2000      	movs	r0, #0
 800c194:	60b9      	str	r1, [r7, #8]
 800c196:	60f8      	str	r0, [r7, #12]
 800c198:	68b9      	ldr	r1, [r7, #8]
 800c19a:	1851      	adds	r1, r2, r1
 800c19c:	6039      	str	r1, [r7, #0]
 800c19e:	68f9      	ldr	r1, [r7, #12]
 800c1a0:	eb43 0101 	adc.w	r1, r3, r1
 800c1a4:	6079      	str	r1, [r7, #4]
 800c1a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1aa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800c1ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800c1b2:	2b01      	cmp	r3, #1
 800c1b4:	d301      	bcc.n	800c1ba <find_volume+0x22e>
 800c1b6:	230d      	movs	r3, #13
 800c1b8:	e234      	b.n	800c624 <find_volume+0x698>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800c1ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1bc:	3338      	adds	r3, #56	@ 0x38
 800c1be:	3354      	adds	r3, #84	@ 0x54
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f7fd f843 	bl	800924c <ld_dword>
 800c1c6:	4602      	mov	r2, r0
 800c1c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1ca:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800c1cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1ce:	f893 20a6 	ldrb.w	r2, [r3, #166]	@ 0xa6
 800c1d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1d4:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800c1d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1d8:	789b      	ldrb	r3, [r3, #2]
 800c1da:	2b01      	cmp	r3, #1
 800c1dc:	d001      	beq.n	800c1e2 <find_volume+0x256>
 800c1de:	230d      	movs	r3, #13
 800c1e0:	e220      	b.n	800c624 <find_volume+0x698>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800c1e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1e4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	4093      	lsls	r3, r2
 800c1ee:	b29a      	uxth	r2, r3
 800c1f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1f2:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800c1f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1f6:	895b      	ldrh	r3, [r3, #10]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d101      	bne.n	800c200 <find_volume+0x274>
 800c1fc:	230d      	movs	r3, #13
 800c1fe:	e211      	b.n	800c624 <find_volume+0x698>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800c200:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c202:	3338      	adds	r3, #56	@ 0x38
 800c204:	335c      	adds	r3, #92	@ 0x5c
 800c206:	4618      	mov	r0, r3
 800c208:	f7fd f820 	bl	800924c <ld_dword>
 800c20c:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800c20e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c210:	4a03      	ldr	r2, [pc, #12]	@ (800c220 <find_volume+0x294>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d906      	bls.n	800c224 <find_volume+0x298>
 800c216:	230d      	movs	r3, #13
 800c218:	e204      	b.n	800c624 <find_volume+0x698>
 800c21a:	bf00      	nop
 800c21c:	20003700 	.word	0x20003700
 800c220:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800c224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c226:	1c9a      	adds	r2, r3, #2
 800c228:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c22a:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800c22c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c22e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c230:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800c232:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c234:	3338      	adds	r3, #56	@ 0x38
 800c236:	3358      	adds	r3, #88	@ 0x58
 800c238:	4618      	mov	r0, r3
 800c23a:	f7fd f807 	bl	800924c <ld_dword>
 800c23e:	4602      	mov	r2, r0
 800c240:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c242:	441a      	add	r2, r3
 800c244:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c246:	631a      	str	r2, [r3, #48]	@ 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800c248:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c24a:	3338      	adds	r3, #56	@ 0x38
 800c24c:	3350      	adds	r3, #80	@ 0x50
 800c24e:	4618      	mov	r0, r3
 800c250:	f7fc fffc 	bl	800924c <ld_dword>
 800c254:	4602      	mov	r2, r0
 800c256:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c258:	441a      	add	r2, r3
 800c25a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c25c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800c25e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c262:	2200      	movs	r2, #0
 800c264:	469a      	mov	sl, r3
 800c266:	4693      	mov	fp, r2
 800c268:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c26a:	895b      	ldrh	r3, [r3, #10]
 800c26c:	461a      	mov	r2, r3
 800c26e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c270:	fb02 f303 	mul.w	r3, r2, r3
 800c274:	2200      	movs	r2, #0
 800c276:	4698      	mov	r8, r3
 800c278:	4691      	mov	r9, r2
 800c27a:	eb1a 0408 	adds.w	r4, sl, r8
 800c27e:	eb4b 0509 	adc.w	r5, fp, r9
 800c282:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800c286:	42a2      	cmp	r2, r4
 800c288:	41ab      	sbcs	r3, r5
 800c28a:	d201      	bcs.n	800c290 <find_volume+0x304>
 800c28c:	230d      	movs	r3, #13
 800c28e:	e1c9      	b.n	800c624 <find_volume+0x698>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800c290:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c292:	3338      	adds	r3, #56	@ 0x38
 800c294:	3360      	adds	r3, #96	@ 0x60
 800c296:	4618      	mov	r0, r3
 800c298:	f7fc ffd8 	bl	800924c <ld_dword>
 800c29c:	4602      	mov	r2, r0
 800c29e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2a0:	62da      	str	r2, [r3, #44]	@ 0x2c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800c2a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2a6:	4619      	mov	r1, r3
 800c2a8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800c2aa:	f7fd fc67 	bl	8009b7c <clust2sect>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800c2b4:	f7fd fbc6 	bl	8009a44 <move_window>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d001      	beq.n	800c2c2 <find_volume+0x336>
 800c2be:	2301      	movs	r3, #1
 800c2c0:	e1b0      	b.n	800c624 <find_volume+0x698>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c2c6:	e015      	b.n	800c2f4 <find_volume+0x368>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800c2c8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c2ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c2cc:	4413      	add	r3, r2
 800c2ce:	3338      	adds	r3, #56	@ 0x38
 800c2d0:	781b      	ldrb	r3, [r3, #0]
 800c2d2:	2b81      	cmp	r3, #129	@ 0x81
 800c2d4:	d10b      	bne.n	800c2ee <find_volume+0x362>
 800c2d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2d8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800c2dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c2de:	3314      	adds	r3, #20
 800c2e0:	4413      	add	r3, r2
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7fc ffb2 	bl	800924c <ld_dword>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	2b02      	cmp	r3, #2
 800c2ec:	d007      	beq.n	800c2fe <find_volume+0x372>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800c2ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c2f0:	3320      	adds	r3, #32
 800c2f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c2f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c2f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c2fa:	d3e5      	bcc.n	800c2c8 <find_volume+0x33c>
 800c2fc:	e000      	b.n	800c300 <find_volume+0x374>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800c2fe:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800c300:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c302:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c306:	d101      	bne.n	800c30c <find_volume+0x380>
 800c308:	230d      	movs	r3, #13
 800c30a:	e18b      	b.n	800c624 <find_volume+0x698>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c30c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c30e:	f04f 32ff 	mov.w	r2, #4294967295
 800c312:	619a      	str	r2, [r3, #24]
 800c314:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c316:	699a      	ldr	r2, [r3, #24]
 800c318:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c31a:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800c31c:	2304      	movs	r3, #4
 800c31e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800c322:	e167      	b.n	800c5f4 <find_volume+0x668>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c324:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c326:	3338      	adds	r3, #56	@ 0x38
 800c328:	330b      	adds	r3, #11
 800c32a:	4618      	mov	r0, r3
 800c32c:	f7fc ff76 	bl	800921c <ld_word>
 800c330:	4603      	mov	r3, r0
 800c332:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c336:	d001      	beq.n	800c33c <find_volume+0x3b0>
 800c338:	230d      	movs	r3, #13
 800c33a:	e173      	b.n	800c624 <find_volume+0x698>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c33c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c33e:	3338      	adds	r3, #56	@ 0x38
 800c340:	3316      	adds	r3, #22
 800c342:	4618      	mov	r0, r3
 800c344:	f7fc ff6a 	bl	800921c <ld_word>
 800c348:	4603      	mov	r3, r0
 800c34a:	667b      	str	r3, [r7, #100]	@ 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c34c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d106      	bne.n	800c360 <find_volume+0x3d4>
 800c352:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c354:	3338      	adds	r3, #56	@ 0x38
 800c356:	3324      	adds	r3, #36	@ 0x24
 800c358:	4618      	mov	r0, r3
 800c35a:	f7fc ff77 	bl	800924c <ld_dword>
 800c35e:	6678      	str	r0, [r7, #100]	@ 0x64
		fs->fsize = fasize;
 800c360:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c362:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c364:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c366:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c368:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800c36c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c36e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c370:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c372:	789b      	ldrb	r3, [r3, #2]
 800c374:	2b01      	cmp	r3, #1
 800c376:	d005      	beq.n	800c384 <find_volume+0x3f8>
 800c378:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c37a:	789b      	ldrb	r3, [r3, #2]
 800c37c:	2b02      	cmp	r3, #2
 800c37e:	d001      	beq.n	800c384 <find_volume+0x3f8>
 800c380:	230d      	movs	r3, #13
 800c382:	e14f      	b.n	800c624 <find_volume+0x698>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c384:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c386:	789b      	ldrb	r3, [r3, #2]
 800c388:	461a      	mov	r2, r3
 800c38a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c38c:	fb02 f303 	mul.w	r3, r2, r3
 800c390:	667b      	str	r3, [r7, #100]	@ 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c392:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c394:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c398:	461a      	mov	r2, r3
 800c39a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c39c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c39e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3a0:	895b      	ldrh	r3, [r3, #10]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d008      	beq.n	800c3b8 <find_volume+0x42c>
 800c3a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3a8:	895b      	ldrh	r3, [r3, #10]
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3ae:	895b      	ldrh	r3, [r3, #10]
 800c3b0:	3b01      	subs	r3, #1
 800c3b2:	4013      	ands	r3, r2
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d001      	beq.n	800c3bc <find_volume+0x430>
 800c3b8:	230d      	movs	r3, #13
 800c3ba:	e133      	b.n	800c624 <find_volume+0x698>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c3bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3be:	3338      	adds	r3, #56	@ 0x38
 800c3c0:	3311      	adds	r3, #17
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7fc ff2a 	bl	800921c <ld_word>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	461a      	mov	r2, r3
 800c3cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3ce:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c3d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3d2:	891b      	ldrh	r3, [r3, #8]
 800c3d4:	f003 030f 	and.w	r3, r3, #15
 800c3d8:	b29b      	uxth	r3, r3
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d001      	beq.n	800c3e2 <find_volume+0x456>
 800c3de:	230d      	movs	r3, #13
 800c3e0:	e120      	b.n	800c624 <find_volume+0x698>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c3e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3e4:	3338      	adds	r3, #56	@ 0x38
 800c3e6:	3313      	adds	r3, #19
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f7fc ff17 	bl	800921c <ld_word>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	663b      	str	r3, [r7, #96]	@ 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c3f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d106      	bne.n	800c406 <find_volume+0x47a>
 800c3f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3fa:	3338      	adds	r3, #56	@ 0x38
 800c3fc:	3320      	adds	r3, #32
 800c3fe:	4618      	mov	r0, r3
 800c400:	f7fc ff24 	bl	800924c <ld_dword>
 800c404:	6638      	str	r0, [r7, #96]	@ 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c406:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c408:	3338      	adds	r3, #56	@ 0x38
 800c40a:	330e      	adds	r3, #14
 800c40c:	4618      	mov	r0, r3
 800c40e:	f7fc ff05 	bl	800921c <ld_word>
 800c412:	4603      	mov	r3, r0
 800c414:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c418:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d101      	bne.n	800c424 <find_volume+0x498>
 800c420:	230d      	movs	r3, #13
 800c422:	e0ff      	b.n	800c624 <find_volume+0x698>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c424:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800c428:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c42a:	4413      	add	r3, r2
 800c42c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c42e:	8912      	ldrh	r2, [r2, #8]
 800c430:	0912      	lsrs	r2, r2, #4
 800c432:	b292      	uxth	r2, r2
 800c434:	4413      	add	r3, r2
 800c436:	643b      	str	r3, [r7, #64]	@ 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c438:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c43a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d201      	bcs.n	800c444 <find_volume+0x4b8>
 800c440:	230d      	movs	r3, #13
 800c442:	e0ef      	b.n	800c624 <find_volume+0x698>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c444:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c446:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c448:	1ad3      	subs	r3, r2, r3
 800c44a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c44c:	8952      	ldrh	r2, [r2, #10]
 800c44e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c452:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c456:	2b00      	cmp	r3, #0
 800c458:	d101      	bne.n	800c45e <find_volume+0x4d2>
 800c45a:	230d      	movs	r3, #13
 800c45c:	e0e2      	b.n	800c624 <find_volume+0x698>
		fmt = FS_FAT32;
 800c45e:	2303      	movs	r3, #3
 800c460:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c464:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c466:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d802      	bhi.n	800c474 <find_volume+0x4e8>
 800c46e:	2302      	movs	r3, #2
 800c470:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c476:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d802      	bhi.n	800c484 <find_volume+0x4f8>
 800c47e:	2301      	movs	r3, #1
 800c480:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c486:	1c9a      	adds	r2, r3, #2
 800c488:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c48a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800c48c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c48e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c490:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c492:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800c496:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c498:	441a      	add	r2, r3
 800c49a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c49c:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800c49e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c4a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4a2:	441a      	add	r2, r3
 800c4a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4a6:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800c4a8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800c4ac:	2b03      	cmp	r3, #3
 800c4ae:	d11e      	bne.n	800c4ee <find_volume+0x562>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c4b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4b2:	3338      	adds	r3, #56	@ 0x38
 800c4b4:	332a      	adds	r3, #42	@ 0x2a
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f7fc feb0 	bl	800921c <ld_word>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d001      	beq.n	800c4c6 <find_volume+0x53a>
 800c4c2:	230d      	movs	r3, #13
 800c4c4:	e0ae      	b.n	800c624 <find_volume+0x698>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c4c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4c8:	891b      	ldrh	r3, [r3, #8]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d001      	beq.n	800c4d2 <find_volume+0x546>
 800c4ce:	230d      	movs	r3, #13
 800c4d0:	e0a8      	b.n	800c624 <find_volume+0x698>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c4d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4d4:	3338      	adds	r3, #56	@ 0x38
 800c4d6:	332c      	adds	r3, #44	@ 0x2c
 800c4d8:	4618      	mov	r0, r3
 800c4da:	f7fc feb7 	bl	800924c <ld_dword>
 800c4de:	4602      	mov	r2, r0
 800c4e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4e2:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c4e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4e6:	69db      	ldr	r3, [r3, #28]
 800c4e8:	009b      	lsls	r3, r3, #2
 800c4ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c4ec:	e01f      	b.n	800c52e <find_volume+0x5a2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c4ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4f0:	891b      	ldrh	r3, [r3, #8]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d101      	bne.n	800c4fa <find_volume+0x56e>
 800c4f6:	230d      	movs	r3, #13
 800c4f8:	e094      	b.n	800c624 <find_volume+0x698>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c4fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c4fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c500:	441a      	add	r2, r3
 800c502:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c504:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c506:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800c50a:	2b02      	cmp	r3, #2
 800c50c:	d103      	bne.n	800c516 <find_volume+0x58a>
 800c50e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c510:	69db      	ldr	r3, [r3, #28]
 800c512:	005b      	lsls	r3, r3, #1
 800c514:	e00a      	b.n	800c52c <find_volume+0x5a0>
 800c516:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c518:	69da      	ldr	r2, [r3, #28]
 800c51a:	4613      	mov	r3, r2
 800c51c:	005b      	lsls	r3, r3, #1
 800c51e:	4413      	add	r3, r2
 800c520:	085a      	lsrs	r2, r3, #1
 800c522:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c524:	69db      	ldr	r3, [r3, #28]
 800c526:	f003 0301 	and.w	r3, r3, #1
 800c52a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c52c:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c52e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c530:	6a1a      	ldr	r2, [r3, #32]
 800c532:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c534:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800c538:	0a5b      	lsrs	r3, r3, #9
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d201      	bcs.n	800c542 <find_volume+0x5b6>
 800c53e:	230d      	movs	r3, #13
 800c540:	e070      	b.n	800c624 <find_volume+0x698>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c542:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c544:	f04f 32ff 	mov.w	r2, #4294967295
 800c548:	619a      	str	r2, [r3, #24]
 800c54a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c54c:	699a      	ldr	r2, [r3, #24]
 800c54e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c550:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800c552:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c554:	2280      	movs	r2, #128	@ 0x80
 800c556:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c558:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800c55c:	2b03      	cmp	r3, #3
 800c55e:	d149      	bne.n	800c5f4 <find_volume+0x668>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c560:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c562:	3338      	adds	r3, #56	@ 0x38
 800c564:	3330      	adds	r3, #48	@ 0x30
 800c566:	4618      	mov	r0, r3
 800c568:	f7fc fe58 	bl	800921c <ld_word>
 800c56c:	4603      	mov	r3, r0
 800c56e:	2b01      	cmp	r3, #1
 800c570:	d140      	bne.n	800c5f4 <find_volume+0x668>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c572:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c574:	3301      	adds	r3, #1
 800c576:	4619      	mov	r1, r3
 800c578:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800c57a:	f7fd fa63 	bl	8009a44 <move_window>
 800c57e:	4603      	mov	r3, r0
 800c580:	2b00      	cmp	r3, #0
 800c582:	d137      	bne.n	800c5f4 <find_volume+0x668>
		{
			fs->fsi_flag = 0;
 800c584:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c586:	2200      	movs	r2, #0
 800c588:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c58a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c58c:	3338      	adds	r3, #56	@ 0x38
 800c58e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c592:	4618      	mov	r0, r3
 800c594:	f7fc fe42 	bl	800921c <ld_word>
 800c598:	4603      	mov	r3, r0
 800c59a:	461a      	mov	r2, r3
 800c59c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d127      	bne.n	800c5f4 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c5a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c5a6:	3338      	adds	r3, #56	@ 0x38
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f7fc fe4f 	bl	800924c <ld_dword>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	4a1f      	ldr	r2, [pc, #124]	@ (800c630 <find_volume+0x6a4>)
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d11e      	bne.n	800c5f4 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c5b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c5b8:	3338      	adds	r3, #56	@ 0x38
 800c5ba:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f7fc fe44 	bl	800924c <ld_dword>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	4a1b      	ldr	r2, [pc, #108]	@ (800c634 <find_volume+0x6a8>)
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d113      	bne.n	800c5f4 <find_volume+0x668>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c5cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c5ce:	3338      	adds	r3, #56	@ 0x38
 800c5d0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f7fc fe39 	bl	800924c <ld_dword>
 800c5da:	4602      	mov	r2, r0
 800c5dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c5de:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c5e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c5e2:	3338      	adds	r3, #56	@ 0x38
 800c5e4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f7fc fe2f 	bl	800924c <ld_dword>
 800c5ee:	4602      	mov	r2, r0
 800c5f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c5f2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c5f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c5f6:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800c5fa:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c5fc:	4b0e      	ldr	r3, [pc, #56]	@ (800c638 <find_volume+0x6ac>)
 800c5fe:	881b      	ldrh	r3, [r3, #0]
 800c600:	3301      	adds	r3, #1
 800c602:	b29a      	uxth	r2, r3
 800c604:	4b0c      	ldr	r3, [pc, #48]	@ (800c638 <find_volume+0x6ac>)
 800c606:	801a      	strh	r2, [r3, #0]
 800c608:	4b0b      	ldr	r3, [pc, #44]	@ (800c638 <find_volume+0x6ac>)
 800c60a:	881a      	ldrh	r2, [r3, #0]
 800c60c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c60e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800c610:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c612:	4a0a      	ldr	r2, [pc, #40]	@ (800c63c <find_volume+0x6b0>)
 800c614:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800c616:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c618:	4a09      	ldr	r2, [pc, #36]	@ (800c640 <find_volume+0x6b4>)
 800c61a:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c61c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800c61e:	f7fd f9a9 	bl	8009974 <clear_lock>
#endif
	return FR_OK;
 800c622:	2300      	movs	r3, #0
}
 800c624:	4618      	mov	r0, r3
 800c626:	3770      	adds	r7, #112	@ 0x70
 800c628:	46bd      	mov	sp, r7
 800c62a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c62e:	bf00      	nop
 800c630:	41615252 	.word	0x41615252
 800c634:	61417272 	.word	0x61417272
 800c638:	20003704 	.word	0x20003704
 800c63c:	20003978 	.word	0x20003978
 800c640:	20003718 	.word	0x20003718

0800c644 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b084      	sub	sp, #16
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c64e:	2309      	movs	r3, #9
 800c650:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d01c      	beq.n	800c692 <validate+0x4e>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d018      	beq.n	800c692 <validate+0x4e>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	781b      	ldrb	r3, [r3, #0]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d013      	beq.n	800c692 <validate+0x4e>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	889a      	ldrh	r2, [r3, #4]
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	88db      	ldrh	r3, [r3, #6]
 800c674:	429a      	cmp	r2, r3
 800c676:	d10c      	bne.n	800c692 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	785b      	ldrb	r3, [r3, #1]
 800c67e:	4618      	mov	r0, r3
 800c680:	f7fc fd10 	bl	80090a4 <disk_status>
 800c684:	4603      	mov	r3, r0
 800c686:	f003 0301 	and.w	r3, r3, #1
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d101      	bne.n	800c692 <validate+0x4e>
			res = FR_OK;
 800c68e:	2300      	movs	r3, #0
 800c690:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c692:	7bfb      	ldrb	r3, [r7, #15]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d102      	bne.n	800c69e <validate+0x5a>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	e000      	b.n	800c6a0 <validate+0x5c>
 800c69e:	2300      	movs	r3, #0
 800c6a0:	683a      	ldr	r2, [r7, #0]
 800c6a2:	6013      	str	r3, [r2, #0]
	return res;
 800c6a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	3710      	adds	r7, #16
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}
	...

0800c6b0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b088      	sub	sp, #32
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	60b9      	str	r1, [r7, #8]
 800c6ba:	4613      	mov	r3, r2
 800c6bc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c6c2:	f107 0310 	add.w	r3, r7, #16
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f7ff fbb7 	bl	800be3a <get_ldnumber>
 800c6cc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c6ce:	69fb      	ldr	r3, [r7, #28]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	da01      	bge.n	800c6d8 <f_mount+0x28>
 800c6d4:	230b      	movs	r3, #11
 800c6d6:	e02b      	b.n	800c730 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c6d8:	4a17      	ldr	r2, [pc, #92]	@ (800c738 <f_mount+0x88>)
 800c6da:	69fb      	ldr	r3, [r7, #28]
 800c6dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6e0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c6e2:	69bb      	ldr	r3, [r7, #24]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d005      	beq.n	800c6f4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c6e8:	69b8      	ldr	r0, [r7, #24]
 800c6ea:	f7fd f943 	bl	8009974 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c6ee:	69bb      	ldr	r3, [r7, #24]
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d002      	beq.n	800c700 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c700:	68fa      	ldr	r2, [r7, #12]
 800c702:	490d      	ldr	r1, [pc, #52]	@ (800c738 <f_mount+0x88>)
 800c704:	69fb      	ldr	r3, [r7, #28]
 800c706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d002      	beq.n	800c716 <f_mount+0x66>
 800c710:	79fb      	ldrb	r3, [r7, #7]
 800c712:	2b01      	cmp	r3, #1
 800c714:	d001      	beq.n	800c71a <f_mount+0x6a>
 800c716:	2300      	movs	r3, #0
 800c718:	e00a      	b.n	800c730 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c71a:	f107 010c 	add.w	r1, r7, #12
 800c71e:	f107 0308 	add.w	r3, r7, #8
 800c722:	2200      	movs	r2, #0
 800c724:	4618      	mov	r0, r3
 800c726:	f7ff fc31 	bl	800bf8c <find_volume>
 800c72a:	4603      	mov	r3, r0
 800c72c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c72e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c730:	4618      	mov	r0, r3
 800c732:	3720      	adds	r7, #32
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}
 800c738:	20003700 	.word	0x20003700

0800c73c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c73c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c740:	b0a6      	sub	sp, #152	@ 0x98
 800c742:	af00      	add	r7, sp, #0
 800c744:	61f8      	str	r0, [r7, #28]
 800c746:	61b9      	str	r1, [r7, #24]
 800c748:	4613      	mov	r3, r2
 800c74a:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c74c:	69fb      	ldr	r3, [r7, #28]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d101      	bne.n	800c756 <f_open+0x1a>
 800c752:	2309      	movs	r3, #9
 800c754:	e2aa      	b.n	800ccac <f_open+0x570>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c756:	7dfb      	ldrb	r3, [r7, #23]
 800c758:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c75c:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 800c75e:	7dfa      	ldrb	r2, [r7, #23]
 800c760:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800c764:	f107 0318 	add.w	r3, r7, #24
 800c768:	4618      	mov	r0, r3
 800c76a:	f7ff fc0f 	bl	800bf8c <find_volume>
 800c76e:	4603      	mov	r3, r0
 800c770:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	if (res == FR_OK) {
 800c774:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800c778:	2b00      	cmp	r3, #0
 800c77a:	f040 828e 	bne.w	800cc9a <f_open+0x55e>
		dj.obj.fs = fs;
 800c77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c780:	62bb      	str	r3, [r7, #40]	@ 0x28
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c782:	69ba      	ldr	r2, [r7, #24]
 800c784:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c788:	4611      	mov	r1, r2
 800c78a:	4618      	mov	r0, r3
 800c78c:	f7ff faac 	bl	800bce8 <follow_path>
 800c790:	4603      	mov	r3, r0
 800c792:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c796:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d118      	bne.n	800c7d0 <f_open+0x94>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c79e:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800c7a2:	b25b      	sxtb	r3, r3
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	da03      	bge.n	800c7b0 <f_open+0x74>
				res = FR_INVALID_NAME;
 800c7a8:	2306      	movs	r3, #6
 800c7aa:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800c7ae:	e00f      	b.n	800c7d0 <f_open+0x94>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c7b0:	7dfb      	ldrb	r3, [r7, #23]
 800c7b2:	2b01      	cmp	r3, #1
 800c7b4:	bf8c      	ite	hi
 800c7b6:	2301      	movhi	r3, #1
 800c7b8:	2300      	movls	r3, #0
 800c7ba:	b2db      	uxtb	r3, r3
 800c7bc:	461a      	mov	r2, r3
 800c7be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c7c2:	4611      	mov	r1, r2
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f7fc ff8d 	bl	80096e4 <chk_lock>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c7d0:	7dfb      	ldrb	r3, [r7, #23]
 800c7d2:	f003 031c 	and.w	r3, r3, #28
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	f000 8115 	beq.w	800ca06 <f_open+0x2ca>
			if (res != FR_OK) {					/* No file, create new */
 800c7dc:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d017      	beq.n	800c814 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c7e4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800c7e8:	2b04      	cmp	r3, #4
 800c7ea:	d10e      	bne.n	800c80a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c7ec:	f7fc ffd6 	bl	800979c <enq_lock>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d006      	beq.n	800c804 <f_open+0xc8>
 800c7f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f7fe ff16 	bl	800b62c <dir_register>
 800c800:	4603      	mov	r3, r0
 800c802:	e000      	b.n	800c806 <f_open+0xca>
 800c804:	2312      	movs	r3, #18
 800c806:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c80a:	7dfb      	ldrb	r3, [r7, #23]
 800c80c:	f043 0308 	orr.w	r3, r3, #8
 800c810:	75fb      	strb	r3, [r7, #23]
 800c812:	e011      	b.n	800c838 <f_open+0xfc>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c814:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c818:	f003 0311 	and.w	r3, r3, #17
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d003      	beq.n	800c828 <f_open+0xec>
					res = FR_DENIED;
 800c820:	2307      	movs	r3, #7
 800c822:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800c826:	e007      	b.n	800c838 <f_open+0xfc>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c828:	7dfb      	ldrb	r3, [r7, #23]
 800c82a:	f003 0304 	and.w	r3, r3, #4
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d002      	beq.n	800c838 <f_open+0xfc>
 800c832:	2308      	movs	r3, #8
 800c834:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c838:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	f040 80fe 	bne.w	800ca3e <f_open+0x302>
 800c842:	7dfb      	ldrb	r3, [r7, #23]
 800c844:	f003 0308 	and.w	r3, r3, #8
 800c848:	2b00      	cmp	r3, #0
 800c84a:	f000 80f8 	beq.w	800ca3e <f_open+0x302>
				dw = GET_FATTIME();
 800c84e:	f7fc fc21 	bl	8009094 <get_fattime>
 800c852:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800c856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c858:	781b      	ldrb	r3, [r3, #0]
 800c85a:	2b04      	cmp	r3, #4
 800c85c:	f040 8084 	bne.w	800c968 <f_open+0x22c>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800c860:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c862:	69fb      	ldr	r3, [r7, #28]
 800c864:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800c866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c868:	691b      	ldr	r3, [r3, #16]
 800c86a:	3334      	adds	r3, #52	@ 0x34
 800c86c:	4618      	mov	r0, r3
 800c86e:	f7fc fced 	bl	800924c <ld_dword>
 800c872:	4602      	mov	r2, r0
 800c874:	69fb      	ldr	r3, [r7, #28]
 800c876:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800c878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c87a:	691b      	ldr	r3, [r3, #16]
 800c87c:	3338      	adds	r3, #56	@ 0x38
 800c87e:	4618      	mov	r0, r3
 800c880:	f7fc fd07 	bl	8009292 <ld_qword>
 800c884:	4602      	mov	r2, r0
 800c886:	460b      	mov	r3, r1
 800c888:	69f9      	ldr	r1, [r7, #28]
 800c88a:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800c88e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c890:	691b      	ldr	r3, [r3, #16]
 800c892:	3321      	adds	r3, #33	@ 0x21
 800c894:	781b      	ldrb	r3, [r3, #0]
 800c896:	f003 0302 	and.w	r3, r3, #2
 800c89a:	b2da      	uxtb	r2, r3
 800c89c:	69fb      	ldr	r3, [r7, #28]
 800c89e:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800c8a0:	69fb      	ldr	r3, [r7, #28]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800c8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8a8:	691b      	ldr	r3, [r3, #16]
 800c8aa:	3308      	adds	r3, #8
 800c8ac:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f7fc fde4 	bl	800947e <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800c8b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8b8:	691b      	ldr	r3, [r3, #16]
 800c8ba:	3314      	adds	r3, #20
 800c8bc:	2200      	movs	r2, #0
 800c8be:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800c8c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8c2:	691b      	ldr	r3, [r3, #16]
 800c8c4:	330c      	adds	r3, #12
 800c8c6:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f7fc fdd7 	bl	800947e <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800c8d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8d2:	691b      	ldr	r3, [r3, #16]
 800c8d4:	3315      	adds	r3, #21
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800c8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8dc:	691b      	ldr	r3, [r3, #16]
 800c8de:	3304      	adds	r3, #4
 800c8e0:	2220      	movs	r2, #32
 800c8e2:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800c8e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8e6:	691b      	ldr	r3, [r3, #16]
 800c8e8:	3334      	adds	r3, #52	@ 0x34
 800c8ea:	2100      	movs	r1, #0
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	f7fc fdc6 	bl	800947e <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800c8f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8f4:	691b      	ldr	r3, [r3, #16]
 800c8f6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c8fa:	f04f 0200 	mov.w	r2, #0
 800c8fe:	f04f 0300 	mov.w	r3, #0
 800c902:	4608      	mov	r0, r1
 800c904:	f7fc fde7 	bl	80094d6 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800c908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c90a:	691b      	ldr	r3, [r3, #16]
 800c90c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800c910:	f04f 0200 	mov.w	r2, #0
 800c914:	f04f 0300 	mov.w	r3, #0
 800c918:	4608      	mov	r0, r1
 800c91a:	f7fc fddc 	bl	80094d6 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800c91e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c920:	691b      	ldr	r3, [r3, #16]
 800c922:	3321      	adds	r3, #33	@ 0x21
 800c924:	2201      	movs	r2, #1
 800c926:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800c928:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c92c:	4618      	mov	r0, r3
 800c92e:	f7fe fbc9 	bl	800b0c4 <store_xdir>
 800c932:	4603      	mov	r3, r0
 800c934:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800c938:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d17e      	bne.n	800ca3e <f_open+0x302>
 800c940:	69fb      	ldr	r3, [r7, #28]
 800c942:	689b      	ldr	r3, [r3, #8]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d07a      	beq.n	800ca3e <f_open+0x302>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800c948:	69f8      	ldr	r0, [r7, #28]
 800c94a:	69fb      	ldr	r3, [r7, #28]
 800c94c:	689b      	ldr	r3, [r3, #8]
 800c94e:	2200      	movs	r2, #0
 800c950:	4619      	mov	r1, r3
 800c952:	f7fd fc81 	bl	800a258 <remove_chain>
 800c956:	4603      	mov	r3, r0
 800c958:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800c95c:	69fb      	ldr	r3, [r7, #28]
 800c95e:	689a      	ldr	r2, [r3, #8]
 800c960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c962:	3a01      	subs	r2, #1
 800c964:	615a      	str	r2, [r3, #20]
 800c966:	e06a      	b.n	800ca3e <f_open+0x302>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c968:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c96a:	330e      	adds	r3, #14
 800c96c:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800c970:	4618      	mov	r0, r3
 800c972:	f7fc fd84 	bl	800947e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c976:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c978:	3316      	adds	r3, #22
 800c97a:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800c97e:	4618      	mov	r0, r3
 800c980:	f7fc fd7d 	bl	800947e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c984:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c986:	330b      	adds	r3, #11
 800c988:	2220      	movs	r2, #32
 800c98a:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c98c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c98e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c990:	4611      	mov	r1, r2
 800c992:	4618      	mov	r0, r3
 800c994:	f7fe f810 	bl	800a9b8 <ld_clust>
 800c998:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c99c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c99e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f7fe f827 	bl	800a9f6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c9a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c9aa:	331c      	adds	r3, #28
 800c9ac:	2100      	movs	r1, #0
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f7fc fd65 	bl	800947e <st_dword>
					fs->wflag = 1;
 800c9b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9b6:	2201      	movs	r2, #1
 800c9b8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c9ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d03d      	beq.n	800ca3e <f_open+0x302>
						dw = fs->winsect;
 800c9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
						res = remove_chain(&dj.obj, cl, 0);
 800c9ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f7fd fc3f 	bl	800a258 <remove_chain>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
						if (res == FR_OK) {
 800c9e0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d12a      	bne.n	800ca3e <f_open+0x302>
							res = move_window(fs, dw);
 800c9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ea:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f7fd f828 	bl	8009a44 <move_window>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c9fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ca00:	3a01      	subs	r2, #1
 800ca02:	615a      	str	r2, [r3, #20]
 800ca04:	e01b      	b.n	800ca3e <f_open+0x302>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ca06:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d117      	bne.n	800ca3e <f_open+0x302>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ca0e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ca12:	f003 0310 	and.w	r3, r3, #16
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d003      	beq.n	800ca22 <f_open+0x2e6>
					res = FR_NO_FILE;
 800ca1a:	2304      	movs	r3, #4
 800ca1c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800ca20:	e00d      	b.n	800ca3e <f_open+0x302>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ca22:	7dfb      	ldrb	r3, [r7, #23]
 800ca24:	f003 0302 	and.w	r3, r3, #2
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d008      	beq.n	800ca3e <f_open+0x302>
 800ca2c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ca30:	f003 0301 	and.w	r3, r3, #1
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d002      	beq.n	800ca3e <f_open+0x302>
						res = FR_DENIED;
 800ca38:	2307      	movs	r3, #7
 800ca3a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					}
				}
			}
		}
		if (res == FR_OK) {
 800ca3e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d126      	bne.n	800ca94 <f_open+0x358>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ca46:	7dfb      	ldrb	r3, [r7, #23]
 800ca48:	f003 0308 	and.w	r3, r3, #8
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d003      	beq.n	800ca58 <f_open+0x31c>
				mode |= FA_MODIFIED;
 800ca50:	7dfb      	ldrb	r3, [r7, #23]
 800ca52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca56:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ca58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ca5c:	69fb      	ldr	r3, [r7, #28]
 800ca5e:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 800ca60:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ca62:	69fb      	ldr	r3, [r7, #28]
 800ca64:	64da      	str	r2, [r3, #76]	@ 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ca66:	7dfb      	ldrb	r3, [r7, #23]
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	bf8c      	ite	hi
 800ca6c:	2301      	movhi	r3, #1
 800ca6e:	2300      	movls	r3, #0
 800ca70:	b2db      	uxtb	r3, r3
 800ca72:	461a      	mov	r2, r3
 800ca74:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ca78:	4611      	mov	r1, r2
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f7fc feb0 	bl	80097e0 <inc_lock>
 800ca80:	4602      	mov	r2, r0
 800ca82:	69fb      	ldr	r3, [r7, #28]
 800ca84:	62da      	str	r2, [r3, #44]	@ 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ca86:	69fb      	ldr	r3, [r7, #28]
 800ca88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d102      	bne.n	800ca94 <f_open+0x358>
 800ca8e:	2302      	movs	r3, #2
 800ca90:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ca94:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	f040 80fe 	bne.w	800cc9a <f_open+0x55e>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800ca9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa0:	781b      	ldrb	r3, [r3, #0]
 800caa2:	2b04      	cmp	r3, #4
 800caa4:	d12d      	bne.n	800cb02 <f_open+0x3c6>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800caa6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800caa8:	69fb      	ldr	r3, [r7, #28]
 800caaa:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800caac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800cab0:	4613      	mov	r3, r2
 800cab2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800cab6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800caba:	431a      	orrs	r2, r3
 800cabc:	69fb      	ldr	r3, [r7, #28]
 800cabe:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800cac0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800cac2:	69fb      	ldr	r3, [r7, #28]
 800cac4:	629a      	str	r2, [r3, #40]	@ 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800cac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cac8:	691b      	ldr	r3, [r3, #16]
 800caca:	3334      	adds	r3, #52	@ 0x34
 800cacc:	4618      	mov	r0, r3
 800cace:	f7fc fbbd 	bl	800924c <ld_dword>
 800cad2:	4602      	mov	r2, r0
 800cad4:	69fb      	ldr	r3, [r7, #28]
 800cad6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800cad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cada:	691b      	ldr	r3, [r3, #16]
 800cadc:	3338      	adds	r3, #56	@ 0x38
 800cade:	4618      	mov	r0, r3
 800cae0:	f7fc fbd7 	bl	8009292 <ld_qword>
 800cae4:	4602      	mov	r2, r0
 800cae6:	460b      	mov	r3, r1
 800cae8:	69f9      	ldr	r1, [r7, #28]
 800caea:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800caee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caf0:	691b      	ldr	r3, [r3, #16]
 800caf2:	3321      	adds	r3, #33	@ 0x21
 800caf4:	781b      	ldrb	r3, [r3, #0]
 800caf6:	f003 0302 	and.w	r3, r3, #2
 800cafa:	b2da      	uxtb	r2, r3
 800cafc:	69fb      	ldr	r3, [r7, #28]
 800cafe:	71da      	strb	r2, [r3, #7]
 800cb00:	e016      	b.n	800cb30 <f_open+0x3f4>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cb02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb04:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800cb06:	4611      	mov	r1, r2
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f7fd ff55 	bl	800a9b8 <ld_clust>
 800cb0e:	4602      	mov	r2, r0
 800cb10:	69fb      	ldr	r3, [r7, #28]
 800cb12:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cb14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cb16:	331c      	adds	r3, #28
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f7fc fb97 	bl	800924c <ld_dword>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	2200      	movs	r2, #0
 800cb22:	60bb      	str	r3, [r7, #8]
 800cb24:	60fa      	str	r2, [r7, #12]
 800cb26:	69fb      	ldr	r3, [r7, #28]
 800cb28:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800cb2c:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800cb30:	69fb      	ldr	r3, [r7, #28]
 800cb32:	2200      	movs	r2, #0
 800cb34:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800cb36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb38:	69fb      	ldr	r3, [r7, #28]
 800cb3a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800cb3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb3e:	88da      	ldrh	r2, [r3, #6]
 800cb40:	69fb      	ldr	r3, [r7, #28]
 800cb42:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800cb44:	69fb      	ldr	r3, [r7, #28]
 800cb46:	7dfa      	ldrb	r2, [r7, #23]
 800cb48:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;			/* Clear error flag */
 800cb4c:	69fb      	ldr	r3, [r7, #28]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800cb54:	69fb      	ldr	r3, [r7, #28]
 800cb56:	2200      	movs	r2, #0
 800cb58:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800cb5a:	69f9      	ldr	r1, [r7, #28]
 800cb5c:	f04f 0200 	mov.w	r2, #0
 800cb60:	f04f 0300 	mov.w	r3, #0
 800cb64:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800cb68:	69fb      	ldr	r3, [r7, #28]
 800cb6a:	3354      	adds	r3, #84	@ 0x54
 800cb6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cb70:	2100      	movs	r1, #0
 800cb72:	4618      	mov	r0, r3
 800cb74:	f7fc fd58 	bl	8009628 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800cb78:	7dfb      	ldrb	r3, [r7, #23]
 800cb7a:	f003 0320 	and.w	r3, r3, #32
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	f000 808b 	beq.w	800cc9a <f_open+0x55e>
 800cb84:	69fb      	ldr	r3, [r7, #28]
 800cb86:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cb8a:	4313      	orrs	r3, r2
 800cb8c:	f000 8085 	beq.w	800cc9a <f_open+0x55e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800cb90:	69fb      	ldr	r3, [r7, #28]
 800cb92:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cb96:	69f9      	ldr	r1, [r7, #28]
 800cb98:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800cb9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb9e:	895b      	ldrh	r3, [r3, #10]
 800cba0:	025b      	lsls	r3, r3, #9
 800cba2:	67fb      	str	r3, [r7, #124]	@ 0x7c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800cba4:	69fb      	ldr	r3, [r7, #28]
 800cba6:	689b      	ldr	r3, [r3, #8]
 800cba8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cbac:	69fb      	ldr	r3, [r7, #28]
 800cbae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cbb2:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
 800cbb6:	e026      	b.n	800cc06 <f_open+0x4ca>
					clst = get_fat(&fp->obj, clst);
 800cbb8:	69fb      	ldr	r3, [r7, #28]
 800cbba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f7fc fffc 	bl	8009bbc <get_fat>
 800cbc4:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
					if (clst <= 1) res = FR_INT_ERR;
 800cbc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cbcc:	2b01      	cmp	r3, #1
 800cbce:	d802      	bhi.n	800cbd6 <f_open+0x49a>
 800cbd0:	2302      	movs	r3, #2
 800cbd2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800cbd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cbda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbde:	d102      	bne.n	800cbe6 <f_open+0x4aa>
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cbe6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cbe8:	2200      	movs	r2, #0
 800cbea:	469a      	mov	sl, r3
 800cbec:	4693      	mov	fp, r2
 800cbee:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800cbf2:	ebb2 010a 	subs.w	r1, r2, sl
 800cbf6:	6039      	str	r1, [r7, #0]
 800cbf8:	eb63 030b 	sbc.w	r3, r3, fp
 800cbfc:	607b      	str	r3, [r7, #4]
 800cbfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc02:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
 800cc06:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d109      	bne.n	800cc22 <f_open+0x4e6>
 800cc0e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cc10:	2200      	movs	r2, #0
 800cc12:	4698      	mov	r8, r3
 800cc14:	4691      	mov	r9, r2
 800cc16:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800cc1a:	4590      	cmp	r8, r2
 800cc1c:	eb79 0303 	sbcs.w	r3, r9, r3
 800cc20:	d3ca      	bcc.n	800cbb8 <f_open+0x47c>
				}
				fp->clust = clst;
 800cc22:	69fb      	ldr	r3, [r7, #28]
 800cc24:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800cc28:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800cc2a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d133      	bne.n	800cc9a <f_open+0x55e>
 800cc32:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800cc36:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800cc3a:	2500      	movs	r5, #0
 800cc3c:	ea54 0305 	orrs.w	r3, r4, r5
 800cc40:	d02b      	beq.n	800cc9a <f_open+0x55e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800cc42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc44:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f7fc ff97 	bl	8009b7c <clust2sect>
 800cc4e:	67b8      	str	r0, [r7, #120]	@ 0x78
 800cc50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d103      	bne.n	800cc5e <f_open+0x522>
						res = FR_INT_ERR;
 800cc56:	2302      	movs	r3, #2
 800cc58:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800cc5c:	e01d      	b.n	800cc9a <f_open+0x55e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800cc5e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800cc62:	f04f 0200 	mov.w	r2, #0
 800cc66:	f04f 0300 	mov.w	r3, #0
 800cc6a:	0a42      	lsrs	r2, r0, #9
 800cc6c:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800cc70:	0a4b      	lsrs	r3, r1, #9
 800cc72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cc74:	441a      	add	r2, r3
 800cc76:	69fb      	ldr	r3, [r7, #28]
 800cc78:	645a      	str	r2, [r3, #68]	@ 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800cc7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc7c:	7858      	ldrb	r0, [r3, #1]
 800cc7e:	69fb      	ldr	r3, [r7, #28]
 800cc80:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800cc84:	69fb      	ldr	r3, [r7, #28]
 800cc86:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cc88:	2301      	movs	r3, #1
 800cc8a:	f7fc fa32 	bl	80090f2 <disk_read>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d002      	beq.n	800cc9a <f_open+0x55e>
 800cc94:	2301      	movs	r3, #1
 800cc96:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800cc9a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d002      	beq.n	800cca8 <f_open+0x56c>
 800cca2:	69fb      	ldr	r3, [r7, #28]
 800cca4:	2200      	movs	r2, #0
 800cca6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800cca8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3798      	adds	r7, #152	@ 0x98
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ccb6 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ccb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccba:	b095      	sub	sp, #84	@ 0x54
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	61f8      	str	r0, [r7, #28]
 800ccc0:	61b9      	str	r1, [r7, #24]
 800ccc2:	617a      	str	r2, [r7, #20]
 800ccc4:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ccc6:	69bb      	ldr	r3, [r7, #24]
 800ccc8:	63fb      	str	r3, [r7, #60]	@ 0x3c


	*br = 0;	/* Clear read byte counter */
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	2200      	movs	r2, #0
 800ccce:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ccd0:	69fb      	ldr	r3, [r7, #28]
 800ccd2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800ccd6:	4611      	mov	r1, r2
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f7ff fcb3 	bl	800c644 <validate>
 800ccde:	4603      	mov	r3, r0
 800cce0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cce4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d108      	bne.n	800ccfe <f_read+0x48>
 800ccec:	69fb      	ldr	r3, [r7, #28]
 800ccee:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ccf2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800ccf6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d002      	beq.n	800cd04 <f_read+0x4e>
 800ccfe:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800cd02:	e14b      	b.n	800cf9c <f_read+0x2e6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800cd04:	69fb      	ldr	r3, [r7, #28]
 800cd06:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cd0a:	f003 0301 	and.w	r3, r3, #1
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d101      	bne.n	800cd16 <f_read+0x60>
 800cd12:	2307      	movs	r3, #7
 800cd14:	e142      	b.n	800cf9c <f_read+0x2e6>
	remain = fp->obj.objsize - fp->fptr;
 800cd16:	69fb      	ldr	r3, [r7, #28]
 800cd18:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800cd1c:	69fb      	ldr	r3, [r7, #28]
 800cd1e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cd22:	1a86      	subs	r6, r0, r2
 800cd24:	603e      	str	r6, [r7, #0]
 800cd26:	eb61 0303 	sbc.w	r3, r1, r3
 800cd2a:	607b      	str	r3, [r7, #4]
 800cd2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd30:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	2200      	movs	r2, #0
 800cd38:	469a      	mov	sl, r3
 800cd3a:	4693      	mov	fp, r2
 800cd3c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800cd40:	4552      	cmp	r2, sl
 800cd42:	eb73 030b 	sbcs.w	r3, r3, fp
 800cd46:	f080 8124 	bcs.w	800cf92 <f_read+0x2dc>
 800cd4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd4c:	617b      	str	r3, [r7, #20]

	for ( ;  btr;								/* Repeat until all data read */
 800cd4e:	e120      	b.n	800cf92 <f_read+0x2dc>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800cd50:	69fb      	ldr	r3, [r7, #28]
 800cd52:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cd56:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800cd5a:	2500      	movs	r5, #0
 800cd5c:	ea54 0305 	orrs.w	r3, r4, r5
 800cd60:	f040 80d9 	bne.w	800cf16 <f_read+0x260>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800cd64:	69fb      	ldr	r3, [r7, #28]
 800cd66:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800cd6a:	f04f 0200 	mov.w	r2, #0
 800cd6e:	f04f 0300 	mov.w	r3, #0
 800cd72:	0a42      	lsrs	r2, r0, #9
 800cd74:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800cd78:	0a4b      	lsrs	r3, r1, #9
 800cd7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd7c:	895b      	ldrh	r3, [r3, #10]
 800cd7e:	3b01      	subs	r3, #1
 800cd80:	4013      	ands	r3, r2
 800cd82:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (csect == 0) {					/* On the cluster boundary? */
 800cd84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d132      	bne.n	800cdf0 <f_read+0x13a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800cd8a:	69fb      	ldr	r3, [r7, #28]
 800cd8c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cd90:	4313      	orrs	r3, r2
 800cd92:	d103      	bne.n	800cd9c <f_read+0xe6>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800cd94:	69fb      	ldr	r3, [r7, #28]
 800cd96:	689b      	ldr	r3, [r3, #8]
 800cd98:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd9a:	e013      	b.n	800cdc4 <f_read+0x10e>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cd9c:	69fb      	ldr	r3, [r7, #28]
 800cd9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d007      	beq.n	800cdb4 <f_read+0xfe>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cda4:	69fb      	ldr	r3, [r7, #28]
 800cda6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cdaa:	69f8      	ldr	r0, [r7, #28]
 800cdac:	f7fd fc09 	bl	800a5c2 <clmt_clust>
 800cdb0:	64b8      	str	r0, [r7, #72]	@ 0x48
 800cdb2:	e007      	b.n	800cdc4 <f_read+0x10e>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800cdb4:	69fa      	ldr	r2, [r7, #28]
 800cdb6:	69fb      	ldr	r3, [r7, #28]
 800cdb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdba:	4619      	mov	r1, r3
 800cdbc:	4610      	mov	r0, r2
 800cdbe:	f7fc fefd 	bl	8009bbc <get_fat>
 800cdc2:	64b8      	str	r0, [r7, #72]	@ 0x48
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800cdc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cdc6:	2b01      	cmp	r3, #1
 800cdc8:	d805      	bhi.n	800cdd6 <f_read+0x120>
 800cdca:	69fb      	ldr	r3, [r7, #28]
 800cdcc:	2202      	movs	r2, #2
 800cdce:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800cdd2:	2302      	movs	r3, #2
 800cdd4:	e0e2      	b.n	800cf9c <f_read+0x2e6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cdd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cdd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cddc:	d105      	bne.n	800cdea <f_read+0x134>
 800cdde:	69fb      	ldr	r3, [r7, #28]
 800cde0:	2201      	movs	r2, #1
 800cde2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800cde6:	2301      	movs	r3, #1
 800cde8:	e0d8      	b.n	800cf9c <f_read+0x2e6>
				fp->clust = clst;				/* Update current cluster */
 800cdea:	69fb      	ldr	r3, [r7, #28]
 800cdec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cdee:	641a      	str	r2, [r3, #64]	@ 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cdf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cdf2:	69fb      	ldr	r3, [r7, #28]
 800cdf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdf6:	4619      	mov	r1, r3
 800cdf8:	4610      	mov	r0, r2
 800cdfa:	f7fc febf 	bl	8009b7c <clust2sect>
 800cdfe:	62b8      	str	r0, [r7, #40]	@ 0x28
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ce00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d105      	bne.n	800ce12 <f_read+0x15c>
 800ce06:	69fb      	ldr	r3, [r7, #28]
 800ce08:	2202      	movs	r2, #2
 800ce0a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ce0e:	2302      	movs	r3, #2
 800ce10:	e0c4      	b.n	800cf9c <f_read+0x2e6>
			sect += csect;
 800ce12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce16:	4413      	add	r3, r2
 800ce18:	62bb      	str	r3, [r7, #40]	@ 0x28
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ce1a:	697b      	ldr	r3, [r7, #20]
 800ce1c:	0a5b      	lsrs	r3, r3, #9
 800ce1e:	643b      	str	r3, [r7, #64]	@ 0x40
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ce20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d03b      	beq.n	800ce9e <f_read+0x1e8>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ce26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce2a:	4413      	add	r3, r2
 800ce2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce2e:	8952      	ldrh	r2, [r2, #10]
 800ce30:	4293      	cmp	r3, r2
 800ce32:	d905      	bls.n	800ce40 <f_read+0x18a>
					cc = fs->csize - csect;
 800ce34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce36:	895b      	ldrh	r3, [r3, #10]
 800ce38:	461a      	mov	r2, r3
 800ce3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce3c:	1ad3      	subs	r3, r2, r3
 800ce3e:	643b      	str	r3, [r7, #64]	@ 0x40
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ce40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce42:	7858      	ldrb	r0, [r3, #1]
 800ce44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ce4a:	f7fc f952 	bl	80090f2 <disk_read>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d005      	beq.n	800ce60 <f_read+0x1aa>
 800ce54:	69fb      	ldr	r3, [r7, #28]
 800ce56:	2201      	movs	r2, #1
 800ce58:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	e09d      	b.n	800cf9c <f_read+0x2e6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ce60:	69fb      	ldr	r3, [r7, #28]
 800ce62:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ce66:	b25b      	sxtb	r3, r3
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	da14      	bge.n	800ce96 <f_read+0x1e0>
 800ce6c:	69fb      	ldr	r3, [r7, #28]
 800ce6e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ce70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce72:	1ad3      	subs	r3, r2, r3
 800ce74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ce76:	429a      	cmp	r2, r3
 800ce78:	d90d      	bls.n	800ce96 <f_read+0x1e0>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ce7a:	69fb      	ldr	r3, [r7, #28]
 800ce7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ce7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce80:	1ad3      	subs	r3, r2, r3
 800ce82:	025b      	lsls	r3, r3, #9
 800ce84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ce86:	18d0      	adds	r0, r2, r3
 800ce88:	69fb      	ldr	r3, [r7, #28]
 800ce8a:	3354      	adds	r3, #84	@ 0x54
 800ce8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ce90:	4619      	mov	r1, r3
 800ce92:	f7fc fba8 	bl	80095e6 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ce96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce98:	025b      	lsls	r3, r3, #9
 800ce9a:	647b      	str	r3, [r7, #68]	@ 0x44
				continue;
 800ce9c:	e059      	b.n	800cf52 <f_read+0x29c>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ce9e:	69fb      	ldr	r3, [r7, #28]
 800cea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cea2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d033      	beq.n	800cf10 <f_read+0x25a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cea8:	69fb      	ldr	r3, [r7, #28]
 800ceaa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ceae:	b25b      	sxtb	r3, r3
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	da1b      	bge.n	800ceec <f_read+0x236>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ceb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceb6:	7858      	ldrb	r0, [r3, #1]
 800ceb8:	69fb      	ldr	r3, [r7, #28]
 800ceba:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800cebe:	69fb      	ldr	r3, [r7, #28]
 800cec0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cec2:	2301      	movs	r3, #1
 800cec4:	f7fc f944 	bl	8009150 <disk_write>
 800cec8:	4603      	mov	r3, r0
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d005      	beq.n	800ceda <f_read+0x224>
 800cece:	69fb      	ldr	r3, [r7, #28]
 800ced0:	2201      	movs	r2, #1
 800ced2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ced6:	2301      	movs	r3, #1
 800ced8:	e060      	b.n	800cf9c <f_read+0x2e6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ceda:	69fb      	ldr	r3, [r7, #28]
 800cedc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cee0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cee4:	b2da      	uxtb	r2, r3
 800cee6:	69fb      	ldr	r3, [r7, #28]
 800cee8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ceec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceee:	7858      	ldrb	r0, [r3, #1]
 800cef0:	69fb      	ldr	r3, [r7, #28]
 800cef2:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800cef6:	2301      	movs	r3, #1
 800cef8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cefa:	f7fc f8fa 	bl	80090f2 <disk_read>
 800cefe:	4603      	mov	r3, r0
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d005      	beq.n	800cf10 <f_read+0x25a>
 800cf04:	69fb      	ldr	r3, [r7, #28]
 800cf06:	2201      	movs	r2, #1
 800cf08:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	e045      	b.n	800cf9c <f_read+0x2e6>
			}
#endif
			fp->sect = sect;
 800cf10:	69fb      	ldr	r3, [r7, #28]
 800cf12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cf14:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cf16:	69fb      	ldr	r3, [r7, #28]
 800cf18:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cf1c:	4613      	mov	r3, r2
 800cf1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf22:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800cf26:	647b      	str	r3, [r7, #68]	@ 0x44
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800cf28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	429a      	cmp	r2, r3
 800cf2e:	d901      	bls.n	800cf34 <f_read+0x27e>
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	647b      	str	r3, [r7, #68]	@ 0x44
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800cf34:	69fb      	ldr	r3, [r7, #28]
 800cf36:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800cf3a:	69fb      	ldr	r3, [r7, #28]
 800cf3c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cf40:	4613      	mov	r3, r2
 800cf42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf46:	440b      	add	r3, r1
 800cf48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cf4a:	4619      	mov	r1, r3
 800cf4c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cf4e:	f7fc fb4a 	bl	80095e6 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800cf52:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cf54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf56:	4413      	add	r3, r2
 800cf58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf5a:	69fb      	ldr	r3, [r7, #28]
 800cf5c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cf60:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cf62:	2000      	movs	r0, #0
 800cf64:	4688      	mov	r8, r1
 800cf66:	4681      	mov	r9, r0
 800cf68:	eb12 0108 	adds.w	r1, r2, r8
 800cf6c:	60b9      	str	r1, [r7, #8]
 800cf6e:	eb43 0309 	adc.w	r3, r3, r9
 800cf72:	60fb      	str	r3, [r7, #12]
 800cf74:	69fb      	ldr	r3, [r7, #28]
 800cf76:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800cf7a:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	681a      	ldr	r2, [r3, #0]
 800cf82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf84:	441a      	add	r2, r3
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	601a      	str	r2, [r3, #0]
 800cf8a:	697a      	ldr	r2, [r7, #20]
 800cf8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf8e:	1ad3      	subs	r3, r2, r3
 800cf90:	617b      	str	r3, [r7, #20]
	for ( ;  btr;								/* Repeat until all data read */
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	f47f aedb 	bne.w	800cd50 <f_read+0x9a>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800cf9a:	2300      	movs	r3, #0
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3754      	adds	r7, #84	@ 0x54
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cfa6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800cfa6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfaa:	b08d      	sub	sp, #52	@ 0x34
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	60f8      	str	r0, [r7, #12]
 800cfb0:	60b9      	str	r1, [r7, #8]
 800cfb2:	607a      	str	r2, [r7, #4]
 800cfb4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	f107 0210 	add.w	r2, r7, #16
 800cfc6:	4611      	mov	r1, r2
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f7ff fb3b 	bl	800c644 <validate>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cfd4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d108      	bne.n	800cfee <f_write+0x48>
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800cfe2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800cfe6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d002      	beq.n	800cff4 <f_write+0x4e>
 800cfee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cff2:	e187      	b.n	800d304 <f_write+0x35e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cffa:	f003 0302 	and.w	r3, r3, #2
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d101      	bne.n	800d006 <f_write+0x60>
 800d002:	2307      	movs	r3, #7
 800d004:	e17e      	b.n	800d304 <f_write+0x35e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d006:	693b      	ldr	r3, [r7, #16]
 800d008:	781b      	ldrb	r3, [r3, #0]
 800d00a:	2b04      	cmp	r3, #4
 800d00c:	f000 816a 	beq.w	800d2e4 <f_write+0x33e>
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	18d1      	adds	r1, r2, r3
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800d020:	4613      	mov	r3, r2
 800d022:	4299      	cmp	r1, r3
 800d024:	f080 815e 	bcs.w	800d2e4 <f_write+0x33e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800d02e:	4613      	mov	r3, r2
 800d030:	43db      	mvns	r3, r3
 800d032:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d034:	e156      	b.n	800d2e4 <f_write+0x33e>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800d03c:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800d040:	2500      	movs	r5, #0
 800d042:	ea54 0305 	orrs.w	r3, r4, r5
 800d046:	f040 80fb 	bne.w	800d240 <f_write+0x29a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800d050:	f04f 0200 	mov.w	r2, #0
 800d054:	f04f 0300 	mov.w	r3, #0
 800d058:	0a42      	lsrs	r2, r0, #9
 800d05a:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800d05e:	0a4b      	lsrs	r3, r1, #9
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	895b      	ldrh	r3, [r3, #10]
 800d064:	3b01      	subs	r3, #1
 800d066:	4013      	ands	r3, r2
 800d068:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d06a:	69bb      	ldr	r3, [r7, #24]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d146      	bne.n	800d0fe <f_write+0x158>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800d076:	4313      	orrs	r3, r2
 800d078:	d10c      	bne.n	800d094 <f_write+0xee>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	689b      	ldr	r3, [r3, #8]
 800d07e:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d082:	2b00      	cmp	r3, #0
 800d084:	d11a      	bne.n	800d0bc <f_write+0x116>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	2100      	movs	r1, #0
 800d08a:	4618      	mov	r0, r3
 800d08c:	f7fd f998 	bl	800a3c0 <create_chain>
 800d090:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d092:	e013      	b.n	800d0bc <f_write+0x116>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d007      	beq.n	800d0ac <f_write+0x106>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800d0a2:	68f8      	ldr	r0, [r7, #12]
 800d0a4:	f7fd fa8d 	bl	800a5c2 <clmt_clust>
 800d0a8:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d0aa:	e007      	b.n	800d0bc <f_write+0x116>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d0ac:	68fa      	ldr	r2, [r7, #12]
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0b2:	4619      	mov	r1, r3
 800d0b4:	4610      	mov	r0, r2
 800d0b6:	f7fd f983 	bl	800a3c0 <create_chain>
 800d0ba:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d0bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	f000 8115 	beq.w	800d2ee <f_write+0x348>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d0c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0c6:	2b01      	cmp	r3, #1
 800d0c8:	d105      	bne.n	800d0d6 <f_write+0x130>
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	2202      	movs	r2, #2
 800d0ce:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800d0d2:	2302      	movs	r3, #2
 800d0d4:	e116      	b.n	800d304 <f_write+0x35e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d0d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0dc:	d105      	bne.n	800d0ea <f_write+0x144>
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	2201      	movs	r2, #1
 800d0e2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	e10c      	b.n	800d304 <f_write+0x35e>
				fp->clust = clst;			/* Update current cluster */
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d0ee:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	689b      	ldr	r3, [r3, #8]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d102      	bne.n	800d0fe <f_write+0x158>
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d0fc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d104:	b25b      	sxtb	r3, r3
 800d106:	2b00      	cmp	r3, #0
 800d108:	da1b      	bge.n	800d142 <f_write+0x19c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	7858      	ldrb	r0, [r3, #1]
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d118:	2301      	movs	r3, #1
 800d11a:	f7fc f819 	bl	8009150 <disk_write>
 800d11e:	4603      	mov	r3, r0
 800d120:	2b00      	cmp	r3, #0
 800d122:	d005      	beq.n	800d130 <f_write+0x18a>
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	2201      	movs	r2, #1
 800d128:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800d12c:	2301      	movs	r3, #1
 800d12e:	e0e9      	b.n	800d304 <f_write+0x35e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d136:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d13a:	b2da      	uxtb	r2, r3
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d142:	693a      	ldr	r2, [r7, #16]
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d148:	4619      	mov	r1, r3
 800d14a:	4610      	mov	r0, r2
 800d14c:	f7fc fd16 	bl	8009b7c <clust2sect>
 800d150:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d105      	bne.n	800d164 <f_write+0x1be>
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	2202      	movs	r2, #2
 800d15c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800d160:	2302      	movs	r3, #2
 800d162:	e0cf      	b.n	800d304 <f_write+0x35e>
			sect += csect;
 800d164:	697a      	ldr	r2, [r7, #20]
 800d166:	69bb      	ldr	r3, [r7, #24]
 800d168:	4413      	add	r3, r2
 800d16a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	0a5b      	lsrs	r3, r3, #9
 800d170:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d172:	6a3b      	ldr	r3, [r7, #32]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d03f      	beq.n	800d1f8 <f_write+0x252>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d178:	69ba      	ldr	r2, [r7, #24]
 800d17a:	6a3b      	ldr	r3, [r7, #32]
 800d17c:	4413      	add	r3, r2
 800d17e:	693a      	ldr	r2, [r7, #16]
 800d180:	8952      	ldrh	r2, [r2, #10]
 800d182:	4293      	cmp	r3, r2
 800d184:	d905      	bls.n	800d192 <f_write+0x1ec>
					cc = fs->csize - csect;
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	895b      	ldrh	r3, [r3, #10]
 800d18a:	461a      	mov	r2, r3
 800d18c:	69bb      	ldr	r3, [r7, #24]
 800d18e:	1ad3      	subs	r3, r2, r3
 800d190:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d192:	693b      	ldr	r3, [r7, #16]
 800d194:	7858      	ldrb	r0, [r3, #1]
 800d196:	6a3b      	ldr	r3, [r7, #32]
 800d198:	697a      	ldr	r2, [r7, #20]
 800d19a:	69f9      	ldr	r1, [r7, #28]
 800d19c:	f7fb ffd8 	bl	8009150 <disk_write>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d005      	beq.n	800d1b2 <f_write+0x20c>
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	2201      	movs	r2, #1
 800d1aa:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	e0a8      	b.n	800d304 <f_write+0x35e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	1ad3      	subs	r3, r2, r3
 800d1ba:	6a3a      	ldr	r2, [r7, #32]
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d917      	bls.n	800d1f0 <f_write+0x24a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	1ad3      	subs	r3, r2, r3
 800d1ce:	025b      	lsls	r3, r3, #9
 800d1d0:	69fa      	ldr	r2, [r7, #28]
 800d1d2:	4413      	add	r3, r2
 800d1d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d1d8:	4619      	mov	r1, r3
 800d1da:	f7fc fa04 	bl	80095e6 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d1e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d1e8:	b2da      	uxtb	r2, r3
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d1f0:	6a3b      	ldr	r3, [r7, #32]
 800d1f2:	025b      	lsls	r3, r3, #9
 800d1f4:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800d1f6:	e04a      	b.n	800d28e <f_write+0x2e8>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1fc:	697a      	ldr	r2, [r7, #20]
 800d1fe:	429a      	cmp	r2, r3
 800d200:	d01b      	beq.n	800d23a <f_write+0x294>
				fp->fptr < fp->obj.objsize &&
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d20e:	4290      	cmp	r0, r2
 800d210:	eb71 0303 	sbcs.w	r3, r1, r3
 800d214:	d211      	bcs.n	800d23a <f_write+0x294>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	7858      	ldrb	r0, [r3, #1]
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800d220:	2301      	movs	r3, #1
 800d222:	697a      	ldr	r2, [r7, #20]
 800d224:	f7fb ff65 	bl	80090f2 <disk_read>
 800d228:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d005      	beq.n	800d23a <f_write+0x294>
					ABORT(fs, FR_DISK_ERR);
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	2201      	movs	r2, #1
 800d232:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800d236:	2301      	movs	r3, #1
 800d238:	e064      	b.n	800d304 <f_write+0x35e>
			}
#endif
			fp->sect = sect;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	697a      	ldr	r2, [r7, #20]
 800d23e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800d246:	4613      	mov	r3, r2
 800d248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d24c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800d250:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d252:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	429a      	cmp	r2, r3
 800d258:	d901      	bls.n	800d25e <f_write+0x2b8>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800d26a:	4613      	mov	r3, r2
 800d26c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d270:	440b      	add	r3, r1
 800d272:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d274:	69f9      	ldr	r1, [r7, #28]
 800d276:	4618      	mov	r0, r3
 800d278:	f7fc f9b5 	bl	80095e6 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d282:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d286:	b2da      	uxtb	r2, r3
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d28e:	69fa      	ldr	r2, [r7, #28]
 800d290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d292:	4413      	add	r3, r2
 800d294:	61fb      	str	r3, [r7, #28]
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800d29c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d29e:	2000      	movs	r0, #0
 800d2a0:	4688      	mov	r8, r1
 800d2a2:	4681      	mov	r9, r0
 800d2a4:	eb12 0a08 	adds.w	sl, r2, r8
 800d2a8:	eb43 0b09 	adc.w	fp, r3, r9
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d2b8:	68f9      	ldr	r1, [r7, #12]
 800d2ba:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	@ 0x38
 800d2be:	4282      	cmp	r2, r0
 800d2c0:	eb73 0601 	sbcs.w	r6, r3, r1
 800d2c4:	d201      	bcs.n	800d2ca <f_write+0x324>
 800d2c6:	4602      	mov	r2, r0
 800d2c8:	460b      	mov	r3, r1
 800d2ca:	68f9      	ldr	r1, [r7, #12]
 800d2cc:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	681a      	ldr	r2, [r3, #0]
 800d2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2d6:	441a      	add	r2, r3
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	601a      	str	r2, [r3, #0]
 800d2dc:	687a      	ldr	r2, [r7, #4]
 800d2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2e0:	1ad3      	subs	r3, r2, r3
 800d2e2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	f47f aea5 	bne.w	800d036 <f_write+0x90>
 800d2ec:	e000      	b.n	800d2f0 <f_write+0x34a>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d2ee:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d2f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d2fa:	b2da      	uxtb	r2, r3
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 800d302:	2300      	movs	r3, #0
}
 800d304:	4618      	mov	r0, r3
 800d306:	3734      	adds	r7, #52	@ 0x34
 800d308:	46bd      	mov	sp, r7
 800d30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d30e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d30e:	b580      	push	{r7, lr}
 800d310:	b09a      	sub	sp, #104	@ 0x68
 800d312:	af00      	add	r7, sp, #0
 800d314:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800d31c:	4611      	mov	r1, r2
 800d31e:	4618      	mov	r0, r3
 800d320:	f7ff f990 	bl	800c644 <validate>
 800d324:	4603      	mov	r3, r0
 800d326:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800d32a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d32e:	2b00      	cmp	r3, #0
 800d330:	f040 8105 	bne.w	800d53e <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d33a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d33e:	2b00      	cmp	r3, #0
 800d340:	f000 80fd 	beq.w	800d53e <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d34a:	b25b      	sxtb	r3, r3
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	da17      	bge.n	800d380 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d350:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d352:	7858      	ldrb	r0, [r3, #1]
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d35e:	2301      	movs	r3, #1
 800d360:	f7fb fef6 	bl	8009150 <disk_write>
 800d364:	4603      	mov	r3, r0
 800d366:	2b00      	cmp	r3, #0
 800d368:	d001      	beq.n	800d36e <f_sync+0x60>
 800d36a:	2301      	movs	r3, #1
 800d36c:	e0e9      	b.n	800d542 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d374:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d378:	b2da      	uxtb	r2, r3
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d380:	f7fb fe88 	bl	8009094 <get_fattime>
 800d384:	6638      	str	r0, [r7, #96]	@ 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800d386:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d388:	781b      	ldrb	r3, [r3, #0]
 800d38a:	2b04      	cmp	r3, #4
 800d38c:	f040 808c 	bne.w	800d4a8 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	4618      	mov	r0, r3
 800d394:	f7fc ff00 	bl	800a198 <fill_first_frag>
 800d398:	4603      	mov	r3, r0
 800d39a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res == FR_OK) {
 800d39e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d10a      	bne.n	800d3bc <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3ac:	f04f 32ff 	mov.w	r2, #4294967295
 800d3b0:	4619      	mov	r1, r3
 800d3b2:	f7fc ff20 	bl	800a1f6 <fill_last_frag>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
				if (res == FR_OK) {
 800d3bc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	f040 80bc 	bne.w	800d53e <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800d3c6:	687a      	ldr	r2, [r7, #4]
 800d3c8:	f107 0308 	add.w	r3, r7, #8
 800d3cc:	4611      	mov	r1, r2
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f7fd fe42 	bl	800b058 <load_obj_dir>
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (res == FR_OK) {
 800d3da:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	f040 80ad 	bne.w	800d53e <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800d3e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d3e6:	691b      	ldr	r3, [r3, #16]
 800d3e8:	3304      	adds	r3, #4
 800d3ea:	781a      	ldrb	r2, [r3, #0]
 800d3ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d3ee:	691b      	ldr	r3, [r3, #16]
 800d3f0:	3304      	adds	r3, #4
 800d3f2:	f042 0220 	orr.w	r2, r2, #32
 800d3f6:	b2d2      	uxtb	r2, r2
 800d3f8:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	79da      	ldrb	r2, [r3, #7]
 800d3fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d400:	691b      	ldr	r3, [r3, #16]
 800d402:	3321      	adds	r3, #33	@ 0x21
 800d404:	f042 0201 	orr.w	r2, r2, #1
 800d408:	b2d2      	uxtb	r2, r2
 800d40a:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800d40c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d40e:	691b      	ldr	r3, [r3, #16]
 800d410:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	689b      	ldr	r3, [r3, #8]
 800d418:	4619      	mov	r1, r3
 800d41a:	4610      	mov	r0, r2
 800d41c:	f7fc f82f 	bl	800947e <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800d420:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d422:	691b      	ldr	r3, [r3, #16]
 800d424:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d42e:	4608      	mov	r0, r1
 800d430:	f7fc f851 	bl	80094d6 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800d434:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d436:	691b      	ldr	r3, [r3, #16]
 800d438:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d442:	4608      	mov	r0, r1
 800d444:	f7fc f847 	bl	80094d6 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800d448:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d44a:	691b      	ldr	r3, [r3, #16]
 800d44c:	330c      	adds	r3, #12
 800d44e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800d450:	4618      	mov	r0, r3
 800d452:	f7fc f814 	bl	800947e <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800d456:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d458:	691b      	ldr	r3, [r3, #16]
 800d45a:	3315      	adds	r3, #21
 800d45c:	2200      	movs	r2, #0
 800d45e:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800d460:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d462:	691b      	ldr	r3, [r3, #16]
 800d464:	3310      	adds	r3, #16
 800d466:	2100      	movs	r1, #0
 800d468:	4618      	mov	r0, r3
 800d46a:	f7fc f808 	bl	800947e <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800d46e:	f107 0308 	add.w	r3, r7, #8
 800d472:	4618      	mov	r0, r3
 800d474:	f7fd fe26 	bl	800b0c4 <store_xdir>
 800d478:	4603      	mov	r3, r0
 800d47a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800d47e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d482:	2b00      	cmp	r3, #0
 800d484:	d15b      	bne.n	800d53e <f_sync+0x230>
							res = sync_fs(fs);
 800d486:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d488:	4618      	mov	r0, r3
 800d48a:	f7fc fb09 	bl	8009aa0 <sync_fs>
 800d48e:	4603      	mov	r3, r0
 800d490:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d49a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d49e:	b2da      	uxtb	r2, r3
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 800d4a6:	e04a      	b.n	800d53e <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d4a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d4ae:	4619      	mov	r1, r3
 800d4b0:	4610      	mov	r0, r2
 800d4b2:	f7fc fac7 	bl	8009a44 <move_window>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res == FR_OK) {
 800d4bc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d13c      	bne.n	800d53e <f_sync+0x230>
					dir = fp->dir_ptr;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d4c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d4ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d4cc:	330b      	adds	r3, #11
 800d4ce:	781a      	ldrb	r2, [r3, #0]
 800d4d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d4d2:	330b      	adds	r3, #11
 800d4d4:	f042 0220 	orr.w	r2, r2, #32
 800d4d8:	b2d2      	uxtb	r2, r2
 800d4da:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	6818      	ldr	r0, [r3, #0]
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	689b      	ldr	r3, [r3, #8]
 800d4e4:	461a      	mov	r2, r3
 800d4e6:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800d4e8:	f7fd fa85 	bl	800a9f6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d4ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d4ee:	f103 001c 	add.w	r0, r3, #28
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d4f8:	4613      	mov	r3, r2
 800d4fa:	4619      	mov	r1, r3
 800d4fc:	f7fb ffbf 	bl	800947e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d500:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d502:	3316      	adds	r3, #22
 800d504:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800d506:	4618      	mov	r0, r3
 800d508:	f7fb ffb9 	bl	800947e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d50c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d50e:	3312      	adds	r3, #18
 800d510:	2100      	movs	r1, #0
 800d512:	4618      	mov	r0, r3
 800d514:	f7fb ff98 	bl	8009448 <st_word>
					fs->wflag = 1;
 800d518:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d51a:	2201      	movs	r2, #1
 800d51c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d51e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d520:	4618      	mov	r0, r3
 800d522:	f7fc fabd 	bl	8009aa0 <sync_fs>
 800d526:	4603      	mov	r3, r0
 800d528:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d532:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d536:	b2da      	uxtb	r2, r3
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d53e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800d542:	4618      	mov	r0, r3
 800d544:	3768      	adds	r7, #104	@ 0x68
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}

0800d54a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d54a:	b580      	push	{r7, lr}
 800d54c:	b084      	sub	sp, #16
 800d54e:	af00      	add	r7, sp, #0
 800d550:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f7ff fedb 	bl	800d30e <f_sync>
 800d558:	4603      	mov	r3, r0
 800d55a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d55c:	7bfb      	ldrb	r3, [r7, #15]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d118      	bne.n	800d594 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f107 0208 	add.w	r2, r7, #8
 800d568:	4611      	mov	r1, r2
 800d56a:	4618      	mov	r0, r3
 800d56c:	f7ff f86a 	bl	800c644 <validate>
 800d570:	4603      	mov	r3, r0
 800d572:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d574:	7bfb      	ldrb	r3, [r7, #15]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d10c      	bne.n	800d594 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d57e:	4618      	mov	r0, r3
 800d580:	f7fc f9bc 	bl	80098fc <dec_lock>
 800d584:	4603      	mov	r3, r0
 800d586:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d588:	7bfb      	ldrb	r3, [r7, #15]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d102      	bne.n	800d594 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2200      	movs	r2, #0
 800d592:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d594:	7bfb      	ldrb	r3, [r7, #15]
}
 800d596:	4618      	mov	r0, r3
 800d598:	3710      	adds	r7, #16
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}
	...

0800d5a0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b087      	sub	sp, #28
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	60f8      	str	r0, [r7, #12]
 800d5a8:	60b9      	str	r1, [r7, #8]
 800d5aa:	4613      	mov	r3, r2
 800d5ac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d5b6:	4b1f      	ldr	r3, [pc, #124]	@ (800d634 <FATFS_LinkDriverEx+0x94>)
 800d5b8:	7a5b      	ldrb	r3, [r3, #9]
 800d5ba:	b2db      	uxtb	r3, r3
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d131      	bne.n	800d624 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d5c0:	4b1c      	ldr	r3, [pc, #112]	@ (800d634 <FATFS_LinkDriverEx+0x94>)
 800d5c2:	7a5b      	ldrb	r3, [r3, #9]
 800d5c4:	b2db      	uxtb	r3, r3
 800d5c6:	461a      	mov	r2, r3
 800d5c8:	4b1a      	ldr	r3, [pc, #104]	@ (800d634 <FATFS_LinkDriverEx+0x94>)
 800d5ca:	2100      	movs	r1, #0
 800d5cc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d5ce:	4b19      	ldr	r3, [pc, #100]	@ (800d634 <FATFS_LinkDriverEx+0x94>)
 800d5d0:	7a5b      	ldrb	r3, [r3, #9]
 800d5d2:	b2db      	uxtb	r3, r3
 800d5d4:	4a17      	ldr	r2, [pc, #92]	@ (800d634 <FATFS_LinkDriverEx+0x94>)
 800d5d6:	009b      	lsls	r3, r3, #2
 800d5d8:	4413      	add	r3, r2
 800d5da:	68fa      	ldr	r2, [r7, #12]
 800d5dc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d5de:	4b15      	ldr	r3, [pc, #84]	@ (800d634 <FATFS_LinkDriverEx+0x94>)
 800d5e0:	7a5b      	ldrb	r3, [r3, #9]
 800d5e2:	b2db      	uxtb	r3, r3
 800d5e4:	461a      	mov	r2, r3
 800d5e6:	4b13      	ldr	r3, [pc, #76]	@ (800d634 <FATFS_LinkDriverEx+0x94>)
 800d5e8:	4413      	add	r3, r2
 800d5ea:	79fa      	ldrb	r2, [r7, #7]
 800d5ec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d5ee:	4b11      	ldr	r3, [pc, #68]	@ (800d634 <FATFS_LinkDriverEx+0x94>)
 800d5f0:	7a5b      	ldrb	r3, [r3, #9]
 800d5f2:	b2db      	uxtb	r3, r3
 800d5f4:	1c5a      	adds	r2, r3, #1
 800d5f6:	b2d1      	uxtb	r1, r2
 800d5f8:	4a0e      	ldr	r2, [pc, #56]	@ (800d634 <FATFS_LinkDriverEx+0x94>)
 800d5fa:	7251      	strb	r1, [r2, #9]
 800d5fc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d5fe:	7dbb      	ldrb	r3, [r7, #22]
 800d600:	3330      	adds	r3, #48	@ 0x30
 800d602:	b2da      	uxtb	r2, r3
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d608:	68bb      	ldr	r3, [r7, #8]
 800d60a:	3301      	adds	r3, #1
 800d60c:	223a      	movs	r2, #58	@ 0x3a
 800d60e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	3302      	adds	r3, #2
 800d614:	222f      	movs	r2, #47	@ 0x2f
 800d616:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	3303      	adds	r3, #3
 800d61c:	2200      	movs	r2, #0
 800d61e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d620:	2300      	movs	r3, #0
 800d622:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d624:	7dfb      	ldrb	r3, [r7, #23]
}
 800d626:	4618      	mov	r0, r3
 800d628:	371c      	adds	r7, #28
 800d62a:	46bd      	mov	sp, r7
 800d62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d630:	4770      	bx	lr
 800d632:	bf00      	nop
 800d634:	20003b78 	.word	0x20003b78

0800d638 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b082      	sub	sp, #8
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
 800d640:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d642:	2200      	movs	r2, #0
 800d644:	6839      	ldr	r1, [r7, #0]
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f7ff ffaa 	bl	800d5a0 <FATFS_LinkDriverEx>
 800d64c:	4603      	mov	r3, r0
}
 800d64e:	4618      	mov	r0, r3
 800d650:	3708      	adds	r7, #8
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}
	...

0800d658 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d658:	b480      	push	{r7}
 800d65a:	b085      	sub	sp, #20
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	4603      	mov	r3, r0
 800d660:	6039      	str	r1, [r7, #0]
 800d662:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d664:	88fb      	ldrh	r3, [r7, #6]
 800d666:	2b7f      	cmp	r3, #127	@ 0x7f
 800d668:	d802      	bhi.n	800d670 <ff_convert+0x18>
		c = chr;
 800d66a:	88fb      	ldrh	r3, [r7, #6]
 800d66c:	81fb      	strh	r3, [r7, #14]
 800d66e:	e025      	b.n	800d6bc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d00b      	beq.n	800d68e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d676:	88fb      	ldrh	r3, [r7, #6]
 800d678:	2bff      	cmp	r3, #255	@ 0xff
 800d67a:	d805      	bhi.n	800d688 <ff_convert+0x30>
 800d67c:	88fb      	ldrh	r3, [r7, #6]
 800d67e:	3b80      	subs	r3, #128	@ 0x80
 800d680:	4a12      	ldr	r2, [pc, #72]	@ (800d6cc <ff_convert+0x74>)
 800d682:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d686:	e000      	b.n	800d68a <ff_convert+0x32>
 800d688:	2300      	movs	r3, #0
 800d68a:	81fb      	strh	r3, [r7, #14]
 800d68c:	e016      	b.n	800d6bc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d68e:	2300      	movs	r3, #0
 800d690:	81fb      	strh	r3, [r7, #14]
 800d692:	e009      	b.n	800d6a8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d694:	89fb      	ldrh	r3, [r7, #14]
 800d696:	4a0d      	ldr	r2, [pc, #52]	@ (800d6cc <ff_convert+0x74>)
 800d698:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d69c:	88fa      	ldrh	r2, [r7, #6]
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d006      	beq.n	800d6b0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d6a2:	89fb      	ldrh	r3, [r7, #14]
 800d6a4:	3301      	adds	r3, #1
 800d6a6:	81fb      	strh	r3, [r7, #14]
 800d6a8:	89fb      	ldrh	r3, [r7, #14]
 800d6aa:	2b7f      	cmp	r3, #127	@ 0x7f
 800d6ac:	d9f2      	bls.n	800d694 <ff_convert+0x3c>
 800d6ae:	e000      	b.n	800d6b2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d6b0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d6b2:	89fb      	ldrh	r3, [r7, #14]
 800d6b4:	3380      	adds	r3, #128	@ 0x80
 800d6b6:	b29b      	uxth	r3, r3
 800d6b8:	b2db      	uxtb	r3, r3
 800d6ba:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d6bc:	89fb      	ldrh	r3, [r7, #14]
}
 800d6be:	4618      	mov	r0, r3
 800d6c0:	3714      	adds	r7, #20
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c8:	4770      	bx	lr
 800d6ca:	bf00      	nop
 800d6cc:	08012e94 	.word	0x08012e94

0800d6d0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b087      	sub	sp, #28
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d6da:	88fb      	ldrh	r3, [r7, #6]
 800d6dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d6e0:	d201      	bcs.n	800d6e6 <ff_wtoupper+0x16>
 800d6e2:	4b3e      	ldr	r3, [pc, #248]	@ (800d7dc <ff_wtoupper+0x10c>)
 800d6e4:	e000      	b.n	800d6e8 <ff_wtoupper+0x18>
 800d6e6:	4b3e      	ldr	r3, [pc, #248]	@ (800d7e0 <ff_wtoupper+0x110>)
 800d6e8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d6ea:	697b      	ldr	r3, [r7, #20]
 800d6ec:	1c9a      	adds	r2, r3, #2
 800d6ee:	617a      	str	r2, [r7, #20]
 800d6f0:	881b      	ldrh	r3, [r3, #0]
 800d6f2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d6f4:	8a7b      	ldrh	r3, [r7, #18]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d068      	beq.n	800d7cc <ff_wtoupper+0xfc>
 800d6fa:	88fa      	ldrh	r2, [r7, #6]
 800d6fc:	8a7b      	ldrh	r3, [r7, #18]
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d364      	bcc.n	800d7cc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d702:	697b      	ldr	r3, [r7, #20]
 800d704:	1c9a      	adds	r2, r3, #2
 800d706:	617a      	str	r2, [r7, #20]
 800d708:	881b      	ldrh	r3, [r3, #0]
 800d70a:	823b      	strh	r3, [r7, #16]
 800d70c:	8a3b      	ldrh	r3, [r7, #16]
 800d70e:	0a1b      	lsrs	r3, r3, #8
 800d710:	81fb      	strh	r3, [r7, #14]
 800d712:	8a3b      	ldrh	r3, [r7, #16]
 800d714:	b2db      	uxtb	r3, r3
 800d716:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d718:	88fa      	ldrh	r2, [r7, #6]
 800d71a:	8a79      	ldrh	r1, [r7, #18]
 800d71c:	8a3b      	ldrh	r3, [r7, #16]
 800d71e:	440b      	add	r3, r1
 800d720:	429a      	cmp	r2, r3
 800d722:	da49      	bge.n	800d7b8 <ff_wtoupper+0xe8>
			switch (cmd) {
 800d724:	89fb      	ldrh	r3, [r7, #14]
 800d726:	2b08      	cmp	r3, #8
 800d728:	d84f      	bhi.n	800d7ca <ff_wtoupper+0xfa>
 800d72a:	a201      	add	r2, pc, #4	@ (adr r2, 800d730 <ff_wtoupper+0x60>)
 800d72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d730:	0800d755 	.word	0x0800d755
 800d734:	0800d767 	.word	0x0800d767
 800d738:	0800d77d 	.word	0x0800d77d
 800d73c:	0800d785 	.word	0x0800d785
 800d740:	0800d78d 	.word	0x0800d78d
 800d744:	0800d795 	.word	0x0800d795
 800d748:	0800d79d 	.word	0x0800d79d
 800d74c:	0800d7a5 	.word	0x0800d7a5
 800d750:	0800d7ad 	.word	0x0800d7ad
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d754:	88fa      	ldrh	r2, [r7, #6]
 800d756:	8a7b      	ldrh	r3, [r7, #18]
 800d758:	1ad3      	subs	r3, r2, r3
 800d75a:	005b      	lsls	r3, r3, #1
 800d75c:	697a      	ldr	r2, [r7, #20]
 800d75e:	4413      	add	r3, r2
 800d760:	881b      	ldrh	r3, [r3, #0]
 800d762:	80fb      	strh	r3, [r7, #6]
 800d764:	e027      	b.n	800d7b6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d766:	88fa      	ldrh	r2, [r7, #6]
 800d768:	8a7b      	ldrh	r3, [r7, #18]
 800d76a:	1ad3      	subs	r3, r2, r3
 800d76c:	b29b      	uxth	r3, r3
 800d76e:	f003 0301 	and.w	r3, r3, #1
 800d772:	b29b      	uxth	r3, r3
 800d774:	88fa      	ldrh	r2, [r7, #6]
 800d776:	1ad3      	subs	r3, r2, r3
 800d778:	80fb      	strh	r3, [r7, #6]
 800d77a:	e01c      	b.n	800d7b6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d77c:	88fb      	ldrh	r3, [r7, #6]
 800d77e:	3b10      	subs	r3, #16
 800d780:	80fb      	strh	r3, [r7, #6]
 800d782:	e018      	b.n	800d7b6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d784:	88fb      	ldrh	r3, [r7, #6]
 800d786:	3b20      	subs	r3, #32
 800d788:	80fb      	strh	r3, [r7, #6]
 800d78a:	e014      	b.n	800d7b6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d78c:	88fb      	ldrh	r3, [r7, #6]
 800d78e:	3b30      	subs	r3, #48	@ 0x30
 800d790:	80fb      	strh	r3, [r7, #6]
 800d792:	e010      	b.n	800d7b6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d794:	88fb      	ldrh	r3, [r7, #6]
 800d796:	3b1a      	subs	r3, #26
 800d798:	80fb      	strh	r3, [r7, #6]
 800d79a:	e00c      	b.n	800d7b6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d79c:	88fb      	ldrh	r3, [r7, #6]
 800d79e:	3308      	adds	r3, #8
 800d7a0:	80fb      	strh	r3, [r7, #6]
 800d7a2:	e008      	b.n	800d7b6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d7a4:	88fb      	ldrh	r3, [r7, #6]
 800d7a6:	3b50      	subs	r3, #80	@ 0x50
 800d7a8:	80fb      	strh	r3, [r7, #6]
 800d7aa:	e004      	b.n	800d7b6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d7ac:	88fb      	ldrh	r3, [r7, #6]
 800d7ae:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800d7b2:	80fb      	strh	r3, [r7, #6]
 800d7b4:	bf00      	nop
			}
			break;
 800d7b6:	e008      	b.n	800d7ca <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d7b8:	89fb      	ldrh	r3, [r7, #14]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d195      	bne.n	800d6ea <ff_wtoupper+0x1a>
 800d7be:	8a3b      	ldrh	r3, [r7, #16]
 800d7c0:	005b      	lsls	r3, r3, #1
 800d7c2:	697a      	ldr	r2, [r7, #20]
 800d7c4:	4413      	add	r3, r2
 800d7c6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d7c8:	e78f      	b.n	800d6ea <ff_wtoupper+0x1a>
			break;
 800d7ca:	bf00      	nop
	}

	return chr;
 800d7cc:	88fb      	ldrh	r3, [r7, #6]
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	371c      	adds	r7, #28
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d8:	4770      	bx	lr
 800d7da:	bf00      	nop
 800d7dc:	08012f94 	.word	0x08012f94
 800d7e0:	08013188 	.word	0x08013188

0800d7e4 <sulp>:
 800d7e4:	b570      	push	{r4, r5, r6, lr}
 800d7e6:	4604      	mov	r4, r0
 800d7e8:	460d      	mov	r5, r1
 800d7ea:	ec45 4b10 	vmov	d0, r4, r5
 800d7ee:	4616      	mov	r6, r2
 800d7f0:	f003 fd2a 	bl	8011248 <__ulp>
 800d7f4:	ec51 0b10 	vmov	r0, r1, d0
 800d7f8:	b17e      	cbz	r6, 800d81a <sulp+0x36>
 800d7fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d7fe:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d802:	2b00      	cmp	r3, #0
 800d804:	dd09      	ble.n	800d81a <sulp+0x36>
 800d806:	051b      	lsls	r3, r3, #20
 800d808:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d80c:	2400      	movs	r4, #0
 800d80e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d812:	4622      	mov	r2, r4
 800d814:	462b      	mov	r3, r5
 800d816:	f7f2 ff0f 	bl	8000638 <__aeabi_dmul>
 800d81a:	ec41 0b10 	vmov	d0, r0, r1
 800d81e:	bd70      	pop	{r4, r5, r6, pc}

0800d820 <_strtod_l>:
 800d820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d824:	b09f      	sub	sp, #124	@ 0x7c
 800d826:	460c      	mov	r4, r1
 800d828:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d82a:	2200      	movs	r2, #0
 800d82c:	921a      	str	r2, [sp, #104]	@ 0x68
 800d82e:	9005      	str	r0, [sp, #20]
 800d830:	f04f 0a00 	mov.w	sl, #0
 800d834:	f04f 0b00 	mov.w	fp, #0
 800d838:	460a      	mov	r2, r1
 800d83a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d83c:	7811      	ldrb	r1, [r2, #0]
 800d83e:	292b      	cmp	r1, #43	@ 0x2b
 800d840:	d04a      	beq.n	800d8d8 <_strtod_l+0xb8>
 800d842:	d838      	bhi.n	800d8b6 <_strtod_l+0x96>
 800d844:	290d      	cmp	r1, #13
 800d846:	d832      	bhi.n	800d8ae <_strtod_l+0x8e>
 800d848:	2908      	cmp	r1, #8
 800d84a:	d832      	bhi.n	800d8b2 <_strtod_l+0x92>
 800d84c:	2900      	cmp	r1, #0
 800d84e:	d03b      	beq.n	800d8c8 <_strtod_l+0xa8>
 800d850:	2200      	movs	r2, #0
 800d852:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d854:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d856:	782a      	ldrb	r2, [r5, #0]
 800d858:	2a30      	cmp	r2, #48	@ 0x30
 800d85a:	f040 80b3 	bne.w	800d9c4 <_strtod_l+0x1a4>
 800d85e:	786a      	ldrb	r2, [r5, #1]
 800d860:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d864:	2a58      	cmp	r2, #88	@ 0x58
 800d866:	d16e      	bne.n	800d946 <_strtod_l+0x126>
 800d868:	9302      	str	r3, [sp, #8]
 800d86a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d86c:	9301      	str	r3, [sp, #4]
 800d86e:	ab1a      	add	r3, sp, #104	@ 0x68
 800d870:	9300      	str	r3, [sp, #0]
 800d872:	4a8e      	ldr	r2, [pc, #568]	@ (800daac <_strtod_l+0x28c>)
 800d874:	9805      	ldr	r0, [sp, #20]
 800d876:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d878:	a919      	add	r1, sp, #100	@ 0x64
 800d87a:	f002 fdd7 	bl	801042c <__gethex>
 800d87e:	f010 060f 	ands.w	r6, r0, #15
 800d882:	4604      	mov	r4, r0
 800d884:	d005      	beq.n	800d892 <_strtod_l+0x72>
 800d886:	2e06      	cmp	r6, #6
 800d888:	d128      	bne.n	800d8dc <_strtod_l+0xbc>
 800d88a:	3501      	adds	r5, #1
 800d88c:	2300      	movs	r3, #0
 800d88e:	9519      	str	r5, [sp, #100]	@ 0x64
 800d890:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d892:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d894:	2b00      	cmp	r3, #0
 800d896:	f040 858e 	bne.w	800e3b6 <_strtod_l+0xb96>
 800d89a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d89c:	b1cb      	cbz	r3, 800d8d2 <_strtod_l+0xb2>
 800d89e:	4652      	mov	r2, sl
 800d8a0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d8a4:	ec43 2b10 	vmov	d0, r2, r3
 800d8a8:	b01f      	add	sp, #124	@ 0x7c
 800d8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8ae:	2920      	cmp	r1, #32
 800d8b0:	d1ce      	bne.n	800d850 <_strtod_l+0x30>
 800d8b2:	3201      	adds	r2, #1
 800d8b4:	e7c1      	b.n	800d83a <_strtod_l+0x1a>
 800d8b6:	292d      	cmp	r1, #45	@ 0x2d
 800d8b8:	d1ca      	bne.n	800d850 <_strtod_l+0x30>
 800d8ba:	2101      	movs	r1, #1
 800d8bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d8be:	1c51      	adds	r1, r2, #1
 800d8c0:	9119      	str	r1, [sp, #100]	@ 0x64
 800d8c2:	7852      	ldrb	r2, [r2, #1]
 800d8c4:	2a00      	cmp	r2, #0
 800d8c6:	d1c5      	bne.n	800d854 <_strtod_l+0x34>
 800d8c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d8ca:	9419      	str	r4, [sp, #100]	@ 0x64
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	f040 8570 	bne.w	800e3b2 <_strtod_l+0xb92>
 800d8d2:	4652      	mov	r2, sl
 800d8d4:	465b      	mov	r3, fp
 800d8d6:	e7e5      	b.n	800d8a4 <_strtod_l+0x84>
 800d8d8:	2100      	movs	r1, #0
 800d8da:	e7ef      	b.n	800d8bc <_strtod_l+0x9c>
 800d8dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d8de:	b13a      	cbz	r2, 800d8f0 <_strtod_l+0xd0>
 800d8e0:	2135      	movs	r1, #53	@ 0x35
 800d8e2:	a81c      	add	r0, sp, #112	@ 0x70
 800d8e4:	f003 fdaa 	bl	801143c <__copybits>
 800d8e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d8ea:	9805      	ldr	r0, [sp, #20]
 800d8ec:	f003 f978 	bl	8010be0 <_Bfree>
 800d8f0:	3e01      	subs	r6, #1
 800d8f2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d8f4:	2e04      	cmp	r6, #4
 800d8f6:	d806      	bhi.n	800d906 <_strtod_l+0xe6>
 800d8f8:	e8df f006 	tbb	[pc, r6]
 800d8fc:	201d0314 	.word	0x201d0314
 800d900:	14          	.byte	0x14
 800d901:	00          	.byte	0x00
 800d902:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d906:	05e1      	lsls	r1, r4, #23
 800d908:	bf48      	it	mi
 800d90a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d90e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d912:	0d1b      	lsrs	r3, r3, #20
 800d914:	051b      	lsls	r3, r3, #20
 800d916:	2b00      	cmp	r3, #0
 800d918:	d1bb      	bne.n	800d892 <_strtod_l+0x72>
 800d91a:	f001 fe21 	bl	800f560 <__errno>
 800d91e:	2322      	movs	r3, #34	@ 0x22
 800d920:	6003      	str	r3, [r0, #0]
 800d922:	e7b6      	b.n	800d892 <_strtod_l+0x72>
 800d924:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d928:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d92c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d930:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d934:	e7e7      	b.n	800d906 <_strtod_l+0xe6>
 800d936:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800dab4 <_strtod_l+0x294>
 800d93a:	e7e4      	b.n	800d906 <_strtod_l+0xe6>
 800d93c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d940:	f04f 3aff 	mov.w	sl, #4294967295
 800d944:	e7df      	b.n	800d906 <_strtod_l+0xe6>
 800d946:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d948:	1c5a      	adds	r2, r3, #1
 800d94a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d94c:	785b      	ldrb	r3, [r3, #1]
 800d94e:	2b30      	cmp	r3, #48	@ 0x30
 800d950:	d0f9      	beq.n	800d946 <_strtod_l+0x126>
 800d952:	2b00      	cmp	r3, #0
 800d954:	d09d      	beq.n	800d892 <_strtod_l+0x72>
 800d956:	2301      	movs	r3, #1
 800d958:	9309      	str	r3, [sp, #36]	@ 0x24
 800d95a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d95c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d95e:	2300      	movs	r3, #0
 800d960:	9308      	str	r3, [sp, #32]
 800d962:	930a      	str	r3, [sp, #40]	@ 0x28
 800d964:	461f      	mov	r7, r3
 800d966:	220a      	movs	r2, #10
 800d968:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d96a:	7805      	ldrb	r5, [r0, #0]
 800d96c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d970:	b2d9      	uxtb	r1, r3
 800d972:	2909      	cmp	r1, #9
 800d974:	d928      	bls.n	800d9c8 <_strtod_l+0x1a8>
 800d976:	494e      	ldr	r1, [pc, #312]	@ (800dab0 <_strtod_l+0x290>)
 800d978:	2201      	movs	r2, #1
 800d97a:	f001 fd38 	bl	800f3ee <strncmp>
 800d97e:	2800      	cmp	r0, #0
 800d980:	d032      	beq.n	800d9e8 <_strtod_l+0x1c8>
 800d982:	2000      	movs	r0, #0
 800d984:	462a      	mov	r2, r5
 800d986:	4681      	mov	r9, r0
 800d988:	463d      	mov	r5, r7
 800d98a:	4603      	mov	r3, r0
 800d98c:	2a65      	cmp	r2, #101	@ 0x65
 800d98e:	d001      	beq.n	800d994 <_strtod_l+0x174>
 800d990:	2a45      	cmp	r2, #69	@ 0x45
 800d992:	d114      	bne.n	800d9be <_strtod_l+0x19e>
 800d994:	b91d      	cbnz	r5, 800d99e <_strtod_l+0x17e>
 800d996:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d998:	4302      	orrs	r2, r0
 800d99a:	d095      	beq.n	800d8c8 <_strtod_l+0xa8>
 800d99c:	2500      	movs	r5, #0
 800d99e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d9a0:	1c62      	adds	r2, r4, #1
 800d9a2:	9219      	str	r2, [sp, #100]	@ 0x64
 800d9a4:	7862      	ldrb	r2, [r4, #1]
 800d9a6:	2a2b      	cmp	r2, #43	@ 0x2b
 800d9a8:	d077      	beq.n	800da9a <_strtod_l+0x27a>
 800d9aa:	2a2d      	cmp	r2, #45	@ 0x2d
 800d9ac:	d07b      	beq.n	800daa6 <_strtod_l+0x286>
 800d9ae:	f04f 0c00 	mov.w	ip, #0
 800d9b2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d9b6:	2909      	cmp	r1, #9
 800d9b8:	f240 8082 	bls.w	800dac0 <_strtod_l+0x2a0>
 800d9bc:	9419      	str	r4, [sp, #100]	@ 0x64
 800d9be:	f04f 0800 	mov.w	r8, #0
 800d9c2:	e0a2      	b.n	800db0a <_strtod_l+0x2ea>
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	e7c7      	b.n	800d958 <_strtod_l+0x138>
 800d9c8:	2f08      	cmp	r7, #8
 800d9ca:	bfd5      	itete	le
 800d9cc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d9ce:	9908      	ldrgt	r1, [sp, #32]
 800d9d0:	fb02 3301 	mlale	r3, r2, r1, r3
 800d9d4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d9d8:	f100 0001 	add.w	r0, r0, #1
 800d9dc:	bfd4      	ite	le
 800d9de:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d9e0:	9308      	strgt	r3, [sp, #32]
 800d9e2:	3701      	adds	r7, #1
 800d9e4:	9019      	str	r0, [sp, #100]	@ 0x64
 800d9e6:	e7bf      	b.n	800d968 <_strtod_l+0x148>
 800d9e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d9ea:	1c5a      	adds	r2, r3, #1
 800d9ec:	9219      	str	r2, [sp, #100]	@ 0x64
 800d9ee:	785a      	ldrb	r2, [r3, #1]
 800d9f0:	b37f      	cbz	r7, 800da52 <_strtod_l+0x232>
 800d9f2:	4681      	mov	r9, r0
 800d9f4:	463d      	mov	r5, r7
 800d9f6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d9fa:	2b09      	cmp	r3, #9
 800d9fc:	d912      	bls.n	800da24 <_strtod_l+0x204>
 800d9fe:	2301      	movs	r3, #1
 800da00:	e7c4      	b.n	800d98c <_strtod_l+0x16c>
 800da02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da04:	1c5a      	adds	r2, r3, #1
 800da06:	9219      	str	r2, [sp, #100]	@ 0x64
 800da08:	785a      	ldrb	r2, [r3, #1]
 800da0a:	3001      	adds	r0, #1
 800da0c:	2a30      	cmp	r2, #48	@ 0x30
 800da0e:	d0f8      	beq.n	800da02 <_strtod_l+0x1e2>
 800da10:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800da14:	2b08      	cmp	r3, #8
 800da16:	f200 84d3 	bhi.w	800e3c0 <_strtod_l+0xba0>
 800da1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da1c:	930c      	str	r3, [sp, #48]	@ 0x30
 800da1e:	4681      	mov	r9, r0
 800da20:	2000      	movs	r0, #0
 800da22:	4605      	mov	r5, r0
 800da24:	3a30      	subs	r2, #48	@ 0x30
 800da26:	f100 0301 	add.w	r3, r0, #1
 800da2a:	d02a      	beq.n	800da82 <_strtod_l+0x262>
 800da2c:	4499      	add	r9, r3
 800da2e:	eb00 0c05 	add.w	ip, r0, r5
 800da32:	462b      	mov	r3, r5
 800da34:	210a      	movs	r1, #10
 800da36:	4563      	cmp	r3, ip
 800da38:	d10d      	bne.n	800da56 <_strtod_l+0x236>
 800da3a:	1c69      	adds	r1, r5, #1
 800da3c:	4401      	add	r1, r0
 800da3e:	4428      	add	r0, r5
 800da40:	2808      	cmp	r0, #8
 800da42:	dc16      	bgt.n	800da72 <_strtod_l+0x252>
 800da44:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800da46:	230a      	movs	r3, #10
 800da48:	fb03 2300 	mla	r3, r3, r0, r2
 800da4c:	930a      	str	r3, [sp, #40]	@ 0x28
 800da4e:	2300      	movs	r3, #0
 800da50:	e018      	b.n	800da84 <_strtod_l+0x264>
 800da52:	4638      	mov	r0, r7
 800da54:	e7da      	b.n	800da0c <_strtod_l+0x1ec>
 800da56:	2b08      	cmp	r3, #8
 800da58:	f103 0301 	add.w	r3, r3, #1
 800da5c:	dc03      	bgt.n	800da66 <_strtod_l+0x246>
 800da5e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800da60:	434e      	muls	r6, r1
 800da62:	960a      	str	r6, [sp, #40]	@ 0x28
 800da64:	e7e7      	b.n	800da36 <_strtod_l+0x216>
 800da66:	2b10      	cmp	r3, #16
 800da68:	bfde      	ittt	le
 800da6a:	9e08      	ldrle	r6, [sp, #32]
 800da6c:	434e      	mulle	r6, r1
 800da6e:	9608      	strle	r6, [sp, #32]
 800da70:	e7e1      	b.n	800da36 <_strtod_l+0x216>
 800da72:	280f      	cmp	r0, #15
 800da74:	dceb      	bgt.n	800da4e <_strtod_l+0x22e>
 800da76:	9808      	ldr	r0, [sp, #32]
 800da78:	230a      	movs	r3, #10
 800da7a:	fb03 2300 	mla	r3, r3, r0, r2
 800da7e:	9308      	str	r3, [sp, #32]
 800da80:	e7e5      	b.n	800da4e <_strtod_l+0x22e>
 800da82:	4629      	mov	r1, r5
 800da84:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800da86:	1c50      	adds	r0, r2, #1
 800da88:	9019      	str	r0, [sp, #100]	@ 0x64
 800da8a:	7852      	ldrb	r2, [r2, #1]
 800da8c:	4618      	mov	r0, r3
 800da8e:	460d      	mov	r5, r1
 800da90:	e7b1      	b.n	800d9f6 <_strtod_l+0x1d6>
 800da92:	f04f 0900 	mov.w	r9, #0
 800da96:	2301      	movs	r3, #1
 800da98:	e77d      	b.n	800d996 <_strtod_l+0x176>
 800da9a:	f04f 0c00 	mov.w	ip, #0
 800da9e:	1ca2      	adds	r2, r4, #2
 800daa0:	9219      	str	r2, [sp, #100]	@ 0x64
 800daa2:	78a2      	ldrb	r2, [r4, #2]
 800daa4:	e785      	b.n	800d9b2 <_strtod_l+0x192>
 800daa6:	f04f 0c01 	mov.w	ip, #1
 800daaa:	e7f8      	b.n	800da9e <_strtod_l+0x27e>
 800daac:	0801325c 	.word	0x0801325c
 800dab0:	08013244 	.word	0x08013244
 800dab4:	7ff00000 	.word	0x7ff00000
 800dab8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800daba:	1c51      	adds	r1, r2, #1
 800dabc:	9119      	str	r1, [sp, #100]	@ 0x64
 800dabe:	7852      	ldrb	r2, [r2, #1]
 800dac0:	2a30      	cmp	r2, #48	@ 0x30
 800dac2:	d0f9      	beq.n	800dab8 <_strtod_l+0x298>
 800dac4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800dac8:	2908      	cmp	r1, #8
 800daca:	f63f af78 	bhi.w	800d9be <_strtod_l+0x19e>
 800dace:	3a30      	subs	r2, #48	@ 0x30
 800dad0:	920e      	str	r2, [sp, #56]	@ 0x38
 800dad2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dad4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800dad6:	f04f 080a 	mov.w	r8, #10
 800dada:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dadc:	1c56      	adds	r6, r2, #1
 800dade:	9619      	str	r6, [sp, #100]	@ 0x64
 800dae0:	7852      	ldrb	r2, [r2, #1]
 800dae2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800dae6:	f1be 0f09 	cmp.w	lr, #9
 800daea:	d939      	bls.n	800db60 <_strtod_l+0x340>
 800daec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800daee:	1a76      	subs	r6, r6, r1
 800daf0:	2e08      	cmp	r6, #8
 800daf2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800daf6:	dc03      	bgt.n	800db00 <_strtod_l+0x2e0>
 800daf8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800dafa:	4588      	cmp	r8, r1
 800dafc:	bfa8      	it	ge
 800dafe:	4688      	movge	r8, r1
 800db00:	f1bc 0f00 	cmp.w	ip, #0
 800db04:	d001      	beq.n	800db0a <_strtod_l+0x2ea>
 800db06:	f1c8 0800 	rsb	r8, r8, #0
 800db0a:	2d00      	cmp	r5, #0
 800db0c:	d14e      	bne.n	800dbac <_strtod_l+0x38c>
 800db0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800db10:	4308      	orrs	r0, r1
 800db12:	f47f aebe 	bne.w	800d892 <_strtod_l+0x72>
 800db16:	2b00      	cmp	r3, #0
 800db18:	f47f aed6 	bne.w	800d8c8 <_strtod_l+0xa8>
 800db1c:	2a69      	cmp	r2, #105	@ 0x69
 800db1e:	d028      	beq.n	800db72 <_strtod_l+0x352>
 800db20:	dc25      	bgt.n	800db6e <_strtod_l+0x34e>
 800db22:	2a49      	cmp	r2, #73	@ 0x49
 800db24:	d025      	beq.n	800db72 <_strtod_l+0x352>
 800db26:	2a4e      	cmp	r2, #78	@ 0x4e
 800db28:	f47f aece 	bne.w	800d8c8 <_strtod_l+0xa8>
 800db2c:	499b      	ldr	r1, [pc, #620]	@ (800dd9c <_strtod_l+0x57c>)
 800db2e:	a819      	add	r0, sp, #100	@ 0x64
 800db30:	f002 fe9e 	bl	8010870 <__match>
 800db34:	2800      	cmp	r0, #0
 800db36:	f43f aec7 	beq.w	800d8c8 <_strtod_l+0xa8>
 800db3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db3c:	781b      	ldrb	r3, [r3, #0]
 800db3e:	2b28      	cmp	r3, #40	@ 0x28
 800db40:	d12e      	bne.n	800dba0 <_strtod_l+0x380>
 800db42:	4997      	ldr	r1, [pc, #604]	@ (800dda0 <_strtod_l+0x580>)
 800db44:	aa1c      	add	r2, sp, #112	@ 0x70
 800db46:	a819      	add	r0, sp, #100	@ 0x64
 800db48:	f002 fea6 	bl	8010898 <__hexnan>
 800db4c:	2805      	cmp	r0, #5
 800db4e:	d127      	bne.n	800dba0 <_strtod_l+0x380>
 800db50:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800db52:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800db56:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800db5a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800db5e:	e698      	b.n	800d892 <_strtod_l+0x72>
 800db60:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800db62:	fb08 2101 	mla	r1, r8, r1, r2
 800db66:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800db6a:	920e      	str	r2, [sp, #56]	@ 0x38
 800db6c:	e7b5      	b.n	800dada <_strtod_l+0x2ba>
 800db6e:	2a6e      	cmp	r2, #110	@ 0x6e
 800db70:	e7da      	b.n	800db28 <_strtod_l+0x308>
 800db72:	498c      	ldr	r1, [pc, #560]	@ (800dda4 <_strtod_l+0x584>)
 800db74:	a819      	add	r0, sp, #100	@ 0x64
 800db76:	f002 fe7b 	bl	8010870 <__match>
 800db7a:	2800      	cmp	r0, #0
 800db7c:	f43f aea4 	beq.w	800d8c8 <_strtod_l+0xa8>
 800db80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db82:	4989      	ldr	r1, [pc, #548]	@ (800dda8 <_strtod_l+0x588>)
 800db84:	3b01      	subs	r3, #1
 800db86:	a819      	add	r0, sp, #100	@ 0x64
 800db88:	9319      	str	r3, [sp, #100]	@ 0x64
 800db8a:	f002 fe71 	bl	8010870 <__match>
 800db8e:	b910      	cbnz	r0, 800db96 <_strtod_l+0x376>
 800db90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db92:	3301      	adds	r3, #1
 800db94:	9319      	str	r3, [sp, #100]	@ 0x64
 800db96:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ddb8 <_strtod_l+0x598>
 800db9a:	f04f 0a00 	mov.w	sl, #0
 800db9e:	e678      	b.n	800d892 <_strtod_l+0x72>
 800dba0:	4882      	ldr	r0, [pc, #520]	@ (800ddac <_strtod_l+0x58c>)
 800dba2:	f001 fd19 	bl	800f5d8 <nan>
 800dba6:	ec5b ab10 	vmov	sl, fp, d0
 800dbaa:	e672      	b.n	800d892 <_strtod_l+0x72>
 800dbac:	eba8 0309 	sub.w	r3, r8, r9
 800dbb0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800dbb2:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbb4:	2f00      	cmp	r7, #0
 800dbb6:	bf08      	it	eq
 800dbb8:	462f      	moveq	r7, r5
 800dbba:	2d10      	cmp	r5, #16
 800dbbc:	462c      	mov	r4, r5
 800dbbe:	bfa8      	it	ge
 800dbc0:	2410      	movge	r4, #16
 800dbc2:	f7f2 fcbf 	bl	8000544 <__aeabi_ui2d>
 800dbc6:	2d09      	cmp	r5, #9
 800dbc8:	4682      	mov	sl, r0
 800dbca:	468b      	mov	fp, r1
 800dbcc:	dc13      	bgt.n	800dbf6 <_strtod_l+0x3d6>
 800dbce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	f43f ae5e 	beq.w	800d892 <_strtod_l+0x72>
 800dbd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbd8:	dd78      	ble.n	800dccc <_strtod_l+0x4ac>
 800dbda:	2b16      	cmp	r3, #22
 800dbdc:	dc5f      	bgt.n	800dc9e <_strtod_l+0x47e>
 800dbde:	4974      	ldr	r1, [pc, #464]	@ (800ddb0 <_strtod_l+0x590>)
 800dbe0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dbe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbe8:	4652      	mov	r2, sl
 800dbea:	465b      	mov	r3, fp
 800dbec:	f7f2 fd24 	bl	8000638 <__aeabi_dmul>
 800dbf0:	4682      	mov	sl, r0
 800dbf2:	468b      	mov	fp, r1
 800dbf4:	e64d      	b.n	800d892 <_strtod_l+0x72>
 800dbf6:	4b6e      	ldr	r3, [pc, #440]	@ (800ddb0 <_strtod_l+0x590>)
 800dbf8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dbfc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800dc00:	f7f2 fd1a 	bl	8000638 <__aeabi_dmul>
 800dc04:	4682      	mov	sl, r0
 800dc06:	9808      	ldr	r0, [sp, #32]
 800dc08:	468b      	mov	fp, r1
 800dc0a:	f7f2 fc9b 	bl	8000544 <__aeabi_ui2d>
 800dc0e:	4602      	mov	r2, r0
 800dc10:	460b      	mov	r3, r1
 800dc12:	4650      	mov	r0, sl
 800dc14:	4659      	mov	r1, fp
 800dc16:	f7f2 fb59 	bl	80002cc <__adddf3>
 800dc1a:	2d0f      	cmp	r5, #15
 800dc1c:	4682      	mov	sl, r0
 800dc1e:	468b      	mov	fp, r1
 800dc20:	ddd5      	ble.n	800dbce <_strtod_l+0x3ae>
 800dc22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc24:	1b2c      	subs	r4, r5, r4
 800dc26:	441c      	add	r4, r3
 800dc28:	2c00      	cmp	r4, #0
 800dc2a:	f340 8096 	ble.w	800dd5a <_strtod_l+0x53a>
 800dc2e:	f014 030f 	ands.w	r3, r4, #15
 800dc32:	d00a      	beq.n	800dc4a <_strtod_l+0x42a>
 800dc34:	495e      	ldr	r1, [pc, #376]	@ (800ddb0 <_strtod_l+0x590>)
 800dc36:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dc3a:	4652      	mov	r2, sl
 800dc3c:	465b      	mov	r3, fp
 800dc3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc42:	f7f2 fcf9 	bl	8000638 <__aeabi_dmul>
 800dc46:	4682      	mov	sl, r0
 800dc48:	468b      	mov	fp, r1
 800dc4a:	f034 040f 	bics.w	r4, r4, #15
 800dc4e:	d073      	beq.n	800dd38 <_strtod_l+0x518>
 800dc50:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800dc54:	dd48      	ble.n	800dce8 <_strtod_l+0x4c8>
 800dc56:	2400      	movs	r4, #0
 800dc58:	46a0      	mov	r8, r4
 800dc5a:	940a      	str	r4, [sp, #40]	@ 0x28
 800dc5c:	46a1      	mov	r9, r4
 800dc5e:	9a05      	ldr	r2, [sp, #20]
 800dc60:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ddb8 <_strtod_l+0x598>
 800dc64:	2322      	movs	r3, #34	@ 0x22
 800dc66:	6013      	str	r3, [r2, #0]
 800dc68:	f04f 0a00 	mov.w	sl, #0
 800dc6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	f43f ae0f 	beq.w	800d892 <_strtod_l+0x72>
 800dc74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dc76:	9805      	ldr	r0, [sp, #20]
 800dc78:	f002 ffb2 	bl	8010be0 <_Bfree>
 800dc7c:	9805      	ldr	r0, [sp, #20]
 800dc7e:	4649      	mov	r1, r9
 800dc80:	f002 ffae 	bl	8010be0 <_Bfree>
 800dc84:	9805      	ldr	r0, [sp, #20]
 800dc86:	4641      	mov	r1, r8
 800dc88:	f002 ffaa 	bl	8010be0 <_Bfree>
 800dc8c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dc8e:	9805      	ldr	r0, [sp, #20]
 800dc90:	f002 ffa6 	bl	8010be0 <_Bfree>
 800dc94:	9805      	ldr	r0, [sp, #20]
 800dc96:	4621      	mov	r1, r4
 800dc98:	f002 ffa2 	bl	8010be0 <_Bfree>
 800dc9c:	e5f9      	b.n	800d892 <_strtod_l+0x72>
 800dc9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dca0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800dca4:	4293      	cmp	r3, r2
 800dca6:	dbbc      	blt.n	800dc22 <_strtod_l+0x402>
 800dca8:	4c41      	ldr	r4, [pc, #260]	@ (800ddb0 <_strtod_l+0x590>)
 800dcaa:	f1c5 050f 	rsb	r5, r5, #15
 800dcae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800dcb2:	4652      	mov	r2, sl
 800dcb4:	465b      	mov	r3, fp
 800dcb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcba:	f7f2 fcbd 	bl	8000638 <__aeabi_dmul>
 800dcbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcc0:	1b5d      	subs	r5, r3, r5
 800dcc2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800dcc6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800dcca:	e78f      	b.n	800dbec <_strtod_l+0x3cc>
 800dccc:	3316      	adds	r3, #22
 800dcce:	dba8      	blt.n	800dc22 <_strtod_l+0x402>
 800dcd0:	4b37      	ldr	r3, [pc, #220]	@ (800ddb0 <_strtod_l+0x590>)
 800dcd2:	eba9 0808 	sub.w	r8, r9, r8
 800dcd6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800dcda:	e9d8 2300 	ldrd	r2, r3, [r8]
 800dcde:	4650      	mov	r0, sl
 800dce0:	4659      	mov	r1, fp
 800dce2:	f7f2 fdd3 	bl	800088c <__aeabi_ddiv>
 800dce6:	e783      	b.n	800dbf0 <_strtod_l+0x3d0>
 800dce8:	4b32      	ldr	r3, [pc, #200]	@ (800ddb4 <_strtod_l+0x594>)
 800dcea:	9308      	str	r3, [sp, #32]
 800dcec:	2300      	movs	r3, #0
 800dcee:	1124      	asrs	r4, r4, #4
 800dcf0:	4650      	mov	r0, sl
 800dcf2:	4659      	mov	r1, fp
 800dcf4:	461e      	mov	r6, r3
 800dcf6:	2c01      	cmp	r4, #1
 800dcf8:	dc21      	bgt.n	800dd3e <_strtod_l+0x51e>
 800dcfa:	b10b      	cbz	r3, 800dd00 <_strtod_l+0x4e0>
 800dcfc:	4682      	mov	sl, r0
 800dcfe:	468b      	mov	fp, r1
 800dd00:	492c      	ldr	r1, [pc, #176]	@ (800ddb4 <_strtod_l+0x594>)
 800dd02:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800dd06:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800dd0a:	4652      	mov	r2, sl
 800dd0c:	465b      	mov	r3, fp
 800dd0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd12:	f7f2 fc91 	bl	8000638 <__aeabi_dmul>
 800dd16:	4b28      	ldr	r3, [pc, #160]	@ (800ddb8 <_strtod_l+0x598>)
 800dd18:	460a      	mov	r2, r1
 800dd1a:	400b      	ands	r3, r1
 800dd1c:	4927      	ldr	r1, [pc, #156]	@ (800ddbc <_strtod_l+0x59c>)
 800dd1e:	428b      	cmp	r3, r1
 800dd20:	4682      	mov	sl, r0
 800dd22:	d898      	bhi.n	800dc56 <_strtod_l+0x436>
 800dd24:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800dd28:	428b      	cmp	r3, r1
 800dd2a:	bf86      	itte	hi
 800dd2c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ddc0 <_strtod_l+0x5a0>
 800dd30:	f04f 3aff 	movhi.w	sl, #4294967295
 800dd34:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800dd38:	2300      	movs	r3, #0
 800dd3a:	9308      	str	r3, [sp, #32]
 800dd3c:	e07a      	b.n	800de34 <_strtod_l+0x614>
 800dd3e:	07e2      	lsls	r2, r4, #31
 800dd40:	d505      	bpl.n	800dd4e <_strtod_l+0x52e>
 800dd42:	9b08      	ldr	r3, [sp, #32]
 800dd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd48:	f7f2 fc76 	bl	8000638 <__aeabi_dmul>
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	9a08      	ldr	r2, [sp, #32]
 800dd50:	3208      	adds	r2, #8
 800dd52:	3601      	adds	r6, #1
 800dd54:	1064      	asrs	r4, r4, #1
 800dd56:	9208      	str	r2, [sp, #32]
 800dd58:	e7cd      	b.n	800dcf6 <_strtod_l+0x4d6>
 800dd5a:	d0ed      	beq.n	800dd38 <_strtod_l+0x518>
 800dd5c:	4264      	negs	r4, r4
 800dd5e:	f014 020f 	ands.w	r2, r4, #15
 800dd62:	d00a      	beq.n	800dd7a <_strtod_l+0x55a>
 800dd64:	4b12      	ldr	r3, [pc, #72]	@ (800ddb0 <_strtod_l+0x590>)
 800dd66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd6a:	4650      	mov	r0, sl
 800dd6c:	4659      	mov	r1, fp
 800dd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd72:	f7f2 fd8b 	bl	800088c <__aeabi_ddiv>
 800dd76:	4682      	mov	sl, r0
 800dd78:	468b      	mov	fp, r1
 800dd7a:	1124      	asrs	r4, r4, #4
 800dd7c:	d0dc      	beq.n	800dd38 <_strtod_l+0x518>
 800dd7e:	2c1f      	cmp	r4, #31
 800dd80:	dd20      	ble.n	800ddc4 <_strtod_l+0x5a4>
 800dd82:	2400      	movs	r4, #0
 800dd84:	46a0      	mov	r8, r4
 800dd86:	940a      	str	r4, [sp, #40]	@ 0x28
 800dd88:	46a1      	mov	r9, r4
 800dd8a:	9a05      	ldr	r2, [sp, #20]
 800dd8c:	2322      	movs	r3, #34	@ 0x22
 800dd8e:	f04f 0a00 	mov.w	sl, #0
 800dd92:	f04f 0b00 	mov.w	fp, #0
 800dd96:	6013      	str	r3, [r2, #0]
 800dd98:	e768      	b.n	800dc6c <_strtod_l+0x44c>
 800dd9a:	bf00      	nop
 800dd9c:	080132a5 	.word	0x080132a5
 800dda0:	08013248 	.word	0x08013248
 800dda4:	0801329d 	.word	0x0801329d
 800dda8:	08013389 	.word	0x08013389
 800ddac:	08013385 	.word	0x08013385
 800ddb0:	080134f0 	.word	0x080134f0
 800ddb4:	080134c8 	.word	0x080134c8
 800ddb8:	7ff00000 	.word	0x7ff00000
 800ddbc:	7ca00000 	.word	0x7ca00000
 800ddc0:	7fefffff 	.word	0x7fefffff
 800ddc4:	f014 0310 	ands.w	r3, r4, #16
 800ddc8:	bf18      	it	ne
 800ddca:	236a      	movne	r3, #106	@ 0x6a
 800ddcc:	4ea9      	ldr	r6, [pc, #676]	@ (800e074 <_strtod_l+0x854>)
 800ddce:	9308      	str	r3, [sp, #32]
 800ddd0:	4650      	mov	r0, sl
 800ddd2:	4659      	mov	r1, fp
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	07e2      	lsls	r2, r4, #31
 800ddd8:	d504      	bpl.n	800dde4 <_strtod_l+0x5c4>
 800ddda:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ddde:	f7f2 fc2b 	bl	8000638 <__aeabi_dmul>
 800dde2:	2301      	movs	r3, #1
 800dde4:	1064      	asrs	r4, r4, #1
 800dde6:	f106 0608 	add.w	r6, r6, #8
 800ddea:	d1f4      	bne.n	800ddd6 <_strtod_l+0x5b6>
 800ddec:	b10b      	cbz	r3, 800ddf2 <_strtod_l+0x5d2>
 800ddee:	4682      	mov	sl, r0
 800ddf0:	468b      	mov	fp, r1
 800ddf2:	9b08      	ldr	r3, [sp, #32]
 800ddf4:	b1b3      	cbz	r3, 800de24 <_strtod_l+0x604>
 800ddf6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ddfa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	4659      	mov	r1, fp
 800de02:	dd0f      	ble.n	800de24 <_strtod_l+0x604>
 800de04:	2b1f      	cmp	r3, #31
 800de06:	dd55      	ble.n	800deb4 <_strtod_l+0x694>
 800de08:	2b34      	cmp	r3, #52	@ 0x34
 800de0a:	bfde      	ittt	le
 800de0c:	f04f 33ff 	movle.w	r3, #4294967295
 800de10:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800de14:	4093      	lslle	r3, r2
 800de16:	f04f 0a00 	mov.w	sl, #0
 800de1a:	bfcc      	ite	gt
 800de1c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800de20:	ea03 0b01 	andle.w	fp, r3, r1
 800de24:	2200      	movs	r2, #0
 800de26:	2300      	movs	r3, #0
 800de28:	4650      	mov	r0, sl
 800de2a:	4659      	mov	r1, fp
 800de2c:	f7f2 fe6c 	bl	8000b08 <__aeabi_dcmpeq>
 800de30:	2800      	cmp	r0, #0
 800de32:	d1a6      	bne.n	800dd82 <_strtod_l+0x562>
 800de34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de36:	9300      	str	r3, [sp, #0]
 800de38:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800de3a:	9805      	ldr	r0, [sp, #20]
 800de3c:	462b      	mov	r3, r5
 800de3e:	463a      	mov	r2, r7
 800de40:	f002 ff36 	bl	8010cb0 <__s2b>
 800de44:	900a      	str	r0, [sp, #40]	@ 0x28
 800de46:	2800      	cmp	r0, #0
 800de48:	f43f af05 	beq.w	800dc56 <_strtod_l+0x436>
 800de4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de4e:	2a00      	cmp	r2, #0
 800de50:	eba9 0308 	sub.w	r3, r9, r8
 800de54:	bfa8      	it	ge
 800de56:	2300      	movge	r3, #0
 800de58:	9312      	str	r3, [sp, #72]	@ 0x48
 800de5a:	2400      	movs	r4, #0
 800de5c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800de60:	9316      	str	r3, [sp, #88]	@ 0x58
 800de62:	46a0      	mov	r8, r4
 800de64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de66:	9805      	ldr	r0, [sp, #20]
 800de68:	6859      	ldr	r1, [r3, #4]
 800de6a:	f002 fe79 	bl	8010b60 <_Balloc>
 800de6e:	4681      	mov	r9, r0
 800de70:	2800      	cmp	r0, #0
 800de72:	f43f aef4 	beq.w	800dc5e <_strtod_l+0x43e>
 800de76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de78:	691a      	ldr	r2, [r3, #16]
 800de7a:	3202      	adds	r2, #2
 800de7c:	f103 010c 	add.w	r1, r3, #12
 800de80:	0092      	lsls	r2, r2, #2
 800de82:	300c      	adds	r0, #12
 800de84:	f001 fb99 	bl	800f5ba <memcpy>
 800de88:	ec4b ab10 	vmov	d0, sl, fp
 800de8c:	9805      	ldr	r0, [sp, #20]
 800de8e:	aa1c      	add	r2, sp, #112	@ 0x70
 800de90:	a91b      	add	r1, sp, #108	@ 0x6c
 800de92:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800de96:	f003 fa47 	bl	8011328 <__d2b>
 800de9a:	901a      	str	r0, [sp, #104]	@ 0x68
 800de9c:	2800      	cmp	r0, #0
 800de9e:	f43f aede 	beq.w	800dc5e <_strtod_l+0x43e>
 800dea2:	9805      	ldr	r0, [sp, #20]
 800dea4:	2101      	movs	r1, #1
 800dea6:	f002 ff99 	bl	8010ddc <__i2b>
 800deaa:	4680      	mov	r8, r0
 800deac:	b948      	cbnz	r0, 800dec2 <_strtod_l+0x6a2>
 800deae:	f04f 0800 	mov.w	r8, #0
 800deb2:	e6d4      	b.n	800dc5e <_strtod_l+0x43e>
 800deb4:	f04f 32ff 	mov.w	r2, #4294967295
 800deb8:	fa02 f303 	lsl.w	r3, r2, r3
 800debc:	ea03 0a0a 	and.w	sl, r3, sl
 800dec0:	e7b0      	b.n	800de24 <_strtod_l+0x604>
 800dec2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800dec4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800dec6:	2d00      	cmp	r5, #0
 800dec8:	bfab      	itete	ge
 800deca:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800decc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800dece:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ded0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ded2:	bfac      	ite	ge
 800ded4:	18ef      	addge	r7, r5, r3
 800ded6:	1b5e      	sublt	r6, r3, r5
 800ded8:	9b08      	ldr	r3, [sp, #32]
 800deda:	1aed      	subs	r5, r5, r3
 800dedc:	4415      	add	r5, r2
 800dede:	4b66      	ldr	r3, [pc, #408]	@ (800e078 <_strtod_l+0x858>)
 800dee0:	3d01      	subs	r5, #1
 800dee2:	429d      	cmp	r5, r3
 800dee4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800dee8:	da50      	bge.n	800df8c <_strtod_l+0x76c>
 800deea:	1b5b      	subs	r3, r3, r5
 800deec:	2b1f      	cmp	r3, #31
 800deee:	eba2 0203 	sub.w	r2, r2, r3
 800def2:	f04f 0101 	mov.w	r1, #1
 800def6:	dc3d      	bgt.n	800df74 <_strtod_l+0x754>
 800def8:	fa01 f303 	lsl.w	r3, r1, r3
 800defc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800defe:	2300      	movs	r3, #0
 800df00:	9310      	str	r3, [sp, #64]	@ 0x40
 800df02:	18bd      	adds	r5, r7, r2
 800df04:	9b08      	ldr	r3, [sp, #32]
 800df06:	42af      	cmp	r7, r5
 800df08:	4416      	add	r6, r2
 800df0a:	441e      	add	r6, r3
 800df0c:	463b      	mov	r3, r7
 800df0e:	bfa8      	it	ge
 800df10:	462b      	movge	r3, r5
 800df12:	42b3      	cmp	r3, r6
 800df14:	bfa8      	it	ge
 800df16:	4633      	movge	r3, r6
 800df18:	2b00      	cmp	r3, #0
 800df1a:	bfc2      	ittt	gt
 800df1c:	1aed      	subgt	r5, r5, r3
 800df1e:	1af6      	subgt	r6, r6, r3
 800df20:	1aff      	subgt	r7, r7, r3
 800df22:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800df24:	2b00      	cmp	r3, #0
 800df26:	dd16      	ble.n	800df56 <_strtod_l+0x736>
 800df28:	4641      	mov	r1, r8
 800df2a:	9805      	ldr	r0, [sp, #20]
 800df2c:	461a      	mov	r2, r3
 800df2e:	f003 f815 	bl	8010f5c <__pow5mult>
 800df32:	4680      	mov	r8, r0
 800df34:	2800      	cmp	r0, #0
 800df36:	d0ba      	beq.n	800deae <_strtod_l+0x68e>
 800df38:	4601      	mov	r1, r0
 800df3a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800df3c:	9805      	ldr	r0, [sp, #20]
 800df3e:	f002 ff63 	bl	8010e08 <__multiply>
 800df42:	900e      	str	r0, [sp, #56]	@ 0x38
 800df44:	2800      	cmp	r0, #0
 800df46:	f43f ae8a 	beq.w	800dc5e <_strtod_l+0x43e>
 800df4a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800df4c:	9805      	ldr	r0, [sp, #20]
 800df4e:	f002 fe47 	bl	8010be0 <_Bfree>
 800df52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df54:	931a      	str	r3, [sp, #104]	@ 0x68
 800df56:	2d00      	cmp	r5, #0
 800df58:	dc1d      	bgt.n	800df96 <_strtod_l+0x776>
 800df5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	dd23      	ble.n	800dfa8 <_strtod_l+0x788>
 800df60:	4649      	mov	r1, r9
 800df62:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800df64:	9805      	ldr	r0, [sp, #20]
 800df66:	f002 fff9 	bl	8010f5c <__pow5mult>
 800df6a:	4681      	mov	r9, r0
 800df6c:	b9e0      	cbnz	r0, 800dfa8 <_strtod_l+0x788>
 800df6e:	f04f 0900 	mov.w	r9, #0
 800df72:	e674      	b.n	800dc5e <_strtod_l+0x43e>
 800df74:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800df78:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800df7c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800df80:	35e2      	adds	r5, #226	@ 0xe2
 800df82:	fa01 f305 	lsl.w	r3, r1, r5
 800df86:	9310      	str	r3, [sp, #64]	@ 0x40
 800df88:	9113      	str	r1, [sp, #76]	@ 0x4c
 800df8a:	e7ba      	b.n	800df02 <_strtod_l+0x6e2>
 800df8c:	2300      	movs	r3, #0
 800df8e:	9310      	str	r3, [sp, #64]	@ 0x40
 800df90:	2301      	movs	r3, #1
 800df92:	9313      	str	r3, [sp, #76]	@ 0x4c
 800df94:	e7b5      	b.n	800df02 <_strtod_l+0x6e2>
 800df96:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800df98:	9805      	ldr	r0, [sp, #20]
 800df9a:	462a      	mov	r2, r5
 800df9c:	f003 f838 	bl	8011010 <__lshift>
 800dfa0:	901a      	str	r0, [sp, #104]	@ 0x68
 800dfa2:	2800      	cmp	r0, #0
 800dfa4:	d1d9      	bne.n	800df5a <_strtod_l+0x73a>
 800dfa6:	e65a      	b.n	800dc5e <_strtod_l+0x43e>
 800dfa8:	2e00      	cmp	r6, #0
 800dfaa:	dd07      	ble.n	800dfbc <_strtod_l+0x79c>
 800dfac:	4649      	mov	r1, r9
 800dfae:	9805      	ldr	r0, [sp, #20]
 800dfb0:	4632      	mov	r2, r6
 800dfb2:	f003 f82d 	bl	8011010 <__lshift>
 800dfb6:	4681      	mov	r9, r0
 800dfb8:	2800      	cmp	r0, #0
 800dfba:	d0d8      	beq.n	800df6e <_strtod_l+0x74e>
 800dfbc:	2f00      	cmp	r7, #0
 800dfbe:	dd08      	ble.n	800dfd2 <_strtod_l+0x7b2>
 800dfc0:	4641      	mov	r1, r8
 800dfc2:	9805      	ldr	r0, [sp, #20]
 800dfc4:	463a      	mov	r2, r7
 800dfc6:	f003 f823 	bl	8011010 <__lshift>
 800dfca:	4680      	mov	r8, r0
 800dfcc:	2800      	cmp	r0, #0
 800dfce:	f43f ae46 	beq.w	800dc5e <_strtod_l+0x43e>
 800dfd2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dfd4:	9805      	ldr	r0, [sp, #20]
 800dfd6:	464a      	mov	r2, r9
 800dfd8:	f003 f8a2 	bl	8011120 <__mdiff>
 800dfdc:	4604      	mov	r4, r0
 800dfde:	2800      	cmp	r0, #0
 800dfe0:	f43f ae3d 	beq.w	800dc5e <_strtod_l+0x43e>
 800dfe4:	68c3      	ldr	r3, [r0, #12]
 800dfe6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dfe8:	2300      	movs	r3, #0
 800dfea:	60c3      	str	r3, [r0, #12]
 800dfec:	4641      	mov	r1, r8
 800dfee:	f003 f87b 	bl	80110e8 <__mcmp>
 800dff2:	2800      	cmp	r0, #0
 800dff4:	da46      	bge.n	800e084 <_strtod_l+0x864>
 800dff6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dff8:	ea53 030a 	orrs.w	r3, r3, sl
 800dffc:	d16c      	bne.n	800e0d8 <_strtod_l+0x8b8>
 800dffe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e002:	2b00      	cmp	r3, #0
 800e004:	d168      	bne.n	800e0d8 <_strtod_l+0x8b8>
 800e006:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e00a:	0d1b      	lsrs	r3, r3, #20
 800e00c:	051b      	lsls	r3, r3, #20
 800e00e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e012:	d961      	bls.n	800e0d8 <_strtod_l+0x8b8>
 800e014:	6963      	ldr	r3, [r4, #20]
 800e016:	b913      	cbnz	r3, 800e01e <_strtod_l+0x7fe>
 800e018:	6923      	ldr	r3, [r4, #16]
 800e01a:	2b01      	cmp	r3, #1
 800e01c:	dd5c      	ble.n	800e0d8 <_strtod_l+0x8b8>
 800e01e:	4621      	mov	r1, r4
 800e020:	2201      	movs	r2, #1
 800e022:	9805      	ldr	r0, [sp, #20]
 800e024:	f002 fff4 	bl	8011010 <__lshift>
 800e028:	4641      	mov	r1, r8
 800e02a:	4604      	mov	r4, r0
 800e02c:	f003 f85c 	bl	80110e8 <__mcmp>
 800e030:	2800      	cmp	r0, #0
 800e032:	dd51      	ble.n	800e0d8 <_strtod_l+0x8b8>
 800e034:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e038:	9a08      	ldr	r2, [sp, #32]
 800e03a:	0d1b      	lsrs	r3, r3, #20
 800e03c:	051b      	lsls	r3, r3, #20
 800e03e:	2a00      	cmp	r2, #0
 800e040:	d06b      	beq.n	800e11a <_strtod_l+0x8fa>
 800e042:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e046:	d868      	bhi.n	800e11a <_strtod_l+0x8fa>
 800e048:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e04c:	f67f ae9d 	bls.w	800dd8a <_strtod_l+0x56a>
 800e050:	4b0a      	ldr	r3, [pc, #40]	@ (800e07c <_strtod_l+0x85c>)
 800e052:	4650      	mov	r0, sl
 800e054:	4659      	mov	r1, fp
 800e056:	2200      	movs	r2, #0
 800e058:	f7f2 faee 	bl	8000638 <__aeabi_dmul>
 800e05c:	4b08      	ldr	r3, [pc, #32]	@ (800e080 <_strtod_l+0x860>)
 800e05e:	400b      	ands	r3, r1
 800e060:	4682      	mov	sl, r0
 800e062:	468b      	mov	fp, r1
 800e064:	2b00      	cmp	r3, #0
 800e066:	f47f ae05 	bne.w	800dc74 <_strtod_l+0x454>
 800e06a:	9a05      	ldr	r2, [sp, #20]
 800e06c:	2322      	movs	r3, #34	@ 0x22
 800e06e:	6013      	str	r3, [r2, #0]
 800e070:	e600      	b.n	800dc74 <_strtod_l+0x454>
 800e072:	bf00      	nop
 800e074:	08013270 	.word	0x08013270
 800e078:	fffffc02 	.word	0xfffffc02
 800e07c:	39500000 	.word	0x39500000
 800e080:	7ff00000 	.word	0x7ff00000
 800e084:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e088:	d165      	bne.n	800e156 <_strtod_l+0x936>
 800e08a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e08c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e090:	b35a      	cbz	r2, 800e0ea <_strtod_l+0x8ca>
 800e092:	4a9f      	ldr	r2, [pc, #636]	@ (800e310 <_strtod_l+0xaf0>)
 800e094:	4293      	cmp	r3, r2
 800e096:	d12b      	bne.n	800e0f0 <_strtod_l+0x8d0>
 800e098:	9b08      	ldr	r3, [sp, #32]
 800e09a:	4651      	mov	r1, sl
 800e09c:	b303      	cbz	r3, 800e0e0 <_strtod_l+0x8c0>
 800e09e:	4b9d      	ldr	r3, [pc, #628]	@ (800e314 <_strtod_l+0xaf4>)
 800e0a0:	465a      	mov	r2, fp
 800e0a2:	4013      	ands	r3, r2
 800e0a4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e0a8:	f04f 32ff 	mov.w	r2, #4294967295
 800e0ac:	d81b      	bhi.n	800e0e6 <_strtod_l+0x8c6>
 800e0ae:	0d1b      	lsrs	r3, r3, #20
 800e0b0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e0b4:	fa02 f303 	lsl.w	r3, r2, r3
 800e0b8:	4299      	cmp	r1, r3
 800e0ba:	d119      	bne.n	800e0f0 <_strtod_l+0x8d0>
 800e0bc:	4b96      	ldr	r3, [pc, #600]	@ (800e318 <_strtod_l+0xaf8>)
 800e0be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	d102      	bne.n	800e0ca <_strtod_l+0x8aa>
 800e0c4:	3101      	adds	r1, #1
 800e0c6:	f43f adca 	beq.w	800dc5e <_strtod_l+0x43e>
 800e0ca:	4b92      	ldr	r3, [pc, #584]	@ (800e314 <_strtod_l+0xaf4>)
 800e0cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e0ce:	401a      	ands	r2, r3
 800e0d0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e0d4:	f04f 0a00 	mov.w	sl, #0
 800e0d8:	9b08      	ldr	r3, [sp, #32]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d1b8      	bne.n	800e050 <_strtod_l+0x830>
 800e0de:	e5c9      	b.n	800dc74 <_strtod_l+0x454>
 800e0e0:	f04f 33ff 	mov.w	r3, #4294967295
 800e0e4:	e7e8      	b.n	800e0b8 <_strtod_l+0x898>
 800e0e6:	4613      	mov	r3, r2
 800e0e8:	e7e6      	b.n	800e0b8 <_strtod_l+0x898>
 800e0ea:	ea53 030a 	orrs.w	r3, r3, sl
 800e0ee:	d0a1      	beq.n	800e034 <_strtod_l+0x814>
 800e0f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e0f2:	b1db      	cbz	r3, 800e12c <_strtod_l+0x90c>
 800e0f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e0f6:	4213      	tst	r3, r2
 800e0f8:	d0ee      	beq.n	800e0d8 <_strtod_l+0x8b8>
 800e0fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e0fc:	9a08      	ldr	r2, [sp, #32]
 800e0fe:	4650      	mov	r0, sl
 800e100:	4659      	mov	r1, fp
 800e102:	b1bb      	cbz	r3, 800e134 <_strtod_l+0x914>
 800e104:	f7ff fb6e 	bl	800d7e4 <sulp>
 800e108:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e10c:	ec53 2b10 	vmov	r2, r3, d0
 800e110:	f7f2 f8dc 	bl	80002cc <__adddf3>
 800e114:	4682      	mov	sl, r0
 800e116:	468b      	mov	fp, r1
 800e118:	e7de      	b.n	800e0d8 <_strtod_l+0x8b8>
 800e11a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e11e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e122:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e126:	f04f 3aff 	mov.w	sl, #4294967295
 800e12a:	e7d5      	b.n	800e0d8 <_strtod_l+0x8b8>
 800e12c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e12e:	ea13 0f0a 	tst.w	r3, sl
 800e132:	e7e1      	b.n	800e0f8 <_strtod_l+0x8d8>
 800e134:	f7ff fb56 	bl	800d7e4 <sulp>
 800e138:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e13c:	ec53 2b10 	vmov	r2, r3, d0
 800e140:	f7f2 f8c2 	bl	80002c8 <__aeabi_dsub>
 800e144:	2200      	movs	r2, #0
 800e146:	2300      	movs	r3, #0
 800e148:	4682      	mov	sl, r0
 800e14a:	468b      	mov	fp, r1
 800e14c:	f7f2 fcdc 	bl	8000b08 <__aeabi_dcmpeq>
 800e150:	2800      	cmp	r0, #0
 800e152:	d0c1      	beq.n	800e0d8 <_strtod_l+0x8b8>
 800e154:	e619      	b.n	800dd8a <_strtod_l+0x56a>
 800e156:	4641      	mov	r1, r8
 800e158:	4620      	mov	r0, r4
 800e15a:	f003 f93d 	bl	80113d8 <__ratio>
 800e15e:	ec57 6b10 	vmov	r6, r7, d0
 800e162:	2200      	movs	r2, #0
 800e164:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e168:	4630      	mov	r0, r6
 800e16a:	4639      	mov	r1, r7
 800e16c:	f7f2 fce0 	bl	8000b30 <__aeabi_dcmple>
 800e170:	2800      	cmp	r0, #0
 800e172:	d06f      	beq.n	800e254 <_strtod_l+0xa34>
 800e174:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e176:	2b00      	cmp	r3, #0
 800e178:	d17a      	bne.n	800e270 <_strtod_l+0xa50>
 800e17a:	f1ba 0f00 	cmp.w	sl, #0
 800e17e:	d158      	bne.n	800e232 <_strtod_l+0xa12>
 800e180:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e182:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e186:	2b00      	cmp	r3, #0
 800e188:	d15a      	bne.n	800e240 <_strtod_l+0xa20>
 800e18a:	4b64      	ldr	r3, [pc, #400]	@ (800e31c <_strtod_l+0xafc>)
 800e18c:	2200      	movs	r2, #0
 800e18e:	4630      	mov	r0, r6
 800e190:	4639      	mov	r1, r7
 800e192:	f7f2 fcc3 	bl	8000b1c <__aeabi_dcmplt>
 800e196:	2800      	cmp	r0, #0
 800e198:	d159      	bne.n	800e24e <_strtod_l+0xa2e>
 800e19a:	4630      	mov	r0, r6
 800e19c:	4639      	mov	r1, r7
 800e19e:	4b60      	ldr	r3, [pc, #384]	@ (800e320 <_strtod_l+0xb00>)
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	f7f2 fa49 	bl	8000638 <__aeabi_dmul>
 800e1a6:	4606      	mov	r6, r0
 800e1a8:	460f      	mov	r7, r1
 800e1aa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e1ae:	9606      	str	r6, [sp, #24]
 800e1b0:	9307      	str	r3, [sp, #28]
 800e1b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e1b6:	4d57      	ldr	r5, [pc, #348]	@ (800e314 <_strtod_l+0xaf4>)
 800e1b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e1bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1be:	401d      	ands	r5, r3
 800e1c0:	4b58      	ldr	r3, [pc, #352]	@ (800e324 <_strtod_l+0xb04>)
 800e1c2:	429d      	cmp	r5, r3
 800e1c4:	f040 80b2 	bne.w	800e32c <_strtod_l+0xb0c>
 800e1c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1ca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e1ce:	ec4b ab10 	vmov	d0, sl, fp
 800e1d2:	f003 f839 	bl	8011248 <__ulp>
 800e1d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e1da:	ec51 0b10 	vmov	r0, r1, d0
 800e1de:	f7f2 fa2b 	bl	8000638 <__aeabi_dmul>
 800e1e2:	4652      	mov	r2, sl
 800e1e4:	465b      	mov	r3, fp
 800e1e6:	f7f2 f871 	bl	80002cc <__adddf3>
 800e1ea:	460b      	mov	r3, r1
 800e1ec:	4949      	ldr	r1, [pc, #292]	@ (800e314 <_strtod_l+0xaf4>)
 800e1ee:	4a4e      	ldr	r2, [pc, #312]	@ (800e328 <_strtod_l+0xb08>)
 800e1f0:	4019      	ands	r1, r3
 800e1f2:	4291      	cmp	r1, r2
 800e1f4:	4682      	mov	sl, r0
 800e1f6:	d942      	bls.n	800e27e <_strtod_l+0xa5e>
 800e1f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e1fa:	4b47      	ldr	r3, [pc, #284]	@ (800e318 <_strtod_l+0xaf8>)
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d103      	bne.n	800e208 <_strtod_l+0x9e8>
 800e200:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e202:	3301      	adds	r3, #1
 800e204:	f43f ad2b 	beq.w	800dc5e <_strtod_l+0x43e>
 800e208:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e318 <_strtod_l+0xaf8>
 800e20c:	f04f 3aff 	mov.w	sl, #4294967295
 800e210:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e212:	9805      	ldr	r0, [sp, #20]
 800e214:	f002 fce4 	bl	8010be0 <_Bfree>
 800e218:	9805      	ldr	r0, [sp, #20]
 800e21a:	4649      	mov	r1, r9
 800e21c:	f002 fce0 	bl	8010be0 <_Bfree>
 800e220:	9805      	ldr	r0, [sp, #20]
 800e222:	4641      	mov	r1, r8
 800e224:	f002 fcdc 	bl	8010be0 <_Bfree>
 800e228:	9805      	ldr	r0, [sp, #20]
 800e22a:	4621      	mov	r1, r4
 800e22c:	f002 fcd8 	bl	8010be0 <_Bfree>
 800e230:	e618      	b.n	800de64 <_strtod_l+0x644>
 800e232:	f1ba 0f01 	cmp.w	sl, #1
 800e236:	d103      	bne.n	800e240 <_strtod_l+0xa20>
 800e238:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	f43f ada5 	beq.w	800dd8a <_strtod_l+0x56a>
 800e240:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e2f0 <_strtod_l+0xad0>
 800e244:	4f35      	ldr	r7, [pc, #212]	@ (800e31c <_strtod_l+0xafc>)
 800e246:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e24a:	2600      	movs	r6, #0
 800e24c:	e7b1      	b.n	800e1b2 <_strtod_l+0x992>
 800e24e:	4f34      	ldr	r7, [pc, #208]	@ (800e320 <_strtod_l+0xb00>)
 800e250:	2600      	movs	r6, #0
 800e252:	e7aa      	b.n	800e1aa <_strtod_l+0x98a>
 800e254:	4b32      	ldr	r3, [pc, #200]	@ (800e320 <_strtod_l+0xb00>)
 800e256:	4630      	mov	r0, r6
 800e258:	4639      	mov	r1, r7
 800e25a:	2200      	movs	r2, #0
 800e25c:	f7f2 f9ec 	bl	8000638 <__aeabi_dmul>
 800e260:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e262:	4606      	mov	r6, r0
 800e264:	460f      	mov	r7, r1
 800e266:	2b00      	cmp	r3, #0
 800e268:	d09f      	beq.n	800e1aa <_strtod_l+0x98a>
 800e26a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e26e:	e7a0      	b.n	800e1b2 <_strtod_l+0x992>
 800e270:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e2f8 <_strtod_l+0xad8>
 800e274:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e278:	ec57 6b17 	vmov	r6, r7, d7
 800e27c:	e799      	b.n	800e1b2 <_strtod_l+0x992>
 800e27e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e282:	9b08      	ldr	r3, [sp, #32]
 800e284:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d1c1      	bne.n	800e210 <_strtod_l+0x9f0>
 800e28c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e290:	0d1b      	lsrs	r3, r3, #20
 800e292:	051b      	lsls	r3, r3, #20
 800e294:	429d      	cmp	r5, r3
 800e296:	d1bb      	bne.n	800e210 <_strtod_l+0x9f0>
 800e298:	4630      	mov	r0, r6
 800e29a:	4639      	mov	r1, r7
 800e29c:	f7f2 fd2c 	bl	8000cf8 <__aeabi_d2lz>
 800e2a0:	f7f2 f99c 	bl	80005dc <__aeabi_l2d>
 800e2a4:	4602      	mov	r2, r0
 800e2a6:	460b      	mov	r3, r1
 800e2a8:	4630      	mov	r0, r6
 800e2aa:	4639      	mov	r1, r7
 800e2ac:	f7f2 f80c 	bl	80002c8 <__aeabi_dsub>
 800e2b0:	460b      	mov	r3, r1
 800e2b2:	4602      	mov	r2, r0
 800e2b4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e2b8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e2bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e2be:	ea46 060a 	orr.w	r6, r6, sl
 800e2c2:	431e      	orrs	r6, r3
 800e2c4:	d06f      	beq.n	800e3a6 <_strtod_l+0xb86>
 800e2c6:	a30e      	add	r3, pc, #56	@ (adr r3, 800e300 <_strtod_l+0xae0>)
 800e2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2cc:	f7f2 fc26 	bl	8000b1c <__aeabi_dcmplt>
 800e2d0:	2800      	cmp	r0, #0
 800e2d2:	f47f accf 	bne.w	800dc74 <_strtod_l+0x454>
 800e2d6:	a30c      	add	r3, pc, #48	@ (adr r3, 800e308 <_strtod_l+0xae8>)
 800e2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e2e0:	f7f2 fc3a 	bl	8000b58 <__aeabi_dcmpgt>
 800e2e4:	2800      	cmp	r0, #0
 800e2e6:	d093      	beq.n	800e210 <_strtod_l+0x9f0>
 800e2e8:	e4c4      	b.n	800dc74 <_strtod_l+0x454>
 800e2ea:	bf00      	nop
 800e2ec:	f3af 8000 	nop.w
 800e2f0:	00000000 	.word	0x00000000
 800e2f4:	bff00000 	.word	0xbff00000
 800e2f8:	00000000 	.word	0x00000000
 800e2fc:	3ff00000 	.word	0x3ff00000
 800e300:	94a03595 	.word	0x94a03595
 800e304:	3fdfffff 	.word	0x3fdfffff
 800e308:	35afe535 	.word	0x35afe535
 800e30c:	3fe00000 	.word	0x3fe00000
 800e310:	000fffff 	.word	0x000fffff
 800e314:	7ff00000 	.word	0x7ff00000
 800e318:	7fefffff 	.word	0x7fefffff
 800e31c:	3ff00000 	.word	0x3ff00000
 800e320:	3fe00000 	.word	0x3fe00000
 800e324:	7fe00000 	.word	0x7fe00000
 800e328:	7c9fffff 	.word	0x7c9fffff
 800e32c:	9b08      	ldr	r3, [sp, #32]
 800e32e:	b323      	cbz	r3, 800e37a <_strtod_l+0xb5a>
 800e330:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e334:	d821      	bhi.n	800e37a <_strtod_l+0xb5a>
 800e336:	a328      	add	r3, pc, #160	@ (adr r3, 800e3d8 <_strtod_l+0xbb8>)
 800e338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e33c:	4630      	mov	r0, r6
 800e33e:	4639      	mov	r1, r7
 800e340:	f7f2 fbf6 	bl	8000b30 <__aeabi_dcmple>
 800e344:	b1a0      	cbz	r0, 800e370 <_strtod_l+0xb50>
 800e346:	4639      	mov	r1, r7
 800e348:	4630      	mov	r0, r6
 800e34a:	f7f2 fc4d 	bl	8000be8 <__aeabi_d2uiz>
 800e34e:	2801      	cmp	r0, #1
 800e350:	bf38      	it	cc
 800e352:	2001      	movcc	r0, #1
 800e354:	f7f2 f8f6 	bl	8000544 <__aeabi_ui2d>
 800e358:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e35a:	4606      	mov	r6, r0
 800e35c:	460f      	mov	r7, r1
 800e35e:	b9fb      	cbnz	r3, 800e3a0 <_strtod_l+0xb80>
 800e360:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e364:	9014      	str	r0, [sp, #80]	@ 0x50
 800e366:	9315      	str	r3, [sp, #84]	@ 0x54
 800e368:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e36c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e370:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e372:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e376:	1b5b      	subs	r3, r3, r5
 800e378:	9311      	str	r3, [sp, #68]	@ 0x44
 800e37a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e37e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e382:	f002 ff61 	bl	8011248 <__ulp>
 800e386:	4650      	mov	r0, sl
 800e388:	ec53 2b10 	vmov	r2, r3, d0
 800e38c:	4659      	mov	r1, fp
 800e38e:	f7f2 f953 	bl	8000638 <__aeabi_dmul>
 800e392:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e396:	f7f1 ff99 	bl	80002cc <__adddf3>
 800e39a:	4682      	mov	sl, r0
 800e39c:	468b      	mov	fp, r1
 800e39e:	e770      	b.n	800e282 <_strtod_l+0xa62>
 800e3a0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e3a4:	e7e0      	b.n	800e368 <_strtod_l+0xb48>
 800e3a6:	a30e      	add	r3, pc, #56	@ (adr r3, 800e3e0 <_strtod_l+0xbc0>)
 800e3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ac:	f7f2 fbb6 	bl	8000b1c <__aeabi_dcmplt>
 800e3b0:	e798      	b.n	800e2e4 <_strtod_l+0xac4>
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e3b6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e3b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e3ba:	6013      	str	r3, [r2, #0]
 800e3bc:	f7ff ba6d 	b.w	800d89a <_strtod_l+0x7a>
 800e3c0:	2a65      	cmp	r2, #101	@ 0x65
 800e3c2:	f43f ab66 	beq.w	800da92 <_strtod_l+0x272>
 800e3c6:	2a45      	cmp	r2, #69	@ 0x45
 800e3c8:	f43f ab63 	beq.w	800da92 <_strtod_l+0x272>
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	f7ff bb9e 	b.w	800db0e <_strtod_l+0x2ee>
 800e3d2:	bf00      	nop
 800e3d4:	f3af 8000 	nop.w
 800e3d8:	ffc00000 	.word	0xffc00000
 800e3dc:	41dfffff 	.word	0x41dfffff
 800e3e0:	94a03595 	.word	0x94a03595
 800e3e4:	3fcfffff 	.word	0x3fcfffff

0800e3e8 <_strtod_r>:
 800e3e8:	4b01      	ldr	r3, [pc, #4]	@ (800e3f0 <_strtod_r+0x8>)
 800e3ea:	f7ff ba19 	b.w	800d820 <_strtod_l>
 800e3ee:	bf00      	nop
 800e3f0:	2000002c 	.word	0x2000002c

0800e3f4 <strtof>:
 800e3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3f8:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800e4b8 <strtof+0xc4>
 800e3fc:	4b29      	ldr	r3, [pc, #164]	@ (800e4a4 <strtof+0xb0>)
 800e3fe:	460a      	mov	r2, r1
 800e400:	ed2d 8b02 	vpush	{d8}
 800e404:	4601      	mov	r1, r0
 800e406:	f8d8 0000 	ldr.w	r0, [r8]
 800e40a:	f7ff fa09 	bl	800d820 <_strtod_l>
 800e40e:	ec55 4b10 	vmov	r4, r5, d0
 800e412:	4622      	mov	r2, r4
 800e414:	462b      	mov	r3, r5
 800e416:	4620      	mov	r0, r4
 800e418:	4629      	mov	r1, r5
 800e41a:	f7f2 fba7 	bl	8000b6c <__aeabi_dcmpun>
 800e41e:	b190      	cbz	r0, 800e446 <strtof+0x52>
 800e420:	2d00      	cmp	r5, #0
 800e422:	4821      	ldr	r0, [pc, #132]	@ (800e4a8 <strtof+0xb4>)
 800e424:	da09      	bge.n	800e43a <strtof+0x46>
 800e426:	f001 f8df 	bl	800f5e8 <nanf>
 800e42a:	eeb1 8a40 	vneg.f32	s16, s0
 800e42e:	eeb0 0a48 	vmov.f32	s0, s16
 800e432:	ecbd 8b02 	vpop	{d8}
 800e436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e43a:	ecbd 8b02 	vpop	{d8}
 800e43e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e442:	f001 b8d1 	b.w	800f5e8 <nanf>
 800e446:	4620      	mov	r0, r4
 800e448:	4629      	mov	r1, r5
 800e44a:	f7f2 fbed 	bl	8000c28 <__aeabi_d2f>
 800e44e:	ee08 0a10 	vmov	s16, r0
 800e452:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800e4ac <strtof+0xb8>
 800e456:	eeb0 7ac8 	vabs.f32	s14, s16
 800e45a:	eeb4 7a67 	vcmp.f32	s14, s15
 800e45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e462:	dd11      	ble.n	800e488 <strtof+0x94>
 800e464:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800e468:	4b11      	ldr	r3, [pc, #68]	@ (800e4b0 <strtof+0xbc>)
 800e46a:	f04f 32ff 	mov.w	r2, #4294967295
 800e46e:	4620      	mov	r0, r4
 800e470:	4639      	mov	r1, r7
 800e472:	f7f2 fb7b 	bl	8000b6c <__aeabi_dcmpun>
 800e476:	b980      	cbnz	r0, 800e49a <strtof+0xa6>
 800e478:	4b0d      	ldr	r3, [pc, #52]	@ (800e4b0 <strtof+0xbc>)
 800e47a:	f04f 32ff 	mov.w	r2, #4294967295
 800e47e:	4620      	mov	r0, r4
 800e480:	4639      	mov	r1, r7
 800e482:	f7f2 fb55 	bl	8000b30 <__aeabi_dcmple>
 800e486:	b940      	cbnz	r0, 800e49a <strtof+0xa6>
 800e488:	ee18 3a10 	vmov	r3, s16
 800e48c:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800e490:	d1cd      	bne.n	800e42e <strtof+0x3a>
 800e492:	4b08      	ldr	r3, [pc, #32]	@ (800e4b4 <strtof+0xc0>)
 800e494:	402b      	ands	r3, r5
 800e496:	2b00      	cmp	r3, #0
 800e498:	d0c9      	beq.n	800e42e <strtof+0x3a>
 800e49a:	f8d8 3000 	ldr.w	r3, [r8]
 800e49e:	2222      	movs	r2, #34	@ 0x22
 800e4a0:	601a      	str	r2, [r3, #0]
 800e4a2:	e7c4      	b.n	800e42e <strtof+0x3a>
 800e4a4:	2000002c 	.word	0x2000002c
 800e4a8:	08013385 	.word	0x08013385
 800e4ac:	7f7fffff 	.word	0x7f7fffff
 800e4b0:	7fefffff 	.word	0x7fefffff
 800e4b4:	7ff00000 	.word	0x7ff00000
 800e4b8:	20000198 	.word	0x20000198

0800e4bc <__cvt>:
 800e4bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e4c0:	ec57 6b10 	vmov	r6, r7, d0
 800e4c4:	2f00      	cmp	r7, #0
 800e4c6:	460c      	mov	r4, r1
 800e4c8:	4619      	mov	r1, r3
 800e4ca:	463b      	mov	r3, r7
 800e4cc:	bfbb      	ittet	lt
 800e4ce:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e4d2:	461f      	movlt	r7, r3
 800e4d4:	2300      	movge	r3, #0
 800e4d6:	232d      	movlt	r3, #45	@ 0x2d
 800e4d8:	700b      	strb	r3, [r1, #0]
 800e4da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e4dc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e4e0:	4691      	mov	r9, r2
 800e4e2:	f023 0820 	bic.w	r8, r3, #32
 800e4e6:	bfbc      	itt	lt
 800e4e8:	4632      	movlt	r2, r6
 800e4ea:	4616      	movlt	r6, r2
 800e4ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e4f0:	d005      	beq.n	800e4fe <__cvt+0x42>
 800e4f2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e4f6:	d100      	bne.n	800e4fa <__cvt+0x3e>
 800e4f8:	3401      	adds	r4, #1
 800e4fa:	2102      	movs	r1, #2
 800e4fc:	e000      	b.n	800e500 <__cvt+0x44>
 800e4fe:	2103      	movs	r1, #3
 800e500:	ab03      	add	r3, sp, #12
 800e502:	9301      	str	r3, [sp, #4]
 800e504:	ab02      	add	r3, sp, #8
 800e506:	9300      	str	r3, [sp, #0]
 800e508:	ec47 6b10 	vmov	d0, r6, r7
 800e50c:	4653      	mov	r3, sl
 800e50e:	4622      	mov	r2, r4
 800e510:	f001 f916 	bl	800f740 <_dtoa_r>
 800e514:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e518:	4605      	mov	r5, r0
 800e51a:	d119      	bne.n	800e550 <__cvt+0x94>
 800e51c:	f019 0f01 	tst.w	r9, #1
 800e520:	d00e      	beq.n	800e540 <__cvt+0x84>
 800e522:	eb00 0904 	add.w	r9, r0, r4
 800e526:	2200      	movs	r2, #0
 800e528:	2300      	movs	r3, #0
 800e52a:	4630      	mov	r0, r6
 800e52c:	4639      	mov	r1, r7
 800e52e:	f7f2 faeb 	bl	8000b08 <__aeabi_dcmpeq>
 800e532:	b108      	cbz	r0, 800e538 <__cvt+0x7c>
 800e534:	f8cd 900c 	str.w	r9, [sp, #12]
 800e538:	2230      	movs	r2, #48	@ 0x30
 800e53a:	9b03      	ldr	r3, [sp, #12]
 800e53c:	454b      	cmp	r3, r9
 800e53e:	d31e      	bcc.n	800e57e <__cvt+0xc2>
 800e540:	9b03      	ldr	r3, [sp, #12]
 800e542:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e544:	1b5b      	subs	r3, r3, r5
 800e546:	4628      	mov	r0, r5
 800e548:	6013      	str	r3, [r2, #0]
 800e54a:	b004      	add	sp, #16
 800e54c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e550:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e554:	eb00 0904 	add.w	r9, r0, r4
 800e558:	d1e5      	bne.n	800e526 <__cvt+0x6a>
 800e55a:	7803      	ldrb	r3, [r0, #0]
 800e55c:	2b30      	cmp	r3, #48	@ 0x30
 800e55e:	d10a      	bne.n	800e576 <__cvt+0xba>
 800e560:	2200      	movs	r2, #0
 800e562:	2300      	movs	r3, #0
 800e564:	4630      	mov	r0, r6
 800e566:	4639      	mov	r1, r7
 800e568:	f7f2 face 	bl	8000b08 <__aeabi_dcmpeq>
 800e56c:	b918      	cbnz	r0, 800e576 <__cvt+0xba>
 800e56e:	f1c4 0401 	rsb	r4, r4, #1
 800e572:	f8ca 4000 	str.w	r4, [sl]
 800e576:	f8da 3000 	ldr.w	r3, [sl]
 800e57a:	4499      	add	r9, r3
 800e57c:	e7d3      	b.n	800e526 <__cvt+0x6a>
 800e57e:	1c59      	adds	r1, r3, #1
 800e580:	9103      	str	r1, [sp, #12]
 800e582:	701a      	strb	r2, [r3, #0]
 800e584:	e7d9      	b.n	800e53a <__cvt+0x7e>

0800e586 <__exponent>:
 800e586:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e588:	2900      	cmp	r1, #0
 800e58a:	bfba      	itte	lt
 800e58c:	4249      	neglt	r1, r1
 800e58e:	232d      	movlt	r3, #45	@ 0x2d
 800e590:	232b      	movge	r3, #43	@ 0x2b
 800e592:	2909      	cmp	r1, #9
 800e594:	7002      	strb	r2, [r0, #0]
 800e596:	7043      	strb	r3, [r0, #1]
 800e598:	dd29      	ble.n	800e5ee <__exponent+0x68>
 800e59a:	f10d 0307 	add.w	r3, sp, #7
 800e59e:	461d      	mov	r5, r3
 800e5a0:	270a      	movs	r7, #10
 800e5a2:	461a      	mov	r2, r3
 800e5a4:	fbb1 f6f7 	udiv	r6, r1, r7
 800e5a8:	fb07 1416 	mls	r4, r7, r6, r1
 800e5ac:	3430      	adds	r4, #48	@ 0x30
 800e5ae:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e5b2:	460c      	mov	r4, r1
 800e5b4:	2c63      	cmp	r4, #99	@ 0x63
 800e5b6:	f103 33ff 	add.w	r3, r3, #4294967295
 800e5ba:	4631      	mov	r1, r6
 800e5bc:	dcf1      	bgt.n	800e5a2 <__exponent+0x1c>
 800e5be:	3130      	adds	r1, #48	@ 0x30
 800e5c0:	1e94      	subs	r4, r2, #2
 800e5c2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e5c6:	1c41      	adds	r1, r0, #1
 800e5c8:	4623      	mov	r3, r4
 800e5ca:	42ab      	cmp	r3, r5
 800e5cc:	d30a      	bcc.n	800e5e4 <__exponent+0x5e>
 800e5ce:	f10d 0309 	add.w	r3, sp, #9
 800e5d2:	1a9b      	subs	r3, r3, r2
 800e5d4:	42ac      	cmp	r4, r5
 800e5d6:	bf88      	it	hi
 800e5d8:	2300      	movhi	r3, #0
 800e5da:	3302      	adds	r3, #2
 800e5dc:	4403      	add	r3, r0
 800e5de:	1a18      	subs	r0, r3, r0
 800e5e0:	b003      	add	sp, #12
 800e5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5e4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e5e8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e5ec:	e7ed      	b.n	800e5ca <__exponent+0x44>
 800e5ee:	2330      	movs	r3, #48	@ 0x30
 800e5f0:	3130      	adds	r1, #48	@ 0x30
 800e5f2:	7083      	strb	r3, [r0, #2]
 800e5f4:	70c1      	strb	r1, [r0, #3]
 800e5f6:	1d03      	adds	r3, r0, #4
 800e5f8:	e7f1      	b.n	800e5de <__exponent+0x58>
	...

0800e5fc <_printf_float>:
 800e5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e600:	b08d      	sub	sp, #52	@ 0x34
 800e602:	460c      	mov	r4, r1
 800e604:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e608:	4616      	mov	r6, r2
 800e60a:	461f      	mov	r7, r3
 800e60c:	4605      	mov	r5, r0
 800e60e:	f000 ff5d 	bl	800f4cc <_localeconv_r>
 800e612:	6803      	ldr	r3, [r0, #0]
 800e614:	9304      	str	r3, [sp, #16]
 800e616:	4618      	mov	r0, r3
 800e618:	f7f1 fe4a 	bl	80002b0 <strlen>
 800e61c:	2300      	movs	r3, #0
 800e61e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e620:	f8d8 3000 	ldr.w	r3, [r8]
 800e624:	9005      	str	r0, [sp, #20]
 800e626:	3307      	adds	r3, #7
 800e628:	f023 0307 	bic.w	r3, r3, #7
 800e62c:	f103 0208 	add.w	r2, r3, #8
 800e630:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e634:	f8d4 b000 	ldr.w	fp, [r4]
 800e638:	f8c8 2000 	str.w	r2, [r8]
 800e63c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e640:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e644:	9307      	str	r3, [sp, #28]
 800e646:	f8cd 8018 	str.w	r8, [sp, #24]
 800e64a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e64e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e652:	4b9c      	ldr	r3, [pc, #624]	@ (800e8c4 <_printf_float+0x2c8>)
 800e654:	f04f 32ff 	mov.w	r2, #4294967295
 800e658:	f7f2 fa88 	bl	8000b6c <__aeabi_dcmpun>
 800e65c:	bb70      	cbnz	r0, 800e6bc <_printf_float+0xc0>
 800e65e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e662:	4b98      	ldr	r3, [pc, #608]	@ (800e8c4 <_printf_float+0x2c8>)
 800e664:	f04f 32ff 	mov.w	r2, #4294967295
 800e668:	f7f2 fa62 	bl	8000b30 <__aeabi_dcmple>
 800e66c:	bb30      	cbnz	r0, 800e6bc <_printf_float+0xc0>
 800e66e:	2200      	movs	r2, #0
 800e670:	2300      	movs	r3, #0
 800e672:	4640      	mov	r0, r8
 800e674:	4649      	mov	r1, r9
 800e676:	f7f2 fa51 	bl	8000b1c <__aeabi_dcmplt>
 800e67a:	b110      	cbz	r0, 800e682 <_printf_float+0x86>
 800e67c:	232d      	movs	r3, #45	@ 0x2d
 800e67e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e682:	4a91      	ldr	r2, [pc, #580]	@ (800e8c8 <_printf_float+0x2cc>)
 800e684:	4b91      	ldr	r3, [pc, #580]	@ (800e8cc <_printf_float+0x2d0>)
 800e686:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e68a:	bf94      	ite	ls
 800e68c:	4690      	movls	r8, r2
 800e68e:	4698      	movhi	r8, r3
 800e690:	2303      	movs	r3, #3
 800e692:	6123      	str	r3, [r4, #16]
 800e694:	f02b 0304 	bic.w	r3, fp, #4
 800e698:	6023      	str	r3, [r4, #0]
 800e69a:	f04f 0900 	mov.w	r9, #0
 800e69e:	9700      	str	r7, [sp, #0]
 800e6a0:	4633      	mov	r3, r6
 800e6a2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e6a4:	4621      	mov	r1, r4
 800e6a6:	4628      	mov	r0, r5
 800e6a8:	f000 f9d2 	bl	800ea50 <_printf_common>
 800e6ac:	3001      	adds	r0, #1
 800e6ae:	f040 808d 	bne.w	800e7cc <_printf_float+0x1d0>
 800e6b2:	f04f 30ff 	mov.w	r0, #4294967295
 800e6b6:	b00d      	add	sp, #52	@ 0x34
 800e6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6bc:	4642      	mov	r2, r8
 800e6be:	464b      	mov	r3, r9
 800e6c0:	4640      	mov	r0, r8
 800e6c2:	4649      	mov	r1, r9
 800e6c4:	f7f2 fa52 	bl	8000b6c <__aeabi_dcmpun>
 800e6c8:	b140      	cbz	r0, 800e6dc <_printf_float+0xe0>
 800e6ca:	464b      	mov	r3, r9
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	bfbc      	itt	lt
 800e6d0:	232d      	movlt	r3, #45	@ 0x2d
 800e6d2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e6d6:	4a7e      	ldr	r2, [pc, #504]	@ (800e8d0 <_printf_float+0x2d4>)
 800e6d8:	4b7e      	ldr	r3, [pc, #504]	@ (800e8d4 <_printf_float+0x2d8>)
 800e6da:	e7d4      	b.n	800e686 <_printf_float+0x8a>
 800e6dc:	6863      	ldr	r3, [r4, #4]
 800e6de:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e6e2:	9206      	str	r2, [sp, #24]
 800e6e4:	1c5a      	adds	r2, r3, #1
 800e6e6:	d13b      	bne.n	800e760 <_printf_float+0x164>
 800e6e8:	2306      	movs	r3, #6
 800e6ea:	6063      	str	r3, [r4, #4]
 800e6ec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	6022      	str	r2, [r4, #0]
 800e6f4:	9303      	str	r3, [sp, #12]
 800e6f6:	ab0a      	add	r3, sp, #40	@ 0x28
 800e6f8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e6fc:	ab09      	add	r3, sp, #36	@ 0x24
 800e6fe:	9300      	str	r3, [sp, #0]
 800e700:	6861      	ldr	r1, [r4, #4]
 800e702:	ec49 8b10 	vmov	d0, r8, r9
 800e706:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e70a:	4628      	mov	r0, r5
 800e70c:	f7ff fed6 	bl	800e4bc <__cvt>
 800e710:	9b06      	ldr	r3, [sp, #24]
 800e712:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e714:	2b47      	cmp	r3, #71	@ 0x47
 800e716:	4680      	mov	r8, r0
 800e718:	d129      	bne.n	800e76e <_printf_float+0x172>
 800e71a:	1cc8      	adds	r0, r1, #3
 800e71c:	db02      	blt.n	800e724 <_printf_float+0x128>
 800e71e:	6863      	ldr	r3, [r4, #4]
 800e720:	4299      	cmp	r1, r3
 800e722:	dd41      	ble.n	800e7a8 <_printf_float+0x1ac>
 800e724:	f1aa 0a02 	sub.w	sl, sl, #2
 800e728:	fa5f fa8a 	uxtb.w	sl, sl
 800e72c:	3901      	subs	r1, #1
 800e72e:	4652      	mov	r2, sl
 800e730:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e734:	9109      	str	r1, [sp, #36]	@ 0x24
 800e736:	f7ff ff26 	bl	800e586 <__exponent>
 800e73a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e73c:	1813      	adds	r3, r2, r0
 800e73e:	2a01      	cmp	r2, #1
 800e740:	4681      	mov	r9, r0
 800e742:	6123      	str	r3, [r4, #16]
 800e744:	dc02      	bgt.n	800e74c <_printf_float+0x150>
 800e746:	6822      	ldr	r2, [r4, #0]
 800e748:	07d2      	lsls	r2, r2, #31
 800e74a:	d501      	bpl.n	800e750 <_printf_float+0x154>
 800e74c:	3301      	adds	r3, #1
 800e74e:	6123      	str	r3, [r4, #16]
 800e750:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e754:	2b00      	cmp	r3, #0
 800e756:	d0a2      	beq.n	800e69e <_printf_float+0xa2>
 800e758:	232d      	movs	r3, #45	@ 0x2d
 800e75a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e75e:	e79e      	b.n	800e69e <_printf_float+0xa2>
 800e760:	9a06      	ldr	r2, [sp, #24]
 800e762:	2a47      	cmp	r2, #71	@ 0x47
 800e764:	d1c2      	bne.n	800e6ec <_printf_float+0xf0>
 800e766:	2b00      	cmp	r3, #0
 800e768:	d1c0      	bne.n	800e6ec <_printf_float+0xf0>
 800e76a:	2301      	movs	r3, #1
 800e76c:	e7bd      	b.n	800e6ea <_printf_float+0xee>
 800e76e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e772:	d9db      	bls.n	800e72c <_printf_float+0x130>
 800e774:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e778:	d118      	bne.n	800e7ac <_printf_float+0x1b0>
 800e77a:	2900      	cmp	r1, #0
 800e77c:	6863      	ldr	r3, [r4, #4]
 800e77e:	dd0b      	ble.n	800e798 <_printf_float+0x19c>
 800e780:	6121      	str	r1, [r4, #16]
 800e782:	b913      	cbnz	r3, 800e78a <_printf_float+0x18e>
 800e784:	6822      	ldr	r2, [r4, #0]
 800e786:	07d0      	lsls	r0, r2, #31
 800e788:	d502      	bpl.n	800e790 <_printf_float+0x194>
 800e78a:	3301      	adds	r3, #1
 800e78c:	440b      	add	r3, r1
 800e78e:	6123      	str	r3, [r4, #16]
 800e790:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e792:	f04f 0900 	mov.w	r9, #0
 800e796:	e7db      	b.n	800e750 <_printf_float+0x154>
 800e798:	b913      	cbnz	r3, 800e7a0 <_printf_float+0x1a4>
 800e79a:	6822      	ldr	r2, [r4, #0]
 800e79c:	07d2      	lsls	r2, r2, #31
 800e79e:	d501      	bpl.n	800e7a4 <_printf_float+0x1a8>
 800e7a0:	3302      	adds	r3, #2
 800e7a2:	e7f4      	b.n	800e78e <_printf_float+0x192>
 800e7a4:	2301      	movs	r3, #1
 800e7a6:	e7f2      	b.n	800e78e <_printf_float+0x192>
 800e7a8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e7ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e7ae:	4299      	cmp	r1, r3
 800e7b0:	db05      	blt.n	800e7be <_printf_float+0x1c2>
 800e7b2:	6823      	ldr	r3, [r4, #0]
 800e7b4:	6121      	str	r1, [r4, #16]
 800e7b6:	07d8      	lsls	r0, r3, #31
 800e7b8:	d5ea      	bpl.n	800e790 <_printf_float+0x194>
 800e7ba:	1c4b      	adds	r3, r1, #1
 800e7bc:	e7e7      	b.n	800e78e <_printf_float+0x192>
 800e7be:	2900      	cmp	r1, #0
 800e7c0:	bfd4      	ite	le
 800e7c2:	f1c1 0202 	rsble	r2, r1, #2
 800e7c6:	2201      	movgt	r2, #1
 800e7c8:	4413      	add	r3, r2
 800e7ca:	e7e0      	b.n	800e78e <_printf_float+0x192>
 800e7cc:	6823      	ldr	r3, [r4, #0]
 800e7ce:	055a      	lsls	r2, r3, #21
 800e7d0:	d407      	bmi.n	800e7e2 <_printf_float+0x1e6>
 800e7d2:	6923      	ldr	r3, [r4, #16]
 800e7d4:	4642      	mov	r2, r8
 800e7d6:	4631      	mov	r1, r6
 800e7d8:	4628      	mov	r0, r5
 800e7da:	47b8      	blx	r7
 800e7dc:	3001      	adds	r0, #1
 800e7de:	d12b      	bne.n	800e838 <_printf_float+0x23c>
 800e7e0:	e767      	b.n	800e6b2 <_printf_float+0xb6>
 800e7e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e7e6:	f240 80dd 	bls.w	800e9a4 <_printf_float+0x3a8>
 800e7ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	f7f2 f989 	bl	8000b08 <__aeabi_dcmpeq>
 800e7f6:	2800      	cmp	r0, #0
 800e7f8:	d033      	beq.n	800e862 <_printf_float+0x266>
 800e7fa:	4a37      	ldr	r2, [pc, #220]	@ (800e8d8 <_printf_float+0x2dc>)
 800e7fc:	2301      	movs	r3, #1
 800e7fe:	4631      	mov	r1, r6
 800e800:	4628      	mov	r0, r5
 800e802:	47b8      	blx	r7
 800e804:	3001      	adds	r0, #1
 800e806:	f43f af54 	beq.w	800e6b2 <_printf_float+0xb6>
 800e80a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e80e:	4543      	cmp	r3, r8
 800e810:	db02      	blt.n	800e818 <_printf_float+0x21c>
 800e812:	6823      	ldr	r3, [r4, #0]
 800e814:	07d8      	lsls	r0, r3, #31
 800e816:	d50f      	bpl.n	800e838 <_printf_float+0x23c>
 800e818:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e81c:	4631      	mov	r1, r6
 800e81e:	4628      	mov	r0, r5
 800e820:	47b8      	blx	r7
 800e822:	3001      	adds	r0, #1
 800e824:	f43f af45 	beq.w	800e6b2 <_printf_float+0xb6>
 800e828:	f04f 0900 	mov.w	r9, #0
 800e82c:	f108 38ff 	add.w	r8, r8, #4294967295
 800e830:	f104 0a1a 	add.w	sl, r4, #26
 800e834:	45c8      	cmp	r8, r9
 800e836:	dc09      	bgt.n	800e84c <_printf_float+0x250>
 800e838:	6823      	ldr	r3, [r4, #0]
 800e83a:	079b      	lsls	r3, r3, #30
 800e83c:	f100 8103 	bmi.w	800ea46 <_printf_float+0x44a>
 800e840:	68e0      	ldr	r0, [r4, #12]
 800e842:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e844:	4298      	cmp	r0, r3
 800e846:	bfb8      	it	lt
 800e848:	4618      	movlt	r0, r3
 800e84a:	e734      	b.n	800e6b6 <_printf_float+0xba>
 800e84c:	2301      	movs	r3, #1
 800e84e:	4652      	mov	r2, sl
 800e850:	4631      	mov	r1, r6
 800e852:	4628      	mov	r0, r5
 800e854:	47b8      	blx	r7
 800e856:	3001      	adds	r0, #1
 800e858:	f43f af2b 	beq.w	800e6b2 <_printf_float+0xb6>
 800e85c:	f109 0901 	add.w	r9, r9, #1
 800e860:	e7e8      	b.n	800e834 <_printf_float+0x238>
 800e862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e864:	2b00      	cmp	r3, #0
 800e866:	dc39      	bgt.n	800e8dc <_printf_float+0x2e0>
 800e868:	4a1b      	ldr	r2, [pc, #108]	@ (800e8d8 <_printf_float+0x2dc>)
 800e86a:	2301      	movs	r3, #1
 800e86c:	4631      	mov	r1, r6
 800e86e:	4628      	mov	r0, r5
 800e870:	47b8      	blx	r7
 800e872:	3001      	adds	r0, #1
 800e874:	f43f af1d 	beq.w	800e6b2 <_printf_float+0xb6>
 800e878:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e87c:	ea59 0303 	orrs.w	r3, r9, r3
 800e880:	d102      	bne.n	800e888 <_printf_float+0x28c>
 800e882:	6823      	ldr	r3, [r4, #0]
 800e884:	07d9      	lsls	r1, r3, #31
 800e886:	d5d7      	bpl.n	800e838 <_printf_float+0x23c>
 800e888:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e88c:	4631      	mov	r1, r6
 800e88e:	4628      	mov	r0, r5
 800e890:	47b8      	blx	r7
 800e892:	3001      	adds	r0, #1
 800e894:	f43f af0d 	beq.w	800e6b2 <_printf_float+0xb6>
 800e898:	f04f 0a00 	mov.w	sl, #0
 800e89c:	f104 0b1a 	add.w	fp, r4, #26
 800e8a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8a2:	425b      	negs	r3, r3
 800e8a4:	4553      	cmp	r3, sl
 800e8a6:	dc01      	bgt.n	800e8ac <_printf_float+0x2b0>
 800e8a8:	464b      	mov	r3, r9
 800e8aa:	e793      	b.n	800e7d4 <_printf_float+0x1d8>
 800e8ac:	2301      	movs	r3, #1
 800e8ae:	465a      	mov	r2, fp
 800e8b0:	4631      	mov	r1, r6
 800e8b2:	4628      	mov	r0, r5
 800e8b4:	47b8      	blx	r7
 800e8b6:	3001      	adds	r0, #1
 800e8b8:	f43f aefb 	beq.w	800e6b2 <_printf_float+0xb6>
 800e8bc:	f10a 0a01 	add.w	sl, sl, #1
 800e8c0:	e7ee      	b.n	800e8a0 <_printf_float+0x2a4>
 800e8c2:	bf00      	nop
 800e8c4:	7fefffff 	.word	0x7fefffff
 800e8c8:	08013298 	.word	0x08013298
 800e8cc:	0801329c 	.word	0x0801329c
 800e8d0:	080132a0 	.word	0x080132a0
 800e8d4:	080132a4 	.word	0x080132a4
 800e8d8:	080132a8 	.word	0x080132a8
 800e8dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e8de:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e8e2:	4553      	cmp	r3, sl
 800e8e4:	bfa8      	it	ge
 800e8e6:	4653      	movge	r3, sl
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	4699      	mov	r9, r3
 800e8ec:	dc36      	bgt.n	800e95c <_printf_float+0x360>
 800e8ee:	f04f 0b00 	mov.w	fp, #0
 800e8f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e8f6:	f104 021a 	add.w	r2, r4, #26
 800e8fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e8fc:	9306      	str	r3, [sp, #24]
 800e8fe:	eba3 0309 	sub.w	r3, r3, r9
 800e902:	455b      	cmp	r3, fp
 800e904:	dc31      	bgt.n	800e96a <_printf_float+0x36e>
 800e906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e908:	459a      	cmp	sl, r3
 800e90a:	dc3a      	bgt.n	800e982 <_printf_float+0x386>
 800e90c:	6823      	ldr	r3, [r4, #0]
 800e90e:	07da      	lsls	r2, r3, #31
 800e910:	d437      	bmi.n	800e982 <_printf_float+0x386>
 800e912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e914:	ebaa 0903 	sub.w	r9, sl, r3
 800e918:	9b06      	ldr	r3, [sp, #24]
 800e91a:	ebaa 0303 	sub.w	r3, sl, r3
 800e91e:	4599      	cmp	r9, r3
 800e920:	bfa8      	it	ge
 800e922:	4699      	movge	r9, r3
 800e924:	f1b9 0f00 	cmp.w	r9, #0
 800e928:	dc33      	bgt.n	800e992 <_printf_float+0x396>
 800e92a:	f04f 0800 	mov.w	r8, #0
 800e92e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e932:	f104 0b1a 	add.w	fp, r4, #26
 800e936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e938:	ebaa 0303 	sub.w	r3, sl, r3
 800e93c:	eba3 0309 	sub.w	r3, r3, r9
 800e940:	4543      	cmp	r3, r8
 800e942:	f77f af79 	ble.w	800e838 <_printf_float+0x23c>
 800e946:	2301      	movs	r3, #1
 800e948:	465a      	mov	r2, fp
 800e94a:	4631      	mov	r1, r6
 800e94c:	4628      	mov	r0, r5
 800e94e:	47b8      	blx	r7
 800e950:	3001      	adds	r0, #1
 800e952:	f43f aeae 	beq.w	800e6b2 <_printf_float+0xb6>
 800e956:	f108 0801 	add.w	r8, r8, #1
 800e95a:	e7ec      	b.n	800e936 <_printf_float+0x33a>
 800e95c:	4642      	mov	r2, r8
 800e95e:	4631      	mov	r1, r6
 800e960:	4628      	mov	r0, r5
 800e962:	47b8      	blx	r7
 800e964:	3001      	adds	r0, #1
 800e966:	d1c2      	bne.n	800e8ee <_printf_float+0x2f2>
 800e968:	e6a3      	b.n	800e6b2 <_printf_float+0xb6>
 800e96a:	2301      	movs	r3, #1
 800e96c:	4631      	mov	r1, r6
 800e96e:	4628      	mov	r0, r5
 800e970:	9206      	str	r2, [sp, #24]
 800e972:	47b8      	blx	r7
 800e974:	3001      	adds	r0, #1
 800e976:	f43f ae9c 	beq.w	800e6b2 <_printf_float+0xb6>
 800e97a:	9a06      	ldr	r2, [sp, #24]
 800e97c:	f10b 0b01 	add.w	fp, fp, #1
 800e980:	e7bb      	b.n	800e8fa <_printf_float+0x2fe>
 800e982:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e986:	4631      	mov	r1, r6
 800e988:	4628      	mov	r0, r5
 800e98a:	47b8      	blx	r7
 800e98c:	3001      	adds	r0, #1
 800e98e:	d1c0      	bne.n	800e912 <_printf_float+0x316>
 800e990:	e68f      	b.n	800e6b2 <_printf_float+0xb6>
 800e992:	9a06      	ldr	r2, [sp, #24]
 800e994:	464b      	mov	r3, r9
 800e996:	4442      	add	r2, r8
 800e998:	4631      	mov	r1, r6
 800e99a:	4628      	mov	r0, r5
 800e99c:	47b8      	blx	r7
 800e99e:	3001      	adds	r0, #1
 800e9a0:	d1c3      	bne.n	800e92a <_printf_float+0x32e>
 800e9a2:	e686      	b.n	800e6b2 <_printf_float+0xb6>
 800e9a4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e9a8:	f1ba 0f01 	cmp.w	sl, #1
 800e9ac:	dc01      	bgt.n	800e9b2 <_printf_float+0x3b6>
 800e9ae:	07db      	lsls	r3, r3, #31
 800e9b0:	d536      	bpl.n	800ea20 <_printf_float+0x424>
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	4642      	mov	r2, r8
 800e9b6:	4631      	mov	r1, r6
 800e9b8:	4628      	mov	r0, r5
 800e9ba:	47b8      	blx	r7
 800e9bc:	3001      	adds	r0, #1
 800e9be:	f43f ae78 	beq.w	800e6b2 <_printf_float+0xb6>
 800e9c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e9c6:	4631      	mov	r1, r6
 800e9c8:	4628      	mov	r0, r5
 800e9ca:	47b8      	blx	r7
 800e9cc:	3001      	adds	r0, #1
 800e9ce:	f43f ae70 	beq.w	800e6b2 <_printf_float+0xb6>
 800e9d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	2300      	movs	r3, #0
 800e9da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e9de:	f7f2 f893 	bl	8000b08 <__aeabi_dcmpeq>
 800e9e2:	b9c0      	cbnz	r0, 800ea16 <_printf_float+0x41a>
 800e9e4:	4653      	mov	r3, sl
 800e9e6:	f108 0201 	add.w	r2, r8, #1
 800e9ea:	4631      	mov	r1, r6
 800e9ec:	4628      	mov	r0, r5
 800e9ee:	47b8      	blx	r7
 800e9f0:	3001      	adds	r0, #1
 800e9f2:	d10c      	bne.n	800ea0e <_printf_float+0x412>
 800e9f4:	e65d      	b.n	800e6b2 <_printf_float+0xb6>
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	465a      	mov	r2, fp
 800e9fa:	4631      	mov	r1, r6
 800e9fc:	4628      	mov	r0, r5
 800e9fe:	47b8      	blx	r7
 800ea00:	3001      	adds	r0, #1
 800ea02:	f43f ae56 	beq.w	800e6b2 <_printf_float+0xb6>
 800ea06:	f108 0801 	add.w	r8, r8, #1
 800ea0a:	45d0      	cmp	r8, sl
 800ea0c:	dbf3      	blt.n	800e9f6 <_printf_float+0x3fa>
 800ea0e:	464b      	mov	r3, r9
 800ea10:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ea14:	e6df      	b.n	800e7d6 <_printf_float+0x1da>
 800ea16:	f04f 0800 	mov.w	r8, #0
 800ea1a:	f104 0b1a 	add.w	fp, r4, #26
 800ea1e:	e7f4      	b.n	800ea0a <_printf_float+0x40e>
 800ea20:	2301      	movs	r3, #1
 800ea22:	4642      	mov	r2, r8
 800ea24:	e7e1      	b.n	800e9ea <_printf_float+0x3ee>
 800ea26:	2301      	movs	r3, #1
 800ea28:	464a      	mov	r2, r9
 800ea2a:	4631      	mov	r1, r6
 800ea2c:	4628      	mov	r0, r5
 800ea2e:	47b8      	blx	r7
 800ea30:	3001      	adds	r0, #1
 800ea32:	f43f ae3e 	beq.w	800e6b2 <_printf_float+0xb6>
 800ea36:	f108 0801 	add.w	r8, r8, #1
 800ea3a:	68e3      	ldr	r3, [r4, #12]
 800ea3c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ea3e:	1a5b      	subs	r3, r3, r1
 800ea40:	4543      	cmp	r3, r8
 800ea42:	dcf0      	bgt.n	800ea26 <_printf_float+0x42a>
 800ea44:	e6fc      	b.n	800e840 <_printf_float+0x244>
 800ea46:	f04f 0800 	mov.w	r8, #0
 800ea4a:	f104 0919 	add.w	r9, r4, #25
 800ea4e:	e7f4      	b.n	800ea3a <_printf_float+0x43e>

0800ea50 <_printf_common>:
 800ea50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea54:	4616      	mov	r6, r2
 800ea56:	4698      	mov	r8, r3
 800ea58:	688a      	ldr	r2, [r1, #8]
 800ea5a:	690b      	ldr	r3, [r1, #16]
 800ea5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ea60:	4293      	cmp	r3, r2
 800ea62:	bfb8      	it	lt
 800ea64:	4613      	movlt	r3, r2
 800ea66:	6033      	str	r3, [r6, #0]
 800ea68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ea6c:	4607      	mov	r7, r0
 800ea6e:	460c      	mov	r4, r1
 800ea70:	b10a      	cbz	r2, 800ea76 <_printf_common+0x26>
 800ea72:	3301      	adds	r3, #1
 800ea74:	6033      	str	r3, [r6, #0]
 800ea76:	6823      	ldr	r3, [r4, #0]
 800ea78:	0699      	lsls	r1, r3, #26
 800ea7a:	bf42      	ittt	mi
 800ea7c:	6833      	ldrmi	r3, [r6, #0]
 800ea7e:	3302      	addmi	r3, #2
 800ea80:	6033      	strmi	r3, [r6, #0]
 800ea82:	6825      	ldr	r5, [r4, #0]
 800ea84:	f015 0506 	ands.w	r5, r5, #6
 800ea88:	d106      	bne.n	800ea98 <_printf_common+0x48>
 800ea8a:	f104 0a19 	add.w	sl, r4, #25
 800ea8e:	68e3      	ldr	r3, [r4, #12]
 800ea90:	6832      	ldr	r2, [r6, #0]
 800ea92:	1a9b      	subs	r3, r3, r2
 800ea94:	42ab      	cmp	r3, r5
 800ea96:	dc26      	bgt.n	800eae6 <_printf_common+0x96>
 800ea98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ea9c:	6822      	ldr	r2, [r4, #0]
 800ea9e:	3b00      	subs	r3, #0
 800eaa0:	bf18      	it	ne
 800eaa2:	2301      	movne	r3, #1
 800eaa4:	0692      	lsls	r2, r2, #26
 800eaa6:	d42b      	bmi.n	800eb00 <_printf_common+0xb0>
 800eaa8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800eaac:	4641      	mov	r1, r8
 800eaae:	4638      	mov	r0, r7
 800eab0:	47c8      	blx	r9
 800eab2:	3001      	adds	r0, #1
 800eab4:	d01e      	beq.n	800eaf4 <_printf_common+0xa4>
 800eab6:	6823      	ldr	r3, [r4, #0]
 800eab8:	6922      	ldr	r2, [r4, #16]
 800eaba:	f003 0306 	and.w	r3, r3, #6
 800eabe:	2b04      	cmp	r3, #4
 800eac0:	bf02      	ittt	eq
 800eac2:	68e5      	ldreq	r5, [r4, #12]
 800eac4:	6833      	ldreq	r3, [r6, #0]
 800eac6:	1aed      	subeq	r5, r5, r3
 800eac8:	68a3      	ldr	r3, [r4, #8]
 800eaca:	bf0c      	ite	eq
 800eacc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ead0:	2500      	movne	r5, #0
 800ead2:	4293      	cmp	r3, r2
 800ead4:	bfc4      	itt	gt
 800ead6:	1a9b      	subgt	r3, r3, r2
 800ead8:	18ed      	addgt	r5, r5, r3
 800eada:	2600      	movs	r6, #0
 800eadc:	341a      	adds	r4, #26
 800eade:	42b5      	cmp	r5, r6
 800eae0:	d11a      	bne.n	800eb18 <_printf_common+0xc8>
 800eae2:	2000      	movs	r0, #0
 800eae4:	e008      	b.n	800eaf8 <_printf_common+0xa8>
 800eae6:	2301      	movs	r3, #1
 800eae8:	4652      	mov	r2, sl
 800eaea:	4641      	mov	r1, r8
 800eaec:	4638      	mov	r0, r7
 800eaee:	47c8      	blx	r9
 800eaf0:	3001      	adds	r0, #1
 800eaf2:	d103      	bne.n	800eafc <_printf_common+0xac>
 800eaf4:	f04f 30ff 	mov.w	r0, #4294967295
 800eaf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eafc:	3501      	adds	r5, #1
 800eafe:	e7c6      	b.n	800ea8e <_printf_common+0x3e>
 800eb00:	18e1      	adds	r1, r4, r3
 800eb02:	1c5a      	adds	r2, r3, #1
 800eb04:	2030      	movs	r0, #48	@ 0x30
 800eb06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800eb0a:	4422      	add	r2, r4
 800eb0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800eb10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800eb14:	3302      	adds	r3, #2
 800eb16:	e7c7      	b.n	800eaa8 <_printf_common+0x58>
 800eb18:	2301      	movs	r3, #1
 800eb1a:	4622      	mov	r2, r4
 800eb1c:	4641      	mov	r1, r8
 800eb1e:	4638      	mov	r0, r7
 800eb20:	47c8      	blx	r9
 800eb22:	3001      	adds	r0, #1
 800eb24:	d0e6      	beq.n	800eaf4 <_printf_common+0xa4>
 800eb26:	3601      	adds	r6, #1
 800eb28:	e7d9      	b.n	800eade <_printf_common+0x8e>
	...

0800eb2c <_printf_i>:
 800eb2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eb30:	7e0f      	ldrb	r7, [r1, #24]
 800eb32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800eb34:	2f78      	cmp	r7, #120	@ 0x78
 800eb36:	4691      	mov	r9, r2
 800eb38:	4680      	mov	r8, r0
 800eb3a:	460c      	mov	r4, r1
 800eb3c:	469a      	mov	sl, r3
 800eb3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800eb42:	d807      	bhi.n	800eb54 <_printf_i+0x28>
 800eb44:	2f62      	cmp	r7, #98	@ 0x62
 800eb46:	d80a      	bhi.n	800eb5e <_printf_i+0x32>
 800eb48:	2f00      	cmp	r7, #0
 800eb4a:	f000 80d2 	beq.w	800ecf2 <_printf_i+0x1c6>
 800eb4e:	2f58      	cmp	r7, #88	@ 0x58
 800eb50:	f000 80b9 	beq.w	800ecc6 <_printf_i+0x19a>
 800eb54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eb58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800eb5c:	e03a      	b.n	800ebd4 <_printf_i+0xa8>
 800eb5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800eb62:	2b15      	cmp	r3, #21
 800eb64:	d8f6      	bhi.n	800eb54 <_printf_i+0x28>
 800eb66:	a101      	add	r1, pc, #4	@ (adr r1, 800eb6c <_printf_i+0x40>)
 800eb68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eb6c:	0800ebc5 	.word	0x0800ebc5
 800eb70:	0800ebd9 	.word	0x0800ebd9
 800eb74:	0800eb55 	.word	0x0800eb55
 800eb78:	0800eb55 	.word	0x0800eb55
 800eb7c:	0800eb55 	.word	0x0800eb55
 800eb80:	0800eb55 	.word	0x0800eb55
 800eb84:	0800ebd9 	.word	0x0800ebd9
 800eb88:	0800eb55 	.word	0x0800eb55
 800eb8c:	0800eb55 	.word	0x0800eb55
 800eb90:	0800eb55 	.word	0x0800eb55
 800eb94:	0800eb55 	.word	0x0800eb55
 800eb98:	0800ecd9 	.word	0x0800ecd9
 800eb9c:	0800ec03 	.word	0x0800ec03
 800eba0:	0800ec93 	.word	0x0800ec93
 800eba4:	0800eb55 	.word	0x0800eb55
 800eba8:	0800eb55 	.word	0x0800eb55
 800ebac:	0800ecfb 	.word	0x0800ecfb
 800ebb0:	0800eb55 	.word	0x0800eb55
 800ebb4:	0800ec03 	.word	0x0800ec03
 800ebb8:	0800eb55 	.word	0x0800eb55
 800ebbc:	0800eb55 	.word	0x0800eb55
 800ebc0:	0800ec9b 	.word	0x0800ec9b
 800ebc4:	6833      	ldr	r3, [r6, #0]
 800ebc6:	1d1a      	adds	r2, r3, #4
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	6032      	str	r2, [r6, #0]
 800ebcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ebd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ebd4:	2301      	movs	r3, #1
 800ebd6:	e09d      	b.n	800ed14 <_printf_i+0x1e8>
 800ebd8:	6833      	ldr	r3, [r6, #0]
 800ebda:	6820      	ldr	r0, [r4, #0]
 800ebdc:	1d19      	adds	r1, r3, #4
 800ebde:	6031      	str	r1, [r6, #0]
 800ebe0:	0606      	lsls	r6, r0, #24
 800ebe2:	d501      	bpl.n	800ebe8 <_printf_i+0xbc>
 800ebe4:	681d      	ldr	r5, [r3, #0]
 800ebe6:	e003      	b.n	800ebf0 <_printf_i+0xc4>
 800ebe8:	0645      	lsls	r5, r0, #25
 800ebea:	d5fb      	bpl.n	800ebe4 <_printf_i+0xb8>
 800ebec:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ebf0:	2d00      	cmp	r5, #0
 800ebf2:	da03      	bge.n	800ebfc <_printf_i+0xd0>
 800ebf4:	232d      	movs	r3, #45	@ 0x2d
 800ebf6:	426d      	negs	r5, r5
 800ebf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ebfc:	4859      	ldr	r0, [pc, #356]	@ (800ed64 <_printf_i+0x238>)
 800ebfe:	230a      	movs	r3, #10
 800ec00:	e011      	b.n	800ec26 <_printf_i+0xfa>
 800ec02:	6821      	ldr	r1, [r4, #0]
 800ec04:	6833      	ldr	r3, [r6, #0]
 800ec06:	0608      	lsls	r0, r1, #24
 800ec08:	f853 5b04 	ldr.w	r5, [r3], #4
 800ec0c:	d402      	bmi.n	800ec14 <_printf_i+0xe8>
 800ec0e:	0649      	lsls	r1, r1, #25
 800ec10:	bf48      	it	mi
 800ec12:	b2ad      	uxthmi	r5, r5
 800ec14:	2f6f      	cmp	r7, #111	@ 0x6f
 800ec16:	4853      	ldr	r0, [pc, #332]	@ (800ed64 <_printf_i+0x238>)
 800ec18:	6033      	str	r3, [r6, #0]
 800ec1a:	bf14      	ite	ne
 800ec1c:	230a      	movne	r3, #10
 800ec1e:	2308      	moveq	r3, #8
 800ec20:	2100      	movs	r1, #0
 800ec22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ec26:	6866      	ldr	r6, [r4, #4]
 800ec28:	60a6      	str	r6, [r4, #8]
 800ec2a:	2e00      	cmp	r6, #0
 800ec2c:	bfa2      	ittt	ge
 800ec2e:	6821      	ldrge	r1, [r4, #0]
 800ec30:	f021 0104 	bicge.w	r1, r1, #4
 800ec34:	6021      	strge	r1, [r4, #0]
 800ec36:	b90d      	cbnz	r5, 800ec3c <_printf_i+0x110>
 800ec38:	2e00      	cmp	r6, #0
 800ec3a:	d04b      	beq.n	800ecd4 <_printf_i+0x1a8>
 800ec3c:	4616      	mov	r6, r2
 800ec3e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ec42:	fb03 5711 	mls	r7, r3, r1, r5
 800ec46:	5dc7      	ldrb	r7, [r0, r7]
 800ec48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ec4c:	462f      	mov	r7, r5
 800ec4e:	42bb      	cmp	r3, r7
 800ec50:	460d      	mov	r5, r1
 800ec52:	d9f4      	bls.n	800ec3e <_printf_i+0x112>
 800ec54:	2b08      	cmp	r3, #8
 800ec56:	d10b      	bne.n	800ec70 <_printf_i+0x144>
 800ec58:	6823      	ldr	r3, [r4, #0]
 800ec5a:	07df      	lsls	r7, r3, #31
 800ec5c:	d508      	bpl.n	800ec70 <_printf_i+0x144>
 800ec5e:	6923      	ldr	r3, [r4, #16]
 800ec60:	6861      	ldr	r1, [r4, #4]
 800ec62:	4299      	cmp	r1, r3
 800ec64:	bfde      	ittt	le
 800ec66:	2330      	movle	r3, #48	@ 0x30
 800ec68:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ec6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ec70:	1b92      	subs	r2, r2, r6
 800ec72:	6122      	str	r2, [r4, #16]
 800ec74:	f8cd a000 	str.w	sl, [sp]
 800ec78:	464b      	mov	r3, r9
 800ec7a:	aa03      	add	r2, sp, #12
 800ec7c:	4621      	mov	r1, r4
 800ec7e:	4640      	mov	r0, r8
 800ec80:	f7ff fee6 	bl	800ea50 <_printf_common>
 800ec84:	3001      	adds	r0, #1
 800ec86:	d14a      	bne.n	800ed1e <_printf_i+0x1f2>
 800ec88:	f04f 30ff 	mov.w	r0, #4294967295
 800ec8c:	b004      	add	sp, #16
 800ec8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec92:	6823      	ldr	r3, [r4, #0]
 800ec94:	f043 0320 	orr.w	r3, r3, #32
 800ec98:	6023      	str	r3, [r4, #0]
 800ec9a:	4833      	ldr	r0, [pc, #204]	@ (800ed68 <_printf_i+0x23c>)
 800ec9c:	2778      	movs	r7, #120	@ 0x78
 800ec9e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800eca2:	6823      	ldr	r3, [r4, #0]
 800eca4:	6831      	ldr	r1, [r6, #0]
 800eca6:	061f      	lsls	r7, r3, #24
 800eca8:	f851 5b04 	ldr.w	r5, [r1], #4
 800ecac:	d402      	bmi.n	800ecb4 <_printf_i+0x188>
 800ecae:	065f      	lsls	r7, r3, #25
 800ecb0:	bf48      	it	mi
 800ecb2:	b2ad      	uxthmi	r5, r5
 800ecb4:	6031      	str	r1, [r6, #0]
 800ecb6:	07d9      	lsls	r1, r3, #31
 800ecb8:	bf44      	itt	mi
 800ecba:	f043 0320 	orrmi.w	r3, r3, #32
 800ecbe:	6023      	strmi	r3, [r4, #0]
 800ecc0:	b11d      	cbz	r5, 800ecca <_printf_i+0x19e>
 800ecc2:	2310      	movs	r3, #16
 800ecc4:	e7ac      	b.n	800ec20 <_printf_i+0xf4>
 800ecc6:	4827      	ldr	r0, [pc, #156]	@ (800ed64 <_printf_i+0x238>)
 800ecc8:	e7e9      	b.n	800ec9e <_printf_i+0x172>
 800ecca:	6823      	ldr	r3, [r4, #0]
 800eccc:	f023 0320 	bic.w	r3, r3, #32
 800ecd0:	6023      	str	r3, [r4, #0]
 800ecd2:	e7f6      	b.n	800ecc2 <_printf_i+0x196>
 800ecd4:	4616      	mov	r6, r2
 800ecd6:	e7bd      	b.n	800ec54 <_printf_i+0x128>
 800ecd8:	6833      	ldr	r3, [r6, #0]
 800ecda:	6825      	ldr	r5, [r4, #0]
 800ecdc:	6961      	ldr	r1, [r4, #20]
 800ecde:	1d18      	adds	r0, r3, #4
 800ece0:	6030      	str	r0, [r6, #0]
 800ece2:	062e      	lsls	r6, r5, #24
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	d501      	bpl.n	800ecec <_printf_i+0x1c0>
 800ece8:	6019      	str	r1, [r3, #0]
 800ecea:	e002      	b.n	800ecf2 <_printf_i+0x1c6>
 800ecec:	0668      	lsls	r0, r5, #25
 800ecee:	d5fb      	bpl.n	800ece8 <_printf_i+0x1bc>
 800ecf0:	8019      	strh	r1, [r3, #0]
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	6123      	str	r3, [r4, #16]
 800ecf6:	4616      	mov	r6, r2
 800ecf8:	e7bc      	b.n	800ec74 <_printf_i+0x148>
 800ecfa:	6833      	ldr	r3, [r6, #0]
 800ecfc:	1d1a      	adds	r2, r3, #4
 800ecfe:	6032      	str	r2, [r6, #0]
 800ed00:	681e      	ldr	r6, [r3, #0]
 800ed02:	6862      	ldr	r2, [r4, #4]
 800ed04:	2100      	movs	r1, #0
 800ed06:	4630      	mov	r0, r6
 800ed08:	f7f1 fa82 	bl	8000210 <memchr>
 800ed0c:	b108      	cbz	r0, 800ed12 <_printf_i+0x1e6>
 800ed0e:	1b80      	subs	r0, r0, r6
 800ed10:	6060      	str	r0, [r4, #4]
 800ed12:	6863      	ldr	r3, [r4, #4]
 800ed14:	6123      	str	r3, [r4, #16]
 800ed16:	2300      	movs	r3, #0
 800ed18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ed1c:	e7aa      	b.n	800ec74 <_printf_i+0x148>
 800ed1e:	6923      	ldr	r3, [r4, #16]
 800ed20:	4632      	mov	r2, r6
 800ed22:	4649      	mov	r1, r9
 800ed24:	4640      	mov	r0, r8
 800ed26:	47d0      	blx	sl
 800ed28:	3001      	adds	r0, #1
 800ed2a:	d0ad      	beq.n	800ec88 <_printf_i+0x15c>
 800ed2c:	6823      	ldr	r3, [r4, #0]
 800ed2e:	079b      	lsls	r3, r3, #30
 800ed30:	d413      	bmi.n	800ed5a <_printf_i+0x22e>
 800ed32:	68e0      	ldr	r0, [r4, #12]
 800ed34:	9b03      	ldr	r3, [sp, #12]
 800ed36:	4298      	cmp	r0, r3
 800ed38:	bfb8      	it	lt
 800ed3a:	4618      	movlt	r0, r3
 800ed3c:	e7a6      	b.n	800ec8c <_printf_i+0x160>
 800ed3e:	2301      	movs	r3, #1
 800ed40:	4632      	mov	r2, r6
 800ed42:	4649      	mov	r1, r9
 800ed44:	4640      	mov	r0, r8
 800ed46:	47d0      	blx	sl
 800ed48:	3001      	adds	r0, #1
 800ed4a:	d09d      	beq.n	800ec88 <_printf_i+0x15c>
 800ed4c:	3501      	adds	r5, #1
 800ed4e:	68e3      	ldr	r3, [r4, #12]
 800ed50:	9903      	ldr	r1, [sp, #12]
 800ed52:	1a5b      	subs	r3, r3, r1
 800ed54:	42ab      	cmp	r3, r5
 800ed56:	dcf2      	bgt.n	800ed3e <_printf_i+0x212>
 800ed58:	e7eb      	b.n	800ed32 <_printf_i+0x206>
 800ed5a:	2500      	movs	r5, #0
 800ed5c:	f104 0619 	add.w	r6, r4, #25
 800ed60:	e7f5      	b.n	800ed4e <_printf_i+0x222>
 800ed62:	bf00      	nop
 800ed64:	080132aa 	.word	0x080132aa
 800ed68:	080132bb 	.word	0x080132bb

0800ed6c <_scanf_float>:
 800ed6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed70:	b087      	sub	sp, #28
 800ed72:	4617      	mov	r7, r2
 800ed74:	9303      	str	r3, [sp, #12]
 800ed76:	688b      	ldr	r3, [r1, #8]
 800ed78:	1e5a      	subs	r2, r3, #1
 800ed7a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ed7e:	bf81      	itttt	hi
 800ed80:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ed84:	eb03 0b05 	addhi.w	fp, r3, r5
 800ed88:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ed8c:	608b      	strhi	r3, [r1, #8]
 800ed8e:	680b      	ldr	r3, [r1, #0]
 800ed90:	460a      	mov	r2, r1
 800ed92:	f04f 0500 	mov.w	r5, #0
 800ed96:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ed9a:	f842 3b1c 	str.w	r3, [r2], #28
 800ed9e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800eda2:	4680      	mov	r8, r0
 800eda4:	460c      	mov	r4, r1
 800eda6:	bf98      	it	ls
 800eda8:	f04f 0b00 	movls.w	fp, #0
 800edac:	9201      	str	r2, [sp, #4]
 800edae:	4616      	mov	r6, r2
 800edb0:	46aa      	mov	sl, r5
 800edb2:	46a9      	mov	r9, r5
 800edb4:	9502      	str	r5, [sp, #8]
 800edb6:	68a2      	ldr	r2, [r4, #8]
 800edb8:	b152      	cbz	r2, 800edd0 <_scanf_float+0x64>
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	781b      	ldrb	r3, [r3, #0]
 800edbe:	2b4e      	cmp	r3, #78	@ 0x4e
 800edc0:	d864      	bhi.n	800ee8c <_scanf_float+0x120>
 800edc2:	2b40      	cmp	r3, #64	@ 0x40
 800edc4:	d83c      	bhi.n	800ee40 <_scanf_float+0xd4>
 800edc6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800edca:	b2c8      	uxtb	r0, r1
 800edcc:	280e      	cmp	r0, #14
 800edce:	d93a      	bls.n	800ee46 <_scanf_float+0xda>
 800edd0:	f1b9 0f00 	cmp.w	r9, #0
 800edd4:	d003      	beq.n	800edde <_scanf_float+0x72>
 800edd6:	6823      	ldr	r3, [r4, #0]
 800edd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800eddc:	6023      	str	r3, [r4, #0]
 800edde:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ede2:	f1ba 0f01 	cmp.w	sl, #1
 800ede6:	f200 8117 	bhi.w	800f018 <_scanf_float+0x2ac>
 800edea:	9b01      	ldr	r3, [sp, #4]
 800edec:	429e      	cmp	r6, r3
 800edee:	f200 8108 	bhi.w	800f002 <_scanf_float+0x296>
 800edf2:	2001      	movs	r0, #1
 800edf4:	b007      	add	sp, #28
 800edf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edfa:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800edfe:	2a0d      	cmp	r2, #13
 800ee00:	d8e6      	bhi.n	800edd0 <_scanf_float+0x64>
 800ee02:	a101      	add	r1, pc, #4	@ (adr r1, 800ee08 <_scanf_float+0x9c>)
 800ee04:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ee08:	0800ef4f 	.word	0x0800ef4f
 800ee0c:	0800edd1 	.word	0x0800edd1
 800ee10:	0800edd1 	.word	0x0800edd1
 800ee14:	0800edd1 	.word	0x0800edd1
 800ee18:	0800efaf 	.word	0x0800efaf
 800ee1c:	0800ef87 	.word	0x0800ef87
 800ee20:	0800edd1 	.word	0x0800edd1
 800ee24:	0800edd1 	.word	0x0800edd1
 800ee28:	0800ef5d 	.word	0x0800ef5d
 800ee2c:	0800edd1 	.word	0x0800edd1
 800ee30:	0800edd1 	.word	0x0800edd1
 800ee34:	0800edd1 	.word	0x0800edd1
 800ee38:	0800edd1 	.word	0x0800edd1
 800ee3c:	0800ef15 	.word	0x0800ef15
 800ee40:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800ee44:	e7db      	b.n	800edfe <_scanf_float+0x92>
 800ee46:	290e      	cmp	r1, #14
 800ee48:	d8c2      	bhi.n	800edd0 <_scanf_float+0x64>
 800ee4a:	a001      	add	r0, pc, #4	@ (adr r0, 800ee50 <_scanf_float+0xe4>)
 800ee4c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ee50:	0800ef05 	.word	0x0800ef05
 800ee54:	0800edd1 	.word	0x0800edd1
 800ee58:	0800ef05 	.word	0x0800ef05
 800ee5c:	0800ef9b 	.word	0x0800ef9b
 800ee60:	0800edd1 	.word	0x0800edd1
 800ee64:	0800eead 	.word	0x0800eead
 800ee68:	0800eeeb 	.word	0x0800eeeb
 800ee6c:	0800eeeb 	.word	0x0800eeeb
 800ee70:	0800eeeb 	.word	0x0800eeeb
 800ee74:	0800eeeb 	.word	0x0800eeeb
 800ee78:	0800eeeb 	.word	0x0800eeeb
 800ee7c:	0800eeeb 	.word	0x0800eeeb
 800ee80:	0800eeeb 	.word	0x0800eeeb
 800ee84:	0800eeeb 	.word	0x0800eeeb
 800ee88:	0800eeeb 	.word	0x0800eeeb
 800ee8c:	2b6e      	cmp	r3, #110	@ 0x6e
 800ee8e:	d809      	bhi.n	800eea4 <_scanf_float+0x138>
 800ee90:	2b60      	cmp	r3, #96	@ 0x60
 800ee92:	d8b2      	bhi.n	800edfa <_scanf_float+0x8e>
 800ee94:	2b54      	cmp	r3, #84	@ 0x54
 800ee96:	d07b      	beq.n	800ef90 <_scanf_float+0x224>
 800ee98:	2b59      	cmp	r3, #89	@ 0x59
 800ee9a:	d199      	bne.n	800edd0 <_scanf_float+0x64>
 800ee9c:	2d07      	cmp	r5, #7
 800ee9e:	d197      	bne.n	800edd0 <_scanf_float+0x64>
 800eea0:	2508      	movs	r5, #8
 800eea2:	e02c      	b.n	800eefe <_scanf_float+0x192>
 800eea4:	2b74      	cmp	r3, #116	@ 0x74
 800eea6:	d073      	beq.n	800ef90 <_scanf_float+0x224>
 800eea8:	2b79      	cmp	r3, #121	@ 0x79
 800eeaa:	e7f6      	b.n	800ee9a <_scanf_float+0x12e>
 800eeac:	6821      	ldr	r1, [r4, #0]
 800eeae:	05c8      	lsls	r0, r1, #23
 800eeb0:	d51b      	bpl.n	800eeea <_scanf_float+0x17e>
 800eeb2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800eeb6:	6021      	str	r1, [r4, #0]
 800eeb8:	f109 0901 	add.w	r9, r9, #1
 800eebc:	f1bb 0f00 	cmp.w	fp, #0
 800eec0:	d003      	beq.n	800eeca <_scanf_float+0x15e>
 800eec2:	3201      	adds	r2, #1
 800eec4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800eec8:	60a2      	str	r2, [r4, #8]
 800eeca:	68a3      	ldr	r3, [r4, #8]
 800eecc:	3b01      	subs	r3, #1
 800eece:	60a3      	str	r3, [r4, #8]
 800eed0:	6923      	ldr	r3, [r4, #16]
 800eed2:	3301      	adds	r3, #1
 800eed4:	6123      	str	r3, [r4, #16]
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	3b01      	subs	r3, #1
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	607b      	str	r3, [r7, #4]
 800eede:	f340 8087 	ble.w	800eff0 <_scanf_float+0x284>
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	3301      	adds	r3, #1
 800eee6:	603b      	str	r3, [r7, #0]
 800eee8:	e765      	b.n	800edb6 <_scanf_float+0x4a>
 800eeea:	eb1a 0105 	adds.w	r1, sl, r5
 800eeee:	f47f af6f 	bne.w	800edd0 <_scanf_float+0x64>
 800eef2:	6822      	ldr	r2, [r4, #0]
 800eef4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800eef8:	6022      	str	r2, [r4, #0]
 800eefa:	460d      	mov	r5, r1
 800eefc:	468a      	mov	sl, r1
 800eefe:	f806 3b01 	strb.w	r3, [r6], #1
 800ef02:	e7e2      	b.n	800eeca <_scanf_float+0x15e>
 800ef04:	6822      	ldr	r2, [r4, #0]
 800ef06:	0610      	lsls	r0, r2, #24
 800ef08:	f57f af62 	bpl.w	800edd0 <_scanf_float+0x64>
 800ef0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ef10:	6022      	str	r2, [r4, #0]
 800ef12:	e7f4      	b.n	800eefe <_scanf_float+0x192>
 800ef14:	f1ba 0f00 	cmp.w	sl, #0
 800ef18:	d10e      	bne.n	800ef38 <_scanf_float+0x1cc>
 800ef1a:	f1b9 0f00 	cmp.w	r9, #0
 800ef1e:	d10e      	bne.n	800ef3e <_scanf_float+0x1d2>
 800ef20:	6822      	ldr	r2, [r4, #0]
 800ef22:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ef26:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ef2a:	d108      	bne.n	800ef3e <_scanf_float+0x1d2>
 800ef2c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ef30:	6022      	str	r2, [r4, #0]
 800ef32:	f04f 0a01 	mov.w	sl, #1
 800ef36:	e7e2      	b.n	800eefe <_scanf_float+0x192>
 800ef38:	f1ba 0f02 	cmp.w	sl, #2
 800ef3c:	d055      	beq.n	800efea <_scanf_float+0x27e>
 800ef3e:	2d01      	cmp	r5, #1
 800ef40:	d002      	beq.n	800ef48 <_scanf_float+0x1dc>
 800ef42:	2d04      	cmp	r5, #4
 800ef44:	f47f af44 	bne.w	800edd0 <_scanf_float+0x64>
 800ef48:	3501      	adds	r5, #1
 800ef4a:	b2ed      	uxtb	r5, r5
 800ef4c:	e7d7      	b.n	800eefe <_scanf_float+0x192>
 800ef4e:	f1ba 0f01 	cmp.w	sl, #1
 800ef52:	f47f af3d 	bne.w	800edd0 <_scanf_float+0x64>
 800ef56:	f04f 0a02 	mov.w	sl, #2
 800ef5a:	e7d0      	b.n	800eefe <_scanf_float+0x192>
 800ef5c:	b97d      	cbnz	r5, 800ef7e <_scanf_float+0x212>
 800ef5e:	f1b9 0f00 	cmp.w	r9, #0
 800ef62:	f47f af38 	bne.w	800edd6 <_scanf_float+0x6a>
 800ef66:	6822      	ldr	r2, [r4, #0]
 800ef68:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ef6c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ef70:	f040 8108 	bne.w	800f184 <_scanf_float+0x418>
 800ef74:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ef78:	6022      	str	r2, [r4, #0]
 800ef7a:	2501      	movs	r5, #1
 800ef7c:	e7bf      	b.n	800eefe <_scanf_float+0x192>
 800ef7e:	2d03      	cmp	r5, #3
 800ef80:	d0e2      	beq.n	800ef48 <_scanf_float+0x1dc>
 800ef82:	2d05      	cmp	r5, #5
 800ef84:	e7de      	b.n	800ef44 <_scanf_float+0x1d8>
 800ef86:	2d02      	cmp	r5, #2
 800ef88:	f47f af22 	bne.w	800edd0 <_scanf_float+0x64>
 800ef8c:	2503      	movs	r5, #3
 800ef8e:	e7b6      	b.n	800eefe <_scanf_float+0x192>
 800ef90:	2d06      	cmp	r5, #6
 800ef92:	f47f af1d 	bne.w	800edd0 <_scanf_float+0x64>
 800ef96:	2507      	movs	r5, #7
 800ef98:	e7b1      	b.n	800eefe <_scanf_float+0x192>
 800ef9a:	6822      	ldr	r2, [r4, #0]
 800ef9c:	0591      	lsls	r1, r2, #22
 800ef9e:	f57f af17 	bpl.w	800edd0 <_scanf_float+0x64>
 800efa2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800efa6:	6022      	str	r2, [r4, #0]
 800efa8:	f8cd 9008 	str.w	r9, [sp, #8]
 800efac:	e7a7      	b.n	800eefe <_scanf_float+0x192>
 800efae:	6822      	ldr	r2, [r4, #0]
 800efb0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800efb4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800efb8:	d006      	beq.n	800efc8 <_scanf_float+0x25c>
 800efba:	0550      	lsls	r0, r2, #21
 800efbc:	f57f af08 	bpl.w	800edd0 <_scanf_float+0x64>
 800efc0:	f1b9 0f00 	cmp.w	r9, #0
 800efc4:	f000 80de 	beq.w	800f184 <_scanf_float+0x418>
 800efc8:	0591      	lsls	r1, r2, #22
 800efca:	bf58      	it	pl
 800efcc:	9902      	ldrpl	r1, [sp, #8]
 800efce:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800efd2:	bf58      	it	pl
 800efd4:	eba9 0101 	subpl.w	r1, r9, r1
 800efd8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800efdc:	bf58      	it	pl
 800efde:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800efe2:	6022      	str	r2, [r4, #0]
 800efe4:	f04f 0900 	mov.w	r9, #0
 800efe8:	e789      	b.n	800eefe <_scanf_float+0x192>
 800efea:	f04f 0a03 	mov.w	sl, #3
 800efee:	e786      	b.n	800eefe <_scanf_float+0x192>
 800eff0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800eff4:	4639      	mov	r1, r7
 800eff6:	4640      	mov	r0, r8
 800eff8:	4798      	blx	r3
 800effa:	2800      	cmp	r0, #0
 800effc:	f43f aedb 	beq.w	800edb6 <_scanf_float+0x4a>
 800f000:	e6e6      	b.n	800edd0 <_scanf_float+0x64>
 800f002:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f006:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f00a:	463a      	mov	r2, r7
 800f00c:	4640      	mov	r0, r8
 800f00e:	4798      	blx	r3
 800f010:	6923      	ldr	r3, [r4, #16]
 800f012:	3b01      	subs	r3, #1
 800f014:	6123      	str	r3, [r4, #16]
 800f016:	e6e8      	b.n	800edea <_scanf_float+0x7e>
 800f018:	1e6b      	subs	r3, r5, #1
 800f01a:	2b06      	cmp	r3, #6
 800f01c:	d824      	bhi.n	800f068 <_scanf_float+0x2fc>
 800f01e:	2d02      	cmp	r5, #2
 800f020:	d836      	bhi.n	800f090 <_scanf_float+0x324>
 800f022:	9b01      	ldr	r3, [sp, #4]
 800f024:	429e      	cmp	r6, r3
 800f026:	f67f aee4 	bls.w	800edf2 <_scanf_float+0x86>
 800f02a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f02e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f032:	463a      	mov	r2, r7
 800f034:	4640      	mov	r0, r8
 800f036:	4798      	blx	r3
 800f038:	6923      	ldr	r3, [r4, #16]
 800f03a:	3b01      	subs	r3, #1
 800f03c:	6123      	str	r3, [r4, #16]
 800f03e:	e7f0      	b.n	800f022 <_scanf_float+0x2b6>
 800f040:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f044:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f048:	463a      	mov	r2, r7
 800f04a:	4640      	mov	r0, r8
 800f04c:	4798      	blx	r3
 800f04e:	6923      	ldr	r3, [r4, #16]
 800f050:	3b01      	subs	r3, #1
 800f052:	6123      	str	r3, [r4, #16]
 800f054:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f058:	fa5f fa8a 	uxtb.w	sl, sl
 800f05c:	f1ba 0f02 	cmp.w	sl, #2
 800f060:	d1ee      	bne.n	800f040 <_scanf_float+0x2d4>
 800f062:	3d03      	subs	r5, #3
 800f064:	b2ed      	uxtb	r5, r5
 800f066:	1b76      	subs	r6, r6, r5
 800f068:	6823      	ldr	r3, [r4, #0]
 800f06a:	05da      	lsls	r2, r3, #23
 800f06c:	d530      	bpl.n	800f0d0 <_scanf_float+0x364>
 800f06e:	055b      	lsls	r3, r3, #21
 800f070:	d511      	bpl.n	800f096 <_scanf_float+0x32a>
 800f072:	9b01      	ldr	r3, [sp, #4]
 800f074:	429e      	cmp	r6, r3
 800f076:	f67f aebc 	bls.w	800edf2 <_scanf_float+0x86>
 800f07a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f07e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f082:	463a      	mov	r2, r7
 800f084:	4640      	mov	r0, r8
 800f086:	4798      	blx	r3
 800f088:	6923      	ldr	r3, [r4, #16]
 800f08a:	3b01      	subs	r3, #1
 800f08c:	6123      	str	r3, [r4, #16]
 800f08e:	e7f0      	b.n	800f072 <_scanf_float+0x306>
 800f090:	46aa      	mov	sl, r5
 800f092:	46b3      	mov	fp, r6
 800f094:	e7de      	b.n	800f054 <_scanf_float+0x2e8>
 800f096:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f09a:	6923      	ldr	r3, [r4, #16]
 800f09c:	2965      	cmp	r1, #101	@ 0x65
 800f09e:	f103 33ff 	add.w	r3, r3, #4294967295
 800f0a2:	f106 35ff 	add.w	r5, r6, #4294967295
 800f0a6:	6123      	str	r3, [r4, #16]
 800f0a8:	d00c      	beq.n	800f0c4 <_scanf_float+0x358>
 800f0aa:	2945      	cmp	r1, #69	@ 0x45
 800f0ac:	d00a      	beq.n	800f0c4 <_scanf_float+0x358>
 800f0ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f0b2:	463a      	mov	r2, r7
 800f0b4:	4640      	mov	r0, r8
 800f0b6:	4798      	blx	r3
 800f0b8:	6923      	ldr	r3, [r4, #16]
 800f0ba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f0be:	3b01      	subs	r3, #1
 800f0c0:	1eb5      	subs	r5, r6, #2
 800f0c2:	6123      	str	r3, [r4, #16]
 800f0c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f0c8:	463a      	mov	r2, r7
 800f0ca:	4640      	mov	r0, r8
 800f0cc:	4798      	blx	r3
 800f0ce:	462e      	mov	r6, r5
 800f0d0:	6822      	ldr	r2, [r4, #0]
 800f0d2:	f012 0210 	ands.w	r2, r2, #16
 800f0d6:	d001      	beq.n	800f0dc <_scanf_float+0x370>
 800f0d8:	2000      	movs	r0, #0
 800f0da:	e68b      	b.n	800edf4 <_scanf_float+0x88>
 800f0dc:	7032      	strb	r2, [r6, #0]
 800f0de:	6823      	ldr	r3, [r4, #0]
 800f0e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f0e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f0e8:	d11c      	bne.n	800f124 <_scanf_float+0x3b8>
 800f0ea:	9b02      	ldr	r3, [sp, #8]
 800f0ec:	454b      	cmp	r3, r9
 800f0ee:	eba3 0209 	sub.w	r2, r3, r9
 800f0f2:	d123      	bne.n	800f13c <_scanf_float+0x3d0>
 800f0f4:	9901      	ldr	r1, [sp, #4]
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	4640      	mov	r0, r8
 800f0fa:	f7ff f975 	bl	800e3e8 <_strtod_r>
 800f0fe:	9b03      	ldr	r3, [sp, #12]
 800f100:	6821      	ldr	r1, [r4, #0]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	f011 0f02 	tst.w	r1, #2
 800f108:	ec57 6b10 	vmov	r6, r7, d0
 800f10c:	f103 0204 	add.w	r2, r3, #4
 800f110:	d01f      	beq.n	800f152 <_scanf_float+0x3e6>
 800f112:	9903      	ldr	r1, [sp, #12]
 800f114:	600a      	str	r2, [r1, #0]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	e9c3 6700 	strd	r6, r7, [r3]
 800f11c:	68e3      	ldr	r3, [r4, #12]
 800f11e:	3301      	adds	r3, #1
 800f120:	60e3      	str	r3, [r4, #12]
 800f122:	e7d9      	b.n	800f0d8 <_scanf_float+0x36c>
 800f124:	9b04      	ldr	r3, [sp, #16]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d0e4      	beq.n	800f0f4 <_scanf_float+0x388>
 800f12a:	9905      	ldr	r1, [sp, #20]
 800f12c:	230a      	movs	r3, #10
 800f12e:	3101      	adds	r1, #1
 800f130:	4640      	mov	r0, r8
 800f132:	f002 fa41 	bl	80115b8 <_strtol_r>
 800f136:	9b04      	ldr	r3, [sp, #16]
 800f138:	9e05      	ldr	r6, [sp, #20]
 800f13a:	1ac2      	subs	r2, r0, r3
 800f13c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f140:	429e      	cmp	r6, r3
 800f142:	bf28      	it	cs
 800f144:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f148:	4910      	ldr	r1, [pc, #64]	@ (800f18c <_scanf_float+0x420>)
 800f14a:	4630      	mov	r0, r6
 800f14c:	f000 f8e4 	bl	800f318 <siprintf>
 800f150:	e7d0      	b.n	800f0f4 <_scanf_float+0x388>
 800f152:	f011 0f04 	tst.w	r1, #4
 800f156:	9903      	ldr	r1, [sp, #12]
 800f158:	600a      	str	r2, [r1, #0]
 800f15a:	d1dc      	bne.n	800f116 <_scanf_float+0x3aa>
 800f15c:	681d      	ldr	r5, [r3, #0]
 800f15e:	4632      	mov	r2, r6
 800f160:	463b      	mov	r3, r7
 800f162:	4630      	mov	r0, r6
 800f164:	4639      	mov	r1, r7
 800f166:	f7f1 fd01 	bl	8000b6c <__aeabi_dcmpun>
 800f16a:	b128      	cbz	r0, 800f178 <_scanf_float+0x40c>
 800f16c:	4808      	ldr	r0, [pc, #32]	@ (800f190 <_scanf_float+0x424>)
 800f16e:	f000 fa3b 	bl	800f5e8 <nanf>
 800f172:	ed85 0a00 	vstr	s0, [r5]
 800f176:	e7d1      	b.n	800f11c <_scanf_float+0x3b0>
 800f178:	4630      	mov	r0, r6
 800f17a:	4639      	mov	r1, r7
 800f17c:	f7f1 fd54 	bl	8000c28 <__aeabi_d2f>
 800f180:	6028      	str	r0, [r5, #0]
 800f182:	e7cb      	b.n	800f11c <_scanf_float+0x3b0>
 800f184:	f04f 0900 	mov.w	r9, #0
 800f188:	e629      	b.n	800edde <_scanf_float+0x72>
 800f18a:	bf00      	nop
 800f18c:	080132cc 	.word	0x080132cc
 800f190:	08013385 	.word	0x08013385

0800f194 <std>:
 800f194:	2300      	movs	r3, #0
 800f196:	b510      	push	{r4, lr}
 800f198:	4604      	mov	r4, r0
 800f19a:	e9c0 3300 	strd	r3, r3, [r0]
 800f19e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f1a2:	6083      	str	r3, [r0, #8]
 800f1a4:	8181      	strh	r1, [r0, #12]
 800f1a6:	6643      	str	r3, [r0, #100]	@ 0x64
 800f1a8:	81c2      	strh	r2, [r0, #14]
 800f1aa:	6183      	str	r3, [r0, #24]
 800f1ac:	4619      	mov	r1, r3
 800f1ae:	2208      	movs	r2, #8
 800f1b0:	305c      	adds	r0, #92	@ 0x5c
 800f1b2:	f000 f914 	bl	800f3de <memset>
 800f1b6:	4b0d      	ldr	r3, [pc, #52]	@ (800f1ec <std+0x58>)
 800f1b8:	6263      	str	r3, [r4, #36]	@ 0x24
 800f1ba:	4b0d      	ldr	r3, [pc, #52]	@ (800f1f0 <std+0x5c>)
 800f1bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f1be:	4b0d      	ldr	r3, [pc, #52]	@ (800f1f4 <std+0x60>)
 800f1c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f1c2:	4b0d      	ldr	r3, [pc, #52]	@ (800f1f8 <std+0x64>)
 800f1c4:	6323      	str	r3, [r4, #48]	@ 0x30
 800f1c6:	4b0d      	ldr	r3, [pc, #52]	@ (800f1fc <std+0x68>)
 800f1c8:	6224      	str	r4, [r4, #32]
 800f1ca:	429c      	cmp	r4, r3
 800f1cc:	d006      	beq.n	800f1dc <std+0x48>
 800f1ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f1d2:	4294      	cmp	r4, r2
 800f1d4:	d002      	beq.n	800f1dc <std+0x48>
 800f1d6:	33d0      	adds	r3, #208	@ 0xd0
 800f1d8:	429c      	cmp	r4, r3
 800f1da:	d105      	bne.n	800f1e8 <std+0x54>
 800f1dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f1e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1e4:	f000 b9e6 	b.w	800f5b4 <__retarget_lock_init_recursive>
 800f1e8:	bd10      	pop	{r4, pc}
 800f1ea:	bf00      	nop
 800f1ec:	0800f359 	.word	0x0800f359
 800f1f0:	0800f37b 	.word	0x0800f37b
 800f1f4:	0800f3b3 	.word	0x0800f3b3
 800f1f8:	0800f3d7 	.word	0x0800f3d7
 800f1fc:	20003b84 	.word	0x20003b84

0800f200 <stdio_exit_handler>:
 800f200:	4a02      	ldr	r2, [pc, #8]	@ (800f20c <stdio_exit_handler+0xc>)
 800f202:	4903      	ldr	r1, [pc, #12]	@ (800f210 <stdio_exit_handler+0x10>)
 800f204:	4803      	ldr	r0, [pc, #12]	@ (800f214 <stdio_exit_handler+0x14>)
 800f206:	f000 b869 	b.w	800f2dc <_fwalk_sglue>
 800f20a:	bf00      	nop
 800f20c:	20000020 	.word	0x20000020
 800f210:	0801198d 	.word	0x0801198d
 800f214:	2000019c 	.word	0x2000019c

0800f218 <cleanup_stdio>:
 800f218:	6841      	ldr	r1, [r0, #4]
 800f21a:	4b0c      	ldr	r3, [pc, #48]	@ (800f24c <cleanup_stdio+0x34>)
 800f21c:	4299      	cmp	r1, r3
 800f21e:	b510      	push	{r4, lr}
 800f220:	4604      	mov	r4, r0
 800f222:	d001      	beq.n	800f228 <cleanup_stdio+0x10>
 800f224:	f002 fbb2 	bl	801198c <_fflush_r>
 800f228:	68a1      	ldr	r1, [r4, #8]
 800f22a:	4b09      	ldr	r3, [pc, #36]	@ (800f250 <cleanup_stdio+0x38>)
 800f22c:	4299      	cmp	r1, r3
 800f22e:	d002      	beq.n	800f236 <cleanup_stdio+0x1e>
 800f230:	4620      	mov	r0, r4
 800f232:	f002 fbab 	bl	801198c <_fflush_r>
 800f236:	68e1      	ldr	r1, [r4, #12]
 800f238:	4b06      	ldr	r3, [pc, #24]	@ (800f254 <cleanup_stdio+0x3c>)
 800f23a:	4299      	cmp	r1, r3
 800f23c:	d004      	beq.n	800f248 <cleanup_stdio+0x30>
 800f23e:	4620      	mov	r0, r4
 800f240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f244:	f002 bba2 	b.w	801198c <_fflush_r>
 800f248:	bd10      	pop	{r4, pc}
 800f24a:	bf00      	nop
 800f24c:	20003b84 	.word	0x20003b84
 800f250:	20003bec 	.word	0x20003bec
 800f254:	20003c54 	.word	0x20003c54

0800f258 <global_stdio_init.part.0>:
 800f258:	b510      	push	{r4, lr}
 800f25a:	4b0b      	ldr	r3, [pc, #44]	@ (800f288 <global_stdio_init.part.0+0x30>)
 800f25c:	4c0b      	ldr	r4, [pc, #44]	@ (800f28c <global_stdio_init.part.0+0x34>)
 800f25e:	4a0c      	ldr	r2, [pc, #48]	@ (800f290 <global_stdio_init.part.0+0x38>)
 800f260:	601a      	str	r2, [r3, #0]
 800f262:	4620      	mov	r0, r4
 800f264:	2200      	movs	r2, #0
 800f266:	2104      	movs	r1, #4
 800f268:	f7ff ff94 	bl	800f194 <std>
 800f26c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f270:	2201      	movs	r2, #1
 800f272:	2109      	movs	r1, #9
 800f274:	f7ff ff8e 	bl	800f194 <std>
 800f278:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f27c:	2202      	movs	r2, #2
 800f27e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f282:	2112      	movs	r1, #18
 800f284:	f7ff bf86 	b.w	800f194 <std>
 800f288:	20003cbc 	.word	0x20003cbc
 800f28c:	20003b84 	.word	0x20003b84
 800f290:	0800f201 	.word	0x0800f201

0800f294 <__sfp_lock_acquire>:
 800f294:	4801      	ldr	r0, [pc, #4]	@ (800f29c <__sfp_lock_acquire+0x8>)
 800f296:	f000 b98e 	b.w	800f5b6 <__retarget_lock_acquire_recursive>
 800f29a:	bf00      	nop
 800f29c:	20003cc5 	.word	0x20003cc5

0800f2a0 <__sfp_lock_release>:
 800f2a0:	4801      	ldr	r0, [pc, #4]	@ (800f2a8 <__sfp_lock_release+0x8>)
 800f2a2:	f000 b989 	b.w	800f5b8 <__retarget_lock_release_recursive>
 800f2a6:	bf00      	nop
 800f2a8:	20003cc5 	.word	0x20003cc5

0800f2ac <__sinit>:
 800f2ac:	b510      	push	{r4, lr}
 800f2ae:	4604      	mov	r4, r0
 800f2b0:	f7ff fff0 	bl	800f294 <__sfp_lock_acquire>
 800f2b4:	6a23      	ldr	r3, [r4, #32]
 800f2b6:	b11b      	cbz	r3, 800f2c0 <__sinit+0x14>
 800f2b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2bc:	f7ff bff0 	b.w	800f2a0 <__sfp_lock_release>
 800f2c0:	4b04      	ldr	r3, [pc, #16]	@ (800f2d4 <__sinit+0x28>)
 800f2c2:	6223      	str	r3, [r4, #32]
 800f2c4:	4b04      	ldr	r3, [pc, #16]	@ (800f2d8 <__sinit+0x2c>)
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d1f5      	bne.n	800f2b8 <__sinit+0xc>
 800f2cc:	f7ff ffc4 	bl	800f258 <global_stdio_init.part.0>
 800f2d0:	e7f2      	b.n	800f2b8 <__sinit+0xc>
 800f2d2:	bf00      	nop
 800f2d4:	0800f219 	.word	0x0800f219
 800f2d8:	20003cbc 	.word	0x20003cbc

0800f2dc <_fwalk_sglue>:
 800f2dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2e0:	4607      	mov	r7, r0
 800f2e2:	4688      	mov	r8, r1
 800f2e4:	4614      	mov	r4, r2
 800f2e6:	2600      	movs	r6, #0
 800f2e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f2ec:	f1b9 0901 	subs.w	r9, r9, #1
 800f2f0:	d505      	bpl.n	800f2fe <_fwalk_sglue+0x22>
 800f2f2:	6824      	ldr	r4, [r4, #0]
 800f2f4:	2c00      	cmp	r4, #0
 800f2f6:	d1f7      	bne.n	800f2e8 <_fwalk_sglue+0xc>
 800f2f8:	4630      	mov	r0, r6
 800f2fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2fe:	89ab      	ldrh	r3, [r5, #12]
 800f300:	2b01      	cmp	r3, #1
 800f302:	d907      	bls.n	800f314 <_fwalk_sglue+0x38>
 800f304:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f308:	3301      	adds	r3, #1
 800f30a:	d003      	beq.n	800f314 <_fwalk_sglue+0x38>
 800f30c:	4629      	mov	r1, r5
 800f30e:	4638      	mov	r0, r7
 800f310:	47c0      	blx	r8
 800f312:	4306      	orrs	r6, r0
 800f314:	3568      	adds	r5, #104	@ 0x68
 800f316:	e7e9      	b.n	800f2ec <_fwalk_sglue+0x10>

0800f318 <siprintf>:
 800f318:	b40e      	push	{r1, r2, r3}
 800f31a:	b500      	push	{lr}
 800f31c:	b09c      	sub	sp, #112	@ 0x70
 800f31e:	ab1d      	add	r3, sp, #116	@ 0x74
 800f320:	9002      	str	r0, [sp, #8]
 800f322:	9006      	str	r0, [sp, #24]
 800f324:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f328:	4809      	ldr	r0, [pc, #36]	@ (800f350 <siprintf+0x38>)
 800f32a:	9107      	str	r1, [sp, #28]
 800f32c:	9104      	str	r1, [sp, #16]
 800f32e:	4909      	ldr	r1, [pc, #36]	@ (800f354 <siprintf+0x3c>)
 800f330:	f853 2b04 	ldr.w	r2, [r3], #4
 800f334:	9105      	str	r1, [sp, #20]
 800f336:	6800      	ldr	r0, [r0, #0]
 800f338:	9301      	str	r3, [sp, #4]
 800f33a:	a902      	add	r1, sp, #8
 800f33c:	f002 f9a6 	bl	801168c <_svfiprintf_r>
 800f340:	9b02      	ldr	r3, [sp, #8]
 800f342:	2200      	movs	r2, #0
 800f344:	701a      	strb	r2, [r3, #0]
 800f346:	b01c      	add	sp, #112	@ 0x70
 800f348:	f85d eb04 	ldr.w	lr, [sp], #4
 800f34c:	b003      	add	sp, #12
 800f34e:	4770      	bx	lr
 800f350:	20000198 	.word	0x20000198
 800f354:	ffff0208 	.word	0xffff0208

0800f358 <__sread>:
 800f358:	b510      	push	{r4, lr}
 800f35a:	460c      	mov	r4, r1
 800f35c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f360:	f000 f8da 	bl	800f518 <_read_r>
 800f364:	2800      	cmp	r0, #0
 800f366:	bfab      	itete	ge
 800f368:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f36a:	89a3      	ldrhlt	r3, [r4, #12]
 800f36c:	181b      	addge	r3, r3, r0
 800f36e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f372:	bfac      	ite	ge
 800f374:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f376:	81a3      	strhlt	r3, [r4, #12]
 800f378:	bd10      	pop	{r4, pc}

0800f37a <__swrite>:
 800f37a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f37e:	461f      	mov	r7, r3
 800f380:	898b      	ldrh	r3, [r1, #12]
 800f382:	05db      	lsls	r3, r3, #23
 800f384:	4605      	mov	r5, r0
 800f386:	460c      	mov	r4, r1
 800f388:	4616      	mov	r6, r2
 800f38a:	d505      	bpl.n	800f398 <__swrite+0x1e>
 800f38c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f390:	2302      	movs	r3, #2
 800f392:	2200      	movs	r2, #0
 800f394:	f000 f8ae 	bl	800f4f4 <_lseek_r>
 800f398:	89a3      	ldrh	r3, [r4, #12]
 800f39a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f39e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f3a2:	81a3      	strh	r3, [r4, #12]
 800f3a4:	4632      	mov	r2, r6
 800f3a6:	463b      	mov	r3, r7
 800f3a8:	4628      	mov	r0, r5
 800f3aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f3ae:	f000 b8c5 	b.w	800f53c <_write_r>

0800f3b2 <__sseek>:
 800f3b2:	b510      	push	{r4, lr}
 800f3b4:	460c      	mov	r4, r1
 800f3b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3ba:	f000 f89b 	bl	800f4f4 <_lseek_r>
 800f3be:	1c43      	adds	r3, r0, #1
 800f3c0:	89a3      	ldrh	r3, [r4, #12]
 800f3c2:	bf15      	itete	ne
 800f3c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f3c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f3ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f3ce:	81a3      	strheq	r3, [r4, #12]
 800f3d0:	bf18      	it	ne
 800f3d2:	81a3      	strhne	r3, [r4, #12]
 800f3d4:	bd10      	pop	{r4, pc}

0800f3d6 <__sclose>:
 800f3d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3da:	f000 b87b 	b.w	800f4d4 <_close_r>

0800f3de <memset>:
 800f3de:	4402      	add	r2, r0
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	4293      	cmp	r3, r2
 800f3e4:	d100      	bne.n	800f3e8 <memset+0xa>
 800f3e6:	4770      	bx	lr
 800f3e8:	f803 1b01 	strb.w	r1, [r3], #1
 800f3ec:	e7f9      	b.n	800f3e2 <memset+0x4>

0800f3ee <strncmp>:
 800f3ee:	b510      	push	{r4, lr}
 800f3f0:	b16a      	cbz	r2, 800f40e <strncmp+0x20>
 800f3f2:	3901      	subs	r1, #1
 800f3f4:	1884      	adds	r4, r0, r2
 800f3f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3fa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f3fe:	429a      	cmp	r2, r3
 800f400:	d103      	bne.n	800f40a <strncmp+0x1c>
 800f402:	42a0      	cmp	r0, r4
 800f404:	d001      	beq.n	800f40a <strncmp+0x1c>
 800f406:	2a00      	cmp	r2, #0
 800f408:	d1f5      	bne.n	800f3f6 <strncmp+0x8>
 800f40a:	1ad0      	subs	r0, r2, r3
 800f40c:	bd10      	pop	{r4, pc}
 800f40e:	4610      	mov	r0, r2
 800f410:	e7fc      	b.n	800f40c <strncmp+0x1e>
	...

0800f414 <strtok>:
 800f414:	4b16      	ldr	r3, [pc, #88]	@ (800f470 <strtok+0x5c>)
 800f416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f41a:	681f      	ldr	r7, [r3, #0]
 800f41c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800f41e:	4605      	mov	r5, r0
 800f420:	460e      	mov	r6, r1
 800f422:	b9ec      	cbnz	r4, 800f460 <strtok+0x4c>
 800f424:	2050      	movs	r0, #80	@ 0x50
 800f426:	f001 fad3 	bl	80109d0 <malloc>
 800f42a:	4602      	mov	r2, r0
 800f42c:	6478      	str	r0, [r7, #68]	@ 0x44
 800f42e:	b920      	cbnz	r0, 800f43a <strtok+0x26>
 800f430:	4b10      	ldr	r3, [pc, #64]	@ (800f474 <strtok+0x60>)
 800f432:	4811      	ldr	r0, [pc, #68]	@ (800f478 <strtok+0x64>)
 800f434:	215b      	movs	r1, #91	@ 0x5b
 800f436:	f000 f8dd 	bl	800f5f4 <__assert_func>
 800f43a:	e9c0 4400 	strd	r4, r4, [r0]
 800f43e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f442:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f446:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800f44a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800f44e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800f452:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800f456:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800f45a:	6184      	str	r4, [r0, #24]
 800f45c:	7704      	strb	r4, [r0, #28]
 800f45e:	6244      	str	r4, [r0, #36]	@ 0x24
 800f460:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f462:	4631      	mov	r1, r6
 800f464:	4628      	mov	r0, r5
 800f466:	2301      	movs	r3, #1
 800f468:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f46c:	f000 b806 	b.w	800f47c <__strtok_r>
 800f470:	20000198 	.word	0x20000198
 800f474:	080132d1 	.word	0x080132d1
 800f478:	080132e8 	.word	0x080132e8

0800f47c <__strtok_r>:
 800f47c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f47e:	4604      	mov	r4, r0
 800f480:	b908      	cbnz	r0, 800f486 <__strtok_r+0xa>
 800f482:	6814      	ldr	r4, [r2, #0]
 800f484:	b144      	cbz	r4, 800f498 <__strtok_r+0x1c>
 800f486:	4620      	mov	r0, r4
 800f488:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f48c:	460f      	mov	r7, r1
 800f48e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f492:	b91e      	cbnz	r6, 800f49c <__strtok_r+0x20>
 800f494:	b965      	cbnz	r5, 800f4b0 <__strtok_r+0x34>
 800f496:	6015      	str	r5, [r2, #0]
 800f498:	2000      	movs	r0, #0
 800f49a:	e005      	b.n	800f4a8 <__strtok_r+0x2c>
 800f49c:	42b5      	cmp	r5, r6
 800f49e:	d1f6      	bne.n	800f48e <__strtok_r+0x12>
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d1f0      	bne.n	800f486 <__strtok_r+0xa>
 800f4a4:	6014      	str	r4, [r2, #0]
 800f4a6:	7003      	strb	r3, [r0, #0]
 800f4a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4aa:	461c      	mov	r4, r3
 800f4ac:	e00c      	b.n	800f4c8 <__strtok_r+0x4c>
 800f4ae:	b915      	cbnz	r5, 800f4b6 <__strtok_r+0x3a>
 800f4b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f4b4:	460e      	mov	r6, r1
 800f4b6:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f4ba:	42ab      	cmp	r3, r5
 800f4bc:	d1f7      	bne.n	800f4ae <__strtok_r+0x32>
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d0f3      	beq.n	800f4aa <__strtok_r+0x2e>
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f4c8:	6014      	str	r4, [r2, #0]
 800f4ca:	e7ed      	b.n	800f4a8 <__strtok_r+0x2c>

0800f4cc <_localeconv_r>:
 800f4cc:	4800      	ldr	r0, [pc, #0]	@ (800f4d0 <_localeconv_r+0x4>)
 800f4ce:	4770      	bx	lr
 800f4d0:	2000011c 	.word	0x2000011c

0800f4d4 <_close_r>:
 800f4d4:	b538      	push	{r3, r4, r5, lr}
 800f4d6:	4d06      	ldr	r5, [pc, #24]	@ (800f4f0 <_close_r+0x1c>)
 800f4d8:	2300      	movs	r3, #0
 800f4da:	4604      	mov	r4, r0
 800f4dc:	4608      	mov	r0, r1
 800f4de:	602b      	str	r3, [r5, #0]
 800f4e0:	f7f7 ff7b 	bl	80073da <_close>
 800f4e4:	1c43      	adds	r3, r0, #1
 800f4e6:	d102      	bne.n	800f4ee <_close_r+0x1a>
 800f4e8:	682b      	ldr	r3, [r5, #0]
 800f4ea:	b103      	cbz	r3, 800f4ee <_close_r+0x1a>
 800f4ec:	6023      	str	r3, [r4, #0]
 800f4ee:	bd38      	pop	{r3, r4, r5, pc}
 800f4f0:	20003cc0 	.word	0x20003cc0

0800f4f4 <_lseek_r>:
 800f4f4:	b538      	push	{r3, r4, r5, lr}
 800f4f6:	4d07      	ldr	r5, [pc, #28]	@ (800f514 <_lseek_r+0x20>)
 800f4f8:	4604      	mov	r4, r0
 800f4fa:	4608      	mov	r0, r1
 800f4fc:	4611      	mov	r1, r2
 800f4fe:	2200      	movs	r2, #0
 800f500:	602a      	str	r2, [r5, #0]
 800f502:	461a      	mov	r2, r3
 800f504:	f7f7 ff90 	bl	8007428 <_lseek>
 800f508:	1c43      	adds	r3, r0, #1
 800f50a:	d102      	bne.n	800f512 <_lseek_r+0x1e>
 800f50c:	682b      	ldr	r3, [r5, #0]
 800f50e:	b103      	cbz	r3, 800f512 <_lseek_r+0x1e>
 800f510:	6023      	str	r3, [r4, #0]
 800f512:	bd38      	pop	{r3, r4, r5, pc}
 800f514:	20003cc0 	.word	0x20003cc0

0800f518 <_read_r>:
 800f518:	b538      	push	{r3, r4, r5, lr}
 800f51a:	4d07      	ldr	r5, [pc, #28]	@ (800f538 <_read_r+0x20>)
 800f51c:	4604      	mov	r4, r0
 800f51e:	4608      	mov	r0, r1
 800f520:	4611      	mov	r1, r2
 800f522:	2200      	movs	r2, #0
 800f524:	602a      	str	r2, [r5, #0]
 800f526:	461a      	mov	r2, r3
 800f528:	f7f7 ff1e 	bl	8007368 <_read>
 800f52c:	1c43      	adds	r3, r0, #1
 800f52e:	d102      	bne.n	800f536 <_read_r+0x1e>
 800f530:	682b      	ldr	r3, [r5, #0]
 800f532:	b103      	cbz	r3, 800f536 <_read_r+0x1e>
 800f534:	6023      	str	r3, [r4, #0]
 800f536:	bd38      	pop	{r3, r4, r5, pc}
 800f538:	20003cc0 	.word	0x20003cc0

0800f53c <_write_r>:
 800f53c:	b538      	push	{r3, r4, r5, lr}
 800f53e:	4d07      	ldr	r5, [pc, #28]	@ (800f55c <_write_r+0x20>)
 800f540:	4604      	mov	r4, r0
 800f542:	4608      	mov	r0, r1
 800f544:	4611      	mov	r1, r2
 800f546:	2200      	movs	r2, #0
 800f548:	602a      	str	r2, [r5, #0]
 800f54a:	461a      	mov	r2, r3
 800f54c:	f7f7 ff29 	bl	80073a2 <_write>
 800f550:	1c43      	adds	r3, r0, #1
 800f552:	d102      	bne.n	800f55a <_write_r+0x1e>
 800f554:	682b      	ldr	r3, [r5, #0]
 800f556:	b103      	cbz	r3, 800f55a <_write_r+0x1e>
 800f558:	6023      	str	r3, [r4, #0]
 800f55a:	bd38      	pop	{r3, r4, r5, pc}
 800f55c:	20003cc0 	.word	0x20003cc0

0800f560 <__errno>:
 800f560:	4b01      	ldr	r3, [pc, #4]	@ (800f568 <__errno+0x8>)
 800f562:	6818      	ldr	r0, [r3, #0]
 800f564:	4770      	bx	lr
 800f566:	bf00      	nop
 800f568:	20000198 	.word	0x20000198

0800f56c <__libc_init_array>:
 800f56c:	b570      	push	{r4, r5, r6, lr}
 800f56e:	4d0d      	ldr	r5, [pc, #52]	@ (800f5a4 <__libc_init_array+0x38>)
 800f570:	4c0d      	ldr	r4, [pc, #52]	@ (800f5a8 <__libc_init_array+0x3c>)
 800f572:	1b64      	subs	r4, r4, r5
 800f574:	10a4      	asrs	r4, r4, #2
 800f576:	2600      	movs	r6, #0
 800f578:	42a6      	cmp	r6, r4
 800f57a:	d109      	bne.n	800f590 <__libc_init_array+0x24>
 800f57c:	4d0b      	ldr	r5, [pc, #44]	@ (800f5ac <__libc_init_array+0x40>)
 800f57e:	4c0c      	ldr	r4, [pc, #48]	@ (800f5b0 <__libc_init_array+0x44>)
 800f580:	f003 fbca 	bl	8012d18 <_init>
 800f584:	1b64      	subs	r4, r4, r5
 800f586:	10a4      	asrs	r4, r4, #2
 800f588:	2600      	movs	r6, #0
 800f58a:	42a6      	cmp	r6, r4
 800f58c:	d105      	bne.n	800f59a <__libc_init_array+0x2e>
 800f58e:	bd70      	pop	{r4, r5, r6, pc}
 800f590:	f855 3b04 	ldr.w	r3, [r5], #4
 800f594:	4798      	blx	r3
 800f596:	3601      	adds	r6, #1
 800f598:	e7ee      	b.n	800f578 <__libc_init_array+0xc>
 800f59a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f59e:	4798      	blx	r3
 800f5a0:	3601      	adds	r6, #1
 800f5a2:	e7f2      	b.n	800f58a <__libc_init_array+0x1e>
 800f5a4:	08013ac4 	.word	0x08013ac4
 800f5a8:	08013ac4 	.word	0x08013ac4
 800f5ac:	08013ac4 	.word	0x08013ac4
 800f5b0:	08013ac8 	.word	0x08013ac8

0800f5b4 <__retarget_lock_init_recursive>:
 800f5b4:	4770      	bx	lr

0800f5b6 <__retarget_lock_acquire_recursive>:
 800f5b6:	4770      	bx	lr

0800f5b8 <__retarget_lock_release_recursive>:
 800f5b8:	4770      	bx	lr

0800f5ba <memcpy>:
 800f5ba:	440a      	add	r2, r1
 800f5bc:	4291      	cmp	r1, r2
 800f5be:	f100 33ff 	add.w	r3, r0, #4294967295
 800f5c2:	d100      	bne.n	800f5c6 <memcpy+0xc>
 800f5c4:	4770      	bx	lr
 800f5c6:	b510      	push	{r4, lr}
 800f5c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f5cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f5d0:	4291      	cmp	r1, r2
 800f5d2:	d1f9      	bne.n	800f5c8 <memcpy+0xe>
 800f5d4:	bd10      	pop	{r4, pc}
	...

0800f5d8 <nan>:
 800f5d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f5e0 <nan+0x8>
 800f5dc:	4770      	bx	lr
 800f5de:	bf00      	nop
 800f5e0:	00000000 	.word	0x00000000
 800f5e4:	7ff80000 	.word	0x7ff80000

0800f5e8 <nanf>:
 800f5e8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f5f0 <nanf+0x8>
 800f5ec:	4770      	bx	lr
 800f5ee:	bf00      	nop
 800f5f0:	7fc00000 	.word	0x7fc00000

0800f5f4 <__assert_func>:
 800f5f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f5f6:	4614      	mov	r4, r2
 800f5f8:	461a      	mov	r2, r3
 800f5fa:	4b09      	ldr	r3, [pc, #36]	@ (800f620 <__assert_func+0x2c>)
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	4605      	mov	r5, r0
 800f600:	68d8      	ldr	r0, [r3, #12]
 800f602:	b954      	cbnz	r4, 800f61a <__assert_func+0x26>
 800f604:	4b07      	ldr	r3, [pc, #28]	@ (800f624 <__assert_func+0x30>)
 800f606:	461c      	mov	r4, r3
 800f608:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f60c:	9100      	str	r1, [sp, #0]
 800f60e:	462b      	mov	r3, r5
 800f610:	4905      	ldr	r1, [pc, #20]	@ (800f628 <__assert_func+0x34>)
 800f612:	f002 f9e3 	bl	80119dc <fiprintf>
 800f616:	f002 fa1d 	bl	8011a54 <abort>
 800f61a:	4b04      	ldr	r3, [pc, #16]	@ (800f62c <__assert_func+0x38>)
 800f61c:	e7f4      	b.n	800f608 <__assert_func+0x14>
 800f61e:	bf00      	nop
 800f620:	20000198 	.word	0x20000198
 800f624:	08013385 	.word	0x08013385
 800f628:	08013357 	.word	0x08013357
 800f62c:	0801334a 	.word	0x0801334a

0800f630 <quorem>:
 800f630:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f634:	6903      	ldr	r3, [r0, #16]
 800f636:	690c      	ldr	r4, [r1, #16]
 800f638:	42a3      	cmp	r3, r4
 800f63a:	4607      	mov	r7, r0
 800f63c:	db7e      	blt.n	800f73c <quorem+0x10c>
 800f63e:	3c01      	subs	r4, #1
 800f640:	f101 0814 	add.w	r8, r1, #20
 800f644:	00a3      	lsls	r3, r4, #2
 800f646:	f100 0514 	add.w	r5, r0, #20
 800f64a:	9300      	str	r3, [sp, #0]
 800f64c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f650:	9301      	str	r3, [sp, #4]
 800f652:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f656:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f65a:	3301      	adds	r3, #1
 800f65c:	429a      	cmp	r2, r3
 800f65e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f662:	fbb2 f6f3 	udiv	r6, r2, r3
 800f666:	d32e      	bcc.n	800f6c6 <quorem+0x96>
 800f668:	f04f 0a00 	mov.w	sl, #0
 800f66c:	46c4      	mov	ip, r8
 800f66e:	46ae      	mov	lr, r5
 800f670:	46d3      	mov	fp, sl
 800f672:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f676:	b298      	uxth	r0, r3
 800f678:	fb06 a000 	mla	r0, r6, r0, sl
 800f67c:	0c02      	lsrs	r2, r0, #16
 800f67e:	0c1b      	lsrs	r3, r3, #16
 800f680:	fb06 2303 	mla	r3, r6, r3, r2
 800f684:	f8de 2000 	ldr.w	r2, [lr]
 800f688:	b280      	uxth	r0, r0
 800f68a:	b292      	uxth	r2, r2
 800f68c:	1a12      	subs	r2, r2, r0
 800f68e:	445a      	add	r2, fp
 800f690:	f8de 0000 	ldr.w	r0, [lr]
 800f694:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f698:	b29b      	uxth	r3, r3
 800f69a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f69e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f6a2:	b292      	uxth	r2, r2
 800f6a4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f6a8:	45e1      	cmp	r9, ip
 800f6aa:	f84e 2b04 	str.w	r2, [lr], #4
 800f6ae:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f6b2:	d2de      	bcs.n	800f672 <quorem+0x42>
 800f6b4:	9b00      	ldr	r3, [sp, #0]
 800f6b6:	58eb      	ldr	r3, [r5, r3]
 800f6b8:	b92b      	cbnz	r3, 800f6c6 <quorem+0x96>
 800f6ba:	9b01      	ldr	r3, [sp, #4]
 800f6bc:	3b04      	subs	r3, #4
 800f6be:	429d      	cmp	r5, r3
 800f6c0:	461a      	mov	r2, r3
 800f6c2:	d32f      	bcc.n	800f724 <quorem+0xf4>
 800f6c4:	613c      	str	r4, [r7, #16]
 800f6c6:	4638      	mov	r0, r7
 800f6c8:	f001 fd0e 	bl	80110e8 <__mcmp>
 800f6cc:	2800      	cmp	r0, #0
 800f6ce:	db25      	blt.n	800f71c <quorem+0xec>
 800f6d0:	4629      	mov	r1, r5
 800f6d2:	2000      	movs	r0, #0
 800f6d4:	f858 2b04 	ldr.w	r2, [r8], #4
 800f6d8:	f8d1 c000 	ldr.w	ip, [r1]
 800f6dc:	fa1f fe82 	uxth.w	lr, r2
 800f6e0:	fa1f f38c 	uxth.w	r3, ip
 800f6e4:	eba3 030e 	sub.w	r3, r3, lr
 800f6e8:	4403      	add	r3, r0
 800f6ea:	0c12      	lsrs	r2, r2, #16
 800f6ec:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f6f0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f6f4:	b29b      	uxth	r3, r3
 800f6f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f6fa:	45c1      	cmp	r9, r8
 800f6fc:	f841 3b04 	str.w	r3, [r1], #4
 800f700:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f704:	d2e6      	bcs.n	800f6d4 <quorem+0xa4>
 800f706:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f70a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f70e:	b922      	cbnz	r2, 800f71a <quorem+0xea>
 800f710:	3b04      	subs	r3, #4
 800f712:	429d      	cmp	r5, r3
 800f714:	461a      	mov	r2, r3
 800f716:	d30b      	bcc.n	800f730 <quorem+0x100>
 800f718:	613c      	str	r4, [r7, #16]
 800f71a:	3601      	adds	r6, #1
 800f71c:	4630      	mov	r0, r6
 800f71e:	b003      	add	sp, #12
 800f720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f724:	6812      	ldr	r2, [r2, #0]
 800f726:	3b04      	subs	r3, #4
 800f728:	2a00      	cmp	r2, #0
 800f72a:	d1cb      	bne.n	800f6c4 <quorem+0x94>
 800f72c:	3c01      	subs	r4, #1
 800f72e:	e7c6      	b.n	800f6be <quorem+0x8e>
 800f730:	6812      	ldr	r2, [r2, #0]
 800f732:	3b04      	subs	r3, #4
 800f734:	2a00      	cmp	r2, #0
 800f736:	d1ef      	bne.n	800f718 <quorem+0xe8>
 800f738:	3c01      	subs	r4, #1
 800f73a:	e7ea      	b.n	800f712 <quorem+0xe2>
 800f73c:	2000      	movs	r0, #0
 800f73e:	e7ee      	b.n	800f71e <quorem+0xee>

0800f740 <_dtoa_r>:
 800f740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f744:	69c7      	ldr	r7, [r0, #28]
 800f746:	b099      	sub	sp, #100	@ 0x64
 800f748:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f74c:	ec55 4b10 	vmov	r4, r5, d0
 800f750:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f752:	9109      	str	r1, [sp, #36]	@ 0x24
 800f754:	4683      	mov	fp, r0
 800f756:	920e      	str	r2, [sp, #56]	@ 0x38
 800f758:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f75a:	b97f      	cbnz	r7, 800f77c <_dtoa_r+0x3c>
 800f75c:	2010      	movs	r0, #16
 800f75e:	f001 f937 	bl	80109d0 <malloc>
 800f762:	4602      	mov	r2, r0
 800f764:	f8cb 001c 	str.w	r0, [fp, #28]
 800f768:	b920      	cbnz	r0, 800f774 <_dtoa_r+0x34>
 800f76a:	4ba7      	ldr	r3, [pc, #668]	@ (800fa08 <_dtoa_r+0x2c8>)
 800f76c:	21ef      	movs	r1, #239	@ 0xef
 800f76e:	48a7      	ldr	r0, [pc, #668]	@ (800fa0c <_dtoa_r+0x2cc>)
 800f770:	f7ff ff40 	bl	800f5f4 <__assert_func>
 800f774:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f778:	6007      	str	r7, [r0, #0]
 800f77a:	60c7      	str	r7, [r0, #12]
 800f77c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f780:	6819      	ldr	r1, [r3, #0]
 800f782:	b159      	cbz	r1, 800f79c <_dtoa_r+0x5c>
 800f784:	685a      	ldr	r2, [r3, #4]
 800f786:	604a      	str	r2, [r1, #4]
 800f788:	2301      	movs	r3, #1
 800f78a:	4093      	lsls	r3, r2
 800f78c:	608b      	str	r3, [r1, #8]
 800f78e:	4658      	mov	r0, fp
 800f790:	f001 fa26 	bl	8010be0 <_Bfree>
 800f794:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f798:	2200      	movs	r2, #0
 800f79a:	601a      	str	r2, [r3, #0]
 800f79c:	1e2b      	subs	r3, r5, #0
 800f79e:	bfb9      	ittee	lt
 800f7a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f7a4:	9303      	strlt	r3, [sp, #12]
 800f7a6:	2300      	movge	r3, #0
 800f7a8:	6033      	strge	r3, [r6, #0]
 800f7aa:	9f03      	ldr	r7, [sp, #12]
 800f7ac:	4b98      	ldr	r3, [pc, #608]	@ (800fa10 <_dtoa_r+0x2d0>)
 800f7ae:	bfbc      	itt	lt
 800f7b0:	2201      	movlt	r2, #1
 800f7b2:	6032      	strlt	r2, [r6, #0]
 800f7b4:	43bb      	bics	r3, r7
 800f7b6:	d112      	bne.n	800f7de <_dtoa_r+0x9e>
 800f7b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f7ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f7be:	6013      	str	r3, [r2, #0]
 800f7c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f7c4:	4323      	orrs	r3, r4
 800f7c6:	f000 854d 	beq.w	8010264 <_dtoa_r+0xb24>
 800f7ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f7cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800fa24 <_dtoa_r+0x2e4>
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	f000 854f 	beq.w	8010274 <_dtoa_r+0xb34>
 800f7d6:	f10a 0303 	add.w	r3, sl, #3
 800f7da:	f000 bd49 	b.w	8010270 <_dtoa_r+0xb30>
 800f7de:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	ec51 0b17 	vmov	r0, r1, d7
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f7ee:	f7f1 f98b 	bl	8000b08 <__aeabi_dcmpeq>
 800f7f2:	4680      	mov	r8, r0
 800f7f4:	b158      	cbz	r0, 800f80e <_dtoa_r+0xce>
 800f7f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f7f8:	2301      	movs	r3, #1
 800f7fa:	6013      	str	r3, [r2, #0]
 800f7fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f7fe:	b113      	cbz	r3, 800f806 <_dtoa_r+0xc6>
 800f800:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f802:	4b84      	ldr	r3, [pc, #528]	@ (800fa14 <_dtoa_r+0x2d4>)
 800f804:	6013      	str	r3, [r2, #0]
 800f806:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800fa28 <_dtoa_r+0x2e8>
 800f80a:	f000 bd33 	b.w	8010274 <_dtoa_r+0xb34>
 800f80e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f812:	aa16      	add	r2, sp, #88	@ 0x58
 800f814:	a917      	add	r1, sp, #92	@ 0x5c
 800f816:	4658      	mov	r0, fp
 800f818:	f001 fd86 	bl	8011328 <__d2b>
 800f81c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f820:	4681      	mov	r9, r0
 800f822:	2e00      	cmp	r6, #0
 800f824:	d077      	beq.n	800f916 <_dtoa_r+0x1d6>
 800f826:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f828:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f82c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f830:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f834:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f838:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f83c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f840:	4619      	mov	r1, r3
 800f842:	2200      	movs	r2, #0
 800f844:	4b74      	ldr	r3, [pc, #464]	@ (800fa18 <_dtoa_r+0x2d8>)
 800f846:	f7f0 fd3f 	bl	80002c8 <__aeabi_dsub>
 800f84a:	a369      	add	r3, pc, #420	@ (adr r3, 800f9f0 <_dtoa_r+0x2b0>)
 800f84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f850:	f7f0 fef2 	bl	8000638 <__aeabi_dmul>
 800f854:	a368      	add	r3, pc, #416	@ (adr r3, 800f9f8 <_dtoa_r+0x2b8>)
 800f856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f85a:	f7f0 fd37 	bl	80002cc <__adddf3>
 800f85e:	4604      	mov	r4, r0
 800f860:	4630      	mov	r0, r6
 800f862:	460d      	mov	r5, r1
 800f864:	f7f0 fe7e 	bl	8000564 <__aeabi_i2d>
 800f868:	a365      	add	r3, pc, #404	@ (adr r3, 800fa00 <_dtoa_r+0x2c0>)
 800f86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f86e:	f7f0 fee3 	bl	8000638 <__aeabi_dmul>
 800f872:	4602      	mov	r2, r0
 800f874:	460b      	mov	r3, r1
 800f876:	4620      	mov	r0, r4
 800f878:	4629      	mov	r1, r5
 800f87a:	f7f0 fd27 	bl	80002cc <__adddf3>
 800f87e:	4604      	mov	r4, r0
 800f880:	460d      	mov	r5, r1
 800f882:	f7f1 f989 	bl	8000b98 <__aeabi_d2iz>
 800f886:	2200      	movs	r2, #0
 800f888:	4607      	mov	r7, r0
 800f88a:	2300      	movs	r3, #0
 800f88c:	4620      	mov	r0, r4
 800f88e:	4629      	mov	r1, r5
 800f890:	f7f1 f944 	bl	8000b1c <__aeabi_dcmplt>
 800f894:	b140      	cbz	r0, 800f8a8 <_dtoa_r+0x168>
 800f896:	4638      	mov	r0, r7
 800f898:	f7f0 fe64 	bl	8000564 <__aeabi_i2d>
 800f89c:	4622      	mov	r2, r4
 800f89e:	462b      	mov	r3, r5
 800f8a0:	f7f1 f932 	bl	8000b08 <__aeabi_dcmpeq>
 800f8a4:	b900      	cbnz	r0, 800f8a8 <_dtoa_r+0x168>
 800f8a6:	3f01      	subs	r7, #1
 800f8a8:	2f16      	cmp	r7, #22
 800f8aa:	d851      	bhi.n	800f950 <_dtoa_r+0x210>
 800f8ac:	4b5b      	ldr	r3, [pc, #364]	@ (800fa1c <_dtoa_r+0x2dc>)
 800f8ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f8ba:	f7f1 f92f 	bl	8000b1c <__aeabi_dcmplt>
 800f8be:	2800      	cmp	r0, #0
 800f8c0:	d048      	beq.n	800f954 <_dtoa_r+0x214>
 800f8c2:	3f01      	subs	r7, #1
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	9312      	str	r3, [sp, #72]	@ 0x48
 800f8c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f8ca:	1b9b      	subs	r3, r3, r6
 800f8cc:	1e5a      	subs	r2, r3, #1
 800f8ce:	bf44      	itt	mi
 800f8d0:	f1c3 0801 	rsbmi	r8, r3, #1
 800f8d4:	2300      	movmi	r3, #0
 800f8d6:	9208      	str	r2, [sp, #32]
 800f8d8:	bf54      	ite	pl
 800f8da:	f04f 0800 	movpl.w	r8, #0
 800f8de:	9308      	strmi	r3, [sp, #32]
 800f8e0:	2f00      	cmp	r7, #0
 800f8e2:	db39      	blt.n	800f958 <_dtoa_r+0x218>
 800f8e4:	9b08      	ldr	r3, [sp, #32]
 800f8e6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f8e8:	443b      	add	r3, r7
 800f8ea:	9308      	str	r3, [sp, #32]
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800f8f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8f2:	2b09      	cmp	r3, #9
 800f8f4:	d864      	bhi.n	800f9c0 <_dtoa_r+0x280>
 800f8f6:	2b05      	cmp	r3, #5
 800f8f8:	bfc4      	itt	gt
 800f8fa:	3b04      	subgt	r3, #4
 800f8fc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f8fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f900:	f1a3 0302 	sub.w	r3, r3, #2
 800f904:	bfcc      	ite	gt
 800f906:	2400      	movgt	r4, #0
 800f908:	2401      	movle	r4, #1
 800f90a:	2b03      	cmp	r3, #3
 800f90c:	d863      	bhi.n	800f9d6 <_dtoa_r+0x296>
 800f90e:	e8df f003 	tbb	[pc, r3]
 800f912:	372a      	.short	0x372a
 800f914:	5535      	.short	0x5535
 800f916:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f91a:	441e      	add	r6, r3
 800f91c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f920:	2b20      	cmp	r3, #32
 800f922:	bfc1      	itttt	gt
 800f924:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f928:	409f      	lslgt	r7, r3
 800f92a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f92e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f932:	bfd6      	itet	le
 800f934:	f1c3 0320 	rsble	r3, r3, #32
 800f938:	ea47 0003 	orrgt.w	r0, r7, r3
 800f93c:	fa04 f003 	lslle.w	r0, r4, r3
 800f940:	f7f0 fe00 	bl	8000544 <__aeabi_ui2d>
 800f944:	2201      	movs	r2, #1
 800f946:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f94a:	3e01      	subs	r6, #1
 800f94c:	9214      	str	r2, [sp, #80]	@ 0x50
 800f94e:	e777      	b.n	800f840 <_dtoa_r+0x100>
 800f950:	2301      	movs	r3, #1
 800f952:	e7b8      	b.n	800f8c6 <_dtoa_r+0x186>
 800f954:	9012      	str	r0, [sp, #72]	@ 0x48
 800f956:	e7b7      	b.n	800f8c8 <_dtoa_r+0x188>
 800f958:	427b      	negs	r3, r7
 800f95a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f95c:	2300      	movs	r3, #0
 800f95e:	eba8 0807 	sub.w	r8, r8, r7
 800f962:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f964:	e7c4      	b.n	800f8f0 <_dtoa_r+0x1b0>
 800f966:	2300      	movs	r3, #0
 800f968:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f96a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	dc35      	bgt.n	800f9dc <_dtoa_r+0x29c>
 800f970:	2301      	movs	r3, #1
 800f972:	9300      	str	r3, [sp, #0]
 800f974:	9307      	str	r3, [sp, #28]
 800f976:	461a      	mov	r2, r3
 800f978:	920e      	str	r2, [sp, #56]	@ 0x38
 800f97a:	e00b      	b.n	800f994 <_dtoa_r+0x254>
 800f97c:	2301      	movs	r3, #1
 800f97e:	e7f3      	b.n	800f968 <_dtoa_r+0x228>
 800f980:	2300      	movs	r3, #0
 800f982:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f984:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f986:	18fb      	adds	r3, r7, r3
 800f988:	9300      	str	r3, [sp, #0]
 800f98a:	3301      	adds	r3, #1
 800f98c:	2b01      	cmp	r3, #1
 800f98e:	9307      	str	r3, [sp, #28]
 800f990:	bfb8      	it	lt
 800f992:	2301      	movlt	r3, #1
 800f994:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f998:	2100      	movs	r1, #0
 800f99a:	2204      	movs	r2, #4
 800f99c:	f102 0514 	add.w	r5, r2, #20
 800f9a0:	429d      	cmp	r5, r3
 800f9a2:	d91f      	bls.n	800f9e4 <_dtoa_r+0x2a4>
 800f9a4:	6041      	str	r1, [r0, #4]
 800f9a6:	4658      	mov	r0, fp
 800f9a8:	f001 f8da 	bl	8010b60 <_Balloc>
 800f9ac:	4682      	mov	sl, r0
 800f9ae:	2800      	cmp	r0, #0
 800f9b0:	d13c      	bne.n	800fa2c <_dtoa_r+0x2ec>
 800f9b2:	4b1b      	ldr	r3, [pc, #108]	@ (800fa20 <_dtoa_r+0x2e0>)
 800f9b4:	4602      	mov	r2, r0
 800f9b6:	f240 11af 	movw	r1, #431	@ 0x1af
 800f9ba:	e6d8      	b.n	800f76e <_dtoa_r+0x2e>
 800f9bc:	2301      	movs	r3, #1
 800f9be:	e7e0      	b.n	800f982 <_dtoa_r+0x242>
 800f9c0:	2401      	movs	r4, #1
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f9c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f9c8:	f04f 33ff 	mov.w	r3, #4294967295
 800f9cc:	9300      	str	r3, [sp, #0]
 800f9ce:	9307      	str	r3, [sp, #28]
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	2312      	movs	r3, #18
 800f9d4:	e7d0      	b.n	800f978 <_dtoa_r+0x238>
 800f9d6:	2301      	movs	r3, #1
 800f9d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f9da:	e7f5      	b.n	800f9c8 <_dtoa_r+0x288>
 800f9dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f9de:	9300      	str	r3, [sp, #0]
 800f9e0:	9307      	str	r3, [sp, #28]
 800f9e2:	e7d7      	b.n	800f994 <_dtoa_r+0x254>
 800f9e4:	3101      	adds	r1, #1
 800f9e6:	0052      	lsls	r2, r2, #1
 800f9e8:	e7d8      	b.n	800f99c <_dtoa_r+0x25c>
 800f9ea:	bf00      	nop
 800f9ec:	f3af 8000 	nop.w
 800f9f0:	636f4361 	.word	0x636f4361
 800f9f4:	3fd287a7 	.word	0x3fd287a7
 800f9f8:	8b60c8b3 	.word	0x8b60c8b3
 800f9fc:	3fc68a28 	.word	0x3fc68a28
 800fa00:	509f79fb 	.word	0x509f79fb
 800fa04:	3fd34413 	.word	0x3fd34413
 800fa08:	080132d1 	.word	0x080132d1
 800fa0c:	08013393 	.word	0x08013393
 800fa10:	7ff00000 	.word	0x7ff00000
 800fa14:	080132a9 	.word	0x080132a9
 800fa18:	3ff80000 	.word	0x3ff80000
 800fa1c:	080134f0 	.word	0x080134f0
 800fa20:	080133eb 	.word	0x080133eb
 800fa24:	0801338f 	.word	0x0801338f
 800fa28:	080132a8 	.word	0x080132a8
 800fa2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fa30:	6018      	str	r0, [r3, #0]
 800fa32:	9b07      	ldr	r3, [sp, #28]
 800fa34:	2b0e      	cmp	r3, #14
 800fa36:	f200 80a4 	bhi.w	800fb82 <_dtoa_r+0x442>
 800fa3a:	2c00      	cmp	r4, #0
 800fa3c:	f000 80a1 	beq.w	800fb82 <_dtoa_r+0x442>
 800fa40:	2f00      	cmp	r7, #0
 800fa42:	dd33      	ble.n	800faac <_dtoa_r+0x36c>
 800fa44:	4bad      	ldr	r3, [pc, #692]	@ (800fcfc <_dtoa_r+0x5bc>)
 800fa46:	f007 020f 	and.w	r2, r7, #15
 800fa4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fa4e:	ed93 7b00 	vldr	d7, [r3]
 800fa52:	05f8      	lsls	r0, r7, #23
 800fa54:	ed8d 7b04 	vstr	d7, [sp, #16]
 800fa58:	ea4f 1427 	mov.w	r4, r7, asr #4
 800fa5c:	d516      	bpl.n	800fa8c <_dtoa_r+0x34c>
 800fa5e:	4ba8      	ldr	r3, [pc, #672]	@ (800fd00 <_dtoa_r+0x5c0>)
 800fa60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fa64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fa68:	f7f0 ff10 	bl	800088c <__aeabi_ddiv>
 800fa6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fa70:	f004 040f 	and.w	r4, r4, #15
 800fa74:	2603      	movs	r6, #3
 800fa76:	4da2      	ldr	r5, [pc, #648]	@ (800fd00 <_dtoa_r+0x5c0>)
 800fa78:	b954      	cbnz	r4, 800fa90 <_dtoa_r+0x350>
 800fa7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fa7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa82:	f7f0 ff03 	bl	800088c <__aeabi_ddiv>
 800fa86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fa8a:	e028      	b.n	800fade <_dtoa_r+0x39e>
 800fa8c:	2602      	movs	r6, #2
 800fa8e:	e7f2      	b.n	800fa76 <_dtoa_r+0x336>
 800fa90:	07e1      	lsls	r1, r4, #31
 800fa92:	d508      	bpl.n	800faa6 <_dtoa_r+0x366>
 800fa94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fa98:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fa9c:	f7f0 fdcc 	bl	8000638 <__aeabi_dmul>
 800faa0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800faa4:	3601      	adds	r6, #1
 800faa6:	1064      	asrs	r4, r4, #1
 800faa8:	3508      	adds	r5, #8
 800faaa:	e7e5      	b.n	800fa78 <_dtoa_r+0x338>
 800faac:	f000 80d2 	beq.w	800fc54 <_dtoa_r+0x514>
 800fab0:	427c      	negs	r4, r7
 800fab2:	4b92      	ldr	r3, [pc, #584]	@ (800fcfc <_dtoa_r+0x5bc>)
 800fab4:	4d92      	ldr	r5, [pc, #584]	@ (800fd00 <_dtoa_r+0x5c0>)
 800fab6:	f004 020f 	and.w	r2, r4, #15
 800faba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fac2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fac6:	f7f0 fdb7 	bl	8000638 <__aeabi_dmul>
 800faca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800face:	1124      	asrs	r4, r4, #4
 800fad0:	2300      	movs	r3, #0
 800fad2:	2602      	movs	r6, #2
 800fad4:	2c00      	cmp	r4, #0
 800fad6:	f040 80b2 	bne.w	800fc3e <_dtoa_r+0x4fe>
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d1d3      	bne.n	800fa86 <_dtoa_r+0x346>
 800fade:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fae0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	f000 80b7 	beq.w	800fc58 <_dtoa_r+0x518>
 800faea:	4b86      	ldr	r3, [pc, #536]	@ (800fd04 <_dtoa_r+0x5c4>)
 800faec:	2200      	movs	r2, #0
 800faee:	4620      	mov	r0, r4
 800faf0:	4629      	mov	r1, r5
 800faf2:	f7f1 f813 	bl	8000b1c <__aeabi_dcmplt>
 800faf6:	2800      	cmp	r0, #0
 800faf8:	f000 80ae 	beq.w	800fc58 <_dtoa_r+0x518>
 800fafc:	9b07      	ldr	r3, [sp, #28]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	f000 80aa 	beq.w	800fc58 <_dtoa_r+0x518>
 800fb04:	9b00      	ldr	r3, [sp, #0]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	dd37      	ble.n	800fb7a <_dtoa_r+0x43a>
 800fb0a:	1e7b      	subs	r3, r7, #1
 800fb0c:	9304      	str	r3, [sp, #16]
 800fb0e:	4620      	mov	r0, r4
 800fb10:	4b7d      	ldr	r3, [pc, #500]	@ (800fd08 <_dtoa_r+0x5c8>)
 800fb12:	2200      	movs	r2, #0
 800fb14:	4629      	mov	r1, r5
 800fb16:	f7f0 fd8f 	bl	8000638 <__aeabi_dmul>
 800fb1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb1e:	9c00      	ldr	r4, [sp, #0]
 800fb20:	3601      	adds	r6, #1
 800fb22:	4630      	mov	r0, r6
 800fb24:	f7f0 fd1e 	bl	8000564 <__aeabi_i2d>
 800fb28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fb2c:	f7f0 fd84 	bl	8000638 <__aeabi_dmul>
 800fb30:	4b76      	ldr	r3, [pc, #472]	@ (800fd0c <_dtoa_r+0x5cc>)
 800fb32:	2200      	movs	r2, #0
 800fb34:	f7f0 fbca 	bl	80002cc <__adddf3>
 800fb38:	4605      	mov	r5, r0
 800fb3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800fb3e:	2c00      	cmp	r4, #0
 800fb40:	f040 808d 	bne.w	800fc5e <_dtoa_r+0x51e>
 800fb44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fb48:	4b71      	ldr	r3, [pc, #452]	@ (800fd10 <_dtoa_r+0x5d0>)
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	f7f0 fbbc 	bl	80002c8 <__aeabi_dsub>
 800fb50:	4602      	mov	r2, r0
 800fb52:	460b      	mov	r3, r1
 800fb54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fb58:	462a      	mov	r2, r5
 800fb5a:	4633      	mov	r3, r6
 800fb5c:	f7f0 fffc 	bl	8000b58 <__aeabi_dcmpgt>
 800fb60:	2800      	cmp	r0, #0
 800fb62:	f040 828b 	bne.w	801007c <_dtoa_r+0x93c>
 800fb66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fb6a:	462a      	mov	r2, r5
 800fb6c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800fb70:	f7f0 ffd4 	bl	8000b1c <__aeabi_dcmplt>
 800fb74:	2800      	cmp	r0, #0
 800fb76:	f040 8128 	bne.w	800fdca <_dtoa_r+0x68a>
 800fb7a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800fb7e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800fb82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	f2c0 815a 	blt.w	800fe3e <_dtoa_r+0x6fe>
 800fb8a:	2f0e      	cmp	r7, #14
 800fb8c:	f300 8157 	bgt.w	800fe3e <_dtoa_r+0x6fe>
 800fb90:	4b5a      	ldr	r3, [pc, #360]	@ (800fcfc <_dtoa_r+0x5bc>)
 800fb92:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fb96:	ed93 7b00 	vldr	d7, [r3]
 800fb9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	ed8d 7b00 	vstr	d7, [sp]
 800fba2:	da03      	bge.n	800fbac <_dtoa_r+0x46c>
 800fba4:	9b07      	ldr	r3, [sp, #28]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	f340 8101 	ble.w	800fdae <_dtoa_r+0x66e>
 800fbac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fbb0:	4656      	mov	r6, sl
 800fbb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fbb6:	4620      	mov	r0, r4
 800fbb8:	4629      	mov	r1, r5
 800fbba:	f7f0 fe67 	bl	800088c <__aeabi_ddiv>
 800fbbe:	f7f0 ffeb 	bl	8000b98 <__aeabi_d2iz>
 800fbc2:	4680      	mov	r8, r0
 800fbc4:	f7f0 fcce 	bl	8000564 <__aeabi_i2d>
 800fbc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fbcc:	f7f0 fd34 	bl	8000638 <__aeabi_dmul>
 800fbd0:	4602      	mov	r2, r0
 800fbd2:	460b      	mov	r3, r1
 800fbd4:	4620      	mov	r0, r4
 800fbd6:	4629      	mov	r1, r5
 800fbd8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800fbdc:	f7f0 fb74 	bl	80002c8 <__aeabi_dsub>
 800fbe0:	f806 4b01 	strb.w	r4, [r6], #1
 800fbe4:	9d07      	ldr	r5, [sp, #28]
 800fbe6:	eba6 040a 	sub.w	r4, r6, sl
 800fbea:	42a5      	cmp	r5, r4
 800fbec:	4602      	mov	r2, r0
 800fbee:	460b      	mov	r3, r1
 800fbf0:	f040 8117 	bne.w	800fe22 <_dtoa_r+0x6e2>
 800fbf4:	f7f0 fb6a 	bl	80002cc <__adddf3>
 800fbf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fbfc:	4604      	mov	r4, r0
 800fbfe:	460d      	mov	r5, r1
 800fc00:	f7f0 ffaa 	bl	8000b58 <__aeabi_dcmpgt>
 800fc04:	2800      	cmp	r0, #0
 800fc06:	f040 80f9 	bne.w	800fdfc <_dtoa_r+0x6bc>
 800fc0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fc0e:	4620      	mov	r0, r4
 800fc10:	4629      	mov	r1, r5
 800fc12:	f7f0 ff79 	bl	8000b08 <__aeabi_dcmpeq>
 800fc16:	b118      	cbz	r0, 800fc20 <_dtoa_r+0x4e0>
 800fc18:	f018 0f01 	tst.w	r8, #1
 800fc1c:	f040 80ee 	bne.w	800fdfc <_dtoa_r+0x6bc>
 800fc20:	4649      	mov	r1, r9
 800fc22:	4658      	mov	r0, fp
 800fc24:	f000 ffdc 	bl	8010be0 <_Bfree>
 800fc28:	2300      	movs	r3, #0
 800fc2a:	7033      	strb	r3, [r6, #0]
 800fc2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fc2e:	3701      	adds	r7, #1
 800fc30:	601f      	str	r7, [r3, #0]
 800fc32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	f000 831d 	beq.w	8010274 <_dtoa_r+0xb34>
 800fc3a:	601e      	str	r6, [r3, #0]
 800fc3c:	e31a      	b.n	8010274 <_dtoa_r+0xb34>
 800fc3e:	07e2      	lsls	r2, r4, #31
 800fc40:	d505      	bpl.n	800fc4e <_dtoa_r+0x50e>
 800fc42:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fc46:	f7f0 fcf7 	bl	8000638 <__aeabi_dmul>
 800fc4a:	3601      	adds	r6, #1
 800fc4c:	2301      	movs	r3, #1
 800fc4e:	1064      	asrs	r4, r4, #1
 800fc50:	3508      	adds	r5, #8
 800fc52:	e73f      	b.n	800fad4 <_dtoa_r+0x394>
 800fc54:	2602      	movs	r6, #2
 800fc56:	e742      	b.n	800fade <_dtoa_r+0x39e>
 800fc58:	9c07      	ldr	r4, [sp, #28]
 800fc5a:	9704      	str	r7, [sp, #16]
 800fc5c:	e761      	b.n	800fb22 <_dtoa_r+0x3e2>
 800fc5e:	4b27      	ldr	r3, [pc, #156]	@ (800fcfc <_dtoa_r+0x5bc>)
 800fc60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fc62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fc66:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fc6a:	4454      	add	r4, sl
 800fc6c:	2900      	cmp	r1, #0
 800fc6e:	d053      	beq.n	800fd18 <_dtoa_r+0x5d8>
 800fc70:	4928      	ldr	r1, [pc, #160]	@ (800fd14 <_dtoa_r+0x5d4>)
 800fc72:	2000      	movs	r0, #0
 800fc74:	f7f0 fe0a 	bl	800088c <__aeabi_ddiv>
 800fc78:	4633      	mov	r3, r6
 800fc7a:	462a      	mov	r2, r5
 800fc7c:	f7f0 fb24 	bl	80002c8 <__aeabi_dsub>
 800fc80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fc84:	4656      	mov	r6, sl
 800fc86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc8a:	f7f0 ff85 	bl	8000b98 <__aeabi_d2iz>
 800fc8e:	4605      	mov	r5, r0
 800fc90:	f7f0 fc68 	bl	8000564 <__aeabi_i2d>
 800fc94:	4602      	mov	r2, r0
 800fc96:	460b      	mov	r3, r1
 800fc98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc9c:	f7f0 fb14 	bl	80002c8 <__aeabi_dsub>
 800fca0:	3530      	adds	r5, #48	@ 0x30
 800fca2:	4602      	mov	r2, r0
 800fca4:	460b      	mov	r3, r1
 800fca6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fcaa:	f806 5b01 	strb.w	r5, [r6], #1
 800fcae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fcb2:	f7f0 ff33 	bl	8000b1c <__aeabi_dcmplt>
 800fcb6:	2800      	cmp	r0, #0
 800fcb8:	d171      	bne.n	800fd9e <_dtoa_r+0x65e>
 800fcba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fcbe:	4911      	ldr	r1, [pc, #68]	@ (800fd04 <_dtoa_r+0x5c4>)
 800fcc0:	2000      	movs	r0, #0
 800fcc2:	f7f0 fb01 	bl	80002c8 <__aeabi_dsub>
 800fcc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fcca:	f7f0 ff27 	bl	8000b1c <__aeabi_dcmplt>
 800fcce:	2800      	cmp	r0, #0
 800fcd0:	f040 8095 	bne.w	800fdfe <_dtoa_r+0x6be>
 800fcd4:	42a6      	cmp	r6, r4
 800fcd6:	f43f af50 	beq.w	800fb7a <_dtoa_r+0x43a>
 800fcda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800fcde:	4b0a      	ldr	r3, [pc, #40]	@ (800fd08 <_dtoa_r+0x5c8>)
 800fce0:	2200      	movs	r2, #0
 800fce2:	f7f0 fca9 	bl	8000638 <__aeabi_dmul>
 800fce6:	4b08      	ldr	r3, [pc, #32]	@ (800fd08 <_dtoa_r+0x5c8>)
 800fce8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fcec:	2200      	movs	r2, #0
 800fcee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fcf2:	f7f0 fca1 	bl	8000638 <__aeabi_dmul>
 800fcf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fcfa:	e7c4      	b.n	800fc86 <_dtoa_r+0x546>
 800fcfc:	080134f0 	.word	0x080134f0
 800fd00:	080134c8 	.word	0x080134c8
 800fd04:	3ff00000 	.word	0x3ff00000
 800fd08:	40240000 	.word	0x40240000
 800fd0c:	401c0000 	.word	0x401c0000
 800fd10:	40140000 	.word	0x40140000
 800fd14:	3fe00000 	.word	0x3fe00000
 800fd18:	4631      	mov	r1, r6
 800fd1a:	4628      	mov	r0, r5
 800fd1c:	f7f0 fc8c 	bl	8000638 <__aeabi_dmul>
 800fd20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fd24:	9415      	str	r4, [sp, #84]	@ 0x54
 800fd26:	4656      	mov	r6, sl
 800fd28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd2c:	f7f0 ff34 	bl	8000b98 <__aeabi_d2iz>
 800fd30:	4605      	mov	r5, r0
 800fd32:	f7f0 fc17 	bl	8000564 <__aeabi_i2d>
 800fd36:	4602      	mov	r2, r0
 800fd38:	460b      	mov	r3, r1
 800fd3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd3e:	f7f0 fac3 	bl	80002c8 <__aeabi_dsub>
 800fd42:	3530      	adds	r5, #48	@ 0x30
 800fd44:	f806 5b01 	strb.w	r5, [r6], #1
 800fd48:	4602      	mov	r2, r0
 800fd4a:	460b      	mov	r3, r1
 800fd4c:	42a6      	cmp	r6, r4
 800fd4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fd52:	f04f 0200 	mov.w	r2, #0
 800fd56:	d124      	bne.n	800fda2 <_dtoa_r+0x662>
 800fd58:	4bac      	ldr	r3, [pc, #688]	@ (801000c <_dtoa_r+0x8cc>)
 800fd5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800fd5e:	f7f0 fab5 	bl	80002cc <__adddf3>
 800fd62:	4602      	mov	r2, r0
 800fd64:	460b      	mov	r3, r1
 800fd66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd6a:	f7f0 fef5 	bl	8000b58 <__aeabi_dcmpgt>
 800fd6e:	2800      	cmp	r0, #0
 800fd70:	d145      	bne.n	800fdfe <_dtoa_r+0x6be>
 800fd72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fd76:	49a5      	ldr	r1, [pc, #660]	@ (801000c <_dtoa_r+0x8cc>)
 800fd78:	2000      	movs	r0, #0
 800fd7a:	f7f0 faa5 	bl	80002c8 <__aeabi_dsub>
 800fd7e:	4602      	mov	r2, r0
 800fd80:	460b      	mov	r3, r1
 800fd82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd86:	f7f0 fec9 	bl	8000b1c <__aeabi_dcmplt>
 800fd8a:	2800      	cmp	r0, #0
 800fd8c:	f43f aef5 	beq.w	800fb7a <_dtoa_r+0x43a>
 800fd90:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800fd92:	1e73      	subs	r3, r6, #1
 800fd94:	9315      	str	r3, [sp, #84]	@ 0x54
 800fd96:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fd9a:	2b30      	cmp	r3, #48	@ 0x30
 800fd9c:	d0f8      	beq.n	800fd90 <_dtoa_r+0x650>
 800fd9e:	9f04      	ldr	r7, [sp, #16]
 800fda0:	e73e      	b.n	800fc20 <_dtoa_r+0x4e0>
 800fda2:	4b9b      	ldr	r3, [pc, #620]	@ (8010010 <_dtoa_r+0x8d0>)
 800fda4:	f7f0 fc48 	bl	8000638 <__aeabi_dmul>
 800fda8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fdac:	e7bc      	b.n	800fd28 <_dtoa_r+0x5e8>
 800fdae:	d10c      	bne.n	800fdca <_dtoa_r+0x68a>
 800fdb0:	4b98      	ldr	r3, [pc, #608]	@ (8010014 <_dtoa_r+0x8d4>)
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fdb8:	f7f0 fc3e 	bl	8000638 <__aeabi_dmul>
 800fdbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fdc0:	f7f0 fec0 	bl	8000b44 <__aeabi_dcmpge>
 800fdc4:	2800      	cmp	r0, #0
 800fdc6:	f000 8157 	beq.w	8010078 <_dtoa_r+0x938>
 800fdca:	2400      	movs	r4, #0
 800fdcc:	4625      	mov	r5, r4
 800fdce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fdd0:	43db      	mvns	r3, r3
 800fdd2:	9304      	str	r3, [sp, #16]
 800fdd4:	4656      	mov	r6, sl
 800fdd6:	2700      	movs	r7, #0
 800fdd8:	4621      	mov	r1, r4
 800fdda:	4658      	mov	r0, fp
 800fddc:	f000 ff00 	bl	8010be0 <_Bfree>
 800fde0:	2d00      	cmp	r5, #0
 800fde2:	d0dc      	beq.n	800fd9e <_dtoa_r+0x65e>
 800fde4:	b12f      	cbz	r7, 800fdf2 <_dtoa_r+0x6b2>
 800fde6:	42af      	cmp	r7, r5
 800fde8:	d003      	beq.n	800fdf2 <_dtoa_r+0x6b2>
 800fdea:	4639      	mov	r1, r7
 800fdec:	4658      	mov	r0, fp
 800fdee:	f000 fef7 	bl	8010be0 <_Bfree>
 800fdf2:	4629      	mov	r1, r5
 800fdf4:	4658      	mov	r0, fp
 800fdf6:	f000 fef3 	bl	8010be0 <_Bfree>
 800fdfa:	e7d0      	b.n	800fd9e <_dtoa_r+0x65e>
 800fdfc:	9704      	str	r7, [sp, #16]
 800fdfe:	4633      	mov	r3, r6
 800fe00:	461e      	mov	r6, r3
 800fe02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fe06:	2a39      	cmp	r2, #57	@ 0x39
 800fe08:	d107      	bne.n	800fe1a <_dtoa_r+0x6da>
 800fe0a:	459a      	cmp	sl, r3
 800fe0c:	d1f8      	bne.n	800fe00 <_dtoa_r+0x6c0>
 800fe0e:	9a04      	ldr	r2, [sp, #16]
 800fe10:	3201      	adds	r2, #1
 800fe12:	9204      	str	r2, [sp, #16]
 800fe14:	2230      	movs	r2, #48	@ 0x30
 800fe16:	f88a 2000 	strb.w	r2, [sl]
 800fe1a:	781a      	ldrb	r2, [r3, #0]
 800fe1c:	3201      	adds	r2, #1
 800fe1e:	701a      	strb	r2, [r3, #0]
 800fe20:	e7bd      	b.n	800fd9e <_dtoa_r+0x65e>
 800fe22:	4b7b      	ldr	r3, [pc, #492]	@ (8010010 <_dtoa_r+0x8d0>)
 800fe24:	2200      	movs	r2, #0
 800fe26:	f7f0 fc07 	bl	8000638 <__aeabi_dmul>
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	4604      	mov	r4, r0
 800fe30:	460d      	mov	r5, r1
 800fe32:	f7f0 fe69 	bl	8000b08 <__aeabi_dcmpeq>
 800fe36:	2800      	cmp	r0, #0
 800fe38:	f43f aebb 	beq.w	800fbb2 <_dtoa_r+0x472>
 800fe3c:	e6f0      	b.n	800fc20 <_dtoa_r+0x4e0>
 800fe3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fe40:	2a00      	cmp	r2, #0
 800fe42:	f000 80db 	beq.w	800fffc <_dtoa_r+0x8bc>
 800fe46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fe48:	2a01      	cmp	r2, #1
 800fe4a:	f300 80bf 	bgt.w	800ffcc <_dtoa_r+0x88c>
 800fe4e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800fe50:	2a00      	cmp	r2, #0
 800fe52:	f000 80b7 	beq.w	800ffc4 <_dtoa_r+0x884>
 800fe56:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800fe5a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fe5c:	4646      	mov	r6, r8
 800fe5e:	9a08      	ldr	r2, [sp, #32]
 800fe60:	2101      	movs	r1, #1
 800fe62:	441a      	add	r2, r3
 800fe64:	4658      	mov	r0, fp
 800fe66:	4498      	add	r8, r3
 800fe68:	9208      	str	r2, [sp, #32]
 800fe6a:	f000 ffb7 	bl	8010ddc <__i2b>
 800fe6e:	4605      	mov	r5, r0
 800fe70:	b15e      	cbz	r6, 800fe8a <_dtoa_r+0x74a>
 800fe72:	9b08      	ldr	r3, [sp, #32]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	dd08      	ble.n	800fe8a <_dtoa_r+0x74a>
 800fe78:	42b3      	cmp	r3, r6
 800fe7a:	9a08      	ldr	r2, [sp, #32]
 800fe7c:	bfa8      	it	ge
 800fe7e:	4633      	movge	r3, r6
 800fe80:	eba8 0803 	sub.w	r8, r8, r3
 800fe84:	1af6      	subs	r6, r6, r3
 800fe86:	1ad3      	subs	r3, r2, r3
 800fe88:	9308      	str	r3, [sp, #32]
 800fe8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fe8c:	b1f3      	cbz	r3, 800fecc <_dtoa_r+0x78c>
 800fe8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	f000 80b7 	beq.w	8010004 <_dtoa_r+0x8c4>
 800fe96:	b18c      	cbz	r4, 800febc <_dtoa_r+0x77c>
 800fe98:	4629      	mov	r1, r5
 800fe9a:	4622      	mov	r2, r4
 800fe9c:	4658      	mov	r0, fp
 800fe9e:	f001 f85d 	bl	8010f5c <__pow5mult>
 800fea2:	464a      	mov	r2, r9
 800fea4:	4601      	mov	r1, r0
 800fea6:	4605      	mov	r5, r0
 800fea8:	4658      	mov	r0, fp
 800feaa:	f000 ffad 	bl	8010e08 <__multiply>
 800feae:	4649      	mov	r1, r9
 800feb0:	9004      	str	r0, [sp, #16]
 800feb2:	4658      	mov	r0, fp
 800feb4:	f000 fe94 	bl	8010be0 <_Bfree>
 800feb8:	9b04      	ldr	r3, [sp, #16]
 800feba:	4699      	mov	r9, r3
 800febc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800febe:	1b1a      	subs	r2, r3, r4
 800fec0:	d004      	beq.n	800fecc <_dtoa_r+0x78c>
 800fec2:	4649      	mov	r1, r9
 800fec4:	4658      	mov	r0, fp
 800fec6:	f001 f849 	bl	8010f5c <__pow5mult>
 800feca:	4681      	mov	r9, r0
 800fecc:	2101      	movs	r1, #1
 800fece:	4658      	mov	r0, fp
 800fed0:	f000 ff84 	bl	8010ddc <__i2b>
 800fed4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fed6:	4604      	mov	r4, r0
 800fed8:	2b00      	cmp	r3, #0
 800feda:	f000 81cf 	beq.w	801027c <_dtoa_r+0xb3c>
 800fede:	461a      	mov	r2, r3
 800fee0:	4601      	mov	r1, r0
 800fee2:	4658      	mov	r0, fp
 800fee4:	f001 f83a 	bl	8010f5c <__pow5mult>
 800fee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800feea:	2b01      	cmp	r3, #1
 800feec:	4604      	mov	r4, r0
 800feee:	f300 8095 	bgt.w	801001c <_dtoa_r+0x8dc>
 800fef2:	9b02      	ldr	r3, [sp, #8]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	f040 8087 	bne.w	8010008 <_dtoa_r+0x8c8>
 800fefa:	9b03      	ldr	r3, [sp, #12]
 800fefc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	f040 8089 	bne.w	8010018 <_dtoa_r+0x8d8>
 800ff06:	9b03      	ldr	r3, [sp, #12]
 800ff08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ff0c:	0d1b      	lsrs	r3, r3, #20
 800ff0e:	051b      	lsls	r3, r3, #20
 800ff10:	b12b      	cbz	r3, 800ff1e <_dtoa_r+0x7de>
 800ff12:	9b08      	ldr	r3, [sp, #32]
 800ff14:	3301      	adds	r3, #1
 800ff16:	9308      	str	r3, [sp, #32]
 800ff18:	f108 0801 	add.w	r8, r8, #1
 800ff1c:	2301      	movs	r3, #1
 800ff1e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ff20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	f000 81b0 	beq.w	8010288 <_dtoa_r+0xb48>
 800ff28:	6923      	ldr	r3, [r4, #16]
 800ff2a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ff2e:	6918      	ldr	r0, [r3, #16]
 800ff30:	f000 ff08 	bl	8010d44 <__hi0bits>
 800ff34:	f1c0 0020 	rsb	r0, r0, #32
 800ff38:	9b08      	ldr	r3, [sp, #32]
 800ff3a:	4418      	add	r0, r3
 800ff3c:	f010 001f 	ands.w	r0, r0, #31
 800ff40:	d077      	beq.n	8010032 <_dtoa_r+0x8f2>
 800ff42:	f1c0 0320 	rsb	r3, r0, #32
 800ff46:	2b04      	cmp	r3, #4
 800ff48:	dd6b      	ble.n	8010022 <_dtoa_r+0x8e2>
 800ff4a:	9b08      	ldr	r3, [sp, #32]
 800ff4c:	f1c0 001c 	rsb	r0, r0, #28
 800ff50:	4403      	add	r3, r0
 800ff52:	4480      	add	r8, r0
 800ff54:	4406      	add	r6, r0
 800ff56:	9308      	str	r3, [sp, #32]
 800ff58:	f1b8 0f00 	cmp.w	r8, #0
 800ff5c:	dd05      	ble.n	800ff6a <_dtoa_r+0x82a>
 800ff5e:	4649      	mov	r1, r9
 800ff60:	4642      	mov	r2, r8
 800ff62:	4658      	mov	r0, fp
 800ff64:	f001 f854 	bl	8011010 <__lshift>
 800ff68:	4681      	mov	r9, r0
 800ff6a:	9b08      	ldr	r3, [sp, #32]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	dd05      	ble.n	800ff7c <_dtoa_r+0x83c>
 800ff70:	4621      	mov	r1, r4
 800ff72:	461a      	mov	r2, r3
 800ff74:	4658      	mov	r0, fp
 800ff76:	f001 f84b 	bl	8011010 <__lshift>
 800ff7a:	4604      	mov	r4, r0
 800ff7c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d059      	beq.n	8010036 <_dtoa_r+0x8f6>
 800ff82:	4621      	mov	r1, r4
 800ff84:	4648      	mov	r0, r9
 800ff86:	f001 f8af 	bl	80110e8 <__mcmp>
 800ff8a:	2800      	cmp	r0, #0
 800ff8c:	da53      	bge.n	8010036 <_dtoa_r+0x8f6>
 800ff8e:	1e7b      	subs	r3, r7, #1
 800ff90:	9304      	str	r3, [sp, #16]
 800ff92:	4649      	mov	r1, r9
 800ff94:	2300      	movs	r3, #0
 800ff96:	220a      	movs	r2, #10
 800ff98:	4658      	mov	r0, fp
 800ff9a:	f000 fe43 	bl	8010c24 <__multadd>
 800ff9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ffa0:	4681      	mov	r9, r0
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	f000 8172 	beq.w	801028c <_dtoa_r+0xb4c>
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	4629      	mov	r1, r5
 800ffac:	220a      	movs	r2, #10
 800ffae:	4658      	mov	r0, fp
 800ffb0:	f000 fe38 	bl	8010c24 <__multadd>
 800ffb4:	9b00      	ldr	r3, [sp, #0]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	4605      	mov	r5, r0
 800ffba:	dc67      	bgt.n	801008c <_dtoa_r+0x94c>
 800ffbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ffbe:	2b02      	cmp	r3, #2
 800ffc0:	dc41      	bgt.n	8010046 <_dtoa_r+0x906>
 800ffc2:	e063      	b.n	801008c <_dtoa_r+0x94c>
 800ffc4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ffc6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ffca:	e746      	b.n	800fe5a <_dtoa_r+0x71a>
 800ffcc:	9b07      	ldr	r3, [sp, #28]
 800ffce:	1e5c      	subs	r4, r3, #1
 800ffd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ffd2:	42a3      	cmp	r3, r4
 800ffd4:	bfbf      	itttt	lt
 800ffd6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ffd8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ffda:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ffdc:	1ae3      	sublt	r3, r4, r3
 800ffde:	bfb4      	ite	lt
 800ffe0:	18d2      	addlt	r2, r2, r3
 800ffe2:	1b1c      	subge	r4, r3, r4
 800ffe4:	9b07      	ldr	r3, [sp, #28]
 800ffe6:	bfbc      	itt	lt
 800ffe8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ffea:	2400      	movlt	r4, #0
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	bfb5      	itete	lt
 800fff0:	eba8 0603 	sublt.w	r6, r8, r3
 800fff4:	9b07      	ldrge	r3, [sp, #28]
 800fff6:	2300      	movlt	r3, #0
 800fff8:	4646      	movge	r6, r8
 800fffa:	e730      	b.n	800fe5e <_dtoa_r+0x71e>
 800fffc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fffe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010000:	4646      	mov	r6, r8
 8010002:	e735      	b.n	800fe70 <_dtoa_r+0x730>
 8010004:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010006:	e75c      	b.n	800fec2 <_dtoa_r+0x782>
 8010008:	2300      	movs	r3, #0
 801000a:	e788      	b.n	800ff1e <_dtoa_r+0x7de>
 801000c:	3fe00000 	.word	0x3fe00000
 8010010:	40240000 	.word	0x40240000
 8010014:	40140000 	.word	0x40140000
 8010018:	9b02      	ldr	r3, [sp, #8]
 801001a:	e780      	b.n	800ff1e <_dtoa_r+0x7de>
 801001c:	2300      	movs	r3, #0
 801001e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010020:	e782      	b.n	800ff28 <_dtoa_r+0x7e8>
 8010022:	d099      	beq.n	800ff58 <_dtoa_r+0x818>
 8010024:	9a08      	ldr	r2, [sp, #32]
 8010026:	331c      	adds	r3, #28
 8010028:	441a      	add	r2, r3
 801002a:	4498      	add	r8, r3
 801002c:	441e      	add	r6, r3
 801002e:	9208      	str	r2, [sp, #32]
 8010030:	e792      	b.n	800ff58 <_dtoa_r+0x818>
 8010032:	4603      	mov	r3, r0
 8010034:	e7f6      	b.n	8010024 <_dtoa_r+0x8e4>
 8010036:	9b07      	ldr	r3, [sp, #28]
 8010038:	9704      	str	r7, [sp, #16]
 801003a:	2b00      	cmp	r3, #0
 801003c:	dc20      	bgt.n	8010080 <_dtoa_r+0x940>
 801003e:	9300      	str	r3, [sp, #0]
 8010040:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010042:	2b02      	cmp	r3, #2
 8010044:	dd1e      	ble.n	8010084 <_dtoa_r+0x944>
 8010046:	9b00      	ldr	r3, [sp, #0]
 8010048:	2b00      	cmp	r3, #0
 801004a:	f47f aec0 	bne.w	800fdce <_dtoa_r+0x68e>
 801004e:	4621      	mov	r1, r4
 8010050:	2205      	movs	r2, #5
 8010052:	4658      	mov	r0, fp
 8010054:	f000 fde6 	bl	8010c24 <__multadd>
 8010058:	4601      	mov	r1, r0
 801005a:	4604      	mov	r4, r0
 801005c:	4648      	mov	r0, r9
 801005e:	f001 f843 	bl	80110e8 <__mcmp>
 8010062:	2800      	cmp	r0, #0
 8010064:	f77f aeb3 	ble.w	800fdce <_dtoa_r+0x68e>
 8010068:	4656      	mov	r6, sl
 801006a:	2331      	movs	r3, #49	@ 0x31
 801006c:	f806 3b01 	strb.w	r3, [r6], #1
 8010070:	9b04      	ldr	r3, [sp, #16]
 8010072:	3301      	adds	r3, #1
 8010074:	9304      	str	r3, [sp, #16]
 8010076:	e6ae      	b.n	800fdd6 <_dtoa_r+0x696>
 8010078:	9c07      	ldr	r4, [sp, #28]
 801007a:	9704      	str	r7, [sp, #16]
 801007c:	4625      	mov	r5, r4
 801007e:	e7f3      	b.n	8010068 <_dtoa_r+0x928>
 8010080:	9b07      	ldr	r3, [sp, #28]
 8010082:	9300      	str	r3, [sp, #0]
 8010084:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010086:	2b00      	cmp	r3, #0
 8010088:	f000 8104 	beq.w	8010294 <_dtoa_r+0xb54>
 801008c:	2e00      	cmp	r6, #0
 801008e:	dd05      	ble.n	801009c <_dtoa_r+0x95c>
 8010090:	4629      	mov	r1, r5
 8010092:	4632      	mov	r2, r6
 8010094:	4658      	mov	r0, fp
 8010096:	f000 ffbb 	bl	8011010 <__lshift>
 801009a:	4605      	mov	r5, r0
 801009c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d05a      	beq.n	8010158 <_dtoa_r+0xa18>
 80100a2:	6869      	ldr	r1, [r5, #4]
 80100a4:	4658      	mov	r0, fp
 80100a6:	f000 fd5b 	bl	8010b60 <_Balloc>
 80100aa:	4606      	mov	r6, r0
 80100ac:	b928      	cbnz	r0, 80100ba <_dtoa_r+0x97a>
 80100ae:	4b84      	ldr	r3, [pc, #528]	@ (80102c0 <_dtoa_r+0xb80>)
 80100b0:	4602      	mov	r2, r0
 80100b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80100b6:	f7ff bb5a 	b.w	800f76e <_dtoa_r+0x2e>
 80100ba:	692a      	ldr	r2, [r5, #16]
 80100bc:	3202      	adds	r2, #2
 80100be:	0092      	lsls	r2, r2, #2
 80100c0:	f105 010c 	add.w	r1, r5, #12
 80100c4:	300c      	adds	r0, #12
 80100c6:	f7ff fa78 	bl	800f5ba <memcpy>
 80100ca:	2201      	movs	r2, #1
 80100cc:	4631      	mov	r1, r6
 80100ce:	4658      	mov	r0, fp
 80100d0:	f000 ff9e 	bl	8011010 <__lshift>
 80100d4:	f10a 0301 	add.w	r3, sl, #1
 80100d8:	9307      	str	r3, [sp, #28]
 80100da:	9b00      	ldr	r3, [sp, #0]
 80100dc:	4453      	add	r3, sl
 80100de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80100e0:	9b02      	ldr	r3, [sp, #8]
 80100e2:	f003 0301 	and.w	r3, r3, #1
 80100e6:	462f      	mov	r7, r5
 80100e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80100ea:	4605      	mov	r5, r0
 80100ec:	9b07      	ldr	r3, [sp, #28]
 80100ee:	4621      	mov	r1, r4
 80100f0:	3b01      	subs	r3, #1
 80100f2:	4648      	mov	r0, r9
 80100f4:	9300      	str	r3, [sp, #0]
 80100f6:	f7ff fa9b 	bl	800f630 <quorem>
 80100fa:	4639      	mov	r1, r7
 80100fc:	9002      	str	r0, [sp, #8]
 80100fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010102:	4648      	mov	r0, r9
 8010104:	f000 fff0 	bl	80110e8 <__mcmp>
 8010108:	462a      	mov	r2, r5
 801010a:	9008      	str	r0, [sp, #32]
 801010c:	4621      	mov	r1, r4
 801010e:	4658      	mov	r0, fp
 8010110:	f001 f806 	bl	8011120 <__mdiff>
 8010114:	68c2      	ldr	r2, [r0, #12]
 8010116:	4606      	mov	r6, r0
 8010118:	bb02      	cbnz	r2, 801015c <_dtoa_r+0xa1c>
 801011a:	4601      	mov	r1, r0
 801011c:	4648      	mov	r0, r9
 801011e:	f000 ffe3 	bl	80110e8 <__mcmp>
 8010122:	4602      	mov	r2, r0
 8010124:	4631      	mov	r1, r6
 8010126:	4658      	mov	r0, fp
 8010128:	920e      	str	r2, [sp, #56]	@ 0x38
 801012a:	f000 fd59 	bl	8010be0 <_Bfree>
 801012e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010130:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010132:	9e07      	ldr	r6, [sp, #28]
 8010134:	ea43 0102 	orr.w	r1, r3, r2
 8010138:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801013a:	4319      	orrs	r1, r3
 801013c:	d110      	bne.n	8010160 <_dtoa_r+0xa20>
 801013e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010142:	d029      	beq.n	8010198 <_dtoa_r+0xa58>
 8010144:	9b08      	ldr	r3, [sp, #32]
 8010146:	2b00      	cmp	r3, #0
 8010148:	dd02      	ble.n	8010150 <_dtoa_r+0xa10>
 801014a:	9b02      	ldr	r3, [sp, #8]
 801014c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010150:	9b00      	ldr	r3, [sp, #0]
 8010152:	f883 8000 	strb.w	r8, [r3]
 8010156:	e63f      	b.n	800fdd8 <_dtoa_r+0x698>
 8010158:	4628      	mov	r0, r5
 801015a:	e7bb      	b.n	80100d4 <_dtoa_r+0x994>
 801015c:	2201      	movs	r2, #1
 801015e:	e7e1      	b.n	8010124 <_dtoa_r+0x9e4>
 8010160:	9b08      	ldr	r3, [sp, #32]
 8010162:	2b00      	cmp	r3, #0
 8010164:	db04      	blt.n	8010170 <_dtoa_r+0xa30>
 8010166:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010168:	430b      	orrs	r3, r1
 801016a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801016c:	430b      	orrs	r3, r1
 801016e:	d120      	bne.n	80101b2 <_dtoa_r+0xa72>
 8010170:	2a00      	cmp	r2, #0
 8010172:	dded      	ble.n	8010150 <_dtoa_r+0xa10>
 8010174:	4649      	mov	r1, r9
 8010176:	2201      	movs	r2, #1
 8010178:	4658      	mov	r0, fp
 801017a:	f000 ff49 	bl	8011010 <__lshift>
 801017e:	4621      	mov	r1, r4
 8010180:	4681      	mov	r9, r0
 8010182:	f000 ffb1 	bl	80110e8 <__mcmp>
 8010186:	2800      	cmp	r0, #0
 8010188:	dc03      	bgt.n	8010192 <_dtoa_r+0xa52>
 801018a:	d1e1      	bne.n	8010150 <_dtoa_r+0xa10>
 801018c:	f018 0f01 	tst.w	r8, #1
 8010190:	d0de      	beq.n	8010150 <_dtoa_r+0xa10>
 8010192:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010196:	d1d8      	bne.n	801014a <_dtoa_r+0xa0a>
 8010198:	9a00      	ldr	r2, [sp, #0]
 801019a:	2339      	movs	r3, #57	@ 0x39
 801019c:	7013      	strb	r3, [r2, #0]
 801019e:	4633      	mov	r3, r6
 80101a0:	461e      	mov	r6, r3
 80101a2:	3b01      	subs	r3, #1
 80101a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80101a8:	2a39      	cmp	r2, #57	@ 0x39
 80101aa:	d052      	beq.n	8010252 <_dtoa_r+0xb12>
 80101ac:	3201      	adds	r2, #1
 80101ae:	701a      	strb	r2, [r3, #0]
 80101b0:	e612      	b.n	800fdd8 <_dtoa_r+0x698>
 80101b2:	2a00      	cmp	r2, #0
 80101b4:	dd07      	ble.n	80101c6 <_dtoa_r+0xa86>
 80101b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80101ba:	d0ed      	beq.n	8010198 <_dtoa_r+0xa58>
 80101bc:	9a00      	ldr	r2, [sp, #0]
 80101be:	f108 0301 	add.w	r3, r8, #1
 80101c2:	7013      	strb	r3, [r2, #0]
 80101c4:	e608      	b.n	800fdd8 <_dtoa_r+0x698>
 80101c6:	9b07      	ldr	r3, [sp, #28]
 80101c8:	9a07      	ldr	r2, [sp, #28]
 80101ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 80101ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80101d0:	4293      	cmp	r3, r2
 80101d2:	d028      	beq.n	8010226 <_dtoa_r+0xae6>
 80101d4:	4649      	mov	r1, r9
 80101d6:	2300      	movs	r3, #0
 80101d8:	220a      	movs	r2, #10
 80101da:	4658      	mov	r0, fp
 80101dc:	f000 fd22 	bl	8010c24 <__multadd>
 80101e0:	42af      	cmp	r7, r5
 80101e2:	4681      	mov	r9, r0
 80101e4:	f04f 0300 	mov.w	r3, #0
 80101e8:	f04f 020a 	mov.w	r2, #10
 80101ec:	4639      	mov	r1, r7
 80101ee:	4658      	mov	r0, fp
 80101f0:	d107      	bne.n	8010202 <_dtoa_r+0xac2>
 80101f2:	f000 fd17 	bl	8010c24 <__multadd>
 80101f6:	4607      	mov	r7, r0
 80101f8:	4605      	mov	r5, r0
 80101fa:	9b07      	ldr	r3, [sp, #28]
 80101fc:	3301      	adds	r3, #1
 80101fe:	9307      	str	r3, [sp, #28]
 8010200:	e774      	b.n	80100ec <_dtoa_r+0x9ac>
 8010202:	f000 fd0f 	bl	8010c24 <__multadd>
 8010206:	4629      	mov	r1, r5
 8010208:	4607      	mov	r7, r0
 801020a:	2300      	movs	r3, #0
 801020c:	220a      	movs	r2, #10
 801020e:	4658      	mov	r0, fp
 8010210:	f000 fd08 	bl	8010c24 <__multadd>
 8010214:	4605      	mov	r5, r0
 8010216:	e7f0      	b.n	80101fa <_dtoa_r+0xaba>
 8010218:	9b00      	ldr	r3, [sp, #0]
 801021a:	2b00      	cmp	r3, #0
 801021c:	bfcc      	ite	gt
 801021e:	461e      	movgt	r6, r3
 8010220:	2601      	movle	r6, #1
 8010222:	4456      	add	r6, sl
 8010224:	2700      	movs	r7, #0
 8010226:	4649      	mov	r1, r9
 8010228:	2201      	movs	r2, #1
 801022a:	4658      	mov	r0, fp
 801022c:	f000 fef0 	bl	8011010 <__lshift>
 8010230:	4621      	mov	r1, r4
 8010232:	4681      	mov	r9, r0
 8010234:	f000 ff58 	bl	80110e8 <__mcmp>
 8010238:	2800      	cmp	r0, #0
 801023a:	dcb0      	bgt.n	801019e <_dtoa_r+0xa5e>
 801023c:	d102      	bne.n	8010244 <_dtoa_r+0xb04>
 801023e:	f018 0f01 	tst.w	r8, #1
 8010242:	d1ac      	bne.n	801019e <_dtoa_r+0xa5e>
 8010244:	4633      	mov	r3, r6
 8010246:	461e      	mov	r6, r3
 8010248:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801024c:	2a30      	cmp	r2, #48	@ 0x30
 801024e:	d0fa      	beq.n	8010246 <_dtoa_r+0xb06>
 8010250:	e5c2      	b.n	800fdd8 <_dtoa_r+0x698>
 8010252:	459a      	cmp	sl, r3
 8010254:	d1a4      	bne.n	80101a0 <_dtoa_r+0xa60>
 8010256:	9b04      	ldr	r3, [sp, #16]
 8010258:	3301      	adds	r3, #1
 801025a:	9304      	str	r3, [sp, #16]
 801025c:	2331      	movs	r3, #49	@ 0x31
 801025e:	f88a 3000 	strb.w	r3, [sl]
 8010262:	e5b9      	b.n	800fdd8 <_dtoa_r+0x698>
 8010264:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010266:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80102c4 <_dtoa_r+0xb84>
 801026a:	b11b      	cbz	r3, 8010274 <_dtoa_r+0xb34>
 801026c:	f10a 0308 	add.w	r3, sl, #8
 8010270:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010272:	6013      	str	r3, [r2, #0]
 8010274:	4650      	mov	r0, sl
 8010276:	b019      	add	sp, #100	@ 0x64
 8010278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801027c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801027e:	2b01      	cmp	r3, #1
 8010280:	f77f ae37 	ble.w	800fef2 <_dtoa_r+0x7b2>
 8010284:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010286:	930a      	str	r3, [sp, #40]	@ 0x28
 8010288:	2001      	movs	r0, #1
 801028a:	e655      	b.n	800ff38 <_dtoa_r+0x7f8>
 801028c:	9b00      	ldr	r3, [sp, #0]
 801028e:	2b00      	cmp	r3, #0
 8010290:	f77f aed6 	ble.w	8010040 <_dtoa_r+0x900>
 8010294:	4656      	mov	r6, sl
 8010296:	4621      	mov	r1, r4
 8010298:	4648      	mov	r0, r9
 801029a:	f7ff f9c9 	bl	800f630 <quorem>
 801029e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80102a2:	f806 8b01 	strb.w	r8, [r6], #1
 80102a6:	9b00      	ldr	r3, [sp, #0]
 80102a8:	eba6 020a 	sub.w	r2, r6, sl
 80102ac:	4293      	cmp	r3, r2
 80102ae:	ddb3      	ble.n	8010218 <_dtoa_r+0xad8>
 80102b0:	4649      	mov	r1, r9
 80102b2:	2300      	movs	r3, #0
 80102b4:	220a      	movs	r2, #10
 80102b6:	4658      	mov	r0, fp
 80102b8:	f000 fcb4 	bl	8010c24 <__multadd>
 80102bc:	4681      	mov	r9, r0
 80102be:	e7ea      	b.n	8010296 <_dtoa_r+0xb56>
 80102c0:	080133eb 	.word	0x080133eb
 80102c4:	08013386 	.word	0x08013386

080102c8 <_free_r>:
 80102c8:	b538      	push	{r3, r4, r5, lr}
 80102ca:	4605      	mov	r5, r0
 80102cc:	2900      	cmp	r1, #0
 80102ce:	d041      	beq.n	8010354 <_free_r+0x8c>
 80102d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80102d4:	1f0c      	subs	r4, r1, #4
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	bfb8      	it	lt
 80102da:	18e4      	addlt	r4, r4, r3
 80102dc:	f000 fc34 	bl	8010b48 <__malloc_lock>
 80102e0:	4a1d      	ldr	r2, [pc, #116]	@ (8010358 <_free_r+0x90>)
 80102e2:	6813      	ldr	r3, [r2, #0]
 80102e4:	b933      	cbnz	r3, 80102f4 <_free_r+0x2c>
 80102e6:	6063      	str	r3, [r4, #4]
 80102e8:	6014      	str	r4, [r2, #0]
 80102ea:	4628      	mov	r0, r5
 80102ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80102f0:	f000 bc30 	b.w	8010b54 <__malloc_unlock>
 80102f4:	42a3      	cmp	r3, r4
 80102f6:	d908      	bls.n	801030a <_free_r+0x42>
 80102f8:	6820      	ldr	r0, [r4, #0]
 80102fa:	1821      	adds	r1, r4, r0
 80102fc:	428b      	cmp	r3, r1
 80102fe:	bf01      	itttt	eq
 8010300:	6819      	ldreq	r1, [r3, #0]
 8010302:	685b      	ldreq	r3, [r3, #4]
 8010304:	1809      	addeq	r1, r1, r0
 8010306:	6021      	streq	r1, [r4, #0]
 8010308:	e7ed      	b.n	80102e6 <_free_r+0x1e>
 801030a:	461a      	mov	r2, r3
 801030c:	685b      	ldr	r3, [r3, #4]
 801030e:	b10b      	cbz	r3, 8010314 <_free_r+0x4c>
 8010310:	42a3      	cmp	r3, r4
 8010312:	d9fa      	bls.n	801030a <_free_r+0x42>
 8010314:	6811      	ldr	r1, [r2, #0]
 8010316:	1850      	adds	r0, r2, r1
 8010318:	42a0      	cmp	r0, r4
 801031a:	d10b      	bne.n	8010334 <_free_r+0x6c>
 801031c:	6820      	ldr	r0, [r4, #0]
 801031e:	4401      	add	r1, r0
 8010320:	1850      	adds	r0, r2, r1
 8010322:	4283      	cmp	r3, r0
 8010324:	6011      	str	r1, [r2, #0]
 8010326:	d1e0      	bne.n	80102ea <_free_r+0x22>
 8010328:	6818      	ldr	r0, [r3, #0]
 801032a:	685b      	ldr	r3, [r3, #4]
 801032c:	6053      	str	r3, [r2, #4]
 801032e:	4408      	add	r0, r1
 8010330:	6010      	str	r0, [r2, #0]
 8010332:	e7da      	b.n	80102ea <_free_r+0x22>
 8010334:	d902      	bls.n	801033c <_free_r+0x74>
 8010336:	230c      	movs	r3, #12
 8010338:	602b      	str	r3, [r5, #0]
 801033a:	e7d6      	b.n	80102ea <_free_r+0x22>
 801033c:	6820      	ldr	r0, [r4, #0]
 801033e:	1821      	adds	r1, r4, r0
 8010340:	428b      	cmp	r3, r1
 8010342:	bf04      	itt	eq
 8010344:	6819      	ldreq	r1, [r3, #0]
 8010346:	685b      	ldreq	r3, [r3, #4]
 8010348:	6063      	str	r3, [r4, #4]
 801034a:	bf04      	itt	eq
 801034c:	1809      	addeq	r1, r1, r0
 801034e:	6021      	streq	r1, [r4, #0]
 8010350:	6054      	str	r4, [r2, #4]
 8010352:	e7ca      	b.n	80102ea <_free_r+0x22>
 8010354:	bd38      	pop	{r3, r4, r5, pc}
 8010356:	bf00      	nop
 8010358:	20003ccc 	.word	0x20003ccc

0801035c <rshift>:
 801035c:	6903      	ldr	r3, [r0, #16]
 801035e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010362:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010366:	ea4f 1261 	mov.w	r2, r1, asr #5
 801036a:	f100 0414 	add.w	r4, r0, #20
 801036e:	dd45      	ble.n	80103fc <rshift+0xa0>
 8010370:	f011 011f 	ands.w	r1, r1, #31
 8010374:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010378:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801037c:	d10c      	bne.n	8010398 <rshift+0x3c>
 801037e:	f100 0710 	add.w	r7, r0, #16
 8010382:	4629      	mov	r1, r5
 8010384:	42b1      	cmp	r1, r6
 8010386:	d334      	bcc.n	80103f2 <rshift+0x96>
 8010388:	1a9b      	subs	r3, r3, r2
 801038a:	009b      	lsls	r3, r3, #2
 801038c:	1eea      	subs	r2, r5, #3
 801038e:	4296      	cmp	r6, r2
 8010390:	bf38      	it	cc
 8010392:	2300      	movcc	r3, #0
 8010394:	4423      	add	r3, r4
 8010396:	e015      	b.n	80103c4 <rshift+0x68>
 8010398:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801039c:	f1c1 0820 	rsb	r8, r1, #32
 80103a0:	40cf      	lsrs	r7, r1
 80103a2:	f105 0e04 	add.w	lr, r5, #4
 80103a6:	46a1      	mov	r9, r4
 80103a8:	4576      	cmp	r6, lr
 80103aa:	46f4      	mov	ip, lr
 80103ac:	d815      	bhi.n	80103da <rshift+0x7e>
 80103ae:	1a9a      	subs	r2, r3, r2
 80103b0:	0092      	lsls	r2, r2, #2
 80103b2:	3a04      	subs	r2, #4
 80103b4:	3501      	adds	r5, #1
 80103b6:	42ae      	cmp	r6, r5
 80103b8:	bf38      	it	cc
 80103ba:	2200      	movcc	r2, #0
 80103bc:	18a3      	adds	r3, r4, r2
 80103be:	50a7      	str	r7, [r4, r2]
 80103c0:	b107      	cbz	r7, 80103c4 <rshift+0x68>
 80103c2:	3304      	adds	r3, #4
 80103c4:	1b1a      	subs	r2, r3, r4
 80103c6:	42a3      	cmp	r3, r4
 80103c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80103cc:	bf08      	it	eq
 80103ce:	2300      	moveq	r3, #0
 80103d0:	6102      	str	r2, [r0, #16]
 80103d2:	bf08      	it	eq
 80103d4:	6143      	streq	r3, [r0, #20]
 80103d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103da:	f8dc c000 	ldr.w	ip, [ip]
 80103de:	fa0c fc08 	lsl.w	ip, ip, r8
 80103e2:	ea4c 0707 	orr.w	r7, ip, r7
 80103e6:	f849 7b04 	str.w	r7, [r9], #4
 80103ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 80103ee:	40cf      	lsrs	r7, r1
 80103f0:	e7da      	b.n	80103a8 <rshift+0x4c>
 80103f2:	f851 cb04 	ldr.w	ip, [r1], #4
 80103f6:	f847 cf04 	str.w	ip, [r7, #4]!
 80103fa:	e7c3      	b.n	8010384 <rshift+0x28>
 80103fc:	4623      	mov	r3, r4
 80103fe:	e7e1      	b.n	80103c4 <rshift+0x68>

08010400 <__hexdig_fun>:
 8010400:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010404:	2b09      	cmp	r3, #9
 8010406:	d802      	bhi.n	801040e <__hexdig_fun+0xe>
 8010408:	3820      	subs	r0, #32
 801040a:	b2c0      	uxtb	r0, r0
 801040c:	4770      	bx	lr
 801040e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010412:	2b05      	cmp	r3, #5
 8010414:	d801      	bhi.n	801041a <__hexdig_fun+0x1a>
 8010416:	3847      	subs	r0, #71	@ 0x47
 8010418:	e7f7      	b.n	801040a <__hexdig_fun+0xa>
 801041a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801041e:	2b05      	cmp	r3, #5
 8010420:	d801      	bhi.n	8010426 <__hexdig_fun+0x26>
 8010422:	3827      	subs	r0, #39	@ 0x27
 8010424:	e7f1      	b.n	801040a <__hexdig_fun+0xa>
 8010426:	2000      	movs	r0, #0
 8010428:	4770      	bx	lr
	...

0801042c <__gethex>:
 801042c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010430:	b085      	sub	sp, #20
 8010432:	468a      	mov	sl, r1
 8010434:	9302      	str	r3, [sp, #8]
 8010436:	680b      	ldr	r3, [r1, #0]
 8010438:	9001      	str	r0, [sp, #4]
 801043a:	4690      	mov	r8, r2
 801043c:	1c9c      	adds	r4, r3, #2
 801043e:	46a1      	mov	r9, r4
 8010440:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010444:	2830      	cmp	r0, #48	@ 0x30
 8010446:	d0fa      	beq.n	801043e <__gethex+0x12>
 8010448:	eba9 0303 	sub.w	r3, r9, r3
 801044c:	f1a3 0b02 	sub.w	fp, r3, #2
 8010450:	f7ff ffd6 	bl	8010400 <__hexdig_fun>
 8010454:	4605      	mov	r5, r0
 8010456:	2800      	cmp	r0, #0
 8010458:	d168      	bne.n	801052c <__gethex+0x100>
 801045a:	49a0      	ldr	r1, [pc, #640]	@ (80106dc <__gethex+0x2b0>)
 801045c:	2201      	movs	r2, #1
 801045e:	4648      	mov	r0, r9
 8010460:	f7fe ffc5 	bl	800f3ee <strncmp>
 8010464:	4607      	mov	r7, r0
 8010466:	2800      	cmp	r0, #0
 8010468:	d167      	bne.n	801053a <__gethex+0x10e>
 801046a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801046e:	4626      	mov	r6, r4
 8010470:	f7ff ffc6 	bl	8010400 <__hexdig_fun>
 8010474:	2800      	cmp	r0, #0
 8010476:	d062      	beq.n	801053e <__gethex+0x112>
 8010478:	4623      	mov	r3, r4
 801047a:	7818      	ldrb	r0, [r3, #0]
 801047c:	2830      	cmp	r0, #48	@ 0x30
 801047e:	4699      	mov	r9, r3
 8010480:	f103 0301 	add.w	r3, r3, #1
 8010484:	d0f9      	beq.n	801047a <__gethex+0x4e>
 8010486:	f7ff ffbb 	bl	8010400 <__hexdig_fun>
 801048a:	fab0 f580 	clz	r5, r0
 801048e:	096d      	lsrs	r5, r5, #5
 8010490:	f04f 0b01 	mov.w	fp, #1
 8010494:	464a      	mov	r2, r9
 8010496:	4616      	mov	r6, r2
 8010498:	3201      	adds	r2, #1
 801049a:	7830      	ldrb	r0, [r6, #0]
 801049c:	f7ff ffb0 	bl	8010400 <__hexdig_fun>
 80104a0:	2800      	cmp	r0, #0
 80104a2:	d1f8      	bne.n	8010496 <__gethex+0x6a>
 80104a4:	498d      	ldr	r1, [pc, #564]	@ (80106dc <__gethex+0x2b0>)
 80104a6:	2201      	movs	r2, #1
 80104a8:	4630      	mov	r0, r6
 80104aa:	f7fe ffa0 	bl	800f3ee <strncmp>
 80104ae:	2800      	cmp	r0, #0
 80104b0:	d13f      	bne.n	8010532 <__gethex+0x106>
 80104b2:	b944      	cbnz	r4, 80104c6 <__gethex+0x9a>
 80104b4:	1c74      	adds	r4, r6, #1
 80104b6:	4622      	mov	r2, r4
 80104b8:	4616      	mov	r6, r2
 80104ba:	3201      	adds	r2, #1
 80104bc:	7830      	ldrb	r0, [r6, #0]
 80104be:	f7ff ff9f 	bl	8010400 <__hexdig_fun>
 80104c2:	2800      	cmp	r0, #0
 80104c4:	d1f8      	bne.n	80104b8 <__gethex+0x8c>
 80104c6:	1ba4      	subs	r4, r4, r6
 80104c8:	00a7      	lsls	r7, r4, #2
 80104ca:	7833      	ldrb	r3, [r6, #0]
 80104cc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80104d0:	2b50      	cmp	r3, #80	@ 0x50
 80104d2:	d13e      	bne.n	8010552 <__gethex+0x126>
 80104d4:	7873      	ldrb	r3, [r6, #1]
 80104d6:	2b2b      	cmp	r3, #43	@ 0x2b
 80104d8:	d033      	beq.n	8010542 <__gethex+0x116>
 80104da:	2b2d      	cmp	r3, #45	@ 0x2d
 80104dc:	d034      	beq.n	8010548 <__gethex+0x11c>
 80104de:	1c71      	adds	r1, r6, #1
 80104e0:	2400      	movs	r4, #0
 80104e2:	7808      	ldrb	r0, [r1, #0]
 80104e4:	f7ff ff8c 	bl	8010400 <__hexdig_fun>
 80104e8:	1e43      	subs	r3, r0, #1
 80104ea:	b2db      	uxtb	r3, r3
 80104ec:	2b18      	cmp	r3, #24
 80104ee:	d830      	bhi.n	8010552 <__gethex+0x126>
 80104f0:	f1a0 0210 	sub.w	r2, r0, #16
 80104f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80104f8:	f7ff ff82 	bl	8010400 <__hexdig_fun>
 80104fc:	f100 3cff 	add.w	ip, r0, #4294967295
 8010500:	fa5f fc8c 	uxtb.w	ip, ip
 8010504:	f1bc 0f18 	cmp.w	ip, #24
 8010508:	f04f 030a 	mov.w	r3, #10
 801050c:	d91e      	bls.n	801054c <__gethex+0x120>
 801050e:	b104      	cbz	r4, 8010512 <__gethex+0xe6>
 8010510:	4252      	negs	r2, r2
 8010512:	4417      	add	r7, r2
 8010514:	f8ca 1000 	str.w	r1, [sl]
 8010518:	b1ed      	cbz	r5, 8010556 <__gethex+0x12a>
 801051a:	f1bb 0f00 	cmp.w	fp, #0
 801051e:	bf0c      	ite	eq
 8010520:	2506      	moveq	r5, #6
 8010522:	2500      	movne	r5, #0
 8010524:	4628      	mov	r0, r5
 8010526:	b005      	add	sp, #20
 8010528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801052c:	2500      	movs	r5, #0
 801052e:	462c      	mov	r4, r5
 8010530:	e7b0      	b.n	8010494 <__gethex+0x68>
 8010532:	2c00      	cmp	r4, #0
 8010534:	d1c7      	bne.n	80104c6 <__gethex+0x9a>
 8010536:	4627      	mov	r7, r4
 8010538:	e7c7      	b.n	80104ca <__gethex+0x9e>
 801053a:	464e      	mov	r6, r9
 801053c:	462f      	mov	r7, r5
 801053e:	2501      	movs	r5, #1
 8010540:	e7c3      	b.n	80104ca <__gethex+0x9e>
 8010542:	2400      	movs	r4, #0
 8010544:	1cb1      	adds	r1, r6, #2
 8010546:	e7cc      	b.n	80104e2 <__gethex+0xb6>
 8010548:	2401      	movs	r4, #1
 801054a:	e7fb      	b.n	8010544 <__gethex+0x118>
 801054c:	fb03 0002 	mla	r0, r3, r2, r0
 8010550:	e7ce      	b.n	80104f0 <__gethex+0xc4>
 8010552:	4631      	mov	r1, r6
 8010554:	e7de      	b.n	8010514 <__gethex+0xe8>
 8010556:	eba6 0309 	sub.w	r3, r6, r9
 801055a:	3b01      	subs	r3, #1
 801055c:	4629      	mov	r1, r5
 801055e:	2b07      	cmp	r3, #7
 8010560:	dc0a      	bgt.n	8010578 <__gethex+0x14c>
 8010562:	9801      	ldr	r0, [sp, #4]
 8010564:	f000 fafc 	bl	8010b60 <_Balloc>
 8010568:	4604      	mov	r4, r0
 801056a:	b940      	cbnz	r0, 801057e <__gethex+0x152>
 801056c:	4b5c      	ldr	r3, [pc, #368]	@ (80106e0 <__gethex+0x2b4>)
 801056e:	4602      	mov	r2, r0
 8010570:	21e4      	movs	r1, #228	@ 0xe4
 8010572:	485c      	ldr	r0, [pc, #368]	@ (80106e4 <__gethex+0x2b8>)
 8010574:	f7ff f83e 	bl	800f5f4 <__assert_func>
 8010578:	3101      	adds	r1, #1
 801057a:	105b      	asrs	r3, r3, #1
 801057c:	e7ef      	b.n	801055e <__gethex+0x132>
 801057e:	f100 0a14 	add.w	sl, r0, #20
 8010582:	2300      	movs	r3, #0
 8010584:	4655      	mov	r5, sl
 8010586:	469b      	mov	fp, r3
 8010588:	45b1      	cmp	r9, r6
 801058a:	d337      	bcc.n	80105fc <__gethex+0x1d0>
 801058c:	f845 bb04 	str.w	fp, [r5], #4
 8010590:	eba5 050a 	sub.w	r5, r5, sl
 8010594:	10ad      	asrs	r5, r5, #2
 8010596:	6125      	str	r5, [r4, #16]
 8010598:	4658      	mov	r0, fp
 801059a:	f000 fbd3 	bl	8010d44 <__hi0bits>
 801059e:	016d      	lsls	r5, r5, #5
 80105a0:	f8d8 6000 	ldr.w	r6, [r8]
 80105a4:	1a2d      	subs	r5, r5, r0
 80105a6:	42b5      	cmp	r5, r6
 80105a8:	dd54      	ble.n	8010654 <__gethex+0x228>
 80105aa:	1bad      	subs	r5, r5, r6
 80105ac:	4629      	mov	r1, r5
 80105ae:	4620      	mov	r0, r4
 80105b0:	f000 ff67 	bl	8011482 <__any_on>
 80105b4:	4681      	mov	r9, r0
 80105b6:	b178      	cbz	r0, 80105d8 <__gethex+0x1ac>
 80105b8:	1e6b      	subs	r3, r5, #1
 80105ba:	1159      	asrs	r1, r3, #5
 80105bc:	f003 021f 	and.w	r2, r3, #31
 80105c0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80105c4:	f04f 0901 	mov.w	r9, #1
 80105c8:	fa09 f202 	lsl.w	r2, r9, r2
 80105cc:	420a      	tst	r2, r1
 80105ce:	d003      	beq.n	80105d8 <__gethex+0x1ac>
 80105d0:	454b      	cmp	r3, r9
 80105d2:	dc36      	bgt.n	8010642 <__gethex+0x216>
 80105d4:	f04f 0902 	mov.w	r9, #2
 80105d8:	4629      	mov	r1, r5
 80105da:	4620      	mov	r0, r4
 80105dc:	f7ff febe 	bl	801035c <rshift>
 80105e0:	442f      	add	r7, r5
 80105e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80105e6:	42bb      	cmp	r3, r7
 80105e8:	da42      	bge.n	8010670 <__gethex+0x244>
 80105ea:	9801      	ldr	r0, [sp, #4]
 80105ec:	4621      	mov	r1, r4
 80105ee:	f000 faf7 	bl	8010be0 <_Bfree>
 80105f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80105f4:	2300      	movs	r3, #0
 80105f6:	6013      	str	r3, [r2, #0]
 80105f8:	25a3      	movs	r5, #163	@ 0xa3
 80105fa:	e793      	b.n	8010524 <__gethex+0xf8>
 80105fc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010600:	2a2e      	cmp	r2, #46	@ 0x2e
 8010602:	d012      	beq.n	801062a <__gethex+0x1fe>
 8010604:	2b20      	cmp	r3, #32
 8010606:	d104      	bne.n	8010612 <__gethex+0x1e6>
 8010608:	f845 bb04 	str.w	fp, [r5], #4
 801060c:	f04f 0b00 	mov.w	fp, #0
 8010610:	465b      	mov	r3, fp
 8010612:	7830      	ldrb	r0, [r6, #0]
 8010614:	9303      	str	r3, [sp, #12]
 8010616:	f7ff fef3 	bl	8010400 <__hexdig_fun>
 801061a:	9b03      	ldr	r3, [sp, #12]
 801061c:	f000 000f 	and.w	r0, r0, #15
 8010620:	4098      	lsls	r0, r3
 8010622:	ea4b 0b00 	orr.w	fp, fp, r0
 8010626:	3304      	adds	r3, #4
 8010628:	e7ae      	b.n	8010588 <__gethex+0x15c>
 801062a:	45b1      	cmp	r9, r6
 801062c:	d8ea      	bhi.n	8010604 <__gethex+0x1d8>
 801062e:	492b      	ldr	r1, [pc, #172]	@ (80106dc <__gethex+0x2b0>)
 8010630:	9303      	str	r3, [sp, #12]
 8010632:	2201      	movs	r2, #1
 8010634:	4630      	mov	r0, r6
 8010636:	f7fe feda 	bl	800f3ee <strncmp>
 801063a:	9b03      	ldr	r3, [sp, #12]
 801063c:	2800      	cmp	r0, #0
 801063e:	d1e1      	bne.n	8010604 <__gethex+0x1d8>
 8010640:	e7a2      	b.n	8010588 <__gethex+0x15c>
 8010642:	1ea9      	subs	r1, r5, #2
 8010644:	4620      	mov	r0, r4
 8010646:	f000 ff1c 	bl	8011482 <__any_on>
 801064a:	2800      	cmp	r0, #0
 801064c:	d0c2      	beq.n	80105d4 <__gethex+0x1a8>
 801064e:	f04f 0903 	mov.w	r9, #3
 8010652:	e7c1      	b.n	80105d8 <__gethex+0x1ac>
 8010654:	da09      	bge.n	801066a <__gethex+0x23e>
 8010656:	1b75      	subs	r5, r6, r5
 8010658:	4621      	mov	r1, r4
 801065a:	9801      	ldr	r0, [sp, #4]
 801065c:	462a      	mov	r2, r5
 801065e:	f000 fcd7 	bl	8011010 <__lshift>
 8010662:	1b7f      	subs	r7, r7, r5
 8010664:	4604      	mov	r4, r0
 8010666:	f100 0a14 	add.w	sl, r0, #20
 801066a:	f04f 0900 	mov.w	r9, #0
 801066e:	e7b8      	b.n	80105e2 <__gethex+0x1b6>
 8010670:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010674:	42bd      	cmp	r5, r7
 8010676:	dd6f      	ble.n	8010758 <__gethex+0x32c>
 8010678:	1bed      	subs	r5, r5, r7
 801067a:	42ae      	cmp	r6, r5
 801067c:	dc34      	bgt.n	80106e8 <__gethex+0x2bc>
 801067e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010682:	2b02      	cmp	r3, #2
 8010684:	d022      	beq.n	80106cc <__gethex+0x2a0>
 8010686:	2b03      	cmp	r3, #3
 8010688:	d024      	beq.n	80106d4 <__gethex+0x2a8>
 801068a:	2b01      	cmp	r3, #1
 801068c:	d115      	bne.n	80106ba <__gethex+0x28e>
 801068e:	42ae      	cmp	r6, r5
 8010690:	d113      	bne.n	80106ba <__gethex+0x28e>
 8010692:	2e01      	cmp	r6, #1
 8010694:	d10b      	bne.n	80106ae <__gethex+0x282>
 8010696:	9a02      	ldr	r2, [sp, #8]
 8010698:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801069c:	6013      	str	r3, [r2, #0]
 801069e:	2301      	movs	r3, #1
 80106a0:	6123      	str	r3, [r4, #16]
 80106a2:	f8ca 3000 	str.w	r3, [sl]
 80106a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80106a8:	2562      	movs	r5, #98	@ 0x62
 80106aa:	601c      	str	r4, [r3, #0]
 80106ac:	e73a      	b.n	8010524 <__gethex+0xf8>
 80106ae:	1e71      	subs	r1, r6, #1
 80106b0:	4620      	mov	r0, r4
 80106b2:	f000 fee6 	bl	8011482 <__any_on>
 80106b6:	2800      	cmp	r0, #0
 80106b8:	d1ed      	bne.n	8010696 <__gethex+0x26a>
 80106ba:	9801      	ldr	r0, [sp, #4]
 80106bc:	4621      	mov	r1, r4
 80106be:	f000 fa8f 	bl	8010be0 <_Bfree>
 80106c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80106c4:	2300      	movs	r3, #0
 80106c6:	6013      	str	r3, [r2, #0]
 80106c8:	2550      	movs	r5, #80	@ 0x50
 80106ca:	e72b      	b.n	8010524 <__gethex+0xf8>
 80106cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d1f3      	bne.n	80106ba <__gethex+0x28e>
 80106d2:	e7e0      	b.n	8010696 <__gethex+0x26a>
 80106d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d1dd      	bne.n	8010696 <__gethex+0x26a>
 80106da:	e7ee      	b.n	80106ba <__gethex+0x28e>
 80106dc:	08013244 	.word	0x08013244
 80106e0:	080133eb 	.word	0x080133eb
 80106e4:	080133fc 	.word	0x080133fc
 80106e8:	1e6f      	subs	r7, r5, #1
 80106ea:	f1b9 0f00 	cmp.w	r9, #0
 80106ee:	d130      	bne.n	8010752 <__gethex+0x326>
 80106f0:	b127      	cbz	r7, 80106fc <__gethex+0x2d0>
 80106f2:	4639      	mov	r1, r7
 80106f4:	4620      	mov	r0, r4
 80106f6:	f000 fec4 	bl	8011482 <__any_on>
 80106fa:	4681      	mov	r9, r0
 80106fc:	117a      	asrs	r2, r7, #5
 80106fe:	2301      	movs	r3, #1
 8010700:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010704:	f007 071f 	and.w	r7, r7, #31
 8010708:	40bb      	lsls	r3, r7
 801070a:	4213      	tst	r3, r2
 801070c:	4629      	mov	r1, r5
 801070e:	4620      	mov	r0, r4
 8010710:	bf18      	it	ne
 8010712:	f049 0902 	orrne.w	r9, r9, #2
 8010716:	f7ff fe21 	bl	801035c <rshift>
 801071a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801071e:	1b76      	subs	r6, r6, r5
 8010720:	2502      	movs	r5, #2
 8010722:	f1b9 0f00 	cmp.w	r9, #0
 8010726:	d047      	beq.n	80107b8 <__gethex+0x38c>
 8010728:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801072c:	2b02      	cmp	r3, #2
 801072e:	d015      	beq.n	801075c <__gethex+0x330>
 8010730:	2b03      	cmp	r3, #3
 8010732:	d017      	beq.n	8010764 <__gethex+0x338>
 8010734:	2b01      	cmp	r3, #1
 8010736:	d109      	bne.n	801074c <__gethex+0x320>
 8010738:	f019 0f02 	tst.w	r9, #2
 801073c:	d006      	beq.n	801074c <__gethex+0x320>
 801073e:	f8da 3000 	ldr.w	r3, [sl]
 8010742:	ea49 0903 	orr.w	r9, r9, r3
 8010746:	f019 0f01 	tst.w	r9, #1
 801074a:	d10e      	bne.n	801076a <__gethex+0x33e>
 801074c:	f045 0510 	orr.w	r5, r5, #16
 8010750:	e032      	b.n	80107b8 <__gethex+0x38c>
 8010752:	f04f 0901 	mov.w	r9, #1
 8010756:	e7d1      	b.n	80106fc <__gethex+0x2d0>
 8010758:	2501      	movs	r5, #1
 801075a:	e7e2      	b.n	8010722 <__gethex+0x2f6>
 801075c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801075e:	f1c3 0301 	rsb	r3, r3, #1
 8010762:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010764:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010766:	2b00      	cmp	r3, #0
 8010768:	d0f0      	beq.n	801074c <__gethex+0x320>
 801076a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801076e:	f104 0314 	add.w	r3, r4, #20
 8010772:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010776:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801077a:	f04f 0c00 	mov.w	ip, #0
 801077e:	4618      	mov	r0, r3
 8010780:	f853 2b04 	ldr.w	r2, [r3], #4
 8010784:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010788:	d01b      	beq.n	80107c2 <__gethex+0x396>
 801078a:	3201      	adds	r2, #1
 801078c:	6002      	str	r2, [r0, #0]
 801078e:	2d02      	cmp	r5, #2
 8010790:	f104 0314 	add.w	r3, r4, #20
 8010794:	d13c      	bne.n	8010810 <__gethex+0x3e4>
 8010796:	f8d8 2000 	ldr.w	r2, [r8]
 801079a:	3a01      	subs	r2, #1
 801079c:	42b2      	cmp	r2, r6
 801079e:	d109      	bne.n	80107b4 <__gethex+0x388>
 80107a0:	1171      	asrs	r1, r6, #5
 80107a2:	2201      	movs	r2, #1
 80107a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80107a8:	f006 061f 	and.w	r6, r6, #31
 80107ac:	fa02 f606 	lsl.w	r6, r2, r6
 80107b0:	421e      	tst	r6, r3
 80107b2:	d13a      	bne.n	801082a <__gethex+0x3fe>
 80107b4:	f045 0520 	orr.w	r5, r5, #32
 80107b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80107ba:	601c      	str	r4, [r3, #0]
 80107bc:	9b02      	ldr	r3, [sp, #8]
 80107be:	601f      	str	r7, [r3, #0]
 80107c0:	e6b0      	b.n	8010524 <__gethex+0xf8>
 80107c2:	4299      	cmp	r1, r3
 80107c4:	f843 cc04 	str.w	ip, [r3, #-4]
 80107c8:	d8d9      	bhi.n	801077e <__gethex+0x352>
 80107ca:	68a3      	ldr	r3, [r4, #8]
 80107cc:	459b      	cmp	fp, r3
 80107ce:	db17      	blt.n	8010800 <__gethex+0x3d4>
 80107d0:	6861      	ldr	r1, [r4, #4]
 80107d2:	9801      	ldr	r0, [sp, #4]
 80107d4:	3101      	adds	r1, #1
 80107d6:	f000 f9c3 	bl	8010b60 <_Balloc>
 80107da:	4681      	mov	r9, r0
 80107dc:	b918      	cbnz	r0, 80107e6 <__gethex+0x3ba>
 80107de:	4b1a      	ldr	r3, [pc, #104]	@ (8010848 <__gethex+0x41c>)
 80107e0:	4602      	mov	r2, r0
 80107e2:	2184      	movs	r1, #132	@ 0x84
 80107e4:	e6c5      	b.n	8010572 <__gethex+0x146>
 80107e6:	6922      	ldr	r2, [r4, #16]
 80107e8:	3202      	adds	r2, #2
 80107ea:	f104 010c 	add.w	r1, r4, #12
 80107ee:	0092      	lsls	r2, r2, #2
 80107f0:	300c      	adds	r0, #12
 80107f2:	f7fe fee2 	bl	800f5ba <memcpy>
 80107f6:	4621      	mov	r1, r4
 80107f8:	9801      	ldr	r0, [sp, #4]
 80107fa:	f000 f9f1 	bl	8010be0 <_Bfree>
 80107fe:	464c      	mov	r4, r9
 8010800:	6923      	ldr	r3, [r4, #16]
 8010802:	1c5a      	adds	r2, r3, #1
 8010804:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010808:	6122      	str	r2, [r4, #16]
 801080a:	2201      	movs	r2, #1
 801080c:	615a      	str	r2, [r3, #20]
 801080e:	e7be      	b.n	801078e <__gethex+0x362>
 8010810:	6922      	ldr	r2, [r4, #16]
 8010812:	455a      	cmp	r2, fp
 8010814:	dd0b      	ble.n	801082e <__gethex+0x402>
 8010816:	2101      	movs	r1, #1
 8010818:	4620      	mov	r0, r4
 801081a:	f7ff fd9f 	bl	801035c <rshift>
 801081e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010822:	3701      	adds	r7, #1
 8010824:	42bb      	cmp	r3, r7
 8010826:	f6ff aee0 	blt.w	80105ea <__gethex+0x1be>
 801082a:	2501      	movs	r5, #1
 801082c:	e7c2      	b.n	80107b4 <__gethex+0x388>
 801082e:	f016 061f 	ands.w	r6, r6, #31
 8010832:	d0fa      	beq.n	801082a <__gethex+0x3fe>
 8010834:	4453      	add	r3, sl
 8010836:	f1c6 0620 	rsb	r6, r6, #32
 801083a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801083e:	f000 fa81 	bl	8010d44 <__hi0bits>
 8010842:	42b0      	cmp	r0, r6
 8010844:	dbe7      	blt.n	8010816 <__gethex+0x3ea>
 8010846:	e7f0      	b.n	801082a <__gethex+0x3fe>
 8010848:	080133eb 	.word	0x080133eb

0801084c <L_shift>:
 801084c:	f1c2 0208 	rsb	r2, r2, #8
 8010850:	0092      	lsls	r2, r2, #2
 8010852:	b570      	push	{r4, r5, r6, lr}
 8010854:	f1c2 0620 	rsb	r6, r2, #32
 8010858:	6843      	ldr	r3, [r0, #4]
 801085a:	6804      	ldr	r4, [r0, #0]
 801085c:	fa03 f506 	lsl.w	r5, r3, r6
 8010860:	432c      	orrs	r4, r5
 8010862:	40d3      	lsrs	r3, r2
 8010864:	6004      	str	r4, [r0, #0]
 8010866:	f840 3f04 	str.w	r3, [r0, #4]!
 801086a:	4288      	cmp	r0, r1
 801086c:	d3f4      	bcc.n	8010858 <L_shift+0xc>
 801086e:	bd70      	pop	{r4, r5, r6, pc}

08010870 <__match>:
 8010870:	b530      	push	{r4, r5, lr}
 8010872:	6803      	ldr	r3, [r0, #0]
 8010874:	3301      	adds	r3, #1
 8010876:	f811 4b01 	ldrb.w	r4, [r1], #1
 801087a:	b914      	cbnz	r4, 8010882 <__match+0x12>
 801087c:	6003      	str	r3, [r0, #0]
 801087e:	2001      	movs	r0, #1
 8010880:	bd30      	pop	{r4, r5, pc}
 8010882:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010886:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801088a:	2d19      	cmp	r5, #25
 801088c:	bf98      	it	ls
 801088e:	3220      	addls	r2, #32
 8010890:	42a2      	cmp	r2, r4
 8010892:	d0f0      	beq.n	8010876 <__match+0x6>
 8010894:	2000      	movs	r0, #0
 8010896:	e7f3      	b.n	8010880 <__match+0x10>

08010898 <__hexnan>:
 8010898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801089c:	680b      	ldr	r3, [r1, #0]
 801089e:	6801      	ldr	r1, [r0, #0]
 80108a0:	115e      	asrs	r6, r3, #5
 80108a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80108a6:	f013 031f 	ands.w	r3, r3, #31
 80108aa:	b087      	sub	sp, #28
 80108ac:	bf18      	it	ne
 80108ae:	3604      	addne	r6, #4
 80108b0:	2500      	movs	r5, #0
 80108b2:	1f37      	subs	r7, r6, #4
 80108b4:	4682      	mov	sl, r0
 80108b6:	4690      	mov	r8, r2
 80108b8:	9301      	str	r3, [sp, #4]
 80108ba:	f846 5c04 	str.w	r5, [r6, #-4]
 80108be:	46b9      	mov	r9, r7
 80108c0:	463c      	mov	r4, r7
 80108c2:	9502      	str	r5, [sp, #8]
 80108c4:	46ab      	mov	fp, r5
 80108c6:	784a      	ldrb	r2, [r1, #1]
 80108c8:	1c4b      	adds	r3, r1, #1
 80108ca:	9303      	str	r3, [sp, #12]
 80108cc:	b342      	cbz	r2, 8010920 <__hexnan+0x88>
 80108ce:	4610      	mov	r0, r2
 80108d0:	9105      	str	r1, [sp, #20]
 80108d2:	9204      	str	r2, [sp, #16]
 80108d4:	f7ff fd94 	bl	8010400 <__hexdig_fun>
 80108d8:	2800      	cmp	r0, #0
 80108da:	d151      	bne.n	8010980 <__hexnan+0xe8>
 80108dc:	9a04      	ldr	r2, [sp, #16]
 80108de:	9905      	ldr	r1, [sp, #20]
 80108e0:	2a20      	cmp	r2, #32
 80108e2:	d818      	bhi.n	8010916 <__hexnan+0x7e>
 80108e4:	9b02      	ldr	r3, [sp, #8]
 80108e6:	459b      	cmp	fp, r3
 80108e8:	dd13      	ble.n	8010912 <__hexnan+0x7a>
 80108ea:	454c      	cmp	r4, r9
 80108ec:	d206      	bcs.n	80108fc <__hexnan+0x64>
 80108ee:	2d07      	cmp	r5, #7
 80108f0:	dc04      	bgt.n	80108fc <__hexnan+0x64>
 80108f2:	462a      	mov	r2, r5
 80108f4:	4649      	mov	r1, r9
 80108f6:	4620      	mov	r0, r4
 80108f8:	f7ff ffa8 	bl	801084c <L_shift>
 80108fc:	4544      	cmp	r4, r8
 80108fe:	d952      	bls.n	80109a6 <__hexnan+0x10e>
 8010900:	2300      	movs	r3, #0
 8010902:	f1a4 0904 	sub.w	r9, r4, #4
 8010906:	f844 3c04 	str.w	r3, [r4, #-4]
 801090a:	f8cd b008 	str.w	fp, [sp, #8]
 801090e:	464c      	mov	r4, r9
 8010910:	461d      	mov	r5, r3
 8010912:	9903      	ldr	r1, [sp, #12]
 8010914:	e7d7      	b.n	80108c6 <__hexnan+0x2e>
 8010916:	2a29      	cmp	r2, #41	@ 0x29
 8010918:	d157      	bne.n	80109ca <__hexnan+0x132>
 801091a:	3102      	adds	r1, #2
 801091c:	f8ca 1000 	str.w	r1, [sl]
 8010920:	f1bb 0f00 	cmp.w	fp, #0
 8010924:	d051      	beq.n	80109ca <__hexnan+0x132>
 8010926:	454c      	cmp	r4, r9
 8010928:	d206      	bcs.n	8010938 <__hexnan+0xa0>
 801092a:	2d07      	cmp	r5, #7
 801092c:	dc04      	bgt.n	8010938 <__hexnan+0xa0>
 801092e:	462a      	mov	r2, r5
 8010930:	4649      	mov	r1, r9
 8010932:	4620      	mov	r0, r4
 8010934:	f7ff ff8a 	bl	801084c <L_shift>
 8010938:	4544      	cmp	r4, r8
 801093a:	d936      	bls.n	80109aa <__hexnan+0x112>
 801093c:	f1a8 0204 	sub.w	r2, r8, #4
 8010940:	4623      	mov	r3, r4
 8010942:	f853 1b04 	ldr.w	r1, [r3], #4
 8010946:	f842 1f04 	str.w	r1, [r2, #4]!
 801094a:	429f      	cmp	r7, r3
 801094c:	d2f9      	bcs.n	8010942 <__hexnan+0xaa>
 801094e:	1b3b      	subs	r3, r7, r4
 8010950:	f023 0303 	bic.w	r3, r3, #3
 8010954:	3304      	adds	r3, #4
 8010956:	3401      	adds	r4, #1
 8010958:	3e03      	subs	r6, #3
 801095a:	42b4      	cmp	r4, r6
 801095c:	bf88      	it	hi
 801095e:	2304      	movhi	r3, #4
 8010960:	4443      	add	r3, r8
 8010962:	2200      	movs	r2, #0
 8010964:	f843 2b04 	str.w	r2, [r3], #4
 8010968:	429f      	cmp	r7, r3
 801096a:	d2fb      	bcs.n	8010964 <__hexnan+0xcc>
 801096c:	683b      	ldr	r3, [r7, #0]
 801096e:	b91b      	cbnz	r3, 8010978 <__hexnan+0xe0>
 8010970:	4547      	cmp	r7, r8
 8010972:	d128      	bne.n	80109c6 <__hexnan+0x12e>
 8010974:	2301      	movs	r3, #1
 8010976:	603b      	str	r3, [r7, #0]
 8010978:	2005      	movs	r0, #5
 801097a:	b007      	add	sp, #28
 801097c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010980:	3501      	adds	r5, #1
 8010982:	2d08      	cmp	r5, #8
 8010984:	f10b 0b01 	add.w	fp, fp, #1
 8010988:	dd06      	ble.n	8010998 <__hexnan+0x100>
 801098a:	4544      	cmp	r4, r8
 801098c:	d9c1      	bls.n	8010912 <__hexnan+0x7a>
 801098e:	2300      	movs	r3, #0
 8010990:	f844 3c04 	str.w	r3, [r4, #-4]
 8010994:	2501      	movs	r5, #1
 8010996:	3c04      	subs	r4, #4
 8010998:	6822      	ldr	r2, [r4, #0]
 801099a:	f000 000f 	and.w	r0, r0, #15
 801099e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80109a2:	6020      	str	r0, [r4, #0]
 80109a4:	e7b5      	b.n	8010912 <__hexnan+0x7a>
 80109a6:	2508      	movs	r5, #8
 80109a8:	e7b3      	b.n	8010912 <__hexnan+0x7a>
 80109aa:	9b01      	ldr	r3, [sp, #4]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d0dd      	beq.n	801096c <__hexnan+0xd4>
 80109b0:	f1c3 0320 	rsb	r3, r3, #32
 80109b4:	f04f 32ff 	mov.w	r2, #4294967295
 80109b8:	40da      	lsrs	r2, r3
 80109ba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80109be:	4013      	ands	r3, r2
 80109c0:	f846 3c04 	str.w	r3, [r6, #-4]
 80109c4:	e7d2      	b.n	801096c <__hexnan+0xd4>
 80109c6:	3f04      	subs	r7, #4
 80109c8:	e7d0      	b.n	801096c <__hexnan+0xd4>
 80109ca:	2004      	movs	r0, #4
 80109cc:	e7d5      	b.n	801097a <__hexnan+0xe2>
	...

080109d0 <malloc>:
 80109d0:	4b02      	ldr	r3, [pc, #8]	@ (80109dc <malloc+0xc>)
 80109d2:	4601      	mov	r1, r0
 80109d4:	6818      	ldr	r0, [r3, #0]
 80109d6:	f000 b825 	b.w	8010a24 <_malloc_r>
 80109da:	bf00      	nop
 80109dc:	20000198 	.word	0x20000198

080109e0 <sbrk_aligned>:
 80109e0:	b570      	push	{r4, r5, r6, lr}
 80109e2:	4e0f      	ldr	r6, [pc, #60]	@ (8010a20 <sbrk_aligned+0x40>)
 80109e4:	460c      	mov	r4, r1
 80109e6:	6831      	ldr	r1, [r6, #0]
 80109e8:	4605      	mov	r5, r0
 80109ea:	b911      	cbnz	r1, 80109f2 <sbrk_aligned+0x12>
 80109ec:	f001 f822 	bl	8011a34 <_sbrk_r>
 80109f0:	6030      	str	r0, [r6, #0]
 80109f2:	4621      	mov	r1, r4
 80109f4:	4628      	mov	r0, r5
 80109f6:	f001 f81d 	bl	8011a34 <_sbrk_r>
 80109fa:	1c43      	adds	r3, r0, #1
 80109fc:	d103      	bne.n	8010a06 <sbrk_aligned+0x26>
 80109fe:	f04f 34ff 	mov.w	r4, #4294967295
 8010a02:	4620      	mov	r0, r4
 8010a04:	bd70      	pop	{r4, r5, r6, pc}
 8010a06:	1cc4      	adds	r4, r0, #3
 8010a08:	f024 0403 	bic.w	r4, r4, #3
 8010a0c:	42a0      	cmp	r0, r4
 8010a0e:	d0f8      	beq.n	8010a02 <sbrk_aligned+0x22>
 8010a10:	1a21      	subs	r1, r4, r0
 8010a12:	4628      	mov	r0, r5
 8010a14:	f001 f80e 	bl	8011a34 <_sbrk_r>
 8010a18:	3001      	adds	r0, #1
 8010a1a:	d1f2      	bne.n	8010a02 <sbrk_aligned+0x22>
 8010a1c:	e7ef      	b.n	80109fe <sbrk_aligned+0x1e>
 8010a1e:	bf00      	nop
 8010a20:	20003cc8 	.word	0x20003cc8

08010a24 <_malloc_r>:
 8010a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a28:	1ccd      	adds	r5, r1, #3
 8010a2a:	f025 0503 	bic.w	r5, r5, #3
 8010a2e:	3508      	adds	r5, #8
 8010a30:	2d0c      	cmp	r5, #12
 8010a32:	bf38      	it	cc
 8010a34:	250c      	movcc	r5, #12
 8010a36:	2d00      	cmp	r5, #0
 8010a38:	4606      	mov	r6, r0
 8010a3a:	db01      	blt.n	8010a40 <_malloc_r+0x1c>
 8010a3c:	42a9      	cmp	r1, r5
 8010a3e:	d904      	bls.n	8010a4a <_malloc_r+0x26>
 8010a40:	230c      	movs	r3, #12
 8010a42:	6033      	str	r3, [r6, #0]
 8010a44:	2000      	movs	r0, #0
 8010a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010b20 <_malloc_r+0xfc>
 8010a4e:	f000 f87b 	bl	8010b48 <__malloc_lock>
 8010a52:	f8d8 3000 	ldr.w	r3, [r8]
 8010a56:	461c      	mov	r4, r3
 8010a58:	bb44      	cbnz	r4, 8010aac <_malloc_r+0x88>
 8010a5a:	4629      	mov	r1, r5
 8010a5c:	4630      	mov	r0, r6
 8010a5e:	f7ff ffbf 	bl	80109e0 <sbrk_aligned>
 8010a62:	1c43      	adds	r3, r0, #1
 8010a64:	4604      	mov	r4, r0
 8010a66:	d158      	bne.n	8010b1a <_malloc_r+0xf6>
 8010a68:	f8d8 4000 	ldr.w	r4, [r8]
 8010a6c:	4627      	mov	r7, r4
 8010a6e:	2f00      	cmp	r7, #0
 8010a70:	d143      	bne.n	8010afa <_malloc_r+0xd6>
 8010a72:	2c00      	cmp	r4, #0
 8010a74:	d04b      	beq.n	8010b0e <_malloc_r+0xea>
 8010a76:	6823      	ldr	r3, [r4, #0]
 8010a78:	4639      	mov	r1, r7
 8010a7a:	4630      	mov	r0, r6
 8010a7c:	eb04 0903 	add.w	r9, r4, r3
 8010a80:	f000 ffd8 	bl	8011a34 <_sbrk_r>
 8010a84:	4581      	cmp	r9, r0
 8010a86:	d142      	bne.n	8010b0e <_malloc_r+0xea>
 8010a88:	6821      	ldr	r1, [r4, #0]
 8010a8a:	1a6d      	subs	r5, r5, r1
 8010a8c:	4629      	mov	r1, r5
 8010a8e:	4630      	mov	r0, r6
 8010a90:	f7ff ffa6 	bl	80109e0 <sbrk_aligned>
 8010a94:	3001      	adds	r0, #1
 8010a96:	d03a      	beq.n	8010b0e <_malloc_r+0xea>
 8010a98:	6823      	ldr	r3, [r4, #0]
 8010a9a:	442b      	add	r3, r5
 8010a9c:	6023      	str	r3, [r4, #0]
 8010a9e:	f8d8 3000 	ldr.w	r3, [r8]
 8010aa2:	685a      	ldr	r2, [r3, #4]
 8010aa4:	bb62      	cbnz	r2, 8010b00 <_malloc_r+0xdc>
 8010aa6:	f8c8 7000 	str.w	r7, [r8]
 8010aaa:	e00f      	b.n	8010acc <_malloc_r+0xa8>
 8010aac:	6822      	ldr	r2, [r4, #0]
 8010aae:	1b52      	subs	r2, r2, r5
 8010ab0:	d420      	bmi.n	8010af4 <_malloc_r+0xd0>
 8010ab2:	2a0b      	cmp	r2, #11
 8010ab4:	d917      	bls.n	8010ae6 <_malloc_r+0xc2>
 8010ab6:	1961      	adds	r1, r4, r5
 8010ab8:	42a3      	cmp	r3, r4
 8010aba:	6025      	str	r5, [r4, #0]
 8010abc:	bf18      	it	ne
 8010abe:	6059      	strne	r1, [r3, #4]
 8010ac0:	6863      	ldr	r3, [r4, #4]
 8010ac2:	bf08      	it	eq
 8010ac4:	f8c8 1000 	streq.w	r1, [r8]
 8010ac8:	5162      	str	r2, [r4, r5]
 8010aca:	604b      	str	r3, [r1, #4]
 8010acc:	4630      	mov	r0, r6
 8010ace:	f000 f841 	bl	8010b54 <__malloc_unlock>
 8010ad2:	f104 000b 	add.w	r0, r4, #11
 8010ad6:	1d23      	adds	r3, r4, #4
 8010ad8:	f020 0007 	bic.w	r0, r0, #7
 8010adc:	1ac2      	subs	r2, r0, r3
 8010ade:	bf1c      	itt	ne
 8010ae0:	1a1b      	subne	r3, r3, r0
 8010ae2:	50a3      	strne	r3, [r4, r2]
 8010ae4:	e7af      	b.n	8010a46 <_malloc_r+0x22>
 8010ae6:	6862      	ldr	r2, [r4, #4]
 8010ae8:	42a3      	cmp	r3, r4
 8010aea:	bf0c      	ite	eq
 8010aec:	f8c8 2000 	streq.w	r2, [r8]
 8010af0:	605a      	strne	r2, [r3, #4]
 8010af2:	e7eb      	b.n	8010acc <_malloc_r+0xa8>
 8010af4:	4623      	mov	r3, r4
 8010af6:	6864      	ldr	r4, [r4, #4]
 8010af8:	e7ae      	b.n	8010a58 <_malloc_r+0x34>
 8010afa:	463c      	mov	r4, r7
 8010afc:	687f      	ldr	r7, [r7, #4]
 8010afe:	e7b6      	b.n	8010a6e <_malloc_r+0x4a>
 8010b00:	461a      	mov	r2, r3
 8010b02:	685b      	ldr	r3, [r3, #4]
 8010b04:	42a3      	cmp	r3, r4
 8010b06:	d1fb      	bne.n	8010b00 <_malloc_r+0xdc>
 8010b08:	2300      	movs	r3, #0
 8010b0a:	6053      	str	r3, [r2, #4]
 8010b0c:	e7de      	b.n	8010acc <_malloc_r+0xa8>
 8010b0e:	230c      	movs	r3, #12
 8010b10:	6033      	str	r3, [r6, #0]
 8010b12:	4630      	mov	r0, r6
 8010b14:	f000 f81e 	bl	8010b54 <__malloc_unlock>
 8010b18:	e794      	b.n	8010a44 <_malloc_r+0x20>
 8010b1a:	6005      	str	r5, [r0, #0]
 8010b1c:	e7d6      	b.n	8010acc <_malloc_r+0xa8>
 8010b1e:	bf00      	nop
 8010b20:	20003ccc 	.word	0x20003ccc

08010b24 <__ascii_mbtowc>:
 8010b24:	b082      	sub	sp, #8
 8010b26:	b901      	cbnz	r1, 8010b2a <__ascii_mbtowc+0x6>
 8010b28:	a901      	add	r1, sp, #4
 8010b2a:	b142      	cbz	r2, 8010b3e <__ascii_mbtowc+0x1a>
 8010b2c:	b14b      	cbz	r3, 8010b42 <__ascii_mbtowc+0x1e>
 8010b2e:	7813      	ldrb	r3, [r2, #0]
 8010b30:	600b      	str	r3, [r1, #0]
 8010b32:	7812      	ldrb	r2, [r2, #0]
 8010b34:	1e10      	subs	r0, r2, #0
 8010b36:	bf18      	it	ne
 8010b38:	2001      	movne	r0, #1
 8010b3a:	b002      	add	sp, #8
 8010b3c:	4770      	bx	lr
 8010b3e:	4610      	mov	r0, r2
 8010b40:	e7fb      	b.n	8010b3a <__ascii_mbtowc+0x16>
 8010b42:	f06f 0001 	mvn.w	r0, #1
 8010b46:	e7f8      	b.n	8010b3a <__ascii_mbtowc+0x16>

08010b48 <__malloc_lock>:
 8010b48:	4801      	ldr	r0, [pc, #4]	@ (8010b50 <__malloc_lock+0x8>)
 8010b4a:	f7fe bd34 	b.w	800f5b6 <__retarget_lock_acquire_recursive>
 8010b4e:	bf00      	nop
 8010b50:	20003cc4 	.word	0x20003cc4

08010b54 <__malloc_unlock>:
 8010b54:	4801      	ldr	r0, [pc, #4]	@ (8010b5c <__malloc_unlock+0x8>)
 8010b56:	f7fe bd2f 	b.w	800f5b8 <__retarget_lock_release_recursive>
 8010b5a:	bf00      	nop
 8010b5c:	20003cc4 	.word	0x20003cc4

08010b60 <_Balloc>:
 8010b60:	b570      	push	{r4, r5, r6, lr}
 8010b62:	69c6      	ldr	r6, [r0, #28]
 8010b64:	4604      	mov	r4, r0
 8010b66:	460d      	mov	r5, r1
 8010b68:	b976      	cbnz	r6, 8010b88 <_Balloc+0x28>
 8010b6a:	2010      	movs	r0, #16
 8010b6c:	f7ff ff30 	bl	80109d0 <malloc>
 8010b70:	4602      	mov	r2, r0
 8010b72:	61e0      	str	r0, [r4, #28]
 8010b74:	b920      	cbnz	r0, 8010b80 <_Balloc+0x20>
 8010b76:	4b18      	ldr	r3, [pc, #96]	@ (8010bd8 <_Balloc+0x78>)
 8010b78:	4818      	ldr	r0, [pc, #96]	@ (8010bdc <_Balloc+0x7c>)
 8010b7a:	216b      	movs	r1, #107	@ 0x6b
 8010b7c:	f7fe fd3a 	bl	800f5f4 <__assert_func>
 8010b80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010b84:	6006      	str	r6, [r0, #0]
 8010b86:	60c6      	str	r6, [r0, #12]
 8010b88:	69e6      	ldr	r6, [r4, #28]
 8010b8a:	68f3      	ldr	r3, [r6, #12]
 8010b8c:	b183      	cbz	r3, 8010bb0 <_Balloc+0x50>
 8010b8e:	69e3      	ldr	r3, [r4, #28]
 8010b90:	68db      	ldr	r3, [r3, #12]
 8010b92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010b96:	b9b8      	cbnz	r0, 8010bc8 <_Balloc+0x68>
 8010b98:	2101      	movs	r1, #1
 8010b9a:	fa01 f605 	lsl.w	r6, r1, r5
 8010b9e:	1d72      	adds	r2, r6, #5
 8010ba0:	0092      	lsls	r2, r2, #2
 8010ba2:	4620      	mov	r0, r4
 8010ba4:	f000 ff5d 	bl	8011a62 <_calloc_r>
 8010ba8:	b160      	cbz	r0, 8010bc4 <_Balloc+0x64>
 8010baa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010bae:	e00e      	b.n	8010bce <_Balloc+0x6e>
 8010bb0:	2221      	movs	r2, #33	@ 0x21
 8010bb2:	2104      	movs	r1, #4
 8010bb4:	4620      	mov	r0, r4
 8010bb6:	f000 ff54 	bl	8011a62 <_calloc_r>
 8010bba:	69e3      	ldr	r3, [r4, #28]
 8010bbc:	60f0      	str	r0, [r6, #12]
 8010bbe:	68db      	ldr	r3, [r3, #12]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d1e4      	bne.n	8010b8e <_Balloc+0x2e>
 8010bc4:	2000      	movs	r0, #0
 8010bc6:	bd70      	pop	{r4, r5, r6, pc}
 8010bc8:	6802      	ldr	r2, [r0, #0]
 8010bca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010bce:	2300      	movs	r3, #0
 8010bd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010bd4:	e7f7      	b.n	8010bc6 <_Balloc+0x66>
 8010bd6:	bf00      	nop
 8010bd8:	080132d1 	.word	0x080132d1
 8010bdc:	0801345c 	.word	0x0801345c

08010be0 <_Bfree>:
 8010be0:	b570      	push	{r4, r5, r6, lr}
 8010be2:	69c6      	ldr	r6, [r0, #28]
 8010be4:	4605      	mov	r5, r0
 8010be6:	460c      	mov	r4, r1
 8010be8:	b976      	cbnz	r6, 8010c08 <_Bfree+0x28>
 8010bea:	2010      	movs	r0, #16
 8010bec:	f7ff fef0 	bl	80109d0 <malloc>
 8010bf0:	4602      	mov	r2, r0
 8010bf2:	61e8      	str	r0, [r5, #28]
 8010bf4:	b920      	cbnz	r0, 8010c00 <_Bfree+0x20>
 8010bf6:	4b09      	ldr	r3, [pc, #36]	@ (8010c1c <_Bfree+0x3c>)
 8010bf8:	4809      	ldr	r0, [pc, #36]	@ (8010c20 <_Bfree+0x40>)
 8010bfa:	218f      	movs	r1, #143	@ 0x8f
 8010bfc:	f7fe fcfa 	bl	800f5f4 <__assert_func>
 8010c00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010c04:	6006      	str	r6, [r0, #0]
 8010c06:	60c6      	str	r6, [r0, #12]
 8010c08:	b13c      	cbz	r4, 8010c1a <_Bfree+0x3a>
 8010c0a:	69eb      	ldr	r3, [r5, #28]
 8010c0c:	6862      	ldr	r2, [r4, #4]
 8010c0e:	68db      	ldr	r3, [r3, #12]
 8010c10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010c14:	6021      	str	r1, [r4, #0]
 8010c16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010c1a:	bd70      	pop	{r4, r5, r6, pc}
 8010c1c:	080132d1 	.word	0x080132d1
 8010c20:	0801345c 	.word	0x0801345c

08010c24 <__multadd>:
 8010c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c28:	690d      	ldr	r5, [r1, #16]
 8010c2a:	4607      	mov	r7, r0
 8010c2c:	460c      	mov	r4, r1
 8010c2e:	461e      	mov	r6, r3
 8010c30:	f101 0c14 	add.w	ip, r1, #20
 8010c34:	2000      	movs	r0, #0
 8010c36:	f8dc 3000 	ldr.w	r3, [ip]
 8010c3a:	b299      	uxth	r1, r3
 8010c3c:	fb02 6101 	mla	r1, r2, r1, r6
 8010c40:	0c1e      	lsrs	r6, r3, #16
 8010c42:	0c0b      	lsrs	r3, r1, #16
 8010c44:	fb02 3306 	mla	r3, r2, r6, r3
 8010c48:	b289      	uxth	r1, r1
 8010c4a:	3001      	adds	r0, #1
 8010c4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010c50:	4285      	cmp	r5, r0
 8010c52:	f84c 1b04 	str.w	r1, [ip], #4
 8010c56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010c5a:	dcec      	bgt.n	8010c36 <__multadd+0x12>
 8010c5c:	b30e      	cbz	r6, 8010ca2 <__multadd+0x7e>
 8010c5e:	68a3      	ldr	r3, [r4, #8]
 8010c60:	42ab      	cmp	r3, r5
 8010c62:	dc19      	bgt.n	8010c98 <__multadd+0x74>
 8010c64:	6861      	ldr	r1, [r4, #4]
 8010c66:	4638      	mov	r0, r7
 8010c68:	3101      	adds	r1, #1
 8010c6a:	f7ff ff79 	bl	8010b60 <_Balloc>
 8010c6e:	4680      	mov	r8, r0
 8010c70:	b928      	cbnz	r0, 8010c7e <__multadd+0x5a>
 8010c72:	4602      	mov	r2, r0
 8010c74:	4b0c      	ldr	r3, [pc, #48]	@ (8010ca8 <__multadd+0x84>)
 8010c76:	480d      	ldr	r0, [pc, #52]	@ (8010cac <__multadd+0x88>)
 8010c78:	21ba      	movs	r1, #186	@ 0xba
 8010c7a:	f7fe fcbb 	bl	800f5f4 <__assert_func>
 8010c7e:	6922      	ldr	r2, [r4, #16]
 8010c80:	3202      	adds	r2, #2
 8010c82:	f104 010c 	add.w	r1, r4, #12
 8010c86:	0092      	lsls	r2, r2, #2
 8010c88:	300c      	adds	r0, #12
 8010c8a:	f7fe fc96 	bl	800f5ba <memcpy>
 8010c8e:	4621      	mov	r1, r4
 8010c90:	4638      	mov	r0, r7
 8010c92:	f7ff ffa5 	bl	8010be0 <_Bfree>
 8010c96:	4644      	mov	r4, r8
 8010c98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010c9c:	3501      	adds	r5, #1
 8010c9e:	615e      	str	r6, [r3, #20]
 8010ca0:	6125      	str	r5, [r4, #16]
 8010ca2:	4620      	mov	r0, r4
 8010ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ca8:	080133eb 	.word	0x080133eb
 8010cac:	0801345c 	.word	0x0801345c

08010cb0 <__s2b>:
 8010cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010cb4:	460c      	mov	r4, r1
 8010cb6:	4615      	mov	r5, r2
 8010cb8:	461f      	mov	r7, r3
 8010cba:	2209      	movs	r2, #9
 8010cbc:	3308      	adds	r3, #8
 8010cbe:	4606      	mov	r6, r0
 8010cc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8010cc4:	2100      	movs	r1, #0
 8010cc6:	2201      	movs	r2, #1
 8010cc8:	429a      	cmp	r2, r3
 8010cca:	db09      	blt.n	8010ce0 <__s2b+0x30>
 8010ccc:	4630      	mov	r0, r6
 8010cce:	f7ff ff47 	bl	8010b60 <_Balloc>
 8010cd2:	b940      	cbnz	r0, 8010ce6 <__s2b+0x36>
 8010cd4:	4602      	mov	r2, r0
 8010cd6:	4b19      	ldr	r3, [pc, #100]	@ (8010d3c <__s2b+0x8c>)
 8010cd8:	4819      	ldr	r0, [pc, #100]	@ (8010d40 <__s2b+0x90>)
 8010cda:	21d3      	movs	r1, #211	@ 0xd3
 8010cdc:	f7fe fc8a 	bl	800f5f4 <__assert_func>
 8010ce0:	0052      	lsls	r2, r2, #1
 8010ce2:	3101      	adds	r1, #1
 8010ce4:	e7f0      	b.n	8010cc8 <__s2b+0x18>
 8010ce6:	9b08      	ldr	r3, [sp, #32]
 8010ce8:	6143      	str	r3, [r0, #20]
 8010cea:	2d09      	cmp	r5, #9
 8010cec:	f04f 0301 	mov.w	r3, #1
 8010cf0:	6103      	str	r3, [r0, #16]
 8010cf2:	dd16      	ble.n	8010d22 <__s2b+0x72>
 8010cf4:	f104 0909 	add.w	r9, r4, #9
 8010cf8:	46c8      	mov	r8, r9
 8010cfa:	442c      	add	r4, r5
 8010cfc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010d00:	4601      	mov	r1, r0
 8010d02:	3b30      	subs	r3, #48	@ 0x30
 8010d04:	220a      	movs	r2, #10
 8010d06:	4630      	mov	r0, r6
 8010d08:	f7ff ff8c 	bl	8010c24 <__multadd>
 8010d0c:	45a0      	cmp	r8, r4
 8010d0e:	d1f5      	bne.n	8010cfc <__s2b+0x4c>
 8010d10:	f1a5 0408 	sub.w	r4, r5, #8
 8010d14:	444c      	add	r4, r9
 8010d16:	1b2d      	subs	r5, r5, r4
 8010d18:	1963      	adds	r3, r4, r5
 8010d1a:	42bb      	cmp	r3, r7
 8010d1c:	db04      	blt.n	8010d28 <__s2b+0x78>
 8010d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d22:	340a      	adds	r4, #10
 8010d24:	2509      	movs	r5, #9
 8010d26:	e7f6      	b.n	8010d16 <__s2b+0x66>
 8010d28:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010d2c:	4601      	mov	r1, r0
 8010d2e:	3b30      	subs	r3, #48	@ 0x30
 8010d30:	220a      	movs	r2, #10
 8010d32:	4630      	mov	r0, r6
 8010d34:	f7ff ff76 	bl	8010c24 <__multadd>
 8010d38:	e7ee      	b.n	8010d18 <__s2b+0x68>
 8010d3a:	bf00      	nop
 8010d3c:	080133eb 	.word	0x080133eb
 8010d40:	0801345c 	.word	0x0801345c

08010d44 <__hi0bits>:
 8010d44:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010d48:	4603      	mov	r3, r0
 8010d4a:	bf36      	itet	cc
 8010d4c:	0403      	lslcc	r3, r0, #16
 8010d4e:	2000      	movcs	r0, #0
 8010d50:	2010      	movcc	r0, #16
 8010d52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010d56:	bf3c      	itt	cc
 8010d58:	021b      	lslcc	r3, r3, #8
 8010d5a:	3008      	addcc	r0, #8
 8010d5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010d60:	bf3c      	itt	cc
 8010d62:	011b      	lslcc	r3, r3, #4
 8010d64:	3004      	addcc	r0, #4
 8010d66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010d6a:	bf3c      	itt	cc
 8010d6c:	009b      	lslcc	r3, r3, #2
 8010d6e:	3002      	addcc	r0, #2
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	db05      	blt.n	8010d80 <__hi0bits+0x3c>
 8010d74:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010d78:	f100 0001 	add.w	r0, r0, #1
 8010d7c:	bf08      	it	eq
 8010d7e:	2020      	moveq	r0, #32
 8010d80:	4770      	bx	lr

08010d82 <__lo0bits>:
 8010d82:	6803      	ldr	r3, [r0, #0]
 8010d84:	4602      	mov	r2, r0
 8010d86:	f013 0007 	ands.w	r0, r3, #7
 8010d8a:	d00b      	beq.n	8010da4 <__lo0bits+0x22>
 8010d8c:	07d9      	lsls	r1, r3, #31
 8010d8e:	d421      	bmi.n	8010dd4 <__lo0bits+0x52>
 8010d90:	0798      	lsls	r0, r3, #30
 8010d92:	bf49      	itett	mi
 8010d94:	085b      	lsrmi	r3, r3, #1
 8010d96:	089b      	lsrpl	r3, r3, #2
 8010d98:	2001      	movmi	r0, #1
 8010d9a:	6013      	strmi	r3, [r2, #0]
 8010d9c:	bf5c      	itt	pl
 8010d9e:	6013      	strpl	r3, [r2, #0]
 8010da0:	2002      	movpl	r0, #2
 8010da2:	4770      	bx	lr
 8010da4:	b299      	uxth	r1, r3
 8010da6:	b909      	cbnz	r1, 8010dac <__lo0bits+0x2a>
 8010da8:	0c1b      	lsrs	r3, r3, #16
 8010daa:	2010      	movs	r0, #16
 8010dac:	b2d9      	uxtb	r1, r3
 8010dae:	b909      	cbnz	r1, 8010db4 <__lo0bits+0x32>
 8010db0:	3008      	adds	r0, #8
 8010db2:	0a1b      	lsrs	r3, r3, #8
 8010db4:	0719      	lsls	r1, r3, #28
 8010db6:	bf04      	itt	eq
 8010db8:	091b      	lsreq	r3, r3, #4
 8010dba:	3004      	addeq	r0, #4
 8010dbc:	0799      	lsls	r1, r3, #30
 8010dbe:	bf04      	itt	eq
 8010dc0:	089b      	lsreq	r3, r3, #2
 8010dc2:	3002      	addeq	r0, #2
 8010dc4:	07d9      	lsls	r1, r3, #31
 8010dc6:	d403      	bmi.n	8010dd0 <__lo0bits+0x4e>
 8010dc8:	085b      	lsrs	r3, r3, #1
 8010dca:	f100 0001 	add.w	r0, r0, #1
 8010dce:	d003      	beq.n	8010dd8 <__lo0bits+0x56>
 8010dd0:	6013      	str	r3, [r2, #0]
 8010dd2:	4770      	bx	lr
 8010dd4:	2000      	movs	r0, #0
 8010dd6:	4770      	bx	lr
 8010dd8:	2020      	movs	r0, #32
 8010dda:	4770      	bx	lr

08010ddc <__i2b>:
 8010ddc:	b510      	push	{r4, lr}
 8010dde:	460c      	mov	r4, r1
 8010de0:	2101      	movs	r1, #1
 8010de2:	f7ff febd 	bl	8010b60 <_Balloc>
 8010de6:	4602      	mov	r2, r0
 8010de8:	b928      	cbnz	r0, 8010df6 <__i2b+0x1a>
 8010dea:	4b05      	ldr	r3, [pc, #20]	@ (8010e00 <__i2b+0x24>)
 8010dec:	4805      	ldr	r0, [pc, #20]	@ (8010e04 <__i2b+0x28>)
 8010dee:	f240 1145 	movw	r1, #325	@ 0x145
 8010df2:	f7fe fbff 	bl	800f5f4 <__assert_func>
 8010df6:	2301      	movs	r3, #1
 8010df8:	6144      	str	r4, [r0, #20]
 8010dfa:	6103      	str	r3, [r0, #16]
 8010dfc:	bd10      	pop	{r4, pc}
 8010dfe:	bf00      	nop
 8010e00:	080133eb 	.word	0x080133eb
 8010e04:	0801345c 	.word	0x0801345c

08010e08 <__multiply>:
 8010e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e0c:	4614      	mov	r4, r2
 8010e0e:	690a      	ldr	r2, [r1, #16]
 8010e10:	6923      	ldr	r3, [r4, #16]
 8010e12:	429a      	cmp	r2, r3
 8010e14:	bfa8      	it	ge
 8010e16:	4623      	movge	r3, r4
 8010e18:	460f      	mov	r7, r1
 8010e1a:	bfa4      	itt	ge
 8010e1c:	460c      	movge	r4, r1
 8010e1e:	461f      	movge	r7, r3
 8010e20:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010e24:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010e28:	68a3      	ldr	r3, [r4, #8]
 8010e2a:	6861      	ldr	r1, [r4, #4]
 8010e2c:	eb0a 0609 	add.w	r6, sl, r9
 8010e30:	42b3      	cmp	r3, r6
 8010e32:	b085      	sub	sp, #20
 8010e34:	bfb8      	it	lt
 8010e36:	3101      	addlt	r1, #1
 8010e38:	f7ff fe92 	bl	8010b60 <_Balloc>
 8010e3c:	b930      	cbnz	r0, 8010e4c <__multiply+0x44>
 8010e3e:	4602      	mov	r2, r0
 8010e40:	4b44      	ldr	r3, [pc, #272]	@ (8010f54 <__multiply+0x14c>)
 8010e42:	4845      	ldr	r0, [pc, #276]	@ (8010f58 <__multiply+0x150>)
 8010e44:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010e48:	f7fe fbd4 	bl	800f5f4 <__assert_func>
 8010e4c:	f100 0514 	add.w	r5, r0, #20
 8010e50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010e54:	462b      	mov	r3, r5
 8010e56:	2200      	movs	r2, #0
 8010e58:	4543      	cmp	r3, r8
 8010e5a:	d321      	bcc.n	8010ea0 <__multiply+0x98>
 8010e5c:	f107 0114 	add.w	r1, r7, #20
 8010e60:	f104 0214 	add.w	r2, r4, #20
 8010e64:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010e68:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010e6c:	9302      	str	r3, [sp, #8]
 8010e6e:	1b13      	subs	r3, r2, r4
 8010e70:	3b15      	subs	r3, #21
 8010e72:	f023 0303 	bic.w	r3, r3, #3
 8010e76:	3304      	adds	r3, #4
 8010e78:	f104 0715 	add.w	r7, r4, #21
 8010e7c:	42ba      	cmp	r2, r7
 8010e7e:	bf38      	it	cc
 8010e80:	2304      	movcc	r3, #4
 8010e82:	9301      	str	r3, [sp, #4]
 8010e84:	9b02      	ldr	r3, [sp, #8]
 8010e86:	9103      	str	r1, [sp, #12]
 8010e88:	428b      	cmp	r3, r1
 8010e8a:	d80c      	bhi.n	8010ea6 <__multiply+0x9e>
 8010e8c:	2e00      	cmp	r6, #0
 8010e8e:	dd03      	ble.n	8010e98 <__multiply+0x90>
 8010e90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d05b      	beq.n	8010f50 <__multiply+0x148>
 8010e98:	6106      	str	r6, [r0, #16]
 8010e9a:	b005      	add	sp, #20
 8010e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ea0:	f843 2b04 	str.w	r2, [r3], #4
 8010ea4:	e7d8      	b.n	8010e58 <__multiply+0x50>
 8010ea6:	f8b1 a000 	ldrh.w	sl, [r1]
 8010eaa:	f1ba 0f00 	cmp.w	sl, #0
 8010eae:	d024      	beq.n	8010efa <__multiply+0xf2>
 8010eb0:	f104 0e14 	add.w	lr, r4, #20
 8010eb4:	46a9      	mov	r9, r5
 8010eb6:	f04f 0c00 	mov.w	ip, #0
 8010eba:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010ebe:	f8d9 3000 	ldr.w	r3, [r9]
 8010ec2:	fa1f fb87 	uxth.w	fp, r7
 8010ec6:	b29b      	uxth	r3, r3
 8010ec8:	fb0a 330b 	mla	r3, sl, fp, r3
 8010ecc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010ed0:	f8d9 7000 	ldr.w	r7, [r9]
 8010ed4:	4463      	add	r3, ip
 8010ed6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010eda:	fb0a c70b 	mla	r7, sl, fp, ip
 8010ede:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010ee2:	b29b      	uxth	r3, r3
 8010ee4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010ee8:	4572      	cmp	r2, lr
 8010eea:	f849 3b04 	str.w	r3, [r9], #4
 8010eee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010ef2:	d8e2      	bhi.n	8010eba <__multiply+0xb2>
 8010ef4:	9b01      	ldr	r3, [sp, #4]
 8010ef6:	f845 c003 	str.w	ip, [r5, r3]
 8010efa:	9b03      	ldr	r3, [sp, #12]
 8010efc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010f00:	3104      	adds	r1, #4
 8010f02:	f1b9 0f00 	cmp.w	r9, #0
 8010f06:	d021      	beq.n	8010f4c <__multiply+0x144>
 8010f08:	682b      	ldr	r3, [r5, #0]
 8010f0a:	f104 0c14 	add.w	ip, r4, #20
 8010f0e:	46ae      	mov	lr, r5
 8010f10:	f04f 0a00 	mov.w	sl, #0
 8010f14:	f8bc b000 	ldrh.w	fp, [ip]
 8010f18:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010f1c:	fb09 770b 	mla	r7, r9, fp, r7
 8010f20:	4457      	add	r7, sl
 8010f22:	b29b      	uxth	r3, r3
 8010f24:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010f28:	f84e 3b04 	str.w	r3, [lr], #4
 8010f2c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010f30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010f34:	f8be 3000 	ldrh.w	r3, [lr]
 8010f38:	fb09 330a 	mla	r3, r9, sl, r3
 8010f3c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010f40:	4562      	cmp	r2, ip
 8010f42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010f46:	d8e5      	bhi.n	8010f14 <__multiply+0x10c>
 8010f48:	9f01      	ldr	r7, [sp, #4]
 8010f4a:	51eb      	str	r3, [r5, r7]
 8010f4c:	3504      	adds	r5, #4
 8010f4e:	e799      	b.n	8010e84 <__multiply+0x7c>
 8010f50:	3e01      	subs	r6, #1
 8010f52:	e79b      	b.n	8010e8c <__multiply+0x84>
 8010f54:	080133eb 	.word	0x080133eb
 8010f58:	0801345c 	.word	0x0801345c

08010f5c <__pow5mult>:
 8010f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f60:	4615      	mov	r5, r2
 8010f62:	f012 0203 	ands.w	r2, r2, #3
 8010f66:	4607      	mov	r7, r0
 8010f68:	460e      	mov	r6, r1
 8010f6a:	d007      	beq.n	8010f7c <__pow5mult+0x20>
 8010f6c:	4c25      	ldr	r4, [pc, #148]	@ (8011004 <__pow5mult+0xa8>)
 8010f6e:	3a01      	subs	r2, #1
 8010f70:	2300      	movs	r3, #0
 8010f72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010f76:	f7ff fe55 	bl	8010c24 <__multadd>
 8010f7a:	4606      	mov	r6, r0
 8010f7c:	10ad      	asrs	r5, r5, #2
 8010f7e:	d03d      	beq.n	8010ffc <__pow5mult+0xa0>
 8010f80:	69fc      	ldr	r4, [r7, #28]
 8010f82:	b97c      	cbnz	r4, 8010fa4 <__pow5mult+0x48>
 8010f84:	2010      	movs	r0, #16
 8010f86:	f7ff fd23 	bl	80109d0 <malloc>
 8010f8a:	4602      	mov	r2, r0
 8010f8c:	61f8      	str	r0, [r7, #28]
 8010f8e:	b928      	cbnz	r0, 8010f9c <__pow5mult+0x40>
 8010f90:	4b1d      	ldr	r3, [pc, #116]	@ (8011008 <__pow5mult+0xac>)
 8010f92:	481e      	ldr	r0, [pc, #120]	@ (801100c <__pow5mult+0xb0>)
 8010f94:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010f98:	f7fe fb2c 	bl	800f5f4 <__assert_func>
 8010f9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010fa0:	6004      	str	r4, [r0, #0]
 8010fa2:	60c4      	str	r4, [r0, #12]
 8010fa4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010fa8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010fac:	b94c      	cbnz	r4, 8010fc2 <__pow5mult+0x66>
 8010fae:	f240 2171 	movw	r1, #625	@ 0x271
 8010fb2:	4638      	mov	r0, r7
 8010fb4:	f7ff ff12 	bl	8010ddc <__i2b>
 8010fb8:	2300      	movs	r3, #0
 8010fba:	f8c8 0008 	str.w	r0, [r8, #8]
 8010fbe:	4604      	mov	r4, r0
 8010fc0:	6003      	str	r3, [r0, #0]
 8010fc2:	f04f 0900 	mov.w	r9, #0
 8010fc6:	07eb      	lsls	r3, r5, #31
 8010fc8:	d50a      	bpl.n	8010fe0 <__pow5mult+0x84>
 8010fca:	4631      	mov	r1, r6
 8010fcc:	4622      	mov	r2, r4
 8010fce:	4638      	mov	r0, r7
 8010fd0:	f7ff ff1a 	bl	8010e08 <__multiply>
 8010fd4:	4631      	mov	r1, r6
 8010fd6:	4680      	mov	r8, r0
 8010fd8:	4638      	mov	r0, r7
 8010fda:	f7ff fe01 	bl	8010be0 <_Bfree>
 8010fde:	4646      	mov	r6, r8
 8010fe0:	106d      	asrs	r5, r5, #1
 8010fe2:	d00b      	beq.n	8010ffc <__pow5mult+0xa0>
 8010fe4:	6820      	ldr	r0, [r4, #0]
 8010fe6:	b938      	cbnz	r0, 8010ff8 <__pow5mult+0x9c>
 8010fe8:	4622      	mov	r2, r4
 8010fea:	4621      	mov	r1, r4
 8010fec:	4638      	mov	r0, r7
 8010fee:	f7ff ff0b 	bl	8010e08 <__multiply>
 8010ff2:	6020      	str	r0, [r4, #0]
 8010ff4:	f8c0 9000 	str.w	r9, [r0]
 8010ff8:	4604      	mov	r4, r0
 8010ffa:	e7e4      	b.n	8010fc6 <__pow5mult+0x6a>
 8010ffc:	4630      	mov	r0, r6
 8010ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011002:	bf00      	nop
 8011004:	080134b8 	.word	0x080134b8
 8011008:	080132d1 	.word	0x080132d1
 801100c:	0801345c 	.word	0x0801345c

08011010 <__lshift>:
 8011010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011014:	460c      	mov	r4, r1
 8011016:	6849      	ldr	r1, [r1, #4]
 8011018:	6923      	ldr	r3, [r4, #16]
 801101a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801101e:	68a3      	ldr	r3, [r4, #8]
 8011020:	4607      	mov	r7, r0
 8011022:	4691      	mov	r9, r2
 8011024:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011028:	f108 0601 	add.w	r6, r8, #1
 801102c:	42b3      	cmp	r3, r6
 801102e:	db0b      	blt.n	8011048 <__lshift+0x38>
 8011030:	4638      	mov	r0, r7
 8011032:	f7ff fd95 	bl	8010b60 <_Balloc>
 8011036:	4605      	mov	r5, r0
 8011038:	b948      	cbnz	r0, 801104e <__lshift+0x3e>
 801103a:	4602      	mov	r2, r0
 801103c:	4b28      	ldr	r3, [pc, #160]	@ (80110e0 <__lshift+0xd0>)
 801103e:	4829      	ldr	r0, [pc, #164]	@ (80110e4 <__lshift+0xd4>)
 8011040:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011044:	f7fe fad6 	bl	800f5f4 <__assert_func>
 8011048:	3101      	adds	r1, #1
 801104a:	005b      	lsls	r3, r3, #1
 801104c:	e7ee      	b.n	801102c <__lshift+0x1c>
 801104e:	2300      	movs	r3, #0
 8011050:	f100 0114 	add.w	r1, r0, #20
 8011054:	f100 0210 	add.w	r2, r0, #16
 8011058:	4618      	mov	r0, r3
 801105a:	4553      	cmp	r3, sl
 801105c:	db33      	blt.n	80110c6 <__lshift+0xb6>
 801105e:	6920      	ldr	r0, [r4, #16]
 8011060:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011064:	f104 0314 	add.w	r3, r4, #20
 8011068:	f019 091f 	ands.w	r9, r9, #31
 801106c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011070:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011074:	d02b      	beq.n	80110ce <__lshift+0xbe>
 8011076:	f1c9 0e20 	rsb	lr, r9, #32
 801107a:	468a      	mov	sl, r1
 801107c:	2200      	movs	r2, #0
 801107e:	6818      	ldr	r0, [r3, #0]
 8011080:	fa00 f009 	lsl.w	r0, r0, r9
 8011084:	4310      	orrs	r0, r2
 8011086:	f84a 0b04 	str.w	r0, [sl], #4
 801108a:	f853 2b04 	ldr.w	r2, [r3], #4
 801108e:	459c      	cmp	ip, r3
 8011090:	fa22 f20e 	lsr.w	r2, r2, lr
 8011094:	d8f3      	bhi.n	801107e <__lshift+0x6e>
 8011096:	ebac 0304 	sub.w	r3, ip, r4
 801109a:	3b15      	subs	r3, #21
 801109c:	f023 0303 	bic.w	r3, r3, #3
 80110a0:	3304      	adds	r3, #4
 80110a2:	f104 0015 	add.w	r0, r4, #21
 80110a6:	4584      	cmp	ip, r0
 80110a8:	bf38      	it	cc
 80110aa:	2304      	movcc	r3, #4
 80110ac:	50ca      	str	r2, [r1, r3]
 80110ae:	b10a      	cbz	r2, 80110b4 <__lshift+0xa4>
 80110b0:	f108 0602 	add.w	r6, r8, #2
 80110b4:	3e01      	subs	r6, #1
 80110b6:	4638      	mov	r0, r7
 80110b8:	612e      	str	r6, [r5, #16]
 80110ba:	4621      	mov	r1, r4
 80110bc:	f7ff fd90 	bl	8010be0 <_Bfree>
 80110c0:	4628      	mov	r0, r5
 80110c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80110ca:	3301      	adds	r3, #1
 80110cc:	e7c5      	b.n	801105a <__lshift+0x4a>
 80110ce:	3904      	subs	r1, #4
 80110d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80110d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80110d8:	459c      	cmp	ip, r3
 80110da:	d8f9      	bhi.n	80110d0 <__lshift+0xc0>
 80110dc:	e7ea      	b.n	80110b4 <__lshift+0xa4>
 80110de:	bf00      	nop
 80110e0:	080133eb 	.word	0x080133eb
 80110e4:	0801345c 	.word	0x0801345c

080110e8 <__mcmp>:
 80110e8:	690a      	ldr	r2, [r1, #16]
 80110ea:	4603      	mov	r3, r0
 80110ec:	6900      	ldr	r0, [r0, #16]
 80110ee:	1a80      	subs	r0, r0, r2
 80110f0:	b530      	push	{r4, r5, lr}
 80110f2:	d10e      	bne.n	8011112 <__mcmp+0x2a>
 80110f4:	3314      	adds	r3, #20
 80110f6:	3114      	adds	r1, #20
 80110f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80110fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011100:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011104:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011108:	4295      	cmp	r5, r2
 801110a:	d003      	beq.n	8011114 <__mcmp+0x2c>
 801110c:	d205      	bcs.n	801111a <__mcmp+0x32>
 801110e:	f04f 30ff 	mov.w	r0, #4294967295
 8011112:	bd30      	pop	{r4, r5, pc}
 8011114:	42a3      	cmp	r3, r4
 8011116:	d3f3      	bcc.n	8011100 <__mcmp+0x18>
 8011118:	e7fb      	b.n	8011112 <__mcmp+0x2a>
 801111a:	2001      	movs	r0, #1
 801111c:	e7f9      	b.n	8011112 <__mcmp+0x2a>
	...

08011120 <__mdiff>:
 8011120:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011124:	4689      	mov	r9, r1
 8011126:	4606      	mov	r6, r0
 8011128:	4611      	mov	r1, r2
 801112a:	4648      	mov	r0, r9
 801112c:	4614      	mov	r4, r2
 801112e:	f7ff ffdb 	bl	80110e8 <__mcmp>
 8011132:	1e05      	subs	r5, r0, #0
 8011134:	d112      	bne.n	801115c <__mdiff+0x3c>
 8011136:	4629      	mov	r1, r5
 8011138:	4630      	mov	r0, r6
 801113a:	f7ff fd11 	bl	8010b60 <_Balloc>
 801113e:	4602      	mov	r2, r0
 8011140:	b928      	cbnz	r0, 801114e <__mdiff+0x2e>
 8011142:	4b3f      	ldr	r3, [pc, #252]	@ (8011240 <__mdiff+0x120>)
 8011144:	f240 2137 	movw	r1, #567	@ 0x237
 8011148:	483e      	ldr	r0, [pc, #248]	@ (8011244 <__mdiff+0x124>)
 801114a:	f7fe fa53 	bl	800f5f4 <__assert_func>
 801114e:	2301      	movs	r3, #1
 8011150:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011154:	4610      	mov	r0, r2
 8011156:	b003      	add	sp, #12
 8011158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801115c:	bfbc      	itt	lt
 801115e:	464b      	movlt	r3, r9
 8011160:	46a1      	movlt	r9, r4
 8011162:	4630      	mov	r0, r6
 8011164:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011168:	bfba      	itte	lt
 801116a:	461c      	movlt	r4, r3
 801116c:	2501      	movlt	r5, #1
 801116e:	2500      	movge	r5, #0
 8011170:	f7ff fcf6 	bl	8010b60 <_Balloc>
 8011174:	4602      	mov	r2, r0
 8011176:	b918      	cbnz	r0, 8011180 <__mdiff+0x60>
 8011178:	4b31      	ldr	r3, [pc, #196]	@ (8011240 <__mdiff+0x120>)
 801117a:	f240 2145 	movw	r1, #581	@ 0x245
 801117e:	e7e3      	b.n	8011148 <__mdiff+0x28>
 8011180:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011184:	6926      	ldr	r6, [r4, #16]
 8011186:	60c5      	str	r5, [r0, #12]
 8011188:	f109 0310 	add.w	r3, r9, #16
 801118c:	f109 0514 	add.w	r5, r9, #20
 8011190:	f104 0e14 	add.w	lr, r4, #20
 8011194:	f100 0b14 	add.w	fp, r0, #20
 8011198:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801119c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80111a0:	9301      	str	r3, [sp, #4]
 80111a2:	46d9      	mov	r9, fp
 80111a4:	f04f 0c00 	mov.w	ip, #0
 80111a8:	9b01      	ldr	r3, [sp, #4]
 80111aa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80111ae:	f853 af04 	ldr.w	sl, [r3, #4]!
 80111b2:	9301      	str	r3, [sp, #4]
 80111b4:	fa1f f38a 	uxth.w	r3, sl
 80111b8:	4619      	mov	r1, r3
 80111ba:	b283      	uxth	r3, r0
 80111bc:	1acb      	subs	r3, r1, r3
 80111be:	0c00      	lsrs	r0, r0, #16
 80111c0:	4463      	add	r3, ip
 80111c2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80111c6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80111ca:	b29b      	uxth	r3, r3
 80111cc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80111d0:	4576      	cmp	r6, lr
 80111d2:	f849 3b04 	str.w	r3, [r9], #4
 80111d6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80111da:	d8e5      	bhi.n	80111a8 <__mdiff+0x88>
 80111dc:	1b33      	subs	r3, r6, r4
 80111de:	3b15      	subs	r3, #21
 80111e0:	f023 0303 	bic.w	r3, r3, #3
 80111e4:	3415      	adds	r4, #21
 80111e6:	3304      	adds	r3, #4
 80111e8:	42a6      	cmp	r6, r4
 80111ea:	bf38      	it	cc
 80111ec:	2304      	movcc	r3, #4
 80111ee:	441d      	add	r5, r3
 80111f0:	445b      	add	r3, fp
 80111f2:	461e      	mov	r6, r3
 80111f4:	462c      	mov	r4, r5
 80111f6:	4544      	cmp	r4, r8
 80111f8:	d30e      	bcc.n	8011218 <__mdiff+0xf8>
 80111fa:	f108 0103 	add.w	r1, r8, #3
 80111fe:	1b49      	subs	r1, r1, r5
 8011200:	f021 0103 	bic.w	r1, r1, #3
 8011204:	3d03      	subs	r5, #3
 8011206:	45a8      	cmp	r8, r5
 8011208:	bf38      	it	cc
 801120a:	2100      	movcc	r1, #0
 801120c:	440b      	add	r3, r1
 801120e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011212:	b191      	cbz	r1, 801123a <__mdiff+0x11a>
 8011214:	6117      	str	r7, [r2, #16]
 8011216:	e79d      	b.n	8011154 <__mdiff+0x34>
 8011218:	f854 1b04 	ldr.w	r1, [r4], #4
 801121c:	46e6      	mov	lr, ip
 801121e:	0c08      	lsrs	r0, r1, #16
 8011220:	fa1c fc81 	uxtah	ip, ip, r1
 8011224:	4471      	add	r1, lr
 8011226:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801122a:	b289      	uxth	r1, r1
 801122c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011230:	f846 1b04 	str.w	r1, [r6], #4
 8011234:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011238:	e7dd      	b.n	80111f6 <__mdiff+0xd6>
 801123a:	3f01      	subs	r7, #1
 801123c:	e7e7      	b.n	801120e <__mdiff+0xee>
 801123e:	bf00      	nop
 8011240:	080133eb 	.word	0x080133eb
 8011244:	0801345c 	.word	0x0801345c

08011248 <__ulp>:
 8011248:	b082      	sub	sp, #8
 801124a:	ed8d 0b00 	vstr	d0, [sp]
 801124e:	9a01      	ldr	r2, [sp, #4]
 8011250:	4b0f      	ldr	r3, [pc, #60]	@ (8011290 <__ulp+0x48>)
 8011252:	4013      	ands	r3, r2
 8011254:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011258:	2b00      	cmp	r3, #0
 801125a:	dc08      	bgt.n	801126e <__ulp+0x26>
 801125c:	425b      	negs	r3, r3
 801125e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011262:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011266:	da04      	bge.n	8011272 <__ulp+0x2a>
 8011268:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801126c:	4113      	asrs	r3, r2
 801126e:	2200      	movs	r2, #0
 8011270:	e008      	b.n	8011284 <__ulp+0x3c>
 8011272:	f1a2 0314 	sub.w	r3, r2, #20
 8011276:	2b1e      	cmp	r3, #30
 8011278:	bfda      	itte	le
 801127a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801127e:	40da      	lsrle	r2, r3
 8011280:	2201      	movgt	r2, #1
 8011282:	2300      	movs	r3, #0
 8011284:	4619      	mov	r1, r3
 8011286:	4610      	mov	r0, r2
 8011288:	ec41 0b10 	vmov	d0, r0, r1
 801128c:	b002      	add	sp, #8
 801128e:	4770      	bx	lr
 8011290:	7ff00000 	.word	0x7ff00000

08011294 <__b2d>:
 8011294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011298:	6906      	ldr	r6, [r0, #16]
 801129a:	f100 0814 	add.w	r8, r0, #20
 801129e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80112a2:	1f37      	subs	r7, r6, #4
 80112a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80112a8:	4610      	mov	r0, r2
 80112aa:	f7ff fd4b 	bl	8010d44 <__hi0bits>
 80112ae:	f1c0 0320 	rsb	r3, r0, #32
 80112b2:	280a      	cmp	r0, #10
 80112b4:	600b      	str	r3, [r1, #0]
 80112b6:	491b      	ldr	r1, [pc, #108]	@ (8011324 <__b2d+0x90>)
 80112b8:	dc15      	bgt.n	80112e6 <__b2d+0x52>
 80112ba:	f1c0 0c0b 	rsb	ip, r0, #11
 80112be:	fa22 f30c 	lsr.w	r3, r2, ip
 80112c2:	45b8      	cmp	r8, r7
 80112c4:	ea43 0501 	orr.w	r5, r3, r1
 80112c8:	bf34      	ite	cc
 80112ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80112ce:	2300      	movcs	r3, #0
 80112d0:	3015      	adds	r0, #21
 80112d2:	fa02 f000 	lsl.w	r0, r2, r0
 80112d6:	fa23 f30c 	lsr.w	r3, r3, ip
 80112da:	4303      	orrs	r3, r0
 80112dc:	461c      	mov	r4, r3
 80112de:	ec45 4b10 	vmov	d0, r4, r5
 80112e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112e6:	45b8      	cmp	r8, r7
 80112e8:	bf3a      	itte	cc
 80112ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80112ee:	f1a6 0708 	subcc.w	r7, r6, #8
 80112f2:	2300      	movcs	r3, #0
 80112f4:	380b      	subs	r0, #11
 80112f6:	d012      	beq.n	801131e <__b2d+0x8a>
 80112f8:	f1c0 0120 	rsb	r1, r0, #32
 80112fc:	fa23 f401 	lsr.w	r4, r3, r1
 8011300:	4082      	lsls	r2, r0
 8011302:	4322      	orrs	r2, r4
 8011304:	4547      	cmp	r7, r8
 8011306:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801130a:	bf8c      	ite	hi
 801130c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011310:	2200      	movls	r2, #0
 8011312:	4083      	lsls	r3, r0
 8011314:	40ca      	lsrs	r2, r1
 8011316:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801131a:	4313      	orrs	r3, r2
 801131c:	e7de      	b.n	80112dc <__b2d+0x48>
 801131e:	ea42 0501 	orr.w	r5, r2, r1
 8011322:	e7db      	b.n	80112dc <__b2d+0x48>
 8011324:	3ff00000 	.word	0x3ff00000

08011328 <__d2b>:
 8011328:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801132c:	460f      	mov	r7, r1
 801132e:	2101      	movs	r1, #1
 8011330:	ec59 8b10 	vmov	r8, r9, d0
 8011334:	4616      	mov	r6, r2
 8011336:	f7ff fc13 	bl	8010b60 <_Balloc>
 801133a:	4604      	mov	r4, r0
 801133c:	b930      	cbnz	r0, 801134c <__d2b+0x24>
 801133e:	4602      	mov	r2, r0
 8011340:	4b23      	ldr	r3, [pc, #140]	@ (80113d0 <__d2b+0xa8>)
 8011342:	4824      	ldr	r0, [pc, #144]	@ (80113d4 <__d2b+0xac>)
 8011344:	f240 310f 	movw	r1, #783	@ 0x30f
 8011348:	f7fe f954 	bl	800f5f4 <__assert_func>
 801134c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011350:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011354:	b10d      	cbz	r5, 801135a <__d2b+0x32>
 8011356:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801135a:	9301      	str	r3, [sp, #4]
 801135c:	f1b8 0300 	subs.w	r3, r8, #0
 8011360:	d023      	beq.n	80113aa <__d2b+0x82>
 8011362:	4668      	mov	r0, sp
 8011364:	9300      	str	r3, [sp, #0]
 8011366:	f7ff fd0c 	bl	8010d82 <__lo0bits>
 801136a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801136e:	b1d0      	cbz	r0, 80113a6 <__d2b+0x7e>
 8011370:	f1c0 0320 	rsb	r3, r0, #32
 8011374:	fa02 f303 	lsl.w	r3, r2, r3
 8011378:	430b      	orrs	r3, r1
 801137a:	40c2      	lsrs	r2, r0
 801137c:	6163      	str	r3, [r4, #20]
 801137e:	9201      	str	r2, [sp, #4]
 8011380:	9b01      	ldr	r3, [sp, #4]
 8011382:	61a3      	str	r3, [r4, #24]
 8011384:	2b00      	cmp	r3, #0
 8011386:	bf0c      	ite	eq
 8011388:	2201      	moveq	r2, #1
 801138a:	2202      	movne	r2, #2
 801138c:	6122      	str	r2, [r4, #16]
 801138e:	b1a5      	cbz	r5, 80113ba <__d2b+0x92>
 8011390:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011394:	4405      	add	r5, r0
 8011396:	603d      	str	r5, [r7, #0]
 8011398:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801139c:	6030      	str	r0, [r6, #0]
 801139e:	4620      	mov	r0, r4
 80113a0:	b003      	add	sp, #12
 80113a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113a6:	6161      	str	r1, [r4, #20]
 80113a8:	e7ea      	b.n	8011380 <__d2b+0x58>
 80113aa:	a801      	add	r0, sp, #4
 80113ac:	f7ff fce9 	bl	8010d82 <__lo0bits>
 80113b0:	9b01      	ldr	r3, [sp, #4]
 80113b2:	6163      	str	r3, [r4, #20]
 80113b4:	3020      	adds	r0, #32
 80113b6:	2201      	movs	r2, #1
 80113b8:	e7e8      	b.n	801138c <__d2b+0x64>
 80113ba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80113be:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80113c2:	6038      	str	r0, [r7, #0]
 80113c4:	6918      	ldr	r0, [r3, #16]
 80113c6:	f7ff fcbd 	bl	8010d44 <__hi0bits>
 80113ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80113ce:	e7e5      	b.n	801139c <__d2b+0x74>
 80113d0:	080133eb 	.word	0x080133eb
 80113d4:	0801345c 	.word	0x0801345c

080113d8 <__ratio>:
 80113d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113dc:	b085      	sub	sp, #20
 80113de:	e9cd 1000 	strd	r1, r0, [sp]
 80113e2:	a902      	add	r1, sp, #8
 80113e4:	f7ff ff56 	bl	8011294 <__b2d>
 80113e8:	9800      	ldr	r0, [sp, #0]
 80113ea:	a903      	add	r1, sp, #12
 80113ec:	ec55 4b10 	vmov	r4, r5, d0
 80113f0:	f7ff ff50 	bl	8011294 <__b2d>
 80113f4:	9b01      	ldr	r3, [sp, #4]
 80113f6:	6919      	ldr	r1, [r3, #16]
 80113f8:	9b00      	ldr	r3, [sp, #0]
 80113fa:	691b      	ldr	r3, [r3, #16]
 80113fc:	1ac9      	subs	r1, r1, r3
 80113fe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8011402:	1a9b      	subs	r3, r3, r2
 8011404:	ec5b ab10 	vmov	sl, fp, d0
 8011408:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801140c:	2b00      	cmp	r3, #0
 801140e:	bfce      	itee	gt
 8011410:	462a      	movgt	r2, r5
 8011412:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011416:	465a      	movle	r2, fp
 8011418:	462f      	mov	r7, r5
 801141a:	46d9      	mov	r9, fp
 801141c:	bfcc      	ite	gt
 801141e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011422:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011426:	464b      	mov	r3, r9
 8011428:	4652      	mov	r2, sl
 801142a:	4620      	mov	r0, r4
 801142c:	4639      	mov	r1, r7
 801142e:	f7ef fa2d 	bl	800088c <__aeabi_ddiv>
 8011432:	ec41 0b10 	vmov	d0, r0, r1
 8011436:	b005      	add	sp, #20
 8011438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801143c <__copybits>:
 801143c:	3901      	subs	r1, #1
 801143e:	b570      	push	{r4, r5, r6, lr}
 8011440:	1149      	asrs	r1, r1, #5
 8011442:	6914      	ldr	r4, [r2, #16]
 8011444:	3101      	adds	r1, #1
 8011446:	f102 0314 	add.w	r3, r2, #20
 801144a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801144e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011452:	1f05      	subs	r5, r0, #4
 8011454:	42a3      	cmp	r3, r4
 8011456:	d30c      	bcc.n	8011472 <__copybits+0x36>
 8011458:	1aa3      	subs	r3, r4, r2
 801145a:	3b11      	subs	r3, #17
 801145c:	f023 0303 	bic.w	r3, r3, #3
 8011460:	3211      	adds	r2, #17
 8011462:	42a2      	cmp	r2, r4
 8011464:	bf88      	it	hi
 8011466:	2300      	movhi	r3, #0
 8011468:	4418      	add	r0, r3
 801146a:	2300      	movs	r3, #0
 801146c:	4288      	cmp	r0, r1
 801146e:	d305      	bcc.n	801147c <__copybits+0x40>
 8011470:	bd70      	pop	{r4, r5, r6, pc}
 8011472:	f853 6b04 	ldr.w	r6, [r3], #4
 8011476:	f845 6f04 	str.w	r6, [r5, #4]!
 801147a:	e7eb      	b.n	8011454 <__copybits+0x18>
 801147c:	f840 3b04 	str.w	r3, [r0], #4
 8011480:	e7f4      	b.n	801146c <__copybits+0x30>

08011482 <__any_on>:
 8011482:	f100 0214 	add.w	r2, r0, #20
 8011486:	6900      	ldr	r0, [r0, #16]
 8011488:	114b      	asrs	r3, r1, #5
 801148a:	4298      	cmp	r0, r3
 801148c:	b510      	push	{r4, lr}
 801148e:	db11      	blt.n	80114b4 <__any_on+0x32>
 8011490:	dd0a      	ble.n	80114a8 <__any_on+0x26>
 8011492:	f011 011f 	ands.w	r1, r1, #31
 8011496:	d007      	beq.n	80114a8 <__any_on+0x26>
 8011498:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801149c:	fa24 f001 	lsr.w	r0, r4, r1
 80114a0:	fa00 f101 	lsl.w	r1, r0, r1
 80114a4:	428c      	cmp	r4, r1
 80114a6:	d10b      	bne.n	80114c0 <__any_on+0x3e>
 80114a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80114ac:	4293      	cmp	r3, r2
 80114ae:	d803      	bhi.n	80114b8 <__any_on+0x36>
 80114b0:	2000      	movs	r0, #0
 80114b2:	bd10      	pop	{r4, pc}
 80114b4:	4603      	mov	r3, r0
 80114b6:	e7f7      	b.n	80114a8 <__any_on+0x26>
 80114b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80114bc:	2900      	cmp	r1, #0
 80114be:	d0f5      	beq.n	80114ac <__any_on+0x2a>
 80114c0:	2001      	movs	r0, #1
 80114c2:	e7f6      	b.n	80114b2 <__any_on+0x30>

080114c4 <_strtol_l.constprop.0>:
 80114c4:	2b24      	cmp	r3, #36	@ 0x24
 80114c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114ca:	4686      	mov	lr, r0
 80114cc:	4690      	mov	r8, r2
 80114ce:	d801      	bhi.n	80114d4 <_strtol_l.constprop.0+0x10>
 80114d0:	2b01      	cmp	r3, #1
 80114d2:	d106      	bne.n	80114e2 <_strtol_l.constprop.0+0x1e>
 80114d4:	f7fe f844 	bl	800f560 <__errno>
 80114d8:	2316      	movs	r3, #22
 80114da:	6003      	str	r3, [r0, #0]
 80114dc:	2000      	movs	r0, #0
 80114de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114e2:	4834      	ldr	r0, [pc, #208]	@ (80115b4 <_strtol_l.constprop.0+0xf0>)
 80114e4:	460d      	mov	r5, r1
 80114e6:	462a      	mov	r2, r5
 80114e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80114ec:	5d06      	ldrb	r6, [r0, r4]
 80114ee:	f016 0608 	ands.w	r6, r6, #8
 80114f2:	d1f8      	bne.n	80114e6 <_strtol_l.constprop.0+0x22>
 80114f4:	2c2d      	cmp	r4, #45	@ 0x2d
 80114f6:	d12d      	bne.n	8011554 <_strtol_l.constprop.0+0x90>
 80114f8:	782c      	ldrb	r4, [r5, #0]
 80114fa:	2601      	movs	r6, #1
 80114fc:	1c95      	adds	r5, r2, #2
 80114fe:	f033 0210 	bics.w	r2, r3, #16
 8011502:	d109      	bne.n	8011518 <_strtol_l.constprop.0+0x54>
 8011504:	2c30      	cmp	r4, #48	@ 0x30
 8011506:	d12a      	bne.n	801155e <_strtol_l.constprop.0+0x9a>
 8011508:	782a      	ldrb	r2, [r5, #0]
 801150a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801150e:	2a58      	cmp	r2, #88	@ 0x58
 8011510:	d125      	bne.n	801155e <_strtol_l.constprop.0+0x9a>
 8011512:	786c      	ldrb	r4, [r5, #1]
 8011514:	2310      	movs	r3, #16
 8011516:	3502      	adds	r5, #2
 8011518:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801151c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011520:	2200      	movs	r2, #0
 8011522:	fbbc f9f3 	udiv	r9, ip, r3
 8011526:	4610      	mov	r0, r2
 8011528:	fb03 ca19 	mls	sl, r3, r9, ip
 801152c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011530:	2f09      	cmp	r7, #9
 8011532:	d81b      	bhi.n	801156c <_strtol_l.constprop.0+0xa8>
 8011534:	463c      	mov	r4, r7
 8011536:	42a3      	cmp	r3, r4
 8011538:	dd27      	ble.n	801158a <_strtol_l.constprop.0+0xc6>
 801153a:	1c57      	adds	r7, r2, #1
 801153c:	d007      	beq.n	801154e <_strtol_l.constprop.0+0x8a>
 801153e:	4581      	cmp	r9, r0
 8011540:	d320      	bcc.n	8011584 <_strtol_l.constprop.0+0xc0>
 8011542:	d101      	bne.n	8011548 <_strtol_l.constprop.0+0x84>
 8011544:	45a2      	cmp	sl, r4
 8011546:	db1d      	blt.n	8011584 <_strtol_l.constprop.0+0xc0>
 8011548:	fb00 4003 	mla	r0, r0, r3, r4
 801154c:	2201      	movs	r2, #1
 801154e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011552:	e7eb      	b.n	801152c <_strtol_l.constprop.0+0x68>
 8011554:	2c2b      	cmp	r4, #43	@ 0x2b
 8011556:	bf04      	itt	eq
 8011558:	782c      	ldrbeq	r4, [r5, #0]
 801155a:	1c95      	addeq	r5, r2, #2
 801155c:	e7cf      	b.n	80114fe <_strtol_l.constprop.0+0x3a>
 801155e:	2b00      	cmp	r3, #0
 8011560:	d1da      	bne.n	8011518 <_strtol_l.constprop.0+0x54>
 8011562:	2c30      	cmp	r4, #48	@ 0x30
 8011564:	bf0c      	ite	eq
 8011566:	2308      	moveq	r3, #8
 8011568:	230a      	movne	r3, #10
 801156a:	e7d5      	b.n	8011518 <_strtol_l.constprop.0+0x54>
 801156c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011570:	2f19      	cmp	r7, #25
 8011572:	d801      	bhi.n	8011578 <_strtol_l.constprop.0+0xb4>
 8011574:	3c37      	subs	r4, #55	@ 0x37
 8011576:	e7de      	b.n	8011536 <_strtol_l.constprop.0+0x72>
 8011578:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801157c:	2f19      	cmp	r7, #25
 801157e:	d804      	bhi.n	801158a <_strtol_l.constprop.0+0xc6>
 8011580:	3c57      	subs	r4, #87	@ 0x57
 8011582:	e7d8      	b.n	8011536 <_strtol_l.constprop.0+0x72>
 8011584:	f04f 32ff 	mov.w	r2, #4294967295
 8011588:	e7e1      	b.n	801154e <_strtol_l.constprop.0+0x8a>
 801158a:	1c53      	adds	r3, r2, #1
 801158c:	d108      	bne.n	80115a0 <_strtol_l.constprop.0+0xdc>
 801158e:	2322      	movs	r3, #34	@ 0x22
 8011590:	f8ce 3000 	str.w	r3, [lr]
 8011594:	4660      	mov	r0, ip
 8011596:	f1b8 0f00 	cmp.w	r8, #0
 801159a:	d0a0      	beq.n	80114de <_strtol_l.constprop.0+0x1a>
 801159c:	1e69      	subs	r1, r5, #1
 801159e:	e006      	b.n	80115ae <_strtol_l.constprop.0+0xea>
 80115a0:	b106      	cbz	r6, 80115a4 <_strtol_l.constprop.0+0xe0>
 80115a2:	4240      	negs	r0, r0
 80115a4:	f1b8 0f00 	cmp.w	r8, #0
 80115a8:	d099      	beq.n	80114de <_strtol_l.constprop.0+0x1a>
 80115aa:	2a00      	cmp	r2, #0
 80115ac:	d1f6      	bne.n	801159c <_strtol_l.constprop.0+0xd8>
 80115ae:	f8c8 1000 	str.w	r1, [r8]
 80115b2:	e794      	b.n	80114de <_strtol_l.constprop.0+0x1a>
 80115b4:	080135b9 	.word	0x080135b9

080115b8 <_strtol_r>:
 80115b8:	f7ff bf84 	b.w	80114c4 <_strtol_l.constprop.0>

080115bc <__ascii_wctomb>:
 80115bc:	4603      	mov	r3, r0
 80115be:	4608      	mov	r0, r1
 80115c0:	b141      	cbz	r1, 80115d4 <__ascii_wctomb+0x18>
 80115c2:	2aff      	cmp	r2, #255	@ 0xff
 80115c4:	d904      	bls.n	80115d0 <__ascii_wctomb+0x14>
 80115c6:	228a      	movs	r2, #138	@ 0x8a
 80115c8:	601a      	str	r2, [r3, #0]
 80115ca:	f04f 30ff 	mov.w	r0, #4294967295
 80115ce:	4770      	bx	lr
 80115d0:	700a      	strb	r2, [r1, #0]
 80115d2:	2001      	movs	r0, #1
 80115d4:	4770      	bx	lr

080115d6 <__ssputs_r>:
 80115d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115da:	688e      	ldr	r6, [r1, #8]
 80115dc:	461f      	mov	r7, r3
 80115de:	42be      	cmp	r6, r7
 80115e0:	680b      	ldr	r3, [r1, #0]
 80115e2:	4682      	mov	sl, r0
 80115e4:	460c      	mov	r4, r1
 80115e6:	4690      	mov	r8, r2
 80115e8:	d82d      	bhi.n	8011646 <__ssputs_r+0x70>
 80115ea:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80115ee:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80115f2:	d026      	beq.n	8011642 <__ssputs_r+0x6c>
 80115f4:	6965      	ldr	r5, [r4, #20]
 80115f6:	6909      	ldr	r1, [r1, #16]
 80115f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80115fc:	eba3 0901 	sub.w	r9, r3, r1
 8011600:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011604:	1c7b      	adds	r3, r7, #1
 8011606:	444b      	add	r3, r9
 8011608:	106d      	asrs	r5, r5, #1
 801160a:	429d      	cmp	r5, r3
 801160c:	bf38      	it	cc
 801160e:	461d      	movcc	r5, r3
 8011610:	0553      	lsls	r3, r2, #21
 8011612:	d527      	bpl.n	8011664 <__ssputs_r+0x8e>
 8011614:	4629      	mov	r1, r5
 8011616:	f7ff fa05 	bl	8010a24 <_malloc_r>
 801161a:	4606      	mov	r6, r0
 801161c:	b360      	cbz	r0, 8011678 <__ssputs_r+0xa2>
 801161e:	6921      	ldr	r1, [r4, #16]
 8011620:	464a      	mov	r2, r9
 8011622:	f7fd ffca 	bl	800f5ba <memcpy>
 8011626:	89a3      	ldrh	r3, [r4, #12]
 8011628:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801162c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011630:	81a3      	strh	r3, [r4, #12]
 8011632:	6126      	str	r6, [r4, #16]
 8011634:	6165      	str	r5, [r4, #20]
 8011636:	444e      	add	r6, r9
 8011638:	eba5 0509 	sub.w	r5, r5, r9
 801163c:	6026      	str	r6, [r4, #0]
 801163e:	60a5      	str	r5, [r4, #8]
 8011640:	463e      	mov	r6, r7
 8011642:	42be      	cmp	r6, r7
 8011644:	d900      	bls.n	8011648 <__ssputs_r+0x72>
 8011646:	463e      	mov	r6, r7
 8011648:	6820      	ldr	r0, [r4, #0]
 801164a:	4632      	mov	r2, r6
 801164c:	4641      	mov	r1, r8
 801164e:	f000 f9d7 	bl	8011a00 <memmove>
 8011652:	68a3      	ldr	r3, [r4, #8]
 8011654:	1b9b      	subs	r3, r3, r6
 8011656:	60a3      	str	r3, [r4, #8]
 8011658:	6823      	ldr	r3, [r4, #0]
 801165a:	4433      	add	r3, r6
 801165c:	6023      	str	r3, [r4, #0]
 801165e:	2000      	movs	r0, #0
 8011660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011664:	462a      	mov	r2, r5
 8011666:	f000 fa10 	bl	8011a8a <_realloc_r>
 801166a:	4606      	mov	r6, r0
 801166c:	2800      	cmp	r0, #0
 801166e:	d1e0      	bne.n	8011632 <__ssputs_r+0x5c>
 8011670:	6921      	ldr	r1, [r4, #16]
 8011672:	4650      	mov	r0, sl
 8011674:	f7fe fe28 	bl	80102c8 <_free_r>
 8011678:	230c      	movs	r3, #12
 801167a:	f8ca 3000 	str.w	r3, [sl]
 801167e:	89a3      	ldrh	r3, [r4, #12]
 8011680:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011684:	81a3      	strh	r3, [r4, #12]
 8011686:	f04f 30ff 	mov.w	r0, #4294967295
 801168a:	e7e9      	b.n	8011660 <__ssputs_r+0x8a>

0801168c <_svfiprintf_r>:
 801168c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011690:	4698      	mov	r8, r3
 8011692:	898b      	ldrh	r3, [r1, #12]
 8011694:	061b      	lsls	r3, r3, #24
 8011696:	b09d      	sub	sp, #116	@ 0x74
 8011698:	4607      	mov	r7, r0
 801169a:	460d      	mov	r5, r1
 801169c:	4614      	mov	r4, r2
 801169e:	d510      	bpl.n	80116c2 <_svfiprintf_r+0x36>
 80116a0:	690b      	ldr	r3, [r1, #16]
 80116a2:	b973      	cbnz	r3, 80116c2 <_svfiprintf_r+0x36>
 80116a4:	2140      	movs	r1, #64	@ 0x40
 80116a6:	f7ff f9bd 	bl	8010a24 <_malloc_r>
 80116aa:	6028      	str	r0, [r5, #0]
 80116ac:	6128      	str	r0, [r5, #16]
 80116ae:	b930      	cbnz	r0, 80116be <_svfiprintf_r+0x32>
 80116b0:	230c      	movs	r3, #12
 80116b2:	603b      	str	r3, [r7, #0]
 80116b4:	f04f 30ff 	mov.w	r0, #4294967295
 80116b8:	b01d      	add	sp, #116	@ 0x74
 80116ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116be:	2340      	movs	r3, #64	@ 0x40
 80116c0:	616b      	str	r3, [r5, #20]
 80116c2:	2300      	movs	r3, #0
 80116c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80116c6:	2320      	movs	r3, #32
 80116c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80116cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80116d0:	2330      	movs	r3, #48	@ 0x30
 80116d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011870 <_svfiprintf_r+0x1e4>
 80116d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80116da:	f04f 0901 	mov.w	r9, #1
 80116de:	4623      	mov	r3, r4
 80116e0:	469a      	mov	sl, r3
 80116e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80116e6:	b10a      	cbz	r2, 80116ec <_svfiprintf_r+0x60>
 80116e8:	2a25      	cmp	r2, #37	@ 0x25
 80116ea:	d1f9      	bne.n	80116e0 <_svfiprintf_r+0x54>
 80116ec:	ebba 0b04 	subs.w	fp, sl, r4
 80116f0:	d00b      	beq.n	801170a <_svfiprintf_r+0x7e>
 80116f2:	465b      	mov	r3, fp
 80116f4:	4622      	mov	r2, r4
 80116f6:	4629      	mov	r1, r5
 80116f8:	4638      	mov	r0, r7
 80116fa:	f7ff ff6c 	bl	80115d6 <__ssputs_r>
 80116fe:	3001      	adds	r0, #1
 8011700:	f000 80a7 	beq.w	8011852 <_svfiprintf_r+0x1c6>
 8011704:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011706:	445a      	add	r2, fp
 8011708:	9209      	str	r2, [sp, #36]	@ 0x24
 801170a:	f89a 3000 	ldrb.w	r3, [sl]
 801170e:	2b00      	cmp	r3, #0
 8011710:	f000 809f 	beq.w	8011852 <_svfiprintf_r+0x1c6>
 8011714:	2300      	movs	r3, #0
 8011716:	f04f 32ff 	mov.w	r2, #4294967295
 801171a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801171e:	f10a 0a01 	add.w	sl, sl, #1
 8011722:	9304      	str	r3, [sp, #16]
 8011724:	9307      	str	r3, [sp, #28]
 8011726:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801172a:	931a      	str	r3, [sp, #104]	@ 0x68
 801172c:	4654      	mov	r4, sl
 801172e:	2205      	movs	r2, #5
 8011730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011734:	484e      	ldr	r0, [pc, #312]	@ (8011870 <_svfiprintf_r+0x1e4>)
 8011736:	f7ee fd6b 	bl	8000210 <memchr>
 801173a:	9a04      	ldr	r2, [sp, #16]
 801173c:	b9d8      	cbnz	r0, 8011776 <_svfiprintf_r+0xea>
 801173e:	06d0      	lsls	r0, r2, #27
 8011740:	bf44      	itt	mi
 8011742:	2320      	movmi	r3, #32
 8011744:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011748:	0711      	lsls	r1, r2, #28
 801174a:	bf44      	itt	mi
 801174c:	232b      	movmi	r3, #43	@ 0x2b
 801174e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011752:	f89a 3000 	ldrb.w	r3, [sl]
 8011756:	2b2a      	cmp	r3, #42	@ 0x2a
 8011758:	d015      	beq.n	8011786 <_svfiprintf_r+0xfa>
 801175a:	9a07      	ldr	r2, [sp, #28]
 801175c:	4654      	mov	r4, sl
 801175e:	2000      	movs	r0, #0
 8011760:	f04f 0c0a 	mov.w	ip, #10
 8011764:	4621      	mov	r1, r4
 8011766:	f811 3b01 	ldrb.w	r3, [r1], #1
 801176a:	3b30      	subs	r3, #48	@ 0x30
 801176c:	2b09      	cmp	r3, #9
 801176e:	d94b      	bls.n	8011808 <_svfiprintf_r+0x17c>
 8011770:	b1b0      	cbz	r0, 80117a0 <_svfiprintf_r+0x114>
 8011772:	9207      	str	r2, [sp, #28]
 8011774:	e014      	b.n	80117a0 <_svfiprintf_r+0x114>
 8011776:	eba0 0308 	sub.w	r3, r0, r8
 801177a:	fa09 f303 	lsl.w	r3, r9, r3
 801177e:	4313      	orrs	r3, r2
 8011780:	9304      	str	r3, [sp, #16]
 8011782:	46a2      	mov	sl, r4
 8011784:	e7d2      	b.n	801172c <_svfiprintf_r+0xa0>
 8011786:	9b03      	ldr	r3, [sp, #12]
 8011788:	1d19      	adds	r1, r3, #4
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	9103      	str	r1, [sp, #12]
 801178e:	2b00      	cmp	r3, #0
 8011790:	bfbb      	ittet	lt
 8011792:	425b      	neglt	r3, r3
 8011794:	f042 0202 	orrlt.w	r2, r2, #2
 8011798:	9307      	strge	r3, [sp, #28]
 801179a:	9307      	strlt	r3, [sp, #28]
 801179c:	bfb8      	it	lt
 801179e:	9204      	strlt	r2, [sp, #16]
 80117a0:	7823      	ldrb	r3, [r4, #0]
 80117a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80117a4:	d10a      	bne.n	80117bc <_svfiprintf_r+0x130>
 80117a6:	7863      	ldrb	r3, [r4, #1]
 80117a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80117aa:	d132      	bne.n	8011812 <_svfiprintf_r+0x186>
 80117ac:	9b03      	ldr	r3, [sp, #12]
 80117ae:	1d1a      	adds	r2, r3, #4
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	9203      	str	r2, [sp, #12]
 80117b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80117b8:	3402      	adds	r4, #2
 80117ba:	9305      	str	r3, [sp, #20]
 80117bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011880 <_svfiprintf_r+0x1f4>
 80117c0:	7821      	ldrb	r1, [r4, #0]
 80117c2:	2203      	movs	r2, #3
 80117c4:	4650      	mov	r0, sl
 80117c6:	f7ee fd23 	bl	8000210 <memchr>
 80117ca:	b138      	cbz	r0, 80117dc <_svfiprintf_r+0x150>
 80117cc:	9b04      	ldr	r3, [sp, #16]
 80117ce:	eba0 000a 	sub.w	r0, r0, sl
 80117d2:	2240      	movs	r2, #64	@ 0x40
 80117d4:	4082      	lsls	r2, r0
 80117d6:	4313      	orrs	r3, r2
 80117d8:	3401      	adds	r4, #1
 80117da:	9304      	str	r3, [sp, #16]
 80117dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117e0:	4824      	ldr	r0, [pc, #144]	@ (8011874 <_svfiprintf_r+0x1e8>)
 80117e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80117e6:	2206      	movs	r2, #6
 80117e8:	f7ee fd12 	bl	8000210 <memchr>
 80117ec:	2800      	cmp	r0, #0
 80117ee:	d036      	beq.n	801185e <_svfiprintf_r+0x1d2>
 80117f0:	4b21      	ldr	r3, [pc, #132]	@ (8011878 <_svfiprintf_r+0x1ec>)
 80117f2:	bb1b      	cbnz	r3, 801183c <_svfiprintf_r+0x1b0>
 80117f4:	9b03      	ldr	r3, [sp, #12]
 80117f6:	3307      	adds	r3, #7
 80117f8:	f023 0307 	bic.w	r3, r3, #7
 80117fc:	3308      	adds	r3, #8
 80117fe:	9303      	str	r3, [sp, #12]
 8011800:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011802:	4433      	add	r3, r6
 8011804:	9309      	str	r3, [sp, #36]	@ 0x24
 8011806:	e76a      	b.n	80116de <_svfiprintf_r+0x52>
 8011808:	fb0c 3202 	mla	r2, ip, r2, r3
 801180c:	460c      	mov	r4, r1
 801180e:	2001      	movs	r0, #1
 8011810:	e7a8      	b.n	8011764 <_svfiprintf_r+0xd8>
 8011812:	2300      	movs	r3, #0
 8011814:	3401      	adds	r4, #1
 8011816:	9305      	str	r3, [sp, #20]
 8011818:	4619      	mov	r1, r3
 801181a:	f04f 0c0a 	mov.w	ip, #10
 801181e:	4620      	mov	r0, r4
 8011820:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011824:	3a30      	subs	r2, #48	@ 0x30
 8011826:	2a09      	cmp	r2, #9
 8011828:	d903      	bls.n	8011832 <_svfiprintf_r+0x1a6>
 801182a:	2b00      	cmp	r3, #0
 801182c:	d0c6      	beq.n	80117bc <_svfiprintf_r+0x130>
 801182e:	9105      	str	r1, [sp, #20]
 8011830:	e7c4      	b.n	80117bc <_svfiprintf_r+0x130>
 8011832:	fb0c 2101 	mla	r1, ip, r1, r2
 8011836:	4604      	mov	r4, r0
 8011838:	2301      	movs	r3, #1
 801183a:	e7f0      	b.n	801181e <_svfiprintf_r+0x192>
 801183c:	ab03      	add	r3, sp, #12
 801183e:	9300      	str	r3, [sp, #0]
 8011840:	462a      	mov	r2, r5
 8011842:	4b0e      	ldr	r3, [pc, #56]	@ (801187c <_svfiprintf_r+0x1f0>)
 8011844:	a904      	add	r1, sp, #16
 8011846:	4638      	mov	r0, r7
 8011848:	f7fc fed8 	bl	800e5fc <_printf_float>
 801184c:	1c42      	adds	r2, r0, #1
 801184e:	4606      	mov	r6, r0
 8011850:	d1d6      	bne.n	8011800 <_svfiprintf_r+0x174>
 8011852:	89ab      	ldrh	r3, [r5, #12]
 8011854:	065b      	lsls	r3, r3, #25
 8011856:	f53f af2d 	bmi.w	80116b4 <_svfiprintf_r+0x28>
 801185a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801185c:	e72c      	b.n	80116b8 <_svfiprintf_r+0x2c>
 801185e:	ab03      	add	r3, sp, #12
 8011860:	9300      	str	r3, [sp, #0]
 8011862:	462a      	mov	r2, r5
 8011864:	4b05      	ldr	r3, [pc, #20]	@ (801187c <_svfiprintf_r+0x1f0>)
 8011866:	a904      	add	r1, sp, #16
 8011868:	4638      	mov	r0, r7
 801186a:	f7fd f95f 	bl	800eb2c <_printf_i>
 801186e:	e7ed      	b.n	801184c <_svfiprintf_r+0x1c0>
 8011870:	080136b9 	.word	0x080136b9
 8011874:	080136c3 	.word	0x080136c3
 8011878:	0800e5fd 	.word	0x0800e5fd
 801187c:	080115d7 	.word	0x080115d7
 8011880:	080136bf 	.word	0x080136bf

08011884 <__sflush_r>:
 8011884:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801188c:	0716      	lsls	r6, r2, #28
 801188e:	4605      	mov	r5, r0
 8011890:	460c      	mov	r4, r1
 8011892:	d454      	bmi.n	801193e <__sflush_r+0xba>
 8011894:	684b      	ldr	r3, [r1, #4]
 8011896:	2b00      	cmp	r3, #0
 8011898:	dc02      	bgt.n	80118a0 <__sflush_r+0x1c>
 801189a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801189c:	2b00      	cmp	r3, #0
 801189e:	dd48      	ble.n	8011932 <__sflush_r+0xae>
 80118a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80118a2:	2e00      	cmp	r6, #0
 80118a4:	d045      	beq.n	8011932 <__sflush_r+0xae>
 80118a6:	2300      	movs	r3, #0
 80118a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80118ac:	682f      	ldr	r7, [r5, #0]
 80118ae:	6a21      	ldr	r1, [r4, #32]
 80118b0:	602b      	str	r3, [r5, #0]
 80118b2:	d030      	beq.n	8011916 <__sflush_r+0x92>
 80118b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80118b6:	89a3      	ldrh	r3, [r4, #12]
 80118b8:	0759      	lsls	r1, r3, #29
 80118ba:	d505      	bpl.n	80118c8 <__sflush_r+0x44>
 80118bc:	6863      	ldr	r3, [r4, #4]
 80118be:	1ad2      	subs	r2, r2, r3
 80118c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80118c2:	b10b      	cbz	r3, 80118c8 <__sflush_r+0x44>
 80118c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80118c6:	1ad2      	subs	r2, r2, r3
 80118c8:	2300      	movs	r3, #0
 80118ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80118cc:	6a21      	ldr	r1, [r4, #32]
 80118ce:	4628      	mov	r0, r5
 80118d0:	47b0      	blx	r6
 80118d2:	1c43      	adds	r3, r0, #1
 80118d4:	89a3      	ldrh	r3, [r4, #12]
 80118d6:	d106      	bne.n	80118e6 <__sflush_r+0x62>
 80118d8:	6829      	ldr	r1, [r5, #0]
 80118da:	291d      	cmp	r1, #29
 80118dc:	d82b      	bhi.n	8011936 <__sflush_r+0xb2>
 80118de:	4a2a      	ldr	r2, [pc, #168]	@ (8011988 <__sflush_r+0x104>)
 80118e0:	410a      	asrs	r2, r1
 80118e2:	07d6      	lsls	r6, r2, #31
 80118e4:	d427      	bmi.n	8011936 <__sflush_r+0xb2>
 80118e6:	2200      	movs	r2, #0
 80118e8:	6062      	str	r2, [r4, #4]
 80118ea:	04d9      	lsls	r1, r3, #19
 80118ec:	6922      	ldr	r2, [r4, #16]
 80118ee:	6022      	str	r2, [r4, #0]
 80118f0:	d504      	bpl.n	80118fc <__sflush_r+0x78>
 80118f2:	1c42      	adds	r2, r0, #1
 80118f4:	d101      	bne.n	80118fa <__sflush_r+0x76>
 80118f6:	682b      	ldr	r3, [r5, #0]
 80118f8:	b903      	cbnz	r3, 80118fc <__sflush_r+0x78>
 80118fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80118fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80118fe:	602f      	str	r7, [r5, #0]
 8011900:	b1b9      	cbz	r1, 8011932 <__sflush_r+0xae>
 8011902:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011906:	4299      	cmp	r1, r3
 8011908:	d002      	beq.n	8011910 <__sflush_r+0x8c>
 801190a:	4628      	mov	r0, r5
 801190c:	f7fe fcdc 	bl	80102c8 <_free_r>
 8011910:	2300      	movs	r3, #0
 8011912:	6363      	str	r3, [r4, #52]	@ 0x34
 8011914:	e00d      	b.n	8011932 <__sflush_r+0xae>
 8011916:	2301      	movs	r3, #1
 8011918:	4628      	mov	r0, r5
 801191a:	47b0      	blx	r6
 801191c:	4602      	mov	r2, r0
 801191e:	1c50      	adds	r0, r2, #1
 8011920:	d1c9      	bne.n	80118b6 <__sflush_r+0x32>
 8011922:	682b      	ldr	r3, [r5, #0]
 8011924:	2b00      	cmp	r3, #0
 8011926:	d0c6      	beq.n	80118b6 <__sflush_r+0x32>
 8011928:	2b1d      	cmp	r3, #29
 801192a:	d001      	beq.n	8011930 <__sflush_r+0xac>
 801192c:	2b16      	cmp	r3, #22
 801192e:	d11e      	bne.n	801196e <__sflush_r+0xea>
 8011930:	602f      	str	r7, [r5, #0]
 8011932:	2000      	movs	r0, #0
 8011934:	e022      	b.n	801197c <__sflush_r+0xf8>
 8011936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801193a:	b21b      	sxth	r3, r3
 801193c:	e01b      	b.n	8011976 <__sflush_r+0xf2>
 801193e:	690f      	ldr	r7, [r1, #16]
 8011940:	2f00      	cmp	r7, #0
 8011942:	d0f6      	beq.n	8011932 <__sflush_r+0xae>
 8011944:	0793      	lsls	r3, r2, #30
 8011946:	680e      	ldr	r6, [r1, #0]
 8011948:	bf08      	it	eq
 801194a:	694b      	ldreq	r3, [r1, #20]
 801194c:	600f      	str	r7, [r1, #0]
 801194e:	bf18      	it	ne
 8011950:	2300      	movne	r3, #0
 8011952:	eba6 0807 	sub.w	r8, r6, r7
 8011956:	608b      	str	r3, [r1, #8]
 8011958:	f1b8 0f00 	cmp.w	r8, #0
 801195c:	dde9      	ble.n	8011932 <__sflush_r+0xae>
 801195e:	6a21      	ldr	r1, [r4, #32]
 8011960:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011962:	4643      	mov	r3, r8
 8011964:	463a      	mov	r2, r7
 8011966:	4628      	mov	r0, r5
 8011968:	47b0      	blx	r6
 801196a:	2800      	cmp	r0, #0
 801196c:	dc08      	bgt.n	8011980 <__sflush_r+0xfc>
 801196e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011972:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011976:	81a3      	strh	r3, [r4, #12]
 8011978:	f04f 30ff 	mov.w	r0, #4294967295
 801197c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011980:	4407      	add	r7, r0
 8011982:	eba8 0800 	sub.w	r8, r8, r0
 8011986:	e7e7      	b.n	8011958 <__sflush_r+0xd4>
 8011988:	dfbffffe 	.word	0xdfbffffe

0801198c <_fflush_r>:
 801198c:	b538      	push	{r3, r4, r5, lr}
 801198e:	690b      	ldr	r3, [r1, #16]
 8011990:	4605      	mov	r5, r0
 8011992:	460c      	mov	r4, r1
 8011994:	b913      	cbnz	r3, 801199c <_fflush_r+0x10>
 8011996:	2500      	movs	r5, #0
 8011998:	4628      	mov	r0, r5
 801199a:	bd38      	pop	{r3, r4, r5, pc}
 801199c:	b118      	cbz	r0, 80119a6 <_fflush_r+0x1a>
 801199e:	6a03      	ldr	r3, [r0, #32]
 80119a0:	b90b      	cbnz	r3, 80119a6 <_fflush_r+0x1a>
 80119a2:	f7fd fc83 	bl	800f2ac <__sinit>
 80119a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d0f3      	beq.n	8011996 <_fflush_r+0xa>
 80119ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80119b0:	07d0      	lsls	r0, r2, #31
 80119b2:	d404      	bmi.n	80119be <_fflush_r+0x32>
 80119b4:	0599      	lsls	r1, r3, #22
 80119b6:	d402      	bmi.n	80119be <_fflush_r+0x32>
 80119b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80119ba:	f7fd fdfc 	bl	800f5b6 <__retarget_lock_acquire_recursive>
 80119be:	4628      	mov	r0, r5
 80119c0:	4621      	mov	r1, r4
 80119c2:	f7ff ff5f 	bl	8011884 <__sflush_r>
 80119c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80119c8:	07da      	lsls	r2, r3, #31
 80119ca:	4605      	mov	r5, r0
 80119cc:	d4e4      	bmi.n	8011998 <_fflush_r+0xc>
 80119ce:	89a3      	ldrh	r3, [r4, #12]
 80119d0:	059b      	lsls	r3, r3, #22
 80119d2:	d4e1      	bmi.n	8011998 <_fflush_r+0xc>
 80119d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80119d6:	f7fd fdef 	bl	800f5b8 <__retarget_lock_release_recursive>
 80119da:	e7dd      	b.n	8011998 <_fflush_r+0xc>

080119dc <fiprintf>:
 80119dc:	b40e      	push	{r1, r2, r3}
 80119de:	b503      	push	{r0, r1, lr}
 80119e0:	4601      	mov	r1, r0
 80119e2:	ab03      	add	r3, sp, #12
 80119e4:	4805      	ldr	r0, [pc, #20]	@ (80119fc <fiprintf+0x20>)
 80119e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80119ea:	6800      	ldr	r0, [r0, #0]
 80119ec:	9301      	str	r3, [sp, #4]
 80119ee:	f000 f8a3 	bl	8011b38 <_vfiprintf_r>
 80119f2:	b002      	add	sp, #8
 80119f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80119f8:	b003      	add	sp, #12
 80119fa:	4770      	bx	lr
 80119fc:	20000198 	.word	0x20000198

08011a00 <memmove>:
 8011a00:	4288      	cmp	r0, r1
 8011a02:	b510      	push	{r4, lr}
 8011a04:	eb01 0402 	add.w	r4, r1, r2
 8011a08:	d902      	bls.n	8011a10 <memmove+0x10>
 8011a0a:	4284      	cmp	r4, r0
 8011a0c:	4623      	mov	r3, r4
 8011a0e:	d807      	bhi.n	8011a20 <memmove+0x20>
 8011a10:	1e43      	subs	r3, r0, #1
 8011a12:	42a1      	cmp	r1, r4
 8011a14:	d008      	beq.n	8011a28 <memmove+0x28>
 8011a16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011a1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011a1e:	e7f8      	b.n	8011a12 <memmove+0x12>
 8011a20:	4402      	add	r2, r0
 8011a22:	4601      	mov	r1, r0
 8011a24:	428a      	cmp	r2, r1
 8011a26:	d100      	bne.n	8011a2a <memmove+0x2a>
 8011a28:	bd10      	pop	{r4, pc}
 8011a2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011a2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011a32:	e7f7      	b.n	8011a24 <memmove+0x24>

08011a34 <_sbrk_r>:
 8011a34:	b538      	push	{r3, r4, r5, lr}
 8011a36:	4d06      	ldr	r5, [pc, #24]	@ (8011a50 <_sbrk_r+0x1c>)
 8011a38:	2300      	movs	r3, #0
 8011a3a:	4604      	mov	r4, r0
 8011a3c:	4608      	mov	r0, r1
 8011a3e:	602b      	str	r3, [r5, #0]
 8011a40:	f7f5 fd00 	bl	8007444 <_sbrk>
 8011a44:	1c43      	adds	r3, r0, #1
 8011a46:	d102      	bne.n	8011a4e <_sbrk_r+0x1a>
 8011a48:	682b      	ldr	r3, [r5, #0]
 8011a4a:	b103      	cbz	r3, 8011a4e <_sbrk_r+0x1a>
 8011a4c:	6023      	str	r3, [r4, #0]
 8011a4e:	bd38      	pop	{r3, r4, r5, pc}
 8011a50:	20003cc0 	.word	0x20003cc0

08011a54 <abort>:
 8011a54:	b508      	push	{r3, lr}
 8011a56:	2006      	movs	r0, #6
 8011a58:	f000 fa42 	bl	8011ee0 <raise>
 8011a5c:	2001      	movs	r0, #1
 8011a5e:	f7f5 fc78 	bl	8007352 <_exit>

08011a62 <_calloc_r>:
 8011a62:	b570      	push	{r4, r5, r6, lr}
 8011a64:	fba1 5402 	umull	r5, r4, r1, r2
 8011a68:	b93c      	cbnz	r4, 8011a7a <_calloc_r+0x18>
 8011a6a:	4629      	mov	r1, r5
 8011a6c:	f7fe ffda 	bl	8010a24 <_malloc_r>
 8011a70:	4606      	mov	r6, r0
 8011a72:	b928      	cbnz	r0, 8011a80 <_calloc_r+0x1e>
 8011a74:	2600      	movs	r6, #0
 8011a76:	4630      	mov	r0, r6
 8011a78:	bd70      	pop	{r4, r5, r6, pc}
 8011a7a:	220c      	movs	r2, #12
 8011a7c:	6002      	str	r2, [r0, #0]
 8011a7e:	e7f9      	b.n	8011a74 <_calloc_r+0x12>
 8011a80:	462a      	mov	r2, r5
 8011a82:	4621      	mov	r1, r4
 8011a84:	f7fd fcab 	bl	800f3de <memset>
 8011a88:	e7f5      	b.n	8011a76 <_calloc_r+0x14>

08011a8a <_realloc_r>:
 8011a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a8e:	4680      	mov	r8, r0
 8011a90:	4615      	mov	r5, r2
 8011a92:	460c      	mov	r4, r1
 8011a94:	b921      	cbnz	r1, 8011aa0 <_realloc_r+0x16>
 8011a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a9a:	4611      	mov	r1, r2
 8011a9c:	f7fe bfc2 	b.w	8010a24 <_malloc_r>
 8011aa0:	b92a      	cbnz	r2, 8011aae <_realloc_r+0x24>
 8011aa2:	f7fe fc11 	bl	80102c8 <_free_r>
 8011aa6:	2400      	movs	r4, #0
 8011aa8:	4620      	mov	r0, r4
 8011aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011aae:	f000 fa33 	bl	8011f18 <_malloc_usable_size_r>
 8011ab2:	4285      	cmp	r5, r0
 8011ab4:	4606      	mov	r6, r0
 8011ab6:	d802      	bhi.n	8011abe <_realloc_r+0x34>
 8011ab8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011abc:	d8f4      	bhi.n	8011aa8 <_realloc_r+0x1e>
 8011abe:	4629      	mov	r1, r5
 8011ac0:	4640      	mov	r0, r8
 8011ac2:	f7fe ffaf 	bl	8010a24 <_malloc_r>
 8011ac6:	4607      	mov	r7, r0
 8011ac8:	2800      	cmp	r0, #0
 8011aca:	d0ec      	beq.n	8011aa6 <_realloc_r+0x1c>
 8011acc:	42b5      	cmp	r5, r6
 8011ace:	462a      	mov	r2, r5
 8011ad0:	4621      	mov	r1, r4
 8011ad2:	bf28      	it	cs
 8011ad4:	4632      	movcs	r2, r6
 8011ad6:	f7fd fd70 	bl	800f5ba <memcpy>
 8011ada:	4621      	mov	r1, r4
 8011adc:	4640      	mov	r0, r8
 8011ade:	f7fe fbf3 	bl	80102c8 <_free_r>
 8011ae2:	463c      	mov	r4, r7
 8011ae4:	e7e0      	b.n	8011aa8 <_realloc_r+0x1e>

08011ae6 <__sfputc_r>:
 8011ae6:	6893      	ldr	r3, [r2, #8]
 8011ae8:	3b01      	subs	r3, #1
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	b410      	push	{r4}
 8011aee:	6093      	str	r3, [r2, #8]
 8011af0:	da08      	bge.n	8011b04 <__sfputc_r+0x1e>
 8011af2:	6994      	ldr	r4, [r2, #24]
 8011af4:	42a3      	cmp	r3, r4
 8011af6:	db01      	blt.n	8011afc <__sfputc_r+0x16>
 8011af8:	290a      	cmp	r1, #10
 8011afa:	d103      	bne.n	8011b04 <__sfputc_r+0x1e>
 8011afc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b00:	f000 b932 	b.w	8011d68 <__swbuf_r>
 8011b04:	6813      	ldr	r3, [r2, #0]
 8011b06:	1c58      	adds	r0, r3, #1
 8011b08:	6010      	str	r0, [r2, #0]
 8011b0a:	7019      	strb	r1, [r3, #0]
 8011b0c:	4608      	mov	r0, r1
 8011b0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b12:	4770      	bx	lr

08011b14 <__sfputs_r>:
 8011b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b16:	4606      	mov	r6, r0
 8011b18:	460f      	mov	r7, r1
 8011b1a:	4614      	mov	r4, r2
 8011b1c:	18d5      	adds	r5, r2, r3
 8011b1e:	42ac      	cmp	r4, r5
 8011b20:	d101      	bne.n	8011b26 <__sfputs_r+0x12>
 8011b22:	2000      	movs	r0, #0
 8011b24:	e007      	b.n	8011b36 <__sfputs_r+0x22>
 8011b26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b2a:	463a      	mov	r2, r7
 8011b2c:	4630      	mov	r0, r6
 8011b2e:	f7ff ffda 	bl	8011ae6 <__sfputc_r>
 8011b32:	1c43      	adds	r3, r0, #1
 8011b34:	d1f3      	bne.n	8011b1e <__sfputs_r+0xa>
 8011b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011b38 <_vfiprintf_r>:
 8011b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b3c:	460d      	mov	r5, r1
 8011b3e:	b09d      	sub	sp, #116	@ 0x74
 8011b40:	4614      	mov	r4, r2
 8011b42:	4698      	mov	r8, r3
 8011b44:	4606      	mov	r6, r0
 8011b46:	b118      	cbz	r0, 8011b50 <_vfiprintf_r+0x18>
 8011b48:	6a03      	ldr	r3, [r0, #32]
 8011b4a:	b90b      	cbnz	r3, 8011b50 <_vfiprintf_r+0x18>
 8011b4c:	f7fd fbae 	bl	800f2ac <__sinit>
 8011b50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011b52:	07d9      	lsls	r1, r3, #31
 8011b54:	d405      	bmi.n	8011b62 <_vfiprintf_r+0x2a>
 8011b56:	89ab      	ldrh	r3, [r5, #12]
 8011b58:	059a      	lsls	r2, r3, #22
 8011b5a:	d402      	bmi.n	8011b62 <_vfiprintf_r+0x2a>
 8011b5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011b5e:	f7fd fd2a 	bl	800f5b6 <__retarget_lock_acquire_recursive>
 8011b62:	89ab      	ldrh	r3, [r5, #12]
 8011b64:	071b      	lsls	r3, r3, #28
 8011b66:	d501      	bpl.n	8011b6c <_vfiprintf_r+0x34>
 8011b68:	692b      	ldr	r3, [r5, #16]
 8011b6a:	b99b      	cbnz	r3, 8011b94 <_vfiprintf_r+0x5c>
 8011b6c:	4629      	mov	r1, r5
 8011b6e:	4630      	mov	r0, r6
 8011b70:	f000 f938 	bl	8011de4 <__swsetup_r>
 8011b74:	b170      	cbz	r0, 8011b94 <_vfiprintf_r+0x5c>
 8011b76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011b78:	07dc      	lsls	r4, r3, #31
 8011b7a:	d504      	bpl.n	8011b86 <_vfiprintf_r+0x4e>
 8011b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b80:	b01d      	add	sp, #116	@ 0x74
 8011b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b86:	89ab      	ldrh	r3, [r5, #12]
 8011b88:	0598      	lsls	r0, r3, #22
 8011b8a:	d4f7      	bmi.n	8011b7c <_vfiprintf_r+0x44>
 8011b8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011b8e:	f7fd fd13 	bl	800f5b8 <__retarget_lock_release_recursive>
 8011b92:	e7f3      	b.n	8011b7c <_vfiprintf_r+0x44>
 8011b94:	2300      	movs	r3, #0
 8011b96:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b98:	2320      	movs	r3, #32
 8011b9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011b9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ba2:	2330      	movs	r3, #48	@ 0x30
 8011ba4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011d54 <_vfiprintf_r+0x21c>
 8011ba8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011bac:	f04f 0901 	mov.w	r9, #1
 8011bb0:	4623      	mov	r3, r4
 8011bb2:	469a      	mov	sl, r3
 8011bb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011bb8:	b10a      	cbz	r2, 8011bbe <_vfiprintf_r+0x86>
 8011bba:	2a25      	cmp	r2, #37	@ 0x25
 8011bbc:	d1f9      	bne.n	8011bb2 <_vfiprintf_r+0x7a>
 8011bbe:	ebba 0b04 	subs.w	fp, sl, r4
 8011bc2:	d00b      	beq.n	8011bdc <_vfiprintf_r+0xa4>
 8011bc4:	465b      	mov	r3, fp
 8011bc6:	4622      	mov	r2, r4
 8011bc8:	4629      	mov	r1, r5
 8011bca:	4630      	mov	r0, r6
 8011bcc:	f7ff ffa2 	bl	8011b14 <__sfputs_r>
 8011bd0:	3001      	adds	r0, #1
 8011bd2:	f000 80a7 	beq.w	8011d24 <_vfiprintf_r+0x1ec>
 8011bd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011bd8:	445a      	add	r2, fp
 8011bda:	9209      	str	r2, [sp, #36]	@ 0x24
 8011bdc:	f89a 3000 	ldrb.w	r3, [sl]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	f000 809f 	beq.w	8011d24 <_vfiprintf_r+0x1ec>
 8011be6:	2300      	movs	r3, #0
 8011be8:	f04f 32ff 	mov.w	r2, #4294967295
 8011bec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011bf0:	f10a 0a01 	add.w	sl, sl, #1
 8011bf4:	9304      	str	r3, [sp, #16]
 8011bf6:	9307      	str	r3, [sp, #28]
 8011bf8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011bfc:	931a      	str	r3, [sp, #104]	@ 0x68
 8011bfe:	4654      	mov	r4, sl
 8011c00:	2205      	movs	r2, #5
 8011c02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c06:	4853      	ldr	r0, [pc, #332]	@ (8011d54 <_vfiprintf_r+0x21c>)
 8011c08:	f7ee fb02 	bl	8000210 <memchr>
 8011c0c:	9a04      	ldr	r2, [sp, #16]
 8011c0e:	b9d8      	cbnz	r0, 8011c48 <_vfiprintf_r+0x110>
 8011c10:	06d1      	lsls	r1, r2, #27
 8011c12:	bf44      	itt	mi
 8011c14:	2320      	movmi	r3, #32
 8011c16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011c1a:	0713      	lsls	r3, r2, #28
 8011c1c:	bf44      	itt	mi
 8011c1e:	232b      	movmi	r3, #43	@ 0x2b
 8011c20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011c24:	f89a 3000 	ldrb.w	r3, [sl]
 8011c28:	2b2a      	cmp	r3, #42	@ 0x2a
 8011c2a:	d015      	beq.n	8011c58 <_vfiprintf_r+0x120>
 8011c2c:	9a07      	ldr	r2, [sp, #28]
 8011c2e:	4654      	mov	r4, sl
 8011c30:	2000      	movs	r0, #0
 8011c32:	f04f 0c0a 	mov.w	ip, #10
 8011c36:	4621      	mov	r1, r4
 8011c38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011c3c:	3b30      	subs	r3, #48	@ 0x30
 8011c3e:	2b09      	cmp	r3, #9
 8011c40:	d94b      	bls.n	8011cda <_vfiprintf_r+0x1a2>
 8011c42:	b1b0      	cbz	r0, 8011c72 <_vfiprintf_r+0x13a>
 8011c44:	9207      	str	r2, [sp, #28]
 8011c46:	e014      	b.n	8011c72 <_vfiprintf_r+0x13a>
 8011c48:	eba0 0308 	sub.w	r3, r0, r8
 8011c4c:	fa09 f303 	lsl.w	r3, r9, r3
 8011c50:	4313      	orrs	r3, r2
 8011c52:	9304      	str	r3, [sp, #16]
 8011c54:	46a2      	mov	sl, r4
 8011c56:	e7d2      	b.n	8011bfe <_vfiprintf_r+0xc6>
 8011c58:	9b03      	ldr	r3, [sp, #12]
 8011c5a:	1d19      	adds	r1, r3, #4
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	9103      	str	r1, [sp, #12]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	bfbb      	ittet	lt
 8011c64:	425b      	neglt	r3, r3
 8011c66:	f042 0202 	orrlt.w	r2, r2, #2
 8011c6a:	9307      	strge	r3, [sp, #28]
 8011c6c:	9307      	strlt	r3, [sp, #28]
 8011c6e:	bfb8      	it	lt
 8011c70:	9204      	strlt	r2, [sp, #16]
 8011c72:	7823      	ldrb	r3, [r4, #0]
 8011c74:	2b2e      	cmp	r3, #46	@ 0x2e
 8011c76:	d10a      	bne.n	8011c8e <_vfiprintf_r+0x156>
 8011c78:	7863      	ldrb	r3, [r4, #1]
 8011c7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8011c7c:	d132      	bne.n	8011ce4 <_vfiprintf_r+0x1ac>
 8011c7e:	9b03      	ldr	r3, [sp, #12]
 8011c80:	1d1a      	adds	r2, r3, #4
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	9203      	str	r2, [sp, #12]
 8011c86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011c8a:	3402      	adds	r4, #2
 8011c8c:	9305      	str	r3, [sp, #20]
 8011c8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011d64 <_vfiprintf_r+0x22c>
 8011c92:	7821      	ldrb	r1, [r4, #0]
 8011c94:	2203      	movs	r2, #3
 8011c96:	4650      	mov	r0, sl
 8011c98:	f7ee faba 	bl	8000210 <memchr>
 8011c9c:	b138      	cbz	r0, 8011cae <_vfiprintf_r+0x176>
 8011c9e:	9b04      	ldr	r3, [sp, #16]
 8011ca0:	eba0 000a 	sub.w	r0, r0, sl
 8011ca4:	2240      	movs	r2, #64	@ 0x40
 8011ca6:	4082      	lsls	r2, r0
 8011ca8:	4313      	orrs	r3, r2
 8011caa:	3401      	adds	r4, #1
 8011cac:	9304      	str	r3, [sp, #16]
 8011cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cb2:	4829      	ldr	r0, [pc, #164]	@ (8011d58 <_vfiprintf_r+0x220>)
 8011cb4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011cb8:	2206      	movs	r2, #6
 8011cba:	f7ee faa9 	bl	8000210 <memchr>
 8011cbe:	2800      	cmp	r0, #0
 8011cc0:	d03f      	beq.n	8011d42 <_vfiprintf_r+0x20a>
 8011cc2:	4b26      	ldr	r3, [pc, #152]	@ (8011d5c <_vfiprintf_r+0x224>)
 8011cc4:	bb1b      	cbnz	r3, 8011d0e <_vfiprintf_r+0x1d6>
 8011cc6:	9b03      	ldr	r3, [sp, #12]
 8011cc8:	3307      	adds	r3, #7
 8011cca:	f023 0307 	bic.w	r3, r3, #7
 8011cce:	3308      	adds	r3, #8
 8011cd0:	9303      	str	r3, [sp, #12]
 8011cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011cd4:	443b      	add	r3, r7
 8011cd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8011cd8:	e76a      	b.n	8011bb0 <_vfiprintf_r+0x78>
 8011cda:	fb0c 3202 	mla	r2, ip, r2, r3
 8011cde:	460c      	mov	r4, r1
 8011ce0:	2001      	movs	r0, #1
 8011ce2:	e7a8      	b.n	8011c36 <_vfiprintf_r+0xfe>
 8011ce4:	2300      	movs	r3, #0
 8011ce6:	3401      	adds	r4, #1
 8011ce8:	9305      	str	r3, [sp, #20]
 8011cea:	4619      	mov	r1, r3
 8011cec:	f04f 0c0a 	mov.w	ip, #10
 8011cf0:	4620      	mov	r0, r4
 8011cf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011cf6:	3a30      	subs	r2, #48	@ 0x30
 8011cf8:	2a09      	cmp	r2, #9
 8011cfa:	d903      	bls.n	8011d04 <_vfiprintf_r+0x1cc>
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d0c6      	beq.n	8011c8e <_vfiprintf_r+0x156>
 8011d00:	9105      	str	r1, [sp, #20]
 8011d02:	e7c4      	b.n	8011c8e <_vfiprintf_r+0x156>
 8011d04:	fb0c 2101 	mla	r1, ip, r1, r2
 8011d08:	4604      	mov	r4, r0
 8011d0a:	2301      	movs	r3, #1
 8011d0c:	e7f0      	b.n	8011cf0 <_vfiprintf_r+0x1b8>
 8011d0e:	ab03      	add	r3, sp, #12
 8011d10:	9300      	str	r3, [sp, #0]
 8011d12:	462a      	mov	r2, r5
 8011d14:	4b12      	ldr	r3, [pc, #72]	@ (8011d60 <_vfiprintf_r+0x228>)
 8011d16:	a904      	add	r1, sp, #16
 8011d18:	4630      	mov	r0, r6
 8011d1a:	f7fc fc6f 	bl	800e5fc <_printf_float>
 8011d1e:	4607      	mov	r7, r0
 8011d20:	1c78      	adds	r0, r7, #1
 8011d22:	d1d6      	bne.n	8011cd2 <_vfiprintf_r+0x19a>
 8011d24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011d26:	07d9      	lsls	r1, r3, #31
 8011d28:	d405      	bmi.n	8011d36 <_vfiprintf_r+0x1fe>
 8011d2a:	89ab      	ldrh	r3, [r5, #12]
 8011d2c:	059a      	lsls	r2, r3, #22
 8011d2e:	d402      	bmi.n	8011d36 <_vfiprintf_r+0x1fe>
 8011d30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011d32:	f7fd fc41 	bl	800f5b8 <__retarget_lock_release_recursive>
 8011d36:	89ab      	ldrh	r3, [r5, #12]
 8011d38:	065b      	lsls	r3, r3, #25
 8011d3a:	f53f af1f 	bmi.w	8011b7c <_vfiprintf_r+0x44>
 8011d3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011d40:	e71e      	b.n	8011b80 <_vfiprintf_r+0x48>
 8011d42:	ab03      	add	r3, sp, #12
 8011d44:	9300      	str	r3, [sp, #0]
 8011d46:	462a      	mov	r2, r5
 8011d48:	4b05      	ldr	r3, [pc, #20]	@ (8011d60 <_vfiprintf_r+0x228>)
 8011d4a:	a904      	add	r1, sp, #16
 8011d4c:	4630      	mov	r0, r6
 8011d4e:	f7fc feed 	bl	800eb2c <_printf_i>
 8011d52:	e7e4      	b.n	8011d1e <_vfiprintf_r+0x1e6>
 8011d54:	080136b9 	.word	0x080136b9
 8011d58:	080136c3 	.word	0x080136c3
 8011d5c:	0800e5fd 	.word	0x0800e5fd
 8011d60:	08011b15 	.word	0x08011b15
 8011d64:	080136bf 	.word	0x080136bf

08011d68 <__swbuf_r>:
 8011d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d6a:	460e      	mov	r6, r1
 8011d6c:	4614      	mov	r4, r2
 8011d6e:	4605      	mov	r5, r0
 8011d70:	b118      	cbz	r0, 8011d7a <__swbuf_r+0x12>
 8011d72:	6a03      	ldr	r3, [r0, #32]
 8011d74:	b90b      	cbnz	r3, 8011d7a <__swbuf_r+0x12>
 8011d76:	f7fd fa99 	bl	800f2ac <__sinit>
 8011d7a:	69a3      	ldr	r3, [r4, #24]
 8011d7c:	60a3      	str	r3, [r4, #8]
 8011d7e:	89a3      	ldrh	r3, [r4, #12]
 8011d80:	071a      	lsls	r2, r3, #28
 8011d82:	d501      	bpl.n	8011d88 <__swbuf_r+0x20>
 8011d84:	6923      	ldr	r3, [r4, #16]
 8011d86:	b943      	cbnz	r3, 8011d9a <__swbuf_r+0x32>
 8011d88:	4621      	mov	r1, r4
 8011d8a:	4628      	mov	r0, r5
 8011d8c:	f000 f82a 	bl	8011de4 <__swsetup_r>
 8011d90:	b118      	cbz	r0, 8011d9a <__swbuf_r+0x32>
 8011d92:	f04f 37ff 	mov.w	r7, #4294967295
 8011d96:	4638      	mov	r0, r7
 8011d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d9a:	6823      	ldr	r3, [r4, #0]
 8011d9c:	6922      	ldr	r2, [r4, #16]
 8011d9e:	1a98      	subs	r0, r3, r2
 8011da0:	6963      	ldr	r3, [r4, #20]
 8011da2:	b2f6      	uxtb	r6, r6
 8011da4:	4283      	cmp	r3, r0
 8011da6:	4637      	mov	r7, r6
 8011da8:	dc05      	bgt.n	8011db6 <__swbuf_r+0x4e>
 8011daa:	4621      	mov	r1, r4
 8011dac:	4628      	mov	r0, r5
 8011dae:	f7ff fded 	bl	801198c <_fflush_r>
 8011db2:	2800      	cmp	r0, #0
 8011db4:	d1ed      	bne.n	8011d92 <__swbuf_r+0x2a>
 8011db6:	68a3      	ldr	r3, [r4, #8]
 8011db8:	3b01      	subs	r3, #1
 8011dba:	60a3      	str	r3, [r4, #8]
 8011dbc:	6823      	ldr	r3, [r4, #0]
 8011dbe:	1c5a      	adds	r2, r3, #1
 8011dc0:	6022      	str	r2, [r4, #0]
 8011dc2:	701e      	strb	r6, [r3, #0]
 8011dc4:	6962      	ldr	r2, [r4, #20]
 8011dc6:	1c43      	adds	r3, r0, #1
 8011dc8:	429a      	cmp	r2, r3
 8011dca:	d004      	beq.n	8011dd6 <__swbuf_r+0x6e>
 8011dcc:	89a3      	ldrh	r3, [r4, #12]
 8011dce:	07db      	lsls	r3, r3, #31
 8011dd0:	d5e1      	bpl.n	8011d96 <__swbuf_r+0x2e>
 8011dd2:	2e0a      	cmp	r6, #10
 8011dd4:	d1df      	bne.n	8011d96 <__swbuf_r+0x2e>
 8011dd6:	4621      	mov	r1, r4
 8011dd8:	4628      	mov	r0, r5
 8011dda:	f7ff fdd7 	bl	801198c <_fflush_r>
 8011dde:	2800      	cmp	r0, #0
 8011de0:	d0d9      	beq.n	8011d96 <__swbuf_r+0x2e>
 8011de2:	e7d6      	b.n	8011d92 <__swbuf_r+0x2a>

08011de4 <__swsetup_r>:
 8011de4:	b538      	push	{r3, r4, r5, lr}
 8011de6:	4b29      	ldr	r3, [pc, #164]	@ (8011e8c <__swsetup_r+0xa8>)
 8011de8:	4605      	mov	r5, r0
 8011dea:	6818      	ldr	r0, [r3, #0]
 8011dec:	460c      	mov	r4, r1
 8011dee:	b118      	cbz	r0, 8011df8 <__swsetup_r+0x14>
 8011df0:	6a03      	ldr	r3, [r0, #32]
 8011df2:	b90b      	cbnz	r3, 8011df8 <__swsetup_r+0x14>
 8011df4:	f7fd fa5a 	bl	800f2ac <__sinit>
 8011df8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011dfc:	0719      	lsls	r1, r3, #28
 8011dfe:	d422      	bmi.n	8011e46 <__swsetup_r+0x62>
 8011e00:	06da      	lsls	r2, r3, #27
 8011e02:	d407      	bmi.n	8011e14 <__swsetup_r+0x30>
 8011e04:	2209      	movs	r2, #9
 8011e06:	602a      	str	r2, [r5, #0]
 8011e08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e0c:	81a3      	strh	r3, [r4, #12]
 8011e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8011e12:	e033      	b.n	8011e7c <__swsetup_r+0x98>
 8011e14:	0758      	lsls	r0, r3, #29
 8011e16:	d512      	bpl.n	8011e3e <__swsetup_r+0x5a>
 8011e18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011e1a:	b141      	cbz	r1, 8011e2e <__swsetup_r+0x4a>
 8011e1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011e20:	4299      	cmp	r1, r3
 8011e22:	d002      	beq.n	8011e2a <__swsetup_r+0x46>
 8011e24:	4628      	mov	r0, r5
 8011e26:	f7fe fa4f 	bl	80102c8 <_free_r>
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8011e2e:	89a3      	ldrh	r3, [r4, #12]
 8011e30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011e34:	81a3      	strh	r3, [r4, #12]
 8011e36:	2300      	movs	r3, #0
 8011e38:	6063      	str	r3, [r4, #4]
 8011e3a:	6923      	ldr	r3, [r4, #16]
 8011e3c:	6023      	str	r3, [r4, #0]
 8011e3e:	89a3      	ldrh	r3, [r4, #12]
 8011e40:	f043 0308 	orr.w	r3, r3, #8
 8011e44:	81a3      	strh	r3, [r4, #12]
 8011e46:	6923      	ldr	r3, [r4, #16]
 8011e48:	b94b      	cbnz	r3, 8011e5e <__swsetup_r+0x7a>
 8011e4a:	89a3      	ldrh	r3, [r4, #12]
 8011e4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011e50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011e54:	d003      	beq.n	8011e5e <__swsetup_r+0x7a>
 8011e56:	4621      	mov	r1, r4
 8011e58:	4628      	mov	r0, r5
 8011e5a:	f000 f88b 	bl	8011f74 <__smakebuf_r>
 8011e5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e62:	f013 0201 	ands.w	r2, r3, #1
 8011e66:	d00a      	beq.n	8011e7e <__swsetup_r+0x9a>
 8011e68:	2200      	movs	r2, #0
 8011e6a:	60a2      	str	r2, [r4, #8]
 8011e6c:	6962      	ldr	r2, [r4, #20]
 8011e6e:	4252      	negs	r2, r2
 8011e70:	61a2      	str	r2, [r4, #24]
 8011e72:	6922      	ldr	r2, [r4, #16]
 8011e74:	b942      	cbnz	r2, 8011e88 <__swsetup_r+0xa4>
 8011e76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011e7a:	d1c5      	bne.n	8011e08 <__swsetup_r+0x24>
 8011e7c:	bd38      	pop	{r3, r4, r5, pc}
 8011e7e:	0799      	lsls	r1, r3, #30
 8011e80:	bf58      	it	pl
 8011e82:	6962      	ldrpl	r2, [r4, #20]
 8011e84:	60a2      	str	r2, [r4, #8]
 8011e86:	e7f4      	b.n	8011e72 <__swsetup_r+0x8e>
 8011e88:	2000      	movs	r0, #0
 8011e8a:	e7f7      	b.n	8011e7c <__swsetup_r+0x98>
 8011e8c:	20000198 	.word	0x20000198

08011e90 <_raise_r>:
 8011e90:	291f      	cmp	r1, #31
 8011e92:	b538      	push	{r3, r4, r5, lr}
 8011e94:	4605      	mov	r5, r0
 8011e96:	460c      	mov	r4, r1
 8011e98:	d904      	bls.n	8011ea4 <_raise_r+0x14>
 8011e9a:	2316      	movs	r3, #22
 8011e9c:	6003      	str	r3, [r0, #0]
 8011e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8011ea2:	bd38      	pop	{r3, r4, r5, pc}
 8011ea4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011ea6:	b112      	cbz	r2, 8011eae <_raise_r+0x1e>
 8011ea8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011eac:	b94b      	cbnz	r3, 8011ec2 <_raise_r+0x32>
 8011eae:	4628      	mov	r0, r5
 8011eb0:	f000 f830 	bl	8011f14 <_getpid_r>
 8011eb4:	4622      	mov	r2, r4
 8011eb6:	4601      	mov	r1, r0
 8011eb8:	4628      	mov	r0, r5
 8011eba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ebe:	f000 b817 	b.w	8011ef0 <_kill_r>
 8011ec2:	2b01      	cmp	r3, #1
 8011ec4:	d00a      	beq.n	8011edc <_raise_r+0x4c>
 8011ec6:	1c59      	adds	r1, r3, #1
 8011ec8:	d103      	bne.n	8011ed2 <_raise_r+0x42>
 8011eca:	2316      	movs	r3, #22
 8011ecc:	6003      	str	r3, [r0, #0]
 8011ece:	2001      	movs	r0, #1
 8011ed0:	e7e7      	b.n	8011ea2 <_raise_r+0x12>
 8011ed2:	2100      	movs	r1, #0
 8011ed4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011ed8:	4620      	mov	r0, r4
 8011eda:	4798      	blx	r3
 8011edc:	2000      	movs	r0, #0
 8011ede:	e7e0      	b.n	8011ea2 <_raise_r+0x12>

08011ee0 <raise>:
 8011ee0:	4b02      	ldr	r3, [pc, #8]	@ (8011eec <raise+0xc>)
 8011ee2:	4601      	mov	r1, r0
 8011ee4:	6818      	ldr	r0, [r3, #0]
 8011ee6:	f7ff bfd3 	b.w	8011e90 <_raise_r>
 8011eea:	bf00      	nop
 8011eec:	20000198 	.word	0x20000198

08011ef0 <_kill_r>:
 8011ef0:	b538      	push	{r3, r4, r5, lr}
 8011ef2:	4d07      	ldr	r5, [pc, #28]	@ (8011f10 <_kill_r+0x20>)
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	4604      	mov	r4, r0
 8011ef8:	4608      	mov	r0, r1
 8011efa:	4611      	mov	r1, r2
 8011efc:	602b      	str	r3, [r5, #0]
 8011efe:	f7f5 fa18 	bl	8007332 <_kill>
 8011f02:	1c43      	adds	r3, r0, #1
 8011f04:	d102      	bne.n	8011f0c <_kill_r+0x1c>
 8011f06:	682b      	ldr	r3, [r5, #0]
 8011f08:	b103      	cbz	r3, 8011f0c <_kill_r+0x1c>
 8011f0a:	6023      	str	r3, [r4, #0]
 8011f0c:	bd38      	pop	{r3, r4, r5, pc}
 8011f0e:	bf00      	nop
 8011f10:	20003cc0 	.word	0x20003cc0

08011f14 <_getpid_r>:
 8011f14:	f7f5 ba05 	b.w	8007322 <_getpid>

08011f18 <_malloc_usable_size_r>:
 8011f18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f1c:	1f18      	subs	r0, r3, #4
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	bfbc      	itt	lt
 8011f22:	580b      	ldrlt	r3, [r1, r0]
 8011f24:	18c0      	addlt	r0, r0, r3
 8011f26:	4770      	bx	lr

08011f28 <__swhatbuf_r>:
 8011f28:	b570      	push	{r4, r5, r6, lr}
 8011f2a:	460c      	mov	r4, r1
 8011f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f30:	2900      	cmp	r1, #0
 8011f32:	b096      	sub	sp, #88	@ 0x58
 8011f34:	4615      	mov	r5, r2
 8011f36:	461e      	mov	r6, r3
 8011f38:	da0d      	bge.n	8011f56 <__swhatbuf_r+0x2e>
 8011f3a:	89a3      	ldrh	r3, [r4, #12]
 8011f3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011f40:	f04f 0100 	mov.w	r1, #0
 8011f44:	bf14      	ite	ne
 8011f46:	2340      	movne	r3, #64	@ 0x40
 8011f48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011f4c:	2000      	movs	r0, #0
 8011f4e:	6031      	str	r1, [r6, #0]
 8011f50:	602b      	str	r3, [r5, #0]
 8011f52:	b016      	add	sp, #88	@ 0x58
 8011f54:	bd70      	pop	{r4, r5, r6, pc}
 8011f56:	466a      	mov	r2, sp
 8011f58:	f000 f848 	bl	8011fec <_fstat_r>
 8011f5c:	2800      	cmp	r0, #0
 8011f5e:	dbec      	blt.n	8011f3a <__swhatbuf_r+0x12>
 8011f60:	9901      	ldr	r1, [sp, #4]
 8011f62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011f66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011f6a:	4259      	negs	r1, r3
 8011f6c:	4159      	adcs	r1, r3
 8011f6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011f72:	e7eb      	b.n	8011f4c <__swhatbuf_r+0x24>

08011f74 <__smakebuf_r>:
 8011f74:	898b      	ldrh	r3, [r1, #12]
 8011f76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011f78:	079d      	lsls	r5, r3, #30
 8011f7a:	4606      	mov	r6, r0
 8011f7c:	460c      	mov	r4, r1
 8011f7e:	d507      	bpl.n	8011f90 <__smakebuf_r+0x1c>
 8011f80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011f84:	6023      	str	r3, [r4, #0]
 8011f86:	6123      	str	r3, [r4, #16]
 8011f88:	2301      	movs	r3, #1
 8011f8a:	6163      	str	r3, [r4, #20]
 8011f8c:	b003      	add	sp, #12
 8011f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f90:	ab01      	add	r3, sp, #4
 8011f92:	466a      	mov	r2, sp
 8011f94:	f7ff ffc8 	bl	8011f28 <__swhatbuf_r>
 8011f98:	9f00      	ldr	r7, [sp, #0]
 8011f9a:	4605      	mov	r5, r0
 8011f9c:	4639      	mov	r1, r7
 8011f9e:	4630      	mov	r0, r6
 8011fa0:	f7fe fd40 	bl	8010a24 <_malloc_r>
 8011fa4:	b948      	cbnz	r0, 8011fba <__smakebuf_r+0x46>
 8011fa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011faa:	059a      	lsls	r2, r3, #22
 8011fac:	d4ee      	bmi.n	8011f8c <__smakebuf_r+0x18>
 8011fae:	f023 0303 	bic.w	r3, r3, #3
 8011fb2:	f043 0302 	orr.w	r3, r3, #2
 8011fb6:	81a3      	strh	r3, [r4, #12]
 8011fb8:	e7e2      	b.n	8011f80 <__smakebuf_r+0xc>
 8011fba:	89a3      	ldrh	r3, [r4, #12]
 8011fbc:	6020      	str	r0, [r4, #0]
 8011fbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011fc2:	81a3      	strh	r3, [r4, #12]
 8011fc4:	9b01      	ldr	r3, [sp, #4]
 8011fc6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011fca:	b15b      	cbz	r3, 8011fe4 <__smakebuf_r+0x70>
 8011fcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011fd0:	4630      	mov	r0, r6
 8011fd2:	f000 f81d 	bl	8012010 <_isatty_r>
 8011fd6:	b128      	cbz	r0, 8011fe4 <__smakebuf_r+0x70>
 8011fd8:	89a3      	ldrh	r3, [r4, #12]
 8011fda:	f023 0303 	bic.w	r3, r3, #3
 8011fde:	f043 0301 	orr.w	r3, r3, #1
 8011fe2:	81a3      	strh	r3, [r4, #12]
 8011fe4:	89a3      	ldrh	r3, [r4, #12]
 8011fe6:	431d      	orrs	r5, r3
 8011fe8:	81a5      	strh	r5, [r4, #12]
 8011fea:	e7cf      	b.n	8011f8c <__smakebuf_r+0x18>

08011fec <_fstat_r>:
 8011fec:	b538      	push	{r3, r4, r5, lr}
 8011fee:	4d07      	ldr	r5, [pc, #28]	@ (801200c <_fstat_r+0x20>)
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	4604      	mov	r4, r0
 8011ff4:	4608      	mov	r0, r1
 8011ff6:	4611      	mov	r1, r2
 8011ff8:	602b      	str	r3, [r5, #0]
 8011ffa:	f7f5 f9fa 	bl	80073f2 <_fstat>
 8011ffe:	1c43      	adds	r3, r0, #1
 8012000:	d102      	bne.n	8012008 <_fstat_r+0x1c>
 8012002:	682b      	ldr	r3, [r5, #0]
 8012004:	b103      	cbz	r3, 8012008 <_fstat_r+0x1c>
 8012006:	6023      	str	r3, [r4, #0]
 8012008:	bd38      	pop	{r3, r4, r5, pc}
 801200a:	bf00      	nop
 801200c:	20003cc0 	.word	0x20003cc0

08012010 <_isatty_r>:
 8012010:	b538      	push	{r3, r4, r5, lr}
 8012012:	4d06      	ldr	r5, [pc, #24]	@ (801202c <_isatty_r+0x1c>)
 8012014:	2300      	movs	r3, #0
 8012016:	4604      	mov	r4, r0
 8012018:	4608      	mov	r0, r1
 801201a:	602b      	str	r3, [r5, #0]
 801201c:	f7f5 f9f9 	bl	8007412 <_isatty>
 8012020:	1c43      	adds	r3, r0, #1
 8012022:	d102      	bne.n	801202a <_isatty_r+0x1a>
 8012024:	682b      	ldr	r3, [r5, #0]
 8012026:	b103      	cbz	r3, 801202a <_isatty_r+0x1a>
 8012028:	6023      	str	r3, [r4, #0]
 801202a:	bd38      	pop	{r3, r4, r5, pc}
 801202c:	20003cc0 	.word	0x20003cc0

08012030 <sqrtf>:
 8012030:	b508      	push	{r3, lr}
 8012032:	ed2d 8b02 	vpush	{d8}
 8012036:	eeb0 8a40 	vmov.f32	s16, s0
 801203a:	f000 f97d 	bl	8012338 <__ieee754_sqrtf>
 801203e:	eeb4 8a48 	vcmp.f32	s16, s16
 8012042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012046:	d60c      	bvs.n	8012062 <sqrtf+0x32>
 8012048:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8012068 <sqrtf+0x38>
 801204c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012054:	d505      	bpl.n	8012062 <sqrtf+0x32>
 8012056:	f7fd fa83 	bl	800f560 <__errno>
 801205a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801205e:	2321      	movs	r3, #33	@ 0x21
 8012060:	6003      	str	r3, [r0, #0]
 8012062:	ecbd 8b02 	vpop	{d8}
 8012066:	bd08      	pop	{r3, pc}
 8012068:	00000000 	.word	0x00000000

0801206c <atanf>:
 801206c:	b538      	push	{r3, r4, r5, lr}
 801206e:	ee10 5a10 	vmov	r5, s0
 8012072:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8012076:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 801207a:	eef0 7a40 	vmov.f32	s15, s0
 801207e:	d310      	bcc.n	80120a2 <atanf+0x36>
 8012080:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8012084:	d904      	bls.n	8012090 <atanf+0x24>
 8012086:	ee70 7a00 	vadd.f32	s15, s0, s0
 801208a:	eeb0 0a67 	vmov.f32	s0, s15
 801208e:	bd38      	pop	{r3, r4, r5, pc}
 8012090:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80121c8 <atanf+0x15c>
 8012094:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80121cc <atanf+0x160>
 8012098:	2d00      	cmp	r5, #0
 801209a:	bfc8      	it	gt
 801209c:	eef0 7a47 	vmovgt.f32	s15, s14
 80120a0:	e7f3      	b.n	801208a <atanf+0x1e>
 80120a2:	4b4b      	ldr	r3, [pc, #300]	@ (80121d0 <atanf+0x164>)
 80120a4:	429c      	cmp	r4, r3
 80120a6:	d810      	bhi.n	80120ca <atanf+0x5e>
 80120a8:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80120ac:	d20a      	bcs.n	80120c4 <atanf+0x58>
 80120ae:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80121d4 <atanf+0x168>
 80120b2:	ee30 7a07 	vadd.f32	s14, s0, s14
 80120b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80120ba:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80120be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120c2:	dce2      	bgt.n	801208a <atanf+0x1e>
 80120c4:	f04f 33ff 	mov.w	r3, #4294967295
 80120c8:	e013      	b.n	80120f2 <atanf+0x86>
 80120ca:	f000 f8e7 	bl	801229c <fabsf>
 80120ce:	4b42      	ldr	r3, [pc, #264]	@ (80121d8 <atanf+0x16c>)
 80120d0:	429c      	cmp	r4, r3
 80120d2:	d84f      	bhi.n	8012174 <atanf+0x108>
 80120d4:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80120d8:	429c      	cmp	r4, r3
 80120da:	d841      	bhi.n	8012160 <atanf+0xf4>
 80120dc:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80120e0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80120e4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80120e8:	2300      	movs	r3, #0
 80120ea:	ee30 0a27 	vadd.f32	s0, s0, s15
 80120ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80120f2:	1c5a      	adds	r2, r3, #1
 80120f4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80120f8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80121dc <atanf+0x170>
 80120fc:	eddf 5a38 	vldr	s11, [pc, #224]	@ 80121e0 <atanf+0x174>
 8012100:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 80121e4 <atanf+0x178>
 8012104:	ee66 6a06 	vmul.f32	s13, s12, s12
 8012108:	eee6 5a87 	vfma.f32	s11, s13, s14
 801210c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80121e8 <atanf+0x17c>
 8012110:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8012114:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80121ec <atanf+0x180>
 8012118:	eee7 5a26 	vfma.f32	s11, s14, s13
 801211c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80121f0 <atanf+0x184>
 8012120:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8012124:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80121f4 <atanf+0x188>
 8012128:	eee7 5a26 	vfma.f32	s11, s14, s13
 801212c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80121f8 <atanf+0x18c>
 8012130:	eea6 5a87 	vfma.f32	s10, s13, s14
 8012134:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80121fc <atanf+0x190>
 8012138:	eea5 7a26 	vfma.f32	s14, s10, s13
 801213c:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8012200 <atanf+0x194>
 8012140:	eea7 5a26 	vfma.f32	s10, s14, s13
 8012144:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8012204 <atanf+0x198>
 8012148:	eea5 7a26 	vfma.f32	s14, s10, s13
 801214c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012150:	eea5 7a86 	vfma.f32	s14, s11, s12
 8012154:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012158:	d121      	bne.n	801219e <atanf+0x132>
 801215a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801215e:	e794      	b.n	801208a <atanf+0x1e>
 8012160:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012164:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012168:	ee30 0a27 	vadd.f32	s0, s0, s15
 801216c:	2301      	movs	r3, #1
 801216e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012172:	e7be      	b.n	80120f2 <atanf+0x86>
 8012174:	4b24      	ldr	r3, [pc, #144]	@ (8012208 <atanf+0x19c>)
 8012176:	429c      	cmp	r4, r3
 8012178:	d80b      	bhi.n	8012192 <atanf+0x126>
 801217a:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 801217e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012182:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012186:	2302      	movs	r3, #2
 8012188:	ee70 6a67 	vsub.f32	s13, s0, s15
 801218c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012190:	e7af      	b.n	80120f2 <atanf+0x86>
 8012192:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8012196:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801219a:	2303      	movs	r3, #3
 801219c:	e7a9      	b.n	80120f2 <atanf+0x86>
 801219e:	4a1b      	ldr	r2, [pc, #108]	@ (801220c <atanf+0x1a0>)
 80121a0:	491b      	ldr	r1, [pc, #108]	@ (8012210 <atanf+0x1a4>)
 80121a2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80121a6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80121aa:	edd3 6a00 	vldr	s13, [r3]
 80121ae:	ee37 7a66 	vsub.f32	s14, s14, s13
 80121b2:	2d00      	cmp	r5, #0
 80121b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80121b8:	edd2 7a00 	vldr	s15, [r2]
 80121bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80121c0:	bfb8      	it	lt
 80121c2:	eef1 7a67 	vneglt.f32	s15, s15
 80121c6:	e760      	b.n	801208a <atanf+0x1e>
 80121c8:	bfc90fdb 	.word	0xbfc90fdb
 80121cc:	3fc90fdb 	.word	0x3fc90fdb
 80121d0:	3edfffff 	.word	0x3edfffff
 80121d4:	7149f2ca 	.word	0x7149f2ca
 80121d8:	3f97ffff 	.word	0x3f97ffff
 80121dc:	3c8569d7 	.word	0x3c8569d7
 80121e0:	3d4bda59 	.word	0x3d4bda59
 80121e4:	bd6ef16b 	.word	0xbd6ef16b
 80121e8:	3d886b35 	.word	0x3d886b35
 80121ec:	3dba2e6e 	.word	0x3dba2e6e
 80121f0:	3e124925 	.word	0x3e124925
 80121f4:	3eaaaaab 	.word	0x3eaaaaab
 80121f8:	bd15a221 	.word	0xbd15a221
 80121fc:	bd9d8795 	.word	0xbd9d8795
 8012200:	bde38e38 	.word	0xbde38e38
 8012204:	be4ccccd 	.word	0xbe4ccccd
 8012208:	401bffff 	.word	0x401bffff
 801220c:	080136dc 	.word	0x080136dc
 8012210:	080136cc 	.word	0x080136cc

08012214 <cosf>:
 8012214:	ee10 3a10 	vmov	r3, s0
 8012218:	b507      	push	{r0, r1, r2, lr}
 801221a:	4a1e      	ldr	r2, [pc, #120]	@ (8012294 <cosf+0x80>)
 801221c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012220:	4293      	cmp	r3, r2
 8012222:	d806      	bhi.n	8012232 <cosf+0x1e>
 8012224:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8012298 <cosf+0x84>
 8012228:	b003      	add	sp, #12
 801222a:	f85d eb04 	ldr.w	lr, [sp], #4
 801222e:	f000 b887 	b.w	8012340 <__kernel_cosf>
 8012232:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012236:	d304      	bcc.n	8012242 <cosf+0x2e>
 8012238:	ee30 0a40 	vsub.f32	s0, s0, s0
 801223c:	b003      	add	sp, #12
 801223e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012242:	4668      	mov	r0, sp
 8012244:	f000 f91c 	bl	8012480 <__ieee754_rem_pio2f>
 8012248:	f000 0003 	and.w	r0, r0, #3
 801224c:	2801      	cmp	r0, #1
 801224e:	d009      	beq.n	8012264 <cosf+0x50>
 8012250:	2802      	cmp	r0, #2
 8012252:	d010      	beq.n	8012276 <cosf+0x62>
 8012254:	b9b0      	cbnz	r0, 8012284 <cosf+0x70>
 8012256:	eddd 0a01 	vldr	s1, [sp, #4]
 801225a:	ed9d 0a00 	vldr	s0, [sp]
 801225e:	f000 f86f 	bl	8012340 <__kernel_cosf>
 8012262:	e7eb      	b.n	801223c <cosf+0x28>
 8012264:	eddd 0a01 	vldr	s1, [sp, #4]
 8012268:	ed9d 0a00 	vldr	s0, [sp]
 801226c:	f000 f8c0 	bl	80123f0 <__kernel_sinf>
 8012270:	eeb1 0a40 	vneg.f32	s0, s0
 8012274:	e7e2      	b.n	801223c <cosf+0x28>
 8012276:	eddd 0a01 	vldr	s1, [sp, #4]
 801227a:	ed9d 0a00 	vldr	s0, [sp]
 801227e:	f000 f85f 	bl	8012340 <__kernel_cosf>
 8012282:	e7f5      	b.n	8012270 <cosf+0x5c>
 8012284:	eddd 0a01 	vldr	s1, [sp, #4]
 8012288:	ed9d 0a00 	vldr	s0, [sp]
 801228c:	2001      	movs	r0, #1
 801228e:	f000 f8af 	bl	80123f0 <__kernel_sinf>
 8012292:	e7d3      	b.n	801223c <cosf+0x28>
 8012294:	3f490fd8 	.word	0x3f490fd8
 8012298:	00000000 	.word	0x00000000

0801229c <fabsf>:
 801229c:	ee10 3a10 	vmov	r3, s0
 80122a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80122a4:	ee00 3a10 	vmov	s0, r3
 80122a8:	4770      	bx	lr
	...

080122ac <sinf>:
 80122ac:	ee10 3a10 	vmov	r3, s0
 80122b0:	b507      	push	{r0, r1, r2, lr}
 80122b2:	4a1f      	ldr	r2, [pc, #124]	@ (8012330 <sinf+0x84>)
 80122b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80122b8:	4293      	cmp	r3, r2
 80122ba:	d807      	bhi.n	80122cc <sinf+0x20>
 80122bc:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8012334 <sinf+0x88>
 80122c0:	2000      	movs	r0, #0
 80122c2:	b003      	add	sp, #12
 80122c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80122c8:	f000 b892 	b.w	80123f0 <__kernel_sinf>
 80122cc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80122d0:	d304      	bcc.n	80122dc <sinf+0x30>
 80122d2:	ee30 0a40 	vsub.f32	s0, s0, s0
 80122d6:	b003      	add	sp, #12
 80122d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80122dc:	4668      	mov	r0, sp
 80122de:	f000 f8cf 	bl	8012480 <__ieee754_rem_pio2f>
 80122e2:	f000 0003 	and.w	r0, r0, #3
 80122e6:	2801      	cmp	r0, #1
 80122e8:	d00a      	beq.n	8012300 <sinf+0x54>
 80122ea:	2802      	cmp	r0, #2
 80122ec:	d00f      	beq.n	801230e <sinf+0x62>
 80122ee:	b9c0      	cbnz	r0, 8012322 <sinf+0x76>
 80122f0:	eddd 0a01 	vldr	s1, [sp, #4]
 80122f4:	ed9d 0a00 	vldr	s0, [sp]
 80122f8:	2001      	movs	r0, #1
 80122fa:	f000 f879 	bl	80123f0 <__kernel_sinf>
 80122fe:	e7ea      	b.n	80122d6 <sinf+0x2a>
 8012300:	eddd 0a01 	vldr	s1, [sp, #4]
 8012304:	ed9d 0a00 	vldr	s0, [sp]
 8012308:	f000 f81a 	bl	8012340 <__kernel_cosf>
 801230c:	e7e3      	b.n	80122d6 <sinf+0x2a>
 801230e:	eddd 0a01 	vldr	s1, [sp, #4]
 8012312:	ed9d 0a00 	vldr	s0, [sp]
 8012316:	2001      	movs	r0, #1
 8012318:	f000 f86a 	bl	80123f0 <__kernel_sinf>
 801231c:	eeb1 0a40 	vneg.f32	s0, s0
 8012320:	e7d9      	b.n	80122d6 <sinf+0x2a>
 8012322:	eddd 0a01 	vldr	s1, [sp, #4]
 8012326:	ed9d 0a00 	vldr	s0, [sp]
 801232a:	f000 f809 	bl	8012340 <__kernel_cosf>
 801232e:	e7f5      	b.n	801231c <sinf+0x70>
 8012330:	3f490fd8 	.word	0x3f490fd8
 8012334:	00000000 	.word	0x00000000

08012338 <__ieee754_sqrtf>:
 8012338:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801233c:	4770      	bx	lr
	...

08012340 <__kernel_cosf>:
 8012340:	ee10 3a10 	vmov	r3, s0
 8012344:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012348:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801234c:	eef0 6a40 	vmov.f32	s13, s0
 8012350:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012354:	d204      	bcs.n	8012360 <__kernel_cosf+0x20>
 8012356:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801235a:	ee17 2a90 	vmov	r2, s15
 801235e:	b342      	cbz	r2, 80123b2 <__kernel_cosf+0x72>
 8012360:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8012364:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80123d0 <__kernel_cosf+0x90>
 8012368:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80123d4 <__kernel_cosf+0x94>
 801236c:	4a1a      	ldr	r2, [pc, #104]	@ (80123d8 <__kernel_cosf+0x98>)
 801236e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012372:	4293      	cmp	r3, r2
 8012374:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80123dc <__kernel_cosf+0x9c>
 8012378:	eee6 7a07 	vfma.f32	s15, s12, s14
 801237c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80123e0 <__kernel_cosf+0xa0>
 8012380:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012384:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80123e4 <__kernel_cosf+0xa4>
 8012388:	eee6 7a07 	vfma.f32	s15, s12, s14
 801238c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80123e8 <__kernel_cosf+0xa8>
 8012390:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012394:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8012398:	ee26 6a07 	vmul.f32	s12, s12, s14
 801239c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80123a0:	eee7 0a06 	vfma.f32	s1, s14, s12
 80123a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80123a8:	d804      	bhi.n	80123b4 <__kernel_cosf+0x74>
 80123aa:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80123ae:	ee30 0a67 	vsub.f32	s0, s0, s15
 80123b2:	4770      	bx	lr
 80123b4:	4a0d      	ldr	r2, [pc, #52]	@ (80123ec <__kernel_cosf+0xac>)
 80123b6:	4293      	cmp	r3, r2
 80123b8:	bf9a      	itte	ls
 80123ba:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80123be:	ee07 3a10 	vmovls	s14, r3
 80123c2:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80123c6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80123ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80123ce:	e7ec      	b.n	80123aa <__kernel_cosf+0x6a>
 80123d0:	ad47d74e 	.word	0xad47d74e
 80123d4:	310f74f6 	.word	0x310f74f6
 80123d8:	3e999999 	.word	0x3e999999
 80123dc:	b493f27c 	.word	0xb493f27c
 80123e0:	37d00d01 	.word	0x37d00d01
 80123e4:	bab60b61 	.word	0xbab60b61
 80123e8:	3d2aaaab 	.word	0x3d2aaaab
 80123ec:	3f480000 	.word	0x3f480000

080123f0 <__kernel_sinf>:
 80123f0:	ee10 3a10 	vmov	r3, s0
 80123f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80123f8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80123fc:	d204      	bcs.n	8012408 <__kernel_sinf+0x18>
 80123fe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012402:	ee17 3a90 	vmov	r3, s15
 8012406:	b35b      	cbz	r3, 8012460 <__kernel_sinf+0x70>
 8012408:	ee20 7a00 	vmul.f32	s14, s0, s0
 801240c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8012464 <__kernel_sinf+0x74>
 8012410:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8012468 <__kernel_sinf+0x78>
 8012414:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012418:	eddf 7a14 	vldr	s15, [pc, #80]	@ 801246c <__kernel_sinf+0x7c>
 801241c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012420:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8012470 <__kernel_sinf+0x80>
 8012424:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012428:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8012474 <__kernel_sinf+0x84>
 801242c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8012430:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012434:	b930      	cbnz	r0, 8012444 <__kernel_sinf+0x54>
 8012436:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8012478 <__kernel_sinf+0x88>
 801243a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801243e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8012442:	4770      	bx	lr
 8012444:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8012448:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801244c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8012450:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8012454:	eddf 7a09 	vldr	s15, [pc, #36]	@ 801247c <__kernel_sinf+0x8c>
 8012458:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801245c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8012460:	4770      	bx	lr
 8012462:	bf00      	nop
 8012464:	2f2ec9d3 	.word	0x2f2ec9d3
 8012468:	b2d72f34 	.word	0xb2d72f34
 801246c:	3638ef1b 	.word	0x3638ef1b
 8012470:	b9500d01 	.word	0xb9500d01
 8012474:	3c088889 	.word	0x3c088889
 8012478:	be2aaaab 	.word	0xbe2aaaab
 801247c:	3e2aaaab 	.word	0x3e2aaaab

08012480 <__ieee754_rem_pio2f>:
 8012480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012482:	ee10 6a10 	vmov	r6, s0
 8012486:	4b88      	ldr	r3, [pc, #544]	@ (80126a8 <__ieee754_rem_pio2f+0x228>)
 8012488:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 801248c:	429d      	cmp	r5, r3
 801248e:	b087      	sub	sp, #28
 8012490:	4604      	mov	r4, r0
 8012492:	d805      	bhi.n	80124a0 <__ieee754_rem_pio2f+0x20>
 8012494:	2300      	movs	r3, #0
 8012496:	ed80 0a00 	vstr	s0, [r0]
 801249a:	6043      	str	r3, [r0, #4]
 801249c:	2000      	movs	r0, #0
 801249e:	e022      	b.n	80124e6 <__ieee754_rem_pio2f+0x66>
 80124a0:	4b82      	ldr	r3, [pc, #520]	@ (80126ac <__ieee754_rem_pio2f+0x22c>)
 80124a2:	429d      	cmp	r5, r3
 80124a4:	d83a      	bhi.n	801251c <__ieee754_rem_pio2f+0x9c>
 80124a6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80124aa:	2e00      	cmp	r6, #0
 80124ac:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80126b0 <__ieee754_rem_pio2f+0x230>
 80124b0:	4a80      	ldr	r2, [pc, #512]	@ (80126b4 <__ieee754_rem_pio2f+0x234>)
 80124b2:	f023 030f 	bic.w	r3, r3, #15
 80124b6:	dd18      	ble.n	80124ea <__ieee754_rem_pio2f+0x6a>
 80124b8:	4293      	cmp	r3, r2
 80124ba:	ee70 7a47 	vsub.f32	s15, s0, s14
 80124be:	bf09      	itett	eq
 80124c0:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80126b8 <__ieee754_rem_pio2f+0x238>
 80124c4:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80126bc <__ieee754_rem_pio2f+0x23c>
 80124c8:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80126c0 <__ieee754_rem_pio2f+0x240>
 80124cc:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80124d0:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80124d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80124d8:	ed80 7a00 	vstr	s14, [r0]
 80124dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80124e0:	edc0 7a01 	vstr	s15, [r0, #4]
 80124e4:	2001      	movs	r0, #1
 80124e6:	b007      	add	sp, #28
 80124e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124ea:	4293      	cmp	r3, r2
 80124ec:	ee70 7a07 	vadd.f32	s15, s0, s14
 80124f0:	bf09      	itett	eq
 80124f2:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80126b8 <__ieee754_rem_pio2f+0x238>
 80124f6:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80126bc <__ieee754_rem_pio2f+0x23c>
 80124fa:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80126c0 <__ieee754_rem_pio2f+0x240>
 80124fe:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8012502:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012506:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801250a:	ed80 7a00 	vstr	s14, [r0]
 801250e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012512:	edc0 7a01 	vstr	s15, [r0, #4]
 8012516:	f04f 30ff 	mov.w	r0, #4294967295
 801251a:	e7e4      	b.n	80124e6 <__ieee754_rem_pio2f+0x66>
 801251c:	4b69      	ldr	r3, [pc, #420]	@ (80126c4 <__ieee754_rem_pio2f+0x244>)
 801251e:	429d      	cmp	r5, r3
 8012520:	d873      	bhi.n	801260a <__ieee754_rem_pio2f+0x18a>
 8012522:	f7ff febb 	bl	801229c <fabsf>
 8012526:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80126c8 <__ieee754_rem_pio2f+0x248>
 801252a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801252e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012532:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012536:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801253a:	ee17 0a90 	vmov	r0, s15
 801253e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80126b0 <__ieee754_rem_pio2f+0x230>
 8012542:	eea7 0a67 	vfms.f32	s0, s14, s15
 8012546:	281f      	cmp	r0, #31
 8012548:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80126bc <__ieee754_rem_pio2f+0x23c>
 801254c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012550:	eeb1 6a47 	vneg.f32	s12, s14
 8012554:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012558:	ee16 1a90 	vmov	r1, s13
 801255c:	dc09      	bgt.n	8012572 <__ieee754_rem_pio2f+0xf2>
 801255e:	4a5b      	ldr	r2, [pc, #364]	@ (80126cc <__ieee754_rem_pio2f+0x24c>)
 8012560:	1e47      	subs	r7, r0, #1
 8012562:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8012566:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801256a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801256e:	4293      	cmp	r3, r2
 8012570:	d107      	bne.n	8012582 <__ieee754_rem_pio2f+0x102>
 8012572:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8012576:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 801257a:	2a08      	cmp	r2, #8
 801257c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8012580:	dc14      	bgt.n	80125ac <__ieee754_rem_pio2f+0x12c>
 8012582:	6021      	str	r1, [r4, #0]
 8012584:	ed94 7a00 	vldr	s14, [r4]
 8012588:	ee30 0a47 	vsub.f32	s0, s0, s14
 801258c:	2e00      	cmp	r6, #0
 801258e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012592:	ed84 0a01 	vstr	s0, [r4, #4]
 8012596:	daa6      	bge.n	80124e6 <__ieee754_rem_pio2f+0x66>
 8012598:	eeb1 7a47 	vneg.f32	s14, s14
 801259c:	eeb1 0a40 	vneg.f32	s0, s0
 80125a0:	ed84 7a00 	vstr	s14, [r4]
 80125a4:	ed84 0a01 	vstr	s0, [r4, #4]
 80125a8:	4240      	negs	r0, r0
 80125aa:	e79c      	b.n	80124e6 <__ieee754_rem_pio2f+0x66>
 80125ac:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80126b8 <__ieee754_rem_pio2f+0x238>
 80125b0:	eef0 6a40 	vmov.f32	s13, s0
 80125b4:	eee6 6a25 	vfma.f32	s13, s12, s11
 80125b8:	ee70 7a66 	vsub.f32	s15, s0, s13
 80125bc:	eee6 7a25 	vfma.f32	s15, s12, s11
 80125c0:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80126c0 <__ieee754_rem_pio2f+0x240>
 80125c4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80125c8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80125cc:	ee15 2a90 	vmov	r2, s11
 80125d0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80125d4:	1a5b      	subs	r3, r3, r1
 80125d6:	2b19      	cmp	r3, #25
 80125d8:	dc04      	bgt.n	80125e4 <__ieee754_rem_pio2f+0x164>
 80125da:	edc4 5a00 	vstr	s11, [r4]
 80125de:	eeb0 0a66 	vmov.f32	s0, s13
 80125e2:	e7cf      	b.n	8012584 <__ieee754_rem_pio2f+0x104>
 80125e4:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80126d0 <__ieee754_rem_pio2f+0x250>
 80125e8:	eeb0 0a66 	vmov.f32	s0, s13
 80125ec:	eea6 0a25 	vfma.f32	s0, s12, s11
 80125f0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80125f4:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80126d4 <__ieee754_rem_pio2f+0x254>
 80125f8:	eee6 7a25 	vfma.f32	s15, s12, s11
 80125fc:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8012600:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012604:	ed84 7a00 	vstr	s14, [r4]
 8012608:	e7bc      	b.n	8012584 <__ieee754_rem_pio2f+0x104>
 801260a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801260e:	d306      	bcc.n	801261e <__ieee754_rem_pio2f+0x19e>
 8012610:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012614:	edc0 7a01 	vstr	s15, [r0, #4]
 8012618:	edc0 7a00 	vstr	s15, [r0]
 801261c:	e73e      	b.n	801249c <__ieee754_rem_pio2f+0x1c>
 801261e:	15ea      	asrs	r2, r5, #23
 8012620:	3a86      	subs	r2, #134	@ 0x86
 8012622:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8012626:	ee07 3a90 	vmov	s15, r3
 801262a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801262e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80126d8 <__ieee754_rem_pio2f+0x258>
 8012632:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012636:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801263a:	ed8d 7a03 	vstr	s14, [sp, #12]
 801263e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012642:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012646:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801264a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801264e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8012652:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012656:	eef5 7a40 	vcmp.f32	s15, #0.0
 801265a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801265e:	edcd 7a05 	vstr	s15, [sp, #20]
 8012662:	d11e      	bne.n	80126a2 <__ieee754_rem_pio2f+0x222>
 8012664:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801266c:	bf0c      	ite	eq
 801266e:	2301      	moveq	r3, #1
 8012670:	2302      	movne	r3, #2
 8012672:	491a      	ldr	r1, [pc, #104]	@ (80126dc <__ieee754_rem_pio2f+0x25c>)
 8012674:	9101      	str	r1, [sp, #4]
 8012676:	2102      	movs	r1, #2
 8012678:	9100      	str	r1, [sp, #0]
 801267a:	a803      	add	r0, sp, #12
 801267c:	4621      	mov	r1, r4
 801267e:	f000 f82f 	bl	80126e0 <__kernel_rem_pio2f>
 8012682:	2e00      	cmp	r6, #0
 8012684:	f6bf af2f 	bge.w	80124e6 <__ieee754_rem_pio2f+0x66>
 8012688:	edd4 7a00 	vldr	s15, [r4]
 801268c:	eef1 7a67 	vneg.f32	s15, s15
 8012690:	edc4 7a00 	vstr	s15, [r4]
 8012694:	edd4 7a01 	vldr	s15, [r4, #4]
 8012698:	eef1 7a67 	vneg.f32	s15, s15
 801269c:	edc4 7a01 	vstr	s15, [r4, #4]
 80126a0:	e782      	b.n	80125a8 <__ieee754_rem_pio2f+0x128>
 80126a2:	2303      	movs	r3, #3
 80126a4:	e7e5      	b.n	8012672 <__ieee754_rem_pio2f+0x1f2>
 80126a6:	bf00      	nop
 80126a8:	3f490fd8 	.word	0x3f490fd8
 80126ac:	4016cbe3 	.word	0x4016cbe3
 80126b0:	3fc90f80 	.word	0x3fc90f80
 80126b4:	3fc90fd0 	.word	0x3fc90fd0
 80126b8:	37354400 	.word	0x37354400
 80126bc:	37354443 	.word	0x37354443
 80126c0:	2e85a308 	.word	0x2e85a308
 80126c4:	43490f80 	.word	0x43490f80
 80126c8:	3f22f984 	.word	0x3f22f984
 80126cc:	080136ec 	.word	0x080136ec
 80126d0:	2e85a300 	.word	0x2e85a300
 80126d4:	248d3132 	.word	0x248d3132
 80126d8:	43800000 	.word	0x43800000
 80126dc:	0801376c 	.word	0x0801376c

080126e0 <__kernel_rem_pio2f>:
 80126e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126e4:	ed2d 8b04 	vpush	{d8-d9}
 80126e8:	b0d9      	sub	sp, #356	@ 0x164
 80126ea:	4690      	mov	r8, r2
 80126ec:	9001      	str	r0, [sp, #4]
 80126ee:	4ab9      	ldr	r2, [pc, #740]	@ (80129d4 <__kernel_rem_pio2f+0x2f4>)
 80126f0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80126f2:	f118 0f04 	cmn.w	r8, #4
 80126f6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80126fa:	460f      	mov	r7, r1
 80126fc:	f103 3bff 	add.w	fp, r3, #4294967295
 8012700:	db27      	blt.n	8012752 <__kernel_rem_pio2f+0x72>
 8012702:	f1b8 0203 	subs.w	r2, r8, #3
 8012706:	bf48      	it	mi
 8012708:	f108 0204 	addmi.w	r2, r8, #4
 801270c:	10d2      	asrs	r2, r2, #3
 801270e:	1c55      	adds	r5, r2, #1
 8012710:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8012712:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 80129e4 <__kernel_rem_pio2f+0x304>
 8012716:	00e8      	lsls	r0, r5, #3
 8012718:	eba2 060b 	sub.w	r6, r2, fp
 801271c:	9002      	str	r0, [sp, #8]
 801271e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8012722:	eb0a 0c0b 	add.w	ip, sl, fp
 8012726:	ac1c      	add	r4, sp, #112	@ 0x70
 8012728:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 801272c:	2000      	movs	r0, #0
 801272e:	4560      	cmp	r0, ip
 8012730:	dd11      	ble.n	8012756 <__kernel_rem_pio2f+0x76>
 8012732:	a91c      	add	r1, sp, #112	@ 0x70
 8012734:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8012738:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 801273c:	f04f 0c00 	mov.w	ip, #0
 8012740:	45d4      	cmp	ip, sl
 8012742:	dc27      	bgt.n	8012794 <__kernel_rem_pio2f+0xb4>
 8012744:	f8dd e004 	ldr.w	lr, [sp, #4]
 8012748:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 80129e4 <__kernel_rem_pio2f+0x304>
 801274c:	4606      	mov	r6, r0
 801274e:	2400      	movs	r4, #0
 8012750:	e016      	b.n	8012780 <__kernel_rem_pio2f+0xa0>
 8012752:	2200      	movs	r2, #0
 8012754:	e7db      	b.n	801270e <__kernel_rem_pio2f+0x2e>
 8012756:	42c6      	cmn	r6, r0
 8012758:	bf5d      	ittte	pl
 801275a:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801275e:	ee07 1a90 	vmovpl	s15, r1
 8012762:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8012766:	eef0 7a47 	vmovmi.f32	s15, s14
 801276a:	ece4 7a01 	vstmia	r4!, {s15}
 801276e:	3001      	adds	r0, #1
 8012770:	e7dd      	b.n	801272e <__kernel_rem_pio2f+0x4e>
 8012772:	ecfe 6a01 	vldmia	lr!, {s13}
 8012776:	ed96 7a00 	vldr	s14, [r6]
 801277a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801277e:	3401      	adds	r4, #1
 8012780:	455c      	cmp	r4, fp
 8012782:	f1a6 0604 	sub.w	r6, r6, #4
 8012786:	ddf4      	ble.n	8012772 <__kernel_rem_pio2f+0x92>
 8012788:	ece9 7a01 	vstmia	r9!, {s15}
 801278c:	f10c 0c01 	add.w	ip, ip, #1
 8012790:	3004      	adds	r0, #4
 8012792:	e7d5      	b.n	8012740 <__kernel_rem_pio2f+0x60>
 8012794:	a908      	add	r1, sp, #32
 8012796:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801279a:	9104      	str	r1, [sp, #16]
 801279c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801279e:	eddf 8a90 	vldr	s17, [pc, #576]	@ 80129e0 <__kernel_rem_pio2f+0x300>
 80127a2:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 80129dc <__kernel_rem_pio2f+0x2fc>
 80127a6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80127aa:	9203      	str	r2, [sp, #12]
 80127ac:	4654      	mov	r4, sl
 80127ae:	00a2      	lsls	r2, r4, #2
 80127b0:	9205      	str	r2, [sp, #20]
 80127b2:	aa58      	add	r2, sp, #352	@ 0x160
 80127b4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80127b8:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 80127bc:	a944      	add	r1, sp, #272	@ 0x110
 80127be:	aa08      	add	r2, sp, #32
 80127c0:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80127c4:	4694      	mov	ip, r2
 80127c6:	4626      	mov	r6, r4
 80127c8:	2e00      	cmp	r6, #0
 80127ca:	f1a0 0004 	sub.w	r0, r0, #4
 80127ce:	dc4c      	bgt.n	801286a <__kernel_rem_pio2f+0x18a>
 80127d0:	4628      	mov	r0, r5
 80127d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80127d6:	f000 f9f5 	bl	8012bc4 <scalbnf>
 80127da:	eeb0 8a40 	vmov.f32	s16, s0
 80127de:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80127e2:	ee28 0a00 	vmul.f32	s0, s16, s0
 80127e6:	f000 fa53 	bl	8012c90 <floorf>
 80127ea:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80127ee:	eea0 8a67 	vfms.f32	s16, s0, s15
 80127f2:	2d00      	cmp	r5, #0
 80127f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80127f8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80127fc:	ee17 9a90 	vmov	r9, s15
 8012800:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012804:	ee38 8a67 	vsub.f32	s16, s16, s15
 8012808:	dd41      	ble.n	801288e <__kernel_rem_pio2f+0x1ae>
 801280a:	f104 3cff 	add.w	ip, r4, #4294967295
 801280e:	a908      	add	r1, sp, #32
 8012810:	f1c5 0e08 	rsb	lr, r5, #8
 8012814:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8012818:	fa46 f00e 	asr.w	r0, r6, lr
 801281c:	4481      	add	r9, r0
 801281e:	fa00 f00e 	lsl.w	r0, r0, lr
 8012822:	1a36      	subs	r6, r6, r0
 8012824:	f1c5 0007 	rsb	r0, r5, #7
 8012828:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 801282c:	4106      	asrs	r6, r0
 801282e:	2e00      	cmp	r6, #0
 8012830:	dd3c      	ble.n	80128ac <__kernel_rem_pio2f+0x1cc>
 8012832:	f04f 0e00 	mov.w	lr, #0
 8012836:	f109 0901 	add.w	r9, r9, #1
 801283a:	4670      	mov	r0, lr
 801283c:	4574      	cmp	r4, lr
 801283e:	dc68      	bgt.n	8012912 <__kernel_rem_pio2f+0x232>
 8012840:	2d00      	cmp	r5, #0
 8012842:	dd03      	ble.n	801284c <__kernel_rem_pio2f+0x16c>
 8012844:	2d01      	cmp	r5, #1
 8012846:	d074      	beq.n	8012932 <__kernel_rem_pio2f+0x252>
 8012848:	2d02      	cmp	r5, #2
 801284a:	d07d      	beq.n	8012948 <__kernel_rem_pio2f+0x268>
 801284c:	2e02      	cmp	r6, #2
 801284e:	d12d      	bne.n	80128ac <__kernel_rem_pio2f+0x1cc>
 8012850:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012854:	ee30 8a48 	vsub.f32	s16, s0, s16
 8012858:	b340      	cbz	r0, 80128ac <__kernel_rem_pio2f+0x1cc>
 801285a:	4628      	mov	r0, r5
 801285c:	9306      	str	r3, [sp, #24]
 801285e:	f000 f9b1 	bl	8012bc4 <scalbnf>
 8012862:	9b06      	ldr	r3, [sp, #24]
 8012864:	ee38 8a40 	vsub.f32	s16, s16, s0
 8012868:	e020      	b.n	80128ac <__kernel_rem_pio2f+0x1cc>
 801286a:	ee60 7a28 	vmul.f32	s15, s0, s17
 801286e:	3e01      	subs	r6, #1
 8012870:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012878:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801287c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012880:	ecac 0a01 	vstmia	ip!, {s0}
 8012884:	ed90 0a00 	vldr	s0, [r0]
 8012888:	ee37 0a80 	vadd.f32	s0, s15, s0
 801288c:	e79c      	b.n	80127c8 <__kernel_rem_pio2f+0xe8>
 801288e:	d105      	bne.n	801289c <__kernel_rem_pio2f+0x1bc>
 8012890:	1e60      	subs	r0, r4, #1
 8012892:	a908      	add	r1, sp, #32
 8012894:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8012898:	11f6      	asrs	r6, r6, #7
 801289a:	e7c8      	b.n	801282e <__kernel_rem_pio2f+0x14e>
 801289c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80128a0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80128a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128a8:	da31      	bge.n	801290e <__kernel_rem_pio2f+0x22e>
 80128aa:	2600      	movs	r6, #0
 80128ac:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80128b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128b4:	f040 8098 	bne.w	80129e8 <__kernel_rem_pio2f+0x308>
 80128b8:	1e60      	subs	r0, r4, #1
 80128ba:	2200      	movs	r2, #0
 80128bc:	4550      	cmp	r0, sl
 80128be:	da4b      	bge.n	8012958 <__kernel_rem_pio2f+0x278>
 80128c0:	2a00      	cmp	r2, #0
 80128c2:	d065      	beq.n	8012990 <__kernel_rem_pio2f+0x2b0>
 80128c4:	3c01      	subs	r4, #1
 80128c6:	ab08      	add	r3, sp, #32
 80128c8:	3d08      	subs	r5, #8
 80128ca:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d0f8      	beq.n	80128c4 <__kernel_rem_pio2f+0x1e4>
 80128d2:	4628      	mov	r0, r5
 80128d4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80128d8:	f000 f974 	bl	8012bc4 <scalbnf>
 80128dc:	1c63      	adds	r3, r4, #1
 80128de:	aa44      	add	r2, sp, #272	@ 0x110
 80128e0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80129e0 <__kernel_rem_pio2f+0x300>
 80128e4:	0099      	lsls	r1, r3, #2
 80128e6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80128ea:	4623      	mov	r3, r4
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	f280 80a9 	bge.w	8012a44 <__kernel_rem_pio2f+0x364>
 80128f2:	4623      	mov	r3, r4
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	f2c0 80c7 	blt.w	8012a88 <__kernel_rem_pio2f+0x3a8>
 80128fa:	aa44      	add	r2, sp, #272	@ 0x110
 80128fc:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8012900:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80129d8 <__kernel_rem_pio2f+0x2f8>
 8012904:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80129e4 <__kernel_rem_pio2f+0x304>
 8012908:	2000      	movs	r0, #0
 801290a:	1ae2      	subs	r2, r4, r3
 801290c:	e0b1      	b.n	8012a72 <__kernel_rem_pio2f+0x392>
 801290e:	2602      	movs	r6, #2
 8012910:	e78f      	b.n	8012832 <__kernel_rem_pio2f+0x152>
 8012912:	f852 1b04 	ldr.w	r1, [r2], #4
 8012916:	b948      	cbnz	r0, 801292c <__kernel_rem_pio2f+0x24c>
 8012918:	b121      	cbz	r1, 8012924 <__kernel_rem_pio2f+0x244>
 801291a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801291e:	f842 1c04 	str.w	r1, [r2, #-4]
 8012922:	2101      	movs	r1, #1
 8012924:	f10e 0e01 	add.w	lr, lr, #1
 8012928:	4608      	mov	r0, r1
 801292a:	e787      	b.n	801283c <__kernel_rem_pio2f+0x15c>
 801292c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8012930:	e7f5      	b.n	801291e <__kernel_rem_pio2f+0x23e>
 8012932:	f104 3cff 	add.w	ip, r4, #4294967295
 8012936:	aa08      	add	r2, sp, #32
 8012938:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801293c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8012940:	a908      	add	r1, sp, #32
 8012942:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8012946:	e781      	b.n	801284c <__kernel_rem_pio2f+0x16c>
 8012948:	f104 3cff 	add.w	ip, r4, #4294967295
 801294c:	aa08      	add	r2, sp, #32
 801294e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8012952:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8012956:	e7f3      	b.n	8012940 <__kernel_rem_pio2f+0x260>
 8012958:	a908      	add	r1, sp, #32
 801295a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801295e:	3801      	subs	r0, #1
 8012960:	430a      	orrs	r2, r1
 8012962:	e7ab      	b.n	80128bc <__kernel_rem_pio2f+0x1dc>
 8012964:	3201      	adds	r2, #1
 8012966:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801296a:	2e00      	cmp	r6, #0
 801296c:	d0fa      	beq.n	8012964 <__kernel_rem_pio2f+0x284>
 801296e:	9905      	ldr	r1, [sp, #20]
 8012970:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8012974:	eb0d 0001 	add.w	r0, sp, r1
 8012978:	18e6      	adds	r6, r4, r3
 801297a:	a91c      	add	r1, sp, #112	@ 0x70
 801297c:	f104 0c01 	add.w	ip, r4, #1
 8012980:	384c      	subs	r0, #76	@ 0x4c
 8012982:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8012986:	4422      	add	r2, r4
 8012988:	4562      	cmp	r2, ip
 801298a:	da04      	bge.n	8012996 <__kernel_rem_pio2f+0x2b6>
 801298c:	4614      	mov	r4, r2
 801298e:	e70e      	b.n	80127ae <__kernel_rem_pio2f+0xce>
 8012990:	9804      	ldr	r0, [sp, #16]
 8012992:	2201      	movs	r2, #1
 8012994:	e7e7      	b.n	8012966 <__kernel_rem_pio2f+0x286>
 8012996:	9903      	ldr	r1, [sp, #12]
 8012998:	f8dd e004 	ldr.w	lr, [sp, #4]
 801299c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80129a0:	9105      	str	r1, [sp, #20]
 80129a2:	ee07 1a90 	vmov	s15, r1
 80129a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80129aa:	2400      	movs	r4, #0
 80129ac:	ece6 7a01 	vstmia	r6!, {s15}
 80129b0:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80129e4 <__kernel_rem_pio2f+0x304>
 80129b4:	46b1      	mov	r9, r6
 80129b6:	455c      	cmp	r4, fp
 80129b8:	dd04      	ble.n	80129c4 <__kernel_rem_pio2f+0x2e4>
 80129ba:	ece0 7a01 	vstmia	r0!, {s15}
 80129be:	f10c 0c01 	add.w	ip, ip, #1
 80129c2:	e7e1      	b.n	8012988 <__kernel_rem_pio2f+0x2a8>
 80129c4:	ecfe 6a01 	vldmia	lr!, {s13}
 80129c8:	ed39 7a01 	vldmdb	r9!, {s14}
 80129cc:	3401      	adds	r4, #1
 80129ce:	eee6 7a87 	vfma.f32	s15, s13, s14
 80129d2:	e7f0      	b.n	80129b6 <__kernel_rem_pio2f+0x2d6>
 80129d4:	08013ab0 	.word	0x08013ab0
 80129d8:	08013a84 	.word	0x08013a84
 80129dc:	43800000 	.word	0x43800000
 80129e0:	3b800000 	.word	0x3b800000
 80129e4:	00000000 	.word	0x00000000
 80129e8:	9b02      	ldr	r3, [sp, #8]
 80129ea:	eeb0 0a48 	vmov.f32	s0, s16
 80129ee:	eba3 0008 	sub.w	r0, r3, r8
 80129f2:	f000 f8e7 	bl	8012bc4 <scalbnf>
 80129f6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80129dc <__kernel_rem_pio2f+0x2fc>
 80129fa:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80129fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a02:	db19      	blt.n	8012a38 <__kernel_rem_pio2f+0x358>
 8012a04:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80129e0 <__kernel_rem_pio2f+0x300>
 8012a08:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012a0c:	aa08      	add	r2, sp, #32
 8012a0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012a12:	3508      	adds	r5, #8
 8012a14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012a18:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8012a1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012a20:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012a24:	ee10 3a10 	vmov	r3, s0
 8012a28:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8012a2c:	ee17 3a90 	vmov	r3, s15
 8012a30:	3401      	adds	r4, #1
 8012a32:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8012a36:	e74c      	b.n	80128d2 <__kernel_rem_pio2f+0x1f2>
 8012a38:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012a3c:	aa08      	add	r2, sp, #32
 8012a3e:	ee10 3a10 	vmov	r3, s0
 8012a42:	e7f6      	b.n	8012a32 <__kernel_rem_pio2f+0x352>
 8012a44:	a808      	add	r0, sp, #32
 8012a46:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8012a4a:	9001      	str	r0, [sp, #4]
 8012a4c:	ee07 0a90 	vmov	s15, r0
 8012a50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012a54:	3b01      	subs	r3, #1
 8012a56:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012a5a:	ee20 0a07 	vmul.f32	s0, s0, s14
 8012a5e:	ed62 7a01 	vstmdb	r2!, {s15}
 8012a62:	e743      	b.n	80128ec <__kernel_rem_pio2f+0x20c>
 8012a64:	ecfc 6a01 	vldmia	ip!, {s13}
 8012a68:	ecb5 7a01 	vldmia	r5!, {s14}
 8012a6c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012a70:	3001      	adds	r0, #1
 8012a72:	4550      	cmp	r0, sl
 8012a74:	dc01      	bgt.n	8012a7a <__kernel_rem_pio2f+0x39a>
 8012a76:	4282      	cmp	r2, r0
 8012a78:	daf4      	bge.n	8012a64 <__kernel_rem_pio2f+0x384>
 8012a7a:	a858      	add	r0, sp, #352	@ 0x160
 8012a7c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8012a80:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8012a84:	3b01      	subs	r3, #1
 8012a86:	e735      	b.n	80128f4 <__kernel_rem_pio2f+0x214>
 8012a88:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8012a8a:	2b02      	cmp	r3, #2
 8012a8c:	dc09      	bgt.n	8012aa2 <__kernel_rem_pio2f+0x3c2>
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	dc2b      	bgt.n	8012aea <__kernel_rem_pio2f+0x40a>
 8012a92:	d044      	beq.n	8012b1e <__kernel_rem_pio2f+0x43e>
 8012a94:	f009 0007 	and.w	r0, r9, #7
 8012a98:	b059      	add	sp, #356	@ 0x164
 8012a9a:	ecbd 8b04 	vpop	{d8-d9}
 8012a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012aa2:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8012aa4:	2b03      	cmp	r3, #3
 8012aa6:	d1f5      	bne.n	8012a94 <__kernel_rem_pio2f+0x3b4>
 8012aa8:	aa30      	add	r2, sp, #192	@ 0xc0
 8012aaa:	1f0b      	subs	r3, r1, #4
 8012aac:	4413      	add	r3, r2
 8012aae:	461a      	mov	r2, r3
 8012ab0:	4620      	mov	r0, r4
 8012ab2:	2800      	cmp	r0, #0
 8012ab4:	f1a2 0204 	sub.w	r2, r2, #4
 8012ab8:	dc52      	bgt.n	8012b60 <__kernel_rem_pio2f+0x480>
 8012aba:	4622      	mov	r2, r4
 8012abc:	2a01      	cmp	r2, #1
 8012abe:	f1a3 0304 	sub.w	r3, r3, #4
 8012ac2:	dc5d      	bgt.n	8012b80 <__kernel_rem_pio2f+0x4a0>
 8012ac4:	ab30      	add	r3, sp, #192	@ 0xc0
 8012ac6:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 80129e4 <__kernel_rem_pio2f+0x304>
 8012aca:	440b      	add	r3, r1
 8012acc:	2c01      	cmp	r4, #1
 8012ace:	dc67      	bgt.n	8012ba0 <__kernel_rem_pio2f+0x4c0>
 8012ad0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8012ad4:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8012ad8:	2e00      	cmp	r6, #0
 8012ada:	d167      	bne.n	8012bac <__kernel_rem_pio2f+0x4cc>
 8012adc:	edc7 6a00 	vstr	s13, [r7]
 8012ae0:	ed87 7a01 	vstr	s14, [r7, #4]
 8012ae4:	edc7 7a02 	vstr	s15, [r7, #8]
 8012ae8:	e7d4      	b.n	8012a94 <__kernel_rem_pio2f+0x3b4>
 8012aea:	ab30      	add	r3, sp, #192	@ 0xc0
 8012aec:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 80129e4 <__kernel_rem_pio2f+0x304>
 8012af0:	440b      	add	r3, r1
 8012af2:	4622      	mov	r2, r4
 8012af4:	2a00      	cmp	r2, #0
 8012af6:	da24      	bge.n	8012b42 <__kernel_rem_pio2f+0x462>
 8012af8:	b34e      	cbz	r6, 8012b4e <__kernel_rem_pio2f+0x46e>
 8012afa:	eef1 7a47 	vneg.f32	s15, s14
 8012afe:	edc7 7a00 	vstr	s15, [r7]
 8012b02:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8012b06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012b0a:	aa31      	add	r2, sp, #196	@ 0xc4
 8012b0c:	2301      	movs	r3, #1
 8012b0e:	429c      	cmp	r4, r3
 8012b10:	da20      	bge.n	8012b54 <__kernel_rem_pio2f+0x474>
 8012b12:	b10e      	cbz	r6, 8012b18 <__kernel_rem_pio2f+0x438>
 8012b14:	eef1 7a67 	vneg.f32	s15, s15
 8012b18:	edc7 7a01 	vstr	s15, [r7, #4]
 8012b1c:	e7ba      	b.n	8012a94 <__kernel_rem_pio2f+0x3b4>
 8012b1e:	ab30      	add	r3, sp, #192	@ 0xc0
 8012b20:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 80129e4 <__kernel_rem_pio2f+0x304>
 8012b24:	440b      	add	r3, r1
 8012b26:	2c00      	cmp	r4, #0
 8012b28:	da05      	bge.n	8012b36 <__kernel_rem_pio2f+0x456>
 8012b2a:	b10e      	cbz	r6, 8012b30 <__kernel_rem_pio2f+0x450>
 8012b2c:	eef1 7a67 	vneg.f32	s15, s15
 8012b30:	edc7 7a00 	vstr	s15, [r7]
 8012b34:	e7ae      	b.n	8012a94 <__kernel_rem_pio2f+0x3b4>
 8012b36:	ed33 7a01 	vldmdb	r3!, {s14}
 8012b3a:	3c01      	subs	r4, #1
 8012b3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012b40:	e7f1      	b.n	8012b26 <__kernel_rem_pio2f+0x446>
 8012b42:	ed73 7a01 	vldmdb	r3!, {s15}
 8012b46:	3a01      	subs	r2, #1
 8012b48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012b4c:	e7d2      	b.n	8012af4 <__kernel_rem_pio2f+0x414>
 8012b4e:	eef0 7a47 	vmov.f32	s15, s14
 8012b52:	e7d4      	b.n	8012afe <__kernel_rem_pio2f+0x41e>
 8012b54:	ecb2 7a01 	vldmia	r2!, {s14}
 8012b58:	3301      	adds	r3, #1
 8012b5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012b5e:	e7d6      	b.n	8012b0e <__kernel_rem_pio2f+0x42e>
 8012b60:	edd2 7a00 	vldr	s15, [r2]
 8012b64:	edd2 6a01 	vldr	s13, [r2, #4]
 8012b68:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012b6c:	3801      	subs	r0, #1
 8012b6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012b72:	ed82 7a00 	vstr	s14, [r2]
 8012b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012b7a:	edc2 7a01 	vstr	s15, [r2, #4]
 8012b7e:	e798      	b.n	8012ab2 <__kernel_rem_pio2f+0x3d2>
 8012b80:	edd3 7a00 	vldr	s15, [r3]
 8012b84:	edd3 6a01 	vldr	s13, [r3, #4]
 8012b88:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012b8c:	3a01      	subs	r2, #1
 8012b8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012b92:	ed83 7a00 	vstr	s14, [r3]
 8012b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012b9a:	edc3 7a01 	vstr	s15, [r3, #4]
 8012b9e:	e78d      	b.n	8012abc <__kernel_rem_pio2f+0x3dc>
 8012ba0:	ed33 7a01 	vldmdb	r3!, {s14}
 8012ba4:	3c01      	subs	r4, #1
 8012ba6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012baa:	e78f      	b.n	8012acc <__kernel_rem_pio2f+0x3ec>
 8012bac:	eef1 6a66 	vneg.f32	s13, s13
 8012bb0:	eeb1 7a47 	vneg.f32	s14, s14
 8012bb4:	edc7 6a00 	vstr	s13, [r7]
 8012bb8:	ed87 7a01 	vstr	s14, [r7, #4]
 8012bbc:	eef1 7a67 	vneg.f32	s15, s15
 8012bc0:	e790      	b.n	8012ae4 <__kernel_rem_pio2f+0x404>
 8012bc2:	bf00      	nop

08012bc4 <scalbnf>:
 8012bc4:	ee10 3a10 	vmov	r3, s0
 8012bc8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8012bcc:	d02b      	beq.n	8012c26 <scalbnf+0x62>
 8012bce:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8012bd2:	d302      	bcc.n	8012bda <scalbnf+0x16>
 8012bd4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012bd8:	4770      	bx	lr
 8012bda:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8012bde:	d123      	bne.n	8012c28 <scalbnf+0x64>
 8012be0:	4b24      	ldr	r3, [pc, #144]	@ (8012c74 <scalbnf+0xb0>)
 8012be2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8012c78 <scalbnf+0xb4>
 8012be6:	4298      	cmp	r0, r3
 8012be8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012bec:	db17      	blt.n	8012c1e <scalbnf+0x5a>
 8012bee:	ee10 3a10 	vmov	r3, s0
 8012bf2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012bf6:	3a19      	subs	r2, #25
 8012bf8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8012bfc:	4288      	cmp	r0, r1
 8012bfe:	dd15      	ble.n	8012c2c <scalbnf+0x68>
 8012c00:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8012c7c <scalbnf+0xb8>
 8012c04:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8012c80 <scalbnf+0xbc>
 8012c08:	ee10 3a10 	vmov	r3, s0
 8012c0c:	eeb0 7a67 	vmov.f32	s14, s15
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	bfb8      	it	lt
 8012c14:	eef0 7a66 	vmovlt.f32	s15, s13
 8012c18:	ee27 0a87 	vmul.f32	s0, s15, s14
 8012c1c:	4770      	bx	lr
 8012c1e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8012c84 <scalbnf+0xc0>
 8012c22:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012c26:	4770      	bx	lr
 8012c28:	0dd2      	lsrs	r2, r2, #23
 8012c2a:	e7e5      	b.n	8012bf8 <scalbnf+0x34>
 8012c2c:	4410      	add	r0, r2
 8012c2e:	28fe      	cmp	r0, #254	@ 0xfe
 8012c30:	dce6      	bgt.n	8012c00 <scalbnf+0x3c>
 8012c32:	2800      	cmp	r0, #0
 8012c34:	dd06      	ble.n	8012c44 <scalbnf+0x80>
 8012c36:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8012c3a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8012c3e:	ee00 3a10 	vmov	s0, r3
 8012c42:	4770      	bx	lr
 8012c44:	f110 0f16 	cmn.w	r0, #22
 8012c48:	da09      	bge.n	8012c5e <scalbnf+0x9a>
 8012c4a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8012c84 <scalbnf+0xc0>
 8012c4e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8012c88 <scalbnf+0xc4>
 8012c52:	ee10 3a10 	vmov	r3, s0
 8012c56:	eeb0 7a67 	vmov.f32	s14, s15
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	e7d9      	b.n	8012c12 <scalbnf+0x4e>
 8012c5e:	3019      	adds	r0, #25
 8012c60:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8012c64:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8012c68:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8012c8c <scalbnf+0xc8>
 8012c6c:	ee07 3a90 	vmov	s15, r3
 8012c70:	e7d7      	b.n	8012c22 <scalbnf+0x5e>
 8012c72:	bf00      	nop
 8012c74:	ffff3cb0 	.word	0xffff3cb0
 8012c78:	4c000000 	.word	0x4c000000
 8012c7c:	7149f2ca 	.word	0x7149f2ca
 8012c80:	f149f2ca 	.word	0xf149f2ca
 8012c84:	0da24260 	.word	0x0da24260
 8012c88:	8da24260 	.word	0x8da24260
 8012c8c:	33000000 	.word	0x33000000

08012c90 <floorf>:
 8012c90:	ee10 3a10 	vmov	r3, s0
 8012c94:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012c98:	3a7f      	subs	r2, #127	@ 0x7f
 8012c9a:	2a16      	cmp	r2, #22
 8012c9c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012ca0:	dc2b      	bgt.n	8012cfa <floorf+0x6a>
 8012ca2:	2a00      	cmp	r2, #0
 8012ca4:	da12      	bge.n	8012ccc <floorf+0x3c>
 8012ca6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8012d0c <floorf+0x7c>
 8012caa:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012cae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cb6:	dd06      	ble.n	8012cc6 <floorf+0x36>
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	da24      	bge.n	8012d06 <floorf+0x76>
 8012cbc:	2900      	cmp	r1, #0
 8012cbe:	4b14      	ldr	r3, [pc, #80]	@ (8012d10 <floorf+0x80>)
 8012cc0:	bf08      	it	eq
 8012cc2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8012cc6:	ee00 3a10 	vmov	s0, r3
 8012cca:	4770      	bx	lr
 8012ccc:	4911      	ldr	r1, [pc, #68]	@ (8012d14 <floorf+0x84>)
 8012cce:	4111      	asrs	r1, r2
 8012cd0:	420b      	tst	r3, r1
 8012cd2:	d0fa      	beq.n	8012cca <floorf+0x3a>
 8012cd4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8012d0c <floorf+0x7c>
 8012cd8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012cdc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ce4:	ddef      	ble.n	8012cc6 <floorf+0x36>
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	bfbe      	ittt	lt
 8012cea:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8012cee:	fa40 f202 	asrlt.w	r2, r0, r2
 8012cf2:	189b      	addlt	r3, r3, r2
 8012cf4:	ea23 0301 	bic.w	r3, r3, r1
 8012cf8:	e7e5      	b.n	8012cc6 <floorf+0x36>
 8012cfa:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8012cfe:	d3e4      	bcc.n	8012cca <floorf+0x3a>
 8012d00:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012d04:	4770      	bx	lr
 8012d06:	2300      	movs	r3, #0
 8012d08:	e7dd      	b.n	8012cc6 <floorf+0x36>
 8012d0a:	bf00      	nop
 8012d0c:	7149f2ca 	.word	0x7149f2ca
 8012d10:	bf800000 	.word	0xbf800000
 8012d14:	007fffff 	.word	0x007fffff

08012d18 <_init>:
 8012d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d1a:	bf00      	nop
 8012d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012d1e:	bc08      	pop	{r3}
 8012d20:	469e      	mov	lr, r3
 8012d22:	4770      	bx	lr

08012d24 <_fini>:
 8012d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d26:	bf00      	nop
 8012d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012d2a:	bc08      	pop	{r3}
 8012d2c:	469e      	mov	lr, r3
 8012d2e:	4770      	bx	lr
