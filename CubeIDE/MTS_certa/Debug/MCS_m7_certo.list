
MCS_m7_certo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b530  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000093c  0800b700  0800b700  0000c700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c03c  0800c03c  0000e1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c03c  0800c03c  0000d03c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c044  0800c044  0000e1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c044  0800c044  0000d044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c048  0800c048  0000d048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800c04c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006f0c  200001e8  0800c234  0000e1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200070f4  0800c234  0000f0f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017106  00000000  00000000  0000e218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d20  00000000  00000000  0002531e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  00028040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000021c7  00000000  00000000  000289a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000045f8  00000000  00000000  0002ab67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c1c2  00000000  00000000  0002f15f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6bf1  00000000  00000000  0004b321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00131f12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003284  00000000  00000000  00131f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 000150f2  00000000  00000000  001351dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  0014a2ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b6e8 	.word	0x0800b6e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800b6e8 	.word	0x0800b6e8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001028:	4b6f      	ldr	r3, [pc, #444]	@ (80011e8 <MX_GPIO_Init+0x1c4>)
{
 800102a:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SINC_master_GPIO_Port, SINC_master_Pin, GPIO_PIN_RESET);
 800102e:	2108      	movs	r1, #8
 8001030:	4f6e      	ldr	r7, [pc, #440]	@ (80011ec <MX_GPIO_Init+0x1c8>)

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001032:	2503      	movs	r5, #3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pin = RMII_MDC_Pin;
 8001036:	2602      	movs	r6, #2
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001038:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 80011f8 <MX_GPIO_Init+0x1d4>
  HAL_GPIO_WritePin(SINC_master_GPIO_Port, SINC_master_Pin, GPIO_PIN_RESET);
 800103c:	4638      	mov	r0, r7
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800103e:	f8df b1bc 	ldr.w	fp, [pc, #444]	@ 80011fc <MX_GPIO_Init+0x1d8>
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001042:	f04f 080b 	mov.w	r8, #11
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SINC_master_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001046:	f04f 0a01 	mov.w	sl, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104a:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800104e:	e9cd 4408 	strd	r4, r4, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001052:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001054:	f042 0204 	orr.w	r2, r2, #4
 8001058:	631a      	str	r2, [r3, #48]	@ 0x30
 800105a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800105c:	f002 0204 	and.w	r2, r2, #4
 8001060:	9200      	str	r2, [sp, #0]
 8001062:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001064:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001066:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800106a:	631a      	str	r2, [r3, #48]	@ 0x30
 800106c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800106e:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001072:	9201      	str	r2, [sp, #4]
 8001074:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001078:	f042 0201 	orr.w	r2, r2, #1
 800107c:	631a      	str	r2, [r3, #48]	@ 0x30
 800107e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001080:	f002 0201 	and.w	r2, r2, #1
 8001084:	9202      	str	r2, [sp, #8]
 8001086:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001088:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800108a:	f042 0202 	orr.w	r2, r2, #2
 800108e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001090:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001092:	f002 0202 	and.w	r2, r2, #2
 8001096:	9203      	str	r2, [sp, #12]
 8001098:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800109a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800109c:	430a      	orrs	r2, r1
 800109e:	631a      	str	r2, [r3, #48]	@ 0x30
 80010a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80010a2:	400a      	ands	r2, r1
 80010a4:	9204      	str	r2, [sp, #16]
 80010a6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80010aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80010ae:	631a      	str	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(SINC_master_GPIO_Port, SINC_master_Pin, GPIO_PIN_RESET);
 80010b0:	4622      	mov	r2, r4
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010b8:	9305      	str	r3, [sp, #20]
 80010ba:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(SINC_master_GPIO_Port, SINC_master_Pin, GPIO_PIN_RESET);
 80010bc:	f001 f848 	bl	8002150 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80010c0:	4622      	mov	r2, r4
 80010c2:	f244 0181 	movw	r1, #16513	@ 0x4081
 80010c6:	484a      	ldr	r0, [pc, #296]	@ (80011f0 <MX_GPIO_Init+0x1cc>)
 80010c8:	f001 f842 	bl	8002150 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80010cc:	4622      	mov	r2, r4
 80010ce:	4648      	mov	r0, r9
 80010d0:	2140      	movs	r1, #64	@ 0x40
 80010d2:	f001 f83d 	bl	8002150 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80010d6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80010de:	a906      	add	r1, sp, #24
 80010e0:	4658      	mov	r0, fp
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80010e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80010e8:	f000 fef2 	bl	8001ed0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SINC_slave_Pin;
 80010ec:	2201      	movs	r2, #1
 80010ee:	2300      	movs	r3, #0
  HAL_GPIO_Init(SINC_slave_GPIO_Port, &GPIO_InitStruct);
 80010f0:	a906      	add	r1, sp, #24
 80010f2:	4658      	mov	r0, fp
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = SINC_slave_Pin;
 80010f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(SINC_slave_GPIO_Port, &GPIO_InitStruct);
 80010fa:	f000 fee9 	bl	8001ed0 <HAL_GPIO_Init>
  HAL_GPIO_Init(RMII_MDC_GPIO_Port, &GPIO_InitStruct);
 80010fe:	4658      	mov	r0, fp
 8001100:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001102:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	e9cd 6606 	strd	r6, r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110a:	e9cd 4508 	strd	r4, r5, [sp, #32]
  HAL_GPIO_Init(RMII_MDC_GPIO_Port, &GPIO_InitStruct);
 800110e:	f000 fedf 	bl	8001ed0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8001112:	2306      	movs	r3, #6
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001114:	a906      	add	r1, sp, #24
 8001116:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8001118:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	e9cd 6407 	strd	r6, r4, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800111e:	e9cd 5809 	strd	r5, r8, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f000 fed5 	bl	8001ed0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SINC_master_Pin;
 8001126:	2308      	movs	r3, #8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(SINC_master_GPIO_Port, &GPIO_InitStruct);
 8001128:	a906      	add	r1, sp, #24
 800112a:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = SINC_master_Pin;
 800112c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112e:	9509      	str	r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	e9cd a407 	strd	sl, r4, [sp, #28]
  HAL_GPIO_Init(SINC_master_GPIO_Port, &GPIO_InitStruct);
 8001134:	f000 fecc 	bl	8001ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001138:	f244 0381 	movw	r3, #16513	@ 0x4081
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113c:	a906      	add	r1, sp, #24
 800113e:	482c      	ldr	r0, [pc, #176]	@ (80011f0 <MX_GPIO_Init+0x1cc>)
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001140:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	e9cd a407 	strd	sl, r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001148:	f000 fec2 	bl	8001ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800114c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001150:	a906      	add	r1, sp, #24
 8001152:	4827      	ldr	r0, [pc, #156]	@ (80011f0 <MX_GPIO_Init+0x1cc>)
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001154:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	e9cd 6407 	strd	r6, r4, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800115a:	e9cd 5809 	strd	r5, r8, [sp, #36]	@ 0x24
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800115e:	f000 feb7 	bl	8001ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001162:	f44f 7340 	mov.w	r3, #768	@ 0x300
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001166:	a906      	add	r1, sp, #24
 8001168:	4822      	ldr	r0, [pc, #136]	@ (80011f4 <MX_GPIO_Init+0x1d0>)
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800116a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800116c:	2307      	movs	r3, #7
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116e:	9509      	str	r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001170:	930a      	str	r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	e9cd 6407 	strd	r6, r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001176:	f000 feab 	bl	8001ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800117a:	2340      	movs	r3, #64	@ 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800117c:	a906      	add	r1, sp, #24
 800117e:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001180:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	e9cd a407 	strd	sl, r4, [sp, #28]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001188:	f000 fea2 	bl	8001ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800118c:	2280      	movs	r2, #128	@ 0x80
 800118e:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001190:	a906      	add	r1, sp, #24
 8001192:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001196:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800119a:	f000 fe99 	bl	8001ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800119e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a2:	a906      	add	r1, sp, #24
 80011a4:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80011a6:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011a8:	230a      	movs	r3, #10
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011aa:	9509      	str	r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011ac:	930a      	str	r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	e9cd 6407 	strd	r6, r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b2:	f000 fe8d 	bl	8001ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80011b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011ba:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80011bc:	4638      	mov	r0, r7
 80011be:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80011c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80011c6:	f000 fe83 	bl	8001ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80011ca:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011ce:	a906      	add	r1, sp, #24
 80011d0:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011d4:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80011d8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011da:	e9cd 4508 	strd	r4, r5, [sp, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011de:	f000 fe77 	bl	8001ed0 <HAL_GPIO_Init>

}
 80011e2:	b00d      	add	sp, #52	@ 0x34
 80011e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40020000 	.word	0x40020000
 80011f0:	40020400 	.word	0x40020400
 80011f4:	40020c00 	.word	0x40020c00
 80011f8:	40021800 	.word	0x40021800
 80011fc:	40020800 	.word	0x40020800

08001200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001200:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001202:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 8001204:	2201      	movs	r2, #1
 8001206:	4802      	ldr	r0, [pc, #8]	@ (8001210 <Error_Handler+0x10>)
 8001208:	4611      	mov	r1, r2
 800120a:	f000 ffa1 	bl	8002150 <HAL_GPIO_WritePin>
  while (1)
 800120e:	e7fe      	b.n	800120e <Error_Handler+0xe>
 8001210:	40020400 	.word	0x40020400

08001214 <SystemClock_Config>:
{
 8001214:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001216:	2300      	movs	r3, #0
{
 8001218:	b095      	sub	sp, #84	@ 0x54
  __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	4924      	ldr	r1, [pc, #144]	@ (80012ac <SystemClock_Config+0x98>)
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800121c:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121e:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001220:	9303      	str	r3, [sp, #12]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001222:	930a      	str	r3, [sp, #40]	@ 0x28
 8001224:	930d      	str	r3, [sp, #52]	@ 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001226:	4a22      	ldr	r2, [pc, #136]	@ (80012b0 <SystemClock_Config+0x9c>)
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001228:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800122c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001230:	e9cd 3306 	strd	r3, r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001234:	6c08      	ldr	r0, [r1, #64]	@ 0x40
 8001236:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 800123a:	6408      	str	r0, [r1, #64]	@ 0x40
 800123c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800123e:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 8001242:	9101      	str	r1, [sp, #4]
 8001244:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001246:	6811      	ldr	r1, [r2, #0]
 8001248:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 800124c:	6011      	str	r1, [r2, #0]
  RCC_OscInitStruct.PLL.PLLM = 8;
 800124e:	2108      	movs	r1, #8
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001250:	6812      	ldr	r2, [r2, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001252:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001254:	23d8      	movs	r3, #216	@ 0xd8
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001256:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
  RCC_OscInitStruct.PLL.PLLM = 8;
 800125a:	9110      	str	r1, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800125c:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800125e:	2110      	movs	r1, #16
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001260:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001262:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001264:	2302      	movs	r3, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001266:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001268:	920b      	str	r2, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800126a:	2202      	movs	r2, #2
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800126c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800126e:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001270:	940e      	str	r4, [sp, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001272:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001274:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001278:	f000 ffb2 	bl	80021e0 <HAL_RCC_OscConfig>
 800127c:	b9a0      	cbnz	r0, 80012a8 <SystemClock_Config+0x94>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800127e:	f000 ff75 	bl	800216c <HAL_PWREx_EnableOverDrive>
 8001282:	4603      	mov	r3, r0
 8001284:	b980      	cbnz	r0, 80012a8 <SystemClock_Config+0x94>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001286:	220f      	movs	r2, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001288:	f44f 55a0 	mov.w	r5, #5120	@ 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800128c:	a803      	add	r0, sp, #12
 800128e:	2107      	movs	r1, #7
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001290:	e9cd 2403 	strd	r2, r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001294:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001298:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800129c:	9207      	str	r2, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800129e:	f001 f98d 	bl	80025bc <HAL_RCC_ClockConfig>
 80012a2:	b908      	cbnz	r0, 80012a8 <SystemClock_Config+0x94>
}
 80012a4:	b015      	add	sp, #84	@ 0x54
 80012a6:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80012a8:	f7ff ffaa 	bl	8001200 <Error_Handler>
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40007000 	.word	0x40007000

080012b4 <main>:
{
 80012b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012b8:	f5ad 4dfb 	sub.w	sp, sp, #32128	@ 0x7d80
  char file_read[25] = {0};
 80012bc:	2300      	movs	r3, #0
{
 80012be:	b08d      	sub	sp, #52	@ 0x34
  char file_read[25] = {0};
 80012c0:	aa0a      	add	r2, sp, #40	@ 0x28
 80012c2:	a909      	add	r1, sp, #36	@ 0x24
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	600b      	str	r3, [r1, #0]
 80012c8:	7513      	strb	r3, [r2, #20]
 80012ca:	e9c2 3301 	strd	r3, r3, [r2, #4]
 80012ce:	e9c2 3303 	strd	r3, r3, [r2, #12]
  HAL_Init();
 80012d2:	f000 fd69 	bl	8001da8 <HAL_Init>
  SystemClock_Config();
 80012d6:	f7ff ff9d 	bl	8001214 <SystemClock_Config>
  MX_GPIO_Init();
 80012da:	f7ff fea3 	bl	8001024 <MX_GPIO_Init>
  MX_SPI3_Init();
 80012de:	f000 fbd9 	bl	8001a94 <MX_SPI3_Init>
  MX_FATFS_Init();
 80012e2:	f001 ff8f 	bl	8003204 <MX_FATFS_Init>
  MX_SPI1_Init();
 80012e6:	f000 fbad 	bl	8001a44 <MX_SPI1_Init>
  res = f_mount(&fs, "0:", 1);
 80012ea:	2201      	movs	r2, #1
 80012ec:	4926      	ldr	r1, [pc, #152]	@ (8001388 <main+0xd4>)
 80012ee:	a854      	add	r0, sp, #336	@ 0x150
 80012f0:	f004 ff26 	bl	8006140 <f_mount>
  if (res != FR_OK) {
 80012f4:	2800      	cmp	r0, #0
 80012f6:	f040 818b 	bne.w	8001610 <main+0x35c>
 80012fa:	f04f 0801 	mov.w	r8, #1
			if (res != FR_OK || br == 0) {
 80012fe:	af04      	add	r7, sp, #16
	sprintf(file_read, "0:/DATA1/run%d.txt", file_cont);  // Prefixo de volume (0:) é comum no FatFs
 8001300:	4642      	mov	r2, r8
 8001302:	4922      	ldr	r1, [pc, #136]	@ (800138c <main+0xd8>)
 8001304:	a809      	add	r0, sp, #36	@ 0x24
 8001306:	f007 fb63 	bl	80089d0 <siprintf>
	res = f_open(&fil, file_read, FA_READ);
 800130a:	2201      	movs	r2, #1
 800130c:	a909      	add	r1, sp, #36	@ 0x24
 800130e:	a8e2      	add	r0, sp, #904	@ 0x388
 8001310:	f004 ff58 	bl	80061c4 <f_open>
	if (res != FR_OK)
 8001314:	bb00      	cbnz	r0, 8001358 <main+0xa4>
	float *linhas[] = {mx, my, mz};  // Vetor de ponteiros para facilitar o acesso
 8001316:	ab06      	add	r3, sp, #24
 8001318:	4a1d      	ldr	r2, [pc, #116]	@ (8001390 <main+0xdc>)
 800131a:	4699      	mov	r9, r3
 800131c:	f103 0a0c 	add.w	sl, r3, #12
 8001320:	ca07      	ldmia	r2, {r0, r1, r2}
 8001322:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for (int i = 0; i < 3; i++)
 8001326:	f50d 65bc 	add.w	r5, sp, #1504	@ 0x5e0
		int line_pos = 0;
 800132a:	2400      	movs	r4, #0
			line[line_pos++] = ch;
 800132c:	ae34      	add	r6, sp, #208	@ 0xd0
 800132e:	e00b      	b.n	8001348 <main+0x94>
			if (res != FR_OK || br == 0) {
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	b18b      	cbz	r3, 8001358 <main+0xa4>
			line[line_pos++] = ch;
 8001334:	7833      	ldrb	r3, [r6, #0]
 8001336:	3401      	adds	r4, #1
		} while (ch != '\n' && line_pos < sizeof(line)-1);
 8001338:	2b0a      	cmp	r3, #10
			line[line_pos++] = ch;
 800133a:	f805 3b01 	strb.w	r3, [r5], #1
		} while (ch != '\n' && line_pos < sizeof(line)-1);
 800133e:	d011      	beq.n	8001364 <main+0xb0>
 8001340:	f247 73cd 	movw	r3, #30669	@ 0x77cd
 8001344:	429c      	cmp	r4, r3
 8001346:	d00d      	beq.n	8001364 <main+0xb0>
			res = f_read(&fil, &ch, 1, &br);
 8001348:	ab04      	add	r3, sp, #16
 800134a:	2201      	movs	r2, #1
 800134c:	a934      	add	r1, sp, #208	@ 0xd0
 800134e:	a8e2      	add	r0, sp, #904	@ 0x388
 8001350:	f005 f918 	bl	8006584 <f_read>
			if (res != FR_OK || br == 0) {
 8001354:	2800      	cmp	r0, #0
 8001356:	d0eb      	beq.n	8001330 <main+0x7c>
}
 8001358:	2001      	movs	r0, #1
 800135a:	f50d 4dfb 	add.w	sp, sp, #32128	@ 0x7d80
 800135e:	b00d      	add	sp, #52	@ 0x34
 8001360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		line[line_pos] = '\0';
 8001364:	f50d 63bc 	add.w	r3, sp, #1504	@ 0x5e0
 8001368:	f04f 0b00 	mov.w	fp, #0
		char *token = strtok(line, ",");
 800136c:	4909      	ldr	r1, [pc, #36]	@ (8001394 <main+0xe0>)
 800136e:	4618      	mov	r0, r3
		line[line_pos] = '\0';
 8001370:	f803 b004 	strb.w	fp, [r3, r4]
		char *token = strtok(line, ",");
 8001374:	f007 fbaa 	bl	8008acc <strtok>
		while (token != NULL && j < tam)
 8001378:	2800      	cmp	r0, #0
 800137a:	d0ed      	beq.n	8001358 <main+0xa4>
 800137c:	f859 4b04 	ldr.w	r4, [r9], #4
 8001380:	f240 4657 	movw	r6, #1111	@ 0x457
			token = strtok(NULL, ",");
 8001384:	4d03      	ldr	r5, [pc, #12]	@ (8001394 <main+0xe0>)
 8001386:	e009      	b.n	800139c <main+0xe8>
 8001388:	0800b70c 	.word	0x0800b70c
 800138c:	0800b710 	.word	0x0800b710
 8001390:	0800b700 	.word	0x0800b700
 8001394:	0800b724 	.word	0x0800b724
		while (token != NULL && j < tam)
 8001398:	45b3      	cmp	fp, r6
 800139a:	dc0c      	bgt.n	80013b6 <main+0x102>
			linhas[i][j] = strtof(token, NULL);
 800139c:	2100      	movs	r1, #0
			j++;
 800139e:	f10b 0b01 	add.w	fp, fp, #1
			linhas[i][j] = strtof(token, NULL);
 80013a2:	f006 fb83 	bl	8007aac <strtof>
			token = strtok(NULL, ",");
 80013a6:	4629      	mov	r1, r5
 80013a8:	2000      	movs	r0, #0
			linhas[i][j] = strtof(token, NULL);
 80013aa:	eca4 0a01 	vstmia	r4!, {s0}
			token = strtok(NULL, ",");
 80013ae:	f007 fb8d 	bl	8008acc <strtok>
		while (token != NULL && j < tam)
 80013b2:	2800      	cmp	r0, #0
 80013b4:	d1f0      	bne.n	8001398 <main+0xe4>
		if (j != tam)
 80013b6:	f5bb 6f8b 	cmp.w	fp, #1112	@ 0x458
 80013ba:	d1cd      	bne.n	8001358 <main+0xa4>
	for (int i = 0; i < 3; i++)
 80013bc:	45d1      	cmp	r9, sl
 80013be:	d1b2      	bne.n	8001326 <main+0x72>
	f_close(&fil);
 80013c0:	a8e2      	add	r0, sp, #904	@ 0x388
	while(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0));
 80013c2:	4c94      	ldr	r4, [pc, #592]	@ (8001614 <main+0x360>)
	f_close(&fil);
 80013c4:	f005 fcb0 	bl	8006d28 <f_close>
		mx_[i].flutuante = mx[i];
 80013c8:	f44f 528b 	mov.w	r2, #4448	@ 0x1160
 80013cc:	4992      	ldr	r1, [pc, #584]	@ (8001618 <main+0x364>)
 80013ce:	4893      	ldr	r0, [pc, #588]	@ (800161c <main+0x368>)
 80013d0:	f007 fc4f 	bl	8008c72 <memcpy>
		my_[i].flutuante = my[i];
 80013d4:	f44f 528b 	mov.w	r2, #4448	@ 0x1160
 80013d8:	4991      	ldr	r1, [pc, #580]	@ (8001620 <main+0x36c>)
 80013da:	4892      	ldr	r0, [pc, #584]	@ (8001624 <main+0x370>)
 80013dc:	f007 fc49 	bl	8008c72 <memcpy>
		mz_[i].flutuante = mz[i];
 80013e0:	f44f 528b 	mov.w	r2, #4448	@ 0x1160
 80013e4:	4990      	ldr	r1, [pc, #576]	@ (8001628 <main+0x374>)
 80013e6:	4891      	ldr	r0, [pc, #580]	@ (800162c <main+0x378>)
 80013e8:	f007 fc43 	bl	8008c72 <memcpy>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, SET);
 80013ec:	2201      	movs	r2, #1
 80013ee:	2108      	movs	r1, #8
 80013f0:	488f      	ldr	r0, [pc, #572]	@ (8001630 <main+0x37c>)
 80013f2:	f000 fead 	bl	8002150 <HAL_GPIO_WritePin>
	while(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0));
 80013f6:	2101      	movs	r1, #1
 80013f8:	4620      	mov	r0, r4
 80013fa:	f000 fea3 	bl	8002144 <HAL_GPIO_ReadPin>
 80013fe:	2800      	cmp	r0, #0
 8001400:	d0f9      	beq.n	80013f6 <main+0x142>
	HAL_Delay(5);
 8001402:	4c86      	ldr	r4, [pc, #536]	@ (800161c <main+0x368>)
 8001404:	2005      	movs	r0, #5
		HAL_SPI_Transmit(&hspi1, mx_[i].inteiro, 4, HAL_MAX_DELAY);
 8001406:	4e8b      	ldr	r6, [pc, #556]	@ (8001634 <main+0x380>)
	HAL_Delay(5);
 8001408:	f000 fcec 	bl	8001de4 <HAL_Delay>
	for(uint16_t i = 0; i < tam; i++)
 800140c:	f504 558b 	add.w	r5, r4, #4448	@ 0x1160
		HAL_SPI_Transmit(&hspi1, mx_[i].inteiro, 4, HAL_MAX_DELAY);
 8001410:	4621      	mov	r1, r4
	for(uint16_t i = 0; i < tam; i++)
 8001412:	3404      	adds	r4, #4
		HAL_SPI_Transmit(&hspi1, mx_[i].inteiro, 4, HAL_MAX_DELAY);
 8001414:	f04f 33ff 	mov.w	r3, #4294967295
 8001418:	2204      	movs	r2, #4
 800141a:	4630      	mov	r0, r6
 800141c:	f001 fbe6 	bl	8002bec <HAL_SPI_Transmit>
	for(uint16_t i = 0; i < tam; i++)
 8001420:	42a5      	cmp	r5, r4
 8001422:	d1f5      	bne.n	8001410 <main+0x15c>
 8001424:	4c7f      	ldr	r4, [pc, #508]	@ (8001624 <main+0x370>)
		HAL_SPI_Transmit(&hspi1, my_[i].inteiro, 4, HAL_MAX_DELAY);
 8001426:	4e83      	ldr	r6, [pc, #524]	@ (8001634 <main+0x380>)
 8001428:	f504 558b 	add.w	r5, r4, #4448	@ 0x1160
 800142c:	4621      	mov	r1, r4
	for(uint16_t i = 0; i < tam; i++)
 800142e:	3404      	adds	r4, #4
		HAL_SPI_Transmit(&hspi1, my_[i].inteiro, 4, HAL_MAX_DELAY);
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
 8001434:	2204      	movs	r2, #4
 8001436:	4630      	mov	r0, r6
 8001438:	f001 fbd8 	bl	8002bec <HAL_SPI_Transmit>
	for(uint16_t i = 0; i < tam; i++)
 800143c:	42a5      	cmp	r5, r4
 800143e:	d1f5      	bne.n	800142c <main+0x178>
 8001440:	4c7a      	ldr	r4, [pc, #488]	@ (800162c <main+0x378>)
		HAL_SPI_Transmit(&hspi1, mz_[i].inteiro, 4, HAL_MAX_DELAY);
 8001442:	4e7c      	ldr	r6, [pc, #496]	@ (8001634 <main+0x380>)
 8001444:	f504 558b 	add.w	r5, r4, #4448	@ 0x1160
 8001448:	4621      	mov	r1, r4
	for(uint16_t i = 0; i < tam; i++)
 800144a:	3404      	adds	r4, #4
		HAL_SPI_Transmit(&hspi1, mz_[i].inteiro, 4, HAL_MAX_DELAY);
 800144c:	f04f 33ff 	mov.w	r3, #4294967295
 8001450:	2204      	movs	r2, #4
 8001452:	4630      	mov	r0, r6
 8001454:	f001 fbca 	bl	8002bec <HAL_SPI_Transmit>
	for(uint16_t i = 0; i < tam; i++)
 8001458:	42a5      	cmp	r5, r4
 800145a:	d1f5      	bne.n	8001448 <main+0x194>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, RESET);
 800145c:	2200      	movs	r2, #0
 800145e:	2108      	movs	r1, #8
 8001460:	4873      	ldr	r0, [pc, #460]	@ (8001630 <main+0x37c>)
	while(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0));
 8001462:	4c6c      	ldr	r4, [pc, #432]	@ (8001614 <main+0x360>)
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, RESET);
 8001464:	f000 fe74 	bl	8002150 <HAL_GPIO_WritePin>
	while(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0));
 8001468:	2101      	movs	r1, #1
 800146a:	4620      	mov	r0, r4
 800146c:	f000 fe6a 	bl	8002144 <HAL_GPIO_ReadPin>
 8001470:	2800      	cmp	r0, #0
 8001472:	d0f9      	beq.n	8001468 <main+0x1b4>
 8001474:	ac10      	add	r4, sp, #64	@ 0x40
		HAL_SPI_Receive(&hspi1, param1[i].inteiro, 4, HAL_MAX_DELAY);
 8001476:	4e6f      	ldr	r6, [pc, #444]	@ (8001634 <main+0x380>)
 8001478:	ad1a      	add	r5, sp, #104	@ 0x68
 800147a:	4621      	mov	r1, r4
	for(uint8_t i = 0; i < 10; i++)
 800147c:	3404      	adds	r4, #4
		HAL_SPI_Receive(&hspi1, param1[i].inteiro, 4, HAL_MAX_DELAY);
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
 8001482:	2204      	movs	r2, #4
 8001484:	4630      	mov	r0, r6
 8001486:	f001 fde7 	bl	8003058 <HAL_SPI_Receive>
	for(uint8_t i = 0; i < 10; i++)
 800148a:	42a5      	cmp	r5, r4
 800148c:	d1f5      	bne.n	800147a <main+0x1c6>
 800148e:	ac19      	add	r4, sp, #100	@ 0x64
		HAL_SPI_Receive(&hspi1, param2[i].inteiro, 4, HAL_MAX_DELAY);
 8001490:	4e68      	ldr	r6, [pc, #416]	@ (8001634 <main+0x380>)
 8001492:	ad23      	add	r5, sp, #140	@ 0x8c
 8001494:	4621      	mov	r1, r4
	for(uint8_t i = 0; i < 10; i++)
 8001496:	3404      	adds	r4, #4
		HAL_SPI_Receive(&hspi1, param2[i].inteiro, 4, HAL_MAX_DELAY);
 8001498:	f04f 33ff 	mov.w	r3, #4294967295
 800149c:	2204      	movs	r2, #4
 800149e:	4630      	mov	r0, r6
 80014a0:	f001 fdda 	bl	8003058 <HAL_SPI_Receive>
	for(uint8_t i = 0; i < 10; i++)
 80014a4:	42a5      	cmp	r5, r4
 80014a6:	d1f5      	bne.n	8001494 <main+0x1e0>
	HAL_SPI_Receive(&hspi1, ETS_time.inteiro, 4, HAL_MAX_DELAY);
 80014a8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ac:	2204      	movs	r2, #4
 80014ae:	a903      	add	r1, sp, #12
 80014b0:	4860      	ldr	r0, [pc, #384]	@ (8001634 <main+0x380>)
 80014b2:	f001 fdd1 	bl	8003058 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, NLLS_time.inteiro, 4, HAL_MAX_DELAY);
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ba:	2204      	movs	r2, #4
 80014bc:	a902      	add	r1, sp, #8
 80014be:	485d      	ldr	r0, [pc, #372]	@ (8001634 <main+0x380>)
 80014c0:	f001 fdca 	bl	8003058 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &passos_NLLS, 1, HAL_MAX_DELAY);
 80014c4:	f04f 33ff 	mov.w	r3, #4294967295
 80014c8:	2201      	movs	r2, #1
 80014ca:	495b      	ldr	r1, [pc, #364]	@ (8001638 <main+0x384>)
 80014cc:	4859      	ldr	r0, [pc, #356]	@ (8001634 <main+0x380>)
 80014ce:	f001 fdc3 	bl	8003058 <HAL_SPI_Receive>
		p0[i] = param1[i].flutuante;
 80014d2:	f50d 635b 	add.w	r3, sp, #3504	@ 0xdb0
 80014d6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80014d8:	a810      	add	r0, sp, #64	@ 0x40
 80014da:	f6a3 5104 	subw	r1, r3, #3332	@ 0xd04
		p1[i] = param2[i].flutuante;
 80014de:	f6a3 524c 	subw	r2, r3, #3404	@ 0xd4c
 80014e2:	f6a3 5328 	subw	r3, r3, #3368	@ 0xd28
		p0[i] = param1[i].flutuante;
 80014e6:	600c      	str	r4, [r1, #0]
		p1[i] = param2[i].flutuante;
 80014e8:	6814      	ldr	r4, [r2, #0]
 80014ea:	601c      	str	r4, [r3, #0]
		p0[i] = param1[i].flutuante;
 80014ec:	6844      	ldr	r4, [r0, #4]
 80014ee:	604c      	str	r4, [r1, #4]
		p1[i] = param2[i].flutuante;
 80014f0:	6854      	ldr	r4, [r2, #4]
 80014f2:	605c      	str	r4, [r3, #4]
		p0[i] = param1[i].flutuante;
 80014f4:	6884      	ldr	r4, [r0, #8]
 80014f6:	608c      	str	r4, [r1, #8]
		p1[i] = param2[i].flutuante;
 80014f8:	6894      	ldr	r4, [r2, #8]
 80014fa:	609c      	str	r4, [r3, #8]
		p0[i] = param1[i].flutuante;
 80014fc:	68c4      	ldr	r4, [r0, #12]
 80014fe:	60cc      	str	r4, [r1, #12]
		p1[i] = param2[i].flutuante;
 8001500:	68d4      	ldr	r4, [r2, #12]
 8001502:	60dc      	str	r4, [r3, #12]
		p0[i] = param1[i].flutuante;
 8001504:	6904      	ldr	r4, [r0, #16]
 8001506:	610c      	str	r4, [r1, #16]
		p1[i] = param2[i].flutuante;
 8001508:	6914      	ldr	r4, [r2, #16]
 800150a:	611c      	str	r4, [r3, #16]
		p0[i] = param1[i].flutuante;
 800150c:	6944      	ldr	r4, [r0, #20]
 800150e:	614c      	str	r4, [r1, #20]
		p1[i] = param2[i].flutuante;
 8001510:	6954      	ldr	r4, [r2, #20]
 8001512:	615c      	str	r4, [r3, #20]
		p0[i] = param1[i].flutuante;
 8001514:	6984      	ldr	r4, [r0, #24]
 8001516:	618c      	str	r4, [r1, #24]
		p1[i] = param2[i].flutuante;
 8001518:	6994      	ldr	r4, [r2, #24]
 800151a:	619c      	str	r4, [r3, #24]
		p0[i] = param1[i].flutuante;
 800151c:	69c4      	ldr	r4, [r0, #28]
 800151e:	61cc      	str	r4, [r1, #28]
		p1[i] = param2[i].flutuante;
 8001520:	69d4      	ldr	r4, [r2, #28]
 8001522:	61dc      	str	r4, [r3, #28]
		p0[i] = param1[i].flutuante;
 8001524:	6a00      	ldr	r0, [r0, #32]
		p1[i] = param2[i].flutuante;
 8001526:	6a12      	ldr	r2, [r2, #32]
		p0[i] = param1[i].flutuante;
 8001528:	6208      	str	r0, [r1, #32]
	sprintf(file_read, "0:/RES/run%d.txt", file_cont);
 800152a:	a809      	add	r0, sp, #36	@ 0x24
 800152c:	4943      	ldr	r1, [pc, #268]	@ (800163c <main+0x388>)
		p1[i] = param2[i].flutuante;
 800152e:	621a      	str	r2, [r3, #32]
	sprintf(file_read, "0:/RES/run%d.txt", file_cont);
 8001530:	4642      	mov	r2, r8
 8001532:	f007 fa4d 	bl	80089d0 <siprintf>
	res = f_open(&fil, file_read, FA_WRITE | FA_CREATE_ALWAYS);
 8001536:	220a      	movs	r2, #10
 8001538:	a909      	add	r1, sp, #36	@ 0x24
 800153a:	a8e2      	add	r0, sp, #904	@ 0x388
 800153c:	f004 fe42 	bl	80061c4 <f_open>
	if (res != FR_OK)
 8001540:	2800      	cmp	r0, #0
 8001542:	f47f af09 	bne.w	8001358 <main+0xa4>
 8001546:	f10d 09ac 	add.w	r9, sp, #172	@ 0xac
 800154a:	ae22      	add	r6, sp, #136	@ 0x88
		sprintf(out_line, "%f, %f\n", p1[i], p0[i]);
 800154c:	f8df b0f0 	ldr.w	fp, [pc, #240]	@ 8001640 <main+0x38c>
 8001550:	46ca      	mov	sl, r9
 8001552:	f856 0b04 	ldr.w	r0, [r6], #4
 8001556:	f7ff f817 	bl	8000588 <__aeabi_f2d>
 800155a:	f859 5b04 	ldr.w	r5, [r9], #4
 800155e:	4602      	mov	r2, r0
 8001560:	4628      	mov	r0, r5
 8001562:	460d      	mov	r5, r1
 8001564:	4614      	mov	r4, r2
 8001566:	f7ff f80f 	bl	8000588 <__aeabi_f2d>
 800156a:	462b      	mov	r3, r5
 800156c:	4622      	mov	r2, r4
 800156e:	e9cd 0100 	strd	r0, r1, [sp]
 8001572:	4659      	mov	r1, fp
 8001574:	a834      	add	r0, sp, #208	@ 0xd0
 8001576:	f007 fa2b 	bl	80089d0 <siprintf>
		f_write(&fil, out_line, strlen(out_line), &bw);
 800157a:	a834      	add	r0, sp, #208	@ 0xd0
 800157c:	f7fe fe98 	bl	80002b0 <strlen>
 8001580:	ab05      	add	r3, sp, #20
 8001582:	4602      	mov	r2, r0
 8001584:	a934      	add	r1, sp, #208	@ 0xd0
 8001586:	a8e2      	add	r0, sp, #904	@ 0x388
 8001588:	f005 f93e 	bl	8006808 <f_write>
	for (int i = 0; i < 9; i++) {
 800158c:	4556      	cmp	r6, sl
 800158e:	d1e0      	bne.n	8001552 <main+0x29e>
	sprintf(out_line, "%f, %f\n", ETS_time.flutuante, NLLS_time.flutuante);
 8001590:	9803      	ldr	r0, [sp, #12]
 8001592:	ab03      	add	r3, sp, #12
 8001594:	f7fe fff8 	bl	8000588 <__aeabi_f2d>
 8001598:	ab02      	add	r3, sp, #8
 800159a:	4604      	mov	r4, r0
 800159c:	460d      	mov	r5, r1
 800159e:	6818      	ldr	r0, [r3, #0]
	if(file_cont >= 3001)
 80015a0:	f108 0801 	add.w	r8, r8, #1
	sprintf(out_line, "%f, %f\n", ETS_time.flutuante, NLLS_time.flutuante);
 80015a4:	f7fe fff0 	bl	8000588 <__aeabi_f2d>
 80015a8:	4622      	mov	r2, r4
 80015aa:	462b      	mov	r3, r5
 80015ac:	e9cd 0100 	strd	r0, r1, [sp]
 80015b0:	4923      	ldr	r1, [pc, #140]	@ (8001640 <main+0x38c>)
 80015b2:	a834      	add	r0, sp, #208	@ 0xd0
 80015b4:	f007 fa0c 	bl	80089d0 <siprintf>
	f_write(&fil, out_line, strlen(out_line), &bw);
 80015b8:	a834      	add	r0, sp, #208	@ 0xd0
 80015ba:	f7fe fe79 	bl	80002b0 <strlen>
 80015be:	ab05      	add	r3, sp, #20
 80015c0:	4602      	mov	r2, r0
 80015c2:	a934      	add	r1, sp, #208	@ 0xd0
 80015c4:	a8e2      	add	r0, sp, #904	@ 0x388
 80015c6:	f005 f91f 	bl	8006808 <f_write>
	sprintf(out_line, "0, %u\n", passos_NLLS);
 80015ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001638 <main+0x384>)
 80015cc:	491d      	ldr	r1, [pc, #116]	@ (8001644 <main+0x390>)
 80015ce:	a834      	add	r0, sp, #208	@ 0xd0
 80015d0:	781a      	ldrb	r2, [r3, #0]
 80015d2:	f007 f9fd 	bl	80089d0 <siprintf>
	f_write(&fil, out_line, strlen(out_line), &bw);
 80015d6:	a834      	add	r0, sp, #208	@ 0xd0
 80015d8:	f7fe fe6a 	bl	80002b0 <strlen>
 80015dc:	ab05      	add	r3, sp, #20
 80015de:	4602      	mov	r2, r0
 80015e0:	a934      	add	r1, sp, #208	@ 0xd0
 80015e2:	a8e2      	add	r0, sp, #904	@ 0x388
 80015e4:	f005 f910 	bl	8006808 <f_write>
	f_close(&fil);
 80015e8:	a8e2      	add	r0, sp, #904	@ 0x388
 80015ea:	f005 fb9d 	bl	8006d28 <f_close>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80015ee:	2180      	movs	r1, #128	@ 0x80
 80015f0:	4815      	ldr	r0, [pc, #84]	@ (8001648 <main+0x394>)
 80015f2:	f000 fdb1 	bl	8002158 <HAL_GPIO_TogglePin>
	HAL_Delay(10);
 80015f6:	200a      	movs	r0, #10
 80015f8:	f000 fbf4 	bl	8001de4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80015fc:	2180      	movs	r1, #128	@ 0x80
 80015fe:	4812      	ldr	r0, [pc, #72]	@ (8001648 <main+0x394>)
 8001600:	f000 fdaa 	bl	8002158 <HAL_GPIO_TogglePin>
	if(file_cont >= 3001)
 8001604:	f640 33b9 	movw	r3, #3001	@ 0xbb9
 8001608:	4598      	cmp	r8, r3
 800160a:	f47f ae79 	bne.w	8001300 <main+0x4c>
 800160e:	e6a3      	b.n	8001358 <main+0xa4>
      Error_Handler(); // ou retorne um erro
 8001610:	f7ff fdf6 	bl	8001200 <Error_Handler>
 8001614:	40020800 	.word	0x40020800
 8001618:	200058e8 	.word	0x200058e8
 800161c:	200024c8 	.word	0x200024c8
 8001620:	20004788 	.word	0x20004788
 8001624:	20001368 	.word	0x20001368
 8001628:	20003628 	.word	0x20003628
 800162c:	20000208 	.word	0x20000208
 8001630:	40020000 	.word	0x40020000
 8001634:	20006ab0 	.word	0x20006ab0
 8001638:	20000204 	.word	0x20000204
 800163c:	0800b728 	.word	0x0800b728
 8001640:	0800b73c 	.word	0x0800b73c
 8001644:	0800b744 	.word	0x0800b744
 8001648:	40020400 	.word	0x40020400

0800164c <SD_SendCommand>:
    SD_ReceiveByte();
}

static uint8_t SD_SendCommand(uint8_t cmd, uint32_t arg, uint8_t crc) {
    uint8_t buf[6];
    buf[0] = 0x40 | cmd;
 800164c:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 8001650:	2300      	movs	r3, #0
 8001652:	f360 0307 	bfi	r3, r0, #0, #8
    buf[1] = (arg >> 24) & 0xFF;
 8001656:	0e08      	lsrs	r0, r1, #24
static uint8_t SD_SendCommand(uint8_t cmd, uint32_t arg, uint8_t crc) {
 8001658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    buf[0] = 0x40 | cmd;
 800165c:	f360 230f 	bfi	r3, r0, #8, #8
static uint8_t SD_SendCommand(uint8_t cmd, uint32_t arg, uint8_t crc) {
 8001660:	b086      	sub	sp, #24
    buf[2] = (arg >> 16) & 0xFF;
 8001662:	0c08      	lsrs	r0, r1, #16
    HAL_SPI_TransmitReceive(&hspi3, &data, &received, 1, HAL_MAX_DELAY);
 8001664:	f04f 34ff 	mov.w	r4, #4294967295
    buf[3] = (arg >> 8) & 0xFF;
    buf[4] = arg & 0xFF;
 8001668:	f88d 1014 	strb.w	r1, [sp, #20]
    buf[3] = (arg >> 8) & 0xFF;
 800166c:	0a09      	lsrs	r1, r1, #8
    buf[0] = 0x40 | cmd;
 800166e:	f360 4317 	bfi	r3, r0, #16, #8
    buf[5] = crc;
 8001672:	f88d 2015 	strb.w	r2, [sp, #21]
    SD_CS_HIGH();
 8001676:	4840      	ldr	r0, [pc, #256]	@ (8001778 <SD_SendCommand+0x12c>)
 8001678:	2201      	movs	r2, #1
    buf[0] = 0x40 | cmd;
 800167a:	f361 631f 	bfi	r3, r1, #24, #8
 800167e:	26ff      	movs	r6, #255	@ 0xff
    SD_CS_HIGH();
 8001680:	2110      	movs	r1, #16
    HAL_SPI_TransmitReceive(&hspi3, &data, &received, 1, HAL_MAX_DELAY);
 8001682:	4f3e      	ldr	r7, [pc, #248]	@ (800177c <SD_SendCommand+0x130>)
    buf[0] = 0x40 | cmd;
 8001684:	9304      	str	r3, [sp, #16]
    SD_CS_HIGH();
 8001686:	f000 fd63 	bl	8002150 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi3, &data, &received, 1, HAL_MAX_DELAY);
 800168a:	2301      	movs	r3, #1
 800168c:	f10d 020f 	add.w	r2, sp, #15
 8001690:	f10d 010e 	add.w	r1, sp, #14
 8001694:	4839      	ldr	r0, [pc, #228]	@ (800177c <SD_SendCommand+0x130>)
 8001696:	9400      	str	r4, [sp, #0]
 8001698:	f88d 600e 	strb.w	r6, [sp, #14]
 800169c:	f001 fb90 	bl	8002dc0 <HAL_SPI_TransmitReceive>
    SD_CS_LOW();
 80016a0:	2200      	movs	r2, #0
 80016a2:	2110      	movs	r1, #16
 80016a4:	4834      	ldr	r0, [pc, #208]	@ (8001778 <SD_SendCommand+0x12c>)
 80016a6:	f000 fd53 	bl	8002150 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi3, &data, &received, 1, HAL_MAX_DELAY);
 80016aa:	2301      	movs	r3, #1
 80016ac:	f10d 020f 	add.w	r2, sp, #15
 80016b0:	f10d 010e 	add.w	r1, sp, #14
 80016b4:	4831      	ldr	r0, [pc, #196]	@ (800177c <SD_SendCommand+0x130>)
 80016b6:	9400      	str	r4, [sp, #0]
 80016b8:	f88d 400e 	strb.w	r4, [sp, #14]
 80016bc:	f001 fb80 	bl	8002dc0 <HAL_SPI_TransmitReceive>
    uint32_t timeout = HAL_GetTick();
 80016c0:	f000 fb8a 	bl	8001dd8 <HAL_GetTick>
 80016c4:	4605      	mov	r5, r0
 80016c6:	e005      	b.n	80016d4 <SD_SendCommand+0x88>
    } while ((HAL_GetTick() - timeout) < 500);
 80016c8:	f000 fb86 	bl	8001dd8 <HAL_GetTick>
 80016cc:	1b40      	subs	r0, r0, r5
 80016ce:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 80016d2:	d23f      	bcs.n	8001754 <SD_SendCommand+0x108>
    HAL_SPI_TransmitReceive(&hspi3, &data, &received, 1, HAL_MAX_DELAY);
 80016d4:	2301      	movs	r3, #1
 80016d6:	f10d 020f 	add.w	r2, sp, #15
 80016da:	f10d 010e 	add.w	r1, sp, #14
 80016de:	4638      	mov	r0, r7
 80016e0:	9400      	str	r4, [sp, #0]
 80016e2:	f88d 600e 	strb.w	r6, [sp, #14]
 80016e6:	f001 fb6b 	bl	8002dc0 <HAL_SPI_TransmitReceive>
    return received;
 80016ea:	f89d 300f 	ldrb.w	r3, [sp, #15]
        if (res == 0xFF) return 1;
 80016ee:	2bff      	cmp	r3, #255	@ 0xff
 80016f0:	d1ea      	bne.n	80016c8 <SD_SendCommand+0x7c>
 80016f2:	ac04      	add	r4, sp, #16
 80016f4:	f10d 0816 	add.w	r8, sp, #22
    HAL_SPI_TransmitReceive(&hspi3, &data, &received, 1, HAL_MAX_DELAY);
 80016f8:	f04f 37ff 	mov.w	r7, #4294967295
 80016fc:	4e1f      	ldr	r6, [pc, #124]	@ (800177c <SD_SendCommand+0x130>)
        SD_Deselect();
        return 0xFF;
    }

    for (int i = 0; i < 6; i++)
        SD_TransmitByte(buf[i]);
 80016fe:	f814 5b01 	ldrb.w	r5, [r4], #1
    HAL_SPI_TransmitReceive(&hspi3, &data, &received, 1, HAL_MAX_DELAY);
 8001702:	2301      	movs	r3, #1
 8001704:	f10d 020f 	add.w	r2, sp, #15
 8001708:	f10d 010e 	add.w	r1, sp, #14
 800170c:	4630      	mov	r0, r6
 800170e:	9700      	str	r7, [sp, #0]
 8001710:	f88d 500e 	strb.w	r5, [sp, #14]
 8001714:	f001 fb54 	bl	8002dc0 <HAL_SPI_TransmitReceive>
    for (int i = 0; i < 6; i++)
 8001718:	4544      	cmp	r4, r8
 800171a:	d1f0      	bne.n	80016fe <SD_SendCommand+0xb2>
 800171c:	240a      	movs	r4, #10
 800171e:	27ff      	movs	r7, #255	@ 0xff
    HAL_SPI_TransmitReceive(&hspi3, &data, &received, 1, HAL_MAX_DELAY);
 8001720:	f04f 36ff 	mov.w	r6, #4294967295
 8001724:	4d15      	ldr	r5, [pc, #84]	@ (800177c <SD_SendCommand+0x130>)
 8001726:	2301      	movs	r3, #1
 8001728:	f10d 020f 	add.w	r2, sp, #15
 800172c:	f10d 010e 	add.w	r1, sp, #14
 8001730:	4628      	mov	r0, r5
 8001732:	9600      	str	r6, [sp, #0]
 8001734:	f88d 700e 	strb.w	r7, [sp, #14]
 8001738:	f001 fb42 	bl	8002dc0 <HAL_SPI_TransmitReceive>

    // Aguarda resposta (bit 7 == 0)
    for (int i = 0; i < 10; i++) {
        uint8_t res = SD_ReceiveByte();
        if ((res & 0x80) == 0)
 800173c:	f99d 300f 	ldrsb.w	r3, [sp, #15]
    return received;
 8001740:	f89d 000f 	ldrb.w	r0, [sp, #15]
        if ((res & 0x80) == 0)
 8001744:	2b00      	cmp	r3, #0
 8001746:	da02      	bge.n	800174e <SD_SendCommand+0x102>
    for (int i = 0; i < 10; i++) {
 8001748:	3c01      	subs	r4, #1
 800174a:	d1ec      	bne.n	8001726 <SD_SendCommand+0xda>
        return 0xFF;
 800174c:	20ff      	movs	r0, #255	@ 0xff
            return res;
    }

    return 0xFF;
}
 800174e:	b006      	add	sp, #24
 8001750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SD_CS_HIGH();
 8001754:	2201      	movs	r2, #1
 8001756:	2110      	movs	r1, #16
 8001758:	4807      	ldr	r0, [pc, #28]	@ (8001778 <SD_SendCommand+0x12c>)
 800175a:	f000 fcf9 	bl	8002150 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi3, &data, &received, 1, HAL_MAX_DELAY);
 800175e:	2301      	movs	r3, #1
 8001760:	f10d 020f 	add.w	r2, sp, #15
 8001764:	f10d 010e 	add.w	r1, sp, #14
 8001768:	4804      	ldr	r0, [pc, #16]	@ (800177c <SD_SendCommand+0x130>)
 800176a:	9400      	str	r4, [sp, #0]
 800176c:	f88d 600e 	strb.w	r6, [sp, #14]
 8001770:	f001 fb26 	bl	8002dc0 <HAL_SPI_TransmitReceive>
        return 0xFF;
 8001774:	20ff      	movs	r0, #255	@ 0xff
 8001776:	e7ea      	b.n	800174e <SD_SendCommand+0x102>
 8001778:	40020000 	.word	0x40020000
 800177c:	20006a48 	.word	0x20006a48

08001780 <SD_Init>:

uint8_t SD_Init(void) {
 8001780:	b530      	push	{r4, r5, lr}
    SD_CS_HIGH();
 8001782:	2201      	movs	r2, #1
uint8_t SD_Init(void) {
 8001784:	b085      	sub	sp, #20
    SD_CS_HIGH();
 8001786:	2110      	movs	r1, #16
 8001788:	4827      	ldr	r0, [pc, #156]	@ (8001828 <SD_Init+0xa8>)
 800178a:	f000 fce1 	bl	8002150 <HAL_GPIO_WritePin>
    uint8_t dummy = 0xFF;
 800178e:	240a      	movs	r4, #10
 8001790:	23ff      	movs	r3, #255	@ 0xff
        HAL_SPI_Transmit(&hspi3, &dummy, 1, HAL_MAX_DELAY);
 8001792:	4d26      	ldr	r5, [pc, #152]	@ (800182c <SD_Init+0xac>)
    uint8_t dummy = 0xFF;
 8001794:	f88d 300f 	strb.w	r3, [sp, #15]
        HAL_SPI_Transmit(&hspi3, &dummy, 1, HAL_MAX_DELAY);
 8001798:	f04f 33ff 	mov.w	r3, #4294967295
 800179c:	2201      	movs	r2, #1
 800179e:	f10d 010f 	add.w	r1, sp, #15
 80017a2:	4628      	mov	r0, r5
 80017a4:	f001 fa22 	bl	8002bec <HAL_SPI_Transmit>
    for (int i = 0; i < 10; i++)
 80017a8:	3c01      	subs	r4, #1
 80017aa:	d1f5      	bne.n	8001798 <SD_Init+0x18>
    SD_SendDummyClock(); // 80 clocks

    uint8_t res = SD_SendCommand(CMD0, 0, 0x95);
 80017ac:	2295      	movs	r2, #149	@ 0x95
 80017ae:	4621      	mov	r1, r4
 80017b0:	4620      	mov	r0, r4
 80017b2:	f7ff ff4b 	bl	800164c <SD_SendCommand>
    if (res != 0x01) return SD_ERROR;
 80017b6:	2801      	cmp	r0, #1
 80017b8:	d002      	beq.n	80017c0 <SD_Init+0x40>
 80017ba:	2001      	movs	r0, #1
    } while (res != 0x00);

    res = SD_SendCommand(CMD58, 0, 0x01);
    SD_Deselect();
    return (res == 0x00) ? SD_OK : SD_ERROR;
}
 80017bc:	b005      	add	sp, #20
 80017be:	bd30      	pop	{r4, r5, pc}
    res = SD_SendCommand(CMD8, 0x1AA, 0x87);
 80017c0:	2287      	movs	r2, #135	@ 0x87
 80017c2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80017c6:	2008      	movs	r0, #8
 80017c8:	f7ff ff40 	bl	800164c <SD_SendCommand>
    if (res != 0x01) return SD_ERROR;
 80017cc:	2801      	cmp	r0, #1
 80017ce:	d1f4      	bne.n	80017ba <SD_Init+0x3a>
        SD_SendCommand(CMD55, 0, 0x01);
 80017d0:	2201      	movs	r2, #1
 80017d2:	2100      	movs	r1, #0
 80017d4:	2037      	movs	r0, #55	@ 0x37
 80017d6:	f7ff ff39 	bl	800164c <SD_SendCommand>
        res = SD_SendCommand(ACMD41, 0x40000000, 0x01);
 80017da:	2201      	movs	r2, #1
 80017dc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80017e0:	2029      	movs	r0, #41	@ 0x29
 80017e2:	f7ff ff33 	bl	800164c <SD_SendCommand>
    } while (res != 0x00);
 80017e6:	2800      	cmp	r0, #0
 80017e8:	d1f2      	bne.n	80017d0 <SD_Init+0x50>
    res = SD_SendCommand(CMD58, 0, 0x01);
 80017ea:	4601      	mov	r1, r0
 80017ec:	2201      	movs	r2, #1
 80017ee:	203a      	movs	r0, #58	@ 0x3a
 80017f0:	f7ff ff2c 	bl	800164c <SD_SendCommand>
    SD_CS_HIGH();
 80017f4:	2201      	movs	r2, #1
    res = SD_SendCommand(CMD58, 0, 0x01);
 80017f6:	4604      	mov	r4, r0
    SD_CS_HIGH();
 80017f8:	2110      	movs	r1, #16
 80017fa:	480b      	ldr	r0, [pc, #44]	@ (8001828 <SD_Init+0xa8>)
 80017fc:	f000 fca8 	bl	8002150 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi3, &data, &received, 1, HAL_MAX_DELAY);
 8001800:	f04f 30ff 	mov.w	r0, #4294967295
 8001804:	21ff      	movs	r1, #255	@ 0xff
 8001806:	2301      	movs	r3, #1
 8001808:	9000      	str	r0, [sp, #0]
 800180a:	f10d 020f 	add.w	r2, sp, #15
 800180e:	f88d 100e 	strb.w	r1, [sp, #14]
 8001812:	f10d 010e 	add.w	r1, sp, #14
 8001816:	4805      	ldr	r0, [pc, #20]	@ (800182c <SD_Init+0xac>)
 8001818:	f001 fad2 	bl	8002dc0 <HAL_SPI_TransmitReceive>
    return (res == 0x00) ? SD_OK : SD_ERROR;
 800181c:	1e20      	subs	r0, r4, #0
 800181e:	bf18      	it	ne
 8001820:	2001      	movne	r0, #1
}
 8001822:	b005      	add	sp, #20
 8001824:	bd30      	pop	{r4, r5, pc}
 8001826:	bf00      	nop
 8001828:	40020000 	.word	0x40020000
 800182c:	20006a48 	.word	0x20006a48

08001830 <SD_ReadBlock>:

uint8_t SD_ReadBlock(uint32_t blockAddr, uint8_t* buff) {
 8001830:	4603      	mov	r3, r0
    uint8_t token;

    if (SD_SendCommand(CMD17, blockAddr, 0x01) != 0x00)
 8001832:	2201      	movs	r2, #1
 8001834:	2011      	movs	r0, #17
uint8_t SD_ReadBlock(uint32_t blockAddr, uint8_t* buff) {
 8001836:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800183a:	460d      	mov	r5, r1
 800183c:	b085      	sub	sp, #20
    if (SD_SendCommand(CMD17, blockAddr, 0x01) != 0x00)
 800183e:	4619      	mov	r1, r3
 8001840:	f7ff ff04 	bl	800164c <SD_SendCommand>
 8001844:	2800      	cmp	r0, #0
 8001846:	d15c      	bne.n	8001902 <SD_ReadBlock+0xd2>
 8001848:	4681      	mov	r9, r0
 800184a:	f242 7410 	movw	r4, #10000	@ 0x2710
 800184e:	f04f 08ff 	mov.w	r8, #255	@ 0xff
    HAL_SPI_TransmitReceive(&hspi3, &data, &received, 1, HAL_MAX_DELAY);
 8001852:	f04f 37ff 	mov.w	r7, #4294967295
 8001856:	4e2e      	ldr	r6, [pc, #184]	@ (8001910 <SD_ReadBlock+0xe0>)
 8001858:	e001      	b.n	800185e <SD_ReadBlock+0x2e>
        return SD_ERROR;

    // Espera token 0xFE (início do bloco)
    for (int i = 0; i < 10000; i++) {
 800185a:	3c01      	subs	r4, #1
 800185c:	d051      	beq.n	8001902 <SD_ReadBlock+0xd2>
    HAL_SPI_TransmitReceive(&hspi3, &data, &received, 1, HAL_MAX_DELAY);
 800185e:	2301      	movs	r3, #1
 8001860:	f10d 020f 	add.w	r2, sp, #15
 8001864:	f10d 010e 	add.w	r1, sp, #14
 8001868:	4630      	mov	r0, r6
 800186a:	9700      	str	r7, [sp, #0]
 800186c:	f88d 800e 	strb.w	r8, [sp, #14]
 8001870:	f001 faa6 	bl	8002dc0 <HAL_SPI_TransmitReceive>
    return received;
 8001874:	f89d 300f 	ldrb.w	r3, [sp, #15]
        token = SD_ReceiveByte();
        if (token == 0xFE) break;
 8001878:	2bfe      	cmp	r3, #254	@ 0xfe
 800187a:	d1ee      	bne.n	800185a <SD_ReadBlock+0x2a>
    }
    if (token != 0xFE) return SD_ERROR;
 800187c:	1e6c      	subs	r4, r5, #1
 800187e:	27ff      	movs	r7, #255	@ 0xff
 8001880:	f205 15ff 	addw	r5, r5, #511	@ 0x1ff
    HAL_SPI_TransmitReceive(&hspi3, &data, &received, 1, HAL_MAX_DELAY);
 8001884:	f04f 36ff 	mov.w	r6, #4294967295
 8001888:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 8001910 <SD_ReadBlock+0xe0>
 800188c:	2301      	movs	r3, #1
 800188e:	f10d 020f 	add.w	r2, sp, #15
 8001892:	f10d 010e 	add.w	r1, sp, #14
 8001896:	4640      	mov	r0, r8
 8001898:	9600      	str	r6, [sp, #0]
 800189a:	f88d 700e 	strb.w	r7, [sp, #14]
 800189e:	f001 fa8f 	bl	8002dc0 <HAL_SPI_TransmitReceive>
    return received;
 80018a2:	f89d 300f 	ldrb.w	r3, [sp, #15]

    for (int i = 0; i < 512; i++)
        buff[i] = SD_ReceiveByte();
 80018a6:	f804 3f01 	strb.w	r3, [r4, #1]!
    for (int i = 0; i < 512; i++)
 80018aa:	42ac      	cmp	r4, r5
 80018ac:	d1ee      	bne.n	800188c <SD_ReadBlock+0x5c>
    HAL_SPI_TransmitReceive(&hspi3, &data, &received, 1, HAL_MAX_DELAY);
 80018ae:	f10d 020f 	add.w	r2, sp, #15
 80018b2:	f10d 010e 	add.w	r1, sp, #14
 80018b6:	2301      	movs	r3, #1
 80018b8:	9600      	str	r6, [sp, #0]
 80018ba:	4815      	ldr	r0, [pc, #84]	@ (8001910 <SD_ReadBlock+0xe0>)
 80018bc:	f88d 700e 	strb.w	r7, [sp, #14]
 80018c0:	f001 fa7e 	bl	8002dc0 <HAL_SPI_TransmitReceive>
 80018c4:	2301      	movs	r3, #1
 80018c6:	f10d 020f 	add.w	r2, sp, #15
 80018ca:	f10d 010e 	add.w	r1, sp, #14
 80018ce:	9600      	str	r6, [sp, #0]
 80018d0:	480f      	ldr	r0, [pc, #60]	@ (8001910 <SD_ReadBlock+0xe0>)
 80018d2:	f88d 700e 	strb.w	r7, [sp, #14]
 80018d6:	f001 fa73 	bl	8002dc0 <HAL_SPI_TransmitReceive>
    SD_CS_HIGH();
 80018da:	2201      	movs	r2, #1
 80018dc:	2110      	movs	r1, #16
 80018de:	480d      	ldr	r0, [pc, #52]	@ (8001914 <SD_ReadBlock+0xe4>)
 80018e0:	f000 fc36 	bl	8002150 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi3, &data, &received, 1, HAL_MAX_DELAY);
 80018e4:	f10d 020f 	add.w	r2, sp, #15
 80018e8:	f10d 010e 	add.w	r1, sp, #14
 80018ec:	2301      	movs	r3, #1
 80018ee:	9600      	str	r6, [sp, #0]
 80018f0:	4807      	ldr	r0, [pc, #28]	@ (8001910 <SD_ReadBlock+0xe0>)
 80018f2:	f88d 700e 	strb.w	r7, [sp, #14]
 80018f6:	f001 fa63 	bl	8002dc0 <HAL_SPI_TransmitReceive>
    SD_ReceiveByte(); // Discard CRC
    SD_ReceiveByte();

    SD_Deselect();
    return SD_OK;
}
 80018fa:	4648      	mov	r0, r9
 80018fc:	b005      	add	sp, #20
 80018fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return SD_ERROR;
 8001902:	f04f 0901 	mov.w	r9, #1
}
 8001906:	4648      	mov	r0, r9
 8001908:	b005      	add	sp, #20
 800190a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800190e:	bf00      	nop
 8001910:	20006a48 	.word	0x20006a48
 8001914:	40020000 	.word	0x40020000

08001918 <SD_WriteBlock>:

uint8_t SD_WriteBlock(uint32_t blockAddr, const uint8_t* buff) {
 8001918:	4603      	mov	r3, r0
    if (SD_SendCommand(CMD24, blockAddr, 0x01) != 0x00)
 800191a:	2201      	movs	r2, #1
 800191c:	2018      	movs	r0, #24
uint8_t SD_WriteBlock(uint32_t blockAddr, const uint8_t* buff) {
 800191e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001922:	460d      	mov	r5, r1
 8001924:	b084      	sub	sp, #16
    if (SD_SendCommand(CMD24, blockAddr, 0x01) != 0x00)
 8001926:	4619      	mov	r1, r3
 8001928:	f7ff fe90 	bl	800164c <SD_SendCommand>
 800192c:	b128      	cbz	r0, 800193a <SD_WriteBlock+0x22>
        return SD_ERROR;
 800192e:	f04f 0801 	mov.w	r8, #1

    while (!SD_ReceiveByte()); // Espera escrever

    SD_Deselect();
    return SD_OK;
}
 8001932:	4640      	mov	r0, r8
 8001934:	b004      	add	sp, #16
 8001936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_SPI_TransmitReceive(&hspi3, &data, &received, 1, HAL_MAX_DELAY);
 800193a:	f04f 36ff 	mov.w	r6, #4294967295
 800193e:	23fe      	movs	r3, #254	@ 0xfe
 8001940:	4f3e      	ldr	r7, [pc, #248]	@ (8001a3c <SD_WriteBlock+0x124>)
 8001942:	4680      	mov	r8, r0
    SD_TransmitByte(0xFE); // Start token
 8001944:	f88d 300e 	strb.w	r3, [sp, #14]
    HAL_SPI_TransmitReceive(&hspi3, &data, &received, 1, HAL_MAX_DELAY);
 8001948:	f10d 020f 	add.w	r2, sp, #15
 800194c:	2301      	movs	r3, #1
 800194e:	f10d 010e 	add.w	r1, sp, #14
 8001952:	4638      	mov	r0, r7
 8001954:	9600      	str	r6, [sp, #0]
 8001956:	19ac      	adds	r4, r5, r6
 8001958:	f205 15ff 	addw	r5, r5, #511	@ 0x1ff
 800195c:	f001 fa30 	bl	8002dc0 <HAL_SPI_TransmitReceive>
        SD_TransmitByte(buff[i]);
 8001960:	f814 cf01 	ldrb.w	ip, [r4, #1]!
    HAL_SPI_TransmitReceive(&hspi3, &data, &received, 1, HAL_MAX_DELAY);
 8001964:	2301      	movs	r3, #1
 8001966:	f10d 020f 	add.w	r2, sp, #15
 800196a:	f10d 010e 	add.w	r1, sp, #14
 800196e:	4638      	mov	r0, r7
 8001970:	9600      	str	r6, [sp, #0]
 8001972:	f88d c00e 	strb.w	ip, [sp, #14]
 8001976:	f001 fa23 	bl	8002dc0 <HAL_SPI_TransmitReceive>
    for (int i = 0; i < 512; i++)
 800197a:	42ac      	cmp	r4, r5
 800197c:	d1f0      	bne.n	8001960 <SD_WriteBlock+0x48>
    SD_TransmitByte(0xFF); // Dummy CRC
 800197e:	24ff      	movs	r4, #255	@ 0xff
    HAL_SPI_TransmitReceive(&hspi3, &data, &received, 1, HAL_MAX_DELAY);
 8001980:	2301      	movs	r3, #1
 8001982:	f10d 020f 	add.w	r2, sp, #15
 8001986:	f10d 010e 	add.w	r1, sp, #14
 800198a:	482c      	ldr	r0, [pc, #176]	@ (8001a3c <SD_WriteBlock+0x124>)
 800198c:	9600      	str	r6, [sp, #0]
 800198e:	f88d 600e 	strb.w	r6, [sp, #14]
 8001992:	f001 fa15 	bl	8002dc0 <HAL_SPI_TransmitReceive>
 8001996:	2301      	movs	r3, #1
 8001998:	f10d 020f 	add.w	r2, sp, #15
 800199c:	f10d 010e 	add.w	r1, sp, #14
 80019a0:	4826      	ldr	r0, [pc, #152]	@ (8001a3c <SD_WriteBlock+0x124>)
 80019a2:	9600      	str	r6, [sp, #0]
 80019a4:	f88d 400e 	strb.w	r4, [sp, #14]
 80019a8:	f001 fa0a 	bl	8002dc0 <HAL_SPI_TransmitReceive>
 80019ac:	2301      	movs	r3, #1
 80019ae:	f10d 020f 	add.w	r2, sp, #15
 80019b2:	f10d 010e 	add.w	r1, sp, #14
 80019b6:	4821      	ldr	r0, [pc, #132]	@ (8001a3c <SD_WriteBlock+0x124>)
 80019b8:	9600      	str	r6, [sp, #0]
 80019ba:	f88d 400e 	strb.w	r4, [sp, #14]
 80019be:	f001 f9ff 	bl	8002dc0 <HAL_SPI_TransmitReceive>
    return received;
 80019c2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    if ((resp & 0x1F) != 0x05) {
 80019c6:	f003 031f 	and.w	r3, r3, #31
 80019ca:	2b05      	cmp	r3, #5
 80019cc:	d125      	bne.n	8001a1a <SD_WriteBlock+0x102>
    HAL_SPI_TransmitReceive(&hspi3, &data, &received, 1, HAL_MAX_DELAY);
 80019ce:	f04f 35ff 	mov.w	r5, #4294967295
 80019d2:	4e1a      	ldr	r6, [pc, #104]	@ (8001a3c <SD_WriteBlock+0x124>)
 80019d4:	2301      	movs	r3, #1
 80019d6:	f10d 020f 	add.w	r2, sp, #15
 80019da:	f10d 010e 	add.w	r1, sp, #14
 80019de:	4630      	mov	r0, r6
 80019e0:	9500      	str	r5, [sp, #0]
 80019e2:	f88d 400e 	strb.w	r4, [sp, #14]
 80019e6:	f001 f9eb 	bl	8002dc0 <HAL_SPI_TransmitReceive>
    return received;
 80019ea:	f89d 300f 	ldrb.w	r3, [sp, #15]
    while (!SD_ReceiveByte()); // Espera escrever
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f0      	beq.n	80019d4 <SD_WriteBlock+0xbc>
    SD_CS_HIGH();
 80019f2:	2201      	movs	r2, #1
 80019f4:	2110      	movs	r1, #16
 80019f6:	4812      	ldr	r0, [pc, #72]	@ (8001a40 <SD_WriteBlock+0x128>)
 80019f8:	f000 fbaa 	bl	8002150 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi3, &data, &received, 1, HAL_MAX_DELAY);
 80019fc:	f10d 020f 	add.w	r2, sp, #15
 8001a00:	f10d 010e 	add.w	r1, sp, #14
 8001a04:	2301      	movs	r3, #1
 8001a06:	9500      	str	r5, [sp, #0]
 8001a08:	480c      	ldr	r0, [pc, #48]	@ (8001a3c <SD_WriteBlock+0x124>)
 8001a0a:	f88d 400e 	strb.w	r4, [sp, #14]
 8001a0e:	f001 f9d7 	bl	8002dc0 <HAL_SPI_TransmitReceive>
}
 8001a12:	4640      	mov	r0, r8
 8001a14:	b004      	add	sp, #16
 8001a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SD_CS_HIGH();
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	2110      	movs	r1, #16
 8001a1e:	4808      	ldr	r0, [pc, #32]	@ (8001a40 <SD_WriteBlock+0x128>)
 8001a20:	f000 fb96 	bl	8002150 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi3, &data, &received, 1, HAL_MAX_DELAY);
 8001a24:	2301      	movs	r3, #1
 8001a26:	f10d 020f 	add.w	r2, sp, #15
 8001a2a:	f10d 010e 	add.w	r1, sp, #14
 8001a2e:	9600      	str	r6, [sp, #0]
 8001a30:	4802      	ldr	r0, [pc, #8]	@ (8001a3c <SD_WriteBlock+0x124>)
 8001a32:	f88d 400e 	strb.w	r4, [sp, #14]
 8001a36:	f001 f9c3 	bl	8002dc0 <HAL_SPI_TransmitReceive>
}
 8001a3a:	e778      	b.n	800192e <SD_WriteBlock+0x16>
 8001a3c:	20006a48 	.word	0x20006a48
 8001a40:	40020000 	.word	0x40020000

08001a44 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a44:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a46:	4811      	ldr	r0, [pc, #68]	@ (8001a8c <MX_SPI1_Init+0x48>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a48:	f44f 7282 	mov.w	r2, #260	@ 0x104
  hspi1.Instance = SPI1;
 8001a4c:	4c10      	ldr	r4, [pc, #64]	@ (8001a90 <MX_SPI1_Init+0x4c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8001a54:	6083      	str	r3, [r0, #8]
 8001a56:	e9c0 4200 	strd	r4, r2, [r0]
 8001a5a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001a5e:	2430      	movs	r4, #48	@ 0x30
 8001a60:	e9c0 1303 	strd	r1, r3, [r0, #12]
 8001a64:	e9c0 3205 	strd	r3, r2, [r0, #20]
 8001a68:	2107      	movs	r1, #7
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a6a:	2208      	movs	r2, #8
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a6c:	e9c0 4307 	strd	r4, r3, [r0, #28]
 8001a70:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
 8001a74:	e9c0 130b 	strd	r1, r3, [r0, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a78:	6342      	str	r2, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a7a:	f001 f841 	bl	8002b00 <HAL_SPI_Init>
 8001a7e:	b900      	cbnz	r0, 8001a82 <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a80:	bd10      	pop	{r4, pc}
 8001a82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001a86:	f7ff bbbb 	b.w	8001200 <Error_Handler>
 8001a8a:	bf00      	nop
 8001a8c:	20006ab0 	.word	0x20006ab0
 8001a90:	40013000 	.word	0x40013000

08001a94 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001a94:	b510      	push	{r4, lr}
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001a96:	4811      	ldr	r0, [pc, #68]	@ (8001adc <MX_SPI3_Init+0x48>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001a98:	f44f 7282 	mov.w	r2, #260	@ 0x104
  hspi3.Instance = SPI3;
 8001a9c:	4c10      	ldr	r4, [pc, #64]	@ (8001ae0 <MX_SPI3_Init+0x4c>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8001aa4:	6083      	str	r3, [r0, #8]
 8001aa6:	e9c0 4200 	strd	r4, r2, [r0]
 8001aaa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001aae:	2410      	movs	r4, #16
 8001ab0:	e9c0 1303 	strd	r1, r3, [r0, #12]
 8001ab4:	e9c0 3205 	strd	r3, r2, [r0, #20]
 8001ab8:	2107      	movs	r1, #7
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi3.Init.CRCPolynomial = 7;
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001aba:	2208      	movs	r2, #8
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001abc:	e9c0 4307 	strd	r4, r3, [r0, #28]
 8001ac0:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
 8001ac4:	e9c0 130b 	strd	r1, r3, [r0, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ac8:	6342      	str	r2, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001aca:	f001 f819 	bl	8002b00 <HAL_SPI_Init>
 8001ace:	b900      	cbnz	r0, 8001ad2 <MX_SPI3_Init+0x3e>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001ad0:	bd10      	pop	{r4, pc}
 8001ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001ad6:	f7ff bb93 	b.w	8001200 <Error_Handler>
 8001ada:	bf00      	nop
 8001adc:	20006a48 	.word	0x20006a48
 8001ae0:	40003c00 	.word	0x40003c00

08001ae4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 8001ae4:	4a34      	ldr	r2, [pc, #208]	@ (8001bb8 <HAL_SPI_MspInit+0xd4>)
 8001ae6:	6803      	ldr	r3, [r0, #0]
{
 8001ae8:	b570      	push	{r4, r5, r6, lr}
  if(spiHandle->Instance==SPI1)
 8001aea:	4293      	cmp	r3, r2
{
 8001aec:	b08c      	sub	sp, #48	@ 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aee:	f04f 0400 	mov.w	r4, #0
 8001af2:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001af6:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8001afa:	940a      	str	r4, [sp, #40]	@ 0x28
  if(spiHandle->Instance==SPI1)
 8001afc:	d004      	beq.n	8001b08 <HAL_SPI_MspInit+0x24>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI3)
 8001afe:	4a2f      	ldr	r2, [pc, #188]	@ (8001bbc <HAL_SPI_MspInit+0xd8>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d023      	beq.n	8001b4c <HAL_SPI_MspInit+0x68>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001b04:	b00c      	add	sp, #48	@ 0x30
 8001b06:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b08:	4b2d      	ldr	r3, [pc, #180]	@ (8001bc0 <HAL_SPI_MspInit+0xdc>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0a:	2003      	movs	r0, #3
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 8001b0c:	f248 04e0 	movw	r4, #32992	@ 0x80e0
 8001b10:	2502      	movs	r5, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b14:	a906      	add	r1, sp, #24
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b16:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001b1a:	645a      	str	r2, [r3, #68]	@ 0x44
 8001b1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b1e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001b22:	9201      	str	r2, [sp, #4]
 8001b24:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b28:	f042 0201 	orr.w	r2, r2, #1
 8001b2c:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2e:	2205      	movs	r2, #5
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b32:	9009      	str	r0, [sp, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b34:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b38:	4822      	ldr	r0, [pc, #136]	@ (8001bc4 <HAL_SPI_MspInit+0xe0>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3a:	920a      	str	r2, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3c:	9302      	str	r3, [sp, #8]
 8001b3e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 8001b40:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b44:	f000 f9c4 	bl	8001ed0 <HAL_GPIO_Init>
}
 8001b48:	b00c      	add	sp, #48	@ 0x30
 8001b4a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b4c:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc0 <HAL_SPI_MspInit+0xdc>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4e:	2603      	movs	r6, #3
 8001b50:	2506      	movs	r5, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b52:	a906      	add	r1, sp, #24
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b56:	481b      	ldr	r0, [pc, #108]	@ (8001bc4 <HAL_SPI_MspInit+0xe0>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b58:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b5c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b60:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8001b64:	9203      	str	r2, [sp, #12]
 8001b66:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b6a:	f042 0201 	orr.w	r2, r2, #1
 8001b6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b72:	f002 0201 	and.w	r2, r2, #1
 8001b76:	9204      	str	r2, [sp, #16]
 8001b78:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b7c:	f042 0202 	orr.w	r2, r2, #2
 8001b80:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b82:	2210      	movs	r2, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b8c:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8e:	e9cd 6509 	strd	r6, r5, [sp, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b92:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b96:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b98:	f000 f99a 	bl	8001ed0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001b9c:	2338      	movs	r3, #56	@ 0x38
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9e:	a906      	add	r1, sp, #24
 8001ba0:	4809      	ldr	r0, [pc, #36]	@ (8001bc8 <HAL_SPI_MspInit+0xe4>)
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001ba2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001baa:	e9cd 6509 	strd	r6, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bae:	f000 f98f 	bl	8001ed0 <HAL_GPIO_Init>
}
 8001bb2:	b00c      	add	sp, #48	@ 0x30
 8001bb4:	bd70      	pop	{r4, r5, r6, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40013000 	.word	0x40013000
 8001bbc:	40003c00 	.word	0x40003c00
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40020000 	.word	0x40020000
 8001bc8:	40020400 	.word	0x40020400

08001bcc <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf8 <HAL_MspInit+0x2c>)
{
 8001bce:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bd2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001bd6:	641a      	str	r2, [r3, #64]	@ 0x40
 8001bd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bda:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8001bde:	9200      	str	r2, [sp, #0]
 8001be0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001be4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001be8:	645a      	str	r2, [r3, #68]	@ 0x44
 8001bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bf0:	9301      	str	r3, [sp, #4]
 8001bf2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bf4:	b002      	add	sp, #8
 8001bf6:	4770      	bx	lr
 8001bf8:	40023800 	.word	0x40023800

08001bfc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bfc:	e7fe      	b.n	8001bfc <NMI_Handler>
 8001bfe:	bf00      	nop

08001c00 <HardFault_Handler>:

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001c00:	4c05      	ldr	r4, [pc, #20]	@ (8001c18 <HardFault_Handler+0x18>)
{
 8001c02:	b508      	push	{r3, lr}
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001c04:	4620      	mov	r0, r4
 8001c06:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c0a:	f000 faa5 	bl	8002158 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8001c0e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c12:	f000 f8e7 	bl	8001de4 <HAL_Delay>
  while (1)
 8001c16:	e7f5      	b.n	8001c04 <HardFault_Handler+0x4>
 8001c18:	40020400 	.word	0x40020400

08001c1c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c1c:	e7fe      	b.n	8001c1c <MemManage_Handler>
 8001c1e:	bf00      	nop

08001c20 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c20:	e7fe      	b.n	8001c20 <BusFault_Handler>
 8001c22:	bf00      	nop

08001c24 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c24:	e7fe      	b.n	8001c24 <UsageFault_Handler>
 8001c26:	bf00      	nop

08001c28 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop

08001c2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop

08001c30 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop

08001c34 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c34:	f000 b8c4 	b.w	8001dc0 <HAL_IncTick>

08001c38 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001c38:	2001      	movs	r0, #1
 8001c3a:	4770      	bx	lr

08001c3c <_kill>:

int _kill(int pid, int sig)
{
 8001c3c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c3e:	f006 ffeb 	bl	8008c18 <__errno>
 8001c42:	2216      	movs	r2, #22
 8001c44:	4603      	mov	r3, r0
  return -1;
}
 8001c46:	f04f 30ff 	mov.w	r0, #4294967295
  errno = EINVAL;
 8001c4a:	601a      	str	r2, [r3, #0]
}
 8001c4c:	bd08      	pop	{r3, pc}
 8001c4e:	bf00      	nop

08001c50 <_exit>:

void _exit (int status)
{
 8001c50:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001c52:	f006 ffe1 	bl	8008c18 <__errno>
 8001c56:	2316      	movs	r3, #22
 8001c58:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001c5a:	e7fe      	b.n	8001c5a <_exit+0xa>

08001c5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c5c:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5e:	1e16      	subs	r6, r2, #0
 8001c60:	dd07      	ble.n	8001c72 <_read+0x16>
 8001c62:	460c      	mov	r4, r1
 8001c64:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8001c66:	f3af 8000 	nop.w
 8001c6a:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6e:	42a5      	cmp	r5, r4
 8001c70:	d1f9      	bne.n	8001c66 <_read+0xa>
  }

  return len;
}
 8001c72:	4630      	mov	r0, r6
 8001c74:	bd70      	pop	{r4, r5, r6, pc}
 8001c76:	bf00      	nop

08001c78 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c78:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7a:	1e16      	subs	r6, r2, #0
 8001c7c:	dd07      	ble.n	8001c8e <_write+0x16>
 8001c7e:	460c      	mov	r4, r1
 8001c80:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8001c82:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001c86:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8a:	42ac      	cmp	r4, r5
 8001c8c:	d1f9      	bne.n	8001c82 <_write+0xa>
  }
  return len;
}
 8001c8e:	4630      	mov	r0, r6
 8001c90:	bd70      	pop	{r4, r5, r6, pc}
 8001c92:	bf00      	nop

08001c94 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop

08001c9c <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001c9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 8001ca0:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8001ca2:	604b      	str	r3, [r1, #4]
}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop

08001ca8 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001ca8:	2001      	movs	r0, #1
 8001caa:	4770      	bx	lr

08001cac <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001cac:	2000      	movs	r0, #0
 8001cae:	4770      	bx	lr

08001cb0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cb0:	490d      	ldr	r1, [pc, #52]	@ (8001ce8 <_sbrk+0x38>)
{
 8001cb2:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cec <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8001cb6:	6808      	ldr	r0, [r1, #0]
{
 8001cb8:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cba:	4c0d      	ldr	r4, [pc, #52]	@ (8001cf0 <_sbrk+0x40>)
 8001cbc:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001cbe:	b120      	cbz	r0, 8001cca <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cc0:	4403      	add	r3, r0
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d807      	bhi.n	8001cd6 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001cc6:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8001cc8:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001cca:	4c0a      	ldr	r4, [pc, #40]	@ (8001cf4 <_sbrk+0x44>)
 8001ccc:	4620      	mov	r0, r4
 8001cce:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001cd0:	4403      	add	r3, r0
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d9f7      	bls.n	8001cc6 <_sbrk+0x16>
    errno = ENOMEM;
 8001cd6:	f006 ff9f 	bl	8008c18 <__errno>
 8001cda:	220c      	movs	r2, #12
 8001cdc:	4603      	mov	r3, r0
    return (void *)-1;
 8001cde:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 8001ce2:	601a      	str	r2, [r3, #0]
}
 8001ce4:	bd10      	pop	{r4, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20006b14 	.word	0x20006b14
 8001cec:	20050000 	.word	0x20050000
 8001cf0:	00000400 	.word	0x00000400
 8001cf4:	200070f8 	.word	0x200070f8

08001cf8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cf8:	4a03      	ldr	r2, [pc, #12]	@ (8001d08 <SystemInit+0x10>)
 8001cfa:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001cfe:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d02:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d06:	4770      	bx	lr
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d44 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d10:	f7ff fff2 	bl	8001cf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d14:	480c      	ldr	r0, [pc, #48]	@ (8001d48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d16:	490d      	ldr	r1, [pc, #52]	@ (8001d4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d18:	4a0d      	ldr	r2, [pc, #52]	@ (8001d50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d1c:	e002      	b.n	8001d24 <LoopCopyDataInit>

08001d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d22:	3304      	adds	r3, #4

08001d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d28:	d3f9      	bcc.n	8001d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d2c:	4c0a      	ldr	r4, [pc, #40]	@ (8001d58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d30:	e001      	b.n	8001d36 <LoopFillZerobss>

08001d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d34:	3204      	adds	r2, #4

08001d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d38:	d3fb      	bcc.n	8001d32 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001d3a:	f006 ff73 	bl	8008c24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d3e:	f7ff fab9 	bl	80012b4 <main>
  bx  lr    
 8001d42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d44:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d4c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001d50:	0800c04c 	.word	0x0800c04c
  ldr r2, =_sbss
 8001d54:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001d58:	200070f4 	.word	0x200070f4

08001d5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d5c:	e7fe      	b.n	8001d5c <ADC_IRQHandler>
	...

08001d60 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d60:	490e      	ldr	r1, [pc, #56]	@ (8001d9c <HAL_InitTick+0x3c>)
 8001d62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d66:	4a0e      	ldr	r2, [pc, #56]	@ (8001da0 <HAL_InitTick+0x40>)
{
 8001d68:	b510      	push	{r4, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d6a:	7809      	ldrb	r1, [r1, #0]
{
 8001d6c:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d74:	fbb2 f0f3 	udiv	r0, r2, r3
 8001d78:	f000 f894 	bl	8001ea4 <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d7c:	b908      	cbnz	r0, 8001d82 <HAL_InitTick+0x22>
 8001d7e:	2c0f      	cmp	r4, #15
 8001d80:	d901      	bls.n	8001d86 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8001d82:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001d84:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d86:	2200      	movs	r2, #0
 8001d88:	4621      	mov	r1, r4
 8001d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d8e:	f000 f84d 	bl	8001e2c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d92:	4b04      	ldr	r3, [pc, #16]	@ (8001da4 <HAL_InitTick+0x44>)
 8001d94:	2000      	movs	r0, #0
 8001d96:	601c      	str	r4, [r3, #0]
}
 8001d98:	bd10      	pop	{r4, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000004 	.word	0x20000004
 8001da0:	20000000 	.word	0x20000000
 8001da4:	20000008 	.word	0x20000008

08001da8 <HAL_Init>:
{
 8001da8:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001daa:	2003      	movs	r0, #3
 8001dac:	f000 f82c 	bl	8001e08 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001db0:	2000      	movs	r0, #0
 8001db2:	f7ff ffd5 	bl	8001d60 <HAL_InitTick>
  HAL_MspInit();
 8001db6:	f7ff ff09 	bl	8001bcc <HAL_MspInit>
}
 8001dba:	2000      	movs	r0, #0
 8001dbc:	bd08      	pop	{r3, pc}
 8001dbe:	bf00      	nop

08001dc0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001dc0:	4a03      	ldr	r2, [pc, #12]	@ (8001dd0 <HAL_IncTick+0x10>)
 8001dc2:	4b04      	ldr	r3, [pc, #16]	@ (8001dd4 <HAL_IncTick+0x14>)
 8001dc4:	6811      	ldr	r1, [r2, #0]
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	440b      	add	r3, r1
 8001dca:	6013      	str	r3, [r2, #0]
}
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	20006b18 	.word	0x20006b18
 8001dd4:	20000004 	.word	0x20000004

08001dd8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001dd8:	4b01      	ldr	r3, [pc, #4]	@ (8001de0 <HAL_GetTick+0x8>)
 8001dda:	6818      	ldr	r0, [r3, #0]
}
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	20006b18 	.word	0x20006b18

08001de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de4:	b538      	push	{r3, r4, r5, lr}
 8001de6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001de8:	f7ff fff6 	bl	8001dd8 <HAL_GetTick>
 8001dec:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dee:	1c63      	adds	r3, r4, #1
 8001df0:	d002      	beq.n	8001df8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001df2:	4b04      	ldr	r3, [pc, #16]	@ (8001e04 <HAL_Delay+0x20>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001df8:	f7ff ffee 	bl	8001dd8 <HAL_GetTick>
 8001dfc:	1b40      	subs	r0, r0, r5
 8001dfe:	42a0      	cmp	r0, r4
 8001e00:	d3fa      	bcc.n	8001df8 <HAL_Delay+0x14>
  {
  }
}
 8001e02:	bd38      	pop	{r3, r4, r5, pc}
 8001e04:	20000004 	.word	0x20000004

08001e08 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e08:	4906      	ldr	r1, [pc, #24]	@ (8001e24 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e0a:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e0e:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8001e10:	4b05      	ldr	r3, [pc, #20]	@ (8001e28 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e12:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e14:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e18:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e1c:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8001e1e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001e20:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001e22:	4770      	bx	lr
 8001e24:	e000ed00 	.word	0xe000ed00
 8001e28:	05fa0000 	.word	0x05fa0000

08001e2c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001e98 <HAL_NVIC_SetPriority+0x6c>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e34:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e36:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e3a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e3e:	f1be 0f04 	cmp.w	lr, #4
 8001e42:	bf28      	it	cs
 8001e44:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e48:	f1bc 0f06 	cmp.w	ip, #6
 8001e4c:	d91a      	bls.n	8001e84 <HAL_NVIC_SetPriority+0x58>
 8001e4e:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e52:	f04f 33ff 	mov.w	r3, #4294967295
 8001e56:	fa03 f30c 	lsl.w	r3, r3, ip
 8001e5a:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e5e:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8001e62:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e64:	fa03 f30e 	lsl.w	r3, r3, lr
 8001e68:	ea21 0303 	bic.w	r3, r1, r3
 8001e6c:	fa03 f30c 	lsl.w	r3, r3, ip
 8001e70:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e74:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001e78:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001e7a:	db06      	blt.n	8001e8a <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7c:	4a07      	ldr	r2, [pc, #28]	@ (8001e9c <HAL_NVIC_SetPriority+0x70>)
 8001e7e:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001e80:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e84:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e86:	4694      	mov	ip, r2
 8001e88:	e7e9      	b.n	8001e5e <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8a:	f000 000f 	and.w	r0, r0, #15
 8001e8e:	4a04      	ldr	r2, [pc, #16]	@ (8001ea0 <HAL_NVIC_SetPriority+0x74>)
 8001e90:	5413      	strb	r3, [r2, r0]
 8001e92:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e96:	bf00      	nop
 8001e98:	e000ed00 	.word	0xe000ed00
 8001e9c:	e000e400 	.word	0xe000e400
 8001ea0:	e000ed14 	.word	0xe000ed14

08001ea4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea4:	1e43      	subs	r3, r0, #1
 8001ea6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001eaa:	d301      	bcc.n	8001eb0 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eac:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001eae:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eb0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb4:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb6:	4905      	ldr	r1, [pc, #20]	@ (8001ecc <HAL_SYSTICK_Config+0x28>)
 8001eb8:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ebc:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ebe:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec0:	f881 c023 	strb.w	ip, [r1, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec4:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ec6:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001ed4:	2300      	movs	r3, #0
{
 8001ed6:	b085      	sub	sp, #20
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ed8:	f04f 0b01 	mov.w	fp, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001edc:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ede:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8002124 <HAL_GPIO_Init+0x254>

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ee2:	4689      	mov	r9, r1
 8001ee4:	e003      	b.n	8001eee <HAL_GPIO_Init+0x1e>
  for (position = 0; position < GPIO_NUMBER; position++)
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	2b10      	cmp	r3, #16
 8001eea:	f000 809b 	beq.w	8002024 <HAL_GPIO_Init+0x154>
    ioposition = ((uint32_t)0x01) << position;
 8001eee:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ef2:	ea02 0804 	and.w	r8, r2, r4
    if (iocurrent == ioposition)
 8001ef6:	43a2      	bics	r2, r4
 8001ef8:	d1f5      	bne.n	8001ee6 <HAL_GPIO_Init+0x16>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001efa:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8001efe:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f02:	2503      	movs	r5, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f04:	f001 0203 	and.w	r2, r1, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f08:	fa05 f50c 	lsl.w	r5, r5, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f0c:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f0e:	43ed      	mvns	r5, r5
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f10:	2f01      	cmp	r7, #1
 8001f12:	f240 808a 	bls.w	800202a <HAL_GPIO_Init+0x15a>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f16:	2a03      	cmp	r2, #3
 8001f18:	f040 80c3 	bne.w	80020a2 <HAL_GPIO_Init+0x1d2>
      temp = GPIOx->MODER;
 8001f1c:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f1e:	fa02 f20c 	lsl.w	r2, r2, ip
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f22:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f26:	ea05 0507 	and.w	r5, r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f2a:	ea42 0205 	orr.w	r2, r2, r5
      GPIOx->MODER = temp;
 8001f2e:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f30:	d0d9      	beq.n	8001ee6 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f32:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8001f36:	f023 0503 	bic.w	r5, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f3a:	f003 0703 	and.w	r7, r3, #3
 8001f3e:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f40:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f44:	f105 4580 	add.w	r5, r5, #1073741824	@ 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f48:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4a:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 8001f4e:	f505 359c 	add.w	r5, r5, #79872	@ 0x13800
 8001f52:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f56:	fa06 fc07 	lsl.w	ip, r6, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f5a:	4e6f      	ldr	r6, [pc, #444]	@ (8002118 <HAL_GPIO_Init+0x248>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f60:	42b0      	cmp	r0, r6
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f62:	9203      	str	r2, [sp, #12]
 8001f64:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8001f66:	68aa      	ldr	r2, [r5, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f68:	ea22 020c 	bic.w	r2, r2, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f6c:	d031      	beq.n	8001fd2 <HAL_GPIO_Init+0x102>
 8001f6e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8001f72:	42b0      	cmp	r0, r6
 8001f74:	f000 80a0 	beq.w	80020b8 <HAL_GPIO_Init+0x1e8>
 8001f78:	4e68      	ldr	r6, [pc, #416]	@ (800211c <HAL_GPIO_Init+0x24c>)
 8001f7a:	42b0      	cmp	r0, r6
 8001f7c:	f000 80a2 	beq.w	80020c4 <HAL_GPIO_Init+0x1f4>
 8001f80:	f8df c1a4 	ldr.w	ip, [pc, #420]	@ 8002128 <HAL_GPIO_Init+0x258>
 8001f84:	4560      	cmp	r0, ip
 8001f86:	f000 80a3 	beq.w	80020d0 <HAL_GPIO_Init+0x200>
 8001f8a:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 800212c <HAL_GPIO_Init+0x25c>
 8001f8e:	4560      	cmp	r0, ip
 8001f90:	f000 80a4 	beq.w	80020dc <HAL_GPIO_Init+0x20c>
 8001f94:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8002130 <HAL_GPIO_Init+0x260>
 8001f98:	4560      	cmp	r0, ip
 8001f9a:	f000 80ab 	beq.w	80020f4 <HAL_GPIO_Init+0x224>
 8001f9e:	f8df c194 	ldr.w	ip, [pc, #404]	@ 8002134 <HAL_GPIO_Init+0x264>
 8001fa2:	4560      	cmp	r0, ip
 8001fa4:	f000 80ac 	beq.w	8002100 <HAL_GPIO_Init+0x230>
 8001fa8:	f8df c18c 	ldr.w	ip, [pc, #396]	@ 8002138 <HAL_GPIO_Init+0x268>
 8001fac:	4560      	cmp	r0, ip
 8001fae:	f000 809b 	beq.w	80020e8 <HAL_GPIO_Init+0x218>
 8001fb2:	f8df c188 	ldr.w	ip, [pc, #392]	@ 800213c <HAL_GPIO_Init+0x26c>
 8001fb6:	4560      	cmp	r0, ip
 8001fb8:	f000 80a8 	beq.w	800210c <HAL_GPIO_Init+0x23c>
 8001fbc:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8002140 <HAL_GPIO_Init+0x270>
 8001fc0:	4560      	cmp	r0, ip
 8001fc2:	bf0c      	ite	eq
 8001fc4:	f04f 0c09 	moveq.w	ip, #9
 8001fc8:	f04f 0c0a 	movne.w	ip, #10
 8001fcc:	fa0c f707 	lsl.w	r7, ip, r7
 8001fd0:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8001fd2:	60aa      	str	r2, [r5, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fd4:	02ce      	lsls	r6, r1, #11
        temp = EXTI->RTSR;
 8001fd6:	4a52      	ldr	r2, [pc, #328]	@ (8002120 <HAL_GPIO_Init+0x250>)
        temp &= ~((uint32_t)iocurrent);
 8001fd8:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8001fdc:	4e50      	ldr	r6, [pc, #320]	@ (8002120 <HAL_GPIO_Init+0x250>)
  for (position = 0; position < GPIO_NUMBER; position++)
 8001fde:	f103 0301 	add.w	r3, r3, #1
        temp = EXTI->RTSR;
 8001fe2:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001fe4:	bf54      	ite	pl
 8001fe6:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8001fe8:	ea48 0202 	orrmi.w	r2, r8, r2

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fec:	028f      	lsls	r7, r1, #10
        EXTI->RTSR = temp;
 8001fee:	60b2      	str	r2, [r6, #8]
        temp = EXTI->FTSR;
 8001ff0:	68f2      	ldr	r2, [r6, #12]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8001ff2:	4e4b      	ldr	r6, [pc, #300]	@ (8002120 <HAL_GPIO_Init+0x250>)
        temp &= ~((uint32_t)iocurrent);
 8001ff4:	bf54      	ite	pl
 8001ff6:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8001ff8:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 8001ffc:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8001ffe:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002000:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8002002:	4e47      	ldr	r6, [pc, #284]	@ (8002120 <HAL_GPIO_Init+0x250>)
        temp &= ~((uint32_t)iocurrent);
 8002004:	bf54      	ite	pl
 8002006:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8002008:	ea48 0202 	orrmi.w	r2, r8, r2

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800200c:	03c9      	lsls	r1, r1, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 800200e:	4944      	ldr	r1, [pc, #272]	@ (8002120 <HAL_GPIO_Init+0x250>)
        EXTI->EMR = temp;
 8002010:	6072      	str	r2, [r6, #4]
        temp = EXTI->IMR;
 8002012:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 8002014:	bf54      	ite	pl
 8002016:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8002018:	ea48 0202 	orrmi.w	r2, r8, r2
  for (position = 0; position < GPIO_NUMBER; position++)
 800201c:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 800201e:	600a      	str	r2, [r1, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002020:	f47f af65 	bne.w	8001eee <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8002024:	b005      	add	sp, #20
 8002026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 800202a:	6887      	ldr	r7, [r0, #8]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800202c:	2a02      	cmp	r2, #2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800202e:	ea07 0e05 	and.w	lr, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8002032:	f8d9 700c 	ldr.w	r7, [r9, #12]
 8002036:	fa07 f70c 	lsl.w	r7, r7, ip
 800203a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800203e:	6087      	str	r7, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002040:	f3c1 1700 	ubfx	r7, r1, #4, #1
        temp = GPIOx->OTYPER;
 8002044:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002048:	fa07 f703 	lsl.w	r7, r7, r3
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800204c:	ea2e 0e08 	bic.w	lr, lr, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002050:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002054:	6047      	str	r7, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002056:	f8d9 7008 	ldr.w	r7, [r9, #8]
        temp = GPIOx->PUPDR;
 800205a:	f8d0 e00c 	ldr.w	lr, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800205e:	fa07 f70c 	lsl.w	r7, r7, ip
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002062:	ea0e 0e05 	and.w	lr, lr, r5
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002066:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 800206a:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800206c:	f47f af56 	bne.w	8001f1c <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3];
 8002070:	08df      	lsrs	r7, r3, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002072:	f003 0e07 	and.w	lr, r3, #7
 8002076:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800207a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800207e:	6a3e      	ldr	r6, [r7, #32]
 8002080:	9701      	str	r7, [sp, #4]
 8002082:	9600      	str	r6, [sp, #0]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002084:	260f      	movs	r6, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002086:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800208a:	fa07 f70e 	lsl.w	r7, r7, lr
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800208e:	fa06 fe0e 	lsl.w	lr, r6, lr
 8002092:	9e00      	ldr	r6, [sp, #0]
 8002094:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3] = temp;
 8002098:	9e01      	ldr	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800209a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 800209e:	6237      	str	r7, [r6, #32]
 80020a0:	e73c      	b.n	8001f1c <HAL_GPIO_Init+0x4c>
        temp = GPIOx->PUPDR;
 80020a2:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80020a4:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80020a8:	f8d9 7008 	ldr.w	r7, [r9, #8]
 80020ac:	fa07 f70c 	lsl.w	r7, r7, ip
 80020b0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 80020b4:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b6:	e731      	b.n	8001f1c <HAL_GPIO_Init+0x4c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80020b8:	f04f 0c01 	mov.w	ip, #1
 80020bc:	fa0c f707 	lsl.w	r7, ip, r7
 80020c0:	433a      	orrs	r2, r7
 80020c2:	e786      	b.n	8001fd2 <HAL_GPIO_Init+0x102>
 80020c4:	f04f 0c02 	mov.w	ip, #2
 80020c8:	fa0c f707 	lsl.w	r7, ip, r7
 80020cc:	433a      	orrs	r2, r7
 80020ce:	e780      	b.n	8001fd2 <HAL_GPIO_Init+0x102>
 80020d0:	f04f 0c03 	mov.w	ip, #3
 80020d4:	fa0c f707 	lsl.w	r7, ip, r7
 80020d8:	433a      	orrs	r2, r7
 80020da:	e77a      	b.n	8001fd2 <HAL_GPIO_Init+0x102>
 80020dc:	f04f 0c04 	mov.w	ip, #4
 80020e0:	fa0c f707 	lsl.w	r7, ip, r7
 80020e4:	433a      	orrs	r2, r7
 80020e6:	e774      	b.n	8001fd2 <HAL_GPIO_Init+0x102>
 80020e8:	f04f 0c07 	mov.w	ip, #7
 80020ec:	fa0c f707 	lsl.w	r7, ip, r7
 80020f0:	433a      	orrs	r2, r7
 80020f2:	e76e      	b.n	8001fd2 <HAL_GPIO_Init+0x102>
 80020f4:	f04f 0c05 	mov.w	ip, #5
 80020f8:	fa0c f707 	lsl.w	r7, ip, r7
 80020fc:	433a      	orrs	r2, r7
 80020fe:	e768      	b.n	8001fd2 <HAL_GPIO_Init+0x102>
 8002100:	f04f 0c06 	mov.w	ip, #6
 8002104:	fa0c f707 	lsl.w	r7, ip, r7
 8002108:	433a      	orrs	r2, r7
 800210a:	e762      	b.n	8001fd2 <HAL_GPIO_Init+0x102>
 800210c:	f04f 0c08 	mov.w	ip, #8
 8002110:	fa0c f707 	lsl.w	r7, ip, r7
 8002114:	433a      	orrs	r2, r7
 8002116:	e75c      	b.n	8001fd2 <HAL_GPIO_Init+0x102>
 8002118:	40020000 	.word	0x40020000
 800211c:	40020800 	.word	0x40020800
 8002120:	40013c00 	.word	0x40013c00
 8002124:	40023800 	.word	0x40023800
 8002128:	40020c00 	.word	0x40020c00
 800212c:	40021000 	.word	0x40021000
 8002130:	40021400 	.word	0x40021400
 8002134:	40021800 	.word	0x40021800
 8002138:	40021c00 	.word	0x40021c00
 800213c:	40022000 	.word	0x40022000
 8002140:	40022400 	.word	0x40022400

08002144 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002144:	6903      	ldr	r3, [r0, #16]
 8002146:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002148:	bf14      	ite	ne
 800214a:	2001      	movne	r0, #1
 800214c:	2000      	moveq	r0, #0
 800214e:	4770      	bx	lr

08002150 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002150:	b902      	cbnz	r2, 8002154 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002152:	0409      	lsls	r1, r1, #16
 8002154:	6181      	str	r1, [r0, #24]
  }
}
 8002156:	4770      	bx	lr

08002158 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002158:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800215a:	ea01 0203 	and.w	r2, r1, r3
 800215e:	ea21 0103 	bic.w	r1, r1, r3
 8002162:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002166:	6181      	str	r1, [r0, #24]
}
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop

0800216c <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800216c:	4b1a      	ldr	r3, [pc, #104]	@ (80021d8 <HAL_PWREx_EnableOverDrive+0x6c>)
 800216e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002170:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
{
 8002174:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002176:	641a      	str	r2, [r3, #64]	@ 0x40
{
 8002178:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 800217a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800217c:	4c17      	ldr	r4, [pc, #92]	@ (80021dc <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800217e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002182:	9301      	str	r3, [sp, #4]
 8002184:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002186:	6823      	ldr	r3, [r4, #0]
 8002188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800218c:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800218e:	f7ff fe23 	bl	8001dd8 <HAL_GetTick>
 8002192:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002194:	e005      	b.n	80021a2 <HAL_PWREx_EnableOverDrive+0x36>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002196:	f7ff fe1f 	bl	8001dd8 <HAL_GetTick>
 800219a:	1b40      	subs	r0, r0, r5
 800219c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80021a0:	d817      	bhi.n	80021d2 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021a2:	6863      	ldr	r3, [r4, #4]
 80021a4:	03da      	lsls	r2, r3, #15
 80021a6:	d5f6      	bpl.n	8002196 <HAL_PWREx_EnableOverDrive+0x2a>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80021a8:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021aa:	4d0c      	ldr	r5, [pc, #48]	@ (80021dc <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80021ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021b0:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80021b2:	f7ff fe11 	bl	8001dd8 <HAL_GetTick>
 80021b6:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021b8:	e005      	b.n	80021c6 <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021ba:	f7ff fe0d 	bl	8001dd8 <HAL_GetTick>
 80021be:	1b00      	subs	r0, r0, r4
 80021c0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80021c4:	d805      	bhi.n	80021d2 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021c6:	686b      	ldr	r3, [r5, #4]
 80021c8:	039b      	lsls	r3, r3, #14
 80021ca:	d5f6      	bpl.n	80021ba <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80021cc:	2000      	movs	r0, #0
}
 80021ce:	b003      	add	sp, #12
 80021d0:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 80021d2:	2003      	movs	r0, #3
}
 80021d4:	b003      	add	sp, #12
 80021d6:	bd30      	pop	{r4, r5, pc}
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40007000 	.word	0x40007000

080021e0 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021e0:	2800      	cmp	r0, #0
 80021e2:	f000 81e7 	beq.w	80025b4 <HAL_RCC_OscConfig+0x3d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021e6:	6803      	ldr	r3, [r0, #0]
{
 80021e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ec:	07dd      	lsls	r5, r3, #31
{
 80021ee:	b082      	sub	sp, #8
 80021f0:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021f2:	d535      	bpl.n	8002260 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021f4:	499a      	ldr	r1, [pc, #616]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 80021f6:	688a      	ldr	r2, [r1, #8]
 80021f8:	f002 020c 	and.w	r2, r2, #12
 80021fc:	2a04      	cmp	r2, #4
 80021fe:	f000 80e0 	beq.w	80023c2 <HAL_RCC_OscConfig+0x1e2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002202:	688a      	ldr	r2, [r1, #8]
 8002204:	f002 020c 	and.w	r2, r2, #12
 8002208:	2a08      	cmp	r2, #8
 800220a:	f000 80d6 	beq.w	80023ba <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800220e:	6863      	ldr	r3, [r4, #4]
 8002210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002214:	d010      	beq.n	8002238 <HAL_RCC_OscConfig+0x58>
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 80fd 	beq.w	8002416 <HAL_RCC_OscConfig+0x236>
 800221c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002220:	4b8f      	ldr	r3, [pc, #572]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	f000 8185 	beq.w	8002532 <HAL_RCC_OscConfig+0x352>
 8002228:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002234:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002236:	e004      	b.n	8002242 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002238:	4a89      	ldr	r2, [pc, #548]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 800223a:	6813      	ldr	r3, [r2, #0]
 800223c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002240:	6013      	str	r3, [r2, #0]
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002242:	f7ff fdc9 	bl	8001dd8 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002246:	4e86      	ldr	r6, [pc, #536]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 8002248:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224a:	e005      	b.n	8002258 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800224c:	f7ff fdc4 	bl	8001dd8 <HAL_GetTick>
 8002250:	1b40      	subs	r0, r0, r5
 8002252:	2864      	cmp	r0, #100	@ 0x64
 8002254:	f200 80db 	bhi.w	800240e <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002258:	6833      	ldr	r3, [r6, #0]
 800225a:	039b      	lsls	r3, r3, #14
 800225c:	d5f6      	bpl.n	800224c <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800225e:	6823      	ldr	r3, [r4, #0]
 8002260:	079d      	lsls	r5, r3, #30
 8002262:	d528      	bpl.n	80022b6 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002264:	4a7e      	ldr	r2, [pc, #504]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 8002266:	6891      	ldr	r1, [r2, #8]
 8002268:	f011 0f0c 	tst.w	r1, #12
 800226c:	f000 8089 	beq.w	8002382 <HAL_RCC_OscConfig+0x1a2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002270:	6891      	ldr	r1, [r2, #8]
 8002272:	f001 010c 	and.w	r1, r1, #12
 8002276:	2908      	cmp	r1, #8
 8002278:	d07f      	beq.n	800237a <HAL_RCC_OscConfig+0x19a>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800227a:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800227c:	4d78      	ldr	r5, [pc, #480]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 8103 	beq.w	800248a <HAL_RCC_OscConfig+0x2aa>
        __HAL_RCC_HSI_ENABLE();
 8002284:	682b      	ldr	r3, [r5, #0]
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228c:	f7ff fda4 	bl	8001dd8 <HAL_GetTick>
 8002290:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002292:	e005      	b.n	80022a0 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002294:	f7ff fda0 	bl	8001dd8 <HAL_GetTick>
 8002298:	1b80      	subs	r0, r0, r6
 800229a:	2802      	cmp	r0, #2
 800229c:	f200 80b7 	bhi.w	800240e <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a0:	682b      	ldr	r3, [r5, #0]
 80022a2:	079f      	lsls	r7, r3, #30
 80022a4:	d5f6      	bpl.n	8002294 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a6:	682b      	ldr	r3, [r5, #0]
 80022a8:	6922      	ldr	r2, [r4, #16]
 80022aa:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80022ae:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80022b2:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022b4:	6823      	ldr	r3, [r4, #0]
 80022b6:	071a      	lsls	r2, r3, #28
 80022b8:	d428      	bmi.n	800230c <HAL_RCC_OscConfig+0x12c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ba:	075e      	lsls	r6, r3, #29
 80022bc:	d53d      	bpl.n	800233a <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022be:	4b68      	ldr	r3, [pc, #416]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 80022c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022c2:	00d5      	lsls	r5, r2, #3
 80022c4:	d477      	bmi.n	80023b6 <HAL_RCC_OscConfig+0x1d6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
      pwrclkchanged = SET;
 80022c8:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ca:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80022ce:	641a      	str	r2, [r3, #64]	@ 0x40
 80022d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022d6:	9301      	str	r3, [sp, #4]
 80022d8:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022da:	4e62      	ldr	r6, [pc, #392]	@ (8002464 <HAL_RCC_OscConfig+0x284>)
 80022dc:	6833      	ldr	r3, [r6, #0]
 80022de:	05d8      	lsls	r0, r3, #23
 80022e0:	f140 8085 	bpl.w	80023ee <HAL_RCC_OscConfig+0x20e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022e4:	68a3      	ldr	r3, [r4, #8]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	f000 80e1 	beq.w	80024ae <HAL_RCC_OscConfig+0x2ce>
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 80a8 	beq.w	8002442 <HAL_RCC_OscConfig+0x262>
 80022f2:	2b05      	cmp	r3, #5
 80022f4:	4b5a      	ldr	r3, [pc, #360]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 80022f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80022f8:	f000 8123 	beq.w	8002542 <HAL_RCC_OscConfig+0x362>
 80022fc:	f022 0201 	bic.w	r2, r2, #1
 8002300:	671a      	str	r2, [r3, #112]	@ 0x70
 8002302:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002304:	f022 0204 	bic.w	r2, r2, #4
 8002308:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800230a:	e0d5      	b.n	80024b8 <HAL_RCC_OscConfig+0x2d8>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800230c:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800230e:	4d54      	ldr	r5, [pc, #336]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002310:	2b00      	cmp	r3, #0
 8002312:	d03f      	beq.n	8002394 <HAL_RCC_OscConfig+0x1b4>
      __HAL_RCC_LSI_ENABLE();
 8002314:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002316:	f043 0301 	orr.w	r3, r3, #1
 800231a:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800231c:	f7ff fd5c 	bl	8001dd8 <HAL_GetTick>
 8002320:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002322:	e004      	b.n	800232e <HAL_RCC_OscConfig+0x14e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002324:	f7ff fd58 	bl	8001dd8 <HAL_GetTick>
 8002328:	1b80      	subs	r0, r0, r6
 800232a:	2802      	cmp	r0, #2
 800232c:	d86f      	bhi.n	800240e <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800232e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002330:	079b      	lsls	r3, r3, #30
 8002332:	d5f7      	bpl.n	8002324 <HAL_RCC_OscConfig+0x144>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002334:	6823      	ldr	r3, [r4, #0]
 8002336:	075e      	lsls	r6, r3, #29
 8002338:	d4c1      	bmi.n	80022be <HAL_RCC_OscConfig+0xde>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800233a:	69a3      	ldr	r3, [r4, #24]
 800233c:	b1cb      	cbz	r3, 8002372 <HAL_RCC_OscConfig+0x192>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800233e:	4d48      	ldr	r5, [pc, #288]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 8002340:	68aa      	ldr	r2, [r5, #8]
 8002342:	f002 020c 	and.w	r2, r2, #12
 8002346:	2a08      	cmp	r2, #8
 8002348:	f000 80c9 	beq.w	80024de <HAL_RCC_OscConfig+0x2fe>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800234c:	2b02      	cmp	r3, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800234e:	682b      	ldr	r3, [r5, #0]
 8002350:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002354:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002356:	f000 80fc 	beq.w	8002552 <HAL_RCC_OscConfig+0x372>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235a:	f7ff fd3d 	bl	8001dd8 <HAL_GetTick>
 800235e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002360:	e004      	b.n	800236c <HAL_RCC_OscConfig+0x18c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002362:	f7ff fd39 	bl	8001dd8 <HAL_GetTick>
 8002366:	1b00      	subs	r0, r0, r4
 8002368:	2802      	cmp	r0, #2
 800236a:	d850      	bhi.n	800240e <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800236c:	682b      	ldr	r3, [r5, #0]
 800236e:	019b      	lsls	r3, r3, #6
 8002370:	d4f7      	bmi.n	8002362 <HAL_RCC_OscConfig+0x182>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002372:	2000      	movs	r0, #0
}
 8002374:	b002      	add	sp, #8
 8002376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800237a:	6852      	ldr	r2, [r2, #4]
 800237c:	0251      	lsls	r1, r2, #9
 800237e:	f53f af7c 	bmi.w	800227a <HAL_RCC_OscConfig+0x9a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002382:	4a37      	ldr	r2, [pc, #220]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 8002384:	6812      	ldr	r2, [r2, #0]
 8002386:	0792      	lsls	r2, r2, #30
 8002388:	d525      	bpl.n	80023d6 <HAL_RCC_OscConfig+0x1f6>
 800238a:	68e2      	ldr	r2, [r4, #12]
 800238c:	2a01      	cmp	r2, #1
 800238e:	d022      	beq.n	80023d6 <HAL_RCC_OscConfig+0x1f6>
    return HAL_ERROR;
 8002390:	2001      	movs	r0, #1
 8002392:	e7ef      	b.n	8002374 <HAL_RCC_OscConfig+0x194>
      __HAL_RCC_LSI_DISABLE();
 8002394:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002396:	f023 0301 	bic.w	r3, r3, #1
 800239a:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800239c:	f7ff fd1c 	bl	8001dd8 <HAL_GetTick>
 80023a0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a2:	e004      	b.n	80023ae <HAL_RCC_OscConfig+0x1ce>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a4:	f7ff fd18 	bl	8001dd8 <HAL_GetTick>
 80023a8:	1b80      	subs	r0, r0, r6
 80023aa:	2802      	cmp	r0, #2
 80023ac:	d82f      	bhi.n	800240e <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ae:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80023b0:	079f      	lsls	r7, r3, #30
 80023b2:	d4f7      	bmi.n	80023a4 <HAL_RCC_OscConfig+0x1c4>
 80023b4:	e7be      	b.n	8002334 <HAL_RCC_OscConfig+0x154>
  FlagStatus pwrclkchanged = RESET;
 80023b6:	2500      	movs	r5, #0
 80023b8:	e78f      	b.n	80022da <HAL_RCC_OscConfig+0xfa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ba:	684a      	ldr	r2, [r1, #4]
 80023bc:	0251      	lsls	r1, r2, #9
 80023be:	f57f af26 	bpl.w	800220e <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c2:	4a27      	ldr	r2, [pc, #156]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 80023c4:	6812      	ldr	r2, [r2, #0]
 80023c6:	0392      	lsls	r2, r2, #14
 80023c8:	f57f af4a 	bpl.w	8002260 <HAL_RCC_OscConfig+0x80>
 80023cc:	6862      	ldr	r2, [r4, #4]
 80023ce:	2a00      	cmp	r2, #0
 80023d0:	f47f af46 	bne.w	8002260 <HAL_RCC_OscConfig+0x80>
 80023d4:	e7dc      	b.n	8002390 <HAL_RCC_OscConfig+0x1b0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d6:	4922      	ldr	r1, [pc, #136]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 80023d8:	6920      	ldr	r0, [r4, #16]
 80023da:	680a      	ldr	r2, [r1, #0]
 80023dc:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 80023e0:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80023e4:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023e6:	071a      	lsls	r2, r3, #28
 80023e8:	f57f af67 	bpl.w	80022ba <HAL_RCC_OscConfig+0xda>
 80023ec:	e78e      	b.n	800230c <HAL_RCC_OscConfig+0x12c>
      PWR->CR1 |= PWR_CR1_DBP;
 80023ee:	6833      	ldr	r3, [r6, #0]
 80023f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023f4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80023f6:	f7ff fcef 	bl	8001dd8 <HAL_GetTick>
 80023fa:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023fc:	6833      	ldr	r3, [r6, #0]
 80023fe:	05d9      	lsls	r1, r3, #23
 8002400:	f53f af70 	bmi.w	80022e4 <HAL_RCC_OscConfig+0x104>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002404:	f7ff fce8 	bl	8001dd8 <HAL_GetTick>
 8002408:	1bc0      	subs	r0, r0, r7
 800240a:	2864      	cmp	r0, #100	@ 0x64
 800240c:	d9f6      	bls.n	80023fc <HAL_RCC_OscConfig+0x21c>
            return HAL_TIMEOUT;
 800240e:	2003      	movs	r0, #3
}
 8002410:	b002      	add	sp, #8
 8002412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002416:	4d12      	ldr	r5, [pc, #72]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
 8002418:	682b      	ldr	r3, [r5, #0]
 800241a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800241e:	602b      	str	r3, [r5, #0]
 8002420:	682b      	ldr	r3, [r5, #0]
 8002422:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002426:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002428:	f7ff fcd6 	bl	8001dd8 <HAL_GetTick>
 800242c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800242e:	e004      	b.n	800243a <HAL_RCC_OscConfig+0x25a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002430:	f7ff fcd2 	bl	8001dd8 <HAL_GetTick>
 8002434:	1b80      	subs	r0, r0, r6
 8002436:	2864      	cmp	r0, #100	@ 0x64
 8002438:	d8e9      	bhi.n	800240e <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800243a:	682b      	ldr	r3, [r5, #0]
 800243c:	039f      	lsls	r7, r3, #14
 800243e:	d4f7      	bmi.n	8002430 <HAL_RCC_OscConfig+0x250>
 8002440:	e70d      	b.n	800225e <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002442:	4e07      	ldr	r6, [pc, #28]	@ (8002460 <HAL_RCC_OscConfig+0x280>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002444:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002448:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800244a:	f023 0301 	bic.w	r3, r3, #1
 800244e:	6733      	str	r3, [r6, #112]	@ 0x70
 8002450:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8002452:	f023 0304 	bic.w	r3, r3, #4
 8002456:	6733      	str	r3, [r6, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8002458:	f7ff fcbe 	bl	8001dd8 <HAL_GetTick>
 800245c:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x292>
 8002460:	40023800 	.word	0x40023800
 8002464:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002468:	f7ff fcb6 	bl	8001dd8 <HAL_GetTick>
 800246c:	1bc0      	subs	r0, r0, r7
 800246e:	4540      	cmp	r0, r8
 8002470:	d8cd      	bhi.n	800240e <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002472:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8002474:	079b      	lsls	r3, r3, #30
 8002476:	d4f7      	bmi.n	8002468 <HAL_RCC_OscConfig+0x288>
    if (pwrclkchanged == SET)
 8002478:	2d00      	cmp	r5, #0
 800247a:	f43f af5e 	beq.w	800233a <HAL_RCC_OscConfig+0x15a>
      __HAL_RCC_PWR_CLK_DISABLE();
 800247e:	4a4e      	ldr	r2, [pc, #312]	@ (80025b8 <HAL_RCC_OscConfig+0x3d8>)
 8002480:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002482:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002486:	6413      	str	r3, [r2, #64]	@ 0x40
 8002488:	e757      	b.n	800233a <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 800248a:	682b      	ldr	r3, [r5, #0]
 800248c:	f023 0301 	bic.w	r3, r3, #1
 8002490:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002492:	f7ff fca1 	bl	8001dd8 <HAL_GetTick>
 8002496:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002498:	e004      	b.n	80024a4 <HAL_RCC_OscConfig+0x2c4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800249a:	f7ff fc9d 	bl	8001dd8 <HAL_GetTick>
 800249e:	1b80      	subs	r0, r0, r6
 80024a0:	2802      	cmp	r0, #2
 80024a2:	d8b4      	bhi.n	800240e <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a4:	682b      	ldr	r3, [r5, #0]
 80024a6:	0799      	lsls	r1, r3, #30
 80024a8:	d4f7      	bmi.n	800249a <HAL_RCC_OscConfig+0x2ba>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024aa:	6823      	ldr	r3, [r4, #0]
 80024ac:	e703      	b.n	80022b6 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ae:	4a42      	ldr	r2, [pc, #264]	@ (80025b8 <HAL_RCC_OscConfig+0x3d8>)
 80024b0:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80024b8:	f7ff fc8e 	bl	8001dd8 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024bc:	4f3e      	ldr	r7, [pc, #248]	@ (80025b8 <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024be:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80024c2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c4:	e004      	b.n	80024d0 <HAL_RCC_OscConfig+0x2f0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c6:	f7ff fc87 	bl	8001dd8 <HAL_GetTick>
 80024ca:	1b80      	subs	r0, r0, r6
 80024cc:	4540      	cmp	r0, r8
 80024ce:	d89e      	bhi.n	800240e <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024d2:	079a      	lsls	r2, r3, #30
 80024d4:	d5f7      	bpl.n	80024c6 <HAL_RCC_OscConfig+0x2e6>
    if (pwrclkchanged == SET)
 80024d6:	2d00      	cmp	r5, #0
 80024d8:	f43f af2f 	beq.w	800233a <HAL_RCC_OscConfig+0x15a>
 80024dc:	e7cf      	b.n	800247e <HAL_RCC_OscConfig+0x29e>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024de:	2b01      	cmp	r3, #1
      pll_config = RCC->PLLCFGR;
 80024e0:	686a      	ldr	r2, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024e2:	f43f af55 	beq.w	8002390 <HAL_RCC_OscConfig+0x1b0>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e6:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ea:	69e1      	ldr	r1, [r4, #28]
 80024ec:	428b      	cmp	r3, r1
 80024ee:	f47f af4f 	bne.w	8002390 <HAL_RCC_OscConfig+0x1b0>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024f2:	f002 033f 	and.w	r3, r2, #63	@ 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f6:	6a21      	ldr	r1, [r4, #32]
 80024f8:	428b      	cmp	r3, r1
 80024fa:	f47f af49 	bne.w	8002390 <HAL_RCC_OscConfig+0x1b0>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024fe:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002502:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002504:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002506:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 800250a:	f47f af41 	bne.w	8002390 <HAL_RCC_OscConfig+0x1b0>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800250e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002510:	f402 3140 	and.w	r1, r2, #196608	@ 0x30000
 8002514:	085b      	lsrs	r3, r3, #1
 8002516:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002518:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 800251c:	f47f af38 	bne.w	8002390 <HAL_RCC_OscConfig+0x1b0>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002520:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002522:	f002 6270 	and.w	r2, r2, #251658240	@ 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002526:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
 800252a:	bf14      	ite	ne
 800252c:	2001      	movne	r0, #1
 800252e:	2000      	moveq	r0, #0
 8002530:	e720      	b.n	8002374 <HAL_RCC_OscConfig+0x194>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002532:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800253e:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002540:	e67f      	b.n	8002242 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002542:	f042 0204 	orr.w	r2, r2, #4
 8002546:	671a      	str	r2, [r3, #112]	@ 0x70
 8002548:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002550:	e7b2      	b.n	80024b8 <HAL_RCC_OscConfig+0x2d8>
        tickstart = HAL_GetTick();
 8002552:	f7ff fc41 	bl	8001dd8 <HAL_GetTick>
 8002556:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002558:	e005      	b.n	8002566 <HAL_RCC_OscConfig+0x386>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255a:	f7ff fc3d 	bl	8001dd8 <HAL_GetTick>
 800255e:	1b80      	subs	r0, r0, r6
 8002560:	2802      	cmp	r0, #2
 8002562:	f63f af54 	bhi.w	800240e <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002566:	682b      	ldr	r3, [r5, #0]
 8002568:	0199      	lsls	r1, r3, #6
 800256a:	d4f6      	bmi.n	800255a <HAL_RCC_OscConfig+0x37a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800256c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800256e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002570:	0852      	lsrs	r2, r2, #1
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002572:	4e11      	ldr	r6, [pc, #68]	@ (80025b8 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002574:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8002578:	3a01      	subs	r2, #1
 800257a:	430b      	orrs	r3, r1
 800257c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800257e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002582:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002586:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800258a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800258e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002590:	682b      	ldr	r3, [r5, #0]
 8002592:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002596:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002598:	f7ff fc1e 	bl	8001dd8 <HAL_GetTick>
 800259c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800259e:	e005      	b.n	80025ac <HAL_RCC_OscConfig+0x3cc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a0:	f7ff fc1a 	bl	8001dd8 <HAL_GetTick>
 80025a4:	1b00      	subs	r0, r0, r4
 80025a6:	2802      	cmp	r0, #2
 80025a8:	f63f af31 	bhi.w	800240e <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ac:	6833      	ldr	r3, [r6, #0]
 80025ae:	019a      	lsls	r2, r3, #6
 80025b0:	d5f6      	bpl.n	80025a0 <HAL_RCC_OscConfig+0x3c0>
 80025b2:	e6de      	b.n	8002372 <HAL_RCC_OscConfig+0x192>
    return HAL_ERROR;
 80025b4:	2001      	movs	r0, #1
}
 80025b6:	4770      	bx	lr
 80025b8:	40023800 	.word	0x40023800

080025bc <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025bc:	2800      	cmp	r0, #0
 80025be:	f000 80b3 	beq.w	8002728 <HAL_RCC_ClockConfig+0x16c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025c2:	4a61      	ldr	r2, [pc, #388]	@ (8002748 <HAL_RCC_ClockConfig+0x18c>)
 80025c4:	6813      	ldr	r3, [r2, #0]
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	428b      	cmp	r3, r1
{
 80025cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025d0:	4604      	mov	r4, r0
 80025d2:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025d4:	d20c      	bcs.n	80025f0 <HAL_RCC_ClockConfig+0x34>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d6:	6813      	ldr	r3, [r2, #0]
 80025d8:	f023 030f 	bic.w	r3, r3, #15
 80025dc:	430b      	orrs	r3, r1
 80025de:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e0:	6813      	ldr	r3, [r2, #0]
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	428b      	cmp	r3, r1
 80025e8:	d002      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80025ea:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);

  return HAL_OK;
}
 80025ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f0:	6823      	ldr	r3, [r4, #0]
 80025f2:	0798      	lsls	r0, r3, #30
 80025f4:	d514      	bpl.n	8002620 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f6:	0759      	lsls	r1, r3, #29
 80025f8:	d504      	bpl.n	8002604 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025fa:	4954      	ldr	r1, [pc, #336]	@ (800274c <HAL_RCC_ClockConfig+0x190>)
 80025fc:	688a      	ldr	r2, [r1, #8]
 80025fe:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8002602:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002604:	071a      	lsls	r2, r3, #28
 8002606:	d504      	bpl.n	8002612 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002608:	4950      	ldr	r1, [pc, #320]	@ (800274c <HAL_RCC_ClockConfig+0x190>)
 800260a:	688a      	ldr	r2, [r1, #8]
 800260c:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 8002610:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002612:	494e      	ldr	r1, [pc, #312]	@ (800274c <HAL_RCC_ClockConfig+0x190>)
 8002614:	68a0      	ldr	r0, [r4, #8]
 8002616:	688a      	ldr	r2, [r1, #8]
 8002618:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800261c:	4302      	orrs	r2, r0
 800261e:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002620:	07df      	lsls	r7, r3, #31
 8002622:	d520      	bpl.n	8002666 <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002624:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002626:	4b49      	ldr	r3, [pc, #292]	@ (800274c <HAL_RCC_ClockConfig+0x190>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002628:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262a:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800262c:	d07e      	beq.n	800272c <HAL_RCC_ClockConfig+0x170>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800262e:	2a02      	cmp	r2, #2
 8002630:	d077      	beq.n	8002722 <HAL_RCC_ClockConfig+0x166>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002632:	0799      	lsls	r1, r3, #30
 8002634:	d5d9      	bpl.n	80025ea <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002636:	4e45      	ldr	r6, [pc, #276]	@ (800274c <HAL_RCC_ClockConfig+0x190>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002638:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800263c:	68b3      	ldr	r3, [r6, #8]
 800263e:	f023 0303 	bic.w	r3, r3, #3
 8002642:	4313      	orrs	r3, r2
 8002644:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002646:	f7ff fbc7 	bl	8001dd8 <HAL_GetTick>
 800264a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264c:	e004      	b.n	8002658 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800264e:	f7ff fbc3 	bl	8001dd8 <HAL_GetTick>
 8002652:	1bc0      	subs	r0, r0, r7
 8002654:	4540      	cmp	r0, r8
 8002656:	d86c      	bhi.n	8002732 <HAL_RCC_ClockConfig+0x176>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002658:	68b3      	ldr	r3, [r6, #8]
 800265a:	6862      	ldr	r2, [r4, #4]
 800265c:	f003 030c 	and.w	r3, r3, #12
 8002660:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002664:	d1f3      	bne.n	800264e <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002666:	4a38      	ldr	r2, [pc, #224]	@ (8002748 <HAL_RCC_ClockConfig+0x18c>)
 8002668:	6813      	ldr	r3, [r2, #0]
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	42ab      	cmp	r3, r5
 8002670:	d909      	bls.n	8002686 <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002672:	6813      	ldr	r3, [r2, #0]
 8002674:	f023 030f 	bic.w	r3, r3, #15
 8002678:	432b      	orrs	r3, r5
 800267a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800267c:	6813      	ldr	r3, [r2, #0]
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	42ab      	cmp	r3, r5
 8002684:	d1b1      	bne.n	80025ea <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002686:	6823      	ldr	r3, [r4, #0]
 8002688:	075a      	lsls	r2, r3, #29
 800268a:	d506      	bpl.n	800269a <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800268c:	492f      	ldr	r1, [pc, #188]	@ (800274c <HAL_RCC_ClockConfig+0x190>)
 800268e:	68e0      	ldr	r0, [r4, #12]
 8002690:	688a      	ldr	r2, [r1, #8]
 8002692:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8002696:	4302      	orrs	r2, r0
 8002698:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269a:	071b      	lsls	r3, r3, #28
 800269c:	d431      	bmi.n	8002702 <HAL_RCC_ClockConfig+0x146>
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800269e:	492b      	ldr	r1, [pc, #172]	@ (800274c <HAL_RCC_ClockConfig+0x190>)
 80026a0:	688b      	ldr	r3, [r1, #8]
 80026a2:	f003 030c 	and.w	r3, r3, #12
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d039      	beq.n	800271e <HAL_RCC_ClockConfig+0x162>
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	d118      	bne.n	80026e0 <HAL_RCC_ClockConfig+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026ae:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80026b0:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026b2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026b6:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80026b8:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
 80026bc:	d03b      	beq.n	8002736 <HAL_RCC_ClockConfig+0x17a>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026be:	4824      	ldr	r0, [pc, #144]	@ (8002750 <HAL_RCC_ClockConfig+0x194>)
 80026c0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80026c4:	2300      	movs	r3, #0
 80026c6:	fba1 0100 	umull	r0, r1, r1, r0
 80026ca:	f7fe fafd 	bl	8000cc8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80026ce:	4b1f      	ldr	r3, [pc, #124]	@ (800274c <HAL_RCC_ClockConfig+0x190>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80026d6:	3301      	adds	r3, #1
 80026d8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80026da:	fbb0 f3f3 	udiv	r3, r0, r3
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 80026de:	e000      	b.n	80026e2 <HAL_RCC_ClockConfig+0x126>
      sysclockfreq = HSI_VALUE;
 80026e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002754 <HAL_RCC_ClockConfig+0x198>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026e2:	4a1a      	ldr	r2, [pc, #104]	@ (800274c <HAL_RCC_ClockConfig+0x190>)
 80026e4:	4c1c      	ldr	r4, [pc, #112]	@ (8002758 <HAL_RCC_ClockConfig+0x19c>)
 80026e6:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 80026e8:	481c      	ldr	r0, [pc, #112]	@ (800275c <HAL_RCC_ClockConfig+0x1a0>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026ea:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80026ee:	491c      	ldr	r1, [pc, #112]	@ (8002760 <HAL_RCC_ClockConfig+0x1a4>)
  HAL_InitTick(uwTickPrio);
 80026f0:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026f2:	5ca2      	ldrb	r2, [r4, r2]
 80026f4:	40d3      	lsrs	r3, r2
 80026f6:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 80026f8:	f7ff fb32 	bl	8001d60 <HAL_InitTick>
  return HAL_OK;
 80026fc:	2000      	movs	r0, #0
}
 80026fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002702:	4a12      	ldr	r2, [pc, #72]	@ (800274c <HAL_RCC_ClockConfig+0x190>)
 8002704:	6921      	ldr	r1, [r4, #16]
 8002706:	6893      	ldr	r3, [r2, #8]
 8002708:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800270c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002710:	490e      	ldr	r1, [pc, #56]	@ (800274c <HAL_RCC_ClockConfig+0x190>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002712:	6093      	str	r3, [r2, #8]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002714:	688b      	ldr	r3, [r1, #8]
 8002716:	f003 030c 	and.w	r3, r3, #12
 800271a:	2b04      	cmp	r3, #4
 800271c:	d1c5      	bne.n	80026aa <HAL_RCC_ClockConfig+0xee>
 800271e:	4b0c      	ldr	r3, [pc, #48]	@ (8002750 <HAL_RCC_ClockConfig+0x194>)
 8002720:	e7df      	b.n	80026e2 <HAL_RCC_ClockConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002722:	0198      	lsls	r0, r3, #6
 8002724:	d487      	bmi.n	8002636 <HAL_RCC_ClockConfig+0x7a>
 8002726:	e760      	b.n	80025ea <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002728:	2001      	movs	r0, #1
}
 800272a:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272c:	039e      	lsls	r6, r3, #14
 800272e:	d482      	bmi.n	8002636 <HAL_RCC_ClockConfig+0x7a>
 8002730:	e75b      	b.n	80025ea <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8002732:	2003      	movs	r0, #3
 8002734:	e75a      	b.n	80025ec <HAL_RCC_ClockConfig+0x30>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002736:	4807      	ldr	r0, [pc, #28]	@ (8002754 <HAL_RCC_ClockConfig+0x198>)
 8002738:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800273c:	fba1 0100 	umull	r0, r1, r1, r0
 8002740:	f7fe fac2 	bl	8000cc8 <__aeabi_uldivmod>
 8002744:	e7c3      	b.n	80026ce <HAL_RCC_ClockConfig+0x112>
 8002746:	bf00      	nop
 8002748:	40023c00 	.word	0x40023c00
 800274c:	40023800 	.word	0x40023800
 8002750:	007a1200 	.word	0x007a1200
 8002754:	00f42400 	.word	0x00f42400
 8002758:	0800b74c 	.word	0x0800b74c
 800275c:	20000008 	.word	0x20000008
 8002760:	20000000 	.word	0x20000000

08002764 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002768:	4615      	mov	r5, r2
 800276a:	460e      	mov	r6, r1
 800276c:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800276e:	2300      	movs	r3, #0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002770:	4435      	add	r5, r6
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002772:	4607      	mov	r7, r0
  __IO uint8_t  tmpreg8 = 0;
 8002774:	f88d 3003 	strb.w	r3, [sp, #3]
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002778:	f7ff fb2e 	bl	8001dd8 <HAL_GetTick>
 800277c:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 800277e:	f7ff fb2b 	bl	8001dd8 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002782:	4b31      	ldr	r3, [pc, #196]	@ (8002848 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe4>)
  tmp_tickstart = HAL_GetTick();
 8002784:	4680      	mov	r8, r0
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002786:	683c      	ldr	r4, [r7, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002788:	681b      	ldr	r3, [r3, #0]

  while ((hspi->Instance->SR & Fifo) != State)
 800278a:	4622      	mov	r2, r4
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800278c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002790:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8002794:	0d1b      	lsrs	r3, r3, #20
 8002796:	fb05 f303 	mul.w	r3, r5, r3
 800279a:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800279c:	1c73      	adds	r3, r6, #1
 800279e:	d121      	bne.n	80027e4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x80>
 80027a0:	6893      	ldr	r3, [r2, #8]
 80027a2:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 80027a6:	d009      	beq.n	80027bc <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80027a8:	7b23      	ldrb	r3, [r4, #12]
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80027b0:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 80027b4:	6893      	ldr	r3, [r2, #8]
 80027b6:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 80027ba:	d1f5      	bne.n	80027a8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x44>
        count--;
      }
    }
  }

  return HAL_OK;
 80027bc:	2000      	movs	r0, #0
}
 80027be:	b002      	add	sp, #8
 80027c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmpreg8 = *ptmpreg8;
 80027c4:	7b23      	ldrb	r3, [r4, #12]
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 80027cc:	f89d 3003 	ldrb.w	r3, [sp, #3]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80027d0:	f7ff fb02 	bl	8001dd8 <HAL_GetTick>
 80027d4:	eba0 0008 	sub.w	r0, r0, r8
 80027d8:	42a8      	cmp	r0, r5
 80027da:	d208      	bcs.n	80027ee <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
      if (count == 0U)
 80027dc:	9b01      	ldr	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027de:	683a      	ldr	r2, [r7, #0]
      if (count == 0U)
 80027e0:	bb13      	cbnz	r3, 8002828 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc4>
        tmp_timeout = 0U;
 80027e2:	461d      	mov	r5, r3
  while ((hspi->Instance->SR & Fifo) != State)
 80027e4:	6893      	ldr	r3, [r2, #8]
 80027e6:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 80027ea:	d1eb      	bne.n	80027c4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x60>
 80027ec:	e7e6      	b.n	80027bc <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027ee:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027f2:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027f4:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80027fc:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027fe:	d017      	beq.n	8002830 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xcc>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002800:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002802:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8002806:	d107      	bne.n	8002818 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb4>
          SPI_RESET_CRC(hspi);
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002816:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002818:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 800281a:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800281c:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800281e:	f887 205d 	strb.w	r2, [r7, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002822:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002826:	e7ca      	b.n	80027be <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5a>
        count--;
 8002828:	9b01      	ldr	r3, [sp, #4]
 800282a:	3b01      	subs	r3, #1
 800282c:	9301      	str	r3, [sp, #4]
 800282e:	e7b5      	b.n	800279c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x38>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8002836:	d002      	beq.n	800283e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xda>
 8002838:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800283c:	d1e0      	bne.n	8002800 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x9c>
          __HAL_SPI_DISABLE(hspi);
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	e7db      	b.n	8002800 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x9c>
 8002848:	20000000 	.word	0x20000000

0800284c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800284c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint8_t  tmpreg8 = 0;
 8002850:	2300      	movs	r3, #0
{
 8002852:	b085      	sub	sp, #20
 8002854:	eb01 0802 	add.w	r8, r1, r2
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002858:	f8df a160 	ldr.w	sl, [pc, #352]	@ 80029bc <SPI_EndRxTxTransaction+0x170>
  __IO uint8_t  tmpreg8 = 0;
 800285c:	f88d 3003 	strb.w	r3, [sp, #3]
{
 8002860:	460d      	mov	r5, r1
 8002862:	4616      	mov	r6, r2
 8002864:	4607      	mov	r7, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002866:	f7ff fab7 	bl	8001dd8 <HAL_GetTick>
 800286a:	eba8 0900 	sub.w	r9, r8, r0
  tmp_tickstart = HAL_GetTick();
 800286e:	f7ff fab3 	bl	8001dd8 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002872:	f8da 3000 	ldr.w	r3, [sl]
  tmp_tickstart = HAL_GetTick();
 8002876:	4683      	mov	fp, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002878:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800287c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8002880:	0d1b      	lsrs	r3, r3, #20
 8002882:	fb09 f303 	mul.w	r3, r9, r3
 8002886:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8002888:	1c6b      	adds	r3, r5, #1
 800288a:	683c      	ldr	r4, [r7, #0]
 800288c:	d130      	bne.n	80028f0 <SPI_EndRxTxTransaction+0xa4>
 800288e:	68a3      	ldr	r3, [r4, #8]
 8002890:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 8002894:	d1fb      	bne.n	800288e <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002896:	4a48      	ldr	r2, [pc, #288]	@ (80029b8 <SPI_EndRxTxTransaction+0x16c>)
 8002898:	f8da 3000 	ldr.w	r3, [sl]
 800289c:	fba2 2303 	umull	r2, r3, r2, r3
 80028a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80028a4:	0d5b      	lsrs	r3, r3, #21
 80028a6:	fb02 f303 	mul.w	r3, r2, r3
 80028aa:	9301      	str	r3, [sp, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028b2:	d106      	bne.n	80028c2 <SPI_EndRxTxTransaction+0x76>
 80028b4:	e027      	b.n	8002906 <SPI_EndRxTxTransaction+0xba>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 80028b6:	9b01      	ldr	r3, [sp, #4]
 80028b8:	3b01      	subs	r3, #1
 80028ba:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80028bc:	68a3      	ldr	r3, [r4, #8]
 80028be:	061b      	lsls	r3, r3, #24
 80028c0:	d502      	bpl.n	80028c8 <SPI_EndRxTxTransaction+0x7c>
      if (count == 0U)
 80028c2:	9b01      	ldr	r3, [sp, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1f6      	bne.n	80028b6 <SPI_EndRxTxTransaction+0x6a>
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80028c8:	4632      	mov	r2, r6
 80028ca:	4629      	mov	r1, r5
 80028cc:	4638      	mov	r0, r7
 80028ce:	f7ff ff49 	bl	8002764 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 80028d2:	b990      	cbnz	r0, 80028fa <SPI_EndRxTxTransaction+0xae>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 80028d4:	b005      	add	sp, #20
 80028d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028da:	f7ff fa7d 	bl	8001dd8 <HAL_GetTick>
 80028de:	eba0 000b 	sub.w	r0, r0, fp
 80028e2:	4548      	cmp	r0, r9
 80028e4:	d233      	bcs.n	800294e <SPI_EndRxTxTransaction+0x102>
      if (count == 0U)
 80028e6:	9b02      	ldr	r3, [sp, #8]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d150      	bne.n	800298e <SPI_EndRxTxTransaction+0x142>
  while ((hspi->Instance->SR & Fifo) != State)
 80028ec:	683c      	ldr	r4, [r7, #0]
        tmp_timeout = 0U;
 80028ee:	4699      	mov	r9, r3
  while ((hspi->Instance->SR & Fifo) != State)
 80028f0:	68a3      	ldr	r3, [r4, #8]
 80028f2:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 80028f6:	d1f0      	bne.n	80028da <SPI_EndRxTxTransaction+0x8e>
 80028f8:	e7cd      	b.n	8002896 <SPI_EndRxTxTransaction+0x4a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028fc:	f043 0320 	orr.w	r3, r3, #32
 8002900:	663b      	str	r3, [r7, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002902:	2003      	movs	r0, #3
 8002904:	e7e6      	b.n	80028d4 <SPI_EndRxTxTransaction+0x88>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002906:	f7ff fa67 	bl	8001dd8 <HAL_GetTick>
 800290a:	eba8 0400 	sub.w	r4, r8, r0
  tmp_tickstart = HAL_GetTick();
 800290e:	f7ff fa63 	bl	8001dd8 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002912:	f8da 3000 	ldr.w	r3, [sl]
  tmp_tickstart = HAL_GetTick();
 8002916:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002918:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800291c:	fb04 f303 	mul.w	r3, r4, r3
 8002920:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002922:	1c68      	adds	r0, r5, #1
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	d10e      	bne.n	8002946 <SPI_EndRxTxTransaction+0xfa>
 8002928:	6893      	ldr	r3, [r2, #8]
 800292a:	0619      	lsls	r1, r3, #24
 800292c:	d4fc      	bmi.n	8002928 <SPI_EndRxTxTransaction+0xdc>
 800292e:	e7cb      	b.n	80028c8 <SPI_EndRxTxTransaction+0x7c>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002930:	f7ff fa52 	bl	8001dd8 <HAL_GetTick>
 8002934:	eba0 0308 	sub.w	r3, r0, r8
 8002938:	42a3      	cmp	r3, r4
 800293a:	d208      	bcs.n	800294e <SPI_EndRxTxTransaction+0x102>
      if (count == 0U)
 800293c:	9b03      	ldr	r3, [sp, #12]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d135      	bne.n	80029ae <SPI_EndRxTxTransaction+0x162>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002942:	683a      	ldr	r2, [r7, #0]
        tmp_timeout = 0U;
 8002944:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002946:	6893      	ldr	r3, [r2, #8]
 8002948:	061a      	lsls	r2, r3, #24
 800294a:	d4f1      	bmi.n	8002930 <SPI_EndRxTxTransaction+0xe4>
 800294c:	e7bc      	b.n	80028c8 <SPI_EndRxTxTransaction+0x7c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800294e:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002952:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002954:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002958:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800295c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800295e:	d01a      	beq.n	8002996 <SPI_EndRxTxTransaction+0x14a>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002960:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002962:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8002966:	d107      	bne.n	8002978 <SPI_EndRxTxTransaction+0x12c>
          SPI_RESET_CRC(hspi);
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002976:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002978:	2301      	movs	r3, #1
        __HAL_UNLOCK(hspi);
 800297a:	2200      	movs	r2, #0
        hspi->State = HAL_SPI_STATE_READY;
 800297c:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002980:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        __HAL_UNLOCK(hspi);
 8002982:	f887 205c 	strb.w	r2, [r7, #92]	@ 0x5c
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002986:	f043 0320 	orr.w	r3, r3, #32
 800298a:	663b      	str	r3, [r7, #96]	@ 0x60
      return HAL_TIMEOUT;
 800298c:	e7b9      	b.n	8002902 <SPI_EndRxTxTransaction+0xb6>
        count--;
 800298e:	9b02      	ldr	r3, [sp, #8]
 8002990:	3b01      	subs	r3, #1
 8002992:	9302      	str	r3, [sp, #8]
 8002994:	e778      	b.n	8002888 <SPI_EndRxTxTransaction+0x3c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800299c:	d002      	beq.n	80029a4 <SPI_EndRxTxTransaction+0x158>
 800299e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80029a2:	d1dd      	bne.n	8002960 <SPI_EndRxTxTransaction+0x114>
          __HAL_SPI_DISABLE(hspi);
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	e7d8      	b.n	8002960 <SPI_EndRxTxTransaction+0x114>
        count--;
 80029ae:	9b03      	ldr	r3, [sp, #12]
 80029b0:	3b01      	subs	r3, #1
 80029b2:	9303      	str	r3, [sp, #12]
 80029b4:	e7b5      	b.n	8002922 <SPI_EndRxTxTransaction+0xd6>
 80029b6:	bf00      	nop
 80029b8:	165e9f81 	.word	0x165e9f81
 80029bc:	20000000 	.word	0x20000000

080029c0 <SPI_EndRxTransaction>:
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029c0:	6843      	ldr	r3, [r0, #4]
 80029c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
{
 80029c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029ca:	4604      	mov	r4, r0
 80029cc:	b082      	sub	sp, #8
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029ce:	d019      	beq.n	8002a04 <SPI_EndRxTransaction+0x44>
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80029d0:	4b49      	ldr	r3, [pc, #292]	@ (8002af8 <SPI_EndRxTransaction+0x138>)
 80029d2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80029d6:	4a49      	ldr	r2, [pc, #292]	@ (8002afc <SPI_EndRxTransaction+0x13c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	fba2 2303 	umull	r2, r3, r2, r3
 80029de:	0d5b      	lsrs	r3, r3, #21
 80029e0:	fb01 f303 	mul.w	r3, r1, r3
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	e006      	b.n	80029f6 <SPI_EndRxTransaction+0x36>
      count--;
 80029e8:	9b00      	ldr	r3, [sp, #0]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80029ea:	6822      	ldr	r2, [r4, #0]
      count--;
 80029ec:	3b01      	subs	r3, #1
 80029ee:	9300      	str	r3, [sp, #0]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80029f0:	6893      	ldr	r3, [r2, #8]
 80029f2:	061b      	lsls	r3, r3, #24
 80029f4:	d502      	bpl.n	80029fc <SPI_EndRxTransaction+0x3c>
      if (count == 0U)
 80029f6:	9b00      	ldr	r3, [sp, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1f5      	bne.n	80029e8 <SPI_EndRxTransaction+0x28>
  return HAL_OK;
 80029fc:	2000      	movs	r0, #0
}
 80029fe:	b002      	add	sp, #8
 8002a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a04:	6883      	ldr	r3, [r0, #8]
 8002a06:	460e      	mov	r6, r1
 8002a08:	4615      	mov	r5, r2
 8002a0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a0e:	d03c      	beq.n	8002a8a <SPI_EndRxTransaction+0xca>
 8002a10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a14:	d039      	beq.n	8002a8a <SPI_EndRxTransaction+0xca>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a16:	1977      	adds	r7, r6, r5
 8002a18:	f7ff f9de 	bl	8001dd8 <HAL_GetTick>
 8002a1c:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 8002a1e:	f7ff f9db 	bl	8001dd8 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a22:	4b35      	ldr	r3, [pc, #212]	@ (8002af8 <SPI_EndRxTransaction+0x138>)
  tmp_tickstart = HAL_GetTick();
 8002a24:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8002a2c:	fb07 f303 	mul.w	r3, r7, r3
 8002a30:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a32:	1c73      	adds	r3, r6, #1
 8002a34:	6820      	ldr	r0, [r4, #0]
 8002a36:	d124      	bne.n	8002a82 <SPI_EndRxTransaction+0xc2>
 8002a38:	6883      	ldr	r3, [r0, #8]
 8002a3a:	0619      	lsls	r1, r3, #24
 8002a3c:	d4fc      	bmi.n	8002a38 <SPI_EndRxTransaction+0x78>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a3e:	6863      	ldr	r3, [r4, #4]
 8002a40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a44:	d1da      	bne.n	80029fc <SPI_EndRxTransaction+0x3c>
 8002a46:	68a3      	ldr	r3, [r4, #8]
 8002a48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a4c:	d002      	beq.n	8002a54 <SPI_EndRxTransaction+0x94>
 8002a4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a52:	d1d3      	bne.n	80029fc <SPI_EndRxTransaction+0x3c>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a54:	462a      	mov	r2, r5
 8002a56:	4631      	mov	r1, r6
 8002a58:	4620      	mov	r0, r4
 8002a5a:	f7ff fe83 	bl	8002764 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8002a5e:	2800      	cmp	r0, #0
 8002a60:	d0cc      	beq.n	80029fc <SPI_EndRxTransaction+0x3c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a62:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002a64:	f043 0320 	orr.w	r3, r3, #32
 8002a68:	6623      	str	r3, [r4, #96]	@ 0x60
      return HAL_TIMEOUT;
 8002a6a:	2003      	movs	r0, #3
 8002a6c:	e7c7      	b.n	80029fe <SPI_EndRxTransaction+0x3e>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a6e:	f7ff f9b3 	bl	8001dd8 <HAL_GetTick>
 8002a72:	eba0 0008 	sub.w	r0, r0, r8
 8002a76:	42b8      	cmp	r0, r7
 8002a78:	d211      	bcs.n	8002a9e <SPI_EndRxTransaction+0xde>
      if (count == 0U)
 8002a7a:	9b01      	ldr	r3, [sp, #4]
 8002a7c:	b95b      	cbnz	r3, 8002a96 <SPI_EndRxTransaction+0xd6>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a7e:	6820      	ldr	r0, [r4, #0]
        tmp_timeout = 0U;
 8002a80:	461f      	mov	r7, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a82:	6883      	ldr	r3, [r0, #8]
 8002a84:	061a      	lsls	r2, r3, #24
 8002a86:	d4f2      	bmi.n	8002a6e <SPI_EndRxTransaction+0xae>
 8002a88:	e7d9      	b.n	8002a3e <SPI_EndRxTransaction+0x7e>
    __HAL_SPI_DISABLE(hspi);
 8002a8a:	6822      	ldr	r2, [r4, #0]
 8002a8c:	6813      	ldr	r3, [r2, #0]
 8002a8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a92:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a94:	e7bf      	b.n	8002a16 <SPI_EndRxTransaction+0x56>
        count--;
 8002a96:	9b01      	ldr	r3, [sp, #4]
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	9301      	str	r3, [sp, #4]
 8002a9c:	e7c9      	b.n	8002a32 <SPI_EndRxTransaction+0x72>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a9e:	e9d4 3100 	ldrd	r3, r1, [r4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002aa2:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aa4:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002aa8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002aac:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aae:	d016      	beq.n	8002ade <SPI_EndRxTransaction+0x11e>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ab0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002ab2:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8002ab6:	d107      	bne.n	8002ac8 <SPI_EndRxTransaction+0x108>
          SPI_RESET_CRC(hspi);
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ac6:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002ac8:	2301      	movs	r3, #1
        __HAL_UNLOCK(hspi);
 8002aca:	2200      	movs	r2, #0
        hspi->State = HAL_SPI_STATE_READY;
 8002acc:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ad0:	6e23      	ldr	r3, [r4, #96]	@ 0x60
        __HAL_UNLOCK(hspi);
 8002ad2:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ad6:	f043 0320 	orr.w	r3, r3, #32
 8002ada:	6623      	str	r3, [r4, #96]	@ 0x60
      return HAL_TIMEOUT;
 8002adc:	e7c5      	b.n	8002a6a <SPI_EndRxTransaction+0xaa>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ade:	68a2      	ldr	r2, [r4, #8]
 8002ae0:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8002ae4:	d002      	beq.n	8002aec <SPI_EndRxTransaction+0x12c>
 8002ae6:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8002aea:	d1e1      	bne.n	8002ab0 <SPI_EndRxTransaction+0xf0>
          __HAL_SPI_DISABLE(hspi);
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	e7dc      	b.n	8002ab0 <SPI_EndRxTransaction+0xf0>
 8002af6:	bf00      	nop
 8002af8:	20000000 	.word	0x20000000
 8002afc:	165e9f81 	.word	0x165e9f81

08002b00 <HAL_SPI_Init>:
  if (hspi == NULL)
 8002b00:	2800      	cmp	r0, #0
 8002b02:	d071      	beq.n	8002be8 <HAL_SPI_Init+0xe8>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b04:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 8002b06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b08:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b0a:	2a00      	cmp	r2, #0
 8002b0c:	d05c      	beq.n	8002bc8 <HAL_SPI_Init+0xc8>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b14:	2100      	movs	r1, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b16:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b1a:	62a1      	str	r1, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b1c:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d05a      	beq.n	8002bda <HAL_SPI_Init+0xda>
  __HAL_SPI_DISABLE(hspi);
 8002b24:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002b26:	2302      	movs	r3, #2
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b28:	68e6      	ldr	r6, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002b2a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 8002b2e:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b30:	f5b6 6fe0 	cmp.w	r6, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 8002b34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b38:	bf8c      	ite	hi
 8002b3a:	f04f 0e00 	movhi.w	lr, #0
 8002b3e:	f04f 0e01 	movls.w	lr, #1
  __HAL_SPI_DISABLE(hspi);
 8002b42:	600b      	str	r3, [r1, #0]
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b44:	f426 6300 	bic.w	r3, r6, #2048	@ 0x800
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b48:	ea4f 3e0e 	mov.w	lr, lr, lsl #12
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b4c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b50:	d140      	bne.n	8002bd4 <HAL_SPI_Init+0xd4>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b52:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8002b54:	f400 5000 	and.w	r0, r0, #8192	@ 0x2000
 8002b58:	6863      	ldr	r3, [r4, #4]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b5a:	f002 0c10 	and.w	ip, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b5e:	69a5      	ldr	r5, [r4, #24]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b60:	f406 6670 	and.w	r6, r6, #3840	@ 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b64:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002b68:	68a3      	ldr	r3, [r4, #8]
 8002b6a:	f405 7700 	and.w	r7, r5, #512	@ 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b6e:	0c2d      	lsrs	r5, r5, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b70:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b74:	f005 0504 	and.w	r5, r5, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	6923      	ldr	r3, [r4, #16]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	431a      	orrs	r2, r3
 8002b82:	6963      	ldr	r3, [r4, #20]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b8a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002b8c:	f003 0308 	and.w	r3, r3, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b90:	433a      	orrs	r2, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b92:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b94:	69e6      	ldr	r6, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b96:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b98:	f006 0638 	and.w	r6, r6, #56	@ 0x38
 8002b9c:	6a25      	ldr	r5, [r4, #32]
 8002b9e:	4332      	orrs	r2, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002ba0:	ea43 030e 	orr.w	r3, r3, lr
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ba4:	f005 0580 	and.w	r5, r5, #128	@ 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002ba8:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002bac:	432a      	orrs	r2, r5
 8002bae:	4302      	orrs	r2, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bb0:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002bb2:	600a      	str	r2, [r1, #0]
  hspi->State     = HAL_SPI_STATE_READY;
 8002bb4:	2201      	movs	r2, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002bb6:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bb8:	69cb      	ldr	r3, [r1, #28]
 8002bba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002bbe:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bc0:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002bc2:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
}
 8002bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bc8:	6843      	ldr	r3, [r0, #4]
 8002bca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bce:	d0a1      	beq.n	8002b14 <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bd0:	61c2      	str	r2, [r0, #28]
 8002bd2:	e79f      	b.n	8002b14 <HAL_SPI_Init+0x14>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	62a0      	str	r0, [r4, #40]	@ 0x28
 8002bd8:	e7be      	b.n	8002b58 <HAL_SPI_Init+0x58>
    HAL_SPI_MspInit(hspi);
 8002bda:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8002bdc:	f884 105c 	strb.w	r1, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8002be0:	f7fe ff80 	bl	8001ae4 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002be4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002be6:	e79d      	b.n	8002b24 <HAL_SPI_Init+0x24>
    return HAL_ERROR;
 8002be8:	2001      	movs	r0, #1
}
 8002bea:	4770      	bx	lr

08002bec <HAL_SPI_Transmit>:
{
 8002bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bf0:	4604      	mov	r4, r0
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	461d      	mov	r5, r3
 8002bf6:	4688      	mov	r8, r1
 8002bf8:	4617      	mov	r7, r2
  tickstart = HAL_GetTick();
 8002bfa:	f7ff f8ed 	bl	8001dd8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8002bfe:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d177      	bne.n	8002cf6 <HAL_SPI_Transmit+0x10a>
  if ((pData == NULL) || (Size == 0U))
 8002c06:	4606      	mov	r6, r0
 8002c08:	b2d8      	uxtb	r0, r3
 8002c0a:	f1b8 0f00 	cmp.w	r8, #0
 8002c0e:	d06f      	beq.n	8002cf0 <HAL_SPI_Transmit+0x104>
 8002c10:	fab7 f387 	clz	r3, r7
 8002c14:	095b      	lsrs	r3, r3, #5
 8002c16:	2f00      	cmp	r7, #0
 8002c18:	d06a      	beq.n	8002cf0 <HAL_SPI_Transmit+0x104>
  __HAL_LOCK(hspi);
 8002c1a:	f894 205c 	ldrb.w	r2, [r4, #92]	@ 0x5c
 8002c1e:	2a01      	cmp	r2, #1
 8002c20:	d069      	beq.n	8002cf6 <HAL_SPI_Transmit+0x10a>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c22:	2203      	movs	r2, #3
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c24:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002c26:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c2a:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c2e:	68a2      	ldr	r2, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c30:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c32:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
  hspi->TxXferCount = Size;
 8002c36:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  __HAL_LOCK(hspi);
 8002c38:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  hspi->RxXferCount = 0U;
 8002c3c:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002c40:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002c44:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->RxISR       = NULL;
 8002c46:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
    __HAL_SPI_DISABLE(hspi);
 8002c4a:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c4c:	d107      	bne.n	8002c5e <HAL_SPI_Transmit+0x72>
    __HAL_SPI_DISABLE(hspi);
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c5c:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	0652      	lsls	r2, r2, #25
 8002c62:	d403      	bmi.n	8002c6c <HAL_SPI_Transmit+0x80>
    __HAL_SPI_ENABLE(hspi);
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c6a:	601a      	str	r2, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c6c:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c6e:	68e1      	ldr	r1, [r4, #12]
 8002c70:	2f01      	cmp	r7, #1
 8002c72:	bf18      	it	ne
 8002c74:	2a00      	cmpne	r2, #0
 8002c76:	bf0c      	ite	eq
 8002c78:	2201      	moveq	r2, #1
 8002c7a:	2200      	movne	r2, #0
 8002c7c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8002c80:	d83d      	bhi.n	8002cfe <HAL_SPI_Transmit+0x112>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c82:	b16a      	cbz	r2, 8002ca0 <HAL_SPI_Transmit+0xb4>
      if (hspi->TxXferCount > 1U)
 8002c84:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8002c86:	b292      	uxth	r2, r2
 8002c88:	2a01      	cmp	r2, #1
 8002c8a:	f240 808d 	bls.w	8002da8 <HAL_SPI_Transmit+0x1bc>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c8e:	4642      	mov	r2, r8
 8002c90:	f832 1b02 	ldrh.w	r1, [r2], #2
 8002c94:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount -= 2U;
 8002c96:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c98:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002c9a:	3b02      	subs	r3, #2
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8002ca0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	b993      	cbnz	r3, 8002ccc <HAL_SPI_Transmit+0xe0>
 8002ca6:	e057      	b.n	8002d58 <HAL_SPI_Transmit+0x16c>
        if (hspi->TxXferCount > 1U)
 8002ca8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002caa:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 8002cac:	b29b      	uxth	r3, r3
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002cae:	4601      	mov	r1, r0
        if (hspi->TxXferCount > 1U)
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d96f      	bls.n	8002d94 <HAL_SPI_Transmit+0x1a8>
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002cb4:	f831 3b02 	ldrh.w	r3, [r1], #2
 8002cb8:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 8002cba:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cbc:	63a1      	str	r1, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002cbe:	3b02      	subs	r3, #2
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8002cc4:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 8002cc6:	b289      	uxth	r1, r1
 8002cc8:	2900      	cmp	r1, #0
 8002cca:	d045      	beq.n	8002d58 <HAL_SPI_Transmit+0x16c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ccc:	6822      	ldr	r2, [r4, #0]
 8002cce:	6893      	ldr	r3, [r2, #8]
 8002cd0:	0799      	lsls	r1, r3, #30
 8002cd2:	d4e9      	bmi.n	8002ca8 <HAL_SPI_Transmit+0xbc>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cd4:	f7ff f880 	bl	8001dd8 <HAL_GetTick>
 8002cd8:	1b80      	subs	r0, r0, r6
 8002cda:	42a8      	cmp	r0, r5
 8002cdc:	d3f2      	bcc.n	8002cc4 <HAL_SPI_Transmit+0xd8>
 8002cde:	1c6b      	adds	r3, r5, #1
 8002ce0:	d0f0      	beq.n	8002cc4 <HAL_SPI_Transmit+0xd8>
          hspi->State = HAL_SPI_STATE_READY;
 8002ce2:	2301      	movs	r3, #1
          return HAL_TIMEOUT;
 8002ce4:	2003      	movs	r0, #3
          hspi->State = HAL_SPI_STATE_READY;
 8002ce6:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002cea:	2300      	movs	r3, #0
 8002cec:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8002cf0:	b002      	add	sp, #8
 8002cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8002cf6:	2002      	movs	r0, #2
}
 8002cf8:	b002      	add	sp, #8
 8002cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cfe:	b142      	cbz	r2, 8002d12 <HAL_SPI_Transmit+0x126>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d00:	4642      	mov	r2, r8
 8002d02:	f832 1b02 	ldrh.w	r1, [r2], #2
 8002d06:	60d9      	str	r1, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d08:	63a2      	str	r2, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8002d0a:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8002d0c:	3a01      	subs	r2, #1
 8002d0e:	b292      	uxth	r2, r2
 8002d10:	87e2      	strh	r2, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8002d12:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8002d14:	b292      	uxth	r2, r2
 8002d16:	b98a      	cbnz	r2, 8002d3c <HAL_SPI_Transmit+0x150>
 8002d18:	e01e      	b.n	8002d58 <HAL_SPI_Transmit+0x16c>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d1a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002d1c:	f832 1b02 	ldrh.w	r1, [r2], #2
 8002d20:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 8002d22:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d26:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8002d28:	f10c 3cff 	add.w	ip, ip, #4294967295
 8002d2c:	fa1f fc8c 	uxth.w	ip, ip
 8002d30:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8002d34:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	b173      	cbz	r3, 8002d58 <HAL_SPI_Transmit+0x16c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d3a:	6823      	ldr	r3, [r4, #0]
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	0797      	lsls	r7, r2, #30
 8002d40:	d4eb      	bmi.n	8002d1a <HAL_SPI_Transmit+0x12e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d42:	f7ff f849 	bl	8001dd8 <HAL_GetTick>
 8002d46:	1b80      	subs	r0, r0, r6
 8002d48:	42a8      	cmp	r0, r5
 8002d4a:	d3f3      	bcc.n	8002d34 <HAL_SPI_Transmit+0x148>
 8002d4c:	1c68      	adds	r0, r5, #1
 8002d4e:	d1c8      	bne.n	8002ce2 <HAL_SPI_Transmit+0xf6>
    while (hspi->TxXferCount > 0U)
 8002d50:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1f0      	bne.n	8002d3a <HAL_SPI_Transmit+0x14e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d58:	4632      	mov	r2, r6
 8002d5a:	4629      	mov	r1, r5
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	f7ff fd75 	bl	800284c <SPI_EndRxTxTransaction>
 8002d62:	b108      	cbz	r0, 8002d68 <HAL_SPI_Transmit+0x17c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d64:	2320      	movs	r3, #32
 8002d66:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d68:	68a3      	ldr	r3, [r4, #8]
 8002d6a:	b933      	cbnz	r3, 8002d7a <HAL_SPI_Transmit+0x18e>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d6c:	6822      	ldr	r2, [r4, #0]
 8002d6e:	9301      	str	r3, [sp, #4]
 8002d70:	68d3      	ldr	r3, [r2, #12]
 8002d72:	9301      	str	r3, [sp, #4]
 8002d74:	6893      	ldr	r3, [r2, #8]
 8002d76:	9301      	str	r3, [sp, #4]
 8002d78:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8002d7a:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8002d7c:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8002d7e:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d82:	6e20      	ldr	r0, [r4, #96]	@ 0x60
  __HAL_UNLOCK(hspi);
 8002d84:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d88:	1ac0      	subs	r0, r0, r3
 8002d8a:	bf18      	it	ne
 8002d8c:	2001      	movne	r0, #1
}
 8002d8e:	b002      	add	sp, #8
 8002d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d94:	7803      	ldrb	r3, [r0, #0]
 8002d96:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 8002d98:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 8002d9a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8002d9c:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 8002d9e:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 8002da0:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 8002da2:	63a2      	str	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8002da4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8002da6:	e78d      	b.n	8002cc4 <HAL_SPI_Transmit+0xd8>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002da8:	f898 2000 	ldrb.w	r2, [r8]
 8002dac:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8002dae:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr ++;
 8002db0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8002db2:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr ++;
 8002db4:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8002db6:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr ++;
 8002db8:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8002dba:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8002dbc:	e770      	b.n	8002ca0 <HAL_SPI_Transmit+0xb4>
 8002dbe:	bf00      	nop

08002dc0 <HAL_SPI_TransmitReceive>:
{
 8002dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002dc4:	4604      	mov	r4, r0
 8002dc6:	4691      	mov	r9, r2
 8002dc8:	461f      	mov	r7, r3
 8002dca:	4688      	mov	r8, r1
 8002dcc:	9e08      	ldr	r6, [sp, #32]
  tickstart = HAL_GetTick();
 8002dce:	f7ff f803 	bl	8001dd8 <HAL_GetTick>
  tmp_state           = hspi->State;
 8002dd2:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  tickstart = HAL_GetTick();
 8002dd6:	4605      	mov	r5, r0
  tmp_mode            = hspi->Init.Mode;
 8002dd8:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d00b      	beq.n	8002df6 <HAL_SPI_TransmitReceive+0x36>
 8002dde:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8002de2:	f040 8094 	bne.w	8002f0e <HAL_SPI_TransmitReceive+0x14e>
 8002de6:	b2d9      	uxtb	r1, r3
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002de8:	68a3      	ldr	r3, [r4, #8]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f040 808f 	bne.w	8002f0e <HAL_SPI_TransmitReceive+0x14e>
 8002df0:	2904      	cmp	r1, #4
 8002df2:	f040 808c 	bne.w	8002f0e <HAL_SPI_TransmitReceive+0x14e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002df6:	f1b9 0f00 	cmp.w	r9, #0
 8002dfa:	bf18      	it	ne
 8002dfc:	f1b8 0f00 	cmpne.w	r8, #0
 8002e00:	f000 810f 	beq.w	8003022 <HAL_SPI_TransmitReceive+0x262>
 8002e04:	2f00      	cmp	r7, #0
 8002e06:	f000 810c 	beq.w	8003022 <HAL_SPI_TransmitReceive+0x262>
  __HAL_LOCK(hspi);
 8002e0a:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d07d      	beq.n	8002f0e <HAL_SPI_TransmitReceive+0x14e>
 8002e12:	2301      	movs	r3, #1
 8002e14:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e18:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d002      	beq.n	8002e26 <HAL_SPI_TransmitReceive+0x66>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e20:	2305      	movs	r3, #5
 8002e22:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002e26:	68e0      	ldr	r0, [r4, #12]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e28:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e2a:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002e2e:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e32:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxXferSize  = Size;
 8002e34:	f8a4 7044 	strh.w	r7, [r4, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002e38:	f8a4 7046 	strh.w	r7, [r4, #70]	@ 0x46
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002e3c:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002e40:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002e42:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002e44:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e48:	6823      	ldr	r3, [r4, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002e4a:	d802      	bhi.n	8002e52 <HAL_SPI_TransmitReceive+0x92>
 8002e4c:	2f01      	cmp	r7, #1
 8002e4e:	f000 80f5 	beq.w	800303c <HAL_SPI_TransmitReceive+0x27c>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e52:	6859      	ldr	r1, [r3, #4]
 8002e54:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 8002e58:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e5a:	6819      	ldr	r1, [r3, #0]
 8002e5c:	0649      	lsls	r1, r1, #25
 8002e5e:	d403      	bmi.n	8002e68 <HAL_SPI_TransmitReceive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 8002e60:	6819      	ldr	r1, [r3, #0]
 8002e62:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 8002e66:	6019      	str	r1, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e68:	2f01      	cmp	r7, #1
 8002e6a:	bf18      	it	ne
 8002e6c:	2a00      	cmpne	r2, #0
 8002e6e:	bf0c      	ite	eq
 8002e70:	2201      	moveq	r2, #1
 8002e72:	2200      	movne	r2, #0
 8002e74:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
 8002e78:	d94c      	bls.n	8002f14 <HAL_SPI_TransmitReceive+0x154>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e7a:	b142      	cbz	r2, 8002e8e <HAL_SPI_TransmitReceive+0xce>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e7c:	4642      	mov	r2, r8
 8002e7e:	f832 1b02 	ldrh.w	r1, [r2], #2
 8002e82:	60d9      	str	r1, [r3, #12]
      hspi->TxXferCount--;
 8002e84:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e86:	63a2      	str	r2, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8002e8e:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e90:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	b92b      	cbnz	r3, 8002ea2 <HAL_SPI_TransmitReceive+0xe2>
 8002e96:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 80a0 	beq.w	8002fe2 <HAL_SPI_TransmitReceive+0x222>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ea2:	6822      	ldr	r2, [r4, #0]
 8002ea4:	6893      	ldr	r3, [r2, #8]
 8002ea6:	079b      	lsls	r3, r3, #30
 8002ea8:	d50d      	bpl.n	8002ec6 <HAL_SPI_TransmitReceive+0x106>
 8002eaa:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	b153      	cbz	r3, 8002ec6 <HAL_SPI_TransmitReceive+0x106>
 8002eb0:	b147      	cbz	r7, 8002ec4 <HAL_SPI_TransmitReceive+0x104>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002eb2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002eb4:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002eb8:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eba:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8002ebc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 8002ec4:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ec6:	6893      	ldr	r3, [r2, #8]
 8002ec8:	f013 0301 	ands.w	r3, r3, #1
 8002ecc:	d00f      	beq.n	8002eee <HAL_SPI_TransmitReceive+0x12e>
 8002ece:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8002ed2:	b289      	uxth	r1, r1
 8002ed4:	b159      	cbz	r1, 8002eee <HAL_SPI_TransmitReceive+0x12e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ed6:	68d2      	ldr	r2, [r2, #12]
        txallowed = 1U;
 8002ed8:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002eda:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002edc:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ee0:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8002ee2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002eee:	f7fe ff73 	bl	8001dd8 <HAL_GetTick>
 8002ef2:	1b40      	subs	r0, r0, r5
 8002ef4:	42b0      	cmp	r0, r6
 8002ef6:	d3cb      	bcc.n	8002e90 <HAL_SPI_TransmitReceive+0xd0>
 8002ef8:	1c70      	adds	r0, r6, #1
 8002efa:	d0c9      	beq.n	8002e90 <HAL_SPI_TransmitReceive+0xd0>
        hspi->State = HAL_SPI_STATE_READY;
 8002efc:	2301      	movs	r3, #1
        return HAL_TIMEOUT;
 8002efe:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 8002f00:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002f04:	2300      	movs	r3, #0
 8002f06:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8002f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8002f0e:	2002      	movs	r0, #2
}
 8002f10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f14:	b16a      	cbz	r2, 8002f32 <HAL_SPI_TransmitReceive+0x172>
      if (hspi->TxXferCount > 1U)
 8002f16:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8002f18:	b292      	uxth	r2, r2
 8002f1a:	2a01      	cmp	r2, #1
 8002f1c:	f240 8083 	bls.w	8003026 <HAL_SPI_TransmitReceive+0x266>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f20:	4642      	mov	r2, r8
 8002f22:	f832 1b02 	ldrh.w	r1, [r2], #2
 8002f26:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount -= 2U;
 8002f28:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f2a:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002f2c:	3b02      	subs	r3, #2
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8002f32:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f34:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	b923      	cbnz	r3, 8002f44 <HAL_SPI_TransmitReceive+0x184>
 8002f3a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d04e      	beq.n	8002fe2 <HAL_SPI_TransmitReceive+0x222>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f44:	6822      	ldr	r2, [r4, #0]
 8002f46:	6893      	ldr	r3, [r2, #8]
 8002f48:	0799      	lsls	r1, r3, #30
 8002f4a:	d505      	bpl.n	8002f58 <HAL_SPI_TransmitReceive+0x198>
 8002f4c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	b113      	cbz	r3, 8002f58 <HAL_SPI_TransmitReceive+0x198>
 8002f52:	2f00      	cmp	r7, #0
 8002f54:	d137      	bne.n	8002fc6 <HAL_SPI_TransmitReceive+0x206>
        txallowed = 0U;
 8002f56:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f58:	6893      	ldr	r3, [r2, #8]
 8002f5a:	f013 0301 	ands.w	r3, r3, #1
 8002f5e:	d019      	beq.n	8002f94 <HAL_SPI_TransmitReceive+0x1d4>
 8002f60:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8002f64:	b289      	uxth	r1, r1
 8002f66:	b1a9      	cbz	r1, 8002f94 <HAL_SPI_TransmitReceive+0x1d4>
        if (hspi->RxXferCount > 1U)
 8002f68:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f6c:	6c21      	ldr	r1, [r4, #64]	@ 0x40
        if (hspi->RxXferCount > 1U)
 8002f6e:	b280      	uxth	r0, r0
 8002f70:	2801      	cmp	r0, #1
 8002f72:	d91c      	bls.n	8002fae <HAL_SPI_TransmitReceive+0x1ee>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f74:	68d0      	ldr	r0, [r2, #12]
 8002f76:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f7a:	6421      	str	r1, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002f7c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8002f80:	3902      	subs	r1, #2
 8002f82:	b289      	uxth	r1, r1
 8002f84:	f8a4 1046 	strh.w	r1, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002f88:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8002f8c:	b289      	uxth	r1, r1
 8002f8e:	2901      	cmp	r1, #1
 8002f90:	d908      	bls.n	8002fa4 <HAL_SPI_TransmitReceive+0x1e4>
        txallowed = 1U;
 8002f92:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f94:	f7fe ff20 	bl	8001dd8 <HAL_GetTick>
 8002f98:	1b40      	subs	r0, r0, r5
 8002f9a:	42b0      	cmp	r0, r6
 8002f9c:	d3ca      	bcc.n	8002f34 <HAL_SPI_TransmitReceive+0x174>
 8002f9e:	1c73      	adds	r3, r6, #1
 8002fa0:	d0c8      	beq.n	8002f34 <HAL_SPI_TransmitReceive+0x174>
 8002fa2:	e7ab      	b.n	8002efc <HAL_SPI_TransmitReceive+0x13c>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002fa4:	6851      	ldr	r1, [r2, #4]
 8002fa6:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 8002faa:	6051      	str	r1, [r2, #4]
 8002fac:	e7f1      	b.n	8002f92 <HAL_SPI_TransmitReceive+0x1d2>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002fae:	7b12      	ldrb	r2, [r2, #12]
 8002fb0:	700a      	strb	r2, [r1, #0]
          hspi->pRxBuffPtr++;
 8002fb2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002fb4:	3201      	adds	r2, #1
 8002fb6:	6422      	str	r2, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8002fb8:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 8002fbc:	3a01      	subs	r2, #1
 8002fbe:	b292      	uxth	r2, r2
 8002fc0:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 8002fc4:	e7e5      	b.n	8002f92 <HAL_SPI_TransmitReceive+0x1d2>
        if (hspi->TxXferCount > 1U)
 8002fc6:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002fc8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 8002fca:	b289      	uxth	r1, r1
 8002fcc:	2901      	cmp	r1, #1
 8002fce:	d918      	bls.n	8003002 <HAL_SPI_TransmitReceive+0x242>
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002fd0:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002fd4:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fd6:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002fd8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002fda:	3b02      	subs	r3, #2
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8002fe0:	e7b9      	b.n	8002f56 <HAL_SPI_TransmitReceive+0x196>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fe2:	462a      	mov	r2, r5
 8002fe4:	4631      	mov	r1, r6
 8002fe6:	4620      	mov	r0, r4
 8002fe8:	f7ff fc30 	bl	800284c <SPI_EndRxTxTransaction>
 8002fec:	b9a0      	cbnz	r0, 8003018 <HAL_SPI_TransmitReceive+0x258>
  hspi->State = HAL_SPI_STATE_READY;
 8002fee:	2301      	movs	r3, #1
  __HAL_UNLOCK(hspi);
 8002ff0:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  hspi->State = HAL_SPI_STATE_READY;
 8002ff4:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ff8:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8002ffa:	3800      	subs	r0, #0
 8002ffc:	bf18      	it	ne
 8002ffe:	2001      	movne	r0, #1
 8003000:	e786      	b.n	8002f10 <HAL_SPI_TransmitReceive+0x150>
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 8003006:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 8003008:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 800300a:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 800300c:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800300e:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 8003010:	63a2      	str	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8003012:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003014:	6822      	ldr	r2, [r4, #0]
 8003016:	e79e      	b.n	8002f56 <HAL_SPI_TransmitReceive+0x196>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003018:	2220      	movs	r2, #32
    __HAL_UNLOCK(hspi);
 800301a:	2300      	movs	r3, #0
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800301c:	6622      	str	r2, [r4, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800301e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 8003022:	2001      	movs	r0, #1
 8003024:	e774      	b.n	8002f10 <HAL_SPI_TransmitReceive+0x150>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003026:	f898 2000 	ldrb.w	r2, [r8]
 800302a:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800302c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr++;
 800302e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8003030:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 8003032:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8003034:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8003036:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8003038:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800303a:	e77a      	b.n	8002f32 <HAL_SPI_TransmitReceive+0x172>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003042:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	0652      	lsls	r2, r2, #25
 8003048:	f53f af65 	bmi.w	8002f16 <HAL_SPI_TransmitReceive+0x156>
    __HAL_SPI_ENABLE(hspi);
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003052:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003054:	e75f      	b.n	8002f16 <HAL_SPI_TransmitReceive+0x156>
 8003056:	bf00      	nop

08003058 <HAL_SPI_Receive>:
{
 8003058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800305c:	4617      	mov	r7, r2
  if (hspi->State != HAL_SPI_STATE_READY)
 800305e:	f890 205d 	ldrb.w	r2, [r0, #93]	@ 0x5d
{
 8003062:	b082      	sub	sp, #8
  if (hspi->State != HAL_SPI_STATE_READY)
 8003064:	2a01      	cmp	r2, #1
 8003066:	d16c      	bne.n	8003142 <HAL_SPI_Receive+0xea>
  if ((pData == NULL) || (Size == 0U))
 8003068:	461d      	mov	r5, r3
 800306a:	4688      	mov	r8, r1
 800306c:	b2d3      	uxtb	r3, r2
 800306e:	2900      	cmp	r1, #0
 8003070:	d063      	beq.n	800313a <HAL_SPI_Receive+0xe2>
 8003072:	2f00      	cmp	r7, #0
 8003074:	d061      	beq.n	800313a <HAL_SPI_Receive+0xe2>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003076:	6843      	ldr	r3, [r0, #4]
 8003078:	4604      	mov	r4, r0
 800307a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800307e:	d103      	bne.n	8003088 <HAL_SPI_Receive+0x30>
 8003080:	6883      	ldr	r3, [r0, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 80b4 	beq.w	80031f0 <HAL_SPI_Receive+0x198>
  tickstart = HAL_GetTick();
 8003088:	f7fe fea6 	bl	8001dd8 <HAL_GetTick>
  __HAL_LOCK(hspi);
 800308c:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8003090:	4606      	mov	r6, r0
  __HAL_LOCK(hspi);
 8003092:	2b01      	cmp	r3, #1
 8003094:	d055      	beq.n	8003142 <HAL_SPI_Receive+0xea>
 8003096:	2201      	movs	r2, #1
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003098:	68e1      	ldr	r1, [r4, #12]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800309a:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800309c:	f8c4 8040 	str.w	r8, [r4, #64]	@ 0x40
  __HAL_LOCK(hspi);
 80030a0:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80030a4:	2204      	movs	r2, #4
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030a6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80030aa:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80030ac:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030b0:	6822      	ldr	r2, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030b2:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->TxXferSize  = 0U;
 80030b4:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80030b6:	f8a4 7046 	strh.w	r7, [r4, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80030ba:	f8a4 7044 	strh.w	r7, [r4, #68]	@ 0x44
  hspi->TxXferCount = 0U;
 80030be:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80030c0:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030c4:	6853      	ldr	r3, [r2, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030c6:	d841      	bhi.n	800314c <HAL_SPI_Receive+0xf4>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80030cc:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030ce:	68a3      	ldr	r3, [r4, #8]
 80030d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030d4:	d07f      	beq.n	80031d6 <HAL_SPI_Receive+0x17e>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030d6:	6813      	ldr	r3, [r2, #0]
 80030d8:	0658      	lsls	r0, r3, #25
 80030da:	d458      	bmi.n	800318e <HAL_SPI_Receive+0x136>
    __HAL_SPI_ENABLE(hspi);
 80030dc:	6813      	ldr	r3, [r2, #0]
 80030de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030e2:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80030e4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80030e8:	d951      	bls.n	800318e <HAL_SPI_Receive+0x136>
    while (hspi->RxXferCount > 0U)
 80030ea:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	b993      	cbnz	r3, 8003118 <HAL_SPI_Receive+0xc0>
 80030f2:	e036      	b.n	8003162 <HAL_SPI_Receive+0x10a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030f4:	68d2      	ldr	r2, [r2, #12]
 80030f6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80030f8:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->RxXferCount--;
 80030fc:	f8b4 c046 	ldrh.w	ip, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003100:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8003102:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003106:	fa1f fc8c 	uxth.w	ip, ip
 800310a:	f8a4 c046 	strh.w	ip, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 800310e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8003112:	b29b      	uxth	r3, r3
 8003114:	b32b      	cbz	r3, 8003162 <HAL_SPI_Receive+0x10a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003116:	6822      	ldr	r2, [r4, #0]
 8003118:	6893      	ldr	r3, [r2, #8]
 800311a:	07d9      	lsls	r1, r3, #31
 800311c:	d4ea      	bmi.n	80030f4 <HAL_SPI_Receive+0x9c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800311e:	f7fe fe5b 	bl	8001dd8 <HAL_GetTick>
 8003122:	1b80      	subs	r0, r0, r6
 8003124:	42a8      	cmp	r0, r5
 8003126:	d3f2      	bcc.n	800310e <HAL_SPI_Receive+0xb6>
 8003128:	1c6b      	adds	r3, r5, #1
 800312a:	d0f0      	beq.n	800310e <HAL_SPI_Receive+0xb6>
          hspi->State = HAL_SPI_STATE_READY;
 800312c:	2301      	movs	r3, #1
          __HAL_UNLOCK(hspi);
 800312e:	2200      	movs	r2, #0
          hspi->State = HAL_SPI_STATE_READY;
 8003130:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
          __HAL_UNLOCK(hspi);
 8003136:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
}
 800313a:	4618      	mov	r0, r3
 800313c:	b002      	add	sp, #8
 800313e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8003142:	2302      	movs	r3, #2
}
 8003144:	4618      	mov	r0, r3
 8003146:	b002      	add	sp, #8
 8003148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800314c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003150:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003152:	68a3      	ldr	r3, [r4, #8]
 8003154:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003158:	d03d      	beq.n	80031d6 <HAL_SPI_Receive+0x17e>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800315a:	6813      	ldr	r3, [r2, #0]
 800315c:	065f      	lsls	r7, r3, #25
 800315e:	d5bd      	bpl.n	80030dc <HAL_SPI_Receive+0x84>
 8003160:	e7c3      	b.n	80030ea <HAL_SPI_Receive+0x92>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003162:	4632      	mov	r2, r6
 8003164:	4629      	mov	r1, r5
 8003166:	4620      	mov	r0, r4
 8003168:	f7ff fc2a 	bl	80029c0 <SPI_EndRxTransaction>
 800316c:	b108      	cbz	r0, 8003172 <HAL_SPI_Receive+0x11a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800316e:	2320      	movs	r3, #32
 8003170:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003172:	2301      	movs	r3, #1
  __HAL_UNLOCK(hspi);
 8003174:	2200      	movs	r2, #0
  hspi->State = HAL_SPI_STATE_READY;
 8003176:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800317a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
  __HAL_UNLOCK(hspi);
 800317c:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	bf18      	it	ne
 8003184:	2301      	movne	r3, #1
}
 8003186:	4618      	mov	r0, r3
 8003188:	b002      	add	sp, #8
 800318a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (hspi->RxXferCount > 0U)
 800318e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8003192:	b29b      	uxth	r3, r3
 8003194:	b9a3      	cbnz	r3, 80031c0 <HAL_SPI_Receive+0x168>
 8003196:	e7e4      	b.n	8003162 <HAL_SPI_Receive+0x10a>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003198:	7b12      	ldrb	r2, [r2, #12]
 800319a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800319c:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 800319e:	f8b4 c046 	ldrh.w	ip, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80031a2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 80031a4:	f10c 3cff 	add.w	ip, ip, #4294967295
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80031a8:	3301      	adds	r3, #1
        hspi->RxXferCount--;
 80031aa:	fa1f fc8c 	uxth.w	ip, ip
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80031ae:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 80031b0:	f8a4 c046 	strh.w	ip, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 80031b4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0d1      	beq.n	8003162 <HAL_SPI_Receive+0x10a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80031be:	6822      	ldr	r2, [r4, #0]
 80031c0:	6893      	ldr	r3, [r2, #8]
 80031c2:	07df      	lsls	r7, r3, #31
 80031c4:	d4e8      	bmi.n	8003198 <HAL_SPI_Receive+0x140>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031c6:	f7fe fe07 	bl	8001dd8 <HAL_GetTick>
 80031ca:	1b80      	subs	r0, r0, r6
 80031cc:	42a8      	cmp	r0, r5
 80031ce:	d3f1      	bcc.n	80031b4 <HAL_SPI_Receive+0x15c>
 80031d0:	1c68      	adds	r0, r5, #1
 80031d2:	d0ef      	beq.n	80031b4 <HAL_SPI_Receive+0x15c>
 80031d4:	e7aa      	b.n	800312c <HAL_SPI_Receive+0xd4>
    __HAL_SPI_DISABLE(hspi);
 80031d6:	6813      	ldr	r3, [r2, #0]
 80031d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031dc:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 80031de:	6813      	ldr	r3, [r2, #0]
 80031e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80031e4:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031e6:	6813      	ldr	r3, [r2, #0]
 80031e8:	065b      	lsls	r3, r3, #25
 80031ea:	f53f af7b 	bmi.w	80030e4 <HAL_SPI_Receive+0x8c>
 80031ee:	e775      	b.n	80030dc <HAL_SPI_Receive+0x84>
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80031f0:	9500      	str	r5, [sp, #0]
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80031f2:	2504      	movs	r5, #4
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80031f4:	463b      	mov	r3, r7
 80031f6:	460a      	mov	r2, r1
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80031f8:	f880 505d 	strb.w	r5, [r0, #93]	@ 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80031fc:	f7ff fde0 	bl	8002dc0 <HAL_SPI_TransmitReceive>
 8003200:	4603      	mov	r3, r0
 8003202:	e79a      	b.n	800313a <HAL_SPI_Receive+0xe2>

08003204 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003204:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003206:	4903      	ldr	r1, [pc, #12]	@ (8003214 <MX_FATFS_Init+0x10>)
 8003208:	4803      	ldr	r0, [pc, #12]	@ (8003218 <MX_FATFS_Init+0x14>)
 800320a:	f003 fdbd 	bl	8006d88 <FATFS_LinkDriver>
 800320e:	4b03      	ldr	r3, [pc, #12]	@ (800321c <MX_FATFS_Init+0x18>)
 8003210:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003212:	bd08      	pop	{r3, pc}
 8003214:	20006b1c 	.word	0x20006b1c
 8003218:	2000000c 	.word	0x2000000c
 800321c:	20006b20 	.word	0x20006b20

08003220 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8003220:	2000      	movs	r0, #0
 8003222:	4770      	bx	lr

08003224 <disk_status>:
DSTATUS disk_status(BYTE pdrv) {
    if (pdrv == DEV_MMC) {
        return 0;  // OK
    }
    return STA_NOINIT;
}
 8003224:	3800      	subs	r0, #0
 8003226:	bf18      	it	ne
 8003228:	2001      	movne	r0, #1
 800322a:	4770      	bx	lr

0800322c <disk_ioctl>:
    return RES_OK;
#endif
}

DRESULT disk_ioctl(BYTE pdrv, BYTE cmd, void* buff) {
    if (pdrv != DEV_MMC) return RES_PARERR;
 800322c:	b928      	cbnz	r0, 800323a <disk_ioctl+0xe>

    switch (cmd) {
 800322e:	2903      	cmp	r1, #3
 8003230:	d803      	bhi.n	800323a <disk_ioctl+0xe>
 8003232:	e8df f001 	tbb	[pc, r1]
 8003236:	0806      	.short	0x0806
 8003238:	040d      	.short	0x040d
    if (pdrv != DEV_MMC) return RES_PARERR;
 800323a:	2004      	movs	r0, #4
            *(DWORD*)buff = 1;
            return RES_OK;
    }

    return RES_PARERR;
}
 800323c:	4770      	bx	lr
            *(DWORD*)buff = 1;
 800323e:	2301      	movs	r3, #1
 8003240:	6013      	str	r3, [r2, #0]
            return RES_OK;
 8003242:	2000      	movs	r0, #0
 8003244:	4770      	bx	lr
            *(DWORD*)buff = 32768;  // Exemplo: 16 MB
 8003246:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
            return RES_OK;
 800324a:	2000      	movs	r0, #0
            *(DWORD*)buff = 32768;  // Exemplo: 16 MB
 800324c:	6013      	str	r3, [r2, #0]
            return RES_OK;
 800324e:	4770      	bx	lr
            *(WORD*)buff = 512;
 8003250:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003254:	8013      	strh	r3, [r2, #0]
            return RES_OK;
 8003256:	e7f4      	b.n	8003242 <disk_ioctl+0x16>

08003258 <disk_initialize>:
    if (pdrv == DEV_MMC) {
 8003258:	b108      	cbz	r0, 800325e <disk_initialize+0x6>
    return STA_NOINIT;
 800325a:	2001      	movs	r0, #1
}
 800325c:	4770      	bx	lr
DSTATUS disk_initialize(BYTE pdrv) {
 800325e:	b508      	push	{r3, lr}
        return (SD_Init() == SD_OK) ? 0 : STA_NOINIT;
 8003260:	f7fe fa8e 	bl	8001780 <SD_Init>
 8003264:	3800      	subs	r0, #0
 8003266:	bf18      	it	ne
 8003268:	2001      	movne	r0, #1
}
 800326a:	bd08      	pop	{r3, pc}

0800326c <disk_read>:
    if (pdrv != DEV_MMC || count == 0) return RES_PARERR;
 800326c:	b9c0      	cbnz	r0, 80032a0 <disk_read+0x34>
DRESULT disk_read(BYTE pdrv, BYTE* buff, LBA_t sector, UINT count) {
 800326e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pdrv != DEV_MMC || count == 0) return RES_PARERR;
 8003270:	fab3 f583 	clz	r5, r3
 8003274:	461f      	mov	r7, r3
 8003276:	096d      	lsrs	r5, r5, #5
 8003278:	b183      	cbz	r3, 800329c <disk_read+0x30>
 800327a:	0254      	lsls	r4, r2, #9
 800327c:	eba1 2642 	sub.w	r6, r1, r2, lsl #9
 8003280:	e001      	b.n	8003286 <disk_read+0x1a>
    for (UINT i = 0; i < count; i++) {
 8003282:	42af      	cmp	r7, r5
 8003284:	d909      	bls.n	800329a <disk_read+0x2e>
        if (SD_ReadBlock((sector + i) * 512, buff + (512 * i)) != SD_OK)
 8003286:	1931      	adds	r1, r6, r4
 8003288:	4620      	mov	r0, r4
    for (UINT i = 0; i < count; i++) {
 800328a:	3501      	adds	r5, #1
 800328c:	f504 7400 	add.w	r4, r4, #512	@ 0x200
        if (SD_ReadBlock((sector + i) * 512, buff + (512 * i)) != SD_OK)
 8003290:	f7fe face 	bl	8001830 <SD_ReadBlock>
 8003294:	2800      	cmp	r0, #0
 8003296:	d0f4      	beq.n	8003282 <disk_read+0x16>
            return RES_ERROR;
 8003298:	2001      	movs	r0, #1
}
 800329a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pdrv != DEV_MMC || count == 0) return RES_PARERR;
 800329c:	2004      	movs	r0, #4
}
 800329e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pdrv != DEV_MMC || count == 0) return RES_PARERR;
 80032a0:	2004      	movs	r0, #4
}
 80032a2:	4770      	bx	lr

080032a4 <disk_write>:
    if (pdrv != DEV_MMC || count == 0) return RES_PARERR;
 80032a4:	b9c0      	cbnz	r0, 80032d8 <disk_write+0x34>
DRESULT disk_write(BYTE pdrv, const BYTE* buff, LBA_t sector, UINT count) {
 80032a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pdrv != DEV_MMC || count == 0) return RES_PARERR;
 80032a8:	fab3 f583 	clz	r5, r3
 80032ac:	461f      	mov	r7, r3
 80032ae:	096d      	lsrs	r5, r5, #5
 80032b0:	b183      	cbz	r3, 80032d4 <disk_write+0x30>
 80032b2:	0254      	lsls	r4, r2, #9
 80032b4:	eba1 2642 	sub.w	r6, r1, r2, lsl #9
 80032b8:	e001      	b.n	80032be <disk_write+0x1a>
    for (UINT i = 0; i < count; i++) {
 80032ba:	42af      	cmp	r7, r5
 80032bc:	d909      	bls.n	80032d2 <disk_write+0x2e>
        if (SD_WriteBlock((sector + i) * 512, buff + (512 * i)) != SD_OK)
 80032be:	1931      	adds	r1, r6, r4
 80032c0:	4620      	mov	r0, r4
    for (UINT i = 0; i < count; i++) {
 80032c2:	3501      	adds	r5, #1
 80032c4:	f504 7400 	add.w	r4, r4, #512	@ 0x200
        if (SD_WriteBlock((sector + i) * 512, buff + (512 * i)) != SD_OK)
 80032c8:	f7fe fb26 	bl	8001918 <SD_WriteBlock>
 80032cc:	2800      	cmp	r0, #0
 80032ce:	d0f4      	beq.n	80032ba <disk_write+0x16>
            return RES_ERROR;
 80032d0:	2001      	movs	r0, #1
}
 80032d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pdrv != DEV_MMC || count == 0) return RES_PARERR;
 80032d4:	2004      	movs	r0, #4
}
 80032d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pdrv != DEV_MMC || count == 0) return RES_PARERR;
 80032d8:	2004      	movs	r0, #4
}
 80032da:	4770      	bx	lr

080032dc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80032dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80032de:	78c3      	ldrb	r3, [r0, #3]
{
 80032e0:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80032e2:	b95b      	cbnz	r3, 80032fc <sync_fs+0x20>


	res = sync_window(fs);
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80032e4:	7823      	ldrb	r3, [r4, #0]
 80032e6:	2b03      	cmp	r3, #3
 80032e8:	d02a      	beq.n	8003340 <sync_fs+0x64>
			fs->winsect = fs->volbase + 1;
			disk_write(fs->drv, fs->win, fs->winsect, 1);
			fs->fsi_flag = 0;
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80032ea:	2200      	movs	r2, #0
 80032ec:	7860      	ldrb	r0, [r4, #1]
 80032ee:	4611      	mov	r1, r2
 80032f0:	f7ff ff9c 	bl	800322c <disk_ioctl>
 80032f4:	3800      	subs	r0, #0
 80032f6:	bf18      	it	ne
 80032f8:	2001      	movne	r0, #1
	}

	return res;
}
 80032fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 80032fc:	6b45      	ldr	r5, [r0, #52]	@ 0x34
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80032fe:	f100 0738 	add.w	r7, r0, #56	@ 0x38
 8003302:	2301      	movs	r3, #1
 8003304:	7840      	ldrb	r0, [r0, #1]
 8003306:	462a      	mov	r2, r5
 8003308:	4639      	mov	r1, r7
 800330a:	f7ff ffcb 	bl	80032a4 <disk_write>
 800330e:	b9a8      	cbnz	r0, 800333c <sync_fs+0x60>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003310:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003312:	6a23      	ldr	r3, [r4, #32]
 8003314:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 8003316:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003318:	429a      	cmp	r2, r3
 800331a:	d2e3      	bcs.n	80032e4 <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800331c:	78a6      	ldrb	r6, [r4, #2]
 800331e:	2e01      	cmp	r6, #1
 8003320:	d801      	bhi.n	8003326 <sync_fs+0x4a>
 8003322:	e7df      	b.n	80032e4 <sync_fs+0x8>
					wsect += fs->fsize;
 8003324:	6a23      	ldr	r3, [r4, #32]
 8003326:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003328:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800332a:	2301      	movs	r3, #1
 800332c:	4639      	mov	r1, r7
 800332e:	462a      	mov	r2, r5
 8003330:	7860      	ldrb	r0, [r4, #1]
 8003332:	f7ff ffb7 	bl	80032a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003336:	2e01      	cmp	r6, #1
 8003338:	d1f4      	bne.n	8003324 <sync_fs+0x48>
 800333a:	e7d3      	b.n	80032e4 <sync_fs+0x8>
			res = FR_DISK_ERR;
 800333c:	2001      	movs	r0, #1
}
 800333e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003340:	7925      	ldrb	r5, [r4, #4]
 8003342:	2d01      	cmp	r5, #1
 8003344:	d1d1      	bne.n	80032ea <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 8003346:	f104 0638 	add.w	r6, r4, #56	@ 0x38
		*d++ = (BYTE)val;
 800334a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800334e:	2100      	movs	r1, #0
 8003350:	4630      	mov	r0, r6
 8003352:	f005 fba0 	bl	8008a96 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 8003356:	480f      	ldr	r0, [pc, #60]	@ (8003394 <sync_fs+0xb8>)
	*ptr++ = (BYTE)val; val >>= 8;
 8003358:	f64a 2355 	movw	r3, #43605	@ 0xaa55
	*ptr++ = (BYTE)val; val >>= 8;
 800335c:	63a0      	str	r0, [r4, #56]	@ 0x38
 800335e:	f100 50ff 	add.w	r0, r0, #534773760	@ 0x1fe00000
	*ptr++ = (BYTE)val; val >>= 8;
 8003362:	f8a4 3236 	strh.w	r3, [r4, #566]	@ 0x236
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003366:	462b      	mov	r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8003368:	f500 5000 	add.w	r0, r0, #8192	@ 0x2000
 800336c:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 8003370:	3020      	adds	r0, #32
 8003372:	f8c4 2220 	str.w	r2, [r4, #544]	@ 0x220
			fs->winsect = fs->volbase + 1;
 8003376:	6a62      	ldr	r2, [r4, #36]	@ 0x24
	*ptr++ = (BYTE)val; val >>= 8;
 8003378:	f8c4 1224 	str.w	r1, [r4, #548]	@ 0x224
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800337c:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;
 800337e:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8003380:	f8c4 021c 	str.w	r0, [r4, #540]	@ 0x21c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003384:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 8003386:	6362      	str	r2, [r4, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003388:	f7ff ff8c 	bl	80032a4 <disk_write>
			fs->fsi_flag = 0;
 800338c:	2300      	movs	r3, #0
 800338e:	7123      	strb	r3, [r4, #4]
 8003390:	e7ab      	b.n	80032ea <sync_fs+0xe>
 8003392:	bf00      	nop
 8003394:	41615252 	.word	0x41615252

08003398 <move_window>:
{
 8003398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800339c:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 800339e:	428e      	cmp	r6, r1
 80033a0:	d102      	bne.n	80033a8 <move_window+0x10>
	FRESULT res = FR_OK;
 80033a2:	2000      	movs	r0, #0
}
 80033a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80033a8:	4604      	mov	r4, r0
 80033aa:	460d      	mov	r5, r1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80033ac:	7840      	ldrb	r0, [r0, #1]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80033ae:	78e3      	ldrb	r3, [r4, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80033b0:	f104 0738 	add.w	r7, r4, #56	@ 0x38
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80033b4:	b95b      	cbnz	r3, 80033ce <move_window+0x36>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80033b6:	2301      	movs	r3, #1
 80033b8:	4639      	mov	r1, r7
 80033ba:	462a      	mov	r2, r5
 80033bc:	f7ff ff56 	bl	800326c <disk_read>
 80033c0:	b110      	cbz	r0, 80033c8 <move_window+0x30>
				res = FR_DISK_ERR;
 80033c2:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80033c4:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
 80033c8:	6365      	str	r5, [r4, #52]	@ 0x34
}
 80033ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80033ce:	2301      	movs	r3, #1
 80033d0:	4632      	mov	r2, r6
 80033d2:	4639      	mov	r1, r7
 80033d4:	f7ff ff66 	bl	80032a4 <disk_write>
 80033d8:	b9d0      	cbnz	r0, 8003410 <move_window+0x78>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80033da:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80033dc:	6a23      	ldr	r3, [r4, #32]
 80033de:	1ab2      	subs	r2, r6, r2
			fs->wflag = 0;
 80033e0:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d212      	bcs.n	800340c <move_window+0x74>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80033e6:	f894 8002 	ldrb.w	r8, [r4, #2]
 80033ea:	f1b8 0f01 	cmp.w	r8, #1
 80033ee:	d801      	bhi.n	80033f4 <move_window+0x5c>
 80033f0:	e00c      	b.n	800340c <move_window+0x74>
					wsect += fs->fsize;
 80033f2:	6a23      	ldr	r3, [r4, #32]
 80033f4:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80033f6:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 80033fa:	2301      	movs	r3, #1
 80033fc:	4639      	mov	r1, r7
 80033fe:	4632      	mov	r2, r6
 8003400:	7860      	ldrb	r0, [r4, #1]
 8003402:	f7ff ff4f 	bl	80032a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003406:	f1b8 0f01 	cmp.w	r8, #1
 800340a:	d1f2      	bne.n	80033f2 <move_window+0x5a>
 800340c:	7860      	ldrb	r0, [r4, #1]
 800340e:	e7d2      	b.n	80033b6 <move_window+0x1e>
			res = FR_DISK_ERR;
 8003410:	2001      	movs	r0, #1
 8003412:	e7c7      	b.n	80033a4 <move_window+0xc>

08003414 <put_fat.part.0>:
/*-----------------------------------------------------------------------*/
/* FAT access - Change value of a FAT entry                              */
/*-----------------------------------------------------------------------*/

static
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 8003414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
		switch (fs->fs_type) {
 8003418:	7804      	ldrb	r4, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800341a:	4605      	mov	r5, r0
 800341c:	460f      	mov	r7, r1
 800341e:	4616      	mov	r6, r2
		switch (fs->fs_type) {
 8003420:	2c02      	cmp	r4, #2
 8003422:	d043      	beq.n	80034ac <put_fat.part.0+0x98>
 8003424:	d825      	bhi.n	8003472 <put_fat.part.0+0x5e>
 8003426:	2c01      	cmp	r4, #1
 8003428:	d13d      	bne.n	80034a6 <put_fat.part.0+0x92>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800342a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
			bc = (UINT)clst; bc += bc / 2;
 800342c:	eb07 0857 	add.w	r8, r7, r7, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003430:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8003434:	f7ff ffb0 	bl	8003398 <move_window>
			if (res != FR_OK) break;
 8003438:	b9c8      	cbnz	r0, 800346e <put_fat.part.0+0x5a>
			p = fs->win + bc++ % SS(fs);
 800343a:	f108 0901 	add.w	r9, r8, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800343e:	07fb      	lsls	r3, r7, #31
			p = fs->win + bc++ % SS(fs);
 8003440:	f3c8 0808 	ubfx	r8, r8, #0, #9
 8003444:	f105 0a38 	add.w	sl, r5, #56	@ 0x38
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003448:	ea4f 2259 	mov.w	r2, r9, lsr #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800344c:	d544      	bpl.n	80034d8 <put_fat.part.0+0xc4>
 800344e:	f81a 3008 	ldrb.w	r3, [sl, r8]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003452:	4628      	mov	r0, r5
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003454:	f003 030f 	and.w	r3, r3, #15
 8003458:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 800345c:	f80a 3008 	strb.w	r3, [sl, r8]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003460:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
			fs->wflag = 1;
 8003462:	70ec      	strb	r4, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003464:	4411      	add	r1, r2
 8003466:	f7ff ff97 	bl	8003398 <move_window>
			if (res != FR_OK) break;
 800346a:	2800      	cmp	r0, #0
 800346c:	d04b      	beq.n	8003506 <put_fat.part.0+0xf2>
			fs->wflag = 1;
			break;
		}
	}
	return res;
}
 800346e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		switch (fs->fs_type) {
 8003472:	3c03      	subs	r4, #3
 8003474:	2c01      	cmp	r4, #1
 8003476:	d816      	bhi.n	80034a6 <put_fat.part.0+0x92>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003478:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800347a:	eb01 11d7 	add.w	r1, r1, r7, lsr #7
 800347e:	f7ff ff8b 	bl	8003398 <move_window>
			if (res != FR_OK) break;
 8003482:	2800      	cmp	r0, #0
 8003484:	d1f3      	bne.n	800346e <put_fat.part.0+0x5a>
			p = fs->win + bc++ % SS(fs);
 8003486:	462b      	mov	r3, r5
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003488:	00b9      	lsls	r1, r7, #2
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800348a:	f813 2b38 	ldrb.w	r2, [r3], #56
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800348e:	f401 71fe 	and.w	r1, r1, #508	@ 0x1fc
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8003492:	2a04      	cmp	r2, #4
 8003494:	d005      	beq.n	80034a2 <put_fat.part.0+0x8e>
	rv = rv << 8 | ptr[0];
 8003496:	585a      	ldr	r2, [r3, r1]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003498:	f026 4670 	bic.w	r6, r6, #4026531840	@ 0xf0000000
 800349c:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 80034a0:	4316      	orrs	r6, r2
	*ptr++ = (BYTE)val; val >>= 8;
 80034a2:	505e      	str	r6, [r3, r1]
			break;
 80034a4:	e013      	b.n	80034ce <put_fat.part.0+0xba>
		switch (fs->fs_type) {
 80034a6:	2002      	movs	r0, #2
}
 80034a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80034ac:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80034ae:	eb01 2117 	add.w	r1, r1, r7, lsr #8
 80034b2:	f7ff ff71 	bl	8003398 <move_window>
			if (res != FR_OK) break;
 80034b6:	2800      	cmp	r0, #0
 80034b8:	d1d9      	bne.n	800346e <put_fat.part.0+0x5a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80034ba:	0079      	lsls	r1, r7, #1
 80034bc:	f105 0338 	add.w	r3, r5, #56	@ 0x38
 80034c0:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 80034c4:	545e      	strb	r6, [r3, r1]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80034c6:	185a      	adds	r2, r3, r1
	*ptr++ = (BYTE)val; val >>= 8;
 80034c8:	f3c6 2607 	ubfx	r6, r6, #8, #8
	*ptr++ = (BYTE)val;
 80034cc:	7056      	strb	r6, [r2, #1]
			fs->wflag = 1;
 80034ce:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80034d0:	2000      	movs	r0, #0
			fs->wflag = 1;
 80034d2:	70eb      	strb	r3, [r5, #3]
}
 80034d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80034d8:	f80a 6008 	strb.w	r6, [sl, r8]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80034dc:	4628      	mov	r0, r5
 80034de:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
			fs->wflag = 1;
 80034e0:	70ec      	strb	r4, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80034e2:	4411      	add	r1, r2
 80034e4:	f7ff ff58 	bl	8003398 <move_window>
			if (res != FR_OK) break;
 80034e8:	2800      	cmp	r0, #0
 80034ea:	d1c0      	bne.n	800346e <put_fat.part.0+0x5a>
			p = fs->win + bc % SS(fs);
 80034ec:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80034f0:	f3c6 2603 	ubfx	r6, r6, #8, #4
 80034f4:	f81a 3009 	ldrb.w	r3, [sl, r9]
			p = fs->win + bc % SS(fs);
 80034f8:	eb0a 0209 	add.w	r2, sl, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80034fc:	f023 030f 	bic.w	r3, r3, #15
 8003500:	4333      	orrs	r3, r6
 8003502:	7013      	strb	r3, [r2, #0]
			break;
 8003504:	e7e3      	b.n	80034ce <put_fat.part.0+0xba>
			p = fs->win + bc % SS(fs);
 8003506:	f3c9 0208 	ubfx	r2, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800350a:	f3c6 1307 	ubfx	r3, r6, #4, #8
			p = fs->win + bc % SS(fs);
 800350e:	4452      	add	r2, sl
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003510:	7013      	strb	r3, [r2, #0]
			break;
 8003512:	e7dc      	b.n	80034ce <put_fat.part.0+0xba>

08003514 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003514:	2901      	cmp	r1, #1
 8003516:	d90f      	bls.n	8003538 <get_fat+0x24>
{
 8003518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 800351a:	6806      	ldr	r6, [r0, #0]
 800351c:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800351e:	69f3      	ldr	r3, [r6, #28]
 8003520:	428b      	cmp	r3, r1
 8003522:	d801      	bhi.n	8003528 <get_fat+0x14>
		val = 1;	/* Internal error */
 8003524:	2001      	movs	r0, #1
}
 8003526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
 8003528:	7833      	ldrb	r3, [r6, #0]
 800352a:	3b01      	subs	r3, #1
 800352c:	2b03      	cmp	r3, #3
 800352e:	d8f9      	bhi.n	8003524 <get_fat+0x10>
 8003530:	e8df f003 	tbb	[pc, r3]
 8003534:	04243340 	.word	0x04243340
		val = 1;	/* Internal error */
 8003538:	2001      	movs	r0, #1
}
 800353a:	4770      	bx	lr
			if (obj->objsize) {
 800353c:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
 8003540:	ea53 0102 	orrs.w	r1, r3, r2
 8003544:	d0ee      	beq.n	8003524 <get_fat+0x10>
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8003546:	79c5      	ldrb	r5, [r0, #7]
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8003548:	6881      	ldr	r1, [r0, #8]
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800354a:	2d02      	cmp	r5, #2
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800354c:	8977      	ldrh	r7, [r6, #10]
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800354e:	eba4 0101 	sub.w	r1, r4, r1
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8003552:	d056      	beq.n	8003602 <get_fat+0xee>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8003554:	2d03      	cmp	r5, #3
 8003556:	d061      	beq.n	800361c <get_fat+0x108>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8003558:	69c3      	ldr	r3, [r0, #28]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d162      	bne.n	8003624 <get_fat+0x110>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800355e:	6ab1      	ldr	r1, [r6, #40]	@ 0x28
 8003560:	4630      	mov	r0, r6
 8003562:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8003566:	f7ff ff17 	bl	8003398 <move_window>
 800356a:	bb60      	cbnz	r0, 80035c6 <get_fat+0xb2>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800356c:	00a3      	lsls	r3, r4, #2
 800356e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 8003572:	4433      	add	r3, r6
 8003574:	6b98      	ldr	r0, [r3, #56]	@ 0x38
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8003576:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
}
 800357a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800357c:	6ab1      	ldr	r1, [r6, #40]	@ 0x28
 800357e:	4630      	mov	r0, r6
 8003580:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8003584:	f7ff ff08 	bl	8003398 <move_window>
 8003588:	b9e8      	cbnz	r0, 80035c6 <get_fat+0xb2>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800358a:	00a3      	lsls	r3, r4, #2
 800358c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 8003590:	4433      	add	r3, r6
 8003592:	6b98      	ldr	r0, [r3, #56]	@ 0x38
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003594:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
}
 8003598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800359a:	6ab1      	ldr	r1, [r6, #40]	@ 0x28
 800359c:	4630      	mov	r0, r6
 800359e:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80035a2:	f7ff fef9 	bl	8003398 <move_window>
 80035a6:	b970      	cbnz	r0, 80035c6 <get_fat+0xb2>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80035a8:	0063      	lsls	r3, r4, #1
 80035aa:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80035ae:	4433      	add	r3, r6
 80035b0:	8f18      	ldrh	r0, [r3, #56]	@ 0x38
}
 80035b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80035b4:	6ab1      	ldr	r1, [r6, #40]	@ 0x28
			bc = (UINT)clst; bc += bc / 2;
 80035b6:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80035ba:	4630      	mov	r0, r6
 80035bc:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 80035c0:	f7ff feea 	bl	8003398 <move_window>
 80035c4:	b110      	cbz	r0, 80035cc <get_fat+0xb8>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80035c6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80035ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 80035cc:	f3c7 0308 	ubfx	r3, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80035d0:	6ab1      	ldr	r1, [r6, #40]	@ 0x28
			wc = fs->win[bc++ % SS(fs)];
 80035d2:	3701      	adds	r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80035d4:	4630      	mov	r0, r6
			wc = fs->win[bc++ % SS(fs)];
 80035d6:	4433      	add	r3, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80035d8:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 80035dc:	f893 5038 	ldrb.w	r5, [r3, #56]	@ 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80035e0:	f7ff feda 	bl	8003398 <move_window>
 80035e4:	2800      	cmp	r0, #0
 80035e6:	d1ee      	bne.n	80035c6 <get_fat+0xb2>
			wc |= fs->win[bc % SS(fs)] << 8;
 80035e8:	f3c7 0708 	ubfx	r7, r7, #0, #9
 80035ec:	4437      	add	r7, r6
 80035ee:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80035f2:	ea45 2003 	orr.w	r0, r5, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80035f6:	07e3      	lsls	r3, r4, #31
 80035f8:	bf4c      	ite	mi
 80035fa:	0900      	lsrmi	r0, r0, #4
 80035fc:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
 8003600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8003602:	3b01      	subs	r3, #1
 8003604:	f142 32ff 	adc.w	r2, r2, #4294967295
 8003608:	0a5b      	lsrs	r3, r3, #9
 800360a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800360e:	fbb3 f3f7 	udiv	r3, r3, r7
					if (cofs <= clen) {
 8003612:	4299      	cmp	r1, r3
 8003614:	d886      	bhi.n	8003524 <get_fat+0x10>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8003616:	d005      	beq.n	8003624 <get_fat+0x110>
 8003618:	1c60      	adds	r0, r4, #1
}
 800361a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800361c:	6983      	ldr	r3, [r0, #24]
 800361e:	428b      	cmp	r3, r1
 8003620:	d8fa      	bhi.n	8003618 <get_fat+0x104>
 8003622:	e799      	b.n	8003558 <get_fat+0x44>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8003624:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
}
 8003628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800362a:	bf00      	nop

0800362c <dir_next.constprop.0>:
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800362c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 800362e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8003632:	6b05      	ldr	r5, [r0, #48]	@ 0x30
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003634:	2b00      	cmp	r3, #0
 8003636:	d039      	beq.n	80036ac <dir_next.constprop.0+0x80>
	FATFS *fs = dp->obj.fs;
 8003638:	6806      	ldr	r6, [r0, #0]
 800363a:	3520      	adds	r5, #32
 800363c:	4604      	mov	r4, r0
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800363e:	7832      	ldrb	r2, [r6, #0]
 8003640:	2a04      	cmp	r2, #4
 8003642:	bf14      	ite	ne
 8003644:	f44f 1200 	movne.w	r2, #2097152	@ 0x200000
 8003648:	f04f 5280 	moveq.w	r2, #268435456	@ 0x10000000
 800364c:	4295      	cmp	r5, r2
 800364e:	d22d      	bcs.n	80036ac <dir_next.constprop.0+0x80>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003650:	f3c5 0708 	ubfx	r7, r5, #0, #9
 8003654:	b137      	cbz	r7, 8003664 <dir_next.constprop.0+0x38>
				dp->sect = clust2sect(fs, clst);
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003656:	3638      	adds	r6, #56	@ 0x38

	return FR_OK;
 8003658:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 800365a:	6325      	str	r5, [r4, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800365c:	443e      	add	r6, r7
 800365e:	63e6      	str	r6, [r4, #60]	@ 0x3c
}
 8003660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dp->sect++;				/* Next sector */
 8003664:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 8003666:	6b41      	ldr	r1, [r0, #52]	@ 0x34
		dp->sect++;				/* Next sector */
 8003668:	6383      	str	r3, [r0, #56]	@ 0x38
		if (!dp->clust) {		/* Static table */
 800366a:	b1c9      	cbz	r1, 80036a0 <dir_next.constprop.0+0x74>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800366c:	8973      	ldrh	r3, [r6, #10]
 800366e:	3b01      	subs	r3, #1
 8003670:	ea13 2855 	ands.w	r8, r3, r5, lsr #9
 8003674:	d1ef      	bne.n	8003656 <dir_next.constprop.0+0x2a>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003676:	f7ff ff4d 	bl	8003514 <get_fat>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800367a:	2801      	cmp	r0, #1
 800367c:	d918      	bls.n	80036b0 <dir_next.constprop.0+0x84>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800367e:	1c43      	adds	r3, r0, #1
 8003680:	d018      	beq.n	80036b4 <dir_next.constprop.0+0x88>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8003682:	69f3      	ldr	r3, [r6, #28]
 8003684:	4298      	cmp	r0, r3
 8003686:	d20f      	bcs.n	80036a8 <dir_next.constprop.0+0x7c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003688:	3b02      	subs	r3, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 800368a:	6360      	str	r0, [r4, #52]	@ 0x34
	clst -= 2;
 800368c:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800368e:	4298      	cmp	r0, r3
 8003690:	d203      	bcs.n	800369a <dir_next.constprop.0+0x6e>
	return clst * fs->csize + fs->database;
 8003692:	8972      	ldrh	r2, [r6, #10]
 8003694:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8003696:	fb00 3802 	mla	r8, r0, r2, r3
				dp->sect = clust2sect(fs, clst);
 800369a:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
 800369e:	e7da      	b.n	8003656 <dir_next.constprop.0+0x2a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80036a0:	8933      	ldrh	r3, [r6, #8]
 80036a2:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 80036a6:	d8d6      	bhi.n	8003656 <dir_next.constprop.0+0x2a>
				dp->sect = 0; return FR_NO_FILE;
 80036a8:	2300      	movs	r3, #0
 80036aa:	63a3      	str	r3, [r4, #56]	@ 0x38
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80036ac:	2004      	movs	r0, #4
 80036ae:	e7d7      	b.n	8003660 <dir_next.constprop.0+0x34>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80036b0:	2002      	movs	r0, #2
 80036b2:	e7d5      	b.n	8003660 <dir_next.constprop.0+0x34>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80036b4:	2001      	movs	r0, #1
 80036b6:	e7d3      	b.n	8003660 <dir_next.constprop.0+0x34>

080036b8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80036b8:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80036ba:	f04f 36ff 	mov.w	r6, #4294967295
 80036be:	2300      	movs	r3, #0
{
 80036c0:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80036c2:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80036c4:	70c3      	strb	r3, [r0, #3]
 80036c6:	6346      	str	r6, [r0, #52]	@ 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 80036c8:	d14e      	bne.n	8003768 <check_fs+0xb0>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80036ca:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80036ce:	f8b4 2236 	ldrh.w	r2, [r4, #566]	@ 0x236
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d146      	bne.n	8003764 <check_fs+0xac>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80036d6:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80036da:	2be9      	cmp	r3, #233	@ 0xe9
 80036dc:	d032      	beq.n	8003744 <check_fs+0x8c>
 80036de:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80036e0:	4928      	ldr	r1, [pc, #160]	@ (8003784 <check_fs+0xcc>)
 80036e2:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80036e6:	428a      	cmp	r2, r1
 80036e8:	d02c      	beq.n	8003744 <check_fs+0x8c>
	} while (--cnt && r == 0);
 80036ea:	2beb      	cmp	r3, #235	@ 0xeb
 80036ec:	d138      	bne.n	8003760 <check_fs+0xa8>
 80036ee:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 80036f2:	2b76      	cmp	r3, #118	@ 0x76
 80036f4:	d134      	bne.n	8003760 <check_fs+0xa8>
 80036f6:	f894 303a 	ldrb.w	r3, [r4, #58]	@ 0x3a
 80036fa:	2b90      	cmp	r3, #144	@ 0x90
 80036fc:	d130      	bne.n	8003760 <check_fs+0xa8>
 80036fe:	f894 303b 	ldrb.w	r3, [r4, #59]	@ 0x3b
 8003702:	2b45      	cmp	r3, #69	@ 0x45
 8003704:	d12c      	bne.n	8003760 <check_fs+0xa8>
 8003706:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 800370a:	2b58      	cmp	r3, #88	@ 0x58
 800370c:	d128      	bne.n	8003760 <check_fs+0xa8>
 800370e:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8003712:	2b46      	cmp	r3, #70	@ 0x46
 8003714:	d124      	bne.n	8003760 <check_fs+0xa8>
 8003716:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 800371a:	2b41      	cmp	r3, #65	@ 0x41
 800371c:	d120      	bne.n	8003760 <check_fs+0xa8>
 800371e:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8003722:	2b54      	cmp	r3, #84	@ 0x54
 8003724:	d11c      	bne.n	8003760 <check_fs+0xa8>
 8003726:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800372a:	2b20      	cmp	r3, #32
 800372c:	d118      	bne.n	8003760 <check_fs+0xa8>
 800372e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8003732:	2b20      	cmp	r3, #32
 8003734:	d114      	bne.n	8003760 <check_fs+0xa8>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 8003736:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800373a:	2b20      	cmp	r3, #32
 800373c:	bf14      	ite	ne
 800373e:	2002      	movne	r0, #2
 8003740:	2001      	moveq	r0, #1
#endif
	return 2;
}
 8003742:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
 8003744:	f8d4 206e 	ldr.w	r2, [r4, #110]	@ 0x6e
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8003748:	490f      	ldr	r1, [pc, #60]	@ (8003788 <check_fs+0xd0>)
 800374a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800374e:	428a      	cmp	r2, r1
 8003750:	d004      	beq.n	800375c <check_fs+0xa4>
	rv = rv << 8 | ptr[0];
 8003752:	f8d4 108a 	ldr.w	r1, [r4, #138]	@ 0x8a
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8003756:	4a0d      	ldr	r2, [pc, #52]	@ (800378c <check_fs+0xd4>)
 8003758:	4291      	cmp	r1, r2
 800375a:	d1c6      	bne.n	80036ea <check_fs+0x32>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800375c:	2000      	movs	r0, #0
}
 800375e:	bd70      	pop	{r4, r5, r6, pc}
	return 2;
 8003760:	2002      	movs	r0, #2
}
 8003762:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8003764:	2003      	movs	r0, #3
}
 8003766:	bd70      	pop	{r4, r5, r6, pc}
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003768:	460d      	mov	r5, r1
 800376a:	460a      	mov	r2, r1
 800376c:	2301      	movs	r3, #1
 800376e:	f100 0138 	add.w	r1, r0, #56	@ 0x38
 8003772:	7840      	ldrb	r0, [r0, #1]
 8003774:	f7ff fd7a 	bl	800326c <disk_read>
 8003778:	b110      	cbz	r0, 8003780 <check_fs+0xc8>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800377a:	2004      	movs	r0, #4
			fs->winsect = sector;
 800377c:	6366      	str	r6, [r4, #52]	@ 0x34
}
 800377e:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 8003780:	6365      	str	r5, [r4, #52]	@ 0x34
	return res;
 8003782:	e7a2      	b.n	80036ca <check_fs+0x12>
 8003784:	009000eb 	.word	0x009000eb
 8003788:	00544146 	.word	0x00544146
 800378c:	33544146 	.word	0x33544146

08003790 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8003790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8003794:	2300      	movs	r3, #0
	if (*path) {	/* If the pointer is not a null */
 8003796:	6804      	ldr	r4, [r0, #0]
	*rfs = 0;
 8003798:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 800379a:	b18c      	cbz	r4, 80037c0 <find_volume+0x30>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800379c:	7825      	ldrb	r5, [r4, #0]
 800379e:	2d3a      	cmp	r5, #58	@ 0x3a
 80037a0:	d011      	beq.n	80037c6 <find_volume+0x36>
 80037a2:	2d1f      	cmp	r5, #31
 80037a4:	d90f      	bls.n	80037c6 <find_volume+0x36>
 80037a6:	46a4      	mov	ip, r4
 80037a8:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 80037ac:	2b1f      	cmp	r3, #31
 80037ae:	d90c      	bls.n	80037ca <find_volume+0x3a>
 80037b0:	2b3a      	cmp	r3, #58	@ 0x3a
 80037b2:	d1f9      	bne.n	80037a8 <find_volume+0x18>
			i = *tp++ - '0';
 80037b4:	3401      	adds	r4, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80037b6:	45a4      	cmp	ip, r4
 80037b8:	d102      	bne.n	80037c0 <find_volume+0x30>
 80037ba:	2d30      	cmp	r5, #48	@ 0x30
 80037bc:	f000 80ee 	beq.w	800399c <find_volume+0x20c>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 80037c0:	200b      	movs	r0, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 80037c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80037c6:	462b      	mov	r3, r5
 80037c8:	46a4      	mov	ip, r4
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80037ca:	2b3a      	cmp	r3, #58	@ 0x3a
 80037cc:	d0f2      	beq.n	80037b4 <find_volume+0x24>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80037ce:	4b83      	ldr	r3, [pc, #524]	@ (80039dc <find_volume+0x24c>)
 80037d0:	681c      	ldr	r4, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80037d2:	2c00      	cmp	r4, #0
 80037d4:	f000 80ca 	beq.w	800396c <find_volume+0x1dc>
	*rfs = fs;							/* Return pointer to the file system object */
 80037d8:	600c      	str	r4, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80037da:	f002 05fe 	and.w	r5, r2, #254	@ 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 80037de:	7823      	ldrb	r3, [r4, #0]
 80037e0:	b153      	cbz	r3, 80037f8 <find_volume+0x68>
		stat = disk_status(fs->drv);
 80037e2:	7860      	ldrb	r0, [r4, #1]
 80037e4:	f7ff fd1e 	bl	8003224 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80037e8:	07c3      	lsls	r3, r0, #31
 80037ea:	d405      	bmi.n	80037f8 <find_volume+0x68>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80037ec:	b115      	cbz	r5, 80037f4 <find_volume+0x64>
 80037ee:	0747      	lsls	r7, r0, #29
 80037f0:	f100 80b9 	bmi.w	8003966 <find_volume+0x1d6>
			return FR_OK;				/* The file system object is valid */
 80037f4:	2000      	movs	r0, #0
 80037f6:	e091      	b.n	800391c <find_volume+0x18c>
	fs->fs_type = 0;					/* Clear the file system object */
 80037f8:	2000      	movs	r0, #0
 80037fa:	8020      	strh	r0, [r4, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80037fc:	f7ff fd2c 	bl	8003258 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8003800:	07c6      	lsls	r6, r0, #31
 8003802:	f100 808d 	bmi.w	8003920 <find_volume+0x190>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8003806:	b115      	cbz	r5, 800380e <find_volume+0x7e>
 8003808:	0745      	lsls	r5, r0, #29
 800380a:	f100 80ac 	bmi.w	8003966 <find_volume+0x1d6>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800380e:	2100      	movs	r1, #0
 8003810:	4620      	mov	r0, r4
 8003812:	f7ff ff51 	bl	80036b8 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8003816:	2802      	cmp	r0, #2
 8003818:	f000 8085 	beq.w	8003926 <find_volume+0x196>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800381c:	2804      	cmp	r0, #4
 800381e:	f000 80b9 	beq.w	8003994 <find_volume+0x204>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8003822:	2801      	cmp	r0, #1
 8003824:	d879      	bhi.n	800391a <find_volume+0x18a>
 8003826:	2500      	movs	r5, #0
	if (fmt == 1) {
 8003828:	2801      	cmp	r0, #1
 800382a:	d06b      	beq.n	8003904 <find_volume+0x174>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800382c:	f8b4 3043 	ldrh.w	r3, [r4, #67]	@ 0x43
 8003830:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003834:	d171      	bne.n	800391a <find_volume+0x18a>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8003836:	f8b4 104e 	ldrh.w	r1, [r4, #78]	@ 0x4e
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800383a:	2900      	cmp	r1, #0
 800383c:	f000 80b2 	beq.w	80039a4 <find_volume+0x214>
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8003840:	f894 2048 	ldrb.w	r2, [r4, #72]	@ 0x48
		fs->fsize = fasize;
 8003844:	6221      	str	r1, [r4, #32]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8003846:	1e53      	subs	r3, r2, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8003848:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800384a:	2b01      	cmp	r3, #1
 800384c:	d865      	bhi.n	800391a <find_volume+0x18a>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800384e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8003852:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8003854:	2b00      	cmp	r3, #0
 8003856:	d060      	beq.n	800391a <find_volume+0x18a>
 8003858:	1e58      	subs	r0, r3, #1
 800385a:	4218      	tst	r0, r3
 800385c:	d15d      	bne.n	800391a <find_volume+0x18a>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800385e:	f8b4 6049 	ldrh.w	r6, [r4, #73]	@ 0x49
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8003862:	0730      	lsls	r0, r6, #28
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8003864:	8126      	strh	r6, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8003866:	d158      	bne.n	800391a <find_volume+0x18a>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8003868:	f8b4 004b 	ldrh.w	r0, [r4, #75]	@ 0x4b
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800386c:	b900      	cbnz	r0, 8003870 <find_volume+0xe0>
	rv = rv << 8 | ptr[0];
 800386e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8003870:	f8b4 7046 	ldrh.w	r7, [r4, #70]	@ 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8003874:	2f00      	cmp	r7, #0
 8003876:	d050      	beq.n	800391a <find_volume+0x18a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8003878:	fb01 f202 	mul.w	r2, r1, r2
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800387c:	eb07 1c16 	add.w	ip, r7, r6, lsr #4
 8003880:	4494      	add	ip, r2
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8003882:	4560      	cmp	r0, ip
 8003884:	d349      	bcc.n	800391a <find_volume+0x18a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8003886:	eba0 000c 	sub.w	r0, r0, ip
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800388a:	4298      	cmp	r0, r3
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800388c:	fbb0 fef3 	udiv	lr, r0, r3
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003890:	d343      	bcc.n	800391a <find_volume+0x18a>
		fs->database = bsect + sysect;					/* Data start sector */
 8003892:	eb05 000c 	add.w	r0, r5, ip
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8003896:	f64f 7cf5 	movw	ip, #65525	@ 0xfff5
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800389a:	442f      	add	r7, r5
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800389c:	f10e 0302 	add.w	r3, lr, #2
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80038a0:	45e6      	cmp	lr, ip
 80038a2:	f240 8150 	bls.w	8003b46 <find_volume+0x3b6>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80038a6:	f8b4 2062 	ldrh.w	r2, [r4, #98]	@ 0x62
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80038aa:	62a7      	str	r7, [r4, #40]	@ 0x28
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80038ac:	4332      	orrs	r2, r6
		fs->database = bsect + sysect;					/* Data start sector */
 80038ae:	6320      	str	r0, [r4, #48]	@ 0x30
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80038b0:	61e3      	str	r3, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80038b2:	6265      	str	r5, [r4, #36]	@ 0x24
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80038b4:	d131      	bne.n	800391a <find_volume+0x18a>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80038b6:	009b      	lsls	r3, r3, #2
	rv = rv << 8 | ptr[0];
 80038b8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80038ba:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80038be:	62e2      	str	r2, [r4, #44]	@ 0x2c
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80038c0:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 80038c4:	d329      	bcc.n	800391a <find_volume+0x18a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80038c6:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80038ca:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 80038ce:	2180      	movs	r1, #128	@ 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80038d0:	2a01      	cmp	r2, #1
		fs->fsi_flag = 0x80;
 80038d2:	7121      	strb	r1, [r4, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80038d4:	e9c4 3305 	strd	r3, r3, [r4, #20]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80038d8:	f000 8162 	beq.w	8003ba0 <find_volume+0x410>
		fmt = FS_EXFAT;			/* FAT sub-type */
 80038dc:	2003      	movs	r0, #3
	fs->id = ++Fsid;		/* File system mount ID */
 80038de:	4940      	ldr	r1, [pc, #256]	@ (80039e0 <find_volume+0x250>)
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 80038e0:	4b40      	ldr	r3, [pc, #256]	@ (80039e4 <find_volume+0x254>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 80038e2:	4a41      	ldr	r2, [pc, #260]	@ (80039e8 <find_volume+0x258>)
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 80038e4:	6123      	str	r3, [r4, #16]
	fs->id = ++Fsid;		/* File system mount ID */
 80038e6:	880b      	ldrh	r3, [r1, #0]
	fs->fs_type = fmt;		/* FAT sub-type */
 80038e8:	7020      	strb	r0, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80038ea:	3301      	adds	r3, #1
		if (Files[i].fs == fs) Files[i].fs = 0;
 80038ec:	6810      	ldr	r0, [r2, #0]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80038ee:	4d3f      	ldr	r5, [pc, #252]	@ (80039ec <find_volume+0x25c>)
	fs->id = ++Fsid;		/* File system mount ID */
 80038f0:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 80038f2:	4284      	cmp	r4, r0
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80038f4:	60e5      	str	r5, [r4, #12]
	fs->id = ++Fsid;		/* File system mount ID */
 80038f6:	800b      	strh	r3, [r1, #0]
 80038f8:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 80038fa:	f47f af7b 	bne.w	80037f4 <find_volume+0x64>
 80038fe:	2300      	movs	r3, #0
 8003900:	6013      	str	r3, [r2, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003902:	e777      	b.n	80037f4 <find_volume+0x64>
 8003904:	f104 0242 	add.w	r2, r4, #66	@ 0x42
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8003908:	230b      	movs	r3, #11
 800390a:	e001      	b.n	8003910 <find_volume+0x180>
 800390c:	2b40      	cmp	r3, #64	@ 0x40
 800390e:	d06f      	beq.n	80039f0 <find_volume+0x260>
 8003910:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8003914:	3301      	adds	r3, #1
 8003916:	2900      	cmp	r1, #0
 8003918:	d0f8      	beq.n	800390c <find_volume+0x17c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800391a:	200d      	movs	r0, #13
}
 800391c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8003920:	2003      	movs	r0, #3
}
 8003922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8003926:	f894 61fa 	ldrb.w	r6, [r4, #506]	@ 0x1fa
 800392a:	b10e      	cbz	r6, 8003930 <find_volume+0x1a0>
	rv = rv << 8 | ptr[0];
 800392c:	f8d4 61fe 	ldr.w	r6, [r4, #510]	@ 0x1fe
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8003930:	f894 720a 	ldrb.w	r7, [r4, #522]	@ 0x20a
 8003934:	b10f      	cbz	r7, 800393a <find_volume+0x1aa>
	rv = rv << 8 | ptr[0];
 8003936:	f8d4 720e 	ldr.w	r7, [r4, #526]	@ 0x20e
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800393a:	f894 321a 	ldrb.w	r3, [r4, #538]	@ 0x21a
 800393e:	b35b      	cbz	r3, 8003998 <find_volume+0x208>
	rv = rv << 8 | ptr[0];
 8003940:	f8d4 821e 	ldr.w	r8, [r4, #542]	@ 0x21e
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8003944:	f894 522a 	ldrb.w	r5, [r4, #554]	@ 0x22a
 8003948:	b995      	cbnz	r5, 8003970 <find_volume+0x1e0>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800394a:	bbb6      	cbnz	r6, 80039ba <find_volume+0x22a>
 800394c:	2f00      	cmp	r7, #0
 800394e:	d13c      	bne.n	80039ca <find_volume+0x23a>
 8003950:	f1b8 0f00 	cmp.w	r8, #0
 8003954:	d0e1      	beq.n	800391a <find_volume+0x18a>
 8003956:	4641      	mov	r1, r8
 8003958:	4620      	mov	r0, r4
 800395a:	f7ff fead 	bl	80036b8 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800395e:	2801      	cmp	r0, #1
 8003960:	d8db      	bhi.n	800391a <find_volume+0x18a>
			bsect = br[i];
 8003962:	4645      	mov	r5, r8
 8003964:	e760      	b.n	8003828 <find_volume+0x98>
				return FR_WRITE_PROTECTED;
 8003966:	200a      	movs	r0, #10
}
 8003968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800396c:	200c      	movs	r0, #12
 800396e:	e7d5      	b.n	800391c <find_volume+0x18c>
	rv = rv << 8 | ptr[0];
 8003970:	f8d4 522e 	ldr.w	r5, [r4, #558]	@ 0x22e
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8003974:	bb0e      	cbnz	r6, 80039ba <find_volume+0x22a>
 8003976:	bb4f      	cbnz	r7, 80039cc <find_volume+0x23c>
 8003978:	f1b8 0f00 	cmp.w	r8, #0
 800397c:	d114      	bne.n	80039a8 <find_volume+0x218>
 800397e:	2d00      	cmp	r5, #0
 8003980:	d0cb      	beq.n	800391a <find_volume+0x18a>
 8003982:	4629      	mov	r1, r5
 8003984:	4620      	mov	r0, r4
 8003986:	f7ff fe97 	bl	80036b8 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800398a:	2801      	cmp	r0, #1
 800398c:	f67f af4c 	bls.w	8003828 <find_volume+0x98>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8003990:	2804      	cmp	r0, #4
 8003992:	d1c2      	bne.n	800391a <find_volume+0x18a>
 8003994:	2001      	movs	r0, #1
 8003996:	e7c1      	b.n	800391c <find_volume+0x18c>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8003998:	4698      	mov	r8, r3
 800399a:	e7d3      	b.n	8003944 <find_volume+0x1b4>
					*path = ++tt;
 800399c:	f10c 0301 	add.w	r3, ip, #1
 80039a0:	6003      	str	r3, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
 80039a2:	e714      	b.n	80037ce <find_volume+0x3e>
	rv = rv << 8 | ptr[0];
 80039a4:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
	return rv;
 80039a6:	e74b      	b.n	8003840 <find_volume+0xb0>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80039a8:	4641      	mov	r1, r8
 80039aa:	4620      	mov	r0, r4
 80039ac:	f7ff fe84 	bl	80036b8 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80039b0:	2801      	cmp	r0, #1
 80039b2:	d9d6      	bls.n	8003962 <find_volume+0x1d2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80039b4:	2d00      	cmp	r5, #0
 80039b6:	d1e4      	bne.n	8003982 <find_volume+0x1f2>
 80039b8:	e7af      	b.n	800391a <find_volume+0x18a>
 80039ba:	4631      	mov	r1, r6
 80039bc:	4620      	mov	r0, r4
 80039be:	f7ff fe7b 	bl	80036b8 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80039c2:	2801      	cmp	r0, #1
 80039c4:	d8d7      	bhi.n	8003976 <find_volume+0x1e6>
			bsect = br[i];
 80039c6:	4635      	mov	r5, r6
 80039c8:	e72e      	b.n	8003828 <find_volume+0x98>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80039ca:	4635      	mov	r5, r6
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80039cc:	4639      	mov	r1, r7
 80039ce:	4620      	mov	r0, r4
 80039d0:	f7ff fe72 	bl	80036b8 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80039d4:	2801      	cmp	r0, #1
 80039d6:	d8cf      	bhi.n	8003978 <find_volume+0x1e8>
			bsect = br[i];
 80039d8:	463d      	mov	r5, r7
 80039da:	e725      	b.n	8003828 <find_volume+0x98>
 80039dc:	20006f98 	.word	0x20006f98
 80039e0:	20006f94 	.word	0x20006f94
 80039e4:	20006d24 	.word	0x20006d24
 80039e8:	20006f84 	.word	0x20006f84
 80039ec:	20006b24 	.word	0x20006b24
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 80039f0:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	@ 0xa0
 80039f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039f8:	d18f      	bne.n	800391a <find_volume+0x18a>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 80039fa:	f894 30a4 	ldrb.w	r3, [r4, #164]	@ 0xa4
 80039fe:	2b09      	cmp	r3, #9
 8003a00:	d18b      	bne.n	800391a <find_volume+0x18a>
	rv = rv << 8 | ptr[0];
 8003a02:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8003a06:	f04f 32ff 	mov.w	r2, #4294967295
	rv = rv << 8 | ptr[0];
 8003a0a:	f8d4 c084 	ldr.w	ip, [r4, #132]	@ 0x84
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 8003a0e:	195b      	adds	r3, r3, r5
 8003a10:	f14c 0c00 	adc.w	ip, ip, #0
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8003a14:	429a      	cmp	r2, r3
 8003a16:	eb71 020c 	sbcs.w	r2, r1, ip
 8003a1a:	f4ff af7e 	bcc.w	800391a <find_volume+0x18a>
	rv = rv << 8 | ptr[0];
 8003a1e:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 8003a22:	6222      	str	r2, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8003a24:	f894 20a6 	ldrb.w	r2, [r4, #166]	@ 0xa6
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8003a28:	2a01      	cmp	r2, #1
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8003a2a:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8003a2c:	f47f af75 	bne.w	800391a <find_volume+0x18a>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8003a30:	f894 00a5 	ldrb.w	r0, [r4, #165]	@ 0xa5
 8003a34:	4082      	lsls	r2, r0
 8003a36:	b290      	uxth	r0, r2
 8003a38:	8160      	strh	r0, [r4, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8003a3a:	2800      	cmp	r0, #0
 8003a3c:	f43f af6d 	beq.w	800391a <find_volume+0x18a>
	rv = rv << 8 | ptr[0];
 8003a40:	f8d4 7094 	ldr.w	r7, [r4, #148]	@ 0x94
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8003a44:	4891      	ldr	r0, [pc, #580]	@ (8003c8c <find_volume+0x4fc>)
 8003a46:	4287      	cmp	r7, r0
 8003a48:	f63f af67 	bhi.w	800391a <find_volume+0x18a>
	rv = rv << 8 | ptr[0];
 8003a4c:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8003a50:	b292      	uxth	r2, r2
	rv = rv << 8 | ptr[0];
 8003a52:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8003a56:	4428      	add	r0, r5
		fs->volbase = bsect;
 8003a58:	6265      	str	r5, [r4, #36]	@ 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8003a5a:	442e      	add	r6, r5
		fs->n_fatent = nclst + 2;
 8003a5c:	1cbd      	adds	r5, r7, #2
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8003a5e:	62a0      	str	r0, [r4, #40]	@ 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8003a60:	fb07 f002 	mul.w	r0, r7, r2
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8003a64:	6326      	str	r6, [r4, #48]	@ 0x30
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8003a66:	1980      	adds	r0, r0, r6
		fs->n_fatent = nclst + 2;
 8003a68:	61e5      	str	r5, [r4, #28]
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8003a6a:	4149      	adcs	r1, r1
 8003a6c:	4283      	cmp	r3, r0
 8003a6e:	eb7c 0101 	sbcs.w	r1, ip, r1
 8003a72:	f4ff af52 	bcc.w	800391a <find_volume+0x18a>
	rv = rv << 8 | ptr[0];
 8003a76:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 8003a7a:	4620      	mov	r0, r4
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8003a7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
	clst -= 2;
 8003a7e:	3b02      	subs	r3, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003a80:	429f      	cmp	r7, r3
	return clst * fs->csize + fs->database;
 8003a82:	bf8c      	ite	hi
 8003a84:	fb03 6102 	mlahi	r1, r3, r2, r6
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003a88:	2100      	movls	r1, #0
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 8003a8a:	f7ff fc85 	bl	8003398 <move_window>
 8003a8e:	2800      	cmp	r0, #0
 8003a90:	d180      	bne.n	8003994 <find_volume+0x204>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8003a92:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8003a96:	2b81      	cmp	r3, #129	@ 0x81
 8003a98:	f000 80aa 	beq.w	8003bf0 <find_volume+0x460>
 8003a9c:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
 8003aa0:	2b81      	cmp	r3, #129	@ 0x81
 8003aa2:	f000 80a0 	beq.w	8003be6 <find_volume+0x456>
 8003aa6:	f894 3078 	ldrb.w	r3, [r4, #120]	@ 0x78
 8003aaa:	2b81      	cmp	r3, #129	@ 0x81
 8003aac:	f000 80b7 	beq.w	8003c1e <find_volume+0x48e>
 8003ab0:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 8003ab4:	2b81      	cmp	r3, #129	@ 0x81
 8003ab6:	f000 80ac 	beq.w	8003c12 <find_volume+0x482>
 8003aba:	f894 30b8 	ldrb.w	r3, [r4, #184]	@ 0xb8
 8003abe:	2b81      	cmp	r3, #129	@ 0x81
 8003ac0:	f000 80a1 	beq.w	8003c06 <find_volume+0x476>
 8003ac4:	f894 30d8 	ldrb.w	r3, [r4, #216]	@ 0xd8
 8003ac8:	2b81      	cmp	r3, #129	@ 0x81
 8003aca:	f000 8096 	beq.w	8003bfa <find_volume+0x46a>
 8003ace:	f894 30f8 	ldrb.w	r3, [r4, #248]	@ 0xf8
 8003ad2:	2b81      	cmp	r3, #129	@ 0x81
 8003ad4:	f000 80d3 	beq.w	8003c7e <find_volume+0x4ee>
 8003ad8:	f894 3118 	ldrb.w	r3, [r4, #280]	@ 0x118
 8003adc:	2b81      	cmp	r3, #129	@ 0x81
 8003ade:	f000 80c8 	beq.w	8003c72 <find_volume+0x4e2>
 8003ae2:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 8003ae6:	2b81      	cmp	r3, #129	@ 0x81
 8003ae8:	f000 80bd 	beq.w	8003c66 <find_volume+0x4d6>
 8003aec:	f894 3158 	ldrb.w	r3, [r4, #344]	@ 0x158
 8003af0:	2b81      	cmp	r3, #129	@ 0x81
 8003af2:	f000 80b2 	beq.w	8003c5a <find_volume+0x4ca>
 8003af6:	f894 3178 	ldrb.w	r3, [r4, #376]	@ 0x178
 8003afa:	2b81      	cmp	r3, #129	@ 0x81
 8003afc:	f000 80a7 	beq.w	8003c4e <find_volume+0x4be>
 8003b00:	f894 3198 	ldrb.w	r3, [r4, #408]	@ 0x198
 8003b04:	2b81      	cmp	r3, #129	@ 0x81
 8003b06:	f000 809c 	beq.w	8003c42 <find_volume+0x4b2>
 8003b0a:	f894 31b8 	ldrb.w	r3, [r4, #440]	@ 0x1b8
 8003b0e:	2b81      	cmp	r3, #129	@ 0x81
 8003b10:	f000 8091 	beq.w	8003c36 <find_volume+0x4a6>
 8003b14:	f894 31d8 	ldrb.w	r3, [r4, #472]	@ 0x1d8
 8003b18:	2b81      	cmp	r3, #129	@ 0x81
 8003b1a:	f000 8086 	beq.w	8003c2a <find_volume+0x49a>
 8003b1e:	f894 31f8 	ldrb.w	r3, [r4, #504]	@ 0x1f8
 8003b22:	2b81      	cmp	r3, #129	@ 0x81
 8003b24:	d037      	beq.n	8003b96 <find_volume+0x406>
 8003b26:	f894 3218 	ldrb.w	r3, [r4, #536]	@ 0x218
 8003b2a:	2b81      	cmp	r3, #129	@ 0x81
 8003b2c:	f47f aef5 	bne.w	800391a <find_volume+0x18a>
	rv = rv << 8 | ptr[0];
 8003b30:	f8d4 322c 	ldr.w	r3, [r4, #556]	@ 0x22c
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	f47f aef0 	bne.w	800391a <find_volume+0x18a>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8003b3a:	f04f 33ff 	mov.w	r3, #4294967295
		fmt = FS_EXFAT;			/* FAT sub-type */
 8003b3e:	2004      	movs	r0, #4
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8003b40:	e9c4 3305 	strd	r3, r3, [r4, #20]
		fmt = FS_EXFAT;			/* FAT sub-type */
 8003b44:	e6cb      	b.n	80038de <find_volume+0x14e>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8003b46:	f640 7cf5 	movw	ip, #4085	@ 0xff5
		fs->volbase = bsect;							/* Volume start sector */
 8003b4a:	6265      	str	r5, [r4, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8003b4c:	6320      	str	r0, [r4, #48]	@ 0x30
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8003b4e:	45e6      	cmp	lr, ip
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8003b50:	61e3      	str	r3, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8003b52:	62a7      	str	r7, [r4, #40]	@ 0x28
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8003b54:	d818      	bhi.n	8003b88 <find_volume+0x3f8>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8003b56:	2e00      	cmp	r6, #0
 8003b58:	f43f aedf 	beq.w	800391a <find_volume+0x18a>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003b5c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8003b60:	f003 0301 	and.w	r3, r3, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8003b64:	443a      	add	r2, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003b66:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8003b6a:	2001      	movs	r0, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8003b6c:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8003b70:	62e2      	str	r2, [r4, #44]	@ 0x2c
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8003b72:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 8003b76:	f4ff aed0 	bcc.w	800391a <find_volume+0x18a>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8003b7a:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 8003b7e:	2280      	movs	r2, #128	@ 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8003b80:	e9c4 3305 	strd	r3, r3, [r4, #20]
		fs->fsi_flag = 0x80;
 8003b84:	7122      	strb	r2, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8003b86:	e6aa      	b.n	80038de <find_volume+0x14e>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8003b88:	2e00      	cmp	r6, #0
 8003b8a:	f43f aec6 	beq.w	800391a <find_volume+0x18a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8003b8e:	443a      	add	r2, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	2002      	movs	r0, #2
 8003b94:	e7ea      	b.n	8003b6c <find_volume+0x3dc>
	rv = rv << 8 | ptr[0];
 8003b96:	f8d4 320c 	ldr.w	r3, [r4, #524]	@ 0x20c
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d1c3      	bne.n	8003b26 <find_volume+0x396>
 8003b9e:	e7cc      	b.n	8003b3a <find_volume+0x3aa>
			&& move_window(fs, bsect + 1) == FR_OK)
 8003ba0:	1c69      	adds	r1, r5, #1
 8003ba2:	4620      	mov	r0, r4
 8003ba4:	f7ff fbf8 	bl	8003398 <move_window>
 8003ba8:	2800      	cmp	r0, #0
 8003baa:	f47f ae97 	bne.w	80038dc <find_volume+0x14c>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8003bae:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8003bb2:	f8b4 1236 	ldrh.w	r1, [r4, #566]	@ 0x236
			fs->fsi_flag = 0;
 8003bb6:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8003bb8:	4291      	cmp	r1, r2
 8003bba:	f47f ae8f 	bne.w	80038dc <find_volume+0x14c>
	rv = rv << 8 | ptr[0];
 8003bbe:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8003bc0:	4b33      	ldr	r3, [pc, #204]	@ (8003c90 <find_volume+0x500>)
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	f47f ae8a 	bne.w	80038dc <find_volume+0x14c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8003bc8:	f103 53ff 	add.w	r3, r3, #534773760	@ 0x1fe00000
	rv = rv << 8 | ptr[0];
 8003bcc:	f8d4 221c 	ldr.w	r2, [r4, #540]	@ 0x21c
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8003bd0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003bd4:	3320      	adds	r3, #32
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	f47f ae80 	bne.w	80038dc <find_volume+0x14c>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8003bdc:	e9d4 2388 	ldrd	r2, r3, [r4, #544]	@ 0x220
 8003be0:	e9c4 3205 	strd	r3, r2, [r4, #20]
 8003be4:	e67a      	b.n	80038dc <find_volume+0x14c>
	rv = rv << 8 | ptr[0];
 8003be6:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	f47f af5c 	bne.w	8003aa6 <find_volume+0x316>
 8003bee:	e7a4      	b.n	8003b3a <find_volume+0x3aa>
	rv = rv << 8 | ptr[0];
 8003bf0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	f47f af52 	bne.w	8003a9c <find_volume+0x30c>
 8003bf8:	e79f      	b.n	8003b3a <find_volume+0x3aa>
	rv = rv << 8 | ptr[0];
 8003bfa:	f8d4 30ec 	ldr.w	r3, [r4, #236]	@ 0xec
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	f47f af65 	bne.w	8003ace <find_volume+0x33e>
 8003c04:	e799      	b.n	8003b3a <find_volume+0x3aa>
	rv = rv << 8 | ptr[0];
 8003c06:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	f47f af5a 	bne.w	8003ac4 <find_volume+0x334>
 8003c10:	e793      	b.n	8003b3a <find_volume+0x3aa>
	rv = rv << 8 | ptr[0];
 8003c12:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	f47f af4f 	bne.w	8003aba <find_volume+0x32a>
 8003c1c:	e78d      	b.n	8003b3a <find_volume+0x3aa>
	rv = rv << 8 | ptr[0];
 8003c1e:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	f47f af44 	bne.w	8003ab0 <find_volume+0x320>
 8003c28:	e787      	b.n	8003b3a <find_volume+0x3aa>
	rv = rv << 8 | ptr[0];
 8003c2a:	f8d4 31ec 	ldr.w	r3, [r4, #492]	@ 0x1ec
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	f47f af75 	bne.w	8003b1e <find_volume+0x38e>
 8003c34:	e781      	b.n	8003b3a <find_volume+0x3aa>
	rv = rv << 8 | ptr[0];
 8003c36:	f8d4 31cc 	ldr.w	r3, [r4, #460]	@ 0x1cc
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	f47f af6a 	bne.w	8003b14 <find_volume+0x384>
 8003c40:	e77b      	b.n	8003b3a <find_volume+0x3aa>
	rv = rv << 8 | ptr[0];
 8003c42:	f8d4 31ac 	ldr.w	r3, [r4, #428]	@ 0x1ac
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	f47f af5f 	bne.w	8003b0a <find_volume+0x37a>
 8003c4c:	e775      	b.n	8003b3a <find_volume+0x3aa>
	rv = rv << 8 | ptr[0];
 8003c4e:	f8d4 318c 	ldr.w	r3, [r4, #396]	@ 0x18c
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	f47f af54 	bne.w	8003b00 <find_volume+0x370>
 8003c58:	e76f      	b.n	8003b3a <find_volume+0x3aa>
	rv = rv << 8 | ptr[0];
 8003c5a:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	f47f af49 	bne.w	8003af6 <find_volume+0x366>
 8003c64:	e769      	b.n	8003b3a <find_volume+0x3aa>
	rv = rv << 8 | ptr[0];
 8003c66:	f8d4 314c 	ldr.w	r3, [r4, #332]	@ 0x14c
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	f47f af3e 	bne.w	8003aec <find_volume+0x35c>
 8003c70:	e763      	b.n	8003b3a <find_volume+0x3aa>
	rv = rv << 8 | ptr[0];
 8003c72:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	f47f af33 	bne.w	8003ae2 <find_volume+0x352>
 8003c7c:	e75d      	b.n	8003b3a <find_volume+0x3aa>
	rv = rv << 8 | ptr[0];
 8003c7e:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	f47f af28 	bne.w	8003ad8 <find_volume+0x348>
 8003c88:	e757      	b.n	8003b3a <find_volume+0x3aa>
 8003c8a:	bf00      	nop
 8003c8c:	7ffffffd 	.word	0x7ffffffd
 8003c90:	41615252 	.word	0x41615252

08003c94 <load_xdir>:
{
 8003c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8003c98:	6805      	ldr	r5, [r0, #0]
{
 8003c9a:	4604      	mov	r4, r0
	res = move_window(dp->obj.fs, dp->sect);
 8003c9c:	f8d0 8038 	ldr.w	r8, [r0, #56]	@ 0x38
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003ca0:	6b6f      	ldr	r7, [r5, #52]	@ 0x34
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8003ca2:	692e      	ldr	r6, [r5, #16]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003ca4:	45b8      	cmp	r8, r7
 8003ca6:	f040 8085 	bne.w	8003db4 <load_xdir+0x120>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 8003caa:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003cac:	781a      	ldrb	r2, [r3, #0]
 8003cae:	2a85      	cmp	r2, #133	@ 0x85
 8003cb0:	d002      	beq.n	8003cb8 <load_xdir+0x24>
 8003cb2:	2002      	movs	r0, #2
}
 8003cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cb8:	1c5a      	adds	r2, r3, #1
 8003cba:	1ab1      	subs	r1, r6, r2
 8003cbc:	2902      	cmp	r1, #2
 8003cbe:	f240 80ae 	bls.w	8003e1e <load_xdir+0x18a>
			*d++ = *s++;
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	6032      	str	r2, [r6, #0]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	6072      	str	r2, [r6, #4]
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	60b2      	str	r2, [r6, #8]
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	60f2      	str	r2, [r6, #12]
 8003cd2:	691a      	ldr	r2, [r3, #16]
 8003cd4:	6132      	str	r2, [r6, #16]
 8003cd6:	695a      	ldr	r2, [r3, #20]
 8003cd8:	6172      	str	r2, [r6, #20]
 8003cda:	699a      	ldr	r2, [r3, #24]
 8003cdc:	61b2      	str	r2, [r6, #24]
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	61f3      	str	r3, [r6, #28]
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 8003ce2:	7873      	ldrb	r3, [r6, #1]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	015d      	lsls	r5, r3, #5
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 8003ce8:	f1a5 0260 	sub.w	r2, r5, #96	@ 0x60
 8003cec:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8003cf0:	d8df      	bhi.n	8003cb2 <load_xdir+0x1e>
	res = dir_next(dp, 0);
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	f7ff fc9a 	bl	800362c <dir_next.constprop.0>
	if (res != FR_OK) return res;
 8003cf8:	2800      	cmp	r0, #0
 8003cfa:	d1db      	bne.n	8003cb4 <load_xdir+0x20>
	res = move_window(dp->obj.fs, dp->sect);
 8003cfc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8003cfe:	6820      	ldr	r0, [r4, #0]
 8003d00:	f7ff fb4a 	bl	8003398 <move_window>
	if (res != FR_OK) return res;
 8003d04:	2800      	cmp	r0, #0
 8003d06:	d1d5      	bne.n	8003cb4 <load_xdir+0x20>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8003d08:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003d0a:	7813      	ldrb	r3, [r2, #0]
 8003d0c:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d0e:	d1d0      	bne.n	8003cb2 <load_xdir+0x1e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 8003d10:	f106 0120 	add.w	r1, r6, #32
 8003d14:	1c53      	adds	r3, r2, #1
 8003d16:	1ac9      	subs	r1, r1, r3
 8003d18:	2902      	cmp	r1, #2
 8003d1a:	f240 8096 	bls.w	8003e4a <load_xdir+0x1b6>
			*d++ = *s++;
 8003d1e:	6813      	ldr	r3, [r2, #0]
 8003d20:	6233      	str	r3, [r6, #32]
 8003d22:	6853      	ldr	r3, [r2, #4]
 8003d24:	6273      	str	r3, [r6, #36]	@ 0x24
 8003d26:	6893      	ldr	r3, [r2, #8]
 8003d28:	62b3      	str	r3, [r6, #40]	@ 0x28
 8003d2a:	68d3      	ldr	r3, [r2, #12]
 8003d2c:	62f3      	str	r3, [r6, #44]	@ 0x2c
 8003d2e:	6913      	ldr	r3, [r2, #16]
 8003d30:	6333      	str	r3, [r6, #48]	@ 0x30
 8003d32:	6953      	ldr	r3, [r2, #20]
 8003d34:	6373      	str	r3, [r6, #52]	@ 0x34
 8003d36:	6993      	ldr	r3, [r2, #24]
 8003d38:	63b3      	str	r3, [r6, #56]	@ 0x38
 8003d3a:	69d3      	ldr	r3, [r2, #28]
 8003d3c:	63f3      	str	r3, [r6, #60]	@ 0x3c
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8003d3e:	f896 3023 	ldrb.w	r3, [r6, #35]	@ 0x23
 8003d42:	4a5b      	ldr	r2, [pc, #364]	@ (8003eb0 <load_xdir+0x21c>)
 8003d44:	332c      	adds	r3, #44	@ 0x2c
 8003d46:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4a:	08db      	lsrs	r3, r3, #3
 8003d4c:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
 8003d50:	d3af      	bcc.n	8003cb2 <load_xdir+0x1e>
		res = dir_next(dp, 0);
 8003d52:	4620      	mov	r0, r4
 8003d54:	f106 0740 	add.w	r7, r6, #64	@ 0x40
 8003d58:	4435      	add	r5, r6
 8003d5a:	f7ff fc67 	bl	800362c <dir_next.constprop.0>
		if (res != FR_OK) return res;
 8003d5e:	2800      	cmp	r0, #0
 8003d60:	d1a8      	bne.n	8003cb4 <load_xdir+0x20>
		res = move_window(dp->obj.fs, dp->sect);
 8003d62:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8003d64:	6820      	ldr	r0, [r4, #0]
 8003d66:	f7ff fb17 	bl	8003398 <move_window>
		if (res != FR_OK) return res;
 8003d6a:	2800      	cmp	r0, #0
 8003d6c:	d1a2      	bne.n	8003cb4 <load_xdir+0x20>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 8003d6e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003d70:	781a      	ldrb	r2, [r3, #0]
 8003d72:	2ac1      	cmp	r2, #193	@ 0xc1
 8003d74:	d19d      	bne.n	8003cb2 <load_xdir+0x1e>
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003d76:	1c5a      	adds	r2, r3, #1
 8003d78:	1ab9      	subs	r1, r7, r2
 8003d7a:	2902      	cmp	r1, #2
 8003d7c:	d95a      	bls.n	8003e34 <load_xdir+0x1a0>
			*d++ = *s++;
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	603a      	str	r2, [r7, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	607a      	str	r2, [r7, #4]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	60ba      	str	r2, [r7, #8]
 8003d8a:	68da      	ldr	r2, [r3, #12]
 8003d8c:	60fa      	str	r2, [r7, #12]
 8003d8e:	691a      	ldr	r2, [r3, #16]
 8003d90:	613a      	str	r2, [r7, #16]
 8003d92:	695a      	ldr	r2, [r3, #20]
 8003d94:	617a      	str	r2, [r7, #20]
 8003d96:	699a      	ldr	r2, [r3, #24]
 8003d98:	61ba      	str	r2, [r7, #24]
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	61fb      	str	r3, [r7, #28]
	} while ((i += SZDIRE) < sz_ent);
 8003d9e:	f107 0320 	add.w	r3, r7, #32
 8003da2:	429d      	cmp	r5, r3
 8003da4:	d05d      	beq.n	8003e62 <load_xdir+0x1ce>
		res = dir_next(dp, 0);
 8003da6:	4620      	mov	r0, r4
 8003da8:	461f      	mov	r7, r3
 8003daa:	f7ff fc3f 	bl	800362c <dir_next.constprop.0>
		if (res != FR_OK) return res;
 8003dae:	2800      	cmp	r0, #0
 8003db0:	d0d7      	beq.n	8003d62 <load_xdir+0xce>
 8003db2:	e77f      	b.n	8003cb4 <load_xdir+0x20>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003db4:	78eb      	ldrb	r3, [r5, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003db6:	f105 0938 	add.w	r9, r5, #56	@ 0x38
 8003dba:	7868      	ldrb	r0, [r5, #1]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003dbc:	b953      	cbnz	r3, 8003dd4 <load_xdir+0x140>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003dbe:	4649      	mov	r1, r9
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	4642      	mov	r2, r8
 8003dc4:	f7ff fa52 	bl	800326c <disk_read>
 8003dc8:	b330      	cbz	r0, 8003e18 <load_xdir+0x184>
			fs->winsect = sector;
 8003dca:	f04f 33ff 	mov.w	r3, #4294967295
 8003dce:	636b      	str	r3, [r5, #52]	@ 0x34
	for (i = sum = 0; i < szblk; i++) {
 8003dd0:	2001      	movs	r0, #1
 8003dd2:	e76f      	b.n	8003cb4 <load_xdir+0x20>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	463a      	mov	r2, r7
 8003dd8:	4649      	mov	r1, r9
 8003dda:	f7ff fa63 	bl	80032a4 <disk_write>
 8003dde:	2800      	cmp	r0, #0
 8003de0:	d1f6      	bne.n	8003dd0 <load_xdir+0x13c>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003de2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
			fs->wflag = 0;
 8003de4:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003de6:	1afa      	subs	r2, r7, r3
 8003de8:	6a2b      	ldr	r3, [r5, #32]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d212      	bcs.n	8003e14 <load_xdir+0x180>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003dee:	f895 a002 	ldrb.w	sl, [r5, #2]
 8003df2:	f1ba 0f01 	cmp.w	sl, #1
 8003df6:	d801      	bhi.n	8003dfc <load_xdir+0x168>
 8003df8:	e00c      	b.n	8003e14 <load_xdir+0x180>
					wsect += fs->fsize;
 8003dfa:	6a2b      	ldr	r3, [r5, #32]
 8003dfc:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003dfe:	f10a 3aff 	add.w	sl, sl, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8003e02:	2301      	movs	r3, #1
 8003e04:	4649      	mov	r1, r9
 8003e06:	463a      	mov	r2, r7
 8003e08:	7868      	ldrb	r0, [r5, #1]
 8003e0a:	f7ff fa4b 	bl	80032a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003e0e:	f1ba 0f01 	cmp.w	sl, #1
 8003e12:	d1f2      	bne.n	8003dfa <load_xdir+0x166>
 8003e14:	7868      	ldrb	r0, [r5, #1]
 8003e16:	e7d2      	b.n	8003dbe <load_xdir+0x12a>
			fs->winsect = sector;
 8003e18:	f8c5 8034 	str.w	r8, [r5, #52]	@ 0x34
	if (res != FR_OK) return res;
 8003e1c:	e745      	b.n	8003caa <load_xdir+0x16>
 8003e1e:	1e71      	subs	r1, r6, #1
 8003e20:	3320      	adds	r3, #32
			*d++ = *s++;
 8003e22:	f812 0c01 	ldrb.w	r0, [r2, #-1]
		} while (--cnt);
 8003e26:	429a      	cmp	r2, r3
 8003e28:	f102 0201 	add.w	r2, r2, #1
			*d++ = *s++;
 8003e2c:	f801 0f01 	strb.w	r0, [r1, #1]!
		} while (--cnt);
 8003e30:	d1f7      	bne.n	8003e22 <load_xdir+0x18e>
 8003e32:	e756      	b.n	8003ce2 <load_xdir+0x4e>
 8003e34:	3320      	adds	r3, #32
 8003e36:	1e79      	subs	r1, r7, #1
			*d++ = *s++;
 8003e38:	f812 cc01 	ldrb.w	ip, [r2, #-1]
		} while (--cnt);
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	f102 0201 	add.w	r2, r2, #1
			*d++ = *s++;
 8003e42:	f801 cf01 	strb.w	ip, [r1, #1]!
		} while (--cnt);
 8003e46:	d1f7      	bne.n	8003e38 <load_xdir+0x1a4>
 8003e48:	e7a9      	b.n	8003d9e <load_xdir+0x10a>
 8003e4a:	3220      	adds	r2, #32
 8003e4c:	f106 011f 	add.w	r1, r6, #31
			*d++ = *s++;
 8003e50:	f813 0c01 	ldrb.w	r0, [r3, #-1]
		} while (--cnt);
 8003e54:	4293      	cmp	r3, r2
 8003e56:	f103 0301 	add.w	r3, r3, #1
			*d++ = *s++;
 8003e5a:	f801 0f01 	strb.w	r0, [r1, #1]!
		} while (--cnt);
 8003e5e:	d1f7      	bne.n	8003e50 <load_xdir+0x1bc>
 8003e60:	e76d      	b.n	8003d3e <load_xdir+0xaa>
	} while ((i += SZDIRE) < sz_ent);
 8003e62:	f1c6 0320 	rsb	r3, r6, #32
 8003e66:	443b      	add	r3, r7
	if (i <= MAXDIRB(_MAX_LFN)) {
 8003e68:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8003e6c:	f63f af22 	bhi.w	8003cb4 <load_xdir+0x20>
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 8003e70:	7870      	ldrb	r0, [r6, #1]
	for (i = sum = 0; i < szblk; i++) {
 8003e72:	2300      	movs	r3, #0
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 8003e74:	3001      	adds	r0, #1
	for (i = sum = 0; i < szblk; i++) {
 8003e76:	461a      	mov	r2, r3
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 8003e78:	0140      	lsls	r0, r0, #5
		if (i == XDIR_SetSum) {	/* Skip sum field */
 8003e7a:	2a02      	cmp	r2, #2
 8003e7c:	d107      	bne.n	8003e8e <load_xdir+0x1fa>
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8003e7e:	7931      	ldrb	r1, [r6, #4]
	for (i = sum = 0; i < szblk; i++) {
 8003e80:	2205      	movs	r2, #5
 8003e82:	eb01 31c3 	add.w	r1, r1, r3, lsl #15
 8003e86:	b289      	uxth	r1, r1
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8003e88:	eb01 0353 	add.w	r3, r1, r3, lsr #1
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	5cb1      	ldrb	r1, [r6, r2]
	for (i = sum = 0; i < szblk; i++) {
 8003e90:	3201      	adds	r2, #1
 8003e92:	eb01 31c3 	add.w	r1, r1, r3, lsl #15
 8003e96:	4290      	cmp	r0, r2
 8003e98:	b289      	uxth	r1, r1
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8003e9a:	eb01 0353 	add.w	r3, r1, r3, lsr #1
 8003e9e:	b29b      	uxth	r3, r3
	for (i = sum = 0; i < szblk; i++) {
 8003ea0:	d8eb      	bhi.n	8003e7a <load_xdir+0x1e6>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8003ea2:	8870      	ldrh	r0, [r6, #2]
 8003ea4:	1ac0      	subs	r0, r0, r3
 8003ea6:	bf18      	it	ne
 8003ea8:	2001      	movne	r0, #1
 8003eaa:	0040      	lsls	r0, r0, #1
 8003eac:	e702      	b.n	8003cb4 <load_xdir+0x20>
 8003eae:	bf00      	nop
 8003eb0:	88888889 	.word	0x88888889

08003eb4 <dir_read.constprop.0>:
FRESULT dir_read (
 8003eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
 8003eb8:	f8d0 a038 	ldr.w	sl, [r0, #56]	@ 0x38
FRESULT dir_read (
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8003ec0:	6806      	ldr	r6, [r0, #0]
	while (dp->sect) {
 8003ec2:	f1ba 0f00 	cmp.w	sl, #0
 8003ec6:	f000 80c8 	beq.w	800405a <dir_read.constprop.0+0x1a6>
	BYTE ord = 0xFF, sum = 0xFF;
 8003eca:	f04f 09ff 	mov.w	r9, #255	@ 0xff
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003ece:	f106 0738 	add.w	r7, r6, #56	@ 0x38
	BYTE ord = 0xFF, sum = 0xFF;
 8003ed2:	46c8      	mov	r8, r9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003ed4:	6b75      	ldr	r5, [r6, #52]	@ 0x34
 8003ed6:	4555      	cmp	r5, sl
 8003ed8:	d014      	beq.n	8003f04 <dir_read.constprop.0+0x50>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003eda:	78f3      	ldrb	r3, [r6, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003edc:	7870      	ldrb	r0, [r6, #1]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d162      	bne.n	8003fa8 <dir_read.constprop.0+0xf4>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	4652      	mov	r2, sl
 8003ee6:	4639      	mov	r1, r7
 8003ee8:	f7ff f9c0 	bl	800326c <disk_read>
 8003eec:	b140      	cbz	r0, 8003f00 <dir_read.constprop.0+0x4c>
			fs->winsect = sector;
 8003eee:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef2:	6373      	str	r3, [r6, #52]	@ 0x34
				res = FR_DISK_ERR;
 8003ef4:	2001      	movs	r0, #1
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 8003efa:	b003      	add	sp, #12
 8003efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8003f00:	f8c6 a034 	str.w	sl, [r6, #52]	@ 0x34
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8003f04:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8003f06:	780b      	ldrb	r3, [r1, #0]
		if (c == 0) {
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 80a6 	beq.w	800405a <dir_read.constprop.0+0x1a6>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8003f0e:	7832      	ldrb	r2, [r6, #0]
 8003f10:	2a04      	cmp	r2, #4
 8003f12:	d035      	beq.n	8003f80 <dir_read.constprop.0+0xcc>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8003f14:	7aca      	ldrb	r2, [r1, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8003f16:	2be5      	cmp	r3, #229	@ 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8003f18:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8003f1c:	71a2      	strb	r2, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8003f1e:	d005      	beq.n	8003f2c <dir_read.constprop.0+0x78>
 8003f20:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f22:	d003      	beq.n	8003f2c <dir_read.constprop.0+0x78>
 8003f24:	f022 0020 	bic.w	r0, r2, #32
 8003f28:	2808      	cmp	r0, #8
 8003f2a:	d17e      	bne.n	800402a <dir_read.constprop.0+0x176>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8003f2c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
				ord = 0xFF;
 8003f2e:	f04f 08ff 	mov.w	r8, #255	@ 0xff
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003f32:	f8d4 a038 	ldr.w	sl, [r4, #56]	@ 0x38
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8003f36:	3520      	adds	r5, #32
	FATFS *fs = dp->obj.fs;
 8003f38:	6823      	ldr	r3, [r4, #0]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003f3a:	f1ba 0f00 	cmp.w	sl, #0
 8003f3e:	f000 808c 	beq.w	800405a <dir_read.constprop.0+0x1a6>
 8003f42:	781a      	ldrb	r2, [r3, #0]
 8003f44:	2a04      	cmp	r2, #4
 8003f46:	bf14      	ite	ne
 8003f48:	f44f 1200 	movne.w	r2, #2097152	@ 0x200000
 8003f4c:	f04f 5280 	moveq.w	r2, #268435456	@ 0x10000000
 8003f50:	4295      	cmp	r5, r2
 8003f52:	f080 8082 	bcs.w	800405a <dir_read.constprop.0+0x1a6>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003f56:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8003f5a:	bb02      	cbnz	r2, 8003f9e <dir_read.constprop.0+0xea>
		dp->sect++;				/* Next sector */
 8003f5c:	f10a 0a01 	add.w	sl, sl, #1
		if (!dp->clust) {		/* Static table */
 8003f60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
		dp->sect++;				/* Next sector */
 8003f62:	f8c4 a038 	str.w	sl, [r4, #56]	@ 0x38
		if (!dp->clust) {		/* Static table */
 8003f66:	2900      	cmp	r1, #0
 8003f68:	d140      	bne.n	8003fec <dir_read.constprop.0+0x138>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8003f6a:	891a      	ldrh	r2, [r3, #8]
 8003f6c:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 8003f70:	d973      	bls.n	800405a <dir_read.constprop.0+0x1a6>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003f72:	3338      	adds	r3, #56	@ 0x38
	dp->dptr = ofs;						/* Current entry */
 8003f74:	6325      	str	r5, [r4, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003f76:	63e3      	str	r3, [r4, #60]	@ 0x3c
	while (dp->sect) {
 8003f78:	f1ba 0f00 	cmp.w	sl, #0
 8003f7c:	d1aa      	bne.n	8003ed4 <dir_read.constprop.0+0x20>
 8003f7e:	e0e5      	b.n	800414c <dir_read.constprop.0+0x298>
				if (c == 0x85) {		/* Start of the file entry block? */
 8003f80:	2b85      	cmp	r3, #133	@ 0x85
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8003f82:	6b25      	ldr	r5, [r4, #48]	@ 0x30
				if (c == 0x85) {		/* Start of the file entry block? */
 8003f84:	d1d5      	bne.n	8003f32 <dir_read.constprop.0+0x7e>
					res = load_xdir(dp);	/* Load the entry block */
 8003f86:	4620      	mov	r0, r4
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8003f88:	64e5      	str	r5, [r4, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8003f8a:	f7ff fe83 	bl	8003c94 <load_xdir>
					if (res == FR_OK) {
 8003f8e:	2800      	cmp	r0, #0
 8003f90:	d1b1      	bne.n	8003ef6 <dir_read.constprop.0+0x42>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8003f92:	6933      	ldr	r3, [r6, #16]
 8003f94:	791b      	ldrb	r3, [r3, #4]
 8003f96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f9a:	71a3      	strb	r3, [r4, #6]
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8003f9c:	e0d6      	b.n	800414c <dir_read.constprop.0+0x298>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003f9e:	3338      	adds	r3, #56	@ 0x38
	dp->dptr = ofs;						/* Current entry */
 8003fa0:	6325      	str	r5, [r4, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003fa2:	4413      	add	r3, r2
 8003fa4:	63e3      	str	r3, [r4, #60]	@ 0x3c
	while (dp->sect) {
 8003fa6:	e795      	b.n	8003ed4 <dir_read.constprop.0+0x20>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003fa8:	2301      	movs	r3, #1
 8003faa:	462a      	mov	r2, r5
 8003fac:	4639      	mov	r1, r7
 8003fae:	f7ff f979 	bl	80032a4 <disk_write>
 8003fb2:	2800      	cmp	r0, #0
 8003fb4:	d19e      	bne.n	8003ef4 <dir_read.constprop.0+0x40>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003fb6:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
			fs->wflag = 0;
 8003fb8:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003fba:	1aea      	subs	r2, r5, r3
 8003fbc:	6a33      	ldr	r3, [r6, #32]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d212      	bcs.n	8003fe8 <dir_read.constprop.0+0x134>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003fc2:	f896 b002 	ldrb.w	fp, [r6, #2]
 8003fc6:	f1bb 0f01 	cmp.w	fp, #1
 8003fca:	d801      	bhi.n	8003fd0 <dir_read.constprop.0+0x11c>
 8003fcc:	e00c      	b.n	8003fe8 <dir_read.constprop.0+0x134>
					wsect += fs->fsize;
 8003fce:	6a33      	ldr	r3, [r6, #32]
 8003fd0:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003fd2:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	4639      	mov	r1, r7
 8003fda:	462a      	mov	r2, r5
 8003fdc:	7870      	ldrb	r0, [r6, #1]
 8003fde:	f7ff f961 	bl	80032a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003fe2:	f1bb 0f01 	cmp.w	fp, #1
 8003fe6:	d1f2      	bne.n	8003fce <dir_read.constprop.0+0x11a>
 8003fe8:	7870      	ldrb	r0, [r6, #1]
 8003fea:	e77a      	b.n	8003ee2 <dir_read.constprop.0+0x2e>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8003fec:	895a      	ldrh	r2, [r3, #10]
 8003fee:	3a01      	subs	r2, #1
 8003ff0:	ea12 2b55 	ands.w	fp, r2, r5, lsr #9
 8003ff4:	d1bd      	bne.n	8003f72 <dir_read.constprop.0+0xbe>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	9301      	str	r3, [sp, #4]
 8003ffa:	f7ff fa8b 	bl	8003514 <get_fat>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003ffe:	2801      	cmp	r0, #1
 8004000:	d932      	bls.n	8004068 <dir_read.constprop.0+0x1b4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004002:	1c43      	adds	r3, r0, #1
 8004004:	f43f af76 	beq.w	8003ef4 <dir_read.constprop.0+0x40>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004008:	9b01      	ldr	r3, [sp, #4]
 800400a:	69da      	ldr	r2, [r3, #28]
 800400c:	4290      	cmp	r0, r2
 800400e:	d224      	bcs.n	800405a <dir_read.constprop.0+0x1a6>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004010:	3a02      	subs	r2, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 8004012:	6360      	str	r0, [r4, #52]	@ 0x34
	clst -= 2;
 8004014:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004016:	4290      	cmp	r0, r2
 8004018:	f080 8093 	bcs.w	8004142 <dir_read.constprop.0+0x28e>
	return clst * fs->csize + fs->database;
 800401c:	8959      	ldrh	r1, [r3, #10]
 800401e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004020:	fb00 2a01 	mla	sl, r0, r1, r2
				dp->sect = clust2sect(fs, clst);
 8004024:	f8c4 a038 	str.w	sl, [r4, #56]	@ 0x38
 8004028:	e7a3      	b.n	8003f72 <dir_read.constprop.0+0xbe>
				if (a == AM_LFN) {			/* An LFN entry is found */
 800402a:	2a0f      	cmp	r2, #15
 800402c:	f040 811d 	bne.w	800426a <dir_read.constprop.0+0x3b6>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8004030:	0658      	lsls	r0, r3, #25
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8004032:	6b25      	ldr	r5, [r4, #48]	@ 0x30
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8004034:	d513      	bpl.n	800405e <dir_read.constprop.0+0x1aa>
						c &= (BYTE)~LLEF; ord = c;
 8004036:	f003 08bf 	and.w	r8, r3, #191	@ 0xbf
						sum = dp->dir[LDIR_Chksum];
 800403a:	f891 900d 	ldrb.w	r9, [r1, #13]
						dp->blk_ofs = dp->dptr;
 800403e:	64e5      	str	r5, [r4, #76]	@ 0x4c
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8004040:	7b4b      	ldrb	r3, [r1, #13]
 8004042:	454b      	cmp	r3, r9
 8004044:	d012      	beq.n	800406c <dir_read.constprop.0+0x1b8>
 8004046:	f04f 08ff 	mov.w	r8, #255	@ 0xff
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800404a:	f8d4 a038 	ldr.w	sl, [r4, #56]	@ 0x38
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800404e:	3520      	adds	r5, #32
	FATFS *fs = dp->obj.fs;
 8004050:	6823      	ldr	r3, [r4, #0]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004052:	f1ba 0f00 	cmp.w	sl, #0
 8004056:	f47f af74 	bne.w	8003f42 <dir_read.constprop.0+0x8e>
	FRESULT res = FR_NO_FILE;
 800405a:	2004      	movs	r0, #4
 800405c:	e74b      	b.n	8003ef6 <dir_read.constprop.0+0x42>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800405e:	4543      	cmp	r3, r8
 8004060:	d0ee      	beq.n	8004040 <dir_read.constprop.0+0x18c>
 8004062:	f04f 08ff 	mov.w	r8, #255	@ 0xff
 8004066:	e7f0      	b.n	800404a <dir_read.constprop.0+0x196>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004068:	2002      	movs	r0, #2
 800406a:	e744      	b.n	8003ef6 <dir_read.constprop.0+0x42>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800406c:	8b4b      	ldrh	r3, [r1, #26]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1e9      	bne.n	8004046 <dir_read.constprop.0+0x192>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8004072:	780b      	ldrb	r3, [r1, #0]
 8004074:	f8b1 0001 	ldrh.w	r0, [r1, #1]
 8004078:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800407c:	3b01      	subs	r3, #1
 800407e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8004082:	eb03 0382 	add.w	r3, r3, r2, lsl #2
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8004086:	2bfe      	cmp	r3, #254	@ 0xfe
 8004088:	d8dd      	bhi.n	8004046 <dir_read.constprop.0+0x192>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800408a:	f8d6 c00c 	ldr.w	ip, [r6, #12]
			lfnbuf[i++] = wc = uc;			/* Store it */
 800408e:	1c5a      	adds	r2, r3, #1
 8004090:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
 8004094:	f8b1 a003 	ldrh.w	sl, [r1, #3]
		if (wc) {
 8004098:	2800      	cmp	r0, #0
 800409a:	d159      	bne.n	8004150 <dir_read.constprop.0+0x29c>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800409c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80040a0:	459a      	cmp	sl, r3
 80040a2:	d1d0      	bne.n	8004046 <dir_read.constprop.0+0x192>
	rv = ptr[1];
 80040a4:	f8b1 e005 	ldrh.w	lr, [r1, #5]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80040a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80040ac:	459e      	cmp	lr, r3
 80040ae:	d1ca      	bne.n	8004046 <dir_read.constprop.0+0x192>
	rv = ptr[1];
 80040b0:	f8b1 a007 	ldrh.w	sl, [r1, #7]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80040b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80040b8:	459a      	cmp	sl, r3
 80040ba:	d1c4      	bne.n	8004046 <dir_read.constprop.0+0x192>
	rv = ptr[1];
 80040bc:	f8b1 e009 	ldrh.w	lr, [r1, #9]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80040c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80040c4:	459e      	cmp	lr, r3
 80040c6:	d1be      	bne.n	8004046 <dir_read.constprop.0+0x192>
	rv = ptr[1];
 80040c8:	f8b1 a00e 	ldrh.w	sl, [r1, #14]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80040cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80040d0:	459a      	cmp	sl, r3
 80040d2:	d1b8      	bne.n	8004046 <dir_read.constprop.0+0x192>
	rv = ptr[1];
 80040d4:	f8b1 b010 	ldrh.w	fp, [r1, #16]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80040d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80040dc:	459b      	cmp	fp, r3
 80040de:	d1b2      	bne.n	8004046 <dir_read.constprop.0+0x192>
	rv = ptr[1];
 80040e0:	f8b1 e012 	ldrh.w	lr, [r1, #18]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80040e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80040e8:	459e      	cmp	lr, r3
 80040ea:	d1ac      	bne.n	8004046 <dir_read.constprop.0+0x192>
	rv = ptr[1];
 80040ec:	f8b1 a014 	ldrh.w	sl, [r1, #20]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80040f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80040f4:	459a      	cmp	sl, r3
 80040f6:	d1a6      	bne.n	8004046 <dir_read.constprop.0+0x192>
	rv = ptr[1];
 80040f8:	f8b1 e016 	ldrh.w	lr, [r1, #22]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80040fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004100:	459e      	cmp	lr, r3
 8004102:	d1a0      	bne.n	8004046 <dir_read.constprop.0+0x192>
	rv = ptr[1];
 8004104:	f8b1 a018 	ldrh.w	sl, [r1, #24]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004108:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800410c:	459a      	cmp	sl, r3
 800410e:	d19a      	bne.n	8004046 <dir_read.constprop.0+0x192>
	rv = ptr[1];
 8004110:	f8b1 e01c 	ldrh.w	lr, [r1, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004114:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004118:	459e      	cmp	lr, r3
 800411a:	d194      	bne.n	8004046 <dir_read.constprop.0+0x192>
	rv = ptr[1];
 800411c:	f8b1 a01e 	ldrh.w	sl, [r1, #30]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004120:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004124:	459a      	cmp	sl, r3
 8004126:	d18e      	bne.n	8004046 <dir_read.constprop.0+0x192>
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8004128:	780b      	ldrb	r3, [r1, #0]
 800412a:	0659      	lsls	r1, r3, #25
 800412c:	d504      	bpl.n	8004138 <dir_read.constprop.0+0x284>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800412e:	2aff      	cmp	r2, #255	@ 0xff
 8004130:	d089      	beq.n	8004046 <dir_read.constprop.0+0x192>
		lfnbuf[i] = 0;
 8004132:	2300      	movs	r3, #0
 8004134:	f82c 3012 	strh.w	r3, [ip, r2, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8004138:	f108 38ff 	add.w	r8, r8, #4294967295
 800413c:	fa5f f888 	uxtb.w	r8, r8
 8004140:	e6f7      	b.n	8003f32 <dir_read.constprop.0+0x7e>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004142:	3338      	adds	r3, #56	@ 0x38
				dp->sect = clust2sect(fs, clst);
 8004144:	f8c4 b038 	str.w	fp, [r4, #56]	@ 0x38
	dp->dptr = ofs;						/* Current entry */
 8004148:	6325      	str	r5, [r4, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800414a:	63e3      	str	r3, [r4, #60]	@ 0x3c
	FRESULT res = FR_NO_FILE;
 800414c:	2000      	movs	r0, #0
 800414e:	e6d4      	b.n	8003efa <dir_read.constprop.0+0x46>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8004150:	2aff      	cmp	r2, #255	@ 0xff
 8004152:	f43f af78 	beq.w	8004046 <dir_read.constprop.0+0x192>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8004156:	f82c a012 	strh.w	sl, [ip, r2, lsl #1]
 800415a:	0050      	lsls	r0, r2, #1
 800415c:	f8b1 e005 	ldrh.w	lr, [r1, #5]
 8004160:	1c9a      	adds	r2, r3, #2
		if (wc) {
 8004162:	f1ba 0f00 	cmp.w	sl, #0
 8004166:	d09f      	beq.n	80040a8 <dir_read.constprop.0+0x1f4>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8004168:	2aff      	cmp	r2, #255	@ 0xff
 800416a:	f43f af6c 	beq.w	8004046 <dir_read.constprop.0+0x192>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800416e:	4460      	add	r0, ip
 8004170:	1cda      	adds	r2, r3, #3
 8004172:	f8a0 e002 	strh.w	lr, [r0, #2]
 8004176:	f8b1 a007 	ldrh.w	sl, [r1, #7]
		if (wc) {
 800417a:	f1be 0f00 	cmp.w	lr, #0
 800417e:	d099      	beq.n	80040b4 <dir_read.constprop.0+0x200>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8004180:	2aff      	cmp	r2, #255	@ 0xff
 8004182:	f43f af60 	beq.w	8004046 <dir_read.constprop.0+0x192>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8004186:	f8a0 a004 	strh.w	sl, [r0, #4]
 800418a:	1d1a      	adds	r2, r3, #4
	rv = ptr[1];
 800418c:	f8b1 e009 	ldrh.w	lr, [r1, #9]
		if (wc) {
 8004190:	f1ba 0f00 	cmp.w	sl, #0
 8004194:	d094      	beq.n	80040c0 <dir_read.constprop.0+0x20c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8004196:	2aff      	cmp	r2, #255	@ 0xff
 8004198:	f43f af55 	beq.w	8004046 <dir_read.constprop.0+0x192>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800419c:	f8a0 e006 	strh.w	lr, [r0, #6]
 80041a0:	1d5a      	adds	r2, r3, #5
	rv = ptr[1];
 80041a2:	f8b1 a00e 	ldrh.w	sl, [r1, #14]
		if (wc) {
 80041a6:	f1be 0f00 	cmp.w	lr, #0
 80041aa:	d08f      	beq.n	80040cc <dir_read.constprop.0+0x218>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80041ac:	2aff      	cmp	r2, #255	@ 0xff
 80041ae:	f43f af4a 	beq.w	8004046 <dir_read.constprop.0+0x192>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80041b2:	f8a0 a008 	strh.w	sl, [r0, #8]
 80041b6:	1d9a      	adds	r2, r3, #6
	rv = ptr[1];
 80041b8:	f8b1 b010 	ldrh.w	fp, [r1, #16]
		if (wc) {
 80041bc:	f1ba 0f00 	cmp.w	sl, #0
 80041c0:	d08a      	beq.n	80040d8 <dir_read.constprop.0+0x224>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80041c2:	2aff      	cmp	r2, #255	@ 0xff
 80041c4:	f43f af3f 	beq.w	8004046 <dir_read.constprop.0+0x192>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80041c8:	f8a0 b00a 	strh.w	fp, [r0, #10]
 80041cc:	1dda      	adds	r2, r3, #7
	rv = ptr[1];
 80041ce:	f8b1 e012 	ldrh.w	lr, [r1, #18]
		if (wc) {
 80041d2:	f1bb 0f00 	cmp.w	fp, #0
 80041d6:	d085      	beq.n	80040e4 <dir_read.constprop.0+0x230>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80041d8:	2aff      	cmp	r2, #255	@ 0xff
 80041da:	f43f af34 	beq.w	8004046 <dir_read.constprop.0+0x192>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80041de:	f8a0 e00c 	strh.w	lr, [r0, #12]
 80041e2:	f103 0208 	add.w	r2, r3, #8
	rv = ptr[1];
 80041e6:	f8b1 a014 	ldrh.w	sl, [r1, #20]
		if (wc) {
 80041ea:	f1be 0f00 	cmp.w	lr, #0
 80041ee:	f43f af7f 	beq.w	80040f0 <dir_read.constprop.0+0x23c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80041f2:	2aff      	cmp	r2, #255	@ 0xff
 80041f4:	f43f af27 	beq.w	8004046 <dir_read.constprop.0+0x192>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80041f8:	f8a0 a00e 	strh.w	sl, [r0, #14]
 80041fc:	f103 0209 	add.w	r2, r3, #9
	rv = ptr[1];
 8004200:	f8b1 e016 	ldrh.w	lr, [r1, #22]
		if (wc) {
 8004204:	f1ba 0f00 	cmp.w	sl, #0
 8004208:	f43f af78 	beq.w	80040fc <dir_read.constprop.0+0x248>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800420c:	2aff      	cmp	r2, #255	@ 0xff
 800420e:	f43f af1a 	beq.w	8004046 <dir_read.constprop.0+0x192>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8004212:	f8a0 e010 	strh.w	lr, [r0, #16]
 8004216:	f103 020a 	add.w	r2, r3, #10
	rv = ptr[1];
 800421a:	f8b1 a018 	ldrh.w	sl, [r1, #24]
		if (wc) {
 800421e:	f1be 0f00 	cmp.w	lr, #0
 8004222:	f43f af71 	beq.w	8004108 <dir_read.constprop.0+0x254>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8004226:	2aff      	cmp	r2, #255	@ 0xff
 8004228:	f43f af0d 	beq.w	8004046 <dir_read.constprop.0+0x192>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800422c:	f8a0 a012 	strh.w	sl, [r0, #18]
 8004230:	f103 020b 	add.w	r2, r3, #11
	rv = ptr[1];
 8004234:	f8b1 e01c 	ldrh.w	lr, [r1, #28]
		if (wc) {
 8004238:	f1ba 0f00 	cmp.w	sl, #0
 800423c:	f43f af6a 	beq.w	8004114 <dir_read.constprop.0+0x260>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8004240:	2aff      	cmp	r2, #255	@ 0xff
 8004242:	f43f af00 	beq.w	8004046 <dir_read.constprop.0+0x192>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8004246:	f8a0 e014 	strh.w	lr, [r0, #20]
 800424a:	f103 020c 	add.w	r2, r3, #12
	rv = ptr[1];
 800424e:	f8b1 a01e 	ldrh.w	sl, [r1, #30]
		if (wc) {
 8004252:	f1be 0f00 	cmp.w	lr, #0
 8004256:	f43f af63 	beq.w	8004120 <dir_read.constprop.0+0x26c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800425a:	2aff      	cmp	r2, #255	@ 0xff
 800425c:	f43f aef3 	beq.w	8004046 <dir_read.constprop.0+0x192>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8004260:	f103 020d 	add.w	r2, r3, #13
 8004264:	f8a0 a016 	strh.w	sl, [r0, #22]
 8004268:	e75e      	b.n	8004128 <dir_read.constprop.0+0x274>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800426a:	f1b8 0f00 	cmp.w	r8, #0
 800426e:	d148      	bne.n	8004302 <dir_read.constprop.0+0x44e>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004270:	780b      	ldrb	r3, [r1, #0]
 8004272:	01da      	lsls	r2, r3, #7
 8004274:	ea42 0253 	orr.w	r2, r2, r3, lsr #1
 8004278:	784b      	ldrb	r3, [r1, #1]
 800427a:	441a      	add	r2, r3
 800427c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8004280:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8004284:	788a      	ldrb	r2, [r1, #2]
 8004286:	fa52 f383 	uxtab	r3, r2, r3
 800428a:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800428e:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 8004292:	78cb      	ldrb	r3, [r1, #3]
 8004294:	fa53 f282 	uxtab	r2, r3, r2
 8004298:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800429c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80042a0:	790a      	ldrb	r2, [r1, #4]
 80042a2:	fa52 f383 	uxtab	r3, r2, r3
 80042a6:	f3c3 0246 	ubfx	r2, r3, #1, #7
 80042aa:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 80042ae:	794b      	ldrb	r3, [r1, #5]
 80042b0:	fa53 f282 	uxtab	r2, r3, r2
 80042b4:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80042b8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80042bc:	798a      	ldrb	r2, [r1, #6]
 80042be:	fa52 f383 	uxtab	r3, r2, r3
 80042c2:	f3c3 0246 	ubfx	r2, r3, #1, #7
 80042c6:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 80042ca:	79cb      	ldrb	r3, [r1, #7]
 80042cc:	fa53 f282 	uxtab	r2, r3, r2
 80042d0:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80042d4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80042d8:	7a0a      	ldrb	r2, [r1, #8]
 80042da:	fa52 f383 	uxtab	r3, r2, r3
 80042de:	f3c3 0246 	ubfx	r2, r3, #1, #7
 80042e2:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 80042e6:	7a4b      	ldrb	r3, [r1, #9]
 80042e8:	7a89      	ldrb	r1, [r1, #10]
 80042ea:	fa53 f282 	uxtab	r2, r3, r2
 80042ee:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80042f2:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80042f6:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	454b      	cmp	r3, r9
 80042fe:	f43f af25 	beq.w	800414c <dir_read.constprop.0+0x298>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8004302:	f04f 33ff 	mov.w	r3, #4294967295
 8004306:	64e3      	str	r3, [r4, #76]	@ 0x4c
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8004308:	e720      	b.n	800414c <dir_read.constprop.0+0x298>
 800430a:	bf00      	nop

0800430c <dir_sdi>:
{
 800430c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = dp->obj.fs;
 8004310:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004314:	f898 3000 	ldrb.w	r3, [r8]
 8004318:	2b04      	cmp	r3, #4
 800431a:	bf0c      	ite	eq
 800431c:	f04f 5280 	moveq.w	r2, #268435456	@ 0x10000000
 8004320:	f44f 1200 	movne.w	r2, #2097152	@ 0x200000
 8004324:	428a      	cmp	r2, r1
 8004326:	d922      	bls.n	800436e <dir_sdi+0x62>
 8004328:	460c      	mov	r4, r1
 800432a:	06e1      	lsls	r1, r4, #27
 800432c:	d11f      	bne.n	800436e <dir_sdi+0x62>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800432e:	6885      	ldr	r5, [r0, #8]
 8004330:	4606      	mov	r6, r0
	dp->dptr = ofs;				/* Set current offset */
 8004332:	6304      	str	r4, [r0, #48]	@ 0x30
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004334:	2d00      	cmp	r5, #0
 8004336:	d050      	beq.n	80043da <dir_sdi+0xce>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004338:	f8b8 300a 	ldrh.w	r3, [r8, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 800433c:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004340:	ea4f 2943 	mov.w	r9, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8004344:	f0c0 8095 	bcc.w	8004472 <dir_sdi+0x166>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004348:	2d01      	cmp	r5, #1
 800434a:	d010      	beq.n	800436e <dir_sdi+0x62>
	FATFS *fs = obj->fs;
 800434c:	4647      	mov	r7, r8
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	42ab      	cmp	r3, r5
 8004352:	d90c      	bls.n	800436e <dir_sdi+0x62>
		switch (fs->fs_type) {
 8004354:	783b      	ldrb	r3, [r7, #0]
 8004356:	3b01      	subs	r3, #1
 8004358:	2b03      	cmp	r3, #3
 800435a:	d808      	bhi.n	800436e <dir_sdi+0x62>
 800435c:	e8df f003 	tbb	[pc, r3]
 8004360:	020a1931 	.word	0x020a1931
			if (obj->objsize) {
 8004364:	e9d6 3104 	ldrd	r3, r1, [r6, #16]
 8004368:	ea53 0201 	orrs.w	r2, r3, r1
 800436c:	d155      	bne.n	800441a <dir_sdi+0x10e>
		return FR_INT_ERR;
 800436e:	2002      	movs	r0, #2
}
 8004370:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004374:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004376:	4638      	mov	r0, r7
 8004378:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 800437c:	f7ff f80c 	bl	8003398 <move_window>
 8004380:	bb40      	cbnz	r0, 80043d4 <dir_sdi+0xc8>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004382:	00ab      	lsls	r3, r5, #2
 8004384:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 8004388:	443b      	add	r3, r7
 800438a:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800438c:	f025 4570 	bic.w	r5, r5, #4026531840	@ 0xf0000000
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004390:	e00b      	b.n	80043aa <dir_sdi+0x9e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004392:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004394:	4638      	mov	r0, r7
 8004396:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 800439a:	f7fe fffd 	bl	8003398 <move_window>
 800439e:	b9c8      	cbnz	r0, 80043d4 <dir_sdi+0xc8>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80043a0:	006b      	lsls	r3, r5, #1
 80043a2:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80043a6:	443b      	add	r3, r7
 80043a8:	8f1d      	ldrh	r5, [r3, #56]	@ 0x38
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80043aa:	2d01      	cmp	r5, #1
 80043ac:	d9df      	bls.n	800436e <dir_sdi+0x62>
 80043ae:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80043b2:	42ab      	cmp	r3, r5
 80043b4:	d9db      	bls.n	800436e <dir_sdi+0x62>
			ofs -= csz;
 80043b6:	eba4 0409 	sub.w	r4, r4, r9
		while (ofs >= csz) {				/* Follow cluster chain */
 80043ba:	45a1      	cmp	r9, r4
 80043bc:	d85b      	bhi.n	8004476 <dir_sdi+0x16a>
	FATFS *fs = obj->fs;
 80043be:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80043c0:	e7c5      	b.n	800434e <dir_sdi+0x42>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80043c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
			bc = (UINT)clst; bc += bc / 2;
 80043c4:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80043c8:	4638      	mov	r0, r7
 80043ca:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 80043ce:	f7fe ffe3 	bl	8003398 <move_window>
 80043d2:	b388      	cbz	r0, 8004438 <dir_sdi+0x12c>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80043d4:	2001      	movs	r0, #1
}
 80043d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d816      	bhi.n	800440c <dir_sdi+0x100>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80043de:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 80043e2:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 80043e6:	d9c2      	bls.n	800436e <dir_sdi+0x62>
		dp->sect = fs->dirbase;
 80043e8:	f8d8 302c 	ldr.w	r3, [r8, #44]	@ 0x2c
	dp->clust = clst;					/* Current cluster# */
 80043ec:	e9c6 530d 	strd	r5, r3, [r6, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0bc      	beq.n	800436e <dir_sdi+0x62>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80043f4:	f108 0838 	add.w	r8, r8, #56	@ 0x38
 80043f8:	f3c4 0108 	ubfx	r1, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80043fc:	eb03 2354 	add.w	r3, r3, r4, lsr #9
	return FR_OK;
 8004400:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004402:	4441      	add	r1, r8
 8004404:	e9c6 310e 	strd	r3, r1, [r6, #56]	@ 0x38
}
 8004408:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		clst = fs->dirbase;
 800440c:	f8d8 302c 	ldr.w	r3, [r8, #44]	@ 0x2c
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8004410:	71c5      	strb	r5, [r0, #7]
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0e3      	beq.n	80043de <dir_sdi+0xd2>
 8004416:	461d      	mov	r5, r3
 8004418:	e78e      	b.n	8004338 <dir_sdi+0x2c>
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800441a:	79f0      	ldrb	r0, [r6, #7]
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800441c:	68b2      	ldr	r2, [r6, #8]
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800441e:	2802      	cmp	r0, #2
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8004420:	f8b7 c00a 	ldrh.w	ip, [r7, #10]
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8004424:	eba5 0202 	sub.w	r2, r5, r2
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8004428:	d040      	beq.n	80044ac <dir_sdi+0x1a0>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800442a:	2803      	cmp	r0, #3
 800442c:	d053      	beq.n	80044d6 <dir_sdi+0x1ca>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800442e:	69f3      	ldr	r3, [r6, #28]
 8004430:	b363      	cbz	r3, 800448c <dir_sdi+0x180>
 8004432:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8004436:	e7ba      	b.n	80043ae <dir_sdi+0xa2>
			wc = fs->win[bc++ % SS(fs)];
 8004438:	f3ca 0308 	ubfx	r3, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800443c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
			wc = fs->win[bc++ % SS(fs)];
 800443e:	f10a 0a01 	add.w	sl, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004442:	4638      	mov	r0, r7
			wc = fs->win[bc++ % SS(fs)];
 8004444:	443b      	add	r3, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004446:	eb01 215a 	add.w	r1, r1, sl, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800444a:	f893 b038 	ldrb.w	fp, [r3, #56]	@ 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800444e:	f7fe ffa3 	bl	8003398 <move_window>
 8004452:	2800      	cmp	r0, #0
 8004454:	d1be      	bne.n	80043d4 <dir_sdi+0xc8>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004456:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800445a:	07ea      	lsls	r2, r5, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800445c:	44ba      	add	sl, r7
 800445e:	f89a 3038 	ldrb.w	r3, [sl, #56]	@ 0x38
 8004462:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004466:	bf4c      	ite	mi
 8004468:	ea4f 151b 	movmi.w	r5, fp, lsr #4
 800446c:	f3cb 050b 	ubfxpl	r5, fp, #0, #12
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004470:	e79b      	b.n	80043aa <dir_sdi+0x9e>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004472:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8004476:	3b02      	subs	r3, #2
	clst -= 2;
 8004478:	1eaa      	subs	r2, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800447a:	429a      	cmp	r2, r3
 800447c:	d227      	bcs.n	80044ce <dir_sdi+0x1c2>
	return clst * fs->csize + fs->database;
 800447e:	f8b8 100a 	ldrh.w	r1, [r8, #10]
 8004482:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 8004486:	fb02 3301 	mla	r3, r2, r1, r3
 800448a:	e7af      	b.n	80043ec <dir_sdi+0xe0>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800448c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800448e:	4638      	mov	r0, r7
 8004490:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 8004494:	f7fe ff80 	bl	8003398 <move_window>
 8004498:	2800      	cmp	r0, #0
 800449a:	d19b      	bne.n	80043d4 <dir_sdi+0xc8>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800449c:	00ab      	lsls	r3, r5, #2
 800449e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 80044a2:	443b      	add	r3, r7
 80044a4:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 80044a6:	f025 4500 	bic.w	r5, r5, #2147483648	@ 0x80000000
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80044aa:	e77e      	b.n	80043aa <dir_sdi+0x9e>
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 80044ac:	3b01      	subs	r3, #1
 80044ae:	f141 31ff 	adc.w	r1, r1, #4294967295
 80044b2:	0a5b      	lsrs	r3, r3, #9
 80044b4:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 80044b8:	fbb3 f3fc 	udiv	r3, r3, ip
					if (cofs <= clen) {
 80044bc:	429a      	cmp	r2, r3
 80044be:	f63f af56 	bhi.w	800436e <dir_sdi+0x62>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 80044c2:	d0b6      	beq.n	8004432 <dir_sdi+0x126>
					val = clst + 1; 	/* Generate the value */
 80044c4:	3501      	adds	r5, #1
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80044c6:	1c6b      	adds	r3, r5, #1
 80044c8:	f47f af71 	bne.w	80043ae <dir_sdi+0xa2>
 80044cc:	e782      	b.n	80043d4 <dir_sdi+0xc8>
		dp->sect = fs->dirbase;
 80044ce:	2300      	movs	r3, #0
 80044d0:	e9c6 530d 	strd	r5, r3, [r6, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 80044d4:	e74b      	b.n	800436e <dir_sdi+0x62>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 80044d6:	69b3      	ldr	r3, [r6, #24]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d2a8      	bcs.n	800442e <dir_sdi+0x122>
 80044dc:	e7f2      	b.n	80044c4 <dir_sdi+0x1b8>
 80044de:	bf00      	nop

080044e0 <store_xdir>:
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 80044e0:	6802      	ldr	r2, [r0, #0]
	for (i = sum = 0; i < szblk; i++) {
 80044e2:	2300      	movs	r3, #0
{
 80044e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 80044e8:	6914      	ldr	r4, [r2, #16]
{
 80044ea:	4605      	mov	r5, r0
 80044ec:	b085      	sub	sp, #20
	for (i = sum = 0; i < szblk; i++) {
 80044ee:	4619      	mov	r1, r3
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 80044f0:	7866      	ldrb	r6, [r4, #1]
 80044f2:	3601      	adds	r6, #1
 80044f4:	0170      	lsls	r0, r6, #5
		if (i == XDIR_SetSum) {	/* Skip sum field */
 80044f6:	2902      	cmp	r1, #2
 80044f8:	d107      	bne.n	800450a <store_xdir+0x2a>
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 80044fa:	7922      	ldrb	r2, [r4, #4]
	for (i = sum = 0; i < szblk; i++) {
 80044fc:	2105      	movs	r1, #5
 80044fe:	eb02 32c3 	add.w	r2, r2, r3, lsl #15
 8004502:	b292      	uxth	r2, r2
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8004504:	eb02 0353 	add.w	r3, r2, r3, lsr #1
 8004508:	b29b      	uxth	r3, r3
 800450a:	5c62      	ldrb	r2, [r4, r1]
	for (i = sum = 0; i < szblk; i++) {
 800450c:	3101      	adds	r1, #1
 800450e:	eb02 32c3 	add.w	r2, r2, r3, lsl #15
 8004512:	4281      	cmp	r1, r0
 8004514:	b292      	uxth	r2, r2
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8004516:	eb02 0353 	add.w	r3, r2, r3, lsr #1
 800451a:	b29b      	uxth	r3, r3
	for (i = sum = 0; i < szblk; i++) {
 800451c:	d3eb      	bcc.n	80044f6 <store_xdir+0x16>
	*ptr++ = (BYTE)val; val >>= 8;
 800451e:	0a1a      	lsrs	r2, r3, #8
 8004520:	70a3      	strb	r3, [r4, #2]
	res = dir_sdi(dp, dp->blk_ofs);
 8004522:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val;
 8004524:	70e2      	strb	r2, [r4, #3]
	res = dir_sdi(dp, dp->blk_ofs);
 8004526:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8004528:	f7ff fef0 	bl	800430c <dir_sdi>
	while (res == FR_OK) {
 800452c:	4682      	mov	sl, r0
 800452e:	2800      	cmp	r0, #0
 8004530:	f040 80d0 	bne.w	80046d4 <store_xdir+0x1f4>
		res = move_window(dp->obj.fs, dp->sect);
 8004534:	f8d5 9000 	ldr.w	r9, [r5]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004538:	2701      	movs	r7, #1
		res = move_window(dp->obj.fs, dp->sect);
 800453a:	f8d5 8038 	ldr.w	r8, [r5, #56]	@ 0x38
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800453e:	46b3      	mov	fp, r6
 8004540:	9002      	str	r0, [sp, #8]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004542:	f8d9 2034 	ldr.w	r2, [r9, #52]	@ 0x34
 8004546:	4542      	cmp	r2, r8
 8004548:	d019      	beq.n	800457e <store_xdir+0x9e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800454a:	f899 3003 	ldrb.w	r3, [r9, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800454e:	f109 0a38 	add.w	sl, r9, #56	@ 0x38
 8004552:	f899 0001 	ldrb.w	r0, [r9, #1]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004556:	2b00      	cmp	r3, #0
 8004558:	d165      	bne.n	8004626 <store_xdir+0x146>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800455a:	2301      	movs	r3, #1
 800455c:	4642      	mov	r2, r8
 800455e:	4651      	mov	r1, sl
 8004560:	f7fe fe84 	bl	800326c <disk_read>
 8004564:	b148      	cbz	r0, 800457a <store_xdir+0x9a>
			fs->winsect = sector;
 8004566:	f04f 33ff 	mov.w	r3, #4294967295
 800456a:	f8c9 3034 	str.w	r3, [r9, #52]	@ 0x34
		if (res != FR_OK) break;
 800456e:	f04f 0a01 	mov.w	sl, #1
}
 8004572:	4650      	mov	r0, sl
 8004574:	b005      	add	sp, #20
 8004576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 800457a:	f8c9 8034 	str.w	r8, [r9, #52]	@ 0x34
		mem_cpy(dp->dir, dirb, SZDIRE);
 800457e:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004580:	1c62      	adds	r2, r4, #1
 8004582:	1a9a      	subs	r2, r3, r2
 8004584:	2a02      	cmp	r2, #2
 8004586:	d939      	bls.n	80045fc <store_xdir+0x11c>
			*d++ = *s++;
 8004588:	6822      	ldr	r2, [r4, #0]
		if (--nent == 0) break;
 800458a:	f1bb 0b01 	subs.w	fp, fp, #1
			*d++ = *s++;
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	6862      	ldr	r2, [r4, #4]
 8004592:	605a      	str	r2, [r3, #4]
 8004594:	68a2      	ldr	r2, [r4, #8]
 8004596:	609a      	str	r2, [r3, #8]
 8004598:	68e2      	ldr	r2, [r4, #12]
 800459a:	60da      	str	r2, [r3, #12]
 800459c:	6922      	ldr	r2, [r4, #16]
 800459e:	611a      	str	r2, [r3, #16]
 80045a0:	6962      	ldr	r2, [r4, #20]
 80045a2:	615a      	str	r2, [r3, #20]
 80045a4:	69a2      	ldr	r2, [r4, #24]
 80045a6:	619a      	str	r2, [r3, #24]
 80045a8:	69e2      	ldr	r2, [r4, #28]
 80045aa:	61da      	str	r2, [r3, #28]
		dp->obj.fs->wflag = 1;
 80045ac:	682e      	ldr	r6, [r5, #0]
 80045ae:	70f7      	strb	r7, [r6, #3]
		if (--nent == 0) break;
 80045b0:	d033      	beq.n	800461a <store_xdir+0x13a>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80045b2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80045b4:	f8d5 8038 	ldr.w	r8, [r5, #56]	@ 0x38
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80045b8:	3320      	adds	r3, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80045ba:	f1b8 0f00 	cmp.w	r8, #0
 80045be:	d06f      	beq.n	80046a0 <store_xdir+0x1c0>
 80045c0:	7832      	ldrb	r2, [r6, #0]
 80045c2:	2a04      	cmp	r2, #4
 80045c4:	bf14      	ite	ne
 80045c6:	f44f 1200 	movne.w	r2, #2097152	@ 0x200000
 80045ca:	f04f 5280 	moveq.w	r2, #268435456	@ 0x10000000
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d266      	bcs.n	80046a0 <store_xdir+0x1c0>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80045d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045d6:	b952      	cbnz	r2, 80045ee <store_xdir+0x10e>
		dp->sect++;				/* Next sector */
 80045d8:	f108 0801 	add.w	r8, r8, #1
		if (!dp->clust) {		/* Static table */
 80045dc:	6b69      	ldr	r1, [r5, #52]	@ 0x34
		dp->sect++;				/* Next sector */
 80045de:	f8c5 8038 	str.w	r8, [r5, #56]	@ 0x38
		if (!dp->clust) {		/* Static table */
 80045e2:	2900      	cmp	r1, #0
 80045e4:	d148      	bne.n	8004678 <store_xdir+0x198>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80045e6:	8931      	ldrh	r1, [r6, #8]
 80045e8:	ebb1 1f53 	cmp.w	r1, r3, lsr #5
 80045ec:	d956      	bls.n	800469c <store_xdir+0x1bc>
 80045ee:	46b1      	mov	r9, r6
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80045f0:	3638      	adds	r6, #56	@ 0x38
		dirb += SZDIRE;
 80045f2:	3420      	adds	r4, #32
	dp->dptr = ofs;						/* Current entry */
 80045f4:	632b      	str	r3, [r5, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80045f6:	4416      	add	r6, r2
 80045f8:	63ee      	str	r6, [r5, #60]	@ 0x3c
	while (res == FR_OK) {
 80045fa:	e7a2      	b.n	8004542 <store_xdir+0x62>
 80045fc:	3b01      	subs	r3, #1
		mem_cpy(dp->dir, dirb, SZDIRE);
 80045fe:	4622      	mov	r2, r4
 8004600:	f104 0020 	add.w	r0, r4, #32
			*d++ = *s++;
 8004604:	f812 1b01 	ldrb.w	r1, [r2], #1
		} while (--cnt);
 8004608:	4282      	cmp	r2, r0
			*d++ = *s++;
 800460a:	f803 1f01 	strb.w	r1, [r3, #1]!
		} while (--cnt);
 800460e:	d1f9      	bne.n	8004604 <store_xdir+0x124>
		dp->obj.fs->wflag = 1;
 8004610:	682e      	ldr	r6, [r5, #0]
		if (--nent == 0) break;
 8004612:	f1bb 0b01 	subs.w	fp, fp, #1
		dp->obj.fs->wflag = 1;
 8004616:	70f7      	strb	r7, [r6, #3]
		if (--nent == 0) break;
 8004618:	d1cb      	bne.n	80045b2 <store_xdir+0xd2>
 800461a:	f8dd a008 	ldr.w	sl, [sp, #8]
}
 800461e:	4650      	mov	r0, sl
 8004620:	b005      	add	sp, #20
 8004622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004626:	2301      	movs	r3, #1
 8004628:	4651      	mov	r1, sl
 800462a:	9201      	str	r2, [sp, #4]
 800462c:	f7fe fe3a 	bl	80032a4 <disk_write>
 8004630:	9a01      	ldr	r2, [sp, #4]
 8004632:	2800      	cmp	r0, #0
 8004634:	d19b      	bne.n	800456e <store_xdir+0x8e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004636:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
			fs->wflag = 0;
 800463a:	f889 0003 	strb.w	r0, [r9, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800463e:	1ad0      	subs	r0, r2, r3
 8004640:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8004644:	4298      	cmp	r0, r3
 8004646:	d214      	bcs.n	8004672 <store_xdir+0x192>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004648:	f899 6002 	ldrb.w	r6, [r9, #2]
 800464c:	2e01      	cmp	r6, #1
 800464e:	d910      	bls.n	8004672 <store_xdir+0x192>
 8004650:	9401      	str	r4, [sp, #4]
 8004652:	4614      	mov	r4, r2
 8004654:	e001      	b.n	800465a <store_xdir+0x17a>
					wsect += fs->fsize;
 8004656:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800465a:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800465c:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800465e:	2301      	movs	r3, #1
 8004660:	4651      	mov	r1, sl
 8004662:	4622      	mov	r2, r4
 8004664:	f899 0001 	ldrb.w	r0, [r9, #1]
 8004668:	f7fe fe1c 	bl	80032a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800466c:	2e01      	cmp	r6, #1
 800466e:	d1f2      	bne.n	8004656 <store_xdir+0x176>
 8004670:	9c01      	ldr	r4, [sp, #4]
 8004672:	f899 0001 	ldrb.w	r0, [r9, #1]
 8004676:	e770      	b.n	800455a <store_xdir+0x7a>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004678:	8970      	ldrh	r0, [r6, #10]
 800467a:	3801      	subs	r0, #1
 800467c:	ea10 2053 	ands.w	r0, r0, r3, lsr #9
 8004680:	d1b5      	bne.n	80045ee <store_xdir+0x10e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004682:	4628      	mov	r0, r5
 8004684:	9203      	str	r2, [sp, #12]
 8004686:	9301      	str	r3, [sp, #4]
 8004688:	f7fe ff44 	bl	8003514 <get_fat>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800468c:	2801      	cmp	r0, #1
 800468e:	d907      	bls.n	80046a0 <store_xdir+0x1c0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004690:	1c43      	adds	r3, r0, #1
 8004692:	f43f af6c 	beq.w	800456e <store_xdir+0x8e>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004696:	69f1      	ldr	r1, [r6, #28]
 8004698:	4288      	cmp	r0, r1
 800469a:	d307      	bcc.n	80046ac <store_xdir+0x1cc>
				dp->sect = 0; return FR_NO_FILE;
 800469c:	2300      	movs	r3, #0
 800469e:	63ab      	str	r3, [r5, #56]	@ 0x38
	while (res == FR_OK) {
 80046a0:	f04f 0a02 	mov.w	sl, #2
}
 80046a4:	4650      	mov	r0, sl
 80046a6:	b005      	add	sp, #20
 80046a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80046ac:	3902      	subs	r1, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 80046ae:	6368      	str	r0, [r5, #52]	@ 0x34
	clst -= 2;
 80046b0:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80046b2:	9b01      	ldr	r3, [sp, #4]
 80046b4:	9a03      	ldr	r2, [sp, #12]
 80046b6:	4288      	cmp	r0, r1
 80046b8:	d209      	bcs.n	80046ce <store_xdir+0x1ee>
	return clst * fs->csize + fs->database;
 80046ba:	f8b6 c00a 	ldrh.w	ip, [r6, #10]
 80046be:	6b31      	ldr	r1, [r6, #48]	@ 0x30
 80046c0:	fb00 180c 	mla	r8, r0, ip, r1
		res = move_window(dp->obj.fs, dp->sect);
 80046c4:	f8d5 9000 	ldr.w	r9, [r5]
				dp->sect = clust2sect(fs, clst);
 80046c8:	f8c5 8038 	str.w	r8, [r5, #56]	@ 0x38
 80046cc:	e790      	b.n	80045f0 <store_xdir+0x110>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80046ce:	f04f 0800 	mov.w	r8, #0
 80046d2:	e7f7      	b.n	80046c4 <store_xdir+0x1e4>
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 80046d4:	2802      	cmp	r0, #2
 80046d6:	bf28      	it	cs
 80046d8:	f04f 0a02 	movcs.w	sl, #2
 80046dc:	fa5f fa8a 	uxtb.w	sl, sl
 80046e0:	e747      	b.n	8004572 <store_xdir+0x92>
 80046e2:	bf00      	nop

080046e4 <dir_find>:
{
 80046e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80046e8:	2100      	movs	r1, #0
{
 80046ea:	b087      	sub	sp, #28
 80046ec:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 80046ee:	6805      	ldr	r5, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80046f0:	f7ff fe0c 	bl	800430c <dir_sdi>
	if (res != FR_OK) return res;
 80046f4:	4681      	mov	r9, r0
 80046f6:	bb18      	cbnz	r0, 8004740 <dir_find+0x5c>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80046f8:	782b      	ldrb	r3, [r5, #0]
 80046fa:	2b04      	cmp	r3, #4
 80046fc:	f000 818c 	beq.w	8004a18 <dir_find+0x334>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004700:	23ff      	movs	r3, #255	@ 0xff
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004702:	f105 0638 	add.w	r6, r5, #56	@ 0x38
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004706:	f04f 37ff 	mov.w	r7, #4294967295
		res = move_window(fs, dp->sect);
 800470a:	f8d4 a038 	ldr.w	sl, [r4, #56]	@ 0x38
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800470e:	4698      	mov	r8, r3
 8004710:	46b1      	mov	r9, r6
 8004712:	64e7      	str	r7, [r4, #76]	@ 0x4c
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	9002      	str	r0, [sp, #8]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004718:	f8d5 b034 	ldr.w	fp, [r5, #52]	@ 0x34
 800471c:	45d3      	cmp	fp, sl
 800471e:	d015      	beq.n	800474c <dir_find+0x68>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004720:	78eb      	ldrb	r3, [r5, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004722:	7868      	ldrb	r0, [r5, #1]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004724:	2b00      	cmp	r3, #0
 8004726:	f040 80f3 	bne.w	8004910 <dir_find+0x22c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800472a:	2301      	movs	r3, #1
 800472c:	4652      	mov	r2, sl
 800472e:	4649      	mov	r1, r9
 8004730:	f7fe fd9c 	bl	800326c <disk_read>
 8004734:	b140      	cbz	r0, 8004748 <dir_find+0x64>
			fs->winsect = sector;
 8004736:	f04f 33ff 	mov.w	r3, #4294967295
 800473a:	636b      	str	r3, [r5, #52]	@ 0x34
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800473c:	f04f 0901 	mov.w	r9, #1
}
 8004740:	4648      	mov	r0, r9
 8004742:	b007      	add	sp, #28
 8004744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8004748:	f8c5 a034 	str.w	sl, [r5, #52]	@ 0x34
		c = dp->dir[DIR_Name];
 800474c:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 800474e:	7832      	ldrb	r2, [r6, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004750:	2a00      	cmp	r2, #0
 8004752:	d046      	beq.n	80047e2 <dir_find+0xfe>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8004754:	7af3      	ldrb	r3, [r6, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8004756:	2ae5      	cmp	r2, #229	@ 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8004758:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
 800475c:	71a1      	strb	r1, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800475e:	d004      	beq.n	800476a <dir_find+0x86>
 8004760:	0718      	lsls	r0, r3, #28
 8004762:	d544      	bpl.n	80047ee <dir_find+0x10a>
 8004764:	290f      	cmp	r1, #15
 8004766:	f000 8087 	beq.w	8004878 <dir_find+0x194>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800476a:	f04f 08ff 	mov.w	r8, #255	@ 0xff
 800476e:	64e7      	str	r7, [r4, #76]	@ 0x4c
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004770:	6b26      	ldr	r6, [r4, #48]	@ 0x30
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004772:	f8d4 a038 	ldr.w	sl, [r4, #56]	@ 0x38
	FATFS *fs = dp->obj.fs;
 8004776:	6823      	ldr	r3, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004778:	3620      	adds	r6, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800477a:	f1ba 0f00 	cmp.w	sl, #0
 800477e:	d030      	beq.n	80047e2 <dir_find+0xfe>
 8004780:	781a      	ldrb	r2, [r3, #0]
 8004782:	2a04      	cmp	r2, #4
 8004784:	bf14      	ite	ne
 8004786:	f44f 1200 	movne.w	r2, #2097152	@ 0x200000
 800478a:	f04f 5280 	moveq.w	r2, #268435456	@ 0x10000000
 800478e:	4296      	cmp	r6, r2
 8004790:	d227      	bcs.n	80047e2 <dir_find+0xfe>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004792:	f3c6 0208 	ubfx	r2, r6, #0, #9
 8004796:	b94a      	cbnz	r2, 80047ac <dir_find+0xc8>
		dp->sect++;				/* Next sector */
 8004798:	f10a 0a01 	add.w	sl, sl, #1
		if (!dp->clust) {		/* Static table */
 800479c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
		dp->sect++;				/* Next sector */
 800479e:	f8c4 a038 	str.w	sl, [r4, #56]	@ 0x38
		if (!dp->clust) {		/* Static table */
 80047a2:	b941      	cbnz	r1, 80047b6 <dir_find+0xd2>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80047a4:	8919      	ldrh	r1, [r3, #8]
 80047a6:	ebb1 1f56 	cmp.w	r1, r6, lsr #5
 80047aa:	d918      	bls.n	80047de <dir_find+0xfa>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80047ac:	3338      	adds	r3, #56	@ 0x38
	dp->dptr = ofs;						/* Current entry */
 80047ae:	6326      	str	r6, [r4, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80047b0:	4413      	add	r3, r2
 80047b2:	63e3      	str	r3, [r4, #60]	@ 0x3c
	} while (res == FR_OK);
 80047b4:	e7b0      	b.n	8004718 <dir_find+0x34>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80047b6:	8958      	ldrh	r0, [r3, #10]
 80047b8:	3801      	subs	r0, #1
 80047ba:	ea10 2056 	ands.w	r0, r0, r6, lsr #9
 80047be:	d1f5      	bne.n	80047ac <dir_find+0xc8>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80047c0:	4620      	mov	r0, r4
 80047c2:	9203      	str	r2, [sp, #12]
 80047c4:	9301      	str	r3, [sp, #4]
 80047c6:	f7fe fea5 	bl	8003514 <get_fat>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80047ca:	2801      	cmp	r0, #1
 80047cc:	f240 816c 	bls.w	8004aa8 <dir_find+0x3c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80047d0:	1c43      	adds	r3, r0, #1
 80047d2:	d0b3      	beq.n	800473c <dir_find+0x58>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80047d4:	9b01      	ldr	r3, [sp, #4]
 80047d6:	69d9      	ldr	r1, [r3, #28]
 80047d8:	4288      	cmp	r0, r1
 80047da:	f0c0 810f 	bcc.w	80049fc <dir_find+0x318>
				dp->sect = 0; return FR_NO_FILE;
 80047de:	2300      	movs	r3, #0
 80047e0:	63a3      	str	r3, [r4, #56]	@ 0x38
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80047e2:	f04f 0904 	mov.w	r9, #4
}
 80047e6:	4648      	mov	r0, r9
 80047e8:	b007      	add	sp, #28
 80047ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
 80047ee:	290f      	cmp	r1, #15
 80047f0:	d042      	beq.n	8004878 <dir_find+0x194>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80047f2:	f1b8 0f00 	cmp.w	r8, #0
 80047f6:	f000 80b0 	beq.w	800495a <dir_find+0x276>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80047fa:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 80047fe:	07da      	lsls	r2, r3, #31
 8004800:	d4b3      	bmi.n	800476a <dir_find+0x86>
	} while (--cnt && r == 0);
 8004802:	7832      	ldrb	r2, [r6, #0]
 8004804:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8004808:	429a      	cmp	r2, r3
 800480a:	d1ae      	bne.n	800476a <dir_find+0x86>
 800480c:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 8004810:	7873      	ldrb	r3, [r6, #1]
 8004812:	429a      	cmp	r2, r3
 8004814:	d1a9      	bne.n	800476a <dir_find+0x86>
 8004816:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 800481a:	78b3      	ldrb	r3, [r6, #2]
 800481c:	429a      	cmp	r2, r3
 800481e:	d1a4      	bne.n	800476a <dir_find+0x86>
 8004820:	f894 2043 	ldrb.w	r2, [r4, #67]	@ 0x43
 8004824:	78f3      	ldrb	r3, [r6, #3]
 8004826:	429a      	cmp	r2, r3
 8004828:	d19f      	bne.n	800476a <dir_find+0x86>
 800482a:	7932      	ldrb	r2, [r6, #4]
 800482c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8004830:	429a      	cmp	r2, r3
 8004832:	d19a      	bne.n	800476a <dir_find+0x86>
 8004834:	7972      	ldrb	r2, [r6, #5]
 8004836:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800483a:	429a      	cmp	r2, r3
 800483c:	d195      	bne.n	800476a <dir_find+0x86>
 800483e:	79b2      	ldrb	r2, [r6, #6]
 8004840:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8004844:	429a      	cmp	r2, r3
 8004846:	d190      	bne.n	800476a <dir_find+0x86>
 8004848:	79f2      	ldrb	r2, [r6, #7]
 800484a:	f894 3047 	ldrb.w	r3, [r4, #71]	@ 0x47
 800484e:	429a      	cmp	r2, r3
 8004850:	d18b      	bne.n	800476a <dir_find+0x86>
 8004852:	7a32      	ldrb	r2, [r6, #8]
 8004854:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8004858:	429a      	cmp	r2, r3
 800485a:	d186      	bne.n	800476a <dir_find+0x86>
 800485c:	7a72      	ldrb	r2, [r6, #9]
 800485e:	f894 3049 	ldrb.w	r3, [r4, #73]	@ 0x49
 8004862:	429a      	cmp	r2, r3
 8004864:	d181      	bne.n	800476a <dir_find+0x86>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8004866:	7ab2      	ldrb	r2, [r6, #10]
 8004868:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 800486c:	429a      	cmp	r2, r3
 800486e:	f47f af7c 	bne.w	800476a <dir_find+0x86>
 8004872:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8004876:	e763      	b.n	8004740 <dir_find+0x5c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8004878:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 800487c:	0659      	lsls	r1, r3, #25
 800487e:	f53f af77 	bmi.w	8004770 <dir_find+0x8c>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8004882:	0653      	lsls	r3, r2, #25
 8004884:	d564      	bpl.n	8004950 <dir_find+0x26c>
						sum = dp->dir[LDIR_Chksum];
 8004886:	7b71      	ldrb	r1, [r6, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8004888:	f002 02bf 	and.w	r2, r2, #191	@ 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800488c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
						sum = dp->dir[LDIR_Chksum];
 800488e:	9100      	str	r1, [sp, #0]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8004890:	64e3      	str	r3, [r4, #76]	@ 0x4c
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8004892:	7b73      	ldrb	r3, [r6, #13]
 8004894:	9900      	ldr	r1, [sp, #0]
 8004896:	428b      	cmp	r3, r1
 8004898:	d15c      	bne.n	8004954 <dir_find+0x270>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800489a:	8b73      	ldrh	r3, [r6, #26]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d159      	bne.n	8004954 <dir_find+0x270>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80048a0:	f896 8000 	ldrb.w	r8, [r6]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80048a4:	2101      	movs	r1, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80048a6:	68eb      	ldr	r3, [r5, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80048a8:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 80048ac:	f8df a234 	ldr.w	sl, [pc, #564]	@ 8004ae4 <dir_find+0x400>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80048b0:	9304      	str	r3, [sp, #16]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80048b2:	4608      	mov	r0, r1
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80048b4:	f108 38ff 	add.w	r8, r8, #4294967295
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80048b8:	9403      	str	r4, [sp, #12]
 80048ba:	9501      	str	r5, [sp, #4]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80048bc:	eb08 0348 	add.w	r3, r8, r8, lsl #1
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80048c0:	9c04      	ldr	r4, [sp, #16]
 80048c2:	9205      	str	r2, [sp, #20]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80048c4:	eb08 0883 	add.w	r8, r8, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80048c8:	f10a 030d 	add.w	r3, sl, #13
 80048cc:	e013      	b.n	80048f6 <dir_find+0x212>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80048ce:	f1b8 0ffe 	cmp.w	r8, #254	@ 0xfe
 80048d2:	4658      	mov	r0, fp
 80048d4:	d819      	bhi.n	800490a <dir_find+0x226>
 80048d6:	f002 fa95 	bl	8006e04 <ff_wtoupper>
 80048da:	4605      	mov	r5, r0
 80048dc:	f834 0018 	ldrh.w	r0, [r4, r8, lsl #1]
 80048e0:	f108 0801 	add.w	r8, r8, #1
 80048e4:	f002 fa8e 	bl	8006e04 <ff_wtoupper>
 80048e8:	4285      	cmp	r5, r0
	rv = rv << 8 | ptr[0];
 80048ea:	4658      	mov	r0, fp
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80048ec:	d10d      	bne.n	800490a <dir_find+0x226>
 80048ee:	4b7c      	ldr	r3, [pc, #496]	@ (8004ae0 <dir_find+0x3fc>)
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80048f0:	459a      	cmp	sl, r3
 80048f2:	f000 80e0 	beq.w	8004ab6 <dir_find+0x3d2>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80048f6:	f81a 2b01 	ldrb.w	r2, [sl], #1
	rv = ptr[1];
 80048fa:	f836 b002 	ldrh.w	fp, [r6, r2]
		if (wc) {
 80048fe:	2800      	cmp	r0, #0
 8004900:	d1e5      	bne.n	80048ce <dir_find+0x1ea>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004902:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004906:	4593      	cmp	fp, r2
 8004908:	d0f2      	beq.n	80048f0 <dir_find+0x20c>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800490a:	9d01      	ldr	r5, [sp, #4]
 800490c:	9c03      	ldr	r4, [sp, #12]
 800490e:	e021      	b.n	8004954 <dir_find+0x270>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004910:	2301      	movs	r3, #1
 8004912:	465a      	mov	r2, fp
 8004914:	4649      	mov	r1, r9
 8004916:	f7fe fcc5 	bl	80032a4 <disk_write>
 800491a:	2800      	cmp	r0, #0
 800491c:	f47f af0e 	bne.w	800473c <dir_find+0x58>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004920:	6aab      	ldr	r3, [r5, #40]	@ 0x28
			fs->wflag = 0;
 8004922:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004924:	ebab 0203 	sub.w	r2, fp, r3
 8004928:	6a2b      	ldr	r3, [r5, #32]
 800492a:	429a      	cmp	r2, r3
 800492c:	d20e      	bcs.n	800494c <dir_find+0x268>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800492e:	78ae      	ldrb	r6, [r5, #2]
 8004930:	2e01      	cmp	r6, #1
 8004932:	d801      	bhi.n	8004938 <dir_find+0x254>
 8004934:	e00a      	b.n	800494c <dir_find+0x268>
					wsect += fs->fsize;
 8004936:	6a2b      	ldr	r3, [r5, #32]
 8004938:	449b      	add	fp, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800493a:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800493c:	2301      	movs	r3, #1
 800493e:	4649      	mov	r1, r9
 8004940:	465a      	mov	r2, fp
 8004942:	7868      	ldrb	r0, [r5, #1]
 8004944:	f7fe fcae 	bl	80032a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004948:	2e01      	cmp	r6, #1
 800494a:	d1f4      	bne.n	8004936 <dir_find+0x252>
 800494c:	7868      	ldrb	r0, [r5, #1]
 800494e:	e6ec      	b.n	800472a <dir_find+0x46>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8004950:	4590      	cmp	r8, r2
 8004952:	d09e      	beq.n	8004892 <dir_find+0x1ae>
 8004954:	f04f 08ff 	mov.w	r8, #255	@ 0xff
 8004958:	e70a      	b.n	8004770 <dir_find+0x8c>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800495a:	7833      	ldrb	r3, [r6, #0]
 800495c:	7870      	ldrb	r0, [r6, #1]
 800495e:	01da      	lsls	r2, r3, #7
 8004960:	78b1      	ldrb	r1, [r6, #2]
 8004962:	f896 b003 	ldrb.w	fp, [r6, #3]
 8004966:	ea42 0253 	orr.w	r2, r2, r3, lsr #1
 800496a:	f896 a004 	ldrb.w	sl, [r6, #4]
 800496e:	f896 8005 	ldrb.w	r8, [r6, #5]
 8004972:	4402      	add	r2, r0
 8004974:	f896 e006 	ldrb.w	lr, [r6, #6]
 8004978:	f896 c007 	ldrb.w	ip, [r6, #7]
 800497c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8004980:	7a30      	ldrb	r0, [r6, #8]
 8004982:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8004986:	fa51 f383 	uxtab	r3, r1, r3
 800498a:	7a71      	ldrb	r1, [r6, #9]
 800498c:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8004990:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 8004994:	fa5b f282 	uxtab	r2, fp, r2
 8004998:	f896 b00a 	ldrb.w	fp, [r6, #10]
 800499c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80049a0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80049a4:	fa5a f383 	uxtab	r3, sl, r3
 80049a8:	f3c3 0246 	ubfx	r2, r3, #1, #7
 80049ac:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 80049b0:	fa58 f282 	uxtab	r2, r8, r2
 80049b4:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80049b8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80049bc:	fa5e f383 	uxtab	r3, lr, r3
 80049c0:	f3c3 0246 	ubfx	r2, r3, #1, #7
 80049c4:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 80049c8:	fa5c f282 	uxtab	r2, ip, r2
 80049cc:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80049d0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80049d4:	fa50 f383 	uxtab	r3, r0, r3
 80049d8:	f3c3 0246 	ubfx	r2, r3, #1, #7
 80049dc:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 80049e0:	fa51 f282 	uxtab	r2, r1, r2
 80049e4:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80049e8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80049ec:	9a00      	ldr	r2, [sp, #0]
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80049ee:	fa5b f383 	uxtab	r3, fp, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	429a      	cmp	r2, r3
 80049f6:	f47f af00 	bne.w	80047fa <dir_find+0x116>
 80049fa:	e73a      	b.n	8004872 <dir_find+0x18e>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80049fc:	3902      	subs	r1, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 80049fe:	6360      	str	r0, [r4, #52]	@ 0x34
	clst -= 2;
 8004a00:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004a02:	9a03      	ldr	r2, [sp, #12]
 8004a04:	4288      	cmp	r0, r1
 8004a06:	d254      	bcs.n	8004ab2 <dir_find+0x3ce>
	return clst * fs->csize + fs->database;
 8004a08:	f8b3 c00a 	ldrh.w	ip, [r3, #10]
 8004a0c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004a0e:	fb00 1a0c 	mla	sl, r0, ip, r1
				dp->sect = clust2sect(fs, clst);
 8004a12:	f8c4 a038 	str.w	sl, [r4, #56]	@ 0x38
 8004a16:	e6c9      	b.n	80047ac <dir_find+0xc8>
	while ((chr = *name++) != 0) {
 8004a18:	68ee      	ldr	r6, [r5, #12]
	WORD sum = 0;
 8004a1a:	464f      	mov	r7, r9
	while ((chr = *name++) != 0) {
 8004a1c:	f836 0b02 	ldrh.w	r0, [r6], #2
 8004a20:	b190      	cbz	r0, 8004a48 <dir_find+0x364>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8004a22:	f002 f9ef 	bl	8006e04 <ff_wtoupper>
 8004a26:	4603      	mov	r3, r0
	while ((chr = *name++) != 0) {
 8004a28:	f836 0b02 	ldrh.w	r0, [r6], #2
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8004a2c:	b2da      	uxtb	r2, r3
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8004a2e:	0a1b      	lsrs	r3, r3, #8
 8004a30:	eb02 0257 	add.w	r2, r2, r7, lsr #1
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8004a34:	eb02 32c7 	add.w	r2, r2, r7, lsl #15
 8004a38:	b292      	uxth	r2, r2
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8004a3a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8004a3e:	eb03 33c2 	add.w	r3, r3, r2, lsl #15
 8004a42:	b29f      	uxth	r7, r3
	while ((chr = *name++) != 0) {
 8004a44:	2800      	cmp	r0, #0
 8004a46:	d1ec      	bne.n	8004a22 <dir_find+0x33e>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8004a48:	4620      	mov	r0, r4
 8004a4a:	f7ff fa33 	bl	8003eb4 <dir_read.constprop.0>
 8004a4e:	bb70      	cbnz	r0, 8004aae <dir_find+0x3ca>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8004a50:	692b      	ldr	r3, [r5, #16]
 8004a52:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8004a54:	42ba      	cmp	r2, r7
 8004a56:	d1f7      	bne.n	8004a48 <dir_find+0x364>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8004a58:	f893 b023 	ldrb.w	fp, [r3, #35]	@ 0x23
 8004a5c:	f1bb 0f00 	cmp.w	fp, #0
 8004a60:	d035      	beq.n	8004ace <dir_find+0x3ea>
 8004a62:	4680      	mov	r8, r0
 8004a64:	2640      	movs	r6, #64	@ 0x40
 8004a66:	e003      	b.n	8004a70 <dir_find+0x38c>
 8004a68:	f013 0bff 	ands.w	fp, r3, #255	@ 0xff
 8004a6c:	d014      	beq.n	8004a98 <dir_find+0x3b4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8004a6e:	692b      	ldr	r3, [r5, #16]
				if ((di % SZDIRE) == 0) di += 2;
 8004a70:	06f2      	lsls	r2, r6, #27
 8004a72:	bf08      	it	eq
 8004a74:	3602      	addeq	r6, #2
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8004a76:	5b98      	ldrh	r0, [r3, r6]
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8004a78:	3602      	adds	r6, #2
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8004a7a:	f002 f9c3 	bl	8006e04 <ff_wtoupper>
 8004a7e:	68ea      	ldr	r2, [r5, #12]
 8004a80:	4682      	mov	sl, r0
 8004a82:	f832 0018 	ldrh.w	r0, [r2, r8, lsl #1]
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8004a86:	f108 0801 	add.w	r8, r8, #1
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8004a8a:	f002 f9bb 	bl	8006e04 <ff_wtoupper>
 8004a8e:	4582      	cmp	sl, r0
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8004a90:	f10b 33ff 	add.w	r3, fp, #4294967295
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8004a94:	d0e8      	beq.n	8004a68 <dir_find+0x384>
 8004a96:	e7d7      	b.n	8004a48 <dir_find+0x364>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8004a98:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8004a9c:	68eb      	ldr	r3, [r5, #12]
 8004a9e:	f833 3008 	ldrh.w	r3, [r3, r8]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1d0      	bne.n	8004a48 <dir_find+0x364>
 8004aa6:	e64b      	b.n	8004740 <dir_find+0x5c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004aa8:	f04f 0902 	mov.w	r9, #2
 8004aac:	e648      	b.n	8004740 <dir_find+0x5c>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8004aae:	4681      	mov	r9, r0
 8004ab0:	e646      	b.n	8004740 <dir_find+0x5c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004ab2:	4692      	mov	sl, r2
 8004ab4:	e7ad      	b.n	8004a12 <dir_find+0x32e>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8004ab6:	7833      	ldrb	r3, [r6, #0]
 8004ab8:	4601      	mov	r1, r0
 8004aba:	9d01      	ldr	r5, [sp, #4]
 8004abc:	0658      	lsls	r0, r3, #25
 8004abe:	9a05      	ldr	r2, [sp, #20]
 8004ac0:	9c03      	ldr	r4, [sp, #12]
 8004ac2:	d500      	bpl.n	8004ac6 <dir_find+0x3e2>
 8004ac4:	b929      	cbnz	r1, 8004ad2 <dir_find+0x3ee>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8004ac6:	3a01      	subs	r2, #1
 8004ac8:	fa5f f882 	uxtb.w	r8, r2
 8004acc:	e650      	b.n	8004770 <dir_find+0x8c>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8004ace:	46d8      	mov	r8, fp
 8004ad0:	e7e4      	b.n	8004a9c <dir_find+0x3b8>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8004ad2:	9b04      	ldr	r3, [sp, #16]
 8004ad4:	f833 3018 	ldrh.w	r3, [r3, r8, lsl #1]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0f4      	beq.n	8004ac6 <dir_find+0x3e2>
 8004adc:	e73a      	b.n	8004954 <dir_find+0x270>
 8004ade:	bf00      	nop
 8004ae0:	0800b77d 	.word	0x0800b77d
 8004ae4:	0800b770 	.word	0x0800b770

08004ae8 <follow_path>:
{
 8004ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004aec:	780b      	ldrb	r3, [r1, #0]
{
 8004aee:	b083      	sub	sp, #12
 8004af0:	460e      	mov	r6, r1
 8004af2:	4605      	mov	r5, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004af4:	2b5c      	cmp	r3, #92	@ 0x5c
	FATFS *fs = obj->fs;
 8004af6:	f8d0 8000 	ldr.w	r8, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004afa:	d001      	beq.n	8004b00 <follow_path+0x18>
 8004afc:	2b2f      	cmp	r3, #47	@ 0x2f
 8004afe:	d105      	bne.n	8004b0c <follow_path+0x24>
 8004b00:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8004b04:	2b2f      	cmp	r3, #47	@ 0x2f
 8004b06:	d0fb      	beq.n	8004b00 <follow_path+0x18>
 8004b08:	2b5c      	cmp	r3, #92	@ 0x5c
 8004b0a:	d0f9      	beq.n	8004b00 <follow_path+0x18>
		obj->sclust = 0;					/* Start from root directory */
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	60a9      	str	r1, [r5, #8]
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 8004b10:	61e9      	str	r1, [r5, #28]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004b12:	7830      	ldrb	r0, [r6, #0]
 8004b14:	281f      	cmp	r0, #31
 8004b16:	f240 8146 	bls.w	8004da6 <follow_path+0x2be>
 8004b1a:	4643      	mov	r3, r8
		if (w < ' ') break;				/* Break if end of the path name */
 8004b1c:	281f      	cmp	r0, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8004b1e:	68df      	ldr	r7, [r3, #12]
		if (w < ' ') break;				/* Break if end of the path name */
 8004b20:	d927      	bls.n	8004b72 <follow_path+0x8a>
 8004b22:	f1a7 0a02 	sub.w	sl, r7, #2
 8004b26:	46b1      	mov	r9, r6
		w = p[si++];					/* Get a character */
 8004b28:	2401      	movs	r4, #1
 8004b2a:	e008      	b.n	8004b3e <follow_path+0x56>
		lfn[di++] = w;					/* Store the Unicode character */
 8004b2c:	f82a 0f02 	strh.w	r0, [sl, #2]!
		w = p[si++];					/* Get a character */
 8004b30:	1c63      	adds	r3, r4, #1
 8004b32:	f819 0f01 	ldrb.w	r0, [r9, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 8004b36:	281f      	cmp	r0, #31
 8004b38:	f240 8100 	bls.w	8004d3c <follow_path+0x254>
		w = p[si++];					/* Get a character */
 8004b3c:	461c      	mov	r4, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8004b3e:	282f      	cmp	r0, #47	@ 0x2f
 8004b40:	d01a      	beq.n	8004b78 <follow_path+0x90>
 8004b42:	285c      	cmp	r0, #92	@ 0x5c
 8004b44:	d018      	beq.n	8004b78 <follow_path+0x90>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8004b46:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 8004b4a:	d00e      	beq.n	8004b6a <follow_path+0x82>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8004b4c:	2101      	movs	r1, #1
 8004b4e:	f002 f93f 	bl	8006dd0 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8004b52:	b150      	cbz	r0, 8004b6a <follow_path+0x82>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8004b54:	287f      	cmp	r0, #127	@ 0x7f
 8004b56:	d8e9      	bhi.n	8004b2c <follow_path+0x44>
	while (*str && *str != chr) str++;
 8004b58:	2322      	movs	r3, #34	@ 0x22
 8004b5a:	4aa7      	ldr	r2, [pc, #668]	@ (8004df8 <follow_path+0x310>)
 8004b5c:	e003      	b.n	8004b66 <follow_path+0x7e>
 8004b5e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0e2      	beq.n	8004b2c <follow_path+0x44>
 8004b66:	4298      	cmp	r0, r3
 8004b68:	d1f9      	bne.n	8004b5e <follow_path+0x76>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8004b6a:	2006      	movs	r0, #6
}
 8004b6c:	b003      	add	sp, #12
 8004b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lfn[di] = 0;						/* LFN is created */
 8004b72:	2300      	movs	r3, #0
 8004b74:	803b      	strh	r3, [r7, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8004b76:	e7f8      	b.n	8004b6a <follow_path+0x82>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004b78:	5d33      	ldrb	r3, [r6, r4]
 8004b7a:	1932      	adds	r2, r6, r4
 8004b7c:	2b2f      	cmp	r3, #47	@ 0x2f
 8004b7e:	d002      	beq.n	8004b86 <follow_path+0x9e>
 8004b80:	2b5c      	cmp	r3, #92	@ 0x5c
 8004b82:	f040 8125 	bne.w	8004dd0 <follow_path+0x2e8>
 8004b86:	1c63      	adds	r3, r4, #1
 8004b88:	4433      	add	r3, r6
 8004b8a:	461e      	mov	r6, r3
 8004b8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b90:	2a2f      	cmp	r2, #47	@ 0x2f
 8004b92:	d0fa      	beq.n	8004b8a <follow_path+0xa2>
 8004b94:	2a5c      	cmp	r2, #92	@ 0x5c
 8004b96:	d0f8      	beq.n	8004b8a <follow_path+0xa2>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004b98:	3c01      	subs	r4, #1
 8004b9a:	f000 812b 	beq.w	8004df4 <follow_path+0x30c>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004b9e:	f04f 0a00 	mov.w	sl, #0
 8004ba2:	eb07 0244 	add.w	r2, r7, r4, lsl #1
 8004ba6:	e001      	b.n	8004bac <follow_path+0xc4>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004ba8:	3c01      	subs	r4, #1
 8004baa:	d0e2      	beq.n	8004b72 <follow_path+0x8a>
		w = lfn[di - 1];
 8004bac:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 8004bb0:	2b20      	cmp	r3, #32
 8004bb2:	d0f9      	beq.n	8004ba8 <follow_path+0xc0>
 8004bb4:	2b2e      	cmp	r3, #46	@ 0x2e
 8004bb6:	d0f7      	beq.n	8004ba8 <follow_path+0xc0>
		*d++ = (BYTE)val;
 8004bb8:	f04f 3320 	mov.w	r3, #538976288	@ 0x20202020
	lfn[di] = 0;						/* LFN is created */
 8004bbc:	2000      	movs	r0, #0
		*d++ = (BYTE)val;
 8004bbe:	f242 0120 	movw	r1, #8224	@ 0x2020
 8004bc2:	2220      	movs	r2, #32
	lfn[di] = 0;						/* LFN is created */
 8004bc4:	f827 0014 	strh.w	r0, [r7, r4, lsl #1]
		*d++ = (BYTE)val;
 8004bc8:	642b      	str	r3, [r5, #64]	@ 0x40
 8004bca:	646b      	str	r3, [r5, #68]	@ 0x44
 8004bcc:	f8a5 1048 	strh.w	r1, [r5, #72]	@ 0x48
 8004bd0:	f885 204a 	strb.w	r2, [r5, #74]	@ 0x4a
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8004bd4:	8838      	ldrh	r0, [r7, #0]
 8004bd6:	282e      	cmp	r0, #46	@ 0x2e
 8004bd8:	d002      	beq.n	8004be0 <follow_path+0xf8>
 8004bda:	4290      	cmp	r0, r2
 8004bdc:	f040 80ec 	bne.w	8004db8 <follow_path+0x2d0>
 8004be0:	463a      	mov	r2, r7
 8004be2:	2300      	movs	r3, #0
 8004be4:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 8004be8:	4699      	mov	r9, r3
 8004bea:	3301      	adds	r3, #1
 8004bec:	2820      	cmp	r0, #32
 8004bee:	d0f9      	beq.n	8004be4 <follow_path+0xfc>
 8004bf0:	282e      	cmp	r0, #46	@ 0x2e
 8004bf2:	d0f7      	beq.n	8004be4 <follow_path+0xfc>
	if (si) cf |= NS_LOSS | NS_LFN;
 8004bf4:	f04a 0a03 	orr.w	sl, sl, #3
		w = lfn[si++];					/* Get an LFN character */
 8004bf8:	f109 0902 	add.w	r9, r9, #2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8004bfc:	eb07 0344 	add.w	r3, r7, r4, lsl #1
 8004c00:	e001      	b.n	8004c06 <follow_path+0x11e>
 8004c02:	3c01      	subs	r4, #1
 8004c04:	d003      	beq.n	8004c0e <follow_path+0x126>
 8004c06:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 8004c0a:	2a2e      	cmp	r2, #46	@ 0x2e
 8004c0c:	d1f9      	bne.n	8004c02 <follow_path+0x11a>
		if (!w) break;					/* Break on end of the LFN */
 8004c0e:	b368      	cbz	r0, 8004c6c <follow_path+0x184>
 8004c10:	2300      	movs	r3, #0
 8004c12:	2208      	movs	r2, #8
 8004c14:	469b      	mov	fp, r3
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8004c16:	2820      	cmp	r0, #32
 8004c18:	d003      	beq.n	8004c22 <follow_path+0x13a>
 8004c1a:	282e      	cmp	r0, #46	@ 0x2e
 8004c1c:	d14a      	bne.n	8004cb4 <follow_path+0x1cc>
 8004c1e:	45a1      	cmp	r9, r4
 8004c20:	d048      	beq.n	8004cb4 <follow_path+0x1cc>
			cf |= NS_LOSS | NS_LFN; continue;
 8004c22:	f04a 0a03 	orr.w	sl, sl, #3
		w = lfn[si++];					/* Get an LFN character */
 8004c26:	f837 0019 	ldrh.w	r0, [r7, r9, lsl #1]
 8004c2a:	f109 0901 	add.w	r9, r9, #1
		if (!w) break;					/* Break on end of the LFN */
 8004c2e:	2800      	cmp	r0, #0
 8004c30:	d1f1      	bne.n	8004c16 <follow_path+0x12e>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004c32:	f895 1040 	ldrb.w	r1, [r5, #64]	@ 0x40
 8004c36:	29e5      	cmp	r1, #229	@ 0xe5
 8004c38:	d102      	bne.n	8004c40 <follow_path+0x158>
 8004c3a:	2105      	movs	r1, #5
 8004c3c:	f885 1040 	strb.w	r1, [r5, #64]	@ 0x40
	if (ni == 8) b <<= 2;
 8004c40:	2a08      	cmp	r2, #8
 8004c42:	f000 80a3 	beq.w	8004d8c <follow_path+0x2a4>
 8004c46:	f003 020c 	and.w	r2, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8004c4a:	2a0c      	cmp	r2, #12
 8004c4c:	d07a      	beq.n	8004d44 <follow_path+0x25c>
 8004c4e:	f003 0303 	and.w	r3, r3, #3
 8004c52:	2b03      	cmp	r3, #3
 8004c54:	d076      	beq.n	8004d44 <follow_path+0x25c>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8004c56:	f01a 0f02 	tst.w	sl, #2
 8004c5a:	d107      	bne.n	8004c6c <follow_path+0x184>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	bf08      	it	eq
 8004c60:	f04a 0a10 	orreq.w	sl, sl, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8004c64:	2a04      	cmp	r2, #4
 8004c66:	bf08      	it	eq
 8004c68:	f04a 0a08 	orreq.w	sl, sl, #8
			res = dir_find(dp);				/* Find an object with the segment name */
 8004c6c:	4628      	mov	r0, r5
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8004c6e:	f885 a04b 	strb.w	sl, [r5, #75]	@ 0x4b
			res = dir_find(dp);				/* Find an object with the segment name */
 8004c72:	f7ff fd37 	bl	80046e4 <dir_find>
			ns = dp->fn[NSFLAG];
 8004c76:	f895 304b 	ldrb.w	r3, [r5, #75]	@ 0x4b
			if (res != FR_OK) {				/* Failed to find the object */
 8004c7a:	2800      	cmp	r0, #0
 8004c7c:	d16d      	bne.n	8004d5a <follow_path+0x272>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004c7e:	075a      	lsls	r2, r3, #29
 8004c80:	f53f af74 	bmi.w	8004b6c <follow_path+0x84>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004c84:	79ab      	ldrb	r3, [r5, #6]
 8004c86:	06db      	lsls	r3, r3, #27
 8004c88:	f140 80a4 	bpl.w	8004dd4 <follow_path+0x2ec>
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 8004c8c:	f898 2000 	ldrb.w	r2, [r8]
 8004c90:	2a04      	cmp	r2, #4
 8004c92:	d03b      	beq.n	8004d0c <follow_path+0x224>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004c94:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 8004c96:	f108 0338 	add.w	r3, r8, #56	@ 0x38
	if (fs->fs_type == FS_FAT32) {
 8004c9a:	2a03      	cmp	r2, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004c9c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004ca0:	440b      	add	r3, r1
	cl = ld_word(dir + DIR_FstClusLO);
 8004ca2:	8b59      	ldrh	r1, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 8004ca4:	d102      	bne.n	8004cac <follow_path+0x1c4>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004ca6:	8a9b      	ldrh	r3, [r3, #20]
 8004ca8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004cac:	60a9      	str	r1, [r5, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8004cae:	682b      	ldr	r3, [r5, #0]
		w = p[si++];					/* Get a character */
 8004cb0:	7830      	ldrb	r0, [r6, #0]
 8004cb2:	e733      	b.n	8004b1c <follow_path+0x34>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8004cb4:	455a      	cmp	r2, fp
 8004cb6:	d91b      	bls.n	8004cf0 <follow_path+0x208>
 8004cb8:	eba9 0104 	sub.w	r1, r9, r4
 8004cbc:	fab1 f181 	clz	r1, r1
 8004cc0:	0949      	lsrs	r1, r1, #5
 8004cc2:	b9a9      	cbnz	r1, 8004cf0 <follow_path+0x208>
		if (w >= 0x80) {				/* Non ASCII character */
 8004cc4:	287f      	cmp	r0, #127	@ 0x7f
 8004cc6:	d850      	bhi.n	8004d6a <follow_path+0x282>
	while (*str && *str != chr) str++;
 8004cc8:	212b      	movs	r1, #43	@ 0x2b
 8004cca:	f8df c134 	ldr.w	ip, [pc, #308]	@ 8004e00 <follow_path+0x318>
 8004cce:	e003      	b.n	8004cd8 <follow_path+0x1f0>
 8004cd0:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 8004cd4:	2900      	cmp	r1, #0
 8004cd6:	d05e      	beq.n	8004d96 <follow_path+0x2ae>
 8004cd8:	4288      	cmp	r0, r1
 8004cda:	d1f9      	bne.n	8004cd0 <follow_path+0x1e8>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8004cdc:	f04a 0a03 	orr.w	sl, sl, #3
 8004ce0:	205f      	movs	r0, #95	@ 0x5f
		dp->fn[i++] = (BYTE)w;
 8004ce2:	eb05 010b 	add.w	r1, r5, fp
 8004ce6:	f10b 0b01 	add.w	fp, fp, #1
 8004cea:	f881 0040 	strb.w	r0, [r1, #64]	@ 0x40
 8004cee:	e79a      	b.n	8004c26 <follow_path+0x13e>
			if (ni == 11) {				/* Long extension */
 8004cf0:	2a0b      	cmp	r2, #11
 8004cf2:	d073      	beq.n	8004ddc <follow_path+0x2f4>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8004cf4:	45a1      	cmp	r9, r4
 8004cf6:	d002      	beq.n	8004cfe <follow_path+0x216>
 8004cf8:	f04a 0a03 	orr.w	sl, sl, #3
			if (si > di) break;			/* No extension */
 8004cfc:	d899      	bhi.n	8004c32 <follow_path+0x14a>
			b <<= 2; continue;
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	46a1      	mov	r9, r4
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8004d02:	220b      	movs	r2, #11
 8004d04:	f04f 0b08 	mov.w	fp, #8
			b <<= 2; continue;
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	e78c      	b.n	8004c26 <follow_path+0x13e>
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8004d0c:	692b      	ldr	r3, [r5, #16]
 8004d0e:	79ec      	ldrb	r4, [r5, #7]
 8004d10:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 8004d14:	f8d8 2010 	ldr.w	r2, [r8, #16]
				obj->c_scl = obj->sclust;
 8004d18:	68a8      	ldr	r0, [r5, #8]
				obj->c_ofs = dp->blk_ofs;
 8004d1a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8004d1c:	4323      	orrs	r3, r4
				obj->c_scl = obj->sclust;
 8004d1e:	6228      	str	r0, [r5, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8004d20:	e9c5 3109 	strd	r3, r1, [r5, #36]	@ 0x24
	rv = rv << 8 | ptr[0];
 8004d24:	6b53      	ldr	r3, [r2, #52]	@ 0x34
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 8004d26:	60ab      	str	r3, [r5, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8004d28:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	71eb      	strb	r3, [r5, #7]
	rv = rv << 8 | ptr[0];
 8004d32:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8004d34:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8004d36:	e9c5 1304 	strd	r1, r3, [r5, #16]
 8004d3a:	e7b8      	b.n	8004cae <follow_path+0x1c6>
	*path = &p[si];						/* Return pointer to the next segment */
 8004d3c:	441e      	add	r6, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004d3e:	f04f 0a04 	mov.w	sl, #4
 8004d42:	e72e      	b.n	8004ba2 <follow_path+0xba>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8004d44:	f04a 0a02 	orr.w	sl, sl, #2
			res = dir_find(dp);				/* Find an object with the segment name */
 8004d48:	4628      	mov	r0, r5
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8004d4a:	f885 a04b 	strb.w	sl, [r5, #75]	@ 0x4b
			res = dir_find(dp);				/* Find an object with the segment name */
 8004d4e:	f7ff fcc9 	bl	80046e4 <dir_find>
			ns = dp->fn[NSFLAG];
 8004d52:	f895 304b 	ldrb.w	r3, [r5, #75]	@ 0x4b
			if (res != FR_OK) {				/* Failed to find the object */
 8004d56:	2800      	cmp	r0, #0
 8004d58:	d091      	beq.n	8004c7e <follow_path+0x196>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004d5a:	2804      	cmp	r0, #4
 8004d5c:	f47f af06 	bne.w	8004b6c <follow_path+0x84>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004d60:	f013 0f04 	tst.w	r3, #4
 8004d64:	bf08      	it	eq
 8004d66:	2005      	moveq	r0, #5
 8004d68:	e700      	b.n	8004b6c <follow_path+0x84>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8004d6a:	e9cd 3200 	strd	r3, r2, [sp]
			cf |= NS_LFN;				/* Force create LFN entry */
 8004d6e:	f04a 0a02 	orr.w	sl, sl, #2
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8004d72:	f002 f82d 	bl	8006dd0 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8004d76:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004d7a:	2800      	cmp	r0, #0
 8004d7c:	d0ae      	beq.n	8004cdc <follow_path+0x1f4>
 8004d7e:	491f      	ldr	r1, [pc, #124]	@ (8004dfc <follow_path+0x314>)
 8004d80:	4401      	add	r1, r0
 8004d82:	f811 0c80 	ldrb.w	r0, [r1, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8004d86:	2800      	cmp	r0, #0
 8004d88:	d0a8      	beq.n	8004cdc <follow_path+0x1f4>
 8004d8a:	e79d      	b.n	8004cc8 <follow_path+0x1e0>
	if (ni == 8) b <<= 2;
 8004d8c:	009a      	lsls	r2, r3, #2
 8004d8e:	b2d3      	uxtb	r3, r2
 8004d90:	f002 020c 	and.w	r2, r2, #12
 8004d94:	e759      	b.n	8004c4a <follow_path+0x162>
				if (IsUpper(w)) {		/* ASCII large capital */
 8004d96:	f1a0 0141 	sub.w	r1, r0, #65	@ 0x41
 8004d9a:	2919      	cmp	r1, #25
 8004d9c:	d80f      	bhi.n	8004dbe <follow_path+0x2d6>
					b |= 2;
 8004d9e:	f043 0302 	orr.w	r3, r3, #2
		dp->fn[i++] = (BYTE)w;
 8004da2:	b2c0      	uxtb	r0, r0
 8004da4:	e79d      	b.n	8004ce2 <follow_path+0x1fa>
		dp->fn[NSFLAG] = NS_NONAME;
 8004da6:	2380      	movs	r3, #128	@ 0x80
		res = dir_sdi(dp, 0);
 8004da8:	4628      	mov	r0, r5
		dp->fn[NSFLAG] = NS_NONAME;
 8004daa:	f885 304b 	strb.w	r3, [r5, #75]	@ 0x4b
}
 8004dae:	b003      	add	sp, #12
 8004db0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 8004db4:	f7ff baaa 	b.w	800430c <dir_sdi>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8004db8:	f04f 0901 	mov.w	r9, #1
 8004dbc:	e71e      	b.n	8004bfc <follow_path+0x114>
					if (IsLower(w)) {	/* ASCII small capital */
 8004dbe:	f1a0 0161 	sub.w	r1, r0, #97	@ 0x61
 8004dc2:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 8004dc4:	bf9c      	itt	ls
 8004dc6:	3820      	subls	r0, #32
 8004dc8:	f043 0301 	orrls.w	r3, r3, #1
		dp->fn[i++] = (BYTE)w;
 8004dcc:	b2c0      	uxtb	r0, r0
 8004dce:	e788      	b.n	8004ce2 <follow_path+0x1fa>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004dd0:	4616      	mov	r6, r2
 8004dd2:	e6e1      	b.n	8004b98 <follow_path+0xb0>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004dd4:	2005      	movs	r0, #5
}
 8004dd6:	b003      	add	sp, #12
 8004dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004ddc:	f895 2040 	ldrb.w	r2, [r5, #64]	@ 0x40
 8004de0:	2ae5      	cmp	r2, #229	@ 0xe5
 8004de2:	d102      	bne.n	8004dea <follow_path+0x302>
 8004de4:	2205      	movs	r2, #5
 8004de6:	f885 2040 	strb.w	r2, [r5, #64]	@ 0x40
				cf |= NS_LOSS | NS_LFN; break;
 8004dea:	f04a 0a03 	orr.w	sl, sl, #3
 8004dee:	f003 020c 	and.w	r2, r3, #12
 8004df2:	e72a      	b.n	8004c4a <follow_path+0x162>
	lfn[di] = 0;						/* LFN is created */
 8004df4:	803c      	strh	r4, [r7, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8004df6:	e6b8      	b.n	8004b6a <follow_path+0x82>
 8004df8:	0800b75c 	.word	0x0800b75c
 8004dfc:	0800b780 	.word	0x0800b780
 8004e00:	0800b768 	.word	0x0800b768

08004e04 <create_chain>:
{
 8004e04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e08:	4681      	mov	r9, r0
	FATFS *fs = obj->fs;
 8004e0a:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8004e0c:	4688      	mov	r8, r1
 8004e0e:	2900      	cmp	r1, #0
 8004e10:	f040 8091 	bne.w	8004f36 <create_chain+0x132>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004e14:	6977      	ldr	r7, [r6, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004e16:	2f00      	cmp	r7, #0
 8004e18:	f000 8083 	beq.w	8004f22 <create_chain+0x11e>
 8004e1c:	69f3      	ldr	r3, [r6, #28]
 8004e1e:	42bb      	cmp	r3, r7
 8004e20:	d97f      	bls.n	8004f22 <create_chain+0x11e>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8004e22:	7832      	ldrb	r2, [r6, #0]
 8004e24:	2a04      	cmp	r2, #4
 8004e26:	f000 8143 	beq.w	80050b0 <create_chain+0x2ac>
			ncl++;							/* Next cluster */
 8004e2a:	1c7c      	adds	r4, r7, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004e2c:	429c      	cmp	r4, r3
 8004e2e:	f0c0 81a8 	bcc.w	8005182 <create_chain+0x37e>
				if (ncl > scl) return 0;	/* No free cluster */
 8004e32:	2f01      	cmp	r7, #1
 8004e34:	f000 808b 	beq.w	8004f4e <create_chain+0x14a>
	FATFS *fs = obj->fs;
 8004e38:	f8d9 5000 	ldr.w	r5, [r9]
				ncl = 2;
 8004e3c:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004e3e:	69eb      	ldr	r3, [r5, #28]
 8004e40:	42a3      	cmp	r3, r4
 8004e42:	d940      	bls.n	8004ec6 <create_chain+0xc2>
		switch (fs->fs_type) {
 8004e44:	782b      	ldrb	r3, [r5, #0]
 8004e46:	3b01      	subs	r3, #1
 8004e48:	2b03      	cmp	r3, #3
 8004e4a:	d83c      	bhi.n	8004ec6 <create_chain+0xc2>
 8004e4c:	e8df f003 	tbb	[pc, r3]
 8004e50:	023f4e5b 	.word	0x023f4e5b
			if (obj->objsize) {
 8004e54:	e9d9 3104 	ldrd	r3, r1, [r9, #16]
 8004e58:	ea53 0201 	orrs.w	r2, r3, r1
 8004e5c:	d033      	beq.n	8004ec6 <create_chain+0xc2>
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8004e5e:	f899 0007 	ldrb.w	r0, [r9, #7]
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8004e62:	f8d9 2008 	ldr.w	r2, [r9, #8]
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8004e66:	2802      	cmp	r0, #2
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8004e68:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8004e6c:	eba4 0202 	sub.w	r2, r4, r2
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8004e70:	f000 8124 	beq.w	80050bc <create_chain+0x2b8>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8004e74:	2803      	cmp	r0, #3
 8004e76:	f000 8135 	beq.w	80050e4 <create_chain+0x2e0>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8004e7a:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004e7e:	b9bb      	cbnz	r3, 8004eb0 <create_chain+0xac>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004e80:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8004e82:	4628      	mov	r0, r5
 8004e84:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8004e88:	f7fe fa86 	bl	8003398 <move_window>
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	d143      	bne.n	8004f18 <create_chain+0x114>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8004e90:	00a3      	lsls	r3, r4, #2
 8004e92:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 8004e96:	442b      	add	r3, r5
 8004e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8004e9a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
			if (cs == 0) break;				/* Found a free cluster */
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d073      	beq.n	8004f8a <create_chain+0x186>
 8004ea2:	2200      	movs	r2, #0
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	f000 816a 	beq.w	800517e <create_chain+0x37a>
 8004eaa:	2a00      	cmp	r2, #0
 8004eac:	f040 8167 	bne.w	800517e <create_chain+0x37a>
			if (ncl == scl) return 0;		/* No free cluster */
 8004eb0:	42bc      	cmp	r4, r7
 8004eb2:	d04c      	beq.n	8004f4e <create_chain+0x14a>
			ncl++;							/* Next cluster */
 8004eb4:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004eb6:	69f3      	ldr	r3, [r6, #28]
 8004eb8:	42a3      	cmp	r3, r4
 8004eba:	d9ba      	bls.n	8004e32 <create_chain+0x2e>
	FATFS *fs = obj->fs;
 8004ebc:	f8d9 5000 	ldr.w	r5, [r9]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004ec0:	69eb      	ldr	r3, [r5, #28]
 8004ec2:	42a3      	cmp	r3, r4
 8004ec4:	d8be      	bhi.n	8004e44 <create_chain+0x40>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004ec6:	2401      	movs	r4, #1
}
 8004ec8:	4620      	mov	r0, r4
 8004eca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004ece:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8004ed6:	f7fe fa5f 	bl	8003398 <move_window>
 8004eda:	b9e8      	cbnz	r0, 8004f18 <create_chain+0x114>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004edc:	00a3      	lsls	r3, r4, #2
 8004ede:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 8004ee2:	442b      	add	r3, r5
 8004ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004ee6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
			break;
 8004eea:	e7d8      	b.n	8004e9e <create_chain+0x9a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004eec:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8004eee:	4628      	mov	r0, r5
 8004ef0:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8004ef4:	f7fe fa50 	bl	8003398 <move_window>
 8004ef8:	b970      	cbnz	r0, 8004f18 <create_chain+0x114>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004efa:	0063      	lsls	r3, r4, #1
 8004efc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8004f00:	442b      	add	r3, r5
 8004f02:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
			break;
 8004f04:	e7cb      	b.n	8004e9e <create_chain+0x9a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004f06:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
			bc = (UINT)clst; bc += bc / 2;
 8004f08:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	eb01 215b 	add.w	r1, r1, fp, lsr #9
 8004f12:	f7fe fa41 	bl	8003398 <move_window>
 8004f16:	b1e0      	cbz	r0, 8004f52 <create_chain+0x14e>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8004f18:	f04f 34ff 	mov.w	r4, #4294967295
}
 8004f1c:	4620      	mov	r0, r4
 8004f1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8004f22:	7833      	ldrb	r3, [r6, #0]
 8004f24:	2b04      	cmp	r3, #4
 8004f26:	d058      	beq.n	8004fda <create_chain+0x1d6>
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004f28:	69f3      	ldr	r3, [r6, #28]
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d90f      	bls.n	8004f4e <create_chain+0x14a>
	FATFS *fs = obj->fs;
 8004f2e:	4635      	mov	r5, r6
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004f30:	2701      	movs	r7, #1
			ncl++;							/* Next cluster */
 8004f32:	2402      	movs	r4, #2
 8004f34:	e783      	b.n	8004e3e <create_chain+0x3a>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004f36:	f7fe faed 	bl	8003514 <get_fat>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004f3a:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004f3c:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004f3e:	d9c2      	bls.n	8004ec6 <create_chain+0xc2>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004f40:	1c45      	adds	r5, r0, #1
 8004f42:	d0e9      	beq.n	8004f18 <create_chain+0x114>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004f44:	69f3      	ldr	r3, [r6, #28]
 8004f46:	4283      	cmp	r3, r0
 8004f48:	d8e8      	bhi.n	8004f1c <create_chain+0x118>
 8004f4a:	4647      	mov	r7, r8
 8004f4c:	e769      	b.n	8004e22 <create_chain+0x1e>
				if (val == clst) return 0;	/* All cluster scanned? */
 8004f4e:	2400      	movs	r4, #0
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8004f50:	e7e4      	b.n	8004f1c <create_chain+0x118>
			wc = fs->win[bc++ % SS(fs)];
 8004f52:	f3cb 0308 	ubfx	r3, fp, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004f56:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
			wc = fs->win[bc++ % SS(fs)];
 8004f58:	f10b 0b01 	add.w	fp, fp, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004f5c:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 8004f5e:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004f60:	eb01 215b 	add.w	r1, r1, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8004f64:	f893 a038 	ldrb.w	sl, [r3, #56]	@ 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004f68:	f7fe fa16 	bl	8003398 <move_window>
 8004f6c:	2800      	cmp	r0, #0
 8004f6e:	d1d3      	bne.n	8004f18 <create_chain+0x114>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004f70:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004f74:	07e0      	lsls	r0, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8004f76:	44ab      	add	fp, r5
 8004f78:	f89b 3038 	ldrb.w	r3, [fp, #56]	@ 0x38
 8004f7c:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004f80:	bf4c      	ite	mi
 8004f82:	091b      	lsrmi	r3, r3, #4
 8004f84:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
 8004f88:	e789      	b.n	8004e9e <create_chain+0x9a>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004f8a:	69f3      	ldr	r3, [r6, #28]
 8004f8c:	42a3      	cmp	r3, r4
 8004f8e:	d99a      	bls.n	8004ec6 <create_chain+0xc2>
 8004f90:	f04f 32ff 	mov.w	r2, #4294967295
 8004f94:	4621      	mov	r1, r4
 8004f96:	4630      	mov	r0, r6
 8004f98:	f7fe fa3c 	bl	8003414 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 8004f9c:	b968      	cbnz	r0, 8004fba <create_chain+0x1b6>
 8004f9e:	f1b8 0f00 	cmp.w	r8, #0
 8004fa2:	d00a      	beq.n	8004fba <create_chain+0x1b6>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004fa4:	f1b8 0f01 	cmp.w	r8, #1
 8004fa8:	d08d      	beq.n	8004ec6 <create_chain+0xc2>
 8004faa:	69f3      	ldr	r3, [r6, #28]
 8004fac:	4598      	cmp	r8, r3
 8004fae:	d28a      	bcs.n	8004ec6 <create_chain+0xc2>
 8004fb0:	4622      	mov	r2, r4
 8004fb2:	4641      	mov	r1, r8
 8004fb4:	4630      	mov	r0, r6
 8004fb6:	f7fe fa2d 	bl	8003414 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	f040 8098 	bne.w	80050f0 <create_chain+0x2ec>
		fs->last_clst = ncl;
 8004fc0:	6174      	str	r4, [r6, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004fc2:	e9d6 2306 	ldrd	r2, r3, [r6, #24]
 8004fc6:	3b02      	subs	r3, #2
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d801      	bhi.n	8004fd0 <create_chain+0x1cc>
 8004fcc:	3a01      	subs	r2, #1
 8004fce:	61b2      	str	r2, [r6, #24]
		fs->fsi_flag |= 1;
 8004fd0:	7933      	ldrb	r3, [r6, #4]
 8004fd2:	f043 0301 	orr.w	r3, r3, #1
 8004fd6:	7133      	strb	r3, [r6, #4]
 8004fd8:	e7a0      	b.n	8004f1c <create_chain+0x118>
	if (clst >= fs->n_fatent - 2) clst = 0;
 8004fda:	2400      	movs	r4, #0
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004fdc:	2701      	movs	r7, #1
	scl = val = clst; ctr = 0;
 8004fde:	46a2      	mov	sl, r4
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8004fe0:	2501      	movs	r5, #1
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8004fe2:	6b31      	ldr	r1, [r6, #48]	@ 0x30
 8004fe4:	4630      	mov	r0, r6
 8004fe6:	eb01 311a 	add.w	r1, r1, sl, lsr #12
 8004fea:	f7fe f9d5 	bl	8003398 <move_window>
 8004fee:	2800      	cmp	r0, #0
 8004ff0:	d192      	bne.n	8004f18 <create_chain+0x114>
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8004ff2:	69f2      	ldr	r2, [r6, #28]
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8004ff4:	f3ca 0cc8 	ubfx	ip, sl, #3, #9
 8004ff8:	f00a 0307 	and.w	r3, sl, #7
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8004ffc:	f1a2 0e02 	sub.w	lr, r2, #2
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8005000:	eb06 020c 	add.w	r2, r6, ip
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8005004:	fa05 f303 	lsl.w	r3, r5, r3
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8005008:	f892 0038 	ldrb.w	r0, [r2, #56]	@ 0x38
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800500c:	b2db      	uxtb	r3, r3
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800500e:	f10a 0101 	add.w	r1, sl, #1
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8005012:	ea03 0200 	and.w	r2, r3, r0
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8005016:	4571      	cmp	r1, lr
 8005018:	d32d      	bcc.n	8005076 <create_chain+0x272>
				if (!bv) {	/* Is it a free cluster? */
 800501a:	2a00      	cmp	r2, #0
 800501c:	d142      	bne.n	80050a4 <create_chain+0x2a0>
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800501e:	3103      	adds	r1, #3
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8005020:	f10a 0402 	add.w	r4, sl, #2
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8005024:	f63f af7a 	bhi.w	8004f1c <create_chain+0x118>
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8005028:	f00a 0b07 	and.w	fp, sl, #7
 800502c:	2201      	movs	r2, #1
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800502e:	6b31      	ldr	r1, [r6, #48]	@ 0x30
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8005030:	4630      	mov	r0, r6
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8005032:	fa02 fb0b 	lsl.w	fp, r2, fp
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8005036:	eb01 311a 	add.w	r1, r1, sl, lsr #12
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800503a:	f3ca 0ac8 	ubfx	sl, sl, #3, #9
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800503e:	fa5f fb8b 	uxtb.w	fp, fp
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8005042:	f7fe f9a9 	bl	8003398 <move_window>
 8005046:	2800      	cmp	r0, #0
 8005048:	f47f af66 	bne.w	8004f18 <create_chain+0x114>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800504c:	eb06 030a 	add.w	r3, r6, sl
 8005050:	f893 1038 	ldrb.w	r1, [r3, #56]	@ 0x38
 8005054:	ea1b 0f01 	tst.w	fp, r1
 8005058:	f47f af35 	bne.w	8004ec6 <create_chain+0xc2>
				fs->win[i] ^= bm;	/* Flip the bit */
 800505c:	ea8b 0b01 	eor.w	fp, fp, r1
				fs->wflag = 1;
 8005060:	2201      	movs	r2, #1
				fs->win[i] ^= bm;	/* Flip the bit */
 8005062:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
				fs->wflag = 1;
 8005066:	70f2      	strb	r2, [r6, #3]
		if (clst == 0) {							/* Is it a new chain? */
 8005068:	f1b8 0f00 	cmp.w	r8, #0
 800506c:	d144      	bne.n	80050f8 <create_chain+0x2f4>
			obj->stat = 2;							/* Set status 'contiguous' */
 800506e:	2302      	movs	r3, #2
 8005070:	f889 3007 	strb.w	r3, [r9, #7]
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 8005074:	e7a4      	b.n	8004fc0 <create_chain+0x1bc>
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8005076:	005b      	lsls	r3, r3, #1
				if (!bv) {	/* Is it a free cluster? */
 8005078:	2a00      	cmp	r2, #0
 800507a:	d0d0      	beq.n	800501e <create_chain+0x21a>
				if (val == clst) return 0;	/* All cluster scanned? */
 800507c:	42a1      	cmp	r1, r4
 800507e:	f43f af66 	beq.w	8004f4e <create_chain+0x14a>
			} while (bm);
 8005082:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8005086:	d001      	beq.n	800508c <create_chain+0x288>
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8005088:	468a      	mov	sl, r1
 800508a:	e7c0      	b.n	800500e <create_chain+0x20a>
		} while (++i < SS(fs));
 800508c:	f10c 0c01 	add.w	ip, ip, #1
 8005090:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8005094:	eb06 030c 	add.w	r3, r6, ip
		} while (++i < SS(fs));
 8005098:	d06d      	beq.n	8005176 <create_chain+0x372>
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800509a:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800509e:	468a      	mov	sl, r1
			bm = 1;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e7b4      	b.n	800500e <create_chain+0x20a>
				if (val == clst) return 0;	/* All cluster scanned? */
 80050a4:	2c00      	cmp	r4, #0
 80050a6:	f43f af39 	beq.w	8004f1c <create_chain+0x118>
 80050aa:	f04f 0a00 	mov.w	sl, #0
 80050ae:	e798      	b.n	8004fe2 <create_chain+0x1de>
	if (clst >= fs->n_fatent - 2) clst = 0;
 80050b0:	3b02      	subs	r3, #2
	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 80050b2:	1ebc      	subs	r4, r7, #2
	if (clst >= fs->n_fatent - 2) clst = 0;
 80050b4:	429c      	cmp	r4, r3
 80050b6:	bf28      	it	cs
 80050b8:	2400      	movcs	r4, #0
 80050ba:	e790      	b.n	8004fde <create_chain+0x1da>
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 80050bc:	3b01      	subs	r3, #1
 80050be:	f141 31ff 	adc.w	r1, r1, #4294967295
 80050c2:	0a5b      	lsrs	r3, r3, #9
 80050c4:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 80050c8:	fbb3 f3fc 	udiv	r3, r3, ip
					if (cofs <= clen) {
 80050cc:	429a      	cmp	r2, r3
 80050ce:	f63f aefa 	bhi.w	8004ec6 <create_chain+0xc2>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 80050d2:	f43f aeed 	beq.w	8004eb0 <create_chain+0xac>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80050d6:	1ca1      	adds	r1, r4, #2
					val = clst + 1; 	/* Generate the value */
 80050d8:	f104 0301 	add.w	r3, r4, #1
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80050dc:	bf14      	ite	ne
 80050de:	2200      	movne	r2, #0
 80050e0:	2201      	moveq	r2, #1
 80050e2:	e6df      	b.n	8004ea4 <create_chain+0xa0>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 80050e4:	f8d9 3018 	ldr.w	r3, [r9, #24]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	f4bf aec6 	bcs.w	8004e7a <create_chain+0x76>
 80050ee:	e7f2      	b.n	80050d6 <create_chain+0x2d2>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80050f0:	2801      	cmp	r0, #1
 80050f2:	f43f af11 	beq.w	8004f18 <create_chain+0x114>
 80050f6:	e6e6      	b.n	8004ec6 <create_chain+0xc2>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 80050f8:	f899 3007 	ldrb.w	r3, [r9, #7]
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d02d      	beq.n	800515c <create_chain+0x358>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8005100:	f108 0201 	add.w	r2, r8, #1
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8005104:	f8d9 301c 	ldr.w	r3, [r9, #28]
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8005108:	42a2      	cmp	r2, r4
 800510a:	d104      	bne.n	8005116 <create_chain+0x312>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800510c:	b3ab      	cbz	r3, 800517a <create_chain+0x376>
 800510e:	3301      	adds	r3, #1
				if (res == FR_OK) obj->n_frag = 1;
 8005110:	f8c9 301c 	str.w	r3, [r9, #28]
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005114:	e754      	b.n	8004fc0 <create_chain+0x1bc>
				if (obj->n_frag == 0) obj->n_frag = 1;
 8005116:	b913      	cbnz	r3, 800511e <create_chain+0x31a>
 8005118:	2301      	movs	r3, #1
 800511a:	f8c9 301c 	str.w	r3, [r9, #28]
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800511e:	eba8 0203 	sub.w	r2, r8, r3
 8005122:	2b01      	cmp	r3, #1
 8005124:	f102 0101 	add.w	r1, r2, #1
 8005128:	f102 0202 	add.w	r2, r2, #2
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800512c:	bf08      	it	eq
 800512e:	4622      	moveq	r2, r4
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005130:	2901      	cmp	r1, #1
 8005132:	f67f aec8 	bls.w	8004ec6 <create_chain+0xc2>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8005136:	f8d9 0000 	ldr.w	r0, [r9]
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800513a:	69c3      	ldr	r3, [r0, #28]
 800513c:	4299      	cmp	r1, r3
 800513e:	f4bf aec2 	bcs.w	8004ec6 <create_chain+0xc2>
 8005142:	f7fe f967 	bl	8003414 <put_fat.part.0>
		if (res != FR_OK) return res;
 8005146:	2800      	cmp	r0, #0
 8005148:	d1d2      	bne.n	80050f0 <create_chain+0x2ec>
		obj->n_frag--;
 800514a:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800514e:	3b01      	subs	r3, #1
 8005150:	f8c9 301c 	str.w	r3, [r9, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1e2      	bne.n	800511e <create_chain+0x31a>
				if (res == FR_OK) obj->n_frag = 1;
 8005158:	2301      	movs	r3, #1
 800515a:	e7d9      	b.n	8005110 <create_chain+0x30c>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800515c:	1c7b      	adds	r3, r7, #1
 800515e:	42a3      	cmp	r3, r4
 8005160:	f43f af2e 	beq.w	8004fc0 <create_chain+0x1bc>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8005164:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8005168:	1afb      	subs	r3, r7, r3
 800516a:	f8c9 3018 	str.w	r3, [r9, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800516e:	2303      	movs	r3, #3
 8005170:	f889 3007 	strb.w	r3, [r9, #7]
 8005174:	e7c4      	b.n	8005100 <create_chain+0x2fc>
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8005176:	468a      	mov	sl, r1
 8005178:	e733      	b.n	8004fe2 <create_chain+0x1de>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800517a:	2302      	movs	r3, #2
 800517c:	e7c8      	b.n	8005110 <create_chain+0x30c>
 800517e:	461c      	mov	r4, r3
 8005180:	e6cc      	b.n	8004f1c <create_chain+0x118>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005182:	2c01      	cmp	r4, #1
	FATFS *fs = obj->fs;
 8005184:	f8d9 5000 	ldr.w	r5, [r9]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005188:	f67f ae9d 	bls.w	8004ec6 <create_chain+0xc2>
 800518c:	e657      	b.n	8004e3e <create_chain+0x3a>
 800518e:	bf00      	nop

08005190 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005190:	2901      	cmp	r1, #1
{
 8005192:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
 8005196:	6806      	ldr	r6, [r0, #0]
{
 8005198:	b083      	sub	sp, #12
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800519a:	d91b      	bls.n	80051d4 <remove_chain+0x44>
 800519c:	69f3      	ldr	r3, [r6, #28]
 800519e:	460c      	mov	r4, r1
 80051a0:	428b      	cmp	r3, r1
 80051a2:	d917      	bls.n	80051d4 <remove_chain+0x44>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80051a4:	4680      	mov	r8, r0
 80051a6:	4691      	mov	r9, r2
 80051a8:	b1da      	cbz	r2, 80051e2 <remove_chain+0x52>
 80051aa:	7832      	ldrb	r2, [r6, #0]
 80051ac:	2a04      	cmp	r2, #4
 80051ae:	d015      	beq.n	80051dc <remove_chain+0x4c>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80051b0:	454b      	cmp	r3, r9
 80051b2:	d90f      	bls.n	80051d4 <remove_chain+0x44>
 80051b4:	f1b9 0f01 	cmp.w	r9, #1
 80051b8:	d00c      	beq.n	80051d4 <remove_chain+0x44>
 80051ba:	f04f 32ff 	mov.w	r2, #4294967295
 80051be:	4649      	mov	r1, r9
 80051c0:	4630      	mov	r0, r6
 80051c2:	f7fe f927 	bl	8003414 <put_fat.part.0>
		if (res != FR_OK) return res;
 80051c6:	b930      	cbnz	r0, 80051d6 <remove_chain+0x46>
	FATFS *fs = obj->fs;
 80051c8:	f8d8 5000 	ldr.w	r5, [r8]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80051cc:	69eb      	ldr	r3, [r5, #28]
 80051ce:	46a3      	mov	fp, r4
 80051d0:	429c      	cmp	r4, r3
 80051d2:	d308      	bcc.n	80051e6 <remove_chain+0x56>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80051d4:	2002      	movs	r0, #2
}
 80051d6:	b003      	add	sp, #12
 80051d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80051dc:	79c2      	ldrb	r2, [r0, #7]
 80051de:	2a02      	cmp	r2, #2
 80051e0:	d1e6      	bne.n	80051b0 <remove_chain+0x20>
 80051e2:	4635      	mov	r5, r6
 80051e4:	e7f3      	b.n	80051ce <remove_chain+0x3e>
		switch (fs->fs_type) {
 80051e6:	782b      	ldrb	r3, [r5, #0]
 80051e8:	3b01      	subs	r3, #1
 80051ea:	2b03      	cmp	r3, #3
 80051ec:	d8f2      	bhi.n	80051d4 <remove_chain+0x44>
 80051ee:	e8df f003 	tbb	[pc, r3]
 80051f2:	6776      	.short	0x6776
 80051f4:	022f      	.short	0x022f
			if (obj->objsize) {
 80051f6:	e9d8 3104 	ldrd	r3, r1, [r8, #16]
 80051fa:	ea53 0201 	orrs.w	r2, r3, r1
 80051fe:	d0e9      	beq.n	80051d4 <remove_chain+0x44>
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8005200:	f898 0007 	ldrb.w	r0, [r8, #7]
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8005204:	f8d8 2008 	ldr.w	r2, [r8, #8]
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8005208:	2802      	cmp	r0, #2
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800520a:	896f      	ldrh	r7, [r5, #10]
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800520c:	eba4 0202 	sub.w	r2, r4, r2
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8005210:	f000 80d8 	beq.w	80053c4 <remove_chain+0x234>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8005214:	2803      	cmp	r0, #3
 8005216:	f000 80ec 	beq.w	80053f2 <remove_chain+0x262>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800521a:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800521e:	2b00      	cmp	r3, #0
 8005220:	f040 80ed 	bne.w	80053fe <remove_chain+0x26e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005224:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8005226:	4628      	mov	r0, r5
 8005228:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800522c:	f7fe f8b4 	bl	8003398 <move_window>
 8005230:	2800      	cmp	r0, #0
 8005232:	d15e      	bne.n	80052f2 <remove_chain+0x162>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8005234:	00a3      	lsls	r3, r4, #2
 8005236:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800523a:	442b      	add	r3, r5
 800523c:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
		if (nxt == 0) break;				/* Empty cluster? */
 800523e:	f037 4700 	bics.w	r7, r7, #2147483648	@ 0x80000000
 8005242:	d115      	bne.n	8005270 <remove_chain+0xe0>
	if (fs->fs_type == FS_EXFAT) {
 8005244:	7833      	ldrb	r3, [r6, #0]
 8005246:	2b04      	cmp	r3, #4
 8005248:	f000 80b2 	beq.w	80053b0 <remove_chain+0x220>
	return FR_OK;
 800524c:	2000      	movs	r0, #0
 800524e:	e7c2      	b.n	80051d6 <remove_chain+0x46>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005250:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8005252:	4628      	mov	r0, r5
 8005254:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8005258:	f7fe f89e 	bl	8003398 <move_window>
 800525c:	2800      	cmp	r0, #0
 800525e:	d148      	bne.n	80052f2 <remove_chain+0x162>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005260:	00a3      	lsls	r3, r4, #2
 8005262:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 8005266:	442b      	add	r3, r5
 8005268:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
		if (nxt == 0) break;				/* Empty cluster? */
 800526a:	f037 4770 	bics.w	r7, r7, #4026531840	@ 0xf0000000
 800526e:	d0e9      	beq.n	8005244 <remove_chain+0xb4>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005270:	2f01      	cmp	r7, #1
 8005272:	d0af      	beq.n	80051d4 <remove_chain+0x44>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8005274:	7832      	ldrb	r2, [r6, #0]
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005276:	69f3      	ldr	r3, [r6, #28]
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8005278:	2a04      	cmp	r2, #4
 800527a:	d009      	beq.n	8005290 <remove_chain+0x100>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800527c:	429c      	cmp	r4, r3
 800527e:	d2a9      	bcs.n	80051d4 <remove_chain+0x44>
 8005280:	2200      	movs	r2, #0
 8005282:	4621      	mov	r1, r4
 8005284:	4630      	mov	r0, r6
 8005286:	f7fe f8c5 	bl	8003414 <put_fat.part.0>
			if (res != FR_OK) return res;
 800528a:	2800      	cmp	r0, #0
 800528c:	d1a3      	bne.n	80051d6 <remove_chain+0x46>
 800528e:	69f3      	ldr	r3, [r6, #28]
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005290:	69b2      	ldr	r2, [r6, #24]
 8005292:	1e99      	subs	r1, r3, #2
 8005294:	428a      	cmp	r2, r1
 8005296:	d205      	bcs.n	80052a4 <remove_chain+0x114>
			fs->free_clst++;
 8005298:	3201      	adds	r2, #1
 800529a:	61b2      	str	r2, [r6, #24]
			fs->fsi_flag |= 1;
 800529c:	7932      	ldrb	r2, [r6, #4]
 800529e:	f042 0201 	orr.w	r2, r2, #1
 80052a2:	7132      	strb	r2, [r6, #4]
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 80052a4:	3401      	adds	r4, #1
 80052a6:	42bc      	cmp	r4, r7
 80052a8:	d003      	beq.n	80052b2 <remove_chain+0x122>
			if (fs->fs_type == FS_EXFAT) {
 80052aa:	7832      	ldrb	r2, [r6, #0]
 80052ac:	2a04      	cmp	r2, #4
 80052ae:	d024      	beq.n	80052fa <remove_chain+0x16a>
 80052b0:	46bb      	mov	fp, r7
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80052b2:	429f      	cmp	r7, r3
 80052b4:	d2c6      	bcs.n	8005244 <remove_chain+0xb4>
	FATFS *fs = obj->fs;
 80052b6:	f8d8 5000 	ldr.w	r5, [r8]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80052ba:	463c      	mov	r4, r7
 80052bc:	69eb      	ldr	r3, [r5, #28]
 80052be:	e787      	b.n	80051d0 <remove_chain+0x40>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80052c0:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 80052c2:	4628      	mov	r0, r5
 80052c4:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80052c8:	f7fe f866 	bl	8003398 <move_window>
 80052cc:	b988      	cbnz	r0, 80052f2 <remove_chain+0x162>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80052ce:	0063      	lsls	r3, r4, #1
 80052d0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80052d4:	442b      	add	r3, r5
 80052d6:	8f1f      	ldrh	r7, [r3, #56]	@ 0x38
		if (nxt == 0) break;				/* Empty cluster? */
 80052d8:	2f00      	cmp	r7, #0
 80052da:	d1c9      	bne.n	8005270 <remove_chain+0xe0>
 80052dc:	e7b2      	b.n	8005244 <remove_chain+0xb4>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80052de:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
			bc = (UINT)clst; bc += bc / 2;
 80052e0:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80052e4:	4628      	mov	r0, r5
 80052e6:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 80052ea:	f7fe f855 	bl	8003398 <move_window>
 80052ee:	2800      	cmp	r0, #0
 80052f0:	d042      	beq.n	8005378 <remove_chain+0x1e8>
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 80052f2:	2001      	movs	r0, #1
}
 80052f4:	b003      	add	sp, #12
 80052f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 80052fa:	eba4 050b 	sub.w	r5, r4, fp
	clst -= 2;	/* The first bit corresponds to cluster #2 */
 80052fe:	f1ab 0b02 	sub.w	fp, fp, #2
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8005302:	f04f 0a01 	mov.w	sl, #1
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8005306:	6b31      	ldr	r1, [r6, #48]	@ 0x30
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8005308:	f00b 0407 	and.w	r4, fp, #7
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800530c:	eb01 311b 	add.w	r1, r1, fp, lsr #12
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8005310:	f3cb 0bc8 	ubfx	fp, fp, #3, #9
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8005314:	fa0a f404 	lsl.w	r4, sl, r4
 8005318:	b2e4      	uxtb	r4, r4
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800531a:	1c4b      	adds	r3, r1, #1
 800531c:	4630      	mov	r0, r6
 800531e:	9301      	str	r3, [sp, #4]
 8005320:	f7fe f83a 	bl	8003398 <move_window>
 8005324:	2800      	cmp	r0, #0
 8005326:	d1e4      	bne.n	80052f2 <remove_chain+0x162>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8005328:	eb06 010b 	add.w	r1, r6, fp
 800532c:	f891 3038 	ldrb.w	r3, [r1, #56]	@ 0x38
 8005330:	421c      	tst	r4, r3
 8005332:	f43f af4f 	beq.w	80051d4 <remove_chain+0x44>
				fs->win[i] ^= bm;	/* Flip the bit */
 8005336:	4063      	eors	r3, r4
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8005338:	3d01      	subs	r5, #1
				fs->win[i] ^= bm;	/* Flip the bit */
 800533a:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
				fs->wflag = 1;
 800533e:	f886 a003 	strb.w	sl, [r6, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8005342:	d016      	beq.n	8005372 <remove_chain+0x1e2>
			} while (bm <<= 1);		/* Next bit */
 8005344:	0064      	lsls	r4, r4, #1
 8005346:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 800534a:	d109      	bne.n	8005360 <remove_chain+0x1d0>
		} while (++i < SS(fs));		/* Next byte */
 800534c:	f10b 0b01 	add.w	fp, fp, #1
			bm = 1;
 8005350:	2401      	movs	r4, #1
		} while (++i < SS(fs));		/* Next byte */
 8005352:	f5bb 7f00 	cmp.w	fp, #512	@ 0x200
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8005356:	eb06 010b 	add.w	r1, r6, fp
		} while (++i < SS(fs));		/* Next byte */
 800535a:	d02f      	beq.n	80053bc <remove_chain+0x22c>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800535c:	f891 3038 	ldrb.w	r3, [r1, #56]	@ 0x38
 8005360:	421c      	tst	r4, r3
				fs->win[i] ^= bm;	/* Flip the bit */
 8005362:	ea83 0304 	eor.w	r3, r3, r4
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8005366:	f43f af35 	beq.w	80051d4 <remove_chain+0x44>
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800536a:	3d01      	subs	r5, #1
				fs->win[i] ^= bm;	/* Flip the bit */
 800536c:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8005370:	d1e8      	bne.n	8005344 <remove_chain+0x1b4>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005372:	69f3      	ldr	r3, [r6, #28]
 8005374:	46bb      	mov	fp, r7
 8005376:	e79c      	b.n	80052b2 <remove_chain+0x122>
			wc = fs->win[bc++ % SS(fs)];
 8005378:	f3c7 0308 	ubfx	r3, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800537c:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
			wc = fs->win[bc++ % SS(fs)];
 800537e:	3701      	adds	r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005380:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 8005382:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005384:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8005388:	f893 a038 	ldrb.w	sl, [r3, #56]	@ 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800538c:	f7fe f804 	bl	8003398 <move_window>
 8005390:	2800      	cmp	r0, #0
 8005392:	d1ae      	bne.n	80052f2 <remove_chain+0x162>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005394:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005398:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800539a:	eb05 0307 	add.w	r3, r5, r7
 800539e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80053a2:	ea4a 2703 	orr.w	r7, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80053a6:	d51e      	bpl.n	80053e6 <remove_chain+0x256>
		if (nxt == 0) break;				/* Empty cluster? */
 80053a8:	093f      	lsrs	r7, r7, #4
 80053aa:	f47f af61 	bne.w	8005270 <remove_chain+0xe0>
 80053ae:	e749      	b.n	8005244 <remove_chain+0xb4>
		if (pclst == 0) {	/* Does the object have no chain? */
 80053b0:	f1b9 0f00 	cmp.w	r9, #0
 80053b4:	d126      	bne.n	8005404 <remove_chain+0x274>
			obj->stat = 0;		/* Change the object status 'initial' */
 80053b6:	f888 9007 	strb.w	r9, [r8, #7]
 80053ba:	e747      	b.n	800524c <remove_chain+0xbc>
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 80053bc:	9901      	ldr	r1, [sp, #4]
		i = 0;
 80053be:	f04f 0b00 	mov.w	fp, #0
 80053c2:	e7aa      	b.n	800531a <remove_chain+0x18a>
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 80053c4:	3b01      	subs	r3, #1
 80053c6:	f141 31ff 	adc.w	r1, r1, #4294967295
 80053ca:	0a5b      	lsrs	r3, r3, #9
 80053cc:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 80053d0:	fbb3 f3f7 	udiv	r3, r3, r7
					if (cofs <= clen) {
 80053d4:	429a      	cmp	r2, r3
 80053d6:	f63f aefd 	bhi.w	80051d4 <remove_chain+0x44>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 80053da:	d010      	beq.n	80053fe <remove_chain+0x26e>
					val = clst + 1; 	/* Generate the value */
 80053dc:	1c67      	adds	r7, r4, #1
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80053de:	1c7b      	adds	r3, r7, #1
 80053e0:	f47f af48 	bne.w	8005274 <remove_chain+0xe4>
 80053e4:	e785      	b.n	80052f2 <remove_chain+0x162>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80053e6:	f3c7 070b 	ubfx	r7, r7, #0, #12
		if (nxt == 0) break;				/* Empty cluster? */
 80053ea:	2f00      	cmp	r7, #0
 80053ec:	f47f af40 	bne.w	8005270 <remove_chain+0xe0>
 80053f0:	e728      	b.n	8005244 <remove_chain+0xb4>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 80053f2:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	f4bf af0f 	bcs.w	800521a <remove_chain+0x8a>
 80053fc:	e7ee      	b.n	80053dc <remove_chain+0x24c>
 80053fe:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8005402:	e737      	b.n	8005274 <remove_chain+0xe4>
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 8005404:	f898 3007 	ldrb.w	r3, [r8, #7]
 8005408:	2b03      	cmp	r3, #3
 800540a:	f47f af1f 	bne.w	800524c <remove_chain+0xbc>
 800540e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005412:	454b      	cmp	r3, r9
 8005414:	f63f af1a 	bhi.w	800524c <remove_chain+0xbc>
 8005418:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800541c:	4413      	add	r3, r2
 800541e:	454b      	cmp	r3, r9
 8005420:	f4ff af14 	bcc.w	800524c <remove_chain+0xbc>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8005424:	2302      	movs	r3, #2
 8005426:	f888 3007 	strb.w	r3, [r8, #7]
 800542a:	e70f      	b.n	800524c <remove_chain+0xbc>

0800542c <dir_alloc>:
{
 800542c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005430:	460b      	mov	r3, r1
 8005432:	b089      	sub	sp, #36	@ 0x24
	res = dir_sdi(dp, 0);
 8005434:	2100      	movs	r1, #0
{
 8005436:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8005438:	f8d0 a000 	ldr.w	sl, [r0]
{
 800543c:	9302      	str	r3, [sp, #8]
	res = dir_sdi(dp, 0);
 800543e:	f7fe ff65 	bl	800430c <dir_sdi>
	if (res == FR_OK) {
 8005442:	4606      	mov	r6, r0
 8005444:	b130      	cbz	r0, 8005454 <dir_alloc+0x28>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005446:	2804      	cmp	r0, #4
 8005448:	f000 80bb 	beq.w	80055c2 <dir_alloc+0x196>
}
 800544c:	4630      	mov	r0, r6
 800544e:	b009      	add	sp, #36	@ 0x24
 8005450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, dp->sect);
 8005454:	f8d4 9038 	ldr.w	r9, [r4, #56]	@ 0x38
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005458:	f10a 0338 	add.w	r3, sl, #56	@ 0x38
	if (sector != fs->winsect) {	/* Window offset changed? */
 800545c:	f8da b034 	ldr.w	fp, [sl, #52]	@ 0x34
		n = 0;
 8005460:	4680      	mov	r8, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005462:	464f      	mov	r7, r9
 8005464:	9303      	str	r3, [sp, #12]
 8005466:	465a      	mov	r2, fp
 8005468:	9005      	str	r0, [sp, #20]
 800546a:	9401      	str	r4, [sp, #4]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800546c:	42ba      	cmp	r2, r7
 800546e:	d016      	beq.n	800549e <dir_alloc+0x72>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005470:	f89a 3003 	ldrb.w	r3, [sl, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005474:	f89a 0001 	ldrb.w	r0, [sl, #1]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005478:	2b00      	cmp	r3, #0
 800547a:	d156      	bne.n	800552a <dir_alloc+0xfe>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800547c:	2301      	movs	r3, #1
 800547e:	463a      	mov	r2, r7
 8005480:	9903      	ldr	r1, [sp, #12]
 8005482:	f7fd fef3 	bl	800326c <disk_read>
 8005486:	b140      	cbz	r0, 800549a <dir_alloc+0x6e>
			fs->winsect = sector;
 8005488:	f04f 33ff 	mov.w	r3, #4294967295
 800548c:	f8ca 3034 	str.w	r3, [sl, #52]	@ 0x34
				res = FR_DISK_ERR;
 8005490:	2601      	movs	r6, #1
}
 8005492:	4630      	mov	r0, r6
 8005494:	b009      	add	sp, #36	@ 0x24
 8005496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 800549a:	f8ca 7034 	str.w	r7, [sl, #52]	@ 0x34
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800549e:	9b01      	ldr	r3, [sp, #4]
 80054a0:	f89a 2000 	ldrb.w	r2, [sl]
 80054a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054a6:	2a04      	cmp	r2, #4
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	d02f      	beq.n	800550c <dir_alloc+0xe0>
 80054ac:	2be5      	cmp	r3, #229	@ 0xe5
 80054ae:	d02f      	beq.n	8005510 <dir_alloc+0xe4>
 80054b0:	fab3 f283 	clz	r2, r3
 80054b4:	0952      	lsrs	r2, r2, #5
 80054b6:	b35b      	cbz	r3, 8005510 <dir_alloc+0xe4>
				n = 0;					/* Not a blank entry. Restart to search */
 80054b8:	4690      	mov	r8, r2
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80054ba:	9a01      	ldr	r2, [sp, #4]
 80054bc:	6b15      	ldr	r5, [r2, #48]	@ 0x30
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80054be:	6b93      	ldr	r3, [r2, #56]	@ 0x38
	FATFS *fs = dp->obj.fs;
 80054c0:	6816      	ldr	r6, [r2, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80054c2:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d07c      	beq.n	80055c2 <dir_alloc+0x196>
 80054c8:	7832      	ldrb	r2, [r6, #0]
 80054ca:	2a04      	cmp	r2, #4
 80054cc:	bf14      	ite	ne
 80054ce:	f44f 1200 	movne.w	r2, #2097152	@ 0x200000
 80054d2:	f04f 5280 	moveq.w	r2, #268435456	@ 0x10000000
 80054d6:	4295      	cmp	r5, r2
 80054d8:	d273      	bcs.n	80055c2 <dir_alloc+0x196>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80054da:	f3c5 0b08 	ubfx	fp, r5, #0, #9
 80054de:	f1bb 0f00 	cmp.w	fp, #0
 80054e2:	d109      	bne.n	80054f8 <dir_alloc+0xcc>
		dp->sect++;				/* Next sector */
 80054e4:	9a01      	ldr	r2, [sp, #4]
 80054e6:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 80054e8:	6b51      	ldr	r1, [r2, #52]	@ 0x34
		dp->sect++;				/* Next sector */
 80054ea:	6393      	str	r3, [r2, #56]	@ 0x38
		if (!dp->clust) {		/* Static table */
 80054ec:	2900      	cmp	r1, #0
 80054ee:	d144      	bne.n	800557a <dir_alloc+0x14e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80054f0:	8932      	ldrh	r2, [r6, #8]
 80054f2:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 80054f6:	d962      	bls.n	80055be <dir_alloc+0x192>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80054f8:	463a      	mov	r2, r7
 80054fa:	f106 0938 	add.w	r9, r6, #56	@ 0x38
 80054fe:	461f      	mov	r7, r3
	dp->dptr = ofs;						/* Current entry */
 8005500:	9901      	ldr	r1, [sp, #4]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005502:	eb09 030b 	add.w	r3, r9, fp
	dp->dptr = ofs;						/* Current entry */
 8005506:	630d      	str	r5, [r1, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005508:	63cb      	str	r3, [r1, #60]	@ 0x3c
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800550a:	e7af      	b.n	800546c <dir_alloc+0x40>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800550c:	0619      	lsls	r1, r3, #24
 800550e:	d409      	bmi.n	8005524 <dir_alloc+0xf8>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005510:	f108 0801 	add.w	r8, r8, #1
 8005514:	9b02      	ldr	r3, [sp, #8]
 8005516:	4598      	cmp	r8, r3
 8005518:	d1cf      	bne.n	80054ba <dir_alloc+0x8e>
 800551a:	9e05      	ldr	r6, [sp, #20]
}
 800551c:	4630      	mov	r0, r6
 800551e:	b009      	add	sp, #36	@ 0x24
 8005520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				n = 0;					/* Not a blank entry. Restart to search */
 8005524:	f04f 0800 	mov.w	r8, #0
 8005528:	e7c7      	b.n	80054ba <dir_alloc+0x8e>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800552a:	2301      	movs	r3, #1
 800552c:	9903      	ldr	r1, [sp, #12]
 800552e:	9204      	str	r2, [sp, #16]
 8005530:	f7fd feb8 	bl	80032a4 <disk_write>
 8005534:	2800      	cmp	r0, #0
 8005536:	d1ab      	bne.n	8005490 <dir_alloc+0x64>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005538:	f8da 3028 	ldr.w	r3, [sl, #40]	@ 0x28
 800553c:	9a04      	ldr	r2, [sp, #16]
			fs->wflag = 0;
 800553e:	f88a 0003 	strb.w	r0, [sl, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005542:	1ad1      	subs	r1, r2, r3
 8005544:	f8da 3020 	ldr.w	r3, [sl, #32]
 8005548:	4299      	cmp	r1, r3
 800554a:	d213      	bcs.n	8005574 <dir_alloc+0x148>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800554c:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8005550:	2d01      	cmp	r5, #1
 8005552:	d90f      	bls.n	8005574 <dir_alloc+0x148>
 8005554:	4614      	mov	r4, r2
 8005556:	9e03      	ldr	r6, [sp, #12]
 8005558:	e001      	b.n	800555e <dir_alloc+0x132>
					wsect += fs->fsize;
 800555a:	f8da 3020 	ldr.w	r3, [sl, #32]
 800555e:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005560:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8005562:	2301      	movs	r3, #1
 8005564:	4631      	mov	r1, r6
 8005566:	4622      	mov	r2, r4
 8005568:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800556c:	f7fd fe9a 	bl	80032a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005570:	2d01      	cmp	r5, #1
 8005572:	d1f2      	bne.n	800555a <dir_alloc+0x12e>
 8005574:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8005578:	e780      	b.n	800547c <dir_alloc+0x50>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800557a:	8972      	ldrh	r2, [r6, #10]
 800557c:	3a01      	subs	r2, #1
 800557e:	ea12 2255 	ands.w	r2, r2, r5, lsr #9
 8005582:	d1b9      	bne.n	80054f8 <dir_alloc+0xcc>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005584:	9801      	ldr	r0, [sp, #4]
 8005586:	f7fd ffc5 	bl	8003514 <get_fat>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800558a:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800558c:	4607      	mov	r7, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800558e:	d979      	bls.n	8005684 <dir_alloc+0x258>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005590:	1c42      	adds	r2, r0, #1
 8005592:	f43f af7d 	beq.w	8005490 <dir_alloc+0x64>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005596:	69f3      	ldr	r3, [r6, #28]
 8005598:	4298      	cmp	r0, r3
 800559a:	d214      	bcs.n	80055c6 <dir_alloc+0x19a>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800559c:	3b02      	subs	r3, #2
	clst -= 2;
 800559e:	1e84      	subs	r4, r0, #2
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80055a0:	f106 0938 	add.w	r9, r6, #56	@ 0x38
				dp->clust = clst;		/* Initialize data for new cluster */
 80055a4:	9a01      	ldr	r2, [sp, #4]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80055a6:	42a3      	cmp	r3, r4
				dp->clust = clst;		/* Initialize data for new cluster */
 80055a8:	6357      	str	r7, [r2, #52]	@ 0x34
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80055aa:	d96d      	bls.n	8005688 <dir_alloc+0x25c>
	return clst * fs->csize + fs->database;
 80055ac:	8972      	ldrh	r2, [r6, #10]
 80055ae:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 80055b0:	fb04 3702 	mla	r7, r4, r2, r3
				dp->sect = clust2sect(fs, clst);
 80055b4:	9b01      	ldr	r3, [sp, #4]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80055b6:	f8da 2034 	ldr.w	r2, [sl, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 80055ba:	639f      	str	r7, [r3, #56]	@ 0x38
 80055bc:	e7a0      	b.n	8005500 <dir_alloc+0xd4>
				dp->sect = 0; return FR_NO_FILE;
 80055be:	9c01      	ldr	r4, [sp, #4]
 80055c0:	63a1      	str	r1, [r4, #56]	@ 0x38
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80055c2:	2607      	movs	r6, #7
	return res;
 80055c4:	e742      	b.n	800544c <dir_alloc+0x20>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80055c6:	9c01      	ldr	r4, [sp, #4]
 80055c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80055ca:	4620      	mov	r0, r4
 80055cc:	f7ff fc1a 	bl	8004e04 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80055d0:	4607      	mov	r7, r0
 80055d2:	2800      	cmp	r0, #0
 80055d4:	d0f5      	beq.n	80055c2 <dir_alloc+0x196>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80055d6:	2801      	cmp	r0, #1
 80055d8:	d054      	beq.n	8005684 <dir_alloc+0x258>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80055da:	1c43      	adds	r3, r0, #1
 80055dc:	f43f af58 	beq.w	8005490 <dir_alloc+0x64>
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 80055e0:	79e3      	ldrb	r3, [r4, #7]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80055e2:	f106 0938 	add.w	r9, r6, #56	@ 0x38
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 80055e6:	f043 0304 	orr.w	r3, r3, #4
 80055ea:	71e3      	strb	r3, [r4, #7]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80055ec:	78f3      	ldrb	r3, [r6, #3]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d156      	bne.n	80056a0 <dir_alloc+0x274>
		*d++ = (BYTE)val;
 80055f2:	2100      	movs	r1, #0
 80055f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055f8:	4648      	mov	r0, r9
	clst -= 2;
 80055fa:	1ebc      	subs	r4, r7, #2
		*d++ = (BYTE)val;
 80055fc:	f003 fa4b 	bl	8008a96 <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005600:	69f3      	ldr	r3, [r6, #28]
	return clst * fs->csize + fs->database;
 8005602:	8971      	ldrh	r1, [r6, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005604:	3b02      	subs	r3, #2
 8005606:	429c      	cmp	r4, r3
 8005608:	d26e      	bcs.n	80056e8 <dir_alloc+0x2bc>
	return clst * fs->csize + fs->database;
 800560a:	6b32      	ldr	r2, [r6, #48]	@ 0x30
 800560c:	fb04 2201 	mla	r2, r4, r1, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005610:	6372      	str	r2, [r6, #52]	@ 0x34
 8005612:	2900      	cmp	r1, #0
 8005614:	d042      	beq.n	800569c <dir_alloc+0x270>
 8005616:	2100      	movs	r1, #0
 8005618:	f8cd a018 	str.w	sl, [sp, #24]
 800561c:	9407      	str	r4, [sp, #28]
 800561e:	4614      	mov	r4, r2
 8005620:	468a      	mov	sl, r1
 8005622:	f8cd 8010 	str.w	r8, [sp, #16]
						fs->wflag = 1;
 8005626:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800562a:	4622      	mov	r2, r4
 800562c:	4649      	mov	r1, r9
 800562e:	7870      	ldrb	r0, [r6, #1]
						fs->wflag = 1;
 8005630:	70f3      	strb	r3, [r6, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005632:	2301      	movs	r3, #1
 8005634:	f7fd fe36 	bl	80032a4 <disk_write>
 8005638:	2800      	cmp	r0, #0
 800563a:	f47f af29 	bne.w	8005490 <dir_alloc+0x64>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800563e:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
			fs->wflag = 0;
 8005640:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005642:	1ae1      	subs	r1, r4, r3
 8005644:	6a33      	ldr	r3, [r6, #32]
 8005646:	4299      	cmp	r1, r3
 8005648:	d212      	bcs.n	8005670 <dir_alloc+0x244>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800564a:	f896 8002 	ldrb.w	r8, [r6, #2]
 800564e:	f1b8 0f01 	cmp.w	r8, #1
 8005652:	d801      	bhi.n	8005658 <dir_alloc+0x22c>
 8005654:	e00c      	b.n	8005670 <dir_alloc+0x244>
					wsect += fs->fsize;
 8005656:	6a33      	ldr	r3, [r6, #32]
 8005658:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800565a:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 800565e:	2301      	movs	r3, #1
 8005660:	4649      	mov	r1, r9
 8005662:	4622      	mov	r2, r4
 8005664:	7870      	ldrb	r0, [r6, #1]
 8005666:	f7fd fe1d 	bl	80032a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800566a:	f1b8 0f01 	cmp.w	r8, #1
 800566e:	d1f2      	bne.n	8005656 <dir_alloc+0x22a>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005670:	6b70      	ldr	r0, [r6, #52]	@ 0x34
 8005672:	f10a 0301 	add.w	r3, sl, #1
 8005676:	8971      	ldrh	r1, [r6, #10]
 8005678:	1c44      	adds	r4, r0, #1
 800567a:	428b      	cmp	r3, r1
 800567c:	6374      	str	r4, [r6, #52]	@ 0x34
 800567e:	d205      	bcs.n	800568c <dir_alloc+0x260>
 8005680:	469a      	mov	sl, r3
 8005682:	e7d0      	b.n	8005626 <dir_alloc+0x1fa>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005684:	2602      	movs	r6, #2
 8005686:	e6e1      	b.n	800544c <dir_alloc+0x20>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005688:	2700      	movs	r7, #0
 800568a:	e793      	b.n	80055b4 <dir_alloc+0x188>
					fs->winsect -= n;							/* Restore window offset */
 800568c:	4651      	mov	r1, sl
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800568e:	69f3      	ldr	r3, [r6, #28]
					fs->winsect -= n;							/* Restore window offset */
 8005690:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005694:	1a42      	subs	r2, r0, r1
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005696:	3b02      	subs	r3, #2
					fs->winsect -= n;							/* Restore window offset */
 8005698:	e9dd a406 	ldrd	sl, r4, [sp, #24]
 800569c:	6372      	str	r2, [r6, #52]	@ 0x34
 800569e:	e781      	b.n	80055a4 <dir_alloc+0x178>
		wsect = fs->winsect;	/* Current sector number */
 80056a0:	6b72      	ldr	r2, [r6, #52]	@ 0x34
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80056a2:	2301      	movs	r3, #1
 80056a4:	4649      	mov	r1, r9
 80056a6:	7870      	ldrb	r0, [r6, #1]
 80056a8:	9204      	str	r2, [sp, #16]
 80056aa:	f7fd fdfb 	bl	80032a4 <disk_write>
 80056ae:	2800      	cmp	r0, #0
 80056b0:	f47f aeee 	bne.w	8005490 <dir_alloc+0x64>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80056b4:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 80056b6:	9a04      	ldr	r2, [sp, #16]
			fs->wflag = 0;
 80056b8:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80056ba:	1ad1      	subs	r1, r2, r3
 80056bc:	6a33      	ldr	r3, [r6, #32]
 80056be:	4299      	cmp	r1, r3
 80056c0:	d297      	bcs.n	80055f2 <dir_alloc+0x1c6>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80056c2:	78b4      	ldrb	r4, [r6, #2]
 80056c4:	2c01      	cmp	r4, #1
 80056c6:	d994      	bls.n	80055f2 <dir_alloc+0x1c6>
 80056c8:	9504      	str	r5, [sp, #16]
 80056ca:	4615      	mov	r5, r2
 80056cc:	e000      	b.n	80056d0 <dir_alloc+0x2a4>
					wsect += fs->fsize;
 80056ce:	6a33      	ldr	r3, [r6, #32]
 80056d0:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80056d2:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80056d4:	2301      	movs	r3, #1
 80056d6:	4649      	mov	r1, r9
 80056d8:	462a      	mov	r2, r5
 80056da:	7870      	ldrb	r0, [r6, #1]
 80056dc:	f7fd fde2 	bl	80032a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80056e0:	2c01      	cmp	r4, #1
 80056e2:	d1f4      	bne.n	80056ce <dir_alloc+0x2a2>
 80056e4:	9d04      	ldr	r5, [sp, #16]
 80056e6:	e784      	b.n	80055f2 <dir_alloc+0x1c6>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80056e8:	2200      	movs	r2, #0
 80056ea:	e791      	b.n	8005610 <dir_alloc+0x1e4>

080056ec <dir_register>:
{
 80056ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80056f0:	f890 e04b 	ldrb.w	lr, [r0, #75]	@ 0x4b
{
 80056f4:	b09b      	sub	sp, #108	@ 0x6c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80056f6:	f01e 0ba0 	ands.w	fp, lr, #160	@ 0xa0
 80056fa:	f040 8422 	bne.w	8005f42 <dir_register+0x856>
	FATFS *fs = dp->obj.fs;
 80056fe:	f8d0 8000 	ldr.w	r8, [r0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8005702:	4605      	mov	r5, r0
 8005704:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 8005708:	f8bc 3000 	ldrh.w	r3, [ip]
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 84f2 	beq.w	80060f6 <dir_register+0xa0a>
 8005712:	4663      	mov	r3, ip
 8005714:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 8005718:	f10b 0b01 	add.w	fp, fp, #1
 800571c:	2a00      	cmp	r2, #0
 800571e:	d1f9      	bne.n	8005714 <dir_register+0x28>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8005720:	f898 3000 	ldrb.w	r3, [r8]
 8005724:	2b04      	cmp	r3, #4
 8005726:	f000 839d 	beq.w	8005e64 <dir_register+0x778>
			*d++ = *s++;
 800572a:	f105 0640 	add.w	r6, r5, #64	@ 0x40
 800572e:	ab06      	add	r3, sp, #24
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005730:	f01e 0f01 	tst.w	lr, #1
			*d++ = *s++;
 8005734:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8005738:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800573c:	f000 815a 	beq.w	80059f4 <dir_register+0x308>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005740:	2340      	movs	r3, #64	@ 0x40
			*d++ = *s++;
 8005742:	9000      	str	r0, [sp, #0]
 8005744:	f89d 9022 	ldrb.w	r9, [sp, #34]	@ 0x22
		for (n = 1; n < 100; n++) {
 8005748:	f04f 0a01 	mov.w	sl, #1
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800574c:	f885 304b 	strb.w	r3, [r5, #75]	@ 0x4b
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005750:	2720      	movs	r7, #32
			*d++ = *s++;
 8005752:	f8bd 3020 	ldrh.w	r3, [sp, #32]
				if (sr & 0x10000) sr ^= 0x11021;
 8005756:	4660      	mov	r0, ip
 8005758:	4ca1      	ldr	r4, [pc, #644]	@ (80059e0 <dir_register+0x2f4>)
			*d++ = *s++;
 800575a:	9101      	str	r1, [sp, #4]
				if (sr & 0x10000) sr ^= 0x11021;
 800575c:	e9cd eb02 	strd	lr, fp, [sp, #8]
 8005760:	469b      	mov	fp, r3
			*d++ = *s++;
 8005762:	9b00      	ldr	r3, [sp, #0]
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005764:	f1ba 0f05 	cmp.w	sl, #5
			*d++ = *s++;
 8005768:	f8a5 b048 	strh.w	fp, [r5, #72]	@ 0x48
 800576c:	642b      	str	r3, [r5, #64]	@ 0x40
 800576e:	9b01      	ldr	r3, [sp, #4]
 8005770:	f885 904a 	strb.w	r9, [r5, #74]	@ 0x4a
 8005774:	646b      	str	r3, [r5, #68]	@ 0x44
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005776:	f240 82b9 	bls.w	8005cec <dir_register+0x600>
		while (*lfn) {	/* Create a CRC */
 800577a:	8803      	ldrh	r3, [r0, #0]
 800577c:	4652      	mov	r2, sl
 800577e:	2b00      	cmp	r3, #0
 8005780:	f000 809a 	beq.w	80058b8 <dir_register+0x1cc>
				sr = (sr << 1) + (wc & 1);
 8005784:	f003 0c01 	and.w	ip, r3, #1
				wc >>= 1;
 8005788:	0859      	lsrs	r1, r3, #1
				sr = (sr << 1) + (wc & 1);
 800578a:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800578e:	0412      	lsls	r2, r2, #16
				sr = (sr << 1) + (wc & 1);
 8005790:	f001 0101 	and.w	r1, r1, #1
				wc >>= 1;
 8005794:	ea4f 0293 	mov.w	r2, r3, lsr #2
				if (sr & 0x10000) sr ^= 0x11021;
 8005798:	bf48      	it	mi
 800579a:	ea8c 0c04 	eormi.w	ip, ip, r4
				sr = (sr << 1) + (wc & 1);
 800579e:	f002 0201 	and.w	r2, r2, #1
 80057a2:	eb01 014c 	add.w	r1, r1, ip, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80057a6:	f41c 4f00 	tst.w	ip, #32768	@ 0x8000
				wc >>= 1;
 80057aa:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
				if (sr & 0x10000) sr ^= 0x11021;
 80057ae:	bf18      	it	ne
 80057b0:	4061      	eorne	r1, r4
				sr = (sr << 1) + (wc & 1);
 80057b2:	f00c 0c01 	and.w	ip, ip, #1
 80057b6:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80057ba:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 80057bc:	ea4f 1113 	mov.w	r1, r3, lsr #4
				if (sr & 0x10000) sr ^= 0x11021;
 80057c0:	bf48      	it	mi
 80057c2:	4062      	eormi	r2, r4
				sr = (sr << 1) + (wc & 1);
 80057c4:	f001 0101 	and.w	r1, r1, #1
 80057c8:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80057cc:	0412      	lsls	r2, r2, #16
				wc >>= 1;
 80057ce:	ea4f 1253 	mov.w	r2, r3, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
 80057d2:	bf48      	it	mi
 80057d4:	ea8c 0c04 	eormi.w	ip, ip, r4
				sr = (sr << 1) + (wc & 1);
 80057d8:	f002 0201 	and.w	r2, r2, #1
 80057dc:	eb01 014c 	add.w	r1, r1, ip, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80057e0:	f41c 4f00 	tst.w	ip, #32768	@ 0x8000
				wc >>= 1;
 80057e4:	ea4f 1c93 	mov.w	ip, r3, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
 80057e8:	bf18      	it	ne
 80057ea:	4061      	eorne	r1, r4
				sr = (sr << 1) + (wc & 1);
 80057ec:	f00c 0c01 	and.w	ip, ip, #1
 80057f0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80057f4:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 80057f6:	ea4f 11d3 	mov.w	r1, r3, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
 80057fa:	bf48      	it	mi
 80057fc:	4062      	eormi	r2, r4
				sr = (sr << 1) + (wc & 1);
 80057fe:	f001 0101 	and.w	r1, r1, #1
 8005802:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8005806:	0412      	lsls	r2, r2, #16
				wc >>= 1;
 8005808:	ea4f 2213 	mov.w	r2, r3, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
 800580c:	bf48      	it	mi
 800580e:	ea8c 0c04 	eormi.w	ip, ip, r4
				sr = (sr << 1) + (wc & 1);
 8005812:	f002 0201 	and.w	r2, r2, #1
 8005816:	eb01 014c 	add.w	r1, r1, ip, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800581a:	f41c 4f00 	tst.w	ip, #32768	@ 0x8000
				wc >>= 1;
 800581e:	ea4f 2c53 	mov.w	ip, r3, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
 8005822:	bf18      	it	ne
 8005824:	4061      	eorne	r1, r4
				sr = (sr << 1) + (wc & 1);
 8005826:	f00c 0c01 	and.w	ip, ip, #1
 800582a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800582e:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 8005830:	ea4f 2193 	mov.w	r1, r3, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
 8005834:	bf48      	it	mi
 8005836:	4062      	eormi	r2, r4
				sr = (sr << 1) + (wc & 1);
 8005838:	f001 0101 	and.w	r1, r1, #1
 800583c:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8005840:	0412      	lsls	r2, r2, #16
				wc >>= 1;
 8005842:	ea4f 22d3 	mov.w	r2, r3, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
 8005846:	bf48      	it	mi
 8005848:	ea8c 0c04 	eormi.w	ip, ip, r4
				sr = (sr << 1) + (wc & 1);
 800584c:	f002 0201 	and.w	r2, r2, #1
 8005850:	eb01 014c 	add.w	r1, r1, ip, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8005854:	f41c 4f00 	tst.w	ip, #32768	@ 0x8000
				wc >>= 1;
 8005858:	ea4f 3c13 	mov.w	ip, r3, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
 800585c:	bf18      	it	ne
 800585e:	4061      	eorne	r1, r4
				sr = (sr << 1) + (wc & 1);
 8005860:	f00c 0c01 	and.w	ip, ip, #1
 8005864:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8005868:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 800586a:	ea4f 3153 	mov.w	r1, r3, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
 800586e:	bf48      	it	mi
 8005870:	4062      	eormi	r2, r4
				sr = (sr << 1) + (wc & 1);
 8005872:	f001 0101 	and.w	r1, r1, #1
 8005876:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800587a:	0412      	lsls	r2, r2, #16
				wc >>= 1;
 800587c:	ea4f 3293 	mov.w	r2, r3, lsr #14
				if (sr & 0x10000) sr ^= 0x11021;
 8005880:	bf48      	it	mi
 8005882:	ea8c 0c04 	eormi.w	ip, ip, r4
				sr = (sr << 1) + (wc & 1);
 8005886:	f002 0201 	and.w	r2, r2, #1
 800588a:	eb01 014c 	add.w	r1, r1, ip, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800588e:	f41c 4f00 	tst.w	ip, #32768	@ 0x8000
				wc >>= 1;
 8005892:	ea4f 3cd3 	mov.w	ip, r3, lsr #15
				if (sr & 0x10000) sr ^= 0x11021;
 8005896:	bf18      	it	ne
 8005898:	4061      	eorne	r1, r4
				sr = (sr << 1) + (wc & 1);
 800589a:	eb02 0341 	add.w	r3, r2, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800589e:	040a      	lsls	r2, r1, #16
 80058a0:	bf48      	it	mi
 80058a2:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 80058a4:	eb0c 0243 	add.w	r2, ip, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80058a8:	041b      	lsls	r3, r3, #16
		while (*lfn) {	/* Create a CRC */
 80058aa:	f830 3f02 	ldrh.w	r3, [r0, #2]!
				if (sr & 0x10000) sr ^= 0x11021;
 80058ae:	bf48      	it	mi
 80058b0:	4062      	eormi	r2, r4
		while (*lfn) {	/* Create a CRC */
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f47f af66 	bne.w	8005784 <dir_register+0x98>
		c = (BYTE)((seq % 16) + '0');
 80058b8:	f002 030f 	and.w	r3, r2, #15
		seq /= 16;
 80058bc:	0911      	lsrs	r1, r2, #4
		c = (BYTE)((seq % 16) + '0');
 80058be:	f103 0e30 	add.w	lr, r3, #48	@ 0x30
		if (c > '9') c += 7;
 80058c2:	f1be 0f39 	cmp.w	lr, #57	@ 0x39
 80058c6:	bf88      	it	hi
 80058c8:	f103 0e37 	addhi.w	lr, r3, #55	@ 0x37
	} while (seq);
 80058cc:	2a0f      	cmp	r2, #15
		ns[i--] = c;
 80058ce:	f88d e017 	strb.w	lr, [sp, #23]
	} while (seq);
 80058d2:	f240 8211 	bls.w	8005cf8 <dir_register+0x60c>
		c = (BYTE)((seq % 16) + '0');
 80058d6:	f001 000f 	and.w	r0, r1, #15
 80058da:	f100 0330 	add.w	r3, r0, #48	@ 0x30
		if (c > '9') c += 7;
 80058de:	2b39      	cmp	r3, #57	@ 0x39
 80058e0:	bf88      	it	hi
 80058e2:	f100 0337 	addhi.w	r3, r0, #55	@ 0x37
	} while (seq);
 80058e6:	290f      	cmp	r1, #15
		seq /= 16;
 80058e8:	ea4f 2012 	mov.w	r0, r2, lsr #8
		ns[i--] = c;
 80058ec:	f88d 3016 	strb.w	r3, [sp, #22]
	} while (seq);
 80058f0:	f240 82a0 	bls.w	8005e34 <dir_register+0x748>
		c = (BYTE)((seq % 16) + '0');
 80058f4:	f000 010f 	and.w	r1, r0, #15
 80058f8:	f101 0330 	add.w	r3, r1, #48	@ 0x30
		if (c > '9') c += 7;
 80058fc:	2b39      	cmp	r3, #57	@ 0x39
 80058fe:	bf88      	it	hi
 8005900:	f101 0337 	addhi.w	r3, r1, #55	@ 0x37
	} while (seq);
 8005904:	280f      	cmp	r0, #15
		seq /= 16;
 8005906:	ea4f 3112 	mov.w	r1, r2, lsr #12
		ns[i--] = c;
 800590a:	f88d 3015 	strb.w	r3, [sp, #21]
	} while (seq);
 800590e:	f240 8297 	bls.w	8005e40 <dir_register+0x754>
		c = (BYTE)((seq % 16) + '0');
 8005912:	f001 000f 	and.w	r0, r1, #15
 8005916:	f100 0330 	add.w	r3, r0, #48	@ 0x30
		if (c > '9') c += 7;
 800591a:	2b39      	cmp	r3, #57	@ 0x39
 800591c:	bf88      	it	hi
 800591e:	f100 0337 	addhi.w	r3, r0, #55	@ 0x37
	} while (seq);
 8005922:	290f      	cmp	r1, #15
		seq /= 16;
 8005924:	ea4f 4012 	mov.w	r0, r2, lsr #16
		ns[i--] = c;
 8005928:	f88d 3014 	strb.w	r3, [sp, #20]
	} while (seq);
 800592c:	f240 828e 	bls.w	8005e4c <dir_register+0x760>
		c = (BYTE)((seq % 16) + '0');
 8005930:	f000 010f 	and.w	r1, r0, #15
 8005934:	f101 0330 	add.w	r3, r1, #48	@ 0x30
		if (c > '9') c += 7;
 8005938:	2b39      	cmp	r3, #57	@ 0x39
 800593a:	bf88      	it	hi
 800593c:	f101 0337 	addhi.w	r3, r1, #55	@ 0x37
	} while (seq);
 8005940:	280f      	cmp	r0, #15
		ns[i--] = c;
 8005942:	f88d 3013 	strb.w	r3, [sp, #19]
		seq /= 16;
 8005946:	ea4f 5312 	mov.w	r3, r2, lsr #20
	} while (seq);
 800594a:	f240 8285 	bls.w	8005e58 <dir_register+0x76c>
		c = (BYTE)((seq % 16) + '0');
 800594e:	f003 000f 	and.w	r0, r3, #15
		seq /= 16;
 8005952:	0e12      	lsrs	r2, r2, #24
		c = (BYTE)((seq % 16) + '0');
 8005954:	f100 0130 	add.w	r1, r0, #48	@ 0x30
		if (c > '9') c += 7;
 8005958:	2939      	cmp	r1, #57	@ 0x39
 800595a:	bf88      	it	hi
 800595c:	f100 0137 	addhi.w	r1, r0, #55	@ 0x37
	} while (seq);
 8005960:	2b0f      	cmp	r3, #15
		ns[i--] = c;
 8005962:	f88d 1012 	strb.w	r1, [sp, #18]
	} while (seq);
 8005966:	f240 82dc 	bls.w	8005f22 <dir_register+0x836>
		c = (BYTE)((seq % 16) + '0');
 800596a:	f002 010f 	and.w	r1, r2, #15
 800596e:	f101 0330 	add.w	r3, r1, #48	@ 0x30
		if (c > '9') c += 7;
 8005972:	2b39      	cmp	r3, #57	@ 0x39
 8005974:	bf88      	it	hi
 8005976:	f101 0337 	addhi.w	r3, r1, #55	@ 0x37
	} while (seq);
 800597a:	2a0f      	cmp	r2, #15
		ns[i--] = c;
 800597c:	f88d 3011 	strb.w	r3, [sp, #17]
	} while (seq);
 8005980:	f240 82d5 	bls.w	8005f2e <dir_register+0x842>
		ns[i--] = c;
 8005984:	f04f 3cff 	mov.w	ip, #4294967295
 8005988:	f105 013f 	add.w	r1, r5, #63	@ 0x3f
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800598c:	2200      	movs	r2, #0
 800598e:	e002      	b.n	8005996 <dir_register+0x2aa>
 8005990:	4594      	cmp	ip, r2
 8005992:	f000 81b7 	beq.w	8005d04 <dir_register+0x618>
 8005996:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800599a:	4613      	mov	r3, r2
 800599c:	3201      	adds	r2, #1
 800599e:	2820      	cmp	r0, #32
 80059a0:	d1f6      	bne.n	8005990 <dir_register+0x2a4>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80059a2:	f1bc 0f07 	cmp.w	ip, #7
 80059a6:	f240 81b2 	bls.w	8005d0e <dir_register+0x622>
 80059aa:	1c58      	adds	r0, r3, #1
 80059ac:	54f7      	strb	r7, [r6, r3]
	} while (j < 8);
 80059ae:	2807      	cmp	r0, #7
 80059b0:	d809      	bhi.n	80059c6 <dir_register+0x2da>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80059b2:	1c43      	adds	r3, r0, #1
 80059b4:	f1c0 0208 	rsb	r2, r0, #8
 80059b8:	2120      	movs	r1, #32
 80059ba:	4430      	add	r0, r6
 80059bc:	2b08      	cmp	r3, #8
 80059be:	bf88      	it	hi
 80059c0:	2201      	movhi	r2, #1
 80059c2:	f003 f868 	bl	8008a96 <memset>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80059c6:	4628      	mov	r0, r5
 80059c8:	f7fe fe8c 	bl	80046e4 <dir_find>
			if (res != FR_OK) break;
 80059cc:	b950      	cbnz	r0, 80059e4 <dir_register+0x2f8>
		for (n = 1; n < 100; n++) {
 80059ce:	f10a 0a01 	add.w	sl, sl, #1
 80059d2:	f1ba 0f64 	cmp.w	sl, #100	@ 0x64
 80059d6:	f000 8394 	beq.w	8006102 <dir_register+0xa16>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80059da:	f8d8 000c 	ldr.w	r0, [r8, #12]
 80059de:	e6c0      	b.n	8005762 <dir_register+0x76>
 80059e0:	00011021 	.word	0x00011021
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80059e4:	2804      	cmp	r0, #4
 80059e6:	4603      	mov	r3, r0
 80059e8:	e9dd eb02 	ldrd	lr, fp, [sp, #8]
 80059ec:	f040 8295 	bne.w	8005f1a <dir_register+0x82e>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80059f0:	f885 e04b 	strb.w	lr, [r5, #75]	@ 0x4b
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80059f4:	f01e 0f02 	tst.w	lr, #2
 80059f8:	f000 82a8 	beq.w	8005f4c <dir_register+0x860>
 80059fc:	f10b 0b0c 	add.w	fp, fp, #12
 8005a00:	4cde      	ldr	r4, [pc, #888]	@ (8005d7c <dir_register+0x690>)
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005a02:	4628      	mov	r0, r5
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005a04:	fba4 340b 	umull	r3, r4, r4, fp
 8005a08:	08a4      	lsrs	r4, r4, #2
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005a0a:	1c61      	adds	r1, r4, #1
 8005a0c:	f7ff fd0e 	bl	800542c <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005a10:	4603      	mov	r3, r0
 8005a12:	2800      	cmp	r0, #0
 8005a14:	f040 8281 	bne.w	8005f1a <dir_register+0x82e>
 8005a18:	f1bb 0f0c 	cmp.w	fp, #12
 8005a1c:	f000 829d 	beq.w	8005f5a <dir_register+0x86e>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8005a20:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 8005a22:	4628      	mov	r0, r5
 8005a24:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 8005a28:	f7fe fc70 	bl	800430c <dir_sdi>
		if (res == FR_OK) {
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	f040 8273 	bne.w	8005f1a <dir_register+0x82e>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005a34:	f895 2040 	ldrb.w	r2, [r5, #64]	@ 0x40
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005a38:	270f      	movs	r7, #15
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005a3a:	f64f 79fd 	movw	r9, #65533	@ 0xfffd
	*ptr++ = (BYTE)val; val >>= 8;
 8005a3e:	f64f 7aff 	movw	sl, #65535	@ 0xffff
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005a42:	01d3      	lsls	r3, r2, #7
 8005a44:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8005a48:	f895 2041 	ldrb.w	r2, [r5, #65]	@ 0x41
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8005a52:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 8005a56:	f895 3042 	ldrb.w	r3, [r5, #66]	@ 0x42
 8005a5a:	fa53 f282 	uxtab	r2, r3, r2
 8005a5e:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8005a62:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8005a66:	f895 2043 	ldrb.w	r2, [r5, #67]	@ 0x43
 8005a6a:	fa52 f383 	uxtab	r3, r2, r3
 8005a6e:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8005a72:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 8005a76:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 8005a7a:	fa53 f282 	uxtab	r2, r3, r2
 8005a7e:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8005a82:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8005a86:	f895 2045 	ldrb.w	r2, [r5, #69]	@ 0x45
 8005a8a:	fa52 f383 	uxtab	r3, r2, r3
 8005a8e:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8005a92:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 8005a96:	f895 3046 	ldrb.w	r3, [r5, #70]	@ 0x46
 8005a9a:	fa53 f282 	uxtab	r2, r3, r2
 8005a9e:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8005aa2:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8005aa6:	f895 2047 	ldrb.w	r2, [r5, #71]	@ 0x47
 8005aaa:	fa52 f383 	uxtab	r3, r2, r3
 8005aae:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8005ab2:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 8005ab6:	f895 3048 	ldrb.w	r3, [r5, #72]	@ 0x48
 8005aba:	fa53 f282 	uxtab	r2, r3, r2
 8005abe:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8005ac2:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8005ac6:	f895 2049 	ldrb.w	r2, [r5, #73]	@ 0x49
 8005aca:	fa52 f383 	uxtab	r3, r2, r3
 8005ace:	f3c3 0646 	ubfx	r6, r3, #1, #7
 8005ad2:	ea46 16c3 	orr.w	r6, r6, r3, lsl #7
 8005ad6:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 8005ada:	fa53 f686 	uxtab	r6, r3, r6
 8005ade:	b2f6      	uxtb	r6, r6
	} while (--n);
 8005ae0:	e027      	b.n	8005b32 <dir_register+0x446>
	*ptr++ = (BYTE)val; val >>= 8;
 8005ae2:	f8a3 a003 	strh.w	sl, [r3, #3]
 8005ae6:	f8a3 a005 	strh.w	sl, [r3, #5]
 8005aea:	f8a3 a007 	strh.w	sl, [r3, #7]
 8005aee:	f8a3 a009 	strh.w	sl, [r3, #9]
 8005af2:	f8a3 a00e 	strh.w	sl, [r3, #14]
 8005af6:	f8a3 a010 	strh.w	sl, [r3, #16]
 8005afa:	f8a3 a012 	strh.w	sl, [r3, #18]
 8005afe:	f8a3 a014 	strh.w	sl, [r3, #20]
 8005b02:	f8a3 a016 	strh.w	sl, [r3, #22]
 8005b06:	f8a3 a018 	strh.w	sl, [r3, #24]
 8005b0a:	f8a3 a01c 	strh.w	sl, [r3, #28]
 8005b0e:	f8a3 a01e 	strh.w	sl, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005b12:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005b16:	7018      	strb	r0, [r3, #0]
				fs->wflag = 1;
 8005b18:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
 8005b1a:	4628      	mov	r0, r5
				fs->wflag = 1;
 8005b1c:	f888 3003 	strb.w	r3, [r8, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8005b20:	f7fd fd84 	bl	800362c <dir_next.constprop.0>
			} while (res == FR_OK && --nent);
 8005b24:	4603      	mov	r3, r0
 8005b26:	2800      	cmp	r0, #0
 8005b28:	f040 81f7 	bne.w	8005f1a <dir_register+0x82e>
 8005b2c:	3c01      	subs	r4, #1
 8005b2e:	f000 8214 	beq.w	8005f5a <dir_register+0x86e>
				res = move_window(fs, dp->sect);
 8005b32:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 8005b34:	4640      	mov	r0, r8
 8005b36:	f7fd fc2f 	bl	8003398 <move_window>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	4603      	mov	r3, r0
				if (res != FR_OK) break;
 8005b3e:	2800      	cmp	r0, #0
 8005b40:	f040 81eb 	bne.w	8005f1a <dir_register+0x82e>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005b44:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8005b46:	b2e0      	uxtb	r0, r4
 8005b48:	f8d8 100c 	ldr.w	r1, [r8, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8005b4c:	835a      	strh	r2, [r3, #26]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005b4e:	1e42      	subs	r2, r0, #1
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005b50:	735e      	strb	r6, [r3, #13]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005b52:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005b56:	f8a3 700b 	strh.w	r7, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005b5a:	eb02 028c 	add.w	r2, r2, ip, lsl #2
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005b5e:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 8005b62:	f10c 3eff 	add.w	lr, ip, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 8005b66:	f883 c001 	strb.w	ip, [r3, #1]
 8005b6a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005b6e:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 8005b72:	f883 c002 	strb.w	ip, [r3, #2]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005b76:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8005b7a:	45ce      	cmp	lr, r9
 8005b7c:	d8b1      	bhi.n	8005ae2 <dir_register+0x3f6>
 8005b7e:	3201      	adds	r2, #1
 8005b80:	f831 e012 	ldrh.w	lr, [r1, r2, lsl #1]
 8005b84:	0052      	lsls	r2, r2, #1
 8005b86:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 8005b8a:	f883 e003 	strb.w	lr, [r3, #3]
 8005b8e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005b92:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 8005b96:	f883 e004 	strb.w	lr, [r3, #4]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005b9a:	45cb      	cmp	fp, r9
 8005b9c:	d8a3      	bhi.n	8005ae6 <dir_register+0x3fa>
 8005b9e:	440a      	add	r2, r1
 8005ba0:	f8b2 e002 	ldrh.w	lr, [r2, #2]
 8005ba4:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 8005ba8:	f883 e005 	strb.w	lr, [r3, #5]
 8005bac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005bb0:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 8005bb4:	f883 e006 	strb.w	lr, [r3, #6]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005bb8:	45cb      	cmp	fp, r9
 8005bba:	d896      	bhi.n	8005aea <dir_register+0x3fe>
 8005bbc:	f8b2 e004 	ldrh.w	lr, [r2, #4]
 8005bc0:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 8005bc4:	f883 e007 	strb.w	lr, [r3, #7]
 8005bc8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005bcc:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 8005bd0:	f883 e008 	strb.w	lr, [r3, #8]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005bd4:	45cb      	cmp	fp, r9
 8005bd6:	d88a      	bhi.n	8005aee <dir_register+0x402>
 8005bd8:	f8b2 e006 	ldrh.w	lr, [r2, #6]
 8005bdc:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 8005be0:	f883 e009 	strb.w	lr, [r3, #9]
 8005be4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005be8:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 8005bec:	f883 e00a 	strb.w	lr, [r3, #10]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005bf0:	45cb      	cmp	fp, r9
 8005bf2:	f63f af7e 	bhi.w	8005af2 <dir_register+0x406>
 8005bf6:	f8b2 e008 	ldrh.w	lr, [r2, #8]
 8005bfa:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 8005bfe:	f883 e00e 	strb.w	lr, [r3, #14]
 8005c02:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005c06:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 8005c0a:	f883 e00f 	strb.w	lr, [r3, #15]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005c0e:	45cb      	cmp	fp, r9
 8005c10:	f63f af71 	bhi.w	8005af6 <dir_register+0x40a>
 8005c14:	f8b2 e00a 	ldrh.w	lr, [r2, #10]
 8005c18:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 8005c1c:	f883 e010 	strb.w	lr, [r3, #16]
 8005c20:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005c24:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 8005c28:	f883 e011 	strb.w	lr, [r3, #17]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005c2c:	45cb      	cmp	fp, r9
 8005c2e:	f63f af64 	bhi.w	8005afa <dir_register+0x40e>
 8005c32:	f8b2 e00c 	ldrh.w	lr, [r2, #12]
 8005c36:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 8005c3a:	f883 e012 	strb.w	lr, [r3, #18]
 8005c3e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005c42:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 8005c46:	f883 e013 	strb.w	lr, [r3, #19]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005c4a:	45cb      	cmp	fp, r9
 8005c4c:	f63f af57 	bhi.w	8005afe <dir_register+0x412>
 8005c50:	f8b2 e00e 	ldrh.w	lr, [r2, #14]
 8005c54:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 8005c58:	f883 e014 	strb.w	lr, [r3, #20]
 8005c5c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005c60:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 8005c64:	f883 e015 	strb.w	lr, [r3, #21]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005c68:	45cb      	cmp	fp, r9
 8005c6a:	f63f af4a 	bhi.w	8005b02 <dir_register+0x416>
 8005c6e:	f8b2 e010 	ldrh.w	lr, [r2, #16]
 8005c72:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 8005c76:	f883 e016 	strb.w	lr, [r3, #22]
 8005c7a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005c7e:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 8005c82:	f883 e017 	strb.w	lr, [r3, #23]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005c86:	45cb      	cmp	fp, r9
 8005c88:	f63f af3d 	bhi.w	8005b06 <dir_register+0x41a>
 8005c8c:	f8b2 e012 	ldrh.w	lr, [r2, #18]
 8005c90:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 8005c94:	f883 e018 	strb.w	lr, [r3, #24]
 8005c98:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005c9c:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 8005ca0:	f883 e019 	strb.w	lr, [r3, #25]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005ca4:	45cb      	cmp	fp, r9
 8005ca6:	f63f af30 	bhi.w	8005b0a <dir_register+0x41e>
 8005caa:	f8b2 e014 	ldrh.w	lr, [r2, #20]
 8005cae:	f10e 3bff 	add.w	fp, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 8005cb2:	f883 e01c 	strb.w	lr, [r3, #28]
 8005cb6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005cba:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
 8005cbe:	f883 e01d 	strb.w	lr, [r3, #29]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005cc2:	45cb      	cmp	fp, r9
 8005cc4:	f63f af23 	bhi.w	8005b0e <dir_register+0x422>
 8005cc8:	8ad2      	ldrh	r2, [r2, #22]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005cca:	f102 3eff 	add.w	lr, r2, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 8005cce:	779a      	strb	r2, [r3, #30]
 8005cd0:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 8005cd2:	77da      	strb	r2, [r3, #31]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005cd4:	fa1f f28e 	uxth.w	r2, lr
 8005cd8:	454a      	cmp	r2, r9
 8005cda:	f63f af1a 	bhi.w	8005b12 <dir_register+0x426>
 8005cde:	eb01 020c 	add.w	r2, r1, ip
 8005ce2:	8b52      	ldrh	r2, [r2, #26]
 8005ce4:	2a00      	cmp	r2, #0
 8005ce6:	f47f af16 	bne.w	8005b16 <dir_register+0x42a>
 8005cea:	e712      	b.n	8005b12 <dir_register+0x426>
		c = (BYTE)((seq % 16) + '0');
 8005cec:	f10a 0e30 	add.w	lr, sl, #48	@ 0x30
 8005cf0:	fa5f fe8e 	uxtb.w	lr, lr
		ns[i--] = c;
 8005cf4:	f88d e017 	strb.w	lr, [sp, #23]
	ns[i] = '~';
 8005cf8:	237e      	movs	r3, #126	@ 0x7e
		ns[i--] = c;
 8005cfa:	f04f 0c06 	mov.w	ip, #6
	ns[i] = '~';
 8005cfe:	f88d 3016 	strb.w	r3, [sp, #22]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005d02:	e641      	b.n	8005988 <dir_register+0x29c>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005d04:	f1bc 0f07 	cmp.w	ip, #7
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005d08:	4663      	mov	r3, ip
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005d0a:	f63f ae4e 	bhi.w	80059aa <dir_register+0x2be>
 8005d0e:	f10c 0268 	add.w	r2, ip, #104	@ 0x68
 8005d12:	446a      	add	r2, sp
 8005d14:	f812 2c58 	ldrb.w	r2, [r2, #-88]
 8005d18:	54f2      	strb	r2, [r6, r3]
 8005d1a:	1c5a      	adds	r2, r3, #1
	} while (j < 8);
 8005d1c:	2a07      	cmp	r2, #7
 8005d1e:	f63f ae52 	bhi.w	80059c6 <dir_register+0x2da>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005d22:	f10c 0c01 	add.w	ip, ip, #1
 8005d26:	f10c 0168 	add.w	r1, ip, #104	@ 0x68
	} while (j < 8);
 8005d2a:	2b06      	cmp	r3, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005d2c:	4469      	add	r1, sp
 8005d2e:	f811 1c58 	ldrb.w	r1, [r1, #-88]
 8005d32:	54b1      	strb	r1, [r6, r2]
 8005d34:	f10c 0201 	add.w	r2, ip, #1
 8005d38:	f103 0102 	add.w	r1, r3, #2
	} while (j < 8);
 8005d3c:	f43f ae43 	beq.w	80059c6 <dir_register+0x2da>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005d40:	2a08      	cmp	r2, #8
 8005d42:	d106      	bne.n	8005d52 <dir_register+0x666>
	} while (j < 8);
 8005d44:	2b05      	cmp	r3, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005d46:	f103 0003 	add.w	r0, r3, #3
 8005d4a:	5477      	strb	r7, [r6, r1]
	} while (j < 8);
 8005d4c:	f47f ae31 	bne.w	80059b2 <dir_register+0x2c6>
 8005d50:	e639      	b.n	80059c6 <dir_register+0x2da>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005d52:	3268      	adds	r2, #104	@ 0x68
	} while (j < 8);
 8005d54:	2b05      	cmp	r3, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005d56:	446a      	add	r2, sp
 8005d58:	f812 2c58 	ldrb.w	r2, [r2, #-88]
 8005d5c:	5472      	strb	r2, [r6, r1]
 8005d5e:	f10c 0202 	add.w	r2, ip, #2
 8005d62:	f103 0103 	add.w	r1, r3, #3
	} while (j < 8);
 8005d66:	f43f ae2e 	beq.w	80059c6 <dir_register+0x2da>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005d6a:	2a08      	cmp	r2, #8
 8005d6c:	d108      	bne.n	8005d80 <dir_register+0x694>
	} while (j < 8);
 8005d6e:	2b04      	cmp	r3, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005d70:	f103 0004 	add.w	r0, r3, #4
 8005d74:	5477      	strb	r7, [r6, r1]
	} while (j < 8);
 8005d76:	f47f ae1c 	bne.w	80059b2 <dir_register+0x2c6>
 8005d7a:	e624      	b.n	80059c6 <dir_register+0x2da>
 8005d7c:	4ec4ec4f 	.word	0x4ec4ec4f
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005d80:	3268      	adds	r2, #104	@ 0x68
	} while (j < 8);
 8005d82:	2b04      	cmp	r3, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005d84:	446a      	add	r2, sp
 8005d86:	f812 2c58 	ldrb.w	r2, [r2, #-88]
 8005d8a:	5472      	strb	r2, [r6, r1]
 8005d8c:	f10c 0203 	add.w	r2, ip, #3
 8005d90:	f103 0104 	add.w	r1, r3, #4
	} while (j < 8);
 8005d94:	f43f ae17 	beq.w	80059c6 <dir_register+0x2da>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005d98:	2a08      	cmp	r2, #8
 8005d9a:	d106      	bne.n	8005daa <dir_register+0x6be>
	} while (j < 8);
 8005d9c:	2b03      	cmp	r3, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005d9e:	f103 0005 	add.w	r0, r3, #5
 8005da2:	5477      	strb	r7, [r6, r1]
	} while (j < 8);
 8005da4:	f47f ae05 	bne.w	80059b2 <dir_register+0x2c6>
 8005da8:	e60d      	b.n	80059c6 <dir_register+0x2da>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005daa:	3268      	adds	r2, #104	@ 0x68
	} while (j < 8);
 8005dac:	2b03      	cmp	r3, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005dae:	446a      	add	r2, sp
 8005db0:	f812 2c58 	ldrb.w	r2, [r2, #-88]
 8005db4:	5472      	strb	r2, [r6, r1]
 8005db6:	f10c 0204 	add.w	r2, ip, #4
 8005dba:	f103 0105 	add.w	r1, r3, #5
	} while (j < 8);
 8005dbe:	f43f ae02 	beq.w	80059c6 <dir_register+0x2da>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005dc2:	2a08      	cmp	r2, #8
 8005dc4:	d106      	bne.n	8005dd4 <dir_register+0x6e8>
	} while (j < 8);
 8005dc6:	2b02      	cmp	r3, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005dc8:	f103 0006 	add.w	r0, r3, #6
 8005dcc:	5477      	strb	r7, [r6, r1]
	} while (j < 8);
 8005dce:	f47f adf0 	bne.w	80059b2 <dir_register+0x2c6>
 8005dd2:	e5f8      	b.n	80059c6 <dir_register+0x2da>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005dd4:	3268      	adds	r2, #104	@ 0x68
	} while (j < 8);
 8005dd6:	2b02      	cmp	r3, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005dd8:	446a      	add	r2, sp
 8005dda:	f812 2c58 	ldrb.w	r2, [r2, #-88]
 8005dde:	5472      	strb	r2, [r6, r1]
 8005de0:	f10c 0205 	add.w	r2, ip, #5
 8005de4:	f103 0106 	add.w	r1, r3, #6
	} while (j < 8);
 8005de8:	f43f aded 	beq.w	80059c6 <dir_register+0x2da>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005dec:	2a08      	cmp	r2, #8
 8005dee:	d106      	bne.n	8005dfe <dir_register+0x712>
	} while (j < 8);
 8005df0:	2b01      	cmp	r3, #1
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005df2:	f103 0007 	add.w	r0, r3, #7
 8005df6:	5477      	strb	r7, [r6, r1]
	} while (j < 8);
 8005df8:	f47f addb 	bne.w	80059b2 <dir_register+0x2c6>
 8005dfc:	e5e3      	b.n	80059c6 <dir_register+0x2da>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005dfe:	3268      	adds	r2, #104	@ 0x68
	} while (j < 8);
 8005e00:	2b01      	cmp	r3, #1
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005e02:	446a      	add	r2, sp
 8005e04:	f812 2c58 	ldrb.w	r2, [r2, #-88]
 8005e08:	5472      	strb	r2, [r6, r1]
 8005e0a:	f103 0207 	add.w	r2, r3, #7
	} while (j < 8);
 8005e0e:	f43f adda 	beq.w	80059c6 <dir_register+0x2da>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005e12:	f1bc 0f01 	cmp.w	ip, #1
 8005e16:	d005      	beq.n	8005e24 <dir_register+0x738>
	} while (j < 8);
 8005e18:	3301      	adds	r3, #1
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005e1a:	54b7      	strb	r7, [r6, r2]
	} while (j < 8);
 8005e1c:	f47f add3 	bne.w	80059c6 <dir_register+0x2da>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005e20:	2007      	movs	r0, #7
 8005e22:	e5c6      	b.n	80059b2 <dir_register+0x2c6>
 8005e24:	f806 e002 	strb.w	lr, [r6, r2]
	} while (j < 8);
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f43f adcc 	beq.w	80059c6 <dir_register+0x2da>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005e2e:	f885 7047 	strb.w	r7, [r5, #71]	@ 0x47
	} while (j < 8);
 8005e32:	e5c8      	b.n	80059c6 <dir_register+0x2da>
	ns[i] = '~';
 8005e34:	237e      	movs	r3, #126	@ 0x7e
		ns[i--] = c;
 8005e36:	f04f 0c05 	mov.w	ip, #5
	ns[i] = '~';
 8005e3a:	f88d 3015 	strb.w	r3, [sp, #21]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005e3e:	e5a3      	b.n	8005988 <dir_register+0x29c>
	ns[i] = '~';
 8005e40:	237e      	movs	r3, #126	@ 0x7e
		ns[i--] = c;
 8005e42:	f04f 0c04 	mov.w	ip, #4
	ns[i] = '~';
 8005e46:	f88d 3014 	strb.w	r3, [sp, #20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005e4a:	e59d      	b.n	8005988 <dir_register+0x29c>
	ns[i] = '~';
 8005e4c:	237e      	movs	r3, #126	@ 0x7e
		ns[i--] = c;
 8005e4e:	f04f 0c03 	mov.w	ip, #3
	ns[i] = '~';
 8005e52:	f88d 3013 	strb.w	r3, [sp, #19]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005e56:	e597      	b.n	8005988 <dir_register+0x29c>
	ns[i] = '~';
 8005e58:	237e      	movs	r3, #126	@ 0x7e
		ns[i--] = c;
 8005e5a:	f04f 0c02 	mov.w	ip, #2
	ns[i] = '~';
 8005e5e:	f88d 3012 	strb.w	r3, [sp, #18]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005e62:	e591      	b.n	8005988 <dir_register+0x29c>
		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8005e64:	4bb5      	ldr	r3, [pc, #724]	@ (800613c <dir_register+0xa50>)
 8005e66:	f10b 040e 	add.w	r4, fp, #14
		res = dir_alloc(dp, nent);		/* Allocate entries */
 8005e6a:	4628      	mov	r0, r5
		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8005e6c:	fba3 3404 	umull	r3, r4, r3, r4
 8005e70:	08e4      	lsrs	r4, r4, #3
		res = dir_alloc(dp, nent);		/* Allocate entries */
 8005e72:	1ca1      	adds	r1, r4, #2
 8005e74:	f7ff fada 	bl	800542c <dir_alloc>
		if (res != FR_OK) return res;
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2800      	cmp	r0, #0
 8005e7c:	d14d      	bne.n	8005f1a <dir_register+0x82e>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8005e7e:	3401      	adds	r4, #1
 8005e80:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 8005e82:	68a9      	ldr	r1, [r5, #8]
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8005e84:	eba2 1244 	sub.w	r2, r2, r4, lsl #5
 8005e88:	64ea      	str	r2, [r5, #76]	@ 0x4c
		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 8005e8a:	2900      	cmp	r1, #0
 8005e8c:	f000 80ca 	beq.w	8006024 <dir_register+0x938>
 8005e90:	79ea      	ldrb	r2, [r5, #7]
 8005e92:	0756      	lsls	r6, r2, #29
 8005e94:	f140 80c6 	bpl.w	8006024 <dir_register+0x938>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 8005e98:	f8b8 400a 	ldrh.w	r4, [r8, #10]
 8005e9c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8005ea0:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
 8005ea4:	fbe4 2100 	umlal	r2, r1, r4, r0
 8005ea8:	612a      	str	r2, [r5, #16]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8005eaa:	69ea      	ldr	r2, [r5, #28]
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8005eac:	6b6c      	ldr	r4, [r5, #52]	@ 0x34
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 8005eae:	6169      	str	r1, [r5, #20]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8005eb0:	b1e2      	cbz	r2, 8005eec <dir_register+0x800>
 8005eb2:	461e      	mov	r6, r3
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8005eb4:	1aa1      	subs	r1, r4, r2
 8005eb6:	2a01      	cmp	r2, #1
 8005eb8:	f101 0301 	add.w	r3, r1, #1
 8005ebc:	f101 0202 	add.w	r2, r1, #2
 8005ec0:	bf08      	it	eq
 8005ec2:	f04f 32ff 	moveq.w	r2, #4294967295
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	4619      	mov	r1, r3
 8005eca:	f240 8117 	bls.w	80060fc <dir_register+0xa10>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8005ece:	6828      	ldr	r0, [r5, #0]
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005ed0:	69c7      	ldr	r7, [r0, #28]
 8005ed2:	42bb      	cmp	r3, r7
 8005ed4:	f080 8112 	bcs.w	80060fc <dir_register+0xa10>
 8005ed8:	f7fd fa9c 	bl	8003414 <put_fat.part.0>
		if (res != FR_OK) return res;
 8005edc:	4602      	mov	r2, r0
 8005ede:	b9d8      	cbnz	r0, 8005f18 <dir_register+0x82c>
		obj->n_frag--;
 8005ee0:	69ea      	ldr	r2, [r5, #28]
 8005ee2:	3a01      	subs	r2, #1
 8005ee4:	61ea      	str	r2, [r5, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8005ee6:	2a00      	cmp	r2, #0
 8005ee8:	d1e4      	bne.n	8005eb4 <dir_register+0x7c8>
 8005eea:	4633      	mov	r3, r6
	dp->obj.stat = (BYTE)obj->c_size;
 8005eec:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
	dp->obj.fs = obj->fs;
 8005eee:	6828      	ldr	r0, [r5, #0]
	dp->obj.stat = (BYTE)obj->c_size;
 8005ef0:	f88d 201f 	strb.w	r2, [sp, #31]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8005ef4:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
	dp->blk_ofs = obj->c_ofs;
 8005ef8:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8005efa:	920a      	str	r2, [sp, #40]	@ 0x28
	dp->obj.sclust = obj->c_scl;
 8005efc:	6a2a      	ldr	r2, [r5, #32]
	dp->obj.fs = obj->fs;
 8005efe:	9006      	str	r0, [sp, #24]
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8005f00:	a806      	add	r0, sp, #24
	dp->obj.sclust = obj->c_scl;
 8005f02:	9208      	str	r2, [sp, #32]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8005f04:	2200      	movs	r2, #0
 8005f06:	9300      	str	r3, [sp, #0]
 8005f08:	920b      	str	r2, [sp, #44]	@ 0x2c
	dp->blk_ofs = obj->c_ofs;
 8005f0a:	9119      	str	r1, [sp, #100]	@ 0x64
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8005f0c:	f7fe f9fe 	bl	800430c <dir_sdi>
	if (res == FR_OK) {
 8005f10:	9b00      	ldr	r3, [sp, #0]
 8005f12:	4602      	mov	r2, r0
 8005f14:	2800      	cmp	r0, #0
 8005f16:	d04c      	beq.n	8005fb2 <dir_register+0x8c6>
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8005f18:	4613      	mov	r3, r2
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	b01b      	add	sp, #108	@ 0x6c
 8005f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ns[i] = '~';
 8005f22:	237e      	movs	r3, #126	@ 0x7e
		ns[i--] = c;
 8005f24:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
 8005f28:	f88d 3011 	strb.w	r3, [sp, #17]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005f2c:	e52c      	b.n	8005988 <dir_register+0x29c>
	ns[i] = '~';
 8005f2e:	237e      	movs	r3, #126	@ 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005f30:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
 8005f34:	f88d 3010 	strb.w	r3, [sp, #16]
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005f38:	4662      	mov	r2, ip
 8005f3a:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005f3e:	2300      	movs	r3, #0
 8005f40:	e6f1      	b.n	8005d26 <dir_register+0x63a>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005f42:	2306      	movs	r3, #6
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	b01b      	add	sp, #108	@ 0x6c
 8005f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005f4c:	2101      	movs	r1, #1
 8005f4e:	4628      	mov	r0, r5
 8005f50:	f7ff fa6c 	bl	800542c <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005f54:	4603      	mov	r3, r0
 8005f56:	2800      	cmp	r0, #0
 8005f58:	d1df      	bne.n	8005f1a <dir_register+0x82e>
		res = move_window(fs, dp->sect);
 8005f5a:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 8005f5c:	4640      	mov	r0, r8
 8005f5e:	f7fd fa1b 	bl	8003398 <move_window>
		if (res == FR_OK) {
 8005f62:	4603      	mov	r3, r0
 8005f64:	2800      	cmp	r0, #0
 8005f66:	d1d8      	bne.n	8005f1a <dir_register+0x82e>
		*d++ = (BYTE)val;
 8005f68:	4601      	mov	r1, r0
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	9000      	str	r0, [sp, #0]
 8005f6e:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
 8005f70:	f002 fd91 	bl	8008a96 <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005f74:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005f76:	f105 0141 	add.w	r1, r5, #65	@ 0x41
 8005f7a:	9b00      	ldr	r3, [sp, #0]
 8005f7c:	1a51      	subs	r1, r2, r1
 8005f7e:	2902      	cmp	r1, #2
 8005f80:	f240 80c1 	bls.w	8006106 <dir_register+0xa1a>
			*d++ = *s++;
 8005f84:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 8005f86:	6011      	str	r1, [r2, #0]
 8005f88:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 8005f8a:	6051      	str	r1, [r2, #4]
 8005f8c:	f895 1048 	ldrb.w	r1, [r5, #72]	@ 0x48
 8005f90:	7211      	strb	r1, [r2, #8]
 8005f92:	f895 1049 	ldrb.w	r1, [r5, #73]	@ 0x49
 8005f96:	7251      	strb	r1, [r2, #9]
 8005f98:	f895 104a 	ldrb.w	r1, [r5, #74]	@ 0x4a
 8005f9c:	7291      	strb	r1, [r2, #10]
			fs->wflag = 1;
 8005f9e:	2101      	movs	r1, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005fa0:	f895 204b 	ldrb.w	r2, [r5, #75]	@ 0x4b
 8005fa4:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
 8005fa6:	f002 0218 	and.w	r2, r2, #24
 8005faa:	7302      	strb	r2, [r0, #12]
			fs->wflag = 1;
 8005fac:	f888 1003 	strb.w	r1, [r8, #3]
 8005fb0:	e7b3      	b.n	8005f1a <dir_register+0x82e>
		res = load_xdir(dp);		/* Load the object's entry block */
 8005fb2:	a806      	add	r0, sp, #24
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	f7fd fe6d 	bl	8003c94 <load_xdir>
			if (res != FR_OK) return res;
 8005fba:	4602      	mov	r2, r0
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	d1ab      	bne.n	8005f18 <dir_register+0x82c>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 8005fc0:	6969      	ldr	r1, [r5, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 8005fc2:	4614      	mov	r4, r2
			res = store_xdir(&dj);							/* Store the object status */
 8005fc4:	a806      	add	r0, sp, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8005fc6:	0a0e      	lsrs	r6, r1, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8005fc8:	f361 0207 	bfi	r2, r1, #0, #8
 8005fcc:	f366 220f 	bfi	r2, r6, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8005fd0:	0c0e      	lsrs	r6, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8005fd2:	0e09      	lsrs	r1, r1, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8005fd4:	f366 4217 	bfi	r2, r6, #16, #8
 8005fd8:	692e      	ldr	r6, [r5, #16]
 8005fda:	f361 621f 	bfi	r2, r1, #24, #8
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 8005fde:	f8d8 1010 	ldr.w	r1, [r8, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8005fe2:	63ca      	str	r2, [r1, #60]	@ 0x3c
 8005fe4:	638e      	str	r6, [r1, #56]	@ 0x38
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8005fe6:	696a      	ldr	r2, [r5, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 8005fe8:	0a11      	lsrs	r1, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8005fea:	f362 0407 	bfi	r4, r2, #0, #8
 8005fee:	f361 240f 	bfi	r4, r1, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8005ff2:	0c11      	lsrs	r1, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8005ff4:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8005ff6:	f361 4417 	bfi	r4, r1, #16, #8
 8005ffa:	6929      	ldr	r1, [r5, #16]
 8005ffc:	f362 641f 	bfi	r4, r2, #24, #8
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8006000:	f8d8 2010 	ldr.w	r2, [r8, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8006004:	62d4      	str	r4, [r2, #44]	@ 0x2c
 8006006:	6291      	str	r1, [r2, #40]	@ 0x28
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 8006008:	79ea      	ldrb	r2, [r5, #7]
 800600a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800600e:	f042 0201 	orr.w	r2, r2, #1
 8006012:	f881 2021 	strb.w	r2, [r1, #33]	@ 0x21
			res = store_xdir(&dj);							/* Store the object status */
 8006016:	f7fe fa63 	bl	80044e0 <store_xdir>
			if (res != FR_OK) return res;
 800601a:	4602      	mov	r2, r0
 800601c:	2800      	cmp	r0, #0
 800601e:	f47f af7b 	bne.w	8005f18 <dir_register+0x82c>
 8006022:	9b00      	ldr	r3, [sp, #0]
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8006024:	f8d8 7010 	ldr.w	r7, [r8, #16]
		*d++ = (BYTE)val;
 8006028:	223f      	movs	r2, #63	@ 0x3f
 800602a:	2100      	movs	r1, #0
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800602c:	f8d8 500c 	ldr.w	r5, [r8, #12]
		*d++ = (BYTE)val;
 8006030:	1c78      	adds	r0, r7, #1
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	f002 fd2f 	bl	8008a96 <memset>
	dirb[XDIR_Type] = 0x85;
 8006038:	2185      	movs	r1, #133	@ 0x85
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800603a:	f04f 0800 	mov.w	r8, #0
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800603e:	22c0      	movs	r2, #192	@ 0xc0
	dirb[XDIR_Type] = 0x85;
 8006040:	7039      	strb	r1, [r7, #0]
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 8006042:	2101      	movs	r1, #1
 8006044:	2040      	movs	r0, #64	@ 0x40
 8006046:	4646      	mov	r6, r8
 8006048:	f1c7 0e04 	rsb	lr, r7, #4
 800604c:	4689      	mov	r9, r1
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800604e:	f04f 0ac1 	mov.w	sl, #193	@ 0xc1
 8006052:	9b00      	ldr	r3, [sp, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 8006054:	f887 2020 	strb.w	r2, [r7, #32]
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 8006058:	183a      	adds	r2, r7, r0
 800605a:	f827 a000 	strh.w	sl, [r7, r0]
 800605e:	e014      	b.n	800608a <dir_register+0x99e>
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 8006060:	f835 1016 	ldrh.w	r1, [r5, r6, lsl #1]
 8006064:	f108 0001 	add.w	r0, r8, #1
 8006068:	460c      	mov	r4, r1
	*ptr++ = (BYTE)val;
 800606a:	ea4f 2c11 	mov.w	ip, r1, lsr #8
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800606e:	b121      	cbz	r1, 800607a <dir_register+0x98e>
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 8006070:	b2c6      	uxtb	r6, r0
	*ptr++ = (BYTE)val; val >>= 8;
 8006072:	b2cc      	uxtb	r4, r1
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 8006074:	46b0      	mov	r8, r6
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 8006076:	eb05 0b46 	add.w	fp, r5, r6, lsl #1
		} while ((i += 2) % SZDIRE != 0);
 800607a:	eb0e 0002 	add.w	r0, lr, r2
	*ptr++ = (BYTE)val; val >>= 8;
 800607e:	7094      	strb	r4, [r2, #2]
	*ptr++ = (BYTE)val;
 8006080:	f882 c003 	strb.w	ip, [r2, #3]
		} while ((i += 2) % SZDIRE != 0);
 8006084:	3202      	adds	r2, #2
 8006086:	06c4      	lsls	r4, r0, #27
 8006088:	d006      	beq.n	8006098 <dir_register+0x9ac>
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800608a:	eb05 0b46 	add.w	fp, r5, r6, lsl #1
 800608e:	2900      	cmp	r1, #0
 8006090:	d1e6      	bne.n	8006060 <dir_register+0x974>
 8006092:	468c      	mov	ip, r1
 8006094:	460c      	mov	r4, r1
 8006096:	e7f0      	b.n	800607a <dir_register+0x98e>
		nb++;
 8006098:	f109 0901 	add.w	r9, r9, #1
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800609c:	f8bb 4000 	ldrh.w	r4, [fp]
		nb++;
 80060a0:	fa5f f989 	uxtb.w	r9, r9
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 80060a4:	2c00      	cmp	r4, #0
 80060a6:	d1d7      	bne.n	8006058 <dir_register+0x96c>
	dirb[XDIR_NumName] = nc;	/* Set name length */
 80060a8:	f887 8023 	strb.w	r8, [r7, #35]	@ 0x23
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 80060ac:	f887 9001 	strb.w	r9, [r7, #1]
	while ((chr = *name++) != 0) {
 80060b0:	f835 0b02 	ldrh.w	r0, [r5], #2
 80060b4:	2800      	cmp	r0, #0
 80060b6:	d03f      	beq.n	8006138 <dir_register+0xa4c>
 80060b8:	461e      	mov	r6, r3
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 80060ba:	f000 fea3 	bl	8006e04 <ff_wtoupper>
 80060be:	4603      	mov	r3, r0
	while ((chr = *name++) != 0) {
 80060c0:	f835 0b02 	ldrh.w	r0, [r5], #2
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 80060c4:	b2da      	uxtb	r2, r3
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 80060c6:	0a1b      	lsrs	r3, r3, #8
 80060c8:	eb02 0254 	add.w	r2, r2, r4, lsr #1
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 80060cc:	eb02 32c4 	add.w	r2, r2, r4, lsl #15
 80060d0:	b292      	uxth	r2, r2
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 80060d2:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80060d6:	eb03 33c2 	add.w	r3, r3, r2, lsl #15
 80060da:	b29c      	uxth	r4, r3
	while ((chr = *name++) != 0) {
 80060dc:	2800      	cmp	r0, #0
 80060de:	d1ec      	bne.n	80060ba <dir_register+0x9ce>
	*ptr++ = (BYTE)val; val >>= 8;
 80060e0:	4633      	mov	r3, r6
 80060e2:	b2e2      	uxtb	r2, r4
	*ptr++ = (BYTE)val;
 80060e4:	0a20      	lsrs	r0, r4, #8
 80060e6:	f887 0025 	strb.w	r0, [r7, #37]	@ 0x25
}
 80060ea:	4618      	mov	r0, r3
	*ptr++ = (BYTE)val; val >>= 8;
 80060ec:	f887 2024 	strb.w	r2, [r7, #36]	@ 0x24
}
 80060f0:	b01b      	add	sp, #108	@ 0x6c
 80060f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80060f6:	469b      	mov	fp, r3
 80060f8:	f7ff bb12 	b.w	8005720 <dir_register+0x34>
	FRESULT res = FR_INT_ERR;
 80060fc:	2202      	movs	r2, #2
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 80060fe:	4613      	mov	r3, r2
 8006100:	e70b      	b.n	8005f1a <dir_register+0x82e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006102:	2307      	movs	r3, #7
 8006104:	e709      	b.n	8005f1a <dir_register+0x82e>
			*d++ = *s++;
 8006106:	f895 1040 	ldrb.w	r1, [r5, #64]	@ 0x40
 800610a:	7011      	strb	r1, [r2, #0]
 800610c:	f895 1041 	ldrb.w	r1, [r5, #65]	@ 0x41
 8006110:	7051      	strb	r1, [r2, #1]
 8006112:	f895 1042 	ldrb.w	r1, [r5, #66]	@ 0x42
 8006116:	7091      	strb	r1, [r2, #2]
 8006118:	f895 1043 	ldrb.w	r1, [r5, #67]	@ 0x43
 800611c:	70d1      	strb	r1, [r2, #3]
 800611e:	f895 1044 	ldrb.w	r1, [r5, #68]	@ 0x44
 8006122:	7111      	strb	r1, [r2, #4]
 8006124:	f895 1045 	ldrb.w	r1, [r5, #69]	@ 0x45
 8006128:	7151      	strb	r1, [r2, #5]
 800612a:	f895 1046 	ldrb.w	r1, [r5, #70]	@ 0x46
 800612e:	7191      	strb	r1, [r2, #6]
 8006130:	f895 1047 	ldrb.w	r1, [r5, #71]	@ 0x47
 8006134:	71d1      	strb	r1, [r2, #7]
 8006136:	e729      	b.n	8005f8c <dir_register+0x8a0>
	while ((chr = *name++) != 0) {
 8006138:	4602      	mov	r2, r0
 800613a:	e7d4      	b.n	80060e6 <dir_register+0x9fa>
 800613c:	88888889 	.word	0x88888889

08006140 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006140:	b510      	push	{r4, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 8006148:	b1a1      	cbz	r1, 8006174 <f_mount+0x34>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800614a:	f891 c000 	ldrb.w	ip, [r1]
 800614e:	f1bc 0f1f 	cmp.w	ip, #31
 8006152:	d912      	bls.n	800617a <f_mount+0x3a>
 8006154:	f1bc 0f3a 	cmp.w	ip, #58	@ 0x3a
 8006158:	d00f      	beq.n	800617a <f_mount+0x3a>
 800615a:	4608      	mov	r0, r1
 800615c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8006160:	2b1f      	cmp	r3, #31
 8006162:	d90c      	bls.n	800617e <f_mount+0x3e>
 8006164:	2b3a      	cmp	r3, #58	@ 0x3a
 8006166:	d1f9      	bne.n	800615c <f_mount+0x1c>
			i = *tp++ - '0';
 8006168:	3101      	adds	r1, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800616a:	4288      	cmp	r0, r1
 800616c:	d102      	bne.n	8006174 <f_mount+0x34>
 800616e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8006172:	d006      	beq.n	8006182 <f_mount+0x42>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 8006174:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8006176:	b002      	add	sp, #8
 8006178:	bd10      	pop	{r4, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800617a:	4663      	mov	r3, ip
 800617c:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800617e:	2b3a      	cmp	r3, #58	@ 0x3a
 8006180:	d0f2      	beq.n	8006168 <f_mount+0x28>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006182:	4c0e      	ldr	r4, [pc, #56]	@ (80061bc <f_mount+0x7c>)
 8006184:	6821      	ldr	r1, [r4, #0]
	if (cfs) {
 8006186:	b139      	cbz	r1, 8006198 <f_mount+0x58>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006188:	4b0d      	ldr	r3, [pc, #52]	@ (80061c0 <f_mount+0x80>)
 800618a:	6818      	ldr	r0, [r3, #0]
 800618c:	4281      	cmp	r1, r0
 800618e:	d101      	bne.n	8006194 <f_mount+0x54>
 8006190:	2000      	movs	r0, #0
 8006192:	6018      	str	r0, [r3, #0]
		cfs->fs_type = 0;				/* Clear old fs object */
 8006194:	2300      	movs	r3, #0
 8006196:	700b      	strb	r3, [r1, #0]
	if (fs) {
 8006198:	9b01      	ldr	r3, [sp, #4]
 800619a:	b15b      	cbz	r3, 80061b4 <f_mount+0x74>
		fs->fs_type = 0;				/* Clear new fs object */
 800619c:	2100      	movs	r1, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800619e:	2a01      	cmp	r2, #1
	FatFs[vol] = fs;					/* Register new fs object */
 80061a0:	6023      	str	r3, [r4, #0]
		fs->fs_type = 0;				/* Clear new fs object */
 80061a2:	7019      	strb	r1, [r3, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80061a4:	d107      	bne.n	80061b6 <f_mount+0x76>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80061a6:	460a      	mov	r2, r1
 80061a8:	a901      	add	r1, sp, #4
 80061aa:	4668      	mov	r0, sp
 80061ac:	f7fd faf0 	bl	8003790 <find_volume>
}
 80061b0:	b002      	add	sp, #8
 80061b2:	bd10      	pop	{r4, pc}
	FatFs[vol] = fs;					/* Register new fs object */
 80061b4:	6023      	str	r3, [r4, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80061b6:	2000      	movs	r0, #0
}
 80061b8:	b002      	add	sp, #8
 80061ba:	bd10      	pop	{r4, pc}
 80061bc:	20006f98 	.word	0x20006f98
 80061c0:	20006f84 	.word	0x20006f84

080061c4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80061c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c8:	b099      	sub	sp, #100	@ 0x64
 80061ca:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80061cc:	b330      	cbz	r0, 800621c <f_open+0x58>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80061ce:	f002 073f 	and.w	r7, r2, #63	@ 0x3f
	res = find_volume(&path, &fs, mode);
 80061d2:	4616      	mov	r6, r2
 80061d4:	4605      	mov	r5, r0
 80061d6:	a903      	add	r1, sp, #12
 80061d8:	a801      	add	r0, sp, #4
 80061da:	463a      	mov	r2, r7
 80061dc:	f7fd fad8 	bl	8003790 <find_volume>
	if (res == FR_OK) {
 80061e0:	4604      	mov	r4, r0
 80061e2:	b128      	cbz	r0, 80061f0 <f_open+0x2c>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80061e4:	2300      	movs	r3, #0
 80061e6:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
 80061e8:	4620      	mov	r0, r4
 80061ea:	b019      	add	sp, #100	@ 0x64
 80061ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dj.obj.fs = fs;
 80061f0:	f8dd 800c 	ldr.w	r8, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 80061f4:	a804      	add	r0, sp, #16
 80061f6:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 80061f8:	f8cd 8010 	str.w	r8, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 80061fc:	f7fe fc74 	bl	8004ae8 <follow_path>
		if (res == FR_OK) {
 8006200:	b928      	cbnz	r0, 800620e <f_open+0x4a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006202:	f99d 305b 	ldrsb.w	r3, [sp, #91]	@ 0x5b
 8006206:	2b00      	cmp	r3, #0
 8006208:	da0d      	bge.n	8006226 <f_open+0x62>
				res = FR_INVALID_NAME;
 800620a:	2406      	movs	r4, #6
 800620c:	e7ea      	b.n	80061e4 <f_open+0x20>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800620e:	f016 0f1c 	tst.w	r6, #28
 8006212:	d001      	beq.n	8006218 <f_open+0x54>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006214:	2804      	cmp	r0, #4
 8006216:	d05c      	beq.n	80062d2 <f_open+0x10e>
 8006218:	4604      	mov	r4, r0
 800621a:	e7e3      	b.n	80061e4 <f_open+0x20>
	if (!fp) return FR_INVALID_OBJECT;
 800621c:	2409      	movs	r4, #9
}
 800621e:	4620      	mov	r0, r4
 8006220:	b019      	add	sp, #100	@ 0x64
 8006222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (Files[i].fs) {	/* Existing entry */
 8006226:	f8df 9358 	ldr.w	r9, [pc, #856]	@ 8006580 <f_open+0x3bc>
 800622a:	f006 0b3e 	and.w	fp, r6, #62	@ 0x3e
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800622e:	9804      	ldr	r0, [sp, #16]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006230:	4622      	mov	r2, r4
				Files[i].clu == dp->obj.sclust &&
 8006232:	f8dd c018 	ldr.w	ip, [sp, #24]
				Files[i].ofs == dp->dptr) break;
 8006236:	f8d9 a008 	ldr.w	sl, [r9, #8]
 800623a:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
				Files[i].clu == dp->obj.sclust &&
 800623e:	e9d9 3100 	ldrd	r3, r1, [r9]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006242:	b123      	cbz	r3, 800624e <f_open+0x8a>
 8006244:	b90a      	cbnz	r2, 800624a <f_open+0x86>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006246:	4283      	cmp	r3, r0
 8006248:	d02d      	beq.n	80062a6 <f_open+0xe2>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800624a:	2412      	movs	r4, #18
 800624c:	e7ca      	b.n	80061e4 <f_open+0x20>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800624e:	2a00      	cmp	r2, #0
 8006250:	d1fb      	bne.n	800624a <f_open+0x86>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006252:	f016 0f1c 	tst.w	r6, #28
 8006256:	d009      	beq.n	800626c <f_open+0xa8>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006258:	f89d 2016 	ldrb.w	r2, [sp, #22]
 800625c:	f012 0f11 	tst.w	r2, #17
 8006260:	d133      	bne.n	80062ca <f_open+0x106>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006262:	0772      	lsls	r2, r6, #29
 8006264:	f140 80d8 	bpl.w	8006418 <f_open+0x254>
 8006268:	2408      	movs	r4, #8
 800626a:	e7bb      	b.n	80061e4 <f_open+0x20>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800626c:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8006270:	f012 0f10 	tst.w	r2, #16
 8006274:	d12b      	bne.n	80062ce <f_open+0x10a>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006276:	f016 0f02 	tst.w	r6, #2
 800627a:	d124      	bne.n	80062c6 <f_open+0x102>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800627c:	0736      	lsls	r6, r6, #28
			fp->dir_ptr = dj.dir;
 800627e:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006282:	d501      	bpl.n	8006288 <f_open+0xc4>
				mode |= FA_MODIFIED;
 8006284:	f047 0740 	orr.w	r7, r7, #64	@ 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006288:	f8d8 2034 	ldr.w	r2, [r8, #52]	@ 0x34
		if (Files[i].fs == dp->obj.fs &&
 800628c:	4298      	cmp	r0, r3
			fp->dir_ptr = dj.dir;
 800628e:	e9c5 2e12 	strd	r2, lr, [r5, #72]	@ 0x48
		if (Files[i].fs == dp->obj.fs &&
 8006292:	d101      	bne.n	8006298 <f_open+0xd4>
 8006294:	4561      	cmp	r1, ip
 8006296:	d05f      	beq.n	8006358 <f_open+0x194>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 80c8 	beq.w	800642e <f_open+0x26a>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800629e:	2300      	movs	r3, #0
 80062a0:	62eb      	str	r3, [r5, #44]	@ 0x2c
					if (clst <= 1) res = FR_INT_ERR;
 80062a2:	2402      	movs	r4, #2
 80062a4:	e79e      	b.n	80061e4 <f_open+0x20>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80062a6:	4561      	cmp	r1, ip
 80062a8:	d1cf      	bne.n	800624a <f_open+0x86>
				Files[i].clu == dp->obj.sclust &&
 80062aa:	45f2      	cmp	sl, lr
 80062ac:	f04f 0201 	mov.w	r2, #1
 80062b0:	d1c7      	bne.n	8006242 <f_open+0x7e>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80062b2:	f1bb 0f00 	cmp.w	fp, #0
 80062b6:	d104      	bne.n	80062c2 <f_open+0xfe>
 80062b8:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 80062bc:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 80062c0:	d1c7      	bne.n	8006252 <f_open+0x8e>
 80062c2:	2410      	movs	r4, #16
 80062c4:	e78e      	b.n	80061e4 <f_open+0x20>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80062c6:	07d2      	lsls	r2, r2, #31
 80062c8:	d5d8      	bpl.n	800627c <f_open+0xb8>
						res = FR_DENIED;
 80062ca:	2407      	movs	r4, #7
 80062cc:	e78a      	b.n	80061e4 <f_open+0x20>
					res = FR_NO_FILE;
 80062ce:	2404      	movs	r4, #4
 80062d0:	e788      	b.n	80061e4 <f_open+0x20>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80062d2:	f8df 92ac 	ldr.w	r9, [pc, #684]	@ 8006580 <f_open+0x3bc>
 80062d6:	f8d9 3000 	ldr.w	r3, [r9]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1b5      	bne.n	800624a <f_open+0x86>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80062de:	a804      	add	r0, sp, #16
 80062e0:	f7ff fa04 	bl	80056ec <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80062e4:	2800      	cmp	r0, #0
 80062e6:	d197      	bne.n	8006218 <f_open+0x54>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80062e8:	f047 0708 	orr.w	r7, r7, #8
				dw = GET_FATTIME();
 80062ec:	f7fc ff98 	bl	8003220 <get_fattime>
				if (fs->fs_type == FS_EXFAT) {
 80062f0:	f898 2000 	ldrb.w	r2, [r8]
				dw = GET_FATTIME();
 80062f4:	4603      	mov	r3, r0
				if (fs->fs_type == FS_EXFAT) {
 80062f6:	2a04      	cmp	r2, #4
 80062f8:	f000 80d5 	beq.w	80064a6 <f_open+0x2e2>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80062fc:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006300:	2320      	movs	r3, #32
	*ptr++ = (BYTE)val; val >>= 8;
 8006302:	f8ce 000e 	str.w	r0, [lr, #14]
 8006306:	f8ce 0016 	str.w	r0, [lr, #22]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800630a:	f88e 300b 	strb.w	r3, [lr, #11]
	if (fs->fs_type == FS_FAT32) {
 800630e:	f898 3000 	ldrb.w	r3, [r8]
	cl = ld_word(dir + DIR_FstClusLO);
 8006312:	f8be 601a 	ldrh.w	r6, [lr, #26]
	if (fs->fs_type == FS_FAT32) {
 8006316:	2b03      	cmp	r3, #3
 8006318:	d103      	bne.n	8006322 <f_open+0x15e>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800631a:	f8be 3014 	ldrh.w	r3, [lr, #20]
 800631e:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 8006322:	2300      	movs	r3, #0
 8006324:	f8ae 301a 	strh.w	r3, [lr, #26]
	if (fs->fs_type == FS_FAT32) {
 8006328:	f898 2000 	ldrb.w	r2, [r8]
 800632c:	2a03      	cmp	r2, #3
	*ptr++ = (BYTE)val; val >>= 8;
 800632e:	f04f 0200 	mov.w	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
 8006332:	bf08      	it	eq
 8006334:	f8ae 3014 	strheq.w	r3, [lr, #20]
					fs->wflag = 1;
 8006338:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800633a:	f8ce 201c 	str.w	r2, [lr, #28]
					fs->wflag = 1;
 800633e:	f888 3003 	strb.w	r3, [r8, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8006342:	2e00      	cmp	r6, #0
 8006344:	f040 8099 	bne.w	800647a <f_open+0x2b6>
		if (Files[i].fs == dp->obj.fs &&
 8006348:	f8d9 3000 	ldr.w	r3, [r9]
 800634c:	9804      	ldr	r0, [sp, #16]
			Files[i].clu == dp->obj.sclust &&
 800634e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006352:	f8dd c018 	ldr.w	ip, [sp, #24]
 8006356:	e795      	b.n	8006284 <f_open+0xc0>
 8006358:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800635c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800635e:	4291      	cmp	r1, r2
 8006360:	d19a      	bne.n	8006298 <f_open+0xd4>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006362:	2f01      	cmp	r7, #1
 8006364:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006368:	d95e      	bls.n	8006428 <f_open+0x264>
 800636a:	2b00      	cmp	r3, #0
 800636c:	d197      	bne.n	800629e <f_open+0xda>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800636e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006372:	f8a9 300c 	strh.w	r3, [r9, #12]
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006376:	2301      	movs	r3, #1
 8006378:	62eb      	str	r3, [r5, #44]	@ 0x2c
			if (fs->fs_type == FS_EXFAT) {
 800637a:	f898 3000 	ldrb.w	r3, [r8]
 800637e:	2b04      	cmp	r3, #4
 8006380:	d062      	beq.n	8006448 <f_open+0x284>
	if (fs->fs_type == FS_FAT32) {
 8006382:	2b03      	cmp	r3, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8006384:	f8be 201a 	ldrh.w	r2, [lr, #26]
	if (fs->fs_type == FS_FAT32) {
 8006388:	d103      	bne.n	8006392 <f_open+0x1ce>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800638a:	f8be 3014 	ldrh.w	r3, [lr, #20]
 800638e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006392:	60aa      	str	r2, [r5, #8]
	rv = rv << 8 | ptr[0];
 8006394:	f8de 301c 	ldr.w	r3, [lr, #28]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006398:	612b      	str	r3, [r5, #16]
 800639a:	2300      	movs	r3, #0
 800639c:	616b      	str	r3, [r5, #20]
			fp->obj.id = fs->id;
 800639e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
			fp->cltbl = 0;			/* Disable fast seek mode */
 80063a2:	2600      	movs	r6, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80063a4:	f105 0954 	add.w	r9, r5, #84	@ 0x54
			fp->fptr = 0;			/* Set file pointer top of the file */
 80063a8:	f04f 0a00 	mov.w	sl, #0
 80063ac:	f04f 0b00 	mov.w	fp, #0
		*d++ = (BYTE)val;
 80063b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063b4:	4631      	mov	r1, r6
 80063b6:	4648      	mov	r0, r9
			fp->obj.fs = fs;	 	/* Validate the file object */
 80063b8:	f8c5 8000 	str.w	r8, [r5]
			fp->cltbl = 0;			/* Disable fast seek mode */
 80063bc:	652e      	str	r6, [r5, #80]	@ 0x50
			fp->obj.id = fs->id;
 80063be:	80ab      	strh	r3, [r5, #4]
			fp->flag = mode;		/* Set file access mode */
 80063c0:	f885 7030 	strb.w	r7, [r5, #48]	@ 0x30
			fp->err = 0;			/* Clear error flag */
 80063c4:	f885 6031 	strb.w	r6, [r5, #49]	@ 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 80063c8:	646e      	str	r6, [r5, #68]	@ 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 80063ca:	e9c5 ab0e 	strd	sl, fp, [r5, #56]	@ 0x38
		*d++ = (BYTE)val;
 80063ce:	f002 fb62 	bl	8008a96 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80063d2:	06ba      	lsls	r2, r7, #26
 80063d4:	f57f af08 	bpl.w	80061e8 <f_open+0x24>
 80063d8:	e9d5 ab04 	ldrd	sl, fp, [r5, #16]
 80063dc:	ea5a 030b 	orrs.w	r3, sl, fp
 80063e0:	f43f af02 	beq.w	80061e8 <f_open+0x24>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80063e4:	f8b8 700a 	ldrh.w	r7, [r8, #10]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80063e8:	68a9      	ldr	r1, [r5, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80063ea:	027f      	lsls	r7, r7, #9
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80063ec:	e9c5 ab0e 	strd	sl, fp, [r5, #56]	@ 0x38
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80063f0:	4557      	cmp	r7, sl
 80063f2:	eb76 030b 	sbcs.w	r3, r6, fp
 80063f6:	f080 809a 	bcs.w	800652e <f_open+0x36a>
					clst = get_fat(&fp->obj, clst);
 80063fa:	4628      	mov	r0, r5
 80063fc:	f7fd f88a 	bl	8003514 <get_fat>
					if (clst <= 1) res = FR_INT_ERR;
 8006400:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8006402:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8006404:	d90e      	bls.n	8006424 <f_open+0x260>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006406:	ebba 0a07 	subs.w	sl, sl, r7
 800640a:	f16b 0b00 	sbc.w	fp, fp, #0
 800640e:	1c43      	adds	r3, r0, #1
 8006410:	d1ee      	bne.n	80063f0 <f_open+0x22c>
				fp->clust = clst;
 8006412:	6428      	str	r0, [r5, #64]	@ 0x40
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006414:	2401      	movs	r4, #1
 8006416:	e6e5      	b.n	80061e4 <f_open+0x20>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006418:	0732      	lsls	r2, r6, #28
 800641a:	f53f af67 	bmi.w	80062ec <f_open+0x128>
			fp->dir_ptr = dj.dir;
 800641e:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 8006422:	e731      	b.n	8006288 <f_open+0xc4>
				fp->clust = clst;
 8006424:	6428      	str	r0, [r5, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006426:	e73c      	b.n	80062a2 <f_open+0xde>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006428:	3301      	adds	r3, #1
 800642a:	b29b      	uxth	r3, r3
 800642c:	e7a1      	b.n	8006372 <f_open+0x1ae>
		Files[i].ctr = 0;
 800642e:	f8a9 300c 	strh.w	r3, [r9, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006432:	2f01      	cmp	r7, #1
		Files[i].ofs = dp->dptr;
 8006434:	9b10      	ldr	r3, [sp, #64]	@ 0x40
		Files[i].fs = dp->obj.fs;
 8006436:	f8c9 0000 	str.w	r0, [r9]
		Files[i].clu = dp->obj.sclust;
 800643a:	f8c9 c004 	str.w	ip, [r9, #4]
		Files[i].ofs = dp->dptr;
 800643e:	f8c9 3008 	str.w	r3, [r9, #8]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006442:	d894      	bhi.n	800636e <f_open+0x1aa>
 8006444:	2301      	movs	r3, #1
 8006446:	e794      	b.n	8006372 <f_open+0x1ae>
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8006448:	9b08      	ldr	r3, [sp, #32]
 800644a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800644e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 8006452:	f8c5 c020 	str.w	ip, [r5, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8006456:	4313      	orrs	r3, r2
 8006458:	626b      	str	r3, [r5, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800645a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800645c:	62ab      	str	r3, [r5, #40]	@ 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800645e:	f8d8 3010 	ldr.w	r3, [r8, #16]
	rv = rv << 8 | ptr[0];
 8006462:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 8006464:	60aa      	str	r2, [r5, #8]
	rv = rv << 8 | ptr[0];
 8006466:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8006468:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800646a:	e9c5 1204 	strd	r1, r2, [r5, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800646e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006472:	f003 0302 	and.w	r3, r3, #2
 8006476:	71eb      	strb	r3, [r5, #7]
 8006478:	e791      	b.n	800639e <f_open+0x1da>
						res = remove_chain(&dj.obj, cl, 0);
 800647a:	a804      	add	r0, sp, #16
 800647c:	4631      	mov	r1, r6
						dw = fs->winsect;
 800647e:	f8d8 a034 	ldr.w	sl, [r8, #52]	@ 0x34
						res = remove_chain(&dj.obj, cl, 0);
 8006482:	f7fe fe85 	bl	8005190 <remove_chain>
						if (res == FR_OK) {
 8006486:	2800      	cmp	r0, #0
 8006488:	f47f aec6 	bne.w	8006218 <f_open+0x54>
							res = move_window(fs, dw);
 800648c:	4651      	mov	r1, sl
 800648e:	4640      	mov	r0, r8
 8006490:	f7fc ff82 	bl	8003398 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006494:	1e73      	subs	r3, r6, #1
 8006496:	f8c8 3014 	str.w	r3, [r8, #20]
		if (res == FR_OK) {
 800649a:	2800      	cmp	r0, #0
 800649c:	f47f aebc 	bne.w	8006218 <f_open+0x54>
			fp->dir_ptr = dj.dir;
 80064a0:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 80064a4:	e750      	b.n	8006348 <f_open+0x184>
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 80064a6:	f8d8 2010 	ldr.w	r2, [r8, #16]
					fp->obj.n_frag = 0;
 80064aa:	2100      	movs	r1, #0
					fp->obj.fs = fs;
 80064ac:	f8c5 8000 	str.w	r8, [r5]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 80064b0:	f04f 0c20 	mov.w	ip, #32
	rv = rv << 8 | ptr[0];
 80064b4:	f8d2 e034 	ldr.w	lr, [r2, #52]	@ 0x34
					fs->dirbuf[XDIR_GenFlags] = 1;
 80064b8:	2601      	movs	r6, #1
					res = store_xdir(&dj);
 80064ba:	a804      	add	r0, sp, #16
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 80064bc:	f8c5 e008 	str.w	lr, [r5, #8]
	rv = rv << 8 | ptr[0];
 80064c0:	f8d2 e03c 	ldr.w	lr, [r2, #60]	@ 0x3c
 80064c4:	f8d2 a038 	ldr.w	sl, [r2, #56]	@ 0x38
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80064c8:	e9c5 ae04 	strd	sl, lr, [r5, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80064cc:	f892 e021 	ldrb.w	lr, [r2, #33]	@ 0x21
					fp->obj.n_frag = 0;
 80064d0:	61e9      	str	r1, [r5, #28]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80064d2:	f00e 0e02 	and.w	lr, lr, #2
 80064d6:	f885 e007 	strb.w	lr, [r5, #7]
	*ptr++ = (BYTE)val; val >>= 8;
 80064da:	6093      	str	r3, [r2, #8]
					fs->dirbuf[XDIR_CrtTime10] = 0;
 80064dc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80064e0:	7511      	strb	r1, [r2, #20]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 80064e2:	f8d8 2010 	ldr.w	r2, [r8, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 80064e6:	60d3      	str	r3, [r2, #12]
					fs->dirbuf[XDIR_ModTime10] = 0;
 80064e8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80064ec:	7559      	strb	r1, [r3, #21]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 80064ee:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80064f2:	f883 c004 	strb.w	ip, [r3, #4]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 80064f6:	f8d8 3010 	ldr.w	r3, [r8, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 80064fa:	6359      	str	r1, [r3, #52]	@ 0x34
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 80064fc:	f8d8 3010 	ldr.w	r3, [r8, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8006500:	6399      	str	r1, [r3, #56]	@ 0x38
 8006502:	63d9      	str	r1, [r3, #60]	@ 0x3c
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 8006504:	f8d8 3010 	ldr.w	r3, [r8, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8006508:	6299      	str	r1, [r3, #40]	@ 0x28
 800650a:	62d9      	str	r1, [r3, #44]	@ 0x2c
					fs->dirbuf[XDIR_GenFlags] = 1;
 800650c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006510:	f883 6021 	strb.w	r6, [r3, #33]	@ 0x21
					res = store_xdir(&dj);
 8006514:	f7fd ffe4 	bl	80044e0 <store_xdir>
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 8006518:	4602      	mov	r2, r0
 800651a:	bb70      	cbnz	r0, 800657a <f_open+0x3b6>
 800651c:	68a9      	ldr	r1, [r5, #8]
 800651e:	2900      	cmp	r1, #0
 8006520:	d0be      	beq.n	80064a0 <f_open+0x2dc>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8006522:	4628      	mov	r0, r5
 8006524:	f7fe fe34 	bl	8005190 <remove_chain>
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8006528:	68ab      	ldr	r3, [r5, #8]
 800652a:	3b01      	subs	r3, #1
 800652c:	e7b3      	b.n	8006496 <f_open+0x2d2>
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800652e:	f3ca 0308 	ubfx	r3, sl, #0, #9
				fp->clust = clst;
 8006532:	6429      	str	r1, [r5, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006534:	2b00      	cmp	r3, #0
 8006536:	f43f ae57 	beq.w	80061e8 <f_open+0x24>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800653a:	f8d8 301c 	ldr.w	r3, [r8, #28]
	clst -= 2;
 800653e:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006540:	3b02      	subs	r3, #2
 8006542:	4299      	cmp	r1, r3
 8006544:	f4bf aead 	bcs.w	80062a2 <f_open+0xde>
	return clst * fs->csize + fs->database;
 8006548:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800654c:	f8d8 2030 	ldr.w	r2, [r8, #48]	@ 0x30
 8006550:	fb01 2203 	mla	r2, r1, r3, r2
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006554:	2a00      	cmp	r2, #0
 8006556:	f43f aea4 	beq.w	80062a2 <f_open+0xde>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800655a:	ea4f 2a5a 	mov.w	sl, sl, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800655e:	4649      	mov	r1, r9
 8006560:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006562:	ea4a 5acb 	orr.w	sl, sl, fp, lsl #23
 8006566:	4452      	add	r2, sl
 8006568:	646a      	str	r2, [r5, #68]	@ 0x44
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800656a:	f898 0001 	ldrb.w	r0, [r8, #1]
 800656e:	f7fc fe7d 	bl	800326c <disk_read>
 8006572:	2800      	cmp	r0, #0
 8006574:	f43f ae38 	beq.w	80061e8 <f_open+0x24>
 8006578:	e74c      	b.n	8006414 <f_open+0x250>
 800657a:	4604      	mov	r4, r0
 800657c:	e632      	b.n	80061e4 <f_open+0x20>
 800657e:	bf00      	nop
 8006580:	20006f84 	.word	0x20006f84

08006584 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006588:	4698      	mov	r8, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800658a:	2300      	movs	r3, #0
{
 800658c:	b083      	sub	sp, #12
	*br = 0;	/* Clear read byte counter */
 800658e:	f8c8 3000 	str.w	r3, [r8]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006592:	b150      	cbz	r0, 80065aa <f_read+0x26>
 8006594:	6803      	ldr	r3, [r0, #0]
 8006596:	4604      	mov	r4, r0
 8006598:	b13b      	cbz	r3, 80065aa <f_read+0x26>
 800659a:	4616      	mov	r6, r2
 800659c:	781a      	ldrb	r2, [r3, #0]
 800659e:	b122      	cbz	r2, 80065aa <f_read+0x26>
 80065a0:	460f      	mov	r7, r1
 80065a2:	88da      	ldrh	r2, [r3, #6]
 80065a4:	8881      	ldrh	r1, [r0, #4]
 80065a6:	4291      	cmp	r1, r2
 80065a8:	d003      	beq.n	80065b2 <f_read+0x2e>
	FRESULT res = FR_INVALID_OBJECT;
 80065aa:	2009      	movs	r0, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 80065ac:	b003      	add	sp, #12
 80065ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80065b2:	7858      	ldrb	r0, [r3, #1]
 80065b4:	f7fc fe36 	bl	8003224 <disk_status>
 80065b8:	07c1      	lsls	r1, r0, #31
 80065ba:	d4f6      	bmi.n	80065aa <f_read+0x26>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80065bc:	f894 0031 	ldrb.w	r0, [r4, #49]	@ 0x31
 80065c0:	2800      	cmp	r0, #0
 80065c2:	d1f3      	bne.n	80065ac <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80065c4:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80065c8:	f013 0901 	ands.w	r9, r3, #1
 80065cc:	f000 80df 	beq.w	800678e <f_read+0x20a>
	remain = fp->obj.objsize - fp->fptr;
 80065d0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80065d2:	6922      	ldr	r2, [r4, #16]
 80065d4:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 80065d6:	1ad2      	subs	r2, r2, r3
 80065d8:	6961      	ldr	r1, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80065da:	f8d4 a000 	ldr.w	sl, [r4]
	remain = fp->obj.objsize - fp->fptr;
 80065de:	eb61 0105 	sbc.w	r1, r1, r5
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80065e2:	42b2      	cmp	r2, r6
 80065e4:	f171 0100 	sbcs.w	r1, r1, #0
 80065e8:	bf38      	it	cc
 80065ea:	4616      	movcc	r6, r2
	for ( ;  btr;								/* Repeat until all data read */
 80065ec:	2e00      	cmp	r6, #0
 80065ee:	d0dd      	beq.n	80065ac <f_read+0x28>
 80065f0:	461a      	mov	r2, r3
 80065f2:	9000      	str	r0, [sp, #0]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80065f4:	f3c2 0008 	ubfx	r0, r2, #0, #9
 80065f8:	2800      	cmp	r0, #0
 80065fa:	d158      	bne.n	80066ae <f_read+0x12a>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80065fc:	0a50      	lsrs	r0, r2, #9
 80065fe:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 8006602:	0a69      	lsrs	r1, r5, #9
 8006604:	ea40 50c5 	orr.w	r0, r0, r5, lsl #23
 8006608:	3b01      	subs	r3, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800660a:	4003      	ands	r3, r0
 800660c:	d03a      	beq.n	8006684 <f_read+0x100>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800660e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006610:	f8da 201c 	ldr.w	r2, [sl, #28]
	clst -= 2;
 8006614:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006616:	3a02      	subs	r2, #2
 8006618:	4290      	cmp	r0, r2
 800661a:	d241      	bcs.n	80066a0 <f_read+0x11c>
	return clst * fs->csize + fs->database;
 800661c:	f8ba 100a 	ldrh.w	r1, [sl, #10]
 8006620:	f8da 2030 	ldr.w	r2, [sl, #48]	@ 0x30
 8006624:	fb01 2200 	mla	r2, r1, r0, r2
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006628:	2a00      	cmp	r2, #0
 800662a:	d039      	beq.n	80066a0 <f_read+0x11c>
			if (cc) {							/* Read maximum contiguous sectors directly */
 800662c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
			sect += csect;
 8006630:	eb03 0b02 	add.w	fp, r3, r2
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006634:	d377      	bcc.n	8006726 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006636:	eb03 2256 	add.w	r2, r3, r6, lsr #9
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800663a:	f89a 0001 	ldrb.w	r0, [sl, #1]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800663e:	0a75      	lsrs	r5, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006640:	428a      	cmp	r2, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006642:	465a      	mov	r2, fp
					cc = fs->csize - csect;
 8006644:	bf88      	it	hi
 8006646:	1acd      	subhi	r5, r1, r3
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006648:	4639      	mov	r1, r7
 800664a:	462b      	mov	r3, r5
 800664c:	f7fc fe0e 	bl	800326c <disk_read>
 8006650:	2800      	cmp	r0, #0
 8006652:	f040 8095 	bne.w	8006780 <f_read+0x1fc>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006656:	f994 3030 	ldrsb.w	r3, [r4, #48]	@ 0x30
 800665a:	2b00      	cmp	r3, #0
 800665c:	f2c0 80af 	blt.w	80067be <f_read+0x23a>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006660:	0269      	lsls	r1, r5, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006662:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006664:	440f      	add	r7, r1
 8006666:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8006668:	188a      	adds	r2, r1, r2
 800666a:	f8d8 3000 	ldr.w	r3, [r8]
 800666e:	f145 0500 	adc.w	r5, r5, #0
 8006672:	440b      	add	r3, r1
	for ( ;  btr;								/* Repeat until all data read */
 8006674:	1a76      	subs	r6, r6, r1
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006676:	63a2      	str	r2, [r4, #56]	@ 0x38
 8006678:	63e5      	str	r5, [r4, #60]	@ 0x3c
 800667a:	f8c8 3000 	str.w	r3, [r8]
	for ( ;  btr;								/* Repeat until all data read */
 800667e:	d1b9      	bne.n	80065f4 <f_read+0x70>
 8006680:	9800      	ldr	r0, [sp, #0]
 8006682:	e793      	b.n	80065ac <f_read+0x28>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006684:	4315      	orrs	r5, r2
 8006686:	d165      	bne.n	8006754 <f_read+0x1d0>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006688:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800668a:	2801      	cmp	r0, #1
 800668c:	d908      	bls.n	80066a0 <f_read+0x11c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800668e:	1c42      	adds	r2, r0, #1
 8006690:	d076      	beq.n	8006780 <f_read+0x1fc>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006692:	f8da 201c 	ldr.w	r2, [sl, #28]
				fp->clust = clst;				/* Update current cluster */
 8006696:	6420      	str	r0, [r4, #64]	@ 0x40
	clst -= 2;
 8006698:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800669a:	3a02      	subs	r2, #2
 800669c:	4290      	cmp	r0, r2
 800669e:	d3bd      	bcc.n	800661c <f_read+0x98>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80066a0:	2302      	movs	r3, #2
 80066a2:	4618      	mov	r0, r3
 80066a4:	f884 3031 	strb.w	r3, [r4, #49]	@ 0x31
}
 80066a8:	b003      	add	sp, #12
 80066aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80066ae:	f104 0554 	add.w	r5, r4, #84	@ 0x54
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80066b2:	f5c0 7100 	rsb	r1, r0, #512	@ 0x200
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80066b6:	182a      	adds	r2, r5, r0
 80066b8:	42b1      	cmp	r1, r6
 80066ba:	bf28      	it	cs
 80066bc:	4631      	movcs	r1, r6
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80066be:	1e4b      	subs	r3, r1, #1
 80066c0:	2b05      	cmp	r3, #5
 80066c2:	d904      	bls.n	80066ce <f_read+0x14a>
 80066c4:	3001      	adds	r0, #1
 80066c6:	4405      	add	r5, r0
 80066c8:	1b7d      	subs	r5, r7, r5
 80066ca:	2d02      	cmp	r5, #2
 80066cc:	d808      	bhi.n	80066e0 <f_read+0x15c>
 80066ce:	1e7b      	subs	r3, r7, #1
 80066d0:	1855      	adds	r5, r2, r1
			*d++ = *s++;
 80066d2:	f812 0b01 	ldrb.w	r0, [r2], #1
		} while (--cnt);
 80066d6:	42aa      	cmp	r2, r5
			*d++ = *s++;
 80066d8:	f803 0f01 	strb.w	r0, [r3, #1]!
		} while (--cnt);
 80066dc:	d1f9      	bne.n	80066d2 <f_read+0x14e>
 80066de:	e7c0      	b.n	8006662 <f_read+0xde>
 80066e0:	f021 0c03 	bic.w	ip, r1, #3
 80066e4:	463b      	mov	r3, r7
 80066e6:	4610      	mov	r0, r2
 80066e8:	44bc      	add	ip, r7
			*d++ = *s++;
 80066ea:	f850 5b04 	ldr.w	r5, [r0], #4
 80066ee:	f843 5b04 	str.w	r5, [r3], #4
		} while (--cnt);
 80066f2:	459c      	cmp	ip, r3
 80066f4:	d1f9      	bne.n	80066ea <f_read+0x166>
 80066f6:	f021 0303 	bic.w	r3, r1, #3
 80066fa:	f011 0f03 	tst.w	r1, #3
 80066fe:	f001 0003 	and.w	r0, r1, #3
 8006702:	eb07 0503 	add.w	r5, r7, r3
 8006706:	eb02 0c03 	add.w	ip, r2, r3
 800670a:	d0aa      	beq.n	8006662 <f_read+0xde>
			*d++ = *s++;
 800670c:	5cd2      	ldrb	r2, [r2, r3]
		} while (--cnt);
 800670e:	2801      	cmp	r0, #1
			*d++ = *s++;
 8006710:	54fa      	strb	r2, [r7, r3]
		} while (--cnt);
 8006712:	d0a6      	beq.n	8006662 <f_read+0xde>
			*d++ = *s++;
 8006714:	f89c 3001 	ldrb.w	r3, [ip, #1]
		} while (--cnt);
 8006718:	2802      	cmp	r0, #2
			*d++ = *s++;
 800671a:	706b      	strb	r3, [r5, #1]
		} while (--cnt);
 800671c:	d0a1      	beq.n	8006662 <f_read+0xde>
			*d++ = *s++;
 800671e:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8006722:	70ab      	strb	r3, [r5, #2]
		} while (--cnt);
 8006724:	e79d      	b.n	8006662 <f_read+0xde>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006726:	6c62      	ldr	r2, [r4, #68]	@ 0x44
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006728:	f104 0554 	add.w	r5, r4, #84	@ 0x54
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800672c:	455a      	cmp	r2, fp
 800672e:	d00b      	beq.n	8006748 <f_read+0x1c4>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006730:	f994 3030 	ldrsb.w	r3, [r4, #48]	@ 0x30
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006734:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006738:	2b00      	cmp	r3, #0
 800673a:	db31      	blt.n	80067a0 <f_read+0x21c>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800673c:	2301      	movs	r3, #1
 800673e:	465a      	mov	r2, fp
 8006740:	4629      	mov	r1, r5
 8006742:	f7fc fd93 	bl	800326c <disk_read>
 8006746:	b9d8      	cbnz	r0, 8006780 <f_read+0x1fc>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006748:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
			fp->sect = sect;
 800674a:	f8c4 b044 	str.w	fp, [r4, #68]	@ 0x44
 800674e:	f3c2 0008 	ubfx	r0, r2, #0, #9
 8006752:	e7ae      	b.n	80066b2 <f_read+0x12e>
					if (fp->cltbl) {
 8006754:	6d25      	ldr	r5, [r4, #80]	@ 0x50
 8006756:	b1e5      	cbz	r5, 8006792 <f_read+0x20e>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006758:	6822      	ldr	r2, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800675a:	3504      	adds	r5, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800675c:	9301      	str	r3, [sp, #4]
 800675e:	8952      	ldrh	r2, [r2, #10]
 8006760:	f7fa fab2 	bl	8000cc8 <__aeabi_uldivmod>
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006764:	682a      	ldr	r2, [r5, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006766:	9b01      	ldr	r3, [sp, #4]
 8006768:	b92a      	cbnz	r2, 8006776 <f_read+0x1f2>
 800676a:	e799      	b.n	80066a0 <f_read+0x11c>
		cl -= ncl; tbl++;		/* Next fragment */
 800676c:	1a80      	subs	r0, r0, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800676e:	f855 2f08 	ldr.w	r2, [r5, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006772:	2a00      	cmp	r2, #0
 8006774:	d094      	beq.n	80066a0 <f_read+0x11c>
		if (cl < ncl) break;	/* In this fragment? */
 8006776:	4290      	cmp	r0, r2
 8006778:	d2f8      	bcs.n	800676c <f_read+0x1e8>
	return cl + *tbl;	/* Return the cluster number */
 800677a:	686a      	ldr	r2, [r5, #4]
 800677c:	4410      	add	r0, r2
 800677e:	e784      	b.n	800668a <f_read+0x106>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006780:	2301      	movs	r3, #1
 8006782:	4648      	mov	r0, r9
 8006784:	f884 3031 	strb.w	r3, [r4, #49]	@ 0x31
}
 8006788:	b003      	add	sp, #12
 800678a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800678e:	2007      	movs	r0, #7
 8006790:	e70c      	b.n	80065ac <f_read+0x28>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006792:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8006794:	4620      	mov	r0, r4
 8006796:	9301      	str	r3, [sp, #4]
 8006798:	f7fc febc 	bl	8003514 <get_fat>
 800679c:	9b01      	ldr	r3, [sp, #4]
 800679e:	e774      	b.n	800668a <f_read+0x106>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80067a0:	2301      	movs	r3, #1
 80067a2:	4629      	mov	r1, r5
 80067a4:	f7fc fd7e 	bl	80032a4 <disk_write>
 80067a8:	2800      	cmp	r0, #0
 80067aa:	d1e9      	bne.n	8006780 <f_read+0x1fc>
					fp->flag &= (BYTE)~FA_DIRTY;
 80067ac:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80067b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067b4:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 80067b8:	f89a 0001 	ldrb.w	r0, [sl, #1]
 80067bc:	e7be      	b.n	800673c <f_read+0x1b8>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80067be:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80067c0:	eba3 030b 	sub.w	r3, r3, fp
 80067c4:	42ab      	cmp	r3, r5
 80067c6:	f4bf af4b 	bcs.w	8006660 <f_read+0xdc>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80067ca:	eb07 2343 	add.w	r3, r7, r3, lsl #9
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80067ce:	f104 0255 	add.w	r2, r4, #85	@ 0x55
 80067d2:	1a9a      	subs	r2, r3, r2
 80067d4:	2a02      	cmp	r2, #2
 80067d6:	d90a      	bls.n	80067ee <f_read+0x26a>
 80067d8:	f104 0254 	add.w	r2, r4, #84	@ 0x54
 80067dc:	f503 7000 	add.w	r0, r3, #512	@ 0x200
			*d++ = *s++;
 80067e0:	f852 1b04 	ldr.w	r1, [r2], #4
 80067e4:	f843 1b04 	str.w	r1, [r3], #4
		} while (--cnt);
 80067e8:	4283      	cmp	r3, r0
 80067ea:	d1f9      	bne.n	80067e0 <f_read+0x25c>
 80067ec:	e738      	b.n	8006660 <f_read+0xdc>
 80067ee:	3b01      	subs	r3, #1
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80067f0:	f104 0254 	add.w	r2, r4, #84	@ 0x54
 80067f4:	f504 7015 	add.w	r0, r4, #596	@ 0x254
			*d++ = *s++;
 80067f8:	f812 1b01 	ldrb.w	r1, [r2], #1
		} while (--cnt);
 80067fc:	4290      	cmp	r0, r2
			*d++ = *s++;
 80067fe:	f803 1f01 	strb.w	r1, [r3, #1]!
		} while (--cnt);
 8006802:	d1f9      	bne.n	80067f8 <f_read+0x274>
 8006804:	e72c      	b.n	8006660 <f_read+0xdc>
 8006806:	bf00      	nop

08006808 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800680c:	4698      	mov	r8, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 800680e:	2300      	movs	r3, #0
{
 8006810:	b083      	sub	sp, #12
	*bw = 0;	/* Clear write byte counter */
 8006812:	f8c8 3000 	str.w	r3, [r8]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006816:	b150      	cbz	r0, 800682e <f_write+0x26>
 8006818:	6803      	ldr	r3, [r0, #0]
 800681a:	4604      	mov	r4, r0
 800681c:	b13b      	cbz	r3, 800682e <f_write+0x26>
 800681e:	4617      	mov	r7, r2
 8006820:	781a      	ldrb	r2, [r3, #0]
 8006822:	b122      	cbz	r2, 800682e <f_write+0x26>
 8006824:	460d      	mov	r5, r1
 8006826:	88da      	ldrh	r2, [r3, #6]
 8006828:	8881      	ldrh	r1, [r0, #4]
 800682a:	4291      	cmp	r1, r2
 800682c:	d005      	beq.n	800683a <f_write+0x32>
	FRESULT res = FR_INVALID_OBJECT;
 800682e:	f04f 0909 	mov.w	r9, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 8006832:	4648      	mov	r0, r9
 8006834:	b003      	add	sp, #12
 8006836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800683a:	7858      	ldrb	r0, [r3, #1]
 800683c:	f7fc fcf2 	bl	8003224 <disk_status>
 8006840:	07c1      	lsls	r1, r0, #31
 8006842:	d4f4      	bmi.n	800682e <f_write+0x26>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006844:	f894 9031 	ldrb.w	r9, [r4, #49]	@ 0x31
 8006848:	f1b9 0f00 	cmp.w	r9, #0
 800684c:	d1f1      	bne.n	8006832 <f_write+0x2a>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800684e:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8006852:	079a      	lsls	r2, r3, #30
 8006854:	f140 811e 	bpl.w	8006a94 <f_write+0x28c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006858:	f8d4 a000 	ldr.w	sl, [r4]
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800685c:	f89a 2000 	ldrb.w	r2, [sl]
 8006860:	2a04      	cmp	r2, #4
 8006862:	d003      	beq.n	800686c <f_write+0x64>
 8006864:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006866:	42fa      	cmn	r2, r7
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006868:	bf28      	it	cs
 800686a:	43d7      	mvncs	r7, r2
	for ( ;  btw;							/* Repeat until all data written */
 800686c:	2f00      	cmp	r7, #0
 800686e:	d070      	beq.n	8006952 <f_write+0x14a>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006870:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	@ 0x38
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006874:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8006878:	2b00      	cmp	r3, #0
 800687a:	d16f      	bne.n	800695c <f_write+0x154>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800687c:	0a4b      	lsrs	r3, r1, #9
 800687e:	f8ba 600a 	ldrh.w	r6, [sl, #10]
 8006882:	0a42      	lsrs	r2, r0, #9
 8006884:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006888:	3e01      	subs	r6, #1
			if (csect == 0) {				/* On the cluster boundary? */
 800688a:	401e      	ands	r6, r3
 800688c:	d110      	bne.n	80068b0 <f_write+0xa8>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800688e:	4308      	orrs	r0, r1
 8006890:	f040 80c7 	bne.w	8006a22 <f_write+0x21a>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006894:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8006896:	2800      	cmp	r0, #0
 8006898:	f000 8107 	beq.w	8006aaa <f_write+0x2a2>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800689c:	2801      	cmp	r0, #1
 800689e:	f000 80a7 	beq.w	80069f0 <f_write+0x1e8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80068a2:	1c43      	adds	r3, r0, #1
 80068a4:	f000 80ee 	beq.w	8006a84 <f_write+0x27c>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80068a8:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 80068aa:	6420      	str	r0, [r4, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80068ac:	b903      	cbnz	r3, 80068b0 <f_write+0xa8>
 80068ae:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80068b0:	f994 3030 	ldrsb.w	r3, [r4, #48]	@ 0x30
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f2c0 80d5 	blt.w	8006a64 <f_write+0x25c>
	clst -= 2;
 80068ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80068bc:	f8da 201c 	ldr.w	r2, [sl, #28]
	clst -= 2;
 80068c0:	3b02      	subs	r3, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80068c2:	3a02      	subs	r2, #2
 80068c4:	4293      	cmp	r3, r2
 80068c6:	f080 8093 	bcs.w	80069f0 <f_write+0x1e8>
	return clst * fs->csize + fs->database;
 80068ca:	f8ba 100a 	ldrh.w	r1, [sl, #10]
 80068ce:	f8da 2030 	ldr.w	r2, [sl, #48]	@ 0x30
 80068d2:	fb01 2303 	mla	r3, r1, r3, r2
			if (!sect) ABORT(fs, FR_INT_ERR);
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f000 808a 	beq.w	80069f0 <f_write+0x1e8>
			if (cc) {						/* Write maximum contiguous sectors directly */
 80068dc:	f5b7 7f00 	cmp.w	r7, #512	@ 0x200
			sect += csect;
 80068e0:	eb06 0b03 	add.w	fp, r6, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
 80068e4:	f0c0 808c 	bcc.w	8006a00 <f_write+0x1f8>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80068e8:	eb06 2257 	add.w	r2, r6, r7, lsr #9
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80068ec:	f89a 0001 	ldrb.w	r0, [sl, #1]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80068f0:	0a7b      	lsrs	r3, r7, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80068f2:	428a      	cmp	r2, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80068f4:	465a      	mov	r2, fp
					cc = fs->csize - csect;
 80068f6:	bf88      	it	hi
 80068f8:	1b8b      	subhi	r3, r1, r6
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80068fa:	4629      	mov	r1, r5
 80068fc:	9301      	str	r3, [sp, #4]
 80068fe:	f7fc fcd1 	bl	80032a4 <disk_write>
 8006902:	2800      	cmp	r0, #0
 8006904:	f040 80be 	bne.w	8006a84 <f_write+0x27c>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006908:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800690a:	9b01      	ldr	r3, [sp, #4]
 800690c:	eba2 020b 	sub.w	r2, r2, fp
 8006910:	429a      	cmp	r2, r3
 8006912:	f0c0 80dd 	bcc.w	8006ad0 <f_write+0x2c8>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006916:	eb05 2143 	add.w	r1, r5, r3, lsl #9
 800691a:	025b      	lsls	r3, r3, #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800691c:	460d      	mov	r5, r1
 800691e:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006920:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8006922:	1859      	adds	r1, r3, r1
 8006924:	e9d4 6204 	ldrd	r6, r2, [r4, #16]
 8006928:	f140 0000 	adc.w	r0, r0, #0
 800692c:	63a1      	str	r1, [r4, #56]	@ 0x38
 800692e:	428e      	cmp	r6, r1
 8006930:	63e0      	str	r0, [r4, #60]	@ 0x3c
 8006932:	eb72 0c00 	sbcs.w	ip, r2, r0
 8006936:	d201      	bcs.n	800693c <f_write+0x134>
 8006938:	460e      	mov	r6, r1
 800693a:	4602      	mov	r2, r0
	for ( ;  btw;							/* Repeat until all data written */
 800693c:	1aff      	subs	r7, r7, r3
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800693e:	e9c4 6204 	strd	r6, r2, [r4, #16]
 8006942:	f8d8 2000 	ldr.w	r2, [r8]
 8006946:	441a      	add	r2, r3
 8006948:	f8c8 2000 	str.w	r2, [r8]
	for ( ;  btw;							/* Repeat until all data written */
 800694c:	d192      	bne.n	8006874 <f_write+0x6c>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800694e:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8006952:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006956:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
	LEAVE_FF(fs, FR_OK);
 800695a:	e76a      	b.n	8006832 <f_write+0x2a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800695c:	f104 0654 	add.w	r6, r4, #84	@ 0x54
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006960:	441e      	add	r6, r3
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006962:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8006966:	42bb      	cmp	r3, r7
 8006968:	bf28      	it	cs
 800696a:	463b      	movcs	r3, r7
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800696c:	1e5a      	subs	r2, r3, #1
 800696e:	2a05      	cmp	r2, #5
 8006970:	d903      	bls.n	800697a <f_write+0x172>
 8006972:	1c6a      	adds	r2, r5, #1
 8006974:	1ab2      	subs	r2, r6, r2
 8006976:	2a02      	cmp	r2, #2
 8006978:	d80e      	bhi.n	8006998 <f_write+0x190>
 800697a:	3e01      	subs	r6, #1
 800697c:	18e9      	adds	r1, r5, r3
			*d++ = *s++;
 800697e:	f815 2b01 	ldrb.w	r2, [r5], #1
		} while (--cnt);
 8006982:	428d      	cmp	r5, r1
			*d++ = *s++;
 8006984:	f806 2f01 	strb.w	r2, [r6, #1]!
		} while (--cnt);
 8006988:	d1f9      	bne.n	800697e <f_write+0x176>
		fp->flag |= FA_DIRTY;
 800698a:	f894 2030 	ldrb.w	r2, [r4, #48]	@ 0x30
 800698e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006992:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 8006996:	e7c1      	b.n	800691c <f_write+0x114>
 8006998:	f023 0c03 	bic.w	ip, r3, #3
 800699c:	4632      	mov	r2, r6
 800699e:	4629      	mov	r1, r5
 80069a0:	44b4      	add	ip, r6
			*d++ = *s++;
 80069a2:	f851 0b04 	ldr.w	r0, [r1], #4
 80069a6:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 80069aa:	4594      	cmp	ip, r2
 80069ac:	d1f9      	bne.n	80069a2 <f_write+0x19a>
 80069ae:	f023 0203 	bic.w	r2, r3, #3
 80069b2:	f013 0f03 	tst.w	r3, #3
 80069b6:	f003 0103 	and.w	r1, r3, #3
 80069ba:	eb06 0e02 	add.w	lr, r6, r2
 80069be:	eb05 0002 	add.w	r0, r5, r2
 80069c2:	d00d      	beq.n	80069e0 <f_write+0x1d8>
			*d++ = *s++;
 80069c4:	f815 c002 	ldrb.w	ip, [r5, r2]
		} while (--cnt);
 80069c8:	2901      	cmp	r1, #1
			*d++ = *s++;
 80069ca:	f806 c002 	strb.w	ip, [r6, r2]
		} while (--cnt);
 80069ce:	d007      	beq.n	80069e0 <f_write+0x1d8>
			*d++ = *s++;
 80069d0:	7842      	ldrb	r2, [r0, #1]
		} while (--cnt);
 80069d2:	2902      	cmp	r1, #2
			*d++ = *s++;
 80069d4:	f88e 2001 	strb.w	r2, [lr, #1]
 80069d8:	bf1c      	itt	ne
 80069da:	7882      	ldrbne	r2, [r0, #2]
 80069dc:	f88e 2002 	strbne.w	r2, [lr, #2]
		fp->flag |= FA_DIRTY;
 80069e0:	f894 2030 	ldrb.w	r2, [r4, #48]	@ 0x30
 80069e4:	18e9      	adds	r1, r5, r3
 80069e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069ea:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 80069ee:	e795      	b.n	800691c <f_write+0x114>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80069f0:	2302      	movs	r3, #2
 80069f2:	4699      	mov	r9, r3
 80069f4:	f884 3031 	strb.w	r3, [r4, #49]	@ 0x31
}
 80069f8:	4648      	mov	r0, r9
 80069fa:	b003      	add	sp, #12
 80069fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006a00:	6c63      	ldr	r3, [r4, #68]	@ 0x44
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006a02:	f104 0654 	add.w	r6, r4, #84	@ 0x54
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006a06:	455b      	cmp	r3, fp
				fp->fptr < fp->obj.objsize &&
 8006a08:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	@ 0x38
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006a0c:	d004      	beq.n	8006a18 <f_write+0x210>
 8006a0e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8006a12:	4291      	cmp	r1, r2
 8006a14:	4198      	sbcs	r0, r3
 8006a16:	d350      	bcc.n	8006aba <f_write+0x2b2>
			fp->sect = sect;
 8006a18:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8006a1c:	f8c4 b044 	str.w	fp, [r4, #68]	@ 0x44
 8006a20:	e79e      	b.n	8006960 <f_write+0x158>
					if (fp->cltbl) {
 8006a22:	f8d4 b050 	ldr.w	fp, [r4, #80]	@ 0x50
 8006a26:	f1bb 0f00 	cmp.w	fp, #0
 8006a2a:	d036      	beq.n	8006a9a <f_write+0x292>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	6823      	ldr	r3, [r4, #0]
 8006a30:	4611      	mov	r1, r2
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006a32:	f10b 0b04 	add.w	fp, fp, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006a36:	895a      	ldrh	r2, [r3, #10]
 8006a38:	4633      	mov	r3, r6
 8006a3a:	f7fa f945 	bl	8000cc8 <__aeabi_uldivmod>
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006a3e:	f8db 3000 	ldr.w	r3, [fp]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006a42:	b933      	cbnz	r3, 8006a52 <f_write+0x24a>
 8006a44:	e783      	b.n	800694e <f_write+0x146>
		cl -= ncl; tbl++;		/* Next fragment */
 8006a46:	1ac0      	subs	r0, r0, r3
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006a48:	f85b 3f08 	ldr.w	r3, [fp, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f43f af7e 	beq.w	800694e <f_write+0x146>
		if (cl < ncl) break;	/* In this fragment? */
 8006a52:	4298      	cmp	r0, r3
 8006a54:	d2f7      	bcs.n	8006a46 <f_write+0x23e>
	return cl + *tbl;	/* Return the cluster number */
 8006a56:	f8db 3004 	ldr.w	r3, [fp, #4]
 8006a5a:	4418      	add	r0, r3
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006a5c:	2800      	cmp	r0, #0
 8006a5e:	f47f af1d 	bne.w	800689c <f_write+0x94>
 8006a62:	e774      	b.n	800694e <f_write+0x146>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006a64:	2301      	movs	r3, #1
 8006a66:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8006a68:	f104 0154 	add.w	r1, r4, #84	@ 0x54
 8006a6c:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8006a70:	f7fc fc18 	bl	80032a4 <disk_write>
 8006a74:	b930      	cbnz	r0, 8006a84 <f_write+0x27c>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006a76:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8006a7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a7e:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8006a82:	e71a      	b.n	80068ba <f_write+0xb2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006a84:	2301      	movs	r3, #1
 8006a86:	4699      	mov	r9, r3
 8006a88:	f884 3031 	strb.w	r3, [r4, #49]	@ 0x31
}
 8006a8c:	4648      	mov	r0, r9
 8006a8e:	b003      	add	sp, #12
 8006a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006a94:	f04f 0907 	mov.w	r9, #7
 8006a98:	e6cb      	b.n	8006832 <f_write+0x2a>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006a9a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	f7fe f9b1 	bl	8004e04 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	f47f aefa 	bne.w	800689c <f_write+0x94>
 8006aa8:	e751      	b.n	800694e <f_write+0x146>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006aaa:	4601      	mov	r1, r0
 8006aac:	4620      	mov	r0, r4
 8006aae:	f7fe f9a9 	bl	8004e04 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	f47f aef2 	bne.w	800689c <f_write+0x94>
 8006ab8:	e749      	b.n	800694e <f_write+0x146>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006aba:	2301      	movs	r3, #1
 8006abc:	465a      	mov	r2, fp
 8006abe:	4631      	mov	r1, r6
 8006ac0:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8006ac4:	f7fc fbd2 	bl	800326c <disk_read>
				fp->fptr < fp->obj.objsize &&
 8006ac8:	2800      	cmp	r0, #0
 8006aca:	d1db      	bne.n	8006a84 <f_write+0x27c>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006acc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006ace:	e7a3      	b.n	8006a18 <f_write+0x210>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006ad0:	eb05 2042 	add.w	r0, r5, r2, lsl #9
 8006ad4:	f104 0254 	add.w	r2, r4, #84	@ 0x54
 8006ad8:	4601      	mov	r1, r0
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006ada:	3001      	adds	r0, #1
 8006adc:	1a10      	subs	r0, r2, r0
 8006ade:	2802      	cmp	r0, #2
 8006ae0:	d90e      	bls.n	8006b00 <f_write+0x2f8>
 8006ae2:	f504 7615 	add.w	r6, r4, #596	@ 0x254
			*d++ = *s++;
 8006ae6:	f851 0b04 	ldr.w	r0, [r1], #4
 8006aea:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 8006aee:	42b2      	cmp	r2, r6
 8006af0:	d1f9      	bne.n	8006ae6 <f_write+0x2de>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006af2:	f894 2030 	ldrb.w	r2, [r4, #48]	@ 0x30
 8006af6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006afa:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 8006afe:	e70a      	b.n	8006916 <f_write+0x10e>
 8006b00:	f104 0253 	add.w	r2, r4, #83	@ 0x53
 8006b04:	f501 7600 	add.w	r6, r1, #512	@ 0x200
			*d++ = *s++;
 8006b08:	f811 0b01 	ldrb.w	r0, [r1], #1
		} while (--cnt);
 8006b0c:	428e      	cmp	r6, r1
			*d++ = *s++;
 8006b0e:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
 8006b12:	d1f9      	bne.n	8006b08 <f_write+0x300>
 8006b14:	e7ed      	b.n	8006af2 <f_write+0x2ea>
 8006b16:	bf00      	nop

08006b18 <f_sync>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006b18:	2800      	cmp	r0, #0
 8006b1a:	d04c      	beq.n	8006bb6 <f_sync+0x9e>
 8006b1c:	6803      	ldr	r3, [r0, #0]
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006b1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b22:	4604      	mov	r4, r0
 8006b24:	b095      	sub	sp, #84	@ 0x54
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006b26:	b12b      	cbz	r3, 8006b34 <f_sync+0x1c>
 8006b28:	781a      	ldrb	r2, [r3, #0]
 8006b2a:	b11a      	cbz	r2, 8006b34 <f_sync+0x1c>
 8006b2c:	8881      	ldrh	r1, [r0, #4]
 8006b2e:	88da      	ldrh	r2, [r3, #6]
 8006b30:	4291      	cmp	r1, r2
 8006b32:	d004      	beq.n	8006b3e <f_sync+0x26>
	FRESULT res = FR_INVALID_OBJECT;
 8006b34:	2309      	movs	r3, #9
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	b015      	add	sp, #84	@ 0x54
 8006b3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006b3e:	7858      	ldrb	r0, [r3, #1]
 8006b40:	f7fc fb70 	bl	8003224 <disk_status>
 8006b44:	07c2      	lsls	r2, r0, #31
 8006b46:	d4f5      	bmi.n	8006b34 <f_sync+0x1c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006b48:	f894 2030 	ldrb.w	r2, [r4, #48]	@ 0x30
 8006b4c:	f012 0340 	ands.w	r3, r2, #64	@ 0x40
 8006b50:	d0f1      	beq.n	8006b36 <f_sync+0x1e>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006b52:	0613      	lsls	r3, r2, #24
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006b54:	6825      	ldr	r5, [r4, #0]
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006b56:	d431      	bmi.n	8006bbc <f_sync+0xa4>
			tm = GET_FATTIME();				/* Modified time */
 8006b58:	f7fc fb62 	bl	8003220 <get_fattime>
			if (fs->fs_type == FS_EXFAT) {
 8006b5c:	782b      	ldrb	r3, [r5, #0]
			tm = GET_FATTIME();				/* Modified time */
 8006b5e:	4606      	mov	r6, r0
			if (fs->fs_type == FS_EXFAT) {
 8006b60:	2b04      	cmp	r3, #4
 8006b62:	d03c      	beq.n	8006bde <f_sync+0xc6>
				res = move_window(fs, fp->dir_sect);
 8006b64:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006b66:	4628      	mov	r0, r5
 8006b68:	f7fc fc16 	bl	8003398 <move_window>
				if (res == FR_OK) {
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	d1e1      	bne.n	8006b36 <f_sync+0x1e>
					dir = fp->dir_ptr;
 8006b72:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006b74:	7ada      	ldrb	r2, [r3, #11]
 8006b76:	f042 0220 	orr.w	r2, r2, #32
 8006b7a:	72da      	strb	r2, [r3, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006b7c:	68a2      	ldr	r2, [r4, #8]
 8006b7e:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006b80:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8006b84:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
 8006b86:	76d8      	strb	r0, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 8006b88:	7809      	ldrb	r1, [r1, #0]
 8006b8a:	2903      	cmp	r1, #3
 8006b8c:	f000 80c3 	beq.w	8006d16 <f_sync+0x1fe>
	*ptr++ = (BYTE)val; val >>= 8;
 8006b90:	6921      	ldr	r1, [r4, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8006b92:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
 8006b94:	f8c3 6016 	str.w	r6, [r3, #22]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006b98:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8006b9a:	61d9      	str	r1, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8006b9c:	825a      	strh	r2, [r3, #18]
					fs->wflag = 1;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006ba2:	f7fc fb9b 	bl	80032dc <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006ba6:	f894 2030 	ldrb.w	r2, [r4, #48]	@ 0x30
					res = sync_fs(fs);					/* Restore it to the directory */
 8006baa:	4603      	mov	r3, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006bac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bb0:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 8006bb4:	e7bf      	b.n	8006b36 <f_sync+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
 8006bb6:	2309      	movs	r3, #9
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	4770      	bx	lr
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8006bc0:	f104 0154 	add.w	r1, r4, #84	@ 0x54
 8006bc4:	7868      	ldrb	r0, [r5, #1]
 8006bc6:	f7fc fb6d 	bl	80032a4 <disk_write>
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	f040 80aa 	bne.w	8006d24 <f_sync+0x20c>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006bd0:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8006bd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bd8:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8006bdc:	e7bc      	b.n	8006b58 <f_sync+0x40>
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8006bde:	79e3      	ldrb	r3, [r4, #7]
			res = put_fat(obj->fs, cl, cl + 1);
 8006be0:	6820      	ldr	r0, [r4, #0]
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8006be2:	2b03      	cmp	r3, #3
 8006be4:	d07b      	beq.n	8006cde <f_sync+0x1c6>
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8006be6:	69e3      	ldr	r3, [r4, #28]
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8006be8:	6c27      	ldr	r7, [r4, #64]	@ 0x40
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8006bea:	b1eb      	cbz	r3, 8006c28 <f_sync+0x110>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8006bec:	1afa      	subs	r2, r7, r3
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	f102 0c01 	add.w	ip, r2, #1
 8006bf4:	f102 0202 	add.w	r2, r2, #2
 8006bf8:	bf08      	it	eq
 8006bfa:	f04f 32ff 	moveq.w	r2, #4294967295
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006bfe:	f1bc 0f01 	cmp.w	ip, #1
 8006c02:	4661      	mov	r1, ip
 8006c04:	f240 808c 	bls.w	8006d20 <f_sync+0x208>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8006c08:	6820      	ldr	r0, [r4, #0]
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006c0a:	69c3      	ldr	r3, [r0, #28]
 8006c0c:	459c      	cmp	ip, r3
 8006c0e:	f080 8087 	bcs.w	8006d20 <f_sync+0x208>
 8006c12:	f7fc fbff 	bl	8003414 <put_fat.part.0>
		if (res != FR_OK) return res;
 8006c16:	4603      	mov	r3, r0
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	d18c      	bne.n	8006b36 <f_sync+0x1e>
		obj->n_frag--;
 8006c1c:	69e3      	ldr	r3, [r4, #28]
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	61e3      	str	r3, [r4, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1e2      	bne.n	8006bec <f_sync+0xd4>
 8006c26:	6820      	ldr	r0, [r4, #0]
	dp->blk_ofs = obj->c_ofs;
 8006c28:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
	dp->obj.fs = obj->fs;
 8006c2a:	9000      	str	r0, [sp, #0]
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8006c2c:	4668      	mov	r0, sp
	dp->blk_ofs = obj->c_ofs;
 8006c2e:	9113      	str	r1, [sp, #76]	@ 0x4c
	dp->obj.sclust = obj->c_scl;
 8006c30:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
	dp->obj.stat = (BYTE)obj->c_size;
 8006c34:	f88d 3007 	strb.w	r3, [sp, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8006c38:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
	dp->obj.sclust = obj->c_scl;
 8006c3c:	9202      	str	r2, [sp, #8]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8006c3e:	9304      	str	r3, [sp, #16]
 8006c40:	2300      	movs	r3, #0
 8006c42:	9305      	str	r3, [sp, #20]
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8006c44:	f7fd fb62 	bl	800430c <dir_sdi>
	if (res == FR_OK) {
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	f47f af73 	bne.w	8006b36 <f_sync+0x1e>
		res = load_xdir(dp);		/* Load the object's entry block */
 8006c50:	4668      	mov	r0, sp
 8006c52:	f7fd f81f 	bl	8003c94 <load_xdir>
					if (res == FR_OK) {
 8006c56:	4603      	mov	r3, r0
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	f47f af6c 	bne.w	8006b36 <f_sync+0x1e>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8006c5e:	692f      	ldr	r7, [r5, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c60:	469c      	mov	ip, r3
 8006c62:	4619      	mov	r1, r3
						res = store_xdir(&dj);	/* Restore it to the directory */
 8006c64:	4668      	mov	r0, sp
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8006c66:	793a      	ldrb	r2, [r7, #4]
 8006c68:	f042 0220 	orr.w	r2, r2, #32
 8006c6c:	713a      	strb	r2, [r7, #4]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 8006c6e:	79e7      	ldrb	r7, [r4, #7]
 8006c70:	692a      	ldr	r2, [r5, #16]
 8006c72:	f047 0701 	orr.w	r7, r7, #1
 8006c76:	f882 7021 	strb.w	r7, [r2, #33]	@ 0x21
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 8006c7a:	692a      	ldr	r2, [r5, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c7c:	68a7      	ldr	r7, [r4, #8]
 8006c7e:	6357      	str	r7, [r2, #52]	@ 0x34
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8006c80:	6962      	ldr	r2, [r4, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c82:	0a17      	lsrs	r7, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8006c84:	f362 0c07 	bfi	ip, r2, #0, #8
 8006c88:	f367 2c0f 	bfi	ip, r7, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8006c8c:	0c17      	lsrs	r7, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8006c8e:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8006c90:	f367 4c17 	bfi	ip, r7, #16, #8
 8006c94:	6927      	ldr	r7, [r4, #16]
 8006c96:	f362 6c1f 	bfi	ip, r2, #24, #8
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8006c9a:	692a      	ldr	r2, [r5, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c9c:	6397      	str	r7, [r2, #56]	@ 0x38
 8006c9e:	f8c2 c03c 	str.w	ip, [r2, #60]	@ 0x3c
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 8006ca2:	6962      	ldr	r2, [r4, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 8006ca4:	0a17      	lsrs	r7, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8006ca6:	f362 0107 	bfi	r1, r2, #0, #8
 8006caa:	f367 210f 	bfi	r1, r7, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8006cae:	0c17      	lsrs	r7, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8006cb0:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8006cb2:	f367 4117 	bfi	r1, r7, #16, #8
 8006cb6:	6927      	ldr	r7, [r4, #16]
 8006cb8:	f362 611f 	bfi	r1, r2, #24, #8
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 8006cbc:	692a      	ldr	r2, [r5, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8006cbe:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006cc0:	6297      	str	r7, [r2, #40]	@ 0x28
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8006cc2:	692a      	ldr	r2, [r5, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8006cc4:	60d6      	str	r6, [r2, #12]
						fs->dirbuf[XDIR_ModTime10] = 0;
 8006cc6:	692a      	ldr	r2, [r5, #16]
 8006cc8:	7553      	strb	r3, [r2, #21]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8006cca:	692a      	ldr	r2, [r5, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8006ccc:	6113      	str	r3, [r2, #16]
						res = store_xdir(&dj);	/* Restore it to the directory */
 8006cce:	f7fd fc07 	bl	80044e0 <store_xdir>
						if (res == FR_OK) {
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2800      	cmp	r0, #0
 8006cd6:	f47f af2e 	bne.w	8006b36 <f_sync+0x1e>
							res = sync_fs(fs);
 8006cda:	4628      	mov	r0, r5
 8006cdc:	e761      	b.n	8006ba2 <f_sync+0x8a>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8006cde:	69a3      	ldr	r3, [r4, #24]
 8006ce0:	68a7      	ldr	r7, [r4, #8]
 8006ce2:	b1ab      	cbz	r3, 8006d10 <f_sync+0x1f8>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006ce4:	2f01      	cmp	r7, #1
 8006ce6:	d91b      	bls.n	8006d20 <f_sync+0x208>
 8006ce8:	443b      	add	r3, r7
 8006cea:	f103 38ff 	add.w	r8, r3, #4294967295
 8006cee:	69c3      	ldr	r3, [r0, #28]
 8006cf0:	f107 0901 	add.w	r9, r7, #1
 8006cf4:	4639      	mov	r1, r7
 8006cf6:	42bb      	cmp	r3, r7
 8006cf8:	464a      	mov	r2, r9
 8006cfa:	d911      	bls.n	8006d20 <f_sync+0x208>
 8006cfc:	f7fc fb8a 	bl	8003414 <put_fat.part.0>
			if (res != FR_OK) return res;
 8006d00:	4603      	mov	r3, r0
 8006d02:	2800      	cmp	r0, #0
 8006d04:	f47f af17 	bne.w	8006b36 <f_sync+0x1e>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8006d08:	4547      	cmp	r7, r8
			res = put_fat(obj->fs, cl, cl + 1);
 8006d0a:	6820      	ldr	r0, [r4, #0]
 8006d0c:	464f      	mov	r7, r9
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8006d0e:	d1ee      	bne.n	8006cee <f_sync+0x1d6>
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8006d10:	2300      	movs	r3, #0
 8006d12:	71e3      	strb	r3, [r4, #7]
				if (res == FR_OK) {
 8006d14:	e767      	b.n	8006be6 <f_sync+0xce>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006d16:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8006d18:	751a      	strb	r2, [r3, #20]
 8006d1a:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 8006d1c:	755a      	strb	r2, [r3, #21]
}
 8006d1e:	e737      	b.n	8006b90 <f_sync+0x78>
	FRESULT res = FR_INT_ERR;
 8006d20:	2302      	movs	r3, #2
				if (res == FR_OK) {
 8006d22:	e708      	b.n	8006b36 <f_sync+0x1e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006d24:	2301      	movs	r3, #1
 8006d26:	e706      	b.n	8006b36 <f_sync+0x1e>

08006d28 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006d28:	b510      	push	{r4, lr}
 8006d2a:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006d2c:	f7ff fef4 	bl	8006b18 <f_sync>
	if (res == FR_OK)
 8006d30:	b100      	cbz	r0, 8006d34 <f_close+0xc>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8006d32:	bd10      	pop	{r4, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006d34:	b13c      	cbz	r4, 8006d46 <f_close+0x1e>
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	b12b      	cbz	r3, 8006d46 <f_close+0x1e>
 8006d3a:	781a      	ldrb	r2, [r3, #0]
 8006d3c:	b11a      	cbz	r2, 8006d46 <f_close+0x1e>
 8006d3e:	88a1      	ldrh	r1, [r4, #4]
 8006d40:	88da      	ldrh	r2, [r3, #6]
 8006d42:	4291      	cmp	r1, r2
 8006d44:	d001      	beq.n	8006d4a <f_close+0x22>
	FRESULT res = FR_INVALID_OBJECT;
 8006d46:	2009      	movs	r0, #9
}
 8006d48:	bd10      	pop	{r4, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006d4a:	7858      	ldrb	r0, [r3, #1]
 8006d4c:	f7fc fa6a 	bl	8003224 <disk_status>
 8006d50:	f010 0001 	ands.w	r0, r0, #1
 8006d54:	d1f7      	bne.n	8006d46 <f_close+0x1e>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006d56:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d110      	bne.n	8006d7e <f_close+0x56>
		n = Files[i].ctr;
 8006d5c:	4a09      	ldr	r2, [pc, #36]	@ (8006d84 <f_close+0x5c>)
 8006d5e:	8993      	ldrh	r3, [r2, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006d60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d64:	d007      	beq.n	8006d76 <f_close+0x4e>
		if (n > 0) n--;				/* Decrement read mode open count */
 8006d66:	b13b      	cbz	r3, 8006d78 <f_close+0x50>
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 8006d6c:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006d6e:	b11b      	cbz	r3, 8006d78 <f_close+0x50>
				fp->obj.fs = 0;			/* Invalidate file object */
 8006d70:	2300      	movs	r3, #0
 8006d72:	6023      	str	r3, [r4, #0]
}
 8006d74:	bd10      	pop	{r4, pc}
		Files[i].ctr = n;
 8006d76:	8190      	strh	r0, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006d78:	2300      	movs	r3, #0
 8006d7a:	6013      	str	r3, [r2, #0]
 8006d7c:	e7f8      	b.n	8006d70 <f_close+0x48>
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006d7e:	2002      	movs	r0, #2
}
 8006d80:	bd10      	pop	{r4, pc}
 8006d82:	bf00      	nop
 8006d84:	20006f84 	.word	0x20006f84

08006d88 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8006d88:	4b10      	ldr	r3, [pc, #64]	@ (8006dcc <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006d8a:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 8006d8c:	7a5c      	ldrb	r4, [r3, #9]
 8006d8e:	b9cc      	cbnz	r4, 8006dc4 <FATFS_LinkDriver+0x3c>
 8006d90:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 8006d92:	f004 00ff 	and.w	r0, r4, #255	@ 0xff
 8006d96:	7a5c      	ldrb	r4, [r3, #9]
 8006d98:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 8006d9a:	7a5c      	ldrb	r4, [r3, #9]
 8006d9c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006da0:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 8006da2:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 8006da4:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 8006da6:	441c      	add	r4, r3
 8006da8:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 8006daa:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
 8006dac:	3230      	adds	r2, #48	@ 0x30
    DiskNum = disk.nbr++;
 8006dae:	b2e4      	uxtb	r4, r4
 8006db0:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 8006db2:	243a      	movs	r4, #58	@ 0x3a
    path[2] = '/';
 8006db4:	232f      	movs	r3, #47	@ 0x2f
    path[0] = DiskNum + '0';
 8006db6:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8006db8:	704c      	strb	r4, [r1, #1]
    path[3] = 0;
 8006dba:	70c8      	strb	r0, [r1, #3]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8006dbc:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 8006dc0:	708b      	strb	r3, [r1, #2]
}
 8006dc2:	4770      	bx	lr
  uint8_t ret = 1;
 8006dc4:	2001      	movs	r0, #1
}
 8006dc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006dca:	4770      	bx	lr
 8006dcc:	20006f9c 	.word	0x20006f9c

08006dd0 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8006dd0:	287f      	cmp	r0, #127	@ 0x7f
 8006dd2:	d90f      	bls.n	8006df4 <ff_convert+0x24>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8006dd4:	b959      	cbnz	r1, 8006dee <ff_convert+0x1e>
 8006dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8006e00 <ff_convert+0x30>)
 8006dd8:	e002      	b.n	8006de0 <ff_convert+0x10>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8006dda:	3101      	adds	r1, #1
 8006ddc:	2980      	cmp	r1, #128	@ 0x80
 8006dde:	d008      	beq.n	8006df2 <ff_convert+0x22>
				if (chr == Tbl[c]) break;
 8006de0:	f833 2b02 	ldrh.w	r2, [r3], #2
 8006de4:	4282      	cmp	r2, r0
 8006de6:	d1f8      	bne.n	8006dda <ff_convert+0xa>
			}
			c = (c + 0x80) & 0xFF;
 8006de8:	3180      	adds	r1, #128	@ 0x80
 8006dea:	b288      	uxth	r0, r1
 8006dec:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8006dee:	28ff      	cmp	r0, #255	@ 0xff
 8006df0:	d901      	bls.n	8006df6 <ff_convert+0x26>
 8006df2:	2000      	movs	r0, #0
		}
	}

	return c;
}
 8006df4:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8006df6:	4b02      	ldr	r3, [pc, #8]	@ (8006e00 <ff_convert+0x30>)
 8006df8:	3880      	subs	r0, #128	@ 0x80
 8006dfa:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8006dfe:	4770      	bx	lr
 8006e00:	0800bab0 	.word	0x0800bab0

08006e04 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8006e04:	4b23      	ldr	r3, [pc, #140]	@ (8006e94 <ff_wtoupper+0x90>)
 8006e06:	4a24      	ldr	r2, [pc, #144]	@ (8006e98 <ff_wtoupper+0x94>)
 8006e08:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8006e0c:	bf28      	it	cs
 8006e0e:	4613      	movcs	r3, r2
{
 8006e10:	b510      	push	{r4, lr}
 8006e12:	3304      	adds	r3, #4
 8006e14:	e00a      	b.n	8006e2c <ff_wtoupper+0x28>
	for (;;) {
		bc = *p++;								/* Get block base */
		if (!bc || chr < bc) break;
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8006e16:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 8006e1a:	fa5f fc82 	uxtb.w	ip, r2
 8006e1e:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
 8006e20:	eb0c 0e01 	add.w	lr, ip, r1
 8006e24:	4570      	cmp	r0, lr
 8006e26:	db09      	blt.n	8006e3c <ff_wtoupper+0x38>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 8006e28:	3304      	adds	r3, #4
 8006e2a:	b182      	cbz	r2, 8006e4e <ff_wtoupper+0x4a>
		bc = *p++;								/* Get block base */
 8006e2c:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
 8006e30:	461c      	mov	r4, r3
 8006e32:	1e4a      	subs	r2, r1, #1
 8006e34:	b292      	uxth	r2, r2
 8006e36:	4290      	cmp	r0, r2
 8006e38:	d8ed      	bhi.n	8006e16 <ff_wtoupper+0x12>
	}

	return chr;
}
 8006e3a:	bd10      	pop	{r4, pc}
			switch (cmd) {
 8006e3c:	2a08      	cmp	r2, #8
 8006e3e:	d8fc      	bhi.n	8006e3a <ff_wtoupper+0x36>
 8006e40:	e8df f002 	tbb	[pc, r2]
 8006e44:	1916100c 	.word	0x1916100c
 8006e48:	25221f1c 	.word	0x25221f1c
 8006e4c:	08          	.byte	0x08
 8006e4d:	00          	.byte	0x00
		if (!cmd) p += nc;
 8006e4e:	eb04 034c 	add.w	r3, r4, ip, lsl #1
 8006e52:	e7de      	b.n	8006e12 <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8006e54:	f5a0 50e3 	sub.w	r0, r0, #7264	@ 0x1c60
 8006e58:	b280      	uxth	r0, r0
}
 8006e5a:	bd10      	pop	{r4, pc}
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8006e5c:	1a41      	subs	r1, r0, r1
 8006e5e:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
}
 8006e62:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8006e64:	1a43      	subs	r3, r0, r1
 8006e66:	f003 0301 	and.w	r3, r3, #1
 8006e6a:	1ac3      	subs	r3, r0, r3
 8006e6c:	b298      	uxth	r0, r3
}
 8006e6e:	bd10      	pop	{r4, pc}
			case 2: chr -= 16; break;				/* Shift -16 */
 8006e70:	3810      	subs	r0, #16
 8006e72:	b280      	uxth	r0, r0
}
 8006e74:	bd10      	pop	{r4, pc}
			case 3:	chr -= 32; break;				/* Shift -32 */
 8006e76:	3820      	subs	r0, #32
 8006e78:	b280      	uxth	r0, r0
}
 8006e7a:	bd10      	pop	{r4, pc}
			case 4:	chr -= 48; break;				/* Shift -48 */
 8006e7c:	3830      	subs	r0, #48	@ 0x30
 8006e7e:	b280      	uxth	r0, r0
}
 8006e80:	bd10      	pop	{r4, pc}
			case 5:	chr -= 26; break;				/* Shift -26 */
 8006e82:	381a      	subs	r0, #26
 8006e84:	b280      	uxth	r0, r0
}
 8006e86:	bd10      	pop	{r4, pc}
			case 6:	chr += 8; break;				/* Shift +8 */
 8006e88:	3008      	adds	r0, #8
 8006e8a:	b280      	uxth	r0, r0
}
 8006e8c:	bd10      	pop	{r4, pc}
			case 7: chr -= 80; break;				/* Shift -80 */
 8006e8e:	3850      	subs	r0, #80	@ 0x50
 8006e90:	b280      	uxth	r0, r0
}
 8006e92:	bd10      	pop	{r4, pc}
 8006e94:	0800b8bc 	.word	0x0800b8bc
 8006e98:	0800b800 	.word	0x0800b800

08006e9c <sulp>:
 8006e9c:	b570      	push	{r4, r5, r6, lr}
 8006e9e:	4604      	mov	r4, r0
 8006ea0:	460d      	mov	r5, r1
 8006ea2:	ec45 4b10 	vmov	d0, r4, r5
 8006ea6:	4616      	mov	r6, r2
 8006ea8:	f003 fd2a 	bl	800a900 <__ulp>
 8006eac:	ec51 0b10 	vmov	r0, r1, d0
 8006eb0:	b17e      	cbz	r6, 8006ed2 <sulp+0x36>
 8006eb2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006eb6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	dd09      	ble.n	8006ed2 <sulp+0x36>
 8006ebe:	051b      	lsls	r3, r3, #20
 8006ec0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006ec4:	2400      	movs	r4, #0
 8006ec6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006eca:	4622      	mov	r2, r4
 8006ecc:	462b      	mov	r3, r5
 8006ece:	f7f9 fbb3 	bl	8000638 <__aeabi_dmul>
 8006ed2:	ec41 0b10 	vmov	d0, r0, r1
 8006ed6:	bd70      	pop	{r4, r5, r6, pc}

08006ed8 <_strtod_l>:
 8006ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006edc:	b09f      	sub	sp, #124	@ 0x7c
 8006ede:	460c      	mov	r4, r1
 8006ee0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	921a      	str	r2, [sp, #104]	@ 0x68
 8006ee6:	9005      	str	r0, [sp, #20]
 8006ee8:	f04f 0a00 	mov.w	sl, #0
 8006eec:	f04f 0b00 	mov.w	fp, #0
 8006ef0:	460a      	mov	r2, r1
 8006ef2:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ef4:	7811      	ldrb	r1, [r2, #0]
 8006ef6:	292b      	cmp	r1, #43	@ 0x2b
 8006ef8:	d04a      	beq.n	8006f90 <_strtod_l+0xb8>
 8006efa:	d838      	bhi.n	8006f6e <_strtod_l+0x96>
 8006efc:	290d      	cmp	r1, #13
 8006efe:	d832      	bhi.n	8006f66 <_strtod_l+0x8e>
 8006f00:	2908      	cmp	r1, #8
 8006f02:	d832      	bhi.n	8006f6a <_strtod_l+0x92>
 8006f04:	2900      	cmp	r1, #0
 8006f06:	d03b      	beq.n	8006f80 <_strtod_l+0xa8>
 8006f08:	2200      	movs	r2, #0
 8006f0a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006f0c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006f0e:	782a      	ldrb	r2, [r5, #0]
 8006f10:	2a30      	cmp	r2, #48	@ 0x30
 8006f12:	f040 80b3 	bne.w	800707c <_strtod_l+0x1a4>
 8006f16:	786a      	ldrb	r2, [r5, #1]
 8006f18:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006f1c:	2a58      	cmp	r2, #88	@ 0x58
 8006f1e:	d16e      	bne.n	8006ffe <_strtod_l+0x126>
 8006f20:	9302      	str	r3, [sp, #8]
 8006f22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f24:	9301      	str	r3, [sp, #4]
 8006f26:	ab1a      	add	r3, sp, #104	@ 0x68
 8006f28:	9300      	str	r3, [sp, #0]
 8006f2a:	4a8e      	ldr	r2, [pc, #568]	@ (8007164 <_strtod_l+0x28c>)
 8006f2c:	9805      	ldr	r0, [sp, #20]
 8006f2e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006f30:	a919      	add	r1, sp, #100	@ 0x64
 8006f32:	f002 fdd7 	bl	8009ae4 <__gethex>
 8006f36:	f010 060f 	ands.w	r6, r0, #15
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	d005      	beq.n	8006f4a <_strtod_l+0x72>
 8006f3e:	2e06      	cmp	r6, #6
 8006f40:	d128      	bne.n	8006f94 <_strtod_l+0xbc>
 8006f42:	3501      	adds	r5, #1
 8006f44:	2300      	movs	r3, #0
 8006f46:	9519      	str	r5, [sp, #100]	@ 0x64
 8006f48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f040 858e 	bne.w	8007a6e <_strtod_l+0xb96>
 8006f52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f54:	b1cb      	cbz	r3, 8006f8a <_strtod_l+0xb2>
 8006f56:	4652      	mov	r2, sl
 8006f58:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006f5c:	ec43 2b10 	vmov	d0, r2, r3
 8006f60:	b01f      	add	sp, #124	@ 0x7c
 8006f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f66:	2920      	cmp	r1, #32
 8006f68:	d1ce      	bne.n	8006f08 <_strtod_l+0x30>
 8006f6a:	3201      	adds	r2, #1
 8006f6c:	e7c1      	b.n	8006ef2 <_strtod_l+0x1a>
 8006f6e:	292d      	cmp	r1, #45	@ 0x2d
 8006f70:	d1ca      	bne.n	8006f08 <_strtod_l+0x30>
 8006f72:	2101      	movs	r1, #1
 8006f74:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006f76:	1c51      	adds	r1, r2, #1
 8006f78:	9119      	str	r1, [sp, #100]	@ 0x64
 8006f7a:	7852      	ldrb	r2, [r2, #1]
 8006f7c:	2a00      	cmp	r2, #0
 8006f7e:	d1c5      	bne.n	8006f0c <_strtod_l+0x34>
 8006f80:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006f82:	9419      	str	r4, [sp, #100]	@ 0x64
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f040 8570 	bne.w	8007a6a <_strtod_l+0xb92>
 8006f8a:	4652      	mov	r2, sl
 8006f8c:	465b      	mov	r3, fp
 8006f8e:	e7e5      	b.n	8006f5c <_strtod_l+0x84>
 8006f90:	2100      	movs	r1, #0
 8006f92:	e7ef      	b.n	8006f74 <_strtod_l+0x9c>
 8006f94:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006f96:	b13a      	cbz	r2, 8006fa8 <_strtod_l+0xd0>
 8006f98:	2135      	movs	r1, #53	@ 0x35
 8006f9a:	a81c      	add	r0, sp, #112	@ 0x70
 8006f9c:	f003 fdaa 	bl	800aaf4 <__copybits>
 8006fa0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006fa2:	9805      	ldr	r0, [sp, #20]
 8006fa4:	f003 f978 	bl	800a298 <_Bfree>
 8006fa8:	3e01      	subs	r6, #1
 8006faa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006fac:	2e04      	cmp	r6, #4
 8006fae:	d806      	bhi.n	8006fbe <_strtod_l+0xe6>
 8006fb0:	e8df f006 	tbb	[pc, r6]
 8006fb4:	201d0314 	.word	0x201d0314
 8006fb8:	14          	.byte	0x14
 8006fb9:	00          	.byte	0x00
 8006fba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006fbe:	05e1      	lsls	r1, r4, #23
 8006fc0:	bf48      	it	mi
 8006fc2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006fc6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006fca:	0d1b      	lsrs	r3, r3, #20
 8006fcc:	051b      	lsls	r3, r3, #20
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1bb      	bne.n	8006f4a <_strtod_l+0x72>
 8006fd2:	f001 fe21 	bl	8008c18 <__errno>
 8006fd6:	2322      	movs	r3, #34	@ 0x22
 8006fd8:	6003      	str	r3, [r0, #0]
 8006fda:	e7b6      	b.n	8006f4a <_strtod_l+0x72>
 8006fdc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006fe0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006fe4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006fe8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006fec:	e7e7      	b.n	8006fbe <_strtod_l+0xe6>
 8006fee:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800716c <_strtod_l+0x294>
 8006ff2:	e7e4      	b.n	8006fbe <_strtod_l+0xe6>
 8006ff4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006ff8:	f04f 3aff 	mov.w	sl, #4294967295
 8006ffc:	e7df      	b.n	8006fbe <_strtod_l+0xe6>
 8006ffe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007000:	1c5a      	adds	r2, r3, #1
 8007002:	9219      	str	r2, [sp, #100]	@ 0x64
 8007004:	785b      	ldrb	r3, [r3, #1]
 8007006:	2b30      	cmp	r3, #48	@ 0x30
 8007008:	d0f9      	beq.n	8006ffe <_strtod_l+0x126>
 800700a:	2b00      	cmp	r3, #0
 800700c:	d09d      	beq.n	8006f4a <_strtod_l+0x72>
 800700e:	2301      	movs	r3, #1
 8007010:	9309      	str	r3, [sp, #36]	@ 0x24
 8007012:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007014:	930c      	str	r3, [sp, #48]	@ 0x30
 8007016:	2300      	movs	r3, #0
 8007018:	9308      	str	r3, [sp, #32]
 800701a:	930a      	str	r3, [sp, #40]	@ 0x28
 800701c:	461f      	mov	r7, r3
 800701e:	220a      	movs	r2, #10
 8007020:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007022:	7805      	ldrb	r5, [r0, #0]
 8007024:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007028:	b2d9      	uxtb	r1, r3
 800702a:	2909      	cmp	r1, #9
 800702c:	d928      	bls.n	8007080 <_strtod_l+0x1a8>
 800702e:	494e      	ldr	r1, [pc, #312]	@ (8007168 <_strtod_l+0x290>)
 8007030:	2201      	movs	r2, #1
 8007032:	f001 fd38 	bl	8008aa6 <strncmp>
 8007036:	2800      	cmp	r0, #0
 8007038:	d032      	beq.n	80070a0 <_strtod_l+0x1c8>
 800703a:	2000      	movs	r0, #0
 800703c:	462a      	mov	r2, r5
 800703e:	4681      	mov	r9, r0
 8007040:	463d      	mov	r5, r7
 8007042:	4603      	mov	r3, r0
 8007044:	2a65      	cmp	r2, #101	@ 0x65
 8007046:	d001      	beq.n	800704c <_strtod_l+0x174>
 8007048:	2a45      	cmp	r2, #69	@ 0x45
 800704a:	d114      	bne.n	8007076 <_strtod_l+0x19e>
 800704c:	b91d      	cbnz	r5, 8007056 <_strtod_l+0x17e>
 800704e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007050:	4302      	orrs	r2, r0
 8007052:	d095      	beq.n	8006f80 <_strtod_l+0xa8>
 8007054:	2500      	movs	r5, #0
 8007056:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007058:	1c62      	adds	r2, r4, #1
 800705a:	9219      	str	r2, [sp, #100]	@ 0x64
 800705c:	7862      	ldrb	r2, [r4, #1]
 800705e:	2a2b      	cmp	r2, #43	@ 0x2b
 8007060:	d077      	beq.n	8007152 <_strtod_l+0x27a>
 8007062:	2a2d      	cmp	r2, #45	@ 0x2d
 8007064:	d07b      	beq.n	800715e <_strtod_l+0x286>
 8007066:	f04f 0c00 	mov.w	ip, #0
 800706a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800706e:	2909      	cmp	r1, #9
 8007070:	f240 8082 	bls.w	8007178 <_strtod_l+0x2a0>
 8007074:	9419      	str	r4, [sp, #100]	@ 0x64
 8007076:	f04f 0800 	mov.w	r8, #0
 800707a:	e0a2      	b.n	80071c2 <_strtod_l+0x2ea>
 800707c:	2300      	movs	r3, #0
 800707e:	e7c7      	b.n	8007010 <_strtod_l+0x138>
 8007080:	2f08      	cmp	r7, #8
 8007082:	bfd5      	itete	le
 8007084:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007086:	9908      	ldrgt	r1, [sp, #32]
 8007088:	fb02 3301 	mlale	r3, r2, r1, r3
 800708c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007090:	f100 0001 	add.w	r0, r0, #1
 8007094:	bfd4      	ite	le
 8007096:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007098:	9308      	strgt	r3, [sp, #32]
 800709a:	3701      	adds	r7, #1
 800709c:	9019      	str	r0, [sp, #100]	@ 0x64
 800709e:	e7bf      	b.n	8007020 <_strtod_l+0x148>
 80070a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80070a2:	1c5a      	adds	r2, r3, #1
 80070a4:	9219      	str	r2, [sp, #100]	@ 0x64
 80070a6:	785a      	ldrb	r2, [r3, #1]
 80070a8:	b37f      	cbz	r7, 800710a <_strtod_l+0x232>
 80070aa:	4681      	mov	r9, r0
 80070ac:	463d      	mov	r5, r7
 80070ae:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80070b2:	2b09      	cmp	r3, #9
 80070b4:	d912      	bls.n	80070dc <_strtod_l+0x204>
 80070b6:	2301      	movs	r3, #1
 80070b8:	e7c4      	b.n	8007044 <_strtod_l+0x16c>
 80070ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80070bc:	1c5a      	adds	r2, r3, #1
 80070be:	9219      	str	r2, [sp, #100]	@ 0x64
 80070c0:	785a      	ldrb	r2, [r3, #1]
 80070c2:	3001      	adds	r0, #1
 80070c4:	2a30      	cmp	r2, #48	@ 0x30
 80070c6:	d0f8      	beq.n	80070ba <_strtod_l+0x1e2>
 80070c8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80070cc:	2b08      	cmp	r3, #8
 80070ce:	f200 84d3 	bhi.w	8007a78 <_strtod_l+0xba0>
 80070d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80070d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80070d6:	4681      	mov	r9, r0
 80070d8:	2000      	movs	r0, #0
 80070da:	4605      	mov	r5, r0
 80070dc:	3a30      	subs	r2, #48	@ 0x30
 80070de:	f100 0301 	add.w	r3, r0, #1
 80070e2:	d02a      	beq.n	800713a <_strtod_l+0x262>
 80070e4:	4499      	add	r9, r3
 80070e6:	eb00 0c05 	add.w	ip, r0, r5
 80070ea:	462b      	mov	r3, r5
 80070ec:	210a      	movs	r1, #10
 80070ee:	4563      	cmp	r3, ip
 80070f0:	d10d      	bne.n	800710e <_strtod_l+0x236>
 80070f2:	1c69      	adds	r1, r5, #1
 80070f4:	4401      	add	r1, r0
 80070f6:	4428      	add	r0, r5
 80070f8:	2808      	cmp	r0, #8
 80070fa:	dc16      	bgt.n	800712a <_strtod_l+0x252>
 80070fc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80070fe:	230a      	movs	r3, #10
 8007100:	fb03 2300 	mla	r3, r3, r0, r2
 8007104:	930a      	str	r3, [sp, #40]	@ 0x28
 8007106:	2300      	movs	r3, #0
 8007108:	e018      	b.n	800713c <_strtod_l+0x264>
 800710a:	4638      	mov	r0, r7
 800710c:	e7da      	b.n	80070c4 <_strtod_l+0x1ec>
 800710e:	2b08      	cmp	r3, #8
 8007110:	f103 0301 	add.w	r3, r3, #1
 8007114:	dc03      	bgt.n	800711e <_strtod_l+0x246>
 8007116:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007118:	434e      	muls	r6, r1
 800711a:	960a      	str	r6, [sp, #40]	@ 0x28
 800711c:	e7e7      	b.n	80070ee <_strtod_l+0x216>
 800711e:	2b10      	cmp	r3, #16
 8007120:	bfde      	ittt	le
 8007122:	9e08      	ldrle	r6, [sp, #32]
 8007124:	434e      	mulle	r6, r1
 8007126:	9608      	strle	r6, [sp, #32]
 8007128:	e7e1      	b.n	80070ee <_strtod_l+0x216>
 800712a:	280f      	cmp	r0, #15
 800712c:	dceb      	bgt.n	8007106 <_strtod_l+0x22e>
 800712e:	9808      	ldr	r0, [sp, #32]
 8007130:	230a      	movs	r3, #10
 8007132:	fb03 2300 	mla	r3, r3, r0, r2
 8007136:	9308      	str	r3, [sp, #32]
 8007138:	e7e5      	b.n	8007106 <_strtod_l+0x22e>
 800713a:	4629      	mov	r1, r5
 800713c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800713e:	1c50      	adds	r0, r2, #1
 8007140:	9019      	str	r0, [sp, #100]	@ 0x64
 8007142:	7852      	ldrb	r2, [r2, #1]
 8007144:	4618      	mov	r0, r3
 8007146:	460d      	mov	r5, r1
 8007148:	e7b1      	b.n	80070ae <_strtod_l+0x1d6>
 800714a:	f04f 0900 	mov.w	r9, #0
 800714e:	2301      	movs	r3, #1
 8007150:	e77d      	b.n	800704e <_strtod_l+0x176>
 8007152:	f04f 0c00 	mov.w	ip, #0
 8007156:	1ca2      	adds	r2, r4, #2
 8007158:	9219      	str	r2, [sp, #100]	@ 0x64
 800715a:	78a2      	ldrb	r2, [r4, #2]
 800715c:	e785      	b.n	800706a <_strtod_l+0x192>
 800715e:	f04f 0c01 	mov.w	ip, #1
 8007162:	e7f8      	b.n	8007156 <_strtod_l+0x27e>
 8007164:	0800bbc8 	.word	0x0800bbc8
 8007168:	0800bbb0 	.word	0x0800bbb0
 800716c:	7ff00000 	.word	0x7ff00000
 8007170:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007172:	1c51      	adds	r1, r2, #1
 8007174:	9119      	str	r1, [sp, #100]	@ 0x64
 8007176:	7852      	ldrb	r2, [r2, #1]
 8007178:	2a30      	cmp	r2, #48	@ 0x30
 800717a:	d0f9      	beq.n	8007170 <_strtod_l+0x298>
 800717c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007180:	2908      	cmp	r1, #8
 8007182:	f63f af78 	bhi.w	8007076 <_strtod_l+0x19e>
 8007186:	3a30      	subs	r2, #48	@ 0x30
 8007188:	920e      	str	r2, [sp, #56]	@ 0x38
 800718a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800718c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800718e:	f04f 080a 	mov.w	r8, #10
 8007192:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007194:	1c56      	adds	r6, r2, #1
 8007196:	9619      	str	r6, [sp, #100]	@ 0x64
 8007198:	7852      	ldrb	r2, [r2, #1]
 800719a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800719e:	f1be 0f09 	cmp.w	lr, #9
 80071a2:	d939      	bls.n	8007218 <_strtod_l+0x340>
 80071a4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80071a6:	1a76      	subs	r6, r6, r1
 80071a8:	2e08      	cmp	r6, #8
 80071aa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80071ae:	dc03      	bgt.n	80071b8 <_strtod_l+0x2e0>
 80071b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80071b2:	4588      	cmp	r8, r1
 80071b4:	bfa8      	it	ge
 80071b6:	4688      	movge	r8, r1
 80071b8:	f1bc 0f00 	cmp.w	ip, #0
 80071bc:	d001      	beq.n	80071c2 <_strtod_l+0x2ea>
 80071be:	f1c8 0800 	rsb	r8, r8, #0
 80071c2:	2d00      	cmp	r5, #0
 80071c4:	d14e      	bne.n	8007264 <_strtod_l+0x38c>
 80071c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80071c8:	4308      	orrs	r0, r1
 80071ca:	f47f aebe 	bne.w	8006f4a <_strtod_l+0x72>
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	f47f aed6 	bne.w	8006f80 <_strtod_l+0xa8>
 80071d4:	2a69      	cmp	r2, #105	@ 0x69
 80071d6:	d028      	beq.n	800722a <_strtod_l+0x352>
 80071d8:	dc25      	bgt.n	8007226 <_strtod_l+0x34e>
 80071da:	2a49      	cmp	r2, #73	@ 0x49
 80071dc:	d025      	beq.n	800722a <_strtod_l+0x352>
 80071de:	2a4e      	cmp	r2, #78	@ 0x4e
 80071e0:	f47f aece 	bne.w	8006f80 <_strtod_l+0xa8>
 80071e4:	499b      	ldr	r1, [pc, #620]	@ (8007454 <_strtod_l+0x57c>)
 80071e6:	a819      	add	r0, sp, #100	@ 0x64
 80071e8:	f002 fe9e 	bl	8009f28 <__match>
 80071ec:	2800      	cmp	r0, #0
 80071ee:	f43f aec7 	beq.w	8006f80 <_strtod_l+0xa8>
 80071f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	2b28      	cmp	r3, #40	@ 0x28
 80071f8:	d12e      	bne.n	8007258 <_strtod_l+0x380>
 80071fa:	4997      	ldr	r1, [pc, #604]	@ (8007458 <_strtod_l+0x580>)
 80071fc:	aa1c      	add	r2, sp, #112	@ 0x70
 80071fe:	a819      	add	r0, sp, #100	@ 0x64
 8007200:	f002 fea6 	bl	8009f50 <__hexnan>
 8007204:	2805      	cmp	r0, #5
 8007206:	d127      	bne.n	8007258 <_strtod_l+0x380>
 8007208:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800720a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800720e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007212:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007216:	e698      	b.n	8006f4a <_strtod_l+0x72>
 8007218:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800721a:	fb08 2101 	mla	r1, r8, r1, r2
 800721e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007222:	920e      	str	r2, [sp, #56]	@ 0x38
 8007224:	e7b5      	b.n	8007192 <_strtod_l+0x2ba>
 8007226:	2a6e      	cmp	r2, #110	@ 0x6e
 8007228:	e7da      	b.n	80071e0 <_strtod_l+0x308>
 800722a:	498c      	ldr	r1, [pc, #560]	@ (800745c <_strtod_l+0x584>)
 800722c:	a819      	add	r0, sp, #100	@ 0x64
 800722e:	f002 fe7b 	bl	8009f28 <__match>
 8007232:	2800      	cmp	r0, #0
 8007234:	f43f aea4 	beq.w	8006f80 <_strtod_l+0xa8>
 8007238:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800723a:	4989      	ldr	r1, [pc, #548]	@ (8007460 <_strtod_l+0x588>)
 800723c:	3b01      	subs	r3, #1
 800723e:	a819      	add	r0, sp, #100	@ 0x64
 8007240:	9319      	str	r3, [sp, #100]	@ 0x64
 8007242:	f002 fe71 	bl	8009f28 <__match>
 8007246:	b910      	cbnz	r0, 800724e <_strtod_l+0x376>
 8007248:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800724a:	3301      	adds	r3, #1
 800724c:	9319      	str	r3, [sp, #100]	@ 0x64
 800724e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007470 <_strtod_l+0x598>
 8007252:	f04f 0a00 	mov.w	sl, #0
 8007256:	e678      	b.n	8006f4a <_strtod_l+0x72>
 8007258:	4882      	ldr	r0, [pc, #520]	@ (8007464 <_strtod_l+0x58c>)
 800725a:	f001 fd19 	bl	8008c90 <nan>
 800725e:	ec5b ab10 	vmov	sl, fp, d0
 8007262:	e672      	b.n	8006f4a <_strtod_l+0x72>
 8007264:	eba8 0309 	sub.w	r3, r8, r9
 8007268:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800726a:	9309      	str	r3, [sp, #36]	@ 0x24
 800726c:	2f00      	cmp	r7, #0
 800726e:	bf08      	it	eq
 8007270:	462f      	moveq	r7, r5
 8007272:	2d10      	cmp	r5, #16
 8007274:	462c      	mov	r4, r5
 8007276:	bfa8      	it	ge
 8007278:	2410      	movge	r4, #16
 800727a:	f7f9 f963 	bl	8000544 <__aeabi_ui2d>
 800727e:	2d09      	cmp	r5, #9
 8007280:	4682      	mov	sl, r0
 8007282:	468b      	mov	fp, r1
 8007284:	dc13      	bgt.n	80072ae <_strtod_l+0x3d6>
 8007286:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007288:	2b00      	cmp	r3, #0
 800728a:	f43f ae5e 	beq.w	8006f4a <_strtod_l+0x72>
 800728e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007290:	dd78      	ble.n	8007384 <_strtod_l+0x4ac>
 8007292:	2b16      	cmp	r3, #22
 8007294:	dc5f      	bgt.n	8007356 <_strtod_l+0x47e>
 8007296:	4974      	ldr	r1, [pc, #464]	@ (8007468 <_strtod_l+0x590>)
 8007298:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800729c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072a0:	4652      	mov	r2, sl
 80072a2:	465b      	mov	r3, fp
 80072a4:	f7f9 f9c8 	bl	8000638 <__aeabi_dmul>
 80072a8:	4682      	mov	sl, r0
 80072aa:	468b      	mov	fp, r1
 80072ac:	e64d      	b.n	8006f4a <_strtod_l+0x72>
 80072ae:	4b6e      	ldr	r3, [pc, #440]	@ (8007468 <_strtod_l+0x590>)
 80072b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80072b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80072b8:	f7f9 f9be 	bl	8000638 <__aeabi_dmul>
 80072bc:	4682      	mov	sl, r0
 80072be:	9808      	ldr	r0, [sp, #32]
 80072c0:	468b      	mov	fp, r1
 80072c2:	f7f9 f93f 	bl	8000544 <__aeabi_ui2d>
 80072c6:	4602      	mov	r2, r0
 80072c8:	460b      	mov	r3, r1
 80072ca:	4650      	mov	r0, sl
 80072cc:	4659      	mov	r1, fp
 80072ce:	f7f8 fffd 	bl	80002cc <__adddf3>
 80072d2:	2d0f      	cmp	r5, #15
 80072d4:	4682      	mov	sl, r0
 80072d6:	468b      	mov	fp, r1
 80072d8:	ddd5      	ble.n	8007286 <_strtod_l+0x3ae>
 80072da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072dc:	1b2c      	subs	r4, r5, r4
 80072de:	441c      	add	r4, r3
 80072e0:	2c00      	cmp	r4, #0
 80072e2:	f340 8096 	ble.w	8007412 <_strtod_l+0x53a>
 80072e6:	f014 030f 	ands.w	r3, r4, #15
 80072ea:	d00a      	beq.n	8007302 <_strtod_l+0x42a>
 80072ec:	495e      	ldr	r1, [pc, #376]	@ (8007468 <_strtod_l+0x590>)
 80072ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80072f2:	4652      	mov	r2, sl
 80072f4:	465b      	mov	r3, fp
 80072f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072fa:	f7f9 f99d 	bl	8000638 <__aeabi_dmul>
 80072fe:	4682      	mov	sl, r0
 8007300:	468b      	mov	fp, r1
 8007302:	f034 040f 	bics.w	r4, r4, #15
 8007306:	d073      	beq.n	80073f0 <_strtod_l+0x518>
 8007308:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800730c:	dd48      	ble.n	80073a0 <_strtod_l+0x4c8>
 800730e:	2400      	movs	r4, #0
 8007310:	46a0      	mov	r8, r4
 8007312:	940a      	str	r4, [sp, #40]	@ 0x28
 8007314:	46a1      	mov	r9, r4
 8007316:	9a05      	ldr	r2, [sp, #20]
 8007318:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007470 <_strtod_l+0x598>
 800731c:	2322      	movs	r3, #34	@ 0x22
 800731e:	6013      	str	r3, [r2, #0]
 8007320:	f04f 0a00 	mov.w	sl, #0
 8007324:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007326:	2b00      	cmp	r3, #0
 8007328:	f43f ae0f 	beq.w	8006f4a <_strtod_l+0x72>
 800732c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800732e:	9805      	ldr	r0, [sp, #20]
 8007330:	f002 ffb2 	bl	800a298 <_Bfree>
 8007334:	9805      	ldr	r0, [sp, #20]
 8007336:	4649      	mov	r1, r9
 8007338:	f002 ffae 	bl	800a298 <_Bfree>
 800733c:	9805      	ldr	r0, [sp, #20]
 800733e:	4641      	mov	r1, r8
 8007340:	f002 ffaa 	bl	800a298 <_Bfree>
 8007344:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007346:	9805      	ldr	r0, [sp, #20]
 8007348:	f002 ffa6 	bl	800a298 <_Bfree>
 800734c:	9805      	ldr	r0, [sp, #20]
 800734e:	4621      	mov	r1, r4
 8007350:	f002 ffa2 	bl	800a298 <_Bfree>
 8007354:	e5f9      	b.n	8006f4a <_strtod_l+0x72>
 8007356:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007358:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800735c:	4293      	cmp	r3, r2
 800735e:	dbbc      	blt.n	80072da <_strtod_l+0x402>
 8007360:	4c41      	ldr	r4, [pc, #260]	@ (8007468 <_strtod_l+0x590>)
 8007362:	f1c5 050f 	rsb	r5, r5, #15
 8007366:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800736a:	4652      	mov	r2, sl
 800736c:	465b      	mov	r3, fp
 800736e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007372:	f7f9 f961 	bl	8000638 <__aeabi_dmul>
 8007376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007378:	1b5d      	subs	r5, r3, r5
 800737a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800737e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007382:	e78f      	b.n	80072a4 <_strtod_l+0x3cc>
 8007384:	3316      	adds	r3, #22
 8007386:	dba8      	blt.n	80072da <_strtod_l+0x402>
 8007388:	4b37      	ldr	r3, [pc, #220]	@ (8007468 <_strtod_l+0x590>)
 800738a:	eba9 0808 	sub.w	r8, r9, r8
 800738e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007392:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007396:	4650      	mov	r0, sl
 8007398:	4659      	mov	r1, fp
 800739a:	f7f9 fa77 	bl	800088c <__aeabi_ddiv>
 800739e:	e783      	b.n	80072a8 <_strtod_l+0x3d0>
 80073a0:	4b32      	ldr	r3, [pc, #200]	@ (800746c <_strtod_l+0x594>)
 80073a2:	9308      	str	r3, [sp, #32]
 80073a4:	2300      	movs	r3, #0
 80073a6:	1124      	asrs	r4, r4, #4
 80073a8:	4650      	mov	r0, sl
 80073aa:	4659      	mov	r1, fp
 80073ac:	461e      	mov	r6, r3
 80073ae:	2c01      	cmp	r4, #1
 80073b0:	dc21      	bgt.n	80073f6 <_strtod_l+0x51e>
 80073b2:	b10b      	cbz	r3, 80073b8 <_strtod_l+0x4e0>
 80073b4:	4682      	mov	sl, r0
 80073b6:	468b      	mov	fp, r1
 80073b8:	492c      	ldr	r1, [pc, #176]	@ (800746c <_strtod_l+0x594>)
 80073ba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80073be:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80073c2:	4652      	mov	r2, sl
 80073c4:	465b      	mov	r3, fp
 80073c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073ca:	f7f9 f935 	bl	8000638 <__aeabi_dmul>
 80073ce:	4b28      	ldr	r3, [pc, #160]	@ (8007470 <_strtod_l+0x598>)
 80073d0:	460a      	mov	r2, r1
 80073d2:	400b      	ands	r3, r1
 80073d4:	4927      	ldr	r1, [pc, #156]	@ (8007474 <_strtod_l+0x59c>)
 80073d6:	428b      	cmp	r3, r1
 80073d8:	4682      	mov	sl, r0
 80073da:	d898      	bhi.n	800730e <_strtod_l+0x436>
 80073dc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80073e0:	428b      	cmp	r3, r1
 80073e2:	bf86      	itte	hi
 80073e4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007478 <_strtod_l+0x5a0>
 80073e8:	f04f 3aff 	movhi.w	sl, #4294967295
 80073ec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80073f0:	2300      	movs	r3, #0
 80073f2:	9308      	str	r3, [sp, #32]
 80073f4:	e07a      	b.n	80074ec <_strtod_l+0x614>
 80073f6:	07e2      	lsls	r2, r4, #31
 80073f8:	d505      	bpl.n	8007406 <_strtod_l+0x52e>
 80073fa:	9b08      	ldr	r3, [sp, #32]
 80073fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007400:	f7f9 f91a 	bl	8000638 <__aeabi_dmul>
 8007404:	2301      	movs	r3, #1
 8007406:	9a08      	ldr	r2, [sp, #32]
 8007408:	3208      	adds	r2, #8
 800740a:	3601      	adds	r6, #1
 800740c:	1064      	asrs	r4, r4, #1
 800740e:	9208      	str	r2, [sp, #32]
 8007410:	e7cd      	b.n	80073ae <_strtod_l+0x4d6>
 8007412:	d0ed      	beq.n	80073f0 <_strtod_l+0x518>
 8007414:	4264      	negs	r4, r4
 8007416:	f014 020f 	ands.w	r2, r4, #15
 800741a:	d00a      	beq.n	8007432 <_strtod_l+0x55a>
 800741c:	4b12      	ldr	r3, [pc, #72]	@ (8007468 <_strtod_l+0x590>)
 800741e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007422:	4650      	mov	r0, sl
 8007424:	4659      	mov	r1, fp
 8007426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742a:	f7f9 fa2f 	bl	800088c <__aeabi_ddiv>
 800742e:	4682      	mov	sl, r0
 8007430:	468b      	mov	fp, r1
 8007432:	1124      	asrs	r4, r4, #4
 8007434:	d0dc      	beq.n	80073f0 <_strtod_l+0x518>
 8007436:	2c1f      	cmp	r4, #31
 8007438:	dd20      	ble.n	800747c <_strtod_l+0x5a4>
 800743a:	2400      	movs	r4, #0
 800743c:	46a0      	mov	r8, r4
 800743e:	940a      	str	r4, [sp, #40]	@ 0x28
 8007440:	46a1      	mov	r9, r4
 8007442:	9a05      	ldr	r2, [sp, #20]
 8007444:	2322      	movs	r3, #34	@ 0x22
 8007446:	f04f 0a00 	mov.w	sl, #0
 800744a:	f04f 0b00 	mov.w	fp, #0
 800744e:	6013      	str	r3, [r2, #0]
 8007450:	e768      	b.n	8007324 <_strtod_l+0x44c>
 8007452:	bf00      	nop
 8007454:	0800bc15 	.word	0x0800bc15
 8007458:	0800bbb4 	.word	0x0800bbb4
 800745c:	0800bc0d 	.word	0x0800bc0d
 8007460:	0800bcf9 	.word	0x0800bcf9
 8007464:	0800bcf5 	.word	0x0800bcf5
 8007468:	0800be60 	.word	0x0800be60
 800746c:	0800be38 	.word	0x0800be38
 8007470:	7ff00000 	.word	0x7ff00000
 8007474:	7ca00000 	.word	0x7ca00000
 8007478:	7fefffff 	.word	0x7fefffff
 800747c:	f014 0310 	ands.w	r3, r4, #16
 8007480:	bf18      	it	ne
 8007482:	236a      	movne	r3, #106	@ 0x6a
 8007484:	4ea9      	ldr	r6, [pc, #676]	@ (800772c <_strtod_l+0x854>)
 8007486:	9308      	str	r3, [sp, #32]
 8007488:	4650      	mov	r0, sl
 800748a:	4659      	mov	r1, fp
 800748c:	2300      	movs	r3, #0
 800748e:	07e2      	lsls	r2, r4, #31
 8007490:	d504      	bpl.n	800749c <_strtod_l+0x5c4>
 8007492:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007496:	f7f9 f8cf 	bl	8000638 <__aeabi_dmul>
 800749a:	2301      	movs	r3, #1
 800749c:	1064      	asrs	r4, r4, #1
 800749e:	f106 0608 	add.w	r6, r6, #8
 80074a2:	d1f4      	bne.n	800748e <_strtod_l+0x5b6>
 80074a4:	b10b      	cbz	r3, 80074aa <_strtod_l+0x5d2>
 80074a6:	4682      	mov	sl, r0
 80074a8:	468b      	mov	fp, r1
 80074aa:	9b08      	ldr	r3, [sp, #32]
 80074ac:	b1b3      	cbz	r3, 80074dc <_strtod_l+0x604>
 80074ae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80074b2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	4659      	mov	r1, fp
 80074ba:	dd0f      	ble.n	80074dc <_strtod_l+0x604>
 80074bc:	2b1f      	cmp	r3, #31
 80074be:	dd55      	ble.n	800756c <_strtod_l+0x694>
 80074c0:	2b34      	cmp	r3, #52	@ 0x34
 80074c2:	bfde      	ittt	le
 80074c4:	f04f 33ff 	movle.w	r3, #4294967295
 80074c8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80074cc:	4093      	lslle	r3, r2
 80074ce:	f04f 0a00 	mov.w	sl, #0
 80074d2:	bfcc      	ite	gt
 80074d4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80074d8:	ea03 0b01 	andle.w	fp, r3, r1
 80074dc:	2200      	movs	r2, #0
 80074de:	2300      	movs	r3, #0
 80074e0:	4650      	mov	r0, sl
 80074e2:	4659      	mov	r1, fp
 80074e4:	f7f9 fb10 	bl	8000b08 <__aeabi_dcmpeq>
 80074e8:	2800      	cmp	r0, #0
 80074ea:	d1a6      	bne.n	800743a <_strtod_l+0x562>
 80074ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074ee:	9300      	str	r3, [sp, #0]
 80074f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80074f2:	9805      	ldr	r0, [sp, #20]
 80074f4:	462b      	mov	r3, r5
 80074f6:	463a      	mov	r2, r7
 80074f8:	f002 ff36 	bl	800a368 <__s2b>
 80074fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80074fe:	2800      	cmp	r0, #0
 8007500:	f43f af05 	beq.w	800730e <_strtod_l+0x436>
 8007504:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007506:	2a00      	cmp	r2, #0
 8007508:	eba9 0308 	sub.w	r3, r9, r8
 800750c:	bfa8      	it	ge
 800750e:	2300      	movge	r3, #0
 8007510:	9312      	str	r3, [sp, #72]	@ 0x48
 8007512:	2400      	movs	r4, #0
 8007514:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007518:	9316      	str	r3, [sp, #88]	@ 0x58
 800751a:	46a0      	mov	r8, r4
 800751c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800751e:	9805      	ldr	r0, [sp, #20]
 8007520:	6859      	ldr	r1, [r3, #4]
 8007522:	f002 fe79 	bl	800a218 <_Balloc>
 8007526:	4681      	mov	r9, r0
 8007528:	2800      	cmp	r0, #0
 800752a:	f43f aef4 	beq.w	8007316 <_strtod_l+0x43e>
 800752e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007530:	691a      	ldr	r2, [r3, #16]
 8007532:	3202      	adds	r2, #2
 8007534:	f103 010c 	add.w	r1, r3, #12
 8007538:	0092      	lsls	r2, r2, #2
 800753a:	300c      	adds	r0, #12
 800753c:	f001 fb99 	bl	8008c72 <memcpy>
 8007540:	ec4b ab10 	vmov	d0, sl, fp
 8007544:	9805      	ldr	r0, [sp, #20]
 8007546:	aa1c      	add	r2, sp, #112	@ 0x70
 8007548:	a91b      	add	r1, sp, #108	@ 0x6c
 800754a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800754e:	f003 fa47 	bl	800a9e0 <__d2b>
 8007552:	901a      	str	r0, [sp, #104]	@ 0x68
 8007554:	2800      	cmp	r0, #0
 8007556:	f43f aede 	beq.w	8007316 <_strtod_l+0x43e>
 800755a:	9805      	ldr	r0, [sp, #20]
 800755c:	2101      	movs	r1, #1
 800755e:	f002 ff99 	bl	800a494 <__i2b>
 8007562:	4680      	mov	r8, r0
 8007564:	b948      	cbnz	r0, 800757a <_strtod_l+0x6a2>
 8007566:	f04f 0800 	mov.w	r8, #0
 800756a:	e6d4      	b.n	8007316 <_strtod_l+0x43e>
 800756c:	f04f 32ff 	mov.w	r2, #4294967295
 8007570:	fa02 f303 	lsl.w	r3, r2, r3
 8007574:	ea03 0a0a 	and.w	sl, r3, sl
 8007578:	e7b0      	b.n	80074dc <_strtod_l+0x604>
 800757a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800757c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800757e:	2d00      	cmp	r5, #0
 8007580:	bfab      	itete	ge
 8007582:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007584:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007586:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007588:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800758a:	bfac      	ite	ge
 800758c:	18ef      	addge	r7, r5, r3
 800758e:	1b5e      	sublt	r6, r3, r5
 8007590:	9b08      	ldr	r3, [sp, #32]
 8007592:	1aed      	subs	r5, r5, r3
 8007594:	4415      	add	r5, r2
 8007596:	4b66      	ldr	r3, [pc, #408]	@ (8007730 <_strtod_l+0x858>)
 8007598:	3d01      	subs	r5, #1
 800759a:	429d      	cmp	r5, r3
 800759c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80075a0:	da50      	bge.n	8007644 <_strtod_l+0x76c>
 80075a2:	1b5b      	subs	r3, r3, r5
 80075a4:	2b1f      	cmp	r3, #31
 80075a6:	eba2 0203 	sub.w	r2, r2, r3
 80075aa:	f04f 0101 	mov.w	r1, #1
 80075ae:	dc3d      	bgt.n	800762c <_strtod_l+0x754>
 80075b0:	fa01 f303 	lsl.w	r3, r1, r3
 80075b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80075b6:	2300      	movs	r3, #0
 80075b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80075ba:	18bd      	adds	r5, r7, r2
 80075bc:	9b08      	ldr	r3, [sp, #32]
 80075be:	42af      	cmp	r7, r5
 80075c0:	4416      	add	r6, r2
 80075c2:	441e      	add	r6, r3
 80075c4:	463b      	mov	r3, r7
 80075c6:	bfa8      	it	ge
 80075c8:	462b      	movge	r3, r5
 80075ca:	42b3      	cmp	r3, r6
 80075cc:	bfa8      	it	ge
 80075ce:	4633      	movge	r3, r6
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	bfc2      	ittt	gt
 80075d4:	1aed      	subgt	r5, r5, r3
 80075d6:	1af6      	subgt	r6, r6, r3
 80075d8:	1aff      	subgt	r7, r7, r3
 80075da:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80075dc:	2b00      	cmp	r3, #0
 80075de:	dd16      	ble.n	800760e <_strtod_l+0x736>
 80075e0:	4641      	mov	r1, r8
 80075e2:	9805      	ldr	r0, [sp, #20]
 80075e4:	461a      	mov	r2, r3
 80075e6:	f003 f815 	bl	800a614 <__pow5mult>
 80075ea:	4680      	mov	r8, r0
 80075ec:	2800      	cmp	r0, #0
 80075ee:	d0ba      	beq.n	8007566 <_strtod_l+0x68e>
 80075f0:	4601      	mov	r1, r0
 80075f2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80075f4:	9805      	ldr	r0, [sp, #20]
 80075f6:	f002 ff63 	bl	800a4c0 <__multiply>
 80075fa:	900e      	str	r0, [sp, #56]	@ 0x38
 80075fc:	2800      	cmp	r0, #0
 80075fe:	f43f ae8a 	beq.w	8007316 <_strtod_l+0x43e>
 8007602:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007604:	9805      	ldr	r0, [sp, #20]
 8007606:	f002 fe47 	bl	800a298 <_Bfree>
 800760a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800760c:	931a      	str	r3, [sp, #104]	@ 0x68
 800760e:	2d00      	cmp	r5, #0
 8007610:	dc1d      	bgt.n	800764e <_strtod_l+0x776>
 8007612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007614:	2b00      	cmp	r3, #0
 8007616:	dd23      	ble.n	8007660 <_strtod_l+0x788>
 8007618:	4649      	mov	r1, r9
 800761a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800761c:	9805      	ldr	r0, [sp, #20]
 800761e:	f002 fff9 	bl	800a614 <__pow5mult>
 8007622:	4681      	mov	r9, r0
 8007624:	b9e0      	cbnz	r0, 8007660 <_strtod_l+0x788>
 8007626:	f04f 0900 	mov.w	r9, #0
 800762a:	e674      	b.n	8007316 <_strtod_l+0x43e>
 800762c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007630:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007634:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007638:	35e2      	adds	r5, #226	@ 0xe2
 800763a:	fa01 f305 	lsl.w	r3, r1, r5
 800763e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007640:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007642:	e7ba      	b.n	80075ba <_strtod_l+0x6e2>
 8007644:	2300      	movs	r3, #0
 8007646:	9310      	str	r3, [sp, #64]	@ 0x40
 8007648:	2301      	movs	r3, #1
 800764a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800764c:	e7b5      	b.n	80075ba <_strtod_l+0x6e2>
 800764e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007650:	9805      	ldr	r0, [sp, #20]
 8007652:	462a      	mov	r2, r5
 8007654:	f003 f838 	bl	800a6c8 <__lshift>
 8007658:	901a      	str	r0, [sp, #104]	@ 0x68
 800765a:	2800      	cmp	r0, #0
 800765c:	d1d9      	bne.n	8007612 <_strtod_l+0x73a>
 800765e:	e65a      	b.n	8007316 <_strtod_l+0x43e>
 8007660:	2e00      	cmp	r6, #0
 8007662:	dd07      	ble.n	8007674 <_strtod_l+0x79c>
 8007664:	4649      	mov	r1, r9
 8007666:	9805      	ldr	r0, [sp, #20]
 8007668:	4632      	mov	r2, r6
 800766a:	f003 f82d 	bl	800a6c8 <__lshift>
 800766e:	4681      	mov	r9, r0
 8007670:	2800      	cmp	r0, #0
 8007672:	d0d8      	beq.n	8007626 <_strtod_l+0x74e>
 8007674:	2f00      	cmp	r7, #0
 8007676:	dd08      	ble.n	800768a <_strtod_l+0x7b2>
 8007678:	4641      	mov	r1, r8
 800767a:	9805      	ldr	r0, [sp, #20]
 800767c:	463a      	mov	r2, r7
 800767e:	f003 f823 	bl	800a6c8 <__lshift>
 8007682:	4680      	mov	r8, r0
 8007684:	2800      	cmp	r0, #0
 8007686:	f43f ae46 	beq.w	8007316 <_strtod_l+0x43e>
 800768a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800768c:	9805      	ldr	r0, [sp, #20]
 800768e:	464a      	mov	r2, r9
 8007690:	f003 f8a2 	bl	800a7d8 <__mdiff>
 8007694:	4604      	mov	r4, r0
 8007696:	2800      	cmp	r0, #0
 8007698:	f43f ae3d 	beq.w	8007316 <_strtod_l+0x43e>
 800769c:	68c3      	ldr	r3, [r0, #12]
 800769e:	930f      	str	r3, [sp, #60]	@ 0x3c
 80076a0:	2300      	movs	r3, #0
 80076a2:	60c3      	str	r3, [r0, #12]
 80076a4:	4641      	mov	r1, r8
 80076a6:	f003 f87b 	bl	800a7a0 <__mcmp>
 80076aa:	2800      	cmp	r0, #0
 80076ac:	da46      	bge.n	800773c <_strtod_l+0x864>
 80076ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076b0:	ea53 030a 	orrs.w	r3, r3, sl
 80076b4:	d16c      	bne.n	8007790 <_strtod_l+0x8b8>
 80076b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d168      	bne.n	8007790 <_strtod_l+0x8b8>
 80076be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80076c2:	0d1b      	lsrs	r3, r3, #20
 80076c4:	051b      	lsls	r3, r3, #20
 80076c6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80076ca:	d961      	bls.n	8007790 <_strtod_l+0x8b8>
 80076cc:	6963      	ldr	r3, [r4, #20]
 80076ce:	b913      	cbnz	r3, 80076d6 <_strtod_l+0x7fe>
 80076d0:	6923      	ldr	r3, [r4, #16]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	dd5c      	ble.n	8007790 <_strtod_l+0x8b8>
 80076d6:	4621      	mov	r1, r4
 80076d8:	2201      	movs	r2, #1
 80076da:	9805      	ldr	r0, [sp, #20]
 80076dc:	f002 fff4 	bl	800a6c8 <__lshift>
 80076e0:	4641      	mov	r1, r8
 80076e2:	4604      	mov	r4, r0
 80076e4:	f003 f85c 	bl	800a7a0 <__mcmp>
 80076e8:	2800      	cmp	r0, #0
 80076ea:	dd51      	ble.n	8007790 <_strtod_l+0x8b8>
 80076ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80076f0:	9a08      	ldr	r2, [sp, #32]
 80076f2:	0d1b      	lsrs	r3, r3, #20
 80076f4:	051b      	lsls	r3, r3, #20
 80076f6:	2a00      	cmp	r2, #0
 80076f8:	d06b      	beq.n	80077d2 <_strtod_l+0x8fa>
 80076fa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80076fe:	d868      	bhi.n	80077d2 <_strtod_l+0x8fa>
 8007700:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007704:	f67f ae9d 	bls.w	8007442 <_strtod_l+0x56a>
 8007708:	4b0a      	ldr	r3, [pc, #40]	@ (8007734 <_strtod_l+0x85c>)
 800770a:	4650      	mov	r0, sl
 800770c:	4659      	mov	r1, fp
 800770e:	2200      	movs	r2, #0
 8007710:	f7f8 ff92 	bl	8000638 <__aeabi_dmul>
 8007714:	4b08      	ldr	r3, [pc, #32]	@ (8007738 <_strtod_l+0x860>)
 8007716:	400b      	ands	r3, r1
 8007718:	4682      	mov	sl, r0
 800771a:	468b      	mov	fp, r1
 800771c:	2b00      	cmp	r3, #0
 800771e:	f47f ae05 	bne.w	800732c <_strtod_l+0x454>
 8007722:	9a05      	ldr	r2, [sp, #20]
 8007724:	2322      	movs	r3, #34	@ 0x22
 8007726:	6013      	str	r3, [r2, #0]
 8007728:	e600      	b.n	800732c <_strtod_l+0x454>
 800772a:	bf00      	nop
 800772c:	0800bbe0 	.word	0x0800bbe0
 8007730:	fffffc02 	.word	0xfffffc02
 8007734:	39500000 	.word	0x39500000
 8007738:	7ff00000 	.word	0x7ff00000
 800773c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007740:	d165      	bne.n	800780e <_strtod_l+0x936>
 8007742:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007744:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007748:	b35a      	cbz	r2, 80077a2 <_strtod_l+0x8ca>
 800774a:	4a9f      	ldr	r2, [pc, #636]	@ (80079c8 <_strtod_l+0xaf0>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d12b      	bne.n	80077a8 <_strtod_l+0x8d0>
 8007750:	9b08      	ldr	r3, [sp, #32]
 8007752:	4651      	mov	r1, sl
 8007754:	b303      	cbz	r3, 8007798 <_strtod_l+0x8c0>
 8007756:	4b9d      	ldr	r3, [pc, #628]	@ (80079cc <_strtod_l+0xaf4>)
 8007758:	465a      	mov	r2, fp
 800775a:	4013      	ands	r3, r2
 800775c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007760:	f04f 32ff 	mov.w	r2, #4294967295
 8007764:	d81b      	bhi.n	800779e <_strtod_l+0x8c6>
 8007766:	0d1b      	lsrs	r3, r3, #20
 8007768:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800776c:	fa02 f303 	lsl.w	r3, r2, r3
 8007770:	4299      	cmp	r1, r3
 8007772:	d119      	bne.n	80077a8 <_strtod_l+0x8d0>
 8007774:	4b96      	ldr	r3, [pc, #600]	@ (80079d0 <_strtod_l+0xaf8>)
 8007776:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007778:	429a      	cmp	r2, r3
 800777a:	d102      	bne.n	8007782 <_strtod_l+0x8aa>
 800777c:	3101      	adds	r1, #1
 800777e:	f43f adca 	beq.w	8007316 <_strtod_l+0x43e>
 8007782:	4b92      	ldr	r3, [pc, #584]	@ (80079cc <_strtod_l+0xaf4>)
 8007784:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007786:	401a      	ands	r2, r3
 8007788:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800778c:	f04f 0a00 	mov.w	sl, #0
 8007790:	9b08      	ldr	r3, [sp, #32]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1b8      	bne.n	8007708 <_strtod_l+0x830>
 8007796:	e5c9      	b.n	800732c <_strtod_l+0x454>
 8007798:	f04f 33ff 	mov.w	r3, #4294967295
 800779c:	e7e8      	b.n	8007770 <_strtod_l+0x898>
 800779e:	4613      	mov	r3, r2
 80077a0:	e7e6      	b.n	8007770 <_strtod_l+0x898>
 80077a2:	ea53 030a 	orrs.w	r3, r3, sl
 80077a6:	d0a1      	beq.n	80076ec <_strtod_l+0x814>
 80077a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80077aa:	b1db      	cbz	r3, 80077e4 <_strtod_l+0x90c>
 80077ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80077ae:	4213      	tst	r3, r2
 80077b0:	d0ee      	beq.n	8007790 <_strtod_l+0x8b8>
 80077b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077b4:	9a08      	ldr	r2, [sp, #32]
 80077b6:	4650      	mov	r0, sl
 80077b8:	4659      	mov	r1, fp
 80077ba:	b1bb      	cbz	r3, 80077ec <_strtod_l+0x914>
 80077bc:	f7ff fb6e 	bl	8006e9c <sulp>
 80077c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80077c4:	ec53 2b10 	vmov	r2, r3, d0
 80077c8:	f7f8 fd80 	bl	80002cc <__adddf3>
 80077cc:	4682      	mov	sl, r0
 80077ce:	468b      	mov	fp, r1
 80077d0:	e7de      	b.n	8007790 <_strtod_l+0x8b8>
 80077d2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80077d6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80077da:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80077de:	f04f 3aff 	mov.w	sl, #4294967295
 80077e2:	e7d5      	b.n	8007790 <_strtod_l+0x8b8>
 80077e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80077e6:	ea13 0f0a 	tst.w	r3, sl
 80077ea:	e7e1      	b.n	80077b0 <_strtod_l+0x8d8>
 80077ec:	f7ff fb56 	bl	8006e9c <sulp>
 80077f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80077f4:	ec53 2b10 	vmov	r2, r3, d0
 80077f8:	f7f8 fd66 	bl	80002c8 <__aeabi_dsub>
 80077fc:	2200      	movs	r2, #0
 80077fe:	2300      	movs	r3, #0
 8007800:	4682      	mov	sl, r0
 8007802:	468b      	mov	fp, r1
 8007804:	f7f9 f980 	bl	8000b08 <__aeabi_dcmpeq>
 8007808:	2800      	cmp	r0, #0
 800780a:	d0c1      	beq.n	8007790 <_strtod_l+0x8b8>
 800780c:	e619      	b.n	8007442 <_strtod_l+0x56a>
 800780e:	4641      	mov	r1, r8
 8007810:	4620      	mov	r0, r4
 8007812:	f003 f93d 	bl	800aa90 <__ratio>
 8007816:	ec57 6b10 	vmov	r6, r7, d0
 800781a:	2200      	movs	r2, #0
 800781c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007820:	4630      	mov	r0, r6
 8007822:	4639      	mov	r1, r7
 8007824:	f7f9 f984 	bl	8000b30 <__aeabi_dcmple>
 8007828:	2800      	cmp	r0, #0
 800782a:	d06f      	beq.n	800790c <_strtod_l+0xa34>
 800782c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800782e:	2b00      	cmp	r3, #0
 8007830:	d17a      	bne.n	8007928 <_strtod_l+0xa50>
 8007832:	f1ba 0f00 	cmp.w	sl, #0
 8007836:	d158      	bne.n	80078ea <_strtod_l+0xa12>
 8007838:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800783a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800783e:	2b00      	cmp	r3, #0
 8007840:	d15a      	bne.n	80078f8 <_strtod_l+0xa20>
 8007842:	4b64      	ldr	r3, [pc, #400]	@ (80079d4 <_strtod_l+0xafc>)
 8007844:	2200      	movs	r2, #0
 8007846:	4630      	mov	r0, r6
 8007848:	4639      	mov	r1, r7
 800784a:	f7f9 f967 	bl	8000b1c <__aeabi_dcmplt>
 800784e:	2800      	cmp	r0, #0
 8007850:	d159      	bne.n	8007906 <_strtod_l+0xa2e>
 8007852:	4630      	mov	r0, r6
 8007854:	4639      	mov	r1, r7
 8007856:	4b60      	ldr	r3, [pc, #384]	@ (80079d8 <_strtod_l+0xb00>)
 8007858:	2200      	movs	r2, #0
 800785a:	f7f8 feed 	bl	8000638 <__aeabi_dmul>
 800785e:	4606      	mov	r6, r0
 8007860:	460f      	mov	r7, r1
 8007862:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007866:	9606      	str	r6, [sp, #24]
 8007868:	9307      	str	r3, [sp, #28]
 800786a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800786e:	4d57      	ldr	r5, [pc, #348]	@ (80079cc <_strtod_l+0xaf4>)
 8007870:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007874:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007876:	401d      	ands	r5, r3
 8007878:	4b58      	ldr	r3, [pc, #352]	@ (80079dc <_strtod_l+0xb04>)
 800787a:	429d      	cmp	r5, r3
 800787c:	f040 80b2 	bne.w	80079e4 <_strtod_l+0xb0c>
 8007880:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007882:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007886:	ec4b ab10 	vmov	d0, sl, fp
 800788a:	f003 f839 	bl	800a900 <__ulp>
 800788e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007892:	ec51 0b10 	vmov	r0, r1, d0
 8007896:	f7f8 fecf 	bl	8000638 <__aeabi_dmul>
 800789a:	4652      	mov	r2, sl
 800789c:	465b      	mov	r3, fp
 800789e:	f7f8 fd15 	bl	80002cc <__adddf3>
 80078a2:	460b      	mov	r3, r1
 80078a4:	4949      	ldr	r1, [pc, #292]	@ (80079cc <_strtod_l+0xaf4>)
 80078a6:	4a4e      	ldr	r2, [pc, #312]	@ (80079e0 <_strtod_l+0xb08>)
 80078a8:	4019      	ands	r1, r3
 80078aa:	4291      	cmp	r1, r2
 80078ac:	4682      	mov	sl, r0
 80078ae:	d942      	bls.n	8007936 <_strtod_l+0xa5e>
 80078b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80078b2:	4b47      	ldr	r3, [pc, #284]	@ (80079d0 <_strtod_l+0xaf8>)
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d103      	bne.n	80078c0 <_strtod_l+0x9e8>
 80078b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80078ba:	3301      	adds	r3, #1
 80078bc:	f43f ad2b 	beq.w	8007316 <_strtod_l+0x43e>
 80078c0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80079d0 <_strtod_l+0xaf8>
 80078c4:	f04f 3aff 	mov.w	sl, #4294967295
 80078c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80078ca:	9805      	ldr	r0, [sp, #20]
 80078cc:	f002 fce4 	bl	800a298 <_Bfree>
 80078d0:	9805      	ldr	r0, [sp, #20]
 80078d2:	4649      	mov	r1, r9
 80078d4:	f002 fce0 	bl	800a298 <_Bfree>
 80078d8:	9805      	ldr	r0, [sp, #20]
 80078da:	4641      	mov	r1, r8
 80078dc:	f002 fcdc 	bl	800a298 <_Bfree>
 80078e0:	9805      	ldr	r0, [sp, #20]
 80078e2:	4621      	mov	r1, r4
 80078e4:	f002 fcd8 	bl	800a298 <_Bfree>
 80078e8:	e618      	b.n	800751c <_strtod_l+0x644>
 80078ea:	f1ba 0f01 	cmp.w	sl, #1
 80078ee:	d103      	bne.n	80078f8 <_strtod_l+0xa20>
 80078f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f43f ada5 	beq.w	8007442 <_strtod_l+0x56a>
 80078f8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80079a8 <_strtod_l+0xad0>
 80078fc:	4f35      	ldr	r7, [pc, #212]	@ (80079d4 <_strtod_l+0xafc>)
 80078fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007902:	2600      	movs	r6, #0
 8007904:	e7b1      	b.n	800786a <_strtod_l+0x992>
 8007906:	4f34      	ldr	r7, [pc, #208]	@ (80079d8 <_strtod_l+0xb00>)
 8007908:	2600      	movs	r6, #0
 800790a:	e7aa      	b.n	8007862 <_strtod_l+0x98a>
 800790c:	4b32      	ldr	r3, [pc, #200]	@ (80079d8 <_strtod_l+0xb00>)
 800790e:	4630      	mov	r0, r6
 8007910:	4639      	mov	r1, r7
 8007912:	2200      	movs	r2, #0
 8007914:	f7f8 fe90 	bl	8000638 <__aeabi_dmul>
 8007918:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800791a:	4606      	mov	r6, r0
 800791c:	460f      	mov	r7, r1
 800791e:	2b00      	cmp	r3, #0
 8007920:	d09f      	beq.n	8007862 <_strtod_l+0x98a>
 8007922:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007926:	e7a0      	b.n	800786a <_strtod_l+0x992>
 8007928:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80079b0 <_strtod_l+0xad8>
 800792c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007930:	ec57 6b17 	vmov	r6, r7, d7
 8007934:	e799      	b.n	800786a <_strtod_l+0x992>
 8007936:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800793a:	9b08      	ldr	r3, [sp, #32]
 800793c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1c1      	bne.n	80078c8 <_strtod_l+0x9f0>
 8007944:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007948:	0d1b      	lsrs	r3, r3, #20
 800794a:	051b      	lsls	r3, r3, #20
 800794c:	429d      	cmp	r5, r3
 800794e:	d1bb      	bne.n	80078c8 <_strtod_l+0x9f0>
 8007950:	4630      	mov	r0, r6
 8007952:	4639      	mov	r1, r7
 8007954:	f7f9 f9d0 	bl	8000cf8 <__aeabi_d2lz>
 8007958:	f7f8 fe40 	bl	80005dc <__aeabi_l2d>
 800795c:	4602      	mov	r2, r0
 800795e:	460b      	mov	r3, r1
 8007960:	4630      	mov	r0, r6
 8007962:	4639      	mov	r1, r7
 8007964:	f7f8 fcb0 	bl	80002c8 <__aeabi_dsub>
 8007968:	460b      	mov	r3, r1
 800796a:	4602      	mov	r2, r0
 800796c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007970:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007974:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007976:	ea46 060a 	orr.w	r6, r6, sl
 800797a:	431e      	orrs	r6, r3
 800797c:	d06f      	beq.n	8007a5e <_strtod_l+0xb86>
 800797e:	a30e      	add	r3, pc, #56	@ (adr r3, 80079b8 <_strtod_l+0xae0>)
 8007980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007984:	f7f9 f8ca 	bl	8000b1c <__aeabi_dcmplt>
 8007988:	2800      	cmp	r0, #0
 800798a:	f47f accf 	bne.w	800732c <_strtod_l+0x454>
 800798e:	a30c      	add	r3, pc, #48	@ (adr r3, 80079c0 <_strtod_l+0xae8>)
 8007990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007994:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007998:	f7f9 f8de 	bl	8000b58 <__aeabi_dcmpgt>
 800799c:	2800      	cmp	r0, #0
 800799e:	d093      	beq.n	80078c8 <_strtod_l+0x9f0>
 80079a0:	e4c4      	b.n	800732c <_strtod_l+0x454>
 80079a2:	bf00      	nop
 80079a4:	f3af 8000 	nop.w
 80079a8:	00000000 	.word	0x00000000
 80079ac:	bff00000 	.word	0xbff00000
 80079b0:	00000000 	.word	0x00000000
 80079b4:	3ff00000 	.word	0x3ff00000
 80079b8:	94a03595 	.word	0x94a03595
 80079bc:	3fdfffff 	.word	0x3fdfffff
 80079c0:	35afe535 	.word	0x35afe535
 80079c4:	3fe00000 	.word	0x3fe00000
 80079c8:	000fffff 	.word	0x000fffff
 80079cc:	7ff00000 	.word	0x7ff00000
 80079d0:	7fefffff 	.word	0x7fefffff
 80079d4:	3ff00000 	.word	0x3ff00000
 80079d8:	3fe00000 	.word	0x3fe00000
 80079dc:	7fe00000 	.word	0x7fe00000
 80079e0:	7c9fffff 	.word	0x7c9fffff
 80079e4:	9b08      	ldr	r3, [sp, #32]
 80079e6:	b323      	cbz	r3, 8007a32 <_strtod_l+0xb5a>
 80079e8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80079ec:	d821      	bhi.n	8007a32 <_strtod_l+0xb5a>
 80079ee:	a328      	add	r3, pc, #160	@ (adr r3, 8007a90 <_strtod_l+0xbb8>)
 80079f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f4:	4630      	mov	r0, r6
 80079f6:	4639      	mov	r1, r7
 80079f8:	f7f9 f89a 	bl	8000b30 <__aeabi_dcmple>
 80079fc:	b1a0      	cbz	r0, 8007a28 <_strtod_l+0xb50>
 80079fe:	4639      	mov	r1, r7
 8007a00:	4630      	mov	r0, r6
 8007a02:	f7f9 f8f1 	bl	8000be8 <__aeabi_d2uiz>
 8007a06:	2801      	cmp	r0, #1
 8007a08:	bf38      	it	cc
 8007a0a:	2001      	movcc	r0, #1
 8007a0c:	f7f8 fd9a 	bl	8000544 <__aeabi_ui2d>
 8007a10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a12:	4606      	mov	r6, r0
 8007a14:	460f      	mov	r7, r1
 8007a16:	b9fb      	cbnz	r3, 8007a58 <_strtod_l+0xb80>
 8007a18:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007a1c:	9014      	str	r0, [sp, #80]	@ 0x50
 8007a1e:	9315      	str	r3, [sp, #84]	@ 0x54
 8007a20:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007a24:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007a28:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007a2a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007a2e:	1b5b      	subs	r3, r3, r5
 8007a30:	9311      	str	r3, [sp, #68]	@ 0x44
 8007a32:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007a36:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007a3a:	f002 ff61 	bl	800a900 <__ulp>
 8007a3e:	4650      	mov	r0, sl
 8007a40:	ec53 2b10 	vmov	r2, r3, d0
 8007a44:	4659      	mov	r1, fp
 8007a46:	f7f8 fdf7 	bl	8000638 <__aeabi_dmul>
 8007a4a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007a4e:	f7f8 fc3d 	bl	80002cc <__adddf3>
 8007a52:	4682      	mov	sl, r0
 8007a54:	468b      	mov	fp, r1
 8007a56:	e770      	b.n	800793a <_strtod_l+0xa62>
 8007a58:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007a5c:	e7e0      	b.n	8007a20 <_strtod_l+0xb48>
 8007a5e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007a98 <_strtod_l+0xbc0>)
 8007a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a64:	f7f9 f85a 	bl	8000b1c <__aeabi_dcmplt>
 8007a68:	e798      	b.n	800799c <_strtod_l+0xac4>
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a6e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007a70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a72:	6013      	str	r3, [r2, #0]
 8007a74:	f7ff ba6d 	b.w	8006f52 <_strtod_l+0x7a>
 8007a78:	2a65      	cmp	r2, #101	@ 0x65
 8007a7a:	f43f ab66 	beq.w	800714a <_strtod_l+0x272>
 8007a7e:	2a45      	cmp	r2, #69	@ 0x45
 8007a80:	f43f ab63 	beq.w	800714a <_strtod_l+0x272>
 8007a84:	2301      	movs	r3, #1
 8007a86:	f7ff bb9e 	b.w	80071c6 <_strtod_l+0x2ee>
 8007a8a:	bf00      	nop
 8007a8c:	f3af 8000 	nop.w
 8007a90:	ffc00000 	.word	0xffc00000
 8007a94:	41dfffff 	.word	0x41dfffff
 8007a98:	94a03595 	.word	0x94a03595
 8007a9c:	3fcfffff 	.word	0x3fcfffff

08007aa0 <_strtod_r>:
 8007aa0:	4b01      	ldr	r3, [pc, #4]	@ (8007aa8 <_strtod_r+0x8>)
 8007aa2:	f7ff ba19 	b.w	8006ed8 <_strtod_l>
 8007aa6:	bf00      	nop
 8007aa8:	2000002c 	.word	0x2000002c

08007aac <strtof>:
 8007aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab0:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 8007b70 <strtof+0xc4>
 8007ab4:	4b29      	ldr	r3, [pc, #164]	@ (8007b5c <strtof+0xb0>)
 8007ab6:	460a      	mov	r2, r1
 8007ab8:	ed2d 8b02 	vpush	{d8}
 8007abc:	4601      	mov	r1, r0
 8007abe:	f8d8 0000 	ldr.w	r0, [r8]
 8007ac2:	f7ff fa09 	bl	8006ed8 <_strtod_l>
 8007ac6:	ec55 4b10 	vmov	r4, r5, d0
 8007aca:	4622      	mov	r2, r4
 8007acc:	462b      	mov	r3, r5
 8007ace:	4620      	mov	r0, r4
 8007ad0:	4629      	mov	r1, r5
 8007ad2:	f7f9 f84b 	bl	8000b6c <__aeabi_dcmpun>
 8007ad6:	b190      	cbz	r0, 8007afe <strtof+0x52>
 8007ad8:	2d00      	cmp	r5, #0
 8007ada:	4821      	ldr	r0, [pc, #132]	@ (8007b60 <strtof+0xb4>)
 8007adc:	da09      	bge.n	8007af2 <strtof+0x46>
 8007ade:	f001 f8df 	bl	8008ca0 <nanf>
 8007ae2:	eeb1 8a40 	vneg.f32	s16, s0
 8007ae6:	eeb0 0a48 	vmov.f32	s0, s16
 8007aea:	ecbd 8b02 	vpop	{d8}
 8007aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007af2:	ecbd 8b02 	vpop	{d8}
 8007af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007afa:	f001 b8d1 	b.w	8008ca0 <nanf>
 8007afe:	4620      	mov	r0, r4
 8007b00:	4629      	mov	r1, r5
 8007b02:	f7f9 f891 	bl	8000c28 <__aeabi_d2f>
 8007b06:	ee08 0a10 	vmov	s16, r0
 8007b0a:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8007b64 <strtof+0xb8>
 8007b0e:	eeb0 7ac8 	vabs.f32	s14, s16
 8007b12:	eeb4 7a67 	vcmp.f32	s14, s15
 8007b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b1a:	dd11      	ble.n	8007b40 <strtof+0x94>
 8007b1c:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8007b20:	4b11      	ldr	r3, [pc, #68]	@ (8007b68 <strtof+0xbc>)
 8007b22:	f04f 32ff 	mov.w	r2, #4294967295
 8007b26:	4620      	mov	r0, r4
 8007b28:	4639      	mov	r1, r7
 8007b2a:	f7f9 f81f 	bl	8000b6c <__aeabi_dcmpun>
 8007b2e:	b980      	cbnz	r0, 8007b52 <strtof+0xa6>
 8007b30:	4b0d      	ldr	r3, [pc, #52]	@ (8007b68 <strtof+0xbc>)
 8007b32:	f04f 32ff 	mov.w	r2, #4294967295
 8007b36:	4620      	mov	r0, r4
 8007b38:	4639      	mov	r1, r7
 8007b3a:	f7f8 fff9 	bl	8000b30 <__aeabi_dcmple>
 8007b3e:	b940      	cbnz	r0, 8007b52 <strtof+0xa6>
 8007b40:	ee18 3a10 	vmov	r3, s16
 8007b44:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8007b48:	d1cd      	bne.n	8007ae6 <strtof+0x3a>
 8007b4a:	4b08      	ldr	r3, [pc, #32]	@ (8007b6c <strtof+0xc0>)
 8007b4c:	402b      	ands	r3, r5
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d0c9      	beq.n	8007ae6 <strtof+0x3a>
 8007b52:	f8d8 3000 	ldr.w	r3, [r8]
 8007b56:	2222      	movs	r2, #34	@ 0x22
 8007b58:	601a      	str	r2, [r3, #0]
 8007b5a:	e7c4      	b.n	8007ae6 <strtof+0x3a>
 8007b5c:	2000002c 	.word	0x2000002c
 8007b60:	0800bcf5 	.word	0x0800bcf5
 8007b64:	7f7fffff 	.word	0x7f7fffff
 8007b68:	7fefffff 	.word	0x7fefffff
 8007b6c:	7ff00000 	.word	0x7ff00000
 8007b70:	20000198 	.word	0x20000198

08007b74 <__cvt>:
 8007b74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b78:	ec57 6b10 	vmov	r6, r7, d0
 8007b7c:	2f00      	cmp	r7, #0
 8007b7e:	460c      	mov	r4, r1
 8007b80:	4619      	mov	r1, r3
 8007b82:	463b      	mov	r3, r7
 8007b84:	bfbb      	ittet	lt
 8007b86:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007b8a:	461f      	movlt	r7, r3
 8007b8c:	2300      	movge	r3, #0
 8007b8e:	232d      	movlt	r3, #45	@ 0x2d
 8007b90:	700b      	strb	r3, [r1, #0]
 8007b92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b94:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007b98:	4691      	mov	r9, r2
 8007b9a:	f023 0820 	bic.w	r8, r3, #32
 8007b9e:	bfbc      	itt	lt
 8007ba0:	4632      	movlt	r2, r6
 8007ba2:	4616      	movlt	r6, r2
 8007ba4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007ba8:	d005      	beq.n	8007bb6 <__cvt+0x42>
 8007baa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007bae:	d100      	bne.n	8007bb2 <__cvt+0x3e>
 8007bb0:	3401      	adds	r4, #1
 8007bb2:	2102      	movs	r1, #2
 8007bb4:	e000      	b.n	8007bb8 <__cvt+0x44>
 8007bb6:	2103      	movs	r1, #3
 8007bb8:	ab03      	add	r3, sp, #12
 8007bba:	9301      	str	r3, [sp, #4]
 8007bbc:	ab02      	add	r3, sp, #8
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	ec47 6b10 	vmov	d0, r6, r7
 8007bc4:	4653      	mov	r3, sl
 8007bc6:	4622      	mov	r2, r4
 8007bc8:	f001 f916 	bl	8008df8 <_dtoa_r>
 8007bcc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007bd0:	4605      	mov	r5, r0
 8007bd2:	d119      	bne.n	8007c08 <__cvt+0x94>
 8007bd4:	f019 0f01 	tst.w	r9, #1
 8007bd8:	d00e      	beq.n	8007bf8 <__cvt+0x84>
 8007bda:	eb00 0904 	add.w	r9, r0, r4
 8007bde:	2200      	movs	r2, #0
 8007be0:	2300      	movs	r3, #0
 8007be2:	4630      	mov	r0, r6
 8007be4:	4639      	mov	r1, r7
 8007be6:	f7f8 ff8f 	bl	8000b08 <__aeabi_dcmpeq>
 8007bea:	b108      	cbz	r0, 8007bf0 <__cvt+0x7c>
 8007bec:	f8cd 900c 	str.w	r9, [sp, #12]
 8007bf0:	2230      	movs	r2, #48	@ 0x30
 8007bf2:	9b03      	ldr	r3, [sp, #12]
 8007bf4:	454b      	cmp	r3, r9
 8007bf6:	d31e      	bcc.n	8007c36 <__cvt+0xc2>
 8007bf8:	9b03      	ldr	r3, [sp, #12]
 8007bfa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007bfc:	1b5b      	subs	r3, r3, r5
 8007bfe:	4628      	mov	r0, r5
 8007c00:	6013      	str	r3, [r2, #0]
 8007c02:	b004      	add	sp, #16
 8007c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c0c:	eb00 0904 	add.w	r9, r0, r4
 8007c10:	d1e5      	bne.n	8007bde <__cvt+0x6a>
 8007c12:	7803      	ldrb	r3, [r0, #0]
 8007c14:	2b30      	cmp	r3, #48	@ 0x30
 8007c16:	d10a      	bne.n	8007c2e <__cvt+0xba>
 8007c18:	2200      	movs	r2, #0
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	4639      	mov	r1, r7
 8007c20:	f7f8 ff72 	bl	8000b08 <__aeabi_dcmpeq>
 8007c24:	b918      	cbnz	r0, 8007c2e <__cvt+0xba>
 8007c26:	f1c4 0401 	rsb	r4, r4, #1
 8007c2a:	f8ca 4000 	str.w	r4, [sl]
 8007c2e:	f8da 3000 	ldr.w	r3, [sl]
 8007c32:	4499      	add	r9, r3
 8007c34:	e7d3      	b.n	8007bde <__cvt+0x6a>
 8007c36:	1c59      	adds	r1, r3, #1
 8007c38:	9103      	str	r1, [sp, #12]
 8007c3a:	701a      	strb	r2, [r3, #0]
 8007c3c:	e7d9      	b.n	8007bf2 <__cvt+0x7e>

08007c3e <__exponent>:
 8007c3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c40:	2900      	cmp	r1, #0
 8007c42:	bfba      	itte	lt
 8007c44:	4249      	neglt	r1, r1
 8007c46:	232d      	movlt	r3, #45	@ 0x2d
 8007c48:	232b      	movge	r3, #43	@ 0x2b
 8007c4a:	2909      	cmp	r1, #9
 8007c4c:	7002      	strb	r2, [r0, #0]
 8007c4e:	7043      	strb	r3, [r0, #1]
 8007c50:	dd29      	ble.n	8007ca6 <__exponent+0x68>
 8007c52:	f10d 0307 	add.w	r3, sp, #7
 8007c56:	461d      	mov	r5, r3
 8007c58:	270a      	movs	r7, #10
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007c60:	fb07 1416 	mls	r4, r7, r6, r1
 8007c64:	3430      	adds	r4, #48	@ 0x30
 8007c66:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007c6a:	460c      	mov	r4, r1
 8007c6c:	2c63      	cmp	r4, #99	@ 0x63
 8007c6e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007c72:	4631      	mov	r1, r6
 8007c74:	dcf1      	bgt.n	8007c5a <__exponent+0x1c>
 8007c76:	3130      	adds	r1, #48	@ 0x30
 8007c78:	1e94      	subs	r4, r2, #2
 8007c7a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007c7e:	1c41      	adds	r1, r0, #1
 8007c80:	4623      	mov	r3, r4
 8007c82:	42ab      	cmp	r3, r5
 8007c84:	d30a      	bcc.n	8007c9c <__exponent+0x5e>
 8007c86:	f10d 0309 	add.w	r3, sp, #9
 8007c8a:	1a9b      	subs	r3, r3, r2
 8007c8c:	42ac      	cmp	r4, r5
 8007c8e:	bf88      	it	hi
 8007c90:	2300      	movhi	r3, #0
 8007c92:	3302      	adds	r3, #2
 8007c94:	4403      	add	r3, r0
 8007c96:	1a18      	subs	r0, r3, r0
 8007c98:	b003      	add	sp, #12
 8007c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c9c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007ca0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007ca4:	e7ed      	b.n	8007c82 <__exponent+0x44>
 8007ca6:	2330      	movs	r3, #48	@ 0x30
 8007ca8:	3130      	adds	r1, #48	@ 0x30
 8007caa:	7083      	strb	r3, [r0, #2]
 8007cac:	70c1      	strb	r1, [r0, #3]
 8007cae:	1d03      	adds	r3, r0, #4
 8007cb0:	e7f1      	b.n	8007c96 <__exponent+0x58>
	...

08007cb4 <_printf_float>:
 8007cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb8:	b08d      	sub	sp, #52	@ 0x34
 8007cba:	460c      	mov	r4, r1
 8007cbc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007cc0:	4616      	mov	r6, r2
 8007cc2:	461f      	mov	r7, r3
 8007cc4:	4605      	mov	r5, r0
 8007cc6:	f000 ff5d 	bl	8008b84 <_localeconv_r>
 8007cca:	6803      	ldr	r3, [r0, #0]
 8007ccc:	9304      	str	r3, [sp, #16]
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f7f8 faee 	bl	80002b0 <strlen>
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cd8:	f8d8 3000 	ldr.w	r3, [r8]
 8007cdc:	9005      	str	r0, [sp, #20]
 8007cde:	3307      	adds	r3, #7
 8007ce0:	f023 0307 	bic.w	r3, r3, #7
 8007ce4:	f103 0208 	add.w	r2, r3, #8
 8007ce8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007cec:	f8d4 b000 	ldr.w	fp, [r4]
 8007cf0:	f8c8 2000 	str.w	r2, [r8]
 8007cf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007cf8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007cfc:	9307      	str	r3, [sp, #28]
 8007cfe:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d02:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007d06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d0a:	4b9c      	ldr	r3, [pc, #624]	@ (8007f7c <_printf_float+0x2c8>)
 8007d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d10:	f7f8 ff2c 	bl	8000b6c <__aeabi_dcmpun>
 8007d14:	bb70      	cbnz	r0, 8007d74 <_printf_float+0xc0>
 8007d16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d1a:	4b98      	ldr	r3, [pc, #608]	@ (8007f7c <_printf_float+0x2c8>)
 8007d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d20:	f7f8 ff06 	bl	8000b30 <__aeabi_dcmple>
 8007d24:	bb30      	cbnz	r0, 8007d74 <_printf_float+0xc0>
 8007d26:	2200      	movs	r2, #0
 8007d28:	2300      	movs	r3, #0
 8007d2a:	4640      	mov	r0, r8
 8007d2c:	4649      	mov	r1, r9
 8007d2e:	f7f8 fef5 	bl	8000b1c <__aeabi_dcmplt>
 8007d32:	b110      	cbz	r0, 8007d3a <_printf_float+0x86>
 8007d34:	232d      	movs	r3, #45	@ 0x2d
 8007d36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d3a:	4a91      	ldr	r2, [pc, #580]	@ (8007f80 <_printf_float+0x2cc>)
 8007d3c:	4b91      	ldr	r3, [pc, #580]	@ (8007f84 <_printf_float+0x2d0>)
 8007d3e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007d42:	bf94      	ite	ls
 8007d44:	4690      	movls	r8, r2
 8007d46:	4698      	movhi	r8, r3
 8007d48:	2303      	movs	r3, #3
 8007d4a:	6123      	str	r3, [r4, #16]
 8007d4c:	f02b 0304 	bic.w	r3, fp, #4
 8007d50:	6023      	str	r3, [r4, #0]
 8007d52:	f04f 0900 	mov.w	r9, #0
 8007d56:	9700      	str	r7, [sp, #0]
 8007d58:	4633      	mov	r3, r6
 8007d5a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007d5c:	4621      	mov	r1, r4
 8007d5e:	4628      	mov	r0, r5
 8007d60:	f000 f9d2 	bl	8008108 <_printf_common>
 8007d64:	3001      	adds	r0, #1
 8007d66:	f040 808d 	bne.w	8007e84 <_printf_float+0x1d0>
 8007d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d6e:	b00d      	add	sp, #52	@ 0x34
 8007d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d74:	4642      	mov	r2, r8
 8007d76:	464b      	mov	r3, r9
 8007d78:	4640      	mov	r0, r8
 8007d7a:	4649      	mov	r1, r9
 8007d7c:	f7f8 fef6 	bl	8000b6c <__aeabi_dcmpun>
 8007d80:	b140      	cbz	r0, 8007d94 <_printf_float+0xe0>
 8007d82:	464b      	mov	r3, r9
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	bfbc      	itt	lt
 8007d88:	232d      	movlt	r3, #45	@ 0x2d
 8007d8a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007d8e:	4a7e      	ldr	r2, [pc, #504]	@ (8007f88 <_printf_float+0x2d4>)
 8007d90:	4b7e      	ldr	r3, [pc, #504]	@ (8007f8c <_printf_float+0x2d8>)
 8007d92:	e7d4      	b.n	8007d3e <_printf_float+0x8a>
 8007d94:	6863      	ldr	r3, [r4, #4]
 8007d96:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007d9a:	9206      	str	r2, [sp, #24]
 8007d9c:	1c5a      	adds	r2, r3, #1
 8007d9e:	d13b      	bne.n	8007e18 <_printf_float+0x164>
 8007da0:	2306      	movs	r3, #6
 8007da2:	6063      	str	r3, [r4, #4]
 8007da4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007da8:	2300      	movs	r3, #0
 8007daa:	6022      	str	r2, [r4, #0]
 8007dac:	9303      	str	r3, [sp, #12]
 8007dae:	ab0a      	add	r3, sp, #40	@ 0x28
 8007db0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007db4:	ab09      	add	r3, sp, #36	@ 0x24
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	6861      	ldr	r1, [r4, #4]
 8007dba:	ec49 8b10 	vmov	d0, r8, r9
 8007dbe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	f7ff fed6 	bl	8007b74 <__cvt>
 8007dc8:	9b06      	ldr	r3, [sp, #24]
 8007dca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007dcc:	2b47      	cmp	r3, #71	@ 0x47
 8007dce:	4680      	mov	r8, r0
 8007dd0:	d129      	bne.n	8007e26 <_printf_float+0x172>
 8007dd2:	1cc8      	adds	r0, r1, #3
 8007dd4:	db02      	blt.n	8007ddc <_printf_float+0x128>
 8007dd6:	6863      	ldr	r3, [r4, #4]
 8007dd8:	4299      	cmp	r1, r3
 8007dda:	dd41      	ble.n	8007e60 <_printf_float+0x1ac>
 8007ddc:	f1aa 0a02 	sub.w	sl, sl, #2
 8007de0:	fa5f fa8a 	uxtb.w	sl, sl
 8007de4:	3901      	subs	r1, #1
 8007de6:	4652      	mov	r2, sl
 8007de8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007dec:	9109      	str	r1, [sp, #36]	@ 0x24
 8007dee:	f7ff ff26 	bl	8007c3e <__exponent>
 8007df2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007df4:	1813      	adds	r3, r2, r0
 8007df6:	2a01      	cmp	r2, #1
 8007df8:	4681      	mov	r9, r0
 8007dfa:	6123      	str	r3, [r4, #16]
 8007dfc:	dc02      	bgt.n	8007e04 <_printf_float+0x150>
 8007dfe:	6822      	ldr	r2, [r4, #0]
 8007e00:	07d2      	lsls	r2, r2, #31
 8007e02:	d501      	bpl.n	8007e08 <_printf_float+0x154>
 8007e04:	3301      	adds	r3, #1
 8007e06:	6123      	str	r3, [r4, #16]
 8007e08:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d0a2      	beq.n	8007d56 <_printf_float+0xa2>
 8007e10:	232d      	movs	r3, #45	@ 0x2d
 8007e12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e16:	e79e      	b.n	8007d56 <_printf_float+0xa2>
 8007e18:	9a06      	ldr	r2, [sp, #24]
 8007e1a:	2a47      	cmp	r2, #71	@ 0x47
 8007e1c:	d1c2      	bne.n	8007da4 <_printf_float+0xf0>
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1c0      	bne.n	8007da4 <_printf_float+0xf0>
 8007e22:	2301      	movs	r3, #1
 8007e24:	e7bd      	b.n	8007da2 <_printf_float+0xee>
 8007e26:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007e2a:	d9db      	bls.n	8007de4 <_printf_float+0x130>
 8007e2c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007e30:	d118      	bne.n	8007e64 <_printf_float+0x1b0>
 8007e32:	2900      	cmp	r1, #0
 8007e34:	6863      	ldr	r3, [r4, #4]
 8007e36:	dd0b      	ble.n	8007e50 <_printf_float+0x19c>
 8007e38:	6121      	str	r1, [r4, #16]
 8007e3a:	b913      	cbnz	r3, 8007e42 <_printf_float+0x18e>
 8007e3c:	6822      	ldr	r2, [r4, #0]
 8007e3e:	07d0      	lsls	r0, r2, #31
 8007e40:	d502      	bpl.n	8007e48 <_printf_float+0x194>
 8007e42:	3301      	adds	r3, #1
 8007e44:	440b      	add	r3, r1
 8007e46:	6123      	str	r3, [r4, #16]
 8007e48:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007e4a:	f04f 0900 	mov.w	r9, #0
 8007e4e:	e7db      	b.n	8007e08 <_printf_float+0x154>
 8007e50:	b913      	cbnz	r3, 8007e58 <_printf_float+0x1a4>
 8007e52:	6822      	ldr	r2, [r4, #0]
 8007e54:	07d2      	lsls	r2, r2, #31
 8007e56:	d501      	bpl.n	8007e5c <_printf_float+0x1a8>
 8007e58:	3302      	adds	r3, #2
 8007e5a:	e7f4      	b.n	8007e46 <_printf_float+0x192>
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e7f2      	b.n	8007e46 <_printf_float+0x192>
 8007e60:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007e64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e66:	4299      	cmp	r1, r3
 8007e68:	db05      	blt.n	8007e76 <_printf_float+0x1c2>
 8007e6a:	6823      	ldr	r3, [r4, #0]
 8007e6c:	6121      	str	r1, [r4, #16]
 8007e6e:	07d8      	lsls	r0, r3, #31
 8007e70:	d5ea      	bpl.n	8007e48 <_printf_float+0x194>
 8007e72:	1c4b      	adds	r3, r1, #1
 8007e74:	e7e7      	b.n	8007e46 <_printf_float+0x192>
 8007e76:	2900      	cmp	r1, #0
 8007e78:	bfd4      	ite	le
 8007e7a:	f1c1 0202 	rsble	r2, r1, #2
 8007e7e:	2201      	movgt	r2, #1
 8007e80:	4413      	add	r3, r2
 8007e82:	e7e0      	b.n	8007e46 <_printf_float+0x192>
 8007e84:	6823      	ldr	r3, [r4, #0]
 8007e86:	055a      	lsls	r2, r3, #21
 8007e88:	d407      	bmi.n	8007e9a <_printf_float+0x1e6>
 8007e8a:	6923      	ldr	r3, [r4, #16]
 8007e8c:	4642      	mov	r2, r8
 8007e8e:	4631      	mov	r1, r6
 8007e90:	4628      	mov	r0, r5
 8007e92:	47b8      	blx	r7
 8007e94:	3001      	adds	r0, #1
 8007e96:	d12b      	bne.n	8007ef0 <_printf_float+0x23c>
 8007e98:	e767      	b.n	8007d6a <_printf_float+0xb6>
 8007e9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007e9e:	f240 80dd 	bls.w	800805c <_printf_float+0x3a8>
 8007ea2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	f7f8 fe2d 	bl	8000b08 <__aeabi_dcmpeq>
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	d033      	beq.n	8007f1a <_printf_float+0x266>
 8007eb2:	4a37      	ldr	r2, [pc, #220]	@ (8007f90 <_printf_float+0x2dc>)
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	4631      	mov	r1, r6
 8007eb8:	4628      	mov	r0, r5
 8007eba:	47b8      	blx	r7
 8007ebc:	3001      	adds	r0, #1
 8007ebe:	f43f af54 	beq.w	8007d6a <_printf_float+0xb6>
 8007ec2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007ec6:	4543      	cmp	r3, r8
 8007ec8:	db02      	blt.n	8007ed0 <_printf_float+0x21c>
 8007eca:	6823      	ldr	r3, [r4, #0]
 8007ecc:	07d8      	lsls	r0, r3, #31
 8007ece:	d50f      	bpl.n	8007ef0 <_printf_float+0x23c>
 8007ed0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ed4:	4631      	mov	r1, r6
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	47b8      	blx	r7
 8007eda:	3001      	adds	r0, #1
 8007edc:	f43f af45 	beq.w	8007d6a <_printf_float+0xb6>
 8007ee0:	f04f 0900 	mov.w	r9, #0
 8007ee4:	f108 38ff 	add.w	r8, r8, #4294967295
 8007ee8:	f104 0a1a 	add.w	sl, r4, #26
 8007eec:	45c8      	cmp	r8, r9
 8007eee:	dc09      	bgt.n	8007f04 <_printf_float+0x250>
 8007ef0:	6823      	ldr	r3, [r4, #0]
 8007ef2:	079b      	lsls	r3, r3, #30
 8007ef4:	f100 8103 	bmi.w	80080fe <_printf_float+0x44a>
 8007ef8:	68e0      	ldr	r0, [r4, #12]
 8007efa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007efc:	4298      	cmp	r0, r3
 8007efe:	bfb8      	it	lt
 8007f00:	4618      	movlt	r0, r3
 8007f02:	e734      	b.n	8007d6e <_printf_float+0xba>
 8007f04:	2301      	movs	r3, #1
 8007f06:	4652      	mov	r2, sl
 8007f08:	4631      	mov	r1, r6
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	47b8      	blx	r7
 8007f0e:	3001      	adds	r0, #1
 8007f10:	f43f af2b 	beq.w	8007d6a <_printf_float+0xb6>
 8007f14:	f109 0901 	add.w	r9, r9, #1
 8007f18:	e7e8      	b.n	8007eec <_printf_float+0x238>
 8007f1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	dc39      	bgt.n	8007f94 <_printf_float+0x2e0>
 8007f20:	4a1b      	ldr	r2, [pc, #108]	@ (8007f90 <_printf_float+0x2dc>)
 8007f22:	2301      	movs	r3, #1
 8007f24:	4631      	mov	r1, r6
 8007f26:	4628      	mov	r0, r5
 8007f28:	47b8      	blx	r7
 8007f2a:	3001      	adds	r0, #1
 8007f2c:	f43f af1d 	beq.w	8007d6a <_printf_float+0xb6>
 8007f30:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007f34:	ea59 0303 	orrs.w	r3, r9, r3
 8007f38:	d102      	bne.n	8007f40 <_printf_float+0x28c>
 8007f3a:	6823      	ldr	r3, [r4, #0]
 8007f3c:	07d9      	lsls	r1, r3, #31
 8007f3e:	d5d7      	bpl.n	8007ef0 <_printf_float+0x23c>
 8007f40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f44:	4631      	mov	r1, r6
 8007f46:	4628      	mov	r0, r5
 8007f48:	47b8      	blx	r7
 8007f4a:	3001      	adds	r0, #1
 8007f4c:	f43f af0d 	beq.w	8007d6a <_printf_float+0xb6>
 8007f50:	f04f 0a00 	mov.w	sl, #0
 8007f54:	f104 0b1a 	add.w	fp, r4, #26
 8007f58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f5a:	425b      	negs	r3, r3
 8007f5c:	4553      	cmp	r3, sl
 8007f5e:	dc01      	bgt.n	8007f64 <_printf_float+0x2b0>
 8007f60:	464b      	mov	r3, r9
 8007f62:	e793      	b.n	8007e8c <_printf_float+0x1d8>
 8007f64:	2301      	movs	r3, #1
 8007f66:	465a      	mov	r2, fp
 8007f68:	4631      	mov	r1, r6
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	47b8      	blx	r7
 8007f6e:	3001      	adds	r0, #1
 8007f70:	f43f aefb 	beq.w	8007d6a <_printf_float+0xb6>
 8007f74:	f10a 0a01 	add.w	sl, sl, #1
 8007f78:	e7ee      	b.n	8007f58 <_printf_float+0x2a4>
 8007f7a:	bf00      	nop
 8007f7c:	7fefffff 	.word	0x7fefffff
 8007f80:	0800bc08 	.word	0x0800bc08
 8007f84:	0800bc0c 	.word	0x0800bc0c
 8007f88:	0800bc10 	.word	0x0800bc10
 8007f8c:	0800bc14 	.word	0x0800bc14
 8007f90:	0800bc18 	.word	0x0800bc18
 8007f94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007f96:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007f9a:	4553      	cmp	r3, sl
 8007f9c:	bfa8      	it	ge
 8007f9e:	4653      	movge	r3, sl
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	4699      	mov	r9, r3
 8007fa4:	dc36      	bgt.n	8008014 <_printf_float+0x360>
 8007fa6:	f04f 0b00 	mov.w	fp, #0
 8007faa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fae:	f104 021a 	add.w	r2, r4, #26
 8007fb2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007fb4:	9306      	str	r3, [sp, #24]
 8007fb6:	eba3 0309 	sub.w	r3, r3, r9
 8007fba:	455b      	cmp	r3, fp
 8007fbc:	dc31      	bgt.n	8008022 <_printf_float+0x36e>
 8007fbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fc0:	459a      	cmp	sl, r3
 8007fc2:	dc3a      	bgt.n	800803a <_printf_float+0x386>
 8007fc4:	6823      	ldr	r3, [r4, #0]
 8007fc6:	07da      	lsls	r2, r3, #31
 8007fc8:	d437      	bmi.n	800803a <_printf_float+0x386>
 8007fca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fcc:	ebaa 0903 	sub.w	r9, sl, r3
 8007fd0:	9b06      	ldr	r3, [sp, #24]
 8007fd2:	ebaa 0303 	sub.w	r3, sl, r3
 8007fd6:	4599      	cmp	r9, r3
 8007fd8:	bfa8      	it	ge
 8007fda:	4699      	movge	r9, r3
 8007fdc:	f1b9 0f00 	cmp.w	r9, #0
 8007fe0:	dc33      	bgt.n	800804a <_printf_float+0x396>
 8007fe2:	f04f 0800 	mov.w	r8, #0
 8007fe6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fea:	f104 0b1a 	add.w	fp, r4, #26
 8007fee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ff0:	ebaa 0303 	sub.w	r3, sl, r3
 8007ff4:	eba3 0309 	sub.w	r3, r3, r9
 8007ff8:	4543      	cmp	r3, r8
 8007ffa:	f77f af79 	ble.w	8007ef0 <_printf_float+0x23c>
 8007ffe:	2301      	movs	r3, #1
 8008000:	465a      	mov	r2, fp
 8008002:	4631      	mov	r1, r6
 8008004:	4628      	mov	r0, r5
 8008006:	47b8      	blx	r7
 8008008:	3001      	adds	r0, #1
 800800a:	f43f aeae 	beq.w	8007d6a <_printf_float+0xb6>
 800800e:	f108 0801 	add.w	r8, r8, #1
 8008012:	e7ec      	b.n	8007fee <_printf_float+0x33a>
 8008014:	4642      	mov	r2, r8
 8008016:	4631      	mov	r1, r6
 8008018:	4628      	mov	r0, r5
 800801a:	47b8      	blx	r7
 800801c:	3001      	adds	r0, #1
 800801e:	d1c2      	bne.n	8007fa6 <_printf_float+0x2f2>
 8008020:	e6a3      	b.n	8007d6a <_printf_float+0xb6>
 8008022:	2301      	movs	r3, #1
 8008024:	4631      	mov	r1, r6
 8008026:	4628      	mov	r0, r5
 8008028:	9206      	str	r2, [sp, #24]
 800802a:	47b8      	blx	r7
 800802c:	3001      	adds	r0, #1
 800802e:	f43f ae9c 	beq.w	8007d6a <_printf_float+0xb6>
 8008032:	9a06      	ldr	r2, [sp, #24]
 8008034:	f10b 0b01 	add.w	fp, fp, #1
 8008038:	e7bb      	b.n	8007fb2 <_printf_float+0x2fe>
 800803a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800803e:	4631      	mov	r1, r6
 8008040:	4628      	mov	r0, r5
 8008042:	47b8      	blx	r7
 8008044:	3001      	adds	r0, #1
 8008046:	d1c0      	bne.n	8007fca <_printf_float+0x316>
 8008048:	e68f      	b.n	8007d6a <_printf_float+0xb6>
 800804a:	9a06      	ldr	r2, [sp, #24]
 800804c:	464b      	mov	r3, r9
 800804e:	4442      	add	r2, r8
 8008050:	4631      	mov	r1, r6
 8008052:	4628      	mov	r0, r5
 8008054:	47b8      	blx	r7
 8008056:	3001      	adds	r0, #1
 8008058:	d1c3      	bne.n	8007fe2 <_printf_float+0x32e>
 800805a:	e686      	b.n	8007d6a <_printf_float+0xb6>
 800805c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008060:	f1ba 0f01 	cmp.w	sl, #1
 8008064:	dc01      	bgt.n	800806a <_printf_float+0x3b6>
 8008066:	07db      	lsls	r3, r3, #31
 8008068:	d536      	bpl.n	80080d8 <_printf_float+0x424>
 800806a:	2301      	movs	r3, #1
 800806c:	4642      	mov	r2, r8
 800806e:	4631      	mov	r1, r6
 8008070:	4628      	mov	r0, r5
 8008072:	47b8      	blx	r7
 8008074:	3001      	adds	r0, #1
 8008076:	f43f ae78 	beq.w	8007d6a <_printf_float+0xb6>
 800807a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800807e:	4631      	mov	r1, r6
 8008080:	4628      	mov	r0, r5
 8008082:	47b8      	blx	r7
 8008084:	3001      	adds	r0, #1
 8008086:	f43f ae70 	beq.w	8007d6a <_printf_float+0xb6>
 800808a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800808e:	2200      	movs	r2, #0
 8008090:	2300      	movs	r3, #0
 8008092:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008096:	f7f8 fd37 	bl	8000b08 <__aeabi_dcmpeq>
 800809a:	b9c0      	cbnz	r0, 80080ce <_printf_float+0x41a>
 800809c:	4653      	mov	r3, sl
 800809e:	f108 0201 	add.w	r2, r8, #1
 80080a2:	4631      	mov	r1, r6
 80080a4:	4628      	mov	r0, r5
 80080a6:	47b8      	blx	r7
 80080a8:	3001      	adds	r0, #1
 80080aa:	d10c      	bne.n	80080c6 <_printf_float+0x412>
 80080ac:	e65d      	b.n	8007d6a <_printf_float+0xb6>
 80080ae:	2301      	movs	r3, #1
 80080b0:	465a      	mov	r2, fp
 80080b2:	4631      	mov	r1, r6
 80080b4:	4628      	mov	r0, r5
 80080b6:	47b8      	blx	r7
 80080b8:	3001      	adds	r0, #1
 80080ba:	f43f ae56 	beq.w	8007d6a <_printf_float+0xb6>
 80080be:	f108 0801 	add.w	r8, r8, #1
 80080c2:	45d0      	cmp	r8, sl
 80080c4:	dbf3      	blt.n	80080ae <_printf_float+0x3fa>
 80080c6:	464b      	mov	r3, r9
 80080c8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80080cc:	e6df      	b.n	8007e8e <_printf_float+0x1da>
 80080ce:	f04f 0800 	mov.w	r8, #0
 80080d2:	f104 0b1a 	add.w	fp, r4, #26
 80080d6:	e7f4      	b.n	80080c2 <_printf_float+0x40e>
 80080d8:	2301      	movs	r3, #1
 80080da:	4642      	mov	r2, r8
 80080dc:	e7e1      	b.n	80080a2 <_printf_float+0x3ee>
 80080de:	2301      	movs	r3, #1
 80080e0:	464a      	mov	r2, r9
 80080e2:	4631      	mov	r1, r6
 80080e4:	4628      	mov	r0, r5
 80080e6:	47b8      	blx	r7
 80080e8:	3001      	adds	r0, #1
 80080ea:	f43f ae3e 	beq.w	8007d6a <_printf_float+0xb6>
 80080ee:	f108 0801 	add.w	r8, r8, #1
 80080f2:	68e3      	ldr	r3, [r4, #12]
 80080f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80080f6:	1a5b      	subs	r3, r3, r1
 80080f8:	4543      	cmp	r3, r8
 80080fa:	dcf0      	bgt.n	80080de <_printf_float+0x42a>
 80080fc:	e6fc      	b.n	8007ef8 <_printf_float+0x244>
 80080fe:	f04f 0800 	mov.w	r8, #0
 8008102:	f104 0919 	add.w	r9, r4, #25
 8008106:	e7f4      	b.n	80080f2 <_printf_float+0x43e>

08008108 <_printf_common>:
 8008108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800810c:	4616      	mov	r6, r2
 800810e:	4698      	mov	r8, r3
 8008110:	688a      	ldr	r2, [r1, #8]
 8008112:	690b      	ldr	r3, [r1, #16]
 8008114:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008118:	4293      	cmp	r3, r2
 800811a:	bfb8      	it	lt
 800811c:	4613      	movlt	r3, r2
 800811e:	6033      	str	r3, [r6, #0]
 8008120:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008124:	4607      	mov	r7, r0
 8008126:	460c      	mov	r4, r1
 8008128:	b10a      	cbz	r2, 800812e <_printf_common+0x26>
 800812a:	3301      	adds	r3, #1
 800812c:	6033      	str	r3, [r6, #0]
 800812e:	6823      	ldr	r3, [r4, #0]
 8008130:	0699      	lsls	r1, r3, #26
 8008132:	bf42      	ittt	mi
 8008134:	6833      	ldrmi	r3, [r6, #0]
 8008136:	3302      	addmi	r3, #2
 8008138:	6033      	strmi	r3, [r6, #0]
 800813a:	6825      	ldr	r5, [r4, #0]
 800813c:	f015 0506 	ands.w	r5, r5, #6
 8008140:	d106      	bne.n	8008150 <_printf_common+0x48>
 8008142:	f104 0a19 	add.w	sl, r4, #25
 8008146:	68e3      	ldr	r3, [r4, #12]
 8008148:	6832      	ldr	r2, [r6, #0]
 800814a:	1a9b      	subs	r3, r3, r2
 800814c:	42ab      	cmp	r3, r5
 800814e:	dc26      	bgt.n	800819e <_printf_common+0x96>
 8008150:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008154:	6822      	ldr	r2, [r4, #0]
 8008156:	3b00      	subs	r3, #0
 8008158:	bf18      	it	ne
 800815a:	2301      	movne	r3, #1
 800815c:	0692      	lsls	r2, r2, #26
 800815e:	d42b      	bmi.n	80081b8 <_printf_common+0xb0>
 8008160:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008164:	4641      	mov	r1, r8
 8008166:	4638      	mov	r0, r7
 8008168:	47c8      	blx	r9
 800816a:	3001      	adds	r0, #1
 800816c:	d01e      	beq.n	80081ac <_printf_common+0xa4>
 800816e:	6823      	ldr	r3, [r4, #0]
 8008170:	6922      	ldr	r2, [r4, #16]
 8008172:	f003 0306 	and.w	r3, r3, #6
 8008176:	2b04      	cmp	r3, #4
 8008178:	bf02      	ittt	eq
 800817a:	68e5      	ldreq	r5, [r4, #12]
 800817c:	6833      	ldreq	r3, [r6, #0]
 800817e:	1aed      	subeq	r5, r5, r3
 8008180:	68a3      	ldr	r3, [r4, #8]
 8008182:	bf0c      	ite	eq
 8008184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008188:	2500      	movne	r5, #0
 800818a:	4293      	cmp	r3, r2
 800818c:	bfc4      	itt	gt
 800818e:	1a9b      	subgt	r3, r3, r2
 8008190:	18ed      	addgt	r5, r5, r3
 8008192:	2600      	movs	r6, #0
 8008194:	341a      	adds	r4, #26
 8008196:	42b5      	cmp	r5, r6
 8008198:	d11a      	bne.n	80081d0 <_printf_common+0xc8>
 800819a:	2000      	movs	r0, #0
 800819c:	e008      	b.n	80081b0 <_printf_common+0xa8>
 800819e:	2301      	movs	r3, #1
 80081a0:	4652      	mov	r2, sl
 80081a2:	4641      	mov	r1, r8
 80081a4:	4638      	mov	r0, r7
 80081a6:	47c8      	blx	r9
 80081a8:	3001      	adds	r0, #1
 80081aa:	d103      	bne.n	80081b4 <_printf_common+0xac>
 80081ac:	f04f 30ff 	mov.w	r0, #4294967295
 80081b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081b4:	3501      	adds	r5, #1
 80081b6:	e7c6      	b.n	8008146 <_printf_common+0x3e>
 80081b8:	18e1      	adds	r1, r4, r3
 80081ba:	1c5a      	adds	r2, r3, #1
 80081bc:	2030      	movs	r0, #48	@ 0x30
 80081be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80081c2:	4422      	add	r2, r4
 80081c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80081c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80081cc:	3302      	adds	r3, #2
 80081ce:	e7c7      	b.n	8008160 <_printf_common+0x58>
 80081d0:	2301      	movs	r3, #1
 80081d2:	4622      	mov	r2, r4
 80081d4:	4641      	mov	r1, r8
 80081d6:	4638      	mov	r0, r7
 80081d8:	47c8      	blx	r9
 80081da:	3001      	adds	r0, #1
 80081dc:	d0e6      	beq.n	80081ac <_printf_common+0xa4>
 80081de:	3601      	adds	r6, #1
 80081e0:	e7d9      	b.n	8008196 <_printf_common+0x8e>
	...

080081e4 <_printf_i>:
 80081e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081e8:	7e0f      	ldrb	r7, [r1, #24]
 80081ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80081ec:	2f78      	cmp	r7, #120	@ 0x78
 80081ee:	4691      	mov	r9, r2
 80081f0:	4680      	mov	r8, r0
 80081f2:	460c      	mov	r4, r1
 80081f4:	469a      	mov	sl, r3
 80081f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80081fa:	d807      	bhi.n	800820c <_printf_i+0x28>
 80081fc:	2f62      	cmp	r7, #98	@ 0x62
 80081fe:	d80a      	bhi.n	8008216 <_printf_i+0x32>
 8008200:	2f00      	cmp	r7, #0
 8008202:	f000 80d2 	beq.w	80083aa <_printf_i+0x1c6>
 8008206:	2f58      	cmp	r7, #88	@ 0x58
 8008208:	f000 80b9 	beq.w	800837e <_printf_i+0x19a>
 800820c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008210:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008214:	e03a      	b.n	800828c <_printf_i+0xa8>
 8008216:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800821a:	2b15      	cmp	r3, #21
 800821c:	d8f6      	bhi.n	800820c <_printf_i+0x28>
 800821e:	a101      	add	r1, pc, #4	@ (adr r1, 8008224 <_printf_i+0x40>)
 8008220:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008224:	0800827d 	.word	0x0800827d
 8008228:	08008291 	.word	0x08008291
 800822c:	0800820d 	.word	0x0800820d
 8008230:	0800820d 	.word	0x0800820d
 8008234:	0800820d 	.word	0x0800820d
 8008238:	0800820d 	.word	0x0800820d
 800823c:	08008291 	.word	0x08008291
 8008240:	0800820d 	.word	0x0800820d
 8008244:	0800820d 	.word	0x0800820d
 8008248:	0800820d 	.word	0x0800820d
 800824c:	0800820d 	.word	0x0800820d
 8008250:	08008391 	.word	0x08008391
 8008254:	080082bb 	.word	0x080082bb
 8008258:	0800834b 	.word	0x0800834b
 800825c:	0800820d 	.word	0x0800820d
 8008260:	0800820d 	.word	0x0800820d
 8008264:	080083b3 	.word	0x080083b3
 8008268:	0800820d 	.word	0x0800820d
 800826c:	080082bb 	.word	0x080082bb
 8008270:	0800820d 	.word	0x0800820d
 8008274:	0800820d 	.word	0x0800820d
 8008278:	08008353 	.word	0x08008353
 800827c:	6833      	ldr	r3, [r6, #0]
 800827e:	1d1a      	adds	r2, r3, #4
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	6032      	str	r2, [r6, #0]
 8008284:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008288:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800828c:	2301      	movs	r3, #1
 800828e:	e09d      	b.n	80083cc <_printf_i+0x1e8>
 8008290:	6833      	ldr	r3, [r6, #0]
 8008292:	6820      	ldr	r0, [r4, #0]
 8008294:	1d19      	adds	r1, r3, #4
 8008296:	6031      	str	r1, [r6, #0]
 8008298:	0606      	lsls	r6, r0, #24
 800829a:	d501      	bpl.n	80082a0 <_printf_i+0xbc>
 800829c:	681d      	ldr	r5, [r3, #0]
 800829e:	e003      	b.n	80082a8 <_printf_i+0xc4>
 80082a0:	0645      	lsls	r5, r0, #25
 80082a2:	d5fb      	bpl.n	800829c <_printf_i+0xb8>
 80082a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80082a8:	2d00      	cmp	r5, #0
 80082aa:	da03      	bge.n	80082b4 <_printf_i+0xd0>
 80082ac:	232d      	movs	r3, #45	@ 0x2d
 80082ae:	426d      	negs	r5, r5
 80082b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082b4:	4859      	ldr	r0, [pc, #356]	@ (800841c <_printf_i+0x238>)
 80082b6:	230a      	movs	r3, #10
 80082b8:	e011      	b.n	80082de <_printf_i+0xfa>
 80082ba:	6821      	ldr	r1, [r4, #0]
 80082bc:	6833      	ldr	r3, [r6, #0]
 80082be:	0608      	lsls	r0, r1, #24
 80082c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80082c4:	d402      	bmi.n	80082cc <_printf_i+0xe8>
 80082c6:	0649      	lsls	r1, r1, #25
 80082c8:	bf48      	it	mi
 80082ca:	b2ad      	uxthmi	r5, r5
 80082cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80082ce:	4853      	ldr	r0, [pc, #332]	@ (800841c <_printf_i+0x238>)
 80082d0:	6033      	str	r3, [r6, #0]
 80082d2:	bf14      	ite	ne
 80082d4:	230a      	movne	r3, #10
 80082d6:	2308      	moveq	r3, #8
 80082d8:	2100      	movs	r1, #0
 80082da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80082de:	6866      	ldr	r6, [r4, #4]
 80082e0:	60a6      	str	r6, [r4, #8]
 80082e2:	2e00      	cmp	r6, #0
 80082e4:	bfa2      	ittt	ge
 80082e6:	6821      	ldrge	r1, [r4, #0]
 80082e8:	f021 0104 	bicge.w	r1, r1, #4
 80082ec:	6021      	strge	r1, [r4, #0]
 80082ee:	b90d      	cbnz	r5, 80082f4 <_printf_i+0x110>
 80082f0:	2e00      	cmp	r6, #0
 80082f2:	d04b      	beq.n	800838c <_printf_i+0x1a8>
 80082f4:	4616      	mov	r6, r2
 80082f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80082fa:	fb03 5711 	mls	r7, r3, r1, r5
 80082fe:	5dc7      	ldrb	r7, [r0, r7]
 8008300:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008304:	462f      	mov	r7, r5
 8008306:	42bb      	cmp	r3, r7
 8008308:	460d      	mov	r5, r1
 800830a:	d9f4      	bls.n	80082f6 <_printf_i+0x112>
 800830c:	2b08      	cmp	r3, #8
 800830e:	d10b      	bne.n	8008328 <_printf_i+0x144>
 8008310:	6823      	ldr	r3, [r4, #0]
 8008312:	07df      	lsls	r7, r3, #31
 8008314:	d508      	bpl.n	8008328 <_printf_i+0x144>
 8008316:	6923      	ldr	r3, [r4, #16]
 8008318:	6861      	ldr	r1, [r4, #4]
 800831a:	4299      	cmp	r1, r3
 800831c:	bfde      	ittt	le
 800831e:	2330      	movle	r3, #48	@ 0x30
 8008320:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008324:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008328:	1b92      	subs	r2, r2, r6
 800832a:	6122      	str	r2, [r4, #16]
 800832c:	f8cd a000 	str.w	sl, [sp]
 8008330:	464b      	mov	r3, r9
 8008332:	aa03      	add	r2, sp, #12
 8008334:	4621      	mov	r1, r4
 8008336:	4640      	mov	r0, r8
 8008338:	f7ff fee6 	bl	8008108 <_printf_common>
 800833c:	3001      	adds	r0, #1
 800833e:	d14a      	bne.n	80083d6 <_printf_i+0x1f2>
 8008340:	f04f 30ff 	mov.w	r0, #4294967295
 8008344:	b004      	add	sp, #16
 8008346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800834a:	6823      	ldr	r3, [r4, #0]
 800834c:	f043 0320 	orr.w	r3, r3, #32
 8008350:	6023      	str	r3, [r4, #0]
 8008352:	4833      	ldr	r0, [pc, #204]	@ (8008420 <_printf_i+0x23c>)
 8008354:	2778      	movs	r7, #120	@ 0x78
 8008356:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800835a:	6823      	ldr	r3, [r4, #0]
 800835c:	6831      	ldr	r1, [r6, #0]
 800835e:	061f      	lsls	r7, r3, #24
 8008360:	f851 5b04 	ldr.w	r5, [r1], #4
 8008364:	d402      	bmi.n	800836c <_printf_i+0x188>
 8008366:	065f      	lsls	r7, r3, #25
 8008368:	bf48      	it	mi
 800836a:	b2ad      	uxthmi	r5, r5
 800836c:	6031      	str	r1, [r6, #0]
 800836e:	07d9      	lsls	r1, r3, #31
 8008370:	bf44      	itt	mi
 8008372:	f043 0320 	orrmi.w	r3, r3, #32
 8008376:	6023      	strmi	r3, [r4, #0]
 8008378:	b11d      	cbz	r5, 8008382 <_printf_i+0x19e>
 800837a:	2310      	movs	r3, #16
 800837c:	e7ac      	b.n	80082d8 <_printf_i+0xf4>
 800837e:	4827      	ldr	r0, [pc, #156]	@ (800841c <_printf_i+0x238>)
 8008380:	e7e9      	b.n	8008356 <_printf_i+0x172>
 8008382:	6823      	ldr	r3, [r4, #0]
 8008384:	f023 0320 	bic.w	r3, r3, #32
 8008388:	6023      	str	r3, [r4, #0]
 800838a:	e7f6      	b.n	800837a <_printf_i+0x196>
 800838c:	4616      	mov	r6, r2
 800838e:	e7bd      	b.n	800830c <_printf_i+0x128>
 8008390:	6833      	ldr	r3, [r6, #0]
 8008392:	6825      	ldr	r5, [r4, #0]
 8008394:	6961      	ldr	r1, [r4, #20]
 8008396:	1d18      	adds	r0, r3, #4
 8008398:	6030      	str	r0, [r6, #0]
 800839a:	062e      	lsls	r6, r5, #24
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	d501      	bpl.n	80083a4 <_printf_i+0x1c0>
 80083a0:	6019      	str	r1, [r3, #0]
 80083a2:	e002      	b.n	80083aa <_printf_i+0x1c6>
 80083a4:	0668      	lsls	r0, r5, #25
 80083a6:	d5fb      	bpl.n	80083a0 <_printf_i+0x1bc>
 80083a8:	8019      	strh	r1, [r3, #0]
 80083aa:	2300      	movs	r3, #0
 80083ac:	6123      	str	r3, [r4, #16]
 80083ae:	4616      	mov	r6, r2
 80083b0:	e7bc      	b.n	800832c <_printf_i+0x148>
 80083b2:	6833      	ldr	r3, [r6, #0]
 80083b4:	1d1a      	adds	r2, r3, #4
 80083b6:	6032      	str	r2, [r6, #0]
 80083b8:	681e      	ldr	r6, [r3, #0]
 80083ba:	6862      	ldr	r2, [r4, #4]
 80083bc:	2100      	movs	r1, #0
 80083be:	4630      	mov	r0, r6
 80083c0:	f7f7 ff26 	bl	8000210 <memchr>
 80083c4:	b108      	cbz	r0, 80083ca <_printf_i+0x1e6>
 80083c6:	1b80      	subs	r0, r0, r6
 80083c8:	6060      	str	r0, [r4, #4]
 80083ca:	6863      	ldr	r3, [r4, #4]
 80083cc:	6123      	str	r3, [r4, #16]
 80083ce:	2300      	movs	r3, #0
 80083d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083d4:	e7aa      	b.n	800832c <_printf_i+0x148>
 80083d6:	6923      	ldr	r3, [r4, #16]
 80083d8:	4632      	mov	r2, r6
 80083da:	4649      	mov	r1, r9
 80083dc:	4640      	mov	r0, r8
 80083de:	47d0      	blx	sl
 80083e0:	3001      	adds	r0, #1
 80083e2:	d0ad      	beq.n	8008340 <_printf_i+0x15c>
 80083e4:	6823      	ldr	r3, [r4, #0]
 80083e6:	079b      	lsls	r3, r3, #30
 80083e8:	d413      	bmi.n	8008412 <_printf_i+0x22e>
 80083ea:	68e0      	ldr	r0, [r4, #12]
 80083ec:	9b03      	ldr	r3, [sp, #12]
 80083ee:	4298      	cmp	r0, r3
 80083f0:	bfb8      	it	lt
 80083f2:	4618      	movlt	r0, r3
 80083f4:	e7a6      	b.n	8008344 <_printf_i+0x160>
 80083f6:	2301      	movs	r3, #1
 80083f8:	4632      	mov	r2, r6
 80083fa:	4649      	mov	r1, r9
 80083fc:	4640      	mov	r0, r8
 80083fe:	47d0      	blx	sl
 8008400:	3001      	adds	r0, #1
 8008402:	d09d      	beq.n	8008340 <_printf_i+0x15c>
 8008404:	3501      	adds	r5, #1
 8008406:	68e3      	ldr	r3, [r4, #12]
 8008408:	9903      	ldr	r1, [sp, #12]
 800840a:	1a5b      	subs	r3, r3, r1
 800840c:	42ab      	cmp	r3, r5
 800840e:	dcf2      	bgt.n	80083f6 <_printf_i+0x212>
 8008410:	e7eb      	b.n	80083ea <_printf_i+0x206>
 8008412:	2500      	movs	r5, #0
 8008414:	f104 0619 	add.w	r6, r4, #25
 8008418:	e7f5      	b.n	8008406 <_printf_i+0x222>
 800841a:	bf00      	nop
 800841c:	0800bc1a 	.word	0x0800bc1a
 8008420:	0800bc2b 	.word	0x0800bc2b

08008424 <_scanf_float>:
 8008424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008428:	b087      	sub	sp, #28
 800842a:	4617      	mov	r7, r2
 800842c:	9303      	str	r3, [sp, #12]
 800842e:	688b      	ldr	r3, [r1, #8]
 8008430:	1e5a      	subs	r2, r3, #1
 8008432:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008436:	bf81      	itttt	hi
 8008438:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800843c:	eb03 0b05 	addhi.w	fp, r3, r5
 8008440:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008444:	608b      	strhi	r3, [r1, #8]
 8008446:	680b      	ldr	r3, [r1, #0]
 8008448:	460a      	mov	r2, r1
 800844a:	f04f 0500 	mov.w	r5, #0
 800844e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008452:	f842 3b1c 	str.w	r3, [r2], #28
 8008456:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800845a:	4680      	mov	r8, r0
 800845c:	460c      	mov	r4, r1
 800845e:	bf98      	it	ls
 8008460:	f04f 0b00 	movls.w	fp, #0
 8008464:	9201      	str	r2, [sp, #4]
 8008466:	4616      	mov	r6, r2
 8008468:	46aa      	mov	sl, r5
 800846a:	46a9      	mov	r9, r5
 800846c:	9502      	str	r5, [sp, #8]
 800846e:	68a2      	ldr	r2, [r4, #8]
 8008470:	b152      	cbz	r2, 8008488 <_scanf_float+0x64>
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	2b4e      	cmp	r3, #78	@ 0x4e
 8008478:	d864      	bhi.n	8008544 <_scanf_float+0x120>
 800847a:	2b40      	cmp	r3, #64	@ 0x40
 800847c:	d83c      	bhi.n	80084f8 <_scanf_float+0xd4>
 800847e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008482:	b2c8      	uxtb	r0, r1
 8008484:	280e      	cmp	r0, #14
 8008486:	d93a      	bls.n	80084fe <_scanf_float+0xda>
 8008488:	f1b9 0f00 	cmp.w	r9, #0
 800848c:	d003      	beq.n	8008496 <_scanf_float+0x72>
 800848e:	6823      	ldr	r3, [r4, #0]
 8008490:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008494:	6023      	str	r3, [r4, #0]
 8008496:	f10a 3aff 	add.w	sl, sl, #4294967295
 800849a:	f1ba 0f01 	cmp.w	sl, #1
 800849e:	f200 8117 	bhi.w	80086d0 <_scanf_float+0x2ac>
 80084a2:	9b01      	ldr	r3, [sp, #4]
 80084a4:	429e      	cmp	r6, r3
 80084a6:	f200 8108 	bhi.w	80086ba <_scanf_float+0x296>
 80084aa:	2001      	movs	r0, #1
 80084ac:	b007      	add	sp, #28
 80084ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084b2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80084b6:	2a0d      	cmp	r2, #13
 80084b8:	d8e6      	bhi.n	8008488 <_scanf_float+0x64>
 80084ba:	a101      	add	r1, pc, #4	@ (adr r1, 80084c0 <_scanf_float+0x9c>)
 80084bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80084c0:	08008607 	.word	0x08008607
 80084c4:	08008489 	.word	0x08008489
 80084c8:	08008489 	.word	0x08008489
 80084cc:	08008489 	.word	0x08008489
 80084d0:	08008667 	.word	0x08008667
 80084d4:	0800863f 	.word	0x0800863f
 80084d8:	08008489 	.word	0x08008489
 80084dc:	08008489 	.word	0x08008489
 80084e0:	08008615 	.word	0x08008615
 80084e4:	08008489 	.word	0x08008489
 80084e8:	08008489 	.word	0x08008489
 80084ec:	08008489 	.word	0x08008489
 80084f0:	08008489 	.word	0x08008489
 80084f4:	080085cd 	.word	0x080085cd
 80084f8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80084fc:	e7db      	b.n	80084b6 <_scanf_float+0x92>
 80084fe:	290e      	cmp	r1, #14
 8008500:	d8c2      	bhi.n	8008488 <_scanf_float+0x64>
 8008502:	a001      	add	r0, pc, #4	@ (adr r0, 8008508 <_scanf_float+0xe4>)
 8008504:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008508:	080085bd 	.word	0x080085bd
 800850c:	08008489 	.word	0x08008489
 8008510:	080085bd 	.word	0x080085bd
 8008514:	08008653 	.word	0x08008653
 8008518:	08008489 	.word	0x08008489
 800851c:	08008565 	.word	0x08008565
 8008520:	080085a3 	.word	0x080085a3
 8008524:	080085a3 	.word	0x080085a3
 8008528:	080085a3 	.word	0x080085a3
 800852c:	080085a3 	.word	0x080085a3
 8008530:	080085a3 	.word	0x080085a3
 8008534:	080085a3 	.word	0x080085a3
 8008538:	080085a3 	.word	0x080085a3
 800853c:	080085a3 	.word	0x080085a3
 8008540:	080085a3 	.word	0x080085a3
 8008544:	2b6e      	cmp	r3, #110	@ 0x6e
 8008546:	d809      	bhi.n	800855c <_scanf_float+0x138>
 8008548:	2b60      	cmp	r3, #96	@ 0x60
 800854a:	d8b2      	bhi.n	80084b2 <_scanf_float+0x8e>
 800854c:	2b54      	cmp	r3, #84	@ 0x54
 800854e:	d07b      	beq.n	8008648 <_scanf_float+0x224>
 8008550:	2b59      	cmp	r3, #89	@ 0x59
 8008552:	d199      	bne.n	8008488 <_scanf_float+0x64>
 8008554:	2d07      	cmp	r5, #7
 8008556:	d197      	bne.n	8008488 <_scanf_float+0x64>
 8008558:	2508      	movs	r5, #8
 800855a:	e02c      	b.n	80085b6 <_scanf_float+0x192>
 800855c:	2b74      	cmp	r3, #116	@ 0x74
 800855e:	d073      	beq.n	8008648 <_scanf_float+0x224>
 8008560:	2b79      	cmp	r3, #121	@ 0x79
 8008562:	e7f6      	b.n	8008552 <_scanf_float+0x12e>
 8008564:	6821      	ldr	r1, [r4, #0]
 8008566:	05c8      	lsls	r0, r1, #23
 8008568:	d51b      	bpl.n	80085a2 <_scanf_float+0x17e>
 800856a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800856e:	6021      	str	r1, [r4, #0]
 8008570:	f109 0901 	add.w	r9, r9, #1
 8008574:	f1bb 0f00 	cmp.w	fp, #0
 8008578:	d003      	beq.n	8008582 <_scanf_float+0x15e>
 800857a:	3201      	adds	r2, #1
 800857c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008580:	60a2      	str	r2, [r4, #8]
 8008582:	68a3      	ldr	r3, [r4, #8]
 8008584:	3b01      	subs	r3, #1
 8008586:	60a3      	str	r3, [r4, #8]
 8008588:	6923      	ldr	r3, [r4, #16]
 800858a:	3301      	adds	r3, #1
 800858c:	6123      	str	r3, [r4, #16]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	3b01      	subs	r3, #1
 8008592:	2b00      	cmp	r3, #0
 8008594:	607b      	str	r3, [r7, #4]
 8008596:	f340 8087 	ble.w	80086a8 <_scanf_float+0x284>
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	3301      	adds	r3, #1
 800859e:	603b      	str	r3, [r7, #0]
 80085a0:	e765      	b.n	800846e <_scanf_float+0x4a>
 80085a2:	eb1a 0105 	adds.w	r1, sl, r5
 80085a6:	f47f af6f 	bne.w	8008488 <_scanf_float+0x64>
 80085aa:	6822      	ldr	r2, [r4, #0]
 80085ac:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80085b0:	6022      	str	r2, [r4, #0]
 80085b2:	460d      	mov	r5, r1
 80085b4:	468a      	mov	sl, r1
 80085b6:	f806 3b01 	strb.w	r3, [r6], #1
 80085ba:	e7e2      	b.n	8008582 <_scanf_float+0x15e>
 80085bc:	6822      	ldr	r2, [r4, #0]
 80085be:	0610      	lsls	r0, r2, #24
 80085c0:	f57f af62 	bpl.w	8008488 <_scanf_float+0x64>
 80085c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80085c8:	6022      	str	r2, [r4, #0]
 80085ca:	e7f4      	b.n	80085b6 <_scanf_float+0x192>
 80085cc:	f1ba 0f00 	cmp.w	sl, #0
 80085d0:	d10e      	bne.n	80085f0 <_scanf_float+0x1cc>
 80085d2:	f1b9 0f00 	cmp.w	r9, #0
 80085d6:	d10e      	bne.n	80085f6 <_scanf_float+0x1d2>
 80085d8:	6822      	ldr	r2, [r4, #0]
 80085da:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80085de:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80085e2:	d108      	bne.n	80085f6 <_scanf_float+0x1d2>
 80085e4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80085e8:	6022      	str	r2, [r4, #0]
 80085ea:	f04f 0a01 	mov.w	sl, #1
 80085ee:	e7e2      	b.n	80085b6 <_scanf_float+0x192>
 80085f0:	f1ba 0f02 	cmp.w	sl, #2
 80085f4:	d055      	beq.n	80086a2 <_scanf_float+0x27e>
 80085f6:	2d01      	cmp	r5, #1
 80085f8:	d002      	beq.n	8008600 <_scanf_float+0x1dc>
 80085fa:	2d04      	cmp	r5, #4
 80085fc:	f47f af44 	bne.w	8008488 <_scanf_float+0x64>
 8008600:	3501      	adds	r5, #1
 8008602:	b2ed      	uxtb	r5, r5
 8008604:	e7d7      	b.n	80085b6 <_scanf_float+0x192>
 8008606:	f1ba 0f01 	cmp.w	sl, #1
 800860a:	f47f af3d 	bne.w	8008488 <_scanf_float+0x64>
 800860e:	f04f 0a02 	mov.w	sl, #2
 8008612:	e7d0      	b.n	80085b6 <_scanf_float+0x192>
 8008614:	b97d      	cbnz	r5, 8008636 <_scanf_float+0x212>
 8008616:	f1b9 0f00 	cmp.w	r9, #0
 800861a:	f47f af38 	bne.w	800848e <_scanf_float+0x6a>
 800861e:	6822      	ldr	r2, [r4, #0]
 8008620:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008624:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008628:	f040 8108 	bne.w	800883c <_scanf_float+0x418>
 800862c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008630:	6022      	str	r2, [r4, #0]
 8008632:	2501      	movs	r5, #1
 8008634:	e7bf      	b.n	80085b6 <_scanf_float+0x192>
 8008636:	2d03      	cmp	r5, #3
 8008638:	d0e2      	beq.n	8008600 <_scanf_float+0x1dc>
 800863a:	2d05      	cmp	r5, #5
 800863c:	e7de      	b.n	80085fc <_scanf_float+0x1d8>
 800863e:	2d02      	cmp	r5, #2
 8008640:	f47f af22 	bne.w	8008488 <_scanf_float+0x64>
 8008644:	2503      	movs	r5, #3
 8008646:	e7b6      	b.n	80085b6 <_scanf_float+0x192>
 8008648:	2d06      	cmp	r5, #6
 800864a:	f47f af1d 	bne.w	8008488 <_scanf_float+0x64>
 800864e:	2507      	movs	r5, #7
 8008650:	e7b1      	b.n	80085b6 <_scanf_float+0x192>
 8008652:	6822      	ldr	r2, [r4, #0]
 8008654:	0591      	lsls	r1, r2, #22
 8008656:	f57f af17 	bpl.w	8008488 <_scanf_float+0x64>
 800865a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800865e:	6022      	str	r2, [r4, #0]
 8008660:	f8cd 9008 	str.w	r9, [sp, #8]
 8008664:	e7a7      	b.n	80085b6 <_scanf_float+0x192>
 8008666:	6822      	ldr	r2, [r4, #0]
 8008668:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800866c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008670:	d006      	beq.n	8008680 <_scanf_float+0x25c>
 8008672:	0550      	lsls	r0, r2, #21
 8008674:	f57f af08 	bpl.w	8008488 <_scanf_float+0x64>
 8008678:	f1b9 0f00 	cmp.w	r9, #0
 800867c:	f000 80de 	beq.w	800883c <_scanf_float+0x418>
 8008680:	0591      	lsls	r1, r2, #22
 8008682:	bf58      	it	pl
 8008684:	9902      	ldrpl	r1, [sp, #8]
 8008686:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800868a:	bf58      	it	pl
 800868c:	eba9 0101 	subpl.w	r1, r9, r1
 8008690:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008694:	bf58      	it	pl
 8008696:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800869a:	6022      	str	r2, [r4, #0]
 800869c:	f04f 0900 	mov.w	r9, #0
 80086a0:	e789      	b.n	80085b6 <_scanf_float+0x192>
 80086a2:	f04f 0a03 	mov.w	sl, #3
 80086a6:	e786      	b.n	80085b6 <_scanf_float+0x192>
 80086a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80086ac:	4639      	mov	r1, r7
 80086ae:	4640      	mov	r0, r8
 80086b0:	4798      	blx	r3
 80086b2:	2800      	cmp	r0, #0
 80086b4:	f43f aedb 	beq.w	800846e <_scanf_float+0x4a>
 80086b8:	e6e6      	b.n	8008488 <_scanf_float+0x64>
 80086ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80086be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80086c2:	463a      	mov	r2, r7
 80086c4:	4640      	mov	r0, r8
 80086c6:	4798      	blx	r3
 80086c8:	6923      	ldr	r3, [r4, #16]
 80086ca:	3b01      	subs	r3, #1
 80086cc:	6123      	str	r3, [r4, #16]
 80086ce:	e6e8      	b.n	80084a2 <_scanf_float+0x7e>
 80086d0:	1e6b      	subs	r3, r5, #1
 80086d2:	2b06      	cmp	r3, #6
 80086d4:	d824      	bhi.n	8008720 <_scanf_float+0x2fc>
 80086d6:	2d02      	cmp	r5, #2
 80086d8:	d836      	bhi.n	8008748 <_scanf_float+0x324>
 80086da:	9b01      	ldr	r3, [sp, #4]
 80086dc:	429e      	cmp	r6, r3
 80086de:	f67f aee4 	bls.w	80084aa <_scanf_float+0x86>
 80086e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80086e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80086ea:	463a      	mov	r2, r7
 80086ec:	4640      	mov	r0, r8
 80086ee:	4798      	blx	r3
 80086f0:	6923      	ldr	r3, [r4, #16]
 80086f2:	3b01      	subs	r3, #1
 80086f4:	6123      	str	r3, [r4, #16]
 80086f6:	e7f0      	b.n	80086da <_scanf_float+0x2b6>
 80086f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80086fc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008700:	463a      	mov	r2, r7
 8008702:	4640      	mov	r0, r8
 8008704:	4798      	blx	r3
 8008706:	6923      	ldr	r3, [r4, #16]
 8008708:	3b01      	subs	r3, #1
 800870a:	6123      	str	r3, [r4, #16]
 800870c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008710:	fa5f fa8a 	uxtb.w	sl, sl
 8008714:	f1ba 0f02 	cmp.w	sl, #2
 8008718:	d1ee      	bne.n	80086f8 <_scanf_float+0x2d4>
 800871a:	3d03      	subs	r5, #3
 800871c:	b2ed      	uxtb	r5, r5
 800871e:	1b76      	subs	r6, r6, r5
 8008720:	6823      	ldr	r3, [r4, #0]
 8008722:	05da      	lsls	r2, r3, #23
 8008724:	d530      	bpl.n	8008788 <_scanf_float+0x364>
 8008726:	055b      	lsls	r3, r3, #21
 8008728:	d511      	bpl.n	800874e <_scanf_float+0x32a>
 800872a:	9b01      	ldr	r3, [sp, #4]
 800872c:	429e      	cmp	r6, r3
 800872e:	f67f aebc 	bls.w	80084aa <_scanf_float+0x86>
 8008732:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008736:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800873a:	463a      	mov	r2, r7
 800873c:	4640      	mov	r0, r8
 800873e:	4798      	blx	r3
 8008740:	6923      	ldr	r3, [r4, #16]
 8008742:	3b01      	subs	r3, #1
 8008744:	6123      	str	r3, [r4, #16]
 8008746:	e7f0      	b.n	800872a <_scanf_float+0x306>
 8008748:	46aa      	mov	sl, r5
 800874a:	46b3      	mov	fp, r6
 800874c:	e7de      	b.n	800870c <_scanf_float+0x2e8>
 800874e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008752:	6923      	ldr	r3, [r4, #16]
 8008754:	2965      	cmp	r1, #101	@ 0x65
 8008756:	f103 33ff 	add.w	r3, r3, #4294967295
 800875a:	f106 35ff 	add.w	r5, r6, #4294967295
 800875e:	6123      	str	r3, [r4, #16]
 8008760:	d00c      	beq.n	800877c <_scanf_float+0x358>
 8008762:	2945      	cmp	r1, #69	@ 0x45
 8008764:	d00a      	beq.n	800877c <_scanf_float+0x358>
 8008766:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800876a:	463a      	mov	r2, r7
 800876c:	4640      	mov	r0, r8
 800876e:	4798      	blx	r3
 8008770:	6923      	ldr	r3, [r4, #16]
 8008772:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008776:	3b01      	subs	r3, #1
 8008778:	1eb5      	subs	r5, r6, #2
 800877a:	6123      	str	r3, [r4, #16]
 800877c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008780:	463a      	mov	r2, r7
 8008782:	4640      	mov	r0, r8
 8008784:	4798      	blx	r3
 8008786:	462e      	mov	r6, r5
 8008788:	6822      	ldr	r2, [r4, #0]
 800878a:	f012 0210 	ands.w	r2, r2, #16
 800878e:	d001      	beq.n	8008794 <_scanf_float+0x370>
 8008790:	2000      	movs	r0, #0
 8008792:	e68b      	b.n	80084ac <_scanf_float+0x88>
 8008794:	7032      	strb	r2, [r6, #0]
 8008796:	6823      	ldr	r3, [r4, #0]
 8008798:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800879c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087a0:	d11c      	bne.n	80087dc <_scanf_float+0x3b8>
 80087a2:	9b02      	ldr	r3, [sp, #8]
 80087a4:	454b      	cmp	r3, r9
 80087a6:	eba3 0209 	sub.w	r2, r3, r9
 80087aa:	d123      	bne.n	80087f4 <_scanf_float+0x3d0>
 80087ac:	9901      	ldr	r1, [sp, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	4640      	mov	r0, r8
 80087b2:	f7ff f975 	bl	8007aa0 <_strtod_r>
 80087b6:	9b03      	ldr	r3, [sp, #12]
 80087b8:	6821      	ldr	r1, [r4, #0]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f011 0f02 	tst.w	r1, #2
 80087c0:	ec57 6b10 	vmov	r6, r7, d0
 80087c4:	f103 0204 	add.w	r2, r3, #4
 80087c8:	d01f      	beq.n	800880a <_scanf_float+0x3e6>
 80087ca:	9903      	ldr	r1, [sp, #12]
 80087cc:	600a      	str	r2, [r1, #0]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	e9c3 6700 	strd	r6, r7, [r3]
 80087d4:	68e3      	ldr	r3, [r4, #12]
 80087d6:	3301      	adds	r3, #1
 80087d8:	60e3      	str	r3, [r4, #12]
 80087da:	e7d9      	b.n	8008790 <_scanf_float+0x36c>
 80087dc:	9b04      	ldr	r3, [sp, #16]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d0e4      	beq.n	80087ac <_scanf_float+0x388>
 80087e2:	9905      	ldr	r1, [sp, #20]
 80087e4:	230a      	movs	r3, #10
 80087e6:	3101      	adds	r1, #1
 80087e8:	4640      	mov	r0, r8
 80087ea:	f002 fa41 	bl	800ac70 <_strtol_r>
 80087ee:	9b04      	ldr	r3, [sp, #16]
 80087f0:	9e05      	ldr	r6, [sp, #20]
 80087f2:	1ac2      	subs	r2, r0, r3
 80087f4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80087f8:	429e      	cmp	r6, r3
 80087fa:	bf28      	it	cs
 80087fc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008800:	4910      	ldr	r1, [pc, #64]	@ (8008844 <_scanf_float+0x420>)
 8008802:	4630      	mov	r0, r6
 8008804:	f000 f8e4 	bl	80089d0 <siprintf>
 8008808:	e7d0      	b.n	80087ac <_scanf_float+0x388>
 800880a:	f011 0f04 	tst.w	r1, #4
 800880e:	9903      	ldr	r1, [sp, #12]
 8008810:	600a      	str	r2, [r1, #0]
 8008812:	d1dc      	bne.n	80087ce <_scanf_float+0x3aa>
 8008814:	681d      	ldr	r5, [r3, #0]
 8008816:	4632      	mov	r2, r6
 8008818:	463b      	mov	r3, r7
 800881a:	4630      	mov	r0, r6
 800881c:	4639      	mov	r1, r7
 800881e:	f7f8 f9a5 	bl	8000b6c <__aeabi_dcmpun>
 8008822:	b128      	cbz	r0, 8008830 <_scanf_float+0x40c>
 8008824:	4808      	ldr	r0, [pc, #32]	@ (8008848 <_scanf_float+0x424>)
 8008826:	f000 fa3b 	bl	8008ca0 <nanf>
 800882a:	ed85 0a00 	vstr	s0, [r5]
 800882e:	e7d1      	b.n	80087d4 <_scanf_float+0x3b0>
 8008830:	4630      	mov	r0, r6
 8008832:	4639      	mov	r1, r7
 8008834:	f7f8 f9f8 	bl	8000c28 <__aeabi_d2f>
 8008838:	6028      	str	r0, [r5, #0]
 800883a:	e7cb      	b.n	80087d4 <_scanf_float+0x3b0>
 800883c:	f04f 0900 	mov.w	r9, #0
 8008840:	e629      	b.n	8008496 <_scanf_float+0x72>
 8008842:	bf00      	nop
 8008844:	0800bc3c 	.word	0x0800bc3c
 8008848:	0800bcf5 	.word	0x0800bcf5

0800884c <std>:
 800884c:	2300      	movs	r3, #0
 800884e:	b510      	push	{r4, lr}
 8008850:	4604      	mov	r4, r0
 8008852:	e9c0 3300 	strd	r3, r3, [r0]
 8008856:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800885a:	6083      	str	r3, [r0, #8]
 800885c:	8181      	strh	r1, [r0, #12]
 800885e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008860:	81c2      	strh	r2, [r0, #14]
 8008862:	6183      	str	r3, [r0, #24]
 8008864:	4619      	mov	r1, r3
 8008866:	2208      	movs	r2, #8
 8008868:	305c      	adds	r0, #92	@ 0x5c
 800886a:	f000 f914 	bl	8008a96 <memset>
 800886e:	4b0d      	ldr	r3, [pc, #52]	@ (80088a4 <std+0x58>)
 8008870:	6263      	str	r3, [r4, #36]	@ 0x24
 8008872:	4b0d      	ldr	r3, [pc, #52]	@ (80088a8 <std+0x5c>)
 8008874:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008876:	4b0d      	ldr	r3, [pc, #52]	@ (80088ac <std+0x60>)
 8008878:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800887a:	4b0d      	ldr	r3, [pc, #52]	@ (80088b0 <std+0x64>)
 800887c:	6323      	str	r3, [r4, #48]	@ 0x30
 800887e:	4b0d      	ldr	r3, [pc, #52]	@ (80088b4 <std+0x68>)
 8008880:	6224      	str	r4, [r4, #32]
 8008882:	429c      	cmp	r4, r3
 8008884:	d006      	beq.n	8008894 <std+0x48>
 8008886:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800888a:	4294      	cmp	r4, r2
 800888c:	d002      	beq.n	8008894 <std+0x48>
 800888e:	33d0      	adds	r3, #208	@ 0xd0
 8008890:	429c      	cmp	r4, r3
 8008892:	d105      	bne.n	80088a0 <std+0x54>
 8008894:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800889c:	f000 b9e6 	b.w	8008c6c <__retarget_lock_init_recursive>
 80088a0:	bd10      	pop	{r4, pc}
 80088a2:	bf00      	nop
 80088a4:	08008a11 	.word	0x08008a11
 80088a8:	08008a33 	.word	0x08008a33
 80088ac:	08008a6b 	.word	0x08008a6b
 80088b0:	08008a8f 	.word	0x08008a8f
 80088b4:	20006fa8 	.word	0x20006fa8

080088b8 <stdio_exit_handler>:
 80088b8:	4a02      	ldr	r2, [pc, #8]	@ (80088c4 <stdio_exit_handler+0xc>)
 80088ba:	4903      	ldr	r1, [pc, #12]	@ (80088c8 <stdio_exit_handler+0x10>)
 80088bc:	4803      	ldr	r0, [pc, #12]	@ (80088cc <stdio_exit_handler+0x14>)
 80088be:	f000 b869 	b.w	8008994 <_fwalk_sglue>
 80088c2:	bf00      	nop
 80088c4:	20000020 	.word	0x20000020
 80088c8:	0800b045 	.word	0x0800b045
 80088cc:	2000019c 	.word	0x2000019c

080088d0 <cleanup_stdio>:
 80088d0:	6841      	ldr	r1, [r0, #4]
 80088d2:	4b0c      	ldr	r3, [pc, #48]	@ (8008904 <cleanup_stdio+0x34>)
 80088d4:	4299      	cmp	r1, r3
 80088d6:	b510      	push	{r4, lr}
 80088d8:	4604      	mov	r4, r0
 80088da:	d001      	beq.n	80088e0 <cleanup_stdio+0x10>
 80088dc:	f002 fbb2 	bl	800b044 <_fflush_r>
 80088e0:	68a1      	ldr	r1, [r4, #8]
 80088e2:	4b09      	ldr	r3, [pc, #36]	@ (8008908 <cleanup_stdio+0x38>)
 80088e4:	4299      	cmp	r1, r3
 80088e6:	d002      	beq.n	80088ee <cleanup_stdio+0x1e>
 80088e8:	4620      	mov	r0, r4
 80088ea:	f002 fbab 	bl	800b044 <_fflush_r>
 80088ee:	68e1      	ldr	r1, [r4, #12]
 80088f0:	4b06      	ldr	r3, [pc, #24]	@ (800890c <cleanup_stdio+0x3c>)
 80088f2:	4299      	cmp	r1, r3
 80088f4:	d004      	beq.n	8008900 <cleanup_stdio+0x30>
 80088f6:	4620      	mov	r0, r4
 80088f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088fc:	f002 bba2 	b.w	800b044 <_fflush_r>
 8008900:	bd10      	pop	{r4, pc}
 8008902:	bf00      	nop
 8008904:	20006fa8 	.word	0x20006fa8
 8008908:	20007010 	.word	0x20007010
 800890c:	20007078 	.word	0x20007078

08008910 <global_stdio_init.part.0>:
 8008910:	b510      	push	{r4, lr}
 8008912:	4b0b      	ldr	r3, [pc, #44]	@ (8008940 <global_stdio_init.part.0+0x30>)
 8008914:	4c0b      	ldr	r4, [pc, #44]	@ (8008944 <global_stdio_init.part.0+0x34>)
 8008916:	4a0c      	ldr	r2, [pc, #48]	@ (8008948 <global_stdio_init.part.0+0x38>)
 8008918:	601a      	str	r2, [r3, #0]
 800891a:	4620      	mov	r0, r4
 800891c:	2200      	movs	r2, #0
 800891e:	2104      	movs	r1, #4
 8008920:	f7ff ff94 	bl	800884c <std>
 8008924:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008928:	2201      	movs	r2, #1
 800892a:	2109      	movs	r1, #9
 800892c:	f7ff ff8e 	bl	800884c <std>
 8008930:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008934:	2202      	movs	r2, #2
 8008936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800893a:	2112      	movs	r1, #18
 800893c:	f7ff bf86 	b.w	800884c <std>
 8008940:	200070e0 	.word	0x200070e0
 8008944:	20006fa8 	.word	0x20006fa8
 8008948:	080088b9 	.word	0x080088b9

0800894c <__sfp_lock_acquire>:
 800894c:	4801      	ldr	r0, [pc, #4]	@ (8008954 <__sfp_lock_acquire+0x8>)
 800894e:	f000 b98e 	b.w	8008c6e <__retarget_lock_acquire_recursive>
 8008952:	bf00      	nop
 8008954:	200070e9 	.word	0x200070e9

08008958 <__sfp_lock_release>:
 8008958:	4801      	ldr	r0, [pc, #4]	@ (8008960 <__sfp_lock_release+0x8>)
 800895a:	f000 b989 	b.w	8008c70 <__retarget_lock_release_recursive>
 800895e:	bf00      	nop
 8008960:	200070e9 	.word	0x200070e9

08008964 <__sinit>:
 8008964:	b510      	push	{r4, lr}
 8008966:	4604      	mov	r4, r0
 8008968:	f7ff fff0 	bl	800894c <__sfp_lock_acquire>
 800896c:	6a23      	ldr	r3, [r4, #32]
 800896e:	b11b      	cbz	r3, 8008978 <__sinit+0x14>
 8008970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008974:	f7ff bff0 	b.w	8008958 <__sfp_lock_release>
 8008978:	4b04      	ldr	r3, [pc, #16]	@ (800898c <__sinit+0x28>)
 800897a:	6223      	str	r3, [r4, #32]
 800897c:	4b04      	ldr	r3, [pc, #16]	@ (8008990 <__sinit+0x2c>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d1f5      	bne.n	8008970 <__sinit+0xc>
 8008984:	f7ff ffc4 	bl	8008910 <global_stdio_init.part.0>
 8008988:	e7f2      	b.n	8008970 <__sinit+0xc>
 800898a:	bf00      	nop
 800898c:	080088d1 	.word	0x080088d1
 8008990:	200070e0 	.word	0x200070e0

08008994 <_fwalk_sglue>:
 8008994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008998:	4607      	mov	r7, r0
 800899a:	4688      	mov	r8, r1
 800899c:	4614      	mov	r4, r2
 800899e:	2600      	movs	r6, #0
 80089a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80089a4:	f1b9 0901 	subs.w	r9, r9, #1
 80089a8:	d505      	bpl.n	80089b6 <_fwalk_sglue+0x22>
 80089aa:	6824      	ldr	r4, [r4, #0]
 80089ac:	2c00      	cmp	r4, #0
 80089ae:	d1f7      	bne.n	80089a0 <_fwalk_sglue+0xc>
 80089b0:	4630      	mov	r0, r6
 80089b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089b6:	89ab      	ldrh	r3, [r5, #12]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d907      	bls.n	80089cc <_fwalk_sglue+0x38>
 80089bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089c0:	3301      	adds	r3, #1
 80089c2:	d003      	beq.n	80089cc <_fwalk_sglue+0x38>
 80089c4:	4629      	mov	r1, r5
 80089c6:	4638      	mov	r0, r7
 80089c8:	47c0      	blx	r8
 80089ca:	4306      	orrs	r6, r0
 80089cc:	3568      	adds	r5, #104	@ 0x68
 80089ce:	e7e9      	b.n	80089a4 <_fwalk_sglue+0x10>

080089d0 <siprintf>:
 80089d0:	b40e      	push	{r1, r2, r3}
 80089d2:	b500      	push	{lr}
 80089d4:	b09c      	sub	sp, #112	@ 0x70
 80089d6:	ab1d      	add	r3, sp, #116	@ 0x74
 80089d8:	9002      	str	r0, [sp, #8]
 80089da:	9006      	str	r0, [sp, #24]
 80089dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80089e0:	4809      	ldr	r0, [pc, #36]	@ (8008a08 <siprintf+0x38>)
 80089e2:	9107      	str	r1, [sp, #28]
 80089e4:	9104      	str	r1, [sp, #16]
 80089e6:	4909      	ldr	r1, [pc, #36]	@ (8008a0c <siprintf+0x3c>)
 80089e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80089ec:	9105      	str	r1, [sp, #20]
 80089ee:	6800      	ldr	r0, [r0, #0]
 80089f0:	9301      	str	r3, [sp, #4]
 80089f2:	a902      	add	r1, sp, #8
 80089f4:	f002 f9a6 	bl	800ad44 <_svfiprintf_r>
 80089f8:	9b02      	ldr	r3, [sp, #8]
 80089fa:	2200      	movs	r2, #0
 80089fc:	701a      	strb	r2, [r3, #0]
 80089fe:	b01c      	add	sp, #112	@ 0x70
 8008a00:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a04:	b003      	add	sp, #12
 8008a06:	4770      	bx	lr
 8008a08:	20000198 	.word	0x20000198
 8008a0c:	ffff0208 	.word	0xffff0208

08008a10 <__sread>:
 8008a10:	b510      	push	{r4, lr}
 8008a12:	460c      	mov	r4, r1
 8008a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a18:	f000 f8da 	bl	8008bd0 <_read_r>
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	bfab      	itete	ge
 8008a20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008a22:	89a3      	ldrhlt	r3, [r4, #12]
 8008a24:	181b      	addge	r3, r3, r0
 8008a26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008a2a:	bfac      	ite	ge
 8008a2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008a2e:	81a3      	strhlt	r3, [r4, #12]
 8008a30:	bd10      	pop	{r4, pc}

08008a32 <__swrite>:
 8008a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a36:	461f      	mov	r7, r3
 8008a38:	898b      	ldrh	r3, [r1, #12]
 8008a3a:	05db      	lsls	r3, r3, #23
 8008a3c:	4605      	mov	r5, r0
 8008a3e:	460c      	mov	r4, r1
 8008a40:	4616      	mov	r6, r2
 8008a42:	d505      	bpl.n	8008a50 <__swrite+0x1e>
 8008a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a48:	2302      	movs	r3, #2
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f000 f8ae 	bl	8008bac <_lseek_r>
 8008a50:	89a3      	ldrh	r3, [r4, #12]
 8008a52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008a5a:	81a3      	strh	r3, [r4, #12]
 8008a5c:	4632      	mov	r2, r6
 8008a5e:	463b      	mov	r3, r7
 8008a60:	4628      	mov	r0, r5
 8008a62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a66:	f000 b8c5 	b.w	8008bf4 <_write_r>

08008a6a <__sseek>:
 8008a6a:	b510      	push	{r4, lr}
 8008a6c:	460c      	mov	r4, r1
 8008a6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a72:	f000 f89b 	bl	8008bac <_lseek_r>
 8008a76:	1c43      	adds	r3, r0, #1
 8008a78:	89a3      	ldrh	r3, [r4, #12]
 8008a7a:	bf15      	itete	ne
 8008a7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008a7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008a82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008a86:	81a3      	strheq	r3, [r4, #12]
 8008a88:	bf18      	it	ne
 8008a8a:	81a3      	strhne	r3, [r4, #12]
 8008a8c:	bd10      	pop	{r4, pc}

08008a8e <__sclose>:
 8008a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a92:	f000 b87b 	b.w	8008b8c <_close_r>

08008a96 <memset>:
 8008a96:	4402      	add	r2, r0
 8008a98:	4603      	mov	r3, r0
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d100      	bne.n	8008aa0 <memset+0xa>
 8008a9e:	4770      	bx	lr
 8008aa0:	f803 1b01 	strb.w	r1, [r3], #1
 8008aa4:	e7f9      	b.n	8008a9a <memset+0x4>

08008aa6 <strncmp>:
 8008aa6:	b510      	push	{r4, lr}
 8008aa8:	b16a      	cbz	r2, 8008ac6 <strncmp+0x20>
 8008aaa:	3901      	subs	r1, #1
 8008aac:	1884      	adds	r4, r0, r2
 8008aae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ab2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d103      	bne.n	8008ac2 <strncmp+0x1c>
 8008aba:	42a0      	cmp	r0, r4
 8008abc:	d001      	beq.n	8008ac2 <strncmp+0x1c>
 8008abe:	2a00      	cmp	r2, #0
 8008ac0:	d1f5      	bne.n	8008aae <strncmp+0x8>
 8008ac2:	1ad0      	subs	r0, r2, r3
 8008ac4:	bd10      	pop	{r4, pc}
 8008ac6:	4610      	mov	r0, r2
 8008ac8:	e7fc      	b.n	8008ac4 <strncmp+0x1e>
	...

08008acc <strtok>:
 8008acc:	4b16      	ldr	r3, [pc, #88]	@ (8008b28 <strtok+0x5c>)
 8008ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ad2:	681f      	ldr	r7, [r3, #0]
 8008ad4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8008ad6:	4605      	mov	r5, r0
 8008ad8:	460e      	mov	r6, r1
 8008ada:	b9ec      	cbnz	r4, 8008b18 <strtok+0x4c>
 8008adc:	2050      	movs	r0, #80	@ 0x50
 8008ade:	f001 fad3 	bl	800a088 <malloc>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	6478      	str	r0, [r7, #68]	@ 0x44
 8008ae6:	b920      	cbnz	r0, 8008af2 <strtok+0x26>
 8008ae8:	4b10      	ldr	r3, [pc, #64]	@ (8008b2c <strtok+0x60>)
 8008aea:	4811      	ldr	r0, [pc, #68]	@ (8008b30 <strtok+0x64>)
 8008aec:	215b      	movs	r1, #91	@ 0x5b
 8008aee:	f000 f8dd 	bl	8008cac <__assert_func>
 8008af2:	e9c0 4400 	strd	r4, r4, [r0]
 8008af6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008afa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008afe:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008b02:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8008b06:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8008b0a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008b0e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008b12:	6184      	str	r4, [r0, #24]
 8008b14:	7704      	strb	r4, [r0, #28]
 8008b16:	6244      	str	r4, [r0, #36]	@ 0x24
 8008b18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b1a:	4631      	mov	r1, r6
 8008b1c:	4628      	mov	r0, r5
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b24:	f000 b806 	b.w	8008b34 <__strtok_r>
 8008b28:	20000198 	.word	0x20000198
 8008b2c:	0800bc41 	.word	0x0800bc41
 8008b30:	0800bc58 	.word	0x0800bc58

08008b34 <__strtok_r>:
 8008b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b36:	4604      	mov	r4, r0
 8008b38:	b908      	cbnz	r0, 8008b3e <__strtok_r+0xa>
 8008b3a:	6814      	ldr	r4, [r2, #0]
 8008b3c:	b144      	cbz	r4, 8008b50 <__strtok_r+0x1c>
 8008b3e:	4620      	mov	r0, r4
 8008b40:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008b44:	460f      	mov	r7, r1
 8008b46:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008b4a:	b91e      	cbnz	r6, 8008b54 <__strtok_r+0x20>
 8008b4c:	b965      	cbnz	r5, 8008b68 <__strtok_r+0x34>
 8008b4e:	6015      	str	r5, [r2, #0]
 8008b50:	2000      	movs	r0, #0
 8008b52:	e005      	b.n	8008b60 <__strtok_r+0x2c>
 8008b54:	42b5      	cmp	r5, r6
 8008b56:	d1f6      	bne.n	8008b46 <__strtok_r+0x12>
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1f0      	bne.n	8008b3e <__strtok_r+0xa>
 8008b5c:	6014      	str	r4, [r2, #0]
 8008b5e:	7003      	strb	r3, [r0, #0]
 8008b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b62:	461c      	mov	r4, r3
 8008b64:	e00c      	b.n	8008b80 <__strtok_r+0x4c>
 8008b66:	b915      	cbnz	r5, 8008b6e <__strtok_r+0x3a>
 8008b68:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008b6c:	460e      	mov	r6, r1
 8008b6e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008b72:	42ab      	cmp	r3, r5
 8008b74:	d1f7      	bne.n	8008b66 <__strtok_r+0x32>
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d0f3      	beq.n	8008b62 <__strtok_r+0x2e>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008b80:	6014      	str	r4, [r2, #0]
 8008b82:	e7ed      	b.n	8008b60 <__strtok_r+0x2c>

08008b84 <_localeconv_r>:
 8008b84:	4800      	ldr	r0, [pc, #0]	@ (8008b88 <_localeconv_r+0x4>)
 8008b86:	4770      	bx	lr
 8008b88:	2000011c 	.word	0x2000011c

08008b8c <_close_r>:
 8008b8c:	b538      	push	{r3, r4, r5, lr}
 8008b8e:	4d06      	ldr	r5, [pc, #24]	@ (8008ba8 <_close_r+0x1c>)
 8008b90:	2300      	movs	r3, #0
 8008b92:	4604      	mov	r4, r0
 8008b94:	4608      	mov	r0, r1
 8008b96:	602b      	str	r3, [r5, #0]
 8008b98:	f7f9 f87c 	bl	8001c94 <_close>
 8008b9c:	1c43      	adds	r3, r0, #1
 8008b9e:	d102      	bne.n	8008ba6 <_close_r+0x1a>
 8008ba0:	682b      	ldr	r3, [r5, #0]
 8008ba2:	b103      	cbz	r3, 8008ba6 <_close_r+0x1a>
 8008ba4:	6023      	str	r3, [r4, #0]
 8008ba6:	bd38      	pop	{r3, r4, r5, pc}
 8008ba8:	200070e4 	.word	0x200070e4

08008bac <_lseek_r>:
 8008bac:	b538      	push	{r3, r4, r5, lr}
 8008bae:	4d07      	ldr	r5, [pc, #28]	@ (8008bcc <_lseek_r+0x20>)
 8008bb0:	4604      	mov	r4, r0
 8008bb2:	4608      	mov	r0, r1
 8008bb4:	4611      	mov	r1, r2
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	602a      	str	r2, [r5, #0]
 8008bba:	461a      	mov	r2, r3
 8008bbc:	f7f9 f876 	bl	8001cac <_lseek>
 8008bc0:	1c43      	adds	r3, r0, #1
 8008bc2:	d102      	bne.n	8008bca <_lseek_r+0x1e>
 8008bc4:	682b      	ldr	r3, [r5, #0]
 8008bc6:	b103      	cbz	r3, 8008bca <_lseek_r+0x1e>
 8008bc8:	6023      	str	r3, [r4, #0]
 8008bca:	bd38      	pop	{r3, r4, r5, pc}
 8008bcc:	200070e4 	.word	0x200070e4

08008bd0 <_read_r>:
 8008bd0:	b538      	push	{r3, r4, r5, lr}
 8008bd2:	4d07      	ldr	r5, [pc, #28]	@ (8008bf0 <_read_r+0x20>)
 8008bd4:	4604      	mov	r4, r0
 8008bd6:	4608      	mov	r0, r1
 8008bd8:	4611      	mov	r1, r2
 8008bda:	2200      	movs	r2, #0
 8008bdc:	602a      	str	r2, [r5, #0]
 8008bde:	461a      	mov	r2, r3
 8008be0:	f7f9 f83c 	bl	8001c5c <_read>
 8008be4:	1c43      	adds	r3, r0, #1
 8008be6:	d102      	bne.n	8008bee <_read_r+0x1e>
 8008be8:	682b      	ldr	r3, [r5, #0]
 8008bea:	b103      	cbz	r3, 8008bee <_read_r+0x1e>
 8008bec:	6023      	str	r3, [r4, #0]
 8008bee:	bd38      	pop	{r3, r4, r5, pc}
 8008bf0:	200070e4 	.word	0x200070e4

08008bf4 <_write_r>:
 8008bf4:	b538      	push	{r3, r4, r5, lr}
 8008bf6:	4d07      	ldr	r5, [pc, #28]	@ (8008c14 <_write_r+0x20>)
 8008bf8:	4604      	mov	r4, r0
 8008bfa:	4608      	mov	r0, r1
 8008bfc:	4611      	mov	r1, r2
 8008bfe:	2200      	movs	r2, #0
 8008c00:	602a      	str	r2, [r5, #0]
 8008c02:	461a      	mov	r2, r3
 8008c04:	f7f9 f838 	bl	8001c78 <_write>
 8008c08:	1c43      	adds	r3, r0, #1
 8008c0a:	d102      	bne.n	8008c12 <_write_r+0x1e>
 8008c0c:	682b      	ldr	r3, [r5, #0]
 8008c0e:	b103      	cbz	r3, 8008c12 <_write_r+0x1e>
 8008c10:	6023      	str	r3, [r4, #0]
 8008c12:	bd38      	pop	{r3, r4, r5, pc}
 8008c14:	200070e4 	.word	0x200070e4

08008c18 <__errno>:
 8008c18:	4b01      	ldr	r3, [pc, #4]	@ (8008c20 <__errno+0x8>)
 8008c1a:	6818      	ldr	r0, [r3, #0]
 8008c1c:	4770      	bx	lr
 8008c1e:	bf00      	nop
 8008c20:	20000198 	.word	0x20000198

08008c24 <__libc_init_array>:
 8008c24:	b570      	push	{r4, r5, r6, lr}
 8008c26:	4d0d      	ldr	r5, [pc, #52]	@ (8008c5c <__libc_init_array+0x38>)
 8008c28:	4c0d      	ldr	r4, [pc, #52]	@ (8008c60 <__libc_init_array+0x3c>)
 8008c2a:	1b64      	subs	r4, r4, r5
 8008c2c:	10a4      	asrs	r4, r4, #2
 8008c2e:	2600      	movs	r6, #0
 8008c30:	42a6      	cmp	r6, r4
 8008c32:	d109      	bne.n	8008c48 <__libc_init_array+0x24>
 8008c34:	4d0b      	ldr	r5, [pc, #44]	@ (8008c64 <__libc_init_array+0x40>)
 8008c36:	4c0c      	ldr	r4, [pc, #48]	@ (8008c68 <__libc_init_array+0x44>)
 8008c38:	f002 fd56 	bl	800b6e8 <_init>
 8008c3c:	1b64      	subs	r4, r4, r5
 8008c3e:	10a4      	asrs	r4, r4, #2
 8008c40:	2600      	movs	r6, #0
 8008c42:	42a6      	cmp	r6, r4
 8008c44:	d105      	bne.n	8008c52 <__libc_init_array+0x2e>
 8008c46:	bd70      	pop	{r4, r5, r6, pc}
 8008c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c4c:	4798      	blx	r3
 8008c4e:	3601      	adds	r6, #1
 8008c50:	e7ee      	b.n	8008c30 <__libc_init_array+0xc>
 8008c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c56:	4798      	blx	r3
 8008c58:	3601      	adds	r6, #1
 8008c5a:	e7f2      	b.n	8008c42 <__libc_init_array+0x1e>
 8008c5c:	0800c044 	.word	0x0800c044
 8008c60:	0800c044 	.word	0x0800c044
 8008c64:	0800c044 	.word	0x0800c044
 8008c68:	0800c048 	.word	0x0800c048

08008c6c <__retarget_lock_init_recursive>:
 8008c6c:	4770      	bx	lr

08008c6e <__retarget_lock_acquire_recursive>:
 8008c6e:	4770      	bx	lr

08008c70 <__retarget_lock_release_recursive>:
 8008c70:	4770      	bx	lr

08008c72 <memcpy>:
 8008c72:	440a      	add	r2, r1
 8008c74:	4291      	cmp	r1, r2
 8008c76:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c7a:	d100      	bne.n	8008c7e <memcpy+0xc>
 8008c7c:	4770      	bx	lr
 8008c7e:	b510      	push	{r4, lr}
 8008c80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c88:	4291      	cmp	r1, r2
 8008c8a:	d1f9      	bne.n	8008c80 <memcpy+0xe>
 8008c8c:	bd10      	pop	{r4, pc}
	...

08008c90 <nan>:
 8008c90:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008c98 <nan+0x8>
 8008c94:	4770      	bx	lr
 8008c96:	bf00      	nop
 8008c98:	00000000 	.word	0x00000000
 8008c9c:	7ff80000 	.word	0x7ff80000

08008ca0 <nanf>:
 8008ca0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008ca8 <nanf+0x8>
 8008ca4:	4770      	bx	lr
 8008ca6:	bf00      	nop
 8008ca8:	7fc00000 	.word	0x7fc00000

08008cac <__assert_func>:
 8008cac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008cae:	4614      	mov	r4, r2
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	4b09      	ldr	r3, [pc, #36]	@ (8008cd8 <__assert_func+0x2c>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4605      	mov	r5, r0
 8008cb8:	68d8      	ldr	r0, [r3, #12]
 8008cba:	b954      	cbnz	r4, 8008cd2 <__assert_func+0x26>
 8008cbc:	4b07      	ldr	r3, [pc, #28]	@ (8008cdc <__assert_func+0x30>)
 8008cbe:	461c      	mov	r4, r3
 8008cc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008cc4:	9100      	str	r1, [sp, #0]
 8008cc6:	462b      	mov	r3, r5
 8008cc8:	4905      	ldr	r1, [pc, #20]	@ (8008ce0 <__assert_func+0x34>)
 8008cca:	f002 f9e3 	bl	800b094 <fiprintf>
 8008cce:	f002 fa1d 	bl	800b10c <abort>
 8008cd2:	4b04      	ldr	r3, [pc, #16]	@ (8008ce4 <__assert_func+0x38>)
 8008cd4:	e7f4      	b.n	8008cc0 <__assert_func+0x14>
 8008cd6:	bf00      	nop
 8008cd8:	20000198 	.word	0x20000198
 8008cdc:	0800bcf5 	.word	0x0800bcf5
 8008ce0:	0800bcc7 	.word	0x0800bcc7
 8008ce4:	0800bcba 	.word	0x0800bcba

08008ce8 <quorem>:
 8008ce8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cec:	6903      	ldr	r3, [r0, #16]
 8008cee:	690c      	ldr	r4, [r1, #16]
 8008cf0:	42a3      	cmp	r3, r4
 8008cf2:	4607      	mov	r7, r0
 8008cf4:	db7e      	blt.n	8008df4 <quorem+0x10c>
 8008cf6:	3c01      	subs	r4, #1
 8008cf8:	f101 0814 	add.w	r8, r1, #20
 8008cfc:	00a3      	lsls	r3, r4, #2
 8008cfe:	f100 0514 	add.w	r5, r0, #20
 8008d02:	9300      	str	r3, [sp, #0]
 8008d04:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d08:	9301      	str	r3, [sp, #4]
 8008d0a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008d0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d12:	3301      	adds	r3, #1
 8008d14:	429a      	cmp	r2, r3
 8008d16:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008d1a:	fbb2 f6f3 	udiv	r6, r2, r3
 8008d1e:	d32e      	bcc.n	8008d7e <quorem+0x96>
 8008d20:	f04f 0a00 	mov.w	sl, #0
 8008d24:	46c4      	mov	ip, r8
 8008d26:	46ae      	mov	lr, r5
 8008d28:	46d3      	mov	fp, sl
 8008d2a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008d2e:	b298      	uxth	r0, r3
 8008d30:	fb06 a000 	mla	r0, r6, r0, sl
 8008d34:	0c02      	lsrs	r2, r0, #16
 8008d36:	0c1b      	lsrs	r3, r3, #16
 8008d38:	fb06 2303 	mla	r3, r6, r3, r2
 8008d3c:	f8de 2000 	ldr.w	r2, [lr]
 8008d40:	b280      	uxth	r0, r0
 8008d42:	b292      	uxth	r2, r2
 8008d44:	1a12      	subs	r2, r2, r0
 8008d46:	445a      	add	r2, fp
 8008d48:	f8de 0000 	ldr.w	r0, [lr]
 8008d4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008d56:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008d5a:	b292      	uxth	r2, r2
 8008d5c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008d60:	45e1      	cmp	r9, ip
 8008d62:	f84e 2b04 	str.w	r2, [lr], #4
 8008d66:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008d6a:	d2de      	bcs.n	8008d2a <quorem+0x42>
 8008d6c:	9b00      	ldr	r3, [sp, #0]
 8008d6e:	58eb      	ldr	r3, [r5, r3]
 8008d70:	b92b      	cbnz	r3, 8008d7e <quorem+0x96>
 8008d72:	9b01      	ldr	r3, [sp, #4]
 8008d74:	3b04      	subs	r3, #4
 8008d76:	429d      	cmp	r5, r3
 8008d78:	461a      	mov	r2, r3
 8008d7a:	d32f      	bcc.n	8008ddc <quorem+0xf4>
 8008d7c:	613c      	str	r4, [r7, #16]
 8008d7e:	4638      	mov	r0, r7
 8008d80:	f001 fd0e 	bl	800a7a0 <__mcmp>
 8008d84:	2800      	cmp	r0, #0
 8008d86:	db25      	blt.n	8008dd4 <quorem+0xec>
 8008d88:	4629      	mov	r1, r5
 8008d8a:	2000      	movs	r0, #0
 8008d8c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008d90:	f8d1 c000 	ldr.w	ip, [r1]
 8008d94:	fa1f fe82 	uxth.w	lr, r2
 8008d98:	fa1f f38c 	uxth.w	r3, ip
 8008d9c:	eba3 030e 	sub.w	r3, r3, lr
 8008da0:	4403      	add	r3, r0
 8008da2:	0c12      	lsrs	r2, r2, #16
 8008da4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008da8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008db2:	45c1      	cmp	r9, r8
 8008db4:	f841 3b04 	str.w	r3, [r1], #4
 8008db8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008dbc:	d2e6      	bcs.n	8008d8c <quorem+0xa4>
 8008dbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008dc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008dc6:	b922      	cbnz	r2, 8008dd2 <quorem+0xea>
 8008dc8:	3b04      	subs	r3, #4
 8008dca:	429d      	cmp	r5, r3
 8008dcc:	461a      	mov	r2, r3
 8008dce:	d30b      	bcc.n	8008de8 <quorem+0x100>
 8008dd0:	613c      	str	r4, [r7, #16]
 8008dd2:	3601      	adds	r6, #1
 8008dd4:	4630      	mov	r0, r6
 8008dd6:	b003      	add	sp, #12
 8008dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ddc:	6812      	ldr	r2, [r2, #0]
 8008dde:	3b04      	subs	r3, #4
 8008de0:	2a00      	cmp	r2, #0
 8008de2:	d1cb      	bne.n	8008d7c <quorem+0x94>
 8008de4:	3c01      	subs	r4, #1
 8008de6:	e7c6      	b.n	8008d76 <quorem+0x8e>
 8008de8:	6812      	ldr	r2, [r2, #0]
 8008dea:	3b04      	subs	r3, #4
 8008dec:	2a00      	cmp	r2, #0
 8008dee:	d1ef      	bne.n	8008dd0 <quorem+0xe8>
 8008df0:	3c01      	subs	r4, #1
 8008df2:	e7ea      	b.n	8008dca <quorem+0xe2>
 8008df4:	2000      	movs	r0, #0
 8008df6:	e7ee      	b.n	8008dd6 <quorem+0xee>

08008df8 <_dtoa_r>:
 8008df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dfc:	69c7      	ldr	r7, [r0, #28]
 8008dfe:	b099      	sub	sp, #100	@ 0x64
 8008e00:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008e04:	ec55 4b10 	vmov	r4, r5, d0
 8008e08:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008e0a:	9109      	str	r1, [sp, #36]	@ 0x24
 8008e0c:	4683      	mov	fp, r0
 8008e0e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008e10:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008e12:	b97f      	cbnz	r7, 8008e34 <_dtoa_r+0x3c>
 8008e14:	2010      	movs	r0, #16
 8008e16:	f001 f937 	bl	800a088 <malloc>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008e20:	b920      	cbnz	r0, 8008e2c <_dtoa_r+0x34>
 8008e22:	4ba7      	ldr	r3, [pc, #668]	@ (80090c0 <_dtoa_r+0x2c8>)
 8008e24:	21ef      	movs	r1, #239	@ 0xef
 8008e26:	48a7      	ldr	r0, [pc, #668]	@ (80090c4 <_dtoa_r+0x2cc>)
 8008e28:	f7ff ff40 	bl	8008cac <__assert_func>
 8008e2c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008e30:	6007      	str	r7, [r0, #0]
 8008e32:	60c7      	str	r7, [r0, #12]
 8008e34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008e38:	6819      	ldr	r1, [r3, #0]
 8008e3a:	b159      	cbz	r1, 8008e54 <_dtoa_r+0x5c>
 8008e3c:	685a      	ldr	r2, [r3, #4]
 8008e3e:	604a      	str	r2, [r1, #4]
 8008e40:	2301      	movs	r3, #1
 8008e42:	4093      	lsls	r3, r2
 8008e44:	608b      	str	r3, [r1, #8]
 8008e46:	4658      	mov	r0, fp
 8008e48:	f001 fa26 	bl	800a298 <_Bfree>
 8008e4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008e50:	2200      	movs	r2, #0
 8008e52:	601a      	str	r2, [r3, #0]
 8008e54:	1e2b      	subs	r3, r5, #0
 8008e56:	bfb9      	ittee	lt
 8008e58:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008e5c:	9303      	strlt	r3, [sp, #12]
 8008e5e:	2300      	movge	r3, #0
 8008e60:	6033      	strge	r3, [r6, #0]
 8008e62:	9f03      	ldr	r7, [sp, #12]
 8008e64:	4b98      	ldr	r3, [pc, #608]	@ (80090c8 <_dtoa_r+0x2d0>)
 8008e66:	bfbc      	itt	lt
 8008e68:	2201      	movlt	r2, #1
 8008e6a:	6032      	strlt	r2, [r6, #0]
 8008e6c:	43bb      	bics	r3, r7
 8008e6e:	d112      	bne.n	8008e96 <_dtoa_r+0x9e>
 8008e70:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008e72:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008e76:	6013      	str	r3, [r2, #0]
 8008e78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008e7c:	4323      	orrs	r3, r4
 8008e7e:	f000 854d 	beq.w	800991c <_dtoa_r+0xb24>
 8008e82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008e84:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80090dc <_dtoa_r+0x2e4>
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	f000 854f 	beq.w	800992c <_dtoa_r+0xb34>
 8008e8e:	f10a 0303 	add.w	r3, sl, #3
 8008e92:	f000 bd49 	b.w	8009928 <_dtoa_r+0xb30>
 8008e96:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	ec51 0b17 	vmov	r0, r1, d7
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008ea6:	f7f7 fe2f 	bl	8000b08 <__aeabi_dcmpeq>
 8008eaa:	4680      	mov	r8, r0
 8008eac:	b158      	cbz	r0, 8008ec6 <_dtoa_r+0xce>
 8008eae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	6013      	str	r3, [r2, #0]
 8008eb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008eb6:	b113      	cbz	r3, 8008ebe <_dtoa_r+0xc6>
 8008eb8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008eba:	4b84      	ldr	r3, [pc, #528]	@ (80090cc <_dtoa_r+0x2d4>)
 8008ebc:	6013      	str	r3, [r2, #0]
 8008ebe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80090e0 <_dtoa_r+0x2e8>
 8008ec2:	f000 bd33 	b.w	800992c <_dtoa_r+0xb34>
 8008ec6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008eca:	aa16      	add	r2, sp, #88	@ 0x58
 8008ecc:	a917      	add	r1, sp, #92	@ 0x5c
 8008ece:	4658      	mov	r0, fp
 8008ed0:	f001 fd86 	bl	800a9e0 <__d2b>
 8008ed4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008ed8:	4681      	mov	r9, r0
 8008eda:	2e00      	cmp	r6, #0
 8008edc:	d077      	beq.n	8008fce <_dtoa_r+0x1d6>
 8008ede:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ee0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008ee4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ee8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008eec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008ef0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008ef4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008ef8:	4619      	mov	r1, r3
 8008efa:	2200      	movs	r2, #0
 8008efc:	4b74      	ldr	r3, [pc, #464]	@ (80090d0 <_dtoa_r+0x2d8>)
 8008efe:	f7f7 f9e3 	bl	80002c8 <__aeabi_dsub>
 8008f02:	a369      	add	r3, pc, #420	@ (adr r3, 80090a8 <_dtoa_r+0x2b0>)
 8008f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f08:	f7f7 fb96 	bl	8000638 <__aeabi_dmul>
 8008f0c:	a368      	add	r3, pc, #416	@ (adr r3, 80090b0 <_dtoa_r+0x2b8>)
 8008f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f12:	f7f7 f9db 	bl	80002cc <__adddf3>
 8008f16:	4604      	mov	r4, r0
 8008f18:	4630      	mov	r0, r6
 8008f1a:	460d      	mov	r5, r1
 8008f1c:	f7f7 fb22 	bl	8000564 <__aeabi_i2d>
 8008f20:	a365      	add	r3, pc, #404	@ (adr r3, 80090b8 <_dtoa_r+0x2c0>)
 8008f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f26:	f7f7 fb87 	bl	8000638 <__aeabi_dmul>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	4620      	mov	r0, r4
 8008f30:	4629      	mov	r1, r5
 8008f32:	f7f7 f9cb 	bl	80002cc <__adddf3>
 8008f36:	4604      	mov	r4, r0
 8008f38:	460d      	mov	r5, r1
 8008f3a:	f7f7 fe2d 	bl	8000b98 <__aeabi_d2iz>
 8008f3e:	2200      	movs	r2, #0
 8008f40:	4607      	mov	r7, r0
 8008f42:	2300      	movs	r3, #0
 8008f44:	4620      	mov	r0, r4
 8008f46:	4629      	mov	r1, r5
 8008f48:	f7f7 fde8 	bl	8000b1c <__aeabi_dcmplt>
 8008f4c:	b140      	cbz	r0, 8008f60 <_dtoa_r+0x168>
 8008f4e:	4638      	mov	r0, r7
 8008f50:	f7f7 fb08 	bl	8000564 <__aeabi_i2d>
 8008f54:	4622      	mov	r2, r4
 8008f56:	462b      	mov	r3, r5
 8008f58:	f7f7 fdd6 	bl	8000b08 <__aeabi_dcmpeq>
 8008f5c:	b900      	cbnz	r0, 8008f60 <_dtoa_r+0x168>
 8008f5e:	3f01      	subs	r7, #1
 8008f60:	2f16      	cmp	r7, #22
 8008f62:	d851      	bhi.n	8009008 <_dtoa_r+0x210>
 8008f64:	4b5b      	ldr	r3, [pc, #364]	@ (80090d4 <_dtoa_r+0x2dc>)
 8008f66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f72:	f7f7 fdd3 	bl	8000b1c <__aeabi_dcmplt>
 8008f76:	2800      	cmp	r0, #0
 8008f78:	d048      	beq.n	800900c <_dtoa_r+0x214>
 8008f7a:	3f01      	subs	r7, #1
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008f80:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008f82:	1b9b      	subs	r3, r3, r6
 8008f84:	1e5a      	subs	r2, r3, #1
 8008f86:	bf44      	itt	mi
 8008f88:	f1c3 0801 	rsbmi	r8, r3, #1
 8008f8c:	2300      	movmi	r3, #0
 8008f8e:	9208      	str	r2, [sp, #32]
 8008f90:	bf54      	ite	pl
 8008f92:	f04f 0800 	movpl.w	r8, #0
 8008f96:	9308      	strmi	r3, [sp, #32]
 8008f98:	2f00      	cmp	r7, #0
 8008f9a:	db39      	blt.n	8009010 <_dtoa_r+0x218>
 8008f9c:	9b08      	ldr	r3, [sp, #32]
 8008f9e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008fa0:	443b      	add	r3, r7
 8008fa2:	9308      	str	r3, [sp, #32]
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008faa:	2b09      	cmp	r3, #9
 8008fac:	d864      	bhi.n	8009078 <_dtoa_r+0x280>
 8008fae:	2b05      	cmp	r3, #5
 8008fb0:	bfc4      	itt	gt
 8008fb2:	3b04      	subgt	r3, #4
 8008fb4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008fb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fb8:	f1a3 0302 	sub.w	r3, r3, #2
 8008fbc:	bfcc      	ite	gt
 8008fbe:	2400      	movgt	r4, #0
 8008fc0:	2401      	movle	r4, #1
 8008fc2:	2b03      	cmp	r3, #3
 8008fc4:	d863      	bhi.n	800908e <_dtoa_r+0x296>
 8008fc6:	e8df f003 	tbb	[pc, r3]
 8008fca:	372a      	.short	0x372a
 8008fcc:	5535      	.short	0x5535
 8008fce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008fd2:	441e      	add	r6, r3
 8008fd4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008fd8:	2b20      	cmp	r3, #32
 8008fda:	bfc1      	itttt	gt
 8008fdc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008fe0:	409f      	lslgt	r7, r3
 8008fe2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008fe6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008fea:	bfd6      	itet	le
 8008fec:	f1c3 0320 	rsble	r3, r3, #32
 8008ff0:	ea47 0003 	orrgt.w	r0, r7, r3
 8008ff4:	fa04 f003 	lslle.w	r0, r4, r3
 8008ff8:	f7f7 faa4 	bl	8000544 <__aeabi_ui2d>
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009002:	3e01      	subs	r6, #1
 8009004:	9214      	str	r2, [sp, #80]	@ 0x50
 8009006:	e777      	b.n	8008ef8 <_dtoa_r+0x100>
 8009008:	2301      	movs	r3, #1
 800900a:	e7b8      	b.n	8008f7e <_dtoa_r+0x186>
 800900c:	9012      	str	r0, [sp, #72]	@ 0x48
 800900e:	e7b7      	b.n	8008f80 <_dtoa_r+0x188>
 8009010:	427b      	negs	r3, r7
 8009012:	930a      	str	r3, [sp, #40]	@ 0x28
 8009014:	2300      	movs	r3, #0
 8009016:	eba8 0807 	sub.w	r8, r8, r7
 800901a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800901c:	e7c4      	b.n	8008fa8 <_dtoa_r+0x1b0>
 800901e:	2300      	movs	r3, #0
 8009020:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009022:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009024:	2b00      	cmp	r3, #0
 8009026:	dc35      	bgt.n	8009094 <_dtoa_r+0x29c>
 8009028:	2301      	movs	r3, #1
 800902a:	9300      	str	r3, [sp, #0]
 800902c:	9307      	str	r3, [sp, #28]
 800902e:	461a      	mov	r2, r3
 8009030:	920e      	str	r2, [sp, #56]	@ 0x38
 8009032:	e00b      	b.n	800904c <_dtoa_r+0x254>
 8009034:	2301      	movs	r3, #1
 8009036:	e7f3      	b.n	8009020 <_dtoa_r+0x228>
 8009038:	2300      	movs	r3, #0
 800903a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800903c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800903e:	18fb      	adds	r3, r7, r3
 8009040:	9300      	str	r3, [sp, #0]
 8009042:	3301      	adds	r3, #1
 8009044:	2b01      	cmp	r3, #1
 8009046:	9307      	str	r3, [sp, #28]
 8009048:	bfb8      	it	lt
 800904a:	2301      	movlt	r3, #1
 800904c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009050:	2100      	movs	r1, #0
 8009052:	2204      	movs	r2, #4
 8009054:	f102 0514 	add.w	r5, r2, #20
 8009058:	429d      	cmp	r5, r3
 800905a:	d91f      	bls.n	800909c <_dtoa_r+0x2a4>
 800905c:	6041      	str	r1, [r0, #4]
 800905e:	4658      	mov	r0, fp
 8009060:	f001 f8da 	bl	800a218 <_Balloc>
 8009064:	4682      	mov	sl, r0
 8009066:	2800      	cmp	r0, #0
 8009068:	d13c      	bne.n	80090e4 <_dtoa_r+0x2ec>
 800906a:	4b1b      	ldr	r3, [pc, #108]	@ (80090d8 <_dtoa_r+0x2e0>)
 800906c:	4602      	mov	r2, r0
 800906e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009072:	e6d8      	b.n	8008e26 <_dtoa_r+0x2e>
 8009074:	2301      	movs	r3, #1
 8009076:	e7e0      	b.n	800903a <_dtoa_r+0x242>
 8009078:	2401      	movs	r4, #1
 800907a:	2300      	movs	r3, #0
 800907c:	9309      	str	r3, [sp, #36]	@ 0x24
 800907e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009080:	f04f 33ff 	mov.w	r3, #4294967295
 8009084:	9300      	str	r3, [sp, #0]
 8009086:	9307      	str	r3, [sp, #28]
 8009088:	2200      	movs	r2, #0
 800908a:	2312      	movs	r3, #18
 800908c:	e7d0      	b.n	8009030 <_dtoa_r+0x238>
 800908e:	2301      	movs	r3, #1
 8009090:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009092:	e7f5      	b.n	8009080 <_dtoa_r+0x288>
 8009094:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009096:	9300      	str	r3, [sp, #0]
 8009098:	9307      	str	r3, [sp, #28]
 800909a:	e7d7      	b.n	800904c <_dtoa_r+0x254>
 800909c:	3101      	adds	r1, #1
 800909e:	0052      	lsls	r2, r2, #1
 80090a0:	e7d8      	b.n	8009054 <_dtoa_r+0x25c>
 80090a2:	bf00      	nop
 80090a4:	f3af 8000 	nop.w
 80090a8:	636f4361 	.word	0x636f4361
 80090ac:	3fd287a7 	.word	0x3fd287a7
 80090b0:	8b60c8b3 	.word	0x8b60c8b3
 80090b4:	3fc68a28 	.word	0x3fc68a28
 80090b8:	509f79fb 	.word	0x509f79fb
 80090bc:	3fd34413 	.word	0x3fd34413
 80090c0:	0800bc41 	.word	0x0800bc41
 80090c4:	0800bd03 	.word	0x0800bd03
 80090c8:	7ff00000 	.word	0x7ff00000
 80090cc:	0800bc19 	.word	0x0800bc19
 80090d0:	3ff80000 	.word	0x3ff80000
 80090d4:	0800be60 	.word	0x0800be60
 80090d8:	0800bd5b 	.word	0x0800bd5b
 80090dc:	0800bcff 	.word	0x0800bcff
 80090e0:	0800bc18 	.word	0x0800bc18
 80090e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80090e8:	6018      	str	r0, [r3, #0]
 80090ea:	9b07      	ldr	r3, [sp, #28]
 80090ec:	2b0e      	cmp	r3, #14
 80090ee:	f200 80a4 	bhi.w	800923a <_dtoa_r+0x442>
 80090f2:	2c00      	cmp	r4, #0
 80090f4:	f000 80a1 	beq.w	800923a <_dtoa_r+0x442>
 80090f8:	2f00      	cmp	r7, #0
 80090fa:	dd33      	ble.n	8009164 <_dtoa_r+0x36c>
 80090fc:	4bad      	ldr	r3, [pc, #692]	@ (80093b4 <_dtoa_r+0x5bc>)
 80090fe:	f007 020f 	and.w	r2, r7, #15
 8009102:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009106:	ed93 7b00 	vldr	d7, [r3]
 800910a:	05f8      	lsls	r0, r7, #23
 800910c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009110:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009114:	d516      	bpl.n	8009144 <_dtoa_r+0x34c>
 8009116:	4ba8      	ldr	r3, [pc, #672]	@ (80093b8 <_dtoa_r+0x5c0>)
 8009118:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800911c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009120:	f7f7 fbb4 	bl	800088c <__aeabi_ddiv>
 8009124:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009128:	f004 040f 	and.w	r4, r4, #15
 800912c:	2603      	movs	r6, #3
 800912e:	4da2      	ldr	r5, [pc, #648]	@ (80093b8 <_dtoa_r+0x5c0>)
 8009130:	b954      	cbnz	r4, 8009148 <_dtoa_r+0x350>
 8009132:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800913a:	f7f7 fba7 	bl	800088c <__aeabi_ddiv>
 800913e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009142:	e028      	b.n	8009196 <_dtoa_r+0x39e>
 8009144:	2602      	movs	r6, #2
 8009146:	e7f2      	b.n	800912e <_dtoa_r+0x336>
 8009148:	07e1      	lsls	r1, r4, #31
 800914a:	d508      	bpl.n	800915e <_dtoa_r+0x366>
 800914c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009150:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009154:	f7f7 fa70 	bl	8000638 <__aeabi_dmul>
 8009158:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800915c:	3601      	adds	r6, #1
 800915e:	1064      	asrs	r4, r4, #1
 8009160:	3508      	adds	r5, #8
 8009162:	e7e5      	b.n	8009130 <_dtoa_r+0x338>
 8009164:	f000 80d2 	beq.w	800930c <_dtoa_r+0x514>
 8009168:	427c      	negs	r4, r7
 800916a:	4b92      	ldr	r3, [pc, #584]	@ (80093b4 <_dtoa_r+0x5bc>)
 800916c:	4d92      	ldr	r5, [pc, #584]	@ (80093b8 <_dtoa_r+0x5c0>)
 800916e:	f004 020f 	and.w	r2, r4, #15
 8009172:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800917e:	f7f7 fa5b 	bl	8000638 <__aeabi_dmul>
 8009182:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009186:	1124      	asrs	r4, r4, #4
 8009188:	2300      	movs	r3, #0
 800918a:	2602      	movs	r6, #2
 800918c:	2c00      	cmp	r4, #0
 800918e:	f040 80b2 	bne.w	80092f6 <_dtoa_r+0x4fe>
 8009192:	2b00      	cmp	r3, #0
 8009194:	d1d3      	bne.n	800913e <_dtoa_r+0x346>
 8009196:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009198:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800919c:	2b00      	cmp	r3, #0
 800919e:	f000 80b7 	beq.w	8009310 <_dtoa_r+0x518>
 80091a2:	4b86      	ldr	r3, [pc, #536]	@ (80093bc <_dtoa_r+0x5c4>)
 80091a4:	2200      	movs	r2, #0
 80091a6:	4620      	mov	r0, r4
 80091a8:	4629      	mov	r1, r5
 80091aa:	f7f7 fcb7 	bl	8000b1c <__aeabi_dcmplt>
 80091ae:	2800      	cmp	r0, #0
 80091b0:	f000 80ae 	beq.w	8009310 <_dtoa_r+0x518>
 80091b4:	9b07      	ldr	r3, [sp, #28]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	f000 80aa 	beq.w	8009310 <_dtoa_r+0x518>
 80091bc:	9b00      	ldr	r3, [sp, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	dd37      	ble.n	8009232 <_dtoa_r+0x43a>
 80091c2:	1e7b      	subs	r3, r7, #1
 80091c4:	9304      	str	r3, [sp, #16]
 80091c6:	4620      	mov	r0, r4
 80091c8:	4b7d      	ldr	r3, [pc, #500]	@ (80093c0 <_dtoa_r+0x5c8>)
 80091ca:	2200      	movs	r2, #0
 80091cc:	4629      	mov	r1, r5
 80091ce:	f7f7 fa33 	bl	8000638 <__aeabi_dmul>
 80091d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091d6:	9c00      	ldr	r4, [sp, #0]
 80091d8:	3601      	adds	r6, #1
 80091da:	4630      	mov	r0, r6
 80091dc:	f7f7 f9c2 	bl	8000564 <__aeabi_i2d>
 80091e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091e4:	f7f7 fa28 	bl	8000638 <__aeabi_dmul>
 80091e8:	4b76      	ldr	r3, [pc, #472]	@ (80093c4 <_dtoa_r+0x5cc>)
 80091ea:	2200      	movs	r2, #0
 80091ec:	f7f7 f86e 	bl	80002cc <__adddf3>
 80091f0:	4605      	mov	r5, r0
 80091f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80091f6:	2c00      	cmp	r4, #0
 80091f8:	f040 808d 	bne.w	8009316 <_dtoa_r+0x51e>
 80091fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009200:	4b71      	ldr	r3, [pc, #452]	@ (80093c8 <_dtoa_r+0x5d0>)
 8009202:	2200      	movs	r2, #0
 8009204:	f7f7 f860 	bl	80002c8 <__aeabi_dsub>
 8009208:	4602      	mov	r2, r0
 800920a:	460b      	mov	r3, r1
 800920c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009210:	462a      	mov	r2, r5
 8009212:	4633      	mov	r3, r6
 8009214:	f7f7 fca0 	bl	8000b58 <__aeabi_dcmpgt>
 8009218:	2800      	cmp	r0, #0
 800921a:	f040 828b 	bne.w	8009734 <_dtoa_r+0x93c>
 800921e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009222:	462a      	mov	r2, r5
 8009224:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009228:	f7f7 fc78 	bl	8000b1c <__aeabi_dcmplt>
 800922c:	2800      	cmp	r0, #0
 800922e:	f040 8128 	bne.w	8009482 <_dtoa_r+0x68a>
 8009232:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009236:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800923a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800923c:	2b00      	cmp	r3, #0
 800923e:	f2c0 815a 	blt.w	80094f6 <_dtoa_r+0x6fe>
 8009242:	2f0e      	cmp	r7, #14
 8009244:	f300 8157 	bgt.w	80094f6 <_dtoa_r+0x6fe>
 8009248:	4b5a      	ldr	r3, [pc, #360]	@ (80093b4 <_dtoa_r+0x5bc>)
 800924a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800924e:	ed93 7b00 	vldr	d7, [r3]
 8009252:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009254:	2b00      	cmp	r3, #0
 8009256:	ed8d 7b00 	vstr	d7, [sp]
 800925a:	da03      	bge.n	8009264 <_dtoa_r+0x46c>
 800925c:	9b07      	ldr	r3, [sp, #28]
 800925e:	2b00      	cmp	r3, #0
 8009260:	f340 8101 	ble.w	8009466 <_dtoa_r+0x66e>
 8009264:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009268:	4656      	mov	r6, sl
 800926a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800926e:	4620      	mov	r0, r4
 8009270:	4629      	mov	r1, r5
 8009272:	f7f7 fb0b 	bl	800088c <__aeabi_ddiv>
 8009276:	f7f7 fc8f 	bl	8000b98 <__aeabi_d2iz>
 800927a:	4680      	mov	r8, r0
 800927c:	f7f7 f972 	bl	8000564 <__aeabi_i2d>
 8009280:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009284:	f7f7 f9d8 	bl	8000638 <__aeabi_dmul>
 8009288:	4602      	mov	r2, r0
 800928a:	460b      	mov	r3, r1
 800928c:	4620      	mov	r0, r4
 800928e:	4629      	mov	r1, r5
 8009290:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009294:	f7f7 f818 	bl	80002c8 <__aeabi_dsub>
 8009298:	f806 4b01 	strb.w	r4, [r6], #1
 800929c:	9d07      	ldr	r5, [sp, #28]
 800929e:	eba6 040a 	sub.w	r4, r6, sl
 80092a2:	42a5      	cmp	r5, r4
 80092a4:	4602      	mov	r2, r0
 80092a6:	460b      	mov	r3, r1
 80092a8:	f040 8117 	bne.w	80094da <_dtoa_r+0x6e2>
 80092ac:	f7f7 f80e 	bl	80002cc <__adddf3>
 80092b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092b4:	4604      	mov	r4, r0
 80092b6:	460d      	mov	r5, r1
 80092b8:	f7f7 fc4e 	bl	8000b58 <__aeabi_dcmpgt>
 80092bc:	2800      	cmp	r0, #0
 80092be:	f040 80f9 	bne.w	80094b4 <_dtoa_r+0x6bc>
 80092c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092c6:	4620      	mov	r0, r4
 80092c8:	4629      	mov	r1, r5
 80092ca:	f7f7 fc1d 	bl	8000b08 <__aeabi_dcmpeq>
 80092ce:	b118      	cbz	r0, 80092d8 <_dtoa_r+0x4e0>
 80092d0:	f018 0f01 	tst.w	r8, #1
 80092d4:	f040 80ee 	bne.w	80094b4 <_dtoa_r+0x6bc>
 80092d8:	4649      	mov	r1, r9
 80092da:	4658      	mov	r0, fp
 80092dc:	f000 ffdc 	bl	800a298 <_Bfree>
 80092e0:	2300      	movs	r3, #0
 80092e2:	7033      	strb	r3, [r6, #0]
 80092e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80092e6:	3701      	adds	r7, #1
 80092e8:	601f      	str	r7, [r3, #0]
 80092ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f000 831d 	beq.w	800992c <_dtoa_r+0xb34>
 80092f2:	601e      	str	r6, [r3, #0]
 80092f4:	e31a      	b.n	800992c <_dtoa_r+0xb34>
 80092f6:	07e2      	lsls	r2, r4, #31
 80092f8:	d505      	bpl.n	8009306 <_dtoa_r+0x50e>
 80092fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80092fe:	f7f7 f99b 	bl	8000638 <__aeabi_dmul>
 8009302:	3601      	adds	r6, #1
 8009304:	2301      	movs	r3, #1
 8009306:	1064      	asrs	r4, r4, #1
 8009308:	3508      	adds	r5, #8
 800930a:	e73f      	b.n	800918c <_dtoa_r+0x394>
 800930c:	2602      	movs	r6, #2
 800930e:	e742      	b.n	8009196 <_dtoa_r+0x39e>
 8009310:	9c07      	ldr	r4, [sp, #28]
 8009312:	9704      	str	r7, [sp, #16]
 8009314:	e761      	b.n	80091da <_dtoa_r+0x3e2>
 8009316:	4b27      	ldr	r3, [pc, #156]	@ (80093b4 <_dtoa_r+0x5bc>)
 8009318:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800931a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800931e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009322:	4454      	add	r4, sl
 8009324:	2900      	cmp	r1, #0
 8009326:	d053      	beq.n	80093d0 <_dtoa_r+0x5d8>
 8009328:	4928      	ldr	r1, [pc, #160]	@ (80093cc <_dtoa_r+0x5d4>)
 800932a:	2000      	movs	r0, #0
 800932c:	f7f7 faae 	bl	800088c <__aeabi_ddiv>
 8009330:	4633      	mov	r3, r6
 8009332:	462a      	mov	r2, r5
 8009334:	f7f6 ffc8 	bl	80002c8 <__aeabi_dsub>
 8009338:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800933c:	4656      	mov	r6, sl
 800933e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009342:	f7f7 fc29 	bl	8000b98 <__aeabi_d2iz>
 8009346:	4605      	mov	r5, r0
 8009348:	f7f7 f90c 	bl	8000564 <__aeabi_i2d>
 800934c:	4602      	mov	r2, r0
 800934e:	460b      	mov	r3, r1
 8009350:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009354:	f7f6 ffb8 	bl	80002c8 <__aeabi_dsub>
 8009358:	3530      	adds	r5, #48	@ 0x30
 800935a:	4602      	mov	r2, r0
 800935c:	460b      	mov	r3, r1
 800935e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009362:	f806 5b01 	strb.w	r5, [r6], #1
 8009366:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800936a:	f7f7 fbd7 	bl	8000b1c <__aeabi_dcmplt>
 800936e:	2800      	cmp	r0, #0
 8009370:	d171      	bne.n	8009456 <_dtoa_r+0x65e>
 8009372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009376:	4911      	ldr	r1, [pc, #68]	@ (80093bc <_dtoa_r+0x5c4>)
 8009378:	2000      	movs	r0, #0
 800937a:	f7f6 ffa5 	bl	80002c8 <__aeabi_dsub>
 800937e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009382:	f7f7 fbcb 	bl	8000b1c <__aeabi_dcmplt>
 8009386:	2800      	cmp	r0, #0
 8009388:	f040 8095 	bne.w	80094b6 <_dtoa_r+0x6be>
 800938c:	42a6      	cmp	r6, r4
 800938e:	f43f af50 	beq.w	8009232 <_dtoa_r+0x43a>
 8009392:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009396:	4b0a      	ldr	r3, [pc, #40]	@ (80093c0 <_dtoa_r+0x5c8>)
 8009398:	2200      	movs	r2, #0
 800939a:	f7f7 f94d 	bl	8000638 <__aeabi_dmul>
 800939e:	4b08      	ldr	r3, [pc, #32]	@ (80093c0 <_dtoa_r+0x5c8>)
 80093a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80093a4:	2200      	movs	r2, #0
 80093a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093aa:	f7f7 f945 	bl	8000638 <__aeabi_dmul>
 80093ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093b2:	e7c4      	b.n	800933e <_dtoa_r+0x546>
 80093b4:	0800be60 	.word	0x0800be60
 80093b8:	0800be38 	.word	0x0800be38
 80093bc:	3ff00000 	.word	0x3ff00000
 80093c0:	40240000 	.word	0x40240000
 80093c4:	401c0000 	.word	0x401c0000
 80093c8:	40140000 	.word	0x40140000
 80093cc:	3fe00000 	.word	0x3fe00000
 80093d0:	4631      	mov	r1, r6
 80093d2:	4628      	mov	r0, r5
 80093d4:	f7f7 f930 	bl	8000638 <__aeabi_dmul>
 80093d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80093dc:	9415      	str	r4, [sp, #84]	@ 0x54
 80093de:	4656      	mov	r6, sl
 80093e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093e4:	f7f7 fbd8 	bl	8000b98 <__aeabi_d2iz>
 80093e8:	4605      	mov	r5, r0
 80093ea:	f7f7 f8bb 	bl	8000564 <__aeabi_i2d>
 80093ee:	4602      	mov	r2, r0
 80093f0:	460b      	mov	r3, r1
 80093f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093f6:	f7f6 ff67 	bl	80002c8 <__aeabi_dsub>
 80093fa:	3530      	adds	r5, #48	@ 0x30
 80093fc:	f806 5b01 	strb.w	r5, [r6], #1
 8009400:	4602      	mov	r2, r0
 8009402:	460b      	mov	r3, r1
 8009404:	42a6      	cmp	r6, r4
 8009406:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800940a:	f04f 0200 	mov.w	r2, #0
 800940e:	d124      	bne.n	800945a <_dtoa_r+0x662>
 8009410:	4bac      	ldr	r3, [pc, #688]	@ (80096c4 <_dtoa_r+0x8cc>)
 8009412:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009416:	f7f6 ff59 	bl	80002cc <__adddf3>
 800941a:	4602      	mov	r2, r0
 800941c:	460b      	mov	r3, r1
 800941e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009422:	f7f7 fb99 	bl	8000b58 <__aeabi_dcmpgt>
 8009426:	2800      	cmp	r0, #0
 8009428:	d145      	bne.n	80094b6 <_dtoa_r+0x6be>
 800942a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800942e:	49a5      	ldr	r1, [pc, #660]	@ (80096c4 <_dtoa_r+0x8cc>)
 8009430:	2000      	movs	r0, #0
 8009432:	f7f6 ff49 	bl	80002c8 <__aeabi_dsub>
 8009436:	4602      	mov	r2, r0
 8009438:	460b      	mov	r3, r1
 800943a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800943e:	f7f7 fb6d 	bl	8000b1c <__aeabi_dcmplt>
 8009442:	2800      	cmp	r0, #0
 8009444:	f43f aef5 	beq.w	8009232 <_dtoa_r+0x43a>
 8009448:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800944a:	1e73      	subs	r3, r6, #1
 800944c:	9315      	str	r3, [sp, #84]	@ 0x54
 800944e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009452:	2b30      	cmp	r3, #48	@ 0x30
 8009454:	d0f8      	beq.n	8009448 <_dtoa_r+0x650>
 8009456:	9f04      	ldr	r7, [sp, #16]
 8009458:	e73e      	b.n	80092d8 <_dtoa_r+0x4e0>
 800945a:	4b9b      	ldr	r3, [pc, #620]	@ (80096c8 <_dtoa_r+0x8d0>)
 800945c:	f7f7 f8ec 	bl	8000638 <__aeabi_dmul>
 8009460:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009464:	e7bc      	b.n	80093e0 <_dtoa_r+0x5e8>
 8009466:	d10c      	bne.n	8009482 <_dtoa_r+0x68a>
 8009468:	4b98      	ldr	r3, [pc, #608]	@ (80096cc <_dtoa_r+0x8d4>)
 800946a:	2200      	movs	r2, #0
 800946c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009470:	f7f7 f8e2 	bl	8000638 <__aeabi_dmul>
 8009474:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009478:	f7f7 fb64 	bl	8000b44 <__aeabi_dcmpge>
 800947c:	2800      	cmp	r0, #0
 800947e:	f000 8157 	beq.w	8009730 <_dtoa_r+0x938>
 8009482:	2400      	movs	r4, #0
 8009484:	4625      	mov	r5, r4
 8009486:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009488:	43db      	mvns	r3, r3
 800948a:	9304      	str	r3, [sp, #16]
 800948c:	4656      	mov	r6, sl
 800948e:	2700      	movs	r7, #0
 8009490:	4621      	mov	r1, r4
 8009492:	4658      	mov	r0, fp
 8009494:	f000 ff00 	bl	800a298 <_Bfree>
 8009498:	2d00      	cmp	r5, #0
 800949a:	d0dc      	beq.n	8009456 <_dtoa_r+0x65e>
 800949c:	b12f      	cbz	r7, 80094aa <_dtoa_r+0x6b2>
 800949e:	42af      	cmp	r7, r5
 80094a0:	d003      	beq.n	80094aa <_dtoa_r+0x6b2>
 80094a2:	4639      	mov	r1, r7
 80094a4:	4658      	mov	r0, fp
 80094a6:	f000 fef7 	bl	800a298 <_Bfree>
 80094aa:	4629      	mov	r1, r5
 80094ac:	4658      	mov	r0, fp
 80094ae:	f000 fef3 	bl	800a298 <_Bfree>
 80094b2:	e7d0      	b.n	8009456 <_dtoa_r+0x65e>
 80094b4:	9704      	str	r7, [sp, #16]
 80094b6:	4633      	mov	r3, r6
 80094b8:	461e      	mov	r6, r3
 80094ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094be:	2a39      	cmp	r2, #57	@ 0x39
 80094c0:	d107      	bne.n	80094d2 <_dtoa_r+0x6da>
 80094c2:	459a      	cmp	sl, r3
 80094c4:	d1f8      	bne.n	80094b8 <_dtoa_r+0x6c0>
 80094c6:	9a04      	ldr	r2, [sp, #16]
 80094c8:	3201      	adds	r2, #1
 80094ca:	9204      	str	r2, [sp, #16]
 80094cc:	2230      	movs	r2, #48	@ 0x30
 80094ce:	f88a 2000 	strb.w	r2, [sl]
 80094d2:	781a      	ldrb	r2, [r3, #0]
 80094d4:	3201      	adds	r2, #1
 80094d6:	701a      	strb	r2, [r3, #0]
 80094d8:	e7bd      	b.n	8009456 <_dtoa_r+0x65e>
 80094da:	4b7b      	ldr	r3, [pc, #492]	@ (80096c8 <_dtoa_r+0x8d0>)
 80094dc:	2200      	movs	r2, #0
 80094de:	f7f7 f8ab 	bl	8000638 <__aeabi_dmul>
 80094e2:	2200      	movs	r2, #0
 80094e4:	2300      	movs	r3, #0
 80094e6:	4604      	mov	r4, r0
 80094e8:	460d      	mov	r5, r1
 80094ea:	f7f7 fb0d 	bl	8000b08 <__aeabi_dcmpeq>
 80094ee:	2800      	cmp	r0, #0
 80094f0:	f43f aebb 	beq.w	800926a <_dtoa_r+0x472>
 80094f4:	e6f0      	b.n	80092d8 <_dtoa_r+0x4e0>
 80094f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80094f8:	2a00      	cmp	r2, #0
 80094fa:	f000 80db 	beq.w	80096b4 <_dtoa_r+0x8bc>
 80094fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009500:	2a01      	cmp	r2, #1
 8009502:	f300 80bf 	bgt.w	8009684 <_dtoa_r+0x88c>
 8009506:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009508:	2a00      	cmp	r2, #0
 800950a:	f000 80b7 	beq.w	800967c <_dtoa_r+0x884>
 800950e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009512:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009514:	4646      	mov	r6, r8
 8009516:	9a08      	ldr	r2, [sp, #32]
 8009518:	2101      	movs	r1, #1
 800951a:	441a      	add	r2, r3
 800951c:	4658      	mov	r0, fp
 800951e:	4498      	add	r8, r3
 8009520:	9208      	str	r2, [sp, #32]
 8009522:	f000 ffb7 	bl	800a494 <__i2b>
 8009526:	4605      	mov	r5, r0
 8009528:	b15e      	cbz	r6, 8009542 <_dtoa_r+0x74a>
 800952a:	9b08      	ldr	r3, [sp, #32]
 800952c:	2b00      	cmp	r3, #0
 800952e:	dd08      	ble.n	8009542 <_dtoa_r+0x74a>
 8009530:	42b3      	cmp	r3, r6
 8009532:	9a08      	ldr	r2, [sp, #32]
 8009534:	bfa8      	it	ge
 8009536:	4633      	movge	r3, r6
 8009538:	eba8 0803 	sub.w	r8, r8, r3
 800953c:	1af6      	subs	r6, r6, r3
 800953e:	1ad3      	subs	r3, r2, r3
 8009540:	9308      	str	r3, [sp, #32]
 8009542:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009544:	b1f3      	cbz	r3, 8009584 <_dtoa_r+0x78c>
 8009546:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009548:	2b00      	cmp	r3, #0
 800954a:	f000 80b7 	beq.w	80096bc <_dtoa_r+0x8c4>
 800954e:	b18c      	cbz	r4, 8009574 <_dtoa_r+0x77c>
 8009550:	4629      	mov	r1, r5
 8009552:	4622      	mov	r2, r4
 8009554:	4658      	mov	r0, fp
 8009556:	f001 f85d 	bl	800a614 <__pow5mult>
 800955a:	464a      	mov	r2, r9
 800955c:	4601      	mov	r1, r0
 800955e:	4605      	mov	r5, r0
 8009560:	4658      	mov	r0, fp
 8009562:	f000 ffad 	bl	800a4c0 <__multiply>
 8009566:	4649      	mov	r1, r9
 8009568:	9004      	str	r0, [sp, #16]
 800956a:	4658      	mov	r0, fp
 800956c:	f000 fe94 	bl	800a298 <_Bfree>
 8009570:	9b04      	ldr	r3, [sp, #16]
 8009572:	4699      	mov	r9, r3
 8009574:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009576:	1b1a      	subs	r2, r3, r4
 8009578:	d004      	beq.n	8009584 <_dtoa_r+0x78c>
 800957a:	4649      	mov	r1, r9
 800957c:	4658      	mov	r0, fp
 800957e:	f001 f849 	bl	800a614 <__pow5mult>
 8009582:	4681      	mov	r9, r0
 8009584:	2101      	movs	r1, #1
 8009586:	4658      	mov	r0, fp
 8009588:	f000 ff84 	bl	800a494 <__i2b>
 800958c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800958e:	4604      	mov	r4, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	f000 81cf 	beq.w	8009934 <_dtoa_r+0xb3c>
 8009596:	461a      	mov	r2, r3
 8009598:	4601      	mov	r1, r0
 800959a:	4658      	mov	r0, fp
 800959c:	f001 f83a 	bl	800a614 <__pow5mult>
 80095a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	4604      	mov	r4, r0
 80095a6:	f300 8095 	bgt.w	80096d4 <_dtoa_r+0x8dc>
 80095aa:	9b02      	ldr	r3, [sp, #8]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	f040 8087 	bne.w	80096c0 <_dtoa_r+0x8c8>
 80095b2:	9b03      	ldr	r3, [sp, #12]
 80095b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	f040 8089 	bne.w	80096d0 <_dtoa_r+0x8d8>
 80095be:	9b03      	ldr	r3, [sp, #12]
 80095c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80095c4:	0d1b      	lsrs	r3, r3, #20
 80095c6:	051b      	lsls	r3, r3, #20
 80095c8:	b12b      	cbz	r3, 80095d6 <_dtoa_r+0x7de>
 80095ca:	9b08      	ldr	r3, [sp, #32]
 80095cc:	3301      	adds	r3, #1
 80095ce:	9308      	str	r3, [sp, #32]
 80095d0:	f108 0801 	add.w	r8, r8, #1
 80095d4:	2301      	movs	r3, #1
 80095d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80095d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095da:	2b00      	cmp	r3, #0
 80095dc:	f000 81b0 	beq.w	8009940 <_dtoa_r+0xb48>
 80095e0:	6923      	ldr	r3, [r4, #16]
 80095e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80095e6:	6918      	ldr	r0, [r3, #16]
 80095e8:	f000 ff08 	bl	800a3fc <__hi0bits>
 80095ec:	f1c0 0020 	rsb	r0, r0, #32
 80095f0:	9b08      	ldr	r3, [sp, #32]
 80095f2:	4418      	add	r0, r3
 80095f4:	f010 001f 	ands.w	r0, r0, #31
 80095f8:	d077      	beq.n	80096ea <_dtoa_r+0x8f2>
 80095fa:	f1c0 0320 	rsb	r3, r0, #32
 80095fe:	2b04      	cmp	r3, #4
 8009600:	dd6b      	ble.n	80096da <_dtoa_r+0x8e2>
 8009602:	9b08      	ldr	r3, [sp, #32]
 8009604:	f1c0 001c 	rsb	r0, r0, #28
 8009608:	4403      	add	r3, r0
 800960a:	4480      	add	r8, r0
 800960c:	4406      	add	r6, r0
 800960e:	9308      	str	r3, [sp, #32]
 8009610:	f1b8 0f00 	cmp.w	r8, #0
 8009614:	dd05      	ble.n	8009622 <_dtoa_r+0x82a>
 8009616:	4649      	mov	r1, r9
 8009618:	4642      	mov	r2, r8
 800961a:	4658      	mov	r0, fp
 800961c:	f001 f854 	bl	800a6c8 <__lshift>
 8009620:	4681      	mov	r9, r0
 8009622:	9b08      	ldr	r3, [sp, #32]
 8009624:	2b00      	cmp	r3, #0
 8009626:	dd05      	ble.n	8009634 <_dtoa_r+0x83c>
 8009628:	4621      	mov	r1, r4
 800962a:	461a      	mov	r2, r3
 800962c:	4658      	mov	r0, fp
 800962e:	f001 f84b 	bl	800a6c8 <__lshift>
 8009632:	4604      	mov	r4, r0
 8009634:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009636:	2b00      	cmp	r3, #0
 8009638:	d059      	beq.n	80096ee <_dtoa_r+0x8f6>
 800963a:	4621      	mov	r1, r4
 800963c:	4648      	mov	r0, r9
 800963e:	f001 f8af 	bl	800a7a0 <__mcmp>
 8009642:	2800      	cmp	r0, #0
 8009644:	da53      	bge.n	80096ee <_dtoa_r+0x8f6>
 8009646:	1e7b      	subs	r3, r7, #1
 8009648:	9304      	str	r3, [sp, #16]
 800964a:	4649      	mov	r1, r9
 800964c:	2300      	movs	r3, #0
 800964e:	220a      	movs	r2, #10
 8009650:	4658      	mov	r0, fp
 8009652:	f000 fe43 	bl	800a2dc <__multadd>
 8009656:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009658:	4681      	mov	r9, r0
 800965a:	2b00      	cmp	r3, #0
 800965c:	f000 8172 	beq.w	8009944 <_dtoa_r+0xb4c>
 8009660:	2300      	movs	r3, #0
 8009662:	4629      	mov	r1, r5
 8009664:	220a      	movs	r2, #10
 8009666:	4658      	mov	r0, fp
 8009668:	f000 fe38 	bl	800a2dc <__multadd>
 800966c:	9b00      	ldr	r3, [sp, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	4605      	mov	r5, r0
 8009672:	dc67      	bgt.n	8009744 <_dtoa_r+0x94c>
 8009674:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009676:	2b02      	cmp	r3, #2
 8009678:	dc41      	bgt.n	80096fe <_dtoa_r+0x906>
 800967a:	e063      	b.n	8009744 <_dtoa_r+0x94c>
 800967c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800967e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009682:	e746      	b.n	8009512 <_dtoa_r+0x71a>
 8009684:	9b07      	ldr	r3, [sp, #28]
 8009686:	1e5c      	subs	r4, r3, #1
 8009688:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800968a:	42a3      	cmp	r3, r4
 800968c:	bfbf      	itttt	lt
 800968e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009690:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009692:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009694:	1ae3      	sublt	r3, r4, r3
 8009696:	bfb4      	ite	lt
 8009698:	18d2      	addlt	r2, r2, r3
 800969a:	1b1c      	subge	r4, r3, r4
 800969c:	9b07      	ldr	r3, [sp, #28]
 800969e:	bfbc      	itt	lt
 80096a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80096a2:	2400      	movlt	r4, #0
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	bfb5      	itete	lt
 80096a8:	eba8 0603 	sublt.w	r6, r8, r3
 80096ac:	9b07      	ldrge	r3, [sp, #28]
 80096ae:	2300      	movlt	r3, #0
 80096b0:	4646      	movge	r6, r8
 80096b2:	e730      	b.n	8009516 <_dtoa_r+0x71e>
 80096b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80096b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80096b8:	4646      	mov	r6, r8
 80096ba:	e735      	b.n	8009528 <_dtoa_r+0x730>
 80096bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80096be:	e75c      	b.n	800957a <_dtoa_r+0x782>
 80096c0:	2300      	movs	r3, #0
 80096c2:	e788      	b.n	80095d6 <_dtoa_r+0x7de>
 80096c4:	3fe00000 	.word	0x3fe00000
 80096c8:	40240000 	.word	0x40240000
 80096cc:	40140000 	.word	0x40140000
 80096d0:	9b02      	ldr	r3, [sp, #8]
 80096d2:	e780      	b.n	80095d6 <_dtoa_r+0x7de>
 80096d4:	2300      	movs	r3, #0
 80096d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80096d8:	e782      	b.n	80095e0 <_dtoa_r+0x7e8>
 80096da:	d099      	beq.n	8009610 <_dtoa_r+0x818>
 80096dc:	9a08      	ldr	r2, [sp, #32]
 80096de:	331c      	adds	r3, #28
 80096e0:	441a      	add	r2, r3
 80096e2:	4498      	add	r8, r3
 80096e4:	441e      	add	r6, r3
 80096e6:	9208      	str	r2, [sp, #32]
 80096e8:	e792      	b.n	8009610 <_dtoa_r+0x818>
 80096ea:	4603      	mov	r3, r0
 80096ec:	e7f6      	b.n	80096dc <_dtoa_r+0x8e4>
 80096ee:	9b07      	ldr	r3, [sp, #28]
 80096f0:	9704      	str	r7, [sp, #16]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	dc20      	bgt.n	8009738 <_dtoa_r+0x940>
 80096f6:	9300      	str	r3, [sp, #0]
 80096f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096fa:	2b02      	cmp	r3, #2
 80096fc:	dd1e      	ble.n	800973c <_dtoa_r+0x944>
 80096fe:	9b00      	ldr	r3, [sp, #0]
 8009700:	2b00      	cmp	r3, #0
 8009702:	f47f aec0 	bne.w	8009486 <_dtoa_r+0x68e>
 8009706:	4621      	mov	r1, r4
 8009708:	2205      	movs	r2, #5
 800970a:	4658      	mov	r0, fp
 800970c:	f000 fde6 	bl	800a2dc <__multadd>
 8009710:	4601      	mov	r1, r0
 8009712:	4604      	mov	r4, r0
 8009714:	4648      	mov	r0, r9
 8009716:	f001 f843 	bl	800a7a0 <__mcmp>
 800971a:	2800      	cmp	r0, #0
 800971c:	f77f aeb3 	ble.w	8009486 <_dtoa_r+0x68e>
 8009720:	4656      	mov	r6, sl
 8009722:	2331      	movs	r3, #49	@ 0x31
 8009724:	f806 3b01 	strb.w	r3, [r6], #1
 8009728:	9b04      	ldr	r3, [sp, #16]
 800972a:	3301      	adds	r3, #1
 800972c:	9304      	str	r3, [sp, #16]
 800972e:	e6ae      	b.n	800948e <_dtoa_r+0x696>
 8009730:	9c07      	ldr	r4, [sp, #28]
 8009732:	9704      	str	r7, [sp, #16]
 8009734:	4625      	mov	r5, r4
 8009736:	e7f3      	b.n	8009720 <_dtoa_r+0x928>
 8009738:	9b07      	ldr	r3, [sp, #28]
 800973a:	9300      	str	r3, [sp, #0]
 800973c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800973e:	2b00      	cmp	r3, #0
 8009740:	f000 8104 	beq.w	800994c <_dtoa_r+0xb54>
 8009744:	2e00      	cmp	r6, #0
 8009746:	dd05      	ble.n	8009754 <_dtoa_r+0x95c>
 8009748:	4629      	mov	r1, r5
 800974a:	4632      	mov	r2, r6
 800974c:	4658      	mov	r0, fp
 800974e:	f000 ffbb 	bl	800a6c8 <__lshift>
 8009752:	4605      	mov	r5, r0
 8009754:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009756:	2b00      	cmp	r3, #0
 8009758:	d05a      	beq.n	8009810 <_dtoa_r+0xa18>
 800975a:	6869      	ldr	r1, [r5, #4]
 800975c:	4658      	mov	r0, fp
 800975e:	f000 fd5b 	bl	800a218 <_Balloc>
 8009762:	4606      	mov	r6, r0
 8009764:	b928      	cbnz	r0, 8009772 <_dtoa_r+0x97a>
 8009766:	4b84      	ldr	r3, [pc, #528]	@ (8009978 <_dtoa_r+0xb80>)
 8009768:	4602      	mov	r2, r0
 800976a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800976e:	f7ff bb5a 	b.w	8008e26 <_dtoa_r+0x2e>
 8009772:	692a      	ldr	r2, [r5, #16]
 8009774:	3202      	adds	r2, #2
 8009776:	0092      	lsls	r2, r2, #2
 8009778:	f105 010c 	add.w	r1, r5, #12
 800977c:	300c      	adds	r0, #12
 800977e:	f7ff fa78 	bl	8008c72 <memcpy>
 8009782:	2201      	movs	r2, #1
 8009784:	4631      	mov	r1, r6
 8009786:	4658      	mov	r0, fp
 8009788:	f000 ff9e 	bl	800a6c8 <__lshift>
 800978c:	f10a 0301 	add.w	r3, sl, #1
 8009790:	9307      	str	r3, [sp, #28]
 8009792:	9b00      	ldr	r3, [sp, #0]
 8009794:	4453      	add	r3, sl
 8009796:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009798:	9b02      	ldr	r3, [sp, #8]
 800979a:	f003 0301 	and.w	r3, r3, #1
 800979e:	462f      	mov	r7, r5
 80097a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80097a2:	4605      	mov	r5, r0
 80097a4:	9b07      	ldr	r3, [sp, #28]
 80097a6:	4621      	mov	r1, r4
 80097a8:	3b01      	subs	r3, #1
 80097aa:	4648      	mov	r0, r9
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	f7ff fa9b 	bl	8008ce8 <quorem>
 80097b2:	4639      	mov	r1, r7
 80097b4:	9002      	str	r0, [sp, #8]
 80097b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80097ba:	4648      	mov	r0, r9
 80097bc:	f000 fff0 	bl	800a7a0 <__mcmp>
 80097c0:	462a      	mov	r2, r5
 80097c2:	9008      	str	r0, [sp, #32]
 80097c4:	4621      	mov	r1, r4
 80097c6:	4658      	mov	r0, fp
 80097c8:	f001 f806 	bl	800a7d8 <__mdiff>
 80097cc:	68c2      	ldr	r2, [r0, #12]
 80097ce:	4606      	mov	r6, r0
 80097d0:	bb02      	cbnz	r2, 8009814 <_dtoa_r+0xa1c>
 80097d2:	4601      	mov	r1, r0
 80097d4:	4648      	mov	r0, r9
 80097d6:	f000 ffe3 	bl	800a7a0 <__mcmp>
 80097da:	4602      	mov	r2, r0
 80097dc:	4631      	mov	r1, r6
 80097de:	4658      	mov	r0, fp
 80097e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80097e2:	f000 fd59 	bl	800a298 <_Bfree>
 80097e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097ea:	9e07      	ldr	r6, [sp, #28]
 80097ec:	ea43 0102 	orr.w	r1, r3, r2
 80097f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097f2:	4319      	orrs	r1, r3
 80097f4:	d110      	bne.n	8009818 <_dtoa_r+0xa20>
 80097f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80097fa:	d029      	beq.n	8009850 <_dtoa_r+0xa58>
 80097fc:	9b08      	ldr	r3, [sp, #32]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	dd02      	ble.n	8009808 <_dtoa_r+0xa10>
 8009802:	9b02      	ldr	r3, [sp, #8]
 8009804:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009808:	9b00      	ldr	r3, [sp, #0]
 800980a:	f883 8000 	strb.w	r8, [r3]
 800980e:	e63f      	b.n	8009490 <_dtoa_r+0x698>
 8009810:	4628      	mov	r0, r5
 8009812:	e7bb      	b.n	800978c <_dtoa_r+0x994>
 8009814:	2201      	movs	r2, #1
 8009816:	e7e1      	b.n	80097dc <_dtoa_r+0x9e4>
 8009818:	9b08      	ldr	r3, [sp, #32]
 800981a:	2b00      	cmp	r3, #0
 800981c:	db04      	blt.n	8009828 <_dtoa_r+0xa30>
 800981e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009820:	430b      	orrs	r3, r1
 8009822:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009824:	430b      	orrs	r3, r1
 8009826:	d120      	bne.n	800986a <_dtoa_r+0xa72>
 8009828:	2a00      	cmp	r2, #0
 800982a:	dded      	ble.n	8009808 <_dtoa_r+0xa10>
 800982c:	4649      	mov	r1, r9
 800982e:	2201      	movs	r2, #1
 8009830:	4658      	mov	r0, fp
 8009832:	f000 ff49 	bl	800a6c8 <__lshift>
 8009836:	4621      	mov	r1, r4
 8009838:	4681      	mov	r9, r0
 800983a:	f000 ffb1 	bl	800a7a0 <__mcmp>
 800983e:	2800      	cmp	r0, #0
 8009840:	dc03      	bgt.n	800984a <_dtoa_r+0xa52>
 8009842:	d1e1      	bne.n	8009808 <_dtoa_r+0xa10>
 8009844:	f018 0f01 	tst.w	r8, #1
 8009848:	d0de      	beq.n	8009808 <_dtoa_r+0xa10>
 800984a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800984e:	d1d8      	bne.n	8009802 <_dtoa_r+0xa0a>
 8009850:	9a00      	ldr	r2, [sp, #0]
 8009852:	2339      	movs	r3, #57	@ 0x39
 8009854:	7013      	strb	r3, [r2, #0]
 8009856:	4633      	mov	r3, r6
 8009858:	461e      	mov	r6, r3
 800985a:	3b01      	subs	r3, #1
 800985c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009860:	2a39      	cmp	r2, #57	@ 0x39
 8009862:	d052      	beq.n	800990a <_dtoa_r+0xb12>
 8009864:	3201      	adds	r2, #1
 8009866:	701a      	strb	r2, [r3, #0]
 8009868:	e612      	b.n	8009490 <_dtoa_r+0x698>
 800986a:	2a00      	cmp	r2, #0
 800986c:	dd07      	ble.n	800987e <_dtoa_r+0xa86>
 800986e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009872:	d0ed      	beq.n	8009850 <_dtoa_r+0xa58>
 8009874:	9a00      	ldr	r2, [sp, #0]
 8009876:	f108 0301 	add.w	r3, r8, #1
 800987a:	7013      	strb	r3, [r2, #0]
 800987c:	e608      	b.n	8009490 <_dtoa_r+0x698>
 800987e:	9b07      	ldr	r3, [sp, #28]
 8009880:	9a07      	ldr	r2, [sp, #28]
 8009882:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009886:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009888:	4293      	cmp	r3, r2
 800988a:	d028      	beq.n	80098de <_dtoa_r+0xae6>
 800988c:	4649      	mov	r1, r9
 800988e:	2300      	movs	r3, #0
 8009890:	220a      	movs	r2, #10
 8009892:	4658      	mov	r0, fp
 8009894:	f000 fd22 	bl	800a2dc <__multadd>
 8009898:	42af      	cmp	r7, r5
 800989a:	4681      	mov	r9, r0
 800989c:	f04f 0300 	mov.w	r3, #0
 80098a0:	f04f 020a 	mov.w	r2, #10
 80098a4:	4639      	mov	r1, r7
 80098a6:	4658      	mov	r0, fp
 80098a8:	d107      	bne.n	80098ba <_dtoa_r+0xac2>
 80098aa:	f000 fd17 	bl	800a2dc <__multadd>
 80098ae:	4607      	mov	r7, r0
 80098b0:	4605      	mov	r5, r0
 80098b2:	9b07      	ldr	r3, [sp, #28]
 80098b4:	3301      	adds	r3, #1
 80098b6:	9307      	str	r3, [sp, #28]
 80098b8:	e774      	b.n	80097a4 <_dtoa_r+0x9ac>
 80098ba:	f000 fd0f 	bl	800a2dc <__multadd>
 80098be:	4629      	mov	r1, r5
 80098c0:	4607      	mov	r7, r0
 80098c2:	2300      	movs	r3, #0
 80098c4:	220a      	movs	r2, #10
 80098c6:	4658      	mov	r0, fp
 80098c8:	f000 fd08 	bl	800a2dc <__multadd>
 80098cc:	4605      	mov	r5, r0
 80098ce:	e7f0      	b.n	80098b2 <_dtoa_r+0xaba>
 80098d0:	9b00      	ldr	r3, [sp, #0]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	bfcc      	ite	gt
 80098d6:	461e      	movgt	r6, r3
 80098d8:	2601      	movle	r6, #1
 80098da:	4456      	add	r6, sl
 80098dc:	2700      	movs	r7, #0
 80098de:	4649      	mov	r1, r9
 80098e0:	2201      	movs	r2, #1
 80098e2:	4658      	mov	r0, fp
 80098e4:	f000 fef0 	bl	800a6c8 <__lshift>
 80098e8:	4621      	mov	r1, r4
 80098ea:	4681      	mov	r9, r0
 80098ec:	f000 ff58 	bl	800a7a0 <__mcmp>
 80098f0:	2800      	cmp	r0, #0
 80098f2:	dcb0      	bgt.n	8009856 <_dtoa_r+0xa5e>
 80098f4:	d102      	bne.n	80098fc <_dtoa_r+0xb04>
 80098f6:	f018 0f01 	tst.w	r8, #1
 80098fa:	d1ac      	bne.n	8009856 <_dtoa_r+0xa5e>
 80098fc:	4633      	mov	r3, r6
 80098fe:	461e      	mov	r6, r3
 8009900:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009904:	2a30      	cmp	r2, #48	@ 0x30
 8009906:	d0fa      	beq.n	80098fe <_dtoa_r+0xb06>
 8009908:	e5c2      	b.n	8009490 <_dtoa_r+0x698>
 800990a:	459a      	cmp	sl, r3
 800990c:	d1a4      	bne.n	8009858 <_dtoa_r+0xa60>
 800990e:	9b04      	ldr	r3, [sp, #16]
 8009910:	3301      	adds	r3, #1
 8009912:	9304      	str	r3, [sp, #16]
 8009914:	2331      	movs	r3, #49	@ 0x31
 8009916:	f88a 3000 	strb.w	r3, [sl]
 800991a:	e5b9      	b.n	8009490 <_dtoa_r+0x698>
 800991c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800991e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800997c <_dtoa_r+0xb84>
 8009922:	b11b      	cbz	r3, 800992c <_dtoa_r+0xb34>
 8009924:	f10a 0308 	add.w	r3, sl, #8
 8009928:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800992a:	6013      	str	r3, [r2, #0]
 800992c:	4650      	mov	r0, sl
 800992e:	b019      	add	sp, #100	@ 0x64
 8009930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009934:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009936:	2b01      	cmp	r3, #1
 8009938:	f77f ae37 	ble.w	80095aa <_dtoa_r+0x7b2>
 800993c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800993e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009940:	2001      	movs	r0, #1
 8009942:	e655      	b.n	80095f0 <_dtoa_r+0x7f8>
 8009944:	9b00      	ldr	r3, [sp, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	f77f aed6 	ble.w	80096f8 <_dtoa_r+0x900>
 800994c:	4656      	mov	r6, sl
 800994e:	4621      	mov	r1, r4
 8009950:	4648      	mov	r0, r9
 8009952:	f7ff f9c9 	bl	8008ce8 <quorem>
 8009956:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800995a:	f806 8b01 	strb.w	r8, [r6], #1
 800995e:	9b00      	ldr	r3, [sp, #0]
 8009960:	eba6 020a 	sub.w	r2, r6, sl
 8009964:	4293      	cmp	r3, r2
 8009966:	ddb3      	ble.n	80098d0 <_dtoa_r+0xad8>
 8009968:	4649      	mov	r1, r9
 800996a:	2300      	movs	r3, #0
 800996c:	220a      	movs	r2, #10
 800996e:	4658      	mov	r0, fp
 8009970:	f000 fcb4 	bl	800a2dc <__multadd>
 8009974:	4681      	mov	r9, r0
 8009976:	e7ea      	b.n	800994e <_dtoa_r+0xb56>
 8009978:	0800bd5b 	.word	0x0800bd5b
 800997c:	0800bcf6 	.word	0x0800bcf6

08009980 <_free_r>:
 8009980:	b538      	push	{r3, r4, r5, lr}
 8009982:	4605      	mov	r5, r0
 8009984:	2900      	cmp	r1, #0
 8009986:	d041      	beq.n	8009a0c <_free_r+0x8c>
 8009988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800998c:	1f0c      	subs	r4, r1, #4
 800998e:	2b00      	cmp	r3, #0
 8009990:	bfb8      	it	lt
 8009992:	18e4      	addlt	r4, r4, r3
 8009994:	f000 fc34 	bl	800a200 <__malloc_lock>
 8009998:	4a1d      	ldr	r2, [pc, #116]	@ (8009a10 <_free_r+0x90>)
 800999a:	6813      	ldr	r3, [r2, #0]
 800999c:	b933      	cbnz	r3, 80099ac <_free_r+0x2c>
 800999e:	6063      	str	r3, [r4, #4]
 80099a0:	6014      	str	r4, [r2, #0]
 80099a2:	4628      	mov	r0, r5
 80099a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099a8:	f000 bc30 	b.w	800a20c <__malloc_unlock>
 80099ac:	42a3      	cmp	r3, r4
 80099ae:	d908      	bls.n	80099c2 <_free_r+0x42>
 80099b0:	6820      	ldr	r0, [r4, #0]
 80099b2:	1821      	adds	r1, r4, r0
 80099b4:	428b      	cmp	r3, r1
 80099b6:	bf01      	itttt	eq
 80099b8:	6819      	ldreq	r1, [r3, #0]
 80099ba:	685b      	ldreq	r3, [r3, #4]
 80099bc:	1809      	addeq	r1, r1, r0
 80099be:	6021      	streq	r1, [r4, #0]
 80099c0:	e7ed      	b.n	800999e <_free_r+0x1e>
 80099c2:	461a      	mov	r2, r3
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	b10b      	cbz	r3, 80099cc <_free_r+0x4c>
 80099c8:	42a3      	cmp	r3, r4
 80099ca:	d9fa      	bls.n	80099c2 <_free_r+0x42>
 80099cc:	6811      	ldr	r1, [r2, #0]
 80099ce:	1850      	adds	r0, r2, r1
 80099d0:	42a0      	cmp	r0, r4
 80099d2:	d10b      	bne.n	80099ec <_free_r+0x6c>
 80099d4:	6820      	ldr	r0, [r4, #0]
 80099d6:	4401      	add	r1, r0
 80099d8:	1850      	adds	r0, r2, r1
 80099da:	4283      	cmp	r3, r0
 80099dc:	6011      	str	r1, [r2, #0]
 80099de:	d1e0      	bne.n	80099a2 <_free_r+0x22>
 80099e0:	6818      	ldr	r0, [r3, #0]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	6053      	str	r3, [r2, #4]
 80099e6:	4408      	add	r0, r1
 80099e8:	6010      	str	r0, [r2, #0]
 80099ea:	e7da      	b.n	80099a2 <_free_r+0x22>
 80099ec:	d902      	bls.n	80099f4 <_free_r+0x74>
 80099ee:	230c      	movs	r3, #12
 80099f0:	602b      	str	r3, [r5, #0]
 80099f2:	e7d6      	b.n	80099a2 <_free_r+0x22>
 80099f4:	6820      	ldr	r0, [r4, #0]
 80099f6:	1821      	adds	r1, r4, r0
 80099f8:	428b      	cmp	r3, r1
 80099fa:	bf04      	itt	eq
 80099fc:	6819      	ldreq	r1, [r3, #0]
 80099fe:	685b      	ldreq	r3, [r3, #4]
 8009a00:	6063      	str	r3, [r4, #4]
 8009a02:	bf04      	itt	eq
 8009a04:	1809      	addeq	r1, r1, r0
 8009a06:	6021      	streq	r1, [r4, #0]
 8009a08:	6054      	str	r4, [r2, #4]
 8009a0a:	e7ca      	b.n	80099a2 <_free_r+0x22>
 8009a0c:	bd38      	pop	{r3, r4, r5, pc}
 8009a0e:	bf00      	nop
 8009a10:	200070f0 	.word	0x200070f0

08009a14 <rshift>:
 8009a14:	6903      	ldr	r3, [r0, #16]
 8009a16:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009a1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a1e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009a22:	f100 0414 	add.w	r4, r0, #20
 8009a26:	dd45      	ble.n	8009ab4 <rshift+0xa0>
 8009a28:	f011 011f 	ands.w	r1, r1, #31
 8009a2c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009a30:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009a34:	d10c      	bne.n	8009a50 <rshift+0x3c>
 8009a36:	f100 0710 	add.w	r7, r0, #16
 8009a3a:	4629      	mov	r1, r5
 8009a3c:	42b1      	cmp	r1, r6
 8009a3e:	d334      	bcc.n	8009aaa <rshift+0x96>
 8009a40:	1a9b      	subs	r3, r3, r2
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	1eea      	subs	r2, r5, #3
 8009a46:	4296      	cmp	r6, r2
 8009a48:	bf38      	it	cc
 8009a4a:	2300      	movcc	r3, #0
 8009a4c:	4423      	add	r3, r4
 8009a4e:	e015      	b.n	8009a7c <rshift+0x68>
 8009a50:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009a54:	f1c1 0820 	rsb	r8, r1, #32
 8009a58:	40cf      	lsrs	r7, r1
 8009a5a:	f105 0e04 	add.w	lr, r5, #4
 8009a5e:	46a1      	mov	r9, r4
 8009a60:	4576      	cmp	r6, lr
 8009a62:	46f4      	mov	ip, lr
 8009a64:	d815      	bhi.n	8009a92 <rshift+0x7e>
 8009a66:	1a9a      	subs	r2, r3, r2
 8009a68:	0092      	lsls	r2, r2, #2
 8009a6a:	3a04      	subs	r2, #4
 8009a6c:	3501      	adds	r5, #1
 8009a6e:	42ae      	cmp	r6, r5
 8009a70:	bf38      	it	cc
 8009a72:	2200      	movcc	r2, #0
 8009a74:	18a3      	adds	r3, r4, r2
 8009a76:	50a7      	str	r7, [r4, r2]
 8009a78:	b107      	cbz	r7, 8009a7c <rshift+0x68>
 8009a7a:	3304      	adds	r3, #4
 8009a7c:	1b1a      	subs	r2, r3, r4
 8009a7e:	42a3      	cmp	r3, r4
 8009a80:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009a84:	bf08      	it	eq
 8009a86:	2300      	moveq	r3, #0
 8009a88:	6102      	str	r2, [r0, #16]
 8009a8a:	bf08      	it	eq
 8009a8c:	6143      	streq	r3, [r0, #20]
 8009a8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a92:	f8dc c000 	ldr.w	ip, [ip]
 8009a96:	fa0c fc08 	lsl.w	ip, ip, r8
 8009a9a:	ea4c 0707 	orr.w	r7, ip, r7
 8009a9e:	f849 7b04 	str.w	r7, [r9], #4
 8009aa2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009aa6:	40cf      	lsrs	r7, r1
 8009aa8:	e7da      	b.n	8009a60 <rshift+0x4c>
 8009aaa:	f851 cb04 	ldr.w	ip, [r1], #4
 8009aae:	f847 cf04 	str.w	ip, [r7, #4]!
 8009ab2:	e7c3      	b.n	8009a3c <rshift+0x28>
 8009ab4:	4623      	mov	r3, r4
 8009ab6:	e7e1      	b.n	8009a7c <rshift+0x68>

08009ab8 <__hexdig_fun>:
 8009ab8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009abc:	2b09      	cmp	r3, #9
 8009abe:	d802      	bhi.n	8009ac6 <__hexdig_fun+0xe>
 8009ac0:	3820      	subs	r0, #32
 8009ac2:	b2c0      	uxtb	r0, r0
 8009ac4:	4770      	bx	lr
 8009ac6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009aca:	2b05      	cmp	r3, #5
 8009acc:	d801      	bhi.n	8009ad2 <__hexdig_fun+0x1a>
 8009ace:	3847      	subs	r0, #71	@ 0x47
 8009ad0:	e7f7      	b.n	8009ac2 <__hexdig_fun+0xa>
 8009ad2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009ad6:	2b05      	cmp	r3, #5
 8009ad8:	d801      	bhi.n	8009ade <__hexdig_fun+0x26>
 8009ada:	3827      	subs	r0, #39	@ 0x27
 8009adc:	e7f1      	b.n	8009ac2 <__hexdig_fun+0xa>
 8009ade:	2000      	movs	r0, #0
 8009ae0:	4770      	bx	lr
	...

08009ae4 <__gethex>:
 8009ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae8:	b085      	sub	sp, #20
 8009aea:	468a      	mov	sl, r1
 8009aec:	9302      	str	r3, [sp, #8]
 8009aee:	680b      	ldr	r3, [r1, #0]
 8009af0:	9001      	str	r0, [sp, #4]
 8009af2:	4690      	mov	r8, r2
 8009af4:	1c9c      	adds	r4, r3, #2
 8009af6:	46a1      	mov	r9, r4
 8009af8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009afc:	2830      	cmp	r0, #48	@ 0x30
 8009afe:	d0fa      	beq.n	8009af6 <__gethex+0x12>
 8009b00:	eba9 0303 	sub.w	r3, r9, r3
 8009b04:	f1a3 0b02 	sub.w	fp, r3, #2
 8009b08:	f7ff ffd6 	bl	8009ab8 <__hexdig_fun>
 8009b0c:	4605      	mov	r5, r0
 8009b0e:	2800      	cmp	r0, #0
 8009b10:	d168      	bne.n	8009be4 <__gethex+0x100>
 8009b12:	49a0      	ldr	r1, [pc, #640]	@ (8009d94 <__gethex+0x2b0>)
 8009b14:	2201      	movs	r2, #1
 8009b16:	4648      	mov	r0, r9
 8009b18:	f7fe ffc5 	bl	8008aa6 <strncmp>
 8009b1c:	4607      	mov	r7, r0
 8009b1e:	2800      	cmp	r0, #0
 8009b20:	d167      	bne.n	8009bf2 <__gethex+0x10e>
 8009b22:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009b26:	4626      	mov	r6, r4
 8009b28:	f7ff ffc6 	bl	8009ab8 <__hexdig_fun>
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	d062      	beq.n	8009bf6 <__gethex+0x112>
 8009b30:	4623      	mov	r3, r4
 8009b32:	7818      	ldrb	r0, [r3, #0]
 8009b34:	2830      	cmp	r0, #48	@ 0x30
 8009b36:	4699      	mov	r9, r3
 8009b38:	f103 0301 	add.w	r3, r3, #1
 8009b3c:	d0f9      	beq.n	8009b32 <__gethex+0x4e>
 8009b3e:	f7ff ffbb 	bl	8009ab8 <__hexdig_fun>
 8009b42:	fab0 f580 	clz	r5, r0
 8009b46:	096d      	lsrs	r5, r5, #5
 8009b48:	f04f 0b01 	mov.w	fp, #1
 8009b4c:	464a      	mov	r2, r9
 8009b4e:	4616      	mov	r6, r2
 8009b50:	3201      	adds	r2, #1
 8009b52:	7830      	ldrb	r0, [r6, #0]
 8009b54:	f7ff ffb0 	bl	8009ab8 <__hexdig_fun>
 8009b58:	2800      	cmp	r0, #0
 8009b5a:	d1f8      	bne.n	8009b4e <__gethex+0x6a>
 8009b5c:	498d      	ldr	r1, [pc, #564]	@ (8009d94 <__gethex+0x2b0>)
 8009b5e:	2201      	movs	r2, #1
 8009b60:	4630      	mov	r0, r6
 8009b62:	f7fe ffa0 	bl	8008aa6 <strncmp>
 8009b66:	2800      	cmp	r0, #0
 8009b68:	d13f      	bne.n	8009bea <__gethex+0x106>
 8009b6a:	b944      	cbnz	r4, 8009b7e <__gethex+0x9a>
 8009b6c:	1c74      	adds	r4, r6, #1
 8009b6e:	4622      	mov	r2, r4
 8009b70:	4616      	mov	r6, r2
 8009b72:	3201      	adds	r2, #1
 8009b74:	7830      	ldrb	r0, [r6, #0]
 8009b76:	f7ff ff9f 	bl	8009ab8 <__hexdig_fun>
 8009b7a:	2800      	cmp	r0, #0
 8009b7c:	d1f8      	bne.n	8009b70 <__gethex+0x8c>
 8009b7e:	1ba4      	subs	r4, r4, r6
 8009b80:	00a7      	lsls	r7, r4, #2
 8009b82:	7833      	ldrb	r3, [r6, #0]
 8009b84:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009b88:	2b50      	cmp	r3, #80	@ 0x50
 8009b8a:	d13e      	bne.n	8009c0a <__gethex+0x126>
 8009b8c:	7873      	ldrb	r3, [r6, #1]
 8009b8e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009b90:	d033      	beq.n	8009bfa <__gethex+0x116>
 8009b92:	2b2d      	cmp	r3, #45	@ 0x2d
 8009b94:	d034      	beq.n	8009c00 <__gethex+0x11c>
 8009b96:	1c71      	adds	r1, r6, #1
 8009b98:	2400      	movs	r4, #0
 8009b9a:	7808      	ldrb	r0, [r1, #0]
 8009b9c:	f7ff ff8c 	bl	8009ab8 <__hexdig_fun>
 8009ba0:	1e43      	subs	r3, r0, #1
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	2b18      	cmp	r3, #24
 8009ba6:	d830      	bhi.n	8009c0a <__gethex+0x126>
 8009ba8:	f1a0 0210 	sub.w	r2, r0, #16
 8009bac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009bb0:	f7ff ff82 	bl	8009ab8 <__hexdig_fun>
 8009bb4:	f100 3cff 	add.w	ip, r0, #4294967295
 8009bb8:	fa5f fc8c 	uxtb.w	ip, ip
 8009bbc:	f1bc 0f18 	cmp.w	ip, #24
 8009bc0:	f04f 030a 	mov.w	r3, #10
 8009bc4:	d91e      	bls.n	8009c04 <__gethex+0x120>
 8009bc6:	b104      	cbz	r4, 8009bca <__gethex+0xe6>
 8009bc8:	4252      	negs	r2, r2
 8009bca:	4417      	add	r7, r2
 8009bcc:	f8ca 1000 	str.w	r1, [sl]
 8009bd0:	b1ed      	cbz	r5, 8009c0e <__gethex+0x12a>
 8009bd2:	f1bb 0f00 	cmp.w	fp, #0
 8009bd6:	bf0c      	ite	eq
 8009bd8:	2506      	moveq	r5, #6
 8009bda:	2500      	movne	r5, #0
 8009bdc:	4628      	mov	r0, r5
 8009bde:	b005      	add	sp, #20
 8009be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009be4:	2500      	movs	r5, #0
 8009be6:	462c      	mov	r4, r5
 8009be8:	e7b0      	b.n	8009b4c <__gethex+0x68>
 8009bea:	2c00      	cmp	r4, #0
 8009bec:	d1c7      	bne.n	8009b7e <__gethex+0x9a>
 8009bee:	4627      	mov	r7, r4
 8009bf0:	e7c7      	b.n	8009b82 <__gethex+0x9e>
 8009bf2:	464e      	mov	r6, r9
 8009bf4:	462f      	mov	r7, r5
 8009bf6:	2501      	movs	r5, #1
 8009bf8:	e7c3      	b.n	8009b82 <__gethex+0x9e>
 8009bfa:	2400      	movs	r4, #0
 8009bfc:	1cb1      	adds	r1, r6, #2
 8009bfe:	e7cc      	b.n	8009b9a <__gethex+0xb6>
 8009c00:	2401      	movs	r4, #1
 8009c02:	e7fb      	b.n	8009bfc <__gethex+0x118>
 8009c04:	fb03 0002 	mla	r0, r3, r2, r0
 8009c08:	e7ce      	b.n	8009ba8 <__gethex+0xc4>
 8009c0a:	4631      	mov	r1, r6
 8009c0c:	e7de      	b.n	8009bcc <__gethex+0xe8>
 8009c0e:	eba6 0309 	sub.w	r3, r6, r9
 8009c12:	3b01      	subs	r3, #1
 8009c14:	4629      	mov	r1, r5
 8009c16:	2b07      	cmp	r3, #7
 8009c18:	dc0a      	bgt.n	8009c30 <__gethex+0x14c>
 8009c1a:	9801      	ldr	r0, [sp, #4]
 8009c1c:	f000 fafc 	bl	800a218 <_Balloc>
 8009c20:	4604      	mov	r4, r0
 8009c22:	b940      	cbnz	r0, 8009c36 <__gethex+0x152>
 8009c24:	4b5c      	ldr	r3, [pc, #368]	@ (8009d98 <__gethex+0x2b4>)
 8009c26:	4602      	mov	r2, r0
 8009c28:	21e4      	movs	r1, #228	@ 0xe4
 8009c2a:	485c      	ldr	r0, [pc, #368]	@ (8009d9c <__gethex+0x2b8>)
 8009c2c:	f7ff f83e 	bl	8008cac <__assert_func>
 8009c30:	3101      	adds	r1, #1
 8009c32:	105b      	asrs	r3, r3, #1
 8009c34:	e7ef      	b.n	8009c16 <__gethex+0x132>
 8009c36:	f100 0a14 	add.w	sl, r0, #20
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	4655      	mov	r5, sl
 8009c3e:	469b      	mov	fp, r3
 8009c40:	45b1      	cmp	r9, r6
 8009c42:	d337      	bcc.n	8009cb4 <__gethex+0x1d0>
 8009c44:	f845 bb04 	str.w	fp, [r5], #4
 8009c48:	eba5 050a 	sub.w	r5, r5, sl
 8009c4c:	10ad      	asrs	r5, r5, #2
 8009c4e:	6125      	str	r5, [r4, #16]
 8009c50:	4658      	mov	r0, fp
 8009c52:	f000 fbd3 	bl	800a3fc <__hi0bits>
 8009c56:	016d      	lsls	r5, r5, #5
 8009c58:	f8d8 6000 	ldr.w	r6, [r8]
 8009c5c:	1a2d      	subs	r5, r5, r0
 8009c5e:	42b5      	cmp	r5, r6
 8009c60:	dd54      	ble.n	8009d0c <__gethex+0x228>
 8009c62:	1bad      	subs	r5, r5, r6
 8009c64:	4629      	mov	r1, r5
 8009c66:	4620      	mov	r0, r4
 8009c68:	f000 ff67 	bl	800ab3a <__any_on>
 8009c6c:	4681      	mov	r9, r0
 8009c6e:	b178      	cbz	r0, 8009c90 <__gethex+0x1ac>
 8009c70:	1e6b      	subs	r3, r5, #1
 8009c72:	1159      	asrs	r1, r3, #5
 8009c74:	f003 021f 	and.w	r2, r3, #31
 8009c78:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009c7c:	f04f 0901 	mov.w	r9, #1
 8009c80:	fa09 f202 	lsl.w	r2, r9, r2
 8009c84:	420a      	tst	r2, r1
 8009c86:	d003      	beq.n	8009c90 <__gethex+0x1ac>
 8009c88:	454b      	cmp	r3, r9
 8009c8a:	dc36      	bgt.n	8009cfa <__gethex+0x216>
 8009c8c:	f04f 0902 	mov.w	r9, #2
 8009c90:	4629      	mov	r1, r5
 8009c92:	4620      	mov	r0, r4
 8009c94:	f7ff febe 	bl	8009a14 <rshift>
 8009c98:	442f      	add	r7, r5
 8009c9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c9e:	42bb      	cmp	r3, r7
 8009ca0:	da42      	bge.n	8009d28 <__gethex+0x244>
 8009ca2:	9801      	ldr	r0, [sp, #4]
 8009ca4:	4621      	mov	r1, r4
 8009ca6:	f000 faf7 	bl	800a298 <_Bfree>
 8009caa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009cac:	2300      	movs	r3, #0
 8009cae:	6013      	str	r3, [r2, #0]
 8009cb0:	25a3      	movs	r5, #163	@ 0xa3
 8009cb2:	e793      	b.n	8009bdc <__gethex+0xf8>
 8009cb4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009cb8:	2a2e      	cmp	r2, #46	@ 0x2e
 8009cba:	d012      	beq.n	8009ce2 <__gethex+0x1fe>
 8009cbc:	2b20      	cmp	r3, #32
 8009cbe:	d104      	bne.n	8009cca <__gethex+0x1e6>
 8009cc0:	f845 bb04 	str.w	fp, [r5], #4
 8009cc4:	f04f 0b00 	mov.w	fp, #0
 8009cc8:	465b      	mov	r3, fp
 8009cca:	7830      	ldrb	r0, [r6, #0]
 8009ccc:	9303      	str	r3, [sp, #12]
 8009cce:	f7ff fef3 	bl	8009ab8 <__hexdig_fun>
 8009cd2:	9b03      	ldr	r3, [sp, #12]
 8009cd4:	f000 000f 	and.w	r0, r0, #15
 8009cd8:	4098      	lsls	r0, r3
 8009cda:	ea4b 0b00 	orr.w	fp, fp, r0
 8009cde:	3304      	adds	r3, #4
 8009ce0:	e7ae      	b.n	8009c40 <__gethex+0x15c>
 8009ce2:	45b1      	cmp	r9, r6
 8009ce4:	d8ea      	bhi.n	8009cbc <__gethex+0x1d8>
 8009ce6:	492b      	ldr	r1, [pc, #172]	@ (8009d94 <__gethex+0x2b0>)
 8009ce8:	9303      	str	r3, [sp, #12]
 8009cea:	2201      	movs	r2, #1
 8009cec:	4630      	mov	r0, r6
 8009cee:	f7fe feda 	bl	8008aa6 <strncmp>
 8009cf2:	9b03      	ldr	r3, [sp, #12]
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	d1e1      	bne.n	8009cbc <__gethex+0x1d8>
 8009cf8:	e7a2      	b.n	8009c40 <__gethex+0x15c>
 8009cfa:	1ea9      	subs	r1, r5, #2
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	f000 ff1c 	bl	800ab3a <__any_on>
 8009d02:	2800      	cmp	r0, #0
 8009d04:	d0c2      	beq.n	8009c8c <__gethex+0x1a8>
 8009d06:	f04f 0903 	mov.w	r9, #3
 8009d0a:	e7c1      	b.n	8009c90 <__gethex+0x1ac>
 8009d0c:	da09      	bge.n	8009d22 <__gethex+0x23e>
 8009d0e:	1b75      	subs	r5, r6, r5
 8009d10:	4621      	mov	r1, r4
 8009d12:	9801      	ldr	r0, [sp, #4]
 8009d14:	462a      	mov	r2, r5
 8009d16:	f000 fcd7 	bl	800a6c8 <__lshift>
 8009d1a:	1b7f      	subs	r7, r7, r5
 8009d1c:	4604      	mov	r4, r0
 8009d1e:	f100 0a14 	add.w	sl, r0, #20
 8009d22:	f04f 0900 	mov.w	r9, #0
 8009d26:	e7b8      	b.n	8009c9a <__gethex+0x1b6>
 8009d28:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009d2c:	42bd      	cmp	r5, r7
 8009d2e:	dd6f      	ble.n	8009e10 <__gethex+0x32c>
 8009d30:	1bed      	subs	r5, r5, r7
 8009d32:	42ae      	cmp	r6, r5
 8009d34:	dc34      	bgt.n	8009da0 <__gethex+0x2bc>
 8009d36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d3a:	2b02      	cmp	r3, #2
 8009d3c:	d022      	beq.n	8009d84 <__gethex+0x2a0>
 8009d3e:	2b03      	cmp	r3, #3
 8009d40:	d024      	beq.n	8009d8c <__gethex+0x2a8>
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d115      	bne.n	8009d72 <__gethex+0x28e>
 8009d46:	42ae      	cmp	r6, r5
 8009d48:	d113      	bne.n	8009d72 <__gethex+0x28e>
 8009d4a:	2e01      	cmp	r6, #1
 8009d4c:	d10b      	bne.n	8009d66 <__gethex+0x282>
 8009d4e:	9a02      	ldr	r2, [sp, #8]
 8009d50:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009d54:	6013      	str	r3, [r2, #0]
 8009d56:	2301      	movs	r3, #1
 8009d58:	6123      	str	r3, [r4, #16]
 8009d5a:	f8ca 3000 	str.w	r3, [sl]
 8009d5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d60:	2562      	movs	r5, #98	@ 0x62
 8009d62:	601c      	str	r4, [r3, #0]
 8009d64:	e73a      	b.n	8009bdc <__gethex+0xf8>
 8009d66:	1e71      	subs	r1, r6, #1
 8009d68:	4620      	mov	r0, r4
 8009d6a:	f000 fee6 	bl	800ab3a <__any_on>
 8009d6e:	2800      	cmp	r0, #0
 8009d70:	d1ed      	bne.n	8009d4e <__gethex+0x26a>
 8009d72:	9801      	ldr	r0, [sp, #4]
 8009d74:	4621      	mov	r1, r4
 8009d76:	f000 fa8f 	bl	800a298 <_Bfree>
 8009d7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	6013      	str	r3, [r2, #0]
 8009d80:	2550      	movs	r5, #80	@ 0x50
 8009d82:	e72b      	b.n	8009bdc <__gethex+0xf8>
 8009d84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d1f3      	bne.n	8009d72 <__gethex+0x28e>
 8009d8a:	e7e0      	b.n	8009d4e <__gethex+0x26a>
 8009d8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d1dd      	bne.n	8009d4e <__gethex+0x26a>
 8009d92:	e7ee      	b.n	8009d72 <__gethex+0x28e>
 8009d94:	0800bbb0 	.word	0x0800bbb0
 8009d98:	0800bd5b 	.word	0x0800bd5b
 8009d9c:	0800bd6c 	.word	0x0800bd6c
 8009da0:	1e6f      	subs	r7, r5, #1
 8009da2:	f1b9 0f00 	cmp.w	r9, #0
 8009da6:	d130      	bne.n	8009e0a <__gethex+0x326>
 8009da8:	b127      	cbz	r7, 8009db4 <__gethex+0x2d0>
 8009daa:	4639      	mov	r1, r7
 8009dac:	4620      	mov	r0, r4
 8009dae:	f000 fec4 	bl	800ab3a <__any_on>
 8009db2:	4681      	mov	r9, r0
 8009db4:	117a      	asrs	r2, r7, #5
 8009db6:	2301      	movs	r3, #1
 8009db8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009dbc:	f007 071f 	and.w	r7, r7, #31
 8009dc0:	40bb      	lsls	r3, r7
 8009dc2:	4213      	tst	r3, r2
 8009dc4:	4629      	mov	r1, r5
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	bf18      	it	ne
 8009dca:	f049 0902 	orrne.w	r9, r9, #2
 8009dce:	f7ff fe21 	bl	8009a14 <rshift>
 8009dd2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009dd6:	1b76      	subs	r6, r6, r5
 8009dd8:	2502      	movs	r5, #2
 8009dda:	f1b9 0f00 	cmp.w	r9, #0
 8009dde:	d047      	beq.n	8009e70 <__gethex+0x38c>
 8009de0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009de4:	2b02      	cmp	r3, #2
 8009de6:	d015      	beq.n	8009e14 <__gethex+0x330>
 8009de8:	2b03      	cmp	r3, #3
 8009dea:	d017      	beq.n	8009e1c <__gethex+0x338>
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d109      	bne.n	8009e04 <__gethex+0x320>
 8009df0:	f019 0f02 	tst.w	r9, #2
 8009df4:	d006      	beq.n	8009e04 <__gethex+0x320>
 8009df6:	f8da 3000 	ldr.w	r3, [sl]
 8009dfa:	ea49 0903 	orr.w	r9, r9, r3
 8009dfe:	f019 0f01 	tst.w	r9, #1
 8009e02:	d10e      	bne.n	8009e22 <__gethex+0x33e>
 8009e04:	f045 0510 	orr.w	r5, r5, #16
 8009e08:	e032      	b.n	8009e70 <__gethex+0x38c>
 8009e0a:	f04f 0901 	mov.w	r9, #1
 8009e0e:	e7d1      	b.n	8009db4 <__gethex+0x2d0>
 8009e10:	2501      	movs	r5, #1
 8009e12:	e7e2      	b.n	8009dda <__gethex+0x2f6>
 8009e14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e16:	f1c3 0301 	rsb	r3, r3, #1
 8009e1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009e1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d0f0      	beq.n	8009e04 <__gethex+0x320>
 8009e22:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009e26:	f104 0314 	add.w	r3, r4, #20
 8009e2a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009e2e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009e32:	f04f 0c00 	mov.w	ip, #0
 8009e36:	4618      	mov	r0, r3
 8009e38:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e3c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009e40:	d01b      	beq.n	8009e7a <__gethex+0x396>
 8009e42:	3201      	adds	r2, #1
 8009e44:	6002      	str	r2, [r0, #0]
 8009e46:	2d02      	cmp	r5, #2
 8009e48:	f104 0314 	add.w	r3, r4, #20
 8009e4c:	d13c      	bne.n	8009ec8 <__gethex+0x3e4>
 8009e4e:	f8d8 2000 	ldr.w	r2, [r8]
 8009e52:	3a01      	subs	r2, #1
 8009e54:	42b2      	cmp	r2, r6
 8009e56:	d109      	bne.n	8009e6c <__gethex+0x388>
 8009e58:	1171      	asrs	r1, r6, #5
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009e60:	f006 061f 	and.w	r6, r6, #31
 8009e64:	fa02 f606 	lsl.w	r6, r2, r6
 8009e68:	421e      	tst	r6, r3
 8009e6a:	d13a      	bne.n	8009ee2 <__gethex+0x3fe>
 8009e6c:	f045 0520 	orr.w	r5, r5, #32
 8009e70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e72:	601c      	str	r4, [r3, #0]
 8009e74:	9b02      	ldr	r3, [sp, #8]
 8009e76:	601f      	str	r7, [r3, #0]
 8009e78:	e6b0      	b.n	8009bdc <__gethex+0xf8>
 8009e7a:	4299      	cmp	r1, r3
 8009e7c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009e80:	d8d9      	bhi.n	8009e36 <__gethex+0x352>
 8009e82:	68a3      	ldr	r3, [r4, #8]
 8009e84:	459b      	cmp	fp, r3
 8009e86:	db17      	blt.n	8009eb8 <__gethex+0x3d4>
 8009e88:	6861      	ldr	r1, [r4, #4]
 8009e8a:	9801      	ldr	r0, [sp, #4]
 8009e8c:	3101      	adds	r1, #1
 8009e8e:	f000 f9c3 	bl	800a218 <_Balloc>
 8009e92:	4681      	mov	r9, r0
 8009e94:	b918      	cbnz	r0, 8009e9e <__gethex+0x3ba>
 8009e96:	4b1a      	ldr	r3, [pc, #104]	@ (8009f00 <__gethex+0x41c>)
 8009e98:	4602      	mov	r2, r0
 8009e9a:	2184      	movs	r1, #132	@ 0x84
 8009e9c:	e6c5      	b.n	8009c2a <__gethex+0x146>
 8009e9e:	6922      	ldr	r2, [r4, #16]
 8009ea0:	3202      	adds	r2, #2
 8009ea2:	f104 010c 	add.w	r1, r4, #12
 8009ea6:	0092      	lsls	r2, r2, #2
 8009ea8:	300c      	adds	r0, #12
 8009eaa:	f7fe fee2 	bl	8008c72 <memcpy>
 8009eae:	4621      	mov	r1, r4
 8009eb0:	9801      	ldr	r0, [sp, #4]
 8009eb2:	f000 f9f1 	bl	800a298 <_Bfree>
 8009eb6:	464c      	mov	r4, r9
 8009eb8:	6923      	ldr	r3, [r4, #16]
 8009eba:	1c5a      	adds	r2, r3, #1
 8009ebc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009ec0:	6122      	str	r2, [r4, #16]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	615a      	str	r2, [r3, #20]
 8009ec6:	e7be      	b.n	8009e46 <__gethex+0x362>
 8009ec8:	6922      	ldr	r2, [r4, #16]
 8009eca:	455a      	cmp	r2, fp
 8009ecc:	dd0b      	ble.n	8009ee6 <__gethex+0x402>
 8009ece:	2101      	movs	r1, #1
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	f7ff fd9f 	bl	8009a14 <rshift>
 8009ed6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009eda:	3701      	adds	r7, #1
 8009edc:	42bb      	cmp	r3, r7
 8009ede:	f6ff aee0 	blt.w	8009ca2 <__gethex+0x1be>
 8009ee2:	2501      	movs	r5, #1
 8009ee4:	e7c2      	b.n	8009e6c <__gethex+0x388>
 8009ee6:	f016 061f 	ands.w	r6, r6, #31
 8009eea:	d0fa      	beq.n	8009ee2 <__gethex+0x3fe>
 8009eec:	4453      	add	r3, sl
 8009eee:	f1c6 0620 	rsb	r6, r6, #32
 8009ef2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009ef6:	f000 fa81 	bl	800a3fc <__hi0bits>
 8009efa:	42b0      	cmp	r0, r6
 8009efc:	dbe7      	blt.n	8009ece <__gethex+0x3ea>
 8009efe:	e7f0      	b.n	8009ee2 <__gethex+0x3fe>
 8009f00:	0800bd5b 	.word	0x0800bd5b

08009f04 <L_shift>:
 8009f04:	f1c2 0208 	rsb	r2, r2, #8
 8009f08:	0092      	lsls	r2, r2, #2
 8009f0a:	b570      	push	{r4, r5, r6, lr}
 8009f0c:	f1c2 0620 	rsb	r6, r2, #32
 8009f10:	6843      	ldr	r3, [r0, #4]
 8009f12:	6804      	ldr	r4, [r0, #0]
 8009f14:	fa03 f506 	lsl.w	r5, r3, r6
 8009f18:	432c      	orrs	r4, r5
 8009f1a:	40d3      	lsrs	r3, r2
 8009f1c:	6004      	str	r4, [r0, #0]
 8009f1e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009f22:	4288      	cmp	r0, r1
 8009f24:	d3f4      	bcc.n	8009f10 <L_shift+0xc>
 8009f26:	bd70      	pop	{r4, r5, r6, pc}

08009f28 <__match>:
 8009f28:	b530      	push	{r4, r5, lr}
 8009f2a:	6803      	ldr	r3, [r0, #0]
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f32:	b914      	cbnz	r4, 8009f3a <__match+0x12>
 8009f34:	6003      	str	r3, [r0, #0]
 8009f36:	2001      	movs	r0, #1
 8009f38:	bd30      	pop	{r4, r5, pc}
 8009f3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f3e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009f42:	2d19      	cmp	r5, #25
 8009f44:	bf98      	it	ls
 8009f46:	3220      	addls	r2, #32
 8009f48:	42a2      	cmp	r2, r4
 8009f4a:	d0f0      	beq.n	8009f2e <__match+0x6>
 8009f4c:	2000      	movs	r0, #0
 8009f4e:	e7f3      	b.n	8009f38 <__match+0x10>

08009f50 <__hexnan>:
 8009f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f54:	680b      	ldr	r3, [r1, #0]
 8009f56:	6801      	ldr	r1, [r0, #0]
 8009f58:	115e      	asrs	r6, r3, #5
 8009f5a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009f5e:	f013 031f 	ands.w	r3, r3, #31
 8009f62:	b087      	sub	sp, #28
 8009f64:	bf18      	it	ne
 8009f66:	3604      	addne	r6, #4
 8009f68:	2500      	movs	r5, #0
 8009f6a:	1f37      	subs	r7, r6, #4
 8009f6c:	4682      	mov	sl, r0
 8009f6e:	4690      	mov	r8, r2
 8009f70:	9301      	str	r3, [sp, #4]
 8009f72:	f846 5c04 	str.w	r5, [r6, #-4]
 8009f76:	46b9      	mov	r9, r7
 8009f78:	463c      	mov	r4, r7
 8009f7a:	9502      	str	r5, [sp, #8]
 8009f7c:	46ab      	mov	fp, r5
 8009f7e:	784a      	ldrb	r2, [r1, #1]
 8009f80:	1c4b      	adds	r3, r1, #1
 8009f82:	9303      	str	r3, [sp, #12]
 8009f84:	b342      	cbz	r2, 8009fd8 <__hexnan+0x88>
 8009f86:	4610      	mov	r0, r2
 8009f88:	9105      	str	r1, [sp, #20]
 8009f8a:	9204      	str	r2, [sp, #16]
 8009f8c:	f7ff fd94 	bl	8009ab8 <__hexdig_fun>
 8009f90:	2800      	cmp	r0, #0
 8009f92:	d151      	bne.n	800a038 <__hexnan+0xe8>
 8009f94:	9a04      	ldr	r2, [sp, #16]
 8009f96:	9905      	ldr	r1, [sp, #20]
 8009f98:	2a20      	cmp	r2, #32
 8009f9a:	d818      	bhi.n	8009fce <__hexnan+0x7e>
 8009f9c:	9b02      	ldr	r3, [sp, #8]
 8009f9e:	459b      	cmp	fp, r3
 8009fa0:	dd13      	ble.n	8009fca <__hexnan+0x7a>
 8009fa2:	454c      	cmp	r4, r9
 8009fa4:	d206      	bcs.n	8009fb4 <__hexnan+0x64>
 8009fa6:	2d07      	cmp	r5, #7
 8009fa8:	dc04      	bgt.n	8009fb4 <__hexnan+0x64>
 8009faa:	462a      	mov	r2, r5
 8009fac:	4649      	mov	r1, r9
 8009fae:	4620      	mov	r0, r4
 8009fb0:	f7ff ffa8 	bl	8009f04 <L_shift>
 8009fb4:	4544      	cmp	r4, r8
 8009fb6:	d952      	bls.n	800a05e <__hexnan+0x10e>
 8009fb8:	2300      	movs	r3, #0
 8009fba:	f1a4 0904 	sub.w	r9, r4, #4
 8009fbe:	f844 3c04 	str.w	r3, [r4, #-4]
 8009fc2:	f8cd b008 	str.w	fp, [sp, #8]
 8009fc6:	464c      	mov	r4, r9
 8009fc8:	461d      	mov	r5, r3
 8009fca:	9903      	ldr	r1, [sp, #12]
 8009fcc:	e7d7      	b.n	8009f7e <__hexnan+0x2e>
 8009fce:	2a29      	cmp	r2, #41	@ 0x29
 8009fd0:	d157      	bne.n	800a082 <__hexnan+0x132>
 8009fd2:	3102      	adds	r1, #2
 8009fd4:	f8ca 1000 	str.w	r1, [sl]
 8009fd8:	f1bb 0f00 	cmp.w	fp, #0
 8009fdc:	d051      	beq.n	800a082 <__hexnan+0x132>
 8009fde:	454c      	cmp	r4, r9
 8009fe0:	d206      	bcs.n	8009ff0 <__hexnan+0xa0>
 8009fe2:	2d07      	cmp	r5, #7
 8009fe4:	dc04      	bgt.n	8009ff0 <__hexnan+0xa0>
 8009fe6:	462a      	mov	r2, r5
 8009fe8:	4649      	mov	r1, r9
 8009fea:	4620      	mov	r0, r4
 8009fec:	f7ff ff8a 	bl	8009f04 <L_shift>
 8009ff0:	4544      	cmp	r4, r8
 8009ff2:	d936      	bls.n	800a062 <__hexnan+0x112>
 8009ff4:	f1a8 0204 	sub.w	r2, r8, #4
 8009ff8:	4623      	mov	r3, r4
 8009ffa:	f853 1b04 	ldr.w	r1, [r3], #4
 8009ffe:	f842 1f04 	str.w	r1, [r2, #4]!
 800a002:	429f      	cmp	r7, r3
 800a004:	d2f9      	bcs.n	8009ffa <__hexnan+0xaa>
 800a006:	1b3b      	subs	r3, r7, r4
 800a008:	f023 0303 	bic.w	r3, r3, #3
 800a00c:	3304      	adds	r3, #4
 800a00e:	3401      	adds	r4, #1
 800a010:	3e03      	subs	r6, #3
 800a012:	42b4      	cmp	r4, r6
 800a014:	bf88      	it	hi
 800a016:	2304      	movhi	r3, #4
 800a018:	4443      	add	r3, r8
 800a01a:	2200      	movs	r2, #0
 800a01c:	f843 2b04 	str.w	r2, [r3], #4
 800a020:	429f      	cmp	r7, r3
 800a022:	d2fb      	bcs.n	800a01c <__hexnan+0xcc>
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	b91b      	cbnz	r3, 800a030 <__hexnan+0xe0>
 800a028:	4547      	cmp	r7, r8
 800a02a:	d128      	bne.n	800a07e <__hexnan+0x12e>
 800a02c:	2301      	movs	r3, #1
 800a02e:	603b      	str	r3, [r7, #0]
 800a030:	2005      	movs	r0, #5
 800a032:	b007      	add	sp, #28
 800a034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a038:	3501      	adds	r5, #1
 800a03a:	2d08      	cmp	r5, #8
 800a03c:	f10b 0b01 	add.w	fp, fp, #1
 800a040:	dd06      	ble.n	800a050 <__hexnan+0x100>
 800a042:	4544      	cmp	r4, r8
 800a044:	d9c1      	bls.n	8009fca <__hexnan+0x7a>
 800a046:	2300      	movs	r3, #0
 800a048:	f844 3c04 	str.w	r3, [r4, #-4]
 800a04c:	2501      	movs	r5, #1
 800a04e:	3c04      	subs	r4, #4
 800a050:	6822      	ldr	r2, [r4, #0]
 800a052:	f000 000f 	and.w	r0, r0, #15
 800a056:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a05a:	6020      	str	r0, [r4, #0]
 800a05c:	e7b5      	b.n	8009fca <__hexnan+0x7a>
 800a05e:	2508      	movs	r5, #8
 800a060:	e7b3      	b.n	8009fca <__hexnan+0x7a>
 800a062:	9b01      	ldr	r3, [sp, #4]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d0dd      	beq.n	800a024 <__hexnan+0xd4>
 800a068:	f1c3 0320 	rsb	r3, r3, #32
 800a06c:	f04f 32ff 	mov.w	r2, #4294967295
 800a070:	40da      	lsrs	r2, r3
 800a072:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a076:	4013      	ands	r3, r2
 800a078:	f846 3c04 	str.w	r3, [r6, #-4]
 800a07c:	e7d2      	b.n	800a024 <__hexnan+0xd4>
 800a07e:	3f04      	subs	r7, #4
 800a080:	e7d0      	b.n	800a024 <__hexnan+0xd4>
 800a082:	2004      	movs	r0, #4
 800a084:	e7d5      	b.n	800a032 <__hexnan+0xe2>
	...

0800a088 <malloc>:
 800a088:	4b02      	ldr	r3, [pc, #8]	@ (800a094 <malloc+0xc>)
 800a08a:	4601      	mov	r1, r0
 800a08c:	6818      	ldr	r0, [r3, #0]
 800a08e:	f000 b825 	b.w	800a0dc <_malloc_r>
 800a092:	bf00      	nop
 800a094:	20000198 	.word	0x20000198

0800a098 <sbrk_aligned>:
 800a098:	b570      	push	{r4, r5, r6, lr}
 800a09a:	4e0f      	ldr	r6, [pc, #60]	@ (800a0d8 <sbrk_aligned+0x40>)
 800a09c:	460c      	mov	r4, r1
 800a09e:	6831      	ldr	r1, [r6, #0]
 800a0a0:	4605      	mov	r5, r0
 800a0a2:	b911      	cbnz	r1, 800a0aa <sbrk_aligned+0x12>
 800a0a4:	f001 f822 	bl	800b0ec <_sbrk_r>
 800a0a8:	6030      	str	r0, [r6, #0]
 800a0aa:	4621      	mov	r1, r4
 800a0ac:	4628      	mov	r0, r5
 800a0ae:	f001 f81d 	bl	800b0ec <_sbrk_r>
 800a0b2:	1c43      	adds	r3, r0, #1
 800a0b4:	d103      	bne.n	800a0be <sbrk_aligned+0x26>
 800a0b6:	f04f 34ff 	mov.w	r4, #4294967295
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	bd70      	pop	{r4, r5, r6, pc}
 800a0be:	1cc4      	adds	r4, r0, #3
 800a0c0:	f024 0403 	bic.w	r4, r4, #3
 800a0c4:	42a0      	cmp	r0, r4
 800a0c6:	d0f8      	beq.n	800a0ba <sbrk_aligned+0x22>
 800a0c8:	1a21      	subs	r1, r4, r0
 800a0ca:	4628      	mov	r0, r5
 800a0cc:	f001 f80e 	bl	800b0ec <_sbrk_r>
 800a0d0:	3001      	adds	r0, #1
 800a0d2:	d1f2      	bne.n	800a0ba <sbrk_aligned+0x22>
 800a0d4:	e7ef      	b.n	800a0b6 <sbrk_aligned+0x1e>
 800a0d6:	bf00      	nop
 800a0d8:	200070ec 	.word	0x200070ec

0800a0dc <_malloc_r>:
 800a0dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0e0:	1ccd      	adds	r5, r1, #3
 800a0e2:	f025 0503 	bic.w	r5, r5, #3
 800a0e6:	3508      	adds	r5, #8
 800a0e8:	2d0c      	cmp	r5, #12
 800a0ea:	bf38      	it	cc
 800a0ec:	250c      	movcc	r5, #12
 800a0ee:	2d00      	cmp	r5, #0
 800a0f0:	4606      	mov	r6, r0
 800a0f2:	db01      	blt.n	800a0f8 <_malloc_r+0x1c>
 800a0f4:	42a9      	cmp	r1, r5
 800a0f6:	d904      	bls.n	800a102 <_malloc_r+0x26>
 800a0f8:	230c      	movs	r3, #12
 800a0fa:	6033      	str	r3, [r6, #0]
 800a0fc:	2000      	movs	r0, #0
 800a0fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a102:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a1d8 <_malloc_r+0xfc>
 800a106:	f000 f87b 	bl	800a200 <__malloc_lock>
 800a10a:	f8d8 3000 	ldr.w	r3, [r8]
 800a10e:	461c      	mov	r4, r3
 800a110:	bb44      	cbnz	r4, 800a164 <_malloc_r+0x88>
 800a112:	4629      	mov	r1, r5
 800a114:	4630      	mov	r0, r6
 800a116:	f7ff ffbf 	bl	800a098 <sbrk_aligned>
 800a11a:	1c43      	adds	r3, r0, #1
 800a11c:	4604      	mov	r4, r0
 800a11e:	d158      	bne.n	800a1d2 <_malloc_r+0xf6>
 800a120:	f8d8 4000 	ldr.w	r4, [r8]
 800a124:	4627      	mov	r7, r4
 800a126:	2f00      	cmp	r7, #0
 800a128:	d143      	bne.n	800a1b2 <_malloc_r+0xd6>
 800a12a:	2c00      	cmp	r4, #0
 800a12c:	d04b      	beq.n	800a1c6 <_malloc_r+0xea>
 800a12e:	6823      	ldr	r3, [r4, #0]
 800a130:	4639      	mov	r1, r7
 800a132:	4630      	mov	r0, r6
 800a134:	eb04 0903 	add.w	r9, r4, r3
 800a138:	f000 ffd8 	bl	800b0ec <_sbrk_r>
 800a13c:	4581      	cmp	r9, r0
 800a13e:	d142      	bne.n	800a1c6 <_malloc_r+0xea>
 800a140:	6821      	ldr	r1, [r4, #0]
 800a142:	1a6d      	subs	r5, r5, r1
 800a144:	4629      	mov	r1, r5
 800a146:	4630      	mov	r0, r6
 800a148:	f7ff ffa6 	bl	800a098 <sbrk_aligned>
 800a14c:	3001      	adds	r0, #1
 800a14e:	d03a      	beq.n	800a1c6 <_malloc_r+0xea>
 800a150:	6823      	ldr	r3, [r4, #0]
 800a152:	442b      	add	r3, r5
 800a154:	6023      	str	r3, [r4, #0]
 800a156:	f8d8 3000 	ldr.w	r3, [r8]
 800a15a:	685a      	ldr	r2, [r3, #4]
 800a15c:	bb62      	cbnz	r2, 800a1b8 <_malloc_r+0xdc>
 800a15e:	f8c8 7000 	str.w	r7, [r8]
 800a162:	e00f      	b.n	800a184 <_malloc_r+0xa8>
 800a164:	6822      	ldr	r2, [r4, #0]
 800a166:	1b52      	subs	r2, r2, r5
 800a168:	d420      	bmi.n	800a1ac <_malloc_r+0xd0>
 800a16a:	2a0b      	cmp	r2, #11
 800a16c:	d917      	bls.n	800a19e <_malloc_r+0xc2>
 800a16e:	1961      	adds	r1, r4, r5
 800a170:	42a3      	cmp	r3, r4
 800a172:	6025      	str	r5, [r4, #0]
 800a174:	bf18      	it	ne
 800a176:	6059      	strne	r1, [r3, #4]
 800a178:	6863      	ldr	r3, [r4, #4]
 800a17a:	bf08      	it	eq
 800a17c:	f8c8 1000 	streq.w	r1, [r8]
 800a180:	5162      	str	r2, [r4, r5]
 800a182:	604b      	str	r3, [r1, #4]
 800a184:	4630      	mov	r0, r6
 800a186:	f000 f841 	bl	800a20c <__malloc_unlock>
 800a18a:	f104 000b 	add.w	r0, r4, #11
 800a18e:	1d23      	adds	r3, r4, #4
 800a190:	f020 0007 	bic.w	r0, r0, #7
 800a194:	1ac2      	subs	r2, r0, r3
 800a196:	bf1c      	itt	ne
 800a198:	1a1b      	subne	r3, r3, r0
 800a19a:	50a3      	strne	r3, [r4, r2]
 800a19c:	e7af      	b.n	800a0fe <_malloc_r+0x22>
 800a19e:	6862      	ldr	r2, [r4, #4]
 800a1a0:	42a3      	cmp	r3, r4
 800a1a2:	bf0c      	ite	eq
 800a1a4:	f8c8 2000 	streq.w	r2, [r8]
 800a1a8:	605a      	strne	r2, [r3, #4]
 800a1aa:	e7eb      	b.n	800a184 <_malloc_r+0xa8>
 800a1ac:	4623      	mov	r3, r4
 800a1ae:	6864      	ldr	r4, [r4, #4]
 800a1b0:	e7ae      	b.n	800a110 <_malloc_r+0x34>
 800a1b2:	463c      	mov	r4, r7
 800a1b4:	687f      	ldr	r7, [r7, #4]
 800a1b6:	e7b6      	b.n	800a126 <_malloc_r+0x4a>
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	42a3      	cmp	r3, r4
 800a1be:	d1fb      	bne.n	800a1b8 <_malloc_r+0xdc>
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	6053      	str	r3, [r2, #4]
 800a1c4:	e7de      	b.n	800a184 <_malloc_r+0xa8>
 800a1c6:	230c      	movs	r3, #12
 800a1c8:	6033      	str	r3, [r6, #0]
 800a1ca:	4630      	mov	r0, r6
 800a1cc:	f000 f81e 	bl	800a20c <__malloc_unlock>
 800a1d0:	e794      	b.n	800a0fc <_malloc_r+0x20>
 800a1d2:	6005      	str	r5, [r0, #0]
 800a1d4:	e7d6      	b.n	800a184 <_malloc_r+0xa8>
 800a1d6:	bf00      	nop
 800a1d8:	200070f0 	.word	0x200070f0

0800a1dc <__ascii_mbtowc>:
 800a1dc:	b082      	sub	sp, #8
 800a1de:	b901      	cbnz	r1, 800a1e2 <__ascii_mbtowc+0x6>
 800a1e0:	a901      	add	r1, sp, #4
 800a1e2:	b142      	cbz	r2, 800a1f6 <__ascii_mbtowc+0x1a>
 800a1e4:	b14b      	cbz	r3, 800a1fa <__ascii_mbtowc+0x1e>
 800a1e6:	7813      	ldrb	r3, [r2, #0]
 800a1e8:	600b      	str	r3, [r1, #0]
 800a1ea:	7812      	ldrb	r2, [r2, #0]
 800a1ec:	1e10      	subs	r0, r2, #0
 800a1ee:	bf18      	it	ne
 800a1f0:	2001      	movne	r0, #1
 800a1f2:	b002      	add	sp, #8
 800a1f4:	4770      	bx	lr
 800a1f6:	4610      	mov	r0, r2
 800a1f8:	e7fb      	b.n	800a1f2 <__ascii_mbtowc+0x16>
 800a1fa:	f06f 0001 	mvn.w	r0, #1
 800a1fe:	e7f8      	b.n	800a1f2 <__ascii_mbtowc+0x16>

0800a200 <__malloc_lock>:
 800a200:	4801      	ldr	r0, [pc, #4]	@ (800a208 <__malloc_lock+0x8>)
 800a202:	f7fe bd34 	b.w	8008c6e <__retarget_lock_acquire_recursive>
 800a206:	bf00      	nop
 800a208:	200070e8 	.word	0x200070e8

0800a20c <__malloc_unlock>:
 800a20c:	4801      	ldr	r0, [pc, #4]	@ (800a214 <__malloc_unlock+0x8>)
 800a20e:	f7fe bd2f 	b.w	8008c70 <__retarget_lock_release_recursive>
 800a212:	bf00      	nop
 800a214:	200070e8 	.word	0x200070e8

0800a218 <_Balloc>:
 800a218:	b570      	push	{r4, r5, r6, lr}
 800a21a:	69c6      	ldr	r6, [r0, #28]
 800a21c:	4604      	mov	r4, r0
 800a21e:	460d      	mov	r5, r1
 800a220:	b976      	cbnz	r6, 800a240 <_Balloc+0x28>
 800a222:	2010      	movs	r0, #16
 800a224:	f7ff ff30 	bl	800a088 <malloc>
 800a228:	4602      	mov	r2, r0
 800a22a:	61e0      	str	r0, [r4, #28]
 800a22c:	b920      	cbnz	r0, 800a238 <_Balloc+0x20>
 800a22e:	4b18      	ldr	r3, [pc, #96]	@ (800a290 <_Balloc+0x78>)
 800a230:	4818      	ldr	r0, [pc, #96]	@ (800a294 <_Balloc+0x7c>)
 800a232:	216b      	movs	r1, #107	@ 0x6b
 800a234:	f7fe fd3a 	bl	8008cac <__assert_func>
 800a238:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a23c:	6006      	str	r6, [r0, #0]
 800a23e:	60c6      	str	r6, [r0, #12]
 800a240:	69e6      	ldr	r6, [r4, #28]
 800a242:	68f3      	ldr	r3, [r6, #12]
 800a244:	b183      	cbz	r3, 800a268 <_Balloc+0x50>
 800a246:	69e3      	ldr	r3, [r4, #28]
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a24e:	b9b8      	cbnz	r0, 800a280 <_Balloc+0x68>
 800a250:	2101      	movs	r1, #1
 800a252:	fa01 f605 	lsl.w	r6, r1, r5
 800a256:	1d72      	adds	r2, r6, #5
 800a258:	0092      	lsls	r2, r2, #2
 800a25a:	4620      	mov	r0, r4
 800a25c:	f000 ff5d 	bl	800b11a <_calloc_r>
 800a260:	b160      	cbz	r0, 800a27c <_Balloc+0x64>
 800a262:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a266:	e00e      	b.n	800a286 <_Balloc+0x6e>
 800a268:	2221      	movs	r2, #33	@ 0x21
 800a26a:	2104      	movs	r1, #4
 800a26c:	4620      	mov	r0, r4
 800a26e:	f000 ff54 	bl	800b11a <_calloc_r>
 800a272:	69e3      	ldr	r3, [r4, #28]
 800a274:	60f0      	str	r0, [r6, #12]
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d1e4      	bne.n	800a246 <_Balloc+0x2e>
 800a27c:	2000      	movs	r0, #0
 800a27e:	bd70      	pop	{r4, r5, r6, pc}
 800a280:	6802      	ldr	r2, [r0, #0]
 800a282:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a286:	2300      	movs	r3, #0
 800a288:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a28c:	e7f7      	b.n	800a27e <_Balloc+0x66>
 800a28e:	bf00      	nop
 800a290:	0800bc41 	.word	0x0800bc41
 800a294:	0800bdcc 	.word	0x0800bdcc

0800a298 <_Bfree>:
 800a298:	b570      	push	{r4, r5, r6, lr}
 800a29a:	69c6      	ldr	r6, [r0, #28]
 800a29c:	4605      	mov	r5, r0
 800a29e:	460c      	mov	r4, r1
 800a2a0:	b976      	cbnz	r6, 800a2c0 <_Bfree+0x28>
 800a2a2:	2010      	movs	r0, #16
 800a2a4:	f7ff fef0 	bl	800a088 <malloc>
 800a2a8:	4602      	mov	r2, r0
 800a2aa:	61e8      	str	r0, [r5, #28]
 800a2ac:	b920      	cbnz	r0, 800a2b8 <_Bfree+0x20>
 800a2ae:	4b09      	ldr	r3, [pc, #36]	@ (800a2d4 <_Bfree+0x3c>)
 800a2b0:	4809      	ldr	r0, [pc, #36]	@ (800a2d8 <_Bfree+0x40>)
 800a2b2:	218f      	movs	r1, #143	@ 0x8f
 800a2b4:	f7fe fcfa 	bl	8008cac <__assert_func>
 800a2b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2bc:	6006      	str	r6, [r0, #0]
 800a2be:	60c6      	str	r6, [r0, #12]
 800a2c0:	b13c      	cbz	r4, 800a2d2 <_Bfree+0x3a>
 800a2c2:	69eb      	ldr	r3, [r5, #28]
 800a2c4:	6862      	ldr	r2, [r4, #4]
 800a2c6:	68db      	ldr	r3, [r3, #12]
 800a2c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a2cc:	6021      	str	r1, [r4, #0]
 800a2ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a2d2:	bd70      	pop	{r4, r5, r6, pc}
 800a2d4:	0800bc41 	.word	0x0800bc41
 800a2d8:	0800bdcc 	.word	0x0800bdcc

0800a2dc <__multadd>:
 800a2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2e0:	690d      	ldr	r5, [r1, #16]
 800a2e2:	4607      	mov	r7, r0
 800a2e4:	460c      	mov	r4, r1
 800a2e6:	461e      	mov	r6, r3
 800a2e8:	f101 0c14 	add.w	ip, r1, #20
 800a2ec:	2000      	movs	r0, #0
 800a2ee:	f8dc 3000 	ldr.w	r3, [ip]
 800a2f2:	b299      	uxth	r1, r3
 800a2f4:	fb02 6101 	mla	r1, r2, r1, r6
 800a2f8:	0c1e      	lsrs	r6, r3, #16
 800a2fa:	0c0b      	lsrs	r3, r1, #16
 800a2fc:	fb02 3306 	mla	r3, r2, r6, r3
 800a300:	b289      	uxth	r1, r1
 800a302:	3001      	adds	r0, #1
 800a304:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a308:	4285      	cmp	r5, r0
 800a30a:	f84c 1b04 	str.w	r1, [ip], #4
 800a30e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a312:	dcec      	bgt.n	800a2ee <__multadd+0x12>
 800a314:	b30e      	cbz	r6, 800a35a <__multadd+0x7e>
 800a316:	68a3      	ldr	r3, [r4, #8]
 800a318:	42ab      	cmp	r3, r5
 800a31a:	dc19      	bgt.n	800a350 <__multadd+0x74>
 800a31c:	6861      	ldr	r1, [r4, #4]
 800a31e:	4638      	mov	r0, r7
 800a320:	3101      	adds	r1, #1
 800a322:	f7ff ff79 	bl	800a218 <_Balloc>
 800a326:	4680      	mov	r8, r0
 800a328:	b928      	cbnz	r0, 800a336 <__multadd+0x5a>
 800a32a:	4602      	mov	r2, r0
 800a32c:	4b0c      	ldr	r3, [pc, #48]	@ (800a360 <__multadd+0x84>)
 800a32e:	480d      	ldr	r0, [pc, #52]	@ (800a364 <__multadd+0x88>)
 800a330:	21ba      	movs	r1, #186	@ 0xba
 800a332:	f7fe fcbb 	bl	8008cac <__assert_func>
 800a336:	6922      	ldr	r2, [r4, #16]
 800a338:	3202      	adds	r2, #2
 800a33a:	f104 010c 	add.w	r1, r4, #12
 800a33e:	0092      	lsls	r2, r2, #2
 800a340:	300c      	adds	r0, #12
 800a342:	f7fe fc96 	bl	8008c72 <memcpy>
 800a346:	4621      	mov	r1, r4
 800a348:	4638      	mov	r0, r7
 800a34a:	f7ff ffa5 	bl	800a298 <_Bfree>
 800a34e:	4644      	mov	r4, r8
 800a350:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a354:	3501      	adds	r5, #1
 800a356:	615e      	str	r6, [r3, #20]
 800a358:	6125      	str	r5, [r4, #16]
 800a35a:	4620      	mov	r0, r4
 800a35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a360:	0800bd5b 	.word	0x0800bd5b
 800a364:	0800bdcc 	.word	0x0800bdcc

0800a368 <__s2b>:
 800a368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a36c:	460c      	mov	r4, r1
 800a36e:	4615      	mov	r5, r2
 800a370:	461f      	mov	r7, r3
 800a372:	2209      	movs	r2, #9
 800a374:	3308      	adds	r3, #8
 800a376:	4606      	mov	r6, r0
 800a378:	fb93 f3f2 	sdiv	r3, r3, r2
 800a37c:	2100      	movs	r1, #0
 800a37e:	2201      	movs	r2, #1
 800a380:	429a      	cmp	r2, r3
 800a382:	db09      	blt.n	800a398 <__s2b+0x30>
 800a384:	4630      	mov	r0, r6
 800a386:	f7ff ff47 	bl	800a218 <_Balloc>
 800a38a:	b940      	cbnz	r0, 800a39e <__s2b+0x36>
 800a38c:	4602      	mov	r2, r0
 800a38e:	4b19      	ldr	r3, [pc, #100]	@ (800a3f4 <__s2b+0x8c>)
 800a390:	4819      	ldr	r0, [pc, #100]	@ (800a3f8 <__s2b+0x90>)
 800a392:	21d3      	movs	r1, #211	@ 0xd3
 800a394:	f7fe fc8a 	bl	8008cac <__assert_func>
 800a398:	0052      	lsls	r2, r2, #1
 800a39a:	3101      	adds	r1, #1
 800a39c:	e7f0      	b.n	800a380 <__s2b+0x18>
 800a39e:	9b08      	ldr	r3, [sp, #32]
 800a3a0:	6143      	str	r3, [r0, #20]
 800a3a2:	2d09      	cmp	r5, #9
 800a3a4:	f04f 0301 	mov.w	r3, #1
 800a3a8:	6103      	str	r3, [r0, #16]
 800a3aa:	dd16      	ble.n	800a3da <__s2b+0x72>
 800a3ac:	f104 0909 	add.w	r9, r4, #9
 800a3b0:	46c8      	mov	r8, r9
 800a3b2:	442c      	add	r4, r5
 800a3b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a3b8:	4601      	mov	r1, r0
 800a3ba:	3b30      	subs	r3, #48	@ 0x30
 800a3bc:	220a      	movs	r2, #10
 800a3be:	4630      	mov	r0, r6
 800a3c0:	f7ff ff8c 	bl	800a2dc <__multadd>
 800a3c4:	45a0      	cmp	r8, r4
 800a3c6:	d1f5      	bne.n	800a3b4 <__s2b+0x4c>
 800a3c8:	f1a5 0408 	sub.w	r4, r5, #8
 800a3cc:	444c      	add	r4, r9
 800a3ce:	1b2d      	subs	r5, r5, r4
 800a3d0:	1963      	adds	r3, r4, r5
 800a3d2:	42bb      	cmp	r3, r7
 800a3d4:	db04      	blt.n	800a3e0 <__s2b+0x78>
 800a3d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3da:	340a      	adds	r4, #10
 800a3dc:	2509      	movs	r5, #9
 800a3de:	e7f6      	b.n	800a3ce <__s2b+0x66>
 800a3e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a3e4:	4601      	mov	r1, r0
 800a3e6:	3b30      	subs	r3, #48	@ 0x30
 800a3e8:	220a      	movs	r2, #10
 800a3ea:	4630      	mov	r0, r6
 800a3ec:	f7ff ff76 	bl	800a2dc <__multadd>
 800a3f0:	e7ee      	b.n	800a3d0 <__s2b+0x68>
 800a3f2:	bf00      	nop
 800a3f4:	0800bd5b 	.word	0x0800bd5b
 800a3f8:	0800bdcc 	.word	0x0800bdcc

0800a3fc <__hi0bits>:
 800a3fc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a400:	4603      	mov	r3, r0
 800a402:	bf36      	itet	cc
 800a404:	0403      	lslcc	r3, r0, #16
 800a406:	2000      	movcs	r0, #0
 800a408:	2010      	movcc	r0, #16
 800a40a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a40e:	bf3c      	itt	cc
 800a410:	021b      	lslcc	r3, r3, #8
 800a412:	3008      	addcc	r0, #8
 800a414:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a418:	bf3c      	itt	cc
 800a41a:	011b      	lslcc	r3, r3, #4
 800a41c:	3004      	addcc	r0, #4
 800a41e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a422:	bf3c      	itt	cc
 800a424:	009b      	lslcc	r3, r3, #2
 800a426:	3002      	addcc	r0, #2
 800a428:	2b00      	cmp	r3, #0
 800a42a:	db05      	blt.n	800a438 <__hi0bits+0x3c>
 800a42c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a430:	f100 0001 	add.w	r0, r0, #1
 800a434:	bf08      	it	eq
 800a436:	2020      	moveq	r0, #32
 800a438:	4770      	bx	lr

0800a43a <__lo0bits>:
 800a43a:	6803      	ldr	r3, [r0, #0]
 800a43c:	4602      	mov	r2, r0
 800a43e:	f013 0007 	ands.w	r0, r3, #7
 800a442:	d00b      	beq.n	800a45c <__lo0bits+0x22>
 800a444:	07d9      	lsls	r1, r3, #31
 800a446:	d421      	bmi.n	800a48c <__lo0bits+0x52>
 800a448:	0798      	lsls	r0, r3, #30
 800a44a:	bf49      	itett	mi
 800a44c:	085b      	lsrmi	r3, r3, #1
 800a44e:	089b      	lsrpl	r3, r3, #2
 800a450:	2001      	movmi	r0, #1
 800a452:	6013      	strmi	r3, [r2, #0]
 800a454:	bf5c      	itt	pl
 800a456:	6013      	strpl	r3, [r2, #0]
 800a458:	2002      	movpl	r0, #2
 800a45a:	4770      	bx	lr
 800a45c:	b299      	uxth	r1, r3
 800a45e:	b909      	cbnz	r1, 800a464 <__lo0bits+0x2a>
 800a460:	0c1b      	lsrs	r3, r3, #16
 800a462:	2010      	movs	r0, #16
 800a464:	b2d9      	uxtb	r1, r3
 800a466:	b909      	cbnz	r1, 800a46c <__lo0bits+0x32>
 800a468:	3008      	adds	r0, #8
 800a46a:	0a1b      	lsrs	r3, r3, #8
 800a46c:	0719      	lsls	r1, r3, #28
 800a46e:	bf04      	itt	eq
 800a470:	091b      	lsreq	r3, r3, #4
 800a472:	3004      	addeq	r0, #4
 800a474:	0799      	lsls	r1, r3, #30
 800a476:	bf04      	itt	eq
 800a478:	089b      	lsreq	r3, r3, #2
 800a47a:	3002      	addeq	r0, #2
 800a47c:	07d9      	lsls	r1, r3, #31
 800a47e:	d403      	bmi.n	800a488 <__lo0bits+0x4e>
 800a480:	085b      	lsrs	r3, r3, #1
 800a482:	f100 0001 	add.w	r0, r0, #1
 800a486:	d003      	beq.n	800a490 <__lo0bits+0x56>
 800a488:	6013      	str	r3, [r2, #0]
 800a48a:	4770      	bx	lr
 800a48c:	2000      	movs	r0, #0
 800a48e:	4770      	bx	lr
 800a490:	2020      	movs	r0, #32
 800a492:	4770      	bx	lr

0800a494 <__i2b>:
 800a494:	b510      	push	{r4, lr}
 800a496:	460c      	mov	r4, r1
 800a498:	2101      	movs	r1, #1
 800a49a:	f7ff febd 	bl	800a218 <_Balloc>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	b928      	cbnz	r0, 800a4ae <__i2b+0x1a>
 800a4a2:	4b05      	ldr	r3, [pc, #20]	@ (800a4b8 <__i2b+0x24>)
 800a4a4:	4805      	ldr	r0, [pc, #20]	@ (800a4bc <__i2b+0x28>)
 800a4a6:	f240 1145 	movw	r1, #325	@ 0x145
 800a4aa:	f7fe fbff 	bl	8008cac <__assert_func>
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	6144      	str	r4, [r0, #20]
 800a4b2:	6103      	str	r3, [r0, #16]
 800a4b4:	bd10      	pop	{r4, pc}
 800a4b6:	bf00      	nop
 800a4b8:	0800bd5b 	.word	0x0800bd5b
 800a4bc:	0800bdcc 	.word	0x0800bdcc

0800a4c0 <__multiply>:
 800a4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c4:	4614      	mov	r4, r2
 800a4c6:	690a      	ldr	r2, [r1, #16]
 800a4c8:	6923      	ldr	r3, [r4, #16]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	bfa8      	it	ge
 800a4ce:	4623      	movge	r3, r4
 800a4d0:	460f      	mov	r7, r1
 800a4d2:	bfa4      	itt	ge
 800a4d4:	460c      	movge	r4, r1
 800a4d6:	461f      	movge	r7, r3
 800a4d8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a4dc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a4e0:	68a3      	ldr	r3, [r4, #8]
 800a4e2:	6861      	ldr	r1, [r4, #4]
 800a4e4:	eb0a 0609 	add.w	r6, sl, r9
 800a4e8:	42b3      	cmp	r3, r6
 800a4ea:	b085      	sub	sp, #20
 800a4ec:	bfb8      	it	lt
 800a4ee:	3101      	addlt	r1, #1
 800a4f0:	f7ff fe92 	bl	800a218 <_Balloc>
 800a4f4:	b930      	cbnz	r0, 800a504 <__multiply+0x44>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	4b44      	ldr	r3, [pc, #272]	@ (800a60c <__multiply+0x14c>)
 800a4fa:	4845      	ldr	r0, [pc, #276]	@ (800a610 <__multiply+0x150>)
 800a4fc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a500:	f7fe fbd4 	bl	8008cac <__assert_func>
 800a504:	f100 0514 	add.w	r5, r0, #20
 800a508:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a50c:	462b      	mov	r3, r5
 800a50e:	2200      	movs	r2, #0
 800a510:	4543      	cmp	r3, r8
 800a512:	d321      	bcc.n	800a558 <__multiply+0x98>
 800a514:	f107 0114 	add.w	r1, r7, #20
 800a518:	f104 0214 	add.w	r2, r4, #20
 800a51c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a520:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a524:	9302      	str	r3, [sp, #8]
 800a526:	1b13      	subs	r3, r2, r4
 800a528:	3b15      	subs	r3, #21
 800a52a:	f023 0303 	bic.w	r3, r3, #3
 800a52e:	3304      	adds	r3, #4
 800a530:	f104 0715 	add.w	r7, r4, #21
 800a534:	42ba      	cmp	r2, r7
 800a536:	bf38      	it	cc
 800a538:	2304      	movcc	r3, #4
 800a53a:	9301      	str	r3, [sp, #4]
 800a53c:	9b02      	ldr	r3, [sp, #8]
 800a53e:	9103      	str	r1, [sp, #12]
 800a540:	428b      	cmp	r3, r1
 800a542:	d80c      	bhi.n	800a55e <__multiply+0x9e>
 800a544:	2e00      	cmp	r6, #0
 800a546:	dd03      	ble.n	800a550 <__multiply+0x90>
 800a548:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d05b      	beq.n	800a608 <__multiply+0x148>
 800a550:	6106      	str	r6, [r0, #16]
 800a552:	b005      	add	sp, #20
 800a554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a558:	f843 2b04 	str.w	r2, [r3], #4
 800a55c:	e7d8      	b.n	800a510 <__multiply+0x50>
 800a55e:	f8b1 a000 	ldrh.w	sl, [r1]
 800a562:	f1ba 0f00 	cmp.w	sl, #0
 800a566:	d024      	beq.n	800a5b2 <__multiply+0xf2>
 800a568:	f104 0e14 	add.w	lr, r4, #20
 800a56c:	46a9      	mov	r9, r5
 800a56e:	f04f 0c00 	mov.w	ip, #0
 800a572:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a576:	f8d9 3000 	ldr.w	r3, [r9]
 800a57a:	fa1f fb87 	uxth.w	fp, r7
 800a57e:	b29b      	uxth	r3, r3
 800a580:	fb0a 330b 	mla	r3, sl, fp, r3
 800a584:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a588:	f8d9 7000 	ldr.w	r7, [r9]
 800a58c:	4463      	add	r3, ip
 800a58e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a592:	fb0a c70b 	mla	r7, sl, fp, ip
 800a596:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a5a0:	4572      	cmp	r2, lr
 800a5a2:	f849 3b04 	str.w	r3, [r9], #4
 800a5a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a5aa:	d8e2      	bhi.n	800a572 <__multiply+0xb2>
 800a5ac:	9b01      	ldr	r3, [sp, #4]
 800a5ae:	f845 c003 	str.w	ip, [r5, r3]
 800a5b2:	9b03      	ldr	r3, [sp, #12]
 800a5b4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a5b8:	3104      	adds	r1, #4
 800a5ba:	f1b9 0f00 	cmp.w	r9, #0
 800a5be:	d021      	beq.n	800a604 <__multiply+0x144>
 800a5c0:	682b      	ldr	r3, [r5, #0]
 800a5c2:	f104 0c14 	add.w	ip, r4, #20
 800a5c6:	46ae      	mov	lr, r5
 800a5c8:	f04f 0a00 	mov.w	sl, #0
 800a5cc:	f8bc b000 	ldrh.w	fp, [ip]
 800a5d0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a5d4:	fb09 770b 	mla	r7, r9, fp, r7
 800a5d8:	4457      	add	r7, sl
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a5e0:	f84e 3b04 	str.w	r3, [lr], #4
 800a5e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a5e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5ec:	f8be 3000 	ldrh.w	r3, [lr]
 800a5f0:	fb09 330a 	mla	r3, r9, sl, r3
 800a5f4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a5f8:	4562      	cmp	r2, ip
 800a5fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5fe:	d8e5      	bhi.n	800a5cc <__multiply+0x10c>
 800a600:	9f01      	ldr	r7, [sp, #4]
 800a602:	51eb      	str	r3, [r5, r7]
 800a604:	3504      	adds	r5, #4
 800a606:	e799      	b.n	800a53c <__multiply+0x7c>
 800a608:	3e01      	subs	r6, #1
 800a60a:	e79b      	b.n	800a544 <__multiply+0x84>
 800a60c:	0800bd5b 	.word	0x0800bd5b
 800a610:	0800bdcc 	.word	0x0800bdcc

0800a614 <__pow5mult>:
 800a614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a618:	4615      	mov	r5, r2
 800a61a:	f012 0203 	ands.w	r2, r2, #3
 800a61e:	4607      	mov	r7, r0
 800a620:	460e      	mov	r6, r1
 800a622:	d007      	beq.n	800a634 <__pow5mult+0x20>
 800a624:	4c25      	ldr	r4, [pc, #148]	@ (800a6bc <__pow5mult+0xa8>)
 800a626:	3a01      	subs	r2, #1
 800a628:	2300      	movs	r3, #0
 800a62a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a62e:	f7ff fe55 	bl	800a2dc <__multadd>
 800a632:	4606      	mov	r6, r0
 800a634:	10ad      	asrs	r5, r5, #2
 800a636:	d03d      	beq.n	800a6b4 <__pow5mult+0xa0>
 800a638:	69fc      	ldr	r4, [r7, #28]
 800a63a:	b97c      	cbnz	r4, 800a65c <__pow5mult+0x48>
 800a63c:	2010      	movs	r0, #16
 800a63e:	f7ff fd23 	bl	800a088 <malloc>
 800a642:	4602      	mov	r2, r0
 800a644:	61f8      	str	r0, [r7, #28]
 800a646:	b928      	cbnz	r0, 800a654 <__pow5mult+0x40>
 800a648:	4b1d      	ldr	r3, [pc, #116]	@ (800a6c0 <__pow5mult+0xac>)
 800a64a:	481e      	ldr	r0, [pc, #120]	@ (800a6c4 <__pow5mult+0xb0>)
 800a64c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a650:	f7fe fb2c 	bl	8008cac <__assert_func>
 800a654:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a658:	6004      	str	r4, [r0, #0]
 800a65a:	60c4      	str	r4, [r0, #12]
 800a65c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a660:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a664:	b94c      	cbnz	r4, 800a67a <__pow5mult+0x66>
 800a666:	f240 2171 	movw	r1, #625	@ 0x271
 800a66a:	4638      	mov	r0, r7
 800a66c:	f7ff ff12 	bl	800a494 <__i2b>
 800a670:	2300      	movs	r3, #0
 800a672:	f8c8 0008 	str.w	r0, [r8, #8]
 800a676:	4604      	mov	r4, r0
 800a678:	6003      	str	r3, [r0, #0]
 800a67a:	f04f 0900 	mov.w	r9, #0
 800a67e:	07eb      	lsls	r3, r5, #31
 800a680:	d50a      	bpl.n	800a698 <__pow5mult+0x84>
 800a682:	4631      	mov	r1, r6
 800a684:	4622      	mov	r2, r4
 800a686:	4638      	mov	r0, r7
 800a688:	f7ff ff1a 	bl	800a4c0 <__multiply>
 800a68c:	4631      	mov	r1, r6
 800a68e:	4680      	mov	r8, r0
 800a690:	4638      	mov	r0, r7
 800a692:	f7ff fe01 	bl	800a298 <_Bfree>
 800a696:	4646      	mov	r6, r8
 800a698:	106d      	asrs	r5, r5, #1
 800a69a:	d00b      	beq.n	800a6b4 <__pow5mult+0xa0>
 800a69c:	6820      	ldr	r0, [r4, #0]
 800a69e:	b938      	cbnz	r0, 800a6b0 <__pow5mult+0x9c>
 800a6a0:	4622      	mov	r2, r4
 800a6a2:	4621      	mov	r1, r4
 800a6a4:	4638      	mov	r0, r7
 800a6a6:	f7ff ff0b 	bl	800a4c0 <__multiply>
 800a6aa:	6020      	str	r0, [r4, #0]
 800a6ac:	f8c0 9000 	str.w	r9, [r0]
 800a6b0:	4604      	mov	r4, r0
 800a6b2:	e7e4      	b.n	800a67e <__pow5mult+0x6a>
 800a6b4:	4630      	mov	r0, r6
 800a6b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6ba:	bf00      	nop
 800a6bc:	0800be28 	.word	0x0800be28
 800a6c0:	0800bc41 	.word	0x0800bc41
 800a6c4:	0800bdcc 	.word	0x0800bdcc

0800a6c8 <__lshift>:
 800a6c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6cc:	460c      	mov	r4, r1
 800a6ce:	6849      	ldr	r1, [r1, #4]
 800a6d0:	6923      	ldr	r3, [r4, #16]
 800a6d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a6d6:	68a3      	ldr	r3, [r4, #8]
 800a6d8:	4607      	mov	r7, r0
 800a6da:	4691      	mov	r9, r2
 800a6dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a6e0:	f108 0601 	add.w	r6, r8, #1
 800a6e4:	42b3      	cmp	r3, r6
 800a6e6:	db0b      	blt.n	800a700 <__lshift+0x38>
 800a6e8:	4638      	mov	r0, r7
 800a6ea:	f7ff fd95 	bl	800a218 <_Balloc>
 800a6ee:	4605      	mov	r5, r0
 800a6f0:	b948      	cbnz	r0, 800a706 <__lshift+0x3e>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	4b28      	ldr	r3, [pc, #160]	@ (800a798 <__lshift+0xd0>)
 800a6f6:	4829      	ldr	r0, [pc, #164]	@ (800a79c <__lshift+0xd4>)
 800a6f8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a6fc:	f7fe fad6 	bl	8008cac <__assert_func>
 800a700:	3101      	adds	r1, #1
 800a702:	005b      	lsls	r3, r3, #1
 800a704:	e7ee      	b.n	800a6e4 <__lshift+0x1c>
 800a706:	2300      	movs	r3, #0
 800a708:	f100 0114 	add.w	r1, r0, #20
 800a70c:	f100 0210 	add.w	r2, r0, #16
 800a710:	4618      	mov	r0, r3
 800a712:	4553      	cmp	r3, sl
 800a714:	db33      	blt.n	800a77e <__lshift+0xb6>
 800a716:	6920      	ldr	r0, [r4, #16]
 800a718:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a71c:	f104 0314 	add.w	r3, r4, #20
 800a720:	f019 091f 	ands.w	r9, r9, #31
 800a724:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a728:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a72c:	d02b      	beq.n	800a786 <__lshift+0xbe>
 800a72e:	f1c9 0e20 	rsb	lr, r9, #32
 800a732:	468a      	mov	sl, r1
 800a734:	2200      	movs	r2, #0
 800a736:	6818      	ldr	r0, [r3, #0]
 800a738:	fa00 f009 	lsl.w	r0, r0, r9
 800a73c:	4310      	orrs	r0, r2
 800a73e:	f84a 0b04 	str.w	r0, [sl], #4
 800a742:	f853 2b04 	ldr.w	r2, [r3], #4
 800a746:	459c      	cmp	ip, r3
 800a748:	fa22 f20e 	lsr.w	r2, r2, lr
 800a74c:	d8f3      	bhi.n	800a736 <__lshift+0x6e>
 800a74e:	ebac 0304 	sub.w	r3, ip, r4
 800a752:	3b15      	subs	r3, #21
 800a754:	f023 0303 	bic.w	r3, r3, #3
 800a758:	3304      	adds	r3, #4
 800a75a:	f104 0015 	add.w	r0, r4, #21
 800a75e:	4584      	cmp	ip, r0
 800a760:	bf38      	it	cc
 800a762:	2304      	movcc	r3, #4
 800a764:	50ca      	str	r2, [r1, r3]
 800a766:	b10a      	cbz	r2, 800a76c <__lshift+0xa4>
 800a768:	f108 0602 	add.w	r6, r8, #2
 800a76c:	3e01      	subs	r6, #1
 800a76e:	4638      	mov	r0, r7
 800a770:	612e      	str	r6, [r5, #16]
 800a772:	4621      	mov	r1, r4
 800a774:	f7ff fd90 	bl	800a298 <_Bfree>
 800a778:	4628      	mov	r0, r5
 800a77a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a77e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a782:	3301      	adds	r3, #1
 800a784:	e7c5      	b.n	800a712 <__lshift+0x4a>
 800a786:	3904      	subs	r1, #4
 800a788:	f853 2b04 	ldr.w	r2, [r3], #4
 800a78c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a790:	459c      	cmp	ip, r3
 800a792:	d8f9      	bhi.n	800a788 <__lshift+0xc0>
 800a794:	e7ea      	b.n	800a76c <__lshift+0xa4>
 800a796:	bf00      	nop
 800a798:	0800bd5b 	.word	0x0800bd5b
 800a79c:	0800bdcc 	.word	0x0800bdcc

0800a7a0 <__mcmp>:
 800a7a0:	690a      	ldr	r2, [r1, #16]
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	6900      	ldr	r0, [r0, #16]
 800a7a6:	1a80      	subs	r0, r0, r2
 800a7a8:	b530      	push	{r4, r5, lr}
 800a7aa:	d10e      	bne.n	800a7ca <__mcmp+0x2a>
 800a7ac:	3314      	adds	r3, #20
 800a7ae:	3114      	adds	r1, #20
 800a7b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a7b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a7b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a7bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a7c0:	4295      	cmp	r5, r2
 800a7c2:	d003      	beq.n	800a7cc <__mcmp+0x2c>
 800a7c4:	d205      	bcs.n	800a7d2 <__mcmp+0x32>
 800a7c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a7ca:	bd30      	pop	{r4, r5, pc}
 800a7cc:	42a3      	cmp	r3, r4
 800a7ce:	d3f3      	bcc.n	800a7b8 <__mcmp+0x18>
 800a7d0:	e7fb      	b.n	800a7ca <__mcmp+0x2a>
 800a7d2:	2001      	movs	r0, #1
 800a7d4:	e7f9      	b.n	800a7ca <__mcmp+0x2a>
	...

0800a7d8 <__mdiff>:
 800a7d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7dc:	4689      	mov	r9, r1
 800a7de:	4606      	mov	r6, r0
 800a7e0:	4611      	mov	r1, r2
 800a7e2:	4648      	mov	r0, r9
 800a7e4:	4614      	mov	r4, r2
 800a7e6:	f7ff ffdb 	bl	800a7a0 <__mcmp>
 800a7ea:	1e05      	subs	r5, r0, #0
 800a7ec:	d112      	bne.n	800a814 <__mdiff+0x3c>
 800a7ee:	4629      	mov	r1, r5
 800a7f0:	4630      	mov	r0, r6
 800a7f2:	f7ff fd11 	bl	800a218 <_Balloc>
 800a7f6:	4602      	mov	r2, r0
 800a7f8:	b928      	cbnz	r0, 800a806 <__mdiff+0x2e>
 800a7fa:	4b3f      	ldr	r3, [pc, #252]	@ (800a8f8 <__mdiff+0x120>)
 800a7fc:	f240 2137 	movw	r1, #567	@ 0x237
 800a800:	483e      	ldr	r0, [pc, #248]	@ (800a8fc <__mdiff+0x124>)
 800a802:	f7fe fa53 	bl	8008cac <__assert_func>
 800a806:	2301      	movs	r3, #1
 800a808:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a80c:	4610      	mov	r0, r2
 800a80e:	b003      	add	sp, #12
 800a810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a814:	bfbc      	itt	lt
 800a816:	464b      	movlt	r3, r9
 800a818:	46a1      	movlt	r9, r4
 800a81a:	4630      	mov	r0, r6
 800a81c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a820:	bfba      	itte	lt
 800a822:	461c      	movlt	r4, r3
 800a824:	2501      	movlt	r5, #1
 800a826:	2500      	movge	r5, #0
 800a828:	f7ff fcf6 	bl	800a218 <_Balloc>
 800a82c:	4602      	mov	r2, r0
 800a82e:	b918      	cbnz	r0, 800a838 <__mdiff+0x60>
 800a830:	4b31      	ldr	r3, [pc, #196]	@ (800a8f8 <__mdiff+0x120>)
 800a832:	f240 2145 	movw	r1, #581	@ 0x245
 800a836:	e7e3      	b.n	800a800 <__mdiff+0x28>
 800a838:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a83c:	6926      	ldr	r6, [r4, #16]
 800a83e:	60c5      	str	r5, [r0, #12]
 800a840:	f109 0310 	add.w	r3, r9, #16
 800a844:	f109 0514 	add.w	r5, r9, #20
 800a848:	f104 0e14 	add.w	lr, r4, #20
 800a84c:	f100 0b14 	add.w	fp, r0, #20
 800a850:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a854:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a858:	9301      	str	r3, [sp, #4]
 800a85a:	46d9      	mov	r9, fp
 800a85c:	f04f 0c00 	mov.w	ip, #0
 800a860:	9b01      	ldr	r3, [sp, #4]
 800a862:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a866:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a86a:	9301      	str	r3, [sp, #4]
 800a86c:	fa1f f38a 	uxth.w	r3, sl
 800a870:	4619      	mov	r1, r3
 800a872:	b283      	uxth	r3, r0
 800a874:	1acb      	subs	r3, r1, r3
 800a876:	0c00      	lsrs	r0, r0, #16
 800a878:	4463      	add	r3, ip
 800a87a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a87e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a882:	b29b      	uxth	r3, r3
 800a884:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a888:	4576      	cmp	r6, lr
 800a88a:	f849 3b04 	str.w	r3, [r9], #4
 800a88e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a892:	d8e5      	bhi.n	800a860 <__mdiff+0x88>
 800a894:	1b33      	subs	r3, r6, r4
 800a896:	3b15      	subs	r3, #21
 800a898:	f023 0303 	bic.w	r3, r3, #3
 800a89c:	3415      	adds	r4, #21
 800a89e:	3304      	adds	r3, #4
 800a8a0:	42a6      	cmp	r6, r4
 800a8a2:	bf38      	it	cc
 800a8a4:	2304      	movcc	r3, #4
 800a8a6:	441d      	add	r5, r3
 800a8a8:	445b      	add	r3, fp
 800a8aa:	461e      	mov	r6, r3
 800a8ac:	462c      	mov	r4, r5
 800a8ae:	4544      	cmp	r4, r8
 800a8b0:	d30e      	bcc.n	800a8d0 <__mdiff+0xf8>
 800a8b2:	f108 0103 	add.w	r1, r8, #3
 800a8b6:	1b49      	subs	r1, r1, r5
 800a8b8:	f021 0103 	bic.w	r1, r1, #3
 800a8bc:	3d03      	subs	r5, #3
 800a8be:	45a8      	cmp	r8, r5
 800a8c0:	bf38      	it	cc
 800a8c2:	2100      	movcc	r1, #0
 800a8c4:	440b      	add	r3, r1
 800a8c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a8ca:	b191      	cbz	r1, 800a8f2 <__mdiff+0x11a>
 800a8cc:	6117      	str	r7, [r2, #16]
 800a8ce:	e79d      	b.n	800a80c <__mdiff+0x34>
 800a8d0:	f854 1b04 	ldr.w	r1, [r4], #4
 800a8d4:	46e6      	mov	lr, ip
 800a8d6:	0c08      	lsrs	r0, r1, #16
 800a8d8:	fa1c fc81 	uxtah	ip, ip, r1
 800a8dc:	4471      	add	r1, lr
 800a8de:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a8e2:	b289      	uxth	r1, r1
 800a8e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a8e8:	f846 1b04 	str.w	r1, [r6], #4
 800a8ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a8f0:	e7dd      	b.n	800a8ae <__mdiff+0xd6>
 800a8f2:	3f01      	subs	r7, #1
 800a8f4:	e7e7      	b.n	800a8c6 <__mdiff+0xee>
 800a8f6:	bf00      	nop
 800a8f8:	0800bd5b 	.word	0x0800bd5b
 800a8fc:	0800bdcc 	.word	0x0800bdcc

0800a900 <__ulp>:
 800a900:	b082      	sub	sp, #8
 800a902:	ed8d 0b00 	vstr	d0, [sp]
 800a906:	9a01      	ldr	r2, [sp, #4]
 800a908:	4b0f      	ldr	r3, [pc, #60]	@ (800a948 <__ulp+0x48>)
 800a90a:	4013      	ands	r3, r2
 800a90c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a910:	2b00      	cmp	r3, #0
 800a912:	dc08      	bgt.n	800a926 <__ulp+0x26>
 800a914:	425b      	negs	r3, r3
 800a916:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a91a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a91e:	da04      	bge.n	800a92a <__ulp+0x2a>
 800a920:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a924:	4113      	asrs	r3, r2
 800a926:	2200      	movs	r2, #0
 800a928:	e008      	b.n	800a93c <__ulp+0x3c>
 800a92a:	f1a2 0314 	sub.w	r3, r2, #20
 800a92e:	2b1e      	cmp	r3, #30
 800a930:	bfda      	itte	le
 800a932:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a936:	40da      	lsrle	r2, r3
 800a938:	2201      	movgt	r2, #1
 800a93a:	2300      	movs	r3, #0
 800a93c:	4619      	mov	r1, r3
 800a93e:	4610      	mov	r0, r2
 800a940:	ec41 0b10 	vmov	d0, r0, r1
 800a944:	b002      	add	sp, #8
 800a946:	4770      	bx	lr
 800a948:	7ff00000 	.word	0x7ff00000

0800a94c <__b2d>:
 800a94c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a950:	6906      	ldr	r6, [r0, #16]
 800a952:	f100 0814 	add.w	r8, r0, #20
 800a956:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a95a:	1f37      	subs	r7, r6, #4
 800a95c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a960:	4610      	mov	r0, r2
 800a962:	f7ff fd4b 	bl	800a3fc <__hi0bits>
 800a966:	f1c0 0320 	rsb	r3, r0, #32
 800a96a:	280a      	cmp	r0, #10
 800a96c:	600b      	str	r3, [r1, #0]
 800a96e:	491b      	ldr	r1, [pc, #108]	@ (800a9dc <__b2d+0x90>)
 800a970:	dc15      	bgt.n	800a99e <__b2d+0x52>
 800a972:	f1c0 0c0b 	rsb	ip, r0, #11
 800a976:	fa22 f30c 	lsr.w	r3, r2, ip
 800a97a:	45b8      	cmp	r8, r7
 800a97c:	ea43 0501 	orr.w	r5, r3, r1
 800a980:	bf34      	ite	cc
 800a982:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a986:	2300      	movcs	r3, #0
 800a988:	3015      	adds	r0, #21
 800a98a:	fa02 f000 	lsl.w	r0, r2, r0
 800a98e:	fa23 f30c 	lsr.w	r3, r3, ip
 800a992:	4303      	orrs	r3, r0
 800a994:	461c      	mov	r4, r3
 800a996:	ec45 4b10 	vmov	d0, r4, r5
 800a99a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a99e:	45b8      	cmp	r8, r7
 800a9a0:	bf3a      	itte	cc
 800a9a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a9a6:	f1a6 0708 	subcc.w	r7, r6, #8
 800a9aa:	2300      	movcs	r3, #0
 800a9ac:	380b      	subs	r0, #11
 800a9ae:	d012      	beq.n	800a9d6 <__b2d+0x8a>
 800a9b0:	f1c0 0120 	rsb	r1, r0, #32
 800a9b4:	fa23 f401 	lsr.w	r4, r3, r1
 800a9b8:	4082      	lsls	r2, r0
 800a9ba:	4322      	orrs	r2, r4
 800a9bc:	4547      	cmp	r7, r8
 800a9be:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a9c2:	bf8c      	ite	hi
 800a9c4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a9c8:	2200      	movls	r2, #0
 800a9ca:	4083      	lsls	r3, r0
 800a9cc:	40ca      	lsrs	r2, r1
 800a9ce:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	e7de      	b.n	800a994 <__b2d+0x48>
 800a9d6:	ea42 0501 	orr.w	r5, r2, r1
 800a9da:	e7db      	b.n	800a994 <__b2d+0x48>
 800a9dc:	3ff00000 	.word	0x3ff00000

0800a9e0 <__d2b>:
 800a9e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a9e4:	460f      	mov	r7, r1
 800a9e6:	2101      	movs	r1, #1
 800a9e8:	ec59 8b10 	vmov	r8, r9, d0
 800a9ec:	4616      	mov	r6, r2
 800a9ee:	f7ff fc13 	bl	800a218 <_Balloc>
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	b930      	cbnz	r0, 800aa04 <__d2b+0x24>
 800a9f6:	4602      	mov	r2, r0
 800a9f8:	4b23      	ldr	r3, [pc, #140]	@ (800aa88 <__d2b+0xa8>)
 800a9fa:	4824      	ldr	r0, [pc, #144]	@ (800aa8c <__d2b+0xac>)
 800a9fc:	f240 310f 	movw	r1, #783	@ 0x30f
 800aa00:	f7fe f954 	bl	8008cac <__assert_func>
 800aa04:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aa08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa0c:	b10d      	cbz	r5, 800aa12 <__d2b+0x32>
 800aa0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aa12:	9301      	str	r3, [sp, #4]
 800aa14:	f1b8 0300 	subs.w	r3, r8, #0
 800aa18:	d023      	beq.n	800aa62 <__d2b+0x82>
 800aa1a:	4668      	mov	r0, sp
 800aa1c:	9300      	str	r3, [sp, #0]
 800aa1e:	f7ff fd0c 	bl	800a43a <__lo0bits>
 800aa22:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aa26:	b1d0      	cbz	r0, 800aa5e <__d2b+0x7e>
 800aa28:	f1c0 0320 	rsb	r3, r0, #32
 800aa2c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa30:	430b      	orrs	r3, r1
 800aa32:	40c2      	lsrs	r2, r0
 800aa34:	6163      	str	r3, [r4, #20]
 800aa36:	9201      	str	r2, [sp, #4]
 800aa38:	9b01      	ldr	r3, [sp, #4]
 800aa3a:	61a3      	str	r3, [r4, #24]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	bf0c      	ite	eq
 800aa40:	2201      	moveq	r2, #1
 800aa42:	2202      	movne	r2, #2
 800aa44:	6122      	str	r2, [r4, #16]
 800aa46:	b1a5      	cbz	r5, 800aa72 <__d2b+0x92>
 800aa48:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aa4c:	4405      	add	r5, r0
 800aa4e:	603d      	str	r5, [r7, #0]
 800aa50:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800aa54:	6030      	str	r0, [r6, #0]
 800aa56:	4620      	mov	r0, r4
 800aa58:	b003      	add	sp, #12
 800aa5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa5e:	6161      	str	r1, [r4, #20]
 800aa60:	e7ea      	b.n	800aa38 <__d2b+0x58>
 800aa62:	a801      	add	r0, sp, #4
 800aa64:	f7ff fce9 	bl	800a43a <__lo0bits>
 800aa68:	9b01      	ldr	r3, [sp, #4]
 800aa6a:	6163      	str	r3, [r4, #20]
 800aa6c:	3020      	adds	r0, #32
 800aa6e:	2201      	movs	r2, #1
 800aa70:	e7e8      	b.n	800aa44 <__d2b+0x64>
 800aa72:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aa76:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800aa7a:	6038      	str	r0, [r7, #0]
 800aa7c:	6918      	ldr	r0, [r3, #16]
 800aa7e:	f7ff fcbd 	bl	800a3fc <__hi0bits>
 800aa82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aa86:	e7e5      	b.n	800aa54 <__d2b+0x74>
 800aa88:	0800bd5b 	.word	0x0800bd5b
 800aa8c:	0800bdcc 	.word	0x0800bdcc

0800aa90 <__ratio>:
 800aa90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa94:	b085      	sub	sp, #20
 800aa96:	e9cd 1000 	strd	r1, r0, [sp]
 800aa9a:	a902      	add	r1, sp, #8
 800aa9c:	f7ff ff56 	bl	800a94c <__b2d>
 800aaa0:	9800      	ldr	r0, [sp, #0]
 800aaa2:	a903      	add	r1, sp, #12
 800aaa4:	ec55 4b10 	vmov	r4, r5, d0
 800aaa8:	f7ff ff50 	bl	800a94c <__b2d>
 800aaac:	9b01      	ldr	r3, [sp, #4]
 800aaae:	6919      	ldr	r1, [r3, #16]
 800aab0:	9b00      	ldr	r3, [sp, #0]
 800aab2:	691b      	ldr	r3, [r3, #16]
 800aab4:	1ac9      	subs	r1, r1, r3
 800aab6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800aaba:	1a9b      	subs	r3, r3, r2
 800aabc:	ec5b ab10 	vmov	sl, fp, d0
 800aac0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	bfce      	itee	gt
 800aac8:	462a      	movgt	r2, r5
 800aaca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aace:	465a      	movle	r2, fp
 800aad0:	462f      	mov	r7, r5
 800aad2:	46d9      	mov	r9, fp
 800aad4:	bfcc      	ite	gt
 800aad6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800aada:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800aade:	464b      	mov	r3, r9
 800aae0:	4652      	mov	r2, sl
 800aae2:	4620      	mov	r0, r4
 800aae4:	4639      	mov	r1, r7
 800aae6:	f7f5 fed1 	bl	800088c <__aeabi_ddiv>
 800aaea:	ec41 0b10 	vmov	d0, r0, r1
 800aaee:	b005      	add	sp, #20
 800aaf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aaf4 <__copybits>:
 800aaf4:	3901      	subs	r1, #1
 800aaf6:	b570      	push	{r4, r5, r6, lr}
 800aaf8:	1149      	asrs	r1, r1, #5
 800aafa:	6914      	ldr	r4, [r2, #16]
 800aafc:	3101      	adds	r1, #1
 800aafe:	f102 0314 	add.w	r3, r2, #20
 800ab02:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ab06:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ab0a:	1f05      	subs	r5, r0, #4
 800ab0c:	42a3      	cmp	r3, r4
 800ab0e:	d30c      	bcc.n	800ab2a <__copybits+0x36>
 800ab10:	1aa3      	subs	r3, r4, r2
 800ab12:	3b11      	subs	r3, #17
 800ab14:	f023 0303 	bic.w	r3, r3, #3
 800ab18:	3211      	adds	r2, #17
 800ab1a:	42a2      	cmp	r2, r4
 800ab1c:	bf88      	it	hi
 800ab1e:	2300      	movhi	r3, #0
 800ab20:	4418      	add	r0, r3
 800ab22:	2300      	movs	r3, #0
 800ab24:	4288      	cmp	r0, r1
 800ab26:	d305      	bcc.n	800ab34 <__copybits+0x40>
 800ab28:	bd70      	pop	{r4, r5, r6, pc}
 800ab2a:	f853 6b04 	ldr.w	r6, [r3], #4
 800ab2e:	f845 6f04 	str.w	r6, [r5, #4]!
 800ab32:	e7eb      	b.n	800ab0c <__copybits+0x18>
 800ab34:	f840 3b04 	str.w	r3, [r0], #4
 800ab38:	e7f4      	b.n	800ab24 <__copybits+0x30>

0800ab3a <__any_on>:
 800ab3a:	f100 0214 	add.w	r2, r0, #20
 800ab3e:	6900      	ldr	r0, [r0, #16]
 800ab40:	114b      	asrs	r3, r1, #5
 800ab42:	4298      	cmp	r0, r3
 800ab44:	b510      	push	{r4, lr}
 800ab46:	db11      	blt.n	800ab6c <__any_on+0x32>
 800ab48:	dd0a      	ble.n	800ab60 <__any_on+0x26>
 800ab4a:	f011 011f 	ands.w	r1, r1, #31
 800ab4e:	d007      	beq.n	800ab60 <__any_on+0x26>
 800ab50:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ab54:	fa24 f001 	lsr.w	r0, r4, r1
 800ab58:	fa00 f101 	lsl.w	r1, r0, r1
 800ab5c:	428c      	cmp	r4, r1
 800ab5e:	d10b      	bne.n	800ab78 <__any_on+0x3e>
 800ab60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d803      	bhi.n	800ab70 <__any_on+0x36>
 800ab68:	2000      	movs	r0, #0
 800ab6a:	bd10      	pop	{r4, pc}
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	e7f7      	b.n	800ab60 <__any_on+0x26>
 800ab70:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab74:	2900      	cmp	r1, #0
 800ab76:	d0f5      	beq.n	800ab64 <__any_on+0x2a>
 800ab78:	2001      	movs	r0, #1
 800ab7a:	e7f6      	b.n	800ab6a <__any_on+0x30>

0800ab7c <_strtol_l.constprop.0>:
 800ab7c:	2b24      	cmp	r3, #36	@ 0x24
 800ab7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab82:	4686      	mov	lr, r0
 800ab84:	4690      	mov	r8, r2
 800ab86:	d801      	bhi.n	800ab8c <_strtol_l.constprop.0+0x10>
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d106      	bne.n	800ab9a <_strtol_l.constprop.0+0x1e>
 800ab8c:	f7fe f844 	bl	8008c18 <__errno>
 800ab90:	2316      	movs	r3, #22
 800ab92:	6003      	str	r3, [r0, #0]
 800ab94:	2000      	movs	r0, #0
 800ab96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab9a:	4834      	ldr	r0, [pc, #208]	@ (800ac6c <_strtol_l.constprop.0+0xf0>)
 800ab9c:	460d      	mov	r5, r1
 800ab9e:	462a      	mov	r2, r5
 800aba0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aba4:	5d06      	ldrb	r6, [r0, r4]
 800aba6:	f016 0608 	ands.w	r6, r6, #8
 800abaa:	d1f8      	bne.n	800ab9e <_strtol_l.constprop.0+0x22>
 800abac:	2c2d      	cmp	r4, #45	@ 0x2d
 800abae:	d12d      	bne.n	800ac0c <_strtol_l.constprop.0+0x90>
 800abb0:	782c      	ldrb	r4, [r5, #0]
 800abb2:	2601      	movs	r6, #1
 800abb4:	1c95      	adds	r5, r2, #2
 800abb6:	f033 0210 	bics.w	r2, r3, #16
 800abba:	d109      	bne.n	800abd0 <_strtol_l.constprop.0+0x54>
 800abbc:	2c30      	cmp	r4, #48	@ 0x30
 800abbe:	d12a      	bne.n	800ac16 <_strtol_l.constprop.0+0x9a>
 800abc0:	782a      	ldrb	r2, [r5, #0]
 800abc2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800abc6:	2a58      	cmp	r2, #88	@ 0x58
 800abc8:	d125      	bne.n	800ac16 <_strtol_l.constprop.0+0x9a>
 800abca:	786c      	ldrb	r4, [r5, #1]
 800abcc:	2310      	movs	r3, #16
 800abce:	3502      	adds	r5, #2
 800abd0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800abd4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800abd8:	2200      	movs	r2, #0
 800abda:	fbbc f9f3 	udiv	r9, ip, r3
 800abde:	4610      	mov	r0, r2
 800abe0:	fb03 ca19 	mls	sl, r3, r9, ip
 800abe4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800abe8:	2f09      	cmp	r7, #9
 800abea:	d81b      	bhi.n	800ac24 <_strtol_l.constprop.0+0xa8>
 800abec:	463c      	mov	r4, r7
 800abee:	42a3      	cmp	r3, r4
 800abf0:	dd27      	ble.n	800ac42 <_strtol_l.constprop.0+0xc6>
 800abf2:	1c57      	adds	r7, r2, #1
 800abf4:	d007      	beq.n	800ac06 <_strtol_l.constprop.0+0x8a>
 800abf6:	4581      	cmp	r9, r0
 800abf8:	d320      	bcc.n	800ac3c <_strtol_l.constprop.0+0xc0>
 800abfa:	d101      	bne.n	800ac00 <_strtol_l.constprop.0+0x84>
 800abfc:	45a2      	cmp	sl, r4
 800abfe:	db1d      	blt.n	800ac3c <_strtol_l.constprop.0+0xc0>
 800ac00:	fb00 4003 	mla	r0, r0, r3, r4
 800ac04:	2201      	movs	r2, #1
 800ac06:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac0a:	e7eb      	b.n	800abe4 <_strtol_l.constprop.0+0x68>
 800ac0c:	2c2b      	cmp	r4, #43	@ 0x2b
 800ac0e:	bf04      	itt	eq
 800ac10:	782c      	ldrbeq	r4, [r5, #0]
 800ac12:	1c95      	addeq	r5, r2, #2
 800ac14:	e7cf      	b.n	800abb6 <_strtol_l.constprop.0+0x3a>
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d1da      	bne.n	800abd0 <_strtol_l.constprop.0+0x54>
 800ac1a:	2c30      	cmp	r4, #48	@ 0x30
 800ac1c:	bf0c      	ite	eq
 800ac1e:	2308      	moveq	r3, #8
 800ac20:	230a      	movne	r3, #10
 800ac22:	e7d5      	b.n	800abd0 <_strtol_l.constprop.0+0x54>
 800ac24:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ac28:	2f19      	cmp	r7, #25
 800ac2a:	d801      	bhi.n	800ac30 <_strtol_l.constprop.0+0xb4>
 800ac2c:	3c37      	subs	r4, #55	@ 0x37
 800ac2e:	e7de      	b.n	800abee <_strtol_l.constprop.0+0x72>
 800ac30:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ac34:	2f19      	cmp	r7, #25
 800ac36:	d804      	bhi.n	800ac42 <_strtol_l.constprop.0+0xc6>
 800ac38:	3c57      	subs	r4, #87	@ 0x57
 800ac3a:	e7d8      	b.n	800abee <_strtol_l.constprop.0+0x72>
 800ac3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ac40:	e7e1      	b.n	800ac06 <_strtol_l.constprop.0+0x8a>
 800ac42:	1c53      	adds	r3, r2, #1
 800ac44:	d108      	bne.n	800ac58 <_strtol_l.constprop.0+0xdc>
 800ac46:	2322      	movs	r3, #34	@ 0x22
 800ac48:	f8ce 3000 	str.w	r3, [lr]
 800ac4c:	4660      	mov	r0, ip
 800ac4e:	f1b8 0f00 	cmp.w	r8, #0
 800ac52:	d0a0      	beq.n	800ab96 <_strtol_l.constprop.0+0x1a>
 800ac54:	1e69      	subs	r1, r5, #1
 800ac56:	e006      	b.n	800ac66 <_strtol_l.constprop.0+0xea>
 800ac58:	b106      	cbz	r6, 800ac5c <_strtol_l.constprop.0+0xe0>
 800ac5a:	4240      	negs	r0, r0
 800ac5c:	f1b8 0f00 	cmp.w	r8, #0
 800ac60:	d099      	beq.n	800ab96 <_strtol_l.constprop.0+0x1a>
 800ac62:	2a00      	cmp	r2, #0
 800ac64:	d1f6      	bne.n	800ac54 <_strtol_l.constprop.0+0xd8>
 800ac66:	f8c8 1000 	str.w	r1, [r8]
 800ac6a:	e794      	b.n	800ab96 <_strtol_l.constprop.0+0x1a>
 800ac6c:	0800bf29 	.word	0x0800bf29

0800ac70 <_strtol_r>:
 800ac70:	f7ff bf84 	b.w	800ab7c <_strtol_l.constprop.0>

0800ac74 <__ascii_wctomb>:
 800ac74:	4603      	mov	r3, r0
 800ac76:	4608      	mov	r0, r1
 800ac78:	b141      	cbz	r1, 800ac8c <__ascii_wctomb+0x18>
 800ac7a:	2aff      	cmp	r2, #255	@ 0xff
 800ac7c:	d904      	bls.n	800ac88 <__ascii_wctomb+0x14>
 800ac7e:	228a      	movs	r2, #138	@ 0x8a
 800ac80:	601a      	str	r2, [r3, #0]
 800ac82:	f04f 30ff 	mov.w	r0, #4294967295
 800ac86:	4770      	bx	lr
 800ac88:	700a      	strb	r2, [r1, #0]
 800ac8a:	2001      	movs	r0, #1
 800ac8c:	4770      	bx	lr

0800ac8e <__ssputs_r>:
 800ac8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac92:	688e      	ldr	r6, [r1, #8]
 800ac94:	461f      	mov	r7, r3
 800ac96:	42be      	cmp	r6, r7
 800ac98:	680b      	ldr	r3, [r1, #0]
 800ac9a:	4682      	mov	sl, r0
 800ac9c:	460c      	mov	r4, r1
 800ac9e:	4690      	mov	r8, r2
 800aca0:	d82d      	bhi.n	800acfe <__ssputs_r+0x70>
 800aca2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aca6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800acaa:	d026      	beq.n	800acfa <__ssputs_r+0x6c>
 800acac:	6965      	ldr	r5, [r4, #20]
 800acae:	6909      	ldr	r1, [r1, #16]
 800acb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800acb4:	eba3 0901 	sub.w	r9, r3, r1
 800acb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800acbc:	1c7b      	adds	r3, r7, #1
 800acbe:	444b      	add	r3, r9
 800acc0:	106d      	asrs	r5, r5, #1
 800acc2:	429d      	cmp	r5, r3
 800acc4:	bf38      	it	cc
 800acc6:	461d      	movcc	r5, r3
 800acc8:	0553      	lsls	r3, r2, #21
 800acca:	d527      	bpl.n	800ad1c <__ssputs_r+0x8e>
 800accc:	4629      	mov	r1, r5
 800acce:	f7ff fa05 	bl	800a0dc <_malloc_r>
 800acd2:	4606      	mov	r6, r0
 800acd4:	b360      	cbz	r0, 800ad30 <__ssputs_r+0xa2>
 800acd6:	6921      	ldr	r1, [r4, #16]
 800acd8:	464a      	mov	r2, r9
 800acda:	f7fd ffca 	bl	8008c72 <memcpy>
 800acde:	89a3      	ldrh	r3, [r4, #12]
 800ace0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ace4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ace8:	81a3      	strh	r3, [r4, #12]
 800acea:	6126      	str	r6, [r4, #16]
 800acec:	6165      	str	r5, [r4, #20]
 800acee:	444e      	add	r6, r9
 800acf0:	eba5 0509 	sub.w	r5, r5, r9
 800acf4:	6026      	str	r6, [r4, #0]
 800acf6:	60a5      	str	r5, [r4, #8]
 800acf8:	463e      	mov	r6, r7
 800acfa:	42be      	cmp	r6, r7
 800acfc:	d900      	bls.n	800ad00 <__ssputs_r+0x72>
 800acfe:	463e      	mov	r6, r7
 800ad00:	6820      	ldr	r0, [r4, #0]
 800ad02:	4632      	mov	r2, r6
 800ad04:	4641      	mov	r1, r8
 800ad06:	f000 f9d7 	bl	800b0b8 <memmove>
 800ad0a:	68a3      	ldr	r3, [r4, #8]
 800ad0c:	1b9b      	subs	r3, r3, r6
 800ad0e:	60a3      	str	r3, [r4, #8]
 800ad10:	6823      	ldr	r3, [r4, #0]
 800ad12:	4433      	add	r3, r6
 800ad14:	6023      	str	r3, [r4, #0]
 800ad16:	2000      	movs	r0, #0
 800ad18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad1c:	462a      	mov	r2, r5
 800ad1e:	f000 fa10 	bl	800b142 <_realloc_r>
 800ad22:	4606      	mov	r6, r0
 800ad24:	2800      	cmp	r0, #0
 800ad26:	d1e0      	bne.n	800acea <__ssputs_r+0x5c>
 800ad28:	6921      	ldr	r1, [r4, #16]
 800ad2a:	4650      	mov	r0, sl
 800ad2c:	f7fe fe28 	bl	8009980 <_free_r>
 800ad30:	230c      	movs	r3, #12
 800ad32:	f8ca 3000 	str.w	r3, [sl]
 800ad36:	89a3      	ldrh	r3, [r4, #12]
 800ad38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad3c:	81a3      	strh	r3, [r4, #12]
 800ad3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad42:	e7e9      	b.n	800ad18 <__ssputs_r+0x8a>

0800ad44 <_svfiprintf_r>:
 800ad44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad48:	4698      	mov	r8, r3
 800ad4a:	898b      	ldrh	r3, [r1, #12]
 800ad4c:	061b      	lsls	r3, r3, #24
 800ad4e:	b09d      	sub	sp, #116	@ 0x74
 800ad50:	4607      	mov	r7, r0
 800ad52:	460d      	mov	r5, r1
 800ad54:	4614      	mov	r4, r2
 800ad56:	d510      	bpl.n	800ad7a <_svfiprintf_r+0x36>
 800ad58:	690b      	ldr	r3, [r1, #16]
 800ad5a:	b973      	cbnz	r3, 800ad7a <_svfiprintf_r+0x36>
 800ad5c:	2140      	movs	r1, #64	@ 0x40
 800ad5e:	f7ff f9bd 	bl	800a0dc <_malloc_r>
 800ad62:	6028      	str	r0, [r5, #0]
 800ad64:	6128      	str	r0, [r5, #16]
 800ad66:	b930      	cbnz	r0, 800ad76 <_svfiprintf_r+0x32>
 800ad68:	230c      	movs	r3, #12
 800ad6a:	603b      	str	r3, [r7, #0]
 800ad6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad70:	b01d      	add	sp, #116	@ 0x74
 800ad72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad76:	2340      	movs	r3, #64	@ 0x40
 800ad78:	616b      	str	r3, [r5, #20]
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad7e:	2320      	movs	r3, #32
 800ad80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ad84:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad88:	2330      	movs	r3, #48	@ 0x30
 800ad8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800af28 <_svfiprintf_r+0x1e4>
 800ad8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ad92:	f04f 0901 	mov.w	r9, #1
 800ad96:	4623      	mov	r3, r4
 800ad98:	469a      	mov	sl, r3
 800ad9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad9e:	b10a      	cbz	r2, 800ada4 <_svfiprintf_r+0x60>
 800ada0:	2a25      	cmp	r2, #37	@ 0x25
 800ada2:	d1f9      	bne.n	800ad98 <_svfiprintf_r+0x54>
 800ada4:	ebba 0b04 	subs.w	fp, sl, r4
 800ada8:	d00b      	beq.n	800adc2 <_svfiprintf_r+0x7e>
 800adaa:	465b      	mov	r3, fp
 800adac:	4622      	mov	r2, r4
 800adae:	4629      	mov	r1, r5
 800adb0:	4638      	mov	r0, r7
 800adb2:	f7ff ff6c 	bl	800ac8e <__ssputs_r>
 800adb6:	3001      	adds	r0, #1
 800adb8:	f000 80a7 	beq.w	800af0a <_svfiprintf_r+0x1c6>
 800adbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800adbe:	445a      	add	r2, fp
 800adc0:	9209      	str	r2, [sp, #36]	@ 0x24
 800adc2:	f89a 3000 	ldrb.w	r3, [sl]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	f000 809f 	beq.w	800af0a <_svfiprintf_r+0x1c6>
 800adcc:	2300      	movs	r3, #0
 800adce:	f04f 32ff 	mov.w	r2, #4294967295
 800add2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800add6:	f10a 0a01 	add.w	sl, sl, #1
 800adda:	9304      	str	r3, [sp, #16]
 800addc:	9307      	str	r3, [sp, #28]
 800adde:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ade2:	931a      	str	r3, [sp, #104]	@ 0x68
 800ade4:	4654      	mov	r4, sl
 800ade6:	2205      	movs	r2, #5
 800ade8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adec:	484e      	ldr	r0, [pc, #312]	@ (800af28 <_svfiprintf_r+0x1e4>)
 800adee:	f7f5 fa0f 	bl	8000210 <memchr>
 800adf2:	9a04      	ldr	r2, [sp, #16]
 800adf4:	b9d8      	cbnz	r0, 800ae2e <_svfiprintf_r+0xea>
 800adf6:	06d0      	lsls	r0, r2, #27
 800adf8:	bf44      	itt	mi
 800adfa:	2320      	movmi	r3, #32
 800adfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae00:	0711      	lsls	r1, r2, #28
 800ae02:	bf44      	itt	mi
 800ae04:	232b      	movmi	r3, #43	@ 0x2b
 800ae06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae0a:	f89a 3000 	ldrb.w	r3, [sl]
 800ae0e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae10:	d015      	beq.n	800ae3e <_svfiprintf_r+0xfa>
 800ae12:	9a07      	ldr	r2, [sp, #28]
 800ae14:	4654      	mov	r4, sl
 800ae16:	2000      	movs	r0, #0
 800ae18:	f04f 0c0a 	mov.w	ip, #10
 800ae1c:	4621      	mov	r1, r4
 800ae1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae22:	3b30      	subs	r3, #48	@ 0x30
 800ae24:	2b09      	cmp	r3, #9
 800ae26:	d94b      	bls.n	800aec0 <_svfiprintf_r+0x17c>
 800ae28:	b1b0      	cbz	r0, 800ae58 <_svfiprintf_r+0x114>
 800ae2a:	9207      	str	r2, [sp, #28]
 800ae2c:	e014      	b.n	800ae58 <_svfiprintf_r+0x114>
 800ae2e:	eba0 0308 	sub.w	r3, r0, r8
 800ae32:	fa09 f303 	lsl.w	r3, r9, r3
 800ae36:	4313      	orrs	r3, r2
 800ae38:	9304      	str	r3, [sp, #16]
 800ae3a:	46a2      	mov	sl, r4
 800ae3c:	e7d2      	b.n	800ade4 <_svfiprintf_r+0xa0>
 800ae3e:	9b03      	ldr	r3, [sp, #12]
 800ae40:	1d19      	adds	r1, r3, #4
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	9103      	str	r1, [sp, #12]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	bfbb      	ittet	lt
 800ae4a:	425b      	neglt	r3, r3
 800ae4c:	f042 0202 	orrlt.w	r2, r2, #2
 800ae50:	9307      	strge	r3, [sp, #28]
 800ae52:	9307      	strlt	r3, [sp, #28]
 800ae54:	bfb8      	it	lt
 800ae56:	9204      	strlt	r2, [sp, #16]
 800ae58:	7823      	ldrb	r3, [r4, #0]
 800ae5a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae5c:	d10a      	bne.n	800ae74 <_svfiprintf_r+0x130>
 800ae5e:	7863      	ldrb	r3, [r4, #1]
 800ae60:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae62:	d132      	bne.n	800aeca <_svfiprintf_r+0x186>
 800ae64:	9b03      	ldr	r3, [sp, #12]
 800ae66:	1d1a      	adds	r2, r3, #4
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	9203      	str	r2, [sp, #12]
 800ae6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ae70:	3402      	adds	r4, #2
 800ae72:	9305      	str	r3, [sp, #20]
 800ae74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800af38 <_svfiprintf_r+0x1f4>
 800ae78:	7821      	ldrb	r1, [r4, #0]
 800ae7a:	2203      	movs	r2, #3
 800ae7c:	4650      	mov	r0, sl
 800ae7e:	f7f5 f9c7 	bl	8000210 <memchr>
 800ae82:	b138      	cbz	r0, 800ae94 <_svfiprintf_r+0x150>
 800ae84:	9b04      	ldr	r3, [sp, #16]
 800ae86:	eba0 000a 	sub.w	r0, r0, sl
 800ae8a:	2240      	movs	r2, #64	@ 0x40
 800ae8c:	4082      	lsls	r2, r0
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	3401      	adds	r4, #1
 800ae92:	9304      	str	r3, [sp, #16]
 800ae94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae98:	4824      	ldr	r0, [pc, #144]	@ (800af2c <_svfiprintf_r+0x1e8>)
 800ae9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ae9e:	2206      	movs	r2, #6
 800aea0:	f7f5 f9b6 	bl	8000210 <memchr>
 800aea4:	2800      	cmp	r0, #0
 800aea6:	d036      	beq.n	800af16 <_svfiprintf_r+0x1d2>
 800aea8:	4b21      	ldr	r3, [pc, #132]	@ (800af30 <_svfiprintf_r+0x1ec>)
 800aeaa:	bb1b      	cbnz	r3, 800aef4 <_svfiprintf_r+0x1b0>
 800aeac:	9b03      	ldr	r3, [sp, #12]
 800aeae:	3307      	adds	r3, #7
 800aeb0:	f023 0307 	bic.w	r3, r3, #7
 800aeb4:	3308      	adds	r3, #8
 800aeb6:	9303      	str	r3, [sp, #12]
 800aeb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aeba:	4433      	add	r3, r6
 800aebc:	9309      	str	r3, [sp, #36]	@ 0x24
 800aebe:	e76a      	b.n	800ad96 <_svfiprintf_r+0x52>
 800aec0:	fb0c 3202 	mla	r2, ip, r2, r3
 800aec4:	460c      	mov	r4, r1
 800aec6:	2001      	movs	r0, #1
 800aec8:	e7a8      	b.n	800ae1c <_svfiprintf_r+0xd8>
 800aeca:	2300      	movs	r3, #0
 800aecc:	3401      	adds	r4, #1
 800aece:	9305      	str	r3, [sp, #20]
 800aed0:	4619      	mov	r1, r3
 800aed2:	f04f 0c0a 	mov.w	ip, #10
 800aed6:	4620      	mov	r0, r4
 800aed8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aedc:	3a30      	subs	r2, #48	@ 0x30
 800aede:	2a09      	cmp	r2, #9
 800aee0:	d903      	bls.n	800aeea <_svfiprintf_r+0x1a6>
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d0c6      	beq.n	800ae74 <_svfiprintf_r+0x130>
 800aee6:	9105      	str	r1, [sp, #20]
 800aee8:	e7c4      	b.n	800ae74 <_svfiprintf_r+0x130>
 800aeea:	fb0c 2101 	mla	r1, ip, r1, r2
 800aeee:	4604      	mov	r4, r0
 800aef0:	2301      	movs	r3, #1
 800aef2:	e7f0      	b.n	800aed6 <_svfiprintf_r+0x192>
 800aef4:	ab03      	add	r3, sp, #12
 800aef6:	9300      	str	r3, [sp, #0]
 800aef8:	462a      	mov	r2, r5
 800aefa:	4b0e      	ldr	r3, [pc, #56]	@ (800af34 <_svfiprintf_r+0x1f0>)
 800aefc:	a904      	add	r1, sp, #16
 800aefe:	4638      	mov	r0, r7
 800af00:	f7fc fed8 	bl	8007cb4 <_printf_float>
 800af04:	1c42      	adds	r2, r0, #1
 800af06:	4606      	mov	r6, r0
 800af08:	d1d6      	bne.n	800aeb8 <_svfiprintf_r+0x174>
 800af0a:	89ab      	ldrh	r3, [r5, #12]
 800af0c:	065b      	lsls	r3, r3, #25
 800af0e:	f53f af2d 	bmi.w	800ad6c <_svfiprintf_r+0x28>
 800af12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af14:	e72c      	b.n	800ad70 <_svfiprintf_r+0x2c>
 800af16:	ab03      	add	r3, sp, #12
 800af18:	9300      	str	r3, [sp, #0]
 800af1a:	462a      	mov	r2, r5
 800af1c:	4b05      	ldr	r3, [pc, #20]	@ (800af34 <_svfiprintf_r+0x1f0>)
 800af1e:	a904      	add	r1, sp, #16
 800af20:	4638      	mov	r0, r7
 800af22:	f7fd f95f 	bl	80081e4 <_printf_i>
 800af26:	e7ed      	b.n	800af04 <_svfiprintf_r+0x1c0>
 800af28:	0800c029 	.word	0x0800c029
 800af2c:	0800c033 	.word	0x0800c033
 800af30:	08007cb5 	.word	0x08007cb5
 800af34:	0800ac8f 	.word	0x0800ac8f
 800af38:	0800c02f 	.word	0x0800c02f

0800af3c <__sflush_r>:
 800af3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800af40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af44:	0716      	lsls	r6, r2, #28
 800af46:	4605      	mov	r5, r0
 800af48:	460c      	mov	r4, r1
 800af4a:	d454      	bmi.n	800aff6 <__sflush_r+0xba>
 800af4c:	684b      	ldr	r3, [r1, #4]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	dc02      	bgt.n	800af58 <__sflush_r+0x1c>
 800af52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800af54:	2b00      	cmp	r3, #0
 800af56:	dd48      	ble.n	800afea <__sflush_r+0xae>
 800af58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af5a:	2e00      	cmp	r6, #0
 800af5c:	d045      	beq.n	800afea <__sflush_r+0xae>
 800af5e:	2300      	movs	r3, #0
 800af60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800af64:	682f      	ldr	r7, [r5, #0]
 800af66:	6a21      	ldr	r1, [r4, #32]
 800af68:	602b      	str	r3, [r5, #0]
 800af6a:	d030      	beq.n	800afce <__sflush_r+0x92>
 800af6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800af6e:	89a3      	ldrh	r3, [r4, #12]
 800af70:	0759      	lsls	r1, r3, #29
 800af72:	d505      	bpl.n	800af80 <__sflush_r+0x44>
 800af74:	6863      	ldr	r3, [r4, #4]
 800af76:	1ad2      	subs	r2, r2, r3
 800af78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800af7a:	b10b      	cbz	r3, 800af80 <__sflush_r+0x44>
 800af7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800af7e:	1ad2      	subs	r2, r2, r3
 800af80:	2300      	movs	r3, #0
 800af82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af84:	6a21      	ldr	r1, [r4, #32]
 800af86:	4628      	mov	r0, r5
 800af88:	47b0      	blx	r6
 800af8a:	1c43      	adds	r3, r0, #1
 800af8c:	89a3      	ldrh	r3, [r4, #12]
 800af8e:	d106      	bne.n	800af9e <__sflush_r+0x62>
 800af90:	6829      	ldr	r1, [r5, #0]
 800af92:	291d      	cmp	r1, #29
 800af94:	d82b      	bhi.n	800afee <__sflush_r+0xb2>
 800af96:	4a2a      	ldr	r2, [pc, #168]	@ (800b040 <__sflush_r+0x104>)
 800af98:	410a      	asrs	r2, r1
 800af9a:	07d6      	lsls	r6, r2, #31
 800af9c:	d427      	bmi.n	800afee <__sflush_r+0xb2>
 800af9e:	2200      	movs	r2, #0
 800afa0:	6062      	str	r2, [r4, #4]
 800afa2:	04d9      	lsls	r1, r3, #19
 800afa4:	6922      	ldr	r2, [r4, #16]
 800afa6:	6022      	str	r2, [r4, #0]
 800afa8:	d504      	bpl.n	800afb4 <__sflush_r+0x78>
 800afaa:	1c42      	adds	r2, r0, #1
 800afac:	d101      	bne.n	800afb2 <__sflush_r+0x76>
 800afae:	682b      	ldr	r3, [r5, #0]
 800afb0:	b903      	cbnz	r3, 800afb4 <__sflush_r+0x78>
 800afb2:	6560      	str	r0, [r4, #84]	@ 0x54
 800afb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800afb6:	602f      	str	r7, [r5, #0]
 800afb8:	b1b9      	cbz	r1, 800afea <__sflush_r+0xae>
 800afba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800afbe:	4299      	cmp	r1, r3
 800afc0:	d002      	beq.n	800afc8 <__sflush_r+0x8c>
 800afc2:	4628      	mov	r0, r5
 800afc4:	f7fe fcdc 	bl	8009980 <_free_r>
 800afc8:	2300      	movs	r3, #0
 800afca:	6363      	str	r3, [r4, #52]	@ 0x34
 800afcc:	e00d      	b.n	800afea <__sflush_r+0xae>
 800afce:	2301      	movs	r3, #1
 800afd0:	4628      	mov	r0, r5
 800afd2:	47b0      	blx	r6
 800afd4:	4602      	mov	r2, r0
 800afd6:	1c50      	adds	r0, r2, #1
 800afd8:	d1c9      	bne.n	800af6e <__sflush_r+0x32>
 800afda:	682b      	ldr	r3, [r5, #0]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d0c6      	beq.n	800af6e <__sflush_r+0x32>
 800afe0:	2b1d      	cmp	r3, #29
 800afe2:	d001      	beq.n	800afe8 <__sflush_r+0xac>
 800afe4:	2b16      	cmp	r3, #22
 800afe6:	d11e      	bne.n	800b026 <__sflush_r+0xea>
 800afe8:	602f      	str	r7, [r5, #0]
 800afea:	2000      	movs	r0, #0
 800afec:	e022      	b.n	800b034 <__sflush_r+0xf8>
 800afee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aff2:	b21b      	sxth	r3, r3
 800aff4:	e01b      	b.n	800b02e <__sflush_r+0xf2>
 800aff6:	690f      	ldr	r7, [r1, #16]
 800aff8:	2f00      	cmp	r7, #0
 800affa:	d0f6      	beq.n	800afea <__sflush_r+0xae>
 800affc:	0793      	lsls	r3, r2, #30
 800affe:	680e      	ldr	r6, [r1, #0]
 800b000:	bf08      	it	eq
 800b002:	694b      	ldreq	r3, [r1, #20]
 800b004:	600f      	str	r7, [r1, #0]
 800b006:	bf18      	it	ne
 800b008:	2300      	movne	r3, #0
 800b00a:	eba6 0807 	sub.w	r8, r6, r7
 800b00e:	608b      	str	r3, [r1, #8]
 800b010:	f1b8 0f00 	cmp.w	r8, #0
 800b014:	dde9      	ble.n	800afea <__sflush_r+0xae>
 800b016:	6a21      	ldr	r1, [r4, #32]
 800b018:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b01a:	4643      	mov	r3, r8
 800b01c:	463a      	mov	r2, r7
 800b01e:	4628      	mov	r0, r5
 800b020:	47b0      	blx	r6
 800b022:	2800      	cmp	r0, #0
 800b024:	dc08      	bgt.n	800b038 <__sflush_r+0xfc>
 800b026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b02a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b02e:	81a3      	strh	r3, [r4, #12]
 800b030:	f04f 30ff 	mov.w	r0, #4294967295
 800b034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b038:	4407      	add	r7, r0
 800b03a:	eba8 0800 	sub.w	r8, r8, r0
 800b03e:	e7e7      	b.n	800b010 <__sflush_r+0xd4>
 800b040:	dfbffffe 	.word	0xdfbffffe

0800b044 <_fflush_r>:
 800b044:	b538      	push	{r3, r4, r5, lr}
 800b046:	690b      	ldr	r3, [r1, #16]
 800b048:	4605      	mov	r5, r0
 800b04a:	460c      	mov	r4, r1
 800b04c:	b913      	cbnz	r3, 800b054 <_fflush_r+0x10>
 800b04e:	2500      	movs	r5, #0
 800b050:	4628      	mov	r0, r5
 800b052:	bd38      	pop	{r3, r4, r5, pc}
 800b054:	b118      	cbz	r0, 800b05e <_fflush_r+0x1a>
 800b056:	6a03      	ldr	r3, [r0, #32]
 800b058:	b90b      	cbnz	r3, 800b05e <_fflush_r+0x1a>
 800b05a:	f7fd fc83 	bl	8008964 <__sinit>
 800b05e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d0f3      	beq.n	800b04e <_fflush_r+0xa>
 800b066:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b068:	07d0      	lsls	r0, r2, #31
 800b06a:	d404      	bmi.n	800b076 <_fflush_r+0x32>
 800b06c:	0599      	lsls	r1, r3, #22
 800b06e:	d402      	bmi.n	800b076 <_fflush_r+0x32>
 800b070:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b072:	f7fd fdfc 	bl	8008c6e <__retarget_lock_acquire_recursive>
 800b076:	4628      	mov	r0, r5
 800b078:	4621      	mov	r1, r4
 800b07a:	f7ff ff5f 	bl	800af3c <__sflush_r>
 800b07e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b080:	07da      	lsls	r2, r3, #31
 800b082:	4605      	mov	r5, r0
 800b084:	d4e4      	bmi.n	800b050 <_fflush_r+0xc>
 800b086:	89a3      	ldrh	r3, [r4, #12]
 800b088:	059b      	lsls	r3, r3, #22
 800b08a:	d4e1      	bmi.n	800b050 <_fflush_r+0xc>
 800b08c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b08e:	f7fd fdef 	bl	8008c70 <__retarget_lock_release_recursive>
 800b092:	e7dd      	b.n	800b050 <_fflush_r+0xc>

0800b094 <fiprintf>:
 800b094:	b40e      	push	{r1, r2, r3}
 800b096:	b503      	push	{r0, r1, lr}
 800b098:	4601      	mov	r1, r0
 800b09a:	ab03      	add	r3, sp, #12
 800b09c:	4805      	ldr	r0, [pc, #20]	@ (800b0b4 <fiprintf+0x20>)
 800b09e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0a2:	6800      	ldr	r0, [r0, #0]
 800b0a4:	9301      	str	r3, [sp, #4]
 800b0a6:	f000 f8a3 	bl	800b1f0 <_vfiprintf_r>
 800b0aa:	b002      	add	sp, #8
 800b0ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0b0:	b003      	add	sp, #12
 800b0b2:	4770      	bx	lr
 800b0b4:	20000198 	.word	0x20000198

0800b0b8 <memmove>:
 800b0b8:	4288      	cmp	r0, r1
 800b0ba:	b510      	push	{r4, lr}
 800b0bc:	eb01 0402 	add.w	r4, r1, r2
 800b0c0:	d902      	bls.n	800b0c8 <memmove+0x10>
 800b0c2:	4284      	cmp	r4, r0
 800b0c4:	4623      	mov	r3, r4
 800b0c6:	d807      	bhi.n	800b0d8 <memmove+0x20>
 800b0c8:	1e43      	subs	r3, r0, #1
 800b0ca:	42a1      	cmp	r1, r4
 800b0cc:	d008      	beq.n	800b0e0 <memmove+0x28>
 800b0ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b0d6:	e7f8      	b.n	800b0ca <memmove+0x12>
 800b0d8:	4402      	add	r2, r0
 800b0da:	4601      	mov	r1, r0
 800b0dc:	428a      	cmp	r2, r1
 800b0de:	d100      	bne.n	800b0e2 <memmove+0x2a>
 800b0e0:	bd10      	pop	{r4, pc}
 800b0e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b0e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b0ea:	e7f7      	b.n	800b0dc <memmove+0x24>

0800b0ec <_sbrk_r>:
 800b0ec:	b538      	push	{r3, r4, r5, lr}
 800b0ee:	4d06      	ldr	r5, [pc, #24]	@ (800b108 <_sbrk_r+0x1c>)
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	4604      	mov	r4, r0
 800b0f4:	4608      	mov	r0, r1
 800b0f6:	602b      	str	r3, [r5, #0]
 800b0f8:	f7f6 fdda 	bl	8001cb0 <_sbrk>
 800b0fc:	1c43      	adds	r3, r0, #1
 800b0fe:	d102      	bne.n	800b106 <_sbrk_r+0x1a>
 800b100:	682b      	ldr	r3, [r5, #0]
 800b102:	b103      	cbz	r3, 800b106 <_sbrk_r+0x1a>
 800b104:	6023      	str	r3, [r4, #0]
 800b106:	bd38      	pop	{r3, r4, r5, pc}
 800b108:	200070e4 	.word	0x200070e4

0800b10c <abort>:
 800b10c:	b508      	push	{r3, lr}
 800b10e:	2006      	movs	r0, #6
 800b110:	f000 fa42 	bl	800b598 <raise>
 800b114:	2001      	movs	r0, #1
 800b116:	f7f6 fd9b 	bl	8001c50 <_exit>

0800b11a <_calloc_r>:
 800b11a:	b570      	push	{r4, r5, r6, lr}
 800b11c:	fba1 5402 	umull	r5, r4, r1, r2
 800b120:	b93c      	cbnz	r4, 800b132 <_calloc_r+0x18>
 800b122:	4629      	mov	r1, r5
 800b124:	f7fe ffda 	bl	800a0dc <_malloc_r>
 800b128:	4606      	mov	r6, r0
 800b12a:	b928      	cbnz	r0, 800b138 <_calloc_r+0x1e>
 800b12c:	2600      	movs	r6, #0
 800b12e:	4630      	mov	r0, r6
 800b130:	bd70      	pop	{r4, r5, r6, pc}
 800b132:	220c      	movs	r2, #12
 800b134:	6002      	str	r2, [r0, #0]
 800b136:	e7f9      	b.n	800b12c <_calloc_r+0x12>
 800b138:	462a      	mov	r2, r5
 800b13a:	4621      	mov	r1, r4
 800b13c:	f7fd fcab 	bl	8008a96 <memset>
 800b140:	e7f5      	b.n	800b12e <_calloc_r+0x14>

0800b142 <_realloc_r>:
 800b142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b146:	4680      	mov	r8, r0
 800b148:	4615      	mov	r5, r2
 800b14a:	460c      	mov	r4, r1
 800b14c:	b921      	cbnz	r1, 800b158 <_realloc_r+0x16>
 800b14e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b152:	4611      	mov	r1, r2
 800b154:	f7fe bfc2 	b.w	800a0dc <_malloc_r>
 800b158:	b92a      	cbnz	r2, 800b166 <_realloc_r+0x24>
 800b15a:	f7fe fc11 	bl	8009980 <_free_r>
 800b15e:	2400      	movs	r4, #0
 800b160:	4620      	mov	r0, r4
 800b162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b166:	f000 fa33 	bl	800b5d0 <_malloc_usable_size_r>
 800b16a:	4285      	cmp	r5, r0
 800b16c:	4606      	mov	r6, r0
 800b16e:	d802      	bhi.n	800b176 <_realloc_r+0x34>
 800b170:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b174:	d8f4      	bhi.n	800b160 <_realloc_r+0x1e>
 800b176:	4629      	mov	r1, r5
 800b178:	4640      	mov	r0, r8
 800b17a:	f7fe ffaf 	bl	800a0dc <_malloc_r>
 800b17e:	4607      	mov	r7, r0
 800b180:	2800      	cmp	r0, #0
 800b182:	d0ec      	beq.n	800b15e <_realloc_r+0x1c>
 800b184:	42b5      	cmp	r5, r6
 800b186:	462a      	mov	r2, r5
 800b188:	4621      	mov	r1, r4
 800b18a:	bf28      	it	cs
 800b18c:	4632      	movcs	r2, r6
 800b18e:	f7fd fd70 	bl	8008c72 <memcpy>
 800b192:	4621      	mov	r1, r4
 800b194:	4640      	mov	r0, r8
 800b196:	f7fe fbf3 	bl	8009980 <_free_r>
 800b19a:	463c      	mov	r4, r7
 800b19c:	e7e0      	b.n	800b160 <_realloc_r+0x1e>

0800b19e <__sfputc_r>:
 800b19e:	6893      	ldr	r3, [r2, #8]
 800b1a0:	3b01      	subs	r3, #1
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	b410      	push	{r4}
 800b1a6:	6093      	str	r3, [r2, #8]
 800b1a8:	da08      	bge.n	800b1bc <__sfputc_r+0x1e>
 800b1aa:	6994      	ldr	r4, [r2, #24]
 800b1ac:	42a3      	cmp	r3, r4
 800b1ae:	db01      	blt.n	800b1b4 <__sfputc_r+0x16>
 800b1b0:	290a      	cmp	r1, #10
 800b1b2:	d103      	bne.n	800b1bc <__sfputc_r+0x1e>
 800b1b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1b8:	f000 b932 	b.w	800b420 <__swbuf_r>
 800b1bc:	6813      	ldr	r3, [r2, #0]
 800b1be:	1c58      	adds	r0, r3, #1
 800b1c0:	6010      	str	r0, [r2, #0]
 800b1c2:	7019      	strb	r1, [r3, #0]
 800b1c4:	4608      	mov	r0, r1
 800b1c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <__sfputs_r>:
 800b1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ce:	4606      	mov	r6, r0
 800b1d0:	460f      	mov	r7, r1
 800b1d2:	4614      	mov	r4, r2
 800b1d4:	18d5      	adds	r5, r2, r3
 800b1d6:	42ac      	cmp	r4, r5
 800b1d8:	d101      	bne.n	800b1de <__sfputs_r+0x12>
 800b1da:	2000      	movs	r0, #0
 800b1dc:	e007      	b.n	800b1ee <__sfputs_r+0x22>
 800b1de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1e2:	463a      	mov	r2, r7
 800b1e4:	4630      	mov	r0, r6
 800b1e6:	f7ff ffda 	bl	800b19e <__sfputc_r>
 800b1ea:	1c43      	adds	r3, r0, #1
 800b1ec:	d1f3      	bne.n	800b1d6 <__sfputs_r+0xa>
 800b1ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b1f0 <_vfiprintf_r>:
 800b1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1f4:	460d      	mov	r5, r1
 800b1f6:	b09d      	sub	sp, #116	@ 0x74
 800b1f8:	4614      	mov	r4, r2
 800b1fa:	4698      	mov	r8, r3
 800b1fc:	4606      	mov	r6, r0
 800b1fe:	b118      	cbz	r0, 800b208 <_vfiprintf_r+0x18>
 800b200:	6a03      	ldr	r3, [r0, #32]
 800b202:	b90b      	cbnz	r3, 800b208 <_vfiprintf_r+0x18>
 800b204:	f7fd fbae 	bl	8008964 <__sinit>
 800b208:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b20a:	07d9      	lsls	r1, r3, #31
 800b20c:	d405      	bmi.n	800b21a <_vfiprintf_r+0x2a>
 800b20e:	89ab      	ldrh	r3, [r5, #12]
 800b210:	059a      	lsls	r2, r3, #22
 800b212:	d402      	bmi.n	800b21a <_vfiprintf_r+0x2a>
 800b214:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b216:	f7fd fd2a 	bl	8008c6e <__retarget_lock_acquire_recursive>
 800b21a:	89ab      	ldrh	r3, [r5, #12]
 800b21c:	071b      	lsls	r3, r3, #28
 800b21e:	d501      	bpl.n	800b224 <_vfiprintf_r+0x34>
 800b220:	692b      	ldr	r3, [r5, #16]
 800b222:	b99b      	cbnz	r3, 800b24c <_vfiprintf_r+0x5c>
 800b224:	4629      	mov	r1, r5
 800b226:	4630      	mov	r0, r6
 800b228:	f000 f938 	bl	800b49c <__swsetup_r>
 800b22c:	b170      	cbz	r0, 800b24c <_vfiprintf_r+0x5c>
 800b22e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b230:	07dc      	lsls	r4, r3, #31
 800b232:	d504      	bpl.n	800b23e <_vfiprintf_r+0x4e>
 800b234:	f04f 30ff 	mov.w	r0, #4294967295
 800b238:	b01d      	add	sp, #116	@ 0x74
 800b23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b23e:	89ab      	ldrh	r3, [r5, #12]
 800b240:	0598      	lsls	r0, r3, #22
 800b242:	d4f7      	bmi.n	800b234 <_vfiprintf_r+0x44>
 800b244:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b246:	f7fd fd13 	bl	8008c70 <__retarget_lock_release_recursive>
 800b24a:	e7f3      	b.n	800b234 <_vfiprintf_r+0x44>
 800b24c:	2300      	movs	r3, #0
 800b24e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b250:	2320      	movs	r3, #32
 800b252:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b256:	f8cd 800c 	str.w	r8, [sp, #12]
 800b25a:	2330      	movs	r3, #48	@ 0x30
 800b25c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b40c <_vfiprintf_r+0x21c>
 800b260:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b264:	f04f 0901 	mov.w	r9, #1
 800b268:	4623      	mov	r3, r4
 800b26a:	469a      	mov	sl, r3
 800b26c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b270:	b10a      	cbz	r2, 800b276 <_vfiprintf_r+0x86>
 800b272:	2a25      	cmp	r2, #37	@ 0x25
 800b274:	d1f9      	bne.n	800b26a <_vfiprintf_r+0x7a>
 800b276:	ebba 0b04 	subs.w	fp, sl, r4
 800b27a:	d00b      	beq.n	800b294 <_vfiprintf_r+0xa4>
 800b27c:	465b      	mov	r3, fp
 800b27e:	4622      	mov	r2, r4
 800b280:	4629      	mov	r1, r5
 800b282:	4630      	mov	r0, r6
 800b284:	f7ff ffa2 	bl	800b1cc <__sfputs_r>
 800b288:	3001      	adds	r0, #1
 800b28a:	f000 80a7 	beq.w	800b3dc <_vfiprintf_r+0x1ec>
 800b28e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b290:	445a      	add	r2, fp
 800b292:	9209      	str	r2, [sp, #36]	@ 0x24
 800b294:	f89a 3000 	ldrb.w	r3, [sl]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f000 809f 	beq.w	800b3dc <_vfiprintf_r+0x1ec>
 800b29e:	2300      	movs	r3, #0
 800b2a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b2a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2a8:	f10a 0a01 	add.w	sl, sl, #1
 800b2ac:	9304      	str	r3, [sp, #16]
 800b2ae:	9307      	str	r3, [sp, #28]
 800b2b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b2b4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b2b6:	4654      	mov	r4, sl
 800b2b8:	2205      	movs	r2, #5
 800b2ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2be:	4853      	ldr	r0, [pc, #332]	@ (800b40c <_vfiprintf_r+0x21c>)
 800b2c0:	f7f4 ffa6 	bl	8000210 <memchr>
 800b2c4:	9a04      	ldr	r2, [sp, #16]
 800b2c6:	b9d8      	cbnz	r0, 800b300 <_vfiprintf_r+0x110>
 800b2c8:	06d1      	lsls	r1, r2, #27
 800b2ca:	bf44      	itt	mi
 800b2cc:	2320      	movmi	r3, #32
 800b2ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b2d2:	0713      	lsls	r3, r2, #28
 800b2d4:	bf44      	itt	mi
 800b2d6:	232b      	movmi	r3, #43	@ 0x2b
 800b2d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b2dc:	f89a 3000 	ldrb.w	r3, [sl]
 800b2e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2e2:	d015      	beq.n	800b310 <_vfiprintf_r+0x120>
 800b2e4:	9a07      	ldr	r2, [sp, #28]
 800b2e6:	4654      	mov	r4, sl
 800b2e8:	2000      	movs	r0, #0
 800b2ea:	f04f 0c0a 	mov.w	ip, #10
 800b2ee:	4621      	mov	r1, r4
 800b2f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2f4:	3b30      	subs	r3, #48	@ 0x30
 800b2f6:	2b09      	cmp	r3, #9
 800b2f8:	d94b      	bls.n	800b392 <_vfiprintf_r+0x1a2>
 800b2fa:	b1b0      	cbz	r0, 800b32a <_vfiprintf_r+0x13a>
 800b2fc:	9207      	str	r2, [sp, #28]
 800b2fe:	e014      	b.n	800b32a <_vfiprintf_r+0x13a>
 800b300:	eba0 0308 	sub.w	r3, r0, r8
 800b304:	fa09 f303 	lsl.w	r3, r9, r3
 800b308:	4313      	orrs	r3, r2
 800b30a:	9304      	str	r3, [sp, #16]
 800b30c:	46a2      	mov	sl, r4
 800b30e:	e7d2      	b.n	800b2b6 <_vfiprintf_r+0xc6>
 800b310:	9b03      	ldr	r3, [sp, #12]
 800b312:	1d19      	adds	r1, r3, #4
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	9103      	str	r1, [sp, #12]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	bfbb      	ittet	lt
 800b31c:	425b      	neglt	r3, r3
 800b31e:	f042 0202 	orrlt.w	r2, r2, #2
 800b322:	9307      	strge	r3, [sp, #28]
 800b324:	9307      	strlt	r3, [sp, #28]
 800b326:	bfb8      	it	lt
 800b328:	9204      	strlt	r2, [sp, #16]
 800b32a:	7823      	ldrb	r3, [r4, #0]
 800b32c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b32e:	d10a      	bne.n	800b346 <_vfiprintf_r+0x156>
 800b330:	7863      	ldrb	r3, [r4, #1]
 800b332:	2b2a      	cmp	r3, #42	@ 0x2a
 800b334:	d132      	bne.n	800b39c <_vfiprintf_r+0x1ac>
 800b336:	9b03      	ldr	r3, [sp, #12]
 800b338:	1d1a      	adds	r2, r3, #4
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	9203      	str	r2, [sp, #12]
 800b33e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b342:	3402      	adds	r4, #2
 800b344:	9305      	str	r3, [sp, #20]
 800b346:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b41c <_vfiprintf_r+0x22c>
 800b34a:	7821      	ldrb	r1, [r4, #0]
 800b34c:	2203      	movs	r2, #3
 800b34e:	4650      	mov	r0, sl
 800b350:	f7f4 ff5e 	bl	8000210 <memchr>
 800b354:	b138      	cbz	r0, 800b366 <_vfiprintf_r+0x176>
 800b356:	9b04      	ldr	r3, [sp, #16]
 800b358:	eba0 000a 	sub.w	r0, r0, sl
 800b35c:	2240      	movs	r2, #64	@ 0x40
 800b35e:	4082      	lsls	r2, r0
 800b360:	4313      	orrs	r3, r2
 800b362:	3401      	adds	r4, #1
 800b364:	9304      	str	r3, [sp, #16]
 800b366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b36a:	4829      	ldr	r0, [pc, #164]	@ (800b410 <_vfiprintf_r+0x220>)
 800b36c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b370:	2206      	movs	r2, #6
 800b372:	f7f4 ff4d 	bl	8000210 <memchr>
 800b376:	2800      	cmp	r0, #0
 800b378:	d03f      	beq.n	800b3fa <_vfiprintf_r+0x20a>
 800b37a:	4b26      	ldr	r3, [pc, #152]	@ (800b414 <_vfiprintf_r+0x224>)
 800b37c:	bb1b      	cbnz	r3, 800b3c6 <_vfiprintf_r+0x1d6>
 800b37e:	9b03      	ldr	r3, [sp, #12]
 800b380:	3307      	adds	r3, #7
 800b382:	f023 0307 	bic.w	r3, r3, #7
 800b386:	3308      	adds	r3, #8
 800b388:	9303      	str	r3, [sp, #12]
 800b38a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b38c:	443b      	add	r3, r7
 800b38e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b390:	e76a      	b.n	800b268 <_vfiprintf_r+0x78>
 800b392:	fb0c 3202 	mla	r2, ip, r2, r3
 800b396:	460c      	mov	r4, r1
 800b398:	2001      	movs	r0, #1
 800b39a:	e7a8      	b.n	800b2ee <_vfiprintf_r+0xfe>
 800b39c:	2300      	movs	r3, #0
 800b39e:	3401      	adds	r4, #1
 800b3a0:	9305      	str	r3, [sp, #20]
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	f04f 0c0a 	mov.w	ip, #10
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3ae:	3a30      	subs	r2, #48	@ 0x30
 800b3b0:	2a09      	cmp	r2, #9
 800b3b2:	d903      	bls.n	800b3bc <_vfiprintf_r+0x1cc>
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d0c6      	beq.n	800b346 <_vfiprintf_r+0x156>
 800b3b8:	9105      	str	r1, [sp, #20]
 800b3ba:	e7c4      	b.n	800b346 <_vfiprintf_r+0x156>
 800b3bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3c0:	4604      	mov	r4, r0
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	e7f0      	b.n	800b3a8 <_vfiprintf_r+0x1b8>
 800b3c6:	ab03      	add	r3, sp, #12
 800b3c8:	9300      	str	r3, [sp, #0]
 800b3ca:	462a      	mov	r2, r5
 800b3cc:	4b12      	ldr	r3, [pc, #72]	@ (800b418 <_vfiprintf_r+0x228>)
 800b3ce:	a904      	add	r1, sp, #16
 800b3d0:	4630      	mov	r0, r6
 800b3d2:	f7fc fc6f 	bl	8007cb4 <_printf_float>
 800b3d6:	4607      	mov	r7, r0
 800b3d8:	1c78      	adds	r0, r7, #1
 800b3da:	d1d6      	bne.n	800b38a <_vfiprintf_r+0x19a>
 800b3dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b3de:	07d9      	lsls	r1, r3, #31
 800b3e0:	d405      	bmi.n	800b3ee <_vfiprintf_r+0x1fe>
 800b3e2:	89ab      	ldrh	r3, [r5, #12]
 800b3e4:	059a      	lsls	r2, r3, #22
 800b3e6:	d402      	bmi.n	800b3ee <_vfiprintf_r+0x1fe>
 800b3e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b3ea:	f7fd fc41 	bl	8008c70 <__retarget_lock_release_recursive>
 800b3ee:	89ab      	ldrh	r3, [r5, #12]
 800b3f0:	065b      	lsls	r3, r3, #25
 800b3f2:	f53f af1f 	bmi.w	800b234 <_vfiprintf_r+0x44>
 800b3f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b3f8:	e71e      	b.n	800b238 <_vfiprintf_r+0x48>
 800b3fa:	ab03      	add	r3, sp, #12
 800b3fc:	9300      	str	r3, [sp, #0]
 800b3fe:	462a      	mov	r2, r5
 800b400:	4b05      	ldr	r3, [pc, #20]	@ (800b418 <_vfiprintf_r+0x228>)
 800b402:	a904      	add	r1, sp, #16
 800b404:	4630      	mov	r0, r6
 800b406:	f7fc feed 	bl	80081e4 <_printf_i>
 800b40a:	e7e4      	b.n	800b3d6 <_vfiprintf_r+0x1e6>
 800b40c:	0800c029 	.word	0x0800c029
 800b410:	0800c033 	.word	0x0800c033
 800b414:	08007cb5 	.word	0x08007cb5
 800b418:	0800b1cd 	.word	0x0800b1cd
 800b41c:	0800c02f 	.word	0x0800c02f

0800b420 <__swbuf_r>:
 800b420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b422:	460e      	mov	r6, r1
 800b424:	4614      	mov	r4, r2
 800b426:	4605      	mov	r5, r0
 800b428:	b118      	cbz	r0, 800b432 <__swbuf_r+0x12>
 800b42a:	6a03      	ldr	r3, [r0, #32]
 800b42c:	b90b      	cbnz	r3, 800b432 <__swbuf_r+0x12>
 800b42e:	f7fd fa99 	bl	8008964 <__sinit>
 800b432:	69a3      	ldr	r3, [r4, #24]
 800b434:	60a3      	str	r3, [r4, #8]
 800b436:	89a3      	ldrh	r3, [r4, #12]
 800b438:	071a      	lsls	r2, r3, #28
 800b43a:	d501      	bpl.n	800b440 <__swbuf_r+0x20>
 800b43c:	6923      	ldr	r3, [r4, #16]
 800b43e:	b943      	cbnz	r3, 800b452 <__swbuf_r+0x32>
 800b440:	4621      	mov	r1, r4
 800b442:	4628      	mov	r0, r5
 800b444:	f000 f82a 	bl	800b49c <__swsetup_r>
 800b448:	b118      	cbz	r0, 800b452 <__swbuf_r+0x32>
 800b44a:	f04f 37ff 	mov.w	r7, #4294967295
 800b44e:	4638      	mov	r0, r7
 800b450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b452:	6823      	ldr	r3, [r4, #0]
 800b454:	6922      	ldr	r2, [r4, #16]
 800b456:	1a98      	subs	r0, r3, r2
 800b458:	6963      	ldr	r3, [r4, #20]
 800b45a:	b2f6      	uxtb	r6, r6
 800b45c:	4283      	cmp	r3, r0
 800b45e:	4637      	mov	r7, r6
 800b460:	dc05      	bgt.n	800b46e <__swbuf_r+0x4e>
 800b462:	4621      	mov	r1, r4
 800b464:	4628      	mov	r0, r5
 800b466:	f7ff fded 	bl	800b044 <_fflush_r>
 800b46a:	2800      	cmp	r0, #0
 800b46c:	d1ed      	bne.n	800b44a <__swbuf_r+0x2a>
 800b46e:	68a3      	ldr	r3, [r4, #8]
 800b470:	3b01      	subs	r3, #1
 800b472:	60a3      	str	r3, [r4, #8]
 800b474:	6823      	ldr	r3, [r4, #0]
 800b476:	1c5a      	adds	r2, r3, #1
 800b478:	6022      	str	r2, [r4, #0]
 800b47a:	701e      	strb	r6, [r3, #0]
 800b47c:	6962      	ldr	r2, [r4, #20]
 800b47e:	1c43      	adds	r3, r0, #1
 800b480:	429a      	cmp	r2, r3
 800b482:	d004      	beq.n	800b48e <__swbuf_r+0x6e>
 800b484:	89a3      	ldrh	r3, [r4, #12]
 800b486:	07db      	lsls	r3, r3, #31
 800b488:	d5e1      	bpl.n	800b44e <__swbuf_r+0x2e>
 800b48a:	2e0a      	cmp	r6, #10
 800b48c:	d1df      	bne.n	800b44e <__swbuf_r+0x2e>
 800b48e:	4621      	mov	r1, r4
 800b490:	4628      	mov	r0, r5
 800b492:	f7ff fdd7 	bl	800b044 <_fflush_r>
 800b496:	2800      	cmp	r0, #0
 800b498:	d0d9      	beq.n	800b44e <__swbuf_r+0x2e>
 800b49a:	e7d6      	b.n	800b44a <__swbuf_r+0x2a>

0800b49c <__swsetup_r>:
 800b49c:	b538      	push	{r3, r4, r5, lr}
 800b49e:	4b29      	ldr	r3, [pc, #164]	@ (800b544 <__swsetup_r+0xa8>)
 800b4a0:	4605      	mov	r5, r0
 800b4a2:	6818      	ldr	r0, [r3, #0]
 800b4a4:	460c      	mov	r4, r1
 800b4a6:	b118      	cbz	r0, 800b4b0 <__swsetup_r+0x14>
 800b4a8:	6a03      	ldr	r3, [r0, #32]
 800b4aa:	b90b      	cbnz	r3, 800b4b0 <__swsetup_r+0x14>
 800b4ac:	f7fd fa5a 	bl	8008964 <__sinit>
 800b4b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4b4:	0719      	lsls	r1, r3, #28
 800b4b6:	d422      	bmi.n	800b4fe <__swsetup_r+0x62>
 800b4b8:	06da      	lsls	r2, r3, #27
 800b4ba:	d407      	bmi.n	800b4cc <__swsetup_r+0x30>
 800b4bc:	2209      	movs	r2, #9
 800b4be:	602a      	str	r2, [r5, #0]
 800b4c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4c4:	81a3      	strh	r3, [r4, #12]
 800b4c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b4ca:	e033      	b.n	800b534 <__swsetup_r+0x98>
 800b4cc:	0758      	lsls	r0, r3, #29
 800b4ce:	d512      	bpl.n	800b4f6 <__swsetup_r+0x5a>
 800b4d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b4d2:	b141      	cbz	r1, 800b4e6 <__swsetup_r+0x4a>
 800b4d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b4d8:	4299      	cmp	r1, r3
 800b4da:	d002      	beq.n	800b4e2 <__swsetup_r+0x46>
 800b4dc:	4628      	mov	r0, r5
 800b4de:	f7fe fa4f 	bl	8009980 <_free_r>
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b4e6:	89a3      	ldrh	r3, [r4, #12]
 800b4e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b4ec:	81a3      	strh	r3, [r4, #12]
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	6063      	str	r3, [r4, #4]
 800b4f2:	6923      	ldr	r3, [r4, #16]
 800b4f4:	6023      	str	r3, [r4, #0]
 800b4f6:	89a3      	ldrh	r3, [r4, #12]
 800b4f8:	f043 0308 	orr.w	r3, r3, #8
 800b4fc:	81a3      	strh	r3, [r4, #12]
 800b4fe:	6923      	ldr	r3, [r4, #16]
 800b500:	b94b      	cbnz	r3, 800b516 <__swsetup_r+0x7a>
 800b502:	89a3      	ldrh	r3, [r4, #12]
 800b504:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b508:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b50c:	d003      	beq.n	800b516 <__swsetup_r+0x7a>
 800b50e:	4621      	mov	r1, r4
 800b510:	4628      	mov	r0, r5
 800b512:	f000 f88b 	bl	800b62c <__smakebuf_r>
 800b516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b51a:	f013 0201 	ands.w	r2, r3, #1
 800b51e:	d00a      	beq.n	800b536 <__swsetup_r+0x9a>
 800b520:	2200      	movs	r2, #0
 800b522:	60a2      	str	r2, [r4, #8]
 800b524:	6962      	ldr	r2, [r4, #20]
 800b526:	4252      	negs	r2, r2
 800b528:	61a2      	str	r2, [r4, #24]
 800b52a:	6922      	ldr	r2, [r4, #16]
 800b52c:	b942      	cbnz	r2, 800b540 <__swsetup_r+0xa4>
 800b52e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b532:	d1c5      	bne.n	800b4c0 <__swsetup_r+0x24>
 800b534:	bd38      	pop	{r3, r4, r5, pc}
 800b536:	0799      	lsls	r1, r3, #30
 800b538:	bf58      	it	pl
 800b53a:	6962      	ldrpl	r2, [r4, #20]
 800b53c:	60a2      	str	r2, [r4, #8]
 800b53e:	e7f4      	b.n	800b52a <__swsetup_r+0x8e>
 800b540:	2000      	movs	r0, #0
 800b542:	e7f7      	b.n	800b534 <__swsetup_r+0x98>
 800b544:	20000198 	.word	0x20000198

0800b548 <_raise_r>:
 800b548:	291f      	cmp	r1, #31
 800b54a:	b538      	push	{r3, r4, r5, lr}
 800b54c:	4605      	mov	r5, r0
 800b54e:	460c      	mov	r4, r1
 800b550:	d904      	bls.n	800b55c <_raise_r+0x14>
 800b552:	2316      	movs	r3, #22
 800b554:	6003      	str	r3, [r0, #0]
 800b556:	f04f 30ff 	mov.w	r0, #4294967295
 800b55a:	bd38      	pop	{r3, r4, r5, pc}
 800b55c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b55e:	b112      	cbz	r2, 800b566 <_raise_r+0x1e>
 800b560:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b564:	b94b      	cbnz	r3, 800b57a <_raise_r+0x32>
 800b566:	4628      	mov	r0, r5
 800b568:	f000 f830 	bl	800b5cc <_getpid_r>
 800b56c:	4622      	mov	r2, r4
 800b56e:	4601      	mov	r1, r0
 800b570:	4628      	mov	r0, r5
 800b572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b576:	f000 b817 	b.w	800b5a8 <_kill_r>
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	d00a      	beq.n	800b594 <_raise_r+0x4c>
 800b57e:	1c59      	adds	r1, r3, #1
 800b580:	d103      	bne.n	800b58a <_raise_r+0x42>
 800b582:	2316      	movs	r3, #22
 800b584:	6003      	str	r3, [r0, #0]
 800b586:	2001      	movs	r0, #1
 800b588:	e7e7      	b.n	800b55a <_raise_r+0x12>
 800b58a:	2100      	movs	r1, #0
 800b58c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b590:	4620      	mov	r0, r4
 800b592:	4798      	blx	r3
 800b594:	2000      	movs	r0, #0
 800b596:	e7e0      	b.n	800b55a <_raise_r+0x12>

0800b598 <raise>:
 800b598:	4b02      	ldr	r3, [pc, #8]	@ (800b5a4 <raise+0xc>)
 800b59a:	4601      	mov	r1, r0
 800b59c:	6818      	ldr	r0, [r3, #0]
 800b59e:	f7ff bfd3 	b.w	800b548 <_raise_r>
 800b5a2:	bf00      	nop
 800b5a4:	20000198 	.word	0x20000198

0800b5a8 <_kill_r>:
 800b5a8:	b538      	push	{r3, r4, r5, lr}
 800b5aa:	4d07      	ldr	r5, [pc, #28]	@ (800b5c8 <_kill_r+0x20>)
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	4604      	mov	r4, r0
 800b5b0:	4608      	mov	r0, r1
 800b5b2:	4611      	mov	r1, r2
 800b5b4:	602b      	str	r3, [r5, #0]
 800b5b6:	f7f6 fb41 	bl	8001c3c <_kill>
 800b5ba:	1c43      	adds	r3, r0, #1
 800b5bc:	d102      	bne.n	800b5c4 <_kill_r+0x1c>
 800b5be:	682b      	ldr	r3, [r5, #0]
 800b5c0:	b103      	cbz	r3, 800b5c4 <_kill_r+0x1c>
 800b5c2:	6023      	str	r3, [r4, #0]
 800b5c4:	bd38      	pop	{r3, r4, r5, pc}
 800b5c6:	bf00      	nop
 800b5c8:	200070e4 	.word	0x200070e4

0800b5cc <_getpid_r>:
 800b5cc:	f7f6 bb34 	b.w	8001c38 <_getpid>

0800b5d0 <_malloc_usable_size_r>:
 800b5d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5d4:	1f18      	subs	r0, r3, #4
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	bfbc      	itt	lt
 800b5da:	580b      	ldrlt	r3, [r1, r0]
 800b5dc:	18c0      	addlt	r0, r0, r3
 800b5de:	4770      	bx	lr

0800b5e0 <__swhatbuf_r>:
 800b5e0:	b570      	push	{r4, r5, r6, lr}
 800b5e2:	460c      	mov	r4, r1
 800b5e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5e8:	2900      	cmp	r1, #0
 800b5ea:	b096      	sub	sp, #88	@ 0x58
 800b5ec:	4615      	mov	r5, r2
 800b5ee:	461e      	mov	r6, r3
 800b5f0:	da0d      	bge.n	800b60e <__swhatbuf_r+0x2e>
 800b5f2:	89a3      	ldrh	r3, [r4, #12]
 800b5f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b5f8:	f04f 0100 	mov.w	r1, #0
 800b5fc:	bf14      	ite	ne
 800b5fe:	2340      	movne	r3, #64	@ 0x40
 800b600:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b604:	2000      	movs	r0, #0
 800b606:	6031      	str	r1, [r6, #0]
 800b608:	602b      	str	r3, [r5, #0]
 800b60a:	b016      	add	sp, #88	@ 0x58
 800b60c:	bd70      	pop	{r4, r5, r6, pc}
 800b60e:	466a      	mov	r2, sp
 800b610:	f000 f848 	bl	800b6a4 <_fstat_r>
 800b614:	2800      	cmp	r0, #0
 800b616:	dbec      	blt.n	800b5f2 <__swhatbuf_r+0x12>
 800b618:	9901      	ldr	r1, [sp, #4]
 800b61a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b61e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b622:	4259      	negs	r1, r3
 800b624:	4159      	adcs	r1, r3
 800b626:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b62a:	e7eb      	b.n	800b604 <__swhatbuf_r+0x24>

0800b62c <__smakebuf_r>:
 800b62c:	898b      	ldrh	r3, [r1, #12]
 800b62e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b630:	079d      	lsls	r5, r3, #30
 800b632:	4606      	mov	r6, r0
 800b634:	460c      	mov	r4, r1
 800b636:	d507      	bpl.n	800b648 <__smakebuf_r+0x1c>
 800b638:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b63c:	6023      	str	r3, [r4, #0]
 800b63e:	6123      	str	r3, [r4, #16]
 800b640:	2301      	movs	r3, #1
 800b642:	6163      	str	r3, [r4, #20]
 800b644:	b003      	add	sp, #12
 800b646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b648:	ab01      	add	r3, sp, #4
 800b64a:	466a      	mov	r2, sp
 800b64c:	f7ff ffc8 	bl	800b5e0 <__swhatbuf_r>
 800b650:	9f00      	ldr	r7, [sp, #0]
 800b652:	4605      	mov	r5, r0
 800b654:	4639      	mov	r1, r7
 800b656:	4630      	mov	r0, r6
 800b658:	f7fe fd40 	bl	800a0dc <_malloc_r>
 800b65c:	b948      	cbnz	r0, 800b672 <__smakebuf_r+0x46>
 800b65e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b662:	059a      	lsls	r2, r3, #22
 800b664:	d4ee      	bmi.n	800b644 <__smakebuf_r+0x18>
 800b666:	f023 0303 	bic.w	r3, r3, #3
 800b66a:	f043 0302 	orr.w	r3, r3, #2
 800b66e:	81a3      	strh	r3, [r4, #12]
 800b670:	e7e2      	b.n	800b638 <__smakebuf_r+0xc>
 800b672:	89a3      	ldrh	r3, [r4, #12]
 800b674:	6020      	str	r0, [r4, #0]
 800b676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b67a:	81a3      	strh	r3, [r4, #12]
 800b67c:	9b01      	ldr	r3, [sp, #4]
 800b67e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b682:	b15b      	cbz	r3, 800b69c <__smakebuf_r+0x70>
 800b684:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b688:	4630      	mov	r0, r6
 800b68a:	f000 f81d 	bl	800b6c8 <_isatty_r>
 800b68e:	b128      	cbz	r0, 800b69c <__smakebuf_r+0x70>
 800b690:	89a3      	ldrh	r3, [r4, #12]
 800b692:	f023 0303 	bic.w	r3, r3, #3
 800b696:	f043 0301 	orr.w	r3, r3, #1
 800b69a:	81a3      	strh	r3, [r4, #12]
 800b69c:	89a3      	ldrh	r3, [r4, #12]
 800b69e:	431d      	orrs	r5, r3
 800b6a0:	81a5      	strh	r5, [r4, #12]
 800b6a2:	e7cf      	b.n	800b644 <__smakebuf_r+0x18>

0800b6a4 <_fstat_r>:
 800b6a4:	b538      	push	{r3, r4, r5, lr}
 800b6a6:	4d07      	ldr	r5, [pc, #28]	@ (800b6c4 <_fstat_r+0x20>)
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	4604      	mov	r4, r0
 800b6ac:	4608      	mov	r0, r1
 800b6ae:	4611      	mov	r1, r2
 800b6b0:	602b      	str	r3, [r5, #0]
 800b6b2:	f7f6 faf3 	bl	8001c9c <_fstat>
 800b6b6:	1c43      	adds	r3, r0, #1
 800b6b8:	d102      	bne.n	800b6c0 <_fstat_r+0x1c>
 800b6ba:	682b      	ldr	r3, [r5, #0]
 800b6bc:	b103      	cbz	r3, 800b6c0 <_fstat_r+0x1c>
 800b6be:	6023      	str	r3, [r4, #0]
 800b6c0:	bd38      	pop	{r3, r4, r5, pc}
 800b6c2:	bf00      	nop
 800b6c4:	200070e4 	.word	0x200070e4

0800b6c8 <_isatty_r>:
 800b6c8:	b538      	push	{r3, r4, r5, lr}
 800b6ca:	4d06      	ldr	r5, [pc, #24]	@ (800b6e4 <_isatty_r+0x1c>)
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	4604      	mov	r4, r0
 800b6d0:	4608      	mov	r0, r1
 800b6d2:	602b      	str	r3, [r5, #0]
 800b6d4:	f7f6 fae8 	bl	8001ca8 <_isatty>
 800b6d8:	1c43      	adds	r3, r0, #1
 800b6da:	d102      	bne.n	800b6e2 <_isatty_r+0x1a>
 800b6dc:	682b      	ldr	r3, [r5, #0]
 800b6de:	b103      	cbz	r3, 800b6e2 <_isatty_r+0x1a>
 800b6e0:	6023      	str	r3, [r4, #0]
 800b6e2:	bd38      	pop	{r3, r4, r5, pc}
 800b6e4:	200070e4 	.word	0x200070e4

0800b6e8 <_init>:
 800b6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ea:	bf00      	nop
 800b6ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6ee:	bc08      	pop	{r3}
 800b6f0:	469e      	mov	lr, r3
 800b6f2:	4770      	bx	lr

0800b6f4 <_fini>:
 800b6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6f6:	bf00      	nop
 800b6f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6fa:	bc08      	pop	{r3}
 800b6fc:	469e      	mov	lr, r3
 800b6fe:	4770      	bx	lr
