
MCS_m7_certo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013da0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000838  08013f70  08013f70  00014f70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080147a8  080147a8  000161f8  2**0
                  CONTENTS
  4 .ARM          00000008  080147a8  080147a8  000157a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080147b0  080147b0  000161f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080147b0  080147b0  000157b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080147b4  080147b4  000157b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  080147b8  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006ae8  200001f8  080149b0  000161f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006ce0  080149b0  00016ce0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000161f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ada0  00000000  00000000  00016228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000223b  00000000  00000000  00020fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  00023208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000079f  00000000  00000000  00023c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027a1b  00000000  00000000  000243e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f6a  00000000  00000000  0004be02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7072  00000000  00000000  0005dd6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00144dde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004080  00000000  00000000  00144e24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00148ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013f58 	.word	0x08013f58

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	08013f58 	.word	0x08013f58

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <inverter_matriz>:
#include <math.h>
#include "calib.h"


void inverter_matriz(double matriz[N][N], double inversa[N][N])
{
 8001024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001026:	b08d      	sub	sp, #52	@ 0x34
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
    // Inicializando a matriz identidade na matriz inversa
    for (int i = 0; i < N; i++) {
 800102e:	2300      	movs	r3, #0
 8001030:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001032:	e031      	b.n	8001098 <inverter_matriz+0x74>
        for (int j = 0; j < N; j++) {
 8001034:	2300      	movs	r3, #0
 8001036:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001038:	e028      	b.n	800108c <inverter_matriz+0x68>
            if (i == j) {
 800103a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800103c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800103e:	429a      	cmp	r2, r3
 8001040:	d110      	bne.n	8001064 <inverter_matriz+0x40>
                inversa[i][j] = 1;
 8001042:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001044:	4613      	mov	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	4413      	add	r3, r2
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	461a      	mov	r2, r3
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	441a      	add	r2, r3
 8001052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	18d1      	adds	r1, r2, r3
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	4b8e      	ldr	r3, [pc, #568]	@ (8001298 <inverter_matriz+0x274>)
 800105e:	e9c1 2300 	strd	r2, r3, [r1]
 8001062:	e010      	b.n	8001086 <inverter_matriz+0x62>
            } else {
                inversa[i][j] = 0;
 8001064:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001066:	4613      	mov	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	4413      	add	r3, r2
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	461a      	mov	r2, r3
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	441a      	add	r2, r3
 8001074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	18d1      	adds	r1, r2, r3
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	f04f 0300 	mov.w	r3, #0
 8001082:	e9c1 2300 	strd	r2, r3, [r1]
        for (int j = 0; j < N; j++) {
 8001086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001088:	3301      	adds	r3, #1
 800108a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800108c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800108e:	2b08      	cmp	r3, #8
 8001090:	ddd3      	ble.n	800103a <inverter_matriz+0x16>
    for (int i = 0; i < N; i++) {
 8001092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001094:	3301      	adds	r3, #1
 8001096:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800109a:	2b08      	cmp	r3, #8
 800109c:	ddca      	ble.n	8001034 <inverter_matriz+0x10>
            }
        }
    }

    // Aplicando o método de Gauss-Jordan
    for (int i = 0; i < N; i++)
 800109e:	2300      	movs	r3, #0
 80010a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80010a2:	e0ef      	b.n	8001284 <inverter_matriz+0x260>
    {
        double pivot = matriz[i][i];
 80010a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010a6:	4613      	mov	r3, r2
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	4413      	add	r3, r2
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	461a      	mov	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	441a      	add	r2, r3
 80010b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	4413      	add	r3, r2
 80010ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010be:	e9c7 2304 	strd	r2, r3, [r7, #16]
        for (int j = 0; j < N; j++)
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
 80010c6:	e042      	b.n	800114e <inverter_matriz+0x12a>
        {
            matriz[i][j] /= pivot;
 80010c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010ca:	4613      	mov	r3, r2
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	4413      	add	r3, r2
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	461a      	mov	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	441a      	add	r2, r3
 80010d8:	6a3b      	ldr	r3, [r7, #32]
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	4413      	add	r3, r2
 80010de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010e4:	4613      	mov	r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	4413      	add	r3, r2
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	461a      	mov	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	189c      	adds	r4, r3, r2
 80010f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80010f6:	f7ff fbc9 	bl	800088c <__aeabi_ddiv>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	6a39      	ldr	r1, [r7, #32]
 8001100:	00c9      	lsls	r1, r1, #3
 8001102:	4421      	add	r1, r4
 8001104:	e9c1 2300 	strd	r2, r3, [r1]
            inversa[i][j] /= pivot;
 8001108:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800110a:	4613      	mov	r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	4413      	add	r3, r2
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	461a      	mov	r2, r3
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	441a      	add	r2, r3
 8001118:	6a3b      	ldr	r3, [r7, #32]
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	4413      	add	r3, r2
 800111e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001124:	4613      	mov	r3, r2
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	4413      	add	r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	461a      	mov	r2, r3
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	189c      	adds	r4, r3, r2
 8001132:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001136:	f7ff fba9 	bl	800088c <__aeabi_ddiv>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	6a39      	ldr	r1, [r7, #32]
 8001140:	00c9      	lsls	r1, r1, #3
 8001142:	4421      	add	r1, r4
 8001144:	e9c1 2300 	strd	r2, r3, [r1]
        for (int j = 0; j < N; j++)
 8001148:	6a3b      	ldr	r3, [r7, #32]
 800114a:	3301      	adds	r3, #1
 800114c:	623b      	str	r3, [r7, #32]
 800114e:	6a3b      	ldr	r3, [r7, #32]
 8001150:	2b08      	cmp	r3, #8
 8001152:	ddb9      	ble.n	80010c8 <inverter_matriz+0xa4>
        }

        for (int k = 0; k < N; k++)
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]
 8001158:	e08d      	b.n	8001276 <inverter_matriz+0x252>
        {
            if (k != i)
 800115a:	69fa      	ldr	r2, [r7, #28]
 800115c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115e:	429a      	cmp	r2, r3
 8001160:	f000 8086 	beq.w	8001270 <inverter_matriz+0x24c>
            {
                double fator = matriz[k][i];
 8001164:	69fa      	ldr	r2, [r7, #28]
 8001166:	4613      	mov	r3, r2
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	4413      	add	r3, r2
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	461a      	mov	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	441a      	add	r2, r3
 8001174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	4413      	add	r3, r2
 800117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117e:	e9c7 2302 	strd	r2, r3, [r7, #8]
                for (int j = 0; j < N; j++)
 8001182:	2300      	movs	r3, #0
 8001184:	61bb      	str	r3, [r7, #24]
 8001186:	e070      	b.n	800126a <inverter_matriz+0x246>
                {
                    matriz[k][j] -= fator * matriz[i][j];
 8001188:	69fa      	ldr	r2, [r7, #28]
 800118a:	4613      	mov	r3, r2
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	4413      	add	r3, r2
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	461a      	mov	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	441a      	add	r2, r3
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	4413      	add	r3, r2
 800119e:	e9d3 4500 	ldrd	r4, r5, [r3]
 80011a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011a4:	4613      	mov	r3, r2
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	4413      	add	r3, r2
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	461a      	mov	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	441a      	add	r2, r3
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	4413      	add	r3, r2
 80011b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011c0:	f7ff fa3a 	bl	8000638 <__aeabi_dmul>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	69fa      	ldr	r2, [r7, #28]
 80011ce:	4613      	mov	r3, r2
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	4413      	add	r3, r2
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	461a      	mov	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	189e      	adds	r6, r3, r2
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4620      	mov	r0, r4
 80011e2:	4629      	mov	r1, r5
 80011e4:	f7ff f870 	bl	80002c8 <__aeabi_dsub>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	69b9      	ldr	r1, [r7, #24]
 80011ee:	00c9      	lsls	r1, r1, #3
 80011f0:	4431      	add	r1, r6
 80011f2:	e9c1 2300 	strd	r2, r3, [r1]
                    inversa[k][j] -= fator * inversa[i][j];
 80011f6:	69fa      	ldr	r2, [r7, #28]
 80011f8:	4613      	mov	r3, r2
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	4413      	add	r3, r2
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	461a      	mov	r2, r3
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	441a      	add	r2, r3
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	4413      	add	r3, r2
 800120c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001210:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001212:	4613      	mov	r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	4413      	add	r3, r2
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	461a      	mov	r2, r3
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	441a      	add	r2, r3
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	4413      	add	r3, r2
 8001226:	e9d3 0100 	ldrd	r0, r1, [r3]
 800122a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800122e:	f7ff fa03 	bl	8000638 <__aeabi_dmul>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4610      	mov	r0, r2
 8001238:	4619      	mov	r1, r3
 800123a:	69fa      	ldr	r2, [r7, #28]
 800123c:	4613      	mov	r3, r2
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	4413      	add	r3, r2
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	461a      	mov	r2, r3
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	189e      	adds	r6, r3, r2
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4620      	mov	r0, r4
 8001250:	4629      	mov	r1, r5
 8001252:	f7ff f839 	bl	80002c8 <__aeabi_dsub>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	69b9      	ldr	r1, [r7, #24]
 800125c:	00c9      	lsls	r1, r1, #3
 800125e:	4431      	add	r1, r6
 8001260:	e9c1 2300 	strd	r2, r3, [r1]
                for (int j = 0; j < N; j++)
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	3301      	adds	r3, #1
 8001268:	61bb      	str	r3, [r7, #24]
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	2b08      	cmp	r3, #8
 800126e:	dd8b      	ble.n	8001188 <inverter_matriz+0x164>
        for (int k = 0; k < N; k++)
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	3301      	adds	r3, #1
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	2b08      	cmp	r3, #8
 800127a:	f77f af6e 	ble.w	800115a <inverter_matriz+0x136>
    for (int i = 0; i < N; i++)
 800127e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001280:	3301      	adds	r3, #1
 8001282:	627b      	str	r3, [r7, #36]	@ 0x24
 8001284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001286:	2b08      	cmp	r3, #8
 8001288:	f77f af0c 	ble.w	80010a4 <inverter_matriz+0x80>
                }
            }
        }
    }
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	3734      	adds	r7, #52	@ 0x34
 8001292:	46bd      	mov	sp, r7
 8001294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001296:	bf00      	nop
 8001298:	3ff00000 	.word	0x3ff00000
 800129c:	00000000 	.word	0x00000000

080012a0 <NLLS>:


uint8_t NLLS(double *mx, double *my, double *mz, double *p)
{
 80012a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012a4:	f5ad 3d37 	sub.w	sp, sp, #187392	@ 0x2dc00
 80012a8:	f5ad 7d71 	sub.w	sp, sp, #964	@ 0x3c4
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	f507 647c 	add.w	r4, r7, #4032	@ 0xfc0
 80012b2:	f6a4 7484 	subw	r4, r4, #3972	@ 0xf84
 80012b6:	6020      	str	r0, [r4, #0]
 80012b8:	f507 607c 	add.w	r0, r7, #4032	@ 0xfc0
 80012bc:	f6a0 7088 	subw	r0, r0, #3976	@ 0xf88
 80012c0:	6001      	str	r1, [r0, #0]
 80012c2:	f507 617c 	add.w	r1, r7, #4032	@ 0xfc0
 80012c6:	f6a1 718c 	subw	r1, r1, #3980	@ 0xf8c
 80012ca:	600a      	str	r2, [r1, #0]
 80012cc:	f507 627c 	add.w	r2, r7, #4032	@ 0xfc0
 80012d0:	f5a2 6279 	sub.w	r2, r2, #3984	@ 0xf90
 80012d4:	6013      	str	r3, [r2, #0]
    uint8_t passo = 0, loop = 1;
 80012d6:	2300      	movs	r3, #0
 80012d8:	4a68      	ldr	r2, [pc, #416]	@ (800147c <NLLS+0x1dc>)
 80012da:	443a      	add	r2, r7
 80012dc:	7013      	strb	r3, [r2, #0]
 80012de:	2301      	movs	r3, #1
 80012e0:	4a67      	ldr	r2, [pc, #412]	@ (8001480 <NLLS+0x1e0>)
 80012e2:	443a      	add	r2, r7
 80012e4:	7013      	strb	r3, [r2, #0]
    double p0[9] = {1, 1, 1, 0, 0, 0, 0, 0, 0}, Be[tam], e[tam], f[tam], sx, sy, sz, bx, by, bz, rho, phi, lambida, error_ant, J, delta_J, mat_H[N][tam];
 80012e6:	4b67      	ldr	r3, [pc, #412]	@ (8001484 <NLLS+0x1e4>)
 80012e8:	443b      	add	r3, r7
 80012ea:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80012ee:	4a66      	ldr	r2, [pc, #408]	@ (8001488 <NLLS+0x1e8>)
 80012f0:	4618      	mov	r0, r3
 80012f2:	4611      	mov	r1, r2
 80012f4:	2348      	movs	r3, #72	@ 0x48
 80012f6:	461a      	mov	r2, r3
 80012f8:	f00e fdc9 	bl	800fe8e <memcpy>
    double sin_phi, sin_rho, sin_lambda, cos_phi, cos_rho, cos_lambda;
    double Ht_H[N][N], Ht_e[N], inv[N][N], mul_mat[N][tam];

    for (int i=0; i < tam; i++)
 80012fc:	2300      	movs	r3, #0
 80012fe:	4a63      	ldr	r2, [pc, #396]	@ (800148c <NLLS+0x1ec>)
 8001300:	443a      	add	r2, r7
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	e014      	b.n	8001330 <NLLS+0x90>
    {
        Be[i] = 1;
 8001306:	4b62      	ldr	r3, [pc, #392]	@ (8001490 <NLLS+0x1f0>)
 8001308:	443b      	add	r3, r7
 800130a:	f5a3 7272 	sub.w	r2, r3, #968	@ 0x3c8
 800130e:	4b5f      	ldr	r3, [pc, #380]	@ (800148c <NLLS+0x1ec>)
 8001310:	443b      	add	r3, r7
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	18d1      	adds	r1, r2, r3
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	4b5d      	ldr	r3, [pc, #372]	@ (8001494 <NLLS+0x1f4>)
 800131e:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i=0; i < tam; i++)
 8001322:	4b5a      	ldr	r3, [pc, #360]	@ (800148c <NLLS+0x1ec>)
 8001324:	443b      	add	r3, r7
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	3301      	adds	r3, #1
 800132a:	4a58      	ldr	r2, [pc, #352]	@ (800148c <NLLS+0x1ec>)
 800132c:	443a      	add	r2, r7
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	4b56      	ldr	r3, [pc, #344]	@ (800148c <NLLS+0x1ec>)
 8001332:	443b      	add	r3, r7
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f240 4256 	movw	r2, #1110	@ 0x456
 800133a:	4293      	cmp	r3, r2
 800133c:	dde3      	ble.n	8001306 <NLLS+0x66>
    }

    while(loop == 1)
 800133e:	f004 bedc 	b.w	80060fa <NLLS+0x4e5a>
    {
        sx = p0[0];
 8001342:	4b50      	ldr	r3, [pc, #320]	@ (8001484 <NLLS+0x1e4>)
 8001344:	443b      	add	r3, r7
 8001346:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800134a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134e:	4952      	ldr	r1, [pc, #328]	@ (8001498 <NLLS+0x1f8>)
 8001350:	4439      	add	r1, r7
 8001352:	e9c1 2300 	strd	r2, r3, [r1]
        sy = p0[1];
 8001356:	4b4b      	ldr	r3, [pc, #300]	@ (8001484 <NLLS+0x1e4>)
 8001358:	443b      	add	r3, r7
 800135a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800135e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001362:	494e      	ldr	r1, [pc, #312]	@ (800149c <NLLS+0x1fc>)
 8001364:	4439      	add	r1, r7
 8001366:	e9c1 2300 	strd	r2, r3, [r1]
        sz = p0[2];
 800136a:	4b46      	ldr	r3, [pc, #280]	@ (8001484 <NLLS+0x1e4>)
 800136c:	443b      	add	r3, r7
 800136e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001372:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001376:	494a      	ldr	r1, [pc, #296]	@ (80014a0 <NLLS+0x200>)
 8001378:	4439      	add	r1, r7
 800137a:	e9c1 2300 	strd	r2, r3, [r1]
        bx = p0[3];
 800137e:	4b41      	ldr	r3, [pc, #260]	@ (8001484 <NLLS+0x1e4>)
 8001380:	443b      	add	r3, r7
 8001382:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001386:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800138a:	4946      	ldr	r1, [pc, #280]	@ (80014a4 <NLLS+0x204>)
 800138c:	4439      	add	r1, r7
 800138e:	e9c1 2300 	strd	r2, r3, [r1]
        by = p0[4];
 8001392:	4b3c      	ldr	r3, [pc, #240]	@ (8001484 <NLLS+0x1e4>)
 8001394:	443b      	add	r3, r7
 8001396:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800139a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800139e:	4942      	ldr	r1, [pc, #264]	@ (80014a8 <NLLS+0x208>)
 80013a0:	4439      	add	r1, r7
 80013a2:	e9c1 2300 	strd	r2, r3, [r1]
        bz = p0[5];
 80013a6:	4b37      	ldr	r3, [pc, #220]	@ (8001484 <NLLS+0x1e4>)
 80013a8:	443b      	add	r3, r7
 80013aa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80013ae:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80013b2:	493e      	ldr	r1, [pc, #248]	@ (80014ac <NLLS+0x20c>)
 80013b4:	4439      	add	r1, r7
 80013b6:	e9c1 2300 	strd	r2, r3, [r1]
        rho = p0[6];
 80013ba:	4b32      	ldr	r3, [pc, #200]	@ (8001484 <NLLS+0x1e4>)
 80013bc:	443b      	add	r3, r7
 80013be:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80013c2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80013c6:	493a      	ldr	r1, [pc, #232]	@ (80014b0 <NLLS+0x210>)
 80013c8:	4439      	add	r1, r7
 80013ca:	e9c1 2300 	strd	r2, r3, [r1]
        phi = p0[7];
 80013ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001484 <NLLS+0x1e4>)
 80013d0:	443b      	add	r3, r7
 80013d2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80013d6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80013da:	4936      	ldr	r1, [pc, #216]	@ (80014b4 <NLLS+0x214>)
 80013dc:	4439      	add	r1, r7
 80013de:	e9c1 2300 	strd	r2, r3, [r1]
        lambida = p0[8];
 80013e2:	4b28      	ldr	r3, [pc, #160]	@ (8001484 <NLLS+0x1e4>)
 80013e4:	443b      	add	r3, r7
 80013e6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80013ea:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80013ee:	4932      	ldr	r1, [pc, #200]	@ (80014b8 <NLLS+0x218>)
 80013f0:	4439      	add	r1, r7
 80013f2:	e9c1 2300 	strd	r2, r3, [r1]

        sin_phi = sin(phi);
 80013f6:	4b2f      	ldr	r3, [pc, #188]	@ (80014b4 <NLLS+0x214>)
 80013f8:	443b      	add	r3, r7
 80013fa:	ed93 0b00 	vldr	d0, [r3]
 80013fe:	f011 fca7 	bl	8012d50 <sin>
 8001402:	4b2e      	ldr	r3, [pc, #184]	@ (80014bc <NLLS+0x21c>)
 8001404:	443b      	add	r3, r7
 8001406:	ed83 0b00 	vstr	d0, [r3]
        sin_rho = sin(rho);
 800140a:	4b29      	ldr	r3, [pc, #164]	@ (80014b0 <NLLS+0x210>)
 800140c:	443b      	add	r3, r7
 800140e:	ed93 0b00 	vldr	d0, [r3]
 8001412:	f011 fc9d 	bl	8012d50 <sin>
 8001416:	4b2a      	ldr	r3, [pc, #168]	@ (80014c0 <NLLS+0x220>)
 8001418:	443b      	add	r3, r7
 800141a:	ed83 0b00 	vstr	d0, [r3]
        sin_lambda = sin(lambida);
 800141e:	4b26      	ldr	r3, [pc, #152]	@ (80014b8 <NLLS+0x218>)
 8001420:	443b      	add	r3, r7
 8001422:	ed93 0b00 	vldr	d0, [r3]
 8001426:	f011 fc93 	bl	8012d50 <sin>
 800142a:	4b26      	ldr	r3, [pc, #152]	@ (80014c4 <NLLS+0x224>)
 800142c:	443b      	add	r3, r7
 800142e:	ed83 0b00 	vstr	d0, [r3]
        cos_phi = cos(phi);
 8001432:	4b20      	ldr	r3, [pc, #128]	@ (80014b4 <NLLS+0x214>)
 8001434:	443b      	add	r3, r7
 8001436:	ed93 0b00 	vldr	d0, [r3]
 800143a:	f011 fc2d 	bl	8012c98 <cos>
 800143e:	4b22      	ldr	r3, [pc, #136]	@ (80014c8 <NLLS+0x228>)
 8001440:	443b      	add	r3, r7
 8001442:	ed83 0b00 	vstr	d0, [r3]
        cos_rho = cos(rho);
 8001446:	4b1a      	ldr	r3, [pc, #104]	@ (80014b0 <NLLS+0x210>)
 8001448:	443b      	add	r3, r7
 800144a:	ed93 0b00 	vldr	d0, [r3]
 800144e:	f011 fc23 	bl	8012c98 <cos>
 8001452:	4b1e      	ldr	r3, [pc, #120]	@ (80014cc <NLLS+0x22c>)
 8001454:	443b      	add	r3, r7
 8001456:	ed83 0b00 	vstr	d0, [r3]
        cos_lambda = cos(lambida);
 800145a:	4b17      	ldr	r3, [pc, #92]	@ (80014b8 <NLLS+0x218>)
 800145c:	443b      	add	r3, r7
 800145e:	ed93 0b00 	vldr	d0, [r3]
 8001462:	f011 fc19 	bl	8012c98 <cos>
 8001466:	4b1a      	ldr	r3, [pc, #104]	@ (80014d0 <NLLS+0x230>)
 8001468:	443b      	add	r3, r7
 800146a:	ed83 0b00 	vstr	d0, [r3]

        for(int i=0; i < tam; i++)
 800146e:	2300      	movs	r3, #0
 8001470:	4a18      	ldr	r2, [pc, #96]	@ (80014d4 <NLLS+0x234>)
 8001472:	443a      	add	r2, r7
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	f004 bb63 	b.w	8005b40 <NLLS+0x48a0>
 800147a:	bf00      	nop
 800147c:	0002dfbf 	.word	0x0002dfbf
 8001480:	0002dfbe 	.word	0x0002dfbe
 8001484:	0002dfc0 	.word	0x0002dfc0
 8001488:	08013f70 	.word	0x08013f70
 800148c:	0002df5c 	.word	0x0002df5c
 8001490:	0002bfc0 	.word	0x0002bfc0
 8001494:	3ff00000 	.word	0x3ff00000
 8001498:	0002dfb0 	.word	0x0002dfb0
 800149c:	0002dfa8 	.word	0x0002dfa8
 80014a0:	0002dfa0 	.word	0x0002dfa0
 80014a4:	0002df98 	.word	0x0002df98
 80014a8:	0002df90 	.word	0x0002df90
 80014ac:	0002df88 	.word	0x0002df88
 80014b0:	0002df80 	.word	0x0002df80
 80014b4:	0002df78 	.word	0x0002df78
 80014b8:	0002df70 	.word	0x0002df70
 80014bc:	0002df28 	.word	0x0002df28
 80014c0:	0002df20 	.word	0x0002df20
 80014c4:	0002df18 	.word	0x0002df18
 80014c8:	0002df10 	.word	0x0002df10
 80014cc:	0002df08 	.word	0x0002df08
 80014d0:	0002df00 	.word	0x0002df00
 80014d4:	0002df58 	.word	0x0002df58
        {
            f[i] = ((mx[i]-bx)*(mx[i]-bx))/(sx*sx) + ((sx*(my[i]-by) - sy*sin_rho*(mx[i]-bx))*((sx*(my[i]-by) - sy*sin_rho*(mx[i]-bx))))/((sx*sy*cos_rho)*(sx*sy*cos_rho)) + ((sx*sy*cos_rho*(mz[i]-bz) - sx*sz*sin_lambda*(my[i]-by) + sy*sz*(sin_lambda*sin_rho - cos_rho*sin_phi*cos_lambda)*(mx[i]-bx))*(sx*sy*cos_rho*(mz[i]-bz) - sx*sz*sin_lambda*(my[i]-by) + sy*sz*(sin_lambda*sin_rho - cos_rho*sin_phi*cos_lambda)*(mx[i]-bx)))/((sx*sy*sz*cos_rho*cos_phi*cos_lambda)*(sx*sy*sz*cos_rho*cos_phi*cos_lambda));
 80014d8:	4bb3      	ldr	r3, [pc, #716]	@ (80017a8 <NLLS+0x508>)
 80014da:	443b      	add	r3, r7
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	f507 627c 	add.w	r2, r7, #4032	@ 0xfc0
 80014e4:	f6a2 7284 	subw	r2, r2, #3972	@ 0xf84
 80014e8:	6812      	ldr	r2, [r2, #0]
 80014ea:	4413      	add	r3, r2
 80014ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014f0:	4bae      	ldr	r3, [pc, #696]	@ (80017ac <NLLS+0x50c>)
 80014f2:	443b      	add	r3, r7
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	f7fe fee6 	bl	80002c8 <__aeabi_dsub>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4614      	mov	r4, r2
 8001502:	461d      	mov	r5, r3
 8001504:	4ba8      	ldr	r3, [pc, #672]	@ (80017a8 <NLLS+0x508>)
 8001506:	443b      	add	r3, r7
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	f507 627c 	add.w	r2, r7, #4032	@ 0xfc0
 8001510:	f6a2 7284 	subw	r2, r2, #3972	@ 0xf84
 8001514:	6812      	ldr	r2, [r2, #0]
 8001516:	4413      	add	r3, r2
 8001518:	e9d3 0100 	ldrd	r0, r1, [r3]
 800151c:	4ba3      	ldr	r3, [pc, #652]	@ (80017ac <NLLS+0x50c>)
 800151e:	443b      	add	r3, r7
 8001520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001524:	f7fe fed0 	bl	80002c8 <__aeabi_dsub>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4620      	mov	r0, r4
 800152e:	4629      	mov	r1, r5
 8001530:	f7ff f882 	bl	8000638 <__aeabi_dmul>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4614      	mov	r4, r2
 800153a:	461d      	mov	r5, r3
 800153c:	4b9c      	ldr	r3, [pc, #624]	@ (80017b0 <NLLS+0x510>)
 800153e:	443b      	add	r3, r7
 8001540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001544:	499a      	ldr	r1, [pc, #616]	@ (80017b0 <NLLS+0x510>)
 8001546:	4439      	add	r1, r7
 8001548:	e9d1 0100 	ldrd	r0, r1, [r1]
 800154c:	f7ff f874 	bl	8000638 <__aeabi_dmul>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4620      	mov	r0, r4
 8001556:	4629      	mov	r1, r5
 8001558:	f7ff f998 	bl	800088c <__aeabi_ddiv>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001564:	4b90      	ldr	r3, [pc, #576]	@ (80017a8 <NLLS+0x508>)
 8001566:	443b      	add	r3, r7
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	f507 627c 	add.w	r2, r7, #4032	@ 0xfc0
 8001570:	f6a2 7288 	subw	r2, r2, #3976	@ 0xf88
 8001574:	6812      	ldr	r2, [r2, #0]
 8001576:	4413      	add	r3, r2
 8001578:	e9d3 0100 	ldrd	r0, r1, [r3]
 800157c:	4b8d      	ldr	r3, [pc, #564]	@ (80017b4 <NLLS+0x514>)
 800157e:	443b      	add	r3, r7
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7fe fea0 	bl	80002c8 <__aeabi_dsub>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	4b87      	ldr	r3, [pc, #540]	@ (80017b0 <NLLS+0x510>)
 8001592:	443b      	add	r3, r7
 8001594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001598:	f7ff f84e 	bl	8000638 <__aeabi_dmul>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4690      	mov	r8, r2
 80015a2:	4699      	mov	r9, r3
 80015a4:	4b84      	ldr	r3, [pc, #528]	@ (80017b8 <NLLS+0x518>)
 80015a6:	443b      	add	r3, r7
 80015a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ac:	4983      	ldr	r1, [pc, #524]	@ (80017bc <NLLS+0x51c>)
 80015ae:	4439      	add	r1, r7
 80015b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015b4:	f7ff f840 	bl	8000638 <__aeabi_dmul>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4614      	mov	r4, r2
 80015be:	461d      	mov	r5, r3
 80015c0:	4b79      	ldr	r3, [pc, #484]	@ (80017a8 <NLLS+0x508>)
 80015c2:	443b      	add	r3, r7
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	00da      	lsls	r2, r3, #3
 80015c8:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80015cc:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4413      	add	r3, r2
 80015d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015d8:	4b74      	ldr	r3, [pc, #464]	@ (80017ac <NLLS+0x50c>)
 80015da:	443b      	add	r3, r7
 80015dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e0:	f7fe fe72 	bl	80002c8 <__aeabi_dsub>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4620      	mov	r0, r4
 80015ea:	4629      	mov	r1, r5
 80015ec:	f7ff f824 	bl	8000638 <__aeabi_dmul>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4640      	mov	r0, r8
 80015f6:	4649      	mov	r1, r9
 80015f8:	f7fe fe66 	bl	80002c8 <__aeabi_dsub>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4692      	mov	sl, r2
 8001602:	469b      	mov	fp, r3
 8001604:	4b68      	ldr	r3, [pc, #416]	@ (80017a8 <NLLS+0x508>)
 8001606:	443b      	add	r3, r7
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	00da      	lsls	r2, r3, #3
 800160c:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8001610:	f6a3 7388 	subw	r3, r3, #3976	@ 0xf88
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4413      	add	r3, r2
 8001618:	e9d3 0100 	ldrd	r0, r1, [r3]
 800161c:	4b65      	ldr	r3, [pc, #404]	@ (80017b4 <NLLS+0x514>)
 800161e:	443b      	add	r3, r7
 8001620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001624:	f7fe fe50 	bl	80002c8 <__aeabi_dsub>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4610      	mov	r0, r2
 800162e:	4619      	mov	r1, r3
 8001630:	4b5f      	ldr	r3, [pc, #380]	@ (80017b0 <NLLS+0x510>)
 8001632:	443b      	add	r3, r7
 8001634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001638:	f7fe fffe 	bl	8000638 <__aeabi_dmul>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4690      	mov	r8, r2
 8001642:	4699      	mov	r9, r3
 8001644:	4b5c      	ldr	r3, [pc, #368]	@ (80017b8 <NLLS+0x518>)
 8001646:	443b      	add	r3, r7
 8001648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164c:	495b      	ldr	r1, [pc, #364]	@ (80017bc <NLLS+0x51c>)
 800164e:	4439      	add	r1, r7
 8001650:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001654:	f7fe fff0 	bl	8000638 <__aeabi_dmul>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4614      	mov	r4, r2
 800165e:	461d      	mov	r5, r3
 8001660:	4b51      	ldr	r3, [pc, #324]	@ (80017a8 <NLLS+0x508>)
 8001662:	443b      	add	r3, r7
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	00da      	lsls	r2, r3, #3
 8001668:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800166c:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4413      	add	r3, r2
 8001674:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001678:	4b4c      	ldr	r3, [pc, #304]	@ (80017ac <NLLS+0x50c>)
 800167a:	443b      	add	r3, r7
 800167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001680:	f7fe fe22 	bl	80002c8 <__aeabi_dsub>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4620      	mov	r0, r4
 800168a:	4629      	mov	r1, r5
 800168c:	f7fe ffd4 	bl	8000638 <__aeabi_dmul>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4640      	mov	r0, r8
 8001696:	4649      	mov	r1, r9
 8001698:	f7fe fe16 	bl	80002c8 <__aeabi_dsub>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4650      	mov	r0, sl
 80016a2:	4659      	mov	r1, fp
 80016a4:	f7fe ffc8 	bl	8000638 <__aeabi_dmul>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4690      	mov	r8, r2
 80016ae:	4699      	mov	r9, r3
 80016b0:	4b42      	ldr	r3, [pc, #264]	@ (80017bc <NLLS+0x51c>)
 80016b2:	443b      	add	r3, r7
 80016b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b8:	493d      	ldr	r1, [pc, #244]	@ (80017b0 <NLLS+0x510>)
 80016ba:	4439      	add	r1, r7
 80016bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016c0:	f7fe ffba 	bl	8000638 <__aeabi_dmul>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4610      	mov	r0, r2
 80016ca:	4619      	mov	r1, r3
 80016cc:	4b3c      	ldr	r3, [pc, #240]	@ (80017c0 <NLLS+0x520>)
 80016ce:	443b      	add	r3, r7
 80016d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d4:	f7fe ffb0 	bl	8000638 <__aeabi_dmul>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4614      	mov	r4, r2
 80016de:	461d      	mov	r5, r3
 80016e0:	4b36      	ldr	r3, [pc, #216]	@ (80017bc <NLLS+0x51c>)
 80016e2:	443b      	add	r3, r7
 80016e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e8:	4931      	ldr	r1, [pc, #196]	@ (80017b0 <NLLS+0x510>)
 80016ea:	4439      	add	r1, r7
 80016ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016f0:	f7fe ffa2 	bl	8000638 <__aeabi_dmul>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4610      	mov	r0, r2
 80016fa:	4619      	mov	r1, r3
 80016fc:	4b30      	ldr	r3, [pc, #192]	@ (80017c0 <NLLS+0x520>)
 80016fe:	443b      	add	r3, r7
 8001700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001704:	f7fe ff98 	bl	8000638 <__aeabi_dmul>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4620      	mov	r0, r4
 800170e:	4629      	mov	r1, r5
 8001710:	f7fe ff92 	bl	8000638 <__aeabi_dmul>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4640      	mov	r0, r8
 800171a:	4649      	mov	r1, r9
 800171c:	f7ff f8b6 	bl	800088c <__aeabi_ddiv>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001728:	f7fe fdd0 	bl	80002cc <__adddf3>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001734:	4b21      	ldr	r3, [pc, #132]	@ (80017bc <NLLS+0x51c>)
 8001736:	443b      	add	r3, r7
 8001738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173c:	491c      	ldr	r1, [pc, #112]	@ (80017b0 <NLLS+0x510>)
 800173e:	4439      	add	r1, r7
 8001740:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001744:	f7fe ff78 	bl	8000638 <__aeabi_dmul>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4610      	mov	r0, r2
 800174e:	4619      	mov	r1, r3
 8001750:	4b1b      	ldr	r3, [pc, #108]	@ (80017c0 <NLLS+0x520>)
 8001752:	443b      	add	r3, r7
 8001754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001758:	f7fe ff6e 	bl	8000638 <__aeabi_dmul>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4614      	mov	r4, r2
 8001762:	461d      	mov	r5, r3
 8001764:	4b10      	ldr	r3, [pc, #64]	@ (80017a8 <NLLS+0x508>)
 8001766:	443b      	add	r3, r7
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	00da      	lsls	r2, r3, #3
 800176c:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8001770:	f6a3 738c 	subw	r3, r3, #3980	@ 0xf8c
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4413      	add	r3, r2
 8001778:	e9d3 0100 	ldrd	r0, r1, [r3]
 800177c:	4b11      	ldr	r3, [pc, #68]	@ (80017c4 <NLLS+0x524>)
 800177e:	443b      	add	r3, r7
 8001780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001784:	f7fe fda0 	bl	80002c8 <__aeabi_dsub>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4620      	mov	r0, r4
 800178e:	4629      	mov	r1, r5
 8001790:	f7fe ff52 	bl	8000638 <__aeabi_dmul>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4690      	mov	r8, r2
 800179a:	4699      	mov	r9, r3
 800179c:	4b0a      	ldr	r3, [pc, #40]	@ (80017c8 <NLLS+0x528>)
 800179e:	443b      	add	r3, r7
 80017a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a4:	e012      	b.n	80017cc <NLLS+0x52c>
 80017a6:	bf00      	nop
 80017a8:	0002df58 	.word	0x0002df58
 80017ac:	0002df98 	.word	0x0002df98
 80017b0:	0002dfb0 	.word	0x0002dfb0
 80017b4:	0002df90 	.word	0x0002df90
 80017b8:	0002df20 	.word	0x0002df20
 80017bc:	0002dfa8 	.word	0x0002dfa8
 80017c0:	0002df08 	.word	0x0002df08
 80017c4:	0002df88 	.word	0x0002df88
 80017c8:	0002dfa0 	.word	0x0002dfa0
 80017cc:	49b6      	ldr	r1, [pc, #728]	@ (8001aa8 <NLLS+0x808>)
 80017ce:	4439      	add	r1, r7
 80017d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017d4:	f7fe ff30 	bl	8000638 <__aeabi_dmul>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4610      	mov	r0, r2
 80017de:	4619      	mov	r1, r3
 80017e0:	4bb2      	ldr	r3, [pc, #712]	@ (8001aac <NLLS+0x80c>)
 80017e2:	443b      	add	r3, r7
 80017e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e8:	f7fe ff26 	bl	8000638 <__aeabi_dmul>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4614      	mov	r4, r2
 80017f2:	461d      	mov	r5, r3
 80017f4:	4bae      	ldr	r3, [pc, #696]	@ (8001ab0 <NLLS+0x810>)
 80017f6:	443b      	add	r3, r7
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	00da      	lsls	r2, r3, #3
 80017fc:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8001800:	f6a3 7388 	subw	r3, r3, #3976	@ 0xf88
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4413      	add	r3, r2
 8001808:	e9d3 0100 	ldrd	r0, r1, [r3]
 800180c:	4ba9      	ldr	r3, [pc, #676]	@ (8001ab4 <NLLS+0x814>)
 800180e:	443b      	add	r3, r7
 8001810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001814:	f7fe fd58 	bl	80002c8 <__aeabi_dsub>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4620      	mov	r0, r4
 800181e:	4629      	mov	r1, r5
 8001820:	f7fe ff0a 	bl	8000638 <__aeabi_dmul>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4640      	mov	r0, r8
 800182a:	4649      	mov	r1, r9
 800182c:	f7fe fd4c 	bl	80002c8 <__aeabi_dsub>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4692      	mov	sl, r2
 8001836:	469b      	mov	fp, r3
 8001838:	4b9f      	ldr	r3, [pc, #636]	@ (8001ab8 <NLLS+0x818>)
 800183a:	443b      	add	r3, r7
 800183c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001840:	499e      	ldr	r1, [pc, #632]	@ (8001abc <NLLS+0x81c>)
 8001842:	4439      	add	r1, r7
 8001844:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001848:	f7fe fef6 	bl	8000638 <__aeabi_dmul>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4690      	mov	r8, r2
 8001852:	4699      	mov	r9, r3
 8001854:	4b9a      	ldr	r3, [pc, #616]	@ (8001ac0 <NLLS+0x820>)
 8001856:	443b      	add	r3, r7
 8001858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185c:	4993      	ldr	r1, [pc, #588]	@ (8001aac <NLLS+0x80c>)
 800185e:	4439      	add	r1, r7
 8001860:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001864:	f7fe fee8 	bl	8000638 <__aeabi_dmul>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4614      	mov	r4, r2
 800186e:	461d      	mov	r5, r3
 8001870:	4b94      	ldr	r3, [pc, #592]	@ (8001ac4 <NLLS+0x824>)
 8001872:	443b      	add	r3, r7
 8001874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001878:	4993      	ldr	r1, [pc, #588]	@ (8001ac8 <NLLS+0x828>)
 800187a:	4439      	add	r1, r7
 800187c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001880:	f7fe feda 	bl	8000638 <__aeabi_dmul>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4610      	mov	r0, r2
 800188a:	4619      	mov	r1, r3
 800188c:	4b8f      	ldr	r3, [pc, #572]	@ (8001acc <NLLS+0x82c>)
 800188e:	443b      	add	r3, r7
 8001890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001894:	f7fe fed0 	bl	8000638 <__aeabi_dmul>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4620      	mov	r0, r4
 800189e:	4629      	mov	r1, r5
 80018a0:	f7fe fd12 	bl	80002c8 <__aeabi_dsub>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4640      	mov	r0, r8
 80018aa:	4649      	mov	r1, r9
 80018ac:	f7fe fec4 	bl	8000638 <__aeabi_dmul>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4614      	mov	r4, r2
 80018b6:	461d      	mov	r5, r3
 80018b8:	4b7d      	ldr	r3, [pc, #500]	@ (8001ab0 <NLLS+0x810>)
 80018ba:	443b      	add	r3, r7
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	00da      	lsls	r2, r3, #3
 80018c0:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80018c4:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018d0:	4b7f      	ldr	r3, [pc, #508]	@ (8001ad0 <NLLS+0x830>)
 80018d2:	443b      	add	r3, r7
 80018d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d8:	f7fe fcf6 	bl	80002c8 <__aeabi_dsub>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4620      	mov	r0, r4
 80018e2:	4629      	mov	r1, r5
 80018e4:	f7fe fea8 	bl	8000638 <__aeabi_dmul>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4650      	mov	r0, sl
 80018ee:	4659      	mov	r1, fp
 80018f0:	f7fe fcec 	bl	80002cc <__adddf3>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	e9c7 2300 	strd	r2, r3, [r7]
 80018fc:	4b6f      	ldr	r3, [pc, #444]	@ (8001abc <NLLS+0x81c>)
 80018fe:	443b      	add	r3, r7
 8001900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001904:	4968      	ldr	r1, [pc, #416]	@ (8001aa8 <NLLS+0x808>)
 8001906:	4439      	add	r1, r7
 8001908:	e9d1 0100 	ldrd	r0, r1, [r1]
 800190c:	f7fe fe94 	bl	8000638 <__aeabi_dmul>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
 8001918:	4b6b      	ldr	r3, [pc, #428]	@ (8001ac8 <NLLS+0x828>)
 800191a:	443b      	add	r3, r7
 800191c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001920:	f7fe fe8a 	bl	8000638 <__aeabi_dmul>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4614      	mov	r4, r2
 800192a:	461d      	mov	r5, r3
 800192c:	4b60      	ldr	r3, [pc, #384]	@ (8001ab0 <NLLS+0x810>)
 800192e:	443b      	add	r3, r7
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	00da      	lsls	r2, r3, #3
 8001934:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8001938:	f6a3 738c 	subw	r3, r3, #3980	@ 0xf8c
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4413      	add	r3, r2
 8001940:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001944:	4b63      	ldr	r3, [pc, #396]	@ (8001ad4 <NLLS+0x834>)
 8001946:	443b      	add	r3, r7
 8001948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194c:	f7fe fcbc 	bl	80002c8 <__aeabi_dsub>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4620      	mov	r0, r4
 8001956:	4629      	mov	r1, r5
 8001958:	f7fe fe6e 	bl	8000638 <__aeabi_dmul>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4690      	mov	r8, r2
 8001962:	4699      	mov	r9, r3
 8001964:	4b54      	ldr	r3, [pc, #336]	@ (8001ab8 <NLLS+0x818>)
 8001966:	443b      	add	r3, r7
 8001968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196c:	494e      	ldr	r1, [pc, #312]	@ (8001aa8 <NLLS+0x808>)
 800196e:	4439      	add	r1, r7
 8001970:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001974:	f7fe fe60 	bl	8000638 <__aeabi_dmul>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4610      	mov	r0, r2
 800197e:	4619      	mov	r1, r3
 8001980:	4b4a      	ldr	r3, [pc, #296]	@ (8001aac <NLLS+0x80c>)
 8001982:	443b      	add	r3, r7
 8001984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001988:	f7fe fe56 	bl	8000638 <__aeabi_dmul>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4614      	mov	r4, r2
 8001992:	461d      	mov	r5, r3
 8001994:	4b46      	ldr	r3, [pc, #280]	@ (8001ab0 <NLLS+0x810>)
 8001996:	443b      	add	r3, r7
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	00da      	lsls	r2, r3, #3
 800199c:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80019a0:	f6a3 7388 	subw	r3, r3, #3976	@ 0xf88
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4413      	add	r3, r2
 80019a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019ac:	4b41      	ldr	r3, [pc, #260]	@ (8001ab4 <NLLS+0x814>)
 80019ae:	443b      	add	r3, r7
 80019b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b4:	f7fe fc88 	bl	80002c8 <__aeabi_dsub>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4620      	mov	r0, r4
 80019be:	4629      	mov	r1, r5
 80019c0:	f7fe fe3a 	bl	8000638 <__aeabi_dmul>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4640      	mov	r0, r8
 80019ca:	4649      	mov	r1, r9
 80019cc:	f7fe fc7c 	bl	80002c8 <__aeabi_dsub>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4692      	mov	sl, r2
 80019d6:	469b      	mov	fp, r3
 80019d8:	4b37      	ldr	r3, [pc, #220]	@ (8001ab8 <NLLS+0x818>)
 80019da:	443b      	add	r3, r7
 80019dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e0:	4936      	ldr	r1, [pc, #216]	@ (8001abc <NLLS+0x81c>)
 80019e2:	4439      	add	r1, r7
 80019e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019e8:	f7fe fe26 	bl	8000638 <__aeabi_dmul>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4690      	mov	r8, r2
 80019f2:	4699      	mov	r9, r3
 80019f4:	4b32      	ldr	r3, [pc, #200]	@ (8001ac0 <NLLS+0x820>)
 80019f6:	443b      	add	r3, r7
 80019f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fc:	492b      	ldr	r1, [pc, #172]	@ (8001aac <NLLS+0x80c>)
 80019fe:	4439      	add	r1, r7
 8001a00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a04:	f7fe fe18 	bl	8000638 <__aeabi_dmul>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4614      	mov	r4, r2
 8001a0e:	461d      	mov	r5, r3
 8001a10:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac4 <NLLS+0x824>)
 8001a12:	443b      	add	r3, r7
 8001a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a18:	492b      	ldr	r1, [pc, #172]	@ (8001ac8 <NLLS+0x828>)
 8001a1a:	4439      	add	r1, r7
 8001a1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a20:	f7fe fe0a 	bl	8000638 <__aeabi_dmul>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4610      	mov	r0, r2
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4b27      	ldr	r3, [pc, #156]	@ (8001acc <NLLS+0x82c>)
 8001a2e:	443b      	add	r3, r7
 8001a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a34:	f7fe fe00 	bl	8000638 <__aeabi_dmul>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4620      	mov	r0, r4
 8001a3e:	4629      	mov	r1, r5
 8001a40:	f7fe fc42 	bl	80002c8 <__aeabi_dsub>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4640      	mov	r0, r8
 8001a4a:	4649      	mov	r1, r9
 8001a4c:	f7fe fdf4 	bl	8000638 <__aeabi_dmul>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4614      	mov	r4, r2
 8001a56:	461d      	mov	r5, r3
 8001a58:	4b15      	ldr	r3, [pc, #84]	@ (8001ab0 <NLLS+0x810>)
 8001a5a:	443b      	add	r3, r7
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	00da      	lsls	r2, r3, #3
 8001a60:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8001a64:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a70:	4b17      	ldr	r3, [pc, #92]	@ (8001ad0 <NLLS+0x830>)
 8001a72:	443b      	add	r3, r7
 8001a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a78:	f7fe fc26 	bl	80002c8 <__aeabi_dsub>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4620      	mov	r0, r4
 8001a82:	4629      	mov	r1, r5
 8001a84:	f7fe fdd8 	bl	8000638 <__aeabi_dmul>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4650      	mov	r0, sl
 8001a8e:	4659      	mov	r1, fp
 8001a90:	f7fe fc1c 	bl	80002cc <__adddf3>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a9c:	f7fe fdcc 	bl	8000638 <__aeabi_dmul>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	e018      	b.n	8001ad8 <NLLS+0x838>
 8001aa6:	bf00      	nop
 8001aa8:	0002dfb0 	.word	0x0002dfb0
 8001aac:	0002df18 	.word	0x0002df18
 8001ab0:	0002df58 	.word	0x0002df58
 8001ab4:	0002df90 	.word	0x0002df90
 8001ab8:	0002dfa0 	.word	0x0002dfa0
 8001abc:	0002dfa8 	.word	0x0002dfa8
 8001ac0:	0002df20 	.word	0x0002df20
 8001ac4:	0002df28 	.word	0x0002df28
 8001ac8:	0002df08 	.word	0x0002df08
 8001acc:	0002df00 	.word	0x0002df00
 8001ad0:	0002df98 	.word	0x0002df98
 8001ad4:	0002df88 	.word	0x0002df88
 8001ad8:	4690      	mov	r8, r2
 8001ada:	4699      	mov	r9, r3
 8001adc:	4bb1      	ldr	r3, [pc, #708]	@ (8001da4 <NLLS+0xb04>)
 8001ade:	443b      	add	r3, r7
 8001ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae4:	49b0      	ldr	r1, [pc, #704]	@ (8001da8 <NLLS+0xb08>)
 8001ae6:	4439      	add	r1, r7
 8001ae8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001aec:	f7fe fda4 	bl	8000638 <__aeabi_dmul>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	4bac      	ldr	r3, [pc, #688]	@ (8001dac <NLLS+0xb0c>)
 8001afa:	443b      	add	r3, r7
 8001afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b00:	f7fe fd9a 	bl	8000638 <__aeabi_dmul>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4610      	mov	r0, r2
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4ba8      	ldr	r3, [pc, #672]	@ (8001db0 <NLLS+0xb10>)
 8001b0e:	443b      	add	r3, r7
 8001b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b14:	f7fe fd90 	bl	8000638 <__aeabi_dmul>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4ba4      	ldr	r3, [pc, #656]	@ (8001db4 <NLLS+0xb14>)
 8001b22:	443b      	add	r3, r7
 8001b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b28:	f7fe fd86 	bl	8000638 <__aeabi_dmul>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	4ba0      	ldr	r3, [pc, #640]	@ (8001db8 <NLLS+0xb18>)
 8001b36:	443b      	add	r3, r7
 8001b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3c:	f7fe fd7c 	bl	8000638 <__aeabi_dmul>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4614      	mov	r4, r2
 8001b46:	461d      	mov	r5, r3
 8001b48:	4b96      	ldr	r3, [pc, #600]	@ (8001da4 <NLLS+0xb04>)
 8001b4a:	443b      	add	r3, r7
 8001b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b50:	4995      	ldr	r1, [pc, #596]	@ (8001da8 <NLLS+0xb08>)
 8001b52:	4439      	add	r1, r7
 8001b54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b58:	f7fe fd6e 	bl	8000638 <__aeabi_dmul>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4610      	mov	r0, r2
 8001b62:	4619      	mov	r1, r3
 8001b64:	4b91      	ldr	r3, [pc, #580]	@ (8001dac <NLLS+0xb0c>)
 8001b66:	443b      	add	r3, r7
 8001b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6c:	f7fe fd64 	bl	8000638 <__aeabi_dmul>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	4b8d      	ldr	r3, [pc, #564]	@ (8001db0 <NLLS+0xb10>)
 8001b7a:	443b      	add	r3, r7
 8001b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b80:	f7fe fd5a 	bl	8000638 <__aeabi_dmul>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4610      	mov	r0, r2
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4b89      	ldr	r3, [pc, #548]	@ (8001db4 <NLLS+0xb14>)
 8001b8e:	443b      	add	r3, r7
 8001b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b94:	f7fe fd50 	bl	8000638 <__aeabi_dmul>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4b85      	ldr	r3, [pc, #532]	@ (8001db8 <NLLS+0xb18>)
 8001ba2:	443b      	add	r3, r7
 8001ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba8:	f7fe fd46 	bl	8000638 <__aeabi_dmul>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	4629      	mov	r1, r5
 8001bb4:	f7fe fd40 	bl	8000638 <__aeabi_dmul>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4640      	mov	r0, r8
 8001bbe:	4649      	mov	r1, r9
 8001bc0:	f7fe fe64 	bl	800088c <__aeabi_ddiv>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bcc:	f7fe fb7e 	bl	80002cc <__adddf3>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4979      	ldr	r1, [pc, #484]	@ (8001dbc <NLLS+0xb1c>)
 8001bd6:	4439      	add	r1, r7
 8001bd8:	f6a1 1038 	subw	r0, r1, #2360	@ 0x938
 8001bdc:	4978      	ldr	r1, [pc, #480]	@ (8001dc0 <NLLS+0xb20>)
 8001bde:	4439      	add	r1, r7
 8001be0:	6809      	ldr	r1, [r1, #0]
 8001be2:	00c9      	lsls	r1, r1, #3
 8001be4:	4401      	add	r1, r0
 8001be6:	e9c1 2300 	strd	r2, r3, [r1]

            e[i] = (Be[i] * Be[i]) - f[i];
 8001bea:	4b76      	ldr	r3, [pc, #472]	@ (8001dc4 <NLLS+0xb24>)
 8001bec:	443b      	add	r3, r7
 8001bee:	f5a3 7272 	sub.w	r2, r3, #968	@ 0x3c8
 8001bf2:	4b73      	ldr	r3, [pc, #460]	@ (8001dc0 <NLLS+0xb20>)
 8001bf4:	443b      	add	r3, r7
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c00:	4b70      	ldr	r3, [pc, #448]	@ (8001dc4 <NLLS+0xb24>)
 8001c02:	443b      	add	r3, r7
 8001c04:	f5a3 7272 	sub.w	r2, r3, #968	@ 0x3c8
 8001c08:	4b6d      	ldr	r3, [pc, #436]	@ (8001dc0 <NLLS+0xb20>)
 8001c0a:	443b      	add	r3, r7
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	4413      	add	r3, r2
 8001c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c16:	f7fe fd0f 	bl	8000638 <__aeabi_dmul>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4610      	mov	r0, r2
 8001c20:	4619      	mov	r1, r3
 8001c22:	4b66      	ldr	r3, [pc, #408]	@ (8001dbc <NLLS+0xb1c>)
 8001c24:	443b      	add	r3, r7
 8001c26:	f6a3 1238 	subw	r2, r3, #2360	@ 0x938
 8001c2a:	4b65      	ldr	r3, [pc, #404]	@ (8001dc0 <NLLS+0xb20>)
 8001c2c:	443b      	add	r3, r7
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	4413      	add	r3, r2
 8001c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c38:	f7fe fb46 	bl	80002c8 <__aeabi_dsub>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4961      	ldr	r1, [pc, #388]	@ (8001dc8 <NLLS+0xb28>)
 8001c42:	4439      	add	r1, r7
 8001c44:	f5a1 60d0 	sub.w	r0, r1, #1664	@ 0x680
 8001c48:	495d      	ldr	r1, [pc, #372]	@ (8001dc0 <NLLS+0xb20>)
 8001c4a:	4439      	add	r1, r7
 8001c4c:	6809      	ldr	r1, [r1, #0]
 8001c4e:	00c9      	lsls	r1, r1, #3
 8001c50:	4401      	add	r1, r0
 8001c52:	e9c1 2300 	strd	r2, r3, [r1]

            mat_H[0][i] = (2*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))*(by - my[i]))/(sx*sx*sy*sy*cos_rho*cos_rho) - (2*((sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))))/((sx*sx*sx)*sy*sy*cos_rho*cos_rho) - (2*((bx - mx[i])*(bx - mx[i])))/(sx*sx*sx) - (2*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])) * (sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/((sx*sx*sx)*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho) + (2*(sy*cos_rho*(bz - mz[i]) - sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8001c56:	4b5a      	ldr	r3, [pc, #360]	@ (8001dc0 <NLLS+0xb20>)
 8001c58:	443b      	add	r3, r7
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	f507 627c 	add.w	r2, r7, #4032	@ 0xfc0
 8001c62:	f6a2 7288 	subw	r2, r2, #3976	@ 0xf88
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	4413      	add	r3, r2
 8001c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6e:	4957      	ldr	r1, [pc, #348]	@ (8001dcc <NLLS+0xb2c>)
 8001c70:	4439      	add	r1, r7
 8001c72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c76:	f7fe fb27 	bl	80002c8 <__aeabi_dsub>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4610      	mov	r0, r2
 8001c80:	4619      	mov	r1, r3
 8001c82:	4b49      	ldr	r3, [pc, #292]	@ (8001da8 <NLLS+0xb08>)
 8001c84:	443b      	add	r3, r7
 8001c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8a:	f7fe fcd5 	bl	8000638 <__aeabi_dmul>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4690      	mov	r8, r2
 8001c94:	4699      	mov	r9, r3
 8001c96:	4b4e      	ldr	r3, [pc, #312]	@ (8001dd0 <NLLS+0xb30>)
 8001c98:	443b      	add	r3, r7
 8001c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9e:	4941      	ldr	r1, [pc, #260]	@ (8001da4 <NLLS+0xb04>)
 8001ca0:	4439      	add	r1, r7
 8001ca2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ca6:	f7fe fcc7 	bl	8000638 <__aeabi_dmul>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4614      	mov	r4, r2
 8001cb0:	461d      	mov	r5, r3
 8001cb2:	4b43      	ldr	r3, [pc, #268]	@ (8001dc0 <NLLS+0xb20>)
 8001cb4:	443b      	add	r3, r7
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	00da      	lsls	r2, r3, #3
 8001cba:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8001cbe:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cca:	4942      	ldr	r1, [pc, #264]	@ (8001dd4 <NLLS+0xb34>)
 8001ccc:	4439      	add	r1, r7
 8001cce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001cd2:	f7fe faf9 	bl	80002c8 <__aeabi_dsub>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4620      	mov	r0, r4
 8001cdc:	4629      	mov	r1, r5
 8001cde:	f7fe fcab 	bl	8000638 <__aeabi_dmul>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4640      	mov	r0, r8
 8001ce8:	4649      	mov	r1, r9
 8001cea:	f7fe faed 	bl	80002c8 <__aeabi_dsub>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	f7fe fae7 	bl	80002cc <__adddf3>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4614      	mov	r4, r2
 8001d04:	461d      	mov	r5, r3
 8001d06:	4b2e      	ldr	r3, [pc, #184]	@ (8001dc0 <NLLS+0xb20>)
 8001d08:	443b      	add	r3, r7
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	f507 627c 	add.w	r2, r7, #4032	@ 0xfc0
 8001d12:	f6a2 7288 	subw	r2, r2, #3976	@ 0xf88
 8001d16:	6812      	ldr	r2, [r2, #0]
 8001d18:	4413      	add	r3, r2
 8001d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1e:	492b      	ldr	r1, [pc, #172]	@ (8001dcc <NLLS+0xb2c>)
 8001d20:	4439      	add	r1, r7
 8001d22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d26:	f7fe facf 	bl	80002c8 <__aeabi_dsub>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4620      	mov	r0, r4
 8001d30:	4629      	mov	r1, r5
 8001d32:	f7fe fc81 	bl	8000638 <__aeabi_dmul>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4614      	mov	r4, r2
 8001d3c:	461d      	mov	r5, r3
 8001d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001da8 <NLLS+0xb08>)
 8001d40:	443b      	add	r3, r7
 8001d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d46:	4918      	ldr	r1, [pc, #96]	@ (8001da8 <NLLS+0xb08>)
 8001d48:	4439      	add	r1, r7
 8001d4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d4e:	f7fe fc73 	bl	8000638 <__aeabi_dmul>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4610      	mov	r0, r2
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4b12      	ldr	r3, [pc, #72]	@ (8001da4 <NLLS+0xb04>)
 8001d5c:	443b      	add	r3, r7
 8001d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d62:	f7fe fc69 	bl	8000638 <__aeabi_dmul>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001da4 <NLLS+0xb04>)
 8001d70:	443b      	add	r3, r7
 8001d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d76:	f7fe fc5f 	bl	8000638 <__aeabi_dmul>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4610      	mov	r0, r2
 8001d80:	4619      	mov	r1, r3
 8001d82:	4b0b      	ldr	r3, [pc, #44]	@ (8001db0 <NLLS+0xb10>)
 8001d84:	443b      	add	r3, r7
 8001d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8a:	f7fe fc55 	bl	8000638 <__aeabi_dmul>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4610      	mov	r0, r2
 8001d94:	4619      	mov	r1, r3
 8001d96:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <NLLS+0xb10>)
 8001d98:	443b      	add	r3, r7
 8001d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9e:	f7fe fc4b 	bl	8000638 <__aeabi_dmul>
 8001da2:	e019      	b.n	8001dd8 <NLLS+0xb38>
 8001da4:	0002dfa8 	.word	0x0002dfa8
 8001da8:	0002dfb0 	.word	0x0002dfb0
 8001dac:	0002dfa0 	.word	0x0002dfa0
 8001db0:	0002df08 	.word	0x0002df08
 8001db4:	0002df10 	.word	0x0002df10
 8001db8:	0002df00 	.word	0x0002df00
 8001dbc:	00027fc0 	.word	0x00027fc0
 8001dc0:	0002df58 	.word	0x0002df58
 8001dc4:	0002bfc0 	.word	0x0002bfc0
 8001dc8:	00029fc0 	.word	0x00029fc0
 8001dcc:	0002df90 	.word	0x0002df90
 8001dd0:	0002df20 	.word	0x0002df20
 8001dd4:	0002df98 	.word	0x0002df98
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4620      	mov	r0, r4
 8001dde:	4629      	mov	r1, r5
 8001de0:	f7fe fd54 	bl	800088c <__aeabi_ddiv>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001dec:	4bb6      	ldr	r3, [pc, #728]	@ (80020c8 <NLLS+0xe28>)
 8001dee:	443b      	add	r3, r7
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	f507 627c 	add.w	r2, r7, #4032	@ 0xfc0
 8001df8:	f6a2 7288 	subw	r2, r2, #3976	@ 0xf88
 8001dfc:	6812      	ldr	r2, [r2, #0]
 8001dfe:	4413      	add	r3, r2
 8001e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e04:	49b1      	ldr	r1, [pc, #708]	@ (80020cc <NLLS+0xe2c>)
 8001e06:	4439      	add	r1, r7
 8001e08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e0c:	f7fe fa5c 	bl	80002c8 <__aeabi_dsub>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4610      	mov	r0, r2
 8001e16:	4619      	mov	r1, r3
 8001e18:	4bad      	ldr	r3, [pc, #692]	@ (80020d0 <NLLS+0xe30>)
 8001e1a:	443b      	add	r3, r7
 8001e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e20:	f7fe fc0a 	bl	8000638 <__aeabi_dmul>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4690      	mov	r8, r2
 8001e2a:	4699      	mov	r9, r3
 8001e2c:	4ba9      	ldr	r3, [pc, #676]	@ (80020d4 <NLLS+0xe34>)
 8001e2e:	443b      	add	r3, r7
 8001e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e34:	49a8      	ldr	r1, [pc, #672]	@ (80020d8 <NLLS+0xe38>)
 8001e36:	4439      	add	r1, r7
 8001e38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e3c:	f7fe fbfc 	bl	8000638 <__aeabi_dmul>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	4614      	mov	r4, r2
 8001e46:	461d      	mov	r5, r3
 8001e48:	4b9f      	ldr	r3, [pc, #636]	@ (80020c8 <NLLS+0xe28>)
 8001e4a:	443b      	add	r3, r7
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	00da      	lsls	r2, r3, #3
 8001e50:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8001e54:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e60:	499e      	ldr	r1, [pc, #632]	@ (80020dc <NLLS+0xe3c>)
 8001e62:	4439      	add	r1, r7
 8001e64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e68:	f7fe fa2e 	bl	80002c8 <__aeabi_dsub>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4620      	mov	r0, r4
 8001e72:	4629      	mov	r1, r5
 8001e74:	f7fe fbe0 	bl	8000638 <__aeabi_dmul>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	4649      	mov	r1, r9
 8001e80:	f7fe fa22 	bl	80002c8 <__aeabi_dsub>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4692      	mov	sl, r2
 8001e8a:	469b      	mov	fp, r3
 8001e8c:	4b8e      	ldr	r3, [pc, #568]	@ (80020c8 <NLLS+0xe28>)
 8001e8e:	443b      	add	r3, r7
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	00da      	lsls	r2, r3, #3
 8001e94:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8001e98:	f6a3 7388 	subw	r3, r3, #3976	@ 0xf88
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea4:	4989      	ldr	r1, [pc, #548]	@ (80020cc <NLLS+0xe2c>)
 8001ea6:	4439      	add	r1, r7
 8001ea8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001eac:	f7fe fa0c 	bl	80002c8 <__aeabi_dsub>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4b85      	ldr	r3, [pc, #532]	@ (80020d0 <NLLS+0xe30>)
 8001eba:	443b      	add	r3, r7
 8001ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec0:	f7fe fbba 	bl	8000638 <__aeabi_dmul>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4690      	mov	r8, r2
 8001eca:	4699      	mov	r9, r3
 8001ecc:	4b81      	ldr	r3, [pc, #516]	@ (80020d4 <NLLS+0xe34>)
 8001ece:	443b      	add	r3, r7
 8001ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed4:	4980      	ldr	r1, [pc, #512]	@ (80020d8 <NLLS+0xe38>)
 8001ed6:	4439      	add	r1, r7
 8001ed8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001edc:	f7fe fbac 	bl	8000638 <__aeabi_dmul>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4614      	mov	r4, r2
 8001ee6:	461d      	mov	r5, r3
 8001ee8:	4b77      	ldr	r3, [pc, #476]	@ (80020c8 <NLLS+0xe28>)
 8001eea:	443b      	add	r3, r7
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	00da      	lsls	r2, r3, #3
 8001ef0:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8001ef4:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4413      	add	r3, r2
 8001efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f00:	4976      	ldr	r1, [pc, #472]	@ (80020dc <NLLS+0xe3c>)
 8001f02:	4439      	add	r1, r7
 8001f04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f08:	f7fe f9de 	bl	80002c8 <__aeabi_dsub>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4620      	mov	r0, r4
 8001f12:	4629      	mov	r1, r5
 8001f14:	f7fe fb90 	bl	8000638 <__aeabi_dmul>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4640      	mov	r0, r8
 8001f1e:	4649      	mov	r1, r9
 8001f20:	f7fe f9d2 	bl	80002c8 <__aeabi_dsub>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4650      	mov	r0, sl
 8001f2a:	4659      	mov	r1, fp
 8001f2c:	f7fe fb84 	bl	8000638 <__aeabi_dmul>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	4610      	mov	r0, r2
 8001f36:	4619      	mov	r1, r3
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	f7fe f9c6 	bl	80002cc <__adddf3>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4614      	mov	r4, r2
 8001f46:	461d      	mov	r5, r3
 8001f48:	4b61      	ldr	r3, [pc, #388]	@ (80020d0 <NLLS+0xe30>)
 8001f4a:	443b      	add	r3, r7
 8001f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f50:	495f      	ldr	r1, [pc, #380]	@ (80020d0 <NLLS+0xe30>)
 8001f52:	4439      	add	r1, r7
 8001f54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f58:	f7fe fb6e 	bl	8000638 <__aeabi_dmul>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4610      	mov	r0, r2
 8001f62:	4619      	mov	r1, r3
 8001f64:	4b5a      	ldr	r3, [pc, #360]	@ (80020d0 <NLLS+0xe30>)
 8001f66:	443b      	add	r3, r7
 8001f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6c:	f7fe fb64 	bl	8000638 <__aeabi_dmul>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4610      	mov	r0, r2
 8001f76:	4619      	mov	r1, r3
 8001f78:	4b57      	ldr	r3, [pc, #348]	@ (80020d8 <NLLS+0xe38>)
 8001f7a:	443b      	add	r3, r7
 8001f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f80:	f7fe fb5a 	bl	8000638 <__aeabi_dmul>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	4610      	mov	r0, r2
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4b52      	ldr	r3, [pc, #328]	@ (80020d8 <NLLS+0xe38>)
 8001f8e:	443b      	add	r3, r7
 8001f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f94:	f7fe fb50 	bl	8000638 <__aeabi_dmul>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4b4f      	ldr	r3, [pc, #316]	@ (80020e0 <NLLS+0xe40>)
 8001fa2:	443b      	add	r3, r7
 8001fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa8:	f7fe fb46 	bl	8000638 <__aeabi_dmul>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4b4a      	ldr	r3, [pc, #296]	@ (80020e0 <NLLS+0xe40>)
 8001fb6:	443b      	add	r3, r7
 8001fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbc:	f7fe fb3c 	bl	8000638 <__aeabi_dmul>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	4629      	mov	r1, r5
 8001fc8:	f7fe fc60 	bl	800088c <__aeabi_ddiv>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fd4:	f7fe f978 	bl	80002c8 <__aeabi_dsub>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4690      	mov	r8, r2
 8001fde:	4699      	mov	r9, r3
 8001fe0:	4b39      	ldr	r3, [pc, #228]	@ (80020c8 <NLLS+0xe28>)
 8001fe2:	443b      	add	r3, r7
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	f507 627c 	add.w	r2, r7, #4032	@ 0xfc0
 8001fec:	f6a2 7284 	subw	r2, r2, #3972	@ 0xf84
 8001ff0:	6812      	ldr	r2, [r2, #0]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff8:	4938      	ldr	r1, [pc, #224]	@ (80020dc <NLLS+0xe3c>)
 8001ffa:	4439      	add	r1, r7
 8001ffc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002000:	f7fe f962 	bl	80002c8 <__aeabi_dsub>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4614      	mov	r4, r2
 800200a:	461d      	mov	r5, r3
 800200c:	4b2e      	ldr	r3, [pc, #184]	@ (80020c8 <NLLS+0xe28>)
 800200e:	443b      	add	r3, r7
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	00da      	lsls	r2, r3, #3
 8002014:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8002018:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4413      	add	r3, r2
 8002020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002024:	492d      	ldr	r1, [pc, #180]	@ (80020dc <NLLS+0xe3c>)
 8002026:	4439      	add	r1, r7
 8002028:	e9d1 0100 	ldrd	r0, r1, [r1]
 800202c:	f7fe f94c 	bl	80002c8 <__aeabi_dsub>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4620      	mov	r0, r4
 8002036:	4629      	mov	r1, r5
 8002038:	f7fe fafe 	bl	8000638 <__aeabi_dmul>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4610      	mov	r0, r2
 8002042:	4619      	mov	r1, r3
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	f7fe f940 	bl	80002cc <__adddf3>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4614      	mov	r4, r2
 8002052:	461d      	mov	r5, r3
 8002054:	4b1e      	ldr	r3, [pc, #120]	@ (80020d0 <NLLS+0xe30>)
 8002056:	443b      	add	r3, r7
 8002058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205c:	491c      	ldr	r1, [pc, #112]	@ (80020d0 <NLLS+0xe30>)
 800205e:	4439      	add	r1, r7
 8002060:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002064:	f7fe fae8 	bl	8000638 <__aeabi_dmul>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4610      	mov	r0, r2
 800206e:	4619      	mov	r1, r3
 8002070:	4b17      	ldr	r3, [pc, #92]	@ (80020d0 <NLLS+0xe30>)
 8002072:	443b      	add	r3, r7
 8002074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002078:	f7fe fade 	bl	8000638 <__aeabi_dmul>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4620      	mov	r0, r4
 8002082:	4629      	mov	r1, r5
 8002084:	f7fe fc02 	bl	800088c <__aeabi_ddiv>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4640      	mov	r0, r8
 800208e:	4649      	mov	r1, r9
 8002090:	f7fe f91a 	bl	80002c8 <__aeabi_dsub>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800209c:	4b11      	ldr	r3, [pc, #68]	@ (80020e4 <NLLS+0xe44>)
 800209e:	443b      	add	r3, r7
 80020a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a4:	490c      	ldr	r1, [pc, #48]	@ (80020d8 <NLLS+0xe38>)
 80020a6:	4439      	add	r1, r7
 80020a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80020ac:	f7fe fac4 	bl	8000638 <__aeabi_dmul>
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	4690      	mov	r8, r2
 80020b6:	4699      	mov	r9, r3
 80020b8:	4b06      	ldr	r3, [pc, #24]	@ (80020d4 <NLLS+0xe34>)
 80020ba:	443b      	add	r3, r7
 80020bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c0:	4909      	ldr	r1, [pc, #36]	@ (80020e8 <NLLS+0xe48>)
 80020c2:	4439      	add	r1, r7
 80020c4:	e012      	b.n	80020ec <NLLS+0xe4c>
 80020c6:	bf00      	nop
 80020c8:	0002df58 	.word	0x0002df58
 80020cc:	0002df90 	.word	0x0002df90
 80020d0:	0002dfb0 	.word	0x0002dfb0
 80020d4:	0002df20 	.word	0x0002df20
 80020d8:	0002dfa8 	.word	0x0002dfa8
 80020dc:	0002df98 	.word	0x0002df98
 80020e0:	0002df08 	.word	0x0002df08
 80020e4:	0002dfa0 	.word	0x0002dfa0
 80020e8:	0002df18 	.word	0x0002df18
 80020ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80020f0:	f7fe faa2 	bl	8000638 <__aeabi_dmul>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4614      	mov	r4, r2
 80020fa:	461d      	mov	r5, r3
 80020fc:	4bb6      	ldr	r3, [pc, #728]	@ (80023d8 <NLLS+0x1138>)
 80020fe:	443b      	add	r3, r7
 8002100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002104:	49b5      	ldr	r1, [pc, #724]	@ (80023dc <NLLS+0x113c>)
 8002106:	4439      	add	r1, r7
 8002108:	e9d1 0100 	ldrd	r0, r1, [r1]
 800210c:	f7fe fa94 	bl	8000638 <__aeabi_dmul>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	4610      	mov	r0, r2
 8002116:	4619      	mov	r1, r3
 8002118:	4bb1      	ldr	r3, [pc, #708]	@ (80023e0 <NLLS+0x1140>)
 800211a:	443b      	add	r3, r7
 800211c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002120:	f7fe fa8a 	bl	8000638 <__aeabi_dmul>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	4620      	mov	r0, r4
 800212a:	4629      	mov	r1, r5
 800212c:	f7fe f8cc 	bl	80002c8 <__aeabi_dsub>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	4640      	mov	r0, r8
 8002136:	4649      	mov	r1, r9
 8002138:	f7fe fa7e 	bl	8000638 <__aeabi_dmul>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	4614      	mov	r4, r2
 8002142:	461d      	mov	r5, r3
 8002144:	4ba7      	ldr	r3, [pc, #668]	@ (80023e4 <NLLS+0x1144>)
 8002146:	443b      	add	r3, r7
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	00da      	lsls	r2, r3, #3
 800214c:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8002150:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4413      	add	r3, r2
 8002158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800215c:	49a2      	ldr	r1, [pc, #648]	@ (80023e8 <NLLS+0x1148>)
 800215e:	4439      	add	r1, r7
 8002160:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002164:	f7fe f8b0 	bl	80002c8 <__aeabi_dsub>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	4620      	mov	r0, r4
 800216e:	4629      	mov	r1, r5
 8002170:	f7fe fa62 	bl	8000638 <__aeabi_dmul>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4690      	mov	r8, r2
 800217a:	4699      	mov	r9, r3
 800217c:	4b9b      	ldr	r3, [pc, #620]	@ (80023ec <NLLS+0x114c>)
 800217e:	443b      	add	r3, r7
 8002180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002184:	499a      	ldr	r1, [pc, #616]	@ (80023f0 <NLLS+0x1150>)
 8002186:	4439      	add	r1, r7
 8002188:	e9d1 0100 	ldrd	r0, r1, [r1]
 800218c:	f7fe fa54 	bl	8000638 <__aeabi_dmul>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4610      	mov	r0, r2
 8002196:	4619      	mov	r1, r3
 8002198:	4b8f      	ldr	r3, [pc, #572]	@ (80023d8 <NLLS+0x1138>)
 800219a:	443b      	add	r3, r7
 800219c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a0:	f7fe fa4a 	bl	8000638 <__aeabi_dmul>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	4614      	mov	r4, r2
 80021aa:	461d      	mov	r5, r3
 80021ac:	4b8d      	ldr	r3, [pc, #564]	@ (80023e4 <NLLS+0x1144>)
 80021ae:	443b      	add	r3, r7
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	00da      	lsls	r2, r3, #3
 80021b4:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80021b8:	f6a3 738c 	subw	r3, r3, #3980	@ 0xf8c
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4413      	add	r3, r2
 80021c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c4:	498b      	ldr	r1, [pc, #556]	@ (80023f4 <NLLS+0x1154>)
 80021c6:	4439      	add	r1, r7
 80021c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021cc:	f7fe f87c 	bl	80002c8 <__aeabi_dsub>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	4620      	mov	r0, r4
 80021d6:	4629      	mov	r1, r5
 80021d8:	f7fe fa2e 	bl	8000638 <__aeabi_dmul>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4640      	mov	r0, r8
 80021e2:	4649      	mov	r1, r9
 80021e4:	f7fe f872 	bl	80002cc <__adddf3>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4690      	mov	r8, r2
 80021ee:	4699      	mov	r9, r3
 80021f0:	4b81      	ldr	r3, [pc, #516]	@ (80023f8 <NLLS+0x1158>)
 80021f2:	443b      	add	r3, r7
 80021f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f8:	497d      	ldr	r1, [pc, #500]	@ (80023f0 <NLLS+0x1150>)
 80021fa:	4439      	add	r1, r7
 80021fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002200:	f7fe fa1a 	bl	8000638 <__aeabi_dmul>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4610      	mov	r0, r2
 800220a:	4619      	mov	r1, r3
 800220c:	4b7b      	ldr	r3, [pc, #492]	@ (80023fc <NLLS+0x115c>)
 800220e:	443b      	add	r3, r7
 8002210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002214:	f7fe fa10 	bl	8000638 <__aeabi_dmul>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4614      	mov	r4, r2
 800221e:	461d      	mov	r5, r3
 8002220:	4b70      	ldr	r3, [pc, #448]	@ (80023e4 <NLLS+0x1144>)
 8002222:	443b      	add	r3, r7
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	00da      	lsls	r2, r3, #3
 8002228:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800222c:	f6a3 7388 	subw	r3, r3, #3976	@ 0xf88
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4413      	add	r3, r2
 8002234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002238:	4971      	ldr	r1, [pc, #452]	@ (8002400 <NLLS+0x1160>)
 800223a:	4439      	add	r1, r7
 800223c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002240:	f7fe f842 	bl	80002c8 <__aeabi_dsub>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	4620      	mov	r0, r4
 800224a:	4629      	mov	r1, r5
 800224c:	f7fe f9f4 	bl	8000638 <__aeabi_dmul>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	4640      	mov	r0, r8
 8002256:	4649      	mov	r1, r9
 8002258:	f7fe f836 	bl	80002c8 <__aeabi_dsub>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4692      	mov	sl, r2
 8002262:	469b      	mov	fp, r3
 8002264:	4b64      	ldr	r3, [pc, #400]	@ (80023f8 <NLLS+0x1158>)
 8002266:	443b      	add	r3, r7
 8002268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226c:	495f      	ldr	r1, [pc, #380]	@ (80023ec <NLLS+0x114c>)
 800226e:	4439      	add	r1, r7
 8002270:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002274:	f7fe f9e0 	bl	8000638 <__aeabi_dmul>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	4690      	mov	r8, r2
 800227e:	4699      	mov	r9, r3
 8002280:	4b60      	ldr	r3, [pc, #384]	@ (8002404 <NLLS+0x1164>)
 8002282:	443b      	add	r3, r7
 8002284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002288:	495c      	ldr	r1, [pc, #368]	@ (80023fc <NLLS+0x115c>)
 800228a:	4439      	add	r1, r7
 800228c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002290:	f7fe f9d2 	bl	8000638 <__aeabi_dmul>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	4614      	mov	r4, r2
 800229a:	461d      	mov	r5, r3
 800229c:	4b4e      	ldr	r3, [pc, #312]	@ (80023d8 <NLLS+0x1138>)
 800229e:	443b      	add	r3, r7
 80022a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a4:	494d      	ldr	r1, [pc, #308]	@ (80023dc <NLLS+0x113c>)
 80022a6:	4439      	add	r1, r7
 80022a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022ac:	f7fe f9c4 	bl	8000638 <__aeabi_dmul>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4610      	mov	r0, r2
 80022b6:	4619      	mov	r1, r3
 80022b8:	4b49      	ldr	r3, [pc, #292]	@ (80023e0 <NLLS+0x1140>)
 80022ba:	443b      	add	r3, r7
 80022bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c0:	f7fe f9ba 	bl	8000638 <__aeabi_dmul>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	4620      	mov	r0, r4
 80022ca:	4629      	mov	r1, r5
 80022cc:	f7fd fffc 	bl	80002c8 <__aeabi_dsub>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4640      	mov	r0, r8
 80022d6:	4649      	mov	r1, r9
 80022d8:	f7fe f9ae 	bl	8000638 <__aeabi_dmul>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4614      	mov	r4, r2
 80022e2:	461d      	mov	r5, r3
 80022e4:	4b3f      	ldr	r3, [pc, #252]	@ (80023e4 <NLLS+0x1144>)
 80022e6:	443b      	add	r3, r7
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	00da      	lsls	r2, r3, #3
 80022ec:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80022f0:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4413      	add	r3, r2
 80022f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fc:	493a      	ldr	r1, [pc, #232]	@ (80023e8 <NLLS+0x1148>)
 80022fe:	4439      	add	r1, r7
 8002300:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002304:	f7fd ffe0 	bl	80002c8 <__aeabi_dsub>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4620      	mov	r0, r4
 800230e:	4629      	mov	r1, r5
 8002310:	f7fe f992 	bl	8000638 <__aeabi_dmul>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4690      	mov	r8, r2
 800231a:	4699      	mov	r9, r3
 800231c:	4b33      	ldr	r3, [pc, #204]	@ (80023ec <NLLS+0x114c>)
 800231e:	443b      	add	r3, r7
 8002320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002324:	4932      	ldr	r1, [pc, #200]	@ (80023f0 <NLLS+0x1150>)
 8002326:	4439      	add	r1, r7
 8002328:	e9d1 0100 	ldrd	r0, r1, [r1]
 800232c:	f7fe f984 	bl	8000638 <__aeabi_dmul>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4610      	mov	r0, r2
 8002336:	4619      	mov	r1, r3
 8002338:	4b27      	ldr	r3, [pc, #156]	@ (80023d8 <NLLS+0x1138>)
 800233a:	443b      	add	r3, r7
 800233c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002340:	f7fe f97a 	bl	8000638 <__aeabi_dmul>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4614      	mov	r4, r2
 800234a:	461d      	mov	r5, r3
 800234c:	4b25      	ldr	r3, [pc, #148]	@ (80023e4 <NLLS+0x1144>)
 800234e:	443b      	add	r3, r7
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	00da      	lsls	r2, r3, #3
 8002354:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8002358:	f6a3 738c 	subw	r3, r3, #3980	@ 0xf8c
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4413      	add	r3, r2
 8002360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002364:	4923      	ldr	r1, [pc, #140]	@ (80023f4 <NLLS+0x1154>)
 8002366:	4439      	add	r1, r7
 8002368:	e9d1 0100 	ldrd	r0, r1, [r1]
 800236c:	f7fd ffac 	bl	80002c8 <__aeabi_dsub>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	4620      	mov	r0, r4
 8002376:	4629      	mov	r1, r5
 8002378:	f7fe f95e 	bl	8000638 <__aeabi_dmul>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	4640      	mov	r0, r8
 8002382:	4649      	mov	r1, r9
 8002384:	f7fd ffa2 	bl	80002cc <__adddf3>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4690      	mov	r8, r2
 800238e:	4699      	mov	r9, r3
 8002390:	4b19      	ldr	r3, [pc, #100]	@ (80023f8 <NLLS+0x1158>)
 8002392:	443b      	add	r3, r7
 8002394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002398:	4915      	ldr	r1, [pc, #84]	@ (80023f0 <NLLS+0x1150>)
 800239a:	4439      	add	r1, r7
 800239c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80023a0:	f7fe f94a 	bl	8000638 <__aeabi_dmul>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	4610      	mov	r0, r2
 80023aa:	4619      	mov	r1, r3
 80023ac:	4b13      	ldr	r3, [pc, #76]	@ (80023fc <NLLS+0x115c>)
 80023ae:	443b      	add	r3, r7
 80023b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b4:	f7fe f940 	bl	8000638 <__aeabi_dmul>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4614      	mov	r4, r2
 80023be:	461d      	mov	r5, r3
 80023c0:	4b08      	ldr	r3, [pc, #32]	@ (80023e4 <NLLS+0x1144>)
 80023c2:	443b      	add	r3, r7
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	00da      	lsls	r2, r3, #3
 80023c8:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80023cc:	f6a3 7388 	subw	r3, r3, #3976	@ 0xf88
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4413      	add	r3, r2
 80023d4:	e018      	b.n	8002408 <NLLS+0x1168>
 80023d6:	bf00      	nop
 80023d8:	0002df08 	.word	0x0002df08
 80023dc:	0002df00 	.word	0x0002df00
 80023e0:	0002df28 	.word	0x0002df28
 80023e4:	0002df58 	.word	0x0002df58
 80023e8:	0002df98 	.word	0x0002df98
 80023ec:	0002dfa8 	.word	0x0002dfa8
 80023f0:	0002dfb0 	.word	0x0002dfb0
 80023f4:	0002df88 	.word	0x0002df88
 80023f8:	0002dfa0 	.word	0x0002dfa0
 80023fc:	0002df18 	.word	0x0002df18
 8002400:	0002df90 	.word	0x0002df90
 8002404:	0002df20 	.word	0x0002df20
 8002408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240c:	49b7      	ldr	r1, [pc, #732]	@ (80026ec <NLLS+0x144c>)
 800240e:	4439      	add	r1, r7
 8002410:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002414:	f7fd ff58 	bl	80002c8 <__aeabi_dsub>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4620      	mov	r0, r4
 800241e:	4629      	mov	r1, r5
 8002420:	f7fe f90a 	bl	8000638 <__aeabi_dmul>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4640      	mov	r0, r8
 800242a:	4649      	mov	r1, r9
 800242c:	f7fd ff4c 	bl	80002c8 <__aeabi_dsub>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	4650      	mov	r0, sl
 8002436:	4659      	mov	r1, fp
 8002438:	f7fe f8fe 	bl	8000638 <__aeabi_dmul>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	4610      	mov	r0, r2
 8002442:	4619      	mov	r1, r3
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	f7fd ff40 	bl	80002cc <__adddf3>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4614      	mov	r4, r2
 8002452:	461d      	mov	r5, r3
 8002454:	4ba6      	ldr	r3, [pc, #664]	@ (80026f0 <NLLS+0x1450>)
 8002456:	443b      	add	r3, r7
 8002458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245c:	49a4      	ldr	r1, [pc, #656]	@ (80026f0 <NLLS+0x1450>)
 800245e:	4439      	add	r1, r7
 8002460:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002464:	f7fe f8e8 	bl	8000638 <__aeabi_dmul>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	4610      	mov	r0, r2
 800246e:	4619      	mov	r1, r3
 8002470:	4b9f      	ldr	r3, [pc, #636]	@ (80026f0 <NLLS+0x1450>)
 8002472:	443b      	add	r3, r7
 8002474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002478:	f7fe f8de 	bl	8000638 <__aeabi_dmul>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	4b9b      	ldr	r3, [pc, #620]	@ (80026f4 <NLLS+0x1454>)
 8002486:	443b      	add	r3, r7
 8002488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248c:	f7fe f8d4 	bl	8000638 <__aeabi_dmul>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4610      	mov	r0, r2
 8002496:	4619      	mov	r1, r3
 8002498:	4b96      	ldr	r3, [pc, #600]	@ (80026f4 <NLLS+0x1454>)
 800249a:	443b      	add	r3, r7
 800249c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a0:	f7fe f8ca 	bl	8000638 <__aeabi_dmul>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4610      	mov	r0, r2
 80024aa:	4619      	mov	r1, r3
 80024ac:	4b92      	ldr	r3, [pc, #584]	@ (80026f8 <NLLS+0x1458>)
 80024ae:	443b      	add	r3, r7
 80024b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b4:	f7fe f8c0 	bl	8000638 <__aeabi_dmul>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4610      	mov	r0, r2
 80024be:	4619      	mov	r1, r3
 80024c0:	4b8d      	ldr	r3, [pc, #564]	@ (80026f8 <NLLS+0x1458>)
 80024c2:	443b      	add	r3, r7
 80024c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c8:	f7fe f8b6 	bl	8000638 <__aeabi_dmul>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4610      	mov	r0, r2
 80024d2:	4619      	mov	r1, r3
 80024d4:	4b89      	ldr	r3, [pc, #548]	@ (80026fc <NLLS+0x145c>)
 80024d6:	443b      	add	r3, r7
 80024d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024dc:	f7fe f8ac 	bl	8000638 <__aeabi_dmul>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4610      	mov	r0, r2
 80024e6:	4619      	mov	r1, r3
 80024e8:	4b84      	ldr	r3, [pc, #528]	@ (80026fc <NLLS+0x145c>)
 80024ea:	443b      	add	r3, r7
 80024ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f0:	f7fe f8a2 	bl	8000638 <__aeabi_dmul>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	4b80      	ldr	r3, [pc, #512]	@ (8002700 <NLLS+0x1460>)
 80024fe:	443b      	add	r3, r7
 8002500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002504:	f7fe f898 	bl	8000638 <__aeabi_dmul>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	4610      	mov	r0, r2
 800250e:	4619      	mov	r1, r3
 8002510:	4b7b      	ldr	r3, [pc, #492]	@ (8002700 <NLLS+0x1460>)
 8002512:	443b      	add	r3, r7
 8002514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002518:	f7fe f88e 	bl	8000638 <__aeabi_dmul>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4610      	mov	r0, r2
 8002522:	4619      	mov	r1, r3
 8002524:	4b77      	ldr	r3, [pc, #476]	@ (8002704 <NLLS+0x1464>)
 8002526:	443b      	add	r3, r7
 8002528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252c:	f7fe f884 	bl	8000638 <__aeabi_dmul>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4610      	mov	r0, r2
 8002536:	4619      	mov	r1, r3
 8002538:	4b72      	ldr	r3, [pc, #456]	@ (8002704 <NLLS+0x1464>)
 800253a:	443b      	add	r3, r7
 800253c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002540:	f7fe f87a 	bl	8000638 <__aeabi_dmul>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4620      	mov	r0, r4
 800254a:	4629      	mov	r1, r5
 800254c:	f7fe f99e 	bl	800088c <__aeabi_ddiv>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002558:	f7fd feb6 	bl	80002c8 <__aeabi_dsub>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002564:	4b67      	ldr	r3, [pc, #412]	@ (8002704 <NLLS+0x1464>)
 8002566:	443b      	add	r3, r7
 8002568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256c:	4961      	ldr	r1, [pc, #388]	@ (80026f4 <NLLS+0x1454>)
 800256e:	4439      	add	r1, r7
 8002570:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002574:	f7fe f860 	bl	8000638 <__aeabi_dmul>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4614      	mov	r4, r2
 800257e:	461d      	mov	r5, r3
 8002580:	4b61      	ldr	r3, [pc, #388]	@ (8002708 <NLLS+0x1468>)
 8002582:	443b      	add	r3, r7
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	00da      	lsls	r2, r3, #3
 8002588:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800258c:	f6a3 738c 	subw	r3, r3, #3980	@ 0xf8c
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4413      	add	r3, r2
 8002594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002598:	495c      	ldr	r1, [pc, #368]	@ (800270c <NLLS+0x146c>)
 800259a:	4439      	add	r1, r7
 800259c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025a0:	f7fd fe92 	bl	80002c8 <__aeabi_dsub>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4620      	mov	r0, r4
 80025aa:	4629      	mov	r1, r5
 80025ac:	f7fe f844 	bl	8000638 <__aeabi_dmul>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	4690      	mov	r8, r2
 80025b6:	4699      	mov	r9, r3
 80025b8:	4b55      	ldr	r3, [pc, #340]	@ (8002710 <NLLS+0x1470>)
 80025ba:	443b      	add	r3, r7
 80025bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c0:	494d      	ldr	r1, [pc, #308]	@ (80026f8 <NLLS+0x1458>)
 80025c2:	4439      	add	r1, r7
 80025c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025c8:	f7fe f836 	bl	8000638 <__aeabi_dmul>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4614      	mov	r4, r2
 80025d2:	461d      	mov	r5, r3
 80025d4:	4b4c      	ldr	r3, [pc, #304]	@ (8002708 <NLLS+0x1468>)
 80025d6:	443b      	add	r3, r7
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	00da      	lsls	r2, r3, #3
 80025dc:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80025e0:	f6a3 7388 	subw	r3, r3, #3976	@ 0xf88
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4413      	add	r3, r2
 80025e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ec:	493f      	ldr	r1, [pc, #252]	@ (80026ec <NLLS+0x144c>)
 80025ee:	4439      	add	r1, r7
 80025f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025f4:	f7fd fe68 	bl	80002c8 <__aeabi_dsub>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	4620      	mov	r0, r4
 80025fe:	4629      	mov	r1, r5
 8002600:	f7fe f81a 	bl	8000638 <__aeabi_dmul>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4640      	mov	r0, r8
 800260a:	4649      	mov	r1, r9
 800260c:	f7fd fe5c 	bl	80002c8 <__aeabi_dsub>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	4610      	mov	r0, r2
 8002616:	4619      	mov	r1, r3
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	f7fd fe56 	bl	80002cc <__adddf3>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4692      	mov	sl, r2
 8002626:	469b      	mov	fp, r3
 8002628:	4b33      	ldr	r3, [pc, #204]	@ (80026f8 <NLLS+0x1458>)
 800262a:	443b      	add	r3, r7
 800262c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002630:	4930      	ldr	r1, [pc, #192]	@ (80026f4 <NLLS+0x1454>)
 8002632:	4439      	add	r1, r7
 8002634:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002638:	f7fd fffe 	bl	8000638 <__aeabi_dmul>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	4690      	mov	r8, r2
 8002642:	4699      	mov	r9, r3
 8002644:	4b33      	ldr	r3, [pc, #204]	@ (8002714 <NLLS+0x1474>)
 8002646:	443b      	add	r3, r7
 8002648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264c:	4930      	ldr	r1, [pc, #192]	@ (8002710 <NLLS+0x1470>)
 800264e:	4439      	add	r1, r7
 8002650:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002654:	f7fd fff0 	bl	8000638 <__aeabi_dmul>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	4614      	mov	r4, r2
 800265e:	461d      	mov	r5, r3
 8002660:	4b28      	ldr	r3, [pc, #160]	@ (8002704 <NLLS+0x1464>)
 8002662:	443b      	add	r3, r7
 8002664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002668:	4924      	ldr	r1, [pc, #144]	@ (80026fc <NLLS+0x145c>)
 800266a:	4439      	add	r1, r7
 800266c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002670:	f7fd ffe2 	bl	8000638 <__aeabi_dmul>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4610      	mov	r0, r2
 800267a:	4619      	mov	r1, r3
 800267c:	4b26      	ldr	r3, [pc, #152]	@ (8002718 <NLLS+0x1478>)
 800267e:	443b      	add	r3, r7
 8002680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002684:	f7fd ffd8 	bl	8000638 <__aeabi_dmul>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4620      	mov	r0, r4
 800268e:	4629      	mov	r1, r5
 8002690:	f7fd fe1a 	bl	80002c8 <__aeabi_dsub>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4640      	mov	r0, r8
 800269a:	4649      	mov	r1, r9
 800269c:	f7fd ffcc 	bl	8000638 <__aeabi_dmul>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4614      	mov	r4, r2
 80026a6:	461d      	mov	r5, r3
 80026a8:	4b17      	ldr	r3, [pc, #92]	@ (8002708 <NLLS+0x1468>)
 80026aa:	443b      	add	r3, r7
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	00da      	lsls	r2, r3, #3
 80026b0:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80026b4:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4413      	add	r3, r2
 80026bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c0:	4916      	ldr	r1, [pc, #88]	@ (800271c <NLLS+0x147c>)
 80026c2:	4439      	add	r1, r7
 80026c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026c8:	f7fd fdfe 	bl	80002c8 <__aeabi_dsub>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	4620      	mov	r0, r4
 80026d2:	4629      	mov	r1, r5
 80026d4:	f7fd ffb0 	bl	8000638 <__aeabi_dmul>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	4690      	mov	r8, r2
 80026de:	4699      	mov	r9, r3
 80026e0:	4b04      	ldr	r3, [pc, #16]	@ (80026f4 <NLLS+0x1454>)
 80026e2:	443b      	add	r3, r7
 80026e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e8:	e01a      	b.n	8002720 <NLLS+0x1480>
 80026ea:	bf00      	nop
 80026ec:	0002df90 	.word	0x0002df90
 80026f0:	0002dfb0 	.word	0x0002dfb0
 80026f4:	0002dfa8 	.word	0x0002dfa8
 80026f8:	0002dfa0 	.word	0x0002dfa0
 80026fc:	0002df00 	.word	0x0002df00
 8002700:	0002df10 	.word	0x0002df10
 8002704:	0002df08 	.word	0x0002df08
 8002708:	0002df58 	.word	0x0002df58
 800270c:	0002df88 	.word	0x0002df88
 8002710:	0002df18 	.word	0x0002df18
 8002714:	0002df20 	.word	0x0002df20
 8002718:	0002df28 	.word	0x0002df28
 800271c:	0002df98 	.word	0x0002df98
 8002720:	49b4      	ldr	r1, [pc, #720]	@ (80029f4 <NLLS+0x1754>)
 8002722:	4439      	add	r1, r7
 8002724:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002728:	f7fd ff86 	bl	8000638 <__aeabi_dmul>
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	4610      	mov	r0, r2
 8002732:	4619      	mov	r1, r3
 8002734:	4bb0      	ldr	r3, [pc, #704]	@ (80029f8 <NLLS+0x1758>)
 8002736:	443b      	add	r3, r7
 8002738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273c:	f7fd ff7c 	bl	8000638 <__aeabi_dmul>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4614      	mov	r4, r2
 8002746:	461d      	mov	r5, r3
 8002748:	4bac      	ldr	r3, [pc, #688]	@ (80029fc <NLLS+0x175c>)
 800274a:	443b      	add	r3, r7
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	00da      	lsls	r2, r3, #3
 8002750:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8002754:	f6a3 738c 	subw	r3, r3, #3980	@ 0xf8c
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4413      	add	r3, r2
 800275c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002760:	49a7      	ldr	r1, [pc, #668]	@ (8002a00 <NLLS+0x1760>)
 8002762:	4439      	add	r1, r7
 8002764:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002768:	f7fd fdae 	bl	80002c8 <__aeabi_dsub>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4620      	mov	r0, r4
 8002772:	4629      	mov	r1, r5
 8002774:	f7fd ff60 	bl	8000638 <__aeabi_dmul>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	4640      	mov	r0, r8
 800277e:	4649      	mov	r1, r9
 8002780:	f7fd fda4 	bl	80002cc <__adddf3>
 8002784:	4602      	mov	r2, r0
 8002786:	460b      	mov	r3, r1
 8002788:	4690      	mov	r8, r2
 800278a:	4699      	mov	r9, r3
 800278c:	4b9d      	ldr	r3, [pc, #628]	@ (8002a04 <NLLS+0x1764>)
 800278e:	443b      	add	r3, r7
 8002790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002794:	4997      	ldr	r1, [pc, #604]	@ (80029f4 <NLLS+0x1754>)
 8002796:	4439      	add	r1, r7
 8002798:	e9d1 0100 	ldrd	r0, r1, [r1]
 800279c:	f7fd ff4c 	bl	8000638 <__aeabi_dmul>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4610      	mov	r0, r2
 80027a6:	4619      	mov	r1, r3
 80027a8:	4b97      	ldr	r3, [pc, #604]	@ (8002a08 <NLLS+0x1768>)
 80027aa:	443b      	add	r3, r7
 80027ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b0:	f7fd ff42 	bl	8000638 <__aeabi_dmul>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4614      	mov	r4, r2
 80027ba:	461d      	mov	r5, r3
 80027bc:	4b8f      	ldr	r3, [pc, #572]	@ (80029fc <NLLS+0x175c>)
 80027be:	443b      	add	r3, r7
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	00da      	lsls	r2, r3, #3
 80027c4:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80027c8:	f6a3 7388 	subw	r3, r3, #3976	@ 0xf88
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4413      	add	r3, r2
 80027d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d4:	498d      	ldr	r1, [pc, #564]	@ (8002a0c <NLLS+0x176c>)
 80027d6:	4439      	add	r1, r7
 80027d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80027dc:	f7fd fd74 	bl	80002c8 <__aeabi_dsub>
 80027e0:	4602      	mov	r2, r0
 80027e2:	460b      	mov	r3, r1
 80027e4:	4620      	mov	r0, r4
 80027e6:	4629      	mov	r1, r5
 80027e8:	f7fd ff26 	bl	8000638 <__aeabi_dmul>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	4640      	mov	r0, r8
 80027f2:	4649      	mov	r1, r9
 80027f4:	f7fd fd68 	bl	80002c8 <__aeabi_dsub>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4650      	mov	r0, sl
 80027fe:	4659      	mov	r1, fp
 8002800:	f7fd ff1a 	bl	8000638 <__aeabi_dmul>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4614      	mov	r4, r2
 800280a:	461d      	mov	r5, r3
 800280c:	4b79      	ldr	r3, [pc, #484]	@ (80029f4 <NLLS+0x1754>)
 800280e:	443b      	add	r3, r7
 8002810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002814:	4977      	ldr	r1, [pc, #476]	@ (80029f4 <NLLS+0x1754>)
 8002816:	4439      	add	r1, r7
 8002818:	e9d1 0100 	ldrd	r0, r1, [r1]
 800281c:	f7fd ff0c 	bl	8000638 <__aeabi_dmul>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4610      	mov	r0, r2
 8002826:	4619      	mov	r1, r3
 8002828:	4b79      	ldr	r3, [pc, #484]	@ (8002a10 <NLLS+0x1770>)
 800282a:	443b      	add	r3, r7
 800282c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002830:	f7fd ff02 	bl	8000638 <__aeabi_dmul>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	4610      	mov	r0, r2
 800283a:	4619      	mov	r1, r3
 800283c:	4b74      	ldr	r3, [pc, #464]	@ (8002a10 <NLLS+0x1770>)
 800283e:	443b      	add	r3, r7
 8002840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002844:	f7fd fef8 	bl	8000638 <__aeabi_dmul>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	4610      	mov	r0, r2
 800284e:	4619      	mov	r1, r3
 8002850:	4b6c      	ldr	r3, [pc, #432]	@ (8002a04 <NLLS+0x1764>)
 8002852:	443b      	add	r3, r7
 8002854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002858:	f7fd feee 	bl	8000638 <__aeabi_dmul>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	4610      	mov	r0, r2
 8002862:	4619      	mov	r1, r3
 8002864:	4b67      	ldr	r3, [pc, #412]	@ (8002a04 <NLLS+0x1764>)
 8002866:	443b      	add	r3, r7
 8002868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286c:	f7fd fee4 	bl	8000638 <__aeabi_dmul>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4610      	mov	r0, r2
 8002876:	4619      	mov	r1, r3
 8002878:	4b66      	ldr	r3, [pc, #408]	@ (8002a14 <NLLS+0x1774>)
 800287a:	443b      	add	r3, r7
 800287c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002880:	f7fd feda 	bl	8000638 <__aeabi_dmul>
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	4610      	mov	r0, r2
 800288a:	4619      	mov	r1, r3
 800288c:	4b61      	ldr	r3, [pc, #388]	@ (8002a14 <NLLS+0x1774>)
 800288e:	443b      	add	r3, r7
 8002890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002894:	f7fd fed0 	bl	8000638 <__aeabi_dmul>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4610      	mov	r0, r2
 800289e:	4619      	mov	r1, r3
 80028a0:	4b5d      	ldr	r3, [pc, #372]	@ (8002a18 <NLLS+0x1778>)
 80028a2:	443b      	add	r3, r7
 80028a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a8:	f7fd fec6 	bl	8000638 <__aeabi_dmul>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4610      	mov	r0, r2
 80028b2:	4619      	mov	r1, r3
 80028b4:	4b58      	ldr	r3, [pc, #352]	@ (8002a18 <NLLS+0x1778>)
 80028b6:	443b      	add	r3, r7
 80028b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028bc:	f7fd febc 	bl	8000638 <__aeabi_dmul>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4610      	mov	r0, r2
 80028c6:	4619      	mov	r1, r3
 80028c8:	4b4b      	ldr	r3, [pc, #300]	@ (80029f8 <NLLS+0x1758>)
 80028ca:	443b      	add	r3, r7
 80028cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d0:	f7fd feb2 	bl	8000638 <__aeabi_dmul>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4610      	mov	r0, r2
 80028da:	4619      	mov	r1, r3
 80028dc:	4b46      	ldr	r3, [pc, #280]	@ (80029f8 <NLLS+0x1758>)
 80028de:	443b      	add	r3, r7
 80028e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e4:	f7fd fea8 	bl	8000638 <__aeabi_dmul>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	4620      	mov	r0, r4
 80028ee:	4629      	mov	r1, r5
 80028f0:	f7fd ffcc 	bl	800088c <__aeabi_ddiv>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028fc:	f7fd fce6 	bl	80002cc <__adddf3>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4945      	ldr	r1, [pc, #276]	@ (8002a1c <NLLS+0x177c>)
 8002906:	4439      	add	r1, r7
 8002908:	f5a1 70d8 	sub.w	r0, r1, #432	@ 0x1b0
 800290c:	493b      	ldr	r1, [pc, #236]	@ (80029fc <NLLS+0x175c>)
 800290e:	4439      	add	r1, r7
 8002910:	6809      	ldr	r1, [r1, #0]
 8002912:	00c9      	lsls	r1, r1, #3
 8002914:	4401      	add	r1, r0
 8002916:	e9c1 2300 	strd	r2, r3, [r1]

            mat_H[1][i] = -(2*(by - my[i])*(by*sx*sz*sin_lambda*sin_lambda - my[i]*sx*sz*sin_lambda*sin_lambda + by*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - my[i]*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - bz*sx*sy*cos_rho*sin_lambda + mz[i]*sx*sy*cos_rho*sin_lambda - bx*sy*sz*sin_lambda*sin_lambda*sin_rho + mx[i]*sy*sz*sin_lambda*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + mx[i]*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + bx*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi - mx[i]*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi))/(sx*(sy*sy*sy)*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 800291a:	4b38      	ldr	r3, [pc, #224]	@ (80029fc <NLLS+0x175c>)
 800291c:	443b      	add	r3, r7
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	f507 627c 	add.w	r2, r7, #4032	@ 0xfc0
 8002926:	f6a2 7288 	subw	r2, r2, #3976	@ 0xf88
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	4413      	add	r3, r2
 800292e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002932:	4936      	ldr	r1, [pc, #216]	@ (8002a0c <NLLS+0x176c>)
 8002934:	4439      	add	r1, r7
 8002936:	e9d1 0100 	ldrd	r0, r1, [r1]
 800293a:	f7fd fcc5 	bl	80002c8 <__aeabi_dsub>
 800293e:	4602      	mov	r2, r0
 8002940:	460b      	mov	r3, r1
 8002942:	4610      	mov	r0, r2
 8002944:	4619      	mov	r1, r3
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	f7fd fcbf 	bl	80002cc <__adddf3>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	4690      	mov	r8, r2
 8002954:	4699      	mov	r9, r3
 8002956:	4b27      	ldr	r3, [pc, #156]	@ (80029f4 <NLLS+0x1754>)
 8002958:	443b      	add	r3, r7
 800295a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295e:	492b      	ldr	r1, [pc, #172]	@ (8002a0c <NLLS+0x176c>)
 8002960:	4439      	add	r1, r7
 8002962:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002966:	f7fd fe67 	bl	8000638 <__aeabi_dmul>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	4610      	mov	r0, r2
 8002970:	4619      	mov	r1, r3
 8002972:	4b24      	ldr	r3, [pc, #144]	@ (8002a04 <NLLS+0x1764>)
 8002974:	443b      	add	r3, r7
 8002976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297a:	f7fd fe5d 	bl	8000638 <__aeabi_dmul>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	4610      	mov	r0, r2
 8002984:	4619      	mov	r1, r3
 8002986:	4b20      	ldr	r3, [pc, #128]	@ (8002a08 <NLLS+0x1768>)
 8002988:	443b      	add	r3, r7
 800298a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298e:	f7fd fe53 	bl	8000638 <__aeabi_dmul>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	4610      	mov	r0, r2
 8002998:	4619      	mov	r1, r3
 800299a:	4b1b      	ldr	r3, [pc, #108]	@ (8002a08 <NLLS+0x1768>)
 800299c:	443b      	add	r3, r7
 800299e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a2:	f7fd fe49 	bl	8000638 <__aeabi_dmul>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4614      	mov	r4, r2
 80029ac:	461d      	mov	r5, r3
 80029ae:	4b13      	ldr	r3, [pc, #76]	@ (80029fc <NLLS+0x175c>)
 80029b0:	443b      	add	r3, r7
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	00da      	lsls	r2, r3, #3
 80029b6:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80029ba:	f6a3 7388 	subw	r3, r3, #3976	@ 0xf88
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4413      	add	r3, r2
 80029c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029c6:	4b0b      	ldr	r3, [pc, #44]	@ (80029f4 <NLLS+0x1754>)
 80029c8:	443b      	add	r3, r7
 80029ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ce:	f7fd fe33 	bl	8000638 <__aeabi_dmul>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	4610      	mov	r0, r2
 80029d8:	4619      	mov	r1, r3
 80029da:	4b0a      	ldr	r3, [pc, #40]	@ (8002a04 <NLLS+0x1764>)
 80029dc:	443b      	add	r3, r7
 80029de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e2:	f7fd fe29 	bl	8000638 <__aeabi_dmul>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	4610      	mov	r0, r2
 80029ec:	4619      	mov	r1, r3
 80029ee:	4b06      	ldr	r3, [pc, #24]	@ (8002a08 <NLLS+0x1768>)
 80029f0:	443b      	add	r3, r7
 80029f2:	e015      	b.n	8002a20 <NLLS+0x1780>
 80029f4:	0002dfb0 	.word	0x0002dfb0
 80029f8:	0002df08 	.word	0x0002df08
 80029fc:	0002df58 	.word	0x0002df58
 8002a00:	0002df88 	.word	0x0002df88
 8002a04:	0002dfa0 	.word	0x0002dfa0
 8002a08:	0002df18 	.word	0x0002df18
 8002a0c:	0002df90 	.word	0x0002df90
 8002a10:	0002dfa8 	.word	0x0002dfa8
 8002a14:	0002df00 	.word	0x0002df00
 8002a18:	0002df10 	.word	0x0002df10
 8002a1c:	00013fc0 	.word	0x00013fc0
 8002a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a24:	f7fd fe08 	bl	8000638 <__aeabi_dmul>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4bb6      	ldr	r3, [pc, #728]	@ (8002d0c <NLLS+0x1a6c>)
 8002a32:	443b      	add	r3, r7
 8002a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a38:	f7fd fdfe 	bl	8000638 <__aeabi_dmul>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4620      	mov	r0, r4
 8002a42:	4629      	mov	r1, r5
 8002a44:	f7fd fc40 	bl	80002c8 <__aeabi_dsub>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4614      	mov	r4, r2
 8002a4e:	461d      	mov	r5, r3
 8002a50:	4baf      	ldr	r3, [pc, #700]	@ (8002d10 <NLLS+0x1a70>)
 8002a52:	443b      	add	r3, r7
 8002a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a58:	49ae      	ldr	r1, [pc, #696]	@ (8002d14 <NLLS+0x1a74>)
 8002a5a:	4439      	add	r1, r7
 8002a5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a60:	f7fd fdea 	bl	8000638 <__aeabi_dmul>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4610      	mov	r0, r2
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4baa      	ldr	r3, [pc, #680]	@ (8002d18 <NLLS+0x1a78>)
 8002a6e:	443b      	add	r3, r7
 8002a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a74:	f7fd fde0 	bl	8000638 <__aeabi_dmul>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4ba6      	ldr	r3, [pc, #664]	@ (8002d1c <NLLS+0x1a7c>)
 8002a82:	443b      	add	r3, r7
 8002a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a88:	f7fd fdd6 	bl	8000638 <__aeabi_dmul>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4610      	mov	r0, r2
 8002a92:	4619      	mov	r1, r3
 8002a94:	4ba1      	ldr	r3, [pc, #644]	@ (8002d1c <NLLS+0x1a7c>)
 8002a96:	443b      	add	r3, r7
 8002a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9c:	f7fd fdcc 	bl	8000638 <__aeabi_dmul>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4610      	mov	r0, r2
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4b9d      	ldr	r3, [pc, #628]	@ (8002d20 <NLLS+0x1a80>)
 8002aaa:	443b      	add	r3, r7
 8002aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab0:	f7fd fdc2 	bl	8000638 <__aeabi_dmul>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	4610      	mov	r0, r2
 8002aba:	4619      	mov	r1, r3
 8002abc:	4b98      	ldr	r3, [pc, #608]	@ (8002d20 <NLLS+0x1a80>)
 8002abe:	443b      	add	r3, r7
 8002ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac4:	f7fd fdb8 	bl	8000638 <__aeabi_dmul>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4620      	mov	r0, r4
 8002ace:	4629      	mov	r1, r5
 8002ad0:	f7fd fbfc 	bl	80002cc <__adddf3>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4614      	mov	r4, r2
 8002ada:	461d      	mov	r5, r3
 8002adc:	4b91      	ldr	r3, [pc, #580]	@ (8002d24 <NLLS+0x1a84>)
 8002ade:	443b      	add	r3, r7
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	00da      	lsls	r2, r3, #3
 8002ae4:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8002ae8:	f6a3 7388 	subw	r3, r3, #3976	@ 0xf88
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4413      	add	r3, r2
 8002af0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002af4:	4b86      	ldr	r3, [pc, #536]	@ (8002d10 <NLLS+0x1a70>)
 8002af6:	443b      	add	r3, r7
 8002af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afc:	f7fd fd9c 	bl	8000638 <__aeabi_dmul>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	4610      	mov	r0, r2
 8002b06:	4619      	mov	r1, r3
 8002b08:	4b83      	ldr	r3, [pc, #524]	@ (8002d18 <NLLS+0x1a78>)
 8002b0a:	443b      	add	r3, r7
 8002b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b10:	f7fd fd92 	bl	8000638 <__aeabi_dmul>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4610      	mov	r0, r2
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4b7f      	ldr	r3, [pc, #508]	@ (8002d1c <NLLS+0x1a7c>)
 8002b1e:	443b      	add	r3, r7
 8002b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b24:	f7fd fd88 	bl	8000638 <__aeabi_dmul>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	4610      	mov	r0, r2
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4b7a      	ldr	r3, [pc, #488]	@ (8002d1c <NLLS+0x1a7c>)
 8002b32:	443b      	add	r3, r7
 8002b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b38:	f7fd fd7e 	bl	8000638 <__aeabi_dmul>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4610      	mov	r0, r2
 8002b42:	4619      	mov	r1, r3
 8002b44:	4b76      	ldr	r3, [pc, #472]	@ (8002d20 <NLLS+0x1a80>)
 8002b46:	443b      	add	r3, r7
 8002b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4c:	f7fd fd74 	bl	8000638 <__aeabi_dmul>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4610      	mov	r0, r2
 8002b56:	4619      	mov	r1, r3
 8002b58:	4b71      	ldr	r3, [pc, #452]	@ (8002d20 <NLLS+0x1a80>)
 8002b5a:	443b      	add	r3, r7
 8002b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b60:	f7fd fd6a 	bl	8000638 <__aeabi_dmul>
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	4620      	mov	r0, r4
 8002b6a:	4629      	mov	r1, r5
 8002b6c:	f7fd fbac 	bl	80002c8 <__aeabi_dsub>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4614      	mov	r4, r2
 8002b76:	461d      	mov	r5, r3
 8002b78:	4b65      	ldr	r3, [pc, #404]	@ (8002d10 <NLLS+0x1a70>)
 8002b7a:	443b      	add	r3, r7
 8002b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b80:	4969      	ldr	r1, [pc, #420]	@ (8002d28 <NLLS+0x1a88>)
 8002b82:	4439      	add	r1, r7
 8002b84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b88:	f7fd fd56 	bl	8000638 <__aeabi_dmul>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4610      	mov	r0, r2
 8002b92:	4619      	mov	r1, r3
 8002b94:	4b65      	ldr	r3, [pc, #404]	@ (8002d2c <NLLS+0x1a8c>)
 8002b96:	443b      	add	r3, r7
 8002b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9c:	f7fd fd4c 	bl	8000638 <__aeabi_dmul>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	4610      	mov	r0, r2
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4b61      	ldr	r3, [pc, #388]	@ (8002d30 <NLLS+0x1a90>)
 8002baa:	443b      	add	r3, r7
 8002bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb0:	f7fd fd42 	bl	8000638 <__aeabi_dmul>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4610      	mov	r0, r2
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4b53      	ldr	r3, [pc, #332]	@ (8002d0c <NLLS+0x1a6c>)
 8002bbe:	443b      	add	r3, r7
 8002bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc4:	f7fd fd38 	bl	8000638 <__aeabi_dmul>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	4620      	mov	r0, r4
 8002bce:	4629      	mov	r1, r5
 8002bd0:	f7fd fb7a 	bl	80002c8 <__aeabi_dsub>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4614      	mov	r4, r2
 8002bda:	461d      	mov	r5, r3
 8002bdc:	4b51      	ldr	r3, [pc, #324]	@ (8002d24 <NLLS+0x1a84>)
 8002bde:	443b      	add	r3, r7
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	00da      	lsls	r2, r3, #3
 8002be4:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8002be8:	f6a3 738c 	subw	r3, r3, #3980	@ 0xf8c
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4413      	add	r3, r2
 8002bf0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bf4:	4b46      	ldr	r3, [pc, #280]	@ (8002d10 <NLLS+0x1a70>)
 8002bf6:	443b      	add	r3, r7
 8002bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bfc:	f7fd fd1c 	bl	8000638 <__aeabi_dmul>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4610      	mov	r0, r2
 8002c06:	4619      	mov	r1, r3
 8002c08:	4b48      	ldr	r3, [pc, #288]	@ (8002d2c <NLLS+0x1a8c>)
 8002c0a:	443b      	add	r3, r7
 8002c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c10:	f7fd fd12 	bl	8000638 <__aeabi_dmul>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	4610      	mov	r0, r2
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4b44      	ldr	r3, [pc, #272]	@ (8002d30 <NLLS+0x1a90>)
 8002c1e:	443b      	add	r3, r7
 8002c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c24:	f7fd fd08 	bl	8000638 <__aeabi_dmul>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4b36      	ldr	r3, [pc, #216]	@ (8002d0c <NLLS+0x1a6c>)
 8002c32:	443b      	add	r3, r7
 8002c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c38:	f7fd fcfe 	bl	8000638 <__aeabi_dmul>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4620      	mov	r0, r4
 8002c42:	4629      	mov	r1, r5
 8002c44:	f7fd fb42 	bl	80002cc <__adddf3>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4614      	mov	r4, r2
 8002c4e:	461d      	mov	r5, r3
 8002c50:	4b36      	ldr	r3, [pc, #216]	@ (8002d2c <NLLS+0x1a8c>)
 8002c52:	443b      	add	r3, r7
 8002c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c58:	4936      	ldr	r1, [pc, #216]	@ (8002d34 <NLLS+0x1a94>)
 8002c5a:	4439      	add	r1, r7
 8002c5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c60:	f7fd fcea 	bl	8000638 <__aeabi_dmul>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4610      	mov	r0, r2
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4b2a      	ldr	r3, [pc, #168]	@ (8002d18 <NLLS+0x1a78>)
 8002c6e:	443b      	add	r3, r7
 8002c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c74:	f7fd fce0 	bl	8000638 <__aeabi_dmul>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4b22      	ldr	r3, [pc, #136]	@ (8002d0c <NLLS+0x1a6c>)
 8002c82:	443b      	add	r3, r7
 8002c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c88:	f7fd fcd6 	bl	8000638 <__aeabi_dmul>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4610      	mov	r0, r2
 8002c92:	4619      	mov	r1, r3
 8002c94:	4b1d      	ldr	r3, [pc, #116]	@ (8002d0c <NLLS+0x1a6c>)
 8002c96:	443b      	add	r3, r7
 8002c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9c:	f7fd fccc 	bl	8000638 <__aeabi_dmul>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4b23      	ldr	r3, [pc, #140]	@ (8002d38 <NLLS+0x1a98>)
 8002caa:	443b      	add	r3, r7
 8002cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb0:	f7fd fcc2 	bl	8000638 <__aeabi_dmul>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	4620      	mov	r0, r4
 8002cba:	4629      	mov	r1, r5
 8002cbc:	f7fd fb04 	bl	80002c8 <__aeabi_dsub>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	4614      	mov	r4, r2
 8002cc6:	461d      	mov	r5, r3
 8002cc8:	4b16      	ldr	r3, [pc, #88]	@ (8002d24 <NLLS+0x1a84>)
 8002cca:	443b      	add	r3, r7
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	00da      	lsls	r2, r3, #3
 8002cd0:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8002cd4:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4413      	add	r3, r2
 8002cdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ce0:	4b12      	ldr	r3, [pc, #72]	@ (8002d2c <NLLS+0x1a8c>)
 8002ce2:	443b      	add	r3, r7
 8002ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce8:	f7fd fca6 	bl	8000638 <__aeabi_dmul>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4b08      	ldr	r3, [pc, #32]	@ (8002d18 <NLLS+0x1a78>)
 8002cf6:	443b      	add	r3, r7
 8002cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfc:	f7fd fc9c 	bl	8000638 <__aeabi_dmul>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	4610      	mov	r0, r2
 8002d06:	4619      	mov	r1, r3
 8002d08:	e018      	b.n	8002d3c <NLLS+0x1a9c>
 8002d0a:	bf00      	nop
 8002d0c:	0002df18 	.word	0x0002df18
 8002d10:	0002dfb0 	.word	0x0002dfb0
 8002d14:	0002df90 	.word	0x0002df90
 8002d18:	0002dfa0 	.word	0x0002dfa0
 8002d1c:	0002df00 	.word	0x0002df00
 8002d20:	0002df10 	.word	0x0002df10
 8002d24:	0002df58 	.word	0x0002df58
 8002d28:	0002df88 	.word	0x0002df88
 8002d2c:	0002dfa8 	.word	0x0002dfa8
 8002d30:	0002df08 	.word	0x0002df08
 8002d34:	0002df98 	.word	0x0002df98
 8002d38:	0002df20 	.word	0x0002df20
 8002d3c:	4bb6      	ldr	r3, [pc, #728]	@ (8003018 <NLLS+0x1d78>)
 8002d3e:	443b      	add	r3, r7
 8002d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d44:	f7fd fc78 	bl	8000638 <__aeabi_dmul>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	4610      	mov	r0, r2
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4bb1      	ldr	r3, [pc, #708]	@ (8003018 <NLLS+0x1d78>)
 8002d52:	443b      	add	r3, r7
 8002d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d58:	f7fd fc6e 	bl	8000638 <__aeabi_dmul>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	4610      	mov	r0, r2
 8002d62:	4619      	mov	r1, r3
 8002d64:	4bad      	ldr	r3, [pc, #692]	@ (800301c <NLLS+0x1d7c>)
 8002d66:	443b      	add	r3, r7
 8002d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6c:	f7fd fc64 	bl	8000638 <__aeabi_dmul>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4620      	mov	r0, r4
 8002d76:	4629      	mov	r1, r5
 8002d78:	f7fd faa8 	bl	80002cc <__adddf3>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4614      	mov	r4, r2
 8002d82:	461d      	mov	r5, r3
 8002d84:	4ba6      	ldr	r3, [pc, #664]	@ (8003020 <NLLS+0x1d80>)
 8002d86:	443b      	add	r3, r7
 8002d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8c:	49a5      	ldr	r1, [pc, #660]	@ (8003024 <NLLS+0x1d84>)
 8002d8e:	4439      	add	r1, r7
 8002d90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d94:	f7fd fc50 	bl	8000638 <__aeabi_dmul>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4ba1      	ldr	r3, [pc, #644]	@ (8003028 <NLLS+0x1d88>)
 8002da2:	443b      	add	r3, r7
 8002da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da8:	f7fd fc46 	bl	8000638 <__aeabi_dmul>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	4610      	mov	r0, r2
 8002db2:	4619      	mov	r1, r3
 8002db4:	4b9d      	ldr	r3, [pc, #628]	@ (800302c <NLLS+0x1d8c>)
 8002db6:	443b      	add	r3, r7
 8002db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dbc:	f7fd fc3c 	bl	8000638 <__aeabi_dmul>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4610      	mov	r0, r2
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4b98      	ldr	r3, [pc, #608]	@ (800302c <NLLS+0x1d8c>)
 8002dca:	443b      	add	r3, r7
 8002dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd0:	f7fd fc32 	bl	8000638 <__aeabi_dmul>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4b94      	ldr	r3, [pc, #592]	@ (8003030 <NLLS+0x1d90>)
 8002dde:	443b      	add	r3, r7
 8002de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de4:	f7fd fc28 	bl	8000638 <__aeabi_dmul>
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	4610      	mov	r0, r2
 8002dee:	4619      	mov	r1, r3
 8002df0:	4b8f      	ldr	r3, [pc, #572]	@ (8003030 <NLLS+0x1d90>)
 8002df2:	443b      	add	r3, r7
 8002df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df8:	f7fd fc1e 	bl	8000638 <__aeabi_dmul>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4610      	mov	r0, r2
 8002e02:	4619      	mov	r1, r3
 8002e04:	4b85      	ldr	r3, [pc, #532]	@ (800301c <NLLS+0x1d7c>)
 8002e06:	443b      	add	r3, r7
 8002e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0c:	f7fd fc14 	bl	8000638 <__aeabi_dmul>
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4620      	mov	r0, r4
 8002e16:	4629      	mov	r1, r5
 8002e18:	f7fd fa56 	bl	80002c8 <__aeabi_dsub>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4614      	mov	r4, r2
 8002e22:	461d      	mov	r5, r3
 8002e24:	4b83      	ldr	r3, [pc, #524]	@ (8003034 <NLLS+0x1d94>)
 8002e26:	443b      	add	r3, r7
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	00da      	lsls	r2, r3, #3
 8002e2c:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8002e30:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4413      	add	r3, r2
 8002e38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e3c:	4b78      	ldr	r3, [pc, #480]	@ (8003020 <NLLS+0x1d80>)
 8002e3e:	443b      	add	r3, r7
 8002e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e44:	f7fd fbf8 	bl	8000638 <__aeabi_dmul>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4b75      	ldr	r3, [pc, #468]	@ (8003028 <NLLS+0x1d88>)
 8002e52:	443b      	add	r3, r7
 8002e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e58:	f7fd fbee 	bl	8000638 <__aeabi_dmul>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4610      	mov	r0, r2
 8002e62:	4619      	mov	r1, r3
 8002e64:	4b71      	ldr	r3, [pc, #452]	@ (800302c <NLLS+0x1d8c>)
 8002e66:	443b      	add	r3, r7
 8002e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6c:	f7fd fbe4 	bl	8000638 <__aeabi_dmul>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	4610      	mov	r0, r2
 8002e76:	4619      	mov	r1, r3
 8002e78:	4b6c      	ldr	r3, [pc, #432]	@ (800302c <NLLS+0x1d8c>)
 8002e7a:	443b      	add	r3, r7
 8002e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e80:	f7fd fbda 	bl	8000638 <__aeabi_dmul>
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	4610      	mov	r0, r2
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4b68      	ldr	r3, [pc, #416]	@ (8003030 <NLLS+0x1d90>)
 8002e8e:	443b      	add	r3, r7
 8002e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e94:	f7fd fbd0 	bl	8000638 <__aeabi_dmul>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4b63      	ldr	r3, [pc, #396]	@ (8003030 <NLLS+0x1d90>)
 8002ea2:	443b      	add	r3, r7
 8002ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea8:	f7fd fbc6 	bl	8000638 <__aeabi_dmul>
 8002eac:	4602      	mov	r2, r0
 8002eae:	460b      	mov	r3, r1
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4b59      	ldr	r3, [pc, #356]	@ (800301c <NLLS+0x1d7c>)
 8002eb6:	443b      	add	r3, r7
 8002eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebc:	f7fd fbbc 	bl	8000638 <__aeabi_dmul>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4620      	mov	r0, r4
 8002ec6:	4629      	mov	r1, r5
 8002ec8:	f7fd fa00 	bl	80002cc <__adddf3>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4614      	mov	r4, r2
 8002ed2:	461d      	mov	r5, r3
 8002ed4:	4b52      	ldr	r3, [pc, #328]	@ (8003020 <NLLS+0x1d80>)
 8002ed6:	443b      	add	r3, r7
 8002ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002edc:	4951      	ldr	r1, [pc, #324]	@ (8003024 <NLLS+0x1d84>)
 8002ede:	4439      	add	r1, r7
 8002ee0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ee4:	f7fd fba8 	bl	8000638 <__aeabi_dmul>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	4610      	mov	r0, r2
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4b4d      	ldr	r3, [pc, #308]	@ (8003028 <NLLS+0x1d88>)
 8002ef2:	443b      	add	r3, r7
 8002ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef8:	f7fd fb9e 	bl	8000638 <__aeabi_dmul>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4610      	mov	r0, r2
 8002f02:	4619      	mov	r1, r3
 8002f04:	4b49      	ldr	r3, [pc, #292]	@ (800302c <NLLS+0x1d8c>)
 8002f06:	443b      	add	r3, r7
 8002f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0c:	f7fd fb94 	bl	8000638 <__aeabi_dmul>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4610      	mov	r0, r2
 8002f16:	4619      	mov	r1, r3
 8002f18:	4b47      	ldr	r3, [pc, #284]	@ (8003038 <NLLS+0x1d98>)
 8002f1a:	443b      	add	r3, r7
 8002f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f20:	f7fd fb8a 	bl	8000638 <__aeabi_dmul>
 8002f24:	4602      	mov	r2, r0
 8002f26:	460b      	mov	r3, r1
 8002f28:	4610      	mov	r0, r2
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4b3a      	ldr	r3, [pc, #232]	@ (8003018 <NLLS+0x1d78>)
 8002f2e:	443b      	add	r3, r7
 8002f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f34:	f7fd fb80 	bl	8000638 <__aeabi_dmul>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4b3e      	ldr	r3, [pc, #248]	@ (800303c <NLLS+0x1d9c>)
 8002f42:	443b      	add	r3, r7
 8002f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f48:	f7fd fb76 	bl	8000638 <__aeabi_dmul>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4620      	mov	r0, r4
 8002f52:	4629      	mov	r1, r5
 8002f54:	f7fd f9ba 	bl	80002cc <__adddf3>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4614      	mov	r4, r2
 8002f5e:	461d      	mov	r5, r3
 8002f60:	4b34      	ldr	r3, [pc, #208]	@ (8003034 <NLLS+0x1d94>)
 8002f62:	443b      	add	r3, r7
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	00da      	lsls	r2, r3, #3
 8002f68:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8002f6c:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4413      	add	r3, r2
 8002f74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f78:	4b29      	ldr	r3, [pc, #164]	@ (8003020 <NLLS+0x1d80>)
 8002f7a:	443b      	add	r3, r7
 8002f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f80:	f7fd fb5a 	bl	8000638 <__aeabi_dmul>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4610      	mov	r0, r2
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4b26      	ldr	r3, [pc, #152]	@ (8003028 <NLLS+0x1d88>)
 8002f8e:	443b      	add	r3, r7
 8002f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f94:	f7fd fb50 	bl	8000638 <__aeabi_dmul>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4610      	mov	r0, r2
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4b22      	ldr	r3, [pc, #136]	@ (800302c <NLLS+0x1d8c>)
 8002fa2:	443b      	add	r3, r7
 8002fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa8:	f7fd fb46 	bl	8000638 <__aeabi_dmul>
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4b20      	ldr	r3, [pc, #128]	@ (8003038 <NLLS+0x1d98>)
 8002fb6:	443b      	add	r3, r7
 8002fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fbc:	f7fd fb3c 	bl	8000638 <__aeabi_dmul>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4b13      	ldr	r3, [pc, #76]	@ (8003018 <NLLS+0x1d78>)
 8002fca:	443b      	add	r3, r7
 8002fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd0:	f7fd fb32 	bl	8000638 <__aeabi_dmul>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	4610      	mov	r0, r2
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4b17      	ldr	r3, [pc, #92]	@ (800303c <NLLS+0x1d9c>)
 8002fde:	443b      	add	r3, r7
 8002fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe4:	f7fd fb28 	bl	8000638 <__aeabi_dmul>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	4620      	mov	r0, r4
 8002fee:	4629      	mov	r1, r5
 8002ff0:	f7fd f96a 	bl	80002c8 <__aeabi_dsub>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4640      	mov	r0, r8
 8002ffa:	4649      	mov	r1, r9
 8002ffc:	f7fd fb1c 	bl	8000638 <__aeabi_dmul>
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003006:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800300a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800300c:	4b04      	ldr	r3, [pc, #16]	@ (8003020 <NLLS+0x1d80>)
 800300e:	443b      	add	r3, r7
 8003010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003014:	e014      	b.n	8003040 <NLLS+0x1da0>
 8003016:	bf00      	nop
 8003018:	0002df18 	.word	0x0002df18
 800301c:	0002df20 	.word	0x0002df20
 8003020:	0002dfa8 	.word	0x0002dfa8
 8003024:	0002df98 	.word	0x0002df98
 8003028:	0002dfa0 	.word	0x0002dfa0
 800302c:	0002df00 	.word	0x0002df00
 8003030:	0002df10 	.word	0x0002df10
 8003034:	0002df58 	.word	0x0002df58
 8003038:	0002df08 	.word	0x0002df08
 800303c:	0002df28 	.word	0x0002df28
 8003040:	49b3      	ldr	r1, [pc, #716]	@ (8003310 <NLLS+0x2070>)
 8003042:	4439      	add	r1, r7
 8003044:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003048:	f7fd faf6 	bl	8000638 <__aeabi_dmul>
 800304c:	4602      	mov	r2, r0
 800304e:	460b      	mov	r3, r1
 8003050:	4610      	mov	r0, r2
 8003052:	4619      	mov	r1, r3
 8003054:	4bae      	ldr	r3, [pc, #696]	@ (8003310 <NLLS+0x2070>)
 8003056:	443b      	add	r3, r7
 8003058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305c:	f7fd faec 	bl	8000638 <__aeabi_dmul>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	4610      	mov	r0, r2
 8003066:	4619      	mov	r1, r3
 8003068:	4baa      	ldr	r3, [pc, #680]	@ (8003314 <NLLS+0x2074>)
 800306a:	443b      	add	r3, r7
 800306c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003070:	f7fd fae2 	bl	8000638 <__aeabi_dmul>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	4610      	mov	r0, r2
 800307a:	4619      	mov	r1, r3
 800307c:	4ba6      	ldr	r3, [pc, #664]	@ (8003318 <NLLS+0x2078>)
 800307e:	443b      	add	r3, r7
 8003080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003084:	f7fd fad8 	bl	8000638 <__aeabi_dmul>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	4610      	mov	r0, r2
 800308e:	4619      	mov	r1, r3
 8003090:	4ba2      	ldr	r3, [pc, #648]	@ (800331c <NLLS+0x207c>)
 8003092:	443b      	add	r3, r7
 8003094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003098:	f7fd face 	bl	8000638 <__aeabi_dmul>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4610      	mov	r0, r2
 80030a2:	4619      	mov	r1, r3
 80030a4:	4b9d      	ldr	r3, [pc, #628]	@ (800331c <NLLS+0x207c>)
 80030a6:	443b      	add	r3, r7
 80030a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ac:	f7fd fac4 	bl	8000638 <__aeabi_dmul>
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4610      	mov	r0, r2
 80030b6:	4619      	mov	r1, r3
 80030b8:	4b99      	ldr	r3, [pc, #612]	@ (8003320 <NLLS+0x2080>)
 80030ba:	443b      	add	r3, r7
 80030bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c0:	f7fd faba 	bl	8000638 <__aeabi_dmul>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4610      	mov	r0, r2
 80030ca:	4619      	mov	r1, r3
 80030cc:	4b94      	ldr	r3, [pc, #592]	@ (8003320 <NLLS+0x2080>)
 80030ce:	443b      	add	r3, r7
 80030d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d4:	f7fd fab0 	bl	8000638 <__aeabi_dmul>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4610      	mov	r0, r2
 80030de:	4619      	mov	r1, r3
 80030e0:	4b90      	ldr	r3, [pc, #576]	@ (8003324 <NLLS+0x2084>)
 80030e2:	443b      	add	r3, r7
 80030e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e8:	f7fd faa6 	bl	8000638 <__aeabi_dmul>
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	4610      	mov	r0, r2
 80030f2:	4619      	mov	r1, r3
 80030f4:	4b8b      	ldr	r3, [pc, #556]	@ (8003324 <NLLS+0x2084>)
 80030f6:	443b      	add	r3, r7
 80030f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fc:	f7fd fa9c 	bl	8000638 <__aeabi_dmul>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003108:	f7fd fbc0 	bl	800088c <__aeabi_ddiv>
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	4985      	ldr	r1, [pc, #532]	@ (8003328 <NLLS+0x2088>)
 8003112:	4439      	add	r1, r7
 8003114:	f5a1 70d8 	sub.w	r0, r1, #432	@ 0x1b0
 8003118:	4984      	ldr	r1, [pc, #528]	@ (800332c <NLLS+0x208c>)
 800311a:	4439      	add	r1, r7
 800311c:	6809      	ldr	r1, [r1, #0]
 800311e:	f201 4157 	addw	r1, r1, #1111	@ 0x457
 8003122:	00c9      	lsls	r1, r1, #3
 8003124:	4401      	add	r1, r0
 8003126:	e9c1 2300 	strd	r2, r3, [r1]

            mat_H[2][i] = -(2*(bz - mz[i])*(bz*sx*sy*cos_rho - by*sx*sz*sin_lambda - mz[i]*sx*sy*cos_rho + my[i]*sx*sz*sin_lambda + bx*sy*sz*sin_lambda*sin_rho - mx[i]*sy*sz*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_rho*sin_phi + mx[i]*sy*sz*cos_lambda*cos_rho*sin_phi))/(sx*sy*(sz*sz*sz)*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho);
 800312a:	4b80      	ldr	r3, [pc, #512]	@ (800332c <NLLS+0x208c>)
 800312c:	443b      	add	r3, r7
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	f507 627c 	add.w	r2, r7, #4032	@ 0xfc0
 8003136:	f6a2 728c 	subw	r2, r2, #3980	@ 0xf8c
 800313a:	6812      	ldr	r2, [r2, #0]
 800313c:	4413      	add	r3, r2
 800313e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003142:	497b      	ldr	r1, [pc, #492]	@ (8003330 <NLLS+0x2090>)
 8003144:	4439      	add	r1, r7
 8003146:	e9d1 0100 	ldrd	r0, r1, [r1]
 800314a:	f7fd f8bd 	bl	80002c8 <__aeabi_dsub>
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	4610      	mov	r0, r2
 8003154:	4619      	mov	r1, r3
 8003156:	4602      	mov	r2, r0
 8003158:	460b      	mov	r3, r1
 800315a:	f7fd f8b7 	bl	80002cc <__adddf3>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	4690      	mov	r8, r2
 8003164:	4699      	mov	r9, r3
 8003166:	4b6b      	ldr	r3, [pc, #428]	@ (8003314 <NLLS+0x2074>)
 8003168:	443b      	add	r3, r7
 800316a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316e:	4970      	ldr	r1, [pc, #448]	@ (8003330 <NLLS+0x2090>)
 8003170:	4439      	add	r1, r7
 8003172:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003176:	f7fd fa5f 	bl	8000638 <__aeabi_dmul>
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	4610      	mov	r0, r2
 8003180:	4619      	mov	r1, r3
 8003182:	4b63      	ldr	r3, [pc, #396]	@ (8003310 <NLLS+0x2070>)
 8003184:	443b      	add	r3, r7
 8003186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318a:	f7fd fa55 	bl	8000638 <__aeabi_dmul>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	4610      	mov	r0, r2
 8003194:	4619      	mov	r1, r3
 8003196:	4b63      	ldr	r3, [pc, #396]	@ (8003324 <NLLS+0x2084>)
 8003198:	443b      	add	r3, r7
 800319a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319e:	f7fd fa4b 	bl	8000638 <__aeabi_dmul>
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	4614      	mov	r4, r2
 80031a8:	461d      	mov	r5, r3
 80031aa:	4b5a      	ldr	r3, [pc, #360]	@ (8003314 <NLLS+0x2074>)
 80031ac:	443b      	add	r3, r7
 80031ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b2:	4960      	ldr	r1, [pc, #384]	@ (8003334 <NLLS+0x2094>)
 80031b4:	4439      	add	r1, r7
 80031b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80031ba:	f7fd fa3d 	bl	8000638 <__aeabi_dmul>
 80031be:	4602      	mov	r2, r0
 80031c0:	460b      	mov	r3, r1
 80031c2:	4610      	mov	r0, r2
 80031c4:	4619      	mov	r1, r3
 80031c6:	4b54      	ldr	r3, [pc, #336]	@ (8003318 <NLLS+0x2078>)
 80031c8:	443b      	add	r3, r7
 80031ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ce:	f7fd fa33 	bl	8000638 <__aeabi_dmul>
 80031d2:	4602      	mov	r2, r0
 80031d4:	460b      	mov	r3, r1
 80031d6:	4610      	mov	r0, r2
 80031d8:	4619      	mov	r1, r3
 80031da:	4b57      	ldr	r3, [pc, #348]	@ (8003338 <NLLS+0x2098>)
 80031dc:	443b      	add	r3, r7
 80031de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e2:	f7fd fa29 	bl	8000638 <__aeabi_dmul>
 80031e6:	4602      	mov	r2, r0
 80031e8:	460b      	mov	r3, r1
 80031ea:	4620      	mov	r0, r4
 80031ec:	4629      	mov	r1, r5
 80031ee:	f7fd f86b 	bl	80002c8 <__aeabi_dsub>
 80031f2:	4602      	mov	r2, r0
 80031f4:	460b      	mov	r3, r1
 80031f6:	4614      	mov	r4, r2
 80031f8:	461d      	mov	r5, r3
 80031fa:	4b4c      	ldr	r3, [pc, #304]	@ (800332c <NLLS+0x208c>)
 80031fc:	443b      	add	r3, r7
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	00da      	lsls	r2, r3, #3
 8003202:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8003206:	f6a3 738c 	subw	r3, r3, #3980	@ 0xf8c
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4413      	add	r3, r2
 800320e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003212:	4b40      	ldr	r3, [pc, #256]	@ (8003314 <NLLS+0x2074>)
 8003214:	443b      	add	r3, r7
 8003216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321a:	f7fd fa0d 	bl	8000638 <__aeabi_dmul>
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4610      	mov	r0, r2
 8003224:	4619      	mov	r1, r3
 8003226:	4b3a      	ldr	r3, [pc, #232]	@ (8003310 <NLLS+0x2070>)
 8003228:	443b      	add	r3, r7
 800322a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322e:	f7fd fa03 	bl	8000638 <__aeabi_dmul>
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	4610      	mov	r0, r2
 8003238:	4619      	mov	r1, r3
 800323a:	4b3a      	ldr	r3, [pc, #232]	@ (8003324 <NLLS+0x2084>)
 800323c:	443b      	add	r3, r7
 800323e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003242:	f7fd f9f9 	bl	8000638 <__aeabi_dmul>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4620      	mov	r0, r4
 800324c:	4629      	mov	r1, r5
 800324e:	f7fd f83b 	bl	80002c8 <__aeabi_dsub>
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	4614      	mov	r4, r2
 8003258:	461d      	mov	r5, r3
 800325a:	4b34      	ldr	r3, [pc, #208]	@ (800332c <NLLS+0x208c>)
 800325c:	443b      	add	r3, r7
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	00da      	lsls	r2, r3, #3
 8003262:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8003266:	f6a3 7388 	subw	r3, r3, #3976	@ 0xf88
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4413      	add	r3, r2
 800326e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003272:	4b28      	ldr	r3, [pc, #160]	@ (8003314 <NLLS+0x2074>)
 8003274:	443b      	add	r3, r7
 8003276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327a:	f7fd f9dd 	bl	8000638 <__aeabi_dmul>
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
 8003282:	4610      	mov	r0, r2
 8003284:	4619      	mov	r1, r3
 8003286:	4b24      	ldr	r3, [pc, #144]	@ (8003318 <NLLS+0x2078>)
 8003288:	443b      	add	r3, r7
 800328a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328e:	f7fd f9d3 	bl	8000638 <__aeabi_dmul>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	4610      	mov	r0, r2
 8003298:	4619      	mov	r1, r3
 800329a:	4b27      	ldr	r3, [pc, #156]	@ (8003338 <NLLS+0x2098>)
 800329c:	443b      	add	r3, r7
 800329e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a2:	f7fd f9c9 	bl	8000638 <__aeabi_dmul>
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	4620      	mov	r0, r4
 80032ac:	4629      	mov	r1, r5
 80032ae:	f7fd f80d 	bl	80002cc <__adddf3>
 80032b2:	4602      	mov	r2, r0
 80032b4:	460b      	mov	r3, r1
 80032b6:	4614      	mov	r4, r2
 80032b8:	461d      	mov	r5, r3
 80032ba:	4b15      	ldr	r3, [pc, #84]	@ (8003310 <NLLS+0x2070>)
 80032bc:	443b      	add	r3, r7
 80032be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c2:	491e      	ldr	r1, [pc, #120]	@ (800333c <NLLS+0x209c>)
 80032c4:	4439      	add	r1, r7
 80032c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80032ca:	f7fd f9b5 	bl	8000638 <__aeabi_dmul>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	4610      	mov	r0, r2
 80032d4:	4619      	mov	r1, r3
 80032d6:	4b10      	ldr	r3, [pc, #64]	@ (8003318 <NLLS+0x2078>)
 80032d8:	443b      	add	r3, r7
 80032da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032de:	f7fd f9ab 	bl	8000638 <__aeabi_dmul>
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	4610      	mov	r0, r2
 80032e8:	4619      	mov	r1, r3
 80032ea:	4b13      	ldr	r3, [pc, #76]	@ (8003338 <NLLS+0x2098>)
 80032ec:	443b      	add	r3, r7
 80032ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f2:	f7fd f9a1 	bl	8000638 <__aeabi_dmul>
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	4610      	mov	r0, r2
 80032fc:	4619      	mov	r1, r3
 80032fe:	4b10      	ldr	r3, [pc, #64]	@ (8003340 <NLLS+0x20a0>)
 8003300:	443b      	add	r3, r7
 8003302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003306:	f7fd f997 	bl	8000638 <__aeabi_dmul>
 800330a:	4602      	mov	r2, r0
 800330c:	460b      	mov	r3, r1
 800330e:	e019      	b.n	8003344 <NLLS+0x20a4>
 8003310:	0002dfa8 	.word	0x0002dfa8
 8003314:	0002dfb0 	.word	0x0002dfb0
 8003318:	0002dfa0 	.word	0x0002dfa0
 800331c:	0002df00 	.word	0x0002df00
 8003320:	0002df10 	.word	0x0002df10
 8003324:	0002df08 	.word	0x0002df08
 8003328:	00013fc0 	.word	0x00013fc0
 800332c:	0002df58 	.word	0x0002df58
 8003330:	0002df88 	.word	0x0002df88
 8003334:	0002df90 	.word	0x0002df90
 8003338:	0002df18 	.word	0x0002df18
 800333c:	0002df98 	.word	0x0002df98
 8003340:	0002df20 	.word	0x0002df20
 8003344:	4620      	mov	r0, r4
 8003346:	4629      	mov	r1, r5
 8003348:	f7fc ffc0 	bl	80002cc <__adddf3>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4614      	mov	r4, r2
 8003352:	461d      	mov	r5, r3
 8003354:	4bb5      	ldr	r3, [pc, #724]	@ (800362c <NLLS+0x238c>)
 8003356:	443b      	add	r3, r7
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	00da      	lsls	r2, r3, #3
 800335c:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8003360:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4413      	add	r3, r2
 8003368:	e9d3 0100 	ldrd	r0, r1, [r3]
 800336c:	4bb0      	ldr	r3, [pc, #704]	@ (8003630 <NLLS+0x2390>)
 800336e:	443b      	add	r3, r7
 8003370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003374:	f7fd f960 	bl	8000638 <__aeabi_dmul>
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	4610      	mov	r0, r2
 800337e:	4619      	mov	r1, r3
 8003380:	4bac      	ldr	r3, [pc, #688]	@ (8003634 <NLLS+0x2394>)
 8003382:	443b      	add	r3, r7
 8003384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003388:	f7fd f956 	bl	8000638 <__aeabi_dmul>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	4610      	mov	r0, r2
 8003392:	4619      	mov	r1, r3
 8003394:	4ba8      	ldr	r3, [pc, #672]	@ (8003638 <NLLS+0x2398>)
 8003396:	443b      	add	r3, r7
 8003398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339c:	f7fd f94c 	bl	8000638 <__aeabi_dmul>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	4610      	mov	r0, r2
 80033a6:	4619      	mov	r1, r3
 80033a8:	4ba4      	ldr	r3, [pc, #656]	@ (800363c <NLLS+0x239c>)
 80033aa:	443b      	add	r3, r7
 80033ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b0:	f7fd f942 	bl	8000638 <__aeabi_dmul>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4620      	mov	r0, r4
 80033ba:	4629      	mov	r1, r5
 80033bc:	f7fc ff84 	bl	80002c8 <__aeabi_dsub>
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	4614      	mov	r4, r2
 80033c6:	461d      	mov	r5, r3
 80033c8:	4b99      	ldr	r3, [pc, #612]	@ (8003630 <NLLS+0x2390>)
 80033ca:	443b      	add	r3, r7
 80033cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d0:	499b      	ldr	r1, [pc, #620]	@ (8003640 <NLLS+0x23a0>)
 80033d2:	4439      	add	r1, r7
 80033d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80033d8:	f7fd f92e 	bl	8000638 <__aeabi_dmul>
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	4610      	mov	r0, r2
 80033e2:	4619      	mov	r1, r3
 80033e4:	4b93      	ldr	r3, [pc, #588]	@ (8003634 <NLLS+0x2394>)
 80033e6:	443b      	add	r3, r7
 80033e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ec:	f7fd f924 	bl	8000638 <__aeabi_dmul>
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	4610      	mov	r0, r2
 80033f6:	4619      	mov	r1, r3
 80033f8:	4b92      	ldr	r3, [pc, #584]	@ (8003644 <NLLS+0x23a4>)
 80033fa:	443b      	add	r3, r7
 80033fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003400:	f7fd f91a 	bl	8000638 <__aeabi_dmul>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4610      	mov	r0, r2
 800340a:	4619      	mov	r1, r3
 800340c:	4b8e      	ldr	r3, [pc, #568]	@ (8003648 <NLLS+0x23a8>)
 800340e:	443b      	add	r3, r7
 8003410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003414:	f7fd f910 	bl	8000638 <__aeabi_dmul>
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	4610      	mov	r0, r2
 800341e:	4619      	mov	r1, r3
 8003420:	4b8a      	ldr	r3, [pc, #552]	@ (800364c <NLLS+0x23ac>)
 8003422:	443b      	add	r3, r7
 8003424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003428:	f7fd f906 	bl	8000638 <__aeabi_dmul>
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	4620      	mov	r0, r4
 8003432:	4629      	mov	r1, r5
 8003434:	f7fc ff48 	bl	80002c8 <__aeabi_dsub>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4614      	mov	r4, r2
 800343e:	461d      	mov	r5, r3
 8003440:	4b7a      	ldr	r3, [pc, #488]	@ (800362c <NLLS+0x238c>)
 8003442:	443b      	add	r3, r7
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	00da      	lsls	r2, r3, #3
 8003448:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800344c:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4413      	add	r3, r2
 8003454:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003458:	4b75      	ldr	r3, [pc, #468]	@ (8003630 <NLLS+0x2390>)
 800345a:	443b      	add	r3, r7
 800345c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003460:	f7fd f8ea 	bl	8000638 <__aeabi_dmul>
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	4610      	mov	r0, r2
 800346a:	4619      	mov	r1, r3
 800346c:	4b71      	ldr	r3, [pc, #452]	@ (8003634 <NLLS+0x2394>)
 800346e:	443b      	add	r3, r7
 8003470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003474:	f7fd f8e0 	bl	8000638 <__aeabi_dmul>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4610      	mov	r0, r2
 800347e:	4619      	mov	r1, r3
 8003480:	4b70      	ldr	r3, [pc, #448]	@ (8003644 <NLLS+0x23a4>)
 8003482:	443b      	add	r3, r7
 8003484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003488:	f7fd f8d6 	bl	8000638 <__aeabi_dmul>
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	4610      	mov	r0, r2
 8003492:	4619      	mov	r1, r3
 8003494:	4b6c      	ldr	r3, [pc, #432]	@ (8003648 <NLLS+0x23a8>)
 8003496:	443b      	add	r3, r7
 8003498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349c:	f7fd f8cc 	bl	8000638 <__aeabi_dmul>
 80034a0:	4602      	mov	r2, r0
 80034a2:	460b      	mov	r3, r1
 80034a4:	4610      	mov	r0, r2
 80034a6:	4619      	mov	r1, r3
 80034a8:	4b68      	ldr	r3, [pc, #416]	@ (800364c <NLLS+0x23ac>)
 80034aa:	443b      	add	r3, r7
 80034ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b0:	f7fd f8c2 	bl	8000638 <__aeabi_dmul>
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	4620      	mov	r0, r4
 80034ba:	4629      	mov	r1, r5
 80034bc:	f7fc ff06 	bl	80002cc <__adddf3>
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	4640      	mov	r0, r8
 80034c6:	4649      	mov	r1, r9
 80034c8:	f7fd f8b6 	bl	8000638 <__aeabi_dmul>
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	623a      	str	r2, [r7, #32]
 80034d2:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80034d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80034d8:	4b55      	ldr	r3, [pc, #340]	@ (8003630 <NLLS+0x2390>)
 80034da:	443b      	add	r3, r7
 80034dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e0:	495b      	ldr	r1, [pc, #364]	@ (8003650 <NLLS+0x23b0>)
 80034e2:	4439      	add	r1, r7
 80034e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034e8:	f7fd f8a6 	bl	8000638 <__aeabi_dmul>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4614      	mov	r4, r2
 80034f2:	461d      	mov	r5, r3
 80034f4:	4b4f      	ldr	r3, [pc, #316]	@ (8003634 <NLLS+0x2394>)
 80034f6:	443b      	add	r3, r7
 80034f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fc:	494d      	ldr	r1, [pc, #308]	@ (8003634 <NLLS+0x2394>)
 80034fe:	4439      	add	r1, r7
 8003500:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003504:	f7fd f898 	bl	8000638 <__aeabi_dmul>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	4610      	mov	r0, r2
 800350e:	4619      	mov	r1, r3
 8003510:	4b48      	ldr	r3, [pc, #288]	@ (8003634 <NLLS+0x2394>)
 8003512:	443b      	add	r3, r7
 8003514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003518:	f7fd f88e 	bl	8000638 <__aeabi_dmul>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4620      	mov	r0, r4
 8003522:	4629      	mov	r1, r5
 8003524:	f7fd f888 	bl	8000638 <__aeabi_dmul>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4610      	mov	r0, r2
 800352e:	4619      	mov	r1, r3
 8003530:	4b44      	ldr	r3, [pc, #272]	@ (8003644 <NLLS+0x23a4>)
 8003532:	443b      	add	r3, r7
 8003534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003538:	f7fd f87e 	bl	8000638 <__aeabi_dmul>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4610      	mov	r0, r2
 8003542:	4619      	mov	r1, r3
 8003544:	4b3f      	ldr	r3, [pc, #252]	@ (8003644 <NLLS+0x23a4>)
 8003546:	443b      	add	r3, r7
 8003548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354c:	f7fd f874 	bl	8000638 <__aeabi_dmul>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	4610      	mov	r0, r2
 8003556:	4619      	mov	r1, r3
 8003558:	4b3e      	ldr	r3, [pc, #248]	@ (8003654 <NLLS+0x23b4>)
 800355a:	443b      	add	r3, r7
 800355c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003560:	f7fd f86a 	bl	8000638 <__aeabi_dmul>
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	4610      	mov	r0, r2
 800356a:	4619      	mov	r1, r3
 800356c:	4b39      	ldr	r3, [pc, #228]	@ (8003654 <NLLS+0x23b4>)
 800356e:	443b      	add	r3, r7
 8003570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003574:	f7fd f860 	bl	8000638 <__aeabi_dmul>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	4610      	mov	r0, r2
 800357e:	4619      	mov	r1, r3
 8003580:	4b31      	ldr	r3, [pc, #196]	@ (8003648 <NLLS+0x23a8>)
 8003582:	443b      	add	r3, r7
 8003584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003588:	f7fd f856 	bl	8000638 <__aeabi_dmul>
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003594:	f7fd f97a 	bl	800088c <__aeabi_ddiv>
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	492e      	ldr	r1, [pc, #184]	@ (8003658 <NLLS+0x23b8>)
 800359e:	4439      	add	r1, r7
 80035a0:	f5a1 70d8 	sub.w	r0, r1, #432	@ 0x1b0
 80035a4:	4921      	ldr	r1, [pc, #132]	@ (800362c <NLLS+0x238c>)
 80035a6:	4439      	add	r1, r7
 80035a8:	6809      	ldr	r1, [r1, #0]
 80035aa:	f601 01ae 	addw	r1, r1, #2222	@ 0x8ae
 80035ae:	00c9      	lsls	r1, r1, #3
 80035b0:	4401      	add	r1, r0
 80035b2:	e9c1 2300 	strd	r2, r3, [r1]

            mat_H[3][i] = (2*bx - 2*mx[i])/sx*sx - (2*sin_rho*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i])))/(sx*sx*sy*cos_rho*cos_rho) + (2*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sz*cos_lambda*cos_lambda*2*cos_phi*cos_phi*cos_rho*cos_rho);
 80035b6:	4b22      	ldr	r3, [pc, #136]	@ (8003640 <NLLS+0x23a0>)
 80035b8:	443b      	add	r3, r7
 80035ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035be:	4602      	mov	r2, r0
 80035c0:	460b      	mov	r3, r1
 80035c2:	f7fc fe83 	bl	80002cc <__adddf3>
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	4614      	mov	r4, r2
 80035cc:	461d      	mov	r5, r3
 80035ce:	4b17      	ldr	r3, [pc, #92]	@ (800362c <NLLS+0x238c>)
 80035d0:	443b      	add	r3, r7
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	f507 627c 	add.w	r2, r7, #4032	@ 0xfc0
 80035da:	f6a2 7284 	subw	r2, r2, #3972	@ 0xf84
 80035de:	6812      	ldr	r2, [r2, #0]
 80035e0:	4413      	add	r3, r2
 80035e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	f7fc fe6f 	bl	80002cc <__adddf3>
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	4620      	mov	r0, r4
 80035f4:	4629      	mov	r1, r5
 80035f6:	f7fc fe67 	bl	80002c8 <__aeabi_dsub>
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	4610      	mov	r0, r2
 8003600:	4619      	mov	r1, r3
 8003602:	4b13      	ldr	r3, [pc, #76]	@ (8003650 <NLLS+0x23b0>)
 8003604:	443b      	add	r3, r7
 8003606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360a:	f7fd f93f 	bl	800088c <__aeabi_ddiv>
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
 8003612:	4610      	mov	r0, r2
 8003614:	4619      	mov	r1, r3
 8003616:	4b0e      	ldr	r3, [pc, #56]	@ (8003650 <NLLS+0x23b0>)
 8003618:	443b      	add	r3, r7
 800361a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361e:	f7fd f80b 	bl	8000638 <__aeabi_dmul>
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800362a:	e017      	b.n	800365c <NLLS+0x23bc>
 800362c:	0002df58 	.word	0x0002df58
 8003630:	0002dfa8 	.word	0x0002dfa8
 8003634:	0002dfa0 	.word	0x0002dfa0
 8003638:	0002df18 	.word	0x0002df18
 800363c:	0002df20 	.word	0x0002df20
 8003640:	0002df98 	.word	0x0002df98
 8003644:	0002df00 	.word	0x0002df00
 8003648:	0002df08 	.word	0x0002df08
 800364c:	0002df28 	.word	0x0002df28
 8003650:	0002dfb0 	.word	0x0002dfb0
 8003654:	0002df10 	.word	0x0002df10
 8003658:	00013fc0 	.word	0x00013fc0
 800365c:	4bb4      	ldr	r3, [pc, #720]	@ (8003930 <NLLS+0x2690>)
 800365e:	443b      	add	r3, r7
 8003660:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	f7fc fe30 	bl	80002cc <__adddf3>
 800366c:	4602      	mov	r2, r0
 800366e:	460b      	mov	r3, r1
 8003670:	4692      	mov	sl, r2
 8003672:	469b      	mov	fp, r3
 8003674:	4baf      	ldr	r3, [pc, #700]	@ (8003934 <NLLS+0x2694>)
 8003676:	443b      	add	r3, r7
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	00da      	lsls	r2, r3, #3
 800367c:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8003680:	f6a3 7388 	subw	r3, r3, #3976	@ 0xf88
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4413      	add	r3, r2
 8003688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368c:	49aa      	ldr	r1, [pc, #680]	@ (8003938 <NLLS+0x2698>)
 800368e:	4439      	add	r1, r7
 8003690:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003694:	f7fc fe18 	bl	80002c8 <__aeabi_dsub>
 8003698:	4602      	mov	r2, r0
 800369a:	460b      	mov	r3, r1
 800369c:	4610      	mov	r0, r2
 800369e:	4619      	mov	r1, r3
 80036a0:	4ba6      	ldr	r3, [pc, #664]	@ (800393c <NLLS+0x269c>)
 80036a2:	443b      	add	r3, r7
 80036a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a8:	f7fc ffc6 	bl	8000638 <__aeabi_dmul>
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	4690      	mov	r8, r2
 80036b2:	4699      	mov	r9, r3
 80036b4:	4b9e      	ldr	r3, [pc, #632]	@ (8003930 <NLLS+0x2690>)
 80036b6:	443b      	add	r3, r7
 80036b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036bc:	49a0      	ldr	r1, [pc, #640]	@ (8003940 <NLLS+0x26a0>)
 80036be:	4439      	add	r1, r7
 80036c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80036c4:	f7fc ffb8 	bl	8000638 <__aeabi_dmul>
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	4614      	mov	r4, r2
 80036ce:	461d      	mov	r5, r3
 80036d0:	4b98      	ldr	r3, [pc, #608]	@ (8003934 <NLLS+0x2694>)
 80036d2:	443b      	add	r3, r7
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	00da      	lsls	r2, r3, #3
 80036d8:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80036dc:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4413      	add	r3, r2
 80036e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e8:	4996      	ldr	r1, [pc, #600]	@ (8003944 <NLLS+0x26a4>)
 80036ea:	4439      	add	r1, r7
 80036ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80036f0:	f7fc fdea 	bl	80002c8 <__aeabi_dsub>
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	4620      	mov	r0, r4
 80036fa:	4629      	mov	r1, r5
 80036fc:	f7fc ff9c 	bl	8000638 <__aeabi_dmul>
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	4640      	mov	r0, r8
 8003706:	4649      	mov	r1, r9
 8003708:	f7fc fdde 	bl	80002c8 <__aeabi_dsub>
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4650      	mov	r0, sl
 8003712:	4659      	mov	r1, fp
 8003714:	f7fc ff90 	bl	8000638 <__aeabi_dmul>
 8003718:	4602      	mov	r2, r0
 800371a:	460b      	mov	r3, r1
 800371c:	4614      	mov	r4, r2
 800371e:	461d      	mov	r5, r3
 8003720:	4b86      	ldr	r3, [pc, #536]	@ (800393c <NLLS+0x269c>)
 8003722:	443b      	add	r3, r7
 8003724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003728:	4984      	ldr	r1, [pc, #528]	@ (800393c <NLLS+0x269c>)
 800372a:	4439      	add	r1, r7
 800372c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003730:	f7fc ff82 	bl	8000638 <__aeabi_dmul>
 8003734:	4602      	mov	r2, r0
 8003736:	460b      	mov	r3, r1
 8003738:	4610      	mov	r0, r2
 800373a:	4619      	mov	r1, r3
 800373c:	4b80      	ldr	r3, [pc, #512]	@ (8003940 <NLLS+0x26a0>)
 800373e:	443b      	add	r3, r7
 8003740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003744:	f7fc ff78 	bl	8000638 <__aeabi_dmul>
 8003748:	4602      	mov	r2, r0
 800374a:	460b      	mov	r3, r1
 800374c:	4610      	mov	r0, r2
 800374e:	4619      	mov	r1, r3
 8003750:	4b7d      	ldr	r3, [pc, #500]	@ (8003948 <NLLS+0x26a8>)
 8003752:	443b      	add	r3, r7
 8003754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003758:	f7fc ff6e 	bl	8000638 <__aeabi_dmul>
 800375c:	4602      	mov	r2, r0
 800375e:	460b      	mov	r3, r1
 8003760:	4610      	mov	r0, r2
 8003762:	4619      	mov	r1, r3
 8003764:	4b78      	ldr	r3, [pc, #480]	@ (8003948 <NLLS+0x26a8>)
 8003766:	443b      	add	r3, r7
 8003768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376c:	f7fc ff64 	bl	8000638 <__aeabi_dmul>
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	4620      	mov	r0, r4
 8003776:	4629      	mov	r1, r5
 8003778:	f7fd f888 	bl	800088c <__aeabi_ddiv>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003784:	f7fc fda0 	bl	80002c8 <__aeabi_dsub>
 8003788:	4602      	mov	r2, r0
 800378a:	460b      	mov	r3, r1
 800378c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8003790:	4b67      	ldr	r3, [pc, #412]	@ (8003930 <NLLS+0x2690>)
 8003792:	443b      	add	r3, r7
 8003794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003798:	496c      	ldr	r1, [pc, #432]	@ (800394c <NLLS+0x26ac>)
 800379a:	4439      	add	r1, r7
 800379c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80037a0:	f7fc ff4a 	bl	8000638 <__aeabi_dmul>
 80037a4:	4602      	mov	r2, r0
 80037a6:	460b      	mov	r3, r1
 80037a8:	4614      	mov	r4, r2
 80037aa:	461d      	mov	r5, r3
 80037ac:	4b66      	ldr	r3, [pc, #408]	@ (8003948 <NLLS+0x26a8>)
 80037ae:	443b      	add	r3, r7
 80037b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b4:	4966      	ldr	r1, [pc, #408]	@ (8003950 <NLLS+0x26b0>)
 80037b6:	4439      	add	r1, r7
 80037b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80037bc:	f7fc ff3c 	bl	8000638 <__aeabi_dmul>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	4610      	mov	r0, r2
 80037c6:	4619      	mov	r1, r3
 80037c8:	4b62      	ldr	r3, [pc, #392]	@ (8003954 <NLLS+0x26b4>)
 80037ca:	443b      	add	r3, r7
 80037cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d0:	f7fc ff32 	bl	8000638 <__aeabi_dmul>
 80037d4:	4602      	mov	r2, r0
 80037d6:	460b      	mov	r3, r1
 80037d8:	4620      	mov	r0, r4
 80037da:	4629      	mov	r1, r5
 80037dc:	f7fc fd74 	bl	80002c8 <__aeabi_dsub>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4610      	mov	r0, r2
 80037e6:	4619      	mov	r1, r3
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	f7fc fd6e 	bl	80002cc <__adddf3>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4692      	mov	sl, r2
 80037f6:	469b      	mov	fp, r3
 80037f8:	4b57      	ldr	r3, [pc, #348]	@ (8003958 <NLLS+0x26b8>)
 80037fa:	443b      	add	r3, r7
 80037fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003800:	494f      	ldr	r1, [pc, #316]	@ (8003940 <NLLS+0x26a0>)
 8003802:	4439      	add	r1, r7
 8003804:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003808:	f7fc ff16 	bl	8000638 <__aeabi_dmul>
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	4690      	mov	r8, r2
 8003812:	4699      	mov	r9, r3
 8003814:	4b46      	ldr	r3, [pc, #280]	@ (8003930 <NLLS+0x2690>)
 8003816:	443b      	add	r3, r7
 8003818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381c:	494b      	ldr	r1, [pc, #300]	@ (800394c <NLLS+0x26ac>)
 800381e:	4439      	add	r1, r7
 8003820:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003824:	f7fc ff08 	bl	8000638 <__aeabi_dmul>
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	4614      	mov	r4, r2
 800382e:	461d      	mov	r5, r3
 8003830:	4b45      	ldr	r3, [pc, #276]	@ (8003948 <NLLS+0x26a8>)
 8003832:	443b      	add	r3, r7
 8003834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003838:	4945      	ldr	r1, [pc, #276]	@ (8003950 <NLLS+0x26b0>)
 800383a:	4439      	add	r1, r7
 800383c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003840:	f7fc fefa 	bl	8000638 <__aeabi_dmul>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4610      	mov	r0, r2
 800384a:	4619      	mov	r1, r3
 800384c:	4b41      	ldr	r3, [pc, #260]	@ (8003954 <NLLS+0x26b4>)
 800384e:	443b      	add	r3, r7
 8003850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003854:	f7fc fef0 	bl	8000638 <__aeabi_dmul>
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	4620      	mov	r0, r4
 800385e:	4629      	mov	r1, r5
 8003860:	f7fc fd32 	bl	80002c8 <__aeabi_dsub>
 8003864:	4602      	mov	r2, r0
 8003866:	460b      	mov	r3, r1
 8003868:	4640      	mov	r0, r8
 800386a:	4649      	mov	r1, r9
 800386c:	f7fc fee4 	bl	8000638 <__aeabi_dmul>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4614      	mov	r4, r2
 8003876:	461d      	mov	r5, r3
 8003878:	4b2e      	ldr	r3, [pc, #184]	@ (8003934 <NLLS+0x2694>)
 800387a:	443b      	add	r3, r7
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	00da      	lsls	r2, r3, #3
 8003880:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8003884:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4413      	add	r3, r2
 800388c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003890:	492c      	ldr	r1, [pc, #176]	@ (8003944 <NLLS+0x26a4>)
 8003892:	4439      	add	r1, r7
 8003894:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003898:	f7fc fd16 	bl	80002c8 <__aeabi_dsub>
 800389c:	4602      	mov	r2, r0
 800389e:	460b      	mov	r3, r1
 80038a0:	4620      	mov	r0, r4
 80038a2:	4629      	mov	r1, r5
 80038a4:	f7fc fec8 	bl	8000638 <__aeabi_dmul>
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	4690      	mov	r8, r2
 80038ae:	4699      	mov	r9, r3
 80038b0:	4b23      	ldr	r3, [pc, #140]	@ (8003940 <NLLS+0x26a0>)
 80038b2:	443b      	add	r3, r7
 80038b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b8:	4920      	ldr	r1, [pc, #128]	@ (800393c <NLLS+0x269c>)
 80038ba:	4439      	add	r1, r7
 80038bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80038c0:	f7fc feba 	bl	8000638 <__aeabi_dmul>
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
 80038c8:	4610      	mov	r0, r2
 80038ca:	4619      	mov	r1, r3
 80038cc:	4b1e      	ldr	r3, [pc, #120]	@ (8003948 <NLLS+0x26a8>)
 80038ce:	443b      	add	r3, r7
 80038d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d4:	f7fc feb0 	bl	8000638 <__aeabi_dmul>
 80038d8:	4602      	mov	r2, r0
 80038da:	460b      	mov	r3, r1
 80038dc:	4614      	mov	r4, r2
 80038de:	461d      	mov	r5, r3
 80038e0:	4b14      	ldr	r3, [pc, #80]	@ (8003934 <NLLS+0x2694>)
 80038e2:	443b      	add	r3, r7
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	00da      	lsls	r2, r3, #3
 80038e8:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80038ec:	f6a3 738c 	subw	r3, r3, #3980	@ 0xf8c
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4413      	add	r3, r2
 80038f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f8:	4918      	ldr	r1, [pc, #96]	@ (800395c <NLLS+0x26bc>)
 80038fa:	4439      	add	r1, r7
 80038fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003900:	f7fc fce2 	bl	80002c8 <__aeabi_dsub>
 8003904:	4602      	mov	r2, r0
 8003906:	460b      	mov	r3, r1
 8003908:	4620      	mov	r0, r4
 800390a:	4629      	mov	r1, r5
 800390c:	f7fc fe94 	bl	8000638 <__aeabi_dmul>
 8003910:	4602      	mov	r2, r0
 8003912:	460b      	mov	r3, r1
 8003914:	4640      	mov	r0, r8
 8003916:	4649      	mov	r1, r9
 8003918:	f7fc fcd8 	bl	80002cc <__adddf3>
 800391c:	4602      	mov	r2, r0
 800391e:	460b      	mov	r3, r1
 8003920:	4690      	mov	r8, r2
 8003922:	4699      	mov	r9, r3
 8003924:	4b0c      	ldr	r3, [pc, #48]	@ (8003958 <NLLS+0x26b8>)
 8003926:	443b      	add	r3, r7
 8003928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392c:	e018      	b.n	8003960 <NLLS+0x26c0>
 800392e:	bf00      	nop
 8003930:	0002df20 	.word	0x0002df20
 8003934:	0002df58 	.word	0x0002df58
 8003938:	0002df90 	.word	0x0002df90
 800393c:	0002dfb0 	.word	0x0002dfb0
 8003940:	0002dfa8 	.word	0x0002dfa8
 8003944:	0002df98 	.word	0x0002df98
 8003948:	0002df08 	.word	0x0002df08
 800394c:	0002df18 	.word	0x0002df18
 8003950:	0002df00 	.word	0x0002df00
 8003954:	0002df28 	.word	0x0002df28
 8003958:	0002dfa0 	.word	0x0002dfa0
 800395c:	0002df88 	.word	0x0002df88
 8003960:	49b5      	ldr	r1, [pc, #724]	@ (8003c38 <NLLS+0x2998>)
 8003962:	4439      	add	r1, r7
 8003964:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003968:	f7fc fe66 	bl	8000638 <__aeabi_dmul>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4610      	mov	r0, r2
 8003972:	4619      	mov	r1, r3
 8003974:	4bb1      	ldr	r3, [pc, #708]	@ (8003c3c <NLLS+0x299c>)
 8003976:	443b      	add	r3, r7
 8003978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397c:	f7fc fe5c 	bl	8000638 <__aeabi_dmul>
 8003980:	4602      	mov	r2, r0
 8003982:	460b      	mov	r3, r1
 8003984:	4614      	mov	r4, r2
 8003986:	461d      	mov	r5, r3
 8003988:	4bad      	ldr	r3, [pc, #692]	@ (8003c40 <NLLS+0x29a0>)
 800398a:	443b      	add	r3, r7
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	00da      	lsls	r2, r3, #3
 8003990:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8003994:	f6a3 7388 	subw	r3, r3, #3976	@ 0xf88
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4413      	add	r3, r2
 800399c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a0:	49a8      	ldr	r1, [pc, #672]	@ (8003c44 <NLLS+0x29a4>)
 80039a2:	4439      	add	r1, r7
 80039a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80039a8:	f7fc fc8e 	bl	80002c8 <__aeabi_dsub>
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4620      	mov	r0, r4
 80039b2:	4629      	mov	r1, r5
 80039b4:	f7fc fe40 	bl	8000638 <__aeabi_dmul>
 80039b8:	4602      	mov	r2, r0
 80039ba:	460b      	mov	r3, r1
 80039bc:	4640      	mov	r0, r8
 80039be:	4649      	mov	r1, r9
 80039c0:	f7fc fc82 	bl	80002c8 <__aeabi_dsub>
 80039c4:	4602      	mov	r2, r0
 80039c6:	460b      	mov	r3, r1
 80039c8:	4650      	mov	r0, sl
 80039ca:	4659      	mov	r1, fp
 80039cc:	f7fc fe34 	bl	8000638 <__aeabi_dmul>
 80039d0:	4602      	mov	r2, r0
 80039d2:	460b      	mov	r3, r1
 80039d4:	4614      	mov	r4, r2
 80039d6:	461d      	mov	r5, r3
 80039d8:	4b97      	ldr	r3, [pc, #604]	@ (8003c38 <NLLS+0x2998>)
 80039da:	443b      	add	r3, r7
 80039dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e0:	4995      	ldr	r1, [pc, #596]	@ (8003c38 <NLLS+0x2998>)
 80039e2:	4439      	add	r1, r7
 80039e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80039e8:	f7fc fe26 	bl	8000638 <__aeabi_dmul>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4610      	mov	r0, r2
 80039f2:	4619      	mov	r1, r3
 80039f4:	4b94      	ldr	r3, [pc, #592]	@ (8003c48 <NLLS+0x29a8>)
 80039f6:	443b      	add	r3, r7
 80039f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fc:	f7fc fe1c 	bl	8000638 <__aeabi_dmul>
 8003a00:	4602      	mov	r2, r0
 8003a02:	460b      	mov	r3, r1
 8003a04:	4610      	mov	r0, r2
 8003a06:	4619      	mov	r1, r3
 8003a08:	4b90      	ldr	r3, [pc, #576]	@ (8003c4c <NLLS+0x29ac>)
 8003a0a:	443b      	add	r3, r7
 8003a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a10:	f7fc fe12 	bl	8000638 <__aeabi_dmul>
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	4610      	mov	r0, r2
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	4b8c      	ldr	r3, [pc, #560]	@ (8003c50 <NLLS+0x29b0>)
 8003a1e:	443b      	add	r3, r7
 8003a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a24:	f7fc fe08 	bl	8000638 <__aeabi_dmul>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4610      	mov	r0, r2
 8003a2e:	4619      	mov	r1, r3
 8003a30:	4b87      	ldr	r3, [pc, #540]	@ (8003c50 <NLLS+0x29b0>)
 8003a32:	443b      	add	r3, r7
 8003a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a38:	f7fc fdfe 	bl	8000638 <__aeabi_dmul>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4610      	mov	r0, r2
 8003a42:	4619      	mov	r1, r3
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	f7fc fc40 	bl	80002cc <__adddf3>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	460b      	mov	r3, r1
 8003a50:	4610      	mov	r0, r2
 8003a52:	4619      	mov	r1, r3
 8003a54:	4b7f      	ldr	r3, [pc, #508]	@ (8003c54 <NLLS+0x29b4>)
 8003a56:	443b      	add	r3, r7
 8003a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5c:	f7fc fdec 	bl	8000638 <__aeabi_dmul>
 8003a60:	4602      	mov	r2, r0
 8003a62:	460b      	mov	r3, r1
 8003a64:	4610      	mov	r0, r2
 8003a66:	4619      	mov	r1, r3
 8003a68:	4b7a      	ldr	r3, [pc, #488]	@ (8003c54 <NLLS+0x29b4>)
 8003a6a:	443b      	add	r3, r7
 8003a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a70:	f7fc fde2 	bl	8000638 <__aeabi_dmul>
 8003a74:	4602      	mov	r2, r0
 8003a76:	460b      	mov	r3, r1
 8003a78:	4610      	mov	r0, r2
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4b76      	ldr	r3, [pc, #472]	@ (8003c58 <NLLS+0x29b8>)
 8003a7e:	443b      	add	r3, r7
 8003a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a84:	f7fc fdd8 	bl	8000638 <__aeabi_dmul>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4610      	mov	r0, r2
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4b71      	ldr	r3, [pc, #452]	@ (8003c58 <NLLS+0x29b8>)
 8003a92:	443b      	add	r3, r7
 8003a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a98:	f7fc fdce 	bl	8000638 <__aeabi_dmul>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	4629      	mov	r1, r5
 8003aa4:	f7fc fef2 	bl	800088c <__aeabi_ddiv>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ab0:	f7fc fc0c 	bl	80002cc <__adddf3>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4968      	ldr	r1, [pc, #416]	@ (8003c5c <NLLS+0x29bc>)
 8003aba:	4439      	add	r1, r7
 8003abc:	f5a1 70d8 	sub.w	r0, r1, #432	@ 0x1b0
 8003ac0:	495f      	ldr	r1, [pc, #380]	@ (8003c40 <NLLS+0x29a0>)
 8003ac2:	4439      	add	r1, r7
 8003ac4:	6809      	ldr	r1, [r1, #0]
 8003ac6:	f601 5105 	addw	r1, r1, #3333	@ 0xd05
 8003aca:	00c9      	lsls	r1, r1, #3
 8003acc:	4401      	add	r1, r0
 8003ace:	e9c1 2300 	strd	r2, r3, [r1]

            mat_H[4][i] = (2*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i])))/(sx*sy*sy*cos_rho*cos_rho) - (2*sin_lambda*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sy*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8003ad2:	4b5b      	ldr	r3, [pc, #364]	@ (8003c40 <NLLS+0x29a0>)
 8003ad4:	443b      	add	r3, r7
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	f507 627c 	add.w	r2, r7, #4032	@ 0xfc0
 8003ade:	f6a2 7288 	subw	r2, r2, #3976	@ 0xf88
 8003ae2:	6812      	ldr	r2, [r2, #0]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aea:	4956      	ldr	r1, [pc, #344]	@ (8003c44 <NLLS+0x29a4>)
 8003aec:	4439      	add	r1, r7
 8003aee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003af2:	f7fc fbe9 	bl	80002c8 <__aeabi_dsub>
 8003af6:	4602      	mov	r2, r0
 8003af8:	460b      	mov	r3, r1
 8003afa:	4610      	mov	r0, r2
 8003afc:	4619      	mov	r1, r3
 8003afe:	4b4e      	ldr	r3, [pc, #312]	@ (8003c38 <NLLS+0x2998>)
 8003b00:	443b      	add	r3, r7
 8003b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b06:	f7fc fd97 	bl	8000638 <__aeabi_dmul>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	4690      	mov	r8, r2
 8003b10:	4699      	mov	r9, r3
 8003b12:	4b53      	ldr	r3, [pc, #332]	@ (8003c60 <NLLS+0x29c0>)
 8003b14:	443b      	add	r3, r7
 8003b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1a:	494b      	ldr	r1, [pc, #300]	@ (8003c48 <NLLS+0x29a8>)
 8003b1c:	4439      	add	r1, r7
 8003b1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b22:	f7fc fd89 	bl	8000638 <__aeabi_dmul>
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	4614      	mov	r4, r2
 8003b2c:	461d      	mov	r5, r3
 8003b2e:	4b44      	ldr	r3, [pc, #272]	@ (8003c40 <NLLS+0x29a0>)
 8003b30:	443b      	add	r3, r7
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	00da      	lsls	r2, r3, #3
 8003b36:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8003b3a:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4413      	add	r3, r2
 8003b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b46:	4947      	ldr	r1, [pc, #284]	@ (8003c64 <NLLS+0x29c4>)
 8003b48:	4439      	add	r1, r7
 8003b4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b4e:	f7fc fbbb 	bl	80002c8 <__aeabi_dsub>
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	4620      	mov	r0, r4
 8003b58:	4629      	mov	r1, r5
 8003b5a:	f7fc fd6d 	bl	8000638 <__aeabi_dmul>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	4640      	mov	r0, r8
 8003b64:	4649      	mov	r1, r9
 8003b66:	f7fc fbaf 	bl	80002c8 <__aeabi_dsub>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	4610      	mov	r0, r2
 8003b70:	4619      	mov	r1, r3
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	f7fc fba9 	bl	80002cc <__adddf3>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	4614      	mov	r4, r2
 8003b80:	461d      	mov	r5, r3
 8003b82:	4b31      	ldr	r3, [pc, #196]	@ (8003c48 <NLLS+0x29a8>)
 8003b84:	443b      	add	r3, r7
 8003b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8a:	492b      	ldr	r1, [pc, #172]	@ (8003c38 <NLLS+0x2998>)
 8003b8c:	4439      	add	r1, r7
 8003b8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b92:	f7fc fd51 	bl	8000638 <__aeabi_dmul>
 8003b96:	4602      	mov	r2, r0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4610      	mov	r0, r2
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	4b2a      	ldr	r3, [pc, #168]	@ (8003c48 <NLLS+0x29a8>)
 8003ba0:	443b      	add	r3, r7
 8003ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba6:	f7fc fd47 	bl	8000638 <__aeabi_dmul>
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	4610      	mov	r0, r2
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4b29      	ldr	r3, [pc, #164]	@ (8003c58 <NLLS+0x29b8>)
 8003bb4:	443b      	add	r3, r7
 8003bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bba:	f7fc fd3d 	bl	8000638 <__aeabi_dmul>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4b24      	ldr	r3, [pc, #144]	@ (8003c58 <NLLS+0x29b8>)
 8003bc8:	443b      	add	r3, r7
 8003bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bce:	f7fc fd33 	bl	8000638 <__aeabi_dmul>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	4629      	mov	r1, r5
 8003bda:	f7fc fe57 	bl	800088c <__aeabi_ddiv>
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8003be6:	4b15      	ldr	r3, [pc, #84]	@ (8003c3c <NLLS+0x299c>)
 8003be8:	443b      	add	r3, r7
 8003bea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003bee:	4602      	mov	r2, r0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	f7fc fb6b 	bl	80002cc <__adddf3>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	4692      	mov	sl, r2
 8003bfc:	469b      	mov	fp, r3
 8003bfe:	4b13      	ldr	r3, [pc, #76]	@ (8003c4c <NLLS+0x29ac>)
 8003c00:	443b      	add	r3, r7
 8003c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c06:	4910      	ldr	r1, [pc, #64]	@ (8003c48 <NLLS+0x29a8>)
 8003c08:	4439      	add	r1, r7
 8003c0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c0e:	f7fc fd13 	bl	8000638 <__aeabi_dmul>
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	4690      	mov	r8, r2
 8003c18:	4699      	mov	r9, r3
 8003c1a:	4b11      	ldr	r3, [pc, #68]	@ (8003c60 <NLLS+0x29c0>)
 8003c1c:	443b      	add	r3, r7
 8003c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c22:	4906      	ldr	r1, [pc, #24]	@ (8003c3c <NLLS+0x299c>)
 8003c24:	4439      	add	r1, r7
 8003c26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c2a:	f7fc fd05 	bl	8000638 <__aeabi_dmul>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	4614      	mov	r4, r2
 8003c34:	461d      	mov	r5, r3
 8003c36:	e017      	b.n	8003c68 <NLLS+0x29c8>
 8003c38:	0002dfb0 	.word	0x0002dfb0
 8003c3c:	0002df18 	.word	0x0002df18
 8003c40:	0002df58 	.word	0x0002df58
 8003c44:	0002df90 	.word	0x0002df90
 8003c48:	0002dfa8 	.word	0x0002dfa8
 8003c4c:	0002dfa0 	.word	0x0002dfa0
 8003c50:	0002df00 	.word	0x0002df00
 8003c54:	0002df10 	.word	0x0002df10
 8003c58:	0002df08 	.word	0x0002df08
 8003c5c:	00013fc0 	.word	0x00013fc0
 8003c60:	0002df20 	.word	0x0002df20
 8003c64:	0002df98 	.word	0x0002df98
 8003c68:	4bb5      	ldr	r3, [pc, #724]	@ (8003f40 <NLLS+0x2ca0>)
 8003c6a:	443b      	add	r3, r7
 8003c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c70:	49b4      	ldr	r1, [pc, #720]	@ (8003f44 <NLLS+0x2ca4>)
 8003c72:	4439      	add	r1, r7
 8003c74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c78:	f7fc fcde 	bl	8000638 <__aeabi_dmul>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4610      	mov	r0, r2
 8003c82:	4619      	mov	r1, r3
 8003c84:	4bb0      	ldr	r3, [pc, #704]	@ (8003f48 <NLLS+0x2ca8>)
 8003c86:	443b      	add	r3, r7
 8003c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8c:	f7fc fcd4 	bl	8000638 <__aeabi_dmul>
 8003c90:	4602      	mov	r2, r0
 8003c92:	460b      	mov	r3, r1
 8003c94:	4620      	mov	r0, r4
 8003c96:	4629      	mov	r1, r5
 8003c98:	f7fc fb16 	bl	80002c8 <__aeabi_dsub>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4640      	mov	r0, r8
 8003ca2:	4649      	mov	r1, r9
 8003ca4:	f7fc fcc8 	bl	8000638 <__aeabi_dmul>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	4614      	mov	r4, r2
 8003cae:	461d      	mov	r5, r3
 8003cb0:	4ba6      	ldr	r3, [pc, #664]	@ (8003f4c <NLLS+0x2cac>)
 8003cb2:	443b      	add	r3, r7
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	00da      	lsls	r2, r3, #3
 8003cb8:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8003cbc:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc8:	49a1      	ldr	r1, [pc, #644]	@ (8003f50 <NLLS+0x2cb0>)
 8003cca:	4439      	add	r1, r7
 8003ccc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003cd0:	f7fc fafa 	bl	80002c8 <__aeabi_dsub>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	4620      	mov	r0, r4
 8003cda:	4629      	mov	r1, r5
 8003cdc:	f7fc fcac 	bl	8000638 <__aeabi_dmul>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4690      	mov	r8, r2
 8003ce6:	4699      	mov	r9, r3
 8003ce8:	4b9a      	ldr	r3, [pc, #616]	@ (8003f54 <NLLS+0x2cb4>)
 8003cea:	443b      	add	r3, r7
 8003cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf0:	4999      	ldr	r1, [pc, #612]	@ (8003f58 <NLLS+0x2cb8>)
 8003cf2:	4439      	add	r1, r7
 8003cf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003cf8:	f7fc fc9e 	bl	8000638 <__aeabi_dmul>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4610      	mov	r0, r2
 8003d02:	4619      	mov	r1, r3
 8003d04:	4b8e      	ldr	r3, [pc, #568]	@ (8003f40 <NLLS+0x2ca0>)
 8003d06:	443b      	add	r3, r7
 8003d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0c:	f7fc fc94 	bl	8000638 <__aeabi_dmul>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4614      	mov	r4, r2
 8003d16:	461d      	mov	r5, r3
 8003d18:	4b8c      	ldr	r3, [pc, #560]	@ (8003f4c <NLLS+0x2cac>)
 8003d1a:	443b      	add	r3, r7
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	00da      	lsls	r2, r3, #3
 8003d20:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8003d24:	f6a3 738c 	subw	r3, r3, #3980	@ 0xf8c
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d30:	498a      	ldr	r1, [pc, #552]	@ (8003f5c <NLLS+0x2cbc>)
 8003d32:	4439      	add	r1, r7
 8003d34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d38:	f7fc fac6 	bl	80002c8 <__aeabi_dsub>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	460b      	mov	r3, r1
 8003d40:	4620      	mov	r0, r4
 8003d42:	4629      	mov	r1, r5
 8003d44:	f7fc fc78 	bl	8000638 <__aeabi_dmul>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4640      	mov	r0, r8
 8003d4e:	4649      	mov	r1, r9
 8003d50:	f7fc fabc 	bl	80002cc <__adddf3>
 8003d54:	4602      	mov	r2, r0
 8003d56:	460b      	mov	r3, r1
 8003d58:	4690      	mov	r8, r2
 8003d5a:	4699      	mov	r9, r3
 8003d5c:	4b80      	ldr	r3, [pc, #512]	@ (8003f60 <NLLS+0x2cc0>)
 8003d5e:	443b      	add	r3, r7
 8003d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d64:	497c      	ldr	r1, [pc, #496]	@ (8003f58 <NLLS+0x2cb8>)
 8003d66:	4439      	add	r1, r7
 8003d68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d6c:	f7fc fc64 	bl	8000638 <__aeabi_dmul>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4610      	mov	r0, r2
 8003d76:	4619      	mov	r1, r3
 8003d78:	4b7a      	ldr	r3, [pc, #488]	@ (8003f64 <NLLS+0x2cc4>)
 8003d7a:	443b      	add	r3, r7
 8003d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d80:	f7fc fc5a 	bl	8000638 <__aeabi_dmul>
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	4614      	mov	r4, r2
 8003d8a:	461d      	mov	r5, r3
 8003d8c:	4b6f      	ldr	r3, [pc, #444]	@ (8003f4c <NLLS+0x2cac>)
 8003d8e:	443b      	add	r3, r7
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	00da      	lsls	r2, r3, #3
 8003d94:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8003d98:	f6a3 7388 	subw	r3, r3, #3976	@ 0xf88
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4413      	add	r3, r2
 8003da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da4:	4970      	ldr	r1, [pc, #448]	@ (8003f68 <NLLS+0x2cc8>)
 8003da6:	4439      	add	r1, r7
 8003da8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003dac:	f7fc fa8c 	bl	80002c8 <__aeabi_dsub>
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	4620      	mov	r0, r4
 8003db6:	4629      	mov	r1, r5
 8003db8:	f7fc fc3e 	bl	8000638 <__aeabi_dmul>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	4640      	mov	r0, r8
 8003dc2:	4649      	mov	r1, r9
 8003dc4:	f7fc fa80 	bl	80002c8 <__aeabi_dsub>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4650      	mov	r0, sl
 8003dce:	4659      	mov	r1, fp
 8003dd0:	f7fc fc32 	bl	8000638 <__aeabi_dmul>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	4614      	mov	r4, r2
 8003dda:	461d      	mov	r5, r3
 8003ddc:	4b5d      	ldr	r3, [pc, #372]	@ (8003f54 <NLLS+0x2cb4>)
 8003dde:	443b      	add	r3, r7
 8003de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de4:	495c      	ldr	r1, [pc, #368]	@ (8003f58 <NLLS+0x2cb8>)
 8003de6:	4439      	add	r1, r7
 8003de8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003dec:	f7fc fc24 	bl	8000638 <__aeabi_dmul>
 8003df0:	4602      	mov	r2, r0
 8003df2:	460b      	mov	r3, r1
 8003df4:	4610      	mov	r0, r2
 8003df6:	4619      	mov	r1, r3
 8003df8:	4b56      	ldr	r3, [pc, #344]	@ (8003f54 <NLLS+0x2cb4>)
 8003dfa:	443b      	add	r3, r7
 8003dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e00:	f7fc fc1a 	bl	8000638 <__aeabi_dmul>
 8003e04:	4602      	mov	r2, r0
 8003e06:	460b      	mov	r3, r1
 8003e08:	4610      	mov	r0, r2
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	4b54      	ldr	r3, [pc, #336]	@ (8003f60 <NLLS+0x2cc0>)
 8003e0e:	443b      	add	r3, r7
 8003e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e14:	f7fc fc10 	bl	8000638 <__aeabi_dmul>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	4610      	mov	r0, r2
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4b48      	ldr	r3, [pc, #288]	@ (8003f44 <NLLS+0x2ca4>)
 8003e22:	443b      	add	r3, r7
 8003e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e28:	f7fc fc06 	bl	8000638 <__aeabi_dmul>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4610      	mov	r0, r2
 8003e32:	4619      	mov	r1, r3
 8003e34:	4b43      	ldr	r3, [pc, #268]	@ (8003f44 <NLLS+0x2ca4>)
 8003e36:	443b      	add	r3, r7
 8003e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3c:	f7fc fbfc 	bl	8000638 <__aeabi_dmul>
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	4610      	mov	r0, r2
 8003e46:	4619      	mov	r1, r3
 8003e48:	4b48      	ldr	r3, [pc, #288]	@ (8003f6c <NLLS+0x2ccc>)
 8003e4a:	443b      	add	r3, r7
 8003e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e50:	f7fc fbf2 	bl	8000638 <__aeabi_dmul>
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	4610      	mov	r0, r2
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4b43      	ldr	r3, [pc, #268]	@ (8003f6c <NLLS+0x2ccc>)
 8003e5e:	443b      	add	r3, r7
 8003e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e64:	f7fc fbe8 	bl	8000638 <__aeabi_dmul>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	4610      	mov	r0, r2
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4b33      	ldr	r3, [pc, #204]	@ (8003f40 <NLLS+0x2ca0>)
 8003e72:	443b      	add	r3, r7
 8003e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e78:	f7fc fbde 	bl	8000638 <__aeabi_dmul>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4610      	mov	r0, r2
 8003e82:	4619      	mov	r1, r3
 8003e84:	4b2e      	ldr	r3, [pc, #184]	@ (8003f40 <NLLS+0x2ca0>)
 8003e86:	443b      	add	r3, r7
 8003e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8c:	f7fc fbd4 	bl	8000638 <__aeabi_dmul>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4620      	mov	r0, r4
 8003e96:	4629      	mov	r1, r5
 8003e98:	f7fc fcf8 	bl	800088c <__aeabi_ddiv>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ea4:	f7fc fa10 	bl	80002c8 <__aeabi_dsub>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4610      	mov	r0, r2
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4b2f      	ldr	r3, [pc, #188]	@ (8003f70 <NLLS+0x2cd0>)
 8003eb2:	443b      	add	r3, r7
 8003eb4:	f5a3 72d8 	sub.w	r2, r3, #432	@ 0x1b0
 8003eb8:	4b24      	ldr	r3, [pc, #144]	@ (8003f4c <NLLS+0x2cac>)
 8003eba:	443b      	add	r3, r7
 8003ebc:	681c      	ldr	r4, [r3, #0]
 8003ebe:	f241 135c 	movw	r3, #4444	@ 0x115c
 8003ec2:	4423      	add	r3, r4
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	e9c3 0100 	strd	r0, r1, [r3]

            mat_H[5][i] = (2*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho);
 8003ecc:	4b24      	ldr	r3, [pc, #144]	@ (8003f60 <NLLS+0x2cc0>)
 8003ece:	443b      	add	r3, r7
 8003ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed4:	491f      	ldr	r1, [pc, #124]	@ (8003f54 <NLLS+0x2cb4>)
 8003ed6:	4439      	add	r1, r7
 8003ed8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003edc:	f7fc fbac 	bl	8000638 <__aeabi_dmul>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4690      	mov	r8, r2
 8003ee6:	4699      	mov	r9, r3
 8003ee8:	4b22      	ldr	r3, [pc, #136]	@ (8003f74 <NLLS+0x2cd4>)
 8003eea:	443b      	add	r3, r7
 8003eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef0:	491c      	ldr	r1, [pc, #112]	@ (8003f64 <NLLS+0x2cc4>)
 8003ef2:	4439      	add	r1, r7
 8003ef4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ef8:	f7fc fb9e 	bl	8000638 <__aeabi_dmul>
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	4614      	mov	r4, r2
 8003f02:	461d      	mov	r5, r3
 8003f04:	4b0e      	ldr	r3, [pc, #56]	@ (8003f40 <NLLS+0x2ca0>)
 8003f06:	443b      	add	r3, r7
 8003f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0c:	490d      	ldr	r1, [pc, #52]	@ (8003f44 <NLLS+0x2ca4>)
 8003f0e:	4439      	add	r1, r7
 8003f10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f14:	f7fc fb90 	bl	8000638 <__aeabi_dmul>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	4619      	mov	r1, r3
 8003f20:	4b09      	ldr	r3, [pc, #36]	@ (8003f48 <NLLS+0x2ca8>)
 8003f22:	443b      	add	r3, r7
 8003f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f28:	f7fc fb86 	bl	8000638 <__aeabi_dmul>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	460b      	mov	r3, r1
 8003f30:	4620      	mov	r0, r4
 8003f32:	4629      	mov	r1, r5
 8003f34:	f7fc f9c8 	bl	80002c8 <__aeabi_dsub>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4640      	mov	r0, r8
 8003f3e:	e01b      	b.n	8003f78 <NLLS+0x2cd8>
 8003f40:	0002df08 	.word	0x0002df08
 8003f44:	0002df00 	.word	0x0002df00
 8003f48:	0002df28 	.word	0x0002df28
 8003f4c:	0002df58 	.word	0x0002df58
 8003f50:	0002df98 	.word	0x0002df98
 8003f54:	0002dfa8 	.word	0x0002dfa8
 8003f58:	0002dfb0 	.word	0x0002dfb0
 8003f5c:	0002df88 	.word	0x0002df88
 8003f60:	0002dfa0 	.word	0x0002dfa0
 8003f64:	0002df18 	.word	0x0002df18
 8003f68:	0002df90 	.word	0x0002df90
 8003f6c:	0002df10 	.word	0x0002df10
 8003f70:	00013fc0 	.word	0x00013fc0
 8003f74:	0002df20 	.word	0x0002df20
 8003f78:	4649      	mov	r1, r9
 8003f7a:	f7fc fb5d 	bl	8000638 <__aeabi_dmul>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	460b      	mov	r3, r1
 8003f82:	4614      	mov	r4, r2
 8003f84:	461d      	mov	r5, r3
 8003f86:	4bb7      	ldr	r3, [pc, #732]	@ (8004264 <NLLS+0x2fc4>)
 8003f88:	443b      	add	r3, r7
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	f507 627c 	add.w	r2, r7, #4032	@ 0xfc0
 8003f92:	f6a2 7284 	subw	r2, r2, #3972	@ 0xf84
 8003f96:	6812      	ldr	r2, [r2, #0]
 8003f98:	4413      	add	r3, r2
 8003f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9e:	49b2      	ldr	r1, [pc, #712]	@ (8004268 <NLLS+0x2fc8>)
 8003fa0:	4439      	add	r1, r7
 8003fa2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003fa6:	f7fc f98f 	bl	80002c8 <__aeabi_dsub>
 8003faa:	4602      	mov	r2, r0
 8003fac:	460b      	mov	r3, r1
 8003fae:	4620      	mov	r0, r4
 8003fb0:	4629      	mov	r1, r5
 8003fb2:	f7fc fb41 	bl	8000638 <__aeabi_dmul>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	4690      	mov	r8, r2
 8003fbc:	4699      	mov	r9, r3
 8003fbe:	4bab      	ldr	r3, [pc, #684]	@ (800426c <NLLS+0x2fcc>)
 8003fc0:	443b      	add	r3, r7
 8003fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc6:	49aa      	ldr	r1, [pc, #680]	@ (8004270 <NLLS+0x2fd0>)
 8003fc8:	4439      	add	r1, r7
 8003fca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003fce:	f7fc fb33 	bl	8000638 <__aeabi_dmul>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4610      	mov	r0, r2
 8003fd8:	4619      	mov	r1, r3
 8003fda:	4ba6      	ldr	r3, [pc, #664]	@ (8004274 <NLLS+0x2fd4>)
 8003fdc:	443b      	add	r3, r7
 8003fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe2:	f7fc fb29 	bl	8000638 <__aeabi_dmul>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4614      	mov	r4, r2
 8003fec:	461d      	mov	r5, r3
 8003fee:	4b9d      	ldr	r3, [pc, #628]	@ (8004264 <NLLS+0x2fc4>)
 8003ff0:	443b      	add	r3, r7
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	00da      	lsls	r2, r3, #3
 8003ff6:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8003ffa:	f6a3 738c 	subw	r3, r3, #3980	@ 0xf8c
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4413      	add	r3, r2
 8004002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004006:	499c      	ldr	r1, [pc, #624]	@ (8004278 <NLLS+0x2fd8>)
 8004008:	4439      	add	r1, r7
 800400a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800400e:	f7fc f95b 	bl	80002c8 <__aeabi_dsub>
 8004012:	4602      	mov	r2, r0
 8004014:	460b      	mov	r3, r1
 8004016:	4620      	mov	r0, r4
 8004018:	4629      	mov	r1, r5
 800401a:	f7fc fb0d 	bl	8000638 <__aeabi_dmul>
 800401e:	4602      	mov	r2, r0
 8004020:	460b      	mov	r3, r1
 8004022:	4640      	mov	r0, r8
 8004024:	4649      	mov	r1, r9
 8004026:	f7fc f951 	bl	80002cc <__adddf3>
 800402a:	4602      	mov	r2, r0
 800402c:	460b      	mov	r3, r1
 800402e:	4690      	mov	r8, r2
 8004030:	4699      	mov	r9, r3
 8004032:	4b92      	ldr	r3, [pc, #584]	@ (800427c <NLLS+0x2fdc>)
 8004034:	443b      	add	r3, r7
 8004036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403a:	498d      	ldr	r1, [pc, #564]	@ (8004270 <NLLS+0x2fd0>)
 800403c:	4439      	add	r1, r7
 800403e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004042:	f7fc faf9 	bl	8000638 <__aeabi_dmul>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4610      	mov	r0, r2
 800404c:	4619      	mov	r1, r3
 800404e:	4b8c      	ldr	r3, [pc, #560]	@ (8004280 <NLLS+0x2fe0>)
 8004050:	443b      	add	r3, r7
 8004052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004056:	f7fc faef 	bl	8000638 <__aeabi_dmul>
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	4614      	mov	r4, r2
 8004060:	461d      	mov	r5, r3
 8004062:	4b80      	ldr	r3, [pc, #512]	@ (8004264 <NLLS+0x2fc4>)
 8004064:	443b      	add	r3, r7
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	00da      	lsls	r2, r3, #3
 800406a:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800406e:	f6a3 7388 	subw	r3, r3, #3976	@ 0xf88
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4413      	add	r3, r2
 8004076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407a:	4982      	ldr	r1, [pc, #520]	@ (8004284 <NLLS+0x2fe4>)
 800407c:	4439      	add	r1, r7
 800407e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004082:	f7fc f921 	bl	80002c8 <__aeabi_dsub>
 8004086:	4602      	mov	r2, r0
 8004088:	460b      	mov	r3, r1
 800408a:	4620      	mov	r0, r4
 800408c:	4629      	mov	r1, r5
 800408e:	f7fc fad3 	bl	8000638 <__aeabi_dmul>
 8004092:	4602      	mov	r2, r0
 8004094:	460b      	mov	r3, r1
 8004096:	4640      	mov	r0, r8
 8004098:	4649      	mov	r1, r9
 800409a:	f7fc f915 	bl	80002c8 <__aeabi_dsub>
 800409e:	4602      	mov	r2, r0
 80040a0:	460b      	mov	r3, r1
 80040a2:	4610      	mov	r0, r2
 80040a4:	4619      	mov	r1, r3
 80040a6:	4602      	mov	r2, r0
 80040a8:	460b      	mov	r3, r1
 80040aa:	f7fc f90f 	bl	80002cc <__adddf3>
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	4614      	mov	r4, r2
 80040b4:	461d      	mov	r5, r3
 80040b6:	4b6d      	ldr	r3, [pc, #436]	@ (800426c <NLLS+0x2fcc>)
 80040b8:	443b      	add	r3, r7
 80040ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040be:	496c      	ldr	r1, [pc, #432]	@ (8004270 <NLLS+0x2fd0>)
 80040c0:	4439      	add	r1, r7
 80040c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040c6:	f7fc fab7 	bl	8000638 <__aeabi_dmul>
 80040ca:	4602      	mov	r2, r0
 80040cc:	460b      	mov	r3, r1
 80040ce:	4610      	mov	r0, r2
 80040d0:	4619      	mov	r1, r3
 80040d2:	4b6a      	ldr	r3, [pc, #424]	@ (800427c <NLLS+0x2fdc>)
 80040d4:	443b      	add	r3, r7
 80040d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040da:	f7fc faad 	bl	8000638 <__aeabi_dmul>
 80040de:	4602      	mov	r2, r0
 80040e0:	460b      	mov	r3, r1
 80040e2:	4610      	mov	r0, r2
 80040e4:	4619      	mov	r1, r3
 80040e6:	4b65      	ldr	r3, [pc, #404]	@ (800427c <NLLS+0x2fdc>)
 80040e8:	443b      	add	r3, r7
 80040ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ee:	f7fc faa3 	bl	8000638 <__aeabi_dmul>
 80040f2:	4602      	mov	r2, r0
 80040f4:	460b      	mov	r3, r1
 80040f6:	4610      	mov	r0, r2
 80040f8:	4619      	mov	r1, r3
 80040fa:	4b63      	ldr	r3, [pc, #396]	@ (8004288 <NLLS+0x2fe8>)
 80040fc:	443b      	add	r3, r7
 80040fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004102:	f7fc fa99 	bl	8000638 <__aeabi_dmul>
 8004106:	4602      	mov	r2, r0
 8004108:	460b      	mov	r3, r1
 800410a:	4610      	mov	r0, r2
 800410c:	4619      	mov	r1, r3
 800410e:	4b5e      	ldr	r3, [pc, #376]	@ (8004288 <NLLS+0x2fe8>)
 8004110:	443b      	add	r3, r7
 8004112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004116:	f7fc fa8f 	bl	8000638 <__aeabi_dmul>
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	4610      	mov	r0, r2
 8004120:	4619      	mov	r1, r3
 8004122:	4b5a      	ldr	r3, [pc, #360]	@ (800428c <NLLS+0x2fec>)
 8004124:	443b      	add	r3, r7
 8004126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412a:	f7fc fa85 	bl	8000638 <__aeabi_dmul>
 800412e:	4602      	mov	r2, r0
 8004130:	460b      	mov	r3, r1
 8004132:	4610      	mov	r0, r2
 8004134:	4619      	mov	r1, r3
 8004136:	4b55      	ldr	r3, [pc, #340]	@ (800428c <NLLS+0x2fec>)
 8004138:	443b      	add	r3, r7
 800413a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413e:	f7fc fa7b 	bl	8000638 <__aeabi_dmul>
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	4610      	mov	r0, r2
 8004148:	4619      	mov	r1, r3
 800414a:	4b4a      	ldr	r3, [pc, #296]	@ (8004274 <NLLS+0x2fd4>)
 800414c:	443b      	add	r3, r7
 800414e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004152:	f7fc fa71 	bl	8000638 <__aeabi_dmul>
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	4620      	mov	r0, r4
 800415c:	4629      	mov	r1, r5
 800415e:	f7fc fb95 	bl	800088c <__aeabi_ddiv>
 8004162:	4602      	mov	r2, r0
 8004164:	460b      	mov	r3, r1
 8004166:	4610      	mov	r0, r2
 8004168:	4619      	mov	r1, r3
 800416a:	4b49      	ldr	r3, [pc, #292]	@ (8004290 <NLLS+0x2ff0>)
 800416c:	443b      	add	r3, r7
 800416e:	f5a3 72d8 	sub.w	r2, r3, #432	@ 0x1b0
 8004172:	4b3c      	ldr	r3, [pc, #240]	@ (8004264 <NLLS+0x2fc4>)
 8004174:	443b      	add	r3, r7
 8004176:	681c      	ldr	r4, [r3, #0]
 8004178:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 800417c:	4423      	add	r3, r4
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	4413      	add	r3, r2
 8004182:	e9c3 0100 	strd	r0, r1, [r3]

            mat_H[6][i] = -(2*(bx*sy - mx[i]*sy - by*sx*sin_rho + my[i]*sx*sin_rho)*(by*sx*sz*sin_lambda*sin_lambda - my[i]*sx*sz*sin_lambda*sin_lambda + by*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - my[i]*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - bz*sx*sy*cos_rho*sin_lambda + mz[i]*sx*sy*cos_rho*sin_lambda - bx*sy*sz*sin_lambda*sin_lambda*sin_rho + mx[i]*sy*sz*sin_lambda*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + mx[i]*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + bx*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi - mx[i]*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi))/(sx*sx*sy*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*(cos_rho*cos_rho*cos_rho));
 8004186:	4b39      	ldr	r3, [pc, #228]	@ (800426c <NLLS+0x2fcc>)
 8004188:	443b      	add	r3, r7
 800418a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418e:	4936      	ldr	r1, [pc, #216]	@ (8004268 <NLLS+0x2fc8>)
 8004190:	4439      	add	r1, r7
 8004192:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004196:	f7fc fa4f 	bl	8000638 <__aeabi_dmul>
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	4614      	mov	r4, r2
 80041a0:	461d      	mov	r5, r3
 80041a2:	4b30      	ldr	r3, [pc, #192]	@ (8004264 <NLLS+0x2fc4>)
 80041a4:	443b      	add	r3, r7
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	f507 627c 	add.w	r2, r7, #4032	@ 0xfc0
 80041ae:	f6a2 7284 	subw	r2, r2, #3972	@ 0xf84
 80041b2:	6812      	ldr	r2, [r2, #0]
 80041b4:	4413      	add	r3, r2
 80041b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041ba:	4b2c      	ldr	r3, [pc, #176]	@ (800426c <NLLS+0x2fcc>)
 80041bc:	443b      	add	r3, r7
 80041be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c2:	f7fc fa39 	bl	8000638 <__aeabi_dmul>
 80041c6:	4602      	mov	r2, r0
 80041c8:	460b      	mov	r3, r1
 80041ca:	4620      	mov	r0, r4
 80041cc:	4629      	mov	r1, r5
 80041ce:	f7fc f87b 	bl	80002c8 <__aeabi_dsub>
 80041d2:	4602      	mov	r2, r0
 80041d4:	460b      	mov	r3, r1
 80041d6:	4614      	mov	r4, r2
 80041d8:	461d      	mov	r5, r3
 80041da:	4b25      	ldr	r3, [pc, #148]	@ (8004270 <NLLS+0x2fd0>)
 80041dc:	443b      	add	r3, r7
 80041de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e2:	4928      	ldr	r1, [pc, #160]	@ (8004284 <NLLS+0x2fe4>)
 80041e4:	4439      	add	r1, r7
 80041e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041ea:	f7fc fa25 	bl	8000638 <__aeabi_dmul>
 80041ee:	4602      	mov	r2, r0
 80041f0:	460b      	mov	r3, r1
 80041f2:	4610      	mov	r0, r2
 80041f4:	4619      	mov	r1, r3
 80041f6:	4b27      	ldr	r3, [pc, #156]	@ (8004294 <NLLS+0x2ff4>)
 80041f8:	443b      	add	r3, r7
 80041fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fe:	f7fc fa1b 	bl	8000638 <__aeabi_dmul>
 8004202:	4602      	mov	r2, r0
 8004204:	460b      	mov	r3, r1
 8004206:	4620      	mov	r0, r4
 8004208:	4629      	mov	r1, r5
 800420a:	f7fc f85d 	bl	80002c8 <__aeabi_dsub>
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	4614      	mov	r4, r2
 8004214:	461d      	mov	r5, r3
 8004216:	4b13      	ldr	r3, [pc, #76]	@ (8004264 <NLLS+0x2fc4>)
 8004218:	443b      	add	r3, r7
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	00db      	lsls	r3, r3, #3
 800421e:	f507 627c 	add.w	r2, r7, #4032	@ 0xfc0
 8004222:	f6a2 7288 	subw	r2, r2, #3976	@ 0xf88
 8004226:	6812      	ldr	r2, [r2, #0]
 8004228:	4413      	add	r3, r2
 800422a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800422e:	4b10      	ldr	r3, [pc, #64]	@ (8004270 <NLLS+0x2fd0>)
 8004230:	443b      	add	r3, r7
 8004232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004236:	f7fc f9ff 	bl	8000638 <__aeabi_dmul>
 800423a:	4602      	mov	r2, r0
 800423c:	460b      	mov	r3, r1
 800423e:	4610      	mov	r0, r2
 8004240:	4619      	mov	r1, r3
 8004242:	4b14      	ldr	r3, [pc, #80]	@ (8004294 <NLLS+0x2ff4>)
 8004244:	443b      	add	r3, r7
 8004246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424a:	f7fc f9f5 	bl	8000638 <__aeabi_dmul>
 800424e:	4602      	mov	r2, r0
 8004250:	460b      	mov	r3, r1
 8004252:	4620      	mov	r0, r4
 8004254:	4629      	mov	r1, r5
 8004256:	f7fc f839 	bl	80002cc <__adddf3>
 800425a:	4602      	mov	r2, r0
 800425c:	460b      	mov	r3, r1
 800425e:	4610      	mov	r0, r2
 8004260:	e01a      	b.n	8004298 <NLLS+0x2ff8>
 8004262:	bf00      	nop
 8004264:	0002df58 	.word	0x0002df58
 8004268:	0002df98 	.word	0x0002df98
 800426c:	0002dfa8 	.word	0x0002dfa8
 8004270:	0002dfb0 	.word	0x0002dfb0
 8004274:	0002df08 	.word	0x0002df08
 8004278:	0002df88 	.word	0x0002df88
 800427c:	0002dfa0 	.word	0x0002dfa0
 8004280:	0002df18 	.word	0x0002df18
 8004284:	0002df90 	.word	0x0002df90
 8004288:	0002df00 	.word	0x0002df00
 800428c:	0002df10 	.word	0x0002df10
 8004290:	00013fc0 	.word	0x00013fc0
 8004294:	0002df20 	.word	0x0002df20
 8004298:	4619      	mov	r1, r3
 800429a:	4602      	mov	r2, r0
 800429c:	460b      	mov	r3, r1
 800429e:	f7fc f815 	bl	80002cc <__adddf3>
 80042a2:	4602      	mov	r2, r0
 80042a4:	460b      	mov	r3, r1
 80042a6:	4690      	mov	r8, r2
 80042a8:	4699      	mov	r9, r3
 80042aa:	4bb4      	ldr	r3, [pc, #720]	@ (800457c <NLLS+0x32dc>)
 80042ac:	443b      	add	r3, r7
 80042ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b2:	49b3      	ldr	r1, [pc, #716]	@ (8004580 <NLLS+0x32e0>)
 80042b4:	4439      	add	r1, r7
 80042b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042ba:	f7fc f9bd 	bl	8000638 <__aeabi_dmul>
 80042be:	4602      	mov	r2, r0
 80042c0:	460b      	mov	r3, r1
 80042c2:	4610      	mov	r0, r2
 80042c4:	4619      	mov	r1, r3
 80042c6:	4baf      	ldr	r3, [pc, #700]	@ (8004584 <NLLS+0x32e4>)
 80042c8:	443b      	add	r3, r7
 80042ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ce:	f7fc f9b3 	bl	8000638 <__aeabi_dmul>
 80042d2:	4602      	mov	r2, r0
 80042d4:	460b      	mov	r3, r1
 80042d6:	4610      	mov	r0, r2
 80042d8:	4619      	mov	r1, r3
 80042da:	4bab      	ldr	r3, [pc, #684]	@ (8004588 <NLLS+0x32e8>)
 80042dc:	443b      	add	r3, r7
 80042de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e2:	f7fc f9a9 	bl	8000638 <__aeabi_dmul>
 80042e6:	4602      	mov	r2, r0
 80042e8:	460b      	mov	r3, r1
 80042ea:	4610      	mov	r0, r2
 80042ec:	4619      	mov	r1, r3
 80042ee:	4ba6      	ldr	r3, [pc, #664]	@ (8004588 <NLLS+0x32e8>)
 80042f0:	443b      	add	r3, r7
 80042f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f6:	f7fc f99f 	bl	8000638 <__aeabi_dmul>
 80042fa:	4602      	mov	r2, r0
 80042fc:	460b      	mov	r3, r1
 80042fe:	4614      	mov	r4, r2
 8004300:	461d      	mov	r5, r3
 8004302:	4ba2      	ldr	r3, [pc, #648]	@ (800458c <NLLS+0x32ec>)
 8004304:	443b      	add	r3, r7
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	00da      	lsls	r2, r3, #3
 800430a:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800430e:	f6a3 7388 	subw	r3, r3, #3976	@ 0xf88
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4413      	add	r3, r2
 8004316:	e9d3 0100 	ldrd	r0, r1, [r3]
 800431a:	4b98      	ldr	r3, [pc, #608]	@ (800457c <NLLS+0x32dc>)
 800431c:	443b      	add	r3, r7
 800431e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004322:	f7fc f989 	bl	8000638 <__aeabi_dmul>
 8004326:	4602      	mov	r2, r0
 8004328:	460b      	mov	r3, r1
 800432a:	4610      	mov	r0, r2
 800432c:	4619      	mov	r1, r3
 800432e:	4b95      	ldr	r3, [pc, #596]	@ (8004584 <NLLS+0x32e4>)
 8004330:	443b      	add	r3, r7
 8004332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004336:	f7fc f97f 	bl	8000638 <__aeabi_dmul>
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	4610      	mov	r0, r2
 8004340:	4619      	mov	r1, r3
 8004342:	4b91      	ldr	r3, [pc, #580]	@ (8004588 <NLLS+0x32e8>)
 8004344:	443b      	add	r3, r7
 8004346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434a:	f7fc f975 	bl	8000638 <__aeabi_dmul>
 800434e:	4602      	mov	r2, r0
 8004350:	460b      	mov	r3, r1
 8004352:	4610      	mov	r0, r2
 8004354:	4619      	mov	r1, r3
 8004356:	4b8c      	ldr	r3, [pc, #560]	@ (8004588 <NLLS+0x32e8>)
 8004358:	443b      	add	r3, r7
 800435a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435e:	f7fc f96b 	bl	8000638 <__aeabi_dmul>
 8004362:	4602      	mov	r2, r0
 8004364:	460b      	mov	r3, r1
 8004366:	4620      	mov	r0, r4
 8004368:	4629      	mov	r1, r5
 800436a:	f7fb ffad 	bl	80002c8 <__aeabi_dsub>
 800436e:	4602      	mov	r2, r0
 8004370:	460b      	mov	r3, r1
 8004372:	4614      	mov	r4, r2
 8004374:	461d      	mov	r5, r3
 8004376:	4b81      	ldr	r3, [pc, #516]	@ (800457c <NLLS+0x32dc>)
 8004378:	443b      	add	r3, r7
 800437a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437e:	4980      	ldr	r1, [pc, #512]	@ (8004580 <NLLS+0x32e0>)
 8004380:	4439      	add	r1, r7
 8004382:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004386:	f7fc f957 	bl	8000638 <__aeabi_dmul>
 800438a:	4602      	mov	r2, r0
 800438c:	460b      	mov	r3, r1
 800438e:	4610      	mov	r0, r2
 8004390:	4619      	mov	r1, r3
 8004392:	4b7c      	ldr	r3, [pc, #496]	@ (8004584 <NLLS+0x32e4>)
 8004394:	443b      	add	r3, r7
 8004396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439a:	f7fc f94d 	bl	8000638 <__aeabi_dmul>
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	4610      	mov	r0, r2
 80043a4:	4619      	mov	r1, r3
 80043a6:	4b7a      	ldr	r3, [pc, #488]	@ (8004590 <NLLS+0x32f0>)
 80043a8:	443b      	add	r3, r7
 80043aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ae:	f7fc f943 	bl	8000638 <__aeabi_dmul>
 80043b2:	4602      	mov	r2, r0
 80043b4:	460b      	mov	r3, r1
 80043b6:	4610      	mov	r0, r2
 80043b8:	4619      	mov	r1, r3
 80043ba:	4b75      	ldr	r3, [pc, #468]	@ (8004590 <NLLS+0x32f0>)
 80043bc:	443b      	add	r3, r7
 80043be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c2:	f7fc f939 	bl	8000638 <__aeabi_dmul>
 80043c6:	4602      	mov	r2, r0
 80043c8:	460b      	mov	r3, r1
 80043ca:	4610      	mov	r0, r2
 80043cc:	4619      	mov	r1, r3
 80043ce:	4b71      	ldr	r3, [pc, #452]	@ (8004594 <NLLS+0x32f4>)
 80043d0:	443b      	add	r3, r7
 80043d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d6:	f7fc f92f 	bl	8000638 <__aeabi_dmul>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	4610      	mov	r0, r2
 80043e0:	4619      	mov	r1, r3
 80043e2:	4b6c      	ldr	r3, [pc, #432]	@ (8004594 <NLLS+0x32f4>)
 80043e4:	443b      	add	r3, r7
 80043e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ea:	f7fc f925 	bl	8000638 <__aeabi_dmul>
 80043ee:	4602      	mov	r2, r0
 80043f0:	460b      	mov	r3, r1
 80043f2:	4620      	mov	r0, r4
 80043f4:	4629      	mov	r1, r5
 80043f6:	f7fb ff69 	bl	80002cc <__adddf3>
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	4614      	mov	r4, r2
 8004400:	461d      	mov	r5, r3
 8004402:	4b62      	ldr	r3, [pc, #392]	@ (800458c <NLLS+0x32ec>)
 8004404:	443b      	add	r3, r7
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	00da      	lsls	r2, r3, #3
 800440a:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800440e:	f6a3 7388 	subw	r3, r3, #3976	@ 0xf88
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4413      	add	r3, r2
 8004416:	e9d3 0100 	ldrd	r0, r1, [r3]
 800441a:	4b58      	ldr	r3, [pc, #352]	@ (800457c <NLLS+0x32dc>)
 800441c:	443b      	add	r3, r7
 800441e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004422:	f7fc f909 	bl	8000638 <__aeabi_dmul>
 8004426:	4602      	mov	r2, r0
 8004428:	460b      	mov	r3, r1
 800442a:	4610      	mov	r0, r2
 800442c:	4619      	mov	r1, r3
 800442e:	4b55      	ldr	r3, [pc, #340]	@ (8004584 <NLLS+0x32e4>)
 8004430:	443b      	add	r3, r7
 8004432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004436:	f7fc f8ff 	bl	8000638 <__aeabi_dmul>
 800443a:	4602      	mov	r2, r0
 800443c:	460b      	mov	r3, r1
 800443e:	4610      	mov	r0, r2
 8004440:	4619      	mov	r1, r3
 8004442:	4b53      	ldr	r3, [pc, #332]	@ (8004590 <NLLS+0x32f0>)
 8004444:	443b      	add	r3, r7
 8004446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444a:	f7fc f8f5 	bl	8000638 <__aeabi_dmul>
 800444e:	4602      	mov	r2, r0
 8004450:	460b      	mov	r3, r1
 8004452:	4610      	mov	r0, r2
 8004454:	4619      	mov	r1, r3
 8004456:	4b4e      	ldr	r3, [pc, #312]	@ (8004590 <NLLS+0x32f0>)
 8004458:	443b      	add	r3, r7
 800445a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445e:	f7fc f8eb 	bl	8000638 <__aeabi_dmul>
 8004462:	4602      	mov	r2, r0
 8004464:	460b      	mov	r3, r1
 8004466:	4610      	mov	r0, r2
 8004468:	4619      	mov	r1, r3
 800446a:	4b4a      	ldr	r3, [pc, #296]	@ (8004594 <NLLS+0x32f4>)
 800446c:	443b      	add	r3, r7
 800446e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004472:	f7fc f8e1 	bl	8000638 <__aeabi_dmul>
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	4610      	mov	r0, r2
 800447c:	4619      	mov	r1, r3
 800447e:	4b45      	ldr	r3, [pc, #276]	@ (8004594 <NLLS+0x32f4>)
 8004480:	443b      	add	r3, r7
 8004482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004486:	f7fc f8d7 	bl	8000638 <__aeabi_dmul>
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	4620      	mov	r0, r4
 8004490:	4629      	mov	r1, r5
 8004492:	f7fb ff19 	bl	80002c8 <__aeabi_dsub>
 8004496:	4602      	mov	r2, r0
 8004498:	460b      	mov	r3, r1
 800449a:	4614      	mov	r4, r2
 800449c:	461d      	mov	r5, r3
 800449e:	4b37      	ldr	r3, [pc, #220]	@ (800457c <NLLS+0x32dc>)
 80044a0:	443b      	add	r3, r7
 80044a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a6:	493c      	ldr	r1, [pc, #240]	@ (8004598 <NLLS+0x32f8>)
 80044a8:	4439      	add	r1, r7
 80044aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044ae:	f7fc f8c3 	bl	8000638 <__aeabi_dmul>
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	4610      	mov	r0, r2
 80044b8:	4619      	mov	r1, r3
 80044ba:	4b38      	ldr	r3, [pc, #224]	@ (800459c <NLLS+0x32fc>)
 80044bc:	443b      	add	r3, r7
 80044be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c2:	f7fc f8b9 	bl	8000638 <__aeabi_dmul>
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	4610      	mov	r0, r2
 80044cc:	4619      	mov	r1, r3
 80044ce:	4b34      	ldr	r3, [pc, #208]	@ (80045a0 <NLLS+0x3300>)
 80044d0:	443b      	add	r3, r7
 80044d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d6:	f7fc f8af 	bl	8000638 <__aeabi_dmul>
 80044da:	4602      	mov	r2, r0
 80044dc:	460b      	mov	r3, r1
 80044de:	4610      	mov	r0, r2
 80044e0:	4619      	mov	r1, r3
 80044e2:	4b29      	ldr	r3, [pc, #164]	@ (8004588 <NLLS+0x32e8>)
 80044e4:	443b      	add	r3, r7
 80044e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ea:	f7fc f8a5 	bl	8000638 <__aeabi_dmul>
 80044ee:	4602      	mov	r2, r0
 80044f0:	460b      	mov	r3, r1
 80044f2:	4620      	mov	r0, r4
 80044f4:	4629      	mov	r1, r5
 80044f6:	f7fb fee7 	bl	80002c8 <__aeabi_dsub>
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	4614      	mov	r4, r2
 8004500:	461d      	mov	r5, r3
 8004502:	4b22      	ldr	r3, [pc, #136]	@ (800458c <NLLS+0x32ec>)
 8004504:	443b      	add	r3, r7
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	00da      	lsls	r2, r3, #3
 800450a:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800450e:	f6a3 738c 	subw	r3, r3, #3980	@ 0xf8c
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4413      	add	r3, r2
 8004516:	e9d3 0100 	ldrd	r0, r1, [r3]
 800451a:	4b18      	ldr	r3, [pc, #96]	@ (800457c <NLLS+0x32dc>)
 800451c:	443b      	add	r3, r7
 800451e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004522:	f7fc f889 	bl	8000638 <__aeabi_dmul>
 8004526:	4602      	mov	r2, r0
 8004528:	460b      	mov	r3, r1
 800452a:	4610      	mov	r0, r2
 800452c:	4619      	mov	r1, r3
 800452e:	4b1b      	ldr	r3, [pc, #108]	@ (800459c <NLLS+0x32fc>)
 8004530:	443b      	add	r3, r7
 8004532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004536:	f7fc f87f 	bl	8000638 <__aeabi_dmul>
 800453a:	4602      	mov	r2, r0
 800453c:	460b      	mov	r3, r1
 800453e:	4610      	mov	r0, r2
 8004540:	4619      	mov	r1, r3
 8004542:	4b17      	ldr	r3, [pc, #92]	@ (80045a0 <NLLS+0x3300>)
 8004544:	443b      	add	r3, r7
 8004546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454a:	f7fc f875 	bl	8000638 <__aeabi_dmul>
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	4610      	mov	r0, r2
 8004554:	4619      	mov	r1, r3
 8004556:	4b0c      	ldr	r3, [pc, #48]	@ (8004588 <NLLS+0x32e8>)
 8004558:	443b      	add	r3, r7
 800455a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455e:	f7fc f86b 	bl	8000638 <__aeabi_dmul>
 8004562:	4602      	mov	r2, r0
 8004564:	460b      	mov	r3, r1
 8004566:	4620      	mov	r0, r4
 8004568:	4629      	mov	r1, r5
 800456a:	f7fb feaf 	bl	80002cc <__adddf3>
 800456e:	4602      	mov	r2, r0
 8004570:	460b      	mov	r3, r1
 8004572:	4614      	mov	r4, r2
 8004574:	461d      	mov	r5, r3
 8004576:	4b09      	ldr	r3, [pc, #36]	@ (800459c <NLLS+0x32fc>)
 8004578:	443b      	add	r3, r7
 800457a:	e013      	b.n	80045a4 <NLLS+0x3304>
 800457c:	0002dfb0 	.word	0x0002dfb0
 8004580:	0002df90 	.word	0x0002df90
 8004584:	0002dfa0 	.word	0x0002dfa0
 8004588:	0002df18 	.word	0x0002df18
 800458c:	0002df58 	.word	0x0002df58
 8004590:	0002df00 	.word	0x0002df00
 8004594:	0002df10 	.word	0x0002df10
 8004598:	0002df88 	.word	0x0002df88
 800459c:	0002dfa8 	.word	0x0002dfa8
 80045a0:	0002df08 	.word	0x0002df08
 80045a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a8:	49b6      	ldr	r1, [pc, #728]	@ (8004884 <NLLS+0x35e4>)
 80045aa:	4439      	add	r1, r7
 80045ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80045b0:	f7fc f842 	bl	8000638 <__aeabi_dmul>
 80045b4:	4602      	mov	r2, r0
 80045b6:	460b      	mov	r3, r1
 80045b8:	4610      	mov	r0, r2
 80045ba:	4619      	mov	r1, r3
 80045bc:	4bb2      	ldr	r3, [pc, #712]	@ (8004888 <NLLS+0x35e8>)
 80045be:	443b      	add	r3, r7
 80045c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c4:	f7fc f838 	bl	8000638 <__aeabi_dmul>
 80045c8:	4602      	mov	r2, r0
 80045ca:	460b      	mov	r3, r1
 80045cc:	4610      	mov	r0, r2
 80045ce:	4619      	mov	r1, r3
 80045d0:	4bae      	ldr	r3, [pc, #696]	@ (800488c <NLLS+0x35ec>)
 80045d2:	443b      	add	r3, r7
 80045d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d8:	f7fc f82e 	bl	8000638 <__aeabi_dmul>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	4610      	mov	r0, r2
 80045e2:	4619      	mov	r1, r3
 80045e4:	4ba9      	ldr	r3, [pc, #676]	@ (800488c <NLLS+0x35ec>)
 80045e6:	443b      	add	r3, r7
 80045e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ec:	f7fc f824 	bl	8000638 <__aeabi_dmul>
 80045f0:	4602      	mov	r2, r0
 80045f2:	460b      	mov	r3, r1
 80045f4:	4610      	mov	r0, r2
 80045f6:	4619      	mov	r1, r3
 80045f8:	4ba5      	ldr	r3, [pc, #660]	@ (8004890 <NLLS+0x35f0>)
 80045fa:	443b      	add	r3, r7
 80045fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004600:	f7fc f81a 	bl	8000638 <__aeabi_dmul>
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	4620      	mov	r0, r4
 800460a:	4629      	mov	r1, r5
 800460c:	f7fb fe5c 	bl	80002c8 <__aeabi_dsub>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	4614      	mov	r4, r2
 8004616:	461d      	mov	r5, r3
 8004618:	4b9e      	ldr	r3, [pc, #632]	@ (8004894 <NLLS+0x35f4>)
 800461a:	443b      	add	r3, r7
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	00da      	lsls	r2, r3, #3
 8004620:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8004624:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4413      	add	r3, r2
 800462c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004630:	4b99      	ldr	r3, [pc, #612]	@ (8004898 <NLLS+0x35f8>)
 8004632:	443b      	add	r3, r7
 8004634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004638:	f7fb fffe 	bl	8000638 <__aeabi_dmul>
 800463c:	4602      	mov	r2, r0
 800463e:	460b      	mov	r3, r1
 8004640:	4610      	mov	r0, r2
 8004642:	4619      	mov	r1, r3
 8004644:	4b90      	ldr	r3, [pc, #576]	@ (8004888 <NLLS+0x35e8>)
 8004646:	443b      	add	r3, r7
 8004648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464c:	f7fb fff4 	bl	8000638 <__aeabi_dmul>
 8004650:	4602      	mov	r2, r0
 8004652:	460b      	mov	r3, r1
 8004654:	4610      	mov	r0, r2
 8004656:	4619      	mov	r1, r3
 8004658:	4b8c      	ldr	r3, [pc, #560]	@ (800488c <NLLS+0x35ec>)
 800465a:	443b      	add	r3, r7
 800465c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004660:	f7fb ffea 	bl	8000638 <__aeabi_dmul>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	4610      	mov	r0, r2
 800466a:	4619      	mov	r1, r3
 800466c:	4b87      	ldr	r3, [pc, #540]	@ (800488c <NLLS+0x35ec>)
 800466e:	443b      	add	r3, r7
 8004670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004674:	f7fb ffe0 	bl	8000638 <__aeabi_dmul>
 8004678:	4602      	mov	r2, r0
 800467a:	460b      	mov	r3, r1
 800467c:	4610      	mov	r0, r2
 800467e:	4619      	mov	r1, r3
 8004680:	4b83      	ldr	r3, [pc, #524]	@ (8004890 <NLLS+0x35f0>)
 8004682:	443b      	add	r3, r7
 8004684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004688:	f7fb ffd6 	bl	8000638 <__aeabi_dmul>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	4620      	mov	r0, r4
 8004692:	4629      	mov	r1, r5
 8004694:	f7fb fe1a 	bl	80002cc <__adddf3>
 8004698:	4602      	mov	r2, r0
 800469a:	460b      	mov	r3, r1
 800469c:	4614      	mov	r4, r2
 800469e:	461d      	mov	r5, r3
 80046a0:	4b7d      	ldr	r3, [pc, #500]	@ (8004898 <NLLS+0x35f8>)
 80046a2:	443b      	add	r3, r7
 80046a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a8:	4976      	ldr	r1, [pc, #472]	@ (8004884 <NLLS+0x35e4>)
 80046aa:	4439      	add	r1, r7
 80046ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046b0:	f7fb ffc2 	bl	8000638 <__aeabi_dmul>
 80046b4:	4602      	mov	r2, r0
 80046b6:	460b      	mov	r3, r1
 80046b8:	4610      	mov	r0, r2
 80046ba:	4619      	mov	r1, r3
 80046bc:	4b72      	ldr	r3, [pc, #456]	@ (8004888 <NLLS+0x35e8>)
 80046be:	443b      	add	r3, r7
 80046c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c4:	f7fb ffb8 	bl	8000638 <__aeabi_dmul>
 80046c8:	4602      	mov	r2, r0
 80046ca:	460b      	mov	r3, r1
 80046cc:	4610      	mov	r0, r2
 80046ce:	4619      	mov	r1, r3
 80046d0:	4b72      	ldr	r3, [pc, #456]	@ (800489c <NLLS+0x35fc>)
 80046d2:	443b      	add	r3, r7
 80046d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d8:	f7fb ffae 	bl	8000638 <__aeabi_dmul>
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	4610      	mov	r0, r2
 80046e2:	4619      	mov	r1, r3
 80046e4:	4b6d      	ldr	r3, [pc, #436]	@ (800489c <NLLS+0x35fc>)
 80046e6:	443b      	add	r3, r7
 80046e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ec:	f7fb ffa4 	bl	8000638 <__aeabi_dmul>
 80046f0:	4602      	mov	r2, r0
 80046f2:	460b      	mov	r3, r1
 80046f4:	4610      	mov	r0, r2
 80046f6:	4619      	mov	r1, r3
 80046f8:	4b69      	ldr	r3, [pc, #420]	@ (80048a0 <NLLS+0x3600>)
 80046fa:	443b      	add	r3, r7
 80046fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004700:	f7fb ff9a 	bl	8000638 <__aeabi_dmul>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	4610      	mov	r0, r2
 800470a:	4619      	mov	r1, r3
 800470c:	4b64      	ldr	r3, [pc, #400]	@ (80048a0 <NLLS+0x3600>)
 800470e:	443b      	add	r3, r7
 8004710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004714:	f7fb ff90 	bl	8000638 <__aeabi_dmul>
 8004718:	4602      	mov	r2, r0
 800471a:	460b      	mov	r3, r1
 800471c:	4610      	mov	r0, r2
 800471e:	4619      	mov	r1, r3
 8004720:	4b5b      	ldr	r3, [pc, #364]	@ (8004890 <NLLS+0x35f0>)
 8004722:	443b      	add	r3, r7
 8004724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004728:	f7fb ff86 	bl	8000638 <__aeabi_dmul>
 800472c:	4602      	mov	r2, r0
 800472e:	460b      	mov	r3, r1
 8004730:	4620      	mov	r0, r4
 8004732:	4629      	mov	r1, r5
 8004734:	f7fb fdc8 	bl	80002c8 <__aeabi_dsub>
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	4614      	mov	r4, r2
 800473e:	461d      	mov	r5, r3
 8004740:	4b54      	ldr	r3, [pc, #336]	@ (8004894 <NLLS+0x35f4>)
 8004742:	443b      	add	r3, r7
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	00da      	lsls	r2, r3, #3
 8004748:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800474c:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4413      	add	r3, r2
 8004754:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004758:	4b4f      	ldr	r3, [pc, #316]	@ (8004898 <NLLS+0x35f8>)
 800475a:	443b      	add	r3, r7
 800475c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004760:	f7fb ff6a 	bl	8000638 <__aeabi_dmul>
 8004764:	4602      	mov	r2, r0
 8004766:	460b      	mov	r3, r1
 8004768:	4610      	mov	r0, r2
 800476a:	4619      	mov	r1, r3
 800476c:	4b46      	ldr	r3, [pc, #280]	@ (8004888 <NLLS+0x35e8>)
 800476e:	443b      	add	r3, r7
 8004770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004774:	f7fb ff60 	bl	8000638 <__aeabi_dmul>
 8004778:	4602      	mov	r2, r0
 800477a:	460b      	mov	r3, r1
 800477c:	4610      	mov	r0, r2
 800477e:	4619      	mov	r1, r3
 8004780:	4b46      	ldr	r3, [pc, #280]	@ (800489c <NLLS+0x35fc>)
 8004782:	443b      	add	r3, r7
 8004784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004788:	f7fb ff56 	bl	8000638 <__aeabi_dmul>
 800478c:	4602      	mov	r2, r0
 800478e:	460b      	mov	r3, r1
 8004790:	4610      	mov	r0, r2
 8004792:	4619      	mov	r1, r3
 8004794:	4b41      	ldr	r3, [pc, #260]	@ (800489c <NLLS+0x35fc>)
 8004796:	443b      	add	r3, r7
 8004798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479c:	f7fb ff4c 	bl	8000638 <__aeabi_dmul>
 80047a0:	4602      	mov	r2, r0
 80047a2:	460b      	mov	r3, r1
 80047a4:	4610      	mov	r0, r2
 80047a6:	4619      	mov	r1, r3
 80047a8:	4b3d      	ldr	r3, [pc, #244]	@ (80048a0 <NLLS+0x3600>)
 80047aa:	443b      	add	r3, r7
 80047ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b0:	f7fb ff42 	bl	8000638 <__aeabi_dmul>
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4610      	mov	r0, r2
 80047ba:	4619      	mov	r1, r3
 80047bc:	4b38      	ldr	r3, [pc, #224]	@ (80048a0 <NLLS+0x3600>)
 80047be:	443b      	add	r3, r7
 80047c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c4:	f7fb ff38 	bl	8000638 <__aeabi_dmul>
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	4610      	mov	r0, r2
 80047ce:	4619      	mov	r1, r3
 80047d0:	4b2f      	ldr	r3, [pc, #188]	@ (8004890 <NLLS+0x35f0>)
 80047d2:	443b      	add	r3, r7
 80047d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d8:	f7fb ff2e 	bl	8000638 <__aeabi_dmul>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	4620      	mov	r0, r4
 80047e2:	4629      	mov	r1, r5
 80047e4:	f7fb fd72 	bl	80002cc <__adddf3>
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	4614      	mov	r4, r2
 80047ee:	461d      	mov	r5, r3
 80047f0:	4b29      	ldr	r3, [pc, #164]	@ (8004898 <NLLS+0x35f8>)
 80047f2:	443b      	add	r3, r7
 80047f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f8:	4922      	ldr	r1, [pc, #136]	@ (8004884 <NLLS+0x35e4>)
 80047fa:	4439      	add	r1, r7
 80047fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004800:	f7fb ff1a 	bl	8000638 <__aeabi_dmul>
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	4610      	mov	r0, r2
 800480a:	4619      	mov	r1, r3
 800480c:	4b1e      	ldr	r3, [pc, #120]	@ (8004888 <NLLS+0x35e8>)
 800480e:	443b      	add	r3, r7
 8004810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004814:	f7fb ff10 	bl	8000638 <__aeabi_dmul>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	4610      	mov	r0, r2
 800481e:	4619      	mov	r1, r3
 8004820:	4b1e      	ldr	r3, [pc, #120]	@ (800489c <NLLS+0x35fc>)
 8004822:	443b      	add	r3, r7
 8004824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004828:	f7fb ff06 	bl	8000638 <__aeabi_dmul>
 800482c:	4602      	mov	r2, r0
 800482e:	460b      	mov	r3, r1
 8004830:	4610      	mov	r0, r2
 8004832:	4619      	mov	r1, r3
 8004834:	4b1b      	ldr	r3, [pc, #108]	@ (80048a4 <NLLS+0x3604>)
 8004836:	443b      	add	r3, r7
 8004838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483c:	f7fb fefc 	bl	8000638 <__aeabi_dmul>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4610      	mov	r0, r2
 8004846:	4619      	mov	r1, r3
 8004848:	4b10      	ldr	r3, [pc, #64]	@ (800488c <NLLS+0x35ec>)
 800484a:	443b      	add	r3, r7
 800484c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004850:	f7fb fef2 	bl	8000638 <__aeabi_dmul>
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	4610      	mov	r0, r2
 800485a:	4619      	mov	r1, r3
 800485c:	4b12      	ldr	r3, [pc, #72]	@ (80048a8 <NLLS+0x3608>)
 800485e:	443b      	add	r3, r7
 8004860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004864:	f7fb fee8 	bl	8000638 <__aeabi_dmul>
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	4620      	mov	r0, r4
 800486e:	4629      	mov	r1, r5
 8004870:	f7fb fd2c 	bl	80002cc <__adddf3>
 8004874:	4602      	mov	r2, r0
 8004876:	460b      	mov	r3, r1
 8004878:	4614      	mov	r4, r2
 800487a:	461d      	mov	r5, r3
 800487c:	4b05      	ldr	r3, [pc, #20]	@ (8004894 <NLLS+0x35f4>)
 800487e:	443b      	add	r3, r7
 8004880:	e014      	b.n	80048ac <NLLS+0x360c>
 8004882:	bf00      	nop
 8004884:	0002df98 	.word	0x0002df98
 8004888:	0002dfa0 	.word	0x0002dfa0
 800488c:	0002df18 	.word	0x0002df18
 8004890:	0002df20 	.word	0x0002df20
 8004894:	0002df58 	.word	0x0002df58
 8004898:	0002dfa8 	.word	0x0002dfa8
 800489c:	0002df00 	.word	0x0002df00
 80048a0:	0002df10 	.word	0x0002df10
 80048a4:	0002df08 	.word	0x0002df08
 80048a8:	0002df28 	.word	0x0002df28
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	00da      	lsls	r2, r3, #3
 80048b0:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80048b4:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4413      	add	r3, r2
 80048bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048c0:	4bb2      	ldr	r3, [pc, #712]	@ (8004b8c <NLLS+0x38ec>)
 80048c2:	443b      	add	r3, r7
 80048c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c8:	f7fb feb6 	bl	8000638 <__aeabi_dmul>
 80048cc:	4602      	mov	r2, r0
 80048ce:	460b      	mov	r3, r1
 80048d0:	4610      	mov	r0, r2
 80048d2:	4619      	mov	r1, r3
 80048d4:	4bae      	ldr	r3, [pc, #696]	@ (8004b90 <NLLS+0x38f0>)
 80048d6:	443b      	add	r3, r7
 80048d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048dc:	f7fb feac 	bl	8000638 <__aeabi_dmul>
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	4610      	mov	r0, r2
 80048e6:	4619      	mov	r1, r3
 80048e8:	4baa      	ldr	r3, [pc, #680]	@ (8004b94 <NLLS+0x38f4>)
 80048ea:	443b      	add	r3, r7
 80048ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f0:	f7fb fea2 	bl	8000638 <__aeabi_dmul>
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	4610      	mov	r0, r2
 80048fa:	4619      	mov	r1, r3
 80048fc:	4ba6      	ldr	r3, [pc, #664]	@ (8004b98 <NLLS+0x38f8>)
 80048fe:	443b      	add	r3, r7
 8004900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004904:	f7fb fe98 	bl	8000638 <__aeabi_dmul>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4610      	mov	r0, r2
 800490e:	4619      	mov	r1, r3
 8004910:	4ba2      	ldr	r3, [pc, #648]	@ (8004b9c <NLLS+0x38fc>)
 8004912:	443b      	add	r3, r7
 8004914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004918:	f7fb fe8e 	bl	8000638 <__aeabi_dmul>
 800491c:	4602      	mov	r2, r0
 800491e:	460b      	mov	r3, r1
 8004920:	4610      	mov	r0, r2
 8004922:	4619      	mov	r1, r3
 8004924:	4b9e      	ldr	r3, [pc, #632]	@ (8004ba0 <NLLS+0x3900>)
 8004926:	443b      	add	r3, r7
 8004928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492c:	f7fb fe84 	bl	8000638 <__aeabi_dmul>
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	4620      	mov	r0, r4
 8004936:	4629      	mov	r1, r5
 8004938:	f7fb fcc6 	bl	80002c8 <__aeabi_dsub>
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	4640      	mov	r0, r8
 8004942:	4649      	mov	r1, r9
 8004944:	f7fb fe78 	bl	8000638 <__aeabi_dmul>
 8004948:	4602      	mov	r2, r0
 800494a:	460b      	mov	r3, r1
 800494c:	61ba      	str	r2, [r7, #24]
 800494e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8004952:	61fb      	str	r3, [r7, #28]
 8004954:	4b93      	ldr	r3, [pc, #588]	@ (8004ba4 <NLLS+0x3904>)
 8004956:	443b      	add	r3, r7
 8004958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495c:	4991      	ldr	r1, [pc, #580]	@ (8004ba4 <NLLS+0x3904>)
 800495e:	4439      	add	r1, r7
 8004960:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004964:	f7fb fe68 	bl	8000638 <__aeabi_dmul>
 8004968:	4602      	mov	r2, r0
 800496a:	460b      	mov	r3, r1
 800496c:	4610      	mov	r0, r2
 800496e:	4619      	mov	r1, r3
 8004970:	4b86      	ldr	r3, [pc, #536]	@ (8004b8c <NLLS+0x38ec>)
 8004972:	443b      	add	r3, r7
 8004974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004978:	f7fb fe5e 	bl	8000638 <__aeabi_dmul>
 800497c:	4602      	mov	r2, r0
 800497e:	460b      	mov	r3, r1
 8004980:	4610      	mov	r0, r2
 8004982:	4619      	mov	r1, r3
 8004984:	4b81      	ldr	r3, [pc, #516]	@ (8004b8c <NLLS+0x38ec>)
 8004986:	443b      	add	r3, r7
 8004988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498c:	f7fb fe54 	bl	8000638 <__aeabi_dmul>
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	4610      	mov	r0, r2
 8004996:	4619      	mov	r1, r3
 8004998:	4b7d      	ldr	r3, [pc, #500]	@ (8004b90 <NLLS+0x38f0>)
 800499a:	443b      	add	r3, r7
 800499c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a0:	f7fb fe4a 	bl	8000638 <__aeabi_dmul>
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	4610      	mov	r0, r2
 80049aa:	4619      	mov	r1, r3
 80049ac:	4b79      	ldr	r3, [pc, #484]	@ (8004b94 <NLLS+0x38f4>)
 80049ae:	443b      	add	r3, r7
 80049b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b4:	f7fb fe40 	bl	8000638 <__aeabi_dmul>
 80049b8:	4602      	mov	r2, r0
 80049ba:	460b      	mov	r3, r1
 80049bc:	4610      	mov	r0, r2
 80049be:	4619      	mov	r1, r3
 80049c0:	4b74      	ldr	r3, [pc, #464]	@ (8004b94 <NLLS+0x38f4>)
 80049c2:	443b      	add	r3, r7
 80049c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c8:	f7fb fe36 	bl	8000638 <__aeabi_dmul>
 80049cc:	4602      	mov	r2, r0
 80049ce:	460b      	mov	r3, r1
 80049d0:	4610      	mov	r0, r2
 80049d2:	4619      	mov	r1, r3
 80049d4:	4b74      	ldr	r3, [pc, #464]	@ (8004ba8 <NLLS+0x3908>)
 80049d6:	443b      	add	r3, r7
 80049d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049dc:	f7fb fe2c 	bl	8000638 <__aeabi_dmul>
 80049e0:	4602      	mov	r2, r0
 80049e2:	460b      	mov	r3, r1
 80049e4:	4610      	mov	r0, r2
 80049e6:	4619      	mov	r1, r3
 80049e8:	4b6f      	ldr	r3, [pc, #444]	@ (8004ba8 <NLLS+0x3908>)
 80049ea:	443b      	add	r3, r7
 80049ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f0:	f7fb fe22 	bl	8000638 <__aeabi_dmul>
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	4614      	mov	r4, r2
 80049fa:	461d      	mov	r5, r3
 80049fc:	4b66      	ldr	r3, [pc, #408]	@ (8004b98 <NLLS+0x38f8>)
 80049fe:	443b      	add	r3, r7
 8004a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a04:	4964      	ldr	r1, [pc, #400]	@ (8004b98 <NLLS+0x38f8>)
 8004a06:	4439      	add	r1, r7
 8004a08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a0c:	f7fb fe14 	bl	8000638 <__aeabi_dmul>
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	4610      	mov	r0, r2
 8004a16:	4619      	mov	r1, r3
 8004a18:	4b5f      	ldr	r3, [pc, #380]	@ (8004b98 <NLLS+0x38f8>)
 8004a1a:	443b      	add	r3, r7
 8004a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a20:	f7fb fe0a 	bl	8000638 <__aeabi_dmul>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4620      	mov	r0, r4
 8004a2a:	4629      	mov	r1, r5
 8004a2c:	f7fb fe04 	bl	8000638 <__aeabi_dmul>
 8004a30:	4602      	mov	r2, r0
 8004a32:	460b      	mov	r3, r1
 8004a34:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004a38:	f7fb ff28 	bl	800088c <__aeabi_ddiv>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	460b      	mov	r3, r1
 8004a40:	4610      	mov	r0, r2
 8004a42:	4619      	mov	r1, r3
 8004a44:	4b59      	ldr	r3, [pc, #356]	@ (8004bac <NLLS+0x390c>)
 8004a46:	443b      	add	r3, r7
 8004a48:	f5a3 72d8 	sub.w	r2, r3, #432	@ 0x1b0
 8004a4c:	4b58      	ldr	r3, [pc, #352]	@ (8004bb0 <NLLS+0x3910>)
 8004a4e:	443b      	add	r3, r7
 8004a50:	681c      	ldr	r4, [r3, #0]
 8004a52:	f641 230a 	movw	r3, #6666	@ 0x1a0a
 8004a56:	4423      	add	r3, r4
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	4413      	add	r3, r2
 8004a5c:	e9c3 0100 	strd	r0, r1, [r3]

            mat_H[7][i] = (2*sin_phi*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*(cos_phi*cos_phi*cos_phi)*cos_rho*cos_rho) - (2*(bx - mx[i])*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sz*cos_lambda*cos_phi*cos_rho);
 8004a60:	4b4f      	ldr	r3, [pc, #316]	@ (8004ba0 <NLLS+0x3900>)
 8004a62:	443b      	add	r3, r7
 8004a64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a68:	4602      	mov	r2, r0
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	f7fb fc2e 	bl	80002cc <__adddf3>
 8004a70:	4602      	mov	r2, r0
 8004a72:	460b      	mov	r3, r1
 8004a74:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8004a78:	4b45      	ldr	r3, [pc, #276]	@ (8004b90 <NLLS+0x38f0>)
 8004a7a:	443b      	add	r3, r7
 8004a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a80:	4942      	ldr	r1, [pc, #264]	@ (8004b8c <NLLS+0x38ec>)
 8004a82:	4439      	add	r1, r7
 8004a84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a88:	f7fb fdd6 	bl	8000638 <__aeabi_dmul>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4690      	mov	r8, r2
 8004a92:	4699      	mov	r9, r3
 8004a94:	4b47      	ldr	r3, [pc, #284]	@ (8004bb4 <NLLS+0x3914>)
 8004a96:	443b      	add	r3, r7
 8004a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9c:	493f      	ldr	r1, [pc, #252]	@ (8004b9c <NLLS+0x38fc>)
 8004a9e:	4439      	add	r1, r7
 8004aa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004aa4:	f7fb fdc8 	bl	8000638 <__aeabi_dmul>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4614      	mov	r4, r2
 8004aae:	461d      	mov	r5, r3
 8004ab0:	4b39      	ldr	r3, [pc, #228]	@ (8004b98 <NLLS+0x38f8>)
 8004ab2:	443b      	add	r3, r7
 8004ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab8:	4936      	ldr	r1, [pc, #216]	@ (8004b94 <NLLS+0x38f4>)
 8004aba:	4439      	add	r1, r7
 8004abc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ac0:	f7fb fdba 	bl	8000638 <__aeabi_dmul>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4610      	mov	r0, r2
 8004aca:	4619      	mov	r1, r3
 8004acc:	4b34      	ldr	r3, [pc, #208]	@ (8004ba0 <NLLS+0x3900>)
 8004ace:	443b      	add	r3, r7
 8004ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad4:	f7fb fdb0 	bl	8000638 <__aeabi_dmul>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	4620      	mov	r0, r4
 8004ade:	4629      	mov	r1, r5
 8004ae0:	f7fb fbf2 	bl	80002c8 <__aeabi_dsub>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	4640      	mov	r0, r8
 8004aea:	4649      	mov	r1, r9
 8004aec:	f7fb fda4 	bl	8000638 <__aeabi_dmul>
 8004af0:	4602      	mov	r2, r0
 8004af2:	460b      	mov	r3, r1
 8004af4:	4614      	mov	r4, r2
 8004af6:	461d      	mov	r5, r3
 8004af8:	4b2d      	ldr	r3, [pc, #180]	@ (8004bb0 <NLLS+0x3910>)
 8004afa:	443b      	add	r3, r7
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	00da      	lsls	r2, r3, #3
 8004b00:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8004b04:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b10:	4929      	ldr	r1, [pc, #164]	@ (8004bb8 <NLLS+0x3918>)
 8004b12:	4439      	add	r1, r7
 8004b14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b18:	f7fb fbd6 	bl	80002c8 <__aeabi_dsub>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4620      	mov	r0, r4
 8004b22:	4629      	mov	r1, r5
 8004b24:	f7fb fd88 	bl	8000638 <__aeabi_dmul>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4690      	mov	r8, r2
 8004b2e:	4699      	mov	r9, r3
 8004b30:	4b16      	ldr	r3, [pc, #88]	@ (8004b8c <NLLS+0x38ec>)
 8004b32:	443b      	add	r3, r7
 8004b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b38:	491a      	ldr	r1, [pc, #104]	@ (8004ba4 <NLLS+0x3904>)
 8004b3a:	4439      	add	r1, r7
 8004b3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b40:	f7fb fd7a 	bl	8000638 <__aeabi_dmul>
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	4610      	mov	r0, r2
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	4b12      	ldr	r3, [pc, #72]	@ (8004b98 <NLLS+0x38f8>)
 8004b4e:	443b      	add	r3, r7
 8004b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b54:	f7fb fd70 	bl	8000638 <__aeabi_dmul>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	4614      	mov	r4, r2
 8004b5e:	461d      	mov	r5, r3
 8004b60:	4b13      	ldr	r3, [pc, #76]	@ (8004bb0 <NLLS+0x3910>)
 8004b62:	443b      	add	r3, r7
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	00da      	lsls	r2, r3, #3
 8004b68:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8004b6c:	f6a3 738c 	subw	r3, r3, #3980	@ 0xf8c
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4413      	add	r3, r2
 8004b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b78:	4910      	ldr	r1, [pc, #64]	@ (8004bbc <NLLS+0x391c>)
 8004b7a:	4439      	add	r1, r7
 8004b7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b80:	f7fb fba2 	bl	80002c8 <__aeabi_dsub>
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	4620      	mov	r0, r4
 8004b8a:	e019      	b.n	8004bc0 <NLLS+0x3920>
 8004b8c:	0002dfa8 	.word	0x0002dfa8
 8004b90:	0002dfa0 	.word	0x0002dfa0
 8004b94:	0002df00 	.word	0x0002df00
 8004b98:	0002df08 	.word	0x0002df08
 8004b9c:	0002df18 	.word	0x0002df18
 8004ba0:	0002df28 	.word	0x0002df28
 8004ba4:	0002dfb0 	.word	0x0002dfb0
 8004ba8:	0002df10 	.word	0x0002df10
 8004bac:	00013fc0 	.word	0x00013fc0
 8004bb0:	0002df58 	.word	0x0002df58
 8004bb4:	0002df20 	.word	0x0002df20
 8004bb8:	0002df98 	.word	0x0002df98
 8004bbc:	0002df88 	.word	0x0002df88
 8004bc0:	4629      	mov	r1, r5
 8004bc2:	f7fb fd39 	bl	8000638 <__aeabi_dmul>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	460b      	mov	r3, r1
 8004bca:	4640      	mov	r0, r8
 8004bcc:	4649      	mov	r1, r9
 8004bce:	f7fb fb7d 	bl	80002cc <__adddf3>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	4690      	mov	r8, r2
 8004bd8:	4699      	mov	r9, r3
 8004bda:	4bb4      	ldr	r3, [pc, #720]	@ (8004eac <NLLS+0x3c0c>)
 8004bdc:	443b      	add	r3, r7
 8004bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be2:	49b3      	ldr	r1, [pc, #716]	@ (8004eb0 <NLLS+0x3c10>)
 8004be4:	4439      	add	r1, r7
 8004be6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bea:	f7fb fd25 	bl	8000638 <__aeabi_dmul>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	4610      	mov	r0, r2
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4baf      	ldr	r3, [pc, #700]	@ (8004eb4 <NLLS+0x3c14>)
 8004bf8:	443b      	add	r3, r7
 8004bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfe:	f7fb fd1b 	bl	8000638 <__aeabi_dmul>
 8004c02:	4602      	mov	r2, r0
 8004c04:	460b      	mov	r3, r1
 8004c06:	4614      	mov	r4, r2
 8004c08:	461d      	mov	r5, r3
 8004c0a:	4bab      	ldr	r3, [pc, #684]	@ (8004eb8 <NLLS+0x3c18>)
 8004c0c:	443b      	add	r3, r7
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	00da      	lsls	r2, r3, #3
 8004c12:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8004c16:	f6a3 7388 	subw	r3, r3, #3976	@ 0xf88
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c22:	49a6      	ldr	r1, [pc, #664]	@ (8004ebc <NLLS+0x3c1c>)
 8004c24:	4439      	add	r1, r7
 8004c26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c2a:	f7fb fb4d 	bl	80002c8 <__aeabi_dsub>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	460b      	mov	r3, r1
 8004c32:	4620      	mov	r0, r4
 8004c34:	4629      	mov	r1, r5
 8004c36:	f7fb fcff 	bl	8000638 <__aeabi_dmul>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	4640      	mov	r0, r8
 8004c40:	4649      	mov	r1, r9
 8004c42:	f7fb fb41 	bl	80002c8 <__aeabi_dsub>
 8004c46:	4602      	mov	r2, r0
 8004c48:	460b      	mov	r3, r1
 8004c4a:	4692      	mov	sl, r2
 8004c4c:	469b      	mov	fp, r3
 8004c4e:	4b97      	ldr	r3, [pc, #604]	@ (8004eac <NLLS+0x3c0c>)
 8004c50:	443b      	add	r3, r7
 8004c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c56:	499a      	ldr	r1, [pc, #616]	@ (8004ec0 <NLLS+0x3c20>)
 8004c58:	4439      	add	r1, r7
 8004c5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c5e:	f7fb fceb 	bl	8000638 <__aeabi_dmul>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4690      	mov	r8, r2
 8004c68:	4699      	mov	r9, r3
 8004c6a:	4b96      	ldr	r3, [pc, #600]	@ (8004ec4 <NLLS+0x3c24>)
 8004c6c:	443b      	add	r3, r7
 8004c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c72:	4990      	ldr	r1, [pc, #576]	@ (8004eb4 <NLLS+0x3c14>)
 8004c74:	4439      	add	r1, r7
 8004c76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c7a:	f7fb fcdd 	bl	8000638 <__aeabi_dmul>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	460b      	mov	r3, r1
 8004c82:	4614      	mov	r4, r2
 8004c84:	461d      	mov	r5, r3
 8004c86:	4b90      	ldr	r3, [pc, #576]	@ (8004ec8 <NLLS+0x3c28>)
 8004c88:	443b      	add	r3, r7
 8004c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8e:	498f      	ldr	r1, [pc, #572]	@ (8004ecc <NLLS+0x3c2c>)
 8004c90:	4439      	add	r1, r7
 8004c92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c96:	f7fb fccf 	bl	8000638 <__aeabi_dmul>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	4610      	mov	r0, r2
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	4b8b      	ldr	r3, [pc, #556]	@ (8004ed0 <NLLS+0x3c30>)
 8004ca4:	443b      	add	r3, r7
 8004ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004caa:	f7fb fcc5 	bl	8000638 <__aeabi_dmul>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	4620      	mov	r0, r4
 8004cb4:	4629      	mov	r1, r5
 8004cb6:	f7fb fb07 	bl	80002c8 <__aeabi_dsub>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	4640      	mov	r0, r8
 8004cc0:	4649      	mov	r1, r9
 8004cc2:	f7fb fcb9 	bl	8000638 <__aeabi_dmul>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4614      	mov	r4, r2
 8004ccc:	461d      	mov	r5, r3
 8004cce:	4b7a      	ldr	r3, [pc, #488]	@ (8004eb8 <NLLS+0x3c18>)
 8004cd0:	443b      	add	r3, r7
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	00da      	lsls	r2, r3, #3
 8004cd6:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8004cda:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce6:	497b      	ldr	r1, [pc, #492]	@ (8004ed4 <NLLS+0x3c34>)
 8004ce8:	4439      	add	r1, r7
 8004cea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cee:	f7fb faeb 	bl	80002c8 <__aeabi_dsub>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	4629      	mov	r1, r5
 8004cfa:	f7fb fc9d 	bl	8000638 <__aeabi_dmul>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	460b      	mov	r3, r1
 8004d02:	4690      	mov	r8, r2
 8004d04:	4699      	mov	r9, r3
 8004d06:	4b6e      	ldr	r3, [pc, #440]	@ (8004ec0 <NLLS+0x3c20>)
 8004d08:	443b      	add	r3, r7
 8004d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0e:	4968      	ldr	r1, [pc, #416]	@ (8004eb0 <NLLS+0x3c10>)
 8004d10:	4439      	add	r1, r7
 8004d12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d16:	f7fb fc8f 	bl	8000638 <__aeabi_dmul>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	4610      	mov	r0, r2
 8004d20:	4619      	mov	r1, r3
 8004d22:	4b69      	ldr	r3, [pc, #420]	@ (8004ec8 <NLLS+0x3c28>)
 8004d24:	443b      	add	r3, r7
 8004d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2a:	f7fb fc85 	bl	8000638 <__aeabi_dmul>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	460b      	mov	r3, r1
 8004d32:	4614      	mov	r4, r2
 8004d34:	461d      	mov	r5, r3
 8004d36:	4b60      	ldr	r3, [pc, #384]	@ (8004eb8 <NLLS+0x3c18>)
 8004d38:	443b      	add	r3, r7
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	00da      	lsls	r2, r3, #3
 8004d3e:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8004d42:	f6a3 738c 	subw	r3, r3, #3980	@ 0xf8c
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4413      	add	r3, r2
 8004d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4e:	4962      	ldr	r1, [pc, #392]	@ (8004ed8 <NLLS+0x3c38>)
 8004d50:	4439      	add	r1, r7
 8004d52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d56:	f7fb fab7 	bl	80002c8 <__aeabi_dsub>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4620      	mov	r0, r4
 8004d60:	4629      	mov	r1, r5
 8004d62:	f7fb fc69 	bl	8000638 <__aeabi_dmul>
 8004d66:	4602      	mov	r2, r0
 8004d68:	460b      	mov	r3, r1
 8004d6a:	4640      	mov	r0, r8
 8004d6c:	4649      	mov	r1, r9
 8004d6e:	f7fb faad 	bl	80002cc <__adddf3>
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	4690      	mov	r8, r2
 8004d78:	4699      	mov	r9, r3
 8004d7a:	4b4c      	ldr	r3, [pc, #304]	@ (8004eac <NLLS+0x3c0c>)
 8004d7c:	443b      	add	r3, r7
 8004d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d82:	494b      	ldr	r1, [pc, #300]	@ (8004eb0 <NLLS+0x3c10>)
 8004d84:	4439      	add	r1, r7
 8004d86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d8a:	f7fb fc55 	bl	8000638 <__aeabi_dmul>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	460b      	mov	r3, r1
 8004d92:	4610      	mov	r0, r2
 8004d94:	4619      	mov	r1, r3
 8004d96:	4b47      	ldr	r3, [pc, #284]	@ (8004eb4 <NLLS+0x3c14>)
 8004d98:	443b      	add	r3, r7
 8004d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9e:	f7fb fc4b 	bl	8000638 <__aeabi_dmul>
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	4614      	mov	r4, r2
 8004da8:	461d      	mov	r5, r3
 8004daa:	4b43      	ldr	r3, [pc, #268]	@ (8004eb8 <NLLS+0x3c18>)
 8004dac:	443b      	add	r3, r7
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	00da      	lsls	r2, r3, #3
 8004db2:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8004db6:	f6a3 7388 	subw	r3, r3, #3976	@ 0xf88
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc2:	493e      	ldr	r1, [pc, #248]	@ (8004ebc <NLLS+0x3c1c>)
 8004dc4:	4439      	add	r1, r7
 8004dc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004dca:	f7fb fa7d 	bl	80002c8 <__aeabi_dsub>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	4620      	mov	r0, r4
 8004dd4:	4629      	mov	r1, r5
 8004dd6:	f7fb fc2f 	bl	8000638 <__aeabi_dmul>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	460b      	mov	r3, r1
 8004dde:	4640      	mov	r0, r8
 8004de0:	4649      	mov	r1, r9
 8004de2:	f7fb fa71 	bl	80002c8 <__aeabi_dsub>
 8004de6:	4602      	mov	r2, r0
 8004de8:	460b      	mov	r3, r1
 8004dea:	4650      	mov	r0, sl
 8004dec:	4659      	mov	r1, fp
 8004dee:	f7fb fc23 	bl	8000638 <__aeabi_dmul>
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004dfa:	f7fb fc1d 	bl	8000638 <__aeabi_dmul>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	460b      	mov	r3, r1
 8004e02:	4690      	mov	r8, r2
 8004e04:	4699      	mov	r9, r3
 8004e06:	4b2a      	ldr	r3, [pc, #168]	@ (8004eb0 <NLLS+0x3c10>)
 8004e08:	443b      	add	r3, r7
 8004e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0e:	4928      	ldr	r1, [pc, #160]	@ (8004eb0 <NLLS+0x3c10>)
 8004e10:	4439      	add	r1, r7
 8004e12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e16:	f7fb fc0f 	bl	8000638 <__aeabi_dmul>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	4610      	mov	r0, r2
 8004e20:	4619      	mov	r1, r3
 8004e22:	4b27      	ldr	r3, [pc, #156]	@ (8004ec0 <NLLS+0x3c20>)
 8004e24:	443b      	add	r3, r7
 8004e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2a:	f7fb fc05 	bl	8000638 <__aeabi_dmul>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	460b      	mov	r3, r1
 8004e32:	4610      	mov	r0, r2
 8004e34:	4619      	mov	r1, r3
 8004e36:	4b22      	ldr	r3, [pc, #136]	@ (8004ec0 <NLLS+0x3c20>)
 8004e38:	443b      	add	r3, r7
 8004e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3e:	f7fb fbfb 	bl	8000638 <__aeabi_dmul>
 8004e42:	4602      	mov	r2, r0
 8004e44:	460b      	mov	r3, r1
 8004e46:	4610      	mov	r0, r2
 8004e48:	4619      	mov	r1, r3
 8004e4a:	4b18      	ldr	r3, [pc, #96]	@ (8004eac <NLLS+0x3c0c>)
 8004e4c:	443b      	add	r3, r7
 8004e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e52:	f7fb fbf1 	bl	8000638 <__aeabi_dmul>
 8004e56:	4602      	mov	r2, r0
 8004e58:	460b      	mov	r3, r1
 8004e5a:	4610      	mov	r0, r2
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	4b13      	ldr	r3, [pc, #76]	@ (8004eac <NLLS+0x3c0c>)
 8004e60:	443b      	add	r3, r7
 8004e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e66:	f7fb fbe7 	bl	8000638 <__aeabi_dmul>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	4610      	mov	r0, r2
 8004e70:	4619      	mov	r1, r3
 8004e72:	4b16      	ldr	r3, [pc, #88]	@ (8004ecc <NLLS+0x3c2c>)
 8004e74:	443b      	add	r3, r7
 8004e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7a:	f7fb fbdd 	bl	8000638 <__aeabi_dmul>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	4610      	mov	r0, r2
 8004e84:	4619      	mov	r1, r3
 8004e86:	4b11      	ldr	r3, [pc, #68]	@ (8004ecc <NLLS+0x3c2c>)
 8004e88:	443b      	add	r3, r7
 8004e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8e:	f7fb fbd3 	bl	8000638 <__aeabi_dmul>
 8004e92:	4602      	mov	r2, r0
 8004e94:	460b      	mov	r3, r1
 8004e96:	4614      	mov	r4, r2
 8004e98:	461d      	mov	r5, r3
 8004e9a:	4b10      	ldr	r3, [pc, #64]	@ (8004edc <NLLS+0x3c3c>)
 8004e9c:	443b      	add	r3, r7
 8004e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea2:	490e      	ldr	r1, [pc, #56]	@ (8004edc <NLLS+0x3c3c>)
 8004ea4:	4439      	add	r1, r7
 8004ea6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004eaa:	e019      	b.n	8004ee0 <NLLS+0x3c40>
 8004eac:	0002dfa0 	.word	0x0002dfa0
 8004eb0:	0002dfb0 	.word	0x0002dfb0
 8004eb4:	0002df18 	.word	0x0002df18
 8004eb8:	0002df58 	.word	0x0002df58
 8004ebc:	0002df90 	.word	0x0002df90
 8004ec0:	0002dfa8 	.word	0x0002dfa8
 8004ec4:	0002df20 	.word	0x0002df20
 8004ec8:	0002df08 	.word	0x0002df08
 8004ecc:	0002df00 	.word	0x0002df00
 8004ed0:	0002df28 	.word	0x0002df28
 8004ed4:	0002df98 	.word	0x0002df98
 8004ed8:	0002df88 	.word	0x0002df88
 8004edc:	0002df10 	.word	0x0002df10
 8004ee0:	f7fb fbaa 	bl	8000638 <__aeabi_dmul>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	4610      	mov	r0, r2
 8004eea:	4619      	mov	r1, r3
 8004eec:	4bb7      	ldr	r3, [pc, #732]	@ (80051cc <NLLS+0x3f2c>)
 8004eee:	443b      	add	r3, r7
 8004ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef4:	f7fb fba0 	bl	8000638 <__aeabi_dmul>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	4620      	mov	r0, r4
 8004efe:	4629      	mov	r1, r5
 8004f00:	f7fb fb9a 	bl	8000638 <__aeabi_dmul>
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	4610      	mov	r0, r2
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	4bb0      	ldr	r3, [pc, #704]	@ (80051d0 <NLLS+0x3f30>)
 8004f0e:	443b      	add	r3, r7
 8004f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f14:	f7fb fb90 	bl	8000638 <__aeabi_dmul>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	4610      	mov	r0, r2
 8004f1e:	4619      	mov	r1, r3
 8004f20:	4bab      	ldr	r3, [pc, #684]	@ (80051d0 <NLLS+0x3f30>)
 8004f22:	443b      	add	r3, r7
 8004f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f28:	f7fb fb86 	bl	8000638 <__aeabi_dmul>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	460b      	mov	r3, r1
 8004f30:	4640      	mov	r0, r8
 8004f32:	4649      	mov	r1, r9
 8004f34:	f7fb fcaa 	bl	800088c <__aeabi_ddiv>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8004f40:	4ba4      	ldr	r3, [pc, #656]	@ (80051d4 <NLLS+0x3f34>)
 8004f42:	443b      	add	r3, r7
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	f507 627c 	add.w	r2, r7, #4032	@ 0xfc0
 8004f4c:	f6a2 7284 	subw	r2, r2, #3972	@ 0xf84
 8004f50:	6812      	ldr	r2, [r2, #0]
 8004f52:	4413      	add	r3, r2
 8004f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f58:	499f      	ldr	r1, [pc, #636]	@ (80051d8 <NLLS+0x3f38>)
 8004f5a:	4439      	add	r1, r7
 8004f5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f60:	f7fb f9b2 	bl	80002c8 <__aeabi_dsub>
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	4610      	mov	r0, r2
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	f7fb f9ac 	bl	80002cc <__adddf3>
 8004f74:	4602      	mov	r2, r0
 8004f76:	460b      	mov	r3, r1
 8004f78:	4692      	mov	sl, r2
 8004f7a:	469b      	mov	fp, r3
 8004f7c:	4b97      	ldr	r3, [pc, #604]	@ (80051dc <NLLS+0x3f3c>)
 8004f7e:	443b      	add	r3, r7
 8004f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f84:	4996      	ldr	r1, [pc, #600]	@ (80051e0 <NLLS+0x3f40>)
 8004f86:	4439      	add	r1, r7
 8004f88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f8c:	f7fb fb54 	bl	8000638 <__aeabi_dmul>
 8004f90:	4602      	mov	r2, r0
 8004f92:	460b      	mov	r3, r1
 8004f94:	4690      	mov	r8, r2
 8004f96:	4699      	mov	r9, r3
 8004f98:	4b92      	ldr	r3, [pc, #584]	@ (80051e4 <NLLS+0x3f44>)
 8004f9a:	443b      	add	r3, r7
 8004f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa0:	4991      	ldr	r1, [pc, #580]	@ (80051e8 <NLLS+0x3f48>)
 8004fa2:	4439      	add	r1, r7
 8004fa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004fa8:	f7fb fb46 	bl	8000638 <__aeabi_dmul>
 8004fac:	4602      	mov	r2, r0
 8004fae:	460b      	mov	r3, r1
 8004fb0:	4614      	mov	r4, r2
 8004fb2:	461d      	mov	r5, r3
 8004fb4:	4b86      	ldr	r3, [pc, #536]	@ (80051d0 <NLLS+0x3f30>)
 8004fb6:	443b      	add	r3, r7
 8004fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbc:	498b      	ldr	r1, [pc, #556]	@ (80051ec <NLLS+0x3f4c>)
 8004fbe:	4439      	add	r1, r7
 8004fc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004fc4:	f7fb fb38 	bl	8000638 <__aeabi_dmul>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	460b      	mov	r3, r1
 8004fcc:	4610      	mov	r0, r2
 8004fce:	4619      	mov	r1, r3
 8004fd0:	4b87      	ldr	r3, [pc, #540]	@ (80051f0 <NLLS+0x3f50>)
 8004fd2:	443b      	add	r3, r7
 8004fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd8:	f7fb fb2e 	bl	8000638 <__aeabi_dmul>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	460b      	mov	r3, r1
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	4629      	mov	r1, r5
 8004fe4:	f7fb f970 	bl	80002c8 <__aeabi_dsub>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	4640      	mov	r0, r8
 8004fee:	4649      	mov	r1, r9
 8004ff0:	f7fb fb22 	bl	8000638 <__aeabi_dmul>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4614      	mov	r4, r2
 8004ffa:	461d      	mov	r5, r3
 8004ffc:	4b75      	ldr	r3, [pc, #468]	@ (80051d4 <NLLS+0x3f34>)
 8004ffe:	443b      	add	r3, r7
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	00da      	lsls	r2, r3, #3
 8005004:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8005008:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4413      	add	r3, r2
 8005010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005014:	4970      	ldr	r1, [pc, #448]	@ (80051d8 <NLLS+0x3f38>)
 8005016:	4439      	add	r1, r7
 8005018:	e9d1 0100 	ldrd	r0, r1, [r1]
 800501c:	f7fb f954 	bl	80002c8 <__aeabi_dsub>
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	4620      	mov	r0, r4
 8005026:	4629      	mov	r1, r5
 8005028:	f7fb fb06 	bl	8000638 <__aeabi_dmul>
 800502c:	4602      	mov	r2, r0
 800502e:	460b      	mov	r3, r1
 8005030:	4690      	mov	r8, r2
 8005032:	4699      	mov	r9, r3
 8005034:	4b6a      	ldr	r3, [pc, #424]	@ (80051e0 <NLLS+0x3f40>)
 8005036:	443b      	add	r3, r7
 8005038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503c:	496d      	ldr	r1, [pc, #436]	@ (80051f4 <NLLS+0x3f54>)
 800503e:	4439      	add	r1, r7
 8005040:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005044:	f7fb faf8 	bl	8000638 <__aeabi_dmul>
 8005048:	4602      	mov	r2, r0
 800504a:	460b      	mov	r3, r1
 800504c:	4610      	mov	r0, r2
 800504e:	4619      	mov	r1, r3
 8005050:	4b5f      	ldr	r3, [pc, #380]	@ (80051d0 <NLLS+0x3f30>)
 8005052:	443b      	add	r3, r7
 8005054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005058:	f7fb faee 	bl	8000638 <__aeabi_dmul>
 800505c:	4602      	mov	r2, r0
 800505e:	460b      	mov	r3, r1
 8005060:	4614      	mov	r4, r2
 8005062:	461d      	mov	r5, r3
 8005064:	4b5b      	ldr	r3, [pc, #364]	@ (80051d4 <NLLS+0x3f34>)
 8005066:	443b      	add	r3, r7
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	00da      	lsls	r2, r3, #3
 800506c:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8005070:	f6a3 738c 	subw	r3, r3, #3980	@ 0xf8c
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4413      	add	r3, r2
 8005078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507c:	495e      	ldr	r1, [pc, #376]	@ (80051f8 <NLLS+0x3f58>)
 800507e:	4439      	add	r1, r7
 8005080:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005084:	f7fb f920 	bl	80002c8 <__aeabi_dsub>
 8005088:	4602      	mov	r2, r0
 800508a:	460b      	mov	r3, r1
 800508c:	4620      	mov	r0, r4
 800508e:	4629      	mov	r1, r5
 8005090:	f7fb fad2 	bl	8000638 <__aeabi_dmul>
 8005094:	4602      	mov	r2, r0
 8005096:	460b      	mov	r3, r1
 8005098:	4640      	mov	r0, r8
 800509a:	4649      	mov	r1, r9
 800509c:	f7fb f916 	bl	80002cc <__adddf3>
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4690      	mov	r8, r2
 80050a6:	4699      	mov	r9, r3
 80050a8:	4b4c      	ldr	r3, [pc, #304]	@ (80051dc <NLLS+0x3f3c>)
 80050aa:	443b      	add	r3, r7
 80050ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b0:	4950      	ldr	r1, [pc, #320]	@ (80051f4 <NLLS+0x3f54>)
 80050b2:	4439      	add	r1, r7
 80050b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050b8:	f7fb fabe 	bl	8000638 <__aeabi_dmul>
 80050bc:	4602      	mov	r2, r0
 80050be:	460b      	mov	r3, r1
 80050c0:	4610      	mov	r0, r2
 80050c2:	4619      	mov	r1, r3
 80050c4:	4b48      	ldr	r3, [pc, #288]	@ (80051e8 <NLLS+0x3f48>)
 80050c6:	443b      	add	r3, r7
 80050c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050cc:	f7fb fab4 	bl	8000638 <__aeabi_dmul>
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	4614      	mov	r4, r2
 80050d6:	461d      	mov	r5, r3
 80050d8:	4b3e      	ldr	r3, [pc, #248]	@ (80051d4 <NLLS+0x3f34>)
 80050da:	443b      	add	r3, r7
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	00da      	lsls	r2, r3, #3
 80050e0:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80050e4:	f6a3 7388 	subw	r3, r3, #3976	@ 0xf88
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4413      	add	r3, r2
 80050ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f0:	4942      	ldr	r1, [pc, #264]	@ (80051fc <NLLS+0x3f5c>)
 80050f2:	4439      	add	r1, r7
 80050f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050f8:	f7fb f8e6 	bl	80002c8 <__aeabi_dsub>
 80050fc:	4602      	mov	r2, r0
 80050fe:	460b      	mov	r3, r1
 8005100:	4620      	mov	r0, r4
 8005102:	4629      	mov	r1, r5
 8005104:	f7fb fa98 	bl	8000638 <__aeabi_dmul>
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	4640      	mov	r0, r8
 800510e:	4649      	mov	r1, r9
 8005110:	f7fb f8da 	bl	80002c8 <__aeabi_dsub>
 8005114:	4602      	mov	r2, r0
 8005116:	460b      	mov	r3, r1
 8005118:	4650      	mov	r0, sl
 800511a:	4659      	mov	r1, fp
 800511c:	f7fb fa8c 	bl	8000638 <__aeabi_dmul>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	4614      	mov	r4, r2
 8005126:	461d      	mov	r5, r3
 8005128:	4b32      	ldr	r3, [pc, #200]	@ (80051f4 <NLLS+0x3f54>)
 800512a:	443b      	add	r3, r7
 800512c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005130:	4930      	ldr	r1, [pc, #192]	@ (80051f4 <NLLS+0x3f54>)
 8005132:	4439      	add	r1, r7
 8005134:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005138:	f7fb fa7e 	bl	8000638 <__aeabi_dmul>
 800513c:	4602      	mov	r2, r0
 800513e:	460b      	mov	r3, r1
 8005140:	4610      	mov	r0, r2
 8005142:	4619      	mov	r1, r3
 8005144:	4b26      	ldr	r3, [pc, #152]	@ (80051e0 <NLLS+0x3f40>)
 8005146:	443b      	add	r3, r7
 8005148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514c:	f7fb fa74 	bl	8000638 <__aeabi_dmul>
 8005150:	4602      	mov	r2, r0
 8005152:	460b      	mov	r3, r1
 8005154:	4610      	mov	r0, r2
 8005156:	4619      	mov	r1, r3
 8005158:	4b20      	ldr	r3, [pc, #128]	@ (80051dc <NLLS+0x3f3c>)
 800515a:	443b      	add	r3, r7
 800515c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005160:	f7fb fa6a 	bl	8000638 <__aeabi_dmul>
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	4610      	mov	r0, r2
 800516a:	4619      	mov	r1, r3
 800516c:	4b1f      	ldr	r3, [pc, #124]	@ (80051ec <NLLS+0x3f4c>)
 800516e:	443b      	add	r3, r7
 8005170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005174:	f7fb fa60 	bl	8000638 <__aeabi_dmul>
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	4610      	mov	r0, r2
 800517e:	4619      	mov	r1, r3
 8005180:	4b12      	ldr	r3, [pc, #72]	@ (80051cc <NLLS+0x3f2c>)
 8005182:	443b      	add	r3, r7
 8005184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005188:	f7fb fa56 	bl	8000638 <__aeabi_dmul>
 800518c:	4602      	mov	r2, r0
 800518e:	460b      	mov	r3, r1
 8005190:	4610      	mov	r0, r2
 8005192:	4619      	mov	r1, r3
 8005194:	4b0e      	ldr	r3, [pc, #56]	@ (80051d0 <NLLS+0x3f30>)
 8005196:	443b      	add	r3, r7
 8005198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519c:	f7fb fa4c 	bl	8000638 <__aeabi_dmul>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	4620      	mov	r0, r4
 80051a6:	4629      	mov	r1, r5
 80051a8:	f7fb fb70 	bl	800088c <__aeabi_ddiv>
 80051ac:	4602      	mov	r2, r0
 80051ae:	460b      	mov	r3, r1
 80051b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80051b4:	f7fb f888 	bl	80002c8 <__aeabi_dsub>
 80051b8:	4602      	mov	r2, r0
 80051ba:	460b      	mov	r3, r1
 80051bc:	4610      	mov	r0, r2
 80051be:	4619      	mov	r1, r3
 80051c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005200 <NLLS+0x3f60>)
 80051c2:	443b      	add	r3, r7
 80051c4:	f5a3 72d8 	sub.w	r2, r3, #432	@ 0x1b0
 80051c8:	e01c      	b.n	8005204 <NLLS+0x3f64>
 80051ca:	bf00      	nop
 80051cc:	0002df10 	.word	0x0002df10
 80051d0:	0002df08 	.word	0x0002df08
 80051d4:	0002df58 	.word	0x0002df58
 80051d8:	0002df98 	.word	0x0002df98
 80051dc:	0002dfa0 	.word	0x0002dfa0
 80051e0:	0002dfa8 	.word	0x0002dfa8
 80051e4:	0002df20 	.word	0x0002df20
 80051e8:	0002df18 	.word	0x0002df18
 80051ec:	0002df00 	.word	0x0002df00
 80051f0:	0002df28 	.word	0x0002df28
 80051f4:	0002dfb0 	.word	0x0002dfb0
 80051f8:	0002df88 	.word	0x0002df88
 80051fc:	0002df90 	.word	0x0002df90
 8005200:	00013fc0 	.word	0x00013fc0
 8005204:	4bb2      	ldr	r3, [pc, #712]	@ (80054d0 <NLLS+0x4230>)
 8005206:	443b      	add	r3, r7
 8005208:	681c      	ldr	r4, [r3, #0]
 800520a:	f641 6361 	movw	r3, #7777	@ 0x1e61
 800520e:	4423      	add	r3, r4
 8005210:	00db      	lsls	r3, r3, #3
 8005212:	4413      	add	r3, r2
 8005214:	e9c3 0100 	strd	r0, r1, [r3]

            mat_H[8][i] = (2*sin_lambda*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/(sx*sx*sy*sy*sz*sz*(cos_lambda*cos_lambda*cos_lambda)*cos_phi*cos_phi*(cos_rho*cos_rho)) + (2*(sy*sz*(cos_lambda*sin_rho + cos_rho*sin_lambda*sin_phi)*(bx - mx[i]) - sx*sz*cos_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8005218:	4bae      	ldr	r3, [pc, #696]	@ (80054d4 <NLLS+0x4234>)
 800521a:	443b      	add	r3, r7
 800521c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005220:	4602      	mov	r2, r0
 8005222:	460b      	mov	r3, r1
 8005224:	f7fb f852 	bl	80002cc <__adddf3>
 8005228:	4602      	mov	r2, r0
 800522a:	460b      	mov	r3, r1
 800522c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8005230:	4ba9      	ldr	r3, [pc, #676]	@ (80054d8 <NLLS+0x4238>)
 8005232:	443b      	add	r3, r7
 8005234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005238:	49a8      	ldr	r1, [pc, #672]	@ (80054dc <NLLS+0x423c>)
 800523a:	4439      	add	r1, r7
 800523c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005240:	f7fb f9fa 	bl	8000638 <__aeabi_dmul>
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	4690      	mov	r8, r2
 800524a:	4699      	mov	r9, r3
 800524c:	4ba4      	ldr	r3, [pc, #656]	@ (80054e0 <NLLS+0x4240>)
 800524e:	443b      	add	r3, r7
 8005250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005254:	499f      	ldr	r1, [pc, #636]	@ (80054d4 <NLLS+0x4234>)
 8005256:	4439      	add	r1, r7
 8005258:	e9d1 0100 	ldrd	r0, r1, [r1]
 800525c:	f7fb f9ec 	bl	8000638 <__aeabi_dmul>
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	4614      	mov	r4, r2
 8005266:	461d      	mov	r5, r3
 8005268:	4b9e      	ldr	r3, [pc, #632]	@ (80054e4 <NLLS+0x4244>)
 800526a:	443b      	add	r3, r7
 800526c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005270:	499d      	ldr	r1, [pc, #628]	@ (80054e8 <NLLS+0x4248>)
 8005272:	4439      	add	r1, r7
 8005274:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005278:	f7fb f9de 	bl	8000638 <__aeabi_dmul>
 800527c:	4602      	mov	r2, r0
 800527e:	460b      	mov	r3, r1
 8005280:	4610      	mov	r0, r2
 8005282:	4619      	mov	r1, r3
 8005284:	4b99      	ldr	r3, [pc, #612]	@ (80054ec <NLLS+0x424c>)
 8005286:	443b      	add	r3, r7
 8005288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528c:	f7fb f9d4 	bl	8000638 <__aeabi_dmul>
 8005290:	4602      	mov	r2, r0
 8005292:	460b      	mov	r3, r1
 8005294:	4620      	mov	r0, r4
 8005296:	4629      	mov	r1, r5
 8005298:	f7fb f816 	bl	80002c8 <__aeabi_dsub>
 800529c:	4602      	mov	r2, r0
 800529e:	460b      	mov	r3, r1
 80052a0:	4640      	mov	r0, r8
 80052a2:	4649      	mov	r1, r9
 80052a4:	f7fb f9c8 	bl	8000638 <__aeabi_dmul>
 80052a8:	4602      	mov	r2, r0
 80052aa:	460b      	mov	r3, r1
 80052ac:	4614      	mov	r4, r2
 80052ae:	461d      	mov	r5, r3
 80052b0:	4b87      	ldr	r3, [pc, #540]	@ (80054d0 <NLLS+0x4230>)
 80052b2:	443b      	add	r3, r7
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	00da      	lsls	r2, r3, #3
 80052b8:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80052bc:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4413      	add	r3, r2
 80052c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c8:	4989      	ldr	r1, [pc, #548]	@ (80054f0 <NLLS+0x4250>)
 80052ca:	4439      	add	r1, r7
 80052cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052d0:	f7fa fffa 	bl	80002c8 <__aeabi_dsub>
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	4620      	mov	r0, r4
 80052da:	4629      	mov	r1, r5
 80052dc:	f7fb f9ac 	bl	8000638 <__aeabi_dmul>
 80052e0:	4602      	mov	r2, r0
 80052e2:	460b      	mov	r3, r1
 80052e4:	4690      	mov	r8, r2
 80052e6:	4699      	mov	r9, r3
 80052e8:	4b7c      	ldr	r3, [pc, #496]	@ (80054dc <NLLS+0x423c>)
 80052ea:	443b      	add	r3, r7
 80052ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f0:	4980      	ldr	r1, [pc, #512]	@ (80054f4 <NLLS+0x4254>)
 80052f2:	4439      	add	r1, r7
 80052f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052f8:	f7fb f99e 	bl	8000638 <__aeabi_dmul>
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	4610      	mov	r0, r2
 8005302:	4619      	mov	r1, r3
 8005304:	4b77      	ldr	r3, [pc, #476]	@ (80054e4 <NLLS+0x4244>)
 8005306:	443b      	add	r3, r7
 8005308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530c:	f7fb f994 	bl	8000638 <__aeabi_dmul>
 8005310:	4602      	mov	r2, r0
 8005312:	460b      	mov	r3, r1
 8005314:	4614      	mov	r4, r2
 8005316:	461d      	mov	r5, r3
 8005318:	4b6d      	ldr	r3, [pc, #436]	@ (80054d0 <NLLS+0x4230>)
 800531a:	443b      	add	r3, r7
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	00da      	lsls	r2, r3, #3
 8005320:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8005324:	f6a3 738c 	subw	r3, r3, #3980	@ 0xf8c
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4413      	add	r3, r2
 800532c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005330:	4971      	ldr	r1, [pc, #452]	@ (80054f8 <NLLS+0x4258>)
 8005332:	4439      	add	r1, r7
 8005334:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005338:	f7fa ffc6 	bl	80002c8 <__aeabi_dsub>
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	4620      	mov	r0, r4
 8005342:	4629      	mov	r1, r5
 8005344:	f7fb f978 	bl	8000638 <__aeabi_dmul>
 8005348:	4602      	mov	r2, r0
 800534a:	460b      	mov	r3, r1
 800534c:	4640      	mov	r0, r8
 800534e:	4649      	mov	r1, r9
 8005350:	f7fa ffbc 	bl	80002cc <__adddf3>
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	4690      	mov	r8, r2
 800535a:	4699      	mov	r9, r3
 800535c:	4b5e      	ldr	r3, [pc, #376]	@ (80054d8 <NLLS+0x4238>)
 800535e:	443b      	add	r3, r7
 8005360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005364:	4963      	ldr	r1, [pc, #396]	@ (80054f4 <NLLS+0x4254>)
 8005366:	4439      	add	r1, r7
 8005368:	e9d1 0100 	ldrd	r0, r1, [r1]
 800536c:	f7fb f964 	bl	8000638 <__aeabi_dmul>
 8005370:	4602      	mov	r2, r0
 8005372:	460b      	mov	r3, r1
 8005374:	4610      	mov	r0, r2
 8005376:	4619      	mov	r1, r3
 8005378:	4b56      	ldr	r3, [pc, #344]	@ (80054d4 <NLLS+0x4234>)
 800537a:	443b      	add	r3, r7
 800537c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005380:	f7fb f95a 	bl	8000638 <__aeabi_dmul>
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	4614      	mov	r4, r2
 800538a:	461d      	mov	r5, r3
 800538c:	4b50      	ldr	r3, [pc, #320]	@ (80054d0 <NLLS+0x4230>)
 800538e:	443b      	add	r3, r7
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	00da      	lsls	r2, r3, #3
 8005394:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8005398:	f6a3 7388 	subw	r3, r3, #3976	@ 0xf88
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4413      	add	r3, r2
 80053a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a4:	4955      	ldr	r1, [pc, #340]	@ (80054fc <NLLS+0x425c>)
 80053a6:	4439      	add	r1, r7
 80053a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053ac:	f7fa ff8c 	bl	80002c8 <__aeabi_dsub>
 80053b0:	4602      	mov	r2, r0
 80053b2:	460b      	mov	r3, r1
 80053b4:	4620      	mov	r0, r4
 80053b6:	4629      	mov	r1, r5
 80053b8:	f7fb f93e 	bl	8000638 <__aeabi_dmul>
 80053bc:	4602      	mov	r2, r0
 80053be:	460b      	mov	r3, r1
 80053c0:	4640      	mov	r0, r8
 80053c2:	4649      	mov	r1, r9
 80053c4:	f7fa ff80 	bl	80002c8 <__aeabi_dsub>
 80053c8:	4602      	mov	r2, r0
 80053ca:	460b      	mov	r3, r1
 80053cc:	4692      	mov	sl, r2
 80053ce:	469b      	mov	fp, r3
 80053d0:	4b41      	ldr	r3, [pc, #260]	@ (80054d8 <NLLS+0x4238>)
 80053d2:	443b      	add	r3, r7
 80053d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d8:	4940      	ldr	r1, [pc, #256]	@ (80054dc <NLLS+0x423c>)
 80053da:	4439      	add	r1, r7
 80053dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053e0:	f7fb f92a 	bl	8000638 <__aeabi_dmul>
 80053e4:	4602      	mov	r2, r0
 80053e6:	460b      	mov	r3, r1
 80053e8:	4690      	mov	r8, r2
 80053ea:	4699      	mov	r9, r3
 80053ec:	4b3c      	ldr	r3, [pc, #240]	@ (80054e0 <NLLS+0x4240>)
 80053ee:	443b      	add	r3, r7
 80053f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f4:	4937      	ldr	r1, [pc, #220]	@ (80054d4 <NLLS+0x4234>)
 80053f6:	4439      	add	r1, r7
 80053f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053fc:	f7fb f91c 	bl	8000638 <__aeabi_dmul>
 8005400:	4602      	mov	r2, r0
 8005402:	460b      	mov	r3, r1
 8005404:	4614      	mov	r4, r2
 8005406:	461d      	mov	r5, r3
 8005408:	4b36      	ldr	r3, [pc, #216]	@ (80054e4 <NLLS+0x4244>)
 800540a:	443b      	add	r3, r7
 800540c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005410:	4935      	ldr	r1, [pc, #212]	@ (80054e8 <NLLS+0x4248>)
 8005412:	4439      	add	r1, r7
 8005414:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005418:	f7fb f90e 	bl	8000638 <__aeabi_dmul>
 800541c:	4602      	mov	r2, r0
 800541e:	460b      	mov	r3, r1
 8005420:	4610      	mov	r0, r2
 8005422:	4619      	mov	r1, r3
 8005424:	4b31      	ldr	r3, [pc, #196]	@ (80054ec <NLLS+0x424c>)
 8005426:	443b      	add	r3, r7
 8005428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542c:	f7fb f904 	bl	8000638 <__aeabi_dmul>
 8005430:	4602      	mov	r2, r0
 8005432:	460b      	mov	r3, r1
 8005434:	4620      	mov	r0, r4
 8005436:	4629      	mov	r1, r5
 8005438:	f7fa ff46 	bl	80002c8 <__aeabi_dsub>
 800543c:	4602      	mov	r2, r0
 800543e:	460b      	mov	r3, r1
 8005440:	4640      	mov	r0, r8
 8005442:	4649      	mov	r1, r9
 8005444:	f7fb f8f8 	bl	8000638 <__aeabi_dmul>
 8005448:	4602      	mov	r2, r0
 800544a:	460b      	mov	r3, r1
 800544c:	4614      	mov	r4, r2
 800544e:	461d      	mov	r5, r3
 8005450:	4b1f      	ldr	r3, [pc, #124]	@ (80054d0 <NLLS+0x4230>)
 8005452:	443b      	add	r3, r7
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	00da      	lsls	r2, r3, #3
 8005458:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800545c:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4413      	add	r3, r2
 8005464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005468:	4921      	ldr	r1, [pc, #132]	@ (80054f0 <NLLS+0x4250>)
 800546a:	4439      	add	r1, r7
 800546c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005470:	f7fa ff2a 	bl	80002c8 <__aeabi_dsub>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	4620      	mov	r0, r4
 800547a:	4629      	mov	r1, r5
 800547c:	f7fb f8dc 	bl	8000638 <__aeabi_dmul>
 8005480:	4602      	mov	r2, r0
 8005482:	460b      	mov	r3, r1
 8005484:	4690      	mov	r8, r2
 8005486:	4699      	mov	r9, r3
 8005488:	4b14      	ldr	r3, [pc, #80]	@ (80054dc <NLLS+0x423c>)
 800548a:	443b      	add	r3, r7
 800548c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005490:	4918      	ldr	r1, [pc, #96]	@ (80054f4 <NLLS+0x4254>)
 8005492:	4439      	add	r1, r7
 8005494:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005498:	f7fb f8ce 	bl	8000638 <__aeabi_dmul>
 800549c:	4602      	mov	r2, r0
 800549e:	460b      	mov	r3, r1
 80054a0:	4610      	mov	r0, r2
 80054a2:	4619      	mov	r1, r3
 80054a4:	4b0f      	ldr	r3, [pc, #60]	@ (80054e4 <NLLS+0x4244>)
 80054a6:	443b      	add	r3, r7
 80054a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ac:	f7fb f8c4 	bl	8000638 <__aeabi_dmul>
 80054b0:	4602      	mov	r2, r0
 80054b2:	460b      	mov	r3, r1
 80054b4:	4614      	mov	r4, r2
 80054b6:	461d      	mov	r5, r3
 80054b8:	4b05      	ldr	r3, [pc, #20]	@ (80054d0 <NLLS+0x4230>)
 80054ba:	443b      	add	r3, r7
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	00da      	lsls	r2, r3, #3
 80054c0:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80054c4:	f6a3 738c 	subw	r3, r3, #3980	@ 0xf8c
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4413      	add	r3, r2
 80054cc:	e018      	b.n	8005500 <NLLS+0x4260>
 80054ce:	bf00      	nop
 80054d0:	0002df58 	.word	0x0002df58
 80054d4:	0002df18 	.word	0x0002df18
 80054d8:	0002dfa0 	.word	0x0002dfa0
 80054dc:	0002dfa8 	.word	0x0002dfa8
 80054e0:	0002df20 	.word	0x0002df20
 80054e4:	0002df08 	.word	0x0002df08
 80054e8:	0002df00 	.word	0x0002df00
 80054ec:	0002df28 	.word	0x0002df28
 80054f0:	0002df98 	.word	0x0002df98
 80054f4:	0002dfb0 	.word	0x0002dfb0
 80054f8:	0002df88 	.word	0x0002df88
 80054fc:	0002df90 	.word	0x0002df90
 8005500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005504:	49b6      	ldr	r1, [pc, #728]	@ (80057e0 <NLLS+0x4540>)
 8005506:	4439      	add	r1, r7
 8005508:	e9d1 0100 	ldrd	r0, r1, [r1]
 800550c:	f7fa fedc 	bl	80002c8 <__aeabi_dsub>
 8005510:	4602      	mov	r2, r0
 8005512:	460b      	mov	r3, r1
 8005514:	4620      	mov	r0, r4
 8005516:	4629      	mov	r1, r5
 8005518:	f7fb f88e 	bl	8000638 <__aeabi_dmul>
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	4640      	mov	r0, r8
 8005522:	4649      	mov	r1, r9
 8005524:	f7fa fed2 	bl	80002cc <__adddf3>
 8005528:	4602      	mov	r2, r0
 800552a:	460b      	mov	r3, r1
 800552c:	4690      	mov	r8, r2
 800552e:	4699      	mov	r9, r3
 8005530:	4bac      	ldr	r3, [pc, #688]	@ (80057e4 <NLLS+0x4544>)
 8005532:	443b      	add	r3, r7
 8005534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005538:	49ab      	ldr	r1, [pc, #684]	@ (80057e8 <NLLS+0x4548>)
 800553a:	4439      	add	r1, r7
 800553c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005540:	f7fb f87a 	bl	8000638 <__aeabi_dmul>
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	4610      	mov	r0, r2
 800554a:	4619      	mov	r1, r3
 800554c:	4ba7      	ldr	r3, [pc, #668]	@ (80057ec <NLLS+0x454c>)
 800554e:	443b      	add	r3, r7
 8005550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005554:	f7fb f870 	bl	8000638 <__aeabi_dmul>
 8005558:	4602      	mov	r2, r0
 800555a:	460b      	mov	r3, r1
 800555c:	4614      	mov	r4, r2
 800555e:	461d      	mov	r5, r3
 8005560:	4ba3      	ldr	r3, [pc, #652]	@ (80057f0 <NLLS+0x4550>)
 8005562:	443b      	add	r3, r7
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	00da      	lsls	r2, r3, #3
 8005568:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800556c:	f6a3 7388 	subw	r3, r3, #3976	@ 0xf88
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4413      	add	r3, r2
 8005574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005578:	499e      	ldr	r1, [pc, #632]	@ (80057f4 <NLLS+0x4554>)
 800557a:	4439      	add	r1, r7
 800557c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005580:	f7fa fea2 	bl	80002c8 <__aeabi_dsub>
 8005584:	4602      	mov	r2, r0
 8005586:	460b      	mov	r3, r1
 8005588:	4620      	mov	r0, r4
 800558a:	4629      	mov	r1, r5
 800558c:	f7fb f854 	bl	8000638 <__aeabi_dmul>
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	4640      	mov	r0, r8
 8005596:	4649      	mov	r1, r9
 8005598:	f7fa fe96 	bl	80002c8 <__aeabi_dsub>
 800559c:	4602      	mov	r2, r0
 800559e:	460b      	mov	r3, r1
 80055a0:	4650      	mov	r0, sl
 80055a2:	4659      	mov	r1, fp
 80055a4:	f7fb f848 	bl	8000638 <__aeabi_dmul>
 80055a8:	4602      	mov	r2, r0
 80055aa:	460b      	mov	r3, r1
 80055ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055b0:	f7fb f842 	bl	8000638 <__aeabi_dmul>
 80055b4:	4602      	mov	r2, r0
 80055b6:	460b      	mov	r3, r1
 80055b8:	4690      	mov	r8, r2
 80055ba:	4699      	mov	r9, r3
 80055bc:	4b8a      	ldr	r3, [pc, #552]	@ (80057e8 <NLLS+0x4548>)
 80055be:	443b      	add	r3, r7
 80055c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c4:	4988      	ldr	r1, [pc, #544]	@ (80057e8 <NLLS+0x4548>)
 80055c6:	4439      	add	r1, r7
 80055c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055cc:	f7fb f834 	bl	8000638 <__aeabi_dmul>
 80055d0:	4602      	mov	r2, r0
 80055d2:	460b      	mov	r3, r1
 80055d4:	4610      	mov	r0, r2
 80055d6:	4619      	mov	r1, r3
 80055d8:	4b87      	ldr	r3, [pc, #540]	@ (80057f8 <NLLS+0x4558>)
 80055da:	443b      	add	r3, r7
 80055dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e0:	f7fb f82a 	bl	8000638 <__aeabi_dmul>
 80055e4:	4602      	mov	r2, r0
 80055e6:	460b      	mov	r3, r1
 80055e8:	4610      	mov	r0, r2
 80055ea:	4619      	mov	r1, r3
 80055ec:	4b82      	ldr	r3, [pc, #520]	@ (80057f8 <NLLS+0x4558>)
 80055ee:	443b      	add	r3, r7
 80055f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f4:	f7fb f820 	bl	8000638 <__aeabi_dmul>
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	4610      	mov	r0, r2
 80055fe:	4619      	mov	r1, r3
 8005600:	4b78      	ldr	r3, [pc, #480]	@ (80057e4 <NLLS+0x4544>)
 8005602:	443b      	add	r3, r7
 8005604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005608:	f7fb f816 	bl	8000638 <__aeabi_dmul>
 800560c:	4602      	mov	r2, r0
 800560e:	460b      	mov	r3, r1
 8005610:	4610      	mov	r0, r2
 8005612:	4619      	mov	r1, r3
 8005614:	4b73      	ldr	r3, [pc, #460]	@ (80057e4 <NLLS+0x4544>)
 8005616:	443b      	add	r3, r7
 8005618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561c:	f7fb f80c 	bl	8000638 <__aeabi_dmul>
 8005620:	4602      	mov	r2, r0
 8005622:	460b      	mov	r3, r1
 8005624:	4614      	mov	r4, r2
 8005626:	461d      	mov	r5, r3
 8005628:	4b74      	ldr	r3, [pc, #464]	@ (80057fc <NLLS+0x455c>)
 800562a:	443b      	add	r3, r7
 800562c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005630:	4972      	ldr	r1, [pc, #456]	@ (80057fc <NLLS+0x455c>)
 8005632:	4439      	add	r1, r7
 8005634:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005638:	f7fa fffe 	bl	8000638 <__aeabi_dmul>
 800563c:	4602      	mov	r2, r0
 800563e:	460b      	mov	r3, r1
 8005640:	4610      	mov	r0, r2
 8005642:	4619      	mov	r1, r3
 8005644:	4b6d      	ldr	r3, [pc, #436]	@ (80057fc <NLLS+0x455c>)
 8005646:	443b      	add	r3, r7
 8005648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564c:	f7fa fff4 	bl	8000638 <__aeabi_dmul>
 8005650:	4602      	mov	r2, r0
 8005652:	460b      	mov	r3, r1
 8005654:	4620      	mov	r0, r4
 8005656:	4629      	mov	r1, r5
 8005658:	f7fa ffee 	bl	8000638 <__aeabi_dmul>
 800565c:	4602      	mov	r2, r0
 800565e:	460b      	mov	r3, r1
 8005660:	4610      	mov	r0, r2
 8005662:	4619      	mov	r1, r3
 8005664:	4b66      	ldr	r3, [pc, #408]	@ (8005800 <NLLS+0x4560>)
 8005666:	443b      	add	r3, r7
 8005668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566c:	f7fa ffe4 	bl	8000638 <__aeabi_dmul>
 8005670:	4602      	mov	r2, r0
 8005672:	460b      	mov	r3, r1
 8005674:	4610      	mov	r0, r2
 8005676:	4619      	mov	r1, r3
 8005678:	4b61      	ldr	r3, [pc, #388]	@ (8005800 <NLLS+0x4560>)
 800567a:	443b      	add	r3, r7
 800567c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005680:	f7fa ffda 	bl	8000638 <__aeabi_dmul>
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	4614      	mov	r4, r2
 800568a:	461d      	mov	r5, r3
 800568c:	4b5d      	ldr	r3, [pc, #372]	@ (8005804 <NLLS+0x4564>)
 800568e:	443b      	add	r3, r7
 8005690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005694:	495b      	ldr	r1, [pc, #364]	@ (8005804 <NLLS+0x4564>)
 8005696:	4439      	add	r1, r7
 8005698:	e9d1 0100 	ldrd	r0, r1, [r1]
 800569c:	f7fa ffcc 	bl	8000638 <__aeabi_dmul>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4620      	mov	r0, r4
 80056a6:	4629      	mov	r1, r5
 80056a8:	f7fa ffc6 	bl	8000638 <__aeabi_dmul>
 80056ac:	4602      	mov	r2, r0
 80056ae:	460b      	mov	r3, r1
 80056b0:	4640      	mov	r0, r8
 80056b2:	4649      	mov	r1, r9
 80056b4:	f7fb f8ea 	bl	800088c <__aeabi_ddiv>
 80056b8:	4602      	mov	r2, r0
 80056ba:	460b      	mov	r3, r1
 80056bc:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80056c0:	4b48      	ldr	r3, [pc, #288]	@ (80057e4 <NLLS+0x4544>)
 80056c2:	443b      	add	r3, r7
 80056c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c8:	494b      	ldr	r1, [pc, #300]	@ (80057f8 <NLLS+0x4558>)
 80056ca:	4439      	add	r1, r7
 80056cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056d0:	f7fa ffb2 	bl	8000638 <__aeabi_dmul>
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	4690      	mov	r8, r2
 80056da:	4699      	mov	r9, r3
 80056dc:	4b4a      	ldr	r3, [pc, #296]	@ (8005808 <NLLS+0x4568>)
 80056de:	443b      	add	r3, r7
 80056e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e4:	4945      	ldr	r1, [pc, #276]	@ (80057fc <NLLS+0x455c>)
 80056e6:	4439      	add	r1, r7
 80056e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056ec:	f7fa ffa4 	bl	8000638 <__aeabi_dmul>
 80056f0:	4602      	mov	r2, r0
 80056f2:	460b      	mov	r3, r1
 80056f4:	4614      	mov	r4, r2
 80056f6:	461d      	mov	r5, r3
 80056f8:	4b3c      	ldr	r3, [pc, #240]	@ (80057ec <NLLS+0x454c>)
 80056fa:	443b      	add	r3, r7
 80056fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005700:	4940      	ldr	r1, [pc, #256]	@ (8005804 <NLLS+0x4564>)
 8005702:	4439      	add	r1, r7
 8005704:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005708:	f7fa ff96 	bl	8000638 <__aeabi_dmul>
 800570c:	4602      	mov	r2, r0
 800570e:	460b      	mov	r3, r1
 8005710:	4610      	mov	r0, r2
 8005712:	4619      	mov	r1, r3
 8005714:	4b3d      	ldr	r3, [pc, #244]	@ (800580c <NLLS+0x456c>)
 8005716:	443b      	add	r3, r7
 8005718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571c:	f7fa ff8c 	bl	8000638 <__aeabi_dmul>
 8005720:	4602      	mov	r2, r0
 8005722:	460b      	mov	r3, r1
 8005724:	4620      	mov	r0, r4
 8005726:	4629      	mov	r1, r5
 8005728:	f7fa fdd0 	bl	80002cc <__adddf3>
 800572c:	4602      	mov	r2, r0
 800572e:	460b      	mov	r3, r1
 8005730:	4640      	mov	r0, r8
 8005732:	4649      	mov	r1, r9
 8005734:	f7fa ff80 	bl	8000638 <__aeabi_dmul>
 8005738:	4602      	mov	r2, r0
 800573a:	460b      	mov	r3, r1
 800573c:	4614      	mov	r4, r2
 800573e:	461d      	mov	r5, r3
 8005740:	4b2b      	ldr	r3, [pc, #172]	@ (80057f0 <NLLS+0x4550>)
 8005742:	443b      	add	r3, r7
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	00da      	lsls	r2, r3, #3
 8005748:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800574c:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4413      	add	r3, r2
 8005754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005758:	492d      	ldr	r1, [pc, #180]	@ (8005810 <NLLS+0x4570>)
 800575a:	4439      	add	r1, r7
 800575c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005760:	f7fa fdb2 	bl	80002c8 <__aeabi_dsub>
 8005764:	4602      	mov	r2, r0
 8005766:	460b      	mov	r3, r1
 8005768:	4620      	mov	r0, r4
 800576a:	4629      	mov	r1, r5
 800576c:	f7fa ff64 	bl	8000638 <__aeabi_dmul>
 8005770:	4602      	mov	r2, r0
 8005772:	460b      	mov	r3, r1
 8005774:	4690      	mov	r8, r2
 8005776:	4699      	mov	r9, r3
 8005778:	4b1a      	ldr	r3, [pc, #104]	@ (80057e4 <NLLS+0x4544>)
 800577a:	443b      	add	r3, r7
 800577c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005780:	4919      	ldr	r1, [pc, #100]	@ (80057e8 <NLLS+0x4548>)
 8005782:	4439      	add	r1, r7
 8005784:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005788:	f7fa ff56 	bl	8000638 <__aeabi_dmul>
 800578c:	4602      	mov	r2, r0
 800578e:	460b      	mov	r3, r1
 8005790:	4610      	mov	r0, r2
 8005792:	4619      	mov	r1, r3
 8005794:	4b19      	ldr	r3, [pc, #100]	@ (80057fc <NLLS+0x455c>)
 8005796:	443b      	add	r3, r7
 8005798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579c:	f7fa ff4c 	bl	8000638 <__aeabi_dmul>
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	4614      	mov	r4, r2
 80057a6:	461d      	mov	r5, r3
 80057a8:	4b11      	ldr	r3, [pc, #68]	@ (80057f0 <NLLS+0x4550>)
 80057aa:	443b      	add	r3, r7
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	00da      	lsls	r2, r3, #3
 80057b0:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80057b4:	f6a3 7388 	subw	r3, r3, #3976	@ 0xf88
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4413      	add	r3, r2
 80057bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c0:	490c      	ldr	r1, [pc, #48]	@ (80057f4 <NLLS+0x4554>)
 80057c2:	4439      	add	r1, r7
 80057c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057c8:	f7fa fd7e 	bl	80002c8 <__aeabi_dsub>
 80057cc:	4602      	mov	r2, r0
 80057ce:	460b      	mov	r3, r1
 80057d0:	4620      	mov	r0, r4
 80057d2:	4629      	mov	r1, r5
 80057d4:	f7fa ff30 	bl	8000638 <__aeabi_dmul>
 80057d8:	4602      	mov	r2, r0
 80057da:	460b      	mov	r3, r1
 80057dc:	e01a      	b.n	8005814 <NLLS+0x4574>
 80057de:	bf00      	nop
 80057e0:	0002df88 	.word	0x0002df88
 80057e4:	0002dfa0 	.word	0x0002dfa0
 80057e8:	0002dfb0 	.word	0x0002dfb0
 80057ec:	0002df18 	.word	0x0002df18
 80057f0:	0002df58 	.word	0x0002df58
 80057f4:	0002df90 	.word	0x0002df90
 80057f8:	0002dfa8 	.word	0x0002dfa8
 80057fc:	0002df00 	.word	0x0002df00
 8005800:	0002df10 	.word	0x0002df10
 8005804:	0002df08 	.word	0x0002df08
 8005808:	0002df20 	.word	0x0002df20
 800580c:	0002df28 	.word	0x0002df28
 8005810:	0002df98 	.word	0x0002df98
 8005814:	4640      	mov	r0, r8
 8005816:	4649      	mov	r1, r9
 8005818:	f7fa fd56 	bl	80002c8 <__aeabi_dsub>
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	4610      	mov	r0, r2
 8005822:	4619      	mov	r1, r3
 8005824:	4602      	mov	r2, r0
 8005826:	460b      	mov	r3, r1
 8005828:	f7fa fd50 	bl	80002cc <__adddf3>
 800582c:	4602      	mov	r2, r0
 800582e:	460b      	mov	r3, r1
 8005830:	4692      	mov	sl, r2
 8005832:	469b      	mov	fp, r3
 8005834:	4bb4      	ldr	r3, [pc, #720]	@ (8005b08 <NLLS+0x4868>)
 8005836:	443b      	add	r3, r7
 8005838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583c:	49b3      	ldr	r1, [pc, #716]	@ (8005b0c <NLLS+0x486c>)
 800583e:	4439      	add	r1, r7
 8005840:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005844:	f7fa fef8 	bl	8000638 <__aeabi_dmul>
 8005848:	4602      	mov	r2, r0
 800584a:	460b      	mov	r3, r1
 800584c:	4690      	mov	r8, r2
 800584e:	4699      	mov	r9, r3
 8005850:	4baf      	ldr	r3, [pc, #700]	@ (8005b10 <NLLS+0x4870>)
 8005852:	443b      	add	r3, r7
 8005854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005858:	49ae      	ldr	r1, [pc, #696]	@ (8005b14 <NLLS+0x4874>)
 800585a:	4439      	add	r1, r7
 800585c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005860:	f7fa feea 	bl	8000638 <__aeabi_dmul>
 8005864:	4602      	mov	r2, r0
 8005866:	460b      	mov	r3, r1
 8005868:	4614      	mov	r4, r2
 800586a:	461d      	mov	r5, r3
 800586c:	4baa      	ldr	r3, [pc, #680]	@ (8005b18 <NLLS+0x4878>)
 800586e:	443b      	add	r3, r7
 8005870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005874:	49a9      	ldr	r1, [pc, #676]	@ (8005b1c <NLLS+0x487c>)
 8005876:	4439      	add	r1, r7
 8005878:	e9d1 0100 	ldrd	r0, r1, [r1]
 800587c:	f7fa fedc 	bl	8000638 <__aeabi_dmul>
 8005880:	4602      	mov	r2, r0
 8005882:	460b      	mov	r3, r1
 8005884:	4610      	mov	r0, r2
 8005886:	4619      	mov	r1, r3
 8005888:	4ba5      	ldr	r3, [pc, #660]	@ (8005b20 <NLLS+0x4880>)
 800588a:	443b      	add	r3, r7
 800588c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005890:	f7fa fed2 	bl	8000638 <__aeabi_dmul>
 8005894:	4602      	mov	r2, r0
 8005896:	460b      	mov	r3, r1
 8005898:	4620      	mov	r0, r4
 800589a:	4629      	mov	r1, r5
 800589c:	f7fa fd14 	bl	80002c8 <__aeabi_dsub>
 80058a0:	4602      	mov	r2, r0
 80058a2:	460b      	mov	r3, r1
 80058a4:	4640      	mov	r0, r8
 80058a6:	4649      	mov	r1, r9
 80058a8:	f7fa fec6 	bl	8000638 <__aeabi_dmul>
 80058ac:	4602      	mov	r2, r0
 80058ae:	460b      	mov	r3, r1
 80058b0:	4614      	mov	r4, r2
 80058b2:	461d      	mov	r5, r3
 80058b4:	4b9b      	ldr	r3, [pc, #620]	@ (8005b24 <NLLS+0x4884>)
 80058b6:	443b      	add	r3, r7
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	00da      	lsls	r2, r3, #3
 80058bc:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80058c0:	f6a3 7384 	subw	r3, r3, #3972	@ 0xf84
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4413      	add	r3, r2
 80058c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058cc:	4996      	ldr	r1, [pc, #600]	@ (8005b28 <NLLS+0x4888>)
 80058ce:	4439      	add	r1, r7
 80058d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058d4:	f7fa fcf8 	bl	80002c8 <__aeabi_dsub>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	4620      	mov	r0, r4
 80058de:	4629      	mov	r1, r5
 80058e0:	f7fa feaa 	bl	8000638 <__aeabi_dmul>
 80058e4:	4602      	mov	r2, r0
 80058e6:	460b      	mov	r3, r1
 80058e8:	4690      	mov	r8, r2
 80058ea:	4699      	mov	r9, r3
 80058ec:	4b87      	ldr	r3, [pc, #540]	@ (8005b0c <NLLS+0x486c>)
 80058ee:	443b      	add	r3, r7
 80058f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f4:	498d      	ldr	r1, [pc, #564]	@ (8005b2c <NLLS+0x488c>)
 80058f6:	4439      	add	r1, r7
 80058f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058fc:	f7fa fe9c 	bl	8000638 <__aeabi_dmul>
 8005900:	4602      	mov	r2, r0
 8005902:	460b      	mov	r3, r1
 8005904:	4610      	mov	r0, r2
 8005906:	4619      	mov	r1, r3
 8005908:	4b83      	ldr	r3, [pc, #524]	@ (8005b18 <NLLS+0x4878>)
 800590a:	443b      	add	r3, r7
 800590c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005910:	f7fa fe92 	bl	8000638 <__aeabi_dmul>
 8005914:	4602      	mov	r2, r0
 8005916:	460b      	mov	r3, r1
 8005918:	4614      	mov	r4, r2
 800591a:	461d      	mov	r5, r3
 800591c:	4b81      	ldr	r3, [pc, #516]	@ (8005b24 <NLLS+0x4884>)
 800591e:	443b      	add	r3, r7
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	00da      	lsls	r2, r3, #3
 8005924:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8005928:	f6a3 738c 	subw	r3, r3, #3980	@ 0xf8c
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4413      	add	r3, r2
 8005930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005934:	497e      	ldr	r1, [pc, #504]	@ (8005b30 <NLLS+0x4890>)
 8005936:	4439      	add	r1, r7
 8005938:	e9d1 0100 	ldrd	r0, r1, [r1]
 800593c:	f7fa fcc4 	bl	80002c8 <__aeabi_dsub>
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	4620      	mov	r0, r4
 8005946:	4629      	mov	r1, r5
 8005948:	f7fa fe76 	bl	8000638 <__aeabi_dmul>
 800594c:	4602      	mov	r2, r0
 800594e:	460b      	mov	r3, r1
 8005950:	4640      	mov	r0, r8
 8005952:	4649      	mov	r1, r9
 8005954:	f7fa fcba 	bl	80002cc <__adddf3>
 8005958:	4602      	mov	r2, r0
 800595a:	460b      	mov	r3, r1
 800595c:	4690      	mov	r8, r2
 800595e:	4699      	mov	r9, r3
 8005960:	4b69      	ldr	r3, [pc, #420]	@ (8005b08 <NLLS+0x4868>)
 8005962:	443b      	add	r3, r7
 8005964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005968:	4970      	ldr	r1, [pc, #448]	@ (8005b2c <NLLS+0x488c>)
 800596a:	4439      	add	r1, r7
 800596c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005970:	f7fa fe62 	bl	8000638 <__aeabi_dmul>
 8005974:	4602      	mov	r2, r0
 8005976:	460b      	mov	r3, r1
 8005978:	4610      	mov	r0, r2
 800597a:	4619      	mov	r1, r3
 800597c:	4b65      	ldr	r3, [pc, #404]	@ (8005b14 <NLLS+0x4874>)
 800597e:	443b      	add	r3, r7
 8005980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005984:	f7fa fe58 	bl	8000638 <__aeabi_dmul>
 8005988:	4602      	mov	r2, r0
 800598a:	460b      	mov	r3, r1
 800598c:	4614      	mov	r4, r2
 800598e:	461d      	mov	r5, r3
 8005990:	4b64      	ldr	r3, [pc, #400]	@ (8005b24 <NLLS+0x4884>)
 8005992:	443b      	add	r3, r7
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	00da      	lsls	r2, r3, #3
 8005998:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800599c:	f6a3 7388 	subw	r3, r3, #3976	@ 0xf88
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4413      	add	r3, r2
 80059a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a8:	4962      	ldr	r1, [pc, #392]	@ (8005b34 <NLLS+0x4894>)
 80059aa:	4439      	add	r1, r7
 80059ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059b0:	f7fa fc8a 	bl	80002c8 <__aeabi_dsub>
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	4620      	mov	r0, r4
 80059ba:	4629      	mov	r1, r5
 80059bc:	f7fa fe3c 	bl	8000638 <__aeabi_dmul>
 80059c0:	4602      	mov	r2, r0
 80059c2:	460b      	mov	r3, r1
 80059c4:	4640      	mov	r0, r8
 80059c6:	4649      	mov	r1, r9
 80059c8:	f7fa fc7e 	bl	80002c8 <__aeabi_dsub>
 80059cc:	4602      	mov	r2, r0
 80059ce:	460b      	mov	r3, r1
 80059d0:	4650      	mov	r0, sl
 80059d2:	4659      	mov	r1, fp
 80059d4:	f7fa fe30 	bl	8000638 <__aeabi_dmul>
 80059d8:	4602      	mov	r2, r0
 80059da:	460b      	mov	r3, r1
 80059dc:	4614      	mov	r4, r2
 80059de:	461d      	mov	r5, r3
 80059e0:	4b52      	ldr	r3, [pc, #328]	@ (8005b2c <NLLS+0x488c>)
 80059e2:	443b      	add	r3, r7
 80059e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e8:	4950      	ldr	r1, [pc, #320]	@ (8005b2c <NLLS+0x488c>)
 80059ea:	4439      	add	r1, r7
 80059ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059f0:	f7fa fe22 	bl	8000638 <__aeabi_dmul>
 80059f4:	4602      	mov	r2, r0
 80059f6:	460b      	mov	r3, r1
 80059f8:	4610      	mov	r0, r2
 80059fa:	4619      	mov	r1, r3
 80059fc:	4b43      	ldr	r3, [pc, #268]	@ (8005b0c <NLLS+0x486c>)
 80059fe:	443b      	add	r3, r7
 8005a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a04:	f7fa fe18 	bl	8000638 <__aeabi_dmul>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	4619      	mov	r1, r3
 8005a10:	4b3e      	ldr	r3, [pc, #248]	@ (8005b0c <NLLS+0x486c>)
 8005a12:	443b      	add	r3, r7
 8005a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a18:	f7fa fe0e 	bl	8000638 <__aeabi_dmul>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	460b      	mov	r3, r1
 8005a20:	4610      	mov	r0, r2
 8005a22:	4619      	mov	r1, r3
 8005a24:	4b38      	ldr	r3, [pc, #224]	@ (8005b08 <NLLS+0x4868>)
 8005a26:	443b      	add	r3, r7
 8005a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2c:	f7fa fe04 	bl	8000638 <__aeabi_dmul>
 8005a30:	4602      	mov	r2, r0
 8005a32:	460b      	mov	r3, r1
 8005a34:	4610      	mov	r0, r2
 8005a36:	4619      	mov	r1, r3
 8005a38:	4b33      	ldr	r3, [pc, #204]	@ (8005b08 <NLLS+0x4868>)
 8005a3a:	443b      	add	r3, r7
 8005a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a40:	f7fa fdfa 	bl	8000638 <__aeabi_dmul>
 8005a44:	4602      	mov	r2, r0
 8005a46:	460b      	mov	r3, r1
 8005a48:	4610      	mov	r0, r2
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	4b33      	ldr	r3, [pc, #204]	@ (8005b1c <NLLS+0x487c>)
 8005a4e:	443b      	add	r3, r7
 8005a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a54:	f7fa fdf0 	bl	8000638 <__aeabi_dmul>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	4610      	mov	r0, r2
 8005a5e:	4619      	mov	r1, r3
 8005a60:	4b2e      	ldr	r3, [pc, #184]	@ (8005b1c <NLLS+0x487c>)
 8005a62:	443b      	add	r3, r7
 8005a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a68:	f7fa fde6 	bl	8000638 <__aeabi_dmul>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	460b      	mov	r3, r1
 8005a70:	4610      	mov	r0, r2
 8005a72:	4619      	mov	r1, r3
 8005a74:	4b30      	ldr	r3, [pc, #192]	@ (8005b38 <NLLS+0x4898>)
 8005a76:	443b      	add	r3, r7
 8005a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7c:	f7fa fddc 	bl	8000638 <__aeabi_dmul>
 8005a80:	4602      	mov	r2, r0
 8005a82:	460b      	mov	r3, r1
 8005a84:	4610      	mov	r0, r2
 8005a86:	4619      	mov	r1, r3
 8005a88:	4b2b      	ldr	r3, [pc, #172]	@ (8005b38 <NLLS+0x4898>)
 8005a8a:	443b      	add	r3, r7
 8005a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a90:	f7fa fdd2 	bl	8000638 <__aeabi_dmul>
 8005a94:	4602      	mov	r2, r0
 8005a96:	460b      	mov	r3, r1
 8005a98:	4610      	mov	r0, r2
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	4b1e      	ldr	r3, [pc, #120]	@ (8005b18 <NLLS+0x4878>)
 8005a9e:	443b      	add	r3, r7
 8005aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa4:	f7fa fdc8 	bl	8000638 <__aeabi_dmul>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	460b      	mov	r3, r1
 8005aac:	4610      	mov	r0, r2
 8005aae:	4619      	mov	r1, r3
 8005ab0:	4b19      	ldr	r3, [pc, #100]	@ (8005b18 <NLLS+0x4878>)
 8005ab2:	443b      	add	r3, r7
 8005ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab8:	f7fa fdbe 	bl	8000638 <__aeabi_dmul>
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	4629      	mov	r1, r5
 8005ac4:	f7fa fee2 	bl	800088c <__aeabi_ddiv>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	460b      	mov	r3, r1
 8005acc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ad0:	f7fa fbfc 	bl	80002cc <__adddf3>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	4610      	mov	r0, r2
 8005ada:	4619      	mov	r1, r3
 8005adc:	4b17      	ldr	r3, [pc, #92]	@ (8005b3c <NLLS+0x489c>)
 8005ade:	443b      	add	r3, r7
 8005ae0:	f5a3 72d8 	sub.w	r2, r3, #432	@ 0x1b0
 8005ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8005b24 <NLLS+0x4884>)
 8005ae6:	443b      	add	r3, r7
 8005ae8:	681c      	ldr	r4, [r3, #0]
 8005aea:	f242 23b8 	movw	r3, #8888	@ 0x22b8
 8005aee:	4423      	add	r3, r4
 8005af0:	00db      	lsls	r3, r3, #3
 8005af2:	4413      	add	r3, r2
 8005af4:	e9c3 0100 	strd	r0, r1, [r3]
        for(int i=0; i < tam; i++)
 8005af8:	4b0a      	ldr	r3, [pc, #40]	@ (8005b24 <NLLS+0x4884>)
 8005afa:	443b      	add	r3, r7
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	3301      	adds	r3, #1
 8005b00:	4a08      	ldr	r2, [pc, #32]	@ (8005b24 <NLLS+0x4884>)
 8005b02:	443a      	add	r2, r7
 8005b04:	6013      	str	r3, [r2, #0]
 8005b06:	e01b      	b.n	8005b40 <NLLS+0x48a0>
 8005b08:	0002dfa0 	.word	0x0002dfa0
 8005b0c:	0002dfa8 	.word	0x0002dfa8
 8005b10:	0002df20 	.word	0x0002df20
 8005b14:	0002df18 	.word	0x0002df18
 8005b18:	0002df08 	.word	0x0002df08
 8005b1c:	0002df00 	.word	0x0002df00
 8005b20:	0002df28 	.word	0x0002df28
 8005b24:	0002df58 	.word	0x0002df58
 8005b28:	0002df98 	.word	0x0002df98
 8005b2c:	0002dfb0 	.word	0x0002dfb0
 8005b30:	0002df88 	.word	0x0002df88
 8005b34:	0002df90 	.word	0x0002df90
 8005b38:	0002df10 	.word	0x0002df10
 8005b3c:	00013fc0 	.word	0x00013fc0
 8005b40:	4b65      	ldr	r3, [pc, #404]	@ (8005cd8 <NLLS+0x4a38>)
 8005b42:	443b      	add	r3, r7
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f240 4256 	movw	r2, #1110	@ 0x456
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	f77b acc4 	ble.w	80014d8 <NLLS+0x238>
        }

        J = 0;
 8005b50:	f04f 0200 	mov.w	r2, #0
 8005b54:	f04f 0300 	mov.w	r3, #0
 8005b58:	4960      	ldr	r1, [pc, #384]	@ (8005cdc <NLLS+0x4a3c>)
 8005b5a:	4439      	add	r1, r7
 8005b5c:	e9c1 2300 	strd	r2, r3, [r1]

        for(int i=0; i < tam; i++)
 8005b60:	2300      	movs	r3, #0
 8005b62:	4a5f      	ldr	r2, [pc, #380]	@ (8005ce0 <NLLS+0x4a40>)
 8005b64:	443a      	add	r2, r7
 8005b66:	6013      	str	r3, [r2, #0]
 8005b68:	e036      	b.n	8005bd8 <NLLS+0x4938>
        {
            J += (e[i] * e[i])/2;
 8005b6a:	4b5e      	ldr	r3, [pc, #376]	@ (8005ce4 <NLLS+0x4a44>)
 8005b6c:	443b      	add	r3, r7
 8005b6e:	f5a3 62d0 	sub.w	r2, r3, #1664	@ 0x680
 8005b72:	4b5b      	ldr	r3, [pc, #364]	@ (8005ce0 <NLLS+0x4a40>)
 8005b74:	443b      	add	r3, r7
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	4413      	add	r3, r2
 8005b7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b80:	4b58      	ldr	r3, [pc, #352]	@ (8005ce4 <NLLS+0x4a44>)
 8005b82:	443b      	add	r3, r7
 8005b84:	f5a3 62d0 	sub.w	r2, r3, #1664	@ 0x680
 8005b88:	4b55      	ldr	r3, [pc, #340]	@ (8005ce0 <NLLS+0x4a40>)
 8005b8a:	443b      	add	r3, r7
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	00db      	lsls	r3, r3, #3
 8005b90:	4413      	add	r3, r2
 8005b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b96:	f7fa fd4f 	bl	8000638 <__aeabi_dmul>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	4610      	mov	r0, r2
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	f04f 0200 	mov.w	r2, #0
 8005ba6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005baa:	f7fa fe6f 	bl	800088c <__aeabi_ddiv>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	494a      	ldr	r1, [pc, #296]	@ (8005cdc <NLLS+0x4a3c>)
 8005bb4:	4439      	add	r1, r7
 8005bb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005bba:	f7fa fb87 	bl	80002cc <__adddf3>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	4946      	ldr	r1, [pc, #280]	@ (8005cdc <NLLS+0x4a3c>)
 8005bc4:	4439      	add	r1, r7
 8005bc6:	e9c1 2300 	strd	r2, r3, [r1]
        for(int i=0; i < tam; i++)
 8005bca:	4b45      	ldr	r3, [pc, #276]	@ (8005ce0 <NLLS+0x4a40>)
 8005bcc:	443b      	add	r3, r7
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	4a43      	ldr	r2, [pc, #268]	@ (8005ce0 <NLLS+0x4a40>)
 8005bd4:	443a      	add	r2, r7
 8005bd6:	6013      	str	r3, [r2, #0]
 8005bd8:	4b41      	ldr	r3, [pc, #260]	@ (8005ce0 <NLLS+0x4a40>)
 8005bda:	443b      	add	r3, r7
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f240 4256 	movw	r2, #1110	@ 0x456
 8005be2:	4293      	cmp	r3, r2
 8005be4:	ddc1      	ble.n	8005b6a <NLLS+0x48ca>
        }

        if(passo < 2)
 8005be6:	4b40      	ldr	r3, [pc, #256]	@ (8005ce8 <NLLS+0x4a48>)
 8005be8:	443b      	add	r3, r7
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d808      	bhi.n	8005c02 <NLLS+0x4962>
        {
            error_ant = J;
 8005bf0:	4b3a      	ldr	r3, [pc, #232]	@ (8005cdc <NLLS+0x4a3c>)
 8005bf2:	443b      	add	r3, r7
 8005bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf8:	493c      	ldr	r1, [pc, #240]	@ (8005cec <NLLS+0x4a4c>)
 8005bfa:	4439      	add	r1, r7
 8005bfc:	e9c1 2300 	strd	r2, r3, [r1]
 8005c00:	e03e      	b.n	8005c80 <NLLS+0x49e0>
        }
        else
        {
            delta_J = 100*fabs(J-error_ant)/J;
 8005c02:	4b3a      	ldr	r3, [pc, #232]	@ (8005cec <NLLS+0x4a4c>)
 8005c04:	443b      	add	r3, r7
 8005c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0a:	4934      	ldr	r1, [pc, #208]	@ (8005cdc <NLLS+0x4a3c>)
 8005c0c:	4439      	add	r1, r7
 8005c0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c12:	f7fa fb59 	bl	80002c8 <__aeabi_dsub>
 8005c16:	4602      	mov	r2, r0
 8005c18:	460b      	mov	r3, r1
 8005c1a:	613a      	str	r2, [r7, #16]
 8005c1c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c20:	617b      	str	r3, [r7, #20]
 8005c22:	f04f 0200 	mov.w	r2, #0
 8005c26:	4b32      	ldr	r3, [pc, #200]	@ (8005cf0 <NLLS+0x4a50>)
 8005c28:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005c2c:	f7fa fd04 	bl	8000638 <__aeabi_dmul>
 8005c30:	4602      	mov	r2, r0
 8005c32:	460b      	mov	r3, r1
 8005c34:	4610      	mov	r0, r2
 8005c36:	4619      	mov	r1, r3
 8005c38:	4b28      	ldr	r3, [pc, #160]	@ (8005cdc <NLLS+0x4a3c>)
 8005c3a:	443b      	add	r3, r7
 8005c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c40:	f7fa fe24 	bl	800088c <__aeabi_ddiv>
 8005c44:	4602      	mov	r2, r0
 8005c46:	460b      	mov	r3, r1
 8005c48:	492a      	ldr	r1, [pc, #168]	@ (8005cf4 <NLLS+0x4a54>)
 8005c4a:	4439      	add	r1, r7
 8005c4c:	e9c1 2300 	strd	r2, r3, [r1]
            if(delta_J < 0.05)
 8005c50:	a31f      	add	r3, pc, #124	@ (adr r3, 8005cd0 <NLLS+0x4a30>)
 8005c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c56:	4927      	ldr	r1, [pc, #156]	@ (8005cf4 <NLLS+0x4a54>)
 8005c58:	4439      	add	r1, r7
 8005c5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c5e:	f7fa ff5d 	bl	8000b1c <__aeabi_dcmplt>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <NLLS+0x49d0>
            {
                loop = 0;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	4a23      	ldr	r2, [pc, #140]	@ (8005cf8 <NLLS+0x4a58>)
 8005c6c:	443a      	add	r2, r7
 8005c6e:	7013      	strb	r3, [r2, #0]
            }
            error_ant = J;
 8005c70:	4b1a      	ldr	r3, [pc, #104]	@ (8005cdc <NLLS+0x4a3c>)
 8005c72:	443b      	add	r3, r7
 8005c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c78:	491c      	ldr	r1, [pc, #112]	@ (8005cec <NLLS+0x4a4c>)
 8005c7a:	4439      	add	r1, r7
 8005c7c:	e9c1 2300 	strd	r2, r3, [r1]
        }

        for(int i = 0; i < N; i++)
 8005c80:	2300      	movs	r3, #0
 8005c82:	4a1e      	ldr	r2, [pc, #120]	@ (8005cfc <NLLS+0x4a5c>)
 8005c84:	443a      	add	r2, r7
 8005c86:	6013      	str	r3, [r2, #0]
 8005c88:	e0b8      	b.n	8005dfc <NLLS+0x4b5c>
        {
            for(int j = 0; j < N; j++)
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	4a1c      	ldr	r2, [pc, #112]	@ (8005d00 <NLLS+0x4a60>)
 8005c8e:	443a      	add	r2, r7
 8005c90:	6013      	str	r3, [r2, #0]
 8005c92:	e0a6      	b.n	8005de2 <NLLS+0x4b42>
            {
                Ht_H[i][j] = 0;
 8005c94:	4b1b      	ldr	r3, [pc, #108]	@ (8005d04 <NLLS+0x4a64>)
 8005c96:	443b      	add	r3, r7
 8005c98:	f5a3 6187 	sub.w	r1, r3, #1080	@ 0x438
 8005c9c:	4b17      	ldr	r3, [pc, #92]	@ (8005cfc <NLLS+0x4a5c>)
 8005c9e:	443b      	add	r3, r7
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	00db      	lsls	r3, r3, #3
 8005ca6:	4413      	add	r3, r2
 8005ca8:	4a15      	ldr	r2, [pc, #84]	@ (8005d00 <NLLS+0x4a60>)
 8005caa:	443a      	add	r2, r7
 8005cac:	6812      	ldr	r2, [r2, #0]
 8005cae:	4413      	add	r3, r2
 8005cb0:	00db      	lsls	r3, r3, #3
 8005cb2:	4419      	add	r1, r3
 8005cb4:	f04f 0200 	mov.w	r2, #0
 8005cb8:	f04f 0300 	mov.w	r3, #0
 8005cbc:	e9c1 2300 	strd	r2, r3, [r1]
                for(int k = 0; k < tam; k++)
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	4a11      	ldr	r2, [pc, #68]	@ (8005d08 <NLLS+0x4a68>)
 8005cc4:	443a      	add	r2, r7
 8005cc6:	6013      	str	r3, [r2, #0]
 8005cc8:	e07d      	b.n	8005dc6 <NLLS+0x4b26>
 8005cca:	bf00      	nop
 8005ccc:	f3af 8000 	nop.w
 8005cd0:	9999999a 	.word	0x9999999a
 8005cd4:	3fa99999 	.word	0x3fa99999
 8005cd8:	0002df58 	.word	0x0002df58
 8005cdc:	0002df60 	.word	0x0002df60
 8005ce0:	0002df54 	.word	0x0002df54
 8005ce4:	00029fc0 	.word	0x00029fc0
 8005ce8:	0002dfbf 	.word	0x0002dfbf
 8005cec:	0002df68 	.word	0x0002df68
 8005cf0:	40590000 	.word	0x40590000
 8005cf4:	0002def8 	.word	0x0002def8
 8005cf8:	0002dfbe 	.word	0x0002dfbe
 8005cfc:	0002df50 	.word	0x0002df50
 8005d00:	0002df4c 	.word	0x0002df4c
 8005d04:	00013fc0 	.word	0x00013fc0
 8005d08:	0002df48 	.word	0x0002df48
                {
                    Ht_H[i][j] += mat_H[i][k]*mat_H[j][k];
 8005d0c:	4b9b      	ldr	r3, [pc, #620]	@ (8005f7c <NLLS+0x4cdc>)
 8005d0e:	443b      	add	r3, r7
 8005d10:	f5a3 6187 	sub.w	r1, r3, #1080	@ 0x438
 8005d14:	4b9a      	ldr	r3, [pc, #616]	@ (8005f80 <NLLS+0x4ce0>)
 8005d16:	443b      	add	r3, r7
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	00db      	lsls	r3, r3, #3
 8005d1e:	4413      	add	r3, r2
 8005d20:	4a98      	ldr	r2, [pc, #608]	@ (8005f84 <NLLS+0x4ce4>)
 8005d22:	443a      	add	r2, r7
 8005d24:	6812      	ldr	r2, [r2, #0]
 8005d26:	4413      	add	r3, r2
 8005d28:	00db      	lsls	r3, r3, #3
 8005d2a:	440b      	add	r3, r1
 8005d2c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005d30:	4b92      	ldr	r3, [pc, #584]	@ (8005f7c <NLLS+0x4cdc>)
 8005d32:	443b      	add	r3, r7
 8005d34:	f5a3 72d8 	sub.w	r2, r3, #432	@ 0x1b0
 8005d38:	4b91      	ldr	r3, [pc, #580]	@ (8005f80 <NLLS+0x4ce0>)
 8005d3a:	443b      	add	r3, r7
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f240 4157 	movw	r1, #1111	@ 0x457
 8005d42:	fb03 f101 	mul.w	r1, r3, r1
 8005d46:	4b90      	ldr	r3, [pc, #576]	@ (8005f88 <NLLS+0x4ce8>)
 8005d48:	443b      	add	r3, r7
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	440b      	add	r3, r1
 8005d4e:	00db      	lsls	r3, r3, #3
 8005d50:	4413      	add	r3, r2
 8005d52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d56:	4b89      	ldr	r3, [pc, #548]	@ (8005f7c <NLLS+0x4cdc>)
 8005d58:	443b      	add	r3, r7
 8005d5a:	f5a3 76d8 	sub.w	r6, r3, #432	@ 0x1b0
 8005d5e:	4b89      	ldr	r3, [pc, #548]	@ (8005f84 <NLLS+0x4ce4>)
 8005d60:	443b      	add	r3, r7
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	f240 4357 	movw	r3, #1111	@ 0x457
 8005d68:	fb03 f202 	mul.w	r2, r3, r2
 8005d6c:	4b86      	ldr	r3, [pc, #536]	@ (8005f88 <NLLS+0x4ce8>)
 8005d6e:	443b      	add	r3, r7
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4413      	add	r3, r2
 8005d74:	00db      	lsls	r3, r3, #3
 8005d76:	4433      	add	r3, r6
 8005d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7c:	f7fa fc5c 	bl	8000638 <__aeabi_dmul>
 8005d80:	4602      	mov	r2, r0
 8005d82:	460b      	mov	r3, r1
 8005d84:	4620      	mov	r0, r4
 8005d86:	4629      	mov	r1, r5
 8005d88:	f7fa faa0 	bl	80002cc <__adddf3>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	460b      	mov	r3, r1
 8005d90:	4610      	mov	r0, r2
 8005d92:	4619      	mov	r1, r3
 8005d94:	4b79      	ldr	r3, [pc, #484]	@ (8005f7c <NLLS+0x4cdc>)
 8005d96:	443b      	add	r3, r7
 8005d98:	f5a3 6487 	sub.w	r4, r3, #1080	@ 0x438
 8005d9c:	4b78      	ldr	r3, [pc, #480]	@ (8005f80 <NLLS+0x4ce0>)
 8005d9e:	443b      	add	r3, r7
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	4613      	mov	r3, r2
 8005da4:	00db      	lsls	r3, r3, #3
 8005da6:	4413      	add	r3, r2
 8005da8:	4a76      	ldr	r2, [pc, #472]	@ (8005f84 <NLLS+0x4ce4>)
 8005daa:	443a      	add	r2, r7
 8005dac:	6812      	ldr	r2, [r2, #0]
 8005dae:	4413      	add	r3, r2
 8005db0:	00db      	lsls	r3, r3, #3
 8005db2:	4423      	add	r3, r4
 8005db4:	e9c3 0100 	strd	r0, r1, [r3]
                for(int k = 0; k < tam; k++)
 8005db8:	4b73      	ldr	r3, [pc, #460]	@ (8005f88 <NLLS+0x4ce8>)
 8005dba:	443b      	add	r3, r7
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	4a71      	ldr	r2, [pc, #452]	@ (8005f88 <NLLS+0x4ce8>)
 8005dc2:	443a      	add	r2, r7
 8005dc4:	6013      	str	r3, [r2, #0]
 8005dc6:	4b70      	ldr	r3, [pc, #448]	@ (8005f88 <NLLS+0x4ce8>)
 8005dc8:	443b      	add	r3, r7
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f240 4256 	movw	r2, #1110	@ 0x456
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	dd9b      	ble.n	8005d0c <NLLS+0x4a6c>
            for(int j = 0; j < N; j++)
 8005dd4:	4b6b      	ldr	r3, [pc, #428]	@ (8005f84 <NLLS+0x4ce4>)
 8005dd6:	443b      	add	r3, r7
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	4a69      	ldr	r2, [pc, #420]	@ (8005f84 <NLLS+0x4ce4>)
 8005dde:	443a      	add	r2, r7
 8005de0:	6013      	str	r3, [r2, #0]
 8005de2:	4b68      	ldr	r3, [pc, #416]	@ (8005f84 <NLLS+0x4ce4>)
 8005de4:	443b      	add	r3, r7
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b08      	cmp	r3, #8
 8005dea:	f77f af53 	ble.w	8005c94 <NLLS+0x49f4>
        for(int i = 0; i < N; i++)
 8005dee:	4b64      	ldr	r3, [pc, #400]	@ (8005f80 <NLLS+0x4ce0>)
 8005df0:	443b      	add	r3, r7
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	3301      	adds	r3, #1
 8005df6:	4a62      	ldr	r2, [pc, #392]	@ (8005f80 <NLLS+0x4ce0>)
 8005df8:	443a      	add	r2, r7
 8005dfa:	6013      	str	r3, [r2, #0]
 8005dfc:	4b60      	ldr	r3, [pc, #384]	@ (8005f80 <NLLS+0x4ce0>)
 8005dfe:	443b      	add	r3, r7
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b08      	cmp	r3, #8
 8005e04:	f77f af41 	ble.w	8005c8a <NLLS+0x49ea>
                }
            }
        }

        inverter_matriz(Ht_H, inv);
 8005e08:	4a60      	ldr	r2, [pc, #384]	@ (8005f8c <NLLS+0x4cec>)
 8005e0a:	4b61      	ldr	r3, [pc, #388]	@ (8005f90 <NLLS+0x4cf0>)
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8005e12:	189a      	adds	r2, r3, r2
 8005e14:	4b5f      	ldr	r3, [pc, #380]	@ (8005f94 <NLLS+0x4cf4>)
 8005e16:	f503 3337 	add.w	r3, r3, #187392	@ 0x2dc00
 8005e1a:	f503 7364 	add.w	r3, r3, #912	@ 0x390
 8005e1e:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8005e22:	440b      	add	r3, r1
 8005e24:	4611      	mov	r1, r2
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7fb f8fc 	bl	8001024 <inverter_matriz>

        for(int i = 0; i < N; i++)
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	4a5a      	ldr	r2, [pc, #360]	@ (8005f98 <NLLS+0x4cf8>)
 8005e30:	443a      	add	r2, r7
 8005e32:	6013      	str	r3, [r2, #0]
 8005e34:	e097      	b.n	8005f66 <NLLS+0x4cc6>
        {
            for(int j = 0; j < tam; j++)
 8005e36:	2300      	movs	r3, #0
 8005e38:	4a58      	ldr	r2, [pc, #352]	@ (8005f9c <NLLS+0x4cfc>)
 8005e3a:	443a      	add	r2, r7
 8005e3c:	6013      	str	r3, [r2, #0]
 8005e3e:	e083      	b.n	8005f48 <NLLS+0x4ca8>
            {
                mul_mat[i][j] = 0;
 8005e40:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8005e44:	f5a3 6278 	sub.w	r2, r3, #3968	@ 0xf80
 8005e48:	4b53      	ldr	r3, [pc, #332]	@ (8005f98 <NLLS+0x4cf8>)
 8005e4a:	443b      	add	r3, r7
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f240 4157 	movw	r1, #1111	@ 0x457
 8005e52:	fb03 f101 	mul.w	r1, r3, r1
 8005e56:	4b51      	ldr	r3, [pc, #324]	@ (8005f9c <NLLS+0x4cfc>)
 8005e58:	443b      	add	r3, r7
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	440b      	add	r3, r1
 8005e5e:	00db      	lsls	r3, r3, #3
 8005e60:	18d1      	adds	r1, r2, r3
 8005e62:	f04f 0200 	mov.w	r2, #0
 8005e66:	f04f 0300 	mov.w	r3, #0
 8005e6a:	e9c1 2300 	strd	r2, r3, [r1]
                for(int k = 0; k < N; k++)
 8005e6e:	2300      	movs	r3, #0
 8005e70:	4a4b      	ldr	r2, [pc, #300]	@ (8005fa0 <NLLS+0x4d00>)
 8005e72:	443a      	add	r2, r7
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	e05b      	b.n	8005f30 <NLLS+0x4c90>
                {
                    mul_mat[i][j] += inv[i][k]*mat_H[k][j];
 8005e78:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8005e7c:	f5a3 6278 	sub.w	r2, r3, #3968	@ 0xf80
 8005e80:	4b45      	ldr	r3, [pc, #276]	@ (8005f98 <NLLS+0x4cf8>)
 8005e82:	443b      	add	r3, r7
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f240 4157 	movw	r1, #1111	@ 0x457
 8005e8a:	fb03 f101 	mul.w	r1, r3, r1
 8005e8e:	4b43      	ldr	r3, [pc, #268]	@ (8005f9c <NLLS+0x4cfc>)
 8005e90:	443b      	add	r3, r7
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	440b      	add	r3, r1
 8005e96:	00db      	lsls	r3, r3, #3
 8005e98:	4413      	add	r3, r2
 8005e9a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005e9e:	4b37      	ldr	r3, [pc, #220]	@ (8005f7c <NLLS+0x4cdc>)
 8005ea0:	443b      	add	r3, r7
 8005ea2:	f5a3 61e1 	sub.w	r1, r3, #1800	@ 0x708
 8005ea6:	4b3c      	ldr	r3, [pc, #240]	@ (8005f98 <NLLS+0x4cf8>)
 8005ea8:	443b      	add	r3, r7
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	4613      	mov	r3, r2
 8005eae:	00db      	lsls	r3, r3, #3
 8005eb0:	4413      	add	r3, r2
 8005eb2:	4a3b      	ldr	r2, [pc, #236]	@ (8005fa0 <NLLS+0x4d00>)
 8005eb4:	443a      	add	r2, r7
 8005eb6:	6812      	ldr	r2, [r2, #0]
 8005eb8:	4413      	add	r3, r2
 8005eba:	00db      	lsls	r3, r3, #3
 8005ebc:	440b      	add	r3, r1
 8005ebe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ec2:	4b2e      	ldr	r3, [pc, #184]	@ (8005f7c <NLLS+0x4cdc>)
 8005ec4:	443b      	add	r3, r7
 8005ec6:	f5a3 76d8 	sub.w	r6, r3, #432	@ 0x1b0
 8005eca:	4b35      	ldr	r3, [pc, #212]	@ (8005fa0 <NLLS+0x4d00>)
 8005ecc:	443b      	add	r3, r7
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	f240 4357 	movw	r3, #1111	@ 0x457
 8005ed4:	fb03 f202 	mul.w	r2, r3, r2
 8005ed8:	4b30      	ldr	r3, [pc, #192]	@ (8005f9c <NLLS+0x4cfc>)
 8005eda:	443b      	add	r3, r7
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4413      	add	r3, r2
 8005ee0:	00db      	lsls	r3, r3, #3
 8005ee2:	4433      	add	r3, r6
 8005ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee8:	f7fa fba6 	bl	8000638 <__aeabi_dmul>
 8005eec:	4602      	mov	r2, r0
 8005eee:	460b      	mov	r3, r1
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	4629      	mov	r1, r5
 8005ef4:	f7fa f9ea 	bl	80002cc <__adddf3>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	460b      	mov	r3, r1
 8005efc:	f507 617c 	add.w	r1, r7, #4032	@ 0xfc0
 8005f00:	f5a1 6078 	sub.w	r0, r1, #3968	@ 0xf80
 8005f04:	4924      	ldr	r1, [pc, #144]	@ (8005f98 <NLLS+0x4cf8>)
 8005f06:	4439      	add	r1, r7
 8005f08:	6809      	ldr	r1, [r1, #0]
 8005f0a:	f240 4457 	movw	r4, #1111	@ 0x457
 8005f0e:	fb01 f404 	mul.w	r4, r1, r4
 8005f12:	4922      	ldr	r1, [pc, #136]	@ (8005f9c <NLLS+0x4cfc>)
 8005f14:	4439      	add	r1, r7
 8005f16:	6809      	ldr	r1, [r1, #0]
 8005f18:	4421      	add	r1, r4
 8005f1a:	00c9      	lsls	r1, r1, #3
 8005f1c:	4401      	add	r1, r0
 8005f1e:	e9c1 2300 	strd	r2, r3, [r1]
                for(int k = 0; k < N; k++)
 8005f22:	4b1f      	ldr	r3, [pc, #124]	@ (8005fa0 <NLLS+0x4d00>)
 8005f24:	443b      	add	r3, r7
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	4a1d      	ldr	r2, [pc, #116]	@ (8005fa0 <NLLS+0x4d00>)
 8005f2c:	443a      	add	r2, r7
 8005f2e:	6013      	str	r3, [r2, #0]
 8005f30:	4b1b      	ldr	r3, [pc, #108]	@ (8005fa0 <NLLS+0x4d00>)
 8005f32:	443b      	add	r3, r7
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b08      	cmp	r3, #8
 8005f38:	dd9e      	ble.n	8005e78 <NLLS+0x4bd8>
            for(int j = 0; j < tam; j++)
 8005f3a:	4b18      	ldr	r3, [pc, #96]	@ (8005f9c <NLLS+0x4cfc>)
 8005f3c:	443b      	add	r3, r7
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	3301      	adds	r3, #1
 8005f42:	4a16      	ldr	r2, [pc, #88]	@ (8005f9c <NLLS+0x4cfc>)
 8005f44:	443a      	add	r2, r7
 8005f46:	6013      	str	r3, [r2, #0]
 8005f48:	4b14      	ldr	r3, [pc, #80]	@ (8005f9c <NLLS+0x4cfc>)
 8005f4a:	443b      	add	r3, r7
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f240 4256 	movw	r2, #1110	@ 0x456
 8005f52:	4293      	cmp	r3, r2
 8005f54:	f77f af74 	ble.w	8005e40 <NLLS+0x4ba0>
        for(int i = 0; i < N; i++)
 8005f58:	4b0f      	ldr	r3, [pc, #60]	@ (8005f98 <NLLS+0x4cf8>)
 8005f5a:	443b      	add	r3, r7
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	4a0d      	ldr	r2, [pc, #52]	@ (8005f98 <NLLS+0x4cf8>)
 8005f62:	443a      	add	r2, r7
 8005f64:	6013      	str	r3, [r2, #0]
 8005f66:	4b0c      	ldr	r3, [pc, #48]	@ (8005f98 <NLLS+0x4cf8>)
 8005f68:	443b      	add	r3, r7
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2b08      	cmp	r3, #8
 8005f6e:	f77f af62 	ble.w	8005e36 <NLLS+0x4b96>
                }
            }
        }

        for(int i = 0; i < N; i++)
 8005f72:	2300      	movs	r3, #0
 8005f74:	4a0b      	ldr	r2, [pc, #44]	@ (8005fa4 <NLLS+0x4d04>)
 8005f76:	443a      	add	r2, r7
 8005f78:	6013      	str	r3, [r2, #0]
 8005f7a:	e07c      	b.n	8006076 <NLLS+0x4dd6>
 8005f7c:	00013fc0 	.word	0x00013fc0
 8005f80:	0002df50 	.word	0x0002df50
 8005f84:	0002df4c 	.word	0x0002df4c
 8005f88:	0002df48 	.word	0x0002df48
 8005f8c:	fffe58f8 	.word	0xfffe58f8
 8005f90:	0002df90 	.word	0x0002df90
 8005f94:	fffe5bc8 	.word	0xfffe5bc8
 8005f98:	0002df44 	.word	0x0002df44
 8005f9c:	0002df40 	.word	0x0002df40
 8005fa0:	0002df3c 	.word	0x0002df3c
 8005fa4:	0002df38 	.word	0x0002df38
        {
            Ht_e[i] = 0;
 8005fa8:	4b96      	ldr	r3, [pc, #600]	@ (8006204 <NLLS+0x4f64>)
 8005faa:	443b      	add	r3, r7
 8005fac:	f5a3 6290 	sub.w	r2, r3, #1152	@ 0x480
 8005fb0:	4b95      	ldr	r3, [pc, #596]	@ (8006208 <NLLS+0x4f68>)
 8005fb2:	443b      	add	r3, r7
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	00db      	lsls	r3, r3, #3
 8005fb8:	18d1      	adds	r1, r2, r3
 8005fba:	f04f 0200 	mov.w	r2, #0
 8005fbe:	f04f 0300 	mov.w	r3, #0
 8005fc2:	e9c1 2300 	strd	r2, r3, [r1]
            for(int j = 0; j < tam; j++)
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	4a90      	ldr	r2, [pc, #576]	@ (800620c <NLLS+0x4f6c>)
 8005fca:	443a      	add	r2, r7
 8005fcc:	6013      	str	r3, [r2, #0]
 8005fce:	e044      	b.n	800605a <NLLS+0x4dba>
            {
                Ht_e[i] += mul_mat[i][j]*e[j];
 8005fd0:	4b8c      	ldr	r3, [pc, #560]	@ (8006204 <NLLS+0x4f64>)
 8005fd2:	443b      	add	r3, r7
 8005fd4:	f5a3 6290 	sub.w	r2, r3, #1152	@ 0x480
 8005fd8:	4b8b      	ldr	r3, [pc, #556]	@ (8006208 <NLLS+0x4f68>)
 8005fda:	443b      	add	r3, r7
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	00db      	lsls	r3, r3, #3
 8005fe0:	4413      	add	r3, r2
 8005fe2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005fe6:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8005fea:	f5a3 6278 	sub.w	r2, r3, #3968	@ 0xf80
 8005fee:	4b86      	ldr	r3, [pc, #536]	@ (8006208 <NLLS+0x4f68>)
 8005ff0:	443b      	add	r3, r7
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f240 4157 	movw	r1, #1111	@ 0x457
 8005ff8:	fb03 f101 	mul.w	r1, r3, r1
 8005ffc:	4b83      	ldr	r3, [pc, #524]	@ (800620c <NLLS+0x4f6c>)
 8005ffe:	443b      	add	r3, r7
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	440b      	add	r3, r1
 8006004:	00db      	lsls	r3, r3, #3
 8006006:	4413      	add	r3, r2
 8006008:	e9d3 0100 	ldrd	r0, r1, [r3]
 800600c:	4b80      	ldr	r3, [pc, #512]	@ (8006210 <NLLS+0x4f70>)
 800600e:	443b      	add	r3, r7
 8006010:	f5a3 62d0 	sub.w	r2, r3, #1664	@ 0x680
 8006014:	4b7d      	ldr	r3, [pc, #500]	@ (800620c <NLLS+0x4f6c>)
 8006016:	443b      	add	r3, r7
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	00db      	lsls	r3, r3, #3
 800601c:	4413      	add	r3, r2
 800601e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006022:	f7fa fb09 	bl	8000638 <__aeabi_dmul>
 8006026:	4602      	mov	r2, r0
 8006028:	460b      	mov	r3, r1
 800602a:	4620      	mov	r0, r4
 800602c:	4629      	mov	r1, r5
 800602e:	f7fa f94d 	bl	80002cc <__adddf3>
 8006032:	4602      	mov	r2, r0
 8006034:	460b      	mov	r3, r1
 8006036:	4973      	ldr	r1, [pc, #460]	@ (8006204 <NLLS+0x4f64>)
 8006038:	4439      	add	r1, r7
 800603a:	f5a1 6090 	sub.w	r0, r1, #1152	@ 0x480
 800603e:	4972      	ldr	r1, [pc, #456]	@ (8006208 <NLLS+0x4f68>)
 8006040:	4439      	add	r1, r7
 8006042:	6809      	ldr	r1, [r1, #0]
 8006044:	00c9      	lsls	r1, r1, #3
 8006046:	4401      	add	r1, r0
 8006048:	e9c1 2300 	strd	r2, r3, [r1]
            for(int j = 0; j < tam; j++)
 800604c:	4b6f      	ldr	r3, [pc, #444]	@ (800620c <NLLS+0x4f6c>)
 800604e:	443b      	add	r3, r7
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	3301      	adds	r3, #1
 8006054:	4a6d      	ldr	r2, [pc, #436]	@ (800620c <NLLS+0x4f6c>)
 8006056:	443a      	add	r2, r7
 8006058:	6013      	str	r3, [r2, #0]
 800605a:	4b6c      	ldr	r3, [pc, #432]	@ (800620c <NLLS+0x4f6c>)
 800605c:	443b      	add	r3, r7
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f240 4256 	movw	r2, #1110	@ 0x456
 8006064:	4293      	cmp	r3, r2
 8006066:	ddb3      	ble.n	8005fd0 <NLLS+0x4d30>
        for(int i = 0; i < N; i++)
 8006068:	4b67      	ldr	r3, [pc, #412]	@ (8006208 <NLLS+0x4f68>)
 800606a:	443b      	add	r3, r7
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	3301      	adds	r3, #1
 8006070:	4a65      	ldr	r2, [pc, #404]	@ (8006208 <NLLS+0x4f68>)
 8006072:	443a      	add	r2, r7
 8006074:	6013      	str	r3, [r2, #0]
 8006076:	4b64      	ldr	r3, [pc, #400]	@ (8006208 <NLLS+0x4f68>)
 8006078:	443b      	add	r3, r7
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b08      	cmp	r3, #8
 800607e:	dd93      	ble.n	8005fa8 <NLLS+0x4d08>
            }
        }

        for(int i = 0; i < N; i++)
 8006080:	2300      	movs	r3, #0
 8006082:	4a64      	ldr	r2, [pc, #400]	@ (8006214 <NLLS+0x4f74>)
 8006084:	443a      	add	r2, r7
 8006086:	6013      	str	r3, [r2, #0]
 8006088:	e02b      	b.n	80060e2 <NLLS+0x4e42>
        {
            p0[i] += Ht_e[i];
 800608a:	4b63      	ldr	r3, [pc, #396]	@ (8006218 <NLLS+0x4f78>)
 800608c:	443b      	add	r3, r7
 800608e:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8006092:	4b60      	ldr	r3, [pc, #384]	@ (8006214 <NLLS+0x4f74>)
 8006094:	443b      	add	r3, r7
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	00db      	lsls	r3, r3, #3
 800609a:	4413      	add	r3, r2
 800609c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80060a0:	4b58      	ldr	r3, [pc, #352]	@ (8006204 <NLLS+0x4f64>)
 80060a2:	443b      	add	r3, r7
 80060a4:	f5a3 6290 	sub.w	r2, r3, #1152	@ 0x480
 80060a8:	4b5a      	ldr	r3, [pc, #360]	@ (8006214 <NLLS+0x4f74>)
 80060aa:	443b      	add	r3, r7
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	00db      	lsls	r3, r3, #3
 80060b0:	4413      	add	r3, r2
 80060b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b6:	f7fa f909 	bl	80002cc <__adddf3>
 80060ba:	4602      	mov	r2, r0
 80060bc:	460b      	mov	r3, r1
 80060be:	4956      	ldr	r1, [pc, #344]	@ (8006218 <NLLS+0x4f78>)
 80060c0:	4439      	add	r1, r7
 80060c2:	f5a1 7088 	sub.w	r0, r1, #272	@ 0x110
 80060c6:	4953      	ldr	r1, [pc, #332]	@ (8006214 <NLLS+0x4f74>)
 80060c8:	4439      	add	r1, r7
 80060ca:	6809      	ldr	r1, [r1, #0]
 80060cc:	00c9      	lsls	r1, r1, #3
 80060ce:	4401      	add	r1, r0
 80060d0:	e9c1 2300 	strd	r2, r3, [r1]
        for(int i = 0; i < N; i++)
 80060d4:	4b4f      	ldr	r3, [pc, #316]	@ (8006214 <NLLS+0x4f74>)
 80060d6:	443b      	add	r3, r7
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	3301      	adds	r3, #1
 80060dc:	4a4d      	ldr	r2, [pc, #308]	@ (8006214 <NLLS+0x4f74>)
 80060de:	443a      	add	r2, r7
 80060e0:	6013      	str	r3, [r2, #0]
 80060e2:	4b4c      	ldr	r3, [pc, #304]	@ (8006214 <NLLS+0x4f74>)
 80060e4:	443b      	add	r3, r7
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2b08      	cmp	r3, #8
 80060ea:	ddce      	ble.n	800608a <NLLS+0x4dea>
        }

        passo++;
 80060ec:	4b4b      	ldr	r3, [pc, #300]	@ (800621c <NLLS+0x4f7c>)
 80060ee:	443b      	add	r3, r7
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	3301      	adds	r3, #1
 80060f4:	4a49      	ldr	r2, [pc, #292]	@ (800621c <NLLS+0x4f7c>)
 80060f6:	443a      	add	r2, r7
 80060f8:	7013      	strb	r3, [r2, #0]
    while(loop == 1)
 80060fa:	4b49      	ldr	r3, [pc, #292]	@ (8006220 <NLLS+0x4f80>)
 80060fc:	443b      	add	r3, r7
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	2b01      	cmp	r3, #1
 8006102:	f43b a91e 	beq.w	8001342 <NLLS+0xa2>
    }
    p[0] = sx;
 8006106:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800610a:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 800610e:	6819      	ldr	r1, [r3, #0]
 8006110:	4b44      	ldr	r3, [pc, #272]	@ (8006224 <NLLS+0x4f84>)
 8006112:	443b      	add	r3, r7
 8006114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006118:	e9c1 2300 	strd	r2, r3, [r1]
    p[1] = sy;
 800611c:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8006120:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f103 0108 	add.w	r1, r3, #8
 800612a:	4b3f      	ldr	r3, [pc, #252]	@ (8006228 <NLLS+0x4f88>)
 800612c:	443b      	add	r3, r7
 800612e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006132:	e9c1 2300 	strd	r2, r3, [r1]
    p[2] = sz;
 8006136:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800613a:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f103 0110 	add.w	r1, r3, #16
 8006144:	4b39      	ldr	r3, [pc, #228]	@ (800622c <NLLS+0x4f8c>)
 8006146:	443b      	add	r3, r7
 8006148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614c:	e9c1 2300 	strd	r2, r3, [r1]
    p[3] = bx;
 8006150:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8006154:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f103 0118 	add.w	r1, r3, #24
 800615e:	4b34      	ldr	r3, [pc, #208]	@ (8006230 <NLLS+0x4f90>)
 8006160:	443b      	add	r3, r7
 8006162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006166:	e9c1 2300 	strd	r2, r3, [r1]
    p[4] = by;
 800616a:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800616e:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f103 0120 	add.w	r1, r3, #32
 8006178:	4b2e      	ldr	r3, [pc, #184]	@ (8006234 <NLLS+0x4f94>)
 800617a:	443b      	add	r3, r7
 800617c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006180:	e9c1 2300 	strd	r2, r3, [r1]
    p[5] = bz;
 8006184:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8006188:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8006192:	4b29      	ldr	r3, [pc, #164]	@ (8006238 <NLLS+0x4f98>)
 8006194:	443b      	add	r3, r7
 8006196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619a:	e9c1 2300 	strd	r2, r3, [r1]
    p[6] = rho;
 800619e:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80061a2:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80061ac:	4b23      	ldr	r3, [pc, #140]	@ (800623c <NLLS+0x4f9c>)
 80061ae:	443b      	add	r3, r7
 80061b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b4:	e9c1 2300 	strd	r2, r3, [r1]
    p[7] = phi;
 80061b8:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80061bc:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80061c6:	4b1e      	ldr	r3, [pc, #120]	@ (8006240 <NLLS+0x4fa0>)
 80061c8:	443b      	add	r3, r7
 80061ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ce:	e9c1 2300 	strd	r2, r3, [r1]
    p[8] = lambida;
 80061d2:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80061d6:	f5a3 6379 	sub.w	r3, r3, #3984	@ 0xf90
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80061e0:	4b18      	ldr	r3, [pc, #96]	@ (8006244 <NLLS+0x4fa4>)
 80061e2:	443b      	add	r3, r7
 80061e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e8:	e9c1 2300 	strd	r2, r3, [r1]

    return passo;
 80061ec:	4b0b      	ldr	r3, [pc, #44]	@ (800621c <NLLS+0x4f7c>)
 80061ee:	443b      	add	r3, r7
 80061f0:	781b      	ldrb	r3, [r3, #0]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	f507 3737 	add.w	r7, r7, #187392	@ 0x2dc00
 80061f8:	f507 7771 	add.w	r7, r7, #964	@ 0x3c4
 80061fc:	46bd      	mov	sp, r7
 80061fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006202:	bf00      	nop
 8006204:	00013fc0 	.word	0x00013fc0
 8006208:	0002df38 	.word	0x0002df38
 800620c:	0002df34 	.word	0x0002df34
 8006210:	00029fc0 	.word	0x00029fc0
 8006214:	0002df30 	.word	0x0002df30
 8006218:	0002dfc0 	.word	0x0002dfc0
 800621c:	0002dfbf 	.word	0x0002dfbf
 8006220:	0002dfbe 	.word	0x0002dfbe
 8006224:	0002dfb0 	.word	0x0002dfb0
 8006228:	0002dfa8 	.word	0x0002dfa8
 800622c:	0002dfa0 	.word	0x0002dfa0
 8006230:	0002df98 	.word	0x0002df98
 8006234:	0002df90 	.word	0x0002df90
 8006238:	0002df88 	.word	0x0002df88
 800623c:	0002df80 	.word	0x0002df80
 8006240:	0002df78 	.word	0x0002df78
 8006244:	0002df70 	.word	0x0002df70

08006248 <ETS>:

void ETS(double *mx, double *my, double *mz, double *p)
{
 8006248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800624c:	f5ad 3d26 	sub.w	sp, sp, #169984	@ 0x29800
 8006250:	f5ad 7d20 	sub.w	sp, sp, #640	@ 0x280
 8006254:	af00      	add	r7, sp, #0
 8006256:	f507 6428 	add.w	r4, r7, #2688	@ 0xa80
 800625a:	f6a4 14f4 	subw	r4, r4, #2548	@ 0x9f4
 800625e:	6020      	str	r0, [r4, #0]
 8006260:	f507 6028 	add.w	r0, r7, #2688	@ 0xa80
 8006264:	f6a0 10f8 	subw	r0, r0, #2552	@ 0x9f8
 8006268:	6001      	str	r1, [r0, #0]
 800626a:	f507 6128 	add.w	r1, r7, #2688	@ 0xa80
 800626e:	f6a1 11fc 	subw	r1, r1, #2556	@ 0x9fc
 8006272:	600a      	str	r2, [r1, #0]
 8006274:	f507 6228 	add.w	r2, r7, #2688	@ 0xa80
 8006278:	f5a2 6220 	sub.w	r2, r2, #2560	@ 0xa00
 800627c:	6013      	str	r3, [r2, #0]
    //Cria a matriz H
    double mat_H[N][tam], my_2[tam];
    double H_Ht[N][N], inv[N][N];
    double mul_mat[N][tam];
    double X[N];
    double psi7 = 0, psi8 = 0, divs = 0, n1 = 0, n2 = 0, n3 = 0, n4 = 0, n5 = 0, n6 = 0, bx = 0, by = 0, bz = 0, sx = 0, sy = 0, sz = 0, rho = 0, phi = 0, lambida = 0;
 800627e:	f04f 0200 	mov.w	r2, #0
 8006282:	f04f 0300 	mov.w	r3, #0
 8006286:	4964      	ldr	r1, [pc, #400]	@ (8006418 <ETS+0x1d0>)
 8006288:	4439      	add	r1, r7
 800628a:	e9c1 2300 	strd	r2, r3, [r1]
 800628e:	f04f 0200 	mov.w	r2, #0
 8006292:	f04f 0300 	mov.w	r3, #0
 8006296:	4961      	ldr	r1, [pc, #388]	@ (800641c <ETS+0x1d4>)
 8006298:	4439      	add	r1, r7
 800629a:	e9c1 2300 	strd	r2, r3, [r1]
 800629e:	f04f 0200 	mov.w	r2, #0
 80062a2:	f04f 0300 	mov.w	r3, #0
 80062a6:	495e      	ldr	r1, [pc, #376]	@ (8006420 <ETS+0x1d8>)
 80062a8:	4439      	add	r1, r7
 80062aa:	e9c1 2300 	strd	r2, r3, [r1]
 80062ae:	f04f 0200 	mov.w	r2, #0
 80062b2:	f04f 0300 	mov.w	r3, #0
 80062b6:	495b      	ldr	r1, [pc, #364]	@ (8006424 <ETS+0x1dc>)
 80062b8:	4439      	add	r1, r7
 80062ba:	e9c1 2300 	strd	r2, r3, [r1]
 80062be:	f04f 0200 	mov.w	r2, #0
 80062c2:	f04f 0300 	mov.w	r3, #0
 80062c6:	4958      	ldr	r1, [pc, #352]	@ (8006428 <ETS+0x1e0>)
 80062c8:	4439      	add	r1, r7
 80062ca:	e9c1 2300 	strd	r2, r3, [r1]
 80062ce:	f04f 0200 	mov.w	r2, #0
 80062d2:	f04f 0300 	mov.w	r3, #0
 80062d6:	4955      	ldr	r1, [pc, #340]	@ (800642c <ETS+0x1e4>)
 80062d8:	4439      	add	r1, r7
 80062da:	e9c1 2300 	strd	r2, r3, [r1]
 80062de:	f04f 0200 	mov.w	r2, #0
 80062e2:	f04f 0300 	mov.w	r3, #0
 80062e6:	4952      	ldr	r1, [pc, #328]	@ (8006430 <ETS+0x1e8>)
 80062e8:	4439      	add	r1, r7
 80062ea:	e9c1 2300 	strd	r2, r3, [r1]
 80062ee:	f04f 0200 	mov.w	r2, #0
 80062f2:	f04f 0300 	mov.w	r3, #0
 80062f6:	494f      	ldr	r1, [pc, #316]	@ (8006434 <ETS+0x1ec>)
 80062f8:	4439      	add	r1, r7
 80062fa:	e9c1 2300 	strd	r2, r3, [r1]
 80062fe:	f04f 0200 	mov.w	r2, #0
 8006302:	f04f 0300 	mov.w	r3, #0
 8006306:	494c      	ldr	r1, [pc, #304]	@ (8006438 <ETS+0x1f0>)
 8006308:	4439      	add	r1, r7
 800630a:	e9c1 2300 	strd	r2, r3, [r1]
 800630e:	f04f 0200 	mov.w	r2, #0
 8006312:	f04f 0300 	mov.w	r3, #0
 8006316:	4949      	ldr	r1, [pc, #292]	@ (800643c <ETS+0x1f4>)
 8006318:	4439      	add	r1, r7
 800631a:	e9c1 2300 	strd	r2, r3, [r1]
 800631e:	f04f 0200 	mov.w	r2, #0
 8006322:	f04f 0300 	mov.w	r3, #0
 8006326:	4946      	ldr	r1, [pc, #280]	@ (8006440 <ETS+0x1f8>)
 8006328:	4439      	add	r1, r7
 800632a:	e9c1 2300 	strd	r2, r3, [r1]
 800632e:	f04f 0200 	mov.w	r2, #0
 8006332:	f04f 0300 	mov.w	r3, #0
 8006336:	4943      	ldr	r1, [pc, #268]	@ (8006444 <ETS+0x1fc>)
 8006338:	4439      	add	r1, r7
 800633a:	e9c1 2300 	strd	r2, r3, [r1]
 800633e:	f04f 0200 	mov.w	r2, #0
 8006342:	f04f 0300 	mov.w	r3, #0
 8006346:	4940      	ldr	r1, [pc, #256]	@ (8006448 <ETS+0x200>)
 8006348:	4439      	add	r1, r7
 800634a:	e9c1 2300 	strd	r2, r3, [r1]
 800634e:	f04f 0200 	mov.w	r2, #0
 8006352:	f04f 0300 	mov.w	r3, #0
 8006356:	493d      	ldr	r1, [pc, #244]	@ (800644c <ETS+0x204>)
 8006358:	4439      	add	r1, r7
 800635a:	e9c1 2300 	strd	r2, r3, [r1]
 800635e:	f04f 0200 	mov.w	r2, #0
 8006362:	f04f 0300 	mov.w	r3, #0
 8006366:	493a      	ldr	r1, [pc, #232]	@ (8006450 <ETS+0x208>)
 8006368:	4439      	add	r1, r7
 800636a:	e9c1 2300 	strd	r2, r3, [r1]
 800636e:	f04f 0200 	mov.w	r2, #0
 8006372:	f04f 0300 	mov.w	r3, #0
 8006376:	4937      	ldr	r1, [pc, #220]	@ (8006454 <ETS+0x20c>)
 8006378:	4439      	add	r1, r7
 800637a:	e9c1 2300 	strd	r2, r3, [r1]
 800637e:	f04f 0200 	mov.w	r2, #0
 8006382:	f04f 0300 	mov.w	r3, #0
 8006386:	4934      	ldr	r1, [pc, #208]	@ (8006458 <ETS+0x210>)
 8006388:	4439      	add	r1, r7
 800638a:	e9c1 2300 	strd	r2, r3, [r1]
 800638e:	f04f 0200 	mov.w	r2, #0
 8006392:	f04f 0300 	mov.w	r3, #0
 8006396:	4931      	ldr	r1, [pc, #196]	@ (800645c <ETS+0x214>)
 8006398:	4439      	add	r1, r7
 800639a:	e9c1 2300 	strd	r2, r3, [r1]
    double X1_2 = 0, X2_2 = 0, X3_2 = 0, X4_2 = 0, X5_2 = 0, X6_2 = 0, X7_2 = 0;
 800639e:	f04f 0200 	mov.w	r2, #0
 80063a2:	f04f 0300 	mov.w	r3, #0
 80063a6:	492e      	ldr	r1, [pc, #184]	@ (8006460 <ETS+0x218>)
 80063a8:	4439      	add	r1, r7
 80063aa:	e9c1 2300 	strd	r2, r3, [r1]
 80063ae:	f04f 0200 	mov.w	r2, #0
 80063b2:	f04f 0300 	mov.w	r3, #0
 80063b6:	492b      	ldr	r1, [pc, #172]	@ (8006464 <ETS+0x21c>)
 80063b8:	4439      	add	r1, r7
 80063ba:	e9c1 2300 	strd	r2, r3, [r1]
 80063be:	f04f 0200 	mov.w	r2, #0
 80063c2:	f04f 0300 	mov.w	r3, #0
 80063c6:	4928      	ldr	r1, [pc, #160]	@ (8006468 <ETS+0x220>)
 80063c8:	4439      	add	r1, r7
 80063ca:	e9c1 2300 	strd	r2, r3, [r1]
 80063ce:	f04f 0200 	mov.w	r2, #0
 80063d2:	f04f 0300 	mov.w	r3, #0
 80063d6:	4925      	ldr	r1, [pc, #148]	@ (800646c <ETS+0x224>)
 80063d8:	4439      	add	r1, r7
 80063da:	e9c1 2300 	strd	r2, r3, [r1]
 80063de:	f04f 0200 	mov.w	r2, #0
 80063e2:	f04f 0300 	mov.w	r3, #0
 80063e6:	4922      	ldr	r1, [pc, #136]	@ (8006470 <ETS+0x228>)
 80063e8:	4439      	add	r1, r7
 80063ea:	e9c1 2300 	strd	r2, r3, [r1]
 80063ee:	f04f 0200 	mov.w	r2, #0
 80063f2:	f04f 0300 	mov.w	r3, #0
 80063f6:	491f      	ldr	r1, [pc, #124]	@ (8006474 <ETS+0x22c>)
 80063f8:	4439      	add	r1, r7
 80063fa:	e9c1 2300 	strd	r2, r3, [r1]
 80063fe:	f04f 0200 	mov.w	r2, #0
 8006402:	f04f 0300 	mov.w	r3, #0
 8006406:	491c      	ldr	r1, [pc, #112]	@ (8006478 <ETS+0x230>)
 8006408:	4439      	add	r1, r7
 800640a:	e9c1 2300 	strd	r2, r3, [r1]
    for(int i=0; i < tam; i++)
 800640e:	2300      	movs	r3, #0
 8006410:	4a1a      	ldr	r2, [pc, #104]	@ (800647c <ETS+0x234>)
 8006412:	443a      	add	r2, r7
 8006414:	6013      	str	r3, [r2, #0]
 8006416:	e1a2      	b.n	800675e <ETS+0x516>
 8006418:	00029a50 	.word	0x00029a50
 800641c:	00029a48 	.word	0x00029a48
 8006420:	00029a40 	.word	0x00029a40
 8006424:	00029a38 	.word	0x00029a38
 8006428:	00029a30 	.word	0x00029a30
 800642c:	00029a28 	.word	0x00029a28
 8006430:	00029a20 	.word	0x00029a20
 8006434:	00029a18 	.word	0x00029a18
 8006438:	00029a10 	.word	0x00029a10
 800643c:	00029a08 	.word	0x00029a08
 8006440:	00029a00 	.word	0x00029a00
 8006444:	000299f8 	.word	0x000299f8
 8006448:	000299f0 	.word	0x000299f0
 800644c:	000299e8 	.word	0x000299e8
 8006450:	000299e0 	.word	0x000299e0
 8006454:	000299d8 	.word	0x000299d8
 8006458:	000299d0 	.word	0x000299d0
 800645c:	000299c8 	.word	0x000299c8
 8006460:	000299c0 	.word	0x000299c0
 8006464:	000299b8 	.word	0x000299b8
 8006468:	000299b0 	.word	0x000299b0
 800646c:	000299a8 	.word	0x000299a8
 8006470:	000299a0 	.word	0x000299a0
 8006474:	00029998 	.word	0x00029998
 8006478:	00029990 	.word	0x00029990
 800647c:	00029a7c 	.word	0x00029a7c
    {
        mat_H[0][i] = mx[i]*mx[i];
 8006480:	4bae      	ldr	r3, [pc, #696]	@ (800673c <ETS+0x4f4>)
 8006482:	443b      	add	r3, r7
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	00da      	lsls	r2, r3, #3
 8006488:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800648c:	f6a3 13f4 	subw	r3, r3, #2548	@ 0x9f4
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4413      	add	r3, r2
 8006494:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006498:	4ba8      	ldr	r3, [pc, #672]	@ (800673c <ETS+0x4f4>)
 800649a:	443b      	add	r3, r7
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	00da      	lsls	r2, r3, #3
 80064a0:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80064a4:	f6a3 13f4 	subw	r3, r3, #2548	@ 0x9f4
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4413      	add	r3, r2
 80064ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b0:	f7fa f8c2 	bl	8000638 <__aeabi_dmul>
 80064b4:	4602      	mov	r2, r0
 80064b6:	460b      	mov	r3, r1
 80064b8:	4610      	mov	r0, r2
 80064ba:	4619      	mov	r1, r3
 80064bc:	4ba0      	ldr	r3, [pc, #640]	@ (8006740 <ETS+0x4f8>)
 80064be:	443b      	add	r3, r7
 80064c0:	f6a3 1268 	subw	r2, r3, #2408	@ 0x968
 80064c4:	4b9d      	ldr	r3, [pc, #628]	@ (800673c <ETS+0x4f4>)
 80064c6:	443b      	add	r3, r7
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	00db      	lsls	r3, r3, #3
 80064cc:	4413      	add	r3, r2
 80064ce:	e9c3 0100 	strd	r0, r1, [r3]
        mat_H[1][i] = mx[i]*my[i];
 80064d2:	4b9a      	ldr	r3, [pc, #616]	@ (800673c <ETS+0x4f4>)
 80064d4:	443b      	add	r3, r7
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	00da      	lsls	r2, r3, #3
 80064da:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80064de:	f6a3 13f4 	subw	r3, r3, #2548	@ 0x9f4
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4413      	add	r3, r2
 80064e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80064ea:	4b94      	ldr	r3, [pc, #592]	@ (800673c <ETS+0x4f4>)
 80064ec:	443b      	add	r3, r7
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	00da      	lsls	r2, r3, #3
 80064f2:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80064f6:	f6a3 13f8 	subw	r3, r3, #2552	@ 0x9f8
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4413      	add	r3, r2
 80064fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006502:	f7fa f899 	bl	8000638 <__aeabi_dmul>
 8006506:	4602      	mov	r2, r0
 8006508:	460b      	mov	r3, r1
 800650a:	4610      	mov	r0, r2
 800650c:	4619      	mov	r1, r3
 800650e:	4b8c      	ldr	r3, [pc, #560]	@ (8006740 <ETS+0x4f8>)
 8006510:	443b      	add	r3, r7
 8006512:	f6a3 1268 	subw	r2, r3, #2408	@ 0x968
 8006516:	4b89      	ldr	r3, [pc, #548]	@ (800673c <ETS+0x4f4>)
 8006518:	443b      	add	r3, r7
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f203 4357 	addw	r3, r3, #1111	@ 0x457
 8006520:	00db      	lsls	r3, r3, #3
 8006522:	4413      	add	r3, r2
 8006524:	e9c3 0100 	strd	r0, r1, [r3]
        mat_H[2][i] = mx[i]*mz[i];
 8006528:	4b84      	ldr	r3, [pc, #528]	@ (800673c <ETS+0x4f4>)
 800652a:	443b      	add	r3, r7
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	00da      	lsls	r2, r3, #3
 8006530:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006534:	f6a3 13f4 	subw	r3, r3, #2548	@ 0x9f4
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4413      	add	r3, r2
 800653c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006540:	4b7e      	ldr	r3, [pc, #504]	@ (800673c <ETS+0x4f4>)
 8006542:	443b      	add	r3, r7
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	00da      	lsls	r2, r3, #3
 8006548:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800654c:	f6a3 13fc 	subw	r3, r3, #2556	@ 0x9fc
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4413      	add	r3, r2
 8006554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006558:	f7fa f86e 	bl	8000638 <__aeabi_dmul>
 800655c:	4602      	mov	r2, r0
 800655e:	460b      	mov	r3, r1
 8006560:	4610      	mov	r0, r2
 8006562:	4619      	mov	r1, r3
 8006564:	4b76      	ldr	r3, [pc, #472]	@ (8006740 <ETS+0x4f8>)
 8006566:	443b      	add	r3, r7
 8006568:	f6a3 1268 	subw	r2, r3, #2408	@ 0x968
 800656c:	4b73      	ldr	r3, [pc, #460]	@ (800673c <ETS+0x4f4>)
 800656e:	443b      	add	r3, r7
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f603 03ae 	addw	r3, r3, #2222	@ 0x8ae
 8006576:	00db      	lsls	r3, r3, #3
 8006578:	4413      	add	r3, r2
 800657a:	e9c3 0100 	strd	r0, r1, [r3]
        mat_H[3][i] = my[i]*mz[i];
 800657e:	4b6f      	ldr	r3, [pc, #444]	@ (800673c <ETS+0x4f4>)
 8006580:	443b      	add	r3, r7
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	00da      	lsls	r2, r3, #3
 8006586:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800658a:	f6a3 13f8 	subw	r3, r3, #2552	@ 0x9f8
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4413      	add	r3, r2
 8006592:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006596:	4b69      	ldr	r3, [pc, #420]	@ (800673c <ETS+0x4f4>)
 8006598:	443b      	add	r3, r7
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	00da      	lsls	r2, r3, #3
 800659e:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80065a2:	f6a3 13fc 	subw	r3, r3, #2556	@ 0x9fc
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4413      	add	r3, r2
 80065aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ae:	f7fa f843 	bl	8000638 <__aeabi_dmul>
 80065b2:	4602      	mov	r2, r0
 80065b4:	460b      	mov	r3, r1
 80065b6:	4610      	mov	r0, r2
 80065b8:	4619      	mov	r1, r3
 80065ba:	4b61      	ldr	r3, [pc, #388]	@ (8006740 <ETS+0x4f8>)
 80065bc:	443b      	add	r3, r7
 80065be:	f6a3 1268 	subw	r2, r3, #2408	@ 0x968
 80065c2:	4b5e      	ldr	r3, [pc, #376]	@ (800673c <ETS+0x4f4>)
 80065c4:	443b      	add	r3, r7
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f603 5305 	addw	r3, r3, #3333	@ 0xd05
 80065cc:	00db      	lsls	r3, r3, #3
 80065ce:	4413      	add	r3, r2
 80065d0:	e9c3 0100 	strd	r0, r1, [r3]
        mat_H[4][i] = mz[i]*mz[i];
 80065d4:	4b59      	ldr	r3, [pc, #356]	@ (800673c <ETS+0x4f4>)
 80065d6:	443b      	add	r3, r7
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	00da      	lsls	r2, r3, #3
 80065dc:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80065e0:	f6a3 13fc 	subw	r3, r3, #2556	@ 0x9fc
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4413      	add	r3, r2
 80065e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80065ec:	4b53      	ldr	r3, [pc, #332]	@ (800673c <ETS+0x4f4>)
 80065ee:	443b      	add	r3, r7
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	00da      	lsls	r2, r3, #3
 80065f4:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80065f8:	f6a3 13fc 	subw	r3, r3, #2556	@ 0x9fc
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4413      	add	r3, r2
 8006600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006604:	f7fa f818 	bl	8000638 <__aeabi_dmul>
 8006608:	4602      	mov	r2, r0
 800660a:	460b      	mov	r3, r1
 800660c:	4614      	mov	r4, r2
 800660e:	461d      	mov	r5, r3
 8006610:	4b4b      	ldr	r3, [pc, #300]	@ (8006740 <ETS+0x4f8>)
 8006612:	443b      	add	r3, r7
 8006614:	f6a3 1168 	subw	r1, r3, #2408	@ 0x968
 8006618:	4b48      	ldr	r3, [pc, #288]	@ (800673c <ETS+0x4f4>)
 800661a:	443b      	add	r3, r7
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	f241 135c 	movw	r3, #4444	@ 0x115c
 8006622:	4413      	add	r3, r2
 8006624:	00db      	lsls	r3, r3, #3
 8006626:	440b      	add	r3, r1
 8006628:	e9c3 4500 	strd	r4, r5, [r3]
        mat_H[5][i] = mx[i];
 800662c:	4b43      	ldr	r3, [pc, #268]	@ (800673c <ETS+0x4f4>)
 800662e:	443b      	add	r3, r7
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	00da      	lsls	r2, r3, #3
 8006634:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006638:	f6a3 13f4 	subw	r3, r3, #2548	@ 0x9f4
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4413      	add	r3, r2
 8006640:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006644:	4b3e      	ldr	r3, [pc, #248]	@ (8006740 <ETS+0x4f8>)
 8006646:	443b      	add	r3, r7
 8006648:	f6a3 1468 	subw	r4, r3, #2408	@ 0x968
 800664c:	4b3b      	ldr	r3, [pc, #236]	@ (800673c <ETS+0x4f4>)
 800664e:	443b      	add	r3, r7
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 8006656:	4413      	add	r3, r2
 8006658:	00db      	lsls	r3, r3, #3
 800665a:	4423      	add	r3, r4
 800665c:	e9c3 0100 	strd	r0, r1, [r3]
        mat_H[6][i] = my[i];
 8006660:	4b36      	ldr	r3, [pc, #216]	@ (800673c <ETS+0x4f4>)
 8006662:	443b      	add	r3, r7
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	00da      	lsls	r2, r3, #3
 8006668:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800666c:	f6a3 13f8 	subw	r3, r3, #2552	@ 0x9f8
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4413      	add	r3, r2
 8006674:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006678:	4b31      	ldr	r3, [pc, #196]	@ (8006740 <ETS+0x4f8>)
 800667a:	443b      	add	r3, r7
 800667c:	f6a3 1468 	subw	r4, r3, #2408	@ 0x968
 8006680:	4b2e      	ldr	r3, [pc, #184]	@ (800673c <ETS+0x4f4>)
 8006682:	443b      	add	r3, r7
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	f641 230a 	movw	r3, #6666	@ 0x1a0a
 800668a:	4413      	add	r3, r2
 800668c:	00db      	lsls	r3, r3, #3
 800668e:	4423      	add	r3, r4
 8006690:	e9c3 0100 	strd	r0, r1, [r3]
        mat_H[7][i] = mz[i];
 8006694:	4b29      	ldr	r3, [pc, #164]	@ (800673c <ETS+0x4f4>)
 8006696:	443b      	add	r3, r7
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	00da      	lsls	r2, r3, #3
 800669c:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80066a0:	f6a3 13fc 	subw	r3, r3, #2556	@ 0x9fc
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4413      	add	r3, r2
 80066a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066ac:	4b24      	ldr	r3, [pc, #144]	@ (8006740 <ETS+0x4f8>)
 80066ae:	443b      	add	r3, r7
 80066b0:	f6a3 1468 	subw	r4, r3, #2408	@ 0x968
 80066b4:	4b21      	ldr	r3, [pc, #132]	@ (800673c <ETS+0x4f4>)
 80066b6:	443b      	add	r3, r7
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	f641 6361 	movw	r3, #7777	@ 0x1e61
 80066be:	4413      	add	r3, r2
 80066c0:	00db      	lsls	r3, r3, #3
 80066c2:	4423      	add	r3, r4
 80066c4:	e9c3 0100 	strd	r0, r1, [r3]
        mat_H[8][i] = 1;
 80066c8:	4b1d      	ldr	r3, [pc, #116]	@ (8006740 <ETS+0x4f8>)
 80066ca:	443b      	add	r3, r7
 80066cc:	f6a3 1168 	subw	r1, r3, #2408	@ 0x968
 80066d0:	4b1a      	ldr	r3, [pc, #104]	@ (800673c <ETS+0x4f4>)
 80066d2:	443b      	add	r3, r7
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	f242 23b8 	movw	r3, #8888	@ 0x22b8
 80066da:	4413      	add	r3, r2
 80066dc:	00db      	lsls	r3, r3, #3
 80066de:	4419      	add	r1, r3
 80066e0:	f04f 0200 	mov.w	r2, #0
 80066e4:	4b17      	ldr	r3, [pc, #92]	@ (8006744 <ETS+0x4fc>)
 80066e6:	e9c1 2300 	strd	r2, r3, [r1]
        my_2[i] = -(my[i]*my[i]);
 80066ea:	4b14      	ldr	r3, [pc, #80]	@ (800673c <ETS+0x4f4>)
 80066ec:	443b      	add	r3, r7
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	00da      	lsls	r2, r3, #3
 80066f2:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80066f6:	f6a3 13f8 	subw	r3, r3, #2552	@ 0x9f8
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4413      	add	r3, r2
 80066fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006702:	4b0e      	ldr	r3, [pc, #56]	@ (800673c <ETS+0x4f4>)
 8006704:	443b      	add	r3, r7
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	00da      	lsls	r2, r3, #3
 800670a:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800670e:	f6a3 13f8 	subw	r3, r3, #2552	@ 0x9f8
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4413      	add	r3, r2
 8006716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671a:	f7f9 ff8d 	bl	8000638 <__aeabi_dmul>
 800671e:	4602      	mov	r2, r0
 8006720:	460b      	mov	r3, r1
 8006722:	4690      	mov	r8, r2
 8006724:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8006728:	4b07      	ldr	r3, [pc, #28]	@ (8006748 <ETS+0x500>)
 800672a:	443b      	add	r3, r7
 800672c:	f5a3 6242 	sub.w	r2, r3, #3104	@ 0xc20
 8006730:	4b02      	ldr	r3, [pc, #8]	@ (800673c <ETS+0x4f4>)
 8006732:	443b      	add	r3, r7
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	00db      	lsls	r3, r3, #3
 8006738:	4413      	add	r3, r2
 800673a:	e007      	b.n	800674c <ETS+0x504>
 800673c:	00029a7c 	.word	0x00029a7c
 8006740:	00016a80 	.word	0x00016a80
 8006744:	3ff00000 	.word	0x3ff00000
 8006748:	00014a80 	.word	0x00014a80
 800674c:	e9c3 8900 	strd	r8, r9, [r3]
    for(int i=0; i < tam; i++)
 8006750:	4b75      	ldr	r3, [pc, #468]	@ (8006928 <ETS+0x6e0>)
 8006752:	443b      	add	r3, r7
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3301      	adds	r3, #1
 8006758:	4a73      	ldr	r2, [pc, #460]	@ (8006928 <ETS+0x6e0>)
 800675a:	443a      	add	r2, r7
 800675c:	6013      	str	r3, [r2, #0]
 800675e:	4b72      	ldr	r3, [pc, #456]	@ (8006928 <ETS+0x6e0>)
 8006760:	443b      	add	r3, r7
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	f240 4356 	movw	r3, #1110	@ 0x456
 8006768:	429a      	cmp	r2, r3
 800676a:	f77f ae89 	ble.w	8006480 <ETS+0x238>
    }

    //Multiplicação da matriz H por sua transposta
    for(int i=0; i < N; i++)
 800676e:	2300      	movs	r3, #0
 8006770:	4a6e      	ldr	r2, [pc, #440]	@ (800692c <ETS+0x6e4>)
 8006772:	443a      	add	r2, r7
 8006774:	6013      	str	r3, [r2, #0]
 8006776:	e099      	b.n	80068ac <ETS+0x664>
    {
        for(int j=0; j < N; j++)
 8006778:	2300      	movs	r3, #0
 800677a:	4a6d      	ldr	r2, [pc, #436]	@ (8006930 <ETS+0x6e8>)
 800677c:	443a      	add	r2, r7
 800677e:	6013      	str	r3, [r2, #0]
 8006780:	e087      	b.n	8006892 <ETS+0x64a>
        {
            H_Ht[i][j] = 0;
 8006782:	4b6c      	ldr	r3, [pc, #432]	@ (8006934 <ETS+0x6ec>)
 8006784:	443b      	add	r3, r7
 8006786:	f6a3 61a8 	subw	r1, r3, #3752	@ 0xea8
 800678a:	4b68      	ldr	r3, [pc, #416]	@ (800692c <ETS+0x6e4>)
 800678c:	443b      	add	r3, r7
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	461a      	mov	r2, r3
 8006792:	00d2      	lsls	r2, r2, #3
 8006794:	441a      	add	r2, r3
 8006796:	4b66      	ldr	r3, [pc, #408]	@ (8006930 <ETS+0x6e8>)
 8006798:	443b      	add	r3, r7
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4413      	add	r3, r2
 800679e:	00db      	lsls	r3, r3, #3
 80067a0:	4419      	add	r1, r3
 80067a2:	f04f 0200 	mov.w	r2, #0
 80067a6:	f04f 0300 	mov.w	r3, #0
 80067aa:	e9c1 2300 	strd	r2, r3, [r1]
            for(int k = 0; k < tam; k++)
 80067ae:	2300      	movs	r3, #0
 80067b0:	4a61      	ldr	r2, [pc, #388]	@ (8006938 <ETS+0x6f0>)
 80067b2:	443a      	add	r2, r7
 80067b4:	6013      	str	r3, [r2, #0]
 80067b6:	e05e      	b.n	8006876 <ETS+0x62e>
            {
                H_Ht[i][j] += mat_H[i][k]*mat_H[j][k];
 80067b8:	4b5e      	ldr	r3, [pc, #376]	@ (8006934 <ETS+0x6ec>)
 80067ba:	443b      	add	r3, r7
 80067bc:	f6a3 61a8 	subw	r1, r3, #3752	@ 0xea8
 80067c0:	4b5a      	ldr	r3, [pc, #360]	@ (800692c <ETS+0x6e4>)
 80067c2:	443b      	add	r3, r7
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	00d2      	lsls	r2, r2, #3
 80067ca:	441a      	add	r2, r3
 80067cc:	4b58      	ldr	r3, [pc, #352]	@ (8006930 <ETS+0x6e8>)
 80067ce:	443b      	add	r3, r7
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4413      	add	r3, r2
 80067d4:	00db      	lsls	r3, r3, #3
 80067d6:	440b      	add	r3, r1
 80067d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80067dc:	4b57      	ldr	r3, [pc, #348]	@ (800693c <ETS+0x6f4>)
 80067de:	443b      	add	r3, r7
 80067e0:	f6a3 1168 	subw	r1, r3, #2408	@ 0x968
 80067e4:	4b51      	ldr	r3, [pc, #324]	@ (800692c <ETS+0x6e4>)
 80067e6:	443b      	add	r3, r7
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	f240 4357 	movw	r3, #1111	@ 0x457
 80067ee:	fb03 f202 	mul.w	r2, r3, r2
 80067f2:	4b51      	ldr	r3, [pc, #324]	@ (8006938 <ETS+0x6f0>)
 80067f4:	443b      	add	r3, r7
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4413      	add	r3, r2
 80067fa:	00db      	lsls	r3, r3, #3
 80067fc:	440b      	add	r3, r1
 80067fe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006802:	4b4e      	ldr	r3, [pc, #312]	@ (800693c <ETS+0x6f4>)
 8006804:	443b      	add	r3, r7
 8006806:	f6a3 1168 	subw	r1, r3, #2408	@ 0x968
 800680a:	4b49      	ldr	r3, [pc, #292]	@ (8006930 <ETS+0x6e8>)
 800680c:	443b      	add	r3, r7
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	f240 4357 	movw	r3, #1111	@ 0x457
 8006814:	fb03 f202 	mul.w	r2, r3, r2
 8006818:	4b47      	ldr	r3, [pc, #284]	@ (8006938 <ETS+0x6f0>)
 800681a:	443b      	add	r3, r7
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4413      	add	r3, r2
 8006820:	00db      	lsls	r3, r3, #3
 8006822:	440b      	add	r3, r1
 8006824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006828:	4620      	mov	r0, r4
 800682a:	4629      	mov	r1, r5
 800682c:	f7f9 ff04 	bl	8000638 <__aeabi_dmul>
 8006830:	4602      	mov	r2, r0
 8006832:	460b      	mov	r3, r1
 8006834:	4640      	mov	r0, r8
 8006836:	4649      	mov	r1, r9
 8006838:	f7f9 fd48 	bl	80002cc <__adddf3>
 800683c:	4602      	mov	r2, r0
 800683e:	460b      	mov	r3, r1
 8006840:	4614      	mov	r4, r2
 8006842:	461d      	mov	r5, r3
 8006844:	4b3b      	ldr	r3, [pc, #236]	@ (8006934 <ETS+0x6ec>)
 8006846:	443b      	add	r3, r7
 8006848:	f6a3 61a8 	subw	r1, r3, #3752	@ 0xea8
 800684c:	4b37      	ldr	r3, [pc, #220]	@ (800692c <ETS+0x6e4>)
 800684e:	443b      	add	r3, r7
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	461a      	mov	r2, r3
 8006854:	00d2      	lsls	r2, r2, #3
 8006856:	441a      	add	r2, r3
 8006858:	4b35      	ldr	r3, [pc, #212]	@ (8006930 <ETS+0x6e8>)
 800685a:	443b      	add	r3, r7
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4413      	add	r3, r2
 8006860:	00db      	lsls	r3, r3, #3
 8006862:	440b      	add	r3, r1
 8006864:	e9c3 4500 	strd	r4, r5, [r3]
            for(int k = 0; k < tam; k++)
 8006868:	4b33      	ldr	r3, [pc, #204]	@ (8006938 <ETS+0x6f0>)
 800686a:	443b      	add	r3, r7
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	3301      	adds	r3, #1
 8006870:	4a31      	ldr	r2, [pc, #196]	@ (8006938 <ETS+0x6f0>)
 8006872:	443a      	add	r2, r7
 8006874:	6013      	str	r3, [r2, #0]
 8006876:	4b30      	ldr	r3, [pc, #192]	@ (8006938 <ETS+0x6f0>)
 8006878:	443b      	add	r3, r7
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	f240 4356 	movw	r3, #1110	@ 0x456
 8006880:	429a      	cmp	r2, r3
 8006882:	dd99      	ble.n	80067b8 <ETS+0x570>
        for(int j=0; j < N; j++)
 8006884:	4b2a      	ldr	r3, [pc, #168]	@ (8006930 <ETS+0x6e8>)
 8006886:	443b      	add	r3, r7
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	3301      	adds	r3, #1
 800688c:	4a28      	ldr	r2, [pc, #160]	@ (8006930 <ETS+0x6e8>)
 800688e:	443a      	add	r2, r7
 8006890:	6013      	str	r3, [r2, #0]
 8006892:	4b27      	ldr	r3, [pc, #156]	@ (8006930 <ETS+0x6e8>)
 8006894:	443b      	add	r3, r7
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b08      	cmp	r3, #8
 800689a:	f77f af72 	ble.w	8006782 <ETS+0x53a>
    for(int i=0; i < N; i++)
 800689e:	4b23      	ldr	r3, [pc, #140]	@ (800692c <ETS+0x6e4>)
 80068a0:	443b      	add	r3, r7
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	3301      	adds	r3, #1
 80068a6:	4a21      	ldr	r2, [pc, #132]	@ (800692c <ETS+0x6e4>)
 80068a8:	443a      	add	r2, r7
 80068aa:	6013      	str	r3, [r2, #0]
 80068ac:	4b1f      	ldr	r3, [pc, #124]	@ (800692c <ETS+0x6e4>)
 80068ae:	443b      	add	r3, r7
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2b08      	cmp	r3, #8
 80068b4:	f77f af60 	ble.w	8006778 <ETS+0x530>
            }
        }
    }

    inverter_matriz(H_Ht, inv);
 80068b8:	4a21      	ldr	r2, [pc, #132]	@ (8006940 <ETS+0x6f8>)
 80068ba:	4b22      	ldr	r3, [pc, #136]	@ (8006944 <ETS+0x6fc>)
 80068bc:	4413      	add	r3, r2
 80068be:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 80068c2:	189a      	adds	r2, r3, r2
 80068c4:	4b20      	ldr	r3, [pc, #128]	@ (8006948 <ETS+0x700>)
 80068c6:	f503 3326 	add.w	r3, r3, #169984	@ 0x29800
 80068ca:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80068ce:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 80068d2:	440b      	add	r3, r1
 80068d4:	4611      	mov	r1, r2
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7fa fba4 	bl	8001024 <inverter_matriz>

    //Multiplica a inversa por H transposta
    for(int i=0; i < N; i++)
 80068dc:	2300      	movs	r3, #0
 80068de:	4a1b      	ldr	r2, [pc, #108]	@ (800694c <ETS+0x704>)
 80068e0:	443a      	add	r2, r7
 80068e2:	6013      	str	r3, [r2, #0]
 80068e4:	e0b3      	b.n	8006a4e <ETS+0x806>
    {
        for(int j=0; j < tam; j++)
 80068e6:	2300      	movs	r3, #0
 80068e8:	4a19      	ldr	r2, [pc, #100]	@ (8006950 <ETS+0x708>)
 80068ea:	443a      	add	r2, r7
 80068ec:	6013      	str	r3, [r2, #0]
 80068ee:	e09f      	b.n	8006a30 <ETS+0x7e8>
        {
            mul_mat[i][j] = 0;
 80068f0:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80068f4:	f6a3 11a8 	subw	r1, r3, #2472	@ 0x9a8
 80068f8:	4b14      	ldr	r3, [pc, #80]	@ (800694c <ETS+0x704>)
 80068fa:	443b      	add	r3, r7
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	f240 4357 	movw	r3, #1111	@ 0x457
 8006902:	fb03 f202 	mul.w	r2, r3, r2
 8006906:	4b12      	ldr	r3, [pc, #72]	@ (8006950 <ETS+0x708>)
 8006908:	443b      	add	r3, r7
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4413      	add	r3, r2
 800690e:	00db      	lsls	r3, r3, #3
 8006910:	4419      	add	r1, r3
 8006912:	f04f 0200 	mov.w	r2, #0
 8006916:	f04f 0300 	mov.w	r3, #0
 800691a:	e9c1 2300 	strd	r2, r3, [r1]
            for(int k=0; k < N; k++)
 800691e:	2300      	movs	r3, #0
 8006920:	4a0c      	ldr	r2, [pc, #48]	@ (8006954 <ETS+0x70c>)
 8006922:	443a      	add	r2, r7
 8006924:	6013      	str	r3, [r2, #0]
 8006926:	e077      	b.n	8006a18 <ETS+0x7d0>
 8006928:	00029a7c 	.word	0x00029a7c
 800692c:	00029a78 	.word	0x00029a78
 8006930:	00029a74 	.word	0x00029a74
 8006934:	00014a80 	.word	0x00014a80
 8006938:	00029a70 	.word	0x00029a70
 800693c:	00016a80 	.word	0x00016a80
 8006940:	fffe9ed0 	.word	0xfffe9ed0
 8006944:	00029a00 	.word	0x00029a00
 8006948:	fffea158 	.word	0xfffea158
 800694c:	00029a6c 	.word	0x00029a6c
 8006950:	00029a68 	.word	0x00029a68
 8006954:	00029a64 	.word	0x00029a64
            {
                mul_mat[i][j] += inv[i][k]*mat_H[k][j];
 8006958:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800695c:	f6a3 11a8 	subw	r1, r3, #2472	@ 0x9a8
 8006960:	4b4a      	ldr	r3, [pc, #296]	@ (8006a8c <ETS+0x844>)
 8006962:	443b      	add	r3, r7
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	f240 4357 	movw	r3, #1111	@ 0x457
 800696a:	fb03 f202 	mul.w	r2, r3, r2
 800696e:	4b48      	ldr	r3, [pc, #288]	@ (8006a90 <ETS+0x848>)
 8006970:	443b      	add	r3, r7
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4413      	add	r3, r2
 8006976:	00db      	lsls	r3, r3, #3
 8006978:	440b      	add	r3, r1
 800697a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800697e:	4b45      	ldr	r3, [pc, #276]	@ (8006a94 <ETS+0x84c>)
 8006980:	443b      	add	r3, r7
 8006982:	f5a3 7198 	sub.w	r1, r3, #304	@ 0x130
 8006986:	4b41      	ldr	r3, [pc, #260]	@ (8006a8c <ETS+0x844>)
 8006988:	443b      	add	r3, r7
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	461a      	mov	r2, r3
 800698e:	00d2      	lsls	r2, r2, #3
 8006990:	441a      	add	r2, r3
 8006992:	4b41      	ldr	r3, [pc, #260]	@ (8006a98 <ETS+0x850>)
 8006994:	443b      	add	r3, r7
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4413      	add	r3, r2
 800699a:	00db      	lsls	r3, r3, #3
 800699c:	440b      	add	r3, r1
 800699e:	e9d3 4500 	ldrd	r4, r5, [r3]
 80069a2:	4b3e      	ldr	r3, [pc, #248]	@ (8006a9c <ETS+0x854>)
 80069a4:	443b      	add	r3, r7
 80069a6:	f6a3 1168 	subw	r1, r3, #2408	@ 0x968
 80069aa:	4b3b      	ldr	r3, [pc, #236]	@ (8006a98 <ETS+0x850>)
 80069ac:	443b      	add	r3, r7
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	f240 4357 	movw	r3, #1111	@ 0x457
 80069b4:	fb03 f202 	mul.w	r2, r3, r2
 80069b8:	4b35      	ldr	r3, [pc, #212]	@ (8006a90 <ETS+0x848>)
 80069ba:	443b      	add	r3, r7
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4413      	add	r3, r2
 80069c0:	00db      	lsls	r3, r3, #3
 80069c2:	440b      	add	r3, r1
 80069c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c8:	4620      	mov	r0, r4
 80069ca:	4629      	mov	r1, r5
 80069cc:	f7f9 fe34 	bl	8000638 <__aeabi_dmul>
 80069d0:	4602      	mov	r2, r0
 80069d2:	460b      	mov	r3, r1
 80069d4:	4640      	mov	r0, r8
 80069d6:	4649      	mov	r1, r9
 80069d8:	f7f9 fc78 	bl	80002cc <__adddf3>
 80069dc:	4602      	mov	r2, r0
 80069de:	460b      	mov	r3, r1
 80069e0:	4614      	mov	r4, r2
 80069e2:	461d      	mov	r5, r3
 80069e4:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80069e8:	f6a3 11a8 	subw	r1, r3, #2472	@ 0x9a8
 80069ec:	4b27      	ldr	r3, [pc, #156]	@ (8006a8c <ETS+0x844>)
 80069ee:	443b      	add	r3, r7
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	f240 4357 	movw	r3, #1111	@ 0x457
 80069f6:	fb03 f202 	mul.w	r2, r3, r2
 80069fa:	4b25      	ldr	r3, [pc, #148]	@ (8006a90 <ETS+0x848>)
 80069fc:	443b      	add	r3, r7
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4413      	add	r3, r2
 8006a02:	00db      	lsls	r3, r3, #3
 8006a04:	440b      	add	r3, r1
 8006a06:	e9c3 4500 	strd	r4, r5, [r3]
            for(int k=0; k < N; k++)
 8006a0a:	4b23      	ldr	r3, [pc, #140]	@ (8006a98 <ETS+0x850>)
 8006a0c:	443b      	add	r3, r7
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	3301      	adds	r3, #1
 8006a12:	4a21      	ldr	r2, [pc, #132]	@ (8006a98 <ETS+0x850>)
 8006a14:	443a      	add	r2, r7
 8006a16:	6013      	str	r3, [r2, #0]
 8006a18:	4b1f      	ldr	r3, [pc, #124]	@ (8006a98 <ETS+0x850>)
 8006a1a:	443b      	add	r3, r7
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2b08      	cmp	r3, #8
 8006a20:	dd9a      	ble.n	8006958 <ETS+0x710>
        for(int j=0; j < tam; j++)
 8006a22:	4b1b      	ldr	r3, [pc, #108]	@ (8006a90 <ETS+0x848>)
 8006a24:	443b      	add	r3, r7
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	4a19      	ldr	r2, [pc, #100]	@ (8006a90 <ETS+0x848>)
 8006a2c:	443a      	add	r2, r7
 8006a2e:	6013      	str	r3, [r2, #0]
 8006a30:	4b17      	ldr	r3, [pc, #92]	@ (8006a90 <ETS+0x848>)
 8006a32:	443b      	add	r3, r7
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	f240 4356 	movw	r3, #1110	@ 0x456
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	f77f af58 	ble.w	80068f0 <ETS+0x6a8>
    for(int i=0; i < N; i++)
 8006a40:	4b12      	ldr	r3, [pc, #72]	@ (8006a8c <ETS+0x844>)
 8006a42:	443b      	add	r3, r7
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	3301      	adds	r3, #1
 8006a48:	4a10      	ldr	r2, [pc, #64]	@ (8006a8c <ETS+0x844>)
 8006a4a:	443a      	add	r2, r7
 8006a4c:	6013      	str	r3, [r2, #0]
 8006a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8006a8c <ETS+0x844>)
 8006a50:	443b      	add	r3, r7
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2b08      	cmp	r3, #8
 8006a56:	f77f af46 	ble.w	80068e6 <ETS+0x69e>
            }
        }
    }

    //Resultado da psedo-inversa
    for(int i=0; i < N; i++)
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	4a10      	ldr	r2, [pc, #64]	@ (8006aa0 <ETS+0x858>)
 8006a5e:	443a      	add	r2, r7
 8006a60:	6013      	str	r3, [r2, #0]
 8006a62:	e076      	b.n	8006b52 <ETS+0x90a>
    {
        X[i] = 0;
 8006a64:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006a68:	f5a3 621f 	sub.w	r2, r3, #2544	@ 0x9f0
 8006a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8006aa0 <ETS+0x858>)
 8006a6e:	443b      	add	r3, r7
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	00db      	lsls	r3, r3, #3
 8006a74:	18d1      	adds	r1, r2, r3
 8006a76:	f04f 0200 	mov.w	r2, #0
 8006a7a:	f04f 0300 	mov.w	r3, #0
 8006a7e:	e9c1 2300 	strd	r2, r3, [r1]
        for(int j=0; j < tam; j++)
 8006a82:	2300      	movs	r3, #0
 8006a84:	4a07      	ldr	r2, [pc, #28]	@ (8006aa4 <ETS+0x85c>)
 8006a86:	443a      	add	r2, r7
 8006a88:	6013      	str	r3, [r2, #0]
 8006a8a:	e054      	b.n	8006b36 <ETS+0x8ee>
 8006a8c:	00029a6c 	.word	0x00029a6c
 8006a90:	00029a68 	.word	0x00029a68
 8006a94:	00013a80 	.word	0x00013a80
 8006a98:	00029a64 	.word	0x00029a64
 8006a9c:	00016a80 	.word	0x00016a80
 8006aa0:	00029a60 	.word	0x00029a60
 8006aa4:	00029a5c 	.word	0x00029a5c
        {
            X[i] += mul_mat[i][j]*my_2[j];
 8006aa8:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006aac:	f5a3 621f 	sub.w	r2, r3, #2544	@ 0x9f0
 8006ab0:	4bb8      	ldr	r3, [pc, #736]	@ (8006d94 <ETS+0xb4c>)
 8006ab2:	443b      	add	r3, r7
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	00db      	lsls	r3, r3, #3
 8006ab8:	4413      	add	r3, r2
 8006aba:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006abe:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006ac2:	f6a3 11a8 	subw	r1, r3, #2472	@ 0x9a8
 8006ac6:	4bb3      	ldr	r3, [pc, #716]	@ (8006d94 <ETS+0xb4c>)
 8006ac8:	443b      	add	r3, r7
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	f240 4357 	movw	r3, #1111	@ 0x457
 8006ad0:	fb03 f202 	mul.w	r2, r3, r2
 8006ad4:	4bb0      	ldr	r3, [pc, #704]	@ (8006d98 <ETS+0xb50>)
 8006ad6:	443b      	add	r3, r7
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4413      	add	r3, r2
 8006adc:	00db      	lsls	r3, r3, #3
 8006ade:	440b      	add	r3, r1
 8006ae0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006ae4:	4bad      	ldr	r3, [pc, #692]	@ (8006d9c <ETS+0xb54>)
 8006ae6:	443b      	add	r3, r7
 8006ae8:	f5a3 6242 	sub.w	r2, r3, #3104	@ 0xc20
 8006aec:	4baa      	ldr	r3, [pc, #680]	@ (8006d98 <ETS+0xb50>)
 8006aee:	443b      	add	r3, r7
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	00db      	lsls	r3, r3, #3
 8006af4:	4413      	add	r3, r2
 8006af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afa:	f7f9 fd9d 	bl	8000638 <__aeabi_dmul>
 8006afe:	4602      	mov	r2, r0
 8006b00:	460b      	mov	r3, r1
 8006b02:	4620      	mov	r0, r4
 8006b04:	4629      	mov	r1, r5
 8006b06:	f7f9 fbe1 	bl	80002cc <__adddf3>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	4610      	mov	r0, r2
 8006b10:	4619      	mov	r1, r3
 8006b12:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006b16:	f5a3 621f 	sub.w	r2, r3, #2544	@ 0x9f0
 8006b1a:	4b9e      	ldr	r3, [pc, #632]	@ (8006d94 <ETS+0xb4c>)
 8006b1c:	443b      	add	r3, r7
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	00db      	lsls	r3, r3, #3
 8006b22:	4413      	add	r3, r2
 8006b24:	e9c3 0100 	strd	r0, r1, [r3]
        for(int j=0; j < tam; j++)
 8006b28:	4b9b      	ldr	r3, [pc, #620]	@ (8006d98 <ETS+0xb50>)
 8006b2a:	443b      	add	r3, r7
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	4a99      	ldr	r2, [pc, #612]	@ (8006d98 <ETS+0xb50>)
 8006b32:	443a      	add	r2, r7
 8006b34:	6013      	str	r3, [r2, #0]
 8006b36:	4b98      	ldr	r3, [pc, #608]	@ (8006d98 <ETS+0xb50>)
 8006b38:	443b      	add	r3, r7
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	f240 4356 	movw	r3, #1110	@ 0x456
 8006b40:	429a      	cmp	r2, r3
 8006b42:	ddb1      	ble.n	8006aa8 <ETS+0x860>
    for(int i=0; i < N; i++)
 8006b44:	4b93      	ldr	r3, [pc, #588]	@ (8006d94 <ETS+0xb4c>)
 8006b46:	443b      	add	r3, r7
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	4a91      	ldr	r2, [pc, #580]	@ (8006d94 <ETS+0xb4c>)
 8006b4e:	443a      	add	r2, r7
 8006b50:	6013      	str	r3, [r2, #0]
 8006b52:	4b90      	ldr	r3, [pc, #576]	@ (8006d94 <ETS+0xb4c>)
 8006b54:	443b      	add	r3, r7
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2b08      	cmp	r3, #8
 8006b5a:	dd83      	ble.n	8006a64 <ETS+0x81c>
        }
    }


    // Segundo passo, encontrando os parâmetros
    X1_2 = X[1]*X[1];
 8006b5c:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006b60:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006b64:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006b68:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006b6c:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006b70:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006b74:	f7f9 fd60 	bl	8000638 <__aeabi_dmul>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	4988      	ldr	r1, [pc, #544]	@ (8006da0 <ETS+0xb58>)
 8006b7e:	4439      	add	r1, r7
 8006b80:	e9c1 2300 	strd	r2, r3, [r1]
    X2_2 = X[2]*X[2];
 8006b84:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006b88:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006b8c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006b90:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006b94:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006b98:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006b9c:	f7f9 fd4c 	bl	8000638 <__aeabi_dmul>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	497f      	ldr	r1, [pc, #508]	@ (8006da4 <ETS+0xb5c>)
 8006ba6:	4439      	add	r1, r7
 8006ba8:	e9c1 2300 	strd	r2, r3, [r1]
    X3_2 = X[3]*X[3];
 8006bac:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006bb0:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006bb4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8006bb8:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006bbc:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006bc0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006bc4:	f7f9 fd38 	bl	8000638 <__aeabi_dmul>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	460b      	mov	r3, r1
 8006bcc:	4976      	ldr	r1, [pc, #472]	@ (8006da8 <ETS+0xb60>)
 8006bce:	4439      	add	r1, r7
 8006bd0:	e9c1 2300 	strd	r2, r3, [r1]
    X4_2 = X[4]*X[4];
 8006bd4:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006bd8:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006bdc:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8006be0:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006be4:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006be8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006bec:	f7f9 fd24 	bl	8000638 <__aeabi_dmul>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	496d      	ldr	r1, [pc, #436]	@ (8006dac <ETS+0xb64>)
 8006bf6:	4439      	add	r1, r7
 8006bf8:	e9c1 2300 	strd	r2, r3, [r1]
    X5_2 = X[5]*X[5];
 8006bfc:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006c00:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006c04:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8006c08:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006c0c:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006c10:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8006c14:	f7f9 fd10 	bl	8000638 <__aeabi_dmul>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	4964      	ldr	r1, [pc, #400]	@ (8006db0 <ETS+0xb68>)
 8006c1e:	4439      	add	r1, r7
 8006c20:	e9c1 2300 	strd	r2, r3, [r1]
    X6_2 = X[6]*X[6];
 8006c24:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006c28:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006c2c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8006c30:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006c34:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006c38:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006c3c:	f7f9 fcfc 	bl	8000638 <__aeabi_dmul>
 8006c40:	4602      	mov	r2, r0
 8006c42:	460b      	mov	r3, r1
 8006c44:	495b      	ldr	r1, [pc, #364]	@ (8006db4 <ETS+0xb6c>)
 8006c46:	4439      	add	r1, r7
 8006c48:	e9c1 2300 	strd	r2, r3, [r1]
    X7_2 = X[7]*X[7];
 8006c4c:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006c50:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006c54:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8006c58:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006c5c:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006c60:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006c64:	f7f9 fce8 	bl	8000638 <__aeabi_dmul>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	4952      	ldr	r1, [pc, #328]	@ (8006db8 <ETS+0xb70>)
 8006c6e:	4439      	add	r1, r7
 8006c70:	e9c1 2300 	strd	r2, r3, [r1]

    psi7 = 2*(X[4]*X1_2 - X[1]*X[2]*X[3] + X2_2 + X[0]*X3_2 - 4*X[0]*X[4]);
 8006c74:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006c78:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006c7c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8006c80:	4b47      	ldr	r3, [pc, #284]	@ (8006da0 <ETS+0xb58>)
 8006c82:	443b      	add	r3, r7
 8006c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c88:	f7f9 fcd6 	bl	8000638 <__aeabi_dmul>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	460b      	mov	r3, r1
 8006c90:	4614      	mov	r4, r2
 8006c92:	461d      	mov	r5, r3
 8006c94:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006c98:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006c9c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006ca0:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006ca4:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006ca8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006cac:	f7f9 fcc4 	bl	8000638 <__aeabi_dmul>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	4610      	mov	r0, r2
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006cbc:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006cc0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006cc4:	f7f9 fcb8 	bl	8000638 <__aeabi_dmul>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	460b      	mov	r3, r1
 8006ccc:	4620      	mov	r0, r4
 8006cce:	4629      	mov	r1, r5
 8006cd0:	f7f9 fafa 	bl	80002c8 <__aeabi_dsub>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	4610      	mov	r0, r2
 8006cda:	4619      	mov	r1, r3
 8006cdc:	4b31      	ldr	r3, [pc, #196]	@ (8006da4 <ETS+0xb5c>)
 8006cde:	443b      	add	r3, r7
 8006ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce4:	f7f9 faf2 	bl	80002cc <__adddf3>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	460b      	mov	r3, r1
 8006cec:	4614      	mov	r4, r2
 8006cee:	461d      	mov	r5, r3
 8006cf0:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006cf4:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006cf8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006cfc:	4b2a      	ldr	r3, [pc, #168]	@ (8006da8 <ETS+0xb60>)
 8006cfe:	443b      	add	r3, r7
 8006d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d04:	f7f9 fc98 	bl	8000638 <__aeabi_dmul>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	4629      	mov	r1, r5
 8006d10:	f7f9 fadc 	bl	80002cc <__adddf3>
 8006d14:	4602      	mov	r2, r0
 8006d16:	460b      	mov	r3, r1
 8006d18:	4614      	mov	r4, r2
 8006d1a:	461d      	mov	r5, r3
 8006d1c:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006d20:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006d24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006d28:	f04f 0200 	mov.w	r2, #0
 8006d2c:	4b23      	ldr	r3, [pc, #140]	@ (8006dbc <ETS+0xb74>)
 8006d2e:	f7f9 fc83 	bl	8000638 <__aeabi_dmul>
 8006d32:	4602      	mov	r2, r0
 8006d34:	460b      	mov	r3, r1
 8006d36:	4610      	mov	r0, r2
 8006d38:	4619      	mov	r1, r3
 8006d3a:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006d3e:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006d42:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d46:	f7f9 fc77 	bl	8000638 <__aeabi_dmul>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	4620      	mov	r0, r4
 8006d50:	4629      	mov	r1, r5
 8006d52:	f7f9 fab9 	bl	80002c8 <__aeabi_dsub>
 8006d56:	4602      	mov	r2, r0
 8006d58:	460b      	mov	r3, r1
 8006d5a:	4610      	mov	r0, r2
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	4602      	mov	r2, r0
 8006d60:	460b      	mov	r3, r1
 8006d62:	f7f9 fab3 	bl	80002cc <__adddf3>
 8006d66:	4602      	mov	r2, r0
 8006d68:	460b      	mov	r3, r1
 8006d6a:	4915      	ldr	r1, [pc, #84]	@ (8006dc0 <ETS+0xb78>)
 8006d6c:	4439      	add	r1, r7
 8006d6e:	e9c1 2300 	strd	r2, r3, [r1]
    bx = -(X3_2 * X[5] + 2*X[2]*X[7] - 4*X[4]*X[5] - X[1]*X[3]*X[7] + 2*X[1]*X[4]*X[6] - X[2]*X[3]*X[6]) / psi7;
 8006d72:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006d76:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006d7a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8006d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8006da8 <ETS+0xb60>)
 8006d80:	443b      	add	r3, r7
 8006d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d86:	f7f9 fc57 	bl	8000638 <__aeabi_dmul>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	4614      	mov	r4, r2
 8006d90:	e018      	b.n	8006dc4 <ETS+0xb7c>
 8006d92:	bf00      	nop
 8006d94:	00029a60 	.word	0x00029a60
 8006d98:	00029a5c 	.word	0x00029a5c
 8006d9c:	00014a80 	.word	0x00014a80
 8006da0:	000299c0 	.word	0x000299c0
 8006da4:	000299b8 	.word	0x000299b8
 8006da8:	000299b0 	.word	0x000299b0
 8006dac:	000299a8 	.word	0x000299a8
 8006db0:	000299a0 	.word	0x000299a0
 8006db4:	00029998 	.word	0x00029998
 8006db8:	00029990 	.word	0x00029990
 8006dbc:	40100000 	.word	0x40100000
 8006dc0:	00029a50 	.word	0x00029a50
 8006dc4:	461d      	mov	r5, r3
 8006dc6:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006dca:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006dce:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	f7f9 fa79 	bl	80002cc <__adddf3>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	460b      	mov	r3, r1
 8006dde:	4610      	mov	r0, r2
 8006de0:	4619      	mov	r1, r3
 8006de2:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006de6:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006dea:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006dee:	f7f9 fc23 	bl	8000638 <__aeabi_dmul>
 8006df2:	4602      	mov	r2, r0
 8006df4:	460b      	mov	r3, r1
 8006df6:	4620      	mov	r0, r4
 8006df8:	4629      	mov	r1, r5
 8006dfa:	f7f9 fa67 	bl	80002cc <__adddf3>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	460b      	mov	r3, r1
 8006e02:	4614      	mov	r4, r2
 8006e04:	461d      	mov	r5, r3
 8006e06:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006e0a:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006e0e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8006e12:	f04f 0200 	mov.w	r2, #0
 8006e16:	4bd1      	ldr	r3, [pc, #836]	@ (800715c <ETS+0xf14>)
 8006e18:	f7f9 fc0e 	bl	8000638 <__aeabi_dmul>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	460b      	mov	r3, r1
 8006e20:	4610      	mov	r0, r2
 8006e22:	4619      	mov	r1, r3
 8006e24:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006e28:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006e2c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8006e30:	f7f9 fc02 	bl	8000638 <__aeabi_dmul>
 8006e34:	4602      	mov	r2, r0
 8006e36:	460b      	mov	r3, r1
 8006e38:	4620      	mov	r0, r4
 8006e3a:	4629      	mov	r1, r5
 8006e3c:	f7f9 fa44 	bl	80002c8 <__aeabi_dsub>
 8006e40:	4602      	mov	r2, r0
 8006e42:	460b      	mov	r3, r1
 8006e44:	4614      	mov	r4, r2
 8006e46:	461d      	mov	r5, r3
 8006e48:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006e4c:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006e50:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006e54:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006e58:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006e5c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006e60:	f7f9 fbea 	bl	8000638 <__aeabi_dmul>
 8006e64:	4602      	mov	r2, r0
 8006e66:	460b      	mov	r3, r1
 8006e68:	4610      	mov	r0, r2
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006e70:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006e74:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006e78:	f7f9 fbde 	bl	8000638 <__aeabi_dmul>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
 8006e80:	4620      	mov	r0, r4
 8006e82:	4629      	mov	r1, r5
 8006e84:	f7f9 fa20 	bl	80002c8 <__aeabi_dsub>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	4614      	mov	r4, r2
 8006e8e:	461d      	mov	r5, r3
 8006e90:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006e94:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006e98:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	f7f9 fa14 	bl	80002cc <__adddf3>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	4610      	mov	r0, r2
 8006eaa:	4619      	mov	r1, r3
 8006eac:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006eb0:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006eb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006eb8:	f7f9 fbbe 	bl	8000638 <__aeabi_dmul>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	4610      	mov	r0, r2
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006ec8:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006ecc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006ed0:	f7f9 fbb2 	bl	8000638 <__aeabi_dmul>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	4620      	mov	r0, r4
 8006eda:	4629      	mov	r1, r5
 8006edc:	f7f9 f9f6 	bl	80002cc <__adddf3>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	4614      	mov	r4, r2
 8006ee6:	461d      	mov	r5, r3
 8006ee8:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006eec:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006ef0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006ef4:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006ef8:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006efc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006f00:	f7f9 fb9a 	bl	8000638 <__aeabi_dmul>
 8006f04:	4602      	mov	r2, r0
 8006f06:	460b      	mov	r3, r1
 8006f08:	4610      	mov	r0, r2
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006f10:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006f14:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006f18:	f7f9 fb8e 	bl	8000638 <__aeabi_dmul>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	460b      	mov	r3, r1
 8006f20:	4620      	mov	r0, r4
 8006f22:	4629      	mov	r1, r5
 8006f24:	f7f9 f9d0 	bl	80002c8 <__aeabi_dsub>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	67ba      	str	r2, [r7, #120]	@ 0x78
 8006f2e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8006f32:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f34:	4b8a      	ldr	r3, [pc, #552]	@ (8007160 <ETS+0xf18>)
 8006f36:	443b      	add	r3, r7
 8006f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8006f40:	f7f9 fca4 	bl	800088c <__aeabi_ddiv>
 8006f44:	4602      	mov	r2, r0
 8006f46:	460b      	mov	r3, r1
 8006f48:	4986      	ldr	r1, [pc, #536]	@ (8007164 <ETS+0xf1c>)
 8006f4a:	4439      	add	r1, r7
 8006f4c:	e9c1 2300 	strd	r2, r3, [r1]
    by = -(X2_2 * X[6] + 2*X[0]*X[3]*X[7] - 4*X[0]*X[4]*X[6] - X[1]*X[2]*X[7] + 2*X[1]*X[4]*X[5] - X[2]*X[3]*X[5]) / psi7;
 8006f50:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006f54:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006f58:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8006f5c:	4b82      	ldr	r3, [pc, #520]	@ (8007168 <ETS+0xf20>)
 8006f5e:	443b      	add	r3, r7
 8006f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f64:	f7f9 fb68 	bl	8000638 <__aeabi_dmul>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	4614      	mov	r4, r2
 8006f6e:	461d      	mov	r5, r3
 8006f70:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006f74:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006f78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	460b      	mov	r3, r1
 8006f80:	f7f9 f9a4 	bl	80002cc <__adddf3>
 8006f84:	4602      	mov	r2, r0
 8006f86:	460b      	mov	r3, r1
 8006f88:	4610      	mov	r0, r2
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006f90:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006f94:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006f98:	f7f9 fb4e 	bl	8000638 <__aeabi_dmul>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006fa8:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006fac:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006fb0:	f7f9 fb42 	bl	8000638 <__aeabi_dmul>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	4620      	mov	r0, r4
 8006fba:	4629      	mov	r1, r5
 8006fbc:	f7f9 f986 	bl	80002cc <__adddf3>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	4614      	mov	r4, r2
 8006fc6:	461d      	mov	r5, r3
 8006fc8:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006fcc:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006fd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006fd4:	f04f 0200 	mov.w	r2, #0
 8006fd8:	4b60      	ldr	r3, [pc, #384]	@ (800715c <ETS+0xf14>)
 8006fda:	f7f9 fb2d 	bl	8000638 <__aeabi_dmul>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	4610      	mov	r0, r2
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8006fea:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8006fee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ff2:	f7f9 fb21 	bl	8000638 <__aeabi_dmul>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	4610      	mov	r0, r2
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007002:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007006:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800700a:	f7f9 fb15 	bl	8000638 <__aeabi_dmul>
 800700e:	4602      	mov	r2, r0
 8007010:	460b      	mov	r3, r1
 8007012:	4620      	mov	r0, r4
 8007014:	4629      	mov	r1, r5
 8007016:	f7f9 f957 	bl	80002c8 <__aeabi_dsub>
 800701a:	4602      	mov	r2, r0
 800701c:	460b      	mov	r3, r1
 800701e:	4614      	mov	r4, r2
 8007020:	461d      	mov	r5, r3
 8007022:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007026:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 800702a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800702e:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007032:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007036:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800703a:	f7f9 fafd 	bl	8000638 <__aeabi_dmul>
 800703e:	4602      	mov	r2, r0
 8007040:	460b      	mov	r3, r1
 8007042:	4610      	mov	r0, r2
 8007044:	4619      	mov	r1, r3
 8007046:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800704a:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 800704e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007052:	f7f9 faf1 	bl	8000638 <__aeabi_dmul>
 8007056:	4602      	mov	r2, r0
 8007058:	460b      	mov	r3, r1
 800705a:	4620      	mov	r0, r4
 800705c:	4629      	mov	r1, r5
 800705e:	f7f9 f933 	bl	80002c8 <__aeabi_dsub>
 8007062:	4602      	mov	r2, r0
 8007064:	460b      	mov	r3, r1
 8007066:	4614      	mov	r4, r2
 8007068:	461d      	mov	r5, r3
 800706a:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800706e:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007072:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007076:	4602      	mov	r2, r0
 8007078:	460b      	mov	r3, r1
 800707a:	f7f9 f927 	bl	80002cc <__adddf3>
 800707e:	4602      	mov	r2, r0
 8007080:	460b      	mov	r3, r1
 8007082:	4610      	mov	r0, r2
 8007084:	4619      	mov	r1, r3
 8007086:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800708a:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 800708e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007092:	f7f9 fad1 	bl	8000638 <__aeabi_dmul>
 8007096:	4602      	mov	r2, r0
 8007098:	460b      	mov	r3, r1
 800709a:	4610      	mov	r0, r2
 800709c:	4619      	mov	r1, r3
 800709e:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80070a2:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80070a6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80070aa:	f7f9 fac5 	bl	8000638 <__aeabi_dmul>
 80070ae:	4602      	mov	r2, r0
 80070b0:	460b      	mov	r3, r1
 80070b2:	4620      	mov	r0, r4
 80070b4:	4629      	mov	r1, r5
 80070b6:	f7f9 f909 	bl	80002cc <__adddf3>
 80070ba:	4602      	mov	r2, r0
 80070bc:	460b      	mov	r3, r1
 80070be:	4614      	mov	r4, r2
 80070c0:	461d      	mov	r5, r3
 80070c2:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80070c6:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80070ca:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80070ce:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80070d2:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80070d6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80070da:	f7f9 faad 	bl	8000638 <__aeabi_dmul>
 80070de:	4602      	mov	r2, r0
 80070e0:	460b      	mov	r3, r1
 80070e2:	4610      	mov	r0, r2
 80070e4:	4619      	mov	r1, r3
 80070e6:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80070ea:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80070ee:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80070f2:	f7f9 faa1 	bl	8000638 <__aeabi_dmul>
 80070f6:	4602      	mov	r2, r0
 80070f8:	460b      	mov	r3, r1
 80070fa:	4620      	mov	r0, r4
 80070fc:	4629      	mov	r1, r5
 80070fe:	f7f9 f8e3 	bl	80002c8 <__aeabi_dsub>
 8007102:	4602      	mov	r2, r0
 8007104:	460b      	mov	r3, r1
 8007106:	673a      	str	r2, [r7, #112]	@ 0x70
 8007108:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800710c:	677b      	str	r3, [r7, #116]	@ 0x74
 800710e:	4b14      	ldr	r3, [pc, #80]	@ (8007160 <ETS+0xf18>)
 8007110:	443b      	add	r3, r7
 8007112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007116:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800711a:	f7f9 fbb7 	bl	800088c <__aeabi_ddiv>
 800711e:	4602      	mov	r2, r0
 8007120:	460b      	mov	r3, r1
 8007122:	4912      	ldr	r1, [pc, #72]	@ (800716c <ETS+0xf24>)
 8007124:	4439      	add	r1, r7
 8007126:	e9c1 2300 	strd	r2, r3, [r1]
    bz = -(X1_2*X[7] - 4*X[0]*X[7] + 2*X[2]*X[5] + 2*X[0]*X[3]*X[6] - X[1]*X[2]*X[6] - X[1]*X[3]*X[5]) / psi7;
 800712a:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800712e:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007132:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8007136:	4b0e      	ldr	r3, [pc, #56]	@ (8007170 <ETS+0xf28>)
 8007138:	443b      	add	r3, r7
 800713a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713e:	f7f9 fa7b 	bl	8000638 <__aeabi_dmul>
 8007142:	4602      	mov	r2, r0
 8007144:	460b      	mov	r3, r1
 8007146:	4614      	mov	r4, r2
 8007148:	461d      	mov	r5, r3
 800714a:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800714e:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007152:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007156:	f04f 0200 	mov.w	r2, #0
 800715a:	e00b      	b.n	8007174 <ETS+0xf2c>
 800715c:	40100000 	.word	0x40100000
 8007160:	00029a50 	.word	0x00029a50
 8007164:	00029a08 	.word	0x00029a08
 8007168:	000299b8 	.word	0x000299b8
 800716c:	00029a00 	.word	0x00029a00
 8007170:	000299c0 	.word	0x000299c0
 8007174:	4bd3      	ldr	r3, [pc, #844]	@ (80074c4 <ETS+0x127c>)
 8007176:	f7f9 fa5f 	bl	8000638 <__aeabi_dmul>
 800717a:	4602      	mov	r2, r0
 800717c:	460b      	mov	r3, r1
 800717e:	4610      	mov	r0, r2
 8007180:	4619      	mov	r1, r3
 8007182:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007186:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 800718a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800718e:	f7f9 fa53 	bl	8000638 <__aeabi_dmul>
 8007192:	4602      	mov	r2, r0
 8007194:	460b      	mov	r3, r1
 8007196:	4620      	mov	r0, r4
 8007198:	4629      	mov	r1, r5
 800719a:	f7f9 f895 	bl	80002c8 <__aeabi_dsub>
 800719e:	4602      	mov	r2, r0
 80071a0:	460b      	mov	r3, r1
 80071a2:	4614      	mov	r4, r2
 80071a4:	461d      	mov	r5, r3
 80071a6:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80071aa:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80071ae:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80071b2:	4602      	mov	r2, r0
 80071b4:	460b      	mov	r3, r1
 80071b6:	f7f9 f889 	bl	80002cc <__adddf3>
 80071ba:	4602      	mov	r2, r0
 80071bc:	460b      	mov	r3, r1
 80071be:	4610      	mov	r0, r2
 80071c0:	4619      	mov	r1, r3
 80071c2:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80071c6:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80071ca:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80071ce:	f7f9 fa33 	bl	8000638 <__aeabi_dmul>
 80071d2:	4602      	mov	r2, r0
 80071d4:	460b      	mov	r3, r1
 80071d6:	4620      	mov	r0, r4
 80071d8:	4629      	mov	r1, r5
 80071da:	f7f9 f877 	bl	80002cc <__adddf3>
 80071de:	4602      	mov	r2, r0
 80071e0:	460b      	mov	r3, r1
 80071e2:	4614      	mov	r4, r2
 80071e4:	461d      	mov	r5, r3
 80071e6:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80071ea:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80071ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80071f2:	4602      	mov	r2, r0
 80071f4:	460b      	mov	r3, r1
 80071f6:	f7f9 f869 	bl	80002cc <__adddf3>
 80071fa:	4602      	mov	r2, r0
 80071fc:	460b      	mov	r3, r1
 80071fe:	4610      	mov	r0, r2
 8007200:	4619      	mov	r1, r3
 8007202:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007206:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 800720a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800720e:	f7f9 fa13 	bl	8000638 <__aeabi_dmul>
 8007212:	4602      	mov	r2, r0
 8007214:	460b      	mov	r3, r1
 8007216:	4610      	mov	r0, r2
 8007218:	4619      	mov	r1, r3
 800721a:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800721e:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007222:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8007226:	f7f9 fa07 	bl	8000638 <__aeabi_dmul>
 800722a:	4602      	mov	r2, r0
 800722c:	460b      	mov	r3, r1
 800722e:	4620      	mov	r0, r4
 8007230:	4629      	mov	r1, r5
 8007232:	f7f9 f84b 	bl	80002cc <__adddf3>
 8007236:	4602      	mov	r2, r0
 8007238:	460b      	mov	r3, r1
 800723a:	4614      	mov	r4, r2
 800723c:	461d      	mov	r5, r3
 800723e:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007242:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007246:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800724a:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800724e:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007252:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007256:	f7f9 f9ef 	bl	8000638 <__aeabi_dmul>
 800725a:	4602      	mov	r2, r0
 800725c:	460b      	mov	r3, r1
 800725e:	4610      	mov	r0, r2
 8007260:	4619      	mov	r1, r3
 8007262:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007266:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 800726a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800726e:	f7f9 f9e3 	bl	8000638 <__aeabi_dmul>
 8007272:	4602      	mov	r2, r0
 8007274:	460b      	mov	r3, r1
 8007276:	4620      	mov	r0, r4
 8007278:	4629      	mov	r1, r5
 800727a:	f7f9 f825 	bl	80002c8 <__aeabi_dsub>
 800727e:	4602      	mov	r2, r0
 8007280:	460b      	mov	r3, r1
 8007282:	4614      	mov	r4, r2
 8007284:	461d      	mov	r5, r3
 8007286:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800728a:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 800728e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007292:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007296:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 800729a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800729e:	f7f9 f9cb 	bl	8000638 <__aeabi_dmul>
 80072a2:	4602      	mov	r2, r0
 80072a4:	460b      	mov	r3, r1
 80072a6:	4610      	mov	r0, r2
 80072a8:	4619      	mov	r1, r3
 80072aa:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80072ae:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80072b2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80072b6:	f7f9 f9bf 	bl	8000638 <__aeabi_dmul>
 80072ba:	4602      	mov	r2, r0
 80072bc:	460b      	mov	r3, r1
 80072be:	4620      	mov	r0, r4
 80072c0:	4629      	mov	r1, r5
 80072c2:	f7f9 f801 	bl	80002c8 <__aeabi_dsub>
 80072c6:	4602      	mov	r2, r0
 80072c8:	460b      	mov	r3, r1
 80072ca:	66ba      	str	r2, [r7, #104]	@ 0x68
 80072cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80072d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80072d2:	4b7d      	ldr	r3, [pc, #500]	@ (80074c8 <ETS+0x1280>)
 80072d4:	443b      	add	r3, r7
 80072d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80072de:	f7f9 fad5 	bl	800088c <__aeabi_ddiv>
 80072e2:	4602      	mov	r2, r0
 80072e4:	460b      	mov	r3, r1
 80072e6:	4979      	ldr	r1, [pc, #484]	@ (80074cc <ETS+0x1284>)
 80072e8:	4439      	add	r1, r7
 80072ea:	e9c1 2300 	strd	r2, r3, [r1]

    psi8 = -X1_2*X7_2 + 4*X[4]*X[8]*X1_2 - 4*X[8]*X[1]*X[2]*X[3] + 2*X[1]*X[2]*X[6]*X[7] + 2*X[1]*X[3]*X[5]*X[7] - 4*X[4]*X[1]*X[5]*X[6] - X2_2*X6_2 + 4*X[8]*X2_2 + 2*X[2]*X[3]*X[5]*X[6] - 4*X[2]*X[5]*X[7] - X3_2*X5_2 + 4*X[0]*X[8]*X3_2 + 4*X[4]*X5_2 + 4*X[0]*X[4]*X6_2 + 4*X[0]*X7_2 - 16*X[0]*X[4]*X[8] - 4*X[0]*X[3]*X[6]*X[7];
 80072ee:	4b78      	ldr	r3, [pc, #480]	@ (80074d0 <ETS+0x1288>)
 80072f0:	443b      	add	r3, r7
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80072f6:	4b77      	ldr	r3, [pc, #476]	@ (80074d4 <ETS+0x128c>)
 80072f8:	443b      	add	r3, r7
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007300:	667b      	str	r3, [r7, #100]	@ 0x64
 8007302:	4b75      	ldr	r3, [pc, #468]	@ (80074d8 <ETS+0x1290>)
 8007304:	443b      	add	r3, r7
 8007306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800730e:	f7f9 f993 	bl	8000638 <__aeabi_dmul>
 8007312:	4602      	mov	r2, r0
 8007314:	460b      	mov	r3, r1
 8007316:	4614      	mov	r4, r2
 8007318:	461d      	mov	r5, r3
 800731a:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800731e:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007322:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007326:	f04f 0200 	mov.w	r2, #0
 800732a:	4b66      	ldr	r3, [pc, #408]	@ (80074c4 <ETS+0x127c>)
 800732c:	f7f9 f984 	bl	8000638 <__aeabi_dmul>
 8007330:	4602      	mov	r2, r0
 8007332:	460b      	mov	r3, r1
 8007334:	4610      	mov	r0, r2
 8007336:	4619      	mov	r1, r3
 8007338:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800733c:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007340:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8007344:	f7f9 f978 	bl	8000638 <__aeabi_dmul>
 8007348:	4602      	mov	r2, r0
 800734a:	460b      	mov	r3, r1
 800734c:	4610      	mov	r0, r2
 800734e:	4619      	mov	r1, r3
 8007350:	4b5f      	ldr	r3, [pc, #380]	@ (80074d0 <ETS+0x1288>)
 8007352:	443b      	add	r3, r7
 8007354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007358:	f7f9 f96e 	bl	8000638 <__aeabi_dmul>
 800735c:	4602      	mov	r2, r0
 800735e:	460b      	mov	r3, r1
 8007360:	4620      	mov	r0, r4
 8007362:	4629      	mov	r1, r5
 8007364:	f7f8 ffb2 	bl	80002cc <__adddf3>
 8007368:	4602      	mov	r2, r0
 800736a:	460b      	mov	r3, r1
 800736c:	4614      	mov	r4, r2
 800736e:	461d      	mov	r5, r3
 8007370:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007374:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007378:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800737c:	f04f 0200 	mov.w	r2, #0
 8007380:	4b50      	ldr	r3, [pc, #320]	@ (80074c4 <ETS+0x127c>)
 8007382:	f7f9 f959 	bl	8000638 <__aeabi_dmul>
 8007386:	4602      	mov	r2, r0
 8007388:	460b      	mov	r3, r1
 800738a:	4610      	mov	r0, r2
 800738c:	4619      	mov	r1, r3
 800738e:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007392:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007396:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800739a:	f7f9 f94d 	bl	8000638 <__aeabi_dmul>
 800739e:	4602      	mov	r2, r0
 80073a0:	460b      	mov	r3, r1
 80073a2:	4610      	mov	r0, r2
 80073a4:	4619      	mov	r1, r3
 80073a6:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80073aa:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80073ae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80073b2:	f7f9 f941 	bl	8000638 <__aeabi_dmul>
 80073b6:	4602      	mov	r2, r0
 80073b8:	460b      	mov	r3, r1
 80073ba:	4610      	mov	r0, r2
 80073bc:	4619      	mov	r1, r3
 80073be:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80073c2:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80073c6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80073ca:	f7f9 f935 	bl	8000638 <__aeabi_dmul>
 80073ce:	4602      	mov	r2, r0
 80073d0:	460b      	mov	r3, r1
 80073d2:	4620      	mov	r0, r4
 80073d4:	4629      	mov	r1, r5
 80073d6:	f7f8 ff77 	bl	80002c8 <__aeabi_dsub>
 80073da:	4602      	mov	r2, r0
 80073dc:	460b      	mov	r3, r1
 80073de:	4614      	mov	r4, r2
 80073e0:	461d      	mov	r5, r3
 80073e2:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80073e6:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80073ea:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80073ee:	4602      	mov	r2, r0
 80073f0:	460b      	mov	r3, r1
 80073f2:	f7f8 ff6b 	bl	80002cc <__adddf3>
 80073f6:	4602      	mov	r2, r0
 80073f8:	460b      	mov	r3, r1
 80073fa:	4610      	mov	r0, r2
 80073fc:	4619      	mov	r1, r3
 80073fe:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007402:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007406:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800740a:	f7f9 f915 	bl	8000638 <__aeabi_dmul>
 800740e:	4602      	mov	r2, r0
 8007410:	460b      	mov	r3, r1
 8007412:	4610      	mov	r0, r2
 8007414:	4619      	mov	r1, r3
 8007416:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800741a:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 800741e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8007422:	f7f9 f909 	bl	8000638 <__aeabi_dmul>
 8007426:	4602      	mov	r2, r0
 8007428:	460b      	mov	r3, r1
 800742a:	4610      	mov	r0, r2
 800742c:	4619      	mov	r1, r3
 800742e:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007432:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007436:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800743a:	f7f9 f8fd 	bl	8000638 <__aeabi_dmul>
 800743e:	4602      	mov	r2, r0
 8007440:	460b      	mov	r3, r1
 8007442:	4620      	mov	r0, r4
 8007444:	4629      	mov	r1, r5
 8007446:	f7f8 ff41 	bl	80002cc <__adddf3>
 800744a:	4602      	mov	r2, r0
 800744c:	460b      	mov	r3, r1
 800744e:	4614      	mov	r4, r2
 8007450:	461d      	mov	r5, r3
 8007452:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007456:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 800745a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800745e:	4602      	mov	r2, r0
 8007460:	460b      	mov	r3, r1
 8007462:	f7f8 ff33 	bl	80002cc <__adddf3>
 8007466:	4602      	mov	r2, r0
 8007468:	460b      	mov	r3, r1
 800746a:	4610      	mov	r0, r2
 800746c:	4619      	mov	r1, r3
 800746e:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007472:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007476:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800747a:	f7f9 f8dd 	bl	8000638 <__aeabi_dmul>
 800747e:	4602      	mov	r2, r0
 8007480:	460b      	mov	r3, r1
 8007482:	4610      	mov	r0, r2
 8007484:	4619      	mov	r1, r3
 8007486:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800748a:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 800748e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8007492:	f7f9 f8d1 	bl	8000638 <__aeabi_dmul>
 8007496:	4602      	mov	r2, r0
 8007498:	460b      	mov	r3, r1
 800749a:	4610      	mov	r0, r2
 800749c:	4619      	mov	r1, r3
 800749e:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80074a2:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80074a6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80074aa:	f7f9 f8c5 	bl	8000638 <__aeabi_dmul>
 80074ae:	4602      	mov	r2, r0
 80074b0:	460b      	mov	r3, r1
 80074b2:	4620      	mov	r0, r4
 80074b4:	4629      	mov	r1, r5
 80074b6:	f7f8 ff09 	bl	80002cc <__adddf3>
 80074ba:	4602      	mov	r2, r0
 80074bc:	460b      	mov	r3, r1
 80074be:	4614      	mov	r4, r2
 80074c0:	461d      	mov	r5, r3
 80074c2:	e00b      	b.n	80074dc <ETS+0x1294>
 80074c4:	40100000 	.word	0x40100000
 80074c8:	00029a50 	.word	0x00029a50
 80074cc:	000299f8 	.word	0x000299f8
 80074d0:	000299c0 	.word	0x000299c0
 80074d4:	000299c4 	.word	0x000299c4
 80074d8:	00029990 	.word	0x00029990
 80074dc:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80074e0:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80074e4:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80074e8:	f04f 0200 	mov.w	r2, #0
 80074ec:	4bd3      	ldr	r3, [pc, #844]	@ (800783c <ETS+0x15f4>)
 80074ee:	f7f9 f8a3 	bl	8000638 <__aeabi_dmul>
 80074f2:	4602      	mov	r2, r0
 80074f4:	460b      	mov	r3, r1
 80074f6:	4610      	mov	r0, r2
 80074f8:	4619      	mov	r1, r3
 80074fa:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80074fe:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007502:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007506:	f7f9 f897 	bl	8000638 <__aeabi_dmul>
 800750a:	4602      	mov	r2, r0
 800750c:	460b      	mov	r3, r1
 800750e:	4610      	mov	r0, r2
 8007510:	4619      	mov	r1, r3
 8007512:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007516:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 800751a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800751e:	f7f9 f88b 	bl	8000638 <__aeabi_dmul>
 8007522:	4602      	mov	r2, r0
 8007524:	460b      	mov	r3, r1
 8007526:	4610      	mov	r0, r2
 8007528:	4619      	mov	r1, r3
 800752a:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800752e:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007532:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8007536:	f7f9 f87f 	bl	8000638 <__aeabi_dmul>
 800753a:	4602      	mov	r2, r0
 800753c:	460b      	mov	r3, r1
 800753e:	4620      	mov	r0, r4
 8007540:	4629      	mov	r1, r5
 8007542:	f7f8 fec1 	bl	80002c8 <__aeabi_dsub>
 8007546:	4602      	mov	r2, r0
 8007548:	460b      	mov	r3, r1
 800754a:	4614      	mov	r4, r2
 800754c:	461d      	mov	r5, r3
 800754e:	4bbc      	ldr	r3, [pc, #752]	@ (8007840 <ETS+0x15f8>)
 8007550:	443b      	add	r3, r7
 8007552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007556:	49bb      	ldr	r1, [pc, #748]	@ (8007844 <ETS+0x15fc>)
 8007558:	4439      	add	r1, r7
 800755a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800755e:	f7f9 f86b 	bl	8000638 <__aeabi_dmul>
 8007562:	4602      	mov	r2, r0
 8007564:	460b      	mov	r3, r1
 8007566:	4620      	mov	r0, r4
 8007568:	4629      	mov	r1, r5
 800756a:	f7f8 fead 	bl	80002c8 <__aeabi_dsub>
 800756e:	4602      	mov	r2, r0
 8007570:	460b      	mov	r3, r1
 8007572:	4614      	mov	r4, r2
 8007574:	461d      	mov	r5, r3
 8007576:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800757a:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 800757e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8007582:	f04f 0200 	mov.w	r2, #0
 8007586:	4bad      	ldr	r3, [pc, #692]	@ (800783c <ETS+0x15f4>)
 8007588:	f7f9 f856 	bl	8000638 <__aeabi_dmul>
 800758c:	4602      	mov	r2, r0
 800758e:	460b      	mov	r3, r1
 8007590:	4610      	mov	r0, r2
 8007592:	4619      	mov	r1, r3
 8007594:	4bab      	ldr	r3, [pc, #684]	@ (8007844 <ETS+0x15fc>)
 8007596:	443b      	add	r3, r7
 8007598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759c:	f7f9 f84c 	bl	8000638 <__aeabi_dmul>
 80075a0:	4602      	mov	r2, r0
 80075a2:	460b      	mov	r3, r1
 80075a4:	4620      	mov	r0, r4
 80075a6:	4629      	mov	r1, r5
 80075a8:	f7f8 fe90 	bl	80002cc <__adddf3>
 80075ac:	4602      	mov	r2, r0
 80075ae:	460b      	mov	r3, r1
 80075b0:	4614      	mov	r4, r2
 80075b2:	461d      	mov	r5, r3
 80075b4:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80075b8:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80075bc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80075c0:	4602      	mov	r2, r0
 80075c2:	460b      	mov	r3, r1
 80075c4:	f7f8 fe82 	bl	80002cc <__adddf3>
 80075c8:	4602      	mov	r2, r0
 80075ca:	460b      	mov	r3, r1
 80075cc:	4610      	mov	r0, r2
 80075ce:	4619      	mov	r1, r3
 80075d0:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80075d4:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80075d8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80075dc:	f7f9 f82c 	bl	8000638 <__aeabi_dmul>
 80075e0:	4602      	mov	r2, r0
 80075e2:	460b      	mov	r3, r1
 80075e4:	4610      	mov	r0, r2
 80075e6:	4619      	mov	r1, r3
 80075e8:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80075ec:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80075f0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80075f4:	f7f9 f820 	bl	8000638 <__aeabi_dmul>
 80075f8:	4602      	mov	r2, r0
 80075fa:	460b      	mov	r3, r1
 80075fc:	4610      	mov	r0, r2
 80075fe:	4619      	mov	r1, r3
 8007600:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007604:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007608:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800760c:	f7f9 f814 	bl	8000638 <__aeabi_dmul>
 8007610:	4602      	mov	r2, r0
 8007612:	460b      	mov	r3, r1
 8007614:	4620      	mov	r0, r4
 8007616:	4629      	mov	r1, r5
 8007618:	f7f8 fe58 	bl	80002cc <__adddf3>
 800761c:	4602      	mov	r2, r0
 800761e:	460b      	mov	r3, r1
 8007620:	4614      	mov	r4, r2
 8007622:	461d      	mov	r5, r3
 8007624:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007628:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 800762c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007630:	f04f 0200 	mov.w	r2, #0
 8007634:	4b81      	ldr	r3, [pc, #516]	@ (800783c <ETS+0x15f4>)
 8007636:	f7f8 ffff 	bl	8000638 <__aeabi_dmul>
 800763a:	4602      	mov	r2, r0
 800763c:	460b      	mov	r3, r1
 800763e:	4610      	mov	r0, r2
 8007640:	4619      	mov	r1, r3
 8007642:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007646:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 800764a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800764e:	f7f8 fff3 	bl	8000638 <__aeabi_dmul>
 8007652:	4602      	mov	r2, r0
 8007654:	460b      	mov	r3, r1
 8007656:	4610      	mov	r0, r2
 8007658:	4619      	mov	r1, r3
 800765a:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800765e:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007662:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007666:	f7f8 ffe7 	bl	8000638 <__aeabi_dmul>
 800766a:	4602      	mov	r2, r0
 800766c:	460b      	mov	r3, r1
 800766e:	4620      	mov	r0, r4
 8007670:	4629      	mov	r1, r5
 8007672:	f7f8 fe29 	bl	80002c8 <__aeabi_dsub>
 8007676:	4602      	mov	r2, r0
 8007678:	460b      	mov	r3, r1
 800767a:	4614      	mov	r4, r2
 800767c:	461d      	mov	r5, r3
 800767e:	4b72      	ldr	r3, [pc, #456]	@ (8007848 <ETS+0x1600>)
 8007680:	443b      	add	r3, r7
 8007682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007686:	4971      	ldr	r1, [pc, #452]	@ (800784c <ETS+0x1604>)
 8007688:	4439      	add	r1, r7
 800768a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800768e:	f7f8 ffd3 	bl	8000638 <__aeabi_dmul>
 8007692:	4602      	mov	r2, r0
 8007694:	460b      	mov	r3, r1
 8007696:	4620      	mov	r0, r4
 8007698:	4629      	mov	r1, r5
 800769a:	f7f8 fe15 	bl	80002c8 <__aeabi_dsub>
 800769e:	4602      	mov	r2, r0
 80076a0:	460b      	mov	r3, r1
 80076a2:	4614      	mov	r4, r2
 80076a4:	461d      	mov	r5, r3
 80076a6:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80076aa:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80076ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80076b2:	f04f 0200 	mov.w	r2, #0
 80076b6:	4b61      	ldr	r3, [pc, #388]	@ (800783c <ETS+0x15f4>)
 80076b8:	f7f8 ffbe 	bl	8000638 <__aeabi_dmul>
 80076bc:	4602      	mov	r2, r0
 80076be:	460b      	mov	r3, r1
 80076c0:	4610      	mov	r0, r2
 80076c2:	4619      	mov	r1, r3
 80076c4:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80076c8:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80076cc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80076d0:	f7f8 ffb2 	bl	8000638 <__aeabi_dmul>
 80076d4:	4602      	mov	r2, r0
 80076d6:	460b      	mov	r3, r1
 80076d8:	4610      	mov	r0, r2
 80076da:	4619      	mov	r1, r3
 80076dc:	4b5b      	ldr	r3, [pc, #364]	@ (800784c <ETS+0x1604>)
 80076de:	443b      	add	r3, r7
 80076e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e4:	f7f8 ffa8 	bl	8000638 <__aeabi_dmul>
 80076e8:	4602      	mov	r2, r0
 80076ea:	460b      	mov	r3, r1
 80076ec:	4620      	mov	r0, r4
 80076ee:	4629      	mov	r1, r5
 80076f0:	f7f8 fdec 	bl	80002cc <__adddf3>
 80076f4:	4602      	mov	r2, r0
 80076f6:	460b      	mov	r3, r1
 80076f8:	4614      	mov	r4, r2
 80076fa:	461d      	mov	r5, r3
 80076fc:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007700:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007704:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007708:	f04f 0200 	mov.w	r2, #0
 800770c:	4b4b      	ldr	r3, [pc, #300]	@ (800783c <ETS+0x15f4>)
 800770e:	f7f8 ff93 	bl	8000638 <__aeabi_dmul>
 8007712:	4602      	mov	r2, r0
 8007714:	460b      	mov	r3, r1
 8007716:	4610      	mov	r0, r2
 8007718:	4619      	mov	r1, r3
 800771a:	4b4b      	ldr	r3, [pc, #300]	@ (8007848 <ETS+0x1600>)
 800771c:	443b      	add	r3, r7
 800771e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007722:	f7f8 ff89 	bl	8000638 <__aeabi_dmul>
 8007726:	4602      	mov	r2, r0
 8007728:	460b      	mov	r3, r1
 800772a:	4620      	mov	r0, r4
 800772c:	4629      	mov	r1, r5
 800772e:	f7f8 fdcd 	bl	80002cc <__adddf3>
 8007732:	4602      	mov	r2, r0
 8007734:	460b      	mov	r3, r1
 8007736:	4614      	mov	r4, r2
 8007738:	461d      	mov	r5, r3
 800773a:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800773e:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007742:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007746:	f04f 0200 	mov.w	r2, #0
 800774a:	4b3c      	ldr	r3, [pc, #240]	@ (800783c <ETS+0x15f4>)
 800774c:	f7f8 ff74 	bl	8000638 <__aeabi_dmul>
 8007750:	4602      	mov	r2, r0
 8007752:	460b      	mov	r3, r1
 8007754:	4610      	mov	r0, r2
 8007756:	4619      	mov	r1, r3
 8007758:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800775c:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007760:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007764:	f7f8 ff68 	bl	8000638 <__aeabi_dmul>
 8007768:	4602      	mov	r2, r0
 800776a:	460b      	mov	r3, r1
 800776c:	4610      	mov	r0, r2
 800776e:	4619      	mov	r1, r3
 8007770:	4b33      	ldr	r3, [pc, #204]	@ (8007840 <ETS+0x15f8>)
 8007772:	443b      	add	r3, r7
 8007774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007778:	f7f8 ff5e 	bl	8000638 <__aeabi_dmul>
 800777c:	4602      	mov	r2, r0
 800777e:	460b      	mov	r3, r1
 8007780:	4620      	mov	r0, r4
 8007782:	4629      	mov	r1, r5
 8007784:	f7f8 fda2 	bl	80002cc <__adddf3>
 8007788:	4602      	mov	r2, r0
 800778a:	460b      	mov	r3, r1
 800778c:	4614      	mov	r4, r2
 800778e:	461d      	mov	r5, r3
 8007790:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007794:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007798:	e9d3 0100 	ldrd	r0, r1, [r3]
 800779c:	f04f 0200 	mov.w	r2, #0
 80077a0:	4b26      	ldr	r3, [pc, #152]	@ (800783c <ETS+0x15f4>)
 80077a2:	f7f8 ff49 	bl	8000638 <__aeabi_dmul>
 80077a6:	4602      	mov	r2, r0
 80077a8:	460b      	mov	r3, r1
 80077aa:	4610      	mov	r0, r2
 80077ac:	4619      	mov	r1, r3
 80077ae:	4b28      	ldr	r3, [pc, #160]	@ (8007850 <ETS+0x1608>)
 80077b0:	443b      	add	r3, r7
 80077b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b6:	f7f8 ff3f 	bl	8000638 <__aeabi_dmul>
 80077ba:	4602      	mov	r2, r0
 80077bc:	460b      	mov	r3, r1
 80077be:	4620      	mov	r0, r4
 80077c0:	4629      	mov	r1, r5
 80077c2:	f7f8 fd83 	bl	80002cc <__adddf3>
 80077c6:	4602      	mov	r2, r0
 80077c8:	460b      	mov	r3, r1
 80077ca:	4614      	mov	r4, r2
 80077cc:	461d      	mov	r5, r3
 80077ce:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80077d2:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80077d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80077da:	f04f 0200 	mov.w	r2, #0
 80077de:	4b1d      	ldr	r3, [pc, #116]	@ (8007854 <ETS+0x160c>)
 80077e0:	f7f8 ff2a 	bl	8000638 <__aeabi_dmul>
 80077e4:	4602      	mov	r2, r0
 80077e6:	460b      	mov	r3, r1
 80077e8:	4610      	mov	r0, r2
 80077ea:	4619      	mov	r1, r3
 80077ec:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80077f0:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80077f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80077f8:	f7f8 ff1e 	bl	8000638 <__aeabi_dmul>
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	4610      	mov	r0, r2
 8007802:	4619      	mov	r1, r3
 8007804:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007808:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 800780c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8007810:	f7f8 ff12 	bl	8000638 <__aeabi_dmul>
 8007814:	4602      	mov	r2, r0
 8007816:	460b      	mov	r3, r1
 8007818:	4620      	mov	r0, r4
 800781a:	4629      	mov	r1, r5
 800781c:	f7f8 fd54 	bl	80002c8 <__aeabi_dsub>
 8007820:	4602      	mov	r2, r0
 8007822:	460b      	mov	r3, r1
 8007824:	4614      	mov	r4, r2
 8007826:	461d      	mov	r5, r3
 8007828:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800782c:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007830:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007834:	f04f 0200 	mov.w	r2, #0
 8007838:	e00e      	b.n	8007858 <ETS+0x1610>
 800783a:	bf00      	nop
 800783c:	40100000 	.word	0x40100000
 8007840:	00029998 	.word	0x00029998
 8007844:	000299b8 	.word	0x000299b8
 8007848:	000299a0 	.word	0x000299a0
 800784c:	000299b0 	.word	0x000299b0
 8007850:	00029990 	.word	0x00029990
 8007854:	40300000 	.word	0x40300000
 8007858:	4bc5      	ldr	r3, [pc, #788]	@ (8007b70 <ETS+0x1928>)
 800785a:	f7f8 feed 	bl	8000638 <__aeabi_dmul>
 800785e:	4602      	mov	r2, r0
 8007860:	460b      	mov	r3, r1
 8007862:	4610      	mov	r0, r2
 8007864:	4619      	mov	r1, r3
 8007866:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800786a:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 800786e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007872:	f7f8 fee1 	bl	8000638 <__aeabi_dmul>
 8007876:	4602      	mov	r2, r0
 8007878:	460b      	mov	r3, r1
 800787a:	4610      	mov	r0, r2
 800787c:	4619      	mov	r1, r3
 800787e:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007882:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007886:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800788a:	f7f8 fed5 	bl	8000638 <__aeabi_dmul>
 800788e:	4602      	mov	r2, r0
 8007890:	460b      	mov	r3, r1
 8007892:	4610      	mov	r0, r2
 8007894:	4619      	mov	r1, r3
 8007896:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800789a:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 800789e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80078a2:	f7f8 fec9 	bl	8000638 <__aeabi_dmul>
 80078a6:	4602      	mov	r2, r0
 80078a8:	460b      	mov	r3, r1
 80078aa:	4620      	mov	r0, r4
 80078ac:	4629      	mov	r1, r5
 80078ae:	f7f8 fd0b 	bl	80002c8 <__aeabi_dsub>
 80078b2:	4602      	mov	r2, r0
 80078b4:	460b      	mov	r3, r1
 80078b6:	49af      	ldr	r1, [pc, #700]	@ (8007b74 <ETS+0x192c>)
 80078b8:	4439      	add	r1, r7
 80078ba:	e9c1 2300 	strd	r2, r3, [r1]

    divs =  2 * fabs(X[4])*fabs(X[4])*fabs(X[4]) * (X[4] * X1_2 - X[1] * X[2] * X[3] + X2_2 + X[0] * X3_2 - 4 * X[0] * X[4]);
 80078be:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80078c2:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80078c6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80078ca:	4692      	mov	sl, r2
 80078cc:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 80078d0:	4652      	mov	r2, sl
 80078d2:	465b      	mov	r3, fp
 80078d4:	4650      	mov	r0, sl
 80078d6:	4659      	mov	r1, fp
 80078d8:	f7f8 fcf8 	bl	80002cc <__adddf3>
 80078dc:	4602      	mov	r2, r0
 80078de:	460b      	mov	r3, r1
 80078e0:	4610      	mov	r0, r2
 80078e2:	4619      	mov	r1, r3
 80078e4:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80078e8:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80078ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80078f0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80078f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80078f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80078fc:	f7f8 fe9c 	bl	8000638 <__aeabi_dmul>
 8007900:	4602      	mov	r2, r0
 8007902:	460b      	mov	r3, r1
 8007904:	4610      	mov	r0, r2
 8007906:	4619      	mov	r1, r3
 8007908:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800790c:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007910:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007914:	653a      	str	r2, [r7, #80]	@ 0x50
 8007916:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800791a:	657b      	str	r3, [r7, #84]	@ 0x54
 800791c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007920:	f7f8 fe8a 	bl	8000638 <__aeabi_dmul>
 8007924:	4602      	mov	r2, r0
 8007926:	460b      	mov	r3, r1
 8007928:	4690      	mov	r8, r2
 800792a:	4699      	mov	r9, r3
 800792c:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007930:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007934:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007938:	4b8f      	ldr	r3, [pc, #572]	@ (8007b78 <ETS+0x1930>)
 800793a:	443b      	add	r3, r7
 800793c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007940:	f7f8 fe7a 	bl	8000638 <__aeabi_dmul>
 8007944:	4602      	mov	r2, r0
 8007946:	460b      	mov	r3, r1
 8007948:	4614      	mov	r4, r2
 800794a:	461d      	mov	r5, r3
 800794c:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007950:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007954:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007958:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800795c:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007960:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007964:	f7f8 fe68 	bl	8000638 <__aeabi_dmul>
 8007968:	4602      	mov	r2, r0
 800796a:	460b      	mov	r3, r1
 800796c:	4610      	mov	r0, r2
 800796e:	4619      	mov	r1, r3
 8007970:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007974:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007978:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800797c:	f7f8 fe5c 	bl	8000638 <__aeabi_dmul>
 8007980:	4602      	mov	r2, r0
 8007982:	460b      	mov	r3, r1
 8007984:	4620      	mov	r0, r4
 8007986:	4629      	mov	r1, r5
 8007988:	f7f8 fc9e 	bl	80002c8 <__aeabi_dsub>
 800798c:	4602      	mov	r2, r0
 800798e:	460b      	mov	r3, r1
 8007990:	4610      	mov	r0, r2
 8007992:	4619      	mov	r1, r3
 8007994:	4b79      	ldr	r3, [pc, #484]	@ (8007b7c <ETS+0x1934>)
 8007996:	443b      	add	r3, r7
 8007998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799c:	f7f8 fc96 	bl	80002cc <__adddf3>
 80079a0:	4602      	mov	r2, r0
 80079a2:	460b      	mov	r3, r1
 80079a4:	4614      	mov	r4, r2
 80079a6:	461d      	mov	r5, r3
 80079a8:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80079ac:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80079b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80079b4:	4b72      	ldr	r3, [pc, #456]	@ (8007b80 <ETS+0x1938>)
 80079b6:	443b      	add	r3, r7
 80079b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079bc:	f7f8 fe3c 	bl	8000638 <__aeabi_dmul>
 80079c0:	4602      	mov	r2, r0
 80079c2:	460b      	mov	r3, r1
 80079c4:	4620      	mov	r0, r4
 80079c6:	4629      	mov	r1, r5
 80079c8:	f7f8 fc80 	bl	80002cc <__adddf3>
 80079cc:	4602      	mov	r2, r0
 80079ce:	460b      	mov	r3, r1
 80079d0:	4614      	mov	r4, r2
 80079d2:	461d      	mov	r5, r3
 80079d4:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80079d8:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80079dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80079e0:	f04f 0200 	mov.w	r2, #0
 80079e4:	4b62      	ldr	r3, [pc, #392]	@ (8007b70 <ETS+0x1928>)
 80079e6:	f7f8 fe27 	bl	8000638 <__aeabi_dmul>
 80079ea:	4602      	mov	r2, r0
 80079ec:	460b      	mov	r3, r1
 80079ee:	4610      	mov	r0, r2
 80079f0:	4619      	mov	r1, r3
 80079f2:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80079f6:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80079fa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80079fe:	f7f8 fe1b 	bl	8000638 <__aeabi_dmul>
 8007a02:	4602      	mov	r2, r0
 8007a04:	460b      	mov	r3, r1
 8007a06:	4620      	mov	r0, r4
 8007a08:	4629      	mov	r1, r5
 8007a0a:	f7f8 fc5d 	bl	80002c8 <__aeabi_dsub>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	460b      	mov	r3, r1
 8007a12:	4640      	mov	r0, r8
 8007a14:	4649      	mov	r1, r9
 8007a16:	f7f8 fe0f 	bl	8000638 <__aeabi_dmul>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	4959      	ldr	r1, [pc, #356]	@ (8007b84 <ETS+0x193c>)
 8007a20:	4439      	add	r1, r7
 8007a22:	e9c1 2300 	strd	r2, r3, [r1]

    sx = -X4_2*X[4] * sqrt(psi8 * (-X3_2 + 4*X[4])) / (divs);
 8007a26:	4b58      	ldr	r3, [pc, #352]	@ (8007b88 <ETS+0x1940>)
 8007a28:	443b      	add	r3, r7
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a2e:	4b57      	ldr	r3, [pc, #348]	@ (8007b8c <ETS+0x1944>)
 8007a30:	443b      	add	r3, r7
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007a38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a3a:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007a3e:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007a42:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a46:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8007a4a:	f7f8 fdf5 	bl	8000638 <__aeabi_dmul>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	460b      	mov	r3, r1
 8007a52:	4614      	mov	r4, r2
 8007a54:	461d      	mov	r5, r3
 8007a56:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007a5a:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007a5e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007a62:	f04f 0200 	mov.w	r2, #0
 8007a66:	4b42      	ldr	r3, [pc, #264]	@ (8007b70 <ETS+0x1928>)
 8007a68:	f7f8 fde6 	bl	8000638 <__aeabi_dmul>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	460b      	mov	r3, r1
 8007a70:	4610      	mov	r0, r2
 8007a72:	4619      	mov	r1, r3
 8007a74:	4b42      	ldr	r3, [pc, #264]	@ (8007b80 <ETS+0x1938>)
 8007a76:	443b      	add	r3, r7
 8007a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7c:	f7f8 fc24 	bl	80002c8 <__aeabi_dsub>
 8007a80:	4602      	mov	r2, r0
 8007a82:	460b      	mov	r3, r1
 8007a84:	4610      	mov	r0, r2
 8007a86:	4619      	mov	r1, r3
 8007a88:	4b3a      	ldr	r3, [pc, #232]	@ (8007b74 <ETS+0x192c>)
 8007a8a:	443b      	add	r3, r7
 8007a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a90:	f7f8 fdd2 	bl	8000638 <__aeabi_dmul>
 8007a94:	4602      	mov	r2, r0
 8007a96:	460b      	mov	r3, r1
 8007a98:	ec43 2b17 	vmov	d7, r2, r3
 8007a9c:	eeb0 0a47 	vmov.f32	s0, s14
 8007aa0:	eef0 0a67 	vmov.f32	s1, s15
 8007aa4:	f00a ff32 	bl	801290c <sqrt>
 8007aa8:	ec53 2b10 	vmov	r2, r3, d0
 8007aac:	4620      	mov	r0, r4
 8007aae:	4629      	mov	r1, r5
 8007ab0:	f7f8 fdc2 	bl	8000638 <__aeabi_dmul>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	4610      	mov	r0, r2
 8007aba:	4619      	mov	r1, r3
 8007abc:	4b31      	ldr	r3, [pc, #196]	@ (8007b84 <ETS+0x193c>)
 8007abe:	443b      	add	r3, r7
 8007ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac4:	f7f8 fee2 	bl	800088c <__aeabi_ddiv>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	460b      	mov	r3, r1
 8007acc:	4930      	ldr	r1, [pc, #192]	@ (8007b90 <ETS+0x1948>)
 8007ace:	4439      	add	r1, r7
 8007ad0:	e9c1 2300 	strd	r2, r3, [r1]
    sy = -X4_2*X[4] * sqrt(psi8 * (-X2_2 + 4*X[0]*X[4])) / (divs);
 8007ad4:	4b2c      	ldr	r3, [pc, #176]	@ (8007b88 <ETS+0x1940>)
 8007ad6:	443b      	add	r3, r7
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	643b      	str	r3, [r7, #64]	@ 0x40
 8007adc:	4b2b      	ldr	r3, [pc, #172]	@ (8007b8c <ETS+0x1944>)
 8007ade:	443b      	add	r3, r7
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007ae6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ae8:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007aec:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007af0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007af4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8007af8:	f7f8 fd9e 	bl	8000638 <__aeabi_dmul>
 8007afc:	4602      	mov	r2, r0
 8007afe:	460b      	mov	r3, r1
 8007b00:	4614      	mov	r4, r2
 8007b02:	461d      	mov	r5, r3
 8007b04:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007b08:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007b0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b10:	f04f 0200 	mov.w	r2, #0
 8007b14:	4b16      	ldr	r3, [pc, #88]	@ (8007b70 <ETS+0x1928>)
 8007b16:	f7f8 fd8f 	bl	8000638 <__aeabi_dmul>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	4610      	mov	r0, r2
 8007b20:	4619      	mov	r1, r3
 8007b22:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007b26:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007b2a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b2e:	f7f8 fd83 	bl	8000638 <__aeabi_dmul>
 8007b32:	4602      	mov	r2, r0
 8007b34:	460b      	mov	r3, r1
 8007b36:	4610      	mov	r0, r2
 8007b38:	4619      	mov	r1, r3
 8007b3a:	4b10      	ldr	r3, [pc, #64]	@ (8007b7c <ETS+0x1934>)
 8007b3c:	443b      	add	r3, r7
 8007b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b42:	f7f8 fbc1 	bl	80002c8 <__aeabi_dsub>
 8007b46:	4602      	mov	r2, r0
 8007b48:	460b      	mov	r3, r1
 8007b4a:	4610      	mov	r0, r2
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	4b09      	ldr	r3, [pc, #36]	@ (8007b74 <ETS+0x192c>)
 8007b50:	443b      	add	r3, r7
 8007b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b56:	f7f8 fd6f 	bl	8000638 <__aeabi_dmul>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	ec43 2b17 	vmov	d7, r2, r3
 8007b62:	eeb0 0a47 	vmov.f32	s0, s14
 8007b66:	eef0 0a67 	vmov.f32	s1, s15
 8007b6a:	f00a fecf 	bl	801290c <sqrt>
 8007b6e:	e011      	b.n	8007b94 <ETS+0x194c>
 8007b70:	40100000 	.word	0x40100000
 8007b74:	00029a48 	.word	0x00029a48
 8007b78:	000299c0 	.word	0x000299c0
 8007b7c:	000299b8 	.word	0x000299b8
 8007b80:	000299b0 	.word	0x000299b0
 8007b84:	00029a40 	.word	0x00029a40
 8007b88:	000299a8 	.word	0x000299a8
 8007b8c:	000299ac 	.word	0x000299ac
 8007b90:	000299f0 	.word	0x000299f0
 8007b94:	ec53 2b10 	vmov	r2, r3, d0
 8007b98:	4620      	mov	r0, r4
 8007b9a:	4629      	mov	r1, r5
 8007b9c:	f7f8 fd4c 	bl	8000638 <__aeabi_dmul>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	4610      	mov	r0, r2
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	4bc5      	ldr	r3, [pc, #788]	@ (8007ec0 <ETS+0x1c78>)
 8007baa:	443b      	add	r3, r7
 8007bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb0:	f7f8 fe6c 	bl	800088c <__aeabi_ddiv>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	49c2      	ldr	r1, [pc, #776]	@ (8007ec4 <ETS+0x1c7c>)
 8007bba:	4439      	add	r1, r7
 8007bbc:	e9c1 2300 	strd	r2, r3, [r1]
    sz = -X4_2*X[4] * sqrt(psi8 * (-X1_2 + 4*X[0])) / (divs);
 8007bc0:	4bc1      	ldr	r3, [pc, #772]	@ (8007ec8 <ETS+0x1c80>)
 8007bc2:	443b      	add	r3, r7
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007bc8:	4bc0      	ldr	r3, [pc, #768]	@ (8007ecc <ETS+0x1c84>)
 8007bca:	443b      	add	r3, r7
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bd4:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007bd8:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007bdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007be0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8007be4:	f7f8 fd28 	bl	8000638 <__aeabi_dmul>
 8007be8:	4602      	mov	r2, r0
 8007bea:	460b      	mov	r3, r1
 8007bec:	4614      	mov	r4, r2
 8007bee:	461d      	mov	r5, r3
 8007bf0:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007bf4:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007bf8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007bfc:	f04f 0200 	mov.w	r2, #0
 8007c00:	4bb3      	ldr	r3, [pc, #716]	@ (8007ed0 <ETS+0x1c88>)
 8007c02:	f7f8 fd19 	bl	8000638 <__aeabi_dmul>
 8007c06:	4602      	mov	r2, r0
 8007c08:	460b      	mov	r3, r1
 8007c0a:	4610      	mov	r0, r2
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	4bb1      	ldr	r3, [pc, #708]	@ (8007ed4 <ETS+0x1c8c>)
 8007c10:	443b      	add	r3, r7
 8007c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c16:	f7f8 fb57 	bl	80002c8 <__aeabi_dsub>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	4610      	mov	r0, r2
 8007c20:	4619      	mov	r1, r3
 8007c22:	4bad      	ldr	r3, [pc, #692]	@ (8007ed8 <ETS+0x1c90>)
 8007c24:	443b      	add	r3, r7
 8007c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2a:	f7f8 fd05 	bl	8000638 <__aeabi_dmul>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	460b      	mov	r3, r1
 8007c32:	ec43 2b17 	vmov	d7, r2, r3
 8007c36:	eeb0 0a47 	vmov.f32	s0, s14
 8007c3a:	eef0 0a67 	vmov.f32	s1, s15
 8007c3e:	f00a fe65 	bl	801290c <sqrt>
 8007c42:	ec53 2b10 	vmov	r2, r3, d0
 8007c46:	4620      	mov	r0, r4
 8007c48:	4629      	mov	r1, r5
 8007c4a:	f7f8 fcf5 	bl	8000638 <__aeabi_dmul>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	460b      	mov	r3, r1
 8007c52:	4610      	mov	r0, r2
 8007c54:	4619      	mov	r1, r3
 8007c56:	4b9a      	ldr	r3, [pc, #616]	@ (8007ec0 <ETS+0x1c78>)
 8007c58:	443b      	add	r3, r7
 8007c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5e:	f7f8 fe15 	bl	800088c <__aeabi_ddiv>
 8007c62:	4602      	mov	r2, r0
 8007c64:	460b      	mov	r3, r1
 8007c66:	499d      	ldr	r1, [pc, #628]	@ (8007edc <ETS+0x1c94>)
 8007c68:	4439      	add	r1, r7
 8007c6a:	e9c1 2300 	strd	r2, r3, [r1]

    rho = (2 * X[1]*X[4] - X[2]*X[3]) / (2*X4_2 * sqrt(-(X[4]*X1_2 - X[1]*X[2]*X[3] + X2_2 + X[0]*X3_2 - 4*X[0]*X[4]) / (X4_2*X[4])));
 8007c6e:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007c72:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007c76:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	f7f8 fb25 	bl	80002cc <__adddf3>
 8007c82:	4602      	mov	r2, r0
 8007c84:	460b      	mov	r3, r1
 8007c86:	4610      	mov	r0, r2
 8007c88:	4619      	mov	r1, r3
 8007c8a:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007c8e:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007c92:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007c96:	f7f8 fccf 	bl	8000638 <__aeabi_dmul>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	4614      	mov	r4, r2
 8007ca0:	461d      	mov	r5, r3
 8007ca2:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007ca6:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007caa:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007cae:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007cb2:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007cb6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007cba:	f7f8 fcbd 	bl	8000638 <__aeabi_dmul>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	4629      	mov	r1, r5
 8007cc6:	f7f8 faff 	bl	80002c8 <__aeabi_dsub>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	460b      	mov	r3, r1
 8007cce:	4692      	mov	sl, r2
 8007cd0:	469b      	mov	fp, r3
 8007cd2:	4b7d      	ldr	r3, [pc, #500]	@ (8007ec8 <ETS+0x1c80>)
 8007cd4:	443b      	add	r3, r7
 8007cd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007cda:	4602      	mov	r2, r0
 8007cdc:	460b      	mov	r3, r1
 8007cde:	f7f8 faf5 	bl	80002cc <__adddf3>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	4690      	mov	r8, r2
 8007ce8:	4699      	mov	r9, r3
 8007cea:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007cee:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007cf2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007cf6:	4b77      	ldr	r3, [pc, #476]	@ (8007ed4 <ETS+0x1c8c>)
 8007cf8:	443b      	add	r3, r7
 8007cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfe:	f7f8 fc9b 	bl	8000638 <__aeabi_dmul>
 8007d02:	4602      	mov	r2, r0
 8007d04:	460b      	mov	r3, r1
 8007d06:	4614      	mov	r4, r2
 8007d08:	461d      	mov	r5, r3
 8007d0a:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007d0e:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007d12:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007d16:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007d1a:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007d1e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007d22:	f7f8 fc89 	bl	8000638 <__aeabi_dmul>
 8007d26:	4602      	mov	r2, r0
 8007d28:	460b      	mov	r3, r1
 8007d2a:	4610      	mov	r0, r2
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007d32:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007d36:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007d3a:	f7f8 fc7d 	bl	8000638 <__aeabi_dmul>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	460b      	mov	r3, r1
 8007d42:	4620      	mov	r0, r4
 8007d44:	4629      	mov	r1, r5
 8007d46:	f7f8 fabf 	bl	80002c8 <__aeabi_dsub>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	4610      	mov	r0, r2
 8007d50:	4619      	mov	r1, r3
 8007d52:	4b63      	ldr	r3, [pc, #396]	@ (8007ee0 <ETS+0x1c98>)
 8007d54:	443b      	add	r3, r7
 8007d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5a:	f7f8 fab7 	bl	80002cc <__adddf3>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	460b      	mov	r3, r1
 8007d62:	4614      	mov	r4, r2
 8007d64:	461d      	mov	r5, r3
 8007d66:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007d6a:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007d6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d72:	4b5c      	ldr	r3, [pc, #368]	@ (8007ee4 <ETS+0x1c9c>)
 8007d74:	443b      	add	r3, r7
 8007d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7a:	f7f8 fc5d 	bl	8000638 <__aeabi_dmul>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	460b      	mov	r3, r1
 8007d82:	4620      	mov	r0, r4
 8007d84:	4629      	mov	r1, r5
 8007d86:	f7f8 faa1 	bl	80002cc <__adddf3>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	4614      	mov	r4, r2
 8007d90:	461d      	mov	r5, r3
 8007d92:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007d96:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007d9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d9e:	f04f 0200 	mov.w	r2, #0
 8007da2:	4b4b      	ldr	r3, [pc, #300]	@ (8007ed0 <ETS+0x1c88>)
 8007da4:	f7f8 fc48 	bl	8000638 <__aeabi_dmul>
 8007da8:	4602      	mov	r2, r0
 8007daa:	460b      	mov	r3, r1
 8007dac:	4610      	mov	r0, r2
 8007dae:	4619      	mov	r1, r3
 8007db0:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007db4:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007db8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007dbc:	f7f8 fc3c 	bl	8000638 <__aeabi_dmul>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	f7f8 fa7e 	bl	80002c8 <__aeabi_dsub>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	633a      	str	r2, [r7, #48]	@ 0x30
 8007dd2:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007dd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dd8:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007ddc:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007de0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007de4:	4b38      	ldr	r3, [pc, #224]	@ (8007ec8 <ETS+0x1c80>)
 8007de6:	443b      	add	r3, r7
 8007de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dec:	f7f8 fc24 	bl	8000638 <__aeabi_dmul>
 8007df0:	4602      	mov	r2, r0
 8007df2:	460b      	mov	r3, r1
 8007df4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8007df8:	f7f8 fd48 	bl	800088c <__aeabi_ddiv>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	460b      	mov	r3, r1
 8007e00:	ec43 2b17 	vmov	d7, r2, r3
 8007e04:	eeb0 0a47 	vmov.f32	s0, s14
 8007e08:	eef0 0a67 	vmov.f32	s1, s15
 8007e0c:	f00a fd7e 	bl	801290c <sqrt>
 8007e10:	ec53 2b10 	vmov	r2, r3, d0
 8007e14:	4640      	mov	r0, r8
 8007e16:	4649      	mov	r1, r9
 8007e18:	f7f8 fc0e 	bl	8000638 <__aeabi_dmul>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	460b      	mov	r3, r1
 8007e20:	4650      	mov	r0, sl
 8007e22:	4659      	mov	r1, fp
 8007e24:	f7f8 fd32 	bl	800088c <__aeabi_ddiv>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	492e      	ldr	r1, [pc, #184]	@ (8007ee8 <ETS+0x1ca0>)
 8007e2e:	4439      	add	r1, r7
 8007e30:	e9c1 2300 	strd	r2, r3, [r1]
    rho = -atan(rho);
 8007e34:	4b2c      	ldr	r3, [pc, #176]	@ (8007ee8 <ETS+0x1ca0>)
 8007e36:	443b      	add	r3, r7
 8007e38:	ed93 0b00 	vldr	d0, [r3]
 8007e3c:	f00a fd94 	bl	8012968 <atan>
 8007e40:	ec51 0b10 	vmov	r0, r1, d0
 8007e44:	4603      	mov	r3, r0
 8007e46:	4a28      	ldr	r2, [pc, #160]	@ (8007ee8 <ETS+0x1ca0>)
 8007e48:	443a      	add	r2, r7
 8007e4a:	6013      	str	r3, [r2, #0]
 8007e4c:	f081 4300 	eor.w	r3, r1, #2147483648	@ 0x80000000
 8007e50:	4a26      	ldr	r2, [pc, #152]	@ (8007eec <ETS+0x1ca4>)
 8007e52:	443a      	add	r2, r7
 8007e54:	6013      	str	r3, [r2, #0]
    lambida = -atan((X[3] / X[4]) * sqrt(-(X4_2 * (X[4]*X1_2 - X[1]*X[2]*X[3] + X2_2 - 4*X[0]*X[4]) / (2*X1_2*X3_2*X[4] - 4* X1_2 * X4_2 - 4*X1_2 * X4_2 - X[1]*X[2]*X3_2*X[3] + X2_2 * X3_2 + X[0]* X3_2*X3_2 - 8*X[0]*X3_2*X[4] + 16*X[0]*X4_2))));
 8007e56:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007e5a:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007e5e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007e62:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007e66:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007e6a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e6e:	f7f8 fd0d 	bl	800088c <__aeabi_ddiv>
 8007e72:	4602      	mov	r2, r0
 8007e74:	460b      	mov	r3, r1
 8007e76:	4692      	mov	sl, r2
 8007e78:	469b      	mov	fp, r3
 8007e7a:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007e7e:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007e82:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007e86:	4b13      	ldr	r3, [pc, #76]	@ (8007ed4 <ETS+0x1c8c>)
 8007e88:	443b      	add	r3, r7
 8007e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8e:	f7f8 fbd3 	bl	8000638 <__aeabi_dmul>
 8007e92:	4602      	mov	r2, r0
 8007e94:	460b      	mov	r3, r1
 8007e96:	4614      	mov	r4, r2
 8007e98:	461d      	mov	r5, r3
 8007e9a:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007e9e:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007ea2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007ea6:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007eaa:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007eae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007eb2:	f7f8 fbc1 	bl	8000638 <__aeabi_dmul>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	460b      	mov	r3, r1
 8007eba:	4610      	mov	r0, r2
 8007ebc:	e018      	b.n	8007ef0 <ETS+0x1ca8>
 8007ebe:	bf00      	nop
 8007ec0:	00029a40 	.word	0x00029a40
 8007ec4:	000299e8 	.word	0x000299e8
 8007ec8:	000299a8 	.word	0x000299a8
 8007ecc:	000299ac 	.word	0x000299ac
 8007ed0:	40100000 	.word	0x40100000
 8007ed4:	000299c0 	.word	0x000299c0
 8007ed8:	00029a48 	.word	0x00029a48
 8007edc:	000299e0 	.word	0x000299e0
 8007ee0:	000299b8 	.word	0x000299b8
 8007ee4:	000299b0 	.word	0x000299b0
 8007ee8:	000299d8 	.word	0x000299d8
 8007eec:	000299dc 	.word	0x000299dc
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007ef6:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007efa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007efe:	f7f8 fb9b 	bl	8000638 <__aeabi_dmul>
 8007f02:	4602      	mov	r2, r0
 8007f04:	460b      	mov	r3, r1
 8007f06:	4620      	mov	r0, r4
 8007f08:	4629      	mov	r1, r5
 8007f0a:	f7f8 f9dd 	bl	80002c8 <__aeabi_dsub>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	460b      	mov	r3, r1
 8007f12:	4610      	mov	r0, r2
 8007f14:	4619      	mov	r1, r3
 8007f16:	4bc6      	ldr	r3, [pc, #792]	@ (8008230 <ETS+0x1fe8>)
 8007f18:	443b      	add	r3, r7
 8007f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1e:	f7f8 f9d5 	bl	80002cc <__adddf3>
 8007f22:	4602      	mov	r2, r0
 8007f24:	460b      	mov	r3, r1
 8007f26:	4614      	mov	r4, r2
 8007f28:	461d      	mov	r5, r3
 8007f2a:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007f2e:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007f32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f36:	f04f 0200 	mov.w	r2, #0
 8007f3a:	4bbe      	ldr	r3, [pc, #760]	@ (8008234 <ETS+0x1fec>)
 8007f3c:	f7f8 fb7c 	bl	8000638 <__aeabi_dmul>
 8007f40:	4602      	mov	r2, r0
 8007f42:	460b      	mov	r3, r1
 8007f44:	4610      	mov	r0, r2
 8007f46:	4619      	mov	r1, r3
 8007f48:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007f4c:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007f50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f54:	f7f8 fb70 	bl	8000638 <__aeabi_dmul>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	4629      	mov	r1, r5
 8007f60:	f7f8 f9b2 	bl	80002c8 <__aeabi_dsub>
 8007f64:	4602      	mov	r2, r0
 8007f66:	460b      	mov	r3, r1
 8007f68:	4610      	mov	r0, r2
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	4bb2      	ldr	r3, [pc, #712]	@ (8008238 <ETS+0x1ff0>)
 8007f6e:	443b      	add	r3, r7
 8007f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f74:	f7f8 fb60 	bl	8000638 <__aeabi_dmul>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	4690      	mov	r8, r2
 8007f7e:	4699      	mov	r9, r3
 8007f80:	4bae      	ldr	r3, [pc, #696]	@ (800823c <ETS+0x1ff4>)
 8007f82:	443b      	add	r3, r7
 8007f84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f88:	4602      	mov	r2, r0
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	f7f8 f99e 	bl	80002cc <__adddf3>
 8007f90:	4602      	mov	r2, r0
 8007f92:	460b      	mov	r3, r1
 8007f94:	4610      	mov	r0, r2
 8007f96:	4619      	mov	r1, r3
 8007f98:	4ba9      	ldr	r3, [pc, #676]	@ (8008240 <ETS+0x1ff8>)
 8007f9a:	443b      	add	r3, r7
 8007f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa0:	f7f8 fb4a 	bl	8000638 <__aeabi_dmul>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	4610      	mov	r0, r2
 8007faa:	4619      	mov	r1, r3
 8007fac:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8007fb0:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8007fb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007fb8:	f7f8 fb3e 	bl	8000638 <__aeabi_dmul>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	4614      	mov	r4, r2
 8007fc2:	461d      	mov	r5, r3
 8007fc4:	f04f 0200 	mov.w	r2, #0
 8007fc8:	4b9a      	ldr	r3, [pc, #616]	@ (8008234 <ETS+0x1fec>)
 8007fca:	499c      	ldr	r1, [pc, #624]	@ (800823c <ETS+0x1ff4>)
 8007fcc:	4439      	add	r1, r7
 8007fce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fd2:	f7f8 fb31 	bl	8000638 <__aeabi_dmul>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	460b      	mov	r3, r1
 8007fda:	4610      	mov	r0, r2
 8007fdc:	4619      	mov	r1, r3
 8007fde:	4b96      	ldr	r3, [pc, #600]	@ (8008238 <ETS+0x1ff0>)
 8007fe0:	443b      	add	r3, r7
 8007fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe6:	f7f8 fb27 	bl	8000638 <__aeabi_dmul>
 8007fea:	4602      	mov	r2, r0
 8007fec:	460b      	mov	r3, r1
 8007fee:	4620      	mov	r0, r4
 8007ff0:	4629      	mov	r1, r5
 8007ff2:	f7f8 f969 	bl	80002c8 <__aeabi_dsub>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	4614      	mov	r4, r2
 8007ffc:	461d      	mov	r5, r3
 8007ffe:	f04f 0200 	mov.w	r2, #0
 8008002:	4b8c      	ldr	r3, [pc, #560]	@ (8008234 <ETS+0x1fec>)
 8008004:	498d      	ldr	r1, [pc, #564]	@ (800823c <ETS+0x1ff4>)
 8008006:	4439      	add	r1, r7
 8008008:	e9d1 0100 	ldrd	r0, r1, [r1]
 800800c:	f7f8 fb14 	bl	8000638 <__aeabi_dmul>
 8008010:	4602      	mov	r2, r0
 8008012:	460b      	mov	r3, r1
 8008014:	4610      	mov	r0, r2
 8008016:	4619      	mov	r1, r3
 8008018:	4b87      	ldr	r3, [pc, #540]	@ (8008238 <ETS+0x1ff0>)
 800801a:	443b      	add	r3, r7
 800801c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008020:	f7f8 fb0a 	bl	8000638 <__aeabi_dmul>
 8008024:	4602      	mov	r2, r0
 8008026:	460b      	mov	r3, r1
 8008028:	4620      	mov	r0, r4
 800802a:	4629      	mov	r1, r5
 800802c:	f7f8 f94c 	bl	80002c8 <__aeabi_dsub>
 8008030:	4602      	mov	r2, r0
 8008032:	460b      	mov	r3, r1
 8008034:	4614      	mov	r4, r2
 8008036:	461d      	mov	r5, r3
 8008038:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800803c:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008040:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008044:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008048:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 800804c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008050:	f7f8 faf2 	bl	8000638 <__aeabi_dmul>
 8008054:	4602      	mov	r2, r0
 8008056:	460b      	mov	r3, r1
 8008058:	4610      	mov	r0, r2
 800805a:	4619      	mov	r1, r3
 800805c:	4b78      	ldr	r3, [pc, #480]	@ (8008240 <ETS+0x1ff8>)
 800805e:	443b      	add	r3, r7
 8008060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008064:	f7f8 fae8 	bl	8000638 <__aeabi_dmul>
 8008068:	4602      	mov	r2, r0
 800806a:	460b      	mov	r3, r1
 800806c:	4610      	mov	r0, r2
 800806e:	4619      	mov	r1, r3
 8008070:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008074:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008078:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800807c:	f7f8 fadc 	bl	8000638 <__aeabi_dmul>
 8008080:	4602      	mov	r2, r0
 8008082:	460b      	mov	r3, r1
 8008084:	4620      	mov	r0, r4
 8008086:	4629      	mov	r1, r5
 8008088:	f7f8 f91e 	bl	80002c8 <__aeabi_dsub>
 800808c:	4602      	mov	r2, r0
 800808e:	460b      	mov	r3, r1
 8008090:	4614      	mov	r4, r2
 8008092:	461d      	mov	r5, r3
 8008094:	4b6a      	ldr	r3, [pc, #424]	@ (8008240 <ETS+0x1ff8>)
 8008096:	443b      	add	r3, r7
 8008098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809c:	4964      	ldr	r1, [pc, #400]	@ (8008230 <ETS+0x1fe8>)
 800809e:	4439      	add	r1, r7
 80080a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080a4:	f7f8 fac8 	bl	8000638 <__aeabi_dmul>
 80080a8:	4602      	mov	r2, r0
 80080aa:	460b      	mov	r3, r1
 80080ac:	4620      	mov	r0, r4
 80080ae:	4629      	mov	r1, r5
 80080b0:	f7f8 f90c 	bl	80002cc <__adddf3>
 80080b4:	4602      	mov	r2, r0
 80080b6:	460b      	mov	r3, r1
 80080b8:	4614      	mov	r4, r2
 80080ba:	461d      	mov	r5, r3
 80080bc:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80080c0:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80080c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80080c8:	4b5d      	ldr	r3, [pc, #372]	@ (8008240 <ETS+0x1ff8>)
 80080ca:	443b      	add	r3, r7
 80080cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d0:	f7f8 fab2 	bl	8000638 <__aeabi_dmul>
 80080d4:	4602      	mov	r2, r0
 80080d6:	460b      	mov	r3, r1
 80080d8:	4610      	mov	r0, r2
 80080da:	4619      	mov	r1, r3
 80080dc:	4b58      	ldr	r3, [pc, #352]	@ (8008240 <ETS+0x1ff8>)
 80080de:	443b      	add	r3, r7
 80080e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e4:	f7f8 faa8 	bl	8000638 <__aeabi_dmul>
 80080e8:	4602      	mov	r2, r0
 80080ea:	460b      	mov	r3, r1
 80080ec:	4620      	mov	r0, r4
 80080ee:	4629      	mov	r1, r5
 80080f0:	f7f8 f8ec 	bl	80002cc <__adddf3>
 80080f4:	4602      	mov	r2, r0
 80080f6:	460b      	mov	r3, r1
 80080f8:	4614      	mov	r4, r2
 80080fa:	461d      	mov	r5, r3
 80080fc:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008100:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008104:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008108:	f04f 0200 	mov.w	r2, #0
 800810c:	4b4d      	ldr	r3, [pc, #308]	@ (8008244 <ETS+0x1ffc>)
 800810e:	f7f8 fa93 	bl	8000638 <__aeabi_dmul>
 8008112:	4602      	mov	r2, r0
 8008114:	460b      	mov	r3, r1
 8008116:	4610      	mov	r0, r2
 8008118:	4619      	mov	r1, r3
 800811a:	4b49      	ldr	r3, [pc, #292]	@ (8008240 <ETS+0x1ff8>)
 800811c:	443b      	add	r3, r7
 800811e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008122:	f7f8 fa89 	bl	8000638 <__aeabi_dmul>
 8008126:	4602      	mov	r2, r0
 8008128:	460b      	mov	r3, r1
 800812a:	4610      	mov	r0, r2
 800812c:	4619      	mov	r1, r3
 800812e:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008132:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008136:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800813a:	f7f8 fa7d 	bl	8000638 <__aeabi_dmul>
 800813e:	4602      	mov	r2, r0
 8008140:	460b      	mov	r3, r1
 8008142:	4620      	mov	r0, r4
 8008144:	4629      	mov	r1, r5
 8008146:	f7f8 f8bf 	bl	80002c8 <__aeabi_dsub>
 800814a:	4602      	mov	r2, r0
 800814c:	460b      	mov	r3, r1
 800814e:	4614      	mov	r4, r2
 8008150:	461d      	mov	r5, r3
 8008152:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008156:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 800815a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800815e:	f04f 0200 	mov.w	r2, #0
 8008162:	4b39      	ldr	r3, [pc, #228]	@ (8008248 <ETS+0x2000>)
 8008164:	f7f8 fa68 	bl	8000638 <__aeabi_dmul>
 8008168:	4602      	mov	r2, r0
 800816a:	460b      	mov	r3, r1
 800816c:	4610      	mov	r0, r2
 800816e:	4619      	mov	r1, r3
 8008170:	4b31      	ldr	r3, [pc, #196]	@ (8008238 <ETS+0x1ff0>)
 8008172:	443b      	add	r3, r7
 8008174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008178:	f7f8 fa5e 	bl	8000638 <__aeabi_dmul>
 800817c:	4602      	mov	r2, r0
 800817e:	460b      	mov	r3, r1
 8008180:	4620      	mov	r0, r4
 8008182:	4629      	mov	r1, r5
 8008184:	f7f8 f8a2 	bl	80002cc <__adddf3>
 8008188:	4602      	mov	r2, r0
 800818a:	460b      	mov	r3, r1
 800818c:	4640      	mov	r0, r8
 800818e:	4649      	mov	r1, r9
 8008190:	f7f8 fb7c 	bl	800088c <__aeabi_ddiv>
 8008194:	4602      	mov	r2, r0
 8008196:	460b      	mov	r3, r1
 8008198:	62ba      	str	r2, [r7, #40]	@ 0x28
 800819a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800819e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081a0:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 80081a4:	f00a fbb2 	bl	801290c <sqrt>
 80081a8:	ec53 2b10 	vmov	r2, r3, d0
 80081ac:	4650      	mov	r0, sl
 80081ae:	4659      	mov	r1, fp
 80081b0:	f7f8 fa42 	bl	8000638 <__aeabi_dmul>
 80081b4:	4602      	mov	r2, r0
 80081b6:	460b      	mov	r3, r1
 80081b8:	ec43 2b17 	vmov	d7, r2, r3
 80081bc:	eeb0 0a47 	vmov.f32	s0, s14
 80081c0:	eef0 0a67 	vmov.f32	s1, s15
 80081c4:	f00a fbd0 	bl	8012968 <atan>
 80081c8:	ec53 2b10 	vmov	r2, r3, d0
 80081cc:	4611      	mov	r1, r2
 80081ce:	481f      	ldr	r0, [pc, #124]	@ (800824c <ETS+0x2004>)
 80081d0:	4438      	add	r0, r7
 80081d2:	6001      	str	r1, [r0, #0]
 80081d4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80081d8:	4a1d      	ldr	r2, [pc, #116]	@ (8008250 <ETS+0x2008>)
 80081da:	443a      	add	r2, r7
 80081dc:	6013      	str	r3, [r2, #0]

    n1 = -X1_2*X7_2 + 4*X1_2*X[4]*X[8] - 4*X[1]*X[2]*X[3]*X[8] + 2*X[1]*X[2]*X[6]*X[7] + 2*X[1]*X[3]*X[5]*X[7] - 4*X[1]*X[4]*X[5]*X[6] - X2_2*X6_2 + 2*X[2]*X[3]*X[5]*X[6] + 4*X2_2*X[8] - 4*X[2]*X[5]*X[7] - X3_2*X5_2 + 4*X[1]*X3_2*X[8] - 4*X[0]*X[3]*X[6]*X[7] + 4*X[4]*X5_2 + 4*X[0]*X[4]*X6_2 + 4*X[0]*X7_2 - 16*X[0]*X[4]*X[8];
 80081de:	4b17      	ldr	r3, [pc, #92]	@ (800823c <ETS+0x1ff4>)
 80081e0:	443b      	add	r3, r7
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	623b      	str	r3, [r7, #32]
 80081e6:	4b1b      	ldr	r3, [pc, #108]	@ (8008254 <ETS+0x200c>)
 80081e8:	443b      	add	r3, r7
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80081f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80081f2:	4b19      	ldr	r3, [pc, #100]	@ (8008258 <ETS+0x2010>)
 80081f4:	443b      	add	r3, r7
 80081f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80081fe:	f7f8 fa1b 	bl	8000638 <__aeabi_dmul>
 8008202:	4602      	mov	r2, r0
 8008204:	460b      	mov	r3, r1
 8008206:	4614      	mov	r4, r2
 8008208:	461d      	mov	r5, r3
 800820a:	f04f 0200 	mov.w	r2, #0
 800820e:	4b09      	ldr	r3, [pc, #36]	@ (8008234 <ETS+0x1fec>)
 8008210:	490a      	ldr	r1, [pc, #40]	@ (800823c <ETS+0x1ff4>)
 8008212:	4439      	add	r1, r7
 8008214:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008218:	f7f8 fa0e 	bl	8000638 <__aeabi_dmul>
 800821c:	4602      	mov	r2, r0
 800821e:	460b      	mov	r3, r1
 8008220:	4610      	mov	r0, r2
 8008222:	4619      	mov	r1, r3
 8008224:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008228:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 800822c:	e016      	b.n	800825c <ETS+0x2014>
 800822e:	bf00      	nop
 8008230:	000299b8 	.word	0x000299b8
 8008234:	40100000 	.word	0x40100000
 8008238:	000299a8 	.word	0x000299a8
 800823c:	000299c0 	.word	0x000299c0
 8008240:	000299b0 	.word	0x000299b0
 8008244:	40200000 	.word	0x40200000
 8008248:	40300000 	.word	0x40300000
 800824c:	000299c8 	.word	0x000299c8
 8008250:	000299cc 	.word	0x000299cc
 8008254:	000299c4 	.word	0x000299c4
 8008258:	00029990 	.word	0x00029990
 800825c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008260:	f7f8 f9ea 	bl	8000638 <__aeabi_dmul>
 8008264:	4602      	mov	r2, r0
 8008266:	460b      	mov	r3, r1
 8008268:	4610      	mov	r0, r2
 800826a:	4619      	mov	r1, r3
 800826c:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008270:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008274:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008278:	f7f8 f9de 	bl	8000638 <__aeabi_dmul>
 800827c:	4602      	mov	r2, r0
 800827e:	460b      	mov	r3, r1
 8008280:	4620      	mov	r0, r4
 8008282:	4629      	mov	r1, r5
 8008284:	f7f8 f822 	bl	80002cc <__adddf3>
 8008288:	4602      	mov	r2, r0
 800828a:	460b      	mov	r3, r1
 800828c:	4614      	mov	r4, r2
 800828e:	461d      	mov	r5, r3
 8008290:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008294:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008298:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800829c:	f04f 0200 	mov.w	r2, #0
 80082a0:	4bd6      	ldr	r3, [pc, #856]	@ (80085fc <ETS+0x23b4>)
 80082a2:	f7f8 f9c9 	bl	8000638 <__aeabi_dmul>
 80082a6:	4602      	mov	r2, r0
 80082a8:	460b      	mov	r3, r1
 80082aa:	4610      	mov	r0, r2
 80082ac:	4619      	mov	r1, r3
 80082ae:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80082b2:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80082b6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80082ba:	f7f8 f9bd 	bl	8000638 <__aeabi_dmul>
 80082be:	4602      	mov	r2, r0
 80082c0:	460b      	mov	r3, r1
 80082c2:	4610      	mov	r0, r2
 80082c4:	4619      	mov	r1, r3
 80082c6:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80082ca:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80082ce:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80082d2:	f7f8 f9b1 	bl	8000638 <__aeabi_dmul>
 80082d6:	4602      	mov	r2, r0
 80082d8:	460b      	mov	r3, r1
 80082da:	4610      	mov	r0, r2
 80082dc:	4619      	mov	r1, r3
 80082de:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80082e2:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80082e6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80082ea:	f7f8 f9a5 	bl	8000638 <__aeabi_dmul>
 80082ee:	4602      	mov	r2, r0
 80082f0:	460b      	mov	r3, r1
 80082f2:	4620      	mov	r0, r4
 80082f4:	4629      	mov	r1, r5
 80082f6:	f7f7 ffe7 	bl	80002c8 <__aeabi_dsub>
 80082fa:	4602      	mov	r2, r0
 80082fc:	460b      	mov	r3, r1
 80082fe:	4614      	mov	r4, r2
 8008300:	461d      	mov	r5, r3
 8008302:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008306:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 800830a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800830e:	4602      	mov	r2, r0
 8008310:	460b      	mov	r3, r1
 8008312:	f7f7 ffdb 	bl	80002cc <__adddf3>
 8008316:	4602      	mov	r2, r0
 8008318:	460b      	mov	r3, r1
 800831a:	4610      	mov	r0, r2
 800831c:	4619      	mov	r1, r3
 800831e:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008322:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008326:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800832a:	f7f8 f985 	bl	8000638 <__aeabi_dmul>
 800832e:	4602      	mov	r2, r0
 8008330:	460b      	mov	r3, r1
 8008332:	4610      	mov	r0, r2
 8008334:	4619      	mov	r1, r3
 8008336:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800833a:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 800833e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8008342:	f7f8 f979 	bl	8000638 <__aeabi_dmul>
 8008346:	4602      	mov	r2, r0
 8008348:	460b      	mov	r3, r1
 800834a:	4610      	mov	r0, r2
 800834c:	4619      	mov	r1, r3
 800834e:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008352:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008356:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800835a:	f7f8 f96d 	bl	8000638 <__aeabi_dmul>
 800835e:	4602      	mov	r2, r0
 8008360:	460b      	mov	r3, r1
 8008362:	4620      	mov	r0, r4
 8008364:	4629      	mov	r1, r5
 8008366:	f7f7 ffb1 	bl	80002cc <__adddf3>
 800836a:	4602      	mov	r2, r0
 800836c:	460b      	mov	r3, r1
 800836e:	4614      	mov	r4, r2
 8008370:	461d      	mov	r5, r3
 8008372:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008376:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 800837a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800837e:	4602      	mov	r2, r0
 8008380:	460b      	mov	r3, r1
 8008382:	f7f7 ffa3 	bl	80002cc <__adddf3>
 8008386:	4602      	mov	r2, r0
 8008388:	460b      	mov	r3, r1
 800838a:	4610      	mov	r0, r2
 800838c:	4619      	mov	r1, r3
 800838e:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008392:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008396:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800839a:	f7f8 f94d 	bl	8000638 <__aeabi_dmul>
 800839e:	4602      	mov	r2, r0
 80083a0:	460b      	mov	r3, r1
 80083a2:	4610      	mov	r0, r2
 80083a4:	4619      	mov	r1, r3
 80083a6:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80083aa:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80083ae:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80083b2:	f7f8 f941 	bl	8000638 <__aeabi_dmul>
 80083b6:	4602      	mov	r2, r0
 80083b8:	460b      	mov	r3, r1
 80083ba:	4610      	mov	r0, r2
 80083bc:	4619      	mov	r1, r3
 80083be:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80083c2:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80083c6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80083ca:	f7f8 f935 	bl	8000638 <__aeabi_dmul>
 80083ce:	4602      	mov	r2, r0
 80083d0:	460b      	mov	r3, r1
 80083d2:	4620      	mov	r0, r4
 80083d4:	4629      	mov	r1, r5
 80083d6:	f7f7 ff79 	bl	80002cc <__adddf3>
 80083da:	4602      	mov	r2, r0
 80083dc:	460b      	mov	r3, r1
 80083de:	4614      	mov	r4, r2
 80083e0:	461d      	mov	r5, r3
 80083e2:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80083e6:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80083ea:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80083ee:	f04f 0200 	mov.w	r2, #0
 80083f2:	4b82      	ldr	r3, [pc, #520]	@ (80085fc <ETS+0x23b4>)
 80083f4:	f7f8 f920 	bl	8000638 <__aeabi_dmul>
 80083f8:	4602      	mov	r2, r0
 80083fa:	460b      	mov	r3, r1
 80083fc:	4610      	mov	r0, r2
 80083fe:	4619      	mov	r1, r3
 8008400:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008404:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008408:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800840c:	f7f8 f914 	bl	8000638 <__aeabi_dmul>
 8008410:	4602      	mov	r2, r0
 8008412:	460b      	mov	r3, r1
 8008414:	4610      	mov	r0, r2
 8008416:	4619      	mov	r1, r3
 8008418:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800841c:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008420:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8008424:	f7f8 f908 	bl	8000638 <__aeabi_dmul>
 8008428:	4602      	mov	r2, r0
 800842a:	460b      	mov	r3, r1
 800842c:	4610      	mov	r0, r2
 800842e:	4619      	mov	r1, r3
 8008430:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008434:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008438:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800843c:	f7f8 f8fc 	bl	8000638 <__aeabi_dmul>
 8008440:	4602      	mov	r2, r0
 8008442:	460b      	mov	r3, r1
 8008444:	4620      	mov	r0, r4
 8008446:	4629      	mov	r1, r5
 8008448:	f7f7 ff3e 	bl	80002c8 <__aeabi_dsub>
 800844c:	4602      	mov	r2, r0
 800844e:	460b      	mov	r3, r1
 8008450:	4614      	mov	r4, r2
 8008452:	461d      	mov	r5, r3
 8008454:	4b6a      	ldr	r3, [pc, #424]	@ (8008600 <ETS+0x23b8>)
 8008456:	443b      	add	r3, r7
 8008458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845c:	4969      	ldr	r1, [pc, #420]	@ (8008604 <ETS+0x23bc>)
 800845e:	4439      	add	r1, r7
 8008460:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008464:	f7f8 f8e8 	bl	8000638 <__aeabi_dmul>
 8008468:	4602      	mov	r2, r0
 800846a:	460b      	mov	r3, r1
 800846c:	4620      	mov	r0, r4
 800846e:	4629      	mov	r1, r5
 8008470:	f7f7 ff2a 	bl	80002c8 <__aeabi_dsub>
 8008474:	4602      	mov	r2, r0
 8008476:	460b      	mov	r3, r1
 8008478:	4614      	mov	r4, r2
 800847a:	461d      	mov	r5, r3
 800847c:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008480:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008484:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8008488:	4602      	mov	r2, r0
 800848a:	460b      	mov	r3, r1
 800848c:	f7f7 ff1e 	bl	80002cc <__adddf3>
 8008490:	4602      	mov	r2, r0
 8008492:	460b      	mov	r3, r1
 8008494:	4610      	mov	r0, r2
 8008496:	4619      	mov	r1, r3
 8008498:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800849c:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80084a0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80084a4:	f7f8 f8c8 	bl	8000638 <__aeabi_dmul>
 80084a8:	4602      	mov	r2, r0
 80084aa:	460b      	mov	r3, r1
 80084ac:	4610      	mov	r0, r2
 80084ae:	4619      	mov	r1, r3
 80084b0:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80084b4:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80084b8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80084bc:	f7f8 f8bc 	bl	8000638 <__aeabi_dmul>
 80084c0:	4602      	mov	r2, r0
 80084c2:	460b      	mov	r3, r1
 80084c4:	4610      	mov	r0, r2
 80084c6:	4619      	mov	r1, r3
 80084c8:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80084cc:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80084d0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80084d4:	f7f8 f8b0 	bl	8000638 <__aeabi_dmul>
 80084d8:	4602      	mov	r2, r0
 80084da:	460b      	mov	r3, r1
 80084dc:	4620      	mov	r0, r4
 80084de:	4629      	mov	r1, r5
 80084e0:	f7f7 fef4 	bl	80002cc <__adddf3>
 80084e4:	4602      	mov	r2, r0
 80084e6:	460b      	mov	r3, r1
 80084e8:	4614      	mov	r4, r2
 80084ea:	461d      	mov	r5, r3
 80084ec:	f04f 0200 	mov.w	r2, #0
 80084f0:	4b42      	ldr	r3, [pc, #264]	@ (80085fc <ETS+0x23b4>)
 80084f2:	4944      	ldr	r1, [pc, #272]	@ (8008604 <ETS+0x23bc>)
 80084f4:	4439      	add	r1, r7
 80084f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084fa:	f7f8 f89d 	bl	8000638 <__aeabi_dmul>
 80084fe:	4602      	mov	r2, r0
 8008500:	460b      	mov	r3, r1
 8008502:	4610      	mov	r0, r2
 8008504:	4619      	mov	r1, r3
 8008506:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800850a:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 800850e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008512:	f7f8 f891 	bl	8000638 <__aeabi_dmul>
 8008516:	4602      	mov	r2, r0
 8008518:	460b      	mov	r3, r1
 800851a:	4620      	mov	r0, r4
 800851c:	4629      	mov	r1, r5
 800851e:	f7f7 fed5 	bl	80002cc <__adddf3>
 8008522:	4602      	mov	r2, r0
 8008524:	460b      	mov	r3, r1
 8008526:	4614      	mov	r4, r2
 8008528:	461d      	mov	r5, r3
 800852a:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800852e:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008532:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8008536:	f04f 0200 	mov.w	r2, #0
 800853a:	4b30      	ldr	r3, [pc, #192]	@ (80085fc <ETS+0x23b4>)
 800853c:	f7f8 f87c 	bl	8000638 <__aeabi_dmul>
 8008540:	4602      	mov	r2, r0
 8008542:	460b      	mov	r3, r1
 8008544:	4610      	mov	r0, r2
 8008546:	4619      	mov	r1, r3
 8008548:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800854c:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008550:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8008554:	f7f8 f870 	bl	8000638 <__aeabi_dmul>
 8008558:	4602      	mov	r2, r0
 800855a:	460b      	mov	r3, r1
 800855c:	4610      	mov	r0, r2
 800855e:	4619      	mov	r1, r3
 8008560:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008564:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008568:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800856c:	f7f8 f864 	bl	8000638 <__aeabi_dmul>
 8008570:	4602      	mov	r2, r0
 8008572:	460b      	mov	r3, r1
 8008574:	4620      	mov	r0, r4
 8008576:	4629      	mov	r1, r5
 8008578:	f7f7 fea6 	bl	80002c8 <__aeabi_dsub>
 800857c:	4602      	mov	r2, r0
 800857e:	460b      	mov	r3, r1
 8008580:	4614      	mov	r4, r2
 8008582:	461d      	mov	r5, r3
 8008584:	4b20      	ldr	r3, [pc, #128]	@ (8008608 <ETS+0x23c0>)
 8008586:	443b      	add	r3, r7
 8008588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858c:	491f      	ldr	r1, [pc, #124]	@ (800860c <ETS+0x23c4>)
 800858e:	4439      	add	r1, r7
 8008590:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008594:	f7f8 f850 	bl	8000638 <__aeabi_dmul>
 8008598:	4602      	mov	r2, r0
 800859a:	460b      	mov	r3, r1
 800859c:	4620      	mov	r0, r4
 800859e:	4629      	mov	r1, r5
 80085a0:	f7f7 fe92 	bl	80002c8 <__aeabi_dsub>
 80085a4:	4602      	mov	r2, r0
 80085a6:	460b      	mov	r3, r1
 80085a8:	4614      	mov	r4, r2
 80085aa:	461d      	mov	r5, r3
 80085ac:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80085b0:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80085b4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80085b8:	f04f 0200 	mov.w	r2, #0
 80085bc:	4b0f      	ldr	r3, [pc, #60]	@ (80085fc <ETS+0x23b4>)
 80085be:	f7f8 f83b 	bl	8000638 <__aeabi_dmul>
 80085c2:	4602      	mov	r2, r0
 80085c4:	460b      	mov	r3, r1
 80085c6:	4610      	mov	r0, r2
 80085c8:	4619      	mov	r1, r3
 80085ca:	4b10      	ldr	r3, [pc, #64]	@ (800860c <ETS+0x23c4>)
 80085cc:	443b      	add	r3, r7
 80085ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d2:	f7f8 f831 	bl	8000638 <__aeabi_dmul>
 80085d6:	4602      	mov	r2, r0
 80085d8:	460b      	mov	r3, r1
 80085da:	4610      	mov	r0, r2
 80085dc:	4619      	mov	r1, r3
 80085de:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80085e2:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80085e6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80085ea:	f7f8 f825 	bl	8000638 <__aeabi_dmul>
 80085ee:	4602      	mov	r2, r0
 80085f0:	460b      	mov	r3, r1
 80085f2:	4620      	mov	r0, r4
 80085f4:	4629      	mov	r1, r5
 80085f6:	f7f7 fe69 	bl	80002cc <__adddf3>
 80085fa:	e009      	b.n	8008610 <ETS+0x23c8>
 80085fc:	40100000 	.word	0x40100000
 8008600:	00029998 	.word	0x00029998
 8008604:	000299b8 	.word	0x000299b8
 8008608:	000299a0 	.word	0x000299a0
 800860c:	000299b0 	.word	0x000299b0
 8008610:	4602      	mov	r2, r0
 8008612:	460b      	mov	r3, r1
 8008614:	4614      	mov	r4, r2
 8008616:	461d      	mov	r5, r3
 8008618:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800861c:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008620:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008624:	f04f 0200 	mov.w	r2, #0
 8008628:	4bcc      	ldr	r3, [pc, #816]	@ (800895c <ETS+0x2714>)
 800862a:	f7f8 f805 	bl	8000638 <__aeabi_dmul>
 800862e:	4602      	mov	r2, r0
 8008630:	460b      	mov	r3, r1
 8008632:	4610      	mov	r0, r2
 8008634:	4619      	mov	r1, r3
 8008636:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800863a:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 800863e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8008642:	f7f7 fff9 	bl	8000638 <__aeabi_dmul>
 8008646:	4602      	mov	r2, r0
 8008648:	460b      	mov	r3, r1
 800864a:	4610      	mov	r0, r2
 800864c:	4619      	mov	r1, r3
 800864e:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008652:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008656:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800865a:	f7f7 ffed 	bl	8000638 <__aeabi_dmul>
 800865e:	4602      	mov	r2, r0
 8008660:	460b      	mov	r3, r1
 8008662:	4610      	mov	r0, r2
 8008664:	4619      	mov	r1, r3
 8008666:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800866a:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 800866e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008672:	f7f7 ffe1 	bl	8000638 <__aeabi_dmul>
 8008676:	4602      	mov	r2, r0
 8008678:	460b      	mov	r3, r1
 800867a:	4620      	mov	r0, r4
 800867c:	4629      	mov	r1, r5
 800867e:	f7f7 fe23 	bl	80002c8 <__aeabi_dsub>
 8008682:	4602      	mov	r2, r0
 8008684:	460b      	mov	r3, r1
 8008686:	4614      	mov	r4, r2
 8008688:	461d      	mov	r5, r3
 800868a:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800868e:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008692:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8008696:	f04f 0200 	mov.w	r2, #0
 800869a:	4bb0      	ldr	r3, [pc, #704]	@ (800895c <ETS+0x2714>)
 800869c:	f7f7 ffcc 	bl	8000638 <__aeabi_dmul>
 80086a0:	4602      	mov	r2, r0
 80086a2:	460b      	mov	r3, r1
 80086a4:	4610      	mov	r0, r2
 80086a6:	4619      	mov	r1, r3
 80086a8:	4bad      	ldr	r3, [pc, #692]	@ (8008960 <ETS+0x2718>)
 80086aa:	443b      	add	r3, r7
 80086ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b0:	f7f7 ffc2 	bl	8000638 <__aeabi_dmul>
 80086b4:	4602      	mov	r2, r0
 80086b6:	460b      	mov	r3, r1
 80086b8:	4620      	mov	r0, r4
 80086ba:	4629      	mov	r1, r5
 80086bc:	f7f7 fe06 	bl	80002cc <__adddf3>
 80086c0:	4602      	mov	r2, r0
 80086c2:	460b      	mov	r3, r1
 80086c4:	4614      	mov	r4, r2
 80086c6:	461d      	mov	r5, r3
 80086c8:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80086cc:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80086d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80086d4:	f04f 0200 	mov.w	r2, #0
 80086d8:	4ba0      	ldr	r3, [pc, #640]	@ (800895c <ETS+0x2714>)
 80086da:	f7f7 ffad 	bl	8000638 <__aeabi_dmul>
 80086de:	4602      	mov	r2, r0
 80086e0:	460b      	mov	r3, r1
 80086e2:	4610      	mov	r0, r2
 80086e4:	4619      	mov	r1, r3
 80086e6:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80086ea:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80086ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086f2:	f7f7 ffa1 	bl	8000638 <__aeabi_dmul>
 80086f6:	4602      	mov	r2, r0
 80086f8:	460b      	mov	r3, r1
 80086fa:	4610      	mov	r0, r2
 80086fc:	4619      	mov	r1, r3
 80086fe:	4b99      	ldr	r3, [pc, #612]	@ (8008964 <ETS+0x271c>)
 8008700:	443b      	add	r3, r7
 8008702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008706:	f7f7 ff97 	bl	8000638 <__aeabi_dmul>
 800870a:	4602      	mov	r2, r0
 800870c:	460b      	mov	r3, r1
 800870e:	4620      	mov	r0, r4
 8008710:	4629      	mov	r1, r5
 8008712:	f7f7 fddb 	bl	80002cc <__adddf3>
 8008716:	4602      	mov	r2, r0
 8008718:	460b      	mov	r3, r1
 800871a:	4614      	mov	r4, r2
 800871c:	461d      	mov	r5, r3
 800871e:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008722:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008726:	e9d3 0100 	ldrd	r0, r1, [r3]
 800872a:	f04f 0200 	mov.w	r2, #0
 800872e:	4b8b      	ldr	r3, [pc, #556]	@ (800895c <ETS+0x2714>)
 8008730:	f7f7 ff82 	bl	8000638 <__aeabi_dmul>
 8008734:	4602      	mov	r2, r0
 8008736:	460b      	mov	r3, r1
 8008738:	4610      	mov	r0, r2
 800873a:	4619      	mov	r1, r3
 800873c:	4b8a      	ldr	r3, [pc, #552]	@ (8008968 <ETS+0x2720>)
 800873e:	443b      	add	r3, r7
 8008740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008744:	f7f7 ff78 	bl	8000638 <__aeabi_dmul>
 8008748:	4602      	mov	r2, r0
 800874a:	460b      	mov	r3, r1
 800874c:	4620      	mov	r0, r4
 800874e:	4629      	mov	r1, r5
 8008750:	f7f7 fdbc 	bl	80002cc <__adddf3>
 8008754:	4602      	mov	r2, r0
 8008756:	460b      	mov	r3, r1
 8008758:	4614      	mov	r4, r2
 800875a:	461d      	mov	r5, r3
 800875c:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008760:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008764:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008768:	f04f 0200 	mov.w	r2, #0
 800876c:	4b7f      	ldr	r3, [pc, #508]	@ (800896c <ETS+0x2724>)
 800876e:	f7f7 ff63 	bl	8000638 <__aeabi_dmul>
 8008772:	4602      	mov	r2, r0
 8008774:	460b      	mov	r3, r1
 8008776:	4610      	mov	r0, r2
 8008778:	4619      	mov	r1, r3
 800877a:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800877e:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008782:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008786:	f7f7 ff57 	bl	8000638 <__aeabi_dmul>
 800878a:	4602      	mov	r2, r0
 800878c:	460b      	mov	r3, r1
 800878e:	4610      	mov	r0, r2
 8008790:	4619      	mov	r1, r3
 8008792:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008796:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 800879a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800879e:	f7f7 ff4b 	bl	8000638 <__aeabi_dmul>
 80087a2:	4602      	mov	r2, r0
 80087a4:	460b      	mov	r3, r1
 80087a6:	4620      	mov	r0, r4
 80087a8:	4629      	mov	r1, r5
 80087aa:	f7f7 fd8d 	bl	80002c8 <__aeabi_dsub>
 80087ae:	4602      	mov	r2, r0
 80087b0:	460b      	mov	r3, r1
 80087b2:	496f      	ldr	r1, [pc, #444]	@ (8008970 <ETS+0x2728>)
 80087b4:	4439      	add	r1, r7
 80087b6:	e9c1 2300 	strd	r2, r3, [r1]
    n2 = X1_2*X[4] - X[1]*X[2]*X[3] + X2_2 + X[0]*X3_2 - 4*X[0]*X[4];
 80087ba:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80087be:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80087c2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80087c6:	4b6b      	ldr	r3, [pc, #428]	@ (8008974 <ETS+0x272c>)
 80087c8:	443b      	add	r3, r7
 80087ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ce:	f7f7 ff33 	bl	8000638 <__aeabi_dmul>
 80087d2:	4602      	mov	r2, r0
 80087d4:	460b      	mov	r3, r1
 80087d6:	4614      	mov	r4, r2
 80087d8:	461d      	mov	r5, r3
 80087da:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80087de:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80087e2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80087e6:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80087ea:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80087ee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80087f2:	f7f7 ff21 	bl	8000638 <__aeabi_dmul>
 80087f6:	4602      	mov	r2, r0
 80087f8:	460b      	mov	r3, r1
 80087fa:	4610      	mov	r0, r2
 80087fc:	4619      	mov	r1, r3
 80087fe:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008802:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008806:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800880a:	f7f7 ff15 	bl	8000638 <__aeabi_dmul>
 800880e:	4602      	mov	r2, r0
 8008810:	460b      	mov	r3, r1
 8008812:	4620      	mov	r0, r4
 8008814:	4629      	mov	r1, r5
 8008816:	f7f7 fd57 	bl	80002c8 <__aeabi_dsub>
 800881a:	4602      	mov	r2, r0
 800881c:	460b      	mov	r3, r1
 800881e:	4610      	mov	r0, r2
 8008820:	4619      	mov	r1, r3
 8008822:	4b55      	ldr	r3, [pc, #340]	@ (8008978 <ETS+0x2730>)
 8008824:	443b      	add	r3, r7
 8008826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882a:	f7f7 fd4f 	bl	80002cc <__adddf3>
 800882e:	4602      	mov	r2, r0
 8008830:	460b      	mov	r3, r1
 8008832:	4614      	mov	r4, r2
 8008834:	461d      	mov	r5, r3
 8008836:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800883a:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 800883e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008842:	4b4e      	ldr	r3, [pc, #312]	@ (800897c <ETS+0x2734>)
 8008844:	443b      	add	r3, r7
 8008846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884a:	f7f7 fef5 	bl	8000638 <__aeabi_dmul>
 800884e:	4602      	mov	r2, r0
 8008850:	460b      	mov	r3, r1
 8008852:	4620      	mov	r0, r4
 8008854:	4629      	mov	r1, r5
 8008856:	f7f7 fd39 	bl	80002cc <__adddf3>
 800885a:	4602      	mov	r2, r0
 800885c:	460b      	mov	r3, r1
 800885e:	4614      	mov	r4, r2
 8008860:	461d      	mov	r5, r3
 8008862:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008866:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 800886a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800886e:	f04f 0200 	mov.w	r2, #0
 8008872:	4b3a      	ldr	r3, [pc, #232]	@ (800895c <ETS+0x2714>)
 8008874:	f7f7 fee0 	bl	8000638 <__aeabi_dmul>
 8008878:	4602      	mov	r2, r0
 800887a:	460b      	mov	r3, r1
 800887c:	4610      	mov	r0, r2
 800887e:	4619      	mov	r1, r3
 8008880:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008884:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008888:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800888c:	f7f7 fed4 	bl	8000638 <__aeabi_dmul>
 8008890:	4602      	mov	r2, r0
 8008892:	460b      	mov	r3, r1
 8008894:	4620      	mov	r0, r4
 8008896:	4629      	mov	r1, r5
 8008898:	f7f7 fd16 	bl	80002c8 <__aeabi_dsub>
 800889c:	4602      	mov	r2, r0
 800889e:	460b      	mov	r3, r1
 80088a0:	4937      	ldr	r1, [pc, #220]	@ (8008980 <ETS+0x2738>)
 80088a2:	4439      	add	r1, r7
 80088a4:	e9c1 2300 	strd	r2, r3, [r1]
    n3 = 2*X1_2*X3_2*X[4] - 4*X1_2*X4_2 - X[1]*X[2]*X3_2*X[3] + X2_2*X3_2 + X[0]*X3_2 - 8*X[0]*X3_2*X[4] + 16*X[0]*X4_2;
 80088a8:	4b32      	ldr	r3, [pc, #200]	@ (8008974 <ETS+0x272c>)
 80088aa:	443b      	add	r3, r7
 80088ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80088b0:	4602      	mov	r2, r0
 80088b2:	460b      	mov	r3, r1
 80088b4:	f7f7 fd0a 	bl	80002cc <__adddf3>
 80088b8:	4602      	mov	r2, r0
 80088ba:	460b      	mov	r3, r1
 80088bc:	4610      	mov	r0, r2
 80088be:	4619      	mov	r1, r3
 80088c0:	4b2e      	ldr	r3, [pc, #184]	@ (800897c <ETS+0x2734>)
 80088c2:	443b      	add	r3, r7
 80088c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c8:	f7f7 feb6 	bl	8000638 <__aeabi_dmul>
 80088cc:	4602      	mov	r2, r0
 80088ce:	460b      	mov	r3, r1
 80088d0:	4610      	mov	r0, r2
 80088d2:	4619      	mov	r1, r3
 80088d4:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80088d8:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80088dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80088e0:	f7f7 feaa 	bl	8000638 <__aeabi_dmul>
 80088e4:	4602      	mov	r2, r0
 80088e6:	460b      	mov	r3, r1
 80088e8:	4614      	mov	r4, r2
 80088ea:	461d      	mov	r5, r3
 80088ec:	f04f 0200 	mov.w	r2, #0
 80088f0:	4b1a      	ldr	r3, [pc, #104]	@ (800895c <ETS+0x2714>)
 80088f2:	4920      	ldr	r1, [pc, #128]	@ (8008974 <ETS+0x272c>)
 80088f4:	4439      	add	r1, r7
 80088f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088fa:	f7f7 fe9d 	bl	8000638 <__aeabi_dmul>
 80088fe:	4602      	mov	r2, r0
 8008900:	460b      	mov	r3, r1
 8008902:	4610      	mov	r0, r2
 8008904:	4619      	mov	r1, r3
 8008906:	4b1f      	ldr	r3, [pc, #124]	@ (8008984 <ETS+0x273c>)
 8008908:	443b      	add	r3, r7
 800890a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890e:	f7f7 fe93 	bl	8000638 <__aeabi_dmul>
 8008912:	4602      	mov	r2, r0
 8008914:	460b      	mov	r3, r1
 8008916:	4620      	mov	r0, r4
 8008918:	4629      	mov	r1, r5
 800891a:	f7f7 fcd5 	bl	80002c8 <__aeabi_dsub>
 800891e:	4602      	mov	r2, r0
 8008920:	460b      	mov	r3, r1
 8008922:	4614      	mov	r4, r2
 8008924:	461d      	mov	r5, r3
 8008926:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800892a:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 800892e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008932:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008936:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 800893a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800893e:	f7f7 fe7b 	bl	8000638 <__aeabi_dmul>
 8008942:	4602      	mov	r2, r0
 8008944:	460b      	mov	r3, r1
 8008946:	4610      	mov	r0, r2
 8008948:	4619      	mov	r1, r3
 800894a:	4b0c      	ldr	r3, [pc, #48]	@ (800897c <ETS+0x2734>)
 800894c:	443b      	add	r3, r7
 800894e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008952:	f7f7 fe71 	bl	8000638 <__aeabi_dmul>
 8008956:	4602      	mov	r2, r0
 8008958:	460b      	mov	r3, r1
 800895a:	e015      	b.n	8008988 <ETS+0x2740>
 800895c:	40100000 	.word	0x40100000
 8008960:	000299a0 	.word	0x000299a0
 8008964:	00029998 	.word	0x00029998
 8008968:	00029990 	.word	0x00029990
 800896c:	40300000 	.word	0x40300000
 8008970:	00029a38 	.word	0x00029a38
 8008974:	000299c0 	.word	0x000299c0
 8008978:	000299b8 	.word	0x000299b8
 800897c:	000299b0 	.word	0x000299b0
 8008980:	00029a30 	.word	0x00029a30
 8008984:	000299a8 	.word	0x000299a8
 8008988:	4610      	mov	r0, r2
 800898a:	4619      	mov	r1, r3
 800898c:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008990:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008994:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8008998:	f7f7 fe4e 	bl	8000638 <__aeabi_dmul>
 800899c:	4602      	mov	r2, r0
 800899e:	460b      	mov	r3, r1
 80089a0:	4620      	mov	r0, r4
 80089a2:	4629      	mov	r1, r5
 80089a4:	f7f7 fc90 	bl	80002c8 <__aeabi_dsub>
 80089a8:	4602      	mov	r2, r0
 80089aa:	460b      	mov	r3, r1
 80089ac:	4614      	mov	r4, r2
 80089ae:	461d      	mov	r5, r3
 80089b0:	4bc2      	ldr	r3, [pc, #776]	@ (8008cbc <ETS+0x2a74>)
 80089b2:	443b      	add	r3, r7
 80089b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b8:	49c1      	ldr	r1, [pc, #772]	@ (8008cc0 <ETS+0x2a78>)
 80089ba:	4439      	add	r1, r7
 80089bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089c0:	f7f7 fe3a 	bl	8000638 <__aeabi_dmul>
 80089c4:	4602      	mov	r2, r0
 80089c6:	460b      	mov	r3, r1
 80089c8:	4620      	mov	r0, r4
 80089ca:	4629      	mov	r1, r5
 80089cc:	f7f7 fc7e 	bl	80002cc <__adddf3>
 80089d0:	4602      	mov	r2, r0
 80089d2:	460b      	mov	r3, r1
 80089d4:	4614      	mov	r4, r2
 80089d6:	461d      	mov	r5, r3
 80089d8:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80089dc:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 80089e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80089e4:	4bb5      	ldr	r3, [pc, #724]	@ (8008cbc <ETS+0x2a74>)
 80089e6:	443b      	add	r3, r7
 80089e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ec:	f7f7 fe24 	bl	8000638 <__aeabi_dmul>
 80089f0:	4602      	mov	r2, r0
 80089f2:	460b      	mov	r3, r1
 80089f4:	4620      	mov	r0, r4
 80089f6:	4629      	mov	r1, r5
 80089f8:	f7f7 fc68 	bl	80002cc <__adddf3>
 80089fc:	4602      	mov	r2, r0
 80089fe:	460b      	mov	r3, r1
 8008a00:	4614      	mov	r4, r2
 8008a02:	461d      	mov	r5, r3
 8008a04:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008a08:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008a0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008a10:	f04f 0200 	mov.w	r2, #0
 8008a14:	4bab      	ldr	r3, [pc, #684]	@ (8008cc4 <ETS+0x2a7c>)
 8008a16:	f7f7 fe0f 	bl	8000638 <__aeabi_dmul>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	4610      	mov	r0, r2
 8008a20:	4619      	mov	r1, r3
 8008a22:	4ba6      	ldr	r3, [pc, #664]	@ (8008cbc <ETS+0x2a74>)
 8008a24:	443b      	add	r3, r7
 8008a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2a:	f7f7 fe05 	bl	8000638 <__aeabi_dmul>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	460b      	mov	r3, r1
 8008a32:	4610      	mov	r0, r2
 8008a34:	4619      	mov	r1, r3
 8008a36:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008a3a:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008a3e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a42:	f7f7 fdf9 	bl	8000638 <__aeabi_dmul>
 8008a46:	4602      	mov	r2, r0
 8008a48:	460b      	mov	r3, r1
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	4629      	mov	r1, r5
 8008a4e:	f7f7 fc3b 	bl	80002c8 <__aeabi_dsub>
 8008a52:	4602      	mov	r2, r0
 8008a54:	460b      	mov	r3, r1
 8008a56:	4614      	mov	r4, r2
 8008a58:	461d      	mov	r5, r3
 8008a5a:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008a5e:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008a62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008a66:	f04f 0200 	mov.w	r2, #0
 8008a6a:	4b97      	ldr	r3, [pc, #604]	@ (8008cc8 <ETS+0x2a80>)
 8008a6c:	f7f7 fde4 	bl	8000638 <__aeabi_dmul>
 8008a70:	4602      	mov	r2, r0
 8008a72:	460b      	mov	r3, r1
 8008a74:	4610      	mov	r0, r2
 8008a76:	4619      	mov	r1, r3
 8008a78:	4b94      	ldr	r3, [pc, #592]	@ (8008ccc <ETS+0x2a84>)
 8008a7a:	443b      	add	r3, r7
 8008a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a80:	f7f7 fdda 	bl	8000638 <__aeabi_dmul>
 8008a84:	4602      	mov	r2, r0
 8008a86:	460b      	mov	r3, r1
 8008a88:	4620      	mov	r0, r4
 8008a8a:	4629      	mov	r1, r5
 8008a8c:	f7f7 fc1e 	bl	80002cc <__adddf3>
 8008a90:	4602      	mov	r2, r0
 8008a92:	460b      	mov	r3, r1
 8008a94:	498e      	ldr	r1, [pc, #568]	@ (8008cd0 <ETS+0x2a88>)
 8008a96:	4439      	add	r1, r7
 8008a98:	e9c1 2300 	strd	r2, r3, [r1]
    n4 = 4*X[4] - X3_2;
 8008a9c:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008aa0:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008aa4:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8008aa8:	f04f 0200 	mov.w	r2, #0
 8008aac:	4b89      	ldr	r3, [pc, #548]	@ (8008cd4 <ETS+0x2a8c>)
 8008aae:	f7f7 fdc3 	bl	8000638 <__aeabi_dmul>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	4610      	mov	r0, r2
 8008ab8:	4619      	mov	r1, r3
 8008aba:	4b80      	ldr	r3, [pc, #512]	@ (8008cbc <ETS+0x2a74>)
 8008abc:	443b      	add	r3, r7
 8008abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac2:	f7f7 fc01 	bl	80002c8 <__aeabi_dsub>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	460b      	mov	r3, r1
 8008aca:	4983      	ldr	r1, [pc, #524]	@ (8008cd8 <ETS+0x2a90>)
 8008acc:	4439      	add	r1, r7
 8008ace:	e9c1 2300 	strd	r2, r3, [r1]
    n5 = 4*X[0]*X[4] - X2_2;
 8008ad2:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008ad6:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008ada:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008ade:	f04f 0200 	mov.w	r2, #0
 8008ae2:	4b7c      	ldr	r3, [pc, #496]	@ (8008cd4 <ETS+0x2a8c>)
 8008ae4:	f7f7 fda8 	bl	8000638 <__aeabi_dmul>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	460b      	mov	r3, r1
 8008aec:	4610      	mov	r0, r2
 8008aee:	4619      	mov	r1, r3
 8008af0:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008af4:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008af8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008afc:	f7f7 fd9c 	bl	8000638 <__aeabi_dmul>
 8008b00:	4602      	mov	r2, r0
 8008b02:	460b      	mov	r3, r1
 8008b04:	4610      	mov	r0, r2
 8008b06:	4619      	mov	r1, r3
 8008b08:	4b6d      	ldr	r3, [pc, #436]	@ (8008cc0 <ETS+0x2a78>)
 8008b0a:	443b      	add	r3, r7
 8008b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b10:	f7f7 fbda 	bl	80002c8 <__aeabi_dsub>
 8008b14:	4602      	mov	r2, r0
 8008b16:	460b      	mov	r3, r1
 8008b18:	4970      	ldr	r1, [pc, #448]	@ (8008cdc <ETS+0x2a94>)
 8008b1a:	4439      	add	r1, r7
 8008b1c:	e9c1 2300 	strd	r2, r3, [r1]
    n6 = 4*X[0] - X1_2;
 8008b20:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008b24:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008b28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008b2c:	f04f 0200 	mov.w	r2, #0
 8008b30:	4b68      	ldr	r3, [pc, #416]	@ (8008cd4 <ETS+0x2a8c>)
 8008b32:	f7f7 fd81 	bl	8000638 <__aeabi_dmul>
 8008b36:	4602      	mov	r2, r0
 8008b38:	460b      	mov	r3, r1
 8008b3a:	4610      	mov	r0, r2
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	4b68      	ldr	r3, [pc, #416]	@ (8008ce0 <ETS+0x2a98>)
 8008b40:	443b      	add	r3, r7
 8008b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b46:	f7f7 fbbf 	bl	80002c8 <__aeabi_dsub>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	4965      	ldr	r1, [pc, #404]	@ (8008ce4 <ETS+0x2a9c>)
 8008b50:	4439      	add	r1, r7
 8008b52:	e9c1 2300 	strd	r2, r3, [r1]

    phi = -atan((fabs(X[4])*sqrt(n1*n5) * (2*X[2] - X[1]*X[3]) * sqrt((X[4]*n4*n6) / n3)) / (X4_2 * sqrt(-n2 / X[4]) * sqrt(n1*n6) * sqrt(-(n2 * n4) / n3) * sqrt(-(n4*n5) / (X[4]*n2))));
 8008b56:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008b5a:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008b5e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b62:	61ba      	str	r2, [r7, #24]
 8008b64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b68:	61fb      	str	r3, [r7, #28]
 8008b6a:	4b5c      	ldr	r3, [pc, #368]	@ (8008cdc <ETS+0x2a94>)
 8008b6c:	443b      	add	r3, r7
 8008b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b72:	495d      	ldr	r1, [pc, #372]	@ (8008ce8 <ETS+0x2aa0>)
 8008b74:	4439      	add	r1, r7
 8008b76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b7a:	f7f7 fd5d 	bl	8000638 <__aeabi_dmul>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	460b      	mov	r3, r1
 8008b82:	ec43 2b17 	vmov	d7, r2, r3
 8008b86:	eeb0 0a47 	vmov.f32	s0, s14
 8008b8a:	eef0 0a67 	vmov.f32	s1, s15
 8008b8e:	f009 febd 	bl	801290c <sqrt>
 8008b92:	ec53 2b10 	vmov	r2, r3, d0
 8008b96:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008b9a:	f7f7 fd4d 	bl	8000638 <__aeabi_dmul>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	4690      	mov	r8, r2
 8008ba4:	4699      	mov	r9, r3
 8008ba6:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008baa:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008bae:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	f7f7 fb89 	bl	80002cc <__adddf3>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	4614      	mov	r4, r2
 8008bc0:	461d      	mov	r5, r3
 8008bc2:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008bc6:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008bca:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008bce:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008bd2:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008bd6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8008bda:	f7f7 fd2d 	bl	8000638 <__aeabi_dmul>
 8008bde:	4602      	mov	r2, r0
 8008be0:	460b      	mov	r3, r1
 8008be2:	4620      	mov	r0, r4
 8008be4:	4629      	mov	r1, r5
 8008be6:	f7f7 fb6f 	bl	80002c8 <__aeabi_dsub>
 8008bea:	4602      	mov	r2, r0
 8008bec:	460b      	mov	r3, r1
 8008bee:	4640      	mov	r0, r8
 8008bf0:	4649      	mov	r1, r9
 8008bf2:	f7f7 fd21 	bl	8000638 <__aeabi_dmul>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	4614      	mov	r4, r2
 8008bfc:	461d      	mov	r5, r3
 8008bfe:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008c02:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008c06:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8008c0a:	4b33      	ldr	r3, [pc, #204]	@ (8008cd8 <ETS+0x2a90>)
 8008c0c:	443b      	add	r3, r7
 8008c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c12:	f7f7 fd11 	bl	8000638 <__aeabi_dmul>
 8008c16:	4602      	mov	r2, r0
 8008c18:	460b      	mov	r3, r1
 8008c1a:	4610      	mov	r0, r2
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	4b31      	ldr	r3, [pc, #196]	@ (8008ce4 <ETS+0x2a9c>)
 8008c20:	443b      	add	r3, r7
 8008c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c26:	f7f7 fd07 	bl	8000638 <__aeabi_dmul>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	4610      	mov	r0, r2
 8008c30:	4619      	mov	r1, r3
 8008c32:	4b27      	ldr	r3, [pc, #156]	@ (8008cd0 <ETS+0x2a88>)
 8008c34:	443b      	add	r3, r7
 8008c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3a:	f7f7 fe27 	bl	800088c <__aeabi_ddiv>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	460b      	mov	r3, r1
 8008c42:	ec43 2b17 	vmov	d7, r2, r3
 8008c46:	eeb0 0a47 	vmov.f32	s0, s14
 8008c4a:	eef0 0a67 	vmov.f32	s1, s15
 8008c4e:	f009 fe5d 	bl	801290c <sqrt>
 8008c52:	ec53 2b10 	vmov	r2, r3, d0
 8008c56:	4620      	mov	r0, r4
 8008c58:	4629      	mov	r1, r5
 8008c5a:	f7f7 fced 	bl	8000638 <__aeabi_dmul>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	460b      	mov	r3, r1
 8008c62:	4690      	mov	r8, r2
 8008c64:	4699      	mov	r9, r3
 8008c66:	4b21      	ldr	r3, [pc, #132]	@ (8008cec <ETS+0x2aa4>)
 8008c68:	443b      	add	r3, r7
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	613b      	str	r3, [r7, #16]
 8008c6e:	4b20      	ldr	r3, [pc, #128]	@ (8008cf0 <ETS+0x2aa8>)
 8008c70:	443b      	add	r3, r7
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8008c78:	617b      	str	r3, [r7, #20]
 8008c7a:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008c7e:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008c82:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c86:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008c8a:	f7f7 fdff 	bl	800088c <__aeabi_ddiv>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	460b      	mov	r3, r1
 8008c92:	ec43 2b17 	vmov	d7, r2, r3
 8008c96:	eeb0 0a47 	vmov.f32	s0, s14
 8008c9a:	eef0 0a67 	vmov.f32	s1, s15
 8008c9e:	f009 fe35 	bl	801290c <sqrt>
 8008ca2:	ec51 0b10 	vmov	r0, r1, d0
 8008ca6:	4b09      	ldr	r3, [pc, #36]	@ (8008ccc <ETS+0x2a84>)
 8008ca8:	443b      	add	r3, r7
 8008caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cae:	f7f7 fcc3 	bl	8000638 <__aeabi_dmul>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	4614      	mov	r4, r2
 8008cb8:	461d      	mov	r5, r3
 8008cba:	e01b      	b.n	8008cf4 <ETS+0x2aac>
 8008cbc:	000299b0 	.word	0x000299b0
 8008cc0:	000299b8 	.word	0x000299b8
 8008cc4:	40200000 	.word	0x40200000
 8008cc8:	40300000 	.word	0x40300000
 8008ccc:	000299a8 	.word	0x000299a8
 8008cd0:	00029a28 	.word	0x00029a28
 8008cd4:	40100000 	.word	0x40100000
 8008cd8:	00029a20 	.word	0x00029a20
 8008cdc:	00029a18 	.word	0x00029a18
 8008ce0:	000299c0 	.word	0x000299c0
 8008ce4:	00029a10 	.word	0x00029a10
 8008ce8:	00029a38 	.word	0x00029a38
 8008cec:	00029a30 	.word	0x00029a30
 8008cf0:	00029a34 	.word	0x00029a34
 8008cf4:	4b88      	ldr	r3, [pc, #544]	@ (8008f18 <ETS+0x2cd0>)
 8008cf6:	443b      	add	r3, r7
 8008cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfc:	4987      	ldr	r1, [pc, #540]	@ (8008f1c <ETS+0x2cd4>)
 8008cfe:	4439      	add	r1, r7
 8008d00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d04:	f7f7 fc98 	bl	8000638 <__aeabi_dmul>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	460b      	mov	r3, r1
 8008d0c:	ec43 2b17 	vmov	d7, r2, r3
 8008d10:	eeb0 0a47 	vmov.f32	s0, s14
 8008d14:	eef0 0a67 	vmov.f32	s1, s15
 8008d18:	f009 fdf8 	bl	801290c <sqrt>
 8008d1c:	ec53 2b10 	vmov	r2, r3, d0
 8008d20:	4620      	mov	r0, r4
 8008d22:	4629      	mov	r1, r5
 8008d24:	f7f7 fc88 	bl	8000638 <__aeabi_dmul>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	4614      	mov	r4, r2
 8008d2e:	461d      	mov	r5, r3
 8008d30:	4b7b      	ldr	r3, [pc, #492]	@ (8008f20 <ETS+0x2cd8>)
 8008d32:	443b      	add	r3, r7
 8008d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d38:	497a      	ldr	r1, [pc, #488]	@ (8008f24 <ETS+0x2cdc>)
 8008d3a:	4439      	add	r1, r7
 8008d3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d40:	f7f7 fc7a 	bl	8000638 <__aeabi_dmul>
 8008d44:	4602      	mov	r2, r0
 8008d46:	460b      	mov	r3, r1
 8008d48:	60ba      	str	r2, [r7, #8]
 8008d4a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8008d4e:	60fb      	str	r3, [r7, #12]
 8008d50:	4b75      	ldr	r3, [pc, #468]	@ (8008f28 <ETS+0x2ce0>)
 8008d52:	443b      	add	r3, r7
 8008d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008d5c:	f7f7 fd96 	bl	800088c <__aeabi_ddiv>
 8008d60:	4602      	mov	r2, r0
 8008d62:	460b      	mov	r3, r1
 8008d64:	ec43 2b17 	vmov	d7, r2, r3
 8008d68:	eeb0 0a47 	vmov.f32	s0, s14
 8008d6c:	eef0 0a67 	vmov.f32	s1, s15
 8008d70:	f009 fdcc 	bl	801290c <sqrt>
 8008d74:	ec53 2b10 	vmov	r2, r3, d0
 8008d78:	4620      	mov	r0, r4
 8008d7a:	4629      	mov	r1, r5
 8008d7c:	f7f7 fc5c 	bl	8000638 <__aeabi_dmul>
 8008d80:	4602      	mov	r2, r0
 8008d82:	460b      	mov	r3, r1
 8008d84:	4614      	mov	r4, r2
 8008d86:	461d      	mov	r5, r3
 8008d88:	4b68      	ldr	r3, [pc, #416]	@ (8008f2c <ETS+0x2ce4>)
 8008d8a:	443b      	add	r3, r7
 8008d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d90:	4963      	ldr	r1, [pc, #396]	@ (8008f20 <ETS+0x2cd8>)
 8008d92:	4439      	add	r1, r7
 8008d94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d98:	f7f7 fc4e 	bl	8000638 <__aeabi_dmul>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	460b      	mov	r3, r1
 8008da0:	603a      	str	r2, [r7, #0]
 8008da2:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8008da6:	607b      	str	r3, [r7, #4]
 8008da8:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008dac:	f5a3 631f 	sub.w	r3, r3, #2544	@ 0x9f0
 8008db0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8008db4:	4b5b      	ldr	r3, [pc, #364]	@ (8008f24 <ETS+0x2cdc>)
 8008db6:	443b      	add	r3, r7
 8008db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dbc:	f7f7 fc3c 	bl	8000638 <__aeabi_dmul>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008dc8:	f7f7 fd60 	bl	800088c <__aeabi_ddiv>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	460b      	mov	r3, r1
 8008dd0:	ec43 2b17 	vmov	d7, r2, r3
 8008dd4:	eeb0 0a47 	vmov.f32	s0, s14
 8008dd8:	eef0 0a67 	vmov.f32	s1, s15
 8008ddc:	f009 fd96 	bl	801290c <sqrt>
 8008de0:	ec53 2b10 	vmov	r2, r3, d0
 8008de4:	4620      	mov	r0, r4
 8008de6:	4629      	mov	r1, r5
 8008de8:	f7f7 fc26 	bl	8000638 <__aeabi_dmul>
 8008dec:	4602      	mov	r2, r0
 8008dee:	460b      	mov	r3, r1
 8008df0:	4640      	mov	r0, r8
 8008df2:	4649      	mov	r1, r9
 8008df4:	f7f7 fd4a 	bl	800088c <__aeabi_ddiv>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	ec43 2b17 	vmov	d7, r2, r3
 8008e00:	eeb0 0a47 	vmov.f32	s0, s14
 8008e04:	eef0 0a67 	vmov.f32	s1, s15
 8008e08:	f009 fdae 	bl	8012968 <atan>
 8008e0c:	ec53 2b10 	vmov	r2, r3, d0
 8008e10:	4611      	mov	r1, r2
 8008e12:	4847      	ldr	r0, [pc, #284]	@ (8008f30 <ETS+0x2ce8>)
 8008e14:	4438      	add	r0, r7
 8008e16:	6001      	str	r1, [r0, #0]
 8008e18:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8008e1c:	4a45      	ldr	r2, [pc, #276]	@ (8008f34 <ETS+0x2cec>)
 8008e1e:	443a      	add	r2, r7
 8008e20:	6013      	str	r3, [r2, #0]

    p[0] = sx;
 8008e22:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008e26:	f5a3 6320 	sub.w	r3, r3, #2560	@ 0xa00
 8008e2a:	6819      	ldr	r1, [r3, #0]
 8008e2c:	4b42      	ldr	r3, [pc, #264]	@ (8008f38 <ETS+0x2cf0>)
 8008e2e:	443b      	add	r3, r7
 8008e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e34:	e9c1 2300 	strd	r2, r3, [r1]
    p[1] = sy;
 8008e38:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008e3c:	f5a3 6320 	sub.w	r3, r3, #2560	@ 0xa00
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f103 0108 	add.w	r1, r3, #8
 8008e46:	4b3d      	ldr	r3, [pc, #244]	@ (8008f3c <ETS+0x2cf4>)
 8008e48:	443b      	add	r3, r7
 8008e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4e:	e9c1 2300 	strd	r2, r3, [r1]
    p[2] = sz;
 8008e52:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008e56:	f5a3 6320 	sub.w	r3, r3, #2560	@ 0xa00
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f103 0110 	add.w	r1, r3, #16
 8008e60:	4b37      	ldr	r3, [pc, #220]	@ (8008f40 <ETS+0x2cf8>)
 8008e62:	443b      	add	r3, r7
 8008e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e68:	e9c1 2300 	strd	r2, r3, [r1]
    p[3] = bx;
 8008e6c:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008e70:	f5a3 6320 	sub.w	r3, r3, #2560	@ 0xa00
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f103 0118 	add.w	r1, r3, #24
 8008e7a:	4b32      	ldr	r3, [pc, #200]	@ (8008f44 <ETS+0x2cfc>)
 8008e7c:	443b      	add	r3, r7
 8008e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e82:	e9c1 2300 	strd	r2, r3, [r1]
    p[4] = by;
 8008e86:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008e8a:	f5a3 6320 	sub.w	r3, r3, #2560	@ 0xa00
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f103 0120 	add.w	r1, r3, #32
 8008e94:	4b2c      	ldr	r3, [pc, #176]	@ (8008f48 <ETS+0x2d00>)
 8008e96:	443b      	add	r3, r7
 8008e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9c:	e9c1 2300 	strd	r2, r3, [r1]
    p[5] = bz;
 8008ea0:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008ea4:	f5a3 6320 	sub.w	r3, r3, #2560	@ 0xa00
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8008eae:	4b27      	ldr	r3, [pc, #156]	@ (8008f4c <ETS+0x2d04>)
 8008eb0:	443b      	add	r3, r7
 8008eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb6:	e9c1 2300 	strd	r2, r3, [r1]
    p[6] = rho;
 8008eba:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008ebe:	f5a3 6320 	sub.w	r3, r3, #2560	@ 0xa00
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008ec8:	4b21      	ldr	r3, [pc, #132]	@ (8008f50 <ETS+0x2d08>)
 8008eca:	443b      	add	r3, r7
 8008ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed0:	e9c1 2300 	strd	r2, r3, [r1]
    p[7] = phi;
 8008ed4:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008ed8:	f5a3 6320 	sub.w	r3, r3, #2560	@ 0xa00
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008ee2:	4b13      	ldr	r3, [pc, #76]	@ (8008f30 <ETS+0x2ce8>)
 8008ee4:	443b      	add	r3, r7
 8008ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eea:	e9c1 2300 	strd	r2, r3, [r1]
    p[8] = lambida;
 8008eee:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8008ef2:	f5a3 6320 	sub.w	r3, r3, #2560	@ 0xa00
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8008efc:	4b15      	ldr	r3, [pc, #84]	@ (8008f54 <ETS+0x2d0c>)
 8008efe:	443b      	add	r3, r7
 8008f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f04:	e9c1 2300 	strd	r2, r3, [r1]
}
 8008f08:	bf00      	nop
 8008f0a:	f507 3726 	add.w	r7, r7, #169984	@ 0x29800
 8008f0e:	f507 7720 	add.w	r7, r7, #640	@ 0x280
 8008f12:	46bd      	mov	sp, r7
 8008f14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f18:	00029a10 	.word	0x00029a10
 8008f1c:	00029a38 	.word	0x00029a38
 8008f20:	00029a20 	.word	0x00029a20
 8008f24:	00029a30 	.word	0x00029a30
 8008f28:	00029a28 	.word	0x00029a28
 8008f2c:	00029a18 	.word	0x00029a18
 8008f30:	000299d0 	.word	0x000299d0
 8008f34:	000299d4 	.word	0x000299d4
 8008f38:	000299f0 	.word	0x000299f0
 8008f3c:	000299e8 	.word	0x000299e8
 8008f40:	000299e0 	.word	0x000299e0
 8008f44:	00029a08 	.word	0x00029a08
 8008f48:	00029a00 	.word	0x00029a00
 8008f4c:	000299f8 	.word	0x000299f8
 8008f50:	000299d8 	.word	0x000299d8
 8008f54:	000299c8 	.word	0x000299c8

08008f58 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b08c      	sub	sp, #48	@ 0x30
 8008f5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f5e:	f107 031c 	add.w	r3, r7, #28
 8008f62:	2200      	movs	r2, #0
 8008f64:	601a      	str	r2, [r3, #0]
 8008f66:	605a      	str	r2, [r3, #4]
 8008f68:	609a      	str	r2, [r3, #8]
 8008f6a:	60da      	str	r2, [r3, #12]
 8008f6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008f6e:	4b7f      	ldr	r3, [pc, #508]	@ (800916c <MX_GPIO_Init+0x214>)
 8008f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f72:	4a7e      	ldr	r2, [pc, #504]	@ (800916c <MX_GPIO_Init+0x214>)
 8008f74:	f043 0304 	orr.w	r3, r3, #4
 8008f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8008f7a:	4b7c      	ldr	r3, [pc, #496]	@ (800916c <MX_GPIO_Init+0x214>)
 8008f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f7e:	f003 0304 	and.w	r3, r3, #4
 8008f82:	61bb      	str	r3, [r7, #24]
 8008f84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008f86:	4b79      	ldr	r3, [pc, #484]	@ (800916c <MX_GPIO_Init+0x214>)
 8008f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f8a:	4a78      	ldr	r2, [pc, #480]	@ (800916c <MX_GPIO_Init+0x214>)
 8008f8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8008f92:	4b76      	ldr	r3, [pc, #472]	@ (800916c <MX_GPIO_Init+0x214>)
 8008f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f9a:	617b      	str	r3, [r7, #20]
 8008f9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f9e:	4b73      	ldr	r3, [pc, #460]	@ (800916c <MX_GPIO_Init+0x214>)
 8008fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fa2:	4a72      	ldr	r2, [pc, #456]	@ (800916c <MX_GPIO_Init+0x214>)
 8008fa4:	f043 0301 	orr.w	r3, r3, #1
 8008fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8008faa:	4b70      	ldr	r3, [pc, #448]	@ (800916c <MX_GPIO_Init+0x214>)
 8008fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fae:	f003 0301 	and.w	r3, r3, #1
 8008fb2:	613b      	str	r3, [r7, #16]
 8008fb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008fb6:	4b6d      	ldr	r3, [pc, #436]	@ (800916c <MX_GPIO_Init+0x214>)
 8008fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fba:	4a6c      	ldr	r2, [pc, #432]	@ (800916c <MX_GPIO_Init+0x214>)
 8008fbc:	f043 0302 	orr.w	r3, r3, #2
 8008fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8008fc2:	4b6a      	ldr	r3, [pc, #424]	@ (800916c <MX_GPIO_Init+0x214>)
 8008fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fc6:	f003 0302 	and.w	r3, r3, #2
 8008fca:	60fb      	str	r3, [r7, #12]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008fce:	4b67      	ldr	r3, [pc, #412]	@ (800916c <MX_GPIO_Init+0x214>)
 8008fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fd2:	4a66      	ldr	r2, [pc, #408]	@ (800916c <MX_GPIO_Init+0x214>)
 8008fd4:	f043 0308 	orr.w	r3, r3, #8
 8008fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8008fda:	4b64      	ldr	r3, [pc, #400]	@ (800916c <MX_GPIO_Init+0x214>)
 8008fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fde:	f003 0308 	and.w	r3, r3, #8
 8008fe2:	60bb      	str	r3, [r7, #8]
 8008fe4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008fe6:	4b61      	ldr	r3, [pc, #388]	@ (800916c <MX_GPIO_Init+0x214>)
 8008fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fea:	4a60      	ldr	r2, [pc, #384]	@ (800916c <MX_GPIO_Init+0x214>)
 8008fec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8008ff2:	4b5e      	ldr	r3, [pc, #376]	@ (800916c <MX_GPIO_Init+0x214>)
 8008ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ffa:	607b      	str	r3, [r7, #4]
 8008ffc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8008ffe:	2200      	movs	r2, #0
 8009000:	f244 0181 	movw	r1, #16513	@ 0x4081
 8009004:	485a      	ldr	r0, [pc, #360]	@ (8009170 <MX_GPIO_Init+0x218>)
 8009006:	f001 fa87 	bl	800a518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800900a:	2200      	movs	r2, #0
 800900c:	2140      	movs	r1, #64	@ 0x40
 800900e:	4859      	ldr	r0, [pc, #356]	@ (8009174 <MX_GPIO_Init+0x21c>)
 8009010:	f001 fa82 	bl	800a518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8009014:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800901a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800901e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009020:	2300      	movs	r3, #0
 8009022:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8009024:	f107 031c 	add.w	r3, r7, #28
 8009028:	4619      	mov	r1, r3
 800902a:	4853      	ldr	r0, [pc, #332]	@ (8009178 <MX_GPIO_Init+0x220>)
 800902c:	f001 f8c8 	bl	800a1c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8009030:	2332      	movs	r3, #50	@ 0x32
 8009032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009034:	2302      	movs	r3, #2
 8009036:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009038:	2300      	movs	r3, #0
 800903a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800903c:	2303      	movs	r3, #3
 800903e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009040:	230b      	movs	r3, #11
 8009042:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009044:	f107 031c 	add.w	r3, r7, #28
 8009048:	4619      	mov	r1, r3
 800904a:	484b      	ldr	r0, [pc, #300]	@ (8009178 <MX_GPIO_Init+0x220>)
 800904c:	f001 f8b8 	bl	800a1c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8009050:	2386      	movs	r3, #134	@ 0x86
 8009052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009054:	2302      	movs	r3, #2
 8009056:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009058:	2300      	movs	r3, #0
 800905a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800905c:	2303      	movs	r3, #3
 800905e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009060:	230b      	movs	r3, #11
 8009062:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009064:	f107 031c 	add.w	r3, r7, #28
 8009068:	4619      	mov	r1, r3
 800906a:	4844      	ldr	r0, [pc, #272]	@ (800917c <MX_GPIO_Init+0x224>)
 800906c:	f001 f8a8 	bl	800a1c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8009070:	f244 0381 	movw	r3, #16513	@ 0x4081
 8009074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009076:	2301      	movs	r3, #1
 8009078:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800907a:	2300      	movs	r3, #0
 800907c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800907e:	2300      	movs	r3, #0
 8009080:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009082:	f107 031c 	add.w	r3, r7, #28
 8009086:	4619      	mov	r1, r3
 8009088:	4839      	ldr	r0, [pc, #228]	@ (8009170 <MX_GPIO_Init+0x218>)
 800908a:	f001 f899 	bl	800a1c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800908e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009094:	2302      	movs	r3, #2
 8009096:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009098:	2300      	movs	r3, #0
 800909a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800909c:	2303      	movs	r3, #3
 800909e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80090a0:	230b      	movs	r3, #11
 80090a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80090a4:	f107 031c 	add.w	r3, r7, #28
 80090a8:	4619      	mov	r1, r3
 80090aa:	4831      	ldr	r0, [pc, #196]	@ (8009170 <MX_GPIO_Init+0x218>)
 80090ac:	f001 f888 	bl	800a1c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80090b0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80090b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090b6:	2302      	movs	r3, #2
 80090b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090ba:	2300      	movs	r3, #0
 80090bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090be:	2303      	movs	r3, #3
 80090c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80090c2:	2307      	movs	r3, #7
 80090c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80090c6:	f107 031c 	add.w	r3, r7, #28
 80090ca:	4619      	mov	r1, r3
 80090cc:	482c      	ldr	r0, [pc, #176]	@ (8009180 <MX_GPIO_Init+0x228>)
 80090ce:	f001 f877 	bl	800a1c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80090d2:	2340      	movs	r3, #64	@ 0x40
 80090d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80090d6:	2301      	movs	r3, #1
 80090d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090da:	2300      	movs	r3, #0
 80090dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090de:	2300      	movs	r3, #0
 80090e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80090e2:	f107 031c 	add.w	r3, r7, #28
 80090e6:	4619      	mov	r1, r3
 80090e8:	4822      	ldr	r0, [pc, #136]	@ (8009174 <MX_GPIO_Init+0x21c>)
 80090ea:	f001 f869 	bl	800a1c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80090ee:	2380      	movs	r3, #128	@ 0x80
 80090f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80090f2:	2300      	movs	r3, #0
 80090f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090f6:	2300      	movs	r3, #0
 80090f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80090fa:	f107 031c 	add.w	r3, r7, #28
 80090fe:	4619      	mov	r1, r3
 8009100:	481c      	ldr	r0, [pc, #112]	@ (8009174 <MX_GPIO_Init+0x21c>)
 8009102:	f001 f85d 	bl	800a1c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8009106:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800910a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800910c:	2302      	movs	r3, #2
 800910e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009110:	2300      	movs	r3, #0
 8009112:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009114:	2303      	movs	r3, #3
 8009116:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009118:	230a      	movs	r3, #10
 800911a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800911c:	f107 031c 	add.w	r3, r7, #28
 8009120:	4619      	mov	r1, r3
 8009122:	4816      	ldr	r0, [pc, #88]	@ (800917c <MX_GPIO_Init+0x224>)
 8009124:	f001 f84c 	bl	800a1c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8009128:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800912c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800912e:	2300      	movs	r3, #0
 8009130:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009132:	2300      	movs	r3, #0
 8009134:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8009136:	f107 031c 	add.w	r3, r7, #28
 800913a:	4619      	mov	r1, r3
 800913c:	480f      	ldr	r0, [pc, #60]	@ (800917c <MX_GPIO_Init+0x224>)
 800913e:	f001 f83f 	bl	800a1c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8009142:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8009146:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009148:	2302      	movs	r3, #2
 800914a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800914c:	2300      	movs	r3, #0
 800914e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009150:	2303      	movs	r3, #3
 8009152:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009154:	230b      	movs	r3, #11
 8009156:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009158:	f107 031c 	add.w	r3, r7, #28
 800915c:	4619      	mov	r1, r3
 800915e:	4805      	ldr	r0, [pc, #20]	@ (8009174 <MX_GPIO_Init+0x21c>)
 8009160:	f001 f82e 	bl	800a1c0 <HAL_GPIO_Init>

}
 8009164:	bf00      	nop
 8009166:	3730      	adds	r7, #48	@ 0x30
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	40023800 	.word	0x40023800
 8009170:	40020400 	.word	0x40020400
 8009174:	40021800 	.word	0x40021800
 8009178:	40020800 	.word	0x40020800
 800917c:	40020000 	.word	0x40020000
 8009180:	40020c00 	.word	0x40020c00

08009184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009184:	b5b0      	push	{r4, r5, r7, lr}
 8009186:	f5ad 4d74 	sub.w	sp, sp, #62464	@ 0xf400
 800918a:	b0ba      	sub	sp, #232	@ 0xe8
 800918c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
  char file_read[20] = {0};
 800918e:	2300      	movs	r3, #0
 8009190:	f24f 4298 	movw	r2, #62616	@ 0xf498
 8009194:	443a      	add	r2, r7
 8009196:	6013      	str	r3, [r2, #0]
 8009198:	f24f 439c 	movw	r3, #62620	@ 0xf49c
 800919c:	443b      	add	r3, r7
 800919e:	2200      	movs	r2, #0
 80091a0:	601a      	str	r2, [r3, #0]
 80091a2:	605a      	str	r2, [r3, #4]
 80091a4:	609a      	str	r2, [r3, #8]
 80091a6:	60da      	str	r2, [r3, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80091a8:	f000 fea3 	bl	8009ef2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80091ac:	f000 fa9e 	bl	80096ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80091b0:	f7ff fed2 	bl	8008f58 <MX_GPIO_Init>
  MX_FATFS_Init();
 80091b4:	f002 fc42 	bl	800ba3c <MX_FATFS_Init>
  MX_SPI3_Init();
 80091b8:	f000 fc9a 	bl	8009af0 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  uint32_t start_time = 0;
 80091bc:	2300      	movs	r3, #0
 80091be:	f24f 42c4 	movw	r2, #62660	@ 0xf4c4
 80091c2:	443a      	add	r2, r7
 80091c4:	6013      	str	r3, [r2, #0]
  uint16_t file_cont = 1;
 80091c6:	2301      	movs	r3, #1
 80091c8:	f24f 42de 	movw	r2, #62686	@ 0xf4de
 80091cc:	443a      	add	r2, r7
 80091ce:	8013      	strh	r3, [r2, #0]
  double ETS_time = 0, NLLS_time = 0;
 80091d0:	f04f 0200 	mov.w	r2, #0
 80091d4:	f04f 0300 	mov.w	r3, #0
 80091d8:	f24f 41b8 	movw	r1, #62648	@ 0xf4b8
 80091dc:	4439      	add	r1, r7
 80091de:	e9c1 2300 	strd	r2, r3, [r1]
 80091e2:	f04f 0200 	mov.w	r2, #0
 80091e6:	f04f 0300 	mov.w	r3, #0
 80091ea:	f24f 41b0 	movw	r1, #62640	@ 0xf4b0
 80091ee:	4439      	add	r1, r7
 80091f0:	e9c1 2300 	strd	r2, r3, [r1]

  FATFS fs;
  FRESULT res;

  // Monta o sistema de arquivos na unidade lógica "0:"
  res = f_mount(&fs, "0:", 1);
 80091f4:	f24f 2368 	movw	r3, #62056	@ 0xf268
 80091f8:	443b      	add	r3, r7
 80091fa:	2201      	movs	r2, #1
 80091fc:	4984      	ldr	r1, [pc, #528]	@ (8009410 <main+0x28c>)
 80091fe:	4618      	mov	r0, r3
 8009200:	f004 f98e 	bl	800d520 <f_mount>
 8009204:	4603      	mov	r3, r0
 8009206:	f24f 42af 	movw	r2, #62639	@ 0xf4af
 800920a:	443a      	add	r2, r7
 800920c:	7013      	strb	r3, [r2, #0]
  if (res != FR_OK) {
 800920e:	f24f 43af 	movw	r3, #62639	@ 0xf4af
 8009212:	443b      	add	r3, r7
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d009      	beq.n	800922e <main+0xaa>
      printf("Falha ao montar o sistema de arquivos: %d\n", res);
 800921a:	f24f 43af 	movw	r3, #62639	@ 0xf4af
 800921e:	443b      	add	r3, r7
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	4619      	mov	r1, r3
 8009224:	487b      	ldr	r0, [pc, #492]	@ (8009414 <main+0x290>)
 8009226:	f006 fccf 	bl	800fbc8 <iprintf>
      Error_Handler(); // ou retorne um erro
 800922a:	f000 fac5 	bl	80097b8 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(file_cont >= 3001)
 800922e:	f24f 43de 	movw	r3, #62686	@ 0xf4de
 8009232:	443b      	add	r3, r7
 8009234:	881b      	ldrh	r3, [r3, #0]
 8009236:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800923a:	4293      	cmp	r3, r2
 800923c:	d901      	bls.n	8009242 <main+0xbe>
	{
		return 1;
 800923e:	2301      	movs	r3, #1
 8009240:	e235      	b.n	80096ae <main+0x52a>
	}

	sprintf(file_read, "0:/DATA/run%d.txt", file_cont);  // Prefixo de volume (0:) é comum no FatFs
 8009242:	f24f 43de 	movw	r3, #62686	@ 0xf4de
 8009246:	443b      	add	r3, r7
 8009248:	881a      	ldrh	r2, [r3, #0]
 800924a:	f24f 4398 	movw	r3, #62616	@ 0xf498
 800924e:	443b      	add	r3, r7
 8009250:	4971      	ldr	r1, [pc, #452]	@ (8009418 <main+0x294>)
 8009252:	4618      	mov	r0, r3
 8009254:	f006 fcca 	bl	800fbec <siprintf>

	FIL fil;
	FRESULT res;

	res = f_open(&fil, file_read, FA_READ);
 8009258:	f24f 4198 	movw	r1, #62616	@ 0xf498
 800925c:	4439      	add	r1, r7
 800925e:	4b6f      	ldr	r3, [pc, #444]	@ (800941c <main+0x298>)
 8009260:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
 8009264:	f103 03e0 	add.w	r3, r3, #224	@ 0xe0
 8009268:	443b      	add	r3, r7
 800926a:	2201      	movs	r2, #1
 800926c:	4618      	mov	r0, r3
 800926e:	f004 f99d 	bl	800d5ac <f_open>
 8009272:	4603      	mov	r3, r0
 8009274:	f24f 42ae 	movw	r2, #62638	@ 0xf4ae
 8009278:	443a      	add	r2, r7
 800927a:	7013      	strb	r3, [r2, #0]
	if (res != FR_OK)
 800927c:	f24f 43ae 	movw	r3, #62638	@ 0xf4ae
 8009280:	443b      	add	r3, r7
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d001      	beq.n	800928c <main+0x108>
	{
		return 1;
 8009288:	2301      	movs	r3, #1
 800928a:	e210      	b.n	80096ae <main+0x52a>
	}

	char line[61340];
	UINT br; // Bytes lidos

	double *linhas[] = {mx, my, mz};  // Vetor de ponteiros para facilitar o acesso
 800928c:	f24f 43e0 	movw	r3, #62688	@ 0xf4e0
 8009290:	443b      	add	r3, r7
 8009292:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8009296:	4a62      	ldr	r2, [pc, #392]	@ (8009420 <main+0x29c>)
 8009298:	ca07      	ldmia	r2, {r0, r1, r2}
 800929a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	for (int i = 0; i < 3; i++)
 800929e:	2300      	movs	r3, #0
 80092a0:	f24f 42d8 	movw	r2, #62680	@ 0xf4d8
 80092a4:	443a      	add	r2, r7
 80092a6:	6013      	str	r3, [r2, #0]
 80092a8:	e0c9      	b.n	800943e <main+0x2ba>
	{
		// lê uma linha completa (até '\n' ou fim do buffer)
		int line_pos = 0;
 80092aa:	2300      	movs	r3, #0
 80092ac:	f24f 42d4 	movw	r2, #62676	@ 0xf4d4
 80092b0:	443a      	add	r2, r7
 80092b2:	6013      	str	r3, [r2, #0]
		char ch;
		do {
			res = f_read(&fil, &ch, 1, &br);
 80092b4:	f24f 2364 	movw	r3, #62052	@ 0xf264
 80092b8:	443b      	add	r3, r7
 80092ba:	f24f 2153 	movw	r1, #62035	@ 0xf253
 80092be:	4439      	add	r1, r7
 80092c0:	4856      	ldr	r0, [pc, #344]	@ (800941c <main+0x298>)
 80092c2:	f24f 42e0 	movw	r2, #62688	@ 0xf4e0
 80092c6:	4402      	add	r2, r0
 80092c8:	19d0      	adds	r0, r2, r7
 80092ca:	2201      	movs	r2, #1
 80092cc:	f004 fb28 	bl	800d920 <f_read>
 80092d0:	4603      	mov	r3, r0
 80092d2:	f24f 42ae 	movw	r2, #62638	@ 0xf4ae
 80092d6:	443a      	add	r2, r7
 80092d8:	7013      	strb	r3, [r2, #0]
			if (res != FR_OK || br == 0) {
 80092da:	f24f 43ae 	movw	r3, #62638	@ 0xf4ae
 80092de:	443b      	add	r3, r7
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d107      	bne.n	80092f6 <main+0x172>
 80092e6:	f24f 43e0 	movw	r3, #62688	@ 0xf4e0
 80092ea:	443b      	add	r3, r7
 80092ec:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d101      	bne.n	80092fa <main+0x176>
				return 1;
 80092f6:	2301      	movs	r3, #1
 80092f8:	e1d9      	b.n	80096ae <main+0x52a>
			}
			line[line_pos++] = ch;
 80092fa:	f24f 43d4 	movw	r3, #62676	@ 0xf4d4
 80092fe:	443b      	add	r3, r7
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	1c5a      	adds	r2, r3, #1
 8009304:	f24f 41d4 	movw	r1, #62676	@ 0xf4d4
 8009308:	4439      	add	r1, r7
 800930a:	600a      	str	r2, [r1, #0]
 800930c:	f24f 42e0 	movw	r2, #62688	@ 0xf4e0
 8009310:	443a      	add	r2, r7
 8009312:	f2a2 228d 	subw	r2, r2, #653	@ 0x28d
 8009316:	7811      	ldrb	r1, [r2, #0]
 8009318:	f507 629c 	add.w	r2, r7, #1248	@ 0x4e0
 800931c:	f5a2 720b 	sub.w	r2, r2, #556	@ 0x22c
 8009320:	54d1      	strb	r1, [r2, r3]
		} while (ch != '\n' && line_pos < sizeof(line)-1);
 8009322:	f24f 43e0 	movw	r3, #62688	@ 0xf4e0
 8009326:	443b      	add	r3, r7
 8009328:	f2a3 238d 	subw	r3, r3, #653	@ 0x28d
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	2b0a      	cmp	r3, #10
 8009330:	d007      	beq.n	8009342 <main+0x1be>
 8009332:	f24f 43d4 	movw	r3, #62676	@ 0xf4d4
 8009336:	443b      	add	r3, r7
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f64e 729a 	movw	r2, #61338	@ 0xef9a
 800933e:	4293      	cmp	r3, r2
 8009340:	d9b8      	bls.n	80092b4 <main+0x130>
		line[line_pos] = '\0';
 8009342:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8009346:	f5a3 720b 	sub.w	r2, r3, #556	@ 0x22c
 800934a:	f24f 43d4 	movw	r3, #62676	@ 0xf4d4
 800934e:	443b      	add	r3, r7
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4413      	add	r3, r2
 8009354:	2200      	movs	r2, #0
 8009356:	701a      	strb	r2, [r3, #0]

		char *token = strtok(line, ",");
 8009358:	4b32      	ldr	r3, [pc, #200]	@ (8009424 <main+0x2a0>)
 800935a:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
 800935e:	f103 03e0 	add.w	r3, r3, #224	@ 0xe0
 8009362:	443b      	add	r3, r7
 8009364:	4930      	ldr	r1, [pc, #192]	@ (8009428 <main+0x2a4>)
 8009366:	4618      	mov	r0, r3
 8009368:	f006 fcbe 	bl	800fce8 <strtok>
 800936c:	f24f 43d0 	movw	r3, #62672	@ 0xf4d0
 8009370:	443b      	add	r3, r7
 8009372:	6018      	str	r0, [r3, #0]
		int j = 0;
 8009374:	2300      	movs	r3, #0
 8009376:	f24f 42cc 	movw	r2, #62668	@ 0xf4cc
 800937a:	443a      	add	r2, r7
 800937c:	6013      	str	r3, [r2, #0]

		while (token != NULL && j < 1112)
 800937e:	e031      	b.n	80093e4 <main+0x260>
		{
			linhas[i][j] = strtof(token, NULL);
 8009380:	2100      	movs	r1, #0
 8009382:	f24f 43d0 	movw	r3, #62672	@ 0xf4d0
 8009386:	443b      	add	r3, r7
 8009388:	6818      	ldr	r0, [r3, #0]
 800938a:	f005 fc8b 	bl	800eca4 <strtof>
 800938e:	ee10 1a10 	vmov	r1, s0
 8009392:	f24f 43e0 	movw	r3, #62688	@ 0xf4e0
 8009396:	443b      	add	r3, r7
 8009398:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 800939c:	f24f 42d8 	movw	r2, #62680	@ 0xf4d8
 80093a0:	443a      	add	r2, r7
 80093a2:	6812      	ldr	r2, [r2, #0]
 80093a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80093a8:	f24f 43cc 	movw	r3, #62668	@ 0xf4cc
 80093ac:	443b      	add	r3, r7
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	00db      	lsls	r3, r3, #3
 80093b2:	18d4      	adds	r4, r2, r3
 80093b4:	4608      	mov	r0, r1
 80093b6:	f7f7 f8e7 	bl	8000588 <__aeabi_f2d>
 80093ba:	4602      	mov	r2, r0
 80093bc:	460b      	mov	r3, r1
 80093be:	e9c4 2300 	strd	r2, r3, [r4]
			token = strtok(NULL, ",");
 80093c2:	4919      	ldr	r1, [pc, #100]	@ (8009428 <main+0x2a4>)
 80093c4:	2000      	movs	r0, #0
 80093c6:	f006 fc8f 	bl	800fce8 <strtok>
 80093ca:	f24f 43d0 	movw	r3, #62672	@ 0xf4d0
 80093ce:	443b      	add	r3, r7
 80093d0:	6018      	str	r0, [r3, #0]
			j++;
 80093d2:	f24f 43cc 	movw	r3, #62668	@ 0xf4cc
 80093d6:	443b      	add	r3, r7
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	3301      	adds	r3, #1
 80093dc:	f24f 42cc 	movw	r2, #62668	@ 0xf4cc
 80093e0:	443a      	add	r2, r7
 80093e2:	6013      	str	r3, [r2, #0]
		while (token != NULL && j < 1112)
 80093e4:	f24f 43d0 	movw	r3, #62672	@ 0xf4d0
 80093e8:	443b      	add	r3, r7
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d006      	beq.n	80093fe <main+0x27a>
 80093f0:	f24f 43cc 	movw	r3, #62668	@ 0xf4cc
 80093f4:	443b      	add	r3, r7
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 80093fc:	dbc0      	blt.n	8009380 <main+0x1fc>
		}

		if (j != 1112)
 80093fe:	f24f 43cc 	movw	r3, #62668	@ 0xf4cc
 8009402:	443b      	add	r3, r7
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 800940a:	d00f      	beq.n	800942c <main+0x2a8>
		{
			return 1;
 800940c:	2301      	movs	r3, #1
 800940e:	e14e      	b.n	80096ae <main+0x52a>
 8009410:	08013fb8 	.word	0x08013fb8
 8009414:	08013fbc 	.word	0x08013fbc
 8009418:	08013fe8 	.word	0x08013fe8
 800941c:	ffff0ba4 	.word	0xffff0ba4
 8009420:	08014024 	.word	0x08014024
 8009424:	ffff0dd4 	.word	0xffff0dd4
 8009428:	08013ffc 	.word	0x08013ffc
	for (int i = 0; i < 3; i++)
 800942c:	f24f 43d8 	movw	r3, #62680	@ 0xf4d8
 8009430:	443b      	add	r3, r7
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	3301      	adds	r3, #1
 8009436:	f24f 42d8 	movw	r2, #62680	@ 0xf4d8
 800943a:	443a      	add	r2, r7
 800943c:	6013      	str	r3, [r2, #0]
 800943e:	f24f 43d8 	movw	r3, #62680	@ 0xf4d8
 8009442:	443b      	add	r3, r7
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2b02      	cmp	r3, #2
 8009448:	f77f af2f 	ble.w	80092aa <main+0x126>
		}
	}

	f_close(&fil);
 800944c:	4b9b      	ldr	r3, [pc, #620]	@ (80096bc <main+0x538>)
 800944e:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
 8009452:	f103 03e0 	add.w	r3, r3, #224	@ 0xe0
 8009456:	443b      	add	r3, r7
 8009458:	4618      	mov	r0, r3
 800945a:	f004 fd93 	bl	800df84 <f_close>

	start_time = HAL_GetTick();
 800945e:	f000 fd99 	bl	8009f94 <HAL_GetTick>
 8009462:	f24f 43c4 	movw	r3, #62660	@ 0xf4c4
 8009466:	443b      	add	r3, r7
 8009468:	6018      	str	r0, [r3, #0]
	ETS(mx, my, mz, p1);
 800946a:	4b95      	ldr	r3, [pc, #596]	@ (80096c0 <main+0x53c>)
 800946c:	4a95      	ldr	r2, [pc, #596]	@ (80096c4 <main+0x540>)
 800946e:	4996      	ldr	r1, [pc, #600]	@ (80096c8 <main+0x544>)
 8009470:	4896      	ldr	r0, [pc, #600]	@ (80096cc <main+0x548>)
 8009472:	f7fc fee9 	bl	8006248 <ETS>
	ETS_time = HAL_GetTick() - start_time;
 8009476:	f000 fd8d 	bl	8009f94 <HAL_GetTick>
 800947a:	4602      	mov	r2, r0
 800947c:	f24f 43c4 	movw	r3, #62660	@ 0xf4c4
 8009480:	443b      	add	r3, r7
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	1ad3      	subs	r3, r2, r3
 8009486:	4618      	mov	r0, r3
 8009488:	f7f7 f85c 	bl	8000544 <__aeabi_ui2d>
 800948c:	4602      	mov	r2, r0
 800948e:	460b      	mov	r3, r1
 8009490:	f24f 41b8 	movw	r1, #62648	@ 0xf4b8
 8009494:	4439      	add	r1, r7
 8009496:	e9c1 2300 	strd	r2, r3, [r1]

	start_time = HAL_GetTick();
 800949a:	f000 fd7b 	bl	8009f94 <HAL_GetTick>
 800949e:	f24f 43c4 	movw	r3, #62660	@ 0xf4c4
 80094a2:	443b      	add	r3, r7
 80094a4:	6018      	str	r0, [r3, #0]
	passos_NLLS = NLLS(mx, my, mz, p0);
 80094a6:	4b8a      	ldr	r3, [pc, #552]	@ (80096d0 <main+0x54c>)
 80094a8:	4a86      	ldr	r2, [pc, #536]	@ (80096c4 <main+0x540>)
 80094aa:	4987      	ldr	r1, [pc, #540]	@ (80096c8 <main+0x544>)
 80094ac:	4887      	ldr	r0, [pc, #540]	@ (80096cc <main+0x548>)
 80094ae:	f7f7 fef7 	bl	80012a0 <NLLS>
 80094b2:	4603      	mov	r3, r0
 80094b4:	461a      	mov	r2, r3
 80094b6:	4b87      	ldr	r3, [pc, #540]	@ (80096d4 <main+0x550>)
 80094b8:	701a      	strb	r2, [r3, #0]
	NLLS_time = HAL_GetTick() - start_time;
 80094ba:	f000 fd6b 	bl	8009f94 <HAL_GetTick>
 80094be:	4602      	mov	r2, r0
 80094c0:	f24f 43c4 	movw	r3, #62660	@ 0xf4c4
 80094c4:	443b      	add	r3, r7
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	1ad3      	subs	r3, r2, r3
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7f7 f83a 	bl	8000544 <__aeabi_ui2d>
 80094d0:	4602      	mov	r2, r0
 80094d2:	460b      	mov	r3, r1
 80094d4:	f24f 41b0 	movw	r1, #62640	@ 0xf4b0
 80094d8:	4439      	add	r1, r7
 80094da:	e9c1 2300 	strd	r2, r3, [r1]


	sprintf(file_read, "0:/RES/run%d.txt", file_cont);
 80094de:	f24f 43de 	movw	r3, #62686	@ 0xf4de
 80094e2:	443b      	add	r3, r7
 80094e4:	881a      	ldrh	r2, [r3, #0]
 80094e6:	f24f 4398 	movw	r3, #62616	@ 0xf498
 80094ea:	443b      	add	r3, r7
 80094ec:	497a      	ldr	r1, [pc, #488]	@ (80096d8 <main+0x554>)
 80094ee:	4618      	mov	r0, r3
 80094f0:	f006 fb7c 	bl	800fbec <siprintf>
	res = f_open(&fil, file_read, FA_WRITE | FA_CREATE_ALWAYS);
 80094f4:	f24f 4198 	movw	r1, #62616	@ 0xf498
 80094f8:	4439      	add	r1, r7
 80094fa:	4b70      	ldr	r3, [pc, #448]	@ (80096bc <main+0x538>)
 80094fc:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
 8009500:	f103 03e0 	add.w	r3, r3, #224	@ 0xe0
 8009504:	443b      	add	r3, r7
 8009506:	220a      	movs	r2, #10
 8009508:	4618      	mov	r0, r3
 800950a:	f004 f84f 	bl	800d5ac <f_open>
 800950e:	4603      	mov	r3, r0
 8009510:	f24f 42ae 	movw	r2, #62638	@ 0xf4ae
 8009514:	443a      	add	r2, r7
 8009516:	7013      	strb	r3, [r2, #0]
	if (res != FR_OK)
 8009518:	f24f 43ae 	movw	r3, #62638	@ 0xf4ae
 800951c:	443b      	add	r3, r7
 800951e:	781b      	ldrb	r3, [r3, #0]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d001      	beq.n	8009528 <main+0x3a4>
	{
		return 1;
 8009524:	2301      	movs	r3, #1
 8009526:	e0c2      	b.n	80096ae <main+0x52a>
	}

	char out_line[128];
	UINT bw;

	for (int i = 0; i < 9; i++) {
 8009528:	2300      	movs	r3, #0
 800952a:	f24f 42c8 	movw	r2, #62664	@ 0xf4c8
 800952e:	443a      	add	r2, r7
 8009530:	6013      	str	r3, [r2, #0]
 8009532:	e041      	b.n	80095b8 <main+0x434>
		sprintf(out_line, "%f, %f\n", p1[i], p0[i]);
 8009534:	4a62      	ldr	r2, [pc, #392]	@ (80096c0 <main+0x53c>)
 8009536:	f24f 43c8 	movw	r3, #62664	@ 0xf4c8
 800953a:	443b      	add	r3, r7
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	00db      	lsls	r3, r3, #3
 8009540:	4413      	add	r3, r2
 8009542:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009546:	4a62      	ldr	r2, [pc, #392]	@ (80096d0 <main+0x54c>)
 8009548:	f24f 43c8 	movw	r3, #62664	@ 0xf4c8
 800954c:	443b      	add	r3, r7
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	00db      	lsls	r3, r3, #3
 8009552:	4413      	add	r3, r2
 8009554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009558:	4860      	ldr	r0, [pc, #384]	@ (80096dc <main+0x558>)
 800955a:	f24f 41e0 	movw	r1, #62688	@ 0xf4e0
 800955e:	4401      	add	r1, r0
 8009560:	19c8      	adds	r0, r1, r7
 8009562:	e9cd 2300 	strd	r2, r3, [sp]
 8009566:	4622      	mov	r2, r4
 8009568:	462b      	mov	r3, r5
 800956a:	495d      	ldr	r1, [pc, #372]	@ (80096e0 <main+0x55c>)
 800956c:	f006 fb3e 	bl	800fbec <siprintf>
		f_write(&fil, out_line, strlen(out_line), &bw);
 8009570:	4b5a      	ldr	r3, [pc, #360]	@ (80096dc <main+0x558>)
 8009572:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
 8009576:	f103 03e0 	add.w	r3, r3, #224	@ 0xe0
 800957a:	443b      	add	r3, r7
 800957c:	4618      	mov	r0, r3
 800957e:	f7f6 fe97 	bl	80002b0 <strlen>
 8009582:	4602      	mov	r2, r0
 8009584:	f24f 2354 	movw	r3, #62036	@ 0xf254
 8009588:	443b      	add	r3, r7
 800958a:	4954      	ldr	r1, [pc, #336]	@ (80096dc <main+0x558>)
 800958c:	f501 4174 	add.w	r1, r1, #62464	@ 0xf400
 8009590:	f101 01e0 	add.w	r1, r1, #224	@ 0xe0
 8009594:	4439      	add	r1, r7
 8009596:	4849      	ldr	r0, [pc, #292]	@ (80096bc <main+0x538>)
 8009598:	f500 4074 	add.w	r0, r0, #62464	@ 0xf400
 800959c:	f100 00e0 	add.w	r0, r0, #224	@ 0xe0
 80095a0:	4438      	add	r0, r7
 80095a2:	f004 fafc 	bl	800db9e <f_write>
	for (int i = 0; i < 9; i++) {
 80095a6:	f24f 43c8 	movw	r3, #62664	@ 0xf4c8
 80095aa:	443b      	add	r3, r7
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	3301      	adds	r3, #1
 80095b0:	f24f 42c8 	movw	r2, #62664	@ 0xf4c8
 80095b4:	443a      	add	r2, r7
 80095b6:	6013      	str	r3, [r2, #0]
 80095b8:	f24f 43c8 	movw	r3, #62664	@ 0xf4c8
 80095bc:	443b      	add	r3, r7
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	2b08      	cmp	r3, #8
 80095c2:	ddb7      	ble.n	8009534 <main+0x3b0>
	}

	sprintf(out_line, "%f, %f\n", ETS_time, NLLS_time);
 80095c4:	4845      	ldr	r0, [pc, #276]	@ (80096dc <main+0x558>)
 80095c6:	f24f 43e0 	movw	r3, #62688	@ 0xf4e0
 80095ca:	4403      	add	r3, r0
 80095cc:	19d8      	adds	r0, r3, r7
 80095ce:	f24f 43b0 	movw	r3, #62640	@ 0xf4b0
 80095d2:	443b      	add	r3, r7
 80095d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d8:	e9cd 2300 	strd	r2, r3, [sp]
 80095dc:	f24f 43b8 	movw	r3, #62648	@ 0xf4b8
 80095e0:	443b      	add	r3, r7
 80095e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e6:	493e      	ldr	r1, [pc, #248]	@ (80096e0 <main+0x55c>)
 80095e8:	f006 fb00 	bl	800fbec <siprintf>
	f_write(&fil, out_line, strlen(out_line), &bw);
 80095ec:	4b3b      	ldr	r3, [pc, #236]	@ (80096dc <main+0x558>)
 80095ee:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
 80095f2:	f103 03e0 	add.w	r3, r3, #224	@ 0xe0
 80095f6:	443b      	add	r3, r7
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7f6 fe59 	bl	80002b0 <strlen>
 80095fe:	4602      	mov	r2, r0
 8009600:	f24f 2354 	movw	r3, #62036	@ 0xf254
 8009604:	443b      	add	r3, r7
 8009606:	4935      	ldr	r1, [pc, #212]	@ (80096dc <main+0x558>)
 8009608:	f501 4174 	add.w	r1, r1, #62464	@ 0xf400
 800960c:	f101 01e0 	add.w	r1, r1, #224	@ 0xe0
 8009610:	4439      	add	r1, r7
 8009612:	482a      	ldr	r0, [pc, #168]	@ (80096bc <main+0x538>)
 8009614:	f500 4074 	add.w	r0, r0, #62464	@ 0xf400
 8009618:	f100 00e0 	add.w	r0, r0, #224	@ 0xe0
 800961c:	4438      	add	r0, r7
 800961e:	f004 fabe 	bl	800db9e <f_write>

	sprintf(out_line, "0, %u\n", passos_NLLS);
 8009622:	4b2c      	ldr	r3, [pc, #176]	@ (80096d4 <main+0x550>)
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	461a      	mov	r2, r3
 8009628:	4b2c      	ldr	r3, [pc, #176]	@ (80096dc <main+0x558>)
 800962a:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
 800962e:	f103 03e0 	add.w	r3, r3, #224	@ 0xe0
 8009632:	443b      	add	r3, r7
 8009634:	492b      	ldr	r1, [pc, #172]	@ (80096e4 <main+0x560>)
 8009636:	4618      	mov	r0, r3
 8009638:	f006 fad8 	bl	800fbec <siprintf>
	f_write(&fil, out_line, strlen(out_line), &bw);
 800963c:	4b27      	ldr	r3, [pc, #156]	@ (80096dc <main+0x558>)
 800963e:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
 8009642:	f103 03e0 	add.w	r3, r3, #224	@ 0xe0
 8009646:	443b      	add	r3, r7
 8009648:	4618      	mov	r0, r3
 800964a:	f7f6 fe31 	bl	80002b0 <strlen>
 800964e:	4602      	mov	r2, r0
 8009650:	f24f 2354 	movw	r3, #62036	@ 0xf254
 8009654:	443b      	add	r3, r7
 8009656:	4921      	ldr	r1, [pc, #132]	@ (80096dc <main+0x558>)
 8009658:	f501 4174 	add.w	r1, r1, #62464	@ 0xf400
 800965c:	f101 01e0 	add.w	r1, r1, #224	@ 0xe0
 8009660:	4439      	add	r1, r7
 8009662:	4816      	ldr	r0, [pc, #88]	@ (80096bc <main+0x538>)
 8009664:	f500 4074 	add.w	r0, r0, #62464	@ 0xf400
 8009668:	f100 00e0 	add.w	r0, r0, #224	@ 0xe0
 800966c:	4438      	add	r0, r7
 800966e:	f004 fa96 	bl	800db9e <f_write>

	f_close(&fil);
 8009672:	4b12      	ldr	r3, [pc, #72]	@ (80096bc <main+0x538>)
 8009674:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
 8009678:	f103 03e0 	add.w	r3, r3, #224	@ 0xe0
 800967c:	443b      	add	r3, r7
 800967e:	4618      	mov	r0, r3
 8009680:	f004 fc80 	bl	800df84 <f_close>

	file_cont++;
 8009684:	f24f 43de 	movw	r3, #62686	@ 0xf4de
 8009688:	443b      	add	r3, r7
 800968a:	881b      	ldrh	r3, [r3, #0]
 800968c:	3301      	adds	r3, #1
 800968e:	f24f 42de 	movw	r2, #62686	@ 0xf4de
 8009692:	443a      	add	r2, r7
 8009694:	8013      	strh	r3, [r2, #0]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8009696:	2180      	movs	r1, #128	@ 0x80
 8009698:	4813      	ldr	r0, [pc, #76]	@ (80096e8 <main+0x564>)
 800969a:	f000 ff56 	bl	800a54a <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 800969e:	2064      	movs	r0, #100	@ 0x64
 80096a0:	f000 fc84 	bl	8009fac <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80096a4:	2180      	movs	r1, #128	@ 0x80
 80096a6:	4810      	ldr	r0, [pc, #64]	@ (80096e8 <main+0x564>)
 80096a8:	f000 ff4f 	bl	800a54a <HAL_GPIO_TogglePin>
  {
 80096ac:	e5bf      	b.n	800922e <main+0xaa>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	f507 4774 	add.w	r7, r7, #62464	@ 0xf400
 80096b4:	37e0      	adds	r7, #224	@ 0xe0
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bdb0      	pop	{r4, r5, r7, pc}
 80096ba:	bf00      	nop
 80096bc:	ffff0ba4 	.word	0xffff0ba4
 80096c0:	20006a58 	.word	0x20006a58
 80096c4:	20004798 	.word	0x20004798
 80096c8:	200024d8 	.word	0x200024d8
 80096cc:	20000218 	.word	0x20000218
 80096d0:	20006aa0 	.word	0x20006aa0
 80096d4:	20006ae8 	.word	0x20006ae8
 80096d8:	08014000 	.word	0x08014000
 80096dc:	ffff0b24 	.word	0xffff0b24
 80096e0:	08014014 	.word	0x08014014
 80096e4:	0801401c 	.word	0x0801401c
 80096e8:	40020400 	.word	0x40020400

080096ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b094      	sub	sp, #80	@ 0x50
 80096f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80096f2:	f107 0320 	add.w	r3, r7, #32
 80096f6:	2230      	movs	r2, #48	@ 0x30
 80096f8:	2100      	movs	r1, #0
 80096fa:	4618      	mov	r0, r3
 80096fc:	f006 fad9 	bl	800fcb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009700:	f107 030c 	add.w	r3, r7, #12
 8009704:	2200      	movs	r2, #0
 8009706:	601a      	str	r2, [r3, #0]
 8009708:	605a      	str	r2, [r3, #4]
 800970a:	609a      	str	r2, [r3, #8]
 800970c:	60da      	str	r2, [r3, #12]
 800970e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009710:	4b27      	ldr	r3, [pc, #156]	@ (80097b0 <SystemClock_Config+0xc4>)
 8009712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009714:	4a26      	ldr	r2, [pc, #152]	@ (80097b0 <SystemClock_Config+0xc4>)
 8009716:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800971a:	6413      	str	r3, [r2, #64]	@ 0x40
 800971c:	4b24      	ldr	r3, [pc, #144]	@ (80097b0 <SystemClock_Config+0xc4>)
 800971e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009724:	60bb      	str	r3, [r7, #8]
 8009726:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8009728:	4b22      	ldr	r3, [pc, #136]	@ (80097b4 <SystemClock_Config+0xc8>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8009730:	4a20      	ldr	r2, [pc, #128]	@ (80097b4 <SystemClock_Config+0xc8>)
 8009732:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009736:	6013      	str	r3, [r2, #0]
 8009738:	4b1e      	ldr	r3, [pc, #120]	@ (80097b4 <SystemClock_Config+0xc8>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009740:	607b      	str	r3, [r7, #4]
 8009742:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009744:	2301      	movs	r3, #1
 8009746:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8009748:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800974c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800974e:	2302      	movs	r3, #2
 8009750:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009752:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009756:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8009758:	2304      	movs	r3, #4
 800975a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800975c:	2348      	movs	r3, #72	@ 0x48
 800975e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009760:	2302      	movs	r3, #2
 8009762:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8009764:	2303      	movs	r3, #3
 8009766:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009768:	f107 0320 	add.w	r3, r7, #32
 800976c:	4618      	mov	r0, r3
 800976e:	f000 ff07 	bl	800a580 <HAL_RCC_OscConfig>
 8009772:	4603      	mov	r3, r0
 8009774:	2b00      	cmp	r3, #0
 8009776:	d001      	beq.n	800977c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8009778:	f000 f81e 	bl	80097b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800977c:	230f      	movs	r3, #15
 800977e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009780:	2302      	movs	r3, #2
 8009782:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009784:	2300      	movs	r3, #0
 8009786:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8009788:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800978c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800978e:	2300      	movs	r3, #0
 8009790:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8009792:	f107 030c 	add.w	r3, r7, #12
 8009796:	2102      	movs	r1, #2
 8009798:	4618      	mov	r0, r3
 800979a:	f001 f995 	bl	800aac8 <HAL_RCC_ClockConfig>
 800979e:	4603      	mov	r3, r0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d001      	beq.n	80097a8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80097a4:	f000 f808 	bl	80097b8 <Error_Handler>
  }
}
 80097a8:	bf00      	nop
 80097aa:	3750      	adds	r7, #80	@ 0x50
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	40023800 	.word	0x40023800
 80097b4:	40007000 	.word	0x40007000

080097b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80097b8:	b480      	push	{r7}
 80097ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80097bc:	b672      	cpsid	i
}
 80097be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80097c0:	bf00      	nop
 80097c2:	e7fd      	b.n	80097c0 <Error_Handler+0x8>

080097c4 <SD_SendDummyClock>:
#define SD_CS_LOW()   HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET)
#define SD_CS_HIGH()  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET)

extern SPI_HandleTypeDef hspi3; // Use a instância correta do SPI

static void SD_SendDummyClock(void) {
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
    uint8_t dummy = 0xFF;
 80097ca:	23ff      	movs	r3, #255	@ 0xff
 80097cc:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < 10; i++)
 80097ce:	2300      	movs	r3, #0
 80097d0:	607b      	str	r3, [r7, #4]
 80097d2:	e009      	b.n	80097e8 <SD_SendDummyClock+0x24>
        HAL_SPI_Transmit(&hspi3, &dummy, 1, HAL_MAX_DELAY);
 80097d4:	1cf9      	adds	r1, r7, #3
 80097d6:	f04f 33ff 	mov.w	r3, #4294967295
 80097da:	2201      	movs	r2, #1
 80097dc:	4806      	ldr	r0, [pc, #24]	@ (80097f8 <SD_SendDummyClock+0x34>)
 80097de:	f001 fc10 	bl	800b002 <HAL_SPI_Transmit>
    for (int i = 0; i < 10; i++)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	3301      	adds	r3, #1
 80097e6:	607b      	str	r3, [r7, #4]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2b09      	cmp	r3, #9
 80097ec:	ddf2      	ble.n	80097d4 <SD_SendDummyClock+0x10>
}
 80097ee:	bf00      	nop
 80097f0:	bf00      	nop
 80097f2:	3708      	adds	r7, #8
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	20006aec 	.word	0x20006aec

080097fc <SD_TransmitByte>:

static uint8_t SD_TransmitByte(uint8_t data) {
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b086      	sub	sp, #24
 8009800:	af02      	add	r7, sp, #8
 8009802:	4603      	mov	r3, r0
 8009804:	71fb      	strb	r3, [r7, #7]
    uint8_t received;
    HAL_SPI_TransmitReceive(&hspi3, &data, &received, 1, HAL_MAX_DELAY);
 8009806:	f107 020f 	add.w	r2, r7, #15
 800980a:	1df9      	adds	r1, r7, #7
 800980c:	f04f 33ff 	mov.w	r3, #4294967295
 8009810:	9300      	str	r3, [sp, #0]
 8009812:	2301      	movs	r3, #1
 8009814:	4803      	ldr	r0, [pc, #12]	@ (8009824 <SD_TransmitByte+0x28>)
 8009816:	f001 fd6a 	bl	800b2ee <HAL_SPI_TransmitReceive>
    return received;
 800981a:	7bfb      	ldrb	r3, [r7, #15]
}
 800981c:	4618      	mov	r0, r3
 800981e:	3710      	adds	r7, #16
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	20006aec 	.word	0x20006aec

08009828 <SD_ReceiveByte>:

static uint8_t SD_ReceiveByte(void) {
 8009828:	b580      	push	{r7, lr}
 800982a:	af00      	add	r7, sp, #0
    return SD_TransmitByte(0xFF);
 800982c:	20ff      	movs	r0, #255	@ 0xff
 800982e:	f7ff ffe5 	bl	80097fc <SD_TransmitByte>
 8009832:	4603      	mov	r3, r0
}
 8009834:	4618      	mov	r0, r3
 8009836:	bd80      	pop	{r7, pc}

08009838 <SD_WaitReady>:

static uint8_t SD_WaitReady(void) {
 8009838:	b580      	push	{r7, lr}
 800983a:	b082      	sub	sp, #8
 800983c:	af00      	add	r7, sp, #0
    uint8_t res;
    uint32_t timeout = HAL_GetTick();
 800983e:	f000 fba9 	bl	8009f94 <HAL_GetTick>
 8009842:	6078      	str	r0, [r7, #4]
    do {
        res = SD_ReceiveByte();
 8009844:	f7ff fff0 	bl	8009828 <SD_ReceiveByte>
 8009848:	4603      	mov	r3, r0
 800984a:	70fb      	strb	r3, [r7, #3]
        if (res == 0xFF) return 1;
 800984c:	78fb      	ldrb	r3, [r7, #3]
 800984e:	2bff      	cmp	r3, #255	@ 0xff
 8009850:	d101      	bne.n	8009856 <SD_WaitReady+0x1e>
 8009852:	2301      	movs	r3, #1
 8009854:	e008      	b.n	8009868 <SD_WaitReady+0x30>
    } while ((HAL_GetTick() - timeout) < 500);
 8009856:	f000 fb9d 	bl	8009f94 <HAL_GetTick>
 800985a:	4602      	mov	r2, r0
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	1ad3      	subs	r3, r2, r3
 8009860:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8009864:	d3ee      	bcc.n	8009844 <SD_WaitReady+0xc>
    return 0;
 8009866:	2300      	movs	r3, #0
}
 8009868:	4618      	mov	r0, r3
 800986a:	3708      	adds	r7, #8
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <SD_Select>:

static void SD_Select(void) {
 8009870:	b580      	push	{r7, lr}
 8009872:	af00      	add	r7, sp, #0
    SD_CS_LOW();
 8009874:	2200      	movs	r2, #0
 8009876:	2110      	movs	r1, #16
 8009878:	4803      	ldr	r0, [pc, #12]	@ (8009888 <SD_Select+0x18>)
 800987a:	f000 fe4d 	bl	800a518 <HAL_GPIO_WritePin>
    SD_ReceiveByte();
 800987e:	f7ff ffd3 	bl	8009828 <SD_ReceiveByte>
}
 8009882:	bf00      	nop
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	40020000 	.word	0x40020000

0800988c <SD_Deselect>:

static void SD_Deselect(void) {
 800988c:	b580      	push	{r7, lr}
 800988e:	af00      	add	r7, sp, #0
    SD_CS_HIGH();
 8009890:	2201      	movs	r2, #1
 8009892:	2110      	movs	r1, #16
 8009894:	4803      	ldr	r0, [pc, #12]	@ (80098a4 <SD_Deselect+0x18>)
 8009896:	f000 fe3f 	bl	800a518 <HAL_GPIO_WritePin>
    SD_ReceiveByte();
 800989a:	f7ff ffc5 	bl	8009828 <SD_ReceiveByte>
}
 800989e:	bf00      	nop
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	40020000 	.word	0x40020000

080098a8 <SD_SendCommand>:

static uint8_t SD_SendCommand(uint8_t cmd, uint32_t arg, uint8_t crc) {
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b086      	sub	sp, #24
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	4603      	mov	r3, r0
 80098b0:	6039      	str	r1, [r7, #0]
 80098b2:	71fb      	strb	r3, [r7, #7]
 80098b4:	4613      	mov	r3, r2
 80098b6:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[6];
    buf[0] = 0x40 | cmd;
 80098b8:	79fb      	ldrb	r3, [r7, #7]
 80098ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	723b      	strb	r3, [r7, #8]
    buf[1] = (arg >> 24) & 0xFF;
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	0e1b      	lsrs	r3, r3, #24
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	727b      	strb	r3, [r7, #9]
    buf[2] = (arg >> 16) & 0xFF;
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	0c1b      	lsrs	r3, r3, #16
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	72bb      	strb	r3, [r7, #10]
    buf[3] = (arg >> 8) & 0xFF;
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	0a1b      	lsrs	r3, r3, #8
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	72fb      	strb	r3, [r7, #11]
    buf[4] = arg & 0xFF;
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	733b      	strb	r3, [r7, #12]
    buf[5] = crc;
 80098e0:	79bb      	ldrb	r3, [r7, #6]
 80098e2:	737b      	strb	r3, [r7, #13]

    SD_Deselect();
 80098e4:	f7ff ffd2 	bl	800988c <SD_Deselect>
    SD_Select();
 80098e8:	f7ff ffc2 	bl	8009870 <SD_Select>

    if (!SD_WaitReady()) {
 80098ec:	f7ff ffa4 	bl	8009838 <SD_WaitReady>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d103      	bne.n	80098fe <SD_SendCommand+0x56>
        SD_Deselect();
 80098f6:	f7ff ffc9 	bl	800988c <SD_Deselect>
        return 0xFF;
 80098fa:	23ff      	movs	r3, #255	@ 0xff
 80098fc:	e024      	b.n	8009948 <SD_SendCommand+0xa0>
    }

    for (int i = 0; i < 6; i++)
 80098fe:	2300      	movs	r3, #0
 8009900:	617b      	str	r3, [r7, #20]
 8009902:	e00a      	b.n	800991a <SD_SendCommand+0x72>
        SD_TransmitByte(buf[i]);
 8009904:	f107 0208 	add.w	r2, r7, #8
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	4413      	add	r3, r2
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	4618      	mov	r0, r3
 8009910:	f7ff ff74 	bl	80097fc <SD_TransmitByte>
    for (int i = 0; i < 6; i++)
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	3301      	adds	r3, #1
 8009918:	617b      	str	r3, [r7, #20]
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	2b05      	cmp	r3, #5
 800991e:	ddf1      	ble.n	8009904 <SD_SendCommand+0x5c>

    // Aguarda resposta (bit 7 == 0)
    for (int i = 0; i < 10; i++) {
 8009920:	2300      	movs	r3, #0
 8009922:	613b      	str	r3, [r7, #16]
 8009924:	e00c      	b.n	8009940 <SD_SendCommand+0x98>
        uint8_t res = SD_ReceiveByte();
 8009926:	f7ff ff7f 	bl	8009828 <SD_ReceiveByte>
 800992a:	4603      	mov	r3, r0
 800992c:	73fb      	strb	r3, [r7, #15]
        if ((res & 0x80) == 0)
 800992e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009932:	2b00      	cmp	r3, #0
 8009934:	db01      	blt.n	800993a <SD_SendCommand+0x92>
            return res;
 8009936:	7bfb      	ldrb	r3, [r7, #15]
 8009938:	e006      	b.n	8009948 <SD_SendCommand+0xa0>
    for (int i = 0; i < 10; i++) {
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	3301      	adds	r3, #1
 800993e:	613b      	str	r3, [r7, #16]
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	2b09      	cmp	r3, #9
 8009944:	ddef      	ble.n	8009926 <SD_SendCommand+0x7e>
    }

    return 0xFF;
 8009946:	23ff      	movs	r3, #255	@ 0xff
}
 8009948:	4618      	mov	r0, r3
 800994a:	3718      	adds	r7, #24
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <SD_Init>:

uint8_t SD_Init(void) {
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
    SD_CS_HIGH();
 8009956:	2201      	movs	r2, #1
 8009958:	2110      	movs	r1, #16
 800995a:	4820      	ldr	r0, [pc, #128]	@ (80099dc <SD_Init+0x8c>)
 800995c:	f000 fddc 	bl	800a518 <HAL_GPIO_WritePin>
    SD_SendDummyClock(); // 80 clocks
 8009960:	f7ff ff30 	bl	80097c4 <SD_SendDummyClock>

    uint8_t res = SD_SendCommand(CMD0, 0, 0x95);
 8009964:	2295      	movs	r2, #149	@ 0x95
 8009966:	2100      	movs	r1, #0
 8009968:	2000      	movs	r0, #0
 800996a:	f7ff ff9d 	bl	80098a8 <SD_SendCommand>
 800996e:	4603      	mov	r3, r0
 8009970:	71fb      	strb	r3, [r7, #7]
    if (res != 0x01) return SD_ERROR;
 8009972:	79fb      	ldrb	r3, [r7, #7]
 8009974:	2b01      	cmp	r3, #1
 8009976:	d001      	beq.n	800997c <SD_Init+0x2c>
 8009978:	2301      	movs	r3, #1
 800997a:	e02b      	b.n	80099d4 <SD_Init+0x84>

    res = SD_SendCommand(CMD8, 0x1AA, 0x87);
 800997c:	2287      	movs	r2, #135	@ 0x87
 800997e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8009982:	2008      	movs	r0, #8
 8009984:	f7ff ff90 	bl	80098a8 <SD_SendCommand>
 8009988:	4603      	mov	r3, r0
 800998a:	71fb      	strb	r3, [r7, #7]
    if (res != 0x01) return SD_ERROR;
 800998c:	79fb      	ldrb	r3, [r7, #7]
 800998e:	2b01      	cmp	r3, #1
 8009990:	d001      	beq.n	8009996 <SD_Init+0x46>
 8009992:	2301      	movs	r3, #1
 8009994:	e01e      	b.n	80099d4 <SD_Init+0x84>

    // Espera inicialização
    do {
        SD_SendCommand(CMD55, 0, 0x01);
 8009996:	2201      	movs	r2, #1
 8009998:	2100      	movs	r1, #0
 800999a:	2037      	movs	r0, #55	@ 0x37
 800999c:	f7ff ff84 	bl	80098a8 <SD_SendCommand>
        res = SD_SendCommand(ACMD41, 0x40000000, 0x01);
 80099a0:	2201      	movs	r2, #1
 80099a2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80099a6:	2029      	movs	r0, #41	@ 0x29
 80099a8:	f7ff ff7e 	bl	80098a8 <SD_SendCommand>
 80099ac:	4603      	mov	r3, r0
 80099ae:	71fb      	strb	r3, [r7, #7]
    } while (res != 0x00);
 80099b0:	79fb      	ldrb	r3, [r7, #7]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d1ef      	bne.n	8009996 <SD_Init+0x46>

    res = SD_SendCommand(CMD58, 0, 0x01);
 80099b6:	2201      	movs	r2, #1
 80099b8:	2100      	movs	r1, #0
 80099ba:	203a      	movs	r0, #58	@ 0x3a
 80099bc:	f7ff ff74 	bl	80098a8 <SD_SendCommand>
 80099c0:	4603      	mov	r3, r0
 80099c2:	71fb      	strb	r3, [r7, #7]
    SD_Deselect();
 80099c4:	f7ff ff62 	bl	800988c <SD_Deselect>
    return (res == 0x00) ? SD_OK : SD_ERROR;
 80099c8:	79fb      	ldrb	r3, [r7, #7]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	bf14      	ite	ne
 80099ce:	2301      	movne	r3, #1
 80099d0:	2300      	moveq	r3, #0
 80099d2:	b2db      	uxtb	r3, r3
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3708      	adds	r7, #8
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	40020000 	.word	0x40020000

080099e0 <SD_ReadBlock>:

uint8_t SD_ReadBlock(uint32_t blockAddr, uint8_t* buff) {
 80099e0:	b590      	push	{r4, r7, lr}
 80099e2:	b087      	sub	sp, #28
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
    uint8_t token;

    if (SD_SendCommand(CMD17, blockAddr, 0x01) != 0x00)
 80099ea:	2201      	movs	r2, #1
 80099ec:	6879      	ldr	r1, [r7, #4]
 80099ee:	2011      	movs	r0, #17
 80099f0:	f7ff ff5a 	bl	80098a8 <SD_SendCommand>
 80099f4:	4603      	mov	r3, r0
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d001      	beq.n	80099fe <SD_ReadBlock+0x1e>
        return SD_ERROR;
 80099fa:	2301      	movs	r3, #1
 80099fc:	e030      	b.n	8009a60 <SD_ReadBlock+0x80>

    // Espera token 0xFE (início do bloco)
    for (int i = 0; i < 10000; i++) {
 80099fe:	2300      	movs	r3, #0
 8009a00:	613b      	str	r3, [r7, #16]
 8009a02:	e009      	b.n	8009a18 <SD_ReadBlock+0x38>
        token = SD_ReceiveByte();
 8009a04:	f7ff ff10 	bl	8009828 <SD_ReceiveByte>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	75fb      	strb	r3, [r7, #23]
        if (token == 0xFE) break;
 8009a0c:	7dfb      	ldrb	r3, [r7, #23]
 8009a0e:	2bfe      	cmp	r3, #254	@ 0xfe
 8009a10:	d008      	beq.n	8009a24 <SD_ReadBlock+0x44>
    for (int i = 0; i < 10000; i++) {
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	3301      	adds	r3, #1
 8009a16:	613b      	str	r3, [r7, #16]
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	f242 720f 	movw	r2, #9999	@ 0x270f
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	ddf0      	ble.n	8009a04 <SD_ReadBlock+0x24>
 8009a22:	e000      	b.n	8009a26 <SD_ReadBlock+0x46>
        if (token == 0xFE) break;
 8009a24:	bf00      	nop
    }
    if (token != 0xFE) return SD_ERROR;
 8009a26:	7dfb      	ldrb	r3, [r7, #23]
 8009a28:	2bfe      	cmp	r3, #254	@ 0xfe
 8009a2a:	d001      	beq.n	8009a30 <SD_ReadBlock+0x50>
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	e017      	b.n	8009a60 <SD_ReadBlock+0x80>

    for (int i = 0; i < 512; i++)
 8009a30:	2300      	movs	r3, #0
 8009a32:	60fb      	str	r3, [r7, #12]
 8009a34:	e009      	b.n	8009a4a <SD_ReadBlock+0x6a>
        buff[i] = SD_ReceiveByte();
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	683a      	ldr	r2, [r7, #0]
 8009a3a:	18d4      	adds	r4, r2, r3
 8009a3c:	f7ff fef4 	bl	8009828 <SD_ReceiveByte>
 8009a40:	4603      	mov	r3, r0
 8009a42:	7023      	strb	r3, [r4, #0]
    for (int i = 0; i < 512; i++)
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	3301      	adds	r3, #1
 8009a48:	60fb      	str	r3, [r7, #12]
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a50:	dbf1      	blt.n	8009a36 <SD_ReadBlock+0x56>

    SD_ReceiveByte(); // Discard CRC
 8009a52:	f7ff fee9 	bl	8009828 <SD_ReceiveByte>
    SD_ReceiveByte();
 8009a56:	f7ff fee7 	bl	8009828 <SD_ReceiveByte>

    SD_Deselect();
 8009a5a:	f7ff ff17 	bl	800988c <SD_Deselect>
    return SD_OK;
 8009a5e:	2300      	movs	r3, #0
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	371c      	adds	r7, #28
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd90      	pop	{r4, r7, pc}

08009a68 <SD_WriteBlock>:

uint8_t SD_WriteBlock(uint32_t blockAddr, const uint8_t* buff) {
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
    if (SD_SendCommand(CMD24, blockAddr, 0x01) != 0x00)
 8009a72:	2201      	movs	r2, #1
 8009a74:	6879      	ldr	r1, [r7, #4]
 8009a76:	2018      	movs	r0, #24
 8009a78:	f7ff ff16 	bl	80098a8 <SD_SendCommand>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d001      	beq.n	8009a86 <SD_WriteBlock+0x1e>
        return SD_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	e02f      	b.n	8009ae6 <SD_WriteBlock+0x7e>

    SD_TransmitByte(0xFE); // Start token
 8009a86:	20fe      	movs	r0, #254	@ 0xfe
 8009a88:	f7ff feb8 	bl	80097fc <SD_TransmitByte>

    for (int i = 0; i < 512; i++)
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	60fb      	str	r3, [r7, #12]
 8009a90:	e009      	b.n	8009aa6 <SD_WriteBlock+0x3e>
        SD_TransmitByte(buff[i]);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	683a      	ldr	r2, [r7, #0]
 8009a96:	4413      	add	r3, r2
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7ff feae 	bl	80097fc <SD_TransmitByte>
    for (int i = 0; i < 512; i++)
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	60fb      	str	r3, [r7, #12]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009aac:	dbf1      	blt.n	8009a92 <SD_WriteBlock+0x2a>

    SD_TransmitByte(0xFF); // Dummy CRC
 8009aae:	20ff      	movs	r0, #255	@ 0xff
 8009ab0:	f7ff fea4 	bl	80097fc <SD_TransmitByte>
    SD_TransmitByte(0xFF);
 8009ab4:	20ff      	movs	r0, #255	@ 0xff
 8009ab6:	f7ff fea1 	bl	80097fc <SD_TransmitByte>

    uint8_t resp = SD_ReceiveByte();
 8009aba:	f7ff feb5 	bl	8009828 <SD_ReceiveByte>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	72fb      	strb	r3, [r7, #11]
    if ((resp & 0x1F) != 0x05) {
 8009ac2:	7afb      	ldrb	r3, [r7, #11]
 8009ac4:	f003 031f 	and.w	r3, r3, #31
 8009ac8:	2b05      	cmp	r3, #5
 8009aca:	d003      	beq.n	8009ad4 <SD_WriteBlock+0x6c>
        SD_Deselect();
 8009acc:	f7ff fede 	bl	800988c <SD_Deselect>
        return SD_ERROR;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e008      	b.n	8009ae6 <SD_WriteBlock+0x7e>
    }

    while (!SD_ReceiveByte()); // Espera escrever
 8009ad4:	bf00      	nop
 8009ad6:	f7ff fea7 	bl	8009828 <SD_ReceiveByte>
 8009ada:	4603      	mov	r3, r0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d0fa      	beq.n	8009ad6 <SD_WriteBlock+0x6e>

    SD_Deselect();
 8009ae0:	f7ff fed4 	bl	800988c <SD_Deselect>
    return SD_OK;
 8009ae4:	2300      	movs	r3, #0
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
	...

08009af0 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8009af4:	4b1b      	ldr	r3, [pc, #108]	@ (8009b64 <MX_SPI3_Init+0x74>)
 8009af6:	4a1c      	ldr	r2, [pc, #112]	@ (8009b68 <MX_SPI3_Init+0x78>)
 8009af8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8009afa:	4b1a      	ldr	r3, [pc, #104]	@ (8009b64 <MX_SPI3_Init+0x74>)
 8009afc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8009b00:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8009b02:	4b18      	ldr	r3, [pc, #96]	@ (8009b64 <MX_SPI3_Init+0x74>)
 8009b04:	2200      	movs	r2, #0
 8009b06:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8009b08:	4b16      	ldr	r3, [pc, #88]	@ (8009b64 <MX_SPI3_Init+0x74>)
 8009b0a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8009b0e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009b10:	4b14      	ldr	r3, [pc, #80]	@ (8009b64 <MX_SPI3_Init+0x74>)
 8009b12:	2200      	movs	r2, #0
 8009b14:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009b16:	4b13      	ldr	r3, [pc, #76]	@ (8009b64 <MX_SPI3_Init+0x74>)
 8009b18:	2200      	movs	r2, #0
 8009b1a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8009b1c:	4b11      	ldr	r3, [pc, #68]	@ (8009b64 <MX_SPI3_Init+0x74>)
 8009b1e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8009b22:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009b24:	4b0f      	ldr	r3, [pc, #60]	@ (8009b64 <MX_SPI3_Init+0x74>)
 8009b26:	2200      	movs	r2, #0
 8009b28:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8009b64 <MX_SPI3_Init+0x74>)
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8009b30:	4b0c      	ldr	r3, [pc, #48]	@ (8009b64 <MX_SPI3_Init+0x74>)
 8009b32:	2200      	movs	r2, #0
 8009b34:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b36:	4b0b      	ldr	r3, [pc, #44]	@ (8009b64 <MX_SPI3_Init+0x74>)
 8009b38:	2200      	movs	r2, #0
 8009b3a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8009b3c:	4b09      	ldr	r3, [pc, #36]	@ (8009b64 <MX_SPI3_Init+0x74>)
 8009b3e:	2207      	movs	r2, #7
 8009b40:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009b42:	4b08      	ldr	r3, [pc, #32]	@ (8009b64 <MX_SPI3_Init+0x74>)
 8009b44:	2200      	movs	r2, #0
 8009b46:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8009b48:	4b06      	ldr	r3, [pc, #24]	@ (8009b64 <MX_SPI3_Init+0x74>)
 8009b4a:	2208      	movs	r2, #8
 8009b4c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8009b4e:	4805      	ldr	r0, [pc, #20]	@ (8009b64 <MX_SPI3_Init+0x74>)
 8009b50:	f001 f9ac 	bl	800aeac <HAL_SPI_Init>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d001      	beq.n	8009b5e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8009b5a:	f7ff fe2d 	bl	80097b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8009b5e:	bf00      	nop
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	20006aec 	.word	0x20006aec
 8009b68:	40003c00 	.word	0x40003c00

08009b6c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b08a      	sub	sp, #40	@ 0x28
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b74:	f107 0314 	add.w	r3, r7, #20
 8009b78:	2200      	movs	r2, #0
 8009b7a:	601a      	str	r2, [r3, #0]
 8009b7c:	605a      	str	r2, [r3, #4]
 8009b7e:	609a      	str	r2, [r3, #8]
 8009b80:	60da      	str	r2, [r3, #12]
 8009b82:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a25      	ldr	r2, [pc, #148]	@ (8009c20 <HAL_SPI_MspInit+0xb4>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d143      	bne.n	8009c16 <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8009b8e:	4b25      	ldr	r3, [pc, #148]	@ (8009c24 <HAL_SPI_MspInit+0xb8>)
 8009b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b92:	4a24      	ldr	r2, [pc, #144]	@ (8009c24 <HAL_SPI_MspInit+0xb8>)
 8009b94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b98:	6413      	str	r3, [r2, #64]	@ 0x40
 8009b9a:	4b22      	ldr	r3, [pc, #136]	@ (8009c24 <HAL_SPI_MspInit+0xb8>)
 8009b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ba2:	613b      	str	r3, [r7, #16]
 8009ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ba6:	4b1f      	ldr	r3, [pc, #124]	@ (8009c24 <HAL_SPI_MspInit+0xb8>)
 8009ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009baa:	4a1e      	ldr	r2, [pc, #120]	@ (8009c24 <HAL_SPI_MspInit+0xb8>)
 8009bac:	f043 0301 	orr.w	r3, r3, #1
 8009bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8009bb2:	4b1c      	ldr	r3, [pc, #112]	@ (8009c24 <HAL_SPI_MspInit+0xb8>)
 8009bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bb6:	f003 0301 	and.w	r3, r3, #1
 8009bba:	60fb      	str	r3, [r7, #12]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009bbe:	4b19      	ldr	r3, [pc, #100]	@ (8009c24 <HAL_SPI_MspInit+0xb8>)
 8009bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bc2:	4a18      	ldr	r2, [pc, #96]	@ (8009c24 <HAL_SPI_MspInit+0xb8>)
 8009bc4:	f043 0302 	orr.w	r3, r3, #2
 8009bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8009bca:	4b16      	ldr	r3, [pc, #88]	@ (8009c24 <HAL_SPI_MspInit+0xb8>)
 8009bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bce:	f003 0302 	and.w	r3, r3, #2
 8009bd2:	60bb      	str	r3, [r7, #8]
 8009bd4:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI3_NSS
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8009bd6:	2310      	movs	r3, #16
 8009bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bda:	2302      	movs	r3, #2
 8009bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bde:	2300      	movs	r3, #0
 8009be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009be2:	2303      	movs	r3, #3
 8009be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8009be6:	2306      	movs	r3, #6
 8009be8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009bea:	f107 0314 	add.w	r3, r7, #20
 8009bee:	4619      	mov	r1, r3
 8009bf0:	480d      	ldr	r0, [pc, #52]	@ (8009c28 <HAL_SPI_MspInit+0xbc>)
 8009bf2:	f000 fae5 	bl	800a1c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8009bf6:	2338      	movs	r3, #56	@ 0x38
 8009bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bfa:	2302      	movs	r3, #2
 8009bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c02:	2303      	movs	r3, #3
 8009c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8009c06:	2306      	movs	r3, #6
 8009c08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009c0a:	f107 0314 	add.w	r3, r7, #20
 8009c0e:	4619      	mov	r1, r3
 8009c10:	4806      	ldr	r0, [pc, #24]	@ (8009c2c <HAL_SPI_MspInit+0xc0>)
 8009c12:	f000 fad5 	bl	800a1c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8009c16:	bf00      	nop
 8009c18:	3728      	adds	r7, #40	@ 0x28
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	40003c00 	.word	0x40003c00
 8009c24:	40023800 	.word	0x40023800
 8009c28:	40020000 	.word	0x40020000
 8009c2c:	40020400 	.word	0x40020400

08009c30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8009c36:	4b0f      	ldr	r3, [pc, #60]	@ (8009c74 <HAL_MspInit+0x44>)
 8009c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c3a:	4a0e      	ldr	r2, [pc, #56]	@ (8009c74 <HAL_MspInit+0x44>)
 8009c3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c40:	6413      	str	r3, [r2, #64]	@ 0x40
 8009c42:	4b0c      	ldr	r3, [pc, #48]	@ (8009c74 <HAL_MspInit+0x44>)
 8009c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c4a:	607b      	str	r3, [r7, #4]
 8009c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009c4e:	4b09      	ldr	r3, [pc, #36]	@ (8009c74 <HAL_MspInit+0x44>)
 8009c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c52:	4a08      	ldr	r2, [pc, #32]	@ (8009c74 <HAL_MspInit+0x44>)
 8009c54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009c58:	6453      	str	r3, [r2, #68]	@ 0x44
 8009c5a:	4b06      	ldr	r3, [pc, #24]	@ (8009c74 <HAL_MspInit+0x44>)
 8009c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c62:	603b      	str	r3, [r7, #0]
 8009c64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009c66:	bf00      	nop
 8009c68:	370c      	adds	r7, #12
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr
 8009c72:	bf00      	nop
 8009c74:	40023800 	.word	0x40023800

08009c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009c7c:	bf00      	nop
 8009c7e:	e7fd      	b.n	8009c7c <NMI_Handler+0x4>

08009c80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8009c84:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009c88:	4804      	ldr	r0, [pc, #16]	@ (8009c9c <HardFault_Handler+0x1c>)
 8009c8a:	f000 fc5e 	bl	800a54a <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8009c8e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009c92:	f000 f98b 	bl	8009fac <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8009c96:	bf00      	nop
 8009c98:	e7f4      	b.n	8009c84 <HardFault_Handler+0x4>
 8009c9a:	bf00      	nop
 8009c9c:	40020400 	.word	0x40020400

08009ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009ca4:	bf00      	nop
 8009ca6:	e7fd      	b.n	8009ca4 <MemManage_Handler+0x4>

08009ca8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009cac:	bf00      	nop
 8009cae:	e7fd      	b.n	8009cac <BusFault_Handler+0x4>

08009cb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009cb4:	bf00      	nop
 8009cb6:	e7fd      	b.n	8009cb4 <UsageFault_Handler+0x4>

08009cb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009cbc:	bf00      	nop
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr

08009cc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009cc6:	b480      	push	{r7}
 8009cc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009cca:	bf00      	nop
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr

08009cd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009cd8:	bf00      	nop
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr

08009ce2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009ce2:	b580      	push	{r7, lr}
 8009ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009ce6:	f000 f941 	bl	8009f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009cea:	bf00      	nop
 8009cec:	bd80      	pop	{r7, pc}

08009cee <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009cee:	b480      	push	{r7}
 8009cf0:	af00      	add	r7, sp, #0
  return 1;
 8009cf2:	2301      	movs	r3, #1
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr

08009cfe <_kill>:

int _kill(int pid, int sig)
{
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b082      	sub	sp, #8
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
 8009d06:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8009d08:	f006 f894 	bl	800fe34 <__errno>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2216      	movs	r2, #22
 8009d10:	601a      	str	r2, [r3, #0]
  return -1;
 8009d12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3708      	adds	r7, #8
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <_exit>:

void _exit (int status)
{
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b082      	sub	sp, #8
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8009d26:	f04f 31ff 	mov.w	r1, #4294967295
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f7ff ffe7 	bl	8009cfe <_kill>
  while (1) {}    /* Make sure we hang here */
 8009d30:	bf00      	nop
 8009d32:	e7fd      	b.n	8009d30 <_exit+0x12>

08009d34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b086      	sub	sp, #24
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	60b9      	str	r1, [r7, #8]
 8009d3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009d40:	2300      	movs	r3, #0
 8009d42:	617b      	str	r3, [r7, #20]
 8009d44:	e00a      	b.n	8009d5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8009d46:	f3af 8000 	nop.w
 8009d4a:	4601      	mov	r1, r0
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	1c5a      	adds	r2, r3, #1
 8009d50:	60ba      	str	r2, [r7, #8]
 8009d52:	b2ca      	uxtb	r2, r1
 8009d54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	3301      	adds	r3, #1
 8009d5a:	617b      	str	r3, [r7, #20]
 8009d5c:	697a      	ldr	r2, [r7, #20]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	429a      	cmp	r2, r3
 8009d62:	dbf0      	blt.n	8009d46 <_read+0x12>
  }

  return len;
 8009d64:	687b      	ldr	r3, [r7, #4]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3718      	adds	r7, #24
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b086      	sub	sp, #24
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	60f8      	str	r0, [r7, #12]
 8009d76:	60b9      	str	r1, [r7, #8]
 8009d78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	617b      	str	r3, [r7, #20]
 8009d7e:	e009      	b.n	8009d94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	1c5a      	adds	r2, r3, #1
 8009d84:	60ba      	str	r2, [r7, #8]
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	3301      	adds	r3, #1
 8009d92:	617b      	str	r3, [r7, #20]
 8009d94:	697a      	ldr	r2, [r7, #20]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	dbf1      	blt.n	8009d80 <_write+0x12>
  }
  return len;
 8009d9c:	687b      	ldr	r3, [r7, #4]
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3718      	adds	r7, #24
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <_close>:

int _close(int file)
{
 8009da6:	b480      	push	{r7}
 8009da8:	b083      	sub	sp, #12
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8009dae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	370c      	adds	r7, #12
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr

08009dbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009dbe:	b480      	push	{r7}
 8009dc0:	b083      	sub	sp, #12
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	6078      	str	r0, [r7, #4]
 8009dc6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009dce:	605a      	str	r2, [r3, #4]
  return 0;
 8009dd0:	2300      	movs	r3, #0
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	370c      	adds	r7, #12
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr

08009dde <_isatty>:

int _isatty(int file)
{
 8009dde:	b480      	push	{r7}
 8009de0:	b083      	sub	sp, #12
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8009de6:	2301      	movs	r3, #1
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	370c      	adds	r7, #12
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b085      	sub	sp, #20
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	60b9      	str	r1, [r7, #8]
 8009dfe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8009e00:	2300      	movs	r3, #0
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3714      	adds	r7, #20
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr
	...

08009e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b086      	sub	sp, #24
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009e18:	4a14      	ldr	r2, [pc, #80]	@ (8009e6c <_sbrk+0x5c>)
 8009e1a:	4b15      	ldr	r3, [pc, #84]	@ (8009e70 <_sbrk+0x60>)
 8009e1c:	1ad3      	subs	r3, r2, r3
 8009e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009e24:	4b13      	ldr	r3, [pc, #76]	@ (8009e74 <_sbrk+0x64>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d102      	bne.n	8009e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009e2c:	4b11      	ldr	r3, [pc, #68]	@ (8009e74 <_sbrk+0x64>)
 8009e2e:	4a12      	ldr	r2, [pc, #72]	@ (8009e78 <_sbrk+0x68>)
 8009e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009e32:	4b10      	ldr	r3, [pc, #64]	@ (8009e74 <_sbrk+0x64>)
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	4413      	add	r3, r2
 8009e3a:	693a      	ldr	r2, [r7, #16]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d207      	bcs.n	8009e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009e40:	f005 fff8 	bl	800fe34 <__errno>
 8009e44:	4603      	mov	r3, r0
 8009e46:	220c      	movs	r2, #12
 8009e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e4e:	e009      	b.n	8009e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009e50:	4b08      	ldr	r3, [pc, #32]	@ (8009e74 <_sbrk+0x64>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009e56:	4b07      	ldr	r3, [pc, #28]	@ (8009e74 <_sbrk+0x64>)
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	4a05      	ldr	r2, [pc, #20]	@ (8009e74 <_sbrk+0x64>)
 8009e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009e62:	68fb      	ldr	r3, [r7, #12]
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3718      	adds	r7, #24
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}
 8009e6c:	20050000 	.word	0x20050000
 8009e70:	00000400 	.word	0x00000400
 8009e74:	20006b50 	.word	0x20006b50
 8009e78:	20006ce0 	.word	0x20006ce0

08009e7c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009e80:	4b06      	ldr	r3, [pc, #24]	@ (8009e9c <SystemInit+0x20>)
 8009e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e86:	4a05      	ldr	r2, [pc, #20]	@ (8009e9c <SystemInit+0x20>)
 8009e88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009e8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009e90:	bf00      	nop
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr
 8009e9a:	bf00      	nop
 8009e9c:	e000ed00 	.word	0xe000ed00

08009ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009ea0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8009ed8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8009ea4:	f7ff ffea 	bl	8009e7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8009ea8:	480c      	ldr	r0, [pc, #48]	@ (8009edc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009eaa:	490d      	ldr	r1, [pc, #52]	@ (8009ee0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009eac:	4a0d      	ldr	r2, [pc, #52]	@ (8009ee4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009eb0:	e002      	b.n	8009eb8 <LoopCopyDataInit>

08009eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009eb6:	3304      	adds	r3, #4

08009eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009ebc:	d3f9      	bcc.n	8009eb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8009ee8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009ec0:	4c0a      	ldr	r4, [pc, #40]	@ (8009eec <LoopFillZerobss+0x22>)
  movs r3, #0
 8009ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009ec4:	e001      	b.n	8009eca <LoopFillZerobss>

08009ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009ec8:	3204      	adds	r2, #4

08009eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009ecc:	d3fb      	bcc.n	8009ec6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8009ece:	f005 ffb7 	bl	800fe40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009ed2:	f7ff f957 	bl	8009184 <main>
  bx  lr    
 8009ed6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009ed8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8009edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009ee0:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8009ee4:	080147b8 	.word	0x080147b8
  ldr r2, =_sbss
 8009ee8:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8009eec:	20006ce0 	.word	0x20006ce0

08009ef0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009ef0:	e7fe      	b.n	8009ef0 <ADC_IRQHandler>

08009ef2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009ef6:	2003      	movs	r0, #3
 8009ef8:	f000 f92e 	bl	800a158 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009efc:	2000      	movs	r0, #0
 8009efe:	f000 f805 	bl	8009f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009f02:	f7ff fe95 	bl	8009c30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009f06:	2300      	movs	r3, #0
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009f14:	4b12      	ldr	r3, [pc, #72]	@ (8009f60 <HAL_InitTick+0x54>)
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	4b12      	ldr	r3, [pc, #72]	@ (8009f64 <HAL_InitTick+0x58>)
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f000 f93b 	bl	800a1a6 <HAL_SYSTICK_Config>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d001      	beq.n	8009f3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009f36:	2301      	movs	r3, #1
 8009f38:	e00e      	b.n	8009f58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2b0f      	cmp	r3, #15
 8009f3e:	d80a      	bhi.n	8009f56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009f40:	2200      	movs	r2, #0
 8009f42:	6879      	ldr	r1, [r7, #4]
 8009f44:	f04f 30ff 	mov.w	r0, #4294967295
 8009f48:	f000 f911 	bl	800a16e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009f4c:	4a06      	ldr	r2, [pc, #24]	@ (8009f68 <HAL_InitTick+0x5c>)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009f52:	2300      	movs	r3, #0
 8009f54:	e000      	b.n	8009f58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009f56:	2301      	movs	r3, #1
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3708      	adds	r7, #8
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	20000000 	.word	0x20000000
 8009f64:	20000008 	.word	0x20000008
 8009f68:	20000004 	.word	0x20000004

08009f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009f70:	4b06      	ldr	r3, [pc, #24]	@ (8009f8c <HAL_IncTick+0x20>)
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	461a      	mov	r2, r3
 8009f76:	4b06      	ldr	r3, [pc, #24]	@ (8009f90 <HAL_IncTick+0x24>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	4a04      	ldr	r2, [pc, #16]	@ (8009f90 <HAL_IncTick+0x24>)
 8009f7e:	6013      	str	r3, [r2, #0]
}
 8009f80:	bf00      	nop
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr
 8009f8a:	bf00      	nop
 8009f8c:	20000008 	.word	0x20000008
 8009f90:	20006b54 	.word	0x20006b54

08009f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009f94:	b480      	push	{r7}
 8009f96:	af00      	add	r7, sp, #0
  return uwTick;
 8009f98:	4b03      	ldr	r3, [pc, #12]	@ (8009fa8 <HAL_GetTick+0x14>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr
 8009fa6:	bf00      	nop
 8009fa8:	20006b54 	.word	0x20006b54

08009fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b084      	sub	sp, #16
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009fb4:	f7ff ffee 	bl	8009f94 <HAL_GetTick>
 8009fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fc4:	d005      	beq.n	8009fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8009ff0 <HAL_Delay+0x44>)
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	461a      	mov	r2, r3
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	4413      	add	r3, r2
 8009fd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009fd2:	bf00      	nop
 8009fd4:	f7ff ffde 	bl	8009f94 <HAL_GetTick>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	1ad3      	subs	r3, r2, r3
 8009fde:	68fa      	ldr	r2, [r7, #12]
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d8f7      	bhi.n	8009fd4 <HAL_Delay+0x28>
  {
  }
}
 8009fe4:	bf00      	nop
 8009fe6:	bf00      	nop
 8009fe8:	3710      	adds	r7, #16
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	20000008 	.word	0x20000008

08009ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b085      	sub	sp, #20
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f003 0307 	and.w	r3, r3, #7
 800a002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a004:	4b0b      	ldr	r3, [pc, #44]	@ (800a034 <__NVIC_SetPriorityGrouping+0x40>)
 800a006:	68db      	ldr	r3, [r3, #12]
 800a008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a00a:	68ba      	ldr	r2, [r7, #8]
 800a00c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a010:	4013      	ands	r3, r2
 800a012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800a01c:	4b06      	ldr	r3, [pc, #24]	@ (800a038 <__NVIC_SetPriorityGrouping+0x44>)
 800a01e:	4313      	orrs	r3, r2
 800a020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a022:	4a04      	ldr	r2, [pc, #16]	@ (800a034 <__NVIC_SetPriorityGrouping+0x40>)
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	60d3      	str	r3, [r2, #12]
}
 800a028:	bf00      	nop
 800a02a:	3714      	adds	r7, #20
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr
 800a034:	e000ed00 	.word	0xe000ed00
 800a038:	05fa0000 	.word	0x05fa0000

0800a03c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a03c:	b480      	push	{r7}
 800a03e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a040:	4b04      	ldr	r3, [pc, #16]	@ (800a054 <__NVIC_GetPriorityGrouping+0x18>)
 800a042:	68db      	ldr	r3, [r3, #12]
 800a044:	0a1b      	lsrs	r3, r3, #8
 800a046:	f003 0307 	and.w	r3, r3, #7
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr
 800a054:	e000ed00 	.word	0xe000ed00

0800a058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a058:	b480      	push	{r7}
 800a05a:	b083      	sub	sp, #12
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	4603      	mov	r3, r0
 800a060:	6039      	str	r1, [r7, #0]
 800a062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	db0a      	blt.n	800a082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	b2da      	uxtb	r2, r3
 800a070:	490c      	ldr	r1, [pc, #48]	@ (800a0a4 <__NVIC_SetPriority+0x4c>)
 800a072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a076:	0112      	lsls	r2, r2, #4
 800a078:	b2d2      	uxtb	r2, r2
 800a07a:	440b      	add	r3, r1
 800a07c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a080:	e00a      	b.n	800a098 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	b2da      	uxtb	r2, r3
 800a086:	4908      	ldr	r1, [pc, #32]	@ (800a0a8 <__NVIC_SetPriority+0x50>)
 800a088:	79fb      	ldrb	r3, [r7, #7]
 800a08a:	f003 030f 	and.w	r3, r3, #15
 800a08e:	3b04      	subs	r3, #4
 800a090:	0112      	lsls	r2, r2, #4
 800a092:	b2d2      	uxtb	r2, r2
 800a094:	440b      	add	r3, r1
 800a096:	761a      	strb	r2, [r3, #24]
}
 800a098:	bf00      	nop
 800a09a:	370c      	adds	r7, #12
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr
 800a0a4:	e000e100 	.word	0xe000e100
 800a0a8:	e000ed00 	.word	0xe000ed00

0800a0ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b089      	sub	sp, #36	@ 0x24
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f003 0307 	and.w	r3, r3, #7
 800a0be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a0c0:	69fb      	ldr	r3, [r7, #28]
 800a0c2:	f1c3 0307 	rsb	r3, r3, #7
 800a0c6:	2b04      	cmp	r3, #4
 800a0c8:	bf28      	it	cs
 800a0ca:	2304      	movcs	r3, #4
 800a0cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	3304      	adds	r3, #4
 800a0d2:	2b06      	cmp	r3, #6
 800a0d4:	d902      	bls.n	800a0dc <NVIC_EncodePriority+0x30>
 800a0d6:	69fb      	ldr	r3, [r7, #28]
 800a0d8:	3b03      	subs	r3, #3
 800a0da:	e000      	b.n	800a0de <NVIC_EncodePriority+0x32>
 800a0dc:	2300      	movs	r3, #0
 800a0de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a0e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a0e4:	69bb      	ldr	r3, [r7, #24]
 800a0e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ea:	43da      	mvns	r2, r3
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	401a      	ands	r2, r3
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a0f4:	f04f 31ff 	mov.w	r1, #4294967295
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	fa01 f303 	lsl.w	r3, r1, r3
 800a0fe:	43d9      	mvns	r1, r3
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a104:	4313      	orrs	r3, r2
         );
}
 800a106:	4618      	mov	r0, r3
 800a108:	3724      	adds	r7, #36	@ 0x24
 800a10a:	46bd      	mov	sp, r7
 800a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a110:	4770      	bx	lr
	...

0800a114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b082      	sub	sp, #8
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	3b01      	subs	r3, #1
 800a120:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a124:	d301      	bcc.n	800a12a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a126:	2301      	movs	r3, #1
 800a128:	e00f      	b.n	800a14a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a12a:	4a0a      	ldr	r2, [pc, #40]	@ (800a154 <SysTick_Config+0x40>)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	3b01      	subs	r3, #1
 800a130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a132:	210f      	movs	r1, #15
 800a134:	f04f 30ff 	mov.w	r0, #4294967295
 800a138:	f7ff ff8e 	bl	800a058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a13c:	4b05      	ldr	r3, [pc, #20]	@ (800a154 <SysTick_Config+0x40>)
 800a13e:	2200      	movs	r2, #0
 800a140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a142:	4b04      	ldr	r3, [pc, #16]	@ (800a154 <SysTick_Config+0x40>)
 800a144:	2207      	movs	r2, #7
 800a146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3708      	adds	r7, #8
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	e000e010 	.word	0xe000e010

0800a158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f7ff ff47 	bl	8009ff4 <__NVIC_SetPriorityGrouping>
}
 800a166:	bf00      	nop
 800a168:	3708      	adds	r7, #8
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}

0800a16e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a16e:	b580      	push	{r7, lr}
 800a170:	b086      	sub	sp, #24
 800a172:	af00      	add	r7, sp, #0
 800a174:	4603      	mov	r3, r0
 800a176:	60b9      	str	r1, [r7, #8]
 800a178:	607a      	str	r2, [r7, #4]
 800a17a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800a17c:	2300      	movs	r3, #0
 800a17e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a180:	f7ff ff5c 	bl	800a03c <__NVIC_GetPriorityGrouping>
 800a184:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	68b9      	ldr	r1, [r7, #8]
 800a18a:	6978      	ldr	r0, [r7, #20]
 800a18c:	f7ff ff8e 	bl	800a0ac <NVIC_EncodePriority>
 800a190:	4602      	mov	r2, r0
 800a192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a196:	4611      	mov	r1, r2
 800a198:	4618      	mov	r0, r3
 800a19a:	f7ff ff5d 	bl	800a058 <__NVIC_SetPriority>
}
 800a19e:	bf00      	nop
 800a1a0:	3718      	adds	r7, #24
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	b082      	sub	sp, #8
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f7ff ffb0 	bl	800a114 <SysTick_Config>
 800a1b4:	4603      	mov	r3, r0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3708      	adds	r7, #8
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
	...

0800a1c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b089      	sub	sp, #36	@ 0x24
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800a1da:	2300      	movs	r3, #0
 800a1dc:	61fb      	str	r3, [r7, #28]
 800a1de:	e175      	b.n	800a4cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	69fb      	ldr	r3, [r7, #28]
 800a1e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a1e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	697a      	ldr	r2, [r7, #20]
 800a1f0:	4013      	ands	r3, r2
 800a1f2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800a1f4:	693a      	ldr	r2, [r7, #16]
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	f040 8164 	bne.w	800a4c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	f003 0303 	and.w	r3, r3, #3
 800a206:	2b01      	cmp	r3, #1
 800a208:	d005      	beq.n	800a216 <HAL_GPIO_Init+0x56>
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	f003 0303 	and.w	r3, r3, #3
 800a212:	2b02      	cmp	r3, #2
 800a214:	d130      	bne.n	800a278 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800a21c:	69fb      	ldr	r3, [r7, #28]
 800a21e:	005b      	lsls	r3, r3, #1
 800a220:	2203      	movs	r2, #3
 800a222:	fa02 f303 	lsl.w	r3, r2, r3
 800a226:	43db      	mvns	r3, r3
 800a228:	69ba      	ldr	r2, [r7, #24]
 800a22a:	4013      	ands	r3, r2
 800a22c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	68da      	ldr	r2, [r3, #12]
 800a232:	69fb      	ldr	r3, [r7, #28]
 800a234:	005b      	lsls	r3, r3, #1
 800a236:	fa02 f303 	lsl.w	r3, r2, r3
 800a23a:	69ba      	ldr	r2, [r7, #24]
 800a23c:	4313      	orrs	r3, r2
 800a23e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	69ba      	ldr	r2, [r7, #24]
 800a244:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	685b      	ldr	r3, [r3, #4]
 800a24a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a24c:	2201      	movs	r2, #1
 800a24e:	69fb      	ldr	r3, [r7, #28]
 800a250:	fa02 f303 	lsl.w	r3, r2, r3
 800a254:	43db      	mvns	r3, r3
 800a256:	69ba      	ldr	r2, [r7, #24]
 800a258:	4013      	ands	r3, r2
 800a25a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	091b      	lsrs	r3, r3, #4
 800a262:	f003 0201 	and.w	r2, r3, #1
 800a266:	69fb      	ldr	r3, [r7, #28]
 800a268:	fa02 f303 	lsl.w	r3, r2, r3
 800a26c:	69ba      	ldr	r2, [r7, #24]
 800a26e:	4313      	orrs	r3, r2
 800a270:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	69ba      	ldr	r2, [r7, #24]
 800a276:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	f003 0303 	and.w	r3, r3, #3
 800a280:	2b03      	cmp	r3, #3
 800a282:	d017      	beq.n	800a2b4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800a28a:	69fb      	ldr	r3, [r7, #28]
 800a28c:	005b      	lsls	r3, r3, #1
 800a28e:	2203      	movs	r2, #3
 800a290:	fa02 f303 	lsl.w	r3, r2, r3
 800a294:	43db      	mvns	r3, r3
 800a296:	69ba      	ldr	r2, [r7, #24]
 800a298:	4013      	ands	r3, r2
 800a29a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	689a      	ldr	r2, [r3, #8]
 800a2a0:	69fb      	ldr	r3, [r7, #28]
 800a2a2:	005b      	lsls	r3, r3, #1
 800a2a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a2a8:	69ba      	ldr	r2, [r7, #24]
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	69ba      	ldr	r2, [r7, #24]
 800a2b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	f003 0303 	and.w	r3, r3, #3
 800a2bc:	2b02      	cmp	r3, #2
 800a2be:	d123      	bne.n	800a308 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	08da      	lsrs	r2, r3, #3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	3208      	adds	r2, #8
 800a2c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	f003 0307 	and.w	r3, r3, #7
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	220f      	movs	r2, #15
 800a2d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a2dc:	43db      	mvns	r3, r3
 800a2de:	69ba      	ldr	r2, [r7, #24]
 800a2e0:	4013      	ands	r3, r2
 800a2e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	691a      	ldr	r2, [r3, #16]
 800a2e8:	69fb      	ldr	r3, [r7, #28]
 800a2ea:	f003 0307 	and.w	r3, r3, #7
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a2f4:	69ba      	ldr	r2, [r7, #24]
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800a2fa:	69fb      	ldr	r3, [r7, #28]
 800a2fc:	08da      	lsrs	r2, r3, #3
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	3208      	adds	r2, #8
 800a302:	69b9      	ldr	r1, [r7, #24]
 800a304:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800a30e:	69fb      	ldr	r3, [r7, #28]
 800a310:	005b      	lsls	r3, r3, #1
 800a312:	2203      	movs	r2, #3
 800a314:	fa02 f303 	lsl.w	r3, r2, r3
 800a318:	43db      	mvns	r3, r3
 800a31a:	69ba      	ldr	r2, [r7, #24]
 800a31c:	4013      	ands	r3, r2
 800a31e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	f003 0203 	and.w	r2, r3, #3
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	005b      	lsls	r3, r3, #1
 800a32c:	fa02 f303 	lsl.w	r3, r2, r3
 800a330:	69ba      	ldr	r2, [r7, #24]
 800a332:	4313      	orrs	r3, r2
 800a334:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	69ba      	ldr	r2, [r7, #24]
 800a33a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a344:	2b00      	cmp	r3, #0
 800a346:	f000 80be 	beq.w	800a4c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a34a:	4b66      	ldr	r3, [pc, #408]	@ (800a4e4 <HAL_GPIO_Init+0x324>)
 800a34c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a34e:	4a65      	ldr	r2, [pc, #404]	@ (800a4e4 <HAL_GPIO_Init+0x324>)
 800a350:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a354:	6453      	str	r3, [r2, #68]	@ 0x44
 800a356:	4b63      	ldr	r3, [pc, #396]	@ (800a4e4 <HAL_GPIO_Init+0x324>)
 800a358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a35a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a35e:	60fb      	str	r3, [r7, #12]
 800a360:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800a362:	4a61      	ldr	r2, [pc, #388]	@ (800a4e8 <HAL_GPIO_Init+0x328>)
 800a364:	69fb      	ldr	r3, [r7, #28]
 800a366:	089b      	lsrs	r3, r3, #2
 800a368:	3302      	adds	r3, #2
 800a36a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a36e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800a370:	69fb      	ldr	r3, [r7, #28]
 800a372:	f003 0303 	and.w	r3, r3, #3
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	220f      	movs	r2, #15
 800a37a:	fa02 f303 	lsl.w	r3, r2, r3
 800a37e:	43db      	mvns	r3, r3
 800a380:	69ba      	ldr	r2, [r7, #24]
 800a382:	4013      	ands	r3, r2
 800a384:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	4a58      	ldr	r2, [pc, #352]	@ (800a4ec <HAL_GPIO_Init+0x32c>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d037      	beq.n	800a3fe <HAL_GPIO_Init+0x23e>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	4a57      	ldr	r2, [pc, #348]	@ (800a4f0 <HAL_GPIO_Init+0x330>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d031      	beq.n	800a3fa <HAL_GPIO_Init+0x23a>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	4a56      	ldr	r2, [pc, #344]	@ (800a4f4 <HAL_GPIO_Init+0x334>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d02b      	beq.n	800a3f6 <HAL_GPIO_Init+0x236>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	4a55      	ldr	r2, [pc, #340]	@ (800a4f8 <HAL_GPIO_Init+0x338>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d025      	beq.n	800a3f2 <HAL_GPIO_Init+0x232>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	4a54      	ldr	r2, [pc, #336]	@ (800a4fc <HAL_GPIO_Init+0x33c>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d01f      	beq.n	800a3ee <HAL_GPIO_Init+0x22e>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	4a53      	ldr	r2, [pc, #332]	@ (800a500 <HAL_GPIO_Init+0x340>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d019      	beq.n	800a3ea <HAL_GPIO_Init+0x22a>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	4a52      	ldr	r2, [pc, #328]	@ (800a504 <HAL_GPIO_Init+0x344>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d013      	beq.n	800a3e6 <HAL_GPIO_Init+0x226>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	4a51      	ldr	r2, [pc, #324]	@ (800a508 <HAL_GPIO_Init+0x348>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d00d      	beq.n	800a3e2 <HAL_GPIO_Init+0x222>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	4a50      	ldr	r2, [pc, #320]	@ (800a50c <HAL_GPIO_Init+0x34c>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d007      	beq.n	800a3de <HAL_GPIO_Init+0x21e>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	4a4f      	ldr	r2, [pc, #316]	@ (800a510 <HAL_GPIO_Init+0x350>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d101      	bne.n	800a3da <HAL_GPIO_Init+0x21a>
 800a3d6:	2309      	movs	r3, #9
 800a3d8:	e012      	b.n	800a400 <HAL_GPIO_Init+0x240>
 800a3da:	230a      	movs	r3, #10
 800a3dc:	e010      	b.n	800a400 <HAL_GPIO_Init+0x240>
 800a3de:	2308      	movs	r3, #8
 800a3e0:	e00e      	b.n	800a400 <HAL_GPIO_Init+0x240>
 800a3e2:	2307      	movs	r3, #7
 800a3e4:	e00c      	b.n	800a400 <HAL_GPIO_Init+0x240>
 800a3e6:	2306      	movs	r3, #6
 800a3e8:	e00a      	b.n	800a400 <HAL_GPIO_Init+0x240>
 800a3ea:	2305      	movs	r3, #5
 800a3ec:	e008      	b.n	800a400 <HAL_GPIO_Init+0x240>
 800a3ee:	2304      	movs	r3, #4
 800a3f0:	e006      	b.n	800a400 <HAL_GPIO_Init+0x240>
 800a3f2:	2303      	movs	r3, #3
 800a3f4:	e004      	b.n	800a400 <HAL_GPIO_Init+0x240>
 800a3f6:	2302      	movs	r3, #2
 800a3f8:	e002      	b.n	800a400 <HAL_GPIO_Init+0x240>
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	e000      	b.n	800a400 <HAL_GPIO_Init+0x240>
 800a3fe:	2300      	movs	r3, #0
 800a400:	69fa      	ldr	r2, [r7, #28]
 800a402:	f002 0203 	and.w	r2, r2, #3
 800a406:	0092      	lsls	r2, r2, #2
 800a408:	4093      	lsls	r3, r2
 800a40a:	69ba      	ldr	r2, [r7, #24]
 800a40c:	4313      	orrs	r3, r2
 800a40e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800a410:	4935      	ldr	r1, [pc, #212]	@ (800a4e8 <HAL_GPIO_Init+0x328>)
 800a412:	69fb      	ldr	r3, [r7, #28]
 800a414:	089b      	lsrs	r3, r3, #2
 800a416:	3302      	adds	r3, #2
 800a418:	69ba      	ldr	r2, [r7, #24]
 800a41a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a41e:	4b3d      	ldr	r3, [pc, #244]	@ (800a514 <HAL_GPIO_Init+0x354>)
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	43db      	mvns	r3, r3
 800a428:	69ba      	ldr	r2, [r7, #24]
 800a42a:	4013      	ands	r3, r2
 800a42c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a436:	2b00      	cmp	r3, #0
 800a438:	d003      	beq.n	800a442 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800a43a:	69ba      	ldr	r2, [r7, #24]
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	4313      	orrs	r3, r2
 800a440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a442:	4a34      	ldr	r2, [pc, #208]	@ (800a514 <HAL_GPIO_Init+0x354>)
 800a444:	69bb      	ldr	r3, [r7, #24]
 800a446:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a448:	4b32      	ldr	r3, [pc, #200]	@ (800a514 <HAL_GPIO_Init+0x354>)
 800a44a:	68db      	ldr	r3, [r3, #12]
 800a44c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	43db      	mvns	r3, r3
 800a452:	69ba      	ldr	r2, [r7, #24]
 800a454:	4013      	ands	r3, r2
 800a456:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a460:	2b00      	cmp	r3, #0
 800a462:	d003      	beq.n	800a46c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800a464:	69ba      	ldr	r2, [r7, #24]
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	4313      	orrs	r3, r2
 800a46a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a46c:	4a29      	ldr	r2, [pc, #164]	@ (800a514 <HAL_GPIO_Init+0x354>)
 800a46e:	69bb      	ldr	r3, [r7, #24]
 800a470:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800a472:	4b28      	ldr	r3, [pc, #160]	@ (800a514 <HAL_GPIO_Init+0x354>)
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	43db      	mvns	r3, r3
 800a47c:	69ba      	ldr	r2, [r7, #24]
 800a47e:	4013      	ands	r3, r2
 800a480:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d003      	beq.n	800a496 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800a48e:	69ba      	ldr	r2, [r7, #24]
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	4313      	orrs	r3, r2
 800a494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a496:	4a1f      	ldr	r2, [pc, #124]	@ (800a514 <HAL_GPIO_Init+0x354>)
 800a498:	69bb      	ldr	r3, [r7, #24]
 800a49a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a49c:	4b1d      	ldr	r3, [pc, #116]	@ (800a514 <HAL_GPIO_Init+0x354>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	43db      	mvns	r3, r3
 800a4a6:	69ba      	ldr	r2, [r7, #24]
 800a4a8:	4013      	ands	r3, r2
 800a4aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d003      	beq.n	800a4c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800a4b8:	69ba      	ldr	r2, [r7, #24]
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a4c0:	4a14      	ldr	r2, [pc, #80]	@ (800a514 <HAL_GPIO_Init+0x354>)
 800a4c2:	69bb      	ldr	r3, [r7, #24]
 800a4c4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800a4c6:	69fb      	ldr	r3, [r7, #28]
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	61fb      	str	r3, [r7, #28]
 800a4cc:	69fb      	ldr	r3, [r7, #28]
 800a4ce:	2b0f      	cmp	r3, #15
 800a4d0:	f67f ae86 	bls.w	800a1e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800a4d4:	bf00      	nop
 800a4d6:	bf00      	nop
 800a4d8:	3724      	adds	r7, #36	@ 0x24
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr
 800a4e2:	bf00      	nop
 800a4e4:	40023800 	.word	0x40023800
 800a4e8:	40013800 	.word	0x40013800
 800a4ec:	40020000 	.word	0x40020000
 800a4f0:	40020400 	.word	0x40020400
 800a4f4:	40020800 	.word	0x40020800
 800a4f8:	40020c00 	.word	0x40020c00
 800a4fc:	40021000 	.word	0x40021000
 800a500:	40021400 	.word	0x40021400
 800a504:	40021800 	.word	0x40021800
 800a508:	40021c00 	.word	0x40021c00
 800a50c:	40022000 	.word	0x40022000
 800a510:	40022400 	.word	0x40022400
 800a514:	40013c00 	.word	0x40013c00

0800a518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	460b      	mov	r3, r1
 800a522:	807b      	strh	r3, [r7, #2]
 800a524:	4613      	mov	r3, r2
 800a526:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a528:	787b      	ldrb	r3, [r7, #1]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d003      	beq.n	800a536 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a52e:	887a      	ldrh	r2, [r7, #2]
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800a534:	e003      	b.n	800a53e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800a536:	887b      	ldrh	r3, [r7, #2]
 800a538:	041a      	lsls	r2, r3, #16
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	619a      	str	r2, [r3, #24]
}
 800a53e:	bf00      	nop
 800a540:	370c      	adds	r7, #12
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr

0800a54a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a54a:	b480      	push	{r7}
 800a54c:	b085      	sub	sp, #20
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
 800a552:	460b      	mov	r3, r1
 800a554:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	695b      	ldr	r3, [r3, #20]
 800a55a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a55c:	887a      	ldrh	r2, [r7, #2]
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	4013      	ands	r3, r2
 800a562:	041a      	lsls	r2, r3, #16
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	43d9      	mvns	r1, r3
 800a568:	887b      	ldrh	r3, [r7, #2]
 800a56a:	400b      	ands	r3, r1
 800a56c:	431a      	orrs	r2, r3
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	619a      	str	r2, [r3, #24]
}
 800a572:	bf00      	nop
 800a574:	3714      	adds	r7, #20
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr
	...

0800a580 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b086      	sub	sp, #24
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800a588:	2300      	movs	r3, #0
 800a58a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d101      	bne.n	800a596 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800a592:	2301      	movs	r3, #1
 800a594:	e291      	b.n	800aaba <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f003 0301 	and.w	r3, r3, #1
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	f000 8087 	beq.w	800a6b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a5a4:	4b96      	ldr	r3, [pc, #600]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a5a6:	689b      	ldr	r3, [r3, #8]
 800a5a8:	f003 030c 	and.w	r3, r3, #12
 800a5ac:	2b04      	cmp	r3, #4
 800a5ae:	d00c      	beq.n	800a5ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a5b0:	4b93      	ldr	r3, [pc, #588]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a5b2:	689b      	ldr	r3, [r3, #8]
 800a5b4:	f003 030c 	and.w	r3, r3, #12
 800a5b8:	2b08      	cmp	r3, #8
 800a5ba:	d112      	bne.n	800a5e2 <HAL_RCC_OscConfig+0x62>
 800a5bc:	4b90      	ldr	r3, [pc, #576]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a5c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a5c8:	d10b      	bne.n	800a5e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a5ca:	4b8d      	ldr	r3, [pc, #564]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d06c      	beq.n	800a6b0 <HAL_RCC_OscConfig+0x130>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d168      	bne.n	800a6b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e26b      	b.n	800aaba <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5ea:	d106      	bne.n	800a5fa <HAL_RCC_OscConfig+0x7a>
 800a5ec:	4b84      	ldr	r3, [pc, #528]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a83      	ldr	r2, [pc, #524]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a5f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a5f6:	6013      	str	r3, [r2, #0]
 800a5f8:	e02e      	b.n	800a658 <HAL_RCC_OscConfig+0xd8>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d10c      	bne.n	800a61c <HAL_RCC_OscConfig+0x9c>
 800a602:	4b7f      	ldr	r3, [pc, #508]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4a7e      	ldr	r2, [pc, #504]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a608:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a60c:	6013      	str	r3, [r2, #0]
 800a60e:	4b7c      	ldr	r3, [pc, #496]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4a7b      	ldr	r2, [pc, #492]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a614:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a618:	6013      	str	r3, [r2, #0]
 800a61a:	e01d      	b.n	800a658 <HAL_RCC_OscConfig+0xd8>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a624:	d10c      	bne.n	800a640 <HAL_RCC_OscConfig+0xc0>
 800a626:	4b76      	ldr	r3, [pc, #472]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4a75      	ldr	r2, [pc, #468]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a62c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a630:	6013      	str	r3, [r2, #0]
 800a632:	4b73      	ldr	r3, [pc, #460]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	4a72      	ldr	r2, [pc, #456]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a638:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a63c:	6013      	str	r3, [r2, #0]
 800a63e:	e00b      	b.n	800a658 <HAL_RCC_OscConfig+0xd8>
 800a640:	4b6f      	ldr	r3, [pc, #444]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4a6e      	ldr	r2, [pc, #440]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a646:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a64a:	6013      	str	r3, [r2, #0]
 800a64c:	4b6c      	ldr	r3, [pc, #432]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	4a6b      	ldr	r2, [pc, #428]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a652:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a656:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d013      	beq.n	800a688 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a660:	f7ff fc98 	bl	8009f94 <HAL_GetTick>
 800a664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a666:	e008      	b.n	800a67a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a668:	f7ff fc94 	bl	8009f94 <HAL_GetTick>
 800a66c:	4602      	mov	r2, r0
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	1ad3      	subs	r3, r2, r3
 800a672:	2b64      	cmp	r3, #100	@ 0x64
 800a674:	d901      	bls.n	800a67a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a676:	2303      	movs	r3, #3
 800a678:	e21f      	b.n	800aaba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a67a:	4b61      	ldr	r3, [pc, #388]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a682:	2b00      	cmp	r3, #0
 800a684:	d0f0      	beq.n	800a668 <HAL_RCC_OscConfig+0xe8>
 800a686:	e014      	b.n	800a6b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a688:	f7ff fc84 	bl	8009f94 <HAL_GetTick>
 800a68c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a68e:	e008      	b.n	800a6a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a690:	f7ff fc80 	bl	8009f94 <HAL_GetTick>
 800a694:	4602      	mov	r2, r0
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	1ad3      	subs	r3, r2, r3
 800a69a:	2b64      	cmp	r3, #100	@ 0x64
 800a69c:	d901      	bls.n	800a6a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a69e:	2303      	movs	r3, #3
 800a6a0:	e20b      	b.n	800aaba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a6a2:	4b57      	ldr	r3, [pc, #348]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d1f0      	bne.n	800a690 <HAL_RCC_OscConfig+0x110>
 800a6ae:	e000      	b.n	800a6b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a6b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f003 0302 	and.w	r3, r3, #2
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d069      	beq.n	800a792 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a6be:	4b50      	ldr	r3, [pc, #320]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a6c0:	689b      	ldr	r3, [r3, #8]
 800a6c2:	f003 030c 	and.w	r3, r3, #12
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d00b      	beq.n	800a6e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a6ca:	4b4d      	ldr	r3, [pc, #308]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a6cc:	689b      	ldr	r3, [r3, #8]
 800a6ce:	f003 030c 	and.w	r3, r3, #12
 800a6d2:	2b08      	cmp	r3, #8
 800a6d4:	d11c      	bne.n	800a710 <HAL_RCC_OscConfig+0x190>
 800a6d6:	4b4a      	ldr	r3, [pc, #296]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d116      	bne.n	800a710 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a6e2:	4b47      	ldr	r3, [pc, #284]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f003 0302 	and.w	r3, r3, #2
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d005      	beq.n	800a6fa <HAL_RCC_OscConfig+0x17a>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	68db      	ldr	r3, [r3, #12]
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	d001      	beq.n	800a6fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e1df      	b.n	800aaba <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a6fa:	4b41      	ldr	r3, [pc, #260]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	691b      	ldr	r3, [r3, #16]
 800a706:	00db      	lsls	r3, r3, #3
 800a708:	493d      	ldr	r1, [pc, #244]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a70a:	4313      	orrs	r3, r2
 800a70c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a70e:	e040      	b.n	800a792 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	68db      	ldr	r3, [r3, #12]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d023      	beq.n	800a760 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a718:	4b39      	ldr	r3, [pc, #228]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4a38      	ldr	r2, [pc, #224]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a71e:	f043 0301 	orr.w	r3, r3, #1
 800a722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a724:	f7ff fc36 	bl	8009f94 <HAL_GetTick>
 800a728:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a72a:	e008      	b.n	800a73e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a72c:	f7ff fc32 	bl	8009f94 <HAL_GetTick>
 800a730:	4602      	mov	r2, r0
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	1ad3      	subs	r3, r2, r3
 800a736:	2b02      	cmp	r3, #2
 800a738:	d901      	bls.n	800a73e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800a73a:	2303      	movs	r3, #3
 800a73c:	e1bd      	b.n	800aaba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a73e:	4b30      	ldr	r3, [pc, #192]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f003 0302 	and.w	r3, r3, #2
 800a746:	2b00      	cmp	r3, #0
 800a748:	d0f0      	beq.n	800a72c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a74a:	4b2d      	ldr	r3, [pc, #180]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	691b      	ldr	r3, [r3, #16]
 800a756:	00db      	lsls	r3, r3, #3
 800a758:	4929      	ldr	r1, [pc, #164]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a75a:	4313      	orrs	r3, r2
 800a75c:	600b      	str	r3, [r1, #0]
 800a75e:	e018      	b.n	800a792 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a760:	4b27      	ldr	r3, [pc, #156]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a26      	ldr	r2, [pc, #152]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a766:	f023 0301 	bic.w	r3, r3, #1
 800a76a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a76c:	f7ff fc12 	bl	8009f94 <HAL_GetTick>
 800a770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a772:	e008      	b.n	800a786 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a774:	f7ff fc0e 	bl	8009f94 <HAL_GetTick>
 800a778:	4602      	mov	r2, r0
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	1ad3      	subs	r3, r2, r3
 800a77e:	2b02      	cmp	r3, #2
 800a780:	d901      	bls.n	800a786 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a782:	2303      	movs	r3, #3
 800a784:	e199      	b.n	800aaba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a786:	4b1e      	ldr	r3, [pc, #120]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f003 0302 	and.w	r3, r3, #2
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d1f0      	bne.n	800a774 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f003 0308 	and.w	r3, r3, #8
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d038      	beq.n	800a810 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	695b      	ldr	r3, [r3, #20]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d019      	beq.n	800a7da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a7a6:	4b16      	ldr	r3, [pc, #88]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a7a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7aa:	4a15      	ldr	r2, [pc, #84]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a7ac:	f043 0301 	orr.w	r3, r3, #1
 800a7b0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7b2:	f7ff fbef 	bl	8009f94 <HAL_GetTick>
 800a7b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a7b8:	e008      	b.n	800a7cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a7ba:	f7ff fbeb 	bl	8009f94 <HAL_GetTick>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	1ad3      	subs	r3, r2, r3
 800a7c4:	2b02      	cmp	r3, #2
 800a7c6:	d901      	bls.n	800a7cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a7c8:	2303      	movs	r3, #3
 800a7ca:	e176      	b.n	800aaba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a7cc:	4b0c      	ldr	r3, [pc, #48]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a7ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7d0:	f003 0302 	and.w	r3, r3, #2
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d0f0      	beq.n	800a7ba <HAL_RCC_OscConfig+0x23a>
 800a7d8:	e01a      	b.n	800a810 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a7da:	4b09      	ldr	r3, [pc, #36]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a7dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7de:	4a08      	ldr	r2, [pc, #32]	@ (800a800 <HAL_RCC_OscConfig+0x280>)
 800a7e0:	f023 0301 	bic.w	r3, r3, #1
 800a7e4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7e6:	f7ff fbd5 	bl	8009f94 <HAL_GetTick>
 800a7ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a7ec:	e00a      	b.n	800a804 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a7ee:	f7ff fbd1 	bl	8009f94 <HAL_GetTick>
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	1ad3      	subs	r3, r2, r3
 800a7f8:	2b02      	cmp	r3, #2
 800a7fa:	d903      	bls.n	800a804 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a7fc:	2303      	movs	r3, #3
 800a7fe:	e15c      	b.n	800aaba <HAL_RCC_OscConfig+0x53a>
 800a800:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a804:	4b91      	ldr	r3, [pc, #580]	@ (800aa4c <HAL_RCC_OscConfig+0x4cc>)
 800a806:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a808:	f003 0302 	and.w	r3, r3, #2
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d1ee      	bne.n	800a7ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f003 0304 	and.w	r3, r3, #4
 800a818:	2b00      	cmp	r3, #0
 800a81a:	f000 80a4 	beq.w	800a966 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a81e:	4b8b      	ldr	r3, [pc, #556]	@ (800aa4c <HAL_RCC_OscConfig+0x4cc>)
 800a820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a826:	2b00      	cmp	r3, #0
 800a828:	d10d      	bne.n	800a846 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a82a:	4b88      	ldr	r3, [pc, #544]	@ (800aa4c <HAL_RCC_OscConfig+0x4cc>)
 800a82c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a82e:	4a87      	ldr	r2, [pc, #540]	@ (800aa4c <HAL_RCC_OscConfig+0x4cc>)
 800a830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a834:	6413      	str	r3, [r2, #64]	@ 0x40
 800a836:	4b85      	ldr	r3, [pc, #532]	@ (800aa4c <HAL_RCC_OscConfig+0x4cc>)
 800a838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a83a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a83e:	60bb      	str	r3, [r7, #8]
 800a840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a842:	2301      	movs	r3, #1
 800a844:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a846:	4b82      	ldr	r3, [pc, #520]	@ (800aa50 <HAL_RCC_OscConfig+0x4d0>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d118      	bne.n	800a884 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800a852:	4b7f      	ldr	r3, [pc, #508]	@ (800aa50 <HAL_RCC_OscConfig+0x4d0>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4a7e      	ldr	r2, [pc, #504]	@ (800aa50 <HAL_RCC_OscConfig+0x4d0>)
 800a858:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a85c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a85e:	f7ff fb99 	bl	8009f94 <HAL_GetTick>
 800a862:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a864:	e008      	b.n	800a878 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a866:	f7ff fb95 	bl	8009f94 <HAL_GetTick>
 800a86a:	4602      	mov	r2, r0
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	1ad3      	subs	r3, r2, r3
 800a870:	2b64      	cmp	r3, #100	@ 0x64
 800a872:	d901      	bls.n	800a878 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800a874:	2303      	movs	r3, #3
 800a876:	e120      	b.n	800aaba <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a878:	4b75      	ldr	r3, [pc, #468]	@ (800aa50 <HAL_RCC_OscConfig+0x4d0>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a880:	2b00      	cmp	r3, #0
 800a882:	d0f0      	beq.n	800a866 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	689b      	ldr	r3, [r3, #8]
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d106      	bne.n	800a89a <HAL_RCC_OscConfig+0x31a>
 800a88c:	4b6f      	ldr	r3, [pc, #444]	@ (800aa4c <HAL_RCC_OscConfig+0x4cc>)
 800a88e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a890:	4a6e      	ldr	r2, [pc, #440]	@ (800aa4c <HAL_RCC_OscConfig+0x4cc>)
 800a892:	f043 0301 	orr.w	r3, r3, #1
 800a896:	6713      	str	r3, [r2, #112]	@ 0x70
 800a898:	e02d      	b.n	800a8f6 <HAL_RCC_OscConfig+0x376>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	689b      	ldr	r3, [r3, #8]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d10c      	bne.n	800a8bc <HAL_RCC_OscConfig+0x33c>
 800a8a2:	4b6a      	ldr	r3, [pc, #424]	@ (800aa4c <HAL_RCC_OscConfig+0x4cc>)
 800a8a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a8a6:	4a69      	ldr	r2, [pc, #420]	@ (800aa4c <HAL_RCC_OscConfig+0x4cc>)
 800a8a8:	f023 0301 	bic.w	r3, r3, #1
 800a8ac:	6713      	str	r3, [r2, #112]	@ 0x70
 800a8ae:	4b67      	ldr	r3, [pc, #412]	@ (800aa4c <HAL_RCC_OscConfig+0x4cc>)
 800a8b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a8b2:	4a66      	ldr	r2, [pc, #408]	@ (800aa4c <HAL_RCC_OscConfig+0x4cc>)
 800a8b4:	f023 0304 	bic.w	r3, r3, #4
 800a8b8:	6713      	str	r3, [r2, #112]	@ 0x70
 800a8ba:	e01c      	b.n	800a8f6 <HAL_RCC_OscConfig+0x376>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	689b      	ldr	r3, [r3, #8]
 800a8c0:	2b05      	cmp	r3, #5
 800a8c2:	d10c      	bne.n	800a8de <HAL_RCC_OscConfig+0x35e>
 800a8c4:	4b61      	ldr	r3, [pc, #388]	@ (800aa4c <HAL_RCC_OscConfig+0x4cc>)
 800a8c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a8c8:	4a60      	ldr	r2, [pc, #384]	@ (800aa4c <HAL_RCC_OscConfig+0x4cc>)
 800a8ca:	f043 0304 	orr.w	r3, r3, #4
 800a8ce:	6713      	str	r3, [r2, #112]	@ 0x70
 800a8d0:	4b5e      	ldr	r3, [pc, #376]	@ (800aa4c <HAL_RCC_OscConfig+0x4cc>)
 800a8d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a8d4:	4a5d      	ldr	r2, [pc, #372]	@ (800aa4c <HAL_RCC_OscConfig+0x4cc>)
 800a8d6:	f043 0301 	orr.w	r3, r3, #1
 800a8da:	6713      	str	r3, [r2, #112]	@ 0x70
 800a8dc:	e00b      	b.n	800a8f6 <HAL_RCC_OscConfig+0x376>
 800a8de:	4b5b      	ldr	r3, [pc, #364]	@ (800aa4c <HAL_RCC_OscConfig+0x4cc>)
 800a8e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a8e2:	4a5a      	ldr	r2, [pc, #360]	@ (800aa4c <HAL_RCC_OscConfig+0x4cc>)
 800a8e4:	f023 0301 	bic.w	r3, r3, #1
 800a8e8:	6713      	str	r3, [r2, #112]	@ 0x70
 800a8ea:	4b58      	ldr	r3, [pc, #352]	@ (800aa4c <HAL_RCC_OscConfig+0x4cc>)
 800a8ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a8ee:	4a57      	ldr	r2, [pc, #348]	@ (800aa4c <HAL_RCC_OscConfig+0x4cc>)
 800a8f0:	f023 0304 	bic.w	r3, r3, #4
 800a8f4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	689b      	ldr	r3, [r3, #8]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d015      	beq.n	800a92a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8fe:	f7ff fb49 	bl	8009f94 <HAL_GetTick>
 800a902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a904:	e00a      	b.n	800a91c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a906:	f7ff fb45 	bl	8009f94 <HAL_GetTick>
 800a90a:	4602      	mov	r2, r0
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	1ad3      	subs	r3, r2, r3
 800a910:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a914:	4293      	cmp	r3, r2
 800a916:	d901      	bls.n	800a91c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800a918:	2303      	movs	r3, #3
 800a91a:	e0ce      	b.n	800aaba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a91c:	4b4b      	ldr	r3, [pc, #300]	@ (800aa4c <HAL_RCC_OscConfig+0x4cc>)
 800a91e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a920:	f003 0302 	and.w	r3, r3, #2
 800a924:	2b00      	cmp	r3, #0
 800a926:	d0ee      	beq.n	800a906 <HAL_RCC_OscConfig+0x386>
 800a928:	e014      	b.n	800a954 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a92a:	f7ff fb33 	bl	8009f94 <HAL_GetTick>
 800a92e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a930:	e00a      	b.n	800a948 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a932:	f7ff fb2f 	bl	8009f94 <HAL_GetTick>
 800a936:	4602      	mov	r2, r0
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	1ad3      	subs	r3, r2, r3
 800a93c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a940:	4293      	cmp	r3, r2
 800a942:	d901      	bls.n	800a948 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800a944:	2303      	movs	r3, #3
 800a946:	e0b8      	b.n	800aaba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a948:	4b40      	ldr	r3, [pc, #256]	@ (800aa4c <HAL_RCC_OscConfig+0x4cc>)
 800a94a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a94c:	f003 0302 	and.w	r3, r3, #2
 800a950:	2b00      	cmp	r3, #0
 800a952:	d1ee      	bne.n	800a932 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a954:	7dfb      	ldrb	r3, [r7, #23]
 800a956:	2b01      	cmp	r3, #1
 800a958:	d105      	bne.n	800a966 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a95a:	4b3c      	ldr	r3, [pc, #240]	@ (800aa4c <HAL_RCC_OscConfig+0x4cc>)
 800a95c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a95e:	4a3b      	ldr	r2, [pc, #236]	@ (800aa4c <HAL_RCC_OscConfig+0x4cc>)
 800a960:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a964:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	699b      	ldr	r3, [r3, #24]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	f000 80a4 	beq.w	800aab8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a970:	4b36      	ldr	r3, [pc, #216]	@ (800aa4c <HAL_RCC_OscConfig+0x4cc>)
 800a972:	689b      	ldr	r3, [r3, #8]
 800a974:	f003 030c 	and.w	r3, r3, #12
 800a978:	2b08      	cmp	r3, #8
 800a97a:	d06b      	beq.n	800aa54 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	699b      	ldr	r3, [r3, #24]
 800a980:	2b02      	cmp	r3, #2
 800a982:	d149      	bne.n	800aa18 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a984:	4b31      	ldr	r3, [pc, #196]	@ (800aa4c <HAL_RCC_OscConfig+0x4cc>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a30      	ldr	r2, [pc, #192]	@ (800aa4c <HAL_RCC_OscConfig+0x4cc>)
 800a98a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a98e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a990:	f7ff fb00 	bl	8009f94 <HAL_GetTick>
 800a994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a996:	e008      	b.n	800a9aa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a998:	f7ff fafc 	bl	8009f94 <HAL_GetTick>
 800a99c:	4602      	mov	r2, r0
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	1ad3      	subs	r3, r2, r3
 800a9a2:	2b02      	cmp	r3, #2
 800a9a4:	d901      	bls.n	800a9aa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800a9a6:	2303      	movs	r3, #3
 800a9a8:	e087      	b.n	800aaba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a9aa:	4b28      	ldr	r3, [pc, #160]	@ (800aa4c <HAL_RCC_OscConfig+0x4cc>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d1f0      	bne.n	800a998 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	69da      	ldr	r2, [r3, #28]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6a1b      	ldr	r3, [r3, #32]
 800a9be:	431a      	orrs	r2, r3
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9c4:	019b      	lsls	r3, r3, #6
 800a9c6:	431a      	orrs	r2, r3
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9cc:	085b      	lsrs	r3, r3, #1
 800a9ce:	3b01      	subs	r3, #1
 800a9d0:	041b      	lsls	r3, r3, #16
 800a9d2:	431a      	orrs	r2, r3
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9d8:	061b      	lsls	r3, r3, #24
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	4a1b      	ldr	r2, [pc, #108]	@ (800aa4c <HAL_RCC_OscConfig+0x4cc>)
 800a9de:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a9e2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a9e4:	4b19      	ldr	r3, [pc, #100]	@ (800aa4c <HAL_RCC_OscConfig+0x4cc>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4a18      	ldr	r2, [pc, #96]	@ (800aa4c <HAL_RCC_OscConfig+0x4cc>)
 800a9ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a9ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9f0:	f7ff fad0 	bl	8009f94 <HAL_GetTick>
 800a9f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a9f6:	e008      	b.n	800aa0a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9f8:	f7ff facc 	bl	8009f94 <HAL_GetTick>
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	1ad3      	subs	r3, r2, r3
 800aa02:	2b02      	cmp	r3, #2
 800aa04:	d901      	bls.n	800aa0a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800aa06:	2303      	movs	r3, #3
 800aa08:	e057      	b.n	800aaba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aa0a:	4b10      	ldr	r3, [pc, #64]	@ (800aa4c <HAL_RCC_OscConfig+0x4cc>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d0f0      	beq.n	800a9f8 <HAL_RCC_OscConfig+0x478>
 800aa16:	e04f      	b.n	800aab8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa18:	4b0c      	ldr	r3, [pc, #48]	@ (800aa4c <HAL_RCC_OscConfig+0x4cc>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a0b      	ldr	r2, [pc, #44]	@ (800aa4c <HAL_RCC_OscConfig+0x4cc>)
 800aa1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aa22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa24:	f7ff fab6 	bl	8009f94 <HAL_GetTick>
 800aa28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aa2a:	e008      	b.n	800aa3e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa2c:	f7ff fab2 	bl	8009f94 <HAL_GetTick>
 800aa30:	4602      	mov	r2, r0
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	1ad3      	subs	r3, r2, r3
 800aa36:	2b02      	cmp	r3, #2
 800aa38:	d901      	bls.n	800aa3e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800aa3a:	2303      	movs	r3, #3
 800aa3c:	e03d      	b.n	800aaba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aa3e:	4b03      	ldr	r3, [pc, #12]	@ (800aa4c <HAL_RCC_OscConfig+0x4cc>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d1f0      	bne.n	800aa2c <HAL_RCC_OscConfig+0x4ac>
 800aa4a:	e035      	b.n	800aab8 <HAL_RCC_OscConfig+0x538>
 800aa4c:	40023800 	.word	0x40023800
 800aa50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800aa54:	4b1b      	ldr	r3, [pc, #108]	@ (800aac4 <HAL_RCC_OscConfig+0x544>)
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	699b      	ldr	r3, [r3, #24]
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d028      	beq.n	800aab4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	d121      	bne.n	800aab4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d11a      	bne.n	800aab4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800aa7e:	68fa      	ldr	r2, [r7, #12]
 800aa80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800aa84:	4013      	ands	r3, r2
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800aa8a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d111      	bne.n	800aab4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa9a:	085b      	lsrs	r3, r3, #1
 800aa9c:	3b01      	subs	r3, #1
 800aa9e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d107      	bne.n	800aab4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d001      	beq.n	800aab8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800aab4:	2301      	movs	r3, #1
 800aab6:	e000      	b.n	800aaba <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800aab8:	2300      	movs	r3, #0
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3718      	adds	r7, #24
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}
 800aac2:	bf00      	nop
 800aac4:	40023800 	.word	0x40023800

0800aac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b084      	sub	sp, #16
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800aad2:	2300      	movs	r3, #0
 800aad4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d101      	bne.n	800aae0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800aadc:	2301      	movs	r3, #1
 800aade:	e0d0      	b.n	800ac82 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aae0:	4b6a      	ldr	r3, [pc, #424]	@ (800ac8c <HAL_RCC_ClockConfig+0x1c4>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f003 030f 	and.w	r3, r3, #15
 800aae8:	683a      	ldr	r2, [r7, #0]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d910      	bls.n	800ab10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aaee:	4b67      	ldr	r3, [pc, #412]	@ (800ac8c <HAL_RCC_ClockConfig+0x1c4>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f023 020f 	bic.w	r2, r3, #15
 800aaf6:	4965      	ldr	r1, [pc, #404]	@ (800ac8c <HAL_RCC_ClockConfig+0x1c4>)
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	4313      	orrs	r3, r2
 800aafc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aafe:	4b63      	ldr	r3, [pc, #396]	@ (800ac8c <HAL_RCC_ClockConfig+0x1c4>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f003 030f 	and.w	r3, r3, #15
 800ab06:	683a      	ldr	r2, [r7, #0]
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d001      	beq.n	800ab10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	e0b8      	b.n	800ac82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f003 0302 	and.w	r3, r3, #2
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d020      	beq.n	800ab5e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f003 0304 	and.w	r3, r3, #4
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d005      	beq.n	800ab34 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ab28:	4b59      	ldr	r3, [pc, #356]	@ (800ac90 <HAL_RCC_ClockConfig+0x1c8>)
 800ab2a:	689b      	ldr	r3, [r3, #8]
 800ab2c:	4a58      	ldr	r2, [pc, #352]	@ (800ac90 <HAL_RCC_ClockConfig+0x1c8>)
 800ab2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800ab32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f003 0308 	and.w	r3, r3, #8
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d005      	beq.n	800ab4c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ab40:	4b53      	ldr	r3, [pc, #332]	@ (800ac90 <HAL_RCC_ClockConfig+0x1c8>)
 800ab42:	689b      	ldr	r3, [r3, #8]
 800ab44:	4a52      	ldr	r2, [pc, #328]	@ (800ac90 <HAL_RCC_ClockConfig+0x1c8>)
 800ab46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800ab4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ab4c:	4b50      	ldr	r3, [pc, #320]	@ (800ac90 <HAL_RCC_ClockConfig+0x1c8>)
 800ab4e:	689b      	ldr	r3, [r3, #8]
 800ab50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	494d      	ldr	r1, [pc, #308]	@ (800ac90 <HAL_RCC_ClockConfig+0x1c8>)
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f003 0301 	and.w	r3, r3, #1
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d040      	beq.n	800abec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d107      	bne.n	800ab82 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ab72:	4b47      	ldr	r3, [pc, #284]	@ (800ac90 <HAL_RCC_ClockConfig+0x1c8>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d115      	bne.n	800abaa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	e07f      	b.n	800ac82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	2b02      	cmp	r3, #2
 800ab88:	d107      	bne.n	800ab9a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ab8a:	4b41      	ldr	r3, [pc, #260]	@ (800ac90 <HAL_RCC_ClockConfig+0x1c8>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d109      	bne.n	800abaa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ab96:	2301      	movs	r3, #1
 800ab98:	e073      	b.n	800ac82 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ab9a:	4b3d      	ldr	r3, [pc, #244]	@ (800ac90 <HAL_RCC_ClockConfig+0x1c8>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f003 0302 	and.w	r3, r3, #2
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d101      	bne.n	800abaa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800aba6:	2301      	movs	r3, #1
 800aba8:	e06b      	b.n	800ac82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800abaa:	4b39      	ldr	r3, [pc, #228]	@ (800ac90 <HAL_RCC_ClockConfig+0x1c8>)
 800abac:	689b      	ldr	r3, [r3, #8]
 800abae:	f023 0203 	bic.w	r2, r3, #3
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	4936      	ldr	r1, [pc, #216]	@ (800ac90 <HAL_RCC_ClockConfig+0x1c8>)
 800abb8:	4313      	orrs	r3, r2
 800abba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800abbc:	f7ff f9ea 	bl	8009f94 <HAL_GetTick>
 800abc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800abc2:	e00a      	b.n	800abda <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800abc4:	f7ff f9e6 	bl	8009f94 <HAL_GetTick>
 800abc8:	4602      	mov	r2, r0
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	1ad3      	subs	r3, r2, r3
 800abce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d901      	bls.n	800abda <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800abd6:	2303      	movs	r3, #3
 800abd8:	e053      	b.n	800ac82 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800abda:	4b2d      	ldr	r3, [pc, #180]	@ (800ac90 <HAL_RCC_ClockConfig+0x1c8>)
 800abdc:	689b      	ldr	r3, [r3, #8]
 800abde:	f003 020c 	and.w	r2, r3, #12
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	009b      	lsls	r3, r3, #2
 800abe8:	429a      	cmp	r2, r3
 800abea:	d1eb      	bne.n	800abc4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800abec:	4b27      	ldr	r3, [pc, #156]	@ (800ac8c <HAL_RCC_ClockConfig+0x1c4>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f003 030f 	and.w	r3, r3, #15
 800abf4:	683a      	ldr	r2, [r7, #0]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d210      	bcs.n	800ac1c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800abfa:	4b24      	ldr	r3, [pc, #144]	@ (800ac8c <HAL_RCC_ClockConfig+0x1c4>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f023 020f 	bic.w	r2, r3, #15
 800ac02:	4922      	ldr	r1, [pc, #136]	@ (800ac8c <HAL_RCC_ClockConfig+0x1c4>)
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	4313      	orrs	r3, r2
 800ac08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac0a:	4b20      	ldr	r3, [pc, #128]	@ (800ac8c <HAL_RCC_ClockConfig+0x1c4>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f003 030f 	and.w	r3, r3, #15
 800ac12:	683a      	ldr	r2, [r7, #0]
 800ac14:	429a      	cmp	r2, r3
 800ac16:	d001      	beq.n	800ac1c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	e032      	b.n	800ac82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f003 0304 	and.w	r3, r3, #4
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d008      	beq.n	800ac3a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ac28:	4b19      	ldr	r3, [pc, #100]	@ (800ac90 <HAL_RCC_ClockConfig+0x1c8>)
 800ac2a:	689b      	ldr	r3, [r3, #8]
 800ac2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	68db      	ldr	r3, [r3, #12]
 800ac34:	4916      	ldr	r1, [pc, #88]	@ (800ac90 <HAL_RCC_ClockConfig+0x1c8>)
 800ac36:	4313      	orrs	r3, r2
 800ac38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f003 0308 	and.w	r3, r3, #8
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d009      	beq.n	800ac5a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ac46:	4b12      	ldr	r3, [pc, #72]	@ (800ac90 <HAL_RCC_ClockConfig+0x1c8>)
 800ac48:	689b      	ldr	r3, [r3, #8]
 800ac4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	691b      	ldr	r3, [r3, #16]
 800ac52:	00db      	lsls	r3, r3, #3
 800ac54:	490e      	ldr	r1, [pc, #56]	@ (800ac90 <HAL_RCC_ClockConfig+0x1c8>)
 800ac56:	4313      	orrs	r3, r2
 800ac58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ac5a:	f000 f821 	bl	800aca0 <HAL_RCC_GetSysClockFreq>
 800ac5e:	4602      	mov	r2, r0
 800ac60:	4b0b      	ldr	r3, [pc, #44]	@ (800ac90 <HAL_RCC_ClockConfig+0x1c8>)
 800ac62:	689b      	ldr	r3, [r3, #8]
 800ac64:	091b      	lsrs	r3, r3, #4
 800ac66:	f003 030f 	and.w	r3, r3, #15
 800ac6a:	490a      	ldr	r1, [pc, #40]	@ (800ac94 <HAL_RCC_ClockConfig+0x1cc>)
 800ac6c:	5ccb      	ldrb	r3, [r1, r3]
 800ac6e:	fa22 f303 	lsr.w	r3, r2, r3
 800ac72:	4a09      	ldr	r2, [pc, #36]	@ (800ac98 <HAL_RCC_ClockConfig+0x1d0>)
 800ac74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ac76:	4b09      	ldr	r3, [pc, #36]	@ (800ac9c <HAL_RCC_ClockConfig+0x1d4>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f7ff f946 	bl	8009f0c <HAL_InitTick>

  return HAL_OK;
 800ac80:	2300      	movs	r3, #0
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3710      	adds	r7, #16
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	40023c00 	.word	0x40023c00
 800ac90:	40023800 	.word	0x40023800
 800ac94:	08014074 	.word	0x08014074
 800ac98:	20000000 	.word	0x20000000
 800ac9c:	20000004 	.word	0x20000004

0800aca0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aca4:	b094      	sub	sp, #80	@ 0x50
 800aca6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800aca8:	2300      	movs	r3, #0
 800acaa:	647b      	str	r3, [r7, #68]	@ 0x44
 800acac:	2300      	movs	r3, #0
 800acae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800acb0:	2300      	movs	r3, #0
 800acb2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800acb4:	2300      	movs	r3, #0
 800acb6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800acb8:	4b79      	ldr	r3, [pc, #484]	@ (800aea0 <HAL_RCC_GetSysClockFreq+0x200>)
 800acba:	689b      	ldr	r3, [r3, #8]
 800acbc:	f003 030c 	and.w	r3, r3, #12
 800acc0:	2b08      	cmp	r3, #8
 800acc2:	d00d      	beq.n	800ace0 <HAL_RCC_GetSysClockFreq+0x40>
 800acc4:	2b08      	cmp	r3, #8
 800acc6:	f200 80e1 	bhi.w	800ae8c <HAL_RCC_GetSysClockFreq+0x1ec>
 800acca:	2b00      	cmp	r3, #0
 800accc:	d002      	beq.n	800acd4 <HAL_RCC_GetSysClockFreq+0x34>
 800acce:	2b04      	cmp	r3, #4
 800acd0:	d003      	beq.n	800acda <HAL_RCC_GetSysClockFreq+0x3a>
 800acd2:	e0db      	b.n	800ae8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800acd4:	4b73      	ldr	r3, [pc, #460]	@ (800aea4 <HAL_RCC_GetSysClockFreq+0x204>)
 800acd6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800acd8:	e0db      	b.n	800ae92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800acda:	4b73      	ldr	r3, [pc, #460]	@ (800aea8 <HAL_RCC_GetSysClockFreq+0x208>)
 800acdc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800acde:	e0d8      	b.n	800ae92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ace0:	4b6f      	ldr	r3, [pc, #444]	@ (800aea0 <HAL_RCC_GetSysClockFreq+0x200>)
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ace8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800acea:	4b6d      	ldr	r3, [pc, #436]	@ (800aea0 <HAL_RCC_GetSysClockFreq+0x200>)
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d063      	beq.n	800adbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800acf6:	4b6a      	ldr	r3, [pc, #424]	@ (800aea0 <HAL_RCC_GetSysClockFreq+0x200>)
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	099b      	lsrs	r3, r3, #6
 800acfc:	2200      	movs	r2, #0
 800acfe:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ad00:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800ad02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad08:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800ad12:	4622      	mov	r2, r4
 800ad14:	462b      	mov	r3, r5
 800ad16:	f04f 0000 	mov.w	r0, #0
 800ad1a:	f04f 0100 	mov.w	r1, #0
 800ad1e:	0159      	lsls	r1, r3, #5
 800ad20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ad24:	0150      	lsls	r0, r2, #5
 800ad26:	4602      	mov	r2, r0
 800ad28:	460b      	mov	r3, r1
 800ad2a:	4621      	mov	r1, r4
 800ad2c:	1a51      	subs	r1, r2, r1
 800ad2e:	6139      	str	r1, [r7, #16]
 800ad30:	4629      	mov	r1, r5
 800ad32:	eb63 0301 	sbc.w	r3, r3, r1
 800ad36:	617b      	str	r3, [r7, #20]
 800ad38:	f04f 0200 	mov.w	r2, #0
 800ad3c:	f04f 0300 	mov.w	r3, #0
 800ad40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ad44:	4659      	mov	r1, fp
 800ad46:	018b      	lsls	r3, r1, #6
 800ad48:	4651      	mov	r1, sl
 800ad4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ad4e:	4651      	mov	r1, sl
 800ad50:	018a      	lsls	r2, r1, #6
 800ad52:	4651      	mov	r1, sl
 800ad54:	ebb2 0801 	subs.w	r8, r2, r1
 800ad58:	4659      	mov	r1, fp
 800ad5a:	eb63 0901 	sbc.w	r9, r3, r1
 800ad5e:	f04f 0200 	mov.w	r2, #0
 800ad62:	f04f 0300 	mov.w	r3, #0
 800ad66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ad6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ad6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ad72:	4690      	mov	r8, r2
 800ad74:	4699      	mov	r9, r3
 800ad76:	4623      	mov	r3, r4
 800ad78:	eb18 0303 	adds.w	r3, r8, r3
 800ad7c:	60bb      	str	r3, [r7, #8]
 800ad7e:	462b      	mov	r3, r5
 800ad80:	eb49 0303 	adc.w	r3, r9, r3
 800ad84:	60fb      	str	r3, [r7, #12]
 800ad86:	f04f 0200 	mov.w	r2, #0
 800ad8a:	f04f 0300 	mov.w	r3, #0
 800ad8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800ad92:	4629      	mov	r1, r5
 800ad94:	024b      	lsls	r3, r1, #9
 800ad96:	4621      	mov	r1, r4
 800ad98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800ad9c:	4621      	mov	r1, r4
 800ad9e:	024a      	lsls	r2, r1, #9
 800ada0:	4610      	mov	r0, r2
 800ada2:	4619      	mov	r1, r3
 800ada4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ada6:	2200      	movs	r2, #0
 800ada8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800adaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800adac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800adb0:	f7f5 ff8a 	bl	8000cc8 <__aeabi_uldivmod>
 800adb4:	4602      	mov	r2, r0
 800adb6:	460b      	mov	r3, r1
 800adb8:	4613      	mov	r3, r2
 800adba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800adbc:	e058      	b.n	800ae70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800adbe:	4b38      	ldr	r3, [pc, #224]	@ (800aea0 <HAL_RCC_GetSysClockFreq+0x200>)
 800adc0:	685b      	ldr	r3, [r3, #4]
 800adc2:	099b      	lsrs	r3, r3, #6
 800adc4:	2200      	movs	r2, #0
 800adc6:	4618      	mov	r0, r3
 800adc8:	4611      	mov	r1, r2
 800adca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800adce:	623b      	str	r3, [r7, #32]
 800add0:	2300      	movs	r3, #0
 800add2:	627b      	str	r3, [r7, #36]	@ 0x24
 800add4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800add8:	4642      	mov	r2, r8
 800adda:	464b      	mov	r3, r9
 800addc:	f04f 0000 	mov.w	r0, #0
 800ade0:	f04f 0100 	mov.w	r1, #0
 800ade4:	0159      	lsls	r1, r3, #5
 800ade6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800adea:	0150      	lsls	r0, r2, #5
 800adec:	4602      	mov	r2, r0
 800adee:	460b      	mov	r3, r1
 800adf0:	4641      	mov	r1, r8
 800adf2:	ebb2 0a01 	subs.w	sl, r2, r1
 800adf6:	4649      	mov	r1, r9
 800adf8:	eb63 0b01 	sbc.w	fp, r3, r1
 800adfc:	f04f 0200 	mov.w	r2, #0
 800ae00:	f04f 0300 	mov.w	r3, #0
 800ae04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800ae08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800ae0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800ae10:	ebb2 040a 	subs.w	r4, r2, sl
 800ae14:	eb63 050b 	sbc.w	r5, r3, fp
 800ae18:	f04f 0200 	mov.w	r2, #0
 800ae1c:	f04f 0300 	mov.w	r3, #0
 800ae20:	00eb      	lsls	r3, r5, #3
 800ae22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ae26:	00e2      	lsls	r2, r4, #3
 800ae28:	4614      	mov	r4, r2
 800ae2a:	461d      	mov	r5, r3
 800ae2c:	4643      	mov	r3, r8
 800ae2e:	18e3      	adds	r3, r4, r3
 800ae30:	603b      	str	r3, [r7, #0]
 800ae32:	464b      	mov	r3, r9
 800ae34:	eb45 0303 	adc.w	r3, r5, r3
 800ae38:	607b      	str	r3, [r7, #4]
 800ae3a:	f04f 0200 	mov.w	r2, #0
 800ae3e:	f04f 0300 	mov.w	r3, #0
 800ae42:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ae46:	4629      	mov	r1, r5
 800ae48:	028b      	lsls	r3, r1, #10
 800ae4a:	4621      	mov	r1, r4
 800ae4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ae50:	4621      	mov	r1, r4
 800ae52:	028a      	lsls	r2, r1, #10
 800ae54:	4610      	mov	r0, r2
 800ae56:	4619      	mov	r1, r3
 800ae58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	61bb      	str	r3, [r7, #24]
 800ae5e:	61fa      	str	r2, [r7, #28]
 800ae60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ae64:	f7f5 ff30 	bl	8000cc8 <__aeabi_uldivmod>
 800ae68:	4602      	mov	r2, r0
 800ae6a:	460b      	mov	r3, r1
 800ae6c:	4613      	mov	r3, r2
 800ae6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800ae70:	4b0b      	ldr	r3, [pc, #44]	@ (800aea0 <HAL_RCC_GetSysClockFreq+0x200>)
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	0c1b      	lsrs	r3, r3, #16
 800ae76:	f003 0303 	and.w	r3, r3, #3
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	005b      	lsls	r3, r3, #1
 800ae7e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800ae80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ae82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae84:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae88:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800ae8a:	e002      	b.n	800ae92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ae8c:	4b05      	ldr	r3, [pc, #20]	@ (800aea4 <HAL_RCC_GetSysClockFreq+0x204>)
 800ae8e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800ae90:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ae92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3750      	adds	r7, #80	@ 0x50
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ae9e:	bf00      	nop
 800aea0:	40023800 	.word	0x40023800
 800aea4:	00f42400 	.word	0x00f42400
 800aea8:	007a1200 	.word	0x007a1200

0800aeac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b084      	sub	sp, #16
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d101      	bne.n	800aebe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800aeba:	2301      	movs	r3, #1
 800aebc:	e09d      	b.n	800affa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d108      	bne.n	800aed8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800aece:	d009      	beq.n	800aee4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2200      	movs	r2, #0
 800aed4:	61da      	str	r2, [r3, #28]
 800aed6:	e005      	b.n	800aee4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2200      	movs	r2, #0
 800aee2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2200      	movs	r2, #0
 800aee8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800aef0:	b2db      	uxtb	r3, r3
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d106      	bne.n	800af04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2200      	movs	r2, #0
 800aefa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f7fe fe34 	bl	8009b6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2202      	movs	r2, #2
 800af08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	681a      	ldr	r2, [r3, #0]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800af1a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	68db      	ldr	r3, [r3, #12]
 800af20:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800af24:	d902      	bls.n	800af2c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800af26:	2300      	movs	r3, #0
 800af28:	60fb      	str	r3, [r7, #12]
 800af2a:	e002      	b.n	800af32 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800af2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800af30:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	68db      	ldr	r3, [r3, #12]
 800af36:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800af3a:	d007      	beq.n	800af4c <HAL_SPI_Init+0xa0>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	68db      	ldr	r3, [r3, #12]
 800af40:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800af44:	d002      	beq.n	800af4c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2200      	movs	r2, #0
 800af4a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	689b      	ldr	r3, [r3, #8]
 800af58:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800af5c:	431a      	orrs	r2, r3
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	691b      	ldr	r3, [r3, #16]
 800af62:	f003 0302 	and.w	r3, r3, #2
 800af66:	431a      	orrs	r2, r3
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	695b      	ldr	r3, [r3, #20]
 800af6c:	f003 0301 	and.w	r3, r3, #1
 800af70:	431a      	orrs	r2, r3
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	699b      	ldr	r3, [r3, #24]
 800af76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800af7a:	431a      	orrs	r2, r3
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	69db      	ldr	r3, [r3, #28]
 800af80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800af84:	431a      	orrs	r2, r3
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6a1b      	ldr	r3, [r3, #32]
 800af8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af8e:	ea42 0103 	orr.w	r1, r2, r3
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af96:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	430a      	orrs	r2, r1
 800afa0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	699b      	ldr	r3, [r3, #24]
 800afa6:	0c1b      	lsrs	r3, r3, #16
 800afa8:	f003 0204 	and.w	r2, r3, #4
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afb0:	f003 0310 	and.w	r3, r3, #16
 800afb4:	431a      	orrs	r2, r3
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afba:	f003 0308 	and.w	r3, r3, #8
 800afbe:	431a      	orrs	r2, r3
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	68db      	ldr	r3, [r3, #12]
 800afc4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800afc8:	ea42 0103 	orr.w	r1, r2, r3
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	430a      	orrs	r2, r1
 800afd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	69da      	ldr	r2, [r3, #28]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800afe8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2200      	movs	r2, #0
 800afee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2201      	movs	r2, #1
 800aff4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800aff8:	2300      	movs	r3, #0
}
 800affa:	4618      	mov	r0, r3
 800affc:	3710      	adds	r7, #16
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}

0800b002 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b002:	b580      	push	{r7, lr}
 800b004:	b088      	sub	sp, #32
 800b006:	af00      	add	r7, sp, #0
 800b008:	60f8      	str	r0, [r7, #12]
 800b00a:	60b9      	str	r1, [r7, #8]
 800b00c:	603b      	str	r3, [r7, #0]
 800b00e:	4613      	mov	r3, r2
 800b010:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b012:	f7fe ffbf 	bl	8009f94 <HAL_GetTick>
 800b016:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800b018:	88fb      	ldrh	r3, [r7, #6]
 800b01a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800b022:	b2db      	uxtb	r3, r3
 800b024:	2b01      	cmp	r3, #1
 800b026:	d001      	beq.n	800b02c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800b028:	2302      	movs	r3, #2
 800b02a:	e15c      	b.n	800b2e6 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d002      	beq.n	800b038 <HAL_SPI_Transmit+0x36>
 800b032:	88fb      	ldrh	r3, [r7, #6]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d101      	bne.n	800b03c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800b038:	2301      	movs	r3, #1
 800b03a:	e154      	b.n	800b2e6 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b042:	2b01      	cmp	r3, #1
 800b044:	d101      	bne.n	800b04a <HAL_SPI_Transmit+0x48>
 800b046:	2302      	movs	r3, #2
 800b048:	e14d      	b.n	800b2e6 <HAL_SPI_Transmit+0x2e4>
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2201      	movs	r2, #1
 800b04e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2203      	movs	r2, #3
 800b056:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2200      	movs	r2, #0
 800b05e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	68ba      	ldr	r2, [r7, #8]
 800b064:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	88fa      	ldrh	r2, [r7, #6]
 800b06a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	88fa      	ldrh	r2, [r7, #6]
 800b070:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2200      	movs	r2, #0
 800b076:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2200      	movs	r2, #0
 800b07c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2200      	movs	r2, #0
 800b084:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	2200      	movs	r2, #0
 800b08c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2200      	movs	r2, #0
 800b092:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	689b      	ldr	r3, [r3, #8]
 800b098:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b09c:	d10f      	bne.n	800b0be <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	681a      	ldr	r2, [r3, #0]
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b0ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	681a      	ldr	r2, [r3, #0]
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b0bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0c8:	2b40      	cmp	r3, #64	@ 0x40
 800b0ca:	d007      	beq.n	800b0dc <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	681a      	ldr	r2, [r3, #0]
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b0da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	68db      	ldr	r3, [r3, #12]
 800b0e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800b0e4:	d952      	bls.n	800b18c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d002      	beq.n	800b0f4 <HAL_SPI_Transmit+0xf2>
 800b0ee:	8b7b      	ldrh	r3, [r7, #26]
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d145      	bne.n	800b180 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0f8:	881a      	ldrh	r2, [r3, #0]
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b104:	1c9a      	adds	r2, r3, #2
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b10e:	b29b      	uxth	r3, r3
 800b110:	3b01      	subs	r3, #1
 800b112:	b29a      	uxth	r2, r3
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b118:	e032      	b.n	800b180 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	689b      	ldr	r3, [r3, #8]
 800b120:	f003 0302 	and.w	r3, r3, #2
 800b124:	2b02      	cmp	r3, #2
 800b126:	d112      	bne.n	800b14e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b12c:	881a      	ldrh	r2, [r3, #0]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b138:	1c9a      	adds	r2, r3, #2
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b142:	b29b      	uxth	r3, r3
 800b144:	3b01      	subs	r3, #1
 800b146:	b29a      	uxth	r2, r3
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b14c:	e018      	b.n	800b180 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b14e:	f7fe ff21 	bl	8009f94 <HAL_GetTick>
 800b152:	4602      	mov	r2, r0
 800b154:	69fb      	ldr	r3, [r7, #28]
 800b156:	1ad3      	subs	r3, r2, r3
 800b158:	683a      	ldr	r2, [r7, #0]
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d803      	bhi.n	800b166 <HAL_SPI_Transmit+0x164>
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b164:	d102      	bne.n	800b16c <HAL_SPI_Transmit+0x16a>
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d109      	bne.n	800b180 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2201      	movs	r2, #1
 800b170:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2200      	movs	r2, #0
 800b178:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800b17c:	2303      	movs	r3, #3
 800b17e:	e0b2      	b.n	800b2e6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b184:	b29b      	uxth	r3, r3
 800b186:	2b00      	cmp	r3, #0
 800b188:	d1c7      	bne.n	800b11a <HAL_SPI_Transmit+0x118>
 800b18a:	e083      	b.n	800b294 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d002      	beq.n	800b19a <HAL_SPI_Transmit+0x198>
 800b194:	8b7b      	ldrh	r3, [r7, #26]
 800b196:	2b01      	cmp	r3, #1
 800b198:	d177      	bne.n	800b28a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b19e:	b29b      	uxth	r3, r3
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	d912      	bls.n	800b1ca <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1a8:	881a      	ldrh	r2, [r3, #0]
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1b4:	1c9a      	adds	r2, r3, #2
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b1be:	b29b      	uxth	r3, r3
 800b1c0:	3b02      	subs	r3, #2
 800b1c2:	b29a      	uxth	r2, r3
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b1c8:	e05f      	b.n	800b28a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	330c      	adds	r3, #12
 800b1d4:	7812      	ldrb	r2, [r2, #0]
 800b1d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1dc:	1c5a      	adds	r2, r3, #1
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b1e6:	b29b      	uxth	r3, r3
 800b1e8:	3b01      	subs	r3, #1
 800b1ea:	b29a      	uxth	r2, r3
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800b1f0:	e04b      	b.n	800b28a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	689b      	ldr	r3, [r3, #8]
 800b1f8:	f003 0302 	and.w	r3, r3, #2
 800b1fc:	2b02      	cmp	r3, #2
 800b1fe:	d12b      	bne.n	800b258 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b204:	b29b      	uxth	r3, r3
 800b206:	2b01      	cmp	r3, #1
 800b208:	d912      	bls.n	800b230 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b20e:	881a      	ldrh	r2, [r3, #0]
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b21a:	1c9a      	adds	r2, r3, #2
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b224:	b29b      	uxth	r3, r3
 800b226:	3b02      	subs	r3, #2
 800b228:	b29a      	uxth	r2, r3
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b22e:	e02c      	b.n	800b28a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	330c      	adds	r3, #12
 800b23a:	7812      	ldrb	r2, [r2, #0]
 800b23c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b242:	1c5a      	adds	r2, r3, #1
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	3b01      	subs	r3, #1
 800b250:	b29a      	uxth	r2, r3
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b256:	e018      	b.n	800b28a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b258:	f7fe fe9c 	bl	8009f94 <HAL_GetTick>
 800b25c:	4602      	mov	r2, r0
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	1ad3      	subs	r3, r2, r3
 800b262:	683a      	ldr	r2, [r7, #0]
 800b264:	429a      	cmp	r2, r3
 800b266:	d803      	bhi.n	800b270 <HAL_SPI_Transmit+0x26e>
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b26e:	d102      	bne.n	800b276 <HAL_SPI_Transmit+0x274>
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d109      	bne.n	800b28a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	2201      	movs	r2, #1
 800b27a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2200      	movs	r2, #0
 800b282:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800b286:	2303      	movs	r3, #3
 800b288:	e02d      	b.n	800b2e6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b28e:	b29b      	uxth	r3, r3
 800b290:	2b00      	cmp	r3, #0
 800b292:	d1ae      	bne.n	800b1f2 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b294:	69fa      	ldr	r2, [r7, #28]
 800b296:	6839      	ldr	r1, [r7, #0]
 800b298:	68f8      	ldr	r0, [r7, #12]
 800b29a:	f000 fb65 	bl	800b968 <SPI_EndRxTxTransaction>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d002      	beq.n	800b2aa <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2220      	movs	r2, #32
 800b2a8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	689b      	ldr	r3, [r3, #8]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d10a      	bne.n	800b2c8 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	617b      	str	r3, [r7, #20]
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	68db      	ldr	r3, [r3, #12]
 800b2bc:	617b      	str	r3, [r7, #20]
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	689b      	ldr	r3, [r3, #8]
 800b2c4:	617b      	str	r3, [r7, #20]
 800b2c6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d001      	beq.n	800b2e4 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	e000      	b.n	800b2e6 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800b2e4:	2300      	movs	r3, #0
  }
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3720      	adds	r7, #32
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}

0800b2ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800b2ee:	b580      	push	{r7, lr}
 800b2f0:	b08a      	sub	sp, #40	@ 0x28
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	60f8      	str	r0, [r7, #12]
 800b2f6:	60b9      	str	r1, [r7, #8]
 800b2f8:	607a      	str	r2, [r7, #4]
 800b2fa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b300:	f7fe fe48 	bl	8009f94 <HAL_GetTick>
 800b304:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800b30c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800b314:	887b      	ldrh	r3, [r7, #2]
 800b316:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800b318:	887b      	ldrh	r3, [r7, #2]
 800b31a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b31c:	7ffb      	ldrb	r3, [r7, #31]
 800b31e:	2b01      	cmp	r3, #1
 800b320:	d00c      	beq.n	800b33c <HAL_SPI_TransmitReceive+0x4e>
 800b322:	69bb      	ldr	r3, [r7, #24]
 800b324:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b328:	d106      	bne.n	800b338 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	689b      	ldr	r3, [r3, #8]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d102      	bne.n	800b338 <HAL_SPI_TransmitReceive+0x4a>
 800b332:	7ffb      	ldrb	r3, [r7, #31]
 800b334:	2b04      	cmp	r3, #4
 800b336:	d001      	beq.n	800b33c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800b338:	2302      	movs	r3, #2
 800b33a:	e1f3      	b.n	800b724 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d005      	beq.n	800b34e <HAL_SPI_TransmitReceive+0x60>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d002      	beq.n	800b34e <HAL_SPI_TransmitReceive+0x60>
 800b348:	887b      	ldrh	r3, [r7, #2]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d101      	bne.n	800b352 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800b34e:	2301      	movs	r3, #1
 800b350:	e1e8      	b.n	800b724 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d101      	bne.n	800b360 <HAL_SPI_TransmitReceive+0x72>
 800b35c:	2302      	movs	r3, #2
 800b35e:	e1e1      	b.n	800b724 <HAL_SPI_TransmitReceive+0x436>
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2201      	movs	r2, #1
 800b364:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800b36e:	b2db      	uxtb	r3, r3
 800b370:	2b04      	cmp	r3, #4
 800b372:	d003      	beq.n	800b37c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2205      	movs	r2, #5
 800b378:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	2200      	movs	r2, #0
 800b380:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	687a      	ldr	r2, [r7, #4]
 800b386:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	887a      	ldrh	r2, [r7, #2]
 800b38c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	887a      	ldrh	r2, [r7, #2]
 800b394:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	68ba      	ldr	r2, [r7, #8]
 800b39c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	887a      	ldrh	r2, [r7, #2]
 800b3a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	887a      	ldrh	r2, [r7, #2]
 800b3a8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	68db      	ldr	r3, [r3, #12]
 800b3ba:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800b3be:	d802      	bhi.n	800b3c6 <HAL_SPI_TransmitReceive+0xd8>
 800b3c0:	8abb      	ldrh	r3, [r7, #20]
 800b3c2:	2b01      	cmp	r3, #1
 800b3c4:	d908      	bls.n	800b3d8 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	685a      	ldr	r2, [r3, #4]
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b3d4:	605a      	str	r2, [r3, #4]
 800b3d6:	e007      	b.n	800b3e8 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	685a      	ldr	r2, [r3, #4]
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b3e6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3f2:	2b40      	cmp	r3, #64	@ 0x40
 800b3f4:	d007      	beq.n	800b406 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	681a      	ldr	r2, [r3, #0]
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b404:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	68db      	ldr	r3, [r3, #12]
 800b40a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800b40e:	f240 8083 	bls.w	800b518 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d002      	beq.n	800b420 <HAL_SPI_TransmitReceive+0x132>
 800b41a:	8afb      	ldrh	r3, [r7, #22]
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	d16f      	bne.n	800b500 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b424:	881a      	ldrh	r2, [r3, #0]
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b430:	1c9a      	adds	r2, r3, #2
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b43a:	b29b      	uxth	r3, r3
 800b43c:	3b01      	subs	r3, #1
 800b43e:	b29a      	uxth	r2, r3
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b444:	e05c      	b.n	800b500 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	689b      	ldr	r3, [r3, #8]
 800b44c:	f003 0302 	and.w	r3, r3, #2
 800b450:	2b02      	cmp	r3, #2
 800b452:	d11b      	bne.n	800b48c <HAL_SPI_TransmitReceive+0x19e>
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b458:	b29b      	uxth	r3, r3
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d016      	beq.n	800b48c <HAL_SPI_TransmitReceive+0x19e>
 800b45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b460:	2b01      	cmp	r3, #1
 800b462:	d113      	bne.n	800b48c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b468:	881a      	ldrh	r2, [r3, #0]
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b474:	1c9a      	adds	r2, r3, #2
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b47e:	b29b      	uxth	r3, r3
 800b480:	3b01      	subs	r3, #1
 800b482:	b29a      	uxth	r2, r3
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b488:	2300      	movs	r3, #0
 800b48a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	689b      	ldr	r3, [r3, #8]
 800b492:	f003 0301 	and.w	r3, r3, #1
 800b496:	2b01      	cmp	r3, #1
 800b498:	d11c      	bne.n	800b4d4 <HAL_SPI_TransmitReceive+0x1e6>
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b4a0:	b29b      	uxth	r3, r3
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d016      	beq.n	800b4d4 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	68da      	ldr	r2, [r3, #12]
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4b0:	b292      	uxth	r2, r2
 800b4b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4b8:	1c9a      	adds	r2, r3, #2
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b4c4:	b29b      	uxth	r3, r3
 800b4c6:	3b01      	subs	r3, #1
 800b4c8:	b29a      	uxth	r2, r3
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b4d4:	f7fe fd5e 	bl	8009f94 <HAL_GetTick>
 800b4d8:	4602      	mov	r2, r0
 800b4da:	6a3b      	ldr	r3, [r7, #32]
 800b4dc:	1ad3      	subs	r3, r2, r3
 800b4de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d80d      	bhi.n	800b500 <HAL_SPI_TransmitReceive+0x212>
 800b4e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ea:	d009      	beq.n	800b500 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800b4fc:	2303      	movs	r3, #3
 800b4fe:	e111      	b.n	800b724 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b504:	b29b      	uxth	r3, r3
 800b506:	2b00      	cmp	r3, #0
 800b508:	d19d      	bne.n	800b446 <HAL_SPI_TransmitReceive+0x158>
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b510:	b29b      	uxth	r3, r3
 800b512:	2b00      	cmp	r3, #0
 800b514:	d197      	bne.n	800b446 <HAL_SPI_TransmitReceive+0x158>
 800b516:	e0e5      	b.n	800b6e4 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d003      	beq.n	800b528 <HAL_SPI_TransmitReceive+0x23a>
 800b520:	8afb      	ldrh	r3, [r7, #22]
 800b522:	2b01      	cmp	r3, #1
 800b524:	f040 80d1 	bne.w	800b6ca <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	2b01      	cmp	r3, #1
 800b530:	d912      	bls.n	800b558 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b536:	881a      	ldrh	r2, [r3, #0]
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b542:	1c9a      	adds	r2, r3, #2
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b54c:	b29b      	uxth	r3, r3
 800b54e:	3b02      	subs	r3, #2
 800b550:	b29a      	uxth	r2, r3
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b556:	e0b8      	b.n	800b6ca <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	330c      	adds	r3, #12
 800b562:	7812      	ldrb	r2, [r2, #0]
 800b564:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b56a:	1c5a      	adds	r2, r3, #1
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b574:	b29b      	uxth	r3, r3
 800b576:	3b01      	subs	r3, #1
 800b578:	b29a      	uxth	r2, r3
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b57e:	e0a4      	b.n	800b6ca <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	689b      	ldr	r3, [r3, #8]
 800b586:	f003 0302 	and.w	r3, r3, #2
 800b58a:	2b02      	cmp	r3, #2
 800b58c:	d134      	bne.n	800b5f8 <HAL_SPI_TransmitReceive+0x30a>
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b592:	b29b      	uxth	r3, r3
 800b594:	2b00      	cmp	r3, #0
 800b596:	d02f      	beq.n	800b5f8 <HAL_SPI_TransmitReceive+0x30a>
 800b598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d12c      	bne.n	800b5f8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b5a2:	b29b      	uxth	r3, r3
 800b5a4:	2b01      	cmp	r3, #1
 800b5a6:	d912      	bls.n	800b5ce <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5ac:	881a      	ldrh	r2, [r3, #0]
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5b8:	1c9a      	adds	r2, r3, #2
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b5c2:	b29b      	uxth	r3, r3
 800b5c4:	3b02      	subs	r3, #2
 800b5c6:	b29a      	uxth	r2, r3
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b5cc:	e012      	b.n	800b5f4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	330c      	adds	r3, #12
 800b5d8:	7812      	ldrb	r2, [r2, #0]
 800b5da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5e0:	1c5a      	adds	r2, r3, #1
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b5ea:	b29b      	uxth	r3, r3
 800b5ec:	3b01      	subs	r3, #1
 800b5ee:	b29a      	uxth	r2, r3
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	689b      	ldr	r3, [r3, #8]
 800b5fe:	f003 0301 	and.w	r3, r3, #1
 800b602:	2b01      	cmp	r3, #1
 800b604:	d148      	bne.n	800b698 <HAL_SPI_TransmitReceive+0x3aa>
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b60c:	b29b      	uxth	r3, r3
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d042      	beq.n	800b698 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b618:	b29b      	uxth	r3, r3
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	d923      	bls.n	800b666 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	68da      	ldr	r2, [r3, #12]
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b628:	b292      	uxth	r2, r2
 800b62a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b630:	1c9a      	adds	r2, r3, #2
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b63c:	b29b      	uxth	r3, r3
 800b63e:	3b02      	subs	r3, #2
 800b640:	b29a      	uxth	r2, r3
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b64e:	b29b      	uxth	r3, r3
 800b650:	2b01      	cmp	r3, #1
 800b652:	d81f      	bhi.n	800b694 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	685a      	ldr	r2, [r3, #4]
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b662:	605a      	str	r2, [r3, #4]
 800b664:	e016      	b.n	800b694 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f103 020c 	add.w	r2, r3, #12
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b672:	7812      	ldrb	r2, [r2, #0]
 800b674:	b2d2      	uxtb	r2, r2
 800b676:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b67c:	1c5a      	adds	r2, r3, #1
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b688:	b29b      	uxth	r3, r3
 800b68a:	3b01      	subs	r3, #1
 800b68c:	b29a      	uxth	r2, r3
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b694:	2301      	movs	r3, #1
 800b696:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b698:	f7fe fc7c 	bl	8009f94 <HAL_GetTick>
 800b69c:	4602      	mov	r2, r0
 800b69e:	6a3b      	ldr	r3, [r7, #32]
 800b6a0:	1ad3      	subs	r3, r2, r3
 800b6a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d803      	bhi.n	800b6b0 <HAL_SPI_TransmitReceive+0x3c2>
 800b6a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6ae:	d102      	bne.n	800b6b6 <HAL_SPI_TransmitReceive+0x3c8>
 800b6b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d109      	bne.n	800b6ca <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2201      	movs	r2, #1
 800b6ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800b6c6:	2303      	movs	r3, #3
 800b6c8:	e02c      	b.n	800b724 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	f47f af55 	bne.w	800b580 <HAL_SPI_TransmitReceive+0x292>
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b6dc:	b29b      	uxth	r3, r3
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	f47f af4e 	bne.w	800b580 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b6e4:	6a3a      	ldr	r2, [r7, #32]
 800b6e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b6e8:	68f8      	ldr	r0, [r7, #12]
 800b6ea:	f000 f93d 	bl	800b968 <SPI_EndRxTxTransaction>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d008      	beq.n	800b706 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2220      	movs	r2, #32
 800b6f8:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800b702:	2301      	movs	r3, #1
 800b704:	e00e      	b.n	800b724 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2201      	movs	r2, #1
 800b70a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	2200      	movs	r2, #0
 800b712:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d001      	beq.n	800b722 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800b71e:	2301      	movs	r3, #1
 800b720:	e000      	b.n	800b724 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800b722:	2300      	movs	r3, #0
  }
}
 800b724:	4618      	mov	r0, r3
 800b726:	3728      	adds	r7, #40	@ 0x28
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b088      	sub	sp, #32
 800b730:	af00      	add	r7, sp, #0
 800b732:	60f8      	str	r0, [r7, #12]
 800b734:	60b9      	str	r1, [r7, #8]
 800b736:	603b      	str	r3, [r7, #0]
 800b738:	4613      	mov	r3, r2
 800b73a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b73c:	f7fe fc2a 	bl	8009f94 <HAL_GetTick>
 800b740:	4602      	mov	r2, r0
 800b742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b744:	1a9b      	subs	r3, r3, r2
 800b746:	683a      	ldr	r2, [r7, #0]
 800b748:	4413      	add	r3, r2
 800b74a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b74c:	f7fe fc22 	bl	8009f94 <HAL_GetTick>
 800b750:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b752:	4b39      	ldr	r3, [pc, #228]	@ (800b838 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	015b      	lsls	r3, r3, #5
 800b758:	0d1b      	lsrs	r3, r3, #20
 800b75a:	69fa      	ldr	r2, [r7, #28]
 800b75c:	fb02 f303 	mul.w	r3, r2, r3
 800b760:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b762:	e055      	b.n	800b810 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b76a:	d051      	beq.n	800b810 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b76c:	f7fe fc12 	bl	8009f94 <HAL_GetTick>
 800b770:	4602      	mov	r2, r0
 800b772:	69bb      	ldr	r3, [r7, #24]
 800b774:	1ad3      	subs	r3, r2, r3
 800b776:	69fa      	ldr	r2, [r7, #28]
 800b778:	429a      	cmp	r2, r3
 800b77a:	d902      	bls.n	800b782 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b77c:	69fb      	ldr	r3, [r7, #28]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d13d      	bne.n	800b7fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	685a      	ldr	r2, [r3, #4]
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b790:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b79a:	d111      	bne.n	800b7c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	689b      	ldr	r3, [r3, #8]
 800b7a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b7a4:	d004      	beq.n	800b7b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	689b      	ldr	r3, [r3, #8]
 800b7aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b7ae:	d107      	bne.n	800b7c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	681a      	ldr	r2, [r3, #0]
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b7be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b7c8:	d10f      	bne.n	800b7ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b7d8:	601a      	str	r2, [r3, #0]
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	681a      	ldr	r2, [r3, #0]
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b7e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800b7fa:	2303      	movs	r3, #3
 800b7fc:	e018      	b.n	800b830 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d102      	bne.n	800b80a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800b804:	2300      	movs	r3, #0
 800b806:	61fb      	str	r3, [r7, #28]
 800b808:	e002      	b.n	800b810 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	3b01      	subs	r3, #1
 800b80e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	689a      	ldr	r2, [r3, #8]
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	4013      	ands	r3, r2
 800b81a:	68ba      	ldr	r2, [r7, #8]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	bf0c      	ite	eq
 800b820:	2301      	moveq	r3, #1
 800b822:	2300      	movne	r3, #0
 800b824:	b2db      	uxtb	r3, r3
 800b826:	461a      	mov	r2, r3
 800b828:	79fb      	ldrb	r3, [r7, #7]
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d19a      	bne.n	800b764 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800b82e:	2300      	movs	r3, #0
}
 800b830:	4618      	mov	r0, r3
 800b832:	3720      	adds	r7, #32
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}
 800b838:	20000000 	.word	0x20000000

0800b83c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b08a      	sub	sp, #40	@ 0x28
 800b840:	af00      	add	r7, sp, #0
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	60b9      	str	r1, [r7, #8]
 800b846:	607a      	str	r2, [r7, #4]
 800b848:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b84a:	2300      	movs	r3, #0
 800b84c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b84e:	f7fe fba1 	bl	8009f94 <HAL_GetTick>
 800b852:	4602      	mov	r2, r0
 800b854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b856:	1a9b      	subs	r3, r3, r2
 800b858:	683a      	ldr	r2, [r7, #0]
 800b85a:	4413      	add	r3, r2
 800b85c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800b85e:	f7fe fb99 	bl	8009f94 <HAL_GetTick>
 800b862:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	330c      	adds	r3, #12
 800b86a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b86c:	4b3d      	ldr	r3, [pc, #244]	@ (800b964 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800b86e:	681a      	ldr	r2, [r3, #0]
 800b870:	4613      	mov	r3, r2
 800b872:	009b      	lsls	r3, r3, #2
 800b874:	4413      	add	r3, r2
 800b876:	00da      	lsls	r2, r3, #3
 800b878:	1ad3      	subs	r3, r2, r3
 800b87a:	0d1b      	lsrs	r3, r3, #20
 800b87c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b87e:	fb02 f303 	mul.w	r3, r2, r3
 800b882:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b884:	e061      	b.n	800b94a <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b88c:	d107      	bne.n	800b89e <SPI_WaitFifoStateUntilTimeout+0x62>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d104      	bne.n	800b89e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b894:	69fb      	ldr	r3, [r7, #28]
 800b896:	781b      	ldrb	r3, [r3, #0]
 800b898:	b2db      	uxtb	r3, r3
 800b89a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b89c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8a4:	d051      	beq.n	800b94a <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b8a6:	f7fe fb75 	bl	8009f94 <HAL_GetTick>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	6a3b      	ldr	r3, [r7, #32]
 800b8ae:	1ad3      	subs	r3, r2, r3
 800b8b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8b2:	429a      	cmp	r2, r3
 800b8b4:	d902      	bls.n	800b8bc <SPI_WaitFifoStateUntilTimeout+0x80>
 800b8b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d13d      	bne.n	800b938 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	685a      	ldr	r2, [r3, #4]
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b8ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	685b      	ldr	r3, [r3, #4]
 800b8d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b8d4:	d111      	bne.n	800b8fa <SPI_WaitFifoStateUntilTimeout+0xbe>
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	689b      	ldr	r3, [r3, #8]
 800b8da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b8de:	d004      	beq.n	800b8ea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	689b      	ldr	r3, [r3, #8]
 800b8e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b8e8:	d107      	bne.n	800b8fa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b8f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b902:	d10f      	bne.n	800b924 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b912:	601a      	str	r2, [r3, #0]
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	681a      	ldr	r2, [r3, #0]
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b922:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	2201      	movs	r2, #1
 800b928:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	2200      	movs	r2, #0
 800b930:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800b934:	2303      	movs	r3, #3
 800b936:	e011      	b.n	800b95c <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b938:	69bb      	ldr	r3, [r7, #24]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d102      	bne.n	800b944 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 800b93e:	2300      	movs	r3, #0
 800b940:	627b      	str	r3, [r7, #36]	@ 0x24
 800b942:	e002      	b.n	800b94a <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 800b944:	69bb      	ldr	r3, [r7, #24]
 800b946:	3b01      	subs	r3, #1
 800b948:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	689a      	ldr	r2, [r3, #8]
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	4013      	ands	r3, r2
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	429a      	cmp	r2, r3
 800b958:	d195      	bne.n	800b886 <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 800b95a:	2300      	movs	r3, #0
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	3728      	adds	r7, #40	@ 0x28
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}
 800b964:	20000000 	.word	0x20000000

0800b968 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b088      	sub	sp, #32
 800b96c:	af02      	add	r7, sp, #8
 800b96e:	60f8      	str	r0, [r7, #12]
 800b970:	60b9      	str	r1, [r7, #8]
 800b972:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	9300      	str	r3, [sp, #0]
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	2200      	movs	r2, #0
 800b97c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800b980:	68f8      	ldr	r0, [r7, #12]
 800b982:	f7ff ff5b 	bl	800b83c <SPI_WaitFifoStateUntilTimeout>
 800b986:	4603      	mov	r3, r0
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d007      	beq.n	800b99c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b990:	f043 0220 	orr.w	r2, r3, #32
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b998:	2303      	movs	r3, #3
 800b99a:	e046      	b.n	800ba2a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b99c:	4b25      	ldr	r3, [pc, #148]	@ (800ba34 <SPI_EndRxTxTransaction+0xcc>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4a25      	ldr	r2, [pc, #148]	@ (800ba38 <SPI_EndRxTxTransaction+0xd0>)
 800b9a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b9a6:	0d5b      	lsrs	r3, r3, #21
 800b9a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b9ac:	fb02 f303 	mul.w	r3, r2, r3
 800b9b0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	685b      	ldr	r3, [r3, #4]
 800b9b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b9ba:	d112      	bne.n	800b9e2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	9300      	str	r3, [sp, #0]
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	2180      	movs	r1, #128	@ 0x80
 800b9c6:	68f8      	ldr	r0, [r7, #12]
 800b9c8:	f7ff feb0 	bl	800b72c <SPI_WaitFlagStateUntilTimeout>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d016      	beq.n	800ba00 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b9d6:	f043 0220 	orr.w	r2, r3, #32
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800b9de:	2303      	movs	r3, #3
 800b9e0:	e023      	b.n	800ba2a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d00a      	beq.n	800b9fe <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	3b01      	subs	r3, #1
 800b9ec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	689b      	ldr	r3, [r3, #8]
 800b9f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b9f8:	2b80      	cmp	r3, #128	@ 0x80
 800b9fa:	d0f2      	beq.n	800b9e2 <SPI_EndRxTxTransaction+0x7a>
 800b9fc:	e000      	b.n	800ba00 <SPI_EndRxTxTransaction+0x98>
        break;
 800b9fe:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	9300      	str	r3, [sp, #0]
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	2200      	movs	r2, #0
 800ba08:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ba0c:	68f8      	ldr	r0, [r7, #12]
 800ba0e:	f7ff ff15 	bl	800b83c <SPI_WaitFifoStateUntilTimeout>
 800ba12:	4603      	mov	r3, r0
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d007      	beq.n	800ba28 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ba1c:	f043 0220 	orr.w	r2, r3, #32
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ba24:	2303      	movs	r3, #3
 800ba26:	e000      	b.n	800ba2a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800ba28:	2300      	movs	r3, #0
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3718      	adds	r7, #24
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	20000000 	.word	0x20000000
 800ba38:	165e9f81 	.word	0x165e9f81

0800ba3c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800ba40:	4904      	ldr	r1, [pc, #16]	@ (800ba54 <MX_FATFS_Init+0x18>)
 800ba42:	4805      	ldr	r0, [pc, #20]	@ (800ba58 <MX_FATFS_Init+0x1c>)
 800ba44:	f002 fb14 	bl	800e070 <FATFS_LinkDriver>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	4b03      	ldr	r3, [pc, #12]	@ (800ba5c <MX_FATFS_Init+0x20>)
 800ba4e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ba50:	bf00      	nop
 800ba52:	bd80      	pop	{r7, pc}
 800ba54:	20006b5c 	.word	0x20006b5c
 800ba58:	2000000c 	.word	0x2000000c
 800ba5c:	20006b58 	.word	0x20006b58

0800ba60 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ba60:	b480      	push	{r7}
 800ba62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ba64:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr

0800ba70 <disk_status>:
    disk_ioctl
#endif
};


DSTATUS disk_status(BYTE pdrv) {
 800ba70:	b480      	push	{r7}
 800ba72:	b083      	sub	sp, #12
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	4603      	mov	r3, r0
 800ba78:	71fb      	strb	r3, [r7, #7]
    if (pdrv == DEV_MMC) {
 800ba7a:	79fb      	ldrb	r3, [r7, #7]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d101      	bne.n	800ba84 <disk_status+0x14>
        return 0;  // OK
 800ba80:	2300      	movs	r3, #0
 800ba82:	e000      	b.n	800ba86 <disk_status+0x16>
    }
    return STA_NOINIT;
 800ba84:	2301      	movs	r3, #1
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	370c      	adds	r7, #12
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr

0800ba92 <disk_initialize>:

DSTATUS disk_initialize(BYTE pdrv) {
 800ba92:	b580      	push	{r7, lr}
 800ba94:	b082      	sub	sp, #8
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	4603      	mov	r3, r0
 800ba9a:	71fb      	strb	r3, [r7, #7]
    if (pdrv == DEV_MMC) {
 800ba9c:	79fb      	ldrb	r3, [r7, #7]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d108      	bne.n	800bab4 <disk_initialize+0x22>
        return (SD_Init() == SD_OK) ? 0 : STA_NOINIT;
 800baa2:	f7fd ff55 	bl	8009950 <SD_Init>
 800baa6:	4603      	mov	r3, r0
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	bf14      	ite	ne
 800baac:	2301      	movne	r3, #1
 800baae:	2300      	moveq	r3, #0
 800bab0:	b2db      	uxtb	r3, r3
 800bab2:	e000      	b.n	800bab6 <disk_initialize+0x24>
    }
    return STA_NOINIT;
 800bab4:	2301      	movs	r3, #1
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3708      	adds	r7, #8
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}

0800babe <disk_read>:

DRESULT disk_read(BYTE pdrv, BYTE* buff, LBA_t sector, UINT count) {
 800babe:	b580      	push	{r7, lr}
 800bac0:	b086      	sub	sp, #24
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	60b9      	str	r1, [r7, #8]
 800bac6:	607a      	str	r2, [r7, #4]
 800bac8:	603b      	str	r3, [r7, #0]
 800baca:	4603      	mov	r3, r0
 800bacc:	73fb      	strb	r3, [r7, #15]
    if (pdrv != DEV_MMC || count == 0) return RES_PARERR;
 800bace:	7bfb      	ldrb	r3, [r7, #15]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d102      	bne.n	800bada <disk_read+0x1c>
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d101      	bne.n	800bade <disk_read+0x20>
 800bada:	2304      	movs	r3, #4
 800badc:	e01a      	b.n	800bb14 <disk_read+0x56>

    for (UINT i = 0; i < count; i++) {
 800bade:	2300      	movs	r3, #0
 800bae0:	617b      	str	r3, [r7, #20]
 800bae2:	e012      	b.n	800bb0a <disk_read+0x4c>
        if (SD_ReadBlock((sector + i) * 512, buff + (512 * i)) != SD_OK)
 800bae4:	687a      	ldr	r2, [r7, #4]
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	4413      	add	r3, r2
 800baea:	0258      	lsls	r0, r3, #9
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	025b      	lsls	r3, r3, #9
 800baf0:	68ba      	ldr	r2, [r7, #8]
 800baf2:	4413      	add	r3, r2
 800baf4:	4619      	mov	r1, r3
 800baf6:	f7fd ff73 	bl	80099e0 <SD_ReadBlock>
 800bafa:	4603      	mov	r3, r0
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d001      	beq.n	800bb04 <disk_read+0x46>
            return RES_ERROR;
 800bb00:	2301      	movs	r3, #1
 800bb02:	e007      	b.n	800bb14 <disk_read+0x56>
    for (UINT i = 0; i < count; i++) {
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	3301      	adds	r3, #1
 800bb08:	617b      	str	r3, [r7, #20]
 800bb0a:	697a      	ldr	r2, [r7, #20]
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d3e8      	bcc.n	800bae4 <disk_read+0x26>
    }

    return RES_OK;
 800bb12:	2300      	movs	r3, #0
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3718      	adds	r7, #24
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}

0800bb1c <disk_write>:

DRESULT disk_write(BYTE pdrv, const BYTE* buff, LBA_t sector, UINT count) {
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b086      	sub	sp, #24
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	60b9      	str	r1, [r7, #8]
 800bb24:	607a      	str	r2, [r7, #4]
 800bb26:	603b      	str	r3, [r7, #0]
 800bb28:	4603      	mov	r3, r0
 800bb2a:	73fb      	strb	r3, [r7, #15]
#if FF_FS_READONLY
    return RES_WRPRT;
#else
    if (pdrv != DEV_MMC || count == 0) return RES_PARERR;
 800bb2c:	7bfb      	ldrb	r3, [r7, #15]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d102      	bne.n	800bb38 <disk_write+0x1c>
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d101      	bne.n	800bb3c <disk_write+0x20>
 800bb38:	2304      	movs	r3, #4
 800bb3a:	e01a      	b.n	800bb72 <disk_write+0x56>

    for (UINT i = 0; i < count; i++) {
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	617b      	str	r3, [r7, #20]
 800bb40:	e012      	b.n	800bb68 <disk_write+0x4c>
        if (SD_WriteBlock((sector + i) * 512, buff + (512 * i)) != SD_OK)
 800bb42:	687a      	ldr	r2, [r7, #4]
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	4413      	add	r3, r2
 800bb48:	0258      	lsls	r0, r3, #9
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	025b      	lsls	r3, r3, #9
 800bb4e:	68ba      	ldr	r2, [r7, #8]
 800bb50:	4413      	add	r3, r2
 800bb52:	4619      	mov	r1, r3
 800bb54:	f7fd ff88 	bl	8009a68 <SD_WriteBlock>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d001      	beq.n	800bb62 <disk_write+0x46>
            return RES_ERROR;
 800bb5e:	2301      	movs	r3, #1
 800bb60:	e007      	b.n	800bb72 <disk_write+0x56>
    for (UINT i = 0; i < count; i++) {
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	3301      	adds	r3, #1
 800bb66:	617b      	str	r3, [r7, #20]
 800bb68:	697a      	ldr	r2, [r7, #20]
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d3e8      	bcc.n	800bb42 <disk_write+0x26>
    }

    return RES_OK;
 800bb70:	2300      	movs	r3, #0
#endif
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3718      	adds	r7, #24
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
	...

0800bb7c <disk_ioctl>:

DRESULT disk_ioctl(BYTE pdrv, BYTE cmd, void* buff) {
 800bb7c:	b480      	push	{r7}
 800bb7e:	b083      	sub	sp, #12
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	4603      	mov	r3, r0
 800bb84:	603a      	str	r2, [r7, #0]
 800bb86:	71fb      	strb	r3, [r7, #7]
 800bb88:	460b      	mov	r3, r1
 800bb8a:	71bb      	strb	r3, [r7, #6]
    if (pdrv != DEV_MMC) return RES_PARERR;
 800bb8c:	79fb      	ldrb	r3, [r7, #7]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d001      	beq.n	800bb96 <disk_ioctl+0x1a>
 800bb92:	2304      	movs	r3, #4
 800bb94:	e022      	b.n	800bbdc <disk_ioctl+0x60>

    switch (cmd) {
 800bb96:	79bb      	ldrb	r3, [r7, #6]
 800bb98:	2b03      	cmp	r3, #3
 800bb9a:	d81e      	bhi.n	800bbda <disk_ioctl+0x5e>
 800bb9c:	a201      	add	r2, pc, #4	@ (adr r2, 800bba4 <disk_ioctl+0x28>)
 800bb9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bba2:	bf00      	nop
 800bba4:	0800bbb5 	.word	0x0800bbb5
 800bba8:	0800bbb9 	.word	0x0800bbb9
 800bbac:	0800bbc5 	.word	0x0800bbc5
 800bbb0:	0800bbd1 	.word	0x0800bbd1
        case CTRL_SYNC:
            return RES_OK;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	e011      	b.n	800bbdc <disk_ioctl+0x60>
        case GET_SECTOR_COUNT:
            *(DWORD*)buff = 32768;  // Exemplo: 16 MB
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800bbbe:	601a      	str	r2, [r3, #0]
            return RES_OK;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	e00b      	b.n	800bbdc <disk_ioctl+0x60>
        case GET_SECTOR_SIZE:
            *(WORD*)buff = 512;
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bbca:	801a      	strh	r2, [r3, #0]
            return RES_OK;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	e005      	b.n	800bbdc <disk_ioctl+0x60>
        case GET_BLOCK_SIZE:
            *(DWORD*)buff = 1;
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	601a      	str	r2, [r3, #0]
            return RES_OK;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	e000      	b.n	800bbdc <disk_ioctl+0x60>
    }

    return RES_PARERR;
 800bbda:	2304      	movs	r3, #4
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	370c      	adds	r7, #12
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr

0800bbe8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b085      	sub	sp, #20
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	3301      	adds	r3, #1
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bbf8:	89fb      	ldrh	r3, [r7, #14]
 800bbfa:	021b      	lsls	r3, r3, #8
 800bbfc:	b21a      	sxth	r2, r3
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	b21b      	sxth	r3, r3
 800bc04:	4313      	orrs	r3, r2
 800bc06:	b21b      	sxth	r3, r3
 800bc08:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bc0a:	89fb      	ldrh	r3, [r7, #14]
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3714      	adds	r7, #20
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr

0800bc18 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b085      	sub	sp, #20
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	3303      	adds	r3, #3
 800bc24:	781b      	ldrb	r3, [r3, #0]
 800bc26:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	021b      	lsls	r3, r3, #8
 800bc2c:	687a      	ldr	r2, [r7, #4]
 800bc2e:	3202      	adds	r2, #2
 800bc30:	7812      	ldrb	r2, [r2, #0]
 800bc32:	4313      	orrs	r3, r2
 800bc34:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	021b      	lsls	r3, r3, #8
 800bc3a:	687a      	ldr	r2, [r7, #4]
 800bc3c:	3201      	adds	r2, #1
 800bc3e:	7812      	ldrb	r2, [r2, #0]
 800bc40:	4313      	orrs	r3, r2
 800bc42:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	021b      	lsls	r3, r3, #8
 800bc48:	687a      	ldr	r2, [r7, #4]
 800bc4a:	7812      	ldrb	r2, [r2, #0]
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	60fb      	str	r3, [r7, #12]
	return rv;
 800bc50:	68fb      	ldr	r3, [r7, #12]
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3714      	adds	r7, #20
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr

0800bc5e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bc5e:	b480      	push	{r7}
 800bc60:	b083      	sub	sp, #12
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	6078      	str	r0, [r7, #4]
 800bc66:	460b      	mov	r3, r1
 800bc68:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	1c5a      	adds	r2, r3, #1
 800bc6e:	607a      	str	r2, [r7, #4]
 800bc70:	887a      	ldrh	r2, [r7, #2]
 800bc72:	b2d2      	uxtb	r2, r2
 800bc74:	701a      	strb	r2, [r3, #0]
 800bc76:	887b      	ldrh	r3, [r7, #2]
 800bc78:	0a1b      	lsrs	r3, r3, #8
 800bc7a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	1c5a      	adds	r2, r3, #1
 800bc80:	607a      	str	r2, [r7, #4]
 800bc82:	887a      	ldrh	r2, [r7, #2]
 800bc84:	b2d2      	uxtb	r2, r2
 800bc86:	701a      	strb	r2, [r3, #0]
}
 800bc88:	bf00      	nop
 800bc8a:	370c      	adds	r7, #12
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr

0800bc94 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bc94:	b480      	push	{r7}
 800bc96:	b083      	sub	sp, #12
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
 800bc9c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	1c5a      	adds	r2, r3, #1
 800bca2:	607a      	str	r2, [r7, #4]
 800bca4:	683a      	ldr	r2, [r7, #0]
 800bca6:	b2d2      	uxtb	r2, r2
 800bca8:	701a      	strb	r2, [r3, #0]
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	0a1b      	lsrs	r3, r3, #8
 800bcae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	1c5a      	adds	r2, r3, #1
 800bcb4:	607a      	str	r2, [r7, #4]
 800bcb6:	683a      	ldr	r2, [r7, #0]
 800bcb8:	b2d2      	uxtb	r2, r2
 800bcba:	701a      	strb	r2, [r3, #0]
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	0a1b      	lsrs	r3, r3, #8
 800bcc0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	1c5a      	adds	r2, r3, #1
 800bcc6:	607a      	str	r2, [r7, #4]
 800bcc8:	683a      	ldr	r2, [r7, #0]
 800bcca:	b2d2      	uxtb	r2, r2
 800bccc:	701a      	strb	r2, [r3, #0]
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	0a1b      	lsrs	r3, r3, #8
 800bcd2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	1c5a      	adds	r2, r3, #1
 800bcd8:	607a      	str	r2, [r7, #4]
 800bcda:	683a      	ldr	r2, [r7, #0]
 800bcdc:	b2d2      	uxtb	r2, r2
 800bcde:	701a      	strb	r2, [r3, #0]
}
 800bce0:	bf00      	nop
 800bce2:	370c      	adds	r7, #12
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr

0800bcec <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bcec:	b480      	push	{r7}
 800bcee:	b087      	sub	sp, #28
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	60f8      	str	r0, [r7, #12]
 800bcf4:	60b9      	str	r1, [r7, #8]
 800bcf6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d00d      	beq.n	800bd22 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bd06:	693a      	ldr	r2, [r7, #16]
 800bd08:	1c53      	adds	r3, r2, #1
 800bd0a:	613b      	str	r3, [r7, #16]
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	1c59      	adds	r1, r3, #1
 800bd10:	6179      	str	r1, [r7, #20]
 800bd12:	7812      	ldrb	r2, [r2, #0]
 800bd14:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	3b01      	subs	r3, #1
 800bd1a:	607b      	str	r3, [r7, #4]
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d1f1      	bne.n	800bd06 <mem_cpy+0x1a>
	}
}
 800bd22:	bf00      	nop
 800bd24:	371c      	adds	r7, #28
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr

0800bd2e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bd2e:	b480      	push	{r7}
 800bd30:	b087      	sub	sp, #28
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	60f8      	str	r0, [r7, #12]
 800bd36:	60b9      	str	r1, [r7, #8]
 800bd38:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	1c5a      	adds	r2, r3, #1
 800bd42:	617a      	str	r2, [r7, #20]
 800bd44:	68ba      	ldr	r2, [r7, #8]
 800bd46:	b2d2      	uxtb	r2, r2
 800bd48:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	3b01      	subs	r3, #1
 800bd4e:	607b      	str	r3, [r7, #4]
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d1f3      	bne.n	800bd3e <mem_set+0x10>
}
 800bd56:	bf00      	nop
 800bd58:	bf00      	nop
 800bd5a:	371c      	adds	r7, #28
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr

0800bd64 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bd64:	b480      	push	{r7}
 800bd66:	b089      	sub	sp, #36	@ 0x24
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	60f8      	str	r0, [r7, #12]
 800bd6c:	60b9      	str	r1, [r7, #8]
 800bd6e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	61fb      	str	r3, [r7, #28]
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	1c5a      	adds	r2, r3, #1
 800bd80:	61fa      	str	r2, [r7, #28]
 800bd82:	781b      	ldrb	r3, [r3, #0]
 800bd84:	4619      	mov	r1, r3
 800bd86:	69bb      	ldr	r3, [r7, #24]
 800bd88:	1c5a      	adds	r2, r3, #1
 800bd8a:	61ba      	str	r2, [r7, #24]
 800bd8c:	781b      	ldrb	r3, [r3, #0]
 800bd8e:	1acb      	subs	r3, r1, r3
 800bd90:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	3b01      	subs	r3, #1
 800bd96:	607b      	str	r3, [r7, #4]
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d002      	beq.n	800bda4 <mem_cmp+0x40>
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d0eb      	beq.n	800bd7c <mem_cmp+0x18>

	return r;
 800bda4:	697b      	ldr	r3, [r7, #20]
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3724      	adds	r7, #36	@ 0x24
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb0:	4770      	bx	lr

0800bdb2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bdb2:	b480      	push	{r7}
 800bdb4:	b083      	sub	sp, #12
 800bdb6:	af00      	add	r7, sp, #0
 800bdb8:	6078      	str	r0, [r7, #4]
 800bdba:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bdbc:	e002      	b.n	800bdc4 <chk_chr+0x12>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	607b      	str	r3, [r7, #4]
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	781b      	ldrb	r3, [r3, #0]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d005      	beq.n	800bdd8 <chk_chr+0x26>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	781b      	ldrb	r3, [r3, #0]
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	4293      	cmp	r3, r2
 800bdd6:	d1f2      	bne.n	800bdbe <chk_chr+0xc>
	return *str;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	781b      	ldrb	r3, [r3, #0]
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	370c      	adds	r7, #12
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr

0800bde8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b085      	sub	sp, #20
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	60bb      	str	r3, [r7, #8]
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	60fb      	str	r3, [r7, #12]
 800bdfa:	e029      	b.n	800be50 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800bdfc:	4a27      	ldr	r2, [pc, #156]	@ (800be9c <chk_lock+0xb4>)
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	011b      	lsls	r3, r3, #4
 800be02:	4413      	add	r3, r2
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d01d      	beq.n	800be46 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800be0a:	4a24      	ldr	r2, [pc, #144]	@ (800be9c <chk_lock+0xb4>)
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	011b      	lsls	r3, r3, #4
 800be10:	4413      	add	r3, r2
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	429a      	cmp	r2, r3
 800be1a:	d116      	bne.n	800be4a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800be1c:	4a1f      	ldr	r2, [pc, #124]	@ (800be9c <chk_lock+0xb4>)
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	011b      	lsls	r3, r3, #4
 800be22:	4413      	add	r3, r2
 800be24:	3304      	adds	r3, #4
 800be26:	681a      	ldr	r2, [r3, #0]
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d10c      	bne.n	800be4a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800be30:	4a1a      	ldr	r2, [pc, #104]	@ (800be9c <chk_lock+0xb4>)
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	011b      	lsls	r3, r3, #4
 800be36:	4413      	add	r3, r2
 800be38:	3308      	adds	r3, #8
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800be40:	429a      	cmp	r2, r3
 800be42:	d102      	bne.n	800be4a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800be44:	e007      	b.n	800be56 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800be46:	2301      	movs	r3, #1
 800be48:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	3301      	adds	r3, #1
 800be4e:	60fb      	str	r3, [r7, #12]
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2b01      	cmp	r3, #1
 800be54:	d9d2      	bls.n	800bdfc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	2b02      	cmp	r3, #2
 800be5a:	d109      	bne.n	800be70 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d102      	bne.n	800be68 <chk_lock+0x80>
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	2b02      	cmp	r3, #2
 800be66:	d101      	bne.n	800be6c <chk_lock+0x84>
 800be68:	2300      	movs	r3, #0
 800be6a:	e010      	b.n	800be8e <chk_lock+0xa6>
 800be6c:	2312      	movs	r3, #18
 800be6e:	e00e      	b.n	800be8e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d108      	bne.n	800be88 <chk_lock+0xa0>
 800be76:	4a09      	ldr	r2, [pc, #36]	@ (800be9c <chk_lock+0xb4>)
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	011b      	lsls	r3, r3, #4
 800be7c:	4413      	add	r3, r2
 800be7e:	330c      	adds	r3, #12
 800be80:	881b      	ldrh	r3, [r3, #0]
 800be82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be86:	d101      	bne.n	800be8c <chk_lock+0xa4>
 800be88:	2310      	movs	r3, #16
 800be8a:	e000      	b.n	800be8e <chk_lock+0xa6>
 800be8c:	2300      	movs	r3, #0
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3714      	adds	r7, #20
 800be92:	46bd      	mov	sp, r7
 800be94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be98:	4770      	bx	lr
 800be9a:	bf00      	nop
 800be9c:	20006b68 	.word	0x20006b68

0800bea0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800bea0:	b480      	push	{r7}
 800bea2:	b083      	sub	sp, #12
 800bea4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bea6:	2300      	movs	r3, #0
 800bea8:	607b      	str	r3, [r7, #4]
 800beaa:	e002      	b.n	800beb2 <enq_lock+0x12>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	3301      	adds	r3, #1
 800beb0:	607b      	str	r3, [r7, #4]
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2b01      	cmp	r3, #1
 800beb6:	d806      	bhi.n	800bec6 <enq_lock+0x26>
 800beb8:	4a09      	ldr	r2, [pc, #36]	@ (800bee0 <enq_lock+0x40>)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	011b      	lsls	r3, r3, #4
 800bebe:	4413      	add	r3, r2
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d1f2      	bne.n	800beac <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2b02      	cmp	r3, #2
 800beca:	bf14      	ite	ne
 800becc:	2301      	movne	r3, #1
 800bece:	2300      	moveq	r3, #0
 800bed0:	b2db      	uxtb	r3, r3
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	370c      	adds	r7, #12
 800bed6:	46bd      	mov	sp, r7
 800bed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bedc:	4770      	bx	lr
 800bede:	bf00      	nop
 800bee0:	20006b68 	.word	0x20006b68

0800bee4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b085      	sub	sp, #20
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800beee:	2300      	movs	r3, #0
 800bef0:	60fb      	str	r3, [r7, #12]
 800bef2:	e01f      	b.n	800bf34 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bef4:	4a41      	ldr	r2, [pc, #260]	@ (800bffc <inc_lock+0x118>)
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	011b      	lsls	r3, r3, #4
 800befa:	4413      	add	r3, r2
 800befc:	681a      	ldr	r2, [r3, #0]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d113      	bne.n	800bf2e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bf06:	4a3d      	ldr	r2, [pc, #244]	@ (800bffc <inc_lock+0x118>)
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	011b      	lsls	r3, r3, #4
 800bf0c:	4413      	add	r3, r2
 800bf0e:	3304      	adds	r3, #4
 800bf10:	681a      	ldr	r2, [r3, #0]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d109      	bne.n	800bf2e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bf1a:	4a38      	ldr	r2, [pc, #224]	@ (800bffc <inc_lock+0x118>)
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	011b      	lsls	r3, r3, #4
 800bf20:	4413      	add	r3, r2
 800bf22:	3308      	adds	r3, #8
 800bf24:	681a      	ldr	r2, [r3, #0]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	d006      	beq.n	800bf3c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	3301      	adds	r3, #1
 800bf32:	60fb      	str	r3, [r7, #12]
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2b01      	cmp	r3, #1
 800bf38:	d9dc      	bls.n	800bef4 <inc_lock+0x10>
 800bf3a:	e000      	b.n	800bf3e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bf3c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	2b02      	cmp	r3, #2
 800bf42:	d132      	bne.n	800bfaa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bf44:	2300      	movs	r3, #0
 800bf46:	60fb      	str	r3, [r7, #12]
 800bf48:	e002      	b.n	800bf50 <inc_lock+0x6c>
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	3301      	adds	r3, #1
 800bf4e:	60fb      	str	r3, [r7, #12]
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	d806      	bhi.n	800bf64 <inc_lock+0x80>
 800bf56:	4a29      	ldr	r2, [pc, #164]	@ (800bffc <inc_lock+0x118>)
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	011b      	lsls	r3, r3, #4
 800bf5c:	4413      	add	r3, r2
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d1f2      	bne.n	800bf4a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	2b02      	cmp	r3, #2
 800bf68:	d101      	bne.n	800bf6e <inc_lock+0x8a>
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	e040      	b.n	800bff0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681a      	ldr	r2, [r3, #0]
 800bf72:	4922      	ldr	r1, [pc, #136]	@ (800bffc <inc_lock+0x118>)
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	011b      	lsls	r3, r3, #4
 800bf78:	440b      	add	r3, r1
 800bf7a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	689a      	ldr	r2, [r3, #8]
 800bf80:	491e      	ldr	r1, [pc, #120]	@ (800bffc <inc_lock+0x118>)
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	011b      	lsls	r3, r3, #4
 800bf86:	440b      	add	r3, r1
 800bf88:	3304      	adds	r3, #4
 800bf8a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	695a      	ldr	r2, [r3, #20]
 800bf90:	491a      	ldr	r1, [pc, #104]	@ (800bffc <inc_lock+0x118>)
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	011b      	lsls	r3, r3, #4
 800bf96:	440b      	add	r3, r1
 800bf98:	3308      	adds	r3, #8
 800bf9a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bf9c:	4a17      	ldr	r2, [pc, #92]	@ (800bffc <inc_lock+0x118>)
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	011b      	lsls	r3, r3, #4
 800bfa2:	4413      	add	r3, r2
 800bfa4:	330c      	adds	r3, #12
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d009      	beq.n	800bfc4 <inc_lock+0xe0>
 800bfb0:	4a12      	ldr	r2, [pc, #72]	@ (800bffc <inc_lock+0x118>)
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	011b      	lsls	r3, r3, #4
 800bfb6:	4413      	add	r3, r2
 800bfb8:	330c      	adds	r3, #12
 800bfba:	881b      	ldrh	r3, [r3, #0]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d001      	beq.n	800bfc4 <inc_lock+0xe0>
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	e015      	b.n	800bff0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d108      	bne.n	800bfdc <inc_lock+0xf8>
 800bfca:	4a0c      	ldr	r2, [pc, #48]	@ (800bffc <inc_lock+0x118>)
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	011b      	lsls	r3, r3, #4
 800bfd0:	4413      	add	r3, r2
 800bfd2:	330c      	adds	r3, #12
 800bfd4:	881b      	ldrh	r3, [r3, #0]
 800bfd6:	3301      	adds	r3, #1
 800bfd8:	b29a      	uxth	r2, r3
 800bfda:	e001      	b.n	800bfe0 <inc_lock+0xfc>
 800bfdc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bfe0:	4906      	ldr	r1, [pc, #24]	@ (800bffc <inc_lock+0x118>)
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	011b      	lsls	r3, r3, #4
 800bfe6:	440b      	add	r3, r1
 800bfe8:	330c      	adds	r3, #12
 800bfea:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	3301      	adds	r3, #1
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3714      	adds	r7, #20
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr
 800bffc:	20006b68 	.word	0x20006b68

0800c000 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c000:	b480      	push	{r7}
 800c002:	b085      	sub	sp, #20
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	3b01      	subs	r3, #1
 800c00c:	607b      	str	r3, [r7, #4]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2b01      	cmp	r3, #1
 800c012:	d825      	bhi.n	800c060 <dec_lock+0x60>
		n = Files[i].ctr;
 800c014:	4a17      	ldr	r2, [pc, #92]	@ (800c074 <dec_lock+0x74>)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	011b      	lsls	r3, r3, #4
 800c01a:	4413      	add	r3, r2
 800c01c:	330c      	adds	r3, #12
 800c01e:	881b      	ldrh	r3, [r3, #0]
 800c020:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c022:	89fb      	ldrh	r3, [r7, #14]
 800c024:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c028:	d101      	bne.n	800c02e <dec_lock+0x2e>
 800c02a:	2300      	movs	r3, #0
 800c02c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c02e:	89fb      	ldrh	r3, [r7, #14]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d002      	beq.n	800c03a <dec_lock+0x3a>
 800c034:	89fb      	ldrh	r3, [r7, #14]
 800c036:	3b01      	subs	r3, #1
 800c038:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c03a:	4a0e      	ldr	r2, [pc, #56]	@ (800c074 <dec_lock+0x74>)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	011b      	lsls	r3, r3, #4
 800c040:	4413      	add	r3, r2
 800c042:	330c      	adds	r3, #12
 800c044:	89fa      	ldrh	r2, [r7, #14]
 800c046:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c048:	89fb      	ldrh	r3, [r7, #14]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d105      	bne.n	800c05a <dec_lock+0x5a>
 800c04e:	4a09      	ldr	r2, [pc, #36]	@ (800c074 <dec_lock+0x74>)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	011b      	lsls	r3, r3, #4
 800c054:	4413      	add	r3, r2
 800c056:	2200      	movs	r2, #0
 800c058:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c05a:	2300      	movs	r3, #0
 800c05c:	737b      	strb	r3, [r7, #13]
 800c05e:	e001      	b.n	800c064 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c060:	2302      	movs	r3, #2
 800c062:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c064:	7b7b      	ldrb	r3, [r7, #13]
}
 800c066:	4618      	mov	r0, r3
 800c068:	3714      	adds	r7, #20
 800c06a:	46bd      	mov	sp, r7
 800c06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c070:	4770      	bx	lr
 800c072:	bf00      	nop
 800c074:	20006b68 	.word	0x20006b68

0800c078 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c078:	b480      	push	{r7}
 800c07a:	b085      	sub	sp, #20
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c080:	2300      	movs	r3, #0
 800c082:	60fb      	str	r3, [r7, #12]
 800c084:	e010      	b.n	800c0a8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c086:	4a0d      	ldr	r2, [pc, #52]	@ (800c0bc <clear_lock+0x44>)
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	011b      	lsls	r3, r3, #4
 800c08c:	4413      	add	r3, r2
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	687a      	ldr	r2, [r7, #4]
 800c092:	429a      	cmp	r2, r3
 800c094:	d105      	bne.n	800c0a2 <clear_lock+0x2a>
 800c096:	4a09      	ldr	r2, [pc, #36]	@ (800c0bc <clear_lock+0x44>)
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	011b      	lsls	r3, r3, #4
 800c09c:	4413      	add	r3, r2
 800c09e:	2200      	movs	r2, #0
 800c0a0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	60fb      	str	r3, [r7, #12]
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	2b01      	cmp	r3, #1
 800c0ac:	d9eb      	bls.n	800c086 <clear_lock+0xe>
	}
}
 800c0ae:	bf00      	nop
 800c0b0:	bf00      	nop
 800c0b2:	3714      	adds	r7, #20
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ba:	4770      	bx	lr
 800c0bc:	20006b68 	.word	0x20006b68

0800c0c0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b086      	sub	sp, #24
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	78db      	ldrb	r3, [r3, #3]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d034      	beq.n	800c13e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0d8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	7858      	ldrb	r0, [r3, #1]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	697a      	ldr	r2, [r7, #20]
 800c0e8:	f7ff fd18 	bl	800bb1c <disk_write>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d002      	beq.n	800c0f8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	73fb      	strb	r3, [r7, #15]
 800c0f6:	e022      	b.n	800c13e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6a1b      	ldr	r3, [r3, #32]
 800c102:	697a      	ldr	r2, [r7, #20]
 800c104:	1ad2      	subs	r2, r2, r3
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	699b      	ldr	r3, [r3, #24]
 800c10a:	429a      	cmp	r2, r3
 800c10c:	d217      	bcs.n	800c13e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	789b      	ldrb	r3, [r3, #2]
 800c112:	613b      	str	r3, [r7, #16]
 800c114:	e010      	b.n	800c138 <sync_window+0x78>
					wsect += fs->fsize;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	699b      	ldr	r3, [r3, #24]
 800c11a:	697a      	ldr	r2, [r7, #20]
 800c11c:	4413      	add	r3, r2
 800c11e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	7858      	ldrb	r0, [r3, #1]
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c12a:	2301      	movs	r3, #1
 800c12c:	697a      	ldr	r2, [r7, #20]
 800c12e:	f7ff fcf5 	bl	800bb1c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	3b01      	subs	r3, #1
 800c136:	613b      	str	r3, [r7, #16]
 800c138:	693b      	ldr	r3, [r7, #16]
 800c13a:	2b01      	cmp	r3, #1
 800c13c:	d8eb      	bhi.n	800c116 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c13e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c140:	4618      	mov	r0, r3
 800c142:	3718      	adds	r7, #24
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}

0800c148 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b084      	sub	sp, #16
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c152:	2300      	movs	r3, #0
 800c154:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c15a:	683a      	ldr	r2, [r7, #0]
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d01b      	beq.n	800c198 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f7ff ffad 	bl	800c0c0 <sync_window>
 800c166:	4603      	mov	r3, r0
 800c168:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c16a:	7bfb      	ldrb	r3, [r7, #15]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d113      	bne.n	800c198 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	7858      	ldrb	r0, [r3, #1]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c17a:	2301      	movs	r3, #1
 800c17c:	683a      	ldr	r2, [r7, #0]
 800c17e:	f7ff fc9e 	bl	800babe <disk_read>
 800c182:	4603      	mov	r3, r0
 800c184:	2b00      	cmp	r3, #0
 800c186:	d004      	beq.n	800c192 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c188:	f04f 33ff 	mov.w	r3, #4294967295
 800c18c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c18e:	2301      	movs	r3, #1
 800c190:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	683a      	ldr	r2, [r7, #0]
 800c196:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800c198:	7bfb      	ldrb	r3, [r7, #15]
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3710      	adds	r7, #16
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
	...

0800c1a4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f7ff ff87 	bl	800c0c0 <sync_window>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c1b6:	7bfb      	ldrb	r3, [r7, #15]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d158      	bne.n	800c26e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	781b      	ldrb	r3, [r3, #0]
 800c1c0:	2b03      	cmp	r3, #3
 800c1c2:	d148      	bne.n	800c256 <sync_fs+0xb2>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	791b      	ldrb	r3, [r3, #4]
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	d144      	bne.n	800c256 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	3330      	adds	r3, #48	@ 0x30
 800c1d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c1d4:	2100      	movs	r1, #0
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f7ff fda9 	bl	800bd2e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	3330      	adds	r3, #48	@ 0x30
 800c1e0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c1e4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f7ff fd38 	bl	800bc5e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	3330      	adds	r3, #48	@ 0x30
 800c1f2:	4921      	ldr	r1, [pc, #132]	@ (800c278 <sync_fs+0xd4>)
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f7ff fd4d 	bl	800bc94 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	3330      	adds	r3, #48	@ 0x30
 800c1fe:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c202:	491e      	ldr	r1, [pc, #120]	@ (800c27c <sync_fs+0xd8>)
 800c204:	4618      	mov	r0, r3
 800c206:	f7ff fd45 	bl	800bc94 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	3330      	adds	r3, #48	@ 0x30
 800c20e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	691b      	ldr	r3, [r3, #16]
 800c216:	4619      	mov	r1, r3
 800c218:	4610      	mov	r0, r2
 800c21a:	f7ff fd3b 	bl	800bc94 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	3330      	adds	r3, #48	@ 0x30
 800c222:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	68db      	ldr	r3, [r3, #12]
 800c22a:	4619      	mov	r1, r3
 800c22c:	4610      	mov	r0, r2
 800c22e:	f7ff fd31 	bl	800bc94 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	69db      	ldr	r3, [r3, #28]
 800c236:	1c5a      	adds	r2, r3, #1
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	7858      	ldrb	r0, [r3, #1]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c24a:	2301      	movs	r3, #1
 800c24c:	f7ff fc66 	bl	800bb1c <disk_write>
			fs->fsi_flag = 0;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2200      	movs	r2, #0
 800c254:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	785b      	ldrb	r3, [r3, #1]
 800c25a:	2200      	movs	r2, #0
 800c25c:	2100      	movs	r1, #0
 800c25e:	4618      	mov	r0, r3
 800c260:	f7ff fc8c 	bl	800bb7c <disk_ioctl>
 800c264:	4603      	mov	r3, r0
 800c266:	2b00      	cmp	r3, #0
 800c268:	d001      	beq.n	800c26e <sync_fs+0xca>
 800c26a:	2301      	movs	r3, #1
 800c26c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c26e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c270:	4618      	mov	r0, r3
 800c272:	3710      	adds	r7, #16
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}
 800c278:	41615252 	.word	0x41615252
 800c27c:	61417272 	.word	0x61417272

0800c280 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c280:	b480      	push	{r7}
 800c282:	b083      	sub	sp, #12
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	3b02      	subs	r3, #2
 800c28e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	695b      	ldr	r3, [r3, #20]
 800c294:	3b02      	subs	r3, #2
 800c296:	683a      	ldr	r2, [r7, #0]
 800c298:	429a      	cmp	r2, r3
 800c29a:	d301      	bcc.n	800c2a0 <clust2sect+0x20>
 800c29c:	2300      	movs	r3, #0
 800c29e:	e008      	b.n	800c2b2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	895b      	ldrh	r3, [r3, #10]
 800c2a4:	461a      	mov	r2, r3
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	fb03 f202 	mul.w	r2, r3, r2
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2b0:	4413      	add	r3, r2
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	370c      	adds	r7, #12
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2bc:	4770      	bx	lr

0800c2be <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c2be:	b580      	push	{r7, lr}
 800c2c0:	b086      	sub	sp, #24
 800c2c2:	af00      	add	r7, sp, #0
 800c2c4:	6078      	str	r0, [r7, #4]
 800c2c6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	2b01      	cmp	r3, #1
 800c2d2:	d904      	bls.n	800c2de <get_fat+0x20>
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	695b      	ldr	r3, [r3, #20]
 800c2d8:	683a      	ldr	r2, [r7, #0]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d302      	bcc.n	800c2e4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c2de:	2301      	movs	r3, #1
 800c2e0:	617b      	str	r3, [r7, #20]
 800c2e2:	e08e      	b.n	800c402 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c2e4:	f04f 33ff 	mov.w	r3, #4294967295
 800c2e8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	781b      	ldrb	r3, [r3, #0]
 800c2ee:	2b03      	cmp	r3, #3
 800c2f0:	d061      	beq.n	800c3b6 <get_fat+0xf8>
 800c2f2:	2b03      	cmp	r3, #3
 800c2f4:	dc7b      	bgt.n	800c3ee <get_fat+0x130>
 800c2f6:	2b01      	cmp	r3, #1
 800c2f8:	d002      	beq.n	800c300 <get_fat+0x42>
 800c2fa:	2b02      	cmp	r3, #2
 800c2fc:	d041      	beq.n	800c382 <get_fat+0xc4>
 800c2fe:	e076      	b.n	800c3ee <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	60fb      	str	r3, [r7, #12]
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	085b      	lsrs	r3, r3, #1
 800c308:	68fa      	ldr	r2, [r7, #12]
 800c30a:	4413      	add	r3, r2
 800c30c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	6a1a      	ldr	r2, [r3, #32]
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	0a5b      	lsrs	r3, r3, #9
 800c316:	4413      	add	r3, r2
 800c318:	4619      	mov	r1, r3
 800c31a:	6938      	ldr	r0, [r7, #16]
 800c31c:	f7ff ff14 	bl	800c148 <move_window>
 800c320:	4603      	mov	r3, r0
 800c322:	2b00      	cmp	r3, #0
 800c324:	d166      	bne.n	800c3f4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	1c5a      	adds	r2, r3, #1
 800c32a:	60fa      	str	r2, [r7, #12]
 800c32c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c330:	693a      	ldr	r2, [r7, #16]
 800c332:	4413      	add	r3, r2
 800c334:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c338:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	6a1a      	ldr	r2, [r3, #32]
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	0a5b      	lsrs	r3, r3, #9
 800c342:	4413      	add	r3, r2
 800c344:	4619      	mov	r1, r3
 800c346:	6938      	ldr	r0, [r7, #16]
 800c348:	f7ff fefe 	bl	800c148 <move_window>
 800c34c:	4603      	mov	r3, r0
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d152      	bne.n	800c3f8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c358:	693a      	ldr	r2, [r7, #16]
 800c35a:	4413      	add	r3, r2
 800c35c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c360:	021b      	lsls	r3, r3, #8
 800c362:	68ba      	ldr	r2, [r7, #8]
 800c364:	4313      	orrs	r3, r2
 800c366:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	f003 0301 	and.w	r3, r3, #1
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d002      	beq.n	800c378 <get_fat+0xba>
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	091b      	lsrs	r3, r3, #4
 800c376:	e002      	b.n	800c37e <get_fat+0xc0>
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c37e:	617b      	str	r3, [r7, #20]
			break;
 800c380:	e03f      	b.n	800c402 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	6a1a      	ldr	r2, [r3, #32]
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	0a1b      	lsrs	r3, r3, #8
 800c38a:	4413      	add	r3, r2
 800c38c:	4619      	mov	r1, r3
 800c38e:	6938      	ldr	r0, [r7, #16]
 800c390:	f7ff feda 	bl	800c148 <move_window>
 800c394:	4603      	mov	r3, r0
 800c396:	2b00      	cmp	r3, #0
 800c398:	d130      	bne.n	800c3fc <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	005b      	lsls	r3, r3, #1
 800c3a4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c3a8:	4413      	add	r3, r2
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7ff fc1c 	bl	800bbe8 <ld_word>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	617b      	str	r3, [r7, #20]
			break;
 800c3b4:	e025      	b.n	800c402 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	6a1a      	ldr	r2, [r3, #32]
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	09db      	lsrs	r3, r3, #7
 800c3be:	4413      	add	r3, r2
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	6938      	ldr	r0, [r7, #16]
 800c3c4:	f7ff fec0 	bl	800c148 <move_window>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d118      	bne.n	800c400 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	009b      	lsls	r3, r3, #2
 800c3d8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c3dc:	4413      	add	r3, r2
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7ff fc1a 	bl	800bc18 <ld_dword>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800c3ea:	617b      	str	r3, [r7, #20]
			break;
 800c3ec:	e009      	b.n	800c402 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	617b      	str	r3, [r7, #20]
 800c3f2:	e006      	b.n	800c402 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c3f4:	bf00      	nop
 800c3f6:	e004      	b.n	800c402 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c3f8:	bf00      	nop
 800c3fa:	e002      	b.n	800c402 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c3fc:	bf00      	nop
 800c3fe:	e000      	b.n	800c402 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c400:	bf00      	nop
		}
	}

	return val;
 800c402:	697b      	ldr	r3, [r7, #20]
}
 800c404:	4618      	mov	r0, r3
 800c406:	3718      	adds	r7, #24
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}

0800c40c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c40c:	b590      	push	{r4, r7, lr}
 800c40e:	b089      	sub	sp, #36	@ 0x24
 800c410:	af00      	add	r7, sp, #0
 800c412:	60f8      	str	r0, [r7, #12]
 800c414:	60b9      	str	r1, [r7, #8]
 800c416:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c418:	2302      	movs	r3, #2
 800c41a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	2b01      	cmp	r3, #1
 800c420:	f240 80d9 	bls.w	800c5d6 <put_fat+0x1ca>
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	695b      	ldr	r3, [r3, #20]
 800c428:	68ba      	ldr	r2, [r7, #8]
 800c42a:	429a      	cmp	r2, r3
 800c42c:	f080 80d3 	bcs.w	800c5d6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	2b03      	cmp	r3, #3
 800c436:	f000 8096 	beq.w	800c566 <put_fat+0x15a>
 800c43a:	2b03      	cmp	r3, #3
 800c43c:	f300 80cb 	bgt.w	800c5d6 <put_fat+0x1ca>
 800c440:	2b01      	cmp	r3, #1
 800c442:	d002      	beq.n	800c44a <put_fat+0x3e>
 800c444:	2b02      	cmp	r3, #2
 800c446:	d06e      	beq.n	800c526 <put_fat+0x11a>
 800c448:	e0c5      	b.n	800c5d6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	61bb      	str	r3, [r7, #24]
 800c44e:	69bb      	ldr	r3, [r7, #24]
 800c450:	085b      	lsrs	r3, r3, #1
 800c452:	69ba      	ldr	r2, [r7, #24]
 800c454:	4413      	add	r3, r2
 800c456:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	6a1a      	ldr	r2, [r3, #32]
 800c45c:	69bb      	ldr	r3, [r7, #24]
 800c45e:	0a5b      	lsrs	r3, r3, #9
 800c460:	4413      	add	r3, r2
 800c462:	4619      	mov	r1, r3
 800c464:	68f8      	ldr	r0, [r7, #12]
 800c466:	f7ff fe6f 	bl	800c148 <move_window>
 800c46a:	4603      	mov	r3, r0
 800c46c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c46e:	7ffb      	ldrb	r3, [r7, #31]
 800c470:	2b00      	cmp	r3, #0
 800c472:	f040 80a9 	bne.w	800c5c8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c47c:	69bb      	ldr	r3, [r7, #24]
 800c47e:	1c59      	adds	r1, r3, #1
 800c480:	61b9      	str	r1, [r7, #24]
 800c482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c486:	4413      	add	r3, r2
 800c488:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	f003 0301 	and.w	r3, r3, #1
 800c490:	2b00      	cmp	r3, #0
 800c492:	d00d      	beq.n	800c4b0 <put_fat+0xa4>
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	781b      	ldrb	r3, [r3, #0]
 800c498:	b25b      	sxtb	r3, r3
 800c49a:	f003 030f 	and.w	r3, r3, #15
 800c49e:	b25a      	sxtb	r2, r3
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	b2db      	uxtb	r3, r3
 800c4a4:	011b      	lsls	r3, r3, #4
 800c4a6:	b25b      	sxtb	r3, r3
 800c4a8:	4313      	orrs	r3, r2
 800c4aa:	b25b      	sxtb	r3, r3
 800c4ac:	b2db      	uxtb	r3, r3
 800c4ae:	e001      	b.n	800c4b4 <put_fat+0xa8>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	b2db      	uxtb	r3, r3
 800c4b4:	697a      	ldr	r2, [r7, #20]
 800c4b6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	2201      	movs	r2, #1
 800c4bc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	6a1a      	ldr	r2, [r3, #32]
 800c4c2:	69bb      	ldr	r3, [r7, #24]
 800c4c4:	0a5b      	lsrs	r3, r3, #9
 800c4c6:	4413      	add	r3, r2
 800c4c8:	4619      	mov	r1, r3
 800c4ca:	68f8      	ldr	r0, [r7, #12]
 800c4cc:	f7ff fe3c 	bl	800c148 <move_window>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c4d4:	7ffb      	ldrb	r3, [r7, #31]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d178      	bne.n	800c5cc <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c4e0:	69bb      	ldr	r3, [r7, #24]
 800c4e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4e6:	4413      	add	r3, r2
 800c4e8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	f003 0301 	and.w	r3, r3, #1
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d003      	beq.n	800c4fc <put_fat+0xf0>
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	091b      	lsrs	r3, r3, #4
 800c4f8:	b2db      	uxtb	r3, r3
 800c4fa:	e00e      	b.n	800c51a <put_fat+0x10e>
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	781b      	ldrb	r3, [r3, #0]
 800c500:	b25b      	sxtb	r3, r3
 800c502:	f023 030f 	bic.w	r3, r3, #15
 800c506:	b25a      	sxtb	r2, r3
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	0a1b      	lsrs	r3, r3, #8
 800c50c:	b25b      	sxtb	r3, r3
 800c50e:	f003 030f 	and.w	r3, r3, #15
 800c512:	b25b      	sxtb	r3, r3
 800c514:	4313      	orrs	r3, r2
 800c516:	b25b      	sxtb	r3, r3
 800c518:	b2db      	uxtb	r3, r3
 800c51a:	697a      	ldr	r2, [r7, #20]
 800c51c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	2201      	movs	r2, #1
 800c522:	70da      	strb	r2, [r3, #3]
			break;
 800c524:	e057      	b.n	800c5d6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	6a1a      	ldr	r2, [r3, #32]
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	0a1b      	lsrs	r3, r3, #8
 800c52e:	4413      	add	r3, r2
 800c530:	4619      	mov	r1, r3
 800c532:	68f8      	ldr	r0, [r7, #12]
 800c534:	f7ff fe08 	bl	800c148 <move_window>
 800c538:	4603      	mov	r3, r0
 800c53a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c53c:	7ffb      	ldrb	r3, [r7, #31]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d146      	bne.n	800c5d0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	005b      	lsls	r3, r3, #1
 800c54c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c550:	4413      	add	r3, r2
 800c552:	687a      	ldr	r2, [r7, #4]
 800c554:	b292      	uxth	r2, r2
 800c556:	4611      	mov	r1, r2
 800c558:	4618      	mov	r0, r3
 800c55a:	f7ff fb80 	bl	800bc5e <st_word>
			fs->wflag = 1;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	2201      	movs	r2, #1
 800c562:	70da      	strb	r2, [r3, #3]
			break;
 800c564:	e037      	b.n	800c5d6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	6a1a      	ldr	r2, [r3, #32]
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	09db      	lsrs	r3, r3, #7
 800c56e:	4413      	add	r3, r2
 800c570:	4619      	mov	r1, r3
 800c572:	68f8      	ldr	r0, [r7, #12]
 800c574:	f7ff fde8 	bl	800c148 <move_window>
 800c578:	4603      	mov	r3, r0
 800c57a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c57c:	7ffb      	ldrb	r3, [r7, #31]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d128      	bne.n	800c5d4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	009b      	lsls	r3, r3, #2
 800c592:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c596:	4413      	add	r3, r2
 800c598:	4618      	mov	r0, r3
 800c59a:	f7ff fb3d 	bl	800bc18 <ld_dword>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800c5a4:	4323      	orrs	r3, r4
 800c5a6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	009b      	lsls	r3, r3, #2
 800c5b2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c5b6:	4413      	add	r3, r2
 800c5b8:	6879      	ldr	r1, [r7, #4]
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f7ff fb6a 	bl	800bc94 <st_dword>
			fs->wflag = 1;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	2201      	movs	r2, #1
 800c5c4:	70da      	strb	r2, [r3, #3]
			break;
 800c5c6:	e006      	b.n	800c5d6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c5c8:	bf00      	nop
 800c5ca:	e004      	b.n	800c5d6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c5cc:	bf00      	nop
 800c5ce:	e002      	b.n	800c5d6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c5d0:	bf00      	nop
 800c5d2:	e000      	b.n	800c5d6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c5d4:	bf00      	nop
		}
	}
	return res;
 800c5d6:	7ffb      	ldrb	r3, [r7, #31]
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3724      	adds	r7, #36	@ 0x24
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd90      	pop	{r4, r7, pc}

0800c5e0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b088      	sub	sp, #32
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	60f8      	str	r0, [r7, #12]
 800c5e8:	60b9      	str	r1, [r7, #8]
 800c5ea:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	2b01      	cmp	r3, #1
 800c5fa:	d904      	bls.n	800c606 <remove_chain+0x26>
 800c5fc:	69bb      	ldr	r3, [r7, #24]
 800c5fe:	695b      	ldr	r3, [r3, #20]
 800c600:	68ba      	ldr	r2, [r7, #8]
 800c602:	429a      	cmp	r2, r3
 800c604:	d301      	bcc.n	800c60a <remove_chain+0x2a>
 800c606:	2302      	movs	r3, #2
 800c608:	e04b      	b.n	800c6a2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d00c      	beq.n	800c62a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c610:	f04f 32ff 	mov.w	r2, #4294967295
 800c614:	6879      	ldr	r1, [r7, #4]
 800c616:	69b8      	ldr	r0, [r7, #24]
 800c618:	f7ff fef8 	bl	800c40c <put_fat>
 800c61c:	4603      	mov	r3, r0
 800c61e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c620:	7ffb      	ldrb	r3, [r7, #31]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d001      	beq.n	800c62a <remove_chain+0x4a>
 800c626:	7ffb      	ldrb	r3, [r7, #31]
 800c628:	e03b      	b.n	800c6a2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c62a:	68b9      	ldr	r1, [r7, #8]
 800c62c:	68f8      	ldr	r0, [r7, #12]
 800c62e:	f7ff fe46 	bl	800c2be <get_fat>
 800c632:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d031      	beq.n	800c69e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	2b01      	cmp	r3, #1
 800c63e:	d101      	bne.n	800c644 <remove_chain+0x64>
 800c640:	2302      	movs	r3, #2
 800c642:	e02e      	b.n	800c6a2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c64a:	d101      	bne.n	800c650 <remove_chain+0x70>
 800c64c:	2301      	movs	r3, #1
 800c64e:	e028      	b.n	800c6a2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c650:	2200      	movs	r2, #0
 800c652:	68b9      	ldr	r1, [r7, #8]
 800c654:	69b8      	ldr	r0, [r7, #24]
 800c656:	f7ff fed9 	bl	800c40c <put_fat>
 800c65a:	4603      	mov	r3, r0
 800c65c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c65e:	7ffb      	ldrb	r3, [r7, #31]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d001      	beq.n	800c668 <remove_chain+0x88>
 800c664:	7ffb      	ldrb	r3, [r7, #31]
 800c666:	e01c      	b.n	800c6a2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c668:	69bb      	ldr	r3, [r7, #24]
 800c66a:	691a      	ldr	r2, [r3, #16]
 800c66c:	69bb      	ldr	r3, [r7, #24]
 800c66e:	695b      	ldr	r3, [r3, #20]
 800c670:	3b02      	subs	r3, #2
 800c672:	429a      	cmp	r2, r3
 800c674:	d20b      	bcs.n	800c68e <remove_chain+0xae>
			fs->free_clst++;
 800c676:	69bb      	ldr	r3, [r7, #24]
 800c678:	691b      	ldr	r3, [r3, #16]
 800c67a:	1c5a      	adds	r2, r3, #1
 800c67c:	69bb      	ldr	r3, [r7, #24]
 800c67e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c680:	69bb      	ldr	r3, [r7, #24]
 800c682:	791b      	ldrb	r3, [r3, #4]
 800c684:	f043 0301 	orr.w	r3, r3, #1
 800c688:	b2da      	uxtb	r2, r3
 800c68a:	69bb      	ldr	r3, [r7, #24]
 800c68c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c692:	69bb      	ldr	r3, [r7, #24]
 800c694:	695b      	ldr	r3, [r3, #20]
 800c696:	68ba      	ldr	r2, [r7, #8]
 800c698:	429a      	cmp	r2, r3
 800c69a:	d3c6      	bcc.n	800c62a <remove_chain+0x4a>
 800c69c:	e000      	b.n	800c6a0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c69e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c6a0:	2300      	movs	r3, #0
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3720      	adds	r7, #32
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}

0800c6aa <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c6aa:	b580      	push	{r7, lr}
 800c6ac:	b088      	sub	sp, #32
 800c6ae:	af00      	add	r7, sp, #0
 800c6b0:	6078      	str	r0, [r7, #4]
 800c6b2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d10d      	bne.n	800c6dc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c6c0:	693b      	ldr	r3, [r7, #16]
 800c6c2:	68db      	ldr	r3, [r3, #12]
 800c6c4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c6c6:	69bb      	ldr	r3, [r7, #24]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d004      	beq.n	800c6d6 <create_chain+0x2c>
 800c6cc:	693b      	ldr	r3, [r7, #16]
 800c6ce:	695b      	ldr	r3, [r3, #20]
 800c6d0:	69ba      	ldr	r2, [r7, #24]
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	d31b      	bcc.n	800c70e <create_chain+0x64>
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	61bb      	str	r3, [r7, #24]
 800c6da:	e018      	b.n	800c70e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c6dc:	6839      	ldr	r1, [r7, #0]
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f7ff fded 	bl	800c2be <get_fat>
 800c6e4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	2b01      	cmp	r3, #1
 800c6ea:	d801      	bhi.n	800c6f0 <create_chain+0x46>
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	e070      	b.n	800c7d2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6f6:	d101      	bne.n	800c6fc <create_chain+0x52>
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	e06a      	b.n	800c7d2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	695b      	ldr	r3, [r3, #20]
 800c700:	68fa      	ldr	r2, [r7, #12]
 800c702:	429a      	cmp	r2, r3
 800c704:	d201      	bcs.n	800c70a <create_chain+0x60>
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	e063      	b.n	800c7d2 <create_chain+0x128>
		scl = clst;
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c70e:	69bb      	ldr	r3, [r7, #24]
 800c710:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c712:	69fb      	ldr	r3, [r7, #28]
 800c714:	3301      	adds	r3, #1
 800c716:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c718:	693b      	ldr	r3, [r7, #16]
 800c71a:	695b      	ldr	r3, [r3, #20]
 800c71c:	69fa      	ldr	r2, [r7, #28]
 800c71e:	429a      	cmp	r2, r3
 800c720:	d307      	bcc.n	800c732 <create_chain+0x88>
				ncl = 2;
 800c722:	2302      	movs	r3, #2
 800c724:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c726:	69fa      	ldr	r2, [r7, #28]
 800c728:	69bb      	ldr	r3, [r7, #24]
 800c72a:	429a      	cmp	r2, r3
 800c72c:	d901      	bls.n	800c732 <create_chain+0x88>
 800c72e:	2300      	movs	r3, #0
 800c730:	e04f      	b.n	800c7d2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c732:	69f9      	ldr	r1, [r7, #28]
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f7ff fdc2 	bl	800c2be <get_fat>
 800c73a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d00e      	beq.n	800c760 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	2b01      	cmp	r3, #1
 800c746:	d003      	beq.n	800c750 <create_chain+0xa6>
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c74e:	d101      	bne.n	800c754 <create_chain+0xaa>
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	e03e      	b.n	800c7d2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c754:	69fa      	ldr	r2, [r7, #28]
 800c756:	69bb      	ldr	r3, [r7, #24]
 800c758:	429a      	cmp	r2, r3
 800c75a:	d1da      	bne.n	800c712 <create_chain+0x68>
 800c75c:	2300      	movs	r3, #0
 800c75e:	e038      	b.n	800c7d2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c760:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c762:	f04f 32ff 	mov.w	r2, #4294967295
 800c766:	69f9      	ldr	r1, [r7, #28]
 800c768:	6938      	ldr	r0, [r7, #16]
 800c76a:	f7ff fe4f 	bl	800c40c <put_fat>
 800c76e:	4603      	mov	r3, r0
 800c770:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c772:	7dfb      	ldrb	r3, [r7, #23]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d109      	bne.n	800c78c <create_chain+0xe2>
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d006      	beq.n	800c78c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c77e:	69fa      	ldr	r2, [r7, #28]
 800c780:	6839      	ldr	r1, [r7, #0]
 800c782:	6938      	ldr	r0, [r7, #16]
 800c784:	f7ff fe42 	bl	800c40c <put_fat>
 800c788:	4603      	mov	r3, r0
 800c78a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c78c:	7dfb      	ldrb	r3, [r7, #23]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d116      	bne.n	800c7c0 <create_chain+0x116>
		fs->last_clst = ncl;
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	69fa      	ldr	r2, [r7, #28]
 800c796:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c798:	693b      	ldr	r3, [r7, #16]
 800c79a:	691a      	ldr	r2, [r3, #16]
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	695b      	ldr	r3, [r3, #20]
 800c7a0:	3b02      	subs	r3, #2
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d804      	bhi.n	800c7b0 <create_chain+0x106>
 800c7a6:	693b      	ldr	r3, [r7, #16]
 800c7a8:	691b      	ldr	r3, [r3, #16]
 800c7aa:	1e5a      	subs	r2, r3, #1
 800c7ac:	693b      	ldr	r3, [r7, #16]
 800c7ae:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	791b      	ldrb	r3, [r3, #4]
 800c7b4:	f043 0301 	orr.w	r3, r3, #1
 800c7b8:	b2da      	uxtb	r2, r3
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	711a      	strb	r2, [r3, #4]
 800c7be:	e007      	b.n	800c7d0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c7c0:	7dfb      	ldrb	r3, [r7, #23]
 800c7c2:	2b01      	cmp	r3, #1
 800c7c4:	d102      	bne.n	800c7cc <create_chain+0x122>
 800c7c6:	f04f 33ff 	mov.w	r3, #4294967295
 800c7ca:	e000      	b.n	800c7ce <create_chain+0x124>
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c7d0:	69fb      	ldr	r3, [r7, #28]
}
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	3720      	adds	r7, #32
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}

0800c7da <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c7da:	b480      	push	{r7}
 800c7dc:	b087      	sub	sp, #28
 800c7de:	af00      	add	r7, sp, #0
 800c7e0:	6078      	str	r0, [r7, #4]
 800c7e2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7ee:	3304      	adds	r3, #4
 800c7f0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	0a5b      	lsrs	r3, r3, #9
 800c7f6:	68fa      	ldr	r2, [r7, #12]
 800c7f8:	8952      	ldrh	r2, [r2, #10]
 800c7fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800c7fe:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c800:	693b      	ldr	r3, [r7, #16]
 800c802:	1d1a      	adds	r2, r3, #4
 800c804:	613a      	str	r2, [r7, #16]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d101      	bne.n	800c814 <clmt_clust+0x3a>
 800c810:	2300      	movs	r3, #0
 800c812:	e010      	b.n	800c836 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c814:	697a      	ldr	r2, [r7, #20]
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	429a      	cmp	r2, r3
 800c81a:	d307      	bcc.n	800c82c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c81c:	697a      	ldr	r2, [r7, #20]
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	1ad3      	subs	r3, r2, r3
 800c822:	617b      	str	r3, [r7, #20]
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	3304      	adds	r3, #4
 800c828:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c82a:	e7e9      	b.n	800c800 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c82c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	681a      	ldr	r2, [r3, #0]
 800c832:	697b      	ldr	r3, [r7, #20]
 800c834:	4413      	add	r3, r2
}
 800c836:	4618      	mov	r0, r3
 800c838:	371c      	adds	r7, #28
 800c83a:	46bd      	mov	sp, r7
 800c83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c840:	4770      	bx	lr

0800c842 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c842:	b580      	push	{r7, lr}
 800c844:	b086      	sub	sp, #24
 800c846:	af00      	add	r7, sp, #0
 800c848:	6078      	str	r0, [r7, #4]
 800c84a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c858:	d204      	bcs.n	800c864 <dir_sdi+0x22>
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	f003 031f 	and.w	r3, r3, #31
 800c860:	2b00      	cmp	r3, #0
 800c862:	d001      	beq.n	800c868 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c864:	2302      	movs	r3, #2
 800c866:	e063      	b.n	800c930 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	683a      	ldr	r2, [r7, #0]
 800c86c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	689b      	ldr	r3, [r3, #8]
 800c872:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d106      	bne.n	800c888 <dir_sdi+0x46>
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	781b      	ldrb	r3, [r3, #0]
 800c87e:	2b02      	cmp	r3, #2
 800c880:	d902      	bls.n	800c888 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c886:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d10c      	bne.n	800c8a8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	095b      	lsrs	r3, r3, #5
 800c892:	693a      	ldr	r2, [r7, #16]
 800c894:	8912      	ldrh	r2, [r2, #8]
 800c896:	4293      	cmp	r3, r2
 800c898:	d301      	bcc.n	800c89e <dir_sdi+0x5c>
 800c89a:	2302      	movs	r3, #2
 800c89c:	e048      	b.n	800c930 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	61da      	str	r2, [r3, #28]
 800c8a6:	e029      	b.n	800c8fc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	895b      	ldrh	r3, [r3, #10]
 800c8ac:	025b      	lsls	r3, r3, #9
 800c8ae:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c8b0:	e019      	b.n	800c8e6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6979      	ldr	r1, [r7, #20]
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f7ff fd01 	bl	800c2be <get_fat>
 800c8bc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8c4:	d101      	bne.n	800c8ca <dir_sdi+0x88>
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	e032      	b.n	800c930 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	d904      	bls.n	800c8da <dir_sdi+0x98>
 800c8d0:	693b      	ldr	r3, [r7, #16]
 800c8d2:	695b      	ldr	r3, [r3, #20]
 800c8d4:	697a      	ldr	r2, [r7, #20]
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d301      	bcc.n	800c8de <dir_sdi+0x9c>
 800c8da:	2302      	movs	r3, #2
 800c8dc:	e028      	b.n	800c930 <dir_sdi+0xee>
			ofs -= csz;
 800c8de:	683a      	ldr	r2, [r7, #0]
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	1ad3      	subs	r3, r2, r3
 800c8e4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c8e6:	683a      	ldr	r2, [r7, #0]
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d2e1      	bcs.n	800c8b2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c8ee:	6979      	ldr	r1, [r7, #20]
 800c8f0:	6938      	ldr	r0, [r7, #16]
 800c8f2:	f7ff fcc5 	bl	800c280 <clust2sect>
 800c8f6:	4602      	mov	r2, r0
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	697a      	ldr	r2, [r7, #20]
 800c900:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	69db      	ldr	r3, [r3, #28]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d101      	bne.n	800c90e <dir_sdi+0xcc>
 800c90a:	2302      	movs	r3, #2
 800c90c:	e010      	b.n	800c930 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	69da      	ldr	r2, [r3, #28]
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	0a5b      	lsrs	r3, r3, #9
 800c916:	441a      	add	r2, r3
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c928:	441a      	add	r2, r3
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c92e:	2300      	movs	r3, #0
}
 800c930:	4618      	mov	r0, r3
 800c932:	3718      	adds	r7, #24
 800c934:	46bd      	mov	sp, r7
 800c936:	bd80      	pop	{r7, pc}

0800c938 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b086      	sub	sp, #24
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
 800c940:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	695b      	ldr	r3, [r3, #20]
 800c94c:	3320      	adds	r3, #32
 800c94e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	69db      	ldr	r3, [r3, #28]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d003      	beq.n	800c960 <dir_next+0x28>
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c95e:	d301      	bcc.n	800c964 <dir_next+0x2c>
 800c960:	2304      	movs	r3, #4
 800c962:	e0aa      	b.n	800caba <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	f040 8098 	bne.w	800caa0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	69db      	ldr	r3, [r3, #28]
 800c974:	1c5a      	adds	r2, r3, #1
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	699b      	ldr	r3, [r3, #24]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d10b      	bne.n	800c99a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	095b      	lsrs	r3, r3, #5
 800c986:	68fa      	ldr	r2, [r7, #12]
 800c988:	8912      	ldrh	r2, [r2, #8]
 800c98a:	4293      	cmp	r3, r2
 800c98c:	f0c0 8088 	bcc.w	800caa0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2200      	movs	r2, #0
 800c994:	61da      	str	r2, [r3, #28]
 800c996:	2304      	movs	r3, #4
 800c998:	e08f      	b.n	800caba <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	0a5b      	lsrs	r3, r3, #9
 800c99e:	68fa      	ldr	r2, [r7, #12]
 800c9a0:	8952      	ldrh	r2, [r2, #10]
 800c9a2:	3a01      	subs	r2, #1
 800c9a4:	4013      	ands	r3, r2
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d17a      	bne.n	800caa0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c9aa:	687a      	ldr	r2, [r7, #4]
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	699b      	ldr	r3, [r3, #24]
 800c9b0:	4619      	mov	r1, r3
 800c9b2:	4610      	mov	r0, r2
 800c9b4:	f7ff fc83 	bl	800c2be <get_fat>
 800c9b8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	2b01      	cmp	r3, #1
 800c9be:	d801      	bhi.n	800c9c4 <dir_next+0x8c>
 800c9c0:	2302      	movs	r3, #2
 800c9c2:	e07a      	b.n	800caba <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9ca:	d101      	bne.n	800c9d0 <dir_next+0x98>
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	e074      	b.n	800caba <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	695b      	ldr	r3, [r3, #20]
 800c9d4:	697a      	ldr	r2, [r7, #20]
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d358      	bcc.n	800ca8c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d104      	bne.n	800c9ea <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	61da      	str	r2, [r3, #28]
 800c9e6:	2304      	movs	r3, #4
 800c9e8:	e067      	b.n	800caba <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c9ea:	687a      	ldr	r2, [r7, #4]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	699b      	ldr	r3, [r3, #24]
 800c9f0:	4619      	mov	r1, r3
 800c9f2:	4610      	mov	r0, r2
 800c9f4:	f7ff fe59 	bl	800c6aa <create_chain>
 800c9f8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d101      	bne.n	800ca04 <dir_next+0xcc>
 800ca00:	2307      	movs	r3, #7
 800ca02:	e05a      	b.n	800caba <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ca04:	697b      	ldr	r3, [r7, #20]
 800ca06:	2b01      	cmp	r3, #1
 800ca08:	d101      	bne.n	800ca0e <dir_next+0xd6>
 800ca0a:	2302      	movs	r3, #2
 800ca0c:	e055      	b.n	800caba <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca14:	d101      	bne.n	800ca1a <dir_next+0xe2>
 800ca16:	2301      	movs	r3, #1
 800ca18:	e04f      	b.n	800caba <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ca1a:	68f8      	ldr	r0, [r7, #12]
 800ca1c:	f7ff fb50 	bl	800c0c0 <sync_window>
 800ca20:	4603      	mov	r3, r0
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d001      	beq.n	800ca2a <dir_next+0xf2>
 800ca26:	2301      	movs	r3, #1
 800ca28:	e047      	b.n	800caba <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	3330      	adds	r3, #48	@ 0x30
 800ca2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ca32:	2100      	movs	r1, #0
 800ca34:	4618      	mov	r0, r3
 800ca36:	f7ff f97a 	bl	800bd2e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	613b      	str	r3, [r7, #16]
 800ca3e:	6979      	ldr	r1, [r7, #20]
 800ca40:	68f8      	ldr	r0, [r7, #12]
 800ca42:	f7ff fc1d 	bl	800c280 <clust2sect>
 800ca46:	4602      	mov	r2, r0
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ca4c:	e012      	b.n	800ca74 <dir_next+0x13c>
						fs->wflag = 1;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	2201      	movs	r2, #1
 800ca52:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ca54:	68f8      	ldr	r0, [r7, #12]
 800ca56:	f7ff fb33 	bl	800c0c0 <sync_window>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d001      	beq.n	800ca64 <dir_next+0x12c>
 800ca60:	2301      	movs	r3, #1
 800ca62:	e02a      	b.n	800caba <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	3301      	adds	r3, #1
 800ca68:	613b      	str	r3, [r7, #16]
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca6e:	1c5a      	adds	r2, r3, #1
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	895b      	ldrh	r3, [r3, #10]
 800ca78:	461a      	mov	r2, r3
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d3e6      	bcc.n	800ca4e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca84:	693b      	ldr	r3, [r7, #16]
 800ca86:	1ad2      	subs	r2, r2, r3
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	697a      	ldr	r2, [r7, #20]
 800ca90:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ca92:	6979      	ldr	r1, [r7, #20]
 800ca94:	68f8      	ldr	r0, [r7, #12]
 800ca96:	f7ff fbf3 	bl	800c280 <clust2sect>
 800ca9a:	4602      	mov	r2, r0
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	68ba      	ldr	r2, [r7, #8]
 800caa4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cab2:	441a      	add	r2, r3
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cab8:	2300      	movs	r3, #0
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3718      	adds	r7, #24
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}

0800cac2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800cac2:	b580      	push	{r7, lr}
 800cac4:	b086      	sub	sp, #24
 800cac6:	af00      	add	r7, sp, #0
 800cac8:	6078      	str	r0, [r7, #4]
 800caca:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cad2:	2100      	movs	r1, #0
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f7ff feb4 	bl	800c842 <dir_sdi>
 800cada:	4603      	mov	r3, r0
 800cadc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cade:	7dfb      	ldrb	r3, [r7, #23]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d12b      	bne.n	800cb3c <dir_alloc+0x7a>
		n = 0;
 800cae4:	2300      	movs	r3, #0
 800cae6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	69db      	ldr	r3, [r3, #28]
 800caec:	4619      	mov	r1, r3
 800caee:	68f8      	ldr	r0, [r7, #12]
 800caf0:	f7ff fb2a 	bl	800c148 <move_window>
 800caf4:	4603      	mov	r3, r0
 800caf6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800caf8:	7dfb      	ldrb	r3, [r7, #23]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d11d      	bne.n	800cb3a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6a1b      	ldr	r3, [r3, #32]
 800cb02:	781b      	ldrb	r3, [r3, #0]
 800cb04:	2be5      	cmp	r3, #229	@ 0xe5
 800cb06:	d004      	beq.n	800cb12 <dir_alloc+0x50>
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6a1b      	ldr	r3, [r3, #32]
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d107      	bne.n	800cb22 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	3301      	adds	r3, #1
 800cb16:	613b      	str	r3, [r7, #16]
 800cb18:	693a      	ldr	r2, [r7, #16]
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	d102      	bne.n	800cb26 <dir_alloc+0x64>
 800cb20:	e00c      	b.n	800cb3c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cb22:	2300      	movs	r3, #0
 800cb24:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cb26:	2101      	movs	r1, #1
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f7ff ff05 	bl	800c938 <dir_next>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cb32:	7dfb      	ldrb	r3, [r7, #23]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d0d7      	beq.n	800cae8 <dir_alloc+0x26>
 800cb38:	e000      	b.n	800cb3c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800cb3a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cb3c:	7dfb      	ldrb	r3, [r7, #23]
 800cb3e:	2b04      	cmp	r3, #4
 800cb40:	d101      	bne.n	800cb46 <dir_alloc+0x84>
 800cb42:	2307      	movs	r3, #7
 800cb44:	75fb      	strb	r3, [r7, #23]
	return res;
 800cb46:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3718      	adds	r7, #24
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b084      	sub	sp, #16
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	331a      	adds	r3, #26
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7ff f842 	bl	800bbe8 <ld_word>
 800cb64:	4603      	mov	r3, r0
 800cb66:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	2b03      	cmp	r3, #3
 800cb6e:	d109      	bne.n	800cb84 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	3314      	adds	r3, #20
 800cb74:	4618      	mov	r0, r3
 800cb76:	f7ff f837 	bl	800bbe8 <ld_word>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	041b      	lsls	r3, r3, #16
 800cb7e:	68fa      	ldr	r2, [r7, #12]
 800cb80:	4313      	orrs	r3, r2
 800cb82:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800cb84:	68fb      	ldr	r3, [r7, #12]
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3710      	adds	r7, #16
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}

0800cb8e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800cb8e:	b580      	push	{r7, lr}
 800cb90:	b084      	sub	sp, #16
 800cb92:	af00      	add	r7, sp, #0
 800cb94:	60f8      	str	r0, [r7, #12]
 800cb96:	60b9      	str	r1, [r7, #8]
 800cb98:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	331a      	adds	r3, #26
 800cb9e:	687a      	ldr	r2, [r7, #4]
 800cba0:	b292      	uxth	r2, r2
 800cba2:	4611      	mov	r1, r2
 800cba4:	4618      	mov	r0, r3
 800cba6:	f7ff f85a 	bl	800bc5e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	2b03      	cmp	r3, #3
 800cbb0:	d109      	bne.n	800cbc6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	f103 0214 	add.w	r2, r3, #20
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	0c1b      	lsrs	r3, r3, #16
 800cbbc:	b29b      	uxth	r3, r3
 800cbbe:	4619      	mov	r1, r3
 800cbc0:	4610      	mov	r0, r2
 800cbc2:	f7ff f84c 	bl	800bc5e <st_word>
	}
}
 800cbc6:	bf00      	nop
 800cbc8:	3710      	adds	r7, #16
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}

0800cbce <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800cbce:	b580      	push	{r7, lr}
 800cbd0:	b086      	sub	sp, #24
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cbdc:	2100      	movs	r1, #0
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f7ff fe2f 	bl	800c842 <dir_sdi>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800cbe8:	7dfb      	ldrb	r3, [r7, #23]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d001      	beq.n	800cbf2 <dir_find+0x24>
 800cbee:	7dfb      	ldrb	r3, [r7, #23]
 800cbf0:	e03e      	b.n	800cc70 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	69db      	ldr	r3, [r3, #28]
 800cbf6:	4619      	mov	r1, r3
 800cbf8:	6938      	ldr	r0, [r7, #16]
 800cbfa:	f7ff faa5 	bl	800c148 <move_window>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cc02:	7dfb      	ldrb	r3, [r7, #23]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d12f      	bne.n	800cc68 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	6a1b      	ldr	r3, [r3, #32]
 800cc0c:	781b      	ldrb	r3, [r3, #0]
 800cc0e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cc10:	7bfb      	ldrb	r3, [r7, #15]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d102      	bne.n	800cc1c <dir_find+0x4e>
 800cc16:	2304      	movs	r3, #4
 800cc18:	75fb      	strb	r3, [r7, #23]
 800cc1a:	e028      	b.n	800cc6e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6a1b      	ldr	r3, [r3, #32]
 800cc20:	330b      	adds	r3, #11
 800cc22:	781b      	ldrb	r3, [r3, #0]
 800cc24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cc28:	b2da      	uxtb	r2, r3
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6a1b      	ldr	r3, [r3, #32]
 800cc32:	330b      	adds	r3, #11
 800cc34:	781b      	ldrb	r3, [r3, #0]
 800cc36:	f003 0308 	and.w	r3, r3, #8
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d10a      	bne.n	800cc54 <dir_find+0x86>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6a18      	ldr	r0, [r3, #32]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	3324      	adds	r3, #36	@ 0x24
 800cc46:	220b      	movs	r2, #11
 800cc48:	4619      	mov	r1, r3
 800cc4a:	f7ff f88b 	bl	800bd64 <mem_cmp>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d00b      	beq.n	800cc6c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cc54:	2100      	movs	r1, #0
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f7ff fe6e 	bl	800c938 <dir_next>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cc60:	7dfb      	ldrb	r3, [r7, #23]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d0c5      	beq.n	800cbf2 <dir_find+0x24>
 800cc66:	e002      	b.n	800cc6e <dir_find+0xa0>
		if (res != FR_OK) break;
 800cc68:	bf00      	nop
 800cc6a:	e000      	b.n	800cc6e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cc6c:	bf00      	nop

	return res;
 800cc6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3718      	adds	r7, #24
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}

0800cc78 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b084      	sub	sp, #16
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800cc86:	2101      	movs	r1, #1
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f7ff ff1a 	bl	800cac2 <dir_alloc>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800cc92:	7bfb      	ldrb	r3, [r7, #15]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d11c      	bne.n	800ccd2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	69db      	ldr	r3, [r3, #28]
 800cc9c:	4619      	mov	r1, r3
 800cc9e:	68b8      	ldr	r0, [r7, #8]
 800cca0:	f7ff fa52 	bl	800c148 <move_window>
 800cca4:	4603      	mov	r3, r0
 800cca6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cca8:	7bfb      	ldrb	r3, [r7, #15]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d111      	bne.n	800ccd2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6a1b      	ldr	r3, [r3, #32]
 800ccb2:	2220      	movs	r2, #32
 800ccb4:	2100      	movs	r1, #0
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f7ff f839 	bl	800bd2e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	6a18      	ldr	r0, [r3, #32]
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	3324      	adds	r3, #36	@ 0x24
 800ccc4:	220b      	movs	r2, #11
 800ccc6:	4619      	mov	r1, r3
 800ccc8:	f7ff f810 	bl	800bcec <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	2201      	movs	r2, #1
 800ccd0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ccd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3710      	adds	r7, #16
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}

0800ccdc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b088      	sub	sp, #32
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
 800cce4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	60fb      	str	r3, [r7, #12]
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	3324      	adds	r3, #36	@ 0x24
 800ccf0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ccf2:	220b      	movs	r2, #11
 800ccf4:	2120      	movs	r1, #32
 800ccf6:	68b8      	ldr	r0, [r7, #8]
 800ccf8:	f7ff f819 	bl	800bd2e <mem_set>
	si = i = 0; ni = 8;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	613b      	str	r3, [r7, #16]
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	61fb      	str	r3, [r7, #28]
 800cd04:	2308      	movs	r3, #8
 800cd06:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800cd08:	69fb      	ldr	r3, [r7, #28]
 800cd0a:	1c5a      	adds	r2, r3, #1
 800cd0c:	61fa      	str	r2, [r7, #28]
 800cd0e:	68fa      	ldr	r2, [r7, #12]
 800cd10:	4413      	add	r3, r2
 800cd12:	781b      	ldrb	r3, [r3, #0]
 800cd14:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cd16:	7efb      	ldrb	r3, [r7, #27]
 800cd18:	2b20      	cmp	r3, #32
 800cd1a:	d94e      	bls.n	800cdba <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800cd1c:	7efb      	ldrb	r3, [r7, #27]
 800cd1e:	2b2f      	cmp	r3, #47	@ 0x2f
 800cd20:	d006      	beq.n	800cd30 <create_name+0x54>
 800cd22:	7efb      	ldrb	r3, [r7, #27]
 800cd24:	2b5c      	cmp	r3, #92	@ 0x5c
 800cd26:	d110      	bne.n	800cd4a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800cd28:	e002      	b.n	800cd30 <create_name+0x54>
 800cd2a:	69fb      	ldr	r3, [r7, #28]
 800cd2c:	3301      	adds	r3, #1
 800cd2e:	61fb      	str	r3, [r7, #28]
 800cd30:	68fa      	ldr	r2, [r7, #12]
 800cd32:	69fb      	ldr	r3, [r7, #28]
 800cd34:	4413      	add	r3, r2
 800cd36:	781b      	ldrb	r3, [r3, #0]
 800cd38:	2b2f      	cmp	r3, #47	@ 0x2f
 800cd3a:	d0f6      	beq.n	800cd2a <create_name+0x4e>
 800cd3c:	68fa      	ldr	r2, [r7, #12]
 800cd3e:	69fb      	ldr	r3, [r7, #28]
 800cd40:	4413      	add	r3, r2
 800cd42:	781b      	ldrb	r3, [r3, #0]
 800cd44:	2b5c      	cmp	r3, #92	@ 0x5c
 800cd46:	d0f0      	beq.n	800cd2a <create_name+0x4e>
			break;
 800cd48:	e038      	b.n	800cdbc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800cd4a:	7efb      	ldrb	r3, [r7, #27]
 800cd4c:	2b2e      	cmp	r3, #46	@ 0x2e
 800cd4e:	d003      	beq.n	800cd58 <create_name+0x7c>
 800cd50:	693a      	ldr	r2, [r7, #16]
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	429a      	cmp	r2, r3
 800cd56:	d30c      	bcc.n	800cd72 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	2b0b      	cmp	r3, #11
 800cd5c:	d002      	beq.n	800cd64 <create_name+0x88>
 800cd5e:	7efb      	ldrb	r3, [r7, #27]
 800cd60:	2b2e      	cmp	r3, #46	@ 0x2e
 800cd62:	d001      	beq.n	800cd68 <create_name+0x8c>
 800cd64:	2306      	movs	r3, #6
 800cd66:	e044      	b.n	800cdf2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800cd68:	2308      	movs	r3, #8
 800cd6a:	613b      	str	r3, [r7, #16]
 800cd6c:	230b      	movs	r3, #11
 800cd6e:	617b      	str	r3, [r7, #20]
			continue;
 800cd70:	e022      	b.n	800cdb8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800cd72:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	da04      	bge.n	800cd84 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800cd7a:	7efb      	ldrb	r3, [r7, #27]
 800cd7c:	3b80      	subs	r3, #128	@ 0x80
 800cd7e:	4a1f      	ldr	r2, [pc, #124]	@ (800cdfc <create_name+0x120>)
 800cd80:	5cd3      	ldrb	r3, [r2, r3]
 800cd82:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800cd84:	7efb      	ldrb	r3, [r7, #27]
 800cd86:	4619      	mov	r1, r3
 800cd88:	481d      	ldr	r0, [pc, #116]	@ (800ce00 <create_name+0x124>)
 800cd8a:	f7ff f812 	bl	800bdb2 <chk_chr>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d001      	beq.n	800cd98 <create_name+0xbc>
 800cd94:	2306      	movs	r3, #6
 800cd96:	e02c      	b.n	800cdf2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800cd98:	7efb      	ldrb	r3, [r7, #27]
 800cd9a:	2b60      	cmp	r3, #96	@ 0x60
 800cd9c:	d905      	bls.n	800cdaa <create_name+0xce>
 800cd9e:	7efb      	ldrb	r3, [r7, #27]
 800cda0:	2b7a      	cmp	r3, #122	@ 0x7a
 800cda2:	d802      	bhi.n	800cdaa <create_name+0xce>
 800cda4:	7efb      	ldrb	r3, [r7, #27]
 800cda6:	3b20      	subs	r3, #32
 800cda8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800cdaa:	693b      	ldr	r3, [r7, #16]
 800cdac:	1c5a      	adds	r2, r3, #1
 800cdae:	613a      	str	r2, [r7, #16]
 800cdb0:	68ba      	ldr	r2, [r7, #8]
 800cdb2:	4413      	add	r3, r2
 800cdb4:	7efa      	ldrb	r2, [r7, #27]
 800cdb6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800cdb8:	e7a6      	b.n	800cd08 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cdba:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800cdbc:	68fa      	ldr	r2, [r7, #12]
 800cdbe:	69fb      	ldr	r3, [r7, #28]
 800cdc0:	441a      	add	r2, r3
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d101      	bne.n	800cdd0 <create_name+0xf4>
 800cdcc:	2306      	movs	r3, #6
 800cdce:	e010      	b.n	800cdf2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	781b      	ldrb	r3, [r3, #0]
 800cdd4:	2be5      	cmp	r3, #229	@ 0xe5
 800cdd6:	d102      	bne.n	800cdde <create_name+0x102>
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	2205      	movs	r2, #5
 800cddc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800cdde:	7efb      	ldrb	r3, [r7, #27]
 800cde0:	2b20      	cmp	r3, #32
 800cde2:	d801      	bhi.n	800cde8 <create_name+0x10c>
 800cde4:	2204      	movs	r2, #4
 800cde6:	e000      	b.n	800cdea <create_name+0x10e>
 800cde8:	2200      	movs	r2, #0
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	330b      	adds	r3, #11
 800cdee:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800cdf0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	3720      	adds	r7, #32
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}
 800cdfa:	bf00      	nop
 800cdfc:	08014084 	.word	0x08014084
 800ce00:	08014030 	.word	0x08014030

0800ce04 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b086      	sub	sp, #24
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ce12:	693b      	ldr	r3, [r7, #16]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ce18:	e002      	b.n	800ce20 <follow_path+0x1c>
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	3301      	adds	r3, #1
 800ce1e:	603b      	str	r3, [r7, #0]
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	2b2f      	cmp	r3, #47	@ 0x2f
 800ce26:	d0f8      	beq.n	800ce1a <follow_path+0x16>
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	2b5c      	cmp	r3, #92	@ 0x5c
 800ce2e:	d0f4      	beq.n	800ce1a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	2200      	movs	r2, #0
 800ce34:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	781b      	ldrb	r3, [r3, #0]
 800ce3a:	2b1f      	cmp	r3, #31
 800ce3c:	d80a      	bhi.n	800ce54 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2280      	movs	r2, #128	@ 0x80
 800ce42:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800ce46:	2100      	movs	r1, #0
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f7ff fcfa 	bl	800c842 <dir_sdi>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	75fb      	strb	r3, [r7, #23]
 800ce52:	e043      	b.n	800cedc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ce54:	463b      	mov	r3, r7
 800ce56:	4619      	mov	r1, r3
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f7ff ff3f 	bl	800ccdc <create_name>
 800ce5e:	4603      	mov	r3, r0
 800ce60:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ce62:	7dfb      	ldrb	r3, [r7, #23]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d134      	bne.n	800ced2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f7ff feb0 	bl	800cbce <dir_find>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ce78:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ce7a:	7dfb      	ldrb	r3, [r7, #23]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d00a      	beq.n	800ce96 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ce80:	7dfb      	ldrb	r3, [r7, #23]
 800ce82:	2b04      	cmp	r3, #4
 800ce84:	d127      	bne.n	800ced6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ce86:	7afb      	ldrb	r3, [r7, #11]
 800ce88:	f003 0304 	and.w	r3, r3, #4
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d122      	bne.n	800ced6 <follow_path+0xd2>
 800ce90:	2305      	movs	r3, #5
 800ce92:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ce94:	e01f      	b.n	800ced6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ce96:	7afb      	ldrb	r3, [r7, #11]
 800ce98:	f003 0304 	and.w	r3, r3, #4
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d11c      	bne.n	800ceda <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	799b      	ldrb	r3, [r3, #6]
 800cea4:	f003 0310 	and.w	r3, r3, #16
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d102      	bne.n	800ceb2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ceac:	2305      	movs	r3, #5
 800ceae:	75fb      	strb	r3, [r7, #23]
 800ceb0:	e014      	b.n	800cedc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	695b      	ldr	r3, [r3, #20]
 800cebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cec0:	4413      	add	r3, r2
 800cec2:	4619      	mov	r1, r3
 800cec4:	68f8      	ldr	r0, [r7, #12]
 800cec6:	f7ff fe43 	bl	800cb50 <ld_clust>
 800ceca:	4602      	mov	r2, r0
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ced0:	e7c0      	b.n	800ce54 <follow_path+0x50>
			if (res != FR_OK) break;
 800ced2:	bf00      	nop
 800ced4:	e002      	b.n	800cedc <follow_path+0xd8>
				break;
 800ced6:	bf00      	nop
 800ced8:	e000      	b.n	800cedc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ceda:	bf00      	nop
			}
		}
	}

	return res;
 800cedc:	7dfb      	ldrb	r3, [r7, #23]
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3718      	adds	r7, #24
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}

0800cee6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cee6:	b480      	push	{r7}
 800cee8:	b087      	sub	sp, #28
 800ceea:	af00      	add	r7, sp, #0
 800ceec:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ceee:	f04f 33ff 	mov.w	r3, #4294967295
 800cef2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d031      	beq.n	800cf60 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	617b      	str	r3, [r7, #20]
 800cf02:	e002      	b.n	800cf0a <get_ldnumber+0x24>
 800cf04:	697b      	ldr	r3, [r7, #20]
 800cf06:	3301      	adds	r3, #1
 800cf08:	617b      	str	r3, [r7, #20]
 800cf0a:	697b      	ldr	r3, [r7, #20]
 800cf0c:	781b      	ldrb	r3, [r3, #0]
 800cf0e:	2b20      	cmp	r3, #32
 800cf10:	d903      	bls.n	800cf1a <get_ldnumber+0x34>
 800cf12:	697b      	ldr	r3, [r7, #20]
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	2b3a      	cmp	r3, #58	@ 0x3a
 800cf18:	d1f4      	bne.n	800cf04 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	781b      	ldrb	r3, [r3, #0]
 800cf1e:	2b3a      	cmp	r3, #58	@ 0x3a
 800cf20:	d11c      	bne.n	800cf5c <get_ldnumber+0x76>
			tp = *path;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	1c5a      	adds	r2, r3, #1
 800cf2c:	60fa      	str	r2, [r7, #12]
 800cf2e:	781b      	ldrb	r3, [r3, #0]
 800cf30:	3b30      	subs	r3, #48	@ 0x30
 800cf32:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	2b09      	cmp	r3, #9
 800cf38:	d80e      	bhi.n	800cf58 <get_ldnumber+0x72>
 800cf3a:	68fa      	ldr	r2, [r7, #12]
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d10a      	bne.n	800cf58 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d107      	bne.n	800cf58 <get_ldnumber+0x72>
					vol = (int)i;
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800cf4c:	697b      	ldr	r3, [r7, #20]
 800cf4e:	3301      	adds	r3, #1
 800cf50:	617b      	str	r3, [r7, #20]
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	697a      	ldr	r2, [r7, #20]
 800cf56:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cf58:	693b      	ldr	r3, [r7, #16]
 800cf5a:	e002      	b.n	800cf62 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cf60:	693b      	ldr	r3, [r7, #16]
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	371c      	adds	r7, #28
 800cf66:	46bd      	mov	sp, r7
 800cf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6c:	4770      	bx	lr
	...

0800cf70 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b082      	sub	sp, #8
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	70da      	strb	r2, [r3, #3]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f04f 32ff 	mov.w	r2, #4294967295
 800cf86:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cf88:	6839      	ldr	r1, [r7, #0]
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f7ff f8dc 	bl	800c148 <move_window>
 800cf90:	4603      	mov	r3, r0
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d001      	beq.n	800cf9a <check_fs+0x2a>
 800cf96:	2304      	movs	r3, #4
 800cf98:	e038      	b.n	800d00c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	3330      	adds	r3, #48	@ 0x30
 800cf9e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f7fe fe20 	bl	800bbe8 <ld_word>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	461a      	mov	r2, r3
 800cfac:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d001      	beq.n	800cfb8 <check_fs+0x48>
 800cfb4:	2303      	movs	r3, #3
 800cfb6:	e029      	b.n	800d00c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cfbe:	2be9      	cmp	r3, #233	@ 0xe9
 800cfc0:	d009      	beq.n	800cfd6 <check_fs+0x66>
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cfc8:	2beb      	cmp	r3, #235	@ 0xeb
 800cfca:	d11e      	bne.n	800d00a <check_fs+0x9a>
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800cfd2:	2b90      	cmp	r3, #144	@ 0x90
 800cfd4:	d119      	bne.n	800d00a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	3330      	adds	r3, #48	@ 0x30
 800cfda:	3336      	adds	r3, #54	@ 0x36
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f7fe fe1b 	bl	800bc18 <ld_dword>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800cfe8:	4a0a      	ldr	r2, [pc, #40]	@ (800d014 <check_fs+0xa4>)
 800cfea:	4293      	cmp	r3, r2
 800cfec:	d101      	bne.n	800cff2 <check_fs+0x82>
 800cfee:	2300      	movs	r3, #0
 800cff0:	e00c      	b.n	800d00c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	3330      	adds	r3, #48	@ 0x30
 800cff6:	3352      	adds	r3, #82	@ 0x52
 800cff8:	4618      	mov	r0, r3
 800cffa:	f7fe fe0d 	bl	800bc18 <ld_dword>
 800cffe:	4603      	mov	r3, r0
 800d000:	4a05      	ldr	r2, [pc, #20]	@ (800d018 <check_fs+0xa8>)
 800d002:	4293      	cmp	r3, r2
 800d004:	d101      	bne.n	800d00a <check_fs+0x9a>
 800d006:	2300      	movs	r3, #0
 800d008:	e000      	b.n	800d00c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d00a:	2302      	movs	r3, #2
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3708      	adds	r7, #8
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}
 800d014:	00544146 	.word	0x00544146
 800d018:	33544146 	.word	0x33544146

0800d01c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b096      	sub	sp, #88	@ 0x58
 800d020:	af00      	add	r7, sp, #0
 800d022:	60f8      	str	r0, [r7, #12]
 800d024:	60b9      	str	r1, [r7, #8]
 800d026:	4613      	mov	r3, r2
 800d028:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	2200      	movs	r2, #0
 800d02e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d030:	68f8      	ldr	r0, [r7, #12]
 800d032:	f7ff ff58 	bl	800cee6 <get_ldnumber>
 800d036:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	da01      	bge.n	800d042 <find_volume+0x26>
 800d03e:	230b      	movs	r3, #11
 800d040:	e22d      	b.n	800d49e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d042:	4aa1      	ldr	r2, [pc, #644]	@ (800d2c8 <find_volume+0x2ac>)
 800d044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d04a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d04c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d101      	bne.n	800d056 <find_volume+0x3a>
 800d052:	230c      	movs	r3, #12
 800d054:	e223      	b.n	800d49e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d05a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d05c:	79fb      	ldrb	r3, [r7, #7]
 800d05e:	f023 0301 	bic.w	r3, r3, #1
 800d062:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d066:	781b      	ldrb	r3, [r3, #0]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d01a      	beq.n	800d0a2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d06c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d06e:	785b      	ldrb	r3, [r3, #1]
 800d070:	4618      	mov	r0, r3
 800d072:	f7fe fcfd 	bl	800ba70 <disk_status>
 800d076:	4603      	mov	r3, r0
 800d078:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d07c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d080:	f003 0301 	and.w	r3, r3, #1
 800d084:	2b00      	cmp	r3, #0
 800d086:	d10c      	bne.n	800d0a2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d088:	79fb      	ldrb	r3, [r7, #7]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d007      	beq.n	800d09e <find_volume+0x82>
 800d08e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d092:	f003 0304 	and.w	r3, r3, #4
 800d096:	2b00      	cmp	r3, #0
 800d098:	d001      	beq.n	800d09e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d09a:	230a      	movs	r3, #10
 800d09c:	e1ff      	b.n	800d49e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800d09e:	2300      	movs	r3, #0
 800d0a0:	e1fd      	b.n	800d49e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d0a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d0a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0aa:	b2da      	uxtb	r2, r3
 800d0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d0b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0b2:	785b      	ldrb	r3, [r3, #1]
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f7fe fcec 	bl	800ba92 <disk_initialize>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d0c0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d0c4:	f003 0301 	and.w	r3, r3, #1
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d001      	beq.n	800d0d0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d0cc:	2303      	movs	r3, #3
 800d0ce:	e1e6      	b.n	800d49e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d0d0:	79fb      	ldrb	r3, [r7, #7]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d007      	beq.n	800d0e6 <find_volume+0xca>
 800d0d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d0da:	f003 0304 	and.w	r3, r3, #4
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d001      	beq.n	800d0e6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d0e2:	230a      	movs	r3, #10
 800d0e4:	e1db      	b.n	800d49e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d0ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d0ec:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d0ee:	f7ff ff3f 	bl	800cf70 <check_fs>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d0f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d0fc:	2b02      	cmp	r3, #2
 800d0fe:	d149      	bne.n	800d194 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d100:	2300      	movs	r3, #0
 800d102:	643b      	str	r3, [r7, #64]	@ 0x40
 800d104:	e01e      	b.n	800d144 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d108:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d10c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d10e:	011b      	lsls	r3, r3, #4
 800d110:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800d114:	4413      	add	r3, r2
 800d116:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d11a:	3304      	adds	r3, #4
 800d11c:	781b      	ldrb	r3, [r3, #0]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d006      	beq.n	800d130 <find_volume+0x114>
 800d122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d124:	3308      	adds	r3, #8
 800d126:	4618      	mov	r0, r3
 800d128:	f7fe fd76 	bl	800bc18 <ld_dword>
 800d12c:	4602      	mov	r2, r0
 800d12e:	e000      	b.n	800d132 <find_volume+0x116>
 800d130:	2200      	movs	r2, #0
 800d132:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d134:	009b      	lsls	r3, r3, #2
 800d136:	3358      	adds	r3, #88	@ 0x58
 800d138:	443b      	add	r3, r7
 800d13a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d13e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d140:	3301      	adds	r3, #1
 800d142:	643b      	str	r3, [r7, #64]	@ 0x40
 800d144:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d146:	2b03      	cmp	r3, #3
 800d148:	d9dd      	bls.n	800d106 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d14a:	2300      	movs	r3, #0
 800d14c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800d14e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d150:	2b00      	cmp	r3, #0
 800d152:	d002      	beq.n	800d15a <find_volume+0x13e>
 800d154:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d156:	3b01      	subs	r3, #1
 800d158:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d15a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d15c:	009b      	lsls	r3, r3, #2
 800d15e:	3358      	adds	r3, #88	@ 0x58
 800d160:	443b      	add	r3, r7
 800d162:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d166:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d168:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d005      	beq.n	800d17a <find_volume+0x15e>
 800d16e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d170:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d172:	f7ff fefd 	bl	800cf70 <check_fs>
 800d176:	4603      	mov	r3, r0
 800d178:	e000      	b.n	800d17c <find_volume+0x160>
 800d17a:	2303      	movs	r3, #3
 800d17c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d180:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d184:	2b01      	cmp	r3, #1
 800d186:	d905      	bls.n	800d194 <find_volume+0x178>
 800d188:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d18a:	3301      	adds	r3, #1
 800d18c:	643b      	str	r3, [r7, #64]	@ 0x40
 800d18e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d190:	2b03      	cmp	r3, #3
 800d192:	d9e2      	bls.n	800d15a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d194:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d198:	2b04      	cmp	r3, #4
 800d19a:	d101      	bne.n	800d1a0 <find_volume+0x184>
 800d19c:	2301      	movs	r3, #1
 800d19e:	e17e      	b.n	800d49e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d1a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d1a4:	2b01      	cmp	r3, #1
 800d1a6:	d901      	bls.n	800d1ac <find_volume+0x190>
 800d1a8:	230d      	movs	r3, #13
 800d1aa:	e178      	b.n	800d49e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d1ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1ae:	3330      	adds	r3, #48	@ 0x30
 800d1b0:	330b      	adds	r3, #11
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f7fe fd18 	bl	800bbe8 <ld_word>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d1be:	d001      	beq.n	800d1c4 <find_volume+0x1a8>
 800d1c0:	230d      	movs	r3, #13
 800d1c2:	e16c      	b.n	800d49e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d1c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1c6:	3330      	adds	r3, #48	@ 0x30
 800d1c8:	3316      	adds	r3, #22
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7fe fd0c 	bl	800bbe8 <ld_word>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d1d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d106      	bne.n	800d1e8 <find_volume+0x1cc>
 800d1da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1dc:	3330      	adds	r3, #48	@ 0x30
 800d1de:	3324      	adds	r3, #36	@ 0x24
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f7fe fd19 	bl	800bc18 <ld_dword>
 800d1e6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800d1e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d1ec:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d1ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1f0:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800d1f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1f6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d1f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1fa:	789b      	ldrb	r3, [r3, #2]
 800d1fc:	2b01      	cmp	r3, #1
 800d1fe:	d005      	beq.n	800d20c <find_volume+0x1f0>
 800d200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d202:	789b      	ldrb	r3, [r3, #2]
 800d204:	2b02      	cmp	r3, #2
 800d206:	d001      	beq.n	800d20c <find_volume+0x1f0>
 800d208:	230d      	movs	r3, #13
 800d20a:	e148      	b.n	800d49e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d20c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d20e:	789b      	ldrb	r3, [r3, #2]
 800d210:	461a      	mov	r2, r3
 800d212:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d214:	fb02 f303 	mul.w	r3, r2, r3
 800d218:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d21a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d21c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d220:	461a      	mov	r2, r3
 800d222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d224:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d228:	895b      	ldrh	r3, [r3, #10]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d008      	beq.n	800d240 <find_volume+0x224>
 800d22e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d230:	895b      	ldrh	r3, [r3, #10]
 800d232:	461a      	mov	r2, r3
 800d234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d236:	895b      	ldrh	r3, [r3, #10]
 800d238:	3b01      	subs	r3, #1
 800d23a:	4013      	ands	r3, r2
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d001      	beq.n	800d244 <find_volume+0x228>
 800d240:	230d      	movs	r3, #13
 800d242:	e12c      	b.n	800d49e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d246:	3330      	adds	r3, #48	@ 0x30
 800d248:	3311      	adds	r3, #17
 800d24a:	4618      	mov	r0, r3
 800d24c:	f7fe fccc 	bl	800bbe8 <ld_word>
 800d250:	4603      	mov	r3, r0
 800d252:	461a      	mov	r2, r3
 800d254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d256:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d25a:	891b      	ldrh	r3, [r3, #8]
 800d25c:	f003 030f 	and.w	r3, r3, #15
 800d260:	b29b      	uxth	r3, r3
 800d262:	2b00      	cmp	r3, #0
 800d264:	d001      	beq.n	800d26a <find_volume+0x24e>
 800d266:	230d      	movs	r3, #13
 800d268:	e119      	b.n	800d49e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d26a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d26c:	3330      	adds	r3, #48	@ 0x30
 800d26e:	3313      	adds	r3, #19
 800d270:	4618      	mov	r0, r3
 800d272:	f7fe fcb9 	bl	800bbe8 <ld_word>
 800d276:	4603      	mov	r3, r0
 800d278:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d27a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d106      	bne.n	800d28e <find_volume+0x272>
 800d280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d282:	3330      	adds	r3, #48	@ 0x30
 800d284:	3320      	adds	r3, #32
 800d286:	4618      	mov	r0, r3
 800d288:	f7fe fcc6 	bl	800bc18 <ld_dword>
 800d28c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d28e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d290:	3330      	adds	r3, #48	@ 0x30
 800d292:	330e      	adds	r3, #14
 800d294:	4618      	mov	r0, r3
 800d296:	f7fe fca7 	bl	800bbe8 <ld_word>
 800d29a:	4603      	mov	r3, r0
 800d29c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d29e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d101      	bne.n	800d2a8 <find_volume+0x28c>
 800d2a4:	230d      	movs	r3, #13
 800d2a6:	e0fa      	b.n	800d49e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d2a8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d2aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2ac:	4413      	add	r3, r2
 800d2ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d2b0:	8912      	ldrh	r2, [r2, #8]
 800d2b2:	0912      	lsrs	r2, r2, #4
 800d2b4:	b292      	uxth	r2, r2
 800d2b6:	4413      	add	r3, r2
 800d2b8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d2ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d2bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	d204      	bcs.n	800d2cc <find_volume+0x2b0>
 800d2c2:	230d      	movs	r3, #13
 800d2c4:	e0eb      	b.n	800d49e <find_volume+0x482>
 800d2c6:	bf00      	nop
 800d2c8:	20006b60 	.word	0x20006b60
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d2cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d2ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2d0:	1ad3      	subs	r3, r2, r3
 800d2d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d2d4:	8952      	ldrh	r2, [r2, #10]
 800d2d6:	fbb3 f3f2 	udiv	r3, r3, r2
 800d2da:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d2dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d101      	bne.n	800d2e6 <find_volume+0x2ca>
 800d2e2:	230d      	movs	r3, #13
 800d2e4:	e0db      	b.n	800d49e <find_volume+0x482>
		fmt = FS_FAT32;
 800d2e6:	2303      	movs	r3, #3
 800d2e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d2ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ee:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d2f2:	4293      	cmp	r3, r2
 800d2f4:	d802      	bhi.n	800d2fc <find_volume+0x2e0>
 800d2f6:	2302      	movs	r3, #2
 800d2f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d2fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2fe:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800d302:	4293      	cmp	r3, r2
 800d304:	d802      	bhi.n	800d30c <find_volume+0x2f0>
 800d306:	2301      	movs	r3, #1
 800d308:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d30c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d30e:	1c9a      	adds	r2, r3, #2
 800d310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d312:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800d314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d316:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d318:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d31a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d31c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d31e:	441a      	add	r2, r3
 800d320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d322:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800d324:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d328:	441a      	add	r2, r3
 800d32a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d32c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800d32e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d332:	2b03      	cmp	r3, #3
 800d334:	d11e      	bne.n	800d374 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d338:	3330      	adds	r3, #48	@ 0x30
 800d33a:	332a      	adds	r3, #42	@ 0x2a
 800d33c:	4618      	mov	r0, r3
 800d33e:	f7fe fc53 	bl	800bbe8 <ld_word>
 800d342:	4603      	mov	r3, r0
 800d344:	2b00      	cmp	r3, #0
 800d346:	d001      	beq.n	800d34c <find_volume+0x330>
 800d348:	230d      	movs	r3, #13
 800d34a:	e0a8      	b.n	800d49e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d34c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d34e:	891b      	ldrh	r3, [r3, #8]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d001      	beq.n	800d358 <find_volume+0x33c>
 800d354:	230d      	movs	r3, #13
 800d356:	e0a2      	b.n	800d49e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d35a:	3330      	adds	r3, #48	@ 0x30
 800d35c:	332c      	adds	r3, #44	@ 0x2c
 800d35e:	4618      	mov	r0, r3
 800d360:	f7fe fc5a 	bl	800bc18 <ld_dword>
 800d364:	4602      	mov	r2, r0
 800d366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d368:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d36a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d36c:	695b      	ldr	r3, [r3, #20]
 800d36e:	009b      	lsls	r3, r3, #2
 800d370:	647b      	str	r3, [r7, #68]	@ 0x44
 800d372:	e01f      	b.n	800d3b4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d376:	891b      	ldrh	r3, [r3, #8]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d101      	bne.n	800d380 <find_volume+0x364>
 800d37c:	230d      	movs	r3, #13
 800d37e:	e08e      	b.n	800d49e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d382:	6a1a      	ldr	r2, [r3, #32]
 800d384:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d386:	441a      	add	r2, r3
 800d388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d38a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d38c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d390:	2b02      	cmp	r3, #2
 800d392:	d103      	bne.n	800d39c <find_volume+0x380>
 800d394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d396:	695b      	ldr	r3, [r3, #20]
 800d398:	005b      	lsls	r3, r3, #1
 800d39a:	e00a      	b.n	800d3b2 <find_volume+0x396>
 800d39c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d39e:	695a      	ldr	r2, [r3, #20]
 800d3a0:	4613      	mov	r3, r2
 800d3a2:	005b      	lsls	r3, r3, #1
 800d3a4:	4413      	add	r3, r2
 800d3a6:	085a      	lsrs	r2, r3, #1
 800d3a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3aa:	695b      	ldr	r3, [r3, #20]
 800d3ac:	f003 0301 	and.w	r3, r3, #1
 800d3b0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d3b2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d3b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3b6:	699a      	ldr	r2, [r3, #24]
 800d3b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d3ba:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800d3be:	0a5b      	lsrs	r3, r3, #9
 800d3c0:	429a      	cmp	r2, r3
 800d3c2:	d201      	bcs.n	800d3c8 <find_volume+0x3ac>
 800d3c4:	230d      	movs	r3, #13
 800d3c6:	e06a      	b.n	800d49e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3ca:	f04f 32ff 	mov.w	r2, #4294967295
 800d3ce:	611a      	str	r2, [r3, #16]
 800d3d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3d2:	691a      	ldr	r2, [r3, #16]
 800d3d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3d6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d3d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3da:	2280      	movs	r2, #128	@ 0x80
 800d3dc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d3de:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d3e2:	2b03      	cmp	r3, #3
 800d3e4:	d149      	bne.n	800d47a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d3e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3e8:	3330      	adds	r3, #48	@ 0x30
 800d3ea:	3330      	adds	r3, #48	@ 0x30
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f7fe fbfb 	bl	800bbe8 <ld_word>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	d140      	bne.n	800d47a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d3f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3fa:	3301      	adds	r3, #1
 800d3fc:	4619      	mov	r1, r3
 800d3fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d400:	f7fe fea2 	bl	800c148 <move_window>
 800d404:	4603      	mov	r3, r0
 800d406:	2b00      	cmp	r3, #0
 800d408:	d137      	bne.n	800d47a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800d40a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d40c:	2200      	movs	r2, #0
 800d40e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d412:	3330      	adds	r3, #48	@ 0x30
 800d414:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d418:	4618      	mov	r0, r3
 800d41a:	f7fe fbe5 	bl	800bbe8 <ld_word>
 800d41e:	4603      	mov	r3, r0
 800d420:	461a      	mov	r2, r3
 800d422:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d426:	429a      	cmp	r2, r3
 800d428:	d127      	bne.n	800d47a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d42a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d42c:	3330      	adds	r3, #48	@ 0x30
 800d42e:	4618      	mov	r0, r3
 800d430:	f7fe fbf2 	bl	800bc18 <ld_dword>
 800d434:	4603      	mov	r3, r0
 800d436:	4a1c      	ldr	r2, [pc, #112]	@ (800d4a8 <find_volume+0x48c>)
 800d438:	4293      	cmp	r3, r2
 800d43a:	d11e      	bne.n	800d47a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d43c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d43e:	3330      	adds	r3, #48	@ 0x30
 800d440:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d444:	4618      	mov	r0, r3
 800d446:	f7fe fbe7 	bl	800bc18 <ld_dword>
 800d44a:	4603      	mov	r3, r0
 800d44c:	4a17      	ldr	r2, [pc, #92]	@ (800d4ac <find_volume+0x490>)
 800d44e:	4293      	cmp	r3, r2
 800d450:	d113      	bne.n	800d47a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d454:	3330      	adds	r3, #48	@ 0x30
 800d456:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800d45a:	4618      	mov	r0, r3
 800d45c:	f7fe fbdc 	bl	800bc18 <ld_dword>
 800d460:	4602      	mov	r2, r0
 800d462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d464:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d468:	3330      	adds	r3, #48	@ 0x30
 800d46a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800d46e:	4618      	mov	r0, r3
 800d470:	f7fe fbd2 	bl	800bc18 <ld_dword>
 800d474:	4602      	mov	r2, r0
 800d476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d478:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d47a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d47c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800d480:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d482:	4b0b      	ldr	r3, [pc, #44]	@ (800d4b0 <find_volume+0x494>)
 800d484:	881b      	ldrh	r3, [r3, #0]
 800d486:	3301      	adds	r3, #1
 800d488:	b29a      	uxth	r2, r3
 800d48a:	4b09      	ldr	r3, [pc, #36]	@ (800d4b0 <find_volume+0x494>)
 800d48c:	801a      	strh	r2, [r3, #0]
 800d48e:	4b08      	ldr	r3, [pc, #32]	@ (800d4b0 <find_volume+0x494>)
 800d490:	881a      	ldrh	r2, [r3, #0]
 800d492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d494:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d496:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d498:	f7fe fdee 	bl	800c078 <clear_lock>
#endif
	return FR_OK;
 800d49c:	2300      	movs	r3, #0
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3758      	adds	r7, #88	@ 0x58
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}
 800d4a6:	bf00      	nop
 800d4a8:	41615252 	.word	0x41615252
 800d4ac:	61417272 	.word	0x61417272
 800d4b0:	20006b64 	.word	0x20006b64

0800d4b4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b084      	sub	sp, #16
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
 800d4bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d4be:	2309      	movs	r3, #9
 800d4c0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d01c      	beq.n	800d502 <validate+0x4e>
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d018      	beq.n	800d502 <validate+0x4e>
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	781b      	ldrb	r3, [r3, #0]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d013      	beq.n	800d502 <validate+0x4e>
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	889a      	ldrh	r2, [r3, #4]
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	88db      	ldrh	r3, [r3, #6]
 800d4e4:	429a      	cmp	r2, r3
 800d4e6:	d10c      	bne.n	800d502 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	785b      	ldrb	r3, [r3, #1]
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f7fe fabe 	bl	800ba70 <disk_status>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	f003 0301 	and.w	r3, r3, #1
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d101      	bne.n	800d502 <validate+0x4e>
			res = FR_OK;
 800d4fe:	2300      	movs	r3, #0
 800d500:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d502:	7bfb      	ldrb	r3, [r7, #15]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d102      	bne.n	800d50e <validate+0x5a>
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	e000      	b.n	800d510 <validate+0x5c>
 800d50e:	2300      	movs	r3, #0
 800d510:	683a      	ldr	r2, [r7, #0]
 800d512:	6013      	str	r3, [r2, #0]
	return res;
 800d514:	7bfb      	ldrb	r3, [r7, #15]
}
 800d516:	4618      	mov	r0, r3
 800d518:	3710      	adds	r7, #16
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}
	...

0800d520 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b088      	sub	sp, #32
 800d524:	af00      	add	r7, sp, #0
 800d526:	60f8      	str	r0, [r7, #12]
 800d528:	60b9      	str	r1, [r7, #8]
 800d52a:	4613      	mov	r3, r2
 800d52c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d52e:	68bb      	ldr	r3, [r7, #8]
 800d530:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d532:	f107 0310 	add.w	r3, r7, #16
 800d536:	4618      	mov	r0, r3
 800d538:	f7ff fcd5 	bl	800cee6 <get_ldnumber>
 800d53c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d53e:	69fb      	ldr	r3, [r7, #28]
 800d540:	2b00      	cmp	r3, #0
 800d542:	da01      	bge.n	800d548 <f_mount+0x28>
 800d544:	230b      	movs	r3, #11
 800d546:	e02b      	b.n	800d5a0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d548:	4a17      	ldr	r2, [pc, #92]	@ (800d5a8 <f_mount+0x88>)
 800d54a:	69fb      	ldr	r3, [r7, #28]
 800d54c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d550:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d552:	69bb      	ldr	r3, [r7, #24]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d005      	beq.n	800d564 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d558:	69b8      	ldr	r0, [r7, #24]
 800d55a:	f7fe fd8d 	bl	800c078 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d55e:	69bb      	ldr	r3, [r7, #24]
 800d560:	2200      	movs	r2, #0
 800d562:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d002      	beq.n	800d570 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	2200      	movs	r2, #0
 800d56e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d570:	68fa      	ldr	r2, [r7, #12]
 800d572:	490d      	ldr	r1, [pc, #52]	@ (800d5a8 <f_mount+0x88>)
 800d574:	69fb      	ldr	r3, [r7, #28]
 800d576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d002      	beq.n	800d586 <f_mount+0x66>
 800d580:	79fb      	ldrb	r3, [r7, #7]
 800d582:	2b01      	cmp	r3, #1
 800d584:	d001      	beq.n	800d58a <f_mount+0x6a>
 800d586:	2300      	movs	r3, #0
 800d588:	e00a      	b.n	800d5a0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d58a:	f107 010c 	add.w	r1, r7, #12
 800d58e:	f107 0308 	add.w	r3, r7, #8
 800d592:	2200      	movs	r2, #0
 800d594:	4618      	mov	r0, r3
 800d596:	f7ff fd41 	bl	800d01c <find_volume>
 800d59a:	4603      	mov	r3, r0
 800d59c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d59e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3720      	adds	r7, #32
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}
 800d5a8:	20006b60 	.word	0x20006b60

0800d5ac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b098      	sub	sp, #96	@ 0x60
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	60f8      	str	r0, [r7, #12]
 800d5b4:	60b9      	str	r1, [r7, #8]
 800d5b6:	4613      	mov	r3, r2
 800d5b8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d101      	bne.n	800d5c4 <f_open+0x18>
 800d5c0:	2309      	movs	r3, #9
 800d5c2:	e1a9      	b.n	800d918 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d5c4:	79fb      	ldrb	r3, [r7, #7]
 800d5c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d5ca:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d5cc:	79fa      	ldrb	r2, [r7, #7]
 800d5ce:	f107 0110 	add.w	r1, r7, #16
 800d5d2:	f107 0308 	add.w	r3, r7, #8
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f7ff fd20 	bl	800d01c <find_volume>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800d5e2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	f040 818d 	bne.w	800d906 <f_open+0x35a>
		dj.obj.fs = fs;
 800d5ec:	693b      	ldr	r3, [r7, #16]
 800d5ee:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d5f0:	68ba      	ldr	r2, [r7, #8]
 800d5f2:	f107 0314 	add.w	r3, r7, #20
 800d5f6:	4611      	mov	r1, r2
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f7ff fc03 	bl	800ce04 <follow_path>
 800d5fe:	4603      	mov	r3, r0
 800d600:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d604:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d118      	bne.n	800d63e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d60c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d610:	b25b      	sxtb	r3, r3
 800d612:	2b00      	cmp	r3, #0
 800d614:	da03      	bge.n	800d61e <f_open+0x72>
				res = FR_INVALID_NAME;
 800d616:	2306      	movs	r3, #6
 800d618:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d61c:	e00f      	b.n	800d63e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d61e:	79fb      	ldrb	r3, [r7, #7]
 800d620:	2b01      	cmp	r3, #1
 800d622:	bf8c      	ite	hi
 800d624:	2301      	movhi	r3, #1
 800d626:	2300      	movls	r3, #0
 800d628:	b2db      	uxtb	r3, r3
 800d62a:	461a      	mov	r2, r3
 800d62c:	f107 0314 	add.w	r3, r7, #20
 800d630:	4611      	mov	r1, r2
 800d632:	4618      	mov	r0, r3
 800d634:	f7fe fbd8 	bl	800bde8 <chk_lock>
 800d638:	4603      	mov	r3, r0
 800d63a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d63e:	79fb      	ldrb	r3, [r7, #7]
 800d640:	f003 031c 	and.w	r3, r3, #28
 800d644:	2b00      	cmp	r3, #0
 800d646:	d07f      	beq.n	800d748 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800d648:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d017      	beq.n	800d680 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d650:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d654:	2b04      	cmp	r3, #4
 800d656:	d10e      	bne.n	800d676 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d658:	f7fe fc22 	bl	800bea0 <enq_lock>
 800d65c:	4603      	mov	r3, r0
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d006      	beq.n	800d670 <f_open+0xc4>
 800d662:	f107 0314 	add.w	r3, r7, #20
 800d666:	4618      	mov	r0, r3
 800d668:	f7ff fb06 	bl	800cc78 <dir_register>
 800d66c:	4603      	mov	r3, r0
 800d66e:	e000      	b.n	800d672 <f_open+0xc6>
 800d670:	2312      	movs	r3, #18
 800d672:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d676:	79fb      	ldrb	r3, [r7, #7]
 800d678:	f043 0308 	orr.w	r3, r3, #8
 800d67c:	71fb      	strb	r3, [r7, #7]
 800d67e:	e010      	b.n	800d6a2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d680:	7ebb      	ldrb	r3, [r7, #26]
 800d682:	f003 0311 	and.w	r3, r3, #17
 800d686:	2b00      	cmp	r3, #0
 800d688:	d003      	beq.n	800d692 <f_open+0xe6>
					res = FR_DENIED;
 800d68a:	2307      	movs	r3, #7
 800d68c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d690:	e007      	b.n	800d6a2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d692:	79fb      	ldrb	r3, [r7, #7]
 800d694:	f003 0304 	and.w	r3, r3, #4
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d002      	beq.n	800d6a2 <f_open+0xf6>
 800d69c:	2308      	movs	r3, #8
 800d69e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d6a2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d168      	bne.n	800d77c <f_open+0x1d0>
 800d6aa:	79fb      	ldrb	r3, [r7, #7]
 800d6ac:	f003 0308 	and.w	r3, r3, #8
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d063      	beq.n	800d77c <f_open+0x1d0>
				dw = GET_FATTIME();
 800d6b4:	f7fe f9d4 	bl	800ba60 <get_fattime>
 800d6b8:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d6ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6bc:	330e      	adds	r3, #14
 800d6be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f7fe fae7 	bl	800bc94 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d6c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6c8:	3316      	adds	r3, #22
 800d6ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f7fe fae1 	bl	800bc94 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d6d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6d4:	330b      	adds	r3, #11
 800d6d6:	2220      	movs	r2, #32
 800d6d8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d6da:	693b      	ldr	r3, [r7, #16]
 800d6dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d6de:	4611      	mov	r1, r2
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f7ff fa35 	bl	800cb50 <ld_clust>
 800d6e6:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d6e8:	693b      	ldr	r3, [r7, #16]
 800d6ea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f7ff fa4d 	bl	800cb8e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d6f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6f6:	331c      	adds	r3, #28
 800d6f8:	2100      	movs	r1, #0
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f7fe faca 	bl	800bc94 <st_dword>
					fs->wflag = 1;
 800d700:	693b      	ldr	r3, [r7, #16]
 800d702:	2201      	movs	r2, #1
 800d704:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d706:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d037      	beq.n	800d77c <f_open+0x1d0>
						dw = fs->winsect;
 800d70c:	693b      	ldr	r3, [r7, #16]
 800d70e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d710:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d712:	f107 0314 	add.w	r3, r7, #20
 800d716:	2200      	movs	r2, #0
 800d718:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d71a:	4618      	mov	r0, r3
 800d71c:	f7fe ff60 	bl	800c5e0 <remove_chain>
 800d720:	4603      	mov	r3, r0
 800d722:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800d726:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d126      	bne.n	800d77c <f_open+0x1d0>
							res = move_window(fs, dw);
 800d72e:	693b      	ldr	r3, [r7, #16]
 800d730:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d732:	4618      	mov	r0, r3
 800d734:	f7fe fd08 	bl	800c148 <move_window>
 800d738:	4603      	mov	r3, r0
 800d73a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d742:	3a01      	subs	r2, #1
 800d744:	60da      	str	r2, [r3, #12]
 800d746:	e019      	b.n	800d77c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d748:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d115      	bne.n	800d77c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d750:	7ebb      	ldrb	r3, [r7, #26]
 800d752:	f003 0310 	and.w	r3, r3, #16
 800d756:	2b00      	cmp	r3, #0
 800d758:	d003      	beq.n	800d762 <f_open+0x1b6>
					res = FR_NO_FILE;
 800d75a:	2304      	movs	r3, #4
 800d75c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d760:	e00c      	b.n	800d77c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d762:	79fb      	ldrb	r3, [r7, #7]
 800d764:	f003 0302 	and.w	r3, r3, #2
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d007      	beq.n	800d77c <f_open+0x1d0>
 800d76c:	7ebb      	ldrb	r3, [r7, #26]
 800d76e:	f003 0301 	and.w	r3, r3, #1
 800d772:	2b00      	cmp	r3, #0
 800d774:	d002      	beq.n	800d77c <f_open+0x1d0>
						res = FR_DENIED;
 800d776:	2307      	movs	r3, #7
 800d778:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d77c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d780:	2b00      	cmp	r3, #0
 800d782:	d126      	bne.n	800d7d2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d784:	79fb      	ldrb	r3, [r7, #7]
 800d786:	f003 0308 	and.w	r3, r3, #8
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d003      	beq.n	800d796 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800d78e:	79fb      	ldrb	r3, [r7, #7]
 800d790:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d794:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d796:	693b      	ldr	r3, [r7, #16]
 800d798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800d79e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d7a4:	79fb      	ldrb	r3, [r7, #7]
 800d7a6:	2b01      	cmp	r3, #1
 800d7a8:	bf8c      	ite	hi
 800d7aa:	2301      	movhi	r3, #1
 800d7ac:	2300      	movls	r3, #0
 800d7ae:	b2db      	uxtb	r3, r3
 800d7b0:	461a      	mov	r2, r3
 800d7b2:	f107 0314 	add.w	r3, r7, #20
 800d7b6:	4611      	mov	r1, r2
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f7fe fb93 	bl	800bee4 <inc_lock>
 800d7be:	4602      	mov	r2, r0
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	691b      	ldr	r3, [r3, #16]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d102      	bne.n	800d7d2 <f_open+0x226>
 800d7cc:	2302      	movs	r3, #2
 800d7ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d7d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	f040 8095 	bne.w	800d906 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d7dc:	693b      	ldr	r3, [r7, #16]
 800d7de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d7e0:	4611      	mov	r1, r2
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	f7ff f9b4 	bl	800cb50 <ld_clust>
 800d7e8:	4602      	mov	r2, r0
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d7ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7f0:	331c      	adds	r3, #28
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f7fe fa10 	bl	800bc18 <ld_dword>
 800d7f8:	4602      	mov	r2, r0
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2200      	movs	r2, #0
 800d802:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d804:	693a      	ldr	r2, [r7, #16]
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d80a:	693b      	ldr	r3, [r7, #16]
 800d80c:	88da      	ldrh	r2, [r3, #6]
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	79fa      	ldrb	r2, [r7, #7]
 800d816:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	2200      	movs	r2, #0
 800d81c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	2200      	movs	r2, #0
 800d822:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	2200      	movs	r2, #0
 800d828:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	3330      	adds	r3, #48	@ 0x30
 800d82e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d832:	2100      	movs	r1, #0
 800d834:	4618      	mov	r0, r3
 800d836:	f7fe fa7a 	bl	800bd2e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d83a:	79fb      	ldrb	r3, [r7, #7]
 800d83c:	f003 0320 	and.w	r3, r3, #32
 800d840:	2b00      	cmp	r3, #0
 800d842:	d060      	beq.n	800d906 <f_open+0x35a>
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	68db      	ldr	r3, [r3, #12]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d05c      	beq.n	800d906 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	68da      	ldr	r2, [r3, #12]
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d854:	693b      	ldr	r3, [r7, #16]
 800d856:	895b      	ldrh	r3, [r3, #10]
 800d858:	025b      	lsls	r3, r3, #9
 800d85a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	689b      	ldr	r3, [r3, #8]
 800d860:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	68db      	ldr	r3, [r3, #12]
 800d866:	657b      	str	r3, [r7, #84]	@ 0x54
 800d868:	e016      	b.n	800d898 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d86e:	4618      	mov	r0, r3
 800d870:	f7fe fd25 	bl	800c2be <get_fat>
 800d874:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d876:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d878:	2b01      	cmp	r3, #1
 800d87a:	d802      	bhi.n	800d882 <f_open+0x2d6>
 800d87c:	2302      	movs	r3, #2
 800d87e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d882:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d884:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d888:	d102      	bne.n	800d890 <f_open+0x2e4>
 800d88a:	2301      	movs	r3, #1
 800d88c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d890:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d892:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d894:	1ad3      	subs	r3, r2, r3
 800d896:	657b      	str	r3, [r7, #84]	@ 0x54
 800d898:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d103      	bne.n	800d8a8 <f_open+0x2fc>
 800d8a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d8a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d8a4:	429a      	cmp	r2, r3
 800d8a6:	d8e0      	bhi.n	800d86a <f_open+0x2be>
				}
				fp->clust = clst;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d8ac:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d8ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d127      	bne.n	800d906 <f_open+0x35a>
 800d8b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d022      	beq.n	800d906 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d8c0:	693b      	ldr	r3, [r7, #16]
 800d8c2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f7fe fcdb 	bl	800c280 <clust2sect>
 800d8ca:	6478      	str	r0, [r7, #68]	@ 0x44
 800d8cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d103      	bne.n	800d8da <f_open+0x32e>
						res = FR_INT_ERR;
 800d8d2:	2302      	movs	r3, #2
 800d8d4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d8d8:	e015      	b.n	800d906 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d8da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8dc:	0a5a      	lsrs	r2, r3, #9
 800d8de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d8e0:	441a      	add	r2, r3
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d8e6:	693b      	ldr	r3, [r7, #16]
 800d8e8:	7858      	ldrb	r0, [r3, #1]
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	6a1a      	ldr	r2, [r3, #32]
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	f7fe f8e2 	bl	800babe <disk_read>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d002      	beq.n	800d906 <f_open+0x35a>
 800d900:	2301      	movs	r3, #1
 800d902:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d906:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d002      	beq.n	800d914 <f_open+0x368>
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	2200      	movs	r2, #0
 800d912:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d914:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800d918:	4618      	mov	r0, r3
 800d91a:	3760      	adds	r7, #96	@ 0x60
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}

0800d920 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b08e      	sub	sp, #56	@ 0x38
 800d924:	af00      	add	r7, sp, #0
 800d926:	60f8      	str	r0, [r7, #12]
 800d928:	60b9      	str	r1, [r7, #8]
 800d92a:	607a      	str	r2, [r7, #4]
 800d92c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	2200      	movs	r2, #0
 800d936:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	f107 0214 	add.w	r2, r7, #20
 800d93e:	4611      	mov	r1, r2
 800d940:	4618      	mov	r0, r3
 800d942:	f7ff fdb7 	bl	800d4b4 <validate>
 800d946:	4603      	mov	r3, r0
 800d948:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d94c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d950:	2b00      	cmp	r3, #0
 800d952:	d107      	bne.n	800d964 <f_read+0x44>
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	7d5b      	ldrb	r3, [r3, #21]
 800d958:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d95c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d960:	2b00      	cmp	r3, #0
 800d962:	d002      	beq.n	800d96a <f_read+0x4a>
 800d964:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d968:	e115      	b.n	800db96 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	7d1b      	ldrb	r3, [r3, #20]
 800d96e:	f003 0301 	and.w	r3, r3, #1
 800d972:	2b00      	cmp	r3, #0
 800d974:	d101      	bne.n	800d97a <f_read+0x5a>
 800d976:	2307      	movs	r3, #7
 800d978:	e10d      	b.n	800db96 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	68da      	ldr	r2, [r3, #12]
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	699b      	ldr	r3, [r3, #24]
 800d982:	1ad3      	subs	r3, r2, r3
 800d984:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d986:	687a      	ldr	r2, [r7, #4]
 800d988:	6a3b      	ldr	r3, [r7, #32]
 800d98a:	429a      	cmp	r2, r3
 800d98c:	f240 80fe 	bls.w	800db8c <f_read+0x26c>
 800d990:	6a3b      	ldr	r3, [r7, #32]
 800d992:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d994:	e0fa      	b.n	800db8c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	699b      	ldr	r3, [r3, #24]
 800d99a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	f040 80c6 	bne.w	800db30 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	699b      	ldr	r3, [r3, #24]
 800d9a8:	0a5b      	lsrs	r3, r3, #9
 800d9aa:	697a      	ldr	r2, [r7, #20]
 800d9ac:	8952      	ldrh	r2, [r2, #10]
 800d9ae:	3a01      	subs	r2, #1
 800d9b0:	4013      	ands	r3, r2
 800d9b2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d9b4:	69fb      	ldr	r3, [r7, #28]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d12f      	bne.n	800da1a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	699b      	ldr	r3, [r3, #24]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d103      	bne.n	800d9ca <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	689b      	ldr	r3, [r3, #8]
 800d9c6:	633b      	str	r3, [r7, #48]	@ 0x30
 800d9c8:	e013      	b.n	800d9f2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d007      	beq.n	800d9e2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	699b      	ldr	r3, [r3, #24]
 800d9d6:	4619      	mov	r1, r3
 800d9d8:	68f8      	ldr	r0, [r7, #12]
 800d9da:	f7fe fefe 	bl	800c7da <clmt_clust>
 800d9de:	6338      	str	r0, [r7, #48]	@ 0x30
 800d9e0:	e007      	b.n	800d9f2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d9e2:	68fa      	ldr	r2, [r7, #12]
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	69db      	ldr	r3, [r3, #28]
 800d9e8:	4619      	mov	r1, r3
 800d9ea:	4610      	mov	r0, r2
 800d9ec:	f7fe fc67 	bl	800c2be <get_fat>
 800d9f0:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d9f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9f4:	2b01      	cmp	r3, #1
 800d9f6:	d804      	bhi.n	800da02 <f_read+0xe2>
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	2202      	movs	r2, #2
 800d9fc:	755a      	strb	r2, [r3, #21]
 800d9fe:	2302      	movs	r3, #2
 800da00:	e0c9      	b.n	800db96 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800da02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da08:	d104      	bne.n	800da14 <f_read+0xf4>
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	2201      	movs	r2, #1
 800da0e:	755a      	strb	r2, [r3, #21]
 800da10:	2301      	movs	r3, #1
 800da12:	e0c0      	b.n	800db96 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da18:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800da1a:	697a      	ldr	r2, [r7, #20]
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	69db      	ldr	r3, [r3, #28]
 800da20:	4619      	mov	r1, r3
 800da22:	4610      	mov	r0, r2
 800da24:	f7fe fc2c 	bl	800c280 <clust2sect>
 800da28:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800da2a:	69bb      	ldr	r3, [r7, #24]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d104      	bne.n	800da3a <f_read+0x11a>
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	2202      	movs	r2, #2
 800da34:	755a      	strb	r2, [r3, #21]
 800da36:	2302      	movs	r3, #2
 800da38:	e0ad      	b.n	800db96 <f_read+0x276>
			sect += csect;
 800da3a:	69ba      	ldr	r2, [r7, #24]
 800da3c:	69fb      	ldr	r3, [r7, #28]
 800da3e:	4413      	add	r3, r2
 800da40:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	0a5b      	lsrs	r3, r3, #9
 800da46:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800da48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d039      	beq.n	800dac2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800da4e:	69fa      	ldr	r2, [r7, #28]
 800da50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da52:	4413      	add	r3, r2
 800da54:	697a      	ldr	r2, [r7, #20]
 800da56:	8952      	ldrh	r2, [r2, #10]
 800da58:	4293      	cmp	r3, r2
 800da5a:	d905      	bls.n	800da68 <f_read+0x148>
					cc = fs->csize - csect;
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	895b      	ldrh	r3, [r3, #10]
 800da60:	461a      	mov	r2, r3
 800da62:	69fb      	ldr	r3, [r7, #28]
 800da64:	1ad3      	subs	r3, r2, r3
 800da66:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800da68:	697b      	ldr	r3, [r7, #20]
 800da6a:	7858      	ldrb	r0, [r3, #1]
 800da6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da6e:	69ba      	ldr	r2, [r7, #24]
 800da70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800da72:	f7fe f824 	bl	800babe <disk_read>
 800da76:	4603      	mov	r3, r0
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d004      	beq.n	800da86 <f_read+0x166>
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	2201      	movs	r2, #1
 800da80:	755a      	strb	r2, [r3, #21]
 800da82:	2301      	movs	r3, #1
 800da84:	e087      	b.n	800db96 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	7d1b      	ldrb	r3, [r3, #20]
 800da8a:	b25b      	sxtb	r3, r3
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	da14      	bge.n	800daba <f_read+0x19a>
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	6a1a      	ldr	r2, [r3, #32]
 800da94:	69bb      	ldr	r3, [r7, #24]
 800da96:	1ad3      	subs	r3, r2, r3
 800da98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d90d      	bls.n	800daba <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	6a1a      	ldr	r2, [r3, #32]
 800daa2:	69bb      	ldr	r3, [r7, #24]
 800daa4:	1ad3      	subs	r3, r2, r3
 800daa6:	025b      	lsls	r3, r3, #9
 800daa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800daaa:	18d0      	adds	r0, r2, r3
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	3330      	adds	r3, #48	@ 0x30
 800dab0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dab4:	4619      	mov	r1, r3
 800dab6:	f7fe f919 	bl	800bcec <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800daba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dabc:	025b      	lsls	r3, r3, #9
 800dabe:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800dac0:	e050      	b.n	800db64 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	6a1b      	ldr	r3, [r3, #32]
 800dac6:	69ba      	ldr	r2, [r7, #24]
 800dac8:	429a      	cmp	r2, r3
 800daca:	d02e      	beq.n	800db2a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	7d1b      	ldrb	r3, [r3, #20]
 800dad0:	b25b      	sxtb	r3, r3
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	da18      	bge.n	800db08 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dad6:	697b      	ldr	r3, [r7, #20]
 800dad8:	7858      	ldrb	r0, [r3, #1]
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	6a1a      	ldr	r2, [r3, #32]
 800dae4:	2301      	movs	r3, #1
 800dae6:	f7fe f819 	bl	800bb1c <disk_write>
 800daea:	4603      	mov	r3, r0
 800daec:	2b00      	cmp	r3, #0
 800daee:	d004      	beq.n	800dafa <f_read+0x1da>
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	2201      	movs	r2, #1
 800daf4:	755a      	strb	r2, [r3, #21]
 800daf6:	2301      	movs	r3, #1
 800daf8:	e04d      	b.n	800db96 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	7d1b      	ldrb	r3, [r3, #20]
 800dafe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db02:	b2da      	uxtb	r2, r3
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	7858      	ldrb	r0, [r3, #1]
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800db12:	2301      	movs	r3, #1
 800db14:	69ba      	ldr	r2, [r7, #24]
 800db16:	f7fd ffd2 	bl	800babe <disk_read>
 800db1a:	4603      	mov	r3, r0
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d004      	beq.n	800db2a <f_read+0x20a>
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	2201      	movs	r2, #1
 800db24:	755a      	strb	r2, [r3, #21]
 800db26:	2301      	movs	r3, #1
 800db28:	e035      	b.n	800db96 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	69ba      	ldr	r2, [r7, #24]
 800db2e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	699b      	ldr	r3, [r3, #24]
 800db34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db38:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800db3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800db3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	429a      	cmp	r2, r3
 800db44:	d901      	bls.n	800db4a <f_read+0x22a>
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	699b      	ldr	r3, [r3, #24]
 800db54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db58:	4413      	add	r3, r2
 800db5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800db5c:	4619      	mov	r1, r3
 800db5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800db60:	f7fe f8c4 	bl	800bcec <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800db64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db68:	4413      	add	r3, r2
 800db6a:	627b      	str	r3, [r7, #36]	@ 0x24
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	699a      	ldr	r2, [r3, #24]
 800db70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db72:	441a      	add	r2, r3
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	619a      	str	r2, [r3, #24]
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	681a      	ldr	r2, [r3, #0]
 800db7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db7e:	441a      	add	r2, r3
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	601a      	str	r2, [r3, #0]
 800db84:	687a      	ldr	r2, [r7, #4]
 800db86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db88:	1ad3      	subs	r3, r2, r3
 800db8a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	f47f af01 	bne.w	800d996 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800db94:	2300      	movs	r3, #0
}
 800db96:	4618      	mov	r0, r3
 800db98:	3738      	adds	r7, #56	@ 0x38
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}

0800db9e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800db9e:	b580      	push	{r7, lr}
 800dba0:	b08c      	sub	sp, #48	@ 0x30
 800dba2:	af00      	add	r7, sp, #0
 800dba4:	60f8      	str	r0, [r7, #12]
 800dba6:	60b9      	str	r1, [r7, #8]
 800dba8:	607a      	str	r2, [r7, #4]
 800dbaa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	f107 0210 	add.w	r2, r7, #16
 800dbbc:	4611      	mov	r1, r2
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f7ff fc78 	bl	800d4b4 <validate>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800dbca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d107      	bne.n	800dbe2 <f_write+0x44>
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	7d5b      	ldrb	r3, [r3, #21]
 800dbd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800dbda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d002      	beq.n	800dbe8 <f_write+0x4a>
 800dbe2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dbe6:	e14b      	b.n	800de80 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	7d1b      	ldrb	r3, [r3, #20]
 800dbec:	f003 0302 	and.w	r3, r3, #2
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d101      	bne.n	800dbf8 <f_write+0x5a>
 800dbf4:	2307      	movs	r3, #7
 800dbf6:	e143      	b.n	800de80 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	699a      	ldr	r2, [r3, #24]
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	441a      	add	r2, r3
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	699b      	ldr	r3, [r3, #24]
 800dc04:	429a      	cmp	r2, r3
 800dc06:	f080 812d 	bcs.w	800de64 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	699b      	ldr	r3, [r3, #24]
 800dc0e:	43db      	mvns	r3, r3
 800dc10:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800dc12:	e127      	b.n	800de64 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	699b      	ldr	r3, [r3, #24]
 800dc18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	f040 80e3 	bne.w	800dde8 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	699b      	ldr	r3, [r3, #24]
 800dc26:	0a5b      	lsrs	r3, r3, #9
 800dc28:	693a      	ldr	r2, [r7, #16]
 800dc2a:	8952      	ldrh	r2, [r2, #10]
 800dc2c:	3a01      	subs	r2, #1
 800dc2e:	4013      	ands	r3, r2
 800dc30:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800dc32:	69bb      	ldr	r3, [r7, #24]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d143      	bne.n	800dcc0 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	699b      	ldr	r3, [r3, #24]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d10c      	bne.n	800dc5a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	689b      	ldr	r3, [r3, #8]
 800dc44:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800dc46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d11a      	bne.n	800dc82 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	2100      	movs	r1, #0
 800dc50:	4618      	mov	r0, r3
 800dc52:	f7fe fd2a 	bl	800c6aa <create_chain>
 800dc56:	62b8      	str	r0, [r7, #40]	@ 0x28
 800dc58:	e013      	b.n	800dc82 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d007      	beq.n	800dc72 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	699b      	ldr	r3, [r3, #24]
 800dc66:	4619      	mov	r1, r3
 800dc68:	68f8      	ldr	r0, [r7, #12]
 800dc6a:	f7fe fdb6 	bl	800c7da <clmt_clust>
 800dc6e:	62b8      	str	r0, [r7, #40]	@ 0x28
 800dc70:	e007      	b.n	800dc82 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800dc72:	68fa      	ldr	r2, [r7, #12]
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	69db      	ldr	r3, [r3, #28]
 800dc78:	4619      	mov	r1, r3
 800dc7a:	4610      	mov	r0, r2
 800dc7c:	f7fe fd15 	bl	800c6aa <create_chain>
 800dc80:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800dc82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	f000 80f2 	beq.w	800de6e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800dc8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc8c:	2b01      	cmp	r3, #1
 800dc8e:	d104      	bne.n	800dc9a <f_write+0xfc>
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	2202      	movs	r2, #2
 800dc94:	755a      	strb	r2, [r3, #21]
 800dc96:	2302      	movs	r3, #2
 800dc98:	e0f2      	b.n	800de80 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dc9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dca0:	d104      	bne.n	800dcac <f_write+0x10e>
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	2201      	movs	r2, #1
 800dca6:	755a      	strb	r2, [r3, #21]
 800dca8:	2301      	movs	r3, #1
 800dcaa:	e0e9      	b.n	800de80 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dcb0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	689b      	ldr	r3, [r3, #8]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d102      	bne.n	800dcc0 <f_write+0x122>
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dcbe:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	7d1b      	ldrb	r3, [r3, #20]
 800dcc4:	b25b      	sxtb	r3, r3
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	da18      	bge.n	800dcfc <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dcca:	693b      	ldr	r3, [r7, #16]
 800dccc:	7858      	ldrb	r0, [r3, #1]
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	6a1a      	ldr	r2, [r3, #32]
 800dcd8:	2301      	movs	r3, #1
 800dcda:	f7fd ff1f 	bl	800bb1c <disk_write>
 800dcde:	4603      	mov	r3, r0
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d004      	beq.n	800dcee <f_write+0x150>
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	2201      	movs	r2, #1
 800dce8:	755a      	strb	r2, [r3, #21]
 800dcea:	2301      	movs	r3, #1
 800dcec:	e0c8      	b.n	800de80 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	7d1b      	ldrb	r3, [r3, #20]
 800dcf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dcf6:	b2da      	uxtb	r2, r3
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800dcfc:	693a      	ldr	r2, [r7, #16]
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	69db      	ldr	r3, [r3, #28]
 800dd02:	4619      	mov	r1, r3
 800dd04:	4610      	mov	r0, r2
 800dd06:	f7fe fabb 	bl	800c280 <clust2sect>
 800dd0a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800dd0c:	697b      	ldr	r3, [r7, #20]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d104      	bne.n	800dd1c <f_write+0x17e>
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	2202      	movs	r2, #2
 800dd16:	755a      	strb	r2, [r3, #21]
 800dd18:	2302      	movs	r3, #2
 800dd1a:	e0b1      	b.n	800de80 <f_write+0x2e2>
			sect += csect;
 800dd1c:	697a      	ldr	r2, [r7, #20]
 800dd1e:	69bb      	ldr	r3, [r7, #24]
 800dd20:	4413      	add	r3, r2
 800dd22:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	0a5b      	lsrs	r3, r3, #9
 800dd28:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800dd2a:	6a3b      	ldr	r3, [r7, #32]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d03c      	beq.n	800ddaa <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800dd30:	69ba      	ldr	r2, [r7, #24]
 800dd32:	6a3b      	ldr	r3, [r7, #32]
 800dd34:	4413      	add	r3, r2
 800dd36:	693a      	ldr	r2, [r7, #16]
 800dd38:	8952      	ldrh	r2, [r2, #10]
 800dd3a:	4293      	cmp	r3, r2
 800dd3c:	d905      	bls.n	800dd4a <f_write+0x1ac>
					cc = fs->csize - csect;
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	895b      	ldrh	r3, [r3, #10]
 800dd42:	461a      	mov	r2, r3
 800dd44:	69bb      	ldr	r3, [r7, #24]
 800dd46:	1ad3      	subs	r3, r2, r3
 800dd48:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dd4a:	693b      	ldr	r3, [r7, #16]
 800dd4c:	7858      	ldrb	r0, [r3, #1]
 800dd4e:	6a3b      	ldr	r3, [r7, #32]
 800dd50:	697a      	ldr	r2, [r7, #20]
 800dd52:	69f9      	ldr	r1, [r7, #28]
 800dd54:	f7fd fee2 	bl	800bb1c <disk_write>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d004      	beq.n	800dd68 <f_write+0x1ca>
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	2201      	movs	r2, #1
 800dd62:	755a      	strb	r2, [r3, #21]
 800dd64:	2301      	movs	r3, #1
 800dd66:	e08b      	b.n	800de80 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	6a1a      	ldr	r2, [r3, #32]
 800dd6c:	697b      	ldr	r3, [r7, #20]
 800dd6e:	1ad3      	subs	r3, r2, r3
 800dd70:	6a3a      	ldr	r2, [r7, #32]
 800dd72:	429a      	cmp	r2, r3
 800dd74:	d915      	bls.n	800dda2 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	6a1a      	ldr	r2, [r3, #32]
 800dd80:	697b      	ldr	r3, [r7, #20]
 800dd82:	1ad3      	subs	r3, r2, r3
 800dd84:	025b      	lsls	r3, r3, #9
 800dd86:	69fa      	ldr	r2, [r7, #28]
 800dd88:	4413      	add	r3, r2
 800dd8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dd8e:	4619      	mov	r1, r3
 800dd90:	f7fd ffac 	bl	800bcec <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	7d1b      	ldrb	r3, [r3, #20]
 800dd98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd9c:	b2da      	uxtb	r2, r3
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800dda2:	6a3b      	ldr	r3, [r7, #32]
 800dda4:	025b      	lsls	r3, r3, #9
 800dda6:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800dda8:	e03f      	b.n	800de2a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	6a1b      	ldr	r3, [r3, #32]
 800ddae:	697a      	ldr	r2, [r7, #20]
 800ddb0:	429a      	cmp	r2, r3
 800ddb2:	d016      	beq.n	800dde2 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	699a      	ldr	r2, [r3, #24]
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ddbc:	429a      	cmp	r2, r3
 800ddbe:	d210      	bcs.n	800dde2 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ddc0:	693b      	ldr	r3, [r7, #16]
 800ddc2:	7858      	ldrb	r0, [r3, #1]
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ddca:	2301      	movs	r3, #1
 800ddcc:	697a      	ldr	r2, [r7, #20]
 800ddce:	f7fd fe76 	bl	800babe <disk_read>
 800ddd2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d004      	beq.n	800dde2 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	2201      	movs	r2, #1
 800dddc:	755a      	strb	r2, [r3, #21]
 800ddde:	2301      	movs	r3, #1
 800dde0:	e04e      	b.n	800de80 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	697a      	ldr	r2, [r7, #20]
 800dde6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	699b      	ldr	r3, [r3, #24]
 800ddec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddf0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800ddf4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ddf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	429a      	cmp	r2, r3
 800ddfc:	d901      	bls.n	800de02 <f_write+0x264>
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	699b      	ldr	r3, [r3, #24]
 800de0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de10:	4413      	add	r3, r2
 800de12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de14:	69f9      	ldr	r1, [r7, #28]
 800de16:	4618      	mov	r0, r3
 800de18:	f7fd ff68 	bl	800bcec <mem_cpy>
		fp->flag |= FA_DIRTY;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	7d1b      	ldrb	r3, [r3, #20]
 800de20:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800de24:	b2da      	uxtb	r2, r3
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800de2a:	69fa      	ldr	r2, [r7, #28]
 800de2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de2e:	4413      	add	r3, r2
 800de30:	61fb      	str	r3, [r7, #28]
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	699a      	ldr	r2, [r3, #24]
 800de36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de38:	441a      	add	r2, r3
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	619a      	str	r2, [r3, #24]
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	68da      	ldr	r2, [r3, #12]
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	699b      	ldr	r3, [r3, #24]
 800de46:	429a      	cmp	r2, r3
 800de48:	bf38      	it	cc
 800de4a:	461a      	movcc	r2, r3
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	60da      	str	r2, [r3, #12]
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	681a      	ldr	r2, [r3, #0]
 800de54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de56:	441a      	add	r2, r3
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	601a      	str	r2, [r3, #0]
 800de5c:	687a      	ldr	r2, [r7, #4]
 800de5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de60:	1ad3      	subs	r3, r2, r3
 800de62:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2b00      	cmp	r3, #0
 800de68:	f47f aed4 	bne.w	800dc14 <f_write+0x76>
 800de6c:	e000      	b.n	800de70 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800de6e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	7d1b      	ldrb	r3, [r3, #20]
 800de74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de78:	b2da      	uxtb	r2, r3
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800de7e:	2300      	movs	r3, #0
}
 800de80:	4618      	mov	r0, r3
 800de82:	3730      	adds	r7, #48	@ 0x30
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}

0800de88 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b086      	sub	sp, #24
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f107 0208 	add.w	r2, r7, #8
 800de96:	4611      	mov	r1, r2
 800de98:	4618      	mov	r0, r3
 800de9a:	f7ff fb0b 	bl	800d4b4 <validate>
 800de9e:	4603      	mov	r3, r0
 800dea0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dea2:	7dfb      	ldrb	r3, [r7, #23]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d168      	bne.n	800df7a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	7d1b      	ldrb	r3, [r3, #20]
 800deac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d062      	beq.n	800df7a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	7d1b      	ldrb	r3, [r3, #20]
 800deb8:	b25b      	sxtb	r3, r3
 800deba:	2b00      	cmp	r3, #0
 800debc:	da15      	bge.n	800deea <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	7858      	ldrb	r0, [r3, #1]
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6a1a      	ldr	r2, [r3, #32]
 800decc:	2301      	movs	r3, #1
 800dece:	f7fd fe25 	bl	800bb1c <disk_write>
 800ded2:	4603      	mov	r3, r0
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d001      	beq.n	800dedc <f_sync+0x54>
 800ded8:	2301      	movs	r3, #1
 800deda:	e04f      	b.n	800df7c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	7d1b      	ldrb	r3, [r3, #20]
 800dee0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dee4:	b2da      	uxtb	r2, r3
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800deea:	f7fd fdb9 	bl	800ba60 <get_fattime>
 800deee:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800def0:	68ba      	ldr	r2, [r7, #8]
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800def6:	4619      	mov	r1, r3
 800def8:	4610      	mov	r0, r2
 800defa:	f7fe f925 	bl	800c148 <move_window>
 800defe:	4603      	mov	r3, r0
 800df00:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800df02:	7dfb      	ldrb	r3, [r7, #23]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d138      	bne.n	800df7a <f_sync+0xf2>
					dir = fp->dir_ptr;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df0c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	330b      	adds	r3, #11
 800df12:	781a      	ldrb	r2, [r3, #0]
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	330b      	adds	r3, #11
 800df18:	f042 0220 	orr.w	r2, r2, #32
 800df1c:	b2d2      	uxtb	r2, r2
 800df1e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	6818      	ldr	r0, [r3, #0]
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	689b      	ldr	r3, [r3, #8]
 800df28:	461a      	mov	r2, r3
 800df2a:	68f9      	ldr	r1, [r7, #12]
 800df2c:	f7fe fe2f 	bl	800cb8e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	f103 021c 	add.w	r2, r3, #28
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	68db      	ldr	r3, [r3, #12]
 800df3a:	4619      	mov	r1, r3
 800df3c:	4610      	mov	r0, r2
 800df3e:	f7fd fea9 	bl	800bc94 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	3316      	adds	r3, #22
 800df46:	6939      	ldr	r1, [r7, #16]
 800df48:	4618      	mov	r0, r3
 800df4a:	f7fd fea3 	bl	800bc94 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	3312      	adds	r3, #18
 800df52:	2100      	movs	r1, #0
 800df54:	4618      	mov	r0, r3
 800df56:	f7fd fe82 	bl	800bc5e <st_word>
					fs->wflag = 1;
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	2201      	movs	r2, #1
 800df5e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	4618      	mov	r0, r3
 800df64:	f7fe f91e 	bl	800c1a4 <sync_fs>
 800df68:	4603      	mov	r3, r0
 800df6a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	7d1b      	ldrb	r3, [r3, #20]
 800df70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800df74:	b2da      	uxtb	r2, r3
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800df7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	3718      	adds	r7, #24
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}

0800df84 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b084      	sub	sp, #16
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800df8c:	6878      	ldr	r0, [r7, #4]
 800df8e:	f7ff ff7b 	bl	800de88 <f_sync>
 800df92:	4603      	mov	r3, r0
 800df94:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800df96:	7bfb      	ldrb	r3, [r7, #15]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d118      	bne.n	800dfce <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	f107 0208 	add.w	r2, r7, #8
 800dfa2:	4611      	mov	r1, r2
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f7ff fa85 	bl	800d4b4 <validate>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dfae:	7bfb      	ldrb	r3, [r7, #15]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d10c      	bne.n	800dfce <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	691b      	ldr	r3, [r3, #16]
 800dfb8:	4618      	mov	r0, r3
 800dfba:	f7fe f821 	bl	800c000 <dec_lock>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800dfc2:	7bfb      	ldrb	r3, [r7, #15]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d102      	bne.n	800dfce <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800dfce:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	3710      	adds	r7, #16
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}

0800dfd8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dfd8:	b480      	push	{r7}
 800dfda:	b087      	sub	sp, #28
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	60f8      	str	r0, [r7, #12]
 800dfe0:	60b9      	str	r1, [r7, #8]
 800dfe2:	4613      	mov	r3, r2
 800dfe4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800dfea:	2300      	movs	r3, #0
 800dfec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800dfee:	4b1f      	ldr	r3, [pc, #124]	@ (800e06c <FATFS_LinkDriverEx+0x94>)
 800dff0:	7a5b      	ldrb	r3, [r3, #9]
 800dff2:	b2db      	uxtb	r3, r3
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d131      	bne.n	800e05c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dff8:	4b1c      	ldr	r3, [pc, #112]	@ (800e06c <FATFS_LinkDriverEx+0x94>)
 800dffa:	7a5b      	ldrb	r3, [r3, #9]
 800dffc:	b2db      	uxtb	r3, r3
 800dffe:	461a      	mov	r2, r3
 800e000:	4b1a      	ldr	r3, [pc, #104]	@ (800e06c <FATFS_LinkDriverEx+0x94>)
 800e002:	2100      	movs	r1, #0
 800e004:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e006:	4b19      	ldr	r3, [pc, #100]	@ (800e06c <FATFS_LinkDriverEx+0x94>)
 800e008:	7a5b      	ldrb	r3, [r3, #9]
 800e00a:	b2db      	uxtb	r3, r3
 800e00c:	4a17      	ldr	r2, [pc, #92]	@ (800e06c <FATFS_LinkDriverEx+0x94>)
 800e00e:	009b      	lsls	r3, r3, #2
 800e010:	4413      	add	r3, r2
 800e012:	68fa      	ldr	r2, [r7, #12]
 800e014:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e016:	4b15      	ldr	r3, [pc, #84]	@ (800e06c <FATFS_LinkDriverEx+0x94>)
 800e018:	7a5b      	ldrb	r3, [r3, #9]
 800e01a:	b2db      	uxtb	r3, r3
 800e01c:	461a      	mov	r2, r3
 800e01e:	4b13      	ldr	r3, [pc, #76]	@ (800e06c <FATFS_LinkDriverEx+0x94>)
 800e020:	4413      	add	r3, r2
 800e022:	79fa      	ldrb	r2, [r7, #7]
 800e024:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e026:	4b11      	ldr	r3, [pc, #68]	@ (800e06c <FATFS_LinkDriverEx+0x94>)
 800e028:	7a5b      	ldrb	r3, [r3, #9]
 800e02a:	b2db      	uxtb	r3, r3
 800e02c:	1c5a      	adds	r2, r3, #1
 800e02e:	b2d1      	uxtb	r1, r2
 800e030:	4a0e      	ldr	r2, [pc, #56]	@ (800e06c <FATFS_LinkDriverEx+0x94>)
 800e032:	7251      	strb	r1, [r2, #9]
 800e034:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e036:	7dbb      	ldrb	r3, [r7, #22]
 800e038:	3330      	adds	r3, #48	@ 0x30
 800e03a:	b2da      	uxtb	r2, r3
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	3301      	adds	r3, #1
 800e044:	223a      	movs	r2, #58	@ 0x3a
 800e046:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e048:	68bb      	ldr	r3, [r7, #8]
 800e04a:	3302      	adds	r3, #2
 800e04c:	222f      	movs	r2, #47	@ 0x2f
 800e04e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	3303      	adds	r3, #3
 800e054:	2200      	movs	r2, #0
 800e056:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e058:	2300      	movs	r3, #0
 800e05a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e05c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e05e:	4618      	mov	r0, r3
 800e060:	371c      	adds	r7, #28
 800e062:	46bd      	mov	sp, r7
 800e064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e068:	4770      	bx	lr
 800e06a:	bf00      	nop
 800e06c:	20006b88 	.word	0x20006b88

0800e070 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b082      	sub	sp, #8
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
 800e078:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e07a:	2200      	movs	r2, #0
 800e07c:	6839      	ldr	r1, [r7, #0]
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	f7ff ffaa 	bl	800dfd8 <FATFS_LinkDriverEx>
 800e084:	4603      	mov	r3, r0
}
 800e086:	4618      	mov	r0, r3
 800e088:	3708      	adds	r7, #8
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}

0800e08e <sulp>:
 800e08e:	b570      	push	{r4, r5, r6, lr}
 800e090:	4604      	mov	r4, r0
 800e092:	460d      	mov	r5, r1
 800e094:	ec45 4b10 	vmov	d0, r4, r5
 800e098:	4616      	mov	r6, r2
 800e09a:	f003 fd41 	bl	8011b20 <__ulp>
 800e09e:	ec51 0b10 	vmov	r0, r1, d0
 800e0a2:	b17e      	cbz	r6, 800e0c4 <sulp+0x36>
 800e0a4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e0a8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	dd09      	ble.n	800e0c4 <sulp+0x36>
 800e0b0:	051b      	lsls	r3, r3, #20
 800e0b2:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e0b6:	2400      	movs	r4, #0
 800e0b8:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e0bc:	4622      	mov	r2, r4
 800e0be:	462b      	mov	r3, r5
 800e0c0:	f7f2 faba 	bl	8000638 <__aeabi_dmul>
 800e0c4:	ec41 0b10 	vmov	d0, r0, r1
 800e0c8:	bd70      	pop	{r4, r5, r6, pc}
 800e0ca:	0000      	movs	r0, r0
 800e0cc:	0000      	movs	r0, r0
	...

0800e0d0 <_strtod_l>:
 800e0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0d4:	b09f      	sub	sp, #124	@ 0x7c
 800e0d6:	460c      	mov	r4, r1
 800e0d8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e0da:	2200      	movs	r2, #0
 800e0dc:	921a      	str	r2, [sp, #104]	@ 0x68
 800e0de:	9005      	str	r0, [sp, #20]
 800e0e0:	f04f 0a00 	mov.w	sl, #0
 800e0e4:	f04f 0b00 	mov.w	fp, #0
 800e0e8:	460a      	mov	r2, r1
 800e0ea:	9219      	str	r2, [sp, #100]	@ 0x64
 800e0ec:	7811      	ldrb	r1, [r2, #0]
 800e0ee:	292b      	cmp	r1, #43	@ 0x2b
 800e0f0:	d04a      	beq.n	800e188 <_strtod_l+0xb8>
 800e0f2:	d838      	bhi.n	800e166 <_strtod_l+0x96>
 800e0f4:	290d      	cmp	r1, #13
 800e0f6:	d832      	bhi.n	800e15e <_strtod_l+0x8e>
 800e0f8:	2908      	cmp	r1, #8
 800e0fa:	d832      	bhi.n	800e162 <_strtod_l+0x92>
 800e0fc:	2900      	cmp	r1, #0
 800e0fe:	d03b      	beq.n	800e178 <_strtod_l+0xa8>
 800e100:	2200      	movs	r2, #0
 800e102:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e104:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e106:	782a      	ldrb	r2, [r5, #0]
 800e108:	2a30      	cmp	r2, #48	@ 0x30
 800e10a:	f040 80b3 	bne.w	800e274 <_strtod_l+0x1a4>
 800e10e:	786a      	ldrb	r2, [r5, #1]
 800e110:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e114:	2a58      	cmp	r2, #88	@ 0x58
 800e116:	d16e      	bne.n	800e1f6 <_strtod_l+0x126>
 800e118:	9302      	str	r3, [sp, #8]
 800e11a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e11c:	9301      	str	r3, [sp, #4]
 800e11e:	ab1a      	add	r3, sp, #104	@ 0x68
 800e120:	9300      	str	r3, [sp, #0]
 800e122:	4a8e      	ldr	r2, [pc, #568]	@ (800e35c <_strtod_l+0x28c>)
 800e124:	9805      	ldr	r0, [sp, #20]
 800e126:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e128:	a919      	add	r1, sp, #100	@ 0x64
 800e12a:	f002 fdeb 	bl	8010d04 <__gethex>
 800e12e:	f010 060f 	ands.w	r6, r0, #15
 800e132:	4604      	mov	r4, r0
 800e134:	d005      	beq.n	800e142 <_strtod_l+0x72>
 800e136:	2e06      	cmp	r6, #6
 800e138:	d128      	bne.n	800e18c <_strtod_l+0xbc>
 800e13a:	3501      	adds	r5, #1
 800e13c:	2300      	movs	r3, #0
 800e13e:	9519      	str	r5, [sp, #100]	@ 0x64
 800e140:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e142:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e144:	2b00      	cmp	r3, #0
 800e146:	f040 858e 	bne.w	800ec66 <_strtod_l+0xb96>
 800e14a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e14c:	b1cb      	cbz	r3, 800e182 <_strtod_l+0xb2>
 800e14e:	4652      	mov	r2, sl
 800e150:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e154:	ec43 2b10 	vmov	d0, r2, r3
 800e158:	b01f      	add	sp, #124	@ 0x7c
 800e15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e15e:	2920      	cmp	r1, #32
 800e160:	d1ce      	bne.n	800e100 <_strtod_l+0x30>
 800e162:	3201      	adds	r2, #1
 800e164:	e7c1      	b.n	800e0ea <_strtod_l+0x1a>
 800e166:	292d      	cmp	r1, #45	@ 0x2d
 800e168:	d1ca      	bne.n	800e100 <_strtod_l+0x30>
 800e16a:	2101      	movs	r1, #1
 800e16c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e16e:	1c51      	adds	r1, r2, #1
 800e170:	9119      	str	r1, [sp, #100]	@ 0x64
 800e172:	7852      	ldrb	r2, [r2, #1]
 800e174:	2a00      	cmp	r2, #0
 800e176:	d1c5      	bne.n	800e104 <_strtod_l+0x34>
 800e178:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e17a:	9419      	str	r4, [sp, #100]	@ 0x64
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	f040 8570 	bne.w	800ec62 <_strtod_l+0xb92>
 800e182:	4652      	mov	r2, sl
 800e184:	465b      	mov	r3, fp
 800e186:	e7e5      	b.n	800e154 <_strtod_l+0x84>
 800e188:	2100      	movs	r1, #0
 800e18a:	e7ef      	b.n	800e16c <_strtod_l+0x9c>
 800e18c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e18e:	b13a      	cbz	r2, 800e1a0 <_strtod_l+0xd0>
 800e190:	2135      	movs	r1, #53	@ 0x35
 800e192:	a81c      	add	r0, sp, #112	@ 0x70
 800e194:	f003 fdbe 	bl	8011d14 <__copybits>
 800e198:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e19a:	9805      	ldr	r0, [sp, #20]
 800e19c:	f003 f98c 	bl	80114b8 <_Bfree>
 800e1a0:	3e01      	subs	r6, #1
 800e1a2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e1a4:	2e04      	cmp	r6, #4
 800e1a6:	d806      	bhi.n	800e1b6 <_strtod_l+0xe6>
 800e1a8:	e8df f006 	tbb	[pc, r6]
 800e1ac:	201d0314 	.word	0x201d0314
 800e1b0:	14          	.byte	0x14
 800e1b1:	00          	.byte	0x00
 800e1b2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e1b6:	05e1      	lsls	r1, r4, #23
 800e1b8:	bf48      	it	mi
 800e1ba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e1be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e1c2:	0d1b      	lsrs	r3, r3, #20
 800e1c4:	051b      	lsls	r3, r3, #20
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d1bb      	bne.n	800e142 <_strtod_l+0x72>
 800e1ca:	f001 fe33 	bl	800fe34 <__errno>
 800e1ce:	2322      	movs	r3, #34	@ 0x22
 800e1d0:	6003      	str	r3, [r0, #0]
 800e1d2:	e7b6      	b.n	800e142 <_strtod_l+0x72>
 800e1d4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e1d8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e1dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e1e0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e1e4:	e7e7      	b.n	800e1b6 <_strtod_l+0xe6>
 800e1e6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800e364 <_strtod_l+0x294>
 800e1ea:	e7e4      	b.n	800e1b6 <_strtod_l+0xe6>
 800e1ec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e1f0:	f04f 3aff 	mov.w	sl, #4294967295
 800e1f4:	e7df      	b.n	800e1b6 <_strtod_l+0xe6>
 800e1f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e1f8:	1c5a      	adds	r2, r3, #1
 800e1fa:	9219      	str	r2, [sp, #100]	@ 0x64
 800e1fc:	785b      	ldrb	r3, [r3, #1]
 800e1fe:	2b30      	cmp	r3, #48	@ 0x30
 800e200:	d0f9      	beq.n	800e1f6 <_strtod_l+0x126>
 800e202:	2b00      	cmp	r3, #0
 800e204:	d09d      	beq.n	800e142 <_strtod_l+0x72>
 800e206:	2301      	movs	r3, #1
 800e208:	9309      	str	r3, [sp, #36]	@ 0x24
 800e20a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e20c:	930c      	str	r3, [sp, #48]	@ 0x30
 800e20e:	2300      	movs	r3, #0
 800e210:	9308      	str	r3, [sp, #32]
 800e212:	930a      	str	r3, [sp, #40]	@ 0x28
 800e214:	461f      	mov	r7, r3
 800e216:	220a      	movs	r2, #10
 800e218:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e21a:	7805      	ldrb	r5, [r0, #0]
 800e21c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e220:	b2d9      	uxtb	r1, r3
 800e222:	2909      	cmp	r1, #9
 800e224:	d928      	bls.n	800e278 <_strtod_l+0x1a8>
 800e226:	494e      	ldr	r1, [pc, #312]	@ (800e360 <_strtod_l+0x290>)
 800e228:	2201      	movs	r2, #1
 800e22a:	f001 fd4a 	bl	800fcc2 <strncmp>
 800e22e:	2800      	cmp	r0, #0
 800e230:	d032      	beq.n	800e298 <_strtod_l+0x1c8>
 800e232:	2000      	movs	r0, #0
 800e234:	462a      	mov	r2, r5
 800e236:	4681      	mov	r9, r0
 800e238:	463d      	mov	r5, r7
 800e23a:	4603      	mov	r3, r0
 800e23c:	2a65      	cmp	r2, #101	@ 0x65
 800e23e:	d001      	beq.n	800e244 <_strtod_l+0x174>
 800e240:	2a45      	cmp	r2, #69	@ 0x45
 800e242:	d114      	bne.n	800e26e <_strtod_l+0x19e>
 800e244:	b91d      	cbnz	r5, 800e24e <_strtod_l+0x17e>
 800e246:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e248:	4302      	orrs	r2, r0
 800e24a:	d095      	beq.n	800e178 <_strtod_l+0xa8>
 800e24c:	2500      	movs	r5, #0
 800e24e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e250:	1c62      	adds	r2, r4, #1
 800e252:	9219      	str	r2, [sp, #100]	@ 0x64
 800e254:	7862      	ldrb	r2, [r4, #1]
 800e256:	2a2b      	cmp	r2, #43	@ 0x2b
 800e258:	d077      	beq.n	800e34a <_strtod_l+0x27a>
 800e25a:	2a2d      	cmp	r2, #45	@ 0x2d
 800e25c:	d07b      	beq.n	800e356 <_strtod_l+0x286>
 800e25e:	f04f 0c00 	mov.w	ip, #0
 800e262:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e266:	2909      	cmp	r1, #9
 800e268:	f240 8082 	bls.w	800e370 <_strtod_l+0x2a0>
 800e26c:	9419      	str	r4, [sp, #100]	@ 0x64
 800e26e:	f04f 0800 	mov.w	r8, #0
 800e272:	e0a2      	b.n	800e3ba <_strtod_l+0x2ea>
 800e274:	2300      	movs	r3, #0
 800e276:	e7c7      	b.n	800e208 <_strtod_l+0x138>
 800e278:	2f08      	cmp	r7, #8
 800e27a:	bfd5      	itete	le
 800e27c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800e27e:	9908      	ldrgt	r1, [sp, #32]
 800e280:	fb02 3301 	mlale	r3, r2, r1, r3
 800e284:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e288:	f100 0001 	add.w	r0, r0, #1
 800e28c:	bfd4      	ite	le
 800e28e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800e290:	9308      	strgt	r3, [sp, #32]
 800e292:	3701      	adds	r7, #1
 800e294:	9019      	str	r0, [sp, #100]	@ 0x64
 800e296:	e7bf      	b.n	800e218 <_strtod_l+0x148>
 800e298:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e29a:	1c5a      	adds	r2, r3, #1
 800e29c:	9219      	str	r2, [sp, #100]	@ 0x64
 800e29e:	785a      	ldrb	r2, [r3, #1]
 800e2a0:	b37f      	cbz	r7, 800e302 <_strtod_l+0x232>
 800e2a2:	4681      	mov	r9, r0
 800e2a4:	463d      	mov	r5, r7
 800e2a6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e2aa:	2b09      	cmp	r3, #9
 800e2ac:	d912      	bls.n	800e2d4 <_strtod_l+0x204>
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	e7c4      	b.n	800e23c <_strtod_l+0x16c>
 800e2b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e2b4:	1c5a      	adds	r2, r3, #1
 800e2b6:	9219      	str	r2, [sp, #100]	@ 0x64
 800e2b8:	785a      	ldrb	r2, [r3, #1]
 800e2ba:	3001      	adds	r0, #1
 800e2bc:	2a30      	cmp	r2, #48	@ 0x30
 800e2be:	d0f8      	beq.n	800e2b2 <_strtod_l+0x1e2>
 800e2c0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e2c4:	2b08      	cmp	r3, #8
 800e2c6:	f200 84d3 	bhi.w	800ec70 <_strtod_l+0xba0>
 800e2ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e2cc:	930c      	str	r3, [sp, #48]	@ 0x30
 800e2ce:	4681      	mov	r9, r0
 800e2d0:	2000      	movs	r0, #0
 800e2d2:	4605      	mov	r5, r0
 800e2d4:	3a30      	subs	r2, #48	@ 0x30
 800e2d6:	f100 0301 	add.w	r3, r0, #1
 800e2da:	d02a      	beq.n	800e332 <_strtod_l+0x262>
 800e2dc:	4499      	add	r9, r3
 800e2de:	eb00 0c05 	add.w	ip, r0, r5
 800e2e2:	462b      	mov	r3, r5
 800e2e4:	210a      	movs	r1, #10
 800e2e6:	4563      	cmp	r3, ip
 800e2e8:	d10d      	bne.n	800e306 <_strtod_l+0x236>
 800e2ea:	1c69      	adds	r1, r5, #1
 800e2ec:	4401      	add	r1, r0
 800e2ee:	4428      	add	r0, r5
 800e2f0:	2808      	cmp	r0, #8
 800e2f2:	dc16      	bgt.n	800e322 <_strtod_l+0x252>
 800e2f4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e2f6:	230a      	movs	r3, #10
 800e2f8:	fb03 2300 	mla	r3, r3, r0, r2
 800e2fc:	930a      	str	r3, [sp, #40]	@ 0x28
 800e2fe:	2300      	movs	r3, #0
 800e300:	e018      	b.n	800e334 <_strtod_l+0x264>
 800e302:	4638      	mov	r0, r7
 800e304:	e7da      	b.n	800e2bc <_strtod_l+0x1ec>
 800e306:	2b08      	cmp	r3, #8
 800e308:	f103 0301 	add.w	r3, r3, #1
 800e30c:	dc03      	bgt.n	800e316 <_strtod_l+0x246>
 800e30e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e310:	434e      	muls	r6, r1
 800e312:	960a      	str	r6, [sp, #40]	@ 0x28
 800e314:	e7e7      	b.n	800e2e6 <_strtod_l+0x216>
 800e316:	2b10      	cmp	r3, #16
 800e318:	bfde      	ittt	le
 800e31a:	9e08      	ldrle	r6, [sp, #32]
 800e31c:	434e      	mulle	r6, r1
 800e31e:	9608      	strle	r6, [sp, #32]
 800e320:	e7e1      	b.n	800e2e6 <_strtod_l+0x216>
 800e322:	280f      	cmp	r0, #15
 800e324:	dceb      	bgt.n	800e2fe <_strtod_l+0x22e>
 800e326:	9808      	ldr	r0, [sp, #32]
 800e328:	230a      	movs	r3, #10
 800e32a:	fb03 2300 	mla	r3, r3, r0, r2
 800e32e:	9308      	str	r3, [sp, #32]
 800e330:	e7e5      	b.n	800e2fe <_strtod_l+0x22e>
 800e332:	4629      	mov	r1, r5
 800e334:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e336:	1c50      	adds	r0, r2, #1
 800e338:	9019      	str	r0, [sp, #100]	@ 0x64
 800e33a:	7852      	ldrb	r2, [r2, #1]
 800e33c:	4618      	mov	r0, r3
 800e33e:	460d      	mov	r5, r1
 800e340:	e7b1      	b.n	800e2a6 <_strtod_l+0x1d6>
 800e342:	f04f 0900 	mov.w	r9, #0
 800e346:	2301      	movs	r3, #1
 800e348:	e77d      	b.n	800e246 <_strtod_l+0x176>
 800e34a:	f04f 0c00 	mov.w	ip, #0
 800e34e:	1ca2      	adds	r2, r4, #2
 800e350:	9219      	str	r2, [sp, #100]	@ 0x64
 800e352:	78a2      	ldrb	r2, [r4, #2]
 800e354:	e785      	b.n	800e262 <_strtod_l+0x192>
 800e356:	f04f 0c01 	mov.w	ip, #1
 800e35a:	e7f8      	b.n	800e34e <_strtod_l+0x27e>
 800e35c:	0801411c 	.word	0x0801411c
 800e360:	08014104 	.word	0x08014104
 800e364:	7ff00000 	.word	0x7ff00000
 800e368:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e36a:	1c51      	adds	r1, r2, #1
 800e36c:	9119      	str	r1, [sp, #100]	@ 0x64
 800e36e:	7852      	ldrb	r2, [r2, #1]
 800e370:	2a30      	cmp	r2, #48	@ 0x30
 800e372:	d0f9      	beq.n	800e368 <_strtod_l+0x298>
 800e374:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e378:	2908      	cmp	r1, #8
 800e37a:	f63f af78 	bhi.w	800e26e <_strtod_l+0x19e>
 800e37e:	3a30      	subs	r2, #48	@ 0x30
 800e380:	920e      	str	r2, [sp, #56]	@ 0x38
 800e382:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e384:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e386:	f04f 080a 	mov.w	r8, #10
 800e38a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e38c:	1c56      	adds	r6, r2, #1
 800e38e:	9619      	str	r6, [sp, #100]	@ 0x64
 800e390:	7852      	ldrb	r2, [r2, #1]
 800e392:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e396:	f1be 0f09 	cmp.w	lr, #9
 800e39a:	d939      	bls.n	800e410 <_strtod_l+0x340>
 800e39c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e39e:	1a76      	subs	r6, r6, r1
 800e3a0:	2e08      	cmp	r6, #8
 800e3a2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e3a6:	dc03      	bgt.n	800e3b0 <_strtod_l+0x2e0>
 800e3a8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e3aa:	4588      	cmp	r8, r1
 800e3ac:	bfa8      	it	ge
 800e3ae:	4688      	movge	r8, r1
 800e3b0:	f1bc 0f00 	cmp.w	ip, #0
 800e3b4:	d001      	beq.n	800e3ba <_strtod_l+0x2ea>
 800e3b6:	f1c8 0800 	rsb	r8, r8, #0
 800e3ba:	2d00      	cmp	r5, #0
 800e3bc:	d14e      	bne.n	800e45c <_strtod_l+0x38c>
 800e3be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e3c0:	4308      	orrs	r0, r1
 800e3c2:	f47f aebe 	bne.w	800e142 <_strtod_l+0x72>
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	f47f aed6 	bne.w	800e178 <_strtod_l+0xa8>
 800e3cc:	2a69      	cmp	r2, #105	@ 0x69
 800e3ce:	d028      	beq.n	800e422 <_strtod_l+0x352>
 800e3d0:	dc25      	bgt.n	800e41e <_strtod_l+0x34e>
 800e3d2:	2a49      	cmp	r2, #73	@ 0x49
 800e3d4:	d025      	beq.n	800e422 <_strtod_l+0x352>
 800e3d6:	2a4e      	cmp	r2, #78	@ 0x4e
 800e3d8:	f47f aece 	bne.w	800e178 <_strtod_l+0xa8>
 800e3dc:	499b      	ldr	r1, [pc, #620]	@ (800e64c <_strtod_l+0x57c>)
 800e3de:	a819      	add	r0, sp, #100	@ 0x64
 800e3e0:	f002 feb2 	bl	8011148 <__match>
 800e3e4:	2800      	cmp	r0, #0
 800e3e6:	f43f aec7 	beq.w	800e178 <_strtod_l+0xa8>
 800e3ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e3ec:	781b      	ldrb	r3, [r3, #0]
 800e3ee:	2b28      	cmp	r3, #40	@ 0x28
 800e3f0:	d12e      	bne.n	800e450 <_strtod_l+0x380>
 800e3f2:	4997      	ldr	r1, [pc, #604]	@ (800e650 <_strtod_l+0x580>)
 800e3f4:	aa1c      	add	r2, sp, #112	@ 0x70
 800e3f6:	a819      	add	r0, sp, #100	@ 0x64
 800e3f8:	f002 feba 	bl	8011170 <__hexnan>
 800e3fc:	2805      	cmp	r0, #5
 800e3fe:	d127      	bne.n	800e450 <_strtod_l+0x380>
 800e400:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e402:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e406:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e40a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e40e:	e698      	b.n	800e142 <_strtod_l+0x72>
 800e410:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e412:	fb08 2101 	mla	r1, r8, r1, r2
 800e416:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e41a:	920e      	str	r2, [sp, #56]	@ 0x38
 800e41c:	e7b5      	b.n	800e38a <_strtod_l+0x2ba>
 800e41e:	2a6e      	cmp	r2, #110	@ 0x6e
 800e420:	e7da      	b.n	800e3d8 <_strtod_l+0x308>
 800e422:	498c      	ldr	r1, [pc, #560]	@ (800e654 <_strtod_l+0x584>)
 800e424:	a819      	add	r0, sp, #100	@ 0x64
 800e426:	f002 fe8f 	bl	8011148 <__match>
 800e42a:	2800      	cmp	r0, #0
 800e42c:	f43f aea4 	beq.w	800e178 <_strtod_l+0xa8>
 800e430:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e432:	4989      	ldr	r1, [pc, #548]	@ (800e658 <_strtod_l+0x588>)
 800e434:	3b01      	subs	r3, #1
 800e436:	a819      	add	r0, sp, #100	@ 0x64
 800e438:	9319      	str	r3, [sp, #100]	@ 0x64
 800e43a:	f002 fe85 	bl	8011148 <__match>
 800e43e:	b910      	cbnz	r0, 800e446 <_strtod_l+0x376>
 800e440:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e442:	3301      	adds	r3, #1
 800e444:	9319      	str	r3, [sp, #100]	@ 0x64
 800e446:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800e668 <_strtod_l+0x598>
 800e44a:	f04f 0a00 	mov.w	sl, #0
 800e44e:	e678      	b.n	800e142 <_strtod_l+0x72>
 800e450:	4882      	ldr	r0, [pc, #520]	@ (800e65c <_strtod_l+0x58c>)
 800e452:	f001 fd2d 	bl	800feb0 <nan>
 800e456:	ec5b ab10 	vmov	sl, fp, d0
 800e45a:	e672      	b.n	800e142 <_strtod_l+0x72>
 800e45c:	eba8 0309 	sub.w	r3, r8, r9
 800e460:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e462:	9309      	str	r3, [sp, #36]	@ 0x24
 800e464:	2f00      	cmp	r7, #0
 800e466:	bf08      	it	eq
 800e468:	462f      	moveq	r7, r5
 800e46a:	2d10      	cmp	r5, #16
 800e46c:	462c      	mov	r4, r5
 800e46e:	bfa8      	it	ge
 800e470:	2410      	movge	r4, #16
 800e472:	f7f2 f867 	bl	8000544 <__aeabi_ui2d>
 800e476:	2d09      	cmp	r5, #9
 800e478:	4682      	mov	sl, r0
 800e47a:	468b      	mov	fp, r1
 800e47c:	dc13      	bgt.n	800e4a6 <_strtod_l+0x3d6>
 800e47e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e480:	2b00      	cmp	r3, #0
 800e482:	f43f ae5e 	beq.w	800e142 <_strtod_l+0x72>
 800e486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e488:	dd78      	ble.n	800e57c <_strtod_l+0x4ac>
 800e48a:	2b16      	cmp	r3, #22
 800e48c:	dc5f      	bgt.n	800e54e <_strtod_l+0x47e>
 800e48e:	4974      	ldr	r1, [pc, #464]	@ (800e660 <_strtod_l+0x590>)
 800e490:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e494:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e498:	4652      	mov	r2, sl
 800e49a:	465b      	mov	r3, fp
 800e49c:	f7f2 f8cc 	bl	8000638 <__aeabi_dmul>
 800e4a0:	4682      	mov	sl, r0
 800e4a2:	468b      	mov	fp, r1
 800e4a4:	e64d      	b.n	800e142 <_strtod_l+0x72>
 800e4a6:	4b6e      	ldr	r3, [pc, #440]	@ (800e660 <_strtod_l+0x590>)
 800e4a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e4ac:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e4b0:	f7f2 f8c2 	bl	8000638 <__aeabi_dmul>
 800e4b4:	4682      	mov	sl, r0
 800e4b6:	9808      	ldr	r0, [sp, #32]
 800e4b8:	468b      	mov	fp, r1
 800e4ba:	f7f2 f843 	bl	8000544 <__aeabi_ui2d>
 800e4be:	4602      	mov	r2, r0
 800e4c0:	460b      	mov	r3, r1
 800e4c2:	4650      	mov	r0, sl
 800e4c4:	4659      	mov	r1, fp
 800e4c6:	f7f1 ff01 	bl	80002cc <__adddf3>
 800e4ca:	2d0f      	cmp	r5, #15
 800e4cc:	4682      	mov	sl, r0
 800e4ce:	468b      	mov	fp, r1
 800e4d0:	ddd5      	ble.n	800e47e <_strtod_l+0x3ae>
 800e4d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4d4:	1b2c      	subs	r4, r5, r4
 800e4d6:	441c      	add	r4, r3
 800e4d8:	2c00      	cmp	r4, #0
 800e4da:	f340 8096 	ble.w	800e60a <_strtod_l+0x53a>
 800e4de:	f014 030f 	ands.w	r3, r4, #15
 800e4e2:	d00a      	beq.n	800e4fa <_strtod_l+0x42a>
 800e4e4:	495e      	ldr	r1, [pc, #376]	@ (800e660 <_strtod_l+0x590>)
 800e4e6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e4ea:	4652      	mov	r2, sl
 800e4ec:	465b      	mov	r3, fp
 800e4ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4f2:	f7f2 f8a1 	bl	8000638 <__aeabi_dmul>
 800e4f6:	4682      	mov	sl, r0
 800e4f8:	468b      	mov	fp, r1
 800e4fa:	f034 040f 	bics.w	r4, r4, #15
 800e4fe:	d073      	beq.n	800e5e8 <_strtod_l+0x518>
 800e500:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e504:	dd48      	ble.n	800e598 <_strtod_l+0x4c8>
 800e506:	2400      	movs	r4, #0
 800e508:	46a0      	mov	r8, r4
 800e50a:	940a      	str	r4, [sp, #40]	@ 0x28
 800e50c:	46a1      	mov	r9, r4
 800e50e:	9a05      	ldr	r2, [sp, #20]
 800e510:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e668 <_strtod_l+0x598>
 800e514:	2322      	movs	r3, #34	@ 0x22
 800e516:	6013      	str	r3, [r2, #0]
 800e518:	f04f 0a00 	mov.w	sl, #0
 800e51c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e51e:	2b00      	cmp	r3, #0
 800e520:	f43f ae0f 	beq.w	800e142 <_strtod_l+0x72>
 800e524:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e526:	9805      	ldr	r0, [sp, #20]
 800e528:	f002 ffc6 	bl	80114b8 <_Bfree>
 800e52c:	9805      	ldr	r0, [sp, #20]
 800e52e:	4649      	mov	r1, r9
 800e530:	f002 ffc2 	bl	80114b8 <_Bfree>
 800e534:	9805      	ldr	r0, [sp, #20]
 800e536:	4641      	mov	r1, r8
 800e538:	f002 ffbe 	bl	80114b8 <_Bfree>
 800e53c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e53e:	9805      	ldr	r0, [sp, #20]
 800e540:	f002 ffba 	bl	80114b8 <_Bfree>
 800e544:	9805      	ldr	r0, [sp, #20]
 800e546:	4621      	mov	r1, r4
 800e548:	f002 ffb6 	bl	80114b8 <_Bfree>
 800e54c:	e5f9      	b.n	800e142 <_strtod_l+0x72>
 800e54e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e550:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e554:	4293      	cmp	r3, r2
 800e556:	dbbc      	blt.n	800e4d2 <_strtod_l+0x402>
 800e558:	4c41      	ldr	r4, [pc, #260]	@ (800e660 <_strtod_l+0x590>)
 800e55a:	f1c5 050f 	rsb	r5, r5, #15
 800e55e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e562:	4652      	mov	r2, sl
 800e564:	465b      	mov	r3, fp
 800e566:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e56a:	f7f2 f865 	bl	8000638 <__aeabi_dmul>
 800e56e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e570:	1b5d      	subs	r5, r3, r5
 800e572:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e576:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e57a:	e78f      	b.n	800e49c <_strtod_l+0x3cc>
 800e57c:	3316      	adds	r3, #22
 800e57e:	dba8      	blt.n	800e4d2 <_strtod_l+0x402>
 800e580:	4b37      	ldr	r3, [pc, #220]	@ (800e660 <_strtod_l+0x590>)
 800e582:	eba9 0808 	sub.w	r8, r9, r8
 800e586:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e58a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e58e:	4650      	mov	r0, sl
 800e590:	4659      	mov	r1, fp
 800e592:	f7f2 f97b 	bl	800088c <__aeabi_ddiv>
 800e596:	e783      	b.n	800e4a0 <_strtod_l+0x3d0>
 800e598:	4b32      	ldr	r3, [pc, #200]	@ (800e664 <_strtod_l+0x594>)
 800e59a:	9308      	str	r3, [sp, #32]
 800e59c:	2300      	movs	r3, #0
 800e59e:	1124      	asrs	r4, r4, #4
 800e5a0:	4650      	mov	r0, sl
 800e5a2:	4659      	mov	r1, fp
 800e5a4:	461e      	mov	r6, r3
 800e5a6:	2c01      	cmp	r4, #1
 800e5a8:	dc21      	bgt.n	800e5ee <_strtod_l+0x51e>
 800e5aa:	b10b      	cbz	r3, 800e5b0 <_strtod_l+0x4e0>
 800e5ac:	4682      	mov	sl, r0
 800e5ae:	468b      	mov	fp, r1
 800e5b0:	492c      	ldr	r1, [pc, #176]	@ (800e664 <_strtod_l+0x594>)
 800e5b2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e5b6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e5ba:	4652      	mov	r2, sl
 800e5bc:	465b      	mov	r3, fp
 800e5be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5c2:	f7f2 f839 	bl	8000638 <__aeabi_dmul>
 800e5c6:	4b28      	ldr	r3, [pc, #160]	@ (800e668 <_strtod_l+0x598>)
 800e5c8:	460a      	mov	r2, r1
 800e5ca:	400b      	ands	r3, r1
 800e5cc:	4927      	ldr	r1, [pc, #156]	@ (800e66c <_strtod_l+0x59c>)
 800e5ce:	428b      	cmp	r3, r1
 800e5d0:	4682      	mov	sl, r0
 800e5d2:	d898      	bhi.n	800e506 <_strtod_l+0x436>
 800e5d4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e5d8:	428b      	cmp	r3, r1
 800e5da:	bf86      	itte	hi
 800e5dc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800e670 <_strtod_l+0x5a0>
 800e5e0:	f04f 3aff 	movhi.w	sl, #4294967295
 800e5e4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	9308      	str	r3, [sp, #32]
 800e5ec:	e07a      	b.n	800e6e4 <_strtod_l+0x614>
 800e5ee:	07e2      	lsls	r2, r4, #31
 800e5f0:	d505      	bpl.n	800e5fe <_strtod_l+0x52e>
 800e5f2:	9b08      	ldr	r3, [sp, #32]
 800e5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f8:	f7f2 f81e 	bl	8000638 <__aeabi_dmul>
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	9a08      	ldr	r2, [sp, #32]
 800e600:	3208      	adds	r2, #8
 800e602:	3601      	adds	r6, #1
 800e604:	1064      	asrs	r4, r4, #1
 800e606:	9208      	str	r2, [sp, #32]
 800e608:	e7cd      	b.n	800e5a6 <_strtod_l+0x4d6>
 800e60a:	d0ed      	beq.n	800e5e8 <_strtod_l+0x518>
 800e60c:	4264      	negs	r4, r4
 800e60e:	f014 020f 	ands.w	r2, r4, #15
 800e612:	d00a      	beq.n	800e62a <_strtod_l+0x55a>
 800e614:	4b12      	ldr	r3, [pc, #72]	@ (800e660 <_strtod_l+0x590>)
 800e616:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e61a:	4650      	mov	r0, sl
 800e61c:	4659      	mov	r1, fp
 800e61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e622:	f7f2 f933 	bl	800088c <__aeabi_ddiv>
 800e626:	4682      	mov	sl, r0
 800e628:	468b      	mov	fp, r1
 800e62a:	1124      	asrs	r4, r4, #4
 800e62c:	d0dc      	beq.n	800e5e8 <_strtod_l+0x518>
 800e62e:	2c1f      	cmp	r4, #31
 800e630:	dd20      	ble.n	800e674 <_strtod_l+0x5a4>
 800e632:	2400      	movs	r4, #0
 800e634:	46a0      	mov	r8, r4
 800e636:	940a      	str	r4, [sp, #40]	@ 0x28
 800e638:	46a1      	mov	r9, r4
 800e63a:	9a05      	ldr	r2, [sp, #20]
 800e63c:	2322      	movs	r3, #34	@ 0x22
 800e63e:	f04f 0a00 	mov.w	sl, #0
 800e642:	f04f 0b00 	mov.w	fp, #0
 800e646:	6013      	str	r3, [r2, #0]
 800e648:	e768      	b.n	800e51c <_strtod_l+0x44c>
 800e64a:	bf00      	nop
 800e64c:	08014165 	.word	0x08014165
 800e650:	08014108 	.word	0x08014108
 800e654:	0801415d 	.word	0x0801415d
 800e658:	08014249 	.word	0x08014249
 800e65c:	08014245 	.word	0x08014245
 800e660:	080143b0 	.word	0x080143b0
 800e664:	08014388 	.word	0x08014388
 800e668:	7ff00000 	.word	0x7ff00000
 800e66c:	7ca00000 	.word	0x7ca00000
 800e670:	7fefffff 	.word	0x7fefffff
 800e674:	f014 0310 	ands.w	r3, r4, #16
 800e678:	bf18      	it	ne
 800e67a:	236a      	movne	r3, #106	@ 0x6a
 800e67c:	4ea9      	ldr	r6, [pc, #676]	@ (800e924 <_strtod_l+0x854>)
 800e67e:	9308      	str	r3, [sp, #32]
 800e680:	4650      	mov	r0, sl
 800e682:	4659      	mov	r1, fp
 800e684:	2300      	movs	r3, #0
 800e686:	07e2      	lsls	r2, r4, #31
 800e688:	d504      	bpl.n	800e694 <_strtod_l+0x5c4>
 800e68a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e68e:	f7f1 ffd3 	bl	8000638 <__aeabi_dmul>
 800e692:	2301      	movs	r3, #1
 800e694:	1064      	asrs	r4, r4, #1
 800e696:	f106 0608 	add.w	r6, r6, #8
 800e69a:	d1f4      	bne.n	800e686 <_strtod_l+0x5b6>
 800e69c:	b10b      	cbz	r3, 800e6a2 <_strtod_l+0x5d2>
 800e69e:	4682      	mov	sl, r0
 800e6a0:	468b      	mov	fp, r1
 800e6a2:	9b08      	ldr	r3, [sp, #32]
 800e6a4:	b1b3      	cbz	r3, 800e6d4 <_strtod_l+0x604>
 800e6a6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e6aa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	4659      	mov	r1, fp
 800e6b2:	dd0f      	ble.n	800e6d4 <_strtod_l+0x604>
 800e6b4:	2b1f      	cmp	r3, #31
 800e6b6:	dd55      	ble.n	800e764 <_strtod_l+0x694>
 800e6b8:	2b34      	cmp	r3, #52	@ 0x34
 800e6ba:	bfde      	ittt	le
 800e6bc:	f04f 33ff 	movle.w	r3, #4294967295
 800e6c0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e6c4:	4093      	lslle	r3, r2
 800e6c6:	f04f 0a00 	mov.w	sl, #0
 800e6ca:	bfcc      	ite	gt
 800e6cc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e6d0:	ea03 0b01 	andle.w	fp, r3, r1
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	4650      	mov	r0, sl
 800e6da:	4659      	mov	r1, fp
 800e6dc:	f7f2 fa14 	bl	8000b08 <__aeabi_dcmpeq>
 800e6e0:	2800      	cmp	r0, #0
 800e6e2:	d1a6      	bne.n	800e632 <_strtod_l+0x562>
 800e6e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e6e6:	9300      	str	r3, [sp, #0]
 800e6e8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e6ea:	9805      	ldr	r0, [sp, #20]
 800e6ec:	462b      	mov	r3, r5
 800e6ee:	463a      	mov	r2, r7
 800e6f0:	f002 ff4a 	bl	8011588 <__s2b>
 800e6f4:	900a      	str	r0, [sp, #40]	@ 0x28
 800e6f6:	2800      	cmp	r0, #0
 800e6f8:	f43f af05 	beq.w	800e506 <_strtod_l+0x436>
 800e6fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e6fe:	2a00      	cmp	r2, #0
 800e700:	eba9 0308 	sub.w	r3, r9, r8
 800e704:	bfa8      	it	ge
 800e706:	2300      	movge	r3, #0
 800e708:	9312      	str	r3, [sp, #72]	@ 0x48
 800e70a:	2400      	movs	r4, #0
 800e70c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e710:	9316      	str	r3, [sp, #88]	@ 0x58
 800e712:	46a0      	mov	r8, r4
 800e714:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e716:	9805      	ldr	r0, [sp, #20]
 800e718:	6859      	ldr	r1, [r3, #4]
 800e71a:	f002 fe8d 	bl	8011438 <_Balloc>
 800e71e:	4681      	mov	r9, r0
 800e720:	2800      	cmp	r0, #0
 800e722:	f43f aef4 	beq.w	800e50e <_strtod_l+0x43e>
 800e726:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e728:	691a      	ldr	r2, [r3, #16]
 800e72a:	3202      	adds	r2, #2
 800e72c:	f103 010c 	add.w	r1, r3, #12
 800e730:	0092      	lsls	r2, r2, #2
 800e732:	300c      	adds	r0, #12
 800e734:	f001 fbab 	bl	800fe8e <memcpy>
 800e738:	ec4b ab10 	vmov	d0, sl, fp
 800e73c:	9805      	ldr	r0, [sp, #20]
 800e73e:	aa1c      	add	r2, sp, #112	@ 0x70
 800e740:	a91b      	add	r1, sp, #108	@ 0x6c
 800e742:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e746:	f003 fa5b 	bl	8011c00 <__d2b>
 800e74a:	901a      	str	r0, [sp, #104]	@ 0x68
 800e74c:	2800      	cmp	r0, #0
 800e74e:	f43f aede 	beq.w	800e50e <_strtod_l+0x43e>
 800e752:	9805      	ldr	r0, [sp, #20]
 800e754:	2101      	movs	r1, #1
 800e756:	f002 ffad 	bl	80116b4 <__i2b>
 800e75a:	4680      	mov	r8, r0
 800e75c:	b948      	cbnz	r0, 800e772 <_strtod_l+0x6a2>
 800e75e:	f04f 0800 	mov.w	r8, #0
 800e762:	e6d4      	b.n	800e50e <_strtod_l+0x43e>
 800e764:	f04f 32ff 	mov.w	r2, #4294967295
 800e768:	fa02 f303 	lsl.w	r3, r2, r3
 800e76c:	ea03 0a0a 	and.w	sl, r3, sl
 800e770:	e7b0      	b.n	800e6d4 <_strtod_l+0x604>
 800e772:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e774:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e776:	2d00      	cmp	r5, #0
 800e778:	bfab      	itete	ge
 800e77a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e77c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e77e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e780:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e782:	bfac      	ite	ge
 800e784:	18ef      	addge	r7, r5, r3
 800e786:	1b5e      	sublt	r6, r3, r5
 800e788:	9b08      	ldr	r3, [sp, #32]
 800e78a:	1aed      	subs	r5, r5, r3
 800e78c:	4415      	add	r5, r2
 800e78e:	4b66      	ldr	r3, [pc, #408]	@ (800e928 <_strtod_l+0x858>)
 800e790:	3d01      	subs	r5, #1
 800e792:	429d      	cmp	r5, r3
 800e794:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e798:	da50      	bge.n	800e83c <_strtod_l+0x76c>
 800e79a:	1b5b      	subs	r3, r3, r5
 800e79c:	2b1f      	cmp	r3, #31
 800e79e:	eba2 0203 	sub.w	r2, r2, r3
 800e7a2:	f04f 0101 	mov.w	r1, #1
 800e7a6:	dc3d      	bgt.n	800e824 <_strtod_l+0x754>
 800e7a8:	fa01 f303 	lsl.w	r3, r1, r3
 800e7ac:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	9310      	str	r3, [sp, #64]	@ 0x40
 800e7b2:	18bd      	adds	r5, r7, r2
 800e7b4:	9b08      	ldr	r3, [sp, #32]
 800e7b6:	42af      	cmp	r7, r5
 800e7b8:	4416      	add	r6, r2
 800e7ba:	441e      	add	r6, r3
 800e7bc:	463b      	mov	r3, r7
 800e7be:	bfa8      	it	ge
 800e7c0:	462b      	movge	r3, r5
 800e7c2:	42b3      	cmp	r3, r6
 800e7c4:	bfa8      	it	ge
 800e7c6:	4633      	movge	r3, r6
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	bfc2      	ittt	gt
 800e7cc:	1aed      	subgt	r5, r5, r3
 800e7ce:	1af6      	subgt	r6, r6, r3
 800e7d0:	1aff      	subgt	r7, r7, r3
 800e7d2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	dd16      	ble.n	800e806 <_strtod_l+0x736>
 800e7d8:	4641      	mov	r1, r8
 800e7da:	9805      	ldr	r0, [sp, #20]
 800e7dc:	461a      	mov	r2, r3
 800e7de:	f003 f829 	bl	8011834 <__pow5mult>
 800e7e2:	4680      	mov	r8, r0
 800e7e4:	2800      	cmp	r0, #0
 800e7e6:	d0ba      	beq.n	800e75e <_strtod_l+0x68e>
 800e7e8:	4601      	mov	r1, r0
 800e7ea:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e7ec:	9805      	ldr	r0, [sp, #20]
 800e7ee:	f002 ff77 	bl	80116e0 <__multiply>
 800e7f2:	900e      	str	r0, [sp, #56]	@ 0x38
 800e7f4:	2800      	cmp	r0, #0
 800e7f6:	f43f ae8a 	beq.w	800e50e <_strtod_l+0x43e>
 800e7fa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e7fc:	9805      	ldr	r0, [sp, #20]
 800e7fe:	f002 fe5b 	bl	80114b8 <_Bfree>
 800e802:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e804:	931a      	str	r3, [sp, #104]	@ 0x68
 800e806:	2d00      	cmp	r5, #0
 800e808:	dc1d      	bgt.n	800e846 <_strtod_l+0x776>
 800e80a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	dd23      	ble.n	800e858 <_strtod_l+0x788>
 800e810:	4649      	mov	r1, r9
 800e812:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e814:	9805      	ldr	r0, [sp, #20]
 800e816:	f003 f80d 	bl	8011834 <__pow5mult>
 800e81a:	4681      	mov	r9, r0
 800e81c:	b9e0      	cbnz	r0, 800e858 <_strtod_l+0x788>
 800e81e:	f04f 0900 	mov.w	r9, #0
 800e822:	e674      	b.n	800e50e <_strtod_l+0x43e>
 800e824:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e828:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e82c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e830:	35e2      	adds	r5, #226	@ 0xe2
 800e832:	fa01 f305 	lsl.w	r3, r1, r5
 800e836:	9310      	str	r3, [sp, #64]	@ 0x40
 800e838:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e83a:	e7ba      	b.n	800e7b2 <_strtod_l+0x6e2>
 800e83c:	2300      	movs	r3, #0
 800e83e:	9310      	str	r3, [sp, #64]	@ 0x40
 800e840:	2301      	movs	r3, #1
 800e842:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e844:	e7b5      	b.n	800e7b2 <_strtod_l+0x6e2>
 800e846:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e848:	9805      	ldr	r0, [sp, #20]
 800e84a:	462a      	mov	r2, r5
 800e84c:	f003 f84c 	bl	80118e8 <__lshift>
 800e850:	901a      	str	r0, [sp, #104]	@ 0x68
 800e852:	2800      	cmp	r0, #0
 800e854:	d1d9      	bne.n	800e80a <_strtod_l+0x73a>
 800e856:	e65a      	b.n	800e50e <_strtod_l+0x43e>
 800e858:	2e00      	cmp	r6, #0
 800e85a:	dd07      	ble.n	800e86c <_strtod_l+0x79c>
 800e85c:	4649      	mov	r1, r9
 800e85e:	9805      	ldr	r0, [sp, #20]
 800e860:	4632      	mov	r2, r6
 800e862:	f003 f841 	bl	80118e8 <__lshift>
 800e866:	4681      	mov	r9, r0
 800e868:	2800      	cmp	r0, #0
 800e86a:	d0d8      	beq.n	800e81e <_strtod_l+0x74e>
 800e86c:	2f00      	cmp	r7, #0
 800e86e:	dd08      	ble.n	800e882 <_strtod_l+0x7b2>
 800e870:	4641      	mov	r1, r8
 800e872:	9805      	ldr	r0, [sp, #20]
 800e874:	463a      	mov	r2, r7
 800e876:	f003 f837 	bl	80118e8 <__lshift>
 800e87a:	4680      	mov	r8, r0
 800e87c:	2800      	cmp	r0, #0
 800e87e:	f43f ae46 	beq.w	800e50e <_strtod_l+0x43e>
 800e882:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e884:	9805      	ldr	r0, [sp, #20]
 800e886:	464a      	mov	r2, r9
 800e888:	f003 f8b6 	bl	80119f8 <__mdiff>
 800e88c:	4604      	mov	r4, r0
 800e88e:	2800      	cmp	r0, #0
 800e890:	f43f ae3d 	beq.w	800e50e <_strtod_l+0x43e>
 800e894:	68c3      	ldr	r3, [r0, #12]
 800e896:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e898:	2300      	movs	r3, #0
 800e89a:	60c3      	str	r3, [r0, #12]
 800e89c:	4641      	mov	r1, r8
 800e89e:	f003 f88f 	bl	80119c0 <__mcmp>
 800e8a2:	2800      	cmp	r0, #0
 800e8a4:	da46      	bge.n	800e934 <_strtod_l+0x864>
 800e8a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8a8:	ea53 030a 	orrs.w	r3, r3, sl
 800e8ac:	d16c      	bne.n	800e988 <_strtod_l+0x8b8>
 800e8ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d168      	bne.n	800e988 <_strtod_l+0x8b8>
 800e8b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e8ba:	0d1b      	lsrs	r3, r3, #20
 800e8bc:	051b      	lsls	r3, r3, #20
 800e8be:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e8c2:	d961      	bls.n	800e988 <_strtod_l+0x8b8>
 800e8c4:	6963      	ldr	r3, [r4, #20]
 800e8c6:	b913      	cbnz	r3, 800e8ce <_strtod_l+0x7fe>
 800e8c8:	6923      	ldr	r3, [r4, #16]
 800e8ca:	2b01      	cmp	r3, #1
 800e8cc:	dd5c      	ble.n	800e988 <_strtod_l+0x8b8>
 800e8ce:	4621      	mov	r1, r4
 800e8d0:	2201      	movs	r2, #1
 800e8d2:	9805      	ldr	r0, [sp, #20]
 800e8d4:	f003 f808 	bl	80118e8 <__lshift>
 800e8d8:	4641      	mov	r1, r8
 800e8da:	4604      	mov	r4, r0
 800e8dc:	f003 f870 	bl	80119c0 <__mcmp>
 800e8e0:	2800      	cmp	r0, #0
 800e8e2:	dd51      	ble.n	800e988 <_strtod_l+0x8b8>
 800e8e4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e8e8:	9a08      	ldr	r2, [sp, #32]
 800e8ea:	0d1b      	lsrs	r3, r3, #20
 800e8ec:	051b      	lsls	r3, r3, #20
 800e8ee:	2a00      	cmp	r2, #0
 800e8f0:	d06b      	beq.n	800e9ca <_strtod_l+0x8fa>
 800e8f2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e8f6:	d868      	bhi.n	800e9ca <_strtod_l+0x8fa>
 800e8f8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e8fc:	f67f ae9d 	bls.w	800e63a <_strtod_l+0x56a>
 800e900:	4b0a      	ldr	r3, [pc, #40]	@ (800e92c <_strtod_l+0x85c>)
 800e902:	4650      	mov	r0, sl
 800e904:	4659      	mov	r1, fp
 800e906:	2200      	movs	r2, #0
 800e908:	f7f1 fe96 	bl	8000638 <__aeabi_dmul>
 800e90c:	4b08      	ldr	r3, [pc, #32]	@ (800e930 <_strtod_l+0x860>)
 800e90e:	400b      	ands	r3, r1
 800e910:	4682      	mov	sl, r0
 800e912:	468b      	mov	fp, r1
 800e914:	2b00      	cmp	r3, #0
 800e916:	f47f ae05 	bne.w	800e524 <_strtod_l+0x454>
 800e91a:	9a05      	ldr	r2, [sp, #20]
 800e91c:	2322      	movs	r3, #34	@ 0x22
 800e91e:	6013      	str	r3, [r2, #0]
 800e920:	e600      	b.n	800e524 <_strtod_l+0x454>
 800e922:	bf00      	nop
 800e924:	08014130 	.word	0x08014130
 800e928:	fffffc02 	.word	0xfffffc02
 800e92c:	39500000 	.word	0x39500000
 800e930:	7ff00000 	.word	0x7ff00000
 800e934:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e938:	d165      	bne.n	800ea06 <_strtod_l+0x936>
 800e93a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e93c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e940:	b35a      	cbz	r2, 800e99a <_strtod_l+0x8ca>
 800e942:	4a9f      	ldr	r2, [pc, #636]	@ (800ebc0 <_strtod_l+0xaf0>)
 800e944:	4293      	cmp	r3, r2
 800e946:	d12b      	bne.n	800e9a0 <_strtod_l+0x8d0>
 800e948:	9b08      	ldr	r3, [sp, #32]
 800e94a:	4651      	mov	r1, sl
 800e94c:	b303      	cbz	r3, 800e990 <_strtod_l+0x8c0>
 800e94e:	4b9d      	ldr	r3, [pc, #628]	@ (800ebc4 <_strtod_l+0xaf4>)
 800e950:	465a      	mov	r2, fp
 800e952:	4013      	ands	r3, r2
 800e954:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e958:	f04f 32ff 	mov.w	r2, #4294967295
 800e95c:	d81b      	bhi.n	800e996 <_strtod_l+0x8c6>
 800e95e:	0d1b      	lsrs	r3, r3, #20
 800e960:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e964:	fa02 f303 	lsl.w	r3, r2, r3
 800e968:	4299      	cmp	r1, r3
 800e96a:	d119      	bne.n	800e9a0 <_strtod_l+0x8d0>
 800e96c:	4b96      	ldr	r3, [pc, #600]	@ (800ebc8 <_strtod_l+0xaf8>)
 800e96e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e970:	429a      	cmp	r2, r3
 800e972:	d102      	bne.n	800e97a <_strtod_l+0x8aa>
 800e974:	3101      	adds	r1, #1
 800e976:	f43f adca 	beq.w	800e50e <_strtod_l+0x43e>
 800e97a:	4b92      	ldr	r3, [pc, #584]	@ (800ebc4 <_strtod_l+0xaf4>)
 800e97c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e97e:	401a      	ands	r2, r3
 800e980:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e984:	f04f 0a00 	mov.w	sl, #0
 800e988:	9b08      	ldr	r3, [sp, #32]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d1b8      	bne.n	800e900 <_strtod_l+0x830>
 800e98e:	e5c9      	b.n	800e524 <_strtod_l+0x454>
 800e990:	f04f 33ff 	mov.w	r3, #4294967295
 800e994:	e7e8      	b.n	800e968 <_strtod_l+0x898>
 800e996:	4613      	mov	r3, r2
 800e998:	e7e6      	b.n	800e968 <_strtod_l+0x898>
 800e99a:	ea53 030a 	orrs.w	r3, r3, sl
 800e99e:	d0a1      	beq.n	800e8e4 <_strtod_l+0x814>
 800e9a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e9a2:	b1db      	cbz	r3, 800e9dc <_strtod_l+0x90c>
 800e9a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e9a6:	4213      	tst	r3, r2
 800e9a8:	d0ee      	beq.n	800e988 <_strtod_l+0x8b8>
 800e9aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9ac:	9a08      	ldr	r2, [sp, #32]
 800e9ae:	4650      	mov	r0, sl
 800e9b0:	4659      	mov	r1, fp
 800e9b2:	b1bb      	cbz	r3, 800e9e4 <_strtod_l+0x914>
 800e9b4:	f7ff fb6b 	bl	800e08e <sulp>
 800e9b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e9bc:	ec53 2b10 	vmov	r2, r3, d0
 800e9c0:	f7f1 fc84 	bl	80002cc <__adddf3>
 800e9c4:	4682      	mov	sl, r0
 800e9c6:	468b      	mov	fp, r1
 800e9c8:	e7de      	b.n	800e988 <_strtod_l+0x8b8>
 800e9ca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e9ce:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e9d2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e9d6:	f04f 3aff 	mov.w	sl, #4294967295
 800e9da:	e7d5      	b.n	800e988 <_strtod_l+0x8b8>
 800e9dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e9de:	ea13 0f0a 	tst.w	r3, sl
 800e9e2:	e7e1      	b.n	800e9a8 <_strtod_l+0x8d8>
 800e9e4:	f7ff fb53 	bl	800e08e <sulp>
 800e9e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e9ec:	ec53 2b10 	vmov	r2, r3, d0
 800e9f0:	f7f1 fc6a 	bl	80002c8 <__aeabi_dsub>
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	4682      	mov	sl, r0
 800e9fa:	468b      	mov	fp, r1
 800e9fc:	f7f2 f884 	bl	8000b08 <__aeabi_dcmpeq>
 800ea00:	2800      	cmp	r0, #0
 800ea02:	d0c1      	beq.n	800e988 <_strtod_l+0x8b8>
 800ea04:	e619      	b.n	800e63a <_strtod_l+0x56a>
 800ea06:	4641      	mov	r1, r8
 800ea08:	4620      	mov	r0, r4
 800ea0a:	f003 f951 	bl	8011cb0 <__ratio>
 800ea0e:	ec57 6b10 	vmov	r6, r7, d0
 800ea12:	2200      	movs	r2, #0
 800ea14:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ea18:	4630      	mov	r0, r6
 800ea1a:	4639      	mov	r1, r7
 800ea1c:	f7f2 f888 	bl	8000b30 <__aeabi_dcmple>
 800ea20:	2800      	cmp	r0, #0
 800ea22:	d06f      	beq.n	800eb04 <_strtod_l+0xa34>
 800ea24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d17a      	bne.n	800eb20 <_strtod_l+0xa50>
 800ea2a:	f1ba 0f00 	cmp.w	sl, #0
 800ea2e:	d158      	bne.n	800eae2 <_strtod_l+0xa12>
 800ea30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d15a      	bne.n	800eaf0 <_strtod_l+0xa20>
 800ea3a:	4b64      	ldr	r3, [pc, #400]	@ (800ebcc <_strtod_l+0xafc>)
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	4630      	mov	r0, r6
 800ea40:	4639      	mov	r1, r7
 800ea42:	f7f2 f86b 	bl	8000b1c <__aeabi_dcmplt>
 800ea46:	2800      	cmp	r0, #0
 800ea48:	d159      	bne.n	800eafe <_strtod_l+0xa2e>
 800ea4a:	4630      	mov	r0, r6
 800ea4c:	4639      	mov	r1, r7
 800ea4e:	4b60      	ldr	r3, [pc, #384]	@ (800ebd0 <_strtod_l+0xb00>)
 800ea50:	2200      	movs	r2, #0
 800ea52:	f7f1 fdf1 	bl	8000638 <__aeabi_dmul>
 800ea56:	4606      	mov	r6, r0
 800ea58:	460f      	mov	r7, r1
 800ea5a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ea5e:	9606      	str	r6, [sp, #24]
 800ea60:	9307      	str	r3, [sp, #28]
 800ea62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ea66:	4d57      	ldr	r5, [pc, #348]	@ (800ebc4 <_strtod_l+0xaf4>)
 800ea68:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ea6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea6e:	401d      	ands	r5, r3
 800ea70:	4b58      	ldr	r3, [pc, #352]	@ (800ebd4 <_strtod_l+0xb04>)
 800ea72:	429d      	cmp	r5, r3
 800ea74:	f040 80b2 	bne.w	800ebdc <_strtod_l+0xb0c>
 800ea78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea7a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ea7e:	ec4b ab10 	vmov	d0, sl, fp
 800ea82:	f003 f84d 	bl	8011b20 <__ulp>
 800ea86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ea8a:	ec51 0b10 	vmov	r0, r1, d0
 800ea8e:	f7f1 fdd3 	bl	8000638 <__aeabi_dmul>
 800ea92:	4652      	mov	r2, sl
 800ea94:	465b      	mov	r3, fp
 800ea96:	f7f1 fc19 	bl	80002cc <__adddf3>
 800ea9a:	460b      	mov	r3, r1
 800ea9c:	4949      	ldr	r1, [pc, #292]	@ (800ebc4 <_strtod_l+0xaf4>)
 800ea9e:	4a4e      	ldr	r2, [pc, #312]	@ (800ebd8 <_strtod_l+0xb08>)
 800eaa0:	4019      	ands	r1, r3
 800eaa2:	4291      	cmp	r1, r2
 800eaa4:	4682      	mov	sl, r0
 800eaa6:	d942      	bls.n	800eb2e <_strtod_l+0xa5e>
 800eaa8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800eaaa:	4b47      	ldr	r3, [pc, #284]	@ (800ebc8 <_strtod_l+0xaf8>)
 800eaac:	429a      	cmp	r2, r3
 800eaae:	d103      	bne.n	800eab8 <_strtod_l+0x9e8>
 800eab0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eab2:	3301      	adds	r3, #1
 800eab4:	f43f ad2b 	beq.w	800e50e <_strtod_l+0x43e>
 800eab8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ebc8 <_strtod_l+0xaf8>
 800eabc:	f04f 3aff 	mov.w	sl, #4294967295
 800eac0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800eac2:	9805      	ldr	r0, [sp, #20]
 800eac4:	f002 fcf8 	bl	80114b8 <_Bfree>
 800eac8:	9805      	ldr	r0, [sp, #20]
 800eaca:	4649      	mov	r1, r9
 800eacc:	f002 fcf4 	bl	80114b8 <_Bfree>
 800ead0:	9805      	ldr	r0, [sp, #20]
 800ead2:	4641      	mov	r1, r8
 800ead4:	f002 fcf0 	bl	80114b8 <_Bfree>
 800ead8:	9805      	ldr	r0, [sp, #20]
 800eada:	4621      	mov	r1, r4
 800eadc:	f002 fcec 	bl	80114b8 <_Bfree>
 800eae0:	e618      	b.n	800e714 <_strtod_l+0x644>
 800eae2:	f1ba 0f01 	cmp.w	sl, #1
 800eae6:	d103      	bne.n	800eaf0 <_strtod_l+0xa20>
 800eae8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	f43f ada5 	beq.w	800e63a <_strtod_l+0x56a>
 800eaf0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800eba0 <_strtod_l+0xad0>
 800eaf4:	4f35      	ldr	r7, [pc, #212]	@ (800ebcc <_strtod_l+0xafc>)
 800eaf6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800eafa:	2600      	movs	r6, #0
 800eafc:	e7b1      	b.n	800ea62 <_strtod_l+0x992>
 800eafe:	4f34      	ldr	r7, [pc, #208]	@ (800ebd0 <_strtod_l+0xb00>)
 800eb00:	2600      	movs	r6, #0
 800eb02:	e7aa      	b.n	800ea5a <_strtod_l+0x98a>
 800eb04:	4b32      	ldr	r3, [pc, #200]	@ (800ebd0 <_strtod_l+0xb00>)
 800eb06:	4630      	mov	r0, r6
 800eb08:	4639      	mov	r1, r7
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	f7f1 fd94 	bl	8000638 <__aeabi_dmul>
 800eb10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb12:	4606      	mov	r6, r0
 800eb14:	460f      	mov	r7, r1
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d09f      	beq.n	800ea5a <_strtod_l+0x98a>
 800eb1a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800eb1e:	e7a0      	b.n	800ea62 <_strtod_l+0x992>
 800eb20:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800eba8 <_strtod_l+0xad8>
 800eb24:	ed8d 7b06 	vstr	d7, [sp, #24]
 800eb28:	ec57 6b17 	vmov	r6, r7, d7
 800eb2c:	e799      	b.n	800ea62 <_strtod_l+0x992>
 800eb2e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800eb32:	9b08      	ldr	r3, [sp, #32]
 800eb34:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d1c1      	bne.n	800eac0 <_strtod_l+0x9f0>
 800eb3c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800eb40:	0d1b      	lsrs	r3, r3, #20
 800eb42:	051b      	lsls	r3, r3, #20
 800eb44:	429d      	cmp	r5, r3
 800eb46:	d1bb      	bne.n	800eac0 <_strtod_l+0x9f0>
 800eb48:	4630      	mov	r0, r6
 800eb4a:	4639      	mov	r1, r7
 800eb4c:	f7f2 f8d4 	bl	8000cf8 <__aeabi_d2lz>
 800eb50:	f7f1 fd44 	bl	80005dc <__aeabi_l2d>
 800eb54:	4602      	mov	r2, r0
 800eb56:	460b      	mov	r3, r1
 800eb58:	4630      	mov	r0, r6
 800eb5a:	4639      	mov	r1, r7
 800eb5c:	f7f1 fbb4 	bl	80002c8 <__aeabi_dsub>
 800eb60:	460b      	mov	r3, r1
 800eb62:	4602      	mov	r2, r0
 800eb64:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800eb68:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800eb6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb6e:	ea46 060a 	orr.w	r6, r6, sl
 800eb72:	431e      	orrs	r6, r3
 800eb74:	d06f      	beq.n	800ec56 <_strtod_l+0xb86>
 800eb76:	a30e      	add	r3, pc, #56	@ (adr r3, 800ebb0 <_strtod_l+0xae0>)
 800eb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb7c:	f7f1 ffce 	bl	8000b1c <__aeabi_dcmplt>
 800eb80:	2800      	cmp	r0, #0
 800eb82:	f47f accf 	bne.w	800e524 <_strtod_l+0x454>
 800eb86:	a30c      	add	r3, pc, #48	@ (adr r3, 800ebb8 <_strtod_l+0xae8>)
 800eb88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eb90:	f7f1 ffe2 	bl	8000b58 <__aeabi_dcmpgt>
 800eb94:	2800      	cmp	r0, #0
 800eb96:	d093      	beq.n	800eac0 <_strtod_l+0x9f0>
 800eb98:	e4c4      	b.n	800e524 <_strtod_l+0x454>
 800eb9a:	bf00      	nop
 800eb9c:	f3af 8000 	nop.w
 800eba0:	00000000 	.word	0x00000000
 800eba4:	bff00000 	.word	0xbff00000
 800eba8:	00000000 	.word	0x00000000
 800ebac:	3ff00000 	.word	0x3ff00000
 800ebb0:	94a03595 	.word	0x94a03595
 800ebb4:	3fdfffff 	.word	0x3fdfffff
 800ebb8:	35afe535 	.word	0x35afe535
 800ebbc:	3fe00000 	.word	0x3fe00000
 800ebc0:	000fffff 	.word	0x000fffff
 800ebc4:	7ff00000 	.word	0x7ff00000
 800ebc8:	7fefffff 	.word	0x7fefffff
 800ebcc:	3ff00000 	.word	0x3ff00000
 800ebd0:	3fe00000 	.word	0x3fe00000
 800ebd4:	7fe00000 	.word	0x7fe00000
 800ebd8:	7c9fffff 	.word	0x7c9fffff
 800ebdc:	9b08      	ldr	r3, [sp, #32]
 800ebde:	b323      	cbz	r3, 800ec2a <_strtod_l+0xb5a>
 800ebe0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ebe4:	d821      	bhi.n	800ec2a <_strtod_l+0xb5a>
 800ebe6:	a328      	add	r3, pc, #160	@ (adr r3, 800ec88 <_strtod_l+0xbb8>)
 800ebe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebec:	4630      	mov	r0, r6
 800ebee:	4639      	mov	r1, r7
 800ebf0:	f7f1 ff9e 	bl	8000b30 <__aeabi_dcmple>
 800ebf4:	b1a0      	cbz	r0, 800ec20 <_strtod_l+0xb50>
 800ebf6:	4639      	mov	r1, r7
 800ebf8:	4630      	mov	r0, r6
 800ebfa:	f7f1 fff5 	bl	8000be8 <__aeabi_d2uiz>
 800ebfe:	2801      	cmp	r0, #1
 800ec00:	bf38      	it	cc
 800ec02:	2001      	movcc	r0, #1
 800ec04:	f7f1 fc9e 	bl	8000544 <__aeabi_ui2d>
 800ec08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec0a:	4606      	mov	r6, r0
 800ec0c:	460f      	mov	r7, r1
 800ec0e:	b9fb      	cbnz	r3, 800ec50 <_strtod_l+0xb80>
 800ec10:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ec14:	9014      	str	r0, [sp, #80]	@ 0x50
 800ec16:	9315      	str	r3, [sp, #84]	@ 0x54
 800ec18:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ec1c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ec20:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ec22:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ec26:	1b5b      	subs	r3, r3, r5
 800ec28:	9311      	str	r3, [sp, #68]	@ 0x44
 800ec2a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ec2e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ec32:	f002 ff75 	bl	8011b20 <__ulp>
 800ec36:	4650      	mov	r0, sl
 800ec38:	ec53 2b10 	vmov	r2, r3, d0
 800ec3c:	4659      	mov	r1, fp
 800ec3e:	f7f1 fcfb 	bl	8000638 <__aeabi_dmul>
 800ec42:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ec46:	f7f1 fb41 	bl	80002cc <__adddf3>
 800ec4a:	4682      	mov	sl, r0
 800ec4c:	468b      	mov	fp, r1
 800ec4e:	e770      	b.n	800eb32 <_strtod_l+0xa62>
 800ec50:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ec54:	e7e0      	b.n	800ec18 <_strtod_l+0xb48>
 800ec56:	a30e      	add	r3, pc, #56	@ (adr r3, 800ec90 <_strtod_l+0xbc0>)
 800ec58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec5c:	f7f1 ff5e 	bl	8000b1c <__aeabi_dcmplt>
 800ec60:	e798      	b.n	800eb94 <_strtod_l+0xac4>
 800ec62:	2300      	movs	r3, #0
 800ec64:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ec66:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ec68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ec6a:	6013      	str	r3, [r2, #0]
 800ec6c:	f7ff ba6d 	b.w	800e14a <_strtod_l+0x7a>
 800ec70:	2a65      	cmp	r2, #101	@ 0x65
 800ec72:	f43f ab66 	beq.w	800e342 <_strtod_l+0x272>
 800ec76:	2a45      	cmp	r2, #69	@ 0x45
 800ec78:	f43f ab63 	beq.w	800e342 <_strtod_l+0x272>
 800ec7c:	2301      	movs	r3, #1
 800ec7e:	f7ff bb9e 	b.w	800e3be <_strtod_l+0x2ee>
 800ec82:	bf00      	nop
 800ec84:	f3af 8000 	nop.w
 800ec88:	ffc00000 	.word	0xffc00000
 800ec8c:	41dfffff 	.word	0x41dfffff
 800ec90:	94a03595 	.word	0x94a03595
 800ec94:	3fcfffff 	.word	0x3fcfffff

0800ec98 <_strtod_r>:
 800ec98:	4b01      	ldr	r3, [pc, #4]	@ (800eca0 <_strtod_r+0x8>)
 800ec9a:	f7ff ba19 	b.w	800e0d0 <_strtod_l>
 800ec9e:	bf00      	nop
 800eca0:	2000002c 	.word	0x2000002c

0800eca4 <strtof>:
 800eca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eca8:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800ed68 <strtof+0xc4>
 800ecac:	4b29      	ldr	r3, [pc, #164]	@ (800ed54 <strtof+0xb0>)
 800ecae:	460a      	mov	r2, r1
 800ecb0:	ed2d 8b02 	vpush	{d8}
 800ecb4:	4601      	mov	r1, r0
 800ecb6:	f8d8 0000 	ldr.w	r0, [r8]
 800ecba:	f7ff fa09 	bl	800e0d0 <_strtod_l>
 800ecbe:	ec55 4b10 	vmov	r4, r5, d0
 800ecc2:	4622      	mov	r2, r4
 800ecc4:	462b      	mov	r3, r5
 800ecc6:	4620      	mov	r0, r4
 800ecc8:	4629      	mov	r1, r5
 800ecca:	f7f1 ff4f 	bl	8000b6c <__aeabi_dcmpun>
 800ecce:	b190      	cbz	r0, 800ecf6 <strtof+0x52>
 800ecd0:	2d00      	cmp	r5, #0
 800ecd2:	4821      	ldr	r0, [pc, #132]	@ (800ed58 <strtof+0xb4>)
 800ecd4:	da09      	bge.n	800ecea <strtof+0x46>
 800ecd6:	f001 f8f3 	bl	800fec0 <nanf>
 800ecda:	eeb1 8a40 	vneg.f32	s16, s0
 800ecde:	eeb0 0a48 	vmov.f32	s0, s16
 800ece2:	ecbd 8b02 	vpop	{d8}
 800ece6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecea:	ecbd 8b02 	vpop	{d8}
 800ecee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ecf2:	f001 b8e5 	b.w	800fec0 <nanf>
 800ecf6:	4620      	mov	r0, r4
 800ecf8:	4629      	mov	r1, r5
 800ecfa:	f7f1 ff95 	bl	8000c28 <__aeabi_d2f>
 800ecfe:	ee08 0a10 	vmov	s16, r0
 800ed02:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800ed5c <strtof+0xb8>
 800ed06:	eeb0 7ac8 	vabs.f32	s14, s16
 800ed0a:	eeb4 7a67 	vcmp.f32	s14, s15
 800ed0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed12:	dd11      	ble.n	800ed38 <strtof+0x94>
 800ed14:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800ed18:	4b11      	ldr	r3, [pc, #68]	@ (800ed60 <strtof+0xbc>)
 800ed1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ed1e:	4620      	mov	r0, r4
 800ed20:	4639      	mov	r1, r7
 800ed22:	f7f1 ff23 	bl	8000b6c <__aeabi_dcmpun>
 800ed26:	b980      	cbnz	r0, 800ed4a <strtof+0xa6>
 800ed28:	4b0d      	ldr	r3, [pc, #52]	@ (800ed60 <strtof+0xbc>)
 800ed2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ed2e:	4620      	mov	r0, r4
 800ed30:	4639      	mov	r1, r7
 800ed32:	f7f1 fefd 	bl	8000b30 <__aeabi_dcmple>
 800ed36:	b940      	cbnz	r0, 800ed4a <strtof+0xa6>
 800ed38:	ee18 3a10 	vmov	r3, s16
 800ed3c:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800ed40:	d1cd      	bne.n	800ecde <strtof+0x3a>
 800ed42:	4b08      	ldr	r3, [pc, #32]	@ (800ed64 <strtof+0xc0>)
 800ed44:	402b      	ands	r3, r5
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d0c9      	beq.n	800ecde <strtof+0x3a>
 800ed4a:	f8d8 3000 	ldr.w	r3, [r8]
 800ed4e:	2222      	movs	r2, #34	@ 0x22
 800ed50:	601a      	str	r2, [r3, #0]
 800ed52:	e7c4      	b.n	800ecde <strtof+0x3a>
 800ed54:	2000002c 	.word	0x2000002c
 800ed58:	08014245 	.word	0x08014245
 800ed5c:	7f7fffff 	.word	0x7f7fffff
 800ed60:	7fefffff 	.word	0x7fefffff
 800ed64:	7ff00000 	.word	0x7ff00000
 800ed68:	20000198 	.word	0x20000198

0800ed6c <__cvt>:
 800ed6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed70:	ec57 6b10 	vmov	r6, r7, d0
 800ed74:	2f00      	cmp	r7, #0
 800ed76:	460c      	mov	r4, r1
 800ed78:	4619      	mov	r1, r3
 800ed7a:	463b      	mov	r3, r7
 800ed7c:	bfbb      	ittet	lt
 800ed7e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ed82:	461f      	movlt	r7, r3
 800ed84:	2300      	movge	r3, #0
 800ed86:	232d      	movlt	r3, #45	@ 0x2d
 800ed88:	700b      	strb	r3, [r1, #0]
 800ed8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ed8c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ed90:	4691      	mov	r9, r2
 800ed92:	f023 0820 	bic.w	r8, r3, #32
 800ed96:	bfbc      	itt	lt
 800ed98:	4632      	movlt	r2, r6
 800ed9a:	4616      	movlt	r6, r2
 800ed9c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800eda0:	d005      	beq.n	800edae <__cvt+0x42>
 800eda2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800eda6:	d100      	bne.n	800edaa <__cvt+0x3e>
 800eda8:	3401      	adds	r4, #1
 800edaa:	2102      	movs	r1, #2
 800edac:	e000      	b.n	800edb0 <__cvt+0x44>
 800edae:	2103      	movs	r1, #3
 800edb0:	ab03      	add	r3, sp, #12
 800edb2:	9301      	str	r3, [sp, #4]
 800edb4:	ab02      	add	r3, sp, #8
 800edb6:	9300      	str	r3, [sp, #0]
 800edb8:	ec47 6b10 	vmov	d0, r6, r7
 800edbc:	4653      	mov	r3, sl
 800edbe:	4622      	mov	r2, r4
 800edc0:	f001 f92a 	bl	8010018 <_dtoa_r>
 800edc4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800edc8:	4605      	mov	r5, r0
 800edca:	d119      	bne.n	800ee00 <__cvt+0x94>
 800edcc:	f019 0f01 	tst.w	r9, #1
 800edd0:	d00e      	beq.n	800edf0 <__cvt+0x84>
 800edd2:	eb00 0904 	add.w	r9, r0, r4
 800edd6:	2200      	movs	r2, #0
 800edd8:	2300      	movs	r3, #0
 800edda:	4630      	mov	r0, r6
 800eddc:	4639      	mov	r1, r7
 800edde:	f7f1 fe93 	bl	8000b08 <__aeabi_dcmpeq>
 800ede2:	b108      	cbz	r0, 800ede8 <__cvt+0x7c>
 800ede4:	f8cd 900c 	str.w	r9, [sp, #12]
 800ede8:	2230      	movs	r2, #48	@ 0x30
 800edea:	9b03      	ldr	r3, [sp, #12]
 800edec:	454b      	cmp	r3, r9
 800edee:	d31e      	bcc.n	800ee2e <__cvt+0xc2>
 800edf0:	9b03      	ldr	r3, [sp, #12]
 800edf2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800edf4:	1b5b      	subs	r3, r3, r5
 800edf6:	4628      	mov	r0, r5
 800edf8:	6013      	str	r3, [r2, #0]
 800edfa:	b004      	add	sp, #16
 800edfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee00:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ee04:	eb00 0904 	add.w	r9, r0, r4
 800ee08:	d1e5      	bne.n	800edd6 <__cvt+0x6a>
 800ee0a:	7803      	ldrb	r3, [r0, #0]
 800ee0c:	2b30      	cmp	r3, #48	@ 0x30
 800ee0e:	d10a      	bne.n	800ee26 <__cvt+0xba>
 800ee10:	2200      	movs	r2, #0
 800ee12:	2300      	movs	r3, #0
 800ee14:	4630      	mov	r0, r6
 800ee16:	4639      	mov	r1, r7
 800ee18:	f7f1 fe76 	bl	8000b08 <__aeabi_dcmpeq>
 800ee1c:	b918      	cbnz	r0, 800ee26 <__cvt+0xba>
 800ee1e:	f1c4 0401 	rsb	r4, r4, #1
 800ee22:	f8ca 4000 	str.w	r4, [sl]
 800ee26:	f8da 3000 	ldr.w	r3, [sl]
 800ee2a:	4499      	add	r9, r3
 800ee2c:	e7d3      	b.n	800edd6 <__cvt+0x6a>
 800ee2e:	1c59      	adds	r1, r3, #1
 800ee30:	9103      	str	r1, [sp, #12]
 800ee32:	701a      	strb	r2, [r3, #0]
 800ee34:	e7d9      	b.n	800edea <__cvt+0x7e>

0800ee36 <__exponent>:
 800ee36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee38:	2900      	cmp	r1, #0
 800ee3a:	bfba      	itte	lt
 800ee3c:	4249      	neglt	r1, r1
 800ee3e:	232d      	movlt	r3, #45	@ 0x2d
 800ee40:	232b      	movge	r3, #43	@ 0x2b
 800ee42:	2909      	cmp	r1, #9
 800ee44:	7002      	strb	r2, [r0, #0]
 800ee46:	7043      	strb	r3, [r0, #1]
 800ee48:	dd29      	ble.n	800ee9e <__exponent+0x68>
 800ee4a:	f10d 0307 	add.w	r3, sp, #7
 800ee4e:	461d      	mov	r5, r3
 800ee50:	270a      	movs	r7, #10
 800ee52:	461a      	mov	r2, r3
 800ee54:	fbb1 f6f7 	udiv	r6, r1, r7
 800ee58:	fb07 1416 	mls	r4, r7, r6, r1
 800ee5c:	3430      	adds	r4, #48	@ 0x30
 800ee5e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ee62:	460c      	mov	r4, r1
 800ee64:	2c63      	cmp	r4, #99	@ 0x63
 800ee66:	f103 33ff 	add.w	r3, r3, #4294967295
 800ee6a:	4631      	mov	r1, r6
 800ee6c:	dcf1      	bgt.n	800ee52 <__exponent+0x1c>
 800ee6e:	3130      	adds	r1, #48	@ 0x30
 800ee70:	1e94      	subs	r4, r2, #2
 800ee72:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ee76:	1c41      	adds	r1, r0, #1
 800ee78:	4623      	mov	r3, r4
 800ee7a:	42ab      	cmp	r3, r5
 800ee7c:	d30a      	bcc.n	800ee94 <__exponent+0x5e>
 800ee7e:	f10d 0309 	add.w	r3, sp, #9
 800ee82:	1a9b      	subs	r3, r3, r2
 800ee84:	42ac      	cmp	r4, r5
 800ee86:	bf88      	it	hi
 800ee88:	2300      	movhi	r3, #0
 800ee8a:	3302      	adds	r3, #2
 800ee8c:	4403      	add	r3, r0
 800ee8e:	1a18      	subs	r0, r3, r0
 800ee90:	b003      	add	sp, #12
 800ee92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee94:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ee98:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ee9c:	e7ed      	b.n	800ee7a <__exponent+0x44>
 800ee9e:	2330      	movs	r3, #48	@ 0x30
 800eea0:	3130      	adds	r1, #48	@ 0x30
 800eea2:	7083      	strb	r3, [r0, #2]
 800eea4:	70c1      	strb	r1, [r0, #3]
 800eea6:	1d03      	adds	r3, r0, #4
 800eea8:	e7f1      	b.n	800ee8e <__exponent+0x58>
	...

0800eeac <_printf_float>:
 800eeac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eeb0:	b08d      	sub	sp, #52	@ 0x34
 800eeb2:	460c      	mov	r4, r1
 800eeb4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800eeb8:	4616      	mov	r6, r2
 800eeba:	461f      	mov	r7, r3
 800eebc:	4605      	mov	r5, r0
 800eebe:	f000 ff6f 	bl	800fda0 <_localeconv_r>
 800eec2:	6803      	ldr	r3, [r0, #0]
 800eec4:	9304      	str	r3, [sp, #16]
 800eec6:	4618      	mov	r0, r3
 800eec8:	f7f1 f9f2 	bl	80002b0 <strlen>
 800eecc:	2300      	movs	r3, #0
 800eece:	930a      	str	r3, [sp, #40]	@ 0x28
 800eed0:	f8d8 3000 	ldr.w	r3, [r8]
 800eed4:	9005      	str	r0, [sp, #20]
 800eed6:	3307      	adds	r3, #7
 800eed8:	f023 0307 	bic.w	r3, r3, #7
 800eedc:	f103 0208 	add.w	r2, r3, #8
 800eee0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800eee4:	f8d4 b000 	ldr.w	fp, [r4]
 800eee8:	f8c8 2000 	str.w	r2, [r8]
 800eeec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eef0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800eef4:	9307      	str	r3, [sp, #28]
 800eef6:	f8cd 8018 	str.w	r8, [sp, #24]
 800eefa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800eefe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef02:	4b9c      	ldr	r3, [pc, #624]	@ (800f174 <_printf_float+0x2c8>)
 800ef04:	f04f 32ff 	mov.w	r2, #4294967295
 800ef08:	f7f1 fe30 	bl	8000b6c <__aeabi_dcmpun>
 800ef0c:	bb70      	cbnz	r0, 800ef6c <_printf_float+0xc0>
 800ef0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef12:	4b98      	ldr	r3, [pc, #608]	@ (800f174 <_printf_float+0x2c8>)
 800ef14:	f04f 32ff 	mov.w	r2, #4294967295
 800ef18:	f7f1 fe0a 	bl	8000b30 <__aeabi_dcmple>
 800ef1c:	bb30      	cbnz	r0, 800ef6c <_printf_float+0xc0>
 800ef1e:	2200      	movs	r2, #0
 800ef20:	2300      	movs	r3, #0
 800ef22:	4640      	mov	r0, r8
 800ef24:	4649      	mov	r1, r9
 800ef26:	f7f1 fdf9 	bl	8000b1c <__aeabi_dcmplt>
 800ef2a:	b110      	cbz	r0, 800ef32 <_printf_float+0x86>
 800ef2c:	232d      	movs	r3, #45	@ 0x2d
 800ef2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ef32:	4a91      	ldr	r2, [pc, #580]	@ (800f178 <_printf_float+0x2cc>)
 800ef34:	4b91      	ldr	r3, [pc, #580]	@ (800f17c <_printf_float+0x2d0>)
 800ef36:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ef3a:	bf94      	ite	ls
 800ef3c:	4690      	movls	r8, r2
 800ef3e:	4698      	movhi	r8, r3
 800ef40:	2303      	movs	r3, #3
 800ef42:	6123      	str	r3, [r4, #16]
 800ef44:	f02b 0304 	bic.w	r3, fp, #4
 800ef48:	6023      	str	r3, [r4, #0]
 800ef4a:	f04f 0900 	mov.w	r9, #0
 800ef4e:	9700      	str	r7, [sp, #0]
 800ef50:	4633      	mov	r3, r6
 800ef52:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ef54:	4621      	mov	r1, r4
 800ef56:	4628      	mov	r0, r5
 800ef58:	f000 f9d2 	bl	800f300 <_printf_common>
 800ef5c:	3001      	adds	r0, #1
 800ef5e:	f040 808d 	bne.w	800f07c <_printf_float+0x1d0>
 800ef62:	f04f 30ff 	mov.w	r0, #4294967295
 800ef66:	b00d      	add	sp, #52	@ 0x34
 800ef68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef6c:	4642      	mov	r2, r8
 800ef6e:	464b      	mov	r3, r9
 800ef70:	4640      	mov	r0, r8
 800ef72:	4649      	mov	r1, r9
 800ef74:	f7f1 fdfa 	bl	8000b6c <__aeabi_dcmpun>
 800ef78:	b140      	cbz	r0, 800ef8c <_printf_float+0xe0>
 800ef7a:	464b      	mov	r3, r9
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	bfbc      	itt	lt
 800ef80:	232d      	movlt	r3, #45	@ 0x2d
 800ef82:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ef86:	4a7e      	ldr	r2, [pc, #504]	@ (800f180 <_printf_float+0x2d4>)
 800ef88:	4b7e      	ldr	r3, [pc, #504]	@ (800f184 <_printf_float+0x2d8>)
 800ef8a:	e7d4      	b.n	800ef36 <_printf_float+0x8a>
 800ef8c:	6863      	ldr	r3, [r4, #4]
 800ef8e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ef92:	9206      	str	r2, [sp, #24]
 800ef94:	1c5a      	adds	r2, r3, #1
 800ef96:	d13b      	bne.n	800f010 <_printf_float+0x164>
 800ef98:	2306      	movs	r3, #6
 800ef9a:	6063      	str	r3, [r4, #4]
 800ef9c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800efa0:	2300      	movs	r3, #0
 800efa2:	6022      	str	r2, [r4, #0]
 800efa4:	9303      	str	r3, [sp, #12]
 800efa6:	ab0a      	add	r3, sp, #40	@ 0x28
 800efa8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800efac:	ab09      	add	r3, sp, #36	@ 0x24
 800efae:	9300      	str	r3, [sp, #0]
 800efb0:	6861      	ldr	r1, [r4, #4]
 800efb2:	ec49 8b10 	vmov	d0, r8, r9
 800efb6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800efba:	4628      	mov	r0, r5
 800efbc:	f7ff fed6 	bl	800ed6c <__cvt>
 800efc0:	9b06      	ldr	r3, [sp, #24]
 800efc2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800efc4:	2b47      	cmp	r3, #71	@ 0x47
 800efc6:	4680      	mov	r8, r0
 800efc8:	d129      	bne.n	800f01e <_printf_float+0x172>
 800efca:	1cc8      	adds	r0, r1, #3
 800efcc:	db02      	blt.n	800efd4 <_printf_float+0x128>
 800efce:	6863      	ldr	r3, [r4, #4]
 800efd0:	4299      	cmp	r1, r3
 800efd2:	dd41      	ble.n	800f058 <_printf_float+0x1ac>
 800efd4:	f1aa 0a02 	sub.w	sl, sl, #2
 800efd8:	fa5f fa8a 	uxtb.w	sl, sl
 800efdc:	3901      	subs	r1, #1
 800efde:	4652      	mov	r2, sl
 800efe0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800efe4:	9109      	str	r1, [sp, #36]	@ 0x24
 800efe6:	f7ff ff26 	bl	800ee36 <__exponent>
 800efea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800efec:	1813      	adds	r3, r2, r0
 800efee:	2a01      	cmp	r2, #1
 800eff0:	4681      	mov	r9, r0
 800eff2:	6123      	str	r3, [r4, #16]
 800eff4:	dc02      	bgt.n	800effc <_printf_float+0x150>
 800eff6:	6822      	ldr	r2, [r4, #0]
 800eff8:	07d2      	lsls	r2, r2, #31
 800effa:	d501      	bpl.n	800f000 <_printf_float+0x154>
 800effc:	3301      	adds	r3, #1
 800effe:	6123      	str	r3, [r4, #16]
 800f000:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f004:	2b00      	cmp	r3, #0
 800f006:	d0a2      	beq.n	800ef4e <_printf_float+0xa2>
 800f008:	232d      	movs	r3, #45	@ 0x2d
 800f00a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f00e:	e79e      	b.n	800ef4e <_printf_float+0xa2>
 800f010:	9a06      	ldr	r2, [sp, #24]
 800f012:	2a47      	cmp	r2, #71	@ 0x47
 800f014:	d1c2      	bne.n	800ef9c <_printf_float+0xf0>
 800f016:	2b00      	cmp	r3, #0
 800f018:	d1c0      	bne.n	800ef9c <_printf_float+0xf0>
 800f01a:	2301      	movs	r3, #1
 800f01c:	e7bd      	b.n	800ef9a <_printf_float+0xee>
 800f01e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f022:	d9db      	bls.n	800efdc <_printf_float+0x130>
 800f024:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f028:	d118      	bne.n	800f05c <_printf_float+0x1b0>
 800f02a:	2900      	cmp	r1, #0
 800f02c:	6863      	ldr	r3, [r4, #4]
 800f02e:	dd0b      	ble.n	800f048 <_printf_float+0x19c>
 800f030:	6121      	str	r1, [r4, #16]
 800f032:	b913      	cbnz	r3, 800f03a <_printf_float+0x18e>
 800f034:	6822      	ldr	r2, [r4, #0]
 800f036:	07d0      	lsls	r0, r2, #31
 800f038:	d502      	bpl.n	800f040 <_printf_float+0x194>
 800f03a:	3301      	adds	r3, #1
 800f03c:	440b      	add	r3, r1
 800f03e:	6123      	str	r3, [r4, #16]
 800f040:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f042:	f04f 0900 	mov.w	r9, #0
 800f046:	e7db      	b.n	800f000 <_printf_float+0x154>
 800f048:	b913      	cbnz	r3, 800f050 <_printf_float+0x1a4>
 800f04a:	6822      	ldr	r2, [r4, #0]
 800f04c:	07d2      	lsls	r2, r2, #31
 800f04e:	d501      	bpl.n	800f054 <_printf_float+0x1a8>
 800f050:	3302      	adds	r3, #2
 800f052:	e7f4      	b.n	800f03e <_printf_float+0x192>
 800f054:	2301      	movs	r3, #1
 800f056:	e7f2      	b.n	800f03e <_printf_float+0x192>
 800f058:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f05c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f05e:	4299      	cmp	r1, r3
 800f060:	db05      	blt.n	800f06e <_printf_float+0x1c2>
 800f062:	6823      	ldr	r3, [r4, #0]
 800f064:	6121      	str	r1, [r4, #16]
 800f066:	07d8      	lsls	r0, r3, #31
 800f068:	d5ea      	bpl.n	800f040 <_printf_float+0x194>
 800f06a:	1c4b      	adds	r3, r1, #1
 800f06c:	e7e7      	b.n	800f03e <_printf_float+0x192>
 800f06e:	2900      	cmp	r1, #0
 800f070:	bfd4      	ite	le
 800f072:	f1c1 0202 	rsble	r2, r1, #2
 800f076:	2201      	movgt	r2, #1
 800f078:	4413      	add	r3, r2
 800f07a:	e7e0      	b.n	800f03e <_printf_float+0x192>
 800f07c:	6823      	ldr	r3, [r4, #0]
 800f07e:	055a      	lsls	r2, r3, #21
 800f080:	d407      	bmi.n	800f092 <_printf_float+0x1e6>
 800f082:	6923      	ldr	r3, [r4, #16]
 800f084:	4642      	mov	r2, r8
 800f086:	4631      	mov	r1, r6
 800f088:	4628      	mov	r0, r5
 800f08a:	47b8      	blx	r7
 800f08c:	3001      	adds	r0, #1
 800f08e:	d12b      	bne.n	800f0e8 <_printf_float+0x23c>
 800f090:	e767      	b.n	800ef62 <_printf_float+0xb6>
 800f092:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f096:	f240 80dd 	bls.w	800f254 <_printf_float+0x3a8>
 800f09a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f09e:	2200      	movs	r2, #0
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	f7f1 fd31 	bl	8000b08 <__aeabi_dcmpeq>
 800f0a6:	2800      	cmp	r0, #0
 800f0a8:	d033      	beq.n	800f112 <_printf_float+0x266>
 800f0aa:	4a37      	ldr	r2, [pc, #220]	@ (800f188 <_printf_float+0x2dc>)
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	4631      	mov	r1, r6
 800f0b0:	4628      	mov	r0, r5
 800f0b2:	47b8      	blx	r7
 800f0b4:	3001      	adds	r0, #1
 800f0b6:	f43f af54 	beq.w	800ef62 <_printf_float+0xb6>
 800f0ba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f0be:	4543      	cmp	r3, r8
 800f0c0:	db02      	blt.n	800f0c8 <_printf_float+0x21c>
 800f0c2:	6823      	ldr	r3, [r4, #0]
 800f0c4:	07d8      	lsls	r0, r3, #31
 800f0c6:	d50f      	bpl.n	800f0e8 <_printf_float+0x23c>
 800f0c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f0cc:	4631      	mov	r1, r6
 800f0ce:	4628      	mov	r0, r5
 800f0d0:	47b8      	blx	r7
 800f0d2:	3001      	adds	r0, #1
 800f0d4:	f43f af45 	beq.w	800ef62 <_printf_float+0xb6>
 800f0d8:	f04f 0900 	mov.w	r9, #0
 800f0dc:	f108 38ff 	add.w	r8, r8, #4294967295
 800f0e0:	f104 0a1a 	add.w	sl, r4, #26
 800f0e4:	45c8      	cmp	r8, r9
 800f0e6:	dc09      	bgt.n	800f0fc <_printf_float+0x250>
 800f0e8:	6823      	ldr	r3, [r4, #0]
 800f0ea:	079b      	lsls	r3, r3, #30
 800f0ec:	f100 8103 	bmi.w	800f2f6 <_printf_float+0x44a>
 800f0f0:	68e0      	ldr	r0, [r4, #12]
 800f0f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f0f4:	4298      	cmp	r0, r3
 800f0f6:	bfb8      	it	lt
 800f0f8:	4618      	movlt	r0, r3
 800f0fa:	e734      	b.n	800ef66 <_printf_float+0xba>
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	4652      	mov	r2, sl
 800f100:	4631      	mov	r1, r6
 800f102:	4628      	mov	r0, r5
 800f104:	47b8      	blx	r7
 800f106:	3001      	adds	r0, #1
 800f108:	f43f af2b 	beq.w	800ef62 <_printf_float+0xb6>
 800f10c:	f109 0901 	add.w	r9, r9, #1
 800f110:	e7e8      	b.n	800f0e4 <_printf_float+0x238>
 800f112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f114:	2b00      	cmp	r3, #0
 800f116:	dc39      	bgt.n	800f18c <_printf_float+0x2e0>
 800f118:	4a1b      	ldr	r2, [pc, #108]	@ (800f188 <_printf_float+0x2dc>)
 800f11a:	2301      	movs	r3, #1
 800f11c:	4631      	mov	r1, r6
 800f11e:	4628      	mov	r0, r5
 800f120:	47b8      	blx	r7
 800f122:	3001      	adds	r0, #1
 800f124:	f43f af1d 	beq.w	800ef62 <_printf_float+0xb6>
 800f128:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f12c:	ea59 0303 	orrs.w	r3, r9, r3
 800f130:	d102      	bne.n	800f138 <_printf_float+0x28c>
 800f132:	6823      	ldr	r3, [r4, #0]
 800f134:	07d9      	lsls	r1, r3, #31
 800f136:	d5d7      	bpl.n	800f0e8 <_printf_float+0x23c>
 800f138:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f13c:	4631      	mov	r1, r6
 800f13e:	4628      	mov	r0, r5
 800f140:	47b8      	blx	r7
 800f142:	3001      	adds	r0, #1
 800f144:	f43f af0d 	beq.w	800ef62 <_printf_float+0xb6>
 800f148:	f04f 0a00 	mov.w	sl, #0
 800f14c:	f104 0b1a 	add.w	fp, r4, #26
 800f150:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f152:	425b      	negs	r3, r3
 800f154:	4553      	cmp	r3, sl
 800f156:	dc01      	bgt.n	800f15c <_printf_float+0x2b0>
 800f158:	464b      	mov	r3, r9
 800f15a:	e793      	b.n	800f084 <_printf_float+0x1d8>
 800f15c:	2301      	movs	r3, #1
 800f15e:	465a      	mov	r2, fp
 800f160:	4631      	mov	r1, r6
 800f162:	4628      	mov	r0, r5
 800f164:	47b8      	blx	r7
 800f166:	3001      	adds	r0, #1
 800f168:	f43f aefb 	beq.w	800ef62 <_printf_float+0xb6>
 800f16c:	f10a 0a01 	add.w	sl, sl, #1
 800f170:	e7ee      	b.n	800f150 <_printf_float+0x2a4>
 800f172:	bf00      	nop
 800f174:	7fefffff 	.word	0x7fefffff
 800f178:	08014158 	.word	0x08014158
 800f17c:	0801415c 	.word	0x0801415c
 800f180:	08014160 	.word	0x08014160
 800f184:	08014164 	.word	0x08014164
 800f188:	08014168 	.word	0x08014168
 800f18c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f18e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f192:	4553      	cmp	r3, sl
 800f194:	bfa8      	it	ge
 800f196:	4653      	movge	r3, sl
 800f198:	2b00      	cmp	r3, #0
 800f19a:	4699      	mov	r9, r3
 800f19c:	dc36      	bgt.n	800f20c <_printf_float+0x360>
 800f19e:	f04f 0b00 	mov.w	fp, #0
 800f1a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f1a6:	f104 021a 	add.w	r2, r4, #26
 800f1aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f1ac:	9306      	str	r3, [sp, #24]
 800f1ae:	eba3 0309 	sub.w	r3, r3, r9
 800f1b2:	455b      	cmp	r3, fp
 800f1b4:	dc31      	bgt.n	800f21a <_printf_float+0x36e>
 800f1b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1b8:	459a      	cmp	sl, r3
 800f1ba:	dc3a      	bgt.n	800f232 <_printf_float+0x386>
 800f1bc:	6823      	ldr	r3, [r4, #0]
 800f1be:	07da      	lsls	r2, r3, #31
 800f1c0:	d437      	bmi.n	800f232 <_printf_float+0x386>
 800f1c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1c4:	ebaa 0903 	sub.w	r9, sl, r3
 800f1c8:	9b06      	ldr	r3, [sp, #24]
 800f1ca:	ebaa 0303 	sub.w	r3, sl, r3
 800f1ce:	4599      	cmp	r9, r3
 800f1d0:	bfa8      	it	ge
 800f1d2:	4699      	movge	r9, r3
 800f1d4:	f1b9 0f00 	cmp.w	r9, #0
 800f1d8:	dc33      	bgt.n	800f242 <_printf_float+0x396>
 800f1da:	f04f 0800 	mov.w	r8, #0
 800f1de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f1e2:	f104 0b1a 	add.w	fp, r4, #26
 800f1e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1e8:	ebaa 0303 	sub.w	r3, sl, r3
 800f1ec:	eba3 0309 	sub.w	r3, r3, r9
 800f1f0:	4543      	cmp	r3, r8
 800f1f2:	f77f af79 	ble.w	800f0e8 <_printf_float+0x23c>
 800f1f6:	2301      	movs	r3, #1
 800f1f8:	465a      	mov	r2, fp
 800f1fa:	4631      	mov	r1, r6
 800f1fc:	4628      	mov	r0, r5
 800f1fe:	47b8      	blx	r7
 800f200:	3001      	adds	r0, #1
 800f202:	f43f aeae 	beq.w	800ef62 <_printf_float+0xb6>
 800f206:	f108 0801 	add.w	r8, r8, #1
 800f20a:	e7ec      	b.n	800f1e6 <_printf_float+0x33a>
 800f20c:	4642      	mov	r2, r8
 800f20e:	4631      	mov	r1, r6
 800f210:	4628      	mov	r0, r5
 800f212:	47b8      	blx	r7
 800f214:	3001      	adds	r0, #1
 800f216:	d1c2      	bne.n	800f19e <_printf_float+0x2f2>
 800f218:	e6a3      	b.n	800ef62 <_printf_float+0xb6>
 800f21a:	2301      	movs	r3, #1
 800f21c:	4631      	mov	r1, r6
 800f21e:	4628      	mov	r0, r5
 800f220:	9206      	str	r2, [sp, #24]
 800f222:	47b8      	blx	r7
 800f224:	3001      	adds	r0, #1
 800f226:	f43f ae9c 	beq.w	800ef62 <_printf_float+0xb6>
 800f22a:	9a06      	ldr	r2, [sp, #24]
 800f22c:	f10b 0b01 	add.w	fp, fp, #1
 800f230:	e7bb      	b.n	800f1aa <_printf_float+0x2fe>
 800f232:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f236:	4631      	mov	r1, r6
 800f238:	4628      	mov	r0, r5
 800f23a:	47b8      	blx	r7
 800f23c:	3001      	adds	r0, #1
 800f23e:	d1c0      	bne.n	800f1c2 <_printf_float+0x316>
 800f240:	e68f      	b.n	800ef62 <_printf_float+0xb6>
 800f242:	9a06      	ldr	r2, [sp, #24]
 800f244:	464b      	mov	r3, r9
 800f246:	4442      	add	r2, r8
 800f248:	4631      	mov	r1, r6
 800f24a:	4628      	mov	r0, r5
 800f24c:	47b8      	blx	r7
 800f24e:	3001      	adds	r0, #1
 800f250:	d1c3      	bne.n	800f1da <_printf_float+0x32e>
 800f252:	e686      	b.n	800ef62 <_printf_float+0xb6>
 800f254:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f258:	f1ba 0f01 	cmp.w	sl, #1
 800f25c:	dc01      	bgt.n	800f262 <_printf_float+0x3b6>
 800f25e:	07db      	lsls	r3, r3, #31
 800f260:	d536      	bpl.n	800f2d0 <_printf_float+0x424>
 800f262:	2301      	movs	r3, #1
 800f264:	4642      	mov	r2, r8
 800f266:	4631      	mov	r1, r6
 800f268:	4628      	mov	r0, r5
 800f26a:	47b8      	blx	r7
 800f26c:	3001      	adds	r0, #1
 800f26e:	f43f ae78 	beq.w	800ef62 <_printf_float+0xb6>
 800f272:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f276:	4631      	mov	r1, r6
 800f278:	4628      	mov	r0, r5
 800f27a:	47b8      	blx	r7
 800f27c:	3001      	adds	r0, #1
 800f27e:	f43f ae70 	beq.w	800ef62 <_printf_float+0xb6>
 800f282:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f286:	2200      	movs	r2, #0
 800f288:	2300      	movs	r3, #0
 800f28a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f28e:	f7f1 fc3b 	bl	8000b08 <__aeabi_dcmpeq>
 800f292:	b9c0      	cbnz	r0, 800f2c6 <_printf_float+0x41a>
 800f294:	4653      	mov	r3, sl
 800f296:	f108 0201 	add.w	r2, r8, #1
 800f29a:	4631      	mov	r1, r6
 800f29c:	4628      	mov	r0, r5
 800f29e:	47b8      	blx	r7
 800f2a0:	3001      	adds	r0, #1
 800f2a2:	d10c      	bne.n	800f2be <_printf_float+0x412>
 800f2a4:	e65d      	b.n	800ef62 <_printf_float+0xb6>
 800f2a6:	2301      	movs	r3, #1
 800f2a8:	465a      	mov	r2, fp
 800f2aa:	4631      	mov	r1, r6
 800f2ac:	4628      	mov	r0, r5
 800f2ae:	47b8      	blx	r7
 800f2b0:	3001      	adds	r0, #1
 800f2b2:	f43f ae56 	beq.w	800ef62 <_printf_float+0xb6>
 800f2b6:	f108 0801 	add.w	r8, r8, #1
 800f2ba:	45d0      	cmp	r8, sl
 800f2bc:	dbf3      	blt.n	800f2a6 <_printf_float+0x3fa>
 800f2be:	464b      	mov	r3, r9
 800f2c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f2c4:	e6df      	b.n	800f086 <_printf_float+0x1da>
 800f2c6:	f04f 0800 	mov.w	r8, #0
 800f2ca:	f104 0b1a 	add.w	fp, r4, #26
 800f2ce:	e7f4      	b.n	800f2ba <_printf_float+0x40e>
 800f2d0:	2301      	movs	r3, #1
 800f2d2:	4642      	mov	r2, r8
 800f2d4:	e7e1      	b.n	800f29a <_printf_float+0x3ee>
 800f2d6:	2301      	movs	r3, #1
 800f2d8:	464a      	mov	r2, r9
 800f2da:	4631      	mov	r1, r6
 800f2dc:	4628      	mov	r0, r5
 800f2de:	47b8      	blx	r7
 800f2e0:	3001      	adds	r0, #1
 800f2e2:	f43f ae3e 	beq.w	800ef62 <_printf_float+0xb6>
 800f2e6:	f108 0801 	add.w	r8, r8, #1
 800f2ea:	68e3      	ldr	r3, [r4, #12]
 800f2ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f2ee:	1a5b      	subs	r3, r3, r1
 800f2f0:	4543      	cmp	r3, r8
 800f2f2:	dcf0      	bgt.n	800f2d6 <_printf_float+0x42a>
 800f2f4:	e6fc      	b.n	800f0f0 <_printf_float+0x244>
 800f2f6:	f04f 0800 	mov.w	r8, #0
 800f2fa:	f104 0919 	add.w	r9, r4, #25
 800f2fe:	e7f4      	b.n	800f2ea <_printf_float+0x43e>

0800f300 <_printf_common>:
 800f300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f304:	4616      	mov	r6, r2
 800f306:	4698      	mov	r8, r3
 800f308:	688a      	ldr	r2, [r1, #8]
 800f30a:	690b      	ldr	r3, [r1, #16]
 800f30c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f310:	4293      	cmp	r3, r2
 800f312:	bfb8      	it	lt
 800f314:	4613      	movlt	r3, r2
 800f316:	6033      	str	r3, [r6, #0]
 800f318:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f31c:	4607      	mov	r7, r0
 800f31e:	460c      	mov	r4, r1
 800f320:	b10a      	cbz	r2, 800f326 <_printf_common+0x26>
 800f322:	3301      	adds	r3, #1
 800f324:	6033      	str	r3, [r6, #0]
 800f326:	6823      	ldr	r3, [r4, #0]
 800f328:	0699      	lsls	r1, r3, #26
 800f32a:	bf42      	ittt	mi
 800f32c:	6833      	ldrmi	r3, [r6, #0]
 800f32e:	3302      	addmi	r3, #2
 800f330:	6033      	strmi	r3, [r6, #0]
 800f332:	6825      	ldr	r5, [r4, #0]
 800f334:	f015 0506 	ands.w	r5, r5, #6
 800f338:	d106      	bne.n	800f348 <_printf_common+0x48>
 800f33a:	f104 0a19 	add.w	sl, r4, #25
 800f33e:	68e3      	ldr	r3, [r4, #12]
 800f340:	6832      	ldr	r2, [r6, #0]
 800f342:	1a9b      	subs	r3, r3, r2
 800f344:	42ab      	cmp	r3, r5
 800f346:	dc26      	bgt.n	800f396 <_printf_common+0x96>
 800f348:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f34c:	6822      	ldr	r2, [r4, #0]
 800f34e:	3b00      	subs	r3, #0
 800f350:	bf18      	it	ne
 800f352:	2301      	movne	r3, #1
 800f354:	0692      	lsls	r2, r2, #26
 800f356:	d42b      	bmi.n	800f3b0 <_printf_common+0xb0>
 800f358:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f35c:	4641      	mov	r1, r8
 800f35e:	4638      	mov	r0, r7
 800f360:	47c8      	blx	r9
 800f362:	3001      	adds	r0, #1
 800f364:	d01e      	beq.n	800f3a4 <_printf_common+0xa4>
 800f366:	6823      	ldr	r3, [r4, #0]
 800f368:	6922      	ldr	r2, [r4, #16]
 800f36a:	f003 0306 	and.w	r3, r3, #6
 800f36e:	2b04      	cmp	r3, #4
 800f370:	bf02      	ittt	eq
 800f372:	68e5      	ldreq	r5, [r4, #12]
 800f374:	6833      	ldreq	r3, [r6, #0]
 800f376:	1aed      	subeq	r5, r5, r3
 800f378:	68a3      	ldr	r3, [r4, #8]
 800f37a:	bf0c      	ite	eq
 800f37c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f380:	2500      	movne	r5, #0
 800f382:	4293      	cmp	r3, r2
 800f384:	bfc4      	itt	gt
 800f386:	1a9b      	subgt	r3, r3, r2
 800f388:	18ed      	addgt	r5, r5, r3
 800f38a:	2600      	movs	r6, #0
 800f38c:	341a      	adds	r4, #26
 800f38e:	42b5      	cmp	r5, r6
 800f390:	d11a      	bne.n	800f3c8 <_printf_common+0xc8>
 800f392:	2000      	movs	r0, #0
 800f394:	e008      	b.n	800f3a8 <_printf_common+0xa8>
 800f396:	2301      	movs	r3, #1
 800f398:	4652      	mov	r2, sl
 800f39a:	4641      	mov	r1, r8
 800f39c:	4638      	mov	r0, r7
 800f39e:	47c8      	blx	r9
 800f3a0:	3001      	adds	r0, #1
 800f3a2:	d103      	bne.n	800f3ac <_printf_common+0xac>
 800f3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f3a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3ac:	3501      	adds	r5, #1
 800f3ae:	e7c6      	b.n	800f33e <_printf_common+0x3e>
 800f3b0:	18e1      	adds	r1, r4, r3
 800f3b2:	1c5a      	adds	r2, r3, #1
 800f3b4:	2030      	movs	r0, #48	@ 0x30
 800f3b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f3ba:	4422      	add	r2, r4
 800f3bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f3c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f3c4:	3302      	adds	r3, #2
 800f3c6:	e7c7      	b.n	800f358 <_printf_common+0x58>
 800f3c8:	2301      	movs	r3, #1
 800f3ca:	4622      	mov	r2, r4
 800f3cc:	4641      	mov	r1, r8
 800f3ce:	4638      	mov	r0, r7
 800f3d0:	47c8      	blx	r9
 800f3d2:	3001      	adds	r0, #1
 800f3d4:	d0e6      	beq.n	800f3a4 <_printf_common+0xa4>
 800f3d6:	3601      	adds	r6, #1
 800f3d8:	e7d9      	b.n	800f38e <_printf_common+0x8e>
	...

0800f3dc <_printf_i>:
 800f3dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f3e0:	7e0f      	ldrb	r7, [r1, #24]
 800f3e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f3e4:	2f78      	cmp	r7, #120	@ 0x78
 800f3e6:	4691      	mov	r9, r2
 800f3e8:	4680      	mov	r8, r0
 800f3ea:	460c      	mov	r4, r1
 800f3ec:	469a      	mov	sl, r3
 800f3ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f3f2:	d807      	bhi.n	800f404 <_printf_i+0x28>
 800f3f4:	2f62      	cmp	r7, #98	@ 0x62
 800f3f6:	d80a      	bhi.n	800f40e <_printf_i+0x32>
 800f3f8:	2f00      	cmp	r7, #0
 800f3fa:	f000 80d2 	beq.w	800f5a2 <_printf_i+0x1c6>
 800f3fe:	2f58      	cmp	r7, #88	@ 0x58
 800f400:	f000 80b9 	beq.w	800f576 <_printf_i+0x19a>
 800f404:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f408:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f40c:	e03a      	b.n	800f484 <_printf_i+0xa8>
 800f40e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f412:	2b15      	cmp	r3, #21
 800f414:	d8f6      	bhi.n	800f404 <_printf_i+0x28>
 800f416:	a101      	add	r1, pc, #4	@ (adr r1, 800f41c <_printf_i+0x40>)
 800f418:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f41c:	0800f475 	.word	0x0800f475
 800f420:	0800f489 	.word	0x0800f489
 800f424:	0800f405 	.word	0x0800f405
 800f428:	0800f405 	.word	0x0800f405
 800f42c:	0800f405 	.word	0x0800f405
 800f430:	0800f405 	.word	0x0800f405
 800f434:	0800f489 	.word	0x0800f489
 800f438:	0800f405 	.word	0x0800f405
 800f43c:	0800f405 	.word	0x0800f405
 800f440:	0800f405 	.word	0x0800f405
 800f444:	0800f405 	.word	0x0800f405
 800f448:	0800f589 	.word	0x0800f589
 800f44c:	0800f4b3 	.word	0x0800f4b3
 800f450:	0800f543 	.word	0x0800f543
 800f454:	0800f405 	.word	0x0800f405
 800f458:	0800f405 	.word	0x0800f405
 800f45c:	0800f5ab 	.word	0x0800f5ab
 800f460:	0800f405 	.word	0x0800f405
 800f464:	0800f4b3 	.word	0x0800f4b3
 800f468:	0800f405 	.word	0x0800f405
 800f46c:	0800f405 	.word	0x0800f405
 800f470:	0800f54b 	.word	0x0800f54b
 800f474:	6833      	ldr	r3, [r6, #0]
 800f476:	1d1a      	adds	r2, r3, #4
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	6032      	str	r2, [r6, #0]
 800f47c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f480:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f484:	2301      	movs	r3, #1
 800f486:	e09d      	b.n	800f5c4 <_printf_i+0x1e8>
 800f488:	6833      	ldr	r3, [r6, #0]
 800f48a:	6820      	ldr	r0, [r4, #0]
 800f48c:	1d19      	adds	r1, r3, #4
 800f48e:	6031      	str	r1, [r6, #0]
 800f490:	0606      	lsls	r6, r0, #24
 800f492:	d501      	bpl.n	800f498 <_printf_i+0xbc>
 800f494:	681d      	ldr	r5, [r3, #0]
 800f496:	e003      	b.n	800f4a0 <_printf_i+0xc4>
 800f498:	0645      	lsls	r5, r0, #25
 800f49a:	d5fb      	bpl.n	800f494 <_printf_i+0xb8>
 800f49c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f4a0:	2d00      	cmp	r5, #0
 800f4a2:	da03      	bge.n	800f4ac <_printf_i+0xd0>
 800f4a4:	232d      	movs	r3, #45	@ 0x2d
 800f4a6:	426d      	negs	r5, r5
 800f4a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f4ac:	4859      	ldr	r0, [pc, #356]	@ (800f614 <_printf_i+0x238>)
 800f4ae:	230a      	movs	r3, #10
 800f4b0:	e011      	b.n	800f4d6 <_printf_i+0xfa>
 800f4b2:	6821      	ldr	r1, [r4, #0]
 800f4b4:	6833      	ldr	r3, [r6, #0]
 800f4b6:	0608      	lsls	r0, r1, #24
 800f4b8:	f853 5b04 	ldr.w	r5, [r3], #4
 800f4bc:	d402      	bmi.n	800f4c4 <_printf_i+0xe8>
 800f4be:	0649      	lsls	r1, r1, #25
 800f4c0:	bf48      	it	mi
 800f4c2:	b2ad      	uxthmi	r5, r5
 800f4c4:	2f6f      	cmp	r7, #111	@ 0x6f
 800f4c6:	4853      	ldr	r0, [pc, #332]	@ (800f614 <_printf_i+0x238>)
 800f4c8:	6033      	str	r3, [r6, #0]
 800f4ca:	bf14      	ite	ne
 800f4cc:	230a      	movne	r3, #10
 800f4ce:	2308      	moveq	r3, #8
 800f4d0:	2100      	movs	r1, #0
 800f4d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f4d6:	6866      	ldr	r6, [r4, #4]
 800f4d8:	60a6      	str	r6, [r4, #8]
 800f4da:	2e00      	cmp	r6, #0
 800f4dc:	bfa2      	ittt	ge
 800f4de:	6821      	ldrge	r1, [r4, #0]
 800f4e0:	f021 0104 	bicge.w	r1, r1, #4
 800f4e4:	6021      	strge	r1, [r4, #0]
 800f4e6:	b90d      	cbnz	r5, 800f4ec <_printf_i+0x110>
 800f4e8:	2e00      	cmp	r6, #0
 800f4ea:	d04b      	beq.n	800f584 <_printf_i+0x1a8>
 800f4ec:	4616      	mov	r6, r2
 800f4ee:	fbb5 f1f3 	udiv	r1, r5, r3
 800f4f2:	fb03 5711 	mls	r7, r3, r1, r5
 800f4f6:	5dc7      	ldrb	r7, [r0, r7]
 800f4f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f4fc:	462f      	mov	r7, r5
 800f4fe:	42bb      	cmp	r3, r7
 800f500:	460d      	mov	r5, r1
 800f502:	d9f4      	bls.n	800f4ee <_printf_i+0x112>
 800f504:	2b08      	cmp	r3, #8
 800f506:	d10b      	bne.n	800f520 <_printf_i+0x144>
 800f508:	6823      	ldr	r3, [r4, #0]
 800f50a:	07df      	lsls	r7, r3, #31
 800f50c:	d508      	bpl.n	800f520 <_printf_i+0x144>
 800f50e:	6923      	ldr	r3, [r4, #16]
 800f510:	6861      	ldr	r1, [r4, #4]
 800f512:	4299      	cmp	r1, r3
 800f514:	bfde      	ittt	le
 800f516:	2330      	movle	r3, #48	@ 0x30
 800f518:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f51c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f520:	1b92      	subs	r2, r2, r6
 800f522:	6122      	str	r2, [r4, #16]
 800f524:	f8cd a000 	str.w	sl, [sp]
 800f528:	464b      	mov	r3, r9
 800f52a:	aa03      	add	r2, sp, #12
 800f52c:	4621      	mov	r1, r4
 800f52e:	4640      	mov	r0, r8
 800f530:	f7ff fee6 	bl	800f300 <_printf_common>
 800f534:	3001      	adds	r0, #1
 800f536:	d14a      	bne.n	800f5ce <_printf_i+0x1f2>
 800f538:	f04f 30ff 	mov.w	r0, #4294967295
 800f53c:	b004      	add	sp, #16
 800f53e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f542:	6823      	ldr	r3, [r4, #0]
 800f544:	f043 0320 	orr.w	r3, r3, #32
 800f548:	6023      	str	r3, [r4, #0]
 800f54a:	4833      	ldr	r0, [pc, #204]	@ (800f618 <_printf_i+0x23c>)
 800f54c:	2778      	movs	r7, #120	@ 0x78
 800f54e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f552:	6823      	ldr	r3, [r4, #0]
 800f554:	6831      	ldr	r1, [r6, #0]
 800f556:	061f      	lsls	r7, r3, #24
 800f558:	f851 5b04 	ldr.w	r5, [r1], #4
 800f55c:	d402      	bmi.n	800f564 <_printf_i+0x188>
 800f55e:	065f      	lsls	r7, r3, #25
 800f560:	bf48      	it	mi
 800f562:	b2ad      	uxthmi	r5, r5
 800f564:	6031      	str	r1, [r6, #0]
 800f566:	07d9      	lsls	r1, r3, #31
 800f568:	bf44      	itt	mi
 800f56a:	f043 0320 	orrmi.w	r3, r3, #32
 800f56e:	6023      	strmi	r3, [r4, #0]
 800f570:	b11d      	cbz	r5, 800f57a <_printf_i+0x19e>
 800f572:	2310      	movs	r3, #16
 800f574:	e7ac      	b.n	800f4d0 <_printf_i+0xf4>
 800f576:	4827      	ldr	r0, [pc, #156]	@ (800f614 <_printf_i+0x238>)
 800f578:	e7e9      	b.n	800f54e <_printf_i+0x172>
 800f57a:	6823      	ldr	r3, [r4, #0]
 800f57c:	f023 0320 	bic.w	r3, r3, #32
 800f580:	6023      	str	r3, [r4, #0]
 800f582:	e7f6      	b.n	800f572 <_printf_i+0x196>
 800f584:	4616      	mov	r6, r2
 800f586:	e7bd      	b.n	800f504 <_printf_i+0x128>
 800f588:	6833      	ldr	r3, [r6, #0]
 800f58a:	6825      	ldr	r5, [r4, #0]
 800f58c:	6961      	ldr	r1, [r4, #20]
 800f58e:	1d18      	adds	r0, r3, #4
 800f590:	6030      	str	r0, [r6, #0]
 800f592:	062e      	lsls	r6, r5, #24
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	d501      	bpl.n	800f59c <_printf_i+0x1c0>
 800f598:	6019      	str	r1, [r3, #0]
 800f59a:	e002      	b.n	800f5a2 <_printf_i+0x1c6>
 800f59c:	0668      	lsls	r0, r5, #25
 800f59e:	d5fb      	bpl.n	800f598 <_printf_i+0x1bc>
 800f5a0:	8019      	strh	r1, [r3, #0]
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	6123      	str	r3, [r4, #16]
 800f5a6:	4616      	mov	r6, r2
 800f5a8:	e7bc      	b.n	800f524 <_printf_i+0x148>
 800f5aa:	6833      	ldr	r3, [r6, #0]
 800f5ac:	1d1a      	adds	r2, r3, #4
 800f5ae:	6032      	str	r2, [r6, #0]
 800f5b0:	681e      	ldr	r6, [r3, #0]
 800f5b2:	6862      	ldr	r2, [r4, #4]
 800f5b4:	2100      	movs	r1, #0
 800f5b6:	4630      	mov	r0, r6
 800f5b8:	f7f0 fe2a 	bl	8000210 <memchr>
 800f5bc:	b108      	cbz	r0, 800f5c2 <_printf_i+0x1e6>
 800f5be:	1b80      	subs	r0, r0, r6
 800f5c0:	6060      	str	r0, [r4, #4]
 800f5c2:	6863      	ldr	r3, [r4, #4]
 800f5c4:	6123      	str	r3, [r4, #16]
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f5cc:	e7aa      	b.n	800f524 <_printf_i+0x148>
 800f5ce:	6923      	ldr	r3, [r4, #16]
 800f5d0:	4632      	mov	r2, r6
 800f5d2:	4649      	mov	r1, r9
 800f5d4:	4640      	mov	r0, r8
 800f5d6:	47d0      	blx	sl
 800f5d8:	3001      	adds	r0, #1
 800f5da:	d0ad      	beq.n	800f538 <_printf_i+0x15c>
 800f5dc:	6823      	ldr	r3, [r4, #0]
 800f5de:	079b      	lsls	r3, r3, #30
 800f5e0:	d413      	bmi.n	800f60a <_printf_i+0x22e>
 800f5e2:	68e0      	ldr	r0, [r4, #12]
 800f5e4:	9b03      	ldr	r3, [sp, #12]
 800f5e6:	4298      	cmp	r0, r3
 800f5e8:	bfb8      	it	lt
 800f5ea:	4618      	movlt	r0, r3
 800f5ec:	e7a6      	b.n	800f53c <_printf_i+0x160>
 800f5ee:	2301      	movs	r3, #1
 800f5f0:	4632      	mov	r2, r6
 800f5f2:	4649      	mov	r1, r9
 800f5f4:	4640      	mov	r0, r8
 800f5f6:	47d0      	blx	sl
 800f5f8:	3001      	adds	r0, #1
 800f5fa:	d09d      	beq.n	800f538 <_printf_i+0x15c>
 800f5fc:	3501      	adds	r5, #1
 800f5fe:	68e3      	ldr	r3, [r4, #12]
 800f600:	9903      	ldr	r1, [sp, #12]
 800f602:	1a5b      	subs	r3, r3, r1
 800f604:	42ab      	cmp	r3, r5
 800f606:	dcf2      	bgt.n	800f5ee <_printf_i+0x212>
 800f608:	e7eb      	b.n	800f5e2 <_printf_i+0x206>
 800f60a:	2500      	movs	r5, #0
 800f60c:	f104 0619 	add.w	r6, r4, #25
 800f610:	e7f5      	b.n	800f5fe <_printf_i+0x222>
 800f612:	bf00      	nop
 800f614:	0801416a 	.word	0x0801416a
 800f618:	0801417b 	.word	0x0801417b

0800f61c <_scanf_float>:
 800f61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f620:	b087      	sub	sp, #28
 800f622:	4617      	mov	r7, r2
 800f624:	9303      	str	r3, [sp, #12]
 800f626:	688b      	ldr	r3, [r1, #8]
 800f628:	1e5a      	subs	r2, r3, #1
 800f62a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f62e:	bf81      	itttt	hi
 800f630:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f634:	eb03 0b05 	addhi.w	fp, r3, r5
 800f638:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f63c:	608b      	strhi	r3, [r1, #8]
 800f63e:	680b      	ldr	r3, [r1, #0]
 800f640:	460a      	mov	r2, r1
 800f642:	f04f 0500 	mov.w	r5, #0
 800f646:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f64a:	f842 3b1c 	str.w	r3, [r2], #28
 800f64e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f652:	4680      	mov	r8, r0
 800f654:	460c      	mov	r4, r1
 800f656:	bf98      	it	ls
 800f658:	f04f 0b00 	movls.w	fp, #0
 800f65c:	9201      	str	r2, [sp, #4]
 800f65e:	4616      	mov	r6, r2
 800f660:	46aa      	mov	sl, r5
 800f662:	46a9      	mov	r9, r5
 800f664:	9502      	str	r5, [sp, #8]
 800f666:	68a2      	ldr	r2, [r4, #8]
 800f668:	b152      	cbz	r2, 800f680 <_scanf_float+0x64>
 800f66a:	683b      	ldr	r3, [r7, #0]
 800f66c:	781b      	ldrb	r3, [r3, #0]
 800f66e:	2b4e      	cmp	r3, #78	@ 0x4e
 800f670:	d864      	bhi.n	800f73c <_scanf_float+0x120>
 800f672:	2b40      	cmp	r3, #64	@ 0x40
 800f674:	d83c      	bhi.n	800f6f0 <_scanf_float+0xd4>
 800f676:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f67a:	b2c8      	uxtb	r0, r1
 800f67c:	280e      	cmp	r0, #14
 800f67e:	d93a      	bls.n	800f6f6 <_scanf_float+0xda>
 800f680:	f1b9 0f00 	cmp.w	r9, #0
 800f684:	d003      	beq.n	800f68e <_scanf_float+0x72>
 800f686:	6823      	ldr	r3, [r4, #0]
 800f688:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f68c:	6023      	str	r3, [r4, #0]
 800f68e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f692:	f1ba 0f01 	cmp.w	sl, #1
 800f696:	f200 8117 	bhi.w	800f8c8 <_scanf_float+0x2ac>
 800f69a:	9b01      	ldr	r3, [sp, #4]
 800f69c:	429e      	cmp	r6, r3
 800f69e:	f200 8108 	bhi.w	800f8b2 <_scanf_float+0x296>
 800f6a2:	2001      	movs	r0, #1
 800f6a4:	b007      	add	sp, #28
 800f6a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6aa:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f6ae:	2a0d      	cmp	r2, #13
 800f6b0:	d8e6      	bhi.n	800f680 <_scanf_float+0x64>
 800f6b2:	a101      	add	r1, pc, #4	@ (adr r1, 800f6b8 <_scanf_float+0x9c>)
 800f6b4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f6b8:	0800f7ff 	.word	0x0800f7ff
 800f6bc:	0800f681 	.word	0x0800f681
 800f6c0:	0800f681 	.word	0x0800f681
 800f6c4:	0800f681 	.word	0x0800f681
 800f6c8:	0800f85f 	.word	0x0800f85f
 800f6cc:	0800f837 	.word	0x0800f837
 800f6d0:	0800f681 	.word	0x0800f681
 800f6d4:	0800f681 	.word	0x0800f681
 800f6d8:	0800f80d 	.word	0x0800f80d
 800f6dc:	0800f681 	.word	0x0800f681
 800f6e0:	0800f681 	.word	0x0800f681
 800f6e4:	0800f681 	.word	0x0800f681
 800f6e8:	0800f681 	.word	0x0800f681
 800f6ec:	0800f7c5 	.word	0x0800f7c5
 800f6f0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f6f4:	e7db      	b.n	800f6ae <_scanf_float+0x92>
 800f6f6:	290e      	cmp	r1, #14
 800f6f8:	d8c2      	bhi.n	800f680 <_scanf_float+0x64>
 800f6fa:	a001      	add	r0, pc, #4	@ (adr r0, 800f700 <_scanf_float+0xe4>)
 800f6fc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f700:	0800f7b5 	.word	0x0800f7b5
 800f704:	0800f681 	.word	0x0800f681
 800f708:	0800f7b5 	.word	0x0800f7b5
 800f70c:	0800f84b 	.word	0x0800f84b
 800f710:	0800f681 	.word	0x0800f681
 800f714:	0800f75d 	.word	0x0800f75d
 800f718:	0800f79b 	.word	0x0800f79b
 800f71c:	0800f79b 	.word	0x0800f79b
 800f720:	0800f79b 	.word	0x0800f79b
 800f724:	0800f79b 	.word	0x0800f79b
 800f728:	0800f79b 	.word	0x0800f79b
 800f72c:	0800f79b 	.word	0x0800f79b
 800f730:	0800f79b 	.word	0x0800f79b
 800f734:	0800f79b 	.word	0x0800f79b
 800f738:	0800f79b 	.word	0x0800f79b
 800f73c:	2b6e      	cmp	r3, #110	@ 0x6e
 800f73e:	d809      	bhi.n	800f754 <_scanf_float+0x138>
 800f740:	2b60      	cmp	r3, #96	@ 0x60
 800f742:	d8b2      	bhi.n	800f6aa <_scanf_float+0x8e>
 800f744:	2b54      	cmp	r3, #84	@ 0x54
 800f746:	d07b      	beq.n	800f840 <_scanf_float+0x224>
 800f748:	2b59      	cmp	r3, #89	@ 0x59
 800f74a:	d199      	bne.n	800f680 <_scanf_float+0x64>
 800f74c:	2d07      	cmp	r5, #7
 800f74e:	d197      	bne.n	800f680 <_scanf_float+0x64>
 800f750:	2508      	movs	r5, #8
 800f752:	e02c      	b.n	800f7ae <_scanf_float+0x192>
 800f754:	2b74      	cmp	r3, #116	@ 0x74
 800f756:	d073      	beq.n	800f840 <_scanf_float+0x224>
 800f758:	2b79      	cmp	r3, #121	@ 0x79
 800f75a:	e7f6      	b.n	800f74a <_scanf_float+0x12e>
 800f75c:	6821      	ldr	r1, [r4, #0]
 800f75e:	05c8      	lsls	r0, r1, #23
 800f760:	d51b      	bpl.n	800f79a <_scanf_float+0x17e>
 800f762:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f766:	6021      	str	r1, [r4, #0]
 800f768:	f109 0901 	add.w	r9, r9, #1
 800f76c:	f1bb 0f00 	cmp.w	fp, #0
 800f770:	d003      	beq.n	800f77a <_scanf_float+0x15e>
 800f772:	3201      	adds	r2, #1
 800f774:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f778:	60a2      	str	r2, [r4, #8]
 800f77a:	68a3      	ldr	r3, [r4, #8]
 800f77c:	3b01      	subs	r3, #1
 800f77e:	60a3      	str	r3, [r4, #8]
 800f780:	6923      	ldr	r3, [r4, #16]
 800f782:	3301      	adds	r3, #1
 800f784:	6123      	str	r3, [r4, #16]
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	3b01      	subs	r3, #1
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	607b      	str	r3, [r7, #4]
 800f78e:	f340 8087 	ble.w	800f8a0 <_scanf_float+0x284>
 800f792:	683b      	ldr	r3, [r7, #0]
 800f794:	3301      	adds	r3, #1
 800f796:	603b      	str	r3, [r7, #0]
 800f798:	e765      	b.n	800f666 <_scanf_float+0x4a>
 800f79a:	eb1a 0105 	adds.w	r1, sl, r5
 800f79e:	f47f af6f 	bne.w	800f680 <_scanf_float+0x64>
 800f7a2:	6822      	ldr	r2, [r4, #0]
 800f7a4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f7a8:	6022      	str	r2, [r4, #0]
 800f7aa:	460d      	mov	r5, r1
 800f7ac:	468a      	mov	sl, r1
 800f7ae:	f806 3b01 	strb.w	r3, [r6], #1
 800f7b2:	e7e2      	b.n	800f77a <_scanf_float+0x15e>
 800f7b4:	6822      	ldr	r2, [r4, #0]
 800f7b6:	0610      	lsls	r0, r2, #24
 800f7b8:	f57f af62 	bpl.w	800f680 <_scanf_float+0x64>
 800f7bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f7c0:	6022      	str	r2, [r4, #0]
 800f7c2:	e7f4      	b.n	800f7ae <_scanf_float+0x192>
 800f7c4:	f1ba 0f00 	cmp.w	sl, #0
 800f7c8:	d10e      	bne.n	800f7e8 <_scanf_float+0x1cc>
 800f7ca:	f1b9 0f00 	cmp.w	r9, #0
 800f7ce:	d10e      	bne.n	800f7ee <_scanf_float+0x1d2>
 800f7d0:	6822      	ldr	r2, [r4, #0]
 800f7d2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f7d6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f7da:	d108      	bne.n	800f7ee <_scanf_float+0x1d2>
 800f7dc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f7e0:	6022      	str	r2, [r4, #0]
 800f7e2:	f04f 0a01 	mov.w	sl, #1
 800f7e6:	e7e2      	b.n	800f7ae <_scanf_float+0x192>
 800f7e8:	f1ba 0f02 	cmp.w	sl, #2
 800f7ec:	d055      	beq.n	800f89a <_scanf_float+0x27e>
 800f7ee:	2d01      	cmp	r5, #1
 800f7f0:	d002      	beq.n	800f7f8 <_scanf_float+0x1dc>
 800f7f2:	2d04      	cmp	r5, #4
 800f7f4:	f47f af44 	bne.w	800f680 <_scanf_float+0x64>
 800f7f8:	3501      	adds	r5, #1
 800f7fa:	b2ed      	uxtb	r5, r5
 800f7fc:	e7d7      	b.n	800f7ae <_scanf_float+0x192>
 800f7fe:	f1ba 0f01 	cmp.w	sl, #1
 800f802:	f47f af3d 	bne.w	800f680 <_scanf_float+0x64>
 800f806:	f04f 0a02 	mov.w	sl, #2
 800f80a:	e7d0      	b.n	800f7ae <_scanf_float+0x192>
 800f80c:	b97d      	cbnz	r5, 800f82e <_scanf_float+0x212>
 800f80e:	f1b9 0f00 	cmp.w	r9, #0
 800f812:	f47f af38 	bne.w	800f686 <_scanf_float+0x6a>
 800f816:	6822      	ldr	r2, [r4, #0]
 800f818:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f81c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f820:	f040 8108 	bne.w	800fa34 <_scanf_float+0x418>
 800f824:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f828:	6022      	str	r2, [r4, #0]
 800f82a:	2501      	movs	r5, #1
 800f82c:	e7bf      	b.n	800f7ae <_scanf_float+0x192>
 800f82e:	2d03      	cmp	r5, #3
 800f830:	d0e2      	beq.n	800f7f8 <_scanf_float+0x1dc>
 800f832:	2d05      	cmp	r5, #5
 800f834:	e7de      	b.n	800f7f4 <_scanf_float+0x1d8>
 800f836:	2d02      	cmp	r5, #2
 800f838:	f47f af22 	bne.w	800f680 <_scanf_float+0x64>
 800f83c:	2503      	movs	r5, #3
 800f83e:	e7b6      	b.n	800f7ae <_scanf_float+0x192>
 800f840:	2d06      	cmp	r5, #6
 800f842:	f47f af1d 	bne.w	800f680 <_scanf_float+0x64>
 800f846:	2507      	movs	r5, #7
 800f848:	e7b1      	b.n	800f7ae <_scanf_float+0x192>
 800f84a:	6822      	ldr	r2, [r4, #0]
 800f84c:	0591      	lsls	r1, r2, #22
 800f84e:	f57f af17 	bpl.w	800f680 <_scanf_float+0x64>
 800f852:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f856:	6022      	str	r2, [r4, #0]
 800f858:	f8cd 9008 	str.w	r9, [sp, #8]
 800f85c:	e7a7      	b.n	800f7ae <_scanf_float+0x192>
 800f85e:	6822      	ldr	r2, [r4, #0]
 800f860:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f864:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f868:	d006      	beq.n	800f878 <_scanf_float+0x25c>
 800f86a:	0550      	lsls	r0, r2, #21
 800f86c:	f57f af08 	bpl.w	800f680 <_scanf_float+0x64>
 800f870:	f1b9 0f00 	cmp.w	r9, #0
 800f874:	f000 80de 	beq.w	800fa34 <_scanf_float+0x418>
 800f878:	0591      	lsls	r1, r2, #22
 800f87a:	bf58      	it	pl
 800f87c:	9902      	ldrpl	r1, [sp, #8]
 800f87e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f882:	bf58      	it	pl
 800f884:	eba9 0101 	subpl.w	r1, r9, r1
 800f888:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f88c:	bf58      	it	pl
 800f88e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f892:	6022      	str	r2, [r4, #0]
 800f894:	f04f 0900 	mov.w	r9, #0
 800f898:	e789      	b.n	800f7ae <_scanf_float+0x192>
 800f89a:	f04f 0a03 	mov.w	sl, #3
 800f89e:	e786      	b.n	800f7ae <_scanf_float+0x192>
 800f8a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f8a4:	4639      	mov	r1, r7
 800f8a6:	4640      	mov	r0, r8
 800f8a8:	4798      	blx	r3
 800f8aa:	2800      	cmp	r0, #0
 800f8ac:	f43f aedb 	beq.w	800f666 <_scanf_float+0x4a>
 800f8b0:	e6e6      	b.n	800f680 <_scanf_float+0x64>
 800f8b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f8b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f8ba:	463a      	mov	r2, r7
 800f8bc:	4640      	mov	r0, r8
 800f8be:	4798      	blx	r3
 800f8c0:	6923      	ldr	r3, [r4, #16]
 800f8c2:	3b01      	subs	r3, #1
 800f8c4:	6123      	str	r3, [r4, #16]
 800f8c6:	e6e8      	b.n	800f69a <_scanf_float+0x7e>
 800f8c8:	1e6b      	subs	r3, r5, #1
 800f8ca:	2b06      	cmp	r3, #6
 800f8cc:	d824      	bhi.n	800f918 <_scanf_float+0x2fc>
 800f8ce:	2d02      	cmp	r5, #2
 800f8d0:	d836      	bhi.n	800f940 <_scanf_float+0x324>
 800f8d2:	9b01      	ldr	r3, [sp, #4]
 800f8d4:	429e      	cmp	r6, r3
 800f8d6:	f67f aee4 	bls.w	800f6a2 <_scanf_float+0x86>
 800f8da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f8de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f8e2:	463a      	mov	r2, r7
 800f8e4:	4640      	mov	r0, r8
 800f8e6:	4798      	blx	r3
 800f8e8:	6923      	ldr	r3, [r4, #16]
 800f8ea:	3b01      	subs	r3, #1
 800f8ec:	6123      	str	r3, [r4, #16]
 800f8ee:	e7f0      	b.n	800f8d2 <_scanf_float+0x2b6>
 800f8f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f8f4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f8f8:	463a      	mov	r2, r7
 800f8fa:	4640      	mov	r0, r8
 800f8fc:	4798      	blx	r3
 800f8fe:	6923      	ldr	r3, [r4, #16]
 800f900:	3b01      	subs	r3, #1
 800f902:	6123      	str	r3, [r4, #16]
 800f904:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f908:	fa5f fa8a 	uxtb.w	sl, sl
 800f90c:	f1ba 0f02 	cmp.w	sl, #2
 800f910:	d1ee      	bne.n	800f8f0 <_scanf_float+0x2d4>
 800f912:	3d03      	subs	r5, #3
 800f914:	b2ed      	uxtb	r5, r5
 800f916:	1b76      	subs	r6, r6, r5
 800f918:	6823      	ldr	r3, [r4, #0]
 800f91a:	05da      	lsls	r2, r3, #23
 800f91c:	d530      	bpl.n	800f980 <_scanf_float+0x364>
 800f91e:	055b      	lsls	r3, r3, #21
 800f920:	d511      	bpl.n	800f946 <_scanf_float+0x32a>
 800f922:	9b01      	ldr	r3, [sp, #4]
 800f924:	429e      	cmp	r6, r3
 800f926:	f67f aebc 	bls.w	800f6a2 <_scanf_float+0x86>
 800f92a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f92e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f932:	463a      	mov	r2, r7
 800f934:	4640      	mov	r0, r8
 800f936:	4798      	blx	r3
 800f938:	6923      	ldr	r3, [r4, #16]
 800f93a:	3b01      	subs	r3, #1
 800f93c:	6123      	str	r3, [r4, #16]
 800f93e:	e7f0      	b.n	800f922 <_scanf_float+0x306>
 800f940:	46aa      	mov	sl, r5
 800f942:	46b3      	mov	fp, r6
 800f944:	e7de      	b.n	800f904 <_scanf_float+0x2e8>
 800f946:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f94a:	6923      	ldr	r3, [r4, #16]
 800f94c:	2965      	cmp	r1, #101	@ 0x65
 800f94e:	f103 33ff 	add.w	r3, r3, #4294967295
 800f952:	f106 35ff 	add.w	r5, r6, #4294967295
 800f956:	6123      	str	r3, [r4, #16]
 800f958:	d00c      	beq.n	800f974 <_scanf_float+0x358>
 800f95a:	2945      	cmp	r1, #69	@ 0x45
 800f95c:	d00a      	beq.n	800f974 <_scanf_float+0x358>
 800f95e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f962:	463a      	mov	r2, r7
 800f964:	4640      	mov	r0, r8
 800f966:	4798      	blx	r3
 800f968:	6923      	ldr	r3, [r4, #16]
 800f96a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f96e:	3b01      	subs	r3, #1
 800f970:	1eb5      	subs	r5, r6, #2
 800f972:	6123      	str	r3, [r4, #16]
 800f974:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f978:	463a      	mov	r2, r7
 800f97a:	4640      	mov	r0, r8
 800f97c:	4798      	blx	r3
 800f97e:	462e      	mov	r6, r5
 800f980:	6822      	ldr	r2, [r4, #0]
 800f982:	f012 0210 	ands.w	r2, r2, #16
 800f986:	d001      	beq.n	800f98c <_scanf_float+0x370>
 800f988:	2000      	movs	r0, #0
 800f98a:	e68b      	b.n	800f6a4 <_scanf_float+0x88>
 800f98c:	7032      	strb	r2, [r6, #0]
 800f98e:	6823      	ldr	r3, [r4, #0]
 800f990:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f994:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f998:	d11c      	bne.n	800f9d4 <_scanf_float+0x3b8>
 800f99a:	9b02      	ldr	r3, [sp, #8]
 800f99c:	454b      	cmp	r3, r9
 800f99e:	eba3 0209 	sub.w	r2, r3, r9
 800f9a2:	d123      	bne.n	800f9ec <_scanf_float+0x3d0>
 800f9a4:	9901      	ldr	r1, [sp, #4]
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	4640      	mov	r0, r8
 800f9aa:	f7ff f975 	bl	800ec98 <_strtod_r>
 800f9ae:	9b03      	ldr	r3, [sp, #12]
 800f9b0:	6821      	ldr	r1, [r4, #0]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	f011 0f02 	tst.w	r1, #2
 800f9b8:	ec57 6b10 	vmov	r6, r7, d0
 800f9bc:	f103 0204 	add.w	r2, r3, #4
 800f9c0:	d01f      	beq.n	800fa02 <_scanf_float+0x3e6>
 800f9c2:	9903      	ldr	r1, [sp, #12]
 800f9c4:	600a      	str	r2, [r1, #0]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	e9c3 6700 	strd	r6, r7, [r3]
 800f9cc:	68e3      	ldr	r3, [r4, #12]
 800f9ce:	3301      	adds	r3, #1
 800f9d0:	60e3      	str	r3, [r4, #12]
 800f9d2:	e7d9      	b.n	800f988 <_scanf_float+0x36c>
 800f9d4:	9b04      	ldr	r3, [sp, #16]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d0e4      	beq.n	800f9a4 <_scanf_float+0x388>
 800f9da:	9905      	ldr	r1, [sp, #20]
 800f9dc:	230a      	movs	r3, #10
 800f9de:	3101      	adds	r1, #1
 800f9e0:	4640      	mov	r0, r8
 800f9e2:	f002 fa55 	bl	8011e90 <_strtol_r>
 800f9e6:	9b04      	ldr	r3, [sp, #16]
 800f9e8:	9e05      	ldr	r6, [sp, #20]
 800f9ea:	1ac2      	subs	r2, r0, r3
 800f9ec:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f9f0:	429e      	cmp	r6, r3
 800f9f2:	bf28      	it	cs
 800f9f4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f9f8:	4910      	ldr	r1, [pc, #64]	@ (800fa3c <_scanf_float+0x420>)
 800f9fa:	4630      	mov	r0, r6
 800f9fc:	f000 f8f6 	bl	800fbec <siprintf>
 800fa00:	e7d0      	b.n	800f9a4 <_scanf_float+0x388>
 800fa02:	f011 0f04 	tst.w	r1, #4
 800fa06:	9903      	ldr	r1, [sp, #12]
 800fa08:	600a      	str	r2, [r1, #0]
 800fa0a:	d1dc      	bne.n	800f9c6 <_scanf_float+0x3aa>
 800fa0c:	681d      	ldr	r5, [r3, #0]
 800fa0e:	4632      	mov	r2, r6
 800fa10:	463b      	mov	r3, r7
 800fa12:	4630      	mov	r0, r6
 800fa14:	4639      	mov	r1, r7
 800fa16:	f7f1 f8a9 	bl	8000b6c <__aeabi_dcmpun>
 800fa1a:	b128      	cbz	r0, 800fa28 <_scanf_float+0x40c>
 800fa1c:	4808      	ldr	r0, [pc, #32]	@ (800fa40 <_scanf_float+0x424>)
 800fa1e:	f000 fa4f 	bl	800fec0 <nanf>
 800fa22:	ed85 0a00 	vstr	s0, [r5]
 800fa26:	e7d1      	b.n	800f9cc <_scanf_float+0x3b0>
 800fa28:	4630      	mov	r0, r6
 800fa2a:	4639      	mov	r1, r7
 800fa2c:	f7f1 f8fc 	bl	8000c28 <__aeabi_d2f>
 800fa30:	6028      	str	r0, [r5, #0]
 800fa32:	e7cb      	b.n	800f9cc <_scanf_float+0x3b0>
 800fa34:	f04f 0900 	mov.w	r9, #0
 800fa38:	e629      	b.n	800f68e <_scanf_float+0x72>
 800fa3a:	bf00      	nop
 800fa3c:	0801418c 	.word	0x0801418c
 800fa40:	08014245 	.word	0x08014245

0800fa44 <std>:
 800fa44:	2300      	movs	r3, #0
 800fa46:	b510      	push	{r4, lr}
 800fa48:	4604      	mov	r4, r0
 800fa4a:	e9c0 3300 	strd	r3, r3, [r0]
 800fa4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fa52:	6083      	str	r3, [r0, #8]
 800fa54:	8181      	strh	r1, [r0, #12]
 800fa56:	6643      	str	r3, [r0, #100]	@ 0x64
 800fa58:	81c2      	strh	r2, [r0, #14]
 800fa5a:	6183      	str	r3, [r0, #24]
 800fa5c:	4619      	mov	r1, r3
 800fa5e:	2208      	movs	r2, #8
 800fa60:	305c      	adds	r0, #92	@ 0x5c
 800fa62:	f000 f926 	bl	800fcb2 <memset>
 800fa66:	4b0d      	ldr	r3, [pc, #52]	@ (800fa9c <std+0x58>)
 800fa68:	6263      	str	r3, [r4, #36]	@ 0x24
 800fa6a:	4b0d      	ldr	r3, [pc, #52]	@ (800faa0 <std+0x5c>)
 800fa6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fa6e:	4b0d      	ldr	r3, [pc, #52]	@ (800faa4 <std+0x60>)
 800fa70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fa72:	4b0d      	ldr	r3, [pc, #52]	@ (800faa8 <std+0x64>)
 800fa74:	6323      	str	r3, [r4, #48]	@ 0x30
 800fa76:	4b0d      	ldr	r3, [pc, #52]	@ (800faac <std+0x68>)
 800fa78:	6224      	str	r4, [r4, #32]
 800fa7a:	429c      	cmp	r4, r3
 800fa7c:	d006      	beq.n	800fa8c <std+0x48>
 800fa7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fa82:	4294      	cmp	r4, r2
 800fa84:	d002      	beq.n	800fa8c <std+0x48>
 800fa86:	33d0      	adds	r3, #208	@ 0xd0
 800fa88:	429c      	cmp	r4, r3
 800fa8a:	d105      	bne.n	800fa98 <std+0x54>
 800fa8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fa90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa94:	f000 b9f8 	b.w	800fe88 <__retarget_lock_init_recursive>
 800fa98:	bd10      	pop	{r4, pc}
 800fa9a:	bf00      	nop
 800fa9c:	0800fc2d 	.word	0x0800fc2d
 800faa0:	0800fc4f 	.word	0x0800fc4f
 800faa4:	0800fc87 	.word	0x0800fc87
 800faa8:	0800fcab 	.word	0x0800fcab
 800faac:	20006b94 	.word	0x20006b94

0800fab0 <stdio_exit_handler>:
 800fab0:	4a02      	ldr	r2, [pc, #8]	@ (800fabc <stdio_exit_handler+0xc>)
 800fab2:	4903      	ldr	r1, [pc, #12]	@ (800fac0 <stdio_exit_handler+0x10>)
 800fab4:	4803      	ldr	r0, [pc, #12]	@ (800fac4 <stdio_exit_handler+0x14>)
 800fab6:	f000 b869 	b.w	800fb8c <_fwalk_sglue>
 800faba:	bf00      	nop
 800fabc:	20000020 	.word	0x20000020
 800fac0:	080124e9 	.word	0x080124e9
 800fac4:	2000019c 	.word	0x2000019c

0800fac8 <cleanup_stdio>:
 800fac8:	6841      	ldr	r1, [r0, #4]
 800faca:	4b0c      	ldr	r3, [pc, #48]	@ (800fafc <cleanup_stdio+0x34>)
 800facc:	4299      	cmp	r1, r3
 800face:	b510      	push	{r4, lr}
 800fad0:	4604      	mov	r4, r0
 800fad2:	d001      	beq.n	800fad8 <cleanup_stdio+0x10>
 800fad4:	f002 fd08 	bl	80124e8 <_fflush_r>
 800fad8:	68a1      	ldr	r1, [r4, #8]
 800fada:	4b09      	ldr	r3, [pc, #36]	@ (800fb00 <cleanup_stdio+0x38>)
 800fadc:	4299      	cmp	r1, r3
 800fade:	d002      	beq.n	800fae6 <cleanup_stdio+0x1e>
 800fae0:	4620      	mov	r0, r4
 800fae2:	f002 fd01 	bl	80124e8 <_fflush_r>
 800fae6:	68e1      	ldr	r1, [r4, #12]
 800fae8:	4b06      	ldr	r3, [pc, #24]	@ (800fb04 <cleanup_stdio+0x3c>)
 800faea:	4299      	cmp	r1, r3
 800faec:	d004      	beq.n	800faf8 <cleanup_stdio+0x30>
 800faee:	4620      	mov	r0, r4
 800faf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800faf4:	f002 bcf8 	b.w	80124e8 <_fflush_r>
 800faf8:	bd10      	pop	{r4, pc}
 800fafa:	bf00      	nop
 800fafc:	20006b94 	.word	0x20006b94
 800fb00:	20006bfc 	.word	0x20006bfc
 800fb04:	20006c64 	.word	0x20006c64

0800fb08 <global_stdio_init.part.0>:
 800fb08:	b510      	push	{r4, lr}
 800fb0a:	4b0b      	ldr	r3, [pc, #44]	@ (800fb38 <global_stdio_init.part.0+0x30>)
 800fb0c:	4c0b      	ldr	r4, [pc, #44]	@ (800fb3c <global_stdio_init.part.0+0x34>)
 800fb0e:	4a0c      	ldr	r2, [pc, #48]	@ (800fb40 <global_stdio_init.part.0+0x38>)
 800fb10:	601a      	str	r2, [r3, #0]
 800fb12:	4620      	mov	r0, r4
 800fb14:	2200      	movs	r2, #0
 800fb16:	2104      	movs	r1, #4
 800fb18:	f7ff ff94 	bl	800fa44 <std>
 800fb1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fb20:	2201      	movs	r2, #1
 800fb22:	2109      	movs	r1, #9
 800fb24:	f7ff ff8e 	bl	800fa44 <std>
 800fb28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fb2c:	2202      	movs	r2, #2
 800fb2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb32:	2112      	movs	r1, #18
 800fb34:	f7ff bf86 	b.w	800fa44 <std>
 800fb38:	20006ccc 	.word	0x20006ccc
 800fb3c:	20006b94 	.word	0x20006b94
 800fb40:	0800fab1 	.word	0x0800fab1

0800fb44 <__sfp_lock_acquire>:
 800fb44:	4801      	ldr	r0, [pc, #4]	@ (800fb4c <__sfp_lock_acquire+0x8>)
 800fb46:	f000 b9a0 	b.w	800fe8a <__retarget_lock_acquire_recursive>
 800fb4a:	bf00      	nop
 800fb4c:	20006cd5 	.word	0x20006cd5

0800fb50 <__sfp_lock_release>:
 800fb50:	4801      	ldr	r0, [pc, #4]	@ (800fb58 <__sfp_lock_release+0x8>)
 800fb52:	f000 b99b 	b.w	800fe8c <__retarget_lock_release_recursive>
 800fb56:	bf00      	nop
 800fb58:	20006cd5 	.word	0x20006cd5

0800fb5c <__sinit>:
 800fb5c:	b510      	push	{r4, lr}
 800fb5e:	4604      	mov	r4, r0
 800fb60:	f7ff fff0 	bl	800fb44 <__sfp_lock_acquire>
 800fb64:	6a23      	ldr	r3, [r4, #32]
 800fb66:	b11b      	cbz	r3, 800fb70 <__sinit+0x14>
 800fb68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb6c:	f7ff bff0 	b.w	800fb50 <__sfp_lock_release>
 800fb70:	4b04      	ldr	r3, [pc, #16]	@ (800fb84 <__sinit+0x28>)
 800fb72:	6223      	str	r3, [r4, #32]
 800fb74:	4b04      	ldr	r3, [pc, #16]	@ (800fb88 <__sinit+0x2c>)
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d1f5      	bne.n	800fb68 <__sinit+0xc>
 800fb7c:	f7ff ffc4 	bl	800fb08 <global_stdio_init.part.0>
 800fb80:	e7f2      	b.n	800fb68 <__sinit+0xc>
 800fb82:	bf00      	nop
 800fb84:	0800fac9 	.word	0x0800fac9
 800fb88:	20006ccc 	.word	0x20006ccc

0800fb8c <_fwalk_sglue>:
 800fb8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb90:	4607      	mov	r7, r0
 800fb92:	4688      	mov	r8, r1
 800fb94:	4614      	mov	r4, r2
 800fb96:	2600      	movs	r6, #0
 800fb98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fb9c:	f1b9 0901 	subs.w	r9, r9, #1
 800fba0:	d505      	bpl.n	800fbae <_fwalk_sglue+0x22>
 800fba2:	6824      	ldr	r4, [r4, #0]
 800fba4:	2c00      	cmp	r4, #0
 800fba6:	d1f7      	bne.n	800fb98 <_fwalk_sglue+0xc>
 800fba8:	4630      	mov	r0, r6
 800fbaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbae:	89ab      	ldrh	r3, [r5, #12]
 800fbb0:	2b01      	cmp	r3, #1
 800fbb2:	d907      	bls.n	800fbc4 <_fwalk_sglue+0x38>
 800fbb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fbb8:	3301      	adds	r3, #1
 800fbba:	d003      	beq.n	800fbc4 <_fwalk_sglue+0x38>
 800fbbc:	4629      	mov	r1, r5
 800fbbe:	4638      	mov	r0, r7
 800fbc0:	47c0      	blx	r8
 800fbc2:	4306      	orrs	r6, r0
 800fbc4:	3568      	adds	r5, #104	@ 0x68
 800fbc6:	e7e9      	b.n	800fb9c <_fwalk_sglue+0x10>

0800fbc8 <iprintf>:
 800fbc8:	b40f      	push	{r0, r1, r2, r3}
 800fbca:	b507      	push	{r0, r1, r2, lr}
 800fbcc:	4906      	ldr	r1, [pc, #24]	@ (800fbe8 <iprintf+0x20>)
 800fbce:	ab04      	add	r3, sp, #16
 800fbd0:	6808      	ldr	r0, [r1, #0]
 800fbd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbd6:	6881      	ldr	r1, [r0, #8]
 800fbd8:	9301      	str	r3, [sp, #4]
 800fbda:	f002 fae9 	bl	80121b0 <_vfiprintf_r>
 800fbde:	b003      	add	sp, #12
 800fbe0:	f85d eb04 	ldr.w	lr, [sp], #4
 800fbe4:	b004      	add	sp, #16
 800fbe6:	4770      	bx	lr
 800fbe8:	20000198 	.word	0x20000198

0800fbec <siprintf>:
 800fbec:	b40e      	push	{r1, r2, r3}
 800fbee:	b500      	push	{lr}
 800fbf0:	b09c      	sub	sp, #112	@ 0x70
 800fbf2:	ab1d      	add	r3, sp, #116	@ 0x74
 800fbf4:	9002      	str	r0, [sp, #8]
 800fbf6:	9006      	str	r0, [sp, #24]
 800fbf8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fbfc:	4809      	ldr	r0, [pc, #36]	@ (800fc24 <siprintf+0x38>)
 800fbfe:	9107      	str	r1, [sp, #28]
 800fc00:	9104      	str	r1, [sp, #16]
 800fc02:	4909      	ldr	r1, [pc, #36]	@ (800fc28 <siprintf+0x3c>)
 800fc04:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc08:	9105      	str	r1, [sp, #20]
 800fc0a:	6800      	ldr	r0, [r0, #0]
 800fc0c:	9301      	str	r3, [sp, #4]
 800fc0e:	a902      	add	r1, sp, #8
 800fc10:	f002 f9a8 	bl	8011f64 <_svfiprintf_r>
 800fc14:	9b02      	ldr	r3, [sp, #8]
 800fc16:	2200      	movs	r2, #0
 800fc18:	701a      	strb	r2, [r3, #0]
 800fc1a:	b01c      	add	sp, #112	@ 0x70
 800fc1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc20:	b003      	add	sp, #12
 800fc22:	4770      	bx	lr
 800fc24:	20000198 	.word	0x20000198
 800fc28:	ffff0208 	.word	0xffff0208

0800fc2c <__sread>:
 800fc2c:	b510      	push	{r4, lr}
 800fc2e:	460c      	mov	r4, r1
 800fc30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc34:	f000 f8da 	bl	800fdec <_read_r>
 800fc38:	2800      	cmp	r0, #0
 800fc3a:	bfab      	itete	ge
 800fc3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fc3e:	89a3      	ldrhlt	r3, [r4, #12]
 800fc40:	181b      	addge	r3, r3, r0
 800fc42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fc46:	bfac      	ite	ge
 800fc48:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fc4a:	81a3      	strhlt	r3, [r4, #12]
 800fc4c:	bd10      	pop	{r4, pc}

0800fc4e <__swrite>:
 800fc4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc52:	461f      	mov	r7, r3
 800fc54:	898b      	ldrh	r3, [r1, #12]
 800fc56:	05db      	lsls	r3, r3, #23
 800fc58:	4605      	mov	r5, r0
 800fc5a:	460c      	mov	r4, r1
 800fc5c:	4616      	mov	r6, r2
 800fc5e:	d505      	bpl.n	800fc6c <__swrite+0x1e>
 800fc60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc64:	2302      	movs	r3, #2
 800fc66:	2200      	movs	r2, #0
 800fc68:	f000 f8ae 	bl	800fdc8 <_lseek_r>
 800fc6c:	89a3      	ldrh	r3, [r4, #12]
 800fc6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fc76:	81a3      	strh	r3, [r4, #12]
 800fc78:	4632      	mov	r2, r6
 800fc7a:	463b      	mov	r3, r7
 800fc7c:	4628      	mov	r0, r5
 800fc7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc82:	f000 b8c5 	b.w	800fe10 <_write_r>

0800fc86 <__sseek>:
 800fc86:	b510      	push	{r4, lr}
 800fc88:	460c      	mov	r4, r1
 800fc8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc8e:	f000 f89b 	bl	800fdc8 <_lseek_r>
 800fc92:	1c43      	adds	r3, r0, #1
 800fc94:	89a3      	ldrh	r3, [r4, #12]
 800fc96:	bf15      	itete	ne
 800fc98:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fc9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fc9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fca2:	81a3      	strheq	r3, [r4, #12]
 800fca4:	bf18      	it	ne
 800fca6:	81a3      	strhne	r3, [r4, #12]
 800fca8:	bd10      	pop	{r4, pc}

0800fcaa <__sclose>:
 800fcaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcae:	f000 b87b 	b.w	800fda8 <_close_r>

0800fcb2 <memset>:
 800fcb2:	4402      	add	r2, r0
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	4293      	cmp	r3, r2
 800fcb8:	d100      	bne.n	800fcbc <memset+0xa>
 800fcba:	4770      	bx	lr
 800fcbc:	f803 1b01 	strb.w	r1, [r3], #1
 800fcc0:	e7f9      	b.n	800fcb6 <memset+0x4>

0800fcc2 <strncmp>:
 800fcc2:	b510      	push	{r4, lr}
 800fcc4:	b16a      	cbz	r2, 800fce2 <strncmp+0x20>
 800fcc6:	3901      	subs	r1, #1
 800fcc8:	1884      	adds	r4, r0, r2
 800fcca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fcce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fcd2:	429a      	cmp	r2, r3
 800fcd4:	d103      	bne.n	800fcde <strncmp+0x1c>
 800fcd6:	42a0      	cmp	r0, r4
 800fcd8:	d001      	beq.n	800fcde <strncmp+0x1c>
 800fcda:	2a00      	cmp	r2, #0
 800fcdc:	d1f5      	bne.n	800fcca <strncmp+0x8>
 800fcde:	1ad0      	subs	r0, r2, r3
 800fce0:	bd10      	pop	{r4, pc}
 800fce2:	4610      	mov	r0, r2
 800fce4:	e7fc      	b.n	800fce0 <strncmp+0x1e>
	...

0800fce8 <strtok>:
 800fce8:	4b16      	ldr	r3, [pc, #88]	@ (800fd44 <strtok+0x5c>)
 800fcea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcee:	681f      	ldr	r7, [r3, #0]
 800fcf0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800fcf2:	4605      	mov	r5, r0
 800fcf4:	460e      	mov	r6, r1
 800fcf6:	b9ec      	cbnz	r4, 800fd34 <strtok+0x4c>
 800fcf8:	2050      	movs	r0, #80	@ 0x50
 800fcfa:	f001 fad5 	bl	80112a8 <malloc>
 800fcfe:	4602      	mov	r2, r0
 800fd00:	6478      	str	r0, [r7, #68]	@ 0x44
 800fd02:	b920      	cbnz	r0, 800fd0e <strtok+0x26>
 800fd04:	4b10      	ldr	r3, [pc, #64]	@ (800fd48 <strtok+0x60>)
 800fd06:	4811      	ldr	r0, [pc, #68]	@ (800fd4c <strtok+0x64>)
 800fd08:	215b      	movs	r1, #91	@ 0x5b
 800fd0a:	f000 f8df 	bl	800fecc <__assert_func>
 800fd0e:	e9c0 4400 	strd	r4, r4, [r0]
 800fd12:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800fd16:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800fd1a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800fd1e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800fd22:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800fd26:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800fd2a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800fd2e:	6184      	str	r4, [r0, #24]
 800fd30:	7704      	strb	r4, [r0, #28]
 800fd32:	6244      	str	r4, [r0, #36]	@ 0x24
 800fd34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fd36:	4631      	mov	r1, r6
 800fd38:	4628      	mov	r0, r5
 800fd3a:	2301      	movs	r3, #1
 800fd3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd40:	f000 b806 	b.w	800fd50 <__strtok_r>
 800fd44:	20000198 	.word	0x20000198
 800fd48:	08014191 	.word	0x08014191
 800fd4c:	080141a8 	.word	0x080141a8

0800fd50 <__strtok_r>:
 800fd50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd52:	4604      	mov	r4, r0
 800fd54:	b908      	cbnz	r0, 800fd5a <__strtok_r+0xa>
 800fd56:	6814      	ldr	r4, [r2, #0]
 800fd58:	b144      	cbz	r4, 800fd6c <__strtok_r+0x1c>
 800fd5a:	4620      	mov	r0, r4
 800fd5c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800fd60:	460f      	mov	r7, r1
 800fd62:	f817 6b01 	ldrb.w	r6, [r7], #1
 800fd66:	b91e      	cbnz	r6, 800fd70 <__strtok_r+0x20>
 800fd68:	b965      	cbnz	r5, 800fd84 <__strtok_r+0x34>
 800fd6a:	6015      	str	r5, [r2, #0]
 800fd6c:	2000      	movs	r0, #0
 800fd6e:	e005      	b.n	800fd7c <__strtok_r+0x2c>
 800fd70:	42b5      	cmp	r5, r6
 800fd72:	d1f6      	bne.n	800fd62 <__strtok_r+0x12>
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d1f0      	bne.n	800fd5a <__strtok_r+0xa>
 800fd78:	6014      	str	r4, [r2, #0]
 800fd7a:	7003      	strb	r3, [r0, #0]
 800fd7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd7e:	461c      	mov	r4, r3
 800fd80:	e00c      	b.n	800fd9c <__strtok_r+0x4c>
 800fd82:	b915      	cbnz	r5, 800fd8a <__strtok_r+0x3a>
 800fd84:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fd88:	460e      	mov	r6, r1
 800fd8a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800fd8e:	42ab      	cmp	r3, r5
 800fd90:	d1f7      	bne.n	800fd82 <__strtok_r+0x32>
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d0f3      	beq.n	800fd7e <__strtok_r+0x2e>
 800fd96:	2300      	movs	r3, #0
 800fd98:	f804 3c01 	strb.w	r3, [r4, #-1]
 800fd9c:	6014      	str	r4, [r2, #0]
 800fd9e:	e7ed      	b.n	800fd7c <__strtok_r+0x2c>

0800fda0 <_localeconv_r>:
 800fda0:	4800      	ldr	r0, [pc, #0]	@ (800fda4 <_localeconv_r+0x4>)
 800fda2:	4770      	bx	lr
 800fda4:	2000011c 	.word	0x2000011c

0800fda8 <_close_r>:
 800fda8:	b538      	push	{r3, r4, r5, lr}
 800fdaa:	4d06      	ldr	r5, [pc, #24]	@ (800fdc4 <_close_r+0x1c>)
 800fdac:	2300      	movs	r3, #0
 800fdae:	4604      	mov	r4, r0
 800fdb0:	4608      	mov	r0, r1
 800fdb2:	602b      	str	r3, [r5, #0]
 800fdb4:	f7f9 fff7 	bl	8009da6 <_close>
 800fdb8:	1c43      	adds	r3, r0, #1
 800fdba:	d102      	bne.n	800fdc2 <_close_r+0x1a>
 800fdbc:	682b      	ldr	r3, [r5, #0]
 800fdbe:	b103      	cbz	r3, 800fdc2 <_close_r+0x1a>
 800fdc0:	6023      	str	r3, [r4, #0]
 800fdc2:	bd38      	pop	{r3, r4, r5, pc}
 800fdc4:	20006cd0 	.word	0x20006cd0

0800fdc8 <_lseek_r>:
 800fdc8:	b538      	push	{r3, r4, r5, lr}
 800fdca:	4d07      	ldr	r5, [pc, #28]	@ (800fde8 <_lseek_r+0x20>)
 800fdcc:	4604      	mov	r4, r0
 800fdce:	4608      	mov	r0, r1
 800fdd0:	4611      	mov	r1, r2
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	602a      	str	r2, [r5, #0]
 800fdd6:	461a      	mov	r2, r3
 800fdd8:	f7fa f80c 	bl	8009df4 <_lseek>
 800fddc:	1c43      	adds	r3, r0, #1
 800fdde:	d102      	bne.n	800fde6 <_lseek_r+0x1e>
 800fde0:	682b      	ldr	r3, [r5, #0]
 800fde2:	b103      	cbz	r3, 800fde6 <_lseek_r+0x1e>
 800fde4:	6023      	str	r3, [r4, #0]
 800fde6:	bd38      	pop	{r3, r4, r5, pc}
 800fde8:	20006cd0 	.word	0x20006cd0

0800fdec <_read_r>:
 800fdec:	b538      	push	{r3, r4, r5, lr}
 800fdee:	4d07      	ldr	r5, [pc, #28]	@ (800fe0c <_read_r+0x20>)
 800fdf0:	4604      	mov	r4, r0
 800fdf2:	4608      	mov	r0, r1
 800fdf4:	4611      	mov	r1, r2
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	602a      	str	r2, [r5, #0]
 800fdfa:	461a      	mov	r2, r3
 800fdfc:	f7f9 ff9a 	bl	8009d34 <_read>
 800fe00:	1c43      	adds	r3, r0, #1
 800fe02:	d102      	bne.n	800fe0a <_read_r+0x1e>
 800fe04:	682b      	ldr	r3, [r5, #0]
 800fe06:	b103      	cbz	r3, 800fe0a <_read_r+0x1e>
 800fe08:	6023      	str	r3, [r4, #0]
 800fe0a:	bd38      	pop	{r3, r4, r5, pc}
 800fe0c:	20006cd0 	.word	0x20006cd0

0800fe10 <_write_r>:
 800fe10:	b538      	push	{r3, r4, r5, lr}
 800fe12:	4d07      	ldr	r5, [pc, #28]	@ (800fe30 <_write_r+0x20>)
 800fe14:	4604      	mov	r4, r0
 800fe16:	4608      	mov	r0, r1
 800fe18:	4611      	mov	r1, r2
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	602a      	str	r2, [r5, #0]
 800fe1e:	461a      	mov	r2, r3
 800fe20:	f7f9 ffa5 	bl	8009d6e <_write>
 800fe24:	1c43      	adds	r3, r0, #1
 800fe26:	d102      	bne.n	800fe2e <_write_r+0x1e>
 800fe28:	682b      	ldr	r3, [r5, #0]
 800fe2a:	b103      	cbz	r3, 800fe2e <_write_r+0x1e>
 800fe2c:	6023      	str	r3, [r4, #0]
 800fe2e:	bd38      	pop	{r3, r4, r5, pc}
 800fe30:	20006cd0 	.word	0x20006cd0

0800fe34 <__errno>:
 800fe34:	4b01      	ldr	r3, [pc, #4]	@ (800fe3c <__errno+0x8>)
 800fe36:	6818      	ldr	r0, [r3, #0]
 800fe38:	4770      	bx	lr
 800fe3a:	bf00      	nop
 800fe3c:	20000198 	.word	0x20000198

0800fe40 <__libc_init_array>:
 800fe40:	b570      	push	{r4, r5, r6, lr}
 800fe42:	4d0d      	ldr	r5, [pc, #52]	@ (800fe78 <__libc_init_array+0x38>)
 800fe44:	4c0d      	ldr	r4, [pc, #52]	@ (800fe7c <__libc_init_array+0x3c>)
 800fe46:	1b64      	subs	r4, r4, r5
 800fe48:	10a4      	asrs	r4, r4, #2
 800fe4a:	2600      	movs	r6, #0
 800fe4c:	42a6      	cmp	r6, r4
 800fe4e:	d109      	bne.n	800fe64 <__libc_init_array+0x24>
 800fe50:	4d0b      	ldr	r5, [pc, #44]	@ (800fe80 <__libc_init_array+0x40>)
 800fe52:	4c0c      	ldr	r4, [pc, #48]	@ (800fe84 <__libc_init_array+0x44>)
 800fe54:	f004 f880 	bl	8013f58 <_init>
 800fe58:	1b64      	subs	r4, r4, r5
 800fe5a:	10a4      	asrs	r4, r4, #2
 800fe5c:	2600      	movs	r6, #0
 800fe5e:	42a6      	cmp	r6, r4
 800fe60:	d105      	bne.n	800fe6e <__libc_init_array+0x2e>
 800fe62:	bd70      	pop	{r4, r5, r6, pc}
 800fe64:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe68:	4798      	blx	r3
 800fe6a:	3601      	adds	r6, #1
 800fe6c:	e7ee      	b.n	800fe4c <__libc_init_array+0xc>
 800fe6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe72:	4798      	blx	r3
 800fe74:	3601      	adds	r6, #1
 800fe76:	e7f2      	b.n	800fe5e <__libc_init_array+0x1e>
 800fe78:	080147b0 	.word	0x080147b0
 800fe7c:	080147b0 	.word	0x080147b0
 800fe80:	080147b0 	.word	0x080147b0
 800fe84:	080147b4 	.word	0x080147b4

0800fe88 <__retarget_lock_init_recursive>:
 800fe88:	4770      	bx	lr

0800fe8a <__retarget_lock_acquire_recursive>:
 800fe8a:	4770      	bx	lr

0800fe8c <__retarget_lock_release_recursive>:
 800fe8c:	4770      	bx	lr

0800fe8e <memcpy>:
 800fe8e:	440a      	add	r2, r1
 800fe90:	4291      	cmp	r1, r2
 800fe92:	f100 33ff 	add.w	r3, r0, #4294967295
 800fe96:	d100      	bne.n	800fe9a <memcpy+0xc>
 800fe98:	4770      	bx	lr
 800fe9a:	b510      	push	{r4, lr}
 800fe9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fea0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fea4:	4291      	cmp	r1, r2
 800fea6:	d1f9      	bne.n	800fe9c <memcpy+0xe>
 800fea8:	bd10      	pop	{r4, pc}
 800feaa:	0000      	movs	r0, r0
 800feac:	0000      	movs	r0, r0
	...

0800feb0 <nan>:
 800feb0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800feb8 <nan+0x8>
 800feb4:	4770      	bx	lr
 800feb6:	bf00      	nop
 800feb8:	00000000 	.word	0x00000000
 800febc:	7ff80000 	.word	0x7ff80000

0800fec0 <nanf>:
 800fec0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fec8 <nanf+0x8>
 800fec4:	4770      	bx	lr
 800fec6:	bf00      	nop
 800fec8:	7fc00000 	.word	0x7fc00000

0800fecc <__assert_func>:
 800fecc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fece:	4614      	mov	r4, r2
 800fed0:	461a      	mov	r2, r3
 800fed2:	4b09      	ldr	r3, [pc, #36]	@ (800fef8 <__assert_func+0x2c>)
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	4605      	mov	r5, r0
 800fed8:	68d8      	ldr	r0, [r3, #12]
 800feda:	b954      	cbnz	r4, 800fef2 <__assert_func+0x26>
 800fedc:	4b07      	ldr	r3, [pc, #28]	@ (800fefc <__assert_func+0x30>)
 800fede:	461c      	mov	r4, r3
 800fee0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fee4:	9100      	str	r1, [sp, #0]
 800fee6:	462b      	mov	r3, r5
 800fee8:	4905      	ldr	r1, [pc, #20]	@ (800ff00 <__assert_func+0x34>)
 800feea:	f002 fb25 	bl	8012538 <fiprintf>
 800feee:	f002 fbf3 	bl	80126d8 <abort>
 800fef2:	4b04      	ldr	r3, [pc, #16]	@ (800ff04 <__assert_func+0x38>)
 800fef4:	e7f4      	b.n	800fee0 <__assert_func+0x14>
 800fef6:	bf00      	nop
 800fef8:	20000198 	.word	0x20000198
 800fefc:	08014245 	.word	0x08014245
 800ff00:	08014217 	.word	0x08014217
 800ff04:	0801420a 	.word	0x0801420a

0800ff08 <quorem>:
 800ff08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff0c:	6903      	ldr	r3, [r0, #16]
 800ff0e:	690c      	ldr	r4, [r1, #16]
 800ff10:	42a3      	cmp	r3, r4
 800ff12:	4607      	mov	r7, r0
 800ff14:	db7e      	blt.n	8010014 <quorem+0x10c>
 800ff16:	3c01      	subs	r4, #1
 800ff18:	f101 0814 	add.w	r8, r1, #20
 800ff1c:	00a3      	lsls	r3, r4, #2
 800ff1e:	f100 0514 	add.w	r5, r0, #20
 800ff22:	9300      	str	r3, [sp, #0]
 800ff24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ff28:	9301      	str	r3, [sp, #4]
 800ff2a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ff2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ff32:	3301      	adds	r3, #1
 800ff34:	429a      	cmp	r2, r3
 800ff36:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ff3a:	fbb2 f6f3 	udiv	r6, r2, r3
 800ff3e:	d32e      	bcc.n	800ff9e <quorem+0x96>
 800ff40:	f04f 0a00 	mov.w	sl, #0
 800ff44:	46c4      	mov	ip, r8
 800ff46:	46ae      	mov	lr, r5
 800ff48:	46d3      	mov	fp, sl
 800ff4a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ff4e:	b298      	uxth	r0, r3
 800ff50:	fb06 a000 	mla	r0, r6, r0, sl
 800ff54:	0c02      	lsrs	r2, r0, #16
 800ff56:	0c1b      	lsrs	r3, r3, #16
 800ff58:	fb06 2303 	mla	r3, r6, r3, r2
 800ff5c:	f8de 2000 	ldr.w	r2, [lr]
 800ff60:	b280      	uxth	r0, r0
 800ff62:	b292      	uxth	r2, r2
 800ff64:	1a12      	subs	r2, r2, r0
 800ff66:	445a      	add	r2, fp
 800ff68:	f8de 0000 	ldr.w	r0, [lr]
 800ff6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ff70:	b29b      	uxth	r3, r3
 800ff72:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ff76:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ff7a:	b292      	uxth	r2, r2
 800ff7c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ff80:	45e1      	cmp	r9, ip
 800ff82:	f84e 2b04 	str.w	r2, [lr], #4
 800ff86:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ff8a:	d2de      	bcs.n	800ff4a <quorem+0x42>
 800ff8c:	9b00      	ldr	r3, [sp, #0]
 800ff8e:	58eb      	ldr	r3, [r5, r3]
 800ff90:	b92b      	cbnz	r3, 800ff9e <quorem+0x96>
 800ff92:	9b01      	ldr	r3, [sp, #4]
 800ff94:	3b04      	subs	r3, #4
 800ff96:	429d      	cmp	r5, r3
 800ff98:	461a      	mov	r2, r3
 800ff9a:	d32f      	bcc.n	800fffc <quorem+0xf4>
 800ff9c:	613c      	str	r4, [r7, #16]
 800ff9e:	4638      	mov	r0, r7
 800ffa0:	f001 fd0e 	bl	80119c0 <__mcmp>
 800ffa4:	2800      	cmp	r0, #0
 800ffa6:	db25      	blt.n	800fff4 <quorem+0xec>
 800ffa8:	4629      	mov	r1, r5
 800ffaa:	2000      	movs	r0, #0
 800ffac:	f858 2b04 	ldr.w	r2, [r8], #4
 800ffb0:	f8d1 c000 	ldr.w	ip, [r1]
 800ffb4:	fa1f fe82 	uxth.w	lr, r2
 800ffb8:	fa1f f38c 	uxth.w	r3, ip
 800ffbc:	eba3 030e 	sub.w	r3, r3, lr
 800ffc0:	4403      	add	r3, r0
 800ffc2:	0c12      	lsrs	r2, r2, #16
 800ffc4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ffc8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ffcc:	b29b      	uxth	r3, r3
 800ffce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ffd2:	45c1      	cmp	r9, r8
 800ffd4:	f841 3b04 	str.w	r3, [r1], #4
 800ffd8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ffdc:	d2e6      	bcs.n	800ffac <quorem+0xa4>
 800ffde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ffe2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ffe6:	b922      	cbnz	r2, 800fff2 <quorem+0xea>
 800ffe8:	3b04      	subs	r3, #4
 800ffea:	429d      	cmp	r5, r3
 800ffec:	461a      	mov	r2, r3
 800ffee:	d30b      	bcc.n	8010008 <quorem+0x100>
 800fff0:	613c      	str	r4, [r7, #16]
 800fff2:	3601      	adds	r6, #1
 800fff4:	4630      	mov	r0, r6
 800fff6:	b003      	add	sp, #12
 800fff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fffc:	6812      	ldr	r2, [r2, #0]
 800fffe:	3b04      	subs	r3, #4
 8010000:	2a00      	cmp	r2, #0
 8010002:	d1cb      	bne.n	800ff9c <quorem+0x94>
 8010004:	3c01      	subs	r4, #1
 8010006:	e7c6      	b.n	800ff96 <quorem+0x8e>
 8010008:	6812      	ldr	r2, [r2, #0]
 801000a:	3b04      	subs	r3, #4
 801000c:	2a00      	cmp	r2, #0
 801000e:	d1ef      	bne.n	800fff0 <quorem+0xe8>
 8010010:	3c01      	subs	r4, #1
 8010012:	e7ea      	b.n	800ffea <quorem+0xe2>
 8010014:	2000      	movs	r0, #0
 8010016:	e7ee      	b.n	800fff6 <quorem+0xee>

08010018 <_dtoa_r>:
 8010018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801001c:	69c7      	ldr	r7, [r0, #28]
 801001e:	b099      	sub	sp, #100	@ 0x64
 8010020:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010024:	ec55 4b10 	vmov	r4, r5, d0
 8010028:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801002a:	9109      	str	r1, [sp, #36]	@ 0x24
 801002c:	4683      	mov	fp, r0
 801002e:	920e      	str	r2, [sp, #56]	@ 0x38
 8010030:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010032:	b97f      	cbnz	r7, 8010054 <_dtoa_r+0x3c>
 8010034:	2010      	movs	r0, #16
 8010036:	f001 f937 	bl	80112a8 <malloc>
 801003a:	4602      	mov	r2, r0
 801003c:	f8cb 001c 	str.w	r0, [fp, #28]
 8010040:	b920      	cbnz	r0, 801004c <_dtoa_r+0x34>
 8010042:	4ba7      	ldr	r3, [pc, #668]	@ (80102e0 <_dtoa_r+0x2c8>)
 8010044:	21ef      	movs	r1, #239	@ 0xef
 8010046:	48a7      	ldr	r0, [pc, #668]	@ (80102e4 <_dtoa_r+0x2cc>)
 8010048:	f7ff ff40 	bl	800fecc <__assert_func>
 801004c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010050:	6007      	str	r7, [r0, #0]
 8010052:	60c7      	str	r7, [r0, #12]
 8010054:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010058:	6819      	ldr	r1, [r3, #0]
 801005a:	b159      	cbz	r1, 8010074 <_dtoa_r+0x5c>
 801005c:	685a      	ldr	r2, [r3, #4]
 801005e:	604a      	str	r2, [r1, #4]
 8010060:	2301      	movs	r3, #1
 8010062:	4093      	lsls	r3, r2
 8010064:	608b      	str	r3, [r1, #8]
 8010066:	4658      	mov	r0, fp
 8010068:	f001 fa26 	bl	80114b8 <_Bfree>
 801006c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010070:	2200      	movs	r2, #0
 8010072:	601a      	str	r2, [r3, #0]
 8010074:	1e2b      	subs	r3, r5, #0
 8010076:	bfb9      	ittee	lt
 8010078:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801007c:	9303      	strlt	r3, [sp, #12]
 801007e:	2300      	movge	r3, #0
 8010080:	6033      	strge	r3, [r6, #0]
 8010082:	9f03      	ldr	r7, [sp, #12]
 8010084:	4b98      	ldr	r3, [pc, #608]	@ (80102e8 <_dtoa_r+0x2d0>)
 8010086:	bfbc      	itt	lt
 8010088:	2201      	movlt	r2, #1
 801008a:	6032      	strlt	r2, [r6, #0]
 801008c:	43bb      	bics	r3, r7
 801008e:	d112      	bne.n	80100b6 <_dtoa_r+0x9e>
 8010090:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010092:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010096:	6013      	str	r3, [r2, #0]
 8010098:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801009c:	4323      	orrs	r3, r4
 801009e:	f000 854d 	beq.w	8010b3c <_dtoa_r+0xb24>
 80100a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80100a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80102fc <_dtoa_r+0x2e4>
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	f000 854f 	beq.w	8010b4c <_dtoa_r+0xb34>
 80100ae:	f10a 0303 	add.w	r3, sl, #3
 80100b2:	f000 bd49 	b.w	8010b48 <_dtoa_r+0xb30>
 80100b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80100ba:	2200      	movs	r2, #0
 80100bc:	ec51 0b17 	vmov	r0, r1, d7
 80100c0:	2300      	movs	r3, #0
 80100c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80100c6:	f7f0 fd1f 	bl	8000b08 <__aeabi_dcmpeq>
 80100ca:	4680      	mov	r8, r0
 80100cc:	b158      	cbz	r0, 80100e6 <_dtoa_r+0xce>
 80100ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80100d0:	2301      	movs	r3, #1
 80100d2:	6013      	str	r3, [r2, #0]
 80100d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80100d6:	b113      	cbz	r3, 80100de <_dtoa_r+0xc6>
 80100d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80100da:	4b84      	ldr	r3, [pc, #528]	@ (80102ec <_dtoa_r+0x2d4>)
 80100dc:	6013      	str	r3, [r2, #0]
 80100de:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8010300 <_dtoa_r+0x2e8>
 80100e2:	f000 bd33 	b.w	8010b4c <_dtoa_r+0xb34>
 80100e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80100ea:	aa16      	add	r2, sp, #88	@ 0x58
 80100ec:	a917      	add	r1, sp, #92	@ 0x5c
 80100ee:	4658      	mov	r0, fp
 80100f0:	f001 fd86 	bl	8011c00 <__d2b>
 80100f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80100f8:	4681      	mov	r9, r0
 80100fa:	2e00      	cmp	r6, #0
 80100fc:	d077      	beq.n	80101ee <_dtoa_r+0x1d6>
 80100fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010100:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8010104:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010108:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801010c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010110:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010114:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010118:	4619      	mov	r1, r3
 801011a:	2200      	movs	r2, #0
 801011c:	4b74      	ldr	r3, [pc, #464]	@ (80102f0 <_dtoa_r+0x2d8>)
 801011e:	f7f0 f8d3 	bl	80002c8 <__aeabi_dsub>
 8010122:	a369      	add	r3, pc, #420	@ (adr r3, 80102c8 <_dtoa_r+0x2b0>)
 8010124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010128:	f7f0 fa86 	bl	8000638 <__aeabi_dmul>
 801012c:	a368      	add	r3, pc, #416	@ (adr r3, 80102d0 <_dtoa_r+0x2b8>)
 801012e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010132:	f7f0 f8cb 	bl	80002cc <__adddf3>
 8010136:	4604      	mov	r4, r0
 8010138:	4630      	mov	r0, r6
 801013a:	460d      	mov	r5, r1
 801013c:	f7f0 fa12 	bl	8000564 <__aeabi_i2d>
 8010140:	a365      	add	r3, pc, #404	@ (adr r3, 80102d8 <_dtoa_r+0x2c0>)
 8010142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010146:	f7f0 fa77 	bl	8000638 <__aeabi_dmul>
 801014a:	4602      	mov	r2, r0
 801014c:	460b      	mov	r3, r1
 801014e:	4620      	mov	r0, r4
 8010150:	4629      	mov	r1, r5
 8010152:	f7f0 f8bb 	bl	80002cc <__adddf3>
 8010156:	4604      	mov	r4, r0
 8010158:	460d      	mov	r5, r1
 801015a:	f7f0 fd1d 	bl	8000b98 <__aeabi_d2iz>
 801015e:	2200      	movs	r2, #0
 8010160:	4607      	mov	r7, r0
 8010162:	2300      	movs	r3, #0
 8010164:	4620      	mov	r0, r4
 8010166:	4629      	mov	r1, r5
 8010168:	f7f0 fcd8 	bl	8000b1c <__aeabi_dcmplt>
 801016c:	b140      	cbz	r0, 8010180 <_dtoa_r+0x168>
 801016e:	4638      	mov	r0, r7
 8010170:	f7f0 f9f8 	bl	8000564 <__aeabi_i2d>
 8010174:	4622      	mov	r2, r4
 8010176:	462b      	mov	r3, r5
 8010178:	f7f0 fcc6 	bl	8000b08 <__aeabi_dcmpeq>
 801017c:	b900      	cbnz	r0, 8010180 <_dtoa_r+0x168>
 801017e:	3f01      	subs	r7, #1
 8010180:	2f16      	cmp	r7, #22
 8010182:	d851      	bhi.n	8010228 <_dtoa_r+0x210>
 8010184:	4b5b      	ldr	r3, [pc, #364]	@ (80102f4 <_dtoa_r+0x2dc>)
 8010186:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801018a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801018e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010192:	f7f0 fcc3 	bl	8000b1c <__aeabi_dcmplt>
 8010196:	2800      	cmp	r0, #0
 8010198:	d048      	beq.n	801022c <_dtoa_r+0x214>
 801019a:	3f01      	subs	r7, #1
 801019c:	2300      	movs	r3, #0
 801019e:	9312      	str	r3, [sp, #72]	@ 0x48
 80101a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80101a2:	1b9b      	subs	r3, r3, r6
 80101a4:	1e5a      	subs	r2, r3, #1
 80101a6:	bf44      	itt	mi
 80101a8:	f1c3 0801 	rsbmi	r8, r3, #1
 80101ac:	2300      	movmi	r3, #0
 80101ae:	9208      	str	r2, [sp, #32]
 80101b0:	bf54      	ite	pl
 80101b2:	f04f 0800 	movpl.w	r8, #0
 80101b6:	9308      	strmi	r3, [sp, #32]
 80101b8:	2f00      	cmp	r7, #0
 80101ba:	db39      	blt.n	8010230 <_dtoa_r+0x218>
 80101bc:	9b08      	ldr	r3, [sp, #32]
 80101be:	970f      	str	r7, [sp, #60]	@ 0x3c
 80101c0:	443b      	add	r3, r7
 80101c2:	9308      	str	r3, [sp, #32]
 80101c4:	2300      	movs	r3, #0
 80101c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80101c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101ca:	2b09      	cmp	r3, #9
 80101cc:	d864      	bhi.n	8010298 <_dtoa_r+0x280>
 80101ce:	2b05      	cmp	r3, #5
 80101d0:	bfc4      	itt	gt
 80101d2:	3b04      	subgt	r3, #4
 80101d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80101d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101d8:	f1a3 0302 	sub.w	r3, r3, #2
 80101dc:	bfcc      	ite	gt
 80101de:	2400      	movgt	r4, #0
 80101e0:	2401      	movle	r4, #1
 80101e2:	2b03      	cmp	r3, #3
 80101e4:	d863      	bhi.n	80102ae <_dtoa_r+0x296>
 80101e6:	e8df f003 	tbb	[pc, r3]
 80101ea:	372a      	.short	0x372a
 80101ec:	5535      	.short	0x5535
 80101ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80101f2:	441e      	add	r6, r3
 80101f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80101f8:	2b20      	cmp	r3, #32
 80101fa:	bfc1      	itttt	gt
 80101fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010200:	409f      	lslgt	r7, r3
 8010202:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010206:	fa24 f303 	lsrgt.w	r3, r4, r3
 801020a:	bfd6      	itet	le
 801020c:	f1c3 0320 	rsble	r3, r3, #32
 8010210:	ea47 0003 	orrgt.w	r0, r7, r3
 8010214:	fa04 f003 	lslle.w	r0, r4, r3
 8010218:	f7f0 f994 	bl	8000544 <__aeabi_ui2d>
 801021c:	2201      	movs	r2, #1
 801021e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010222:	3e01      	subs	r6, #1
 8010224:	9214      	str	r2, [sp, #80]	@ 0x50
 8010226:	e777      	b.n	8010118 <_dtoa_r+0x100>
 8010228:	2301      	movs	r3, #1
 801022a:	e7b8      	b.n	801019e <_dtoa_r+0x186>
 801022c:	9012      	str	r0, [sp, #72]	@ 0x48
 801022e:	e7b7      	b.n	80101a0 <_dtoa_r+0x188>
 8010230:	427b      	negs	r3, r7
 8010232:	930a      	str	r3, [sp, #40]	@ 0x28
 8010234:	2300      	movs	r3, #0
 8010236:	eba8 0807 	sub.w	r8, r8, r7
 801023a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801023c:	e7c4      	b.n	80101c8 <_dtoa_r+0x1b0>
 801023e:	2300      	movs	r3, #0
 8010240:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010242:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010244:	2b00      	cmp	r3, #0
 8010246:	dc35      	bgt.n	80102b4 <_dtoa_r+0x29c>
 8010248:	2301      	movs	r3, #1
 801024a:	9300      	str	r3, [sp, #0]
 801024c:	9307      	str	r3, [sp, #28]
 801024e:	461a      	mov	r2, r3
 8010250:	920e      	str	r2, [sp, #56]	@ 0x38
 8010252:	e00b      	b.n	801026c <_dtoa_r+0x254>
 8010254:	2301      	movs	r3, #1
 8010256:	e7f3      	b.n	8010240 <_dtoa_r+0x228>
 8010258:	2300      	movs	r3, #0
 801025a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801025c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801025e:	18fb      	adds	r3, r7, r3
 8010260:	9300      	str	r3, [sp, #0]
 8010262:	3301      	adds	r3, #1
 8010264:	2b01      	cmp	r3, #1
 8010266:	9307      	str	r3, [sp, #28]
 8010268:	bfb8      	it	lt
 801026a:	2301      	movlt	r3, #1
 801026c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010270:	2100      	movs	r1, #0
 8010272:	2204      	movs	r2, #4
 8010274:	f102 0514 	add.w	r5, r2, #20
 8010278:	429d      	cmp	r5, r3
 801027a:	d91f      	bls.n	80102bc <_dtoa_r+0x2a4>
 801027c:	6041      	str	r1, [r0, #4]
 801027e:	4658      	mov	r0, fp
 8010280:	f001 f8da 	bl	8011438 <_Balloc>
 8010284:	4682      	mov	sl, r0
 8010286:	2800      	cmp	r0, #0
 8010288:	d13c      	bne.n	8010304 <_dtoa_r+0x2ec>
 801028a:	4b1b      	ldr	r3, [pc, #108]	@ (80102f8 <_dtoa_r+0x2e0>)
 801028c:	4602      	mov	r2, r0
 801028e:	f240 11af 	movw	r1, #431	@ 0x1af
 8010292:	e6d8      	b.n	8010046 <_dtoa_r+0x2e>
 8010294:	2301      	movs	r3, #1
 8010296:	e7e0      	b.n	801025a <_dtoa_r+0x242>
 8010298:	2401      	movs	r4, #1
 801029a:	2300      	movs	r3, #0
 801029c:	9309      	str	r3, [sp, #36]	@ 0x24
 801029e:	940b      	str	r4, [sp, #44]	@ 0x2c
 80102a0:	f04f 33ff 	mov.w	r3, #4294967295
 80102a4:	9300      	str	r3, [sp, #0]
 80102a6:	9307      	str	r3, [sp, #28]
 80102a8:	2200      	movs	r2, #0
 80102aa:	2312      	movs	r3, #18
 80102ac:	e7d0      	b.n	8010250 <_dtoa_r+0x238>
 80102ae:	2301      	movs	r3, #1
 80102b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80102b2:	e7f5      	b.n	80102a0 <_dtoa_r+0x288>
 80102b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80102b6:	9300      	str	r3, [sp, #0]
 80102b8:	9307      	str	r3, [sp, #28]
 80102ba:	e7d7      	b.n	801026c <_dtoa_r+0x254>
 80102bc:	3101      	adds	r1, #1
 80102be:	0052      	lsls	r2, r2, #1
 80102c0:	e7d8      	b.n	8010274 <_dtoa_r+0x25c>
 80102c2:	bf00      	nop
 80102c4:	f3af 8000 	nop.w
 80102c8:	636f4361 	.word	0x636f4361
 80102cc:	3fd287a7 	.word	0x3fd287a7
 80102d0:	8b60c8b3 	.word	0x8b60c8b3
 80102d4:	3fc68a28 	.word	0x3fc68a28
 80102d8:	509f79fb 	.word	0x509f79fb
 80102dc:	3fd34413 	.word	0x3fd34413
 80102e0:	08014191 	.word	0x08014191
 80102e4:	08014253 	.word	0x08014253
 80102e8:	7ff00000 	.word	0x7ff00000
 80102ec:	08014169 	.word	0x08014169
 80102f0:	3ff80000 	.word	0x3ff80000
 80102f4:	080143b0 	.word	0x080143b0
 80102f8:	080142ab 	.word	0x080142ab
 80102fc:	0801424f 	.word	0x0801424f
 8010300:	08014168 	.word	0x08014168
 8010304:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010308:	6018      	str	r0, [r3, #0]
 801030a:	9b07      	ldr	r3, [sp, #28]
 801030c:	2b0e      	cmp	r3, #14
 801030e:	f200 80a4 	bhi.w	801045a <_dtoa_r+0x442>
 8010312:	2c00      	cmp	r4, #0
 8010314:	f000 80a1 	beq.w	801045a <_dtoa_r+0x442>
 8010318:	2f00      	cmp	r7, #0
 801031a:	dd33      	ble.n	8010384 <_dtoa_r+0x36c>
 801031c:	4bad      	ldr	r3, [pc, #692]	@ (80105d4 <_dtoa_r+0x5bc>)
 801031e:	f007 020f 	and.w	r2, r7, #15
 8010322:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010326:	ed93 7b00 	vldr	d7, [r3]
 801032a:	05f8      	lsls	r0, r7, #23
 801032c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010330:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010334:	d516      	bpl.n	8010364 <_dtoa_r+0x34c>
 8010336:	4ba8      	ldr	r3, [pc, #672]	@ (80105d8 <_dtoa_r+0x5c0>)
 8010338:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801033c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010340:	f7f0 faa4 	bl	800088c <__aeabi_ddiv>
 8010344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010348:	f004 040f 	and.w	r4, r4, #15
 801034c:	2603      	movs	r6, #3
 801034e:	4da2      	ldr	r5, [pc, #648]	@ (80105d8 <_dtoa_r+0x5c0>)
 8010350:	b954      	cbnz	r4, 8010368 <_dtoa_r+0x350>
 8010352:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010356:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801035a:	f7f0 fa97 	bl	800088c <__aeabi_ddiv>
 801035e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010362:	e028      	b.n	80103b6 <_dtoa_r+0x39e>
 8010364:	2602      	movs	r6, #2
 8010366:	e7f2      	b.n	801034e <_dtoa_r+0x336>
 8010368:	07e1      	lsls	r1, r4, #31
 801036a:	d508      	bpl.n	801037e <_dtoa_r+0x366>
 801036c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010370:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010374:	f7f0 f960 	bl	8000638 <__aeabi_dmul>
 8010378:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801037c:	3601      	adds	r6, #1
 801037e:	1064      	asrs	r4, r4, #1
 8010380:	3508      	adds	r5, #8
 8010382:	e7e5      	b.n	8010350 <_dtoa_r+0x338>
 8010384:	f000 80d2 	beq.w	801052c <_dtoa_r+0x514>
 8010388:	427c      	negs	r4, r7
 801038a:	4b92      	ldr	r3, [pc, #584]	@ (80105d4 <_dtoa_r+0x5bc>)
 801038c:	4d92      	ldr	r5, [pc, #584]	@ (80105d8 <_dtoa_r+0x5c0>)
 801038e:	f004 020f 	and.w	r2, r4, #15
 8010392:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801039a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801039e:	f7f0 f94b 	bl	8000638 <__aeabi_dmul>
 80103a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80103a6:	1124      	asrs	r4, r4, #4
 80103a8:	2300      	movs	r3, #0
 80103aa:	2602      	movs	r6, #2
 80103ac:	2c00      	cmp	r4, #0
 80103ae:	f040 80b2 	bne.w	8010516 <_dtoa_r+0x4fe>
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d1d3      	bne.n	801035e <_dtoa_r+0x346>
 80103b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80103b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	f000 80b7 	beq.w	8010530 <_dtoa_r+0x518>
 80103c2:	4b86      	ldr	r3, [pc, #536]	@ (80105dc <_dtoa_r+0x5c4>)
 80103c4:	2200      	movs	r2, #0
 80103c6:	4620      	mov	r0, r4
 80103c8:	4629      	mov	r1, r5
 80103ca:	f7f0 fba7 	bl	8000b1c <__aeabi_dcmplt>
 80103ce:	2800      	cmp	r0, #0
 80103d0:	f000 80ae 	beq.w	8010530 <_dtoa_r+0x518>
 80103d4:	9b07      	ldr	r3, [sp, #28]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	f000 80aa 	beq.w	8010530 <_dtoa_r+0x518>
 80103dc:	9b00      	ldr	r3, [sp, #0]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	dd37      	ble.n	8010452 <_dtoa_r+0x43a>
 80103e2:	1e7b      	subs	r3, r7, #1
 80103e4:	9304      	str	r3, [sp, #16]
 80103e6:	4620      	mov	r0, r4
 80103e8:	4b7d      	ldr	r3, [pc, #500]	@ (80105e0 <_dtoa_r+0x5c8>)
 80103ea:	2200      	movs	r2, #0
 80103ec:	4629      	mov	r1, r5
 80103ee:	f7f0 f923 	bl	8000638 <__aeabi_dmul>
 80103f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80103f6:	9c00      	ldr	r4, [sp, #0]
 80103f8:	3601      	adds	r6, #1
 80103fa:	4630      	mov	r0, r6
 80103fc:	f7f0 f8b2 	bl	8000564 <__aeabi_i2d>
 8010400:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010404:	f7f0 f918 	bl	8000638 <__aeabi_dmul>
 8010408:	4b76      	ldr	r3, [pc, #472]	@ (80105e4 <_dtoa_r+0x5cc>)
 801040a:	2200      	movs	r2, #0
 801040c:	f7ef ff5e 	bl	80002cc <__adddf3>
 8010410:	4605      	mov	r5, r0
 8010412:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010416:	2c00      	cmp	r4, #0
 8010418:	f040 808d 	bne.w	8010536 <_dtoa_r+0x51e>
 801041c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010420:	4b71      	ldr	r3, [pc, #452]	@ (80105e8 <_dtoa_r+0x5d0>)
 8010422:	2200      	movs	r2, #0
 8010424:	f7ef ff50 	bl	80002c8 <__aeabi_dsub>
 8010428:	4602      	mov	r2, r0
 801042a:	460b      	mov	r3, r1
 801042c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010430:	462a      	mov	r2, r5
 8010432:	4633      	mov	r3, r6
 8010434:	f7f0 fb90 	bl	8000b58 <__aeabi_dcmpgt>
 8010438:	2800      	cmp	r0, #0
 801043a:	f040 828b 	bne.w	8010954 <_dtoa_r+0x93c>
 801043e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010442:	462a      	mov	r2, r5
 8010444:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010448:	f7f0 fb68 	bl	8000b1c <__aeabi_dcmplt>
 801044c:	2800      	cmp	r0, #0
 801044e:	f040 8128 	bne.w	80106a2 <_dtoa_r+0x68a>
 8010452:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8010456:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801045a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801045c:	2b00      	cmp	r3, #0
 801045e:	f2c0 815a 	blt.w	8010716 <_dtoa_r+0x6fe>
 8010462:	2f0e      	cmp	r7, #14
 8010464:	f300 8157 	bgt.w	8010716 <_dtoa_r+0x6fe>
 8010468:	4b5a      	ldr	r3, [pc, #360]	@ (80105d4 <_dtoa_r+0x5bc>)
 801046a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801046e:	ed93 7b00 	vldr	d7, [r3]
 8010472:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010474:	2b00      	cmp	r3, #0
 8010476:	ed8d 7b00 	vstr	d7, [sp]
 801047a:	da03      	bge.n	8010484 <_dtoa_r+0x46c>
 801047c:	9b07      	ldr	r3, [sp, #28]
 801047e:	2b00      	cmp	r3, #0
 8010480:	f340 8101 	ble.w	8010686 <_dtoa_r+0x66e>
 8010484:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010488:	4656      	mov	r6, sl
 801048a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801048e:	4620      	mov	r0, r4
 8010490:	4629      	mov	r1, r5
 8010492:	f7f0 f9fb 	bl	800088c <__aeabi_ddiv>
 8010496:	f7f0 fb7f 	bl	8000b98 <__aeabi_d2iz>
 801049a:	4680      	mov	r8, r0
 801049c:	f7f0 f862 	bl	8000564 <__aeabi_i2d>
 80104a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80104a4:	f7f0 f8c8 	bl	8000638 <__aeabi_dmul>
 80104a8:	4602      	mov	r2, r0
 80104aa:	460b      	mov	r3, r1
 80104ac:	4620      	mov	r0, r4
 80104ae:	4629      	mov	r1, r5
 80104b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80104b4:	f7ef ff08 	bl	80002c8 <__aeabi_dsub>
 80104b8:	f806 4b01 	strb.w	r4, [r6], #1
 80104bc:	9d07      	ldr	r5, [sp, #28]
 80104be:	eba6 040a 	sub.w	r4, r6, sl
 80104c2:	42a5      	cmp	r5, r4
 80104c4:	4602      	mov	r2, r0
 80104c6:	460b      	mov	r3, r1
 80104c8:	f040 8117 	bne.w	80106fa <_dtoa_r+0x6e2>
 80104cc:	f7ef fefe 	bl	80002cc <__adddf3>
 80104d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80104d4:	4604      	mov	r4, r0
 80104d6:	460d      	mov	r5, r1
 80104d8:	f7f0 fb3e 	bl	8000b58 <__aeabi_dcmpgt>
 80104dc:	2800      	cmp	r0, #0
 80104de:	f040 80f9 	bne.w	80106d4 <_dtoa_r+0x6bc>
 80104e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80104e6:	4620      	mov	r0, r4
 80104e8:	4629      	mov	r1, r5
 80104ea:	f7f0 fb0d 	bl	8000b08 <__aeabi_dcmpeq>
 80104ee:	b118      	cbz	r0, 80104f8 <_dtoa_r+0x4e0>
 80104f0:	f018 0f01 	tst.w	r8, #1
 80104f4:	f040 80ee 	bne.w	80106d4 <_dtoa_r+0x6bc>
 80104f8:	4649      	mov	r1, r9
 80104fa:	4658      	mov	r0, fp
 80104fc:	f000 ffdc 	bl	80114b8 <_Bfree>
 8010500:	2300      	movs	r3, #0
 8010502:	7033      	strb	r3, [r6, #0]
 8010504:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010506:	3701      	adds	r7, #1
 8010508:	601f      	str	r7, [r3, #0]
 801050a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801050c:	2b00      	cmp	r3, #0
 801050e:	f000 831d 	beq.w	8010b4c <_dtoa_r+0xb34>
 8010512:	601e      	str	r6, [r3, #0]
 8010514:	e31a      	b.n	8010b4c <_dtoa_r+0xb34>
 8010516:	07e2      	lsls	r2, r4, #31
 8010518:	d505      	bpl.n	8010526 <_dtoa_r+0x50e>
 801051a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801051e:	f7f0 f88b 	bl	8000638 <__aeabi_dmul>
 8010522:	3601      	adds	r6, #1
 8010524:	2301      	movs	r3, #1
 8010526:	1064      	asrs	r4, r4, #1
 8010528:	3508      	adds	r5, #8
 801052a:	e73f      	b.n	80103ac <_dtoa_r+0x394>
 801052c:	2602      	movs	r6, #2
 801052e:	e742      	b.n	80103b6 <_dtoa_r+0x39e>
 8010530:	9c07      	ldr	r4, [sp, #28]
 8010532:	9704      	str	r7, [sp, #16]
 8010534:	e761      	b.n	80103fa <_dtoa_r+0x3e2>
 8010536:	4b27      	ldr	r3, [pc, #156]	@ (80105d4 <_dtoa_r+0x5bc>)
 8010538:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801053a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801053e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010542:	4454      	add	r4, sl
 8010544:	2900      	cmp	r1, #0
 8010546:	d053      	beq.n	80105f0 <_dtoa_r+0x5d8>
 8010548:	4928      	ldr	r1, [pc, #160]	@ (80105ec <_dtoa_r+0x5d4>)
 801054a:	2000      	movs	r0, #0
 801054c:	f7f0 f99e 	bl	800088c <__aeabi_ddiv>
 8010550:	4633      	mov	r3, r6
 8010552:	462a      	mov	r2, r5
 8010554:	f7ef feb8 	bl	80002c8 <__aeabi_dsub>
 8010558:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801055c:	4656      	mov	r6, sl
 801055e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010562:	f7f0 fb19 	bl	8000b98 <__aeabi_d2iz>
 8010566:	4605      	mov	r5, r0
 8010568:	f7ef fffc 	bl	8000564 <__aeabi_i2d>
 801056c:	4602      	mov	r2, r0
 801056e:	460b      	mov	r3, r1
 8010570:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010574:	f7ef fea8 	bl	80002c8 <__aeabi_dsub>
 8010578:	3530      	adds	r5, #48	@ 0x30
 801057a:	4602      	mov	r2, r0
 801057c:	460b      	mov	r3, r1
 801057e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010582:	f806 5b01 	strb.w	r5, [r6], #1
 8010586:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801058a:	f7f0 fac7 	bl	8000b1c <__aeabi_dcmplt>
 801058e:	2800      	cmp	r0, #0
 8010590:	d171      	bne.n	8010676 <_dtoa_r+0x65e>
 8010592:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010596:	4911      	ldr	r1, [pc, #68]	@ (80105dc <_dtoa_r+0x5c4>)
 8010598:	2000      	movs	r0, #0
 801059a:	f7ef fe95 	bl	80002c8 <__aeabi_dsub>
 801059e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80105a2:	f7f0 fabb 	bl	8000b1c <__aeabi_dcmplt>
 80105a6:	2800      	cmp	r0, #0
 80105a8:	f040 8095 	bne.w	80106d6 <_dtoa_r+0x6be>
 80105ac:	42a6      	cmp	r6, r4
 80105ae:	f43f af50 	beq.w	8010452 <_dtoa_r+0x43a>
 80105b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80105b6:	4b0a      	ldr	r3, [pc, #40]	@ (80105e0 <_dtoa_r+0x5c8>)
 80105b8:	2200      	movs	r2, #0
 80105ba:	f7f0 f83d 	bl	8000638 <__aeabi_dmul>
 80105be:	4b08      	ldr	r3, [pc, #32]	@ (80105e0 <_dtoa_r+0x5c8>)
 80105c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80105c4:	2200      	movs	r2, #0
 80105c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80105ca:	f7f0 f835 	bl	8000638 <__aeabi_dmul>
 80105ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80105d2:	e7c4      	b.n	801055e <_dtoa_r+0x546>
 80105d4:	080143b0 	.word	0x080143b0
 80105d8:	08014388 	.word	0x08014388
 80105dc:	3ff00000 	.word	0x3ff00000
 80105e0:	40240000 	.word	0x40240000
 80105e4:	401c0000 	.word	0x401c0000
 80105e8:	40140000 	.word	0x40140000
 80105ec:	3fe00000 	.word	0x3fe00000
 80105f0:	4631      	mov	r1, r6
 80105f2:	4628      	mov	r0, r5
 80105f4:	f7f0 f820 	bl	8000638 <__aeabi_dmul>
 80105f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80105fc:	9415      	str	r4, [sp, #84]	@ 0x54
 80105fe:	4656      	mov	r6, sl
 8010600:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010604:	f7f0 fac8 	bl	8000b98 <__aeabi_d2iz>
 8010608:	4605      	mov	r5, r0
 801060a:	f7ef ffab 	bl	8000564 <__aeabi_i2d>
 801060e:	4602      	mov	r2, r0
 8010610:	460b      	mov	r3, r1
 8010612:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010616:	f7ef fe57 	bl	80002c8 <__aeabi_dsub>
 801061a:	3530      	adds	r5, #48	@ 0x30
 801061c:	f806 5b01 	strb.w	r5, [r6], #1
 8010620:	4602      	mov	r2, r0
 8010622:	460b      	mov	r3, r1
 8010624:	42a6      	cmp	r6, r4
 8010626:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801062a:	f04f 0200 	mov.w	r2, #0
 801062e:	d124      	bne.n	801067a <_dtoa_r+0x662>
 8010630:	4bac      	ldr	r3, [pc, #688]	@ (80108e4 <_dtoa_r+0x8cc>)
 8010632:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010636:	f7ef fe49 	bl	80002cc <__adddf3>
 801063a:	4602      	mov	r2, r0
 801063c:	460b      	mov	r3, r1
 801063e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010642:	f7f0 fa89 	bl	8000b58 <__aeabi_dcmpgt>
 8010646:	2800      	cmp	r0, #0
 8010648:	d145      	bne.n	80106d6 <_dtoa_r+0x6be>
 801064a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801064e:	49a5      	ldr	r1, [pc, #660]	@ (80108e4 <_dtoa_r+0x8cc>)
 8010650:	2000      	movs	r0, #0
 8010652:	f7ef fe39 	bl	80002c8 <__aeabi_dsub>
 8010656:	4602      	mov	r2, r0
 8010658:	460b      	mov	r3, r1
 801065a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801065e:	f7f0 fa5d 	bl	8000b1c <__aeabi_dcmplt>
 8010662:	2800      	cmp	r0, #0
 8010664:	f43f aef5 	beq.w	8010452 <_dtoa_r+0x43a>
 8010668:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801066a:	1e73      	subs	r3, r6, #1
 801066c:	9315      	str	r3, [sp, #84]	@ 0x54
 801066e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010672:	2b30      	cmp	r3, #48	@ 0x30
 8010674:	d0f8      	beq.n	8010668 <_dtoa_r+0x650>
 8010676:	9f04      	ldr	r7, [sp, #16]
 8010678:	e73e      	b.n	80104f8 <_dtoa_r+0x4e0>
 801067a:	4b9b      	ldr	r3, [pc, #620]	@ (80108e8 <_dtoa_r+0x8d0>)
 801067c:	f7ef ffdc 	bl	8000638 <__aeabi_dmul>
 8010680:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010684:	e7bc      	b.n	8010600 <_dtoa_r+0x5e8>
 8010686:	d10c      	bne.n	80106a2 <_dtoa_r+0x68a>
 8010688:	4b98      	ldr	r3, [pc, #608]	@ (80108ec <_dtoa_r+0x8d4>)
 801068a:	2200      	movs	r2, #0
 801068c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010690:	f7ef ffd2 	bl	8000638 <__aeabi_dmul>
 8010694:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010698:	f7f0 fa54 	bl	8000b44 <__aeabi_dcmpge>
 801069c:	2800      	cmp	r0, #0
 801069e:	f000 8157 	beq.w	8010950 <_dtoa_r+0x938>
 80106a2:	2400      	movs	r4, #0
 80106a4:	4625      	mov	r5, r4
 80106a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80106a8:	43db      	mvns	r3, r3
 80106aa:	9304      	str	r3, [sp, #16]
 80106ac:	4656      	mov	r6, sl
 80106ae:	2700      	movs	r7, #0
 80106b0:	4621      	mov	r1, r4
 80106b2:	4658      	mov	r0, fp
 80106b4:	f000 ff00 	bl	80114b8 <_Bfree>
 80106b8:	2d00      	cmp	r5, #0
 80106ba:	d0dc      	beq.n	8010676 <_dtoa_r+0x65e>
 80106bc:	b12f      	cbz	r7, 80106ca <_dtoa_r+0x6b2>
 80106be:	42af      	cmp	r7, r5
 80106c0:	d003      	beq.n	80106ca <_dtoa_r+0x6b2>
 80106c2:	4639      	mov	r1, r7
 80106c4:	4658      	mov	r0, fp
 80106c6:	f000 fef7 	bl	80114b8 <_Bfree>
 80106ca:	4629      	mov	r1, r5
 80106cc:	4658      	mov	r0, fp
 80106ce:	f000 fef3 	bl	80114b8 <_Bfree>
 80106d2:	e7d0      	b.n	8010676 <_dtoa_r+0x65e>
 80106d4:	9704      	str	r7, [sp, #16]
 80106d6:	4633      	mov	r3, r6
 80106d8:	461e      	mov	r6, r3
 80106da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80106de:	2a39      	cmp	r2, #57	@ 0x39
 80106e0:	d107      	bne.n	80106f2 <_dtoa_r+0x6da>
 80106e2:	459a      	cmp	sl, r3
 80106e4:	d1f8      	bne.n	80106d8 <_dtoa_r+0x6c0>
 80106e6:	9a04      	ldr	r2, [sp, #16]
 80106e8:	3201      	adds	r2, #1
 80106ea:	9204      	str	r2, [sp, #16]
 80106ec:	2230      	movs	r2, #48	@ 0x30
 80106ee:	f88a 2000 	strb.w	r2, [sl]
 80106f2:	781a      	ldrb	r2, [r3, #0]
 80106f4:	3201      	adds	r2, #1
 80106f6:	701a      	strb	r2, [r3, #0]
 80106f8:	e7bd      	b.n	8010676 <_dtoa_r+0x65e>
 80106fa:	4b7b      	ldr	r3, [pc, #492]	@ (80108e8 <_dtoa_r+0x8d0>)
 80106fc:	2200      	movs	r2, #0
 80106fe:	f7ef ff9b 	bl	8000638 <__aeabi_dmul>
 8010702:	2200      	movs	r2, #0
 8010704:	2300      	movs	r3, #0
 8010706:	4604      	mov	r4, r0
 8010708:	460d      	mov	r5, r1
 801070a:	f7f0 f9fd 	bl	8000b08 <__aeabi_dcmpeq>
 801070e:	2800      	cmp	r0, #0
 8010710:	f43f aebb 	beq.w	801048a <_dtoa_r+0x472>
 8010714:	e6f0      	b.n	80104f8 <_dtoa_r+0x4e0>
 8010716:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010718:	2a00      	cmp	r2, #0
 801071a:	f000 80db 	beq.w	80108d4 <_dtoa_r+0x8bc>
 801071e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010720:	2a01      	cmp	r2, #1
 8010722:	f300 80bf 	bgt.w	80108a4 <_dtoa_r+0x88c>
 8010726:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010728:	2a00      	cmp	r2, #0
 801072a:	f000 80b7 	beq.w	801089c <_dtoa_r+0x884>
 801072e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010732:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010734:	4646      	mov	r6, r8
 8010736:	9a08      	ldr	r2, [sp, #32]
 8010738:	2101      	movs	r1, #1
 801073a:	441a      	add	r2, r3
 801073c:	4658      	mov	r0, fp
 801073e:	4498      	add	r8, r3
 8010740:	9208      	str	r2, [sp, #32]
 8010742:	f000 ffb7 	bl	80116b4 <__i2b>
 8010746:	4605      	mov	r5, r0
 8010748:	b15e      	cbz	r6, 8010762 <_dtoa_r+0x74a>
 801074a:	9b08      	ldr	r3, [sp, #32]
 801074c:	2b00      	cmp	r3, #0
 801074e:	dd08      	ble.n	8010762 <_dtoa_r+0x74a>
 8010750:	42b3      	cmp	r3, r6
 8010752:	9a08      	ldr	r2, [sp, #32]
 8010754:	bfa8      	it	ge
 8010756:	4633      	movge	r3, r6
 8010758:	eba8 0803 	sub.w	r8, r8, r3
 801075c:	1af6      	subs	r6, r6, r3
 801075e:	1ad3      	subs	r3, r2, r3
 8010760:	9308      	str	r3, [sp, #32]
 8010762:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010764:	b1f3      	cbz	r3, 80107a4 <_dtoa_r+0x78c>
 8010766:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010768:	2b00      	cmp	r3, #0
 801076a:	f000 80b7 	beq.w	80108dc <_dtoa_r+0x8c4>
 801076e:	b18c      	cbz	r4, 8010794 <_dtoa_r+0x77c>
 8010770:	4629      	mov	r1, r5
 8010772:	4622      	mov	r2, r4
 8010774:	4658      	mov	r0, fp
 8010776:	f001 f85d 	bl	8011834 <__pow5mult>
 801077a:	464a      	mov	r2, r9
 801077c:	4601      	mov	r1, r0
 801077e:	4605      	mov	r5, r0
 8010780:	4658      	mov	r0, fp
 8010782:	f000 ffad 	bl	80116e0 <__multiply>
 8010786:	4649      	mov	r1, r9
 8010788:	9004      	str	r0, [sp, #16]
 801078a:	4658      	mov	r0, fp
 801078c:	f000 fe94 	bl	80114b8 <_Bfree>
 8010790:	9b04      	ldr	r3, [sp, #16]
 8010792:	4699      	mov	r9, r3
 8010794:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010796:	1b1a      	subs	r2, r3, r4
 8010798:	d004      	beq.n	80107a4 <_dtoa_r+0x78c>
 801079a:	4649      	mov	r1, r9
 801079c:	4658      	mov	r0, fp
 801079e:	f001 f849 	bl	8011834 <__pow5mult>
 80107a2:	4681      	mov	r9, r0
 80107a4:	2101      	movs	r1, #1
 80107a6:	4658      	mov	r0, fp
 80107a8:	f000 ff84 	bl	80116b4 <__i2b>
 80107ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80107ae:	4604      	mov	r4, r0
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	f000 81cf 	beq.w	8010b54 <_dtoa_r+0xb3c>
 80107b6:	461a      	mov	r2, r3
 80107b8:	4601      	mov	r1, r0
 80107ba:	4658      	mov	r0, fp
 80107bc:	f001 f83a 	bl	8011834 <__pow5mult>
 80107c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107c2:	2b01      	cmp	r3, #1
 80107c4:	4604      	mov	r4, r0
 80107c6:	f300 8095 	bgt.w	80108f4 <_dtoa_r+0x8dc>
 80107ca:	9b02      	ldr	r3, [sp, #8]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	f040 8087 	bne.w	80108e0 <_dtoa_r+0x8c8>
 80107d2:	9b03      	ldr	r3, [sp, #12]
 80107d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80107d8:	2b00      	cmp	r3, #0
 80107da:	f040 8089 	bne.w	80108f0 <_dtoa_r+0x8d8>
 80107de:	9b03      	ldr	r3, [sp, #12]
 80107e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80107e4:	0d1b      	lsrs	r3, r3, #20
 80107e6:	051b      	lsls	r3, r3, #20
 80107e8:	b12b      	cbz	r3, 80107f6 <_dtoa_r+0x7de>
 80107ea:	9b08      	ldr	r3, [sp, #32]
 80107ec:	3301      	adds	r3, #1
 80107ee:	9308      	str	r3, [sp, #32]
 80107f0:	f108 0801 	add.w	r8, r8, #1
 80107f4:	2301      	movs	r3, #1
 80107f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80107f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	f000 81b0 	beq.w	8010b60 <_dtoa_r+0xb48>
 8010800:	6923      	ldr	r3, [r4, #16]
 8010802:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010806:	6918      	ldr	r0, [r3, #16]
 8010808:	f000 ff08 	bl	801161c <__hi0bits>
 801080c:	f1c0 0020 	rsb	r0, r0, #32
 8010810:	9b08      	ldr	r3, [sp, #32]
 8010812:	4418      	add	r0, r3
 8010814:	f010 001f 	ands.w	r0, r0, #31
 8010818:	d077      	beq.n	801090a <_dtoa_r+0x8f2>
 801081a:	f1c0 0320 	rsb	r3, r0, #32
 801081e:	2b04      	cmp	r3, #4
 8010820:	dd6b      	ble.n	80108fa <_dtoa_r+0x8e2>
 8010822:	9b08      	ldr	r3, [sp, #32]
 8010824:	f1c0 001c 	rsb	r0, r0, #28
 8010828:	4403      	add	r3, r0
 801082a:	4480      	add	r8, r0
 801082c:	4406      	add	r6, r0
 801082e:	9308      	str	r3, [sp, #32]
 8010830:	f1b8 0f00 	cmp.w	r8, #0
 8010834:	dd05      	ble.n	8010842 <_dtoa_r+0x82a>
 8010836:	4649      	mov	r1, r9
 8010838:	4642      	mov	r2, r8
 801083a:	4658      	mov	r0, fp
 801083c:	f001 f854 	bl	80118e8 <__lshift>
 8010840:	4681      	mov	r9, r0
 8010842:	9b08      	ldr	r3, [sp, #32]
 8010844:	2b00      	cmp	r3, #0
 8010846:	dd05      	ble.n	8010854 <_dtoa_r+0x83c>
 8010848:	4621      	mov	r1, r4
 801084a:	461a      	mov	r2, r3
 801084c:	4658      	mov	r0, fp
 801084e:	f001 f84b 	bl	80118e8 <__lshift>
 8010852:	4604      	mov	r4, r0
 8010854:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010856:	2b00      	cmp	r3, #0
 8010858:	d059      	beq.n	801090e <_dtoa_r+0x8f6>
 801085a:	4621      	mov	r1, r4
 801085c:	4648      	mov	r0, r9
 801085e:	f001 f8af 	bl	80119c0 <__mcmp>
 8010862:	2800      	cmp	r0, #0
 8010864:	da53      	bge.n	801090e <_dtoa_r+0x8f6>
 8010866:	1e7b      	subs	r3, r7, #1
 8010868:	9304      	str	r3, [sp, #16]
 801086a:	4649      	mov	r1, r9
 801086c:	2300      	movs	r3, #0
 801086e:	220a      	movs	r2, #10
 8010870:	4658      	mov	r0, fp
 8010872:	f000 fe43 	bl	80114fc <__multadd>
 8010876:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010878:	4681      	mov	r9, r0
 801087a:	2b00      	cmp	r3, #0
 801087c:	f000 8172 	beq.w	8010b64 <_dtoa_r+0xb4c>
 8010880:	2300      	movs	r3, #0
 8010882:	4629      	mov	r1, r5
 8010884:	220a      	movs	r2, #10
 8010886:	4658      	mov	r0, fp
 8010888:	f000 fe38 	bl	80114fc <__multadd>
 801088c:	9b00      	ldr	r3, [sp, #0]
 801088e:	2b00      	cmp	r3, #0
 8010890:	4605      	mov	r5, r0
 8010892:	dc67      	bgt.n	8010964 <_dtoa_r+0x94c>
 8010894:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010896:	2b02      	cmp	r3, #2
 8010898:	dc41      	bgt.n	801091e <_dtoa_r+0x906>
 801089a:	e063      	b.n	8010964 <_dtoa_r+0x94c>
 801089c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801089e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80108a2:	e746      	b.n	8010732 <_dtoa_r+0x71a>
 80108a4:	9b07      	ldr	r3, [sp, #28]
 80108a6:	1e5c      	subs	r4, r3, #1
 80108a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80108aa:	42a3      	cmp	r3, r4
 80108ac:	bfbf      	itttt	lt
 80108ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80108b0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80108b2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80108b4:	1ae3      	sublt	r3, r4, r3
 80108b6:	bfb4      	ite	lt
 80108b8:	18d2      	addlt	r2, r2, r3
 80108ba:	1b1c      	subge	r4, r3, r4
 80108bc:	9b07      	ldr	r3, [sp, #28]
 80108be:	bfbc      	itt	lt
 80108c0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80108c2:	2400      	movlt	r4, #0
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	bfb5      	itete	lt
 80108c8:	eba8 0603 	sublt.w	r6, r8, r3
 80108cc:	9b07      	ldrge	r3, [sp, #28]
 80108ce:	2300      	movlt	r3, #0
 80108d0:	4646      	movge	r6, r8
 80108d2:	e730      	b.n	8010736 <_dtoa_r+0x71e>
 80108d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80108d6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80108d8:	4646      	mov	r6, r8
 80108da:	e735      	b.n	8010748 <_dtoa_r+0x730>
 80108dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80108de:	e75c      	b.n	801079a <_dtoa_r+0x782>
 80108e0:	2300      	movs	r3, #0
 80108e2:	e788      	b.n	80107f6 <_dtoa_r+0x7de>
 80108e4:	3fe00000 	.word	0x3fe00000
 80108e8:	40240000 	.word	0x40240000
 80108ec:	40140000 	.word	0x40140000
 80108f0:	9b02      	ldr	r3, [sp, #8]
 80108f2:	e780      	b.n	80107f6 <_dtoa_r+0x7de>
 80108f4:	2300      	movs	r3, #0
 80108f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80108f8:	e782      	b.n	8010800 <_dtoa_r+0x7e8>
 80108fa:	d099      	beq.n	8010830 <_dtoa_r+0x818>
 80108fc:	9a08      	ldr	r2, [sp, #32]
 80108fe:	331c      	adds	r3, #28
 8010900:	441a      	add	r2, r3
 8010902:	4498      	add	r8, r3
 8010904:	441e      	add	r6, r3
 8010906:	9208      	str	r2, [sp, #32]
 8010908:	e792      	b.n	8010830 <_dtoa_r+0x818>
 801090a:	4603      	mov	r3, r0
 801090c:	e7f6      	b.n	80108fc <_dtoa_r+0x8e4>
 801090e:	9b07      	ldr	r3, [sp, #28]
 8010910:	9704      	str	r7, [sp, #16]
 8010912:	2b00      	cmp	r3, #0
 8010914:	dc20      	bgt.n	8010958 <_dtoa_r+0x940>
 8010916:	9300      	str	r3, [sp, #0]
 8010918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801091a:	2b02      	cmp	r3, #2
 801091c:	dd1e      	ble.n	801095c <_dtoa_r+0x944>
 801091e:	9b00      	ldr	r3, [sp, #0]
 8010920:	2b00      	cmp	r3, #0
 8010922:	f47f aec0 	bne.w	80106a6 <_dtoa_r+0x68e>
 8010926:	4621      	mov	r1, r4
 8010928:	2205      	movs	r2, #5
 801092a:	4658      	mov	r0, fp
 801092c:	f000 fde6 	bl	80114fc <__multadd>
 8010930:	4601      	mov	r1, r0
 8010932:	4604      	mov	r4, r0
 8010934:	4648      	mov	r0, r9
 8010936:	f001 f843 	bl	80119c0 <__mcmp>
 801093a:	2800      	cmp	r0, #0
 801093c:	f77f aeb3 	ble.w	80106a6 <_dtoa_r+0x68e>
 8010940:	4656      	mov	r6, sl
 8010942:	2331      	movs	r3, #49	@ 0x31
 8010944:	f806 3b01 	strb.w	r3, [r6], #1
 8010948:	9b04      	ldr	r3, [sp, #16]
 801094a:	3301      	adds	r3, #1
 801094c:	9304      	str	r3, [sp, #16]
 801094e:	e6ae      	b.n	80106ae <_dtoa_r+0x696>
 8010950:	9c07      	ldr	r4, [sp, #28]
 8010952:	9704      	str	r7, [sp, #16]
 8010954:	4625      	mov	r5, r4
 8010956:	e7f3      	b.n	8010940 <_dtoa_r+0x928>
 8010958:	9b07      	ldr	r3, [sp, #28]
 801095a:	9300      	str	r3, [sp, #0]
 801095c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801095e:	2b00      	cmp	r3, #0
 8010960:	f000 8104 	beq.w	8010b6c <_dtoa_r+0xb54>
 8010964:	2e00      	cmp	r6, #0
 8010966:	dd05      	ble.n	8010974 <_dtoa_r+0x95c>
 8010968:	4629      	mov	r1, r5
 801096a:	4632      	mov	r2, r6
 801096c:	4658      	mov	r0, fp
 801096e:	f000 ffbb 	bl	80118e8 <__lshift>
 8010972:	4605      	mov	r5, r0
 8010974:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010976:	2b00      	cmp	r3, #0
 8010978:	d05a      	beq.n	8010a30 <_dtoa_r+0xa18>
 801097a:	6869      	ldr	r1, [r5, #4]
 801097c:	4658      	mov	r0, fp
 801097e:	f000 fd5b 	bl	8011438 <_Balloc>
 8010982:	4606      	mov	r6, r0
 8010984:	b928      	cbnz	r0, 8010992 <_dtoa_r+0x97a>
 8010986:	4b84      	ldr	r3, [pc, #528]	@ (8010b98 <_dtoa_r+0xb80>)
 8010988:	4602      	mov	r2, r0
 801098a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801098e:	f7ff bb5a 	b.w	8010046 <_dtoa_r+0x2e>
 8010992:	692a      	ldr	r2, [r5, #16]
 8010994:	3202      	adds	r2, #2
 8010996:	0092      	lsls	r2, r2, #2
 8010998:	f105 010c 	add.w	r1, r5, #12
 801099c:	300c      	adds	r0, #12
 801099e:	f7ff fa76 	bl	800fe8e <memcpy>
 80109a2:	2201      	movs	r2, #1
 80109a4:	4631      	mov	r1, r6
 80109a6:	4658      	mov	r0, fp
 80109a8:	f000 ff9e 	bl	80118e8 <__lshift>
 80109ac:	f10a 0301 	add.w	r3, sl, #1
 80109b0:	9307      	str	r3, [sp, #28]
 80109b2:	9b00      	ldr	r3, [sp, #0]
 80109b4:	4453      	add	r3, sl
 80109b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80109b8:	9b02      	ldr	r3, [sp, #8]
 80109ba:	f003 0301 	and.w	r3, r3, #1
 80109be:	462f      	mov	r7, r5
 80109c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80109c2:	4605      	mov	r5, r0
 80109c4:	9b07      	ldr	r3, [sp, #28]
 80109c6:	4621      	mov	r1, r4
 80109c8:	3b01      	subs	r3, #1
 80109ca:	4648      	mov	r0, r9
 80109cc:	9300      	str	r3, [sp, #0]
 80109ce:	f7ff fa9b 	bl	800ff08 <quorem>
 80109d2:	4639      	mov	r1, r7
 80109d4:	9002      	str	r0, [sp, #8]
 80109d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80109da:	4648      	mov	r0, r9
 80109dc:	f000 fff0 	bl	80119c0 <__mcmp>
 80109e0:	462a      	mov	r2, r5
 80109e2:	9008      	str	r0, [sp, #32]
 80109e4:	4621      	mov	r1, r4
 80109e6:	4658      	mov	r0, fp
 80109e8:	f001 f806 	bl	80119f8 <__mdiff>
 80109ec:	68c2      	ldr	r2, [r0, #12]
 80109ee:	4606      	mov	r6, r0
 80109f0:	bb02      	cbnz	r2, 8010a34 <_dtoa_r+0xa1c>
 80109f2:	4601      	mov	r1, r0
 80109f4:	4648      	mov	r0, r9
 80109f6:	f000 ffe3 	bl	80119c0 <__mcmp>
 80109fa:	4602      	mov	r2, r0
 80109fc:	4631      	mov	r1, r6
 80109fe:	4658      	mov	r0, fp
 8010a00:	920e      	str	r2, [sp, #56]	@ 0x38
 8010a02:	f000 fd59 	bl	80114b8 <_Bfree>
 8010a06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010a0a:	9e07      	ldr	r6, [sp, #28]
 8010a0c:	ea43 0102 	orr.w	r1, r3, r2
 8010a10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a12:	4319      	orrs	r1, r3
 8010a14:	d110      	bne.n	8010a38 <_dtoa_r+0xa20>
 8010a16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010a1a:	d029      	beq.n	8010a70 <_dtoa_r+0xa58>
 8010a1c:	9b08      	ldr	r3, [sp, #32]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	dd02      	ble.n	8010a28 <_dtoa_r+0xa10>
 8010a22:	9b02      	ldr	r3, [sp, #8]
 8010a24:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010a28:	9b00      	ldr	r3, [sp, #0]
 8010a2a:	f883 8000 	strb.w	r8, [r3]
 8010a2e:	e63f      	b.n	80106b0 <_dtoa_r+0x698>
 8010a30:	4628      	mov	r0, r5
 8010a32:	e7bb      	b.n	80109ac <_dtoa_r+0x994>
 8010a34:	2201      	movs	r2, #1
 8010a36:	e7e1      	b.n	80109fc <_dtoa_r+0x9e4>
 8010a38:	9b08      	ldr	r3, [sp, #32]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	db04      	blt.n	8010a48 <_dtoa_r+0xa30>
 8010a3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010a40:	430b      	orrs	r3, r1
 8010a42:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010a44:	430b      	orrs	r3, r1
 8010a46:	d120      	bne.n	8010a8a <_dtoa_r+0xa72>
 8010a48:	2a00      	cmp	r2, #0
 8010a4a:	dded      	ble.n	8010a28 <_dtoa_r+0xa10>
 8010a4c:	4649      	mov	r1, r9
 8010a4e:	2201      	movs	r2, #1
 8010a50:	4658      	mov	r0, fp
 8010a52:	f000 ff49 	bl	80118e8 <__lshift>
 8010a56:	4621      	mov	r1, r4
 8010a58:	4681      	mov	r9, r0
 8010a5a:	f000 ffb1 	bl	80119c0 <__mcmp>
 8010a5e:	2800      	cmp	r0, #0
 8010a60:	dc03      	bgt.n	8010a6a <_dtoa_r+0xa52>
 8010a62:	d1e1      	bne.n	8010a28 <_dtoa_r+0xa10>
 8010a64:	f018 0f01 	tst.w	r8, #1
 8010a68:	d0de      	beq.n	8010a28 <_dtoa_r+0xa10>
 8010a6a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010a6e:	d1d8      	bne.n	8010a22 <_dtoa_r+0xa0a>
 8010a70:	9a00      	ldr	r2, [sp, #0]
 8010a72:	2339      	movs	r3, #57	@ 0x39
 8010a74:	7013      	strb	r3, [r2, #0]
 8010a76:	4633      	mov	r3, r6
 8010a78:	461e      	mov	r6, r3
 8010a7a:	3b01      	subs	r3, #1
 8010a7c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010a80:	2a39      	cmp	r2, #57	@ 0x39
 8010a82:	d052      	beq.n	8010b2a <_dtoa_r+0xb12>
 8010a84:	3201      	adds	r2, #1
 8010a86:	701a      	strb	r2, [r3, #0]
 8010a88:	e612      	b.n	80106b0 <_dtoa_r+0x698>
 8010a8a:	2a00      	cmp	r2, #0
 8010a8c:	dd07      	ble.n	8010a9e <_dtoa_r+0xa86>
 8010a8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010a92:	d0ed      	beq.n	8010a70 <_dtoa_r+0xa58>
 8010a94:	9a00      	ldr	r2, [sp, #0]
 8010a96:	f108 0301 	add.w	r3, r8, #1
 8010a9a:	7013      	strb	r3, [r2, #0]
 8010a9c:	e608      	b.n	80106b0 <_dtoa_r+0x698>
 8010a9e:	9b07      	ldr	r3, [sp, #28]
 8010aa0:	9a07      	ldr	r2, [sp, #28]
 8010aa2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010aa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010aa8:	4293      	cmp	r3, r2
 8010aaa:	d028      	beq.n	8010afe <_dtoa_r+0xae6>
 8010aac:	4649      	mov	r1, r9
 8010aae:	2300      	movs	r3, #0
 8010ab0:	220a      	movs	r2, #10
 8010ab2:	4658      	mov	r0, fp
 8010ab4:	f000 fd22 	bl	80114fc <__multadd>
 8010ab8:	42af      	cmp	r7, r5
 8010aba:	4681      	mov	r9, r0
 8010abc:	f04f 0300 	mov.w	r3, #0
 8010ac0:	f04f 020a 	mov.w	r2, #10
 8010ac4:	4639      	mov	r1, r7
 8010ac6:	4658      	mov	r0, fp
 8010ac8:	d107      	bne.n	8010ada <_dtoa_r+0xac2>
 8010aca:	f000 fd17 	bl	80114fc <__multadd>
 8010ace:	4607      	mov	r7, r0
 8010ad0:	4605      	mov	r5, r0
 8010ad2:	9b07      	ldr	r3, [sp, #28]
 8010ad4:	3301      	adds	r3, #1
 8010ad6:	9307      	str	r3, [sp, #28]
 8010ad8:	e774      	b.n	80109c4 <_dtoa_r+0x9ac>
 8010ada:	f000 fd0f 	bl	80114fc <__multadd>
 8010ade:	4629      	mov	r1, r5
 8010ae0:	4607      	mov	r7, r0
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	220a      	movs	r2, #10
 8010ae6:	4658      	mov	r0, fp
 8010ae8:	f000 fd08 	bl	80114fc <__multadd>
 8010aec:	4605      	mov	r5, r0
 8010aee:	e7f0      	b.n	8010ad2 <_dtoa_r+0xaba>
 8010af0:	9b00      	ldr	r3, [sp, #0]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	bfcc      	ite	gt
 8010af6:	461e      	movgt	r6, r3
 8010af8:	2601      	movle	r6, #1
 8010afa:	4456      	add	r6, sl
 8010afc:	2700      	movs	r7, #0
 8010afe:	4649      	mov	r1, r9
 8010b00:	2201      	movs	r2, #1
 8010b02:	4658      	mov	r0, fp
 8010b04:	f000 fef0 	bl	80118e8 <__lshift>
 8010b08:	4621      	mov	r1, r4
 8010b0a:	4681      	mov	r9, r0
 8010b0c:	f000 ff58 	bl	80119c0 <__mcmp>
 8010b10:	2800      	cmp	r0, #0
 8010b12:	dcb0      	bgt.n	8010a76 <_dtoa_r+0xa5e>
 8010b14:	d102      	bne.n	8010b1c <_dtoa_r+0xb04>
 8010b16:	f018 0f01 	tst.w	r8, #1
 8010b1a:	d1ac      	bne.n	8010a76 <_dtoa_r+0xa5e>
 8010b1c:	4633      	mov	r3, r6
 8010b1e:	461e      	mov	r6, r3
 8010b20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010b24:	2a30      	cmp	r2, #48	@ 0x30
 8010b26:	d0fa      	beq.n	8010b1e <_dtoa_r+0xb06>
 8010b28:	e5c2      	b.n	80106b0 <_dtoa_r+0x698>
 8010b2a:	459a      	cmp	sl, r3
 8010b2c:	d1a4      	bne.n	8010a78 <_dtoa_r+0xa60>
 8010b2e:	9b04      	ldr	r3, [sp, #16]
 8010b30:	3301      	adds	r3, #1
 8010b32:	9304      	str	r3, [sp, #16]
 8010b34:	2331      	movs	r3, #49	@ 0x31
 8010b36:	f88a 3000 	strb.w	r3, [sl]
 8010b3a:	e5b9      	b.n	80106b0 <_dtoa_r+0x698>
 8010b3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010b3e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010b9c <_dtoa_r+0xb84>
 8010b42:	b11b      	cbz	r3, 8010b4c <_dtoa_r+0xb34>
 8010b44:	f10a 0308 	add.w	r3, sl, #8
 8010b48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010b4a:	6013      	str	r3, [r2, #0]
 8010b4c:	4650      	mov	r0, sl
 8010b4e:	b019      	add	sp, #100	@ 0x64
 8010b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b56:	2b01      	cmp	r3, #1
 8010b58:	f77f ae37 	ble.w	80107ca <_dtoa_r+0x7b2>
 8010b5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010b60:	2001      	movs	r0, #1
 8010b62:	e655      	b.n	8010810 <_dtoa_r+0x7f8>
 8010b64:	9b00      	ldr	r3, [sp, #0]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	f77f aed6 	ble.w	8010918 <_dtoa_r+0x900>
 8010b6c:	4656      	mov	r6, sl
 8010b6e:	4621      	mov	r1, r4
 8010b70:	4648      	mov	r0, r9
 8010b72:	f7ff f9c9 	bl	800ff08 <quorem>
 8010b76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010b7a:	f806 8b01 	strb.w	r8, [r6], #1
 8010b7e:	9b00      	ldr	r3, [sp, #0]
 8010b80:	eba6 020a 	sub.w	r2, r6, sl
 8010b84:	4293      	cmp	r3, r2
 8010b86:	ddb3      	ble.n	8010af0 <_dtoa_r+0xad8>
 8010b88:	4649      	mov	r1, r9
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	220a      	movs	r2, #10
 8010b8e:	4658      	mov	r0, fp
 8010b90:	f000 fcb4 	bl	80114fc <__multadd>
 8010b94:	4681      	mov	r9, r0
 8010b96:	e7ea      	b.n	8010b6e <_dtoa_r+0xb56>
 8010b98:	080142ab 	.word	0x080142ab
 8010b9c:	08014246 	.word	0x08014246

08010ba0 <_free_r>:
 8010ba0:	b538      	push	{r3, r4, r5, lr}
 8010ba2:	4605      	mov	r5, r0
 8010ba4:	2900      	cmp	r1, #0
 8010ba6:	d041      	beq.n	8010c2c <_free_r+0x8c>
 8010ba8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010bac:	1f0c      	subs	r4, r1, #4
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	bfb8      	it	lt
 8010bb2:	18e4      	addlt	r4, r4, r3
 8010bb4:	f000 fc34 	bl	8011420 <__malloc_lock>
 8010bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8010c30 <_free_r+0x90>)
 8010bba:	6813      	ldr	r3, [r2, #0]
 8010bbc:	b933      	cbnz	r3, 8010bcc <_free_r+0x2c>
 8010bbe:	6063      	str	r3, [r4, #4]
 8010bc0:	6014      	str	r4, [r2, #0]
 8010bc2:	4628      	mov	r0, r5
 8010bc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010bc8:	f000 bc30 	b.w	801142c <__malloc_unlock>
 8010bcc:	42a3      	cmp	r3, r4
 8010bce:	d908      	bls.n	8010be2 <_free_r+0x42>
 8010bd0:	6820      	ldr	r0, [r4, #0]
 8010bd2:	1821      	adds	r1, r4, r0
 8010bd4:	428b      	cmp	r3, r1
 8010bd6:	bf01      	itttt	eq
 8010bd8:	6819      	ldreq	r1, [r3, #0]
 8010bda:	685b      	ldreq	r3, [r3, #4]
 8010bdc:	1809      	addeq	r1, r1, r0
 8010bde:	6021      	streq	r1, [r4, #0]
 8010be0:	e7ed      	b.n	8010bbe <_free_r+0x1e>
 8010be2:	461a      	mov	r2, r3
 8010be4:	685b      	ldr	r3, [r3, #4]
 8010be6:	b10b      	cbz	r3, 8010bec <_free_r+0x4c>
 8010be8:	42a3      	cmp	r3, r4
 8010bea:	d9fa      	bls.n	8010be2 <_free_r+0x42>
 8010bec:	6811      	ldr	r1, [r2, #0]
 8010bee:	1850      	adds	r0, r2, r1
 8010bf0:	42a0      	cmp	r0, r4
 8010bf2:	d10b      	bne.n	8010c0c <_free_r+0x6c>
 8010bf4:	6820      	ldr	r0, [r4, #0]
 8010bf6:	4401      	add	r1, r0
 8010bf8:	1850      	adds	r0, r2, r1
 8010bfa:	4283      	cmp	r3, r0
 8010bfc:	6011      	str	r1, [r2, #0]
 8010bfe:	d1e0      	bne.n	8010bc2 <_free_r+0x22>
 8010c00:	6818      	ldr	r0, [r3, #0]
 8010c02:	685b      	ldr	r3, [r3, #4]
 8010c04:	6053      	str	r3, [r2, #4]
 8010c06:	4408      	add	r0, r1
 8010c08:	6010      	str	r0, [r2, #0]
 8010c0a:	e7da      	b.n	8010bc2 <_free_r+0x22>
 8010c0c:	d902      	bls.n	8010c14 <_free_r+0x74>
 8010c0e:	230c      	movs	r3, #12
 8010c10:	602b      	str	r3, [r5, #0]
 8010c12:	e7d6      	b.n	8010bc2 <_free_r+0x22>
 8010c14:	6820      	ldr	r0, [r4, #0]
 8010c16:	1821      	adds	r1, r4, r0
 8010c18:	428b      	cmp	r3, r1
 8010c1a:	bf04      	itt	eq
 8010c1c:	6819      	ldreq	r1, [r3, #0]
 8010c1e:	685b      	ldreq	r3, [r3, #4]
 8010c20:	6063      	str	r3, [r4, #4]
 8010c22:	bf04      	itt	eq
 8010c24:	1809      	addeq	r1, r1, r0
 8010c26:	6021      	streq	r1, [r4, #0]
 8010c28:	6054      	str	r4, [r2, #4]
 8010c2a:	e7ca      	b.n	8010bc2 <_free_r+0x22>
 8010c2c:	bd38      	pop	{r3, r4, r5, pc}
 8010c2e:	bf00      	nop
 8010c30:	20006cdc 	.word	0x20006cdc

08010c34 <rshift>:
 8010c34:	6903      	ldr	r3, [r0, #16]
 8010c36:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010c3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c3e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010c42:	f100 0414 	add.w	r4, r0, #20
 8010c46:	dd45      	ble.n	8010cd4 <rshift+0xa0>
 8010c48:	f011 011f 	ands.w	r1, r1, #31
 8010c4c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010c50:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010c54:	d10c      	bne.n	8010c70 <rshift+0x3c>
 8010c56:	f100 0710 	add.w	r7, r0, #16
 8010c5a:	4629      	mov	r1, r5
 8010c5c:	42b1      	cmp	r1, r6
 8010c5e:	d334      	bcc.n	8010cca <rshift+0x96>
 8010c60:	1a9b      	subs	r3, r3, r2
 8010c62:	009b      	lsls	r3, r3, #2
 8010c64:	1eea      	subs	r2, r5, #3
 8010c66:	4296      	cmp	r6, r2
 8010c68:	bf38      	it	cc
 8010c6a:	2300      	movcc	r3, #0
 8010c6c:	4423      	add	r3, r4
 8010c6e:	e015      	b.n	8010c9c <rshift+0x68>
 8010c70:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010c74:	f1c1 0820 	rsb	r8, r1, #32
 8010c78:	40cf      	lsrs	r7, r1
 8010c7a:	f105 0e04 	add.w	lr, r5, #4
 8010c7e:	46a1      	mov	r9, r4
 8010c80:	4576      	cmp	r6, lr
 8010c82:	46f4      	mov	ip, lr
 8010c84:	d815      	bhi.n	8010cb2 <rshift+0x7e>
 8010c86:	1a9a      	subs	r2, r3, r2
 8010c88:	0092      	lsls	r2, r2, #2
 8010c8a:	3a04      	subs	r2, #4
 8010c8c:	3501      	adds	r5, #1
 8010c8e:	42ae      	cmp	r6, r5
 8010c90:	bf38      	it	cc
 8010c92:	2200      	movcc	r2, #0
 8010c94:	18a3      	adds	r3, r4, r2
 8010c96:	50a7      	str	r7, [r4, r2]
 8010c98:	b107      	cbz	r7, 8010c9c <rshift+0x68>
 8010c9a:	3304      	adds	r3, #4
 8010c9c:	1b1a      	subs	r2, r3, r4
 8010c9e:	42a3      	cmp	r3, r4
 8010ca0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010ca4:	bf08      	it	eq
 8010ca6:	2300      	moveq	r3, #0
 8010ca8:	6102      	str	r2, [r0, #16]
 8010caa:	bf08      	it	eq
 8010cac:	6143      	streq	r3, [r0, #20]
 8010cae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010cb2:	f8dc c000 	ldr.w	ip, [ip]
 8010cb6:	fa0c fc08 	lsl.w	ip, ip, r8
 8010cba:	ea4c 0707 	orr.w	r7, ip, r7
 8010cbe:	f849 7b04 	str.w	r7, [r9], #4
 8010cc2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010cc6:	40cf      	lsrs	r7, r1
 8010cc8:	e7da      	b.n	8010c80 <rshift+0x4c>
 8010cca:	f851 cb04 	ldr.w	ip, [r1], #4
 8010cce:	f847 cf04 	str.w	ip, [r7, #4]!
 8010cd2:	e7c3      	b.n	8010c5c <rshift+0x28>
 8010cd4:	4623      	mov	r3, r4
 8010cd6:	e7e1      	b.n	8010c9c <rshift+0x68>

08010cd8 <__hexdig_fun>:
 8010cd8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010cdc:	2b09      	cmp	r3, #9
 8010cde:	d802      	bhi.n	8010ce6 <__hexdig_fun+0xe>
 8010ce0:	3820      	subs	r0, #32
 8010ce2:	b2c0      	uxtb	r0, r0
 8010ce4:	4770      	bx	lr
 8010ce6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010cea:	2b05      	cmp	r3, #5
 8010cec:	d801      	bhi.n	8010cf2 <__hexdig_fun+0x1a>
 8010cee:	3847      	subs	r0, #71	@ 0x47
 8010cf0:	e7f7      	b.n	8010ce2 <__hexdig_fun+0xa>
 8010cf2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010cf6:	2b05      	cmp	r3, #5
 8010cf8:	d801      	bhi.n	8010cfe <__hexdig_fun+0x26>
 8010cfa:	3827      	subs	r0, #39	@ 0x27
 8010cfc:	e7f1      	b.n	8010ce2 <__hexdig_fun+0xa>
 8010cfe:	2000      	movs	r0, #0
 8010d00:	4770      	bx	lr
	...

08010d04 <__gethex>:
 8010d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d08:	b085      	sub	sp, #20
 8010d0a:	468a      	mov	sl, r1
 8010d0c:	9302      	str	r3, [sp, #8]
 8010d0e:	680b      	ldr	r3, [r1, #0]
 8010d10:	9001      	str	r0, [sp, #4]
 8010d12:	4690      	mov	r8, r2
 8010d14:	1c9c      	adds	r4, r3, #2
 8010d16:	46a1      	mov	r9, r4
 8010d18:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010d1c:	2830      	cmp	r0, #48	@ 0x30
 8010d1e:	d0fa      	beq.n	8010d16 <__gethex+0x12>
 8010d20:	eba9 0303 	sub.w	r3, r9, r3
 8010d24:	f1a3 0b02 	sub.w	fp, r3, #2
 8010d28:	f7ff ffd6 	bl	8010cd8 <__hexdig_fun>
 8010d2c:	4605      	mov	r5, r0
 8010d2e:	2800      	cmp	r0, #0
 8010d30:	d168      	bne.n	8010e04 <__gethex+0x100>
 8010d32:	49a0      	ldr	r1, [pc, #640]	@ (8010fb4 <__gethex+0x2b0>)
 8010d34:	2201      	movs	r2, #1
 8010d36:	4648      	mov	r0, r9
 8010d38:	f7fe ffc3 	bl	800fcc2 <strncmp>
 8010d3c:	4607      	mov	r7, r0
 8010d3e:	2800      	cmp	r0, #0
 8010d40:	d167      	bne.n	8010e12 <__gethex+0x10e>
 8010d42:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010d46:	4626      	mov	r6, r4
 8010d48:	f7ff ffc6 	bl	8010cd8 <__hexdig_fun>
 8010d4c:	2800      	cmp	r0, #0
 8010d4e:	d062      	beq.n	8010e16 <__gethex+0x112>
 8010d50:	4623      	mov	r3, r4
 8010d52:	7818      	ldrb	r0, [r3, #0]
 8010d54:	2830      	cmp	r0, #48	@ 0x30
 8010d56:	4699      	mov	r9, r3
 8010d58:	f103 0301 	add.w	r3, r3, #1
 8010d5c:	d0f9      	beq.n	8010d52 <__gethex+0x4e>
 8010d5e:	f7ff ffbb 	bl	8010cd8 <__hexdig_fun>
 8010d62:	fab0 f580 	clz	r5, r0
 8010d66:	096d      	lsrs	r5, r5, #5
 8010d68:	f04f 0b01 	mov.w	fp, #1
 8010d6c:	464a      	mov	r2, r9
 8010d6e:	4616      	mov	r6, r2
 8010d70:	3201      	adds	r2, #1
 8010d72:	7830      	ldrb	r0, [r6, #0]
 8010d74:	f7ff ffb0 	bl	8010cd8 <__hexdig_fun>
 8010d78:	2800      	cmp	r0, #0
 8010d7a:	d1f8      	bne.n	8010d6e <__gethex+0x6a>
 8010d7c:	498d      	ldr	r1, [pc, #564]	@ (8010fb4 <__gethex+0x2b0>)
 8010d7e:	2201      	movs	r2, #1
 8010d80:	4630      	mov	r0, r6
 8010d82:	f7fe ff9e 	bl	800fcc2 <strncmp>
 8010d86:	2800      	cmp	r0, #0
 8010d88:	d13f      	bne.n	8010e0a <__gethex+0x106>
 8010d8a:	b944      	cbnz	r4, 8010d9e <__gethex+0x9a>
 8010d8c:	1c74      	adds	r4, r6, #1
 8010d8e:	4622      	mov	r2, r4
 8010d90:	4616      	mov	r6, r2
 8010d92:	3201      	adds	r2, #1
 8010d94:	7830      	ldrb	r0, [r6, #0]
 8010d96:	f7ff ff9f 	bl	8010cd8 <__hexdig_fun>
 8010d9a:	2800      	cmp	r0, #0
 8010d9c:	d1f8      	bne.n	8010d90 <__gethex+0x8c>
 8010d9e:	1ba4      	subs	r4, r4, r6
 8010da0:	00a7      	lsls	r7, r4, #2
 8010da2:	7833      	ldrb	r3, [r6, #0]
 8010da4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010da8:	2b50      	cmp	r3, #80	@ 0x50
 8010daa:	d13e      	bne.n	8010e2a <__gethex+0x126>
 8010dac:	7873      	ldrb	r3, [r6, #1]
 8010dae:	2b2b      	cmp	r3, #43	@ 0x2b
 8010db0:	d033      	beq.n	8010e1a <__gethex+0x116>
 8010db2:	2b2d      	cmp	r3, #45	@ 0x2d
 8010db4:	d034      	beq.n	8010e20 <__gethex+0x11c>
 8010db6:	1c71      	adds	r1, r6, #1
 8010db8:	2400      	movs	r4, #0
 8010dba:	7808      	ldrb	r0, [r1, #0]
 8010dbc:	f7ff ff8c 	bl	8010cd8 <__hexdig_fun>
 8010dc0:	1e43      	subs	r3, r0, #1
 8010dc2:	b2db      	uxtb	r3, r3
 8010dc4:	2b18      	cmp	r3, #24
 8010dc6:	d830      	bhi.n	8010e2a <__gethex+0x126>
 8010dc8:	f1a0 0210 	sub.w	r2, r0, #16
 8010dcc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010dd0:	f7ff ff82 	bl	8010cd8 <__hexdig_fun>
 8010dd4:	f100 3cff 	add.w	ip, r0, #4294967295
 8010dd8:	fa5f fc8c 	uxtb.w	ip, ip
 8010ddc:	f1bc 0f18 	cmp.w	ip, #24
 8010de0:	f04f 030a 	mov.w	r3, #10
 8010de4:	d91e      	bls.n	8010e24 <__gethex+0x120>
 8010de6:	b104      	cbz	r4, 8010dea <__gethex+0xe6>
 8010de8:	4252      	negs	r2, r2
 8010dea:	4417      	add	r7, r2
 8010dec:	f8ca 1000 	str.w	r1, [sl]
 8010df0:	b1ed      	cbz	r5, 8010e2e <__gethex+0x12a>
 8010df2:	f1bb 0f00 	cmp.w	fp, #0
 8010df6:	bf0c      	ite	eq
 8010df8:	2506      	moveq	r5, #6
 8010dfa:	2500      	movne	r5, #0
 8010dfc:	4628      	mov	r0, r5
 8010dfe:	b005      	add	sp, #20
 8010e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e04:	2500      	movs	r5, #0
 8010e06:	462c      	mov	r4, r5
 8010e08:	e7b0      	b.n	8010d6c <__gethex+0x68>
 8010e0a:	2c00      	cmp	r4, #0
 8010e0c:	d1c7      	bne.n	8010d9e <__gethex+0x9a>
 8010e0e:	4627      	mov	r7, r4
 8010e10:	e7c7      	b.n	8010da2 <__gethex+0x9e>
 8010e12:	464e      	mov	r6, r9
 8010e14:	462f      	mov	r7, r5
 8010e16:	2501      	movs	r5, #1
 8010e18:	e7c3      	b.n	8010da2 <__gethex+0x9e>
 8010e1a:	2400      	movs	r4, #0
 8010e1c:	1cb1      	adds	r1, r6, #2
 8010e1e:	e7cc      	b.n	8010dba <__gethex+0xb6>
 8010e20:	2401      	movs	r4, #1
 8010e22:	e7fb      	b.n	8010e1c <__gethex+0x118>
 8010e24:	fb03 0002 	mla	r0, r3, r2, r0
 8010e28:	e7ce      	b.n	8010dc8 <__gethex+0xc4>
 8010e2a:	4631      	mov	r1, r6
 8010e2c:	e7de      	b.n	8010dec <__gethex+0xe8>
 8010e2e:	eba6 0309 	sub.w	r3, r6, r9
 8010e32:	3b01      	subs	r3, #1
 8010e34:	4629      	mov	r1, r5
 8010e36:	2b07      	cmp	r3, #7
 8010e38:	dc0a      	bgt.n	8010e50 <__gethex+0x14c>
 8010e3a:	9801      	ldr	r0, [sp, #4]
 8010e3c:	f000 fafc 	bl	8011438 <_Balloc>
 8010e40:	4604      	mov	r4, r0
 8010e42:	b940      	cbnz	r0, 8010e56 <__gethex+0x152>
 8010e44:	4b5c      	ldr	r3, [pc, #368]	@ (8010fb8 <__gethex+0x2b4>)
 8010e46:	4602      	mov	r2, r0
 8010e48:	21e4      	movs	r1, #228	@ 0xe4
 8010e4a:	485c      	ldr	r0, [pc, #368]	@ (8010fbc <__gethex+0x2b8>)
 8010e4c:	f7ff f83e 	bl	800fecc <__assert_func>
 8010e50:	3101      	adds	r1, #1
 8010e52:	105b      	asrs	r3, r3, #1
 8010e54:	e7ef      	b.n	8010e36 <__gethex+0x132>
 8010e56:	f100 0a14 	add.w	sl, r0, #20
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	4655      	mov	r5, sl
 8010e5e:	469b      	mov	fp, r3
 8010e60:	45b1      	cmp	r9, r6
 8010e62:	d337      	bcc.n	8010ed4 <__gethex+0x1d0>
 8010e64:	f845 bb04 	str.w	fp, [r5], #4
 8010e68:	eba5 050a 	sub.w	r5, r5, sl
 8010e6c:	10ad      	asrs	r5, r5, #2
 8010e6e:	6125      	str	r5, [r4, #16]
 8010e70:	4658      	mov	r0, fp
 8010e72:	f000 fbd3 	bl	801161c <__hi0bits>
 8010e76:	016d      	lsls	r5, r5, #5
 8010e78:	f8d8 6000 	ldr.w	r6, [r8]
 8010e7c:	1a2d      	subs	r5, r5, r0
 8010e7e:	42b5      	cmp	r5, r6
 8010e80:	dd54      	ble.n	8010f2c <__gethex+0x228>
 8010e82:	1bad      	subs	r5, r5, r6
 8010e84:	4629      	mov	r1, r5
 8010e86:	4620      	mov	r0, r4
 8010e88:	f000 ff67 	bl	8011d5a <__any_on>
 8010e8c:	4681      	mov	r9, r0
 8010e8e:	b178      	cbz	r0, 8010eb0 <__gethex+0x1ac>
 8010e90:	1e6b      	subs	r3, r5, #1
 8010e92:	1159      	asrs	r1, r3, #5
 8010e94:	f003 021f 	and.w	r2, r3, #31
 8010e98:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010e9c:	f04f 0901 	mov.w	r9, #1
 8010ea0:	fa09 f202 	lsl.w	r2, r9, r2
 8010ea4:	420a      	tst	r2, r1
 8010ea6:	d003      	beq.n	8010eb0 <__gethex+0x1ac>
 8010ea8:	454b      	cmp	r3, r9
 8010eaa:	dc36      	bgt.n	8010f1a <__gethex+0x216>
 8010eac:	f04f 0902 	mov.w	r9, #2
 8010eb0:	4629      	mov	r1, r5
 8010eb2:	4620      	mov	r0, r4
 8010eb4:	f7ff febe 	bl	8010c34 <rshift>
 8010eb8:	442f      	add	r7, r5
 8010eba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010ebe:	42bb      	cmp	r3, r7
 8010ec0:	da42      	bge.n	8010f48 <__gethex+0x244>
 8010ec2:	9801      	ldr	r0, [sp, #4]
 8010ec4:	4621      	mov	r1, r4
 8010ec6:	f000 faf7 	bl	80114b8 <_Bfree>
 8010eca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010ecc:	2300      	movs	r3, #0
 8010ece:	6013      	str	r3, [r2, #0]
 8010ed0:	25a3      	movs	r5, #163	@ 0xa3
 8010ed2:	e793      	b.n	8010dfc <__gethex+0xf8>
 8010ed4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010ed8:	2a2e      	cmp	r2, #46	@ 0x2e
 8010eda:	d012      	beq.n	8010f02 <__gethex+0x1fe>
 8010edc:	2b20      	cmp	r3, #32
 8010ede:	d104      	bne.n	8010eea <__gethex+0x1e6>
 8010ee0:	f845 bb04 	str.w	fp, [r5], #4
 8010ee4:	f04f 0b00 	mov.w	fp, #0
 8010ee8:	465b      	mov	r3, fp
 8010eea:	7830      	ldrb	r0, [r6, #0]
 8010eec:	9303      	str	r3, [sp, #12]
 8010eee:	f7ff fef3 	bl	8010cd8 <__hexdig_fun>
 8010ef2:	9b03      	ldr	r3, [sp, #12]
 8010ef4:	f000 000f 	and.w	r0, r0, #15
 8010ef8:	4098      	lsls	r0, r3
 8010efa:	ea4b 0b00 	orr.w	fp, fp, r0
 8010efe:	3304      	adds	r3, #4
 8010f00:	e7ae      	b.n	8010e60 <__gethex+0x15c>
 8010f02:	45b1      	cmp	r9, r6
 8010f04:	d8ea      	bhi.n	8010edc <__gethex+0x1d8>
 8010f06:	492b      	ldr	r1, [pc, #172]	@ (8010fb4 <__gethex+0x2b0>)
 8010f08:	9303      	str	r3, [sp, #12]
 8010f0a:	2201      	movs	r2, #1
 8010f0c:	4630      	mov	r0, r6
 8010f0e:	f7fe fed8 	bl	800fcc2 <strncmp>
 8010f12:	9b03      	ldr	r3, [sp, #12]
 8010f14:	2800      	cmp	r0, #0
 8010f16:	d1e1      	bne.n	8010edc <__gethex+0x1d8>
 8010f18:	e7a2      	b.n	8010e60 <__gethex+0x15c>
 8010f1a:	1ea9      	subs	r1, r5, #2
 8010f1c:	4620      	mov	r0, r4
 8010f1e:	f000 ff1c 	bl	8011d5a <__any_on>
 8010f22:	2800      	cmp	r0, #0
 8010f24:	d0c2      	beq.n	8010eac <__gethex+0x1a8>
 8010f26:	f04f 0903 	mov.w	r9, #3
 8010f2a:	e7c1      	b.n	8010eb0 <__gethex+0x1ac>
 8010f2c:	da09      	bge.n	8010f42 <__gethex+0x23e>
 8010f2e:	1b75      	subs	r5, r6, r5
 8010f30:	4621      	mov	r1, r4
 8010f32:	9801      	ldr	r0, [sp, #4]
 8010f34:	462a      	mov	r2, r5
 8010f36:	f000 fcd7 	bl	80118e8 <__lshift>
 8010f3a:	1b7f      	subs	r7, r7, r5
 8010f3c:	4604      	mov	r4, r0
 8010f3e:	f100 0a14 	add.w	sl, r0, #20
 8010f42:	f04f 0900 	mov.w	r9, #0
 8010f46:	e7b8      	b.n	8010eba <__gethex+0x1b6>
 8010f48:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010f4c:	42bd      	cmp	r5, r7
 8010f4e:	dd6f      	ble.n	8011030 <__gethex+0x32c>
 8010f50:	1bed      	subs	r5, r5, r7
 8010f52:	42ae      	cmp	r6, r5
 8010f54:	dc34      	bgt.n	8010fc0 <__gethex+0x2bc>
 8010f56:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010f5a:	2b02      	cmp	r3, #2
 8010f5c:	d022      	beq.n	8010fa4 <__gethex+0x2a0>
 8010f5e:	2b03      	cmp	r3, #3
 8010f60:	d024      	beq.n	8010fac <__gethex+0x2a8>
 8010f62:	2b01      	cmp	r3, #1
 8010f64:	d115      	bne.n	8010f92 <__gethex+0x28e>
 8010f66:	42ae      	cmp	r6, r5
 8010f68:	d113      	bne.n	8010f92 <__gethex+0x28e>
 8010f6a:	2e01      	cmp	r6, #1
 8010f6c:	d10b      	bne.n	8010f86 <__gethex+0x282>
 8010f6e:	9a02      	ldr	r2, [sp, #8]
 8010f70:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010f74:	6013      	str	r3, [r2, #0]
 8010f76:	2301      	movs	r3, #1
 8010f78:	6123      	str	r3, [r4, #16]
 8010f7a:	f8ca 3000 	str.w	r3, [sl]
 8010f7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010f80:	2562      	movs	r5, #98	@ 0x62
 8010f82:	601c      	str	r4, [r3, #0]
 8010f84:	e73a      	b.n	8010dfc <__gethex+0xf8>
 8010f86:	1e71      	subs	r1, r6, #1
 8010f88:	4620      	mov	r0, r4
 8010f8a:	f000 fee6 	bl	8011d5a <__any_on>
 8010f8e:	2800      	cmp	r0, #0
 8010f90:	d1ed      	bne.n	8010f6e <__gethex+0x26a>
 8010f92:	9801      	ldr	r0, [sp, #4]
 8010f94:	4621      	mov	r1, r4
 8010f96:	f000 fa8f 	bl	80114b8 <_Bfree>
 8010f9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010f9c:	2300      	movs	r3, #0
 8010f9e:	6013      	str	r3, [r2, #0]
 8010fa0:	2550      	movs	r5, #80	@ 0x50
 8010fa2:	e72b      	b.n	8010dfc <__gethex+0xf8>
 8010fa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d1f3      	bne.n	8010f92 <__gethex+0x28e>
 8010faa:	e7e0      	b.n	8010f6e <__gethex+0x26a>
 8010fac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d1dd      	bne.n	8010f6e <__gethex+0x26a>
 8010fb2:	e7ee      	b.n	8010f92 <__gethex+0x28e>
 8010fb4:	08014104 	.word	0x08014104
 8010fb8:	080142ab 	.word	0x080142ab
 8010fbc:	080142bc 	.word	0x080142bc
 8010fc0:	1e6f      	subs	r7, r5, #1
 8010fc2:	f1b9 0f00 	cmp.w	r9, #0
 8010fc6:	d130      	bne.n	801102a <__gethex+0x326>
 8010fc8:	b127      	cbz	r7, 8010fd4 <__gethex+0x2d0>
 8010fca:	4639      	mov	r1, r7
 8010fcc:	4620      	mov	r0, r4
 8010fce:	f000 fec4 	bl	8011d5a <__any_on>
 8010fd2:	4681      	mov	r9, r0
 8010fd4:	117a      	asrs	r2, r7, #5
 8010fd6:	2301      	movs	r3, #1
 8010fd8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010fdc:	f007 071f 	and.w	r7, r7, #31
 8010fe0:	40bb      	lsls	r3, r7
 8010fe2:	4213      	tst	r3, r2
 8010fe4:	4629      	mov	r1, r5
 8010fe6:	4620      	mov	r0, r4
 8010fe8:	bf18      	it	ne
 8010fea:	f049 0902 	orrne.w	r9, r9, #2
 8010fee:	f7ff fe21 	bl	8010c34 <rshift>
 8010ff2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010ff6:	1b76      	subs	r6, r6, r5
 8010ff8:	2502      	movs	r5, #2
 8010ffa:	f1b9 0f00 	cmp.w	r9, #0
 8010ffe:	d047      	beq.n	8011090 <__gethex+0x38c>
 8011000:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011004:	2b02      	cmp	r3, #2
 8011006:	d015      	beq.n	8011034 <__gethex+0x330>
 8011008:	2b03      	cmp	r3, #3
 801100a:	d017      	beq.n	801103c <__gethex+0x338>
 801100c:	2b01      	cmp	r3, #1
 801100e:	d109      	bne.n	8011024 <__gethex+0x320>
 8011010:	f019 0f02 	tst.w	r9, #2
 8011014:	d006      	beq.n	8011024 <__gethex+0x320>
 8011016:	f8da 3000 	ldr.w	r3, [sl]
 801101a:	ea49 0903 	orr.w	r9, r9, r3
 801101e:	f019 0f01 	tst.w	r9, #1
 8011022:	d10e      	bne.n	8011042 <__gethex+0x33e>
 8011024:	f045 0510 	orr.w	r5, r5, #16
 8011028:	e032      	b.n	8011090 <__gethex+0x38c>
 801102a:	f04f 0901 	mov.w	r9, #1
 801102e:	e7d1      	b.n	8010fd4 <__gethex+0x2d0>
 8011030:	2501      	movs	r5, #1
 8011032:	e7e2      	b.n	8010ffa <__gethex+0x2f6>
 8011034:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011036:	f1c3 0301 	rsb	r3, r3, #1
 801103a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801103c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801103e:	2b00      	cmp	r3, #0
 8011040:	d0f0      	beq.n	8011024 <__gethex+0x320>
 8011042:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011046:	f104 0314 	add.w	r3, r4, #20
 801104a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801104e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011052:	f04f 0c00 	mov.w	ip, #0
 8011056:	4618      	mov	r0, r3
 8011058:	f853 2b04 	ldr.w	r2, [r3], #4
 801105c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011060:	d01b      	beq.n	801109a <__gethex+0x396>
 8011062:	3201      	adds	r2, #1
 8011064:	6002      	str	r2, [r0, #0]
 8011066:	2d02      	cmp	r5, #2
 8011068:	f104 0314 	add.w	r3, r4, #20
 801106c:	d13c      	bne.n	80110e8 <__gethex+0x3e4>
 801106e:	f8d8 2000 	ldr.w	r2, [r8]
 8011072:	3a01      	subs	r2, #1
 8011074:	42b2      	cmp	r2, r6
 8011076:	d109      	bne.n	801108c <__gethex+0x388>
 8011078:	1171      	asrs	r1, r6, #5
 801107a:	2201      	movs	r2, #1
 801107c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011080:	f006 061f 	and.w	r6, r6, #31
 8011084:	fa02 f606 	lsl.w	r6, r2, r6
 8011088:	421e      	tst	r6, r3
 801108a:	d13a      	bne.n	8011102 <__gethex+0x3fe>
 801108c:	f045 0520 	orr.w	r5, r5, #32
 8011090:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011092:	601c      	str	r4, [r3, #0]
 8011094:	9b02      	ldr	r3, [sp, #8]
 8011096:	601f      	str	r7, [r3, #0]
 8011098:	e6b0      	b.n	8010dfc <__gethex+0xf8>
 801109a:	4299      	cmp	r1, r3
 801109c:	f843 cc04 	str.w	ip, [r3, #-4]
 80110a0:	d8d9      	bhi.n	8011056 <__gethex+0x352>
 80110a2:	68a3      	ldr	r3, [r4, #8]
 80110a4:	459b      	cmp	fp, r3
 80110a6:	db17      	blt.n	80110d8 <__gethex+0x3d4>
 80110a8:	6861      	ldr	r1, [r4, #4]
 80110aa:	9801      	ldr	r0, [sp, #4]
 80110ac:	3101      	adds	r1, #1
 80110ae:	f000 f9c3 	bl	8011438 <_Balloc>
 80110b2:	4681      	mov	r9, r0
 80110b4:	b918      	cbnz	r0, 80110be <__gethex+0x3ba>
 80110b6:	4b1a      	ldr	r3, [pc, #104]	@ (8011120 <__gethex+0x41c>)
 80110b8:	4602      	mov	r2, r0
 80110ba:	2184      	movs	r1, #132	@ 0x84
 80110bc:	e6c5      	b.n	8010e4a <__gethex+0x146>
 80110be:	6922      	ldr	r2, [r4, #16]
 80110c0:	3202      	adds	r2, #2
 80110c2:	f104 010c 	add.w	r1, r4, #12
 80110c6:	0092      	lsls	r2, r2, #2
 80110c8:	300c      	adds	r0, #12
 80110ca:	f7fe fee0 	bl	800fe8e <memcpy>
 80110ce:	4621      	mov	r1, r4
 80110d0:	9801      	ldr	r0, [sp, #4]
 80110d2:	f000 f9f1 	bl	80114b8 <_Bfree>
 80110d6:	464c      	mov	r4, r9
 80110d8:	6923      	ldr	r3, [r4, #16]
 80110da:	1c5a      	adds	r2, r3, #1
 80110dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80110e0:	6122      	str	r2, [r4, #16]
 80110e2:	2201      	movs	r2, #1
 80110e4:	615a      	str	r2, [r3, #20]
 80110e6:	e7be      	b.n	8011066 <__gethex+0x362>
 80110e8:	6922      	ldr	r2, [r4, #16]
 80110ea:	455a      	cmp	r2, fp
 80110ec:	dd0b      	ble.n	8011106 <__gethex+0x402>
 80110ee:	2101      	movs	r1, #1
 80110f0:	4620      	mov	r0, r4
 80110f2:	f7ff fd9f 	bl	8010c34 <rshift>
 80110f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80110fa:	3701      	adds	r7, #1
 80110fc:	42bb      	cmp	r3, r7
 80110fe:	f6ff aee0 	blt.w	8010ec2 <__gethex+0x1be>
 8011102:	2501      	movs	r5, #1
 8011104:	e7c2      	b.n	801108c <__gethex+0x388>
 8011106:	f016 061f 	ands.w	r6, r6, #31
 801110a:	d0fa      	beq.n	8011102 <__gethex+0x3fe>
 801110c:	4453      	add	r3, sl
 801110e:	f1c6 0620 	rsb	r6, r6, #32
 8011112:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011116:	f000 fa81 	bl	801161c <__hi0bits>
 801111a:	42b0      	cmp	r0, r6
 801111c:	dbe7      	blt.n	80110ee <__gethex+0x3ea>
 801111e:	e7f0      	b.n	8011102 <__gethex+0x3fe>
 8011120:	080142ab 	.word	0x080142ab

08011124 <L_shift>:
 8011124:	f1c2 0208 	rsb	r2, r2, #8
 8011128:	0092      	lsls	r2, r2, #2
 801112a:	b570      	push	{r4, r5, r6, lr}
 801112c:	f1c2 0620 	rsb	r6, r2, #32
 8011130:	6843      	ldr	r3, [r0, #4]
 8011132:	6804      	ldr	r4, [r0, #0]
 8011134:	fa03 f506 	lsl.w	r5, r3, r6
 8011138:	432c      	orrs	r4, r5
 801113a:	40d3      	lsrs	r3, r2
 801113c:	6004      	str	r4, [r0, #0]
 801113e:	f840 3f04 	str.w	r3, [r0, #4]!
 8011142:	4288      	cmp	r0, r1
 8011144:	d3f4      	bcc.n	8011130 <L_shift+0xc>
 8011146:	bd70      	pop	{r4, r5, r6, pc}

08011148 <__match>:
 8011148:	b530      	push	{r4, r5, lr}
 801114a:	6803      	ldr	r3, [r0, #0]
 801114c:	3301      	adds	r3, #1
 801114e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011152:	b914      	cbnz	r4, 801115a <__match+0x12>
 8011154:	6003      	str	r3, [r0, #0]
 8011156:	2001      	movs	r0, #1
 8011158:	bd30      	pop	{r4, r5, pc}
 801115a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801115e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011162:	2d19      	cmp	r5, #25
 8011164:	bf98      	it	ls
 8011166:	3220      	addls	r2, #32
 8011168:	42a2      	cmp	r2, r4
 801116a:	d0f0      	beq.n	801114e <__match+0x6>
 801116c:	2000      	movs	r0, #0
 801116e:	e7f3      	b.n	8011158 <__match+0x10>

08011170 <__hexnan>:
 8011170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011174:	680b      	ldr	r3, [r1, #0]
 8011176:	6801      	ldr	r1, [r0, #0]
 8011178:	115e      	asrs	r6, r3, #5
 801117a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801117e:	f013 031f 	ands.w	r3, r3, #31
 8011182:	b087      	sub	sp, #28
 8011184:	bf18      	it	ne
 8011186:	3604      	addne	r6, #4
 8011188:	2500      	movs	r5, #0
 801118a:	1f37      	subs	r7, r6, #4
 801118c:	4682      	mov	sl, r0
 801118e:	4690      	mov	r8, r2
 8011190:	9301      	str	r3, [sp, #4]
 8011192:	f846 5c04 	str.w	r5, [r6, #-4]
 8011196:	46b9      	mov	r9, r7
 8011198:	463c      	mov	r4, r7
 801119a:	9502      	str	r5, [sp, #8]
 801119c:	46ab      	mov	fp, r5
 801119e:	784a      	ldrb	r2, [r1, #1]
 80111a0:	1c4b      	adds	r3, r1, #1
 80111a2:	9303      	str	r3, [sp, #12]
 80111a4:	b342      	cbz	r2, 80111f8 <__hexnan+0x88>
 80111a6:	4610      	mov	r0, r2
 80111a8:	9105      	str	r1, [sp, #20]
 80111aa:	9204      	str	r2, [sp, #16]
 80111ac:	f7ff fd94 	bl	8010cd8 <__hexdig_fun>
 80111b0:	2800      	cmp	r0, #0
 80111b2:	d151      	bne.n	8011258 <__hexnan+0xe8>
 80111b4:	9a04      	ldr	r2, [sp, #16]
 80111b6:	9905      	ldr	r1, [sp, #20]
 80111b8:	2a20      	cmp	r2, #32
 80111ba:	d818      	bhi.n	80111ee <__hexnan+0x7e>
 80111bc:	9b02      	ldr	r3, [sp, #8]
 80111be:	459b      	cmp	fp, r3
 80111c0:	dd13      	ble.n	80111ea <__hexnan+0x7a>
 80111c2:	454c      	cmp	r4, r9
 80111c4:	d206      	bcs.n	80111d4 <__hexnan+0x64>
 80111c6:	2d07      	cmp	r5, #7
 80111c8:	dc04      	bgt.n	80111d4 <__hexnan+0x64>
 80111ca:	462a      	mov	r2, r5
 80111cc:	4649      	mov	r1, r9
 80111ce:	4620      	mov	r0, r4
 80111d0:	f7ff ffa8 	bl	8011124 <L_shift>
 80111d4:	4544      	cmp	r4, r8
 80111d6:	d952      	bls.n	801127e <__hexnan+0x10e>
 80111d8:	2300      	movs	r3, #0
 80111da:	f1a4 0904 	sub.w	r9, r4, #4
 80111de:	f844 3c04 	str.w	r3, [r4, #-4]
 80111e2:	f8cd b008 	str.w	fp, [sp, #8]
 80111e6:	464c      	mov	r4, r9
 80111e8:	461d      	mov	r5, r3
 80111ea:	9903      	ldr	r1, [sp, #12]
 80111ec:	e7d7      	b.n	801119e <__hexnan+0x2e>
 80111ee:	2a29      	cmp	r2, #41	@ 0x29
 80111f0:	d157      	bne.n	80112a2 <__hexnan+0x132>
 80111f2:	3102      	adds	r1, #2
 80111f4:	f8ca 1000 	str.w	r1, [sl]
 80111f8:	f1bb 0f00 	cmp.w	fp, #0
 80111fc:	d051      	beq.n	80112a2 <__hexnan+0x132>
 80111fe:	454c      	cmp	r4, r9
 8011200:	d206      	bcs.n	8011210 <__hexnan+0xa0>
 8011202:	2d07      	cmp	r5, #7
 8011204:	dc04      	bgt.n	8011210 <__hexnan+0xa0>
 8011206:	462a      	mov	r2, r5
 8011208:	4649      	mov	r1, r9
 801120a:	4620      	mov	r0, r4
 801120c:	f7ff ff8a 	bl	8011124 <L_shift>
 8011210:	4544      	cmp	r4, r8
 8011212:	d936      	bls.n	8011282 <__hexnan+0x112>
 8011214:	f1a8 0204 	sub.w	r2, r8, #4
 8011218:	4623      	mov	r3, r4
 801121a:	f853 1b04 	ldr.w	r1, [r3], #4
 801121e:	f842 1f04 	str.w	r1, [r2, #4]!
 8011222:	429f      	cmp	r7, r3
 8011224:	d2f9      	bcs.n	801121a <__hexnan+0xaa>
 8011226:	1b3b      	subs	r3, r7, r4
 8011228:	f023 0303 	bic.w	r3, r3, #3
 801122c:	3304      	adds	r3, #4
 801122e:	3401      	adds	r4, #1
 8011230:	3e03      	subs	r6, #3
 8011232:	42b4      	cmp	r4, r6
 8011234:	bf88      	it	hi
 8011236:	2304      	movhi	r3, #4
 8011238:	4443      	add	r3, r8
 801123a:	2200      	movs	r2, #0
 801123c:	f843 2b04 	str.w	r2, [r3], #4
 8011240:	429f      	cmp	r7, r3
 8011242:	d2fb      	bcs.n	801123c <__hexnan+0xcc>
 8011244:	683b      	ldr	r3, [r7, #0]
 8011246:	b91b      	cbnz	r3, 8011250 <__hexnan+0xe0>
 8011248:	4547      	cmp	r7, r8
 801124a:	d128      	bne.n	801129e <__hexnan+0x12e>
 801124c:	2301      	movs	r3, #1
 801124e:	603b      	str	r3, [r7, #0]
 8011250:	2005      	movs	r0, #5
 8011252:	b007      	add	sp, #28
 8011254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011258:	3501      	adds	r5, #1
 801125a:	2d08      	cmp	r5, #8
 801125c:	f10b 0b01 	add.w	fp, fp, #1
 8011260:	dd06      	ble.n	8011270 <__hexnan+0x100>
 8011262:	4544      	cmp	r4, r8
 8011264:	d9c1      	bls.n	80111ea <__hexnan+0x7a>
 8011266:	2300      	movs	r3, #0
 8011268:	f844 3c04 	str.w	r3, [r4, #-4]
 801126c:	2501      	movs	r5, #1
 801126e:	3c04      	subs	r4, #4
 8011270:	6822      	ldr	r2, [r4, #0]
 8011272:	f000 000f 	and.w	r0, r0, #15
 8011276:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801127a:	6020      	str	r0, [r4, #0]
 801127c:	e7b5      	b.n	80111ea <__hexnan+0x7a>
 801127e:	2508      	movs	r5, #8
 8011280:	e7b3      	b.n	80111ea <__hexnan+0x7a>
 8011282:	9b01      	ldr	r3, [sp, #4]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d0dd      	beq.n	8011244 <__hexnan+0xd4>
 8011288:	f1c3 0320 	rsb	r3, r3, #32
 801128c:	f04f 32ff 	mov.w	r2, #4294967295
 8011290:	40da      	lsrs	r2, r3
 8011292:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011296:	4013      	ands	r3, r2
 8011298:	f846 3c04 	str.w	r3, [r6, #-4]
 801129c:	e7d2      	b.n	8011244 <__hexnan+0xd4>
 801129e:	3f04      	subs	r7, #4
 80112a0:	e7d0      	b.n	8011244 <__hexnan+0xd4>
 80112a2:	2004      	movs	r0, #4
 80112a4:	e7d5      	b.n	8011252 <__hexnan+0xe2>
	...

080112a8 <malloc>:
 80112a8:	4b02      	ldr	r3, [pc, #8]	@ (80112b4 <malloc+0xc>)
 80112aa:	4601      	mov	r1, r0
 80112ac:	6818      	ldr	r0, [r3, #0]
 80112ae:	f000 b825 	b.w	80112fc <_malloc_r>
 80112b2:	bf00      	nop
 80112b4:	20000198 	.word	0x20000198

080112b8 <sbrk_aligned>:
 80112b8:	b570      	push	{r4, r5, r6, lr}
 80112ba:	4e0f      	ldr	r6, [pc, #60]	@ (80112f8 <sbrk_aligned+0x40>)
 80112bc:	460c      	mov	r4, r1
 80112be:	6831      	ldr	r1, [r6, #0]
 80112c0:	4605      	mov	r5, r0
 80112c2:	b911      	cbnz	r1, 80112ca <sbrk_aligned+0x12>
 80112c4:	f001 f9f8 	bl	80126b8 <_sbrk_r>
 80112c8:	6030      	str	r0, [r6, #0]
 80112ca:	4621      	mov	r1, r4
 80112cc:	4628      	mov	r0, r5
 80112ce:	f001 f9f3 	bl	80126b8 <_sbrk_r>
 80112d2:	1c43      	adds	r3, r0, #1
 80112d4:	d103      	bne.n	80112de <sbrk_aligned+0x26>
 80112d6:	f04f 34ff 	mov.w	r4, #4294967295
 80112da:	4620      	mov	r0, r4
 80112dc:	bd70      	pop	{r4, r5, r6, pc}
 80112de:	1cc4      	adds	r4, r0, #3
 80112e0:	f024 0403 	bic.w	r4, r4, #3
 80112e4:	42a0      	cmp	r0, r4
 80112e6:	d0f8      	beq.n	80112da <sbrk_aligned+0x22>
 80112e8:	1a21      	subs	r1, r4, r0
 80112ea:	4628      	mov	r0, r5
 80112ec:	f001 f9e4 	bl	80126b8 <_sbrk_r>
 80112f0:	3001      	adds	r0, #1
 80112f2:	d1f2      	bne.n	80112da <sbrk_aligned+0x22>
 80112f4:	e7ef      	b.n	80112d6 <sbrk_aligned+0x1e>
 80112f6:	bf00      	nop
 80112f8:	20006cd8 	.word	0x20006cd8

080112fc <_malloc_r>:
 80112fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011300:	1ccd      	adds	r5, r1, #3
 8011302:	f025 0503 	bic.w	r5, r5, #3
 8011306:	3508      	adds	r5, #8
 8011308:	2d0c      	cmp	r5, #12
 801130a:	bf38      	it	cc
 801130c:	250c      	movcc	r5, #12
 801130e:	2d00      	cmp	r5, #0
 8011310:	4606      	mov	r6, r0
 8011312:	db01      	blt.n	8011318 <_malloc_r+0x1c>
 8011314:	42a9      	cmp	r1, r5
 8011316:	d904      	bls.n	8011322 <_malloc_r+0x26>
 8011318:	230c      	movs	r3, #12
 801131a:	6033      	str	r3, [r6, #0]
 801131c:	2000      	movs	r0, #0
 801131e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011322:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80113f8 <_malloc_r+0xfc>
 8011326:	f000 f87b 	bl	8011420 <__malloc_lock>
 801132a:	f8d8 3000 	ldr.w	r3, [r8]
 801132e:	461c      	mov	r4, r3
 8011330:	bb44      	cbnz	r4, 8011384 <_malloc_r+0x88>
 8011332:	4629      	mov	r1, r5
 8011334:	4630      	mov	r0, r6
 8011336:	f7ff ffbf 	bl	80112b8 <sbrk_aligned>
 801133a:	1c43      	adds	r3, r0, #1
 801133c:	4604      	mov	r4, r0
 801133e:	d158      	bne.n	80113f2 <_malloc_r+0xf6>
 8011340:	f8d8 4000 	ldr.w	r4, [r8]
 8011344:	4627      	mov	r7, r4
 8011346:	2f00      	cmp	r7, #0
 8011348:	d143      	bne.n	80113d2 <_malloc_r+0xd6>
 801134a:	2c00      	cmp	r4, #0
 801134c:	d04b      	beq.n	80113e6 <_malloc_r+0xea>
 801134e:	6823      	ldr	r3, [r4, #0]
 8011350:	4639      	mov	r1, r7
 8011352:	4630      	mov	r0, r6
 8011354:	eb04 0903 	add.w	r9, r4, r3
 8011358:	f001 f9ae 	bl	80126b8 <_sbrk_r>
 801135c:	4581      	cmp	r9, r0
 801135e:	d142      	bne.n	80113e6 <_malloc_r+0xea>
 8011360:	6821      	ldr	r1, [r4, #0]
 8011362:	1a6d      	subs	r5, r5, r1
 8011364:	4629      	mov	r1, r5
 8011366:	4630      	mov	r0, r6
 8011368:	f7ff ffa6 	bl	80112b8 <sbrk_aligned>
 801136c:	3001      	adds	r0, #1
 801136e:	d03a      	beq.n	80113e6 <_malloc_r+0xea>
 8011370:	6823      	ldr	r3, [r4, #0]
 8011372:	442b      	add	r3, r5
 8011374:	6023      	str	r3, [r4, #0]
 8011376:	f8d8 3000 	ldr.w	r3, [r8]
 801137a:	685a      	ldr	r2, [r3, #4]
 801137c:	bb62      	cbnz	r2, 80113d8 <_malloc_r+0xdc>
 801137e:	f8c8 7000 	str.w	r7, [r8]
 8011382:	e00f      	b.n	80113a4 <_malloc_r+0xa8>
 8011384:	6822      	ldr	r2, [r4, #0]
 8011386:	1b52      	subs	r2, r2, r5
 8011388:	d420      	bmi.n	80113cc <_malloc_r+0xd0>
 801138a:	2a0b      	cmp	r2, #11
 801138c:	d917      	bls.n	80113be <_malloc_r+0xc2>
 801138e:	1961      	adds	r1, r4, r5
 8011390:	42a3      	cmp	r3, r4
 8011392:	6025      	str	r5, [r4, #0]
 8011394:	bf18      	it	ne
 8011396:	6059      	strne	r1, [r3, #4]
 8011398:	6863      	ldr	r3, [r4, #4]
 801139a:	bf08      	it	eq
 801139c:	f8c8 1000 	streq.w	r1, [r8]
 80113a0:	5162      	str	r2, [r4, r5]
 80113a2:	604b      	str	r3, [r1, #4]
 80113a4:	4630      	mov	r0, r6
 80113a6:	f000 f841 	bl	801142c <__malloc_unlock>
 80113aa:	f104 000b 	add.w	r0, r4, #11
 80113ae:	1d23      	adds	r3, r4, #4
 80113b0:	f020 0007 	bic.w	r0, r0, #7
 80113b4:	1ac2      	subs	r2, r0, r3
 80113b6:	bf1c      	itt	ne
 80113b8:	1a1b      	subne	r3, r3, r0
 80113ba:	50a3      	strne	r3, [r4, r2]
 80113bc:	e7af      	b.n	801131e <_malloc_r+0x22>
 80113be:	6862      	ldr	r2, [r4, #4]
 80113c0:	42a3      	cmp	r3, r4
 80113c2:	bf0c      	ite	eq
 80113c4:	f8c8 2000 	streq.w	r2, [r8]
 80113c8:	605a      	strne	r2, [r3, #4]
 80113ca:	e7eb      	b.n	80113a4 <_malloc_r+0xa8>
 80113cc:	4623      	mov	r3, r4
 80113ce:	6864      	ldr	r4, [r4, #4]
 80113d0:	e7ae      	b.n	8011330 <_malloc_r+0x34>
 80113d2:	463c      	mov	r4, r7
 80113d4:	687f      	ldr	r7, [r7, #4]
 80113d6:	e7b6      	b.n	8011346 <_malloc_r+0x4a>
 80113d8:	461a      	mov	r2, r3
 80113da:	685b      	ldr	r3, [r3, #4]
 80113dc:	42a3      	cmp	r3, r4
 80113de:	d1fb      	bne.n	80113d8 <_malloc_r+0xdc>
 80113e0:	2300      	movs	r3, #0
 80113e2:	6053      	str	r3, [r2, #4]
 80113e4:	e7de      	b.n	80113a4 <_malloc_r+0xa8>
 80113e6:	230c      	movs	r3, #12
 80113e8:	6033      	str	r3, [r6, #0]
 80113ea:	4630      	mov	r0, r6
 80113ec:	f000 f81e 	bl	801142c <__malloc_unlock>
 80113f0:	e794      	b.n	801131c <_malloc_r+0x20>
 80113f2:	6005      	str	r5, [r0, #0]
 80113f4:	e7d6      	b.n	80113a4 <_malloc_r+0xa8>
 80113f6:	bf00      	nop
 80113f8:	20006cdc 	.word	0x20006cdc

080113fc <__ascii_mbtowc>:
 80113fc:	b082      	sub	sp, #8
 80113fe:	b901      	cbnz	r1, 8011402 <__ascii_mbtowc+0x6>
 8011400:	a901      	add	r1, sp, #4
 8011402:	b142      	cbz	r2, 8011416 <__ascii_mbtowc+0x1a>
 8011404:	b14b      	cbz	r3, 801141a <__ascii_mbtowc+0x1e>
 8011406:	7813      	ldrb	r3, [r2, #0]
 8011408:	600b      	str	r3, [r1, #0]
 801140a:	7812      	ldrb	r2, [r2, #0]
 801140c:	1e10      	subs	r0, r2, #0
 801140e:	bf18      	it	ne
 8011410:	2001      	movne	r0, #1
 8011412:	b002      	add	sp, #8
 8011414:	4770      	bx	lr
 8011416:	4610      	mov	r0, r2
 8011418:	e7fb      	b.n	8011412 <__ascii_mbtowc+0x16>
 801141a:	f06f 0001 	mvn.w	r0, #1
 801141e:	e7f8      	b.n	8011412 <__ascii_mbtowc+0x16>

08011420 <__malloc_lock>:
 8011420:	4801      	ldr	r0, [pc, #4]	@ (8011428 <__malloc_lock+0x8>)
 8011422:	f7fe bd32 	b.w	800fe8a <__retarget_lock_acquire_recursive>
 8011426:	bf00      	nop
 8011428:	20006cd4 	.word	0x20006cd4

0801142c <__malloc_unlock>:
 801142c:	4801      	ldr	r0, [pc, #4]	@ (8011434 <__malloc_unlock+0x8>)
 801142e:	f7fe bd2d 	b.w	800fe8c <__retarget_lock_release_recursive>
 8011432:	bf00      	nop
 8011434:	20006cd4 	.word	0x20006cd4

08011438 <_Balloc>:
 8011438:	b570      	push	{r4, r5, r6, lr}
 801143a:	69c6      	ldr	r6, [r0, #28]
 801143c:	4604      	mov	r4, r0
 801143e:	460d      	mov	r5, r1
 8011440:	b976      	cbnz	r6, 8011460 <_Balloc+0x28>
 8011442:	2010      	movs	r0, #16
 8011444:	f7ff ff30 	bl	80112a8 <malloc>
 8011448:	4602      	mov	r2, r0
 801144a:	61e0      	str	r0, [r4, #28]
 801144c:	b920      	cbnz	r0, 8011458 <_Balloc+0x20>
 801144e:	4b18      	ldr	r3, [pc, #96]	@ (80114b0 <_Balloc+0x78>)
 8011450:	4818      	ldr	r0, [pc, #96]	@ (80114b4 <_Balloc+0x7c>)
 8011452:	216b      	movs	r1, #107	@ 0x6b
 8011454:	f7fe fd3a 	bl	800fecc <__assert_func>
 8011458:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801145c:	6006      	str	r6, [r0, #0]
 801145e:	60c6      	str	r6, [r0, #12]
 8011460:	69e6      	ldr	r6, [r4, #28]
 8011462:	68f3      	ldr	r3, [r6, #12]
 8011464:	b183      	cbz	r3, 8011488 <_Balloc+0x50>
 8011466:	69e3      	ldr	r3, [r4, #28]
 8011468:	68db      	ldr	r3, [r3, #12]
 801146a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801146e:	b9b8      	cbnz	r0, 80114a0 <_Balloc+0x68>
 8011470:	2101      	movs	r1, #1
 8011472:	fa01 f605 	lsl.w	r6, r1, r5
 8011476:	1d72      	adds	r2, r6, #5
 8011478:	0092      	lsls	r2, r2, #2
 801147a:	4620      	mov	r0, r4
 801147c:	f001 f933 	bl	80126e6 <_calloc_r>
 8011480:	b160      	cbz	r0, 801149c <_Balloc+0x64>
 8011482:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011486:	e00e      	b.n	80114a6 <_Balloc+0x6e>
 8011488:	2221      	movs	r2, #33	@ 0x21
 801148a:	2104      	movs	r1, #4
 801148c:	4620      	mov	r0, r4
 801148e:	f001 f92a 	bl	80126e6 <_calloc_r>
 8011492:	69e3      	ldr	r3, [r4, #28]
 8011494:	60f0      	str	r0, [r6, #12]
 8011496:	68db      	ldr	r3, [r3, #12]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d1e4      	bne.n	8011466 <_Balloc+0x2e>
 801149c:	2000      	movs	r0, #0
 801149e:	bd70      	pop	{r4, r5, r6, pc}
 80114a0:	6802      	ldr	r2, [r0, #0]
 80114a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80114a6:	2300      	movs	r3, #0
 80114a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80114ac:	e7f7      	b.n	801149e <_Balloc+0x66>
 80114ae:	bf00      	nop
 80114b0:	08014191 	.word	0x08014191
 80114b4:	0801431c 	.word	0x0801431c

080114b8 <_Bfree>:
 80114b8:	b570      	push	{r4, r5, r6, lr}
 80114ba:	69c6      	ldr	r6, [r0, #28]
 80114bc:	4605      	mov	r5, r0
 80114be:	460c      	mov	r4, r1
 80114c0:	b976      	cbnz	r6, 80114e0 <_Bfree+0x28>
 80114c2:	2010      	movs	r0, #16
 80114c4:	f7ff fef0 	bl	80112a8 <malloc>
 80114c8:	4602      	mov	r2, r0
 80114ca:	61e8      	str	r0, [r5, #28]
 80114cc:	b920      	cbnz	r0, 80114d8 <_Bfree+0x20>
 80114ce:	4b09      	ldr	r3, [pc, #36]	@ (80114f4 <_Bfree+0x3c>)
 80114d0:	4809      	ldr	r0, [pc, #36]	@ (80114f8 <_Bfree+0x40>)
 80114d2:	218f      	movs	r1, #143	@ 0x8f
 80114d4:	f7fe fcfa 	bl	800fecc <__assert_func>
 80114d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80114dc:	6006      	str	r6, [r0, #0]
 80114de:	60c6      	str	r6, [r0, #12]
 80114e0:	b13c      	cbz	r4, 80114f2 <_Bfree+0x3a>
 80114e2:	69eb      	ldr	r3, [r5, #28]
 80114e4:	6862      	ldr	r2, [r4, #4]
 80114e6:	68db      	ldr	r3, [r3, #12]
 80114e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80114ec:	6021      	str	r1, [r4, #0]
 80114ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80114f2:	bd70      	pop	{r4, r5, r6, pc}
 80114f4:	08014191 	.word	0x08014191
 80114f8:	0801431c 	.word	0x0801431c

080114fc <__multadd>:
 80114fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011500:	690d      	ldr	r5, [r1, #16]
 8011502:	4607      	mov	r7, r0
 8011504:	460c      	mov	r4, r1
 8011506:	461e      	mov	r6, r3
 8011508:	f101 0c14 	add.w	ip, r1, #20
 801150c:	2000      	movs	r0, #0
 801150e:	f8dc 3000 	ldr.w	r3, [ip]
 8011512:	b299      	uxth	r1, r3
 8011514:	fb02 6101 	mla	r1, r2, r1, r6
 8011518:	0c1e      	lsrs	r6, r3, #16
 801151a:	0c0b      	lsrs	r3, r1, #16
 801151c:	fb02 3306 	mla	r3, r2, r6, r3
 8011520:	b289      	uxth	r1, r1
 8011522:	3001      	adds	r0, #1
 8011524:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011528:	4285      	cmp	r5, r0
 801152a:	f84c 1b04 	str.w	r1, [ip], #4
 801152e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011532:	dcec      	bgt.n	801150e <__multadd+0x12>
 8011534:	b30e      	cbz	r6, 801157a <__multadd+0x7e>
 8011536:	68a3      	ldr	r3, [r4, #8]
 8011538:	42ab      	cmp	r3, r5
 801153a:	dc19      	bgt.n	8011570 <__multadd+0x74>
 801153c:	6861      	ldr	r1, [r4, #4]
 801153e:	4638      	mov	r0, r7
 8011540:	3101      	adds	r1, #1
 8011542:	f7ff ff79 	bl	8011438 <_Balloc>
 8011546:	4680      	mov	r8, r0
 8011548:	b928      	cbnz	r0, 8011556 <__multadd+0x5a>
 801154a:	4602      	mov	r2, r0
 801154c:	4b0c      	ldr	r3, [pc, #48]	@ (8011580 <__multadd+0x84>)
 801154e:	480d      	ldr	r0, [pc, #52]	@ (8011584 <__multadd+0x88>)
 8011550:	21ba      	movs	r1, #186	@ 0xba
 8011552:	f7fe fcbb 	bl	800fecc <__assert_func>
 8011556:	6922      	ldr	r2, [r4, #16]
 8011558:	3202      	adds	r2, #2
 801155a:	f104 010c 	add.w	r1, r4, #12
 801155e:	0092      	lsls	r2, r2, #2
 8011560:	300c      	adds	r0, #12
 8011562:	f7fe fc94 	bl	800fe8e <memcpy>
 8011566:	4621      	mov	r1, r4
 8011568:	4638      	mov	r0, r7
 801156a:	f7ff ffa5 	bl	80114b8 <_Bfree>
 801156e:	4644      	mov	r4, r8
 8011570:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011574:	3501      	adds	r5, #1
 8011576:	615e      	str	r6, [r3, #20]
 8011578:	6125      	str	r5, [r4, #16]
 801157a:	4620      	mov	r0, r4
 801157c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011580:	080142ab 	.word	0x080142ab
 8011584:	0801431c 	.word	0x0801431c

08011588 <__s2b>:
 8011588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801158c:	460c      	mov	r4, r1
 801158e:	4615      	mov	r5, r2
 8011590:	461f      	mov	r7, r3
 8011592:	2209      	movs	r2, #9
 8011594:	3308      	adds	r3, #8
 8011596:	4606      	mov	r6, r0
 8011598:	fb93 f3f2 	sdiv	r3, r3, r2
 801159c:	2100      	movs	r1, #0
 801159e:	2201      	movs	r2, #1
 80115a0:	429a      	cmp	r2, r3
 80115a2:	db09      	blt.n	80115b8 <__s2b+0x30>
 80115a4:	4630      	mov	r0, r6
 80115a6:	f7ff ff47 	bl	8011438 <_Balloc>
 80115aa:	b940      	cbnz	r0, 80115be <__s2b+0x36>
 80115ac:	4602      	mov	r2, r0
 80115ae:	4b19      	ldr	r3, [pc, #100]	@ (8011614 <__s2b+0x8c>)
 80115b0:	4819      	ldr	r0, [pc, #100]	@ (8011618 <__s2b+0x90>)
 80115b2:	21d3      	movs	r1, #211	@ 0xd3
 80115b4:	f7fe fc8a 	bl	800fecc <__assert_func>
 80115b8:	0052      	lsls	r2, r2, #1
 80115ba:	3101      	adds	r1, #1
 80115bc:	e7f0      	b.n	80115a0 <__s2b+0x18>
 80115be:	9b08      	ldr	r3, [sp, #32]
 80115c0:	6143      	str	r3, [r0, #20]
 80115c2:	2d09      	cmp	r5, #9
 80115c4:	f04f 0301 	mov.w	r3, #1
 80115c8:	6103      	str	r3, [r0, #16]
 80115ca:	dd16      	ble.n	80115fa <__s2b+0x72>
 80115cc:	f104 0909 	add.w	r9, r4, #9
 80115d0:	46c8      	mov	r8, r9
 80115d2:	442c      	add	r4, r5
 80115d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80115d8:	4601      	mov	r1, r0
 80115da:	3b30      	subs	r3, #48	@ 0x30
 80115dc:	220a      	movs	r2, #10
 80115de:	4630      	mov	r0, r6
 80115e0:	f7ff ff8c 	bl	80114fc <__multadd>
 80115e4:	45a0      	cmp	r8, r4
 80115e6:	d1f5      	bne.n	80115d4 <__s2b+0x4c>
 80115e8:	f1a5 0408 	sub.w	r4, r5, #8
 80115ec:	444c      	add	r4, r9
 80115ee:	1b2d      	subs	r5, r5, r4
 80115f0:	1963      	adds	r3, r4, r5
 80115f2:	42bb      	cmp	r3, r7
 80115f4:	db04      	blt.n	8011600 <__s2b+0x78>
 80115f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115fa:	340a      	adds	r4, #10
 80115fc:	2509      	movs	r5, #9
 80115fe:	e7f6      	b.n	80115ee <__s2b+0x66>
 8011600:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011604:	4601      	mov	r1, r0
 8011606:	3b30      	subs	r3, #48	@ 0x30
 8011608:	220a      	movs	r2, #10
 801160a:	4630      	mov	r0, r6
 801160c:	f7ff ff76 	bl	80114fc <__multadd>
 8011610:	e7ee      	b.n	80115f0 <__s2b+0x68>
 8011612:	bf00      	nop
 8011614:	080142ab 	.word	0x080142ab
 8011618:	0801431c 	.word	0x0801431c

0801161c <__hi0bits>:
 801161c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011620:	4603      	mov	r3, r0
 8011622:	bf36      	itet	cc
 8011624:	0403      	lslcc	r3, r0, #16
 8011626:	2000      	movcs	r0, #0
 8011628:	2010      	movcc	r0, #16
 801162a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801162e:	bf3c      	itt	cc
 8011630:	021b      	lslcc	r3, r3, #8
 8011632:	3008      	addcc	r0, #8
 8011634:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011638:	bf3c      	itt	cc
 801163a:	011b      	lslcc	r3, r3, #4
 801163c:	3004      	addcc	r0, #4
 801163e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011642:	bf3c      	itt	cc
 8011644:	009b      	lslcc	r3, r3, #2
 8011646:	3002      	addcc	r0, #2
 8011648:	2b00      	cmp	r3, #0
 801164a:	db05      	blt.n	8011658 <__hi0bits+0x3c>
 801164c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011650:	f100 0001 	add.w	r0, r0, #1
 8011654:	bf08      	it	eq
 8011656:	2020      	moveq	r0, #32
 8011658:	4770      	bx	lr

0801165a <__lo0bits>:
 801165a:	6803      	ldr	r3, [r0, #0]
 801165c:	4602      	mov	r2, r0
 801165e:	f013 0007 	ands.w	r0, r3, #7
 8011662:	d00b      	beq.n	801167c <__lo0bits+0x22>
 8011664:	07d9      	lsls	r1, r3, #31
 8011666:	d421      	bmi.n	80116ac <__lo0bits+0x52>
 8011668:	0798      	lsls	r0, r3, #30
 801166a:	bf49      	itett	mi
 801166c:	085b      	lsrmi	r3, r3, #1
 801166e:	089b      	lsrpl	r3, r3, #2
 8011670:	2001      	movmi	r0, #1
 8011672:	6013      	strmi	r3, [r2, #0]
 8011674:	bf5c      	itt	pl
 8011676:	6013      	strpl	r3, [r2, #0]
 8011678:	2002      	movpl	r0, #2
 801167a:	4770      	bx	lr
 801167c:	b299      	uxth	r1, r3
 801167e:	b909      	cbnz	r1, 8011684 <__lo0bits+0x2a>
 8011680:	0c1b      	lsrs	r3, r3, #16
 8011682:	2010      	movs	r0, #16
 8011684:	b2d9      	uxtb	r1, r3
 8011686:	b909      	cbnz	r1, 801168c <__lo0bits+0x32>
 8011688:	3008      	adds	r0, #8
 801168a:	0a1b      	lsrs	r3, r3, #8
 801168c:	0719      	lsls	r1, r3, #28
 801168e:	bf04      	itt	eq
 8011690:	091b      	lsreq	r3, r3, #4
 8011692:	3004      	addeq	r0, #4
 8011694:	0799      	lsls	r1, r3, #30
 8011696:	bf04      	itt	eq
 8011698:	089b      	lsreq	r3, r3, #2
 801169a:	3002      	addeq	r0, #2
 801169c:	07d9      	lsls	r1, r3, #31
 801169e:	d403      	bmi.n	80116a8 <__lo0bits+0x4e>
 80116a0:	085b      	lsrs	r3, r3, #1
 80116a2:	f100 0001 	add.w	r0, r0, #1
 80116a6:	d003      	beq.n	80116b0 <__lo0bits+0x56>
 80116a8:	6013      	str	r3, [r2, #0]
 80116aa:	4770      	bx	lr
 80116ac:	2000      	movs	r0, #0
 80116ae:	4770      	bx	lr
 80116b0:	2020      	movs	r0, #32
 80116b2:	4770      	bx	lr

080116b4 <__i2b>:
 80116b4:	b510      	push	{r4, lr}
 80116b6:	460c      	mov	r4, r1
 80116b8:	2101      	movs	r1, #1
 80116ba:	f7ff febd 	bl	8011438 <_Balloc>
 80116be:	4602      	mov	r2, r0
 80116c0:	b928      	cbnz	r0, 80116ce <__i2b+0x1a>
 80116c2:	4b05      	ldr	r3, [pc, #20]	@ (80116d8 <__i2b+0x24>)
 80116c4:	4805      	ldr	r0, [pc, #20]	@ (80116dc <__i2b+0x28>)
 80116c6:	f240 1145 	movw	r1, #325	@ 0x145
 80116ca:	f7fe fbff 	bl	800fecc <__assert_func>
 80116ce:	2301      	movs	r3, #1
 80116d0:	6144      	str	r4, [r0, #20]
 80116d2:	6103      	str	r3, [r0, #16]
 80116d4:	bd10      	pop	{r4, pc}
 80116d6:	bf00      	nop
 80116d8:	080142ab 	.word	0x080142ab
 80116dc:	0801431c 	.word	0x0801431c

080116e0 <__multiply>:
 80116e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116e4:	4614      	mov	r4, r2
 80116e6:	690a      	ldr	r2, [r1, #16]
 80116e8:	6923      	ldr	r3, [r4, #16]
 80116ea:	429a      	cmp	r2, r3
 80116ec:	bfa8      	it	ge
 80116ee:	4623      	movge	r3, r4
 80116f0:	460f      	mov	r7, r1
 80116f2:	bfa4      	itt	ge
 80116f4:	460c      	movge	r4, r1
 80116f6:	461f      	movge	r7, r3
 80116f8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80116fc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011700:	68a3      	ldr	r3, [r4, #8]
 8011702:	6861      	ldr	r1, [r4, #4]
 8011704:	eb0a 0609 	add.w	r6, sl, r9
 8011708:	42b3      	cmp	r3, r6
 801170a:	b085      	sub	sp, #20
 801170c:	bfb8      	it	lt
 801170e:	3101      	addlt	r1, #1
 8011710:	f7ff fe92 	bl	8011438 <_Balloc>
 8011714:	b930      	cbnz	r0, 8011724 <__multiply+0x44>
 8011716:	4602      	mov	r2, r0
 8011718:	4b44      	ldr	r3, [pc, #272]	@ (801182c <__multiply+0x14c>)
 801171a:	4845      	ldr	r0, [pc, #276]	@ (8011830 <__multiply+0x150>)
 801171c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011720:	f7fe fbd4 	bl	800fecc <__assert_func>
 8011724:	f100 0514 	add.w	r5, r0, #20
 8011728:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801172c:	462b      	mov	r3, r5
 801172e:	2200      	movs	r2, #0
 8011730:	4543      	cmp	r3, r8
 8011732:	d321      	bcc.n	8011778 <__multiply+0x98>
 8011734:	f107 0114 	add.w	r1, r7, #20
 8011738:	f104 0214 	add.w	r2, r4, #20
 801173c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011740:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011744:	9302      	str	r3, [sp, #8]
 8011746:	1b13      	subs	r3, r2, r4
 8011748:	3b15      	subs	r3, #21
 801174a:	f023 0303 	bic.w	r3, r3, #3
 801174e:	3304      	adds	r3, #4
 8011750:	f104 0715 	add.w	r7, r4, #21
 8011754:	42ba      	cmp	r2, r7
 8011756:	bf38      	it	cc
 8011758:	2304      	movcc	r3, #4
 801175a:	9301      	str	r3, [sp, #4]
 801175c:	9b02      	ldr	r3, [sp, #8]
 801175e:	9103      	str	r1, [sp, #12]
 8011760:	428b      	cmp	r3, r1
 8011762:	d80c      	bhi.n	801177e <__multiply+0x9e>
 8011764:	2e00      	cmp	r6, #0
 8011766:	dd03      	ble.n	8011770 <__multiply+0x90>
 8011768:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801176c:	2b00      	cmp	r3, #0
 801176e:	d05b      	beq.n	8011828 <__multiply+0x148>
 8011770:	6106      	str	r6, [r0, #16]
 8011772:	b005      	add	sp, #20
 8011774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011778:	f843 2b04 	str.w	r2, [r3], #4
 801177c:	e7d8      	b.n	8011730 <__multiply+0x50>
 801177e:	f8b1 a000 	ldrh.w	sl, [r1]
 8011782:	f1ba 0f00 	cmp.w	sl, #0
 8011786:	d024      	beq.n	80117d2 <__multiply+0xf2>
 8011788:	f104 0e14 	add.w	lr, r4, #20
 801178c:	46a9      	mov	r9, r5
 801178e:	f04f 0c00 	mov.w	ip, #0
 8011792:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011796:	f8d9 3000 	ldr.w	r3, [r9]
 801179a:	fa1f fb87 	uxth.w	fp, r7
 801179e:	b29b      	uxth	r3, r3
 80117a0:	fb0a 330b 	mla	r3, sl, fp, r3
 80117a4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80117a8:	f8d9 7000 	ldr.w	r7, [r9]
 80117ac:	4463      	add	r3, ip
 80117ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80117b2:	fb0a c70b 	mla	r7, sl, fp, ip
 80117b6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80117ba:	b29b      	uxth	r3, r3
 80117bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80117c0:	4572      	cmp	r2, lr
 80117c2:	f849 3b04 	str.w	r3, [r9], #4
 80117c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80117ca:	d8e2      	bhi.n	8011792 <__multiply+0xb2>
 80117cc:	9b01      	ldr	r3, [sp, #4]
 80117ce:	f845 c003 	str.w	ip, [r5, r3]
 80117d2:	9b03      	ldr	r3, [sp, #12]
 80117d4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80117d8:	3104      	adds	r1, #4
 80117da:	f1b9 0f00 	cmp.w	r9, #0
 80117de:	d021      	beq.n	8011824 <__multiply+0x144>
 80117e0:	682b      	ldr	r3, [r5, #0]
 80117e2:	f104 0c14 	add.w	ip, r4, #20
 80117e6:	46ae      	mov	lr, r5
 80117e8:	f04f 0a00 	mov.w	sl, #0
 80117ec:	f8bc b000 	ldrh.w	fp, [ip]
 80117f0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80117f4:	fb09 770b 	mla	r7, r9, fp, r7
 80117f8:	4457      	add	r7, sl
 80117fa:	b29b      	uxth	r3, r3
 80117fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011800:	f84e 3b04 	str.w	r3, [lr], #4
 8011804:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011808:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801180c:	f8be 3000 	ldrh.w	r3, [lr]
 8011810:	fb09 330a 	mla	r3, r9, sl, r3
 8011814:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011818:	4562      	cmp	r2, ip
 801181a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801181e:	d8e5      	bhi.n	80117ec <__multiply+0x10c>
 8011820:	9f01      	ldr	r7, [sp, #4]
 8011822:	51eb      	str	r3, [r5, r7]
 8011824:	3504      	adds	r5, #4
 8011826:	e799      	b.n	801175c <__multiply+0x7c>
 8011828:	3e01      	subs	r6, #1
 801182a:	e79b      	b.n	8011764 <__multiply+0x84>
 801182c:	080142ab 	.word	0x080142ab
 8011830:	0801431c 	.word	0x0801431c

08011834 <__pow5mult>:
 8011834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011838:	4615      	mov	r5, r2
 801183a:	f012 0203 	ands.w	r2, r2, #3
 801183e:	4607      	mov	r7, r0
 8011840:	460e      	mov	r6, r1
 8011842:	d007      	beq.n	8011854 <__pow5mult+0x20>
 8011844:	4c25      	ldr	r4, [pc, #148]	@ (80118dc <__pow5mult+0xa8>)
 8011846:	3a01      	subs	r2, #1
 8011848:	2300      	movs	r3, #0
 801184a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801184e:	f7ff fe55 	bl	80114fc <__multadd>
 8011852:	4606      	mov	r6, r0
 8011854:	10ad      	asrs	r5, r5, #2
 8011856:	d03d      	beq.n	80118d4 <__pow5mult+0xa0>
 8011858:	69fc      	ldr	r4, [r7, #28]
 801185a:	b97c      	cbnz	r4, 801187c <__pow5mult+0x48>
 801185c:	2010      	movs	r0, #16
 801185e:	f7ff fd23 	bl	80112a8 <malloc>
 8011862:	4602      	mov	r2, r0
 8011864:	61f8      	str	r0, [r7, #28]
 8011866:	b928      	cbnz	r0, 8011874 <__pow5mult+0x40>
 8011868:	4b1d      	ldr	r3, [pc, #116]	@ (80118e0 <__pow5mult+0xac>)
 801186a:	481e      	ldr	r0, [pc, #120]	@ (80118e4 <__pow5mult+0xb0>)
 801186c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011870:	f7fe fb2c 	bl	800fecc <__assert_func>
 8011874:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011878:	6004      	str	r4, [r0, #0]
 801187a:	60c4      	str	r4, [r0, #12]
 801187c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011880:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011884:	b94c      	cbnz	r4, 801189a <__pow5mult+0x66>
 8011886:	f240 2171 	movw	r1, #625	@ 0x271
 801188a:	4638      	mov	r0, r7
 801188c:	f7ff ff12 	bl	80116b4 <__i2b>
 8011890:	2300      	movs	r3, #0
 8011892:	f8c8 0008 	str.w	r0, [r8, #8]
 8011896:	4604      	mov	r4, r0
 8011898:	6003      	str	r3, [r0, #0]
 801189a:	f04f 0900 	mov.w	r9, #0
 801189e:	07eb      	lsls	r3, r5, #31
 80118a0:	d50a      	bpl.n	80118b8 <__pow5mult+0x84>
 80118a2:	4631      	mov	r1, r6
 80118a4:	4622      	mov	r2, r4
 80118a6:	4638      	mov	r0, r7
 80118a8:	f7ff ff1a 	bl	80116e0 <__multiply>
 80118ac:	4631      	mov	r1, r6
 80118ae:	4680      	mov	r8, r0
 80118b0:	4638      	mov	r0, r7
 80118b2:	f7ff fe01 	bl	80114b8 <_Bfree>
 80118b6:	4646      	mov	r6, r8
 80118b8:	106d      	asrs	r5, r5, #1
 80118ba:	d00b      	beq.n	80118d4 <__pow5mult+0xa0>
 80118bc:	6820      	ldr	r0, [r4, #0]
 80118be:	b938      	cbnz	r0, 80118d0 <__pow5mult+0x9c>
 80118c0:	4622      	mov	r2, r4
 80118c2:	4621      	mov	r1, r4
 80118c4:	4638      	mov	r0, r7
 80118c6:	f7ff ff0b 	bl	80116e0 <__multiply>
 80118ca:	6020      	str	r0, [r4, #0]
 80118cc:	f8c0 9000 	str.w	r9, [r0]
 80118d0:	4604      	mov	r4, r0
 80118d2:	e7e4      	b.n	801189e <__pow5mult+0x6a>
 80118d4:	4630      	mov	r0, r6
 80118d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118da:	bf00      	nop
 80118dc:	08014378 	.word	0x08014378
 80118e0:	08014191 	.word	0x08014191
 80118e4:	0801431c 	.word	0x0801431c

080118e8 <__lshift>:
 80118e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118ec:	460c      	mov	r4, r1
 80118ee:	6849      	ldr	r1, [r1, #4]
 80118f0:	6923      	ldr	r3, [r4, #16]
 80118f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80118f6:	68a3      	ldr	r3, [r4, #8]
 80118f8:	4607      	mov	r7, r0
 80118fa:	4691      	mov	r9, r2
 80118fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011900:	f108 0601 	add.w	r6, r8, #1
 8011904:	42b3      	cmp	r3, r6
 8011906:	db0b      	blt.n	8011920 <__lshift+0x38>
 8011908:	4638      	mov	r0, r7
 801190a:	f7ff fd95 	bl	8011438 <_Balloc>
 801190e:	4605      	mov	r5, r0
 8011910:	b948      	cbnz	r0, 8011926 <__lshift+0x3e>
 8011912:	4602      	mov	r2, r0
 8011914:	4b28      	ldr	r3, [pc, #160]	@ (80119b8 <__lshift+0xd0>)
 8011916:	4829      	ldr	r0, [pc, #164]	@ (80119bc <__lshift+0xd4>)
 8011918:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801191c:	f7fe fad6 	bl	800fecc <__assert_func>
 8011920:	3101      	adds	r1, #1
 8011922:	005b      	lsls	r3, r3, #1
 8011924:	e7ee      	b.n	8011904 <__lshift+0x1c>
 8011926:	2300      	movs	r3, #0
 8011928:	f100 0114 	add.w	r1, r0, #20
 801192c:	f100 0210 	add.w	r2, r0, #16
 8011930:	4618      	mov	r0, r3
 8011932:	4553      	cmp	r3, sl
 8011934:	db33      	blt.n	801199e <__lshift+0xb6>
 8011936:	6920      	ldr	r0, [r4, #16]
 8011938:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801193c:	f104 0314 	add.w	r3, r4, #20
 8011940:	f019 091f 	ands.w	r9, r9, #31
 8011944:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011948:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801194c:	d02b      	beq.n	80119a6 <__lshift+0xbe>
 801194e:	f1c9 0e20 	rsb	lr, r9, #32
 8011952:	468a      	mov	sl, r1
 8011954:	2200      	movs	r2, #0
 8011956:	6818      	ldr	r0, [r3, #0]
 8011958:	fa00 f009 	lsl.w	r0, r0, r9
 801195c:	4310      	orrs	r0, r2
 801195e:	f84a 0b04 	str.w	r0, [sl], #4
 8011962:	f853 2b04 	ldr.w	r2, [r3], #4
 8011966:	459c      	cmp	ip, r3
 8011968:	fa22 f20e 	lsr.w	r2, r2, lr
 801196c:	d8f3      	bhi.n	8011956 <__lshift+0x6e>
 801196e:	ebac 0304 	sub.w	r3, ip, r4
 8011972:	3b15      	subs	r3, #21
 8011974:	f023 0303 	bic.w	r3, r3, #3
 8011978:	3304      	adds	r3, #4
 801197a:	f104 0015 	add.w	r0, r4, #21
 801197e:	4584      	cmp	ip, r0
 8011980:	bf38      	it	cc
 8011982:	2304      	movcc	r3, #4
 8011984:	50ca      	str	r2, [r1, r3]
 8011986:	b10a      	cbz	r2, 801198c <__lshift+0xa4>
 8011988:	f108 0602 	add.w	r6, r8, #2
 801198c:	3e01      	subs	r6, #1
 801198e:	4638      	mov	r0, r7
 8011990:	612e      	str	r6, [r5, #16]
 8011992:	4621      	mov	r1, r4
 8011994:	f7ff fd90 	bl	80114b8 <_Bfree>
 8011998:	4628      	mov	r0, r5
 801199a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801199e:	f842 0f04 	str.w	r0, [r2, #4]!
 80119a2:	3301      	adds	r3, #1
 80119a4:	e7c5      	b.n	8011932 <__lshift+0x4a>
 80119a6:	3904      	subs	r1, #4
 80119a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80119ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80119b0:	459c      	cmp	ip, r3
 80119b2:	d8f9      	bhi.n	80119a8 <__lshift+0xc0>
 80119b4:	e7ea      	b.n	801198c <__lshift+0xa4>
 80119b6:	bf00      	nop
 80119b8:	080142ab 	.word	0x080142ab
 80119bc:	0801431c 	.word	0x0801431c

080119c0 <__mcmp>:
 80119c0:	690a      	ldr	r2, [r1, #16]
 80119c2:	4603      	mov	r3, r0
 80119c4:	6900      	ldr	r0, [r0, #16]
 80119c6:	1a80      	subs	r0, r0, r2
 80119c8:	b530      	push	{r4, r5, lr}
 80119ca:	d10e      	bne.n	80119ea <__mcmp+0x2a>
 80119cc:	3314      	adds	r3, #20
 80119ce:	3114      	adds	r1, #20
 80119d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80119d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80119d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80119dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80119e0:	4295      	cmp	r5, r2
 80119e2:	d003      	beq.n	80119ec <__mcmp+0x2c>
 80119e4:	d205      	bcs.n	80119f2 <__mcmp+0x32>
 80119e6:	f04f 30ff 	mov.w	r0, #4294967295
 80119ea:	bd30      	pop	{r4, r5, pc}
 80119ec:	42a3      	cmp	r3, r4
 80119ee:	d3f3      	bcc.n	80119d8 <__mcmp+0x18>
 80119f0:	e7fb      	b.n	80119ea <__mcmp+0x2a>
 80119f2:	2001      	movs	r0, #1
 80119f4:	e7f9      	b.n	80119ea <__mcmp+0x2a>
	...

080119f8 <__mdiff>:
 80119f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119fc:	4689      	mov	r9, r1
 80119fe:	4606      	mov	r6, r0
 8011a00:	4611      	mov	r1, r2
 8011a02:	4648      	mov	r0, r9
 8011a04:	4614      	mov	r4, r2
 8011a06:	f7ff ffdb 	bl	80119c0 <__mcmp>
 8011a0a:	1e05      	subs	r5, r0, #0
 8011a0c:	d112      	bne.n	8011a34 <__mdiff+0x3c>
 8011a0e:	4629      	mov	r1, r5
 8011a10:	4630      	mov	r0, r6
 8011a12:	f7ff fd11 	bl	8011438 <_Balloc>
 8011a16:	4602      	mov	r2, r0
 8011a18:	b928      	cbnz	r0, 8011a26 <__mdiff+0x2e>
 8011a1a:	4b3f      	ldr	r3, [pc, #252]	@ (8011b18 <__mdiff+0x120>)
 8011a1c:	f240 2137 	movw	r1, #567	@ 0x237
 8011a20:	483e      	ldr	r0, [pc, #248]	@ (8011b1c <__mdiff+0x124>)
 8011a22:	f7fe fa53 	bl	800fecc <__assert_func>
 8011a26:	2301      	movs	r3, #1
 8011a28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011a2c:	4610      	mov	r0, r2
 8011a2e:	b003      	add	sp, #12
 8011a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a34:	bfbc      	itt	lt
 8011a36:	464b      	movlt	r3, r9
 8011a38:	46a1      	movlt	r9, r4
 8011a3a:	4630      	mov	r0, r6
 8011a3c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011a40:	bfba      	itte	lt
 8011a42:	461c      	movlt	r4, r3
 8011a44:	2501      	movlt	r5, #1
 8011a46:	2500      	movge	r5, #0
 8011a48:	f7ff fcf6 	bl	8011438 <_Balloc>
 8011a4c:	4602      	mov	r2, r0
 8011a4e:	b918      	cbnz	r0, 8011a58 <__mdiff+0x60>
 8011a50:	4b31      	ldr	r3, [pc, #196]	@ (8011b18 <__mdiff+0x120>)
 8011a52:	f240 2145 	movw	r1, #581	@ 0x245
 8011a56:	e7e3      	b.n	8011a20 <__mdiff+0x28>
 8011a58:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011a5c:	6926      	ldr	r6, [r4, #16]
 8011a5e:	60c5      	str	r5, [r0, #12]
 8011a60:	f109 0310 	add.w	r3, r9, #16
 8011a64:	f109 0514 	add.w	r5, r9, #20
 8011a68:	f104 0e14 	add.w	lr, r4, #20
 8011a6c:	f100 0b14 	add.w	fp, r0, #20
 8011a70:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011a74:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011a78:	9301      	str	r3, [sp, #4]
 8011a7a:	46d9      	mov	r9, fp
 8011a7c:	f04f 0c00 	mov.w	ip, #0
 8011a80:	9b01      	ldr	r3, [sp, #4]
 8011a82:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011a86:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011a8a:	9301      	str	r3, [sp, #4]
 8011a8c:	fa1f f38a 	uxth.w	r3, sl
 8011a90:	4619      	mov	r1, r3
 8011a92:	b283      	uxth	r3, r0
 8011a94:	1acb      	subs	r3, r1, r3
 8011a96:	0c00      	lsrs	r0, r0, #16
 8011a98:	4463      	add	r3, ip
 8011a9a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011a9e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011aa2:	b29b      	uxth	r3, r3
 8011aa4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011aa8:	4576      	cmp	r6, lr
 8011aaa:	f849 3b04 	str.w	r3, [r9], #4
 8011aae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011ab2:	d8e5      	bhi.n	8011a80 <__mdiff+0x88>
 8011ab4:	1b33      	subs	r3, r6, r4
 8011ab6:	3b15      	subs	r3, #21
 8011ab8:	f023 0303 	bic.w	r3, r3, #3
 8011abc:	3415      	adds	r4, #21
 8011abe:	3304      	adds	r3, #4
 8011ac0:	42a6      	cmp	r6, r4
 8011ac2:	bf38      	it	cc
 8011ac4:	2304      	movcc	r3, #4
 8011ac6:	441d      	add	r5, r3
 8011ac8:	445b      	add	r3, fp
 8011aca:	461e      	mov	r6, r3
 8011acc:	462c      	mov	r4, r5
 8011ace:	4544      	cmp	r4, r8
 8011ad0:	d30e      	bcc.n	8011af0 <__mdiff+0xf8>
 8011ad2:	f108 0103 	add.w	r1, r8, #3
 8011ad6:	1b49      	subs	r1, r1, r5
 8011ad8:	f021 0103 	bic.w	r1, r1, #3
 8011adc:	3d03      	subs	r5, #3
 8011ade:	45a8      	cmp	r8, r5
 8011ae0:	bf38      	it	cc
 8011ae2:	2100      	movcc	r1, #0
 8011ae4:	440b      	add	r3, r1
 8011ae6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011aea:	b191      	cbz	r1, 8011b12 <__mdiff+0x11a>
 8011aec:	6117      	str	r7, [r2, #16]
 8011aee:	e79d      	b.n	8011a2c <__mdiff+0x34>
 8011af0:	f854 1b04 	ldr.w	r1, [r4], #4
 8011af4:	46e6      	mov	lr, ip
 8011af6:	0c08      	lsrs	r0, r1, #16
 8011af8:	fa1c fc81 	uxtah	ip, ip, r1
 8011afc:	4471      	add	r1, lr
 8011afe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011b02:	b289      	uxth	r1, r1
 8011b04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011b08:	f846 1b04 	str.w	r1, [r6], #4
 8011b0c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011b10:	e7dd      	b.n	8011ace <__mdiff+0xd6>
 8011b12:	3f01      	subs	r7, #1
 8011b14:	e7e7      	b.n	8011ae6 <__mdiff+0xee>
 8011b16:	bf00      	nop
 8011b18:	080142ab 	.word	0x080142ab
 8011b1c:	0801431c 	.word	0x0801431c

08011b20 <__ulp>:
 8011b20:	b082      	sub	sp, #8
 8011b22:	ed8d 0b00 	vstr	d0, [sp]
 8011b26:	9a01      	ldr	r2, [sp, #4]
 8011b28:	4b0f      	ldr	r3, [pc, #60]	@ (8011b68 <__ulp+0x48>)
 8011b2a:	4013      	ands	r3, r2
 8011b2c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	dc08      	bgt.n	8011b46 <__ulp+0x26>
 8011b34:	425b      	negs	r3, r3
 8011b36:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011b3a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011b3e:	da04      	bge.n	8011b4a <__ulp+0x2a>
 8011b40:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011b44:	4113      	asrs	r3, r2
 8011b46:	2200      	movs	r2, #0
 8011b48:	e008      	b.n	8011b5c <__ulp+0x3c>
 8011b4a:	f1a2 0314 	sub.w	r3, r2, #20
 8011b4e:	2b1e      	cmp	r3, #30
 8011b50:	bfda      	itte	le
 8011b52:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011b56:	40da      	lsrle	r2, r3
 8011b58:	2201      	movgt	r2, #1
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	4619      	mov	r1, r3
 8011b5e:	4610      	mov	r0, r2
 8011b60:	ec41 0b10 	vmov	d0, r0, r1
 8011b64:	b002      	add	sp, #8
 8011b66:	4770      	bx	lr
 8011b68:	7ff00000 	.word	0x7ff00000

08011b6c <__b2d>:
 8011b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b70:	6906      	ldr	r6, [r0, #16]
 8011b72:	f100 0814 	add.w	r8, r0, #20
 8011b76:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011b7a:	1f37      	subs	r7, r6, #4
 8011b7c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011b80:	4610      	mov	r0, r2
 8011b82:	f7ff fd4b 	bl	801161c <__hi0bits>
 8011b86:	f1c0 0320 	rsb	r3, r0, #32
 8011b8a:	280a      	cmp	r0, #10
 8011b8c:	600b      	str	r3, [r1, #0]
 8011b8e:	491b      	ldr	r1, [pc, #108]	@ (8011bfc <__b2d+0x90>)
 8011b90:	dc15      	bgt.n	8011bbe <__b2d+0x52>
 8011b92:	f1c0 0c0b 	rsb	ip, r0, #11
 8011b96:	fa22 f30c 	lsr.w	r3, r2, ip
 8011b9a:	45b8      	cmp	r8, r7
 8011b9c:	ea43 0501 	orr.w	r5, r3, r1
 8011ba0:	bf34      	ite	cc
 8011ba2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011ba6:	2300      	movcs	r3, #0
 8011ba8:	3015      	adds	r0, #21
 8011baa:	fa02 f000 	lsl.w	r0, r2, r0
 8011bae:	fa23 f30c 	lsr.w	r3, r3, ip
 8011bb2:	4303      	orrs	r3, r0
 8011bb4:	461c      	mov	r4, r3
 8011bb6:	ec45 4b10 	vmov	d0, r4, r5
 8011bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bbe:	45b8      	cmp	r8, r7
 8011bc0:	bf3a      	itte	cc
 8011bc2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011bc6:	f1a6 0708 	subcc.w	r7, r6, #8
 8011bca:	2300      	movcs	r3, #0
 8011bcc:	380b      	subs	r0, #11
 8011bce:	d012      	beq.n	8011bf6 <__b2d+0x8a>
 8011bd0:	f1c0 0120 	rsb	r1, r0, #32
 8011bd4:	fa23 f401 	lsr.w	r4, r3, r1
 8011bd8:	4082      	lsls	r2, r0
 8011bda:	4322      	orrs	r2, r4
 8011bdc:	4547      	cmp	r7, r8
 8011bde:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011be2:	bf8c      	ite	hi
 8011be4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011be8:	2200      	movls	r2, #0
 8011bea:	4083      	lsls	r3, r0
 8011bec:	40ca      	lsrs	r2, r1
 8011bee:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011bf2:	4313      	orrs	r3, r2
 8011bf4:	e7de      	b.n	8011bb4 <__b2d+0x48>
 8011bf6:	ea42 0501 	orr.w	r5, r2, r1
 8011bfa:	e7db      	b.n	8011bb4 <__b2d+0x48>
 8011bfc:	3ff00000 	.word	0x3ff00000

08011c00 <__d2b>:
 8011c00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011c04:	460f      	mov	r7, r1
 8011c06:	2101      	movs	r1, #1
 8011c08:	ec59 8b10 	vmov	r8, r9, d0
 8011c0c:	4616      	mov	r6, r2
 8011c0e:	f7ff fc13 	bl	8011438 <_Balloc>
 8011c12:	4604      	mov	r4, r0
 8011c14:	b930      	cbnz	r0, 8011c24 <__d2b+0x24>
 8011c16:	4602      	mov	r2, r0
 8011c18:	4b23      	ldr	r3, [pc, #140]	@ (8011ca8 <__d2b+0xa8>)
 8011c1a:	4824      	ldr	r0, [pc, #144]	@ (8011cac <__d2b+0xac>)
 8011c1c:	f240 310f 	movw	r1, #783	@ 0x30f
 8011c20:	f7fe f954 	bl	800fecc <__assert_func>
 8011c24:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011c28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011c2c:	b10d      	cbz	r5, 8011c32 <__d2b+0x32>
 8011c2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011c32:	9301      	str	r3, [sp, #4]
 8011c34:	f1b8 0300 	subs.w	r3, r8, #0
 8011c38:	d023      	beq.n	8011c82 <__d2b+0x82>
 8011c3a:	4668      	mov	r0, sp
 8011c3c:	9300      	str	r3, [sp, #0]
 8011c3e:	f7ff fd0c 	bl	801165a <__lo0bits>
 8011c42:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011c46:	b1d0      	cbz	r0, 8011c7e <__d2b+0x7e>
 8011c48:	f1c0 0320 	rsb	r3, r0, #32
 8011c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8011c50:	430b      	orrs	r3, r1
 8011c52:	40c2      	lsrs	r2, r0
 8011c54:	6163      	str	r3, [r4, #20]
 8011c56:	9201      	str	r2, [sp, #4]
 8011c58:	9b01      	ldr	r3, [sp, #4]
 8011c5a:	61a3      	str	r3, [r4, #24]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	bf0c      	ite	eq
 8011c60:	2201      	moveq	r2, #1
 8011c62:	2202      	movne	r2, #2
 8011c64:	6122      	str	r2, [r4, #16]
 8011c66:	b1a5      	cbz	r5, 8011c92 <__d2b+0x92>
 8011c68:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011c6c:	4405      	add	r5, r0
 8011c6e:	603d      	str	r5, [r7, #0]
 8011c70:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011c74:	6030      	str	r0, [r6, #0]
 8011c76:	4620      	mov	r0, r4
 8011c78:	b003      	add	sp, #12
 8011c7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c7e:	6161      	str	r1, [r4, #20]
 8011c80:	e7ea      	b.n	8011c58 <__d2b+0x58>
 8011c82:	a801      	add	r0, sp, #4
 8011c84:	f7ff fce9 	bl	801165a <__lo0bits>
 8011c88:	9b01      	ldr	r3, [sp, #4]
 8011c8a:	6163      	str	r3, [r4, #20]
 8011c8c:	3020      	adds	r0, #32
 8011c8e:	2201      	movs	r2, #1
 8011c90:	e7e8      	b.n	8011c64 <__d2b+0x64>
 8011c92:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011c96:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011c9a:	6038      	str	r0, [r7, #0]
 8011c9c:	6918      	ldr	r0, [r3, #16]
 8011c9e:	f7ff fcbd 	bl	801161c <__hi0bits>
 8011ca2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011ca6:	e7e5      	b.n	8011c74 <__d2b+0x74>
 8011ca8:	080142ab 	.word	0x080142ab
 8011cac:	0801431c 	.word	0x0801431c

08011cb0 <__ratio>:
 8011cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cb4:	b085      	sub	sp, #20
 8011cb6:	e9cd 1000 	strd	r1, r0, [sp]
 8011cba:	a902      	add	r1, sp, #8
 8011cbc:	f7ff ff56 	bl	8011b6c <__b2d>
 8011cc0:	9800      	ldr	r0, [sp, #0]
 8011cc2:	a903      	add	r1, sp, #12
 8011cc4:	ec55 4b10 	vmov	r4, r5, d0
 8011cc8:	f7ff ff50 	bl	8011b6c <__b2d>
 8011ccc:	9b01      	ldr	r3, [sp, #4]
 8011cce:	6919      	ldr	r1, [r3, #16]
 8011cd0:	9b00      	ldr	r3, [sp, #0]
 8011cd2:	691b      	ldr	r3, [r3, #16]
 8011cd4:	1ac9      	subs	r1, r1, r3
 8011cd6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8011cda:	1a9b      	subs	r3, r3, r2
 8011cdc:	ec5b ab10 	vmov	sl, fp, d0
 8011ce0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	bfce      	itee	gt
 8011ce8:	462a      	movgt	r2, r5
 8011cea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011cee:	465a      	movle	r2, fp
 8011cf0:	462f      	mov	r7, r5
 8011cf2:	46d9      	mov	r9, fp
 8011cf4:	bfcc      	ite	gt
 8011cf6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011cfa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011cfe:	464b      	mov	r3, r9
 8011d00:	4652      	mov	r2, sl
 8011d02:	4620      	mov	r0, r4
 8011d04:	4639      	mov	r1, r7
 8011d06:	f7ee fdc1 	bl	800088c <__aeabi_ddiv>
 8011d0a:	ec41 0b10 	vmov	d0, r0, r1
 8011d0e:	b005      	add	sp, #20
 8011d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011d14 <__copybits>:
 8011d14:	3901      	subs	r1, #1
 8011d16:	b570      	push	{r4, r5, r6, lr}
 8011d18:	1149      	asrs	r1, r1, #5
 8011d1a:	6914      	ldr	r4, [r2, #16]
 8011d1c:	3101      	adds	r1, #1
 8011d1e:	f102 0314 	add.w	r3, r2, #20
 8011d22:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011d26:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011d2a:	1f05      	subs	r5, r0, #4
 8011d2c:	42a3      	cmp	r3, r4
 8011d2e:	d30c      	bcc.n	8011d4a <__copybits+0x36>
 8011d30:	1aa3      	subs	r3, r4, r2
 8011d32:	3b11      	subs	r3, #17
 8011d34:	f023 0303 	bic.w	r3, r3, #3
 8011d38:	3211      	adds	r2, #17
 8011d3a:	42a2      	cmp	r2, r4
 8011d3c:	bf88      	it	hi
 8011d3e:	2300      	movhi	r3, #0
 8011d40:	4418      	add	r0, r3
 8011d42:	2300      	movs	r3, #0
 8011d44:	4288      	cmp	r0, r1
 8011d46:	d305      	bcc.n	8011d54 <__copybits+0x40>
 8011d48:	bd70      	pop	{r4, r5, r6, pc}
 8011d4a:	f853 6b04 	ldr.w	r6, [r3], #4
 8011d4e:	f845 6f04 	str.w	r6, [r5, #4]!
 8011d52:	e7eb      	b.n	8011d2c <__copybits+0x18>
 8011d54:	f840 3b04 	str.w	r3, [r0], #4
 8011d58:	e7f4      	b.n	8011d44 <__copybits+0x30>

08011d5a <__any_on>:
 8011d5a:	f100 0214 	add.w	r2, r0, #20
 8011d5e:	6900      	ldr	r0, [r0, #16]
 8011d60:	114b      	asrs	r3, r1, #5
 8011d62:	4298      	cmp	r0, r3
 8011d64:	b510      	push	{r4, lr}
 8011d66:	db11      	blt.n	8011d8c <__any_on+0x32>
 8011d68:	dd0a      	ble.n	8011d80 <__any_on+0x26>
 8011d6a:	f011 011f 	ands.w	r1, r1, #31
 8011d6e:	d007      	beq.n	8011d80 <__any_on+0x26>
 8011d70:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011d74:	fa24 f001 	lsr.w	r0, r4, r1
 8011d78:	fa00 f101 	lsl.w	r1, r0, r1
 8011d7c:	428c      	cmp	r4, r1
 8011d7e:	d10b      	bne.n	8011d98 <__any_on+0x3e>
 8011d80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011d84:	4293      	cmp	r3, r2
 8011d86:	d803      	bhi.n	8011d90 <__any_on+0x36>
 8011d88:	2000      	movs	r0, #0
 8011d8a:	bd10      	pop	{r4, pc}
 8011d8c:	4603      	mov	r3, r0
 8011d8e:	e7f7      	b.n	8011d80 <__any_on+0x26>
 8011d90:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011d94:	2900      	cmp	r1, #0
 8011d96:	d0f5      	beq.n	8011d84 <__any_on+0x2a>
 8011d98:	2001      	movs	r0, #1
 8011d9a:	e7f6      	b.n	8011d8a <__any_on+0x30>

08011d9c <_strtol_l.constprop.0>:
 8011d9c:	2b24      	cmp	r3, #36	@ 0x24
 8011d9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011da2:	4686      	mov	lr, r0
 8011da4:	4690      	mov	r8, r2
 8011da6:	d801      	bhi.n	8011dac <_strtol_l.constprop.0+0x10>
 8011da8:	2b01      	cmp	r3, #1
 8011daa:	d106      	bne.n	8011dba <_strtol_l.constprop.0+0x1e>
 8011dac:	f7fe f842 	bl	800fe34 <__errno>
 8011db0:	2316      	movs	r3, #22
 8011db2:	6003      	str	r3, [r0, #0]
 8011db4:	2000      	movs	r0, #0
 8011db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011dba:	4834      	ldr	r0, [pc, #208]	@ (8011e8c <_strtol_l.constprop.0+0xf0>)
 8011dbc:	460d      	mov	r5, r1
 8011dbe:	462a      	mov	r2, r5
 8011dc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011dc4:	5d06      	ldrb	r6, [r0, r4]
 8011dc6:	f016 0608 	ands.w	r6, r6, #8
 8011dca:	d1f8      	bne.n	8011dbe <_strtol_l.constprop.0+0x22>
 8011dcc:	2c2d      	cmp	r4, #45	@ 0x2d
 8011dce:	d12d      	bne.n	8011e2c <_strtol_l.constprop.0+0x90>
 8011dd0:	782c      	ldrb	r4, [r5, #0]
 8011dd2:	2601      	movs	r6, #1
 8011dd4:	1c95      	adds	r5, r2, #2
 8011dd6:	f033 0210 	bics.w	r2, r3, #16
 8011dda:	d109      	bne.n	8011df0 <_strtol_l.constprop.0+0x54>
 8011ddc:	2c30      	cmp	r4, #48	@ 0x30
 8011dde:	d12a      	bne.n	8011e36 <_strtol_l.constprop.0+0x9a>
 8011de0:	782a      	ldrb	r2, [r5, #0]
 8011de2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011de6:	2a58      	cmp	r2, #88	@ 0x58
 8011de8:	d125      	bne.n	8011e36 <_strtol_l.constprop.0+0x9a>
 8011dea:	786c      	ldrb	r4, [r5, #1]
 8011dec:	2310      	movs	r3, #16
 8011dee:	3502      	adds	r5, #2
 8011df0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011df4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011df8:	2200      	movs	r2, #0
 8011dfa:	fbbc f9f3 	udiv	r9, ip, r3
 8011dfe:	4610      	mov	r0, r2
 8011e00:	fb03 ca19 	mls	sl, r3, r9, ip
 8011e04:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011e08:	2f09      	cmp	r7, #9
 8011e0a:	d81b      	bhi.n	8011e44 <_strtol_l.constprop.0+0xa8>
 8011e0c:	463c      	mov	r4, r7
 8011e0e:	42a3      	cmp	r3, r4
 8011e10:	dd27      	ble.n	8011e62 <_strtol_l.constprop.0+0xc6>
 8011e12:	1c57      	adds	r7, r2, #1
 8011e14:	d007      	beq.n	8011e26 <_strtol_l.constprop.0+0x8a>
 8011e16:	4581      	cmp	r9, r0
 8011e18:	d320      	bcc.n	8011e5c <_strtol_l.constprop.0+0xc0>
 8011e1a:	d101      	bne.n	8011e20 <_strtol_l.constprop.0+0x84>
 8011e1c:	45a2      	cmp	sl, r4
 8011e1e:	db1d      	blt.n	8011e5c <_strtol_l.constprop.0+0xc0>
 8011e20:	fb00 4003 	mla	r0, r0, r3, r4
 8011e24:	2201      	movs	r2, #1
 8011e26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011e2a:	e7eb      	b.n	8011e04 <_strtol_l.constprop.0+0x68>
 8011e2c:	2c2b      	cmp	r4, #43	@ 0x2b
 8011e2e:	bf04      	itt	eq
 8011e30:	782c      	ldrbeq	r4, [r5, #0]
 8011e32:	1c95      	addeq	r5, r2, #2
 8011e34:	e7cf      	b.n	8011dd6 <_strtol_l.constprop.0+0x3a>
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d1da      	bne.n	8011df0 <_strtol_l.constprop.0+0x54>
 8011e3a:	2c30      	cmp	r4, #48	@ 0x30
 8011e3c:	bf0c      	ite	eq
 8011e3e:	2308      	moveq	r3, #8
 8011e40:	230a      	movne	r3, #10
 8011e42:	e7d5      	b.n	8011df0 <_strtol_l.constprop.0+0x54>
 8011e44:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011e48:	2f19      	cmp	r7, #25
 8011e4a:	d801      	bhi.n	8011e50 <_strtol_l.constprop.0+0xb4>
 8011e4c:	3c37      	subs	r4, #55	@ 0x37
 8011e4e:	e7de      	b.n	8011e0e <_strtol_l.constprop.0+0x72>
 8011e50:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011e54:	2f19      	cmp	r7, #25
 8011e56:	d804      	bhi.n	8011e62 <_strtol_l.constprop.0+0xc6>
 8011e58:	3c57      	subs	r4, #87	@ 0x57
 8011e5a:	e7d8      	b.n	8011e0e <_strtol_l.constprop.0+0x72>
 8011e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8011e60:	e7e1      	b.n	8011e26 <_strtol_l.constprop.0+0x8a>
 8011e62:	1c53      	adds	r3, r2, #1
 8011e64:	d108      	bne.n	8011e78 <_strtol_l.constprop.0+0xdc>
 8011e66:	2322      	movs	r3, #34	@ 0x22
 8011e68:	f8ce 3000 	str.w	r3, [lr]
 8011e6c:	4660      	mov	r0, ip
 8011e6e:	f1b8 0f00 	cmp.w	r8, #0
 8011e72:	d0a0      	beq.n	8011db6 <_strtol_l.constprop.0+0x1a>
 8011e74:	1e69      	subs	r1, r5, #1
 8011e76:	e006      	b.n	8011e86 <_strtol_l.constprop.0+0xea>
 8011e78:	b106      	cbz	r6, 8011e7c <_strtol_l.constprop.0+0xe0>
 8011e7a:	4240      	negs	r0, r0
 8011e7c:	f1b8 0f00 	cmp.w	r8, #0
 8011e80:	d099      	beq.n	8011db6 <_strtol_l.constprop.0+0x1a>
 8011e82:	2a00      	cmp	r2, #0
 8011e84:	d1f6      	bne.n	8011e74 <_strtol_l.constprop.0+0xd8>
 8011e86:	f8c8 1000 	str.w	r1, [r8]
 8011e8a:	e794      	b.n	8011db6 <_strtol_l.constprop.0+0x1a>
 8011e8c:	08014479 	.word	0x08014479

08011e90 <_strtol_r>:
 8011e90:	f7ff bf84 	b.w	8011d9c <_strtol_l.constprop.0>

08011e94 <__ascii_wctomb>:
 8011e94:	4603      	mov	r3, r0
 8011e96:	4608      	mov	r0, r1
 8011e98:	b141      	cbz	r1, 8011eac <__ascii_wctomb+0x18>
 8011e9a:	2aff      	cmp	r2, #255	@ 0xff
 8011e9c:	d904      	bls.n	8011ea8 <__ascii_wctomb+0x14>
 8011e9e:	228a      	movs	r2, #138	@ 0x8a
 8011ea0:	601a      	str	r2, [r3, #0]
 8011ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8011ea6:	4770      	bx	lr
 8011ea8:	700a      	strb	r2, [r1, #0]
 8011eaa:	2001      	movs	r0, #1
 8011eac:	4770      	bx	lr

08011eae <__ssputs_r>:
 8011eae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011eb2:	688e      	ldr	r6, [r1, #8]
 8011eb4:	461f      	mov	r7, r3
 8011eb6:	42be      	cmp	r6, r7
 8011eb8:	680b      	ldr	r3, [r1, #0]
 8011eba:	4682      	mov	sl, r0
 8011ebc:	460c      	mov	r4, r1
 8011ebe:	4690      	mov	r8, r2
 8011ec0:	d82d      	bhi.n	8011f1e <__ssputs_r+0x70>
 8011ec2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011ec6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011eca:	d026      	beq.n	8011f1a <__ssputs_r+0x6c>
 8011ecc:	6965      	ldr	r5, [r4, #20]
 8011ece:	6909      	ldr	r1, [r1, #16]
 8011ed0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011ed4:	eba3 0901 	sub.w	r9, r3, r1
 8011ed8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011edc:	1c7b      	adds	r3, r7, #1
 8011ede:	444b      	add	r3, r9
 8011ee0:	106d      	asrs	r5, r5, #1
 8011ee2:	429d      	cmp	r5, r3
 8011ee4:	bf38      	it	cc
 8011ee6:	461d      	movcc	r5, r3
 8011ee8:	0553      	lsls	r3, r2, #21
 8011eea:	d527      	bpl.n	8011f3c <__ssputs_r+0x8e>
 8011eec:	4629      	mov	r1, r5
 8011eee:	f7ff fa05 	bl	80112fc <_malloc_r>
 8011ef2:	4606      	mov	r6, r0
 8011ef4:	b360      	cbz	r0, 8011f50 <__ssputs_r+0xa2>
 8011ef6:	6921      	ldr	r1, [r4, #16]
 8011ef8:	464a      	mov	r2, r9
 8011efa:	f7fd ffc8 	bl	800fe8e <memcpy>
 8011efe:	89a3      	ldrh	r3, [r4, #12]
 8011f00:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011f04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f08:	81a3      	strh	r3, [r4, #12]
 8011f0a:	6126      	str	r6, [r4, #16]
 8011f0c:	6165      	str	r5, [r4, #20]
 8011f0e:	444e      	add	r6, r9
 8011f10:	eba5 0509 	sub.w	r5, r5, r9
 8011f14:	6026      	str	r6, [r4, #0]
 8011f16:	60a5      	str	r5, [r4, #8]
 8011f18:	463e      	mov	r6, r7
 8011f1a:	42be      	cmp	r6, r7
 8011f1c:	d900      	bls.n	8011f20 <__ssputs_r+0x72>
 8011f1e:	463e      	mov	r6, r7
 8011f20:	6820      	ldr	r0, [r4, #0]
 8011f22:	4632      	mov	r2, r6
 8011f24:	4641      	mov	r1, r8
 8011f26:	f000 fbad 	bl	8012684 <memmove>
 8011f2a:	68a3      	ldr	r3, [r4, #8]
 8011f2c:	1b9b      	subs	r3, r3, r6
 8011f2e:	60a3      	str	r3, [r4, #8]
 8011f30:	6823      	ldr	r3, [r4, #0]
 8011f32:	4433      	add	r3, r6
 8011f34:	6023      	str	r3, [r4, #0]
 8011f36:	2000      	movs	r0, #0
 8011f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f3c:	462a      	mov	r2, r5
 8011f3e:	f000 fbe6 	bl	801270e <_realloc_r>
 8011f42:	4606      	mov	r6, r0
 8011f44:	2800      	cmp	r0, #0
 8011f46:	d1e0      	bne.n	8011f0a <__ssputs_r+0x5c>
 8011f48:	6921      	ldr	r1, [r4, #16]
 8011f4a:	4650      	mov	r0, sl
 8011f4c:	f7fe fe28 	bl	8010ba0 <_free_r>
 8011f50:	230c      	movs	r3, #12
 8011f52:	f8ca 3000 	str.w	r3, [sl]
 8011f56:	89a3      	ldrh	r3, [r4, #12]
 8011f58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011f5c:	81a3      	strh	r3, [r4, #12]
 8011f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8011f62:	e7e9      	b.n	8011f38 <__ssputs_r+0x8a>

08011f64 <_svfiprintf_r>:
 8011f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f68:	4698      	mov	r8, r3
 8011f6a:	898b      	ldrh	r3, [r1, #12]
 8011f6c:	061b      	lsls	r3, r3, #24
 8011f6e:	b09d      	sub	sp, #116	@ 0x74
 8011f70:	4607      	mov	r7, r0
 8011f72:	460d      	mov	r5, r1
 8011f74:	4614      	mov	r4, r2
 8011f76:	d510      	bpl.n	8011f9a <_svfiprintf_r+0x36>
 8011f78:	690b      	ldr	r3, [r1, #16]
 8011f7a:	b973      	cbnz	r3, 8011f9a <_svfiprintf_r+0x36>
 8011f7c:	2140      	movs	r1, #64	@ 0x40
 8011f7e:	f7ff f9bd 	bl	80112fc <_malloc_r>
 8011f82:	6028      	str	r0, [r5, #0]
 8011f84:	6128      	str	r0, [r5, #16]
 8011f86:	b930      	cbnz	r0, 8011f96 <_svfiprintf_r+0x32>
 8011f88:	230c      	movs	r3, #12
 8011f8a:	603b      	str	r3, [r7, #0]
 8011f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8011f90:	b01d      	add	sp, #116	@ 0x74
 8011f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f96:	2340      	movs	r3, #64	@ 0x40
 8011f98:	616b      	str	r3, [r5, #20]
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f9e:	2320      	movs	r3, #32
 8011fa0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011fa4:	f8cd 800c 	str.w	r8, [sp, #12]
 8011fa8:	2330      	movs	r3, #48	@ 0x30
 8011faa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012148 <_svfiprintf_r+0x1e4>
 8011fae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011fb2:	f04f 0901 	mov.w	r9, #1
 8011fb6:	4623      	mov	r3, r4
 8011fb8:	469a      	mov	sl, r3
 8011fba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011fbe:	b10a      	cbz	r2, 8011fc4 <_svfiprintf_r+0x60>
 8011fc0:	2a25      	cmp	r2, #37	@ 0x25
 8011fc2:	d1f9      	bne.n	8011fb8 <_svfiprintf_r+0x54>
 8011fc4:	ebba 0b04 	subs.w	fp, sl, r4
 8011fc8:	d00b      	beq.n	8011fe2 <_svfiprintf_r+0x7e>
 8011fca:	465b      	mov	r3, fp
 8011fcc:	4622      	mov	r2, r4
 8011fce:	4629      	mov	r1, r5
 8011fd0:	4638      	mov	r0, r7
 8011fd2:	f7ff ff6c 	bl	8011eae <__ssputs_r>
 8011fd6:	3001      	adds	r0, #1
 8011fd8:	f000 80a7 	beq.w	801212a <_svfiprintf_r+0x1c6>
 8011fdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011fde:	445a      	add	r2, fp
 8011fe0:	9209      	str	r2, [sp, #36]	@ 0x24
 8011fe2:	f89a 3000 	ldrb.w	r3, [sl]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	f000 809f 	beq.w	801212a <_svfiprintf_r+0x1c6>
 8011fec:	2300      	movs	r3, #0
 8011fee:	f04f 32ff 	mov.w	r2, #4294967295
 8011ff2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ff6:	f10a 0a01 	add.w	sl, sl, #1
 8011ffa:	9304      	str	r3, [sp, #16]
 8011ffc:	9307      	str	r3, [sp, #28]
 8011ffe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012002:	931a      	str	r3, [sp, #104]	@ 0x68
 8012004:	4654      	mov	r4, sl
 8012006:	2205      	movs	r2, #5
 8012008:	f814 1b01 	ldrb.w	r1, [r4], #1
 801200c:	484e      	ldr	r0, [pc, #312]	@ (8012148 <_svfiprintf_r+0x1e4>)
 801200e:	f7ee f8ff 	bl	8000210 <memchr>
 8012012:	9a04      	ldr	r2, [sp, #16]
 8012014:	b9d8      	cbnz	r0, 801204e <_svfiprintf_r+0xea>
 8012016:	06d0      	lsls	r0, r2, #27
 8012018:	bf44      	itt	mi
 801201a:	2320      	movmi	r3, #32
 801201c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012020:	0711      	lsls	r1, r2, #28
 8012022:	bf44      	itt	mi
 8012024:	232b      	movmi	r3, #43	@ 0x2b
 8012026:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801202a:	f89a 3000 	ldrb.w	r3, [sl]
 801202e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012030:	d015      	beq.n	801205e <_svfiprintf_r+0xfa>
 8012032:	9a07      	ldr	r2, [sp, #28]
 8012034:	4654      	mov	r4, sl
 8012036:	2000      	movs	r0, #0
 8012038:	f04f 0c0a 	mov.w	ip, #10
 801203c:	4621      	mov	r1, r4
 801203e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012042:	3b30      	subs	r3, #48	@ 0x30
 8012044:	2b09      	cmp	r3, #9
 8012046:	d94b      	bls.n	80120e0 <_svfiprintf_r+0x17c>
 8012048:	b1b0      	cbz	r0, 8012078 <_svfiprintf_r+0x114>
 801204a:	9207      	str	r2, [sp, #28]
 801204c:	e014      	b.n	8012078 <_svfiprintf_r+0x114>
 801204e:	eba0 0308 	sub.w	r3, r0, r8
 8012052:	fa09 f303 	lsl.w	r3, r9, r3
 8012056:	4313      	orrs	r3, r2
 8012058:	9304      	str	r3, [sp, #16]
 801205a:	46a2      	mov	sl, r4
 801205c:	e7d2      	b.n	8012004 <_svfiprintf_r+0xa0>
 801205e:	9b03      	ldr	r3, [sp, #12]
 8012060:	1d19      	adds	r1, r3, #4
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	9103      	str	r1, [sp, #12]
 8012066:	2b00      	cmp	r3, #0
 8012068:	bfbb      	ittet	lt
 801206a:	425b      	neglt	r3, r3
 801206c:	f042 0202 	orrlt.w	r2, r2, #2
 8012070:	9307      	strge	r3, [sp, #28]
 8012072:	9307      	strlt	r3, [sp, #28]
 8012074:	bfb8      	it	lt
 8012076:	9204      	strlt	r2, [sp, #16]
 8012078:	7823      	ldrb	r3, [r4, #0]
 801207a:	2b2e      	cmp	r3, #46	@ 0x2e
 801207c:	d10a      	bne.n	8012094 <_svfiprintf_r+0x130>
 801207e:	7863      	ldrb	r3, [r4, #1]
 8012080:	2b2a      	cmp	r3, #42	@ 0x2a
 8012082:	d132      	bne.n	80120ea <_svfiprintf_r+0x186>
 8012084:	9b03      	ldr	r3, [sp, #12]
 8012086:	1d1a      	adds	r2, r3, #4
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	9203      	str	r2, [sp, #12]
 801208c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012090:	3402      	adds	r4, #2
 8012092:	9305      	str	r3, [sp, #20]
 8012094:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012158 <_svfiprintf_r+0x1f4>
 8012098:	7821      	ldrb	r1, [r4, #0]
 801209a:	2203      	movs	r2, #3
 801209c:	4650      	mov	r0, sl
 801209e:	f7ee f8b7 	bl	8000210 <memchr>
 80120a2:	b138      	cbz	r0, 80120b4 <_svfiprintf_r+0x150>
 80120a4:	9b04      	ldr	r3, [sp, #16]
 80120a6:	eba0 000a 	sub.w	r0, r0, sl
 80120aa:	2240      	movs	r2, #64	@ 0x40
 80120ac:	4082      	lsls	r2, r0
 80120ae:	4313      	orrs	r3, r2
 80120b0:	3401      	adds	r4, #1
 80120b2:	9304      	str	r3, [sp, #16]
 80120b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120b8:	4824      	ldr	r0, [pc, #144]	@ (801214c <_svfiprintf_r+0x1e8>)
 80120ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80120be:	2206      	movs	r2, #6
 80120c0:	f7ee f8a6 	bl	8000210 <memchr>
 80120c4:	2800      	cmp	r0, #0
 80120c6:	d036      	beq.n	8012136 <_svfiprintf_r+0x1d2>
 80120c8:	4b21      	ldr	r3, [pc, #132]	@ (8012150 <_svfiprintf_r+0x1ec>)
 80120ca:	bb1b      	cbnz	r3, 8012114 <_svfiprintf_r+0x1b0>
 80120cc:	9b03      	ldr	r3, [sp, #12]
 80120ce:	3307      	adds	r3, #7
 80120d0:	f023 0307 	bic.w	r3, r3, #7
 80120d4:	3308      	adds	r3, #8
 80120d6:	9303      	str	r3, [sp, #12]
 80120d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80120da:	4433      	add	r3, r6
 80120dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80120de:	e76a      	b.n	8011fb6 <_svfiprintf_r+0x52>
 80120e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80120e4:	460c      	mov	r4, r1
 80120e6:	2001      	movs	r0, #1
 80120e8:	e7a8      	b.n	801203c <_svfiprintf_r+0xd8>
 80120ea:	2300      	movs	r3, #0
 80120ec:	3401      	adds	r4, #1
 80120ee:	9305      	str	r3, [sp, #20]
 80120f0:	4619      	mov	r1, r3
 80120f2:	f04f 0c0a 	mov.w	ip, #10
 80120f6:	4620      	mov	r0, r4
 80120f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80120fc:	3a30      	subs	r2, #48	@ 0x30
 80120fe:	2a09      	cmp	r2, #9
 8012100:	d903      	bls.n	801210a <_svfiprintf_r+0x1a6>
 8012102:	2b00      	cmp	r3, #0
 8012104:	d0c6      	beq.n	8012094 <_svfiprintf_r+0x130>
 8012106:	9105      	str	r1, [sp, #20]
 8012108:	e7c4      	b.n	8012094 <_svfiprintf_r+0x130>
 801210a:	fb0c 2101 	mla	r1, ip, r1, r2
 801210e:	4604      	mov	r4, r0
 8012110:	2301      	movs	r3, #1
 8012112:	e7f0      	b.n	80120f6 <_svfiprintf_r+0x192>
 8012114:	ab03      	add	r3, sp, #12
 8012116:	9300      	str	r3, [sp, #0]
 8012118:	462a      	mov	r2, r5
 801211a:	4b0e      	ldr	r3, [pc, #56]	@ (8012154 <_svfiprintf_r+0x1f0>)
 801211c:	a904      	add	r1, sp, #16
 801211e:	4638      	mov	r0, r7
 8012120:	f7fc fec4 	bl	800eeac <_printf_float>
 8012124:	1c42      	adds	r2, r0, #1
 8012126:	4606      	mov	r6, r0
 8012128:	d1d6      	bne.n	80120d8 <_svfiprintf_r+0x174>
 801212a:	89ab      	ldrh	r3, [r5, #12]
 801212c:	065b      	lsls	r3, r3, #25
 801212e:	f53f af2d 	bmi.w	8011f8c <_svfiprintf_r+0x28>
 8012132:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012134:	e72c      	b.n	8011f90 <_svfiprintf_r+0x2c>
 8012136:	ab03      	add	r3, sp, #12
 8012138:	9300      	str	r3, [sp, #0]
 801213a:	462a      	mov	r2, r5
 801213c:	4b05      	ldr	r3, [pc, #20]	@ (8012154 <_svfiprintf_r+0x1f0>)
 801213e:	a904      	add	r1, sp, #16
 8012140:	4638      	mov	r0, r7
 8012142:	f7fd f94b 	bl	800f3dc <_printf_i>
 8012146:	e7ed      	b.n	8012124 <_svfiprintf_r+0x1c0>
 8012148:	08014579 	.word	0x08014579
 801214c:	08014583 	.word	0x08014583
 8012150:	0800eead 	.word	0x0800eead
 8012154:	08011eaf 	.word	0x08011eaf
 8012158:	0801457f 	.word	0x0801457f

0801215c <__sfputc_r>:
 801215c:	6893      	ldr	r3, [r2, #8]
 801215e:	3b01      	subs	r3, #1
 8012160:	2b00      	cmp	r3, #0
 8012162:	b410      	push	{r4}
 8012164:	6093      	str	r3, [r2, #8]
 8012166:	da08      	bge.n	801217a <__sfputc_r+0x1e>
 8012168:	6994      	ldr	r4, [r2, #24]
 801216a:	42a3      	cmp	r3, r4
 801216c:	db01      	blt.n	8012172 <__sfputc_r+0x16>
 801216e:	290a      	cmp	r1, #10
 8012170:	d103      	bne.n	801217a <__sfputc_r+0x1e>
 8012172:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012176:	f000 b9f1 	b.w	801255c <__swbuf_r>
 801217a:	6813      	ldr	r3, [r2, #0]
 801217c:	1c58      	adds	r0, r3, #1
 801217e:	6010      	str	r0, [r2, #0]
 8012180:	7019      	strb	r1, [r3, #0]
 8012182:	4608      	mov	r0, r1
 8012184:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012188:	4770      	bx	lr

0801218a <__sfputs_r>:
 801218a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801218c:	4606      	mov	r6, r0
 801218e:	460f      	mov	r7, r1
 8012190:	4614      	mov	r4, r2
 8012192:	18d5      	adds	r5, r2, r3
 8012194:	42ac      	cmp	r4, r5
 8012196:	d101      	bne.n	801219c <__sfputs_r+0x12>
 8012198:	2000      	movs	r0, #0
 801219a:	e007      	b.n	80121ac <__sfputs_r+0x22>
 801219c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121a0:	463a      	mov	r2, r7
 80121a2:	4630      	mov	r0, r6
 80121a4:	f7ff ffda 	bl	801215c <__sfputc_r>
 80121a8:	1c43      	adds	r3, r0, #1
 80121aa:	d1f3      	bne.n	8012194 <__sfputs_r+0xa>
 80121ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080121b0 <_vfiprintf_r>:
 80121b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121b4:	460d      	mov	r5, r1
 80121b6:	b09d      	sub	sp, #116	@ 0x74
 80121b8:	4614      	mov	r4, r2
 80121ba:	4698      	mov	r8, r3
 80121bc:	4606      	mov	r6, r0
 80121be:	b118      	cbz	r0, 80121c8 <_vfiprintf_r+0x18>
 80121c0:	6a03      	ldr	r3, [r0, #32]
 80121c2:	b90b      	cbnz	r3, 80121c8 <_vfiprintf_r+0x18>
 80121c4:	f7fd fcca 	bl	800fb5c <__sinit>
 80121c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80121ca:	07d9      	lsls	r1, r3, #31
 80121cc:	d405      	bmi.n	80121da <_vfiprintf_r+0x2a>
 80121ce:	89ab      	ldrh	r3, [r5, #12]
 80121d0:	059a      	lsls	r2, r3, #22
 80121d2:	d402      	bmi.n	80121da <_vfiprintf_r+0x2a>
 80121d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80121d6:	f7fd fe58 	bl	800fe8a <__retarget_lock_acquire_recursive>
 80121da:	89ab      	ldrh	r3, [r5, #12]
 80121dc:	071b      	lsls	r3, r3, #28
 80121de:	d501      	bpl.n	80121e4 <_vfiprintf_r+0x34>
 80121e0:	692b      	ldr	r3, [r5, #16]
 80121e2:	b99b      	cbnz	r3, 801220c <_vfiprintf_r+0x5c>
 80121e4:	4629      	mov	r1, r5
 80121e6:	4630      	mov	r0, r6
 80121e8:	f000 f9f6 	bl	80125d8 <__swsetup_r>
 80121ec:	b170      	cbz	r0, 801220c <_vfiprintf_r+0x5c>
 80121ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80121f0:	07dc      	lsls	r4, r3, #31
 80121f2:	d504      	bpl.n	80121fe <_vfiprintf_r+0x4e>
 80121f4:	f04f 30ff 	mov.w	r0, #4294967295
 80121f8:	b01d      	add	sp, #116	@ 0x74
 80121fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121fe:	89ab      	ldrh	r3, [r5, #12]
 8012200:	0598      	lsls	r0, r3, #22
 8012202:	d4f7      	bmi.n	80121f4 <_vfiprintf_r+0x44>
 8012204:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012206:	f7fd fe41 	bl	800fe8c <__retarget_lock_release_recursive>
 801220a:	e7f3      	b.n	80121f4 <_vfiprintf_r+0x44>
 801220c:	2300      	movs	r3, #0
 801220e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012210:	2320      	movs	r3, #32
 8012212:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012216:	f8cd 800c 	str.w	r8, [sp, #12]
 801221a:	2330      	movs	r3, #48	@ 0x30
 801221c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80123cc <_vfiprintf_r+0x21c>
 8012220:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012224:	f04f 0901 	mov.w	r9, #1
 8012228:	4623      	mov	r3, r4
 801222a:	469a      	mov	sl, r3
 801222c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012230:	b10a      	cbz	r2, 8012236 <_vfiprintf_r+0x86>
 8012232:	2a25      	cmp	r2, #37	@ 0x25
 8012234:	d1f9      	bne.n	801222a <_vfiprintf_r+0x7a>
 8012236:	ebba 0b04 	subs.w	fp, sl, r4
 801223a:	d00b      	beq.n	8012254 <_vfiprintf_r+0xa4>
 801223c:	465b      	mov	r3, fp
 801223e:	4622      	mov	r2, r4
 8012240:	4629      	mov	r1, r5
 8012242:	4630      	mov	r0, r6
 8012244:	f7ff ffa1 	bl	801218a <__sfputs_r>
 8012248:	3001      	adds	r0, #1
 801224a:	f000 80a7 	beq.w	801239c <_vfiprintf_r+0x1ec>
 801224e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012250:	445a      	add	r2, fp
 8012252:	9209      	str	r2, [sp, #36]	@ 0x24
 8012254:	f89a 3000 	ldrb.w	r3, [sl]
 8012258:	2b00      	cmp	r3, #0
 801225a:	f000 809f 	beq.w	801239c <_vfiprintf_r+0x1ec>
 801225e:	2300      	movs	r3, #0
 8012260:	f04f 32ff 	mov.w	r2, #4294967295
 8012264:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012268:	f10a 0a01 	add.w	sl, sl, #1
 801226c:	9304      	str	r3, [sp, #16]
 801226e:	9307      	str	r3, [sp, #28]
 8012270:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012274:	931a      	str	r3, [sp, #104]	@ 0x68
 8012276:	4654      	mov	r4, sl
 8012278:	2205      	movs	r2, #5
 801227a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801227e:	4853      	ldr	r0, [pc, #332]	@ (80123cc <_vfiprintf_r+0x21c>)
 8012280:	f7ed ffc6 	bl	8000210 <memchr>
 8012284:	9a04      	ldr	r2, [sp, #16]
 8012286:	b9d8      	cbnz	r0, 80122c0 <_vfiprintf_r+0x110>
 8012288:	06d1      	lsls	r1, r2, #27
 801228a:	bf44      	itt	mi
 801228c:	2320      	movmi	r3, #32
 801228e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012292:	0713      	lsls	r3, r2, #28
 8012294:	bf44      	itt	mi
 8012296:	232b      	movmi	r3, #43	@ 0x2b
 8012298:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801229c:	f89a 3000 	ldrb.w	r3, [sl]
 80122a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80122a2:	d015      	beq.n	80122d0 <_vfiprintf_r+0x120>
 80122a4:	9a07      	ldr	r2, [sp, #28]
 80122a6:	4654      	mov	r4, sl
 80122a8:	2000      	movs	r0, #0
 80122aa:	f04f 0c0a 	mov.w	ip, #10
 80122ae:	4621      	mov	r1, r4
 80122b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80122b4:	3b30      	subs	r3, #48	@ 0x30
 80122b6:	2b09      	cmp	r3, #9
 80122b8:	d94b      	bls.n	8012352 <_vfiprintf_r+0x1a2>
 80122ba:	b1b0      	cbz	r0, 80122ea <_vfiprintf_r+0x13a>
 80122bc:	9207      	str	r2, [sp, #28]
 80122be:	e014      	b.n	80122ea <_vfiprintf_r+0x13a>
 80122c0:	eba0 0308 	sub.w	r3, r0, r8
 80122c4:	fa09 f303 	lsl.w	r3, r9, r3
 80122c8:	4313      	orrs	r3, r2
 80122ca:	9304      	str	r3, [sp, #16]
 80122cc:	46a2      	mov	sl, r4
 80122ce:	e7d2      	b.n	8012276 <_vfiprintf_r+0xc6>
 80122d0:	9b03      	ldr	r3, [sp, #12]
 80122d2:	1d19      	adds	r1, r3, #4
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	9103      	str	r1, [sp, #12]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	bfbb      	ittet	lt
 80122dc:	425b      	neglt	r3, r3
 80122de:	f042 0202 	orrlt.w	r2, r2, #2
 80122e2:	9307      	strge	r3, [sp, #28]
 80122e4:	9307      	strlt	r3, [sp, #28]
 80122e6:	bfb8      	it	lt
 80122e8:	9204      	strlt	r2, [sp, #16]
 80122ea:	7823      	ldrb	r3, [r4, #0]
 80122ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80122ee:	d10a      	bne.n	8012306 <_vfiprintf_r+0x156>
 80122f0:	7863      	ldrb	r3, [r4, #1]
 80122f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80122f4:	d132      	bne.n	801235c <_vfiprintf_r+0x1ac>
 80122f6:	9b03      	ldr	r3, [sp, #12]
 80122f8:	1d1a      	adds	r2, r3, #4
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	9203      	str	r2, [sp, #12]
 80122fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012302:	3402      	adds	r4, #2
 8012304:	9305      	str	r3, [sp, #20]
 8012306:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80123dc <_vfiprintf_r+0x22c>
 801230a:	7821      	ldrb	r1, [r4, #0]
 801230c:	2203      	movs	r2, #3
 801230e:	4650      	mov	r0, sl
 8012310:	f7ed ff7e 	bl	8000210 <memchr>
 8012314:	b138      	cbz	r0, 8012326 <_vfiprintf_r+0x176>
 8012316:	9b04      	ldr	r3, [sp, #16]
 8012318:	eba0 000a 	sub.w	r0, r0, sl
 801231c:	2240      	movs	r2, #64	@ 0x40
 801231e:	4082      	lsls	r2, r0
 8012320:	4313      	orrs	r3, r2
 8012322:	3401      	adds	r4, #1
 8012324:	9304      	str	r3, [sp, #16]
 8012326:	f814 1b01 	ldrb.w	r1, [r4], #1
 801232a:	4829      	ldr	r0, [pc, #164]	@ (80123d0 <_vfiprintf_r+0x220>)
 801232c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012330:	2206      	movs	r2, #6
 8012332:	f7ed ff6d 	bl	8000210 <memchr>
 8012336:	2800      	cmp	r0, #0
 8012338:	d03f      	beq.n	80123ba <_vfiprintf_r+0x20a>
 801233a:	4b26      	ldr	r3, [pc, #152]	@ (80123d4 <_vfiprintf_r+0x224>)
 801233c:	bb1b      	cbnz	r3, 8012386 <_vfiprintf_r+0x1d6>
 801233e:	9b03      	ldr	r3, [sp, #12]
 8012340:	3307      	adds	r3, #7
 8012342:	f023 0307 	bic.w	r3, r3, #7
 8012346:	3308      	adds	r3, #8
 8012348:	9303      	str	r3, [sp, #12]
 801234a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801234c:	443b      	add	r3, r7
 801234e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012350:	e76a      	b.n	8012228 <_vfiprintf_r+0x78>
 8012352:	fb0c 3202 	mla	r2, ip, r2, r3
 8012356:	460c      	mov	r4, r1
 8012358:	2001      	movs	r0, #1
 801235a:	e7a8      	b.n	80122ae <_vfiprintf_r+0xfe>
 801235c:	2300      	movs	r3, #0
 801235e:	3401      	adds	r4, #1
 8012360:	9305      	str	r3, [sp, #20]
 8012362:	4619      	mov	r1, r3
 8012364:	f04f 0c0a 	mov.w	ip, #10
 8012368:	4620      	mov	r0, r4
 801236a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801236e:	3a30      	subs	r2, #48	@ 0x30
 8012370:	2a09      	cmp	r2, #9
 8012372:	d903      	bls.n	801237c <_vfiprintf_r+0x1cc>
 8012374:	2b00      	cmp	r3, #0
 8012376:	d0c6      	beq.n	8012306 <_vfiprintf_r+0x156>
 8012378:	9105      	str	r1, [sp, #20]
 801237a:	e7c4      	b.n	8012306 <_vfiprintf_r+0x156>
 801237c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012380:	4604      	mov	r4, r0
 8012382:	2301      	movs	r3, #1
 8012384:	e7f0      	b.n	8012368 <_vfiprintf_r+0x1b8>
 8012386:	ab03      	add	r3, sp, #12
 8012388:	9300      	str	r3, [sp, #0]
 801238a:	462a      	mov	r2, r5
 801238c:	4b12      	ldr	r3, [pc, #72]	@ (80123d8 <_vfiprintf_r+0x228>)
 801238e:	a904      	add	r1, sp, #16
 8012390:	4630      	mov	r0, r6
 8012392:	f7fc fd8b 	bl	800eeac <_printf_float>
 8012396:	4607      	mov	r7, r0
 8012398:	1c78      	adds	r0, r7, #1
 801239a:	d1d6      	bne.n	801234a <_vfiprintf_r+0x19a>
 801239c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801239e:	07d9      	lsls	r1, r3, #31
 80123a0:	d405      	bmi.n	80123ae <_vfiprintf_r+0x1fe>
 80123a2:	89ab      	ldrh	r3, [r5, #12]
 80123a4:	059a      	lsls	r2, r3, #22
 80123a6:	d402      	bmi.n	80123ae <_vfiprintf_r+0x1fe>
 80123a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80123aa:	f7fd fd6f 	bl	800fe8c <__retarget_lock_release_recursive>
 80123ae:	89ab      	ldrh	r3, [r5, #12]
 80123b0:	065b      	lsls	r3, r3, #25
 80123b2:	f53f af1f 	bmi.w	80121f4 <_vfiprintf_r+0x44>
 80123b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80123b8:	e71e      	b.n	80121f8 <_vfiprintf_r+0x48>
 80123ba:	ab03      	add	r3, sp, #12
 80123bc:	9300      	str	r3, [sp, #0]
 80123be:	462a      	mov	r2, r5
 80123c0:	4b05      	ldr	r3, [pc, #20]	@ (80123d8 <_vfiprintf_r+0x228>)
 80123c2:	a904      	add	r1, sp, #16
 80123c4:	4630      	mov	r0, r6
 80123c6:	f7fd f809 	bl	800f3dc <_printf_i>
 80123ca:	e7e4      	b.n	8012396 <_vfiprintf_r+0x1e6>
 80123cc:	08014579 	.word	0x08014579
 80123d0:	08014583 	.word	0x08014583
 80123d4:	0800eead 	.word	0x0800eead
 80123d8:	0801218b 	.word	0x0801218b
 80123dc:	0801457f 	.word	0x0801457f

080123e0 <__sflush_r>:
 80123e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80123e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123e8:	0716      	lsls	r6, r2, #28
 80123ea:	4605      	mov	r5, r0
 80123ec:	460c      	mov	r4, r1
 80123ee:	d454      	bmi.n	801249a <__sflush_r+0xba>
 80123f0:	684b      	ldr	r3, [r1, #4]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	dc02      	bgt.n	80123fc <__sflush_r+0x1c>
 80123f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	dd48      	ble.n	801248e <__sflush_r+0xae>
 80123fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80123fe:	2e00      	cmp	r6, #0
 8012400:	d045      	beq.n	801248e <__sflush_r+0xae>
 8012402:	2300      	movs	r3, #0
 8012404:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012408:	682f      	ldr	r7, [r5, #0]
 801240a:	6a21      	ldr	r1, [r4, #32]
 801240c:	602b      	str	r3, [r5, #0]
 801240e:	d030      	beq.n	8012472 <__sflush_r+0x92>
 8012410:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012412:	89a3      	ldrh	r3, [r4, #12]
 8012414:	0759      	lsls	r1, r3, #29
 8012416:	d505      	bpl.n	8012424 <__sflush_r+0x44>
 8012418:	6863      	ldr	r3, [r4, #4]
 801241a:	1ad2      	subs	r2, r2, r3
 801241c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801241e:	b10b      	cbz	r3, 8012424 <__sflush_r+0x44>
 8012420:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012422:	1ad2      	subs	r2, r2, r3
 8012424:	2300      	movs	r3, #0
 8012426:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012428:	6a21      	ldr	r1, [r4, #32]
 801242a:	4628      	mov	r0, r5
 801242c:	47b0      	blx	r6
 801242e:	1c43      	adds	r3, r0, #1
 8012430:	89a3      	ldrh	r3, [r4, #12]
 8012432:	d106      	bne.n	8012442 <__sflush_r+0x62>
 8012434:	6829      	ldr	r1, [r5, #0]
 8012436:	291d      	cmp	r1, #29
 8012438:	d82b      	bhi.n	8012492 <__sflush_r+0xb2>
 801243a:	4a2a      	ldr	r2, [pc, #168]	@ (80124e4 <__sflush_r+0x104>)
 801243c:	410a      	asrs	r2, r1
 801243e:	07d6      	lsls	r6, r2, #31
 8012440:	d427      	bmi.n	8012492 <__sflush_r+0xb2>
 8012442:	2200      	movs	r2, #0
 8012444:	6062      	str	r2, [r4, #4]
 8012446:	04d9      	lsls	r1, r3, #19
 8012448:	6922      	ldr	r2, [r4, #16]
 801244a:	6022      	str	r2, [r4, #0]
 801244c:	d504      	bpl.n	8012458 <__sflush_r+0x78>
 801244e:	1c42      	adds	r2, r0, #1
 8012450:	d101      	bne.n	8012456 <__sflush_r+0x76>
 8012452:	682b      	ldr	r3, [r5, #0]
 8012454:	b903      	cbnz	r3, 8012458 <__sflush_r+0x78>
 8012456:	6560      	str	r0, [r4, #84]	@ 0x54
 8012458:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801245a:	602f      	str	r7, [r5, #0]
 801245c:	b1b9      	cbz	r1, 801248e <__sflush_r+0xae>
 801245e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012462:	4299      	cmp	r1, r3
 8012464:	d002      	beq.n	801246c <__sflush_r+0x8c>
 8012466:	4628      	mov	r0, r5
 8012468:	f7fe fb9a 	bl	8010ba0 <_free_r>
 801246c:	2300      	movs	r3, #0
 801246e:	6363      	str	r3, [r4, #52]	@ 0x34
 8012470:	e00d      	b.n	801248e <__sflush_r+0xae>
 8012472:	2301      	movs	r3, #1
 8012474:	4628      	mov	r0, r5
 8012476:	47b0      	blx	r6
 8012478:	4602      	mov	r2, r0
 801247a:	1c50      	adds	r0, r2, #1
 801247c:	d1c9      	bne.n	8012412 <__sflush_r+0x32>
 801247e:	682b      	ldr	r3, [r5, #0]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d0c6      	beq.n	8012412 <__sflush_r+0x32>
 8012484:	2b1d      	cmp	r3, #29
 8012486:	d001      	beq.n	801248c <__sflush_r+0xac>
 8012488:	2b16      	cmp	r3, #22
 801248a:	d11e      	bne.n	80124ca <__sflush_r+0xea>
 801248c:	602f      	str	r7, [r5, #0]
 801248e:	2000      	movs	r0, #0
 8012490:	e022      	b.n	80124d8 <__sflush_r+0xf8>
 8012492:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012496:	b21b      	sxth	r3, r3
 8012498:	e01b      	b.n	80124d2 <__sflush_r+0xf2>
 801249a:	690f      	ldr	r7, [r1, #16]
 801249c:	2f00      	cmp	r7, #0
 801249e:	d0f6      	beq.n	801248e <__sflush_r+0xae>
 80124a0:	0793      	lsls	r3, r2, #30
 80124a2:	680e      	ldr	r6, [r1, #0]
 80124a4:	bf08      	it	eq
 80124a6:	694b      	ldreq	r3, [r1, #20]
 80124a8:	600f      	str	r7, [r1, #0]
 80124aa:	bf18      	it	ne
 80124ac:	2300      	movne	r3, #0
 80124ae:	eba6 0807 	sub.w	r8, r6, r7
 80124b2:	608b      	str	r3, [r1, #8]
 80124b4:	f1b8 0f00 	cmp.w	r8, #0
 80124b8:	dde9      	ble.n	801248e <__sflush_r+0xae>
 80124ba:	6a21      	ldr	r1, [r4, #32]
 80124bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80124be:	4643      	mov	r3, r8
 80124c0:	463a      	mov	r2, r7
 80124c2:	4628      	mov	r0, r5
 80124c4:	47b0      	blx	r6
 80124c6:	2800      	cmp	r0, #0
 80124c8:	dc08      	bgt.n	80124dc <__sflush_r+0xfc>
 80124ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80124d2:	81a3      	strh	r3, [r4, #12]
 80124d4:	f04f 30ff 	mov.w	r0, #4294967295
 80124d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124dc:	4407      	add	r7, r0
 80124de:	eba8 0800 	sub.w	r8, r8, r0
 80124e2:	e7e7      	b.n	80124b4 <__sflush_r+0xd4>
 80124e4:	dfbffffe 	.word	0xdfbffffe

080124e8 <_fflush_r>:
 80124e8:	b538      	push	{r3, r4, r5, lr}
 80124ea:	690b      	ldr	r3, [r1, #16]
 80124ec:	4605      	mov	r5, r0
 80124ee:	460c      	mov	r4, r1
 80124f0:	b913      	cbnz	r3, 80124f8 <_fflush_r+0x10>
 80124f2:	2500      	movs	r5, #0
 80124f4:	4628      	mov	r0, r5
 80124f6:	bd38      	pop	{r3, r4, r5, pc}
 80124f8:	b118      	cbz	r0, 8012502 <_fflush_r+0x1a>
 80124fa:	6a03      	ldr	r3, [r0, #32]
 80124fc:	b90b      	cbnz	r3, 8012502 <_fflush_r+0x1a>
 80124fe:	f7fd fb2d 	bl	800fb5c <__sinit>
 8012502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d0f3      	beq.n	80124f2 <_fflush_r+0xa>
 801250a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801250c:	07d0      	lsls	r0, r2, #31
 801250e:	d404      	bmi.n	801251a <_fflush_r+0x32>
 8012510:	0599      	lsls	r1, r3, #22
 8012512:	d402      	bmi.n	801251a <_fflush_r+0x32>
 8012514:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012516:	f7fd fcb8 	bl	800fe8a <__retarget_lock_acquire_recursive>
 801251a:	4628      	mov	r0, r5
 801251c:	4621      	mov	r1, r4
 801251e:	f7ff ff5f 	bl	80123e0 <__sflush_r>
 8012522:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012524:	07da      	lsls	r2, r3, #31
 8012526:	4605      	mov	r5, r0
 8012528:	d4e4      	bmi.n	80124f4 <_fflush_r+0xc>
 801252a:	89a3      	ldrh	r3, [r4, #12]
 801252c:	059b      	lsls	r3, r3, #22
 801252e:	d4e1      	bmi.n	80124f4 <_fflush_r+0xc>
 8012530:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012532:	f7fd fcab 	bl	800fe8c <__retarget_lock_release_recursive>
 8012536:	e7dd      	b.n	80124f4 <_fflush_r+0xc>

08012538 <fiprintf>:
 8012538:	b40e      	push	{r1, r2, r3}
 801253a:	b503      	push	{r0, r1, lr}
 801253c:	4601      	mov	r1, r0
 801253e:	ab03      	add	r3, sp, #12
 8012540:	4805      	ldr	r0, [pc, #20]	@ (8012558 <fiprintf+0x20>)
 8012542:	f853 2b04 	ldr.w	r2, [r3], #4
 8012546:	6800      	ldr	r0, [r0, #0]
 8012548:	9301      	str	r3, [sp, #4]
 801254a:	f7ff fe31 	bl	80121b0 <_vfiprintf_r>
 801254e:	b002      	add	sp, #8
 8012550:	f85d eb04 	ldr.w	lr, [sp], #4
 8012554:	b003      	add	sp, #12
 8012556:	4770      	bx	lr
 8012558:	20000198 	.word	0x20000198

0801255c <__swbuf_r>:
 801255c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801255e:	460e      	mov	r6, r1
 8012560:	4614      	mov	r4, r2
 8012562:	4605      	mov	r5, r0
 8012564:	b118      	cbz	r0, 801256e <__swbuf_r+0x12>
 8012566:	6a03      	ldr	r3, [r0, #32]
 8012568:	b90b      	cbnz	r3, 801256e <__swbuf_r+0x12>
 801256a:	f7fd faf7 	bl	800fb5c <__sinit>
 801256e:	69a3      	ldr	r3, [r4, #24]
 8012570:	60a3      	str	r3, [r4, #8]
 8012572:	89a3      	ldrh	r3, [r4, #12]
 8012574:	071a      	lsls	r2, r3, #28
 8012576:	d501      	bpl.n	801257c <__swbuf_r+0x20>
 8012578:	6923      	ldr	r3, [r4, #16]
 801257a:	b943      	cbnz	r3, 801258e <__swbuf_r+0x32>
 801257c:	4621      	mov	r1, r4
 801257e:	4628      	mov	r0, r5
 8012580:	f000 f82a 	bl	80125d8 <__swsetup_r>
 8012584:	b118      	cbz	r0, 801258e <__swbuf_r+0x32>
 8012586:	f04f 37ff 	mov.w	r7, #4294967295
 801258a:	4638      	mov	r0, r7
 801258c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801258e:	6823      	ldr	r3, [r4, #0]
 8012590:	6922      	ldr	r2, [r4, #16]
 8012592:	1a98      	subs	r0, r3, r2
 8012594:	6963      	ldr	r3, [r4, #20]
 8012596:	b2f6      	uxtb	r6, r6
 8012598:	4283      	cmp	r3, r0
 801259a:	4637      	mov	r7, r6
 801259c:	dc05      	bgt.n	80125aa <__swbuf_r+0x4e>
 801259e:	4621      	mov	r1, r4
 80125a0:	4628      	mov	r0, r5
 80125a2:	f7ff ffa1 	bl	80124e8 <_fflush_r>
 80125a6:	2800      	cmp	r0, #0
 80125a8:	d1ed      	bne.n	8012586 <__swbuf_r+0x2a>
 80125aa:	68a3      	ldr	r3, [r4, #8]
 80125ac:	3b01      	subs	r3, #1
 80125ae:	60a3      	str	r3, [r4, #8]
 80125b0:	6823      	ldr	r3, [r4, #0]
 80125b2:	1c5a      	adds	r2, r3, #1
 80125b4:	6022      	str	r2, [r4, #0]
 80125b6:	701e      	strb	r6, [r3, #0]
 80125b8:	6962      	ldr	r2, [r4, #20]
 80125ba:	1c43      	adds	r3, r0, #1
 80125bc:	429a      	cmp	r2, r3
 80125be:	d004      	beq.n	80125ca <__swbuf_r+0x6e>
 80125c0:	89a3      	ldrh	r3, [r4, #12]
 80125c2:	07db      	lsls	r3, r3, #31
 80125c4:	d5e1      	bpl.n	801258a <__swbuf_r+0x2e>
 80125c6:	2e0a      	cmp	r6, #10
 80125c8:	d1df      	bne.n	801258a <__swbuf_r+0x2e>
 80125ca:	4621      	mov	r1, r4
 80125cc:	4628      	mov	r0, r5
 80125ce:	f7ff ff8b 	bl	80124e8 <_fflush_r>
 80125d2:	2800      	cmp	r0, #0
 80125d4:	d0d9      	beq.n	801258a <__swbuf_r+0x2e>
 80125d6:	e7d6      	b.n	8012586 <__swbuf_r+0x2a>

080125d8 <__swsetup_r>:
 80125d8:	b538      	push	{r3, r4, r5, lr}
 80125da:	4b29      	ldr	r3, [pc, #164]	@ (8012680 <__swsetup_r+0xa8>)
 80125dc:	4605      	mov	r5, r0
 80125de:	6818      	ldr	r0, [r3, #0]
 80125e0:	460c      	mov	r4, r1
 80125e2:	b118      	cbz	r0, 80125ec <__swsetup_r+0x14>
 80125e4:	6a03      	ldr	r3, [r0, #32]
 80125e6:	b90b      	cbnz	r3, 80125ec <__swsetup_r+0x14>
 80125e8:	f7fd fab8 	bl	800fb5c <__sinit>
 80125ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80125f0:	0719      	lsls	r1, r3, #28
 80125f2:	d422      	bmi.n	801263a <__swsetup_r+0x62>
 80125f4:	06da      	lsls	r2, r3, #27
 80125f6:	d407      	bmi.n	8012608 <__swsetup_r+0x30>
 80125f8:	2209      	movs	r2, #9
 80125fa:	602a      	str	r2, [r5, #0]
 80125fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012600:	81a3      	strh	r3, [r4, #12]
 8012602:	f04f 30ff 	mov.w	r0, #4294967295
 8012606:	e033      	b.n	8012670 <__swsetup_r+0x98>
 8012608:	0758      	lsls	r0, r3, #29
 801260a:	d512      	bpl.n	8012632 <__swsetup_r+0x5a>
 801260c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801260e:	b141      	cbz	r1, 8012622 <__swsetup_r+0x4a>
 8012610:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012614:	4299      	cmp	r1, r3
 8012616:	d002      	beq.n	801261e <__swsetup_r+0x46>
 8012618:	4628      	mov	r0, r5
 801261a:	f7fe fac1 	bl	8010ba0 <_free_r>
 801261e:	2300      	movs	r3, #0
 8012620:	6363      	str	r3, [r4, #52]	@ 0x34
 8012622:	89a3      	ldrh	r3, [r4, #12]
 8012624:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012628:	81a3      	strh	r3, [r4, #12]
 801262a:	2300      	movs	r3, #0
 801262c:	6063      	str	r3, [r4, #4]
 801262e:	6923      	ldr	r3, [r4, #16]
 8012630:	6023      	str	r3, [r4, #0]
 8012632:	89a3      	ldrh	r3, [r4, #12]
 8012634:	f043 0308 	orr.w	r3, r3, #8
 8012638:	81a3      	strh	r3, [r4, #12]
 801263a:	6923      	ldr	r3, [r4, #16]
 801263c:	b94b      	cbnz	r3, 8012652 <__swsetup_r+0x7a>
 801263e:	89a3      	ldrh	r3, [r4, #12]
 8012640:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012644:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012648:	d003      	beq.n	8012652 <__swsetup_r+0x7a>
 801264a:	4621      	mov	r1, r4
 801264c:	4628      	mov	r0, r5
 801264e:	f000 f8b2 	bl	80127b6 <__smakebuf_r>
 8012652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012656:	f013 0201 	ands.w	r2, r3, #1
 801265a:	d00a      	beq.n	8012672 <__swsetup_r+0x9a>
 801265c:	2200      	movs	r2, #0
 801265e:	60a2      	str	r2, [r4, #8]
 8012660:	6962      	ldr	r2, [r4, #20]
 8012662:	4252      	negs	r2, r2
 8012664:	61a2      	str	r2, [r4, #24]
 8012666:	6922      	ldr	r2, [r4, #16]
 8012668:	b942      	cbnz	r2, 801267c <__swsetup_r+0xa4>
 801266a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801266e:	d1c5      	bne.n	80125fc <__swsetup_r+0x24>
 8012670:	bd38      	pop	{r3, r4, r5, pc}
 8012672:	0799      	lsls	r1, r3, #30
 8012674:	bf58      	it	pl
 8012676:	6962      	ldrpl	r2, [r4, #20]
 8012678:	60a2      	str	r2, [r4, #8]
 801267a:	e7f4      	b.n	8012666 <__swsetup_r+0x8e>
 801267c:	2000      	movs	r0, #0
 801267e:	e7f7      	b.n	8012670 <__swsetup_r+0x98>
 8012680:	20000198 	.word	0x20000198

08012684 <memmove>:
 8012684:	4288      	cmp	r0, r1
 8012686:	b510      	push	{r4, lr}
 8012688:	eb01 0402 	add.w	r4, r1, r2
 801268c:	d902      	bls.n	8012694 <memmove+0x10>
 801268e:	4284      	cmp	r4, r0
 8012690:	4623      	mov	r3, r4
 8012692:	d807      	bhi.n	80126a4 <memmove+0x20>
 8012694:	1e43      	subs	r3, r0, #1
 8012696:	42a1      	cmp	r1, r4
 8012698:	d008      	beq.n	80126ac <memmove+0x28>
 801269a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801269e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80126a2:	e7f8      	b.n	8012696 <memmove+0x12>
 80126a4:	4402      	add	r2, r0
 80126a6:	4601      	mov	r1, r0
 80126a8:	428a      	cmp	r2, r1
 80126aa:	d100      	bne.n	80126ae <memmove+0x2a>
 80126ac:	bd10      	pop	{r4, pc}
 80126ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80126b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80126b6:	e7f7      	b.n	80126a8 <memmove+0x24>

080126b8 <_sbrk_r>:
 80126b8:	b538      	push	{r3, r4, r5, lr}
 80126ba:	4d06      	ldr	r5, [pc, #24]	@ (80126d4 <_sbrk_r+0x1c>)
 80126bc:	2300      	movs	r3, #0
 80126be:	4604      	mov	r4, r0
 80126c0:	4608      	mov	r0, r1
 80126c2:	602b      	str	r3, [r5, #0]
 80126c4:	f7f7 fba4 	bl	8009e10 <_sbrk>
 80126c8:	1c43      	adds	r3, r0, #1
 80126ca:	d102      	bne.n	80126d2 <_sbrk_r+0x1a>
 80126cc:	682b      	ldr	r3, [r5, #0]
 80126ce:	b103      	cbz	r3, 80126d2 <_sbrk_r+0x1a>
 80126d0:	6023      	str	r3, [r4, #0]
 80126d2:	bd38      	pop	{r3, r4, r5, pc}
 80126d4:	20006cd0 	.word	0x20006cd0

080126d8 <abort>:
 80126d8:	b508      	push	{r3, lr}
 80126da:	2006      	movs	r0, #6
 80126dc:	f000 f8d0 	bl	8012880 <raise>
 80126e0:	2001      	movs	r0, #1
 80126e2:	f7f7 fb1c 	bl	8009d1e <_exit>

080126e6 <_calloc_r>:
 80126e6:	b570      	push	{r4, r5, r6, lr}
 80126e8:	fba1 5402 	umull	r5, r4, r1, r2
 80126ec:	b93c      	cbnz	r4, 80126fe <_calloc_r+0x18>
 80126ee:	4629      	mov	r1, r5
 80126f0:	f7fe fe04 	bl	80112fc <_malloc_r>
 80126f4:	4606      	mov	r6, r0
 80126f6:	b928      	cbnz	r0, 8012704 <_calloc_r+0x1e>
 80126f8:	2600      	movs	r6, #0
 80126fa:	4630      	mov	r0, r6
 80126fc:	bd70      	pop	{r4, r5, r6, pc}
 80126fe:	220c      	movs	r2, #12
 8012700:	6002      	str	r2, [r0, #0]
 8012702:	e7f9      	b.n	80126f8 <_calloc_r+0x12>
 8012704:	462a      	mov	r2, r5
 8012706:	4621      	mov	r1, r4
 8012708:	f7fd fad3 	bl	800fcb2 <memset>
 801270c:	e7f5      	b.n	80126fa <_calloc_r+0x14>

0801270e <_realloc_r>:
 801270e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012712:	4680      	mov	r8, r0
 8012714:	4615      	mov	r5, r2
 8012716:	460c      	mov	r4, r1
 8012718:	b921      	cbnz	r1, 8012724 <_realloc_r+0x16>
 801271a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801271e:	4611      	mov	r1, r2
 8012720:	f7fe bdec 	b.w	80112fc <_malloc_r>
 8012724:	b92a      	cbnz	r2, 8012732 <_realloc_r+0x24>
 8012726:	f7fe fa3b 	bl	8010ba0 <_free_r>
 801272a:	2400      	movs	r4, #0
 801272c:	4620      	mov	r0, r4
 801272e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012732:	f000 f8e3 	bl	80128fc <_malloc_usable_size_r>
 8012736:	4285      	cmp	r5, r0
 8012738:	4606      	mov	r6, r0
 801273a:	d802      	bhi.n	8012742 <_realloc_r+0x34>
 801273c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012740:	d8f4      	bhi.n	801272c <_realloc_r+0x1e>
 8012742:	4629      	mov	r1, r5
 8012744:	4640      	mov	r0, r8
 8012746:	f7fe fdd9 	bl	80112fc <_malloc_r>
 801274a:	4607      	mov	r7, r0
 801274c:	2800      	cmp	r0, #0
 801274e:	d0ec      	beq.n	801272a <_realloc_r+0x1c>
 8012750:	42b5      	cmp	r5, r6
 8012752:	462a      	mov	r2, r5
 8012754:	4621      	mov	r1, r4
 8012756:	bf28      	it	cs
 8012758:	4632      	movcs	r2, r6
 801275a:	f7fd fb98 	bl	800fe8e <memcpy>
 801275e:	4621      	mov	r1, r4
 8012760:	4640      	mov	r0, r8
 8012762:	f7fe fa1d 	bl	8010ba0 <_free_r>
 8012766:	463c      	mov	r4, r7
 8012768:	e7e0      	b.n	801272c <_realloc_r+0x1e>

0801276a <__swhatbuf_r>:
 801276a:	b570      	push	{r4, r5, r6, lr}
 801276c:	460c      	mov	r4, r1
 801276e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012772:	2900      	cmp	r1, #0
 8012774:	b096      	sub	sp, #88	@ 0x58
 8012776:	4615      	mov	r5, r2
 8012778:	461e      	mov	r6, r3
 801277a:	da0d      	bge.n	8012798 <__swhatbuf_r+0x2e>
 801277c:	89a3      	ldrh	r3, [r4, #12]
 801277e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012782:	f04f 0100 	mov.w	r1, #0
 8012786:	bf14      	ite	ne
 8012788:	2340      	movne	r3, #64	@ 0x40
 801278a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801278e:	2000      	movs	r0, #0
 8012790:	6031      	str	r1, [r6, #0]
 8012792:	602b      	str	r3, [r5, #0]
 8012794:	b016      	add	sp, #88	@ 0x58
 8012796:	bd70      	pop	{r4, r5, r6, pc}
 8012798:	466a      	mov	r2, sp
 801279a:	f000 f879 	bl	8012890 <_fstat_r>
 801279e:	2800      	cmp	r0, #0
 80127a0:	dbec      	blt.n	801277c <__swhatbuf_r+0x12>
 80127a2:	9901      	ldr	r1, [sp, #4]
 80127a4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80127a8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80127ac:	4259      	negs	r1, r3
 80127ae:	4159      	adcs	r1, r3
 80127b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80127b4:	e7eb      	b.n	801278e <__swhatbuf_r+0x24>

080127b6 <__smakebuf_r>:
 80127b6:	898b      	ldrh	r3, [r1, #12]
 80127b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80127ba:	079d      	lsls	r5, r3, #30
 80127bc:	4606      	mov	r6, r0
 80127be:	460c      	mov	r4, r1
 80127c0:	d507      	bpl.n	80127d2 <__smakebuf_r+0x1c>
 80127c2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80127c6:	6023      	str	r3, [r4, #0]
 80127c8:	6123      	str	r3, [r4, #16]
 80127ca:	2301      	movs	r3, #1
 80127cc:	6163      	str	r3, [r4, #20]
 80127ce:	b003      	add	sp, #12
 80127d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80127d2:	ab01      	add	r3, sp, #4
 80127d4:	466a      	mov	r2, sp
 80127d6:	f7ff ffc8 	bl	801276a <__swhatbuf_r>
 80127da:	9f00      	ldr	r7, [sp, #0]
 80127dc:	4605      	mov	r5, r0
 80127de:	4639      	mov	r1, r7
 80127e0:	4630      	mov	r0, r6
 80127e2:	f7fe fd8b 	bl	80112fc <_malloc_r>
 80127e6:	b948      	cbnz	r0, 80127fc <__smakebuf_r+0x46>
 80127e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127ec:	059a      	lsls	r2, r3, #22
 80127ee:	d4ee      	bmi.n	80127ce <__smakebuf_r+0x18>
 80127f0:	f023 0303 	bic.w	r3, r3, #3
 80127f4:	f043 0302 	orr.w	r3, r3, #2
 80127f8:	81a3      	strh	r3, [r4, #12]
 80127fa:	e7e2      	b.n	80127c2 <__smakebuf_r+0xc>
 80127fc:	89a3      	ldrh	r3, [r4, #12]
 80127fe:	6020      	str	r0, [r4, #0]
 8012800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012804:	81a3      	strh	r3, [r4, #12]
 8012806:	9b01      	ldr	r3, [sp, #4]
 8012808:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801280c:	b15b      	cbz	r3, 8012826 <__smakebuf_r+0x70>
 801280e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012812:	4630      	mov	r0, r6
 8012814:	f000 f84e 	bl	80128b4 <_isatty_r>
 8012818:	b128      	cbz	r0, 8012826 <__smakebuf_r+0x70>
 801281a:	89a3      	ldrh	r3, [r4, #12]
 801281c:	f023 0303 	bic.w	r3, r3, #3
 8012820:	f043 0301 	orr.w	r3, r3, #1
 8012824:	81a3      	strh	r3, [r4, #12]
 8012826:	89a3      	ldrh	r3, [r4, #12]
 8012828:	431d      	orrs	r5, r3
 801282a:	81a5      	strh	r5, [r4, #12]
 801282c:	e7cf      	b.n	80127ce <__smakebuf_r+0x18>

0801282e <_raise_r>:
 801282e:	291f      	cmp	r1, #31
 8012830:	b538      	push	{r3, r4, r5, lr}
 8012832:	4605      	mov	r5, r0
 8012834:	460c      	mov	r4, r1
 8012836:	d904      	bls.n	8012842 <_raise_r+0x14>
 8012838:	2316      	movs	r3, #22
 801283a:	6003      	str	r3, [r0, #0]
 801283c:	f04f 30ff 	mov.w	r0, #4294967295
 8012840:	bd38      	pop	{r3, r4, r5, pc}
 8012842:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012844:	b112      	cbz	r2, 801284c <_raise_r+0x1e>
 8012846:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801284a:	b94b      	cbnz	r3, 8012860 <_raise_r+0x32>
 801284c:	4628      	mov	r0, r5
 801284e:	f000 f853 	bl	80128f8 <_getpid_r>
 8012852:	4622      	mov	r2, r4
 8012854:	4601      	mov	r1, r0
 8012856:	4628      	mov	r0, r5
 8012858:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801285c:	f000 b83a 	b.w	80128d4 <_kill_r>
 8012860:	2b01      	cmp	r3, #1
 8012862:	d00a      	beq.n	801287a <_raise_r+0x4c>
 8012864:	1c59      	adds	r1, r3, #1
 8012866:	d103      	bne.n	8012870 <_raise_r+0x42>
 8012868:	2316      	movs	r3, #22
 801286a:	6003      	str	r3, [r0, #0]
 801286c:	2001      	movs	r0, #1
 801286e:	e7e7      	b.n	8012840 <_raise_r+0x12>
 8012870:	2100      	movs	r1, #0
 8012872:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012876:	4620      	mov	r0, r4
 8012878:	4798      	blx	r3
 801287a:	2000      	movs	r0, #0
 801287c:	e7e0      	b.n	8012840 <_raise_r+0x12>
	...

08012880 <raise>:
 8012880:	4b02      	ldr	r3, [pc, #8]	@ (801288c <raise+0xc>)
 8012882:	4601      	mov	r1, r0
 8012884:	6818      	ldr	r0, [r3, #0]
 8012886:	f7ff bfd2 	b.w	801282e <_raise_r>
 801288a:	bf00      	nop
 801288c:	20000198 	.word	0x20000198

08012890 <_fstat_r>:
 8012890:	b538      	push	{r3, r4, r5, lr}
 8012892:	4d07      	ldr	r5, [pc, #28]	@ (80128b0 <_fstat_r+0x20>)
 8012894:	2300      	movs	r3, #0
 8012896:	4604      	mov	r4, r0
 8012898:	4608      	mov	r0, r1
 801289a:	4611      	mov	r1, r2
 801289c:	602b      	str	r3, [r5, #0]
 801289e:	f7f7 fa8e 	bl	8009dbe <_fstat>
 80128a2:	1c43      	adds	r3, r0, #1
 80128a4:	d102      	bne.n	80128ac <_fstat_r+0x1c>
 80128a6:	682b      	ldr	r3, [r5, #0]
 80128a8:	b103      	cbz	r3, 80128ac <_fstat_r+0x1c>
 80128aa:	6023      	str	r3, [r4, #0]
 80128ac:	bd38      	pop	{r3, r4, r5, pc}
 80128ae:	bf00      	nop
 80128b0:	20006cd0 	.word	0x20006cd0

080128b4 <_isatty_r>:
 80128b4:	b538      	push	{r3, r4, r5, lr}
 80128b6:	4d06      	ldr	r5, [pc, #24]	@ (80128d0 <_isatty_r+0x1c>)
 80128b8:	2300      	movs	r3, #0
 80128ba:	4604      	mov	r4, r0
 80128bc:	4608      	mov	r0, r1
 80128be:	602b      	str	r3, [r5, #0]
 80128c0:	f7f7 fa8d 	bl	8009dde <_isatty>
 80128c4:	1c43      	adds	r3, r0, #1
 80128c6:	d102      	bne.n	80128ce <_isatty_r+0x1a>
 80128c8:	682b      	ldr	r3, [r5, #0]
 80128ca:	b103      	cbz	r3, 80128ce <_isatty_r+0x1a>
 80128cc:	6023      	str	r3, [r4, #0]
 80128ce:	bd38      	pop	{r3, r4, r5, pc}
 80128d0:	20006cd0 	.word	0x20006cd0

080128d4 <_kill_r>:
 80128d4:	b538      	push	{r3, r4, r5, lr}
 80128d6:	4d07      	ldr	r5, [pc, #28]	@ (80128f4 <_kill_r+0x20>)
 80128d8:	2300      	movs	r3, #0
 80128da:	4604      	mov	r4, r0
 80128dc:	4608      	mov	r0, r1
 80128de:	4611      	mov	r1, r2
 80128e0:	602b      	str	r3, [r5, #0]
 80128e2:	f7f7 fa0c 	bl	8009cfe <_kill>
 80128e6:	1c43      	adds	r3, r0, #1
 80128e8:	d102      	bne.n	80128f0 <_kill_r+0x1c>
 80128ea:	682b      	ldr	r3, [r5, #0]
 80128ec:	b103      	cbz	r3, 80128f0 <_kill_r+0x1c>
 80128ee:	6023      	str	r3, [r4, #0]
 80128f0:	bd38      	pop	{r3, r4, r5, pc}
 80128f2:	bf00      	nop
 80128f4:	20006cd0 	.word	0x20006cd0

080128f8 <_getpid_r>:
 80128f8:	f7f7 b9f9 	b.w	8009cee <_getpid>

080128fc <_malloc_usable_size_r>:
 80128fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012900:	1f18      	subs	r0, r3, #4
 8012902:	2b00      	cmp	r3, #0
 8012904:	bfbc      	itt	lt
 8012906:	580b      	ldrlt	r3, [r1, r0]
 8012908:	18c0      	addlt	r0, r0, r3
 801290a:	4770      	bx	lr

0801290c <sqrt>:
 801290c:	b538      	push	{r3, r4, r5, lr}
 801290e:	ed2d 8b02 	vpush	{d8}
 8012912:	ec55 4b10 	vmov	r4, r5, d0
 8012916:	f000 fa6f 	bl	8012df8 <__ieee754_sqrt>
 801291a:	4622      	mov	r2, r4
 801291c:	462b      	mov	r3, r5
 801291e:	4620      	mov	r0, r4
 8012920:	4629      	mov	r1, r5
 8012922:	eeb0 8a40 	vmov.f32	s16, s0
 8012926:	eef0 8a60 	vmov.f32	s17, s1
 801292a:	f7ee f91f 	bl	8000b6c <__aeabi_dcmpun>
 801292e:	b990      	cbnz	r0, 8012956 <sqrt+0x4a>
 8012930:	2200      	movs	r2, #0
 8012932:	2300      	movs	r3, #0
 8012934:	4620      	mov	r0, r4
 8012936:	4629      	mov	r1, r5
 8012938:	f7ee f8f0 	bl	8000b1c <__aeabi_dcmplt>
 801293c:	b158      	cbz	r0, 8012956 <sqrt+0x4a>
 801293e:	f7fd fa79 	bl	800fe34 <__errno>
 8012942:	2321      	movs	r3, #33	@ 0x21
 8012944:	6003      	str	r3, [r0, #0]
 8012946:	2200      	movs	r2, #0
 8012948:	2300      	movs	r3, #0
 801294a:	4610      	mov	r0, r2
 801294c:	4619      	mov	r1, r3
 801294e:	f7ed ff9d 	bl	800088c <__aeabi_ddiv>
 8012952:	ec41 0b18 	vmov	d8, r0, r1
 8012956:	eeb0 0a48 	vmov.f32	s0, s16
 801295a:	eef0 0a68 	vmov.f32	s1, s17
 801295e:	ecbd 8b02 	vpop	{d8}
 8012962:	bd38      	pop	{r3, r4, r5, pc}
 8012964:	0000      	movs	r0, r0
	...

08012968 <atan>:
 8012968:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801296c:	ec55 4b10 	vmov	r4, r5, d0
 8012970:	4bbf      	ldr	r3, [pc, #764]	@ (8012c70 <atan+0x308>)
 8012972:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8012976:	429e      	cmp	r6, r3
 8012978:	46ab      	mov	fp, r5
 801297a:	d918      	bls.n	80129ae <atan+0x46>
 801297c:	4bbd      	ldr	r3, [pc, #756]	@ (8012c74 <atan+0x30c>)
 801297e:	429e      	cmp	r6, r3
 8012980:	d801      	bhi.n	8012986 <atan+0x1e>
 8012982:	d109      	bne.n	8012998 <atan+0x30>
 8012984:	b144      	cbz	r4, 8012998 <atan+0x30>
 8012986:	4622      	mov	r2, r4
 8012988:	462b      	mov	r3, r5
 801298a:	4620      	mov	r0, r4
 801298c:	4629      	mov	r1, r5
 801298e:	f7ed fc9d 	bl	80002cc <__adddf3>
 8012992:	4604      	mov	r4, r0
 8012994:	460d      	mov	r5, r1
 8012996:	e006      	b.n	80129a6 <atan+0x3e>
 8012998:	f1bb 0f00 	cmp.w	fp, #0
 801299c:	f340 812b 	ble.w	8012bf6 <atan+0x28e>
 80129a0:	a597      	add	r5, pc, #604	@ (adr r5, 8012c00 <atan+0x298>)
 80129a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80129a6:	ec45 4b10 	vmov	d0, r4, r5
 80129aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129ae:	4bb2      	ldr	r3, [pc, #712]	@ (8012c78 <atan+0x310>)
 80129b0:	429e      	cmp	r6, r3
 80129b2:	d813      	bhi.n	80129dc <atan+0x74>
 80129b4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80129b8:	429e      	cmp	r6, r3
 80129ba:	d80c      	bhi.n	80129d6 <atan+0x6e>
 80129bc:	a392      	add	r3, pc, #584	@ (adr r3, 8012c08 <atan+0x2a0>)
 80129be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129c2:	4620      	mov	r0, r4
 80129c4:	4629      	mov	r1, r5
 80129c6:	f7ed fc81 	bl	80002cc <__adddf3>
 80129ca:	4bac      	ldr	r3, [pc, #688]	@ (8012c7c <atan+0x314>)
 80129cc:	2200      	movs	r2, #0
 80129ce:	f7ee f8c3 	bl	8000b58 <__aeabi_dcmpgt>
 80129d2:	2800      	cmp	r0, #0
 80129d4:	d1e7      	bne.n	80129a6 <atan+0x3e>
 80129d6:	f04f 3aff 	mov.w	sl, #4294967295
 80129da:	e029      	b.n	8012a30 <atan+0xc8>
 80129dc:	f000 f9b0 	bl	8012d40 <fabs>
 80129e0:	4ba7      	ldr	r3, [pc, #668]	@ (8012c80 <atan+0x318>)
 80129e2:	429e      	cmp	r6, r3
 80129e4:	ec55 4b10 	vmov	r4, r5, d0
 80129e8:	f200 80bc 	bhi.w	8012b64 <atan+0x1fc>
 80129ec:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80129f0:	429e      	cmp	r6, r3
 80129f2:	f200 809e 	bhi.w	8012b32 <atan+0x1ca>
 80129f6:	4622      	mov	r2, r4
 80129f8:	462b      	mov	r3, r5
 80129fa:	4620      	mov	r0, r4
 80129fc:	4629      	mov	r1, r5
 80129fe:	f7ed fc65 	bl	80002cc <__adddf3>
 8012a02:	4b9e      	ldr	r3, [pc, #632]	@ (8012c7c <atan+0x314>)
 8012a04:	2200      	movs	r2, #0
 8012a06:	f7ed fc5f 	bl	80002c8 <__aeabi_dsub>
 8012a0a:	2200      	movs	r2, #0
 8012a0c:	4606      	mov	r6, r0
 8012a0e:	460f      	mov	r7, r1
 8012a10:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012a14:	4620      	mov	r0, r4
 8012a16:	4629      	mov	r1, r5
 8012a18:	f7ed fc58 	bl	80002cc <__adddf3>
 8012a1c:	4602      	mov	r2, r0
 8012a1e:	460b      	mov	r3, r1
 8012a20:	4630      	mov	r0, r6
 8012a22:	4639      	mov	r1, r7
 8012a24:	f7ed ff32 	bl	800088c <__aeabi_ddiv>
 8012a28:	f04f 0a00 	mov.w	sl, #0
 8012a2c:	4604      	mov	r4, r0
 8012a2e:	460d      	mov	r5, r1
 8012a30:	4622      	mov	r2, r4
 8012a32:	462b      	mov	r3, r5
 8012a34:	4620      	mov	r0, r4
 8012a36:	4629      	mov	r1, r5
 8012a38:	f7ed fdfe 	bl	8000638 <__aeabi_dmul>
 8012a3c:	4602      	mov	r2, r0
 8012a3e:	460b      	mov	r3, r1
 8012a40:	4680      	mov	r8, r0
 8012a42:	4689      	mov	r9, r1
 8012a44:	f7ed fdf8 	bl	8000638 <__aeabi_dmul>
 8012a48:	a371      	add	r3, pc, #452	@ (adr r3, 8012c10 <atan+0x2a8>)
 8012a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a4e:	4606      	mov	r6, r0
 8012a50:	460f      	mov	r7, r1
 8012a52:	f7ed fdf1 	bl	8000638 <__aeabi_dmul>
 8012a56:	a370      	add	r3, pc, #448	@ (adr r3, 8012c18 <atan+0x2b0>)
 8012a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a5c:	f7ed fc36 	bl	80002cc <__adddf3>
 8012a60:	4632      	mov	r2, r6
 8012a62:	463b      	mov	r3, r7
 8012a64:	f7ed fde8 	bl	8000638 <__aeabi_dmul>
 8012a68:	a36d      	add	r3, pc, #436	@ (adr r3, 8012c20 <atan+0x2b8>)
 8012a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a6e:	f7ed fc2d 	bl	80002cc <__adddf3>
 8012a72:	4632      	mov	r2, r6
 8012a74:	463b      	mov	r3, r7
 8012a76:	f7ed fddf 	bl	8000638 <__aeabi_dmul>
 8012a7a:	a36b      	add	r3, pc, #428	@ (adr r3, 8012c28 <atan+0x2c0>)
 8012a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a80:	f7ed fc24 	bl	80002cc <__adddf3>
 8012a84:	4632      	mov	r2, r6
 8012a86:	463b      	mov	r3, r7
 8012a88:	f7ed fdd6 	bl	8000638 <__aeabi_dmul>
 8012a8c:	a368      	add	r3, pc, #416	@ (adr r3, 8012c30 <atan+0x2c8>)
 8012a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a92:	f7ed fc1b 	bl	80002cc <__adddf3>
 8012a96:	4632      	mov	r2, r6
 8012a98:	463b      	mov	r3, r7
 8012a9a:	f7ed fdcd 	bl	8000638 <__aeabi_dmul>
 8012a9e:	a366      	add	r3, pc, #408	@ (adr r3, 8012c38 <atan+0x2d0>)
 8012aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aa4:	f7ed fc12 	bl	80002cc <__adddf3>
 8012aa8:	4642      	mov	r2, r8
 8012aaa:	464b      	mov	r3, r9
 8012aac:	f7ed fdc4 	bl	8000638 <__aeabi_dmul>
 8012ab0:	a363      	add	r3, pc, #396	@ (adr r3, 8012c40 <atan+0x2d8>)
 8012ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ab6:	4680      	mov	r8, r0
 8012ab8:	4689      	mov	r9, r1
 8012aba:	4630      	mov	r0, r6
 8012abc:	4639      	mov	r1, r7
 8012abe:	f7ed fdbb 	bl	8000638 <__aeabi_dmul>
 8012ac2:	a361      	add	r3, pc, #388	@ (adr r3, 8012c48 <atan+0x2e0>)
 8012ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ac8:	f7ed fbfe 	bl	80002c8 <__aeabi_dsub>
 8012acc:	4632      	mov	r2, r6
 8012ace:	463b      	mov	r3, r7
 8012ad0:	f7ed fdb2 	bl	8000638 <__aeabi_dmul>
 8012ad4:	a35e      	add	r3, pc, #376	@ (adr r3, 8012c50 <atan+0x2e8>)
 8012ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ada:	f7ed fbf5 	bl	80002c8 <__aeabi_dsub>
 8012ade:	4632      	mov	r2, r6
 8012ae0:	463b      	mov	r3, r7
 8012ae2:	f7ed fda9 	bl	8000638 <__aeabi_dmul>
 8012ae6:	a35c      	add	r3, pc, #368	@ (adr r3, 8012c58 <atan+0x2f0>)
 8012ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aec:	f7ed fbec 	bl	80002c8 <__aeabi_dsub>
 8012af0:	4632      	mov	r2, r6
 8012af2:	463b      	mov	r3, r7
 8012af4:	f7ed fda0 	bl	8000638 <__aeabi_dmul>
 8012af8:	a359      	add	r3, pc, #356	@ (adr r3, 8012c60 <atan+0x2f8>)
 8012afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012afe:	f7ed fbe3 	bl	80002c8 <__aeabi_dsub>
 8012b02:	4632      	mov	r2, r6
 8012b04:	463b      	mov	r3, r7
 8012b06:	f7ed fd97 	bl	8000638 <__aeabi_dmul>
 8012b0a:	4602      	mov	r2, r0
 8012b0c:	460b      	mov	r3, r1
 8012b0e:	4640      	mov	r0, r8
 8012b10:	4649      	mov	r1, r9
 8012b12:	f7ed fbdb 	bl	80002cc <__adddf3>
 8012b16:	4622      	mov	r2, r4
 8012b18:	462b      	mov	r3, r5
 8012b1a:	f7ed fd8d 	bl	8000638 <__aeabi_dmul>
 8012b1e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8012b22:	4602      	mov	r2, r0
 8012b24:	460b      	mov	r3, r1
 8012b26:	d148      	bne.n	8012bba <atan+0x252>
 8012b28:	4620      	mov	r0, r4
 8012b2a:	4629      	mov	r1, r5
 8012b2c:	f7ed fbcc 	bl	80002c8 <__aeabi_dsub>
 8012b30:	e72f      	b.n	8012992 <atan+0x2a>
 8012b32:	4b52      	ldr	r3, [pc, #328]	@ (8012c7c <atan+0x314>)
 8012b34:	2200      	movs	r2, #0
 8012b36:	4620      	mov	r0, r4
 8012b38:	4629      	mov	r1, r5
 8012b3a:	f7ed fbc5 	bl	80002c8 <__aeabi_dsub>
 8012b3e:	4b4f      	ldr	r3, [pc, #316]	@ (8012c7c <atan+0x314>)
 8012b40:	4606      	mov	r6, r0
 8012b42:	460f      	mov	r7, r1
 8012b44:	2200      	movs	r2, #0
 8012b46:	4620      	mov	r0, r4
 8012b48:	4629      	mov	r1, r5
 8012b4a:	f7ed fbbf 	bl	80002cc <__adddf3>
 8012b4e:	4602      	mov	r2, r0
 8012b50:	460b      	mov	r3, r1
 8012b52:	4630      	mov	r0, r6
 8012b54:	4639      	mov	r1, r7
 8012b56:	f7ed fe99 	bl	800088c <__aeabi_ddiv>
 8012b5a:	f04f 0a01 	mov.w	sl, #1
 8012b5e:	4604      	mov	r4, r0
 8012b60:	460d      	mov	r5, r1
 8012b62:	e765      	b.n	8012a30 <atan+0xc8>
 8012b64:	4b47      	ldr	r3, [pc, #284]	@ (8012c84 <atan+0x31c>)
 8012b66:	429e      	cmp	r6, r3
 8012b68:	d21c      	bcs.n	8012ba4 <atan+0x23c>
 8012b6a:	4b47      	ldr	r3, [pc, #284]	@ (8012c88 <atan+0x320>)
 8012b6c:	2200      	movs	r2, #0
 8012b6e:	4620      	mov	r0, r4
 8012b70:	4629      	mov	r1, r5
 8012b72:	f7ed fba9 	bl	80002c8 <__aeabi_dsub>
 8012b76:	4b44      	ldr	r3, [pc, #272]	@ (8012c88 <atan+0x320>)
 8012b78:	4606      	mov	r6, r0
 8012b7a:	460f      	mov	r7, r1
 8012b7c:	2200      	movs	r2, #0
 8012b7e:	4620      	mov	r0, r4
 8012b80:	4629      	mov	r1, r5
 8012b82:	f7ed fd59 	bl	8000638 <__aeabi_dmul>
 8012b86:	4b3d      	ldr	r3, [pc, #244]	@ (8012c7c <atan+0x314>)
 8012b88:	2200      	movs	r2, #0
 8012b8a:	f7ed fb9f 	bl	80002cc <__adddf3>
 8012b8e:	4602      	mov	r2, r0
 8012b90:	460b      	mov	r3, r1
 8012b92:	4630      	mov	r0, r6
 8012b94:	4639      	mov	r1, r7
 8012b96:	f7ed fe79 	bl	800088c <__aeabi_ddiv>
 8012b9a:	f04f 0a02 	mov.w	sl, #2
 8012b9e:	4604      	mov	r4, r0
 8012ba0:	460d      	mov	r5, r1
 8012ba2:	e745      	b.n	8012a30 <atan+0xc8>
 8012ba4:	4622      	mov	r2, r4
 8012ba6:	462b      	mov	r3, r5
 8012ba8:	4938      	ldr	r1, [pc, #224]	@ (8012c8c <atan+0x324>)
 8012baa:	2000      	movs	r0, #0
 8012bac:	f7ed fe6e 	bl	800088c <__aeabi_ddiv>
 8012bb0:	f04f 0a03 	mov.w	sl, #3
 8012bb4:	4604      	mov	r4, r0
 8012bb6:	460d      	mov	r5, r1
 8012bb8:	e73a      	b.n	8012a30 <atan+0xc8>
 8012bba:	4b35      	ldr	r3, [pc, #212]	@ (8012c90 <atan+0x328>)
 8012bbc:	4e35      	ldr	r6, [pc, #212]	@ (8012c94 <atan+0x32c>)
 8012bbe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bc6:	f7ed fb7f 	bl	80002c8 <__aeabi_dsub>
 8012bca:	4622      	mov	r2, r4
 8012bcc:	462b      	mov	r3, r5
 8012bce:	f7ed fb7b 	bl	80002c8 <__aeabi_dsub>
 8012bd2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8012bd6:	4602      	mov	r2, r0
 8012bd8:	460b      	mov	r3, r1
 8012bda:	e9d6 0100 	ldrd	r0, r1, [r6]
 8012bde:	f7ed fb73 	bl	80002c8 <__aeabi_dsub>
 8012be2:	f1bb 0f00 	cmp.w	fp, #0
 8012be6:	4604      	mov	r4, r0
 8012be8:	460d      	mov	r5, r1
 8012bea:	f6bf aedc 	bge.w	80129a6 <atan+0x3e>
 8012bee:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012bf2:	461d      	mov	r5, r3
 8012bf4:	e6d7      	b.n	80129a6 <atan+0x3e>
 8012bf6:	a51c      	add	r5, pc, #112	@ (adr r5, 8012c68 <atan+0x300>)
 8012bf8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012bfc:	e6d3      	b.n	80129a6 <atan+0x3e>
 8012bfe:	bf00      	nop
 8012c00:	54442d18 	.word	0x54442d18
 8012c04:	3ff921fb 	.word	0x3ff921fb
 8012c08:	8800759c 	.word	0x8800759c
 8012c0c:	7e37e43c 	.word	0x7e37e43c
 8012c10:	e322da11 	.word	0xe322da11
 8012c14:	3f90ad3a 	.word	0x3f90ad3a
 8012c18:	24760deb 	.word	0x24760deb
 8012c1c:	3fa97b4b 	.word	0x3fa97b4b
 8012c20:	a0d03d51 	.word	0xa0d03d51
 8012c24:	3fb10d66 	.word	0x3fb10d66
 8012c28:	c54c206e 	.word	0xc54c206e
 8012c2c:	3fb745cd 	.word	0x3fb745cd
 8012c30:	920083ff 	.word	0x920083ff
 8012c34:	3fc24924 	.word	0x3fc24924
 8012c38:	5555550d 	.word	0x5555550d
 8012c3c:	3fd55555 	.word	0x3fd55555
 8012c40:	2c6a6c2f 	.word	0x2c6a6c2f
 8012c44:	bfa2b444 	.word	0xbfa2b444
 8012c48:	52defd9a 	.word	0x52defd9a
 8012c4c:	3fadde2d 	.word	0x3fadde2d
 8012c50:	af749a6d 	.word	0xaf749a6d
 8012c54:	3fb3b0f2 	.word	0x3fb3b0f2
 8012c58:	fe231671 	.word	0xfe231671
 8012c5c:	3fbc71c6 	.word	0x3fbc71c6
 8012c60:	9998ebc4 	.word	0x9998ebc4
 8012c64:	3fc99999 	.word	0x3fc99999
 8012c68:	54442d18 	.word	0x54442d18
 8012c6c:	bff921fb 	.word	0xbff921fb
 8012c70:	440fffff 	.word	0x440fffff
 8012c74:	7ff00000 	.word	0x7ff00000
 8012c78:	3fdbffff 	.word	0x3fdbffff
 8012c7c:	3ff00000 	.word	0x3ff00000
 8012c80:	3ff2ffff 	.word	0x3ff2ffff
 8012c84:	40038000 	.word	0x40038000
 8012c88:	3ff80000 	.word	0x3ff80000
 8012c8c:	bff00000 	.word	0xbff00000
 8012c90:	08014590 	.word	0x08014590
 8012c94:	080145b0 	.word	0x080145b0

08012c98 <cos>:
 8012c98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012c9a:	ec53 2b10 	vmov	r2, r3, d0
 8012c9e:	4826      	ldr	r0, [pc, #152]	@ (8012d38 <cos+0xa0>)
 8012ca0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012ca4:	4281      	cmp	r1, r0
 8012ca6:	d806      	bhi.n	8012cb6 <cos+0x1e>
 8012ca8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8012d30 <cos+0x98>
 8012cac:	b005      	add	sp, #20
 8012cae:	f85d eb04 	ldr.w	lr, [sp], #4
 8012cb2:	f000 b97d 	b.w	8012fb0 <__kernel_cos>
 8012cb6:	4821      	ldr	r0, [pc, #132]	@ (8012d3c <cos+0xa4>)
 8012cb8:	4281      	cmp	r1, r0
 8012cba:	d908      	bls.n	8012cce <cos+0x36>
 8012cbc:	4610      	mov	r0, r2
 8012cbe:	4619      	mov	r1, r3
 8012cc0:	f7ed fb02 	bl	80002c8 <__aeabi_dsub>
 8012cc4:	ec41 0b10 	vmov	d0, r0, r1
 8012cc8:	b005      	add	sp, #20
 8012cca:	f85d fb04 	ldr.w	pc, [sp], #4
 8012cce:	4668      	mov	r0, sp
 8012cd0:	f000 faf2 	bl	80132b8 <__ieee754_rem_pio2>
 8012cd4:	f000 0003 	and.w	r0, r0, #3
 8012cd8:	2801      	cmp	r0, #1
 8012cda:	d00b      	beq.n	8012cf4 <cos+0x5c>
 8012cdc:	2802      	cmp	r0, #2
 8012cde:	d015      	beq.n	8012d0c <cos+0x74>
 8012ce0:	b9d8      	cbnz	r0, 8012d1a <cos+0x82>
 8012ce2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012ce6:	ed9d 0b00 	vldr	d0, [sp]
 8012cea:	f000 f961 	bl	8012fb0 <__kernel_cos>
 8012cee:	ec51 0b10 	vmov	r0, r1, d0
 8012cf2:	e7e7      	b.n	8012cc4 <cos+0x2c>
 8012cf4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012cf8:	ed9d 0b00 	vldr	d0, [sp]
 8012cfc:	f000 fa20 	bl	8013140 <__kernel_sin>
 8012d00:	ec53 2b10 	vmov	r2, r3, d0
 8012d04:	4610      	mov	r0, r2
 8012d06:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012d0a:	e7db      	b.n	8012cc4 <cos+0x2c>
 8012d0c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012d10:	ed9d 0b00 	vldr	d0, [sp]
 8012d14:	f000 f94c 	bl	8012fb0 <__kernel_cos>
 8012d18:	e7f2      	b.n	8012d00 <cos+0x68>
 8012d1a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012d1e:	ed9d 0b00 	vldr	d0, [sp]
 8012d22:	2001      	movs	r0, #1
 8012d24:	f000 fa0c 	bl	8013140 <__kernel_sin>
 8012d28:	e7e1      	b.n	8012cee <cos+0x56>
 8012d2a:	bf00      	nop
 8012d2c:	f3af 8000 	nop.w
	...
 8012d38:	3fe921fb 	.word	0x3fe921fb
 8012d3c:	7fefffff 	.word	0x7fefffff

08012d40 <fabs>:
 8012d40:	ec51 0b10 	vmov	r0, r1, d0
 8012d44:	4602      	mov	r2, r0
 8012d46:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012d4a:	ec43 2b10 	vmov	d0, r2, r3
 8012d4e:	4770      	bx	lr

08012d50 <sin>:
 8012d50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012d52:	ec53 2b10 	vmov	r2, r3, d0
 8012d56:	4826      	ldr	r0, [pc, #152]	@ (8012df0 <sin+0xa0>)
 8012d58:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012d5c:	4281      	cmp	r1, r0
 8012d5e:	d807      	bhi.n	8012d70 <sin+0x20>
 8012d60:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8012de8 <sin+0x98>
 8012d64:	2000      	movs	r0, #0
 8012d66:	b005      	add	sp, #20
 8012d68:	f85d eb04 	ldr.w	lr, [sp], #4
 8012d6c:	f000 b9e8 	b.w	8013140 <__kernel_sin>
 8012d70:	4820      	ldr	r0, [pc, #128]	@ (8012df4 <sin+0xa4>)
 8012d72:	4281      	cmp	r1, r0
 8012d74:	d908      	bls.n	8012d88 <sin+0x38>
 8012d76:	4610      	mov	r0, r2
 8012d78:	4619      	mov	r1, r3
 8012d7a:	f7ed faa5 	bl	80002c8 <__aeabi_dsub>
 8012d7e:	ec41 0b10 	vmov	d0, r0, r1
 8012d82:	b005      	add	sp, #20
 8012d84:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d88:	4668      	mov	r0, sp
 8012d8a:	f000 fa95 	bl	80132b8 <__ieee754_rem_pio2>
 8012d8e:	f000 0003 	and.w	r0, r0, #3
 8012d92:	2801      	cmp	r0, #1
 8012d94:	d00c      	beq.n	8012db0 <sin+0x60>
 8012d96:	2802      	cmp	r0, #2
 8012d98:	d011      	beq.n	8012dbe <sin+0x6e>
 8012d9a:	b9e8      	cbnz	r0, 8012dd8 <sin+0x88>
 8012d9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012da0:	ed9d 0b00 	vldr	d0, [sp]
 8012da4:	2001      	movs	r0, #1
 8012da6:	f000 f9cb 	bl	8013140 <__kernel_sin>
 8012daa:	ec51 0b10 	vmov	r0, r1, d0
 8012dae:	e7e6      	b.n	8012d7e <sin+0x2e>
 8012db0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012db4:	ed9d 0b00 	vldr	d0, [sp]
 8012db8:	f000 f8fa 	bl	8012fb0 <__kernel_cos>
 8012dbc:	e7f5      	b.n	8012daa <sin+0x5a>
 8012dbe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012dc2:	ed9d 0b00 	vldr	d0, [sp]
 8012dc6:	2001      	movs	r0, #1
 8012dc8:	f000 f9ba 	bl	8013140 <__kernel_sin>
 8012dcc:	ec53 2b10 	vmov	r2, r3, d0
 8012dd0:	4610      	mov	r0, r2
 8012dd2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012dd6:	e7d2      	b.n	8012d7e <sin+0x2e>
 8012dd8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012ddc:	ed9d 0b00 	vldr	d0, [sp]
 8012de0:	f000 f8e6 	bl	8012fb0 <__kernel_cos>
 8012de4:	e7f2      	b.n	8012dcc <sin+0x7c>
 8012de6:	bf00      	nop
	...
 8012df0:	3fe921fb 	.word	0x3fe921fb
 8012df4:	7fefffff 	.word	0x7fefffff

08012df8 <__ieee754_sqrt>:
 8012df8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dfc:	4a68      	ldr	r2, [pc, #416]	@ (8012fa0 <__ieee754_sqrt+0x1a8>)
 8012dfe:	ec55 4b10 	vmov	r4, r5, d0
 8012e02:	43aa      	bics	r2, r5
 8012e04:	462b      	mov	r3, r5
 8012e06:	4621      	mov	r1, r4
 8012e08:	d110      	bne.n	8012e2c <__ieee754_sqrt+0x34>
 8012e0a:	4622      	mov	r2, r4
 8012e0c:	4620      	mov	r0, r4
 8012e0e:	4629      	mov	r1, r5
 8012e10:	f7ed fc12 	bl	8000638 <__aeabi_dmul>
 8012e14:	4602      	mov	r2, r0
 8012e16:	460b      	mov	r3, r1
 8012e18:	4620      	mov	r0, r4
 8012e1a:	4629      	mov	r1, r5
 8012e1c:	f7ed fa56 	bl	80002cc <__adddf3>
 8012e20:	4604      	mov	r4, r0
 8012e22:	460d      	mov	r5, r1
 8012e24:	ec45 4b10 	vmov	d0, r4, r5
 8012e28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e2c:	2d00      	cmp	r5, #0
 8012e2e:	dc0e      	bgt.n	8012e4e <__ieee754_sqrt+0x56>
 8012e30:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8012e34:	4322      	orrs	r2, r4
 8012e36:	d0f5      	beq.n	8012e24 <__ieee754_sqrt+0x2c>
 8012e38:	b19d      	cbz	r5, 8012e62 <__ieee754_sqrt+0x6a>
 8012e3a:	4622      	mov	r2, r4
 8012e3c:	4620      	mov	r0, r4
 8012e3e:	4629      	mov	r1, r5
 8012e40:	f7ed fa42 	bl	80002c8 <__aeabi_dsub>
 8012e44:	4602      	mov	r2, r0
 8012e46:	460b      	mov	r3, r1
 8012e48:	f7ed fd20 	bl	800088c <__aeabi_ddiv>
 8012e4c:	e7e8      	b.n	8012e20 <__ieee754_sqrt+0x28>
 8012e4e:	152a      	asrs	r2, r5, #20
 8012e50:	d115      	bne.n	8012e7e <__ieee754_sqrt+0x86>
 8012e52:	2000      	movs	r0, #0
 8012e54:	e009      	b.n	8012e6a <__ieee754_sqrt+0x72>
 8012e56:	0acb      	lsrs	r3, r1, #11
 8012e58:	3a15      	subs	r2, #21
 8012e5a:	0549      	lsls	r1, r1, #21
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d0fa      	beq.n	8012e56 <__ieee754_sqrt+0x5e>
 8012e60:	e7f7      	b.n	8012e52 <__ieee754_sqrt+0x5a>
 8012e62:	462a      	mov	r2, r5
 8012e64:	e7fa      	b.n	8012e5c <__ieee754_sqrt+0x64>
 8012e66:	005b      	lsls	r3, r3, #1
 8012e68:	3001      	adds	r0, #1
 8012e6a:	02dc      	lsls	r4, r3, #11
 8012e6c:	d5fb      	bpl.n	8012e66 <__ieee754_sqrt+0x6e>
 8012e6e:	1e44      	subs	r4, r0, #1
 8012e70:	1b12      	subs	r2, r2, r4
 8012e72:	f1c0 0420 	rsb	r4, r0, #32
 8012e76:	fa21 f404 	lsr.w	r4, r1, r4
 8012e7a:	4323      	orrs	r3, r4
 8012e7c:	4081      	lsls	r1, r0
 8012e7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012e82:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8012e86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012e8a:	07d2      	lsls	r2, r2, #31
 8012e8c:	bf5c      	itt	pl
 8012e8e:	005b      	lslpl	r3, r3, #1
 8012e90:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8012e94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012e98:	bf58      	it	pl
 8012e9a:	0049      	lslpl	r1, r1, #1
 8012e9c:	2600      	movs	r6, #0
 8012e9e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8012ea2:	106d      	asrs	r5, r5, #1
 8012ea4:	0049      	lsls	r1, r1, #1
 8012ea6:	2016      	movs	r0, #22
 8012ea8:	4632      	mov	r2, r6
 8012eaa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8012eae:	1917      	adds	r7, r2, r4
 8012eb0:	429f      	cmp	r7, r3
 8012eb2:	bfde      	ittt	le
 8012eb4:	193a      	addle	r2, r7, r4
 8012eb6:	1bdb      	suble	r3, r3, r7
 8012eb8:	1936      	addle	r6, r6, r4
 8012eba:	0fcf      	lsrs	r7, r1, #31
 8012ebc:	3801      	subs	r0, #1
 8012ebe:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8012ec2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012ec6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8012eca:	d1f0      	bne.n	8012eae <__ieee754_sqrt+0xb6>
 8012ecc:	4604      	mov	r4, r0
 8012ece:	2720      	movs	r7, #32
 8012ed0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8012ed4:	429a      	cmp	r2, r3
 8012ed6:	eb00 0e0c 	add.w	lr, r0, ip
 8012eda:	db02      	blt.n	8012ee2 <__ieee754_sqrt+0xea>
 8012edc:	d113      	bne.n	8012f06 <__ieee754_sqrt+0x10e>
 8012ede:	458e      	cmp	lr, r1
 8012ee0:	d811      	bhi.n	8012f06 <__ieee754_sqrt+0x10e>
 8012ee2:	f1be 0f00 	cmp.w	lr, #0
 8012ee6:	eb0e 000c 	add.w	r0, lr, ip
 8012eea:	da42      	bge.n	8012f72 <__ieee754_sqrt+0x17a>
 8012eec:	2800      	cmp	r0, #0
 8012eee:	db40      	blt.n	8012f72 <__ieee754_sqrt+0x17a>
 8012ef0:	f102 0801 	add.w	r8, r2, #1
 8012ef4:	1a9b      	subs	r3, r3, r2
 8012ef6:	458e      	cmp	lr, r1
 8012ef8:	bf88      	it	hi
 8012efa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8012efe:	eba1 010e 	sub.w	r1, r1, lr
 8012f02:	4464      	add	r4, ip
 8012f04:	4642      	mov	r2, r8
 8012f06:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8012f0a:	3f01      	subs	r7, #1
 8012f0c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8012f10:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012f14:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8012f18:	d1dc      	bne.n	8012ed4 <__ieee754_sqrt+0xdc>
 8012f1a:	4319      	orrs	r1, r3
 8012f1c:	d01b      	beq.n	8012f56 <__ieee754_sqrt+0x15e>
 8012f1e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8012fa4 <__ieee754_sqrt+0x1ac>
 8012f22:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8012fa8 <__ieee754_sqrt+0x1b0>
 8012f26:	e9da 0100 	ldrd	r0, r1, [sl]
 8012f2a:	e9db 2300 	ldrd	r2, r3, [fp]
 8012f2e:	f7ed f9cb 	bl	80002c8 <__aeabi_dsub>
 8012f32:	e9da 8900 	ldrd	r8, r9, [sl]
 8012f36:	4602      	mov	r2, r0
 8012f38:	460b      	mov	r3, r1
 8012f3a:	4640      	mov	r0, r8
 8012f3c:	4649      	mov	r1, r9
 8012f3e:	f7ed fdf7 	bl	8000b30 <__aeabi_dcmple>
 8012f42:	b140      	cbz	r0, 8012f56 <__ieee754_sqrt+0x15e>
 8012f44:	f1b4 3fff 	cmp.w	r4, #4294967295
 8012f48:	e9da 0100 	ldrd	r0, r1, [sl]
 8012f4c:	e9db 2300 	ldrd	r2, r3, [fp]
 8012f50:	d111      	bne.n	8012f76 <__ieee754_sqrt+0x17e>
 8012f52:	3601      	adds	r6, #1
 8012f54:	463c      	mov	r4, r7
 8012f56:	1072      	asrs	r2, r6, #1
 8012f58:	0863      	lsrs	r3, r4, #1
 8012f5a:	07f1      	lsls	r1, r6, #31
 8012f5c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8012f60:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8012f64:	bf48      	it	mi
 8012f66:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8012f6a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8012f6e:	4618      	mov	r0, r3
 8012f70:	e756      	b.n	8012e20 <__ieee754_sqrt+0x28>
 8012f72:	4690      	mov	r8, r2
 8012f74:	e7be      	b.n	8012ef4 <__ieee754_sqrt+0xfc>
 8012f76:	f7ed f9a9 	bl	80002cc <__adddf3>
 8012f7a:	e9da 8900 	ldrd	r8, r9, [sl]
 8012f7e:	4602      	mov	r2, r0
 8012f80:	460b      	mov	r3, r1
 8012f82:	4640      	mov	r0, r8
 8012f84:	4649      	mov	r1, r9
 8012f86:	f7ed fdc9 	bl	8000b1c <__aeabi_dcmplt>
 8012f8a:	b120      	cbz	r0, 8012f96 <__ieee754_sqrt+0x19e>
 8012f8c:	1ca0      	adds	r0, r4, #2
 8012f8e:	bf08      	it	eq
 8012f90:	3601      	addeq	r6, #1
 8012f92:	3402      	adds	r4, #2
 8012f94:	e7df      	b.n	8012f56 <__ieee754_sqrt+0x15e>
 8012f96:	1c63      	adds	r3, r4, #1
 8012f98:	f023 0401 	bic.w	r4, r3, #1
 8012f9c:	e7db      	b.n	8012f56 <__ieee754_sqrt+0x15e>
 8012f9e:	bf00      	nop
 8012fa0:	7ff00000 	.word	0x7ff00000
 8012fa4:	200001f0 	.word	0x200001f0
 8012fa8:	200001e8 	.word	0x200001e8
 8012fac:	00000000 	.word	0x00000000

08012fb0 <__kernel_cos>:
 8012fb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fb4:	ec57 6b10 	vmov	r6, r7, d0
 8012fb8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8012fbc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8012fc0:	ed8d 1b00 	vstr	d1, [sp]
 8012fc4:	d206      	bcs.n	8012fd4 <__kernel_cos+0x24>
 8012fc6:	4630      	mov	r0, r6
 8012fc8:	4639      	mov	r1, r7
 8012fca:	f7ed fde5 	bl	8000b98 <__aeabi_d2iz>
 8012fce:	2800      	cmp	r0, #0
 8012fd0:	f000 8088 	beq.w	80130e4 <__kernel_cos+0x134>
 8012fd4:	4632      	mov	r2, r6
 8012fd6:	463b      	mov	r3, r7
 8012fd8:	4630      	mov	r0, r6
 8012fda:	4639      	mov	r1, r7
 8012fdc:	f7ed fb2c 	bl	8000638 <__aeabi_dmul>
 8012fe0:	4b51      	ldr	r3, [pc, #324]	@ (8013128 <__kernel_cos+0x178>)
 8012fe2:	2200      	movs	r2, #0
 8012fe4:	4604      	mov	r4, r0
 8012fe6:	460d      	mov	r5, r1
 8012fe8:	f7ed fb26 	bl	8000638 <__aeabi_dmul>
 8012fec:	a340      	add	r3, pc, #256	@ (adr r3, 80130f0 <__kernel_cos+0x140>)
 8012fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ff2:	4682      	mov	sl, r0
 8012ff4:	468b      	mov	fp, r1
 8012ff6:	4620      	mov	r0, r4
 8012ff8:	4629      	mov	r1, r5
 8012ffa:	f7ed fb1d 	bl	8000638 <__aeabi_dmul>
 8012ffe:	a33e      	add	r3, pc, #248	@ (adr r3, 80130f8 <__kernel_cos+0x148>)
 8013000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013004:	f7ed f962 	bl	80002cc <__adddf3>
 8013008:	4622      	mov	r2, r4
 801300a:	462b      	mov	r3, r5
 801300c:	f7ed fb14 	bl	8000638 <__aeabi_dmul>
 8013010:	a33b      	add	r3, pc, #236	@ (adr r3, 8013100 <__kernel_cos+0x150>)
 8013012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013016:	f7ed f957 	bl	80002c8 <__aeabi_dsub>
 801301a:	4622      	mov	r2, r4
 801301c:	462b      	mov	r3, r5
 801301e:	f7ed fb0b 	bl	8000638 <__aeabi_dmul>
 8013022:	a339      	add	r3, pc, #228	@ (adr r3, 8013108 <__kernel_cos+0x158>)
 8013024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013028:	f7ed f950 	bl	80002cc <__adddf3>
 801302c:	4622      	mov	r2, r4
 801302e:	462b      	mov	r3, r5
 8013030:	f7ed fb02 	bl	8000638 <__aeabi_dmul>
 8013034:	a336      	add	r3, pc, #216	@ (adr r3, 8013110 <__kernel_cos+0x160>)
 8013036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801303a:	f7ed f945 	bl	80002c8 <__aeabi_dsub>
 801303e:	4622      	mov	r2, r4
 8013040:	462b      	mov	r3, r5
 8013042:	f7ed faf9 	bl	8000638 <__aeabi_dmul>
 8013046:	a334      	add	r3, pc, #208	@ (adr r3, 8013118 <__kernel_cos+0x168>)
 8013048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801304c:	f7ed f93e 	bl	80002cc <__adddf3>
 8013050:	4622      	mov	r2, r4
 8013052:	462b      	mov	r3, r5
 8013054:	f7ed faf0 	bl	8000638 <__aeabi_dmul>
 8013058:	4622      	mov	r2, r4
 801305a:	462b      	mov	r3, r5
 801305c:	f7ed faec 	bl	8000638 <__aeabi_dmul>
 8013060:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013064:	4604      	mov	r4, r0
 8013066:	460d      	mov	r5, r1
 8013068:	4630      	mov	r0, r6
 801306a:	4639      	mov	r1, r7
 801306c:	f7ed fae4 	bl	8000638 <__aeabi_dmul>
 8013070:	460b      	mov	r3, r1
 8013072:	4602      	mov	r2, r0
 8013074:	4629      	mov	r1, r5
 8013076:	4620      	mov	r0, r4
 8013078:	f7ed f926 	bl	80002c8 <__aeabi_dsub>
 801307c:	4b2b      	ldr	r3, [pc, #172]	@ (801312c <__kernel_cos+0x17c>)
 801307e:	4598      	cmp	r8, r3
 8013080:	4606      	mov	r6, r0
 8013082:	460f      	mov	r7, r1
 8013084:	d810      	bhi.n	80130a8 <__kernel_cos+0xf8>
 8013086:	4602      	mov	r2, r0
 8013088:	460b      	mov	r3, r1
 801308a:	4650      	mov	r0, sl
 801308c:	4659      	mov	r1, fp
 801308e:	f7ed f91b 	bl	80002c8 <__aeabi_dsub>
 8013092:	460b      	mov	r3, r1
 8013094:	4926      	ldr	r1, [pc, #152]	@ (8013130 <__kernel_cos+0x180>)
 8013096:	4602      	mov	r2, r0
 8013098:	2000      	movs	r0, #0
 801309a:	f7ed f915 	bl	80002c8 <__aeabi_dsub>
 801309e:	ec41 0b10 	vmov	d0, r0, r1
 80130a2:	b003      	add	sp, #12
 80130a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130a8:	4b22      	ldr	r3, [pc, #136]	@ (8013134 <__kernel_cos+0x184>)
 80130aa:	4921      	ldr	r1, [pc, #132]	@ (8013130 <__kernel_cos+0x180>)
 80130ac:	4598      	cmp	r8, r3
 80130ae:	bf8c      	ite	hi
 80130b0:	4d21      	ldrhi	r5, [pc, #132]	@ (8013138 <__kernel_cos+0x188>)
 80130b2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80130b6:	2400      	movs	r4, #0
 80130b8:	4622      	mov	r2, r4
 80130ba:	462b      	mov	r3, r5
 80130bc:	2000      	movs	r0, #0
 80130be:	f7ed f903 	bl	80002c8 <__aeabi_dsub>
 80130c2:	4622      	mov	r2, r4
 80130c4:	4680      	mov	r8, r0
 80130c6:	4689      	mov	r9, r1
 80130c8:	462b      	mov	r3, r5
 80130ca:	4650      	mov	r0, sl
 80130cc:	4659      	mov	r1, fp
 80130ce:	f7ed f8fb 	bl	80002c8 <__aeabi_dsub>
 80130d2:	4632      	mov	r2, r6
 80130d4:	463b      	mov	r3, r7
 80130d6:	f7ed f8f7 	bl	80002c8 <__aeabi_dsub>
 80130da:	4602      	mov	r2, r0
 80130dc:	460b      	mov	r3, r1
 80130de:	4640      	mov	r0, r8
 80130e0:	4649      	mov	r1, r9
 80130e2:	e7da      	b.n	801309a <__kernel_cos+0xea>
 80130e4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8013120 <__kernel_cos+0x170>
 80130e8:	e7db      	b.n	80130a2 <__kernel_cos+0xf2>
 80130ea:	bf00      	nop
 80130ec:	f3af 8000 	nop.w
 80130f0:	be8838d4 	.word	0xbe8838d4
 80130f4:	bda8fae9 	.word	0xbda8fae9
 80130f8:	bdb4b1c4 	.word	0xbdb4b1c4
 80130fc:	3e21ee9e 	.word	0x3e21ee9e
 8013100:	809c52ad 	.word	0x809c52ad
 8013104:	3e927e4f 	.word	0x3e927e4f
 8013108:	19cb1590 	.word	0x19cb1590
 801310c:	3efa01a0 	.word	0x3efa01a0
 8013110:	16c15177 	.word	0x16c15177
 8013114:	3f56c16c 	.word	0x3f56c16c
 8013118:	5555554c 	.word	0x5555554c
 801311c:	3fa55555 	.word	0x3fa55555
 8013120:	00000000 	.word	0x00000000
 8013124:	3ff00000 	.word	0x3ff00000
 8013128:	3fe00000 	.word	0x3fe00000
 801312c:	3fd33332 	.word	0x3fd33332
 8013130:	3ff00000 	.word	0x3ff00000
 8013134:	3fe90000 	.word	0x3fe90000
 8013138:	3fd20000 	.word	0x3fd20000
 801313c:	00000000 	.word	0x00000000

08013140 <__kernel_sin>:
 8013140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013144:	ec55 4b10 	vmov	r4, r5, d0
 8013148:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801314c:	b085      	sub	sp, #20
 801314e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8013152:	ed8d 1b02 	vstr	d1, [sp, #8]
 8013156:	4680      	mov	r8, r0
 8013158:	d205      	bcs.n	8013166 <__kernel_sin+0x26>
 801315a:	4620      	mov	r0, r4
 801315c:	4629      	mov	r1, r5
 801315e:	f7ed fd1b 	bl	8000b98 <__aeabi_d2iz>
 8013162:	2800      	cmp	r0, #0
 8013164:	d052      	beq.n	801320c <__kernel_sin+0xcc>
 8013166:	4622      	mov	r2, r4
 8013168:	462b      	mov	r3, r5
 801316a:	4620      	mov	r0, r4
 801316c:	4629      	mov	r1, r5
 801316e:	f7ed fa63 	bl	8000638 <__aeabi_dmul>
 8013172:	4682      	mov	sl, r0
 8013174:	468b      	mov	fp, r1
 8013176:	4602      	mov	r2, r0
 8013178:	460b      	mov	r3, r1
 801317a:	4620      	mov	r0, r4
 801317c:	4629      	mov	r1, r5
 801317e:	f7ed fa5b 	bl	8000638 <__aeabi_dmul>
 8013182:	a342      	add	r3, pc, #264	@ (adr r3, 801328c <__kernel_sin+0x14c>)
 8013184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013188:	e9cd 0100 	strd	r0, r1, [sp]
 801318c:	4650      	mov	r0, sl
 801318e:	4659      	mov	r1, fp
 8013190:	f7ed fa52 	bl	8000638 <__aeabi_dmul>
 8013194:	a33f      	add	r3, pc, #252	@ (adr r3, 8013294 <__kernel_sin+0x154>)
 8013196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801319a:	f7ed f895 	bl	80002c8 <__aeabi_dsub>
 801319e:	4652      	mov	r2, sl
 80131a0:	465b      	mov	r3, fp
 80131a2:	f7ed fa49 	bl	8000638 <__aeabi_dmul>
 80131a6:	a33d      	add	r3, pc, #244	@ (adr r3, 801329c <__kernel_sin+0x15c>)
 80131a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131ac:	f7ed f88e 	bl	80002cc <__adddf3>
 80131b0:	4652      	mov	r2, sl
 80131b2:	465b      	mov	r3, fp
 80131b4:	f7ed fa40 	bl	8000638 <__aeabi_dmul>
 80131b8:	a33a      	add	r3, pc, #232	@ (adr r3, 80132a4 <__kernel_sin+0x164>)
 80131ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131be:	f7ed f883 	bl	80002c8 <__aeabi_dsub>
 80131c2:	4652      	mov	r2, sl
 80131c4:	465b      	mov	r3, fp
 80131c6:	f7ed fa37 	bl	8000638 <__aeabi_dmul>
 80131ca:	a338      	add	r3, pc, #224	@ (adr r3, 80132ac <__kernel_sin+0x16c>)
 80131cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131d0:	f7ed f87c 	bl	80002cc <__adddf3>
 80131d4:	4606      	mov	r6, r0
 80131d6:	460f      	mov	r7, r1
 80131d8:	f1b8 0f00 	cmp.w	r8, #0
 80131dc:	d11b      	bne.n	8013216 <__kernel_sin+0xd6>
 80131de:	4602      	mov	r2, r0
 80131e0:	460b      	mov	r3, r1
 80131e2:	4650      	mov	r0, sl
 80131e4:	4659      	mov	r1, fp
 80131e6:	f7ed fa27 	bl	8000638 <__aeabi_dmul>
 80131ea:	a325      	add	r3, pc, #148	@ (adr r3, 8013280 <__kernel_sin+0x140>)
 80131ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131f0:	f7ed f86a 	bl	80002c8 <__aeabi_dsub>
 80131f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80131f8:	f7ed fa1e 	bl	8000638 <__aeabi_dmul>
 80131fc:	4602      	mov	r2, r0
 80131fe:	460b      	mov	r3, r1
 8013200:	4620      	mov	r0, r4
 8013202:	4629      	mov	r1, r5
 8013204:	f7ed f862 	bl	80002cc <__adddf3>
 8013208:	4604      	mov	r4, r0
 801320a:	460d      	mov	r5, r1
 801320c:	ec45 4b10 	vmov	d0, r4, r5
 8013210:	b005      	add	sp, #20
 8013212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013216:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801321a:	4b1b      	ldr	r3, [pc, #108]	@ (8013288 <__kernel_sin+0x148>)
 801321c:	2200      	movs	r2, #0
 801321e:	f7ed fa0b 	bl	8000638 <__aeabi_dmul>
 8013222:	4632      	mov	r2, r6
 8013224:	4680      	mov	r8, r0
 8013226:	4689      	mov	r9, r1
 8013228:	463b      	mov	r3, r7
 801322a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801322e:	f7ed fa03 	bl	8000638 <__aeabi_dmul>
 8013232:	4602      	mov	r2, r0
 8013234:	460b      	mov	r3, r1
 8013236:	4640      	mov	r0, r8
 8013238:	4649      	mov	r1, r9
 801323a:	f7ed f845 	bl	80002c8 <__aeabi_dsub>
 801323e:	4652      	mov	r2, sl
 8013240:	465b      	mov	r3, fp
 8013242:	f7ed f9f9 	bl	8000638 <__aeabi_dmul>
 8013246:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801324a:	f7ed f83d 	bl	80002c8 <__aeabi_dsub>
 801324e:	a30c      	add	r3, pc, #48	@ (adr r3, 8013280 <__kernel_sin+0x140>)
 8013250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013254:	4606      	mov	r6, r0
 8013256:	460f      	mov	r7, r1
 8013258:	e9dd 0100 	ldrd	r0, r1, [sp]
 801325c:	f7ed f9ec 	bl	8000638 <__aeabi_dmul>
 8013260:	4602      	mov	r2, r0
 8013262:	460b      	mov	r3, r1
 8013264:	4630      	mov	r0, r6
 8013266:	4639      	mov	r1, r7
 8013268:	f7ed f830 	bl	80002cc <__adddf3>
 801326c:	4602      	mov	r2, r0
 801326e:	460b      	mov	r3, r1
 8013270:	4620      	mov	r0, r4
 8013272:	4629      	mov	r1, r5
 8013274:	f7ed f828 	bl	80002c8 <__aeabi_dsub>
 8013278:	e7c6      	b.n	8013208 <__kernel_sin+0xc8>
 801327a:	bf00      	nop
 801327c:	f3af 8000 	nop.w
 8013280:	55555549 	.word	0x55555549
 8013284:	3fc55555 	.word	0x3fc55555
 8013288:	3fe00000 	.word	0x3fe00000
 801328c:	5acfd57c 	.word	0x5acfd57c
 8013290:	3de5d93a 	.word	0x3de5d93a
 8013294:	8a2b9ceb 	.word	0x8a2b9ceb
 8013298:	3e5ae5e6 	.word	0x3e5ae5e6
 801329c:	57b1fe7d 	.word	0x57b1fe7d
 80132a0:	3ec71de3 	.word	0x3ec71de3
 80132a4:	19c161d5 	.word	0x19c161d5
 80132a8:	3f2a01a0 	.word	0x3f2a01a0
 80132ac:	1110f8a6 	.word	0x1110f8a6
 80132b0:	3f811111 	.word	0x3f811111
 80132b4:	00000000 	.word	0x00000000

080132b8 <__ieee754_rem_pio2>:
 80132b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132bc:	ec57 6b10 	vmov	r6, r7, d0
 80132c0:	4bc5      	ldr	r3, [pc, #788]	@ (80135d8 <__ieee754_rem_pio2+0x320>)
 80132c2:	b08d      	sub	sp, #52	@ 0x34
 80132c4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80132c8:	4598      	cmp	r8, r3
 80132ca:	4604      	mov	r4, r0
 80132cc:	9704      	str	r7, [sp, #16]
 80132ce:	d807      	bhi.n	80132e0 <__ieee754_rem_pio2+0x28>
 80132d0:	2200      	movs	r2, #0
 80132d2:	2300      	movs	r3, #0
 80132d4:	ed80 0b00 	vstr	d0, [r0]
 80132d8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80132dc:	2500      	movs	r5, #0
 80132de:	e028      	b.n	8013332 <__ieee754_rem_pio2+0x7a>
 80132e0:	4bbe      	ldr	r3, [pc, #760]	@ (80135dc <__ieee754_rem_pio2+0x324>)
 80132e2:	4598      	cmp	r8, r3
 80132e4:	d878      	bhi.n	80133d8 <__ieee754_rem_pio2+0x120>
 80132e6:	9b04      	ldr	r3, [sp, #16]
 80132e8:	4dbd      	ldr	r5, [pc, #756]	@ (80135e0 <__ieee754_rem_pio2+0x328>)
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	4630      	mov	r0, r6
 80132ee:	a3ac      	add	r3, pc, #688	@ (adr r3, 80135a0 <__ieee754_rem_pio2+0x2e8>)
 80132f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132f4:	4639      	mov	r1, r7
 80132f6:	dd38      	ble.n	801336a <__ieee754_rem_pio2+0xb2>
 80132f8:	f7ec ffe6 	bl	80002c8 <__aeabi_dsub>
 80132fc:	45a8      	cmp	r8, r5
 80132fe:	4606      	mov	r6, r0
 8013300:	460f      	mov	r7, r1
 8013302:	d01a      	beq.n	801333a <__ieee754_rem_pio2+0x82>
 8013304:	a3a8      	add	r3, pc, #672	@ (adr r3, 80135a8 <__ieee754_rem_pio2+0x2f0>)
 8013306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801330a:	f7ec ffdd 	bl	80002c8 <__aeabi_dsub>
 801330e:	4602      	mov	r2, r0
 8013310:	460b      	mov	r3, r1
 8013312:	4680      	mov	r8, r0
 8013314:	4689      	mov	r9, r1
 8013316:	4630      	mov	r0, r6
 8013318:	4639      	mov	r1, r7
 801331a:	f7ec ffd5 	bl	80002c8 <__aeabi_dsub>
 801331e:	a3a2      	add	r3, pc, #648	@ (adr r3, 80135a8 <__ieee754_rem_pio2+0x2f0>)
 8013320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013324:	f7ec ffd0 	bl	80002c8 <__aeabi_dsub>
 8013328:	e9c4 8900 	strd	r8, r9, [r4]
 801332c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013330:	2501      	movs	r5, #1
 8013332:	4628      	mov	r0, r5
 8013334:	b00d      	add	sp, #52	@ 0x34
 8013336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801333a:	a39d      	add	r3, pc, #628	@ (adr r3, 80135b0 <__ieee754_rem_pio2+0x2f8>)
 801333c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013340:	f7ec ffc2 	bl	80002c8 <__aeabi_dsub>
 8013344:	a39c      	add	r3, pc, #624	@ (adr r3, 80135b8 <__ieee754_rem_pio2+0x300>)
 8013346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801334a:	4606      	mov	r6, r0
 801334c:	460f      	mov	r7, r1
 801334e:	f7ec ffbb 	bl	80002c8 <__aeabi_dsub>
 8013352:	4602      	mov	r2, r0
 8013354:	460b      	mov	r3, r1
 8013356:	4680      	mov	r8, r0
 8013358:	4689      	mov	r9, r1
 801335a:	4630      	mov	r0, r6
 801335c:	4639      	mov	r1, r7
 801335e:	f7ec ffb3 	bl	80002c8 <__aeabi_dsub>
 8013362:	a395      	add	r3, pc, #596	@ (adr r3, 80135b8 <__ieee754_rem_pio2+0x300>)
 8013364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013368:	e7dc      	b.n	8013324 <__ieee754_rem_pio2+0x6c>
 801336a:	f7ec ffaf 	bl	80002cc <__adddf3>
 801336e:	45a8      	cmp	r8, r5
 8013370:	4606      	mov	r6, r0
 8013372:	460f      	mov	r7, r1
 8013374:	d018      	beq.n	80133a8 <__ieee754_rem_pio2+0xf0>
 8013376:	a38c      	add	r3, pc, #560	@ (adr r3, 80135a8 <__ieee754_rem_pio2+0x2f0>)
 8013378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801337c:	f7ec ffa6 	bl	80002cc <__adddf3>
 8013380:	4602      	mov	r2, r0
 8013382:	460b      	mov	r3, r1
 8013384:	4680      	mov	r8, r0
 8013386:	4689      	mov	r9, r1
 8013388:	4630      	mov	r0, r6
 801338a:	4639      	mov	r1, r7
 801338c:	f7ec ff9c 	bl	80002c8 <__aeabi_dsub>
 8013390:	a385      	add	r3, pc, #532	@ (adr r3, 80135a8 <__ieee754_rem_pio2+0x2f0>)
 8013392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013396:	f7ec ff99 	bl	80002cc <__adddf3>
 801339a:	f04f 35ff 	mov.w	r5, #4294967295
 801339e:	e9c4 8900 	strd	r8, r9, [r4]
 80133a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80133a6:	e7c4      	b.n	8013332 <__ieee754_rem_pio2+0x7a>
 80133a8:	a381      	add	r3, pc, #516	@ (adr r3, 80135b0 <__ieee754_rem_pio2+0x2f8>)
 80133aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133ae:	f7ec ff8d 	bl	80002cc <__adddf3>
 80133b2:	a381      	add	r3, pc, #516	@ (adr r3, 80135b8 <__ieee754_rem_pio2+0x300>)
 80133b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133b8:	4606      	mov	r6, r0
 80133ba:	460f      	mov	r7, r1
 80133bc:	f7ec ff86 	bl	80002cc <__adddf3>
 80133c0:	4602      	mov	r2, r0
 80133c2:	460b      	mov	r3, r1
 80133c4:	4680      	mov	r8, r0
 80133c6:	4689      	mov	r9, r1
 80133c8:	4630      	mov	r0, r6
 80133ca:	4639      	mov	r1, r7
 80133cc:	f7ec ff7c 	bl	80002c8 <__aeabi_dsub>
 80133d0:	a379      	add	r3, pc, #484	@ (adr r3, 80135b8 <__ieee754_rem_pio2+0x300>)
 80133d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133d6:	e7de      	b.n	8013396 <__ieee754_rem_pio2+0xde>
 80133d8:	4b82      	ldr	r3, [pc, #520]	@ (80135e4 <__ieee754_rem_pio2+0x32c>)
 80133da:	4598      	cmp	r8, r3
 80133dc:	f200 80d1 	bhi.w	8013582 <__ieee754_rem_pio2+0x2ca>
 80133e0:	f7ff fcae 	bl	8012d40 <fabs>
 80133e4:	ec57 6b10 	vmov	r6, r7, d0
 80133e8:	a375      	add	r3, pc, #468	@ (adr r3, 80135c0 <__ieee754_rem_pio2+0x308>)
 80133ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133ee:	4630      	mov	r0, r6
 80133f0:	4639      	mov	r1, r7
 80133f2:	f7ed f921 	bl	8000638 <__aeabi_dmul>
 80133f6:	4b7c      	ldr	r3, [pc, #496]	@ (80135e8 <__ieee754_rem_pio2+0x330>)
 80133f8:	2200      	movs	r2, #0
 80133fa:	f7ec ff67 	bl	80002cc <__adddf3>
 80133fe:	f7ed fbcb 	bl	8000b98 <__aeabi_d2iz>
 8013402:	4605      	mov	r5, r0
 8013404:	f7ed f8ae 	bl	8000564 <__aeabi_i2d>
 8013408:	4602      	mov	r2, r0
 801340a:	460b      	mov	r3, r1
 801340c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013410:	a363      	add	r3, pc, #396	@ (adr r3, 80135a0 <__ieee754_rem_pio2+0x2e8>)
 8013412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013416:	f7ed f90f 	bl	8000638 <__aeabi_dmul>
 801341a:	4602      	mov	r2, r0
 801341c:	460b      	mov	r3, r1
 801341e:	4630      	mov	r0, r6
 8013420:	4639      	mov	r1, r7
 8013422:	f7ec ff51 	bl	80002c8 <__aeabi_dsub>
 8013426:	a360      	add	r3, pc, #384	@ (adr r3, 80135a8 <__ieee754_rem_pio2+0x2f0>)
 8013428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801342c:	4682      	mov	sl, r0
 801342e:	468b      	mov	fp, r1
 8013430:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013434:	f7ed f900 	bl	8000638 <__aeabi_dmul>
 8013438:	2d1f      	cmp	r5, #31
 801343a:	4606      	mov	r6, r0
 801343c:	460f      	mov	r7, r1
 801343e:	dc0c      	bgt.n	801345a <__ieee754_rem_pio2+0x1a2>
 8013440:	4b6a      	ldr	r3, [pc, #424]	@ (80135ec <__ieee754_rem_pio2+0x334>)
 8013442:	1e6a      	subs	r2, r5, #1
 8013444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013448:	4543      	cmp	r3, r8
 801344a:	d006      	beq.n	801345a <__ieee754_rem_pio2+0x1a2>
 801344c:	4632      	mov	r2, r6
 801344e:	463b      	mov	r3, r7
 8013450:	4650      	mov	r0, sl
 8013452:	4659      	mov	r1, fp
 8013454:	f7ec ff38 	bl	80002c8 <__aeabi_dsub>
 8013458:	e00e      	b.n	8013478 <__ieee754_rem_pio2+0x1c0>
 801345a:	463b      	mov	r3, r7
 801345c:	4632      	mov	r2, r6
 801345e:	4650      	mov	r0, sl
 8013460:	4659      	mov	r1, fp
 8013462:	f7ec ff31 	bl	80002c8 <__aeabi_dsub>
 8013466:	ea4f 5328 	mov.w	r3, r8, asr #20
 801346a:	9305      	str	r3, [sp, #20]
 801346c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013470:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8013474:	2b10      	cmp	r3, #16
 8013476:	dc02      	bgt.n	801347e <__ieee754_rem_pio2+0x1c6>
 8013478:	e9c4 0100 	strd	r0, r1, [r4]
 801347c:	e039      	b.n	80134f2 <__ieee754_rem_pio2+0x23a>
 801347e:	a34c      	add	r3, pc, #304	@ (adr r3, 80135b0 <__ieee754_rem_pio2+0x2f8>)
 8013480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013484:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013488:	f7ed f8d6 	bl	8000638 <__aeabi_dmul>
 801348c:	4606      	mov	r6, r0
 801348e:	460f      	mov	r7, r1
 8013490:	4602      	mov	r2, r0
 8013492:	460b      	mov	r3, r1
 8013494:	4650      	mov	r0, sl
 8013496:	4659      	mov	r1, fp
 8013498:	f7ec ff16 	bl	80002c8 <__aeabi_dsub>
 801349c:	4602      	mov	r2, r0
 801349e:	460b      	mov	r3, r1
 80134a0:	4680      	mov	r8, r0
 80134a2:	4689      	mov	r9, r1
 80134a4:	4650      	mov	r0, sl
 80134a6:	4659      	mov	r1, fp
 80134a8:	f7ec ff0e 	bl	80002c8 <__aeabi_dsub>
 80134ac:	4632      	mov	r2, r6
 80134ae:	463b      	mov	r3, r7
 80134b0:	f7ec ff0a 	bl	80002c8 <__aeabi_dsub>
 80134b4:	a340      	add	r3, pc, #256	@ (adr r3, 80135b8 <__ieee754_rem_pio2+0x300>)
 80134b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134ba:	4606      	mov	r6, r0
 80134bc:	460f      	mov	r7, r1
 80134be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80134c2:	f7ed f8b9 	bl	8000638 <__aeabi_dmul>
 80134c6:	4632      	mov	r2, r6
 80134c8:	463b      	mov	r3, r7
 80134ca:	f7ec fefd 	bl	80002c8 <__aeabi_dsub>
 80134ce:	4602      	mov	r2, r0
 80134d0:	460b      	mov	r3, r1
 80134d2:	4606      	mov	r6, r0
 80134d4:	460f      	mov	r7, r1
 80134d6:	4640      	mov	r0, r8
 80134d8:	4649      	mov	r1, r9
 80134da:	f7ec fef5 	bl	80002c8 <__aeabi_dsub>
 80134de:	9a05      	ldr	r2, [sp, #20]
 80134e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80134e4:	1ad3      	subs	r3, r2, r3
 80134e6:	2b31      	cmp	r3, #49	@ 0x31
 80134e8:	dc20      	bgt.n	801352c <__ieee754_rem_pio2+0x274>
 80134ea:	e9c4 0100 	strd	r0, r1, [r4]
 80134ee:	46c2      	mov	sl, r8
 80134f0:	46cb      	mov	fp, r9
 80134f2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80134f6:	4650      	mov	r0, sl
 80134f8:	4642      	mov	r2, r8
 80134fa:	464b      	mov	r3, r9
 80134fc:	4659      	mov	r1, fp
 80134fe:	f7ec fee3 	bl	80002c8 <__aeabi_dsub>
 8013502:	463b      	mov	r3, r7
 8013504:	4632      	mov	r2, r6
 8013506:	f7ec fedf 	bl	80002c8 <__aeabi_dsub>
 801350a:	9b04      	ldr	r3, [sp, #16]
 801350c:	2b00      	cmp	r3, #0
 801350e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013512:	f6bf af0e 	bge.w	8013332 <__ieee754_rem_pio2+0x7a>
 8013516:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801351a:	6063      	str	r3, [r4, #4]
 801351c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013520:	f8c4 8000 	str.w	r8, [r4]
 8013524:	60a0      	str	r0, [r4, #8]
 8013526:	60e3      	str	r3, [r4, #12]
 8013528:	426d      	negs	r5, r5
 801352a:	e702      	b.n	8013332 <__ieee754_rem_pio2+0x7a>
 801352c:	a326      	add	r3, pc, #152	@ (adr r3, 80135c8 <__ieee754_rem_pio2+0x310>)
 801352e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013532:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013536:	f7ed f87f 	bl	8000638 <__aeabi_dmul>
 801353a:	4606      	mov	r6, r0
 801353c:	460f      	mov	r7, r1
 801353e:	4602      	mov	r2, r0
 8013540:	460b      	mov	r3, r1
 8013542:	4640      	mov	r0, r8
 8013544:	4649      	mov	r1, r9
 8013546:	f7ec febf 	bl	80002c8 <__aeabi_dsub>
 801354a:	4602      	mov	r2, r0
 801354c:	460b      	mov	r3, r1
 801354e:	4682      	mov	sl, r0
 8013550:	468b      	mov	fp, r1
 8013552:	4640      	mov	r0, r8
 8013554:	4649      	mov	r1, r9
 8013556:	f7ec feb7 	bl	80002c8 <__aeabi_dsub>
 801355a:	4632      	mov	r2, r6
 801355c:	463b      	mov	r3, r7
 801355e:	f7ec feb3 	bl	80002c8 <__aeabi_dsub>
 8013562:	a31b      	add	r3, pc, #108	@ (adr r3, 80135d0 <__ieee754_rem_pio2+0x318>)
 8013564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013568:	4606      	mov	r6, r0
 801356a:	460f      	mov	r7, r1
 801356c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013570:	f7ed f862 	bl	8000638 <__aeabi_dmul>
 8013574:	4632      	mov	r2, r6
 8013576:	463b      	mov	r3, r7
 8013578:	f7ec fea6 	bl	80002c8 <__aeabi_dsub>
 801357c:	4606      	mov	r6, r0
 801357e:	460f      	mov	r7, r1
 8013580:	e764      	b.n	801344c <__ieee754_rem_pio2+0x194>
 8013582:	4b1b      	ldr	r3, [pc, #108]	@ (80135f0 <__ieee754_rem_pio2+0x338>)
 8013584:	4598      	cmp	r8, r3
 8013586:	d935      	bls.n	80135f4 <__ieee754_rem_pio2+0x33c>
 8013588:	4632      	mov	r2, r6
 801358a:	463b      	mov	r3, r7
 801358c:	4630      	mov	r0, r6
 801358e:	4639      	mov	r1, r7
 8013590:	f7ec fe9a 	bl	80002c8 <__aeabi_dsub>
 8013594:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013598:	e9c4 0100 	strd	r0, r1, [r4]
 801359c:	e69e      	b.n	80132dc <__ieee754_rem_pio2+0x24>
 801359e:	bf00      	nop
 80135a0:	54400000 	.word	0x54400000
 80135a4:	3ff921fb 	.word	0x3ff921fb
 80135a8:	1a626331 	.word	0x1a626331
 80135ac:	3dd0b461 	.word	0x3dd0b461
 80135b0:	1a600000 	.word	0x1a600000
 80135b4:	3dd0b461 	.word	0x3dd0b461
 80135b8:	2e037073 	.word	0x2e037073
 80135bc:	3ba3198a 	.word	0x3ba3198a
 80135c0:	6dc9c883 	.word	0x6dc9c883
 80135c4:	3fe45f30 	.word	0x3fe45f30
 80135c8:	2e000000 	.word	0x2e000000
 80135cc:	3ba3198a 	.word	0x3ba3198a
 80135d0:	252049c1 	.word	0x252049c1
 80135d4:	397b839a 	.word	0x397b839a
 80135d8:	3fe921fb 	.word	0x3fe921fb
 80135dc:	4002d97b 	.word	0x4002d97b
 80135e0:	3ff921fb 	.word	0x3ff921fb
 80135e4:	413921fb 	.word	0x413921fb
 80135e8:	3fe00000 	.word	0x3fe00000
 80135ec:	080145d0 	.word	0x080145d0
 80135f0:	7fefffff 	.word	0x7fefffff
 80135f4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80135f8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80135fc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8013600:	4630      	mov	r0, r6
 8013602:	460f      	mov	r7, r1
 8013604:	f7ed fac8 	bl	8000b98 <__aeabi_d2iz>
 8013608:	f7ec ffac 	bl	8000564 <__aeabi_i2d>
 801360c:	4602      	mov	r2, r0
 801360e:	460b      	mov	r3, r1
 8013610:	4630      	mov	r0, r6
 8013612:	4639      	mov	r1, r7
 8013614:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013618:	f7ec fe56 	bl	80002c8 <__aeabi_dsub>
 801361c:	4b22      	ldr	r3, [pc, #136]	@ (80136a8 <__ieee754_rem_pio2+0x3f0>)
 801361e:	2200      	movs	r2, #0
 8013620:	f7ed f80a 	bl	8000638 <__aeabi_dmul>
 8013624:	460f      	mov	r7, r1
 8013626:	4606      	mov	r6, r0
 8013628:	f7ed fab6 	bl	8000b98 <__aeabi_d2iz>
 801362c:	f7ec ff9a 	bl	8000564 <__aeabi_i2d>
 8013630:	4602      	mov	r2, r0
 8013632:	460b      	mov	r3, r1
 8013634:	4630      	mov	r0, r6
 8013636:	4639      	mov	r1, r7
 8013638:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801363c:	f7ec fe44 	bl	80002c8 <__aeabi_dsub>
 8013640:	4b19      	ldr	r3, [pc, #100]	@ (80136a8 <__ieee754_rem_pio2+0x3f0>)
 8013642:	2200      	movs	r2, #0
 8013644:	f7ec fff8 	bl	8000638 <__aeabi_dmul>
 8013648:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801364c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8013650:	f04f 0803 	mov.w	r8, #3
 8013654:	2600      	movs	r6, #0
 8013656:	2700      	movs	r7, #0
 8013658:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801365c:	4632      	mov	r2, r6
 801365e:	463b      	mov	r3, r7
 8013660:	46c2      	mov	sl, r8
 8013662:	f108 38ff 	add.w	r8, r8, #4294967295
 8013666:	f7ed fa4f 	bl	8000b08 <__aeabi_dcmpeq>
 801366a:	2800      	cmp	r0, #0
 801366c:	d1f4      	bne.n	8013658 <__ieee754_rem_pio2+0x3a0>
 801366e:	4b0f      	ldr	r3, [pc, #60]	@ (80136ac <__ieee754_rem_pio2+0x3f4>)
 8013670:	9301      	str	r3, [sp, #4]
 8013672:	2302      	movs	r3, #2
 8013674:	9300      	str	r3, [sp, #0]
 8013676:	462a      	mov	r2, r5
 8013678:	4653      	mov	r3, sl
 801367a:	4621      	mov	r1, r4
 801367c:	a806      	add	r0, sp, #24
 801367e:	f000 f817 	bl	80136b0 <__kernel_rem_pio2>
 8013682:	9b04      	ldr	r3, [sp, #16]
 8013684:	2b00      	cmp	r3, #0
 8013686:	4605      	mov	r5, r0
 8013688:	f6bf ae53 	bge.w	8013332 <__ieee754_rem_pio2+0x7a>
 801368c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8013690:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013694:	e9c4 2300 	strd	r2, r3, [r4]
 8013698:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801369c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80136a0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80136a4:	e740      	b.n	8013528 <__ieee754_rem_pio2+0x270>
 80136a6:	bf00      	nop
 80136a8:	41700000 	.word	0x41700000
 80136ac:	08014650 	.word	0x08014650

080136b0 <__kernel_rem_pio2>:
 80136b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136b4:	ed2d 8b02 	vpush	{d8}
 80136b8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80136bc:	f112 0f14 	cmn.w	r2, #20
 80136c0:	9306      	str	r3, [sp, #24]
 80136c2:	9104      	str	r1, [sp, #16]
 80136c4:	4bbe      	ldr	r3, [pc, #760]	@ (80139c0 <__kernel_rem_pio2+0x310>)
 80136c6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80136c8:	9008      	str	r0, [sp, #32]
 80136ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80136ce:	9300      	str	r3, [sp, #0]
 80136d0:	9b06      	ldr	r3, [sp, #24]
 80136d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80136d6:	bfa8      	it	ge
 80136d8:	1ed4      	subge	r4, r2, #3
 80136da:	9305      	str	r3, [sp, #20]
 80136dc:	bfb2      	itee	lt
 80136de:	2400      	movlt	r4, #0
 80136e0:	2318      	movge	r3, #24
 80136e2:	fb94 f4f3 	sdivge	r4, r4, r3
 80136e6:	f06f 0317 	mvn.w	r3, #23
 80136ea:	fb04 3303 	mla	r3, r4, r3, r3
 80136ee:	eb03 0b02 	add.w	fp, r3, r2
 80136f2:	9b00      	ldr	r3, [sp, #0]
 80136f4:	9a05      	ldr	r2, [sp, #20]
 80136f6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80139b0 <__kernel_rem_pio2+0x300>
 80136fa:	eb03 0802 	add.w	r8, r3, r2
 80136fe:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8013700:	1aa7      	subs	r7, r4, r2
 8013702:	ae20      	add	r6, sp, #128	@ 0x80
 8013704:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8013708:	2500      	movs	r5, #0
 801370a:	4545      	cmp	r5, r8
 801370c:	dd13      	ble.n	8013736 <__kernel_rem_pio2+0x86>
 801370e:	9b06      	ldr	r3, [sp, #24]
 8013710:	aa20      	add	r2, sp, #128	@ 0x80
 8013712:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8013716:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801371a:	f04f 0800 	mov.w	r8, #0
 801371e:	9b00      	ldr	r3, [sp, #0]
 8013720:	4598      	cmp	r8, r3
 8013722:	dc31      	bgt.n	8013788 <__kernel_rem_pio2+0xd8>
 8013724:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80139b0 <__kernel_rem_pio2+0x300>
 8013728:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801372c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013730:	462f      	mov	r7, r5
 8013732:	2600      	movs	r6, #0
 8013734:	e01b      	b.n	801376e <__kernel_rem_pio2+0xbe>
 8013736:	42ef      	cmn	r7, r5
 8013738:	d407      	bmi.n	801374a <__kernel_rem_pio2+0x9a>
 801373a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801373e:	f7ec ff11 	bl	8000564 <__aeabi_i2d>
 8013742:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013746:	3501      	adds	r5, #1
 8013748:	e7df      	b.n	801370a <__kernel_rem_pio2+0x5a>
 801374a:	ec51 0b18 	vmov	r0, r1, d8
 801374e:	e7f8      	b.n	8013742 <__kernel_rem_pio2+0x92>
 8013750:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013754:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013758:	f7ec ff6e 	bl	8000638 <__aeabi_dmul>
 801375c:	4602      	mov	r2, r0
 801375e:	460b      	mov	r3, r1
 8013760:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013764:	f7ec fdb2 	bl	80002cc <__adddf3>
 8013768:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801376c:	3601      	adds	r6, #1
 801376e:	9b05      	ldr	r3, [sp, #20]
 8013770:	429e      	cmp	r6, r3
 8013772:	f1a7 0708 	sub.w	r7, r7, #8
 8013776:	ddeb      	ble.n	8013750 <__kernel_rem_pio2+0xa0>
 8013778:	ed9d 7b02 	vldr	d7, [sp, #8]
 801377c:	f108 0801 	add.w	r8, r8, #1
 8013780:	ecaa 7b02 	vstmia	sl!, {d7}
 8013784:	3508      	adds	r5, #8
 8013786:	e7ca      	b.n	801371e <__kernel_rem_pio2+0x6e>
 8013788:	9b00      	ldr	r3, [sp, #0]
 801378a:	f8dd 8000 	ldr.w	r8, [sp]
 801378e:	aa0c      	add	r2, sp, #48	@ 0x30
 8013790:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013794:	930a      	str	r3, [sp, #40]	@ 0x28
 8013796:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8013798:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801379c:	9309      	str	r3, [sp, #36]	@ 0x24
 801379e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80137a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80137a4:	ab98      	add	r3, sp, #608	@ 0x260
 80137a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80137aa:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80137ae:	ed8d 7b02 	vstr	d7, [sp, #8]
 80137b2:	ac0c      	add	r4, sp, #48	@ 0x30
 80137b4:	ab70      	add	r3, sp, #448	@ 0x1c0
 80137b6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80137ba:	46a1      	mov	r9, r4
 80137bc:	46c2      	mov	sl, r8
 80137be:	f1ba 0f00 	cmp.w	sl, #0
 80137c2:	f1a5 0508 	sub.w	r5, r5, #8
 80137c6:	dc77      	bgt.n	80138b8 <__kernel_rem_pio2+0x208>
 80137c8:	4658      	mov	r0, fp
 80137ca:	ed9d 0b02 	vldr	d0, [sp, #8]
 80137ce:	f000 fac7 	bl	8013d60 <scalbn>
 80137d2:	ec57 6b10 	vmov	r6, r7, d0
 80137d6:	2200      	movs	r2, #0
 80137d8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80137dc:	4630      	mov	r0, r6
 80137de:	4639      	mov	r1, r7
 80137e0:	f7ec ff2a 	bl	8000638 <__aeabi_dmul>
 80137e4:	ec41 0b10 	vmov	d0, r0, r1
 80137e8:	f000 fb3a 	bl	8013e60 <floor>
 80137ec:	4b75      	ldr	r3, [pc, #468]	@ (80139c4 <__kernel_rem_pio2+0x314>)
 80137ee:	ec51 0b10 	vmov	r0, r1, d0
 80137f2:	2200      	movs	r2, #0
 80137f4:	f7ec ff20 	bl	8000638 <__aeabi_dmul>
 80137f8:	4602      	mov	r2, r0
 80137fa:	460b      	mov	r3, r1
 80137fc:	4630      	mov	r0, r6
 80137fe:	4639      	mov	r1, r7
 8013800:	f7ec fd62 	bl	80002c8 <__aeabi_dsub>
 8013804:	460f      	mov	r7, r1
 8013806:	4606      	mov	r6, r0
 8013808:	f7ed f9c6 	bl	8000b98 <__aeabi_d2iz>
 801380c:	9002      	str	r0, [sp, #8]
 801380e:	f7ec fea9 	bl	8000564 <__aeabi_i2d>
 8013812:	4602      	mov	r2, r0
 8013814:	460b      	mov	r3, r1
 8013816:	4630      	mov	r0, r6
 8013818:	4639      	mov	r1, r7
 801381a:	f7ec fd55 	bl	80002c8 <__aeabi_dsub>
 801381e:	f1bb 0f00 	cmp.w	fp, #0
 8013822:	4606      	mov	r6, r0
 8013824:	460f      	mov	r7, r1
 8013826:	dd6c      	ble.n	8013902 <__kernel_rem_pio2+0x252>
 8013828:	f108 31ff 	add.w	r1, r8, #4294967295
 801382c:	ab0c      	add	r3, sp, #48	@ 0x30
 801382e:	9d02      	ldr	r5, [sp, #8]
 8013830:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013834:	f1cb 0018 	rsb	r0, fp, #24
 8013838:	fa43 f200 	asr.w	r2, r3, r0
 801383c:	4415      	add	r5, r2
 801383e:	4082      	lsls	r2, r0
 8013840:	1a9b      	subs	r3, r3, r2
 8013842:	aa0c      	add	r2, sp, #48	@ 0x30
 8013844:	9502      	str	r5, [sp, #8]
 8013846:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801384a:	f1cb 0217 	rsb	r2, fp, #23
 801384e:	fa43 f902 	asr.w	r9, r3, r2
 8013852:	f1b9 0f00 	cmp.w	r9, #0
 8013856:	dd64      	ble.n	8013922 <__kernel_rem_pio2+0x272>
 8013858:	9b02      	ldr	r3, [sp, #8]
 801385a:	2200      	movs	r2, #0
 801385c:	3301      	adds	r3, #1
 801385e:	9302      	str	r3, [sp, #8]
 8013860:	4615      	mov	r5, r2
 8013862:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8013866:	4590      	cmp	r8, r2
 8013868:	f300 80b8 	bgt.w	80139dc <__kernel_rem_pio2+0x32c>
 801386c:	f1bb 0f00 	cmp.w	fp, #0
 8013870:	dd07      	ble.n	8013882 <__kernel_rem_pio2+0x1d2>
 8013872:	f1bb 0f01 	cmp.w	fp, #1
 8013876:	f000 80bf 	beq.w	80139f8 <__kernel_rem_pio2+0x348>
 801387a:	f1bb 0f02 	cmp.w	fp, #2
 801387e:	f000 80c6 	beq.w	8013a0e <__kernel_rem_pio2+0x35e>
 8013882:	f1b9 0f02 	cmp.w	r9, #2
 8013886:	d14c      	bne.n	8013922 <__kernel_rem_pio2+0x272>
 8013888:	4632      	mov	r2, r6
 801388a:	463b      	mov	r3, r7
 801388c:	494e      	ldr	r1, [pc, #312]	@ (80139c8 <__kernel_rem_pio2+0x318>)
 801388e:	2000      	movs	r0, #0
 8013890:	f7ec fd1a 	bl	80002c8 <__aeabi_dsub>
 8013894:	4606      	mov	r6, r0
 8013896:	460f      	mov	r7, r1
 8013898:	2d00      	cmp	r5, #0
 801389a:	d042      	beq.n	8013922 <__kernel_rem_pio2+0x272>
 801389c:	4658      	mov	r0, fp
 801389e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80139b8 <__kernel_rem_pio2+0x308>
 80138a2:	f000 fa5d 	bl	8013d60 <scalbn>
 80138a6:	4630      	mov	r0, r6
 80138a8:	4639      	mov	r1, r7
 80138aa:	ec53 2b10 	vmov	r2, r3, d0
 80138ae:	f7ec fd0b 	bl	80002c8 <__aeabi_dsub>
 80138b2:	4606      	mov	r6, r0
 80138b4:	460f      	mov	r7, r1
 80138b6:	e034      	b.n	8013922 <__kernel_rem_pio2+0x272>
 80138b8:	4b44      	ldr	r3, [pc, #272]	@ (80139cc <__kernel_rem_pio2+0x31c>)
 80138ba:	2200      	movs	r2, #0
 80138bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80138c0:	f7ec feba 	bl	8000638 <__aeabi_dmul>
 80138c4:	f7ed f968 	bl	8000b98 <__aeabi_d2iz>
 80138c8:	f7ec fe4c 	bl	8000564 <__aeabi_i2d>
 80138cc:	4b40      	ldr	r3, [pc, #256]	@ (80139d0 <__kernel_rem_pio2+0x320>)
 80138ce:	2200      	movs	r2, #0
 80138d0:	4606      	mov	r6, r0
 80138d2:	460f      	mov	r7, r1
 80138d4:	f7ec feb0 	bl	8000638 <__aeabi_dmul>
 80138d8:	4602      	mov	r2, r0
 80138da:	460b      	mov	r3, r1
 80138dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80138e0:	f7ec fcf2 	bl	80002c8 <__aeabi_dsub>
 80138e4:	f7ed f958 	bl	8000b98 <__aeabi_d2iz>
 80138e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80138ec:	f849 0b04 	str.w	r0, [r9], #4
 80138f0:	4639      	mov	r1, r7
 80138f2:	4630      	mov	r0, r6
 80138f4:	f7ec fcea 	bl	80002cc <__adddf3>
 80138f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80138fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013900:	e75d      	b.n	80137be <__kernel_rem_pio2+0x10e>
 8013902:	d107      	bne.n	8013914 <__kernel_rem_pio2+0x264>
 8013904:	f108 33ff 	add.w	r3, r8, #4294967295
 8013908:	aa0c      	add	r2, sp, #48	@ 0x30
 801390a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801390e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8013912:	e79e      	b.n	8013852 <__kernel_rem_pio2+0x1a2>
 8013914:	4b2f      	ldr	r3, [pc, #188]	@ (80139d4 <__kernel_rem_pio2+0x324>)
 8013916:	2200      	movs	r2, #0
 8013918:	f7ed f914 	bl	8000b44 <__aeabi_dcmpge>
 801391c:	2800      	cmp	r0, #0
 801391e:	d143      	bne.n	80139a8 <__kernel_rem_pio2+0x2f8>
 8013920:	4681      	mov	r9, r0
 8013922:	2200      	movs	r2, #0
 8013924:	2300      	movs	r3, #0
 8013926:	4630      	mov	r0, r6
 8013928:	4639      	mov	r1, r7
 801392a:	f7ed f8ed 	bl	8000b08 <__aeabi_dcmpeq>
 801392e:	2800      	cmp	r0, #0
 8013930:	f000 80bf 	beq.w	8013ab2 <__kernel_rem_pio2+0x402>
 8013934:	f108 33ff 	add.w	r3, r8, #4294967295
 8013938:	2200      	movs	r2, #0
 801393a:	9900      	ldr	r1, [sp, #0]
 801393c:	428b      	cmp	r3, r1
 801393e:	da6e      	bge.n	8013a1e <__kernel_rem_pio2+0x36e>
 8013940:	2a00      	cmp	r2, #0
 8013942:	f000 8089 	beq.w	8013a58 <__kernel_rem_pio2+0x3a8>
 8013946:	f108 38ff 	add.w	r8, r8, #4294967295
 801394a:	ab0c      	add	r3, sp, #48	@ 0x30
 801394c:	f1ab 0b18 	sub.w	fp, fp, #24
 8013950:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8013954:	2b00      	cmp	r3, #0
 8013956:	d0f6      	beq.n	8013946 <__kernel_rem_pio2+0x296>
 8013958:	4658      	mov	r0, fp
 801395a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80139b8 <__kernel_rem_pio2+0x308>
 801395e:	f000 f9ff 	bl	8013d60 <scalbn>
 8013962:	f108 0301 	add.w	r3, r8, #1
 8013966:	00da      	lsls	r2, r3, #3
 8013968:	9205      	str	r2, [sp, #20]
 801396a:	ec55 4b10 	vmov	r4, r5, d0
 801396e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8013970:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80139cc <__kernel_rem_pio2+0x31c>
 8013974:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8013978:	4646      	mov	r6, r8
 801397a:	f04f 0a00 	mov.w	sl, #0
 801397e:	2e00      	cmp	r6, #0
 8013980:	f280 80cf 	bge.w	8013b22 <__kernel_rem_pio2+0x472>
 8013984:	4644      	mov	r4, r8
 8013986:	2c00      	cmp	r4, #0
 8013988:	f2c0 80fd 	blt.w	8013b86 <__kernel_rem_pio2+0x4d6>
 801398c:	4b12      	ldr	r3, [pc, #72]	@ (80139d8 <__kernel_rem_pio2+0x328>)
 801398e:	461f      	mov	r7, r3
 8013990:	ab70      	add	r3, sp, #448	@ 0x1c0
 8013992:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013996:	9306      	str	r3, [sp, #24]
 8013998:	f04f 0a00 	mov.w	sl, #0
 801399c:	f04f 0b00 	mov.w	fp, #0
 80139a0:	2600      	movs	r6, #0
 80139a2:	eba8 0504 	sub.w	r5, r8, r4
 80139a6:	e0e2      	b.n	8013b6e <__kernel_rem_pio2+0x4be>
 80139a8:	f04f 0902 	mov.w	r9, #2
 80139ac:	e754      	b.n	8013858 <__kernel_rem_pio2+0x1a8>
 80139ae:	bf00      	nop
	...
 80139bc:	3ff00000 	.word	0x3ff00000
 80139c0:	08014798 	.word	0x08014798
 80139c4:	40200000 	.word	0x40200000
 80139c8:	3ff00000 	.word	0x3ff00000
 80139cc:	3e700000 	.word	0x3e700000
 80139d0:	41700000 	.word	0x41700000
 80139d4:	3fe00000 	.word	0x3fe00000
 80139d8:	08014758 	.word	0x08014758
 80139dc:	f854 3b04 	ldr.w	r3, [r4], #4
 80139e0:	b945      	cbnz	r5, 80139f4 <__kernel_rem_pio2+0x344>
 80139e2:	b123      	cbz	r3, 80139ee <__kernel_rem_pio2+0x33e>
 80139e4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80139e8:	f844 3c04 	str.w	r3, [r4, #-4]
 80139ec:	2301      	movs	r3, #1
 80139ee:	3201      	adds	r2, #1
 80139f0:	461d      	mov	r5, r3
 80139f2:	e738      	b.n	8013866 <__kernel_rem_pio2+0x1b6>
 80139f4:	1acb      	subs	r3, r1, r3
 80139f6:	e7f7      	b.n	80139e8 <__kernel_rem_pio2+0x338>
 80139f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80139fc:	ab0c      	add	r3, sp, #48	@ 0x30
 80139fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a02:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013a06:	a90c      	add	r1, sp, #48	@ 0x30
 8013a08:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013a0c:	e739      	b.n	8013882 <__kernel_rem_pio2+0x1d2>
 8013a0e:	f108 32ff 	add.w	r2, r8, #4294967295
 8013a12:	ab0c      	add	r3, sp, #48	@ 0x30
 8013a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a18:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013a1c:	e7f3      	b.n	8013a06 <__kernel_rem_pio2+0x356>
 8013a1e:	a90c      	add	r1, sp, #48	@ 0x30
 8013a20:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8013a24:	3b01      	subs	r3, #1
 8013a26:	430a      	orrs	r2, r1
 8013a28:	e787      	b.n	801393a <__kernel_rem_pio2+0x28a>
 8013a2a:	3401      	adds	r4, #1
 8013a2c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013a30:	2a00      	cmp	r2, #0
 8013a32:	d0fa      	beq.n	8013a2a <__kernel_rem_pio2+0x37a>
 8013a34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013a36:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8013a3a:	eb0d 0503 	add.w	r5, sp, r3
 8013a3e:	9b06      	ldr	r3, [sp, #24]
 8013a40:	aa20      	add	r2, sp, #128	@ 0x80
 8013a42:	4443      	add	r3, r8
 8013a44:	f108 0701 	add.w	r7, r8, #1
 8013a48:	3d98      	subs	r5, #152	@ 0x98
 8013a4a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8013a4e:	4444      	add	r4, r8
 8013a50:	42bc      	cmp	r4, r7
 8013a52:	da04      	bge.n	8013a5e <__kernel_rem_pio2+0x3ae>
 8013a54:	46a0      	mov	r8, r4
 8013a56:	e6a2      	b.n	801379e <__kernel_rem_pio2+0xee>
 8013a58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013a5a:	2401      	movs	r4, #1
 8013a5c:	e7e6      	b.n	8013a2c <__kernel_rem_pio2+0x37c>
 8013a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013a60:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8013a64:	f7ec fd7e 	bl	8000564 <__aeabi_i2d>
 8013a68:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8013d30 <__kernel_rem_pio2+0x680>
 8013a6c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013a70:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013a74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013a78:	46b2      	mov	sl, r6
 8013a7a:	f04f 0800 	mov.w	r8, #0
 8013a7e:	9b05      	ldr	r3, [sp, #20]
 8013a80:	4598      	cmp	r8, r3
 8013a82:	dd05      	ble.n	8013a90 <__kernel_rem_pio2+0x3e0>
 8013a84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013a88:	3701      	adds	r7, #1
 8013a8a:	eca5 7b02 	vstmia	r5!, {d7}
 8013a8e:	e7df      	b.n	8013a50 <__kernel_rem_pio2+0x3a0>
 8013a90:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8013a94:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013a98:	f7ec fdce 	bl	8000638 <__aeabi_dmul>
 8013a9c:	4602      	mov	r2, r0
 8013a9e:	460b      	mov	r3, r1
 8013aa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013aa4:	f7ec fc12 	bl	80002cc <__adddf3>
 8013aa8:	f108 0801 	add.w	r8, r8, #1
 8013aac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013ab0:	e7e5      	b.n	8013a7e <__kernel_rem_pio2+0x3ce>
 8013ab2:	f1cb 0000 	rsb	r0, fp, #0
 8013ab6:	ec47 6b10 	vmov	d0, r6, r7
 8013aba:	f000 f951 	bl	8013d60 <scalbn>
 8013abe:	ec55 4b10 	vmov	r4, r5, d0
 8013ac2:	4b9d      	ldr	r3, [pc, #628]	@ (8013d38 <__kernel_rem_pio2+0x688>)
 8013ac4:	2200      	movs	r2, #0
 8013ac6:	4620      	mov	r0, r4
 8013ac8:	4629      	mov	r1, r5
 8013aca:	f7ed f83b 	bl	8000b44 <__aeabi_dcmpge>
 8013ace:	b300      	cbz	r0, 8013b12 <__kernel_rem_pio2+0x462>
 8013ad0:	4b9a      	ldr	r3, [pc, #616]	@ (8013d3c <__kernel_rem_pio2+0x68c>)
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	4620      	mov	r0, r4
 8013ad6:	4629      	mov	r1, r5
 8013ad8:	f7ec fdae 	bl	8000638 <__aeabi_dmul>
 8013adc:	f7ed f85c 	bl	8000b98 <__aeabi_d2iz>
 8013ae0:	4606      	mov	r6, r0
 8013ae2:	f7ec fd3f 	bl	8000564 <__aeabi_i2d>
 8013ae6:	4b94      	ldr	r3, [pc, #592]	@ (8013d38 <__kernel_rem_pio2+0x688>)
 8013ae8:	2200      	movs	r2, #0
 8013aea:	f7ec fda5 	bl	8000638 <__aeabi_dmul>
 8013aee:	460b      	mov	r3, r1
 8013af0:	4602      	mov	r2, r0
 8013af2:	4629      	mov	r1, r5
 8013af4:	4620      	mov	r0, r4
 8013af6:	f7ec fbe7 	bl	80002c8 <__aeabi_dsub>
 8013afa:	f7ed f84d 	bl	8000b98 <__aeabi_d2iz>
 8013afe:	ab0c      	add	r3, sp, #48	@ 0x30
 8013b00:	f10b 0b18 	add.w	fp, fp, #24
 8013b04:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8013b08:	f108 0801 	add.w	r8, r8, #1
 8013b0c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8013b10:	e722      	b.n	8013958 <__kernel_rem_pio2+0x2a8>
 8013b12:	4620      	mov	r0, r4
 8013b14:	4629      	mov	r1, r5
 8013b16:	f7ed f83f 	bl	8000b98 <__aeabi_d2iz>
 8013b1a:	ab0c      	add	r3, sp, #48	@ 0x30
 8013b1c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8013b20:	e71a      	b.n	8013958 <__kernel_rem_pio2+0x2a8>
 8013b22:	ab0c      	add	r3, sp, #48	@ 0x30
 8013b24:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013b28:	f7ec fd1c 	bl	8000564 <__aeabi_i2d>
 8013b2c:	4622      	mov	r2, r4
 8013b2e:	462b      	mov	r3, r5
 8013b30:	f7ec fd82 	bl	8000638 <__aeabi_dmul>
 8013b34:	4652      	mov	r2, sl
 8013b36:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8013b3a:	465b      	mov	r3, fp
 8013b3c:	4620      	mov	r0, r4
 8013b3e:	4629      	mov	r1, r5
 8013b40:	f7ec fd7a 	bl	8000638 <__aeabi_dmul>
 8013b44:	3e01      	subs	r6, #1
 8013b46:	4604      	mov	r4, r0
 8013b48:	460d      	mov	r5, r1
 8013b4a:	e718      	b.n	801397e <__kernel_rem_pio2+0x2ce>
 8013b4c:	9906      	ldr	r1, [sp, #24]
 8013b4e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8013b52:	9106      	str	r1, [sp, #24]
 8013b54:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8013b58:	f7ec fd6e 	bl	8000638 <__aeabi_dmul>
 8013b5c:	4602      	mov	r2, r0
 8013b5e:	460b      	mov	r3, r1
 8013b60:	4650      	mov	r0, sl
 8013b62:	4659      	mov	r1, fp
 8013b64:	f7ec fbb2 	bl	80002cc <__adddf3>
 8013b68:	3601      	adds	r6, #1
 8013b6a:	4682      	mov	sl, r0
 8013b6c:	468b      	mov	fp, r1
 8013b6e:	9b00      	ldr	r3, [sp, #0]
 8013b70:	429e      	cmp	r6, r3
 8013b72:	dc01      	bgt.n	8013b78 <__kernel_rem_pio2+0x4c8>
 8013b74:	42b5      	cmp	r5, r6
 8013b76:	dae9      	bge.n	8013b4c <__kernel_rem_pio2+0x49c>
 8013b78:	ab48      	add	r3, sp, #288	@ 0x120
 8013b7a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013b7e:	e9c5 ab00 	strd	sl, fp, [r5]
 8013b82:	3c01      	subs	r4, #1
 8013b84:	e6ff      	b.n	8013986 <__kernel_rem_pio2+0x2d6>
 8013b86:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8013b88:	2b02      	cmp	r3, #2
 8013b8a:	dc0b      	bgt.n	8013ba4 <__kernel_rem_pio2+0x4f4>
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	dc39      	bgt.n	8013c04 <__kernel_rem_pio2+0x554>
 8013b90:	d05d      	beq.n	8013c4e <__kernel_rem_pio2+0x59e>
 8013b92:	9b02      	ldr	r3, [sp, #8]
 8013b94:	f003 0007 	and.w	r0, r3, #7
 8013b98:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8013b9c:	ecbd 8b02 	vpop	{d8}
 8013ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ba4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8013ba6:	2b03      	cmp	r3, #3
 8013ba8:	d1f3      	bne.n	8013b92 <__kernel_rem_pio2+0x4e2>
 8013baa:	9b05      	ldr	r3, [sp, #20]
 8013bac:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8013bb0:	eb0d 0403 	add.w	r4, sp, r3
 8013bb4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8013bb8:	4625      	mov	r5, r4
 8013bba:	46c2      	mov	sl, r8
 8013bbc:	f1ba 0f00 	cmp.w	sl, #0
 8013bc0:	f1a5 0508 	sub.w	r5, r5, #8
 8013bc4:	dc6b      	bgt.n	8013c9e <__kernel_rem_pio2+0x5ee>
 8013bc6:	4645      	mov	r5, r8
 8013bc8:	2d01      	cmp	r5, #1
 8013bca:	f1a4 0408 	sub.w	r4, r4, #8
 8013bce:	f300 8087 	bgt.w	8013ce0 <__kernel_rem_pio2+0x630>
 8013bd2:	9c05      	ldr	r4, [sp, #20]
 8013bd4:	ab48      	add	r3, sp, #288	@ 0x120
 8013bd6:	441c      	add	r4, r3
 8013bd8:	2000      	movs	r0, #0
 8013bda:	2100      	movs	r1, #0
 8013bdc:	f1b8 0f01 	cmp.w	r8, #1
 8013be0:	f300 809c 	bgt.w	8013d1c <__kernel_rem_pio2+0x66c>
 8013be4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8013be8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8013bec:	f1b9 0f00 	cmp.w	r9, #0
 8013bf0:	f040 80a6 	bne.w	8013d40 <__kernel_rem_pio2+0x690>
 8013bf4:	9b04      	ldr	r3, [sp, #16]
 8013bf6:	e9c3 7800 	strd	r7, r8, [r3]
 8013bfa:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8013bfe:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8013c02:	e7c6      	b.n	8013b92 <__kernel_rem_pio2+0x4e2>
 8013c04:	9d05      	ldr	r5, [sp, #20]
 8013c06:	ab48      	add	r3, sp, #288	@ 0x120
 8013c08:	441d      	add	r5, r3
 8013c0a:	4644      	mov	r4, r8
 8013c0c:	2000      	movs	r0, #0
 8013c0e:	2100      	movs	r1, #0
 8013c10:	2c00      	cmp	r4, #0
 8013c12:	da35      	bge.n	8013c80 <__kernel_rem_pio2+0x5d0>
 8013c14:	f1b9 0f00 	cmp.w	r9, #0
 8013c18:	d038      	beq.n	8013c8c <__kernel_rem_pio2+0x5dc>
 8013c1a:	4602      	mov	r2, r0
 8013c1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013c20:	9c04      	ldr	r4, [sp, #16]
 8013c22:	e9c4 2300 	strd	r2, r3, [r4]
 8013c26:	4602      	mov	r2, r0
 8013c28:	460b      	mov	r3, r1
 8013c2a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8013c2e:	f7ec fb4b 	bl	80002c8 <__aeabi_dsub>
 8013c32:	ad4a      	add	r5, sp, #296	@ 0x128
 8013c34:	2401      	movs	r4, #1
 8013c36:	45a0      	cmp	r8, r4
 8013c38:	da2b      	bge.n	8013c92 <__kernel_rem_pio2+0x5e2>
 8013c3a:	f1b9 0f00 	cmp.w	r9, #0
 8013c3e:	d002      	beq.n	8013c46 <__kernel_rem_pio2+0x596>
 8013c40:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013c44:	4619      	mov	r1, r3
 8013c46:	9b04      	ldr	r3, [sp, #16]
 8013c48:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013c4c:	e7a1      	b.n	8013b92 <__kernel_rem_pio2+0x4e2>
 8013c4e:	9c05      	ldr	r4, [sp, #20]
 8013c50:	ab48      	add	r3, sp, #288	@ 0x120
 8013c52:	441c      	add	r4, r3
 8013c54:	2000      	movs	r0, #0
 8013c56:	2100      	movs	r1, #0
 8013c58:	f1b8 0f00 	cmp.w	r8, #0
 8013c5c:	da09      	bge.n	8013c72 <__kernel_rem_pio2+0x5c2>
 8013c5e:	f1b9 0f00 	cmp.w	r9, #0
 8013c62:	d002      	beq.n	8013c6a <__kernel_rem_pio2+0x5ba>
 8013c64:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013c68:	4619      	mov	r1, r3
 8013c6a:	9b04      	ldr	r3, [sp, #16]
 8013c6c:	e9c3 0100 	strd	r0, r1, [r3]
 8013c70:	e78f      	b.n	8013b92 <__kernel_rem_pio2+0x4e2>
 8013c72:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013c76:	f7ec fb29 	bl	80002cc <__adddf3>
 8013c7a:	f108 38ff 	add.w	r8, r8, #4294967295
 8013c7e:	e7eb      	b.n	8013c58 <__kernel_rem_pio2+0x5a8>
 8013c80:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8013c84:	f7ec fb22 	bl	80002cc <__adddf3>
 8013c88:	3c01      	subs	r4, #1
 8013c8a:	e7c1      	b.n	8013c10 <__kernel_rem_pio2+0x560>
 8013c8c:	4602      	mov	r2, r0
 8013c8e:	460b      	mov	r3, r1
 8013c90:	e7c6      	b.n	8013c20 <__kernel_rem_pio2+0x570>
 8013c92:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8013c96:	f7ec fb19 	bl	80002cc <__adddf3>
 8013c9a:	3401      	adds	r4, #1
 8013c9c:	e7cb      	b.n	8013c36 <__kernel_rem_pio2+0x586>
 8013c9e:	ed95 7b00 	vldr	d7, [r5]
 8013ca2:	ed8d 7b00 	vstr	d7, [sp]
 8013ca6:	ed95 7b02 	vldr	d7, [r5, #8]
 8013caa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013cae:	ec53 2b17 	vmov	r2, r3, d7
 8013cb2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013cb6:	f7ec fb09 	bl	80002cc <__adddf3>
 8013cba:	4602      	mov	r2, r0
 8013cbc:	460b      	mov	r3, r1
 8013cbe:	4606      	mov	r6, r0
 8013cc0:	460f      	mov	r7, r1
 8013cc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013cc6:	f7ec faff 	bl	80002c8 <__aeabi_dsub>
 8013cca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013cce:	f7ec fafd 	bl	80002cc <__adddf3>
 8013cd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013cd6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8013cda:	e9c5 6700 	strd	r6, r7, [r5]
 8013cde:	e76d      	b.n	8013bbc <__kernel_rem_pio2+0x50c>
 8013ce0:	ed94 7b00 	vldr	d7, [r4]
 8013ce4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8013ce8:	ec51 0b17 	vmov	r0, r1, d7
 8013cec:	4652      	mov	r2, sl
 8013cee:	465b      	mov	r3, fp
 8013cf0:	ed8d 7b00 	vstr	d7, [sp]
 8013cf4:	f7ec faea 	bl	80002cc <__adddf3>
 8013cf8:	4602      	mov	r2, r0
 8013cfa:	460b      	mov	r3, r1
 8013cfc:	4606      	mov	r6, r0
 8013cfe:	460f      	mov	r7, r1
 8013d00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013d04:	f7ec fae0 	bl	80002c8 <__aeabi_dsub>
 8013d08:	4652      	mov	r2, sl
 8013d0a:	465b      	mov	r3, fp
 8013d0c:	f7ec fade 	bl	80002cc <__adddf3>
 8013d10:	3d01      	subs	r5, #1
 8013d12:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013d16:	e9c4 6700 	strd	r6, r7, [r4]
 8013d1a:	e755      	b.n	8013bc8 <__kernel_rem_pio2+0x518>
 8013d1c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013d20:	f7ec fad4 	bl	80002cc <__adddf3>
 8013d24:	f108 38ff 	add.w	r8, r8, #4294967295
 8013d28:	e758      	b.n	8013bdc <__kernel_rem_pio2+0x52c>
 8013d2a:	bf00      	nop
 8013d2c:	f3af 8000 	nop.w
	...
 8013d38:	41700000 	.word	0x41700000
 8013d3c:	3e700000 	.word	0x3e700000
 8013d40:	9b04      	ldr	r3, [sp, #16]
 8013d42:	9a04      	ldr	r2, [sp, #16]
 8013d44:	601f      	str	r7, [r3, #0]
 8013d46:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8013d4a:	605c      	str	r4, [r3, #4]
 8013d4c:	609d      	str	r5, [r3, #8]
 8013d4e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8013d52:	60d3      	str	r3, [r2, #12]
 8013d54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013d58:	6110      	str	r0, [r2, #16]
 8013d5a:	6153      	str	r3, [r2, #20]
 8013d5c:	e719      	b.n	8013b92 <__kernel_rem_pio2+0x4e2>
 8013d5e:	bf00      	nop

08013d60 <scalbn>:
 8013d60:	b570      	push	{r4, r5, r6, lr}
 8013d62:	ec55 4b10 	vmov	r4, r5, d0
 8013d66:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8013d6a:	4606      	mov	r6, r0
 8013d6c:	462b      	mov	r3, r5
 8013d6e:	b991      	cbnz	r1, 8013d96 <scalbn+0x36>
 8013d70:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8013d74:	4323      	orrs	r3, r4
 8013d76:	d03d      	beq.n	8013df4 <scalbn+0x94>
 8013d78:	4b35      	ldr	r3, [pc, #212]	@ (8013e50 <scalbn+0xf0>)
 8013d7a:	4620      	mov	r0, r4
 8013d7c:	4629      	mov	r1, r5
 8013d7e:	2200      	movs	r2, #0
 8013d80:	f7ec fc5a 	bl	8000638 <__aeabi_dmul>
 8013d84:	4b33      	ldr	r3, [pc, #204]	@ (8013e54 <scalbn+0xf4>)
 8013d86:	429e      	cmp	r6, r3
 8013d88:	4604      	mov	r4, r0
 8013d8a:	460d      	mov	r5, r1
 8013d8c:	da0f      	bge.n	8013dae <scalbn+0x4e>
 8013d8e:	a328      	add	r3, pc, #160	@ (adr r3, 8013e30 <scalbn+0xd0>)
 8013d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d94:	e01e      	b.n	8013dd4 <scalbn+0x74>
 8013d96:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8013d9a:	4291      	cmp	r1, r2
 8013d9c:	d10b      	bne.n	8013db6 <scalbn+0x56>
 8013d9e:	4622      	mov	r2, r4
 8013da0:	4620      	mov	r0, r4
 8013da2:	4629      	mov	r1, r5
 8013da4:	f7ec fa92 	bl	80002cc <__adddf3>
 8013da8:	4604      	mov	r4, r0
 8013daa:	460d      	mov	r5, r1
 8013dac:	e022      	b.n	8013df4 <scalbn+0x94>
 8013dae:	460b      	mov	r3, r1
 8013db0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8013db4:	3936      	subs	r1, #54	@ 0x36
 8013db6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8013dba:	4296      	cmp	r6, r2
 8013dbc:	dd0d      	ble.n	8013dda <scalbn+0x7a>
 8013dbe:	2d00      	cmp	r5, #0
 8013dc0:	a11d      	add	r1, pc, #116	@ (adr r1, 8013e38 <scalbn+0xd8>)
 8013dc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013dc6:	da02      	bge.n	8013dce <scalbn+0x6e>
 8013dc8:	a11d      	add	r1, pc, #116	@ (adr r1, 8013e40 <scalbn+0xe0>)
 8013dca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013dce:	a31a      	add	r3, pc, #104	@ (adr r3, 8013e38 <scalbn+0xd8>)
 8013dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dd4:	f7ec fc30 	bl	8000638 <__aeabi_dmul>
 8013dd8:	e7e6      	b.n	8013da8 <scalbn+0x48>
 8013dda:	1872      	adds	r2, r6, r1
 8013ddc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8013de0:	428a      	cmp	r2, r1
 8013de2:	dcec      	bgt.n	8013dbe <scalbn+0x5e>
 8013de4:	2a00      	cmp	r2, #0
 8013de6:	dd08      	ble.n	8013dfa <scalbn+0x9a>
 8013de8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013dec:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8013df0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013df4:	ec45 4b10 	vmov	d0, r4, r5
 8013df8:	bd70      	pop	{r4, r5, r6, pc}
 8013dfa:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8013dfe:	da08      	bge.n	8013e12 <scalbn+0xb2>
 8013e00:	2d00      	cmp	r5, #0
 8013e02:	a10b      	add	r1, pc, #44	@ (adr r1, 8013e30 <scalbn+0xd0>)
 8013e04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e08:	dac1      	bge.n	8013d8e <scalbn+0x2e>
 8013e0a:	a10f      	add	r1, pc, #60	@ (adr r1, 8013e48 <scalbn+0xe8>)
 8013e0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e10:	e7bd      	b.n	8013d8e <scalbn+0x2e>
 8013e12:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013e16:	3236      	adds	r2, #54	@ 0x36
 8013e18:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8013e1c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013e20:	4620      	mov	r0, r4
 8013e22:	4b0d      	ldr	r3, [pc, #52]	@ (8013e58 <scalbn+0xf8>)
 8013e24:	4629      	mov	r1, r5
 8013e26:	2200      	movs	r2, #0
 8013e28:	e7d4      	b.n	8013dd4 <scalbn+0x74>
 8013e2a:	bf00      	nop
 8013e2c:	f3af 8000 	nop.w
 8013e30:	c2f8f359 	.word	0xc2f8f359
 8013e34:	01a56e1f 	.word	0x01a56e1f
 8013e38:	8800759c 	.word	0x8800759c
 8013e3c:	7e37e43c 	.word	0x7e37e43c
 8013e40:	8800759c 	.word	0x8800759c
 8013e44:	fe37e43c 	.word	0xfe37e43c
 8013e48:	c2f8f359 	.word	0xc2f8f359
 8013e4c:	81a56e1f 	.word	0x81a56e1f
 8013e50:	43500000 	.word	0x43500000
 8013e54:	ffff3cb0 	.word	0xffff3cb0
 8013e58:	3c900000 	.word	0x3c900000
 8013e5c:	00000000 	.word	0x00000000

08013e60 <floor>:
 8013e60:	ec51 0b10 	vmov	r0, r1, d0
 8013e64:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e6c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8013e70:	2e13      	cmp	r6, #19
 8013e72:	460c      	mov	r4, r1
 8013e74:	4605      	mov	r5, r0
 8013e76:	4680      	mov	r8, r0
 8013e78:	dc34      	bgt.n	8013ee4 <floor+0x84>
 8013e7a:	2e00      	cmp	r6, #0
 8013e7c:	da17      	bge.n	8013eae <floor+0x4e>
 8013e7e:	a332      	add	r3, pc, #200	@ (adr r3, 8013f48 <floor+0xe8>)
 8013e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e84:	f7ec fa22 	bl	80002cc <__adddf3>
 8013e88:	2200      	movs	r2, #0
 8013e8a:	2300      	movs	r3, #0
 8013e8c:	f7ec fe64 	bl	8000b58 <__aeabi_dcmpgt>
 8013e90:	b150      	cbz	r0, 8013ea8 <floor+0x48>
 8013e92:	2c00      	cmp	r4, #0
 8013e94:	da55      	bge.n	8013f42 <floor+0xe2>
 8013e96:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8013e9a:	432c      	orrs	r4, r5
 8013e9c:	2500      	movs	r5, #0
 8013e9e:	42ac      	cmp	r4, r5
 8013ea0:	4c2b      	ldr	r4, [pc, #172]	@ (8013f50 <floor+0xf0>)
 8013ea2:	bf08      	it	eq
 8013ea4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8013ea8:	4621      	mov	r1, r4
 8013eaa:	4628      	mov	r0, r5
 8013eac:	e023      	b.n	8013ef6 <floor+0x96>
 8013eae:	4f29      	ldr	r7, [pc, #164]	@ (8013f54 <floor+0xf4>)
 8013eb0:	4137      	asrs	r7, r6
 8013eb2:	ea01 0307 	and.w	r3, r1, r7
 8013eb6:	4303      	orrs	r3, r0
 8013eb8:	d01d      	beq.n	8013ef6 <floor+0x96>
 8013eba:	a323      	add	r3, pc, #140	@ (adr r3, 8013f48 <floor+0xe8>)
 8013ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ec0:	f7ec fa04 	bl	80002cc <__adddf3>
 8013ec4:	2200      	movs	r2, #0
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	f7ec fe46 	bl	8000b58 <__aeabi_dcmpgt>
 8013ecc:	2800      	cmp	r0, #0
 8013ece:	d0eb      	beq.n	8013ea8 <floor+0x48>
 8013ed0:	2c00      	cmp	r4, #0
 8013ed2:	bfbe      	ittt	lt
 8013ed4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8013ed8:	4133      	asrlt	r3, r6
 8013eda:	18e4      	addlt	r4, r4, r3
 8013edc:	ea24 0407 	bic.w	r4, r4, r7
 8013ee0:	2500      	movs	r5, #0
 8013ee2:	e7e1      	b.n	8013ea8 <floor+0x48>
 8013ee4:	2e33      	cmp	r6, #51	@ 0x33
 8013ee6:	dd0a      	ble.n	8013efe <floor+0x9e>
 8013ee8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8013eec:	d103      	bne.n	8013ef6 <floor+0x96>
 8013eee:	4602      	mov	r2, r0
 8013ef0:	460b      	mov	r3, r1
 8013ef2:	f7ec f9eb 	bl	80002cc <__adddf3>
 8013ef6:	ec41 0b10 	vmov	d0, r0, r1
 8013efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013efe:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8013f02:	f04f 37ff 	mov.w	r7, #4294967295
 8013f06:	40df      	lsrs	r7, r3
 8013f08:	4207      	tst	r7, r0
 8013f0a:	d0f4      	beq.n	8013ef6 <floor+0x96>
 8013f0c:	a30e      	add	r3, pc, #56	@ (adr r3, 8013f48 <floor+0xe8>)
 8013f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f12:	f7ec f9db 	bl	80002cc <__adddf3>
 8013f16:	2200      	movs	r2, #0
 8013f18:	2300      	movs	r3, #0
 8013f1a:	f7ec fe1d 	bl	8000b58 <__aeabi_dcmpgt>
 8013f1e:	2800      	cmp	r0, #0
 8013f20:	d0c2      	beq.n	8013ea8 <floor+0x48>
 8013f22:	2c00      	cmp	r4, #0
 8013f24:	da0a      	bge.n	8013f3c <floor+0xdc>
 8013f26:	2e14      	cmp	r6, #20
 8013f28:	d101      	bne.n	8013f2e <floor+0xce>
 8013f2a:	3401      	adds	r4, #1
 8013f2c:	e006      	b.n	8013f3c <floor+0xdc>
 8013f2e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8013f32:	2301      	movs	r3, #1
 8013f34:	40b3      	lsls	r3, r6
 8013f36:	441d      	add	r5, r3
 8013f38:	4545      	cmp	r5, r8
 8013f3a:	d3f6      	bcc.n	8013f2a <floor+0xca>
 8013f3c:	ea25 0507 	bic.w	r5, r5, r7
 8013f40:	e7b2      	b.n	8013ea8 <floor+0x48>
 8013f42:	2500      	movs	r5, #0
 8013f44:	462c      	mov	r4, r5
 8013f46:	e7af      	b.n	8013ea8 <floor+0x48>
 8013f48:	8800759c 	.word	0x8800759c
 8013f4c:	7e37e43c 	.word	0x7e37e43c
 8013f50:	bff00000 	.word	0xbff00000
 8013f54:	000fffff 	.word	0x000fffff

08013f58 <_init>:
 8013f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f5a:	bf00      	nop
 8013f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f5e:	bc08      	pop	{r3}
 8013f60:	469e      	mov	lr, r3
 8013f62:	4770      	bx	lr

08013f64 <_fini>:
 8013f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f66:	bf00      	nop
 8013f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f6a:	bc08      	pop	{r3}
 8013f6c:	469e      	mov	lr, r3
 8013f6e:	4770      	bx	lr
