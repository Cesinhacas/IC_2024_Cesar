
MCS_m7_certo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014424  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d8c  080145f8  080145f8  000155f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015384  08015384  000171f0  2**0
                  CONTENTS
  4 .ARM          00000008  08015384  08015384  00016384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801538c  0801538c  000171f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801538c  0801538c  0001638c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015390  08015390  00016390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  08015394  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003b0c  200001f0  08015584  000171f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003cfc  08015584  00017cfc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000171f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c194  00000000  00000000  0001721a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024d0  00000000  00000000  000233ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  00025880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008bb  00000000  00000000  00026408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027ebd  00000000  00000000  00026cc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f39  00000000  00000000  0004eb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e73cd  00000000  00000000  00063ab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014ae86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046bc  00000000  00000000  0014aecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0014f588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080145dc 	.word	0x080145dc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	080145dc 	.word	0x080145dc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_frsub>:
 8000cc8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ccc:	e002      	b.n	8000cd4 <__addsf3>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fsub>:
 8000cd0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cd4 <__addsf3>:
 8000cd4:	0042      	lsls	r2, r0, #1
 8000cd6:	bf1f      	itttt	ne
 8000cd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cdc:	ea92 0f03 	teqne	r2, r3
 8000ce0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ce4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce8:	d06a      	beq.n	8000dc0 <__addsf3+0xec>
 8000cea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cf2:	bfc1      	itttt	gt
 8000cf4:	18d2      	addgt	r2, r2, r3
 8000cf6:	4041      	eorgt	r1, r0
 8000cf8:	4048      	eorgt	r0, r1
 8000cfa:	4041      	eorgt	r1, r0
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	2b19      	cmp	r3, #25
 8000d02:	bf88      	it	hi
 8000d04:	4770      	bxhi	lr
 8000d06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4240      	negne	r0, r0
 8000d16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4249      	negne	r1, r1
 8000d26:	ea92 0f03 	teq	r2, r3
 8000d2a:	d03f      	beq.n	8000dac <__addsf3+0xd8>
 8000d2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d30:	fa41 fc03 	asr.w	ip, r1, r3
 8000d34:	eb10 000c 	adds.w	r0, r0, ip
 8000d38:	f1c3 0320 	rsb	r3, r3, #32
 8000d3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__addsf3+0x78>
 8000d46:	4249      	negs	r1, r1
 8000d48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d50:	d313      	bcc.n	8000d7a <__addsf3+0xa6>
 8000d52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d56:	d306      	bcc.n	8000d66 <__addsf3+0x92>
 8000d58:	0840      	lsrs	r0, r0, #1
 8000d5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d5e:	f102 0201 	add.w	r2, r2, #1
 8000d62:	2afe      	cmp	r2, #254	@ 0xfe
 8000d64:	d251      	bcs.n	8000e0a <__addsf3+0x136>
 8000d66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d6e:	bf08      	it	eq
 8000d70:	f020 0001 	biceq.w	r0, r0, #1
 8000d74:	ea40 0003 	orr.w	r0, r0, r3
 8000d78:	4770      	bx	lr
 8000d7a:	0049      	lsls	r1, r1, #1
 8000d7c:	eb40 0000 	adc.w	r0, r0, r0
 8000d80:	3a01      	subs	r2, #1
 8000d82:	bf28      	it	cs
 8000d84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d88:	d2ed      	bcs.n	8000d66 <__addsf3+0x92>
 8000d8a:	fab0 fc80 	clz	ip, r0
 8000d8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d92:	ebb2 020c 	subs.w	r2, r2, ip
 8000d96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d9a:	bfaa      	itet	ge
 8000d9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da0:	4252      	neglt	r2, r2
 8000da2:	4318      	orrge	r0, r3
 8000da4:	bfbc      	itt	lt
 8000da6:	40d0      	lsrlt	r0, r2
 8000da8:	4318      	orrlt	r0, r3
 8000daa:	4770      	bx	lr
 8000dac:	f092 0f00 	teq	r2, #0
 8000db0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000db4:	bf06      	itte	eq
 8000db6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dba:	3201      	addeq	r2, #1
 8000dbc:	3b01      	subne	r3, #1
 8000dbe:	e7b5      	b.n	8000d2c <__addsf3+0x58>
 8000dc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc8:	bf18      	it	ne
 8000dca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dce:	d021      	beq.n	8000e14 <__addsf3+0x140>
 8000dd0:	ea92 0f03 	teq	r2, r3
 8000dd4:	d004      	beq.n	8000de0 <__addsf3+0x10c>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	bf08      	it	eq
 8000ddc:	4608      	moveq	r0, r1
 8000dde:	4770      	bx	lr
 8000de0:	ea90 0f01 	teq	r0, r1
 8000de4:	bf1c      	itt	ne
 8000de6:	2000      	movne	r0, #0
 8000de8:	4770      	bxne	lr
 8000dea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dee:	d104      	bne.n	8000dfa <__addsf3+0x126>
 8000df0:	0040      	lsls	r0, r0, #1
 8000df2:	bf28      	it	cs
 8000df4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dfe:	bf3c      	itt	cc
 8000e00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e04:	4770      	bxcc	lr
 8000e06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e12:	4770      	bx	lr
 8000e14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e18:	bf16      	itet	ne
 8000e1a:	4608      	movne	r0, r1
 8000e1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e20:	4601      	movne	r1, r0
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	bf06      	itte	eq
 8000e26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e2a:	ea90 0f01 	teqeq	r0, r1
 8000e2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_ui2f>:
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e004      	b.n	8000e44 <__aeabi_i2f+0x8>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_i2f>:
 8000e3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e40:	bf48      	it	mi
 8000e42:	4240      	negmi	r0, r0
 8000e44:	ea5f 0c00 	movs.w	ip, r0
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e50:	4601      	mov	r1, r0
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	e01c      	b.n	8000e92 <__aeabi_l2f+0x2a>

08000e58 <__aeabi_ul2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	e00a      	b.n	8000e7c <__aeabi_l2f+0x14>
 8000e66:	bf00      	nop

08000e68 <__aeabi_l2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e74:	d502      	bpl.n	8000e7c <__aeabi_l2f+0x14>
 8000e76:	4240      	negs	r0, r0
 8000e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e7c:	ea5f 0c01 	movs.w	ip, r1
 8000e80:	bf02      	ittt	eq
 8000e82:	4684      	moveq	ip, r0
 8000e84:	4601      	moveq	r1, r0
 8000e86:	2000      	moveq	r0, #0
 8000e88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e96:	fabc f28c 	clz	r2, ip
 8000e9a:	3a08      	subs	r2, #8
 8000e9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea0:	db10      	blt.n	8000ec4 <__aeabi_l2f+0x5c>
 8000ea2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000eb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f102 0220 	add.w	r2, r2, #32
 8000ec8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ed4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_fmul>:
 8000ee4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ee8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eec:	bf1e      	ittt	ne
 8000eee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef2:	ea92 0f0c 	teqne	r2, ip
 8000ef6:	ea93 0f0c 	teqne	r3, ip
 8000efa:	d06f      	beq.n	8000fdc <__aeabi_fmul+0xf8>
 8000efc:	441a      	add	r2, r3
 8000efe:	ea80 0c01 	eor.w	ip, r0, r1
 8000f02:	0240      	lsls	r0, r0, #9
 8000f04:	bf18      	it	ne
 8000f06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000f0a:	d01e      	beq.n	8000f4a <__aeabi_fmul+0x66>
 8000f0c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000f10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000f14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000f18:	fba0 3101 	umull	r3, r1, r0, r1
 8000f1c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f20:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000f24:	bf3e      	ittt	cc
 8000f26:	0049      	lslcc	r1, r1, #1
 8000f28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000f2c:	005b      	lslcc	r3, r3, #1
 8000f2e:	ea40 0001 	orr.w	r0, r0, r1
 8000f32:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000f36:	2afd      	cmp	r2, #253	@ 0xfd
 8000f38:	d81d      	bhi.n	8000f76 <__aeabi_fmul+0x92>
 8000f3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000f3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f42:	bf08      	it	eq
 8000f44:	f020 0001 	biceq.w	r0, r0, #1
 8000f48:	4770      	bx	lr
 8000f4a:	f090 0f00 	teq	r0, #0
 8000f4e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f52:	bf08      	it	eq
 8000f54:	0249      	lsleq	r1, r1, #9
 8000f56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000f5e:	3a7f      	subs	r2, #127	@ 0x7f
 8000f60:	bfc2      	ittt	gt
 8000f62:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f6a:	4770      	bxgt	lr
 8000f6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f70:	f04f 0300 	mov.w	r3, #0
 8000f74:	3a01      	subs	r2, #1
 8000f76:	dc5d      	bgt.n	8001034 <__aeabi_fmul+0x150>
 8000f78:	f112 0f19 	cmn.w	r2, #25
 8000f7c:	bfdc      	itt	le
 8000f7e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000f82:	4770      	bxle	lr
 8000f84:	f1c2 0200 	rsb	r2, r2, #0
 8000f88:	0041      	lsls	r1, r0, #1
 8000f8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000f8e:	f1c2 0220 	rsb	r2, r2, #32
 8000f92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f9a:	f140 0000 	adc.w	r0, r0, #0
 8000f9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000fa2:	bf08      	it	eq
 8000fa4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000fa8:	4770      	bx	lr
 8000faa:	f092 0f00 	teq	r2, #0
 8000fae:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fb2:	bf02      	ittt	eq
 8000fb4:	0040      	lsleq	r0, r0, #1
 8000fb6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fba:	3a01      	subeq	r2, #1
 8000fbc:	d0f9      	beq.n	8000fb2 <__aeabi_fmul+0xce>
 8000fbe:	ea40 000c 	orr.w	r0, r0, ip
 8000fc2:	f093 0f00 	teq	r3, #0
 8000fc6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fca:	bf02      	ittt	eq
 8000fcc:	0049      	lsleq	r1, r1, #1
 8000fce:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fd2:	3b01      	subeq	r3, #1
 8000fd4:	d0f9      	beq.n	8000fca <__aeabi_fmul+0xe6>
 8000fd6:	ea41 010c 	orr.w	r1, r1, ip
 8000fda:	e78f      	b.n	8000efc <__aeabi_fmul+0x18>
 8000fdc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fe0:	ea92 0f0c 	teq	r2, ip
 8000fe4:	bf18      	it	ne
 8000fe6:	ea93 0f0c 	teqne	r3, ip
 8000fea:	d00a      	beq.n	8001002 <__aeabi_fmul+0x11e>
 8000fec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ff0:	bf18      	it	ne
 8000ff2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ff6:	d1d8      	bne.n	8000faa <__aeabi_fmul+0xc6>
 8000ff8:	ea80 0001 	eor.w	r0, r0, r1
 8000ffc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8001000:	4770      	bx	lr
 8001002:	f090 0f00 	teq	r0, #0
 8001006:	bf17      	itett	ne
 8001008:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 800100c:	4608      	moveq	r0, r1
 800100e:	f091 0f00 	teqne	r1, #0
 8001012:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8001016:	d014      	beq.n	8001042 <__aeabi_fmul+0x15e>
 8001018:	ea92 0f0c 	teq	r2, ip
 800101c:	d101      	bne.n	8001022 <__aeabi_fmul+0x13e>
 800101e:	0242      	lsls	r2, r0, #9
 8001020:	d10f      	bne.n	8001042 <__aeabi_fmul+0x15e>
 8001022:	ea93 0f0c 	teq	r3, ip
 8001026:	d103      	bne.n	8001030 <__aeabi_fmul+0x14c>
 8001028:	024b      	lsls	r3, r1, #9
 800102a:	bf18      	it	ne
 800102c:	4608      	movne	r0, r1
 800102e:	d108      	bne.n	8001042 <__aeabi_fmul+0x15e>
 8001030:	ea80 0001 	eor.w	r0, r0, r1
 8001034:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8001038:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800103c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001040:	4770      	bx	lr
 8001042:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8001046:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800104a:	4770      	bx	lr

0800104c <__aeabi_fdiv>:
 800104c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8001050:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8001054:	bf1e      	ittt	ne
 8001056:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800105a:	ea92 0f0c 	teqne	r2, ip
 800105e:	ea93 0f0c 	teqne	r3, ip
 8001062:	d069      	beq.n	8001138 <__aeabi_fdiv+0xec>
 8001064:	eba2 0203 	sub.w	r2, r2, r3
 8001068:	ea80 0c01 	eor.w	ip, r0, r1
 800106c:	0249      	lsls	r1, r1, #9
 800106e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8001072:	d037      	beq.n	80010e4 <__aeabi_fdiv+0x98>
 8001074:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001078:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800107c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001080:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8001084:	428b      	cmp	r3, r1
 8001086:	bf38      	it	cc
 8001088:	005b      	lslcc	r3, r3, #1
 800108a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 800108e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8001092:	428b      	cmp	r3, r1
 8001094:	bf24      	itt	cs
 8001096:	1a5b      	subcs	r3, r3, r1
 8001098:	ea40 000c 	orrcs.w	r0, r0, ip
 800109c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80010a0:	bf24      	itt	cs
 80010a2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80010a6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80010aa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80010ae:	bf24      	itt	cs
 80010b0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80010b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80010b8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80010bc:	bf24      	itt	cs
 80010be:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80010c2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80010c6:	011b      	lsls	r3, r3, #4
 80010c8:	bf18      	it	ne
 80010ca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80010ce:	d1e0      	bne.n	8001092 <__aeabi_fdiv+0x46>
 80010d0:	2afd      	cmp	r2, #253	@ 0xfd
 80010d2:	f63f af50 	bhi.w	8000f76 <__aeabi_fmul+0x92>
 80010d6:	428b      	cmp	r3, r1
 80010d8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80010dc:	bf08      	it	eq
 80010de:	f020 0001 	biceq.w	r0, r0, #1
 80010e2:	4770      	bx	lr
 80010e4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80010e8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80010ec:	327f      	adds	r2, #127	@ 0x7f
 80010ee:	bfc2      	ittt	gt
 80010f0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80010f4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80010f8:	4770      	bxgt	lr
 80010fa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80010fe:	f04f 0300 	mov.w	r3, #0
 8001102:	3a01      	subs	r2, #1
 8001104:	e737      	b.n	8000f76 <__aeabi_fmul+0x92>
 8001106:	f092 0f00 	teq	r2, #0
 800110a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800110e:	bf02      	ittt	eq
 8001110:	0040      	lsleq	r0, r0, #1
 8001112:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8001116:	3a01      	subeq	r2, #1
 8001118:	d0f9      	beq.n	800110e <__aeabi_fdiv+0xc2>
 800111a:	ea40 000c 	orr.w	r0, r0, ip
 800111e:	f093 0f00 	teq	r3, #0
 8001122:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8001126:	bf02      	ittt	eq
 8001128:	0049      	lsleq	r1, r1, #1
 800112a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800112e:	3b01      	subeq	r3, #1
 8001130:	d0f9      	beq.n	8001126 <__aeabi_fdiv+0xda>
 8001132:	ea41 010c 	orr.w	r1, r1, ip
 8001136:	e795      	b.n	8001064 <__aeabi_fdiv+0x18>
 8001138:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800113c:	ea92 0f0c 	teq	r2, ip
 8001140:	d108      	bne.n	8001154 <__aeabi_fdiv+0x108>
 8001142:	0242      	lsls	r2, r0, #9
 8001144:	f47f af7d 	bne.w	8001042 <__aeabi_fmul+0x15e>
 8001148:	ea93 0f0c 	teq	r3, ip
 800114c:	f47f af70 	bne.w	8001030 <__aeabi_fmul+0x14c>
 8001150:	4608      	mov	r0, r1
 8001152:	e776      	b.n	8001042 <__aeabi_fmul+0x15e>
 8001154:	ea93 0f0c 	teq	r3, ip
 8001158:	d104      	bne.n	8001164 <__aeabi_fdiv+0x118>
 800115a:	024b      	lsls	r3, r1, #9
 800115c:	f43f af4c 	beq.w	8000ff8 <__aeabi_fmul+0x114>
 8001160:	4608      	mov	r0, r1
 8001162:	e76e      	b.n	8001042 <__aeabi_fmul+0x15e>
 8001164:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001168:	bf18      	it	ne
 800116a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800116e:	d1ca      	bne.n	8001106 <__aeabi_fdiv+0xba>
 8001170:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001174:	f47f af5c 	bne.w	8001030 <__aeabi_fmul+0x14c>
 8001178:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800117c:	f47f af3c 	bne.w	8000ff8 <__aeabi_fmul+0x114>
 8001180:	e75f      	b.n	8001042 <__aeabi_fmul+0x15e>
 8001182:	bf00      	nop

08001184 <__gesf2>:
 8001184:	f04f 3cff 	mov.w	ip, #4294967295
 8001188:	e006      	b.n	8001198 <__cmpsf2+0x4>
 800118a:	bf00      	nop

0800118c <__lesf2>:
 800118c:	f04f 0c01 	mov.w	ip, #1
 8001190:	e002      	b.n	8001198 <__cmpsf2+0x4>
 8001192:	bf00      	nop

08001194 <__cmpsf2>:
 8001194:	f04f 0c01 	mov.w	ip, #1
 8001198:	f84d cd04 	str.w	ip, [sp, #-4]!
 800119c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011a0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80011a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80011a8:	bf18      	it	ne
 80011aa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80011ae:	d011      	beq.n	80011d4 <__cmpsf2+0x40>
 80011b0:	b001      	add	sp, #4
 80011b2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80011b6:	bf18      	it	ne
 80011b8:	ea90 0f01 	teqne	r0, r1
 80011bc:	bf58      	it	pl
 80011be:	ebb2 0003 	subspl.w	r0, r2, r3
 80011c2:	bf88      	it	hi
 80011c4:	17c8      	asrhi	r0, r1, #31
 80011c6:	bf38      	it	cc
 80011c8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80011cc:	bf18      	it	ne
 80011ce:	f040 0001 	orrne.w	r0, r0, #1
 80011d2:	4770      	bx	lr
 80011d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80011d8:	d102      	bne.n	80011e0 <__cmpsf2+0x4c>
 80011da:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80011de:	d105      	bne.n	80011ec <__cmpsf2+0x58>
 80011e0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80011e4:	d1e4      	bne.n	80011b0 <__cmpsf2+0x1c>
 80011e6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80011ea:	d0e1      	beq.n	80011b0 <__cmpsf2+0x1c>
 80011ec:	f85d 0b04 	ldr.w	r0, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop

080011f4 <__aeabi_cfrcmple>:
 80011f4:	4684      	mov	ip, r0
 80011f6:	4608      	mov	r0, r1
 80011f8:	4661      	mov	r1, ip
 80011fa:	e7ff      	b.n	80011fc <__aeabi_cfcmpeq>

080011fc <__aeabi_cfcmpeq>:
 80011fc:	b50f      	push	{r0, r1, r2, r3, lr}
 80011fe:	f7ff ffc9 	bl	8001194 <__cmpsf2>
 8001202:	2800      	cmp	r0, #0
 8001204:	bf48      	it	mi
 8001206:	f110 0f00 	cmnmi.w	r0, #0
 800120a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800120c <__aeabi_fcmpeq>:
 800120c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001210:	f7ff fff4 	bl	80011fc <__aeabi_cfcmpeq>
 8001214:	bf0c      	ite	eq
 8001216:	2001      	moveq	r0, #1
 8001218:	2000      	movne	r0, #0
 800121a:	f85d fb08 	ldr.w	pc, [sp], #8
 800121e:	bf00      	nop

08001220 <__aeabi_fcmplt>:
 8001220:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001224:	f7ff ffea 	bl	80011fc <__aeabi_cfcmpeq>
 8001228:	bf34      	ite	cc
 800122a:	2001      	movcc	r0, #1
 800122c:	2000      	movcs	r0, #0
 800122e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001232:	bf00      	nop

08001234 <__aeabi_fcmple>:
 8001234:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001238:	f7ff ffe0 	bl	80011fc <__aeabi_cfcmpeq>
 800123c:	bf94      	ite	ls
 800123e:	2001      	movls	r0, #1
 8001240:	2000      	movhi	r0, #0
 8001242:	f85d fb08 	ldr.w	pc, [sp], #8
 8001246:	bf00      	nop

08001248 <__aeabi_fcmpge>:
 8001248:	f84d ed08 	str.w	lr, [sp, #-8]!
 800124c:	f7ff ffd2 	bl	80011f4 <__aeabi_cfrcmple>
 8001250:	bf94      	ite	ls
 8001252:	2001      	movls	r0, #1
 8001254:	2000      	movhi	r0, #0
 8001256:	f85d fb08 	ldr.w	pc, [sp], #8
 800125a:	bf00      	nop

0800125c <__aeabi_fcmpgt>:
 800125c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001260:	f7ff ffc8 	bl	80011f4 <__aeabi_cfrcmple>
 8001264:	bf34      	ite	cc
 8001266:	2001      	movcc	r0, #1
 8001268:	2000      	movcs	r0, #0
 800126a:	f85d fb08 	ldr.w	pc, [sp], #8
 800126e:	bf00      	nop

08001270 <__aeabi_fcmpun>:
 8001270:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001274:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001278:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800127c:	d102      	bne.n	8001284 <__aeabi_fcmpun+0x14>
 800127e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001282:	d108      	bne.n	8001296 <__aeabi_fcmpun+0x26>
 8001284:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001288:	d102      	bne.n	8001290 <__aeabi_fcmpun+0x20>
 800128a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800128e:	d102      	bne.n	8001296 <__aeabi_fcmpun+0x26>
 8001290:	f04f 0000 	mov.w	r0, #0
 8001294:	4770      	bx	lr
 8001296:	f04f 0001 	mov.w	r0, #1
 800129a:	4770      	bx	lr

0800129c <__aeabi_f2iz>:
 800129c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80012a0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80012a4:	d30f      	bcc.n	80012c6 <__aeabi_f2iz+0x2a>
 80012a6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80012aa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80012ae:	d90d      	bls.n	80012cc <__aeabi_f2iz+0x30>
 80012b0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80012b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80012b8:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80012bc:	fa23 f002 	lsr.w	r0, r3, r2
 80012c0:	bf18      	it	ne
 80012c2:	4240      	negne	r0, r0
 80012c4:	4770      	bx	lr
 80012c6:	f04f 0000 	mov.w	r0, #0
 80012ca:	4770      	bx	lr
 80012cc:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80012d0:	d101      	bne.n	80012d6 <__aeabi_f2iz+0x3a>
 80012d2:	0242      	lsls	r2, r0, #9
 80012d4:	d105      	bne.n	80012e2 <__aeabi_f2iz+0x46>
 80012d6:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80012da:	bf08      	it	eq
 80012dc:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80012e0:	4770      	bx	lr
 80012e2:	f04f 0000 	mov.w	r0, #0
 80012e6:	4770      	bx	lr

080012e8 <__aeabi_uldivmod>:
 80012e8:	b953      	cbnz	r3, 8001300 <__aeabi_uldivmod+0x18>
 80012ea:	b94a      	cbnz	r2, 8001300 <__aeabi_uldivmod+0x18>
 80012ec:	2900      	cmp	r1, #0
 80012ee:	bf08      	it	eq
 80012f0:	2800      	cmpeq	r0, #0
 80012f2:	bf1c      	itt	ne
 80012f4:	f04f 31ff 	movne.w	r1, #4294967295
 80012f8:	f04f 30ff 	movne.w	r0, #4294967295
 80012fc:	f000 b9a0 	b.w	8001640 <__aeabi_idiv0>
 8001300:	f1ad 0c08 	sub.w	ip, sp, #8
 8001304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001308:	f000 f83c 	bl	8001384 <__udivmoddi4>
 800130c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001314:	b004      	add	sp, #16
 8001316:	4770      	bx	lr

08001318 <__aeabi_d2lz>:
 8001318:	b538      	push	{r3, r4, r5, lr}
 800131a:	2200      	movs	r2, #0
 800131c:	2300      	movs	r3, #0
 800131e:	4604      	mov	r4, r0
 8001320:	460d      	mov	r5, r1
 8001322:	f7ff fbfb 	bl	8000b1c <__aeabi_dcmplt>
 8001326:	b928      	cbnz	r0, 8001334 <__aeabi_d2lz+0x1c>
 8001328:	4620      	mov	r0, r4
 800132a:	4629      	mov	r1, r5
 800132c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001330:	f000 b80a 	b.w	8001348 <__aeabi_d2ulz>
 8001334:	4620      	mov	r0, r4
 8001336:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800133a:	f000 f805 	bl	8001348 <__aeabi_d2ulz>
 800133e:	4240      	negs	r0, r0
 8001340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001344:	bd38      	pop	{r3, r4, r5, pc}
 8001346:	bf00      	nop

08001348 <__aeabi_d2ulz>:
 8001348:	b5d0      	push	{r4, r6, r7, lr}
 800134a:	4b0c      	ldr	r3, [pc, #48]	@ (800137c <__aeabi_d2ulz+0x34>)
 800134c:	2200      	movs	r2, #0
 800134e:	4606      	mov	r6, r0
 8001350:	460f      	mov	r7, r1
 8001352:	f7ff f971 	bl	8000638 <__aeabi_dmul>
 8001356:	f7ff fc47 	bl	8000be8 <__aeabi_d2uiz>
 800135a:	4604      	mov	r4, r0
 800135c:	f7ff f8f2 	bl	8000544 <__aeabi_ui2d>
 8001360:	4b07      	ldr	r3, [pc, #28]	@ (8001380 <__aeabi_d2ulz+0x38>)
 8001362:	2200      	movs	r2, #0
 8001364:	f7ff f968 	bl	8000638 <__aeabi_dmul>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4630      	mov	r0, r6
 800136e:	4639      	mov	r1, r7
 8001370:	f7fe ffaa 	bl	80002c8 <__aeabi_dsub>
 8001374:	f7ff fc38 	bl	8000be8 <__aeabi_d2uiz>
 8001378:	4621      	mov	r1, r4
 800137a:	bdd0      	pop	{r4, r6, r7, pc}
 800137c:	3df00000 	.word	0x3df00000
 8001380:	41f00000 	.word	0x41f00000

08001384 <__udivmoddi4>:
 8001384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001388:	9d08      	ldr	r5, [sp, #32]
 800138a:	460c      	mov	r4, r1
 800138c:	2b00      	cmp	r3, #0
 800138e:	d14e      	bne.n	800142e <__udivmoddi4+0xaa>
 8001390:	4694      	mov	ip, r2
 8001392:	458c      	cmp	ip, r1
 8001394:	4686      	mov	lr, r0
 8001396:	fab2 f282 	clz	r2, r2
 800139a:	d962      	bls.n	8001462 <__udivmoddi4+0xde>
 800139c:	b14a      	cbz	r2, 80013b2 <__udivmoddi4+0x2e>
 800139e:	f1c2 0320 	rsb	r3, r2, #32
 80013a2:	4091      	lsls	r1, r2
 80013a4:	fa20 f303 	lsr.w	r3, r0, r3
 80013a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80013ac:	4319      	orrs	r1, r3
 80013ae:	fa00 fe02 	lsl.w	lr, r0, r2
 80013b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80013b6:	fa1f f68c 	uxth.w	r6, ip
 80013ba:	fbb1 f4f7 	udiv	r4, r1, r7
 80013be:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80013c2:	fb07 1114 	mls	r1, r7, r4, r1
 80013c6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80013ca:	fb04 f106 	mul.w	r1, r4, r6
 80013ce:	4299      	cmp	r1, r3
 80013d0:	d90a      	bls.n	80013e8 <__udivmoddi4+0x64>
 80013d2:	eb1c 0303 	adds.w	r3, ip, r3
 80013d6:	f104 30ff 	add.w	r0, r4, #4294967295
 80013da:	f080 8112 	bcs.w	8001602 <__udivmoddi4+0x27e>
 80013de:	4299      	cmp	r1, r3
 80013e0:	f240 810f 	bls.w	8001602 <__udivmoddi4+0x27e>
 80013e4:	3c02      	subs	r4, #2
 80013e6:	4463      	add	r3, ip
 80013e8:	1a59      	subs	r1, r3, r1
 80013ea:	fa1f f38e 	uxth.w	r3, lr
 80013ee:	fbb1 f0f7 	udiv	r0, r1, r7
 80013f2:	fb07 1110 	mls	r1, r7, r0, r1
 80013f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80013fa:	fb00 f606 	mul.w	r6, r0, r6
 80013fe:	429e      	cmp	r6, r3
 8001400:	d90a      	bls.n	8001418 <__udivmoddi4+0x94>
 8001402:	eb1c 0303 	adds.w	r3, ip, r3
 8001406:	f100 31ff 	add.w	r1, r0, #4294967295
 800140a:	f080 80fc 	bcs.w	8001606 <__udivmoddi4+0x282>
 800140e:	429e      	cmp	r6, r3
 8001410:	f240 80f9 	bls.w	8001606 <__udivmoddi4+0x282>
 8001414:	4463      	add	r3, ip
 8001416:	3802      	subs	r0, #2
 8001418:	1b9b      	subs	r3, r3, r6
 800141a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800141e:	2100      	movs	r1, #0
 8001420:	b11d      	cbz	r5, 800142a <__udivmoddi4+0xa6>
 8001422:	40d3      	lsrs	r3, r2
 8001424:	2200      	movs	r2, #0
 8001426:	e9c5 3200 	strd	r3, r2, [r5]
 800142a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800142e:	428b      	cmp	r3, r1
 8001430:	d905      	bls.n	800143e <__udivmoddi4+0xba>
 8001432:	b10d      	cbz	r5, 8001438 <__udivmoddi4+0xb4>
 8001434:	e9c5 0100 	strd	r0, r1, [r5]
 8001438:	2100      	movs	r1, #0
 800143a:	4608      	mov	r0, r1
 800143c:	e7f5      	b.n	800142a <__udivmoddi4+0xa6>
 800143e:	fab3 f183 	clz	r1, r3
 8001442:	2900      	cmp	r1, #0
 8001444:	d146      	bne.n	80014d4 <__udivmoddi4+0x150>
 8001446:	42a3      	cmp	r3, r4
 8001448:	d302      	bcc.n	8001450 <__udivmoddi4+0xcc>
 800144a:	4290      	cmp	r0, r2
 800144c:	f0c0 80f0 	bcc.w	8001630 <__udivmoddi4+0x2ac>
 8001450:	1a86      	subs	r6, r0, r2
 8001452:	eb64 0303 	sbc.w	r3, r4, r3
 8001456:	2001      	movs	r0, #1
 8001458:	2d00      	cmp	r5, #0
 800145a:	d0e6      	beq.n	800142a <__udivmoddi4+0xa6>
 800145c:	e9c5 6300 	strd	r6, r3, [r5]
 8001460:	e7e3      	b.n	800142a <__udivmoddi4+0xa6>
 8001462:	2a00      	cmp	r2, #0
 8001464:	f040 8090 	bne.w	8001588 <__udivmoddi4+0x204>
 8001468:	eba1 040c 	sub.w	r4, r1, ip
 800146c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001470:	fa1f f78c 	uxth.w	r7, ip
 8001474:	2101      	movs	r1, #1
 8001476:	fbb4 f6f8 	udiv	r6, r4, r8
 800147a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800147e:	fb08 4416 	mls	r4, r8, r6, r4
 8001482:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001486:	fb07 f006 	mul.w	r0, r7, r6
 800148a:	4298      	cmp	r0, r3
 800148c:	d908      	bls.n	80014a0 <__udivmoddi4+0x11c>
 800148e:	eb1c 0303 	adds.w	r3, ip, r3
 8001492:	f106 34ff 	add.w	r4, r6, #4294967295
 8001496:	d202      	bcs.n	800149e <__udivmoddi4+0x11a>
 8001498:	4298      	cmp	r0, r3
 800149a:	f200 80cd 	bhi.w	8001638 <__udivmoddi4+0x2b4>
 800149e:	4626      	mov	r6, r4
 80014a0:	1a1c      	subs	r4, r3, r0
 80014a2:	fa1f f38e 	uxth.w	r3, lr
 80014a6:	fbb4 f0f8 	udiv	r0, r4, r8
 80014aa:	fb08 4410 	mls	r4, r8, r0, r4
 80014ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80014b2:	fb00 f707 	mul.w	r7, r0, r7
 80014b6:	429f      	cmp	r7, r3
 80014b8:	d908      	bls.n	80014cc <__udivmoddi4+0x148>
 80014ba:	eb1c 0303 	adds.w	r3, ip, r3
 80014be:	f100 34ff 	add.w	r4, r0, #4294967295
 80014c2:	d202      	bcs.n	80014ca <__udivmoddi4+0x146>
 80014c4:	429f      	cmp	r7, r3
 80014c6:	f200 80b0 	bhi.w	800162a <__udivmoddi4+0x2a6>
 80014ca:	4620      	mov	r0, r4
 80014cc:	1bdb      	subs	r3, r3, r7
 80014ce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80014d2:	e7a5      	b.n	8001420 <__udivmoddi4+0x9c>
 80014d4:	f1c1 0620 	rsb	r6, r1, #32
 80014d8:	408b      	lsls	r3, r1
 80014da:	fa22 f706 	lsr.w	r7, r2, r6
 80014de:	431f      	orrs	r7, r3
 80014e0:	fa20 fc06 	lsr.w	ip, r0, r6
 80014e4:	fa04 f301 	lsl.w	r3, r4, r1
 80014e8:	ea43 030c 	orr.w	r3, r3, ip
 80014ec:	40f4      	lsrs	r4, r6
 80014ee:	fa00 f801 	lsl.w	r8, r0, r1
 80014f2:	0c38      	lsrs	r0, r7, #16
 80014f4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80014f8:	fbb4 fef0 	udiv	lr, r4, r0
 80014fc:	fa1f fc87 	uxth.w	ip, r7
 8001500:	fb00 441e 	mls	r4, r0, lr, r4
 8001504:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001508:	fb0e f90c 	mul.w	r9, lr, ip
 800150c:	45a1      	cmp	r9, r4
 800150e:	fa02 f201 	lsl.w	r2, r2, r1
 8001512:	d90a      	bls.n	800152a <__udivmoddi4+0x1a6>
 8001514:	193c      	adds	r4, r7, r4
 8001516:	f10e 3aff 	add.w	sl, lr, #4294967295
 800151a:	f080 8084 	bcs.w	8001626 <__udivmoddi4+0x2a2>
 800151e:	45a1      	cmp	r9, r4
 8001520:	f240 8081 	bls.w	8001626 <__udivmoddi4+0x2a2>
 8001524:	f1ae 0e02 	sub.w	lr, lr, #2
 8001528:	443c      	add	r4, r7
 800152a:	eba4 0409 	sub.w	r4, r4, r9
 800152e:	fa1f f983 	uxth.w	r9, r3
 8001532:	fbb4 f3f0 	udiv	r3, r4, r0
 8001536:	fb00 4413 	mls	r4, r0, r3, r4
 800153a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800153e:	fb03 fc0c 	mul.w	ip, r3, ip
 8001542:	45a4      	cmp	ip, r4
 8001544:	d907      	bls.n	8001556 <__udivmoddi4+0x1d2>
 8001546:	193c      	adds	r4, r7, r4
 8001548:	f103 30ff 	add.w	r0, r3, #4294967295
 800154c:	d267      	bcs.n	800161e <__udivmoddi4+0x29a>
 800154e:	45a4      	cmp	ip, r4
 8001550:	d965      	bls.n	800161e <__udivmoddi4+0x29a>
 8001552:	3b02      	subs	r3, #2
 8001554:	443c      	add	r4, r7
 8001556:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800155a:	fba0 9302 	umull	r9, r3, r0, r2
 800155e:	eba4 040c 	sub.w	r4, r4, ip
 8001562:	429c      	cmp	r4, r3
 8001564:	46ce      	mov	lr, r9
 8001566:	469c      	mov	ip, r3
 8001568:	d351      	bcc.n	800160e <__udivmoddi4+0x28a>
 800156a:	d04e      	beq.n	800160a <__udivmoddi4+0x286>
 800156c:	b155      	cbz	r5, 8001584 <__udivmoddi4+0x200>
 800156e:	ebb8 030e 	subs.w	r3, r8, lr
 8001572:	eb64 040c 	sbc.w	r4, r4, ip
 8001576:	fa04 f606 	lsl.w	r6, r4, r6
 800157a:	40cb      	lsrs	r3, r1
 800157c:	431e      	orrs	r6, r3
 800157e:	40cc      	lsrs	r4, r1
 8001580:	e9c5 6400 	strd	r6, r4, [r5]
 8001584:	2100      	movs	r1, #0
 8001586:	e750      	b.n	800142a <__udivmoddi4+0xa6>
 8001588:	f1c2 0320 	rsb	r3, r2, #32
 800158c:	fa20 f103 	lsr.w	r1, r0, r3
 8001590:	fa0c fc02 	lsl.w	ip, ip, r2
 8001594:	fa24 f303 	lsr.w	r3, r4, r3
 8001598:	4094      	lsls	r4, r2
 800159a:	430c      	orrs	r4, r1
 800159c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80015a0:	fa00 fe02 	lsl.w	lr, r0, r2
 80015a4:	fa1f f78c 	uxth.w	r7, ip
 80015a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80015ac:	fb08 3110 	mls	r1, r8, r0, r3
 80015b0:	0c23      	lsrs	r3, r4, #16
 80015b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80015b6:	fb00 f107 	mul.w	r1, r0, r7
 80015ba:	4299      	cmp	r1, r3
 80015bc:	d908      	bls.n	80015d0 <__udivmoddi4+0x24c>
 80015be:	eb1c 0303 	adds.w	r3, ip, r3
 80015c2:	f100 36ff 	add.w	r6, r0, #4294967295
 80015c6:	d22c      	bcs.n	8001622 <__udivmoddi4+0x29e>
 80015c8:	4299      	cmp	r1, r3
 80015ca:	d92a      	bls.n	8001622 <__udivmoddi4+0x29e>
 80015cc:	3802      	subs	r0, #2
 80015ce:	4463      	add	r3, ip
 80015d0:	1a5b      	subs	r3, r3, r1
 80015d2:	b2a4      	uxth	r4, r4
 80015d4:	fbb3 f1f8 	udiv	r1, r3, r8
 80015d8:	fb08 3311 	mls	r3, r8, r1, r3
 80015dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80015e0:	fb01 f307 	mul.w	r3, r1, r7
 80015e4:	42a3      	cmp	r3, r4
 80015e6:	d908      	bls.n	80015fa <__udivmoddi4+0x276>
 80015e8:	eb1c 0404 	adds.w	r4, ip, r4
 80015ec:	f101 36ff 	add.w	r6, r1, #4294967295
 80015f0:	d213      	bcs.n	800161a <__udivmoddi4+0x296>
 80015f2:	42a3      	cmp	r3, r4
 80015f4:	d911      	bls.n	800161a <__udivmoddi4+0x296>
 80015f6:	3902      	subs	r1, #2
 80015f8:	4464      	add	r4, ip
 80015fa:	1ae4      	subs	r4, r4, r3
 80015fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001600:	e739      	b.n	8001476 <__udivmoddi4+0xf2>
 8001602:	4604      	mov	r4, r0
 8001604:	e6f0      	b.n	80013e8 <__udivmoddi4+0x64>
 8001606:	4608      	mov	r0, r1
 8001608:	e706      	b.n	8001418 <__udivmoddi4+0x94>
 800160a:	45c8      	cmp	r8, r9
 800160c:	d2ae      	bcs.n	800156c <__udivmoddi4+0x1e8>
 800160e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001612:	eb63 0c07 	sbc.w	ip, r3, r7
 8001616:	3801      	subs	r0, #1
 8001618:	e7a8      	b.n	800156c <__udivmoddi4+0x1e8>
 800161a:	4631      	mov	r1, r6
 800161c:	e7ed      	b.n	80015fa <__udivmoddi4+0x276>
 800161e:	4603      	mov	r3, r0
 8001620:	e799      	b.n	8001556 <__udivmoddi4+0x1d2>
 8001622:	4630      	mov	r0, r6
 8001624:	e7d4      	b.n	80015d0 <__udivmoddi4+0x24c>
 8001626:	46d6      	mov	lr, sl
 8001628:	e77f      	b.n	800152a <__udivmoddi4+0x1a6>
 800162a:	4463      	add	r3, ip
 800162c:	3802      	subs	r0, #2
 800162e:	e74d      	b.n	80014cc <__udivmoddi4+0x148>
 8001630:	4606      	mov	r6, r0
 8001632:	4623      	mov	r3, r4
 8001634:	4608      	mov	r0, r1
 8001636:	e70f      	b.n	8001458 <__udivmoddi4+0xd4>
 8001638:	3e02      	subs	r6, #2
 800163a:	4463      	add	r3, ip
 800163c:	e730      	b.n	80014a0 <__udivmoddi4+0x11c>
 800163e:	bf00      	nop

08001640 <__aeabi_idiv0>:
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop

08001644 <inverter_matriz>:
#include <stdlib.h>
#include <math.h>
#include "calib.h"

void inverter_matriz(float matriz[N][N], float inversa[N][N])
{
 8001644:	b5b0      	push	{r4, r5, r7, lr}
 8001646:	b08a      	sub	sp, #40	@ 0x28
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
    // Inicializando a matriz identidade na matriz inversa
    for (int i = 0; i < N; i++) {
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	@ 0x24
 8001652:	e02a      	b.n	80016aa <inverter_matriz+0x66>
        for (int j = 0; j < N; j++) {
 8001654:	2300      	movs	r3, #0
 8001656:	623b      	str	r3, [r7, #32]
 8001658:	e021      	b.n	800169e <inverter_matriz+0x5a>
            if (i == j) {
 800165a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800165c:	6a3b      	ldr	r3, [r7, #32]
 800165e:	429a      	cmp	r2, r3
 8001660:	d10d      	bne.n	800167e <inverter_matriz+0x3a>
                inversa[i][j] = 1;
 8001662:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001664:	4613      	mov	r3, r2
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	4413      	add	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	461a      	mov	r2, r3
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	4413      	add	r3, r2
 8001672:	6a3a      	ldr	r2, [r7, #32]
 8001674:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800167c:	e00c      	b.n	8001698 <inverter_matriz+0x54>
            } else {
                inversa[i][j] = 0;
 800167e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001680:	4613      	mov	r3, r2
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	4413      	add	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	461a      	mov	r2, r3
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	4413      	add	r3, r2
 800168e:	6a3a      	ldr	r2, [r7, #32]
 8001690:	f04f 0100 	mov.w	r1, #0
 8001694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int j = 0; j < N; j++) {
 8001698:	6a3b      	ldr	r3, [r7, #32]
 800169a:	3301      	adds	r3, #1
 800169c:	623b      	str	r3, [r7, #32]
 800169e:	6a3b      	ldr	r3, [r7, #32]
 80016a0:	2b08      	cmp	r3, #8
 80016a2:	ddda      	ble.n	800165a <inverter_matriz+0x16>
    for (int i = 0; i < N; i++) {
 80016a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a6:	3301      	adds	r3, #1
 80016a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80016aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ac:	2b08      	cmp	r3, #8
 80016ae:	ddd1      	ble.n	8001654 <inverter_matriz+0x10>
            }
        }
    }

    // Aplicando o método de Gauss-Jordan
    for (int i = 0; i < N; i++)
 80016b0:	2300      	movs	r3, #0
 80016b2:	61fb      	str	r3, [r7, #28]
 80016b4:	e0c7      	b.n	8001846 <inverter_matriz+0x202>
    {
        float pivot = matriz[i][i];
 80016b6:	69fa      	ldr	r2, [r7, #28]
 80016b8:	4613      	mov	r3, r2
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	4413      	add	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	461a      	mov	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	69fa      	ldr	r2, [r7, #28]
 80016c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016cc:	60fb      	str	r3, [r7, #12]
        for (int j = 0; j < N; j++)
 80016ce:	2300      	movs	r3, #0
 80016d0:	61bb      	str	r3, [r7, #24]
 80016d2:	e038      	b.n	8001746 <inverter_matriz+0x102>
        {
            matriz[i][j] /= pivot;
 80016d4:	69fa      	ldr	r2, [r7, #28]
 80016d6:	4613      	mov	r3, r2
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	4413      	add	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	461a      	mov	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4413      	add	r3, r2
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80016ea:	69fa      	ldr	r2, [r7, #28]
 80016ec:	4613      	mov	r3, r2
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	4413      	add	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	461a      	mov	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	189c      	adds	r4, r3, r2
 80016fa:	68f9      	ldr	r1, [r7, #12]
 80016fc:	f7ff fca6 	bl	800104c <__aeabi_fdiv>
 8001700:	4603      	mov	r3, r0
 8001702:	461a      	mov	r2, r3
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
            inversa[i][j] /= pivot;
 800170a:	69fa      	ldr	r2, [r7, #28]
 800170c:	4613      	mov	r3, r2
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	4413      	add	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	461a      	mov	r2, r3
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	4413      	add	r3, r2
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001720:	69fa      	ldr	r2, [r7, #28]
 8001722:	4613      	mov	r3, r2
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	4413      	add	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	461a      	mov	r2, r3
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	189c      	adds	r4, r3, r2
 8001730:	68f9      	ldr	r1, [r7, #12]
 8001732:	f7ff fc8b 	bl	800104c <__aeabi_fdiv>
 8001736:	4603      	mov	r3, r0
 8001738:	461a      	mov	r2, r3
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        for (int j = 0; j < N; j++)
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	3301      	adds	r3, #1
 8001744:	61bb      	str	r3, [r7, #24]
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	2b08      	cmp	r3, #8
 800174a:	ddc3      	ble.n	80016d4 <inverter_matriz+0x90>
        }

        for (int k = 0; k < N; k++)
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	e073      	b.n	800183a <inverter_matriz+0x1f6>
        {
            if (k != i)
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	429a      	cmp	r2, r3
 8001758:	d06c      	beq.n	8001834 <inverter_matriz+0x1f0>
            {
                float fator = matriz[k][i];
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	4613      	mov	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	4413      	add	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	461a      	mov	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4413      	add	r3, r2
 800176a:	69fa      	ldr	r2, [r7, #28]
 800176c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001770:	60bb      	str	r3, [r7, #8]
                for (int j = 0; j < N; j++)
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	e05a      	b.n	800182e <inverter_matriz+0x1ea>
                {
                    matriz[k][j] -= fator * matriz[i][j];
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	4613      	mov	r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	4413      	add	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	461a      	mov	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4413      	add	r3, r2
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800178e:	69fa      	ldr	r2, [r7, #28]
 8001790:	4613      	mov	r3, r2
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	4413      	add	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	461a      	mov	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a4:	68b9      	ldr	r1, [r7, #8]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fb9c 	bl	8000ee4 <__aeabi_fmul>
 80017ac:	4603      	mov	r3, r0
 80017ae:	4619      	mov	r1, r3
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	4613      	mov	r3, r2
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	4413      	add	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	461a      	mov	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	189c      	adds	r4, r3, r2
 80017c0:	4628      	mov	r0, r5
 80017c2:	f7ff fa85 	bl	8000cd0 <__aeabi_fsub>
 80017c6:	4603      	mov	r3, r0
 80017c8:	461a      	mov	r2, r3
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
                    inversa[k][j] -= fator * inversa[i][j];
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	4613      	mov	r3, r2
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	4413      	add	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	461a      	mov	r2, r3
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	4413      	add	r3, r2
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80017e6:	69fa      	ldr	r2, [r7, #28]
 80017e8:	4613      	mov	r3, r2
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	4413      	add	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	461a      	mov	r2, r3
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	4413      	add	r3, r2
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017fc:	68b9      	ldr	r1, [r7, #8]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fb70 	bl	8000ee4 <__aeabi_fmul>
 8001804:	4603      	mov	r3, r0
 8001806:	4619      	mov	r1, r3
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	4613      	mov	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	4413      	add	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	461a      	mov	r2, r3
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	189c      	adds	r4, r3, r2
 8001818:	4628      	mov	r0, r5
 800181a:	f7ff fa59 	bl	8000cd0 <__aeabi_fsub>
 800181e:	4603      	mov	r3, r0
 8001820:	461a      	mov	r2, r3
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
                for (int j = 0; j < N; j++)
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	3301      	adds	r3, #1
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	2b08      	cmp	r3, #8
 8001832:	dda1      	ble.n	8001778 <inverter_matriz+0x134>
        for (int k = 0; k < N; k++)
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	3301      	adds	r3, #1
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	2b08      	cmp	r3, #8
 800183e:	dd88      	ble.n	8001752 <inverter_matriz+0x10e>
    for (int i = 0; i < N; i++)
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	3301      	adds	r3, #1
 8001844:	61fb      	str	r3, [r7, #28]
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	2b08      	cmp	r3, #8
 800184a:	f77f af34 	ble.w	80016b6 <inverter_matriz+0x72>
                }
            }
        }
    }
}
 800184e:	bf00      	nop
 8001850:	bf00      	nop
 8001852:	3728      	adds	r7, #40	@ 0x28
 8001854:	46bd      	mov	sp, r7
 8001856:	bdb0      	pop	{r4, r5, r7, pc}

08001858 <NLLS>:


uint8_t NLLS(float *mx, float *my, float *mz, float *p)
{
 8001858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800185c:	f5ad 3db8 	sub.w	sp, sp, #94208	@ 0x17000
 8001860:	b091      	sub	sp, #68	@ 0x44
 8001862:	af00      	add	r7, sp, #0
 8001864:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001868:	f844 0c34 	str.w	r0, [r4, #-52]
 800186c:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001870:	f840 1c38 	str.w	r1, [r0, #-56]
 8001874:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8001878:	f841 2c3c 	str.w	r2, [r1, #-60]
 800187c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001880:	f842 3c40 	str.w	r3, [r2, #-64]
	uint8_t passo = 0, loop = 1;
 8001884:	2300      	movs	r3, #0
 8001886:	4a51      	ldr	r2, [pc, #324]	@ (80019cc <NLLS+0x174>)
 8001888:	443a      	add	r2, r7
 800188a:	7013      	strb	r3, [r2, #0]
 800188c:	2301      	movs	r3, #1
 800188e:	4a50      	ldr	r2, [pc, #320]	@ (80019d0 <NLLS+0x178>)
 8001890:	443a      	add	r2, r7
 8001892:	7013      	strb	r3, [r2, #0]
	float sf = 1;
 8001894:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001898:	4a4e      	ldr	r2, [pc, #312]	@ (80019d4 <NLLS+0x17c>)
 800189a:	443a      	add	r2, r7
 800189c:	6013      	str	r3, [r2, #0]
	float p0[9] = {1, 1, 1, 0, 0, 0, 0, 0, 0}, Be[tam], e[tam], f[tam], sx, sy, sz, bx, by, bz, rho, phi, lambida, error_ant, J, delta_J, mat_H[N][tam];
 800189e:	4b4e      	ldr	r3, [pc, #312]	@ (80019d8 <NLLS+0x180>)
 80018a0:	4c4e      	ldr	r4, [pc, #312]	@ (80019dc <NLLS+0x184>)
 80018a2:	443c      	add	r4, r7
 80018a4:	461d      	mov	r5, r3
 80018a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018ae:	682b      	ldr	r3, [r5, #0]
 80018b0:	6023      	str	r3, [r4, #0]
	float sin_phi, sin_rho, sin_lambda, cos_phi, cos_rho, cos_lambda;
	float Ht_H[N][N], Ht_e[N], inv[N][N], mul_mat[N][tam];

	for (int i=0; i < tam; i++)
 80018b2:	2300      	movs	r3, #0
 80018b4:	4a4a      	ldr	r2, [pc, #296]	@ (80019e0 <NLLS+0x188>)
 80018b6:	443a      	add	r2, r7
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	e012      	b.n	80018e2 <NLLS+0x8a>
	{
		Be[i] = 1*sf;
 80018bc:	4b49      	ldr	r3, [pc, #292]	@ (80019e4 <NLLS+0x18c>)
 80018be:	443b      	add	r3, r7
 80018c0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018c4:	4a46      	ldr	r2, [pc, #280]	@ (80019e0 <NLLS+0x188>)
 80018c6:	443a      	add	r2, r7
 80018c8:	6812      	ldr	r2, [r2, #0]
 80018ca:	4942      	ldr	r1, [pc, #264]	@ (80019d4 <NLLS+0x17c>)
 80018cc:	4439      	add	r1, r7
 80018ce:	6809      	ldr	r1, [r1, #0]
 80018d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i=0; i < tam; i++)
 80018d4:	4b42      	ldr	r3, [pc, #264]	@ (80019e0 <NLLS+0x188>)
 80018d6:	443b      	add	r3, r7
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	3301      	adds	r3, #1
 80018dc:	4a40      	ldr	r2, [pc, #256]	@ (80019e0 <NLLS+0x188>)
 80018de:	443a      	add	r2, r7
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	4b3f      	ldr	r3, [pc, #252]	@ (80019e0 <NLLS+0x188>)
 80018e4:	443b      	add	r3, r7
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 80018ec:	dbe6      	blt.n	80018bc <NLLS+0x64>
	}

	while(loop == 1)
 80018ee:	f003 be3f 	b.w	8005570 <NLLS+0x3d18>
	{
		sx = p0[0];
 80018f2:	4b3a      	ldr	r3, [pc, #232]	@ (80019dc <NLLS+0x184>)
 80018f4:	443b      	add	r3, r7
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a3b      	ldr	r2, [pc, #236]	@ (80019e8 <NLLS+0x190>)
 80018fa:	443a      	add	r2, r7
 80018fc:	6013      	str	r3, [r2, #0]
		sy = p0[1];
 80018fe:	4b3b      	ldr	r3, [pc, #236]	@ (80019ec <NLLS+0x194>)
 8001900:	443b      	add	r3, r7
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a3a      	ldr	r2, [pc, #232]	@ (80019f0 <NLLS+0x198>)
 8001906:	443a      	add	r2, r7
 8001908:	6013      	str	r3, [r2, #0]
		sz = p0[2];
 800190a:	4b3a      	ldr	r3, [pc, #232]	@ (80019f4 <NLLS+0x19c>)
 800190c:	443b      	add	r3, r7
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a39      	ldr	r2, [pc, #228]	@ (80019f8 <NLLS+0x1a0>)
 8001912:	443a      	add	r2, r7
 8001914:	6013      	str	r3, [r2, #0]
		bx = p0[3];
 8001916:	4b39      	ldr	r3, [pc, #228]	@ (80019fc <NLLS+0x1a4>)
 8001918:	443b      	add	r3, r7
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a38      	ldr	r2, [pc, #224]	@ (8001a00 <NLLS+0x1a8>)
 800191e:	443a      	add	r2, r7
 8001920:	6013      	str	r3, [r2, #0]
		by = p0[4];
 8001922:	4b38      	ldr	r3, [pc, #224]	@ (8001a04 <NLLS+0x1ac>)
 8001924:	443b      	add	r3, r7
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a37      	ldr	r2, [pc, #220]	@ (8001a08 <NLLS+0x1b0>)
 800192a:	443a      	add	r2, r7
 800192c:	6013      	str	r3, [r2, #0]
		bz = p0[5];
 800192e:	4b37      	ldr	r3, [pc, #220]	@ (8001a0c <NLLS+0x1b4>)
 8001930:	443b      	add	r3, r7
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a36      	ldr	r2, [pc, #216]	@ (8001a10 <NLLS+0x1b8>)
 8001936:	443a      	add	r2, r7
 8001938:	6013      	str	r3, [r2, #0]
		rho = p0[6];
 800193a:	4b36      	ldr	r3, [pc, #216]	@ (8001a14 <NLLS+0x1bc>)
 800193c:	443b      	add	r3, r7
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a35      	ldr	r2, [pc, #212]	@ (8001a18 <NLLS+0x1c0>)
 8001942:	443a      	add	r2, r7
 8001944:	6013      	str	r3, [r2, #0]
		phi = p0[7];
 8001946:	4b35      	ldr	r3, [pc, #212]	@ (8001a1c <NLLS+0x1c4>)
 8001948:	443b      	add	r3, r7
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a34      	ldr	r2, [pc, #208]	@ (8001a20 <NLLS+0x1c8>)
 800194e:	443a      	add	r2, r7
 8001950:	6013      	str	r3, [r2, #0]
		lambida = p0[8];
 8001952:	4b34      	ldr	r3, [pc, #208]	@ (8001a24 <NLLS+0x1cc>)
 8001954:	443b      	add	r3, r7
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a33      	ldr	r2, [pc, #204]	@ (8001a28 <NLLS+0x1d0>)
 800195a:	443a      	add	r2, r7
 800195c:	6013      	str	r3, [r2, #0]

		sin_phi = sinf(phi);//phi - (phi*phi*phi)/6;// + (phi*phi*phi*phi*phi)/120;
 800195e:	4b30      	ldr	r3, [pc, #192]	@ (8001a20 <NLLS+0x1c8>)
 8001960:	443b      	add	r3, r7
 8001962:	6818      	ldr	r0, [r3, #0]
 8001964:	f012 f806 	bl	8013974 <sinf>
 8001968:	4b30      	ldr	r3, [pc, #192]	@ (8001a2c <NLLS+0x1d4>)
 800196a:	443b      	add	r3, r7
 800196c:	6018      	str	r0, [r3, #0]
		sin_rho = sinf(rho);//rho - (rho*rho*rho)/6;// + (rho*rho*rho*rho*rho)/120;
 800196e:	4b2a      	ldr	r3, [pc, #168]	@ (8001a18 <NLLS+0x1c0>)
 8001970:	443b      	add	r3, r7
 8001972:	6818      	ldr	r0, [r3, #0]
 8001974:	f011 fffe 	bl	8013974 <sinf>
 8001978:	4b2d      	ldr	r3, [pc, #180]	@ (8001a30 <NLLS+0x1d8>)
 800197a:	443b      	add	r3, r7
 800197c:	6018      	str	r0, [r3, #0]
		sin_lambda = sinf(lambida);//lambida - (lambida*lambida*lambida)/6;// + (lambida*lambida*lambida*lambida*lambida)/120;
 800197e:	4b2a      	ldr	r3, [pc, #168]	@ (8001a28 <NLLS+0x1d0>)
 8001980:	443b      	add	r3, r7
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	f011 fff6 	bl	8013974 <sinf>
 8001988:	4b2a      	ldr	r3, [pc, #168]	@ (8001a34 <NLLS+0x1dc>)
 800198a:	443b      	add	r3, r7
 800198c:	6018      	str	r0, [r3, #0]
		cos_phi = cosf(phi);//1 - (phi*phi)/2;// + (phi*phi*phi*phi)/24;
 800198e:	4b24      	ldr	r3, [pc, #144]	@ (8001a20 <NLLS+0x1c8>)
 8001990:	443b      	add	r3, r7
 8001992:	6818      	ldr	r0, [r3, #0]
 8001994:	f011 ffb2 	bl	80138fc <cosf>
 8001998:	4b27      	ldr	r3, [pc, #156]	@ (8001a38 <NLLS+0x1e0>)
 800199a:	443b      	add	r3, r7
 800199c:	6018      	str	r0, [r3, #0]
		cos_rho = cosf(rho);///1 - (rho*rho)/2;// + (rho*rho*rho*rho)/24;
 800199e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a18 <NLLS+0x1c0>)
 80019a0:	443b      	add	r3, r7
 80019a2:	6818      	ldr	r0, [r3, #0]
 80019a4:	f011 ffaa 	bl	80138fc <cosf>
 80019a8:	4b24      	ldr	r3, [pc, #144]	@ (8001a3c <NLLS+0x1e4>)
 80019aa:	443b      	add	r3, r7
 80019ac:	6018      	str	r0, [r3, #0]
		cos_lambda = cosf(lambida);//1 - (lambida*lambida)/2;// + (lambida*lambida*lambida*lambida)/24;
 80019ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001a28 <NLLS+0x1d0>)
 80019b0:	443b      	add	r3, r7
 80019b2:	6818      	ldr	r0, [r3, #0]
 80019b4:	f011 ffa2 	bl	80138fc <cosf>
 80019b8:	4b21      	ldr	r3, [pc, #132]	@ (8001a40 <NLLS+0x1e8>)
 80019ba:	443b      	add	r3, r7
 80019bc:	6018      	str	r0, [r3, #0]

		for(int i=0; i < tam; i++)
 80019be:	2300      	movs	r3, #0
 80019c0:	4a20      	ldr	r2, [pc, #128]	@ (8001a44 <NLLS+0x1ec>)
 80019c2:	443a      	add	r2, r7
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	f003 bb0a 	b.w	8004fde <NLLS+0x3786>
 80019ca:	bf00      	nop
 80019cc:	0001703f 	.word	0x0001703f
 80019d0:	0001703e 	.word	0x0001703e
 80019d4:	00016fdc 	.word	0x00016fdc
 80019d8:	080145f8 	.word	0x080145f8
 80019dc:	00016f9c 	.word	0x00016f9c
 80019e0:	0001700c 	.word	0x0001700c
 80019e4:	00016040 	.word	0x00016040
 80019e8:	00017038 	.word	0x00017038
 80019ec:	00016fa0 	.word	0x00016fa0
 80019f0:	00017034 	.word	0x00017034
 80019f4:	00016fa4 	.word	0x00016fa4
 80019f8:	00017030 	.word	0x00017030
 80019fc:	00016fa8 	.word	0x00016fa8
 8001a00:	0001702c 	.word	0x0001702c
 8001a04:	00016fac 	.word	0x00016fac
 8001a08:	00017028 	.word	0x00017028
 8001a0c:	00016fb0 	.word	0x00016fb0
 8001a10:	00017024 	.word	0x00017024
 8001a14:	00016fb4 	.word	0x00016fb4
 8001a18:	00017020 	.word	0x00017020
 8001a1c:	00016fb8 	.word	0x00016fb8
 8001a20:	0001701c 	.word	0x0001701c
 8001a24:	00016fbc 	.word	0x00016fbc
 8001a28:	00017018 	.word	0x00017018
 8001a2c:	00016fd8 	.word	0x00016fd8
 8001a30:	00016fd4 	.word	0x00016fd4
 8001a34:	00016fd0 	.word	0x00016fd0
 8001a38:	00016fcc 	.word	0x00016fcc
 8001a3c:	00016fc8 	.word	0x00016fc8
 8001a40:	00016fc4 	.word	0x00016fc4
 8001a44:	00017008 	.word	0x00017008
		{
			f[i] = ((mx[i]-bx)*(mx[i]-bx))/(sx*sx) + ((sx*(my[i]-by) - sy*sin_rho*(mx[i]-bx))*((sx*(my[i]-by) - sy*sin_rho*(mx[i]-bx))))/((sx*sy*cos_rho)*(sx*sy*cos_rho)) + ((sx*sy*cos_rho*(mz[i]-bz) - sx*sz*sin_lambda*(my[i]-by) + sy*sz*(sin_lambda*sin_rho - cos_rho*sin_phi*cos_lambda)*(mx[i]-bx))*(sx*sy*cos_rho*(mz[i]-bz) - sx*sz*sin_lambda*(my[i]-by) + sy*sz*(sin_lambda*sin_rho - cos_rho*sin_phi*cos_lambda)*(mx[i]-bx)))/((sx*sy*sz*cos_rho*cos_phi*cos_lambda)*(sx*sy*sz*cos_rho*cos_phi*cos_lambda));
 8001a48:	4b9a      	ldr	r3, [pc, #616]	@ (8001cb4 <NLLS+0x45c>)
 8001a4a:	443b      	add	r3, r7
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001a54:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8001a58:	4413      	add	r3, r2
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a96      	ldr	r2, [pc, #600]	@ (8001cb8 <NLLS+0x460>)
 8001a5e:	443a      	add	r2, r7
 8001a60:	6811      	ldr	r1, [r2, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff f934 	bl	8000cd0 <__aeabi_fsub>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	461c      	mov	r4, r3
 8001a6c:	4b91      	ldr	r3, [pc, #580]	@ (8001cb4 <NLLS+0x45c>)
 8001a6e:	443b      	add	r3, r7
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001a78:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a8d      	ldr	r2, [pc, #564]	@ (8001cb8 <NLLS+0x460>)
 8001a82:	443a      	add	r2, r7
 8001a84:	6811      	ldr	r1, [r2, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff f922 	bl	8000cd0 <__aeabi_fsub>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4620      	mov	r0, r4
 8001a92:	f7ff fa27 	bl	8000ee4 <__aeabi_fmul>
 8001a96:	4603      	mov	r3, r0
 8001a98:	461c      	mov	r4, r3
 8001a9a:	4b88      	ldr	r3, [pc, #544]	@ (8001cbc <NLLS+0x464>)
 8001a9c:	443b      	add	r3, r7
 8001a9e:	6819      	ldr	r1, [r3, #0]
 8001aa0:	4b86      	ldr	r3, [pc, #536]	@ (8001cbc <NLLS+0x464>)
 8001aa2:	443b      	add	r3, r7
 8001aa4:	6818      	ldr	r0, [r3, #0]
 8001aa6:	f7ff fa1d 	bl	8000ee4 <__aeabi_fmul>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	4619      	mov	r1, r3
 8001aae:	4620      	mov	r0, r4
 8001ab0:	f7ff facc 	bl	800104c <__aeabi_fdiv>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	461c      	mov	r4, r3
 8001ab8:	4b7e      	ldr	r3, [pc, #504]	@ (8001cb4 <NLLS+0x45c>)
 8001aba:	443b      	add	r3, r7
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001ac4:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8001ac8:	4413      	add	r3, r2
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a7c      	ldr	r2, [pc, #496]	@ (8001cc0 <NLLS+0x468>)
 8001ace:	443a      	add	r2, r7
 8001ad0:	6811      	ldr	r1, [r2, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff f8fc 	bl	8000cd0 <__aeabi_fsub>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	4a78      	ldr	r2, [pc, #480]	@ (8001cbc <NLLS+0x464>)
 8001adc:	443a      	add	r2, r7
 8001ade:	6811      	ldr	r1, [r2, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff f9ff 	bl	8000ee4 <__aeabi_fmul>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	461d      	mov	r5, r3
 8001aea:	4b76      	ldr	r3, [pc, #472]	@ (8001cc4 <NLLS+0x46c>)
 8001aec:	443b      	add	r3, r7
 8001aee:	6819      	ldr	r1, [r3, #0]
 8001af0:	4b75      	ldr	r3, [pc, #468]	@ (8001cc8 <NLLS+0x470>)
 8001af2:	443b      	add	r3, r7
 8001af4:	6818      	ldr	r0, [r3, #0]
 8001af6:	f7ff f9f5 	bl	8000ee4 <__aeabi_fmul>
 8001afa:	4603      	mov	r3, r0
 8001afc:	461e      	mov	r6, r3
 8001afe:	4b6d      	ldr	r3, [pc, #436]	@ (8001cb4 <NLLS+0x45c>)
 8001b00:	443b      	add	r3, r7
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001b0a:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8001b0e:	4413      	add	r3, r2
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a69      	ldr	r2, [pc, #420]	@ (8001cb8 <NLLS+0x460>)
 8001b14:	443a      	add	r2, r7
 8001b16:	6811      	ldr	r1, [r2, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff f8d9 	bl	8000cd0 <__aeabi_fsub>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4619      	mov	r1, r3
 8001b22:	4630      	mov	r0, r6
 8001b24:	f7ff f9de 	bl	8000ee4 <__aeabi_fmul>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4628      	mov	r0, r5
 8001b2e:	f7ff f8cf 	bl	8000cd0 <__aeabi_fsub>
 8001b32:	4603      	mov	r3, r0
 8001b34:	461d      	mov	r5, r3
 8001b36:	4b5f      	ldr	r3, [pc, #380]	@ (8001cb4 <NLLS+0x45c>)
 8001b38:	443b      	add	r3, r7
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001b42:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8001b46:	4413      	add	r3, r2
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a5d      	ldr	r2, [pc, #372]	@ (8001cc0 <NLLS+0x468>)
 8001b4c:	443a      	add	r2, r7
 8001b4e:	6811      	ldr	r1, [r2, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff f8bd 	bl	8000cd0 <__aeabi_fsub>
 8001b56:	4603      	mov	r3, r0
 8001b58:	4a58      	ldr	r2, [pc, #352]	@ (8001cbc <NLLS+0x464>)
 8001b5a:	443a      	add	r2, r7
 8001b5c:	6811      	ldr	r1, [r2, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff f9c0 	bl	8000ee4 <__aeabi_fmul>
 8001b64:	4603      	mov	r3, r0
 8001b66:	461e      	mov	r6, r3
 8001b68:	4b56      	ldr	r3, [pc, #344]	@ (8001cc4 <NLLS+0x46c>)
 8001b6a:	443b      	add	r3, r7
 8001b6c:	6819      	ldr	r1, [r3, #0]
 8001b6e:	4b56      	ldr	r3, [pc, #344]	@ (8001cc8 <NLLS+0x470>)
 8001b70:	443b      	add	r3, r7
 8001b72:	6818      	ldr	r0, [r3, #0]
 8001b74:	f7ff f9b6 	bl	8000ee4 <__aeabi_fmul>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	4698      	mov	r8, r3
 8001b7c:	4b4d      	ldr	r3, [pc, #308]	@ (8001cb4 <NLLS+0x45c>)
 8001b7e:	443b      	add	r3, r7
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001b88:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a49      	ldr	r2, [pc, #292]	@ (8001cb8 <NLLS+0x460>)
 8001b92:	443a      	add	r2, r7
 8001b94:	6811      	ldr	r1, [r2, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff f89a 	bl	8000cd0 <__aeabi_fsub>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4640      	mov	r0, r8
 8001ba2:	f7ff f99f 	bl	8000ee4 <__aeabi_fmul>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4630      	mov	r0, r6
 8001bac:	f7ff f890 	bl	8000cd0 <__aeabi_fsub>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4628      	mov	r0, r5
 8001bb6:	f7ff f995 	bl	8000ee4 <__aeabi_fmul>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	461d      	mov	r5, r3
 8001bbe:	4b42      	ldr	r3, [pc, #264]	@ (8001cc8 <NLLS+0x470>)
 8001bc0:	443b      	add	r3, r7
 8001bc2:	6819      	ldr	r1, [r3, #0]
 8001bc4:	4b3d      	ldr	r3, [pc, #244]	@ (8001cbc <NLLS+0x464>)
 8001bc6:	443b      	add	r3, r7
 8001bc8:	6818      	ldr	r0, [r3, #0]
 8001bca:	f7ff f98b 	bl	8000ee4 <__aeabi_fmul>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4a3e      	ldr	r2, [pc, #248]	@ (8001ccc <NLLS+0x474>)
 8001bd2:	443a      	add	r2, r7
 8001bd4:	6811      	ldr	r1, [r2, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff f984 	bl	8000ee4 <__aeabi_fmul>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	461e      	mov	r6, r3
 8001be0:	4b39      	ldr	r3, [pc, #228]	@ (8001cc8 <NLLS+0x470>)
 8001be2:	443b      	add	r3, r7
 8001be4:	6819      	ldr	r1, [r3, #0]
 8001be6:	4b35      	ldr	r3, [pc, #212]	@ (8001cbc <NLLS+0x464>)
 8001be8:	443b      	add	r3, r7
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	f7ff f97a 	bl	8000ee4 <__aeabi_fmul>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	4a36      	ldr	r2, [pc, #216]	@ (8001ccc <NLLS+0x474>)
 8001bf4:	443a      	add	r2, r7
 8001bf6:	6811      	ldr	r1, [r2, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff f973 	bl	8000ee4 <__aeabi_fmul>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	4619      	mov	r1, r3
 8001c02:	4630      	mov	r0, r6
 8001c04:	f7ff f96e 	bl	8000ee4 <__aeabi_fmul>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4628      	mov	r0, r5
 8001c0e:	f7ff fa1d 	bl	800104c <__aeabi_fdiv>
 8001c12:	4603      	mov	r3, r0
 8001c14:	4619      	mov	r1, r3
 8001c16:	4620      	mov	r0, r4
 8001c18:	f7ff f85c 	bl	8000cd4 <__addsf3>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	461c      	mov	r4, r3
 8001c20:	4b29      	ldr	r3, [pc, #164]	@ (8001cc8 <NLLS+0x470>)
 8001c22:	443b      	add	r3, r7
 8001c24:	6819      	ldr	r1, [r3, #0]
 8001c26:	4b25      	ldr	r3, [pc, #148]	@ (8001cbc <NLLS+0x464>)
 8001c28:	443b      	add	r3, r7
 8001c2a:	6818      	ldr	r0, [r3, #0]
 8001c2c:	f7ff f95a 	bl	8000ee4 <__aeabi_fmul>
 8001c30:	4603      	mov	r3, r0
 8001c32:	4a26      	ldr	r2, [pc, #152]	@ (8001ccc <NLLS+0x474>)
 8001c34:	443a      	add	r2, r7
 8001c36:	6811      	ldr	r1, [r2, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff f953 	bl	8000ee4 <__aeabi_fmul>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	461d      	mov	r5, r3
 8001c42:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb4 <NLLS+0x45c>)
 8001c44:	443b      	add	r3, r7
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001c4e:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8001c52:	4413      	add	r3, r2
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a1e      	ldr	r2, [pc, #120]	@ (8001cd0 <NLLS+0x478>)
 8001c58:	443a      	add	r2, r7
 8001c5a:	6811      	ldr	r1, [r2, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff f837 	bl	8000cd0 <__aeabi_fsub>
 8001c62:	4603      	mov	r3, r0
 8001c64:	4619      	mov	r1, r3
 8001c66:	4628      	mov	r0, r5
 8001c68:	f7ff f93c 	bl	8000ee4 <__aeabi_fmul>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	461d      	mov	r5, r3
 8001c70:	4b18      	ldr	r3, [pc, #96]	@ (8001cd4 <NLLS+0x47c>)
 8001c72:	443b      	add	r3, r7
 8001c74:	6819      	ldr	r1, [r3, #0]
 8001c76:	4b11      	ldr	r3, [pc, #68]	@ (8001cbc <NLLS+0x464>)
 8001c78:	443b      	add	r3, r7
 8001c7a:	6818      	ldr	r0, [r3, #0]
 8001c7c:	f7ff f932 	bl	8000ee4 <__aeabi_fmul>
 8001c80:	4603      	mov	r3, r0
 8001c82:	4a15      	ldr	r2, [pc, #84]	@ (8001cd8 <NLLS+0x480>)
 8001c84:	443a      	add	r2, r7
 8001c86:	6811      	ldr	r1, [r2, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff f92b 	bl	8000ee4 <__aeabi_fmul>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	461e      	mov	r6, r3
 8001c92:	4b08      	ldr	r3, [pc, #32]	@ (8001cb4 <NLLS+0x45c>)
 8001c94:	443b      	add	r3, r7
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001c9e:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a06      	ldr	r2, [pc, #24]	@ (8001cc0 <NLLS+0x468>)
 8001ca8:	443a      	add	r2, r7
 8001caa:	6811      	ldr	r1, [r2, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff f80f 	bl	8000cd0 <__aeabi_fsub>
 8001cb2:	e013      	b.n	8001cdc <NLLS+0x484>
 8001cb4:	00017008 	.word	0x00017008
 8001cb8:	0001702c 	.word	0x0001702c
 8001cbc:	00017038 	.word	0x00017038
 8001cc0:	00017028 	.word	0x00017028
 8001cc4:	00016fd4 	.word	0x00016fd4
 8001cc8:	00017034 	.word	0x00017034
 8001ccc:	00016fc8 	.word	0x00016fc8
 8001cd0:	00017024 	.word	0x00017024
 8001cd4:	00017030 	.word	0x00017030
 8001cd8:	00016fd0 	.word	0x00016fd0
 8001cdc:	4603      	mov	r3, r0
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4630      	mov	r0, r6
 8001ce2:	f7ff f8ff 	bl	8000ee4 <__aeabi_fmul>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4628      	mov	r0, r5
 8001cec:	f7fe fff0 	bl	8000cd0 <__aeabi_fsub>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	461d      	mov	r5, r3
 8001cf4:	4b96      	ldr	r3, [pc, #600]	@ (8001f50 <NLLS+0x6f8>)
 8001cf6:	443b      	add	r3, r7
 8001cf8:	6819      	ldr	r1, [r3, #0]
 8001cfa:	4b96      	ldr	r3, [pc, #600]	@ (8001f54 <NLLS+0x6fc>)
 8001cfc:	443b      	add	r3, r7
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	f7ff f8f0 	bl	8000ee4 <__aeabi_fmul>
 8001d04:	4603      	mov	r3, r0
 8001d06:	461e      	mov	r6, r3
 8001d08:	4b93      	ldr	r3, [pc, #588]	@ (8001f58 <NLLS+0x700>)
 8001d0a:	443b      	add	r3, r7
 8001d0c:	6819      	ldr	r1, [r3, #0]
 8001d0e:	4b93      	ldr	r3, [pc, #588]	@ (8001f5c <NLLS+0x704>)
 8001d10:	443b      	add	r3, r7
 8001d12:	6818      	ldr	r0, [r3, #0]
 8001d14:	f7ff f8e6 	bl	8000ee4 <__aeabi_fmul>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	4698      	mov	r8, r3
 8001d1c:	4b90      	ldr	r3, [pc, #576]	@ (8001f60 <NLLS+0x708>)
 8001d1e:	443b      	add	r3, r7
 8001d20:	6819      	ldr	r1, [r3, #0]
 8001d22:	4b90      	ldr	r3, [pc, #576]	@ (8001f64 <NLLS+0x70c>)
 8001d24:	443b      	add	r3, r7
 8001d26:	6818      	ldr	r0, [r3, #0]
 8001d28:	f7ff f8dc 	bl	8000ee4 <__aeabi_fmul>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	4a8e      	ldr	r2, [pc, #568]	@ (8001f68 <NLLS+0x710>)
 8001d30:	443a      	add	r2, r7
 8001d32:	6811      	ldr	r1, [r2, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff f8d5 	bl	8000ee4 <__aeabi_fmul>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4640      	mov	r0, r8
 8001d40:	f7fe ffc6 	bl	8000cd0 <__aeabi_fsub>
 8001d44:	4603      	mov	r3, r0
 8001d46:	4619      	mov	r1, r3
 8001d48:	4630      	mov	r0, r6
 8001d4a:	f7ff f8cb 	bl	8000ee4 <__aeabi_fmul>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	461e      	mov	r6, r3
 8001d52:	4b86      	ldr	r3, [pc, #536]	@ (8001f6c <NLLS+0x714>)
 8001d54:	443b      	add	r3, r7
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001d5e:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8001d62:	4413      	add	r3, r2
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a82      	ldr	r2, [pc, #520]	@ (8001f70 <NLLS+0x718>)
 8001d68:	443a      	add	r2, r7
 8001d6a:	6811      	ldr	r1, [r2, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe ffaf 	bl	8000cd0 <__aeabi_fsub>
 8001d72:	4603      	mov	r3, r0
 8001d74:	4619      	mov	r1, r3
 8001d76:	4630      	mov	r0, r6
 8001d78:	f7ff f8b4 	bl	8000ee4 <__aeabi_fmul>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4628      	mov	r0, r5
 8001d82:	f7fe ffa7 	bl	8000cd4 <__addsf3>
 8001d86:	4603      	mov	r3, r0
 8001d88:	461d      	mov	r5, r3
 8001d8a:	4b72      	ldr	r3, [pc, #456]	@ (8001f54 <NLLS+0x6fc>)
 8001d8c:	443b      	add	r3, r7
 8001d8e:	6819      	ldr	r1, [r3, #0]
 8001d90:	4b78      	ldr	r3, [pc, #480]	@ (8001f74 <NLLS+0x71c>)
 8001d92:	443b      	add	r3, r7
 8001d94:	6818      	ldr	r0, [r3, #0]
 8001d96:	f7ff f8a5 	bl	8000ee4 <__aeabi_fmul>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4a71      	ldr	r2, [pc, #452]	@ (8001f64 <NLLS+0x70c>)
 8001d9e:	443a      	add	r2, r7
 8001da0:	6811      	ldr	r1, [r2, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff f89e 	bl	8000ee4 <__aeabi_fmul>
 8001da8:	4603      	mov	r3, r0
 8001daa:	461e      	mov	r6, r3
 8001dac:	4b6f      	ldr	r3, [pc, #444]	@ (8001f6c <NLLS+0x714>)
 8001dae:	443b      	add	r3, r7
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001db8:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a6d      	ldr	r2, [pc, #436]	@ (8001f78 <NLLS+0x720>)
 8001dc2:	443a      	add	r2, r7
 8001dc4:	6811      	ldr	r1, [r2, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe ff82 	bl	8000cd0 <__aeabi_fsub>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4630      	mov	r0, r6
 8001dd2:	f7ff f887 	bl	8000ee4 <__aeabi_fmul>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	461e      	mov	r6, r3
 8001dda:	4b5d      	ldr	r3, [pc, #372]	@ (8001f50 <NLLS+0x6f8>)
 8001ddc:	443b      	add	r3, r7
 8001dde:	6819      	ldr	r1, [r3, #0]
 8001de0:	4b64      	ldr	r3, [pc, #400]	@ (8001f74 <NLLS+0x71c>)
 8001de2:	443b      	add	r3, r7
 8001de4:	6818      	ldr	r0, [r3, #0]
 8001de6:	f7ff f87d 	bl	8000ee4 <__aeabi_fmul>
 8001dea:	4603      	mov	r3, r0
 8001dec:	4a5b      	ldr	r2, [pc, #364]	@ (8001f5c <NLLS+0x704>)
 8001dee:	443a      	add	r2, r7
 8001df0:	6811      	ldr	r1, [r2, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff f876 	bl	8000ee4 <__aeabi_fmul>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	4698      	mov	r8, r3
 8001dfc:	4b5b      	ldr	r3, [pc, #364]	@ (8001f6c <NLLS+0x714>)
 8001dfe:	443b      	add	r3, r7
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001e08:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a5a      	ldr	r2, [pc, #360]	@ (8001f7c <NLLS+0x724>)
 8001e12:	443a      	add	r2, r7
 8001e14:	6811      	ldr	r1, [r2, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe ff5a 	bl	8000cd0 <__aeabi_fsub>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4640      	mov	r0, r8
 8001e22:	f7ff f85f 	bl	8000ee4 <__aeabi_fmul>
 8001e26:	4603      	mov	r3, r0
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4630      	mov	r0, r6
 8001e2c:	f7fe ff50 	bl	8000cd0 <__aeabi_fsub>
 8001e30:	4603      	mov	r3, r0
 8001e32:	461e      	mov	r6, r3
 8001e34:	4b46      	ldr	r3, [pc, #280]	@ (8001f50 <NLLS+0x6f8>)
 8001e36:	443b      	add	r3, r7
 8001e38:	6819      	ldr	r1, [r3, #0]
 8001e3a:	4b46      	ldr	r3, [pc, #280]	@ (8001f54 <NLLS+0x6fc>)
 8001e3c:	443b      	add	r3, r7
 8001e3e:	6818      	ldr	r0, [r3, #0]
 8001e40:	f7ff f850 	bl	8000ee4 <__aeabi_fmul>
 8001e44:	4603      	mov	r3, r0
 8001e46:	4698      	mov	r8, r3
 8001e48:	4b43      	ldr	r3, [pc, #268]	@ (8001f58 <NLLS+0x700>)
 8001e4a:	443b      	add	r3, r7
 8001e4c:	6819      	ldr	r1, [r3, #0]
 8001e4e:	4b43      	ldr	r3, [pc, #268]	@ (8001f5c <NLLS+0x704>)
 8001e50:	443b      	add	r3, r7
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	f7ff f846 	bl	8000ee4 <__aeabi_fmul>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	4699      	mov	r9, r3
 8001e5c:	4b40      	ldr	r3, [pc, #256]	@ (8001f60 <NLLS+0x708>)
 8001e5e:	443b      	add	r3, r7
 8001e60:	6819      	ldr	r1, [r3, #0]
 8001e62:	4b40      	ldr	r3, [pc, #256]	@ (8001f64 <NLLS+0x70c>)
 8001e64:	443b      	add	r3, r7
 8001e66:	6818      	ldr	r0, [r3, #0]
 8001e68:	f7ff f83c 	bl	8000ee4 <__aeabi_fmul>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	4a3e      	ldr	r2, [pc, #248]	@ (8001f68 <NLLS+0x710>)
 8001e70:	443a      	add	r2, r7
 8001e72:	6811      	ldr	r1, [r2, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff f835 	bl	8000ee4 <__aeabi_fmul>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4648      	mov	r0, r9
 8001e80:	f7fe ff26 	bl	8000cd0 <__aeabi_fsub>
 8001e84:	4603      	mov	r3, r0
 8001e86:	4619      	mov	r1, r3
 8001e88:	4640      	mov	r0, r8
 8001e8a:	f7ff f82b 	bl	8000ee4 <__aeabi_fmul>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	4698      	mov	r8, r3
 8001e92:	4b36      	ldr	r3, [pc, #216]	@ (8001f6c <NLLS+0x714>)
 8001e94:	443b      	add	r3, r7
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001e9e:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a32      	ldr	r2, [pc, #200]	@ (8001f70 <NLLS+0x718>)
 8001ea8:	443a      	add	r2, r7
 8001eaa:	6811      	ldr	r1, [r2, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe ff0f 	bl	8000cd0 <__aeabi_fsub>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4640      	mov	r0, r8
 8001eb8:	f7ff f814 	bl	8000ee4 <__aeabi_fmul>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4630      	mov	r0, r6
 8001ec2:	f7fe ff07 	bl	8000cd4 <__addsf3>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4628      	mov	r0, r5
 8001ecc:	f7ff f80a 	bl	8000ee4 <__aeabi_fmul>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	461d      	mov	r5, r3
 8001ed4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f54 <NLLS+0x6fc>)
 8001ed6:	443b      	add	r3, r7
 8001ed8:	6819      	ldr	r1, [r3, #0]
 8001eda:	4b26      	ldr	r3, [pc, #152]	@ (8001f74 <NLLS+0x71c>)
 8001edc:	443b      	add	r3, r7
 8001ede:	6818      	ldr	r0, [r3, #0]
 8001ee0:	f7ff f800 	bl	8000ee4 <__aeabi_fmul>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	4a1a      	ldr	r2, [pc, #104]	@ (8001f50 <NLLS+0x6f8>)
 8001ee8:	443a      	add	r2, r7
 8001eea:	6811      	ldr	r1, [r2, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe fff9 	bl	8000ee4 <__aeabi_fmul>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	4a1b      	ldr	r2, [pc, #108]	@ (8001f64 <NLLS+0x70c>)
 8001ef6:	443a      	add	r2, r7
 8001ef8:	6811      	ldr	r1, [r2, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fff2 	bl	8000ee4 <__aeabi_fmul>
 8001f00:	4603      	mov	r3, r0
 8001f02:	4a1f      	ldr	r2, [pc, #124]	@ (8001f80 <NLLS+0x728>)
 8001f04:	443a      	add	r2, r7
 8001f06:	6811      	ldr	r1, [r2, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe ffeb 	bl	8000ee4 <__aeabi_fmul>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	4a15      	ldr	r2, [pc, #84]	@ (8001f68 <NLLS+0x710>)
 8001f12:	443a      	add	r2, r7
 8001f14:	6811      	ldr	r1, [r2, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe ffe4 	bl	8000ee4 <__aeabi_fmul>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	461e      	mov	r6, r3
 8001f20:	4b0c      	ldr	r3, [pc, #48]	@ (8001f54 <NLLS+0x6fc>)
 8001f22:	443b      	add	r3, r7
 8001f24:	6819      	ldr	r1, [r3, #0]
 8001f26:	4b13      	ldr	r3, [pc, #76]	@ (8001f74 <NLLS+0x71c>)
 8001f28:	443b      	add	r3, r7
 8001f2a:	6818      	ldr	r0, [r3, #0]
 8001f2c:	f7fe ffda 	bl	8000ee4 <__aeabi_fmul>
 8001f30:	4603      	mov	r3, r0
 8001f32:	4a07      	ldr	r2, [pc, #28]	@ (8001f50 <NLLS+0x6f8>)
 8001f34:	443a      	add	r2, r7
 8001f36:	6811      	ldr	r1, [r2, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe ffd3 	bl	8000ee4 <__aeabi_fmul>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	4a08      	ldr	r2, [pc, #32]	@ (8001f64 <NLLS+0x70c>)
 8001f42:	443a      	add	r2, r7
 8001f44:	6811      	ldr	r1, [r2, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe ffcc 	bl	8000ee4 <__aeabi_fmul>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	e019      	b.n	8001f84 <NLLS+0x72c>
 8001f50:	00017030 	.word	0x00017030
 8001f54:	00017034 	.word	0x00017034
 8001f58:	00016fd4 	.word	0x00016fd4
 8001f5c:	00016fd0 	.word	0x00016fd0
 8001f60:	00016fd8 	.word	0x00016fd8
 8001f64:	00016fc8 	.word	0x00016fc8
 8001f68:	00016fc4 	.word	0x00016fc4
 8001f6c:	00017008 	.word	0x00017008
 8001f70:	0001702c 	.word	0x0001702c
 8001f74:	00017038 	.word	0x00017038
 8001f78:	00017024 	.word	0x00017024
 8001f7c:	00017028 	.word	0x00017028
 8001f80:	00016fcc 	.word	0x00016fcc
 8001f84:	4a9b      	ldr	r2, [pc, #620]	@ (80021f4 <NLLS+0x99c>)
 8001f86:	443a      	add	r2, r7
 8001f88:	6811      	ldr	r1, [r2, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe ffaa 	bl	8000ee4 <__aeabi_fmul>
 8001f90:	4603      	mov	r3, r0
 8001f92:	4a99      	ldr	r2, [pc, #612]	@ (80021f8 <NLLS+0x9a0>)
 8001f94:	443a      	add	r2, r7
 8001f96:	6811      	ldr	r1, [r2, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe ffa3 	bl	8000ee4 <__aeabi_fmul>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4630      	mov	r0, r6
 8001fa4:	f7fe ff9e 	bl	8000ee4 <__aeabi_fmul>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	4619      	mov	r1, r3
 8001fac:	4628      	mov	r0, r5
 8001fae:	f7ff f84d 	bl	800104c <__aeabi_fdiv>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	f7fe fe8c 	bl	8000cd4 <__addsf3>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4b8e      	ldr	r3, [pc, #568]	@ (80021fc <NLLS+0x9a4>)
 8001fc2:	443b      	add	r3, r7
 8001fc4:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8001fc8:	4a8d      	ldr	r2, [pc, #564]	@ (8002200 <NLLS+0x9a8>)
 8001fca:	443a      	add	r2, r7
 8001fcc:	6812      	ldr	r2, [r2, #0]
 8001fce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			e[i] = (Be[i] * Be[i]) - f[i];
 8001fd2:	4b8c      	ldr	r3, [pc, #560]	@ (8002204 <NLLS+0x9ac>)
 8001fd4:	443b      	add	r3, r7
 8001fd6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001fda:	4a89      	ldr	r2, [pc, #548]	@ (8002200 <NLLS+0x9a8>)
 8001fdc:	443a      	add	r2, r7
 8001fde:	6812      	ldr	r2, [r2, #0]
 8001fe0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001fe4:	4b87      	ldr	r3, [pc, #540]	@ (8002204 <NLLS+0x9ac>)
 8001fe6:	443b      	add	r3, r7
 8001fe8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001fec:	4a84      	ldr	r2, [pc, #528]	@ (8002200 <NLLS+0x9a8>)
 8001fee:	443a      	add	r2, r7
 8001ff0:	6812      	ldr	r2, [r2, #0]
 8001ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f7fe ff74 	bl	8000ee4 <__aeabi_fmul>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	4618      	mov	r0, r3
 8002000:	4b7e      	ldr	r3, [pc, #504]	@ (80021fc <NLLS+0x9a4>)
 8002002:	443b      	add	r3, r7
 8002004:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8002008:	4a7d      	ldr	r2, [pc, #500]	@ (8002200 <NLLS+0x9a8>)
 800200a:	443a      	add	r2, r7
 800200c:	6812      	ldr	r2, [r2, #0]
 800200e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002012:	4619      	mov	r1, r3
 8002014:	f7fe fe5c 	bl	8000cd0 <__aeabi_fsub>
 8002018:	4603      	mov	r3, r0
 800201a:	4619      	mov	r1, r3
 800201c:	4b7a      	ldr	r3, [pc, #488]	@ (8002208 <NLLS+0x9b0>)
 800201e:	443b      	add	r3, r7
 8002020:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8002024:	4a76      	ldr	r2, [pc, #472]	@ (8002200 <NLLS+0x9a8>)
 8002026:	443a      	add	r2, r7
 8002028:	6812      	ldr	r2, [r2, #0]
 800202a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			mat_H[0][i] = (2*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))*(by - my[i]))/(sx*sx*sy*sy*cos_rho*cos_rho) - (2*((sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))))/((sx*sx*sx)*sy*sy*cos_rho*cos_rho) - (2*((bx - mx[i])*(bx - mx[i])))/(sx*sx*sx) - (2*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])) * (sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/((sx*sx*sx)*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho) + (2*(sy*cos_rho*(bz - mz[i]) - sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 800202e:	4b74      	ldr	r3, [pc, #464]	@ (8002200 <NLLS+0x9a8>)
 8002030:	443b      	add	r3, r7
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800203a:	f852 2c38 	ldr.w	r2, [r2, #-56]
 800203e:	4413      	add	r3, r2
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4619      	mov	r1, r3
 8002044:	4b71      	ldr	r3, [pc, #452]	@ (800220c <NLLS+0x9b4>)
 8002046:	443b      	add	r3, r7
 8002048:	6818      	ldr	r0, [r3, #0]
 800204a:	f7fe fe41 	bl	8000cd0 <__aeabi_fsub>
 800204e:	4603      	mov	r3, r0
 8002050:	4a6f      	ldr	r2, [pc, #444]	@ (8002210 <NLLS+0x9b8>)
 8002052:	443a      	add	r2, r7
 8002054:	6811      	ldr	r1, [r2, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe ff44 	bl	8000ee4 <__aeabi_fmul>
 800205c:	4603      	mov	r3, r0
 800205e:	461c      	mov	r4, r3
 8002060:	4b6c      	ldr	r3, [pc, #432]	@ (8002214 <NLLS+0x9bc>)
 8002062:	443b      	add	r3, r7
 8002064:	6819      	ldr	r1, [r3, #0]
 8002066:	4b6c      	ldr	r3, [pc, #432]	@ (8002218 <NLLS+0x9c0>)
 8002068:	443b      	add	r3, r7
 800206a:	6818      	ldr	r0, [r3, #0]
 800206c:	f7fe ff3a 	bl	8000ee4 <__aeabi_fmul>
 8002070:	4603      	mov	r3, r0
 8002072:	461d      	mov	r5, r3
 8002074:	4b62      	ldr	r3, [pc, #392]	@ (8002200 <NLLS+0x9a8>)
 8002076:	443b      	add	r3, r7
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002080:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8002084:	4413      	add	r3, r2
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4619      	mov	r1, r3
 800208a:	4b64      	ldr	r3, [pc, #400]	@ (800221c <NLLS+0x9c4>)
 800208c:	443b      	add	r3, r7
 800208e:	6818      	ldr	r0, [r3, #0]
 8002090:	f7fe fe1e 	bl	8000cd0 <__aeabi_fsub>
 8002094:	4603      	mov	r3, r0
 8002096:	4619      	mov	r1, r3
 8002098:	4628      	mov	r0, r5
 800209a:	f7fe ff23 	bl	8000ee4 <__aeabi_fmul>
 800209e:	4603      	mov	r3, r0
 80020a0:	4619      	mov	r1, r3
 80020a2:	4620      	mov	r0, r4
 80020a4:	f7fe fe14 	bl	8000cd0 <__aeabi_fsub>
 80020a8:	4603      	mov	r3, r0
 80020aa:	4619      	mov	r1, r3
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe fe11 	bl	8000cd4 <__addsf3>
 80020b2:	4603      	mov	r3, r0
 80020b4:	461c      	mov	r4, r3
 80020b6:	4b52      	ldr	r3, [pc, #328]	@ (8002200 <NLLS+0x9a8>)
 80020b8:	443b      	add	r3, r7
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80020c2:	f852 2c38 	ldr.w	r2, [r2, #-56]
 80020c6:	4413      	add	r3, r2
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4619      	mov	r1, r3
 80020cc:	4b4f      	ldr	r3, [pc, #316]	@ (800220c <NLLS+0x9b4>)
 80020ce:	443b      	add	r3, r7
 80020d0:	6818      	ldr	r0, [r3, #0]
 80020d2:	f7fe fdfd 	bl	8000cd0 <__aeabi_fsub>
 80020d6:	4603      	mov	r3, r0
 80020d8:	4619      	mov	r1, r3
 80020da:	4620      	mov	r0, r4
 80020dc:	f7fe ff02 	bl	8000ee4 <__aeabi_fmul>
 80020e0:	4603      	mov	r3, r0
 80020e2:	461c      	mov	r4, r3
 80020e4:	4b4a      	ldr	r3, [pc, #296]	@ (8002210 <NLLS+0x9b8>)
 80020e6:	443b      	add	r3, r7
 80020e8:	6819      	ldr	r1, [r3, #0]
 80020ea:	4b49      	ldr	r3, [pc, #292]	@ (8002210 <NLLS+0x9b8>)
 80020ec:	443b      	add	r3, r7
 80020ee:	6818      	ldr	r0, [r3, #0]
 80020f0:	f7fe fef8 	bl	8000ee4 <__aeabi_fmul>
 80020f4:	4603      	mov	r3, r0
 80020f6:	4a48      	ldr	r2, [pc, #288]	@ (8002218 <NLLS+0x9c0>)
 80020f8:	443a      	add	r2, r7
 80020fa:	6811      	ldr	r1, [r2, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe fef1 	bl	8000ee4 <__aeabi_fmul>
 8002102:	4603      	mov	r3, r0
 8002104:	4a44      	ldr	r2, [pc, #272]	@ (8002218 <NLLS+0x9c0>)
 8002106:	443a      	add	r2, r7
 8002108:	6811      	ldr	r1, [r2, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe feea 	bl	8000ee4 <__aeabi_fmul>
 8002110:	4603      	mov	r3, r0
 8002112:	4a43      	ldr	r2, [pc, #268]	@ (8002220 <NLLS+0x9c8>)
 8002114:	443a      	add	r2, r7
 8002116:	6811      	ldr	r1, [r2, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe fee3 	bl	8000ee4 <__aeabi_fmul>
 800211e:	4603      	mov	r3, r0
 8002120:	4a3f      	ldr	r2, [pc, #252]	@ (8002220 <NLLS+0x9c8>)
 8002122:	443a      	add	r2, r7
 8002124:	6811      	ldr	r1, [r2, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe fedc 	bl	8000ee4 <__aeabi_fmul>
 800212c:	4603      	mov	r3, r0
 800212e:	4619      	mov	r1, r3
 8002130:	4620      	mov	r0, r4
 8002132:	f7fe ff8b 	bl	800104c <__aeabi_fdiv>
 8002136:	4603      	mov	r3, r0
 8002138:	461c      	mov	r4, r3
 800213a:	4b31      	ldr	r3, [pc, #196]	@ (8002200 <NLLS+0x9a8>)
 800213c:	443b      	add	r3, r7
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002146:	f852 2c38 	ldr.w	r2, [r2, #-56]
 800214a:	4413      	add	r3, r2
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4619      	mov	r1, r3
 8002150:	4b2e      	ldr	r3, [pc, #184]	@ (800220c <NLLS+0x9b4>)
 8002152:	443b      	add	r3, r7
 8002154:	6818      	ldr	r0, [r3, #0]
 8002156:	f7fe fdbb 	bl	8000cd0 <__aeabi_fsub>
 800215a:	4603      	mov	r3, r0
 800215c:	4a2c      	ldr	r2, [pc, #176]	@ (8002210 <NLLS+0x9b8>)
 800215e:	443a      	add	r2, r7
 8002160:	6811      	ldr	r1, [r2, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe febe 	bl	8000ee4 <__aeabi_fmul>
 8002168:	4603      	mov	r3, r0
 800216a:	461d      	mov	r5, r3
 800216c:	4b29      	ldr	r3, [pc, #164]	@ (8002214 <NLLS+0x9bc>)
 800216e:	443b      	add	r3, r7
 8002170:	6819      	ldr	r1, [r3, #0]
 8002172:	4b29      	ldr	r3, [pc, #164]	@ (8002218 <NLLS+0x9c0>)
 8002174:	443b      	add	r3, r7
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	f7fe feb4 	bl	8000ee4 <__aeabi_fmul>
 800217c:	4603      	mov	r3, r0
 800217e:	461e      	mov	r6, r3
 8002180:	4b1f      	ldr	r3, [pc, #124]	@ (8002200 <NLLS+0x9a8>)
 8002182:	443b      	add	r3, r7
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800218c:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8002190:	4413      	add	r3, r2
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4619      	mov	r1, r3
 8002196:	4b21      	ldr	r3, [pc, #132]	@ (800221c <NLLS+0x9c4>)
 8002198:	443b      	add	r3, r7
 800219a:	6818      	ldr	r0, [r3, #0]
 800219c:	f7fe fd98 	bl	8000cd0 <__aeabi_fsub>
 80021a0:	4603      	mov	r3, r0
 80021a2:	4619      	mov	r1, r3
 80021a4:	4630      	mov	r0, r6
 80021a6:	f7fe fe9d 	bl	8000ee4 <__aeabi_fmul>
 80021aa:	4603      	mov	r3, r0
 80021ac:	4619      	mov	r1, r3
 80021ae:	4628      	mov	r0, r5
 80021b0:	f7fe fd8e 	bl	8000cd0 <__aeabi_fsub>
 80021b4:	4603      	mov	r3, r0
 80021b6:	461d      	mov	r5, r3
 80021b8:	4b11      	ldr	r3, [pc, #68]	@ (8002200 <NLLS+0x9a8>)
 80021ba:	443b      	add	r3, r7
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80021c4:	f852 2c38 	ldr.w	r2, [r2, #-56]
 80021c8:	4413      	add	r3, r2
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4619      	mov	r1, r3
 80021ce:	4b0f      	ldr	r3, [pc, #60]	@ (800220c <NLLS+0x9b4>)
 80021d0:	443b      	add	r3, r7
 80021d2:	6818      	ldr	r0, [r3, #0]
 80021d4:	f7fe fd7c 	bl	8000cd0 <__aeabi_fsub>
 80021d8:	4603      	mov	r3, r0
 80021da:	4a0d      	ldr	r2, [pc, #52]	@ (8002210 <NLLS+0x9b8>)
 80021dc:	443a      	add	r2, r7
 80021de:	6811      	ldr	r1, [r2, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7fe fe7f 	bl	8000ee4 <__aeabi_fmul>
 80021e6:	4603      	mov	r3, r0
 80021e8:	461e      	mov	r6, r3
 80021ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002214 <NLLS+0x9bc>)
 80021ec:	443b      	add	r3, r7
 80021ee:	6819      	ldr	r1, [r3, #0]
 80021f0:	e018      	b.n	8002224 <NLLS+0x9cc>
 80021f2:	bf00      	nop
 80021f4:	00016fcc 	.word	0x00016fcc
 80021f8:	00016fc4 	.word	0x00016fc4
 80021fc:	00014040 	.word	0x00014040
 8002200:	00017008 	.word	0x00017008
 8002204:	00016040 	.word	0x00016040
 8002208:	00015040 	.word	0x00015040
 800220c:	00017028 	.word	0x00017028
 8002210:	00017038 	.word	0x00017038
 8002214:	00016fd4 	.word	0x00016fd4
 8002218:	00017034 	.word	0x00017034
 800221c:	0001702c 	.word	0x0001702c
 8002220:	00016fc8 	.word	0x00016fc8
 8002224:	4b98      	ldr	r3, [pc, #608]	@ (8002488 <NLLS+0xc30>)
 8002226:	443b      	add	r3, r7
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	f7fe fe5b 	bl	8000ee4 <__aeabi_fmul>
 800222e:	4603      	mov	r3, r0
 8002230:	4698      	mov	r8, r3
 8002232:	4b96      	ldr	r3, [pc, #600]	@ (800248c <NLLS+0xc34>)
 8002234:	443b      	add	r3, r7
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800223e:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8002242:	4413      	add	r3, r2
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4619      	mov	r1, r3
 8002248:	4b91      	ldr	r3, [pc, #580]	@ (8002490 <NLLS+0xc38>)
 800224a:	443b      	add	r3, r7
 800224c:	6818      	ldr	r0, [r3, #0]
 800224e:	f7fe fd3f 	bl	8000cd0 <__aeabi_fsub>
 8002252:	4603      	mov	r3, r0
 8002254:	4619      	mov	r1, r3
 8002256:	4640      	mov	r0, r8
 8002258:	f7fe fe44 	bl	8000ee4 <__aeabi_fmul>
 800225c:	4603      	mov	r3, r0
 800225e:	4619      	mov	r1, r3
 8002260:	4630      	mov	r0, r6
 8002262:	f7fe fd35 	bl	8000cd0 <__aeabi_fsub>
 8002266:	4603      	mov	r3, r0
 8002268:	4619      	mov	r1, r3
 800226a:	4628      	mov	r0, r5
 800226c:	f7fe fe3a 	bl	8000ee4 <__aeabi_fmul>
 8002270:	4603      	mov	r3, r0
 8002272:	4619      	mov	r1, r3
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe fd2d 	bl	8000cd4 <__addsf3>
 800227a:	4603      	mov	r3, r0
 800227c:	461d      	mov	r5, r3
 800227e:	4b85      	ldr	r3, [pc, #532]	@ (8002494 <NLLS+0xc3c>)
 8002280:	443b      	add	r3, r7
 8002282:	6819      	ldr	r1, [r3, #0]
 8002284:	4b83      	ldr	r3, [pc, #524]	@ (8002494 <NLLS+0xc3c>)
 8002286:	443b      	add	r3, r7
 8002288:	6818      	ldr	r0, [r3, #0]
 800228a:	f7fe fe2b 	bl	8000ee4 <__aeabi_fmul>
 800228e:	4603      	mov	r3, r0
 8002290:	4a80      	ldr	r2, [pc, #512]	@ (8002494 <NLLS+0xc3c>)
 8002292:	443a      	add	r2, r7
 8002294:	6811      	ldr	r1, [r2, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe fe24 	bl	8000ee4 <__aeabi_fmul>
 800229c:	4603      	mov	r3, r0
 800229e:	4a7a      	ldr	r2, [pc, #488]	@ (8002488 <NLLS+0xc30>)
 80022a0:	443a      	add	r2, r7
 80022a2:	6811      	ldr	r1, [r2, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7fe fe1d 	bl	8000ee4 <__aeabi_fmul>
 80022aa:	4603      	mov	r3, r0
 80022ac:	4a76      	ldr	r2, [pc, #472]	@ (8002488 <NLLS+0xc30>)
 80022ae:	443a      	add	r2, r7
 80022b0:	6811      	ldr	r1, [r2, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe fe16 	bl	8000ee4 <__aeabi_fmul>
 80022b8:	4603      	mov	r3, r0
 80022ba:	4a77      	ldr	r2, [pc, #476]	@ (8002498 <NLLS+0xc40>)
 80022bc:	443a      	add	r2, r7
 80022be:	6811      	ldr	r1, [r2, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7fe fe0f 	bl	8000ee4 <__aeabi_fmul>
 80022c6:	4603      	mov	r3, r0
 80022c8:	4a73      	ldr	r2, [pc, #460]	@ (8002498 <NLLS+0xc40>)
 80022ca:	443a      	add	r2, r7
 80022cc:	6811      	ldr	r1, [r2, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe fe08 	bl	8000ee4 <__aeabi_fmul>
 80022d4:	4603      	mov	r3, r0
 80022d6:	4619      	mov	r1, r3
 80022d8:	4628      	mov	r0, r5
 80022da:	f7fe feb7 	bl	800104c <__aeabi_fdiv>
 80022de:	4603      	mov	r3, r0
 80022e0:	4619      	mov	r1, r3
 80022e2:	4620      	mov	r0, r4
 80022e4:	f7fe fcf4 	bl	8000cd0 <__aeabi_fsub>
 80022e8:	4603      	mov	r3, r0
 80022ea:	461c      	mov	r4, r3
 80022ec:	4b67      	ldr	r3, [pc, #412]	@ (800248c <NLLS+0xc34>)
 80022ee:	443b      	add	r3, r7
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80022f8:	f852 2c34 	ldr.w	r2, [r2, #-52]
 80022fc:	4413      	add	r3, r2
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4619      	mov	r1, r3
 8002302:	4b63      	ldr	r3, [pc, #396]	@ (8002490 <NLLS+0xc38>)
 8002304:	443b      	add	r3, r7
 8002306:	6818      	ldr	r0, [r3, #0]
 8002308:	f7fe fce2 	bl	8000cd0 <__aeabi_fsub>
 800230c:	4603      	mov	r3, r0
 800230e:	461d      	mov	r5, r3
 8002310:	4b5e      	ldr	r3, [pc, #376]	@ (800248c <NLLS+0xc34>)
 8002312:	443b      	add	r3, r7
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800231c:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8002320:	4413      	add	r3, r2
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4619      	mov	r1, r3
 8002326:	4b5a      	ldr	r3, [pc, #360]	@ (8002490 <NLLS+0xc38>)
 8002328:	443b      	add	r3, r7
 800232a:	6818      	ldr	r0, [r3, #0]
 800232c:	f7fe fcd0 	bl	8000cd0 <__aeabi_fsub>
 8002330:	4603      	mov	r3, r0
 8002332:	4619      	mov	r1, r3
 8002334:	4628      	mov	r0, r5
 8002336:	f7fe fdd5 	bl	8000ee4 <__aeabi_fmul>
 800233a:	4603      	mov	r3, r0
 800233c:	4619      	mov	r1, r3
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe fcc8 	bl	8000cd4 <__addsf3>
 8002344:	4603      	mov	r3, r0
 8002346:	461d      	mov	r5, r3
 8002348:	4b52      	ldr	r3, [pc, #328]	@ (8002494 <NLLS+0xc3c>)
 800234a:	443b      	add	r3, r7
 800234c:	6819      	ldr	r1, [r3, #0]
 800234e:	4b51      	ldr	r3, [pc, #324]	@ (8002494 <NLLS+0xc3c>)
 8002350:	443b      	add	r3, r7
 8002352:	6818      	ldr	r0, [r3, #0]
 8002354:	f7fe fdc6 	bl	8000ee4 <__aeabi_fmul>
 8002358:	4603      	mov	r3, r0
 800235a:	4a4e      	ldr	r2, [pc, #312]	@ (8002494 <NLLS+0xc3c>)
 800235c:	443a      	add	r2, r7
 800235e:	6811      	ldr	r1, [r2, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f7fe fdbf 	bl	8000ee4 <__aeabi_fmul>
 8002366:	4603      	mov	r3, r0
 8002368:	4619      	mov	r1, r3
 800236a:	4628      	mov	r0, r5
 800236c:	f7fe fe6e 	bl	800104c <__aeabi_fdiv>
 8002370:	4603      	mov	r3, r0
 8002372:	4619      	mov	r1, r3
 8002374:	4620      	mov	r0, r4
 8002376:	f7fe fcab 	bl	8000cd0 <__aeabi_fsub>
 800237a:	4603      	mov	r3, r0
 800237c:	461c      	mov	r4, r3
 800237e:	4b47      	ldr	r3, [pc, #284]	@ (800249c <NLLS+0xc44>)
 8002380:	443b      	add	r3, r7
 8002382:	6819      	ldr	r1, [r3, #0]
 8002384:	4b40      	ldr	r3, [pc, #256]	@ (8002488 <NLLS+0xc30>)
 8002386:	443b      	add	r3, r7
 8002388:	6818      	ldr	r0, [r3, #0]
 800238a:	f7fe fdab 	bl	8000ee4 <__aeabi_fmul>
 800238e:	4603      	mov	r3, r0
 8002390:	461d      	mov	r5, r3
 8002392:	4b43      	ldr	r3, [pc, #268]	@ (80024a0 <NLLS+0xc48>)
 8002394:	443b      	add	r3, r7
 8002396:	6819      	ldr	r1, [r3, #0]
 8002398:	4b42      	ldr	r3, [pc, #264]	@ (80024a4 <NLLS+0xc4c>)
 800239a:	443b      	add	r3, r7
 800239c:	6818      	ldr	r0, [r3, #0]
 800239e:	f7fe fda1 	bl	8000ee4 <__aeabi_fmul>
 80023a2:	4603      	mov	r3, r0
 80023a4:	461e      	mov	r6, r3
 80023a6:	4b3c      	ldr	r3, [pc, #240]	@ (8002498 <NLLS+0xc40>)
 80023a8:	443b      	add	r3, r7
 80023aa:	6819      	ldr	r1, [r3, #0]
 80023ac:	4b3e      	ldr	r3, [pc, #248]	@ (80024a8 <NLLS+0xc50>)
 80023ae:	443b      	add	r3, r7
 80023b0:	6818      	ldr	r0, [r3, #0]
 80023b2:	f7fe fd97 	bl	8000ee4 <__aeabi_fmul>
 80023b6:	4603      	mov	r3, r0
 80023b8:	4a3c      	ldr	r2, [pc, #240]	@ (80024ac <NLLS+0xc54>)
 80023ba:	443a      	add	r2, r7
 80023bc:	6811      	ldr	r1, [r2, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe fd90 	bl	8000ee4 <__aeabi_fmul>
 80023c4:	4603      	mov	r3, r0
 80023c6:	4619      	mov	r1, r3
 80023c8:	4630      	mov	r0, r6
 80023ca:	f7fe fc81 	bl	8000cd0 <__aeabi_fsub>
 80023ce:	4603      	mov	r3, r0
 80023d0:	4619      	mov	r1, r3
 80023d2:	4628      	mov	r0, r5
 80023d4:	f7fe fd86 	bl	8000ee4 <__aeabi_fmul>
 80023d8:	4603      	mov	r3, r0
 80023da:	461d      	mov	r5, r3
 80023dc:	4b2b      	ldr	r3, [pc, #172]	@ (800248c <NLLS+0xc34>)
 80023de:	443b      	add	r3, r7
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80023e8:	f852 2c34 	ldr.w	r2, [r2, #-52]
 80023ec:	4413      	add	r3, r2
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4619      	mov	r1, r3
 80023f2:	4b27      	ldr	r3, [pc, #156]	@ (8002490 <NLLS+0xc38>)
 80023f4:	443b      	add	r3, r7
 80023f6:	6818      	ldr	r0, [r3, #0]
 80023f8:	f7fe fc6a 	bl	8000cd0 <__aeabi_fsub>
 80023fc:	4603      	mov	r3, r0
 80023fe:	4619      	mov	r1, r3
 8002400:	4628      	mov	r0, r5
 8002402:	f7fe fd6f 	bl	8000ee4 <__aeabi_fmul>
 8002406:	4603      	mov	r3, r0
 8002408:	461d      	mov	r5, r3
 800240a:	4b1f      	ldr	r3, [pc, #124]	@ (8002488 <NLLS+0xc30>)
 800240c:	443b      	add	r3, r7
 800240e:	6819      	ldr	r1, [r3, #0]
 8002410:	4b20      	ldr	r3, [pc, #128]	@ (8002494 <NLLS+0xc3c>)
 8002412:	443b      	add	r3, r7
 8002414:	6818      	ldr	r0, [r3, #0]
 8002416:	f7fe fd65 	bl	8000ee4 <__aeabi_fmul>
 800241a:	4603      	mov	r3, r0
 800241c:	4a1e      	ldr	r2, [pc, #120]	@ (8002498 <NLLS+0xc40>)
 800241e:	443a      	add	r2, r7
 8002420:	6811      	ldr	r1, [r2, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe fd5e 	bl	8000ee4 <__aeabi_fmul>
 8002428:	4603      	mov	r3, r0
 800242a:	461e      	mov	r6, r3
 800242c:	4b17      	ldr	r3, [pc, #92]	@ (800248c <NLLS+0xc34>)
 800242e:	443b      	add	r3, r7
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002438:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 800243c:	4413      	add	r3, r2
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4619      	mov	r1, r3
 8002442:	4b1b      	ldr	r3, [pc, #108]	@ (80024b0 <NLLS+0xc58>)
 8002444:	443b      	add	r3, r7
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	f7fe fc42 	bl	8000cd0 <__aeabi_fsub>
 800244c:	4603      	mov	r3, r0
 800244e:	4619      	mov	r1, r3
 8002450:	4630      	mov	r0, r6
 8002452:	f7fe fd47 	bl	8000ee4 <__aeabi_fmul>
 8002456:	4603      	mov	r3, r0
 8002458:	4619      	mov	r1, r3
 800245a:	4628      	mov	r0, r5
 800245c:	f7fe fc3a 	bl	8000cd4 <__addsf3>
 8002460:	4603      	mov	r3, r0
 8002462:	461d      	mov	r5, r3
 8002464:	4b0d      	ldr	r3, [pc, #52]	@ (800249c <NLLS+0xc44>)
 8002466:	443b      	add	r3, r7
 8002468:	6819      	ldr	r1, [r3, #0]
 800246a:	4b0a      	ldr	r3, [pc, #40]	@ (8002494 <NLLS+0xc3c>)
 800246c:	443b      	add	r3, r7
 800246e:	6818      	ldr	r0, [r3, #0]
 8002470:	f7fe fd38 	bl	8000ee4 <__aeabi_fmul>
 8002474:	4603      	mov	r3, r0
 8002476:	4a0b      	ldr	r2, [pc, #44]	@ (80024a4 <NLLS+0xc4c>)
 8002478:	443a      	add	r2, r7
 800247a:	6811      	ldr	r1, [r2, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f7fe fd31 	bl	8000ee4 <__aeabi_fmul>
 8002482:	4603      	mov	r3, r0
 8002484:	461e      	mov	r6, r3
 8002486:	e015      	b.n	80024b4 <NLLS+0xc5c>
 8002488:	00017034 	.word	0x00017034
 800248c:	00017008 	.word	0x00017008
 8002490:	0001702c 	.word	0x0001702c
 8002494:	00017038 	.word	0x00017038
 8002498:	00016fc8 	.word	0x00016fc8
 800249c:	00017030 	.word	0x00017030
 80024a0:	00016fd4 	.word	0x00016fd4
 80024a4:	00016fd0 	.word	0x00016fd0
 80024a8:	00016fc4 	.word	0x00016fc4
 80024ac:	00016fd8 	.word	0x00016fd8
 80024b0:	00017024 	.word	0x00017024
 80024b4:	4b97      	ldr	r3, [pc, #604]	@ (8002714 <NLLS+0xebc>)
 80024b6:	443b      	add	r3, r7
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80024c0:	f852 2c38 	ldr.w	r2, [r2, #-56]
 80024c4:	4413      	add	r3, r2
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4619      	mov	r1, r3
 80024ca:	4b93      	ldr	r3, [pc, #588]	@ (8002718 <NLLS+0xec0>)
 80024cc:	443b      	add	r3, r7
 80024ce:	6818      	ldr	r0, [r3, #0]
 80024d0:	f7fe fbfe 	bl	8000cd0 <__aeabi_fsub>
 80024d4:	4603      	mov	r3, r0
 80024d6:	4619      	mov	r1, r3
 80024d8:	4630      	mov	r0, r6
 80024da:	f7fe fd03 	bl	8000ee4 <__aeabi_fmul>
 80024de:	4603      	mov	r3, r0
 80024e0:	4619      	mov	r1, r3
 80024e2:	4628      	mov	r0, r5
 80024e4:	f7fe fbf4 	bl	8000cd0 <__aeabi_fsub>
 80024e8:	4603      	mov	r3, r0
 80024ea:	461d      	mov	r5, r3
 80024ec:	4b8b      	ldr	r3, [pc, #556]	@ (800271c <NLLS+0xec4>)
 80024ee:	443b      	add	r3, r7
 80024f0:	6819      	ldr	r1, [r3, #0]
 80024f2:	4b8b      	ldr	r3, [pc, #556]	@ (8002720 <NLLS+0xec8>)
 80024f4:	443b      	add	r3, r7
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	f7fe fcf4 	bl	8000ee4 <__aeabi_fmul>
 80024fc:	4603      	mov	r3, r0
 80024fe:	461e      	mov	r6, r3
 8002500:	4b88      	ldr	r3, [pc, #544]	@ (8002724 <NLLS+0xecc>)
 8002502:	443b      	add	r3, r7
 8002504:	6819      	ldr	r1, [r3, #0]
 8002506:	4b88      	ldr	r3, [pc, #544]	@ (8002728 <NLLS+0xed0>)
 8002508:	443b      	add	r3, r7
 800250a:	6818      	ldr	r0, [r3, #0]
 800250c:	f7fe fcea 	bl	8000ee4 <__aeabi_fmul>
 8002510:	4603      	mov	r3, r0
 8002512:	4698      	mov	r8, r3
 8002514:	4b85      	ldr	r3, [pc, #532]	@ (800272c <NLLS+0xed4>)
 8002516:	443b      	add	r3, r7
 8002518:	6819      	ldr	r1, [r3, #0]
 800251a:	4b85      	ldr	r3, [pc, #532]	@ (8002730 <NLLS+0xed8>)
 800251c:	443b      	add	r3, r7
 800251e:	6818      	ldr	r0, [r3, #0]
 8002520:	f7fe fce0 	bl	8000ee4 <__aeabi_fmul>
 8002524:	4603      	mov	r3, r0
 8002526:	4a83      	ldr	r2, [pc, #524]	@ (8002734 <NLLS+0xedc>)
 8002528:	443a      	add	r2, r7
 800252a:	6811      	ldr	r1, [r2, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7fe fcd9 	bl	8000ee4 <__aeabi_fmul>
 8002532:	4603      	mov	r3, r0
 8002534:	4619      	mov	r1, r3
 8002536:	4640      	mov	r0, r8
 8002538:	f7fe fbca 	bl	8000cd0 <__aeabi_fsub>
 800253c:	4603      	mov	r3, r0
 800253e:	4619      	mov	r1, r3
 8002540:	4630      	mov	r0, r6
 8002542:	f7fe fccf 	bl	8000ee4 <__aeabi_fmul>
 8002546:	4603      	mov	r3, r0
 8002548:	461e      	mov	r6, r3
 800254a:	4b72      	ldr	r3, [pc, #456]	@ (8002714 <NLLS+0xebc>)
 800254c:	443b      	add	r3, r7
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002556:	f852 2c34 	ldr.w	r2, [r2, #-52]
 800255a:	4413      	add	r3, r2
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4619      	mov	r1, r3
 8002560:	4b75      	ldr	r3, [pc, #468]	@ (8002738 <NLLS+0xee0>)
 8002562:	443b      	add	r3, r7
 8002564:	6818      	ldr	r0, [r3, #0]
 8002566:	f7fe fbb3 	bl	8000cd0 <__aeabi_fsub>
 800256a:	4603      	mov	r3, r0
 800256c:	4619      	mov	r1, r3
 800256e:	4630      	mov	r0, r6
 8002570:	f7fe fcb8 	bl	8000ee4 <__aeabi_fmul>
 8002574:	4603      	mov	r3, r0
 8002576:	461e      	mov	r6, r3
 8002578:	4b69      	ldr	r3, [pc, #420]	@ (8002720 <NLLS+0xec8>)
 800257a:	443b      	add	r3, r7
 800257c:	6819      	ldr	r1, [r3, #0]
 800257e:	4b6f      	ldr	r3, [pc, #444]	@ (800273c <NLLS+0xee4>)
 8002580:	443b      	add	r3, r7
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	f7fe fcae 	bl	8000ee4 <__aeabi_fmul>
 8002588:	4603      	mov	r3, r0
 800258a:	4a68      	ldr	r2, [pc, #416]	@ (800272c <NLLS+0xed4>)
 800258c:	443a      	add	r2, r7
 800258e:	6811      	ldr	r1, [r2, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f7fe fca7 	bl	8000ee4 <__aeabi_fmul>
 8002596:	4603      	mov	r3, r0
 8002598:	4698      	mov	r8, r3
 800259a:	4b5e      	ldr	r3, [pc, #376]	@ (8002714 <NLLS+0xebc>)
 800259c:	443b      	add	r3, r7
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80025a6:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 80025aa:	4413      	add	r3, r2
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4619      	mov	r1, r3
 80025b0:	4b63      	ldr	r3, [pc, #396]	@ (8002740 <NLLS+0xee8>)
 80025b2:	443b      	add	r3, r7
 80025b4:	6818      	ldr	r0, [r3, #0]
 80025b6:	f7fe fb8b 	bl	8000cd0 <__aeabi_fsub>
 80025ba:	4603      	mov	r3, r0
 80025bc:	4619      	mov	r1, r3
 80025be:	4640      	mov	r0, r8
 80025c0:	f7fe fc90 	bl	8000ee4 <__aeabi_fmul>
 80025c4:	4603      	mov	r3, r0
 80025c6:	4619      	mov	r1, r3
 80025c8:	4630      	mov	r0, r6
 80025ca:	f7fe fb83 	bl	8000cd4 <__addsf3>
 80025ce:	4603      	mov	r3, r0
 80025d0:	461e      	mov	r6, r3
 80025d2:	4b52      	ldr	r3, [pc, #328]	@ (800271c <NLLS+0xec4>)
 80025d4:	443b      	add	r3, r7
 80025d6:	6819      	ldr	r1, [r3, #0]
 80025d8:	4b58      	ldr	r3, [pc, #352]	@ (800273c <NLLS+0xee4>)
 80025da:	443b      	add	r3, r7
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	f7fe fc81 	bl	8000ee4 <__aeabi_fmul>
 80025e2:	4603      	mov	r3, r0
 80025e4:	4a50      	ldr	r2, [pc, #320]	@ (8002728 <NLLS+0xed0>)
 80025e6:	443a      	add	r2, r7
 80025e8:	6811      	ldr	r1, [r2, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fe fc7a 	bl	8000ee4 <__aeabi_fmul>
 80025f0:	4603      	mov	r3, r0
 80025f2:	4698      	mov	r8, r3
 80025f4:	4b47      	ldr	r3, [pc, #284]	@ (8002714 <NLLS+0xebc>)
 80025f6:	443b      	add	r3, r7
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002600:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8002604:	4413      	add	r3, r2
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4619      	mov	r1, r3
 800260a:	4b43      	ldr	r3, [pc, #268]	@ (8002718 <NLLS+0xec0>)
 800260c:	443b      	add	r3, r7
 800260e:	6818      	ldr	r0, [r3, #0]
 8002610:	f7fe fb5e 	bl	8000cd0 <__aeabi_fsub>
 8002614:	4603      	mov	r3, r0
 8002616:	4619      	mov	r1, r3
 8002618:	4640      	mov	r0, r8
 800261a:	f7fe fc63 	bl	8000ee4 <__aeabi_fmul>
 800261e:	4603      	mov	r3, r0
 8002620:	4619      	mov	r1, r3
 8002622:	4630      	mov	r0, r6
 8002624:	f7fe fb54 	bl	8000cd0 <__aeabi_fsub>
 8002628:	4603      	mov	r3, r0
 800262a:	4619      	mov	r1, r3
 800262c:	4628      	mov	r0, r5
 800262e:	f7fe fc59 	bl	8000ee4 <__aeabi_fmul>
 8002632:	4603      	mov	r3, r0
 8002634:	4619      	mov	r1, r3
 8002636:	4618      	mov	r0, r3
 8002638:	f7fe fb4c 	bl	8000cd4 <__addsf3>
 800263c:	4603      	mov	r3, r0
 800263e:	461d      	mov	r5, r3
 8002640:	4b3e      	ldr	r3, [pc, #248]	@ (800273c <NLLS+0xee4>)
 8002642:	443b      	add	r3, r7
 8002644:	6819      	ldr	r1, [r3, #0]
 8002646:	4b3d      	ldr	r3, [pc, #244]	@ (800273c <NLLS+0xee4>)
 8002648:	443b      	add	r3, r7
 800264a:	6818      	ldr	r0, [r3, #0]
 800264c:	f7fe fc4a 	bl	8000ee4 <__aeabi_fmul>
 8002650:	4603      	mov	r3, r0
 8002652:	4a3a      	ldr	r2, [pc, #232]	@ (800273c <NLLS+0xee4>)
 8002654:	443a      	add	r2, r7
 8002656:	6811      	ldr	r1, [r2, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f7fe fc43 	bl	8000ee4 <__aeabi_fmul>
 800265e:	4603      	mov	r3, r0
 8002660:	4a2f      	ldr	r2, [pc, #188]	@ (8002720 <NLLS+0xec8>)
 8002662:	443a      	add	r2, r7
 8002664:	6811      	ldr	r1, [r2, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f7fe fc3c 	bl	8000ee4 <__aeabi_fmul>
 800266c:	4603      	mov	r3, r0
 800266e:	4a2c      	ldr	r2, [pc, #176]	@ (8002720 <NLLS+0xec8>)
 8002670:	443a      	add	r2, r7
 8002672:	6811      	ldr	r1, [r2, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f7fe fc35 	bl	8000ee4 <__aeabi_fmul>
 800267a:	4603      	mov	r3, r0
 800267c:	4a27      	ldr	r2, [pc, #156]	@ (800271c <NLLS+0xec4>)
 800267e:	443a      	add	r2, r7
 8002680:	6811      	ldr	r1, [r2, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe fc2e 	bl	8000ee4 <__aeabi_fmul>
 8002688:	4603      	mov	r3, r0
 800268a:	4a24      	ldr	r2, [pc, #144]	@ (800271c <NLLS+0xec4>)
 800268c:	443a      	add	r2, r7
 800268e:	6811      	ldr	r1, [r2, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f7fe fc27 	bl	8000ee4 <__aeabi_fmul>
 8002696:	4603      	mov	r3, r0
 8002698:	4a25      	ldr	r2, [pc, #148]	@ (8002730 <NLLS+0xed8>)
 800269a:	443a      	add	r2, r7
 800269c:	6811      	ldr	r1, [r2, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fe fc20 	bl	8000ee4 <__aeabi_fmul>
 80026a4:	4603      	mov	r3, r0
 80026a6:	4a22      	ldr	r2, [pc, #136]	@ (8002730 <NLLS+0xed8>)
 80026a8:	443a      	add	r2, r7
 80026aa:	6811      	ldr	r1, [r2, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe fc19 	bl	8000ee4 <__aeabi_fmul>
 80026b2:	4603      	mov	r3, r0
 80026b4:	4a23      	ldr	r2, [pc, #140]	@ (8002744 <NLLS+0xeec>)
 80026b6:	443a      	add	r2, r7
 80026b8:	6811      	ldr	r1, [r2, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fe fc12 	bl	8000ee4 <__aeabi_fmul>
 80026c0:	4603      	mov	r3, r0
 80026c2:	4a20      	ldr	r2, [pc, #128]	@ (8002744 <NLLS+0xeec>)
 80026c4:	443a      	add	r2, r7
 80026c6:	6811      	ldr	r1, [r2, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fe fc0b 	bl	8000ee4 <__aeabi_fmul>
 80026ce:	4603      	mov	r3, r0
 80026d0:	4a16      	ldr	r2, [pc, #88]	@ (800272c <NLLS+0xed4>)
 80026d2:	443a      	add	r2, r7
 80026d4:	6811      	ldr	r1, [r2, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe fc04 	bl	8000ee4 <__aeabi_fmul>
 80026dc:	4603      	mov	r3, r0
 80026de:	4a13      	ldr	r2, [pc, #76]	@ (800272c <NLLS+0xed4>)
 80026e0:	443a      	add	r2, r7
 80026e2:	6811      	ldr	r1, [r2, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fe fbfd 	bl	8000ee4 <__aeabi_fmul>
 80026ea:	4603      	mov	r3, r0
 80026ec:	4619      	mov	r1, r3
 80026ee:	4628      	mov	r0, r5
 80026f0:	f7fe fcac 	bl	800104c <__aeabi_fdiv>
 80026f4:	4603      	mov	r3, r0
 80026f6:	4619      	mov	r1, r3
 80026f8:	4620      	mov	r0, r4
 80026fa:	f7fe fae9 	bl	8000cd0 <__aeabi_fsub>
 80026fe:	4603      	mov	r3, r0
 8002700:	461c      	mov	r4, r3
 8002702:	4b0a      	ldr	r3, [pc, #40]	@ (800272c <NLLS+0xed4>)
 8002704:	443b      	add	r3, r7
 8002706:	6819      	ldr	r1, [r3, #0]
 8002708:	4b05      	ldr	r3, [pc, #20]	@ (8002720 <NLLS+0xec8>)
 800270a:	443b      	add	r3, r7
 800270c:	6818      	ldr	r0, [r3, #0]
 800270e:	f7fe fbe9 	bl	8000ee4 <__aeabi_fmul>
 8002712:	e019      	b.n	8002748 <NLLS+0xef0>
 8002714:	00017008 	.word	0x00017008
 8002718:	00017028 	.word	0x00017028
 800271c:	00017030 	.word	0x00017030
 8002720:	00017034 	.word	0x00017034
 8002724:	00016fd4 	.word	0x00016fd4
 8002728:	00016fd0 	.word	0x00016fd0
 800272c:	00016fc8 	.word	0x00016fc8
 8002730:	00016fc4 	.word	0x00016fc4
 8002734:	00016fd8 	.word	0x00016fd8
 8002738:	0001702c 	.word	0x0001702c
 800273c:	00017038 	.word	0x00017038
 8002740:	00017024 	.word	0x00017024
 8002744:	00016fcc 	.word	0x00016fcc
 8002748:	4603      	mov	r3, r0
 800274a:	461d      	mov	r5, r3
 800274c:	4b97      	ldr	r3, [pc, #604]	@ (80029ac <NLLS+0x1154>)
 800274e:	443b      	add	r3, r7
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002758:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 800275c:	4413      	add	r3, r2
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4619      	mov	r1, r3
 8002762:	4b93      	ldr	r3, [pc, #588]	@ (80029b0 <NLLS+0x1158>)
 8002764:	443b      	add	r3, r7
 8002766:	6818      	ldr	r0, [r3, #0]
 8002768:	f7fe fab2 	bl	8000cd0 <__aeabi_fsub>
 800276c:	4603      	mov	r3, r0
 800276e:	4619      	mov	r1, r3
 8002770:	4628      	mov	r0, r5
 8002772:	f7fe fbb7 	bl	8000ee4 <__aeabi_fmul>
 8002776:	4603      	mov	r3, r0
 8002778:	461d      	mov	r5, r3
 800277a:	4b8e      	ldr	r3, [pc, #568]	@ (80029b4 <NLLS+0x115c>)
 800277c:	443b      	add	r3, r7
 800277e:	6819      	ldr	r1, [r3, #0]
 8002780:	4b8d      	ldr	r3, [pc, #564]	@ (80029b8 <NLLS+0x1160>)
 8002782:	443b      	add	r3, r7
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	f7fe fbad 	bl	8000ee4 <__aeabi_fmul>
 800278a:	4603      	mov	r3, r0
 800278c:	461e      	mov	r6, r3
 800278e:	4b87      	ldr	r3, [pc, #540]	@ (80029ac <NLLS+0x1154>)
 8002790:	443b      	add	r3, r7
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800279a:	f852 2c38 	ldr.w	r2, [r2, #-56]
 800279e:	4413      	add	r3, r2
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4619      	mov	r1, r3
 80027a4:	4b85      	ldr	r3, [pc, #532]	@ (80029bc <NLLS+0x1164>)
 80027a6:	443b      	add	r3, r7
 80027a8:	6818      	ldr	r0, [r3, #0]
 80027aa:	f7fe fa91 	bl	8000cd0 <__aeabi_fsub>
 80027ae:	4603      	mov	r3, r0
 80027b0:	4619      	mov	r1, r3
 80027b2:	4630      	mov	r0, r6
 80027b4:	f7fe fb96 	bl	8000ee4 <__aeabi_fmul>
 80027b8:	4603      	mov	r3, r0
 80027ba:	4619      	mov	r1, r3
 80027bc:	4628      	mov	r0, r5
 80027be:	f7fe fa87 	bl	8000cd0 <__aeabi_fsub>
 80027c2:	4603      	mov	r3, r0
 80027c4:	4619      	mov	r1, r3
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fe fa84 	bl	8000cd4 <__addsf3>
 80027cc:	4603      	mov	r3, r0
 80027ce:	461d      	mov	r5, r3
 80027d0:	4b79      	ldr	r3, [pc, #484]	@ (80029b8 <NLLS+0x1160>)
 80027d2:	443b      	add	r3, r7
 80027d4:	6819      	ldr	r1, [r3, #0]
 80027d6:	4b7a      	ldr	r3, [pc, #488]	@ (80029c0 <NLLS+0x1168>)
 80027d8:	443b      	add	r3, r7
 80027da:	6818      	ldr	r0, [r3, #0]
 80027dc:	f7fe fb82 	bl	8000ee4 <__aeabi_fmul>
 80027e0:	4603      	mov	r3, r0
 80027e2:	461e      	mov	r6, r3
 80027e4:	4b77      	ldr	r3, [pc, #476]	@ (80029c4 <NLLS+0x116c>)
 80027e6:	443b      	add	r3, r7
 80027e8:	6819      	ldr	r1, [r3, #0]
 80027ea:	4b72      	ldr	r3, [pc, #456]	@ (80029b4 <NLLS+0x115c>)
 80027ec:	443b      	add	r3, r7
 80027ee:	6818      	ldr	r0, [r3, #0]
 80027f0:	f7fe fb78 	bl	8000ee4 <__aeabi_fmul>
 80027f4:	4603      	mov	r3, r0
 80027f6:	4698      	mov	r8, r3
 80027f8:	4b73      	ldr	r3, [pc, #460]	@ (80029c8 <NLLS+0x1170>)
 80027fa:	443b      	add	r3, r7
 80027fc:	6819      	ldr	r1, [r3, #0]
 80027fe:	4b73      	ldr	r3, [pc, #460]	@ (80029cc <NLLS+0x1174>)
 8002800:	443b      	add	r3, r7
 8002802:	6818      	ldr	r0, [r3, #0]
 8002804:	f7fe fb6e 	bl	8000ee4 <__aeabi_fmul>
 8002808:	4603      	mov	r3, r0
 800280a:	4a71      	ldr	r2, [pc, #452]	@ (80029d0 <NLLS+0x1178>)
 800280c:	443a      	add	r2, r7
 800280e:	6811      	ldr	r1, [r2, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f7fe fb67 	bl	8000ee4 <__aeabi_fmul>
 8002816:	4603      	mov	r3, r0
 8002818:	4619      	mov	r1, r3
 800281a:	4640      	mov	r0, r8
 800281c:	f7fe fa58 	bl	8000cd0 <__aeabi_fsub>
 8002820:	4603      	mov	r3, r0
 8002822:	4619      	mov	r1, r3
 8002824:	4630      	mov	r0, r6
 8002826:	f7fe fb5d 	bl	8000ee4 <__aeabi_fmul>
 800282a:	4603      	mov	r3, r0
 800282c:	461e      	mov	r6, r3
 800282e:	4b5f      	ldr	r3, [pc, #380]	@ (80029ac <NLLS+0x1154>)
 8002830:	443b      	add	r3, r7
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800283a:	f852 2c34 	ldr.w	r2, [r2, #-52]
 800283e:	4413      	add	r3, r2
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4619      	mov	r1, r3
 8002844:	4b63      	ldr	r3, [pc, #396]	@ (80029d4 <NLLS+0x117c>)
 8002846:	443b      	add	r3, r7
 8002848:	6818      	ldr	r0, [r3, #0]
 800284a:	f7fe fa41 	bl	8000cd0 <__aeabi_fsub>
 800284e:	4603      	mov	r3, r0
 8002850:	4619      	mov	r1, r3
 8002852:	4630      	mov	r0, r6
 8002854:	f7fe fb46 	bl	8000ee4 <__aeabi_fmul>
 8002858:	4603      	mov	r3, r0
 800285a:	461e      	mov	r6, r3
 800285c:	4b58      	ldr	r3, [pc, #352]	@ (80029c0 <NLLS+0x1168>)
 800285e:	443b      	add	r3, r7
 8002860:	6819      	ldr	r1, [r3, #0]
 8002862:	4b5d      	ldr	r3, [pc, #372]	@ (80029d8 <NLLS+0x1180>)
 8002864:	443b      	add	r3, r7
 8002866:	6818      	ldr	r0, [r3, #0]
 8002868:	f7fe fb3c 	bl	8000ee4 <__aeabi_fmul>
 800286c:	4603      	mov	r3, r0
 800286e:	4a56      	ldr	r2, [pc, #344]	@ (80029c8 <NLLS+0x1170>)
 8002870:	443a      	add	r2, r7
 8002872:	6811      	ldr	r1, [r2, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f7fe fb35 	bl	8000ee4 <__aeabi_fmul>
 800287a:	4603      	mov	r3, r0
 800287c:	4698      	mov	r8, r3
 800287e:	4b4b      	ldr	r3, [pc, #300]	@ (80029ac <NLLS+0x1154>)
 8002880:	443b      	add	r3, r7
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800288a:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 800288e:	4413      	add	r3, r2
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4619      	mov	r1, r3
 8002894:	4b46      	ldr	r3, [pc, #280]	@ (80029b0 <NLLS+0x1158>)
 8002896:	443b      	add	r3, r7
 8002898:	6818      	ldr	r0, [r3, #0]
 800289a:	f7fe fa19 	bl	8000cd0 <__aeabi_fsub>
 800289e:	4603      	mov	r3, r0
 80028a0:	4619      	mov	r1, r3
 80028a2:	4640      	mov	r0, r8
 80028a4:	f7fe fb1e 	bl	8000ee4 <__aeabi_fmul>
 80028a8:	4603      	mov	r3, r0
 80028aa:	4619      	mov	r1, r3
 80028ac:	4630      	mov	r0, r6
 80028ae:	f7fe fa11 	bl	8000cd4 <__addsf3>
 80028b2:	4603      	mov	r3, r0
 80028b4:	461e      	mov	r6, r3
 80028b6:	4b40      	ldr	r3, [pc, #256]	@ (80029b8 <NLLS+0x1160>)
 80028b8:	443b      	add	r3, r7
 80028ba:	6819      	ldr	r1, [r3, #0]
 80028bc:	4b46      	ldr	r3, [pc, #280]	@ (80029d8 <NLLS+0x1180>)
 80028be:	443b      	add	r3, r7
 80028c0:	6818      	ldr	r0, [r3, #0]
 80028c2:	f7fe fb0f 	bl	8000ee4 <__aeabi_fmul>
 80028c6:	4603      	mov	r3, r0
 80028c8:	4a3a      	ldr	r2, [pc, #232]	@ (80029b4 <NLLS+0x115c>)
 80028ca:	443a      	add	r2, r7
 80028cc:	6811      	ldr	r1, [r2, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fe fb08 	bl	8000ee4 <__aeabi_fmul>
 80028d4:	4603      	mov	r3, r0
 80028d6:	4698      	mov	r8, r3
 80028d8:	4b34      	ldr	r3, [pc, #208]	@ (80029ac <NLLS+0x1154>)
 80028da:	443b      	add	r3, r7
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80028e4:	f852 2c38 	ldr.w	r2, [r2, #-56]
 80028e8:	4413      	add	r3, r2
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4619      	mov	r1, r3
 80028ee:	4b33      	ldr	r3, [pc, #204]	@ (80029bc <NLLS+0x1164>)
 80028f0:	443b      	add	r3, r7
 80028f2:	6818      	ldr	r0, [r3, #0]
 80028f4:	f7fe f9ec 	bl	8000cd0 <__aeabi_fsub>
 80028f8:	4603      	mov	r3, r0
 80028fa:	4619      	mov	r1, r3
 80028fc:	4640      	mov	r0, r8
 80028fe:	f7fe faf1 	bl	8000ee4 <__aeabi_fmul>
 8002902:	4603      	mov	r3, r0
 8002904:	4619      	mov	r1, r3
 8002906:	4630      	mov	r0, r6
 8002908:	f7fe f9e2 	bl	8000cd0 <__aeabi_fsub>
 800290c:	4603      	mov	r3, r0
 800290e:	4619      	mov	r1, r3
 8002910:	4628      	mov	r0, r5
 8002912:	f7fe fae7 	bl	8000ee4 <__aeabi_fmul>
 8002916:	4603      	mov	r3, r0
 8002918:	461d      	mov	r5, r3
 800291a:	4b2f      	ldr	r3, [pc, #188]	@ (80029d8 <NLLS+0x1180>)
 800291c:	443b      	add	r3, r7
 800291e:	6819      	ldr	r1, [r3, #0]
 8002920:	4b2d      	ldr	r3, [pc, #180]	@ (80029d8 <NLLS+0x1180>)
 8002922:	443b      	add	r3, r7
 8002924:	6818      	ldr	r0, [r3, #0]
 8002926:	f7fe fadd 	bl	8000ee4 <__aeabi_fmul>
 800292a:	4603      	mov	r3, r0
 800292c:	4a24      	ldr	r2, [pc, #144]	@ (80029c0 <NLLS+0x1168>)
 800292e:	443a      	add	r2, r7
 8002930:	6811      	ldr	r1, [r2, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7fe fad6 	bl	8000ee4 <__aeabi_fmul>
 8002938:	4603      	mov	r3, r0
 800293a:	4a21      	ldr	r2, [pc, #132]	@ (80029c0 <NLLS+0x1168>)
 800293c:	443a      	add	r2, r7
 800293e:	6811      	ldr	r1, [r2, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f7fe facf 	bl	8000ee4 <__aeabi_fmul>
 8002946:	4603      	mov	r3, r0
 8002948:	4a1b      	ldr	r2, [pc, #108]	@ (80029b8 <NLLS+0x1160>)
 800294a:	443a      	add	r2, r7
 800294c:	6811      	ldr	r1, [r2, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7fe fac8 	bl	8000ee4 <__aeabi_fmul>
 8002954:	4603      	mov	r3, r0
 8002956:	4a18      	ldr	r2, [pc, #96]	@ (80029b8 <NLLS+0x1160>)
 8002958:	443a      	add	r2, r7
 800295a:	6811      	ldr	r1, [r2, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f7fe fac1 	bl	8000ee4 <__aeabi_fmul>
 8002962:	4603      	mov	r3, r0
 8002964:	4a19      	ldr	r2, [pc, #100]	@ (80029cc <NLLS+0x1174>)
 8002966:	443a      	add	r2, r7
 8002968:	6811      	ldr	r1, [r2, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7fe faba 	bl	8000ee4 <__aeabi_fmul>
 8002970:	4603      	mov	r3, r0
 8002972:	4a16      	ldr	r2, [pc, #88]	@ (80029cc <NLLS+0x1174>)
 8002974:	443a      	add	r2, r7
 8002976:	6811      	ldr	r1, [r2, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f7fe fab3 	bl	8000ee4 <__aeabi_fmul>
 800297e:	4603      	mov	r3, r0
 8002980:	4a16      	ldr	r2, [pc, #88]	@ (80029dc <NLLS+0x1184>)
 8002982:	443a      	add	r2, r7
 8002984:	6811      	ldr	r1, [r2, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f7fe faac 	bl	8000ee4 <__aeabi_fmul>
 800298c:	4603      	mov	r3, r0
 800298e:	4a13      	ldr	r2, [pc, #76]	@ (80029dc <NLLS+0x1184>)
 8002990:	443a      	add	r2, r7
 8002992:	6811      	ldr	r1, [r2, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f7fe faa5 	bl	8000ee4 <__aeabi_fmul>
 800299a:	4603      	mov	r3, r0
 800299c:	4a0a      	ldr	r2, [pc, #40]	@ (80029c8 <NLLS+0x1170>)
 800299e:	443a      	add	r2, r7
 80029a0:	6811      	ldr	r1, [r2, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fe fa9e 	bl	8000ee4 <__aeabi_fmul>
 80029a8:	4603      	mov	r3, r0
 80029aa:	e019      	b.n	80029e0 <NLLS+0x1188>
 80029ac:	00017008 	.word	0x00017008
 80029b0:	00017024 	.word	0x00017024
 80029b4:	00016fd0 	.word	0x00016fd0
 80029b8:	00017030 	.word	0x00017030
 80029bc:	00017028 	.word	0x00017028
 80029c0:	00017034 	.word	0x00017034
 80029c4:	00016fd4 	.word	0x00016fd4
 80029c8:	00016fc8 	.word	0x00016fc8
 80029cc:	00016fc4 	.word	0x00016fc4
 80029d0:	00016fd8 	.word	0x00016fd8
 80029d4:	0001702c 	.word	0x0001702c
 80029d8:	00017038 	.word	0x00017038
 80029dc:	00016fcc 	.word	0x00016fcc
 80029e0:	4a98      	ldr	r2, [pc, #608]	@ (8002c44 <NLLS+0x13ec>)
 80029e2:	443a      	add	r2, r7
 80029e4:	6811      	ldr	r1, [r2, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fe fa7c 	bl	8000ee4 <__aeabi_fmul>
 80029ec:	4603      	mov	r3, r0
 80029ee:	4619      	mov	r1, r3
 80029f0:	4628      	mov	r0, r5
 80029f2:	f7fe fb2b 	bl	800104c <__aeabi_fdiv>
 80029f6:	4603      	mov	r3, r0
 80029f8:	4619      	mov	r1, r3
 80029fa:	4620      	mov	r0, r4
 80029fc:	f7fe f96a 	bl	8000cd4 <__addsf3>
 8002a00:	4603      	mov	r3, r0
 8002a02:	4619      	mov	r1, r3
 8002a04:	f24a 0340 	movw	r3, #41024	@ 0xa040
 8002a08:	443b      	add	r3, r7
 8002a0a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002a0e:	4a8e      	ldr	r2, [pc, #568]	@ (8002c48 <NLLS+0x13f0>)
 8002a10:	443a      	add	r2, r7
 8002a12:	6812      	ldr	r2, [r2, #0]
 8002a14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			mat_H[1][i] = -(2*(by - my[i])*(by*sx*sz*sin_lambda*sin_lambda - my[i]*sx*sz*sin_lambda*sin_lambda + by*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - my[i]*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - bz*sx*sy*cos_rho*sin_lambda + mz[i]*sx*sy*cos_rho*sin_lambda - bx*sy*sz*sin_lambda*sin_lambda*sin_rho + mx[i]*sy*sz*sin_lambda*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + mx[i]*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + bx*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi - mx[i]*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi))/(sx*(sy*sy*sy)*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8002a18:	4b8b      	ldr	r3, [pc, #556]	@ (8002c48 <NLLS+0x13f0>)
 8002a1a:	443b      	add	r3, r7
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002a24:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8002a28:	4413      	add	r3, r2
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4b87      	ldr	r3, [pc, #540]	@ (8002c4c <NLLS+0x13f4>)
 8002a30:	443b      	add	r3, r7
 8002a32:	6818      	ldr	r0, [r3, #0]
 8002a34:	f7fe f94c 	bl	8000cd0 <__aeabi_fsub>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7fe f949 	bl	8000cd4 <__addsf3>
 8002a42:	4603      	mov	r3, r0
 8002a44:	461c      	mov	r4, r3
 8002a46:	4b82      	ldr	r3, [pc, #520]	@ (8002c50 <NLLS+0x13f8>)
 8002a48:	443b      	add	r3, r7
 8002a4a:	6819      	ldr	r1, [r3, #0]
 8002a4c:	4b7f      	ldr	r3, [pc, #508]	@ (8002c4c <NLLS+0x13f4>)
 8002a4e:	443b      	add	r3, r7
 8002a50:	6818      	ldr	r0, [r3, #0]
 8002a52:	f7fe fa47 	bl	8000ee4 <__aeabi_fmul>
 8002a56:	4603      	mov	r3, r0
 8002a58:	4a7e      	ldr	r2, [pc, #504]	@ (8002c54 <NLLS+0x13fc>)
 8002a5a:	443a      	add	r2, r7
 8002a5c:	6811      	ldr	r1, [r2, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fe fa40 	bl	8000ee4 <__aeabi_fmul>
 8002a64:	4603      	mov	r3, r0
 8002a66:	4a7c      	ldr	r2, [pc, #496]	@ (8002c58 <NLLS+0x1400>)
 8002a68:	443a      	add	r2, r7
 8002a6a:	6811      	ldr	r1, [r2, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fe fa39 	bl	8000ee4 <__aeabi_fmul>
 8002a72:	4603      	mov	r3, r0
 8002a74:	4a78      	ldr	r2, [pc, #480]	@ (8002c58 <NLLS+0x1400>)
 8002a76:	443a      	add	r2, r7
 8002a78:	6811      	ldr	r1, [r2, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe fa32 	bl	8000ee4 <__aeabi_fmul>
 8002a80:	4603      	mov	r3, r0
 8002a82:	461d      	mov	r5, r3
 8002a84:	4b70      	ldr	r3, [pc, #448]	@ (8002c48 <NLLS+0x13f0>)
 8002a86:	443b      	add	r3, r7
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002a90:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8002a94:	4413      	add	r3, r2
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a6d      	ldr	r2, [pc, #436]	@ (8002c50 <NLLS+0x13f8>)
 8002a9a:	443a      	add	r2, r7
 8002a9c:	6811      	ldr	r1, [r2, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7fe fa20 	bl	8000ee4 <__aeabi_fmul>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	4a6b      	ldr	r2, [pc, #428]	@ (8002c54 <NLLS+0x13fc>)
 8002aa8:	443a      	add	r2, r7
 8002aaa:	6811      	ldr	r1, [r2, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7fe fa19 	bl	8000ee4 <__aeabi_fmul>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	4a68      	ldr	r2, [pc, #416]	@ (8002c58 <NLLS+0x1400>)
 8002ab6:	443a      	add	r2, r7
 8002ab8:	6811      	ldr	r1, [r2, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe fa12 	bl	8000ee4 <__aeabi_fmul>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	4a65      	ldr	r2, [pc, #404]	@ (8002c58 <NLLS+0x1400>)
 8002ac4:	443a      	add	r2, r7
 8002ac6:	6811      	ldr	r1, [r2, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7fe fa0b 	bl	8000ee4 <__aeabi_fmul>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4628      	mov	r0, r5
 8002ad4:	f7fe f8fc 	bl	8000cd0 <__aeabi_fsub>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	461d      	mov	r5, r3
 8002adc:	4b5c      	ldr	r3, [pc, #368]	@ (8002c50 <NLLS+0x13f8>)
 8002ade:	443b      	add	r3, r7
 8002ae0:	6819      	ldr	r1, [r3, #0]
 8002ae2:	4b5a      	ldr	r3, [pc, #360]	@ (8002c4c <NLLS+0x13f4>)
 8002ae4:	443b      	add	r3, r7
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	f7fe f9fc 	bl	8000ee4 <__aeabi_fmul>
 8002aec:	4603      	mov	r3, r0
 8002aee:	4a59      	ldr	r2, [pc, #356]	@ (8002c54 <NLLS+0x13fc>)
 8002af0:	443a      	add	r2, r7
 8002af2:	6811      	ldr	r1, [r2, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7fe f9f5 	bl	8000ee4 <__aeabi_fmul>
 8002afa:	4603      	mov	r3, r0
 8002afc:	4a57      	ldr	r2, [pc, #348]	@ (8002c5c <NLLS+0x1404>)
 8002afe:	443a      	add	r2, r7
 8002b00:	6811      	ldr	r1, [r2, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fe f9ee 	bl	8000ee4 <__aeabi_fmul>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	4a54      	ldr	r2, [pc, #336]	@ (8002c5c <NLLS+0x1404>)
 8002b0c:	443a      	add	r2, r7
 8002b0e:	6811      	ldr	r1, [r2, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7fe f9e7 	bl	8000ee4 <__aeabi_fmul>
 8002b16:	4603      	mov	r3, r0
 8002b18:	4a51      	ldr	r2, [pc, #324]	@ (8002c60 <NLLS+0x1408>)
 8002b1a:	443a      	add	r2, r7
 8002b1c:	6811      	ldr	r1, [r2, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fe f9e0 	bl	8000ee4 <__aeabi_fmul>
 8002b24:	4603      	mov	r3, r0
 8002b26:	4a4e      	ldr	r2, [pc, #312]	@ (8002c60 <NLLS+0x1408>)
 8002b28:	443a      	add	r2, r7
 8002b2a:	6811      	ldr	r1, [r2, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fe f9d9 	bl	8000ee4 <__aeabi_fmul>
 8002b32:	4603      	mov	r3, r0
 8002b34:	4619      	mov	r1, r3
 8002b36:	4628      	mov	r0, r5
 8002b38:	f7fe f8cc 	bl	8000cd4 <__addsf3>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	461d      	mov	r5, r3
 8002b40:	4b41      	ldr	r3, [pc, #260]	@ (8002c48 <NLLS+0x13f0>)
 8002b42:	443b      	add	r3, r7
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002b4c:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8002b50:	4413      	add	r3, r2
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a3e      	ldr	r2, [pc, #248]	@ (8002c50 <NLLS+0x13f8>)
 8002b56:	443a      	add	r2, r7
 8002b58:	6811      	ldr	r1, [r2, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fe f9c2 	bl	8000ee4 <__aeabi_fmul>
 8002b60:	4603      	mov	r3, r0
 8002b62:	4a3c      	ldr	r2, [pc, #240]	@ (8002c54 <NLLS+0x13fc>)
 8002b64:	443a      	add	r2, r7
 8002b66:	6811      	ldr	r1, [r2, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fe f9bb 	bl	8000ee4 <__aeabi_fmul>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	4a3a      	ldr	r2, [pc, #232]	@ (8002c5c <NLLS+0x1404>)
 8002b72:	443a      	add	r2, r7
 8002b74:	6811      	ldr	r1, [r2, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe f9b4 	bl	8000ee4 <__aeabi_fmul>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	4a37      	ldr	r2, [pc, #220]	@ (8002c5c <NLLS+0x1404>)
 8002b80:	443a      	add	r2, r7
 8002b82:	6811      	ldr	r1, [r2, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fe f9ad 	bl	8000ee4 <__aeabi_fmul>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	4a34      	ldr	r2, [pc, #208]	@ (8002c60 <NLLS+0x1408>)
 8002b8e:	443a      	add	r2, r7
 8002b90:	6811      	ldr	r1, [r2, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fe f9a6 	bl	8000ee4 <__aeabi_fmul>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	4a31      	ldr	r2, [pc, #196]	@ (8002c60 <NLLS+0x1408>)
 8002b9c:	443a      	add	r2, r7
 8002b9e:	6811      	ldr	r1, [r2, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7fe f99f 	bl	8000ee4 <__aeabi_fmul>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4628      	mov	r0, r5
 8002bac:	f7fe f890 	bl	8000cd0 <__aeabi_fsub>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	461d      	mov	r5, r3
 8002bb4:	4b26      	ldr	r3, [pc, #152]	@ (8002c50 <NLLS+0x13f8>)
 8002bb6:	443b      	add	r3, r7
 8002bb8:	6819      	ldr	r1, [r3, #0]
 8002bba:	4b2a      	ldr	r3, [pc, #168]	@ (8002c64 <NLLS+0x140c>)
 8002bbc:	443b      	add	r3, r7
 8002bbe:	6818      	ldr	r0, [r3, #0]
 8002bc0:	f7fe f990 	bl	8000ee4 <__aeabi_fmul>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	4a28      	ldr	r2, [pc, #160]	@ (8002c68 <NLLS+0x1410>)
 8002bc8:	443a      	add	r2, r7
 8002bca:	6811      	ldr	r1, [r2, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fe f989 	bl	8000ee4 <__aeabi_fmul>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	4a1b      	ldr	r2, [pc, #108]	@ (8002c44 <NLLS+0x13ec>)
 8002bd6:	443a      	add	r2, r7
 8002bd8:	6811      	ldr	r1, [r2, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fe f982 	bl	8000ee4 <__aeabi_fmul>
 8002be0:	4603      	mov	r3, r0
 8002be2:	4a1d      	ldr	r2, [pc, #116]	@ (8002c58 <NLLS+0x1400>)
 8002be4:	443a      	add	r2, r7
 8002be6:	6811      	ldr	r1, [r2, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fe f97b 	bl	8000ee4 <__aeabi_fmul>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4628      	mov	r0, r5
 8002bf4:	f7fe f86c 	bl	8000cd0 <__aeabi_fsub>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	461d      	mov	r5, r3
 8002bfc:	4b12      	ldr	r3, [pc, #72]	@ (8002c48 <NLLS+0x13f0>)
 8002bfe:	443b      	add	r3, r7
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002c08:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a0f      	ldr	r2, [pc, #60]	@ (8002c50 <NLLS+0x13f8>)
 8002c12:	443a      	add	r2, r7
 8002c14:	6811      	ldr	r1, [r2, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fe f964 	bl	8000ee4 <__aeabi_fmul>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	4a12      	ldr	r2, [pc, #72]	@ (8002c68 <NLLS+0x1410>)
 8002c20:	443a      	add	r2, r7
 8002c22:	6811      	ldr	r1, [r2, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fe f95d 	bl	8000ee4 <__aeabi_fmul>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	4a05      	ldr	r2, [pc, #20]	@ (8002c44 <NLLS+0x13ec>)
 8002c2e:	443a      	add	r2, r7
 8002c30:	6811      	ldr	r1, [r2, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fe f956 	bl	8000ee4 <__aeabi_fmul>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	4a07      	ldr	r2, [pc, #28]	@ (8002c58 <NLLS+0x1400>)
 8002c3c:	443a      	add	r2, r7
 8002c3e:	6811      	ldr	r1, [r2, #0]
 8002c40:	e014      	b.n	8002c6c <NLLS+0x1414>
 8002c42:	bf00      	nop
 8002c44:	00016fc8 	.word	0x00016fc8
 8002c48:	00017008 	.word	0x00017008
 8002c4c:	00017028 	.word	0x00017028
 8002c50:	00017038 	.word	0x00017038
 8002c54:	00017030 	.word	0x00017030
 8002c58:	00016fd0 	.word	0x00016fd0
 8002c5c:	00016fc4 	.word	0x00016fc4
 8002c60:	00016fcc 	.word	0x00016fcc
 8002c64:	00017024 	.word	0x00017024
 8002c68:	00017034 	.word	0x00017034
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fe f939 	bl	8000ee4 <__aeabi_fmul>
 8002c72:	4603      	mov	r3, r0
 8002c74:	4619      	mov	r1, r3
 8002c76:	4628      	mov	r0, r5
 8002c78:	f7fe f82c 	bl	8000cd4 <__addsf3>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	461d      	mov	r5, r3
 8002c80:	4b96      	ldr	r3, [pc, #600]	@ (8002edc <NLLS+0x1684>)
 8002c82:	443b      	add	r3, r7
 8002c84:	6819      	ldr	r1, [r3, #0]
 8002c86:	4b96      	ldr	r3, [pc, #600]	@ (8002ee0 <NLLS+0x1688>)
 8002c88:	443b      	add	r3, r7
 8002c8a:	6818      	ldr	r0, [r3, #0]
 8002c8c:	f7fe f92a 	bl	8000ee4 <__aeabi_fmul>
 8002c90:	4603      	mov	r3, r0
 8002c92:	4a94      	ldr	r2, [pc, #592]	@ (8002ee4 <NLLS+0x168c>)
 8002c94:	443a      	add	r2, r7
 8002c96:	6811      	ldr	r1, [r2, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fe f923 	bl	8000ee4 <__aeabi_fmul>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	4a91      	ldr	r2, [pc, #580]	@ (8002ee8 <NLLS+0x1690>)
 8002ca2:	443a      	add	r2, r7
 8002ca4:	6811      	ldr	r1, [r2, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fe f91c 	bl	8000ee4 <__aeabi_fmul>
 8002cac:	4603      	mov	r3, r0
 8002cae:	4a8e      	ldr	r2, [pc, #568]	@ (8002ee8 <NLLS+0x1690>)
 8002cb0:	443a      	add	r2, r7
 8002cb2:	6811      	ldr	r1, [r2, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fe f915 	bl	8000ee4 <__aeabi_fmul>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	4a8b      	ldr	r2, [pc, #556]	@ (8002eec <NLLS+0x1694>)
 8002cbe:	443a      	add	r2, r7
 8002cc0:	6811      	ldr	r1, [r2, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fe f90e 	bl	8000ee4 <__aeabi_fmul>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4628      	mov	r0, r5
 8002cce:	f7fd ffff 	bl	8000cd0 <__aeabi_fsub>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	461d      	mov	r5, r3
 8002cd6:	4b86      	ldr	r3, [pc, #536]	@ (8002ef0 <NLLS+0x1698>)
 8002cd8:	443b      	add	r3, r7
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002ce2:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a7c      	ldr	r2, [pc, #496]	@ (8002edc <NLLS+0x1684>)
 8002cec:	443a      	add	r2, r7
 8002cee:	6811      	ldr	r1, [r2, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7fe f8f7 	bl	8000ee4 <__aeabi_fmul>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	4a7a      	ldr	r2, [pc, #488]	@ (8002ee4 <NLLS+0x168c>)
 8002cfa:	443a      	add	r2, r7
 8002cfc:	6811      	ldr	r1, [r2, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fe f8f0 	bl	8000ee4 <__aeabi_fmul>
 8002d04:	4603      	mov	r3, r0
 8002d06:	4a78      	ldr	r2, [pc, #480]	@ (8002ee8 <NLLS+0x1690>)
 8002d08:	443a      	add	r2, r7
 8002d0a:	6811      	ldr	r1, [r2, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7fe f8e9 	bl	8000ee4 <__aeabi_fmul>
 8002d12:	4603      	mov	r3, r0
 8002d14:	4a74      	ldr	r2, [pc, #464]	@ (8002ee8 <NLLS+0x1690>)
 8002d16:	443a      	add	r2, r7
 8002d18:	6811      	ldr	r1, [r2, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fe f8e2 	bl	8000ee4 <__aeabi_fmul>
 8002d20:	4603      	mov	r3, r0
 8002d22:	4a72      	ldr	r2, [pc, #456]	@ (8002eec <NLLS+0x1694>)
 8002d24:	443a      	add	r2, r7
 8002d26:	6811      	ldr	r1, [r2, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fe f8db 	bl	8000ee4 <__aeabi_fmul>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	4619      	mov	r1, r3
 8002d32:	4628      	mov	r0, r5
 8002d34:	f7fd ffce 	bl	8000cd4 <__addsf3>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	461d      	mov	r5, r3
 8002d3c:	4b67      	ldr	r3, [pc, #412]	@ (8002edc <NLLS+0x1684>)
 8002d3e:	443b      	add	r3, r7
 8002d40:	6819      	ldr	r1, [r3, #0]
 8002d42:	4b67      	ldr	r3, [pc, #412]	@ (8002ee0 <NLLS+0x1688>)
 8002d44:	443b      	add	r3, r7
 8002d46:	6818      	ldr	r0, [r3, #0]
 8002d48:	f7fe f8cc 	bl	8000ee4 <__aeabi_fmul>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	4a65      	ldr	r2, [pc, #404]	@ (8002ee4 <NLLS+0x168c>)
 8002d50:	443a      	add	r2, r7
 8002d52:	6811      	ldr	r1, [r2, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fe f8c5 	bl	8000ee4 <__aeabi_fmul>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	4a65      	ldr	r2, [pc, #404]	@ (8002ef4 <NLLS+0x169c>)
 8002d5e:	443a      	add	r2, r7
 8002d60:	6811      	ldr	r1, [r2, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fe f8be 	bl	8000ee4 <__aeabi_fmul>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	4a62      	ldr	r2, [pc, #392]	@ (8002ef4 <NLLS+0x169c>)
 8002d6c:	443a      	add	r2, r7
 8002d6e:	6811      	ldr	r1, [r2, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fe f8b7 	bl	8000ee4 <__aeabi_fmul>
 8002d76:	4603      	mov	r3, r0
 8002d78:	4a5f      	ldr	r2, [pc, #380]	@ (8002ef8 <NLLS+0x16a0>)
 8002d7a:	443a      	add	r2, r7
 8002d7c:	6811      	ldr	r1, [r2, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fe f8b0 	bl	8000ee4 <__aeabi_fmul>
 8002d84:	4603      	mov	r3, r0
 8002d86:	4a5c      	ldr	r2, [pc, #368]	@ (8002ef8 <NLLS+0x16a0>)
 8002d88:	443a      	add	r2, r7
 8002d8a:	6811      	ldr	r1, [r2, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fe f8a9 	bl	8000ee4 <__aeabi_fmul>
 8002d92:	4603      	mov	r3, r0
 8002d94:	4a55      	ldr	r2, [pc, #340]	@ (8002eec <NLLS+0x1694>)
 8002d96:	443a      	add	r2, r7
 8002d98:	6811      	ldr	r1, [r2, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fe f8a2 	bl	8000ee4 <__aeabi_fmul>
 8002da0:	4603      	mov	r3, r0
 8002da2:	4619      	mov	r1, r3
 8002da4:	4628      	mov	r0, r5
 8002da6:	f7fd ff93 	bl	8000cd0 <__aeabi_fsub>
 8002daa:	4603      	mov	r3, r0
 8002dac:	461d      	mov	r5, r3
 8002dae:	4b50      	ldr	r3, [pc, #320]	@ (8002ef0 <NLLS+0x1698>)
 8002db0:	443b      	add	r3, r7
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002dba:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a46      	ldr	r2, [pc, #280]	@ (8002edc <NLLS+0x1684>)
 8002dc4:	443a      	add	r2, r7
 8002dc6:	6811      	ldr	r1, [r2, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fe f88b 	bl	8000ee4 <__aeabi_fmul>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	4a44      	ldr	r2, [pc, #272]	@ (8002ee4 <NLLS+0x168c>)
 8002dd2:	443a      	add	r2, r7
 8002dd4:	6811      	ldr	r1, [r2, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fe f884 	bl	8000ee4 <__aeabi_fmul>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	4a45      	ldr	r2, [pc, #276]	@ (8002ef4 <NLLS+0x169c>)
 8002de0:	443a      	add	r2, r7
 8002de2:	6811      	ldr	r1, [r2, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7fe f87d 	bl	8000ee4 <__aeabi_fmul>
 8002dea:	4603      	mov	r3, r0
 8002dec:	4a41      	ldr	r2, [pc, #260]	@ (8002ef4 <NLLS+0x169c>)
 8002dee:	443a      	add	r2, r7
 8002df0:	6811      	ldr	r1, [r2, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fe f876 	bl	8000ee4 <__aeabi_fmul>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	4a3f      	ldr	r2, [pc, #252]	@ (8002ef8 <NLLS+0x16a0>)
 8002dfc:	443a      	add	r2, r7
 8002dfe:	6811      	ldr	r1, [r2, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7fe f86f 	bl	8000ee4 <__aeabi_fmul>
 8002e06:	4603      	mov	r3, r0
 8002e08:	4a3b      	ldr	r2, [pc, #236]	@ (8002ef8 <NLLS+0x16a0>)
 8002e0a:	443a      	add	r2, r7
 8002e0c:	6811      	ldr	r1, [r2, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fe f868 	bl	8000ee4 <__aeabi_fmul>
 8002e14:	4603      	mov	r3, r0
 8002e16:	4a35      	ldr	r2, [pc, #212]	@ (8002eec <NLLS+0x1694>)
 8002e18:	443a      	add	r2, r7
 8002e1a:	6811      	ldr	r1, [r2, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fe f861 	bl	8000ee4 <__aeabi_fmul>
 8002e22:	4603      	mov	r3, r0
 8002e24:	4619      	mov	r1, r3
 8002e26:	4628      	mov	r0, r5
 8002e28:	f7fd ff54 	bl	8000cd4 <__addsf3>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	461d      	mov	r5, r3
 8002e30:	4b2a      	ldr	r3, [pc, #168]	@ (8002edc <NLLS+0x1684>)
 8002e32:	443b      	add	r3, r7
 8002e34:	6819      	ldr	r1, [r3, #0]
 8002e36:	4b2a      	ldr	r3, [pc, #168]	@ (8002ee0 <NLLS+0x1688>)
 8002e38:	443b      	add	r3, r7
 8002e3a:	6818      	ldr	r0, [r3, #0]
 8002e3c:	f7fe f852 	bl	8000ee4 <__aeabi_fmul>
 8002e40:	4603      	mov	r3, r0
 8002e42:	4a28      	ldr	r2, [pc, #160]	@ (8002ee4 <NLLS+0x168c>)
 8002e44:	443a      	add	r2, r7
 8002e46:	6811      	ldr	r1, [r2, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7fe f84b 	bl	8000ee4 <__aeabi_fmul>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	4a28      	ldr	r2, [pc, #160]	@ (8002ef4 <NLLS+0x169c>)
 8002e52:	443a      	add	r2, r7
 8002e54:	6811      	ldr	r1, [r2, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fe f844 	bl	8000ee4 <__aeabi_fmul>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	4a27      	ldr	r2, [pc, #156]	@ (8002efc <NLLS+0x16a4>)
 8002e60:	443a      	add	r2, r7
 8002e62:	6811      	ldr	r1, [r2, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fe f83d 	bl	8000ee4 <__aeabi_fmul>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	4a1e      	ldr	r2, [pc, #120]	@ (8002ee8 <NLLS+0x1690>)
 8002e6e:	443a      	add	r2, r7
 8002e70:	6811      	ldr	r1, [r2, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fe f836 	bl	8000ee4 <__aeabi_fmul>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	4a21      	ldr	r2, [pc, #132]	@ (8002f00 <NLLS+0x16a8>)
 8002e7c:	443a      	add	r2, r7
 8002e7e:	6811      	ldr	r1, [r2, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fe f82f 	bl	8000ee4 <__aeabi_fmul>
 8002e86:	4603      	mov	r3, r0
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4628      	mov	r0, r5
 8002e8c:	f7fd ff22 	bl	8000cd4 <__addsf3>
 8002e90:	4603      	mov	r3, r0
 8002e92:	461d      	mov	r5, r3
 8002e94:	4b16      	ldr	r3, [pc, #88]	@ (8002ef0 <NLLS+0x1698>)
 8002e96:	443b      	add	r3, r7
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002ea0:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a0c      	ldr	r2, [pc, #48]	@ (8002edc <NLLS+0x1684>)
 8002eaa:	443a      	add	r2, r7
 8002eac:	6811      	ldr	r1, [r2, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fe f818 	bl	8000ee4 <__aeabi_fmul>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	4a0b      	ldr	r2, [pc, #44]	@ (8002ee4 <NLLS+0x168c>)
 8002eb8:	443a      	add	r2, r7
 8002eba:	6811      	ldr	r1, [r2, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fe f811 	bl	8000ee4 <__aeabi_fmul>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	4a0b      	ldr	r2, [pc, #44]	@ (8002ef4 <NLLS+0x169c>)
 8002ec6:	443a      	add	r2, r7
 8002ec8:	6811      	ldr	r1, [r2, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fe f80a 	bl	8000ee4 <__aeabi_fmul>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8002efc <NLLS+0x16a4>)
 8002ed4:	443a      	add	r2, r7
 8002ed6:	6811      	ldr	r1, [r2, #0]
 8002ed8:	e014      	b.n	8002f04 <NLLS+0x16ac>
 8002eda:	bf00      	nop
 8002edc:	00017034 	.word	0x00017034
 8002ee0:	0001702c 	.word	0x0001702c
 8002ee4:	00017030 	.word	0x00017030
 8002ee8:	00016fd0 	.word	0x00016fd0
 8002eec:	00016fd4 	.word	0x00016fd4
 8002ef0:	00017008 	.word	0x00017008
 8002ef4:	00016fc4 	.word	0x00016fc4
 8002ef8:	00016fcc 	.word	0x00016fcc
 8002efc:	00016fc8 	.word	0x00016fc8
 8002f00:	00016fd8 	.word	0x00016fd8
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7fd ffed 	bl	8000ee4 <__aeabi_fmul>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	4a98      	ldr	r2, [pc, #608]	@ (8003170 <NLLS+0x1918>)
 8002f0e:	443a      	add	r2, r7
 8002f10:	6811      	ldr	r1, [r2, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fd ffe6 	bl	8000ee4 <__aeabi_fmul>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	4a96      	ldr	r2, [pc, #600]	@ (8003174 <NLLS+0x191c>)
 8002f1c:	443a      	add	r2, r7
 8002f1e:	6811      	ldr	r1, [r2, #0]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fd ffdf 	bl	8000ee4 <__aeabi_fmul>
 8002f26:	4603      	mov	r3, r0
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4628      	mov	r0, r5
 8002f2c:	f7fd fed0 	bl	8000cd0 <__aeabi_fsub>
 8002f30:	4603      	mov	r3, r0
 8002f32:	4619      	mov	r1, r3
 8002f34:	4620      	mov	r0, r4
 8002f36:	f7fd ffd5 	bl	8000ee4 <__aeabi_fmul>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8002f40:	4b8d      	ldr	r3, [pc, #564]	@ (8003178 <NLLS+0x1920>)
 8002f42:	443b      	add	r3, r7
 8002f44:	6819      	ldr	r1, [r3, #0]
 8002f46:	4b8c      	ldr	r3, [pc, #560]	@ (8003178 <NLLS+0x1920>)
 8002f48:	443b      	add	r3, r7
 8002f4a:	6818      	ldr	r0, [r3, #0]
 8002f4c:	f7fd ffca 	bl	8000ee4 <__aeabi_fmul>
 8002f50:	4603      	mov	r3, r0
 8002f52:	4a89      	ldr	r2, [pc, #548]	@ (8003178 <NLLS+0x1920>)
 8002f54:	443a      	add	r2, r7
 8002f56:	6811      	ldr	r1, [r2, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fd ffc3 	bl	8000ee4 <__aeabi_fmul>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	4a86      	ldr	r2, [pc, #536]	@ (800317c <NLLS+0x1924>)
 8002f62:	443a      	add	r2, r7
 8002f64:	6811      	ldr	r1, [r2, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fd ffbc 	bl	8000ee4 <__aeabi_fmul>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	4a84      	ldr	r2, [pc, #528]	@ (8003180 <NLLS+0x1928>)
 8002f70:	443a      	add	r2, r7
 8002f72:	6811      	ldr	r1, [r2, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7fd ffb5 	bl	8000ee4 <__aeabi_fmul>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	4a81      	ldr	r2, [pc, #516]	@ (8003184 <NLLS+0x192c>)
 8002f7e:	443a      	add	r2, r7
 8002f80:	6811      	ldr	r1, [r2, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fd ffae 	bl	8000ee4 <__aeabi_fmul>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	4a7e      	ldr	r2, [pc, #504]	@ (8003184 <NLLS+0x192c>)
 8002f8c:	443a      	add	r2, r7
 8002f8e:	6811      	ldr	r1, [r2, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fd ffa7 	bl	8000ee4 <__aeabi_fmul>
 8002f96:	4603      	mov	r3, r0
 8002f98:	4a7b      	ldr	r2, [pc, #492]	@ (8003188 <NLLS+0x1930>)
 8002f9a:	443a      	add	r2, r7
 8002f9c:	6811      	ldr	r1, [r2, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fd ffa0 	bl	8000ee4 <__aeabi_fmul>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	4a78      	ldr	r2, [pc, #480]	@ (8003188 <NLLS+0x1930>)
 8002fa8:	443a      	add	r2, r7
 8002faa:	6811      	ldr	r1, [r2, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7fd ff99 	bl	8000ee4 <__aeabi_fmul>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	4a75      	ldr	r2, [pc, #468]	@ (800318c <NLLS+0x1934>)
 8002fb6:	443a      	add	r2, r7
 8002fb8:	6811      	ldr	r1, [r2, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fd ff92 	bl	8000ee4 <__aeabi_fmul>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	4a72      	ldr	r2, [pc, #456]	@ (800318c <NLLS+0x1934>)
 8002fc4:	443a      	add	r2, r7
 8002fc6:	6811      	ldr	r1, [r2, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7fd ff8b 	bl	8000ee4 <__aeabi_fmul>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4620      	mov	r0, r4
 8002fd4:	f7fe f83a 	bl	800104c <__aeabi_fdiv>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	4619      	mov	r1, r3
 8002fdc:	f24a 0340 	movw	r3, #41024	@ 0xa040
 8002fe0:	443b      	add	r3, r7
 8002fe2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002fe6:	4a6a      	ldr	r2, [pc, #424]	@ (8003190 <NLLS+0x1938>)
 8002fe8:	443a      	add	r2, r7
 8002fea:	6812      	ldr	r2, [r2, #0]
 8002fec:	f502 628b 	add.w	r2, r2, #1112	@ 0x458
 8002ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			mat_H[2][i] = -(2*(bz - mz[i])*(bz*sx*sy*cos_rho - by*sx*sz*sin_lambda - mz[i]*sx*sy*cos_rho + my[i]*sx*sz*sin_lambda + bx*sy*sz*sin_lambda*sin_rho - mx[i]*sy*sz*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_rho*sin_phi + mx[i]*sy*sz*cos_lambda*cos_rho*sin_phi))/(sx*sy*(sz*sz*sz)*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho);
 8002ff4:	4b66      	ldr	r3, [pc, #408]	@ (8003190 <NLLS+0x1938>)
 8002ff6:	443b      	add	r3, r7
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003000:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8003004:	4413      	add	r3, r2
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4619      	mov	r1, r3
 800300a:	4b62      	ldr	r3, [pc, #392]	@ (8003194 <NLLS+0x193c>)
 800300c:	443b      	add	r3, r7
 800300e:	6818      	ldr	r0, [r3, #0]
 8003010:	f7fd fe5e 	bl	8000cd0 <__aeabi_fsub>
 8003014:	4603      	mov	r3, r0
 8003016:	4619      	mov	r1, r3
 8003018:	4618      	mov	r0, r3
 800301a:	f7fd fe5b 	bl	8000cd4 <__addsf3>
 800301e:	4603      	mov	r3, r0
 8003020:	461c      	mov	r4, r3
 8003022:	4b56      	ldr	r3, [pc, #344]	@ (800317c <NLLS+0x1924>)
 8003024:	443b      	add	r3, r7
 8003026:	6819      	ldr	r1, [r3, #0]
 8003028:	4b5a      	ldr	r3, [pc, #360]	@ (8003194 <NLLS+0x193c>)
 800302a:	443b      	add	r3, r7
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	f7fd ff59 	bl	8000ee4 <__aeabi_fmul>
 8003032:	4603      	mov	r3, r0
 8003034:	4a50      	ldr	r2, [pc, #320]	@ (8003178 <NLLS+0x1920>)
 8003036:	443a      	add	r2, r7
 8003038:	6811      	ldr	r1, [r2, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7fd ff52 	bl	8000ee4 <__aeabi_fmul>
 8003040:	4603      	mov	r3, r0
 8003042:	4a52      	ldr	r2, [pc, #328]	@ (800318c <NLLS+0x1934>)
 8003044:	443a      	add	r2, r7
 8003046:	6811      	ldr	r1, [r2, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f7fd ff4b 	bl	8000ee4 <__aeabi_fmul>
 800304e:	4603      	mov	r3, r0
 8003050:	461d      	mov	r5, r3
 8003052:	4b4a      	ldr	r3, [pc, #296]	@ (800317c <NLLS+0x1924>)
 8003054:	443b      	add	r3, r7
 8003056:	6819      	ldr	r1, [r3, #0]
 8003058:	4b4f      	ldr	r3, [pc, #316]	@ (8003198 <NLLS+0x1940>)
 800305a:	443b      	add	r3, r7
 800305c:	6818      	ldr	r0, [r3, #0]
 800305e:	f7fd ff41 	bl	8000ee4 <__aeabi_fmul>
 8003062:	4603      	mov	r3, r0
 8003064:	4a46      	ldr	r2, [pc, #280]	@ (8003180 <NLLS+0x1928>)
 8003066:	443a      	add	r2, r7
 8003068:	6811      	ldr	r1, [r2, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f7fd ff3a 	bl	8000ee4 <__aeabi_fmul>
 8003070:	4603      	mov	r3, r0
 8003072:	4a3f      	ldr	r2, [pc, #252]	@ (8003170 <NLLS+0x1918>)
 8003074:	443a      	add	r2, r7
 8003076:	6811      	ldr	r1, [r2, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f7fd ff33 	bl	8000ee4 <__aeabi_fmul>
 800307e:	4603      	mov	r3, r0
 8003080:	4619      	mov	r1, r3
 8003082:	4628      	mov	r0, r5
 8003084:	f7fd fe24 	bl	8000cd0 <__aeabi_fsub>
 8003088:	4603      	mov	r3, r0
 800308a:	461d      	mov	r5, r3
 800308c:	4b40      	ldr	r3, [pc, #256]	@ (8003190 <NLLS+0x1938>)
 800308e:	443b      	add	r3, r7
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003098:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 800309c:	4413      	add	r3, r2
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a36      	ldr	r2, [pc, #216]	@ (800317c <NLLS+0x1924>)
 80030a2:	443a      	add	r2, r7
 80030a4:	6811      	ldr	r1, [r2, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fd ff1c 	bl	8000ee4 <__aeabi_fmul>
 80030ac:	4603      	mov	r3, r0
 80030ae:	4a32      	ldr	r2, [pc, #200]	@ (8003178 <NLLS+0x1920>)
 80030b0:	443a      	add	r2, r7
 80030b2:	6811      	ldr	r1, [r2, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7fd ff15 	bl	8000ee4 <__aeabi_fmul>
 80030ba:	4603      	mov	r3, r0
 80030bc:	4a33      	ldr	r2, [pc, #204]	@ (800318c <NLLS+0x1934>)
 80030be:	443a      	add	r2, r7
 80030c0:	6811      	ldr	r1, [r2, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fd ff0e 	bl	8000ee4 <__aeabi_fmul>
 80030c8:	4603      	mov	r3, r0
 80030ca:	4619      	mov	r1, r3
 80030cc:	4628      	mov	r0, r5
 80030ce:	f7fd fdff 	bl	8000cd0 <__aeabi_fsub>
 80030d2:	4603      	mov	r3, r0
 80030d4:	461d      	mov	r5, r3
 80030d6:	4b2e      	ldr	r3, [pc, #184]	@ (8003190 <NLLS+0x1938>)
 80030d8:	443b      	add	r3, r7
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80030e2:	f852 2c38 	ldr.w	r2, [r2, #-56]
 80030e6:	4413      	add	r3, r2
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a24      	ldr	r2, [pc, #144]	@ (800317c <NLLS+0x1924>)
 80030ec:	443a      	add	r2, r7
 80030ee:	6811      	ldr	r1, [r2, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fd fef7 	bl	8000ee4 <__aeabi_fmul>
 80030f6:	4603      	mov	r3, r0
 80030f8:	4a21      	ldr	r2, [pc, #132]	@ (8003180 <NLLS+0x1928>)
 80030fa:	443a      	add	r2, r7
 80030fc:	6811      	ldr	r1, [r2, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fd fef0 	bl	8000ee4 <__aeabi_fmul>
 8003104:	4603      	mov	r3, r0
 8003106:	4a1a      	ldr	r2, [pc, #104]	@ (8003170 <NLLS+0x1918>)
 8003108:	443a      	add	r2, r7
 800310a:	6811      	ldr	r1, [r2, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f7fd fee9 	bl	8000ee4 <__aeabi_fmul>
 8003112:	4603      	mov	r3, r0
 8003114:	4619      	mov	r1, r3
 8003116:	4628      	mov	r0, r5
 8003118:	f7fd fddc 	bl	8000cd4 <__addsf3>
 800311c:	4603      	mov	r3, r0
 800311e:	461d      	mov	r5, r3
 8003120:	4b15      	ldr	r3, [pc, #84]	@ (8003178 <NLLS+0x1920>)
 8003122:	443b      	add	r3, r7
 8003124:	6819      	ldr	r1, [r3, #0]
 8003126:	4b1d      	ldr	r3, [pc, #116]	@ (800319c <NLLS+0x1944>)
 8003128:	443b      	add	r3, r7
 800312a:	6818      	ldr	r0, [r3, #0]
 800312c:	f7fd feda 	bl	8000ee4 <__aeabi_fmul>
 8003130:	4603      	mov	r3, r0
 8003132:	4a13      	ldr	r2, [pc, #76]	@ (8003180 <NLLS+0x1928>)
 8003134:	443a      	add	r2, r7
 8003136:	6811      	ldr	r1, [r2, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f7fd fed3 	bl	8000ee4 <__aeabi_fmul>
 800313e:	4603      	mov	r3, r0
 8003140:	4a0b      	ldr	r2, [pc, #44]	@ (8003170 <NLLS+0x1918>)
 8003142:	443a      	add	r2, r7
 8003144:	6811      	ldr	r1, [r2, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7fd fecc 	bl	8000ee4 <__aeabi_fmul>
 800314c:	4603      	mov	r3, r0
 800314e:	4a14      	ldr	r2, [pc, #80]	@ (80031a0 <NLLS+0x1948>)
 8003150:	443a      	add	r2, r7
 8003152:	6811      	ldr	r1, [r2, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f7fd fec5 	bl	8000ee4 <__aeabi_fmul>
 800315a:	4603      	mov	r3, r0
 800315c:	4619      	mov	r1, r3
 800315e:	4628      	mov	r0, r5
 8003160:	f7fd fdb8 	bl	8000cd4 <__addsf3>
 8003164:	4603      	mov	r3, r0
 8003166:	461d      	mov	r5, r3
 8003168:	4b09      	ldr	r3, [pc, #36]	@ (8003190 <NLLS+0x1938>)
 800316a:	443b      	add	r3, r7
 800316c:	e01a      	b.n	80031a4 <NLLS+0x194c>
 800316e:	bf00      	nop
 8003170:	00016fd0 	.word	0x00016fd0
 8003174:	00016fd8 	.word	0x00016fd8
 8003178:	00017034 	.word	0x00017034
 800317c:	00017038 	.word	0x00017038
 8003180:	00017030 	.word	0x00017030
 8003184:	00016fc4 	.word	0x00016fc4
 8003188:	00016fcc 	.word	0x00016fcc
 800318c:	00016fc8 	.word	0x00016fc8
 8003190:	00017008 	.word	0x00017008
 8003194:	00017024 	.word	0x00017024
 8003198:	00017028 	.word	0x00017028
 800319c:	0001702c 	.word	0x0001702c
 80031a0:	00016fd4 	.word	0x00016fd4
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80031ac:	f852 2c34 	ldr.w	r2, [r2, #-52]
 80031b0:	4413      	add	r3, r2
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a98      	ldr	r2, [pc, #608]	@ (8003418 <NLLS+0x1bc0>)
 80031b6:	443a      	add	r2, r7
 80031b8:	6811      	ldr	r1, [r2, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fd fe92 	bl	8000ee4 <__aeabi_fmul>
 80031c0:	4603      	mov	r3, r0
 80031c2:	4a96      	ldr	r2, [pc, #600]	@ (800341c <NLLS+0x1bc4>)
 80031c4:	443a      	add	r2, r7
 80031c6:	6811      	ldr	r1, [r2, #0]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fd fe8b 	bl	8000ee4 <__aeabi_fmul>
 80031ce:	4603      	mov	r3, r0
 80031d0:	4a93      	ldr	r2, [pc, #588]	@ (8003420 <NLLS+0x1bc8>)
 80031d2:	443a      	add	r2, r7
 80031d4:	6811      	ldr	r1, [r2, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fd fe84 	bl	8000ee4 <__aeabi_fmul>
 80031dc:	4603      	mov	r3, r0
 80031de:	4a91      	ldr	r2, [pc, #580]	@ (8003424 <NLLS+0x1bcc>)
 80031e0:	443a      	add	r2, r7
 80031e2:	6811      	ldr	r1, [r2, #0]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7fd fe7d 	bl	8000ee4 <__aeabi_fmul>
 80031ea:	4603      	mov	r3, r0
 80031ec:	4619      	mov	r1, r3
 80031ee:	4628      	mov	r0, r5
 80031f0:	f7fd fd6e 	bl	8000cd0 <__aeabi_fsub>
 80031f4:	4603      	mov	r3, r0
 80031f6:	461d      	mov	r5, r3
 80031f8:	4b87      	ldr	r3, [pc, #540]	@ (8003418 <NLLS+0x1bc0>)
 80031fa:	443b      	add	r3, r7
 80031fc:	6819      	ldr	r1, [r3, #0]
 80031fe:	4b8a      	ldr	r3, [pc, #552]	@ (8003428 <NLLS+0x1bd0>)
 8003200:	443b      	add	r3, r7
 8003202:	6818      	ldr	r0, [r3, #0]
 8003204:	f7fd fe6e 	bl	8000ee4 <__aeabi_fmul>
 8003208:	4603      	mov	r3, r0
 800320a:	4a84      	ldr	r2, [pc, #528]	@ (800341c <NLLS+0x1bc4>)
 800320c:	443a      	add	r2, r7
 800320e:	6811      	ldr	r1, [r2, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	f7fd fe67 	bl	8000ee4 <__aeabi_fmul>
 8003216:	4603      	mov	r3, r0
 8003218:	4a84      	ldr	r2, [pc, #528]	@ (800342c <NLLS+0x1bd4>)
 800321a:	443a      	add	r2, r7
 800321c:	6811      	ldr	r1, [r2, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f7fd fe60 	bl	8000ee4 <__aeabi_fmul>
 8003224:	4603      	mov	r3, r0
 8003226:	4a82      	ldr	r2, [pc, #520]	@ (8003430 <NLLS+0x1bd8>)
 8003228:	443a      	add	r2, r7
 800322a:	6811      	ldr	r1, [r2, #0]
 800322c:	4618      	mov	r0, r3
 800322e:	f7fd fe59 	bl	8000ee4 <__aeabi_fmul>
 8003232:	4603      	mov	r3, r0
 8003234:	4a7f      	ldr	r2, [pc, #508]	@ (8003434 <NLLS+0x1bdc>)
 8003236:	443a      	add	r2, r7
 8003238:	6811      	ldr	r1, [r2, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7fd fe52 	bl	8000ee4 <__aeabi_fmul>
 8003240:	4603      	mov	r3, r0
 8003242:	4619      	mov	r1, r3
 8003244:	4628      	mov	r0, r5
 8003246:	f7fd fd43 	bl	8000cd0 <__aeabi_fsub>
 800324a:	4603      	mov	r3, r0
 800324c:	461d      	mov	r5, r3
 800324e:	4b7a      	ldr	r3, [pc, #488]	@ (8003438 <NLLS+0x1be0>)
 8003250:	443b      	add	r3, r7
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800325a:	f852 2c34 	ldr.w	r2, [r2, #-52]
 800325e:	4413      	add	r3, r2
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a6d      	ldr	r2, [pc, #436]	@ (8003418 <NLLS+0x1bc0>)
 8003264:	443a      	add	r2, r7
 8003266:	6811      	ldr	r1, [r2, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f7fd fe3b 	bl	8000ee4 <__aeabi_fmul>
 800326e:	4603      	mov	r3, r0
 8003270:	4a6a      	ldr	r2, [pc, #424]	@ (800341c <NLLS+0x1bc4>)
 8003272:	443a      	add	r2, r7
 8003274:	6811      	ldr	r1, [r2, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7fd fe34 	bl	8000ee4 <__aeabi_fmul>
 800327c:	4603      	mov	r3, r0
 800327e:	4a6b      	ldr	r2, [pc, #428]	@ (800342c <NLLS+0x1bd4>)
 8003280:	443a      	add	r2, r7
 8003282:	6811      	ldr	r1, [r2, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f7fd fe2d 	bl	8000ee4 <__aeabi_fmul>
 800328a:	4603      	mov	r3, r0
 800328c:	4a68      	ldr	r2, [pc, #416]	@ (8003430 <NLLS+0x1bd8>)
 800328e:	443a      	add	r2, r7
 8003290:	6811      	ldr	r1, [r2, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f7fd fe26 	bl	8000ee4 <__aeabi_fmul>
 8003298:	4603      	mov	r3, r0
 800329a:	4a66      	ldr	r2, [pc, #408]	@ (8003434 <NLLS+0x1bdc>)
 800329c:	443a      	add	r2, r7
 800329e:	6811      	ldr	r1, [r2, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fd fe1f 	bl	8000ee4 <__aeabi_fmul>
 80032a6:	4603      	mov	r3, r0
 80032a8:	4619      	mov	r1, r3
 80032aa:	4628      	mov	r0, r5
 80032ac:	f7fd fd12 	bl	8000cd4 <__addsf3>
 80032b0:	4603      	mov	r3, r0
 80032b2:	4619      	mov	r1, r3
 80032b4:	4620      	mov	r0, r4
 80032b6:	f7fd fe15 	bl	8000ee4 <__aeabi_fmul>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 80032c0:	4b55      	ldr	r3, [pc, #340]	@ (8003418 <NLLS+0x1bc0>)
 80032c2:	443b      	add	r3, r7
 80032c4:	6819      	ldr	r1, [r3, #0]
 80032c6:	4b5d      	ldr	r3, [pc, #372]	@ (800343c <NLLS+0x1be4>)
 80032c8:	443b      	add	r3, r7
 80032ca:	6818      	ldr	r0, [r3, #0]
 80032cc:	f7fd fe0a 	bl	8000ee4 <__aeabi_fmul>
 80032d0:	4603      	mov	r3, r0
 80032d2:	461d      	mov	r5, r3
 80032d4:	4b51      	ldr	r3, [pc, #324]	@ (800341c <NLLS+0x1bc4>)
 80032d6:	443b      	add	r3, r7
 80032d8:	6819      	ldr	r1, [r3, #0]
 80032da:	4b50      	ldr	r3, [pc, #320]	@ (800341c <NLLS+0x1bc4>)
 80032dc:	443b      	add	r3, r7
 80032de:	6818      	ldr	r0, [r3, #0]
 80032e0:	f7fd fe00 	bl	8000ee4 <__aeabi_fmul>
 80032e4:	4603      	mov	r3, r0
 80032e6:	4a4d      	ldr	r2, [pc, #308]	@ (800341c <NLLS+0x1bc4>)
 80032e8:	443a      	add	r2, r7
 80032ea:	6811      	ldr	r1, [r2, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fd fdf9 	bl	8000ee4 <__aeabi_fmul>
 80032f2:	4603      	mov	r3, r0
 80032f4:	4619      	mov	r1, r3
 80032f6:	4628      	mov	r0, r5
 80032f8:	f7fd fdf4 	bl	8000ee4 <__aeabi_fmul>
 80032fc:	4603      	mov	r3, r0
 80032fe:	4a4b      	ldr	r2, [pc, #300]	@ (800342c <NLLS+0x1bd4>)
 8003300:	443a      	add	r2, r7
 8003302:	6811      	ldr	r1, [r2, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f7fd fded 	bl	8000ee4 <__aeabi_fmul>
 800330a:	4603      	mov	r3, r0
 800330c:	4a47      	ldr	r2, [pc, #284]	@ (800342c <NLLS+0x1bd4>)
 800330e:	443a      	add	r2, r7
 8003310:	6811      	ldr	r1, [r2, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f7fd fde6 	bl	8000ee4 <__aeabi_fmul>
 8003318:	4603      	mov	r3, r0
 800331a:	4a49      	ldr	r2, [pc, #292]	@ (8003440 <NLLS+0x1be8>)
 800331c:	443a      	add	r2, r7
 800331e:	6811      	ldr	r1, [r2, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f7fd fddf 	bl	8000ee4 <__aeabi_fmul>
 8003326:	4603      	mov	r3, r0
 8003328:	4a45      	ldr	r2, [pc, #276]	@ (8003440 <NLLS+0x1be8>)
 800332a:	443a      	add	r2, r7
 800332c:	6811      	ldr	r1, [r2, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7fd fdd8 	bl	8000ee4 <__aeabi_fmul>
 8003334:	4603      	mov	r3, r0
 8003336:	4a3e      	ldr	r2, [pc, #248]	@ (8003430 <NLLS+0x1bd8>)
 8003338:	443a      	add	r2, r7
 800333a:	6811      	ldr	r1, [r2, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f7fd fdd1 	bl	8000ee4 <__aeabi_fmul>
 8003342:	4603      	mov	r3, r0
 8003344:	4619      	mov	r1, r3
 8003346:	4620      	mov	r0, r4
 8003348:	f7fd fe80 	bl	800104c <__aeabi_fdiv>
 800334c:	4603      	mov	r3, r0
 800334e:	4619      	mov	r1, r3
 8003350:	f24a 0340 	movw	r3, #41024	@ 0xa040
 8003354:	443b      	add	r3, r7
 8003356:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800335a:	4a37      	ldr	r2, [pc, #220]	@ (8003438 <NLLS+0x1be0>)
 800335c:	443a      	add	r2, r7
 800335e:	6812      	ldr	r2, [r2, #0]
 8003360:	f502 620b 	add.w	r2, r2, #2224	@ 0x8b0
 8003364:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			mat_H[3][i] = (2*bx - 2*mx[i])/sx*sx - (2*sin_rho*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i])))/(sx*sx*sy*cos_rho*cos_rho) + (2*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sz*cos_lambda*cos_lambda*2*cos_phi*cos_phi*cos_rho*cos_rho);
 8003368:	4b2f      	ldr	r3, [pc, #188]	@ (8003428 <NLLS+0x1bd0>)
 800336a:	443b      	add	r3, r7
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4619      	mov	r1, r3
 8003370:	4618      	mov	r0, r3
 8003372:	f7fd fcaf 	bl	8000cd4 <__addsf3>
 8003376:	4603      	mov	r3, r0
 8003378:	461c      	mov	r4, r3
 800337a:	4b2f      	ldr	r3, [pc, #188]	@ (8003438 <NLLS+0x1be0>)
 800337c:	443b      	add	r3, r7
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003386:	f852 2c34 	ldr.w	r2, [r2, #-52]
 800338a:	4413      	add	r3, r2
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4619      	mov	r1, r3
 8003390:	4618      	mov	r0, r3
 8003392:	f7fd fc9f 	bl	8000cd4 <__addsf3>
 8003396:	4603      	mov	r3, r0
 8003398:	4619      	mov	r1, r3
 800339a:	4620      	mov	r0, r4
 800339c:	f7fd fc98 	bl	8000cd0 <__aeabi_fsub>
 80033a0:	4603      	mov	r3, r0
 80033a2:	4a26      	ldr	r2, [pc, #152]	@ (800343c <NLLS+0x1be4>)
 80033a4:	443a      	add	r2, r7
 80033a6:	6811      	ldr	r1, [r2, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fd fe4f 	bl	800104c <__aeabi_fdiv>
 80033ae:	4603      	mov	r3, r0
 80033b0:	4a22      	ldr	r2, [pc, #136]	@ (800343c <NLLS+0x1be4>)
 80033b2:	443a      	add	r2, r7
 80033b4:	6811      	ldr	r1, [r2, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fd fd94 	bl	8000ee4 <__aeabi_fmul>
 80033bc:	4603      	mov	r3, r0
 80033be:	461c      	mov	r4, r3
 80033c0:	4b18      	ldr	r3, [pc, #96]	@ (8003424 <NLLS+0x1bcc>)
 80033c2:	443b      	add	r3, r7
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4619      	mov	r1, r3
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fd fc83 	bl	8000cd4 <__addsf3>
 80033ce:	4603      	mov	r3, r0
 80033d0:	461d      	mov	r5, r3
 80033d2:	4b19      	ldr	r3, [pc, #100]	@ (8003438 <NLLS+0x1be0>)
 80033d4:	443b      	add	r3, r7
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80033de:	f852 2c38 	ldr.w	r2, [r2, #-56]
 80033e2:	4413      	add	r3, r2
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4619      	mov	r1, r3
 80033e8:	4b16      	ldr	r3, [pc, #88]	@ (8003444 <NLLS+0x1bec>)
 80033ea:	443b      	add	r3, r7
 80033ec:	6818      	ldr	r0, [r3, #0]
 80033ee:	f7fd fc6f 	bl	8000cd0 <__aeabi_fsub>
 80033f2:	4603      	mov	r3, r0
 80033f4:	4a11      	ldr	r2, [pc, #68]	@ (800343c <NLLS+0x1be4>)
 80033f6:	443a      	add	r2, r7
 80033f8:	6811      	ldr	r1, [r2, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fd fd72 	bl	8000ee4 <__aeabi_fmul>
 8003400:	4603      	mov	r3, r0
 8003402:	461e      	mov	r6, r3
 8003404:	4b07      	ldr	r3, [pc, #28]	@ (8003424 <NLLS+0x1bcc>)
 8003406:	443b      	add	r3, r7
 8003408:	6819      	ldr	r1, [r3, #0]
 800340a:	4b03      	ldr	r3, [pc, #12]	@ (8003418 <NLLS+0x1bc0>)
 800340c:	443b      	add	r3, r7
 800340e:	6818      	ldr	r0, [r3, #0]
 8003410:	f7fd fd68 	bl	8000ee4 <__aeabi_fmul>
 8003414:	e018      	b.n	8003448 <NLLS+0x1bf0>
 8003416:	bf00      	nop
 8003418:	00017034 	.word	0x00017034
 800341c:	00017030 	.word	0x00017030
 8003420:	00016fd0 	.word	0x00016fd0
 8003424:	00016fd4 	.word	0x00016fd4
 8003428:	0001702c 	.word	0x0001702c
 800342c:	00016fc4 	.word	0x00016fc4
 8003430:	00016fc8 	.word	0x00016fc8
 8003434:	00016fd8 	.word	0x00016fd8
 8003438:	00017008 	.word	0x00017008
 800343c:	00017038 	.word	0x00017038
 8003440:	00016fcc 	.word	0x00016fcc
 8003444:	00017028 	.word	0x00017028
 8003448:	4603      	mov	r3, r0
 800344a:	4698      	mov	r8, r3
 800344c:	4b97      	ldr	r3, [pc, #604]	@ (80036ac <NLLS+0x1e54>)
 800344e:	443b      	add	r3, r7
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003458:	f852 2c34 	ldr.w	r2, [r2, #-52]
 800345c:	4413      	add	r3, r2
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4619      	mov	r1, r3
 8003462:	4b93      	ldr	r3, [pc, #588]	@ (80036b0 <NLLS+0x1e58>)
 8003464:	443b      	add	r3, r7
 8003466:	6818      	ldr	r0, [r3, #0]
 8003468:	f7fd fc32 	bl	8000cd0 <__aeabi_fsub>
 800346c:	4603      	mov	r3, r0
 800346e:	4619      	mov	r1, r3
 8003470:	4640      	mov	r0, r8
 8003472:	f7fd fd37 	bl	8000ee4 <__aeabi_fmul>
 8003476:	4603      	mov	r3, r0
 8003478:	4619      	mov	r1, r3
 800347a:	4630      	mov	r0, r6
 800347c:	f7fd fc28 	bl	8000cd0 <__aeabi_fsub>
 8003480:	4603      	mov	r3, r0
 8003482:	4619      	mov	r1, r3
 8003484:	4628      	mov	r0, r5
 8003486:	f7fd fd2d 	bl	8000ee4 <__aeabi_fmul>
 800348a:	4603      	mov	r3, r0
 800348c:	461d      	mov	r5, r3
 800348e:	4b89      	ldr	r3, [pc, #548]	@ (80036b4 <NLLS+0x1e5c>)
 8003490:	443b      	add	r3, r7
 8003492:	6819      	ldr	r1, [r3, #0]
 8003494:	4b87      	ldr	r3, [pc, #540]	@ (80036b4 <NLLS+0x1e5c>)
 8003496:	443b      	add	r3, r7
 8003498:	6818      	ldr	r0, [r3, #0]
 800349a:	f7fd fd23 	bl	8000ee4 <__aeabi_fmul>
 800349e:	4603      	mov	r3, r0
 80034a0:	4a85      	ldr	r2, [pc, #532]	@ (80036b8 <NLLS+0x1e60>)
 80034a2:	443a      	add	r2, r7
 80034a4:	6811      	ldr	r1, [r2, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fd fd1c 	bl	8000ee4 <__aeabi_fmul>
 80034ac:	4603      	mov	r3, r0
 80034ae:	4a83      	ldr	r2, [pc, #524]	@ (80036bc <NLLS+0x1e64>)
 80034b0:	443a      	add	r2, r7
 80034b2:	6811      	ldr	r1, [r2, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7fd fd15 	bl	8000ee4 <__aeabi_fmul>
 80034ba:	4603      	mov	r3, r0
 80034bc:	4a7f      	ldr	r2, [pc, #508]	@ (80036bc <NLLS+0x1e64>)
 80034be:	443a      	add	r2, r7
 80034c0:	6811      	ldr	r1, [r2, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fd fd0e 	bl	8000ee4 <__aeabi_fmul>
 80034c8:	4603      	mov	r3, r0
 80034ca:	4619      	mov	r1, r3
 80034cc:	4628      	mov	r0, r5
 80034ce:	f7fd fdbd 	bl	800104c <__aeabi_fdiv>
 80034d2:	4603      	mov	r3, r0
 80034d4:	4619      	mov	r1, r3
 80034d6:	4620      	mov	r0, r4
 80034d8:	f7fd fbfa 	bl	8000cd0 <__aeabi_fsub>
 80034dc:	4603      	mov	r3, r0
 80034de:	461c      	mov	r4, r3
 80034e0:	4b77      	ldr	r3, [pc, #476]	@ (80036c0 <NLLS+0x1e68>)
 80034e2:	443b      	add	r3, r7
 80034e4:	6819      	ldr	r1, [r3, #0]
 80034e6:	4b77      	ldr	r3, [pc, #476]	@ (80036c4 <NLLS+0x1e6c>)
 80034e8:	443b      	add	r3, r7
 80034ea:	6818      	ldr	r0, [r3, #0]
 80034ec:	f7fd fcfa 	bl	8000ee4 <__aeabi_fmul>
 80034f0:	4603      	mov	r3, r0
 80034f2:	461d      	mov	r5, r3
 80034f4:	4b71      	ldr	r3, [pc, #452]	@ (80036bc <NLLS+0x1e64>)
 80034f6:	443b      	add	r3, r7
 80034f8:	6819      	ldr	r1, [r3, #0]
 80034fa:	4b73      	ldr	r3, [pc, #460]	@ (80036c8 <NLLS+0x1e70>)
 80034fc:	443b      	add	r3, r7
 80034fe:	6818      	ldr	r0, [r3, #0]
 8003500:	f7fd fcf0 	bl	8000ee4 <__aeabi_fmul>
 8003504:	4603      	mov	r3, r0
 8003506:	4a71      	ldr	r2, [pc, #452]	@ (80036cc <NLLS+0x1e74>)
 8003508:	443a      	add	r2, r7
 800350a:	6811      	ldr	r1, [r2, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f7fd fce9 	bl	8000ee4 <__aeabi_fmul>
 8003512:	4603      	mov	r3, r0
 8003514:	4619      	mov	r1, r3
 8003516:	4628      	mov	r0, r5
 8003518:	f7fd fbda 	bl	8000cd0 <__aeabi_fsub>
 800351c:	4603      	mov	r3, r0
 800351e:	4619      	mov	r1, r3
 8003520:	4618      	mov	r0, r3
 8003522:	f7fd fbd7 	bl	8000cd4 <__addsf3>
 8003526:	4603      	mov	r3, r0
 8003528:	461d      	mov	r5, r3
 800352a:	4b69      	ldr	r3, [pc, #420]	@ (80036d0 <NLLS+0x1e78>)
 800352c:	443b      	add	r3, r7
 800352e:	6819      	ldr	r1, [r3, #0]
 8003530:	4b61      	ldr	r3, [pc, #388]	@ (80036b8 <NLLS+0x1e60>)
 8003532:	443b      	add	r3, r7
 8003534:	6818      	ldr	r0, [r3, #0]
 8003536:	f7fd fcd5 	bl	8000ee4 <__aeabi_fmul>
 800353a:	4603      	mov	r3, r0
 800353c:	461e      	mov	r6, r3
 800353e:	4b60      	ldr	r3, [pc, #384]	@ (80036c0 <NLLS+0x1e68>)
 8003540:	443b      	add	r3, r7
 8003542:	6819      	ldr	r1, [r3, #0]
 8003544:	4b5f      	ldr	r3, [pc, #380]	@ (80036c4 <NLLS+0x1e6c>)
 8003546:	443b      	add	r3, r7
 8003548:	6818      	ldr	r0, [r3, #0]
 800354a:	f7fd fccb 	bl	8000ee4 <__aeabi_fmul>
 800354e:	4603      	mov	r3, r0
 8003550:	4698      	mov	r8, r3
 8003552:	4b5a      	ldr	r3, [pc, #360]	@ (80036bc <NLLS+0x1e64>)
 8003554:	443b      	add	r3, r7
 8003556:	6819      	ldr	r1, [r3, #0]
 8003558:	4b5b      	ldr	r3, [pc, #364]	@ (80036c8 <NLLS+0x1e70>)
 800355a:	443b      	add	r3, r7
 800355c:	6818      	ldr	r0, [r3, #0]
 800355e:	f7fd fcc1 	bl	8000ee4 <__aeabi_fmul>
 8003562:	4603      	mov	r3, r0
 8003564:	4a59      	ldr	r2, [pc, #356]	@ (80036cc <NLLS+0x1e74>)
 8003566:	443a      	add	r2, r7
 8003568:	6811      	ldr	r1, [r2, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f7fd fcba 	bl	8000ee4 <__aeabi_fmul>
 8003570:	4603      	mov	r3, r0
 8003572:	4619      	mov	r1, r3
 8003574:	4640      	mov	r0, r8
 8003576:	f7fd fbab 	bl	8000cd0 <__aeabi_fsub>
 800357a:	4603      	mov	r3, r0
 800357c:	4619      	mov	r1, r3
 800357e:	4630      	mov	r0, r6
 8003580:	f7fd fcb0 	bl	8000ee4 <__aeabi_fmul>
 8003584:	4603      	mov	r3, r0
 8003586:	461e      	mov	r6, r3
 8003588:	4b48      	ldr	r3, [pc, #288]	@ (80036ac <NLLS+0x1e54>)
 800358a:	443b      	add	r3, r7
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003594:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8003598:	4413      	add	r3, r2
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4619      	mov	r1, r3
 800359e:	4b44      	ldr	r3, [pc, #272]	@ (80036b0 <NLLS+0x1e58>)
 80035a0:	443b      	add	r3, r7
 80035a2:	6818      	ldr	r0, [r3, #0]
 80035a4:	f7fd fb94 	bl	8000cd0 <__aeabi_fsub>
 80035a8:	4603      	mov	r3, r0
 80035aa:	4619      	mov	r1, r3
 80035ac:	4630      	mov	r0, r6
 80035ae:	f7fd fc99 	bl	8000ee4 <__aeabi_fmul>
 80035b2:	4603      	mov	r3, r0
 80035b4:	461e      	mov	r6, r3
 80035b6:	4b40      	ldr	r3, [pc, #256]	@ (80036b8 <NLLS+0x1e60>)
 80035b8:	443b      	add	r3, r7
 80035ba:	6819      	ldr	r1, [r3, #0]
 80035bc:	4b3d      	ldr	r3, [pc, #244]	@ (80036b4 <NLLS+0x1e5c>)
 80035be:	443b      	add	r3, r7
 80035c0:	6818      	ldr	r0, [r3, #0]
 80035c2:	f7fd fc8f 	bl	8000ee4 <__aeabi_fmul>
 80035c6:	4603      	mov	r3, r0
 80035c8:	4a3c      	ldr	r2, [pc, #240]	@ (80036bc <NLLS+0x1e64>)
 80035ca:	443a      	add	r2, r7
 80035cc:	6811      	ldr	r1, [r2, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fd fc88 	bl	8000ee4 <__aeabi_fmul>
 80035d4:	4603      	mov	r3, r0
 80035d6:	4698      	mov	r8, r3
 80035d8:	4b34      	ldr	r3, [pc, #208]	@ (80036ac <NLLS+0x1e54>)
 80035da:	443b      	add	r3, r7
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80035e4:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 80035e8:	4413      	add	r3, r2
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4619      	mov	r1, r3
 80035ee:	4b39      	ldr	r3, [pc, #228]	@ (80036d4 <NLLS+0x1e7c>)
 80035f0:	443b      	add	r3, r7
 80035f2:	6818      	ldr	r0, [r3, #0]
 80035f4:	f7fd fb6c 	bl	8000cd0 <__aeabi_fsub>
 80035f8:	4603      	mov	r3, r0
 80035fa:	4619      	mov	r1, r3
 80035fc:	4640      	mov	r0, r8
 80035fe:	f7fd fc71 	bl	8000ee4 <__aeabi_fmul>
 8003602:	4603      	mov	r3, r0
 8003604:	4619      	mov	r1, r3
 8003606:	4630      	mov	r0, r6
 8003608:	f7fd fb64 	bl	8000cd4 <__addsf3>
 800360c:	4603      	mov	r3, r0
 800360e:	461e      	mov	r6, r3
 8003610:	4b2f      	ldr	r3, [pc, #188]	@ (80036d0 <NLLS+0x1e78>)
 8003612:	443b      	add	r3, r7
 8003614:	6819      	ldr	r1, [r3, #0]
 8003616:	4b27      	ldr	r3, [pc, #156]	@ (80036b4 <NLLS+0x1e5c>)
 8003618:	443b      	add	r3, r7
 800361a:	6818      	ldr	r0, [r3, #0]
 800361c:	f7fd fc62 	bl	8000ee4 <__aeabi_fmul>
 8003620:	4603      	mov	r3, r0
 8003622:	4a28      	ldr	r2, [pc, #160]	@ (80036c4 <NLLS+0x1e6c>)
 8003624:	443a      	add	r2, r7
 8003626:	6811      	ldr	r1, [r2, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f7fd fc5b 	bl	8000ee4 <__aeabi_fmul>
 800362e:	4603      	mov	r3, r0
 8003630:	4698      	mov	r8, r3
 8003632:	4b1e      	ldr	r3, [pc, #120]	@ (80036ac <NLLS+0x1e54>)
 8003634:	443b      	add	r3, r7
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800363e:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8003642:	4413      	add	r3, r2
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4619      	mov	r1, r3
 8003648:	4b23      	ldr	r3, [pc, #140]	@ (80036d8 <NLLS+0x1e80>)
 800364a:	443b      	add	r3, r7
 800364c:	6818      	ldr	r0, [r3, #0]
 800364e:	f7fd fb3f 	bl	8000cd0 <__aeabi_fsub>
 8003652:	4603      	mov	r3, r0
 8003654:	4619      	mov	r1, r3
 8003656:	4640      	mov	r0, r8
 8003658:	f7fd fc44 	bl	8000ee4 <__aeabi_fmul>
 800365c:	4603      	mov	r3, r0
 800365e:	4619      	mov	r1, r3
 8003660:	4630      	mov	r0, r6
 8003662:	f7fd fb35 	bl	8000cd0 <__aeabi_fsub>
 8003666:	4603      	mov	r3, r0
 8003668:	4619      	mov	r1, r3
 800366a:	4628      	mov	r0, r5
 800366c:	f7fd fc3a 	bl	8000ee4 <__aeabi_fmul>
 8003670:	4603      	mov	r3, r0
 8003672:	461d      	mov	r5, r3
 8003674:	4b0f      	ldr	r3, [pc, #60]	@ (80036b4 <NLLS+0x1e5c>)
 8003676:	443b      	add	r3, r7
 8003678:	6819      	ldr	r1, [r3, #0]
 800367a:	4b0e      	ldr	r3, [pc, #56]	@ (80036b4 <NLLS+0x1e5c>)
 800367c:	443b      	add	r3, r7
 800367e:	6818      	ldr	r0, [r3, #0]
 8003680:	f7fd fc30 	bl	8000ee4 <__aeabi_fmul>
 8003684:	4603      	mov	r3, r0
 8003686:	4a0c      	ldr	r2, [pc, #48]	@ (80036b8 <NLLS+0x1e60>)
 8003688:	443a      	add	r2, r7
 800368a:	6811      	ldr	r1, [r2, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f7fd fc29 	bl	8000ee4 <__aeabi_fmul>
 8003692:	4603      	mov	r3, r0
 8003694:	4a0e      	ldr	r2, [pc, #56]	@ (80036d0 <NLLS+0x1e78>)
 8003696:	443a      	add	r2, r7
 8003698:	6811      	ldr	r1, [r2, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f7fd fc22 	bl	8000ee4 <__aeabi_fmul>
 80036a0:	4603      	mov	r3, r0
 80036a2:	4a09      	ldr	r2, [pc, #36]	@ (80036c8 <NLLS+0x1e70>)
 80036a4:	443a      	add	r2, r7
 80036a6:	6811      	ldr	r1, [r2, #0]
 80036a8:	e018      	b.n	80036dc <NLLS+0x1e84>
 80036aa:	bf00      	nop
 80036ac:	00017008 	.word	0x00017008
 80036b0:	0001702c 	.word	0x0001702c
 80036b4:	00017038 	.word	0x00017038
 80036b8:	00017034 	.word	0x00017034
 80036bc:	00016fc8 	.word	0x00016fc8
 80036c0:	00016fd4 	.word	0x00016fd4
 80036c4:	00016fd0 	.word	0x00016fd0
 80036c8:	00016fc4 	.word	0x00016fc4
 80036cc:	00016fd8 	.word	0x00016fd8
 80036d0:	00017030 	.word	0x00017030
 80036d4:	00017024 	.word	0x00017024
 80036d8:	00017028 	.word	0x00017028
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fd fc01 	bl	8000ee4 <__aeabi_fmul>
 80036e2:	4603      	mov	r3, r0
 80036e4:	4a98      	ldr	r2, [pc, #608]	@ (8003948 <NLLS+0x20f0>)
 80036e6:	443a      	add	r2, r7
 80036e8:	6811      	ldr	r1, [r2, #0]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fd fbfa 	bl	8000ee4 <__aeabi_fmul>
 80036f0:	4603      	mov	r3, r0
 80036f2:	4619      	mov	r1, r3
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7fd faed 	bl	8000cd4 <__addsf3>
 80036fa:	4603      	mov	r3, r0
 80036fc:	4a93      	ldr	r2, [pc, #588]	@ (800394c <NLLS+0x20f4>)
 80036fe:	443a      	add	r2, r7
 8003700:	6811      	ldr	r1, [r2, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f7fd fbee 	bl	8000ee4 <__aeabi_fmul>
 8003708:	4603      	mov	r3, r0
 800370a:	4a90      	ldr	r2, [pc, #576]	@ (800394c <NLLS+0x20f4>)
 800370c:	443a      	add	r2, r7
 800370e:	6811      	ldr	r1, [r2, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f7fd fbe7 	bl	8000ee4 <__aeabi_fmul>
 8003716:	4603      	mov	r3, r0
 8003718:	4a8d      	ldr	r2, [pc, #564]	@ (8003950 <NLLS+0x20f8>)
 800371a:	443a      	add	r2, r7
 800371c:	6811      	ldr	r1, [r2, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f7fd fbe0 	bl	8000ee4 <__aeabi_fmul>
 8003724:	4603      	mov	r3, r0
 8003726:	4a8a      	ldr	r2, [pc, #552]	@ (8003950 <NLLS+0x20f8>)
 8003728:	443a      	add	r2, r7
 800372a:	6811      	ldr	r1, [r2, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f7fd fbd9 	bl	8000ee4 <__aeabi_fmul>
 8003732:	4603      	mov	r3, r0
 8003734:	4619      	mov	r1, r3
 8003736:	4628      	mov	r0, r5
 8003738:	f7fd fc88 	bl	800104c <__aeabi_fdiv>
 800373c:	4603      	mov	r3, r0
 800373e:	4619      	mov	r1, r3
 8003740:	4620      	mov	r0, r4
 8003742:	f7fd fac7 	bl	8000cd4 <__addsf3>
 8003746:	4603      	mov	r3, r0
 8003748:	4619      	mov	r1, r3
 800374a:	f24a 0340 	movw	r3, #41024	@ 0xa040
 800374e:	443b      	add	r3, r7
 8003750:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003754:	4a7f      	ldr	r2, [pc, #508]	@ (8003954 <NLLS+0x20fc>)
 8003756:	443a      	add	r2, r7
 8003758:	6812      	ldr	r2, [r2, #0]
 800375a:	f602 5208 	addw	r2, r2, #3336	@ 0xd08
 800375e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			mat_H[4][i] = (2*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i])))/(sx*sy*sy*cos_rho*cos_rho) - (2*sin_lambda*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sy*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8003762:	4b7c      	ldr	r3, [pc, #496]	@ (8003954 <NLLS+0x20fc>)
 8003764:	443b      	add	r3, r7
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800376e:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8003772:	4413      	add	r3, r2
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4619      	mov	r1, r3
 8003778:	4b77      	ldr	r3, [pc, #476]	@ (8003958 <NLLS+0x2100>)
 800377a:	443b      	add	r3, r7
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	f7fd faa7 	bl	8000cd0 <__aeabi_fsub>
 8003782:	4603      	mov	r3, r0
 8003784:	4a75      	ldr	r2, [pc, #468]	@ (800395c <NLLS+0x2104>)
 8003786:	443a      	add	r2, r7
 8003788:	6811      	ldr	r1, [r2, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f7fd fbaa 	bl	8000ee4 <__aeabi_fmul>
 8003790:	4603      	mov	r3, r0
 8003792:	461c      	mov	r4, r3
 8003794:	4b72      	ldr	r3, [pc, #456]	@ (8003960 <NLLS+0x2108>)
 8003796:	443b      	add	r3, r7
 8003798:	6819      	ldr	r1, [r3, #0]
 800379a:	4b72      	ldr	r3, [pc, #456]	@ (8003964 <NLLS+0x210c>)
 800379c:	443b      	add	r3, r7
 800379e:	6818      	ldr	r0, [r3, #0]
 80037a0:	f7fd fba0 	bl	8000ee4 <__aeabi_fmul>
 80037a4:	4603      	mov	r3, r0
 80037a6:	461d      	mov	r5, r3
 80037a8:	4b6a      	ldr	r3, [pc, #424]	@ (8003954 <NLLS+0x20fc>)
 80037aa:	443b      	add	r3, r7
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80037b4:	f852 2c34 	ldr.w	r2, [r2, #-52]
 80037b8:	4413      	add	r3, r2
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4619      	mov	r1, r3
 80037be:	4b6a      	ldr	r3, [pc, #424]	@ (8003968 <NLLS+0x2110>)
 80037c0:	443b      	add	r3, r7
 80037c2:	6818      	ldr	r0, [r3, #0]
 80037c4:	f7fd fa84 	bl	8000cd0 <__aeabi_fsub>
 80037c8:	4603      	mov	r3, r0
 80037ca:	4619      	mov	r1, r3
 80037cc:	4628      	mov	r0, r5
 80037ce:	f7fd fb89 	bl	8000ee4 <__aeabi_fmul>
 80037d2:	4603      	mov	r3, r0
 80037d4:	4619      	mov	r1, r3
 80037d6:	4620      	mov	r0, r4
 80037d8:	f7fd fa7a 	bl	8000cd0 <__aeabi_fsub>
 80037dc:	4603      	mov	r3, r0
 80037de:	4619      	mov	r1, r3
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7fd fa77 	bl	8000cd4 <__addsf3>
 80037e6:	4603      	mov	r3, r0
 80037e8:	461c      	mov	r4, r3
 80037ea:	4b5e      	ldr	r3, [pc, #376]	@ (8003964 <NLLS+0x210c>)
 80037ec:	443b      	add	r3, r7
 80037ee:	6819      	ldr	r1, [r3, #0]
 80037f0:	4b5a      	ldr	r3, [pc, #360]	@ (800395c <NLLS+0x2104>)
 80037f2:	443b      	add	r3, r7
 80037f4:	6818      	ldr	r0, [r3, #0]
 80037f6:	f7fd fb75 	bl	8000ee4 <__aeabi_fmul>
 80037fa:	4603      	mov	r3, r0
 80037fc:	4a59      	ldr	r2, [pc, #356]	@ (8003964 <NLLS+0x210c>)
 80037fe:	443a      	add	r2, r7
 8003800:	6811      	ldr	r1, [r2, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f7fd fb6e 	bl	8000ee4 <__aeabi_fmul>
 8003808:	4603      	mov	r3, r0
 800380a:	4a51      	ldr	r2, [pc, #324]	@ (8003950 <NLLS+0x20f8>)
 800380c:	443a      	add	r2, r7
 800380e:	6811      	ldr	r1, [r2, #0]
 8003810:	4618      	mov	r0, r3
 8003812:	f7fd fb67 	bl	8000ee4 <__aeabi_fmul>
 8003816:	4603      	mov	r3, r0
 8003818:	4a4d      	ldr	r2, [pc, #308]	@ (8003950 <NLLS+0x20f8>)
 800381a:	443a      	add	r2, r7
 800381c:	6811      	ldr	r1, [r2, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f7fd fb60 	bl	8000ee4 <__aeabi_fmul>
 8003824:	4603      	mov	r3, r0
 8003826:	4619      	mov	r1, r3
 8003828:	4620      	mov	r0, r4
 800382a:	f7fd fc0f 	bl	800104c <__aeabi_fdiv>
 800382e:	4603      	mov	r3, r0
 8003830:	461c      	mov	r4, r3
 8003832:	4b4e      	ldr	r3, [pc, #312]	@ (800396c <NLLS+0x2114>)
 8003834:	443b      	add	r3, r7
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4619      	mov	r1, r3
 800383a:	4618      	mov	r0, r3
 800383c:	f7fd fa4a 	bl	8000cd4 <__addsf3>
 8003840:	4603      	mov	r3, r0
 8003842:	461d      	mov	r5, r3
 8003844:	4b4a      	ldr	r3, [pc, #296]	@ (8003970 <NLLS+0x2118>)
 8003846:	443b      	add	r3, r7
 8003848:	6819      	ldr	r1, [r3, #0]
 800384a:	4b46      	ldr	r3, [pc, #280]	@ (8003964 <NLLS+0x210c>)
 800384c:	443b      	add	r3, r7
 800384e:	6818      	ldr	r0, [r3, #0]
 8003850:	f7fd fb48 	bl	8000ee4 <__aeabi_fmul>
 8003854:	4603      	mov	r3, r0
 8003856:	461e      	mov	r6, r3
 8003858:	4b41      	ldr	r3, [pc, #260]	@ (8003960 <NLLS+0x2108>)
 800385a:	443b      	add	r3, r7
 800385c:	6819      	ldr	r1, [r3, #0]
 800385e:	4b43      	ldr	r3, [pc, #268]	@ (800396c <NLLS+0x2114>)
 8003860:	443b      	add	r3, r7
 8003862:	6818      	ldr	r0, [r3, #0]
 8003864:	f7fd fb3e 	bl	8000ee4 <__aeabi_fmul>
 8003868:	4603      	mov	r3, r0
 800386a:	4698      	mov	r8, r3
 800386c:	4b38      	ldr	r3, [pc, #224]	@ (8003950 <NLLS+0x20f8>)
 800386e:	443b      	add	r3, r7
 8003870:	6819      	ldr	r1, [r3, #0]
 8003872:	4b35      	ldr	r3, [pc, #212]	@ (8003948 <NLLS+0x20f0>)
 8003874:	443b      	add	r3, r7
 8003876:	6818      	ldr	r0, [r3, #0]
 8003878:	f7fd fb34 	bl	8000ee4 <__aeabi_fmul>
 800387c:	4603      	mov	r3, r0
 800387e:	4a3d      	ldr	r2, [pc, #244]	@ (8003974 <NLLS+0x211c>)
 8003880:	443a      	add	r2, r7
 8003882:	6811      	ldr	r1, [r2, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f7fd fb2d 	bl	8000ee4 <__aeabi_fmul>
 800388a:	4603      	mov	r3, r0
 800388c:	4619      	mov	r1, r3
 800388e:	4640      	mov	r0, r8
 8003890:	f7fd fa1e 	bl	8000cd0 <__aeabi_fsub>
 8003894:	4603      	mov	r3, r0
 8003896:	4619      	mov	r1, r3
 8003898:	4630      	mov	r0, r6
 800389a:	f7fd fb23 	bl	8000ee4 <__aeabi_fmul>
 800389e:	4603      	mov	r3, r0
 80038a0:	461e      	mov	r6, r3
 80038a2:	4b2c      	ldr	r3, [pc, #176]	@ (8003954 <NLLS+0x20fc>)
 80038a4:	443b      	add	r3, r7
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80038ae:	f852 2c34 	ldr.w	r2, [r2, #-52]
 80038b2:	4413      	add	r3, r2
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4619      	mov	r1, r3
 80038b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003968 <NLLS+0x2110>)
 80038ba:	443b      	add	r3, r7
 80038bc:	6818      	ldr	r0, [r3, #0]
 80038be:	f7fd fa07 	bl	8000cd0 <__aeabi_fsub>
 80038c2:	4603      	mov	r3, r0
 80038c4:	4619      	mov	r1, r3
 80038c6:	4630      	mov	r0, r6
 80038c8:	f7fd fb0c 	bl	8000ee4 <__aeabi_fmul>
 80038cc:	4603      	mov	r3, r0
 80038ce:	461e      	mov	r6, r3
 80038d0:	4b24      	ldr	r3, [pc, #144]	@ (8003964 <NLLS+0x210c>)
 80038d2:	443b      	add	r3, r7
 80038d4:	6819      	ldr	r1, [r3, #0]
 80038d6:	4b21      	ldr	r3, [pc, #132]	@ (800395c <NLLS+0x2104>)
 80038d8:	443b      	add	r3, r7
 80038da:	6818      	ldr	r0, [r3, #0]
 80038dc:	f7fd fb02 	bl	8000ee4 <__aeabi_fmul>
 80038e0:	4603      	mov	r3, r0
 80038e2:	4a1b      	ldr	r2, [pc, #108]	@ (8003950 <NLLS+0x20f8>)
 80038e4:	443a      	add	r2, r7
 80038e6:	6811      	ldr	r1, [r2, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fd fafb 	bl	8000ee4 <__aeabi_fmul>
 80038ee:	4603      	mov	r3, r0
 80038f0:	4698      	mov	r8, r3
 80038f2:	4b18      	ldr	r3, [pc, #96]	@ (8003954 <NLLS+0x20fc>)
 80038f4:	443b      	add	r3, r7
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80038fe:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8003902:	4413      	add	r3, r2
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4619      	mov	r1, r3
 8003908:	4b1b      	ldr	r3, [pc, #108]	@ (8003978 <NLLS+0x2120>)
 800390a:	443b      	add	r3, r7
 800390c:	6818      	ldr	r0, [r3, #0]
 800390e:	f7fd f9df 	bl	8000cd0 <__aeabi_fsub>
 8003912:	4603      	mov	r3, r0
 8003914:	4619      	mov	r1, r3
 8003916:	4640      	mov	r0, r8
 8003918:	f7fd fae4 	bl	8000ee4 <__aeabi_fmul>
 800391c:	4603      	mov	r3, r0
 800391e:	4619      	mov	r1, r3
 8003920:	4630      	mov	r0, r6
 8003922:	f7fd f9d7 	bl	8000cd4 <__addsf3>
 8003926:	4603      	mov	r3, r0
 8003928:	461e      	mov	r6, r3
 800392a:	4b11      	ldr	r3, [pc, #68]	@ (8003970 <NLLS+0x2118>)
 800392c:	443b      	add	r3, r7
 800392e:	6819      	ldr	r1, [r3, #0]
 8003930:	4b0a      	ldr	r3, [pc, #40]	@ (800395c <NLLS+0x2104>)
 8003932:	443b      	add	r3, r7
 8003934:	6818      	ldr	r0, [r3, #0]
 8003936:	f7fd fad5 	bl	8000ee4 <__aeabi_fmul>
 800393a:	4603      	mov	r3, r0
 800393c:	4a0b      	ldr	r2, [pc, #44]	@ (800396c <NLLS+0x2114>)
 800393e:	443a      	add	r2, r7
 8003940:	6811      	ldr	r1, [r2, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	e01a      	b.n	800397c <NLLS+0x2124>
 8003946:	bf00      	nop
 8003948:	00016fc4 	.word	0x00016fc4
 800394c:	00016fcc 	.word	0x00016fcc
 8003950:	00016fc8 	.word	0x00016fc8
 8003954:	00017008 	.word	0x00017008
 8003958:	00017028 	.word	0x00017028
 800395c:	00017038 	.word	0x00017038
 8003960:	00016fd4 	.word	0x00016fd4
 8003964:	00017034 	.word	0x00017034
 8003968:	0001702c 	.word	0x0001702c
 800396c:	00016fd0 	.word	0x00016fd0
 8003970:	00017030 	.word	0x00017030
 8003974:	00016fd8 	.word	0x00016fd8
 8003978:	00017024 	.word	0x00017024
 800397c:	f7fd fab2 	bl	8000ee4 <__aeabi_fmul>
 8003980:	4603      	mov	r3, r0
 8003982:	4698      	mov	r8, r3
 8003984:	4b98      	ldr	r3, [pc, #608]	@ (8003be8 <NLLS+0x2390>)
 8003986:	443b      	add	r3, r7
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003990:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8003994:	4413      	add	r3, r2
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4619      	mov	r1, r3
 800399a:	4b94      	ldr	r3, [pc, #592]	@ (8003bec <NLLS+0x2394>)
 800399c:	443b      	add	r3, r7
 800399e:	6818      	ldr	r0, [r3, #0]
 80039a0:	f7fd f996 	bl	8000cd0 <__aeabi_fsub>
 80039a4:	4603      	mov	r3, r0
 80039a6:	4619      	mov	r1, r3
 80039a8:	4640      	mov	r0, r8
 80039aa:	f7fd fa9b 	bl	8000ee4 <__aeabi_fmul>
 80039ae:	4603      	mov	r3, r0
 80039b0:	4619      	mov	r1, r3
 80039b2:	4630      	mov	r0, r6
 80039b4:	f7fd f98c 	bl	8000cd0 <__aeabi_fsub>
 80039b8:	4603      	mov	r3, r0
 80039ba:	4619      	mov	r1, r3
 80039bc:	4628      	mov	r0, r5
 80039be:	f7fd fa91 	bl	8000ee4 <__aeabi_fmul>
 80039c2:	4603      	mov	r3, r0
 80039c4:	461d      	mov	r5, r3
 80039c6:	4b8a      	ldr	r3, [pc, #552]	@ (8003bf0 <NLLS+0x2398>)
 80039c8:	443b      	add	r3, r7
 80039ca:	6819      	ldr	r1, [r3, #0]
 80039cc:	4b89      	ldr	r3, [pc, #548]	@ (8003bf4 <NLLS+0x239c>)
 80039ce:	443b      	add	r3, r7
 80039d0:	6818      	ldr	r0, [r3, #0]
 80039d2:	f7fd fa87 	bl	8000ee4 <__aeabi_fmul>
 80039d6:	4603      	mov	r3, r0
 80039d8:	4a85      	ldr	r2, [pc, #532]	@ (8003bf0 <NLLS+0x2398>)
 80039da:	443a      	add	r2, r7
 80039dc:	6811      	ldr	r1, [r2, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fd fa80 	bl	8000ee4 <__aeabi_fmul>
 80039e4:	4603      	mov	r3, r0
 80039e6:	4a84      	ldr	r2, [pc, #528]	@ (8003bf8 <NLLS+0x23a0>)
 80039e8:	443a      	add	r2, r7
 80039ea:	6811      	ldr	r1, [r2, #0]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7fd fa79 	bl	8000ee4 <__aeabi_fmul>
 80039f2:	4603      	mov	r3, r0
 80039f4:	4a81      	ldr	r2, [pc, #516]	@ (8003bfc <NLLS+0x23a4>)
 80039f6:	443a      	add	r2, r7
 80039f8:	6811      	ldr	r1, [r2, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fd fa72 	bl	8000ee4 <__aeabi_fmul>
 8003a00:	4603      	mov	r3, r0
 8003a02:	4a7e      	ldr	r2, [pc, #504]	@ (8003bfc <NLLS+0x23a4>)
 8003a04:	443a      	add	r2, r7
 8003a06:	6811      	ldr	r1, [r2, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7fd fa6b 	bl	8000ee4 <__aeabi_fmul>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	4a7b      	ldr	r2, [pc, #492]	@ (8003c00 <NLLS+0x23a8>)
 8003a12:	443a      	add	r2, r7
 8003a14:	6811      	ldr	r1, [r2, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fd fa64 	bl	8000ee4 <__aeabi_fmul>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	4a78      	ldr	r2, [pc, #480]	@ (8003c00 <NLLS+0x23a8>)
 8003a20:	443a      	add	r2, r7
 8003a22:	6811      	ldr	r1, [r2, #0]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7fd fa5d 	bl	8000ee4 <__aeabi_fmul>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	4a75      	ldr	r2, [pc, #468]	@ (8003c04 <NLLS+0x23ac>)
 8003a2e:	443a      	add	r2, r7
 8003a30:	6811      	ldr	r1, [r2, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fd fa56 	bl	8000ee4 <__aeabi_fmul>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	4a72      	ldr	r2, [pc, #456]	@ (8003c04 <NLLS+0x23ac>)
 8003a3c:	443a      	add	r2, r7
 8003a3e:	6811      	ldr	r1, [r2, #0]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fd fa4f 	bl	8000ee4 <__aeabi_fmul>
 8003a46:	4603      	mov	r3, r0
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4628      	mov	r0, r5
 8003a4c:	f7fd fafe 	bl	800104c <__aeabi_fdiv>
 8003a50:	4603      	mov	r3, r0
 8003a52:	4619      	mov	r1, r3
 8003a54:	4620      	mov	r0, r4
 8003a56:	f7fd f93b 	bl	8000cd0 <__aeabi_fsub>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	f24a 0340 	movw	r3, #41024	@ 0xa040
 8003a62:	443b      	add	r3, r7
 8003a64:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003a68:	4a5f      	ldr	r2, [pc, #380]	@ (8003be8 <NLLS+0x2390>)
 8003a6a:	443a      	add	r2, r7
 8003a6c:	6812      	ldr	r2, [r2, #0]
 8003a6e:	f502 528b 	add.w	r2, r2, #4448	@ 0x1160
 8003a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			mat_H[5][i] = (2*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho);
 8003a76:	4b60      	ldr	r3, [pc, #384]	@ (8003bf8 <NLLS+0x23a0>)
 8003a78:	443b      	add	r3, r7
 8003a7a:	6819      	ldr	r1, [r3, #0]
 8003a7c:	4b5c      	ldr	r3, [pc, #368]	@ (8003bf0 <NLLS+0x2398>)
 8003a7e:	443b      	add	r3, r7
 8003a80:	6818      	ldr	r0, [r3, #0]
 8003a82:	f7fd fa2f 	bl	8000ee4 <__aeabi_fmul>
 8003a86:	4603      	mov	r3, r0
 8003a88:	461c      	mov	r4, r3
 8003a8a:	4b5f      	ldr	r3, [pc, #380]	@ (8003c08 <NLLS+0x23b0>)
 8003a8c:	443b      	add	r3, r7
 8003a8e:	6819      	ldr	r1, [r3, #0]
 8003a90:	4b5e      	ldr	r3, [pc, #376]	@ (8003c0c <NLLS+0x23b4>)
 8003a92:	443b      	add	r3, r7
 8003a94:	6818      	ldr	r0, [r3, #0]
 8003a96:	f7fd fa25 	bl	8000ee4 <__aeabi_fmul>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	461d      	mov	r5, r3
 8003a9e:	4b59      	ldr	r3, [pc, #356]	@ (8003c04 <NLLS+0x23ac>)
 8003aa0:	443b      	add	r3, r7
 8003aa2:	6819      	ldr	r1, [r3, #0]
 8003aa4:	4b55      	ldr	r3, [pc, #340]	@ (8003bfc <NLLS+0x23a4>)
 8003aa6:	443b      	add	r3, r7
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	f7fd fa1b 	bl	8000ee4 <__aeabi_fmul>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	4a57      	ldr	r2, [pc, #348]	@ (8003c10 <NLLS+0x23b8>)
 8003ab2:	443a      	add	r2, r7
 8003ab4:	6811      	ldr	r1, [r2, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7fd fa14 	bl	8000ee4 <__aeabi_fmul>
 8003abc:	4603      	mov	r3, r0
 8003abe:	4619      	mov	r1, r3
 8003ac0:	4628      	mov	r0, r5
 8003ac2:	f7fd f905 	bl	8000cd0 <__aeabi_fsub>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4620      	mov	r0, r4
 8003acc:	f7fd fa0a 	bl	8000ee4 <__aeabi_fmul>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	461c      	mov	r4, r3
 8003ad4:	4b44      	ldr	r3, [pc, #272]	@ (8003be8 <NLLS+0x2390>)
 8003ad6:	443b      	add	r3, r7
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003ae0:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4b4a      	ldr	r3, [pc, #296]	@ (8003c14 <NLLS+0x23bc>)
 8003aec:	443b      	add	r3, r7
 8003aee:	6818      	ldr	r0, [r3, #0]
 8003af0:	f7fd f8ee 	bl	8000cd0 <__aeabi_fsub>
 8003af4:	4603      	mov	r3, r0
 8003af6:	4619      	mov	r1, r3
 8003af8:	4620      	mov	r0, r4
 8003afa:	f7fd f9f3 	bl	8000ee4 <__aeabi_fmul>
 8003afe:	4603      	mov	r3, r0
 8003b00:	461c      	mov	r4, r3
 8003b02:	4b3b      	ldr	r3, [pc, #236]	@ (8003bf0 <NLLS+0x2398>)
 8003b04:	443b      	add	r3, r7
 8003b06:	6819      	ldr	r1, [r3, #0]
 8003b08:	4b3a      	ldr	r3, [pc, #232]	@ (8003bf4 <NLLS+0x239c>)
 8003b0a:	443b      	add	r3, r7
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	f7fd f9e9 	bl	8000ee4 <__aeabi_fmul>
 8003b12:	4603      	mov	r3, r0
 8003b14:	4a3b      	ldr	r2, [pc, #236]	@ (8003c04 <NLLS+0x23ac>)
 8003b16:	443a      	add	r2, r7
 8003b18:	6811      	ldr	r1, [r2, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fd f9e2 	bl	8000ee4 <__aeabi_fmul>
 8003b20:	4603      	mov	r3, r0
 8003b22:	461d      	mov	r5, r3
 8003b24:	4b30      	ldr	r3, [pc, #192]	@ (8003be8 <NLLS+0x2390>)
 8003b26:	443b      	add	r3, r7
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003b30:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8003b34:	4413      	add	r3, r2
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4b37      	ldr	r3, [pc, #220]	@ (8003c18 <NLLS+0x23c0>)
 8003b3c:	443b      	add	r3, r7
 8003b3e:	6818      	ldr	r0, [r3, #0]
 8003b40:	f7fd f8c6 	bl	8000cd0 <__aeabi_fsub>
 8003b44:	4603      	mov	r3, r0
 8003b46:	4619      	mov	r1, r3
 8003b48:	4628      	mov	r0, r5
 8003b4a:	f7fd f9cb 	bl	8000ee4 <__aeabi_fmul>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	4619      	mov	r1, r3
 8003b52:	4620      	mov	r0, r4
 8003b54:	f7fd f8be 	bl	8000cd4 <__addsf3>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	461c      	mov	r4, r3
 8003b5c:	4b26      	ldr	r3, [pc, #152]	@ (8003bf8 <NLLS+0x23a0>)
 8003b5e:	443b      	add	r3, r7
 8003b60:	6819      	ldr	r1, [r3, #0]
 8003b62:	4b24      	ldr	r3, [pc, #144]	@ (8003bf4 <NLLS+0x239c>)
 8003b64:	443b      	add	r3, r7
 8003b66:	6818      	ldr	r0, [r3, #0]
 8003b68:	f7fd f9bc 	bl	8000ee4 <__aeabi_fmul>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	4a27      	ldr	r2, [pc, #156]	@ (8003c0c <NLLS+0x23b4>)
 8003b70:	443a      	add	r2, r7
 8003b72:	6811      	ldr	r1, [r2, #0]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7fd f9b5 	bl	8000ee4 <__aeabi_fmul>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	461d      	mov	r5, r3
 8003b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8003be8 <NLLS+0x2390>)
 8003b80:	443b      	add	r3, r7
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003b8a:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8003b8e:	4413      	add	r3, r2
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4619      	mov	r1, r3
 8003b94:	4b15      	ldr	r3, [pc, #84]	@ (8003bec <NLLS+0x2394>)
 8003b96:	443b      	add	r3, r7
 8003b98:	6818      	ldr	r0, [r3, #0]
 8003b9a:	f7fd f899 	bl	8000cd0 <__aeabi_fsub>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	4628      	mov	r0, r5
 8003ba4:	f7fd f99e 	bl	8000ee4 <__aeabi_fmul>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	4619      	mov	r1, r3
 8003bac:	4620      	mov	r0, r4
 8003bae:	f7fd f88f 	bl	8000cd0 <__aeabi_fsub>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fd f88c 	bl	8000cd4 <__addsf3>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	461c      	mov	r4, r3
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf0 <NLLS+0x2398>)
 8003bc2:	443b      	add	r3, r7
 8003bc4:	6819      	ldr	r1, [r3, #0]
 8003bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf4 <NLLS+0x239c>)
 8003bc8:	443b      	add	r3, r7
 8003bca:	6818      	ldr	r0, [r3, #0]
 8003bcc:	f7fd f98a 	bl	8000ee4 <__aeabi_fmul>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	4a09      	ldr	r2, [pc, #36]	@ (8003bf8 <NLLS+0x23a0>)
 8003bd4:	443a      	add	r2, r7
 8003bd6:	6811      	ldr	r1, [r2, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fd f983 	bl	8000ee4 <__aeabi_fmul>
 8003bde:	4603      	mov	r3, r0
 8003be0:	4a05      	ldr	r2, [pc, #20]	@ (8003bf8 <NLLS+0x23a0>)
 8003be2:	443a      	add	r2, r7
 8003be4:	6811      	ldr	r1, [r2, #0]
 8003be6:	e019      	b.n	8003c1c <NLLS+0x23c4>
 8003be8:	00017008 	.word	0x00017008
 8003bec:	00017028 	.word	0x00017028
 8003bf0:	00017034 	.word	0x00017034
 8003bf4:	00017038 	.word	0x00017038
 8003bf8:	00017030 	.word	0x00017030
 8003bfc:	00016fc4 	.word	0x00016fc4
 8003c00:	00016fcc 	.word	0x00016fcc
 8003c04:	00016fc8 	.word	0x00016fc8
 8003c08:	00016fd4 	.word	0x00016fd4
 8003c0c:	00016fd0 	.word	0x00016fd0
 8003c10:	00016fd8 	.word	0x00016fd8
 8003c14:	0001702c 	.word	0x0001702c
 8003c18:	00017024 	.word	0x00017024
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7fd f961 	bl	8000ee4 <__aeabi_fmul>
 8003c22:	4603      	mov	r3, r0
 8003c24:	4a98      	ldr	r2, [pc, #608]	@ (8003e88 <NLLS+0x2630>)
 8003c26:	443a      	add	r2, r7
 8003c28:	6811      	ldr	r1, [r2, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fd f95a 	bl	8000ee4 <__aeabi_fmul>
 8003c30:	4603      	mov	r3, r0
 8003c32:	4a95      	ldr	r2, [pc, #596]	@ (8003e88 <NLLS+0x2630>)
 8003c34:	443a      	add	r2, r7
 8003c36:	6811      	ldr	r1, [r2, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fd f953 	bl	8000ee4 <__aeabi_fmul>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	4a92      	ldr	r2, [pc, #584]	@ (8003e8c <NLLS+0x2634>)
 8003c42:	443a      	add	r2, r7
 8003c44:	6811      	ldr	r1, [r2, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fd f94c 	bl	8000ee4 <__aeabi_fmul>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	4a8f      	ldr	r2, [pc, #572]	@ (8003e8c <NLLS+0x2634>)
 8003c50:	443a      	add	r2, r7
 8003c52:	6811      	ldr	r1, [r2, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fd f945 	bl	8000ee4 <__aeabi_fmul>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	4a8c      	ldr	r2, [pc, #560]	@ (8003e90 <NLLS+0x2638>)
 8003c5e:	443a      	add	r2, r7
 8003c60:	6811      	ldr	r1, [r2, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fd f93e 	bl	8000ee4 <__aeabi_fmul>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	f7fd f9ed 	bl	800104c <__aeabi_fdiv>
 8003c72:	4603      	mov	r3, r0
 8003c74:	4618      	mov	r0, r3
 8003c76:	f24a 0340 	movw	r3, #41024	@ 0xa040
 8003c7a:	443b      	add	r3, r7
 8003c7c:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8003c80:	4b84      	ldr	r3, [pc, #528]	@ (8003e94 <NLLS+0x263c>)
 8003c82:	443b      	add	r3, r7
 8003c84:	6819      	ldr	r1, [r3, #0]
 8003c86:	f241 53b8 	movw	r3, #5560	@ 0x15b8
 8003c8a:	440b      	add	r3, r1
 8003c8c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]

			mat_H[6][i] = -(2*(bx*sy - mx[i]*sy - by*sx*sin_rho + my[i]*sx*sin_rho)*(by*sx*sz*sin_lambda*sin_lambda - my[i]*sx*sz*sin_lambda*sin_lambda + by*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - my[i]*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - bz*sx*sy*cos_rho*sin_lambda + mz[i]*sx*sy*cos_rho*sin_lambda - bx*sy*sz*sin_lambda*sin_lambda*sin_rho + mx[i]*sy*sz*sin_lambda*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + mx[i]*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + bx*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi - mx[i]*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi))/(sx*sx*sy*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*(cos_rho*cos_rho*cos_rho));
 8003c90:	4b81      	ldr	r3, [pc, #516]	@ (8003e98 <NLLS+0x2640>)
 8003c92:	443b      	add	r3, r7
 8003c94:	6819      	ldr	r1, [r3, #0]
 8003c96:	4b81      	ldr	r3, [pc, #516]	@ (8003e9c <NLLS+0x2644>)
 8003c98:	443b      	add	r3, r7
 8003c9a:	6818      	ldr	r0, [r3, #0]
 8003c9c:	f7fd f922 	bl	8000ee4 <__aeabi_fmul>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	461c      	mov	r4, r3
 8003ca4:	4b7b      	ldr	r3, [pc, #492]	@ (8003e94 <NLLS+0x263c>)
 8003ca6:	443b      	add	r3, r7
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003cb0:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a77      	ldr	r2, [pc, #476]	@ (8003e98 <NLLS+0x2640>)
 8003cba:	443a      	add	r2, r7
 8003cbc:	6811      	ldr	r1, [r2, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fd f910 	bl	8000ee4 <__aeabi_fmul>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4620      	mov	r0, r4
 8003cca:	f7fd f801 	bl	8000cd0 <__aeabi_fsub>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	461c      	mov	r4, r3
 8003cd2:	4b73      	ldr	r3, [pc, #460]	@ (8003ea0 <NLLS+0x2648>)
 8003cd4:	443b      	add	r3, r7
 8003cd6:	6819      	ldr	r1, [r3, #0]
 8003cd8:	4b72      	ldr	r3, [pc, #456]	@ (8003ea4 <NLLS+0x264c>)
 8003cda:	443b      	add	r3, r7
 8003cdc:	6818      	ldr	r0, [r3, #0]
 8003cde:	f7fd f901 	bl	8000ee4 <__aeabi_fmul>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	4a70      	ldr	r2, [pc, #448]	@ (8003ea8 <NLLS+0x2650>)
 8003ce6:	443a      	add	r2, r7
 8003ce8:	6811      	ldr	r1, [r2, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fd f8fa 	bl	8000ee4 <__aeabi_fmul>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	4620      	mov	r0, r4
 8003cf6:	f7fc ffeb 	bl	8000cd0 <__aeabi_fsub>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	461c      	mov	r4, r3
 8003cfe:	4b65      	ldr	r3, [pc, #404]	@ (8003e94 <NLLS+0x263c>)
 8003d00:	443b      	add	r3, r7
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003d0a:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8003d0e:	4413      	add	r3, r2
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a63      	ldr	r2, [pc, #396]	@ (8003ea0 <NLLS+0x2648>)
 8003d14:	443a      	add	r2, r7
 8003d16:	6811      	ldr	r1, [r2, #0]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7fd f8e3 	bl	8000ee4 <__aeabi_fmul>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	4a61      	ldr	r2, [pc, #388]	@ (8003ea8 <NLLS+0x2650>)
 8003d22:	443a      	add	r2, r7
 8003d24:	6811      	ldr	r1, [r2, #0]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fd f8dc 	bl	8000ee4 <__aeabi_fmul>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	4619      	mov	r1, r3
 8003d30:	4620      	mov	r0, r4
 8003d32:	f7fc ffcf 	bl	8000cd4 <__addsf3>
 8003d36:	4603      	mov	r3, r0
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fc ffca 	bl	8000cd4 <__addsf3>
 8003d40:	4603      	mov	r3, r0
 8003d42:	461c      	mov	r4, r3
 8003d44:	4b56      	ldr	r3, [pc, #344]	@ (8003ea0 <NLLS+0x2648>)
 8003d46:	443b      	add	r3, r7
 8003d48:	6819      	ldr	r1, [r3, #0]
 8003d4a:	4b56      	ldr	r3, [pc, #344]	@ (8003ea4 <NLLS+0x264c>)
 8003d4c:	443b      	add	r3, r7
 8003d4e:	6818      	ldr	r0, [r3, #0]
 8003d50:	f7fd f8c8 	bl	8000ee4 <__aeabi_fmul>
 8003d54:	4603      	mov	r3, r0
 8003d56:	4a55      	ldr	r2, [pc, #340]	@ (8003eac <NLLS+0x2654>)
 8003d58:	443a      	add	r2, r7
 8003d5a:	6811      	ldr	r1, [r2, #0]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fd f8c1 	bl	8000ee4 <__aeabi_fmul>
 8003d62:	4603      	mov	r3, r0
 8003d64:	4a52      	ldr	r2, [pc, #328]	@ (8003eb0 <NLLS+0x2658>)
 8003d66:	443a      	add	r2, r7
 8003d68:	6811      	ldr	r1, [r2, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fd f8ba 	bl	8000ee4 <__aeabi_fmul>
 8003d70:	4603      	mov	r3, r0
 8003d72:	4a4f      	ldr	r2, [pc, #316]	@ (8003eb0 <NLLS+0x2658>)
 8003d74:	443a      	add	r2, r7
 8003d76:	6811      	ldr	r1, [r2, #0]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7fd f8b3 	bl	8000ee4 <__aeabi_fmul>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	461d      	mov	r5, r3
 8003d82:	4b44      	ldr	r3, [pc, #272]	@ (8003e94 <NLLS+0x263c>)
 8003d84:	443b      	add	r3, r7
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003d8e:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8003d92:	4413      	add	r3, r2
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a42      	ldr	r2, [pc, #264]	@ (8003ea0 <NLLS+0x2648>)
 8003d98:	443a      	add	r2, r7
 8003d9a:	6811      	ldr	r1, [r2, #0]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7fd f8a1 	bl	8000ee4 <__aeabi_fmul>
 8003da2:	4603      	mov	r3, r0
 8003da4:	4a41      	ldr	r2, [pc, #260]	@ (8003eac <NLLS+0x2654>)
 8003da6:	443a      	add	r2, r7
 8003da8:	6811      	ldr	r1, [r2, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fd f89a 	bl	8000ee4 <__aeabi_fmul>
 8003db0:	4603      	mov	r3, r0
 8003db2:	4a3f      	ldr	r2, [pc, #252]	@ (8003eb0 <NLLS+0x2658>)
 8003db4:	443a      	add	r2, r7
 8003db6:	6811      	ldr	r1, [r2, #0]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fd f893 	bl	8000ee4 <__aeabi_fmul>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	4a3b      	ldr	r2, [pc, #236]	@ (8003eb0 <NLLS+0x2658>)
 8003dc2:	443a      	add	r2, r7
 8003dc4:	6811      	ldr	r1, [r2, #0]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fd f88c 	bl	8000ee4 <__aeabi_fmul>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	4619      	mov	r1, r3
 8003dd0:	4628      	mov	r0, r5
 8003dd2:	f7fc ff7d 	bl	8000cd0 <__aeabi_fsub>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	461d      	mov	r5, r3
 8003dda:	4b31      	ldr	r3, [pc, #196]	@ (8003ea0 <NLLS+0x2648>)
 8003ddc:	443b      	add	r3, r7
 8003dde:	6819      	ldr	r1, [r3, #0]
 8003de0:	4b30      	ldr	r3, [pc, #192]	@ (8003ea4 <NLLS+0x264c>)
 8003de2:	443b      	add	r3, r7
 8003de4:	6818      	ldr	r0, [r3, #0]
 8003de6:	f7fd f87d 	bl	8000ee4 <__aeabi_fmul>
 8003dea:	4603      	mov	r3, r0
 8003dec:	4a2f      	ldr	r2, [pc, #188]	@ (8003eac <NLLS+0x2654>)
 8003dee:	443a      	add	r2, r7
 8003df0:	6811      	ldr	r1, [r2, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fd f876 	bl	8000ee4 <__aeabi_fmul>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	4a23      	ldr	r2, [pc, #140]	@ (8003e88 <NLLS+0x2630>)
 8003dfc:	443a      	add	r2, r7
 8003dfe:	6811      	ldr	r1, [r2, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fd f86f 	bl	8000ee4 <__aeabi_fmul>
 8003e06:	4603      	mov	r3, r0
 8003e08:	4a1f      	ldr	r2, [pc, #124]	@ (8003e88 <NLLS+0x2630>)
 8003e0a:	443a      	add	r2, r7
 8003e0c:	6811      	ldr	r1, [r2, #0]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fd f868 	bl	8000ee4 <__aeabi_fmul>
 8003e14:	4603      	mov	r3, r0
 8003e16:	4a1d      	ldr	r2, [pc, #116]	@ (8003e8c <NLLS+0x2634>)
 8003e18:	443a      	add	r2, r7
 8003e1a:	6811      	ldr	r1, [r2, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7fd f861 	bl	8000ee4 <__aeabi_fmul>
 8003e22:	4603      	mov	r3, r0
 8003e24:	4a19      	ldr	r2, [pc, #100]	@ (8003e8c <NLLS+0x2634>)
 8003e26:	443a      	add	r2, r7
 8003e28:	6811      	ldr	r1, [r2, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fd f85a 	bl	8000ee4 <__aeabi_fmul>
 8003e30:	4603      	mov	r3, r0
 8003e32:	4619      	mov	r1, r3
 8003e34:	4628      	mov	r0, r5
 8003e36:	f7fc ff4d 	bl	8000cd4 <__addsf3>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	461d      	mov	r5, r3
 8003e3e:	4b15      	ldr	r3, [pc, #84]	@ (8003e94 <NLLS+0x263c>)
 8003e40:	443b      	add	r3, r7
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003e4a:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8003e4e:	4413      	add	r3, r2
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a13      	ldr	r2, [pc, #76]	@ (8003ea0 <NLLS+0x2648>)
 8003e54:	443a      	add	r2, r7
 8003e56:	6811      	ldr	r1, [r2, #0]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fd f843 	bl	8000ee4 <__aeabi_fmul>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	4a12      	ldr	r2, [pc, #72]	@ (8003eac <NLLS+0x2654>)
 8003e62:	443a      	add	r2, r7
 8003e64:	6811      	ldr	r1, [r2, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fd f83c 	bl	8000ee4 <__aeabi_fmul>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	4a06      	ldr	r2, [pc, #24]	@ (8003e88 <NLLS+0x2630>)
 8003e70:	443a      	add	r2, r7
 8003e72:	6811      	ldr	r1, [r2, #0]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7fd f835 	bl	8000ee4 <__aeabi_fmul>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	4a02      	ldr	r2, [pc, #8]	@ (8003e88 <NLLS+0x2630>)
 8003e7e:	443a      	add	r2, r7
 8003e80:	6811      	ldr	r1, [r2, #0]
 8003e82:	4618      	mov	r0, r3
 8003e84:	e016      	b.n	8003eb4 <NLLS+0x265c>
 8003e86:	bf00      	nop
 8003e88:	00016fc4 	.word	0x00016fc4
 8003e8c:	00016fcc 	.word	0x00016fcc
 8003e90:	00016fc8 	.word	0x00016fc8
 8003e94:	00017008 	.word	0x00017008
 8003e98:	00017034 	.word	0x00017034
 8003e9c:	0001702c 	.word	0x0001702c
 8003ea0:	00017038 	.word	0x00017038
 8003ea4:	00017028 	.word	0x00017028
 8003ea8:	00016fd4 	.word	0x00016fd4
 8003eac:	00017030 	.word	0x00017030
 8003eb0:	00016fd0 	.word	0x00016fd0
 8003eb4:	f7fd f816 	bl	8000ee4 <__aeabi_fmul>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	4a96      	ldr	r2, [pc, #600]	@ (8004114 <NLLS+0x28bc>)
 8003ebc:	443a      	add	r2, r7
 8003ebe:	6811      	ldr	r1, [r2, #0]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7fd f80f 	bl	8000ee4 <__aeabi_fmul>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	4a92      	ldr	r2, [pc, #584]	@ (8004114 <NLLS+0x28bc>)
 8003eca:	443a      	add	r2, r7
 8003ecc:	6811      	ldr	r1, [r2, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fd f808 	bl	8000ee4 <__aeabi_fmul>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4628      	mov	r0, r5
 8003eda:	f7fc fef9 	bl	8000cd0 <__aeabi_fsub>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	461d      	mov	r5, r3
 8003ee2:	4b8d      	ldr	r3, [pc, #564]	@ (8004118 <NLLS+0x28c0>)
 8003ee4:	443b      	add	r3, r7
 8003ee6:	6819      	ldr	r1, [r3, #0]
 8003ee8:	4b8c      	ldr	r3, [pc, #560]	@ (800411c <NLLS+0x28c4>)
 8003eea:	443b      	add	r3, r7
 8003eec:	6818      	ldr	r0, [r3, #0]
 8003eee:	f7fc fff9 	bl	8000ee4 <__aeabi_fmul>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	4a8a      	ldr	r2, [pc, #552]	@ (8004120 <NLLS+0x28c8>)
 8003ef6:	443a      	add	r2, r7
 8003ef8:	6811      	ldr	r1, [r2, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fc fff2 	bl	8000ee4 <__aeabi_fmul>
 8003f00:	4603      	mov	r3, r0
 8003f02:	4a88      	ldr	r2, [pc, #544]	@ (8004124 <NLLS+0x28cc>)
 8003f04:	443a      	add	r2, r7
 8003f06:	6811      	ldr	r1, [r2, #0]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7fc ffeb 	bl	8000ee4 <__aeabi_fmul>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	4a85      	ldr	r2, [pc, #532]	@ (8004128 <NLLS+0x28d0>)
 8003f12:	443a      	add	r2, r7
 8003f14:	6811      	ldr	r1, [r2, #0]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fc ffe4 	bl	8000ee4 <__aeabi_fmul>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	4619      	mov	r1, r3
 8003f20:	4628      	mov	r0, r5
 8003f22:	f7fc fed5 	bl	8000cd0 <__aeabi_fsub>
 8003f26:	4603      	mov	r3, r0
 8003f28:	461d      	mov	r5, r3
 8003f2a:	4b80      	ldr	r3, [pc, #512]	@ (800412c <NLLS+0x28d4>)
 8003f2c:	443b      	add	r3, r7
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003f36:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a76      	ldr	r2, [pc, #472]	@ (8004118 <NLLS+0x28c0>)
 8003f40:	443a      	add	r2, r7
 8003f42:	6811      	ldr	r1, [r2, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7fc ffcd 	bl	8000ee4 <__aeabi_fmul>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	4a74      	ldr	r2, [pc, #464]	@ (8004120 <NLLS+0x28c8>)
 8003f4e:	443a      	add	r2, r7
 8003f50:	6811      	ldr	r1, [r2, #0]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fc ffc6 	bl	8000ee4 <__aeabi_fmul>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	4a72      	ldr	r2, [pc, #456]	@ (8004124 <NLLS+0x28cc>)
 8003f5c:	443a      	add	r2, r7
 8003f5e:	6811      	ldr	r1, [r2, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fc ffbf 	bl	8000ee4 <__aeabi_fmul>
 8003f66:	4603      	mov	r3, r0
 8003f68:	4a6f      	ldr	r2, [pc, #444]	@ (8004128 <NLLS+0x28d0>)
 8003f6a:	443a      	add	r2, r7
 8003f6c:	6811      	ldr	r1, [r2, #0]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7fc ffb8 	bl	8000ee4 <__aeabi_fmul>
 8003f74:	4603      	mov	r3, r0
 8003f76:	4619      	mov	r1, r3
 8003f78:	4628      	mov	r0, r5
 8003f7a:	f7fc feab 	bl	8000cd4 <__addsf3>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	461d      	mov	r5, r3
 8003f82:	4b67      	ldr	r3, [pc, #412]	@ (8004120 <NLLS+0x28c8>)
 8003f84:	443b      	add	r3, r7
 8003f86:	6819      	ldr	r1, [r3, #0]
 8003f88:	4b69      	ldr	r3, [pc, #420]	@ (8004130 <NLLS+0x28d8>)
 8003f8a:	443b      	add	r3, r7
 8003f8c:	6818      	ldr	r0, [r3, #0]
 8003f8e:	f7fc ffa9 	bl	8000ee4 <__aeabi_fmul>
 8003f92:	4603      	mov	r3, r0
 8003f94:	4a67      	ldr	r2, [pc, #412]	@ (8004134 <NLLS+0x28dc>)
 8003f96:	443a      	add	r2, r7
 8003f98:	6811      	ldr	r1, [r2, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fc ffa2 	bl	8000ee4 <__aeabi_fmul>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	4a61      	ldr	r2, [pc, #388]	@ (8004128 <NLLS+0x28d0>)
 8003fa4:	443a      	add	r2, r7
 8003fa6:	6811      	ldr	r1, [r2, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7fc ff9b 	bl	8000ee4 <__aeabi_fmul>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	4a5d      	ldr	r2, [pc, #372]	@ (8004128 <NLLS+0x28d0>)
 8003fb2:	443a      	add	r2, r7
 8003fb4:	6811      	ldr	r1, [r2, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fc ff94 	bl	8000ee4 <__aeabi_fmul>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	4a5e      	ldr	r2, [pc, #376]	@ (8004138 <NLLS+0x28e0>)
 8003fc0:	443a      	add	r2, r7
 8003fc2:	6811      	ldr	r1, [r2, #0]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7fc ff8d 	bl	8000ee4 <__aeabi_fmul>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	4619      	mov	r1, r3
 8003fce:	4628      	mov	r0, r5
 8003fd0:	f7fc fe7e 	bl	8000cd0 <__aeabi_fsub>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	461d      	mov	r5, r3
 8003fd8:	4b54      	ldr	r3, [pc, #336]	@ (800412c <NLLS+0x28d4>)
 8003fda:	443b      	add	r3, r7
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003fe4:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8003fe8:	4413      	add	r3, r2
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a4c      	ldr	r2, [pc, #304]	@ (8004120 <NLLS+0x28c8>)
 8003fee:	443a      	add	r2, r7
 8003ff0:	6811      	ldr	r1, [r2, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fc ff76 	bl	8000ee4 <__aeabi_fmul>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	4a4e      	ldr	r2, [pc, #312]	@ (8004134 <NLLS+0x28dc>)
 8003ffc:	443a      	add	r2, r7
 8003ffe:	6811      	ldr	r1, [r2, #0]
 8004000:	4618      	mov	r0, r3
 8004002:	f7fc ff6f 	bl	8000ee4 <__aeabi_fmul>
 8004006:	4603      	mov	r3, r0
 8004008:	4a47      	ldr	r2, [pc, #284]	@ (8004128 <NLLS+0x28d0>)
 800400a:	443a      	add	r2, r7
 800400c:	6811      	ldr	r1, [r2, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f7fc ff68 	bl	8000ee4 <__aeabi_fmul>
 8004014:	4603      	mov	r3, r0
 8004016:	4a44      	ldr	r2, [pc, #272]	@ (8004128 <NLLS+0x28d0>)
 8004018:	443a      	add	r2, r7
 800401a:	6811      	ldr	r1, [r2, #0]
 800401c:	4618      	mov	r0, r3
 800401e:	f7fc ff61 	bl	8000ee4 <__aeabi_fmul>
 8004022:	4603      	mov	r3, r0
 8004024:	4a44      	ldr	r2, [pc, #272]	@ (8004138 <NLLS+0x28e0>)
 8004026:	443a      	add	r2, r7
 8004028:	6811      	ldr	r1, [r2, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f7fc ff5a 	bl	8000ee4 <__aeabi_fmul>
 8004030:	4603      	mov	r3, r0
 8004032:	4619      	mov	r1, r3
 8004034:	4628      	mov	r0, r5
 8004036:	f7fc fe4d 	bl	8000cd4 <__addsf3>
 800403a:	4603      	mov	r3, r0
 800403c:	461d      	mov	r5, r3
 800403e:	4b38      	ldr	r3, [pc, #224]	@ (8004120 <NLLS+0x28c8>)
 8004040:	443b      	add	r3, r7
 8004042:	6819      	ldr	r1, [r3, #0]
 8004044:	4b3a      	ldr	r3, [pc, #232]	@ (8004130 <NLLS+0x28d8>)
 8004046:	443b      	add	r3, r7
 8004048:	6818      	ldr	r0, [r3, #0]
 800404a:	f7fc ff4b 	bl	8000ee4 <__aeabi_fmul>
 800404e:	4603      	mov	r3, r0
 8004050:	4a38      	ldr	r2, [pc, #224]	@ (8004134 <NLLS+0x28dc>)
 8004052:	443a      	add	r2, r7
 8004054:	6811      	ldr	r1, [r2, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f7fc ff44 	bl	8000ee4 <__aeabi_fmul>
 800405c:	4603      	mov	r3, r0
 800405e:	4a37      	ldr	r2, [pc, #220]	@ (800413c <NLLS+0x28e4>)
 8004060:	443a      	add	r2, r7
 8004062:	6811      	ldr	r1, [r2, #0]
 8004064:	4618      	mov	r0, r3
 8004066:	f7fc ff3d 	bl	8000ee4 <__aeabi_fmul>
 800406a:	4603      	mov	r3, r0
 800406c:	4a33      	ldr	r2, [pc, #204]	@ (800413c <NLLS+0x28e4>)
 800406e:	443a      	add	r2, r7
 8004070:	6811      	ldr	r1, [r2, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f7fc ff36 	bl	8000ee4 <__aeabi_fmul>
 8004078:	4603      	mov	r3, r0
 800407a:	4a26      	ldr	r2, [pc, #152]	@ (8004114 <NLLS+0x28bc>)
 800407c:	443a      	add	r2, r7
 800407e:	6811      	ldr	r1, [r2, #0]
 8004080:	4618      	mov	r0, r3
 8004082:	f7fc ff2f 	bl	8000ee4 <__aeabi_fmul>
 8004086:	4603      	mov	r3, r0
 8004088:	4a22      	ldr	r2, [pc, #136]	@ (8004114 <NLLS+0x28bc>)
 800408a:	443a      	add	r2, r7
 800408c:	6811      	ldr	r1, [r2, #0]
 800408e:	4618      	mov	r0, r3
 8004090:	f7fc ff28 	bl	8000ee4 <__aeabi_fmul>
 8004094:	4603      	mov	r3, r0
 8004096:	4a28      	ldr	r2, [pc, #160]	@ (8004138 <NLLS+0x28e0>)
 8004098:	443a      	add	r2, r7
 800409a:	6811      	ldr	r1, [r2, #0]
 800409c:	4618      	mov	r0, r3
 800409e:	f7fc ff21 	bl	8000ee4 <__aeabi_fmul>
 80040a2:	4603      	mov	r3, r0
 80040a4:	4619      	mov	r1, r3
 80040a6:	4628      	mov	r0, r5
 80040a8:	f7fc fe12 	bl	8000cd0 <__aeabi_fsub>
 80040ac:	4603      	mov	r3, r0
 80040ae:	461d      	mov	r5, r3
 80040b0:	4b1e      	ldr	r3, [pc, #120]	@ (800412c <NLLS+0x28d4>)
 80040b2:	443b      	add	r3, r7
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80040bc:	f852 2c34 	ldr.w	r2, [r2, #-52]
 80040c0:	4413      	add	r3, r2
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a16      	ldr	r2, [pc, #88]	@ (8004120 <NLLS+0x28c8>)
 80040c6:	443a      	add	r2, r7
 80040c8:	6811      	ldr	r1, [r2, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fc ff0a 	bl	8000ee4 <__aeabi_fmul>
 80040d0:	4603      	mov	r3, r0
 80040d2:	4a18      	ldr	r2, [pc, #96]	@ (8004134 <NLLS+0x28dc>)
 80040d4:	443a      	add	r2, r7
 80040d6:	6811      	ldr	r1, [r2, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	f7fc ff03 	bl	8000ee4 <__aeabi_fmul>
 80040de:	4603      	mov	r3, r0
 80040e0:	4a16      	ldr	r2, [pc, #88]	@ (800413c <NLLS+0x28e4>)
 80040e2:	443a      	add	r2, r7
 80040e4:	6811      	ldr	r1, [r2, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fc fefc 	bl	8000ee4 <__aeabi_fmul>
 80040ec:	4603      	mov	r3, r0
 80040ee:	4a13      	ldr	r2, [pc, #76]	@ (800413c <NLLS+0x28e4>)
 80040f0:	443a      	add	r2, r7
 80040f2:	6811      	ldr	r1, [r2, #0]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7fc fef5 	bl	8000ee4 <__aeabi_fmul>
 80040fa:	4603      	mov	r3, r0
 80040fc:	4a05      	ldr	r2, [pc, #20]	@ (8004114 <NLLS+0x28bc>)
 80040fe:	443a      	add	r2, r7
 8004100:	6811      	ldr	r1, [r2, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f7fc feee 	bl	8000ee4 <__aeabi_fmul>
 8004108:	4603      	mov	r3, r0
 800410a:	4a02      	ldr	r2, [pc, #8]	@ (8004114 <NLLS+0x28bc>)
 800410c:	443a      	add	r2, r7
 800410e:	6811      	ldr	r1, [r2, #0]
 8004110:	4618      	mov	r0, r3
 8004112:	e015      	b.n	8004140 <NLLS+0x28e8>
 8004114:	00016fcc 	.word	0x00016fcc
 8004118:	00017038 	.word	0x00017038
 800411c:	00017024 	.word	0x00017024
 8004120:	00017034 	.word	0x00017034
 8004124:	00016fc8 	.word	0x00016fc8
 8004128:	00016fd0 	.word	0x00016fd0
 800412c:	00017008 	.word	0x00017008
 8004130:	0001702c 	.word	0x0001702c
 8004134:	00017030 	.word	0x00017030
 8004138:	00016fd4 	.word	0x00016fd4
 800413c:	00016fc4 	.word	0x00016fc4
 8004140:	f7fc fed0 	bl	8000ee4 <__aeabi_fmul>
 8004144:	4603      	mov	r3, r0
 8004146:	4a97      	ldr	r2, [pc, #604]	@ (80043a4 <NLLS+0x2b4c>)
 8004148:	443a      	add	r2, r7
 800414a:	6811      	ldr	r1, [r2, #0]
 800414c:	4618      	mov	r0, r3
 800414e:	f7fc fec9 	bl	8000ee4 <__aeabi_fmul>
 8004152:	4603      	mov	r3, r0
 8004154:	4619      	mov	r1, r3
 8004156:	4628      	mov	r0, r5
 8004158:	f7fc fdbc 	bl	8000cd4 <__addsf3>
 800415c:	4603      	mov	r3, r0
 800415e:	461d      	mov	r5, r3
 8004160:	4b91      	ldr	r3, [pc, #580]	@ (80043a8 <NLLS+0x2b50>)
 8004162:	443b      	add	r3, r7
 8004164:	6819      	ldr	r1, [r3, #0]
 8004166:	4b91      	ldr	r3, [pc, #580]	@ (80043ac <NLLS+0x2b54>)
 8004168:	443b      	add	r3, r7
 800416a:	6818      	ldr	r0, [r3, #0]
 800416c:	f7fc feba 	bl	8000ee4 <__aeabi_fmul>
 8004170:	4603      	mov	r3, r0
 8004172:	4a8f      	ldr	r2, [pc, #572]	@ (80043b0 <NLLS+0x2b58>)
 8004174:	443a      	add	r2, r7
 8004176:	6811      	ldr	r1, [r2, #0]
 8004178:	4618      	mov	r0, r3
 800417a:	f7fc feb3 	bl	8000ee4 <__aeabi_fmul>
 800417e:	4603      	mov	r3, r0
 8004180:	4a8c      	ldr	r2, [pc, #560]	@ (80043b4 <NLLS+0x2b5c>)
 8004182:	443a      	add	r2, r7
 8004184:	6811      	ldr	r1, [r2, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f7fc feac 	bl	8000ee4 <__aeabi_fmul>
 800418c:	4603      	mov	r3, r0
 800418e:	4a8a      	ldr	r2, [pc, #552]	@ (80043b8 <NLLS+0x2b60>)
 8004190:	443a      	add	r2, r7
 8004192:	6811      	ldr	r1, [r2, #0]
 8004194:	4618      	mov	r0, r3
 8004196:	f7fc fea5 	bl	8000ee4 <__aeabi_fmul>
 800419a:	4603      	mov	r3, r0
 800419c:	4a87      	ldr	r2, [pc, #540]	@ (80043bc <NLLS+0x2b64>)
 800419e:	443a      	add	r2, r7
 80041a0:	6811      	ldr	r1, [r2, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7fc fe9e 	bl	8000ee4 <__aeabi_fmul>
 80041a8:	4603      	mov	r3, r0
 80041aa:	4a85      	ldr	r2, [pc, #532]	@ (80043c0 <NLLS+0x2b68>)
 80041ac:	443a      	add	r2, r7
 80041ae:	6811      	ldr	r1, [r2, #0]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7fc fe97 	bl	8000ee4 <__aeabi_fmul>
 80041b6:	4603      	mov	r3, r0
 80041b8:	4619      	mov	r1, r3
 80041ba:	4628      	mov	r0, r5
 80041bc:	f7fc fd8a 	bl	8000cd4 <__addsf3>
 80041c0:	4603      	mov	r3, r0
 80041c2:	461d      	mov	r5, r3
 80041c4:	4b7f      	ldr	r3, [pc, #508]	@ (80043c4 <NLLS+0x2b6c>)
 80041c6:	443b      	add	r3, r7
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80041d0:	f852 2c34 	ldr.w	r2, [r2, #-52]
 80041d4:	4413      	add	r3, r2
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a73      	ldr	r2, [pc, #460]	@ (80043a8 <NLLS+0x2b50>)
 80041da:	443a      	add	r2, r7
 80041dc:	6811      	ldr	r1, [r2, #0]
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fc fe80 	bl	8000ee4 <__aeabi_fmul>
 80041e4:	4603      	mov	r3, r0
 80041e6:	4a72      	ldr	r2, [pc, #456]	@ (80043b0 <NLLS+0x2b58>)
 80041e8:	443a      	add	r2, r7
 80041ea:	6811      	ldr	r1, [r2, #0]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7fc fe79 	bl	8000ee4 <__aeabi_fmul>
 80041f2:	4603      	mov	r3, r0
 80041f4:	4a6f      	ldr	r2, [pc, #444]	@ (80043b4 <NLLS+0x2b5c>)
 80041f6:	443a      	add	r2, r7
 80041f8:	6811      	ldr	r1, [r2, #0]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7fc fe72 	bl	8000ee4 <__aeabi_fmul>
 8004200:	4603      	mov	r3, r0
 8004202:	4a6d      	ldr	r2, [pc, #436]	@ (80043b8 <NLLS+0x2b60>)
 8004204:	443a      	add	r2, r7
 8004206:	6811      	ldr	r1, [r2, #0]
 8004208:	4618      	mov	r0, r3
 800420a:	f7fc fe6b 	bl	8000ee4 <__aeabi_fmul>
 800420e:	4603      	mov	r3, r0
 8004210:	4a6a      	ldr	r2, [pc, #424]	@ (80043bc <NLLS+0x2b64>)
 8004212:	443a      	add	r2, r7
 8004214:	6811      	ldr	r1, [r2, #0]
 8004216:	4618      	mov	r0, r3
 8004218:	f7fc fe64 	bl	8000ee4 <__aeabi_fmul>
 800421c:	4603      	mov	r3, r0
 800421e:	4a68      	ldr	r2, [pc, #416]	@ (80043c0 <NLLS+0x2b68>)
 8004220:	443a      	add	r2, r7
 8004222:	6811      	ldr	r1, [r2, #0]
 8004224:	4618      	mov	r0, r3
 8004226:	f7fc fe5d 	bl	8000ee4 <__aeabi_fmul>
 800422a:	4603      	mov	r3, r0
 800422c:	4619      	mov	r1, r3
 800422e:	4628      	mov	r0, r5
 8004230:	f7fc fd4e 	bl	8000cd0 <__aeabi_fsub>
 8004234:	4603      	mov	r3, r0
 8004236:	4619      	mov	r1, r3
 8004238:	4620      	mov	r0, r4
 800423a:	f7fc fe53 	bl	8000ee4 <__aeabi_fmul>
 800423e:	4603      	mov	r3, r0
 8004240:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8004244:	4b60      	ldr	r3, [pc, #384]	@ (80043c8 <NLLS+0x2b70>)
 8004246:	443b      	add	r3, r7
 8004248:	6819      	ldr	r1, [r3, #0]
 800424a:	4b5f      	ldr	r3, [pc, #380]	@ (80043c8 <NLLS+0x2b70>)
 800424c:	443b      	add	r3, r7
 800424e:	6818      	ldr	r0, [r3, #0]
 8004250:	f7fc fe48 	bl	8000ee4 <__aeabi_fmul>
 8004254:	4603      	mov	r3, r0
 8004256:	4a54      	ldr	r2, [pc, #336]	@ (80043a8 <NLLS+0x2b50>)
 8004258:	443a      	add	r2, r7
 800425a:	6811      	ldr	r1, [r2, #0]
 800425c:	4618      	mov	r0, r3
 800425e:	f7fc fe41 	bl	8000ee4 <__aeabi_fmul>
 8004262:	4603      	mov	r3, r0
 8004264:	4a50      	ldr	r2, [pc, #320]	@ (80043a8 <NLLS+0x2b50>)
 8004266:	443a      	add	r2, r7
 8004268:	6811      	ldr	r1, [r2, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f7fc fe3a 	bl	8000ee4 <__aeabi_fmul>
 8004270:	4603      	mov	r3, r0
 8004272:	4a4f      	ldr	r2, [pc, #316]	@ (80043b0 <NLLS+0x2b58>)
 8004274:	443a      	add	r2, r7
 8004276:	6811      	ldr	r1, [r2, #0]
 8004278:	4618      	mov	r0, r3
 800427a:	f7fc fe33 	bl	8000ee4 <__aeabi_fmul>
 800427e:	4603      	mov	r3, r0
 8004280:	4a4c      	ldr	r2, [pc, #304]	@ (80043b4 <NLLS+0x2b5c>)
 8004282:	443a      	add	r2, r7
 8004284:	6811      	ldr	r1, [r2, #0]
 8004286:	4618      	mov	r0, r3
 8004288:	f7fc fe2c 	bl	8000ee4 <__aeabi_fmul>
 800428c:	4603      	mov	r3, r0
 800428e:	4a49      	ldr	r2, [pc, #292]	@ (80043b4 <NLLS+0x2b5c>)
 8004290:	443a      	add	r2, r7
 8004292:	6811      	ldr	r1, [r2, #0]
 8004294:	4618      	mov	r0, r3
 8004296:	f7fc fe25 	bl	8000ee4 <__aeabi_fmul>
 800429a:	4603      	mov	r3, r0
 800429c:	4a4b      	ldr	r2, [pc, #300]	@ (80043cc <NLLS+0x2b74>)
 800429e:	443a      	add	r2, r7
 80042a0:	6811      	ldr	r1, [r2, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fc fe1e 	bl	8000ee4 <__aeabi_fmul>
 80042a8:	4603      	mov	r3, r0
 80042aa:	4a48      	ldr	r2, [pc, #288]	@ (80043cc <NLLS+0x2b74>)
 80042ac:	443a      	add	r2, r7
 80042ae:	6811      	ldr	r1, [r2, #0]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fc fe17 	bl	8000ee4 <__aeabi_fmul>
 80042b6:	4603      	mov	r3, r0
 80042b8:	461d      	mov	r5, r3
 80042ba:	4b3f      	ldr	r3, [pc, #252]	@ (80043b8 <NLLS+0x2b60>)
 80042bc:	443b      	add	r3, r7
 80042be:	6819      	ldr	r1, [r3, #0]
 80042c0:	4b3d      	ldr	r3, [pc, #244]	@ (80043b8 <NLLS+0x2b60>)
 80042c2:	443b      	add	r3, r7
 80042c4:	6818      	ldr	r0, [r3, #0]
 80042c6:	f7fc fe0d 	bl	8000ee4 <__aeabi_fmul>
 80042ca:	4603      	mov	r3, r0
 80042cc:	4a3a      	ldr	r2, [pc, #232]	@ (80043b8 <NLLS+0x2b60>)
 80042ce:	443a      	add	r2, r7
 80042d0:	6811      	ldr	r1, [r2, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fc fe06 	bl	8000ee4 <__aeabi_fmul>
 80042d8:	4603      	mov	r3, r0
 80042da:	4619      	mov	r1, r3
 80042dc:	4628      	mov	r0, r5
 80042de:	f7fc fe01 	bl	8000ee4 <__aeabi_fmul>
 80042e2:	4603      	mov	r3, r0
 80042e4:	4619      	mov	r1, r3
 80042e6:	4620      	mov	r0, r4
 80042e8:	f7fc feb0 	bl	800104c <__aeabi_fdiv>
 80042ec:	4603      	mov	r3, r0
 80042ee:	4618      	mov	r0, r3
 80042f0:	f24a 0340 	movw	r3, #41024	@ 0xa040
 80042f4:	443b      	add	r3, r7
 80042f6:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 80042fa:	4b32      	ldr	r3, [pc, #200]	@ (80043c4 <NLLS+0x2b6c>)
 80042fc:	443b      	add	r3, r7
 80042fe:	6819      	ldr	r1, [r3, #0]
 8004300:	f641 2310 	movw	r3, #6672	@ 0x1a10
 8004304:	440b      	add	r3, r1
 8004306:	f842 0023 	str.w	r0, [r2, r3, lsl #2]

			mat_H[7][i] = (2*sin_phi*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*(cos_phi*cos_phi*cos_phi)*cos_rho*cos_rho) - (2*(bx - mx[i])*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sz*cos_lambda*cos_phi*cos_rho);
 800430a:	4b2d      	ldr	r3, [pc, #180]	@ (80043c0 <NLLS+0x2b68>)
 800430c:	443b      	add	r3, r7
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4619      	mov	r1, r3
 8004312:	4618      	mov	r0, r3
 8004314:	f7fc fcde 	bl	8000cd4 <__addsf3>
 8004318:	4603      	mov	r3, r0
 800431a:	461c      	mov	r4, r3
 800431c:	4b24      	ldr	r3, [pc, #144]	@ (80043b0 <NLLS+0x2b58>)
 800431e:	443b      	add	r3, r7
 8004320:	6819      	ldr	r1, [r3, #0]
 8004322:	4b21      	ldr	r3, [pc, #132]	@ (80043a8 <NLLS+0x2b50>)
 8004324:	443b      	add	r3, r7
 8004326:	6818      	ldr	r0, [r3, #0]
 8004328:	f7fc fddc 	bl	8000ee4 <__aeabi_fmul>
 800432c:	4603      	mov	r3, r0
 800432e:	461d      	mov	r5, r3
 8004330:	4b1c      	ldr	r3, [pc, #112]	@ (80043a4 <NLLS+0x2b4c>)
 8004332:	443b      	add	r3, r7
 8004334:	6819      	ldr	r1, [r3, #0]
 8004336:	4b21      	ldr	r3, [pc, #132]	@ (80043bc <NLLS+0x2b64>)
 8004338:	443b      	add	r3, r7
 800433a:	6818      	ldr	r0, [r3, #0]
 800433c:	f7fc fdd2 	bl	8000ee4 <__aeabi_fmul>
 8004340:	4603      	mov	r3, r0
 8004342:	461e      	mov	r6, r3
 8004344:	4b1c      	ldr	r3, [pc, #112]	@ (80043b8 <NLLS+0x2b60>)
 8004346:	443b      	add	r3, r7
 8004348:	6819      	ldr	r1, [r3, #0]
 800434a:	4b1a      	ldr	r3, [pc, #104]	@ (80043b4 <NLLS+0x2b5c>)
 800434c:	443b      	add	r3, r7
 800434e:	6818      	ldr	r0, [r3, #0]
 8004350:	f7fc fdc8 	bl	8000ee4 <__aeabi_fmul>
 8004354:	4603      	mov	r3, r0
 8004356:	4a1a      	ldr	r2, [pc, #104]	@ (80043c0 <NLLS+0x2b68>)
 8004358:	443a      	add	r2, r7
 800435a:	6811      	ldr	r1, [r2, #0]
 800435c:	4618      	mov	r0, r3
 800435e:	f7fc fdc1 	bl	8000ee4 <__aeabi_fmul>
 8004362:	4603      	mov	r3, r0
 8004364:	4619      	mov	r1, r3
 8004366:	4630      	mov	r0, r6
 8004368:	f7fc fcb2 	bl	8000cd0 <__aeabi_fsub>
 800436c:	4603      	mov	r3, r0
 800436e:	4619      	mov	r1, r3
 8004370:	4628      	mov	r0, r5
 8004372:	f7fc fdb7 	bl	8000ee4 <__aeabi_fmul>
 8004376:	4603      	mov	r3, r0
 8004378:	461d      	mov	r5, r3
 800437a:	4b12      	ldr	r3, [pc, #72]	@ (80043c4 <NLLS+0x2b6c>)
 800437c:	443b      	add	r3, r7
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004386:	f852 2c34 	ldr.w	r2, [r2, #-52]
 800438a:	4413      	add	r3, r2
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4619      	mov	r1, r3
 8004390:	4b06      	ldr	r3, [pc, #24]	@ (80043ac <NLLS+0x2b54>)
 8004392:	443b      	add	r3, r7
 8004394:	6818      	ldr	r0, [r3, #0]
 8004396:	f7fc fc9b 	bl	8000cd0 <__aeabi_fsub>
 800439a:	4603      	mov	r3, r0
 800439c:	4619      	mov	r1, r3
 800439e:	4628      	mov	r0, r5
 80043a0:	e016      	b.n	80043d0 <NLLS+0x2b78>
 80043a2:	bf00      	nop
 80043a4:	00016fd4 	.word	0x00016fd4
 80043a8:	00017034 	.word	0x00017034
 80043ac:	0001702c 	.word	0x0001702c
 80043b0:	00017030 	.word	0x00017030
 80043b4:	00016fc4 	.word	0x00016fc4
 80043b8:	00016fc8 	.word	0x00016fc8
 80043bc:	00016fd0 	.word	0x00016fd0
 80043c0:	00016fd8 	.word	0x00016fd8
 80043c4:	00017008 	.word	0x00017008
 80043c8:	00017038 	.word	0x00017038
 80043cc:	00016fcc 	.word	0x00016fcc
 80043d0:	f7fc fd88 	bl	8000ee4 <__aeabi_fmul>
 80043d4:	4603      	mov	r3, r0
 80043d6:	461d      	mov	r5, r3
 80043d8:	4b98      	ldr	r3, [pc, #608]	@ (800463c <NLLS+0x2de4>)
 80043da:	443b      	add	r3, r7
 80043dc:	6819      	ldr	r1, [r3, #0]
 80043de:	4b98      	ldr	r3, [pc, #608]	@ (8004640 <NLLS+0x2de8>)
 80043e0:	443b      	add	r3, r7
 80043e2:	6818      	ldr	r0, [r3, #0]
 80043e4:	f7fc fd7e 	bl	8000ee4 <__aeabi_fmul>
 80043e8:	4603      	mov	r3, r0
 80043ea:	4a96      	ldr	r2, [pc, #600]	@ (8004644 <NLLS+0x2dec>)
 80043ec:	443a      	add	r2, r7
 80043ee:	6811      	ldr	r1, [r2, #0]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7fc fd77 	bl	8000ee4 <__aeabi_fmul>
 80043f6:	4603      	mov	r3, r0
 80043f8:	461e      	mov	r6, r3
 80043fa:	4b93      	ldr	r3, [pc, #588]	@ (8004648 <NLLS+0x2df0>)
 80043fc:	443b      	add	r3, r7
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004406:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 800440a:	4413      	add	r3, r2
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4619      	mov	r1, r3
 8004410:	4b8e      	ldr	r3, [pc, #568]	@ (800464c <NLLS+0x2df4>)
 8004412:	443b      	add	r3, r7
 8004414:	6818      	ldr	r0, [r3, #0]
 8004416:	f7fc fc5b 	bl	8000cd0 <__aeabi_fsub>
 800441a:	4603      	mov	r3, r0
 800441c:	4619      	mov	r1, r3
 800441e:	4630      	mov	r0, r6
 8004420:	f7fc fd60 	bl	8000ee4 <__aeabi_fmul>
 8004424:	4603      	mov	r3, r0
 8004426:	4619      	mov	r1, r3
 8004428:	4628      	mov	r0, r5
 800442a:	f7fc fc53 	bl	8000cd4 <__addsf3>
 800442e:	4603      	mov	r3, r0
 8004430:	461d      	mov	r5, r3
 8004432:	4b87      	ldr	r3, [pc, #540]	@ (8004650 <NLLS+0x2df8>)
 8004434:	443b      	add	r3, r7
 8004436:	6819      	ldr	r1, [r3, #0]
 8004438:	4b81      	ldr	r3, [pc, #516]	@ (8004640 <NLLS+0x2de8>)
 800443a:	443b      	add	r3, r7
 800443c:	6818      	ldr	r0, [r3, #0]
 800443e:	f7fc fd51 	bl	8000ee4 <__aeabi_fmul>
 8004442:	4603      	mov	r3, r0
 8004444:	4a83      	ldr	r2, [pc, #524]	@ (8004654 <NLLS+0x2dfc>)
 8004446:	443a      	add	r2, r7
 8004448:	6811      	ldr	r1, [r2, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f7fc fd4a 	bl	8000ee4 <__aeabi_fmul>
 8004450:	4603      	mov	r3, r0
 8004452:	461e      	mov	r6, r3
 8004454:	4b7c      	ldr	r3, [pc, #496]	@ (8004648 <NLLS+0x2df0>)
 8004456:	443b      	add	r3, r7
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004460:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8004464:	4413      	add	r3, r2
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4619      	mov	r1, r3
 800446a:	4b7b      	ldr	r3, [pc, #492]	@ (8004658 <NLLS+0x2e00>)
 800446c:	443b      	add	r3, r7
 800446e:	6818      	ldr	r0, [r3, #0]
 8004470:	f7fc fc2e 	bl	8000cd0 <__aeabi_fsub>
 8004474:	4603      	mov	r3, r0
 8004476:	4619      	mov	r1, r3
 8004478:	4630      	mov	r0, r6
 800447a:	f7fc fd33 	bl	8000ee4 <__aeabi_fmul>
 800447e:	4603      	mov	r3, r0
 8004480:	4619      	mov	r1, r3
 8004482:	4628      	mov	r0, r5
 8004484:	f7fc fc24 	bl	8000cd0 <__aeabi_fsub>
 8004488:	4603      	mov	r3, r0
 800448a:	461d      	mov	r5, r3
 800448c:	4b70      	ldr	r3, [pc, #448]	@ (8004650 <NLLS+0x2df8>)
 800448e:	443b      	add	r3, r7
 8004490:	6819      	ldr	r1, [r3, #0]
 8004492:	4b6a      	ldr	r3, [pc, #424]	@ (800463c <NLLS+0x2de4>)
 8004494:	443b      	add	r3, r7
 8004496:	6818      	ldr	r0, [r3, #0]
 8004498:	f7fc fd24 	bl	8000ee4 <__aeabi_fmul>
 800449c:	4603      	mov	r3, r0
 800449e:	461e      	mov	r6, r3
 80044a0:	4b6e      	ldr	r3, [pc, #440]	@ (800465c <NLLS+0x2e04>)
 80044a2:	443b      	add	r3, r7
 80044a4:	6819      	ldr	r1, [r3, #0]
 80044a6:	4b6b      	ldr	r3, [pc, #428]	@ (8004654 <NLLS+0x2dfc>)
 80044a8:	443b      	add	r3, r7
 80044aa:	6818      	ldr	r0, [r3, #0]
 80044ac:	f7fc fd1a 	bl	8000ee4 <__aeabi_fmul>
 80044b0:	4603      	mov	r3, r0
 80044b2:	4698      	mov	r8, r3
 80044b4:	4b63      	ldr	r3, [pc, #396]	@ (8004644 <NLLS+0x2dec>)
 80044b6:	443b      	add	r3, r7
 80044b8:	6819      	ldr	r1, [r3, #0]
 80044ba:	4b69      	ldr	r3, [pc, #420]	@ (8004660 <NLLS+0x2e08>)
 80044bc:	443b      	add	r3, r7
 80044be:	6818      	ldr	r0, [r3, #0]
 80044c0:	f7fc fd10 	bl	8000ee4 <__aeabi_fmul>
 80044c4:	4603      	mov	r3, r0
 80044c6:	4a67      	ldr	r2, [pc, #412]	@ (8004664 <NLLS+0x2e0c>)
 80044c8:	443a      	add	r2, r7
 80044ca:	6811      	ldr	r1, [r2, #0]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7fc fd09 	bl	8000ee4 <__aeabi_fmul>
 80044d2:	4603      	mov	r3, r0
 80044d4:	4619      	mov	r1, r3
 80044d6:	4640      	mov	r0, r8
 80044d8:	f7fc fbfa 	bl	8000cd0 <__aeabi_fsub>
 80044dc:	4603      	mov	r3, r0
 80044de:	4619      	mov	r1, r3
 80044e0:	4630      	mov	r0, r6
 80044e2:	f7fc fcff 	bl	8000ee4 <__aeabi_fmul>
 80044e6:	4603      	mov	r3, r0
 80044e8:	461e      	mov	r6, r3
 80044ea:	4b57      	ldr	r3, [pc, #348]	@ (8004648 <NLLS+0x2df0>)
 80044ec:	443b      	add	r3, r7
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80044f6:	f852 2c34 	ldr.w	r2, [r2, #-52]
 80044fa:	4413      	add	r3, r2
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4619      	mov	r1, r3
 8004500:	4b59      	ldr	r3, [pc, #356]	@ (8004668 <NLLS+0x2e10>)
 8004502:	443b      	add	r3, r7
 8004504:	6818      	ldr	r0, [r3, #0]
 8004506:	f7fc fbe3 	bl	8000cd0 <__aeabi_fsub>
 800450a:	4603      	mov	r3, r0
 800450c:	4619      	mov	r1, r3
 800450e:	4630      	mov	r0, r6
 8004510:	f7fc fce8 	bl	8000ee4 <__aeabi_fmul>
 8004514:	4603      	mov	r3, r0
 8004516:	461e      	mov	r6, r3
 8004518:	4b48      	ldr	r3, [pc, #288]	@ (800463c <NLLS+0x2de4>)
 800451a:	443b      	add	r3, r7
 800451c:	6819      	ldr	r1, [r3, #0]
 800451e:	4b48      	ldr	r3, [pc, #288]	@ (8004640 <NLLS+0x2de8>)
 8004520:	443b      	add	r3, r7
 8004522:	6818      	ldr	r0, [r3, #0]
 8004524:	f7fc fcde 	bl	8000ee4 <__aeabi_fmul>
 8004528:	4603      	mov	r3, r0
 800452a:	4a46      	ldr	r2, [pc, #280]	@ (8004644 <NLLS+0x2dec>)
 800452c:	443a      	add	r2, r7
 800452e:	6811      	ldr	r1, [r2, #0]
 8004530:	4618      	mov	r0, r3
 8004532:	f7fc fcd7 	bl	8000ee4 <__aeabi_fmul>
 8004536:	4603      	mov	r3, r0
 8004538:	4698      	mov	r8, r3
 800453a:	4b43      	ldr	r3, [pc, #268]	@ (8004648 <NLLS+0x2df0>)
 800453c:	443b      	add	r3, r7
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004546:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 800454a:	4413      	add	r3, r2
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4619      	mov	r1, r3
 8004550:	4b3e      	ldr	r3, [pc, #248]	@ (800464c <NLLS+0x2df4>)
 8004552:	443b      	add	r3, r7
 8004554:	6818      	ldr	r0, [r3, #0]
 8004556:	f7fc fbbb 	bl	8000cd0 <__aeabi_fsub>
 800455a:	4603      	mov	r3, r0
 800455c:	4619      	mov	r1, r3
 800455e:	4640      	mov	r0, r8
 8004560:	f7fc fcc0 	bl	8000ee4 <__aeabi_fmul>
 8004564:	4603      	mov	r3, r0
 8004566:	4619      	mov	r1, r3
 8004568:	4630      	mov	r0, r6
 800456a:	f7fc fbb3 	bl	8000cd4 <__addsf3>
 800456e:	4603      	mov	r3, r0
 8004570:	461e      	mov	r6, r3
 8004572:	4b37      	ldr	r3, [pc, #220]	@ (8004650 <NLLS+0x2df8>)
 8004574:	443b      	add	r3, r7
 8004576:	6819      	ldr	r1, [r3, #0]
 8004578:	4b31      	ldr	r3, [pc, #196]	@ (8004640 <NLLS+0x2de8>)
 800457a:	443b      	add	r3, r7
 800457c:	6818      	ldr	r0, [r3, #0]
 800457e:	f7fc fcb1 	bl	8000ee4 <__aeabi_fmul>
 8004582:	4603      	mov	r3, r0
 8004584:	4a33      	ldr	r2, [pc, #204]	@ (8004654 <NLLS+0x2dfc>)
 8004586:	443a      	add	r2, r7
 8004588:	6811      	ldr	r1, [r2, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f7fc fcaa 	bl	8000ee4 <__aeabi_fmul>
 8004590:	4603      	mov	r3, r0
 8004592:	4698      	mov	r8, r3
 8004594:	4b2c      	ldr	r3, [pc, #176]	@ (8004648 <NLLS+0x2df0>)
 8004596:	443b      	add	r3, r7
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80045a0:	f852 2c38 	ldr.w	r2, [r2, #-56]
 80045a4:	4413      	add	r3, r2
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4619      	mov	r1, r3
 80045aa:	4b2b      	ldr	r3, [pc, #172]	@ (8004658 <NLLS+0x2e00>)
 80045ac:	443b      	add	r3, r7
 80045ae:	6818      	ldr	r0, [r3, #0]
 80045b0:	f7fc fb8e 	bl	8000cd0 <__aeabi_fsub>
 80045b4:	4603      	mov	r3, r0
 80045b6:	4619      	mov	r1, r3
 80045b8:	4640      	mov	r0, r8
 80045ba:	f7fc fc93 	bl	8000ee4 <__aeabi_fmul>
 80045be:	4603      	mov	r3, r0
 80045c0:	4619      	mov	r1, r3
 80045c2:	4630      	mov	r0, r6
 80045c4:	f7fc fb84 	bl	8000cd0 <__aeabi_fsub>
 80045c8:	4603      	mov	r3, r0
 80045ca:	4619      	mov	r1, r3
 80045cc:	4628      	mov	r0, r5
 80045ce:	f7fc fc89 	bl	8000ee4 <__aeabi_fmul>
 80045d2:	4603      	mov	r3, r0
 80045d4:	4619      	mov	r1, r3
 80045d6:	4620      	mov	r0, r4
 80045d8:	f7fc fc84 	bl	8000ee4 <__aeabi_fmul>
 80045dc:	4603      	mov	r3, r0
 80045de:	461c      	mov	r4, r3
 80045e0:	4b17      	ldr	r3, [pc, #92]	@ (8004640 <NLLS+0x2de8>)
 80045e2:	443b      	add	r3, r7
 80045e4:	6819      	ldr	r1, [r3, #0]
 80045e6:	4b16      	ldr	r3, [pc, #88]	@ (8004640 <NLLS+0x2de8>)
 80045e8:	443b      	add	r3, r7
 80045ea:	6818      	ldr	r0, [r3, #0]
 80045ec:	f7fc fc7a 	bl	8000ee4 <__aeabi_fmul>
 80045f0:	4603      	mov	r3, r0
 80045f2:	4a12      	ldr	r2, [pc, #72]	@ (800463c <NLLS+0x2de4>)
 80045f4:	443a      	add	r2, r7
 80045f6:	6811      	ldr	r1, [r2, #0]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fc fc73 	bl	8000ee4 <__aeabi_fmul>
 80045fe:	4603      	mov	r3, r0
 8004600:	4a0e      	ldr	r2, [pc, #56]	@ (800463c <NLLS+0x2de4>)
 8004602:	443a      	add	r2, r7
 8004604:	6811      	ldr	r1, [r2, #0]
 8004606:	4618      	mov	r0, r3
 8004608:	f7fc fc6c 	bl	8000ee4 <__aeabi_fmul>
 800460c:	4603      	mov	r3, r0
 800460e:	4a10      	ldr	r2, [pc, #64]	@ (8004650 <NLLS+0x2df8>)
 8004610:	443a      	add	r2, r7
 8004612:	6811      	ldr	r1, [r2, #0]
 8004614:	4618      	mov	r0, r3
 8004616:	f7fc fc65 	bl	8000ee4 <__aeabi_fmul>
 800461a:	4603      	mov	r3, r0
 800461c:	4a0c      	ldr	r2, [pc, #48]	@ (8004650 <NLLS+0x2df8>)
 800461e:	443a      	add	r2, r7
 8004620:	6811      	ldr	r1, [r2, #0]
 8004622:	4618      	mov	r0, r3
 8004624:	f7fc fc5e 	bl	8000ee4 <__aeabi_fmul>
 8004628:	4603      	mov	r3, r0
 800462a:	4a0d      	ldr	r2, [pc, #52]	@ (8004660 <NLLS+0x2e08>)
 800462c:	443a      	add	r2, r7
 800462e:	6811      	ldr	r1, [r2, #0]
 8004630:	4618      	mov	r0, r3
 8004632:	f7fc fc57 	bl	8000ee4 <__aeabi_fmul>
 8004636:	4603      	mov	r3, r0
 8004638:	e018      	b.n	800466c <NLLS+0x2e14>
 800463a:	bf00      	nop
 800463c:	00017034 	.word	0x00017034
 8004640:	00017038 	.word	0x00017038
 8004644:	00016fc8 	.word	0x00016fc8
 8004648:	00017008 	.word	0x00017008
 800464c:	00017024 	.word	0x00017024
 8004650:	00017030 	.word	0x00017030
 8004654:	00016fd0 	.word	0x00016fd0
 8004658:	00017028 	.word	0x00017028
 800465c:	00016fd4 	.word	0x00016fd4
 8004660:	00016fc4 	.word	0x00016fc4
 8004664:	00016fd8 	.word	0x00016fd8
 8004668:	0001702c 	.word	0x0001702c
 800466c:	4a98      	ldr	r2, [pc, #608]	@ (80048d0 <NLLS+0x3078>)
 800466e:	443a      	add	r2, r7
 8004670:	6811      	ldr	r1, [r2, #0]
 8004672:	4618      	mov	r0, r3
 8004674:	f7fc fc36 	bl	8000ee4 <__aeabi_fmul>
 8004678:	4603      	mov	r3, r0
 800467a:	461d      	mov	r5, r3
 800467c:	4b95      	ldr	r3, [pc, #596]	@ (80048d4 <NLLS+0x307c>)
 800467e:	443b      	add	r3, r7
 8004680:	6819      	ldr	r1, [r3, #0]
 8004682:	4b94      	ldr	r3, [pc, #592]	@ (80048d4 <NLLS+0x307c>)
 8004684:	443b      	add	r3, r7
 8004686:	6818      	ldr	r0, [r3, #0]
 8004688:	f7fc fc2c 	bl	8000ee4 <__aeabi_fmul>
 800468c:	4603      	mov	r3, r0
 800468e:	4a91      	ldr	r2, [pc, #580]	@ (80048d4 <NLLS+0x307c>)
 8004690:	443a      	add	r2, r7
 8004692:	6811      	ldr	r1, [r2, #0]
 8004694:	4618      	mov	r0, r3
 8004696:	f7fc fc25 	bl	8000ee4 <__aeabi_fmul>
 800469a:	4603      	mov	r3, r0
 800469c:	4619      	mov	r1, r3
 800469e:	4628      	mov	r0, r5
 80046a0:	f7fc fc20 	bl	8000ee4 <__aeabi_fmul>
 80046a4:	4603      	mov	r3, r0
 80046a6:	4a8c      	ldr	r2, [pc, #560]	@ (80048d8 <NLLS+0x3080>)
 80046a8:	443a      	add	r2, r7
 80046aa:	6811      	ldr	r1, [r2, #0]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fc fc19 	bl	8000ee4 <__aeabi_fmul>
 80046b2:	4603      	mov	r3, r0
 80046b4:	4a88      	ldr	r2, [pc, #544]	@ (80048d8 <NLLS+0x3080>)
 80046b6:	443a      	add	r2, r7
 80046b8:	6811      	ldr	r1, [r2, #0]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fc fc12 	bl	8000ee4 <__aeabi_fmul>
 80046c0:	4603      	mov	r3, r0
 80046c2:	4619      	mov	r1, r3
 80046c4:	4620      	mov	r0, r4
 80046c6:	f7fc fcc1 	bl	800104c <__aeabi_fdiv>
 80046ca:	4603      	mov	r3, r0
 80046cc:	461c      	mov	r4, r3
 80046ce:	4b83      	ldr	r3, [pc, #524]	@ (80048dc <NLLS+0x3084>)
 80046d0:	443b      	add	r3, r7
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80046da:	f852 2c34 	ldr.w	r2, [r2, #-52]
 80046de:	4413      	add	r3, r2
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4619      	mov	r1, r3
 80046e4:	4b7e      	ldr	r3, [pc, #504]	@ (80048e0 <NLLS+0x3088>)
 80046e6:	443b      	add	r3, r7
 80046e8:	6818      	ldr	r0, [r3, #0]
 80046ea:	f7fc faf1 	bl	8000cd0 <__aeabi_fsub>
 80046ee:	4603      	mov	r3, r0
 80046f0:	4619      	mov	r1, r3
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7fc faee 	bl	8000cd4 <__addsf3>
 80046f8:	4603      	mov	r3, r0
 80046fa:	461d      	mov	r5, r3
 80046fc:	4b79      	ldr	r3, [pc, #484]	@ (80048e4 <NLLS+0x308c>)
 80046fe:	443b      	add	r3, r7
 8004700:	6819      	ldr	r1, [r3, #0]
 8004702:	4b79      	ldr	r3, [pc, #484]	@ (80048e8 <NLLS+0x3090>)
 8004704:	443b      	add	r3, r7
 8004706:	6818      	ldr	r0, [r3, #0]
 8004708:	f7fc fbec 	bl	8000ee4 <__aeabi_fmul>
 800470c:	4603      	mov	r3, r0
 800470e:	461e      	mov	r6, r3
 8004710:	4b76      	ldr	r3, [pc, #472]	@ (80048ec <NLLS+0x3094>)
 8004712:	443b      	add	r3, r7
 8004714:	6819      	ldr	r1, [r3, #0]
 8004716:	4b76      	ldr	r3, [pc, #472]	@ (80048f0 <NLLS+0x3098>)
 8004718:	443b      	add	r3, r7
 800471a:	6818      	ldr	r0, [r3, #0]
 800471c:	f7fc fbe2 	bl	8000ee4 <__aeabi_fmul>
 8004720:	4603      	mov	r3, r0
 8004722:	4698      	mov	r8, r3
 8004724:	4b6c      	ldr	r3, [pc, #432]	@ (80048d8 <NLLS+0x3080>)
 8004726:	443b      	add	r3, r7
 8004728:	6819      	ldr	r1, [r3, #0]
 800472a:	4b69      	ldr	r3, [pc, #420]	@ (80048d0 <NLLS+0x3078>)
 800472c:	443b      	add	r3, r7
 800472e:	6818      	ldr	r0, [r3, #0]
 8004730:	f7fc fbd8 	bl	8000ee4 <__aeabi_fmul>
 8004734:	4603      	mov	r3, r0
 8004736:	4a6f      	ldr	r2, [pc, #444]	@ (80048f4 <NLLS+0x309c>)
 8004738:	443a      	add	r2, r7
 800473a:	6811      	ldr	r1, [r2, #0]
 800473c:	4618      	mov	r0, r3
 800473e:	f7fc fbd1 	bl	8000ee4 <__aeabi_fmul>
 8004742:	4603      	mov	r3, r0
 8004744:	4619      	mov	r1, r3
 8004746:	4640      	mov	r0, r8
 8004748:	f7fc fac2 	bl	8000cd0 <__aeabi_fsub>
 800474c:	4603      	mov	r3, r0
 800474e:	4619      	mov	r1, r3
 8004750:	4630      	mov	r0, r6
 8004752:	f7fc fbc7 	bl	8000ee4 <__aeabi_fmul>
 8004756:	4603      	mov	r3, r0
 8004758:	461e      	mov	r6, r3
 800475a:	4b60      	ldr	r3, [pc, #384]	@ (80048dc <NLLS+0x3084>)
 800475c:	443b      	add	r3, r7
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004766:	f852 2c34 	ldr.w	r2, [r2, #-52]
 800476a:	4413      	add	r3, r2
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4619      	mov	r1, r3
 8004770:	4b5b      	ldr	r3, [pc, #364]	@ (80048e0 <NLLS+0x3088>)
 8004772:	443b      	add	r3, r7
 8004774:	6818      	ldr	r0, [r3, #0]
 8004776:	f7fc faab 	bl	8000cd0 <__aeabi_fsub>
 800477a:	4603      	mov	r3, r0
 800477c:	4619      	mov	r1, r3
 800477e:	4630      	mov	r0, r6
 8004780:	f7fc fbb0 	bl	8000ee4 <__aeabi_fmul>
 8004784:	4603      	mov	r3, r0
 8004786:	461e      	mov	r6, r3
 8004788:	4b57      	ldr	r3, [pc, #348]	@ (80048e8 <NLLS+0x3090>)
 800478a:	443b      	add	r3, r7
 800478c:	6819      	ldr	r1, [r3, #0]
 800478e:	4b5a      	ldr	r3, [pc, #360]	@ (80048f8 <NLLS+0x30a0>)
 8004790:	443b      	add	r3, r7
 8004792:	6818      	ldr	r0, [r3, #0]
 8004794:	f7fc fba6 	bl	8000ee4 <__aeabi_fmul>
 8004798:	4603      	mov	r3, r0
 800479a:	4a4f      	ldr	r2, [pc, #316]	@ (80048d8 <NLLS+0x3080>)
 800479c:	443a      	add	r2, r7
 800479e:	6811      	ldr	r1, [r2, #0]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7fc fb9f 	bl	8000ee4 <__aeabi_fmul>
 80047a6:	4603      	mov	r3, r0
 80047a8:	4698      	mov	r8, r3
 80047aa:	4b4c      	ldr	r3, [pc, #304]	@ (80048dc <NLLS+0x3084>)
 80047ac:	443b      	add	r3, r7
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80047b6:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 80047ba:	4413      	add	r3, r2
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4619      	mov	r1, r3
 80047c0:	4b4e      	ldr	r3, [pc, #312]	@ (80048fc <NLLS+0x30a4>)
 80047c2:	443b      	add	r3, r7
 80047c4:	6818      	ldr	r0, [r3, #0]
 80047c6:	f7fc fa83 	bl	8000cd0 <__aeabi_fsub>
 80047ca:	4603      	mov	r3, r0
 80047cc:	4619      	mov	r1, r3
 80047ce:	4640      	mov	r0, r8
 80047d0:	f7fc fb88 	bl	8000ee4 <__aeabi_fmul>
 80047d4:	4603      	mov	r3, r0
 80047d6:	4619      	mov	r1, r3
 80047d8:	4630      	mov	r0, r6
 80047da:	f7fc fa7b 	bl	8000cd4 <__addsf3>
 80047de:	4603      	mov	r3, r0
 80047e0:	461e      	mov	r6, r3
 80047e2:	4b40      	ldr	r3, [pc, #256]	@ (80048e4 <NLLS+0x308c>)
 80047e4:	443b      	add	r3, r7
 80047e6:	6819      	ldr	r1, [r3, #0]
 80047e8:	4b43      	ldr	r3, [pc, #268]	@ (80048f8 <NLLS+0x30a0>)
 80047ea:	443b      	add	r3, r7
 80047ec:	6818      	ldr	r0, [r3, #0]
 80047ee:	f7fc fb79 	bl	8000ee4 <__aeabi_fmul>
 80047f2:	4603      	mov	r3, r0
 80047f4:	4a3e      	ldr	r2, [pc, #248]	@ (80048f0 <NLLS+0x3098>)
 80047f6:	443a      	add	r2, r7
 80047f8:	6811      	ldr	r1, [r2, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fc fb72 	bl	8000ee4 <__aeabi_fmul>
 8004800:	4603      	mov	r3, r0
 8004802:	4698      	mov	r8, r3
 8004804:	4b35      	ldr	r3, [pc, #212]	@ (80048dc <NLLS+0x3084>)
 8004806:	443b      	add	r3, r7
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004810:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8004814:	4413      	add	r3, r2
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4619      	mov	r1, r3
 800481a:	4b39      	ldr	r3, [pc, #228]	@ (8004900 <NLLS+0x30a8>)
 800481c:	443b      	add	r3, r7
 800481e:	6818      	ldr	r0, [r3, #0]
 8004820:	f7fc fa56 	bl	8000cd0 <__aeabi_fsub>
 8004824:	4603      	mov	r3, r0
 8004826:	4619      	mov	r1, r3
 8004828:	4640      	mov	r0, r8
 800482a:	f7fc fb5b 	bl	8000ee4 <__aeabi_fmul>
 800482e:	4603      	mov	r3, r0
 8004830:	4619      	mov	r1, r3
 8004832:	4630      	mov	r0, r6
 8004834:	f7fc fa4c 	bl	8000cd0 <__aeabi_fsub>
 8004838:	4603      	mov	r3, r0
 800483a:	4619      	mov	r1, r3
 800483c:	4628      	mov	r0, r5
 800483e:	f7fc fb51 	bl	8000ee4 <__aeabi_fmul>
 8004842:	4603      	mov	r3, r0
 8004844:	461d      	mov	r5, r3
 8004846:	4b2c      	ldr	r3, [pc, #176]	@ (80048f8 <NLLS+0x30a0>)
 8004848:	443b      	add	r3, r7
 800484a:	6819      	ldr	r1, [r3, #0]
 800484c:	4b2a      	ldr	r3, [pc, #168]	@ (80048f8 <NLLS+0x30a0>)
 800484e:	443b      	add	r3, r7
 8004850:	6818      	ldr	r0, [r3, #0]
 8004852:	f7fc fb47 	bl	8000ee4 <__aeabi_fmul>
 8004856:	4603      	mov	r3, r0
 8004858:	4a23      	ldr	r2, [pc, #140]	@ (80048e8 <NLLS+0x3090>)
 800485a:	443a      	add	r2, r7
 800485c:	6811      	ldr	r1, [r2, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f7fc fb40 	bl	8000ee4 <__aeabi_fmul>
 8004864:	4603      	mov	r3, r0
 8004866:	4a1f      	ldr	r2, [pc, #124]	@ (80048e4 <NLLS+0x308c>)
 8004868:	443a      	add	r2, r7
 800486a:	6811      	ldr	r1, [r2, #0]
 800486c:	4618      	mov	r0, r3
 800486e:	f7fc fb39 	bl	8000ee4 <__aeabi_fmul>
 8004872:	4603      	mov	r3, r0
 8004874:	4a16      	ldr	r2, [pc, #88]	@ (80048d0 <NLLS+0x3078>)
 8004876:	443a      	add	r2, r7
 8004878:	6811      	ldr	r1, [r2, #0]
 800487a:	4618      	mov	r0, r3
 800487c:	f7fc fb32 	bl	8000ee4 <__aeabi_fmul>
 8004880:	4603      	mov	r3, r0
 8004882:	4a14      	ldr	r2, [pc, #80]	@ (80048d4 <NLLS+0x307c>)
 8004884:	443a      	add	r2, r7
 8004886:	6811      	ldr	r1, [r2, #0]
 8004888:	4618      	mov	r0, r3
 800488a:	f7fc fb2b 	bl	8000ee4 <__aeabi_fmul>
 800488e:	4603      	mov	r3, r0
 8004890:	4a11      	ldr	r2, [pc, #68]	@ (80048d8 <NLLS+0x3080>)
 8004892:	443a      	add	r2, r7
 8004894:	6811      	ldr	r1, [r2, #0]
 8004896:	4618      	mov	r0, r3
 8004898:	f7fc fb24 	bl	8000ee4 <__aeabi_fmul>
 800489c:	4603      	mov	r3, r0
 800489e:	4619      	mov	r1, r3
 80048a0:	4628      	mov	r0, r5
 80048a2:	f7fc fbd3 	bl	800104c <__aeabi_fdiv>
 80048a6:	4603      	mov	r3, r0
 80048a8:	4619      	mov	r1, r3
 80048aa:	4620      	mov	r0, r4
 80048ac:	f7fc fa10 	bl	8000cd0 <__aeabi_fsub>
 80048b0:	4603      	mov	r3, r0
 80048b2:	4618      	mov	r0, r3
 80048b4:	f24a 0340 	movw	r3, #41024	@ 0xa040
 80048b8:	443b      	add	r3, r7
 80048ba:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 80048be:	4b07      	ldr	r3, [pc, #28]	@ (80048dc <NLLS+0x3084>)
 80048c0:	443b      	add	r3, r7
 80048c2:	6819      	ldr	r1, [r3, #0]
 80048c4:	f641 6368 	movw	r3, #7784	@ 0x1e68
 80048c8:	440b      	add	r3, r1
 80048ca:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80048ce:	e019      	b.n	8004904 <NLLS+0x30ac>
 80048d0:	00016fc4 	.word	0x00016fc4
 80048d4:	00016fcc 	.word	0x00016fcc
 80048d8:	00016fc8 	.word	0x00016fc8
 80048dc:	00017008 	.word	0x00017008
 80048e0:	0001702c 	.word	0x0001702c
 80048e4:	00017030 	.word	0x00017030
 80048e8:	00017034 	.word	0x00017034
 80048ec:	00016fd4 	.word	0x00016fd4
 80048f0:	00016fd0 	.word	0x00016fd0
 80048f4:	00016fd8 	.word	0x00016fd8
 80048f8:	00017038 	.word	0x00017038
 80048fc:	00017024 	.word	0x00017024
 8004900:	00017028 	.word	0x00017028

			mat_H[8][i] = (2*sin_lambda*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/(sx*sx*sy*sy*sz*sz*(cos_lambda*cos_lambda*cos_lambda)*cos_phi*cos_phi*(cos_rho*cos_rho)) + (2*(sy*sz*(cos_lambda*sin_rho + cos_rho*sin_lambda*sin_phi)*(bx - mx[i]) - sx*sz*cos_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8004904:	4b96      	ldr	r3, [pc, #600]	@ (8004b60 <NLLS+0x3308>)
 8004906:	443b      	add	r3, r7
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4619      	mov	r1, r3
 800490c:	4618      	mov	r0, r3
 800490e:	f7fc f9e1 	bl	8000cd4 <__addsf3>
 8004912:	4603      	mov	r3, r0
 8004914:	461c      	mov	r4, r3
 8004916:	4b93      	ldr	r3, [pc, #588]	@ (8004b64 <NLLS+0x330c>)
 8004918:	443b      	add	r3, r7
 800491a:	6819      	ldr	r1, [r3, #0]
 800491c:	4b92      	ldr	r3, [pc, #584]	@ (8004b68 <NLLS+0x3310>)
 800491e:	443b      	add	r3, r7
 8004920:	6818      	ldr	r0, [r3, #0]
 8004922:	f7fc fadf 	bl	8000ee4 <__aeabi_fmul>
 8004926:	4603      	mov	r3, r0
 8004928:	461d      	mov	r5, r3
 800492a:	4b90      	ldr	r3, [pc, #576]	@ (8004b6c <NLLS+0x3314>)
 800492c:	443b      	add	r3, r7
 800492e:	6819      	ldr	r1, [r3, #0]
 8004930:	4b8b      	ldr	r3, [pc, #556]	@ (8004b60 <NLLS+0x3308>)
 8004932:	443b      	add	r3, r7
 8004934:	6818      	ldr	r0, [r3, #0]
 8004936:	f7fc fad5 	bl	8000ee4 <__aeabi_fmul>
 800493a:	4603      	mov	r3, r0
 800493c:	461e      	mov	r6, r3
 800493e:	4b8c      	ldr	r3, [pc, #560]	@ (8004b70 <NLLS+0x3318>)
 8004940:	443b      	add	r3, r7
 8004942:	6819      	ldr	r1, [r3, #0]
 8004944:	4b8b      	ldr	r3, [pc, #556]	@ (8004b74 <NLLS+0x331c>)
 8004946:	443b      	add	r3, r7
 8004948:	6818      	ldr	r0, [r3, #0]
 800494a:	f7fc facb 	bl	8000ee4 <__aeabi_fmul>
 800494e:	4603      	mov	r3, r0
 8004950:	4a89      	ldr	r2, [pc, #548]	@ (8004b78 <NLLS+0x3320>)
 8004952:	443a      	add	r2, r7
 8004954:	6811      	ldr	r1, [r2, #0]
 8004956:	4618      	mov	r0, r3
 8004958:	f7fc fac4 	bl	8000ee4 <__aeabi_fmul>
 800495c:	4603      	mov	r3, r0
 800495e:	4619      	mov	r1, r3
 8004960:	4630      	mov	r0, r6
 8004962:	f7fc f9b5 	bl	8000cd0 <__aeabi_fsub>
 8004966:	4603      	mov	r3, r0
 8004968:	4619      	mov	r1, r3
 800496a:	4628      	mov	r0, r5
 800496c:	f7fc faba 	bl	8000ee4 <__aeabi_fmul>
 8004970:	4603      	mov	r3, r0
 8004972:	461d      	mov	r5, r3
 8004974:	4b81      	ldr	r3, [pc, #516]	@ (8004b7c <NLLS+0x3324>)
 8004976:	443b      	add	r3, r7
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004980:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8004984:	4413      	add	r3, r2
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4619      	mov	r1, r3
 800498a:	4b7d      	ldr	r3, [pc, #500]	@ (8004b80 <NLLS+0x3328>)
 800498c:	443b      	add	r3, r7
 800498e:	6818      	ldr	r0, [r3, #0]
 8004990:	f7fc f99e 	bl	8000cd0 <__aeabi_fsub>
 8004994:	4603      	mov	r3, r0
 8004996:	4619      	mov	r1, r3
 8004998:	4628      	mov	r0, r5
 800499a:	f7fc faa3 	bl	8000ee4 <__aeabi_fmul>
 800499e:	4603      	mov	r3, r0
 80049a0:	461d      	mov	r5, r3
 80049a2:	4b71      	ldr	r3, [pc, #452]	@ (8004b68 <NLLS+0x3310>)
 80049a4:	443b      	add	r3, r7
 80049a6:	6819      	ldr	r1, [r3, #0]
 80049a8:	4b76      	ldr	r3, [pc, #472]	@ (8004b84 <NLLS+0x332c>)
 80049aa:	443b      	add	r3, r7
 80049ac:	6818      	ldr	r0, [r3, #0]
 80049ae:	f7fc fa99 	bl	8000ee4 <__aeabi_fmul>
 80049b2:	4603      	mov	r3, r0
 80049b4:	4a6e      	ldr	r2, [pc, #440]	@ (8004b70 <NLLS+0x3318>)
 80049b6:	443a      	add	r2, r7
 80049b8:	6811      	ldr	r1, [r2, #0]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fc fa92 	bl	8000ee4 <__aeabi_fmul>
 80049c0:	4603      	mov	r3, r0
 80049c2:	461e      	mov	r6, r3
 80049c4:	4b6d      	ldr	r3, [pc, #436]	@ (8004b7c <NLLS+0x3324>)
 80049c6:	443b      	add	r3, r7
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80049d0:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 80049d4:	4413      	add	r3, r2
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4619      	mov	r1, r3
 80049da:	4b6b      	ldr	r3, [pc, #428]	@ (8004b88 <NLLS+0x3330>)
 80049dc:	443b      	add	r3, r7
 80049de:	6818      	ldr	r0, [r3, #0]
 80049e0:	f7fc f976 	bl	8000cd0 <__aeabi_fsub>
 80049e4:	4603      	mov	r3, r0
 80049e6:	4619      	mov	r1, r3
 80049e8:	4630      	mov	r0, r6
 80049ea:	f7fc fa7b 	bl	8000ee4 <__aeabi_fmul>
 80049ee:	4603      	mov	r3, r0
 80049f0:	4619      	mov	r1, r3
 80049f2:	4628      	mov	r0, r5
 80049f4:	f7fc f96e 	bl	8000cd4 <__addsf3>
 80049f8:	4603      	mov	r3, r0
 80049fa:	461d      	mov	r5, r3
 80049fc:	4b59      	ldr	r3, [pc, #356]	@ (8004b64 <NLLS+0x330c>)
 80049fe:	443b      	add	r3, r7
 8004a00:	6819      	ldr	r1, [r3, #0]
 8004a02:	4b60      	ldr	r3, [pc, #384]	@ (8004b84 <NLLS+0x332c>)
 8004a04:	443b      	add	r3, r7
 8004a06:	6818      	ldr	r0, [r3, #0]
 8004a08:	f7fc fa6c 	bl	8000ee4 <__aeabi_fmul>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	4a54      	ldr	r2, [pc, #336]	@ (8004b60 <NLLS+0x3308>)
 8004a10:	443a      	add	r2, r7
 8004a12:	6811      	ldr	r1, [r2, #0]
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7fc fa65 	bl	8000ee4 <__aeabi_fmul>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	461e      	mov	r6, r3
 8004a1e:	4b57      	ldr	r3, [pc, #348]	@ (8004b7c <NLLS+0x3324>)
 8004a20:	443b      	add	r3, r7
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004a2a:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8004a2e:	4413      	add	r3, r2
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4619      	mov	r1, r3
 8004a34:	4b55      	ldr	r3, [pc, #340]	@ (8004b8c <NLLS+0x3334>)
 8004a36:	443b      	add	r3, r7
 8004a38:	6818      	ldr	r0, [r3, #0]
 8004a3a:	f7fc f949 	bl	8000cd0 <__aeabi_fsub>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	4619      	mov	r1, r3
 8004a42:	4630      	mov	r0, r6
 8004a44:	f7fc fa4e 	bl	8000ee4 <__aeabi_fmul>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	4628      	mov	r0, r5
 8004a4e:	f7fc f93f 	bl	8000cd0 <__aeabi_fsub>
 8004a52:	4603      	mov	r3, r0
 8004a54:	461d      	mov	r5, r3
 8004a56:	4b43      	ldr	r3, [pc, #268]	@ (8004b64 <NLLS+0x330c>)
 8004a58:	443b      	add	r3, r7
 8004a5a:	6819      	ldr	r1, [r3, #0]
 8004a5c:	4b42      	ldr	r3, [pc, #264]	@ (8004b68 <NLLS+0x3310>)
 8004a5e:	443b      	add	r3, r7
 8004a60:	6818      	ldr	r0, [r3, #0]
 8004a62:	f7fc fa3f 	bl	8000ee4 <__aeabi_fmul>
 8004a66:	4603      	mov	r3, r0
 8004a68:	461e      	mov	r6, r3
 8004a6a:	4b40      	ldr	r3, [pc, #256]	@ (8004b6c <NLLS+0x3314>)
 8004a6c:	443b      	add	r3, r7
 8004a6e:	6819      	ldr	r1, [r3, #0]
 8004a70:	4b3b      	ldr	r3, [pc, #236]	@ (8004b60 <NLLS+0x3308>)
 8004a72:	443b      	add	r3, r7
 8004a74:	6818      	ldr	r0, [r3, #0]
 8004a76:	f7fc fa35 	bl	8000ee4 <__aeabi_fmul>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	4698      	mov	r8, r3
 8004a7e:	4b3c      	ldr	r3, [pc, #240]	@ (8004b70 <NLLS+0x3318>)
 8004a80:	443b      	add	r3, r7
 8004a82:	6819      	ldr	r1, [r3, #0]
 8004a84:	4b3b      	ldr	r3, [pc, #236]	@ (8004b74 <NLLS+0x331c>)
 8004a86:	443b      	add	r3, r7
 8004a88:	6818      	ldr	r0, [r3, #0]
 8004a8a:	f7fc fa2b 	bl	8000ee4 <__aeabi_fmul>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	4a39      	ldr	r2, [pc, #228]	@ (8004b78 <NLLS+0x3320>)
 8004a92:	443a      	add	r2, r7
 8004a94:	6811      	ldr	r1, [r2, #0]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fc fa24 	bl	8000ee4 <__aeabi_fmul>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	4640      	mov	r0, r8
 8004aa2:	f7fc f915 	bl	8000cd0 <__aeabi_fsub>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4630      	mov	r0, r6
 8004aac:	f7fc fa1a 	bl	8000ee4 <__aeabi_fmul>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	461e      	mov	r6, r3
 8004ab4:	4b31      	ldr	r3, [pc, #196]	@ (8004b7c <NLLS+0x3324>)
 8004ab6:	443b      	add	r3, r7
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004ac0:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4619      	mov	r1, r3
 8004aca:	4b2d      	ldr	r3, [pc, #180]	@ (8004b80 <NLLS+0x3328>)
 8004acc:	443b      	add	r3, r7
 8004ace:	6818      	ldr	r0, [r3, #0]
 8004ad0:	f7fc f8fe 	bl	8000cd0 <__aeabi_fsub>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	4630      	mov	r0, r6
 8004ada:	f7fc fa03 	bl	8000ee4 <__aeabi_fmul>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	461e      	mov	r6, r3
 8004ae2:	4b21      	ldr	r3, [pc, #132]	@ (8004b68 <NLLS+0x3310>)
 8004ae4:	443b      	add	r3, r7
 8004ae6:	6819      	ldr	r1, [r3, #0]
 8004ae8:	4b26      	ldr	r3, [pc, #152]	@ (8004b84 <NLLS+0x332c>)
 8004aea:	443b      	add	r3, r7
 8004aec:	6818      	ldr	r0, [r3, #0]
 8004aee:	f7fc f9f9 	bl	8000ee4 <__aeabi_fmul>
 8004af2:	4603      	mov	r3, r0
 8004af4:	4a1e      	ldr	r2, [pc, #120]	@ (8004b70 <NLLS+0x3318>)
 8004af6:	443a      	add	r2, r7
 8004af8:	6811      	ldr	r1, [r2, #0]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fc f9f2 	bl	8000ee4 <__aeabi_fmul>
 8004b00:	4603      	mov	r3, r0
 8004b02:	4698      	mov	r8, r3
 8004b04:	4b1d      	ldr	r3, [pc, #116]	@ (8004b7c <NLLS+0x3324>)
 8004b06:	443b      	add	r3, r7
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004b10:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8004b14:	4413      	add	r3, r2
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4619      	mov	r1, r3
 8004b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8004b88 <NLLS+0x3330>)
 8004b1c:	443b      	add	r3, r7
 8004b1e:	6818      	ldr	r0, [r3, #0]
 8004b20:	f7fc f8d6 	bl	8000cd0 <__aeabi_fsub>
 8004b24:	4603      	mov	r3, r0
 8004b26:	4619      	mov	r1, r3
 8004b28:	4640      	mov	r0, r8
 8004b2a:	f7fc f9db 	bl	8000ee4 <__aeabi_fmul>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	4619      	mov	r1, r3
 8004b32:	4630      	mov	r0, r6
 8004b34:	f7fc f8ce 	bl	8000cd4 <__addsf3>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	461e      	mov	r6, r3
 8004b3c:	4b09      	ldr	r3, [pc, #36]	@ (8004b64 <NLLS+0x330c>)
 8004b3e:	443b      	add	r3, r7
 8004b40:	6819      	ldr	r1, [r3, #0]
 8004b42:	4b10      	ldr	r3, [pc, #64]	@ (8004b84 <NLLS+0x332c>)
 8004b44:	443b      	add	r3, r7
 8004b46:	6818      	ldr	r0, [r3, #0]
 8004b48:	f7fc f9cc 	bl	8000ee4 <__aeabi_fmul>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	4a04      	ldr	r2, [pc, #16]	@ (8004b60 <NLLS+0x3308>)
 8004b50:	443a      	add	r2, r7
 8004b52:	6811      	ldr	r1, [r2, #0]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fc f9c5 	bl	8000ee4 <__aeabi_fmul>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	4698      	mov	r8, r3
 8004b5e:	e017      	b.n	8004b90 <NLLS+0x3338>
 8004b60:	00016fd0 	.word	0x00016fd0
 8004b64:	00017030 	.word	0x00017030
 8004b68:	00017034 	.word	0x00017034
 8004b6c:	00016fd4 	.word	0x00016fd4
 8004b70:	00016fc8 	.word	0x00016fc8
 8004b74:	00016fc4 	.word	0x00016fc4
 8004b78:	00016fd8 	.word	0x00016fd8
 8004b7c:	00017008 	.word	0x00017008
 8004b80:	0001702c 	.word	0x0001702c
 8004b84:	00017038 	.word	0x00017038
 8004b88:	00017024 	.word	0x00017024
 8004b8c:	00017028 	.word	0x00017028
 8004b90:	4b95      	ldr	r3, [pc, #596]	@ (8004de8 <NLLS+0x3590>)
 8004b92:	443b      	add	r3, r7
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004b9c:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	4b91      	ldr	r3, [pc, #580]	@ (8004dec <NLLS+0x3594>)
 8004ba8:	443b      	add	r3, r7
 8004baa:	6818      	ldr	r0, [r3, #0]
 8004bac:	f7fc f890 	bl	8000cd0 <__aeabi_fsub>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	4640      	mov	r0, r8
 8004bb6:	f7fc f995 	bl	8000ee4 <__aeabi_fmul>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	f7fc f886 	bl	8000cd0 <__aeabi_fsub>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	4628      	mov	r0, r5
 8004bca:	f7fc f98b 	bl	8000ee4 <__aeabi_fmul>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	f7fc f986 	bl	8000ee4 <__aeabi_fmul>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	461c      	mov	r4, r3
 8004bdc:	4b84      	ldr	r3, [pc, #528]	@ (8004df0 <NLLS+0x3598>)
 8004bde:	443b      	add	r3, r7
 8004be0:	6819      	ldr	r1, [r3, #0]
 8004be2:	4b83      	ldr	r3, [pc, #524]	@ (8004df0 <NLLS+0x3598>)
 8004be4:	443b      	add	r3, r7
 8004be6:	6818      	ldr	r0, [r3, #0]
 8004be8:	f7fc f97c 	bl	8000ee4 <__aeabi_fmul>
 8004bec:	4603      	mov	r3, r0
 8004bee:	4a81      	ldr	r2, [pc, #516]	@ (8004df4 <NLLS+0x359c>)
 8004bf0:	443a      	add	r2, r7
 8004bf2:	6811      	ldr	r1, [r2, #0]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7fc f975 	bl	8000ee4 <__aeabi_fmul>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	4a7d      	ldr	r2, [pc, #500]	@ (8004df4 <NLLS+0x359c>)
 8004bfe:	443a      	add	r2, r7
 8004c00:	6811      	ldr	r1, [r2, #0]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fc f96e 	bl	8000ee4 <__aeabi_fmul>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	4a7b      	ldr	r2, [pc, #492]	@ (8004df8 <NLLS+0x35a0>)
 8004c0c:	443a      	add	r2, r7
 8004c0e:	6811      	ldr	r1, [r2, #0]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fc f967 	bl	8000ee4 <__aeabi_fmul>
 8004c16:	4603      	mov	r3, r0
 8004c18:	4a77      	ldr	r2, [pc, #476]	@ (8004df8 <NLLS+0x35a0>)
 8004c1a:	443a      	add	r2, r7
 8004c1c:	6811      	ldr	r1, [r2, #0]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7fc f960 	bl	8000ee4 <__aeabi_fmul>
 8004c24:	4603      	mov	r3, r0
 8004c26:	461d      	mov	r5, r3
 8004c28:	4b74      	ldr	r3, [pc, #464]	@ (8004dfc <NLLS+0x35a4>)
 8004c2a:	443b      	add	r3, r7
 8004c2c:	6819      	ldr	r1, [r3, #0]
 8004c2e:	4b73      	ldr	r3, [pc, #460]	@ (8004dfc <NLLS+0x35a4>)
 8004c30:	443b      	add	r3, r7
 8004c32:	6818      	ldr	r0, [r3, #0]
 8004c34:	f7fc f956 	bl	8000ee4 <__aeabi_fmul>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	4a70      	ldr	r2, [pc, #448]	@ (8004dfc <NLLS+0x35a4>)
 8004c3c:	443a      	add	r2, r7
 8004c3e:	6811      	ldr	r1, [r2, #0]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7fc f94f 	bl	8000ee4 <__aeabi_fmul>
 8004c46:	4603      	mov	r3, r0
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4628      	mov	r0, r5
 8004c4c:	f7fc f94a 	bl	8000ee4 <__aeabi_fmul>
 8004c50:	4603      	mov	r3, r0
 8004c52:	4a6b      	ldr	r2, [pc, #428]	@ (8004e00 <NLLS+0x35a8>)
 8004c54:	443a      	add	r2, r7
 8004c56:	6811      	ldr	r1, [r2, #0]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7fc f943 	bl	8000ee4 <__aeabi_fmul>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	4a67      	ldr	r2, [pc, #412]	@ (8004e00 <NLLS+0x35a8>)
 8004c62:	443a      	add	r2, r7
 8004c64:	6811      	ldr	r1, [r2, #0]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fc f93c 	bl	8000ee4 <__aeabi_fmul>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	461d      	mov	r5, r3
 8004c70:	4b64      	ldr	r3, [pc, #400]	@ (8004e04 <NLLS+0x35ac>)
 8004c72:	443b      	add	r3, r7
 8004c74:	6819      	ldr	r1, [r3, #0]
 8004c76:	4b63      	ldr	r3, [pc, #396]	@ (8004e04 <NLLS+0x35ac>)
 8004c78:	443b      	add	r3, r7
 8004c7a:	6818      	ldr	r0, [r3, #0]
 8004c7c:	f7fc f932 	bl	8000ee4 <__aeabi_fmul>
 8004c80:	4603      	mov	r3, r0
 8004c82:	4619      	mov	r1, r3
 8004c84:	4628      	mov	r0, r5
 8004c86:	f7fc f92d 	bl	8000ee4 <__aeabi_fmul>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4620      	mov	r0, r4
 8004c90:	f7fc f9dc 	bl	800104c <__aeabi_fdiv>
 8004c94:	4603      	mov	r3, r0
 8004c96:	461c      	mov	r4, r3
 8004c98:	4b57      	ldr	r3, [pc, #348]	@ (8004df8 <NLLS+0x35a0>)
 8004c9a:	443b      	add	r3, r7
 8004c9c:	6819      	ldr	r1, [r3, #0]
 8004c9e:	4b55      	ldr	r3, [pc, #340]	@ (8004df4 <NLLS+0x359c>)
 8004ca0:	443b      	add	r3, r7
 8004ca2:	6818      	ldr	r0, [r3, #0]
 8004ca4:	f7fc f91e 	bl	8000ee4 <__aeabi_fmul>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	461d      	mov	r5, r3
 8004cac:	4b56      	ldr	r3, [pc, #344]	@ (8004e08 <NLLS+0x35b0>)
 8004cae:	443b      	add	r3, r7
 8004cb0:	6819      	ldr	r1, [r3, #0]
 8004cb2:	4b52      	ldr	r3, [pc, #328]	@ (8004dfc <NLLS+0x35a4>)
 8004cb4:	443b      	add	r3, r7
 8004cb6:	6818      	ldr	r0, [r3, #0]
 8004cb8:	f7fc f914 	bl	8000ee4 <__aeabi_fmul>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	461e      	mov	r6, r3
 8004cc0:	4b52      	ldr	r3, [pc, #328]	@ (8004e0c <NLLS+0x35b4>)
 8004cc2:	443b      	add	r3, r7
 8004cc4:	6819      	ldr	r1, [r3, #0]
 8004cc6:	4b4f      	ldr	r3, [pc, #316]	@ (8004e04 <NLLS+0x35ac>)
 8004cc8:	443b      	add	r3, r7
 8004cca:	6818      	ldr	r0, [r3, #0]
 8004ccc:	f7fc f90a 	bl	8000ee4 <__aeabi_fmul>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	4a4f      	ldr	r2, [pc, #316]	@ (8004e10 <NLLS+0x35b8>)
 8004cd4:	443a      	add	r2, r7
 8004cd6:	6811      	ldr	r1, [r2, #0]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7fc f903 	bl	8000ee4 <__aeabi_fmul>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	4630      	mov	r0, r6
 8004ce4:	f7fb fff6 	bl	8000cd4 <__addsf3>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	4619      	mov	r1, r3
 8004cec:	4628      	mov	r0, r5
 8004cee:	f7fc f8f9 	bl	8000ee4 <__aeabi_fmul>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	461d      	mov	r5, r3
 8004cf6:	4b3c      	ldr	r3, [pc, #240]	@ (8004de8 <NLLS+0x3590>)
 8004cf8:	443b      	add	r3, r7
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004d02:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8004d06:	4413      	add	r3, r2
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	4b41      	ldr	r3, [pc, #260]	@ (8004e14 <NLLS+0x35bc>)
 8004d0e:	443b      	add	r3, r7
 8004d10:	6818      	ldr	r0, [r3, #0]
 8004d12:	f7fb ffdd 	bl	8000cd0 <__aeabi_fsub>
 8004d16:	4603      	mov	r3, r0
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	f7fc f8e2 	bl	8000ee4 <__aeabi_fmul>
 8004d20:	4603      	mov	r3, r0
 8004d22:	461d      	mov	r5, r3
 8004d24:	4b34      	ldr	r3, [pc, #208]	@ (8004df8 <NLLS+0x35a0>)
 8004d26:	443b      	add	r3, r7
 8004d28:	6819      	ldr	r1, [r3, #0]
 8004d2a:	4b31      	ldr	r3, [pc, #196]	@ (8004df0 <NLLS+0x3598>)
 8004d2c:	443b      	add	r3, r7
 8004d2e:	6818      	ldr	r0, [r3, #0]
 8004d30:	f7fc f8d8 	bl	8000ee4 <__aeabi_fmul>
 8004d34:	4603      	mov	r3, r0
 8004d36:	4a31      	ldr	r2, [pc, #196]	@ (8004dfc <NLLS+0x35a4>)
 8004d38:	443a      	add	r2, r7
 8004d3a:	6811      	ldr	r1, [r2, #0]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7fc f8d1 	bl	8000ee4 <__aeabi_fmul>
 8004d42:	4603      	mov	r3, r0
 8004d44:	461e      	mov	r6, r3
 8004d46:	4b28      	ldr	r3, [pc, #160]	@ (8004de8 <NLLS+0x3590>)
 8004d48:	443b      	add	r3, r7
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004d52:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8004d56:	4413      	add	r3, r2
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	4b23      	ldr	r3, [pc, #140]	@ (8004dec <NLLS+0x3594>)
 8004d5e:	443b      	add	r3, r7
 8004d60:	6818      	ldr	r0, [r3, #0]
 8004d62:	f7fb ffb5 	bl	8000cd0 <__aeabi_fsub>
 8004d66:	4603      	mov	r3, r0
 8004d68:	4619      	mov	r1, r3
 8004d6a:	4630      	mov	r0, r6
 8004d6c:	f7fc f8ba 	bl	8000ee4 <__aeabi_fmul>
 8004d70:	4603      	mov	r3, r0
 8004d72:	4619      	mov	r1, r3
 8004d74:	4628      	mov	r0, r5
 8004d76:	f7fb ffab 	bl	8000cd0 <__aeabi_fsub>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7fb ffa8 	bl	8000cd4 <__addsf3>
 8004d84:	4603      	mov	r3, r0
 8004d86:	461d      	mov	r5, r3
 8004d88:	4b1b      	ldr	r3, [pc, #108]	@ (8004df8 <NLLS+0x35a0>)
 8004d8a:	443b      	add	r3, r7
 8004d8c:	6819      	ldr	r1, [r3, #0]
 8004d8e:	4b19      	ldr	r3, [pc, #100]	@ (8004df4 <NLLS+0x359c>)
 8004d90:	443b      	add	r3, r7
 8004d92:	6818      	ldr	r0, [r3, #0]
 8004d94:	f7fc f8a6 	bl	8000ee4 <__aeabi_fmul>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	461e      	mov	r6, r3
 8004d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8004e08 <NLLS+0x35b0>)
 8004d9e:	443b      	add	r3, r7
 8004da0:	6819      	ldr	r1, [r3, #0]
 8004da2:	4b1a      	ldr	r3, [pc, #104]	@ (8004e0c <NLLS+0x35b4>)
 8004da4:	443b      	add	r3, r7
 8004da6:	6818      	ldr	r0, [r3, #0]
 8004da8:	f7fc f89c 	bl	8000ee4 <__aeabi_fmul>
 8004dac:	4603      	mov	r3, r0
 8004dae:	4698      	mov	r8, r3
 8004db0:	4b14      	ldr	r3, [pc, #80]	@ (8004e04 <NLLS+0x35ac>)
 8004db2:	443b      	add	r3, r7
 8004db4:	6819      	ldr	r1, [r3, #0]
 8004db6:	4b11      	ldr	r3, [pc, #68]	@ (8004dfc <NLLS+0x35a4>)
 8004db8:	443b      	add	r3, r7
 8004dba:	6818      	ldr	r0, [r3, #0]
 8004dbc:	f7fc f892 	bl	8000ee4 <__aeabi_fmul>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	4a13      	ldr	r2, [pc, #76]	@ (8004e10 <NLLS+0x35b8>)
 8004dc4:	443a      	add	r2, r7
 8004dc6:	6811      	ldr	r1, [r2, #0]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7fc f88b 	bl	8000ee4 <__aeabi_fmul>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	4640      	mov	r0, r8
 8004dd4:	f7fb ff7c 	bl	8000cd0 <__aeabi_fsub>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	4619      	mov	r1, r3
 8004ddc:	4630      	mov	r0, r6
 8004dde:	f7fc f881 	bl	8000ee4 <__aeabi_fmul>
 8004de2:	4603      	mov	r3, r0
 8004de4:	461e      	mov	r6, r3
 8004de6:	e017      	b.n	8004e18 <NLLS+0x35c0>
 8004de8:	00017008 	.word	0x00017008
 8004dec:	00017028 	.word	0x00017028
 8004df0:	00017038 	.word	0x00017038
 8004df4:	00017034 	.word	0x00017034
 8004df8:	00017030 	.word	0x00017030
 8004dfc:	00016fc4 	.word	0x00016fc4
 8004e00:	00016fcc 	.word	0x00016fcc
 8004e04:	00016fc8 	.word	0x00016fc8
 8004e08:	00016fd4 	.word	0x00016fd4
 8004e0c:	00016fd0 	.word	0x00016fd0
 8004e10:	00016fd8 	.word	0x00016fd8
 8004e14:	0001702c 	.word	0x0001702c
 8004e18:	4b79      	ldr	r3, [pc, #484]	@ (8005000 <NLLS+0x37a8>)
 8004e1a:	443b      	add	r3, r7
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004e24:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8004e28:	4413      	add	r3, r2
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4b75      	ldr	r3, [pc, #468]	@ (8005004 <NLLS+0x37ac>)
 8004e30:	443b      	add	r3, r7
 8004e32:	6818      	ldr	r0, [r3, #0]
 8004e34:	f7fb ff4c 	bl	8000cd0 <__aeabi_fsub>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	4630      	mov	r0, r6
 8004e3e:	f7fc f851 	bl	8000ee4 <__aeabi_fmul>
 8004e42:	4603      	mov	r3, r0
 8004e44:	461e      	mov	r6, r3
 8004e46:	4b70      	ldr	r3, [pc, #448]	@ (8005008 <NLLS+0x37b0>)
 8004e48:	443b      	add	r3, r7
 8004e4a:	6819      	ldr	r1, [r3, #0]
 8004e4c:	4b6f      	ldr	r3, [pc, #444]	@ (800500c <NLLS+0x37b4>)
 8004e4e:	443b      	add	r3, r7
 8004e50:	6818      	ldr	r0, [r3, #0]
 8004e52:	f7fc f847 	bl	8000ee4 <__aeabi_fmul>
 8004e56:	4603      	mov	r3, r0
 8004e58:	4a6d      	ldr	r2, [pc, #436]	@ (8005010 <NLLS+0x37b8>)
 8004e5a:	443a      	add	r2, r7
 8004e5c:	6811      	ldr	r1, [r2, #0]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fc f840 	bl	8000ee4 <__aeabi_fmul>
 8004e64:	4603      	mov	r3, r0
 8004e66:	4698      	mov	r8, r3
 8004e68:	4b65      	ldr	r3, [pc, #404]	@ (8005000 <NLLS+0x37a8>)
 8004e6a:	443b      	add	r3, r7
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004e74:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8004e78:	4413      	add	r3, r2
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	4b65      	ldr	r3, [pc, #404]	@ (8005014 <NLLS+0x37bc>)
 8004e80:	443b      	add	r3, r7
 8004e82:	6818      	ldr	r0, [r3, #0]
 8004e84:	f7fb ff24 	bl	8000cd0 <__aeabi_fsub>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	4640      	mov	r0, r8
 8004e8e:	f7fc f829 	bl	8000ee4 <__aeabi_fmul>
 8004e92:	4603      	mov	r3, r0
 8004e94:	4619      	mov	r1, r3
 8004e96:	4630      	mov	r0, r6
 8004e98:	f7fb ff1c 	bl	8000cd4 <__addsf3>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	461e      	mov	r6, r3
 8004ea0:	4b5d      	ldr	r3, [pc, #372]	@ (8005018 <NLLS+0x37c0>)
 8004ea2:	443b      	add	r3, r7
 8004ea4:	6819      	ldr	r1, [r3, #0]
 8004ea6:	4b59      	ldr	r3, [pc, #356]	@ (800500c <NLLS+0x37b4>)
 8004ea8:	443b      	add	r3, r7
 8004eaa:	6818      	ldr	r0, [r3, #0]
 8004eac:	f7fc f81a 	bl	8000ee4 <__aeabi_fmul>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	4a5a      	ldr	r2, [pc, #360]	@ (800501c <NLLS+0x37c4>)
 8004eb4:	443a      	add	r2, r7
 8004eb6:	6811      	ldr	r1, [r2, #0]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7fc f813 	bl	8000ee4 <__aeabi_fmul>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	4698      	mov	r8, r3
 8004ec2:	4b4f      	ldr	r3, [pc, #316]	@ (8005000 <NLLS+0x37a8>)
 8004ec4:	443b      	add	r3, r7
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004ece:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	4b51      	ldr	r3, [pc, #324]	@ (8005020 <NLLS+0x37c8>)
 8004eda:	443b      	add	r3, r7
 8004edc:	6818      	ldr	r0, [r3, #0]
 8004ede:	f7fb fef7 	bl	8000cd0 <__aeabi_fsub>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4640      	mov	r0, r8
 8004ee8:	f7fb fffc 	bl	8000ee4 <__aeabi_fmul>
 8004eec:	4603      	mov	r3, r0
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4630      	mov	r0, r6
 8004ef2:	f7fb feed 	bl	8000cd0 <__aeabi_fsub>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	4619      	mov	r1, r3
 8004efa:	4628      	mov	r0, r5
 8004efc:	f7fb fff2 	bl	8000ee4 <__aeabi_fmul>
 8004f00:	4603      	mov	r3, r0
 8004f02:	461d      	mov	r5, r3
 8004f04:	4b41      	ldr	r3, [pc, #260]	@ (800500c <NLLS+0x37b4>)
 8004f06:	443b      	add	r3, r7
 8004f08:	6819      	ldr	r1, [r3, #0]
 8004f0a:	4b40      	ldr	r3, [pc, #256]	@ (800500c <NLLS+0x37b4>)
 8004f0c:	443b      	add	r3, r7
 8004f0e:	6818      	ldr	r0, [r3, #0]
 8004f10:	f7fb ffe8 	bl	8000ee4 <__aeabi_fmul>
 8004f14:	4603      	mov	r3, r0
 8004f16:	4a3c      	ldr	r2, [pc, #240]	@ (8005008 <NLLS+0x37b0>)
 8004f18:	443a      	add	r2, r7
 8004f1a:	6811      	ldr	r1, [r2, #0]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7fb ffe1 	bl	8000ee4 <__aeabi_fmul>
 8004f22:	4603      	mov	r3, r0
 8004f24:	4a38      	ldr	r2, [pc, #224]	@ (8005008 <NLLS+0x37b0>)
 8004f26:	443a      	add	r2, r7
 8004f28:	6811      	ldr	r1, [r2, #0]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fb ffda 	bl	8000ee4 <__aeabi_fmul>
 8004f30:	4603      	mov	r3, r0
 8004f32:	4a39      	ldr	r2, [pc, #228]	@ (8005018 <NLLS+0x37c0>)
 8004f34:	443a      	add	r2, r7
 8004f36:	6811      	ldr	r1, [r2, #0]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7fb ffd3 	bl	8000ee4 <__aeabi_fmul>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	4a35      	ldr	r2, [pc, #212]	@ (8005018 <NLLS+0x37c0>)
 8004f42:	443a      	add	r2, r7
 8004f44:	6811      	ldr	r1, [r2, #0]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fb ffcc 	bl	8000ee4 <__aeabi_fmul>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	4a35      	ldr	r2, [pc, #212]	@ (8005024 <NLLS+0x37cc>)
 8004f50:	443a      	add	r2, r7
 8004f52:	6811      	ldr	r1, [r2, #0]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7fb ffc5 	bl	8000ee4 <__aeabi_fmul>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	4a31      	ldr	r2, [pc, #196]	@ (8005024 <NLLS+0x37cc>)
 8004f5e:	443a      	add	r2, r7
 8004f60:	6811      	ldr	r1, [r2, #0]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fb ffbe 	bl	8000ee4 <__aeabi_fmul>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	4a2f      	ldr	r2, [pc, #188]	@ (8005028 <NLLS+0x37d0>)
 8004f6c:	443a      	add	r2, r7
 8004f6e:	6811      	ldr	r1, [r2, #0]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7fb ffb7 	bl	8000ee4 <__aeabi_fmul>
 8004f76:	4603      	mov	r3, r0
 8004f78:	4a2b      	ldr	r2, [pc, #172]	@ (8005028 <NLLS+0x37d0>)
 8004f7a:	443a      	add	r2, r7
 8004f7c:	6811      	ldr	r1, [r2, #0]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fb ffb0 	bl	8000ee4 <__aeabi_fmul>
 8004f84:	4603      	mov	r3, r0
 8004f86:	4a22      	ldr	r2, [pc, #136]	@ (8005010 <NLLS+0x37b8>)
 8004f88:	443a      	add	r2, r7
 8004f8a:	6811      	ldr	r1, [r2, #0]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7fb ffa9 	bl	8000ee4 <__aeabi_fmul>
 8004f92:	4603      	mov	r3, r0
 8004f94:	4a1e      	ldr	r2, [pc, #120]	@ (8005010 <NLLS+0x37b8>)
 8004f96:	443a      	add	r2, r7
 8004f98:	6811      	ldr	r1, [r2, #0]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7fb ffa2 	bl	8000ee4 <__aeabi_fmul>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	4628      	mov	r0, r5
 8004fa6:	f7fc f851 	bl	800104c <__aeabi_fdiv>
 8004faa:	4603      	mov	r3, r0
 8004fac:	4619      	mov	r1, r3
 8004fae:	4620      	mov	r0, r4
 8004fb0:	f7fb fe90 	bl	8000cd4 <__addsf3>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	f24a 0340 	movw	r3, #41024	@ 0xa040
 8004fbc:	443b      	add	r3, r7
 8004fbe:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004fc2:	4a0f      	ldr	r2, [pc, #60]	@ (8005000 <NLLS+0x37a8>)
 8004fc4:	443a      	add	r2, r7
 8004fc6:	6812      	ldr	r2, [r2, #0]
 8004fc8:	f502 520b 	add.w	r2, r2, #8896	@ 0x22c0
 8004fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(int i=0; i < tam; i++)
 8004fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8005000 <NLLS+0x37a8>)
 8004fd2:	443b      	add	r3, r7
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	4a09      	ldr	r2, [pc, #36]	@ (8005000 <NLLS+0x37a8>)
 8004fda:	443a      	add	r2, r7
 8004fdc:	6013      	str	r3, [r2, #0]
 8004fde:	4b08      	ldr	r3, [pc, #32]	@ (8005000 <NLLS+0x37a8>)
 8004fe0:	443b      	add	r3, r7
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8004fe8:	f6fc ad2e 	blt.w	8001a48 <NLLS+0x1f0>
		}

		J = 0;
 8004fec:	f04f 0300 	mov.w	r3, #0
 8004ff0:	4a0e      	ldr	r2, [pc, #56]	@ (800502c <NLLS+0x37d4>)
 8004ff2:	443a      	add	r2, r7
 8004ff4:	6013      	str	r3, [r2, #0]

		for(int i=0; i < tam; i++)
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8005030 <NLLS+0x37d8>)
 8004ffa:	443a      	add	r2, r7
 8004ffc:	6013      	str	r3, [r2, #0]
 8004ffe:	e046      	b.n	800508e <NLLS+0x3836>
 8005000:	00017008 	.word	0x00017008
 8005004:	0001702c 	.word	0x0001702c
 8005008:	00017034 	.word	0x00017034
 800500c:	00017038 	.word	0x00017038
 8005010:	00016fc8 	.word	0x00016fc8
 8005014:	00017024 	.word	0x00017024
 8005018:	00017030 	.word	0x00017030
 800501c:	00016fd0 	.word	0x00016fd0
 8005020:	00017028 	.word	0x00017028
 8005024:	00016fc4 	.word	0x00016fc4
 8005028:	00016fcc 	.word	0x00016fcc
 800502c:	00017010 	.word	0x00017010
 8005030:	00017004 	.word	0x00017004
		{
			J += (e[i] * e[i])/2;
 8005034:	4ba8      	ldr	r3, [pc, #672]	@ (80052d8 <NLLS+0x3a80>)
 8005036:	443b      	add	r3, r7
 8005038:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 800503c:	4aa7      	ldr	r2, [pc, #668]	@ (80052dc <NLLS+0x3a84>)
 800503e:	443a      	add	r2, r7
 8005040:	6812      	ldr	r2, [r2, #0]
 8005042:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005046:	4ba4      	ldr	r3, [pc, #656]	@ (80052d8 <NLLS+0x3a80>)
 8005048:	443b      	add	r3, r7
 800504a:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 800504e:	4aa3      	ldr	r2, [pc, #652]	@ (80052dc <NLLS+0x3a84>)
 8005050:	443a      	add	r2, r7
 8005052:	6812      	ldr	r2, [r2, #0]
 8005054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005058:	4619      	mov	r1, r3
 800505a:	f7fb ff43 	bl	8000ee4 <__aeabi_fmul>
 800505e:	4603      	mov	r3, r0
 8005060:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005064:	4618      	mov	r0, r3
 8005066:	f7fb fff1 	bl	800104c <__aeabi_fdiv>
 800506a:	4603      	mov	r3, r0
 800506c:	4619      	mov	r1, r3
 800506e:	4b9c      	ldr	r3, [pc, #624]	@ (80052e0 <NLLS+0x3a88>)
 8005070:	443b      	add	r3, r7
 8005072:	6818      	ldr	r0, [r3, #0]
 8005074:	f7fb fe2e 	bl	8000cd4 <__addsf3>
 8005078:	4603      	mov	r3, r0
 800507a:	4a99      	ldr	r2, [pc, #612]	@ (80052e0 <NLLS+0x3a88>)
 800507c:	443a      	add	r2, r7
 800507e:	6013      	str	r3, [r2, #0]
		for(int i=0; i < tam; i++)
 8005080:	4b96      	ldr	r3, [pc, #600]	@ (80052dc <NLLS+0x3a84>)
 8005082:	443b      	add	r3, r7
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3301      	adds	r3, #1
 8005088:	4a94      	ldr	r2, [pc, #592]	@ (80052dc <NLLS+0x3a84>)
 800508a:	443a      	add	r2, r7
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	4b93      	ldr	r3, [pc, #588]	@ (80052dc <NLLS+0x3a84>)
 8005090:	443b      	add	r3, r7
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8005098:	dbcc      	blt.n	8005034 <NLLS+0x37dc>
		}

		if(passo < 2)
 800509a:	4b92      	ldr	r3, [pc, #584]	@ (80052e4 <NLLS+0x3a8c>)
 800509c:	443b      	add	r3, r7
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d806      	bhi.n	80050b2 <NLLS+0x385a>
		{
			error_ant = J;
 80050a4:	4b8e      	ldr	r3, [pc, #568]	@ (80052e0 <NLLS+0x3a88>)
 80050a6:	443b      	add	r3, r7
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a8f      	ldr	r2, [pc, #572]	@ (80052e8 <NLLS+0x3a90>)
 80050ac:	443a      	add	r2, r7
 80050ae:	6013      	str	r3, [r2, #0]
 80050b0:	e042      	b.n	8005138 <NLLS+0x38e0>
		}
		else
		{
			delta_J = 100*fabs(J-error_ant)/J;
 80050b2:	4b8d      	ldr	r3, [pc, #564]	@ (80052e8 <NLLS+0x3a90>)
 80050b4:	443b      	add	r3, r7
 80050b6:	6819      	ldr	r1, [r3, #0]
 80050b8:	4b89      	ldr	r3, [pc, #548]	@ (80052e0 <NLLS+0x3a88>)
 80050ba:	443b      	add	r3, r7
 80050bc:	6818      	ldr	r0, [r3, #0]
 80050be:	f7fb fe07 	bl	8000cd0 <__aeabi_fsub>
 80050c2:	4603      	mov	r3, r0
 80050c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7fb fa5d 	bl	8000588 <__aeabi_f2d>
 80050ce:	f04f 0200 	mov.w	r2, #0
 80050d2:	4b86      	ldr	r3, [pc, #536]	@ (80052ec <NLLS+0x3a94>)
 80050d4:	f7fb fab0 	bl	8000638 <__aeabi_dmul>
 80050d8:	4602      	mov	r2, r0
 80050da:	460b      	mov	r3, r1
 80050dc:	4614      	mov	r4, r2
 80050de:	461d      	mov	r5, r3
 80050e0:	4b7f      	ldr	r3, [pc, #508]	@ (80052e0 <NLLS+0x3a88>)
 80050e2:	443b      	add	r3, r7
 80050e4:	6818      	ldr	r0, [r3, #0]
 80050e6:	f7fb fa4f 	bl	8000588 <__aeabi_f2d>
 80050ea:	4602      	mov	r2, r0
 80050ec:	460b      	mov	r3, r1
 80050ee:	4620      	mov	r0, r4
 80050f0:	4629      	mov	r1, r5
 80050f2:	f7fb fbcb 	bl	800088c <__aeabi_ddiv>
 80050f6:	4602      	mov	r2, r0
 80050f8:	460b      	mov	r3, r1
 80050fa:	4610      	mov	r0, r2
 80050fc:	4619      	mov	r1, r3
 80050fe:	f7fb fd93 	bl	8000c28 <__aeabi_d2f>
 8005102:	4603      	mov	r3, r0
 8005104:	4a7a      	ldr	r2, [pc, #488]	@ (80052f0 <NLLS+0x3a98>)
 8005106:	443a      	add	r2, r7
 8005108:	6013      	str	r3, [r2, #0]
			if(delta_J < 0.05)
 800510a:	4b79      	ldr	r3, [pc, #484]	@ (80052f0 <NLLS+0x3a98>)
 800510c:	443b      	add	r3, r7
 800510e:	6818      	ldr	r0, [r3, #0]
 8005110:	f7fb fa3a 	bl	8000588 <__aeabi_f2d>
 8005114:	a36e      	add	r3, pc, #440	@ (adr r3, 80052d0 <NLLS+0x3a78>)
 8005116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511a:	f7fb fcff 	bl	8000b1c <__aeabi_dcmplt>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d003      	beq.n	800512c <NLLS+0x38d4>
			{
				loop = 0;
 8005124:	2300      	movs	r3, #0
 8005126:	4a73      	ldr	r2, [pc, #460]	@ (80052f4 <NLLS+0x3a9c>)
 8005128:	443a      	add	r2, r7
 800512a:	7013      	strb	r3, [r2, #0]
			}
			error_ant = J;
 800512c:	4b6c      	ldr	r3, [pc, #432]	@ (80052e0 <NLLS+0x3a88>)
 800512e:	443b      	add	r3, r7
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a6d      	ldr	r2, [pc, #436]	@ (80052e8 <NLLS+0x3a90>)
 8005134:	443a      	add	r2, r7
 8005136:	6013      	str	r3, [r2, #0]
		}

		for(int i = 0; i < N; i++)
 8005138:	2300      	movs	r3, #0
 800513a:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 800513e:	6013      	str	r3, [r2, #0]
 8005140:	e08d      	b.n	800525e <NLLS+0x3a06>
		{
			for(int j = 0; j < N; j++)
 8005142:	2300      	movs	r3, #0
 8005144:	4a6c      	ldr	r2, [pc, #432]	@ (80052f8 <NLLS+0x3aa0>)
 8005146:	443a      	add	r2, r7
 8005148:	6013      	str	r3, [r2, #0]
 800514a:	e07b      	b.n	8005244 <NLLS+0x39ec>
			{
				Ht_H[i][j] = 0;
 800514c:	f24a 0340 	movw	r3, #41024	@ 0xa040
 8005150:	443b      	add	r3, r7
 8005152:	f5a3 711a 	sub.w	r1, r3, #616	@ 0x268
 8005156:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	4613      	mov	r3, r2
 800515e:	00db      	lsls	r3, r3, #3
 8005160:	4413      	add	r3, r2
 8005162:	4a65      	ldr	r2, [pc, #404]	@ (80052f8 <NLLS+0x3aa0>)
 8005164:	443a      	add	r2, r7
 8005166:	6812      	ldr	r2, [r2, #0]
 8005168:	4413      	add	r3, r2
 800516a:	f04f 0200 	mov.w	r2, #0
 800516e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(int k = 0; k < tam; k++)
 8005172:	2300      	movs	r3, #0
 8005174:	4a61      	ldr	r2, [pc, #388]	@ (80052fc <NLLS+0x3aa4>)
 8005176:	443a      	add	r2, r7
 8005178:	6013      	str	r3, [r2, #0]
 800517a:	e056      	b.n	800522a <NLLS+0x39d2>
				{
					Ht_H[i][j] += mat_H[i][k]*mat_H[j][k];
 800517c:	f24a 0340 	movw	r3, #41024	@ 0xa040
 8005180:	443b      	add	r3, r7
 8005182:	f5a3 711a 	sub.w	r1, r3, #616	@ 0x268
 8005186:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	4613      	mov	r3, r2
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	4413      	add	r3, r2
 8005192:	4a59      	ldr	r2, [pc, #356]	@ (80052f8 <NLLS+0x3aa0>)
 8005194:	443a      	add	r2, r7
 8005196:	6812      	ldr	r2, [r2, #0]
 8005198:	4413      	add	r3, r2
 800519a:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 800519e:	f24a 0340 	movw	r3, #41024	@ 0xa040
 80051a2:	443b      	add	r3, r7
 80051a4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80051a8:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80051ac:	6812      	ldr	r2, [r2, #0]
 80051ae:	f44f 618b 	mov.w	r1, #1112	@ 0x458
 80051b2:	fb02 f101 	mul.w	r1, r2, r1
 80051b6:	4a51      	ldr	r2, [pc, #324]	@ (80052fc <NLLS+0x3aa4>)
 80051b8:	443a      	add	r2, r7
 80051ba:	6812      	ldr	r2, [r2, #0]
 80051bc:	440a      	add	r2, r1
 80051be:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80051c2:	f24a 0340 	movw	r3, #41024	@ 0xa040
 80051c6:	443b      	add	r3, r7
 80051c8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80051cc:	4a4a      	ldr	r2, [pc, #296]	@ (80052f8 <NLLS+0x3aa0>)
 80051ce:	443a      	add	r2, r7
 80051d0:	6812      	ldr	r2, [r2, #0]
 80051d2:	f44f 618b 	mov.w	r1, #1112	@ 0x458
 80051d6:	fb02 f101 	mul.w	r1, r2, r1
 80051da:	4a48      	ldr	r2, [pc, #288]	@ (80052fc <NLLS+0x3aa4>)
 80051dc:	443a      	add	r2, r7
 80051de:	6812      	ldr	r2, [r2, #0]
 80051e0:	440a      	add	r2, r1
 80051e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051e6:	4619      	mov	r1, r3
 80051e8:	f7fb fe7c 	bl	8000ee4 <__aeabi_fmul>
 80051ec:	4603      	mov	r3, r0
 80051ee:	4619      	mov	r1, r3
 80051f0:	4620      	mov	r0, r4
 80051f2:	f7fb fd6f 	bl	8000cd4 <__addsf3>
 80051f6:	4603      	mov	r3, r0
 80051f8:	4618      	mov	r0, r3
 80051fa:	f24a 0340 	movw	r3, #41024	@ 0xa040
 80051fe:	443b      	add	r3, r7
 8005200:	f5a3 711a 	sub.w	r1, r3, #616	@ 0x268
 8005204:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	4613      	mov	r3, r2
 800520c:	00db      	lsls	r3, r3, #3
 800520e:	4413      	add	r3, r2
 8005210:	4a39      	ldr	r2, [pc, #228]	@ (80052f8 <NLLS+0x3aa0>)
 8005212:	443a      	add	r2, r7
 8005214:	6812      	ldr	r2, [r2, #0]
 8005216:	4413      	add	r3, r2
 8005218:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
				for(int k = 0; k < tam; k++)
 800521c:	4b37      	ldr	r3, [pc, #220]	@ (80052fc <NLLS+0x3aa4>)
 800521e:	443b      	add	r3, r7
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	3301      	adds	r3, #1
 8005224:	4a35      	ldr	r2, [pc, #212]	@ (80052fc <NLLS+0x3aa4>)
 8005226:	443a      	add	r2, r7
 8005228:	6013      	str	r3, [r2, #0]
 800522a:	4b34      	ldr	r3, [pc, #208]	@ (80052fc <NLLS+0x3aa4>)
 800522c:	443b      	add	r3, r7
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8005234:	dba2      	blt.n	800517c <NLLS+0x3924>
			for(int j = 0; j < N; j++)
 8005236:	4b30      	ldr	r3, [pc, #192]	@ (80052f8 <NLLS+0x3aa0>)
 8005238:	443b      	add	r3, r7
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	3301      	adds	r3, #1
 800523e:	4a2e      	ldr	r2, [pc, #184]	@ (80052f8 <NLLS+0x3aa0>)
 8005240:	443a      	add	r2, r7
 8005242:	6013      	str	r3, [r2, #0]
 8005244:	4b2c      	ldr	r3, [pc, #176]	@ (80052f8 <NLLS+0x3aa0>)
 8005246:	443b      	add	r3, r7
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2b08      	cmp	r3, #8
 800524c:	f77f af7e 	ble.w	800514c <NLLS+0x38f4>
		for(int i = 0; i < N; i++)
 8005250:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	3301      	adds	r3, #1
 8005258:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 800525c:	6013      	str	r3, [r2, #0]
 800525e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b08      	cmp	r3, #8
 8005266:	f77f af6c 	ble.w	8005142 <NLLS+0x38ea>
				}
			}
		}

		inverter_matriz(Ht_H, inv);
 800526a:	4a25      	ldr	r2, [pc, #148]	@ (8005300 <NLLS+0x3aa8>)
 800526c:	4b25      	ldr	r3, [pc, #148]	@ (8005304 <NLLS+0x3aac>)
 800526e:	4413      	add	r3, r2
 8005270:	19da      	adds	r2, r3, r7
 8005272:	4b25      	ldr	r3, [pc, #148]	@ (8005308 <NLLS+0x3ab0>)
 8005274:	f503 33b8 	add.w	r3, r3, #94208	@ 0x17000
 8005278:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800527c:	443b      	add	r3, r7
 800527e:	4611      	mov	r1, r2
 8005280:	4618      	mov	r0, r3
 8005282:	f7fc f9df 	bl	8001644 <inverter_matriz>

		for(int i = 0; i < N; i++)
 8005286:	2300      	movs	r3, #0
 8005288:	4a20      	ldr	r2, [pc, #128]	@ (800530c <NLLS+0x3ab4>)
 800528a:	443a      	add	r2, r7
 800528c:	6013      	str	r3, [r2, #0]
 800528e:	e0b5      	b.n	80053fc <NLLS+0x3ba4>
		{
			for(int j = 0; j < tam; j++)
 8005290:	2300      	movs	r3, #0
 8005292:	4a1f      	ldr	r2, [pc, #124]	@ (8005310 <NLLS+0x3ab8>)
 8005294:	443a      	add	r2, r7
 8005296:	6013      	str	r3, [r2, #0]
 8005298:	e0a2      	b.n	80053e0 <NLLS+0x3b88>
			{
				mul_mat[i][j] = 0;
 800529a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800529e:	4619      	mov	r1, r3
 80052a0:	4b1a      	ldr	r3, [pc, #104]	@ (800530c <NLLS+0x3ab4>)
 80052a2:	443b      	add	r3, r7
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f44f 628b 	mov.w	r2, #1112	@ 0x458
 80052aa:	fb03 f202 	mul.w	r2, r3, r2
 80052ae:	4b18      	ldr	r3, [pc, #96]	@ (8005310 <NLLS+0x3ab8>)
 80052b0:	443b      	add	r3, r7
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4413      	add	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	440b      	add	r3, r1
 80052ba:	f04f 0200 	mov.w	r2, #0
 80052be:	f843 2c30 	str.w	r2, [r3, #-48]
				for(int k = 0; k < N; k++)
 80052c2:	2300      	movs	r3, #0
 80052c4:	4a13      	ldr	r2, [pc, #76]	@ (8005314 <NLLS+0x3abc>)
 80052c6:	443a      	add	r2, r7
 80052c8:	6013      	str	r3, [r2, #0]
 80052ca:	e07d      	b.n	80053c8 <NLLS+0x3b70>
 80052cc:	f3af 8000 	nop.w
 80052d0:	9999999a 	.word	0x9999999a
 80052d4:	3fa99999 	.word	0x3fa99999
 80052d8:	00015040 	.word	0x00015040
 80052dc:	00017004 	.word	0x00017004
 80052e0:	00017010 	.word	0x00017010
 80052e4:	0001703f 	.word	0x0001703f
 80052e8:	00017014 	.word	0x00017014
 80052ec:	40590000 	.word	0x40590000
 80052f0:	00016fc0 	.word	0x00016fc0
 80052f4:	0001703e 	.word	0x0001703e
 80052f8:	00016ffc 	.word	0x00016ffc
 80052fc:	00016ff8 	.word	0x00016ff8
 8005300:	ffff2c30 	.word	0xffff2c30
 8005304:	00017040 	.word	0x00017040
 8005308:	ffff2d98 	.word	0xffff2d98
 800530c:	00016ff4 	.word	0x00016ff4
 8005310:	00016ff0 	.word	0x00016ff0
 8005314:	00016fec 	.word	0x00016fec
				{
					mul_mat[i][j] += inv[i][k]*mat_H[k][j];
 8005318:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800531c:	4619      	mov	r1, r3
 800531e:	4b71      	ldr	r3, [pc, #452]	@ (80054e4 <NLLS+0x3c8c>)
 8005320:	443b      	add	r3, r7
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f44f 628b 	mov.w	r2, #1112	@ 0x458
 8005328:	fb03 f202 	mul.w	r2, r3, r2
 800532c:	4b6e      	ldr	r3, [pc, #440]	@ (80054e8 <NLLS+0x3c90>)
 800532e:	443b      	add	r3, r7
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4413      	add	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	440b      	add	r3, r1
 8005338:	f853 4c30 	ldr.w	r4, [r3, #-48]
 800533c:	f24a 0340 	movw	r3, #41024	@ 0xa040
 8005340:	443b      	add	r3, r7
 8005342:	f5a3 7174 	sub.w	r1, r3, #976	@ 0x3d0
 8005346:	4b67      	ldr	r3, [pc, #412]	@ (80054e4 <NLLS+0x3c8c>)
 8005348:	443b      	add	r3, r7
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	4613      	mov	r3, r2
 800534e:	00db      	lsls	r3, r3, #3
 8005350:	4413      	add	r3, r2
 8005352:	4a66      	ldr	r2, [pc, #408]	@ (80054ec <NLLS+0x3c94>)
 8005354:	443a      	add	r2, r7
 8005356:	6812      	ldr	r2, [r2, #0]
 8005358:	4413      	add	r3, r2
 800535a:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800535e:	f24a 0340 	movw	r3, #41024	@ 0xa040
 8005362:	443b      	add	r3, r7
 8005364:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005368:	4a60      	ldr	r2, [pc, #384]	@ (80054ec <NLLS+0x3c94>)
 800536a:	443a      	add	r2, r7
 800536c:	6812      	ldr	r2, [r2, #0]
 800536e:	f44f 618b 	mov.w	r1, #1112	@ 0x458
 8005372:	fb02 f101 	mul.w	r1, r2, r1
 8005376:	4a5c      	ldr	r2, [pc, #368]	@ (80054e8 <NLLS+0x3c90>)
 8005378:	443a      	add	r2, r7
 800537a:	6812      	ldr	r2, [r2, #0]
 800537c:	440a      	add	r2, r1
 800537e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005382:	4619      	mov	r1, r3
 8005384:	f7fb fdae 	bl	8000ee4 <__aeabi_fmul>
 8005388:	4603      	mov	r3, r0
 800538a:	4619      	mov	r1, r3
 800538c:	4620      	mov	r0, r4
 800538e:	f7fb fca1 	bl	8000cd4 <__addsf3>
 8005392:	4603      	mov	r3, r0
 8005394:	4619      	mov	r1, r3
 8005396:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800539a:	4618      	mov	r0, r3
 800539c:	4b51      	ldr	r3, [pc, #324]	@ (80054e4 <NLLS+0x3c8c>)
 800539e:	443b      	add	r3, r7
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f44f 628b 	mov.w	r2, #1112	@ 0x458
 80053a6:	fb03 f202 	mul.w	r2, r3, r2
 80053aa:	4b4f      	ldr	r3, [pc, #316]	@ (80054e8 <NLLS+0x3c90>)
 80053ac:	443b      	add	r3, r7
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4413      	add	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4403      	add	r3, r0
 80053b6:	f843 1c30 	str.w	r1, [r3, #-48]
				for(int k = 0; k < N; k++)
 80053ba:	4b4c      	ldr	r3, [pc, #304]	@ (80054ec <NLLS+0x3c94>)
 80053bc:	443b      	add	r3, r7
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	3301      	adds	r3, #1
 80053c2:	4a4a      	ldr	r2, [pc, #296]	@ (80054ec <NLLS+0x3c94>)
 80053c4:	443a      	add	r2, r7
 80053c6:	6013      	str	r3, [r2, #0]
 80053c8:	4b48      	ldr	r3, [pc, #288]	@ (80054ec <NLLS+0x3c94>)
 80053ca:	443b      	add	r3, r7
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2b08      	cmp	r3, #8
 80053d0:	dda2      	ble.n	8005318 <NLLS+0x3ac0>
			for(int j = 0; j < tam; j++)
 80053d2:	4b45      	ldr	r3, [pc, #276]	@ (80054e8 <NLLS+0x3c90>)
 80053d4:	443b      	add	r3, r7
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	3301      	adds	r3, #1
 80053da:	4a43      	ldr	r2, [pc, #268]	@ (80054e8 <NLLS+0x3c90>)
 80053dc:	443a      	add	r2, r7
 80053de:	6013      	str	r3, [r2, #0]
 80053e0:	4b41      	ldr	r3, [pc, #260]	@ (80054e8 <NLLS+0x3c90>)
 80053e2:	443b      	add	r3, r7
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 80053ea:	f6ff af56 	blt.w	800529a <NLLS+0x3a42>
		for(int i = 0; i < N; i++)
 80053ee:	4b3d      	ldr	r3, [pc, #244]	@ (80054e4 <NLLS+0x3c8c>)
 80053f0:	443b      	add	r3, r7
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	3301      	adds	r3, #1
 80053f6:	4a3b      	ldr	r2, [pc, #236]	@ (80054e4 <NLLS+0x3c8c>)
 80053f8:	443a      	add	r2, r7
 80053fa:	6013      	str	r3, [r2, #0]
 80053fc:	4b39      	ldr	r3, [pc, #228]	@ (80054e4 <NLLS+0x3c8c>)
 80053fe:	443b      	add	r3, r7
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2b08      	cmp	r3, #8
 8005404:	f77f af44 	ble.w	8005290 <NLLS+0x3a38>
				}
			}
		}

		for(int i = 0; i < N; i++)
 8005408:	2300      	movs	r3, #0
 800540a:	4a39      	ldr	r2, [pc, #228]	@ (80054f0 <NLLS+0x3c98>)
 800540c:	443a      	add	r2, r7
 800540e:	6013      	str	r3, [r2, #0]
 8005410:	e05d      	b.n	80054ce <NLLS+0x3c76>
		{
			Ht_e[i] = 0;
 8005412:	f24a 0340 	movw	r3, #41024	@ 0xa040
 8005416:	443b      	add	r3, r7
 8005418:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 800541c:	4a34      	ldr	r2, [pc, #208]	@ (80054f0 <NLLS+0x3c98>)
 800541e:	443a      	add	r2, r7
 8005420:	6812      	ldr	r2, [r2, #0]
 8005422:	f04f 0100 	mov.w	r1, #0
 8005426:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(int j = 0; j < tam; j++)
 800542a:	2300      	movs	r3, #0
 800542c:	4a31      	ldr	r2, [pc, #196]	@ (80054f4 <NLLS+0x3c9c>)
 800542e:	443a      	add	r2, r7
 8005430:	6013      	str	r3, [r2, #0]
 8005432:	e03f      	b.n	80054b4 <NLLS+0x3c5c>
			{
				Ht_e[i] += mul_mat[i][j]*e[j];
 8005434:	f24a 0340 	movw	r3, #41024	@ 0xa040
 8005438:	443b      	add	r3, r7
 800543a:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 800543e:	4a2c      	ldr	r2, [pc, #176]	@ (80054f0 <NLLS+0x3c98>)
 8005440:	443a      	add	r2, r7
 8005442:	6812      	ldr	r2, [r2, #0]
 8005444:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8005448:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800544c:	4619      	mov	r1, r3
 800544e:	4b28      	ldr	r3, [pc, #160]	@ (80054f0 <NLLS+0x3c98>)
 8005450:	443b      	add	r3, r7
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f44f 628b 	mov.w	r2, #1112	@ 0x458
 8005458:	fb03 f202 	mul.w	r2, r3, r2
 800545c:	4b25      	ldr	r3, [pc, #148]	@ (80054f4 <NLLS+0x3c9c>)
 800545e:	443b      	add	r3, r7
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4413      	add	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	440b      	add	r3, r1
 8005468:	f853 0c30 	ldr.w	r0, [r3, #-48]
 800546c:	4b22      	ldr	r3, [pc, #136]	@ (80054f8 <NLLS+0x3ca0>)
 800546e:	443b      	add	r3, r7
 8005470:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8005474:	4a1f      	ldr	r2, [pc, #124]	@ (80054f4 <NLLS+0x3c9c>)
 8005476:	443a      	add	r2, r7
 8005478:	6812      	ldr	r2, [r2, #0]
 800547a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800547e:	4619      	mov	r1, r3
 8005480:	f7fb fd30 	bl	8000ee4 <__aeabi_fmul>
 8005484:	4603      	mov	r3, r0
 8005486:	4619      	mov	r1, r3
 8005488:	4620      	mov	r0, r4
 800548a:	f7fb fc23 	bl	8000cd4 <__addsf3>
 800548e:	4603      	mov	r3, r0
 8005490:	4619      	mov	r1, r3
 8005492:	f24a 0340 	movw	r3, #41024	@ 0xa040
 8005496:	443b      	add	r3, r7
 8005498:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 800549c:	4a14      	ldr	r2, [pc, #80]	@ (80054f0 <NLLS+0x3c98>)
 800549e:	443a      	add	r2, r7
 80054a0:	6812      	ldr	r2, [r2, #0]
 80054a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(int j = 0; j < tam; j++)
 80054a6:	4b13      	ldr	r3, [pc, #76]	@ (80054f4 <NLLS+0x3c9c>)
 80054a8:	443b      	add	r3, r7
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	3301      	adds	r3, #1
 80054ae:	4a11      	ldr	r2, [pc, #68]	@ (80054f4 <NLLS+0x3c9c>)
 80054b0:	443a      	add	r2, r7
 80054b2:	6013      	str	r3, [r2, #0]
 80054b4:	4b0f      	ldr	r3, [pc, #60]	@ (80054f4 <NLLS+0x3c9c>)
 80054b6:	443b      	add	r3, r7
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 80054be:	dbb9      	blt.n	8005434 <NLLS+0x3bdc>
		for(int i = 0; i < N; i++)
 80054c0:	4b0b      	ldr	r3, [pc, #44]	@ (80054f0 <NLLS+0x3c98>)
 80054c2:	443b      	add	r3, r7
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	3301      	adds	r3, #1
 80054c8:	4a09      	ldr	r2, [pc, #36]	@ (80054f0 <NLLS+0x3c98>)
 80054ca:	443a      	add	r2, r7
 80054cc:	6013      	str	r3, [r2, #0]
 80054ce:	4b08      	ldr	r3, [pc, #32]	@ (80054f0 <NLLS+0x3c98>)
 80054d0:	443b      	add	r3, r7
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b08      	cmp	r3, #8
 80054d6:	dd9c      	ble.n	8005412 <NLLS+0x3bba>
			}
		}

		for(int i = 0; i < N; i++)
 80054d8:	2300      	movs	r3, #0
 80054da:	4a08      	ldr	r2, [pc, #32]	@ (80054fc <NLLS+0x3ca4>)
 80054dc:	443a      	add	r2, r7
 80054de:	6013      	str	r3, [r2, #0]
 80054e0:	e03a      	b.n	8005558 <NLLS+0x3d00>
 80054e2:	bf00      	nop
 80054e4:	00016ff4 	.word	0x00016ff4
 80054e8:	00016ff0 	.word	0x00016ff0
 80054ec:	00016fec 	.word	0x00016fec
 80054f0:	00016fe8 	.word	0x00016fe8
 80054f4:	00016fe4 	.word	0x00016fe4
 80054f8:	00015040 	.word	0x00015040
 80054fc:	00016fe0 	.word	0x00016fe0
		{
			p0[i] += Ht_e[i];
 8005500:	4b4b      	ldr	r3, [pc, #300]	@ (8005630 <NLLS+0x3dd8>)
 8005502:	443b      	add	r3, r7
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	f503 33b8 	add.w	r3, r3, #94208	@ 0x17000
 800550c:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8005510:	443b      	add	r3, r7
 8005512:	f853 0ca4 	ldr.w	r0, [r3, #-164]
 8005516:	f24a 0340 	movw	r3, #41024	@ 0xa040
 800551a:	443b      	add	r3, r7
 800551c:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8005520:	4a43      	ldr	r2, [pc, #268]	@ (8005630 <NLLS+0x3dd8>)
 8005522:	443a      	add	r2, r7
 8005524:	6812      	ldr	r2, [r2, #0]
 8005526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800552a:	4619      	mov	r1, r3
 800552c:	f7fb fbd2 	bl	8000cd4 <__addsf3>
 8005530:	4603      	mov	r3, r0
 8005532:	461a      	mov	r2, r3
 8005534:	4b3e      	ldr	r3, [pc, #248]	@ (8005630 <NLLS+0x3dd8>)
 8005536:	443b      	add	r3, r7
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	f503 33b8 	add.w	r3, r3, #94208	@ 0x17000
 8005540:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8005544:	443b      	add	r3, r7
 8005546:	f843 2ca4 	str.w	r2, [r3, #-164]
		for(int i = 0; i < N; i++)
 800554a:	4b39      	ldr	r3, [pc, #228]	@ (8005630 <NLLS+0x3dd8>)
 800554c:	443b      	add	r3, r7
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	3301      	adds	r3, #1
 8005552:	4a37      	ldr	r2, [pc, #220]	@ (8005630 <NLLS+0x3dd8>)
 8005554:	443a      	add	r2, r7
 8005556:	6013      	str	r3, [r2, #0]
 8005558:	4b35      	ldr	r3, [pc, #212]	@ (8005630 <NLLS+0x3dd8>)
 800555a:	443b      	add	r3, r7
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b08      	cmp	r3, #8
 8005560:	ddce      	ble.n	8005500 <NLLS+0x3ca8>
		}

		passo++;
 8005562:	4b34      	ldr	r3, [pc, #208]	@ (8005634 <NLLS+0x3ddc>)
 8005564:	443b      	add	r3, r7
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	3301      	adds	r3, #1
 800556a:	4a32      	ldr	r2, [pc, #200]	@ (8005634 <NLLS+0x3ddc>)
 800556c:	443a      	add	r2, r7
 800556e:	7013      	strb	r3, [r2, #0]
	while(loop == 1)
 8005570:	4b31      	ldr	r3, [pc, #196]	@ (8005638 <NLLS+0x3de0>)
 8005572:	443b      	add	r3, r7
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	2b01      	cmp	r3, #1
 8005578:	f43c a9bb 	beq.w	80018f2 <NLLS+0x9a>
	}
    p[0] = sx;
 800557c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005580:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8005584:	4a2d      	ldr	r2, [pc, #180]	@ (800563c <NLLS+0x3de4>)
 8005586:	443a      	add	r2, r7
 8005588:	6812      	ldr	r2, [r2, #0]
 800558a:	601a      	str	r2, [r3, #0]
    p[1] = sy;
 800558c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005590:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8005594:	3304      	adds	r3, #4
 8005596:	4a2a      	ldr	r2, [pc, #168]	@ (8005640 <NLLS+0x3de8>)
 8005598:	443a      	add	r2, r7
 800559a:	6812      	ldr	r2, [r2, #0]
 800559c:	601a      	str	r2, [r3, #0]
    p[2] = sz;
 800559e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80055a2:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80055a6:	3308      	adds	r3, #8
 80055a8:	4a26      	ldr	r2, [pc, #152]	@ (8005644 <NLLS+0x3dec>)
 80055aa:	443a      	add	r2, r7
 80055ac:	6812      	ldr	r2, [r2, #0]
 80055ae:	601a      	str	r2, [r3, #0]
    p[3] = bx;
 80055b0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80055b4:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80055b8:	330c      	adds	r3, #12
 80055ba:	4a23      	ldr	r2, [pc, #140]	@ (8005648 <NLLS+0x3df0>)
 80055bc:	443a      	add	r2, r7
 80055be:	6812      	ldr	r2, [r2, #0]
 80055c0:	601a      	str	r2, [r3, #0]
    p[4] = by;
 80055c2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80055c6:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80055ca:	3310      	adds	r3, #16
 80055cc:	4a1f      	ldr	r2, [pc, #124]	@ (800564c <NLLS+0x3df4>)
 80055ce:	443a      	add	r2, r7
 80055d0:	6812      	ldr	r2, [r2, #0]
 80055d2:	601a      	str	r2, [r3, #0]
    p[5] = bz;
 80055d4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80055d8:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80055dc:	3314      	adds	r3, #20
 80055de:	4a1c      	ldr	r2, [pc, #112]	@ (8005650 <NLLS+0x3df8>)
 80055e0:	443a      	add	r2, r7
 80055e2:	6812      	ldr	r2, [r2, #0]
 80055e4:	601a      	str	r2, [r3, #0]
    p[6] = rho;
 80055e6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80055ea:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80055ee:	3318      	adds	r3, #24
 80055f0:	4a18      	ldr	r2, [pc, #96]	@ (8005654 <NLLS+0x3dfc>)
 80055f2:	443a      	add	r2, r7
 80055f4:	6812      	ldr	r2, [r2, #0]
 80055f6:	601a      	str	r2, [r3, #0]
    p[7] = phi;
 80055f8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80055fc:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8005600:	331c      	adds	r3, #28
 8005602:	4a15      	ldr	r2, [pc, #84]	@ (8005658 <NLLS+0x3e00>)
 8005604:	443a      	add	r2, r7
 8005606:	6812      	ldr	r2, [r2, #0]
 8005608:	601a      	str	r2, [r3, #0]
    p[8] = lambida;
 800560a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800560e:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8005612:	3320      	adds	r3, #32
 8005614:	4a11      	ldr	r2, [pc, #68]	@ (800565c <NLLS+0x3e04>)
 8005616:	443a      	add	r2, r7
 8005618:	6812      	ldr	r2, [r2, #0]
 800561a:	601a      	str	r2, [r3, #0]

    return passo;
 800561c:	4b05      	ldr	r3, [pc, #20]	@ (8005634 <NLLS+0x3ddc>)
 800561e:	443b      	add	r3, r7
 8005620:	781b      	ldrb	r3, [r3, #0]
}
 8005622:	4618      	mov	r0, r3
 8005624:	f507 37b8 	add.w	r7, r7, #94208	@ 0x17000
 8005628:	3744      	adds	r7, #68	@ 0x44
 800562a:	46bd      	mov	sp, r7
 800562c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005630:	00016fe0 	.word	0x00016fe0
 8005634:	0001703f 	.word	0x0001703f
 8005638:	0001703e 	.word	0x0001703e
 800563c:	00017038 	.word	0x00017038
 8005640:	00017034 	.word	0x00017034
 8005644:	00017030 	.word	0x00017030
 8005648:	0001702c 	.word	0x0001702c
 800564c:	00017028 	.word	0x00017028
 8005650:	00017024 	.word	0x00017024
 8005654:	00017020 	.word	0x00017020
 8005658:	0001701c 	.word	0x0001701c
 800565c:	00017018 	.word	0x00017018

08005660 <ETS>:

void ETS(float *mx, float *my, float *mz, float *p)
{
 8005660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005662:	f5ad 3da6 	sub.w	sp, sp, #84992	@ 0x14c00
 8005666:	b0db      	sub	sp, #364	@ 0x16c
 8005668:	af00      	add	r7, sp, #0
 800566a:	f607 5468 	addw	r4, r7, #3432	@ 0xd68
 800566e:	f6a4 545c 	subw	r4, r4, #3420	@ 0xd5c
 8005672:	6020      	str	r0, [r4, #0]
 8005674:	f607 5068 	addw	r0, r7, #3432	@ 0xd68
 8005678:	f5a0 6056 	sub.w	r0, r0, #3424	@ 0xd60
 800567c:	6001      	str	r1, [r0, #0]
 800567e:	f607 5168 	addw	r1, r7, #3432	@ 0xd68
 8005682:	f6a1 5164 	subw	r1, r1, #3428	@ 0xd64
 8005686:	600a      	str	r2, [r1, #0]
 8005688:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 800568c:	f6a2 5268 	subw	r2, r2, #3432	@ 0xd68
 8005690:	6013      	str	r3, [r2, #0]
    //Cria a matriz H
    float mat_H[N][tam], my_2[tam];
    float H_Ht[N][N], inv[N][N];
    float mul_mat[N][tam];
    float X[N];
    float psi7 = 0, psi8 = 0, divs = 0, n1 = 0, n2 = 0, n3 = 0, n4 = 0, n5 = 0, n6 = 0, bx = 0, by = 0, bz = 0, sx = 0, sy = 0, sz = 0, rho = 0, phi = 0, lambida = 0;
 8005692:	f04f 0300 	mov.w	r3, #0
 8005696:	4a40      	ldr	r2, [pc, #256]	@ (8005798 <ETS+0x138>)
 8005698:	443a      	add	r2, r7
 800569a:	6013      	str	r3, [r2, #0]
 800569c:	f04f 0300 	mov.w	r3, #0
 80056a0:	4a3e      	ldr	r2, [pc, #248]	@ (800579c <ETS+0x13c>)
 80056a2:	443a      	add	r2, r7
 80056a4:	6013      	str	r3, [r2, #0]
 80056a6:	f04f 0300 	mov.w	r3, #0
 80056aa:	4a3d      	ldr	r2, [pc, #244]	@ (80057a0 <ETS+0x140>)
 80056ac:	443a      	add	r2, r7
 80056ae:	6013      	str	r3, [r2, #0]
 80056b0:	f04f 0300 	mov.w	r3, #0
 80056b4:	4a3b      	ldr	r2, [pc, #236]	@ (80057a4 <ETS+0x144>)
 80056b6:	443a      	add	r2, r7
 80056b8:	6013      	str	r3, [r2, #0]
 80056ba:	f04f 0300 	mov.w	r3, #0
 80056be:	4a3a      	ldr	r2, [pc, #232]	@ (80057a8 <ETS+0x148>)
 80056c0:	443a      	add	r2, r7
 80056c2:	6013      	str	r3, [r2, #0]
 80056c4:	f04f 0300 	mov.w	r3, #0
 80056c8:	4a38      	ldr	r2, [pc, #224]	@ (80057ac <ETS+0x14c>)
 80056ca:	443a      	add	r2, r7
 80056cc:	6013      	str	r3, [r2, #0]
 80056ce:	f04f 0300 	mov.w	r3, #0
 80056d2:	4a37      	ldr	r2, [pc, #220]	@ (80057b0 <ETS+0x150>)
 80056d4:	443a      	add	r2, r7
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	f04f 0300 	mov.w	r3, #0
 80056dc:	4a35      	ldr	r2, [pc, #212]	@ (80057b4 <ETS+0x154>)
 80056de:	443a      	add	r2, r7
 80056e0:	6013      	str	r3, [r2, #0]
 80056e2:	f04f 0300 	mov.w	r3, #0
 80056e6:	4a34      	ldr	r2, [pc, #208]	@ (80057b8 <ETS+0x158>)
 80056e8:	443a      	add	r2, r7
 80056ea:	6013      	str	r3, [r2, #0]
 80056ec:	f04f 0300 	mov.w	r3, #0
 80056f0:	4a32      	ldr	r2, [pc, #200]	@ (80057bc <ETS+0x15c>)
 80056f2:	443a      	add	r2, r7
 80056f4:	6013      	str	r3, [r2, #0]
 80056f6:	f04f 0300 	mov.w	r3, #0
 80056fa:	4a31      	ldr	r2, [pc, #196]	@ (80057c0 <ETS+0x160>)
 80056fc:	443a      	add	r2, r7
 80056fe:	6013      	str	r3, [r2, #0]
 8005700:	f04f 0300 	mov.w	r3, #0
 8005704:	4a2f      	ldr	r2, [pc, #188]	@ (80057c4 <ETS+0x164>)
 8005706:	443a      	add	r2, r7
 8005708:	6013      	str	r3, [r2, #0]
 800570a:	f04f 0300 	mov.w	r3, #0
 800570e:	4a2e      	ldr	r2, [pc, #184]	@ (80057c8 <ETS+0x168>)
 8005710:	443a      	add	r2, r7
 8005712:	6013      	str	r3, [r2, #0]
 8005714:	f04f 0300 	mov.w	r3, #0
 8005718:	4a2c      	ldr	r2, [pc, #176]	@ (80057cc <ETS+0x16c>)
 800571a:	443a      	add	r2, r7
 800571c:	6013      	str	r3, [r2, #0]
 800571e:	f04f 0300 	mov.w	r3, #0
 8005722:	4a2b      	ldr	r2, [pc, #172]	@ (80057d0 <ETS+0x170>)
 8005724:	443a      	add	r2, r7
 8005726:	6013      	str	r3, [r2, #0]
 8005728:	f04f 0300 	mov.w	r3, #0
 800572c:	4a29      	ldr	r2, [pc, #164]	@ (80057d4 <ETS+0x174>)
 800572e:	443a      	add	r2, r7
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	f04f 0300 	mov.w	r3, #0
 8005736:	4a28      	ldr	r2, [pc, #160]	@ (80057d8 <ETS+0x178>)
 8005738:	443a      	add	r2, r7
 800573a:	6013      	str	r3, [r2, #0]
 800573c:	f04f 0300 	mov.w	r3, #0
 8005740:	4a26      	ldr	r2, [pc, #152]	@ (80057dc <ETS+0x17c>)
 8005742:	443a      	add	r2, r7
 8005744:	6013      	str	r3, [r2, #0]
    float X1_2 = 0, X2_2 = 0, X3_2 = 0, X4_2 = 0, X5_2 = 0, X6_2 = 0, X7_2 = 0;
 8005746:	f04f 0300 	mov.w	r3, #0
 800574a:	4a25      	ldr	r2, [pc, #148]	@ (80057e0 <ETS+0x180>)
 800574c:	443a      	add	r2, r7
 800574e:	6013      	str	r3, [r2, #0]
 8005750:	f04f 0300 	mov.w	r3, #0
 8005754:	4a23      	ldr	r2, [pc, #140]	@ (80057e4 <ETS+0x184>)
 8005756:	443a      	add	r2, r7
 8005758:	6013      	str	r3, [r2, #0]
 800575a:	f04f 0300 	mov.w	r3, #0
 800575e:	4a22      	ldr	r2, [pc, #136]	@ (80057e8 <ETS+0x188>)
 8005760:	443a      	add	r2, r7
 8005762:	6013      	str	r3, [r2, #0]
 8005764:	f04f 0300 	mov.w	r3, #0
 8005768:	4a20      	ldr	r2, [pc, #128]	@ (80057ec <ETS+0x18c>)
 800576a:	443a      	add	r2, r7
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	f04f 0300 	mov.w	r3, #0
 8005772:	4a1f      	ldr	r2, [pc, #124]	@ (80057f0 <ETS+0x190>)
 8005774:	443a      	add	r2, r7
 8005776:	6013      	str	r3, [r2, #0]
 8005778:	f04f 0300 	mov.w	r3, #0
 800577c:	4a1d      	ldr	r2, [pc, #116]	@ (80057f4 <ETS+0x194>)
 800577e:	443a      	add	r2, r7
 8005780:	6013      	str	r3, [r2, #0]
 8005782:	f04f 0300 	mov.w	r3, #0
 8005786:	4a1c      	ldr	r2, [pc, #112]	@ (80057f8 <ETS+0x198>)
 8005788:	443a      	add	r2, r7
 800578a:	6013      	str	r3, [r2, #0]
    for(int i=0; i < tam; i++)
 800578c:	2300      	movs	r3, #0
 800578e:	4a1b      	ldr	r2, [pc, #108]	@ (80057fc <ETS+0x19c>)
 8005790:	443a      	add	r2, r7
 8005792:	6013      	str	r3, [r2, #0]
 8005794:	e178      	b.n	8005a88 <ETS+0x428>
 8005796:	bf00      	nop
 8005798:	00014d40 	.word	0x00014d40
 800579c:	00014d3c 	.word	0x00014d3c
 80057a0:	00014d38 	.word	0x00014d38
 80057a4:	00014d34 	.word	0x00014d34
 80057a8:	00014d30 	.word	0x00014d30
 80057ac:	00014d2c 	.word	0x00014d2c
 80057b0:	00014d28 	.word	0x00014d28
 80057b4:	00014d24 	.word	0x00014d24
 80057b8:	00014d20 	.word	0x00014d20
 80057bc:	00014d1c 	.word	0x00014d1c
 80057c0:	00014d18 	.word	0x00014d18
 80057c4:	00014d14 	.word	0x00014d14
 80057c8:	00014d10 	.word	0x00014d10
 80057cc:	00014d0c 	.word	0x00014d0c
 80057d0:	00014d08 	.word	0x00014d08
 80057d4:	00014d04 	.word	0x00014d04
 80057d8:	00014d00 	.word	0x00014d00
 80057dc:	00014cfc 	.word	0x00014cfc
 80057e0:	00014cf8 	.word	0x00014cf8
 80057e4:	00014cf4 	.word	0x00014cf4
 80057e8:	00014cf0 	.word	0x00014cf0
 80057ec:	00014cec 	.word	0x00014cec
 80057f0:	00014ce8 	.word	0x00014ce8
 80057f4:	00014ce4 	.word	0x00014ce4
 80057f8:	00014ce0 	.word	0x00014ce0
 80057fc:	00014d64 	.word	0x00014d64
    {
        mat_H[0][i] = mx[i]*mx[i];
 8005800:	4baa      	ldr	r3, [pc, #680]	@ (8005aac <ETS+0x44c>)
 8005802:	443b      	add	r3, r7
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 800580c:	f6a2 525c 	subw	r2, r2, #3420	@ 0xd5c
 8005810:	6812      	ldr	r2, [r2, #0]
 8005812:	4413      	add	r3, r2
 8005814:	6818      	ldr	r0, [r3, #0]
 8005816:	4ba5      	ldr	r3, [pc, #660]	@ (8005aac <ETS+0x44c>)
 8005818:	443b      	add	r3, r7
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 8005822:	f6a2 525c 	subw	r2, r2, #3420	@ 0xd5c
 8005826:	6812      	ldr	r2, [r2, #0]
 8005828:	4413      	add	r3, r2
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4619      	mov	r1, r3
 800582e:	f7fb fb59 	bl	8000ee4 <__aeabi_fmul>
 8005832:	4603      	mov	r3, r0
 8005834:	4619      	mov	r1, r3
 8005836:	f64b 5368 	movw	r3, #48488	@ 0xbd68
 800583a:	443b      	add	r3, r7
 800583c:	f6a3 43e8 	subw	r3, r3, #3304	@ 0xce8
 8005840:	4a9a      	ldr	r2, [pc, #616]	@ (8005aac <ETS+0x44c>)
 8005842:	443a      	add	r2, r7
 8005844:	6812      	ldr	r2, [r2, #0]
 8005846:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        mat_H[1][i] = mx[i]*my[i];
 800584a:	4b98      	ldr	r3, [pc, #608]	@ (8005aac <ETS+0x44c>)
 800584c:	443b      	add	r3, r7
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 8005856:	f6a2 525c 	subw	r2, r2, #3420	@ 0xd5c
 800585a:	6812      	ldr	r2, [r2, #0]
 800585c:	4413      	add	r3, r2
 800585e:	6818      	ldr	r0, [r3, #0]
 8005860:	4b92      	ldr	r3, [pc, #584]	@ (8005aac <ETS+0x44c>)
 8005862:	443b      	add	r3, r7
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 800586c:	f5a2 6256 	sub.w	r2, r2, #3424	@ 0xd60
 8005870:	6812      	ldr	r2, [r2, #0]
 8005872:	4413      	add	r3, r2
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4619      	mov	r1, r3
 8005878:	f7fb fb34 	bl	8000ee4 <__aeabi_fmul>
 800587c:	4603      	mov	r3, r0
 800587e:	4619      	mov	r1, r3
 8005880:	f64b 5368 	movw	r3, #48488	@ 0xbd68
 8005884:	443b      	add	r3, r7
 8005886:	f6a3 43e8 	subw	r3, r3, #3304	@ 0xce8
 800588a:	4a88      	ldr	r2, [pc, #544]	@ (8005aac <ETS+0x44c>)
 800588c:	443a      	add	r2, r7
 800588e:	6812      	ldr	r2, [r2, #0]
 8005890:	f502 628b 	add.w	r2, r2, #1112	@ 0x458
 8005894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        mat_H[2][i] = mx[i]*mz[i];
 8005898:	4b84      	ldr	r3, [pc, #528]	@ (8005aac <ETS+0x44c>)
 800589a:	443b      	add	r3, r7
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 80058a4:	f6a2 525c 	subw	r2, r2, #3420	@ 0xd5c
 80058a8:	6812      	ldr	r2, [r2, #0]
 80058aa:	4413      	add	r3, r2
 80058ac:	6818      	ldr	r0, [r3, #0]
 80058ae:	4b7f      	ldr	r3, [pc, #508]	@ (8005aac <ETS+0x44c>)
 80058b0:	443b      	add	r3, r7
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 80058ba:	f6a2 5264 	subw	r2, r2, #3428	@ 0xd64
 80058be:	6812      	ldr	r2, [r2, #0]
 80058c0:	4413      	add	r3, r2
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4619      	mov	r1, r3
 80058c6:	f7fb fb0d 	bl	8000ee4 <__aeabi_fmul>
 80058ca:	4603      	mov	r3, r0
 80058cc:	4619      	mov	r1, r3
 80058ce:	f64b 5368 	movw	r3, #48488	@ 0xbd68
 80058d2:	443b      	add	r3, r7
 80058d4:	f6a3 43e8 	subw	r3, r3, #3304	@ 0xce8
 80058d8:	4a74      	ldr	r2, [pc, #464]	@ (8005aac <ETS+0x44c>)
 80058da:	443a      	add	r2, r7
 80058dc:	6812      	ldr	r2, [r2, #0]
 80058de:	f502 620b 	add.w	r2, r2, #2224	@ 0x8b0
 80058e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        mat_H[3][i] = my[i]*mz[i];
 80058e6:	4b71      	ldr	r3, [pc, #452]	@ (8005aac <ETS+0x44c>)
 80058e8:	443b      	add	r3, r7
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 80058f2:	f5a2 6256 	sub.w	r2, r2, #3424	@ 0xd60
 80058f6:	6812      	ldr	r2, [r2, #0]
 80058f8:	4413      	add	r3, r2
 80058fa:	6818      	ldr	r0, [r3, #0]
 80058fc:	4b6b      	ldr	r3, [pc, #428]	@ (8005aac <ETS+0x44c>)
 80058fe:	443b      	add	r3, r7
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 8005908:	f6a2 5264 	subw	r2, r2, #3428	@ 0xd64
 800590c:	6812      	ldr	r2, [r2, #0]
 800590e:	4413      	add	r3, r2
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4619      	mov	r1, r3
 8005914:	f7fb fae6 	bl	8000ee4 <__aeabi_fmul>
 8005918:	4603      	mov	r3, r0
 800591a:	4619      	mov	r1, r3
 800591c:	f64b 5368 	movw	r3, #48488	@ 0xbd68
 8005920:	443b      	add	r3, r7
 8005922:	f6a3 43e8 	subw	r3, r3, #3304	@ 0xce8
 8005926:	4a61      	ldr	r2, [pc, #388]	@ (8005aac <ETS+0x44c>)
 8005928:	443a      	add	r2, r7
 800592a:	6812      	ldr	r2, [r2, #0]
 800592c:	f602 5208 	addw	r2, r2, #3336	@ 0xd08
 8005930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        mat_H[4][i] = mz[i]*mz[i];
 8005934:	4b5d      	ldr	r3, [pc, #372]	@ (8005aac <ETS+0x44c>)
 8005936:	443b      	add	r3, r7
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 8005940:	f6a2 5264 	subw	r2, r2, #3428	@ 0xd64
 8005944:	6812      	ldr	r2, [r2, #0]
 8005946:	4413      	add	r3, r2
 8005948:	6818      	ldr	r0, [r3, #0]
 800594a:	4b58      	ldr	r3, [pc, #352]	@ (8005aac <ETS+0x44c>)
 800594c:	443b      	add	r3, r7
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 8005956:	f6a2 5264 	subw	r2, r2, #3428	@ 0xd64
 800595a:	6812      	ldr	r2, [r2, #0]
 800595c:	4413      	add	r3, r2
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4619      	mov	r1, r3
 8005962:	f7fb fabf 	bl	8000ee4 <__aeabi_fmul>
 8005966:	4603      	mov	r3, r0
 8005968:	4619      	mov	r1, r3
 800596a:	f64b 5368 	movw	r3, #48488	@ 0xbd68
 800596e:	443b      	add	r3, r7
 8005970:	f6a3 43e8 	subw	r3, r3, #3304	@ 0xce8
 8005974:	4a4d      	ldr	r2, [pc, #308]	@ (8005aac <ETS+0x44c>)
 8005976:	443a      	add	r2, r7
 8005978:	6812      	ldr	r2, [r2, #0]
 800597a:	f502 528b 	add.w	r2, r2, #4448	@ 0x1160
 800597e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        mat_H[5][i] = mx[i];
 8005982:	4b4a      	ldr	r3, [pc, #296]	@ (8005aac <ETS+0x44c>)
 8005984:	443b      	add	r3, r7
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 800598e:	f6a2 525c 	subw	r2, r2, #3420	@ 0xd5c
 8005992:	6812      	ldr	r2, [r2, #0]
 8005994:	4413      	add	r3, r2
 8005996:	6819      	ldr	r1, [r3, #0]
 8005998:	f64b 5368 	movw	r3, #48488	@ 0xbd68
 800599c:	443b      	add	r3, r7
 800599e:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 80059a2:	4b42      	ldr	r3, [pc, #264]	@ (8005aac <ETS+0x44c>)
 80059a4:	443b      	add	r3, r7
 80059a6:	6818      	ldr	r0, [r3, #0]
 80059a8:	f241 53b8 	movw	r3, #5560	@ 0x15b8
 80059ac:	4403      	add	r3, r0
 80059ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        mat_H[6][i] = my[i];
 80059b2:	4b3e      	ldr	r3, [pc, #248]	@ (8005aac <ETS+0x44c>)
 80059b4:	443b      	add	r3, r7
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 80059be:	f5a2 6256 	sub.w	r2, r2, #3424	@ 0xd60
 80059c2:	6812      	ldr	r2, [r2, #0]
 80059c4:	4413      	add	r3, r2
 80059c6:	6819      	ldr	r1, [r3, #0]
 80059c8:	f64b 5368 	movw	r3, #48488	@ 0xbd68
 80059cc:	443b      	add	r3, r7
 80059ce:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 80059d2:	4b36      	ldr	r3, [pc, #216]	@ (8005aac <ETS+0x44c>)
 80059d4:	443b      	add	r3, r7
 80059d6:	6818      	ldr	r0, [r3, #0]
 80059d8:	f641 2310 	movw	r3, #6672	@ 0x1a10
 80059dc:	4403      	add	r3, r0
 80059de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        mat_H[7][i] = mz[i];
 80059e2:	4b32      	ldr	r3, [pc, #200]	@ (8005aac <ETS+0x44c>)
 80059e4:	443b      	add	r3, r7
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 80059ee:	f6a2 5264 	subw	r2, r2, #3428	@ 0xd64
 80059f2:	6812      	ldr	r2, [r2, #0]
 80059f4:	4413      	add	r3, r2
 80059f6:	6819      	ldr	r1, [r3, #0]
 80059f8:	f64b 5368 	movw	r3, #48488	@ 0xbd68
 80059fc:	443b      	add	r3, r7
 80059fe:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 8005a02:	4b2a      	ldr	r3, [pc, #168]	@ (8005aac <ETS+0x44c>)
 8005a04:	443b      	add	r3, r7
 8005a06:	6818      	ldr	r0, [r3, #0]
 8005a08:	f641 6368 	movw	r3, #7784	@ 0x1e68
 8005a0c:	4403      	add	r3, r0
 8005a0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        mat_H[8][i] = 1;
 8005a12:	f64b 5368 	movw	r3, #48488	@ 0xbd68
 8005a16:	443b      	add	r3, r7
 8005a18:	f6a3 43e8 	subw	r3, r3, #3304	@ 0xce8
 8005a1c:	4a23      	ldr	r2, [pc, #140]	@ (8005aac <ETS+0x44c>)
 8005a1e:	443a      	add	r2, r7
 8005a20:	6812      	ldr	r2, [r2, #0]
 8005a22:	f502 520b 	add.w	r2, r2, #8896	@ 0x22c0
 8005a26:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8005a2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        my_2[i] = -(my[i]*my[i]);
 8005a2e:	4b1f      	ldr	r3, [pc, #124]	@ (8005aac <ETS+0x44c>)
 8005a30:	443b      	add	r3, r7
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 8005a3a:	f5a2 6256 	sub.w	r2, r2, #3424	@ 0xd60
 8005a3e:	6812      	ldr	r2, [r2, #0]
 8005a40:	4413      	add	r3, r2
 8005a42:	6818      	ldr	r0, [r3, #0]
 8005a44:	4b19      	ldr	r3, [pc, #100]	@ (8005aac <ETS+0x44c>)
 8005a46:	443b      	add	r3, r7
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 8005a50:	f5a2 6256 	sub.w	r2, r2, #3424	@ 0xd60
 8005a54:	6812      	ldr	r2, [r2, #0]
 8005a56:	4413      	add	r3, r2
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	f7fb fa42 	bl	8000ee4 <__aeabi_fmul>
 8005a60:	4603      	mov	r3, r0
 8005a62:	f083 4100 	eor.w	r1, r3, #2147483648	@ 0x80000000
 8005a66:	f64a 5368 	movw	r3, #44392	@ 0xad68
 8005a6a:	443b      	add	r3, r7
 8005a6c:	f6a3 6348 	subw	r3, r3, #3656	@ 0xe48
 8005a70:	4a0e      	ldr	r2, [pc, #56]	@ (8005aac <ETS+0x44c>)
 8005a72:	443a      	add	r2, r7
 8005a74:	6812      	ldr	r2, [r2, #0]
 8005a76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i=0; i < tam; i++)
 8005a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8005aac <ETS+0x44c>)
 8005a7c:	443b      	add	r3, r7
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	3301      	adds	r3, #1
 8005a82:	4a0a      	ldr	r2, [pc, #40]	@ (8005aac <ETS+0x44c>)
 8005a84:	443a      	add	r2, r7
 8005a86:	6013      	str	r3, [r2, #0]
 8005a88:	4b08      	ldr	r3, [pc, #32]	@ (8005aac <ETS+0x44c>)
 8005a8a:	443b      	add	r3, r7
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8005a92:	f6ff aeb5 	blt.w	8005800 <ETS+0x1a0>
    }

    //Multiplicação da matriz H por sua transposta
    for(int i=0; i < N; i++)
 8005a96:	2300      	movs	r3, #0
 8005a98:	4a05      	ldr	r2, [pc, #20]	@ (8005ab0 <ETS+0x450>)
 8005a9a:	443a      	add	r2, r7
 8005a9c:	6013      	str	r3, [r2, #0]
 8005a9e:	e094      	b.n	8005bca <ETS+0x56a>
    {
        for(int j=0; j < N; j++)
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	4a04      	ldr	r2, [pc, #16]	@ (8005ab4 <ETS+0x454>)
 8005aa4:	443a      	add	r2, r7
 8005aa6:	6013      	str	r3, [r2, #0]
 8005aa8:	e082      	b.n	8005bb0 <ETS+0x550>
 8005aaa:	bf00      	nop
 8005aac:	00014d64 	.word	0x00014d64
 8005ab0:	00014d60 	.word	0x00014d60
 8005ab4:	00014d5c 	.word	0x00014d5c
        {
            H_Ht[i][j] = 0;
 8005ab8:	f64a 5368 	movw	r3, #44392	@ 0xad68
 8005abc:	443b      	add	r3, r7
 8005abe:	f6a3 718c 	subw	r1, r3, #3980	@ 0xf8c
 8005ac2:	4ba3      	ldr	r3, [pc, #652]	@ (8005d50 <ETS+0x6f0>)
 8005ac4:	443b      	add	r3, r7
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	4413      	add	r3, r2
 8005ace:	4aa1      	ldr	r2, [pc, #644]	@ (8005d54 <ETS+0x6f4>)
 8005ad0:	443a      	add	r2, r7
 8005ad2:	6812      	ldr	r2, [r2, #0]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f04f 0200 	mov.w	r2, #0
 8005ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for(int k = 0; k < tam; k++)
 8005ade:	2300      	movs	r3, #0
 8005ae0:	4a9d      	ldr	r2, [pc, #628]	@ (8005d58 <ETS+0x6f8>)
 8005ae2:	443a      	add	r2, r7
 8005ae4:	6013      	str	r3, [r2, #0]
 8005ae6:	e056      	b.n	8005b96 <ETS+0x536>
            {
                H_Ht[i][j] += mat_H[i][k]*mat_H[j][k];
 8005ae8:	f64a 5368 	movw	r3, #44392	@ 0xad68
 8005aec:	443b      	add	r3, r7
 8005aee:	f6a3 718c 	subw	r1, r3, #3980	@ 0xf8c
 8005af2:	4b97      	ldr	r3, [pc, #604]	@ (8005d50 <ETS+0x6f0>)
 8005af4:	443b      	add	r3, r7
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	4613      	mov	r3, r2
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	4413      	add	r3, r2
 8005afe:	4a95      	ldr	r2, [pc, #596]	@ (8005d54 <ETS+0x6f4>)
 8005b00:	443a      	add	r2, r7
 8005b02:	6812      	ldr	r2, [r2, #0]
 8005b04:	4413      	add	r3, r2
 8005b06:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8005b0a:	f64b 5368 	movw	r3, #48488	@ 0xbd68
 8005b0e:	443b      	add	r3, r7
 8005b10:	f6a3 43e8 	subw	r3, r3, #3304	@ 0xce8
 8005b14:	4a8e      	ldr	r2, [pc, #568]	@ (8005d50 <ETS+0x6f0>)
 8005b16:	443a      	add	r2, r7
 8005b18:	6812      	ldr	r2, [r2, #0]
 8005b1a:	f44f 618b 	mov.w	r1, #1112	@ 0x458
 8005b1e:	fb02 f101 	mul.w	r1, r2, r1
 8005b22:	4a8d      	ldr	r2, [pc, #564]	@ (8005d58 <ETS+0x6f8>)
 8005b24:	443a      	add	r2, r7
 8005b26:	6812      	ldr	r2, [r2, #0]
 8005b28:	440a      	add	r2, r1
 8005b2a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005b2e:	f64b 5368 	movw	r3, #48488	@ 0xbd68
 8005b32:	443b      	add	r3, r7
 8005b34:	f6a3 43e8 	subw	r3, r3, #3304	@ 0xce8
 8005b38:	4a86      	ldr	r2, [pc, #536]	@ (8005d54 <ETS+0x6f4>)
 8005b3a:	443a      	add	r2, r7
 8005b3c:	6812      	ldr	r2, [r2, #0]
 8005b3e:	f44f 618b 	mov.w	r1, #1112	@ 0x458
 8005b42:	fb02 f101 	mul.w	r1, r2, r1
 8005b46:	4a84      	ldr	r2, [pc, #528]	@ (8005d58 <ETS+0x6f8>)
 8005b48:	443a      	add	r2, r7
 8005b4a:	6812      	ldr	r2, [r2, #0]
 8005b4c:	440a      	add	r2, r1
 8005b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b52:	4619      	mov	r1, r3
 8005b54:	f7fb f9c6 	bl	8000ee4 <__aeabi_fmul>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	f7fb f8b9 	bl	8000cd4 <__addsf3>
 8005b62:	4603      	mov	r3, r0
 8005b64:	4618      	mov	r0, r3
 8005b66:	f64a 5368 	movw	r3, #44392	@ 0xad68
 8005b6a:	443b      	add	r3, r7
 8005b6c:	f6a3 718c 	subw	r1, r3, #3980	@ 0xf8c
 8005b70:	4b77      	ldr	r3, [pc, #476]	@ (8005d50 <ETS+0x6f0>)
 8005b72:	443b      	add	r3, r7
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	4613      	mov	r3, r2
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	4413      	add	r3, r2
 8005b7c:	4a75      	ldr	r2, [pc, #468]	@ (8005d54 <ETS+0x6f4>)
 8005b7e:	443a      	add	r2, r7
 8005b80:	6812      	ldr	r2, [r2, #0]
 8005b82:	4413      	add	r3, r2
 8005b84:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
            for(int k = 0; k < tam; k++)
 8005b88:	4b73      	ldr	r3, [pc, #460]	@ (8005d58 <ETS+0x6f8>)
 8005b8a:	443b      	add	r3, r7
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	4a71      	ldr	r2, [pc, #452]	@ (8005d58 <ETS+0x6f8>)
 8005b92:	443a      	add	r2, r7
 8005b94:	6013      	str	r3, [r2, #0]
 8005b96:	4b70      	ldr	r3, [pc, #448]	@ (8005d58 <ETS+0x6f8>)
 8005b98:	443b      	add	r3, r7
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8005ba0:	dba2      	blt.n	8005ae8 <ETS+0x488>
        for(int j=0; j < N; j++)
 8005ba2:	4b6c      	ldr	r3, [pc, #432]	@ (8005d54 <ETS+0x6f4>)
 8005ba4:	443b      	add	r3, r7
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	4a6a      	ldr	r2, [pc, #424]	@ (8005d54 <ETS+0x6f4>)
 8005bac:	443a      	add	r2, r7
 8005bae:	6013      	str	r3, [r2, #0]
 8005bb0:	4b68      	ldr	r3, [pc, #416]	@ (8005d54 <ETS+0x6f4>)
 8005bb2:	443b      	add	r3, r7
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2b08      	cmp	r3, #8
 8005bb8:	f77f af7e 	ble.w	8005ab8 <ETS+0x458>
    for(int i=0; i < N; i++)
 8005bbc:	4b64      	ldr	r3, [pc, #400]	@ (8005d50 <ETS+0x6f0>)
 8005bbe:	443b      	add	r3, r7
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	4a62      	ldr	r2, [pc, #392]	@ (8005d50 <ETS+0x6f0>)
 8005bc6:	443a      	add	r2, r7
 8005bc8:	6013      	str	r3, [r2, #0]
 8005bca:	4b61      	ldr	r3, [pc, #388]	@ (8005d50 <ETS+0x6f0>)
 8005bcc:	443b      	add	r3, r7
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2b08      	cmp	r3, #8
 8005bd2:	f77f af65 	ble.w	8005aa0 <ETS+0x440>
            }
        }
    }

    inverter_matriz(H_Ht, inv);
 8005bd6:	4a61      	ldr	r2, [pc, #388]	@ (8005d5c <ETS+0x6fc>)
 8005bd8:	4b61      	ldr	r3, [pc, #388]	@ (8005d60 <ETS+0x700>)
 8005bda:	4413      	add	r3, r2
 8005bdc:	19da      	adds	r2, r3, r7
 8005bde:	4b61      	ldr	r3, [pc, #388]	@ (8005d64 <ETS+0x704>)
 8005be0:	f503 33a6 	add.w	r3, r3, #84992	@ 0x14c00
 8005be4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005be8:	443b      	add	r3, r7
 8005bea:	4611      	mov	r1, r2
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7fb fd29 	bl	8001644 <inverter_matriz>

    //Multiplica a inversa por H transposta
    for(int i=0; i < N; i++)
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	4a5c      	ldr	r2, [pc, #368]	@ (8005d68 <ETS+0x708>)
 8005bf6:	443a      	add	r2, r7
 8005bf8:	6013      	str	r3, [r2, #0]
 8005bfa:	e08d      	b.n	8005d18 <ETS+0x6b8>
    {
        for(int j=0; j < tam; j++)
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	4a5b      	ldr	r2, [pc, #364]	@ (8005d6c <ETS+0x70c>)
 8005c00:	443a      	add	r2, r7
 8005c02:	6013      	str	r3, [r2, #0]
 8005c04:	e07a      	b.n	8005cfc <ETS+0x69c>
        {
            mul_mat[i][j] = 0;
 8005c06:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005c0a:	f5a3 6353 	sub.w	r3, r3, #3376	@ 0xd30
 8005c0e:	4a56      	ldr	r2, [pc, #344]	@ (8005d68 <ETS+0x708>)
 8005c10:	443a      	add	r2, r7
 8005c12:	6812      	ldr	r2, [r2, #0]
 8005c14:	f44f 618b 	mov.w	r1, #1112	@ 0x458
 8005c18:	fb02 f101 	mul.w	r1, r2, r1
 8005c1c:	4a53      	ldr	r2, [pc, #332]	@ (8005d6c <ETS+0x70c>)
 8005c1e:	443a      	add	r2, r7
 8005c20:	6812      	ldr	r2, [r2, #0]
 8005c22:	440a      	add	r2, r1
 8005c24:	f04f 0100 	mov.w	r1, #0
 8005c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for(int k=0; k < N; k++)
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	4a50      	ldr	r2, [pc, #320]	@ (8005d70 <ETS+0x710>)
 8005c30:	443a      	add	r2, r7
 8005c32:	6013      	str	r3, [r2, #0]
 8005c34:	e056      	b.n	8005ce4 <ETS+0x684>
            {
                mul_mat[i][j] += inv[i][k]*mat_H[k][j];
 8005c36:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005c3a:	f5a3 6353 	sub.w	r3, r3, #3376	@ 0xd30
 8005c3e:	4a4a      	ldr	r2, [pc, #296]	@ (8005d68 <ETS+0x708>)
 8005c40:	443a      	add	r2, r7
 8005c42:	6812      	ldr	r2, [r2, #0]
 8005c44:	f44f 618b 	mov.w	r1, #1112	@ 0x458
 8005c48:	fb02 f101 	mul.w	r1, r2, r1
 8005c4c:	4a47      	ldr	r2, [pc, #284]	@ (8005d6c <ETS+0x70c>)
 8005c4e:	443a      	add	r2, r7
 8005c50:	6812      	ldr	r2, [r2, #0]
 8005c52:	440a      	add	r2, r1
 8005c54:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8005c58:	f649 5368 	movw	r3, #40296	@ 0x9d68
 8005c5c:	443b      	add	r3, r7
 8005c5e:	4619      	mov	r1, r3
 8005c60:	4b41      	ldr	r3, [pc, #260]	@ (8005d68 <ETS+0x708>)
 8005c62:	443b      	add	r3, r7
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	4613      	mov	r3, r2
 8005c68:	00db      	lsls	r3, r3, #3
 8005c6a:	4413      	add	r3, r2
 8005c6c:	4a40      	ldr	r2, [pc, #256]	@ (8005d70 <ETS+0x710>)
 8005c6e:	443a      	add	r2, r7
 8005c70:	6812      	ldr	r2, [r2, #0]
 8005c72:	4413      	add	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	440b      	add	r3, r1
 8005c78:	f853 0cd0 	ldr.w	r0, [r3, #-208]
 8005c7c:	f64b 5368 	movw	r3, #48488	@ 0xbd68
 8005c80:	443b      	add	r3, r7
 8005c82:	f6a3 43e8 	subw	r3, r3, #3304	@ 0xce8
 8005c86:	4a3a      	ldr	r2, [pc, #232]	@ (8005d70 <ETS+0x710>)
 8005c88:	443a      	add	r2, r7
 8005c8a:	6812      	ldr	r2, [r2, #0]
 8005c8c:	f44f 618b 	mov.w	r1, #1112	@ 0x458
 8005c90:	fb02 f101 	mul.w	r1, r2, r1
 8005c94:	4a35      	ldr	r2, [pc, #212]	@ (8005d6c <ETS+0x70c>)
 8005c96:	443a      	add	r2, r7
 8005c98:	6812      	ldr	r2, [r2, #0]
 8005c9a:	440a      	add	r2, r1
 8005c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	f7fb f91f 	bl	8000ee4 <__aeabi_fmul>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	4619      	mov	r1, r3
 8005caa:	4620      	mov	r0, r4
 8005cac:	f7fb f812 	bl	8000cd4 <__addsf3>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005cb8:	f5a3 6353 	sub.w	r3, r3, #3376	@ 0xd30
 8005cbc:	4a2a      	ldr	r2, [pc, #168]	@ (8005d68 <ETS+0x708>)
 8005cbe:	443a      	add	r2, r7
 8005cc0:	6812      	ldr	r2, [r2, #0]
 8005cc2:	f44f 618b 	mov.w	r1, #1112	@ 0x458
 8005cc6:	fb02 f101 	mul.w	r1, r2, r1
 8005cca:	4a28      	ldr	r2, [pc, #160]	@ (8005d6c <ETS+0x70c>)
 8005ccc:	443a      	add	r2, r7
 8005cce:	6812      	ldr	r2, [r2, #0]
 8005cd0:	440a      	add	r2, r1
 8005cd2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
            for(int k=0; k < N; k++)
 8005cd6:	4b26      	ldr	r3, [pc, #152]	@ (8005d70 <ETS+0x710>)
 8005cd8:	443b      	add	r3, r7
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	4a24      	ldr	r2, [pc, #144]	@ (8005d70 <ETS+0x710>)
 8005ce0:	443a      	add	r2, r7
 8005ce2:	6013      	str	r3, [r2, #0]
 8005ce4:	4b22      	ldr	r3, [pc, #136]	@ (8005d70 <ETS+0x710>)
 8005ce6:	443b      	add	r3, r7
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2b08      	cmp	r3, #8
 8005cec:	dda3      	ble.n	8005c36 <ETS+0x5d6>
        for(int j=0; j < tam; j++)
 8005cee:	4b1f      	ldr	r3, [pc, #124]	@ (8005d6c <ETS+0x70c>)
 8005cf0:	443b      	add	r3, r7
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	4a1d      	ldr	r2, [pc, #116]	@ (8005d6c <ETS+0x70c>)
 8005cf8:	443a      	add	r2, r7
 8005cfa:	6013      	str	r3, [r2, #0]
 8005cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8005d6c <ETS+0x70c>)
 8005cfe:	443b      	add	r3, r7
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8005d06:	f6ff af7e 	blt.w	8005c06 <ETS+0x5a6>
    for(int i=0; i < N; i++)
 8005d0a:	4b17      	ldr	r3, [pc, #92]	@ (8005d68 <ETS+0x708>)
 8005d0c:	443b      	add	r3, r7
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	3301      	adds	r3, #1
 8005d12:	4a15      	ldr	r2, [pc, #84]	@ (8005d68 <ETS+0x708>)
 8005d14:	443a      	add	r2, r7
 8005d16:	6013      	str	r3, [r2, #0]
 8005d18:	4b13      	ldr	r3, [pc, #76]	@ (8005d68 <ETS+0x708>)
 8005d1a:	443b      	add	r3, r7
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2b08      	cmp	r3, #8
 8005d20:	f77f af6c 	ble.w	8005bfc <ETS+0x59c>
            }
        }
    }

    //Resultado da psedo-inversa
    for(int i=0; i < N; i++)
 8005d24:	2300      	movs	r3, #0
 8005d26:	4a13      	ldr	r2, [pc, #76]	@ (8005d74 <ETS+0x714>)
 8005d28:	443a      	add	r2, r7
 8005d2a:	6013      	str	r3, [r2, #0]
 8005d2c:	e071      	b.n	8005e12 <ETS+0x7b2>
    {
        X[i] = 0;
 8005d2e:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005d32:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005d36:	4a0f      	ldr	r2, [pc, #60]	@ (8005d74 <ETS+0x714>)
 8005d38:	443a      	add	r2, r7
 8005d3a:	6812      	ldr	r2, [r2, #0]
 8005d3c:	f04f 0100 	mov.w	r1, #0
 8005d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for(int j=0; j < tam; j++)
 8005d44:	2300      	movs	r3, #0
 8005d46:	4a0c      	ldr	r2, [pc, #48]	@ (8005d78 <ETS+0x718>)
 8005d48:	443a      	add	r2, r7
 8005d4a:	6013      	str	r3, [r2, #0]
 8005d4c:	e054      	b.n	8005df8 <ETS+0x798>
 8005d4e:	bf00      	nop
 8005d50:	00014d60 	.word	0x00014d60
 8005d54:	00014d5c 	.word	0x00014d5c
 8005d58:	00014d58 	.word	0x00014d58
 8005d5c:	ffff4f30 	.word	0xffff4f30
 8005d60:	00014d68 	.word	0x00014d68
 8005d64:	ffff5074 	.word	0xffff5074
 8005d68:	00014d54 	.word	0x00014d54
 8005d6c:	00014d50 	.word	0x00014d50
 8005d70:	00014d4c 	.word	0x00014d4c
 8005d74:	00014d48 	.word	0x00014d48
 8005d78:	00014d44 	.word	0x00014d44
        {
            X[i] += mul_mat[i][j]*my_2[j];
 8005d7c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005d80:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005d84:	4aaa      	ldr	r2, [pc, #680]	@ (8006030 <ETS+0x9d0>)
 8005d86:	443a      	add	r2, r7
 8005d88:	6812      	ldr	r2, [r2, #0]
 8005d8a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8005d8e:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005d92:	f5a3 6353 	sub.w	r3, r3, #3376	@ 0xd30
 8005d96:	4aa6      	ldr	r2, [pc, #664]	@ (8006030 <ETS+0x9d0>)
 8005d98:	443a      	add	r2, r7
 8005d9a:	6812      	ldr	r2, [r2, #0]
 8005d9c:	f44f 618b 	mov.w	r1, #1112	@ 0x458
 8005da0:	fb02 f101 	mul.w	r1, r2, r1
 8005da4:	4aa3      	ldr	r2, [pc, #652]	@ (8006034 <ETS+0x9d4>)
 8005da6:	443a      	add	r2, r7
 8005da8:	6812      	ldr	r2, [r2, #0]
 8005daa:	440a      	add	r2, r1
 8005dac:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005db0:	f64a 5368 	movw	r3, #44392	@ 0xad68
 8005db4:	443b      	add	r3, r7
 8005db6:	f6a3 6348 	subw	r3, r3, #3656	@ 0xe48
 8005dba:	4a9e      	ldr	r2, [pc, #632]	@ (8006034 <ETS+0x9d4>)
 8005dbc:	443a      	add	r2, r7
 8005dbe:	6812      	ldr	r2, [r2, #0]
 8005dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	f7fb f88d 	bl	8000ee4 <__aeabi_fmul>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	4619      	mov	r1, r3
 8005dce:	4620      	mov	r0, r4
 8005dd0:	f7fa ff80 	bl	8000cd4 <__addsf3>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005ddc:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005de0:	4a93      	ldr	r2, [pc, #588]	@ (8006030 <ETS+0x9d0>)
 8005de2:	443a      	add	r2, r7
 8005de4:	6812      	ldr	r2, [r2, #0]
 8005de6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for(int j=0; j < tam; j++)
 8005dea:	4b92      	ldr	r3, [pc, #584]	@ (8006034 <ETS+0x9d4>)
 8005dec:	443b      	add	r3, r7
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	3301      	adds	r3, #1
 8005df2:	4a90      	ldr	r2, [pc, #576]	@ (8006034 <ETS+0x9d4>)
 8005df4:	443a      	add	r2, r7
 8005df6:	6013      	str	r3, [r2, #0]
 8005df8:	4b8e      	ldr	r3, [pc, #568]	@ (8006034 <ETS+0x9d4>)
 8005dfa:	443b      	add	r3, r7
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8005e02:	dbbb      	blt.n	8005d7c <ETS+0x71c>
    for(int i=0; i < N; i++)
 8005e04:	4b8a      	ldr	r3, [pc, #552]	@ (8006030 <ETS+0x9d0>)
 8005e06:	443b      	add	r3, r7
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	4a88      	ldr	r2, [pc, #544]	@ (8006030 <ETS+0x9d0>)
 8005e0e:	443a      	add	r2, r7
 8005e10:	6013      	str	r3, [r2, #0]
 8005e12:	4b87      	ldr	r3, [pc, #540]	@ (8006030 <ETS+0x9d0>)
 8005e14:	443b      	add	r3, r7
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2b08      	cmp	r3, #8
 8005e1a:	dd88      	ble.n	8005d2e <ETS+0x6ce>
        }
    }


    // Segundo passo, encontrando os parâmetros
    X1_2 = X[1]*X[1];
 8005e1c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005e20:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005e2a:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	4619      	mov	r1, r3
 8005e32:	4610      	mov	r0, r2
 8005e34:	f7fb f856 	bl	8000ee4 <__aeabi_fmul>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	4a7f      	ldr	r2, [pc, #508]	@ (8006038 <ETS+0x9d8>)
 8005e3c:	443a      	add	r2, r7
 8005e3e:	6013      	str	r3, [r2, #0]
    X2_2 = X[2]*X[2];
 8005e40:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005e44:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005e48:	689a      	ldr	r2, [r3, #8]
 8005e4a:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005e4e:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	4619      	mov	r1, r3
 8005e56:	4610      	mov	r0, r2
 8005e58:	f7fb f844 	bl	8000ee4 <__aeabi_fmul>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	4a77      	ldr	r2, [pc, #476]	@ (800603c <ETS+0x9dc>)
 8005e60:	443a      	add	r2, r7
 8005e62:	6013      	str	r3, [r2, #0]
    X3_2 = X[3]*X[3];
 8005e64:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005e68:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005e6c:	68da      	ldr	r2, [r3, #12]
 8005e6e:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005e72:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	4619      	mov	r1, r3
 8005e7a:	4610      	mov	r0, r2
 8005e7c:	f7fb f832 	bl	8000ee4 <__aeabi_fmul>
 8005e80:	4603      	mov	r3, r0
 8005e82:	4a6f      	ldr	r2, [pc, #444]	@ (8006040 <ETS+0x9e0>)
 8005e84:	443a      	add	r2, r7
 8005e86:	6013      	str	r3, [r2, #0]
    X4_2 = X[4]*X[4];
 8005e88:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005e8c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005e90:	691a      	ldr	r2, [r3, #16]
 8005e92:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005e96:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	4610      	mov	r0, r2
 8005ea0:	f7fb f820 	bl	8000ee4 <__aeabi_fmul>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	4a67      	ldr	r2, [pc, #412]	@ (8006044 <ETS+0x9e4>)
 8005ea8:	443a      	add	r2, r7
 8005eaa:	6013      	str	r3, [r2, #0]
    X5_2 = X[5]*X[5];
 8005eac:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005eb0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005eb4:	695a      	ldr	r2, [r3, #20]
 8005eb6:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005eba:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	4610      	mov	r0, r2
 8005ec4:	f7fb f80e 	bl	8000ee4 <__aeabi_fmul>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	4a5f      	ldr	r2, [pc, #380]	@ (8006048 <ETS+0x9e8>)
 8005ecc:	443a      	add	r2, r7
 8005ece:	6013      	str	r3, [r2, #0]
    X6_2 = X[6]*X[6];
 8005ed0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005ed4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005ed8:	699a      	ldr	r2, [r3, #24]
 8005eda:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005ede:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	4610      	mov	r0, r2
 8005ee8:	f7fa fffc 	bl	8000ee4 <__aeabi_fmul>
 8005eec:	4603      	mov	r3, r0
 8005eee:	4a57      	ldr	r2, [pc, #348]	@ (800604c <ETS+0x9ec>)
 8005ef0:	443a      	add	r2, r7
 8005ef2:	6013      	str	r3, [r2, #0]
    X7_2 = X[7]*X[7];
 8005ef4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005ef8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005efc:	69da      	ldr	r2, [r3, #28]
 8005efe:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005f02:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005f06:	69db      	ldr	r3, [r3, #28]
 8005f08:	4619      	mov	r1, r3
 8005f0a:	4610      	mov	r0, r2
 8005f0c:	f7fa ffea 	bl	8000ee4 <__aeabi_fmul>
 8005f10:	4603      	mov	r3, r0
 8005f12:	4a4f      	ldr	r2, [pc, #316]	@ (8006050 <ETS+0x9f0>)
 8005f14:	443a      	add	r2, r7
 8005f16:	6013      	str	r3, [r2, #0]

    psi7 = 2*(X[4]*X1_2 - X[1]*X[2]*X[3] + X2_2 + X[0]*X3_2 - 4*X[0]*X[4]);
 8005f18:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005f1c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	4a45      	ldr	r2, [pc, #276]	@ (8006038 <ETS+0x9d8>)
 8005f24:	443a      	add	r2, r7
 8005f26:	6811      	ldr	r1, [r2, #0]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7fa ffdb 	bl	8000ee4 <__aeabi_fmul>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	461c      	mov	r4, r3
 8005f32:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005f36:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005f40:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	4619      	mov	r1, r3
 8005f48:	4610      	mov	r0, r2
 8005f4a:	f7fa ffcb 	bl	8000ee4 <__aeabi_fmul>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	461a      	mov	r2, r3
 8005f52:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005f56:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	4610      	mov	r0, r2
 8005f60:	f7fa ffc0 	bl	8000ee4 <__aeabi_fmul>
 8005f64:	4603      	mov	r3, r0
 8005f66:	4619      	mov	r1, r3
 8005f68:	4620      	mov	r0, r4
 8005f6a:	f7fa feb1 	bl	8000cd0 <__aeabi_fsub>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	4a32      	ldr	r2, [pc, #200]	@ (800603c <ETS+0x9dc>)
 8005f72:	443a      	add	r2, r7
 8005f74:	6811      	ldr	r1, [r2, #0]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7fa feac 	bl	8000cd4 <__addsf3>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	461c      	mov	r4, r3
 8005f80:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005f84:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a2d      	ldr	r2, [pc, #180]	@ (8006040 <ETS+0x9e0>)
 8005f8c:	443a      	add	r2, r7
 8005f8e:	6811      	ldr	r1, [r2, #0]
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7fa ffa7 	bl	8000ee4 <__aeabi_fmul>
 8005f96:	4603      	mov	r3, r0
 8005f98:	4619      	mov	r1, r3
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	f7fa fe9a 	bl	8000cd4 <__addsf3>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	461c      	mov	r4, r3
 8005fa4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005fa8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fa ff96 	bl	8000ee4 <__aeabi_fmul>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	461a      	mov	r2, r3
 8005fbc:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005fc0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	4610      	mov	r0, r2
 8005fca:	f7fa ff8b 	bl	8000ee4 <__aeabi_fmul>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f7fa fe7c 	bl	8000cd0 <__aeabi_fsub>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	4619      	mov	r1, r3
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7fa fe79 	bl	8000cd4 <__addsf3>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	4a1b      	ldr	r2, [pc, #108]	@ (8006054 <ETS+0x9f4>)
 8005fe6:	443a      	add	r2, r7
 8005fe8:	6013      	str	r3, [r2, #0]
    bx = -(X3_2 * X[5] + 2*X[2]*X[7] - 4*X[4]*X[5] - X[1]*X[3]*X[7] + 2*X[1]*X[4]*X[6] - X[2]*X[3]*X[6]) / psi7;
 8005fea:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005fee:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	4a12      	ldr	r2, [pc, #72]	@ (8006040 <ETS+0x9e0>)
 8005ff6:	443a      	add	r2, r7
 8005ff8:	6811      	ldr	r1, [r2, #0]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fa ff72 	bl	8000ee4 <__aeabi_fmul>
 8006000:	4603      	mov	r3, r0
 8006002:	461c      	mov	r4, r3
 8006004:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006008:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	4619      	mov	r1, r3
 8006010:	4618      	mov	r0, r3
 8006012:	f7fa fe5f 	bl	8000cd4 <__addsf3>
 8006016:	4603      	mov	r3, r0
 8006018:	461a      	mov	r2, r3
 800601a:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800601e:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006022:	69db      	ldr	r3, [r3, #28]
 8006024:	4619      	mov	r1, r3
 8006026:	4610      	mov	r0, r2
 8006028:	f7fa ff5c 	bl	8000ee4 <__aeabi_fmul>
 800602c:	e014      	b.n	8006058 <ETS+0x9f8>
 800602e:	bf00      	nop
 8006030:	00014d48 	.word	0x00014d48
 8006034:	00014d44 	.word	0x00014d44
 8006038:	00014cf8 	.word	0x00014cf8
 800603c:	00014cf4 	.word	0x00014cf4
 8006040:	00014cf0 	.word	0x00014cf0
 8006044:	00014cec 	.word	0x00014cec
 8006048:	00014ce8 	.word	0x00014ce8
 800604c:	00014ce4 	.word	0x00014ce4
 8006050:	00014ce0 	.word	0x00014ce0
 8006054:	00014d40 	.word	0x00014d40
 8006058:	4603      	mov	r3, r0
 800605a:	4619      	mov	r1, r3
 800605c:	4620      	mov	r0, r4
 800605e:	f7fa fe39 	bl	8000cd4 <__addsf3>
 8006062:	4603      	mov	r3, r0
 8006064:	461c      	mov	r4, r3
 8006066:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800606a:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8006074:	4618      	mov	r0, r3
 8006076:	f7fa ff35 	bl	8000ee4 <__aeabi_fmul>
 800607a:	4603      	mov	r3, r0
 800607c:	461a      	mov	r2, r3
 800607e:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006082:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006086:	695b      	ldr	r3, [r3, #20]
 8006088:	4619      	mov	r1, r3
 800608a:	4610      	mov	r0, r2
 800608c:	f7fa ff2a 	bl	8000ee4 <__aeabi_fmul>
 8006090:	4603      	mov	r3, r0
 8006092:	4619      	mov	r1, r3
 8006094:	4620      	mov	r0, r4
 8006096:	f7fa fe1b 	bl	8000cd0 <__aeabi_fsub>
 800609a:	4603      	mov	r3, r0
 800609c:	461c      	mov	r4, r3
 800609e:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80060a2:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80060ac:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	4619      	mov	r1, r3
 80060b4:	4610      	mov	r0, r2
 80060b6:	f7fa ff15 	bl	8000ee4 <__aeabi_fmul>
 80060ba:	4603      	mov	r3, r0
 80060bc:	461a      	mov	r2, r3
 80060be:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80060c2:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80060c6:	69db      	ldr	r3, [r3, #28]
 80060c8:	4619      	mov	r1, r3
 80060ca:	4610      	mov	r0, r2
 80060cc:	f7fa ff0a 	bl	8000ee4 <__aeabi_fmul>
 80060d0:	4603      	mov	r3, r0
 80060d2:	4619      	mov	r1, r3
 80060d4:	4620      	mov	r0, r4
 80060d6:	f7fa fdfb 	bl	8000cd0 <__aeabi_fsub>
 80060da:	4603      	mov	r3, r0
 80060dc:	461c      	mov	r4, r3
 80060de:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80060e2:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	4619      	mov	r1, r3
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7fa fdf2 	bl	8000cd4 <__addsf3>
 80060f0:	4603      	mov	r3, r0
 80060f2:	461a      	mov	r2, r3
 80060f4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80060f8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	4619      	mov	r1, r3
 8006100:	4610      	mov	r0, r2
 8006102:	f7fa feef 	bl	8000ee4 <__aeabi_fmul>
 8006106:	4603      	mov	r3, r0
 8006108:	461a      	mov	r2, r3
 800610a:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800610e:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	4619      	mov	r1, r3
 8006116:	4610      	mov	r0, r2
 8006118:	f7fa fee4 	bl	8000ee4 <__aeabi_fmul>
 800611c:	4603      	mov	r3, r0
 800611e:	4619      	mov	r1, r3
 8006120:	4620      	mov	r0, r4
 8006122:	f7fa fdd7 	bl	8000cd4 <__addsf3>
 8006126:	4603      	mov	r3, r0
 8006128:	461c      	mov	r4, r3
 800612a:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800612e:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006132:	689a      	ldr	r2, [r3, #8]
 8006134:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006138:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	4619      	mov	r1, r3
 8006140:	4610      	mov	r0, r2
 8006142:	f7fa fecf 	bl	8000ee4 <__aeabi_fmul>
 8006146:	4603      	mov	r3, r0
 8006148:	461a      	mov	r2, r3
 800614a:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800614e:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	4619      	mov	r1, r3
 8006156:	4610      	mov	r0, r2
 8006158:	f7fa fec4 	bl	8000ee4 <__aeabi_fmul>
 800615c:	4603      	mov	r3, r0
 800615e:	4619      	mov	r1, r3
 8006160:	4620      	mov	r0, r4
 8006162:	f7fa fdb5 	bl	8000cd0 <__aeabi_fsub>
 8006166:	4603      	mov	r3, r0
 8006168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800616c:	4aac      	ldr	r2, [pc, #688]	@ (8006420 <ETS+0xdc0>)
 800616e:	443a      	add	r2, r7
 8006170:	6811      	ldr	r1, [r2, #0]
 8006172:	4618      	mov	r0, r3
 8006174:	f7fa ff6a 	bl	800104c <__aeabi_fdiv>
 8006178:	4603      	mov	r3, r0
 800617a:	4aaa      	ldr	r2, [pc, #680]	@ (8006424 <ETS+0xdc4>)
 800617c:	443a      	add	r2, r7
 800617e:	6013      	str	r3, [r2, #0]
    by = -(X2_2 * X[6] + 2*X[0]*X[3]*X[7] - 4*X[0]*X[4]*X[6] - X[1]*X[2]*X[7] + 2*X[1]*X[4]*X[5] - X[2]*X[3]*X[5]) / psi7;
 8006180:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006184:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	4aa7      	ldr	r2, [pc, #668]	@ (8006428 <ETS+0xdc8>)
 800618c:	443a      	add	r2, r7
 800618e:	6811      	ldr	r1, [r2, #0]
 8006190:	4618      	mov	r0, r3
 8006192:	f7fa fea7 	bl	8000ee4 <__aeabi_fmul>
 8006196:	4603      	mov	r3, r0
 8006198:	461c      	mov	r4, r3
 800619a:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800619e:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4619      	mov	r1, r3
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7fa fd94 	bl	8000cd4 <__addsf3>
 80061ac:	4603      	mov	r3, r0
 80061ae:	461a      	mov	r2, r3
 80061b0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80061b4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	4619      	mov	r1, r3
 80061bc:	4610      	mov	r0, r2
 80061be:	f7fa fe91 	bl	8000ee4 <__aeabi_fmul>
 80061c2:	4603      	mov	r3, r0
 80061c4:	461a      	mov	r2, r3
 80061c6:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80061ca:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80061ce:	69db      	ldr	r3, [r3, #28]
 80061d0:	4619      	mov	r1, r3
 80061d2:	4610      	mov	r0, r2
 80061d4:	f7fa fe86 	bl	8000ee4 <__aeabi_fmul>
 80061d8:	4603      	mov	r3, r0
 80061da:	4619      	mov	r1, r3
 80061dc:	4620      	mov	r0, r4
 80061de:	f7fa fd79 	bl	8000cd4 <__addsf3>
 80061e2:	4603      	mov	r3, r0
 80061e4:	461c      	mov	r4, r3
 80061e6:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80061ea:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7fa fe75 	bl	8000ee4 <__aeabi_fmul>
 80061fa:	4603      	mov	r3, r0
 80061fc:	461a      	mov	r2, r3
 80061fe:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006202:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	4619      	mov	r1, r3
 800620a:	4610      	mov	r0, r2
 800620c:	f7fa fe6a 	bl	8000ee4 <__aeabi_fmul>
 8006210:	4603      	mov	r3, r0
 8006212:	461a      	mov	r2, r3
 8006214:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006218:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	4619      	mov	r1, r3
 8006220:	4610      	mov	r0, r2
 8006222:	f7fa fe5f 	bl	8000ee4 <__aeabi_fmul>
 8006226:	4603      	mov	r3, r0
 8006228:	4619      	mov	r1, r3
 800622a:	4620      	mov	r0, r4
 800622c:	f7fa fd50 	bl	8000cd0 <__aeabi_fsub>
 8006230:	4603      	mov	r3, r0
 8006232:	461c      	mov	r4, r3
 8006234:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006238:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006242:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	4619      	mov	r1, r3
 800624a:	4610      	mov	r0, r2
 800624c:	f7fa fe4a 	bl	8000ee4 <__aeabi_fmul>
 8006250:	4603      	mov	r3, r0
 8006252:	461a      	mov	r2, r3
 8006254:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006258:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	4619      	mov	r1, r3
 8006260:	4610      	mov	r0, r2
 8006262:	f7fa fe3f 	bl	8000ee4 <__aeabi_fmul>
 8006266:	4603      	mov	r3, r0
 8006268:	4619      	mov	r1, r3
 800626a:	4620      	mov	r0, r4
 800626c:	f7fa fd30 	bl	8000cd0 <__aeabi_fsub>
 8006270:	4603      	mov	r3, r0
 8006272:	461c      	mov	r4, r3
 8006274:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006278:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	4619      	mov	r1, r3
 8006280:	4618      	mov	r0, r3
 8006282:	f7fa fd27 	bl	8000cd4 <__addsf3>
 8006286:	4603      	mov	r3, r0
 8006288:	461a      	mov	r2, r3
 800628a:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800628e:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	4619      	mov	r1, r3
 8006296:	4610      	mov	r0, r2
 8006298:	f7fa fe24 	bl	8000ee4 <__aeabi_fmul>
 800629c:	4603      	mov	r3, r0
 800629e:	461a      	mov	r2, r3
 80062a0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80062a4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	4619      	mov	r1, r3
 80062ac:	4610      	mov	r0, r2
 80062ae:	f7fa fe19 	bl	8000ee4 <__aeabi_fmul>
 80062b2:	4603      	mov	r3, r0
 80062b4:	4619      	mov	r1, r3
 80062b6:	4620      	mov	r0, r4
 80062b8:	f7fa fd0c 	bl	8000cd4 <__addsf3>
 80062bc:	4603      	mov	r3, r0
 80062be:	461c      	mov	r4, r3
 80062c0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80062c4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80062c8:	689a      	ldr	r2, [r3, #8]
 80062ca:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80062ce:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	4619      	mov	r1, r3
 80062d6:	4610      	mov	r0, r2
 80062d8:	f7fa fe04 	bl	8000ee4 <__aeabi_fmul>
 80062dc:	4603      	mov	r3, r0
 80062de:	461a      	mov	r2, r3
 80062e0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80062e4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	4619      	mov	r1, r3
 80062ec:	4610      	mov	r0, r2
 80062ee:	f7fa fdf9 	bl	8000ee4 <__aeabi_fmul>
 80062f2:	4603      	mov	r3, r0
 80062f4:	4619      	mov	r1, r3
 80062f6:	4620      	mov	r0, r4
 80062f8:	f7fa fcea 	bl	8000cd0 <__aeabi_fsub>
 80062fc:	4603      	mov	r3, r0
 80062fe:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8006302:	4a47      	ldr	r2, [pc, #284]	@ (8006420 <ETS+0xdc0>)
 8006304:	443a      	add	r2, r7
 8006306:	6811      	ldr	r1, [r2, #0]
 8006308:	4618      	mov	r0, r3
 800630a:	f7fa fe9f 	bl	800104c <__aeabi_fdiv>
 800630e:	4603      	mov	r3, r0
 8006310:	4a46      	ldr	r2, [pc, #280]	@ (800642c <ETS+0xdcc>)
 8006312:	443a      	add	r2, r7
 8006314:	6013      	str	r3, [r2, #0]
    bz = -(X1_2*X[7] - 4*X[0]*X[7] + 2*X[2]*X[5] + 2*X[0]*X[3]*X[6] - X[1]*X[2]*X[6] - X[1]*X[3]*X[5]) / psi7;
 8006316:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800631a:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800631e:	69db      	ldr	r3, [r3, #28]
 8006320:	4a43      	ldr	r2, [pc, #268]	@ (8006430 <ETS+0xdd0>)
 8006322:	443a      	add	r2, r7
 8006324:	6811      	ldr	r1, [r2, #0]
 8006326:	4618      	mov	r0, r3
 8006328:	f7fa fddc 	bl	8000ee4 <__aeabi_fmul>
 800632c:	4603      	mov	r3, r0
 800632e:	461c      	mov	r4, r3
 8006330:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006334:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800633e:	4618      	mov	r0, r3
 8006340:	f7fa fdd0 	bl	8000ee4 <__aeabi_fmul>
 8006344:	4603      	mov	r3, r0
 8006346:	461a      	mov	r2, r3
 8006348:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800634c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	4619      	mov	r1, r3
 8006354:	4610      	mov	r0, r2
 8006356:	f7fa fdc5 	bl	8000ee4 <__aeabi_fmul>
 800635a:	4603      	mov	r3, r0
 800635c:	4619      	mov	r1, r3
 800635e:	4620      	mov	r0, r4
 8006360:	f7fa fcb6 	bl	8000cd0 <__aeabi_fsub>
 8006364:	4603      	mov	r3, r0
 8006366:	461c      	mov	r4, r3
 8006368:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800636c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	4619      	mov	r1, r3
 8006374:	4618      	mov	r0, r3
 8006376:	f7fa fcad 	bl	8000cd4 <__addsf3>
 800637a:	4603      	mov	r3, r0
 800637c:	461a      	mov	r2, r3
 800637e:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006382:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	4619      	mov	r1, r3
 800638a:	4610      	mov	r0, r2
 800638c:	f7fa fdaa 	bl	8000ee4 <__aeabi_fmul>
 8006390:	4603      	mov	r3, r0
 8006392:	4619      	mov	r1, r3
 8006394:	4620      	mov	r0, r4
 8006396:	f7fa fc9d 	bl	8000cd4 <__addsf3>
 800639a:	4603      	mov	r3, r0
 800639c:	461c      	mov	r4, r3
 800639e:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80063a2:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4619      	mov	r1, r3
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7fa fc92 	bl	8000cd4 <__addsf3>
 80063b0:	4603      	mov	r3, r0
 80063b2:	461a      	mov	r2, r3
 80063b4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80063b8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	4619      	mov	r1, r3
 80063c0:	4610      	mov	r0, r2
 80063c2:	f7fa fd8f 	bl	8000ee4 <__aeabi_fmul>
 80063c6:	4603      	mov	r3, r0
 80063c8:	461a      	mov	r2, r3
 80063ca:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80063ce:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	4619      	mov	r1, r3
 80063d6:	4610      	mov	r0, r2
 80063d8:	f7fa fd84 	bl	8000ee4 <__aeabi_fmul>
 80063dc:	4603      	mov	r3, r0
 80063de:	4619      	mov	r1, r3
 80063e0:	4620      	mov	r0, r4
 80063e2:	f7fa fc77 	bl	8000cd4 <__addsf3>
 80063e6:	4603      	mov	r3, r0
 80063e8:	461c      	mov	r4, r3
 80063ea:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80063ee:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80063f2:	685a      	ldr	r2, [r3, #4]
 80063f4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80063f8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	4619      	mov	r1, r3
 8006400:	4610      	mov	r0, r2
 8006402:	f7fa fd6f 	bl	8000ee4 <__aeabi_fmul>
 8006406:	4603      	mov	r3, r0
 8006408:	461a      	mov	r2, r3
 800640a:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800640e:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	4619      	mov	r1, r3
 8006416:	4610      	mov	r0, r2
 8006418:	f7fa fd64 	bl	8000ee4 <__aeabi_fmul>
 800641c:	4603      	mov	r3, r0
 800641e:	e009      	b.n	8006434 <ETS+0xdd4>
 8006420:	00014d40 	.word	0x00014d40
 8006424:	00014d1c 	.word	0x00014d1c
 8006428:	00014cf4 	.word	0x00014cf4
 800642c:	00014d18 	.word	0x00014d18
 8006430:	00014cf8 	.word	0x00014cf8
 8006434:	4619      	mov	r1, r3
 8006436:	4620      	mov	r0, r4
 8006438:	f7fa fc4a 	bl	8000cd0 <__aeabi_fsub>
 800643c:	4603      	mov	r3, r0
 800643e:	461c      	mov	r4, r3
 8006440:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006444:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006448:	685a      	ldr	r2, [r3, #4]
 800644a:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800644e:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	4619      	mov	r1, r3
 8006456:	4610      	mov	r0, r2
 8006458:	f7fa fd44 	bl	8000ee4 <__aeabi_fmul>
 800645c:	4603      	mov	r3, r0
 800645e:	461a      	mov	r2, r3
 8006460:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006464:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	4619      	mov	r1, r3
 800646c:	4610      	mov	r0, r2
 800646e:	f7fa fd39 	bl	8000ee4 <__aeabi_fmul>
 8006472:	4603      	mov	r3, r0
 8006474:	4619      	mov	r1, r3
 8006476:	4620      	mov	r0, r4
 8006478:	f7fa fc2a 	bl	8000cd0 <__aeabi_fsub>
 800647c:	4603      	mov	r3, r0
 800647e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8006482:	4aaa      	ldr	r2, [pc, #680]	@ (800672c <ETS+0x10cc>)
 8006484:	443a      	add	r2, r7
 8006486:	6811      	ldr	r1, [r2, #0]
 8006488:	4618      	mov	r0, r3
 800648a:	f7fa fddf 	bl	800104c <__aeabi_fdiv>
 800648e:	4603      	mov	r3, r0
 8006490:	4aa7      	ldr	r2, [pc, #668]	@ (8006730 <ETS+0x10d0>)
 8006492:	443a      	add	r2, r7
 8006494:	6013      	str	r3, [r2, #0]

    psi8 = -X1_2*X7_2 + 4*X[4]*X[8]*X1_2 - 4*X[8]*X[1]*X[2]*X[3] + 2*X[1]*X[2]*X[6]*X[7] + 2*X[1]*X[3]*X[5]*X[7] - 4*X[4]*X[1]*X[5]*X[6] - X2_2*X6_2 + 4*X[8]*X2_2 + 2*X[2]*X[3]*X[5]*X[6] - 4*X[2]*X[5]*X[7] - X3_2*X5_2 + 4*X[0]*X[8]*X3_2 + 4*X[4]*X5_2 + 4*X[0]*X[4]*X6_2 + 4*X[0]*X7_2 - 16*X[0]*X[4]*X[8] - 4*X[0]*X[3]*X[6]*X[7];
 8006496:	4ba7      	ldr	r3, [pc, #668]	@ (8006734 <ETS+0x10d4>)
 8006498:	443b      	add	r3, r7
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80064a0:	4aa5      	ldr	r2, [pc, #660]	@ (8006738 <ETS+0x10d8>)
 80064a2:	443a      	add	r2, r7
 80064a4:	6811      	ldr	r1, [r2, #0]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7fa fd1c 	bl	8000ee4 <__aeabi_fmul>
 80064ac:	4603      	mov	r3, r0
 80064ae:	461c      	mov	r4, r3
 80064b0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80064b4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80064be:	4618      	mov	r0, r3
 80064c0:	f7fa fd10 	bl	8000ee4 <__aeabi_fmul>
 80064c4:	4603      	mov	r3, r0
 80064c6:	461a      	mov	r2, r3
 80064c8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80064cc:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	4619      	mov	r1, r3
 80064d4:	4610      	mov	r0, r2
 80064d6:	f7fa fd05 	bl	8000ee4 <__aeabi_fmul>
 80064da:	4603      	mov	r3, r0
 80064dc:	4a95      	ldr	r2, [pc, #596]	@ (8006734 <ETS+0x10d4>)
 80064de:	443a      	add	r2, r7
 80064e0:	6811      	ldr	r1, [r2, #0]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7fa fcfe 	bl	8000ee4 <__aeabi_fmul>
 80064e8:	4603      	mov	r3, r0
 80064ea:	4619      	mov	r1, r3
 80064ec:	4620      	mov	r0, r4
 80064ee:	f7fa fbf1 	bl	8000cd4 <__addsf3>
 80064f2:	4603      	mov	r3, r0
 80064f4:	461c      	mov	r4, r3
 80064f6:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80064fa:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80064fe:	6a1b      	ldr	r3, [r3, #32]
 8006500:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8006504:	4618      	mov	r0, r3
 8006506:	f7fa fced 	bl	8000ee4 <__aeabi_fmul>
 800650a:	4603      	mov	r3, r0
 800650c:	461a      	mov	r2, r3
 800650e:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006512:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	4619      	mov	r1, r3
 800651a:	4610      	mov	r0, r2
 800651c:	f7fa fce2 	bl	8000ee4 <__aeabi_fmul>
 8006520:	4603      	mov	r3, r0
 8006522:	461a      	mov	r2, r3
 8006524:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006528:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	4619      	mov	r1, r3
 8006530:	4610      	mov	r0, r2
 8006532:	f7fa fcd7 	bl	8000ee4 <__aeabi_fmul>
 8006536:	4603      	mov	r3, r0
 8006538:	461a      	mov	r2, r3
 800653a:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800653e:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	4619      	mov	r1, r3
 8006546:	4610      	mov	r0, r2
 8006548:	f7fa fccc 	bl	8000ee4 <__aeabi_fmul>
 800654c:	4603      	mov	r3, r0
 800654e:	4619      	mov	r1, r3
 8006550:	4620      	mov	r0, r4
 8006552:	f7fa fbbd 	bl	8000cd0 <__aeabi_fsub>
 8006556:	4603      	mov	r3, r0
 8006558:	461c      	mov	r4, r3
 800655a:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800655e:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	4619      	mov	r1, r3
 8006566:	4618      	mov	r0, r3
 8006568:	f7fa fbb4 	bl	8000cd4 <__addsf3>
 800656c:	4603      	mov	r3, r0
 800656e:	461a      	mov	r2, r3
 8006570:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006574:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	4619      	mov	r1, r3
 800657c:	4610      	mov	r0, r2
 800657e:	f7fa fcb1 	bl	8000ee4 <__aeabi_fmul>
 8006582:	4603      	mov	r3, r0
 8006584:	461a      	mov	r2, r3
 8006586:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800658a:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	4619      	mov	r1, r3
 8006592:	4610      	mov	r0, r2
 8006594:	f7fa fca6 	bl	8000ee4 <__aeabi_fmul>
 8006598:	4603      	mov	r3, r0
 800659a:	461a      	mov	r2, r3
 800659c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80065a0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	4619      	mov	r1, r3
 80065a8:	4610      	mov	r0, r2
 80065aa:	f7fa fc9b 	bl	8000ee4 <__aeabi_fmul>
 80065ae:	4603      	mov	r3, r0
 80065b0:	4619      	mov	r1, r3
 80065b2:	4620      	mov	r0, r4
 80065b4:	f7fa fb8e 	bl	8000cd4 <__addsf3>
 80065b8:	4603      	mov	r3, r0
 80065ba:	461c      	mov	r4, r3
 80065bc:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80065c0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	4619      	mov	r1, r3
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7fa fb83 	bl	8000cd4 <__addsf3>
 80065ce:	4603      	mov	r3, r0
 80065d0:	461a      	mov	r2, r3
 80065d2:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80065d6:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	4619      	mov	r1, r3
 80065de:	4610      	mov	r0, r2
 80065e0:	f7fa fc80 	bl	8000ee4 <__aeabi_fmul>
 80065e4:	4603      	mov	r3, r0
 80065e6:	461a      	mov	r2, r3
 80065e8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80065ec:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	4619      	mov	r1, r3
 80065f4:	4610      	mov	r0, r2
 80065f6:	f7fa fc75 	bl	8000ee4 <__aeabi_fmul>
 80065fa:	4603      	mov	r3, r0
 80065fc:	461a      	mov	r2, r3
 80065fe:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006602:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006606:	69db      	ldr	r3, [r3, #28]
 8006608:	4619      	mov	r1, r3
 800660a:	4610      	mov	r0, r2
 800660c:	f7fa fc6a 	bl	8000ee4 <__aeabi_fmul>
 8006610:	4603      	mov	r3, r0
 8006612:	4619      	mov	r1, r3
 8006614:	4620      	mov	r0, r4
 8006616:	f7fa fb5d 	bl	8000cd4 <__addsf3>
 800661a:	4603      	mov	r3, r0
 800661c:	461c      	mov	r4, r3
 800661e:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006622:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800662c:	4618      	mov	r0, r3
 800662e:	f7fa fc59 	bl	8000ee4 <__aeabi_fmul>
 8006632:	4603      	mov	r3, r0
 8006634:	461a      	mov	r2, r3
 8006636:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800663a:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	4619      	mov	r1, r3
 8006642:	4610      	mov	r0, r2
 8006644:	f7fa fc4e 	bl	8000ee4 <__aeabi_fmul>
 8006648:	4603      	mov	r3, r0
 800664a:	461a      	mov	r2, r3
 800664c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006650:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	4619      	mov	r1, r3
 8006658:	4610      	mov	r0, r2
 800665a:	f7fa fc43 	bl	8000ee4 <__aeabi_fmul>
 800665e:	4603      	mov	r3, r0
 8006660:	461a      	mov	r2, r3
 8006662:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006666:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	4619      	mov	r1, r3
 800666e:	4610      	mov	r0, r2
 8006670:	f7fa fc38 	bl	8000ee4 <__aeabi_fmul>
 8006674:	4603      	mov	r3, r0
 8006676:	4619      	mov	r1, r3
 8006678:	4620      	mov	r0, r4
 800667a:	f7fa fb29 	bl	8000cd0 <__aeabi_fsub>
 800667e:	4603      	mov	r3, r0
 8006680:	461c      	mov	r4, r3
 8006682:	4b2e      	ldr	r3, [pc, #184]	@ (800673c <ETS+0x10dc>)
 8006684:	443b      	add	r3, r7
 8006686:	6819      	ldr	r1, [r3, #0]
 8006688:	4b2d      	ldr	r3, [pc, #180]	@ (8006740 <ETS+0x10e0>)
 800668a:	443b      	add	r3, r7
 800668c:	6818      	ldr	r0, [r3, #0]
 800668e:	f7fa fc29 	bl	8000ee4 <__aeabi_fmul>
 8006692:	4603      	mov	r3, r0
 8006694:	4619      	mov	r1, r3
 8006696:	4620      	mov	r0, r4
 8006698:	f7fa fb1a 	bl	8000cd0 <__aeabi_fsub>
 800669c:	4603      	mov	r3, r0
 800669e:	461c      	mov	r4, r3
 80066a0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80066a4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7fa fc18 	bl	8000ee4 <__aeabi_fmul>
 80066b4:	4603      	mov	r3, r0
 80066b6:	4a22      	ldr	r2, [pc, #136]	@ (8006740 <ETS+0x10e0>)
 80066b8:	443a      	add	r2, r7
 80066ba:	6811      	ldr	r1, [r2, #0]
 80066bc:	4618      	mov	r0, r3
 80066be:	f7fa fc11 	bl	8000ee4 <__aeabi_fmul>
 80066c2:	4603      	mov	r3, r0
 80066c4:	4619      	mov	r1, r3
 80066c6:	4620      	mov	r0, r4
 80066c8:	f7fa fb04 	bl	8000cd4 <__addsf3>
 80066cc:	4603      	mov	r3, r0
 80066ce:	461c      	mov	r4, r3
 80066d0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80066d4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	4619      	mov	r1, r3
 80066dc:	4618      	mov	r0, r3
 80066de:	f7fa faf9 	bl	8000cd4 <__addsf3>
 80066e2:	4603      	mov	r3, r0
 80066e4:	461a      	mov	r2, r3
 80066e6:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80066ea:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	4619      	mov	r1, r3
 80066f2:	4610      	mov	r0, r2
 80066f4:	f7fa fbf6 	bl	8000ee4 <__aeabi_fmul>
 80066f8:	4603      	mov	r3, r0
 80066fa:	461a      	mov	r2, r3
 80066fc:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006700:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	4619      	mov	r1, r3
 8006708:	4610      	mov	r0, r2
 800670a:	f7fa fbeb 	bl	8000ee4 <__aeabi_fmul>
 800670e:	4603      	mov	r3, r0
 8006710:	461a      	mov	r2, r3
 8006712:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006716:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800671a:	699b      	ldr	r3, [r3, #24]
 800671c:	4619      	mov	r1, r3
 800671e:	4610      	mov	r0, r2
 8006720:	f7fa fbe0 	bl	8000ee4 <__aeabi_fmul>
 8006724:	4603      	mov	r3, r0
 8006726:	4619      	mov	r1, r3
 8006728:	4620      	mov	r0, r4
 800672a:	e00b      	b.n	8006744 <ETS+0x10e4>
 800672c:	00014d40 	.word	0x00014d40
 8006730:	00014d14 	.word	0x00014d14
 8006734:	00014cf8 	.word	0x00014cf8
 8006738:	00014ce0 	.word	0x00014ce0
 800673c:	00014ce4 	.word	0x00014ce4
 8006740:	00014cf4 	.word	0x00014cf4
 8006744:	f7fa fac6 	bl	8000cd4 <__addsf3>
 8006748:	4603      	mov	r3, r0
 800674a:	461c      	mov	r4, r3
 800674c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006750:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800675a:	4618      	mov	r0, r3
 800675c:	f7fa fbc2 	bl	8000ee4 <__aeabi_fmul>
 8006760:	4603      	mov	r3, r0
 8006762:	461a      	mov	r2, r3
 8006764:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006768:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	4619      	mov	r1, r3
 8006770:	4610      	mov	r0, r2
 8006772:	f7fa fbb7 	bl	8000ee4 <__aeabi_fmul>
 8006776:	4603      	mov	r3, r0
 8006778:	461a      	mov	r2, r3
 800677a:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800677e:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006782:	69db      	ldr	r3, [r3, #28]
 8006784:	4619      	mov	r1, r3
 8006786:	4610      	mov	r0, r2
 8006788:	f7fa fbac 	bl	8000ee4 <__aeabi_fmul>
 800678c:	4603      	mov	r3, r0
 800678e:	4619      	mov	r1, r3
 8006790:	4620      	mov	r0, r4
 8006792:	f7fa fa9d 	bl	8000cd0 <__aeabi_fsub>
 8006796:	4603      	mov	r3, r0
 8006798:	461c      	mov	r4, r3
 800679a:	4bac      	ldr	r3, [pc, #688]	@ (8006a4c <ETS+0x13ec>)
 800679c:	443b      	add	r3, r7
 800679e:	6819      	ldr	r1, [r3, #0]
 80067a0:	4bab      	ldr	r3, [pc, #684]	@ (8006a50 <ETS+0x13f0>)
 80067a2:	443b      	add	r3, r7
 80067a4:	6818      	ldr	r0, [r3, #0]
 80067a6:	f7fa fb9d 	bl	8000ee4 <__aeabi_fmul>
 80067aa:	4603      	mov	r3, r0
 80067ac:	4619      	mov	r1, r3
 80067ae:	4620      	mov	r0, r4
 80067b0:	f7fa fa8e 	bl	8000cd0 <__aeabi_fsub>
 80067b4:	4603      	mov	r3, r0
 80067b6:	461c      	mov	r4, r3
 80067b8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80067bc:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7fa fb8c 	bl	8000ee4 <__aeabi_fmul>
 80067cc:	4603      	mov	r3, r0
 80067ce:	461a      	mov	r2, r3
 80067d0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80067d4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80067d8:	6a1b      	ldr	r3, [r3, #32]
 80067da:	4619      	mov	r1, r3
 80067dc:	4610      	mov	r0, r2
 80067de:	f7fa fb81 	bl	8000ee4 <__aeabi_fmul>
 80067e2:	4603      	mov	r3, r0
 80067e4:	4a9a      	ldr	r2, [pc, #616]	@ (8006a50 <ETS+0x13f0>)
 80067e6:	443a      	add	r2, r7
 80067e8:	6811      	ldr	r1, [r2, #0]
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7fa fb7a 	bl	8000ee4 <__aeabi_fmul>
 80067f0:	4603      	mov	r3, r0
 80067f2:	4619      	mov	r1, r3
 80067f4:	4620      	mov	r0, r4
 80067f6:	f7fa fa6d 	bl	8000cd4 <__addsf3>
 80067fa:	4603      	mov	r3, r0
 80067fc:	461c      	mov	r4, r3
 80067fe:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006802:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800680c:	4618      	mov	r0, r3
 800680e:	f7fa fb69 	bl	8000ee4 <__aeabi_fmul>
 8006812:	4603      	mov	r3, r0
 8006814:	4a8d      	ldr	r2, [pc, #564]	@ (8006a4c <ETS+0x13ec>)
 8006816:	443a      	add	r2, r7
 8006818:	6811      	ldr	r1, [r2, #0]
 800681a:	4618      	mov	r0, r3
 800681c:	f7fa fb62 	bl	8000ee4 <__aeabi_fmul>
 8006820:	4603      	mov	r3, r0
 8006822:	4619      	mov	r1, r3
 8006824:	4620      	mov	r0, r4
 8006826:	f7fa fa55 	bl	8000cd4 <__addsf3>
 800682a:	4603      	mov	r3, r0
 800682c:	461c      	mov	r4, r3
 800682e:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006832:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800683c:	4618      	mov	r0, r3
 800683e:	f7fa fb51 	bl	8000ee4 <__aeabi_fmul>
 8006842:	4603      	mov	r3, r0
 8006844:	461a      	mov	r2, r3
 8006846:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800684a:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	4619      	mov	r1, r3
 8006852:	4610      	mov	r0, r2
 8006854:	f7fa fb46 	bl	8000ee4 <__aeabi_fmul>
 8006858:	4603      	mov	r3, r0
 800685a:	4a7e      	ldr	r2, [pc, #504]	@ (8006a54 <ETS+0x13f4>)
 800685c:	443a      	add	r2, r7
 800685e:	6811      	ldr	r1, [r2, #0]
 8006860:	4618      	mov	r0, r3
 8006862:	f7fa fb3f 	bl	8000ee4 <__aeabi_fmul>
 8006866:	4603      	mov	r3, r0
 8006868:	4619      	mov	r1, r3
 800686a:	4620      	mov	r0, r4
 800686c:	f7fa fa32 	bl	8000cd4 <__addsf3>
 8006870:	4603      	mov	r3, r0
 8006872:	461c      	mov	r4, r3
 8006874:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006878:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8006882:	4618      	mov	r0, r3
 8006884:	f7fa fb2e 	bl	8000ee4 <__aeabi_fmul>
 8006888:	4603      	mov	r3, r0
 800688a:	4a73      	ldr	r2, [pc, #460]	@ (8006a58 <ETS+0x13f8>)
 800688c:	443a      	add	r2, r7
 800688e:	6811      	ldr	r1, [r2, #0]
 8006890:	4618      	mov	r0, r3
 8006892:	f7fa fb27 	bl	8000ee4 <__aeabi_fmul>
 8006896:	4603      	mov	r3, r0
 8006898:	4619      	mov	r1, r3
 800689a:	4620      	mov	r0, r4
 800689c:	f7fa fa1a 	bl	8000cd4 <__addsf3>
 80068a0:	4603      	mov	r3, r0
 80068a2:	461c      	mov	r4, r3
 80068a4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80068a8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7fa fb16 	bl	8000ee4 <__aeabi_fmul>
 80068b8:	4603      	mov	r3, r0
 80068ba:	461a      	mov	r2, r3
 80068bc:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80068c0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	4619      	mov	r1, r3
 80068c8:	4610      	mov	r0, r2
 80068ca:	f7fa fb0b 	bl	8000ee4 <__aeabi_fmul>
 80068ce:	4603      	mov	r3, r0
 80068d0:	461a      	mov	r2, r3
 80068d2:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80068d6:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80068da:	6a1b      	ldr	r3, [r3, #32]
 80068dc:	4619      	mov	r1, r3
 80068de:	4610      	mov	r0, r2
 80068e0:	f7fa fb00 	bl	8000ee4 <__aeabi_fmul>
 80068e4:	4603      	mov	r3, r0
 80068e6:	4619      	mov	r1, r3
 80068e8:	4620      	mov	r0, r4
 80068ea:	f7fa f9f1 	bl	8000cd0 <__aeabi_fsub>
 80068ee:	4603      	mov	r3, r0
 80068f0:	461c      	mov	r4, r3
 80068f2:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80068f6:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8006900:	4618      	mov	r0, r3
 8006902:	f7fa faef 	bl	8000ee4 <__aeabi_fmul>
 8006906:	4603      	mov	r3, r0
 8006908:	461a      	mov	r2, r3
 800690a:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800690e:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	4619      	mov	r1, r3
 8006916:	4610      	mov	r0, r2
 8006918:	f7fa fae4 	bl	8000ee4 <__aeabi_fmul>
 800691c:	4603      	mov	r3, r0
 800691e:	461a      	mov	r2, r3
 8006920:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006924:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	4619      	mov	r1, r3
 800692c:	4610      	mov	r0, r2
 800692e:	f7fa fad9 	bl	8000ee4 <__aeabi_fmul>
 8006932:	4603      	mov	r3, r0
 8006934:	461a      	mov	r2, r3
 8006936:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800693a:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800693e:	69db      	ldr	r3, [r3, #28]
 8006940:	4619      	mov	r1, r3
 8006942:	4610      	mov	r0, r2
 8006944:	f7fa face 	bl	8000ee4 <__aeabi_fmul>
 8006948:	4603      	mov	r3, r0
 800694a:	4619      	mov	r1, r3
 800694c:	4620      	mov	r0, r4
 800694e:	f7fa f9bf 	bl	8000cd0 <__aeabi_fsub>
 8006952:	4603      	mov	r3, r0
 8006954:	4a41      	ldr	r2, [pc, #260]	@ (8006a5c <ETS+0x13fc>)
 8006956:	443a      	add	r2, r7
 8006958:	6013      	str	r3, [r2, #0]

    divs =  2 * fabsf(X[4])*fabsf(X[4])*fabsf(X[4]) * (X[4] * X1_2 - X[1] * X[2] * X[3] + X2_2 + X[0] * X3_2 - 4 * X[0] * X[4]);
 800695a:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800695e:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006968:	4619      	mov	r1, r3
 800696a:	4618      	mov	r0, r3
 800696c:	f7fa f9b2 	bl	8000cd4 <__addsf3>
 8006970:	4603      	mov	r3, r0
 8006972:	461a      	mov	r2, r3
 8006974:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006978:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006982:	4619      	mov	r1, r3
 8006984:	4610      	mov	r0, r2
 8006986:	f7fa faad 	bl	8000ee4 <__aeabi_fmul>
 800698a:	4603      	mov	r3, r0
 800698c:	461a      	mov	r2, r3
 800698e:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006992:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800699c:	4619      	mov	r1, r3
 800699e:	4610      	mov	r0, r2
 80069a0:	f7fa faa0 	bl	8000ee4 <__aeabi_fmul>
 80069a4:	4603      	mov	r3, r0
 80069a6:	461c      	mov	r4, r3
 80069a8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80069ac:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	4a2b      	ldr	r2, [pc, #172]	@ (8006a60 <ETS+0x1400>)
 80069b4:	443a      	add	r2, r7
 80069b6:	6811      	ldr	r1, [r2, #0]
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7fa fa93 	bl	8000ee4 <__aeabi_fmul>
 80069be:	4603      	mov	r3, r0
 80069c0:	461d      	mov	r5, r3
 80069c2:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80069c6:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80069d0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	4619      	mov	r1, r3
 80069d8:	4610      	mov	r0, r2
 80069da:	f7fa fa83 	bl	8000ee4 <__aeabi_fmul>
 80069de:	4603      	mov	r3, r0
 80069e0:	461a      	mov	r2, r3
 80069e2:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80069e6:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	4619      	mov	r1, r3
 80069ee:	4610      	mov	r0, r2
 80069f0:	f7fa fa78 	bl	8000ee4 <__aeabi_fmul>
 80069f4:	4603      	mov	r3, r0
 80069f6:	4619      	mov	r1, r3
 80069f8:	4628      	mov	r0, r5
 80069fa:	f7fa f969 	bl	8000cd0 <__aeabi_fsub>
 80069fe:	4603      	mov	r3, r0
 8006a00:	4a18      	ldr	r2, [pc, #96]	@ (8006a64 <ETS+0x1404>)
 8006a02:	443a      	add	r2, r7
 8006a04:	6811      	ldr	r1, [r2, #0]
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7fa f964 	bl	8000cd4 <__addsf3>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	461d      	mov	r5, r3
 8006a10:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006a14:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a0d      	ldr	r2, [pc, #52]	@ (8006a50 <ETS+0x13f0>)
 8006a1c:	443a      	add	r2, r7
 8006a1e:	6811      	ldr	r1, [r2, #0]
 8006a20:	4618      	mov	r0, r3
 8006a22:	f7fa fa5f 	bl	8000ee4 <__aeabi_fmul>
 8006a26:	4603      	mov	r3, r0
 8006a28:	4619      	mov	r1, r3
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	f7fa f952 	bl	8000cd4 <__addsf3>
 8006a30:	4603      	mov	r3, r0
 8006a32:	461d      	mov	r5, r3
 8006a34:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006a38:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7fa fa4e 	bl	8000ee4 <__aeabi_fmul>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	e00d      	b.n	8006a68 <ETS+0x1408>
 8006a4c:	00014ce8 	.word	0x00014ce8
 8006a50:	00014cf0 	.word	0x00014cf0
 8006a54:	00014ce4 	.word	0x00014ce4
 8006a58:	00014ce0 	.word	0x00014ce0
 8006a5c:	00014d3c 	.word	0x00014d3c
 8006a60:	00014cf8 	.word	0x00014cf8
 8006a64:	00014cf4 	.word	0x00014cf4
 8006a68:	461a      	mov	r2, r3
 8006a6a:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006a6e:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	4619      	mov	r1, r3
 8006a76:	4610      	mov	r0, r2
 8006a78:	f7fa fa34 	bl	8000ee4 <__aeabi_fmul>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	4619      	mov	r1, r3
 8006a80:	4628      	mov	r0, r5
 8006a82:	f7fa f925 	bl	8000cd0 <__aeabi_fsub>
 8006a86:	4603      	mov	r3, r0
 8006a88:	4619      	mov	r1, r3
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	f7fa fa2a 	bl	8000ee4 <__aeabi_fmul>
 8006a90:	4603      	mov	r3, r0
 8006a92:	4aa6      	ldr	r2, [pc, #664]	@ (8006d2c <ETS+0x16cc>)
 8006a94:	443a      	add	r2, r7
 8006a96:	6013      	str	r3, [r2, #0]

    sx = -X4_2*X[4] * sqrtf(psi8 * (-X3_2 + 4*X[4])) / (divs);
 8006a98:	4ba5      	ldr	r3, [pc, #660]	@ (8006d30 <ETS+0x16d0>)
 8006a9a:	443b      	add	r3, r7
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8006aa2:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006aa6:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	4619      	mov	r1, r3
 8006aae:	4610      	mov	r0, r2
 8006ab0:	f7fa fa18 	bl	8000ee4 <__aeabi_fmul>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	461c      	mov	r4, r3
 8006ab8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006abc:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7fa fa0c 	bl	8000ee4 <__aeabi_fmul>
 8006acc:	4603      	mov	r3, r0
 8006ace:	4a99      	ldr	r2, [pc, #612]	@ (8006d34 <ETS+0x16d4>)
 8006ad0:	443a      	add	r2, r7
 8006ad2:	6811      	ldr	r1, [r2, #0]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7fa f8fb 	bl	8000cd0 <__aeabi_fsub>
 8006ada:	4603      	mov	r3, r0
 8006adc:	4a96      	ldr	r2, [pc, #600]	@ (8006d38 <ETS+0x16d8>)
 8006ade:	443a      	add	r2, r7
 8006ae0:	6811      	ldr	r1, [r2, #0]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7fa f9fe 	bl	8000ee4 <__aeabi_fmul>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	4618      	mov	r0, r3
 8006aec:	f00c fde0 	bl	80136b0 <sqrtf>
 8006af0:	4603      	mov	r3, r0
 8006af2:	4619      	mov	r1, r3
 8006af4:	4620      	mov	r0, r4
 8006af6:	f7fa f9f5 	bl	8000ee4 <__aeabi_fmul>
 8006afa:	4603      	mov	r3, r0
 8006afc:	4a8b      	ldr	r2, [pc, #556]	@ (8006d2c <ETS+0x16cc>)
 8006afe:	443a      	add	r2, r7
 8006b00:	6811      	ldr	r1, [r2, #0]
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7fa faa2 	bl	800104c <__aeabi_fdiv>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	4a8c      	ldr	r2, [pc, #560]	@ (8006d3c <ETS+0x16dc>)
 8006b0c:	443a      	add	r2, r7
 8006b0e:	6013      	str	r3, [r2, #0]
    sy = -X4_2*X[4] * sqrtf(psi8 * (-X2_2 + 4*X[0]*X[4])) / (divs);
 8006b10:	4b87      	ldr	r3, [pc, #540]	@ (8006d30 <ETS+0x16d0>)
 8006b12:	443b      	add	r3, r7
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8006b1a:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006b1e:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	4619      	mov	r1, r3
 8006b26:	4610      	mov	r0, r2
 8006b28:	f7fa f9dc 	bl	8000ee4 <__aeabi_fmul>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	461c      	mov	r4, r3
 8006b30:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006b34:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7fa f9d0 	bl	8000ee4 <__aeabi_fmul>
 8006b44:	4603      	mov	r3, r0
 8006b46:	461a      	mov	r2, r3
 8006b48:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006b4c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	4619      	mov	r1, r3
 8006b54:	4610      	mov	r0, r2
 8006b56:	f7fa f9c5 	bl	8000ee4 <__aeabi_fmul>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	4a78      	ldr	r2, [pc, #480]	@ (8006d40 <ETS+0x16e0>)
 8006b5e:	443a      	add	r2, r7
 8006b60:	6811      	ldr	r1, [r2, #0]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7fa f8b4 	bl	8000cd0 <__aeabi_fsub>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	4a73      	ldr	r2, [pc, #460]	@ (8006d38 <ETS+0x16d8>)
 8006b6c:	443a      	add	r2, r7
 8006b6e:	6811      	ldr	r1, [r2, #0]
 8006b70:	4618      	mov	r0, r3
 8006b72:	f7fa f9b7 	bl	8000ee4 <__aeabi_fmul>
 8006b76:	4603      	mov	r3, r0
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f00c fd99 	bl	80136b0 <sqrtf>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	4619      	mov	r1, r3
 8006b82:	4620      	mov	r0, r4
 8006b84:	f7fa f9ae 	bl	8000ee4 <__aeabi_fmul>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	4a68      	ldr	r2, [pc, #416]	@ (8006d2c <ETS+0x16cc>)
 8006b8c:	443a      	add	r2, r7
 8006b8e:	6811      	ldr	r1, [r2, #0]
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7fa fa5b 	bl	800104c <__aeabi_fdiv>
 8006b96:	4603      	mov	r3, r0
 8006b98:	4a6a      	ldr	r2, [pc, #424]	@ (8006d44 <ETS+0x16e4>)
 8006b9a:	443a      	add	r2, r7
 8006b9c:	6013      	str	r3, [r2, #0]
    sz = -X4_2*X[4] * sqrtf(psi8 * (-X1_2 + 4*X[0])) / (divs);
 8006b9e:	4b64      	ldr	r3, [pc, #400]	@ (8006d30 <ETS+0x16d0>)
 8006ba0:	443b      	add	r3, r7
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8006ba8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006bac:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	4610      	mov	r0, r2
 8006bb6:	f7fa f995 	bl	8000ee4 <__aeabi_fmul>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	461c      	mov	r4, r3
 8006bbe:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006bc2:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7fa f989 	bl	8000ee4 <__aeabi_fmul>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	4a5c      	ldr	r2, [pc, #368]	@ (8006d48 <ETS+0x16e8>)
 8006bd6:	443a      	add	r2, r7
 8006bd8:	6811      	ldr	r1, [r2, #0]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7fa f878 	bl	8000cd0 <__aeabi_fsub>
 8006be0:	4603      	mov	r3, r0
 8006be2:	4a55      	ldr	r2, [pc, #340]	@ (8006d38 <ETS+0x16d8>)
 8006be4:	443a      	add	r2, r7
 8006be6:	6811      	ldr	r1, [r2, #0]
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7fa f97b 	bl	8000ee4 <__aeabi_fmul>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f00c fd5d 	bl	80136b0 <sqrtf>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	f7fa f972 	bl	8000ee4 <__aeabi_fmul>
 8006c00:	4603      	mov	r3, r0
 8006c02:	4a4a      	ldr	r2, [pc, #296]	@ (8006d2c <ETS+0x16cc>)
 8006c04:	443a      	add	r2, r7
 8006c06:	6811      	ldr	r1, [r2, #0]
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7fa fa1f 	bl	800104c <__aeabi_fdiv>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	4a4e      	ldr	r2, [pc, #312]	@ (8006d4c <ETS+0x16ec>)
 8006c12:	443a      	add	r2, r7
 8006c14:	6013      	str	r3, [r2, #0]

    rho = (2 * X[1]*X[4] - X[2]*X[3]) / (2*X4_2 * sqrtf(-(X[4]*X1_2 - X[1]*X[2]*X[3] + X2_2 + X[0]*X3_2 - 4*X[0]*X[4]) / (X4_2*X[4])));
 8006c16:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006c1a:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	4619      	mov	r1, r3
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7fa f856 	bl	8000cd4 <__addsf3>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006c30:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	4619      	mov	r1, r3
 8006c38:	4610      	mov	r0, r2
 8006c3a:	f7fa f953 	bl	8000ee4 <__aeabi_fmul>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	461c      	mov	r4, r3
 8006c42:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006c46:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006c4a:	689a      	ldr	r2, [r3, #8]
 8006c4c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006c50:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	4619      	mov	r1, r3
 8006c58:	4610      	mov	r0, r2
 8006c5a:	f7fa f943 	bl	8000ee4 <__aeabi_fmul>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	4619      	mov	r1, r3
 8006c62:	4620      	mov	r0, r4
 8006c64:	f7fa f834 	bl	8000cd0 <__aeabi_fsub>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	461d      	mov	r5, r3
 8006c6c:	4b30      	ldr	r3, [pc, #192]	@ (8006d30 <ETS+0x16d0>)
 8006c6e:	443b      	add	r3, r7
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4619      	mov	r1, r3
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7fa f82d 	bl	8000cd4 <__addsf3>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	461e      	mov	r6, r3
 8006c7e:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006c82:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	4a2f      	ldr	r2, [pc, #188]	@ (8006d48 <ETS+0x16e8>)
 8006c8a:	443a      	add	r2, r7
 8006c8c:	6811      	ldr	r1, [r2, #0]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7fa f928 	bl	8000ee4 <__aeabi_fmul>
 8006c94:	4603      	mov	r3, r0
 8006c96:	461c      	mov	r4, r3
 8006c98:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006c9c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006ca0:	685a      	ldr	r2, [r3, #4]
 8006ca2:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006ca6:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	4619      	mov	r1, r3
 8006cae:	4610      	mov	r0, r2
 8006cb0:	f7fa f918 	bl	8000ee4 <__aeabi_fmul>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006cbc:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	4610      	mov	r0, r2
 8006cc6:	f7fa f90d 	bl	8000ee4 <__aeabi_fmul>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	4619      	mov	r1, r3
 8006cce:	4620      	mov	r0, r4
 8006cd0:	f7f9 fffe 	bl	8000cd0 <__aeabi_fsub>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	4a1a      	ldr	r2, [pc, #104]	@ (8006d40 <ETS+0x16e0>)
 8006cd8:	443a      	add	r2, r7
 8006cda:	6811      	ldr	r1, [r2, #0]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7f9 fff9 	bl	8000cd4 <__addsf3>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	461c      	mov	r4, r3
 8006ce6:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006cea:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a10      	ldr	r2, [pc, #64]	@ (8006d34 <ETS+0x16d4>)
 8006cf2:	443a      	add	r2, r7
 8006cf4:	6811      	ldr	r1, [r2, #0]
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7fa f8f4 	bl	8000ee4 <__aeabi_fmul>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	4619      	mov	r1, r3
 8006d00:	4620      	mov	r0, r4
 8006d02:	f7f9 ffe7 	bl	8000cd4 <__addsf3>
 8006d06:	4603      	mov	r3, r0
 8006d08:	461c      	mov	r4, r3
 8006d0a:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006d0e:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7fa f8e3 	bl	8000ee4 <__aeabi_fmul>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	461a      	mov	r2, r3
 8006d22:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006d26:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006d2a:	e011      	b.n	8006d50 <ETS+0x16f0>
 8006d2c:	00014d38 	.word	0x00014d38
 8006d30:	00014cec 	.word	0x00014cec
 8006d34:	00014cf0 	.word	0x00014cf0
 8006d38:	00014d3c 	.word	0x00014d3c
 8006d3c:	00014d10 	.word	0x00014d10
 8006d40:	00014cf4 	.word	0x00014cf4
 8006d44:	00014d0c 	.word	0x00014d0c
 8006d48:	00014cf8 	.word	0x00014cf8
 8006d4c:	00014d08 	.word	0x00014d08
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	4619      	mov	r1, r3
 8006d54:	4610      	mov	r0, r2
 8006d56:	f7fa f8c5 	bl	8000ee4 <__aeabi_fmul>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	4620      	mov	r0, r4
 8006d60:	f7f9 ffb6 	bl	8000cd0 <__aeabi_fsub>
 8006d64:	4603      	mov	r3, r0
 8006d66:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8006d6a:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006d6e:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	4aa4      	ldr	r2, [pc, #656]	@ (8007008 <ETS+0x19a8>)
 8006d76:	443a      	add	r2, r7
 8006d78:	6811      	ldr	r1, [r2, #0]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7fa f8b2 	bl	8000ee4 <__aeabi_fmul>
 8006d80:	4603      	mov	r3, r0
 8006d82:	4619      	mov	r1, r3
 8006d84:	4620      	mov	r0, r4
 8006d86:	f7fa f961 	bl	800104c <__aeabi_fdiv>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f00c fc8f 	bl	80136b0 <sqrtf>
 8006d92:	4603      	mov	r3, r0
 8006d94:	4619      	mov	r1, r3
 8006d96:	4630      	mov	r0, r6
 8006d98:	f7fa f8a4 	bl	8000ee4 <__aeabi_fmul>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	4619      	mov	r1, r3
 8006da0:	4628      	mov	r0, r5
 8006da2:	f7fa f953 	bl	800104c <__aeabi_fdiv>
 8006da6:	4603      	mov	r3, r0
 8006da8:	4a98      	ldr	r2, [pc, #608]	@ (800700c <ETS+0x19ac>)
 8006daa:	443a      	add	r2, r7
 8006dac:	6013      	str	r3, [r2, #0]
    rho = -atanf(rho);
 8006dae:	4b97      	ldr	r3, [pc, #604]	@ (800700c <ETS+0x19ac>)
 8006db0:	443b      	add	r3, r7
 8006db2:	6818      	ldr	r0, [r3, #0]
 8006db4:	f00c fc96 	bl	80136e4 <atanf>
 8006db8:	4603      	mov	r3, r0
 8006dba:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8006dbe:	4a93      	ldr	r2, [pc, #588]	@ (800700c <ETS+0x19ac>)
 8006dc0:	443a      	add	r2, r7
 8006dc2:	6013      	str	r3, [r2, #0]
    lambida = -atanf((X[3] / X[4]) * sqrtf(-(X4_2 * (X[4]*X1_2 - X[1]*X[2]*X[3] + X2_2 - 4*X[0]*X[4]) / (2*X1_2*X3_2*X[4] - 4* X1_2 * X4_2 - 4*X1_2 * X4_2 - X[1]*X[2]*X3_2*X[3] + X2_2 * X3_2 + X[0]* X3_2*X3_2 - 8*X[0]*X3_2*X[4] + 16*X[0]*X4_2))));
 8006dc4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006dc8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006dcc:	68da      	ldr	r2, [r3, #12]
 8006dce:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006dd2:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	4619      	mov	r1, r3
 8006dda:	4610      	mov	r0, r2
 8006ddc:	f7fa f936 	bl	800104c <__aeabi_fdiv>
 8006de0:	4603      	mov	r3, r0
 8006de2:	461c      	mov	r4, r3
 8006de4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006de8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	4a88      	ldr	r2, [pc, #544]	@ (8007010 <ETS+0x19b0>)
 8006df0:	443a      	add	r2, r7
 8006df2:	6811      	ldr	r1, [r2, #0]
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7fa f875 	bl	8000ee4 <__aeabi_fmul>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	461d      	mov	r5, r3
 8006dfe:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006e02:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006e0c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	4619      	mov	r1, r3
 8006e14:	4610      	mov	r0, r2
 8006e16:	f7fa f865 	bl	8000ee4 <__aeabi_fmul>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006e22:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	4619      	mov	r1, r3
 8006e2a:	4610      	mov	r0, r2
 8006e2c:	f7fa f85a 	bl	8000ee4 <__aeabi_fmul>
 8006e30:	4603      	mov	r3, r0
 8006e32:	4619      	mov	r1, r3
 8006e34:	4628      	mov	r0, r5
 8006e36:	f7f9 ff4b 	bl	8000cd0 <__aeabi_fsub>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	4a75      	ldr	r2, [pc, #468]	@ (8007014 <ETS+0x19b4>)
 8006e3e:	443a      	add	r2, r7
 8006e40:	6811      	ldr	r1, [r2, #0]
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7f9 ff46 	bl	8000cd4 <__addsf3>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	461d      	mov	r5, r3
 8006e4c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006e50:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7fa f842 	bl	8000ee4 <__aeabi_fmul>
 8006e60:	4603      	mov	r3, r0
 8006e62:	461a      	mov	r2, r3
 8006e64:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006e68:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	4619      	mov	r1, r3
 8006e70:	4610      	mov	r0, r2
 8006e72:	f7fa f837 	bl	8000ee4 <__aeabi_fmul>
 8006e76:	4603      	mov	r3, r0
 8006e78:	4619      	mov	r1, r3
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	f7f9 ff28 	bl	8000cd0 <__aeabi_fsub>
 8006e80:	4603      	mov	r3, r0
 8006e82:	4a61      	ldr	r2, [pc, #388]	@ (8007008 <ETS+0x19a8>)
 8006e84:	443a      	add	r2, r7
 8006e86:	6811      	ldr	r1, [r2, #0]
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7fa f82b 	bl	8000ee4 <__aeabi_fmul>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	461d      	mov	r5, r3
 8006e92:	4b5f      	ldr	r3, [pc, #380]	@ (8007010 <ETS+0x19b0>)
 8006e94:	443b      	add	r3, r7
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4619      	mov	r1, r3
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7f9 ff1a 	bl	8000cd4 <__addsf3>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	4a5d      	ldr	r2, [pc, #372]	@ (8007018 <ETS+0x19b8>)
 8006ea4:	443a      	add	r2, r7
 8006ea6:	6811      	ldr	r1, [r2, #0]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7fa f81b 	bl	8000ee4 <__aeabi_fmul>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006eb6:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	4610      	mov	r0, r2
 8006ec0:	f7fa f810 	bl	8000ee4 <__aeabi_fmul>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	461e      	mov	r6, r3
 8006ec8:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8006ecc:	4b50      	ldr	r3, [pc, #320]	@ (8007010 <ETS+0x19b0>)
 8006ece:	443b      	add	r3, r7
 8006ed0:	6818      	ldr	r0, [r3, #0]
 8006ed2:	f7fa f807 	bl	8000ee4 <__aeabi_fmul>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	4a4b      	ldr	r2, [pc, #300]	@ (8007008 <ETS+0x19a8>)
 8006eda:	443a      	add	r2, r7
 8006edc:	6811      	ldr	r1, [r2, #0]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7fa f800 	bl	8000ee4 <__aeabi_fmul>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	4630      	mov	r0, r6
 8006eea:	f7f9 fef1 	bl	8000cd0 <__aeabi_fsub>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	461e      	mov	r6, r3
 8006ef2:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8006ef6:	4b46      	ldr	r3, [pc, #280]	@ (8007010 <ETS+0x19b0>)
 8006ef8:	443b      	add	r3, r7
 8006efa:	6818      	ldr	r0, [r3, #0]
 8006efc:	f7f9 fff2 	bl	8000ee4 <__aeabi_fmul>
 8006f00:	4603      	mov	r3, r0
 8006f02:	4a41      	ldr	r2, [pc, #260]	@ (8007008 <ETS+0x19a8>)
 8006f04:	443a      	add	r2, r7
 8006f06:	6811      	ldr	r1, [r2, #0]
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7f9 ffeb 	bl	8000ee4 <__aeabi_fmul>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	4619      	mov	r1, r3
 8006f12:	4630      	mov	r0, r6
 8006f14:	f7f9 fedc 	bl	8000cd0 <__aeabi_fsub>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	461e      	mov	r6, r3
 8006f1c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006f20:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006f24:	685a      	ldr	r2, [r3, #4]
 8006f26:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006f2a:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	4619      	mov	r1, r3
 8006f32:	4610      	mov	r0, r2
 8006f34:	f7f9 ffd6 	bl	8000ee4 <__aeabi_fmul>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	4a37      	ldr	r2, [pc, #220]	@ (8007018 <ETS+0x19b8>)
 8006f3c:	443a      	add	r2, r7
 8006f3e:	6811      	ldr	r1, [r2, #0]
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7f9 ffcf 	bl	8000ee4 <__aeabi_fmul>
 8006f46:	4603      	mov	r3, r0
 8006f48:	461a      	mov	r2, r3
 8006f4a:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006f4e:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	4619      	mov	r1, r3
 8006f56:	4610      	mov	r0, r2
 8006f58:	f7f9 ffc4 	bl	8000ee4 <__aeabi_fmul>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	4619      	mov	r1, r3
 8006f60:	4630      	mov	r0, r6
 8006f62:	f7f9 feb5 	bl	8000cd0 <__aeabi_fsub>
 8006f66:	4603      	mov	r3, r0
 8006f68:	461e      	mov	r6, r3
 8006f6a:	4b2b      	ldr	r3, [pc, #172]	@ (8007018 <ETS+0x19b8>)
 8006f6c:	443b      	add	r3, r7
 8006f6e:	6819      	ldr	r1, [r3, #0]
 8006f70:	4b28      	ldr	r3, [pc, #160]	@ (8007014 <ETS+0x19b4>)
 8006f72:	443b      	add	r3, r7
 8006f74:	6818      	ldr	r0, [r3, #0]
 8006f76:	f7f9 ffb5 	bl	8000ee4 <__aeabi_fmul>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	4630      	mov	r0, r6
 8006f80:	f7f9 fea8 	bl	8000cd4 <__addsf3>
 8006f84:	4603      	mov	r3, r0
 8006f86:	461e      	mov	r6, r3
 8006f88:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006f8c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a21      	ldr	r2, [pc, #132]	@ (8007018 <ETS+0x19b8>)
 8006f94:	443a      	add	r2, r7
 8006f96:	6811      	ldr	r1, [r2, #0]
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f7f9 ffa3 	bl	8000ee4 <__aeabi_fmul>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	4a1d      	ldr	r2, [pc, #116]	@ (8007018 <ETS+0x19b8>)
 8006fa2:	443a      	add	r2, r7
 8006fa4:	6811      	ldr	r1, [r2, #0]
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7f9 ff9c 	bl	8000ee4 <__aeabi_fmul>
 8006fac:	4603      	mov	r3, r0
 8006fae:	4619      	mov	r1, r3
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	f7f9 fe8f 	bl	8000cd4 <__addsf3>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	461e      	mov	r6, r3
 8006fba:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006fbe:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f7f9 ff8b 	bl	8000ee4 <__aeabi_fmul>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	4a11      	ldr	r2, [pc, #68]	@ (8007018 <ETS+0x19b8>)
 8006fd2:	443a      	add	r2, r7
 8006fd4:	6811      	ldr	r1, [r2, #0]
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7f9 ff84 	bl	8000ee4 <__aeabi_fmul>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	461a      	mov	r2, r3
 8006fe0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006fe4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	4619      	mov	r1, r3
 8006fec:	4610      	mov	r0, r2
 8006fee:	f7f9 ff79 	bl	8000ee4 <__aeabi_fmul>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	4630      	mov	r0, r6
 8006ff8:	f7f9 fe6a 	bl	8000cd0 <__aeabi_fsub>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	461e      	mov	r6, r3
 8007000:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8007004:	e00a      	b.n	800701c <ETS+0x19bc>
 8007006:	bf00      	nop
 8007008:	00014cec 	.word	0x00014cec
 800700c:	00014d04 	.word	0x00014d04
 8007010:	00014cf8 	.word	0x00014cf8
 8007014:	00014cf4 	.word	0x00014cf4
 8007018:	00014cf0 	.word	0x00014cf0
 800701c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8007026:	4618      	mov	r0, r3
 8007028:	f7f9 ff5c 	bl	8000ee4 <__aeabi_fmul>
 800702c:	4603      	mov	r3, r0
 800702e:	4aab      	ldr	r2, [pc, #684]	@ (80072dc <ETS+0x1c7c>)
 8007030:	443a      	add	r2, r7
 8007032:	6811      	ldr	r1, [r2, #0]
 8007034:	4618      	mov	r0, r3
 8007036:	f7f9 ff55 	bl	8000ee4 <__aeabi_fmul>
 800703a:	4603      	mov	r3, r0
 800703c:	4619      	mov	r1, r3
 800703e:	4630      	mov	r0, r6
 8007040:	f7f9 fe48 	bl	8000cd4 <__addsf3>
 8007044:	4603      	mov	r3, r0
 8007046:	4619      	mov	r1, r3
 8007048:	4628      	mov	r0, r5
 800704a:	f7f9 ffff 	bl	800104c <__aeabi_fdiv>
 800704e:	4603      	mov	r3, r0
 8007050:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007054:	4618      	mov	r0, r3
 8007056:	f00c fb2b 	bl	80136b0 <sqrtf>
 800705a:	4603      	mov	r3, r0
 800705c:	4619      	mov	r1, r3
 800705e:	4620      	mov	r0, r4
 8007060:	f7f9 ff40 	bl	8000ee4 <__aeabi_fmul>
 8007064:	4603      	mov	r3, r0
 8007066:	4618      	mov	r0, r3
 8007068:	f00c fb3c 	bl	80136e4 <atanf>
 800706c:	4603      	mov	r3, r0
 800706e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007072:	4a9b      	ldr	r2, [pc, #620]	@ (80072e0 <ETS+0x1c80>)
 8007074:	443a      	add	r2, r7
 8007076:	6013      	str	r3, [r2, #0]

    n1 = -X1_2*X7_2 + 4*X1_2*X[4]*X[8] - 4*X[1]*X[2]*X[3]*X[8] + 2*X[1]*X[2]*X[6]*X[7] + 2*X[1]*X[3]*X[5]*X[7] - 4*X[1]*X[4]*X[5]*X[6] - X2_2*X6_2 + 2*X[2]*X[3]*X[5]*X[6] + 4*X2_2*X[8] - 4*X[2]*X[5]*X[7] - X3_2*X5_2 + 4*X[1]*X3_2*X[8] - 4*X[0]*X[3]*X[6]*X[7] + 4*X[4]*X5_2 + 4*X[0]*X[4]*X6_2 + 4*X[0]*X7_2 - 16*X[0]*X[4]*X[8];
 8007078:	4b9a      	ldr	r3, [pc, #616]	@ (80072e4 <ETS+0x1c84>)
 800707a:	443b      	add	r3, r7
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007082:	4a99      	ldr	r2, [pc, #612]	@ (80072e8 <ETS+0x1c88>)
 8007084:	443a      	add	r2, r7
 8007086:	6811      	ldr	r1, [r2, #0]
 8007088:	4618      	mov	r0, r3
 800708a:	f7f9 ff2b 	bl	8000ee4 <__aeabi_fmul>
 800708e:	4603      	mov	r3, r0
 8007090:	461c      	mov	r4, r3
 8007092:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8007096:	4b93      	ldr	r3, [pc, #588]	@ (80072e4 <ETS+0x1c84>)
 8007098:	443b      	add	r3, r7
 800709a:	6818      	ldr	r0, [r3, #0]
 800709c:	f7f9 ff22 	bl	8000ee4 <__aeabi_fmul>
 80070a0:	4603      	mov	r3, r0
 80070a2:	461a      	mov	r2, r3
 80070a4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80070a8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	4619      	mov	r1, r3
 80070b0:	4610      	mov	r0, r2
 80070b2:	f7f9 ff17 	bl	8000ee4 <__aeabi_fmul>
 80070b6:	4603      	mov	r3, r0
 80070b8:	461a      	mov	r2, r3
 80070ba:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80070be:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80070c2:	6a1b      	ldr	r3, [r3, #32]
 80070c4:	4619      	mov	r1, r3
 80070c6:	4610      	mov	r0, r2
 80070c8:	f7f9 ff0c 	bl	8000ee4 <__aeabi_fmul>
 80070cc:	4603      	mov	r3, r0
 80070ce:	4619      	mov	r1, r3
 80070d0:	4620      	mov	r0, r4
 80070d2:	f7f9 fdff 	bl	8000cd4 <__addsf3>
 80070d6:	4603      	mov	r3, r0
 80070d8:	461c      	mov	r4, r3
 80070da:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80070de:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7f9 fefb 	bl	8000ee4 <__aeabi_fmul>
 80070ee:	4603      	mov	r3, r0
 80070f0:	461a      	mov	r2, r3
 80070f2:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80070f6:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	4619      	mov	r1, r3
 80070fe:	4610      	mov	r0, r2
 8007100:	f7f9 fef0 	bl	8000ee4 <__aeabi_fmul>
 8007104:	4603      	mov	r3, r0
 8007106:	461a      	mov	r2, r3
 8007108:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800710c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	4619      	mov	r1, r3
 8007114:	4610      	mov	r0, r2
 8007116:	f7f9 fee5 	bl	8000ee4 <__aeabi_fmul>
 800711a:	4603      	mov	r3, r0
 800711c:	461a      	mov	r2, r3
 800711e:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8007122:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8007126:	6a1b      	ldr	r3, [r3, #32]
 8007128:	4619      	mov	r1, r3
 800712a:	4610      	mov	r0, r2
 800712c:	f7f9 feda 	bl	8000ee4 <__aeabi_fmul>
 8007130:	4603      	mov	r3, r0
 8007132:	4619      	mov	r1, r3
 8007134:	4620      	mov	r0, r4
 8007136:	f7f9 fdcb 	bl	8000cd0 <__aeabi_fsub>
 800713a:	4603      	mov	r3, r0
 800713c:	461c      	mov	r4, r3
 800713e:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8007142:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	4619      	mov	r1, r3
 800714a:	4618      	mov	r0, r3
 800714c:	f7f9 fdc2 	bl	8000cd4 <__addsf3>
 8007150:	4603      	mov	r3, r0
 8007152:	461a      	mov	r2, r3
 8007154:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8007158:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	4619      	mov	r1, r3
 8007160:	4610      	mov	r0, r2
 8007162:	f7f9 febf 	bl	8000ee4 <__aeabi_fmul>
 8007166:	4603      	mov	r3, r0
 8007168:	461a      	mov	r2, r3
 800716a:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800716e:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	4619      	mov	r1, r3
 8007176:	4610      	mov	r0, r2
 8007178:	f7f9 feb4 	bl	8000ee4 <__aeabi_fmul>
 800717c:	4603      	mov	r3, r0
 800717e:	461a      	mov	r2, r3
 8007180:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8007184:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8007188:	69db      	ldr	r3, [r3, #28]
 800718a:	4619      	mov	r1, r3
 800718c:	4610      	mov	r0, r2
 800718e:	f7f9 fea9 	bl	8000ee4 <__aeabi_fmul>
 8007192:	4603      	mov	r3, r0
 8007194:	4619      	mov	r1, r3
 8007196:	4620      	mov	r0, r4
 8007198:	f7f9 fd9c 	bl	8000cd4 <__addsf3>
 800719c:	4603      	mov	r3, r0
 800719e:	461c      	mov	r4, r3
 80071a0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80071a4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	4619      	mov	r1, r3
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7f9 fd91 	bl	8000cd4 <__addsf3>
 80071b2:	4603      	mov	r3, r0
 80071b4:	461a      	mov	r2, r3
 80071b6:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80071ba:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	4619      	mov	r1, r3
 80071c2:	4610      	mov	r0, r2
 80071c4:	f7f9 fe8e 	bl	8000ee4 <__aeabi_fmul>
 80071c8:	4603      	mov	r3, r0
 80071ca:	461a      	mov	r2, r3
 80071cc:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80071d0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	4619      	mov	r1, r3
 80071d8:	4610      	mov	r0, r2
 80071da:	f7f9 fe83 	bl	8000ee4 <__aeabi_fmul>
 80071de:	4603      	mov	r3, r0
 80071e0:	461a      	mov	r2, r3
 80071e2:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80071e6:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80071ea:	69db      	ldr	r3, [r3, #28]
 80071ec:	4619      	mov	r1, r3
 80071ee:	4610      	mov	r0, r2
 80071f0:	f7f9 fe78 	bl	8000ee4 <__aeabi_fmul>
 80071f4:	4603      	mov	r3, r0
 80071f6:	4619      	mov	r1, r3
 80071f8:	4620      	mov	r0, r4
 80071fa:	f7f9 fd6b 	bl	8000cd4 <__addsf3>
 80071fe:	4603      	mov	r3, r0
 8007200:	461c      	mov	r4, r3
 8007202:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8007206:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8007210:	4618      	mov	r0, r3
 8007212:	f7f9 fe67 	bl	8000ee4 <__aeabi_fmul>
 8007216:	4603      	mov	r3, r0
 8007218:	461a      	mov	r2, r3
 800721a:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800721e:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	4619      	mov	r1, r3
 8007226:	4610      	mov	r0, r2
 8007228:	f7f9 fe5c 	bl	8000ee4 <__aeabi_fmul>
 800722c:	4603      	mov	r3, r0
 800722e:	461a      	mov	r2, r3
 8007230:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8007234:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	4619      	mov	r1, r3
 800723c:	4610      	mov	r0, r2
 800723e:	f7f9 fe51 	bl	8000ee4 <__aeabi_fmul>
 8007242:	4603      	mov	r3, r0
 8007244:	461a      	mov	r2, r3
 8007246:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800724a:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800724e:	699b      	ldr	r3, [r3, #24]
 8007250:	4619      	mov	r1, r3
 8007252:	4610      	mov	r0, r2
 8007254:	f7f9 fe46 	bl	8000ee4 <__aeabi_fmul>
 8007258:	4603      	mov	r3, r0
 800725a:	4619      	mov	r1, r3
 800725c:	4620      	mov	r0, r4
 800725e:	f7f9 fd37 	bl	8000cd0 <__aeabi_fsub>
 8007262:	4603      	mov	r3, r0
 8007264:	461c      	mov	r4, r3
 8007266:	4b21      	ldr	r3, [pc, #132]	@ (80072ec <ETS+0x1c8c>)
 8007268:	443b      	add	r3, r7
 800726a:	6819      	ldr	r1, [r3, #0]
 800726c:	4b20      	ldr	r3, [pc, #128]	@ (80072f0 <ETS+0x1c90>)
 800726e:	443b      	add	r3, r7
 8007270:	6818      	ldr	r0, [r3, #0]
 8007272:	f7f9 fe37 	bl	8000ee4 <__aeabi_fmul>
 8007276:	4603      	mov	r3, r0
 8007278:	4619      	mov	r1, r3
 800727a:	4620      	mov	r0, r4
 800727c:	f7f9 fd28 	bl	8000cd0 <__aeabi_fsub>
 8007280:	4603      	mov	r3, r0
 8007282:	461c      	mov	r4, r3
 8007284:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8007288:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	4619      	mov	r1, r3
 8007290:	4618      	mov	r0, r3
 8007292:	f7f9 fd1f 	bl	8000cd4 <__addsf3>
 8007296:	4603      	mov	r3, r0
 8007298:	461a      	mov	r2, r3
 800729a:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800729e:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	4619      	mov	r1, r3
 80072a6:	4610      	mov	r0, r2
 80072a8:	f7f9 fe1c 	bl	8000ee4 <__aeabi_fmul>
 80072ac:	4603      	mov	r3, r0
 80072ae:	461a      	mov	r2, r3
 80072b0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80072b4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80072b8:	695b      	ldr	r3, [r3, #20]
 80072ba:	4619      	mov	r1, r3
 80072bc:	4610      	mov	r0, r2
 80072be:	f7f9 fe11 	bl	8000ee4 <__aeabi_fmul>
 80072c2:	4603      	mov	r3, r0
 80072c4:	461a      	mov	r2, r3
 80072c6:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80072ca:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	4619      	mov	r1, r3
 80072d2:	4610      	mov	r0, r2
 80072d4:	f7f9 fe06 	bl	8000ee4 <__aeabi_fmul>
 80072d8:	e00c      	b.n	80072f4 <ETS+0x1c94>
 80072da:	bf00      	nop
 80072dc:	00014cec 	.word	0x00014cec
 80072e0:	00014cfc 	.word	0x00014cfc
 80072e4:	00014cf8 	.word	0x00014cf8
 80072e8:	00014ce0 	.word	0x00014ce0
 80072ec:	00014ce4 	.word	0x00014ce4
 80072f0:	00014cf4 	.word	0x00014cf4
 80072f4:	4603      	mov	r3, r0
 80072f6:	4619      	mov	r1, r3
 80072f8:	4620      	mov	r0, r4
 80072fa:	f7f9 fceb 	bl	8000cd4 <__addsf3>
 80072fe:	4603      	mov	r3, r0
 8007300:	461c      	mov	r4, r3
 8007302:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8007306:	4bab      	ldr	r3, [pc, #684]	@ (80075b4 <ETS+0x1f54>)
 8007308:	443b      	add	r3, r7
 800730a:	6818      	ldr	r0, [r3, #0]
 800730c:	f7f9 fdea 	bl	8000ee4 <__aeabi_fmul>
 8007310:	4603      	mov	r3, r0
 8007312:	461a      	mov	r2, r3
 8007314:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8007318:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800731c:	6a1b      	ldr	r3, [r3, #32]
 800731e:	4619      	mov	r1, r3
 8007320:	4610      	mov	r0, r2
 8007322:	f7f9 fddf 	bl	8000ee4 <__aeabi_fmul>
 8007326:	4603      	mov	r3, r0
 8007328:	4619      	mov	r1, r3
 800732a:	4620      	mov	r0, r4
 800732c:	f7f9 fcd2 	bl	8000cd4 <__addsf3>
 8007330:	4603      	mov	r3, r0
 8007332:	461c      	mov	r4, r3
 8007334:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8007338:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8007342:	4618      	mov	r0, r3
 8007344:	f7f9 fdce 	bl	8000ee4 <__aeabi_fmul>
 8007348:	4603      	mov	r3, r0
 800734a:	461a      	mov	r2, r3
 800734c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8007350:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	4619      	mov	r1, r3
 8007358:	4610      	mov	r0, r2
 800735a:	f7f9 fdc3 	bl	8000ee4 <__aeabi_fmul>
 800735e:	4603      	mov	r3, r0
 8007360:	461a      	mov	r2, r3
 8007362:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8007366:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800736a:	69db      	ldr	r3, [r3, #28]
 800736c:	4619      	mov	r1, r3
 800736e:	4610      	mov	r0, r2
 8007370:	f7f9 fdb8 	bl	8000ee4 <__aeabi_fmul>
 8007374:	4603      	mov	r3, r0
 8007376:	4619      	mov	r1, r3
 8007378:	4620      	mov	r0, r4
 800737a:	f7f9 fca9 	bl	8000cd0 <__aeabi_fsub>
 800737e:	4603      	mov	r3, r0
 8007380:	461c      	mov	r4, r3
 8007382:	4b8d      	ldr	r3, [pc, #564]	@ (80075b8 <ETS+0x1f58>)
 8007384:	443b      	add	r3, r7
 8007386:	6819      	ldr	r1, [r3, #0]
 8007388:	4b8c      	ldr	r3, [pc, #560]	@ (80075bc <ETS+0x1f5c>)
 800738a:	443b      	add	r3, r7
 800738c:	6818      	ldr	r0, [r3, #0]
 800738e:	f7f9 fda9 	bl	8000ee4 <__aeabi_fmul>
 8007392:	4603      	mov	r3, r0
 8007394:	4619      	mov	r1, r3
 8007396:	4620      	mov	r0, r4
 8007398:	f7f9 fc9a 	bl	8000cd0 <__aeabi_fsub>
 800739c:	4603      	mov	r3, r0
 800739e:	461c      	mov	r4, r3
 80073a0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80073a4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7f9 fd98 	bl	8000ee4 <__aeabi_fmul>
 80073b4:	4603      	mov	r3, r0
 80073b6:	4a81      	ldr	r2, [pc, #516]	@ (80075bc <ETS+0x1f5c>)
 80073b8:	443a      	add	r2, r7
 80073ba:	6811      	ldr	r1, [r2, #0]
 80073bc:	4618      	mov	r0, r3
 80073be:	f7f9 fd91 	bl	8000ee4 <__aeabi_fmul>
 80073c2:	4603      	mov	r3, r0
 80073c4:	461a      	mov	r2, r3
 80073c6:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80073ca:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80073ce:	6a1b      	ldr	r3, [r3, #32]
 80073d0:	4619      	mov	r1, r3
 80073d2:	4610      	mov	r0, r2
 80073d4:	f7f9 fd86 	bl	8000ee4 <__aeabi_fmul>
 80073d8:	4603      	mov	r3, r0
 80073da:	4619      	mov	r1, r3
 80073dc:	4620      	mov	r0, r4
 80073de:	f7f9 fc79 	bl	8000cd4 <__addsf3>
 80073e2:	4603      	mov	r3, r0
 80073e4:	461c      	mov	r4, r3
 80073e6:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80073ea:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7f9 fd75 	bl	8000ee4 <__aeabi_fmul>
 80073fa:	4603      	mov	r3, r0
 80073fc:	461a      	mov	r2, r3
 80073fe:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8007402:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	4619      	mov	r1, r3
 800740a:	4610      	mov	r0, r2
 800740c:	f7f9 fd6a 	bl	8000ee4 <__aeabi_fmul>
 8007410:	4603      	mov	r3, r0
 8007412:	461a      	mov	r2, r3
 8007414:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8007418:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	4619      	mov	r1, r3
 8007420:	4610      	mov	r0, r2
 8007422:	f7f9 fd5f 	bl	8000ee4 <__aeabi_fmul>
 8007426:	4603      	mov	r3, r0
 8007428:	461a      	mov	r2, r3
 800742a:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800742e:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8007432:	69db      	ldr	r3, [r3, #28]
 8007434:	4619      	mov	r1, r3
 8007436:	4610      	mov	r0, r2
 8007438:	f7f9 fd54 	bl	8000ee4 <__aeabi_fmul>
 800743c:	4603      	mov	r3, r0
 800743e:	4619      	mov	r1, r3
 8007440:	4620      	mov	r0, r4
 8007442:	f7f9 fc45 	bl	8000cd0 <__aeabi_fsub>
 8007446:	4603      	mov	r3, r0
 8007448:	461c      	mov	r4, r3
 800744a:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800744e:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8007458:	4618      	mov	r0, r3
 800745a:	f7f9 fd43 	bl	8000ee4 <__aeabi_fmul>
 800745e:	4603      	mov	r3, r0
 8007460:	4a55      	ldr	r2, [pc, #340]	@ (80075b8 <ETS+0x1f58>)
 8007462:	443a      	add	r2, r7
 8007464:	6811      	ldr	r1, [r2, #0]
 8007466:	4618      	mov	r0, r3
 8007468:	f7f9 fd3c 	bl	8000ee4 <__aeabi_fmul>
 800746c:	4603      	mov	r3, r0
 800746e:	4619      	mov	r1, r3
 8007470:	4620      	mov	r0, r4
 8007472:	f7f9 fc2f 	bl	8000cd4 <__addsf3>
 8007476:	4603      	mov	r3, r0
 8007478:	461c      	mov	r4, r3
 800747a:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800747e:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8007488:	4618      	mov	r0, r3
 800748a:	f7f9 fd2b 	bl	8000ee4 <__aeabi_fmul>
 800748e:	4603      	mov	r3, r0
 8007490:	461a      	mov	r2, r3
 8007492:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8007496:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	4619      	mov	r1, r3
 800749e:	4610      	mov	r0, r2
 80074a0:	f7f9 fd20 	bl	8000ee4 <__aeabi_fmul>
 80074a4:	4603      	mov	r3, r0
 80074a6:	4a46      	ldr	r2, [pc, #280]	@ (80075c0 <ETS+0x1f60>)
 80074a8:	443a      	add	r2, r7
 80074aa:	6811      	ldr	r1, [r2, #0]
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7f9 fd19 	bl	8000ee4 <__aeabi_fmul>
 80074b2:	4603      	mov	r3, r0
 80074b4:	4619      	mov	r1, r3
 80074b6:	4620      	mov	r0, r4
 80074b8:	f7f9 fc0c 	bl	8000cd4 <__addsf3>
 80074bc:	4603      	mov	r3, r0
 80074be:	461c      	mov	r4, r3
 80074c0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80074c4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7f9 fd08 	bl	8000ee4 <__aeabi_fmul>
 80074d4:	4603      	mov	r3, r0
 80074d6:	4a3b      	ldr	r2, [pc, #236]	@ (80075c4 <ETS+0x1f64>)
 80074d8:	443a      	add	r2, r7
 80074da:	6811      	ldr	r1, [r2, #0]
 80074dc:	4618      	mov	r0, r3
 80074de:	f7f9 fd01 	bl	8000ee4 <__aeabi_fmul>
 80074e2:	4603      	mov	r3, r0
 80074e4:	4619      	mov	r1, r3
 80074e6:	4620      	mov	r0, r4
 80074e8:	f7f9 fbf4 	bl	8000cd4 <__addsf3>
 80074ec:	4603      	mov	r3, r0
 80074ee:	461c      	mov	r4, r3
 80074f0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80074f4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 80074fe:	4618      	mov	r0, r3
 8007500:	f7f9 fcf0 	bl	8000ee4 <__aeabi_fmul>
 8007504:	4603      	mov	r3, r0
 8007506:	461a      	mov	r2, r3
 8007508:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800750c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	4619      	mov	r1, r3
 8007514:	4610      	mov	r0, r2
 8007516:	f7f9 fce5 	bl	8000ee4 <__aeabi_fmul>
 800751a:	4603      	mov	r3, r0
 800751c:	461a      	mov	r2, r3
 800751e:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8007522:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8007526:	6a1b      	ldr	r3, [r3, #32]
 8007528:	4619      	mov	r1, r3
 800752a:	4610      	mov	r0, r2
 800752c:	f7f9 fcda 	bl	8000ee4 <__aeabi_fmul>
 8007530:	4603      	mov	r3, r0
 8007532:	4619      	mov	r1, r3
 8007534:	4620      	mov	r0, r4
 8007536:	f7f9 fbcb 	bl	8000cd0 <__aeabi_fsub>
 800753a:	4603      	mov	r3, r0
 800753c:	4a22      	ldr	r2, [pc, #136]	@ (80075c8 <ETS+0x1f68>)
 800753e:	443a      	add	r2, r7
 8007540:	6013      	str	r3, [r2, #0]
    n2 = X1_2*X[4] - X[1]*X[2]*X[3] + X2_2 + X[0]*X3_2 - 4*X[0]*X[4];
 8007542:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8007546:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	4a1f      	ldr	r2, [pc, #124]	@ (80075cc <ETS+0x1f6c>)
 800754e:	443a      	add	r2, r7
 8007550:	6811      	ldr	r1, [r2, #0]
 8007552:	4618      	mov	r0, r3
 8007554:	f7f9 fcc6 	bl	8000ee4 <__aeabi_fmul>
 8007558:	4603      	mov	r3, r0
 800755a:	461c      	mov	r4, r3
 800755c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8007560:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8007564:	685a      	ldr	r2, [r3, #4]
 8007566:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800756a:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	4619      	mov	r1, r3
 8007572:	4610      	mov	r0, r2
 8007574:	f7f9 fcb6 	bl	8000ee4 <__aeabi_fmul>
 8007578:	4603      	mov	r3, r0
 800757a:	461a      	mov	r2, r3
 800757c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8007580:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	4619      	mov	r1, r3
 8007588:	4610      	mov	r0, r2
 800758a:	f7f9 fcab 	bl	8000ee4 <__aeabi_fmul>
 800758e:	4603      	mov	r3, r0
 8007590:	4619      	mov	r1, r3
 8007592:	4620      	mov	r0, r4
 8007594:	f7f9 fb9c 	bl	8000cd0 <__aeabi_fsub>
 8007598:	4603      	mov	r3, r0
 800759a:	4a06      	ldr	r2, [pc, #24]	@ (80075b4 <ETS+0x1f54>)
 800759c:	443a      	add	r2, r7
 800759e:	6811      	ldr	r1, [r2, #0]
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7f9 fb97 	bl	8000cd4 <__addsf3>
 80075a6:	4603      	mov	r3, r0
 80075a8:	461c      	mov	r4, r3
 80075aa:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80075ae:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80075b2:	e00d      	b.n	80075d0 <ETS+0x1f70>
 80075b4:	00014cf4 	.word	0x00014cf4
 80075b8:	00014ce8 	.word	0x00014ce8
 80075bc:	00014cf0 	.word	0x00014cf0
 80075c0:	00014ce4 	.word	0x00014ce4
 80075c4:	00014ce0 	.word	0x00014ce0
 80075c8:	00014d34 	.word	0x00014d34
 80075cc:	00014cf8 	.word	0x00014cf8
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4aa5      	ldr	r2, [pc, #660]	@ (8007868 <ETS+0x2208>)
 80075d4:	443a      	add	r2, r7
 80075d6:	6811      	ldr	r1, [r2, #0]
 80075d8:	4618      	mov	r0, r3
 80075da:	f7f9 fc83 	bl	8000ee4 <__aeabi_fmul>
 80075de:	4603      	mov	r3, r0
 80075e0:	4619      	mov	r1, r3
 80075e2:	4620      	mov	r0, r4
 80075e4:	f7f9 fb76 	bl	8000cd4 <__addsf3>
 80075e8:	4603      	mov	r3, r0
 80075ea:	461c      	mov	r4, r3
 80075ec:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80075f0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7f9 fc72 	bl	8000ee4 <__aeabi_fmul>
 8007600:	4603      	mov	r3, r0
 8007602:	461a      	mov	r2, r3
 8007604:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8007608:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	4619      	mov	r1, r3
 8007610:	4610      	mov	r0, r2
 8007612:	f7f9 fc67 	bl	8000ee4 <__aeabi_fmul>
 8007616:	4603      	mov	r3, r0
 8007618:	4619      	mov	r1, r3
 800761a:	4620      	mov	r0, r4
 800761c:	f7f9 fb58 	bl	8000cd0 <__aeabi_fsub>
 8007620:	4603      	mov	r3, r0
 8007622:	4a92      	ldr	r2, [pc, #584]	@ (800786c <ETS+0x220c>)
 8007624:	443a      	add	r2, r7
 8007626:	6013      	str	r3, [r2, #0]
    n3 = 2*X1_2*X3_2*X[4] - 4*X1_2*X4_2 - X[1]*X[2]*X3_2*X[3] + X2_2*X3_2 + X[0]*X3_2 - 8*X[0]*X3_2*X[4] + 16*X[0]*X4_2;
 8007628:	4b91      	ldr	r3, [pc, #580]	@ (8007870 <ETS+0x2210>)
 800762a:	443b      	add	r3, r7
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4619      	mov	r1, r3
 8007630:	4618      	mov	r0, r3
 8007632:	f7f9 fb4f 	bl	8000cd4 <__addsf3>
 8007636:	4603      	mov	r3, r0
 8007638:	4a8b      	ldr	r2, [pc, #556]	@ (8007868 <ETS+0x2208>)
 800763a:	443a      	add	r2, r7
 800763c:	6811      	ldr	r1, [r2, #0]
 800763e:	4618      	mov	r0, r3
 8007640:	f7f9 fc50 	bl	8000ee4 <__aeabi_fmul>
 8007644:	4603      	mov	r3, r0
 8007646:	461a      	mov	r2, r3
 8007648:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800764c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	4619      	mov	r1, r3
 8007654:	4610      	mov	r0, r2
 8007656:	f7f9 fc45 	bl	8000ee4 <__aeabi_fmul>
 800765a:	4603      	mov	r3, r0
 800765c:	461c      	mov	r4, r3
 800765e:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8007662:	4b83      	ldr	r3, [pc, #524]	@ (8007870 <ETS+0x2210>)
 8007664:	443b      	add	r3, r7
 8007666:	6818      	ldr	r0, [r3, #0]
 8007668:	f7f9 fc3c 	bl	8000ee4 <__aeabi_fmul>
 800766c:	4603      	mov	r3, r0
 800766e:	4a81      	ldr	r2, [pc, #516]	@ (8007874 <ETS+0x2214>)
 8007670:	443a      	add	r2, r7
 8007672:	6811      	ldr	r1, [r2, #0]
 8007674:	4618      	mov	r0, r3
 8007676:	f7f9 fc35 	bl	8000ee4 <__aeabi_fmul>
 800767a:	4603      	mov	r3, r0
 800767c:	4619      	mov	r1, r3
 800767e:	4620      	mov	r0, r4
 8007680:	f7f9 fb26 	bl	8000cd0 <__aeabi_fsub>
 8007684:	4603      	mov	r3, r0
 8007686:	461c      	mov	r4, r3
 8007688:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800768c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8007690:	685a      	ldr	r2, [r3, #4]
 8007692:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8007696:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	4619      	mov	r1, r3
 800769e:	4610      	mov	r0, r2
 80076a0:	f7f9 fc20 	bl	8000ee4 <__aeabi_fmul>
 80076a4:	4603      	mov	r3, r0
 80076a6:	4a70      	ldr	r2, [pc, #448]	@ (8007868 <ETS+0x2208>)
 80076a8:	443a      	add	r2, r7
 80076aa:	6811      	ldr	r1, [r2, #0]
 80076ac:	4618      	mov	r0, r3
 80076ae:	f7f9 fc19 	bl	8000ee4 <__aeabi_fmul>
 80076b2:	4603      	mov	r3, r0
 80076b4:	461a      	mov	r2, r3
 80076b6:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80076ba:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	4619      	mov	r1, r3
 80076c2:	4610      	mov	r0, r2
 80076c4:	f7f9 fc0e 	bl	8000ee4 <__aeabi_fmul>
 80076c8:	4603      	mov	r3, r0
 80076ca:	4619      	mov	r1, r3
 80076cc:	4620      	mov	r0, r4
 80076ce:	f7f9 faff 	bl	8000cd0 <__aeabi_fsub>
 80076d2:	4603      	mov	r3, r0
 80076d4:	461c      	mov	r4, r3
 80076d6:	4b64      	ldr	r3, [pc, #400]	@ (8007868 <ETS+0x2208>)
 80076d8:	443b      	add	r3, r7
 80076da:	6819      	ldr	r1, [r3, #0]
 80076dc:	4b66      	ldr	r3, [pc, #408]	@ (8007878 <ETS+0x2218>)
 80076de:	443b      	add	r3, r7
 80076e0:	6818      	ldr	r0, [r3, #0]
 80076e2:	f7f9 fbff 	bl	8000ee4 <__aeabi_fmul>
 80076e6:	4603      	mov	r3, r0
 80076e8:	4619      	mov	r1, r3
 80076ea:	4620      	mov	r0, r4
 80076ec:	f7f9 faf2 	bl	8000cd4 <__addsf3>
 80076f0:	4603      	mov	r3, r0
 80076f2:	461c      	mov	r4, r3
 80076f4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80076f8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a5a      	ldr	r2, [pc, #360]	@ (8007868 <ETS+0x2208>)
 8007700:	443a      	add	r2, r7
 8007702:	6811      	ldr	r1, [r2, #0]
 8007704:	4618      	mov	r0, r3
 8007706:	f7f9 fbed 	bl	8000ee4 <__aeabi_fmul>
 800770a:	4603      	mov	r3, r0
 800770c:	4619      	mov	r1, r3
 800770e:	4620      	mov	r0, r4
 8007710:	f7f9 fae0 	bl	8000cd4 <__addsf3>
 8007714:	4603      	mov	r3, r0
 8007716:	461c      	mov	r4, r3
 8007718:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800771c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8007726:	4618      	mov	r0, r3
 8007728:	f7f9 fbdc 	bl	8000ee4 <__aeabi_fmul>
 800772c:	4603      	mov	r3, r0
 800772e:	4a4e      	ldr	r2, [pc, #312]	@ (8007868 <ETS+0x2208>)
 8007730:	443a      	add	r2, r7
 8007732:	6811      	ldr	r1, [r2, #0]
 8007734:	4618      	mov	r0, r3
 8007736:	f7f9 fbd5 	bl	8000ee4 <__aeabi_fmul>
 800773a:	4603      	mov	r3, r0
 800773c:	461a      	mov	r2, r3
 800773e:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8007742:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	4619      	mov	r1, r3
 800774a:	4610      	mov	r0, r2
 800774c:	f7f9 fbca 	bl	8000ee4 <__aeabi_fmul>
 8007750:	4603      	mov	r3, r0
 8007752:	4619      	mov	r1, r3
 8007754:	4620      	mov	r0, r4
 8007756:	f7f9 fabb 	bl	8000cd0 <__aeabi_fsub>
 800775a:	4603      	mov	r3, r0
 800775c:	461c      	mov	r4, r3
 800775e:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8007762:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 800776c:	4618      	mov	r0, r3
 800776e:	f7f9 fbb9 	bl	8000ee4 <__aeabi_fmul>
 8007772:	4603      	mov	r3, r0
 8007774:	4a3f      	ldr	r2, [pc, #252]	@ (8007874 <ETS+0x2214>)
 8007776:	443a      	add	r2, r7
 8007778:	6811      	ldr	r1, [r2, #0]
 800777a:	4618      	mov	r0, r3
 800777c:	f7f9 fbb2 	bl	8000ee4 <__aeabi_fmul>
 8007780:	4603      	mov	r3, r0
 8007782:	4619      	mov	r1, r3
 8007784:	4620      	mov	r0, r4
 8007786:	f7f9 faa5 	bl	8000cd4 <__addsf3>
 800778a:	4603      	mov	r3, r0
 800778c:	4a3b      	ldr	r2, [pc, #236]	@ (800787c <ETS+0x221c>)
 800778e:	443a      	add	r2, r7
 8007790:	6013      	str	r3, [r2, #0]
    n4 = 4*X[4] - X3_2;
 8007792:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8007796:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7f9 fb9f 	bl	8000ee4 <__aeabi_fmul>
 80077a6:	4603      	mov	r3, r0
 80077a8:	4a2f      	ldr	r2, [pc, #188]	@ (8007868 <ETS+0x2208>)
 80077aa:	443a      	add	r2, r7
 80077ac:	6811      	ldr	r1, [r2, #0]
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7f9 fa8e 	bl	8000cd0 <__aeabi_fsub>
 80077b4:	4603      	mov	r3, r0
 80077b6:	4a32      	ldr	r2, [pc, #200]	@ (8007880 <ETS+0x2220>)
 80077b8:	443a      	add	r2, r7
 80077ba:	6013      	str	r3, [r2, #0]
    n5 = 4*X[0]*X[4] - X2_2;
 80077bc:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80077c0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7f9 fb8a 	bl	8000ee4 <__aeabi_fmul>
 80077d0:	4603      	mov	r3, r0
 80077d2:	461a      	mov	r2, r3
 80077d4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80077d8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	4619      	mov	r1, r3
 80077e0:	4610      	mov	r0, r2
 80077e2:	f7f9 fb7f 	bl	8000ee4 <__aeabi_fmul>
 80077e6:	4603      	mov	r3, r0
 80077e8:	4a23      	ldr	r2, [pc, #140]	@ (8007878 <ETS+0x2218>)
 80077ea:	443a      	add	r2, r7
 80077ec:	6811      	ldr	r1, [r2, #0]
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7f9 fa6e 	bl	8000cd0 <__aeabi_fsub>
 80077f4:	4603      	mov	r3, r0
 80077f6:	4a23      	ldr	r2, [pc, #140]	@ (8007884 <ETS+0x2224>)
 80077f8:	443a      	add	r2, r7
 80077fa:	6013      	str	r3, [r2, #0]
    n6 = 4*X[0] - X1_2;
 80077fc:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8007800:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800780a:	4618      	mov	r0, r3
 800780c:	f7f9 fb6a 	bl	8000ee4 <__aeabi_fmul>
 8007810:	4603      	mov	r3, r0
 8007812:	4a17      	ldr	r2, [pc, #92]	@ (8007870 <ETS+0x2210>)
 8007814:	443a      	add	r2, r7
 8007816:	6811      	ldr	r1, [r2, #0]
 8007818:	4618      	mov	r0, r3
 800781a:	f7f9 fa59 	bl	8000cd0 <__aeabi_fsub>
 800781e:	4603      	mov	r3, r0
 8007820:	4a19      	ldr	r2, [pc, #100]	@ (8007888 <ETS+0x2228>)
 8007822:	443a      	add	r2, r7
 8007824:	6013      	str	r3, [r2, #0]

    phi = -atanf((fabsf(X[4])*sqrtf(n1*n5) * (2*X[2] - X[1]*X[3]) * sqrtf((X[4]*n4*n6) / n3)) / (X4_2 * sqrtf(-n2 / X[4]) * sqrtf(n1*n6) * sqrtf(-(n2 * n4) / n3) * sqrtf(-(n4*n5) / (X[4]*n2))));
 8007826:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800782a:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800782e:	691b      	ldr	r3, [r3, #16]
 8007830:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8007834:	4b13      	ldr	r3, [pc, #76]	@ (8007884 <ETS+0x2224>)
 8007836:	443b      	add	r3, r7
 8007838:	6819      	ldr	r1, [r3, #0]
 800783a:	4b14      	ldr	r3, [pc, #80]	@ (800788c <ETS+0x222c>)
 800783c:	443b      	add	r3, r7
 800783e:	6818      	ldr	r0, [r3, #0]
 8007840:	f7f9 fb50 	bl	8000ee4 <__aeabi_fmul>
 8007844:	4603      	mov	r3, r0
 8007846:	4618      	mov	r0, r3
 8007848:	f00b ff32 	bl	80136b0 <sqrtf>
 800784c:	4603      	mov	r3, r0
 800784e:	4619      	mov	r1, r3
 8007850:	4620      	mov	r0, r4
 8007852:	f7f9 fb47 	bl	8000ee4 <__aeabi_fmul>
 8007856:	4603      	mov	r3, r0
 8007858:	461c      	mov	r4, r3
 800785a:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800785e:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	4619      	mov	r1, r3
 8007866:	e013      	b.n	8007890 <ETS+0x2230>
 8007868:	00014cf0 	.word	0x00014cf0
 800786c:	00014d30 	.word	0x00014d30
 8007870:	00014cf8 	.word	0x00014cf8
 8007874:	00014cec 	.word	0x00014cec
 8007878:	00014cf4 	.word	0x00014cf4
 800787c:	00014d2c 	.word	0x00014d2c
 8007880:	00014d28 	.word	0x00014d28
 8007884:	00014d24 	.word	0x00014d24
 8007888:	00014d20 	.word	0x00014d20
 800788c:	00014d34 	.word	0x00014d34
 8007890:	4618      	mov	r0, r3
 8007892:	f7f9 fa1f 	bl	8000cd4 <__addsf3>
 8007896:	4603      	mov	r3, r0
 8007898:	461d      	mov	r5, r3
 800789a:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800789e:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80078a2:	685a      	ldr	r2, [r3, #4]
 80078a4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80078a8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	4619      	mov	r1, r3
 80078b0:	4610      	mov	r0, r2
 80078b2:	f7f9 fb17 	bl	8000ee4 <__aeabi_fmul>
 80078b6:	4603      	mov	r3, r0
 80078b8:	4619      	mov	r1, r3
 80078ba:	4628      	mov	r0, r5
 80078bc:	f7f9 fa08 	bl	8000cd0 <__aeabi_fsub>
 80078c0:	4603      	mov	r3, r0
 80078c2:	4619      	mov	r1, r3
 80078c4:	4620      	mov	r0, r4
 80078c6:	f7f9 fb0d 	bl	8000ee4 <__aeabi_fmul>
 80078ca:	4603      	mov	r3, r0
 80078cc:	461c      	mov	r4, r3
 80078ce:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80078d2:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	4a7d      	ldr	r2, [pc, #500]	@ (8007ad0 <ETS+0x2470>)
 80078da:	443a      	add	r2, r7
 80078dc:	6811      	ldr	r1, [r2, #0]
 80078de:	4618      	mov	r0, r3
 80078e0:	f7f9 fb00 	bl	8000ee4 <__aeabi_fmul>
 80078e4:	4603      	mov	r3, r0
 80078e6:	4a7b      	ldr	r2, [pc, #492]	@ (8007ad4 <ETS+0x2474>)
 80078e8:	443a      	add	r2, r7
 80078ea:	6811      	ldr	r1, [r2, #0]
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7f9 faf9 	bl	8000ee4 <__aeabi_fmul>
 80078f2:	4603      	mov	r3, r0
 80078f4:	4a78      	ldr	r2, [pc, #480]	@ (8007ad8 <ETS+0x2478>)
 80078f6:	443a      	add	r2, r7
 80078f8:	6811      	ldr	r1, [r2, #0]
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7f9 fba6 	bl	800104c <__aeabi_fdiv>
 8007900:	4603      	mov	r3, r0
 8007902:	4618      	mov	r0, r3
 8007904:	f00b fed4 	bl	80136b0 <sqrtf>
 8007908:	4603      	mov	r3, r0
 800790a:	4619      	mov	r1, r3
 800790c:	4620      	mov	r0, r4
 800790e:	f7f9 fae9 	bl	8000ee4 <__aeabi_fmul>
 8007912:	4603      	mov	r3, r0
 8007914:	461d      	mov	r5, r3
 8007916:	4b71      	ldr	r3, [pc, #452]	@ (8007adc <ETS+0x247c>)
 8007918:	443b      	add	r3, r7
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8007920:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8007924:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	4619      	mov	r1, r3
 800792c:	4610      	mov	r0, r2
 800792e:	f7f9 fb8d 	bl	800104c <__aeabi_fdiv>
 8007932:	4603      	mov	r3, r0
 8007934:	4618      	mov	r0, r3
 8007936:	f00b febb 	bl	80136b0 <sqrtf>
 800793a:	4603      	mov	r3, r0
 800793c:	4a68      	ldr	r2, [pc, #416]	@ (8007ae0 <ETS+0x2480>)
 800793e:	443a      	add	r2, r7
 8007940:	6811      	ldr	r1, [r2, #0]
 8007942:	4618      	mov	r0, r3
 8007944:	f7f9 face 	bl	8000ee4 <__aeabi_fmul>
 8007948:	4603      	mov	r3, r0
 800794a:	461c      	mov	r4, r3
 800794c:	4b61      	ldr	r3, [pc, #388]	@ (8007ad4 <ETS+0x2474>)
 800794e:	443b      	add	r3, r7
 8007950:	6819      	ldr	r1, [r3, #0]
 8007952:	4b64      	ldr	r3, [pc, #400]	@ (8007ae4 <ETS+0x2484>)
 8007954:	443b      	add	r3, r7
 8007956:	6818      	ldr	r0, [r3, #0]
 8007958:	f7f9 fac4 	bl	8000ee4 <__aeabi_fmul>
 800795c:	4603      	mov	r3, r0
 800795e:	4618      	mov	r0, r3
 8007960:	f00b fea6 	bl	80136b0 <sqrtf>
 8007964:	4603      	mov	r3, r0
 8007966:	4619      	mov	r1, r3
 8007968:	4620      	mov	r0, r4
 800796a:	f7f9 fabb 	bl	8000ee4 <__aeabi_fmul>
 800796e:	4603      	mov	r3, r0
 8007970:	461c      	mov	r4, r3
 8007972:	4b57      	ldr	r3, [pc, #348]	@ (8007ad0 <ETS+0x2470>)
 8007974:	443b      	add	r3, r7
 8007976:	6819      	ldr	r1, [r3, #0]
 8007978:	4b58      	ldr	r3, [pc, #352]	@ (8007adc <ETS+0x247c>)
 800797a:	443b      	add	r3, r7
 800797c:	6818      	ldr	r0, [r3, #0]
 800797e:	f7f9 fab1 	bl	8000ee4 <__aeabi_fmul>
 8007982:	4603      	mov	r3, r0
 8007984:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007988:	4a53      	ldr	r2, [pc, #332]	@ (8007ad8 <ETS+0x2478>)
 800798a:	443a      	add	r2, r7
 800798c:	6811      	ldr	r1, [r2, #0]
 800798e:	4618      	mov	r0, r3
 8007990:	f7f9 fb5c 	bl	800104c <__aeabi_fdiv>
 8007994:	4603      	mov	r3, r0
 8007996:	4618      	mov	r0, r3
 8007998:	f00b fe8a 	bl	80136b0 <sqrtf>
 800799c:	4603      	mov	r3, r0
 800799e:	4619      	mov	r1, r3
 80079a0:	4620      	mov	r0, r4
 80079a2:	f7f9 fa9f 	bl	8000ee4 <__aeabi_fmul>
 80079a6:	4603      	mov	r3, r0
 80079a8:	461e      	mov	r6, r3
 80079aa:	4b4f      	ldr	r3, [pc, #316]	@ (8007ae8 <ETS+0x2488>)
 80079ac:	443b      	add	r3, r7
 80079ae:	6819      	ldr	r1, [r3, #0]
 80079b0:	4b47      	ldr	r3, [pc, #284]	@ (8007ad0 <ETS+0x2470>)
 80079b2:	443b      	add	r3, r7
 80079b4:	6818      	ldr	r0, [r3, #0]
 80079b6:	f7f9 fa95 	bl	8000ee4 <__aeabi_fmul>
 80079ba:	4603      	mov	r3, r0
 80079bc:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 80079c0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80079c4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	4a44      	ldr	r2, [pc, #272]	@ (8007adc <ETS+0x247c>)
 80079cc:	443a      	add	r2, r7
 80079ce:	6811      	ldr	r1, [r2, #0]
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7f9 fa87 	bl	8000ee4 <__aeabi_fmul>
 80079d6:	4603      	mov	r3, r0
 80079d8:	4619      	mov	r1, r3
 80079da:	4620      	mov	r0, r4
 80079dc:	f7f9 fb36 	bl	800104c <__aeabi_fdiv>
 80079e0:	4603      	mov	r3, r0
 80079e2:	4618      	mov	r0, r3
 80079e4:	f00b fe64 	bl	80136b0 <sqrtf>
 80079e8:	4603      	mov	r3, r0
 80079ea:	4619      	mov	r1, r3
 80079ec:	4630      	mov	r0, r6
 80079ee:	f7f9 fa79 	bl	8000ee4 <__aeabi_fmul>
 80079f2:	4603      	mov	r3, r0
 80079f4:	4619      	mov	r1, r3
 80079f6:	4628      	mov	r0, r5
 80079f8:	f7f9 fb28 	bl	800104c <__aeabi_fdiv>
 80079fc:	4603      	mov	r3, r0
 80079fe:	4618      	mov	r0, r3
 8007a00:	f00b fe70 	bl	80136e4 <atanf>
 8007a04:	4603      	mov	r3, r0
 8007a06:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007a0a:	4a38      	ldr	r2, [pc, #224]	@ (8007aec <ETS+0x248c>)
 8007a0c:	443a      	add	r2, r7
 8007a0e:	6013      	str	r3, [r2, #0]

    p[0] = sx;
 8007a10:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8007a14:	f6a3 5368 	subw	r3, r3, #3432	@ 0xd68
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a35      	ldr	r2, [pc, #212]	@ (8007af0 <ETS+0x2490>)
 8007a1c:	443a      	add	r2, r7
 8007a1e:	6812      	ldr	r2, [r2, #0]
 8007a20:	601a      	str	r2, [r3, #0]
    p[1] = sy;
 8007a22:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8007a26:	f6a3 5368 	subw	r3, r3, #3432	@ 0xd68
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	3304      	adds	r3, #4
 8007a2e:	4a31      	ldr	r2, [pc, #196]	@ (8007af4 <ETS+0x2494>)
 8007a30:	443a      	add	r2, r7
 8007a32:	6812      	ldr	r2, [r2, #0]
 8007a34:	601a      	str	r2, [r3, #0]
    p[2] = sz;
 8007a36:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8007a3a:	f6a3 5368 	subw	r3, r3, #3432	@ 0xd68
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	3308      	adds	r3, #8
 8007a42:	4a2d      	ldr	r2, [pc, #180]	@ (8007af8 <ETS+0x2498>)
 8007a44:	443a      	add	r2, r7
 8007a46:	6812      	ldr	r2, [r2, #0]
 8007a48:	601a      	str	r2, [r3, #0]
    p[3] = bx;
 8007a4a:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8007a4e:	f6a3 5368 	subw	r3, r3, #3432	@ 0xd68
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	330c      	adds	r3, #12
 8007a56:	4a29      	ldr	r2, [pc, #164]	@ (8007afc <ETS+0x249c>)
 8007a58:	443a      	add	r2, r7
 8007a5a:	6812      	ldr	r2, [r2, #0]
 8007a5c:	601a      	str	r2, [r3, #0]
    p[4] = by;
 8007a5e:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8007a62:	f6a3 5368 	subw	r3, r3, #3432	@ 0xd68
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	3310      	adds	r3, #16
 8007a6a:	4a25      	ldr	r2, [pc, #148]	@ (8007b00 <ETS+0x24a0>)
 8007a6c:	443a      	add	r2, r7
 8007a6e:	6812      	ldr	r2, [r2, #0]
 8007a70:	601a      	str	r2, [r3, #0]
    p[5] = bz;
 8007a72:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8007a76:	f6a3 5368 	subw	r3, r3, #3432	@ 0xd68
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	3314      	adds	r3, #20
 8007a7e:	4a21      	ldr	r2, [pc, #132]	@ (8007b04 <ETS+0x24a4>)
 8007a80:	443a      	add	r2, r7
 8007a82:	6812      	ldr	r2, [r2, #0]
 8007a84:	601a      	str	r2, [r3, #0]
    p[6] = rho;
 8007a86:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8007a8a:	f6a3 5368 	subw	r3, r3, #3432	@ 0xd68
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	3318      	adds	r3, #24
 8007a92:	4a1d      	ldr	r2, [pc, #116]	@ (8007b08 <ETS+0x24a8>)
 8007a94:	443a      	add	r2, r7
 8007a96:	6812      	ldr	r2, [r2, #0]
 8007a98:	601a      	str	r2, [r3, #0]
    p[7] = phi;
 8007a9a:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8007a9e:	f6a3 5368 	subw	r3, r3, #3432	@ 0xd68
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	331c      	adds	r3, #28
 8007aa6:	4a11      	ldr	r2, [pc, #68]	@ (8007aec <ETS+0x248c>)
 8007aa8:	443a      	add	r2, r7
 8007aaa:	6812      	ldr	r2, [r2, #0]
 8007aac:	601a      	str	r2, [r3, #0]
    p[8] = lambida;
 8007aae:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8007ab2:	f6a3 5368 	subw	r3, r3, #3432	@ 0xd68
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	3320      	adds	r3, #32
 8007aba:	4a14      	ldr	r2, [pc, #80]	@ (8007b0c <ETS+0x24ac>)
 8007abc:	443a      	add	r2, r7
 8007abe:	6812      	ldr	r2, [r2, #0]
 8007ac0:	601a      	str	r2, [r3, #0]
}
 8007ac2:	bf00      	nop
 8007ac4:	f507 37a6 	add.w	r7, r7, #84992	@ 0x14c00
 8007ac8:	f507 77b6 	add.w	r7, r7, #364	@ 0x16c
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ad0:	00014d28 	.word	0x00014d28
 8007ad4:	00014d20 	.word	0x00014d20
 8007ad8:	00014d2c 	.word	0x00014d2c
 8007adc:	00014d30 	.word	0x00014d30
 8007ae0:	00014cec 	.word	0x00014cec
 8007ae4:	00014d34 	.word	0x00014d34
 8007ae8:	00014d24 	.word	0x00014d24
 8007aec:	00014d00 	.word	0x00014d00
 8007af0:	00014d10 	.word	0x00014d10
 8007af4:	00014d0c 	.word	0x00014d0c
 8007af8:	00014d08 	.word	0x00014d08
 8007afc:	00014d1c 	.word	0x00014d1c
 8007b00:	00014d18 	.word	0x00014d18
 8007b04:	00014d14 	.word	0x00014d14
 8007b08:	00014d04 	.word	0x00014d04
 8007b0c:	00014cfc 	.word	0x00014cfc

08007b10 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b08c      	sub	sp, #48	@ 0x30
 8007b14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b16:	f107 031c 	add.w	r3, r7, #28
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	601a      	str	r2, [r3, #0]
 8007b1e:	605a      	str	r2, [r3, #4]
 8007b20:	609a      	str	r2, [r3, #8]
 8007b22:	60da      	str	r2, [r3, #12]
 8007b24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b26:	4b8f      	ldr	r3, [pc, #572]	@ (8007d64 <MX_GPIO_Init+0x254>)
 8007b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b2a:	4a8e      	ldr	r2, [pc, #568]	@ (8007d64 <MX_GPIO_Init+0x254>)
 8007b2c:	f043 0304 	orr.w	r3, r3, #4
 8007b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8007b32:	4b8c      	ldr	r3, [pc, #560]	@ (8007d64 <MX_GPIO_Init+0x254>)
 8007b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b36:	f003 0304 	and.w	r3, r3, #4
 8007b3a:	61bb      	str	r3, [r7, #24]
 8007b3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007b3e:	4b89      	ldr	r3, [pc, #548]	@ (8007d64 <MX_GPIO_Init+0x254>)
 8007b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b42:	4a88      	ldr	r2, [pc, #544]	@ (8007d64 <MX_GPIO_Init+0x254>)
 8007b44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8007b4a:	4b86      	ldr	r3, [pc, #536]	@ (8007d64 <MX_GPIO_Init+0x254>)
 8007b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b52:	617b      	str	r3, [r7, #20]
 8007b54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b56:	4b83      	ldr	r3, [pc, #524]	@ (8007d64 <MX_GPIO_Init+0x254>)
 8007b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b5a:	4a82      	ldr	r2, [pc, #520]	@ (8007d64 <MX_GPIO_Init+0x254>)
 8007b5c:	f043 0301 	orr.w	r3, r3, #1
 8007b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8007b62:	4b80      	ldr	r3, [pc, #512]	@ (8007d64 <MX_GPIO_Init+0x254>)
 8007b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b66:	f003 0301 	and.w	r3, r3, #1
 8007b6a:	613b      	str	r3, [r7, #16]
 8007b6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b6e:	4b7d      	ldr	r3, [pc, #500]	@ (8007d64 <MX_GPIO_Init+0x254>)
 8007b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b72:	4a7c      	ldr	r2, [pc, #496]	@ (8007d64 <MX_GPIO_Init+0x254>)
 8007b74:	f043 0302 	orr.w	r3, r3, #2
 8007b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8007b7a:	4b7a      	ldr	r3, [pc, #488]	@ (8007d64 <MX_GPIO_Init+0x254>)
 8007b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b7e:	f003 0302 	and.w	r3, r3, #2
 8007b82:	60fb      	str	r3, [r7, #12]
 8007b84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007b86:	4b77      	ldr	r3, [pc, #476]	@ (8007d64 <MX_GPIO_Init+0x254>)
 8007b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b8a:	4a76      	ldr	r2, [pc, #472]	@ (8007d64 <MX_GPIO_Init+0x254>)
 8007b8c:	f043 0308 	orr.w	r3, r3, #8
 8007b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8007b92:	4b74      	ldr	r3, [pc, #464]	@ (8007d64 <MX_GPIO_Init+0x254>)
 8007b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b96:	f003 0308 	and.w	r3, r3, #8
 8007b9a:	60bb      	str	r3, [r7, #8]
 8007b9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007b9e:	4b71      	ldr	r3, [pc, #452]	@ (8007d64 <MX_GPIO_Init+0x254>)
 8007ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ba2:	4a70      	ldr	r2, [pc, #448]	@ (8007d64 <MX_GPIO_Init+0x254>)
 8007ba4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8007baa:	4b6e      	ldr	r3, [pc, #440]	@ (8007d64 <MX_GPIO_Init+0x254>)
 8007bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bb2:	607b      	str	r3, [r7, #4]
 8007bb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SINC_master_GPIO_Port, SINC_master_Pin, GPIO_PIN_RESET);
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	2108      	movs	r1, #8
 8007bba:	486b      	ldr	r0, [pc, #428]	@ (8007d68 <MX_GPIO_Init+0x258>)
 8007bbc:	f001 fafc 	bl	80091b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f244 0181 	movw	r1, #16513	@ 0x4081
 8007bc6:	4869      	ldr	r0, [pc, #420]	@ (8007d6c <MX_GPIO_Init+0x25c>)
 8007bc8:	f001 faf6 	bl	80091b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8007bcc:	2200      	movs	r2, #0
 8007bce:	2140      	movs	r1, #64	@ 0x40
 8007bd0:	4867      	ldr	r0, [pc, #412]	@ (8007d70 <MX_GPIO_Init+0x260>)
 8007bd2:	f001 faf1 	bl	80091b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8007bd6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007bdc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8007be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007be2:	2300      	movs	r3, #0
 8007be4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8007be6:	f107 031c 	add.w	r3, r7, #28
 8007bea:	4619      	mov	r1, r3
 8007bec:	4861      	ldr	r0, [pc, #388]	@ (8007d74 <MX_GPIO_Init+0x264>)
 8007bee:	f001 f939 	bl	8008e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SINC_slave_Pin;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SINC_slave_GPIO_Port, &GPIO_InitStruct);
 8007bfe:	f107 031c 	add.w	r3, r7, #28
 8007c02:	4619      	mov	r1, r3
 8007c04:	485b      	ldr	r0, [pc, #364]	@ (8007d74 <MX_GPIO_Init+0x264>)
 8007c06:	f001 f92d 	bl	8008e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin;
 8007c0a:	2302      	movs	r3, #2
 8007c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c0e:	2302      	movs	r3, #2
 8007c10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c12:	2300      	movs	r3, #0
 8007c14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c16:	2303      	movs	r3, #3
 8007c18:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007c1a:	230b      	movs	r3, #11
 8007c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_MDC_GPIO_Port, &GPIO_InitStruct);
 8007c1e:	f107 031c 	add.w	r3, r7, #28
 8007c22:	4619      	mov	r1, r3
 8007c24:	4853      	ldr	r0, [pc, #332]	@ (8007d74 <MX_GPIO_Init+0x264>)
 8007c26:	f001 f91d 	bl	8008e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8007c2a:	2306      	movs	r3, #6
 8007c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c2e:	2302      	movs	r3, #2
 8007c30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c32:	2300      	movs	r3, #0
 8007c34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c36:	2303      	movs	r3, #3
 8007c38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007c3a:	230b      	movs	r3, #11
 8007c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c3e:	f107 031c 	add.w	r3, r7, #28
 8007c42:	4619      	mov	r1, r3
 8007c44:	4848      	ldr	r0, [pc, #288]	@ (8007d68 <MX_GPIO_Init+0x258>)
 8007c46:	f001 f90d 	bl	8008e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SINC_master_Pin;
 8007c4a:	2308      	movs	r3, #8
 8007c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c52:	2300      	movs	r3, #0
 8007c54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c56:	2303      	movs	r3, #3
 8007c58:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SINC_master_GPIO_Port, &GPIO_InitStruct);
 8007c5a:	f107 031c 	add.w	r3, r7, #28
 8007c5e:	4619      	mov	r1, r3
 8007c60:	4841      	ldr	r0, [pc, #260]	@ (8007d68 <MX_GPIO_Init+0x258>)
 8007c62:	f001 f8ff 	bl	8008e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8007c66:	f244 0381 	movw	r3, #16513	@ 0x4081
 8007c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c70:	2300      	movs	r3, #0
 8007c72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c74:	2300      	movs	r3, #0
 8007c76:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c78:	f107 031c 	add.w	r3, r7, #28
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	483b      	ldr	r0, [pc, #236]	@ (8007d6c <MX_GPIO_Init+0x25c>)
 8007c80:	f001 f8f0 	bl	8008e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8007c84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c8a:	2302      	movs	r3, #2
 8007c8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c92:	2303      	movs	r3, #3
 8007c94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007c96:	230b      	movs	r3, #11
 8007c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8007c9a:	f107 031c 	add.w	r3, r7, #28
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	4832      	ldr	r0, [pc, #200]	@ (8007d6c <MX_GPIO_Init+0x25c>)
 8007ca2:	f001 f8df 	bl	8008e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8007ca6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cac:	2302      	movs	r3, #2
 8007cae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007cb8:	2307      	movs	r3, #7
 8007cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007cbc:	f107 031c 	add.w	r3, r7, #28
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	482d      	ldr	r0, [pc, #180]	@ (8007d78 <MX_GPIO_Init+0x268>)
 8007cc4:	f001 f8ce 	bl	8008e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8007cc8:	2340      	movs	r3, #64	@ 0x40
 8007cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8007cd8:	f107 031c 	add.w	r3, r7, #28
 8007cdc:	4619      	mov	r1, r3
 8007cde:	4824      	ldr	r0, [pc, #144]	@ (8007d70 <MX_GPIO_Init+0x260>)
 8007ce0:	f001 f8c0 	bl	8008e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8007ce4:	2380      	movs	r3, #128	@ 0x80
 8007ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cec:	2300      	movs	r3, #0
 8007cee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8007cf0:	f107 031c 	add.w	r3, r7, #28
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	481e      	ldr	r0, [pc, #120]	@ (8007d70 <MX_GPIO_Init+0x260>)
 8007cf8:	f001 f8b4 	bl	8008e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8007cfc:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8007d00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d02:	2302      	movs	r3, #2
 8007d04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d06:	2300      	movs	r3, #0
 8007d08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007d0e:	230a      	movs	r3, #10
 8007d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d12:	f107 031c 	add.w	r3, r7, #28
 8007d16:	4619      	mov	r1, r3
 8007d18:	4813      	ldr	r0, [pc, #76]	@ (8007d68 <MX_GPIO_Init+0x258>)
 8007d1a:	f001 f8a3 	bl	8008e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8007d1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d24:	2300      	movs	r3, #0
 8007d26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8007d2c:	f107 031c 	add.w	r3, r7, #28
 8007d30:	4619      	mov	r1, r3
 8007d32:	480d      	ldr	r0, [pc, #52]	@ (8007d68 <MX_GPIO_Init+0x258>)
 8007d34:	f001 f896 	bl	8008e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8007d38:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8007d3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d3e:	2302      	movs	r3, #2
 8007d40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d42:	2300      	movs	r3, #0
 8007d44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d46:	2303      	movs	r3, #3
 8007d48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007d4a:	230b      	movs	r3, #11
 8007d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007d4e:	f107 031c 	add.w	r3, r7, #28
 8007d52:	4619      	mov	r1, r3
 8007d54:	4806      	ldr	r0, [pc, #24]	@ (8007d70 <MX_GPIO_Init+0x260>)
 8007d56:	f001 f885 	bl	8008e64 <HAL_GPIO_Init>

}
 8007d5a:	bf00      	nop
 8007d5c:	3730      	adds	r7, #48	@ 0x30
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	40023800 	.word	0x40023800
 8007d68:	40020000 	.word	0x40020000
 8007d6c:	40020400 	.word	0x40020400
 8007d70:	40021800 	.word	0x40021800
 8007d74:	40020800 	.word	0x40020800
 8007d78:	40020c00 	.word	0x40020c00

08007d7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007d7c:	b5b0      	push	{r4, r5, r7, lr}
 8007d7e:	f5ad 4dfa 	sub.w	sp, sp, #32000	@ 0x7d00
 8007d82:	b098      	sub	sp, #96	@ 0x60
 8007d84:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
  char file_read[25] = {0};
 8007d86:	2300      	movs	r3, #0
 8007d88:	f647 5218 	movw	r2, #32024	@ 0x7d18
 8007d8c:	443a      	add	r2, r7
 8007d8e:	6013      	str	r3, [r2, #0]
 8007d90:	f647 531c 	movw	r3, #32028	@ 0x7d1c
 8007d94:	443b      	add	r3, r7
 8007d96:	2200      	movs	r2, #0
 8007d98:	601a      	str	r2, [r3, #0]
 8007d9a:	605a      	str	r2, [r3, #4]
 8007d9c:	609a      	str	r2, [r3, #8]
 8007d9e:	60da      	str	r2, [r3, #12]
 8007da0:	611a      	str	r2, [r3, #16]
 8007da2:	751a      	strb	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007da4:	f000 fefd 	bl	8008ba2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007da8:	f000 fa92 	bl	80082d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007dac:	f7ff feb0 	bl	8007b10 <MX_GPIO_Init>
  MX_SPI3_Init();
 8007db0:	f000 fcdc 	bl	800876c <MX_SPI3_Init>
  MX_FATFS_Init();
 8007db4:	f002 fce6 	bl	800a784 <MX_FATFS_Init>
  MX_SPI1_Init();
 8007db8:	f000 fc9a 	bl	80086f0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  uint32_t start_time = 0;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	f647 523c 	movw	r2, #32060	@ 0x7d3c
 8007dc2:	443a      	add	r2, r7
 8007dc4:	6013      	str	r3, [r2, #0]
  uint16_t file_cont = 1;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	f647 5256 	movw	r2, #32086	@ 0x7d56
 8007dcc:	443a      	add	r2, r7
 8007dce:	8013      	strh	r3, [r2, #0]
  //union calib_t param1[9], param2[9];
  float p1[9];
  //uint8_t time1[4], time2[4];
  float NLLS_time = 0, ETS_time = 0;
 8007dd0:	f04f 0300 	mov.w	r3, #0
 8007dd4:	f647 5238 	movw	r2, #32056	@ 0x7d38
 8007dd8:	443a      	add	r2, r7
 8007dda:	6013      	str	r3, [r2, #0]
 8007ddc:	f04f 0300 	mov.w	r3, #0
 8007de0:	f647 5234 	movw	r2, #32052	@ 0x7d34
 8007de4:	443a      	add	r2, r7
 8007de6:	6013      	str	r3, [r2, #0]

  FATFS fs;
  FRESULT res;

  // Monta o sistema de arquivos na unidade lógica "0:"
  res = f_mount(&fs, "0:", 1);
 8007de8:	f647 23bc 	movw	r3, #31420	@ 0x7abc
 8007dec:	443b      	add	r3, r7
 8007dee:	2201      	movs	r2, #1
 8007df0:	497b      	ldr	r1, [pc, #492]	@ (8007fe0 <main+0x264>)
 8007df2:	4618      	mov	r0, r3
 8007df4:	f005 ffcc 	bl	800dd90 <f_mount>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	f647 5233 	movw	r2, #32051	@ 0x7d33
 8007dfe:	443a      	add	r2, r7
 8007e00:	7013      	strb	r3, [r2, #0]
  if (res != FR_OK) {
 8007e02:	f647 5333 	movw	r3, #32051	@ 0x7d33
 8007e06:	443b      	add	r3, r7
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d001      	beq.n	8007e12 <main+0x96>
      //printf("Falha ao montar o sistema de arquivos: %d\n", res);
      Error_Handler(); // ou retorne um erro
 8007e0e:	f000 facb 	bl	80083a8 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(file_cont >= 3001)
 8007e12:	f647 5356 	movw	r3, #32086	@ 0x7d56
 8007e16:	443b      	add	r3, r7
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d901      	bls.n	8007e26 <main+0xaa>
	{
		return 1;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e238      	b.n	8008298 <main+0x51c>
	}

	sprintf(file_read, "0:/DATA1/run%d.txt", file_cont);  // Prefixo de volume (0:) é comum no FatFs
 8007e26:	f647 5356 	movw	r3, #32086	@ 0x7d56
 8007e2a:	443b      	add	r3, r7
 8007e2c:	881a      	ldrh	r2, [r3, #0]
 8007e2e:	f647 5318 	movw	r3, #32024	@ 0x7d18
 8007e32:	443b      	add	r3, r7
 8007e34:	496b      	ldr	r1, [pc, #428]	@ (8007fe4 <main+0x268>)
 8007e36:	4618      	mov	r0, r3
 8007e38:	f008 fdbc 	bl	80109b4 <siprintf>

	FIL fil;
	FRESULT res;

	res = f_open(&fil, file_read, FA_READ);
 8007e3c:	f647 5118 	movw	r1, #32024	@ 0x7d18
 8007e40:	4439      	add	r1, r7
 8007e42:	4b69      	ldr	r3, [pc, #420]	@ (8007fe8 <main+0x26c>)
 8007e44:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 8007e48:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 8007e4c:	443b      	add	r3, r7
 8007e4e:	2201      	movs	r2, #1
 8007e50:	4618      	mov	r0, r3
 8007e52:	f005 ffe3 	bl	800de1c <f_open>
 8007e56:	4603      	mov	r3, r0
 8007e58:	f647 5232 	movw	r2, #32050	@ 0x7d32
 8007e5c:	443a      	add	r2, r7
 8007e5e:	7013      	strb	r3, [r2, #0]
	if (res != FR_OK)
 8007e60:	f647 5332 	movw	r3, #32050	@ 0x7d32
 8007e64:	443b      	add	r3, r7
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d001      	beq.n	8007e70 <main+0xf4>
	{
		return 1;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e213      	b.n	8008298 <main+0x51c>
	}

	char line[30670];
	UINT br; // Bytes lidos

	float *linhas[] = {mx, my, mz};  // Vetor de ponteiros para facilitar o acesso
 8007e70:	f647 5358 	movw	r3, #32088	@ 0x7d58
 8007e74:	443b      	add	r3, r7
 8007e76:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8007e7a:	4a5c      	ldr	r2, [pc, #368]	@ (8007fec <main+0x270>)
 8007e7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8007e7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	for (int i = 0; i < 3; i++)
 8007e82:	2300      	movs	r3, #0
 8007e84:	f647 5250 	movw	r2, #32080	@ 0x7d50
 8007e88:	443a      	add	r2, r7
 8007e8a:	6013      	str	r3, [r2, #0]
 8007e8c:	e0bb      	b.n	8008006 <main+0x28a>
	{
		// lê uma linha completa (até '\n' ou fim do buffer)
		int line_pos = 0;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	f647 524c 	movw	r2, #32076	@ 0x7d4c
 8007e94:	443a      	add	r2, r7
 8007e96:	6013      	str	r3, [r2, #0]
		char ch;
		do {
			res = f_read(&fil, &ch, 1, &br);
 8007e98:	f647 23b8 	movw	r3, #31416	@ 0x7ab8
 8007e9c:	443b      	add	r3, r7
 8007e9e:	f647 21a7 	movw	r1, #31399	@ 0x7aa7
 8007ea2:	4439      	add	r1, r7
 8007ea4:	4850      	ldr	r0, [pc, #320]	@ (8007fe8 <main+0x26c>)
 8007ea6:	f647 5258 	movw	r2, #32088	@ 0x7d58
 8007eaa:	4402      	add	r2, r0
 8007eac:	19d0      	adds	r0, r2, r7
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f006 fa71 	bl	800e396 <f_read>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	f647 5232 	movw	r2, #32050	@ 0x7d32
 8007eba:	443a      	add	r2, r7
 8007ebc:	7013      	strb	r3, [r2, #0]
			if (res != FR_OK || br == 0) {
 8007ebe:	f647 5332 	movw	r3, #32050	@ 0x7d32
 8007ec2:	443b      	add	r3, r7
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d107      	bne.n	8007eda <main+0x15e>
 8007eca:	f647 5358 	movw	r3, #32088	@ 0x7d58
 8007ece:	443b      	add	r3, r7
 8007ed0:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d101      	bne.n	8007ede <main+0x162>
				return 1;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e1dc      	b.n	8008298 <main+0x51c>
			}
			line[line_pos++] = ch;
 8007ede:	f647 534c 	movw	r3, #32076	@ 0x7d4c
 8007ee2:	443b      	add	r3, r7
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	1c5a      	adds	r2, r3, #1
 8007ee8:	f647 514c 	movw	r1, #32076	@ 0x7d4c
 8007eec:	4439      	add	r1, r7
 8007eee:	600a      	str	r2, [r1, #0]
 8007ef0:	f647 5258 	movw	r2, #32088	@ 0x7d58
 8007ef4:	443a      	add	r2, r7
 8007ef6:	f2a2 22b1 	subw	r2, r2, #689	@ 0x2b1
 8007efa:	7811      	ldrb	r1, [r2, #0]
 8007efc:	f607 5258 	addw	r2, r7, #3416	@ 0xd58
 8007f00:	f5a2 6228 	sub.w	r2, r2, #2688	@ 0xa80
 8007f04:	54d1      	strb	r1, [r2, r3]
		} while (ch != '\n' && line_pos < sizeof(line)-1);
 8007f06:	f647 5358 	movw	r3, #32088	@ 0x7d58
 8007f0a:	443b      	add	r3, r7
 8007f0c:	f2a3 23b1 	subw	r3, r3, #689	@ 0x2b1
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	2b0a      	cmp	r3, #10
 8007f14:	d007      	beq.n	8007f26 <main+0x1aa>
 8007f16:	f647 534c 	movw	r3, #32076	@ 0x7d4c
 8007f1a:	443b      	add	r3, r7
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f247 72cc 	movw	r2, #30668	@ 0x77cc
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d9b8      	bls.n	8007e98 <main+0x11c>
		line[line_pos] = '\0';
 8007f26:	f607 5358 	addw	r3, r7, #3416	@ 0xd58
 8007f2a:	f5a3 6228 	sub.w	r2, r3, #2688	@ 0xa80
 8007f2e:	f647 534c 	movw	r3, #32076	@ 0x7d4c
 8007f32:	443b      	add	r3, r7
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4413      	add	r3, r2
 8007f38:	2200      	movs	r2, #0
 8007f3a:	701a      	strb	r2, [r3, #0]

		char *token = strtok(line, ",");
 8007f3c:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8007f40:	492b      	ldr	r1, [pc, #172]	@ (8007ff0 <main+0x274>)
 8007f42:	4618      	mov	r0, r3
 8007f44:	f008 fdb4 	bl	8010ab0 <strtok>
 8007f48:	f647 5348 	movw	r3, #32072	@ 0x7d48
 8007f4c:	443b      	add	r3, r7
 8007f4e:	6018      	str	r0, [r3, #0]
		int j = 0;
 8007f50:	2300      	movs	r3, #0
 8007f52:	f647 5244 	movw	r2, #32068	@ 0x7d44
 8007f56:	443a      	add	r2, r7
 8007f58:	6013      	str	r3, [r2, #0]

		while (token != NULL && j < tam)
 8007f5a:	e02a      	b.n	8007fb2 <main+0x236>
		{
			linhas[i][j] = strtof(token, NULL);
 8007f5c:	f647 5358 	movw	r3, #32088	@ 0x7d58
 8007f60:	443b      	add	r3, r7
 8007f62:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8007f66:	f647 5250 	movw	r2, #32080	@ 0x7d50
 8007f6a:	443a      	add	r2, r7
 8007f6c:	6812      	ldr	r2, [r2, #0]
 8007f6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007f72:	f647 5344 	movw	r3, #32068	@ 0x7d44
 8007f76:	443b      	add	r3, r7
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	18d4      	adds	r4, r2, r3
 8007f7e:	2100      	movs	r1, #0
 8007f80:	f647 5348 	movw	r3, #32072	@ 0x7d48
 8007f84:	443b      	add	r3, r7
 8007f86:	6818      	ldr	r0, [r3, #0]
 8007f88:	f007 fd94 	bl	800fab4 <strtof>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	6023      	str	r3, [r4, #0]
			token = strtok(NULL, ",");
 8007f90:	4917      	ldr	r1, [pc, #92]	@ (8007ff0 <main+0x274>)
 8007f92:	2000      	movs	r0, #0
 8007f94:	f008 fd8c 	bl	8010ab0 <strtok>
 8007f98:	f647 5348 	movw	r3, #32072	@ 0x7d48
 8007f9c:	443b      	add	r3, r7
 8007f9e:	6018      	str	r0, [r3, #0]
			j++;
 8007fa0:	f647 5344 	movw	r3, #32068	@ 0x7d44
 8007fa4:	443b      	add	r3, r7
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	3301      	adds	r3, #1
 8007faa:	f647 5244 	movw	r2, #32068	@ 0x7d44
 8007fae:	443a      	add	r2, r7
 8007fb0:	6013      	str	r3, [r2, #0]
		while (token != NULL && j < tam)
 8007fb2:	f647 5348 	movw	r3, #32072	@ 0x7d48
 8007fb6:	443b      	add	r3, r7
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d006      	beq.n	8007fcc <main+0x250>
 8007fbe:	f647 5344 	movw	r3, #32068	@ 0x7d44
 8007fc2:	443b      	add	r3, r7
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8007fca:	dbc7      	blt.n	8007f5c <main+0x1e0>
		}

		if (j != tam)
 8007fcc:	f647 5344 	movw	r3, #32068	@ 0x7d44
 8007fd0:	443b      	add	r3, r7
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8007fd8:	d00c      	beq.n	8007ff4 <main+0x278>
		{
			return 1;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e15c      	b.n	8008298 <main+0x51c>
 8007fde:	bf00      	nop
 8007fe0:	0801461c 	.word	0x0801461c
 8007fe4:	08014620 	.word	0x08014620
 8007fe8:	ffff8328 	.word	0xffff8328
 8007fec:	0801465c 	.word	0x0801465c
 8007ff0:	08014634 	.word	0x08014634
	for (int i = 0; i < 3; i++)
 8007ff4:	f647 5350 	movw	r3, #32080	@ 0x7d50
 8007ff8:	443b      	add	r3, r7
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	f647 5250 	movw	r2, #32080	@ 0x7d50
 8008002:	443a      	add	r2, r7
 8008004:	6013      	str	r3, [r2, #0]
 8008006:	f647 5350 	movw	r3, #32080	@ 0x7d50
 800800a:	443b      	add	r3, r7
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2b02      	cmp	r3, #2
 8008010:	f77f af3d 	ble.w	8007e8e <main+0x112>
		}
	}

	f_close(&fil);
 8008014:	4ba3      	ldr	r3, [pc, #652]	@ (80082a4 <main+0x528>)
 8008016:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 800801a:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 800801e:	443b      	add	r3, r7
 8008020:	4618      	mov	r0, r3
 8008022:	f006 fe04 	bl	800ec2e <f_close>
		mx_[i].flutuante = mx[i];
		my_[i].flutuante = my[i];
		mz_[i].flutuante = mz[i];
	}*/

	start_time = HAL_GetTick();
 8008026:	f000 fe0b 	bl	8008c40 <HAL_GetTick>
 800802a:	f647 533c 	movw	r3, #32060	@ 0x7d3c
 800802e:	443b      	add	r3, r7
 8008030:	6018      	str	r0, [r3, #0]
	ETS(mx, my, mz, p0);
 8008032:	4b9d      	ldr	r3, [pc, #628]	@ (80082a8 <main+0x52c>)
 8008034:	4a9d      	ldr	r2, [pc, #628]	@ (80082ac <main+0x530>)
 8008036:	499e      	ldr	r1, [pc, #632]	@ (80082b0 <main+0x534>)
 8008038:	489e      	ldr	r0, [pc, #632]	@ (80082b4 <main+0x538>)
 800803a:	f7fd fb11 	bl	8005660 <ETS>
	ETS_time = HAL_GetTick() - start_time;
 800803e:	f000 fdff 	bl	8008c40 <HAL_GetTick>
 8008042:	4602      	mov	r2, r0
 8008044:	f647 533c 	movw	r3, #32060	@ 0x7d3c
 8008048:	443b      	add	r3, r7
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	4618      	mov	r0, r3
 8008050:	f7f8 fef0 	bl	8000e34 <__aeabi_ui2f>
 8008054:	4603      	mov	r3, r0
 8008056:	f647 5234 	movw	r2, #32052	@ 0x7d34
 800805a:	443a      	add	r2, r7
 800805c:	6013      	str	r3, [r2, #0]

	start_time = HAL_GetTick();
 800805e:	f000 fdef 	bl	8008c40 <HAL_GetTick>
 8008062:	f647 533c 	movw	r3, #32060	@ 0x7d3c
 8008066:	443b      	add	r3, r7
 8008068:	6018      	str	r0, [r3, #0]
	passos_NLLS = NLLS(mx, my, mz, p1);
 800806a:	f647 43f4 	movw	r3, #31988	@ 0x7cf4
 800806e:	443b      	add	r3, r7
 8008070:	4a8e      	ldr	r2, [pc, #568]	@ (80082ac <main+0x530>)
 8008072:	498f      	ldr	r1, [pc, #572]	@ (80082b0 <main+0x534>)
 8008074:	488f      	ldr	r0, [pc, #572]	@ (80082b4 <main+0x538>)
 8008076:	f7f9 fbef 	bl	8001858 <NLLS>
 800807a:	4603      	mov	r3, r0
 800807c:	461a      	mov	r2, r3
 800807e:	4b8e      	ldr	r3, [pc, #568]	@ (80082b8 <main+0x53c>)
 8008080:	701a      	strb	r2, [r3, #0]
	NLLS_time = HAL_GetTick() - start_time;
 8008082:	f000 fddd 	bl	8008c40 <HAL_GetTick>
 8008086:	4602      	mov	r2, r0
 8008088:	f647 533c 	movw	r3, #32060	@ 0x7d3c
 800808c:	443b      	add	r3, r7
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	4618      	mov	r0, r3
 8008094:	f7f8 fece 	bl	8000e34 <__aeabi_ui2f>
 8008098:	4603      	mov	r3, r0
 800809a:	f647 5238 	movw	r2, #32056	@ 0x7d38
 800809e:	443a      	add	r2, r7
 80080a0:	6013      	str	r3, [r2, #0]





	sprintf(file_read, "0:/RES/run%d.txt", file_cont);
 80080a2:	f647 5356 	movw	r3, #32086	@ 0x7d56
 80080a6:	443b      	add	r3, r7
 80080a8:	881a      	ldrh	r2, [r3, #0]
 80080aa:	f647 5318 	movw	r3, #32024	@ 0x7d18
 80080ae:	443b      	add	r3, r7
 80080b0:	4982      	ldr	r1, [pc, #520]	@ (80082bc <main+0x540>)
 80080b2:	4618      	mov	r0, r3
 80080b4:	f008 fc7e 	bl	80109b4 <siprintf>
	res = f_open(&fil, file_read, FA_WRITE | FA_CREATE_ALWAYS);
 80080b8:	f647 5118 	movw	r1, #32024	@ 0x7d18
 80080bc:	4439      	add	r1, r7
 80080be:	4b79      	ldr	r3, [pc, #484]	@ (80082a4 <main+0x528>)
 80080c0:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 80080c4:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 80080c8:	443b      	add	r3, r7
 80080ca:	220a      	movs	r2, #10
 80080cc:	4618      	mov	r0, r3
 80080ce:	f005 fea5 	bl	800de1c <f_open>
 80080d2:	4603      	mov	r3, r0
 80080d4:	f647 5232 	movw	r2, #32050	@ 0x7d32
 80080d8:	443a      	add	r2, r7
 80080da:	7013      	strb	r3, [r2, #0]
	if (res != FR_OK)
 80080dc:	f647 5332 	movw	r3, #32050	@ 0x7d32
 80080e0:	443b      	add	r3, r7
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d001      	beq.n	80080ec <main+0x370>
	{
		return 1;
 80080e8:	2301      	movs	r3, #1
 80080ea:	e0d5      	b.n	8008298 <main+0x51c>
	}

	char out_line[128];
	UINT bw;

	for (int i = 0; i < 9; i++) {
 80080ec:	2300      	movs	r3, #0
 80080ee:	f647 5240 	movw	r2, #32064	@ 0x7d40
 80080f2:	443a      	add	r2, r7
 80080f4:	6013      	str	r3, [r2, #0]
 80080f6:	e04c      	b.n	8008192 <main+0x416>
		sprintf(out_line, "%f, %f\n", p0[i], p1[i]);
 80080f8:	4a6b      	ldr	r2, [pc, #428]	@ (80082a8 <main+0x52c>)
 80080fa:	f647 5340 	movw	r3, #32064	@ 0x7d40
 80080fe:	443b      	add	r3, r7
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008106:	4618      	mov	r0, r3
 8008108:	f7f8 fa3e 	bl	8000588 <__aeabi_f2d>
 800810c:	4604      	mov	r4, r0
 800810e:	460d      	mov	r5, r1
 8008110:	f647 5340 	movw	r3, #32064	@ 0x7d40
 8008114:	443b      	add	r3, r7
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 800811e:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 8008122:	443b      	add	r3, r7
 8008124:	f853 3c64 	ldr.w	r3, [r3, #-100]
 8008128:	4618      	mov	r0, r3
 800812a:	f7f8 fa2d 	bl	8000588 <__aeabi_f2d>
 800812e:	4602      	mov	r2, r0
 8008130:	460b      	mov	r3, r1
 8008132:	4863      	ldr	r0, [pc, #396]	@ (80082c0 <main+0x544>)
 8008134:	f647 5158 	movw	r1, #32088	@ 0x7d58
 8008138:	4401      	add	r1, r0
 800813a:	19c8      	adds	r0, r1, r7
 800813c:	e9cd 2300 	strd	r2, r3, [sp]
 8008140:	4622      	mov	r2, r4
 8008142:	462b      	mov	r3, r5
 8008144:	495f      	ldr	r1, [pc, #380]	@ (80082c4 <main+0x548>)
 8008146:	f008 fc35 	bl	80109b4 <siprintf>
		f_write(&fil, out_line, strlen(out_line), &bw);
 800814a:	4b5d      	ldr	r3, [pc, #372]	@ (80082c0 <main+0x544>)
 800814c:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 8008150:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 8008154:	443b      	add	r3, r7
 8008156:	4618      	mov	r0, r3
 8008158:	f7f8 f8aa 	bl	80002b0 <strlen>
 800815c:	4602      	mov	r2, r0
 800815e:	f647 23a8 	movw	r3, #31400	@ 0x7aa8
 8008162:	443b      	add	r3, r7
 8008164:	4956      	ldr	r1, [pc, #344]	@ (80082c0 <main+0x544>)
 8008166:	f501 41fa 	add.w	r1, r1, #32000	@ 0x7d00
 800816a:	f101 0158 	add.w	r1, r1, #88	@ 0x58
 800816e:	4439      	add	r1, r7
 8008170:	484c      	ldr	r0, [pc, #304]	@ (80082a4 <main+0x528>)
 8008172:	f500 40fa 	add.w	r0, r0, #32000	@ 0x7d00
 8008176:	f100 0058 	add.w	r0, r0, #88	@ 0x58
 800817a:	4438      	add	r0, r7
 800817c:	f006 fa85 	bl	800e68a <f_write>
	for (int i = 0; i < 9; i++) {
 8008180:	f647 5340 	movw	r3, #32064	@ 0x7d40
 8008184:	443b      	add	r3, r7
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	3301      	adds	r3, #1
 800818a:	f647 5240 	movw	r2, #32064	@ 0x7d40
 800818e:	443a      	add	r2, r7
 8008190:	6013      	str	r3, [r2, #0]
 8008192:	f647 5340 	movw	r3, #32064	@ 0x7d40
 8008196:	443b      	add	r3, r7
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2b08      	cmp	r3, #8
 800819c:	ddac      	ble.n	80080f8 <main+0x37c>
	}

	sprintf(out_line, "%f, %f\n", ETS_time, NLLS_time);
 800819e:	f647 5334 	movw	r3, #32052	@ 0x7d34
 80081a2:	443b      	add	r3, r7
 80081a4:	6818      	ldr	r0, [r3, #0]
 80081a6:	f7f8 f9ef 	bl	8000588 <__aeabi_f2d>
 80081aa:	4604      	mov	r4, r0
 80081ac:	460d      	mov	r5, r1
 80081ae:	f647 5338 	movw	r3, #32056	@ 0x7d38
 80081b2:	443b      	add	r3, r7
 80081b4:	6818      	ldr	r0, [r3, #0]
 80081b6:	f7f8 f9e7 	bl	8000588 <__aeabi_f2d>
 80081ba:	4602      	mov	r2, r0
 80081bc:	460b      	mov	r3, r1
 80081be:	4840      	ldr	r0, [pc, #256]	@ (80082c0 <main+0x544>)
 80081c0:	f647 5158 	movw	r1, #32088	@ 0x7d58
 80081c4:	4401      	add	r1, r0
 80081c6:	19c8      	adds	r0, r1, r7
 80081c8:	e9cd 2300 	strd	r2, r3, [sp]
 80081cc:	4622      	mov	r2, r4
 80081ce:	462b      	mov	r3, r5
 80081d0:	493c      	ldr	r1, [pc, #240]	@ (80082c4 <main+0x548>)
 80081d2:	f008 fbef 	bl	80109b4 <siprintf>
	f_write(&fil, out_line, strlen(out_line), &bw);
 80081d6:	4b3a      	ldr	r3, [pc, #232]	@ (80082c0 <main+0x544>)
 80081d8:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 80081dc:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 80081e0:	443b      	add	r3, r7
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7f8 f864 	bl	80002b0 <strlen>
 80081e8:	4602      	mov	r2, r0
 80081ea:	f647 23a8 	movw	r3, #31400	@ 0x7aa8
 80081ee:	443b      	add	r3, r7
 80081f0:	4933      	ldr	r1, [pc, #204]	@ (80082c0 <main+0x544>)
 80081f2:	f501 41fa 	add.w	r1, r1, #32000	@ 0x7d00
 80081f6:	f101 0158 	add.w	r1, r1, #88	@ 0x58
 80081fa:	4439      	add	r1, r7
 80081fc:	4829      	ldr	r0, [pc, #164]	@ (80082a4 <main+0x528>)
 80081fe:	f500 40fa 	add.w	r0, r0, #32000	@ 0x7d00
 8008202:	f100 0058 	add.w	r0, r0, #88	@ 0x58
 8008206:	4438      	add	r0, r7
 8008208:	f006 fa3f 	bl	800e68a <f_write>

	sprintf(out_line, "0, %u\n", passos_NLLS);
 800820c:	4b2a      	ldr	r3, [pc, #168]	@ (80082b8 <main+0x53c>)
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	461a      	mov	r2, r3
 8008212:	4b2b      	ldr	r3, [pc, #172]	@ (80082c0 <main+0x544>)
 8008214:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 8008218:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 800821c:	443b      	add	r3, r7
 800821e:	492a      	ldr	r1, [pc, #168]	@ (80082c8 <main+0x54c>)
 8008220:	4618      	mov	r0, r3
 8008222:	f008 fbc7 	bl	80109b4 <siprintf>
	f_write(&fil, out_line, strlen(out_line), &bw);
 8008226:	4b26      	ldr	r3, [pc, #152]	@ (80082c0 <main+0x544>)
 8008228:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 800822c:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 8008230:	443b      	add	r3, r7
 8008232:	4618      	mov	r0, r3
 8008234:	f7f8 f83c 	bl	80002b0 <strlen>
 8008238:	4602      	mov	r2, r0
 800823a:	f647 23a8 	movw	r3, #31400	@ 0x7aa8
 800823e:	443b      	add	r3, r7
 8008240:	491f      	ldr	r1, [pc, #124]	@ (80082c0 <main+0x544>)
 8008242:	f501 41fa 	add.w	r1, r1, #32000	@ 0x7d00
 8008246:	f101 0158 	add.w	r1, r1, #88	@ 0x58
 800824a:	4439      	add	r1, r7
 800824c:	4815      	ldr	r0, [pc, #84]	@ (80082a4 <main+0x528>)
 800824e:	f500 40fa 	add.w	r0, r0, #32000	@ 0x7d00
 8008252:	f100 0058 	add.w	r0, r0, #88	@ 0x58
 8008256:	4438      	add	r0, r7
 8008258:	f006 fa17 	bl	800e68a <f_write>

	f_close(&fil);
 800825c:	4b11      	ldr	r3, [pc, #68]	@ (80082a4 <main+0x528>)
 800825e:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 8008262:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 8008266:	443b      	add	r3, r7
 8008268:	4618      	mov	r0, r3
 800826a:	f006 fce0 	bl	800ec2e <f_close>

	file_cont++;
 800826e:	f647 5356 	movw	r3, #32086	@ 0x7d56
 8008272:	443b      	add	r3, r7
 8008274:	881b      	ldrh	r3, [r3, #0]
 8008276:	3301      	adds	r3, #1
 8008278:	f647 5256 	movw	r2, #32086	@ 0x7d56
 800827c:	443a      	add	r2, r7
 800827e:	8013      	strh	r3, [r2, #0]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8008280:	2180      	movs	r1, #128	@ 0x80
 8008282:	4812      	ldr	r0, [pc, #72]	@ (80082cc <main+0x550>)
 8008284:	f000 ffb0 	bl	80091e8 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8008288:	2064      	movs	r0, #100	@ 0x64
 800828a:	f000 fce3 	bl	8008c54 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800828e:	2180      	movs	r1, #128	@ 0x80
 8008290:	480e      	ldr	r0, [pc, #56]	@ (80082cc <main+0x550>)
 8008292:	f000 ffa9 	bl	80091e8 <HAL_GPIO_TogglePin>
  {
 8008296:	e5bc      	b.n	8007e12 <main+0x96>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8008298:	4618      	mov	r0, r3
 800829a:	f507 47fa 	add.w	r7, r7, #32000	@ 0x7d00
 800829e:	3758      	adds	r7, #88	@ 0x58
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bdb0      	pop	{r4, r5, r7, pc}
 80082a4:	ffff8328 	.word	0xffff8328
 80082a8:	2000362c 	.word	0x2000362c
 80082ac:	200024cc 	.word	0x200024cc
 80082b0:	2000136c 	.word	0x2000136c
 80082b4:	2000020c 	.word	0x2000020c
 80082b8:	20003650 	.word	0x20003650
 80082bc:	08014638 	.word	0x08014638
 80082c0:	ffff82a8 	.word	0xffff82a8
 80082c4:	0801464c 	.word	0x0801464c
 80082c8:	08014654 	.word	0x08014654
 80082cc:	40020400 	.word	0x40020400

080082d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b094      	sub	sp, #80	@ 0x50
 80082d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80082d6:	f107 0320 	add.w	r3, r7, #32
 80082da:	2230      	movs	r2, #48	@ 0x30
 80082dc:	2100      	movs	r1, #0
 80082de:	4618      	mov	r0, r3
 80082e0:	f008 fbcb 	bl	8010a7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80082e4:	f107 030c 	add.w	r3, r7, #12
 80082e8:	2200      	movs	r2, #0
 80082ea:	601a      	str	r2, [r3, #0]
 80082ec:	605a      	str	r2, [r3, #4]
 80082ee:	609a      	str	r2, [r3, #8]
 80082f0:	60da      	str	r2, [r3, #12]
 80082f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80082f4:	4b2a      	ldr	r3, [pc, #168]	@ (80083a0 <SystemClock_Config+0xd0>)
 80082f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082f8:	4a29      	ldr	r2, [pc, #164]	@ (80083a0 <SystemClock_Config+0xd0>)
 80082fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8008300:	4b27      	ldr	r3, [pc, #156]	@ (80083a0 <SystemClock_Config+0xd0>)
 8008302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008304:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008308:	60bb      	str	r3, [r7, #8]
 800830a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800830c:	4b25      	ldr	r3, [pc, #148]	@ (80083a4 <SystemClock_Config+0xd4>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a24      	ldr	r2, [pc, #144]	@ (80083a4 <SystemClock_Config+0xd4>)
 8008312:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008316:	6013      	str	r3, [r2, #0]
 8008318:	4b22      	ldr	r3, [pc, #136]	@ (80083a4 <SystemClock_Config+0xd4>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008320:	607b      	str	r3, [r7, #4]
 8008322:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008324:	2302      	movs	r3, #2
 8008326:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008328:	2301      	movs	r3, #1
 800832a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800832c:	2310      	movs	r3, #16
 800832e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008330:	2302      	movs	r3, #2
 8008332:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008334:	2300      	movs	r3, #0
 8008336:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8008338:	2308      	movs	r3, #8
 800833a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800833c:	23d8      	movs	r3, #216	@ 0xd8
 800833e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008340:	2302      	movs	r3, #2
 8008342:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8008344:	2302      	movs	r3, #2
 8008346:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008348:	f107 0320 	add.w	r3, r7, #32
 800834c:	4618      	mov	r0, r3
 800834e:	f000 ffb5 	bl	80092bc <HAL_RCC_OscConfig>
 8008352:	4603      	mov	r3, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d001      	beq.n	800835c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8008358:	f000 f826 	bl	80083a8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800835c:	f000 ff5e 	bl	800921c <HAL_PWREx_EnableOverDrive>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d001      	beq.n	800836a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8008366:	f000 f81f 	bl	80083a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800836a:	230f      	movs	r3, #15
 800836c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800836e:	2302      	movs	r3, #2
 8008370:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008372:	2300      	movs	r3, #0
 8008374:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008376:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800837a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800837c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008380:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8008382:	f107 030c 	add.w	r3, r7, #12
 8008386:	2107      	movs	r1, #7
 8008388:	4618      	mov	r0, r3
 800838a:	f001 fa3b 	bl	8009804 <HAL_RCC_ClockConfig>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d001      	beq.n	8008398 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8008394:	f000 f808 	bl	80083a8 <Error_Handler>
  }
}
 8008398:	bf00      	nop
 800839a:	3750      	adds	r7, #80	@ 0x50
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	40023800 	.word	0x40023800
 80083a4:	40007000 	.word	0x40007000

080083a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80083ac:	b672      	cpsid	i
}
 80083ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 80083b0:	2201      	movs	r2, #1
 80083b2:	2101      	movs	r1, #1
 80083b4:	4802      	ldr	r0, [pc, #8]	@ (80083c0 <Error_Handler+0x18>)
 80083b6:	f000 feff 	bl	80091b8 <HAL_GPIO_WritePin>
  while (1)
 80083ba:	bf00      	nop
 80083bc:	e7fd      	b.n	80083ba <Error_Handler+0x12>
 80083be:	bf00      	nop
 80083c0:	40020400 	.word	0x40020400

080083c4 <SD_SendDummyClock>:
#define SD_CS_LOW()   HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET)
#define SD_CS_HIGH()  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET)

extern SPI_HandleTypeDef hspi3; // Use a instância correta do SPI

static void SD_SendDummyClock(void) {
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
    uint8_t dummy = 0xFF;
 80083ca:	23ff      	movs	r3, #255	@ 0xff
 80083cc:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < 10; i++)
 80083ce:	2300      	movs	r3, #0
 80083d0:	607b      	str	r3, [r7, #4]
 80083d2:	e009      	b.n	80083e8 <SD_SendDummyClock+0x24>
        HAL_SPI_Transmit(&hspi3, &dummy, 1, HAL_MAX_DELAY);
 80083d4:	1cf9      	adds	r1, r7, #3
 80083d6:	f04f 33ff 	mov.w	r3, #4294967295
 80083da:	2201      	movs	r2, #1
 80083dc:	4806      	ldr	r0, [pc, #24]	@ (80083f8 <SD_SendDummyClock+0x34>)
 80083de:	f001 fcb4 	bl	8009d4a <HAL_SPI_Transmit>
    for (int i = 0; i < 10; i++)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	3301      	adds	r3, #1
 80083e6:	607b      	str	r3, [r7, #4]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2b09      	cmp	r3, #9
 80083ec:	ddf2      	ble.n	80083d4 <SD_SendDummyClock+0x10>
}
 80083ee:	bf00      	nop
 80083f0:	bf00      	nop
 80083f2:	3708      	adds	r7, #8
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	200036b8 	.word	0x200036b8

080083fc <SD_TransmitByte>:

static uint8_t SD_TransmitByte(uint8_t data) {
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b086      	sub	sp, #24
 8008400:	af02      	add	r7, sp, #8
 8008402:	4603      	mov	r3, r0
 8008404:	71fb      	strb	r3, [r7, #7]
    uint8_t received;
    HAL_SPI_TransmitReceive(&hspi3, &data, &received, 1, HAL_MAX_DELAY);
 8008406:	f107 020f 	add.w	r2, r7, #15
 800840a:	1df9      	adds	r1, r7, #7
 800840c:	f04f 33ff 	mov.w	r3, #4294967295
 8008410:	9300      	str	r3, [sp, #0]
 8008412:	2301      	movs	r3, #1
 8008414:	4803      	ldr	r0, [pc, #12]	@ (8008424 <SD_TransmitByte+0x28>)
 8008416:	f001 fe0e 	bl	800a036 <HAL_SPI_TransmitReceive>
    return received;
 800841a:	7bfb      	ldrb	r3, [r7, #15]
}
 800841c:	4618      	mov	r0, r3
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}
 8008424:	200036b8 	.word	0x200036b8

08008428 <SD_ReceiveByte>:

static uint8_t SD_ReceiveByte(void) {
 8008428:	b580      	push	{r7, lr}
 800842a:	af00      	add	r7, sp, #0
    return SD_TransmitByte(0xFF);
 800842c:	20ff      	movs	r0, #255	@ 0xff
 800842e:	f7ff ffe5 	bl	80083fc <SD_TransmitByte>
 8008432:	4603      	mov	r3, r0
}
 8008434:	4618      	mov	r0, r3
 8008436:	bd80      	pop	{r7, pc}

08008438 <SD_WaitReady>:

static uint8_t SD_WaitReady(void) {
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
    uint8_t res;
    uint32_t timeout = HAL_GetTick();
 800843e:	f000 fbff 	bl	8008c40 <HAL_GetTick>
 8008442:	6078      	str	r0, [r7, #4]
    do {
        res = SD_ReceiveByte();
 8008444:	f7ff fff0 	bl	8008428 <SD_ReceiveByte>
 8008448:	4603      	mov	r3, r0
 800844a:	70fb      	strb	r3, [r7, #3]
        if (res == 0xFF) return 1;
 800844c:	78fb      	ldrb	r3, [r7, #3]
 800844e:	2bff      	cmp	r3, #255	@ 0xff
 8008450:	d101      	bne.n	8008456 <SD_WaitReady+0x1e>
 8008452:	2301      	movs	r3, #1
 8008454:	e008      	b.n	8008468 <SD_WaitReady+0x30>
    } while ((HAL_GetTick() - timeout) < 500);
 8008456:	f000 fbf3 	bl	8008c40 <HAL_GetTick>
 800845a:	4602      	mov	r2, r0
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	1ad3      	subs	r3, r2, r3
 8008460:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8008464:	d3ee      	bcc.n	8008444 <SD_WaitReady+0xc>
    return 0;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	3708      	adds	r7, #8
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <SD_Select>:

static void SD_Select(void) {
 8008470:	b580      	push	{r7, lr}
 8008472:	af00      	add	r7, sp, #0
    SD_CS_LOW();
 8008474:	2200      	movs	r2, #0
 8008476:	2110      	movs	r1, #16
 8008478:	4803      	ldr	r0, [pc, #12]	@ (8008488 <SD_Select+0x18>)
 800847a:	f000 fe9d 	bl	80091b8 <HAL_GPIO_WritePin>
    SD_ReceiveByte();
 800847e:	f7ff ffd3 	bl	8008428 <SD_ReceiveByte>
}
 8008482:	bf00      	nop
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	40020000 	.word	0x40020000

0800848c <SD_Deselect>:

static void SD_Deselect(void) {
 800848c:	b580      	push	{r7, lr}
 800848e:	af00      	add	r7, sp, #0
    SD_CS_HIGH();
 8008490:	2201      	movs	r2, #1
 8008492:	2110      	movs	r1, #16
 8008494:	4803      	ldr	r0, [pc, #12]	@ (80084a4 <SD_Deselect+0x18>)
 8008496:	f000 fe8f 	bl	80091b8 <HAL_GPIO_WritePin>
    SD_ReceiveByte();
 800849a:	f7ff ffc5 	bl	8008428 <SD_ReceiveByte>
}
 800849e:	bf00      	nop
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	40020000 	.word	0x40020000

080084a8 <SD_SendCommand>:

static uint8_t SD_SendCommand(uint8_t cmd, uint32_t arg, uint8_t crc) {
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b086      	sub	sp, #24
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	4603      	mov	r3, r0
 80084b0:	6039      	str	r1, [r7, #0]
 80084b2:	71fb      	strb	r3, [r7, #7]
 80084b4:	4613      	mov	r3, r2
 80084b6:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[6];
    buf[0] = 0x40 | cmd;
 80084b8:	79fb      	ldrb	r3, [r7, #7]
 80084ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	723b      	strb	r3, [r7, #8]
    buf[1] = (arg >> 24) & 0xFF;
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	0e1b      	lsrs	r3, r3, #24
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	727b      	strb	r3, [r7, #9]
    buf[2] = (arg >> 16) & 0xFF;
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	0c1b      	lsrs	r3, r3, #16
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	72bb      	strb	r3, [r7, #10]
    buf[3] = (arg >> 8) & 0xFF;
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	0a1b      	lsrs	r3, r3, #8
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	72fb      	strb	r3, [r7, #11]
    buf[4] = arg & 0xFF;
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	733b      	strb	r3, [r7, #12]
    buf[5] = crc;
 80084e0:	79bb      	ldrb	r3, [r7, #6]
 80084e2:	737b      	strb	r3, [r7, #13]

    SD_Deselect();
 80084e4:	f7ff ffd2 	bl	800848c <SD_Deselect>
    SD_Select();
 80084e8:	f7ff ffc2 	bl	8008470 <SD_Select>

    if (!SD_WaitReady()) {
 80084ec:	f7ff ffa4 	bl	8008438 <SD_WaitReady>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d103      	bne.n	80084fe <SD_SendCommand+0x56>
        SD_Deselect();
 80084f6:	f7ff ffc9 	bl	800848c <SD_Deselect>
        return 0xFF;
 80084fa:	23ff      	movs	r3, #255	@ 0xff
 80084fc:	e024      	b.n	8008548 <SD_SendCommand+0xa0>
    }

    for (int i = 0; i < 6; i++)
 80084fe:	2300      	movs	r3, #0
 8008500:	617b      	str	r3, [r7, #20]
 8008502:	e00a      	b.n	800851a <SD_SendCommand+0x72>
        SD_TransmitByte(buf[i]);
 8008504:	f107 0208 	add.w	r2, r7, #8
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	4413      	add	r3, r2
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	4618      	mov	r0, r3
 8008510:	f7ff ff74 	bl	80083fc <SD_TransmitByte>
    for (int i = 0; i < 6; i++)
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	3301      	adds	r3, #1
 8008518:	617b      	str	r3, [r7, #20]
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	2b05      	cmp	r3, #5
 800851e:	ddf1      	ble.n	8008504 <SD_SendCommand+0x5c>

    // Aguarda resposta (bit 7 == 0)
    for (int i = 0; i < 10; i++) {
 8008520:	2300      	movs	r3, #0
 8008522:	613b      	str	r3, [r7, #16]
 8008524:	e00c      	b.n	8008540 <SD_SendCommand+0x98>
        uint8_t res = SD_ReceiveByte();
 8008526:	f7ff ff7f 	bl	8008428 <SD_ReceiveByte>
 800852a:	4603      	mov	r3, r0
 800852c:	73fb      	strb	r3, [r7, #15]
        if ((res & 0x80) == 0)
 800852e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008532:	2b00      	cmp	r3, #0
 8008534:	db01      	blt.n	800853a <SD_SendCommand+0x92>
            return res;
 8008536:	7bfb      	ldrb	r3, [r7, #15]
 8008538:	e006      	b.n	8008548 <SD_SendCommand+0xa0>
    for (int i = 0; i < 10; i++) {
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	3301      	adds	r3, #1
 800853e:	613b      	str	r3, [r7, #16]
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	2b09      	cmp	r3, #9
 8008544:	ddef      	ble.n	8008526 <SD_SendCommand+0x7e>
    }

    return 0xFF;
 8008546:	23ff      	movs	r3, #255	@ 0xff
}
 8008548:	4618      	mov	r0, r3
 800854a:	3718      	adds	r7, #24
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <SD_Init>:

uint8_t SD_Init(void) {
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
    SD_CS_HIGH();
 8008556:	2201      	movs	r2, #1
 8008558:	2110      	movs	r1, #16
 800855a:	4820      	ldr	r0, [pc, #128]	@ (80085dc <SD_Init+0x8c>)
 800855c:	f000 fe2c 	bl	80091b8 <HAL_GPIO_WritePin>
    SD_SendDummyClock(); // 80 clocks
 8008560:	f7ff ff30 	bl	80083c4 <SD_SendDummyClock>

    uint8_t res = SD_SendCommand(CMD0, 0, 0x95);
 8008564:	2295      	movs	r2, #149	@ 0x95
 8008566:	2100      	movs	r1, #0
 8008568:	2000      	movs	r0, #0
 800856a:	f7ff ff9d 	bl	80084a8 <SD_SendCommand>
 800856e:	4603      	mov	r3, r0
 8008570:	71fb      	strb	r3, [r7, #7]
    if (res != 0x01) return SD_ERROR;
 8008572:	79fb      	ldrb	r3, [r7, #7]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d001      	beq.n	800857c <SD_Init+0x2c>
 8008578:	2301      	movs	r3, #1
 800857a:	e02b      	b.n	80085d4 <SD_Init+0x84>

    res = SD_SendCommand(CMD8, 0x1AA, 0x87);
 800857c:	2287      	movs	r2, #135	@ 0x87
 800857e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8008582:	2008      	movs	r0, #8
 8008584:	f7ff ff90 	bl	80084a8 <SD_SendCommand>
 8008588:	4603      	mov	r3, r0
 800858a:	71fb      	strb	r3, [r7, #7]
    if (res != 0x01) return SD_ERROR;
 800858c:	79fb      	ldrb	r3, [r7, #7]
 800858e:	2b01      	cmp	r3, #1
 8008590:	d001      	beq.n	8008596 <SD_Init+0x46>
 8008592:	2301      	movs	r3, #1
 8008594:	e01e      	b.n	80085d4 <SD_Init+0x84>

    // Espera inicialização
    do {
        SD_SendCommand(CMD55, 0, 0x01);
 8008596:	2201      	movs	r2, #1
 8008598:	2100      	movs	r1, #0
 800859a:	2037      	movs	r0, #55	@ 0x37
 800859c:	f7ff ff84 	bl	80084a8 <SD_SendCommand>
        res = SD_SendCommand(ACMD41, 0x40000000, 0x01);
 80085a0:	2201      	movs	r2, #1
 80085a2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80085a6:	2029      	movs	r0, #41	@ 0x29
 80085a8:	f7ff ff7e 	bl	80084a8 <SD_SendCommand>
 80085ac:	4603      	mov	r3, r0
 80085ae:	71fb      	strb	r3, [r7, #7]
    } while (res != 0x00);
 80085b0:	79fb      	ldrb	r3, [r7, #7]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d1ef      	bne.n	8008596 <SD_Init+0x46>

    res = SD_SendCommand(CMD58, 0, 0x01);
 80085b6:	2201      	movs	r2, #1
 80085b8:	2100      	movs	r1, #0
 80085ba:	203a      	movs	r0, #58	@ 0x3a
 80085bc:	f7ff ff74 	bl	80084a8 <SD_SendCommand>
 80085c0:	4603      	mov	r3, r0
 80085c2:	71fb      	strb	r3, [r7, #7]
    SD_Deselect();
 80085c4:	f7ff ff62 	bl	800848c <SD_Deselect>
    return (res == 0x00) ? SD_OK : SD_ERROR;
 80085c8:	79fb      	ldrb	r3, [r7, #7]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	bf14      	ite	ne
 80085ce:	2301      	movne	r3, #1
 80085d0:	2300      	moveq	r3, #0
 80085d2:	b2db      	uxtb	r3, r3
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3708      	adds	r7, #8
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	40020000 	.word	0x40020000

080085e0 <SD_ReadBlock>:

uint8_t SD_ReadBlock(uint32_t blockAddr, uint8_t* buff) {
 80085e0:	b590      	push	{r4, r7, lr}
 80085e2:	b087      	sub	sp, #28
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
    uint8_t token;

    if (SD_SendCommand(CMD17, blockAddr, 0x01) != 0x00)
 80085ea:	2201      	movs	r2, #1
 80085ec:	6879      	ldr	r1, [r7, #4]
 80085ee:	2011      	movs	r0, #17
 80085f0:	f7ff ff5a 	bl	80084a8 <SD_SendCommand>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d001      	beq.n	80085fe <SD_ReadBlock+0x1e>
        return SD_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	e030      	b.n	8008660 <SD_ReadBlock+0x80>

    // Espera token 0xFE (início do bloco)
    for (int i = 0; i < 10000; i++) {
 80085fe:	2300      	movs	r3, #0
 8008600:	613b      	str	r3, [r7, #16]
 8008602:	e009      	b.n	8008618 <SD_ReadBlock+0x38>
        token = SD_ReceiveByte();
 8008604:	f7ff ff10 	bl	8008428 <SD_ReceiveByte>
 8008608:	4603      	mov	r3, r0
 800860a:	75fb      	strb	r3, [r7, #23]
        if (token == 0xFE) break;
 800860c:	7dfb      	ldrb	r3, [r7, #23]
 800860e:	2bfe      	cmp	r3, #254	@ 0xfe
 8008610:	d008      	beq.n	8008624 <SD_ReadBlock+0x44>
    for (int i = 0; i < 10000; i++) {
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	3301      	adds	r3, #1
 8008616:	613b      	str	r3, [r7, #16]
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800861e:	4293      	cmp	r3, r2
 8008620:	ddf0      	ble.n	8008604 <SD_ReadBlock+0x24>
 8008622:	e000      	b.n	8008626 <SD_ReadBlock+0x46>
        if (token == 0xFE) break;
 8008624:	bf00      	nop
    }
    if (token != 0xFE) return SD_ERROR;
 8008626:	7dfb      	ldrb	r3, [r7, #23]
 8008628:	2bfe      	cmp	r3, #254	@ 0xfe
 800862a:	d001      	beq.n	8008630 <SD_ReadBlock+0x50>
 800862c:	2301      	movs	r3, #1
 800862e:	e017      	b.n	8008660 <SD_ReadBlock+0x80>

    for (int i = 0; i < 512; i++)
 8008630:	2300      	movs	r3, #0
 8008632:	60fb      	str	r3, [r7, #12]
 8008634:	e009      	b.n	800864a <SD_ReadBlock+0x6a>
        buff[i] = SD_ReceiveByte();
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	683a      	ldr	r2, [r7, #0]
 800863a:	18d4      	adds	r4, r2, r3
 800863c:	f7ff fef4 	bl	8008428 <SD_ReceiveByte>
 8008640:	4603      	mov	r3, r0
 8008642:	7023      	strb	r3, [r4, #0]
    for (int i = 0; i < 512; i++)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	3301      	adds	r3, #1
 8008648:	60fb      	str	r3, [r7, #12]
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008650:	dbf1      	blt.n	8008636 <SD_ReadBlock+0x56>

    SD_ReceiveByte(); // Discard CRC
 8008652:	f7ff fee9 	bl	8008428 <SD_ReceiveByte>
    SD_ReceiveByte();
 8008656:	f7ff fee7 	bl	8008428 <SD_ReceiveByte>

    SD_Deselect();
 800865a:	f7ff ff17 	bl	800848c <SD_Deselect>
    return SD_OK;
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	371c      	adds	r7, #28
 8008664:	46bd      	mov	sp, r7
 8008666:	bd90      	pop	{r4, r7, pc}

08008668 <SD_WriteBlock>:

uint8_t SD_WriteBlock(uint32_t blockAddr, const uint8_t* buff) {
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
    if (SD_SendCommand(CMD24, blockAddr, 0x01) != 0x00)
 8008672:	2201      	movs	r2, #1
 8008674:	6879      	ldr	r1, [r7, #4]
 8008676:	2018      	movs	r0, #24
 8008678:	f7ff ff16 	bl	80084a8 <SD_SendCommand>
 800867c:	4603      	mov	r3, r0
 800867e:	2b00      	cmp	r3, #0
 8008680:	d001      	beq.n	8008686 <SD_WriteBlock+0x1e>
        return SD_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	e02f      	b.n	80086e6 <SD_WriteBlock+0x7e>

    SD_TransmitByte(0xFE); // Start token
 8008686:	20fe      	movs	r0, #254	@ 0xfe
 8008688:	f7ff feb8 	bl	80083fc <SD_TransmitByte>

    for (int i = 0; i < 512; i++)
 800868c:	2300      	movs	r3, #0
 800868e:	60fb      	str	r3, [r7, #12]
 8008690:	e009      	b.n	80086a6 <SD_WriteBlock+0x3e>
        SD_TransmitByte(buff[i]);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	683a      	ldr	r2, [r7, #0]
 8008696:	4413      	add	r3, r2
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	4618      	mov	r0, r3
 800869c:	f7ff feae 	bl	80083fc <SD_TransmitByte>
    for (int i = 0; i < 512; i++)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	3301      	adds	r3, #1
 80086a4:	60fb      	str	r3, [r7, #12]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086ac:	dbf1      	blt.n	8008692 <SD_WriteBlock+0x2a>

    SD_TransmitByte(0xFF); // Dummy CRC
 80086ae:	20ff      	movs	r0, #255	@ 0xff
 80086b0:	f7ff fea4 	bl	80083fc <SD_TransmitByte>
    SD_TransmitByte(0xFF);
 80086b4:	20ff      	movs	r0, #255	@ 0xff
 80086b6:	f7ff fea1 	bl	80083fc <SD_TransmitByte>

    uint8_t resp = SD_ReceiveByte();
 80086ba:	f7ff feb5 	bl	8008428 <SD_ReceiveByte>
 80086be:	4603      	mov	r3, r0
 80086c0:	72fb      	strb	r3, [r7, #11]
    if ((resp & 0x1F) != 0x05) {
 80086c2:	7afb      	ldrb	r3, [r7, #11]
 80086c4:	f003 031f 	and.w	r3, r3, #31
 80086c8:	2b05      	cmp	r3, #5
 80086ca:	d003      	beq.n	80086d4 <SD_WriteBlock+0x6c>
        SD_Deselect();
 80086cc:	f7ff fede 	bl	800848c <SD_Deselect>
        return SD_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	e008      	b.n	80086e6 <SD_WriteBlock+0x7e>
    }

    while (!SD_ReceiveByte()); // Espera escrever
 80086d4:	bf00      	nop
 80086d6:	f7ff fea7 	bl	8008428 <SD_ReceiveByte>
 80086da:	4603      	mov	r3, r0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d0fa      	beq.n	80086d6 <SD_WriteBlock+0x6e>

    SD_Deselect();
 80086e0:	f7ff fed4 	bl	800848c <SD_Deselect>
    return SD_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3710      	adds	r7, #16
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
	...

080086f0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80086f4:	4b1b      	ldr	r3, [pc, #108]	@ (8008764 <MX_SPI1_Init+0x74>)
 80086f6:	4a1c      	ldr	r2, [pc, #112]	@ (8008768 <MX_SPI1_Init+0x78>)
 80086f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80086fa:	4b1a      	ldr	r3, [pc, #104]	@ (8008764 <MX_SPI1_Init+0x74>)
 80086fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8008700:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008702:	4b18      	ldr	r3, [pc, #96]	@ (8008764 <MX_SPI1_Init+0x74>)
 8008704:	2200      	movs	r2, #0
 8008706:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008708:	4b16      	ldr	r3, [pc, #88]	@ (8008764 <MX_SPI1_Init+0x74>)
 800870a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800870e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008710:	4b14      	ldr	r3, [pc, #80]	@ (8008764 <MX_SPI1_Init+0x74>)
 8008712:	2200      	movs	r2, #0
 8008714:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008716:	4b13      	ldr	r3, [pc, #76]	@ (8008764 <MX_SPI1_Init+0x74>)
 8008718:	2200      	movs	r2, #0
 800871a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800871c:	4b11      	ldr	r3, [pc, #68]	@ (8008764 <MX_SPI1_Init+0x74>)
 800871e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8008722:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8008724:	4b0f      	ldr	r3, [pc, #60]	@ (8008764 <MX_SPI1_Init+0x74>)
 8008726:	2210      	movs	r2, #16
 8008728:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800872a:	4b0e      	ldr	r3, [pc, #56]	@ (8008764 <MX_SPI1_Init+0x74>)
 800872c:	2200      	movs	r2, #0
 800872e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008730:	4b0c      	ldr	r3, [pc, #48]	@ (8008764 <MX_SPI1_Init+0x74>)
 8008732:	2200      	movs	r2, #0
 8008734:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008736:	4b0b      	ldr	r3, [pc, #44]	@ (8008764 <MX_SPI1_Init+0x74>)
 8008738:	2200      	movs	r2, #0
 800873a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800873c:	4b09      	ldr	r3, [pc, #36]	@ (8008764 <MX_SPI1_Init+0x74>)
 800873e:	2207      	movs	r2, #7
 8008740:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008742:	4b08      	ldr	r3, [pc, #32]	@ (8008764 <MX_SPI1_Init+0x74>)
 8008744:	2200      	movs	r2, #0
 8008746:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008748:	4b06      	ldr	r3, [pc, #24]	@ (8008764 <MX_SPI1_Init+0x74>)
 800874a:	2208      	movs	r2, #8
 800874c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800874e:	4805      	ldr	r0, [pc, #20]	@ (8008764 <MX_SPI1_Init+0x74>)
 8008750:	f001 fa50 	bl	8009bf4 <HAL_SPI_Init>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d001      	beq.n	800875e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800875a:	f7ff fe25 	bl	80083a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800875e:	bf00      	nop
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	20003654 	.word	0x20003654
 8008768:	40013000 	.word	0x40013000

0800876c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8008770:	4b1b      	ldr	r3, [pc, #108]	@ (80087e0 <MX_SPI3_Init+0x74>)
 8008772:	4a1c      	ldr	r2, [pc, #112]	@ (80087e4 <MX_SPI3_Init+0x78>)
 8008774:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8008776:	4b1a      	ldr	r3, [pc, #104]	@ (80087e0 <MX_SPI3_Init+0x74>)
 8008778:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800877c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800877e:	4b18      	ldr	r3, [pc, #96]	@ (80087e0 <MX_SPI3_Init+0x74>)
 8008780:	2200      	movs	r2, #0
 8008782:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8008784:	4b16      	ldr	r3, [pc, #88]	@ (80087e0 <MX_SPI3_Init+0x74>)
 8008786:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800878a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800878c:	4b14      	ldr	r3, [pc, #80]	@ (80087e0 <MX_SPI3_Init+0x74>)
 800878e:	2200      	movs	r2, #0
 8008790:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008792:	4b13      	ldr	r3, [pc, #76]	@ (80087e0 <MX_SPI3_Init+0x74>)
 8008794:	2200      	movs	r2, #0
 8008796:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8008798:	4b11      	ldr	r3, [pc, #68]	@ (80087e0 <MX_SPI3_Init+0x74>)
 800879a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800879e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80087a0:	4b0f      	ldr	r3, [pc, #60]	@ (80087e0 <MX_SPI3_Init+0x74>)
 80087a2:	2200      	movs	r2, #0
 80087a4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80087a6:	4b0e      	ldr	r3, [pc, #56]	@ (80087e0 <MX_SPI3_Init+0x74>)
 80087a8:	2200      	movs	r2, #0
 80087aa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80087ac:	4b0c      	ldr	r3, [pc, #48]	@ (80087e0 <MX_SPI3_Init+0x74>)
 80087ae:	2200      	movs	r2, #0
 80087b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80087b2:	4b0b      	ldr	r3, [pc, #44]	@ (80087e0 <MX_SPI3_Init+0x74>)
 80087b4:	2200      	movs	r2, #0
 80087b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80087b8:	4b09      	ldr	r3, [pc, #36]	@ (80087e0 <MX_SPI3_Init+0x74>)
 80087ba:	2207      	movs	r2, #7
 80087bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80087be:	4b08      	ldr	r3, [pc, #32]	@ (80087e0 <MX_SPI3_Init+0x74>)
 80087c0:	2200      	movs	r2, #0
 80087c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80087c4:	4b06      	ldr	r3, [pc, #24]	@ (80087e0 <MX_SPI3_Init+0x74>)
 80087c6:	2208      	movs	r2, #8
 80087c8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80087ca:	4805      	ldr	r0, [pc, #20]	@ (80087e0 <MX_SPI3_Init+0x74>)
 80087cc:	f001 fa12 	bl	8009bf4 <HAL_SPI_Init>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d001      	beq.n	80087da <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80087d6:	f7ff fde7 	bl	80083a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80087da:	bf00      	nop
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	200036b8 	.word	0x200036b8
 80087e4:	40003c00 	.word	0x40003c00

080087e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b08c      	sub	sp, #48	@ 0x30
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087f0:	f107 031c 	add.w	r3, r7, #28
 80087f4:	2200      	movs	r2, #0
 80087f6:	601a      	str	r2, [r3, #0]
 80087f8:	605a      	str	r2, [r3, #4]
 80087fa:	609a      	str	r2, [r3, #8]
 80087fc:	60da      	str	r2, [r3, #12]
 80087fe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a3c      	ldr	r2, [pc, #240]	@ (80088f8 <HAL_SPI_MspInit+0x110>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d129      	bne.n	800885e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800880a:	4b3c      	ldr	r3, [pc, #240]	@ (80088fc <HAL_SPI_MspInit+0x114>)
 800880c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800880e:	4a3b      	ldr	r2, [pc, #236]	@ (80088fc <HAL_SPI_MspInit+0x114>)
 8008810:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008814:	6453      	str	r3, [r2, #68]	@ 0x44
 8008816:	4b39      	ldr	r3, [pc, #228]	@ (80088fc <HAL_SPI_MspInit+0x114>)
 8008818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800881a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800881e:	61bb      	str	r3, [r7, #24]
 8008820:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008822:	4b36      	ldr	r3, [pc, #216]	@ (80088fc <HAL_SPI_MspInit+0x114>)
 8008824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008826:	4a35      	ldr	r2, [pc, #212]	@ (80088fc <HAL_SPI_MspInit+0x114>)
 8008828:	f043 0301 	orr.w	r3, r3, #1
 800882c:	6313      	str	r3, [r2, #48]	@ 0x30
 800882e:	4b33      	ldr	r3, [pc, #204]	@ (80088fc <HAL_SPI_MspInit+0x114>)
 8008830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008832:	f003 0301 	and.w	r3, r3, #1
 8008836:	617b      	str	r3, [r7, #20]
 8008838:	697b      	ldr	r3, [r7, #20]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 800883a:	f248 03e0 	movw	r3, #32992	@ 0x80e0
 800883e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008840:	2302      	movs	r3, #2
 8008842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008844:	2300      	movs	r3, #0
 8008846:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008848:	2303      	movs	r3, #3
 800884a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800884c:	2305      	movs	r3, #5
 800884e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008850:	f107 031c 	add.w	r3, r7, #28
 8008854:	4619      	mov	r1, r3
 8008856:	482a      	ldr	r0, [pc, #168]	@ (8008900 <HAL_SPI_MspInit+0x118>)
 8008858:	f000 fb04 	bl	8008e64 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800885c:	e048      	b.n	80088f0 <HAL_SPI_MspInit+0x108>
  else if(spiHandle->Instance==SPI3)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a28      	ldr	r2, [pc, #160]	@ (8008904 <HAL_SPI_MspInit+0x11c>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d143      	bne.n	80088f0 <HAL_SPI_MspInit+0x108>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008868:	4b24      	ldr	r3, [pc, #144]	@ (80088fc <HAL_SPI_MspInit+0x114>)
 800886a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800886c:	4a23      	ldr	r2, [pc, #140]	@ (80088fc <HAL_SPI_MspInit+0x114>)
 800886e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008872:	6413      	str	r3, [r2, #64]	@ 0x40
 8008874:	4b21      	ldr	r3, [pc, #132]	@ (80088fc <HAL_SPI_MspInit+0x114>)
 8008876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008878:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800887c:	613b      	str	r3, [r7, #16]
 800887e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008880:	4b1e      	ldr	r3, [pc, #120]	@ (80088fc <HAL_SPI_MspInit+0x114>)
 8008882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008884:	4a1d      	ldr	r2, [pc, #116]	@ (80088fc <HAL_SPI_MspInit+0x114>)
 8008886:	f043 0301 	orr.w	r3, r3, #1
 800888a:	6313      	str	r3, [r2, #48]	@ 0x30
 800888c:	4b1b      	ldr	r3, [pc, #108]	@ (80088fc <HAL_SPI_MspInit+0x114>)
 800888e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008890:	f003 0301 	and.w	r3, r3, #1
 8008894:	60fb      	str	r3, [r7, #12]
 8008896:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008898:	4b18      	ldr	r3, [pc, #96]	@ (80088fc <HAL_SPI_MspInit+0x114>)
 800889a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800889c:	4a17      	ldr	r2, [pc, #92]	@ (80088fc <HAL_SPI_MspInit+0x114>)
 800889e:	f043 0302 	orr.w	r3, r3, #2
 80088a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80088a4:	4b15      	ldr	r3, [pc, #84]	@ (80088fc <HAL_SPI_MspInit+0x114>)
 80088a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088a8:	f003 0302 	and.w	r3, r3, #2
 80088ac:	60bb      	str	r3, [r7, #8]
 80088ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80088b0:	2310      	movs	r3, #16
 80088b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088b4:	2302      	movs	r3, #2
 80088b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088b8:	2300      	movs	r3, #0
 80088ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088bc:	2303      	movs	r3, #3
 80088be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80088c0:	2306      	movs	r3, #6
 80088c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088c4:	f107 031c 	add.w	r3, r7, #28
 80088c8:	4619      	mov	r1, r3
 80088ca:	480d      	ldr	r0, [pc, #52]	@ (8008900 <HAL_SPI_MspInit+0x118>)
 80088cc:	f000 faca 	bl	8008e64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80088d0:	2338      	movs	r3, #56	@ 0x38
 80088d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088d4:	2302      	movs	r3, #2
 80088d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088d8:	2300      	movs	r3, #0
 80088da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088dc:	2303      	movs	r3, #3
 80088de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80088e0:	2306      	movs	r3, #6
 80088e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80088e4:	f107 031c 	add.w	r3, r7, #28
 80088e8:	4619      	mov	r1, r3
 80088ea:	4807      	ldr	r0, [pc, #28]	@ (8008908 <HAL_SPI_MspInit+0x120>)
 80088ec:	f000 faba 	bl	8008e64 <HAL_GPIO_Init>
}
 80088f0:	bf00      	nop
 80088f2:	3730      	adds	r7, #48	@ 0x30
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}
 80088f8:	40013000 	.word	0x40013000
 80088fc:	40023800 	.word	0x40023800
 8008900:	40020000 	.word	0x40020000
 8008904:	40003c00 	.word	0x40003c00
 8008908:	40020400 	.word	0x40020400

0800890c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8008912:	4b0e      	ldr	r3, [pc, #56]	@ (800894c <HAL_MspInit+0x40>)
 8008914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008916:	4a0d      	ldr	r2, [pc, #52]	@ (800894c <HAL_MspInit+0x40>)
 8008918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800891c:	6413      	str	r3, [r2, #64]	@ 0x40
 800891e:	4b0b      	ldr	r3, [pc, #44]	@ (800894c <HAL_MspInit+0x40>)
 8008920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008926:	607b      	str	r3, [r7, #4]
 8008928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800892a:	4b08      	ldr	r3, [pc, #32]	@ (800894c <HAL_MspInit+0x40>)
 800892c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800892e:	4a07      	ldr	r2, [pc, #28]	@ (800894c <HAL_MspInit+0x40>)
 8008930:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008934:	6453      	str	r3, [r2, #68]	@ 0x44
 8008936:	4b05      	ldr	r3, [pc, #20]	@ (800894c <HAL_MspInit+0x40>)
 8008938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800893a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800893e:	603b      	str	r3, [r7, #0]
 8008940:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008942:	bf00      	nop
 8008944:	370c      	adds	r7, #12
 8008946:	46bd      	mov	sp, r7
 8008948:	bc80      	pop	{r7}
 800894a:	4770      	bx	lr
 800894c:	40023800 	.word	0x40023800

08008950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008950:	b480      	push	{r7}
 8008952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008954:	bf00      	nop
 8008956:	e7fd      	b.n	8008954 <NMI_Handler+0x4>

08008958 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800895c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8008960:	4804      	ldr	r0, [pc, #16]	@ (8008974 <HardFault_Handler+0x1c>)
 8008962:	f000 fc41 	bl	80091e8 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8008966:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800896a:	f000 f973 	bl	8008c54 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800896e:	bf00      	nop
 8008970:	e7f4      	b.n	800895c <HardFault_Handler+0x4>
 8008972:	bf00      	nop
 8008974:	40020400 	.word	0x40020400

08008978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008978:	b480      	push	{r7}
 800897a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800897c:	bf00      	nop
 800897e:	e7fd      	b.n	800897c <MemManage_Handler+0x4>

08008980 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008980:	b480      	push	{r7}
 8008982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008984:	bf00      	nop
 8008986:	e7fd      	b.n	8008984 <BusFault_Handler+0x4>

08008988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008988:	b480      	push	{r7}
 800898a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800898c:	bf00      	nop
 800898e:	e7fd      	b.n	800898c <UsageFault_Handler+0x4>

08008990 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008990:	b480      	push	{r7}
 8008992:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008994:	bf00      	nop
 8008996:	46bd      	mov	sp, r7
 8008998:	bc80      	pop	{r7}
 800899a:	4770      	bx	lr

0800899c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800899c:	b480      	push	{r7}
 800899e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80089a0:	bf00      	nop
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bc80      	pop	{r7}
 80089a6:	4770      	bx	lr

080089a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80089a8:	b480      	push	{r7}
 80089aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80089ac:	bf00      	nop
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bc80      	pop	{r7}
 80089b2:	4770      	bx	lr

080089b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80089b8:	f000 f930 	bl	8008c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80089bc:	bf00      	nop
 80089be:	bd80      	pop	{r7, pc}

080089c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80089c0:	b480      	push	{r7}
 80089c2:	af00      	add	r7, sp, #0
  return 1;
 80089c4:	2301      	movs	r3, #1
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bc80      	pop	{r7}
 80089cc:	4770      	bx	lr

080089ce <_kill>:

int _kill(int pid, int sig)
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b082      	sub	sp, #8
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
 80089d6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80089d8:	f008 f910 	bl	8010bfc <__errno>
 80089dc:	4603      	mov	r3, r0
 80089de:	2216      	movs	r2, #22
 80089e0:	601a      	str	r2, [r3, #0]
  return -1;
 80089e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <_exit>:

void _exit (int status)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b082      	sub	sp, #8
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80089f6:	f04f 31ff 	mov.w	r1, #4294967295
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f7ff ffe7 	bl	80089ce <_kill>
  while (1) {}    /* Make sure we hang here */
 8008a00:	bf00      	nop
 8008a02:	e7fd      	b.n	8008a00 <_exit+0x12>

08008a04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b086      	sub	sp, #24
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008a10:	2300      	movs	r3, #0
 8008a12:	617b      	str	r3, [r7, #20]
 8008a14:	e00a      	b.n	8008a2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008a16:	f3af 8000 	nop.w
 8008a1a:	4601      	mov	r1, r0
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	1c5a      	adds	r2, r3, #1
 8008a20:	60ba      	str	r2, [r7, #8]
 8008a22:	b2ca      	uxtb	r2, r1
 8008a24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	3301      	adds	r3, #1
 8008a2a:	617b      	str	r3, [r7, #20]
 8008a2c:	697a      	ldr	r2, [r7, #20]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	dbf0      	blt.n	8008a16 <_read+0x12>
  }

  return len;
 8008a34:	687b      	ldr	r3, [r7, #4]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3718      	adds	r7, #24
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b086      	sub	sp, #24
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	60f8      	str	r0, [r7, #12]
 8008a46:	60b9      	str	r1, [r7, #8]
 8008a48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	617b      	str	r3, [r7, #20]
 8008a4e:	e009      	b.n	8008a64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	1c5a      	adds	r2, r3, #1
 8008a54:	60ba      	str	r2, [r7, #8]
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	3301      	adds	r3, #1
 8008a62:	617b      	str	r3, [r7, #20]
 8008a64:	697a      	ldr	r2, [r7, #20]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	dbf1      	blt.n	8008a50 <_write+0x12>
  }
  return len;
 8008a6c:	687b      	ldr	r3, [r7, #4]
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3718      	adds	r7, #24
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <_close>:

int _close(int file)
{
 8008a76:	b480      	push	{r7}
 8008a78:	b083      	sub	sp, #12
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008a7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	370c      	adds	r7, #12
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bc80      	pop	{r7}
 8008a8a:	4770      	bx	lr

08008a8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008a9c:	605a      	str	r2, [r3, #4]
  return 0;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bc80      	pop	{r7}
 8008aa8:	4770      	bx	lr

08008aaa <_isatty>:

int _isatty(int file)
{
 8008aaa:	b480      	push	{r7}
 8008aac:	b083      	sub	sp, #12
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008ab2:	2301      	movs	r3, #1
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	370c      	adds	r7, #12
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bc80      	pop	{r7}
 8008abc:	4770      	bx	lr

08008abe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008abe:	b480      	push	{r7}
 8008ac0:	b085      	sub	sp, #20
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	60f8      	str	r0, [r7, #12]
 8008ac6:	60b9      	str	r1, [r7, #8]
 8008ac8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008aca:	2300      	movs	r3, #0
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3714      	adds	r7, #20
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bc80      	pop	{r7}
 8008ad4:	4770      	bx	lr
	...

08008ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b086      	sub	sp, #24
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008ae0:	4a14      	ldr	r2, [pc, #80]	@ (8008b34 <_sbrk+0x5c>)
 8008ae2:	4b15      	ldr	r3, [pc, #84]	@ (8008b38 <_sbrk+0x60>)
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008aec:	4b13      	ldr	r3, [pc, #76]	@ (8008b3c <_sbrk+0x64>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d102      	bne.n	8008afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008af4:	4b11      	ldr	r3, [pc, #68]	@ (8008b3c <_sbrk+0x64>)
 8008af6:	4a12      	ldr	r2, [pc, #72]	@ (8008b40 <_sbrk+0x68>)
 8008af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008afa:	4b10      	ldr	r3, [pc, #64]	@ (8008b3c <_sbrk+0x64>)
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4413      	add	r3, r2
 8008b02:	693a      	ldr	r2, [r7, #16]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d207      	bcs.n	8008b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008b08:	f008 f878 	bl	8010bfc <__errno>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	220c      	movs	r2, #12
 8008b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008b12:	f04f 33ff 	mov.w	r3, #4294967295
 8008b16:	e009      	b.n	8008b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008b18:	4b08      	ldr	r3, [pc, #32]	@ (8008b3c <_sbrk+0x64>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008b1e:	4b07      	ldr	r3, [pc, #28]	@ (8008b3c <_sbrk+0x64>)
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4413      	add	r3, r2
 8008b26:	4a05      	ldr	r2, [pc, #20]	@ (8008b3c <_sbrk+0x64>)
 8008b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3718      	adds	r7, #24
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	20050000 	.word	0x20050000
 8008b38:	00000400 	.word	0x00000400
 8008b3c:	2000371c 	.word	0x2000371c
 8008b40:	20003d00 	.word	0x20003d00

08008b44 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008b44:	b480      	push	{r7}
 8008b46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008b48:	bf00      	nop
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bc80      	pop	{r7}
 8008b4e:	4770      	bx	lr

08008b50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008b50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008b88 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008b54:	f7ff fff6 	bl	8008b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008b58:	480c      	ldr	r0, [pc, #48]	@ (8008b8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008b5a:	490d      	ldr	r1, [pc, #52]	@ (8008b90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8008b94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008b60:	e002      	b.n	8008b68 <LoopCopyDataInit>

08008b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008b66:	3304      	adds	r3, #4

08008b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008b6c:	d3f9      	bcc.n	8008b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8008b98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008b70:	4c0a      	ldr	r4, [pc, #40]	@ (8008b9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8008b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008b74:	e001      	b.n	8008b7a <LoopFillZerobss>

08008b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008b78:	3204      	adds	r2, #4

08008b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008b7c:	d3fb      	bcc.n	8008b76 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8008b7e:	f008 f843 	bl	8010c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008b82:	f7ff f8fb 	bl	8007d7c <main>
  bx  lr    
 8008b86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008b88:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8008b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008b90:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8008b94:	08015394 	.word	0x08015394
  ldr r2, =_sbss
 8008b98:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8008b9c:	20003cfc 	.word	0x20003cfc

08008ba0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008ba0:	e7fe      	b.n	8008ba0 <ADC_IRQHandler>

08008ba2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008ba6:	2003      	movs	r0, #3
 8008ba8:	f000 f928 	bl	8008dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008bac:	2000      	movs	r0, #0
 8008bae:	f000 f805 	bl	8008bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008bb2:	f7ff feab 	bl	800890c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008bb6:	2300      	movs	r3, #0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008bc4:	4b12      	ldr	r3, [pc, #72]	@ (8008c10 <HAL_InitTick+0x54>)
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	4b12      	ldr	r3, [pc, #72]	@ (8008c14 <HAL_InitTick+0x58>)
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	4619      	mov	r1, r3
 8008bce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8008bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f000 f935 	bl	8008e4a <HAL_SYSTICK_Config>
 8008be0:	4603      	mov	r3, r0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d001      	beq.n	8008bea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008be6:	2301      	movs	r3, #1
 8008be8:	e00e      	b.n	8008c08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2b0f      	cmp	r3, #15
 8008bee:	d80a      	bhi.n	8008c06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	6879      	ldr	r1, [r7, #4]
 8008bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf8:	f000 f90b 	bl	8008e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008bfc:	4a06      	ldr	r2, [pc, #24]	@ (8008c18 <HAL_InitTick+0x5c>)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008c02:	2300      	movs	r3, #0
 8008c04:	e000      	b.n	8008c08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3708      	adds	r7, #8
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	20000000 	.word	0x20000000
 8008c14:	20000008 	.word	0x20000008
 8008c18:	20000004 	.word	0x20000004

08008c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008c20:	4b05      	ldr	r3, [pc, #20]	@ (8008c38 <HAL_IncTick+0x1c>)
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	461a      	mov	r2, r3
 8008c26:	4b05      	ldr	r3, [pc, #20]	@ (8008c3c <HAL_IncTick+0x20>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	4a03      	ldr	r2, [pc, #12]	@ (8008c3c <HAL_IncTick+0x20>)
 8008c2e:	6013      	str	r3, [r2, #0]
}
 8008c30:	bf00      	nop
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bc80      	pop	{r7}
 8008c36:	4770      	bx	lr
 8008c38:	20000008 	.word	0x20000008
 8008c3c:	20003720 	.word	0x20003720

08008c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008c40:	b480      	push	{r7}
 8008c42:	af00      	add	r7, sp, #0
  return uwTick;
 8008c44:	4b02      	ldr	r3, [pc, #8]	@ (8008c50 <HAL_GetTick+0x10>)
 8008c46:	681b      	ldr	r3, [r3, #0]
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bc80      	pop	{r7}
 8008c4e:	4770      	bx	lr
 8008c50:	20003720 	.word	0x20003720

08008c54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008c5c:	f7ff fff0 	bl	8008c40 <HAL_GetTick>
 8008c60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c6c:	d005      	beq.n	8008c7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8008c98 <HAL_Delay+0x44>)
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	461a      	mov	r2, r3
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	4413      	add	r3, r2
 8008c78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008c7a:	bf00      	nop
 8008c7c:	f7ff ffe0 	bl	8008c40 <HAL_GetTick>
 8008c80:	4602      	mov	r2, r0
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	1ad3      	subs	r3, r2, r3
 8008c86:	68fa      	ldr	r2, [r7, #12]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d8f7      	bhi.n	8008c7c <HAL_Delay+0x28>
  {
  }
}
 8008c8c:	bf00      	nop
 8008c8e:	bf00      	nop
 8008c90:	3710      	adds	r7, #16
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	20000008 	.word	0x20000008

08008c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b085      	sub	sp, #20
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f003 0307 	and.w	r3, r3, #7
 8008caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008cac:	4b0b      	ldr	r3, [pc, #44]	@ (8008cdc <__NVIC_SetPriorityGrouping+0x40>)
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008cb2:	68ba      	ldr	r2, [r7, #8]
 8008cb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008cb8:	4013      	ands	r3, r2
 8008cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008cc4:	4b06      	ldr	r3, [pc, #24]	@ (8008ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008cca:	4a04      	ldr	r2, [pc, #16]	@ (8008cdc <__NVIC_SetPriorityGrouping+0x40>)
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	60d3      	str	r3, [r2, #12]
}
 8008cd0:	bf00      	nop
 8008cd2:	3714      	adds	r7, #20
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bc80      	pop	{r7}
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop
 8008cdc:	e000ed00 	.word	0xe000ed00
 8008ce0:	05fa0000 	.word	0x05fa0000

08008ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008ce8:	4b04      	ldr	r3, [pc, #16]	@ (8008cfc <__NVIC_GetPriorityGrouping+0x18>)
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	0a1b      	lsrs	r3, r3, #8
 8008cee:	f003 0307 	and.w	r3, r3, #7
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bc80      	pop	{r7}
 8008cf8:	4770      	bx	lr
 8008cfa:	bf00      	nop
 8008cfc:	e000ed00 	.word	0xe000ed00

08008d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	4603      	mov	r3, r0
 8008d08:	6039      	str	r1, [r7, #0]
 8008d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	db0a      	blt.n	8008d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	b2da      	uxtb	r2, r3
 8008d18:	490c      	ldr	r1, [pc, #48]	@ (8008d4c <__NVIC_SetPriority+0x4c>)
 8008d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d1e:	0112      	lsls	r2, r2, #4
 8008d20:	b2d2      	uxtb	r2, r2
 8008d22:	440b      	add	r3, r1
 8008d24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008d28:	e00a      	b.n	8008d40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	b2da      	uxtb	r2, r3
 8008d2e:	4908      	ldr	r1, [pc, #32]	@ (8008d50 <__NVIC_SetPriority+0x50>)
 8008d30:	79fb      	ldrb	r3, [r7, #7]
 8008d32:	f003 030f 	and.w	r3, r3, #15
 8008d36:	3b04      	subs	r3, #4
 8008d38:	0112      	lsls	r2, r2, #4
 8008d3a:	b2d2      	uxtb	r2, r2
 8008d3c:	440b      	add	r3, r1
 8008d3e:	761a      	strb	r2, [r3, #24]
}
 8008d40:	bf00      	nop
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bc80      	pop	{r7}
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	e000e100 	.word	0xe000e100
 8008d50:	e000ed00 	.word	0xe000ed00

08008d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b089      	sub	sp, #36	@ 0x24
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f003 0307 	and.w	r3, r3, #7
 8008d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	f1c3 0307 	rsb	r3, r3, #7
 8008d6e:	2b04      	cmp	r3, #4
 8008d70:	bf28      	it	cs
 8008d72:	2304      	movcs	r3, #4
 8008d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008d76:	69fb      	ldr	r3, [r7, #28]
 8008d78:	3304      	adds	r3, #4
 8008d7a:	2b06      	cmp	r3, #6
 8008d7c:	d902      	bls.n	8008d84 <NVIC_EncodePriority+0x30>
 8008d7e:	69fb      	ldr	r3, [r7, #28]
 8008d80:	3b03      	subs	r3, #3
 8008d82:	e000      	b.n	8008d86 <NVIC_EncodePriority+0x32>
 8008d84:	2300      	movs	r3, #0
 8008d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d88:	f04f 32ff 	mov.w	r2, #4294967295
 8008d8c:	69bb      	ldr	r3, [r7, #24]
 8008d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d92:	43da      	mvns	r2, r3
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	401a      	ands	r2, r3
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	fa01 f303 	lsl.w	r3, r1, r3
 8008da6:	43d9      	mvns	r1, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008dac:	4313      	orrs	r3, r2
         );
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3724      	adds	r7, #36	@ 0x24
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bc80      	pop	{r7}
 8008db6:	4770      	bx	lr

08008db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008dc8:	d301      	bcc.n	8008dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e00f      	b.n	8008dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008dce:	4a0a      	ldr	r2, [pc, #40]	@ (8008df8 <SysTick_Config+0x40>)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	3b01      	subs	r3, #1
 8008dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008dd6:	210f      	movs	r1, #15
 8008dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ddc:	f7ff ff90 	bl	8008d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008de0:	4b05      	ldr	r3, [pc, #20]	@ (8008df8 <SysTick_Config+0x40>)
 8008de2:	2200      	movs	r2, #0
 8008de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008de6:	4b04      	ldr	r3, [pc, #16]	@ (8008df8 <SysTick_Config+0x40>)
 8008de8:	2207      	movs	r2, #7
 8008dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008dec:	2300      	movs	r3, #0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3708      	adds	r7, #8
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	e000e010 	.word	0xe000e010

08008dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f7ff ff49 	bl	8008c9c <__NVIC_SetPriorityGrouping>
}
 8008e0a:	bf00      	nop
 8008e0c:	3708      	adds	r7, #8
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b086      	sub	sp, #24
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	4603      	mov	r3, r0
 8008e1a:	60b9      	str	r1, [r7, #8]
 8008e1c:	607a      	str	r2, [r7, #4]
 8008e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008e20:	2300      	movs	r3, #0
 8008e22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008e24:	f7ff ff5e 	bl	8008ce4 <__NVIC_GetPriorityGrouping>
 8008e28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	68b9      	ldr	r1, [r7, #8]
 8008e2e:	6978      	ldr	r0, [r7, #20]
 8008e30:	f7ff ff90 	bl	8008d54 <NVIC_EncodePriority>
 8008e34:	4602      	mov	r2, r0
 8008e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e3a:	4611      	mov	r1, r2
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7ff ff5f 	bl	8008d00 <__NVIC_SetPriority>
}
 8008e42:	bf00      	nop
 8008e44:	3718      	adds	r7, #24
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b082      	sub	sp, #8
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f7ff ffb0 	bl	8008db8 <SysTick_Config>
 8008e58:	4603      	mov	r3, r0
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3708      	adds	r7, #8
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
	...

08008e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b089      	sub	sp, #36	@ 0x24
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8008e72:	2300      	movs	r3, #0
 8008e74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8008e76:	2300      	movs	r3, #0
 8008e78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8008e7e:	2300      	movs	r3, #0
 8008e80:	61fb      	str	r3, [r7, #28]
 8008e82:	e175      	b.n	8009170 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008e84:	2201      	movs	r2, #1
 8008e86:	69fb      	ldr	r3, [r7, #28]
 8008e88:	fa02 f303 	lsl.w	r3, r2, r3
 8008e8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	697a      	ldr	r2, [r7, #20]
 8008e94:	4013      	ands	r3, r2
 8008e96:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8008e98:	693a      	ldr	r2, [r7, #16]
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	f040 8164 	bne.w	800916a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	f003 0303 	and.w	r3, r3, #3
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d005      	beq.n	8008eba <HAL_GPIO_Init+0x56>
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	f003 0303 	and.w	r3, r3, #3
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	d130      	bne.n	8008f1c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	005b      	lsls	r3, r3, #1
 8008ec4:	2203      	movs	r2, #3
 8008ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8008eca:	43db      	mvns	r3, r3
 8008ecc:	69ba      	ldr	r2, [r7, #24]
 8008ece:	4013      	ands	r3, r2
 8008ed0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	68da      	ldr	r2, [r3, #12]
 8008ed6:	69fb      	ldr	r3, [r7, #28]
 8008ed8:	005b      	lsls	r3, r3, #1
 8008eda:	fa02 f303 	lsl.w	r3, r2, r3
 8008ede:	69ba      	ldr	r2, [r7, #24]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	69ba      	ldr	r2, [r7, #24]
 8008ee8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ef8:	43db      	mvns	r3, r3
 8008efa:	69ba      	ldr	r2, [r7, #24]
 8008efc:	4013      	ands	r3, r2
 8008efe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	091b      	lsrs	r3, r3, #4
 8008f06:	f003 0201 	and.w	r2, r3, #1
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f10:	69ba      	ldr	r2, [r7, #24]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	69ba      	ldr	r2, [r7, #24]
 8008f1a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	f003 0303 	and.w	r3, r3, #3
 8008f24:	2b03      	cmp	r3, #3
 8008f26:	d017      	beq.n	8008f58 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	005b      	lsls	r3, r3, #1
 8008f32:	2203      	movs	r2, #3
 8008f34:	fa02 f303 	lsl.w	r3, r2, r3
 8008f38:	43db      	mvns	r3, r3
 8008f3a:	69ba      	ldr	r2, [r7, #24]
 8008f3c:	4013      	ands	r3, r2
 8008f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	689a      	ldr	r2, [r3, #8]
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	005b      	lsls	r3, r3, #1
 8008f48:	fa02 f303 	lsl.w	r3, r2, r3
 8008f4c:	69ba      	ldr	r2, [r7, #24]
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	69ba      	ldr	r2, [r7, #24]
 8008f56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	f003 0303 	and.w	r3, r3, #3
 8008f60:	2b02      	cmp	r3, #2
 8008f62:	d123      	bne.n	8008fac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8008f64:	69fb      	ldr	r3, [r7, #28]
 8008f66:	08da      	lsrs	r2, r3, #3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	3208      	adds	r2, #8
 8008f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	f003 0307 	and.w	r3, r3, #7
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	220f      	movs	r2, #15
 8008f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f80:	43db      	mvns	r3, r3
 8008f82:	69ba      	ldr	r2, [r7, #24]
 8008f84:	4013      	ands	r3, r2
 8008f86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	691a      	ldr	r2, [r3, #16]
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	f003 0307 	and.w	r3, r3, #7
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	fa02 f303 	lsl.w	r3, r2, r3
 8008f98:	69ba      	ldr	r2, [r7, #24]
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	08da      	lsrs	r2, r3, #3
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	3208      	adds	r2, #8
 8008fa6:	69b9      	ldr	r1, [r7, #24]
 8008fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008fb2:	69fb      	ldr	r3, [r7, #28]
 8008fb4:	005b      	lsls	r3, r3, #1
 8008fb6:	2203      	movs	r2, #3
 8008fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8008fbc:	43db      	mvns	r3, r3
 8008fbe:	69ba      	ldr	r2, [r7, #24]
 8008fc0:	4013      	ands	r3, r2
 8008fc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	f003 0203 	and.w	r2, r3, #3
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	005b      	lsls	r3, r3, #1
 8008fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd4:	69ba      	ldr	r2, [r7, #24]
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	69ba      	ldr	r2, [r7, #24]
 8008fde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	f000 80be 	beq.w	800916a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008fee:	4b65      	ldr	r3, [pc, #404]	@ (8009184 <HAL_GPIO_Init+0x320>)
 8008ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ff2:	4a64      	ldr	r2, [pc, #400]	@ (8009184 <HAL_GPIO_Init+0x320>)
 8008ff4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008ff8:	6453      	str	r3, [r2, #68]	@ 0x44
 8008ffa:	4b62      	ldr	r3, [pc, #392]	@ (8009184 <HAL_GPIO_Init+0x320>)
 8008ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009002:	60fb      	str	r3, [r7, #12]
 8009004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8009006:	4a60      	ldr	r2, [pc, #384]	@ (8009188 <HAL_GPIO_Init+0x324>)
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	089b      	lsrs	r3, r3, #2
 800900c:	3302      	adds	r3, #2
 800900e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009012:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009014:	69fb      	ldr	r3, [r7, #28]
 8009016:	f003 0303 	and.w	r3, r3, #3
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	220f      	movs	r2, #15
 800901e:	fa02 f303 	lsl.w	r3, r2, r3
 8009022:	43db      	mvns	r3, r3
 8009024:	69ba      	ldr	r2, [r7, #24]
 8009026:	4013      	ands	r3, r2
 8009028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4a57      	ldr	r2, [pc, #348]	@ (800918c <HAL_GPIO_Init+0x328>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d037      	beq.n	80090a2 <HAL_GPIO_Init+0x23e>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a56      	ldr	r2, [pc, #344]	@ (8009190 <HAL_GPIO_Init+0x32c>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d031      	beq.n	800909e <HAL_GPIO_Init+0x23a>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a55      	ldr	r2, [pc, #340]	@ (8009194 <HAL_GPIO_Init+0x330>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d02b      	beq.n	800909a <HAL_GPIO_Init+0x236>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a54      	ldr	r2, [pc, #336]	@ (8009198 <HAL_GPIO_Init+0x334>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d025      	beq.n	8009096 <HAL_GPIO_Init+0x232>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4a53      	ldr	r2, [pc, #332]	@ (800919c <HAL_GPIO_Init+0x338>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d01f      	beq.n	8009092 <HAL_GPIO_Init+0x22e>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	4a52      	ldr	r2, [pc, #328]	@ (80091a0 <HAL_GPIO_Init+0x33c>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d019      	beq.n	800908e <HAL_GPIO_Init+0x22a>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	4a51      	ldr	r2, [pc, #324]	@ (80091a4 <HAL_GPIO_Init+0x340>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d013      	beq.n	800908a <HAL_GPIO_Init+0x226>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4a50      	ldr	r2, [pc, #320]	@ (80091a8 <HAL_GPIO_Init+0x344>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d00d      	beq.n	8009086 <HAL_GPIO_Init+0x222>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	4a4f      	ldr	r2, [pc, #316]	@ (80091ac <HAL_GPIO_Init+0x348>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d007      	beq.n	8009082 <HAL_GPIO_Init+0x21e>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	4a4e      	ldr	r2, [pc, #312]	@ (80091b0 <HAL_GPIO_Init+0x34c>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d101      	bne.n	800907e <HAL_GPIO_Init+0x21a>
 800907a:	2309      	movs	r3, #9
 800907c:	e012      	b.n	80090a4 <HAL_GPIO_Init+0x240>
 800907e:	230a      	movs	r3, #10
 8009080:	e010      	b.n	80090a4 <HAL_GPIO_Init+0x240>
 8009082:	2308      	movs	r3, #8
 8009084:	e00e      	b.n	80090a4 <HAL_GPIO_Init+0x240>
 8009086:	2307      	movs	r3, #7
 8009088:	e00c      	b.n	80090a4 <HAL_GPIO_Init+0x240>
 800908a:	2306      	movs	r3, #6
 800908c:	e00a      	b.n	80090a4 <HAL_GPIO_Init+0x240>
 800908e:	2305      	movs	r3, #5
 8009090:	e008      	b.n	80090a4 <HAL_GPIO_Init+0x240>
 8009092:	2304      	movs	r3, #4
 8009094:	e006      	b.n	80090a4 <HAL_GPIO_Init+0x240>
 8009096:	2303      	movs	r3, #3
 8009098:	e004      	b.n	80090a4 <HAL_GPIO_Init+0x240>
 800909a:	2302      	movs	r3, #2
 800909c:	e002      	b.n	80090a4 <HAL_GPIO_Init+0x240>
 800909e:	2301      	movs	r3, #1
 80090a0:	e000      	b.n	80090a4 <HAL_GPIO_Init+0x240>
 80090a2:	2300      	movs	r3, #0
 80090a4:	69fa      	ldr	r2, [r7, #28]
 80090a6:	f002 0203 	and.w	r2, r2, #3
 80090aa:	0092      	lsls	r2, r2, #2
 80090ac:	4093      	lsls	r3, r2
 80090ae:	69ba      	ldr	r2, [r7, #24]
 80090b0:	4313      	orrs	r3, r2
 80090b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80090b4:	4934      	ldr	r1, [pc, #208]	@ (8009188 <HAL_GPIO_Init+0x324>)
 80090b6:	69fb      	ldr	r3, [r7, #28]
 80090b8:	089b      	lsrs	r3, r3, #2
 80090ba:	3302      	adds	r3, #2
 80090bc:	69ba      	ldr	r2, [r7, #24]
 80090be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80090c2:	4b3c      	ldr	r3, [pc, #240]	@ (80091b4 <HAL_GPIO_Init+0x350>)
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	43db      	mvns	r3, r3
 80090cc:	69ba      	ldr	r2, [r7, #24]
 80090ce:	4013      	ands	r3, r2
 80090d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d003      	beq.n	80090e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80090de:	69ba      	ldr	r2, [r7, #24]
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	4313      	orrs	r3, r2
 80090e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80090e6:	4a33      	ldr	r2, [pc, #204]	@ (80091b4 <HAL_GPIO_Init+0x350>)
 80090e8:	69bb      	ldr	r3, [r7, #24]
 80090ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80090ec:	4b31      	ldr	r3, [pc, #196]	@ (80091b4 <HAL_GPIO_Init+0x350>)
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	43db      	mvns	r3, r3
 80090f6:	69ba      	ldr	r2, [r7, #24]
 80090f8:	4013      	ands	r3, r2
 80090fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009104:	2b00      	cmp	r3, #0
 8009106:	d003      	beq.n	8009110 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009108:	69ba      	ldr	r2, [r7, #24]
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	4313      	orrs	r3, r2
 800910e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009110:	4a28      	ldr	r2, [pc, #160]	@ (80091b4 <HAL_GPIO_Init+0x350>)
 8009112:	69bb      	ldr	r3, [r7, #24]
 8009114:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009116:	4b27      	ldr	r3, [pc, #156]	@ (80091b4 <HAL_GPIO_Init+0x350>)
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	43db      	mvns	r3, r3
 8009120:	69ba      	ldr	r2, [r7, #24]
 8009122:	4013      	ands	r3, r2
 8009124:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800912e:	2b00      	cmp	r3, #0
 8009130:	d003      	beq.n	800913a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009132:	69ba      	ldr	r2, [r7, #24]
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	4313      	orrs	r3, r2
 8009138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800913a:	4a1e      	ldr	r2, [pc, #120]	@ (80091b4 <HAL_GPIO_Init+0x350>)
 800913c:	69bb      	ldr	r3, [r7, #24]
 800913e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009140:	4b1c      	ldr	r3, [pc, #112]	@ (80091b4 <HAL_GPIO_Init+0x350>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	43db      	mvns	r3, r3
 800914a:	69ba      	ldr	r2, [r7, #24]
 800914c:	4013      	ands	r3, r2
 800914e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009158:	2b00      	cmp	r3, #0
 800915a:	d003      	beq.n	8009164 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800915c:	69ba      	ldr	r2, [r7, #24]
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	4313      	orrs	r3, r2
 8009162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009164:	4a13      	ldr	r2, [pc, #76]	@ (80091b4 <HAL_GPIO_Init+0x350>)
 8009166:	69bb      	ldr	r3, [r7, #24]
 8009168:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800916a:	69fb      	ldr	r3, [r7, #28]
 800916c:	3301      	adds	r3, #1
 800916e:	61fb      	str	r3, [r7, #28]
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	2b0f      	cmp	r3, #15
 8009174:	f67f ae86 	bls.w	8008e84 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8009178:	bf00      	nop
 800917a:	bf00      	nop
 800917c:	3724      	adds	r7, #36	@ 0x24
 800917e:	46bd      	mov	sp, r7
 8009180:	bc80      	pop	{r7}
 8009182:	4770      	bx	lr
 8009184:	40023800 	.word	0x40023800
 8009188:	40013800 	.word	0x40013800
 800918c:	40020000 	.word	0x40020000
 8009190:	40020400 	.word	0x40020400
 8009194:	40020800 	.word	0x40020800
 8009198:	40020c00 	.word	0x40020c00
 800919c:	40021000 	.word	0x40021000
 80091a0:	40021400 	.word	0x40021400
 80091a4:	40021800 	.word	0x40021800
 80091a8:	40021c00 	.word	0x40021c00
 80091ac:	40022000 	.word	0x40022000
 80091b0:	40022400 	.word	0x40022400
 80091b4:	40013c00 	.word	0x40013c00

080091b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	460b      	mov	r3, r1
 80091c2:	807b      	strh	r3, [r7, #2]
 80091c4:	4613      	mov	r3, r2
 80091c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80091c8:	787b      	ldrb	r3, [r7, #1]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d003      	beq.n	80091d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80091ce:	887a      	ldrh	r2, [r7, #2]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80091d4:	e003      	b.n	80091de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80091d6:	887b      	ldrh	r3, [r7, #2]
 80091d8:	041a      	lsls	r2, r3, #16
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	619a      	str	r2, [r3, #24]
}
 80091de:	bf00      	nop
 80091e0:	370c      	adds	r7, #12
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bc80      	pop	{r7}
 80091e6:	4770      	bx	lr

080091e8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b085      	sub	sp, #20
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	460b      	mov	r3, r1
 80091f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	695b      	ldr	r3, [r3, #20]
 80091f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80091fa:	887a      	ldrh	r2, [r7, #2]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	4013      	ands	r3, r2
 8009200:	041a      	lsls	r2, r3, #16
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	43d9      	mvns	r1, r3
 8009206:	887b      	ldrh	r3, [r7, #2]
 8009208:	400b      	ands	r3, r1
 800920a:	431a      	orrs	r2, r3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	619a      	str	r2, [r3, #24]
}
 8009210:	bf00      	nop
 8009212:	3714      	adds	r7, #20
 8009214:	46bd      	mov	sp, r7
 8009216:	bc80      	pop	{r7}
 8009218:	4770      	bx	lr
	...

0800921c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8009222:	2300      	movs	r3, #0
 8009224:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009226:	4b23      	ldr	r3, [pc, #140]	@ (80092b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8009228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800922a:	4a22      	ldr	r2, [pc, #136]	@ (80092b4 <HAL_PWREx_EnableOverDrive+0x98>)
 800922c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009230:	6413      	str	r3, [r2, #64]	@ 0x40
 8009232:	4b20      	ldr	r3, [pc, #128]	@ (80092b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8009234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800923a:	603b      	str	r3, [r7, #0]
 800923c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800923e:	4b1e      	ldr	r3, [pc, #120]	@ (80092b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a1d      	ldr	r2, [pc, #116]	@ (80092b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009248:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800924a:	f7ff fcf9 	bl	8008c40 <HAL_GetTick>
 800924e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009250:	e009      	b.n	8009266 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009252:	f7ff fcf5 	bl	8008c40 <HAL_GetTick>
 8009256:	4602      	mov	r2, r0
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	1ad3      	subs	r3, r2, r3
 800925c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009260:	d901      	bls.n	8009266 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8009262:	2303      	movs	r3, #3
 8009264:	e022      	b.n	80092ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009266:	4b14      	ldr	r3, [pc, #80]	@ (80092b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800926e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009272:	d1ee      	bne.n	8009252 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009274:	4b10      	ldr	r3, [pc, #64]	@ (80092b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a0f      	ldr	r2, [pc, #60]	@ (80092b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800927a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800927e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009280:	f7ff fcde 	bl	8008c40 <HAL_GetTick>
 8009284:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009286:	e009      	b.n	800929c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009288:	f7ff fcda 	bl	8008c40 <HAL_GetTick>
 800928c:	4602      	mov	r2, r0
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	1ad3      	subs	r3, r2, r3
 8009292:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009296:	d901      	bls.n	800929c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8009298:	2303      	movs	r3, #3
 800929a:	e007      	b.n	80092ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800929c:	4b06      	ldr	r3, [pc, #24]	@ (80092b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092a8:	d1ee      	bne.n	8009288 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80092aa:	2300      	movs	r3, #0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3708      	adds	r7, #8
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	40023800 	.word	0x40023800
 80092b8:	40007000 	.word	0x40007000

080092bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b086      	sub	sp, #24
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80092c4:	2300      	movs	r3, #0
 80092c6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d101      	bne.n	80092d2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80092ce:	2301      	movs	r3, #1
 80092d0:	e291      	b.n	80097f6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f003 0301 	and.w	r3, r3, #1
 80092da:	2b00      	cmp	r3, #0
 80092dc:	f000 8087 	beq.w	80093ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80092e0:	4b96      	ldr	r3, [pc, #600]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	f003 030c 	and.w	r3, r3, #12
 80092e8:	2b04      	cmp	r3, #4
 80092ea:	d00c      	beq.n	8009306 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80092ec:	4b93      	ldr	r3, [pc, #588]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	f003 030c 	and.w	r3, r3, #12
 80092f4:	2b08      	cmp	r3, #8
 80092f6:	d112      	bne.n	800931e <HAL_RCC_OscConfig+0x62>
 80092f8:	4b90      	ldr	r3, [pc, #576]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009300:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009304:	d10b      	bne.n	800931e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009306:	4b8d      	ldr	r3, [pc, #564]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800930e:	2b00      	cmp	r3, #0
 8009310:	d06c      	beq.n	80093ec <HAL_RCC_OscConfig+0x130>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d168      	bne.n	80093ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800931a:	2301      	movs	r3, #1
 800931c:	e26b      	b.n	80097f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009326:	d106      	bne.n	8009336 <HAL_RCC_OscConfig+0x7a>
 8009328:	4b84      	ldr	r3, [pc, #528]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a83      	ldr	r2, [pc, #524]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 800932e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009332:	6013      	str	r3, [r2, #0]
 8009334:	e02e      	b.n	8009394 <HAL_RCC_OscConfig+0xd8>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d10c      	bne.n	8009358 <HAL_RCC_OscConfig+0x9c>
 800933e:	4b7f      	ldr	r3, [pc, #508]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4a7e      	ldr	r2, [pc, #504]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 8009344:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009348:	6013      	str	r3, [r2, #0]
 800934a:	4b7c      	ldr	r3, [pc, #496]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a7b      	ldr	r2, [pc, #492]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 8009350:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009354:	6013      	str	r3, [r2, #0]
 8009356:	e01d      	b.n	8009394 <HAL_RCC_OscConfig+0xd8>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009360:	d10c      	bne.n	800937c <HAL_RCC_OscConfig+0xc0>
 8009362:	4b76      	ldr	r3, [pc, #472]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a75      	ldr	r2, [pc, #468]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 8009368:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800936c:	6013      	str	r3, [r2, #0]
 800936e:	4b73      	ldr	r3, [pc, #460]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a72      	ldr	r2, [pc, #456]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 8009374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009378:	6013      	str	r3, [r2, #0]
 800937a:	e00b      	b.n	8009394 <HAL_RCC_OscConfig+0xd8>
 800937c:	4b6f      	ldr	r3, [pc, #444]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a6e      	ldr	r2, [pc, #440]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 8009382:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009386:	6013      	str	r3, [r2, #0]
 8009388:	4b6c      	ldr	r3, [pc, #432]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4a6b      	ldr	r2, [pc, #428]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 800938e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d013      	beq.n	80093c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800939c:	f7ff fc50 	bl	8008c40 <HAL_GetTick>
 80093a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80093a2:	e008      	b.n	80093b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80093a4:	f7ff fc4c 	bl	8008c40 <HAL_GetTick>
 80093a8:	4602      	mov	r2, r0
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	1ad3      	subs	r3, r2, r3
 80093ae:	2b64      	cmp	r3, #100	@ 0x64
 80093b0:	d901      	bls.n	80093b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80093b2:	2303      	movs	r3, #3
 80093b4:	e21f      	b.n	80097f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80093b6:	4b61      	ldr	r3, [pc, #388]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d0f0      	beq.n	80093a4 <HAL_RCC_OscConfig+0xe8>
 80093c2:	e014      	b.n	80093ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093c4:	f7ff fc3c 	bl	8008c40 <HAL_GetTick>
 80093c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80093ca:	e008      	b.n	80093de <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80093cc:	f7ff fc38 	bl	8008c40 <HAL_GetTick>
 80093d0:	4602      	mov	r2, r0
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	1ad3      	subs	r3, r2, r3
 80093d6:	2b64      	cmp	r3, #100	@ 0x64
 80093d8:	d901      	bls.n	80093de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80093da:	2303      	movs	r3, #3
 80093dc:	e20b      	b.n	80097f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80093de:	4b57      	ldr	r3, [pc, #348]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d1f0      	bne.n	80093cc <HAL_RCC_OscConfig+0x110>
 80093ea:	e000      	b.n	80093ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80093ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f003 0302 	and.w	r3, r3, #2
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d069      	beq.n	80094ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80093fa:	4b50      	ldr	r3, [pc, #320]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	f003 030c 	and.w	r3, r3, #12
 8009402:	2b00      	cmp	r3, #0
 8009404:	d00b      	beq.n	800941e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009406:	4b4d      	ldr	r3, [pc, #308]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	f003 030c 	and.w	r3, r3, #12
 800940e:	2b08      	cmp	r3, #8
 8009410:	d11c      	bne.n	800944c <HAL_RCC_OscConfig+0x190>
 8009412:	4b4a      	ldr	r3, [pc, #296]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800941a:	2b00      	cmp	r3, #0
 800941c:	d116      	bne.n	800944c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800941e:	4b47      	ldr	r3, [pc, #284]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f003 0302 	and.w	r3, r3, #2
 8009426:	2b00      	cmp	r3, #0
 8009428:	d005      	beq.n	8009436 <HAL_RCC_OscConfig+0x17a>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	2b01      	cmp	r3, #1
 8009430:	d001      	beq.n	8009436 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009432:	2301      	movs	r3, #1
 8009434:	e1df      	b.n	80097f6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009436:	4b41      	ldr	r3, [pc, #260]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	00db      	lsls	r3, r3, #3
 8009444:	493d      	ldr	r1, [pc, #244]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 8009446:	4313      	orrs	r3, r2
 8009448:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800944a:	e040      	b.n	80094ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d023      	beq.n	800949c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009454:	4b39      	ldr	r3, [pc, #228]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a38      	ldr	r2, [pc, #224]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 800945a:	f043 0301 	orr.w	r3, r3, #1
 800945e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009460:	f7ff fbee 	bl	8008c40 <HAL_GetTick>
 8009464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009466:	e008      	b.n	800947a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009468:	f7ff fbea 	bl	8008c40 <HAL_GetTick>
 800946c:	4602      	mov	r2, r0
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	1ad3      	subs	r3, r2, r3
 8009472:	2b02      	cmp	r3, #2
 8009474:	d901      	bls.n	800947a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8009476:	2303      	movs	r3, #3
 8009478:	e1bd      	b.n	80097f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800947a:	4b30      	ldr	r3, [pc, #192]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f003 0302 	and.w	r3, r3, #2
 8009482:	2b00      	cmp	r3, #0
 8009484:	d0f0      	beq.n	8009468 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009486:	4b2d      	ldr	r3, [pc, #180]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	00db      	lsls	r3, r3, #3
 8009494:	4929      	ldr	r1, [pc, #164]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 8009496:	4313      	orrs	r3, r2
 8009498:	600b      	str	r3, [r1, #0]
 800949a:	e018      	b.n	80094ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800949c:	4b27      	ldr	r3, [pc, #156]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a26      	ldr	r2, [pc, #152]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 80094a2:	f023 0301 	bic.w	r3, r3, #1
 80094a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094a8:	f7ff fbca 	bl	8008c40 <HAL_GetTick>
 80094ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80094ae:	e008      	b.n	80094c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80094b0:	f7ff fbc6 	bl	8008c40 <HAL_GetTick>
 80094b4:	4602      	mov	r2, r0
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	1ad3      	subs	r3, r2, r3
 80094ba:	2b02      	cmp	r3, #2
 80094bc:	d901      	bls.n	80094c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80094be:	2303      	movs	r3, #3
 80094c0:	e199      	b.n	80097f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80094c2:	4b1e      	ldr	r3, [pc, #120]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f003 0302 	and.w	r3, r3, #2
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1f0      	bne.n	80094b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f003 0308 	and.w	r3, r3, #8
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d038      	beq.n	800954c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	695b      	ldr	r3, [r3, #20]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d019      	beq.n	8009516 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80094e2:	4b16      	ldr	r3, [pc, #88]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 80094e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094e6:	4a15      	ldr	r2, [pc, #84]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 80094e8:	f043 0301 	orr.w	r3, r3, #1
 80094ec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094ee:	f7ff fba7 	bl	8008c40 <HAL_GetTick>
 80094f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80094f4:	e008      	b.n	8009508 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80094f6:	f7ff fba3 	bl	8008c40 <HAL_GetTick>
 80094fa:	4602      	mov	r2, r0
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	1ad3      	subs	r3, r2, r3
 8009500:	2b02      	cmp	r3, #2
 8009502:	d901      	bls.n	8009508 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009504:	2303      	movs	r3, #3
 8009506:	e176      	b.n	80097f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009508:	4b0c      	ldr	r3, [pc, #48]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 800950a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800950c:	f003 0302 	and.w	r3, r3, #2
 8009510:	2b00      	cmp	r3, #0
 8009512:	d0f0      	beq.n	80094f6 <HAL_RCC_OscConfig+0x23a>
 8009514:	e01a      	b.n	800954c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009516:	4b09      	ldr	r3, [pc, #36]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 8009518:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800951a:	4a08      	ldr	r2, [pc, #32]	@ (800953c <HAL_RCC_OscConfig+0x280>)
 800951c:	f023 0301 	bic.w	r3, r3, #1
 8009520:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009522:	f7ff fb8d 	bl	8008c40 <HAL_GetTick>
 8009526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009528:	e00a      	b.n	8009540 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800952a:	f7ff fb89 	bl	8008c40 <HAL_GetTick>
 800952e:	4602      	mov	r2, r0
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	1ad3      	subs	r3, r2, r3
 8009534:	2b02      	cmp	r3, #2
 8009536:	d903      	bls.n	8009540 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009538:	2303      	movs	r3, #3
 800953a:	e15c      	b.n	80097f6 <HAL_RCC_OscConfig+0x53a>
 800953c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009540:	4b91      	ldr	r3, [pc, #580]	@ (8009788 <HAL_RCC_OscConfig+0x4cc>)
 8009542:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009544:	f003 0302 	and.w	r3, r3, #2
 8009548:	2b00      	cmp	r3, #0
 800954a:	d1ee      	bne.n	800952a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f003 0304 	and.w	r3, r3, #4
 8009554:	2b00      	cmp	r3, #0
 8009556:	f000 80a4 	beq.w	80096a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800955a:	4b8b      	ldr	r3, [pc, #556]	@ (8009788 <HAL_RCC_OscConfig+0x4cc>)
 800955c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800955e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009562:	2b00      	cmp	r3, #0
 8009564:	d10d      	bne.n	8009582 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8009566:	4b88      	ldr	r3, [pc, #544]	@ (8009788 <HAL_RCC_OscConfig+0x4cc>)
 8009568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800956a:	4a87      	ldr	r2, [pc, #540]	@ (8009788 <HAL_RCC_OscConfig+0x4cc>)
 800956c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009570:	6413      	str	r3, [r2, #64]	@ 0x40
 8009572:	4b85      	ldr	r3, [pc, #532]	@ (8009788 <HAL_RCC_OscConfig+0x4cc>)
 8009574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800957a:	60bb      	str	r3, [r7, #8]
 800957c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800957e:	2301      	movs	r3, #1
 8009580:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009582:	4b82      	ldr	r3, [pc, #520]	@ (800978c <HAL_RCC_OscConfig+0x4d0>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800958a:	2b00      	cmp	r3, #0
 800958c:	d118      	bne.n	80095c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800958e:	4b7f      	ldr	r3, [pc, #508]	@ (800978c <HAL_RCC_OscConfig+0x4d0>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a7e      	ldr	r2, [pc, #504]	@ (800978c <HAL_RCC_OscConfig+0x4d0>)
 8009594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800959a:	f7ff fb51 	bl	8008c40 <HAL_GetTick>
 800959e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80095a0:	e008      	b.n	80095b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80095a2:	f7ff fb4d 	bl	8008c40 <HAL_GetTick>
 80095a6:	4602      	mov	r2, r0
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	1ad3      	subs	r3, r2, r3
 80095ac:	2b64      	cmp	r3, #100	@ 0x64
 80095ae:	d901      	bls.n	80095b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80095b0:	2303      	movs	r3, #3
 80095b2:	e120      	b.n	80097f6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80095b4:	4b75      	ldr	r3, [pc, #468]	@ (800978c <HAL_RCC_OscConfig+0x4d0>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d0f0      	beq.n	80095a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d106      	bne.n	80095d6 <HAL_RCC_OscConfig+0x31a>
 80095c8:	4b6f      	ldr	r3, [pc, #444]	@ (8009788 <HAL_RCC_OscConfig+0x4cc>)
 80095ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095cc:	4a6e      	ldr	r2, [pc, #440]	@ (8009788 <HAL_RCC_OscConfig+0x4cc>)
 80095ce:	f043 0301 	orr.w	r3, r3, #1
 80095d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80095d4:	e02d      	b.n	8009632 <HAL_RCC_OscConfig+0x376>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d10c      	bne.n	80095f8 <HAL_RCC_OscConfig+0x33c>
 80095de:	4b6a      	ldr	r3, [pc, #424]	@ (8009788 <HAL_RCC_OscConfig+0x4cc>)
 80095e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095e2:	4a69      	ldr	r2, [pc, #420]	@ (8009788 <HAL_RCC_OscConfig+0x4cc>)
 80095e4:	f023 0301 	bic.w	r3, r3, #1
 80095e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80095ea:	4b67      	ldr	r3, [pc, #412]	@ (8009788 <HAL_RCC_OscConfig+0x4cc>)
 80095ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095ee:	4a66      	ldr	r2, [pc, #408]	@ (8009788 <HAL_RCC_OscConfig+0x4cc>)
 80095f0:	f023 0304 	bic.w	r3, r3, #4
 80095f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80095f6:	e01c      	b.n	8009632 <HAL_RCC_OscConfig+0x376>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	2b05      	cmp	r3, #5
 80095fe:	d10c      	bne.n	800961a <HAL_RCC_OscConfig+0x35e>
 8009600:	4b61      	ldr	r3, [pc, #388]	@ (8009788 <HAL_RCC_OscConfig+0x4cc>)
 8009602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009604:	4a60      	ldr	r2, [pc, #384]	@ (8009788 <HAL_RCC_OscConfig+0x4cc>)
 8009606:	f043 0304 	orr.w	r3, r3, #4
 800960a:	6713      	str	r3, [r2, #112]	@ 0x70
 800960c:	4b5e      	ldr	r3, [pc, #376]	@ (8009788 <HAL_RCC_OscConfig+0x4cc>)
 800960e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009610:	4a5d      	ldr	r2, [pc, #372]	@ (8009788 <HAL_RCC_OscConfig+0x4cc>)
 8009612:	f043 0301 	orr.w	r3, r3, #1
 8009616:	6713      	str	r3, [r2, #112]	@ 0x70
 8009618:	e00b      	b.n	8009632 <HAL_RCC_OscConfig+0x376>
 800961a:	4b5b      	ldr	r3, [pc, #364]	@ (8009788 <HAL_RCC_OscConfig+0x4cc>)
 800961c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800961e:	4a5a      	ldr	r2, [pc, #360]	@ (8009788 <HAL_RCC_OscConfig+0x4cc>)
 8009620:	f023 0301 	bic.w	r3, r3, #1
 8009624:	6713      	str	r3, [r2, #112]	@ 0x70
 8009626:	4b58      	ldr	r3, [pc, #352]	@ (8009788 <HAL_RCC_OscConfig+0x4cc>)
 8009628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800962a:	4a57      	ldr	r2, [pc, #348]	@ (8009788 <HAL_RCC_OscConfig+0x4cc>)
 800962c:	f023 0304 	bic.w	r3, r3, #4
 8009630:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	689b      	ldr	r3, [r3, #8]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d015      	beq.n	8009666 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800963a:	f7ff fb01 	bl	8008c40 <HAL_GetTick>
 800963e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009640:	e00a      	b.n	8009658 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009642:	f7ff fafd 	bl	8008c40 <HAL_GetTick>
 8009646:	4602      	mov	r2, r0
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	1ad3      	subs	r3, r2, r3
 800964c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009650:	4293      	cmp	r3, r2
 8009652:	d901      	bls.n	8009658 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8009654:	2303      	movs	r3, #3
 8009656:	e0ce      	b.n	80097f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009658:	4b4b      	ldr	r3, [pc, #300]	@ (8009788 <HAL_RCC_OscConfig+0x4cc>)
 800965a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800965c:	f003 0302 	and.w	r3, r3, #2
 8009660:	2b00      	cmp	r3, #0
 8009662:	d0ee      	beq.n	8009642 <HAL_RCC_OscConfig+0x386>
 8009664:	e014      	b.n	8009690 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009666:	f7ff faeb 	bl	8008c40 <HAL_GetTick>
 800966a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800966c:	e00a      	b.n	8009684 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800966e:	f7ff fae7 	bl	8008c40 <HAL_GetTick>
 8009672:	4602      	mov	r2, r0
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	1ad3      	subs	r3, r2, r3
 8009678:	f241 3288 	movw	r2, #5000	@ 0x1388
 800967c:	4293      	cmp	r3, r2
 800967e:	d901      	bls.n	8009684 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8009680:	2303      	movs	r3, #3
 8009682:	e0b8      	b.n	80097f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009684:	4b40      	ldr	r3, [pc, #256]	@ (8009788 <HAL_RCC_OscConfig+0x4cc>)
 8009686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009688:	f003 0302 	and.w	r3, r3, #2
 800968c:	2b00      	cmp	r3, #0
 800968e:	d1ee      	bne.n	800966e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009690:	7dfb      	ldrb	r3, [r7, #23]
 8009692:	2b01      	cmp	r3, #1
 8009694:	d105      	bne.n	80096a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009696:	4b3c      	ldr	r3, [pc, #240]	@ (8009788 <HAL_RCC_OscConfig+0x4cc>)
 8009698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800969a:	4a3b      	ldr	r2, [pc, #236]	@ (8009788 <HAL_RCC_OscConfig+0x4cc>)
 800969c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80096a0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	699b      	ldr	r3, [r3, #24]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	f000 80a4 	beq.w	80097f4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80096ac:	4b36      	ldr	r3, [pc, #216]	@ (8009788 <HAL_RCC_OscConfig+0x4cc>)
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	f003 030c 	and.w	r3, r3, #12
 80096b4:	2b08      	cmp	r3, #8
 80096b6:	d06b      	beq.n	8009790 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	699b      	ldr	r3, [r3, #24]
 80096bc:	2b02      	cmp	r3, #2
 80096be:	d149      	bne.n	8009754 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80096c0:	4b31      	ldr	r3, [pc, #196]	@ (8009788 <HAL_RCC_OscConfig+0x4cc>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a30      	ldr	r2, [pc, #192]	@ (8009788 <HAL_RCC_OscConfig+0x4cc>)
 80096c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80096ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096cc:	f7ff fab8 	bl	8008c40 <HAL_GetTick>
 80096d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80096d2:	e008      	b.n	80096e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80096d4:	f7ff fab4 	bl	8008c40 <HAL_GetTick>
 80096d8:	4602      	mov	r2, r0
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	1ad3      	subs	r3, r2, r3
 80096de:	2b02      	cmp	r3, #2
 80096e0:	d901      	bls.n	80096e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80096e2:	2303      	movs	r3, #3
 80096e4:	e087      	b.n	80097f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80096e6:	4b28      	ldr	r3, [pc, #160]	@ (8009788 <HAL_RCC_OscConfig+0x4cc>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d1f0      	bne.n	80096d4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	69da      	ldr	r2, [r3, #28]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a1b      	ldr	r3, [r3, #32]
 80096fa:	431a      	orrs	r2, r3
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009700:	019b      	lsls	r3, r3, #6
 8009702:	431a      	orrs	r2, r3
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009708:	085b      	lsrs	r3, r3, #1
 800970a:	3b01      	subs	r3, #1
 800970c:	041b      	lsls	r3, r3, #16
 800970e:	431a      	orrs	r2, r3
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009714:	061b      	lsls	r3, r3, #24
 8009716:	4313      	orrs	r3, r2
 8009718:	4a1b      	ldr	r2, [pc, #108]	@ (8009788 <HAL_RCC_OscConfig+0x4cc>)
 800971a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800971e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009720:	4b19      	ldr	r3, [pc, #100]	@ (8009788 <HAL_RCC_OscConfig+0x4cc>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a18      	ldr	r2, [pc, #96]	@ (8009788 <HAL_RCC_OscConfig+0x4cc>)
 8009726:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800972a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800972c:	f7ff fa88 	bl	8008c40 <HAL_GetTick>
 8009730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009732:	e008      	b.n	8009746 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009734:	f7ff fa84 	bl	8008c40 <HAL_GetTick>
 8009738:	4602      	mov	r2, r0
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	1ad3      	subs	r3, r2, r3
 800973e:	2b02      	cmp	r3, #2
 8009740:	d901      	bls.n	8009746 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8009742:	2303      	movs	r3, #3
 8009744:	e057      	b.n	80097f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009746:	4b10      	ldr	r3, [pc, #64]	@ (8009788 <HAL_RCC_OscConfig+0x4cc>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800974e:	2b00      	cmp	r3, #0
 8009750:	d0f0      	beq.n	8009734 <HAL_RCC_OscConfig+0x478>
 8009752:	e04f      	b.n	80097f4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009754:	4b0c      	ldr	r3, [pc, #48]	@ (8009788 <HAL_RCC_OscConfig+0x4cc>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a0b      	ldr	r2, [pc, #44]	@ (8009788 <HAL_RCC_OscConfig+0x4cc>)
 800975a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800975e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009760:	f7ff fa6e 	bl	8008c40 <HAL_GetTick>
 8009764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009766:	e008      	b.n	800977a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009768:	f7ff fa6a 	bl	8008c40 <HAL_GetTick>
 800976c:	4602      	mov	r2, r0
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	1ad3      	subs	r3, r2, r3
 8009772:	2b02      	cmp	r3, #2
 8009774:	d901      	bls.n	800977a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8009776:	2303      	movs	r3, #3
 8009778:	e03d      	b.n	80097f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800977a:	4b03      	ldr	r3, [pc, #12]	@ (8009788 <HAL_RCC_OscConfig+0x4cc>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009782:	2b00      	cmp	r3, #0
 8009784:	d1f0      	bne.n	8009768 <HAL_RCC_OscConfig+0x4ac>
 8009786:	e035      	b.n	80097f4 <HAL_RCC_OscConfig+0x538>
 8009788:	40023800 	.word	0x40023800
 800978c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8009790:	4b1b      	ldr	r3, [pc, #108]	@ (8009800 <HAL_RCC_OscConfig+0x544>)
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	699b      	ldr	r3, [r3, #24]
 800979a:	2b01      	cmp	r3, #1
 800979c:	d028      	beq.n	80097f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d121      	bne.n	80097f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d11a      	bne.n	80097f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80097ba:	68fa      	ldr	r2, [r7, #12]
 80097bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80097c0:	4013      	ands	r3, r2
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80097c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d111      	bne.n	80097f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097d6:	085b      	lsrs	r3, r3, #1
 80097d8:	3b01      	subs	r3, #1
 80097da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80097dc:	429a      	cmp	r2, r3
 80097de:	d107      	bne.n	80097f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d001      	beq.n	80097f4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80097f0:	2301      	movs	r3, #1
 80097f2:	e000      	b.n	80097f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3718      	adds	r7, #24
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	40023800 	.word	0x40023800

08009804 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800980e:	2300      	movs	r3, #0
 8009810:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d101      	bne.n	800981c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009818:	2301      	movs	r3, #1
 800981a:	e0d0      	b.n	80099be <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800981c:	4b6a      	ldr	r3, [pc, #424]	@ (80099c8 <HAL_RCC_ClockConfig+0x1c4>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f003 030f 	and.w	r3, r3, #15
 8009824:	683a      	ldr	r2, [r7, #0]
 8009826:	429a      	cmp	r2, r3
 8009828:	d910      	bls.n	800984c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800982a:	4b67      	ldr	r3, [pc, #412]	@ (80099c8 <HAL_RCC_ClockConfig+0x1c4>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f023 020f 	bic.w	r2, r3, #15
 8009832:	4965      	ldr	r1, [pc, #404]	@ (80099c8 <HAL_RCC_ClockConfig+0x1c4>)
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	4313      	orrs	r3, r2
 8009838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800983a:	4b63      	ldr	r3, [pc, #396]	@ (80099c8 <HAL_RCC_ClockConfig+0x1c4>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f003 030f 	and.w	r3, r3, #15
 8009842:	683a      	ldr	r2, [r7, #0]
 8009844:	429a      	cmp	r2, r3
 8009846:	d001      	beq.n	800984c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	e0b8      	b.n	80099be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f003 0302 	and.w	r3, r3, #2
 8009854:	2b00      	cmp	r3, #0
 8009856:	d020      	beq.n	800989a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f003 0304 	and.w	r3, r3, #4
 8009860:	2b00      	cmp	r3, #0
 8009862:	d005      	beq.n	8009870 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009864:	4b59      	ldr	r3, [pc, #356]	@ (80099cc <HAL_RCC_ClockConfig+0x1c8>)
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	4a58      	ldr	r2, [pc, #352]	@ (80099cc <HAL_RCC_ClockConfig+0x1c8>)
 800986a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800986e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f003 0308 	and.w	r3, r3, #8
 8009878:	2b00      	cmp	r3, #0
 800987a:	d005      	beq.n	8009888 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800987c:	4b53      	ldr	r3, [pc, #332]	@ (80099cc <HAL_RCC_ClockConfig+0x1c8>)
 800987e:	689b      	ldr	r3, [r3, #8]
 8009880:	4a52      	ldr	r2, [pc, #328]	@ (80099cc <HAL_RCC_ClockConfig+0x1c8>)
 8009882:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009886:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009888:	4b50      	ldr	r3, [pc, #320]	@ (80099cc <HAL_RCC_ClockConfig+0x1c8>)
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	494d      	ldr	r1, [pc, #308]	@ (80099cc <HAL_RCC_ClockConfig+0x1c8>)
 8009896:	4313      	orrs	r3, r2
 8009898:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f003 0301 	and.w	r3, r3, #1
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d040      	beq.n	8009928 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d107      	bne.n	80098be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80098ae:	4b47      	ldr	r3, [pc, #284]	@ (80099cc <HAL_RCC_ClockConfig+0x1c8>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d115      	bne.n	80098e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80098ba:	2301      	movs	r3, #1
 80098bc:	e07f      	b.n	80099be <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	2b02      	cmp	r3, #2
 80098c4:	d107      	bne.n	80098d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80098c6:	4b41      	ldr	r3, [pc, #260]	@ (80099cc <HAL_RCC_ClockConfig+0x1c8>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d109      	bne.n	80098e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	e073      	b.n	80099be <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098d6:	4b3d      	ldr	r3, [pc, #244]	@ (80099cc <HAL_RCC_ClockConfig+0x1c8>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f003 0302 	and.w	r3, r3, #2
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d101      	bne.n	80098e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80098e2:	2301      	movs	r3, #1
 80098e4:	e06b      	b.n	80099be <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80098e6:	4b39      	ldr	r3, [pc, #228]	@ (80099cc <HAL_RCC_ClockConfig+0x1c8>)
 80098e8:	689b      	ldr	r3, [r3, #8]
 80098ea:	f023 0203 	bic.w	r2, r3, #3
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	4936      	ldr	r1, [pc, #216]	@ (80099cc <HAL_RCC_ClockConfig+0x1c8>)
 80098f4:	4313      	orrs	r3, r2
 80098f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098f8:	f7ff f9a2 	bl	8008c40 <HAL_GetTick>
 80098fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80098fe:	e00a      	b.n	8009916 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009900:	f7ff f99e 	bl	8008c40 <HAL_GetTick>
 8009904:	4602      	mov	r2, r0
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	1ad3      	subs	r3, r2, r3
 800990a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800990e:	4293      	cmp	r3, r2
 8009910:	d901      	bls.n	8009916 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8009912:	2303      	movs	r3, #3
 8009914:	e053      	b.n	80099be <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009916:	4b2d      	ldr	r3, [pc, #180]	@ (80099cc <HAL_RCC_ClockConfig+0x1c8>)
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	f003 020c 	and.w	r2, r3, #12
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	429a      	cmp	r2, r3
 8009926:	d1eb      	bne.n	8009900 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009928:	4b27      	ldr	r3, [pc, #156]	@ (80099c8 <HAL_RCC_ClockConfig+0x1c4>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f003 030f 	and.w	r3, r3, #15
 8009930:	683a      	ldr	r2, [r7, #0]
 8009932:	429a      	cmp	r2, r3
 8009934:	d210      	bcs.n	8009958 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009936:	4b24      	ldr	r3, [pc, #144]	@ (80099c8 <HAL_RCC_ClockConfig+0x1c4>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f023 020f 	bic.w	r2, r3, #15
 800993e:	4922      	ldr	r1, [pc, #136]	@ (80099c8 <HAL_RCC_ClockConfig+0x1c4>)
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	4313      	orrs	r3, r2
 8009944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009946:	4b20      	ldr	r3, [pc, #128]	@ (80099c8 <HAL_RCC_ClockConfig+0x1c4>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f003 030f 	and.w	r3, r3, #15
 800994e:	683a      	ldr	r2, [r7, #0]
 8009950:	429a      	cmp	r2, r3
 8009952:	d001      	beq.n	8009958 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	e032      	b.n	80099be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f003 0304 	and.w	r3, r3, #4
 8009960:	2b00      	cmp	r3, #0
 8009962:	d008      	beq.n	8009976 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009964:	4b19      	ldr	r3, [pc, #100]	@ (80099cc <HAL_RCC_ClockConfig+0x1c8>)
 8009966:	689b      	ldr	r3, [r3, #8]
 8009968:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	4916      	ldr	r1, [pc, #88]	@ (80099cc <HAL_RCC_ClockConfig+0x1c8>)
 8009972:	4313      	orrs	r3, r2
 8009974:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f003 0308 	and.w	r3, r3, #8
 800997e:	2b00      	cmp	r3, #0
 8009980:	d009      	beq.n	8009996 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009982:	4b12      	ldr	r3, [pc, #72]	@ (80099cc <HAL_RCC_ClockConfig+0x1c8>)
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	691b      	ldr	r3, [r3, #16]
 800998e:	00db      	lsls	r3, r3, #3
 8009990:	490e      	ldr	r1, [pc, #56]	@ (80099cc <HAL_RCC_ClockConfig+0x1c8>)
 8009992:	4313      	orrs	r3, r2
 8009994:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009996:	f000 f821 	bl	80099dc <HAL_RCC_GetSysClockFreq>
 800999a:	4602      	mov	r2, r0
 800999c:	4b0b      	ldr	r3, [pc, #44]	@ (80099cc <HAL_RCC_ClockConfig+0x1c8>)
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	091b      	lsrs	r3, r3, #4
 80099a2:	f003 030f 	and.w	r3, r3, #15
 80099a6:	490a      	ldr	r1, [pc, #40]	@ (80099d0 <HAL_RCC_ClockConfig+0x1cc>)
 80099a8:	5ccb      	ldrb	r3, [r1, r3]
 80099aa:	fa22 f303 	lsr.w	r3, r2, r3
 80099ae:	4a09      	ldr	r2, [pc, #36]	@ (80099d4 <HAL_RCC_ClockConfig+0x1d0>)
 80099b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80099b2:	4b09      	ldr	r3, [pc, #36]	@ (80099d8 <HAL_RCC_ClockConfig+0x1d4>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7ff f900 	bl	8008bbc <HAL_InitTick>

  return HAL_OK;
 80099bc:	2300      	movs	r3, #0
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3710      	adds	r7, #16
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	40023c00 	.word	0x40023c00
 80099cc:	40023800 	.word	0x40023800
 80099d0:	080146bc 	.word	0x080146bc
 80099d4:	20000000 	.word	0x20000000
 80099d8:	20000004 	.word	0x20000004

080099dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80099dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80099e0:	b094      	sub	sp, #80	@ 0x50
 80099e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80099e4:	2300      	movs	r3, #0
 80099e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80099e8:	2300      	movs	r3, #0
 80099ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099ec:	2300      	movs	r3, #0
 80099ee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80099f0:	2300      	movs	r3, #0
 80099f2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80099f4:	4b7c      	ldr	r3, [pc, #496]	@ (8009be8 <HAL_RCC_GetSysClockFreq+0x20c>)
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	f003 030c 	and.w	r3, r3, #12
 80099fc:	2b08      	cmp	r3, #8
 80099fe:	d00d      	beq.n	8009a1c <HAL_RCC_GetSysClockFreq+0x40>
 8009a00:	2b08      	cmp	r3, #8
 8009a02:	f200 80e7 	bhi.w	8009bd4 <HAL_RCC_GetSysClockFreq+0x1f8>
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d002      	beq.n	8009a10 <HAL_RCC_GetSysClockFreq+0x34>
 8009a0a:	2b04      	cmp	r3, #4
 8009a0c:	d003      	beq.n	8009a16 <HAL_RCC_GetSysClockFreq+0x3a>
 8009a0e:	e0e1      	b.n	8009bd4 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009a10:	4b76      	ldr	r3, [pc, #472]	@ (8009bec <HAL_RCC_GetSysClockFreq+0x210>)
 8009a12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009a14:	e0e1      	b.n	8009bda <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009a16:	4b76      	ldr	r3, [pc, #472]	@ (8009bf0 <HAL_RCC_GetSysClockFreq+0x214>)
 8009a18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009a1a:	e0de      	b.n	8009bda <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009a1c:	4b72      	ldr	r3, [pc, #456]	@ (8009be8 <HAL_RCC_GetSysClockFreq+0x20c>)
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a24:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009a26:	4b70      	ldr	r3, [pc, #448]	@ (8009be8 <HAL_RCC_GetSysClockFreq+0x20c>)
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d065      	beq.n	8009afe <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009a32:	4b6d      	ldr	r3, [pc, #436]	@ (8009be8 <HAL_RCC_GetSysClockFreq+0x20c>)
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	099b      	lsrs	r3, r3, #6
 8009a38:	2200      	movs	r2, #0
 8009a3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009a3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8009a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a44:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a46:	2300      	movs	r3, #0
 8009a48:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009a4e:	4622      	mov	r2, r4
 8009a50:	462b      	mov	r3, r5
 8009a52:	f04f 0000 	mov.w	r0, #0
 8009a56:	f04f 0100 	mov.w	r1, #0
 8009a5a:	0159      	lsls	r1, r3, #5
 8009a5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009a60:	0150      	lsls	r0, r2, #5
 8009a62:	4602      	mov	r2, r0
 8009a64:	460b      	mov	r3, r1
 8009a66:	4621      	mov	r1, r4
 8009a68:	1a51      	subs	r1, r2, r1
 8009a6a:	6139      	str	r1, [r7, #16]
 8009a6c:	4629      	mov	r1, r5
 8009a6e:	eb63 0301 	sbc.w	r3, r3, r1
 8009a72:	617b      	str	r3, [r7, #20]
 8009a74:	f04f 0200 	mov.w	r2, #0
 8009a78:	f04f 0300 	mov.w	r3, #0
 8009a7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009a80:	4659      	mov	r1, fp
 8009a82:	018b      	lsls	r3, r1, #6
 8009a84:	4651      	mov	r1, sl
 8009a86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009a8a:	4651      	mov	r1, sl
 8009a8c:	018a      	lsls	r2, r1, #6
 8009a8e:	46d4      	mov	ip, sl
 8009a90:	ebb2 080c 	subs.w	r8, r2, ip
 8009a94:	4659      	mov	r1, fp
 8009a96:	eb63 0901 	sbc.w	r9, r3, r1
 8009a9a:	f04f 0200 	mov.w	r2, #0
 8009a9e:	f04f 0300 	mov.w	r3, #0
 8009aa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009aa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009aaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009aae:	4690      	mov	r8, r2
 8009ab0:	4699      	mov	r9, r3
 8009ab2:	4623      	mov	r3, r4
 8009ab4:	eb18 0303 	adds.w	r3, r8, r3
 8009ab8:	60bb      	str	r3, [r7, #8]
 8009aba:	462b      	mov	r3, r5
 8009abc:	eb49 0303 	adc.w	r3, r9, r3
 8009ac0:	60fb      	str	r3, [r7, #12]
 8009ac2:	f04f 0200 	mov.w	r2, #0
 8009ac6:	f04f 0300 	mov.w	r3, #0
 8009aca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009ace:	4629      	mov	r1, r5
 8009ad0:	024b      	lsls	r3, r1, #9
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	4629      	mov	r1, r5
 8009ad6:	4604      	mov	r4, r0
 8009ad8:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8009adc:	4601      	mov	r1, r0
 8009ade:	024a      	lsls	r2, r1, #9
 8009ae0:	4610      	mov	r0, r2
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009aea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009aec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009af0:	f7f7 fbfa 	bl	80012e8 <__aeabi_uldivmod>
 8009af4:	4602      	mov	r2, r0
 8009af6:	460b      	mov	r3, r1
 8009af8:	4613      	mov	r3, r2
 8009afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009afc:	e05c      	b.n	8009bb8 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009afe:	4b3a      	ldr	r3, [pc, #232]	@ (8009be8 <HAL_RCC_GetSysClockFreq+0x20c>)
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	099b      	lsrs	r3, r3, #6
 8009b04:	2200      	movs	r2, #0
 8009b06:	4618      	mov	r0, r3
 8009b08:	4611      	mov	r1, r2
 8009b0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009b0e:	623b      	str	r3, [r7, #32]
 8009b10:	2300      	movs	r3, #0
 8009b12:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009b18:	4642      	mov	r2, r8
 8009b1a:	464b      	mov	r3, r9
 8009b1c:	f04f 0000 	mov.w	r0, #0
 8009b20:	f04f 0100 	mov.w	r1, #0
 8009b24:	0159      	lsls	r1, r3, #5
 8009b26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009b2a:	0150      	lsls	r0, r2, #5
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	460b      	mov	r3, r1
 8009b30:	46c4      	mov	ip, r8
 8009b32:	ebb2 0a0c 	subs.w	sl, r2, ip
 8009b36:	4640      	mov	r0, r8
 8009b38:	4649      	mov	r1, r9
 8009b3a:	468c      	mov	ip, r1
 8009b3c:	eb63 0b0c 	sbc.w	fp, r3, ip
 8009b40:	f04f 0200 	mov.w	r2, #0
 8009b44:	f04f 0300 	mov.w	r3, #0
 8009b48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009b4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009b50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009b54:	ebb2 040a 	subs.w	r4, r2, sl
 8009b58:	eb63 050b 	sbc.w	r5, r3, fp
 8009b5c:	f04f 0200 	mov.w	r2, #0
 8009b60:	f04f 0300 	mov.w	r3, #0
 8009b64:	00eb      	lsls	r3, r5, #3
 8009b66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009b6a:	00e2      	lsls	r2, r4, #3
 8009b6c:	4614      	mov	r4, r2
 8009b6e:	461d      	mov	r5, r3
 8009b70:	4603      	mov	r3, r0
 8009b72:	18e3      	adds	r3, r4, r3
 8009b74:	603b      	str	r3, [r7, #0]
 8009b76:	460b      	mov	r3, r1
 8009b78:	eb45 0303 	adc.w	r3, r5, r3
 8009b7c:	607b      	str	r3, [r7, #4]
 8009b7e:	f04f 0200 	mov.w	r2, #0
 8009b82:	f04f 0300 	mov.w	r3, #0
 8009b86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009b8a:	4629      	mov	r1, r5
 8009b8c:	028b      	lsls	r3, r1, #10
 8009b8e:	4620      	mov	r0, r4
 8009b90:	4629      	mov	r1, r5
 8009b92:	4604      	mov	r4, r0
 8009b94:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8009b98:	4601      	mov	r1, r0
 8009b9a:	028a      	lsls	r2, r1, #10
 8009b9c:	4610      	mov	r0, r2
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	61bb      	str	r3, [r7, #24]
 8009ba6:	61fa      	str	r2, [r7, #28]
 8009ba8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009bac:	f7f7 fb9c 	bl	80012e8 <__aeabi_uldivmod>
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	460b      	mov	r3, r1
 8009bb4:	4613      	mov	r3, r2
 8009bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8009be8 <HAL_RCC_GetSysClockFreq+0x20c>)
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	0c1b      	lsrs	r3, r3, #16
 8009bbe:	f003 0303 	and.w	r3, r3, #3
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	005b      	lsls	r3, r3, #1
 8009bc6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8009bc8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009bca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bd0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009bd2:	e002      	b.n	8009bda <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009bd4:	4b05      	ldr	r3, [pc, #20]	@ (8009bec <HAL_RCC_GetSysClockFreq+0x210>)
 8009bd6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009bd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009bda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3750      	adds	r7, #80	@ 0x50
 8009be0:	46bd      	mov	sp, r7
 8009be2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009be6:	bf00      	nop
 8009be8:	40023800 	.word	0x40023800
 8009bec:	00f42400 	.word	0x00f42400
 8009bf0:	007a1200 	.word	0x007a1200

08009bf4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d101      	bne.n	8009c06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	e09d      	b.n	8009d42 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d108      	bne.n	8009c20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009c16:	d009      	beq.n	8009c2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	61da      	str	r2, [r3, #28]
 8009c1e:	e005      	b.n	8009c2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d106      	bne.n	8009c4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2200      	movs	r2, #0
 8009c42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f7fe fdce 	bl	80087e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2202      	movs	r2, #2
 8009c50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009c62:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	68db      	ldr	r3, [r3, #12]
 8009c68:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009c6c:	d902      	bls.n	8009c74 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	60fb      	str	r3, [r7, #12]
 8009c72:	e002      	b.n	8009c7a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009c74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009c78:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	68db      	ldr	r3, [r3, #12]
 8009c7e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009c82:	d007      	beq.n	8009c94 <HAL_SPI_Init+0xa0>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009c8c:	d002      	beq.n	8009c94 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009ca4:	431a      	orrs	r2, r3
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	691b      	ldr	r3, [r3, #16]
 8009caa:	f003 0302 	and.w	r3, r3, #2
 8009cae:	431a      	orrs	r2, r3
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	695b      	ldr	r3, [r3, #20]
 8009cb4:	f003 0301 	and.w	r3, r3, #1
 8009cb8:	431a      	orrs	r2, r3
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	699b      	ldr	r3, [r3, #24]
 8009cbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009cc2:	431a      	orrs	r2, r3
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	69db      	ldr	r3, [r3, #28]
 8009cc8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009ccc:	431a      	orrs	r2, r3
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a1b      	ldr	r3, [r3, #32]
 8009cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cd6:	ea42 0103 	orr.w	r1, r2, r3
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cde:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	430a      	orrs	r2, r1
 8009ce8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	699b      	ldr	r3, [r3, #24]
 8009cee:	0c1b      	lsrs	r3, r3, #16
 8009cf0:	f003 0204 	and.w	r2, r3, #4
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cf8:	f003 0310 	and.w	r3, r3, #16
 8009cfc:	431a      	orrs	r2, r3
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d02:	f003 0308 	and.w	r3, r3, #8
 8009d06:	431a      	orrs	r2, r3
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009d10:	ea42 0103 	orr.w	r1, r2, r3
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	430a      	orrs	r2, r1
 8009d20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	69da      	ldr	r2, [r3, #28]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009d30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2200      	movs	r2, #0
 8009d36:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009d40:	2300      	movs	r3, #0
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3710      	adds	r7, #16
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b088      	sub	sp, #32
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	60f8      	str	r0, [r7, #12]
 8009d52:	60b9      	str	r1, [r7, #8]
 8009d54:	603b      	str	r3, [r7, #0]
 8009d56:	4613      	mov	r3, r2
 8009d58:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009d5a:	f7fe ff71 	bl	8008c40 <HAL_GetTick>
 8009d5e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8009d60:	88fb      	ldrh	r3, [r7, #6]
 8009d62:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d001      	beq.n	8009d74 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8009d70:	2302      	movs	r3, #2
 8009d72:	e15c      	b.n	800a02e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d002      	beq.n	8009d80 <HAL_SPI_Transmit+0x36>
 8009d7a:	88fb      	ldrh	r3, [r7, #6]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d101      	bne.n	8009d84 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8009d80:	2301      	movs	r3, #1
 8009d82:	e154      	b.n	800a02e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	d101      	bne.n	8009d92 <HAL_SPI_Transmit+0x48>
 8009d8e:	2302      	movs	r3, #2
 8009d90:	e14d      	b.n	800a02e <HAL_SPI_Transmit+0x2e4>
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2201      	movs	r2, #1
 8009d96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2203      	movs	r2, #3
 8009d9e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2200      	movs	r2, #0
 8009da6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	68ba      	ldr	r2, [r7, #8]
 8009dac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	88fa      	ldrh	r2, [r7, #6]
 8009db2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	88fa      	ldrh	r2, [r7, #6]
 8009db8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009de4:	d10f      	bne.n	8009e06 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009df4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009e04:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e10:	2b40      	cmp	r3, #64	@ 0x40
 8009e12:	d007      	beq.n	8009e24 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009e22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009e2c:	d952      	bls.n	8009ed4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d002      	beq.n	8009e3c <HAL_SPI_Transmit+0xf2>
 8009e36:	8b7b      	ldrh	r3, [r7, #26]
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d145      	bne.n	8009ec8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e40:	881a      	ldrh	r2, [r3, #0]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e4c:	1c9a      	adds	r2, r3, #2
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	3b01      	subs	r3, #1
 8009e5a:	b29a      	uxth	r2, r3
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009e60:	e032      	b.n	8009ec8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	f003 0302 	and.w	r3, r3, #2
 8009e6c:	2b02      	cmp	r3, #2
 8009e6e:	d112      	bne.n	8009e96 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e74:	881a      	ldrh	r2, [r3, #0]
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e80:	1c9a      	adds	r2, r3, #2
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	3b01      	subs	r3, #1
 8009e8e:	b29a      	uxth	r2, r3
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009e94:	e018      	b.n	8009ec8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e96:	f7fe fed3 	bl	8008c40 <HAL_GetTick>
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	69fb      	ldr	r3, [r7, #28]
 8009e9e:	1ad3      	subs	r3, r2, r3
 8009ea0:	683a      	ldr	r2, [r7, #0]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d803      	bhi.n	8009eae <HAL_SPI_Transmit+0x164>
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eac:	d102      	bne.n	8009eb4 <HAL_SPI_Transmit+0x16a>
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d109      	bne.n	8009ec8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8009ec4:	2303      	movs	r3, #3
 8009ec6:	e0b2      	b.n	800a02e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1c7      	bne.n	8009e62 <HAL_SPI_Transmit+0x118>
 8009ed2:	e083      	b.n	8009fdc <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d002      	beq.n	8009ee2 <HAL_SPI_Transmit+0x198>
 8009edc:	8b7b      	ldrh	r3, [r7, #26]
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d177      	bne.n	8009fd2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d912      	bls.n	8009f12 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ef0:	881a      	ldrh	r2, [r3, #0]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009efc:	1c9a      	adds	r2, r3, #2
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	3b02      	subs	r3, #2
 8009f0a:	b29a      	uxth	r2, r3
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009f10:	e05f      	b.n	8009fd2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	330c      	adds	r3, #12
 8009f1c:	7812      	ldrb	r2, [r2, #0]
 8009f1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f24:	1c5a      	adds	r2, r3, #1
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	3b01      	subs	r3, #1
 8009f32:	b29a      	uxth	r2, r3
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009f38:	e04b      	b.n	8009fd2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	f003 0302 	and.w	r3, r3, #2
 8009f44:	2b02      	cmp	r3, #2
 8009f46:	d12b      	bne.n	8009fa0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d912      	bls.n	8009f78 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f56:	881a      	ldrh	r2, [r3, #0]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f62:	1c9a      	adds	r2, r3, #2
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	3b02      	subs	r3, #2
 8009f70:	b29a      	uxth	r2, r3
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009f76:	e02c      	b.n	8009fd2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	330c      	adds	r3, #12
 8009f82:	7812      	ldrb	r2, [r2, #0]
 8009f84:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f8a:	1c5a      	adds	r2, r3, #1
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	3b01      	subs	r3, #1
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009f9e:	e018      	b.n	8009fd2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009fa0:	f7fe fe4e 	bl	8008c40 <HAL_GetTick>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	69fb      	ldr	r3, [r7, #28]
 8009fa8:	1ad3      	subs	r3, r2, r3
 8009faa:	683a      	ldr	r2, [r7, #0]
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d803      	bhi.n	8009fb8 <HAL_SPI_Transmit+0x26e>
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fb6:	d102      	bne.n	8009fbe <HAL_SPI_Transmit+0x274>
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d109      	bne.n	8009fd2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8009fce:	2303      	movs	r3, #3
 8009fd0:	e02d      	b.n	800a02e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d1ae      	bne.n	8009f3a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009fdc:	69fa      	ldr	r2, [r7, #28]
 8009fde:	6839      	ldr	r1, [r7, #0]
 8009fe0:	68f8      	ldr	r0, [r7, #12]
 8009fe2:	f000 fb65 	bl	800a6b0 <SPI_EndRxTxTransaction>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d002      	beq.n	8009ff2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2220      	movs	r2, #32
 8009ff0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	689b      	ldr	r3, [r3, #8]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d10a      	bne.n	800a010 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	617b      	str	r3, [r7, #20]
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	68db      	ldr	r3, [r3, #12]
 800a004:	617b      	str	r3, [r7, #20]
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	689b      	ldr	r3, [r3, #8]
 800a00c:	617b      	str	r3, [r7, #20]
 800a00e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2201      	movs	r2, #1
 800a014:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2200      	movs	r2, #0
 800a01c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a024:	2b00      	cmp	r3, #0
 800a026:	d001      	beq.n	800a02c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800a028:	2301      	movs	r3, #1
 800a02a:	e000      	b.n	800a02e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800a02c:	2300      	movs	r3, #0
  }
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3720      	adds	r7, #32
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b08a      	sub	sp, #40	@ 0x28
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	60f8      	str	r0, [r7, #12]
 800a03e:	60b9      	str	r1, [r7, #8]
 800a040:	607a      	str	r2, [r7, #4]
 800a042:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a044:	2301      	movs	r3, #1
 800a046:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a048:	f7fe fdfa 	bl	8008c40 <HAL_GetTick>
 800a04c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a054:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800a05c:	887b      	ldrh	r3, [r7, #2]
 800a05e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800a060:	887b      	ldrh	r3, [r7, #2]
 800a062:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a064:	7ffb      	ldrb	r3, [r7, #31]
 800a066:	2b01      	cmp	r3, #1
 800a068:	d00c      	beq.n	800a084 <HAL_SPI_TransmitReceive+0x4e>
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a070:	d106      	bne.n	800a080 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	689b      	ldr	r3, [r3, #8]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d102      	bne.n	800a080 <HAL_SPI_TransmitReceive+0x4a>
 800a07a:	7ffb      	ldrb	r3, [r7, #31]
 800a07c:	2b04      	cmp	r3, #4
 800a07e:	d001      	beq.n	800a084 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800a080:	2302      	movs	r3, #2
 800a082:	e1f3      	b.n	800a46c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d005      	beq.n	800a096 <HAL_SPI_TransmitReceive+0x60>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d002      	beq.n	800a096 <HAL_SPI_TransmitReceive+0x60>
 800a090:	887b      	ldrh	r3, [r7, #2]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d101      	bne.n	800a09a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800a096:	2301      	movs	r3, #1
 800a098:	e1e8      	b.n	800a46c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d101      	bne.n	800a0a8 <HAL_SPI_TransmitReceive+0x72>
 800a0a4:	2302      	movs	r3, #2
 800a0a6:	e1e1      	b.n	800a46c <HAL_SPI_TransmitReceive+0x436>
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	2b04      	cmp	r3, #4
 800a0ba:	d003      	beq.n	800a0c4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2205      	movs	r2, #5
 800a0c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	687a      	ldr	r2, [r7, #4]
 800a0ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	887a      	ldrh	r2, [r7, #2]
 800a0d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	887a      	ldrh	r2, [r7, #2]
 800a0dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	68ba      	ldr	r2, [r7, #8]
 800a0e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	887a      	ldrh	r2, [r7, #2]
 800a0ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	887a      	ldrh	r2, [r7, #2]
 800a0f0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	68db      	ldr	r3, [r3, #12]
 800a102:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a106:	d802      	bhi.n	800a10e <HAL_SPI_TransmitReceive+0xd8>
 800a108:	8abb      	ldrh	r3, [r7, #20]
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	d908      	bls.n	800a120 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	685a      	ldr	r2, [r3, #4]
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a11c:	605a      	str	r2, [r3, #4]
 800a11e:	e007      	b.n	800a130 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	685a      	ldr	r2, [r3, #4]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a12e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a13a:	2b40      	cmp	r3, #64	@ 0x40
 800a13c:	d007      	beq.n	800a14e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a14c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	68db      	ldr	r3, [r3, #12]
 800a152:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a156:	f240 8083 	bls.w	800a260 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d002      	beq.n	800a168 <HAL_SPI_TransmitReceive+0x132>
 800a162:	8afb      	ldrh	r3, [r7, #22]
 800a164:	2b01      	cmp	r3, #1
 800a166:	d16f      	bne.n	800a248 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a16c:	881a      	ldrh	r2, [r3, #0]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a178:	1c9a      	adds	r2, r3, #2
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a182:	b29b      	uxth	r3, r3
 800a184:	3b01      	subs	r3, #1
 800a186:	b29a      	uxth	r2, r3
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a18c:	e05c      	b.n	800a248 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	689b      	ldr	r3, [r3, #8]
 800a194:	f003 0302 	and.w	r3, r3, #2
 800a198:	2b02      	cmp	r3, #2
 800a19a:	d11b      	bne.n	800a1d4 <HAL_SPI_TransmitReceive+0x19e>
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d016      	beq.n	800a1d4 <HAL_SPI_TransmitReceive+0x19e>
 800a1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d113      	bne.n	800a1d4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1b0:	881a      	ldrh	r2, [r3, #0]
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1bc:	1c9a      	adds	r2, r3, #2
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	3b01      	subs	r3, #1
 800a1ca:	b29a      	uxth	r2, r3
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	689b      	ldr	r3, [r3, #8]
 800a1da:	f003 0301 	and.w	r3, r3, #1
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d11c      	bne.n	800a21c <HAL_SPI_TransmitReceive+0x1e6>
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d016      	beq.n	800a21c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	68da      	ldr	r2, [r3, #12]
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1f8:	b292      	uxth	r2, r2
 800a1fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a200:	1c9a      	adds	r2, r3, #2
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	3b01      	subs	r3, #1
 800a210:	b29a      	uxth	r2, r3
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a218:	2301      	movs	r3, #1
 800a21a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a21c:	f7fe fd10 	bl	8008c40 <HAL_GetTick>
 800a220:	4602      	mov	r2, r0
 800a222:	6a3b      	ldr	r3, [r7, #32]
 800a224:	1ad3      	subs	r3, r2, r3
 800a226:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a228:	429a      	cmp	r2, r3
 800a22a:	d80d      	bhi.n	800a248 <HAL_SPI_TransmitReceive+0x212>
 800a22c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a22e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a232:	d009      	beq.n	800a248 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2201      	movs	r2, #1
 800a238:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2200      	movs	r2, #0
 800a240:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800a244:	2303      	movs	r3, #3
 800a246:	e111      	b.n	800a46c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d19d      	bne.n	800a18e <HAL_SPI_TransmitReceive+0x158>
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a258:	b29b      	uxth	r3, r3
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d197      	bne.n	800a18e <HAL_SPI_TransmitReceive+0x158>
 800a25e:	e0e5      	b.n	800a42c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d003      	beq.n	800a270 <HAL_SPI_TransmitReceive+0x23a>
 800a268:	8afb      	ldrh	r3, [r7, #22]
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	f040 80d1 	bne.w	800a412 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a274:	b29b      	uxth	r3, r3
 800a276:	2b01      	cmp	r3, #1
 800a278:	d912      	bls.n	800a2a0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a27e:	881a      	ldrh	r2, [r3, #0]
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a28a:	1c9a      	adds	r2, r3, #2
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a294:	b29b      	uxth	r3, r3
 800a296:	3b02      	subs	r3, #2
 800a298:	b29a      	uxth	r2, r3
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a29e:	e0b8      	b.n	800a412 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	330c      	adds	r3, #12
 800a2aa:	7812      	ldrb	r2, [r2, #0]
 800a2ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2b2:	1c5a      	adds	r2, r3, #1
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	3b01      	subs	r3, #1
 800a2c0:	b29a      	uxth	r2, r3
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a2c6:	e0a4      	b.n	800a412 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	689b      	ldr	r3, [r3, #8]
 800a2ce:	f003 0302 	and.w	r3, r3, #2
 800a2d2:	2b02      	cmp	r3, #2
 800a2d4:	d134      	bne.n	800a340 <HAL_SPI_TransmitReceive+0x30a>
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d02f      	beq.n	800a340 <HAL_SPI_TransmitReceive+0x30a>
 800a2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d12c      	bne.n	800a340 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d912      	bls.n	800a316 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2f4:	881a      	ldrh	r2, [r3, #0]
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a300:	1c9a      	adds	r2, r3, #2
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	3b02      	subs	r3, #2
 800a30e:	b29a      	uxth	r2, r3
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a314:	e012      	b.n	800a33c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	330c      	adds	r3, #12
 800a320:	7812      	ldrb	r2, [r2, #0]
 800a322:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a328:	1c5a      	adds	r2, r3, #1
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a332:	b29b      	uxth	r3, r3
 800a334:	3b01      	subs	r3, #1
 800a336:	b29a      	uxth	r2, r3
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a33c:	2300      	movs	r3, #0
 800a33e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	689b      	ldr	r3, [r3, #8]
 800a346:	f003 0301 	and.w	r3, r3, #1
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d148      	bne.n	800a3e0 <HAL_SPI_TransmitReceive+0x3aa>
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a354:	b29b      	uxth	r3, r3
 800a356:	2b00      	cmp	r3, #0
 800a358:	d042      	beq.n	800a3e0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a360:	b29b      	uxth	r3, r3
 800a362:	2b01      	cmp	r3, #1
 800a364:	d923      	bls.n	800a3ae <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	68da      	ldr	r2, [r3, #12]
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a370:	b292      	uxth	r2, r2
 800a372:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a378:	1c9a      	adds	r2, r3, #2
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a384:	b29b      	uxth	r3, r3
 800a386:	3b02      	subs	r3, #2
 800a388:	b29a      	uxth	r2, r3
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a396:	b29b      	uxth	r3, r3
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d81f      	bhi.n	800a3dc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	685a      	ldr	r2, [r3, #4]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a3aa:	605a      	str	r2, [r3, #4]
 800a3ac:	e016      	b.n	800a3dc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f103 020c 	add.w	r2, r3, #12
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3ba:	7812      	ldrb	r2, [r2, #0]
 800a3bc:	b2d2      	uxtb	r2, r2
 800a3be:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3c4:	1c5a      	adds	r2, r3, #1
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	3b01      	subs	r3, #1
 800a3d4:	b29a      	uxth	r2, r3
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a3e0:	f7fe fc2e 	bl	8008c40 <HAL_GetTick>
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	6a3b      	ldr	r3, [r7, #32]
 800a3e8:	1ad3      	subs	r3, r2, r3
 800a3ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d803      	bhi.n	800a3f8 <HAL_SPI_TransmitReceive+0x3c2>
 800a3f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3f6:	d102      	bne.n	800a3fe <HAL_SPI_TransmitReceive+0x3c8>
 800a3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d109      	bne.n	800a412 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2201      	movs	r2, #1
 800a402:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2200      	movs	r2, #0
 800a40a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800a40e:	2303      	movs	r3, #3
 800a410:	e02c      	b.n	800a46c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a416:	b29b      	uxth	r3, r3
 800a418:	2b00      	cmp	r3, #0
 800a41a:	f47f af55 	bne.w	800a2c8 <HAL_SPI_TransmitReceive+0x292>
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a424:	b29b      	uxth	r3, r3
 800a426:	2b00      	cmp	r3, #0
 800a428:	f47f af4e 	bne.w	800a2c8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a42c:	6a3a      	ldr	r2, [r7, #32]
 800a42e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a430:	68f8      	ldr	r0, [r7, #12]
 800a432:	f000 f93d 	bl	800a6b0 <SPI_EndRxTxTransaction>
 800a436:	4603      	mov	r3, r0
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d008      	beq.n	800a44e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2220      	movs	r2, #32
 800a440:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2200      	movs	r2, #0
 800a446:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800a44a:	2301      	movs	r3, #1
 800a44c:	e00e      	b.n	800a46c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2201      	movs	r2, #1
 800a452:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2200      	movs	r2, #0
 800a45a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a462:	2b00      	cmp	r3, #0
 800a464:	d001      	beq.n	800a46a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800a466:	2301      	movs	r3, #1
 800a468:	e000      	b.n	800a46c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800a46a:	2300      	movs	r3, #0
  }
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3728      	adds	r7, #40	@ 0x28
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b088      	sub	sp, #32
 800a478:	af00      	add	r7, sp, #0
 800a47a:	60f8      	str	r0, [r7, #12]
 800a47c:	60b9      	str	r1, [r7, #8]
 800a47e:	603b      	str	r3, [r7, #0]
 800a480:	4613      	mov	r3, r2
 800a482:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a484:	f7fe fbdc 	bl	8008c40 <HAL_GetTick>
 800a488:	4602      	mov	r2, r0
 800a48a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a48c:	1a9b      	subs	r3, r3, r2
 800a48e:	683a      	ldr	r2, [r7, #0]
 800a490:	4413      	add	r3, r2
 800a492:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a494:	f7fe fbd4 	bl	8008c40 <HAL_GetTick>
 800a498:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a49a:	4b39      	ldr	r3, [pc, #228]	@ (800a580 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	015b      	lsls	r3, r3, #5
 800a4a0:	0d1b      	lsrs	r3, r3, #20
 800a4a2:	69fa      	ldr	r2, [r7, #28]
 800a4a4:	fb02 f303 	mul.w	r3, r2, r3
 800a4a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a4aa:	e055      	b.n	800a558 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4b2:	d051      	beq.n	800a558 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a4b4:	f7fe fbc4 	bl	8008c40 <HAL_GetTick>
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	1ad3      	subs	r3, r2, r3
 800a4be:	69fa      	ldr	r2, [r7, #28]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d902      	bls.n	800a4ca <SPI_WaitFlagStateUntilTimeout+0x56>
 800a4c4:	69fb      	ldr	r3, [r7, #28]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d13d      	bne.n	800a546 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	685a      	ldr	r2, [r3, #4]
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a4d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a4e2:	d111      	bne.n	800a508 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	689b      	ldr	r3, [r3, #8]
 800a4e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a4ec:	d004      	beq.n	800a4f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a4f6:	d107      	bne.n	800a508 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	681a      	ldr	r2, [r3, #0]
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a506:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a50c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a510:	d10f      	bne.n	800a532 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	681a      	ldr	r2, [r3, #0]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a520:	601a      	str	r2, [r3, #0]
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	681a      	ldr	r2, [r3, #0]
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a530:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2201      	movs	r2, #1
 800a536:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2200      	movs	r2, #0
 800a53e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a542:	2303      	movs	r3, #3
 800a544:	e018      	b.n	800a578 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d102      	bne.n	800a552 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800a54c:	2300      	movs	r3, #0
 800a54e:	61fb      	str	r3, [r7, #28]
 800a550:	e002      	b.n	800a558 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	3b01      	subs	r3, #1
 800a556:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	689a      	ldr	r2, [r3, #8]
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	4013      	ands	r3, r2
 800a562:	68ba      	ldr	r2, [r7, #8]
 800a564:	429a      	cmp	r2, r3
 800a566:	bf0c      	ite	eq
 800a568:	2301      	moveq	r3, #1
 800a56a:	2300      	movne	r3, #0
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	461a      	mov	r2, r3
 800a570:	79fb      	ldrb	r3, [r7, #7]
 800a572:	429a      	cmp	r2, r3
 800a574:	d19a      	bne.n	800a4ac <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800a576:	2300      	movs	r3, #0
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3720      	adds	r7, #32
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}
 800a580:	20000000 	.word	0x20000000

0800a584 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b08a      	sub	sp, #40	@ 0x28
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	607a      	str	r2, [r7, #4]
 800a590:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a592:	2300      	movs	r3, #0
 800a594:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a596:	f7fe fb53 	bl	8008c40 <HAL_GetTick>
 800a59a:	4602      	mov	r2, r0
 800a59c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a59e:	1a9b      	subs	r3, r3, r2
 800a5a0:	683a      	ldr	r2, [r7, #0]
 800a5a2:	4413      	add	r3, r2
 800a5a4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a5a6:	f7fe fb4b 	bl	8008c40 <HAL_GetTick>
 800a5aa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	330c      	adds	r3, #12
 800a5b2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a5b4:	4b3d      	ldr	r3, [pc, #244]	@ (800a6ac <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	4613      	mov	r3, r2
 800a5ba:	009b      	lsls	r3, r3, #2
 800a5bc:	4413      	add	r3, r2
 800a5be:	00da      	lsls	r2, r3, #3
 800a5c0:	1ad3      	subs	r3, r2, r3
 800a5c2:	0d1b      	lsrs	r3, r3, #20
 800a5c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5c6:	fb02 f303 	mul.w	r3, r2, r3
 800a5ca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a5cc:	e061      	b.n	800a692 <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a5d4:	d107      	bne.n	800a5e6 <SPI_WaitFifoStateUntilTimeout+0x62>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d104      	bne.n	800a5e6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a5e4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ec:	d051      	beq.n	800a692 <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a5ee:	f7fe fb27 	bl	8008c40 <HAL_GetTick>
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	6a3b      	ldr	r3, [r7, #32]
 800a5f6:	1ad3      	subs	r3, r2, r3
 800a5f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d902      	bls.n	800a604 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a600:	2b00      	cmp	r3, #0
 800a602:	d13d      	bne.n	800a680 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	685a      	ldr	r2, [r3, #4]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a612:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a61c:	d111      	bne.n	800a642 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	689b      	ldr	r3, [r3, #8]
 800a622:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a626:	d004      	beq.n	800a632 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	689b      	ldr	r3, [r3, #8]
 800a62c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a630:	d107      	bne.n	800a642 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a640:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a646:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a64a:	d10f      	bne.n	800a66c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	681a      	ldr	r2, [r3, #0]
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a65a:	601a      	str	r2, [r3, #0]
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a66a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2201      	movs	r2, #1
 800a670:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2200      	movs	r2, #0
 800a678:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a67c:	2303      	movs	r3, #3
 800a67e:	e011      	b.n	800a6a4 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a680:	69bb      	ldr	r3, [r7, #24]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d102      	bne.n	800a68c <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 800a686:	2300      	movs	r3, #0
 800a688:	627b      	str	r3, [r7, #36]	@ 0x24
 800a68a:	e002      	b.n	800a692 <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 800a68c:	69bb      	ldr	r3, [r7, #24]
 800a68e:	3b01      	subs	r3, #1
 800a690:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	689a      	ldr	r2, [r3, #8]
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	4013      	ands	r3, r2
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	d195      	bne.n	800a5ce <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 800a6a2:	2300      	movs	r3, #0
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3728      	adds	r7, #40	@ 0x28
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}
 800a6ac:	20000000 	.word	0x20000000

0800a6b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b088      	sub	sp, #32
 800a6b4:	af02      	add	r7, sp, #8
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	9300      	str	r3, [sp, #0]
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a6c8:	68f8      	ldr	r0, [r7, #12]
 800a6ca:	f7ff ff5b 	bl	800a584 <SPI_WaitFifoStateUntilTimeout>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d007      	beq.n	800a6e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a6d8:	f043 0220 	orr.w	r2, r3, #32
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a6e0:	2303      	movs	r3, #3
 800a6e2:	e046      	b.n	800a772 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a6e4:	4b25      	ldr	r3, [pc, #148]	@ (800a77c <SPI_EndRxTxTransaction+0xcc>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a25      	ldr	r2, [pc, #148]	@ (800a780 <SPI_EndRxTxTransaction+0xd0>)
 800a6ea:	fba2 2303 	umull	r2, r3, r2, r3
 800a6ee:	0d5b      	lsrs	r3, r3, #21
 800a6f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a6f4:	fb02 f303 	mul.w	r3, r2, r3
 800a6f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a702:	d112      	bne.n	800a72a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	9300      	str	r3, [sp, #0]
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	2200      	movs	r2, #0
 800a70c:	2180      	movs	r1, #128	@ 0x80
 800a70e:	68f8      	ldr	r0, [r7, #12]
 800a710:	f7ff feb0 	bl	800a474 <SPI_WaitFlagStateUntilTimeout>
 800a714:	4603      	mov	r3, r0
 800a716:	2b00      	cmp	r3, #0
 800a718:	d016      	beq.n	800a748 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a71e:	f043 0220 	orr.w	r2, r3, #32
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800a726:	2303      	movs	r3, #3
 800a728:	e023      	b.n	800a772 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d00a      	beq.n	800a746 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	3b01      	subs	r3, #1
 800a734:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a740:	2b80      	cmp	r3, #128	@ 0x80
 800a742:	d0f2      	beq.n	800a72a <SPI_EndRxTxTransaction+0x7a>
 800a744:	e000      	b.n	800a748 <SPI_EndRxTxTransaction+0x98>
        break;
 800a746:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	9300      	str	r3, [sp, #0]
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	2200      	movs	r2, #0
 800a750:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a754:	68f8      	ldr	r0, [r7, #12]
 800a756:	f7ff ff15 	bl	800a584 <SPI_WaitFifoStateUntilTimeout>
 800a75a:	4603      	mov	r3, r0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d007      	beq.n	800a770 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a764:	f043 0220 	orr.w	r2, r3, #32
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a76c:	2303      	movs	r3, #3
 800a76e:	e000      	b.n	800a772 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800a770:	2300      	movs	r3, #0
}
 800a772:	4618      	mov	r0, r3
 800a774:	3718      	adds	r7, #24
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop
 800a77c:	20000000 	.word	0x20000000
 800a780:	165e9f81 	.word	0x165e9f81

0800a784 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a788:	4904      	ldr	r1, [pc, #16]	@ (800a79c <MX_FATFS_Init+0x18>)
 800a78a:	4805      	ldr	r0, [pc, #20]	@ (800a7a0 <MX_FATFS_Init+0x1c>)
 800a78c:	f004 fac4 	bl	800ed18 <FATFS_LinkDriver>
 800a790:	4603      	mov	r3, r0
 800a792:	461a      	mov	r2, r3
 800a794:	4b03      	ldr	r3, [pc, #12]	@ (800a7a4 <MX_FATFS_Init+0x20>)
 800a796:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a798:	bf00      	nop
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	20003728 	.word	0x20003728
 800a7a0:	2000000c 	.word	0x2000000c
 800a7a4:	20003724 	.word	0x20003724

0800a7a8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a7ac:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bc80      	pop	{r7}
 800a7b4:	4770      	bx	lr

0800a7b6 <disk_status>:
    disk_ioctl
#endif
};


DSTATUS disk_status(BYTE pdrv) {
 800a7b6:	b480      	push	{r7}
 800a7b8:	b083      	sub	sp, #12
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	4603      	mov	r3, r0
 800a7be:	71fb      	strb	r3, [r7, #7]
    if (pdrv == DEV_MMC) {
 800a7c0:	79fb      	ldrb	r3, [r7, #7]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d101      	bne.n	800a7ca <disk_status+0x14>
        return 0;  // OK
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	e000      	b.n	800a7cc <disk_status+0x16>
    }
    return STA_NOINIT;
 800a7ca:	2301      	movs	r3, #1
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	370c      	adds	r7, #12
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bc80      	pop	{r7}
 800a7d4:	4770      	bx	lr

0800a7d6 <disk_initialize>:

DSTATUS disk_initialize(BYTE pdrv) {
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b082      	sub	sp, #8
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	4603      	mov	r3, r0
 800a7de:	71fb      	strb	r3, [r7, #7]
    if (pdrv == DEV_MMC) {
 800a7e0:	79fb      	ldrb	r3, [r7, #7]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d108      	bne.n	800a7f8 <disk_initialize+0x22>
        return (SD_Init() == SD_OK) ? 0 : STA_NOINIT;
 800a7e6:	f7fd feb3 	bl	8008550 <SD_Init>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	bf14      	ite	ne
 800a7f0:	2301      	movne	r3, #1
 800a7f2:	2300      	moveq	r3, #0
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	e000      	b.n	800a7fa <disk_initialize+0x24>
    }
    return STA_NOINIT;
 800a7f8:	2301      	movs	r3, #1
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3708      	adds	r7, #8
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}

0800a802 <disk_read>:

DRESULT disk_read(BYTE pdrv, BYTE* buff, LBA_t sector, UINT count) {
 800a802:	b580      	push	{r7, lr}
 800a804:	b086      	sub	sp, #24
 800a806:	af00      	add	r7, sp, #0
 800a808:	60b9      	str	r1, [r7, #8]
 800a80a:	607a      	str	r2, [r7, #4]
 800a80c:	603b      	str	r3, [r7, #0]
 800a80e:	4603      	mov	r3, r0
 800a810:	73fb      	strb	r3, [r7, #15]
    if (pdrv != DEV_MMC || count == 0) return RES_PARERR;
 800a812:	7bfb      	ldrb	r3, [r7, #15]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d102      	bne.n	800a81e <disk_read+0x1c>
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d101      	bne.n	800a822 <disk_read+0x20>
 800a81e:	2304      	movs	r3, #4
 800a820:	e01a      	b.n	800a858 <disk_read+0x56>

    for (UINT i = 0; i < count; i++) {
 800a822:	2300      	movs	r3, #0
 800a824:	617b      	str	r3, [r7, #20]
 800a826:	e012      	b.n	800a84e <disk_read+0x4c>
        if (SD_ReadBlock((sector + i) * 512, buff + (512 * i)) != SD_OK)
 800a828:	687a      	ldr	r2, [r7, #4]
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	4413      	add	r3, r2
 800a82e:	0258      	lsls	r0, r3, #9
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	025b      	lsls	r3, r3, #9
 800a834:	68ba      	ldr	r2, [r7, #8]
 800a836:	4413      	add	r3, r2
 800a838:	4619      	mov	r1, r3
 800a83a:	f7fd fed1 	bl	80085e0 <SD_ReadBlock>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b00      	cmp	r3, #0
 800a842:	d001      	beq.n	800a848 <disk_read+0x46>
            return RES_ERROR;
 800a844:	2301      	movs	r3, #1
 800a846:	e007      	b.n	800a858 <disk_read+0x56>
    for (UINT i = 0; i < count; i++) {
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	3301      	adds	r3, #1
 800a84c:	617b      	str	r3, [r7, #20]
 800a84e:	697a      	ldr	r2, [r7, #20]
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	429a      	cmp	r2, r3
 800a854:	d3e8      	bcc.n	800a828 <disk_read+0x26>
    }

    return RES_OK;
 800a856:	2300      	movs	r3, #0
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3718      	adds	r7, #24
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}

0800a860 <disk_write>:

DRESULT disk_write(BYTE pdrv, const BYTE* buff, LBA_t sector, UINT count) {
 800a860:	b580      	push	{r7, lr}
 800a862:	b086      	sub	sp, #24
 800a864:	af00      	add	r7, sp, #0
 800a866:	60b9      	str	r1, [r7, #8]
 800a868:	607a      	str	r2, [r7, #4]
 800a86a:	603b      	str	r3, [r7, #0]
 800a86c:	4603      	mov	r3, r0
 800a86e:	73fb      	strb	r3, [r7, #15]
#if FF_FS_READONLY
    return RES_WRPRT;
#else
    if (pdrv != DEV_MMC || count == 0) return RES_PARERR;
 800a870:	7bfb      	ldrb	r3, [r7, #15]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d102      	bne.n	800a87c <disk_write+0x1c>
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d101      	bne.n	800a880 <disk_write+0x20>
 800a87c:	2304      	movs	r3, #4
 800a87e:	e01a      	b.n	800a8b6 <disk_write+0x56>

    for (UINT i = 0; i < count; i++) {
 800a880:	2300      	movs	r3, #0
 800a882:	617b      	str	r3, [r7, #20]
 800a884:	e012      	b.n	800a8ac <disk_write+0x4c>
        if (SD_WriteBlock((sector + i) * 512, buff + (512 * i)) != SD_OK)
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	4413      	add	r3, r2
 800a88c:	0258      	lsls	r0, r3, #9
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	025b      	lsls	r3, r3, #9
 800a892:	68ba      	ldr	r2, [r7, #8]
 800a894:	4413      	add	r3, r2
 800a896:	4619      	mov	r1, r3
 800a898:	f7fd fee6 	bl	8008668 <SD_WriteBlock>
 800a89c:	4603      	mov	r3, r0
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d001      	beq.n	800a8a6 <disk_write+0x46>
            return RES_ERROR;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	e007      	b.n	800a8b6 <disk_write+0x56>
    for (UINT i = 0; i < count; i++) {
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	617b      	str	r3, [r7, #20]
 800a8ac:	697a      	ldr	r2, [r7, #20]
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d3e8      	bcc.n	800a886 <disk_write+0x26>
    }

    return RES_OK;
 800a8b4:	2300      	movs	r3, #0
#endif
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3718      	adds	r7, #24
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
	...

0800a8c0 <disk_ioctl>:

DRESULT disk_ioctl(BYTE pdrv, BYTE cmd, void* buff) {
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	603a      	str	r2, [r7, #0]
 800a8ca:	71fb      	strb	r3, [r7, #7]
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	71bb      	strb	r3, [r7, #6]
    if (pdrv != DEV_MMC) return RES_PARERR;
 800a8d0:	79fb      	ldrb	r3, [r7, #7]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d001      	beq.n	800a8da <disk_ioctl+0x1a>
 800a8d6:	2304      	movs	r3, #4
 800a8d8:	e022      	b.n	800a920 <disk_ioctl+0x60>

    switch (cmd) {
 800a8da:	79bb      	ldrb	r3, [r7, #6]
 800a8dc:	2b03      	cmp	r3, #3
 800a8de:	d81e      	bhi.n	800a91e <disk_ioctl+0x5e>
 800a8e0:	a201      	add	r2, pc, #4	@ (adr r2, 800a8e8 <disk_ioctl+0x28>)
 800a8e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8e6:	bf00      	nop
 800a8e8:	0800a8f9 	.word	0x0800a8f9
 800a8ec:	0800a8fd 	.word	0x0800a8fd
 800a8f0:	0800a909 	.word	0x0800a909
 800a8f4:	0800a915 	.word	0x0800a915
        case CTRL_SYNC:
            return RES_OK;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	e011      	b.n	800a920 <disk_ioctl+0x60>
        case GET_SECTOR_COUNT:
            *(DWORD*)buff = 32768;  // Exemplo: 16 MB
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800a902:	601a      	str	r2, [r3, #0]
            return RES_OK;
 800a904:	2300      	movs	r3, #0
 800a906:	e00b      	b.n	800a920 <disk_ioctl+0x60>
        case GET_SECTOR_SIZE:
            *(WORD*)buff = 512;
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a90e:	801a      	strh	r2, [r3, #0]
            return RES_OK;
 800a910:	2300      	movs	r3, #0
 800a912:	e005      	b.n	800a920 <disk_ioctl+0x60>
        case GET_BLOCK_SIZE:
            *(DWORD*)buff = 1;
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	2201      	movs	r2, #1
 800a918:	601a      	str	r2, [r3, #0]
            return RES_OK;
 800a91a:	2300      	movs	r3, #0
 800a91c:	e000      	b.n	800a920 <disk_ioctl+0x60>
    }

    return RES_PARERR;
 800a91e:	2304      	movs	r3, #4
}
 800a920:	4618      	mov	r0, r3
 800a922:	370c      	adds	r7, #12
 800a924:	46bd      	mov	sp, r7
 800a926:	bc80      	pop	{r7}
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop

0800a92c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a92c:	b480      	push	{r7}
 800a92e:	b085      	sub	sp, #20
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	3301      	adds	r3, #1
 800a938:	781b      	ldrb	r3, [r3, #0]
 800a93a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a93c:	89fb      	ldrh	r3, [r7, #14]
 800a93e:	021b      	lsls	r3, r3, #8
 800a940:	b21a      	sxth	r2, r3
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	b21b      	sxth	r3, r3
 800a948:	4313      	orrs	r3, r2
 800a94a:	b21b      	sxth	r3, r3
 800a94c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a94e:	89fb      	ldrh	r3, [r7, #14]
}
 800a950:	4618      	mov	r0, r3
 800a952:	3714      	adds	r7, #20
 800a954:	46bd      	mov	sp, r7
 800a956:	bc80      	pop	{r7}
 800a958:	4770      	bx	lr

0800a95a <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a95a:	b480      	push	{r7}
 800a95c:	b085      	sub	sp, #20
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	3303      	adds	r3, #3
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	021b      	lsls	r3, r3, #8
 800a96e:	687a      	ldr	r2, [r7, #4]
 800a970:	3202      	adds	r2, #2
 800a972:	7812      	ldrb	r2, [r2, #0]
 800a974:	4313      	orrs	r3, r2
 800a976:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	021b      	lsls	r3, r3, #8
 800a97c:	687a      	ldr	r2, [r7, #4]
 800a97e:	3201      	adds	r2, #1
 800a980:	7812      	ldrb	r2, [r2, #0]
 800a982:	4313      	orrs	r3, r2
 800a984:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	021b      	lsls	r3, r3, #8
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	7812      	ldrb	r2, [r2, #0]
 800a98e:	4313      	orrs	r3, r2
 800a990:	60fb      	str	r3, [r7, #12]
	return rv;
 800a992:	68fb      	ldr	r3, [r7, #12]
}
 800a994:	4618      	mov	r0, r3
 800a996:	3714      	adds	r7, #20
 800a998:	46bd      	mov	sp, r7
 800a99a:	bc80      	pop	{r7}
 800a99c:	4770      	bx	lr

0800a99e <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800a99e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800a9a2:	b09d      	sub	sp, #116	@ 0x74
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 800a9a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a9aa:	3307      	adds	r3, #7
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	b2db      	uxtb	r3, r3
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	469a      	mov	sl, r3
 800a9b4:	4693      	mov	fp, r2
 800a9b6:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 800a9ba:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800a9be:	f04f 0000 	mov.w	r0, #0
 800a9c2:	f04f 0100 	mov.w	r1, #0
 800a9c6:	0219      	lsls	r1, r3, #8
 800a9c8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800a9cc:	0210      	lsls	r0, r2, #8
 800a9ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a9d0:	3306      	adds	r3, #6
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	461c      	mov	r4, r3
 800a9da:	4615      	mov	r5, r2
 800a9dc:	ea40 0804 	orr.w	r8, r0, r4
 800a9e0:	ea41 0905 	orr.w	r9, r1, r5
 800a9e4:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 800a9e8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800a9ec:	f04f 0000 	mov.w	r0, #0
 800a9f0:	f04f 0100 	mov.w	r1, #0
 800a9f4:	0219      	lsls	r1, r3, #8
 800a9f6:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800a9fa:	0210      	lsls	r0, r2, #8
 800a9fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a9fe:	3305      	adds	r3, #5
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	b2db      	uxtb	r3, r3
 800aa04:	2200      	movs	r2, #0
 800aa06:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aa08:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800aa0a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 800aa0e:	461a      	mov	r2, r3
 800aa10:	4302      	orrs	r2, r0
 800aa12:	62ba      	str	r2, [r7, #40]	@ 0x28
 800aa14:	4623      	mov	r3, r4
 800aa16:	430b      	orrs	r3, r1
 800aa18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa1a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800aa1e:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 800aa22:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800aa26:	f04f 0000 	mov.w	r0, #0
 800aa2a:	f04f 0100 	mov.w	r1, #0
 800aa2e:	0219      	lsls	r1, r3, #8
 800aa30:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800aa34:	0210      	lsls	r0, r2, #8
 800aa36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa38:	3304      	adds	r3, #4
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	b2db      	uxtb	r3, r3
 800aa3e:	2200      	movs	r2, #0
 800aa40:	653b      	str	r3, [r7, #80]	@ 0x50
 800aa42:	657a      	str	r2, [r7, #84]	@ 0x54
 800aa44:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 800aa48:	461a      	mov	r2, r3
 800aa4a:	4302      	orrs	r2, r0
 800aa4c:	623a      	str	r2, [r7, #32]
 800aa4e:	4623      	mov	r3, r4
 800aa50:	430b      	orrs	r3, r1
 800aa52:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa54:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800aa58:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 800aa5c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800aa60:	f04f 0000 	mov.w	r0, #0
 800aa64:	f04f 0100 	mov.w	r1, #0
 800aa68:	0219      	lsls	r1, r3, #8
 800aa6a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800aa6e:	0210      	lsls	r0, r2, #8
 800aa70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa72:	3303      	adds	r3, #3
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	b2db      	uxtb	r3, r3
 800aa78:	2200      	movs	r2, #0
 800aa7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa7c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800aa7e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 800aa82:	461a      	mov	r2, r3
 800aa84:	4302      	orrs	r2, r0
 800aa86:	61ba      	str	r2, [r7, #24]
 800aa88:	4623      	mov	r3, r4
 800aa8a:	430b      	orrs	r3, r1
 800aa8c:	61fb      	str	r3, [r7, #28]
 800aa8e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800aa92:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 800aa96:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800aa9a:	f04f 0000 	mov.w	r0, #0
 800aa9e:	f04f 0100 	mov.w	r1, #0
 800aaa2:	0219      	lsls	r1, r3, #8
 800aaa4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800aaa8:	0210      	lsls	r0, r2, #8
 800aaaa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aaac:	3302      	adds	r3, #2
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	b2db      	uxtb	r3, r3
 800aab2:	2200      	movs	r2, #0
 800aab4:	643b      	str	r3, [r7, #64]	@ 0x40
 800aab6:	647a      	str	r2, [r7, #68]	@ 0x44
 800aab8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800aabc:	461a      	mov	r2, r3
 800aabe:	4302      	orrs	r2, r0
 800aac0:	613a      	str	r2, [r7, #16]
 800aac2:	4623      	mov	r3, r4
 800aac4:	430b      	orrs	r3, r1
 800aac6:	617b      	str	r3, [r7, #20]
 800aac8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800aacc:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 800aad0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800aad4:	f04f 0200 	mov.w	r2, #0
 800aad8:	f04f 0300 	mov.w	r3, #0
 800aadc:	020b      	lsls	r3, r1, #8
 800aade:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800aae2:	0202      	lsls	r2, r0, #8
 800aae4:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800aae6:	3101      	adds	r1, #1
 800aae8:	7809      	ldrb	r1, [r1, #0]
 800aaea:	b2c9      	uxtb	r1, r1
 800aaec:	2000      	movs	r0, #0
 800aaee:	63b9      	str	r1, [r7, #56]	@ 0x38
 800aaf0:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800aaf2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800aaf6:	4604      	mov	r4, r0
 800aaf8:	4314      	orrs	r4, r2
 800aafa:	60bc      	str	r4, [r7, #8]
 800aafc:	4319      	orrs	r1, r3
 800aafe:	60f9      	str	r1, [r7, #12]
 800ab00:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800ab04:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 800ab08:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ab0c:	f04f 0200 	mov.w	r2, #0
 800ab10:	f04f 0300 	mov.w	r3, #0
 800ab14:	020b      	lsls	r3, r1, #8
 800ab16:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ab1a:	0202      	lsls	r2, r0, #8
 800ab1c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ab1e:	7809      	ldrb	r1, [r1, #0]
 800ab20:	b2c9      	uxtb	r1, r1
 800ab22:	2000      	movs	r0, #0
 800ab24:	6339      	str	r1, [r7, #48]	@ 0x30
 800ab26:	6378      	str	r0, [r7, #52]	@ 0x34
 800ab28:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800ab2c:	4604      	mov	r4, r0
 800ab2e:	4314      	orrs	r4, r2
 800ab30:	603c      	str	r4, [r7, #0]
 800ab32:	4319      	orrs	r1, r3
 800ab34:	6079      	str	r1, [r7, #4]
 800ab36:	e9d7 3400 	ldrd	r3, r4, [r7]
 800ab3a:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 800ab3e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 800ab42:	4610      	mov	r0, r2
 800ab44:	4619      	mov	r1, r3
 800ab46:	3774      	adds	r7, #116	@ 0x74
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800ab4e:	4770      	bx	lr

0800ab50 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ab50:	b480      	push	{r7}
 800ab52:	b083      	sub	sp, #12
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	460b      	mov	r3, r1
 800ab5a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	1c5a      	adds	r2, r3, #1
 800ab60:	607a      	str	r2, [r7, #4]
 800ab62:	887a      	ldrh	r2, [r7, #2]
 800ab64:	b2d2      	uxtb	r2, r2
 800ab66:	701a      	strb	r2, [r3, #0]
 800ab68:	887b      	ldrh	r3, [r7, #2]
 800ab6a:	0a1b      	lsrs	r3, r3, #8
 800ab6c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	1c5a      	adds	r2, r3, #1
 800ab72:	607a      	str	r2, [r7, #4]
 800ab74:	887a      	ldrh	r2, [r7, #2]
 800ab76:	b2d2      	uxtb	r2, r2
 800ab78:	701a      	strb	r2, [r3, #0]
}
 800ab7a:	bf00      	nop
 800ab7c:	370c      	adds	r7, #12
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bc80      	pop	{r7}
 800ab82:	4770      	bx	lr

0800ab84 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ab84:	b480      	push	{r7}
 800ab86:	b083      	sub	sp, #12
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	1c5a      	adds	r2, r3, #1
 800ab92:	607a      	str	r2, [r7, #4]
 800ab94:	683a      	ldr	r2, [r7, #0]
 800ab96:	b2d2      	uxtb	r2, r2
 800ab98:	701a      	strb	r2, [r3, #0]
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	0a1b      	lsrs	r3, r3, #8
 800ab9e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	1c5a      	adds	r2, r3, #1
 800aba4:	607a      	str	r2, [r7, #4]
 800aba6:	683a      	ldr	r2, [r7, #0]
 800aba8:	b2d2      	uxtb	r2, r2
 800abaa:	701a      	strb	r2, [r3, #0]
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	0a1b      	lsrs	r3, r3, #8
 800abb0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	1c5a      	adds	r2, r3, #1
 800abb6:	607a      	str	r2, [r7, #4]
 800abb8:	683a      	ldr	r2, [r7, #0]
 800abba:	b2d2      	uxtb	r2, r2
 800abbc:	701a      	strb	r2, [r3, #0]
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	0a1b      	lsrs	r3, r3, #8
 800abc2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	1c5a      	adds	r2, r3, #1
 800abc8:	607a      	str	r2, [r7, #4]
 800abca:	683a      	ldr	r2, [r7, #0]
 800abcc:	b2d2      	uxtb	r2, r2
 800abce:	701a      	strb	r2, [r3, #0]
}
 800abd0:	bf00      	nop
 800abd2:	370c      	adds	r7, #12
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bc80      	pop	{r7}
 800abd8:	4770      	bx	lr

0800abda <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800abda:	b480      	push	{r7}
 800abdc:	b085      	sub	sp, #20
 800abde:	af00      	add	r7, sp, #0
 800abe0:	60f8      	str	r0, [r7, #12]
 800abe2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	1c5a      	adds	r2, r3, #1
 800abea:	60fa      	str	r2, [r7, #12]
 800abec:	783a      	ldrb	r2, [r7, #0]
 800abee:	701a      	strb	r2, [r3, #0]
 800abf0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800abf4:	f04f 0200 	mov.w	r2, #0
 800abf8:	f04f 0300 	mov.w	r3, #0
 800abfc:	0a02      	lsrs	r2, r0, #8
 800abfe:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ac02:	0a0b      	lsrs	r3, r1, #8
 800ac04:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	1c5a      	adds	r2, r3, #1
 800ac0c:	60fa      	str	r2, [r7, #12]
 800ac0e:	783a      	ldrb	r2, [r7, #0]
 800ac10:	701a      	strb	r2, [r3, #0]
 800ac12:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac16:	f04f 0200 	mov.w	r2, #0
 800ac1a:	f04f 0300 	mov.w	r3, #0
 800ac1e:	0a02      	lsrs	r2, r0, #8
 800ac20:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ac24:	0a0b      	lsrs	r3, r1, #8
 800ac26:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	1c5a      	adds	r2, r3, #1
 800ac2e:	60fa      	str	r2, [r7, #12]
 800ac30:	783a      	ldrb	r2, [r7, #0]
 800ac32:	701a      	strb	r2, [r3, #0]
 800ac34:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac38:	f04f 0200 	mov.w	r2, #0
 800ac3c:	f04f 0300 	mov.w	r3, #0
 800ac40:	0a02      	lsrs	r2, r0, #8
 800ac42:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ac46:	0a0b      	lsrs	r3, r1, #8
 800ac48:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	1c5a      	adds	r2, r3, #1
 800ac50:	60fa      	str	r2, [r7, #12]
 800ac52:	783a      	ldrb	r2, [r7, #0]
 800ac54:	701a      	strb	r2, [r3, #0]
 800ac56:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac5a:	f04f 0200 	mov.w	r2, #0
 800ac5e:	f04f 0300 	mov.w	r3, #0
 800ac62:	0a02      	lsrs	r2, r0, #8
 800ac64:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ac68:	0a0b      	lsrs	r3, r1, #8
 800ac6a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	1c5a      	adds	r2, r3, #1
 800ac72:	60fa      	str	r2, [r7, #12]
 800ac74:	783a      	ldrb	r2, [r7, #0]
 800ac76:	701a      	strb	r2, [r3, #0]
 800ac78:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac7c:	f04f 0200 	mov.w	r2, #0
 800ac80:	f04f 0300 	mov.w	r3, #0
 800ac84:	0a02      	lsrs	r2, r0, #8
 800ac86:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ac8a:	0a0b      	lsrs	r3, r1, #8
 800ac8c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	1c5a      	adds	r2, r3, #1
 800ac94:	60fa      	str	r2, [r7, #12]
 800ac96:	783a      	ldrb	r2, [r7, #0]
 800ac98:	701a      	strb	r2, [r3, #0]
 800ac9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac9e:	f04f 0200 	mov.w	r2, #0
 800aca2:	f04f 0300 	mov.w	r3, #0
 800aca6:	0a02      	lsrs	r2, r0, #8
 800aca8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800acac:	0a0b      	lsrs	r3, r1, #8
 800acae:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	1c5a      	adds	r2, r3, #1
 800acb6:	60fa      	str	r2, [r7, #12]
 800acb8:	783a      	ldrb	r2, [r7, #0]
 800acba:	701a      	strb	r2, [r3, #0]
 800acbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800acc0:	f04f 0200 	mov.w	r2, #0
 800acc4:	f04f 0300 	mov.w	r3, #0
 800acc8:	0a02      	lsrs	r2, r0, #8
 800acca:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800acce:	0a0b      	lsrs	r3, r1, #8
 800acd0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	1c5a      	adds	r2, r3, #1
 800acd8:	60fa      	str	r2, [r7, #12]
 800acda:	783a      	ldrb	r2, [r7, #0]
 800acdc:	701a      	strb	r2, [r3, #0]
}
 800acde:	bf00      	nop
 800ace0:	3714      	adds	r7, #20
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bc80      	pop	{r7}
 800ace6:	4770      	bx	lr

0800ace8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ace8:	b480      	push	{r7}
 800acea:	b087      	sub	sp, #28
 800acec:	af00      	add	r7, sp, #0
 800acee:	60f8      	str	r0, [r7, #12]
 800acf0:	60b9      	str	r1, [r7, #8]
 800acf2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d00d      	beq.n	800ad1e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ad02:	693a      	ldr	r2, [r7, #16]
 800ad04:	1c53      	adds	r3, r2, #1
 800ad06:	613b      	str	r3, [r7, #16]
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	1c59      	adds	r1, r3, #1
 800ad0c:	6179      	str	r1, [r7, #20]
 800ad0e:	7812      	ldrb	r2, [r2, #0]
 800ad10:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	3b01      	subs	r3, #1
 800ad16:	607b      	str	r3, [r7, #4]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d1f1      	bne.n	800ad02 <mem_cpy+0x1a>
	}
}
 800ad1e:	bf00      	nop
 800ad20:	371c      	adds	r7, #28
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bc80      	pop	{r7}
 800ad26:	4770      	bx	lr

0800ad28 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ad28:	b480      	push	{r7}
 800ad2a:	b087      	sub	sp, #28
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	60b9      	str	r1, [r7, #8]
 800ad32:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	1c5a      	adds	r2, r3, #1
 800ad3c:	617a      	str	r2, [r7, #20]
 800ad3e:	68ba      	ldr	r2, [r7, #8]
 800ad40:	b2d2      	uxtb	r2, r2
 800ad42:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	3b01      	subs	r3, #1
 800ad48:	607b      	str	r3, [r7, #4]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d1f3      	bne.n	800ad38 <mem_set+0x10>
}
 800ad50:	bf00      	nop
 800ad52:	bf00      	nop
 800ad54:	371c      	adds	r7, #28
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bc80      	pop	{r7}
 800ad5a:	4770      	bx	lr

0800ad5c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ad5c:	b480      	push	{r7}
 800ad5e:	b089      	sub	sp, #36	@ 0x24
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	61fb      	str	r3, [r7, #28]
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ad70:	2300      	movs	r3, #0
 800ad72:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ad74:	69fb      	ldr	r3, [r7, #28]
 800ad76:	1c5a      	adds	r2, r3, #1
 800ad78:	61fa      	str	r2, [r7, #28]
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	69bb      	ldr	r3, [r7, #24]
 800ad80:	1c5a      	adds	r2, r3, #1
 800ad82:	61ba      	str	r2, [r7, #24]
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	1acb      	subs	r3, r1, r3
 800ad88:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	3b01      	subs	r3, #1
 800ad8e:	607b      	str	r3, [r7, #4]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d002      	beq.n	800ad9c <mem_cmp+0x40>
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d0eb      	beq.n	800ad74 <mem_cmp+0x18>

	return r;
 800ad9c:	697b      	ldr	r3, [r7, #20]
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3724      	adds	r7, #36	@ 0x24
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bc80      	pop	{r7}
 800ada6:	4770      	bx	lr

0800ada8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ada8:	b480      	push	{r7}
 800adaa:	b083      	sub	sp, #12
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800adb2:	e002      	b.n	800adba <chk_chr+0x12>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	3301      	adds	r3, #1
 800adb8:	607b      	str	r3, [r7, #4]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d005      	beq.n	800adce <chk_chr+0x26>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	461a      	mov	r2, r3
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	4293      	cmp	r3, r2
 800adcc:	d1f2      	bne.n	800adb4 <chk_chr+0xc>
	return *str;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	781b      	ldrb	r3, [r3, #0]
}
 800add2:	4618      	mov	r0, r3
 800add4:	370c      	adds	r7, #12
 800add6:	46bd      	mov	sp, r7
 800add8:	bc80      	pop	{r7}
 800adda:	4770      	bx	lr

0800addc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800addc:	b480      	push	{r7}
 800adde:	b085      	sub	sp, #20
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ade6:	2300      	movs	r3, #0
 800ade8:	60bb      	str	r3, [r7, #8]
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	60fb      	str	r3, [r7, #12]
 800adee:	e029      	b.n	800ae44 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800adf0:	4a26      	ldr	r2, [pc, #152]	@ (800ae8c <chk_lock+0xb0>)
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	011b      	lsls	r3, r3, #4
 800adf6:	4413      	add	r3, r2
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d01d      	beq.n	800ae3a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800adfe:	4a23      	ldr	r2, [pc, #140]	@ (800ae8c <chk_lock+0xb0>)
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	011b      	lsls	r3, r3, #4
 800ae04:	4413      	add	r3, r2
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d116      	bne.n	800ae3e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ae10:	4a1e      	ldr	r2, [pc, #120]	@ (800ae8c <chk_lock+0xb0>)
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	011b      	lsls	r3, r3, #4
 800ae16:	4413      	add	r3, r2
 800ae18:	3304      	adds	r3, #4
 800ae1a:	681a      	ldr	r2, [r3, #0]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d10c      	bne.n	800ae3e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ae24:	4a19      	ldr	r2, [pc, #100]	@ (800ae8c <chk_lock+0xb0>)
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	011b      	lsls	r3, r3, #4
 800ae2a:	4413      	add	r3, r2
 800ae2c:	3308      	adds	r3, #8
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d102      	bne.n	800ae3e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ae38:	e007      	b.n	800ae4a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	3301      	adds	r3, #1
 800ae42:	60fb      	str	r3, [r7, #12]
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d0d2      	beq.n	800adf0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2b01      	cmp	r3, #1
 800ae4e:	d109      	bne.n	800ae64 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d102      	bne.n	800ae5c <chk_lock+0x80>
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	2b02      	cmp	r3, #2
 800ae5a:	d101      	bne.n	800ae60 <chk_lock+0x84>
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	e010      	b.n	800ae82 <chk_lock+0xa6>
 800ae60:	2312      	movs	r3, #18
 800ae62:	e00e      	b.n	800ae82 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d108      	bne.n	800ae7c <chk_lock+0xa0>
 800ae6a:	4a08      	ldr	r2, [pc, #32]	@ (800ae8c <chk_lock+0xb0>)
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	011b      	lsls	r3, r3, #4
 800ae70:	4413      	add	r3, r2
 800ae72:	330c      	adds	r3, #12
 800ae74:	881b      	ldrh	r3, [r3, #0]
 800ae76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae7a:	d101      	bne.n	800ae80 <chk_lock+0xa4>
 800ae7c:	2310      	movs	r3, #16
 800ae7e:	e000      	b.n	800ae82 <chk_lock+0xa6>
 800ae80:	2300      	movs	r3, #0
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3714      	adds	r7, #20
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bc80      	pop	{r7}
 800ae8a:	4770      	bx	lr
 800ae8c:	20003734 	.word	0x20003734

0800ae90 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ae90:	b480      	push	{r7}
 800ae92:	b083      	sub	sp, #12
 800ae94:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ae96:	2300      	movs	r3, #0
 800ae98:	607b      	str	r3, [r7, #4]
 800ae9a:	e002      	b.n	800aea2 <enq_lock+0x12>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	3301      	adds	r3, #1
 800aea0:	607b      	str	r3, [r7, #4]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d106      	bne.n	800aeb6 <enq_lock+0x26>
 800aea8:	4a08      	ldr	r2, [pc, #32]	@ (800aecc <enq_lock+0x3c>)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	011b      	lsls	r3, r3, #4
 800aeae:	4413      	add	r3, r2
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d1f2      	bne.n	800ae9c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	bf14      	ite	ne
 800aebc:	2301      	movne	r3, #1
 800aebe:	2300      	moveq	r3, #0
 800aec0:	b2db      	uxtb	r3, r3
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	370c      	adds	r7, #12
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bc80      	pop	{r7}
 800aeca:	4770      	bx	lr
 800aecc:	20003734 	.word	0x20003734

0800aed0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b085      	sub	sp, #20
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800aeda:	2300      	movs	r3, #0
 800aedc:	60fb      	str	r3, [r7, #12]
 800aede:	e01f      	b.n	800af20 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800aee0:	4a41      	ldr	r2, [pc, #260]	@ (800afe8 <inc_lock+0x118>)
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	011b      	lsls	r3, r3, #4
 800aee6:	4413      	add	r3, r2
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d113      	bne.n	800af1a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800aef2:	4a3d      	ldr	r2, [pc, #244]	@ (800afe8 <inc_lock+0x118>)
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	011b      	lsls	r3, r3, #4
 800aef8:	4413      	add	r3, r2
 800aefa:	3304      	adds	r3, #4
 800aefc:	681a      	ldr	r2, [r3, #0]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800af02:	429a      	cmp	r2, r3
 800af04:	d109      	bne.n	800af1a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800af06:	4a38      	ldr	r2, [pc, #224]	@ (800afe8 <inc_lock+0x118>)
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	011b      	lsls	r3, r3, #4
 800af0c:	4413      	add	r3, r2
 800af0e:	3308      	adds	r3, #8
 800af10:	681a      	ldr	r2, [r3, #0]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			Files[i].clu == dp->obj.sclust &&
 800af16:	429a      	cmp	r2, r3
 800af18:	d006      	beq.n	800af28 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	3301      	adds	r3, #1
 800af1e:	60fb      	str	r3, [r7, #12]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d0dc      	beq.n	800aee0 <inc_lock+0x10>
 800af26:	e000      	b.n	800af2a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800af28:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	2b01      	cmp	r3, #1
 800af2e:	d132      	bne.n	800af96 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800af30:	2300      	movs	r3, #0
 800af32:	60fb      	str	r3, [r7, #12]
 800af34:	e002      	b.n	800af3c <inc_lock+0x6c>
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	3301      	adds	r3, #1
 800af3a:	60fb      	str	r3, [r7, #12]
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d106      	bne.n	800af50 <inc_lock+0x80>
 800af42:	4a29      	ldr	r2, [pc, #164]	@ (800afe8 <inc_lock+0x118>)
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	011b      	lsls	r3, r3, #4
 800af48:	4413      	add	r3, r2
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d1f2      	bne.n	800af36 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2b01      	cmp	r3, #1
 800af54:	d101      	bne.n	800af5a <inc_lock+0x8a>
 800af56:	2300      	movs	r3, #0
 800af58:	e040      	b.n	800afdc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681a      	ldr	r2, [r3, #0]
 800af5e:	4922      	ldr	r1, [pc, #136]	@ (800afe8 <inc_lock+0x118>)
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	011b      	lsls	r3, r3, #4
 800af64:	440b      	add	r3, r1
 800af66:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	689a      	ldr	r2, [r3, #8]
 800af6c:	491e      	ldr	r1, [pc, #120]	@ (800afe8 <inc_lock+0x118>)
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	011b      	lsls	r3, r3, #4
 800af72:	440b      	add	r3, r1
 800af74:	3304      	adds	r3, #4
 800af76:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af7c:	491a      	ldr	r1, [pc, #104]	@ (800afe8 <inc_lock+0x118>)
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	011b      	lsls	r3, r3, #4
 800af82:	440b      	add	r3, r1
 800af84:	3308      	adds	r3, #8
 800af86:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800af88:	4a17      	ldr	r2, [pc, #92]	@ (800afe8 <inc_lock+0x118>)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	011b      	lsls	r3, r3, #4
 800af8e:	4413      	add	r3, r2
 800af90:	330c      	adds	r3, #12
 800af92:	2200      	movs	r2, #0
 800af94:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d009      	beq.n	800afb0 <inc_lock+0xe0>
 800af9c:	4a12      	ldr	r2, [pc, #72]	@ (800afe8 <inc_lock+0x118>)
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	011b      	lsls	r3, r3, #4
 800afa2:	4413      	add	r3, r2
 800afa4:	330c      	adds	r3, #12
 800afa6:	881b      	ldrh	r3, [r3, #0]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d001      	beq.n	800afb0 <inc_lock+0xe0>
 800afac:	2300      	movs	r3, #0
 800afae:	e015      	b.n	800afdc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d108      	bne.n	800afc8 <inc_lock+0xf8>
 800afb6:	4a0c      	ldr	r2, [pc, #48]	@ (800afe8 <inc_lock+0x118>)
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	011b      	lsls	r3, r3, #4
 800afbc:	4413      	add	r3, r2
 800afbe:	330c      	adds	r3, #12
 800afc0:	881b      	ldrh	r3, [r3, #0]
 800afc2:	3301      	adds	r3, #1
 800afc4:	b29a      	uxth	r2, r3
 800afc6:	e001      	b.n	800afcc <inc_lock+0xfc>
 800afc8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800afcc:	4906      	ldr	r1, [pc, #24]	@ (800afe8 <inc_lock+0x118>)
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	011b      	lsls	r3, r3, #4
 800afd2:	440b      	add	r3, r1
 800afd4:	330c      	adds	r3, #12
 800afd6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	3301      	adds	r3, #1
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3714      	adds	r7, #20
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bc80      	pop	{r7}
 800afe4:	4770      	bx	lr
 800afe6:	bf00      	nop
 800afe8:	20003734 	.word	0x20003734

0800afec <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800afec:	b480      	push	{r7}
 800afee:	b085      	sub	sp, #20
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	3b01      	subs	r3, #1
 800aff8:	607b      	str	r3, [r7, #4]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d125      	bne.n	800b04c <dec_lock+0x60>
		n = Files[i].ctr;
 800b000:	4a16      	ldr	r2, [pc, #88]	@ (800b05c <dec_lock+0x70>)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	011b      	lsls	r3, r3, #4
 800b006:	4413      	add	r3, r2
 800b008:	330c      	adds	r3, #12
 800b00a:	881b      	ldrh	r3, [r3, #0]
 800b00c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b00e:	89fb      	ldrh	r3, [r7, #14]
 800b010:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b014:	d101      	bne.n	800b01a <dec_lock+0x2e>
 800b016:	2300      	movs	r3, #0
 800b018:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b01a:	89fb      	ldrh	r3, [r7, #14]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d002      	beq.n	800b026 <dec_lock+0x3a>
 800b020:	89fb      	ldrh	r3, [r7, #14]
 800b022:	3b01      	subs	r3, #1
 800b024:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b026:	4a0d      	ldr	r2, [pc, #52]	@ (800b05c <dec_lock+0x70>)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	011b      	lsls	r3, r3, #4
 800b02c:	4413      	add	r3, r2
 800b02e:	330c      	adds	r3, #12
 800b030:	89fa      	ldrh	r2, [r7, #14]
 800b032:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b034:	89fb      	ldrh	r3, [r7, #14]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d105      	bne.n	800b046 <dec_lock+0x5a>
 800b03a:	4a08      	ldr	r2, [pc, #32]	@ (800b05c <dec_lock+0x70>)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	011b      	lsls	r3, r3, #4
 800b040:	4413      	add	r3, r2
 800b042:	2200      	movs	r2, #0
 800b044:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b046:	2300      	movs	r3, #0
 800b048:	737b      	strb	r3, [r7, #13]
 800b04a:	e001      	b.n	800b050 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b04c:	2302      	movs	r3, #2
 800b04e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b050:	7b7b      	ldrb	r3, [r7, #13]
}
 800b052:	4618      	mov	r0, r3
 800b054:	3714      	adds	r7, #20
 800b056:	46bd      	mov	sp, r7
 800b058:	bc80      	pop	{r7}
 800b05a:	4770      	bx	lr
 800b05c:	20003734 	.word	0x20003734

0800b060 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b060:	b480      	push	{r7}
 800b062:	b085      	sub	sp, #20
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b068:	2300      	movs	r3, #0
 800b06a:	60fb      	str	r3, [r7, #12]
 800b06c:	e010      	b.n	800b090 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b06e:	4a0d      	ldr	r2, [pc, #52]	@ (800b0a4 <clear_lock+0x44>)
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	011b      	lsls	r3, r3, #4
 800b074:	4413      	add	r3, r2
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	687a      	ldr	r2, [r7, #4]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d105      	bne.n	800b08a <clear_lock+0x2a>
 800b07e:	4a09      	ldr	r2, [pc, #36]	@ (800b0a4 <clear_lock+0x44>)
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	011b      	lsls	r3, r3, #4
 800b084:	4413      	add	r3, r2
 800b086:	2200      	movs	r2, #0
 800b088:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	3301      	adds	r3, #1
 800b08e:	60fb      	str	r3, [r7, #12]
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d0eb      	beq.n	800b06e <clear_lock+0xe>
	}
}
 800b096:	bf00      	nop
 800b098:	bf00      	nop
 800b09a:	3714      	adds	r7, #20
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bc80      	pop	{r7}
 800b0a0:	4770      	bx	lr
 800b0a2:	bf00      	nop
 800b0a4:	20003734 	.word	0x20003734

0800b0a8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b086      	sub	sp, #24
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	78db      	ldrb	r3, [r3, #3]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d034      	beq.n	800b126 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0c0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	7858      	ldrb	r0, [r3, #1]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	697a      	ldr	r2, [r7, #20]
 800b0d0:	f7ff fbc6 	bl	800a860 <disk_write>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d002      	beq.n	800b0e0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	73fb      	strb	r3, [r7, #15]
 800b0de:	e022      	b.n	800b126 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0ea:	697a      	ldr	r2, [r7, #20]
 800b0ec:	1ad2      	subs	r2, r2, r3
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6a1b      	ldr	r3, [r3, #32]
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d217      	bcs.n	800b126 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	789b      	ldrb	r3, [r3, #2]
 800b0fa:	613b      	str	r3, [r7, #16]
 800b0fc:	e010      	b.n	800b120 <sync_window+0x78>
					wsect += fs->fsize;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6a1b      	ldr	r3, [r3, #32]
 800b102:	697a      	ldr	r2, [r7, #20]
 800b104:	4413      	add	r3, r2
 800b106:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	7858      	ldrb	r0, [r3, #1]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b112:	2301      	movs	r3, #1
 800b114:	697a      	ldr	r2, [r7, #20]
 800b116:	f7ff fba3 	bl	800a860 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	3b01      	subs	r3, #1
 800b11e:	613b      	str	r3, [r7, #16]
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	2b01      	cmp	r3, #1
 800b124:	d8eb      	bhi.n	800b0fe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b126:	7bfb      	ldrb	r3, [r7, #15]
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3718      	adds	r7, #24
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b084      	sub	sp, #16
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b13a:	2300      	movs	r3, #0
 800b13c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b142:	683a      	ldr	r2, [r7, #0]
 800b144:	429a      	cmp	r2, r3
 800b146:	d01b      	beq.n	800b180 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f7ff ffad 	bl	800b0a8 <sync_window>
 800b14e:	4603      	mov	r3, r0
 800b150:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b152:	7bfb      	ldrb	r3, [r7, #15]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d113      	bne.n	800b180 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	7858      	ldrb	r0, [r3, #1]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b162:	2301      	movs	r3, #1
 800b164:	683a      	ldr	r2, [r7, #0]
 800b166:	f7ff fb4c 	bl	800a802 <disk_read>
 800b16a:	4603      	mov	r3, r0
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d004      	beq.n	800b17a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b170:	f04f 33ff 	mov.w	r3, #4294967295
 800b174:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b176:	2301      	movs	r3, #1
 800b178:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	683a      	ldr	r2, [r7, #0]
 800b17e:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800b180:	7bfb      	ldrb	r3, [r7, #15]
}
 800b182:	4618      	mov	r0, r3
 800b184:	3710      	adds	r7, #16
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
	...

0800b18c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b084      	sub	sp, #16
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f7ff ff87 	bl	800b0a8 <sync_window>
 800b19a:	4603      	mov	r3, r0
 800b19c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b19e:	7bfb      	ldrb	r3, [r7, #15]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d158      	bne.n	800b256 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	781b      	ldrb	r3, [r3, #0]
 800b1a8:	2b03      	cmp	r3, #3
 800b1aa:	d148      	bne.n	800b23e <sync_fs+0xb2>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	791b      	ldrb	r3, [r3, #4]
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d144      	bne.n	800b23e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	3338      	adds	r3, #56	@ 0x38
 800b1b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b1bc:	2100      	movs	r1, #0
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f7ff fdb2 	bl	800ad28 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	3338      	adds	r3, #56	@ 0x38
 800b1c8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b1cc:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7ff fcbd 	bl	800ab50 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	3338      	adds	r3, #56	@ 0x38
 800b1da:	4921      	ldr	r1, [pc, #132]	@ (800b260 <sync_fs+0xd4>)
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f7ff fcd1 	bl	800ab84 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	3338      	adds	r3, #56	@ 0x38
 800b1e6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b1ea:	491e      	ldr	r1, [pc, #120]	@ (800b264 <sync_fs+0xd8>)
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7ff fcc9 	bl	800ab84 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	3338      	adds	r3, #56	@ 0x38
 800b1f6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	699b      	ldr	r3, [r3, #24]
 800b1fe:	4619      	mov	r1, r3
 800b200:	4610      	mov	r0, r2
 800b202:	f7ff fcbf 	bl	800ab84 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	3338      	adds	r3, #56	@ 0x38
 800b20a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	695b      	ldr	r3, [r3, #20]
 800b212:	4619      	mov	r1, r3
 800b214:	4610      	mov	r0, r2
 800b216:	f7ff fcb5 	bl	800ab84 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b21e:	1c5a      	adds	r2, r3, #1
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	7858      	ldrb	r0, [r3, #1]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b232:	2301      	movs	r3, #1
 800b234:	f7ff fb14 	bl	800a860 <disk_write>
			fs->fsi_flag = 0;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2200      	movs	r2, #0
 800b23c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	785b      	ldrb	r3, [r3, #1]
 800b242:	2200      	movs	r2, #0
 800b244:	2100      	movs	r1, #0
 800b246:	4618      	mov	r0, r3
 800b248:	f7ff fb3a 	bl	800a8c0 <disk_ioctl>
 800b24c:	4603      	mov	r3, r0
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d001      	beq.n	800b256 <sync_fs+0xca>
 800b252:	2301      	movs	r3, #1
 800b254:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b256:	7bfb      	ldrb	r3, [r7, #15]
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3710      	adds	r7, #16
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}
 800b260:	41615252 	.word	0x41615252
 800b264:	61417272 	.word	0x61417272

0800b268 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b268:	b480      	push	{r7}
 800b26a:	b083      	sub	sp, #12
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	3b02      	subs	r3, #2
 800b276:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	69db      	ldr	r3, [r3, #28]
 800b27c:	3b02      	subs	r3, #2
 800b27e:	683a      	ldr	r2, [r7, #0]
 800b280:	429a      	cmp	r2, r3
 800b282:	d301      	bcc.n	800b288 <clust2sect+0x20>
 800b284:	2300      	movs	r3, #0
 800b286:	e008      	b.n	800b29a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	895b      	ldrh	r3, [r3, #10]
 800b28c:	461a      	mov	r2, r3
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	fb03 f202 	mul.w	r2, r3, r2
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b298:	4413      	add	r3, r2
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	370c      	adds	r7, #12
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bc80      	pop	{r7}
 800b2a2:	4770      	bx	lr

0800b2a4 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b088      	sub	sp, #32
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b2ae:	6879      	ldr	r1, [r7, #4]
 800b2b0:	6809      	ldr	r1, [r1, #0]
 800b2b2:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b2b4:	6839      	ldr	r1, [r7, #0]
 800b2b6:	2901      	cmp	r1, #1
 800b2b8:	d904      	bls.n	800b2c4 <get_fat+0x20>
 800b2ba:	69b9      	ldr	r1, [r7, #24]
 800b2bc:	69c9      	ldr	r1, [r1, #28]
 800b2be:	6838      	ldr	r0, [r7, #0]
 800b2c0:	4288      	cmp	r0, r1
 800b2c2:	d302      	bcc.n	800b2ca <get_fat+0x26>
		val = 1;	/* Internal error */
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	61fb      	str	r3, [r7, #28]
 800b2c8:	e100      	b.n	800b4cc <get_fat+0x228>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b2ca:	f04f 31ff 	mov.w	r1, #4294967295
 800b2ce:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 800b2d0:	69b9      	ldr	r1, [r7, #24]
 800b2d2:	7809      	ldrb	r1, [r1, #0]
 800b2d4:	3901      	subs	r1, #1
 800b2d6:	2903      	cmp	r1, #3
 800b2d8:	f200 80ec 	bhi.w	800b4b4 <get_fat+0x210>
 800b2dc:	a001      	add	r0, pc, #4	@ (adr r0, 800b2e4 <get_fat+0x40>)
 800b2de:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b2e2:	bf00      	nop
 800b2e4:	0800b2f5 	.word	0x0800b2f5
 800b2e8:	0800b37b 	.word	0x0800b37b
 800b2ec:	0800b3b1 	.word	0x0800b3b1
 800b2f0:	0800b3e9 	.word	0x0800b3e9
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	60fb      	str	r3, [r7, #12]
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	085b      	lsrs	r3, r3, #1
 800b2fc:	68fa      	ldr	r2, [r7, #12]
 800b2fe:	4413      	add	r3, r2
 800b300:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	0a5b      	lsrs	r3, r3, #9
 800b30a:	4413      	add	r3, r2
 800b30c:	4619      	mov	r1, r3
 800b30e:	69b8      	ldr	r0, [r7, #24]
 800b310:	f7ff ff0e 	bl	800b130 <move_window>
 800b314:	4603      	mov	r3, r0
 800b316:	2b00      	cmp	r3, #0
 800b318:	f040 80cf 	bne.w	800b4ba <get_fat+0x216>
			wc = fs->win[bc++ % SS(fs)];
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	1c5a      	adds	r2, r3, #1
 800b320:	60fa      	str	r2, [r7, #12]
 800b322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b326:	69ba      	ldr	r2, [r7, #24]
 800b328:	4413      	add	r3, r2
 800b32a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b32e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b330:	69bb      	ldr	r3, [r7, #24]
 800b332:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	0a5b      	lsrs	r3, r3, #9
 800b338:	4413      	add	r3, r2
 800b33a:	4619      	mov	r1, r3
 800b33c:	69b8      	ldr	r0, [r7, #24]
 800b33e:	f7ff fef7 	bl	800b130 <move_window>
 800b342:	4603      	mov	r3, r0
 800b344:	2b00      	cmp	r3, #0
 800b346:	f040 80ba 	bne.w	800b4be <get_fat+0x21a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b350:	69ba      	ldr	r2, [r7, #24]
 800b352:	4413      	add	r3, r2
 800b354:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b358:	021b      	lsls	r3, r3, #8
 800b35a:	68ba      	ldr	r2, [r7, #8]
 800b35c:	4313      	orrs	r3, r2
 800b35e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	f003 0301 	and.w	r3, r3, #1
 800b366:	2b00      	cmp	r3, #0
 800b368:	d002      	beq.n	800b370 <get_fat+0xcc>
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	091b      	lsrs	r3, r3, #4
 800b36e:	e002      	b.n	800b376 <get_fat+0xd2>
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b376:	61fb      	str	r3, [r7, #28]
			break;
 800b378:	e0a8      	b.n	800b4cc <get_fat+0x228>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b37a:	69bb      	ldr	r3, [r7, #24]
 800b37c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	0a1b      	lsrs	r3, r3, #8
 800b382:	4413      	add	r3, r2
 800b384:	4619      	mov	r1, r3
 800b386:	69b8      	ldr	r0, [r7, #24]
 800b388:	f7ff fed2 	bl	800b130 <move_window>
 800b38c:	4603      	mov	r3, r0
 800b38e:	2b00      	cmp	r3, #0
 800b390:	f040 8097 	bne.w	800b4c2 <get_fat+0x21e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b394:	69bb      	ldr	r3, [r7, #24]
 800b396:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	005b      	lsls	r3, r3, #1
 800b39e:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b3a2:	4413      	add	r3, r2
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f7ff fac1 	bl	800a92c <ld_word>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	61fb      	str	r3, [r7, #28]
			break;
 800b3ae:	e08d      	b.n	800b4cc <get_fat+0x228>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b3b0:	69bb      	ldr	r3, [r7, #24]
 800b3b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	09db      	lsrs	r3, r3, #7
 800b3b8:	4413      	add	r3, r2
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	69b8      	ldr	r0, [r7, #24]
 800b3be:	f7ff feb7 	bl	800b130 <move_window>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d17e      	bne.n	800b4c6 <get_fat+0x222>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b3c8:	69bb      	ldr	r3, [r7, #24]
 800b3ca:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	009b      	lsls	r3, r3, #2
 800b3d2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b3d6:	4413      	add	r3, r2
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f7ff fabe 	bl	800a95a <ld_dword>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b3e4:	61fb      	str	r3, [r7, #28]
			break;
 800b3e6:	e071      	b.n	800b4cc <get_fat+0x228>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800b3e8:	6879      	ldr	r1, [r7, #4]
 800b3ea:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800b3ee:	4301      	orrs	r1, r0
 800b3f0:	d060      	beq.n	800b4b4 <get_fat+0x210>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800b3f2:	6879      	ldr	r1, [r7, #4]
 800b3f4:	6889      	ldr	r1, [r1, #8]
 800b3f6:	6838      	ldr	r0, [r7, #0]
 800b3f8:	1a41      	subs	r1, r0, r1
 800b3fa:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800b3fc:	6879      	ldr	r1, [r7, #4]
 800b3fe:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800b402:	1e42      	subs	r2, r0, #1
 800b404:	f141 33ff 	adc.w	r3, r1, #4294967295
 800b408:	f04f 0000 	mov.w	r0, #0
 800b40c:	f04f 0100 	mov.w	r1, #0
 800b410:	0a50      	lsrs	r0, r2, #9
 800b412:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800b416:	0a59      	lsrs	r1, r3, #9
 800b418:	4602      	mov	r2, r0
 800b41a:	69bb      	ldr	r3, [r7, #24]
 800b41c:	895b      	ldrh	r3, [r3, #10]
 800b41e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b422:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	79db      	ldrb	r3, [r3, #7]
 800b428:	2b02      	cmp	r3, #2
 800b42a:	d10e      	bne.n	800b44a <get_fat+0x1a6>
					if (cofs <= clen) {
 800b42c:	697a      	ldr	r2, [r7, #20]
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	429a      	cmp	r2, r3
 800b432:	d80a      	bhi.n	800b44a <get_fat+0x1a6>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800b434:	697a      	ldr	r2, [r7, #20]
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d002      	beq.n	800b442 <get_fat+0x19e>
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	3301      	adds	r3, #1
 800b440:	e001      	b.n	800b446 <get_fat+0x1a2>
 800b442:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800b446:	61fb      	str	r3, [r7, #28]
						break;
 800b448:	e040      	b.n	800b4cc <get_fat+0x228>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	79db      	ldrb	r3, [r3, #7]
 800b44e:	2b03      	cmp	r3, #3
 800b450:	d108      	bne.n	800b464 <get_fat+0x1c0>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	699b      	ldr	r3, [r3, #24]
 800b456:	697a      	ldr	r2, [r7, #20]
 800b458:	429a      	cmp	r2, r3
 800b45a:	d203      	bcs.n	800b464 <get_fat+0x1c0>
					val = clst + 1; 	/* Generate the value */
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	3301      	adds	r3, #1
 800b460:	61fb      	str	r3, [r7, #28]
					break;
 800b462:	e033      	b.n	800b4cc <get_fat+0x228>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	79db      	ldrb	r3, [r3, #7]
 800b468:	2b02      	cmp	r3, #2
 800b46a:	d023      	beq.n	800b4b4 <get_fat+0x210>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	69db      	ldr	r3, [r3, #28]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d003      	beq.n	800b47c <get_fat+0x1d8>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800b474:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800b478:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800b47a:	e027      	b.n	800b4cc <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b47c:	69bb      	ldr	r3, [r7, #24]
 800b47e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	09db      	lsrs	r3, r3, #7
 800b484:	4413      	add	r3, r2
 800b486:	4619      	mov	r1, r3
 800b488:	69b8      	ldr	r0, [r7, #24]
 800b48a:	f7ff fe51 	bl	800b130 <move_window>
 800b48e:	4603      	mov	r3, r0
 800b490:	2b00      	cmp	r3, #0
 800b492:	d11a      	bne.n	800b4ca <get_fat+0x226>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800b494:	69bb      	ldr	r3, [r7, #24]
 800b496:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	009b      	lsls	r3, r3, #2
 800b49e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b4a2:	4413      	add	r3, r2
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f7ff fa58 	bl	800a95a <ld_dword>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b4b0:	61fb      	str	r3, [r7, #28]
					break;
 800b4b2:	e00b      	b.n	800b4cc <get_fat+0x228>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	61fb      	str	r3, [r7, #28]
 800b4b8:	e008      	b.n	800b4cc <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b4ba:	bf00      	nop
 800b4bc:	e006      	b.n	800b4cc <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b4be:	bf00      	nop
 800b4c0:	e004      	b.n	800b4cc <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b4c2:	bf00      	nop
 800b4c4:	e002      	b.n	800b4cc <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b4c6:	bf00      	nop
 800b4c8:	e000      	b.n	800b4cc <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b4ca:	bf00      	nop
		}
	}

	return val;
 800b4cc:	69fb      	ldr	r3, [r7, #28]
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3720      	adds	r7, #32
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
 800b4d6:	bf00      	nop

0800b4d8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b4d8:	b590      	push	{r4, r7, lr}
 800b4da:	b089      	sub	sp, #36	@ 0x24
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	60f8      	str	r0, [r7, #12]
 800b4e0:	60b9      	str	r1, [r7, #8]
 800b4e2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b4e4:	2302      	movs	r3, #2
 800b4e6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	2b01      	cmp	r3, #1
 800b4ec:	f240 80dd 	bls.w	800b6aa <put_fat+0x1d2>
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	69db      	ldr	r3, [r3, #28]
 800b4f4:	68ba      	ldr	r2, [r7, #8]
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	f080 80d7 	bcs.w	800b6aa <put_fat+0x1d2>
		switch (fs->fs_type) {
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	781b      	ldrb	r3, [r3, #0]
 800b500:	2b04      	cmp	r3, #4
 800b502:	f300 80d2 	bgt.w	800b6aa <put_fat+0x1d2>
 800b506:	2b03      	cmp	r3, #3
 800b508:	f280 8093 	bge.w	800b632 <put_fat+0x15a>
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d002      	beq.n	800b516 <put_fat+0x3e>
 800b510:	2b02      	cmp	r3, #2
 800b512:	d06e      	beq.n	800b5f2 <put_fat+0x11a>
 800b514:	e0c9      	b.n	800b6aa <put_fat+0x1d2>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	61bb      	str	r3, [r7, #24]
 800b51a:	69bb      	ldr	r3, [r7, #24]
 800b51c:	085b      	lsrs	r3, r3, #1
 800b51e:	69ba      	ldr	r2, [r7, #24]
 800b520:	4413      	add	r3, r2
 800b522:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b528:	69bb      	ldr	r3, [r7, #24]
 800b52a:	0a5b      	lsrs	r3, r3, #9
 800b52c:	4413      	add	r3, r2
 800b52e:	4619      	mov	r1, r3
 800b530:	68f8      	ldr	r0, [r7, #12]
 800b532:	f7ff fdfd 	bl	800b130 <move_window>
 800b536:	4603      	mov	r3, r0
 800b538:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b53a:	7ffb      	ldrb	r3, [r7, #31]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	f040 80ad 	bne.w	800b69c <put_fat+0x1c4>
			p = fs->win + bc++ % SS(fs);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800b548:	69bb      	ldr	r3, [r7, #24]
 800b54a:	1c59      	adds	r1, r3, #1
 800b54c:	61b9      	str	r1, [r7, #24]
 800b54e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b552:	4413      	add	r3, r2
 800b554:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	f003 0301 	and.w	r3, r3, #1
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d00d      	beq.n	800b57c <put_fat+0xa4>
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	781b      	ldrb	r3, [r3, #0]
 800b564:	b25b      	sxtb	r3, r3
 800b566:	f003 030f 	and.w	r3, r3, #15
 800b56a:	b25a      	sxtb	r2, r3
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	b2db      	uxtb	r3, r3
 800b570:	011b      	lsls	r3, r3, #4
 800b572:	b25b      	sxtb	r3, r3
 800b574:	4313      	orrs	r3, r2
 800b576:	b25b      	sxtb	r3, r3
 800b578:	b2db      	uxtb	r3, r3
 800b57a:	e001      	b.n	800b580 <put_fat+0xa8>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	b2db      	uxtb	r3, r3
 800b580:	697a      	ldr	r2, [r7, #20]
 800b582:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	2201      	movs	r2, #1
 800b588:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b58e:	69bb      	ldr	r3, [r7, #24]
 800b590:	0a5b      	lsrs	r3, r3, #9
 800b592:	4413      	add	r3, r2
 800b594:	4619      	mov	r1, r3
 800b596:	68f8      	ldr	r0, [r7, #12]
 800b598:	f7ff fdca 	bl	800b130 <move_window>
 800b59c:	4603      	mov	r3, r0
 800b59e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b5a0:	7ffb      	ldrb	r3, [r7, #31]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d17c      	bne.n	800b6a0 <put_fat+0x1c8>
			p = fs->win + bc % SS(fs);
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800b5ac:	69bb      	ldr	r3, [r7, #24]
 800b5ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5b2:	4413      	add	r3, r2
 800b5b4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	f003 0301 	and.w	r3, r3, #1
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d003      	beq.n	800b5c8 <put_fat+0xf0>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	091b      	lsrs	r3, r3, #4
 800b5c4:	b2db      	uxtb	r3, r3
 800b5c6:	e00e      	b.n	800b5e6 <put_fat+0x10e>
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	781b      	ldrb	r3, [r3, #0]
 800b5cc:	b25b      	sxtb	r3, r3
 800b5ce:	f023 030f 	bic.w	r3, r3, #15
 800b5d2:	b25a      	sxtb	r2, r3
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	0a1b      	lsrs	r3, r3, #8
 800b5d8:	b25b      	sxtb	r3, r3
 800b5da:	f003 030f 	and.w	r3, r3, #15
 800b5de:	b25b      	sxtb	r3, r3
 800b5e0:	4313      	orrs	r3, r2
 800b5e2:	b25b      	sxtb	r3, r3
 800b5e4:	b2db      	uxtb	r3, r3
 800b5e6:	697a      	ldr	r2, [r7, #20]
 800b5e8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	70da      	strb	r2, [r3, #3]
			break;
 800b5f0:	e05b      	b.n	800b6aa <put_fat+0x1d2>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	0a1b      	lsrs	r3, r3, #8
 800b5fa:	4413      	add	r3, r2
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	68f8      	ldr	r0, [r7, #12]
 800b600:	f7ff fd96 	bl	800b130 <move_window>
 800b604:	4603      	mov	r3, r0
 800b606:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b608:	7ffb      	ldrb	r3, [r7, #31]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d14a      	bne.n	800b6a4 <put_fat+0x1cc>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	005b      	lsls	r3, r3, #1
 800b618:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b61c:	4413      	add	r3, r2
 800b61e:	687a      	ldr	r2, [r7, #4]
 800b620:	b292      	uxth	r2, r2
 800b622:	4611      	mov	r1, r2
 800b624:	4618      	mov	r0, r3
 800b626:	f7ff fa93 	bl	800ab50 <st_word>
			fs->wflag = 1;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	2201      	movs	r2, #1
 800b62e:	70da      	strb	r2, [r3, #3]
			break;
 800b630:	e03b      	b.n	800b6aa <put_fat+0x1d2>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	09db      	lsrs	r3, r3, #7
 800b63a:	4413      	add	r3, r2
 800b63c:	4619      	mov	r1, r3
 800b63e:	68f8      	ldr	r0, [r7, #12]
 800b640:	f7ff fd76 	bl	800b130 <move_window>
 800b644:	4603      	mov	r3, r0
 800b646:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b648:	7ffb      	ldrb	r3, [r7, #31]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d12c      	bne.n	800b6a8 <put_fat+0x1d0>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	781b      	ldrb	r3, [r3, #0]
 800b652:	2b04      	cmp	r3, #4
 800b654:	d012      	beq.n	800b67c <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	009b      	lsls	r3, r3, #2
 800b666:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b66a:	4413      	add	r3, r2
 800b66c:	4618      	mov	r0, r3
 800b66e:	f7ff f974 	bl	800a95a <ld_dword>
 800b672:	4603      	mov	r3, r0
 800b674:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800b678:	4323      	orrs	r3, r4
 800b67a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	009b      	lsls	r3, r3, #2
 800b686:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b68a:	4413      	add	r3, r2
 800b68c:	6879      	ldr	r1, [r7, #4]
 800b68e:	4618      	mov	r0, r3
 800b690:	f7ff fa78 	bl	800ab84 <st_dword>
			fs->wflag = 1;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	2201      	movs	r2, #1
 800b698:	70da      	strb	r2, [r3, #3]
			break;
 800b69a:	e006      	b.n	800b6aa <put_fat+0x1d2>
			if (res != FR_OK) break;
 800b69c:	bf00      	nop
 800b69e:	e004      	b.n	800b6aa <put_fat+0x1d2>
			if (res != FR_OK) break;
 800b6a0:	bf00      	nop
 800b6a2:	e002      	b.n	800b6aa <put_fat+0x1d2>
			if (res != FR_OK) break;
 800b6a4:	bf00      	nop
 800b6a6:	e000      	b.n	800b6aa <put_fat+0x1d2>
			if (res != FR_OK) break;
 800b6a8:	bf00      	nop
		}
	}
	return res;
 800b6aa:	7ffb      	ldrb	r3, [r7, #31]
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3724      	adds	r7, #36	@ 0x24
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd90      	pop	{r4, r7, pc}

0800b6b4 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b08a      	sub	sp, #40	@ 0x28
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	60b9      	str	r1, [r7, #8]
 800b6be:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	3b02      	subs	r3, #2
 800b6c4:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	69db      	ldr	r3, [r3, #28]
 800b6ca:	3b02      	subs	r3, #2
 800b6cc:	68ba      	ldr	r2, [r7, #8]
 800b6ce:	429a      	cmp	r2, r3
 800b6d0:	d301      	bcc.n	800b6d6 <find_bitmap+0x22>
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	61fb      	str	r3, [r7, #28]
 800b6da:	69fb      	ldr	r3, [r7, #28]
 800b6dc:	61bb      	str	r3, [r7, #24]
 800b6de:	2300      	movs	r3, #0
 800b6e0:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b6e6:	69fb      	ldr	r3, [r7, #28]
 800b6e8:	0b1b      	lsrs	r3, r3, #12
 800b6ea:	4413      	add	r3, r2
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	68f8      	ldr	r0, [r7, #12]
 800b6f0:	f7ff fd1e 	bl	800b130 <move_window>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d002      	beq.n	800b700 <find_bitmap+0x4c>
 800b6fa:	f04f 33ff 	mov.w	r3, #4294967295
 800b6fe:	e051      	b.n	800b7a4 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800b700:	69fb      	ldr	r3, [r7, #28]
 800b702:	08db      	lsrs	r3, r3, #3
 800b704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b708:	623b      	str	r3, [r7, #32]
 800b70a:	69fb      	ldr	r3, [r7, #28]
 800b70c:	f003 0307 	and.w	r3, r3, #7
 800b710:	2201      	movs	r2, #1
 800b712:	fa02 f303 	lsl.w	r3, r2, r3
 800b716:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800b71a:	68fa      	ldr	r2, [r7, #12]
 800b71c:	6a3b      	ldr	r3, [r7, #32]
 800b71e:	4413      	add	r3, r2
 800b720:	3338      	adds	r3, #56	@ 0x38
 800b722:	781a      	ldrb	r2, [r3, #0]
 800b724:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b728:	4013      	ands	r3, r2
 800b72a:	74fb      	strb	r3, [r7, #19]
 800b72c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b730:	005b      	lsls	r3, r3, #1
 800b732:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800b736:	69fb      	ldr	r3, [r7, #28]
 800b738:	3301      	adds	r3, #1
 800b73a:	61fb      	str	r3, [r7, #28]
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	69db      	ldr	r3, [r3, #28]
 800b740:	3b02      	subs	r3, #2
 800b742:	69fa      	ldr	r2, [r7, #28]
 800b744:	429a      	cmp	r2, r3
 800b746:	d307      	bcc.n	800b758 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 800b748:	2300      	movs	r3, #0
 800b74a:	61fb      	str	r3, [r7, #28]
 800b74c:	2300      	movs	r3, #0
 800b74e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b752:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b756:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800b758:	7cfb      	ldrb	r3, [r7, #19]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d109      	bne.n	800b772 <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	3301      	adds	r3, #1
 800b762:	617b      	str	r3, [r7, #20]
 800b764:	697a      	ldr	r2, [r7, #20]
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	429a      	cmp	r2, r3
 800b76a:	d106      	bne.n	800b77a <find_bitmap+0xc6>
 800b76c:	69bb      	ldr	r3, [r7, #24]
 800b76e:	3302      	adds	r3, #2
 800b770:	e018      	b.n	800b7a4 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800b772:	69fb      	ldr	r3, [r7, #28]
 800b774:	61bb      	str	r3, [r7, #24]
 800b776:	2300      	movs	r3, #0
 800b778:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800b77a:	69fa      	ldr	r2, [r7, #28]
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	429a      	cmp	r2, r3
 800b780:	d101      	bne.n	800b786 <find_bitmap+0xd2>
 800b782:	2300      	movs	r3, #0
 800b784:	e00e      	b.n	800b7a4 <find_bitmap+0xf0>
			} while (bm);
 800b786:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d1c5      	bne.n	800b71a <find_bitmap+0x66>
			bm = 1;
 800b78e:	2301      	movs	r3, #1
 800b790:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 800b794:	6a3b      	ldr	r3, [r7, #32]
 800b796:	3301      	adds	r3, #1
 800b798:	623b      	str	r3, [r7, #32]
 800b79a:	6a3b      	ldr	r3, [r7, #32]
 800b79c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7a0:	d3bb      	bcc.n	800b71a <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800b7a2:	e79e      	b.n	800b6e2 <find_bitmap+0x2e>
	}
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3728      	adds	r7, #40	@ 0x28
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b088      	sub	sp, #32
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	60f8      	str	r0, [r7, #12]
 800b7b4:	60b9      	str	r1, [r7, #8]
 800b7b6:	607a      	str	r2, [r7, #4]
 800b7b8:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	3b02      	subs	r3, #2
 800b7be:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	0b1b      	lsrs	r3, r3, #12
 800b7c8:	4413      	add	r3, r2
 800b7ca:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	08db      	lsrs	r3, r3, #3
 800b7d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7d4:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	f003 0307 	and.w	r3, r3, #7
 800b7dc:	2201      	movs	r2, #1
 800b7de:	fa02 f303 	lsl.w	r3, r2, r3
 800b7e2:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	1c5a      	adds	r2, r3, #1
 800b7e8:	617a      	str	r2, [r7, #20]
 800b7ea:	4619      	mov	r1, r3
 800b7ec:	68f8      	ldr	r0, [r7, #12]
 800b7ee:	f7ff fc9f 	bl	800b130 <move_window>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d001      	beq.n	800b7fc <change_bitmap+0x50>
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	e03d      	b.n	800b878 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800b7fc:	68fa      	ldr	r2, [r7, #12]
 800b7fe:	69bb      	ldr	r3, [r7, #24]
 800b800:	4413      	add	r3, r2
 800b802:	3338      	adds	r3, #56	@ 0x38
 800b804:	781a      	ldrb	r2, [r3, #0]
 800b806:	7ffb      	ldrb	r3, [r7, #31]
 800b808:	4013      	ands	r3, r2
 800b80a:	b2db      	uxtb	r3, r3
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	bf14      	ite	ne
 800b810:	2301      	movne	r3, #1
 800b812:	2300      	moveq	r3, #0
 800b814:	b2db      	uxtb	r3, r3
 800b816:	461a      	mov	r2, r3
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d101      	bne.n	800b822 <change_bitmap+0x76>
 800b81e:	2302      	movs	r3, #2
 800b820:	e02a      	b.n	800b878 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 800b822:	68fa      	ldr	r2, [r7, #12]
 800b824:	69bb      	ldr	r3, [r7, #24]
 800b826:	4413      	add	r3, r2
 800b828:	3338      	adds	r3, #56	@ 0x38
 800b82a:	781a      	ldrb	r2, [r3, #0]
 800b82c:	7ffb      	ldrb	r3, [r7, #31]
 800b82e:	4053      	eors	r3, r2
 800b830:	b2d9      	uxtb	r1, r3
 800b832:	68fa      	ldr	r2, [r7, #12]
 800b834:	69bb      	ldr	r3, [r7, #24]
 800b836:	4413      	add	r3, r2
 800b838:	3338      	adds	r3, #56	@ 0x38
 800b83a:	460a      	mov	r2, r1
 800b83c:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2201      	movs	r2, #1
 800b842:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	3b01      	subs	r3, #1
 800b848:	607b      	str	r3, [r7, #4]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d101      	bne.n	800b854 <change_bitmap+0xa8>
 800b850:	2300      	movs	r3, #0
 800b852:	e011      	b.n	800b878 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 800b854:	7ffb      	ldrb	r3, [r7, #31]
 800b856:	005b      	lsls	r3, r3, #1
 800b858:	77fb      	strb	r3, [r7, #31]
 800b85a:	7ffb      	ldrb	r3, [r7, #31]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d1cd      	bne.n	800b7fc <change_bitmap+0x50>
			bm = 1;
 800b860:	2301      	movs	r3, #1
 800b862:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800b864:	69bb      	ldr	r3, [r7, #24]
 800b866:	3301      	adds	r3, #1
 800b868:	61bb      	str	r3, [r7, #24]
 800b86a:	69bb      	ldr	r3, [r7, #24]
 800b86c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b870:	d3c4      	bcc.n	800b7fc <change_bitmap+0x50>
		i = 0;
 800b872:	2300      	movs	r3, #0
 800b874:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800b876:	e7b5      	b.n	800b7e4 <change_bitmap+0x38>
	}
}
 800b878:	4618      	mov	r0, r3
 800b87a:	3720      	adds	r7, #32
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}

0800b880 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b086      	sub	sp, #24
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	79db      	ldrb	r3, [r3, #7]
 800b88c:	2b03      	cmp	r3, #3
 800b88e:	d121      	bne.n	800b8d4 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	689b      	ldr	r3, [r3, #8]
 800b894:	617b      	str	r3, [r7, #20]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	699b      	ldr	r3, [r3, #24]
 800b89a:	613b      	str	r3, [r7, #16]
 800b89c:	e014      	b.n	800b8c8 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6818      	ldr	r0, [r3, #0]
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	3301      	adds	r3, #1
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	6979      	ldr	r1, [r7, #20]
 800b8aa:	f7ff fe15 	bl	800b4d8 <put_fat>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800b8b2:	7bfb      	ldrb	r3, [r7, #15]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d001      	beq.n	800b8bc <fill_first_frag+0x3c>
 800b8b8:	7bfb      	ldrb	r3, [r7, #15]
 800b8ba:	e00c      	b.n	800b8d6 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	3301      	adds	r3, #1
 800b8c0:	617b      	str	r3, [r7, #20]
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	3b01      	subs	r3, #1
 800b8c6:	613b      	str	r3, [r7, #16]
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d1e7      	bne.n	800b89e <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800b8d4:	2300      	movs	r3, #0
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	3718      	adds	r7, #24
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}

0800b8de <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800b8de:	b580      	push	{r7, lr}
 800b8e0:	b086      	sub	sp, #24
 800b8e2:	af00      	add	r7, sp, #0
 800b8e4:	60f8      	str	r0, [r7, #12]
 800b8e6:	60b9      	str	r1, [r7, #8]
 800b8e8:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800b8ea:	e020      	b.n	800b92e <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	6818      	ldr	r0, [r3, #0]
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	69db      	ldr	r3, [r3, #28]
 800b8f4:	68ba      	ldr	r2, [r7, #8]
 800b8f6:	1ad3      	subs	r3, r2, r3
 800b8f8:	1c59      	adds	r1, r3, #1
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	69db      	ldr	r3, [r3, #28]
 800b8fe:	2b01      	cmp	r3, #1
 800b900:	d905      	bls.n	800b90e <fill_last_frag+0x30>
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	69db      	ldr	r3, [r3, #28]
 800b906:	68ba      	ldr	r2, [r7, #8]
 800b908:	1ad3      	subs	r3, r2, r3
 800b90a:	3302      	adds	r3, #2
 800b90c:	e000      	b.n	800b910 <fill_last_frag+0x32>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	461a      	mov	r2, r3
 800b912:	f7ff fde1 	bl	800b4d8 <put_fat>
 800b916:	4603      	mov	r3, r0
 800b918:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800b91a:	7dfb      	ldrb	r3, [r7, #23]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d001      	beq.n	800b924 <fill_last_frag+0x46>
 800b920:	7dfb      	ldrb	r3, [r7, #23]
 800b922:	e009      	b.n	800b938 <fill_last_frag+0x5a>
		obj->n_frag--;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	69db      	ldr	r3, [r3, #28]
 800b928:	1e5a      	subs	r2, r3, #1
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	69db      	ldr	r3, [r3, #28]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d1da      	bne.n	800b8ec <fill_last_frag+0xe>
	}
	return FR_OK;
 800b936:	2300      	movs	r3, #0
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3718      	adds	r7, #24
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b08a      	sub	sp, #40	@ 0x28
 800b944:	af00      	add	r7, sp, #0
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b94c:	2300      	movs	r3, #0
 800b94e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	627b      	str	r3, [r7, #36]	@ 0x24
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	2b01      	cmp	r3, #1
 800b962:	d904      	bls.n	800b96e <remove_chain+0x2e>
 800b964:	69bb      	ldr	r3, [r7, #24]
 800b966:	69db      	ldr	r3, [r3, #28]
 800b968:	68ba      	ldr	r2, [r7, #8]
 800b96a:	429a      	cmp	r2, r3
 800b96c:	d301      	bcc.n	800b972 <remove_chain+0x32>
 800b96e:	2302      	movs	r3, #2
 800b970:	e096      	b.n	800baa0 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d014      	beq.n	800b9a2 <remove_chain+0x62>
 800b978:	69bb      	ldr	r3, [r7, #24]
 800b97a:	781b      	ldrb	r3, [r3, #0]
 800b97c:	2b04      	cmp	r3, #4
 800b97e:	d103      	bne.n	800b988 <remove_chain+0x48>
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	79db      	ldrb	r3, [r3, #7]
 800b984:	2b02      	cmp	r3, #2
 800b986:	d00c      	beq.n	800b9a2 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b988:	f04f 32ff 	mov.w	r2, #4294967295
 800b98c:	6879      	ldr	r1, [r7, #4]
 800b98e:	69b8      	ldr	r0, [r7, #24]
 800b990:	f7ff fda2 	bl	800b4d8 <put_fat>
 800b994:	4603      	mov	r3, r0
 800b996:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b998:	7ffb      	ldrb	r3, [r7, #31]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d001      	beq.n	800b9a2 <remove_chain+0x62>
 800b99e:	7ffb      	ldrb	r3, [r7, #31]
 800b9a0:	e07e      	b.n	800baa0 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b9a2:	68b9      	ldr	r1, [r7, #8]
 800b9a4:	68f8      	ldr	r0, [r7, #12]
 800b9a6:	f7ff fc7d 	bl	800b2a4 <get_fat>
 800b9aa:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d055      	beq.n	800ba5e <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	d101      	bne.n	800b9bc <remove_chain+0x7c>
 800b9b8:	2302      	movs	r3, #2
 800b9ba:	e071      	b.n	800baa0 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9c2:	d101      	bne.n	800b9c8 <remove_chain+0x88>
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	e06b      	b.n	800baa0 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800b9c8:	69bb      	ldr	r3, [r7, #24]
 800b9ca:	781b      	ldrb	r3, [r3, #0]
 800b9cc:	2b04      	cmp	r3, #4
 800b9ce:	d00b      	beq.n	800b9e8 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	68b9      	ldr	r1, [r7, #8]
 800b9d4:	69b8      	ldr	r0, [r7, #24]
 800b9d6:	f7ff fd7f 	bl	800b4d8 <put_fat>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b9de:	7ffb      	ldrb	r3, [r7, #31]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d001      	beq.n	800b9e8 <remove_chain+0xa8>
 800b9e4:	7ffb      	ldrb	r3, [r7, #31]
 800b9e6:	e05b      	b.n	800baa0 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b9e8:	69bb      	ldr	r3, [r7, #24]
 800b9ea:	699a      	ldr	r2, [r3, #24]
 800b9ec:	69bb      	ldr	r3, [r7, #24]
 800b9ee:	69db      	ldr	r3, [r3, #28]
 800b9f0:	3b02      	subs	r3, #2
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d20b      	bcs.n	800ba0e <remove_chain+0xce>
			fs->free_clst++;
 800b9f6:	69bb      	ldr	r3, [r7, #24]
 800b9f8:	699b      	ldr	r3, [r3, #24]
 800b9fa:	1c5a      	adds	r2, r3, #1
 800b9fc:	69bb      	ldr	r3, [r7, #24]
 800b9fe:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800ba00:	69bb      	ldr	r3, [r7, #24]
 800ba02:	791b      	ldrb	r3, [r3, #4]
 800ba04:	f043 0301 	orr.w	r3, r3, #1
 800ba08:	b2da      	uxtb	r2, r3
 800ba0a:	69bb      	ldr	r3, [r7, #24]
 800ba0c:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800ba0e:	6a3b      	ldr	r3, [r7, #32]
 800ba10:	3301      	adds	r3, #1
 800ba12:	697a      	ldr	r2, [r7, #20]
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d102      	bne.n	800ba1e <remove_chain+0xde>
			ecl = nxt;
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	623b      	str	r3, [r7, #32]
 800ba1c:	e017      	b.n	800ba4e <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800ba1e:	69bb      	ldr	r3, [r7, #24]
 800ba20:	781b      	ldrb	r3, [r3, #0]
 800ba22:	2b04      	cmp	r3, #4
 800ba24:	d10f      	bne.n	800ba46 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800ba26:	6a3a      	ldr	r2, [r7, #32]
 800ba28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba2a:	1ad3      	subs	r3, r2, r3
 800ba2c:	1c5a      	adds	r2, r3, #1
 800ba2e:	2300      	movs	r3, #0
 800ba30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ba32:	69b8      	ldr	r0, [r7, #24]
 800ba34:	f7ff feba 	bl	800b7ac <change_bitmap>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800ba3c:	7ffb      	ldrb	r3, [r7, #31]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d001      	beq.n	800ba46 <remove_chain+0x106>
 800ba42:	7ffb      	ldrb	r3, [r7, #31]
 800ba44:	e02c      	b.n	800baa0 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	623b      	str	r3, [r7, #32]
 800ba4a:	6a3b      	ldr	r3, [r7, #32]
 800ba4c:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ba52:	69bb      	ldr	r3, [r7, #24]
 800ba54:	69db      	ldr	r3, [r3, #28]
 800ba56:	68ba      	ldr	r2, [r7, #8]
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d3a2      	bcc.n	800b9a2 <remove_chain+0x62>
 800ba5c:	e000      	b.n	800ba60 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800ba5e:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800ba60:	69bb      	ldr	r3, [r7, #24]
 800ba62:	781b      	ldrb	r3, [r3, #0]
 800ba64:	2b04      	cmp	r3, #4
 800ba66:	d11a      	bne.n	800ba9e <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d103      	bne.n	800ba76 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2200      	movs	r2, #0
 800ba72:	71da      	strb	r2, [r3, #7]
 800ba74:	e013      	b.n	800ba9e <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	79db      	ldrb	r3, [r3, #7]
 800ba7a:	2b03      	cmp	r3, #3
 800ba7c:	d10f      	bne.n	800ba9e <remove_chain+0x15e>
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	689b      	ldr	r3, [r3, #8]
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d30a      	bcc.n	800ba9e <remove_chain+0x15e>
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	689a      	ldr	r2, [r3, #8]
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	699b      	ldr	r3, [r3, #24]
 800ba90:	4413      	add	r3, r2
 800ba92:	687a      	ldr	r2, [r7, #4]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d802      	bhi.n	800ba9e <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2202      	movs	r2, #2
 800ba9c:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800ba9e:	2300      	movs	r3, #0
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3728      	adds	r7, #40	@ 0x28
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b088      	sub	sp, #32
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d10d      	bne.n	800bada <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	695b      	ldr	r3, [r3, #20]
 800bac2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bac4:	69bb      	ldr	r3, [r7, #24]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d004      	beq.n	800bad4 <create_chain+0x2c>
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	69db      	ldr	r3, [r3, #28]
 800bace:	69ba      	ldr	r2, [r7, #24]
 800bad0:	429a      	cmp	r2, r3
 800bad2:	d31b      	bcc.n	800bb0c <create_chain+0x64>
 800bad4:	2301      	movs	r3, #1
 800bad6:	61bb      	str	r3, [r7, #24]
 800bad8:	e018      	b.n	800bb0c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bada:	6839      	ldr	r1, [r7, #0]
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f7ff fbe1 	bl	800b2a4 <get_fat>
 800bae2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	d801      	bhi.n	800baee <create_chain+0x46>
 800baea:	2301      	movs	r3, #1
 800baec:	e0d9      	b.n	800bca2 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baf4:	d101      	bne.n	800bafa <create_chain+0x52>
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	e0d3      	b.n	800bca2 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	69db      	ldr	r3, [r3, #28]
 800bafe:	68fa      	ldr	r2, [r7, #12]
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d201      	bcs.n	800bb08 <create_chain+0x60>
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	e0cc      	b.n	800bca2 <create_chain+0x1fa>
		scl = clst;
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	781b      	ldrb	r3, [r3, #0]
 800bb10:	2b04      	cmp	r3, #4
 800bb12:	d164      	bne.n	800bbde <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800bb14:	2201      	movs	r2, #1
 800bb16:	69b9      	ldr	r1, [r7, #24]
 800bb18:	6938      	ldr	r0, [r7, #16]
 800bb1a:	f7ff fdcb 	bl	800b6b4 <find_bitmap>
 800bb1e:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800bb20:	69fb      	ldr	r3, [r7, #28]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d003      	beq.n	800bb2e <create_chain+0x86>
 800bb26:	69fb      	ldr	r3, [r7, #28]
 800bb28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb2c:	d101      	bne.n	800bb32 <create_chain+0x8a>
 800bb2e:	69fb      	ldr	r3, [r7, #28]
 800bb30:	e0b7      	b.n	800bca2 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800bb32:	2301      	movs	r3, #1
 800bb34:	2201      	movs	r2, #1
 800bb36:	69f9      	ldr	r1, [r7, #28]
 800bb38:	6938      	ldr	r0, [r7, #16]
 800bb3a:	f7ff fe37 	bl	800b7ac <change_bitmap>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800bb42:	7dfb      	ldrb	r3, [r7, #23]
 800bb44:	2b02      	cmp	r3, #2
 800bb46:	d101      	bne.n	800bb4c <create_chain+0xa4>
 800bb48:	2301      	movs	r3, #1
 800bb4a:	e0aa      	b.n	800bca2 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800bb4c:	7dfb      	ldrb	r3, [r7, #23]
 800bb4e:	2b01      	cmp	r3, #1
 800bb50:	d102      	bne.n	800bb58 <create_chain+0xb0>
 800bb52:	f04f 33ff 	mov.w	r3, #4294967295
 800bb56:	e0a4      	b.n	800bca2 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d103      	bne.n	800bb66 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2202      	movs	r2, #2
 800bb62:	71da      	strb	r2, [r3, #7]
 800bb64:	e011      	b.n	800bb8a <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	79db      	ldrb	r3, [r3, #7]
 800bb6a:	2b02      	cmp	r3, #2
 800bb6c:	d10d      	bne.n	800bb8a <create_chain+0xe2>
 800bb6e:	69bb      	ldr	r3, [r7, #24]
 800bb70:	3301      	adds	r3, #1
 800bb72:	69fa      	ldr	r2, [r7, #28]
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d008      	beq.n	800bb8a <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	689b      	ldr	r3, [r3, #8]
 800bb7c:	69ba      	ldr	r2, [r7, #24]
 800bb7e:	1ad2      	subs	r2, r2, r3
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2203      	movs	r2, #3
 800bb88:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	79db      	ldrb	r3, [r3, #7]
 800bb8e:	2b02      	cmp	r3, #2
 800bb90:	d064      	beq.n	800bc5c <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	3301      	adds	r3, #1
 800bb96:	69fa      	ldr	r2, [r7, #28]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d10b      	bne.n	800bbb4 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	69db      	ldr	r3, [r3, #28]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d003      	beq.n	800bbac <create_chain+0x104>
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	69db      	ldr	r3, [r3, #28]
 800bba8:	3301      	adds	r3, #1
 800bbaa:	e000      	b.n	800bbae <create_chain+0x106>
 800bbac:	2302      	movs	r3, #2
 800bbae:	687a      	ldr	r2, [r7, #4]
 800bbb0:	61d3      	str	r3, [r2, #28]
 800bbb2:	e053      	b.n	800bc5c <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	69db      	ldr	r3, [r3, #28]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d102      	bne.n	800bbc2 <create_chain+0x11a>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800bbc2:	69fa      	ldr	r2, [r7, #28]
 800bbc4:	6839      	ldr	r1, [r7, #0]
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f7ff fe89 	bl	800b8de <fill_last_frag>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800bbd0:	7dfb      	ldrb	r3, [r7, #23]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d142      	bne.n	800bc5c <create_chain+0x1b4>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2201      	movs	r2, #1
 800bbda:	61da      	str	r2, [r3, #28]
 800bbdc:	e03e      	b.n	800bc5c <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800bbde:	69bb      	ldr	r3, [r7, #24]
 800bbe0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800bbe2:	69fb      	ldr	r3, [r7, #28]
 800bbe4:	3301      	adds	r3, #1
 800bbe6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	69db      	ldr	r3, [r3, #28]
 800bbec:	69fa      	ldr	r2, [r7, #28]
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d307      	bcc.n	800bc02 <create_chain+0x15a>
				ncl = 2;
 800bbf2:	2302      	movs	r3, #2
 800bbf4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bbf6:	69fa      	ldr	r2, [r7, #28]
 800bbf8:	69bb      	ldr	r3, [r7, #24]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d901      	bls.n	800bc02 <create_chain+0x15a>
 800bbfe:	2300      	movs	r3, #0
 800bc00:	e04f      	b.n	800bca2 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bc02:	69f9      	ldr	r1, [r7, #28]
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f7ff fb4d 	bl	800b2a4 <get_fat>
 800bc0a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d00e      	beq.n	800bc30 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	d003      	beq.n	800bc20 <create_chain+0x178>
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc1e:	d101      	bne.n	800bc24 <create_chain+0x17c>
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	e03e      	b.n	800bca2 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800bc24:	69fa      	ldr	r2, [r7, #28]
 800bc26:	69bb      	ldr	r3, [r7, #24]
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d1da      	bne.n	800bbe2 <create_chain+0x13a>
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	e038      	b.n	800bca2 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800bc30:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800bc32:	f04f 32ff 	mov.w	r2, #4294967295
 800bc36:	69f9      	ldr	r1, [r7, #28]
 800bc38:	6938      	ldr	r0, [r7, #16]
 800bc3a:	f7ff fc4d 	bl	800b4d8 <put_fat>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800bc42:	7dfb      	ldrb	r3, [r7, #23]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d109      	bne.n	800bc5c <create_chain+0x1b4>
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d006      	beq.n	800bc5c <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800bc4e:	69fa      	ldr	r2, [r7, #28]
 800bc50:	6839      	ldr	r1, [r7, #0]
 800bc52:	6938      	ldr	r0, [r7, #16]
 800bc54:	f7ff fc40 	bl	800b4d8 <put_fat>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800bc5c:	7dfb      	ldrb	r3, [r7, #23]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d116      	bne.n	800bc90 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	69fa      	ldr	r2, [r7, #28]
 800bc66:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	699a      	ldr	r2, [r3, #24]
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	69db      	ldr	r3, [r3, #28]
 800bc70:	3b02      	subs	r3, #2
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d804      	bhi.n	800bc80 <create_chain+0x1d8>
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	699b      	ldr	r3, [r3, #24]
 800bc7a:	1e5a      	subs	r2, r3, #1
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	791b      	ldrb	r3, [r3, #4]
 800bc84:	f043 0301 	orr.w	r3, r3, #1
 800bc88:	b2da      	uxtb	r2, r3
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	711a      	strb	r2, [r3, #4]
 800bc8e:	e007      	b.n	800bca0 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bc90:	7dfb      	ldrb	r3, [r7, #23]
 800bc92:	2b01      	cmp	r3, #1
 800bc94:	d102      	bne.n	800bc9c <create_chain+0x1f4>
 800bc96:	f04f 33ff 	mov.w	r3, #4294967295
 800bc9a:	e000      	b.n	800bc9e <create_chain+0x1f6>
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bca0:	69fb      	ldr	r3, [r7, #28]
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3720      	adds	r7, #32
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}

0800bcaa <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800bcaa:	b5b0      	push	{r4, r5, r7, lr}
 800bcac:	b088      	sub	sp, #32
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	60f8      	str	r0, [r7, #12]
 800bcb2:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bcc0:	3304      	adds	r3, #4
 800bcc2:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bcc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcc8:	f04f 0000 	mov.w	r0, #0
 800bccc:	f04f 0100 	mov.w	r1, #0
 800bcd0:	0a50      	lsrs	r0, r2, #9
 800bcd2:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800bcd6:	0a59      	lsrs	r1, r3, #9
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	895b      	ldrh	r3, [r3, #10]
 800bcdc:	b29b      	uxth	r3, r3
 800bcde:	2200      	movs	r2, #0
 800bce0:	461c      	mov	r4, r3
 800bce2:	4615      	mov	r5, r2
 800bce4:	4622      	mov	r2, r4
 800bce6:	462b      	mov	r3, r5
 800bce8:	f7f5 fafe 	bl	80012e8 <__aeabi_uldivmod>
 800bcec:	4602      	mov	r2, r0
 800bcee:	460b      	mov	r3, r1
 800bcf0:	4613      	mov	r3, r2
 800bcf2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bcf4:	69bb      	ldr	r3, [r7, #24]
 800bcf6:	1d1a      	adds	r2, r3, #4
 800bcf8:	61ba      	str	r2, [r7, #24]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d101      	bne.n	800bd08 <clmt_clust+0x5e>
 800bd04:	2300      	movs	r3, #0
 800bd06:	e010      	b.n	800bd2a <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 800bd08:	69fa      	ldr	r2, [r7, #28]
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	429a      	cmp	r2, r3
 800bd0e:	d307      	bcc.n	800bd20 <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 800bd10:	69fa      	ldr	r2, [r7, #28]
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	1ad3      	subs	r3, r2, r3
 800bd16:	61fb      	str	r3, [r7, #28]
 800bd18:	69bb      	ldr	r3, [r7, #24]
 800bd1a:	3304      	adds	r3, #4
 800bd1c:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bd1e:	e7e9      	b.n	800bcf4 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 800bd20:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bd22:	69bb      	ldr	r3, [r7, #24]
 800bd24:	681a      	ldr	r2, [r3, #0]
 800bd26:	69fb      	ldr	r3, [r7, #28]
 800bd28:	4413      	add	r3, r2
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3720      	adds	r7, #32
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bdb0      	pop	{r4, r5, r7, pc}

0800bd32 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800bd32:	b580      	push	{r7, lr}
 800bd34:	b086      	sub	sp, #24
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	6078      	str	r0, [r7, #4]
 800bd3a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	2b04      	cmp	r3, #4
 800bd48:	d102      	bne.n	800bd50 <dir_sdi+0x1e>
 800bd4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd4e:	e001      	b.n	800bd54 <dir_sdi+0x22>
 800bd50:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	429a      	cmp	r2, r3
 800bd58:	d904      	bls.n	800bd64 <dir_sdi+0x32>
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	f003 031f 	and.w	r3, r3, #31
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d001      	beq.n	800bd68 <dir_sdi+0x36>
		return FR_INT_ERR;
 800bd64:	2302      	movs	r3, #2
 800bd66:	e066      	b.n	800be36 <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	683a      	ldr	r2, [r7, #0]
 800bd6c:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	689b      	ldr	r3, [r3, #8]
 800bd72:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d109      	bne.n	800bd8e <dir_sdi+0x5c>
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	781b      	ldrb	r3, [r3, #0]
 800bd7e:	2b02      	cmp	r3, #2
 800bd80:	d905      	bls.n	800bd8e <dir_sdi+0x5c>
		clst = fs->dirbase;
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd86:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d10c      	bne.n	800bdae <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	095b      	lsrs	r3, r3, #5
 800bd98:	693a      	ldr	r2, [r7, #16]
 800bd9a:	8912      	ldrh	r2, [r2, #8]
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d301      	bcc.n	800bda4 <dir_sdi+0x72>
 800bda0:	2302      	movs	r3, #2
 800bda2:	e048      	b.n	800be36 <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	639a      	str	r2, [r3, #56]	@ 0x38
 800bdac:	e029      	b.n	800be02 <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	895b      	ldrh	r3, [r3, #10]
 800bdb2:	025b      	lsls	r3, r3, #9
 800bdb4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bdb6:	e019      	b.n	800bdec <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6979      	ldr	r1, [r7, #20]
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f7ff fa71 	bl	800b2a4 <get_fat>
 800bdc2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdca:	d101      	bne.n	800bdd0 <dir_sdi+0x9e>
 800bdcc:	2301      	movs	r3, #1
 800bdce:	e032      	b.n	800be36 <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	2b01      	cmp	r3, #1
 800bdd4:	d904      	bls.n	800bde0 <dir_sdi+0xae>
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	69db      	ldr	r3, [r3, #28]
 800bdda:	697a      	ldr	r2, [r7, #20]
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d301      	bcc.n	800bde4 <dir_sdi+0xb2>
 800bde0:	2302      	movs	r3, #2
 800bde2:	e028      	b.n	800be36 <dir_sdi+0x104>
			ofs -= csz;
 800bde4:	683a      	ldr	r2, [r7, #0]
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	1ad3      	subs	r3, r2, r3
 800bdea:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bdec:	683a      	ldr	r2, [r7, #0]
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d2e1      	bcs.n	800bdb8 <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 800bdf4:	6979      	ldr	r1, [r7, #20]
 800bdf6:	6938      	ldr	r0, [r7, #16]
 800bdf8:	f7ff fa36 	bl	800b268 <clust2sect>
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	697a      	ldr	r2, [r7, #20]
 800be06:	635a      	str	r2, [r3, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d101      	bne.n	800be14 <dir_sdi+0xe2>
 800be10:	2302      	movs	r3, #2
 800be12:	e010      	b.n	800be36 <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	0a5b      	lsrs	r3, r3, #9
 800be1c:	441a      	add	r2, r3
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be2e:	441a      	add	r2, r3
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800be34:	2300      	movs	r3, #0
}
 800be36:	4618      	mov	r0, r3
 800be38:	3718      	adds	r7, #24
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}

0800be3e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800be3e:	b580      	push	{r7, lr}
 800be40:	b086      	sub	sp, #24
 800be42:	af00      	add	r7, sp, #0
 800be44:	6078      	str	r0, [r7, #4]
 800be46:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be52:	3320      	adds	r3, #32
 800be54:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d00b      	beq.n	800be76 <dir_next+0x38>
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	2b04      	cmp	r3, #4
 800be64:	d102      	bne.n	800be6c <dir_next+0x2e>
 800be66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be6a:	e001      	b.n	800be70 <dir_next+0x32>
 800be6c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	429a      	cmp	r2, r3
 800be74:	d801      	bhi.n	800be7a <dir_next+0x3c>
 800be76:	2304      	movs	r3, #4
 800be78:	e0b2      	b.n	800bfe0 <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be80:	2b00      	cmp	r3, #0
 800be82:	f040 80a0 	bne.w	800bfc6 <dir_next+0x188>
		dp->sect++;				/* Next sector */
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be8a:	1c5a      	adds	r2, r3, #1
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	639a      	str	r2, [r3, #56]	@ 0x38

		if (!dp->clust) {		/* Static table */
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be94:	2b00      	cmp	r3, #0
 800be96:	d10b      	bne.n	800beb0 <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	095b      	lsrs	r3, r3, #5
 800be9c:	68fa      	ldr	r2, [r7, #12]
 800be9e:	8912      	ldrh	r2, [r2, #8]
 800bea0:	4293      	cmp	r3, r2
 800bea2:	f0c0 8090 	bcc.w	800bfc6 <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2200      	movs	r2, #0
 800beaa:	639a      	str	r2, [r3, #56]	@ 0x38
 800beac:	2304      	movs	r3, #4
 800beae:	e097      	b.n	800bfe0 <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	0a5b      	lsrs	r3, r3, #9
 800beb4:	68fa      	ldr	r2, [r7, #12]
 800beb6:	8952      	ldrh	r2, [r2, #10]
 800beb8:	3a01      	subs	r2, #1
 800beba:	4013      	ands	r3, r2
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	f040 8082 	bne.w	800bfc6 <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bec2:	687a      	ldr	r2, [r7, #4]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bec8:	4619      	mov	r1, r3
 800beca:	4610      	mov	r0, r2
 800becc:	f7ff f9ea 	bl	800b2a4 <get_fat>
 800bed0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	2b01      	cmp	r3, #1
 800bed6:	d801      	bhi.n	800bedc <dir_next+0x9e>
 800bed8:	2302      	movs	r3, #2
 800beda:	e081      	b.n	800bfe0 <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bee2:	d101      	bne.n	800bee8 <dir_next+0xaa>
 800bee4:	2301      	movs	r3, #1
 800bee6:	e07b      	b.n	800bfe0 <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	69db      	ldr	r3, [r3, #28]
 800beec:	697a      	ldr	r2, [r7, #20]
 800beee:	429a      	cmp	r2, r3
 800bef0:	d35f      	bcc.n	800bfb2 <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d104      	bne.n	800bf02 <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2200      	movs	r2, #0
 800befc:	639a      	str	r2, [r3, #56]	@ 0x38
 800befe:	2304      	movs	r3, #4
 800bf00:	e06e      	b.n	800bfe0 <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf08:	4619      	mov	r1, r3
 800bf0a:	4610      	mov	r0, r2
 800bf0c:	f7ff fdcc 	bl	800baa8 <create_chain>
 800bf10:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d101      	bne.n	800bf1c <dir_next+0xde>
 800bf18:	2307      	movs	r3, #7
 800bf1a:	e061      	b.n	800bfe0 <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	2b01      	cmp	r3, #1
 800bf20:	d101      	bne.n	800bf26 <dir_next+0xe8>
 800bf22:	2302      	movs	r3, #2
 800bf24:	e05c      	b.n	800bfe0 <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf2c:	d101      	bne.n	800bf32 <dir_next+0xf4>
 800bf2e:	2301      	movs	r3, #1
 800bf30:	e056      	b.n	800bfe0 <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	79db      	ldrb	r3, [r3, #7]
 800bf36:	f043 0304 	orr.w	r3, r3, #4
 800bf3a:	b2da      	uxtb	r2, r3
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bf40:	68f8      	ldr	r0, [r7, #12]
 800bf42:	f7ff f8b1 	bl	800b0a8 <sync_window>
 800bf46:	4603      	mov	r3, r0
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d001      	beq.n	800bf50 <dir_next+0x112>
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	e047      	b.n	800bfe0 <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	3338      	adds	r3, #56	@ 0x38
 800bf54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bf58:	2100      	movs	r1, #0
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7fe fee4 	bl	800ad28 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bf60:	2300      	movs	r3, #0
 800bf62:	613b      	str	r3, [r7, #16]
 800bf64:	6979      	ldr	r1, [r7, #20]
 800bf66:	68f8      	ldr	r0, [r7, #12]
 800bf68:	f7ff f97e 	bl	800b268 <clust2sect>
 800bf6c:	4602      	mov	r2, r0
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	635a      	str	r2, [r3, #52]	@ 0x34
 800bf72:	e012      	b.n	800bf9a <dir_next+0x15c>
						fs->wflag = 1;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	2201      	movs	r2, #1
 800bf78:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bf7a:	68f8      	ldr	r0, [r7, #12]
 800bf7c:	f7ff f894 	bl	800b0a8 <sync_window>
 800bf80:	4603      	mov	r3, r0
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d001      	beq.n	800bf8a <dir_next+0x14c>
 800bf86:	2301      	movs	r3, #1
 800bf88:	e02a      	b.n	800bfe0 <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bf8a:	693b      	ldr	r3, [r7, #16]
 800bf8c:	3301      	adds	r3, #1
 800bf8e:	613b      	str	r3, [r7, #16]
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf94:	1c5a      	adds	r2, r3, #1
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	635a      	str	r2, [r3, #52]	@ 0x34
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	895b      	ldrh	r3, [r3, #10]
 800bf9e:	461a      	mov	r2, r3
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d3e6      	bcc.n	800bf74 <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	1ad2      	subs	r2, r2, r3
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	697a      	ldr	r2, [r7, #20]
 800bfb6:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 800bfb8:	6979      	ldr	r1, [r7, #20]
 800bfba:	68f8      	ldr	r0, [r7, #12]
 800bfbc:	f7ff f954 	bl	800b268 <clust2sect>
 800bfc0:	4602      	mov	r2, r0
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	68ba      	ldr	r2, [r7, #8]
 800bfca:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfd8:	441a      	add	r2, r3
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800bfde:	2300      	movs	r3, #0
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3718      	adds	r7, #24
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}

0800bfe8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b086      	sub	sp, #24
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
 800bff0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bff8:	2100      	movs	r1, #0
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f7ff fe99 	bl	800bd32 <dir_sdi>
 800c000:	4603      	mov	r3, r0
 800c002:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c004:	7dfb      	ldrb	r3, [r7, #23]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d140      	bne.n	800c08c <dir_alloc+0xa4>
		n = 0;
 800c00a:	2300      	movs	r3, #0
 800c00c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c012:	4619      	mov	r1, r3
 800c014:	68f8      	ldr	r0, [r7, #12]
 800c016:	f7ff f88b 	bl	800b130 <move_window>
 800c01a:	4603      	mov	r3, r0
 800c01c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c01e:	7dfb      	ldrb	r3, [r7, #23]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d132      	bne.n	800c08a <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	781b      	ldrb	r3, [r3, #0]
 800c028:	2b04      	cmp	r3, #4
 800c02a:	d108      	bne.n	800c03e <dir_alloc+0x56>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c030:	781b      	ldrb	r3, [r3, #0]
 800c032:	b25b      	sxtb	r3, r3
 800c034:	43db      	mvns	r3, r3
 800c036:	b2db      	uxtb	r3, r3
 800c038:	09db      	lsrs	r3, r3, #7
 800c03a:	b2db      	uxtb	r3, r3
 800c03c:	e00f      	b.n	800c05e <dir_alloc+0x76>
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c042:	781b      	ldrb	r3, [r3, #0]
 800c044:	2be5      	cmp	r3, #229	@ 0xe5
 800c046:	d004      	beq.n	800c052 <dir_alloc+0x6a>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c04c:	781b      	ldrb	r3, [r3, #0]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d101      	bne.n	800c056 <dir_alloc+0x6e>
 800c052:	2301      	movs	r3, #1
 800c054:	e000      	b.n	800c058 <dir_alloc+0x70>
 800c056:	2300      	movs	r3, #0
 800c058:	f003 0301 	and.w	r3, r3, #1
 800c05c:	b2db      	uxtb	r3, r3
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d007      	beq.n	800c072 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	3301      	adds	r3, #1
 800c066:	613b      	str	r3, [r7, #16]
 800c068:	693a      	ldr	r2, [r7, #16]
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d102      	bne.n	800c076 <dir_alloc+0x8e>
 800c070:	e00c      	b.n	800c08c <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c072:	2300      	movs	r3, #0
 800c074:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c076:	2101      	movs	r1, #1
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f7ff fee0 	bl	800be3e <dir_next>
 800c07e:	4603      	mov	r3, r0
 800c080:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c082:	7dfb      	ldrb	r3, [r7, #23]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d0c2      	beq.n	800c00e <dir_alloc+0x26>
 800c088:	e000      	b.n	800c08c <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800c08a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c08c:	7dfb      	ldrb	r3, [r7, #23]
 800c08e:	2b04      	cmp	r3, #4
 800c090:	d101      	bne.n	800c096 <dir_alloc+0xae>
 800c092:	2307      	movs	r3, #7
 800c094:	75fb      	strb	r3, [r7, #23]
	return res;
 800c096:	7dfb      	ldrb	r3, [r7, #23]
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3718      	adds	r7, #24
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b084      	sub	sp, #16
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	331a      	adds	r3, #26
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7fe fc3c 	bl	800a92c <ld_word>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	781b      	ldrb	r3, [r3, #0]
 800c0bc:	2b03      	cmp	r3, #3
 800c0be:	d109      	bne.n	800c0d4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	3314      	adds	r3, #20
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f7fe fc31 	bl	800a92c <ld_word>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	041b      	lsls	r3, r3, #16
 800c0ce:	68fa      	ldr	r2, [r7, #12]
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3710      	adds	r7, #16
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}

0800c0de <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c0de:	b580      	push	{r7, lr}
 800c0e0:	b084      	sub	sp, #16
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	60f8      	str	r0, [r7, #12]
 800c0e6:	60b9      	str	r1, [r7, #8]
 800c0e8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	331a      	adds	r3, #26
 800c0ee:	687a      	ldr	r2, [r7, #4]
 800c0f0:	b292      	uxth	r2, r2
 800c0f2:	4611      	mov	r1, r2
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f7fe fd2b 	bl	800ab50 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	781b      	ldrb	r3, [r3, #0]
 800c0fe:	2b03      	cmp	r3, #3
 800c100:	d109      	bne.n	800c116 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	f103 0214 	add.w	r2, r3, #20
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	0c1b      	lsrs	r3, r3, #16
 800c10c:	b29b      	uxth	r3, r3
 800c10e:	4619      	mov	r1, r3
 800c110:	4610      	mov	r0, r2
 800c112:	f7fe fd1d 	bl	800ab50 <st_word>
	}
}
 800c116:	bf00      	nop
 800c118:	3710      	adds	r7, #16
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
	...

0800c120 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c120:	b590      	push	{r4, r7, lr}
 800c122:	b087      	sub	sp, #28
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	331a      	adds	r3, #26
 800c12e:	4618      	mov	r0, r3
 800c130:	f7fe fbfc 	bl	800a92c <ld_word>
 800c134:	4603      	mov	r3, r0
 800c136:	2b00      	cmp	r3, #0
 800c138:	d001      	beq.n	800c13e <cmp_lfn+0x1e>
 800c13a:	2300      	movs	r3, #0
 800c13c:	e059      	b.n	800c1f2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c146:	1e5a      	subs	r2, r3, #1
 800c148:	4613      	mov	r3, r2
 800c14a:	005b      	lsls	r3, r3, #1
 800c14c:	4413      	add	r3, r2
 800c14e:	009b      	lsls	r3, r3, #2
 800c150:	4413      	add	r3, r2
 800c152:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c154:	2301      	movs	r3, #1
 800c156:	81fb      	strh	r3, [r7, #14]
 800c158:	2300      	movs	r3, #0
 800c15a:	613b      	str	r3, [r7, #16]
 800c15c:	e033      	b.n	800c1c6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c15e:	4a27      	ldr	r2, [pc, #156]	@ (800c1fc <cmp_lfn+0xdc>)
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	4413      	add	r3, r2
 800c164:	781b      	ldrb	r3, [r3, #0]
 800c166:	461a      	mov	r2, r3
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	4413      	add	r3, r2
 800c16c:	4618      	mov	r0, r3
 800c16e:	f7fe fbdd 	bl	800a92c <ld_word>
 800c172:	4603      	mov	r3, r0
 800c174:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c176:	89fb      	ldrh	r3, [r7, #14]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d01a      	beq.n	800c1b2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	2bfe      	cmp	r3, #254	@ 0xfe
 800c180:	d812      	bhi.n	800c1a8 <cmp_lfn+0x88>
 800c182:	89bb      	ldrh	r3, [r7, #12]
 800c184:	4618      	mov	r0, r3
 800c186:	f002 fe11 	bl	800edac <ff_wtoupper>
 800c18a:	4603      	mov	r3, r0
 800c18c:	461c      	mov	r4, r3
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	1c5a      	adds	r2, r3, #1
 800c192:	617a      	str	r2, [r7, #20]
 800c194:	005b      	lsls	r3, r3, #1
 800c196:	687a      	ldr	r2, [r7, #4]
 800c198:	4413      	add	r3, r2
 800c19a:	881b      	ldrh	r3, [r3, #0]
 800c19c:	4618      	mov	r0, r3
 800c19e:	f002 fe05 	bl	800edac <ff_wtoupper>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	429c      	cmp	r4, r3
 800c1a6:	d001      	beq.n	800c1ac <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	e022      	b.n	800c1f2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800c1ac:	89bb      	ldrh	r3, [r7, #12]
 800c1ae:	81fb      	strh	r3, [r7, #14]
 800c1b0:	e006      	b.n	800c1c0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c1b2:	89bb      	ldrh	r3, [r7, #12]
 800c1b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c1b8:	4293      	cmp	r3, r2
 800c1ba:	d001      	beq.n	800c1c0 <cmp_lfn+0xa0>
 800c1bc:	2300      	movs	r3, #0
 800c1be:	e018      	b.n	800c1f2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	3301      	adds	r3, #1
 800c1c4:	613b      	str	r3, [r7, #16]
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	2b0c      	cmp	r3, #12
 800c1ca:	d9c8      	bls.n	800c15e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	781b      	ldrb	r3, [r3, #0]
 800c1d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d00b      	beq.n	800c1f0 <cmp_lfn+0xd0>
 800c1d8:	89fb      	ldrh	r3, [r7, #14]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d008      	beq.n	800c1f0 <cmp_lfn+0xd0>
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	005b      	lsls	r3, r3, #1
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	4413      	add	r3, r2
 800c1e6:	881b      	ldrh	r3, [r3, #0]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d001      	beq.n	800c1f0 <cmp_lfn+0xd0>
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	e000      	b.n	800c1f2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c1f0:	2301      	movs	r3, #1
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	371c      	adds	r7, #28
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd90      	pop	{r4, r7, pc}
 800c1fa:	bf00      	nop
 800c1fc:	0801474c 	.word	0x0801474c

0800c200 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b086      	sub	sp, #24
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	331a      	adds	r3, #26
 800c20e:	4618      	mov	r0, r3
 800c210:	f7fe fb8c 	bl	800a92c <ld_word>
 800c214:	4603      	mov	r3, r0
 800c216:	2b00      	cmp	r3, #0
 800c218:	d001      	beq.n	800c21e <pick_lfn+0x1e>
 800c21a:	2300      	movs	r3, #0
 800c21c:	e04d      	b.n	800c2ba <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	781b      	ldrb	r3, [r3, #0]
 800c222:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c226:	1e5a      	subs	r2, r3, #1
 800c228:	4613      	mov	r3, r2
 800c22a:	005b      	lsls	r3, r3, #1
 800c22c:	4413      	add	r3, r2
 800c22e:	009b      	lsls	r3, r3, #2
 800c230:	4413      	add	r3, r2
 800c232:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c234:	2301      	movs	r3, #1
 800c236:	81fb      	strh	r3, [r7, #14]
 800c238:	2300      	movs	r3, #0
 800c23a:	613b      	str	r3, [r7, #16]
 800c23c:	e028      	b.n	800c290 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c23e:	4a21      	ldr	r2, [pc, #132]	@ (800c2c4 <pick_lfn+0xc4>)
 800c240:	693b      	ldr	r3, [r7, #16]
 800c242:	4413      	add	r3, r2
 800c244:	781b      	ldrb	r3, [r3, #0]
 800c246:	461a      	mov	r2, r3
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	4413      	add	r3, r2
 800c24c:	4618      	mov	r0, r3
 800c24e:	f7fe fb6d 	bl	800a92c <ld_word>
 800c252:	4603      	mov	r3, r0
 800c254:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c256:	89fb      	ldrh	r3, [r7, #14]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d00f      	beq.n	800c27c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	2bfe      	cmp	r3, #254	@ 0xfe
 800c260:	d901      	bls.n	800c266 <pick_lfn+0x66>
 800c262:	2300      	movs	r3, #0
 800c264:	e029      	b.n	800c2ba <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800c266:	89bb      	ldrh	r3, [r7, #12]
 800c268:	81fb      	strh	r3, [r7, #14]
 800c26a:	697b      	ldr	r3, [r7, #20]
 800c26c:	1c5a      	adds	r2, r3, #1
 800c26e:	617a      	str	r2, [r7, #20]
 800c270:	005b      	lsls	r3, r3, #1
 800c272:	687a      	ldr	r2, [r7, #4]
 800c274:	4413      	add	r3, r2
 800c276:	89fa      	ldrh	r2, [r7, #14]
 800c278:	801a      	strh	r2, [r3, #0]
 800c27a:	e006      	b.n	800c28a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c27c:	89bb      	ldrh	r3, [r7, #12]
 800c27e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c282:	4293      	cmp	r3, r2
 800c284:	d001      	beq.n	800c28a <pick_lfn+0x8a>
 800c286:	2300      	movs	r3, #0
 800c288:	e017      	b.n	800c2ba <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	3301      	adds	r3, #1
 800c28e:	613b      	str	r3, [r7, #16]
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	2b0c      	cmp	r3, #12
 800c294:	d9d3      	bls.n	800c23e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	781b      	ldrb	r3, [r3, #0]
 800c29a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d00a      	beq.n	800c2b8 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	2bfe      	cmp	r3, #254	@ 0xfe
 800c2a6:	d901      	bls.n	800c2ac <pick_lfn+0xac>
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	e006      	b.n	800c2ba <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	005b      	lsls	r3, r3, #1
 800c2b0:	687a      	ldr	r2, [r7, #4]
 800c2b2:	4413      	add	r3, r2
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800c2b8:	2301      	movs	r3, #1
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3718      	adds	r7, #24
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
 800c2c2:	bf00      	nop
 800c2c4:	0801474c 	.word	0x0801474c

0800c2c8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b088      	sub	sp, #32
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	60f8      	str	r0, [r7, #12]
 800c2d0:	60b9      	str	r1, [r7, #8]
 800c2d2:	4611      	mov	r1, r2
 800c2d4:	461a      	mov	r2, r3
 800c2d6:	460b      	mov	r3, r1
 800c2d8:	71fb      	strb	r3, [r7, #7]
 800c2da:	4613      	mov	r3, r2
 800c2dc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	330d      	adds	r3, #13
 800c2e2:	79ba      	ldrb	r2, [r7, #6]
 800c2e4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	330b      	adds	r3, #11
 800c2ea:	220f      	movs	r2, #15
 800c2ec:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	330c      	adds	r3, #12
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	331a      	adds	r3, #26
 800c2fa:	2100      	movs	r1, #0
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f7fe fc27 	bl	800ab50 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c302:	79fb      	ldrb	r3, [r7, #7]
 800c304:	1e5a      	subs	r2, r3, #1
 800c306:	4613      	mov	r3, r2
 800c308:	005b      	lsls	r3, r3, #1
 800c30a:	4413      	add	r3, r2
 800c30c:	009b      	lsls	r3, r3, #2
 800c30e:	4413      	add	r3, r2
 800c310:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c312:	2300      	movs	r3, #0
 800c314:	82fb      	strh	r3, [r7, #22]
 800c316:	2300      	movs	r3, #0
 800c318:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c31a:	8afb      	ldrh	r3, [r7, #22]
 800c31c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c320:	4293      	cmp	r3, r2
 800c322:	d007      	beq.n	800c334 <put_lfn+0x6c>
 800c324:	69fb      	ldr	r3, [r7, #28]
 800c326:	1c5a      	adds	r2, r3, #1
 800c328:	61fa      	str	r2, [r7, #28]
 800c32a:	005b      	lsls	r3, r3, #1
 800c32c:	68fa      	ldr	r2, [r7, #12]
 800c32e:	4413      	add	r3, r2
 800c330:	881b      	ldrh	r3, [r3, #0]
 800c332:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c334:	4a17      	ldr	r2, [pc, #92]	@ (800c394 <put_lfn+0xcc>)
 800c336:	69bb      	ldr	r3, [r7, #24]
 800c338:	4413      	add	r3, r2
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	461a      	mov	r2, r3
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	4413      	add	r3, r2
 800c342:	8afa      	ldrh	r2, [r7, #22]
 800c344:	4611      	mov	r1, r2
 800c346:	4618      	mov	r0, r3
 800c348:	f7fe fc02 	bl	800ab50 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c34c:	8afb      	ldrh	r3, [r7, #22]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d102      	bne.n	800c358 <put_lfn+0x90>
 800c352:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c356:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c358:	69bb      	ldr	r3, [r7, #24]
 800c35a:	3301      	adds	r3, #1
 800c35c:	61bb      	str	r3, [r7, #24]
 800c35e:	69bb      	ldr	r3, [r7, #24]
 800c360:	2b0c      	cmp	r3, #12
 800c362:	d9da      	bls.n	800c31a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c364:	8afb      	ldrh	r3, [r7, #22]
 800c366:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d006      	beq.n	800c37c <put_lfn+0xb4>
 800c36e:	69fb      	ldr	r3, [r7, #28]
 800c370:	005b      	lsls	r3, r3, #1
 800c372:	68fa      	ldr	r2, [r7, #12]
 800c374:	4413      	add	r3, r2
 800c376:	881b      	ldrh	r3, [r3, #0]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d103      	bne.n	800c384 <put_lfn+0xbc>
 800c37c:	79fb      	ldrb	r3, [r7, #7]
 800c37e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c382:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	79fa      	ldrb	r2, [r7, #7]
 800c388:	701a      	strb	r2, [r3, #0]
}
 800c38a:	bf00      	nop
 800c38c:	3720      	adds	r7, #32
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}
 800c392:	bf00      	nop
 800c394:	0801474c 	.word	0x0801474c

0800c398 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b08c      	sub	sp, #48	@ 0x30
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	60f8      	str	r0, [r7, #12]
 800c3a0:	60b9      	str	r1, [r7, #8]
 800c3a2:	607a      	str	r2, [r7, #4]
 800c3a4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c3a6:	220b      	movs	r2, #11
 800c3a8:	68b9      	ldr	r1, [r7, #8]
 800c3aa:	68f8      	ldr	r0, [r7, #12]
 800c3ac:	f7fe fc9c 	bl	800ace8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	2b05      	cmp	r3, #5
 800c3b4:	d929      	bls.n	800c40a <gen_numname+0x72>
		sr = seq;
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c3ba:	e020      	b.n	800c3fe <gen_numname+0x66>
			wc = *lfn++;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	1c9a      	adds	r2, r3, #2
 800c3c0:	607a      	str	r2, [r7, #4]
 800c3c2:	881b      	ldrh	r3, [r3, #0]
 800c3c4:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c3ca:	e015      	b.n	800c3f8 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800c3cc:	69fb      	ldr	r3, [r7, #28]
 800c3ce:	005a      	lsls	r2, r3, #1
 800c3d0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c3d2:	f003 0301 	and.w	r3, r3, #1
 800c3d6:	4413      	add	r3, r2
 800c3d8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c3da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c3dc:	085b      	lsrs	r3, r3, #1
 800c3de:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c3e0:	69fb      	ldr	r3, [r7, #28]
 800c3e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d003      	beq.n	800c3f2 <gen_numname+0x5a>
 800c3ea:	69fa      	ldr	r2, [r7, #28]
 800c3ec:	4b30      	ldr	r3, [pc, #192]	@ (800c4b0 <gen_numname+0x118>)
 800c3ee:	4053      	eors	r3, r2
 800c3f0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c3f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3f4:	3301      	adds	r3, #1
 800c3f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c3f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3fa:	2b0f      	cmp	r3, #15
 800c3fc:	d9e6      	bls.n	800c3cc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	881b      	ldrh	r3, [r3, #0]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d1da      	bne.n	800c3bc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800c406:	69fb      	ldr	r3, [r7, #28]
 800c408:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c40a:	2307      	movs	r3, #7
 800c40c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	b2db      	uxtb	r3, r3
 800c412:	f003 030f 	and.w	r3, r3, #15
 800c416:	b2db      	uxtb	r3, r3
 800c418:	3330      	adds	r3, #48	@ 0x30
 800c41a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800c41e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c422:	2b39      	cmp	r3, #57	@ 0x39
 800c424:	d904      	bls.n	800c430 <gen_numname+0x98>
 800c426:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c42a:	3307      	adds	r3, #7
 800c42c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800c430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c432:	1e5a      	subs	r2, r3, #1
 800c434:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c436:	3330      	adds	r3, #48	@ 0x30
 800c438:	443b      	add	r3, r7
 800c43a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800c43e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	091b      	lsrs	r3, r3, #4
 800c446:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d1df      	bne.n	800c40e <gen_numname+0x76>
	ns[i] = '~';
 800c44e:	f107 0214 	add.w	r2, r7, #20
 800c452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c454:	4413      	add	r3, r2
 800c456:	227e      	movs	r2, #126	@ 0x7e
 800c458:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c45a:	2300      	movs	r3, #0
 800c45c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c45e:	e002      	b.n	800c466 <gen_numname+0xce>
 800c460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c462:	3301      	adds	r3, #1
 800c464:	627b      	str	r3, [r7, #36]	@ 0x24
 800c466:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c46a:	429a      	cmp	r2, r3
 800c46c:	d205      	bcs.n	800c47a <gen_numname+0xe2>
 800c46e:	68fa      	ldr	r2, [r7, #12]
 800c470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c472:	4413      	add	r3, r2
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	2b20      	cmp	r3, #32
 800c478:	d1f2      	bne.n	800c460 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c47c:	2b07      	cmp	r3, #7
 800c47e:	d807      	bhi.n	800c490 <gen_numname+0xf8>
 800c480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c482:	1c5a      	adds	r2, r3, #1
 800c484:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c486:	3330      	adds	r3, #48	@ 0x30
 800c488:	443b      	add	r3, r7
 800c48a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c48e:	e000      	b.n	800c492 <gen_numname+0xfa>
 800c490:	2120      	movs	r1, #32
 800c492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c494:	1c5a      	adds	r2, r3, #1
 800c496:	627a      	str	r2, [r7, #36]	@ 0x24
 800c498:	68fa      	ldr	r2, [r7, #12]
 800c49a:	4413      	add	r3, r2
 800c49c:	460a      	mov	r2, r1
 800c49e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c4a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4a2:	2b07      	cmp	r3, #7
 800c4a4:	d9e9      	bls.n	800c47a <gen_numname+0xe2>
}
 800c4a6:	bf00      	nop
 800c4a8:	bf00      	nop
 800c4aa:	3730      	adds	r7, #48	@ 0x30
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}
 800c4b0:	00011021 	.word	0x00011021

0800c4b4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b085      	sub	sp, #20
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c4c0:	230b      	movs	r3, #11
 800c4c2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c4c4:	7bfb      	ldrb	r3, [r7, #15]
 800c4c6:	b2da      	uxtb	r2, r3
 800c4c8:	0852      	lsrs	r2, r2, #1
 800c4ca:	01db      	lsls	r3, r3, #7
 800c4cc:	4313      	orrs	r3, r2
 800c4ce:	b2da      	uxtb	r2, r3
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	1c59      	adds	r1, r3, #1
 800c4d4:	6079      	str	r1, [r7, #4]
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	4413      	add	r3, r2
 800c4da:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	3b01      	subs	r3, #1
 800c4e0:	60bb      	str	r3, [r7, #8]
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d1ed      	bne.n	800c4c4 <sum_sfn+0x10>
	return sum;
 800c4e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3714      	adds	r7, #20
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bc80      	pop	{r7}
 800c4f2:	4770      	bx	lr

0800c4f4 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b087      	sub	sp, #28
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	3301      	adds	r3, #1
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	3301      	adds	r3, #1
 800c504:	015b      	lsls	r3, r3, #5
 800c506:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800c508:	2300      	movs	r3, #0
 800c50a:	827b      	strh	r3, [r7, #18]
 800c50c:	2300      	movs	r3, #0
 800c50e:	617b      	str	r3, [r7, #20]
 800c510:	e017      	b.n	800c542 <xdir_sum+0x4e>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	2b02      	cmp	r3, #2
 800c516:	d103      	bne.n	800c520 <xdir_sum+0x2c>
			i++;
 800c518:	697b      	ldr	r3, [r7, #20]
 800c51a:	3301      	adds	r3, #1
 800c51c:	617b      	str	r3, [r7, #20]
 800c51e:	e00d      	b.n	800c53c <xdir_sum+0x48>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800c520:	8a7b      	ldrh	r3, [r7, #18]
 800c522:	03db      	lsls	r3, r3, #15
 800c524:	b29a      	uxth	r2, r3
 800c526:	8a7b      	ldrh	r3, [r7, #18]
 800c528:	085b      	lsrs	r3, r3, #1
 800c52a:	b29b      	uxth	r3, r3
 800c52c:	4413      	add	r3, r2
 800c52e:	b29b      	uxth	r3, r3
 800c530:	6879      	ldr	r1, [r7, #4]
 800c532:	697a      	ldr	r2, [r7, #20]
 800c534:	440a      	add	r2, r1
 800c536:	7812      	ldrb	r2, [r2, #0]
 800c538:	4413      	add	r3, r2
 800c53a:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	3301      	adds	r3, #1
 800c540:	617b      	str	r3, [r7, #20]
 800c542:	697a      	ldr	r2, [r7, #20]
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	429a      	cmp	r2, r3
 800c548:	d3e3      	bcc.n	800c512 <xdir_sum+0x1e>
		}
	}
	return sum;
 800c54a:	8a7b      	ldrh	r3, [r7, #18]
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	371c      	adds	r7, #28
 800c550:	46bd      	mov	sp, r7
 800c552:	bc80      	pop	{r7}
 800c554:	4770      	bx	lr

0800c556 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800c556:	b580      	push	{r7, lr}
 800c558:	b084      	sub	sp, #16
 800c55a:	af00      	add	r7, sp, #0
 800c55c:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800c55e:	2300      	movs	r3, #0
 800c560:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800c562:	e01f      	b.n	800c5a4 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800c564:	89bb      	ldrh	r3, [r7, #12]
 800c566:	4618      	mov	r0, r3
 800c568:	f002 fc20 	bl	800edac <ff_wtoupper>
 800c56c:	4603      	mov	r3, r0
 800c56e:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800c570:	89fb      	ldrh	r3, [r7, #14]
 800c572:	03db      	lsls	r3, r3, #15
 800c574:	b29a      	uxth	r2, r3
 800c576:	89fb      	ldrh	r3, [r7, #14]
 800c578:	085b      	lsrs	r3, r3, #1
 800c57a:	b29b      	uxth	r3, r3
 800c57c:	4413      	add	r3, r2
 800c57e:	b29a      	uxth	r2, r3
 800c580:	89bb      	ldrh	r3, [r7, #12]
 800c582:	b2db      	uxtb	r3, r3
 800c584:	b29b      	uxth	r3, r3
 800c586:	4413      	add	r3, r2
 800c588:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800c58a:	89fb      	ldrh	r3, [r7, #14]
 800c58c:	03db      	lsls	r3, r3, #15
 800c58e:	b29a      	uxth	r2, r3
 800c590:	89fb      	ldrh	r3, [r7, #14]
 800c592:	085b      	lsrs	r3, r3, #1
 800c594:	b29b      	uxth	r3, r3
 800c596:	4413      	add	r3, r2
 800c598:	b29a      	uxth	r2, r3
 800c59a:	89bb      	ldrh	r3, [r7, #12]
 800c59c:	0a1b      	lsrs	r3, r3, #8
 800c59e:	b29b      	uxth	r3, r3
 800c5a0:	4413      	add	r3, r2
 800c5a2:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	1c9a      	adds	r2, r3, #2
 800c5a8:	607a      	str	r2, [r7, #4]
 800c5aa:	881b      	ldrh	r3, [r3, #0]
 800c5ac:	81bb      	strh	r3, [r7, #12]
 800c5ae:	89bb      	ldrh	r3, [r7, #12]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d1d7      	bne.n	800c564 <xname_sum+0xe>
	}
	return sum;
 800c5b4:	89fb      	ldrh	r3, [r7, #14]
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3710      	adds	r7, #16
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
	...

0800c5c0 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800c5c0:	b590      	push	{r4, r7, lr}
 800c5c2:	b087      	sub	sp, #28
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	691b      	ldr	r3, [r3, #16]
 800c5ce:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681a      	ldr	r2, [r3, #0]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5d8:	4619      	mov	r1, r3
 800c5da:	4610      	mov	r0, r2
 800c5dc:	f7fe fda8 	bl	800b130 <move_window>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800c5e4:	7bfb      	ldrb	r3, [r7, #15]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d001      	beq.n	800c5ee <load_xdir+0x2e>
 800c5ea:	7bfb      	ldrb	r3, [r7, #15]
 800c5ec:	e09f      	b.n	800c72e <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	2b85      	cmp	r3, #133	@ 0x85
 800c5f6:	d001      	beq.n	800c5fc <load_xdir+0x3c>
 800c5f8:	2302      	movs	r3, #2
 800c5fa:	e098      	b.n	800c72e <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c600:	2220      	movs	r2, #32
 800c602:	4619      	mov	r1, r3
 800c604:	6938      	ldr	r0, [r7, #16]
 800c606:	f7fe fb6f 	bl	800ace8 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	3301      	adds	r3, #1
 800c60e:	781b      	ldrb	r3, [r3, #0]
 800c610:	3301      	adds	r3, #1
 800c612:	015b      	lsls	r3, r3, #5
 800c614:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	2b5f      	cmp	r3, #95	@ 0x5f
 800c61a:	d903      	bls.n	800c624 <load_xdir+0x64>
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800c622:	d901      	bls.n	800c628 <load_xdir+0x68>
 800c624:	2302      	movs	r3, #2
 800c626:	e082      	b.n	800c72e <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800c628:	2100      	movs	r1, #0
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f7ff fc07 	bl	800be3e <dir_next>
 800c630:	4603      	mov	r3, r0
 800c632:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800c634:	7bfb      	ldrb	r3, [r7, #15]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d001      	beq.n	800c63e <load_xdir+0x7e>
 800c63a:	7bfb      	ldrb	r3, [r7, #15]
 800c63c:	e077      	b.n	800c72e <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681a      	ldr	r2, [r3, #0]
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c646:	4619      	mov	r1, r3
 800c648:	4610      	mov	r0, r2
 800c64a:	f7fe fd71 	bl	800b130 <move_window>
 800c64e:	4603      	mov	r3, r0
 800c650:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800c652:	7bfb      	ldrb	r3, [r7, #15]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d001      	beq.n	800c65c <load_xdir+0x9c>
 800c658:	7bfb      	ldrb	r3, [r7, #15]
 800c65a:	e068      	b.n	800c72e <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c660:	781b      	ldrb	r3, [r3, #0]
 800c662:	2bc0      	cmp	r3, #192	@ 0xc0
 800c664:	d001      	beq.n	800c66a <load_xdir+0xaa>
 800c666:	2302      	movs	r3, #2
 800c668:	e061      	b.n	800c72e <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800c66a:	693b      	ldr	r3, [r7, #16]
 800c66c:	f103 0020 	add.w	r0, r3, #32
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c674:	2220      	movs	r2, #32
 800c676:	4619      	mov	r1, r3
 800c678:	f7fe fb36 	bl	800ace8 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	3323      	adds	r3, #35	@ 0x23
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	332c      	adds	r3, #44	@ 0x2c
 800c684:	4a2c      	ldr	r2, [pc, #176]	@ (800c738 <load_xdir+0x178>)
 800c686:	fba2 2303 	umull	r2, r3, r2, r3
 800c68a:	08db      	lsrs	r3, r3, #3
 800c68c:	015b      	lsls	r3, r3, #5
 800c68e:	68ba      	ldr	r2, [r7, #8]
 800c690:	429a      	cmp	r2, r3
 800c692:	d201      	bcs.n	800c698 <load_xdir+0xd8>
 800c694:	2302      	movs	r3, #2
 800c696:	e04a      	b.n	800c72e <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800c698:	2340      	movs	r3, #64	@ 0x40
 800c69a:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800c69c:	2100      	movs	r1, #0
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f7ff fbcd 	bl	800be3e <dir_next>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800c6a8:	7bfb      	ldrb	r3, [r7, #15]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d001      	beq.n	800c6b2 <load_xdir+0xf2>
 800c6ae:	7bfb      	ldrb	r3, [r7, #15]
 800c6b0:	e03d      	b.n	800c72e <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681a      	ldr	r2, [r3, #0]
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6ba:	4619      	mov	r1, r3
 800c6bc:	4610      	mov	r0, r2
 800c6be:	f7fe fd37 	bl	800b130 <move_window>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800c6c6:	7bfb      	ldrb	r3, [r7, #15]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d001      	beq.n	800c6d0 <load_xdir+0x110>
 800c6cc:	7bfb      	ldrb	r3, [r7, #15]
 800c6ce:	e02e      	b.n	800c72e <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6d4:	781b      	ldrb	r3, [r3, #0]
 800c6d6:	2bc1      	cmp	r3, #193	@ 0xc1
 800c6d8:	d001      	beq.n	800c6de <load_xdir+0x11e>
 800c6da:	2302      	movs	r3, #2
 800c6dc:	e027      	b.n	800c72e <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800c6e4:	d208      	bcs.n	800c6f8 <load_xdir+0x138>
 800c6e6:	693a      	ldr	r2, [r7, #16]
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	18d0      	adds	r0, r2, r3
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6f0:	2220      	movs	r2, #32
 800c6f2:	4619      	mov	r1, r3
 800c6f4:	f7fe faf8 	bl	800ace8 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	3320      	adds	r3, #32
 800c6fc:	617b      	str	r3, [r7, #20]
 800c6fe:	697a      	ldr	r2, [r7, #20]
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	429a      	cmp	r2, r3
 800c704:	d3ca      	bcc.n	800c69c <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800c70c:	d80e      	bhi.n	800c72c <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800c70e:	6938      	ldr	r0, [r7, #16]
 800c710:	f7ff fef0 	bl	800c4f4 <xdir_sum>
 800c714:	4603      	mov	r3, r0
 800c716:	461c      	mov	r4, r3
 800c718:	693b      	ldr	r3, [r7, #16]
 800c71a:	3302      	adds	r3, #2
 800c71c:	4618      	mov	r0, r3
 800c71e:	f7fe f905 	bl	800a92c <ld_word>
 800c722:	4603      	mov	r3, r0
 800c724:	429c      	cmp	r4, r3
 800c726:	d001      	beq.n	800c72c <load_xdir+0x16c>
 800c728:	2302      	movs	r3, #2
 800c72a:	e000      	b.n	800c72e <load_xdir+0x16e>
	}
	return FR_OK;
 800c72c:	2300      	movs	r3, #0
}
 800c72e:	4618      	mov	r0, r3
 800c730:	371c      	adds	r7, #28
 800c732:	46bd      	mov	sp, r7
 800c734:	bd90      	pop	{r4, r7, pc}
 800c736:	bf00      	nop
 800c738:	88888889 	.word	0x88888889

0800c73c <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800c73c:	b5b0      	push	{r4, r5, r7, lr}
 800c73e:	b084      	sub	sp, #16
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
 800c744:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800c746:	6839      	ldr	r1, [r7, #0]
 800c748:	6808      	ldr	r0, [r1, #0]
 800c74a:	6879      	ldr	r1, [r7, #4]
 800c74c:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800c74e:	6839      	ldr	r1, [r7, #0]
 800c750:	6a08      	ldr	r0, [r1, #32]
 800c752:	6879      	ldr	r1, [r7, #4]
 800c754:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800c756:	6839      	ldr	r1, [r7, #0]
 800c758:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800c75a:	b2c8      	uxtb	r0, r1
 800c75c:	6879      	ldr	r1, [r7, #4]
 800c75e:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800c760:	6839      	ldr	r1, [r7, #0]
 800c762:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800c764:	2000      	movs	r0, #0
 800c766:	460c      	mov	r4, r1
 800c768:	4605      	mov	r5, r0
 800c76a:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 800c76e:	2300      	movs	r3, #0
 800c770:	6879      	ldr	r1, [r7, #4]
 800c772:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c782:	4619      	mov	r1, r3
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f7ff fad4 	bl	800bd32 <dir_sdi>
 800c78a:	4603      	mov	r3, r0
 800c78c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c78e:	7bfb      	ldrb	r3, [r7, #15]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d104      	bne.n	800c79e <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f7ff ff13 	bl	800c5c0 <load_xdir>
 800c79a:	4603      	mov	r3, r0
 800c79c:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800c79e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	3710      	adds	r7, #16
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bdb0      	pop	{r4, r5, r7, pc}

0800c7a8 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800c7a8:	b590      	push	{r4, r7, lr}
 800c7aa:	b087      	sub	sp, #28
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	691b      	ldr	r3, [r3, #16]
 800c7b6:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	1c9c      	adds	r4, r3, #2
 800c7bc:	68f8      	ldr	r0, [r7, #12]
 800c7be:	f7ff fe99 	bl	800c4f4 <xdir_sum>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	4619      	mov	r1, r3
 800c7c6:	4620      	mov	r0, r4
 800c7c8:	f7fe f9c2 	bl	800ab50 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	3301      	adds	r3, #1
 800c7d0:	781b      	ldrb	r3, [r3, #0]
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c7da:	4619      	mov	r1, r3
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f7ff faa8 	bl	800bd32 <dir_sdi>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800c7e6:	e026      	b.n	800c836 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681a      	ldr	r2, [r3, #0]
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	4610      	mov	r0, r2
 800c7f4:	f7fe fc9c 	bl	800b130 <move_window>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c7fc:	7dfb      	ldrb	r3, [r7, #23]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d11d      	bne.n	800c83e <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c806:	2220      	movs	r2, #32
 800c808:	68f9      	ldr	r1, [r7, #12]
 800c80a:	4618      	mov	r0, r3
 800c80c:	f7fe fa6c 	bl	800ace8 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	2201      	movs	r2, #1
 800c816:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	3b01      	subs	r3, #1
 800c81c:	613b      	str	r3, [r7, #16]
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d00e      	beq.n	800c842 <store_xdir+0x9a>
		dirb += SZDIRE;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	3320      	adds	r3, #32
 800c828:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800c82a:	2100      	movs	r1, #0
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f7ff fb06 	bl	800be3e <dir_next>
 800c832:	4603      	mov	r3, r0
 800c834:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800c836:	7dfb      	ldrb	r3, [r7, #23]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d0d5      	beq.n	800c7e8 <store_xdir+0x40>
 800c83c:	e002      	b.n	800c844 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800c83e:	bf00      	nop
 800c840:	e000      	b.n	800c844 <store_xdir+0x9c>
		if (--nent == 0) break;
 800c842:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800c844:	7dfb      	ldrb	r3, [r7, #23]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d002      	beq.n	800c850 <store_xdir+0xa8>
 800c84a:	7dfb      	ldrb	r3, [r7, #23]
 800c84c:	2b01      	cmp	r3, #1
 800c84e:	d101      	bne.n	800c854 <store_xdir+0xac>
 800c850:	7dfb      	ldrb	r3, [r7, #23]
 800c852:	e000      	b.n	800c856 <store_xdir+0xae>
 800c854:	2302      	movs	r3, #2
}
 800c856:	4618      	mov	r0, r3
 800c858:	371c      	adds	r7, #28
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd90      	pop	{r4, r7, pc}

0800c85e <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800c85e:	b590      	push	{r4, r7, lr}
 800c860:	b085      	sub	sp, #20
 800c862:	af00      	add	r7, sp, #0
 800c864:	6078      	str	r0, [r7, #4]
 800c866:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800c868:	2240      	movs	r2, #64	@ 0x40
 800c86a:	2100      	movs	r1, #0
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f7fe fa5b 	bl	800ad28 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2285      	movs	r2, #133	@ 0x85
 800c876:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	3320      	adds	r3, #32
 800c87c:	22c0      	movs	r2, #192	@ 0xc0
 800c87e:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800c880:	2300      	movs	r3, #0
 800c882:	72bb      	strb	r3, [r7, #10]
 800c884:	2301      	movs	r3, #1
 800c886:	72fb      	strb	r3, [r7, #11]
 800c888:	2301      	movs	r3, #1
 800c88a:	813b      	strh	r3, [r7, #8]
 800c88c:	2340      	movs	r3, #64	@ 0x40
 800c88e:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	1c5a      	adds	r2, r3, #1
 800c894:	60fa      	str	r2, [r7, #12]
 800c896:	687a      	ldr	r2, [r7, #4]
 800c898:	4413      	add	r3, r2
 800c89a:	22c1      	movs	r2, #193	@ 0xc1
 800c89c:	701a      	strb	r2, [r3, #0]
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	1c5a      	adds	r2, r3, #1
 800c8a2:	60fa      	str	r2, [r7, #12]
 800c8a4:	687a      	ldr	r2, [r7, #4]
 800c8a6:	4413      	add	r3, r2
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800c8ac:	893b      	ldrh	r3, [r7, #8]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d00b      	beq.n	800c8ca <create_xdir+0x6c>
 800c8b2:	7abb      	ldrb	r3, [r7, #10]
 800c8b4:	005b      	lsls	r3, r3, #1
 800c8b6:	683a      	ldr	r2, [r7, #0]
 800c8b8:	4413      	add	r3, r2
 800c8ba:	881b      	ldrh	r3, [r3, #0]
 800c8bc:	813b      	strh	r3, [r7, #8]
 800c8be:	893b      	ldrh	r3, [r7, #8]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d002      	beq.n	800c8ca <create_xdir+0x6c>
 800c8c4:	7abb      	ldrb	r3, [r7, #10]
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800c8ca:	687a      	ldr	r2, [r7, #4]
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	4413      	add	r3, r2
 800c8d0:	893a      	ldrh	r2, [r7, #8]
 800c8d2:	4611      	mov	r1, r2
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f7fe f93b 	bl	800ab50 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	3302      	adds	r3, #2
 800c8de:	60fb      	str	r3, [r7, #12]
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	f003 031f 	and.w	r3, r3, #31
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d1e0      	bne.n	800c8ac <create_xdir+0x4e>
		nb++;
 800c8ea:	7afb      	ldrb	r3, [r7, #11]
 800c8ec:	3301      	adds	r3, #1
 800c8ee:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800c8f0:	7abb      	ldrb	r3, [r7, #10]
 800c8f2:	005b      	lsls	r3, r3, #1
 800c8f4:	683a      	ldr	r2, [r7, #0]
 800c8f6:	4413      	add	r3, r2
 800c8f8:	881b      	ldrh	r3, [r3, #0]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d1c8      	bne.n	800c890 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	3323      	adds	r3, #35	@ 0x23
 800c902:	7aba      	ldrb	r2, [r7, #10]
 800c904:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	3301      	adds	r3, #1
 800c90a:	7afa      	ldrb	r2, [r7, #11]
 800c90c:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800c914:	6838      	ldr	r0, [r7, #0]
 800c916:	f7ff fe1e 	bl	800c556 <xname_sum>
 800c91a:	4603      	mov	r3, r0
 800c91c:	4619      	mov	r1, r3
 800c91e:	4620      	mov	r0, r4
 800c920:	f7fe f916 	bl	800ab50 <st_word>
}
 800c924:	bf00      	nop
 800c926:	3714      	adds	r7, #20
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd90      	pop	{r4, r7, pc}

0800c92c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b086      	sub	sp, #24
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
 800c934:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800c936:	2304      	movs	r3, #4
 800c938:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800c940:	23ff      	movs	r3, #255	@ 0xff
 800c942:	757b      	strb	r3, [r7, #21]
 800c944:	23ff      	movs	r3, #255	@ 0xff
 800c946:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800c948:	e09f      	b.n	800ca8a <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c94e:	4619      	mov	r1, r3
 800c950:	6938      	ldr	r0, [r7, #16]
 800c952:	f7fe fbed 	bl	800b130 <move_window>
 800c956:	4603      	mov	r3, r0
 800c958:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c95a:	7dfb      	ldrb	r3, [r7, #23]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	f040 809a 	bne.w	800ca96 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c966:	781b      	ldrb	r3, [r3, #0]
 800c968:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800c96a:	7dbb      	ldrb	r3, [r7, #22]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d102      	bne.n	800c976 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800c970:	2304      	movs	r3, #4
 800c972:	75fb      	strb	r3, [r7, #23]
 800c974:	e096      	b.n	800caa4 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	781b      	ldrb	r3, [r3, #0]
 800c97a:	2b04      	cmp	r3, #4
 800c97c:	d118      	bne.n	800c9b0 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800c97e:	7dbb      	ldrb	r3, [r7, #22]
 800c980:	2b85      	cmp	r3, #133	@ 0x85
 800c982:	d179      	bne.n	800ca78 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f7ff fe17 	bl	800c5c0 <load_xdir>
 800c992:	4603      	mov	r3, r0
 800c994:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800c996:	7dfb      	ldrb	r3, [r7, #23]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d17e      	bne.n	800ca9a <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	691b      	ldr	r3, [r3, #16]
 800c9a0:	3304      	adds	r3, #4
 800c9a2:	781b      	ldrb	r3, [r3, #0]
 800c9a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c9a8:	b2da      	uxtb	r2, r3
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	719a      	strb	r2, [r3, #6]
					}
					break;
 800c9ae:	e074      	b.n	800ca9a <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9b4:	330b      	adds	r3, #11
 800c9b6:	781b      	ldrb	r3, [r3, #0]
 800c9b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c9bc:	73fb      	strb	r3, [r7, #15]
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	7bfa      	ldrb	r2, [r7, #15]
 800c9c2:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800c9c4:	7dbb      	ldrb	r3, [r7, #22]
 800c9c6:	2be5      	cmp	r3, #229	@ 0xe5
 800c9c8:	d00e      	beq.n	800c9e8 <dir_read+0xbc>
 800c9ca:	7dbb      	ldrb	r3, [r7, #22]
 800c9cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800c9ce:	d00b      	beq.n	800c9e8 <dir_read+0xbc>
 800c9d0:	7bfb      	ldrb	r3, [r7, #15]
 800c9d2:	f023 0320 	bic.w	r3, r3, #32
 800c9d6:	2b08      	cmp	r3, #8
 800c9d8:	bf0c      	ite	eq
 800c9da:	2301      	moveq	r3, #1
 800c9dc:	2300      	movne	r3, #0
 800c9de:	b2db      	uxtb	r3, r3
 800c9e0:	461a      	mov	r2, r3
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	d002      	beq.n	800c9ee <dir_read+0xc2>
				ord = 0xFF;
 800c9e8:	23ff      	movs	r3, #255	@ 0xff
 800c9ea:	757b      	strb	r3, [r7, #21]
 800c9ec:	e044      	b.n	800ca78 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800c9ee:	7bfb      	ldrb	r3, [r7, #15]
 800c9f0:	2b0f      	cmp	r3, #15
 800c9f2:	d12f      	bne.n	800ca54 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800c9f4:	7dbb      	ldrb	r3, [r7, #22]
 800c9f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d00d      	beq.n	800ca1a <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca02:	7b5b      	ldrb	r3, [r3, #13]
 800ca04:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800ca06:	7dbb      	ldrb	r3, [r7, #22]
 800ca08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ca0c:	75bb      	strb	r3, [r7, #22]
 800ca0e:	7dbb      	ldrb	r3, [r7, #22]
 800ca10:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ca1a:	7dba      	ldrb	r2, [r7, #22]
 800ca1c:	7d7b      	ldrb	r3, [r7, #21]
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d115      	bne.n	800ca4e <dir_read+0x122>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca26:	330d      	adds	r3, #13
 800ca28:	781b      	ldrb	r3, [r3, #0]
 800ca2a:	7d3a      	ldrb	r2, [r7, #20]
 800ca2c:	429a      	cmp	r2, r3
 800ca2e:	d10e      	bne.n	800ca4e <dir_read+0x122>
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	68da      	ldr	r2, [r3, #12]
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca38:	4619      	mov	r1, r3
 800ca3a:	4610      	mov	r0, r2
 800ca3c:	f7ff fbe0 	bl	800c200 <pick_lfn>
 800ca40:	4603      	mov	r3, r0
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d003      	beq.n	800ca4e <dir_read+0x122>
 800ca46:	7d7b      	ldrb	r3, [r7, #21]
 800ca48:	3b01      	subs	r3, #1
 800ca4a:	b2db      	uxtb	r3, r3
 800ca4c:	e000      	b.n	800ca50 <dir_read+0x124>
 800ca4e:	23ff      	movs	r3, #255	@ 0xff
 800ca50:	757b      	strb	r3, [r7, #21]
 800ca52:	e011      	b.n	800ca78 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800ca54:	7d7b      	ldrb	r3, [r7, #21]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d109      	bne.n	800ca6e <dir_read+0x142>
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f7ff fd28 	bl	800c4b4 <sum_sfn>
 800ca64:	4603      	mov	r3, r0
 800ca66:	461a      	mov	r2, r3
 800ca68:	7d3b      	ldrb	r3, [r7, #20]
 800ca6a:	4293      	cmp	r3, r2
 800ca6c:	d017      	beq.n	800ca9e <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f04f 32ff 	mov.w	r2, #4294967295
 800ca74:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 800ca76:	e012      	b.n	800ca9e <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800ca78:	2100      	movs	r1, #0
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f7ff f9df 	bl	800be3e <dir_next>
 800ca80:	4603      	mov	r3, r0
 800ca82:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ca84:	7dfb      	ldrb	r3, [r7, #23]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d10b      	bne.n	800caa2 <dir_read+0x176>
	while (dp->sect) {
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	f47f af5b 	bne.w	800c94a <dir_read+0x1e>
 800ca94:	e006      	b.n	800caa4 <dir_read+0x178>
		if (res != FR_OK) break;
 800ca96:	bf00      	nop
 800ca98:	e004      	b.n	800caa4 <dir_read+0x178>
					break;
 800ca9a:	bf00      	nop
 800ca9c:	e002      	b.n	800caa4 <dir_read+0x178>
					break;
 800ca9e:	bf00      	nop
 800caa0:	e000      	b.n	800caa4 <dir_read+0x178>
		if (res != FR_OK) break;
 800caa2:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800caa4:	7dfb      	ldrb	r3, [r7, #23]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d002      	beq.n	800cab0 <dir_read+0x184>
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2200      	movs	r2, #0
 800caae:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 800cab0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	3718      	adds	r7, #24
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}

0800caba <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800caba:	b590      	push	{r4, r7, lr}
 800cabc:	b089      	sub	sp, #36	@ 0x24
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cac8:	2100      	movs	r1, #0
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	f7ff f931 	bl	800bd32 <dir_sdi>
 800cad0:	4603      	mov	r3, r0
 800cad2:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800cad4:	7ffb      	ldrb	r3, [r7, #31]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d001      	beq.n	800cade <dir_find+0x24>
 800cada:	7ffb      	ldrb	r3, [r7, #31]
 800cadc:	e113      	b.n	800cd06 <dir_find+0x24c>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	781b      	ldrb	r3, [r3, #0]
 800cae2:	2b04      	cmp	r3, #4
 800cae4:	d165      	bne.n	800cbb2 <dir_find+0xf8>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	68db      	ldr	r3, [r3, #12]
 800caea:	4618      	mov	r0, r3
 800caec:	f7ff fd33 	bl	800c556 <xname_sum>
 800caf0:	4603      	mov	r3, r0
 800caf2:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800caf4:	e050      	b.n	800cb98 <dir_find+0xde>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	691b      	ldr	r3, [r3, #16]
 800cafa:	3324      	adds	r3, #36	@ 0x24
 800cafc:	4618      	mov	r0, r3
 800cafe:	f7fd ff15 	bl	800a92c <ld_word>
 800cb02:	4603      	mov	r3, r0
 800cb04:	461a      	mov	r2, r3
 800cb06:	893b      	ldrh	r3, [r7, #8]
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	d144      	bne.n	800cb96 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	691b      	ldr	r3, [r3, #16]
 800cb10:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800cb14:	76fb      	strb	r3, [r7, #27]
 800cb16:	2340      	movs	r3, #64	@ 0x40
 800cb18:	617b      	str	r3, [r7, #20]
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	613b      	str	r3, [r7, #16]
 800cb1e:	e029      	b.n	800cb74 <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	f003 031f 	and.w	r3, r3, #31
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d102      	bne.n	800cb30 <dir_find+0x76>
 800cb2a:	697b      	ldr	r3, [r7, #20]
 800cb2c:	3302      	adds	r3, #2
 800cb2e:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	691a      	ldr	r2, [r3, #16]
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	4413      	add	r3, r2
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f7fd fef7 	bl	800a92c <ld_word>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	4618      	mov	r0, r3
 800cb42:	f002 f933 	bl	800edac <ff_wtoupper>
 800cb46:	4603      	mov	r3, r0
 800cb48:	461c      	mov	r4, r3
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	68da      	ldr	r2, [r3, #12]
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	005b      	lsls	r3, r3, #1
 800cb52:	4413      	add	r3, r2
 800cb54:	881b      	ldrh	r3, [r3, #0]
 800cb56:	4618      	mov	r0, r3
 800cb58:	f002 f928 	bl	800edac <ff_wtoupper>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	429c      	cmp	r4, r3
 800cb60:	d10c      	bne.n	800cb7c <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800cb62:	7efb      	ldrb	r3, [r7, #27]
 800cb64:	3b01      	subs	r3, #1
 800cb66:	76fb      	strb	r3, [r7, #27]
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	3302      	adds	r3, #2
 800cb6c:	617b      	str	r3, [r7, #20]
 800cb6e:	693b      	ldr	r3, [r7, #16]
 800cb70:	3301      	adds	r3, #1
 800cb72:	613b      	str	r3, [r7, #16]
 800cb74:	7efb      	ldrb	r3, [r7, #27]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d1d2      	bne.n	800cb20 <dir_find+0x66>
 800cb7a:	e000      	b.n	800cb7e <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800cb7c:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800cb7e:	7efb      	ldrb	r3, [r7, #27]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d109      	bne.n	800cb98 <dir_find+0xde>
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	68da      	ldr	r2, [r3, #12]
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	005b      	lsls	r3, r3, #1
 800cb8c:	4413      	add	r3, r2
 800cb8e:	881b      	ldrh	r3, [r3, #0]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d00b      	beq.n	800cbac <dir_find+0xf2>
 800cb94:	e000      	b.n	800cb98 <dir_find+0xde>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800cb96:	bf00      	nop
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800cb98:	2100      	movs	r1, #0
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f7ff fec6 	bl	800c92c <dir_read>
 800cba0:	4603      	mov	r3, r0
 800cba2:	77fb      	strb	r3, [r7, #31]
 800cba4:	7ffb      	ldrb	r3, [r7, #31]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d0a5      	beq.n	800caf6 <dir_find+0x3c>
 800cbaa:	e000      	b.n	800cbae <dir_find+0xf4>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800cbac:	bf00      	nop
		}
		return res;
 800cbae:	7ffb      	ldrb	r3, [r7, #31]
 800cbb0:	e0a9      	b.n	800cd06 <dir_find+0x24c>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cbb2:	23ff      	movs	r3, #255	@ 0xff
 800cbb4:	773b      	strb	r3, [r7, #28]
 800cbb6:	7f3b      	ldrb	r3, [r7, #28]
 800cbb8:	777b      	strb	r3, [r7, #29]
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	f04f 32ff 	mov.w	r2, #4294967295
 800cbc0:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbc6:	4619      	mov	r1, r3
 800cbc8:	68f8      	ldr	r0, [r7, #12]
 800cbca:	f7fe fab1 	bl	800b130 <move_window>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800cbd2:	7ffb      	ldrb	r3, [r7, #31]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	f040 8090 	bne.w	800ccfa <dir_find+0x240>
		c = dp->dir[DIR_Name];
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cbe2:	7fbb      	ldrb	r3, [r7, #30]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d102      	bne.n	800cbee <dir_find+0x134>
 800cbe8:	2304      	movs	r3, #4
 800cbea:	77fb      	strb	r3, [r7, #31]
 800cbec:	e08a      	b.n	800cd04 <dir_find+0x24a>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbf2:	330b      	adds	r3, #11
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cbfa:	72fb      	strb	r3, [r7, #11]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	7afa      	ldrb	r2, [r7, #11]
 800cc00:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800cc02:	7fbb      	ldrb	r3, [r7, #30]
 800cc04:	2be5      	cmp	r3, #229	@ 0xe5
 800cc06:	d007      	beq.n	800cc18 <dir_find+0x15e>
 800cc08:	7afb      	ldrb	r3, [r7, #11]
 800cc0a:	f003 0308 	and.w	r3, r3, #8
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d009      	beq.n	800cc26 <dir_find+0x16c>
 800cc12:	7afb      	ldrb	r3, [r7, #11]
 800cc14:	2b0f      	cmp	r3, #15
 800cc16:	d006      	beq.n	800cc26 <dir_find+0x16c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cc18:	23ff      	movs	r3, #255	@ 0xff
 800cc1a:	777b      	strb	r3, [r7, #29]
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f04f 32ff 	mov.w	r2, #4294967295
 800cc22:	64da      	str	r2, [r3, #76]	@ 0x4c
 800cc24:	e05e      	b.n	800cce4 <dir_find+0x22a>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800cc26:	7afb      	ldrb	r3, [r7, #11]
 800cc28:	2b0f      	cmp	r3, #15
 800cc2a:	d136      	bne.n	800cc9a <dir_find+0x1e0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800cc32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d154      	bne.n	800cce4 <dir_find+0x22a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800cc3a:	7fbb      	ldrb	r3, [r7, #30]
 800cc3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d00d      	beq.n	800cc60 <dir_find+0x1a6>
						sum = dp->dir[LDIR_Chksum];
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc48:	7b5b      	ldrb	r3, [r3, #13]
 800cc4a:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800cc4c:	7fbb      	ldrb	r3, [r7, #30]
 800cc4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc52:	77bb      	strb	r3, [r7, #30]
 800cc54:	7fbb      	ldrb	r3, [r7, #30]
 800cc56:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cc60:	7fba      	ldrb	r2, [r7, #30]
 800cc62:	7f7b      	ldrb	r3, [r7, #29]
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d115      	bne.n	800cc94 <dir_find+0x1da>
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc6c:	330d      	adds	r3, #13
 800cc6e:	781b      	ldrb	r3, [r3, #0]
 800cc70:	7f3a      	ldrb	r2, [r7, #28]
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d10e      	bne.n	800cc94 <dir_find+0x1da>
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	68da      	ldr	r2, [r3, #12]
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc7e:	4619      	mov	r1, r3
 800cc80:	4610      	mov	r0, r2
 800cc82:	f7ff fa4d 	bl	800c120 <cmp_lfn>
 800cc86:	4603      	mov	r3, r0
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d003      	beq.n	800cc94 <dir_find+0x1da>
 800cc8c:	7f7b      	ldrb	r3, [r7, #29]
 800cc8e:	3b01      	subs	r3, #1
 800cc90:	b2db      	uxtb	r3, r3
 800cc92:	e000      	b.n	800cc96 <dir_find+0x1dc>
 800cc94:	23ff      	movs	r3, #255	@ 0xff
 800cc96:	777b      	strb	r3, [r7, #29]
 800cc98:	e024      	b.n	800cce4 <dir_find+0x22a>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cc9a:	7f7b      	ldrb	r3, [r7, #29]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d109      	bne.n	800ccb4 <dir_find+0x1fa>
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cca4:	4618      	mov	r0, r3
 800cca6:	f7ff fc05 	bl	800c4b4 <sum_sfn>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	461a      	mov	r2, r3
 800ccae:	7f3b      	ldrb	r3, [r7, #28]
 800ccb0:	4293      	cmp	r3, r2
 800ccb2:	d024      	beq.n	800ccfe <dir_find+0x244>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800ccba:	f003 0301 	and.w	r3, r3, #1
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d10a      	bne.n	800ccd8 <dir_find+0x21e>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	3340      	adds	r3, #64	@ 0x40
 800ccca:	220b      	movs	r2, #11
 800cccc:	4619      	mov	r1, r3
 800ccce:	f7fe f845 	bl	800ad5c <mem_cmp>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d014      	beq.n	800cd02 <dir_find+0x248>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ccd8:	23ff      	movs	r3, #255	@ 0xff
 800ccda:	777b      	strb	r3, [r7, #29]
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f04f 32ff 	mov.w	r2, #4294967295
 800cce2:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cce4:	2100      	movs	r1, #0
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f7ff f8a9 	bl	800be3e <dir_next>
 800ccec:	4603      	mov	r3, r0
 800ccee:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800ccf0:	7ffb      	ldrb	r3, [r7, #31]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	f43f af65 	beq.w	800cbc2 <dir_find+0x108>
 800ccf8:	e004      	b.n	800cd04 <dir_find+0x24a>
		if (res != FR_OK) break;
 800ccfa:	bf00      	nop
 800ccfc:	e002      	b.n	800cd04 <dir_find+0x24a>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ccfe:	bf00      	nop
 800cd00:	e000      	b.n	800cd04 <dir_find+0x24a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cd02:	bf00      	nop

	return res;
 800cd04:	7ffb      	ldrb	r3, [r7, #31]
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	3724      	adds	r7, #36	@ 0x24
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd90      	pop	{r4, r7, pc}
	...

0800cd10 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cd10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800cd14:	b0a0      	sub	sp, #128	@ 0x80
 800cd16:	af00      	add	r7, sp, #0
 800cd18:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800cd26:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d001      	beq.n	800cd32 <dir_register+0x22>
 800cd2e:	2306      	movs	r3, #6
 800cd30:	e18e      	b.n	800d050 <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800cd32:	2300      	movs	r3, #0
 800cd34:	677b      	str	r3, [r7, #116]	@ 0x74
 800cd36:	e002      	b.n	800cd3e <dir_register+0x2e>
 800cd38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cd3a:	3301      	adds	r3, #1
 800cd3c:	677b      	str	r3, [r7, #116]	@ 0x74
 800cd3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd40:	68da      	ldr	r2, [r3, #12]
 800cd42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cd44:	005b      	lsls	r3, r3, #1
 800cd46:	4413      	add	r3, r2
 800cd48:	881b      	ldrh	r3, [r3, #0]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d1f4      	bne.n	800cd38 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800cd4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd50:	781b      	ldrb	r3, [r3, #0]
 800cd52:	2b04      	cmp	r3, #4
 800cd54:	f040 809f 	bne.w	800ce96 <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800cd58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cd5a:	330e      	adds	r3, #14
 800cd5c:	4aa2      	ldr	r2, [pc, #648]	@ (800cfe8 <dir_register+0x2d8>)
 800cd5e:	fba2 2303 	umull	r2, r3, r2, r3
 800cd62:	08db      	lsrs	r3, r3, #3
 800cd64:	3302      	adds	r3, #2
 800cd66:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800cd68:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f7ff f93c 	bl	800bfe8 <dir_alloc>
 800cd70:	4603      	mov	r3, r0
 800cd72:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 800cd76:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d002      	beq.n	800cd84 <dir_register+0x74>
 800cd7e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800cd82:	e165      	b.n	800d050 <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cd88:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cd8a:	3b01      	subs	r3, #1
 800cd8c:	015b      	lsls	r3, r3, #5
 800cd8e:	1ad2      	subs	r2, r2, r3
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	689b      	ldr	r3, [r3, #8]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d072      	beq.n	800ce82 <dir_register+0x172>
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	79db      	ldrb	r3, [r3, #7]
 800cda0:	f003 0304 	and.w	r3, r3, #4
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d06c      	beq.n	800ce82 <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cdae:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800cdb0:	8949      	ldrh	r1, [r1, #10]
 800cdb2:	0249      	lsls	r1, r1, #9
 800cdb4:	2000      	movs	r0, #0
 800cdb6:	460c      	mov	r4, r1
 800cdb8:	4605      	mov	r5, r0
 800cdba:	eb12 0804 	adds.w	r8, r2, r4
 800cdbe:	eb43 0905 	adc.w	r9, r3, r5
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f7fe fd58 	bl	800b880 <fill_first_frag>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800cdd6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d002      	beq.n	800cde4 <dir_register+0xd4>
 800cdde:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800cde2:	e135      	b.n	800d050 <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cdea:	f04f 32ff 	mov.w	r2, #4294967295
 800cdee:	4619      	mov	r1, r3
 800cdf0:	f7fe fd75 	bl	800b8de <fill_last_frag>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800cdfa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d002      	beq.n	800ce08 <dir_register+0xf8>
 800ce02:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ce06:	e123      	b.n	800d050 <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800ce08:	687a      	ldr	r2, [r7, #4]
 800ce0a:	f107 0308 	add.w	r3, r7, #8
 800ce0e:	4611      	mov	r1, r2
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7ff fc93 	bl	800c73c <load_obj_dir>
 800ce16:	4603      	mov	r3, r0
 800ce18:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800ce1c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d002      	beq.n	800ce2a <dir_register+0x11a>
 800ce24:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ce28:	e112      	b.n	800d050 <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800ce2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce2c:	691b      	ldr	r3, [r3, #16]
 800ce2e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ce38:	4608      	mov	r0, r1
 800ce3a:	f7fd fece 	bl	800abda <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800ce3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce40:	691b      	ldr	r3, [r3, #16]
 800ce42:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ce4c:	4608      	mov	r0, r1
 800ce4e:	f7fd fec4 	bl	800abda <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	79da      	ldrb	r2, [r3, #7]
 800ce56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce58:	691b      	ldr	r3, [r3, #16]
 800ce5a:	3321      	adds	r3, #33	@ 0x21
 800ce5c:	f042 0201 	orr.w	r2, r2, #1
 800ce60:	b2d2      	uxtb	r2, r2
 800ce62:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800ce64:	f107 0308 	add.w	r3, r7, #8
 800ce68:	4618      	mov	r0, r3
 800ce6a:	f7ff fc9d 	bl	800c7a8 <store_xdir>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800ce74:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d002      	beq.n	800ce82 <dir_register+0x172>
 800ce7c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ce80:	e0e6      	b.n	800d050 <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800ce82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce84:	691a      	ldr	r2, [r3, #16]
 800ce86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce88:	68db      	ldr	r3, [r3, #12]
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	4610      	mov	r0, r2
 800ce8e:	f7ff fce6 	bl	800c85e <create_xdir>
		return FR_OK;
 800ce92:	2300      	movs	r3, #0
 800ce94:	e0dc      	b.n	800d050 <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800ce9c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800cea0:	220c      	movs	r2, #12
 800cea2:	4618      	mov	r0, r3
 800cea4:	f7fd ff20 	bl	800ace8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800cea8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ceac:	f003 0301 	and.w	r3, r3, #1
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d033      	beq.n	800cf1c <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2240      	movs	r2, #64	@ 0x40
 800ceb8:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 800cebc:	2301      	movs	r3, #1
 800cebe:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cec0:	e016      	b.n	800cef0 <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800cec8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ceca:	68da      	ldr	r2, [r3, #12]
 800cecc:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800ced0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ced2:	f7ff fa61 	bl	800c398 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f7ff fdef 	bl	800caba <dir_find>
 800cedc:	4603      	mov	r3, r0
 800cede:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 800cee2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d106      	bne.n	800cef8 <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 800ceea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ceec:	3301      	adds	r3, #1
 800ceee:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cef0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cef2:	2b63      	cmp	r3, #99	@ 0x63
 800cef4:	d9e5      	bls.n	800cec2 <dir_register+0x1b2>
 800cef6:	e000      	b.n	800cefa <dir_register+0x1ea>
			if (res != FR_OK) break;
 800cef8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800cefa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cefc:	2b64      	cmp	r3, #100	@ 0x64
 800cefe:	d101      	bne.n	800cf04 <dir_register+0x1f4>
 800cf00:	2307      	movs	r3, #7
 800cf02:	e0a5      	b.n	800d050 <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800cf04:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800cf08:	2b04      	cmp	r3, #4
 800cf0a:	d002      	beq.n	800cf12 <dir_register+0x202>
 800cf0c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800cf10:	e09e      	b.n	800d050 <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800cf12:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800cf1c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cf20:	f003 0302 	and.w	r3, r3, #2
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d007      	beq.n	800cf38 <dir_register+0x228>
 800cf28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cf2a:	330c      	adds	r3, #12
 800cf2c:	4a2f      	ldr	r2, [pc, #188]	@ (800cfec <dir_register+0x2dc>)
 800cf2e:	fba2 2303 	umull	r2, r3, r2, r3
 800cf32:	089b      	lsrs	r3, r3, #2
 800cf34:	3301      	adds	r3, #1
 800cf36:	e000      	b.n	800cf3a <dir_register+0x22a>
 800cf38:	2301      	movs	r3, #1
 800cf3a:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800cf3c:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f7ff f852 	bl	800bfe8 <dir_alloc>
 800cf44:	4603      	mov	r3, r0
 800cf46:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800cf4a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d14f      	bne.n	800cff2 <dir_register+0x2e2>
 800cf52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cf54:	3b01      	subs	r3, #1
 800cf56:	673b      	str	r3, [r7, #112]	@ 0x70
 800cf58:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d049      	beq.n	800cff2 <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cf62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cf64:	015b      	lsls	r3, r3, #5
 800cf66:	1ad3      	subs	r3, r2, r3
 800cf68:	4619      	mov	r1, r3
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	f7fe fee1 	bl	800bd32 <dir_sdi>
 800cf70:	4603      	mov	r3, r0
 800cf72:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800cf76:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d139      	bne.n	800cff2 <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	3340      	adds	r3, #64	@ 0x40
 800cf82:	4618      	mov	r0, r3
 800cf84:	f7ff fa96 	bl	800c4b4 <sum_sfn>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf92:	4619      	mov	r1, r3
 800cf94:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cf96:	f7fe f8cb 	bl	800b130 <move_window>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 800cfa0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d123      	bne.n	800cff0 <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800cfa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cfaa:	68d8      	ldr	r0, [r3, #12]
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800cfb0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cfb2:	b2da      	uxtb	r2, r3
 800cfb4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800cfb8:	f7ff f986 	bl	800c2c8 <put_lfn>
				fs->wflag = 1;
 800cfbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cfbe:	2201      	movs	r2, #1
 800cfc0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800cfc2:	2100      	movs	r1, #0
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f7fe ff3a 	bl	800be3e <dir_next>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --nent);
 800cfd0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d10c      	bne.n	800cff2 <dir_register+0x2e2>
 800cfd8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cfda:	3b01      	subs	r3, #1
 800cfdc:	673b      	str	r3, [r7, #112]	@ 0x70
 800cfde:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d1d4      	bne.n	800cf8e <dir_register+0x27e>
 800cfe4:	e005      	b.n	800cff2 <dir_register+0x2e2>
 800cfe6:	bf00      	nop
 800cfe8:	88888889 	.word	0x88888889
 800cfec:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800cff0:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800cff2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d128      	bne.n	800d04c <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cffe:	4619      	mov	r1, r3
 800d000:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d002:	f7fe f895 	bl	800b130 <move_window>
 800d006:	4603      	mov	r3, r0
 800d008:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800d00c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d010:	2b00      	cmp	r3, #0
 800d012:	d11b      	bne.n	800d04c <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d018:	2220      	movs	r2, #32
 800d01a:	2100      	movs	r1, #0
 800d01c:	4618      	mov	r0, r3
 800d01e:	f7fd fe83 	bl	800ad28 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	3340      	adds	r3, #64	@ 0x40
 800d02a:	220b      	movs	r2, #11
 800d02c:	4619      	mov	r1, r3
 800d02e:	f7fd fe5b 	bl	800ace8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d03c:	330c      	adds	r3, #12
 800d03e:	f002 0218 	and.w	r2, r2, #24
 800d042:	b2d2      	uxtb	r2, r2
 800d044:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d046:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d048:	2201      	movs	r2, #1
 800d04a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d04c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800d050:	4618      	mov	r0, r3
 800d052:	3780      	adds	r7, #128	@ 0x80
 800d054:	46bd      	mov	sp, r7
 800d056:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d05a:	bf00      	nop

0800d05c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b08a      	sub	sp, #40	@ 0x28
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	613b      	str	r3, [r7, #16]
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	68db      	ldr	r3, [r3, #12]
 800d072:	60fb      	str	r3, [r7, #12]
 800d074:	2300      	movs	r3, #0
 800d076:	617b      	str	r3, [r7, #20]
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d07c:	69bb      	ldr	r3, [r7, #24]
 800d07e:	1c5a      	adds	r2, r3, #1
 800d080:	61ba      	str	r2, [r7, #24]
 800d082:	693a      	ldr	r2, [r7, #16]
 800d084:	4413      	add	r3, r2
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d08a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d08c:	2b1f      	cmp	r3, #31
 800d08e:	d940      	bls.n	800d112 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d090:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d092:	2b2f      	cmp	r3, #47	@ 0x2f
 800d094:	d006      	beq.n	800d0a4 <create_name+0x48>
 800d096:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d098:	2b5c      	cmp	r3, #92	@ 0x5c
 800d09a:	d110      	bne.n	800d0be <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d09c:	e002      	b.n	800d0a4 <create_name+0x48>
 800d09e:	69bb      	ldr	r3, [r7, #24]
 800d0a0:	3301      	adds	r3, #1
 800d0a2:	61bb      	str	r3, [r7, #24]
 800d0a4:	693a      	ldr	r2, [r7, #16]
 800d0a6:	69bb      	ldr	r3, [r7, #24]
 800d0a8:	4413      	add	r3, r2
 800d0aa:	781b      	ldrb	r3, [r3, #0]
 800d0ac:	2b2f      	cmp	r3, #47	@ 0x2f
 800d0ae:	d0f6      	beq.n	800d09e <create_name+0x42>
 800d0b0:	693a      	ldr	r2, [r7, #16]
 800d0b2:	69bb      	ldr	r3, [r7, #24]
 800d0b4:	4413      	add	r3, r2
 800d0b6:	781b      	ldrb	r3, [r3, #0]
 800d0b8:	2b5c      	cmp	r3, #92	@ 0x5c
 800d0ba:	d0f0      	beq.n	800d09e <create_name+0x42>
			break;
 800d0bc:	e02a      	b.n	800d114 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	2bfe      	cmp	r3, #254	@ 0xfe
 800d0c2:	d901      	bls.n	800d0c8 <create_name+0x6c>
 800d0c4:	2306      	movs	r3, #6
 800d0c6:	e17d      	b.n	800d3c4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d0c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d0ca:	b2db      	uxtb	r3, r3
 800d0cc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d0ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d0d0:	2101      	movs	r1, #1
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f001 fe30 	bl	800ed38 <ff_convert>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d0dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d101      	bne.n	800d0e6 <create_name+0x8a>
 800d0e2:	2306      	movs	r3, #6
 800d0e4:	e16e      	b.n	800d3c4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d0e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d0e8:	2b7f      	cmp	r3, #127	@ 0x7f
 800d0ea:	d809      	bhi.n	800d100 <create_name+0xa4>
 800d0ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d0ee:	4619      	mov	r1, r3
 800d0f0:	488d      	ldr	r0, [pc, #564]	@ (800d328 <create_name+0x2cc>)
 800d0f2:	f7fd fe59 	bl	800ada8 <chk_chr>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d001      	beq.n	800d100 <create_name+0xa4>
 800d0fc:	2306      	movs	r3, #6
 800d0fe:	e161      	b.n	800d3c4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	1c5a      	adds	r2, r3, #1
 800d104:	617a      	str	r2, [r7, #20]
 800d106:	005b      	lsls	r3, r3, #1
 800d108:	68fa      	ldr	r2, [r7, #12]
 800d10a:	4413      	add	r3, r2
 800d10c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d10e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d110:	e7b4      	b.n	800d07c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d112:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d114:	693a      	ldr	r2, [r7, #16]
 800d116:	69bb      	ldr	r3, [r7, #24]
 800d118:	441a      	add	r2, r3
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d11e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d120:	2b1f      	cmp	r3, #31
 800d122:	d801      	bhi.n	800d128 <create_name+0xcc>
 800d124:	2304      	movs	r3, #4
 800d126:	e000      	b.n	800d12a <create_name+0xce>
 800d128:	2300      	movs	r3, #0
 800d12a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d12e:	e011      	b.n	800d154 <create_name+0xf8>
		w = lfn[di - 1];
 800d130:	697a      	ldr	r2, [r7, #20]
 800d132:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d136:	4413      	add	r3, r2
 800d138:	005b      	lsls	r3, r3, #1
 800d13a:	68fa      	ldr	r2, [r7, #12]
 800d13c:	4413      	add	r3, r2
 800d13e:	881b      	ldrh	r3, [r3, #0]
 800d140:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800d142:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d144:	2b20      	cmp	r3, #32
 800d146:	d002      	beq.n	800d14e <create_name+0xf2>
 800d148:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d14a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d14c:	d106      	bne.n	800d15c <create_name+0x100>
		di--;
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	3b01      	subs	r3, #1
 800d152:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d1ea      	bne.n	800d130 <create_name+0xd4>
 800d15a:	e000      	b.n	800d15e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d15c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	005b      	lsls	r3, r3, #1
 800d162:	68fa      	ldr	r2, [r7, #12]
 800d164:	4413      	add	r3, r2
 800d166:	2200      	movs	r2, #0
 800d168:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d101      	bne.n	800d174 <create_name+0x118>
 800d170:	2306      	movs	r3, #6
 800d172:	e127      	b.n	800d3c4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	3340      	adds	r3, #64	@ 0x40
 800d178:	220b      	movs	r2, #11
 800d17a:	2120      	movs	r1, #32
 800d17c:	4618      	mov	r0, r3
 800d17e:	f7fd fdd3 	bl	800ad28 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d182:	2300      	movs	r3, #0
 800d184:	61bb      	str	r3, [r7, #24]
 800d186:	e002      	b.n	800d18e <create_name+0x132>
 800d188:	69bb      	ldr	r3, [r7, #24]
 800d18a:	3301      	adds	r3, #1
 800d18c:	61bb      	str	r3, [r7, #24]
 800d18e:	69bb      	ldr	r3, [r7, #24]
 800d190:	005b      	lsls	r3, r3, #1
 800d192:	68fa      	ldr	r2, [r7, #12]
 800d194:	4413      	add	r3, r2
 800d196:	881b      	ldrh	r3, [r3, #0]
 800d198:	2b20      	cmp	r3, #32
 800d19a:	d0f5      	beq.n	800d188 <create_name+0x12c>
 800d19c:	69bb      	ldr	r3, [r7, #24]
 800d19e:	005b      	lsls	r3, r3, #1
 800d1a0:	68fa      	ldr	r2, [r7, #12]
 800d1a2:	4413      	add	r3, r2
 800d1a4:	881b      	ldrh	r3, [r3, #0]
 800d1a6:	2b2e      	cmp	r3, #46	@ 0x2e
 800d1a8:	d0ee      	beq.n	800d188 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d1aa:	69bb      	ldr	r3, [r7, #24]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d009      	beq.n	800d1c4 <create_name+0x168>
 800d1b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d1b4:	f043 0303 	orr.w	r3, r3, #3
 800d1b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d1bc:	e002      	b.n	800d1c4 <create_name+0x168>
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	3b01      	subs	r3, #1
 800d1c2:	617b      	str	r3, [r7, #20]
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d009      	beq.n	800d1de <create_name+0x182>
 800d1ca:	697a      	ldr	r2, [r7, #20]
 800d1cc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d1d0:	4413      	add	r3, r2
 800d1d2:	005b      	lsls	r3, r3, #1
 800d1d4:	68fa      	ldr	r2, [r7, #12]
 800d1d6:	4413      	add	r3, r2
 800d1d8:	881b      	ldrh	r3, [r3, #0]
 800d1da:	2b2e      	cmp	r3, #46	@ 0x2e
 800d1dc:	d1ef      	bne.n	800d1be <create_name+0x162>

	i = b = 0; ni = 8;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	623b      	str	r3, [r7, #32]
 800d1e8:	2308      	movs	r3, #8
 800d1ea:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d1ec:	69bb      	ldr	r3, [r7, #24]
 800d1ee:	1c5a      	adds	r2, r3, #1
 800d1f0:	61ba      	str	r2, [r7, #24]
 800d1f2:	005b      	lsls	r3, r3, #1
 800d1f4:	68fa      	ldr	r2, [r7, #12]
 800d1f6:	4413      	add	r3, r2
 800d1f8:	881b      	ldrh	r3, [r3, #0]
 800d1fa:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d1fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	f000 8090 	beq.w	800d324 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d204:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d206:	2b20      	cmp	r3, #32
 800d208:	d006      	beq.n	800d218 <create_name+0x1bc>
 800d20a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d20c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d20e:	d10a      	bne.n	800d226 <create_name+0x1ca>
 800d210:	69ba      	ldr	r2, [r7, #24]
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	429a      	cmp	r2, r3
 800d216:	d006      	beq.n	800d226 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800d218:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d21c:	f043 0303 	orr.w	r3, r3, #3
 800d220:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d224:	e07d      	b.n	800d322 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d226:	6a3a      	ldr	r2, [r7, #32]
 800d228:	69fb      	ldr	r3, [r7, #28]
 800d22a:	429a      	cmp	r2, r3
 800d22c:	d203      	bcs.n	800d236 <create_name+0x1da>
 800d22e:	69ba      	ldr	r2, [r7, #24]
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	429a      	cmp	r2, r3
 800d234:	d123      	bne.n	800d27e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800d236:	69fb      	ldr	r3, [r7, #28]
 800d238:	2b0b      	cmp	r3, #11
 800d23a:	d106      	bne.n	800d24a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800d23c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d240:	f043 0303 	orr.w	r3, r3, #3
 800d244:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d248:	e075      	b.n	800d336 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d24a:	69ba      	ldr	r2, [r7, #24]
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	429a      	cmp	r2, r3
 800d250:	d005      	beq.n	800d25e <create_name+0x202>
 800d252:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d256:	f043 0303 	orr.w	r3, r3, #3
 800d25a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800d25e:	69ba      	ldr	r2, [r7, #24]
 800d260:	697b      	ldr	r3, [r7, #20]
 800d262:	429a      	cmp	r2, r3
 800d264:	d866      	bhi.n	800d334 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	61bb      	str	r3, [r7, #24]
 800d26a:	2308      	movs	r3, #8
 800d26c:	623b      	str	r3, [r7, #32]
 800d26e:	230b      	movs	r3, #11
 800d270:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d272:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d276:	009b      	lsls	r3, r3, #2
 800d278:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d27c:	e051      	b.n	800d322 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d27e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d280:	2b7f      	cmp	r3, #127	@ 0x7f
 800d282:	d914      	bls.n	800d2ae <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d284:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d286:	2100      	movs	r1, #0
 800d288:	4618      	mov	r0, r3
 800d28a:	f001 fd55 	bl	800ed38 <ff_convert>
 800d28e:	4603      	mov	r3, r0
 800d290:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d292:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d294:	2b00      	cmp	r3, #0
 800d296:	d004      	beq.n	800d2a2 <create_name+0x246>
 800d298:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d29a:	3b80      	subs	r3, #128	@ 0x80
 800d29c:	4a23      	ldr	r2, [pc, #140]	@ (800d32c <create_name+0x2d0>)
 800d29e:	5cd3      	ldrb	r3, [r2, r3]
 800d2a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d2a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d2a6:	f043 0302 	orr.w	r3, r3, #2
 800d2aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d2ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d007      	beq.n	800d2c4 <create_name+0x268>
 800d2b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d2b6:	4619      	mov	r1, r3
 800d2b8:	481d      	ldr	r0, [pc, #116]	@ (800d330 <create_name+0x2d4>)
 800d2ba:	f7fd fd75 	bl	800ada8 <chk_chr>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d008      	beq.n	800d2d6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d2c4:	235f      	movs	r3, #95	@ 0x5f
 800d2c6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800d2c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d2cc:	f043 0303 	orr.w	r3, r3, #3
 800d2d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d2d4:	e01b      	b.n	800d30e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d2d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d2d8:	2b40      	cmp	r3, #64	@ 0x40
 800d2da:	d909      	bls.n	800d2f0 <create_name+0x294>
 800d2dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d2de:	2b5a      	cmp	r3, #90	@ 0x5a
 800d2e0:	d806      	bhi.n	800d2f0 <create_name+0x294>
					b |= 2;
 800d2e2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d2e6:	f043 0302 	orr.w	r3, r3, #2
 800d2ea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d2ee:	e00e      	b.n	800d30e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d2f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d2f2:	2b60      	cmp	r3, #96	@ 0x60
 800d2f4:	d90b      	bls.n	800d30e <create_name+0x2b2>
 800d2f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d2f8:	2b7a      	cmp	r3, #122	@ 0x7a
 800d2fa:	d808      	bhi.n	800d30e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800d2fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d300:	f043 0301 	orr.w	r3, r3, #1
 800d304:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d308:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d30a:	3b20      	subs	r3, #32
 800d30c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d30e:	6a3b      	ldr	r3, [r7, #32]
 800d310:	1c5a      	adds	r2, r3, #1
 800d312:	623a      	str	r2, [r7, #32]
 800d314:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d316:	b2d1      	uxtb	r1, r2
 800d318:	687a      	ldr	r2, [r7, #4]
 800d31a:	4413      	add	r3, r2
 800d31c:	460a      	mov	r2, r1
 800d31e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		w = lfn[si++];					/* Get an LFN character */
 800d322:	e763      	b.n	800d1ec <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800d324:	bf00      	nop
 800d326:	e006      	b.n	800d336 <create_name+0x2da>
 800d328:	08014668 	.word	0x08014668
 800d32c:	080146cc 	.word	0x080146cc
 800d330:	08014674 	.word	0x08014674
			if (si > di) break;			/* No extension */
 800d334:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d33c:	2be5      	cmp	r3, #229	@ 0xe5
 800d33e:	d103      	bne.n	800d348 <create_name+0x2ec>
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2205      	movs	r2, #5
 800d344:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;
 800d348:	69fb      	ldr	r3, [r7, #28]
 800d34a:	2b08      	cmp	r3, #8
 800d34c:	d104      	bne.n	800d358 <create_name+0x2fc>
 800d34e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d352:	009b      	lsls	r3, r3, #2
 800d354:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d358:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d35c:	f003 030c 	and.w	r3, r3, #12
 800d360:	2b0c      	cmp	r3, #12
 800d362:	d005      	beq.n	800d370 <create_name+0x314>
 800d364:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d368:	f003 0303 	and.w	r3, r3, #3
 800d36c:	2b03      	cmp	r3, #3
 800d36e:	d105      	bne.n	800d37c <create_name+0x320>
 800d370:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d374:	f043 0302 	orr.w	r3, r3, #2
 800d378:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d37c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d380:	f003 0302 	and.w	r3, r3, #2
 800d384:	2b00      	cmp	r3, #0
 800d386:	d117      	bne.n	800d3b8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d388:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d38c:	f003 0303 	and.w	r3, r3, #3
 800d390:	2b01      	cmp	r3, #1
 800d392:	d105      	bne.n	800d3a0 <create_name+0x344>
 800d394:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d398:	f043 0310 	orr.w	r3, r3, #16
 800d39c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d3a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d3a4:	f003 030c 	and.w	r3, r3, #12
 800d3a8:	2b04      	cmp	r3, #4
 800d3aa:	d105      	bne.n	800d3b8 <create_name+0x35c>
 800d3ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d3b0:	f043 0308 	orr.w	r3, r3, #8
 800d3b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d3be:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 800d3c2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	3728      	adds	r7, #40	@ 0x28
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}

0800d3cc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b086      	sub	sp, #24
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
 800d3d4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d3da:	693b      	ldr	r3, [r7, #16]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d3e0:	e002      	b.n	800d3e8 <follow_path+0x1c>
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	3301      	adds	r3, #1
 800d3e6:	603b      	str	r3, [r7, #0]
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	781b      	ldrb	r3, [r3, #0]
 800d3ec:	2b2f      	cmp	r3, #47	@ 0x2f
 800d3ee:	d0f8      	beq.n	800d3e2 <follow_path+0x16>
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	781b      	ldrb	r3, [r3, #0]
 800d3f4:	2b5c      	cmp	r3, #92	@ 0x5c
 800d3f6:	d0f4      	beq.n	800d3e2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800d3fe:	693b      	ldr	r3, [r7, #16]
 800d400:	2200      	movs	r2, #0
 800d402:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	2b1f      	cmp	r3, #31
 800d40a:	d80a      	bhi.n	800d422 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2280      	movs	r2, #128	@ 0x80
 800d410:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 800d414:	2100      	movs	r1, #0
 800d416:	6878      	ldr	r0, [r7, #4]
 800d418:	f7fe fc8b 	bl	800bd32 <dir_sdi>
 800d41c:	4603      	mov	r3, r0
 800d41e:	75fb      	strb	r3, [r7, #23]
 800d420:	e078      	b.n	800d514 <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d422:	463b      	mov	r3, r7
 800d424:	4619      	mov	r1, r3
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f7ff fe18 	bl	800d05c <create_name>
 800d42c:	4603      	mov	r3, r0
 800d42e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d430:	7dfb      	ldrb	r3, [r7, #23]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d169      	bne.n	800d50a <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	f7ff fb3f 	bl	800caba <dir_find>
 800d43c:	4603      	mov	r3, r0
 800d43e:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800d446:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d448:	7dfb      	ldrb	r3, [r7, #23]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d00a      	beq.n	800d464 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d44e:	7dfb      	ldrb	r3, [r7, #23]
 800d450:	2b04      	cmp	r3, #4
 800d452:	d15c      	bne.n	800d50e <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d454:	7afb      	ldrb	r3, [r7, #11]
 800d456:	f003 0304 	and.w	r3, r3, #4
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d157      	bne.n	800d50e <follow_path+0x142>
 800d45e:	2305      	movs	r3, #5
 800d460:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d462:	e054      	b.n	800d50e <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d464:	7afb      	ldrb	r3, [r7, #11]
 800d466:	f003 0304 	and.w	r3, r3, #4
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d151      	bne.n	800d512 <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d46e:	693b      	ldr	r3, [r7, #16]
 800d470:	799b      	ldrb	r3, [r3, #6]
 800d472:	f003 0310 	and.w	r3, r3, #16
 800d476:	2b00      	cmp	r3, #0
 800d478:	d102      	bne.n	800d480 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800d47a:	2305      	movs	r3, #5
 800d47c:	75fb      	strb	r3, [r7, #23]
 800d47e:	e049      	b.n	800d514 <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	781b      	ldrb	r3, [r3, #0]
 800d484:	2b04      	cmp	r3, #4
 800d486:	d130      	bne.n	800d4ea <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	689a      	ldr	r2, [r3, #8]
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d496:	4613      	mov	r3, r2
 800d498:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d49c:	693a      	ldr	r2, [r7, #16]
 800d49e:	79d2      	ldrb	r2, [r2, #7]
 800d4a0:	431a      	orrs	r2, r3
 800d4a2:	693b      	ldr	r3, [r7, #16]
 800d4a4:	625a      	str	r2, [r3, #36]	@ 0x24
				obj->c_ofs = dp->blk_ofs;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	629a      	str	r2, [r3, #40]	@ 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	691b      	ldr	r3, [r3, #16]
 800d4b2:	3334      	adds	r3, #52	@ 0x34
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f7fd fa50 	bl	800a95a <ld_dword>
 800d4ba:	4602      	mov	r2, r0
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	691b      	ldr	r3, [r3, #16]
 800d4c4:	3321      	adds	r3, #33	@ 0x21
 800d4c6:	781b      	ldrb	r3, [r3, #0]
 800d4c8:	f003 0302 	and.w	r3, r3, #2
 800d4cc:	b2da      	uxtb	r2, r3
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	691b      	ldr	r3, [r3, #16]
 800d4d6:	3338      	adds	r3, #56	@ 0x38
 800d4d8:	4618      	mov	r0, r3
 800d4da:	f7fd fa60 	bl	800a99e <ld_qword>
 800d4de:	4602      	mov	r2, r0
 800d4e0:	460b      	mov	r3, r1
 800d4e2:	6939      	ldr	r1, [r7, #16]
 800d4e4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800d4e8:	e79b      	b.n	800d422 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4f8:	4413      	add	r3, r2
 800d4fa:	4619      	mov	r1, r3
 800d4fc:	68f8      	ldr	r0, [r7, #12]
 800d4fe:	f7fe fdcf 	bl	800c0a0 <ld_clust>
 800d502:	4602      	mov	r2, r0
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d508:	e78b      	b.n	800d422 <follow_path+0x56>
			if (res != FR_OK) break;
 800d50a:	bf00      	nop
 800d50c:	e002      	b.n	800d514 <follow_path+0x148>
				break;
 800d50e:	bf00      	nop
 800d510:	e000      	b.n	800d514 <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d512:	bf00      	nop
			}
		}
	}

	return res;
 800d514:	7dfb      	ldrb	r3, [r7, #23]
}
 800d516:	4618      	mov	r0, r3
 800d518:	3718      	adds	r7, #24
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}

0800d51e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d51e:	b480      	push	{r7}
 800d520:	b087      	sub	sp, #28
 800d522:	af00      	add	r7, sp, #0
 800d524:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d526:	f04f 33ff 	mov.w	r3, #4294967295
 800d52a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d031      	beq.n	800d598 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	617b      	str	r3, [r7, #20]
 800d53a:	e002      	b.n	800d542 <get_ldnumber+0x24>
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	3301      	adds	r3, #1
 800d540:	617b      	str	r3, [r7, #20]
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	781b      	ldrb	r3, [r3, #0]
 800d546:	2b1f      	cmp	r3, #31
 800d548:	d903      	bls.n	800d552 <get_ldnumber+0x34>
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	781b      	ldrb	r3, [r3, #0]
 800d54e:	2b3a      	cmp	r3, #58	@ 0x3a
 800d550:	d1f4      	bne.n	800d53c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d552:	697b      	ldr	r3, [r7, #20]
 800d554:	781b      	ldrb	r3, [r3, #0]
 800d556:	2b3a      	cmp	r3, #58	@ 0x3a
 800d558:	d11c      	bne.n	800d594 <get_ldnumber+0x76>
			tp = *path;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	1c5a      	adds	r2, r3, #1
 800d564:	60fa      	str	r2, [r7, #12]
 800d566:	781b      	ldrb	r3, [r3, #0]
 800d568:	3b30      	subs	r3, #48	@ 0x30
 800d56a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	2b09      	cmp	r3, #9
 800d570:	d80e      	bhi.n	800d590 <get_ldnumber+0x72>
 800d572:	68fa      	ldr	r2, [r7, #12]
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	429a      	cmp	r2, r3
 800d578:	d10a      	bne.n	800d590 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d107      	bne.n	800d590 <get_ldnumber+0x72>
					vol = (int)i;
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d584:	697b      	ldr	r3, [r7, #20]
 800d586:	3301      	adds	r3, #1
 800d588:	617b      	str	r3, [r7, #20]
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	697a      	ldr	r2, [r7, #20]
 800d58e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d590:	693b      	ldr	r3, [r7, #16]
 800d592:	e002      	b.n	800d59a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d594:	2300      	movs	r3, #0
 800d596:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d598:	693b      	ldr	r3, [r7, #16]
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	371c      	adds	r7, #28
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bc80      	pop	{r7}
 800d5a2:	4770      	bx	lr

0800d5a4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b082      	sub	sp, #8
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
 800d5ac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	70da      	strb	r2, [r3, #3]
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f04f 32ff 	mov.w	r2, #4294967295
 800d5ba:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d5bc:	6839      	ldr	r1, [r7, #0]
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	f7fd fdb6 	bl	800b130 <move_window>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d001      	beq.n	800d5ce <check_fs+0x2a>
 800d5ca:	2304      	movs	r3, #4
 800d5cc:	e044      	b.n	800d658 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	3338      	adds	r3, #56	@ 0x38
 800d5d2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f7fd f9a8 	bl	800a92c <ld_word>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	461a      	mov	r2, r3
 800d5e0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	d001      	beq.n	800d5ec <check_fs+0x48>
 800d5e8:	2303      	movs	r3, #3
 800d5ea:	e035      	b.n	800d658 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d5f2:	2be9      	cmp	r3, #233	@ 0xe9
 800d5f4:	d009      	beq.n	800d60a <check_fs+0x66>
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d5fc:	2beb      	cmp	r3, #235	@ 0xeb
 800d5fe:	d11e      	bne.n	800d63e <check_fs+0x9a>
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800d606:	2b90      	cmp	r3, #144	@ 0x90
 800d608:	d119      	bne.n	800d63e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	3338      	adds	r3, #56	@ 0x38
 800d60e:	3336      	adds	r3, #54	@ 0x36
 800d610:	4618      	mov	r0, r3
 800d612:	f7fd f9a2 	bl	800a95a <ld_dword>
 800d616:	4603      	mov	r3, r0
 800d618:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d61c:	4a10      	ldr	r2, [pc, #64]	@ (800d660 <check_fs+0xbc>)
 800d61e:	4293      	cmp	r3, r2
 800d620:	d101      	bne.n	800d626 <check_fs+0x82>
 800d622:	2300      	movs	r3, #0
 800d624:	e018      	b.n	800d658 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	3338      	adds	r3, #56	@ 0x38
 800d62a:	3352      	adds	r3, #82	@ 0x52
 800d62c:	4618      	mov	r0, r3
 800d62e:	f7fd f994 	bl	800a95a <ld_dword>
 800d632:	4603      	mov	r3, r0
 800d634:	4a0b      	ldr	r2, [pc, #44]	@ (800d664 <check_fs+0xc0>)
 800d636:	4293      	cmp	r3, r2
 800d638:	d101      	bne.n	800d63e <check_fs+0x9a>
 800d63a:	2300      	movs	r3, #0
 800d63c:	e00c      	b.n	800d658 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	3338      	adds	r3, #56	@ 0x38
 800d642:	220b      	movs	r2, #11
 800d644:	4908      	ldr	r1, [pc, #32]	@ (800d668 <check_fs+0xc4>)
 800d646:	4618      	mov	r0, r3
 800d648:	f7fd fb88 	bl	800ad5c <mem_cmp>
 800d64c:	4603      	mov	r3, r0
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d101      	bne.n	800d656 <check_fs+0xb2>
 800d652:	2301      	movs	r3, #1
 800d654:	e000      	b.n	800d658 <check_fs+0xb4>
#endif
	return 2;
 800d656:	2302      	movs	r3, #2
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3708      	adds	r7, #8
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}
 800d660:	00544146 	.word	0x00544146
 800d664:	33544146 	.word	0x33544146
 800d668:	0801467c 	.word	0x0801467c

0800d66c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d66c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d670:	b09c      	sub	sp, #112	@ 0x70
 800d672:	af00      	add	r7, sp, #0
 800d674:	61f8      	str	r0, [r7, #28]
 800d676:	61b9      	str	r1, [r7, #24]
 800d678:	4613      	mov	r3, r2
 800d67a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d67c:	69bb      	ldr	r3, [r7, #24]
 800d67e:	2200      	movs	r2, #0
 800d680:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d682:	69f8      	ldr	r0, [r7, #28]
 800d684:	f7ff ff4b 	bl	800d51e <get_ldnumber>
 800d688:	6578      	str	r0, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800d68a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	da01      	bge.n	800d694 <find_volume+0x28>
 800d690:	230b      	movs	r3, #11
 800d692:	e337      	b.n	800dd04 <find_volume+0x698>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d694:	4a99      	ldr	r2, [pc, #612]	@ (800d8fc <find_volume+0x290>)
 800d696:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d69c:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d69e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d101      	bne.n	800d6a8 <find_volume+0x3c>
 800d6a4:	230c      	movs	r3, #12
 800d6a6:	e32d      	b.n	800dd04 <find_volume+0x698>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d6a8:	69bb      	ldr	r3, [r7, #24]
 800d6aa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d6ac:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d6ae:	7dfb      	ldrb	r3, [r7, #23]
 800d6b0:	f023 0301 	bic.w	r3, r3, #1
 800d6b4:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d6b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6b8:	781b      	ldrb	r3, [r3, #0]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d01a      	beq.n	800d6f4 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800d6be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6c0:	785b      	ldrb	r3, [r3, #1]
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f7fd f877 	bl	800a7b6 <disk_status>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d6ce:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800d6d2:	f003 0301 	and.w	r3, r3, #1
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d10c      	bne.n	800d6f4 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d6da:	7dfb      	ldrb	r3, [r7, #23]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d007      	beq.n	800d6f0 <find_volume+0x84>
 800d6e0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800d6e4:	f003 0304 	and.w	r3, r3, #4
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d001      	beq.n	800d6f0 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800d6ec:	230a      	movs	r3, #10
 800d6ee:	e309      	b.n	800dd04 <find_volume+0x698>
			}
			return FR_OK;				/* The file system object is valid */
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	e307      	b.n	800dd04 <find_volume+0x698>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d6f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d6fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6fc:	b2da      	uxtb	r2, r3
 800d6fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d700:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d702:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d704:	785b      	ldrb	r3, [r3, #1]
 800d706:	4618      	mov	r0, r3
 800d708:	f7fd f865 	bl	800a7d6 <disk_initialize>
 800d70c:	4603      	mov	r3, r0
 800d70e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d712:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800d716:	f003 0301 	and.w	r3, r3, #1
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d001      	beq.n	800d722 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d71e:	2303      	movs	r3, #3
 800d720:	e2f0      	b.n	800dd04 <find_volume+0x698>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d722:	7dfb      	ldrb	r3, [r7, #23]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d007      	beq.n	800d738 <find_volume+0xcc>
 800d728:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800d72c:	f003 0304 	and.w	r3, r3, #4
 800d730:	2b00      	cmp	r3, #0
 800d732:	d001      	beq.n	800d738 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800d734:	230a      	movs	r3, #10
 800d736:	e2e5      	b.n	800dd04 <find_volume+0x698>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d738:	2300      	movs	r3, #0
 800d73a:	66bb      	str	r3, [r7, #104]	@ 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d73c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d73e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d740:	f7ff ff30 	bl	800d5a4 <check_fs>
 800d744:	4603      	mov	r3, r0
 800d746:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d74a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d74e:	2b02      	cmp	r3, #2
 800d750:	d14d      	bne.n	800d7ee <find_volume+0x182>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d752:	2300      	movs	r3, #0
 800d754:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d756:	e020      	b.n	800d79a <find_volume+0x12e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d758:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d75a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800d75e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d760:	011b      	lsls	r3, r3, #4
 800d762:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800d766:	4413      	add	r3, r2
 800d768:	64bb      	str	r3, [r7, #72]	@ 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d76a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d76c:	3304      	adds	r3, #4
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d006      	beq.n	800d782 <find_volume+0x116>
 800d774:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d776:	3308      	adds	r3, #8
 800d778:	4618      	mov	r0, r3
 800d77a:	f7fd f8ee 	bl	800a95a <ld_dword>
 800d77e:	4602      	mov	r2, r0
 800d780:	e000      	b.n	800d784 <find_volume+0x118>
 800d782:	2200      	movs	r2, #0
 800d784:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d786:	009b      	lsls	r3, r3, #2
 800d788:	3360      	adds	r3, #96	@ 0x60
 800d78a:	f107 0110 	add.w	r1, r7, #16
 800d78e:	440b      	add	r3, r1
 800d790:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d794:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d796:	3301      	adds	r3, #1
 800d798:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d79a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d79c:	2b03      	cmp	r3, #3
 800d79e:	d9db      	bls.n	800d758 <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (i) i--;
 800d7a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d002      	beq.n	800d7b0 <find_volume+0x144>
 800d7aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d7ac:	3b01      	subs	r3, #1
 800d7ae:	65bb      	str	r3, [r7, #88]	@ 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d7b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d7b2:	009b      	lsls	r3, r3, #2
 800d7b4:	3360      	adds	r3, #96	@ 0x60
 800d7b6:	f107 0210 	add.w	r2, r7, #16
 800d7ba:	4413      	add	r3, r2
 800d7bc:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800d7c0:	66bb      	str	r3, [r7, #104]	@ 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d7c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d005      	beq.n	800d7d4 <find_volume+0x168>
 800d7c8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d7ca:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d7cc:	f7ff feea 	bl	800d5a4 <check_fs>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	e000      	b.n	800d7d6 <find_volume+0x16a>
 800d7d4:	2303      	movs	r3, #3
 800d7d6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d7da:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d7de:	2b01      	cmp	r3, #1
 800d7e0:	d905      	bls.n	800d7ee <find_volume+0x182>
 800d7e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d7e4:	3301      	adds	r3, #1
 800d7e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d7e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d7ea:	2b03      	cmp	r3, #3
 800d7ec:	d9e0      	bls.n	800d7b0 <find_volume+0x144>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d7ee:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d7f2:	2b04      	cmp	r3, #4
 800d7f4:	d101      	bne.n	800d7fa <find_volume+0x18e>
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	e284      	b.n	800dd04 <find_volume+0x698>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d7fa:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d7fe:	2b01      	cmp	r3, #1
 800d800:	d901      	bls.n	800d806 <find_volume+0x19a>
 800d802:	230d      	movs	r3, #13
 800d804:	e27e      	b.n	800dd04 <find_volume+0x698>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800d806:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d80a:	2b01      	cmp	r3, #1
 800d80c:	f040 80fa 	bne.w	800da04 <find_volume+0x398>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800d810:	230b      	movs	r3, #11
 800d812:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d814:	e002      	b.n	800d81c <find_volume+0x1b0>
 800d816:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d818:	3301      	adds	r3, #1
 800d81a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d81c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d81e:	2b3f      	cmp	r3, #63	@ 0x3f
 800d820:	d806      	bhi.n	800d830 <find_volume+0x1c4>
 800d822:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d824:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d826:	4413      	add	r3, r2
 800d828:	3338      	adds	r3, #56	@ 0x38
 800d82a:	781b      	ldrb	r3, [r3, #0]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d0f2      	beq.n	800d816 <find_volume+0x1aa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800d830:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d832:	2b3f      	cmp	r3, #63	@ 0x3f
 800d834:	d801      	bhi.n	800d83a <find_volume+0x1ce>
 800d836:	230d      	movs	r3, #13
 800d838:	e264      	b.n	800dd04 <find_volume+0x698>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800d83a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d83c:	3338      	adds	r3, #56	@ 0x38
 800d83e:	3368      	adds	r3, #104	@ 0x68
 800d840:	4618      	mov	r0, r3
 800d842:	f7fd f873 	bl	800a92c <ld_word>
 800d846:	4603      	mov	r3, r0
 800d848:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d84c:	d001      	beq.n	800d852 <find_volume+0x1e6>
 800d84e:	230d      	movs	r3, #13
 800d850:	e258      	b.n	800dd04 <find_volume+0x698>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800d852:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d854:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800d858:	2b09      	cmp	r3, #9
 800d85a:	d001      	beq.n	800d860 <find_volume+0x1f4>
			return FR_NO_FILESYSTEM;
 800d85c:	230d      	movs	r3, #13
 800d85e:	e251      	b.n	800dd04 <find_volume+0x698>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800d860:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d862:	3338      	adds	r3, #56	@ 0x38
 800d864:	3348      	adds	r3, #72	@ 0x48
 800d866:	4618      	mov	r0, r3
 800d868:	f7fd f899 	bl	800a99e <ld_qword>
 800d86c:	4602      	mov	r2, r0
 800d86e:	460b      	mov	r3, r1
 800d870:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d872:	2000      	movs	r0, #0
 800d874:	60b9      	str	r1, [r7, #8]
 800d876:	60f8      	str	r0, [r7, #12]
 800d878:	68b9      	ldr	r1, [r7, #8]
 800d87a:	1851      	adds	r1, r2, r1
 800d87c:	6039      	str	r1, [r7, #0]
 800d87e:	68f9      	ldr	r1, [r7, #12]
 800d880:	eb43 0101 	adc.w	r1, r3, r1
 800d884:	6079      	str	r1, [r7, #4]
 800d886:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d88a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800d88e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800d892:	2b01      	cmp	r3, #1
 800d894:	d301      	bcc.n	800d89a <find_volume+0x22e>
 800d896:	230d      	movs	r3, #13
 800d898:	e234      	b.n	800dd04 <find_volume+0x698>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800d89a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d89c:	3338      	adds	r3, #56	@ 0x38
 800d89e:	3354      	adds	r3, #84	@ 0x54
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f7fd f85a 	bl	800a95a <ld_dword>
 800d8a6:	4602      	mov	r2, r0
 800d8a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8aa:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800d8ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8ae:	f893 20a6 	ldrb.w	r2, [r3, #166]	@ 0xa6
 800d8b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8b4:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800d8b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8b8:	789b      	ldrb	r3, [r3, #2]
 800d8ba:	2b01      	cmp	r3, #1
 800d8bc:	d001      	beq.n	800d8c2 <find_volume+0x256>
 800d8be:	230d      	movs	r3, #13
 800d8c0:	e220      	b.n	800dd04 <find_volume+0x698>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800d8c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8c4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d8c8:	461a      	mov	r2, r3
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	4093      	lsls	r3, r2
 800d8ce:	b29a      	uxth	r2, r3
 800d8d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8d2:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800d8d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8d6:	895b      	ldrh	r3, [r3, #10]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d101      	bne.n	800d8e0 <find_volume+0x274>
 800d8dc:	230d      	movs	r3, #13
 800d8de:	e211      	b.n	800dd04 <find_volume+0x698>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800d8e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8e2:	3338      	adds	r3, #56	@ 0x38
 800d8e4:	335c      	adds	r3, #92	@ 0x5c
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f7fd f837 	bl	800a95a <ld_dword>
 800d8ec:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800d8ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8f0:	4a03      	ldr	r2, [pc, #12]	@ (800d900 <find_volume+0x294>)
 800d8f2:	4293      	cmp	r3, r2
 800d8f4:	d906      	bls.n	800d904 <find_volume+0x298>
 800d8f6:	230d      	movs	r3, #13
 800d8f8:	e204      	b.n	800dd04 <find_volume+0x698>
 800d8fa:	bf00      	nop
 800d8fc:	2000372c 	.word	0x2000372c
 800d900:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800d904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d906:	1c9a      	adds	r2, r3, #2
 800d908:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d90a:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800d90c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d90e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d910:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800d912:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d914:	3338      	adds	r3, #56	@ 0x38
 800d916:	3358      	adds	r3, #88	@ 0x58
 800d918:	4618      	mov	r0, r3
 800d91a:	f7fd f81e 	bl	800a95a <ld_dword>
 800d91e:	4602      	mov	r2, r0
 800d920:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d922:	441a      	add	r2, r3
 800d924:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d926:	631a      	str	r2, [r3, #48]	@ 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800d928:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d92a:	3338      	adds	r3, #56	@ 0x38
 800d92c:	3350      	adds	r3, #80	@ 0x50
 800d92e:	4618      	mov	r0, r3
 800d930:	f7fd f813 	bl	800a95a <ld_dword>
 800d934:	4602      	mov	r2, r0
 800d936:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d938:	441a      	add	r2, r3
 800d93a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d93c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800d93e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d942:	2200      	movs	r2, #0
 800d944:	469a      	mov	sl, r3
 800d946:	4693      	mov	fp, r2
 800d948:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d94a:	895b      	ldrh	r3, [r3, #10]
 800d94c:	461a      	mov	r2, r3
 800d94e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d950:	fb02 f303 	mul.w	r3, r2, r3
 800d954:	2200      	movs	r2, #0
 800d956:	4698      	mov	r8, r3
 800d958:	4691      	mov	r9, r2
 800d95a:	eb1a 0408 	adds.w	r4, sl, r8
 800d95e:	eb4b 0509 	adc.w	r5, fp, r9
 800d962:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800d966:	42a2      	cmp	r2, r4
 800d968:	41ab      	sbcs	r3, r5
 800d96a:	d201      	bcs.n	800d970 <find_volume+0x304>
 800d96c:	230d      	movs	r3, #13
 800d96e:	e1c9      	b.n	800dd04 <find_volume+0x698>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800d970:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d972:	3338      	adds	r3, #56	@ 0x38
 800d974:	3360      	adds	r3, #96	@ 0x60
 800d976:	4618      	mov	r0, r3
 800d978:	f7fc ffef 	bl	800a95a <ld_dword>
 800d97c:	4602      	mov	r2, r0
 800d97e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d980:	62da      	str	r2, [r3, #44]	@ 0x2c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800d982:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d986:	4619      	mov	r1, r3
 800d988:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d98a:	f7fd fc6d 	bl	800b268 <clust2sect>
 800d98e:	4603      	mov	r3, r0
 800d990:	4619      	mov	r1, r3
 800d992:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d994:	f7fd fbcc 	bl	800b130 <move_window>
 800d998:	4603      	mov	r3, r0
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d001      	beq.n	800d9a2 <find_volume+0x336>
 800d99e:	2301      	movs	r3, #1
 800d9a0:	e1b0      	b.n	800dd04 <find_volume+0x698>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d9a6:	e015      	b.n	800d9d4 <find_volume+0x368>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800d9a8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d9aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d9ac:	4413      	add	r3, r2
 800d9ae:	3338      	adds	r3, #56	@ 0x38
 800d9b0:	781b      	ldrb	r3, [r3, #0]
 800d9b2:	2b81      	cmp	r3, #129	@ 0x81
 800d9b4:	d10b      	bne.n	800d9ce <find_volume+0x362>
 800d9b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9b8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800d9bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d9be:	3314      	adds	r3, #20
 800d9c0:	4413      	add	r3, r2
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f7fc ffc9 	bl	800a95a <ld_dword>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	2b02      	cmp	r3, #2
 800d9cc:	d007      	beq.n	800d9de <find_volume+0x372>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800d9ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d9d0:	3320      	adds	r3, #32
 800d9d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d9d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d9d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d9da:	d3e5      	bcc.n	800d9a8 <find_volume+0x33c>
 800d9dc:	e000      	b.n	800d9e0 <find_volume+0x374>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800d9de:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800d9e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d9e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d9e6:	d101      	bne.n	800d9ec <find_volume+0x380>
 800d9e8:	230d      	movs	r3, #13
 800d9ea:	e18b      	b.n	800dd04 <find_volume+0x698>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d9ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9ee:	f04f 32ff 	mov.w	r2, #4294967295
 800d9f2:	619a      	str	r2, [r3, #24]
 800d9f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9f6:	699a      	ldr	r2, [r3, #24]
 800d9f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9fa:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800d9fc:	2304      	movs	r3, #4
 800d9fe:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800da02:	e167      	b.n	800dcd4 <find_volume+0x668>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800da04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da06:	3338      	adds	r3, #56	@ 0x38
 800da08:	330b      	adds	r3, #11
 800da0a:	4618      	mov	r0, r3
 800da0c:	f7fc ff8e 	bl	800a92c <ld_word>
 800da10:	4603      	mov	r3, r0
 800da12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800da16:	d001      	beq.n	800da1c <find_volume+0x3b0>
 800da18:	230d      	movs	r3, #13
 800da1a:	e173      	b.n	800dd04 <find_volume+0x698>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800da1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da1e:	3338      	adds	r3, #56	@ 0x38
 800da20:	3316      	adds	r3, #22
 800da22:	4618      	mov	r0, r3
 800da24:	f7fc ff82 	bl	800a92c <ld_word>
 800da28:	4603      	mov	r3, r0
 800da2a:	667b      	str	r3, [r7, #100]	@ 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800da2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d106      	bne.n	800da40 <find_volume+0x3d4>
 800da32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da34:	3338      	adds	r3, #56	@ 0x38
 800da36:	3324      	adds	r3, #36	@ 0x24
 800da38:	4618      	mov	r0, r3
 800da3a:	f7fc ff8e 	bl	800a95a <ld_dword>
 800da3e:	6678      	str	r0, [r7, #100]	@ 0x64
		fs->fsize = fasize;
 800da40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da42:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800da44:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800da46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da48:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800da4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da4e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800da50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da52:	789b      	ldrb	r3, [r3, #2]
 800da54:	2b01      	cmp	r3, #1
 800da56:	d005      	beq.n	800da64 <find_volume+0x3f8>
 800da58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da5a:	789b      	ldrb	r3, [r3, #2]
 800da5c:	2b02      	cmp	r3, #2
 800da5e:	d001      	beq.n	800da64 <find_volume+0x3f8>
 800da60:	230d      	movs	r3, #13
 800da62:	e14f      	b.n	800dd04 <find_volume+0x698>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800da64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da66:	789b      	ldrb	r3, [r3, #2]
 800da68:	461a      	mov	r2, r3
 800da6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800da6c:	fb02 f303 	mul.w	r3, r2, r3
 800da70:	667b      	str	r3, [r7, #100]	@ 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800da72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da74:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800da78:	461a      	mov	r2, r3
 800da7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da7c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800da7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da80:	895b      	ldrh	r3, [r3, #10]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d008      	beq.n	800da98 <find_volume+0x42c>
 800da86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da88:	895b      	ldrh	r3, [r3, #10]
 800da8a:	461a      	mov	r2, r3
 800da8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da8e:	895b      	ldrh	r3, [r3, #10]
 800da90:	3b01      	subs	r3, #1
 800da92:	4013      	ands	r3, r2
 800da94:	2b00      	cmp	r3, #0
 800da96:	d001      	beq.n	800da9c <find_volume+0x430>
 800da98:	230d      	movs	r3, #13
 800da9a:	e133      	b.n	800dd04 <find_volume+0x698>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800da9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da9e:	3338      	adds	r3, #56	@ 0x38
 800daa0:	3311      	adds	r3, #17
 800daa2:	4618      	mov	r0, r3
 800daa4:	f7fc ff42 	bl	800a92c <ld_word>
 800daa8:	4603      	mov	r3, r0
 800daaa:	461a      	mov	r2, r3
 800daac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800daae:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800dab0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dab2:	891b      	ldrh	r3, [r3, #8]
 800dab4:	f003 030f 	and.w	r3, r3, #15
 800dab8:	b29b      	uxth	r3, r3
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d001      	beq.n	800dac2 <find_volume+0x456>
 800dabe:	230d      	movs	r3, #13
 800dac0:	e120      	b.n	800dd04 <find_volume+0x698>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800dac2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dac4:	3338      	adds	r3, #56	@ 0x38
 800dac6:	3313      	adds	r3, #19
 800dac8:	4618      	mov	r0, r3
 800daca:	f7fc ff2f 	bl	800a92c <ld_word>
 800dace:	4603      	mov	r3, r0
 800dad0:	663b      	str	r3, [r7, #96]	@ 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800dad2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d106      	bne.n	800dae6 <find_volume+0x47a>
 800dad8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dada:	3338      	adds	r3, #56	@ 0x38
 800dadc:	3320      	adds	r3, #32
 800dade:	4618      	mov	r0, r3
 800dae0:	f7fc ff3b 	bl	800a95a <ld_dword>
 800dae4:	6638      	str	r0, [r7, #96]	@ 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800dae6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dae8:	3338      	adds	r3, #56	@ 0x38
 800daea:	330e      	adds	r3, #14
 800daec:	4618      	mov	r0, r3
 800daee:	f7fc ff1d 	bl	800a92c <ld_word>
 800daf2:	4603      	mov	r3, r0
 800daf4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800daf8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d101      	bne.n	800db04 <find_volume+0x498>
 800db00:	230d      	movs	r3, #13
 800db02:	e0ff      	b.n	800dd04 <find_volume+0x698>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800db04:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800db08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800db0a:	4413      	add	r3, r2
 800db0c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800db0e:	8912      	ldrh	r2, [r2, #8]
 800db10:	0912      	lsrs	r2, r2, #4
 800db12:	b292      	uxth	r2, r2
 800db14:	4413      	add	r3, r2
 800db16:	643b      	str	r3, [r7, #64]	@ 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800db18:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800db1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800db1c:	429a      	cmp	r2, r3
 800db1e:	d201      	bcs.n	800db24 <find_volume+0x4b8>
 800db20:	230d      	movs	r3, #13
 800db22:	e0ef      	b.n	800dd04 <find_volume+0x698>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800db24:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800db26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800db28:	1ad3      	subs	r3, r2, r3
 800db2a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800db2c:	8952      	ldrh	r2, [r2, #10]
 800db2e:	fbb3 f3f2 	udiv	r3, r3, r2
 800db32:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800db34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db36:	2b00      	cmp	r3, #0
 800db38:	d101      	bne.n	800db3e <find_volume+0x4d2>
 800db3a:	230d      	movs	r3, #13
 800db3c:	e0e2      	b.n	800dd04 <find_volume+0x698>
		fmt = FS_FAT32;
 800db3e:	2303      	movs	r3, #3
 800db40:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800db44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db46:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800db4a:	4293      	cmp	r3, r2
 800db4c:	d802      	bhi.n	800db54 <find_volume+0x4e8>
 800db4e:	2302      	movs	r3, #2
 800db50:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800db54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db56:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800db5a:	4293      	cmp	r3, r2
 800db5c:	d802      	bhi.n	800db64 <find_volume+0x4f8>
 800db5e:	2301      	movs	r3, #1
 800db60:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800db64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db66:	1c9a      	adds	r2, r3, #2
 800db68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db6a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800db6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db6e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800db70:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800db72:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800db76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800db78:	441a      	add	r2, r3
 800db7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db7c:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800db7e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800db80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800db82:	441a      	add	r2, r3
 800db84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db86:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800db88:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800db8c:	2b03      	cmp	r3, #3
 800db8e:	d11e      	bne.n	800dbce <find_volume+0x562>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800db90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db92:	3338      	adds	r3, #56	@ 0x38
 800db94:	332a      	adds	r3, #42	@ 0x2a
 800db96:	4618      	mov	r0, r3
 800db98:	f7fc fec8 	bl	800a92c <ld_word>
 800db9c:	4603      	mov	r3, r0
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d001      	beq.n	800dba6 <find_volume+0x53a>
 800dba2:	230d      	movs	r3, #13
 800dba4:	e0ae      	b.n	800dd04 <find_volume+0x698>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800dba6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dba8:	891b      	ldrh	r3, [r3, #8]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d001      	beq.n	800dbb2 <find_volume+0x546>
 800dbae:	230d      	movs	r3, #13
 800dbb0:	e0a8      	b.n	800dd04 <find_volume+0x698>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800dbb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dbb4:	3338      	adds	r3, #56	@ 0x38
 800dbb6:	332c      	adds	r3, #44	@ 0x2c
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f7fc fece 	bl	800a95a <ld_dword>
 800dbbe:	4602      	mov	r2, r0
 800dbc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dbc2:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800dbc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dbc6:	69db      	ldr	r3, [r3, #28]
 800dbc8:	009b      	lsls	r3, r3, #2
 800dbca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dbcc:	e01f      	b.n	800dc0e <find_volume+0x5a2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800dbce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dbd0:	891b      	ldrh	r3, [r3, #8]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d101      	bne.n	800dbda <find_volume+0x56e>
 800dbd6:	230d      	movs	r3, #13
 800dbd8:	e094      	b.n	800dd04 <find_volume+0x698>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800dbda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dbdc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800dbde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dbe0:	441a      	add	r2, r3
 800dbe2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dbe4:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800dbe6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800dbea:	2b02      	cmp	r3, #2
 800dbec:	d103      	bne.n	800dbf6 <find_volume+0x58a>
 800dbee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dbf0:	69db      	ldr	r3, [r3, #28]
 800dbf2:	005b      	lsls	r3, r3, #1
 800dbf4:	e00a      	b.n	800dc0c <find_volume+0x5a0>
 800dbf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dbf8:	69da      	ldr	r2, [r3, #28]
 800dbfa:	4613      	mov	r3, r2
 800dbfc:	005b      	lsls	r3, r3, #1
 800dbfe:	4413      	add	r3, r2
 800dc00:	085a      	lsrs	r2, r3, #1
 800dc02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc04:	69db      	ldr	r3, [r3, #28]
 800dc06:	f003 0301 	and.w	r3, r3, #1
 800dc0a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800dc0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800dc0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc10:	6a1a      	ldr	r2, [r3, #32]
 800dc12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dc14:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800dc18:	0a5b      	lsrs	r3, r3, #9
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d201      	bcs.n	800dc22 <find_volume+0x5b6>
 800dc1e:	230d      	movs	r3, #13
 800dc20:	e070      	b.n	800dd04 <find_volume+0x698>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800dc22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc24:	f04f 32ff 	mov.w	r2, #4294967295
 800dc28:	619a      	str	r2, [r3, #24]
 800dc2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc2c:	699a      	ldr	r2, [r3, #24]
 800dc2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc30:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800dc32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc34:	2280      	movs	r2, #128	@ 0x80
 800dc36:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800dc38:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800dc3c:	2b03      	cmp	r3, #3
 800dc3e:	d149      	bne.n	800dcd4 <find_volume+0x668>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800dc40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc42:	3338      	adds	r3, #56	@ 0x38
 800dc44:	3330      	adds	r3, #48	@ 0x30
 800dc46:	4618      	mov	r0, r3
 800dc48:	f7fc fe70 	bl	800a92c <ld_word>
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	2b01      	cmp	r3, #1
 800dc50:	d140      	bne.n	800dcd4 <find_volume+0x668>
			&& move_window(fs, bsect + 1) == FR_OK)
 800dc52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dc54:	3301      	adds	r3, #1
 800dc56:	4619      	mov	r1, r3
 800dc58:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800dc5a:	f7fd fa69 	bl	800b130 <move_window>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d137      	bne.n	800dcd4 <find_volume+0x668>
		{
			fs->fsi_flag = 0;
 800dc64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc66:	2200      	movs	r2, #0
 800dc68:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800dc6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc6c:	3338      	adds	r3, #56	@ 0x38
 800dc6e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800dc72:	4618      	mov	r0, r3
 800dc74:	f7fc fe5a 	bl	800a92c <ld_word>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	461a      	mov	r2, r3
 800dc7c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d127      	bne.n	800dcd4 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800dc84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc86:	3338      	adds	r3, #56	@ 0x38
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f7fc fe66 	bl	800a95a <ld_dword>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	4a1f      	ldr	r2, [pc, #124]	@ (800dd10 <find_volume+0x6a4>)
 800dc92:	4293      	cmp	r3, r2
 800dc94:	d11e      	bne.n	800dcd4 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800dc96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc98:	3338      	adds	r3, #56	@ 0x38
 800dc9a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f7fc fe5b 	bl	800a95a <ld_dword>
 800dca4:	4603      	mov	r3, r0
 800dca6:	4a1b      	ldr	r2, [pc, #108]	@ (800dd14 <find_volume+0x6a8>)
 800dca8:	4293      	cmp	r3, r2
 800dcaa:	d113      	bne.n	800dcd4 <find_volume+0x668>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800dcac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dcae:	3338      	adds	r3, #56	@ 0x38
 800dcb0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f7fc fe50 	bl	800a95a <ld_dword>
 800dcba:	4602      	mov	r2, r0
 800dcbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dcbe:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800dcc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dcc2:	3338      	adds	r3, #56	@ 0x38
 800dcc4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f7fc fe46 	bl	800a95a <ld_dword>
 800dcce:	4602      	mov	r2, r0
 800dcd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dcd2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800dcd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dcd6:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800dcda:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800dcdc:	4b0e      	ldr	r3, [pc, #56]	@ (800dd18 <find_volume+0x6ac>)
 800dcde:	881b      	ldrh	r3, [r3, #0]
 800dce0:	3301      	adds	r3, #1
 800dce2:	b29a      	uxth	r2, r3
 800dce4:	4b0c      	ldr	r3, [pc, #48]	@ (800dd18 <find_volume+0x6ac>)
 800dce6:	801a      	strh	r2, [r3, #0]
 800dce8:	4b0b      	ldr	r3, [pc, #44]	@ (800dd18 <find_volume+0x6ac>)
 800dcea:	881a      	ldrh	r2, [r3, #0]
 800dcec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dcee:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800dcf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dcf2:	4a0a      	ldr	r2, [pc, #40]	@ (800dd1c <find_volume+0x6b0>)
 800dcf4:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800dcf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dcf8:	4a09      	ldr	r2, [pc, #36]	@ (800dd20 <find_volume+0x6b4>)
 800dcfa:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800dcfc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800dcfe:	f7fd f9af 	bl	800b060 <clear_lock>
#endif
	return FR_OK;
 800dd02:	2300      	movs	r3, #0
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3770      	adds	r7, #112	@ 0x70
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dd0e:	bf00      	nop
 800dd10:	41615252 	.word	0x41615252
 800dd14:	61417272 	.word	0x61417272
 800dd18:	20003730 	.word	0x20003730
 800dd1c:	200039a4 	.word	0x200039a4
 800dd20:	20003744 	.word	0x20003744

0800dd24 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b084      	sub	sp, #16
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
 800dd2c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800dd2e:	2309      	movs	r3, #9
 800dd30:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d01c      	beq.n	800dd72 <validate+0x4e>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d018      	beq.n	800dd72 <validate+0x4e>
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	781b      	ldrb	r3, [r3, #0]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d013      	beq.n	800dd72 <validate+0x4e>
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	889a      	ldrh	r2, [r3, #4]
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	88db      	ldrh	r3, [r3, #6]
 800dd54:	429a      	cmp	r2, r3
 800dd56:	d10c      	bne.n	800dd72 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	785b      	ldrb	r3, [r3, #1]
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f7fc fd29 	bl	800a7b6 <disk_status>
 800dd64:	4603      	mov	r3, r0
 800dd66:	f003 0301 	and.w	r3, r3, #1
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d101      	bne.n	800dd72 <validate+0x4e>
			res = FR_OK;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800dd72:	7bfb      	ldrb	r3, [r7, #15]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d102      	bne.n	800dd7e <validate+0x5a>
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	e000      	b.n	800dd80 <validate+0x5c>
 800dd7e:	2300      	movs	r3, #0
 800dd80:	683a      	ldr	r2, [r7, #0]
 800dd82:	6013      	str	r3, [r2, #0]
	return res;
 800dd84:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd86:	4618      	mov	r0, r3
 800dd88:	3710      	adds	r7, #16
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}
	...

0800dd90 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b088      	sub	sp, #32
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	60f8      	str	r0, [r7, #12]
 800dd98:	60b9      	str	r1, [r7, #8]
 800dd9a:	4613      	mov	r3, r2
 800dd9c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800dda2:	f107 0310 	add.w	r3, r7, #16
 800dda6:	4618      	mov	r0, r3
 800dda8:	f7ff fbb9 	bl	800d51e <get_ldnumber>
 800ddac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ddae:	69fb      	ldr	r3, [r7, #28]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	da01      	bge.n	800ddb8 <f_mount+0x28>
 800ddb4:	230b      	movs	r3, #11
 800ddb6:	e02b      	b.n	800de10 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ddb8:	4a17      	ldr	r2, [pc, #92]	@ (800de18 <f_mount+0x88>)
 800ddba:	69fb      	ldr	r3, [r7, #28]
 800ddbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddc0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ddc2:	69bb      	ldr	r3, [r7, #24]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d005      	beq.n	800ddd4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ddc8:	69b8      	ldr	r0, [r7, #24]
 800ddca:	f7fd f949 	bl	800b060 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ddce:	69bb      	ldr	r3, [r7, #24]
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d002      	beq.n	800dde0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	2200      	movs	r2, #0
 800ddde:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800dde0:	68fa      	ldr	r2, [r7, #12]
 800dde2:	490d      	ldr	r1, [pc, #52]	@ (800de18 <f_mount+0x88>)
 800dde4:	69fb      	ldr	r3, [r7, #28]
 800dde6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d002      	beq.n	800ddf6 <f_mount+0x66>
 800ddf0:	79fb      	ldrb	r3, [r7, #7]
 800ddf2:	2b01      	cmp	r3, #1
 800ddf4:	d001      	beq.n	800ddfa <f_mount+0x6a>
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	e00a      	b.n	800de10 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ddfa:	f107 010c 	add.w	r1, r7, #12
 800ddfe:	f107 0308 	add.w	r3, r7, #8
 800de02:	2200      	movs	r2, #0
 800de04:	4618      	mov	r0, r3
 800de06:	f7ff fc31 	bl	800d66c <find_volume>
 800de0a:	4603      	mov	r3, r0
 800de0c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800de0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800de10:	4618      	mov	r0, r3
 800de12:	3720      	adds	r7, #32
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}
 800de18:	2000372c 	.word	0x2000372c

0800de1c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800de1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800de20:	b0a6      	sub	sp, #152	@ 0x98
 800de22:	af00      	add	r7, sp, #0
 800de24:	61f8      	str	r0, [r7, #28]
 800de26:	61b9      	str	r1, [r7, #24]
 800de28:	4613      	mov	r3, r2
 800de2a:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800de2c:	69fb      	ldr	r3, [r7, #28]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d101      	bne.n	800de36 <f_open+0x1a>
 800de32:	2309      	movs	r3, #9
 800de34:	e2aa      	b.n	800e38c <f_open+0x570>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800de36:	7dfb      	ldrb	r3, [r7, #23]
 800de38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800de3c:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 800de3e:	7dfa      	ldrb	r2, [r7, #23]
 800de40:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800de44:	f107 0318 	add.w	r3, r7, #24
 800de48:	4618      	mov	r0, r3
 800de4a:	f7ff fc0f 	bl	800d66c <find_volume>
 800de4e:	4603      	mov	r3, r0
 800de50:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	if (res == FR_OK) {
 800de54:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800de58:	2b00      	cmp	r3, #0
 800de5a:	f040 828e 	bne.w	800e37a <f_open+0x55e>
		dj.obj.fs = fs;
 800de5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de60:	62bb      	str	r3, [r7, #40]	@ 0x28
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800de62:	69ba      	ldr	r2, [r7, #24]
 800de64:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800de68:	4611      	mov	r1, r2
 800de6a:	4618      	mov	r0, r3
 800de6c:	f7ff faae 	bl	800d3cc <follow_path>
 800de70:	4603      	mov	r3, r0
 800de72:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800de76:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d118      	bne.n	800deb0 <f_open+0x94>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800de7e:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800de82:	b25b      	sxtb	r3, r3
 800de84:	2b00      	cmp	r3, #0
 800de86:	da03      	bge.n	800de90 <f_open+0x74>
				res = FR_INVALID_NAME;
 800de88:	2306      	movs	r3, #6
 800de8a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800de8e:	e00f      	b.n	800deb0 <f_open+0x94>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800de90:	7dfb      	ldrb	r3, [r7, #23]
 800de92:	2b01      	cmp	r3, #1
 800de94:	bf8c      	ite	hi
 800de96:	2301      	movhi	r3, #1
 800de98:	2300      	movls	r3, #0
 800de9a:	b2db      	uxtb	r3, r3
 800de9c:	461a      	mov	r2, r3
 800de9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800dea2:	4611      	mov	r1, r2
 800dea4:	4618      	mov	r0, r3
 800dea6:	f7fc ff99 	bl	800addc <chk_lock>
 800deaa:	4603      	mov	r3, r0
 800deac:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800deb0:	7dfb      	ldrb	r3, [r7, #23]
 800deb2:	f003 031c 	and.w	r3, r3, #28
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	f000 8115 	beq.w	800e0e6 <f_open+0x2ca>
			if (res != FR_OK) {					/* No file, create new */
 800debc:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d017      	beq.n	800def4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800dec4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800dec8:	2b04      	cmp	r3, #4
 800deca:	d10e      	bne.n	800deea <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800decc:	f7fc ffe0 	bl	800ae90 <enq_lock>
 800ded0:	4603      	mov	r3, r0
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d006      	beq.n	800dee4 <f_open+0xc8>
 800ded6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800deda:	4618      	mov	r0, r3
 800dedc:	f7fe ff18 	bl	800cd10 <dir_register>
 800dee0:	4603      	mov	r3, r0
 800dee2:	e000      	b.n	800dee6 <f_open+0xca>
 800dee4:	2312      	movs	r3, #18
 800dee6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800deea:	7dfb      	ldrb	r3, [r7, #23]
 800deec:	f043 0308 	orr.w	r3, r3, #8
 800def0:	75fb      	strb	r3, [r7, #23]
 800def2:	e011      	b.n	800df18 <f_open+0xfc>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800def4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800def8:	f003 0311 	and.w	r3, r3, #17
 800defc:	2b00      	cmp	r3, #0
 800defe:	d003      	beq.n	800df08 <f_open+0xec>
					res = FR_DENIED;
 800df00:	2307      	movs	r3, #7
 800df02:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800df06:	e007      	b.n	800df18 <f_open+0xfc>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800df08:	7dfb      	ldrb	r3, [r7, #23]
 800df0a:	f003 0304 	and.w	r3, r3, #4
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d002      	beq.n	800df18 <f_open+0xfc>
 800df12:	2308      	movs	r3, #8
 800df14:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800df18:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	f040 80fe 	bne.w	800e11e <f_open+0x302>
 800df22:	7dfb      	ldrb	r3, [r7, #23]
 800df24:	f003 0308 	and.w	r3, r3, #8
 800df28:	2b00      	cmp	r3, #0
 800df2a:	f000 80f8 	beq.w	800e11e <f_open+0x302>
				dw = GET_FATTIME();
 800df2e:	f7fc fc3b 	bl	800a7a8 <get_fattime>
 800df32:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800df36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df38:	781b      	ldrb	r3, [r3, #0]
 800df3a:	2b04      	cmp	r3, #4
 800df3c:	f040 8084 	bne.w	800e048 <f_open+0x22c>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800df40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800df42:	69fb      	ldr	r3, [r7, #28]
 800df44:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800df46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df48:	691b      	ldr	r3, [r3, #16]
 800df4a:	3334      	adds	r3, #52	@ 0x34
 800df4c:	4618      	mov	r0, r3
 800df4e:	f7fc fd04 	bl	800a95a <ld_dword>
 800df52:	4602      	mov	r2, r0
 800df54:	69fb      	ldr	r3, [r7, #28]
 800df56:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800df58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df5a:	691b      	ldr	r3, [r3, #16]
 800df5c:	3338      	adds	r3, #56	@ 0x38
 800df5e:	4618      	mov	r0, r3
 800df60:	f7fc fd1d 	bl	800a99e <ld_qword>
 800df64:	4602      	mov	r2, r0
 800df66:	460b      	mov	r3, r1
 800df68:	69f9      	ldr	r1, [r7, #28]
 800df6a:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800df6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df70:	691b      	ldr	r3, [r3, #16]
 800df72:	3321      	adds	r3, #33	@ 0x21
 800df74:	781b      	ldrb	r3, [r3, #0]
 800df76:	f003 0302 	and.w	r3, r3, #2
 800df7a:	b2da      	uxtb	r2, r3
 800df7c:	69fb      	ldr	r3, [r7, #28]
 800df7e:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800df80:	69fb      	ldr	r3, [r7, #28]
 800df82:	2200      	movs	r2, #0
 800df84:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800df86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df88:	691b      	ldr	r3, [r3, #16]
 800df8a:	3308      	adds	r3, #8
 800df8c:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800df90:	4618      	mov	r0, r3
 800df92:	f7fc fdf7 	bl	800ab84 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800df96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df98:	691b      	ldr	r3, [r3, #16]
 800df9a:	3314      	adds	r3, #20
 800df9c:	2200      	movs	r2, #0
 800df9e:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800dfa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfa2:	691b      	ldr	r3, [r3, #16]
 800dfa4:	330c      	adds	r3, #12
 800dfa6:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f7fc fdea 	bl	800ab84 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800dfb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfb2:	691b      	ldr	r3, [r3, #16]
 800dfb4:	3315      	adds	r3, #21
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800dfba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfbc:	691b      	ldr	r3, [r3, #16]
 800dfbe:	3304      	adds	r3, #4
 800dfc0:	2220      	movs	r2, #32
 800dfc2:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800dfc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfc6:	691b      	ldr	r3, [r3, #16]
 800dfc8:	3334      	adds	r3, #52	@ 0x34
 800dfca:	2100      	movs	r1, #0
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f7fc fdd9 	bl	800ab84 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800dfd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfd4:	691b      	ldr	r3, [r3, #16]
 800dfd6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800dfda:	f04f 0200 	mov.w	r2, #0
 800dfde:	f04f 0300 	mov.w	r3, #0
 800dfe2:	4608      	mov	r0, r1
 800dfe4:	f7fc fdf9 	bl	800abda <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800dfe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfea:	691b      	ldr	r3, [r3, #16]
 800dfec:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800dff0:	f04f 0200 	mov.w	r2, #0
 800dff4:	f04f 0300 	mov.w	r3, #0
 800dff8:	4608      	mov	r0, r1
 800dffa:	f7fc fdee 	bl	800abda <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800dffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e000:	691b      	ldr	r3, [r3, #16]
 800e002:	3321      	adds	r3, #33	@ 0x21
 800e004:	2201      	movs	r2, #1
 800e006:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800e008:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e00c:	4618      	mov	r0, r3
 800e00e:	f7fe fbcb 	bl	800c7a8 <store_xdir>
 800e012:	4603      	mov	r3, r0
 800e014:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800e018:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d17e      	bne.n	800e11e <f_open+0x302>
 800e020:	69fb      	ldr	r3, [r7, #28]
 800e022:	689b      	ldr	r3, [r3, #8]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d07a      	beq.n	800e11e <f_open+0x302>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800e028:	69f8      	ldr	r0, [r7, #28]
 800e02a:	69fb      	ldr	r3, [r7, #28]
 800e02c:	689b      	ldr	r3, [r3, #8]
 800e02e:	2200      	movs	r2, #0
 800e030:	4619      	mov	r1, r3
 800e032:	f7fd fc85 	bl	800b940 <remove_chain>
 800e036:	4603      	mov	r3, r0
 800e038:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800e03c:	69fb      	ldr	r3, [r7, #28]
 800e03e:	689a      	ldr	r2, [r3, #8]
 800e040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e042:	3a01      	subs	r2, #1
 800e044:	615a      	str	r2, [r3, #20]
 800e046:	e06a      	b.n	800e11e <f_open+0x302>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e048:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e04a:	330e      	adds	r3, #14
 800e04c:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800e050:	4618      	mov	r0, r3
 800e052:	f7fc fd97 	bl	800ab84 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e056:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e058:	3316      	adds	r3, #22
 800e05a:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800e05e:	4618      	mov	r0, r3
 800e060:	f7fc fd90 	bl	800ab84 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e064:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e066:	330b      	adds	r3, #11
 800e068:	2220      	movs	r2, #32
 800e06a:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e06c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e06e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e070:	4611      	mov	r1, r2
 800e072:	4618      	mov	r0, r3
 800e074:	f7fe f814 	bl	800c0a0 <ld_clust>
 800e078:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e07c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e07e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800e080:	2200      	movs	r2, #0
 800e082:	4618      	mov	r0, r3
 800e084:	f7fe f82b 	bl	800c0de <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e088:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e08a:	331c      	adds	r3, #28
 800e08c:	2100      	movs	r1, #0
 800e08e:	4618      	mov	r0, r3
 800e090:	f7fc fd78 	bl	800ab84 <st_dword>
					fs->wflag = 1;
 800e094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e096:	2201      	movs	r2, #1
 800e098:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e09a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d03d      	beq.n	800e11e <f_open+0x302>
						dw = fs->winsect;
 800e0a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e0a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
						res = remove_chain(&dj.obj, cl, 0);
 800e0aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	f7fd fc43 	bl	800b940 <remove_chain>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
						if (res == FR_OK) {
 800e0c0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d12a      	bne.n	800e11e <f_open+0x302>
							res = move_window(fs, dw);
 800e0c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0ca:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f7fd f82e 	bl	800b130 <move_window>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e0e0:	3a01      	subs	r2, #1
 800e0e2:	615a      	str	r2, [r3, #20]
 800e0e4:	e01b      	b.n	800e11e <f_open+0x302>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e0e6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d117      	bne.n	800e11e <f_open+0x302>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e0ee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e0f2:	f003 0310 	and.w	r3, r3, #16
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d003      	beq.n	800e102 <f_open+0x2e6>
					res = FR_NO_FILE;
 800e0fa:	2304      	movs	r3, #4
 800e0fc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800e100:	e00d      	b.n	800e11e <f_open+0x302>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e102:	7dfb      	ldrb	r3, [r7, #23]
 800e104:	f003 0302 	and.w	r3, r3, #2
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d008      	beq.n	800e11e <f_open+0x302>
 800e10c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e110:	f003 0301 	and.w	r3, r3, #1
 800e114:	2b00      	cmp	r3, #0
 800e116:	d002      	beq.n	800e11e <f_open+0x302>
						res = FR_DENIED;
 800e118:	2307      	movs	r3, #7
 800e11a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					}
				}
			}
		}
		if (res == FR_OK) {
 800e11e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e122:	2b00      	cmp	r3, #0
 800e124:	d126      	bne.n	800e174 <f_open+0x358>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e126:	7dfb      	ldrb	r3, [r7, #23]
 800e128:	f003 0308 	and.w	r3, r3, #8
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d003      	beq.n	800e138 <f_open+0x31c>
				mode |= FA_MODIFIED;
 800e130:	7dfb      	ldrb	r3, [r7, #23]
 800e132:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e136:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e13a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e13c:	69fb      	ldr	r3, [r7, #28]
 800e13e:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 800e140:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e142:	69fb      	ldr	r3, [r7, #28]
 800e144:	64da      	str	r2, [r3, #76]	@ 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e146:	7dfb      	ldrb	r3, [r7, #23]
 800e148:	2b01      	cmp	r3, #1
 800e14a:	bf8c      	ite	hi
 800e14c:	2301      	movhi	r3, #1
 800e14e:	2300      	movls	r3, #0
 800e150:	b2db      	uxtb	r3, r3
 800e152:	461a      	mov	r2, r3
 800e154:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e158:	4611      	mov	r1, r2
 800e15a:	4618      	mov	r0, r3
 800e15c:	f7fc feb8 	bl	800aed0 <inc_lock>
 800e160:	4602      	mov	r2, r0
 800e162:	69fb      	ldr	r3, [r7, #28]
 800e164:	62da      	str	r2, [r3, #44]	@ 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e166:	69fb      	ldr	r3, [r7, #28]
 800e168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d102      	bne.n	800e174 <f_open+0x358>
 800e16e:	2302      	movs	r3, #2
 800e170:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e174:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e178:	2b00      	cmp	r3, #0
 800e17a:	f040 80fe 	bne.w	800e37a <f_open+0x55e>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800e17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e180:	781b      	ldrb	r3, [r3, #0]
 800e182:	2b04      	cmp	r3, #4
 800e184:	d12d      	bne.n	800e1e2 <f_open+0x3c6>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800e186:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e188:	69fb      	ldr	r3, [r7, #28]
 800e18a:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800e18c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800e190:	4613      	mov	r3, r2
 800e192:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e196:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800e19a:	431a      	orrs	r2, r3
 800e19c:	69fb      	ldr	r3, [r7, #28]
 800e19e:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800e1a0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800e1a2:	69fb      	ldr	r3, [r7, #28]
 800e1a4:	629a      	str	r2, [r3, #40]	@ 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800e1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1a8:	691b      	ldr	r3, [r3, #16]
 800e1aa:	3334      	adds	r3, #52	@ 0x34
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f7fc fbd4 	bl	800a95a <ld_dword>
 800e1b2:	4602      	mov	r2, r0
 800e1b4:	69fb      	ldr	r3, [r7, #28]
 800e1b6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800e1b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1ba:	691b      	ldr	r3, [r3, #16]
 800e1bc:	3338      	adds	r3, #56	@ 0x38
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f7fc fbed 	bl	800a99e <ld_qword>
 800e1c4:	4602      	mov	r2, r0
 800e1c6:	460b      	mov	r3, r1
 800e1c8:	69f9      	ldr	r1, [r7, #28]
 800e1ca:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800e1ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1d0:	691b      	ldr	r3, [r3, #16]
 800e1d2:	3321      	adds	r3, #33	@ 0x21
 800e1d4:	781b      	ldrb	r3, [r3, #0]
 800e1d6:	f003 0302 	and.w	r3, r3, #2
 800e1da:	b2da      	uxtb	r2, r3
 800e1dc:	69fb      	ldr	r3, [r7, #28]
 800e1de:	71da      	strb	r2, [r3, #7]
 800e1e0:	e016      	b.n	800e210 <f_open+0x3f4>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e1e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1e4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e1e6:	4611      	mov	r1, r2
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	f7fd ff59 	bl	800c0a0 <ld_clust>
 800e1ee:	4602      	mov	r2, r0
 800e1f0:	69fb      	ldr	r3, [r7, #28]
 800e1f2:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e1f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e1f6:	331c      	adds	r3, #28
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f7fc fbae 	bl	800a95a <ld_dword>
 800e1fe:	4603      	mov	r3, r0
 800e200:	2200      	movs	r2, #0
 800e202:	60bb      	str	r3, [r7, #8]
 800e204:	60fa      	str	r2, [r7, #12]
 800e206:	69fb      	ldr	r3, [r7, #28]
 800e208:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800e20c:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e210:	69fb      	ldr	r3, [r7, #28]
 800e212:	2200      	movs	r2, #0
 800e214:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e218:	69fb      	ldr	r3, [r7, #28]
 800e21a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e21e:	88da      	ldrh	r2, [r3, #6]
 800e220:	69fb      	ldr	r3, [r7, #28]
 800e222:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e224:	69fb      	ldr	r3, [r7, #28]
 800e226:	7dfa      	ldrb	r2, [r7, #23]
 800e228:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;			/* Clear error flag */
 800e22c:	69fb      	ldr	r3, [r7, #28]
 800e22e:	2200      	movs	r2, #0
 800e230:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800e234:	69fb      	ldr	r3, [r7, #28]
 800e236:	2200      	movs	r2, #0
 800e238:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e23a:	69f9      	ldr	r1, [r7, #28]
 800e23c:	f04f 0200 	mov.w	r2, #0
 800e240:	f04f 0300 	mov.w	r3, #0
 800e244:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e248:	69fb      	ldr	r3, [r7, #28]
 800e24a:	3354      	adds	r3, #84	@ 0x54
 800e24c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e250:	2100      	movs	r1, #0
 800e252:	4618      	mov	r0, r3
 800e254:	f7fc fd68 	bl	800ad28 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e258:	7dfb      	ldrb	r3, [r7, #23]
 800e25a:	f003 0320 	and.w	r3, r3, #32
 800e25e:	2b00      	cmp	r3, #0
 800e260:	f000 808b 	beq.w	800e37a <f_open+0x55e>
 800e264:	69fb      	ldr	r3, [r7, #28]
 800e266:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e26a:	4313      	orrs	r3, r2
 800e26c:	f000 8085 	beq.w	800e37a <f_open+0x55e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e270:	69fb      	ldr	r3, [r7, #28]
 800e272:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e276:	69f9      	ldr	r1, [r7, #28]
 800e278:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e27c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e27e:	895b      	ldrh	r3, [r3, #10]
 800e280:	025b      	lsls	r3, r3, #9
 800e282:	67fb      	str	r3, [r7, #124]	@ 0x7c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e284:	69fb      	ldr	r3, [r7, #28]
 800e286:	689b      	ldr	r3, [r3, #8]
 800e288:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e28c:	69fb      	ldr	r3, [r7, #28]
 800e28e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e292:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
 800e296:	e026      	b.n	800e2e6 <f_open+0x4ca>
					clst = get_fat(&fp->obj, clst);
 800e298:	69fb      	ldr	r3, [r7, #28]
 800e29a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f7fd f800 	bl	800b2a4 <get_fat>
 800e2a4:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
					if (clst <= 1) res = FR_INT_ERR;
 800e2a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e2ac:	2b01      	cmp	r3, #1
 800e2ae:	d802      	bhi.n	800e2b6 <f_open+0x49a>
 800e2b0:	2302      	movs	r3, #2
 800e2b2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e2b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e2ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2be:	d102      	bne.n	800e2c6 <f_open+0x4aa>
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e2c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	469a      	mov	sl, r3
 800e2cc:	4693      	mov	fp, r2
 800e2ce:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800e2d2:	ebb2 010a 	subs.w	r1, r2, sl
 800e2d6:	6039      	str	r1, [r7, #0]
 800e2d8:	eb63 030b 	sbc.w	r3, r3, fp
 800e2dc:	607b      	str	r3, [r7, #4]
 800e2de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2e2:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
 800e2e6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d109      	bne.n	800e302 <f_open+0x4e6>
 800e2ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	4698      	mov	r8, r3
 800e2f4:	4691      	mov	r9, r2
 800e2f6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800e2fa:	4590      	cmp	r8, r2
 800e2fc:	eb79 0303 	sbcs.w	r3, r9, r3
 800e300:	d3ca      	bcc.n	800e298 <f_open+0x47c>
				}
				fp->clust = clst;
 800e302:	69fb      	ldr	r3, [r7, #28]
 800e304:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800e308:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e30a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d133      	bne.n	800e37a <f_open+0x55e>
 800e312:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800e316:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800e31a:	2500      	movs	r5, #0
 800e31c:	ea54 0305 	orrs.w	r3, r4, r5
 800e320:	d02b      	beq.n	800e37a <f_open+0x55e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e324:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e328:	4618      	mov	r0, r3
 800e32a:	f7fc ff9d 	bl	800b268 <clust2sect>
 800e32e:	67b8      	str	r0, [r7, #120]	@ 0x78
 800e330:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e332:	2b00      	cmp	r3, #0
 800e334:	d103      	bne.n	800e33e <f_open+0x522>
						res = FR_INT_ERR;
 800e336:	2302      	movs	r3, #2
 800e338:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800e33c:	e01d      	b.n	800e37a <f_open+0x55e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e33e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800e342:	f04f 0200 	mov.w	r2, #0
 800e346:	f04f 0300 	mov.w	r3, #0
 800e34a:	0a42      	lsrs	r2, r0, #9
 800e34c:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800e350:	0a4b      	lsrs	r3, r1, #9
 800e352:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e354:	441a      	add	r2, r3
 800e356:	69fb      	ldr	r3, [r7, #28]
 800e358:	645a      	str	r2, [r3, #68]	@ 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e35a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e35c:	7858      	ldrb	r0, [r3, #1]
 800e35e:	69fb      	ldr	r3, [r7, #28]
 800e360:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800e364:	69fb      	ldr	r3, [r7, #28]
 800e366:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e368:	2301      	movs	r3, #1
 800e36a:	f7fc fa4a 	bl	800a802 <disk_read>
 800e36e:	4603      	mov	r3, r0
 800e370:	2b00      	cmp	r3, #0
 800e372:	d002      	beq.n	800e37a <f_open+0x55e>
 800e374:	2301      	movs	r3, #1
 800e376:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e37a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d002      	beq.n	800e388 <f_open+0x56c>
 800e382:	69fb      	ldr	r3, [r7, #28]
 800e384:	2200      	movs	r2, #0
 800e386:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e388:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3798      	adds	r7, #152	@ 0x98
 800e390:	46bd      	mov	sp, r7
 800e392:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e396 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e396:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e39a:	b094      	sub	sp, #80	@ 0x50
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	61f8      	str	r0, [r7, #28]
 800e3a0:	61b9      	str	r1, [r7, #24]
 800e3a2:	617a      	str	r2, [r7, #20]
 800e3a4:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e3a6:	69bb      	ldr	r3, [r7, #24]
 800e3a8:	63fb      	str	r3, [r7, #60]	@ 0x3c


	*br = 0;	/* Clear read byte counter */
 800e3aa:	693b      	ldr	r3, [r7, #16]
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e3b0:	69fb      	ldr	r3, [r7, #28]
 800e3b2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800e3b6:	4611      	mov	r1, r2
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f7ff fcb3 	bl	800dd24 <validate>
 800e3be:	4603      	mov	r3, r0
 800e3c0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e3c4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d108      	bne.n	800e3de <f_read+0x48>
 800e3cc:	69fb      	ldr	r3, [r7, #28]
 800e3ce:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e3d2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800e3d6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d002      	beq.n	800e3e4 <f_read+0x4e>
 800e3de:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e3e2:	e14d      	b.n	800e680 <f_read+0x2ea>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e3e4:	69fb      	ldr	r3, [r7, #28]
 800e3e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e3ea:	f003 0301 	and.w	r3, r3, #1
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d101      	bne.n	800e3f6 <f_read+0x60>
 800e3f2:	2307      	movs	r3, #7
 800e3f4:	e144      	b.n	800e680 <f_read+0x2ea>
	remain = fp->obj.objsize - fp->fptr;
 800e3f6:	69fb      	ldr	r3, [r7, #28]
 800e3f8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800e3fc:	69fb      	ldr	r3, [r7, #28]
 800e3fe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e402:	ebb0 0c02 	subs.w	ip, r0, r2
 800e406:	f8c7 c000 	str.w	ip, [r7]
 800e40a:	eb61 0303 	sbc.w	r3, r1, r3
 800e40e:	607b      	str	r3, [r7, #4]
 800e410:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e414:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e418:	697b      	ldr	r3, [r7, #20]
 800e41a:	2200      	movs	r2, #0
 800e41c:	469a      	mov	sl, r3
 800e41e:	4693      	mov	fp, r2
 800e420:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800e424:	4552      	cmp	r2, sl
 800e426:	eb73 030b 	sbcs.w	r3, r3, fp
 800e42a:	f080 8124 	bcs.w	800e676 <f_read+0x2e0>
 800e42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e430:	617b      	str	r3, [r7, #20]

	for ( ;  btr;								/* Repeat until all data read */
 800e432:	e120      	b.n	800e676 <f_read+0x2e0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e434:	69fb      	ldr	r3, [r7, #28]
 800e436:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e43a:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800e43e:	2500      	movs	r5, #0
 800e440:	ea54 0305 	orrs.w	r3, r4, r5
 800e444:	f040 80d9 	bne.w	800e5fa <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e448:	69fb      	ldr	r3, [r7, #28]
 800e44a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800e44e:	f04f 0200 	mov.w	r2, #0
 800e452:	f04f 0300 	mov.w	r3, #0
 800e456:	0a42      	lsrs	r2, r0, #9
 800e458:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800e45c:	0a4b      	lsrs	r3, r1, #9
 800e45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e460:	895b      	ldrh	r3, [r3, #10]
 800e462:	3b01      	subs	r3, #1
 800e464:	4013      	ands	r3, r2
 800e466:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (csect == 0) {					/* On the cluster boundary? */
 800e468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d132      	bne.n	800e4d4 <f_read+0x13e>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e46e:	69fb      	ldr	r3, [r7, #28]
 800e470:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e474:	4313      	orrs	r3, r2
 800e476:	d103      	bne.n	800e480 <f_read+0xea>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e478:	69fb      	ldr	r3, [r7, #28]
 800e47a:	689b      	ldr	r3, [r3, #8]
 800e47c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e47e:	e013      	b.n	800e4a8 <f_read+0x112>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e480:	69fb      	ldr	r3, [r7, #28]
 800e482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e484:	2b00      	cmp	r3, #0
 800e486:	d007      	beq.n	800e498 <f_read+0x102>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e488:	69fb      	ldr	r3, [r7, #28]
 800e48a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e48e:	69f8      	ldr	r0, [r7, #28]
 800e490:	f7fd fc0b 	bl	800bcaa <clmt_clust>
 800e494:	64b8      	str	r0, [r7, #72]	@ 0x48
 800e496:	e007      	b.n	800e4a8 <f_read+0x112>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e498:	69fa      	ldr	r2, [r7, #28]
 800e49a:	69fb      	ldr	r3, [r7, #28]
 800e49c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e49e:	4619      	mov	r1, r3
 800e4a0:	4610      	mov	r0, r2
 800e4a2:	f7fc feff 	bl	800b2a4 <get_fat>
 800e4a6:	64b8      	str	r0, [r7, #72]	@ 0x48
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e4a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e4aa:	2b01      	cmp	r3, #1
 800e4ac:	d805      	bhi.n	800e4ba <f_read+0x124>
 800e4ae:	69fb      	ldr	r3, [r7, #28]
 800e4b0:	2202      	movs	r2, #2
 800e4b2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e4b6:	2302      	movs	r3, #2
 800e4b8:	e0e2      	b.n	800e680 <f_read+0x2ea>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e4ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e4bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4c0:	d105      	bne.n	800e4ce <f_read+0x138>
 800e4c2:	69fb      	ldr	r3, [r7, #28]
 800e4c4:	2201      	movs	r2, #1
 800e4c6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e4ca:	2301      	movs	r3, #1
 800e4cc:	e0d8      	b.n	800e680 <f_read+0x2ea>
				fp->clust = clst;				/* Update current cluster */
 800e4ce:	69fb      	ldr	r3, [r7, #28]
 800e4d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e4d2:	641a      	str	r2, [r3, #64]	@ 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e4d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e4d6:	69fb      	ldr	r3, [r7, #28]
 800e4d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4da:	4619      	mov	r1, r3
 800e4dc:	4610      	mov	r0, r2
 800e4de:	f7fc fec3 	bl	800b268 <clust2sect>
 800e4e2:	62b8      	str	r0, [r7, #40]	@ 0x28
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e4e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d105      	bne.n	800e4f6 <f_read+0x160>
 800e4ea:	69fb      	ldr	r3, [r7, #28]
 800e4ec:	2202      	movs	r2, #2
 800e4ee:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e4f2:	2302      	movs	r3, #2
 800e4f4:	e0c4      	b.n	800e680 <f_read+0x2ea>
			sect += csect;
 800e4f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e4f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4fa:	4413      	add	r3, r2
 800e4fc:	62bb      	str	r3, [r7, #40]	@ 0x28
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e4fe:	697b      	ldr	r3, [r7, #20]
 800e500:	0a5b      	lsrs	r3, r3, #9
 800e502:	643b      	str	r3, [r7, #64]	@ 0x40
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e504:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e506:	2b00      	cmp	r3, #0
 800e508:	d03b      	beq.n	800e582 <f_read+0x1ec>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e50a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e50c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e50e:	4413      	add	r3, r2
 800e510:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e512:	8952      	ldrh	r2, [r2, #10]
 800e514:	4293      	cmp	r3, r2
 800e516:	d905      	bls.n	800e524 <f_read+0x18e>
					cc = fs->csize - csect;
 800e518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e51a:	895b      	ldrh	r3, [r3, #10]
 800e51c:	461a      	mov	r2, r3
 800e51e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e520:	1ad3      	subs	r3, r2, r3
 800e522:	643b      	str	r3, [r7, #64]	@ 0x40
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e526:	7858      	ldrb	r0, [r3, #1]
 800e528:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e52a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e52c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e52e:	f7fc f968 	bl	800a802 <disk_read>
 800e532:	4603      	mov	r3, r0
 800e534:	2b00      	cmp	r3, #0
 800e536:	d005      	beq.n	800e544 <f_read+0x1ae>
 800e538:	69fb      	ldr	r3, [r7, #28]
 800e53a:	2201      	movs	r2, #1
 800e53c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e540:	2301      	movs	r3, #1
 800e542:	e09d      	b.n	800e680 <f_read+0x2ea>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e544:	69fb      	ldr	r3, [r7, #28]
 800e546:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e54a:	b25b      	sxtb	r3, r3
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	da14      	bge.n	800e57a <f_read+0x1e4>
 800e550:	69fb      	ldr	r3, [r7, #28]
 800e552:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e556:	1ad3      	subs	r3, r2, r3
 800e558:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e55a:	429a      	cmp	r2, r3
 800e55c:	d90d      	bls.n	800e57a <f_read+0x1e4>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e55e:	69fb      	ldr	r3, [r7, #28]
 800e560:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e564:	1ad3      	subs	r3, r2, r3
 800e566:	025b      	lsls	r3, r3, #9
 800e568:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e56a:	18d0      	adds	r0, r2, r3
 800e56c:	69fb      	ldr	r3, [r7, #28]
 800e56e:	3354      	adds	r3, #84	@ 0x54
 800e570:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e574:	4619      	mov	r1, r3
 800e576:	f7fc fbb7 	bl	800ace8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e57a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e57c:	025b      	lsls	r3, r3, #9
 800e57e:	647b      	str	r3, [r7, #68]	@ 0x44
				continue;
 800e580:	e059      	b.n	800e636 <f_read+0x2a0>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e582:	69fb      	ldr	r3, [r7, #28]
 800e584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e586:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e588:	429a      	cmp	r2, r3
 800e58a:	d033      	beq.n	800e5f4 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e58c:	69fb      	ldr	r3, [r7, #28]
 800e58e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e592:	b25b      	sxtb	r3, r3
 800e594:	2b00      	cmp	r3, #0
 800e596:	da1b      	bge.n	800e5d0 <f_read+0x23a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e59a:	7858      	ldrb	r0, [r3, #1]
 800e59c:	69fb      	ldr	r3, [r7, #28]
 800e59e:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800e5a2:	69fb      	ldr	r3, [r7, #28]
 800e5a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	f7fc f95a 	bl	800a860 <disk_write>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d005      	beq.n	800e5be <f_read+0x228>
 800e5b2:	69fb      	ldr	r3, [r7, #28]
 800e5b4:	2201      	movs	r2, #1
 800e5b6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	e060      	b.n	800e680 <f_read+0x2ea>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e5be:	69fb      	ldr	r3, [r7, #28]
 800e5c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e5c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e5c8:	b2da      	uxtb	r2, r3
 800e5ca:	69fb      	ldr	r3, [r7, #28]
 800e5cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e5d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5d2:	7858      	ldrb	r0, [r3, #1]
 800e5d4:	69fb      	ldr	r3, [r7, #28]
 800e5d6:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800e5da:	2301      	movs	r3, #1
 800e5dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e5de:	f7fc f910 	bl	800a802 <disk_read>
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d005      	beq.n	800e5f4 <f_read+0x25e>
 800e5e8:	69fb      	ldr	r3, [r7, #28]
 800e5ea:	2201      	movs	r2, #1
 800e5ec:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	e045      	b.n	800e680 <f_read+0x2ea>
			}
#endif
			fp->sect = sect;
 800e5f4:	69fb      	ldr	r3, [r7, #28]
 800e5f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e5f8:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e5fa:	69fb      	ldr	r3, [r7, #28]
 800e5fc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e600:	4613      	mov	r3, r2
 800e602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e606:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800e60a:	647b      	str	r3, [r7, #68]	@ 0x44
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e60c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e60e:	697b      	ldr	r3, [r7, #20]
 800e610:	429a      	cmp	r2, r3
 800e612:	d901      	bls.n	800e618 <f_read+0x282>
 800e614:	697b      	ldr	r3, [r7, #20]
 800e616:	647b      	str	r3, [r7, #68]	@ 0x44
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e618:	69fb      	ldr	r3, [r7, #28]
 800e61a:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800e61e:	69fb      	ldr	r3, [r7, #28]
 800e620:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e624:	4613      	mov	r3, r2
 800e626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e62a:	440b      	add	r3, r1
 800e62c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e62e:	4619      	mov	r1, r3
 800e630:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e632:	f7fc fb59 	bl	800ace8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e636:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e638:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e63a:	4413      	add	r3, r2
 800e63c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e63e:	69fb      	ldr	r3, [r7, #28]
 800e640:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e644:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e646:	2000      	movs	r0, #0
 800e648:	4688      	mov	r8, r1
 800e64a:	4681      	mov	r9, r0
 800e64c:	eb12 0108 	adds.w	r1, r2, r8
 800e650:	60b9      	str	r1, [r7, #8]
 800e652:	eb43 0309 	adc.w	r3, r3, r9
 800e656:	60fb      	str	r3, [r7, #12]
 800e658:	69fb      	ldr	r3, [r7, #28]
 800e65a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800e65e:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
 800e662:	693b      	ldr	r3, [r7, #16]
 800e664:	681a      	ldr	r2, [r3, #0]
 800e666:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e668:	441a      	add	r2, r3
 800e66a:	693b      	ldr	r3, [r7, #16]
 800e66c:	601a      	str	r2, [r3, #0]
 800e66e:	697a      	ldr	r2, [r7, #20]
 800e670:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e672:	1ad3      	subs	r3, r2, r3
 800e674:	617b      	str	r3, [r7, #20]
	for ( ;  btr;								/* Repeat until all data read */
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	f47f aedb 	bne.w	800e434 <f_read+0x9e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e67e:	2300      	movs	r3, #0
}
 800e680:	4618      	mov	r0, r3
 800e682:	3750      	adds	r7, #80	@ 0x50
 800e684:	46bd      	mov	sp, r7
 800e686:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e68a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e68a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e68e:	b08d      	sub	sp, #52	@ 0x34
 800e690:	af00      	add	r7, sp, #0
 800e692:	60f8      	str	r0, [r7, #12]
 800e694:	60b9      	str	r1, [r7, #8]
 800e696:	607a      	str	r2, [r7, #4]
 800e698:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e69a:	68bb      	ldr	r3, [r7, #8]
 800e69c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	f107 0210 	add.w	r2, r7, #16
 800e6aa:	4611      	mov	r1, r2
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f7ff fb39 	bl	800dd24 <validate>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e6b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d108      	bne.n	800e6d2 <f_write+0x48>
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e6c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800e6ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d002      	beq.n	800e6d8 <f_write+0x4e>
 800e6d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e6d6:	e187      	b.n	800e9e8 <f_write+0x35e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e6de:	f003 0302 	and.w	r3, r3, #2
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d101      	bne.n	800e6ea <f_write+0x60>
 800e6e6:	2307      	movs	r3, #7
 800e6e8:	e17e      	b.n	800e9e8 <f_write+0x35e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e6ea:	693b      	ldr	r3, [r7, #16]
 800e6ec:	781b      	ldrb	r3, [r3, #0]
 800e6ee:	2b04      	cmp	r3, #4
 800e6f0:	f000 816a 	beq.w	800e9c8 <f_write+0x33e>
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	18d1      	adds	r1, r2, r3
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e704:	4613      	mov	r3, r2
 800e706:	4299      	cmp	r1, r3
 800e708:	f080 815e 	bcs.w	800e9c8 <f_write+0x33e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e712:	4613      	mov	r3, r2
 800e714:	43db      	mvns	r3, r3
 800e716:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e718:	e156      	b.n	800e9c8 <f_write+0x33e>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e720:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800e724:	2500      	movs	r5, #0
 800e726:	ea54 0305 	orrs.w	r3, r4, r5
 800e72a:	f040 80fb 	bne.w	800e924 <f_write+0x29a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800e734:	f04f 0200 	mov.w	r2, #0
 800e738:	f04f 0300 	mov.w	r3, #0
 800e73c:	0a42      	lsrs	r2, r0, #9
 800e73e:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800e742:	0a4b      	lsrs	r3, r1, #9
 800e744:	693b      	ldr	r3, [r7, #16]
 800e746:	895b      	ldrh	r3, [r3, #10]
 800e748:	3b01      	subs	r3, #1
 800e74a:	4013      	ands	r3, r2
 800e74c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e74e:	69bb      	ldr	r3, [r7, #24]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d146      	bne.n	800e7e2 <f_write+0x158>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e75a:	4313      	orrs	r3, r2
 800e75c:	d10c      	bne.n	800e778 <f_write+0xee>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	689b      	ldr	r3, [r3, #8]
 800e762:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e766:	2b00      	cmp	r3, #0
 800e768:	d11a      	bne.n	800e7a0 <f_write+0x116>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	2100      	movs	r1, #0
 800e76e:	4618      	mov	r0, r3
 800e770:	f7fd f99a 	bl	800baa8 <create_chain>
 800e774:	62b8      	str	r0, [r7, #40]	@ 0x28
 800e776:	e013      	b.n	800e7a0 <f_write+0x116>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d007      	beq.n	800e790 <f_write+0x106>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e786:	68f8      	ldr	r0, [r7, #12]
 800e788:	f7fd fa8f 	bl	800bcaa <clmt_clust>
 800e78c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800e78e:	e007      	b.n	800e7a0 <f_write+0x116>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e790:	68fa      	ldr	r2, [r7, #12]
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e796:	4619      	mov	r1, r3
 800e798:	4610      	mov	r0, r2
 800e79a:	f7fd f985 	bl	800baa8 <create_chain>
 800e79e:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e7a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	f000 8115 	beq.w	800e9d2 <f_write+0x348>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e7a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7aa:	2b01      	cmp	r3, #1
 800e7ac:	d105      	bne.n	800e7ba <f_write+0x130>
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	2202      	movs	r2, #2
 800e7b2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e7b6:	2302      	movs	r3, #2
 800e7b8:	e116      	b.n	800e9e8 <f_write+0x35e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e7ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7c0:	d105      	bne.n	800e7ce <f_write+0x144>
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	2201      	movs	r2, #1
 800e7c6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	e10c      	b.n	800e9e8 <f_write+0x35e>
				fp->clust = clst;			/* Update current cluster */
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e7d2:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	689b      	ldr	r3, [r3, #8]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d102      	bne.n	800e7e2 <f_write+0x158>
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e7e0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e7e8:	b25b      	sxtb	r3, r3
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	da1b      	bge.n	800e826 <f_write+0x19c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e7ee:	693b      	ldr	r3, [r7, #16]
 800e7f0:	7858      	ldrb	r0, [r3, #1]
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e7fc:	2301      	movs	r3, #1
 800e7fe:	f7fc f82f 	bl	800a860 <disk_write>
 800e802:	4603      	mov	r3, r0
 800e804:	2b00      	cmp	r3, #0
 800e806:	d005      	beq.n	800e814 <f_write+0x18a>
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	2201      	movs	r2, #1
 800e80c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e810:	2301      	movs	r3, #1
 800e812:	e0e9      	b.n	800e9e8 <f_write+0x35e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e81a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e81e:	b2da      	uxtb	r2, r3
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e826:	693a      	ldr	r2, [r7, #16]
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e82c:	4619      	mov	r1, r3
 800e82e:	4610      	mov	r0, r2
 800e830:	f7fc fd1a 	bl	800b268 <clust2sect>
 800e834:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e836:	697b      	ldr	r3, [r7, #20]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d105      	bne.n	800e848 <f_write+0x1be>
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	2202      	movs	r2, #2
 800e840:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e844:	2302      	movs	r3, #2
 800e846:	e0cf      	b.n	800e9e8 <f_write+0x35e>
			sect += csect;
 800e848:	697a      	ldr	r2, [r7, #20]
 800e84a:	69bb      	ldr	r3, [r7, #24]
 800e84c:	4413      	add	r3, r2
 800e84e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	0a5b      	lsrs	r3, r3, #9
 800e854:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e856:	6a3b      	ldr	r3, [r7, #32]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d03f      	beq.n	800e8dc <f_write+0x252>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e85c:	69ba      	ldr	r2, [r7, #24]
 800e85e:	6a3b      	ldr	r3, [r7, #32]
 800e860:	4413      	add	r3, r2
 800e862:	693a      	ldr	r2, [r7, #16]
 800e864:	8952      	ldrh	r2, [r2, #10]
 800e866:	4293      	cmp	r3, r2
 800e868:	d905      	bls.n	800e876 <f_write+0x1ec>
					cc = fs->csize - csect;
 800e86a:	693b      	ldr	r3, [r7, #16]
 800e86c:	895b      	ldrh	r3, [r3, #10]
 800e86e:	461a      	mov	r2, r3
 800e870:	69bb      	ldr	r3, [r7, #24]
 800e872:	1ad3      	subs	r3, r2, r3
 800e874:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e876:	693b      	ldr	r3, [r7, #16]
 800e878:	7858      	ldrb	r0, [r3, #1]
 800e87a:	6a3b      	ldr	r3, [r7, #32]
 800e87c:	697a      	ldr	r2, [r7, #20]
 800e87e:	69f9      	ldr	r1, [r7, #28]
 800e880:	f7fb ffee 	bl	800a860 <disk_write>
 800e884:	4603      	mov	r3, r0
 800e886:	2b00      	cmp	r3, #0
 800e888:	d005      	beq.n	800e896 <f_write+0x20c>
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	2201      	movs	r2, #1
 800e88e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e892:	2301      	movs	r3, #1
 800e894:	e0a8      	b.n	800e9e8 <f_write+0x35e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	1ad3      	subs	r3, r2, r3
 800e89e:	6a3a      	ldr	r2, [r7, #32]
 800e8a0:	429a      	cmp	r2, r3
 800e8a2:	d917      	bls.n	800e8d4 <f_write+0x24a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e8ae:	697b      	ldr	r3, [r7, #20]
 800e8b0:	1ad3      	subs	r3, r2, r3
 800e8b2:	025b      	lsls	r3, r3, #9
 800e8b4:	69fa      	ldr	r2, [r7, #28]
 800e8b6:	4413      	add	r3, r2
 800e8b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e8bc:	4619      	mov	r1, r3
 800e8be:	f7fc fa13 	bl	800ace8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e8c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e8cc:	b2da      	uxtb	r2, r3
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e8d4:	6a3b      	ldr	r3, [r7, #32]
 800e8d6:	025b      	lsls	r3, r3, #9
 800e8d8:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800e8da:	e04a      	b.n	800e972 <f_write+0x2e8>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e8e0:	697a      	ldr	r2, [r7, #20]
 800e8e2:	429a      	cmp	r2, r3
 800e8e4:	d01b      	beq.n	800e91e <f_write+0x294>
				fp->fptr < fp->obj.objsize &&
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e8f2:	4290      	cmp	r0, r2
 800e8f4:	eb71 0303 	sbcs.w	r3, r1, r3
 800e8f8:	d211      	bcs.n	800e91e <f_write+0x294>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e8fa:	693b      	ldr	r3, [r7, #16]
 800e8fc:	7858      	ldrb	r0, [r3, #1]
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800e904:	2301      	movs	r3, #1
 800e906:	697a      	ldr	r2, [r7, #20]
 800e908:	f7fb ff7b 	bl	800a802 <disk_read>
 800e90c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d005      	beq.n	800e91e <f_write+0x294>
					ABORT(fs, FR_DISK_ERR);
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	2201      	movs	r2, #1
 800e916:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e91a:	2301      	movs	r3, #1
 800e91c:	e064      	b.n	800e9e8 <f_write+0x35e>
			}
#endif
			fp->sect = sect;
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	697a      	ldr	r2, [r7, #20]
 800e922:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e92a:	4613      	mov	r3, r2
 800e92c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e930:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800e934:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	429a      	cmp	r2, r3
 800e93c:	d901      	bls.n	800e942 <f_write+0x2b8>
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e94e:	4613      	mov	r3, r2
 800e950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e954:	440b      	add	r3, r1
 800e956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e958:	69f9      	ldr	r1, [r7, #28]
 800e95a:	4618      	mov	r0, r3
 800e95c:	f7fc f9c4 	bl	800ace8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e966:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e96a:	b2da      	uxtb	r2, r3
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e972:	69fa      	ldr	r2, [r7, #28]
 800e974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e976:	4413      	add	r3, r2
 800e978:	61fb      	str	r3, [r7, #28]
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e980:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e982:	2000      	movs	r0, #0
 800e984:	4688      	mov	r8, r1
 800e986:	4681      	mov	r9, r0
 800e988:	eb12 0a08 	adds.w	sl, r2, r8
 800e98c:	eb43 0b09 	adc.w	fp, r3, r9
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e99c:	68f9      	ldr	r1, [r7, #12]
 800e99e:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	@ 0x38
 800e9a2:	4282      	cmp	r2, r0
 800e9a4:	eb73 0601 	sbcs.w	r6, r3, r1
 800e9a8:	d201      	bcs.n	800e9ae <f_write+0x324>
 800e9aa:	4602      	mov	r2, r0
 800e9ac:	460b      	mov	r3, r1
 800e9ae:	68f9      	ldr	r1, [r7, #12]
 800e9b0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	681a      	ldr	r2, [r3, #0]
 800e9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9ba:	441a      	add	r2, r3
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	601a      	str	r2, [r3, #0]
 800e9c0:	687a      	ldr	r2, [r7, #4]
 800e9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9c4:	1ad3      	subs	r3, r2, r3
 800e9c6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	f47f aea5 	bne.w	800e71a <f_write+0x90>
 800e9d0:	e000      	b.n	800e9d4 <f_write+0x34a>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e9d2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e9da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e9de:	b2da      	uxtb	r2, r3
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 800e9e6:	2300      	movs	r3, #0
}
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	3734      	adds	r7, #52	@ 0x34
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e9f2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e9f2:	b580      	push	{r7, lr}
 800e9f4:	b09a      	sub	sp, #104	@ 0x68
 800e9f6:	af00      	add	r7, sp, #0
 800e9f8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800ea00:	4611      	mov	r1, r2
 800ea02:	4618      	mov	r0, r3
 800ea04:	f7ff f98e 	bl	800dd24 <validate>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800ea0e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	f040 8105 	bne.w	800ec22 <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ea1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	f000 80fd 	beq.w	800ec22 <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ea2e:	b25b      	sxtb	r3, r3
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	da17      	bge.n	800ea64 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ea34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ea36:	7858      	ldrb	r0, [r3, #1]
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ea42:	2301      	movs	r3, #1
 800ea44:	f7fb ff0c 	bl	800a860 <disk_write>
 800ea48:	4603      	mov	r3, r0
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d001      	beq.n	800ea52 <f_sync+0x60>
 800ea4e:	2301      	movs	r3, #1
 800ea50:	e0e9      	b.n	800ec26 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ea58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ea5c:	b2da      	uxtb	r2, r3
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ea64:	f7fb fea0 	bl	800a7a8 <get_fattime>
 800ea68:	6638      	str	r0, [r7, #96]	@ 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800ea6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ea6c:	781b      	ldrb	r3, [r3, #0]
 800ea6e:	2b04      	cmp	r3, #4
 800ea70:	f040 808c 	bne.w	800eb8c <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	4618      	mov	r0, r3
 800ea78:	f7fc ff02 	bl	800b880 <fill_first_frag>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res == FR_OK) {
 800ea82:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d10a      	bne.n	800eaa0 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800ea8a:	6878      	ldr	r0, [r7, #4]
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea90:	f04f 32ff 	mov.w	r2, #4294967295
 800ea94:	4619      	mov	r1, r3
 800ea96:	f7fc ff22 	bl	800b8de <fill_last_frag>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
				if (res == FR_OK) {
 800eaa0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	f040 80bc 	bne.w	800ec22 <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800eaaa:	687a      	ldr	r2, [r7, #4]
 800eaac:	f107 0308 	add.w	r3, r7, #8
 800eab0:	4611      	mov	r1, r2
 800eab2:	4618      	mov	r0, r3
 800eab4:	f7fd fe42 	bl	800c73c <load_obj_dir>
 800eab8:	4603      	mov	r3, r0
 800eaba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (res == FR_OK) {
 800eabe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	f040 80ad 	bne.w	800ec22 <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800eac8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eaca:	691b      	ldr	r3, [r3, #16]
 800eacc:	3304      	adds	r3, #4
 800eace:	781a      	ldrb	r2, [r3, #0]
 800ead0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ead2:	691b      	ldr	r3, [r3, #16]
 800ead4:	3304      	adds	r3, #4
 800ead6:	f042 0220 	orr.w	r2, r2, #32
 800eada:	b2d2      	uxtb	r2, r2
 800eadc:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	79da      	ldrb	r2, [r3, #7]
 800eae2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eae4:	691b      	ldr	r3, [r3, #16]
 800eae6:	3321      	adds	r3, #33	@ 0x21
 800eae8:	f042 0201 	orr.w	r2, r2, #1
 800eaec:	b2d2      	uxtb	r2, r2
 800eaee:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800eaf0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eaf2:	691b      	ldr	r3, [r3, #16]
 800eaf4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	689b      	ldr	r3, [r3, #8]
 800eafc:	4619      	mov	r1, r3
 800eafe:	4610      	mov	r0, r2
 800eb00:	f7fc f840 	bl	800ab84 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800eb04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eb06:	691b      	ldr	r3, [r3, #16]
 800eb08:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800eb12:	4608      	mov	r0, r1
 800eb14:	f7fc f861 	bl	800abda <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800eb18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eb1a:	691b      	ldr	r3, [r3, #16]
 800eb1c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800eb26:	4608      	mov	r0, r1
 800eb28:	f7fc f857 	bl	800abda <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800eb2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eb2e:	691b      	ldr	r3, [r3, #16]
 800eb30:	330c      	adds	r3, #12
 800eb32:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800eb34:	4618      	mov	r0, r3
 800eb36:	f7fc f825 	bl	800ab84 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800eb3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eb3c:	691b      	ldr	r3, [r3, #16]
 800eb3e:	3315      	adds	r3, #21
 800eb40:	2200      	movs	r2, #0
 800eb42:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800eb44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eb46:	691b      	ldr	r3, [r3, #16]
 800eb48:	3310      	adds	r3, #16
 800eb4a:	2100      	movs	r1, #0
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f7fc f819 	bl	800ab84 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800eb52:	f107 0308 	add.w	r3, r7, #8
 800eb56:	4618      	mov	r0, r3
 800eb58:	f7fd fe26 	bl	800c7a8 <store_xdir>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800eb62:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d15b      	bne.n	800ec22 <f_sync+0x230>
							res = sync_fs(fs);
 800eb6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f7fc fb0d 	bl	800b18c <sync_fs>
 800eb72:	4603      	mov	r3, r0
 800eb74:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800eb7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eb82:	b2da      	uxtb	r2, r3
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 800eb8a:	e04a      	b.n	800ec22 <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800eb8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eb92:	4619      	mov	r1, r3
 800eb94:	4610      	mov	r0, r2
 800eb96:	f7fc facb 	bl	800b130 <move_window>
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res == FR_OK) {
 800eba0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d13c      	bne.n	800ec22 <f_sync+0x230>
					dir = fp->dir_ptr;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ebac:	65fb      	str	r3, [r7, #92]	@ 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ebae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ebb0:	330b      	adds	r3, #11
 800ebb2:	781a      	ldrb	r2, [r3, #0]
 800ebb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ebb6:	330b      	adds	r3, #11
 800ebb8:	f042 0220 	orr.w	r2, r2, #32
 800ebbc:	b2d2      	uxtb	r2, r2
 800ebbe:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6818      	ldr	r0, [r3, #0]
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	689b      	ldr	r3, [r3, #8]
 800ebc8:	461a      	mov	r2, r3
 800ebca:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800ebcc:	f7fd fa87 	bl	800c0de <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ebd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ebd2:	f103 001c 	add.w	r0, r3, #28
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ebdc:	4613      	mov	r3, r2
 800ebde:	4619      	mov	r1, r3
 800ebe0:	f7fb ffd0 	bl	800ab84 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ebe4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ebe6:	3316      	adds	r3, #22
 800ebe8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800ebea:	4618      	mov	r0, r3
 800ebec:	f7fb ffca 	bl	800ab84 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ebf0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ebf2:	3312      	adds	r3, #18
 800ebf4:	2100      	movs	r1, #0
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f7fb ffaa 	bl	800ab50 <st_word>
					fs->wflag = 1;
 800ebfc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ebfe:	2201      	movs	r2, #1
 800ec00:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ec02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ec04:	4618      	mov	r0, r3
 800ec06:	f7fc fac1 	bl	800b18c <sync_fs>
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ec16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ec1a:	b2da      	uxtb	r2, r3
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ec22:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	3768      	adds	r7, #104	@ 0x68
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}

0800ec2e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ec2e:	b580      	push	{r7, lr}
 800ec30:	b084      	sub	sp, #16
 800ec32:	af00      	add	r7, sp, #0
 800ec34:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ec36:	6878      	ldr	r0, [r7, #4]
 800ec38:	f7ff fedb 	bl	800e9f2 <f_sync>
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ec40:	7bfb      	ldrb	r3, [r7, #15]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d118      	bne.n	800ec78 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	f107 0208 	add.w	r2, r7, #8
 800ec4c:	4611      	mov	r1, r2
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f7ff f868 	bl	800dd24 <validate>
 800ec54:	4603      	mov	r3, r0
 800ec56:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ec58:	7bfb      	ldrb	r3, [r7, #15]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d10c      	bne.n	800ec78 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec62:	4618      	mov	r0, r3
 800ec64:	f7fc f9c2 	bl	800afec <dec_lock>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ec6c:	7bfb      	ldrb	r3, [r7, #15]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d102      	bne.n	800ec78 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2200      	movs	r2, #0
 800ec76:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ec78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	3710      	adds	r7, #16
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}
	...

0800ec84 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ec84:	b480      	push	{r7}
 800ec86:	b087      	sub	sp, #28
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	60f8      	str	r0, [r7, #12]
 800ec8c:	60b9      	str	r1, [r7, #8]
 800ec8e:	4613      	mov	r3, r2
 800ec90:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ec92:	2301      	movs	r3, #1
 800ec94:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ec96:	2300      	movs	r3, #0
 800ec98:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ec9a:	4b1e      	ldr	r3, [pc, #120]	@ (800ed14 <FATFS_LinkDriverEx+0x90>)
 800ec9c:	7a5b      	ldrb	r3, [r3, #9]
 800ec9e:	b2db      	uxtb	r3, r3
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d131      	bne.n	800ed08 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800eca4:	4b1b      	ldr	r3, [pc, #108]	@ (800ed14 <FATFS_LinkDriverEx+0x90>)
 800eca6:	7a5b      	ldrb	r3, [r3, #9]
 800eca8:	b2db      	uxtb	r3, r3
 800ecaa:	461a      	mov	r2, r3
 800ecac:	4b19      	ldr	r3, [pc, #100]	@ (800ed14 <FATFS_LinkDriverEx+0x90>)
 800ecae:	2100      	movs	r1, #0
 800ecb0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ecb2:	4b18      	ldr	r3, [pc, #96]	@ (800ed14 <FATFS_LinkDriverEx+0x90>)
 800ecb4:	7a5b      	ldrb	r3, [r3, #9]
 800ecb6:	b2db      	uxtb	r3, r3
 800ecb8:	4a16      	ldr	r2, [pc, #88]	@ (800ed14 <FATFS_LinkDriverEx+0x90>)
 800ecba:	009b      	lsls	r3, r3, #2
 800ecbc:	4413      	add	r3, r2
 800ecbe:	68fa      	ldr	r2, [r7, #12]
 800ecc0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ecc2:	4b14      	ldr	r3, [pc, #80]	@ (800ed14 <FATFS_LinkDriverEx+0x90>)
 800ecc4:	7a5b      	ldrb	r3, [r3, #9]
 800ecc6:	b2db      	uxtb	r3, r3
 800ecc8:	461a      	mov	r2, r3
 800ecca:	4b12      	ldr	r3, [pc, #72]	@ (800ed14 <FATFS_LinkDriverEx+0x90>)
 800eccc:	4413      	add	r3, r2
 800ecce:	79fa      	ldrb	r2, [r7, #7]
 800ecd0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ecd2:	4b10      	ldr	r3, [pc, #64]	@ (800ed14 <FATFS_LinkDriverEx+0x90>)
 800ecd4:	7a5b      	ldrb	r3, [r3, #9]
 800ecd6:	b2db      	uxtb	r3, r3
 800ecd8:	1c5a      	adds	r2, r3, #1
 800ecda:	b2d1      	uxtb	r1, r2
 800ecdc:	4a0d      	ldr	r2, [pc, #52]	@ (800ed14 <FATFS_LinkDriverEx+0x90>)
 800ecde:	7251      	strb	r1, [r2, #9]
 800ece0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ece2:	7dbb      	ldrb	r3, [r7, #22]
 800ece4:	3330      	adds	r3, #48	@ 0x30
 800ece6:	b2da      	uxtb	r2, r3
 800ece8:	68bb      	ldr	r3, [r7, #8]
 800ecea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ecec:	68bb      	ldr	r3, [r7, #8]
 800ecee:	3301      	adds	r3, #1
 800ecf0:	223a      	movs	r2, #58	@ 0x3a
 800ecf2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ecf4:	68bb      	ldr	r3, [r7, #8]
 800ecf6:	3302      	adds	r3, #2
 800ecf8:	222f      	movs	r2, #47	@ 0x2f
 800ecfa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ecfc:	68bb      	ldr	r3, [r7, #8]
 800ecfe:	3303      	adds	r3, #3
 800ed00:	2200      	movs	r2, #0
 800ed02:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ed04:	2300      	movs	r3, #0
 800ed06:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ed08:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	371c      	adds	r7, #28
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bc80      	pop	{r7}
 800ed12:	4770      	bx	lr
 800ed14:	20003ba4 	.word	0x20003ba4

0800ed18 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b082      	sub	sp, #8
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
 800ed20:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ed22:	2200      	movs	r2, #0
 800ed24:	6839      	ldr	r1, [r7, #0]
 800ed26:	6878      	ldr	r0, [r7, #4]
 800ed28:	f7ff ffac 	bl	800ec84 <FATFS_LinkDriverEx>
 800ed2c:	4603      	mov	r3, r0
}
 800ed2e:	4618      	mov	r0, r3
 800ed30:	3708      	adds	r7, #8
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}
	...

0800ed38 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ed38:	b480      	push	{r7}
 800ed3a:	b085      	sub	sp, #20
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	4603      	mov	r3, r0
 800ed40:	6039      	str	r1, [r7, #0]
 800ed42:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ed44:	88fb      	ldrh	r3, [r7, #6]
 800ed46:	2b7f      	cmp	r3, #127	@ 0x7f
 800ed48:	d802      	bhi.n	800ed50 <ff_convert+0x18>
		c = chr;
 800ed4a:	88fb      	ldrh	r3, [r7, #6]
 800ed4c:	81fb      	strh	r3, [r7, #14]
 800ed4e:	e025      	b.n	800ed9c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ed50:	683b      	ldr	r3, [r7, #0]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d00b      	beq.n	800ed6e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ed56:	88fb      	ldrh	r3, [r7, #6]
 800ed58:	2bff      	cmp	r3, #255	@ 0xff
 800ed5a:	d805      	bhi.n	800ed68 <ff_convert+0x30>
 800ed5c:	88fb      	ldrh	r3, [r7, #6]
 800ed5e:	3b80      	subs	r3, #128	@ 0x80
 800ed60:	4a11      	ldr	r2, [pc, #68]	@ (800eda8 <ff_convert+0x70>)
 800ed62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed66:	e000      	b.n	800ed6a <ff_convert+0x32>
 800ed68:	2300      	movs	r3, #0
 800ed6a:	81fb      	strh	r3, [r7, #14]
 800ed6c:	e016      	b.n	800ed9c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ed6e:	2300      	movs	r3, #0
 800ed70:	81fb      	strh	r3, [r7, #14]
 800ed72:	e009      	b.n	800ed88 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ed74:	89fb      	ldrh	r3, [r7, #14]
 800ed76:	4a0c      	ldr	r2, [pc, #48]	@ (800eda8 <ff_convert+0x70>)
 800ed78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed7c:	88fa      	ldrh	r2, [r7, #6]
 800ed7e:	429a      	cmp	r2, r3
 800ed80:	d006      	beq.n	800ed90 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ed82:	89fb      	ldrh	r3, [r7, #14]
 800ed84:	3301      	adds	r3, #1
 800ed86:	81fb      	strh	r3, [r7, #14]
 800ed88:	89fb      	ldrh	r3, [r7, #14]
 800ed8a:	2b7f      	cmp	r3, #127	@ 0x7f
 800ed8c:	d9f2      	bls.n	800ed74 <ff_convert+0x3c>
 800ed8e:	e000      	b.n	800ed92 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ed90:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ed92:	89fb      	ldrh	r3, [r7, #14]
 800ed94:	3380      	adds	r3, #128	@ 0x80
 800ed96:	b29b      	uxth	r3, r3
 800ed98:	b2db      	uxtb	r3, r3
 800ed9a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ed9c:	89fb      	ldrh	r3, [r7, #14]
}
 800ed9e:	4618      	mov	r0, r3
 800eda0:	3714      	adds	r7, #20
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bc80      	pop	{r7}
 800eda6:	4770      	bx	lr
 800eda8:	0801475c 	.word	0x0801475c

0800edac <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800edac:	b480      	push	{r7}
 800edae:	b087      	sub	sp, #28
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	4603      	mov	r3, r0
 800edb4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800edb6:	88fb      	ldrh	r3, [r7, #6]
 800edb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800edbc:	d201      	bcs.n	800edc2 <ff_wtoupper+0x16>
 800edbe:	4b3d      	ldr	r3, [pc, #244]	@ (800eeb4 <ff_wtoupper+0x108>)
 800edc0:	e000      	b.n	800edc4 <ff_wtoupper+0x18>
 800edc2:	4b3d      	ldr	r3, [pc, #244]	@ (800eeb8 <ff_wtoupper+0x10c>)
 800edc4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800edc6:	697b      	ldr	r3, [r7, #20]
 800edc8:	1c9a      	adds	r2, r3, #2
 800edca:	617a      	str	r2, [r7, #20]
 800edcc:	881b      	ldrh	r3, [r3, #0]
 800edce:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800edd0:	8a7b      	ldrh	r3, [r7, #18]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d068      	beq.n	800eea8 <ff_wtoupper+0xfc>
 800edd6:	88fa      	ldrh	r2, [r7, #6]
 800edd8:	8a7b      	ldrh	r3, [r7, #18]
 800edda:	429a      	cmp	r2, r3
 800eddc:	d364      	bcc.n	800eea8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800edde:	697b      	ldr	r3, [r7, #20]
 800ede0:	1c9a      	adds	r2, r3, #2
 800ede2:	617a      	str	r2, [r7, #20]
 800ede4:	881b      	ldrh	r3, [r3, #0]
 800ede6:	823b      	strh	r3, [r7, #16]
 800ede8:	8a3b      	ldrh	r3, [r7, #16]
 800edea:	0a1b      	lsrs	r3, r3, #8
 800edec:	81fb      	strh	r3, [r7, #14]
 800edee:	8a3b      	ldrh	r3, [r7, #16]
 800edf0:	b2db      	uxtb	r3, r3
 800edf2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800edf4:	88fa      	ldrh	r2, [r7, #6]
 800edf6:	8a79      	ldrh	r1, [r7, #18]
 800edf8:	8a3b      	ldrh	r3, [r7, #16]
 800edfa:	440b      	add	r3, r1
 800edfc:	429a      	cmp	r2, r3
 800edfe:	da49      	bge.n	800ee94 <ff_wtoupper+0xe8>
			switch (cmd) {
 800ee00:	89fb      	ldrh	r3, [r7, #14]
 800ee02:	2b08      	cmp	r3, #8
 800ee04:	d84f      	bhi.n	800eea6 <ff_wtoupper+0xfa>
 800ee06:	a201      	add	r2, pc, #4	@ (adr r2, 800ee0c <ff_wtoupper+0x60>)
 800ee08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee0c:	0800ee31 	.word	0x0800ee31
 800ee10:	0800ee43 	.word	0x0800ee43
 800ee14:	0800ee59 	.word	0x0800ee59
 800ee18:	0800ee61 	.word	0x0800ee61
 800ee1c:	0800ee69 	.word	0x0800ee69
 800ee20:	0800ee71 	.word	0x0800ee71
 800ee24:	0800ee79 	.word	0x0800ee79
 800ee28:	0800ee81 	.word	0x0800ee81
 800ee2c:	0800ee89 	.word	0x0800ee89
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ee30:	88fa      	ldrh	r2, [r7, #6]
 800ee32:	8a7b      	ldrh	r3, [r7, #18]
 800ee34:	1ad3      	subs	r3, r2, r3
 800ee36:	005b      	lsls	r3, r3, #1
 800ee38:	697a      	ldr	r2, [r7, #20]
 800ee3a:	4413      	add	r3, r2
 800ee3c:	881b      	ldrh	r3, [r3, #0]
 800ee3e:	80fb      	strh	r3, [r7, #6]
 800ee40:	e027      	b.n	800ee92 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ee42:	88fa      	ldrh	r2, [r7, #6]
 800ee44:	8a7b      	ldrh	r3, [r7, #18]
 800ee46:	1ad3      	subs	r3, r2, r3
 800ee48:	b29b      	uxth	r3, r3
 800ee4a:	f003 0301 	and.w	r3, r3, #1
 800ee4e:	b29b      	uxth	r3, r3
 800ee50:	88fa      	ldrh	r2, [r7, #6]
 800ee52:	1ad3      	subs	r3, r2, r3
 800ee54:	80fb      	strh	r3, [r7, #6]
 800ee56:	e01c      	b.n	800ee92 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800ee58:	88fb      	ldrh	r3, [r7, #6]
 800ee5a:	3b10      	subs	r3, #16
 800ee5c:	80fb      	strh	r3, [r7, #6]
 800ee5e:	e018      	b.n	800ee92 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ee60:	88fb      	ldrh	r3, [r7, #6]
 800ee62:	3b20      	subs	r3, #32
 800ee64:	80fb      	strh	r3, [r7, #6]
 800ee66:	e014      	b.n	800ee92 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ee68:	88fb      	ldrh	r3, [r7, #6]
 800ee6a:	3b30      	subs	r3, #48	@ 0x30
 800ee6c:	80fb      	strh	r3, [r7, #6]
 800ee6e:	e010      	b.n	800ee92 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ee70:	88fb      	ldrh	r3, [r7, #6]
 800ee72:	3b1a      	subs	r3, #26
 800ee74:	80fb      	strh	r3, [r7, #6]
 800ee76:	e00c      	b.n	800ee92 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ee78:	88fb      	ldrh	r3, [r7, #6]
 800ee7a:	3308      	adds	r3, #8
 800ee7c:	80fb      	strh	r3, [r7, #6]
 800ee7e:	e008      	b.n	800ee92 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ee80:	88fb      	ldrh	r3, [r7, #6]
 800ee82:	3b50      	subs	r3, #80	@ 0x50
 800ee84:	80fb      	strh	r3, [r7, #6]
 800ee86:	e004      	b.n	800ee92 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ee88:	88fb      	ldrh	r3, [r7, #6]
 800ee8a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800ee8e:	80fb      	strh	r3, [r7, #6]
 800ee90:	bf00      	nop
			}
			break;
 800ee92:	e008      	b.n	800eea6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ee94:	89fb      	ldrh	r3, [r7, #14]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d195      	bne.n	800edc6 <ff_wtoupper+0x1a>
 800ee9a:	8a3b      	ldrh	r3, [r7, #16]
 800ee9c:	005b      	lsls	r3, r3, #1
 800ee9e:	697a      	ldr	r2, [r7, #20]
 800eea0:	4413      	add	r3, r2
 800eea2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800eea4:	e78f      	b.n	800edc6 <ff_wtoupper+0x1a>
			break;
 800eea6:	bf00      	nop
	}

	return chr;
 800eea8:	88fb      	ldrh	r3, [r7, #6]
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	371c      	adds	r7, #28
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bc80      	pop	{r7}
 800eeb2:	4770      	bx	lr
 800eeb4:	0801485c 	.word	0x0801485c
 800eeb8:	08014a50 	.word	0x08014a50

0800eebc <sulp>:
 800eebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eec0:	460f      	mov	r7, r1
 800eec2:	4690      	mov	r8, r2
 800eec4:	f003 fd0e 	bl	80128e4 <__ulp>
 800eec8:	4604      	mov	r4, r0
 800eeca:	460d      	mov	r5, r1
 800eecc:	f1b8 0f00 	cmp.w	r8, #0
 800eed0:	d011      	beq.n	800eef6 <sulp+0x3a>
 800eed2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800eed6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	dd0b      	ble.n	800eef6 <sulp+0x3a>
 800eede:	051b      	lsls	r3, r3, #20
 800eee0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800eee4:	2400      	movs	r4, #0
 800eee6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800eeea:	4622      	mov	r2, r4
 800eeec:	462b      	mov	r3, r5
 800eeee:	f7f1 fba3 	bl	8000638 <__aeabi_dmul>
 800eef2:	4604      	mov	r4, r0
 800eef4:	460d      	mov	r5, r1
 800eef6:	4620      	mov	r0, r4
 800eef8:	4629      	mov	r1, r5
 800eefa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800ef00 <_strtod_l>:
 800ef00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef04:	b09f      	sub	sp, #124	@ 0x7c
 800ef06:	460c      	mov	r4, r1
 800ef08:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	921a      	str	r2, [sp, #104]	@ 0x68
 800ef0e:	9005      	str	r0, [sp, #20]
 800ef10:	f04f 0a00 	mov.w	sl, #0
 800ef14:	f04f 0b00 	mov.w	fp, #0
 800ef18:	460a      	mov	r2, r1
 800ef1a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ef1c:	7811      	ldrb	r1, [r2, #0]
 800ef1e:	292b      	cmp	r1, #43	@ 0x2b
 800ef20:	d048      	beq.n	800efb4 <_strtod_l+0xb4>
 800ef22:	d836      	bhi.n	800ef92 <_strtod_l+0x92>
 800ef24:	290d      	cmp	r1, #13
 800ef26:	d830      	bhi.n	800ef8a <_strtod_l+0x8a>
 800ef28:	2908      	cmp	r1, #8
 800ef2a:	d830      	bhi.n	800ef8e <_strtod_l+0x8e>
 800ef2c:	2900      	cmp	r1, #0
 800ef2e:	d039      	beq.n	800efa4 <_strtod_l+0xa4>
 800ef30:	2200      	movs	r2, #0
 800ef32:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ef34:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ef36:	782a      	ldrb	r2, [r5, #0]
 800ef38:	2a30      	cmp	r2, #48	@ 0x30
 800ef3a:	f040 80b1 	bne.w	800f0a0 <_strtod_l+0x1a0>
 800ef3e:	786a      	ldrb	r2, [r5, #1]
 800ef40:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ef44:	2a58      	cmp	r2, #88	@ 0x58
 800ef46:	d16c      	bne.n	800f022 <_strtod_l+0x122>
 800ef48:	9302      	str	r3, [sp, #8]
 800ef4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ef4c:	9301      	str	r3, [sp, #4]
 800ef4e:	ab1a      	add	r3, sp, #104	@ 0x68
 800ef50:	9300      	str	r3, [sp, #0]
 800ef52:	4a8d      	ldr	r2, [pc, #564]	@ (800f188 <_strtod_l+0x288>)
 800ef54:	9805      	ldr	r0, [sp, #20]
 800ef56:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ef58:	a919      	add	r1, sp, #100	@ 0x64
 800ef5a:	f002 fdb7 	bl	8011acc <__gethex>
 800ef5e:	f010 060f 	ands.w	r6, r0, #15
 800ef62:	4604      	mov	r4, r0
 800ef64:	d005      	beq.n	800ef72 <_strtod_l+0x72>
 800ef66:	2e06      	cmp	r6, #6
 800ef68:	d126      	bne.n	800efb8 <_strtod_l+0xb8>
 800ef6a:	3501      	adds	r5, #1
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	9519      	str	r5, [sp, #100]	@ 0x64
 800ef70:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ef72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	f040 857e 	bne.w	800fa76 <_strtod_l+0xb76>
 800ef7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ef7c:	b1bb      	cbz	r3, 800efae <_strtod_l+0xae>
 800ef7e:	4650      	mov	r0, sl
 800ef80:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800ef84:	b01f      	add	sp, #124	@ 0x7c
 800ef86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef8a:	2920      	cmp	r1, #32
 800ef8c:	d1d0      	bne.n	800ef30 <_strtod_l+0x30>
 800ef8e:	3201      	adds	r2, #1
 800ef90:	e7c3      	b.n	800ef1a <_strtod_l+0x1a>
 800ef92:	292d      	cmp	r1, #45	@ 0x2d
 800ef94:	d1cc      	bne.n	800ef30 <_strtod_l+0x30>
 800ef96:	2101      	movs	r1, #1
 800ef98:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ef9a:	1c51      	adds	r1, r2, #1
 800ef9c:	9119      	str	r1, [sp, #100]	@ 0x64
 800ef9e:	7852      	ldrb	r2, [r2, #1]
 800efa0:	2a00      	cmp	r2, #0
 800efa2:	d1c7      	bne.n	800ef34 <_strtod_l+0x34>
 800efa4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800efa6:	9419      	str	r4, [sp, #100]	@ 0x64
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	f040 8562 	bne.w	800fa72 <_strtod_l+0xb72>
 800efae:	4650      	mov	r0, sl
 800efb0:	4659      	mov	r1, fp
 800efb2:	e7e7      	b.n	800ef84 <_strtod_l+0x84>
 800efb4:	2100      	movs	r1, #0
 800efb6:	e7ef      	b.n	800ef98 <_strtod_l+0x98>
 800efb8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800efba:	b13a      	cbz	r2, 800efcc <_strtod_l+0xcc>
 800efbc:	2135      	movs	r1, #53	@ 0x35
 800efbe:	a81c      	add	r0, sp, #112	@ 0x70
 800efc0:	f003 fd82 	bl	8012ac8 <__copybits>
 800efc4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800efc6:	9805      	ldr	r0, [sp, #20]
 800efc8:	f003 f95a 	bl	8012280 <_Bfree>
 800efcc:	3e01      	subs	r6, #1
 800efce:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800efd0:	2e04      	cmp	r6, #4
 800efd2:	d806      	bhi.n	800efe2 <_strtod_l+0xe2>
 800efd4:	e8df f006 	tbb	[pc, r6]
 800efd8:	201d0314 	.word	0x201d0314
 800efdc:	14          	.byte	0x14
 800efdd:	00          	.byte	0x00
 800efde:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800efe2:	05e1      	lsls	r1, r4, #23
 800efe4:	bf48      	it	mi
 800efe6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800efea:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800efee:	0d1b      	lsrs	r3, r3, #20
 800eff0:	051b      	lsls	r3, r3, #20
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d1bd      	bne.n	800ef72 <_strtod_l+0x72>
 800eff6:	f001 fe01 	bl	8010bfc <__errno>
 800effa:	2322      	movs	r3, #34	@ 0x22
 800effc:	6003      	str	r3, [r0, #0]
 800effe:	e7b8      	b.n	800ef72 <_strtod_l+0x72>
 800f000:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800f004:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f008:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800f00c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f010:	e7e7      	b.n	800efe2 <_strtod_l+0xe2>
 800f012:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800f18c <_strtod_l+0x28c>
 800f016:	e7e4      	b.n	800efe2 <_strtod_l+0xe2>
 800f018:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800f01c:	f04f 3aff 	mov.w	sl, #4294967295
 800f020:	e7df      	b.n	800efe2 <_strtod_l+0xe2>
 800f022:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f024:	1c5a      	adds	r2, r3, #1
 800f026:	9219      	str	r2, [sp, #100]	@ 0x64
 800f028:	785b      	ldrb	r3, [r3, #1]
 800f02a:	2b30      	cmp	r3, #48	@ 0x30
 800f02c:	d0f9      	beq.n	800f022 <_strtod_l+0x122>
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d09f      	beq.n	800ef72 <_strtod_l+0x72>
 800f032:	2301      	movs	r3, #1
 800f034:	9309      	str	r3, [sp, #36]	@ 0x24
 800f036:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f038:	930c      	str	r3, [sp, #48]	@ 0x30
 800f03a:	2300      	movs	r3, #0
 800f03c:	9308      	str	r3, [sp, #32]
 800f03e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f040:	461f      	mov	r7, r3
 800f042:	220a      	movs	r2, #10
 800f044:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800f046:	7805      	ldrb	r5, [r0, #0]
 800f048:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800f04c:	b2d9      	uxtb	r1, r3
 800f04e:	2909      	cmp	r1, #9
 800f050:	d928      	bls.n	800f0a4 <_strtod_l+0x1a4>
 800f052:	494f      	ldr	r1, [pc, #316]	@ (800f190 <_strtod_l+0x290>)
 800f054:	2201      	movs	r2, #1
 800f056:	f001 fd18 	bl	8010a8a <strncmp>
 800f05a:	2800      	cmp	r0, #0
 800f05c:	d032      	beq.n	800f0c4 <_strtod_l+0x1c4>
 800f05e:	2000      	movs	r0, #0
 800f060:	462a      	mov	r2, r5
 800f062:	4681      	mov	r9, r0
 800f064:	463d      	mov	r5, r7
 800f066:	4603      	mov	r3, r0
 800f068:	2a65      	cmp	r2, #101	@ 0x65
 800f06a:	d001      	beq.n	800f070 <_strtod_l+0x170>
 800f06c:	2a45      	cmp	r2, #69	@ 0x45
 800f06e:	d114      	bne.n	800f09a <_strtod_l+0x19a>
 800f070:	b91d      	cbnz	r5, 800f07a <_strtod_l+0x17a>
 800f072:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f074:	4302      	orrs	r2, r0
 800f076:	d095      	beq.n	800efa4 <_strtod_l+0xa4>
 800f078:	2500      	movs	r5, #0
 800f07a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800f07c:	1c62      	adds	r2, r4, #1
 800f07e:	9219      	str	r2, [sp, #100]	@ 0x64
 800f080:	7862      	ldrb	r2, [r4, #1]
 800f082:	2a2b      	cmp	r2, #43	@ 0x2b
 800f084:	d077      	beq.n	800f176 <_strtod_l+0x276>
 800f086:	2a2d      	cmp	r2, #45	@ 0x2d
 800f088:	d07b      	beq.n	800f182 <_strtod_l+0x282>
 800f08a:	f04f 0c00 	mov.w	ip, #0
 800f08e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800f092:	2909      	cmp	r1, #9
 800f094:	f240 8082 	bls.w	800f19c <_strtod_l+0x29c>
 800f098:	9419      	str	r4, [sp, #100]	@ 0x64
 800f09a:	f04f 0800 	mov.w	r8, #0
 800f09e:	e0a2      	b.n	800f1e6 <_strtod_l+0x2e6>
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	e7c7      	b.n	800f034 <_strtod_l+0x134>
 800f0a4:	2f08      	cmp	r7, #8
 800f0a6:	bfd5      	itete	le
 800f0a8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800f0aa:	9908      	ldrgt	r1, [sp, #32]
 800f0ac:	fb02 3301 	mlale	r3, r2, r1, r3
 800f0b0:	fb02 3301 	mlagt	r3, r2, r1, r3
 800f0b4:	f100 0001 	add.w	r0, r0, #1
 800f0b8:	bfd4      	ite	le
 800f0ba:	930a      	strle	r3, [sp, #40]	@ 0x28
 800f0bc:	9308      	strgt	r3, [sp, #32]
 800f0be:	3701      	adds	r7, #1
 800f0c0:	9019      	str	r0, [sp, #100]	@ 0x64
 800f0c2:	e7bf      	b.n	800f044 <_strtod_l+0x144>
 800f0c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f0c6:	1c5a      	adds	r2, r3, #1
 800f0c8:	9219      	str	r2, [sp, #100]	@ 0x64
 800f0ca:	785a      	ldrb	r2, [r3, #1]
 800f0cc:	b37f      	cbz	r7, 800f12e <_strtod_l+0x22e>
 800f0ce:	4681      	mov	r9, r0
 800f0d0:	463d      	mov	r5, r7
 800f0d2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800f0d6:	2b09      	cmp	r3, #9
 800f0d8:	d912      	bls.n	800f100 <_strtod_l+0x200>
 800f0da:	2301      	movs	r3, #1
 800f0dc:	e7c4      	b.n	800f068 <_strtod_l+0x168>
 800f0de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f0e0:	1c5a      	adds	r2, r3, #1
 800f0e2:	9219      	str	r2, [sp, #100]	@ 0x64
 800f0e4:	785a      	ldrb	r2, [r3, #1]
 800f0e6:	3001      	adds	r0, #1
 800f0e8:	2a30      	cmp	r2, #48	@ 0x30
 800f0ea:	d0f8      	beq.n	800f0de <_strtod_l+0x1de>
 800f0ec:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800f0f0:	2b08      	cmp	r3, #8
 800f0f2:	f200 84c5 	bhi.w	800fa80 <_strtod_l+0xb80>
 800f0f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f0f8:	930c      	str	r3, [sp, #48]	@ 0x30
 800f0fa:	4681      	mov	r9, r0
 800f0fc:	2000      	movs	r0, #0
 800f0fe:	4605      	mov	r5, r0
 800f100:	3a30      	subs	r2, #48	@ 0x30
 800f102:	f100 0301 	add.w	r3, r0, #1
 800f106:	d02a      	beq.n	800f15e <_strtod_l+0x25e>
 800f108:	4499      	add	r9, r3
 800f10a:	eb00 0c05 	add.w	ip, r0, r5
 800f10e:	462b      	mov	r3, r5
 800f110:	210a      	movs	r1, #10
 800f112:	4563      	cmp	r3, ip
 800f114:	d10d      	bne.n	800f132 <_strtod_l+0x232>
 800f116:	1c69      	adds	r1, r5, #1
 800f118:	4401      	add	r1, r0
 800f11a:	4428      	add	r0, r5
 800f11c:	2808      	cmp	r0, #8
 800f11e:	dc16      	bgt.n	800f14e <_strtod_l+0x24e>
 800f120:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f122:	230a      	movs	r3, #10
 800f124:	fb03 2300 	mla	r3, r3, r0, r2
 800f128:	930a      	str	r3, [sp, #40]	@ 0x28
 800f12a:	2300      	movs	r3, #0
 800f12c:	e018      	b.n	800f160 <_strtod_l+0x260>
 800f12e:	4638      	mov	r0, r7
 800f130:	e7da      	b.n	800f0e8 <_strtod_l+0x1e8>
 800f132:	2b08      	cmp	r3, #8
 800f134:	f103 0301 	add.w	r3, r3, #1
 800f138:	dc03      	bgt.n	800f142 <_strtod_l+0x242>
 800f13a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800f13c:	434e      	muls	r6, r1
 800f13e:	960a      	str	r6, [sp, #40]	@ 0x28
 800f140:	e7e7      	b.n	800f112 <_strtod_l+0x212>
 800f142:	2b10      	cmp	r3, #16
 800f144:	bfde      	ittt	le
 800f146:	9e08      	ldrle	r6, [sp, #32]
 800f148:	434e      	mulle	r6, r1
 800f14a:	9608      	strle	r6, [sp, #32]
 800f14c:	e7e1      	b.n	800f112 <_strtod_l+0x212>
 800f14e:	280f      	cmp	r0, #15
 800f150:	dceb      	bgt.n	800f12a <_strtod_l+0x22a>
 800f152:	9808      	ldr	r0, [sp, #32]
 800f154:	230a      	movs	r3, #10
 800f156:	fb03 2300 	mla	r3, r3, r0, r2
 800f15a:	9308      	str	r3, [sp, #32]
 800f15c:	e7e5      	b.n	800f12a <_strtod_l+0x22a>
 800f15e:	4629      	mov	r1, r5
 800f160:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f162:	1c50      	adds	r0, r2, #1
 800f164:	9019      	str	r0, [sp, #100]	@ 0x64
 800f166:	7852      	ldrb	r2, [r2, #1]
 800f168:	4618      	mov	r0, r3
 800f16a:	460d      	mov	r5, r1
 800f16c:	e7b1      	b.n	800f0d2 <_strtod_l+0x1d2>
 800f16e:	f04f 0900 	mov.w	r9, #0
 800f172:	2301      	movs	r3, #1
 800f174:	e77d      	b.n	800f072 <_strtod_l+0x172>
 800f176:	f04f 0c00 	mov.w	ip, #0
 800f17a:	1ca2      	adds	r2, r4, #2
 800f17c:	9219      	str	r2, [sp, #100]	@ 0x64
 800f17e:	78a2      	ldrb	r2, [r4, #2]
 800f180:	e785      	b.n	800f08e <_strtod_l+0x18e>
 800f182:	f04f 0c01 	mov.w	ip, #1
 800f186:	e7f8      	b.n	800f17a <_strtod_l+0x27a>
 800f188:	08014b24 	.word	0x08014b24
 800f18c:	7ff00000 	.word	0x7ff00000
 800f190:	08014b0c 	.word	0x08014b0c
 800f194:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f196:	1c51      	adds	r1, r2, #1
 800f198:	9119      	str	r1, [sp, #100]	@ 0x64
 800f19a:	7852      	ldrb	r2, [r2, #1]
 800f19c:	2a30      	cmp	r2, #48	@ 0x30
 800f19e:	d0f9      	beq.n	800f194 <_strtod_l+0x294>
 800f1a0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800f1a4:	2908      	cmp	r1, #8
 800f1a6:	f63f af78 	bhi.w	800f09a <_strtod_l+0x19a>
 800f1aa:	3a30      	subs	r2, #48	@ 0x30
 800f1ac:	920e      	str	r2, [sp, #56]	@ 0x38
 800f1ae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f1b0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800f1b2:	f04f 080a 	mov.w	r8, #10
 800f1b6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f1b8:	1c56      	adds	r6, r2, #1
 800f1ba:	9619      	str	r6, [sp, #100]	@ 0x64
 800f1bc:	7852      	ldrb	r2, [r2, #1]
 800f1be:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800f1c2:	f1be 0f09 	cmp.w	lr, #9
 800f1c6:	d939      	bls.n	800f23c <_strtod_l+0x33c>
 800f1c8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f1ca:	1a76      	subs	r6, r6, r1
 800f1cc:	2e08      	cmp	r6, #8
 800f1ce:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800f1d2:	dc03      	bgt.n	800f1dc <_strtod_l+0x2dc>
 800f1d4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f1d6:	4588      	cmp	r8, r1
 800f1d8:	bfa8      	it	ge
 800f1da:	4688      	movge	r8, r1
 800f1dc:	f1bc 0f00 	cmp.w	ip, #0
 800f1e0:	d001      	beq.n	800f1e6 <_strtod_l+0x2e6>
 800f1e2:	f1c8 0800 	rsb	r8, r8, #0
 800f1e6:	2d00      	cmp	r5, #0
 800f1e8:	d14e      	bne.n	800f288 <_strtod_l+0x388>
 800f1ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f1ec:	4308      	orrs	r0, r1
 800f1ee:	f47f aec0 	bne.w	800ef72 <_strtod_l+0x72>
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	f47f aed6 	bne.w	800efa4 <_strtod_l+0xa4>
 800f1f8:	2a69      	cmp	r2, #105	@ 0x69
 800f1fa:	d028      	beq.n	800f24e <_strtod_l+0x34e>
 800f1fc:	dc25      	bgt.n	800f24a <_strtod_l+0x34a>
 800f1fe:	2a49      	cmp	r2, #73	@ 0x49
 800f200:	d025      	beq.n	800f24e <_strtod_l+0x34e>
 800f202:	2a4e      	cmp	r2, #78	@ 0x4e
 800f204:	f47f aece 	bne.w	800efa4 <_strtod_l+0xa4>
 800f208:	499a      	ldr	r1, [pc, #616]	@ (800f474 <_strtod_l+0x574>)
 800f20a:	a819      	add	r0, sp, #100	@ 0x64
 800f20c:	f002 fe80 	bl	8011f10 <__match>
 800f210:	2800      	cmp	r0, #0
 800f212:	f43f aec7 	beq.w	800efa4 <_strtod_l+0xa4>
 800f216:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f218:	781b      	ldrb	r3, [r3, #0]
 800f21a:	2b28      	cmp	r3, #40	@ 0x28
 800f21c:	d12e      	bne.n	800f27c <_strtod_l+0x37c>
 800f21e:	4996      	ldr	r1, [pc, #600]	@ (800f478 <_strtod_l+0x578>)
 800f220:	aa1c      	add	r2, sp, #112	@ 0x70
 800f222:	a819      	add	r0, sp, #100	@ 0x64
 800f224:	f002 fe88 	bl	8011f38 <__hexnan>
 800f228:	2805      	cmp	r0, #5
 800f22a:	d127      	bne.n	800f27c <_strtod_l+0x37c>
 800f22c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f22e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800f232:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800f236:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f23a:	e69a      	b.n	800ef72 <_strtod_l+0x72>
 800f23c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f23e:	fb08 2101 	mla	r1, r8, r1, r2
 800f242:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800f246:	920e      	str	r2, [sp, #56]	@ 0x38
 800f248:	e7b5      	b.n	800f1b6 <_strtod_l+0x2b6>
 800f24a:	2a6e      	cmp	r2, #110	@ 0x6e
 800f24c:	e7da      	b.n	800f204 <_strtod_l+0x304>
 800f24e:	498b      	ldr	r1, [pc, #556]	@ (800f47c <_strtod_l+0x57c>)
 800f250:	a819      	add	r0, sp, #100	@ 0x64
 800f252:	f002 fe5d 	bl	8011f10 <__match>
 800f256:	2800      	cmp	r0, #0
 800f258:	f43f aea4 	beq.w	800efa4 <_strtod_l+0xa4>
 800f25c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f25e:	4988      	ldr	r1, [pc, #544]	@ (800f480 <_strtod_l+0x580>)
 800f260:	3b01      	subs	r3, #1
 800f262:	a819      	add	r0, sp, #100	@ 0x64
 800f264:	9319      	str	r3, [sp, #100]	@ 0x64
 800f266:	f002 fe53 	bl	8011f10 <__match>
 800f26a:	b910      	cbnz	r0, 800f272 <_strtod_l+0x372>
 800f26c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f26e:	3301      	adds	r3, #1
 800f270:	9319      	str	r3, [sp, #100]	@ 0x64
 800f272:	f8df b210 	ldr.w	fp, [pc, #528]	@ 800f484 <_strtod_l+0x584>
 800f276:	f04f 0a00 	mov.w	sl, #0
 800f27a:	e67a      	b.n	800ef72 <_strtod_l+0x72>
 800f27c:	4882      	ldr	r0, [pc, #520]	@ (800f488 <_strtod_l+0x588>)
 800f27e:	f001 fcf9 	bl	8010c74 <nan>
 800f282:	4682      	mov	sl, r0
 800f284:	468b      	mov	fp, r1
 800f286:	e674      	b.n	800ef72 <_strtod_l+0x72>
 800f288:	eba8 0309 	sub.w	r3, r8, r9
 800f28c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f28e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f290:	2f00      	cmp	r7, #0
 800f292:	bf08      	it	eq
 800f294:	462f      	moveq	r7, r5
 800f296:	2d10      	cmp	r5, #16
 800f298:	462c      	mov	r4, r5
 800f29a:	bfa8      	it	ge
 800f29c:	2410      	movge	r4, #16
 800f29e:	f7f1 f951 	bl	8000544 <__aeabi_ui2d>
 800f2a2:	2d09      	cmp	r5, #9
 800f2a4:	4682      	mov	sl, r0
 800f2a6:	468b      	mov	fp, r1
 800f2a8:	dc11      	bgt.n	800f2ce <_strtod_l+0x3ce>
 800f2aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	f43f ae60 	beq.w	800ef72 <_strtod_l+0x72>
 800f2b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2b4:	dd76      	ble.n	800f3a4 <_strtod_l+0x4a4>
 800f2b6:	2b16      	cmp	r3, #22
 800f2b8:	dc5d      	bgt.n	800f376 <_strtod_l+0x476>
 800f2ba:	4974      	ldr	r1, [pc, #464]	@ (800f48c <_strtod_l+0x58c>)
 800f2bc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f2c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2c4:	4652      	mov	r2, sl
 800f2c6:	465b      	mov	r3, fp
 800f2c8:	f7f1 f9b6 	bl	8000638 <__aeabi_dmul>
 800f2cc:	e7d9      	b.n	800f282 <_strtod_l+0x382>
 800f2ce:	4b6f      	ldr	r3, [pc, #444]	@ (800f48c <_strtod_l+0x58c>)
 800f2d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f2d4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800f2d8:	f7f1 f9ae 	bl	8000638 <__aeabi_dmul>
 800f2dc:	4682      	mov	sl, r0
 800f2de:	9808      	ldr	r0, [sp, #32]
 800f2e0:	468b      	mov	fp, r1
 800f2e2:	f7f1 f92f 	bl	8000544 <__aeabi_ui2d>
 800f2e6:	4602      	mov	r2, r0
 800f2e8:	460b      	mov	r3, r1
 800f2ea:	4650      	mov	r0, sl
 800f2ec:	4659      	mov	r1, fp
 800f2ee:	f7f0 ffed 	bl	80002cc <__adddf3>
 800f2f2:	2d0f      	cmp	r5, #15
 800f2f4:	4682      	mov	sl, r0
 800f2f6:	468b      	mov	fp, r1
 800f2f8:	ddd7      	ble.n	800f2aa <_strtod_l+0x3aa>
 800f2fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2fc:	1b2c      	subs	r4, r5, r4
 800f2fe:	441c      	add	r4, r3
 800f300:	2c00      	cmp	r4, #0
 800f302:	f340 8096 	ble.w	800f432 <_strtod_l+0x532>
 800f306:	f014 030f 	ands.w	r3, r4, #15
 800f30a:	d00a      	beq.n	800f322 <_strtod_l+0x422>
 800f30c:	495f      	ldr	r1, [pc, #380]	@ (800f48c <_strtod_l+0x58c>)
 800f30e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f312:	4652      	mov	r2, sl
 800f314:	465b      	mov	r3, fp
 800f316:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f31a:	f7f1 f98d 	bl	8000638 <__aeabi_dmul>
 800f31e:	4682      	mov	sl, r0
 800f320:	468b      	mov	fp, r1
 800f322:	f034 040f 	bics.w	r4, r4, #15
 800f326:	d073      	beq.n	800f410 <_strtod_l+0x510>
 800f328:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800f32c:	dd48      	ble.n	800f3c0 <_strtod_l+0x4c0>
 800f32e:	2400      	movs	r4, #0
 800f330:	46a0      	mov	r8, r4
 800f332:	940a      	str	r4, [sp, #40]	@ 0x28
 800f334:	46a1      	mov	r9, r4
 800f336:	9a05      	ldr	r2, [sp, #20]
 800f338:	f8df b148 	ldr.w	fp, [pc, #328]	@ 800f484 <_strtod_l+0x584>
 800f33c:	2322      	movs	r3, #34	@ 0x22
 800f33e:	6013      	str	r3, [r2, #0]
 800f340:	f04f 0a00 	mov.w	sl, #0
 800f344:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f346:	2b00      	cmp	r3, #0
 800f348:	f43f ae13 	beq.w	800ef72 <_strtod_l+0x72>
 800f34c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f34e:	9805      	ldr	r0, [sp, #20]
 800f350:	f002 ff96 	bl	8012280 <_Bfree>
 800f354:	9805      	ldr	r0, [sp, #20]
 800f356:	4649      	mov	r1, r9
 800f358:	f002 ff92 	bl	8012280 <_Bfree>
 800f35c:	9805      	ldr	r0, [sp, #20]
 800f35e:	4641      	mov	r1, r8
 800f360:	f002 ff8e 	bl	8012280 <_Bfree>
 800f364:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f366:	9805      	ldr	r0, [sp, #20]
 800f368:	f002 ff8a 	bl	8012280 <_Bfree>
 800f36c:	9805      	ldr	r0, [sp, #20]
 800f36e:	4621      	mov	r1, r4
 800f370:	f002 ff86 	bl	8012280 <_Bfree>
 800f374:	e5fd      	b.n	800ef72 <_strtod_l+0x72>
 800f376:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f378:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800f37c:	4293      	cmp	r3, r2
 800f37e:	dbbc      	blt.n	800f2fa <_strtod_l+0x3fa>
 800f380:	4c42      	ldr	r4, [pc, #264]	@ (800f48c <_strtod_l+0x58c>)
 800f382:	f1c5 050f 	rsb	r5, r5, #15
 800f386:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f38a:	4652      	mov	r2, sl
 800f38c:	465b      	mov	r3, fp
 800f38e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f392:	f7f1 f951 	bl	8000638 <__aeabi_dmul>
 800f396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f398:	1b5d      	subs	r5, r3, r5
 800f39a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f39e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f3a2:	e791      	b.n	800f2c8 <_strtod_l+0x3c8>
 800f3a4:	3316      	adds	r3, #22
 800f3a6:	dba8      	blt.n	800f2fa <_strtod_l+0x3fa>
 800f3a8:	4b38      	ldr	r3, [pc, #224]	@ (800f48c <_strtod_l+0x58c>)
 800f3aa:	eba9 0808 	sub.w	r8, r9, r8
 800f3ae:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800f3b2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f3b6:	4650      	mov	r0, sl
 800f3b8:	4659      	mov	r1, fp
 800f3ba:	f7f1 fa67 	bl	800088c <__aeabi_ddiv>
 800f3be:	e760      	b.n	800f282 <_strtod_l+0x382>
 800f3c0:	4b33      	ldr	r3, [pc, #204]	@ (800f490 <_strtod_l+0x590>)
 800f3c2:	9308      	str	r3, [sp, #32]
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	1124      	asrs	r4, r4, #4
 800f3c8:	4650      	mov	r0, sl
 800f3ca:	4659      	mov	r1, fp
 800f3cc:	461e      	mov	r6, r3
 800f3ce:	2c01      	cmp	r4, #1
 800f3d0:	dc21      	bgt.n	800f416 <_strtod_l+0x516>
 800f3d2:	b10b      	cbz	r3, 800f3d8 <_strtod_l+0x4d8>
 800f3d4:	4682      	mov	sl, r0
 800f3d6:	468b      	mov	fp, r1
 800f3d8:	492d      	ldr	r1, [pc, #180]	@ (800f490 <_strtod_l+0x590>)
 800f3da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f3de:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f3e2:	4652      	mov	r2, sl
 800f3e4:	465b      	mov	r3, fp
 800f3e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3ea:	f7f1 f925 	bl	8000638 <__aeabi_dmul>
 800f3ee:	4b25      	ldr	r3, [pc, #148]	@ (800f484 <_strtod_l+0x584>)
 800f3f0:	460a      	mov	r2, r1
 800f3f2:	400b      	ands	r3, r1
 800f3f4:	4927      	ldr	r1, [pc, #156]	@ (800f494 <_strtod_l+0x594>)
 800f3f6:	428b      	cmp	r3, r1
 800f3f8:	4682      	mov	sl, r0
 800f3fa:	d898      	bhi.n	800f32e <_strtod_l+0x42e>
 800f3fc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f400:	428b      	cmp	r3, r1
 800f402:	bf86      	itte	hi
 800f404:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800f498 <_strtod_l+0x598>
 800f408:	f04f 3aff 	movhi.w	sl, #4294967295
 800f40c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f410:	2300      	movs	r3, #0
 800f412:	9308      	str	r3, [sp, #32]
 800f414:	e07a      	b.n	800f50c <_strtod_l+0x60c>
 800f416:	07e2      	lsls	r2, r4, #31
 800f418:	d505      	bpl.n	800f426 <_strtod_l+0x526>
 800f41a:	9b08      	ldr	r3, [sp, #32]
 800f41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f420:	f7f1 f90a 	bl	8000638 <__aeabi_dmul>
 800f424:	2301      	movs	r3, #1
 800f426:	9a08      	ldr	r2, [sp, #32]
 800f428:	3208      	adds	r2, #8
 800f42a:	3601      	adds	r6, #1
 800f42c:	1064      	asrs	r4, r4, #1
 800f42e:	9208      	str	r2, [sp, #32]
 800f430:	e7cd      	b.n	800f3ce <_strtod_l+0x4ce>
 800f432:	d0ed      	beq.n	800f410 <_strtod_l+0x510>
 800f434:	4264      	negs	r4, r4
 800f436:	f014 020f 	ands.w	r2, r4, #15
 800f43a:	d00a      	beq.n	800f452 <_strtod_l+0x552>
 800f43c:	4b13      	ldr	r3, [pc, #76]	@ (800f48c <_strtod_l+0x58c>)
 800f43e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f442:	4650      	mov	r0, sl
 800f444:	4659      	mov	r1, fp
 800f446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f44a:	f7f1 fa1f 	bl	800088c <__aeabi_ddiv>
 800f44e:	4682      	mov	sl, r0
 800f450:	468b      	mov	fp, r1
 800f452:	1124      	asrs	r4, r4, #4
 800f454:	d0dc      	beq.n	800f410 <_strtod_l+0x510>
 800f456:	2c1f      	cmp	r4, #31
 800f458:	dd20      	ble.n	800f49c <_strtod_l+0x59c>
 800f45a:	2400      	movs	r4, #0
 800f45c:	46a0      	mov	r8, r4
 800f45e:	940a      	str	r4, [sp, #40]	@ 0x28
 800f460:	46a1      	mov	r9, r4
 800f462:	9a05      	ldr	r2, [sp, #20]
 800f464:	2322      	movs	r3, #34	@ 0x22
 800f466:	f04f 0a00 	mov.w	sl, #0
 800f46a:	f04f 0b00 	mov.w	fp, #0
 800f46e:	6013      	str	r3, [r2, #0]
 800f470:	e768      	b.n	800f344 <_strtod_l+0x444>
 800f472:	bf00      	nop
 800f474:	08014b6d 	.word	0x08014b6d
 800f478:	08014b10 	.word	0x08014b10
 800f47c:	08014b65 	.word	0x08014b65
 800f480:	08014c51 	.word	0x08014c51
 800f484:	7ff00000 	.word	0x7ff00000
 800f488:	08014c4d 	.word	0x08014c4d
 800f48c:	08014db8 	.word	0x08014db8
 800f490:	08014d90 	.word	0x08014d90
 800f494:	7ca00000 	.word	0x7ca00000
 800f498:	7fefffff 	.word	0x7fefffff
 800f49c:	f014 0310 	ands.w	r3, r4, #16
 800f4a0:	bf18      	it	ne
 800f4a2:	236a      	movne	r3, #106	@ 0x6a
 800f4a4:	4e77      	ldr	r6, [pc, #476]	@ (800f684 <_strtod_l+0x784>)
 800f4a6:	9308      	str	r3, [sp, #32]
 800f4a8:	4650      	mov	r0, sl
 800f4aa:	4659      	mov	r1, fp
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	07e2      	lsls	r2, r4, #31
 800f4b0:	d504      	bpl.n	800f4bc <_strtod_l+0x5bc>
 800f4b2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f4b6:	f7f1 f8bf 	bl	8000638 <__aeabi_dmul>
 800f4ba:	2301      	movs	r3, #1
 800f4bc:	1064      	asrs	r4, r4, #1
 800f4be:	f106 0608 	add.w	r6, r6, #8
 800f4c2:	d1f4      	bne.n	800f4ae <_strtod_l+0x5ae>
 800f4c4:	b10b      	cbz	r3, 800f4ca <_strtod_l+0x5ca>
 800f4c6:	4682      	mov	sl, r0
 800f4c8:	468b      	mov	fp, r1
 800f4ca:	9b08      	ldr	r3, [sp, #32]
 800f4cc:	b1b3      	cbz	r3, 800f4fc <_strtod_l+0x5fc>
 800f4ce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f4d2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	4659      	mov	r1, fp
 800f4da:	dd0f      	ble.n	800f4fc <_strtod_l+0x5fc>
 800f4dc:	2b1f      	cmp	r3, #31
 800f4de:	dd57      	ble.n	800f590 <_strtod_l+0x690>
 800f4e0:	2b34      	cmp	r3, #52	@ 0x34
 800f4e2:	bfde      	ittt	le
 800f4e4:	f04f 33ff 	movle.w	r3, #4294967295
 800f4e8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f4ec:	4093      	lslle	r3, r2
 800f4ee:	f04f 0a00 	mov.w	sl, #0
 800f4f2:	bfcc      	ite	gt
 800f4f4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f4f8:	ea03 0b01 	andle.w	fp, r3, r1
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	2300      	movs	r3, #0
 800f500:	4650      	mov	r0, sl
 800f502:	4659      	mov	r1, fp
 800f504:	f7f1 fb00 	bl	8000b08 <__aeabi_dcmpeq>
 800f508:	2800      	cmp	r0, #0
 800f50a:	d1a6      	bne.n	800f45a <_strtod_l+0x55a>
 800f50c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f50e:	9300      	str	r3, [sp, #0]
 800f510:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f512:	9805      	ldr	r0, [sp, #20]
 800f514:	462b      	mov	r3, r5
 800f516:	463a      	mov	r2, r7
 800f518:	f002 ff1a 	bl	8012350 <__s2b>
 800f51c:	900a      	str	r0, [sp, #40]	@ 0x28
 800f51e:	2800      	cmp	r0, #0
 800f520:	f43f af05 	beq.w	800f32e <_strtod_l+0x42e>
 800f524:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f526:	2a00      	cmp	r2, #0
 800f528:	eba9 0308 	sub.w	r3, r9, r8
 800f52c:	bfa8      	it	ge
 800f52e:	2300      	movge	r3, #0
 800f530:	9312      	str	r3, [sp, #72]	@ 0x48
 800f532:	2400      	movs	r4, #0
 800f534:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f538:	9316      	str	r3, [sp, #88]	@ 0x58
 800f53a:	46a0      	mov	r8, r4
 800f53c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f53e:	9805      	ldr	r0, [sp, #20]
 800f540:	6859      	ldr	r1, [r3, #4]
 800f542:	f002 fe5d 	bl	8012200 <_Balloc>
 800f546:	4681      	mov	r9, r0
 800f548:	2800      	cmp	r0, #0
 800f54a:	f43f aef4 	beq.w	800f336 <_strtod_l+0x436>
 800f54e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f550:	691a      	ldr	r2, [r3, #16]
 800f552:	3202      	adds	r2, #2
 800f554:	f103 010c 	add.w	r1, r3, #12
 800f558:	0092      	lsls	r2, r2, #2
 800f55a:	300c      	adds	r0, #12
 800f55c:	f001 fb7b 	bl	8010c56 <memcpy>
 800f560:	ab1c      	add	r3, sp, #112	@ 0x70
 800f562:	9301      	str	r3, [sp, #4]
 800f564:	ab1b      	add	r3, sp, #108	@ 0x6c
 800f566:	9300      	str	r3, [sp, #0]
 800f568:	9805      	ldr	r0, [sp, #20]
 800f56a:	4652      	mov	r2, sl
 800f56c:	465b      	mov	r3, fp
 800f56e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f572:	f003 fa21 	bl	80129b8 <__d2b>
 800f576:	901a      	str	r0, [sp, #104]	@ 0x68
 800f578:	2800      	cmp	r0, #0
 800f57a:	f43f aedc 	beq.w	800f336 <_strtod_l+0x436>
 800f57e:	9805      	ldr	r0, [sp, #20]
 800f580:	2101      	movs	r1, #1
 800f582:	f002 ff7b 	bl	801247c <__i2b>
 800f586:	4680      	mov	r8, r0
 800f588:	b948      	cbnz	r0, 800f59e <_strtod_l+0x69e>
 800f58a:	f04f 0800 	mov.w	r8, #0
 800f58e:	e6d2      	b.n	800f336 <_strtod_l+0x436>
 800f590:	f04f 32ff 	mov.w	r2, #4294967295
 800f594:	fa02 f303 	lsl.w	r3, r2, r3
 800f598:	ea03 0a0a 	and.w	sl, r3, sl
 800f59c:	e7ae      	b.n	800f4fc <_strtod_l+0x5fc>
 800f59e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f5a0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f5a2:	2d00      	cmp	r5, #0
 800f5a4:	bfab      	itete	ge
 800f5a6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f5a8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f5aa:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f5ac:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f5ae:	bfac      	ite	ge
 800f5b0:	18ef      	addge	r7, r5, r3
 800f5b2:	1b5e      	sublt	r6, r3, r5
 800f5b4:	9b08      	ldr	r3, [sp, #32]
 800f5b6:	1aed      	subs	r5, r5, r3
 800f5b8:	4415      	add	r5, r2
 800f5ba:	4b33      	ldr	r3, [pc, #204]	@ (800f688 <_strtod_l+0x788>)
 800f5bc:	3d01      	subs	r5, #1
 800f5be:	429d      	cmp	r5, r3
 800f5c0:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f5c4:	da50      	bge.n	800f668 <_strtod_l+0x768>
 800f5c6:	1b5b      	subs	r3, r3, r5
 800f5c8:	2b1f      	cmp	r3, #31
 800f5ca:	eba2 0203 	sub.w	r2, r2, r3
 800f5ce:	f04f 0101 	mov.w	r1, #1
 800f5d2:	dc3d      	bgt.n	800f650 <_strtod_l+0x750>
 800f5d4:	fa01 f303 	lsl.w	r3, r1, r3
 800f5d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f5da:	2300      	movs	r3, #0
 800f5dc:	9310      	str	r3, [sp, #64]	@ 0x40
 800f5de:	18bd      	adds	r5, r7, r2
 800f5e0:	9b08      	ldr	r3, [sp, #32]
 800f5e2:	42af      	cmp	r7, r5
 800f5e4:	4416      	add	r6, r2
 800f5e6:	441e      	add	r6, r3
 800f5e8:	463b      	mov	r3, r7
 800f5ea:	bfa8      	it	ge
 800f5ec:	462b      	movge	r3, r5
 800f5ee:	42b3      	cmp	r3, r6
 800f5f0:	bfa8      	it	ge
 800f5f2:	4633      	movge	r3, r6
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	bfc2      	ittt	gt
 800f5f8:	1aed      	subgt	r5, r5, r3
 800f5fa:	1af6      	subgt	r6, r6, r3
 800f5fc:	1aff      	subgt	r7, r7, r3
 800f5fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f600:	2b00      	cmp	r3, #0
 800f602:	dd16      	ble.n	800f632 <_strtod_l+0x732>
 800f604:	4641      	mov	r1, r8
 800f606:	9805      	ldr	r0, [sp, #20]
 800f608:	461a      	mov	r2, r3
 800f60a:	f002 fff7 	bl	80125fc <__pow5mult>
 800f60e:	4680      	mov	r8, r0
 800f610:	2800      	cmp	r0, #0
 800f612:	d0ba      	beq.n	800f58a <_strtod_l+0x68a>
 800f614:	4601      	mov	r1, r0
 800f616:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f618:	9805      	ldr	r0, [sp, #20]
 800f61a:	f002 ff45 	bl	80124a8 <__multiply>
 800f61e:	900e      	str	r0, [sp, #56]	@ 0x38
 800f620:	2800      	cmp	r0, #0
 800f622:	f43f ae88 	beq.w	800f336 <_strtod_l+0x436>
 800f626:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f628:	9805      	ldr	r0, [sp, #20]
 800f62a:	f002 fe29 	bl	8012280 <_Bfree>
 800f62e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f630:	931a      	str	r3, [sp, #104]	@ 0x68
 800f632:	2d00      	cmp	r5, #0
 800f634:	dc1d      	bgt.n	800f672 <_strtod_l+0x772>
 800f636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f638:	2b00      	cmp	r3, #0
 800f63a:	dd27      	ble.n	800f68c <_strtod_l+0x78c>
 800f63c:	4649      	mov	r1, r9
 800f63e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f640:	9805      	ldr	r0, [sp, #20]
 800f642:	f002 ffdb 	bl	80125fc <__pow5mult>
 800f646:	4681      	mov	r9, r0
 800f648:	bb00      	cbnz	r0, 800f68c <_strtod_l+0x78c>
 800f64a:	f04f 0900 	mov.w	r9, #0
 800f64e:	e672      	b.n	800f336 <_strtod_l+0x436>
 800f650:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f654:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f658:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f65c:	35e2      	adds	r5, #226	@ 0xe2
 800f65e:	fa01 f305 	lsl.w	r3, r1, r5
 800f662:	9310      	str	r3, [sp, #64]	@ 0x40
 800f664:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f666:	e7ba      	b.n	800f5de <_strtod_l+0x6de>
 800f668:	2300      	movs	r3, #0
 800f66a:	9310      	str	r3, [sp, #64]	@ 0x40
 800f66c:	2301      	movs	r3, #1
 800f66e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f670:	e7b5      	b.n	800f5de <_strtod_l+0x6de>
 800f672:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f674:	9805      	ldr	r0, [sp, #20]
 800f676:	462a      	mov	r2, r5
 800f678:	f003 f81a 	bl	80126b0 <__lshift>
 800f67c:	901a      	str	r0, [sp, #104]	@ 0x68
 800f67e:	2800      	cmp	r0, #0
 800f680:	d1d9      	bne.n	800f636 <_strtod_l+0x736>
 800f682:	e658      	b.n	800f336 <_strtod_l+0x436>
 800f684:	08014b38 	.word	0x08014b38
 800f688:	fffffc02 	.word	0xfffffc02
 800f68c:	2e00      	cmp	r6, #0
 800f68e:	dd07      	ble.n	800f6a0 <_strtod_l+0x7a0>
 800f690:	4649      	mov	r1, r9
 800f692:	9805      	ldr	r0, [sp, #20]
 800f694:	4632      	mov	r2, r6
 800f696:	f003 f80b 	bl	80126b0 <__lshift>
 800f69a:	4681      	mov	r9, r0
 800f69c:	2800      	cmp	r0, #0
 800f69e:	d0d4      	beq.n	800f64a <_strtod_l+0x74a>
 800f6a0:	2f00      	cmp	r7, #0
 800f6a2:	dd08      	ble.n	800f6b6 <_strtod_l+0x7b6>
 800f6a4:	4641      	mov	r1, r8
 800f6a6:	9805      	ldr	r0, [sp, #20]
 800f6a8:	463a      	mov	r2, r7
 800f6aa:	f003 f801 	bl	80126b0 <__lshift>
 800f6ae:	4680      	mov	r8, r0
 800f6b0:	2800      	cmp	r0, #0
 800f6b2:	f43f ae40 	beq.w	800f336 <_strtod_l+0x436>
 800f6b6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f6b8:	9805      	ldr	r0, [sp, #20]
 800f6ba:	464a      	mov	r2, r9
 800f6bc:	f003 f880 	bl	80127c0 <__mdiff>
 800f6c0:	4604      	mov	r4, r0
 800f6c2:	2800      	cmp	r0, #0
 800f6c4:	f43f ae37 	beq.w	800f336 <_strtod_l+0x436>
 800f6c8:	68c3      	ldr	r3, [r0, #12]
 800f6ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	60c3      	str	r3, [r0, #12]
 800f6d0:	4641      	mov	r1, r8
 800f6d2:	f003 f859 	bl	8012788 <__mcmp>
 800f6d6:	2800      	cmp	r0, #0
 800f6d8:	da3d      	bge.n	800f756 <_strtod_l+0x856>
 800f6da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f6dc:	ea53 030a 	orrs.w	r3, r3, sl
 800f6e0:	d163      	bne.n	800f7aa <_strtod_l+0x8aa>
 800f6e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d15f      	bne.n	800f7aa <_strtod_l+0x8aa>
 800f6ea:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f6ee:	0d1b      	lsrs	r3, r3, #20
 800f6f0:	051b      	lsls	r3, r3, #20
 800f6f2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f6f6:	d958      	bls.n	800f7aa <_strtod_l+0x8aa>
 800f6f8:	6963      	ldr	r3, [r4, #20]
 800f6fa:	b913      	cbnz	r3, 800f702 <_strtod_l+0x802>
 800f6fc:	6923      	ldr	r3, [r4, #16]
 800f6fe:	2b01      	cmp	r3, #1
 800f700:	dd53      	ble.n	800f7aa <_strtod_l+0x8aa>
 800f702:	4621      	mov	r1, r4
 800f704:	2201      	movs	r2, #1
 800f706:	9805      	ldr	r0, [sp, #20]
 800f708:	f002 ffd2 	bl	80126b0 <__lshift>
 800f70c:	4641      	mov	r1, r8
 800f70e:	4604      	mov	r4, r0
 800f710:	f003 f83a 	bl	8012788 <__mcmp>
 800f714:	2800      	cmp	r0, #0
 800f716:	dd48      	ble.n	800f7aa <_strtod_l+0x8aa>
 800f718:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f71c:	9a08      	ldr	r2, [sp, #32]
 800f71e:	0d1b      	lsrs	r3, r3, #20
 800f720:	051b      	lsls	r3, r3, #20
 800f722:	2a00      	cmp	r2, #0
 800f724:	d062      	beq.n	800f7ec <_strtod_l+0x8ec>
 800f726:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f72a:	d85f      	bhi.n	800f7ec <_strtod_l+0x8ec>
 800f72c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f730:	f67f ae97 	bls.w	800f462 <_strtod_l+0x562>
 800f734:	4ba4      	ldr	r3, [pc, #656]	@ (800f9c8 <_strtod_l+0xac8>)
 800f736:	4650      	mov	r0, sl
 800f738:	4659      	mov	r1, fp
 800f73a:	2200      	movs	r2, #0
 800f73c:	f7f0 ff7c 	bl	8000638 <__aeabi_dmul>
 800f740:	4ba2      	ldr	r3, [pc, #648]	@ (800f9cc <_strtod_l+0xacc>)
 800f742:	400b      	ands	r3, r1
 800f744:	4682      	mov	sl, r0
 800f746:	468b      	mov	fp, r1
 800f748:	2b00      	cmp	r3, #0
 800f74a:	f47f adff 	bne.w	800f34c <_strtod_l+0x44c>
 800f74e:	9a05      	ldr	r2, [sp, #20]
 800f750:	2322      	movs	r3, #34	@ 0x22
 800f752:	6013      	str	r3, [r2, #0]
 800f754:	e5fa      	b.n	800f34c <_strtod_l+0x44c>
 800f756:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f75a:	d165      	bne.n	800f828 <_strtod_l+0x928>
 800f75c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f75e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f762:	b35a      	cbz	r2, 800f7bc <_strtod_l+0x8bc>
 800f764:	4a9a      	ldr	r2, [pc, #616]	@ (800f9d0 <_strtod_l+0xad0>)
 800f766:	4293      	cmp	r3, r2
 800f768:	d12b      	bne.n	800f7c2 <_strtod_l+0x8c2>
 800f76a:	9b08      	ldr	r3, [sp, #32]
 800f76c:	4651      	mov	r1, sl
 800f76e:	b303      	cbz	r3, 800f7b2 <_strtod_l+0x8b2>
 800f770:	4b96      	ldr	r3, [pc, #600]	@ (800f9cc <_strtod_l+0xacc>)
 800f772:	465a      	mov	r2, fp
 800f774:	4013      	ands	r3, r2
 800f776:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f77a:	f04f 32ff 	mov.w	r2, #4294967295
 800f77e:	d81b      	bhi.n	800f7b8 <_strtod_l+0x8b8>
 800f780:	0d1b      	lsrs	r3, r3, #20
 800f782:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f786:	fa02 f303 	lsl.w	r3, r2, r3
 800f78a:	4299      	cmp	r1, r3
 800f78c:	d119      	bne.n	800f7c2 <_strtod_l+0x8c2>
 800f78e:	4b91      	ldr	r3, [pc, #580]	@ (800f9d4 <_strtod_l+0xad4>)
 800f790:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f792:	429a      	cmp	r2, r3
 800f794:	d102      	bne.n	800f79c <_strtod_l+0x89c>
 800f796:	3101      	adds	r1, #1
 800f798:	f43f adcd 	beq.w	800f336 <_strtod_l+0x436>
 800f79c:	4b8b      	ldr	r3, [pc, #556]	@ (800f9cc <_strtod_l+0xacc>)
 800f79e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f7a0:	401a      	ands	r2, r3
 800f7a2:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f7a6:	f04f 0a00 	mov.w	sl, #0
 800f7aa:	9b08      	ldr	r3, [sp, #32]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d1c1      	bne.n	800f734 <_strtod_l+0x834>
 800f7b0:	e5cc      	b.n	800f34c <_strtod_l+0x44c>
 800f7b2:	f04f 33ff 	mov.w	r3, #4294967295
 800f7b6:	e7e8      	b.n	800f78a <_strtod_l+0x88a>
 800f7b8:	4613      	mov	r3, r2
 800f7ba:	e7e6      	b.n	800f78a <_strtod_l+0x88a>
 800f7bc:	ea53 030a 	orrs.w	r3, r3, sl
 800f7c0:	d0aa      	beq.n	800f718 <_strtod_l+0x818>
 800f7c2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f7c4:	b1db      	cbz	r3, 800f7fe <_strtod_l+0x8fe>
 800f7c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f7c8:	4213      	tst	r3, r2
 800f7ca:	d0ee      	beq.n	800f7aa <_strtod_l+0x8aa>
 800f7cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7ce:	9a08      	ldr	r2, [sp, #32]
 800f7d0:	4650      	mov	r0, sl
 800f7d2:	4659      	mov	r1, fp
 800f7d4:	b1bb      	cbz	r3, 800f806 <_strtod_l+0x906>
 800f7d6:	f7ff fb71 	bl	800eebc <sulp>
 800f7da:	4602      	mov	r2, r0
 800f7dc:	460b      	mov	r3, r1
 800f7de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f7e2:	f7f0 fd73 	bl	80002cc <__adddf3>
 800f7e6:	4682      	mov	sl, r0
 800f7e8:	468b      	mov	fp, r1
 800f7ea:	e7de      	b.n	800f7aa <_strtod_l+0x8aa>
 800f7ec:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f7f0:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f7f4:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f7f8:	f04f 3aff 	mov.w	sl, #4294967295
 800f7fc:	e7d5      	b.n	800f7aa <_strtod_l+0x8aa>
 800f7fe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f800:	ea13 0f0a 	tst.w	r3, sl
 800f804:	e7e1      	b.n	800f7ca <_strtod_l+0x8ca>
 800f806:	f7ff fb59 	bl	800eebc <sulp>
 800f80a:	4602      	mov	r2, r0
 800f80c:	460b      	mov	r3, r1
 800f80e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f812:	f7f0 fd59 	bl	80002c8 <__aeabi_dsub>
 800f816:	2200      	movs	r2, #0
 800f818:	2300      	movs	r3, #0
 800f81a:	4682      	mov	sl, r0
 800f81c:	468b      	mov	fp, r1
 800f81e:	f7f1 f973 	bl	8000b08 <__aeabi_dcmpeq>
 800f822:	2800      	cmp	r0, #0
 800f824:	d0c1      	beq.n	800f7aa <_strtod_l+0x8aa>
 800f826:	e61c      	b.n	800f462 <_strtod_l+0x562>
 800f828:	4641      	mov	r1, r8
 800f82a:	4620      	mov	r0, r4
 800f82c:	f003 f91c 	bl	8012a68 <__ratio>
 800f830:	2200      	movs	r2, #0
 800f832:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f836:	4606      	mov	r6, r0
 800f838:	460f      	mov	r7, r1
 800f83a:	f7f1 f979 	bl	8000b30 <__aeabi_dcmple>
 800f83e:	2800      	cmp	r0, #0
 800f840:	d06d      	beq.n	800f91e <_strtod_l+0xa1e>
 800f842:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f844:	2b00      	cmp	r3, #0
 800f846:	d178      	bne.n	800f93a <_strtod_l+0xa3a>
 800f848:	f1ba 0f00 	cmp.w	sl, #0
 800f84c:	d156      	bne.n	800f8fc <_strtod_l+0x9fc>
 800f84e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f850:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f854:	2b00      	cmp	r3, #0
 800f856:	d158      	bne.n	800f90a <_strtod_l+0xa0a>
 800f858:	4b5f      	ldr	r3, [pc, #380]	@ (800f9d8 <_strtod_l+0xad8>)
 800f85a:	2200      	movs	r2, #0
 800f85c:	4630      	mov	r0, r6
 800f85e:	4639      	mov	r1, r7
 800f860:	f7f1 f95c 	bl	8000b1c <__aeabi_dcmplt>
 800f864:	2800      	cmp	r0, #0
 800f866:	d157      	bne.n	800f918 <_strtod_l+0xa18>
 800f868:	4630      	mov	r0, r6
 800f86a:	4639      	mov	r1, r7
 800f86c:	4b5b      	ldr	r3, [pc, #364]	@ (800f9dc <_strtod_l+0xadc>)
 800f86e:	2200      	movs	r2, #0
 800f870:	f7f0 fee2 	bl	8000638 <__aeabi_dmul>
 800f874:	4606      	mov	r6, r0
 800f876:	460f      	mov	r7, r1
 800f878:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f87c:	9606      	str	r6, [sp, #24]
 800f87e:	9307      	str	r3, [sp, #28]
 800f880:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f884:	4d51      	ldr	r5, [pc, #324]	@ (800f9cc <_strtod_l+0xacc>)
 800f886:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f88a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f88c:	401d      	ands	r5, r3
 800f88e:	4b54      	ldr	r3, [pc, #336]	@ (800f9e0 <_strtod_l+0xae0>)
 800f890:	429d      	cmp	r5, r3
 800f892:	f040 80ab 	bne.w	800f9ec <_strtod_l+0xaec>
 800f896:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f898:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f89c:	4650      	mov	r0, sl
 800f89e:	4659      	mov	r1, fp
 800f8a0:	f003 f820 	bl	80128e4 <__ulp>
 800f8a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f8a8:	f7f0 fec6 	bl	8000638 <__aeabi_dmul>
 800f8ac:	4652      	mov	r2, sl
 800f8ae:	465b      	mov	r3, fp
 800f8b0:	f7f0 fd0c 	bl	80002cc <__adddf3>
 800f8b4:	460b      	mov	r3, r1
 800f8b6:	4945      	ldr	r1, [pc, #276]	@ (800f9cc <_strtod_l+0xacc>)
 800f8b8:	4a4a      	ldr	r2, [pc, #296]	@ (800f9e4 <_strtod_l+0xae4>)
 800f8ba:	4019      	ands	r1, r3
 800f8bc:	4291      	cmp	r1, r2
 800f8be:	4682      	mov	sl, r0
 800f8c0:	d942      	bls.n	800f948 <_strtod_l+0xa48>
 800f8c2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f8c4:	4b43      	ldr	r3, [pc, #268]	@ (800f9d4 <_strtod_l+0xad4>)
 800f8c6:	429a      	cmp	r2, r3
 800f8c8:	d103      	bne.n	800f8d2 <_strtod_l+0x9d2>
 800f8ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f8cc:	3301      	adds	r3, #1
 800f8ce:	f43f ad32 	beq.w	800f336 <_strtod_l+0x436>
 800f8d2:	f8df b100 	ldr.w	fp, [pc, #256]	@ 800f9d4 <_strtod_l+0xad4>
 800f8d6:	f04f 3aff 	mov.w	sl, #4294967295
 800f8da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f8dc:	9805      	ldr	r0, [sp, #20]
 800f8de:	f002 fccf 	bl	8012280 <_Bfree>
 800f8e2:	9805      	ldr	r0, [sp, #20]
 800f8e4:	4649      	mov	r1, r9
 800f8e6:	f002 fccb 	bl	8012280 <_Bfree>
 800f8ea:	9805      	ldr	r0, [sp, #20]
 800f8ec:	4641      	mov	r1, r8
 800f8ee:	f002 fcc7 	bl	8012280 <_Bfree>
 800f8f2:	9805      	ldr	r0, [sp, #20]
 800f8f4:	4621      	mov	r1, r4
 800f8f6:	f002 fcc3 	bl	8012280 <_Bfree>
 800f8fa:	e61f      	b.n	800f53c <_strtod_l+0x63c>
 800f8fc:	f1ba 0f01 	cmp.w	sl, #1
 800f900:	d103      	bne.n	800f90a <_strtod_l+0xa0a>
 800f902:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f904:	2b00      	cmp	r3, #0
 800f906:	f43f adac 	beq.w	800f462 <_strtod_l+0x562>
 800f90a:	4b37      	ldr	r3, [pc, #220]	@ (800f9e8 <_strtod_l+0xae8>)
 800f90c:	4f32      	ldr	r7, [pc, #200]	@ (800f9d8 <_strtod_l+0xad8>)
 800f90e:	2200      	movs	r2, #0
 800f910:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f914:	2600      	movs	r6, #0
 800f916:	e7b3      	b.n	800f880 <_strtod_l+0x980>
 800f918:	4f30      	ldr	r7, [pc, #192]	@ (800f9dc <_strtod_l+0xadc>)
 800f91a:	2600      	movs	r6, #0
 800f91c:	e7ac      	b.n	800f878 <_strtod_l+0x978>
 800f91e:	4b2f      	ldr	r3, [pc, #188]	@ (800f9dc <_strtod_l+0xadc>)
 800f920:	4630      	mov	r0, r6
 800f922:	4639      	mov	r1, r7
 800f924:	2200      	movs	r2, #0
 800f926:	f7f0 fe87 	bl	8000638 <__aeabi_dmul>
 800f92a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f92c:	4606      	mov	r6, r0
 800f92e:	460f      	mov	r7, r1
 800f930:	2b00      	cmp	r3, #0
 800f932:	d0a1      	beq.n	800f878 <_strtod_l+0x978>
 800f934:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f938:	e7a2      	b.n	800f880 <_strtod_l+0x980>
 800f93a:	4b27      	ldr	r3, [pc, #156]	@ (800f9d8 <_strtod_l+0xad8>)
 800f93c:	2200      	movs	r2, #0
 800f93e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f942:	4616      	mov	r6, r2
 800f944:	461f      	mov	r7, r3
 800f946:	e79b      	b.n	800f880 <_strtod_l+0x980>
 800f948:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f94c:	9b08      	ldr	r3, [sp, #32]
 800f94e:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f952:	2b00      	cmp	r3, #0
 800f954:	d1c1      	bne.n	800f8da <_strtod_l+0x9da>
 800f956:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f95a:	0d1b      	lsrs	r3, r3, #20
 800f95c:	051b      	lsls	r3, r3, #20
 800f95e:	429d      	cmp	r5, r3
 800f960:	d1bb      	bne.n	800f8da <_strtod_l+0x9da>
 800f962:	4630      	mov	r0, r6
 800f964:	4639      	mov	r1, r7
 800f966:	f7f1 fcd7 	bl	8001318 <__aeabi_d2lz>
 800f96a:	f7f0 fe37 	bl	80005dc <__aeabi_l2d>
 800f96e:	4602      	mov	r2, r0
 800f970:	460b      	mov	r3, r1
 800f972:	4630      	mov	r0, r6
 800f974:	4639      	mov	r1, r7
 800f976:	f7f0 fca7 	bl	80002c8 <__aeabi_dsub>
 800f97a:	460b      	mov	r3, r1
 800f97c:	4602      	mov	r2, r0
 800f97e:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f982:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f986:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f988:	ea46 060a 	orr.w	r6, r6, sl
 800f98c:	431e      	orrs	r6, r3
 800f98e:	d06a      	beq.n	800fa66 <_strtod_l+0xb66>
 800f990:	a309      	add	r3, pc, #36	@ (adr r3, 800f9b8 <_strtod_l+0xab8>)
 800f992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f996:	f7f1 f8c1 	bl	8000b1c <__aeabi_dcmplt>
 800f99a:	2800      	cmp	r0, #0
 800f99c:	f47f acd6 	bne.w	800f34c <_strtod_l+0x44c>
 800f9a0:	a307      	add	r3, pc, #28	@ (adr r3, 800f9c0 <_strtod_l+0xac0>)
 800f9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f9aa:	f7f1 f8d5 	bl	8000b58 <__aeabi_dcmpgt>
 800f9ae:	2800      	cmp	r0, #0
 800f9b0:	d093      	beq.n	800f8da <_strtod_l+0x9da>
 800f9b2:	e4cb      	b.n	800f34c <_strtod_l+0x44c>
 800f9b4:	f3af 8000 	nop.w
 800f9b8:	94a03595 	.word	0x94a03595
 800f9bc:	3fdfffff 	.word	0x3fdfffff
 800f9c0:	35afe535 	.word	0x35afe535
 800f9c4:	3fe00000 	.word	0x3fe00000
 800f9c8:	39500000 	.word	0x39500000
 800f9cc:	7ff00000 	.word	0x7ff00000
 800f9d0:	000fffff 	.word	0x000fffff
 800f9d4:	7fefffff 	.word	0x7fefffff
 800f9d8:	3ff00000 	.word	0x3ff00000
 800f9dc:	3fe00000 	.word	0x3fe00000
 800f9e0:	7fe00000 	.word	0x7fe00000
 800f9e4:	7c9fffff 	.word	0x7c9fffff
 800f9e8:	bff00000 	.word	0xbff00000
 800f9ec:	9b08      	ldr	r3, [sp, #32]
 800f9ee:	b323      	cbz	r3, 800fa3a <_strtod_l+0xb3a>
 800f9f0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f9f4:	d821      	bhi.n	800fa3a <_strtod_l+0xb3a>
 800f9f6:	a328      	add	r3, pc, #160	@ (adr r3, 800fa98 <_strtod_l+0xb98>)
 800f9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9fc:	4630      	mov	r0, r6
 800f9fe:	4639      	mov	r1, r7
 800fa00:	f7f1 f896 	bl	8000b30 <__aeabi_dcmple>
 800fa04:	b1a0      	cbz	r0, 800fa30 <_strtod_l+0xb30>
 800fa06:	4639      	mov	r1, r7
 800fa08:	4630      	mov	r0, r6
 800fa0a:	f7f1 f8ed 	bl	8000be8 <__aeabi_d2uiz>
 800fa0e:	2801      	cmp	r0, #1
 800fa10:	bf38      	it	cc
 800fa12:	2001      	movcc	r0, #1
 800fa14:	f7f0 fd96 	bl	8000544 <__aeabi_ui2d>
 800fa18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fa1a:	4606      	mov	r6, r0
 800fa1c:	460f      	mov	r7, r1
 800fa1e:	b9fb      	cbnz	r3, 800fa60 <_strtod_l+0xb60>
 800fa20:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fa24:	9014      	str	r0, [sp, #80]	@ 0x50
 800fa26:	9315      	str	r3, [sp, #84]	@ 0x54
 800fa28:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800fa2c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800fa30:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800fa32:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800fa36:	1b5b      	subs	r3, r3, r5
 800fa38:	9311      	str	r3, [sp, #68]	@ 0x44
 800fa3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fa3e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800fa42:	f002 ff4f 	bl	80128e4 <__ulp>
 800fa46:	4602      	mov	r2, r0
 800fa48:	460b      	mov	r3, r1
 800fa4a:	4650      	mov	r0, sl
 800fa4c:	4659      	mov	r1, fp
 800fa4e:	f7f0 fdf3 	bl	8000638 <__aeabi_dmul>
 800fa52:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800fa56:	f7f0 fc39 	bl	80002cc <__adddf3>
 800fa5a:	4682      	mov	sl, r0
 800fa5c:	468b      	mov	fp, r1
 800fa5e:	e775      	b.n	800f94c <_strtod_l+0xa4c>
 800fa60:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800fa64:	e7e0      	b.n	800fa28 <_strtod_l+0xb28>
 800fa66:	a30e      	add	r3, pc, #56	@ (adr r3, 800faa0 <_strtod_l+0xba0>)
 800fa68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa6c:	f7f1 f856 	bl	8000b1c <__aeabi_dcmplt>
 800fa70:	e79d      	b.n	800f9ae <_strtod_l+0xaae>
 800fa72:	2300      	movs	r3, #0
 800fa74:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fa76:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800fa78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fa7a:	6013      	str	r3, [r2, #0]
 800fa7c:	f7ff ba7d 	b.w	800ef7a <_strtod_l+0x7a>
 800fa80:	2a65      	cmp	r2, #101	@ 0x65
 800fa82:	f43f ab74 	beq.w	800f16e <_strtod_l+0x26e>
 800fa86:	2a45      	cmp	r2, #69	@ 0x45
 800fa88:	f43f ab71 	beq.w	800f16e <_strtod_l+0x26e>
 800fa8c:	2301      	movs	r3, #1
 800fa8e:	f7ff bbac 	b.w	800f1ea <_strtod_l+0x2ea>
 800fa92:	bf00      	nop
 800fa94:	f3af 8000 	nop.w
 800fa98:	ffc00000 	.word	0xffc00000
 800fa9c:	41dfffff 	.word	0x41dfffff
 800faa0:	94a03595 	.word	0x94a03595
 800faa4:	3fcfffff 	.word	0x3fcfffff

0800faa8 <_strtod_r>:
 800faa8:	4b01      	ldr	r3, [pc, #4]	@ (800fab0 <_strtod_r+0x8>)
 800faaa:	f7ff ba29 	b.w	800ef00 <_strtod_l>
 800faae:	bf00      	nop
 800fab0:	2000002c 	.word	0x2000002c

0800fab4 <strtof>:
 800fab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fab8:	4d24      	ldr	r5, [pc, #144]	@ (800fb4c <strtof+0x98>)
 800faba:	4b25      	ldr	r3, [pc, #148]	@ (800fb50 <strtof+0x9c>)
 800fabc:	460a      	mov	r2, r1
 800fabe:	4601      	mov	r1, r0
 800fac0:	6828      	ldr	r0, [r5, #0]
 800fac2:	f7ff fa1d 	bl	800ef00 <_strtod_l>
 800fac6:	4602      	mov	r2, r0
 800fac8:	460b      	mov	r3, r1
 800faca:	4606      	mov	r6, r0
 800facc:	460f      	mov	r7, r1
 800face:	f7f1 f84d 	bl	8000b6c <__aeabi_dcmpun>
 800fad2:	b168      	cbz	r0, 800faf0 <strtof+0x3c>
 800fad4:	2f00      	cmp	r7, #0
 800fad6:	481f      	ldr	r0, [pc, #124]	@ (800fb54 <strtof+0xa0>)
 800fad8:	da06      	bge.n	800fae8 <strtof+0x34>
 800fada:	f001 f8d1 	bl	8010c80 <nanf>
 800fade:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800fae2:	4620      	mov	r0, r4
 800fae4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fae8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800faec:	f001 b8c8 	b.w	8010c80 <nanf>
 800faf0:	4639      	mov	r1, r7
 800faf2:	4630      	mov	r0, r6
 800faf4:	f7f1 f898 	bl	8000c28 <__aeabi_d2f>
 800faf8:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800fafc:	4604      	mov	r4, r0
 800fafe:	4916      	ldr	r1, [pc, #88]	@ (800fb58 <strtof+0xa4>)
 800fb00:	4640      	mov	r0, r8
 800fb02:	f7f1 fbb5 	bl	8001270 <__aeabi_fcmpun>
 800fb06:	b9b0      	cbnz	r0, 800fb36 <strtof+0x82>
 800fb08:	4913      	ldr	r1, [pc, #76]	@ (800fb58 <strtof+0xa4>)
 800fb0a:	4640      	mov	r0, r8
 800fb0c:	f7f1 fb92 	bl	8001234 <__aeabi_fcmple>
 800fb10:	b988      	cbnz	r0, 800fb36 <strtof+0x82>
 800fb12:	f027 4900 	bic.w	r9, r7, #2147483648	@ 0x80000000
 800fb16:	4b11      	ldr	r3, [pc, #68]	@ (800fb5c <strtof+0xa8>)
 800fb18:	f04f 32ff 	mov.w	r2, #4294967295
 800fb1c:	4630      	mov	r0, r6
 800fb1e:	4649      	mov	r1, r9
 800fb20:	f7f1 f824 	bl	8000b6c <__aeabi_dcmpun>
 800fb24:	b970      	cbnz	r0, 800fb44 <strtof+0x90>
 800fb26:	4b0d      	ldr	r3, [pc, #52]	@ (800fb5c <strtof+0xa8>)
 800fb28:	f04f 32ff 	mov.w	r2, #4294967295
 800fb2c:	4630      	mov	r0, r6
 800fb2e:	4649      	mov	r1, r9
 800fb30:	f7f0 fffe 	bl	8000b30 <__aeabi_dcmple>
 800fb34:	b930      	cbnz	r0, 800fb44 <strtof+0x90>
 800fb36:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800fb3a:	d1d2      	bne.n	800fae2 <strtof+0x2e>
 800fb3c:	4b08      	ldr	r3, [pc, #32]	@ (800fb60 <strtof+0xac>)
 800fb3e:	403b      	ands	r3, r7
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d0ce      	beq.n	800fae2 <strtof+0x2e>
 800fb44:	682b      	ldr	r3, [r5, #0]
 800fb46:	2222      	movs	r2, #34	@ 0x22
 800fb48:	601a      	str	r2, [r3, #0]
 800fb4a:	e7ca      	b.n	800fae2 <strtof+0x2e>
 800fb4c:	20000198 	.word	0x20000198
 800fb50:	2000002c 	.word	0x2000002c
 800fb54:	08014c4d 	.word	0x08014c4d
 800fb58:	7f7fffff 	.word	0x7f7fffff
 800fb5c:	7fefffff 	.word	0x7fefffff
 800fb60:	7ff00000 	.word	0x7ff00000

0800fb64 <__cvt>:
 800fb64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb68:	b088      	sub	sp, #32
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	461d      	mov	r5, r3
 800fb6e:	4614      	mov	r4, r2
 800fb70:	bfbc      	itt	lt
 800fb72:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800fb76:	4614      	movlt	r4, r2
 800fb78:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800fb7a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800fb7c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800fb80:	bfb6      	itet	lt
 800fb82:	461d      	movlt	r5, r3
 800fb84:	2300      	movge	r3, #0
 800fb86:	232d      	movlt	r3, #45	@ 0x2d
 800fb88:	7013      	strb	r3, [r2, #0]
 800fb8a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fb8c:	f023 0820 	bic.w	r8, r3, #32
 800fb90:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fb94:	d005      	beq.n	800fba2 <__cvt+0x3e>
 800fb96:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800fb9a:	d100      	bne.n	800fb9e <__cvt+0x3a>
 800fb9c:	3601      	adds	r6, #1
 800fb9e:	2302      	movs	r3, #2
 800fba0:	e000      	b.n	800fba4 <__cvt+0x40>
 800fba2:	2303      	movs	r3, #3
 800fba4:	aa07      	add	r2, sp, #28
 800fba6:	9204      	str	r2, [sp, #16]
 800fba8:	aa06      	add	r2, sp, #24
 800fbaa:	e9cd a202 	strd	sl, r2, [sp, #8]
 800fbae:	e9cd 3600 	strd	r3, r6, [sp]
 800fbb2:	4622      	mov	r2, r4
 800fbb4:	462b      	mov	r3, r5
 800fbb6:	f001 f90f 	bl	8010dd8 <_dtoa_r>
 800fbba:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800fbbe:	4607      	mov	r7, r0
 800fbc0:	d119      	bne.n	800fbf6 <__cvt+0x92>
 800fbc2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800fbc4:	07db      	lsls	r3, r3, #31
 800fbc6:	d50e      	bpl.n	800fbe6 <__cvt+0x82>
 800fbc8:	eb00 0906 	add.w	r9, r0, r6
 800fbcc:	2200      	movs	r2, #0
 800fbce:	2300      	movs	r3, #0
 800fbd0:	4620      	mov	r0, r4
 800fbd2:	4629      	mov	r1, r5
 800fbd4:	f7f0 ff98 	bl	8000b08 <__aeabi_dcmpeq>
 800fbd8:	b108      	cbz	r0, 800fbde <__cvt+0x7a>
 800fbda:	f8cd 901c 	str.w	r9, [sp, #28]
 800fbde:	2230      	movs	r2, #48	@ 0x30
 800fbe0:	9b07      	ldr	r3, [sp, #28]
 800fbe2:	454b      	cmp	r3, r9
 800fbe4:	d31e      	bcc.n	800fc24 <__cvt+0xc0>
 800fbe6:	9b07      	ldr	r3, [sp, #28]
 800fbe8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800fbea:	1bdb      	subs	r3, r3, r7
 800fbec:	4638      	mov	r0, r7
 800fbee:	6013      	str	r3, [r2, #0]
 800fbf0:	b008      	add	sp, #32
 800fbf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbf6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fbfa:	eb00 0906 	add.w	r9, r0, r6
 800fbfe:	d1e5      	bne.n	800fbcc <__cvt+0x68>
 800fc00:	7803      	ldrb	r3, [r0, #0]
 800fc02:	2b30      	cmp	r3, #48	@ 0x30
 800fc04:	d10a      	bne.n	800fc1c <__cvt+0xb8>
 800fc06:	2200      	movs	r2, #0
 800fc08:	2300      	movs	r3, #0
 800fc0a:	4620      	mov	r0, r4
 800fc0c:	4629      	mov	r1, r5
 800fc0e:	f7f0 ff7b 	bl	8000b08 <__aeabi_dcmpeq>
 800fc12:	b918      	cbnz	r0, 800fc1c <__cvt+0xb8>
 800fc14:	f1c6 0601 	rsb	r6, r6, #1
 800fc18:	f8ca 6000 	str.w	r6, [sl]
 800fc1c:	f8da 3000 	ldr.w	r3, [sl]
 800fc20:	4499      	add	r9, r3
 800fc22:	e7d3      	b.n	800fbcc <__cvt+0x68>
 800fc24:	1c59      	adds	r1, r3, #1
 800fc26:	9107      	str	r1, [sp, #28]
 800fc28:	701a      	strb	r2, [r3, #0]
 800fc2a:	e7d9      	b.n	800fbe0 <__cvt+0x7c>

0800fc2c <__exponent>:
 800fc2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc2e:	2900      	cmp	r1, #0
 800fc30:	bfba      	itte	lt
 800fc32:	4249      	neglt	r1, r1
 800fc34:	232d      	movlt	r3, #45	@ 0x2d
 800fc36:	232b      	movge	r3, #43	@ 0x2b
 800fc38:	2909      	cmp	r1, #9
 800fc3a:	7002      	strb	r2, [r0, #0]
 800fc3c:	7043      	strb	r3, [r0, #1]
 800fc3e:	dd29      	ble.n	800fc94 <__exponent+0x68>
 800fc40:	f10d 0307 	add.w	r3, sp, #7
 800fc44:	461d      	mov	r5, r3
 800fc46:	270a      	movs	r7, #10
 800fc48:	461a      	mov	r2, r3
 800fc4a:	fbb1 f6f7 	udiv	r6, r1, r7
 800fc4e:	fb07 1416 	mls	r4, r7, r6, r1
 800fc52:	3430      	adds	r4, #48	@ 0x30
 800fc54:	f802 4c01 	strb.w	r4, [r2, #-1]
 800fc58:	460c      	mov	r4, r1
 800fc5a:	2c63      	cmp	r4, #99	@ 0x63
 800fc5c:	f103 33ff 	add.w	r3, r3, #4294967295
 800fc60:	4631      	mov	r1, r6
 800fc62:	dcf1      	bgt.n	800fc48 <__exponent+0x1c>
 800fc64:	3130      	adds	r1, #48	@ 0x30
 800fc66:	1e94      	subs	r4, r2, #2
 800fc68:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fc6c:	1c41      	adds	r1, r0, #1
 800fc6e:	4623      	mov	r3, r4
 800fc70:	42ab      	cmp	r3, r5
 800fc72:	d30a      	bcc.n	800fc8a <__exponent+0x5e>
 800fc74:	f10d 0309 	add.w	r3, sp, #9
 800fc78:	1a9b      	subs	r3, r3, r2
 800fc7a:	42ac      	cmp	r4, r5
 800fc7c:	bf88      	it	hi
 800fc7e:	2300      	movhi	r3, #0
 800fc80:	3302      	adds	r3, #2
 800fc82:	4403      	add	r3, r0
 800fc84:	1a18      	subs	r0, r3, r0
 800fc86:	b003      	add	sp, #12
 800fc88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc8a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800fc8e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800fc92:	e7ed      	b.n	800fc70 <__exponent+0x44>
 800fc94:	2330      	movs	r3, #48	@ 0x30
 800fc96:	3130      	adds	r1, #48	@ 0x30
 800fc98:	7083      	strb	r3, [r0, #2]
 800fc9a:	70c1      	strb	r1, [r0, #3]
 800fc9c:	1d03      	adds	r3, r0, #4
 800fc9e:	e7f1      	b.n	800fc84 <__exponent+0x58>

0800fca0 <_printf_float>:
 800fca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fca4:	b091      	sub	sp, #68	@ 0x44
 800fca6:	460c      	mov	r4, r1
 800fca8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800fcac:	4616      	mov	r6, r2
 800fcae:	461f      	mov	r7, r3
 800fcb0:	4605      	mov	r5, r0
 800fcb2:	f000 ff59 	bl	8010b68 <_localeconv_r>
 800fcb6:	6803      	ldr	r3, [r0, #0]
 800fcb8:	9308      	str	r3, [sp, #32]
 800fcba:	4618      	mov	r0, r3
 800fcbc:	f7f0 faf8 	bl	80002b0 <strlen>
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	930e      	str	r3, [sp, #56]	@ 0x38
 800fcc4:	f8d8 3000 	ldr.w	r3, [r8]
 800fcc8:	9009      	str	r0, [sp, #36]	@ 0x24
 800fcca:	3307      	adds	r3, #7
 800fccc:	f023 0307 	bic.w	r3, r3, #7
 800fcd0:	f103 0208 	add.w	r2, r3, #8
 800fcd4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800fcd8:	f8d4 b000 	ldr.w	fp, [r4]
 800fcdc:	f8c8 2000 	str.w	r2, [r8]
 800fce0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fce4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800fce8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fcea:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800fcee:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800fcf2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fcf6:	4b9d      	ldr	r3, [pc, #628]	@ (800ff6c <_printf_float+0x2cc>)
 800fcf8:	f04f 32ff 	mov.w	r2, #4294967295
 800fcfc:	f7f0 ff36 	bl	8000b6c <__aeabi_dcmpun>
 800fd00:	bb70      	cbnz	r0, 800fd60 <_printf_float+0xc0>
 800fd02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fd06:	4b99      	ldr	r3, [pc, #612]	@ (800ff6c <_printf_float+0x2cc>)
 800fd08:	f04f 32ff 	mov.w	r2, #4294967295
 800fd0c:	f7f0 ff10 	bl	8000b30 <__aeabi_dcmple>
 800fd10:	bb30      	cbnz	r0, 800fd60 <_printf_float+0xc0>
 800fd12:	2200      	movs	r2, #0
 800fd14:	2300      	movs	r3, #0
 800fd16:	4640      	mov	r0, r8
 800fd18:	4649      	mov	r1, r9
 800fd1a:	f7f0 feff 	bl	8000b1c <__aeabi_dcmplt>
 800fd1e:	b110      	cbz	r0, 800fd26 <_printf_float+0x86>
 800fd20:	232d      	movs	r3, #45	@ 0x2d
 800fd22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fd26:	4a92      	ldr	r2, [pc, #584]	@ (800ff70 <_printf_float+0x2d0>)
 800fd28:	4b92      	ldr	r3, [pc, #584]	@ (800ff74 <_printf_float+0x2d4>)
 800fd2a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fd2e:	bf94      	ite	ls
 800fd30:	4690      	movls	r8, r2
 800fd32:	4698      	movhi	r8, r3
 800fd34:	2303      	movs	r3, #3
 800fd36:	6123      	str	r3, [r4, #16]
 800fd38:	f02b 0304 	bic.w	r3, fp, #4
 800fd3c:	6023      	str	r3, [r4, #0]
 800fd3e:	f04f 0900 	mov.w	r9, #0
 800fd42:	9700      	str	r7, [sp, #0]
 800fd44:	4633      	mov	r3, r6
 800fd46:	aa0f      	add	r2, sp, #60	@ 0x3c
 800fd48:	4621      	mov	r1, r4
 800fd4a:	4628      	mov	r0, r5
 800fd4c:	f000 f9d4 	bl	80100f8 <_printf_common>
 800fd50:	3001      	adds	r0, #1
 800fd52:	f040 808f 	bne.w	800fe74 <_printf_float+0x1d4>
 800fd56:	f04f 30ff 	mov.w	r0, #4294967295
 800fd5a:	b011      	add	sp, #68	@ 0x44
 800fd5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd60:	4642      	mov	r2, r8
 800fd62:	464b      	mov	r3, r9
 800fd64:	4640      	mov	r0, r8
 800fd66:	4649      	mov	r1, r9
 800fd68:	f7f0 ff00 	bl	8000b6c <__aeabi_dcmpun>
 800fd6c:	b140      	cbz	r0, 800fd80 <_printf_float+0xe0>
 800fd6e:	464b      	mov	r3, r9
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	bfbc      	itt	lt
 800fd74:	232d      	movlt	r3, #45	@ 0x2d
 800fd76:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800fd7a:	4a7f      	ldr	r2, [pc, #508]	@ (800ff78 <_printf_float+0x2d8>)
 800fd7c:	4b7f      	ldr	r3, [pc, #508]	@ (800ff7c <_printf_float+0x2dc>)
 800fd7e:	e7d4      	b.n	800fd2a <_printf_float+0x8a>
 800fd80:	6863      	ldr	r3, [r4, #4]
 800fd82:	1c5a      	adds	r2, r3, #1
 800fd84:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800fd88:	d13f      	bne.n	800fe0a <_printf_float+0x16a>
 800fd8a:	2306      	movs	r3, #6
 800fd8c:	6063      	str	r3, [r4, #4]
 800fd8e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800fd92:	2200      	movs	r2, #0
 800fd94:	6023      	str	r3, [r4, #0]
 800fd96:	9206      	str	r2, [sp, #24]
 800fd98:	aa0e      	add	r2, sp, #56	@ 0x38
 800fd9a:	e9cd a204 	strd	sl, r2, [sp, #16]
 800fd9e:	aa0d      	add	r2, sp, #52	@ 0x34
 800fda0:	9203      	str	r2, [sp, #12]
 800fda2:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800fda6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800fdaa:	6863      	ldr	r3, [r4, #4]
 800fdac:	9300      	str	r3, [sp, #0]
 800fdae:	4642      	mov	r2, r8
 800fdb0:	464b      	mov	r3, r9
 800fdb2:	4628      	mov	r0, r5
 800fdb4:	910a      	str	r1, [sp, #40]	@ 0x28
 800fdb6:	f7ff fed5 	bl	800fb64 <__cvt>
 800fdba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fdbc:	2947      	cmp	r1, #71	@ 0x47
 800fdbe:	4680      	mov	r8, r0
 800fdc0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800fdc2:	d128      	bne.n	800fe16 <_printf_float+0x176>
 800fdc4:	1cc8      	adds	r0, r1, #3
 800fdc6:	db02      	blt.n	800fdce <_printf_float+0x12e>
 800fdc8:	6863      	ldr	r3, [r4, #4]
 800fdca:	4299      	cmp	r1, r3
 800fdcc:	dd40      	ble.n	800fe50 <_printf_float+0x1b0>
 800fdce:	f1aa 0a02 	sub.w	sl, sl, #2
 800fdd2:	fa5f fa8a 	uxtb.w	sl, sl
 800fdd6:	3901      	subs	r1, #1
 800fdd8:	4652      	mov	r2, sl
 800fdda:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800fdde:	910d      	str	r1, [sp, #52]	@ 0x34
 800fde0:	f7ff ff24 	bl	800fc2c <__exponent>
 800fde4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fde6:	1813      	adds	r3, r2, r0
 800fde8:	2a01      	cmp	r2, #1
 800fdea:	4681      	mov	r9, r0
 800fdec:	6123      	str	r3, [r4, #16]
 800fdee:	dc02      	bgt.n	800fdf6 <_printf_float+0x156>
 800fdf0:	6822      	ldr	r2, [r4, #0]
 800fdf2:	07d2      	lsls	r2, r2, #31
 800fdf4:	d501      	bpl.n	800fdfa <_printf_float+0x15a>
 800fdf6:	3301      	adds	r3, #1
 800fdf8:	6123      	str	r3, [r4, #16]
 800fdfa:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d09f      	beq.n	800fd42 <_printf_float+0xa2>
 800fe02:	232d      	movs	r3, #45	@ 0x2d
 800fe04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fe08:	e79b      	b.n	800fd42 <_printf_float+0xa2>
 800fe0a:	2947      	cmp	r1, #71	@ 0x47
 800fe0c:	d1bf      	bne.n	800fd8e <_printf_float+0xee>
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d1bd      	bne.n	800fd8e <_printf_float+0xee>
 800fe12:	2301      	movs	r3, #1
 800fe14:	e7ba      	b.n	800fd8c <_printf_float+0xec>
 800fe16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fe1a:	d9dc      	bls.n	800fdd6 <_printf_float+0x136>
 800fe1c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800fe20:	d118      	bne.n	800fe54 <_printf_float+0x1b4>
 800fe22:	2900      	cmp	r1, #0
 800fe24:	6863      	ldr	r3, [r4, #4]
 800fe26:	dd0b      	ble.n	800fe40 <_printf_float+0x1a0>
 800fe28:	6121      	str	r1, [r4, #16]
 800fe2a:	b913      	cbnz	r3, 800fe32 <_printf_float+0x192>
 800fe2c:	6822      	ldr	r2, [r4, #0]
 800fe2e:	07d0      	lsls	r0, r2, #31
 800fe30:	d502      	bpl.n	800fe38 <_printf_float+0x198>
 800fe32:	3301      	adds	r3, #1
 800fe34:	440b      	add	r3, r1
 800fe36:	6123      	str	r3, [r4, #16]
 800fe38:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fe3a:	f04f 0900 	mov.w	r9, #0
 800fe3e:	e7dc      	b.n	800fdfa <_printf_float+0x15a>
 800fe40:	b913      	cbnz	r3, 800fe48 <_printf_float+0x1a8>
 800fe42:	6822      	ldr	r2, [r4, #0]
 800fe44:	07d2      	lsls	r2, r2, #31
 800fe46:	d501      	bpl.n	800fe4c <_printf_float+0x1ac>
 800fe48:	3302      	adds	r3, #2
 800fe4a:	e7f4      	b.n	800fe36 <_printf_float+0x196>
 800fe4c:	2301      	movs	r3, #1
 800fe4e:	e7f2      	b.n	800fe36 <_printf_float+0x196>
 800fe50:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800fe54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fe56:	4299      	cmp	r1, r3
 800fe58:	db05      	blt.n	800fe66 <_printf_float+0x1c6>
 800fe5a:	6823      	ldr	r3, [r4, #0]
 800fe5c:	6121      	str	r1, [r4, #16]
 800fe5e:	07d8      	lsls	r0, r3, #31
 800fe60:	d5ea      	bpl.n	800fe38 <_printf_float+0x198>
 800fe62:	1c4b      	adds	r3, r1, #1
 800fe64:	e7e7      	b.n	800fe36 <_printf_float+0x196>
 800fe66:	2900      	cmp	r1, #0
 800fe68:	bfd4      	ite	le
 800fe6a:	f1c1 0202 	rsble	r2, r1, #2
 800fe6e:	2201      	movgt	r2, #1
 800fe70:	4413      	add	r3, r2
 800fe72:	e7e0      	b.n	800fe36 <_printf_float+0x196>
 800fe74:	6823      	ldr	r3, [r4, #0]
 800fe76:	055a      	lsls	r2, r3, #21
 800fe78:	d407      	bmi.n	800fe8a <_printf_float+0x1ea>
 800fe7a:	6923      	ldr	r3, [r4, #16]
 800fe7c:	4642      	mov	r2, r8
 800fe7e:	4631      	mov	r1, r6
 800fe80:	4628      	mov	r0, r5
 800fe82:	47b8      	blx	r7
 800fe84:	3001      	adds	r0, #1
 800fe86:	d12b      	bne.n	800fee0 <_printf_float+0x240>
 800fe88:	e765      	b.n	800fd56 <_printf_float+0xb6>
 800fe8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fe8e:	f240 80dd 	bls.w	801004c <_printf_float+0x3ac>
 800fe92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fe96:	2200      	movs	r2, #0
 800fe98:	2300      	movs	r3, #0
 800fe9a:	f7f0 fe35 	bl	8000b08 <__aeabi_dcmpeq>
 800fe9e:	2800      	cmp	r0, #0
 800fea0:	d033      	beq.n	800ff0a <_printf_float+0x26a>
 800fea2:	4a37      	ldr	r2, [pc, #220]	@ (800ff80 <_printf_float+0x2e0>)
 800fea4:	2301      	movs	r3, #1
 800fea6:	4631      	mov	r1, r6
 800fea8:	4628      	mov	r0, r5
 800feaa:	47b8      	blx	r7
 800feac:	3001      	adds	r0, #1
 800feae:	f43f af52 	beq.w	800fd56 <_printf_float+0xb6>
 800feb2:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800feb6:	4543      	cmp	r3, r8
 800feb8:	db02      	blt.n	800fec0 <_printf_float+0x220>
 800feba:	6823      	ldr	r3, [r4, #0]
 800febc:	07d8      	lsls	r0, r3, #31
 800febe:	d50f      	bpl.n	800fee0 <_printf_float+0x240>
 800fec0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fec4:	4631      	mov	r1, r6
 800fec6:	4628      	mov	r0, r5
 800fec8:	47b8      	blx	r7
 800feca:	3001      	adds	r0, #1
 800fecc:	f43f af43 	beq.w	800fd56 <_printf_float+0xb6>
 800fed0:	f04f 0900 	mov.w	r9, #0
 800fed4:	f108 38ff 	add.w	r8, r8, #4294967295
 800fed8:	f104 0a1a 	add.w	sl, r4, #26
 800fedc:	45c8      	cmp	r8, r9
 800fede:	dc09      	bgt.n	800fef4 <_printf_float+0x254>
 800fee0:	6823      	ldr	r3, [r4, #0]
 800fee2:	079b      	lsls	r3, r3, #30
 800fee4:	f100 8103 	bmi.w	80100ee <_printf_float+0x44e>
 800fee8:	68e0      	ldr	r0, [r4, #12]
 800feea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800feec:	4298      	cmp	r0, r3
 800feee:	bfb8      	it	lt
 800fef0:	4618      	movlt	r0, r3
 800fef2:	e732      	b.n	800fd5a <_printf_float+0xba>
 800fef4:	2301      	movs	r3, #1
 800fef6:	4652      	mov	r2, sl
 800fef8:	4631      	mov	r1, r6
 800fefa:	4628      	mov	r0, r5
 800fefc:	47b8      	blx	r7
 800fefe:	3001      	adds	r0, #1
 800ff00:	f43f af29 	beq.w	800fd56 <_printf_float+0xb6>
 800ff04:	f109 0901 	add.w	r9, r9, #1
 800ff08:	e7e8      	b.n	800fedc <_printf_float+0x23c>
 800ff0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	dc39      	bgt.n	800ff84 <_printf_float+0x2e4>
 800ff10:	4a1b      	ldr	r2, [pc, #108]	@ (800ff80 <_printf_float+0x2e0>)
 800ff12:	2301      	movs	r3, #1
 800ff14:	4631      	mov	r1, r6
 800ff16:	4628      	mov	r0, r5
 800ff18:	47b8      	blx	r7
 800ff1a:	3001      	adds	r0, #1
 800ff1c:	f43f af1b 	beq.w	800fd56 <_printf_float+0xb6>
 800ff20:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800ff24:	ea59 0303 	orrs.w	r3, r9, r3
 800ff28:	d102      	bne.n	800ff30 <_printf_float+0x290>
 800ff2a:	6823      	ldr	r3, [r4, #0]
 800ff2c:	07d9      	lsls	r1, r3, #31
 800ff2e:	d5d7      	bpl.n	800fee0 <_printf_float+0x240>
 800ff30:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ff34:	4631      	mov	r1, r6
 800ff36:	4628      	mov	r0, r5
 800ff38:	47b8      	blx	r7
 800ff3a:	3001      	adds	r0, #1
 800ff3c:	f43f af0b 	beq.w	800fd56 <_printf_float+0xb6>
 800ff40:	f04f 0a00 	mov.w	sl, #0
 800ff44:	f104 0b1a 	add.w	fp, r4, #26
 800ff48:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ff4a:	425b      	negs	r3, r3
 800ff4c:	4553      	cmp	r3, sl
 800ff4e:	dc01      	bgt.n	800ff54 <_printf_float+0x2b4>
 800ff50:	464b      	mov	r3, r9
 800ff52:	e793      	b.n	800fe7c <_printf_float+0x1dc>
 800ff54:	2301      	movs	r3, #1
 800ff56:	465a      	mov	r2, fp
 800ff58:	4631      	mov	r1, r6
 800ff5a:	4628      	mov	r0, r5
 800ff5c:	47b8      	blx	r7
 800ff5e:	3001      	adds	r0, #1
 800ff60:	f43f aef9 	beq.w	800fd56 <_printf_float+0xb6>
 800ff64:	f10a 0a01 	add.w	sl, sl, #1
 800ff68:	e7ee      	b.n	800ff48 <_printf_float+0x2a8>
 800ff6a:	bf00      	nop
 800ff6c:	7fefffff 	.word	0x7fefffff
 800ff70:	08014b60 	.word	0x08014b60
 800ff74:	08014b64 	.word	0x08014b64
 800ff78:	08014b68 	.word	0x08014b68
 800ff7c:	08014b6c 	.word	0x08014b6c
 800ff80:	08014b70 	.word	0x08014b70
 800ff84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ff86:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800ff8a:	4553      	cmp	r3, sl
 800ff8c:	bfa8      	it	ge
 800ff8e:	4653      	movge	r3, sl
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	4699      	mov	r9, r3
 800ff94:	dc36      	bgt.n	8010004 <_printf_float+0x364>
 800ff96:	f04f 0b00 	mov.w	fp, #0
 800ff9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ff9e:	f104 021a 	add.w	r2, r4, #26
 800ffa2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ffa4:	930a      	str	r3, [sp, #40]	@ 0x28
 800ffa6:	eba3 0309 	sub.w	r3, r3, r9
 800ffaa:	455b      	cmp	r3, fp
 800ffac:	dc31      	bgt.n	8010012 <_printf_float+0x372>
 800ffae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ffb0:	459a      	cmp	sl, r3
 800ffb2:	dc3a      	bgt.n	801002a <_printf_float+0x38a>
 800ffb4:	6823      	ldr	r3, [r4, #0]
 800ffb6:	07da      	lsls	r2, r3, #31
 800ffb8:	d437      	bmi.n	801002a <_printf_float+0x38a>
 800ffba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ffbc:	ebaa 0903 	sub.w	r9, sl, r3
 800ffc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ffc2:	ebaa 0303 	sub.w	r3, sl, r3
 800ffc6:	4599      	cmp	r9, r3
 800ffc8:	bfa8      	it	ge
 800ffca:	4699      	movge	r9, r3
 800ffcc:	f1b9 0f00 	cmp.w	r9, #0
 800ffd0:	dc33      	bgt.n	801003a <_printf_float+0x39a>
 800ffd2:	f04f 0800 	mov.w	r8, #0
 800ffd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ffda:	f104 0b1a 	add.w	fp, r4, #26
 800ffde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ffe0:	ebaa 0303 	sub.w	r3, sl, r3
 800ffe4:	eba3 0309 	sub.w	r3, r3, r9
 800ffe8:	4543      	cmp	r3, r8
 800ffea:	f77f af79 	ble.w	800fee0 <_printf_float+0x240>
 800ffee:	2301      	movs	r3, #1
 800fff0:	465a      	mov	r2, fp
 800fff2:	4631      	mov	r1, r6
 800fff4:	4628      	mov	r0, r5
 800fff6:	47b8      	blx	r7
 800fff8:	3001      	adds	r0, #1
 800fffa:	f43f aeac 	beq.w	800fd56 <_printf_float+0xb6>
 800fffe:	f108 0801 	add.w	r8, r8, #1
 8010002:	e7ec      	b.n	800ffde <_printf_float+0x33e>
 8010004:	4642      	mov	r2, r8
 8010006:	4631      	mov	r1, r6
 8010008:	4628      	mov	r0, r5
 801000a:	47b8      	blx	r7
 801000c:	3001      	adds	r0, #1
 801000e:	d1c2      	bne.n	800ff96 <_printf_float+0x2f6>
 8010010:	e6a1      	b.n	800fd56 <_printf_float+0xb6>
 8010012:	2301      	movs	r3, #1
 8010014:	4631      	mov	r1, r6
 8010016:	4628      	mov	r0, r5
 8010018:	920a      	str	r2, [sp, #40]	@ 0x28
 801001a:	47b8      	blx	r7
 801001c:	3001      	adds	r0, #1
 801001e:	f43f ae9a 	beq.w	800fd56 <_printf_float+0xb6>
 8010022:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010024:	f10b 0b01 	add.w	fp, fp, #1
 8010028:	e7bb      	b.n	800ffa2 <_printf_float+0x302>
 801002a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801002e:	4631      	mov	r1, r6
 8010030:	4628      	mov	r0, r5
 8010032:	47b8      	blx	r7
 8010034:	3001      	adds	r0, #1
 8010036:	d1c0      	bne.n	800ffba <_printf_float+0x31a>
 8010038:	e68d      	b.n	800fd56 <_printf_float+0xb6>
 801003a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801003c:	464b      	mov	r3, r9
 801003e:	4442      	add	r2, r8
 8010040:	4631      	mov	r1, r6
 8010042:	4628      	mov	r0, r5
 8010044:	47b8      	blx	r7
 8010046:	3001      	adds	r0, #1
 8010048:	d1c3      	bne.n	800ffd2 <_printf_float+0x332>
 801004a:	e684      	b.n	800fd56 <_printf_float+0xb6>
 801004c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8010050:	f1ba 0f01 	cmp.w	sl, #1
 8010054:	dc01      	bgt.n	801005a <_printf_float+0x3ba>
 8010056:	07db      	lsls	r3, r3, #31
 8010058:	d536      	bpl.n	80100c8 <_printf_float+0x428>
 801005a:	2301      	movs	r3, #1
 801005c:	4642      	mov	r2, r8
 801005e:	4631      	mov	r1, r6
 8010060:	4628      	mov	r0, r5
 8010062:	47b8      	blx	r7
 8010064:	3001      	adds	r0, #1
 8010066:	f43f ae76 	beq.w	800fd56 <_printf_float+0xb6>
 801006a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801006e:	4631      	mov	r1, r6
 8010070:	4628      	mov	r0, r5
 8010072:	47b8      	blx	r7
 8010074:	3001      	adds	r0, #1
 8010076:	f43f ae6e 	beq.w	800fd56 <_printf_float+0xb6>
 801007a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801007e:	2200      	movs	r2, #0
 8010080:	2300      	movs	r3, #0
 8010082:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010086:	f7f0 fd3f 	bl	8000b08 <__aeabi_dcmpeq>
 801008a:	b9c0      	cbnz	r0, 80100be <_printf_float+0x41e>
 801008c:	4653      	mov	r3, sl
 801008e:	f108 0201 	add.w	r2, r8, #1
 8010092:	4631      	mov	r1, r6
 8010094:	4628      	mov	r0, r5
 8010096:	47b8      	blx	r7
 8010098:	3001      	adds	r0, #1
 801009a:	d10c      	bne.n	80100b6 <_printf_float+0x416>
 801009c:	e65b      	b.n	800fd56 <_printf_float+0xb6>
 801009e:	2301      	movs	r3, #1
 80100a0:	465a      	mov	r2, fp
 80100a2:	4631      	mov	r1, r6
 80100a4:	4628      	mov	r0, r5
 80100a6:	47b8      	blx	r7
 80100a8:	3001      	adds	r0, #1
 80100aa:	f43f ae54 	beq.w	800fd56 <_printf_float+0xb6>
 80100ae:	f108 0801 	add.w	r8, r8, #1
 80100b2:	45d0      	cmp	r8, sl
 80100b4:	dbf3      	blt.n	801009e <_printf_float+0x3fe>
 80100b6:	464b      	mov	r3, r9
 80100b8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80100bc:	e6df      	b.n	800fe7e <_printf_float+0x1de>
 80100be:	f04f 0800 	mov.w	r8, #0
 80100c2:	f104 0b1a 	add.w	fp, r4, #26
 80100c6:	e7f4      	b.n	80100b2 <_printf_float+0x412>
 80100c8:	2301      	movs	r3, #1
 80100ca:	4642      	mov	r2, r8
 80100cc:	e7e1      	b.n	8010092 <_printf_float+0x3f2>
 80100ce:	2301      	movs	r3, #1
 80100d0:	464a      	mov	r2, r9
 80100d2:	4631      	mov	r1, r6
 80100d4:	4628      	mov	r0, r5
 80100d6:	47b8      	blx	r7
 80100d8:	3001      	adds	r0, #1
 80100da:	f43f ae3c 	beq.w	800fd56 <_printf_float+0xb6>
 80100de:	f108 0801 	add.w	r8, r8, #1
 80100e2:	68e3      	ldr	r3, [r4, #12]
 80100e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80100e6:	1a5b      	subs	r3, r3, r1
 80100e8:	4543      	cmp	r3, r8
 80100ea:	dcf0      	bgt.n	80100ce <_printf_float+0x42e>
 80100ec:	e6fc      	b.n	800fee8 <_printf_float+0x248>
 80100ee:	f04f 0800 	mov.w	r8, #0
 80100f2:	f104 0919 	add.w	r9, r4, #25
 80100f6:	e7f4      	b.n	80100e2 <_printf_float+0x442>

080100f8 <_printf_common>:
 80100f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100fc:	4616      	mov	r6, r2
 80100fe:	4698      	mov	r8, r3
 8010100:	688a      	ldr	r2, [r1, #8]
 8010102:	690b      	ldr	r3, [r1, #16]
 8010104:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010108:	4293      	cmp	r3, r2
 801010a:	bfb8      	it	lt
 801010c:	4613      	movlt	r3, r2
 801010e:	6033      	str	r3, [r6, #0]
 8010110:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010114:	4607      	mov	r7, r0
 8010116:	460c      	mov	r4, r1
 8010118:	b10a      	cbz	r2, 801011e <_printf_common+0x26>
 801011a:	3301      	adds	r3, #1
 801011c:	6033      	str	r3, [r6, #0]
 801011e:	6823      	ldr	r3, [r4, #0]
 8010120:	0699      	lsls	r1, r3, #26
 8010122:	bf42      	ittt	mi
 8010124:	6833      	ldrmi	r3, [r6, #0]
 8010126:	3302      	addmi	r3, #2
 8010128:	6033      	strmi	r3, [r6, #0]
 801012a:	6825      	ldr	r5, [r4, #0]
 801012c:	f015 0506 	ands.w	r5, r5, #6
 8010130:	d106      	bne.n	8010140 <_printf_common+0x48>
 8010132:	f104 0a19 	add.w	sl, r4, #25
 8010136:	68e3      	ldr	r3, [r4, #12]
 8010138:	6832      	ldr	r2, [r6, #0]
 801013a:	1a9b      	subs	r3, r3, r2
 801013c:	42ab      	cmp	r3, r5
 801013e:	dc26      	bgt.n	801018e <_printf_common+0x96>
 8010140:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010144:	6822      	ldr	r2, [r4, #0]
 8010146:	3b00      	subs	r3, #0
 8010148:	bf18      	it	ne
 801014a:	2301      	movne	r3, #1
 801014c:	0692      	lsls	r2, r2, #26
 801014e:	d42b      	bmi.n	80101a8 <_printf_common+0xb0>
 8010150:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010154:	4641      	mov	r1, r8
 8010156:	4638      	mov	r0, r7
 8010158:	47c8      	blx	r9
 801015a:	3001      	adds	r0, #1
 801015c:	d01e      	beq.n	801019c <_printf_common+0xa4>
 801015e:	6823      	ldr	r3, [r4, #0]
 8010160:	6922      	ldr	r2, [r4, #16]
 8010162:	f003 0306 	and.w	r3, r3, #6
 8010166:	2b04      	cmp	r3, #4
 8010168:	bf02      	ittt	eq
 801016a:	68e5      	ldreq	r5, [r4, #12]
 801016c:	6833      	ldreq	r3, [r6, #0]
 801016e:	1aed      	subeq	r5, r5, r3
 8010170:	68a3      	ldr	r3, [r4, #8]
 8010172:	bf0c      	ite	eq
 8010174:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010178:	2500      	movne	r5, #0
 801017a:	4293      	cmp	r3, r2
 801017c:	bfc4      	itt	gt
 801017e:	1a9b      	subgt	r3, r3, r2
 8010180:	18ed      	addgt	r5, r5, r3
 8010182:	2600      	movs	r6, #0
 8010184:	341a      	adds	r4, #26
 8010186:	42b5      	cmp	r5, r6
 8010188:	d11a      	bne.n	80101c0 <_printf_common+0xc8>
 801018a:	2000      	movs	r0, #0
 801018c:	e008      	b.n	80101a0 <_printf_common+0xa8>
 801018e:	2301      	movs	r3, #1
 8010190:	4652      	mov	r2, sl
 8010192:	4641      	mov	r1, r8
 8010194:	4638      	mov	r0, r7
 8010196:	47c8      	blx	r9
 8010198:	3001      	adds	r0, #1
 801019a:	d103      	bne.n	80101a4 <_printf_common+0xac>
 801019c:	f04f 30ff 	mov.w	r0, #4294967295
 80101a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101a4:	3501      	adds	r5, #1
 80101a6:	e7c6      	b.n	8010136 <_printf_common+0x3e>
 80101a8:	18e1      	adds	r1, r4, r3
 80101aa:	1c5a      	adds	r2, r3, #1
 80101ac:	2030      	movs	r0, #48	@ 0x30
 80101ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80101b2:	4422      	add	r2, r4
 80101b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80101b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80101bc:	3302      	adds	r3, #2
 80101be:	e7c7      	b.n	8010150 <_printf_common+0x58>
 80101c0:	2301      	movs	r3, #1
 80101c2:	4622      	mov	r2, r4
 80101c4:	4641      	mov	r1, r8
 80101c6:	4638      	mov	r0, r7
 80101c8:	47c8      	blx	r9
 80101ca:	3001      	adds	r0, #1
 80101cc:	d0e6      	beq.n	801019c <_printf_common+0xa4>
 80101ce:	3601      	adds	r6, #1
 80101d0:	e7d9      	b.n	8010186 <_printf_common+0x8e>
	...

080101d4 <_printf_i>:
 80101d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80101d8:	7e0f      	ldrb	r7, [r1, #24]
 80101da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80101dc:	2f78      	cmp	r7, #120	@ 0x78
 80101de:	4691      	mov	r9, r2
 80101e0:	4680      	mov	r8, r0
 80101e2:	460c      	mov	r4, r1
 80101e4:	469a      	mov	sl, r3
 80101e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80101ea:	d807      	bhi.n	80101fc <_printf_i+0x28>
 80101ec:	2f62      	cmp	r7, #98	@ 0x62
 80101ee:	d80a      	bhi.n	8010206 <_printf_i+0x32>
 80101f0:	2f00      	cmp	r7, #0
 80101f2:	f000 80d2 	beq.w	801039a <_printf_i+0x1c6>
 80101f6:	2f58      	cmp	r7, #88	@ 0x58
 80101f8:	f000 80b9 	beq.w	801036e <_printf_i+0x19a>
 80101fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010200:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010204:	e03a      	b.n	801027c <_printf_i+0xa8>
 8010206:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801020a:	2b15      	cmp	r3, #21
 801020c:	d8f6      	bhi.n	80101fc <_printf_i+0x28>
 801020e:	a101      	add	r1, pc, #4	@ (adr r1, 8010214 <_printf_i+0x40>)
 8010210:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010214:	0801026d 	.word	0x0801026d
 8010218:	08010281 	.word	0x08010281
 801021c:	080101fd 	.word	0x080101fd
 8010220:	080101fd 	.word	0x080101fd
 8010224:	080101fd 	.word	0x080101fd
 8010228:	080101fd 	.word	0x080101fd
 801022c:	08010281 	.word	0x08010281
 8010230:	080101fd 	.word	0x080101fd
 8010234:	080101fd 	.word	0x080101fd
 8010238:	080101fd 	.word	0x080101fd
 801023c:	080101fd 	.word	0x080101fd
 8010240:	08010381 	.word	0x08010381
 8010244:	080102ab 	.word	0x080102ab
 8010248:	0801033b 	.word	0x0801033b
 801024c:	080101fd 	.word	0x080101fd
 8010250:	080101fd 	.word	0x080101fd
 8010254:	080103a3 	.word	0x080103a3
 8010258:	080101fd 	.word	0x080101fd
 801025c:	080102ab 	.word	0x080102ab
 8010260:	080101fd 	.word	0x080101fd
 8010264:	080101fd 	.word	0x080101fd
 8010268:	08010343 	.word	0x08010343
 801026c:	6833      	ldr	r3, [r6, #0]
 801026e:	1d1a      	adds	r2, r3, #4
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	6032      	str	r2, [r6, #0]
 8010274:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010278:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801027c:	2301      	movs	r3, #1
 801027e:	e09d      	b.n	80103bc <_printf_i+0x1e8>
 8010280:	6833      	ldr	r3, [r6, #0]
 8010282:	6820      	ldr	r0, [r4, #0]
 8010284:	1d19      	adds	r1, r3, #4
 8010286:	6031      	str	r1, [r6, #0]
 8010288:	0606      	lsls	r6, r0, #24
 801028a:	d501      	bpl.n	8010290 <_printf_i+0xbc>
 801028c:	681d      	ldr	r5, [r3, #0]
 801028e:	e003      	b.n	8010298 <_printf_i+0xc4>
 8010290:	0645      	lsls	r5, r0, #25
 8010292:	d5fb      	bpl.n	801028c <_printf_i+0xb8>
 8010294:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010298:	2d00      	cmp	r5, #0
 801029a:	da03      	bge.n	80102a4 <_printf_i+0xd0>
 801029c:	232d      	movs	r3, #45	@ 0x2d
 801029e:	426d      	negs	r5, r5
 80102a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80102a4:	4859      	ldr	r0, [pc, #356]	@ (801040c <_printf_i+0x238>)
 80102a6:	230a      	movs	r3, #10
 80102a8:	e011      	b.n	80102ce <_printf_i+0xfa>
 80102aa:	6821      	ldr	r1, [r4, #0]
 80102ac:	6833      	ldr	r3, [r6, #0]
 80102ae:	0608      	lsls	r0, r1, #24
 80102b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80102b4:	d402      	bmi.n	80102bc <_printf_i+0xe8>
 80102b6:	0649      	lsls	r1, r1, #25
 80102b8:	bf48      	it	mi
 80102ba:	b2ad      	uxthmi	r5, r5
 80102bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80102be:	4853      	ldr	r0, [pc, #332]	@ (801040c <_printf_i+0x238>)
 80102c0:	6033      	str	r3, [r6, #0]
 80102c2:	bf14      	ite	ne
 80102c4:	230a      	movne	r3, #10
 80102c6:	2308      	moveq	r3, #8
 80102c8:	2100      	movs	r1, #0
 80102ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80102ce:	6866      	ldr	r6, [r4, #4]
 80102d0:	60a6      	str	r6, [r4, #8]
 80102d2:	2e00      	cmp	r6, #0
 80102d4:	bfa2      	ittt	ge
 80102d6:	6821      	ldrge	r1, [r4, #0]
 80102d8:	f021 0104 	bicge.w	r1, r1, #4
 80102dc:	6021      	strge	r1, [r4, #0]
 80102de:	b90d      	cbnz	r5, 80102e4 <_printf_i+0x110>
 80102e0:	2e00      	cmp	r6, #0
 80102e2:	d04b      	beq.n	801037c <_printf_i+0x1a8>
 80102e4:	4616      	mov	r6, r2
 80102e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80102ea:	fb03 5711 	mls	r7, r3, r1, r5
 80102ee:	5dc7      	ldrb	r7, [r0, r7]
 80102f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80102f4:	462f      	mov	r7, r5
 80102f6:	42bb      	cmp	r3, r7
 80102f8:	460d      	mov	r5, r1
 80102fa:	d9f4      	bls.n	80102e6 <_printf_i+0x112>
 80102fc:	2b08      	cmp	r3, #8
 80102fe:	d10b      	bne.n	8010318 <_printf_i+0x144>
 8010300:	6823      	ldr	r3, [r4, #0]
 8010302:	07df      	lsls	r7, r3, #31
 8010304:	d508      	bpl.n	8010318 <_printf_i+0x144>
 8010306:	6923      	ldr	r3, [r4, #16]
 8010308:	6861      	ldr	r1, [r4, #4]
 801030a:	4299      	cmp	r1, r3
 801030c:	bfde      	ittt	le
 801030e:	2330      	movle	r3, #48	@ 0x30
 8010310:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010314:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010318:	1b92      	subs	r2, r2, r6
 801031a:	6122      	str	r2, [r4, #16]
 801031c:	f8cd a000 	str.w	sl, [sp]
 8010320:	464b      	mov	r3, r9
 8010322:	aa03      	add	r2, sp, #12
 8010324:	4621      	mov	r1, r4
 8010326:	4640      	mov	r0, r8
 8010328:	f7ff fee6 	bl	80100f8 <_printf_common>
 801032c:	3001      	adds	r0, #1
 801032e:	d14a      	bne.n	80103c6 <_printf_i+0x1f2>
 8010330:	f04f 30ff 	mov.w	r0, #4294967295
 8010334:	b004      	add	sp, #16
 8010336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801033a:	6823      	ldr	r3, [r4, #0]
 801033c:	f043 0320 	orr.w	r3, r3, #32
 8010340:	6023      	str	r3, [r4, #0]
 8010342:	4833      	ldr	r0, [pc, #204]	@ (8010410 <_printf_i+0x23c>)
 8010344:	2778      	movs	r7, #120	@ 0x78
 8010346:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801034a:	6823      	ldr	r3, [r4, #0]
 801034c:	6831      	ldr	r1, [r6, #0]
 801034e:	061f      	lsls	r7, r3, #24
 8010350:	f851 5b04 	ldr.w	r5, [r1], #4
 8010354:	d402      	bmi.n	801035c <_printf_i+0x188>
 8010356:	065f      	lsls	r7, r3, #25
 8010358:	bf48      	it	mi
 801035a:	b2ad      	uxthmi	r5, r5
 801035c:	6031      	str	r1, [r6, #0]
 801035e:	07d9      	lsls	r1, r3, #31
 8010360:	bf44      	itt	mi
 8010362:	f043 0320 	orrmi.w	r3, r3, #32
 8010366:	6023      	strmi	r3, [r4, #0]
 8010368:	b11d      	cbz	r5, 8010372 <_printf_i+0x19e>
 801036a:	2310      	movs	r3, #16
 801036c:	e7ac      	b.n	80102c8 <_printf_i+0xf4>
 801036e:	4827      	ldr	r0, [pc, #156]	@ (801040c <_printf_i+0x238>)
 8010370:	e7e9      	b.n	8010346 <_printf_i+0x172>
 8010372:	6823      	ldr	r3, [r4, #0]
 8010374:	f023 0320 	bic.w	r3, r3, #32
 8010378:	6023      	str	r3, [r4, #0]
 801037a:	e7f6      	b.n	801036a <_printf_i+0x196>
 801037c:	4616      	mov	r6, r2
 801037e:	e7bd      	b.n	80102fc <_printf_i+0x128>
 8010380:	6833      	ldr	r3, [r6, #0]
 8010382:	6825      	ldr	r5, [r4, #0]
 8010384:	6961      	ldr	r1, [r4, #20]
 8010386:	1d18      	adds	r0, r3, #4
 8010388:	6030      	str	r0, [r6, #0]
 801038a:	062e      	lsls	r6, r5, #24
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	d501      	bpl.n	8010394 <_printf_i+0x1c0>
 8010390:	6019      	str	r1, [r3, #0]
 8010392:	e002      	b.n	801039a <_printf_i+0x1c6>
 8010394:	0668      	lsls	r0, r5, #25
 8010396:	d5fb      	bpl.n	8010390 <_printf_i+0x1bc>
 8010398:	8019      	strh	r1, [r3, #0]
 801039a:	2300      	movs	r3, #0
 801039c:	6123      	str	r3, [r4, #16]
 801039e:	4616      	mov	r6, r2
 80103a0:	e7bc      	b.n	801031c <_printf_i+0x148>
 80103a2:	6833      	ldr	r3, [r6, #0]
 80103a4:	1d1a      	adds	r2, r3, #4
 80103a6:	6032      	str	r2, [r6, #0]
 80103a8:	681e      	ldr	r6, [r3, #0]
 80103aa:	6862      	ldr	r2, [r4, #4]
 80103ac:	2100      	movs	r1, #0
 80103ae:	4630      	mov	r0, r6
 80103b0:	f7ef ff2e 	bl	8000210 <memchr>
 80103b4:	b108      	cbz	r0, 80103ba <_printf_i+0x1e6>
 80103b6:	1b80      	subs	r0, r0, r6
 80103b8:	6060      	str	r0, [r4, #4]
 80103ba:	6863      	ldr	r3, [r4, #4]
 80103bc:	6123      	str	r3, [r4, #16]
 80103be:	2300      	movs	r3, #0
 80103c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80103c4:	e7aa      	b.n	801031c <_printf_i+0x148>
 80103c6:	6923      	ldr	r3, [r4, #16]
 80103c8:	4632      	mov	r2, r6
 80103ca:	4649      	mov	r1, r9
 80103cc:	4640      	mov	r0, r8
 80103ce:	47d0      	blx	sl
 80103d0:	3001      	adds	r0, #1
 80103d2:	d0ad      	beq.n	8010330 <_printf_i+0x15c>
 80103d4:	6823      	ldr	r3, [r4, #0]
 80103d6:	079b      	lsls	r3, r3, #30
 80103d8:	d413      	bmi.n	8010402 <_printf_i+0x22e>
 80103da:	68e0      	ldr	r0, [r4, #12]
 80103dc:	9b03      	ldr	r3, [sp, #12]
 80103de:	4298      	cmp	r0, r3
 80103e0:	bfb8      	it	lt
 80103e2:	4618      	movlt	r0, r3
 80103e4:	e7a6      	b.n	8010334 <_printf_i+0x160>
 80103e6:	2301      	movs	r3, #1
 80103e8:	4632      	mov	r2, r6
 80103ea:	4649      	mov	r1, r9
 80103ec:	4640      	mov	r0, r8
 80103ee:	47d0      	blx	sl
 80103f0:	3001      	adds	r0, #1
 80103f2:	d09d      	beq.n	8010330 <_printf_i+0x15c>
 80103f4:	3501      	adds	r5, #1
 80103f6:	68e3      	ldr	r3, [r4, #12]
 80103f8:	9903      	ldr	r1, [sp, #12]
 80103fa:	1a5b      	subs	r3, r3, r1
 80103fc:	42ab      	cmp	r3, r5
 80103fe:	dcf2      	bgt.n	80103e6 <_printf_i+0x212>
 8010400:	e7eb      	b.n	80103da <_printf_i+0x206>
 8010402:	2500      	movs	r5, #0
 8010404:	f104 0619 	add.w	r6, r4, #25
 8010408:	e7f5      	b.n	80103f6 <_printf_i+0x222>
 801040a:	bf00      	nop
 801040c:	08014b72 	.word	0x08014b72
 8010410:	08014b83 	.word	0x08014b83

08010414 <_scanf_float>:
 8010414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010418:	b087      	sub	sp, #28
 801041a:	4617      	mov	r7, r2
 801041c:	9303      	str	r3, [sp, #12]
 801041e:	688b      	ldr	r3, [r1, #8]
 8010420:	1e5a      	subs	r2, r3, #1
 8010422:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8010426:	bf81      	itttt	hi
 8010428:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801042c:	eb03 0b05 	addhi.w	fp, r3, r5
 8010430:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8010434:	608b      	strhi	r3, [r1, #8]
 8010436:	680b      	ldr	r3, [r1, #0]
 8010438:	460a      	mov	r2, r1
 801043a:	f04f 0500 	mov.w	r5, #0
 801043e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8010442:	f842 3b1c 	str.w	r3, [r2], #28
 8010446:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801044a:	4680      	mov	r8, r0
 801044c:	460c      	mov	r4, r1
 801044e:	bf98      	it	ls
 8010450:	f04f 0b00 	movls.w	fp, #0
 8010454:	9201      	str	r2, [sp, #4]
 8010456:	4616      	mov	r6, r2
 8010458:	46aa      	mov	sl, r5
 801045a:	46a9      	mov	r9, r5
 801045c:	9502      	str	r5, [sp, #8]
 801045e:	68a2      	ldr	r2, [r4, #8]
 8010460:	b152      	cbz	r2, 8010478 <_scanf_float+0x64>
 8010462:	683b      	ldr	r3, [r7, #0]
 8010464:	781b      	ldrb	r3, [r3, #0]
 8010466:	2b4e      	cmp	r3, #78	@ 0x4e
 8010468:	d864      	bhi.n	8010534 <_scanf_float+0x120>
 801046a:	2b40      	cmp	r3, #64	@ 0x40
 801046c:	d83c      	bhi.n	80104e8 <_scanf_float+0xd4>
 801046e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8010472:	b2c8      	uxtb	r0, r1
 8010474:	280e      	cmp	r0, #14
 8010476:	d93a      	bls.n	80104ee <_scanf_float+0xda>
 8010478:	f1b9 0f00 	cmp.w	r9, #0
 801047c:	d003      	beq.n	8010486 <_scanf_float+0x72>
 801047e:	6823      	ldr	r3, [r4, #0]
 8010480:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010484:	6023      	str	r3, [r4, #0]
 8010486:	f10a 3aff 	add.w	sl, sl, #4294967295
 801048a:	f1ba 0f01 	cmp.w	sl, #1
 801048e:	f200 8117 	bhi.w	80106c0 <_scanf_float+0x2ac>
 8010492:	9b01      	ldr	r3, [sp, #4]
 8010494:	429e      	cmp	r6, r3
 8010496:	f200 8108 	bhi.w	80106aa <_scanf_float+0x296>
 801049a:	2001      	movs	r0, #1
 801049c:	b007      	add	sp, #28
 801049e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104a2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80104a6:	2a0d      	cmp	r2, #13
 80104a8:	d8e6      	bhi.n	8010478 <_scanf_float+0x64>
 80104aa:	a101      	add	r1, pc, #4	@ (adr r1, 80104b0 <_scanf_float+0x9c>)
 80104ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80104b0:	080105f7 	.word	0x080105f7
 80104b4:	08010479 	.word	0x08010479
 80104b8:	08010479 	.word	0x08010479
 80104bc:	08010479 	.word	0x08010479
 80104c0:	08010657 	.word	0x08010657
 80104c4:	0801062f 	.word	0x0801062f
 80104c8:	08010479 	.word	0x08010479
 80104cc:	08010479 	.word	0x08010479
 80104d0:	08010605 	.word	0x08010605
 80104d4:	08010479 	.word	0x08010479
 80104d8:	08010479 	.word	0x08010479
 80104dc:	08010479 	.word	0x08010479
 80104e0:	08010479 	.word	0x08010479
 80104e4:	080105bd 	.word	0x080105bd
 80104e8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80104ec:	e7db      	b.n	80104a6 <_scanf_float+0x92>
 80104ee:	290e      	cmp	r1, #14
 80104f0:	d8c2      	bhi.n	8010478 <_scanf_float+0x64>
 80104f2:	a001      	add	r0, pc, #4	@ (adr r0, 80104f8 <_scanf_float+0xe4>)
 80104f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80104f8:	080105ad 	.word	0x080105ad
 80104fc:	08010479 	.word	0x08010479
 8010500:	080105ad 	.word	0x080105ad
 8010504:	08010643 	.word	0x08010643
 8010508:	08010479 	.word	0x08010479
 801050c:	08010555 	.word	0x08010555
 8010510:	08010593 	.word	0x08010593
 8010514:	08010593 	.word	0x08010593
 8010518:	08010593 	.word	0x08010593
 801051c:	08010593 	.word	0x08010593
 8010520:	08010593 	.word	0x08010593
 8010524:	08010593 	.word	0x08010593
 8010528:	08010593 	.word	0x08010593
 801052c:	08010593 	.word	0x08010593
 8010530:	08010593 	.word	0x08010593
 8010534:	2b6e      	cmp	r3, #110	@ 0x6e
 8010536:	d809      	bhi.n	801054c <_scanf_float+0x138>
 8010538:	2b60      	cmp	r3, #96	@ 0x60
 801053a:	d8b2      	bhi.n	80104a2 <_scanf_float+0x8e>
 801053c:	2b54      	cmp	r3, #84	@ 0x54
 801053e:	d07b      	beq.n	8010638 <_scanf_float+0x224>
 8010540:	2b59      	cmp	r3, #89	@ 0x59
 8010542:	d199      	bne.n	8010478 <_scanf_float+0x64>
 8010544:	2d07      	cmp	r5, #7
 8010546:	d197      	bne.n	8010478 <_scanf_float+0x64>
 8010548:	2508      	movs	r5, #8
 801054a:	e02c      	b.n	80105a6 <_scanf_float+0x192>
 801054c:	2b74      	cmp	r3, #116	@ 0x74
 801054e:	d073      	beq.n	8010638 <_scanf_float+0x224>
 8010550:	2b79      	cmp	r3, #121	@ 0x79
 8010552:	e7f6      	b.n	8010542 <_scanf_float+0x12e>
 8010554:	6821      	ldr	r1, [r4, #0]
 8010556:	05c8      	lsls	r0, r1, #23
 8010558:	d51b      	bpl.n	8010592 <_scanf_float+0x17e>
 801055a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801055e:	6021      	str	r1, [r4, #0]
 8010560:	f109 0901 	add.w	r9, r9, #1
 8010564:	f1bb 0f00 	cmp.w	fp, #0
 8010568:	d003      	beq.n	8010572 <_scanf_float+0x15e>
 801056a:	3201      	adds	r2, #1
 801056c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010570:	60a2      	str	r2, [r4, #8]
 8010572:	68a3      	ldr	r3, [r4, #8]
 8010574:	3b01      	subs	r3, #1
 8010576:	60a3      	str	r3, [r4, #8]
 8010578:	6923      	ldr	r3, [r4, #16]
 801057a:	3301      	adds	r3, #1
 801057c:	6123      	str	r3, [r4, #16]
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	3b01      	subs	r3, #1
 8010582:	2b00      	cmp	r3, #0
 8010584:	607b      	str	r3, [r7, #4]
 8010586:	f340 8087 	ble.w	8010698 <_scanf_float+0x284>
 801058a:	683b      	ldr	r3, [r7, #0]
 801058c:	3301      	adds	r3, #1
 801058e:	603b      	str	r3, [r7, #0]
 8010590:	e765      	b.n	801045e <_scanf_float+0x4a>
 8010592:	eb1a 0105 	adds.w	r1, sl, r5
 8010596:	f47f af6f 	bne.w	8010478 <_scanf_float+0x64>
 801059a:	6822      	ldr	r2, [r4, #0]
 801059c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80105a0:	6022      	str	r2, [r4, #0]
 80105a2:	460d      	mov	r5, r1
 80105a4:	468a      	mov	sl, r1
 80105a6:	f806 3b01 	strb.w	r3, [r6], #1
 80105aa:	e7e2      	b.n	8010572 <_scanf_float+0x15e>
 80105ac:	6822      	ldr	r2, [r4, #0]
 80105ae:	0610      	lsls	r0, r2, #24
 80105b0:	f57f af62 	bpl.w	8010478 <_scanf_float+0x64>
 80105b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80105b8:	6022      	str	r2, [r4, #0]
 80105ba:	e7f4      	b.n	80105a6 <_scanf_float+0x192>
 80105bc:	f1ba 0f00 	cmp.w	sl, #0
 80105c0:	d10e      	bne.n	80105e0 <_scanf_float+0x1cc>
 80105c2:	f1b9 0f00 	cmp.w	r9, #0
 80105c6:	d10e      	bne.n	80105e6 <_scanf_float+0x1d2>
 80105c8:	6822      	ldr	r2, [r4, #0]
 80105ca:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80105ce:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80105d2:	d108      	bne.n	80105e6 <_scanf_float+0x1d2>
 80105d4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80105d8:	6022      	str	r2, [r4, #0]
 80105da:	f04f 0a01 	mov.w	sl, #1
 80105de:	e7e2      	b.n	80105a6 <_scanf_float+0x192>
 80105e0:	f1ba 0f02 	cmp.w	sl, #2
 80105e4:	d055      	beq.n	8010692 <_scanf_float+0x27e>
 80105e6:	2d01      	cmp	r5, #1
 80105e8:	d002      	beq.n	80105f0 <_scanf_float+0x1dc>
 80105ea:	2d04      	cmp	r5, #4
 80105ec:	f47f af44 	bne.w	8010478 <_scanf_float+0x64>
 80105f0:	3501      	adds	r5, #1
 80105f2:	b2ed      	uxtb	r5, r5
 80105f4:	e7d7      	b.n	80105a6 <_scanf_float+0x192>
 80105f6:	f1ba 0f01 	cmp.w	sl, #1
 80105fa:	f47f af3d 	bne.w	8010478 <_scanf_float+0x64>
 80105fe:	f04f 0a02 	mov.w	sl, #2
 8010602:	e7d0      	b.n	80105a6 <_scanf_float+0x192>
 8010604:	b97d      	cbnz	r5, 8010626 <_scanf_float+0x212>
 8010606:	f1b9 0f00 	cmp.w	r9, #0
 801060a:	f47f af38 	bne.w	801047e <_scanf_float+0x6a>
 801060e:	6822      	ldr	r2, [r4, #0]
 8010610:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8010614:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8010618:	f040 8103 	bne.w	8010822 <_scanf_float+0x40e>
 801061c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010620:	6022      	str	r2, [r4, #0]
 8010622:	2501      	movs	r5, #1
 8010624:	e7bf      	b.n	80105a6 <_scanf_float+0x192>
 8010626:	2d03      	cmp	r5, #3
 8010628:	d0e2      	beq.n	80105f0 <_scanf_float+0x1dc>
 801062a:	2d05      	cmp	r5, #5
 801062c:	e7de      	b.n	80105ec <_scanf_float+0x1d8>
 801062e:	2d02      	cmp	r5, #2
 8010630:	f47f af22 	bne.w	8010478 <_scanf_float+0x64>
 8010634:	2503      	movs	r5, #3
 8010636:	e7b6      	b.n	80105a6 <_scanf_float+0x192>
 8010638:	2d06      	cmp	r5, #6
 801063a:	f47f af1d 	bne.w	8010478 <_scanf_float+0x64>
 801063e:	2507      	movs	r5, #7
 8010640:	e7b1      	b.n	80105a6 <_scanf_float+0x192>
 8010642:	6822      	ldr	r2, [r4, #0]
 8010644:	0591      	lsls	r1, r2, #22
 8010646:	f57f af17 	bpl.w	8010478 <_scanf_float+0x64>
 801064a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801064e:	6022      	str	r2, [r4, #0]
 8010650:	f8cd 9008 	str.w	r9, [sp, #8]
 8010654:	e7a7      	b.n	80105a6 <_scanf_float+0x192>
 8010656:	6822      	ldr	r2, [r4, #0]
 8010658:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801065c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8010660:	d006      	beq.n	8010670 <_scanf_float+0x25c>
 8010662:	0550      	lsls	r0, r2, #21
 8010664:	f57f af08 	bpl.w	8010478 <_scanf_float+0x64>
 8010668:	f1b9 0f00 	cmp.w	r9, #0
 801066c:	f000 80d9 	beq.w	8010822 <_scanf_float+0x40e>
 8010670:	0591      	lsls	r1, r2, #22
 8010672:	bf58      	it	pl
 8010674:	9902      	ldrpl	r1, [sp, #8]
 8010676:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801067a:	bf58      	it	pl
 801067c:	eba9 0101 	subpl.w	r1, r9, r1
 8010680:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8010684:	bf58      	it	pl
 8010686:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801068a:	6022      	str	r2, [r4, #0]
 801068c:	f04f 0900 	mov.w	r9, #0
 8010690:	e789      	b.n	80105a6 <_scanf_float+0x192>
 8010692:	f04f 0a03 	mov.w	sl, #3
 8010696:	e786      	b.n	80105a6 <_scanf_float+0x192>
 8010698:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801069c:	4639      	mov	r1, r7
 801069e:	4640      	mov	r0, r8
 80106a0:	4798      	blx	r3
 80106a2:	2800      	cmp	r0, #0
 80106a4:	f43f aedb 	beq.w	801045e <_scanf_float+0x4a>
 80106a8:	e6e6      	b.n	8010478 <_scanf_float+0x64>
 80106aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80106ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80106b2:	463a      	mov	r2, r7
 80106b4:	4640      	mov	r0, r8
 80106b6:	4798      	blx	r3
 80106b8:	6923      	ldr	r3, [r4, #16]
 80106ba:	3b01      	subs	r3, #1
 80106bc:	6123      	str	r3, [r4, #16]
 80106be:	e6e8      	b.n	8010492 <_scanf_float+0x7e>
 80106c0:	1e6b      	subs	r3, r5, #1
 80106c2:	2b06      	cmp	r3, #6
 80106c4:	d824      	bhi.n	8010710 <_scanf_float+0x2fc>
 80106c6:	2d02      	cmp	r5, #2
 80106c8:	d836      	bhi.n	8010738 <_scanf_float+0x324>
 80106ca:	9b01      	ldr	r3, [sp, #4]
 80106cc:	429e      	cmp	r6, r3
 80106ce:	f67f aee4 	bls.w	801049a <_scanf_float+0x86>
 80106d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80106d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80106da:	463a      	mov	r2, r7
 80106dc:	4640      	mov	r0, r8
 80106de:	4798      	blx	r3
 80106e0:	6923      	ldr	r3, [r4, #16]
 80106e2:	3b01      	subs	r3, #1
 80106e4:	6123      	str	r3, [r4, #16]
 80106e6:	e7f0      	b.n	80106ca <_scanf_float+0x2b6>
 80106e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80106ec:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80106f0:	463a      	mov	r2, r7
 80106f2:	4640      	mov	r0, r8
 80106f4:	4798      	blx	r3
 80106f6:	6923      	ldr	r3, [r4, #16]
 80106f8:	3b01      	subs	r3, #1
 80106fa:	6123      	str	r3, [r4, #16]
 80106fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010700:	fa5f fa8a 	uxtb.w	sl, sl
 8010704:	f1ba 0f02 	cmp.w	sl, #2
 8010708:	d1ee      	bne.n	80106e8 <_scanf_float+0x2d4>
 801070a:	3d03      	subs	r5, #3
 801070c:	b2ed      	uxtb	r5, r5
 801070e:	1b76      	subs	r6, r6, r5
 8010710:	6823      	ldr	r3, [r4, #0]
 8010712:	05da      	lsls	r2, r3, #23
 8010714:	d530      	bpl.n	8010778 <_scanf_float+0x364>
 8010716:	055b      	lsls	r3, r3, #21
 8010718:	d511      	bpl.n	801073e <_scanf_float+0x32a>
 801071a:	9b01      	ldr	r3, [sp, #4]
 801071c:	429e      	cmp	r6, r3
 801071e:	f67f aebc 	bls.w	801049a <_scanf_float+0x86>
 8010722:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010726:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801072a:	463a      	mov	r2, r7
 801072c:	4640      	mov	r0, r8
 801072e:	4798      	blx	r3
 8010730:	6923      	ldr	r3, [r4, #16]
 8010732:	3b01      	subs	r3, #1
 8010734:	6123      	str	r3, [r4, #16]
 8010736:	e7f0      	b.n	801071a <_scanf_float+0x306>
 8010738:	46aa      	mov	sl, r5
 801073a:	46b3      	mov	fp, r6
 801073c:	e7de      	b.n	80106fc <_scanf_float+0x2e8>
 801073e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010742:	6923      	ldr	r3, [r4, #16]
 8010744:	2965      	cmp	r1, #101	@ 0x65
 8010746:	f103 33ff 	add.w	r3, r3, #4294967295
 801074a:	f106 35ff 	add.w	r5, r6, #4294967295
 801074e:	6123      	str	r3, [r4, #16]
 8010750:	d00c      	beq.n	801076c <_scanf_float+0x358>
 8010752:	2945      	cmp	r1, #69	@ 0x45
 8010754:	d00a      	beq.n	801076c <_scanf_float+0x358>
 8010756:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801075a:	463a      	mov	r2, r7
 801075c:	4640      	mov	r0, r8
 801075e:	4798      	blx	r3
 8010760:	6923      	ldr	r3, [r4, #16]
 8010762:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010766:	3b01      	subs	r3, #1
 8010768:	1eb5      	subs	r5, r6, #2
 801076a:	6123      	str	r3, [r4, #16]
 801076c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010770:	463a      	mov	r2, r7
 8010772:	4640      	mov	r0, r8
 8010774:	4798      	blx	r3
 8010776:	462e      	mov	r6, r5
 8010778:	6822      	ldr	r2, [r4, #0]
 801077a:	f012 0210 	ands.w	r2, r2, #16
 801077e:	d001      	beq.n	8010784 <_scanf_float+0x370>
 8010780:	2000      	movs	r0, #0
 8010782:	e68b      	b.n	801049c <_scanf_float+0x88>
 8010784:	7032      	strb	r2, [r6, #0]
 8010786:	6823      	ldr	r3, [r4, #0]
 8010788:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801078c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010790:	d11c      	bne.n	80107cc <_scanf_float+0x3b8>
 8010792:	9b02      	ldr	r3, [sp, #8]
 8010794:	454b      	cmp	r3, r9
 8010796:	eba3 0209 	sub.w	r2, r3, r9
 801079a:	d123      	bne.n	80107e4 <_scanf_float+0x3d0>
 801079c:	2200      	movs	r2, #0
 801079e:	9901      	ldr	r1, [sp, #4]
 80107a0:	4640      	mov	r0, r8
 80107a2:	f7ff f981 	bl	800faa8 <_strtod_r>
 80107a6:	9b03      	ldr	r3, [sp, #12]
 80107a8:	6825      	ldr	r5, [r4, #0]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	f015 0f02 	tst.w	r5, #2
 80107b0:	4606      	mov	r6, r0
 80107b2:	460f      	mov	r7, r1
 80107b4:	f103 0204 	add.w	r2, r3, #4
 80107b8:	d01f      	beq.n	80107fa <_scanf_float+0x3e6>
 80107ba:	9903      	ldr	r1, [sp, #12]
 80107bc:	600a      	str	r2, [r1, #0]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	e9c3 6700 	strd	r6, r7, [r3]
 80107c4:	68e3      	ldr	r3, [r4, #12]
 80107c6:	3301      	adds	r3, #1
 80107c8:	60e3      	str	r3, [r4, #12]
 80107ca:	e7d9      	b.n	8010780 <_scanf_float+0x36c>
 80107cc:	9b04      	ldr	r3, [sp, #16]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d0e4      	beq.n	801079c <_scanf_float+0x388>
 80107d2:	9905      	ldr	r1, [sp, #20]
 80107d4:	230a      	movs	r3, #10
 80107d6:	3101      	adds	r1, #1
 80107d8:	4640      	mov	r0, r8
 80107da:	f002 fa33 	bl	8012c44 <_strtol_r>
 80107de:	9b04      	ldr	r3, [sp, #16]
 80107e0:	9e05      	ldr	r6, [sp, #20]
 80107e2:	1ac2      	subs	r2, r0, r3
 80107e4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80107e8:	429e      	cmp	r6, r3
 80107ea:	bf28      	it	cs
 80107ec:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80107f0:	490d      	ldr	r1, [pc, #52]	@ (8010828 <_scanf_float+0x414>)
 80107f2:	4630      	mov	r0, r6
 80107f4:	f000 f8de 	bl	80109b4 <siprintf>
 80107f8:	e7d0      	b.n	801079c <_scanf_float+0x388>
 80107fa:	076d      	lsls	r5, r5, #29
 80107fc:	d4dd      	bmi.n	80107ba <_scanf_float+0x3a6>
 80107fe:	9d03      	ldr	r5, [sp, #12]
 8010800:	602a      	str	r2, [r5, #0]
 8010802:	681d      	ldr	r5, [r3, #0]
 8010804:	4602      	mov	r2, r0
 8010806:	460b      	mov	r3, r1
 8010808:	f7f0 f9b0 	bl	8000b6c <__aeabi_dcmpun>
 801080c:	b120      	cbz	r0, 8010818 <_scanf_float+0x404>
 801080e:	4807      	ldr	r0, [pc, #28]	@ (801082c <_scanf_float+0x418>)
 8010810:	f000 fa36 	bl	8010c80 <nanf>
 8010814:	6028      	str	r0, [r5, #0]
 8010816:	e7d5      	b.n	80107c4 <_scanf_float+0x3b0>
 8010818:	4630      	mov	r0, r6
 801081a:	4639      	mov	r1, r7
 801081c:	f7f0 fa04 	bl	8000c28 <__aeabi_d2f>
 8010820:	e7f8      	b.n	8010814 <_scanf_float+0x400>
 8010822:	f04f 0900 	mov.w	r9, #0
 8010826:	e62e      	b.n	8010486 <_scanf_float+0x72>
 8010828:	08014b94 	.word	0x08014b94
 801082c:	08014c4d 	.word	0x08014c4d

08010830 <std>:
 8010830:	2300      	movs	r3, #0
 8010832:	b510      	push	{r4, lr}
 8010834:	4604      	mov	r4, r0
 8010836:	e9c0 3300 	strd	r3, r3, [r0]
 801083a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801083e:	6083      	str	r3, [r0, #8]
 8010840:	8181      	strh	r1, [r0, #12]
 8010842:	6643      	str	r3, [r0, #100]	@ 0x64
 8010844:	81c2      	strh	r2, [r0, #14]
 8010846:	6183      	str	r3, [r0, #24]
 8010848:	4619      	mov	r1, r3
 801084a:	2208      	movs	r2, #8
 801084c:	305c      	adds	r0, #92	@ 0x5c
 801084e:	f000 f914 	bl	8010a7a <memset>
 8010852:	4b0d      	ldr	r3, [pc, #52]	@ (8010888 <std+0x58>)
 8010854:	6263      	str	r3, [r4, #36]	@ 0x24
 8010856:	4b0d      	ldr	r3, [pc, #52]	@ (801088c <std+0x5c>)
 8010858:	62a3      	str	r3, [r4, #40]	@ 0x28
 801085a:	4b0d      	ldr	r3, [pc, #52]	@ (8010890 <std+0x60>)
 801085c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801085e:	4b0d      	ldr	r3, [pc, #52]	@ (8010894 <std+0x64>)
 8010860:	6323      	str	r3, [r4, #48]	@ 0x30
 8010862:	4b0d      	ldr	r3, [pc, #52]	@ (8010898 <std+0x68>)
 8010864:	6224      	str	r4, [r4, #32]
 8010866:	429c      	cmp	r4, r3
 8010868:	d006      	beq.n	8010878 <std+0x48>
 801086a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801086e:	4294      	cmp	r4, r2
 8010870:	d002      	beq.n	8010878 <std+0x48>
 8010872:	33d0      	adds	r3, #208	@ 0xd0
 8010874:	429c      	cmp	r4, r3
 8010876:	d105      	bne.n	8010884 <std+0x54>
 8010878:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801087c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010880:	f000 b9e6 	b.w	8010c50 <__retarget_lock_init_recursive>
 8010884:	bd10      	pop	{r4, pc}
 8010886:	bf00      	nop
 8010888:	080109f5 	.word	0x080109f5
 801088c:	08010a17 	.word	0x08010a17
 8010890:	08010a4f 	.word	0x08010a4f
 8010894:	08010a73 	.word	0x08010a73
 8010898:	20003bb0 	.word	0x20003bb0

0801089c <stdio_exit_handler>:
 801089c:	4a02      	ldr	r2, [pc, #8]	@ (80108a8 <stdio_exit_handler+0xc>)
 801089e:	4903      	ldr	r1, [pc, #12]	@ (80108ac <stdio_exit_handler+0x10>)
 80108a0:	4803      	ldr	r0, [pc, #12]	@ (80108b0 <stdio_exit_handler+0x14>)
 80108a2:	f000 b869 	b.w	8010978 <_fwalk_sglue>
 80108a6:	bf00      	nop
 80108a8:	20000020 	.word	0x20000020
 80108ac:	08013011 	.word	0x08013011
 80108b0:	2000019c 	.word	0x2000019c

080108b4 <cleanup_stdio>:
 80108b4:	6841      	ldr	r1, [r0, #4]
 80108b6:	4b0c      	ldr	r3, [pc, #48]	@ (80108e8 <cleanup_stdio+0x34>)
 80108b8:	4299      	cmp	r1, r3
 80108ba:	b510      	push	{r4, lr}
 80108bc:	4604      	mov	r4, r0
 80108be:	d001      	beq.n	80108c4 <cleanup_stdio+0x10>
 80108c0:	f002 fba6 	bl	8013010 <_fflush_r>
 80108c4:	68a1      	ldr	r1, [r4, #8]
 80108c6:	4b09      	ldr	r3, [pc, #36]	@ (80108ec <cleanup_stdio+0x38>)
 80108c8:	4299      	cmp	r1, r3
 80108ca:	d002      	beq.n	80108d2 <cleanup_stdio+0x1e>
 80108cc:	4620      	mov	r0, r4
 80108ce:	f002 fb9f 	bl	8013010 <_fflush_r>
 80108d2:	68e1      	ldr	r1, [r4, #12]
 80108d4:	4b06      	ldr	r3, [pc, #24]	@ (80108f0 <cleanup_stdio+0x3c>)
 80108d6:	4299      	cmp	r1, r3
 80108d8:	d004      	beq.n	80108e4 <cleanup_stdio+0x30>
 80108da:	4620      	mov	r0, r4
 80108dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108e0:	f002 bb96 	b.w	8013010 <_fflush_r>
 80108e4:	bd10      	pop	{r4, pc}
 80108e6:	bf00      	nop
 80108e8:	20003bb0 	.word	0x20003bb0
 80108ec:	20003c18 	.word	0x20003c18
 80108f0:	20003c80 	.word	0x20003c80

080108f4 <global_stdio_init.part.0>:
 80108f4:	b510      	push	{r4, lr}
 80108f6:	4b0b      	ldr	r3, [pc, #44]	@ (8010924 <global_stdio_init.part.0+0x30>)
 80108f8:	4c0b      	ldr	r4, [pc, #44]	@ (8010928 <global_stdio_init.part.0+0x34>)
 80108fa:	4a0c      	ldr	r2, [pc, #48]	@ (801092c <global_stdio_init.part.0+0x38>)
 80108fc:	601a      	str	r2, [r3, #0]
 80108fe:	4620      	mov	r0, r4
 8010900:	2200      	movs	r2, #0
 8010902:	2104      	movs	r1, #4
 8010904:	f7ff ff94 	bl	8010830 <std>
 8010908:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801090c:	2201      	movs	r2, #1
 801090e:	2109      	movs	r1, #9
 8010910:	f7ff ff8e 	bl	8010830 <std>
 8010914:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010918:	2202      	movs	r2, #2
 801091a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801091e:	2112      	movs	r1, #18
 8010920:	f7ff bf86 	b.w	8010830 <std>
 8010924:	20003ce8 	.word	0x20003ce8
 8010928:	20003bb0 	.word	0x20003bb0
 801092c:	0801089d 	.word	0x0801089d

08010930 <__sfp_lock_acquire>:
 8010930:	4801      	ldr	r0, [pc, #4]	@ (8010938 <__sfp_lock_acquire+0x8>)
 8010932:	f000 b98e 	b.w	8010c52 <__retarget_lock_acquire_recursive>
 8010936:	bf00      	nop
 8010938:	20003cf1 	.word	0x20003cf1

0801093c <__sfp_lock_release>:
 801093c:	4801      	ldr	r0, [pc, #4]	@ (8010944 <__sfp_lock_release+0x8>)
 801093e:	f000 b989 	b.w	8010c54 <__retarget_lock_release_recursive>
 8010942:	bf00      	nop
 8010944:	20003cf1 	.word	0x20003cf1

08010948 <__sinit>:
 8010948:	b510      	push	{r4, lr}
 801094a:	4604      	mov	r4, r0
 801094c:	f7ff fff0 	bl	8010930 <__sfp_lock_acquire>
 8010950:	6a23      	ldr	r3, [r4, #32]
 8010952:	b11b      	cbz	r3, 801095c <__sinit+0x14>
 8010954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010958:	f7ff bff0 	b.w	801093c <__sfp_lock_release>
 801095c:	4b04      	ldr	r3, [pc, #16]	@ (8010970 <__sinit+0x28>)
 801095e:	6223      	str	r3, [r4, #32]
 8010960:	4b04      	ldr	r3, [pc, #16]	@ (8010974 <__sinit+0x2c>)
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d1f5      	bne.n	8010954 <__sinit+0xc>
 8010968:	f7ff ffc4 	bl	80108f4 <global_stdio_init.part.0>
 801096c:	e7f2      	b.n	8010954 <__sinit+0xc>
 801096e:	bf00      	nop
 8010970:	080108b5 	.word	0x080108b5
 8010974:	20003ce8 	.word	0x20003ce8

08010978 <_fwalk_sglue>:
 8010978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801097c:	4607      	mov	r7, r0
 801097e:	4688      	mov	r8, r1
 8010980:	4614      	mov	r4, r2
 8010982:	2600      	movs	r6, #0
 8010984:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010988:	f1b9 0901 	subs.w	r9, r9, #1
 801098c:	d505      	bpl.n	801099a <_fwalk_sglue+0x22>
 801098e:	6824      	ldr	r4, [r4, #0]
 8010990:	2c00      	cmp	r4, #0
 8010992:	d1f7      	bne.n	8010984 <_fwalk_sglue+0xc>
 8010994:	4630      	mov	r0, r6
 8010996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801099a:	89ab      	ldrh	r3, [r5, #12]
 801099c:	2b01      	cmp	r3, #1
 801099e:	d907      	bls.n	80109b0 <_fwalk_sglue+0x38>
 80109a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80109a4:	3301      	adds	r3, #1
 80109a6:	d003      	beq.n	80109b0 <_fwalk_sglue+0x38>
 80109a8:	4629      	mov	r1, r5
 80109aa:	4638      	mov	r0, r7
 80109ac:	47c0      	blx	r8
 80109ae:	4306      	orrs	r6, r0
 80109b0:	3568      	adds	r5, #104	@ 0x68
 80109b2:	e7e9      	b.n	8010988 <_fwalk_sglue+0x10>

080109b4 <siprintf>:
 80109b4:	b40e      	push	{r1, r2, r3}
 80109b6:	b500      	push	{lr}
 80109b8:	b09c      	sub	sp, #112	@ 0x70
 80109ba:	ab1d      	add	r3, sp, #116	@ 0x74
 80109bc:	9002      	str	r0, [sp, #8]
 80109be:	9006      	str	r0, [sp, #24]
 80109c0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80109c4:	4809      	ldr	r0, [pc, #36]	@ (80109ec <siprintf+0x38>)
 80109c6:	9107      	str	r1, [sp, #28]
 80109c8:	9104      	str	r1, [sp, #16]
 80109ca:	4909      	ldr	r1, [pc, #36]	@ (80109f0 <siprintf+0x3c>)
 80109cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80109d0:	9105      	str	r1, [sp, #20]
 80109d2:	6800      	ldr	r0, [r0, #0]
 80109d4:	9301      	str	r3, [sp, #4]
 80109d6:	a902      	add	r1, sp, #8
 80109d8:	f002 f99e 	bl	8012d18 <_svfiprintf_r>
 80109dc:	9b02      	ldr	r3, [sp, #8]
 80109de:	2200      	movs	r2, #0
 80109e0:	701a      	strb	r2, [r3, #0]
 80109e2:	b01c      	add	sp, #112	@ 0x70
 80109e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80109e8:	b003      	add	sp, #12
 80109ea:	4770      	bx	lr
 80109ec:	20000198 	.word	0x20000198
 80109f0:	ffff0208 	.word	0xffff0208

080109f4 <__sread>:
 80109f4:	b510      	push	{r4, lr}
 80109f6:	460c      	mov	r4, r1
 80109f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109fc:	f000 f8da 	bl	8010bb4 <_read_r>
 8010a00:	2800      	cmp	r0, #0
 8010a02:	bfab      	itete	ge
 8010a04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010a06:	89a3      	ldrhlt	r3, [r4, #12]
 8010a08:	181b      	addge	r3, r3, r0
 8010a0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010a0e:	bfac      	ite	ge
 8010a10:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010a12:	81a3      	strhlt	r3, [r4, #12]
 8010a14:	bd10      	pop	{r4, pc}

08010a16 <__swrite>:
 8010a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a1a:	461f      	mov	r7, r3
 8010a1c:	898b      	ldrh	r3, [r1, #12]
 8010a1e:	05db      	lsls	r3, r3, #23
 8010a20:	4605      	mov	r5, r0
 8010a22:	460c      	mov	r4, r1
 8010a24:	4616      	mov	r6, r2
 8010a26:	d505      	bpl.n	8010a34 <__swrite+0x1e>
 8010a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a2c:	2302      	movs	r3, #2
 8010a2e:	2200      	movs	r2, #0
 8010a30:	f000 f8ae 	bl	8010b90 <_lseek_r>
 8010a34:	89a3      	ldrh	r3, [r4, #12]
 8010a36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010a3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010a3e:	81a3      	strh	r3, [r4, #12]
 8010a40:	4632      	mov	r2, r6
 8010a42:	463b      	mov	r3, r7
 8010a44:	4628      	mov	r0, r5
 8010a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010a4a:	f000 b8c5 	b.w	8010bd8 <_write_r>

08010a4e <__sseek>:
 8010a4e:	b510      	push	{r4, lr}
 8010a50:	460c      	mov	r4, r1
 8010a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a56:	f000 f89b 	bl	8010b90 <_lseek_r>
 8010a5a:	1c43      	adds	r3, r0, #1
 8010a5c:	89a3      	ldrh	r3, [r4, #12]
 8010a5e:	bf15      	itete	ne
 8010a60:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010a62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010a66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010a6a:	81a3      	strheq	r3, [r4, #12]
 8010a6c:	bf18      	it	ne
 8010a6e:	81a3      	strhne	r3, [r4, #12]
 8010a70:	bd10      	pop	{r4, pc}

08010a72 <__sclose>:
 8010a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a76:	f000 b87b 	b.w	8010b70 <_close_r>

08010a7a <memset>:
 8010a7a:	4402      	add	r2, r0
 8010a7c:	4603      	mov	r3, r0
 8010a7e:	4293      	cmp	r3, r2
 8010a80:	d100      	bne.n	8010a84 <memset+0xa>
 8010a82:	4770      	bx	lr
 8010a84:	f803 1b01 	strb.w	r1, [r3], #1
 8010a88:	e7f9      	b.n	8010a7e <memset+0x4>

08010a8a <strncmp>:
 8010a8a:	b510      	push	{r4, lr}
 8010a8c:	b16a      	cbz	r2, 8010aaa <strncmp+0x20>
 8010a8e:	3901      	subs	r1, #1
 8010a90:	1884      	adds	r4, r0, r2
 8010a92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010a96:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010a9a:	429a      	cmp	r2, r3
 8010a9c:	d103      	bne.n	8010aa6 <strncmp+0x1c>
 8010a9e:	42a0      	cmp	r0, r4
 8010aa0:	d001      	beq.n	8010aa6 <strncmp+0x1c>
 8010aa2:	2a00      	cmp	r2, #0
 8010aa4:	d1f5      	bne.n	8010a92 <strncmp+0x8>
 8010aa6:	1ad0      	subs	r0, r2, r3
 8010aa8:	bd10      	pop	{r4, pc}
 8010aaa:	4610      	mov	r0, r2
 8010aac:	e7fc      	b.n	8010aa8 <strncmp+0x1e>
	...

08010ab0 <strtok>:
 8010ab0:	4b16      	ldr	r3, [pc, #88]	@ (8010b0c <strtok+0x5c>)
 8010ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ab6:	681f      	ldr	r7, [r3, #0]
 8010ab8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8010aba:	4605      	mov	r5, r0
 8010abc:	460e      	mov	r6, r1
 8010abe:	b9ec      	cbnz	r4, 8010afc <strtok+0x4c>
 8010ac0:	2050      	movs	r0, #80	@ 0x50
 8010ac2:	f001 fad5 	bl	8012070 <malloc>
 8010ac6:	4602      	mov	r2, r0
 8010ac8:	6478      	str	r0, [r7, #68]	@ 0x44
 8010aca:	b920      	cbnz	r0, 8010ad6 <strtok+0x26>
 8010acc:	4b10      	ldr	r3, [pc, #64]	@ (8010b10 <strtok+0x60>)
 8010ace:	4811      	ldr	r0, [pc, #68]	@ (8010b14 <strtok+0x64>)
 8010ad0:	215b      	movs	r1, #91	@ 0x5b
 8010ad2:	f000 f8d9 	bl	8010c88 <__assert_func>
 8010ad6:	e9c0 4400 	strd	r4, r4, [r0]
 8010ada:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8010ade:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8010ae2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8010ae6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8010aea:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8010aee:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8010af2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8010af6:	6184      	str	r4, [r0, #24]
 8010af8:	7704      	strb	r4, [r0, #28]
 8010afa:	6244      	str	r4, [r0, #36]	@ 0x24
 8010afc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010afe:	4631      	mov	r1, r6
 8010b00:	4628      	mov	r0, r5
 8010b02:	2301      	movs	r3, #1
 8010b04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b08:	f000 b806 	b.w	8010b18 <__strtok_r>
 8010b0c:	20000198 	.word	0x20000198
 8010b10:	08014b99 	.word	0x08014b99
 8010b14:	08014bb0 	.word	0x08014bb0

08010b18 <__strtok_r>:
 8010b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b1a:	4604      	mov	r4, r0
 8010b1c:	b908      	cbnz	r0, 8010b22 <__strtok_r+0xa>
 8010b1e:	6814      	ldr	r4, [r2, #0]
 8010b20:	b144      	cbz	r4, 8010b34 <__strtok_r+0x1c>
 8010b22:	4620      	mov	r0, r4
 8010b24:	f814 5b01 	ldrb.w	r5, [r4], #1
 8010b28:	460f      	mov	r7, r1
 8010b2a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8010b2e:	b91e      	cbnz	r6, 8010b38 <__strtok_r+0x20>
 8010b30:	b965      	cbnz	r5, 8010b4c <__strtok_r+0x34>
 8010b32:	6015      	str	r5, [r2, #0]
 8010b34:	2000      	movs	r0, #0
 8010b36:	e005      	b.n	8010b44 <__strtok_r+0x2c>
 8010b38:	42b5      	cmp	r5, r6
 8010b3a:	d1f6      	bne.n	8010b2a <__strtok_r+0x12>
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d1f0      	bne.n	8010b22 <__strtok_r+0xa>
 8010b40:	6014      	str	r4, [r2, #0]
 8010b42:	7003      	strb	r3, [r0, #0]
 8010b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b46:	461c      	mov	r4, r3
 8010b48:	e00c      	b.n	8010b64 <__strtok_r+0x4c>
 8010b4a:	b915      	cbnz	r5, 8010b52 <__strtok_r+0x3a>
 8010b4c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010b50:	460e      	mov	r6, r1
 8010b52:	f816 5b01 	ldrb.w	r5, [r6], #1
 8010b56:	42ab      	cmp	r3, r5
 8010b58:	d1f7      	bne.n	8010b4a <__strtok_r+0x32>
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d0f3      	beq.n	8010b46 <__strtok_r+0x2e>
 8010b5e:	2300      	movs	r3, #0
 8010b60:	f804 3c01 	strb.w	r3, [r4, #-1]
 8010b64:	6014      	str	r4, [r2, #0]
 8010b66:	e7ed      	b.n	8010b44 <__strtok_r+0x2c>

08010b68 <_localeconv_r>:
 8010b68:	4800      	ldr	r0, [pc, #0]	@ (8010b6c <_localeconv_r+0x4>)
 8010b6a:	4770      	bx	lr
 8010b6c:	2000011c 	.word	0x2000011c

08010b70 <_close_r>:
 8010b70:	b538      	push	{r3, r4, r5, lr}
 8010b72:	4d06      	ldr	r5, [pc, #24]	@ (8010b8c <_close_r+0x1c>)
 8010b74:	2300      	movs	r3, #0
 8010b76:	4604      	mov	r4, r0
 8010b78:	4608      	mov	r0, r1
 8010b7a:	602b      	str	r3, [r5, #0]
 8010b7c:	f7f7 ff7b 	bl	8008a76 <_close>
 8010b80:	1c43      	adds	r3, r0, #1
 8010b82:	d102      	bne.n	8010b8a <_close_r+0x1a>
 8010b84:	682b      	ldr	r3, [r5, #0]
 8010b86:	b103      	cbz	r3, 8010b8a <_close_r+0x1a>
 8010b88:	6023      	str	r3, [r4, #0]
 8010b8a:	bd38      	pop	{r3, r4, r5, pc}
 8010b8c:	20003cec 	.word	0x20003cec

08010b90 <_lseek_r>:
 8010b90:	b538      	push	{r3, r4, r5, lr}
 8010b92:	4d07      	ldr	r5, [pc, #28]	@ (8010bb0 <_lseek_r+0x20>)
 8010b94:	4604      	mov	r4, r0
 8010b96:	4608      	mov	r0, r1
 8010b98:	4611      	mov	r1, r2
 8010b9a:	2200      	movs	r2, #0
 8010b9c:	602a      	str	r2, [r5, #0]
 8010b9e:	461a      	mov	r2, r3
 8010ba0:	f7f7 ff8d 	bl	8008abe <_lseek>
 8010ba4:	1c43      	adds	r3, r0, #1
 8010ba6:	d102      	bne.n	8010bae <_lseek_r+0x1e>
 8010ba8:	682b      	ldr	r3, [r5, #0]
 8010baa:	b103      	cbz	r3, 8010bae <_lseek_r+0x1e>
 8010bac:	6023      	str	r3, [r4, #0]
 8010bae:	bd38      	pop	{r3, r4, r5, pc}
 8010bb0:	20003cec 	.word	0x20003cec

08010bb4 <_read_r>:
 8010bb4:	b538      	push	{r3, r4, r5, lr}
 8010bb6:	4d07      	ldr	r5, [pc, #28]	@ (8010bd4 <_read_r+0x20>)
 8010bb8:	4604      	mov	r4, r0
 8010bba:	4608      	mov	r0, r1
 8010bbc:	4611      	mov	r1, r2
 8010bbe:	2200      	movs	r2, #0
 8010bc0:	602a      	str	r2, [r5, #0]
 8010bc2:	461a      	mov	r2, r3
 8010bc4:	f7f7 ff1e 	bl	8008a04 <_read>
 8010bc8:	1c43      	adds	r3, r0, #1
 8010bca:	d102      	bne.n	8010bd2 <_read_r+0x1e>
 8010bcc:	682b      	ldr	r3, [r5, #0]
 8010bce:	b103      	cbz	r3, 8010bd2 <_read_r+0x1e>
 8010bd0:	6023      	str	r3, [r4, #0]
 8010bd2:	bd38      	pop	{r3, r4, r5, pc}
 8010bd4:	20003cec 	.word	0x20003cec

08010bd8 <_write_r>:
 8010bd8:	b538      	push	{r3, r4, r5, lr}
 8010bda:	4d07      	ldr	r5, [pc, #28]	@ (8010bf8 <_write_r+0x20>)
 8010bdc:	4604      	mov	r4, r0
 8010bde:	4608      	mov	r0, r1
 8010be0:	4611      	mov	r1, r2
 8010be2:	2200      	movs	r2, #0
 8010be4:	602a      	str	r2, [r5, #0]
 8010be6:	461a      	mov	r2, r3
 8010be8:	f7f7 ff29 	bl	8008a3e <_write>
 8010bec:	1c43      	adds	r3, r0, #1
 8010bee:	d102      	bne.n	8010bf6 <_write_r+0x1e>
 8010bf0:	682b      	ldr	r3, [r5, #0]
 8010bf2:	b103      	cbz	r3, 8010bf6 <_write_r+0x1e>
 8010bf4:	6023      	str	r3, [r4, #0]
 8010bf6:	bd38      	pop	{r3, r4, r5, pc}
 8010bf8:	20003cec 	.word	0x20003cec

08010bfc <__errno>:
 8010bfc:	4b01      	ldr	r3, [pc, #4]	@ (8010c04 <__errno+0x8>)
 8010bfe:	6818      	ldr	r0, [r3, #0]
 8010c00:	4770      	bx	lr
 8010c02:	bf00      	nop
 8010c04:	20000198 	.word	0x20000198

08010c08 <__libc_init_array>:
 8010c08:	b570      	push	{r4, r5, r6, lr}
 8010c0a:	4d0d      	ldr	r5, [pc, #52]	@ (8010c40 <__libc_init_array+0x38>)
 8010c0c:	4c0d      	ldr	r4, [pc, #52]	@ (8010c44 <__libc_init_array+0x3c>)
 8010c0e:	1b64      	subs	r4, r4, r5
 8010c10:	10a4      	asrs	r4, r4, #2
 8010c12:	2600      	movs	r6, #0
 8010c14:	42a6      	cmp	r6, r4
 8010c16:	d109      	bne.n	8010c2c <__libc_init_array+0x24>
 8010c18:	4d0b      	ldr	r5, [pc, #44]	@ (8010c48 <__libc_init_array+0x40>)
 8010c1a:	4c0c      	ldr	r4, [pc, #48]	@ (8010c4c <__libc_init_array+0x44>)
 8010c1c:	f003 fcde 	bl	80145dc <_init>
 8010c20:	1b64      	subs	r4, r4, r5
 8010c22:	10a4      	asrs	r4, r4, #2
 8010c24:	2600      	movs	r6, #0
 8010c26:	42a6      	cmp	r6, r4
 8010c28:	d105      	bne.n	8010c36 <__libc_init_array+0x2e>
 8010c2a:	bd70      	pop	{r4, r5, r6, pc}
 8010c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c30:	4798      	blx	r3
 8010c32:	3601      	adds	r6, #1
 8010c34:	e7ee      	b.n	8010c14 <__libc_init_array+0xc>
 8010c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c3a:	4798      	blx	r3
 8010c3c:	3601      	adds	r6, #1
 8010c3e:	e7f2      	b.n	8010c26 <__libc_init_array+0x1e>
 8010c40:	0801538c 	.word	0x0801538c
 8010c44:	0801538c 	.word	0x0801538c
 8010c48:	0801538c 	.word	0x0801538c
 8010c4c:	08015390 	.word	0x08015390

08010c50 <__retarget_lock_init_recursive>:
 8010c50:	4770      	bx	lr

08010c52 <__retarget_lock_acquire_recursive>:
 8010c52:	4770      	bx	lr

08010c54 <__retarget_lock_release_recursive>:
 8010c54:	4770      	bx	lr

08010c56 <memcpy>:
 8010c56:	440a      	add	r2, r1
 8010c58:	4291      	cmp	r1, r2
 8010c5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8010c5e:	d100      	bne.n	8010c62 <memcpy+0xc>
 8010c60:	4770      	bx	lr
 8010c62:	b510      	push	{r4, lr}
 8010c64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010c6c:	4291      	cmp	r1, r2
 8010c6e:	d1f9      	bne.n	8010c64 <memcpy+0xe>
 8010c70:	bd10      	pop	{r4, pc}
	...

08010c74 <nan>:
 8010c74:	4901      	ldr	r1, [pc, #4]	@ (8010c7c <nan+0x8>)
 8010c76:	2000      	movs	r0, #0
 8010c78:	4770      	bx	lr
 8010c7a:	bf00      	nop
 8010c7c:	7ff80000 	.word	0x7ff80000

08010c80 <nanf>:
 8010c80:	4800      	ldr	r0, [pc, #0]	@ (8010c84 <nanf+0x4>)
 8010c82:	4770      	bx	lr
 8010c84:	7fc00000 	.word	0x7fc00000

08010c88 <__assert_func>:
 8010c88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010c8a:	4614      	mov	r4, r2
 8010c8c:	461a      	mov	r2, r3
 8010c8e:	4b09      	ldr	r3, [pc, #36]	@ (8010cb4 <__assert_func+0x2c>)
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	4605      	mov	r5, r0
 8010c94:	68d8      	ldr	r0, [r3, #12]
 8010c96:	b954      	cbnz	r4, 8010cae <__assert_func+0x26>
 8010c98:	4b07      	ldr	r3, [pc, #28]	@ (8010cb8 <__assert_func+0x30>)
 8010c9a:	461c      	mov	r4, r3
 8010c9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010ca0:	9100      	str	r1, [sp, #0]
 8010ca2:	462b      	mov	r3, r5
 8010ca4:	4905      	ldr	r1, [pc, #20]	@ (8010cbc <__assert_func+0x34>)
 8010ca6:	f002 f9db 	bl	8013060 <fiprintf>
 8010caa:	f002 fa15 	bl	80130d8 <abort>
 8010cae:	4b04      	ldr	r3, [pc, #16]	@ (8010cc0 <__assert_func+0x38>)
 8010cb0:	e7f4      	b.n	8010c9c <__assert_func+0x14>
 8010cb2:	bf00      	nop
 8010cb4:	20000198 	.word	0x20000198
 8010cb8:	08014c4d 	.word	0x08014c4d
 8010cbc:	08014c1f 	.word	0x08014c1f
 8010cc0:	08014c12 	.word	0x08014c12

08010cc4 <quorem>:
 8010cc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cc8:	6903      	ldr	r3, [r0, #16]
 8010cca:	690c      	ldr	r4, [r1, #16]
 8010ccc:	42a3      	cmp	r3, r4
 8010cce:	4607      	mov	r7, r0
 8010cd0:	db7e      	blt.n	8010dd0 <quorem+0x10c>
 8010cd2:	3c01      	subs	r4, #1
 8010cd4:	f101 0814 	add.w	r8, r1, #20
 8010cd8:	00a3      	lsls	r3, r4, #2
 8010cda:	f100 0514 	add.w	r5, r0, #20
 8010cde:	9300      	str	r3, [sp, #0]
 8010ce0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010ce4:	9301      	str	r3, [sp, #4]
 8010ce6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010cea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010cee:	3301      	adds	r3, #1
 8010cf0:	429a      	cmp	r2, r3
 8010cf2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010cf6:	fbb2 f6f3 	udiv	r6, r2, r3
 8010cfa:	d32e      	bcc.n	8010d5a <quorem+0x96>
 8010cfc:	f04f 0a00 	mov.w	sl, #0
 8010d00:	46c4      	mov	ip, r8
 8010d02:	46ae      	mov	lr, r5
 8010d04:	46d3      	mov	fp, sl
 8010d06:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010d0a:	b298      	uxth	r0, r3
 8010d0c:	fb06 a000 	mla	r0, r6, r0, sl
 8010d10:	0c02      	lsrs	r2, r0, #16
 8010d12:	0c1b      	lsrs	r3, r3, #16
 8010d14:	fb06 2303 	mla	r3, r6, r3, r2
 8010d18:	f8de 2000 	ldr.w	r2, [lr]
 8010d1c:	b280      	uxth	r0, r0
 8010d1e:	b292      	uxth	r2, r2
 8010d20:	1a12      	subs	r2, r2, r0
 8010d22:	445a      	add	r2, fp
 8010d24:	f8de 0000 	ldr.w	r0, [lr]
 8010d28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010d2c:	b29b      	uxth	r3, r3
 8010d2e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010d32:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010d36:	b292      	uxth	r2, r2
 8010d38:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010d3c:	45e1      	cmp	r9, ip
 8010d3e:	f84e 2b04 	str.w	r2, [lr], #4
 8010d42:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010d46:	d2de      	bcs.n	8010d06 <quorem+0x42>
 8010d48:	9b00      	ldr	r3, [sp, #0]
 8010d4a:	58eb      	ldr	r3, [r5, r3]
 8010d4c:	b92b      	cbnz	r3, 8010d5a <quorem+0x96>
 8010d4e:	9b01      	ldr	r3, [sp, #4]
 8010d50:	3b04      	subs	r3, #4
 8010d52:	429d      	cmp	r5, r3
 8010d54:	461a      	mov	r2, r3
 8010d56:	d32f      	bcc.n	8010db8 <quorem+0xf4>
 8010d58:	613c      	str	r4, [r7, #16]
 8010d5a:	4638      	mov	r0, r7
 8010d5c:	f001 fd14 	bl	8012788 <__mcmp>
 8010d60:	2800      	cmp	r0, #0
 8010d62:	db25      	blt.n	8010db0 <quorem+0xec>
 8010d64:	4629      	mov	r1, r5
 8010d66:	2000      	movs	r0, #0
 8010d68:	f858 2b04 	ldr.w	r2, [r8], #4
 8010d6c:	f8d1 c000 	ldr.w	ip, [r1]
 8010d70:	fa1f fe82 	uxth.w	lr, r2
 8010d74:	fa1f f38c 	uxth.w	r3, ip
 8010d78:	eba3 030e 	sub.w	r3, r3, lr
 8010d7c:	4403      	add	r3, r0
 8010d7e:	0c12      	lsrs	r2, r2, #16
 8010d80:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010d84:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010d88:	b29b      	uxth	r3, r3
 8010d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010d8e:	45c1      	cmp	r9, r8
 8010d90:	f841 3b04 	str.w	r3, [r1], #4
 8010d94:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010d98:	d2e6      	bcs.n	8010d68 <quorem+0xa4>
 8010d9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010d9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010da2:	b922      	cbnz	r2, 8010dae <quorem+0xea>
 8010da4:	3b04      	subs	r3, #4
 8010da6:	429d      	cmp	r5, r3
 8010da8:	461a      	mov	r2, r3
 8010daa:	d30b      	bcc.n	8010dc4 <quorem+0x100>
 8010dac:	613c      	str	r4, [r7, #16]
 8010dae:	3601      	adds	r6, #1
 8010db0:	4630      	mov	r0, r6
 8010db2:	b003      	add	sp, #12
 8010db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010db8:	6812      	ldr	r2, [r2, #0]
 8010dba:	3b04      	subs	r3, #4
 8010dbc:	2a00      	cmp	r2, #0
 8010dbe:	d1cb      	bne.n	8010d58 <quorem+0x94>
 8010dc0:	3c01      	subs	r4, #1
 8010dc2:	e7c6      	b.n	8010d52 <quorem+0x8e>
 8010dc4:	6812      	ldr	r2, [r2, #0]
 8010dc6:	3b04      	subs	r3, #4
 8010dc8:	2a00      	cmp	r2, #0
 8010dca:	d1ef      	bne.n	8010dac <quorem+0xe8>
 8010dcc:	3c01      	subs	r4, #1
 8010dce:	e7ea      	b.n	8010da6 <quorem+0xe2>
 8010dd0:	2000      	movs	r0, #0
 8010dd2:	e7ee      	b.n	8010db2 <quorem+0xee>
 8010dd4:	0000      	movs	r0, r0
	...

08010dd8 <_dtoa_r>:
 8010dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ddc:	69c7      	ldr	r7, [r0, #28]
 8010dde:	b097      	sub	sp, #92	@ 0x5c
 8010de0:	4614      	mov	r4, r2
 8010de2:	461d      	mov	r5, r3
 8010de4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8010de8:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8010dea:	4683      	mov	fp, r0
 8010dec:	b97f      	cbnz	r7, 8010e0e <_dtoa_r+0x36>
 8010dee:	2010      	movs	r0, #16
 8010df0:	f001 f93e 	bl	8012070 <malloc>
 8010df4:	4602      	mov	r2, r0
 8010df6:	f8cb 001c 	str.w	r0, [fp, #28]
 8010dfa:	b920      	cbnz	r0, 8010e06 <_dtoa_r+0x2e>
 8010dfc:	4ba8      	ldr	r3, [pc, #672]	@ (80110a0 <_dtoa_r+0x2c8>)
 8010dfe:	21ef      	movs	r1, #239	@ 0xef
 8010e00:	48a8      	ldr	r0, [pc, #672]	@ (80110a4 <_dtoa_r+0x2cc>)
 8010e02:	f7ff ff41 	bl	8010c88 <__assert_func>
 8010e06:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010e0a:	6007      	str	r7, [r0, #0]
 8010e0c:	60c7      	str	r7, [r0, #12]
 8010e0e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010e12:	6819      	ldr	r1, [r3, #0]
 8010e14:	b159      	cbz	r1, 8010e2e <_dtoa_r+0x56>
 8010e16:	685a      	ldr	r2, [r3, #4]
 8010e18:	604a      	str	r2, [r1, #4]
 8010e1a:	2301      	movs	r3, #1
 8010e1c:	4093      	lsls	r3, r2
 8010e1e:	608b      	str	r3, [r1, #8]
 8010e20:	4658      	mov	r0, fp
 8010e22:	f001 fa2d 	bl	8012280 <_Bfree>
 8010e26:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	601a      	str	r2, [r3, #0]
 8010e2e:	1e2b      	subs	r3, r5, #0
 8010e30:	bfb9      	ittee	lt
 8010e32:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010e36:	9303      	strlt	r3, [sp, #12]
 8010e38:	2300      	movge	r3, #0
 8010e3a:	6033      	strge	r3, [r6, #0]
 8010e3c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8010e40:	4b99      	ldr	r3, [pc, #612]	@ (80110a8 <_dtoa_r+0x2d0>)
 8010e42:	bfbc      	itt	lt
 8010e44:	2201      	movlt	r2, #1
 8010e46:	6032      	strlt	r2, [r6, #0]
 8010e48:	ea33 0308 	bics.w	r3, r3, r8
 8010e4c:	d112      	bne.n	8010e74 <_dtoa_r+0x9c>
 8010e4e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8010e50:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010e54:	6013      	str	r3, [r2, #0]
 8010e56:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8010e5a:	4323      	orrs	r3, r4
 8010e5c:	f000 8551 	beq.w	8011902 <_dtoa_r+0xb2a>
 8010e60:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8010e62:	f8df a248 	ldr.w	sl, [pc, #584]	@ 80110ac <_dtoa_r+0x2d4>
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	f000 8553 	beq.w	8011912 <_dtoa_r+0xb3a>
 8010e6c:	f10a 0303 	add.w	r3, sl, #3
 8010e70:	f000 bd4d 	b.w	801190e <_dtoa_r+0xb36>
 8010e74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010e78:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8010e7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010e80:	2200      	movs	r2, #0
 8010e82:	2300      	movs	r3, #0
 8010e84:	f7ef fe40 	bl	8000b08 <__aeabi_dcmpeq>
 8010e88:	4607      	mov	r7, r0
 8010e8a:	b158      	cbz	r0, 8010ea4 <_dtoa_r+0xcc>
 8010e8c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8010e8e:	2301      	movs	r3, #1
 8010e90:	6013      	str	r3, [r2, #0]
 8010e92:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8010e94:	b113      	cbz	r3, 8010e9c <_dtoa_r+0xc4>
 8010e96:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8010e98:	4b85      	ldr	r3, [pc, #532]	@ (80110b0 <_dtoa_r+0x2d8>)
 8010e9a:	6013      	str	r3, [r2, #0]
 8010e9c:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80110b4 <_dtoa_r+0x2dc>
 8010ea0:	f000 bd37 	b.w	8011912 <_dtoa_r+0xb3a>
 8010ea4:	ab14      	add	r3, sp, #80	@ 0x50
 8010ea6:	9301      	str	r3, [sp, #4]
 8010ea8:	ab15      	add	r3, sp, #84	@ 0x54
 8010eaa:	9300      	str	r3, [sp, #0]
 8010eac:	4658      	mov	r0, fp
 8010eae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8010eb2:	f001 fd81 	bl	80129b8 <__d2b>
 8010eb6:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8010eba:	4681      	mov	r9, r0
 8010ebc:	2e00      	cmp	r6, #0
 8010ebe:	d076      	beq.n	8010fae <_dtoa_r+0x1d6>
 8010ec0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010ec2:	9712      	str	r7, [sp, #72]	@ 0x48
 8010ec4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010ec8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010ecc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010ed0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010ed4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010ed8:	4619      	mov	r1, r3
 8010eda:	2200      	movs	r2, #0
 8010edc:	4b76      	ldr	r3, [pc, #472]	@ (80110b8 <_dtoa_r+0x2e0>)
 8010ede:	f7ef f9f3 	bl	80002c8 <__aeabi_dsub>
 8010ee2:	a369      	add	r3, pc, #420	@ (adr r3, 8011088 <_dtoa_r+0x2b0>)
 8010ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ee8:	f7ef fba6 	bl	8000638 <__aeabi_dmul>
 8010eec:	a368      	add	r3, pc, #416	@ (adr r3, 8011090 <_dtoa_r+0x2b8>)
 8010eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ef2:	f7ef f9eb 	bl	80002cc <__adddf3>
 8010ef6:	4604      	mov	r4, r0
 8010ef8:	4630      	mov	r0, r6
 8010efa:	460d      	mov	r5, r1
 8010efc:	f7ef fb32 	bl	8000564 <__aeabi_i2d>
 8010f00:	a365      	add	r3, pc, #404	@ (adr r3, 8011098 <_dtoa_r+0x2c0>)
 8010f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f06:	f7ef fb97 	bl	8000638 <__aeabi_dmul>
 8010f0a:	4602      	mov	r2, r0
 8010f0c:	460b      	mov	r3, r1
 8010f0e:	4620      	mov	r0, r4
 8010f10:	4629      	mov	r1, r5
 8010f12:	f7ef f9db 	bl	80002cc <__adddf3>
 8010f16:	4604      	mov	r4, r0
 8010f18:	460d      	mov	r5, r1
 8010f1a:	f7ef fe3d 	bl	8000b98 <__aeabi_d2iz>
 8010f1e:	2200      	movs	r2, #0
 8010f20:	4607      	mov	r7, r0
 8010f22:	2300      	movs	r3, #0
 8010f24:	4620      	mov	r0, r4
 8010f26:	4629      	mov	r1, r5
 8010f28:	f7ef fdf8 	bl	8000b1c <__aeabi_dcmplt>
 8010f2c:	b140      	cbz	r0, 8010f40 <_dtoa_r+0x168>
 8010f2e:	4638      	mov	r0, r7
 8010f30:	f7ef fb18 	bl	8000564 <__aeabi_i2d>
 8010f34:	4622      	mov	r2, r4
 8010f36:	462b      	mov	r3, r5
 8010f38:	f7ef fde6 	bl	8000b08 <__aeabi_dcmpeq>
 8010f3c:	b900      	cbnz	r0, 8010f40 <_dtoa_r+0x168>
 8010f3e:	3f01      	subs	r7, #1
 8010f40:	2f16      	cmp	r7, #22
 8010f42:	d852      	bhi.n	8010fea <_dtoa_r+0x212>
 8010f44:	4b5d      	ldr	r3, [pc, #372]	@ (80110bc <_dtoa_r+0x2e4>)
 8010f46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010f52:	f7ef fde3 	bl	8000b1c <__aeabi_dcmplt>
 8010f56:	2800      	cmp	r0, #0
 8010f58:	d049      	beq.n	8010fee <_dtoa_r+0x216>
 8010f5a:	3f01      	subs	r7, #1
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010f60:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010f62:	1b9b      	subs	r3, r3, r6
 8010f64:	1e5a      	subs	r2, r3, #1
 8010f66:	bf44      	itt	mi
 8010f68:	f1c3 0801 	rsbmi	r8, r3, #1
 8010f6c:	2300      	movmi	r3, #0
 8010f6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8010f70:	bf54      	ite	pl
 8010f72:	f04f 0800 	movpl.w	r8, #0
 8010f76:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8010f78:	2f00      	cmp	r7, #0
 8010f7a:	db3a      	blt.n	8010ff2 <_dtoa_r+0x21a>
 8010f7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f7e:	970e      	str	r7, [sp, #56]	@ 0x38
 8010f80:	443b      	add	r3, r7
 8010f82:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f84:	2300      	movs	r3, #0
 8010f86:	930a      	str	r3, [sp, #40]	@ 0x28
 8010f88:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8010f8a:	2b09      	cmp	r3, #9
 8010f8c:	d865      	bhi.n	801105a <_dtoa_r+0x282>
 8010f8e:	2b05      	cmp	r3, #5
 8010f90:	bfc4      	itt	gt
 8010f92:	3b04      	subgt	r3, #4
 8010f94:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8010f96:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8010f98:	f1a3 0302 	sub.w	r3, r3, #2
 8010f9c:	bfcc      	ite	gt
 8010f9e:	2400      	movgt	r4, #0
 8010fa0:	2401      	movle	r4, #1
 8010fa2:	2b03      	cmp	r3, #3
 8010fa4:	d864      	bhi.n	8011070 <_dtoa_r+0x298>
 8010fa6:	e8df f003 	tbb	[pc, r3]
 8010faa:	382b      	.short	0x382b
 8010fac:	5636      	.short	0x5636
 8010fae:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8010fb2:	441e      	add	r6, r3
 8010fb4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010fb8:	2b20      	cmp	r3, #32
 8010fba:	bfc1      	itttt	gt
 8010fbc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010fc0:	fa08 f803 	lslgt.w	r8, r8, r3
 8010fc4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010fc8:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010fcc:	bfd6      	itet	le
 8010fce:	f1c3 0320 	rsble	r3, r3, #32
 8010fd2:	ea48 0003 	orrgt.w	r0, r8, r3
 8010fd6:	fa04 f003 	lslle.w	r0, r4, r3
 8010fda:	f7ef fab3 	bl	8000544 <__aeabi_ui2d>
 8010fde:	2201      	movs	r2, #1
 8010fe0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010fe4:	3e01      	subs	r6, #1
 8010fe6:	9212      	str	r2, [sp, #72]	@ 0x48
 8010fe8:	e776      	b.n	8010ed8 <_dtoa_r+0x100>
 8010fea:	2301      	movs	r3, #1
 8010fec:	e7b7      	b.n	8010f5e <_dtoa_r+0x186>
 8010fee:	900f      	str	r0, [sp, #60]	@ 0x3c
 8010ff0:	e7b6      	b.n	8010f60 <_dtoa_r+0x188>
 8010ff2:	427b      	negs	r3, r7
 8010ff4:	930a      	str	r3, [sp, #40]	@ 0x28
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	eba8 0807 	sub.w	r8, r8, r7
 8010ffc:	930e      	str	r3, [sp, #56]	@ 0x38
 8010ffe:	e7c3      	b.n	8010f88 <_dtoa_r+0x1b0>
 8011000:	2300      	movs	r3, #0
 8011002:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011004:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011006:	2b00      	cmp	r3, #0
 8011008:	dc35      	bgt.n	8011076 <_dtoa_r+0x29e>
 801100a:	2301      	movs	r3, #1
 801100c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8011010:	461a      	mov	r2, r3
 8011012:	9221      	str	r2, [sp, #132]	@ 0x84
 8011014:	e00b      	b.n	801102e <_dtoa_r+0x256>
 8011016:	2301      	movs	r3, #1
 8011018:	e7f3      	b.n	8011002 <_dtoa_r+0x22a>
 801101a:	2300      	movs	r3, #0
 801101c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801101e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011020:	18fb      	adds	r3, r7, r3
 8011022:	9308      	str	r3, [sp, #32]
 8011024:	3301      	adds	r3, #1
 8011026:	2b01      	cmp	r3, #1
 8011028:	9307      	str	r3, [sp, #28]
 801102a:	bfb8      	it	lt
 801102c:	2301      	movlt	r3, #1
 801102e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8011032:	2100      	movs	r1, #0
 8011034:	2204      	movs	r2, #4
 8011036:	f102 0514 	add.w	r5, r2, #20
 801103a:	429d      	cmp	r5, r3
 801103c:	d91f      	bls.n	801107e <_dtoa_r+0x2a6>
 801103e:	6041      	str	r1, [r0, #4]
 8011040:	4658      	mov	r0, fp
 8011042:	f001 f8dd 	bl	8012200 <_Balloc>
 8011046:	4682      	mov	sl, r0
 8011048:	2800      	cmp	r0, #0
 801104a:	d13b      	bne.n	80110c4 <_dtoa_r+0x2ec>
 801104c:	4b1c      	ldr	r3, [pc, #112]	@ (80110c0 <_dtoa_r+0x2e8>)
 801104e:	4602      	mov	r2, r0
 8011050:	f240 11af 	movw	r1, #431	@ 0x1af
 8011054:	e6d4      	b.n	8010e00 <_dtoa_r+0x28>
 8011056:	2301      	movs	r3, #1
 8011058:	e7e0      	b.n	801101c <_dtoa_r+0x244>
 801105a:	2401      	movs	r4, #1
 801105c:	2300      	movs	r3, #0
 801105e:	9320      	str	r3, [sp, #128]	@ 0x80
 8011060:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011062:	f04f 33ff 	mov.w	r3, #4294967295
 8011066:	e9cd 3307 	strd	r3, r3, [sp, #28]
 801106a:	2200      	movs	r2, #0
 801106c:	2312      	movs	r3, #18
 801106e:	e7d0      	b.n	8011012 <_dtoa_r+0x23a>
 8011070:	2301      	movs	r3, #1
 8011072:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011074:	e7f5      	b.n	8011062 <_dtoa_r+0x28a>
 8011076:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011078:	e9cd 3307 	strd	r3, r3, [sp, #28]
 801107c:	e7d7      	b.n	801102e <_dtoa_r+0x256>
 801107e:	3101      	adds	r1, #1
 8011080:	0052      	lsls	r2, r2, #1
 8011082:	e7d8      	b.n	8011036 <_dtoa_r+0x25e>
 8011084:	f3af 8000 	nop.w
 8011088:	636f4361 	.word	0x636f4361
 801108c:	3fd287a7 	.word	0x3fd287a7
 8011090:	8b60c8b3 	.word	0x8b60c8b3
 8011094:	3fc68a28 	.word	0x3fc68a28
 8011098:	509f79fb 	.word	0x509f79fb
 801109c:	3fd34413 	.word	0x3fd34413
 80110a0:	08014b99 	.word	0x08014b99
 80110a4:	08014c5b 	.word	0x08014c5b
 80110a8:	7ff00000 	.word	0x7ff00000
 80110ac:	08014c57 	.word	0x08014c57
 80110b0:	08014b71 	.word	0x08014b71
 80110b4:	08014b70 	.word	0x08014b70
 80110b8:	3ff80000 	.word	0x3ff80000
 80110bc:	08014db8 	.word	0x08014db8
 80110c0:	08014cb3 	.word	0x08014cb3
 80110c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80110c8:	6018      	str	r0, [r3, #0]
 80110ca:	9b07      	ldr	r3, [sp, #28]
 80110cc:	2b0e      	cmp	r3, #14
 80110ce:	f200 80a4 	bhi.w	801121a <_dtoa_r+0x442>
 80110d2:	2c00      	cmp	r4, #0
 80110d4:	f000 80a1 	beq.w	801121a <_dtoa_r+0x442>
 80110d8:	2f00      	cmp	r7, #0
 80110da:	dd33      	ble.n	8011144 <_dtoa_r+0x36c>
 80110dc:	4b86      	ldr	r3, [pc, #536]	@ (80112f8 <_dtoa_r+0x520>)
 80110de:	f007 020f 	and.w	r2, r7, #15
 80110e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80110e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80110ea:	05f8      	lsls	r0, r7, #23
 80110ec:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80110f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80110f4:	d516      	bpl.n	8011124 <_dtoa_r+0x34c>
 80110f6:	4b81      	ldr	r3, [pc, #516]	@ (80112fc <_dtoa_r+0x524>)
 80110f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80110fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011100:	f7ef fbc4 	bl	800088c <__aeabi_ddiv>
 8011104:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011108:	f004 040f 	and.w	r4, r4, #15
 801110c:	2603      	movs	r6, #3
 801110e:	4d7b      	ldr	r5, [pc, #492]	@ (80112fc <_dtoa_r+0x524>)
 8011110:	b954      	cbnz	r4, 8011128 <_dtoa_r+0x350>
 8011112:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011116:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801111a:	f7ef fbb7 	bl	800088c <__aeabi_ddiv>
 801111e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011122:	e028      	b.n	8011176 <_dtoa_r+0x39e>
 8011124:	2602      	movs	r6, #2
 8011126:	e7f2      	b.n	801110e <_dtoa_r+0x336>
 8011128:	07e1      	lsls	r1, r4, #31
 801112a:	d508      	bpl.n	801113e <_dtoa_r+0x366>
 801112c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011130:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011134:	f7ef fa80 	bl	8000638 <__aeabi_dmul>
 8011138:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801113c:	3601      	adds	r6, #1
 801113e:	1064      	asrs	r4, r4, #1
 8011140:	3508      	adds	r5, #8
 8011142:	e7e5      	b.n	8011110 <_dtoa_r+0x338>
 8011144:	f000 80d2 	beq.w	80112ec <_dtoa_r+0x514>
 8011148:	427c      	negs	r4, r7
 801114a:	4b6b      	ldr	r3, [pc, #428]	@ (80112f8 <_dtoa_r+0x520>)
 801114c:	4d6b      	ldr	r5, [pc, #428]	@ (80112fc <_dtoa_r+0x524>)
 801114e:	f004 020f 	and.w	r2, r4, #15
 8011152:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011156:	e9d3 2300 	ldrd	r2, r3, [r3]
 801115a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801115e:	f7ef fa6b 	bl	8000638 <__aeabi_dmul>
 8011162:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011166:	1124      	asrs	r4, r4, #4
 8011168:	2300      	movs	r3, #0
 801116a:	2602      	movs	r6, #2
 801116c:	2c00      	cmp	r4, #0
 801116e:	f040 80b2 	bne.w	80112d6 <_dtoa_r+0x4fe>
 8011172:	2b00      	cmp	r3, #0
 8011174:	d1d3      	bne.n	801111e <_dtoa_r+0x346>
 8011176:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011178:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801117c:	2b00      	cmp	r3, #0
 801117e:	f000 80b7 	beq.w	80112f0 <_dtoa_r+0x518>
 8011182:	4b5f      	ldr	r3, [pc, #380]	@ (8011300 <_dtoa_r+0x528>)
 8011184:	2200      	movs	r2, #0
 8011186:	4620      	mov	r0, r4
 8011188:	4629      	mov	r1, r5
 801118a:	f7ef fcc7 	bl	8000b1c <__aeabi_dcmplt>
 801118e:	2800      	cmp	r0, #0
 8011190:	f000 80ae 	beq.w	80112f0 <_dtoa_r+0x518>
 8011194:	9b07      	ldr	r3, [sp, #28]
 8011196:	2b00      	cmp	r3, #0
 8011198:	f000 80aa 	beq.w	80112f0 <_dtoa_r+0x518>
 801119c:	9b08      	ldr	r3, [sp, #32]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	dd37      	ble.n	8011212 <_dtoa_r+0x43a>
 80111a2:	1e7b      	subs	r3, r7, #1
 80111a4:	9304      	str	r3, [sp, #16]
 80111a6:	4620      	mov	r0, r4
 80111a8:	4b56      	ldr	r3, [pc, #344]	@ (8011304 <_dtoa_r+0x52c>)
 80111aa:	2200      	movs	r2, #0
 80111ac:	4629      	mov	r1, r5
 80111ae:	f7ef fa43 	bl	8000638 <__aeabi_dmul>
 80111b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80111b6:	9c08      	ldr	r4, [sp, #32]
 80111b8:	3601      	adds	r6, #1
 80111ba:	4630      	mov	r0, r6
 80111bc:	f7ef f9d2 	bl	8000564 <__aeabi_i2d>
 80111c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80111c4:	f7ef fa38 	bl	8000638 <__aeabi_dmul>
 80111c8:	4b4f      	ldr	r3, [pc, #316]	@ (8011308 <_dtoa_r+0x530>)
 80111ca:	2200      	movs	r2, #0
 80111cc:	f7ef f87e 	bl	80002cc <__adddf3>
 80111d0:	4605      	mov	r5, r0
 80111d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80111d6:	2c00      	cmp	r4, #0
 80111d8:	f040 809a 	bne.w	8011310 <_dtoa_r+0x538>
 80111dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80111e0:	4b4a      	ldr	r3, [pc, #296]	@ (801130c <_dtoa_r+0x534>)
 80111e2:	2200      	movs	r2, #0
 80111e4:	f7ef f870 	bl	80002c8 <__aeabi_dsub>
 80111e8:	4602      	mov	r2, r0
 80111ea:	460b      	mov	r3, r1
 80111ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80111f0:	462a      	mov	r2, r5
 80111f2:	4633      	mov	r3, r6
 80111f4:	f7ef fcb0 	bl	8000b58 <__aeabi_dcmpgt>
 80111f8:	2800      	cmp	r0, #0
 80111fa:	f040 828e 	bne.w	801171a <_dtoa_r+0x942>
 80111fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011202:	462a      	mov	r2, r5
 8011204:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011208:	f7ef fc88 	bl	8000b1c <__aeabi_dcmplt>
 801120c:	2800      	cmp	r0, #0
 801120e:	f040 8127 	bne.w	8011460 <_dtoa_r+0x688>
 8011212:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8011216:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801121a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801121c:	2b00      	cmp	r3, #0
 801121e:	f2c0 8163 	blt.w	80114e8 <_dtoa_r+0x710>
 8011222:	2f0e      	cmp	r7, #14
 8011224:	f300 8160 	bgt.w	80114e8 <_dtoa_r+0x710>
 8011228:	4b33      	ldr	r3, [pc, #204]	@ (80112f8 <_dtoa_r+0x520>)
 801122a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801122e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011232:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8011236:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011238:	2b00      	cmp	r3, #0
 801123a:	da03      	bge.n	8011244 <_dtoa_r+0x46c>
 801123c:	9b07      	ldr	r3, [sp, #28]
 801123e:	2b00      	cmp	r3, #0
 8011240:	f340 8100 	ble.w	8011444 <_dtoa_r+0x66c>
 8011244:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011248:	4656      	mov	r6, sl
 801124a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801124e:	4620      	mov	r0, r4
 8011250:	4629      	mov	r1, r5
 8011252:	f7ef fb1b 	bl	800088c <__aeabi_ddiv>
 8011256:	f7ef fc9f 	bl	8000b98 <__aeabi_d2iz>
 801125a:	4680      	mov	r8, r0
 801125c:	f7ef f982 	bl	8000564 <__aeabi_i2d>
 8011260:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011264:	f7ef f9e8 	bl	8000638 <__aeabi_dmul>
 8011268:	4602      	mov	r2, r0
 801126a:	460b      	mov	r3, r1
 801126c:	4620      	mov	r0, r4
 801126e:	4629      	mov	r1, r5
 8011270:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8011274:	f7ef f828 	bl	80002c8 <__aeabi_dsub>
 8011278:	f806 4b01 	strb.w	r4, [r6], #1
 801127c:	9d07      	ldr	r5, [sp, #28]
 801127e:	eba6 040a 	sub.w	r4, r6, sl
 8011282:	42a5      	cmp	r5, r4
 8011284:	4602      	mov	r2, r0
 8011286:	460b      	mov	r3, r1
 8011288:	f040 8116 	bne.w	80114b8 <_dtoa_r+0x6e0>
 801128c:	f7ef f81e 	bl	80002cc <__adddf3>
 8011290:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011294:	4604      	mov	r4, r0
 8011296:	460d      	mov	r5, r1
 8011298:	f7ef fc5e 	bl	8000b58 <__aeabi_dcmpgt>
 801129c:	2800      	cmp	r0, #0
 801129e:	f040 80f8 	bne.w	8011492 <_dtoa_r+0x6ba>
 80112a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80112a6:	4620      	mov	r0, r4
 80112a8:	4629      	mov	r1, r5
 80112aa:	f7ef fc2d 	bl	8000b08 <__aeabi_dcmpeq>
 80112ae:	b118      	cbz	r0, 80112b8 <_dtoa_r+0x4e0>
 80112b0:	f018 0f01 	tst.w	r8, #1
 80112b4:	f040 80ed 	bne.w	8011492 <_dtoa_r+0x6ba>
 80112b8:	4649      	mov	r1, r9
 80112ba:	4658      	mov	r0, fp
 80112bc:	f000 ffe0 	bl	8012280 <_Bfree>
 80112c0:	2300      	movs	r3, #0
 80112c2:	7033      	strb	r3, [r6, #0]
 80112c4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80112c6:	3701      	adds	r7, #1
 80112c8:	601f      	str	r7, [r3, #0]
 80112ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	f000 8320 	beq.w	8011912 <_dtoa_r+0xb3a>
 80112d2:	601e      	str	r6, [r3, #0]
 80112d4:	e31d      	b.n	8011912 <_dtoa_r+0xb3a>
 80112d6:	07e2      	lsls	r2, r4, #31
 80112d8:	d505      	bpl.n	80112e6 <_dtoa_r+0x50e>
 80112da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80112de:	f7ef f9ab 	bl	8000638 <__aeabi_dmul>
 80112e2:	3601      	adds	r6, #1
 80112e4:	2301      	movs	r3, #1
 80112e6:	1064      	asrs	r4, r4, #1
 80112e8:	3508      	adds	r5, #8
 80112ea:	e73f      	b.n	801116c <_dtoa_r+0x394>
 80112ec:	2602      	movs	r6, #2
 80112ee:	e742      	b.n	8011176 <_dtoa_r+0x39e>
 80112f0:	9c07      	ldr	r4, [sp, #28]
 80112f2:	9704      	str	r7, [sp, #16]
 80112f4:	e761      	b.n	80111ba <_dtoa_r+0x3e2>
 80112f6:	bf00      	nop
 80112f8:	08014db8 	.word	0x08014db8
 80112fc:	08014d90 	.word	0x08014d90
 8011300:	3ff00000 	.word	0x3ff00000
 8011304:	40240000 	.word	0x40240000
 8011308:	401c0000 	.word	0x401c0000
 801130c:	40140000 	.word	0x40140000
 8011310:	4b70      	ldr	r3, [pc, #448]	@ (80114d4 <_dtoa_r+0x6fc>)
 8011312:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011314:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011318:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801131c:	4454      	add	r4, sl
 801131e:	2900      	cmp	r1, #0
 8011320:	d045      	beq.n	80113ae <_dtoa_r+0x5d6>
 8011322:	496d      	ldr	r1, [pc, #436]	@ (80114d8 <_dtoa_r+0x700>)
 8011324:	2000      	movs	r0, #0
 8011326:	f7ef fab1 	bl	800088c <__aeabi_ddiv>
 801132a:	4633      	mov	r3, r6
 801132c:	462a      	mov	r2, r5
 801132e:	f7ee ffcb 	bl	80002c8 <__aeabi_dsub>
 8011332:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011336:	4656      	mov	r6, sl
 8011338:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801133c:	f7ef fc2c 	bl	8000b98 <__aeabi_d2iz>
 8011340:	4605      	mov	r5, r0
 8011342:	f7ef f90f 	bl	8000564 <__aeabi_i2d>
 8011346:	4602      	mov	r2, r0
 8011348:	460b      	mov	r3, r1
 801134a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801134e:	f7ee ffbb 	bl	80002c8 <__aeabi_dsub>
 8011352:	3530      	adds	r5, #48	@ 0x30
 8011354:	4602      	mov	r2, r0
 8011356:	460b      	mov	r3, r1
 8011358:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801135c:	f806 5b01 	strb.w	r5, [r6], #1
 8011360:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011364:	f7ef fbda 	bl	8000b1c <__aeabi_dcmplt>
 8011368:	2800      	cmp	r0, #0
 801136a:	d163      	bne.n	8011434 <_dtoa_r+0x65c>
 801136c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011370:	495a      	ldr	r1, [pc, #360]	@ (80114dc <_dtoa_r+0x704>)
 8011372:	2000      	movs	r0, #0
 8011374:	f7ee ffa8 	bl	80002c8 <__aeabi_dsub>
 8011378:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801137c:	f7ef fbce 	bl	8000b1c <__aeabi_dcmplt>
 8011380:	2800      	cmp	r0, #0
 8011382:	f040 8087 	bne.w	8011494 <_dtoa_r+0x6bc>
 8011386:	42a6      	cmp	r6, r4
 8011388:	f43f af43 	beq.w	8011212 <_dtoa_r+0x43a>
 801138c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011390:	4b53      	ldr	r3, [pc, #332]	@ (80114e0 <_dtoa_r+0x708>)
 8011392:	2200      	movs	r2, #0
 8011394:	f7ef f950 	bl	8000638 <__aeabi_dmul>
 8011398:	4b51      	ldr	r3, [pc, #324]	@ (80114e0 <_dtoa_r+0x708>)
 801139a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801139e:	2200      	movs	r2, #0
 80113a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113a4:	f7ef f948 	bl	8000638 <__aeabi_dmul>
 80113a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80113ac:	e7c4      	b.n	8011338 <_dtoa_r+0x560>
 80113ae:	4631      	mov	r1, r6
 80113b0:	4628      	mov	r0, r5
 80113b2:	f7ef f941 	bl	8000638 <__aeabi_dmul>
 80113b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80113ba:	9413      	str	r4, [sp, #76]	@ 0x4c
 80113bc:	4656      	mov	r6, sl
 80113be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113c2:	f7ef fbe9 	bl	8000b98 <__aeabi_d2iz>
 80113c6:	4605      	mov	r5, r0
 80113c8:	f7ef f8cc 	bl	8000564 <__aeabi_i2d>
 80113cc:	4602      	mov	r2, r0
 80113ce:	460b      	mov	r3, r1
 80113d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113d4:	f7ee ff78 	bl	80002c8 <__aeabi_dsub>
 80113d8:	3530      	adds	r5, #48	@ 0x30
 80113da:	f806 5b01 	strb.w	r5, [r6], #1
 80113de:	4602      	mov	r2, r0
 80113e0:	460b      	mov	r3, r1
 80113e2:	42a6      	cmp	r6, r4
 80113e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80113e8:	f04f 0200 	mov.w	r2, #0
 80113ec:	d124      	bne.n	8011438 <_dtoa_r+0x660>
 80113ee:	4b3a      	ldr	r3, [pc, #232]	@ (80114d8 <_dtoa_r+0x700>)
 80113f0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80113f4:	f7ee ff6a 	bl	80002cc <__adddf3>
 80113f8:	4602      	mov	r2, r0
 80113fa:	460b      	mov	r3, r1
 80113fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011400:	f7ef fbaa 	bl	8000b58 <__aeabi_dcmpgt>
 8011404:	2800      	cmp	r0, #0
 8011406:	d145      	bne.n	8011494 <_dtoa_r+0x6bc>
 8011408:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801140c:	4932      	ldr	r1, [pc, #200]	@ (80114d8 <_dtoa_r+0x700>)
 801140e:	2000      	movs	r0, #0
 8011410:	f7ee ff5a 	bl	80002c8 <__aeabi_dsub>
 8011414:	4602      	mov	r2, r0
 8011416:	460b      	mov	r3, r1
 8011418:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801141c:	f7ef fb7e 	bl	8000b1c <__aeabi_dcmplt>
 8011420:	2800      	cmp	r0, #0
 8011422:	f43f aef6 	beq.w	8011212 <_dtoa_r+0x43a>
 8011426:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8011428:	1e73      	subs	r3, r6, #1
 801142a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801142c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011430:	2b30      	cmp	r3, #48	@ 0x30
 8011432:	d0f8      	beq.n	8011426 <_dtoa_r+0x64e>
 8011434:	9f04      	ldr	r7, [sp, #16]
 8011436:	e73f      	b.n	80112b8 <_dtoa_r+0x4e0>
 8011438:	4b29      	ldr	r3, [pc, #164]	@ (80114e0 <_dtoa_r+0x708>)
 801143a:	f7ef f8fd 	bl	8000638 <__aeabi_dmul>
 801143e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011442:	e7bc      	b.n	80113be <_dtoa_r+0x5e6>
 8011444:	d10c      	bne.n	8011460 <_dtoa_r+0x688>
 8011446:	4b27      	ldr	r3, [pc, #156]	@ (80114e4 <_dtoa_r+0x70c>)
 8011448:	2200      	movs	r2, #0
 801144a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801144e:	f7ef f8f3 	bl	8000638 <__aeabi_dmul>
 8011452:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011456:	f7ef fb75 	bl	8000b44 <__aeabi_dcmpge>
 801145a:	2800      	cmp	r0, #0
 801145c:	f000 815b 	beq.w	8011716 <_dtoa_r+0x93e>
 8011460:	2400      	movs	r4, #0
 8011462:	4625      	mov	r5, r4
 8011464:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011466:	43db      	mvns	r3, r3
 8011468:	9304      	str	r3, [sp, #16]
 801146a:	4656      	mov	r6, sl
 801146c:	2700      	movs	r7, #0
 801146e:	4621      	mov	r1, r4
 8011470:	4658      	mov	r0, fp
 8011472:	f000 ff05 	bl	8012280 <_Bfree>
 8011476:	2d00      	cmp	r5, #0
 8011478:	d0dc      	beq.n	8011434 <_dtoa_r+0x65c>
 801147a:	b12f      	cbz	r7, 8011488 <_dtoa_r+0x6b0>
 801147c:	42af      	cmp	r7, r5
 801147e:	d003      	beq.n	8011488 <_dtoa_r+0x6b0>
 8011480:	4639      	mov	r1, r7
 8011482:	4658      	mov	r0, fp
 8011484:	f000 fefc 	bl	8012280 <_Bfree>
 8011488:	4629      	mov	r1, r5
 801148a:	4658      	mov	r0, fp
 801148c:	f000 fef8 	bl	8012280 <_Bfree>
 8011490:	e7d0      	b.n	8011434 <_dtoa_r+0x65c>
 8011492:	9704      	str	r7, [sp, #16]
 8011494:	4633      	mov	r3, r6
 8011496:	461e      	mov	r6, r3
 8011498:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801149c:	2a39      	cmp	r2, #57	@ 0x39
 801149e:	d107      	bne.n	80114b0 <_dtoa_r+0x6d8>
 80114a0:	459a      	cmp	sl, r3
 80114a2:	d1f8      	bne.n	8011496 <_dtoa_r+0x6be>
 80114a4:	9a04      	ldr	r2, [sp, #16]
 80114a6:	3201      	adds	r2, #1
 80114a8:	9204      	str	r2, [sp, #16]
 80114aa:	2230      	movs	r2, #48	@ 0x30
 80114ac:	f88a 2000 	strb.w	r2, [sl]
 80114b0:	781a      	ldrb	r2, [r3, #0]
 80114b2:	3201      	adds	r2, #1
 80114b4:	701a      	strb	r2, [r3, #0]
 80114b6:	e7bd      	b.n	8011434 <_dtoa_r+0x65c>
 80114b8:	4b09      	ldr	r3, [pc, #36]	@ (80114e0 <_dtoa_r+0x708>)
 80114ba:	2200      	movs	r2, #0
 80114bc:	f7ef f8bc 	bl	8000638 <__aeabi_dmul>
 80114c0:	2200      	movs	r2, #0
 80114c2:	2300      	movs	r3, #0
 80114c4:	4604      	mov	r4, r0
 80114c6:	460d      	mov	r5, r1
 80114c8:	f7ef fb1e 	bl	8000b08 <__aeabi_dcmpeq>
 80114cc:	2800      	cmp	r0, #0
 80114ce:	f43f aebc 	beq.w	801124a <_dtoa_r+0x472>
 80114d2:	e6f1      	b.n	80112b8 <_dtoa_r+0x4e0>
 80114d4:	08014db8 	.word	0x08014db8
 80114d8:	3fe00000 	.word	0x3fe00000
 80114dc:	3ff00000 	.word	0x3ff00000
 80114e0:	40240000 	.word	0x40240000
 80114e4:	40140000 	.word	0x40140000
 80114e8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80114ea:	2a00      	cmp	r2, #0
 80114ec:	f000 80db 	beq.w	80116a6 <_dtoa_r+0x8ce>
 80114f0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80114f2:	2a01      	cmp	r2, #1
 80114f4:	f300 80bf 	bgt.w	8011676 <_dtoa_r+0x89e>
 80114f8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80114fa:	2a00      	cmp	r2, #0
 80114fc:	f000 80b7 	beq.w	801166e <_dtoa_r+0x896>
 8011500:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011504:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011506:	4646      	mov	r6, r8
 8011508:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801150a:	2101      	movs	r1, #1
 801150c:	441a      	add	r2, r3
 801150e:	4658      	mov	r0, fp
 8011510:	4498      	add	r8, r3
 8011512:	9209      	str	r2, [sp, #36]	@ 0x24
 8011514:	f000 ffb2 	bl	801247c <__i2b>
 8011518:	4605      	mov	r5, r0
 801151a:	b15e      	cbz	r6, 8011534 <_dtoa_r+0x75c>
 801151c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801151e:	2b00      	cmp	r3, #0
 8011520:	dd08      	ble.n	8011534 <_dtoa_r+0x75c>
 8011522:	42b3      	cmp	r3, r6
 8011524:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011526:	bfa8      	it	ge
 8011528:	4633      	movge	r3, r6
 801152a:	eba8 0803 	sub.w	r8, r8, r3
 801152e:	1af6      	subs	r6, r6, r3
 8011530:	1ad3      	subs	r3, r2, r3
 8011532:	9309      	str	r3, [sp, #36]	@ 0x24
 8011534:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011536:	b1f3      	cbz	r3, 8011576 <_dtoa_r+0x79e>
 8011538:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801153a:	2b00      	cmp	r3, #0
 801153c:	f000 80b7 	beq.w	80116ae <_dtoa_r+0x8d6>
 8011540:	b18c      	cbz	r4, 8011566 <_dtoa_r+0x78e>
 8011542:	4629      	mov	r1, r5
 8011544:	4622      	mov	r2, r4
 8011546:	4658      	mov	r0, fp
 8011548:	f001 f858 	bl	80125fc <__pow5mult>
 801154c:	464a      	mov	r2, r9
 801154e:	4601      	mov	r1, r0
 8011550:	4605      	mov	r5, r0
 8011552:	4658      	mov	r0, fp
 8011554:	f000 ffa8 	bl	80124a8 <__multiply>
 8011558:	4649      	mov	r1, r9
 801155a:	9004      	str	r0, [sp, #16]
 801155c:	4658      	mov	r0, fp
 801155e:	f000 fe8f 	bl	8012280 <_Bfree>
 8011562:	9b04      	ldr	r3, [sp, #16]
 8011564:	4699      	mov	r9, r3
 8011566:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011568:	1b1a      	subs	r2, r3, r4
 801156a:	d004      	beq.n	8011576 <_dtoa_r+0x79e>
 801156c:	4649      	mov	r1, r9
 801156e:	4658      	mov	r0, fp
 8011570:	f001 f844 	bl	80125fc <__pow5mult>
 8011574:	4681      	mov	r9, r0
 8011576:	2101      	movs	r1, #1
 8011578:	4658      	mov	r0, fp
 801157a:	f000 ff7f 	bl	801247c <__i2b>
 801157e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011580:	4604      	mov	r4, r0
 8011582:	2b00      	cmp	r3, #0
 8011584:	f000 81c9 	beq.w	801191a <_dtoa_r+0xb42>
 8011588:	461a      	mov	r2, r3
 801158a:	4601      	mov	r1, r0
 801158c:	4658      	mov	r0, fp
 801158e:	f001 f835 	bl	80125fc <__pow5mult>
 8011592:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8011594:	2b01      	cmp	r3, #1
 8011596:	4604      	mov	r4, r0
 8011598:	f300 808f 	bgt.w	80116ba <_dtoa_r+0x8e2>
 801159c:	9b02      	ldr	r3, [sp, #8]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	f040 8087 	bne.w	80116b2 <_dtoa_r+0x8da>
 80115a4:	9b03      	ldr	r3, [sp, #12]
 80115a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	f040 8083 	bne.w	80116b6 <_dtoa_r+0x8de>
 80115b0:	9b03      	ldr	r3, [sp, #12]
 80115b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80115b6:	0d1b      	lsrs	r3, r3, #20
 80115b8:	051b      	lsls	r3, r3, #20
 80115ba:	b12b      	cbz	r3, 80115c8 <_dtoa_r+0x7f0>
 80115bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115be:	3301      	adds	r3, #1
 80115c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80115c2:	f108 0801 	add.w	r8, r8, #1
 80115c6:	2301      	movs	r3, #1
 80115c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80115ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	f000 81aa 	beq.w	8011926 <_dtoa_r+0xb4e>
 80115d2:	6923      	ldr	r3, [r4, #16]
 80115d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80115d8:	6918      	ldr	r0, [r3, #16]
 80115da:	f000 ff03 	bl	80123e4 <__hi0bits>
 80115de:	f1c0 0020 	rsb	r0, r0, #32
 80115e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115e4:	4418      	add	r0, r3
 80115e6:	f010 001f 	ands.w	r0, r0, #31
 80115ea:	d071      	beq.n	80116d0 <_dtoa_r+0x8f8>
 80115ec:	f1c0 0320 	rsb	r3, r0, #32
 80115f0:	2b04      	cmp	r3, #4
 80115f2:	dd65      	ble.n	80116c0 <_dtoa_r+0x8e8>
 80115f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115f6:	f1c0 001c 	rsb	r0, r0, #28
 80115fa:	4403      	add	r3, r0
 80115fc:	4480      	add	r8, r0
 80115fe:	4406      	add	r6, r0
 8011600:	9309      	str	r3, [sp, #36]	@ 0x24
 8011602:	f1b8 0f00 	cmp.w	r8, #0
 8011606:	dd05      	ble.n	8011614 <_dtoa_r+0x83c>
 8011608:	4649      	mov	r1, r9
 801160a:	4642      	mov	r2, r8
 801160c:	4658      	mov	r0, fp
 801160e:	f001 f84f 	bl	80126b0 <__lshift>
 8011612:	4681      	mov	r9, r0
 8011614:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011616:	2b00      	cmp	r3, #0
 8011618:	dd05      	ble.n	8011626 <_dtoa_r+0x84e>
 801161a:	4621      	mov	r1, r4
 801161c:	461a      	mov	r2, r3
 801161e:	4658      	mov	r0, fp
 8011620:	f001 f846 	bl	80126b0 <__lshift>
 8011624:	4604      	mov	r4, r0
 8011626:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011628:	2b00      	cmp	r3, #0
 801162a:	d053      	beq.n	80116d4 <_dtoa_r+0x8fc>
 801162c:	4621      	mov	r1, r4
 801162e:	4648      	mov	r0, r9
 8011630:	f001 f8aa 	bl	8012788 <__mcmp>
 8011634:	2800      	cmp	r0, #0
 8011636:	da4d      	bge.n	80116d4 <_dtoa_r+0x8fc>
 8011638:	1e7b      	subs	r3, r7, #1
 801163a:	9304      	str	r3, [sp, #16]
 801163c:	4649      	mov	r1, r9
 801163e:	2300      	movs	r3, #0
 8011640:	220a      	movs	r2, #10
 8011642:	4658      	mov	r0, fp
 8011644:	f000 fe3e 	bl	80122c4 <__multadd>
 8011648:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801164a:	4681      	mov	r9, r0
 801164c:	2b00      	cmp	r3, #0
 801164e:	f000 816c 	beq.w	801192a <_dtoa_r+0xb52>
 8011652:	2300      	movs	r3, #0
 8011654:	4629      	mov	r1, r5
 8011656:	220a      	movs	r2, #10
 8011658:	4658      	mov	r0, fp
 801165a:	f000 fe33 	bl	80122c4 <__multadd>
 801165e:	9b08      	ldr	r3, [sp, #32]
 8011660:	2b00      	cmp	r3, #0
 8011662:	4605      	mov	r5, r0
 8011664:	dc61      	bgt.n	801172a <_dtoa_r+0x952>
 8011666:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8011668:	2b02      	cmp	r3, #2
 801166a:	dc3b      	bgt.n	80116e4 <_dtoa_r+0x90c>
 801166c:	e05d      	b.n	801172a <_dtoa_r+0x952>
 801166e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011670:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8011674:	e746      	b.n	8011504 <_dtoa_r+0x72c>
 8011676:	9b07      	ldr	r3, [sp, #28]
 8011678:	1e5c      	subs	r4, r3, #1
 801167a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801167c:	42a3      	cmp	r3, r4
 801167e:	bfbf      	itttt	lt
 8011680:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011682:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8011684:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8011686:	1ae3      	sublt	r3, r4, r3
 8011688:	bfb4      	ite	lt
 801168a:	18d2      	addlt	r2, r2, r3
 801168c:	1b1c      	subge	r4, r3, r4
 801168e:	9b07      	ldr	r3, [sp, #28]
 8011690:	bfbc      	itt	lt
 8011692:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8011694:	2400      	movlt	r4, #0
 8011696:	2b00      	cmp	r3, #0
 8011698:	bfb5      	itete	lt
 801169a:	eba8 0603 	sublt.w	r6, r8, r3
 801169e:	9b07      	ldrge	r3, [sp, #28]
 80116a0:	2300      	movlt	r3, #0
 80116a2:	4646      	movge	r6, r8
 80116a4:	e730      	b.n	8011508 <_dtoa_r+0x730>
 80116a6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80116a8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80116aa:	4646      	mov	r6, r8
 80116ac:	e735      	b.n	801151a <_dtoa_r+0x742>
 80116ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80116b0:	e75c      	b.n	801156c <_dtoa_r+0x794>
 80116b2:	2300      	movs	r3, #0
 80116b4:	e788      	b.n	80115c8 <_dtoa_r+0x7f0>
 80116b6:	9b02      	ldr	r3, [sp, #8]
 80116b8:	e786      	b.n	80115c8 <_dtoa_r+0x7f0>
 80116ba:	2300      	movs	r3, #0
 80116bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80116be:	e788      	b.n	80115d2 <_dtoa_r+0x7fa>
 80116c0:	d09f      	beq.n	8011602 <_dtoa_r+0x82a>
 80116c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80116c4:	331c      	adds	r3, #28
 80116c6:	441a      	add	r2, r3
 80116c8:	4498      	add	r8, r3
 80116ca:	441e      	add	r6, r3
 80116cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80116ce:	e798      	b.n	8011602 <_dtoa_r+0x82a>
 80116d0:	4603      	mov	r3, r0
 80116d2:	e7f6      	b.n	80116c2 <_dtoa_r+0x8ea>
 80116d4:	9b07      	ldr	r3, [sp, #28]
 80116d6:	9704      	str	r7, [sp, #16]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	dc20      	bgt.n	801171e <_dtoa_r+0x946>
 80116dc:	9308      	str	r3, [sp, #32]
 80116de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80116e0:	2b02      	cmp	r3, #2
 80116e2:	dd1e      	ble.n	8011722 <_dtoa_r+0x94a>
 80116e4:	9b08      	ldr	r3, [sp, #32]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	f47f aebc 	bne.w	8011464 <_dtoa_r+0x68c>
 80116ec:	4621      	mov	r1, r4
 80116ee:	2205      	movs	r2, #5
 80116f0:	4658      	mov	r0, fp
 80116f2:	f000 fde7 	bl	80122c4 <__multadd>
 80116f6:	4601      	mov	r1, r0
 80116f8:	4604      	mov	r4, r0
 80116fa:	4648      	mov	r0, r9
 80116fc:	f001 f844 	bl	8012788 <__mcmp>
 8011700:	2800      	cmp	r0, #0
 8011702:	f77f aeaf 	ble.w	8011464 <_dtoa_r+0x68c>
 8011706:	4656      	mov	r6, sl
 8011708:	2331      	movs	r3, #49	@ 0x31
 801170a:	f806 3b01 	strb.w	r3, [r6], #1
 801170e:	9b04      	ldr	r3, [sp, #16]
 8011710:	3301      	adds	r3, #1
 8011712:	9304      	str	r3, [sp, #16]
 8011714:	e6aa      	b.n	801146c <_dtoa_r+0x694>
 8011716:	9c07      	ldr	r4, [sp, #28]
 8011718:	9704      	str	r7, [sp, #16]
 801171a:	4625      	mov	r5, r4
 801171c:	e7f3      	b.n	8011706 <_dtoa_r+0x92e>
 801171e:	9b07      	ldr	r3, [sp, #28]
 8011720:	9308      	str	r3, [sp, #32]
 8011722:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011724:	2b00      	cmp	r3, #0
 8011726:	f000 8104 	beq.w	8011932 <_dtoa_r+0xb5a>
 801172a:	2e00      	cmp	r6, #0
 801172c:	dd05      	ble.n	801173a <_dtoa_r+0x962>
 801172e:	4629      	mov	r1, r5
 8011730:	4632      	mov	r2, r6
 8011732:	4658      	mov	r0, fp
 8011734:	f000 ffbc 	bl	80126b0 <__lshift>
 8011738:	4605      	mov	r5, r0
 801173a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801173c:	2b00      	cmp	r3, #0
 801173e:	d05a      	beq.n	80117f6 <_dtoa_r+0xa1e>
 8011740:	6869      	ldr	r1, [r5, #4]
 8011742:	4658      	mov	r0, fp
 8011744:	f000 fd5c 	bl	8012200 <_Balloc>
 8011748:	4606      	mov	r6, r0
 801174a:	b928      	cbnz	r0, 8011758 <_dtoa_r+0x980>
 801174c:	4b84      	ldr	r3, [pc, #528]	@ (8011960 <_dtoa_r+0xb88>)
 801174e:	4602      	mov	r2, r0
 8011750:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011754:	f7ff bb54 	b.w	8010e00 <_dtoa_r+0x28>
 8011758:	692a      	ldr	r2, [r5, #16]
 801175a:	3202      	adds	r2, #2
 801175c:	0092      	lsls	r2, r2, #2
 801175e:	f105 010c 	add.w	r1, r5, #12
 8011762:	300c      	adds	r0, #12
 8011764:	f7ff fa77 	bl	8010c56 <memcpy>
 8011768:	2201      	movs	r2, #1
 801176a:	4631      	mov	r1, r6
 801176c:	4658      	mov	r0, fp
 801176e:	f000 ff9f 	bl	80126b0 <__lshift>
 8011772:	f10a 0301 	add.w	r3, sl, #1
 8011776:	9307      	str	r3, [sp, #28]
 8011778:	9b08      	ldr	r3, [sp, #32]
 801177a:	4453      	add	r3, sl
 801177c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801177e:	9b02      	ldr	r3, [sp, #8]
 8011780:	f003 0301 	and.w	r3, r3, #1
 8011784:	462f      	mov	r7, r5
 8011786:	930a      	str	r3, [sp, #40]	@ 0x28
 8011788:	4605      	mov	r5, r0
 801178a:	9b07      	ldr	r3, [sp, #28]
 801178c:	4621      	mov	r1, r4
 801178e:	3b01      	subs	r3, #1
 8011790:	4648      	mov	r0, r9
 8011792:	9302      	str	r3, [sp, #8]
 8011794:	f7ff fa96 	bl	8010cc4 <quorem>
 8011798:	4639      	mov	r1, r7
 801179a:	9008      	str	r0, [sp, #32]
 801179c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80117a0:	4648      	mov	r0, r9
 80117a2:	f000 fff1 	bl	8012788 <__mcmp>
 80117a6:	462a      	mov	r2, r5
 80117a8:	9009      	str	r0, [sp, #36]	@ 0x24
 80117aa:	4621      	mov	r1, r4
 80117ac:	4658      	mov	r0, fp
 80117ae:	f001 f807 	bl	80127c0 <__mdiff>
 80117b2:	68c2      	ldr	r2, [r0, #12]
 80117b4:	4606      	mov	r6, r0
 80117b6:	bb02      	cbnz	r2, 80117fa <_dtoa_r+0xa22>
 80117b8:	4601      	mov	r1, r0
 80117ba:	4648      	mov	r0, r9
 80117bc:	f000 ffe4 	bl	8012788 <__mcmp>
 80117c0:	4602      	mov	r2, r0
 80117c2:	4631      	mov	r1, r6
 80117c4:	4658      	mov	r0, fp
 80117c6:	920c      	str	r2, [sp, #48]	@ 0x30
 80117c8:	f000 fd5a 	bl	8012280 <_Bfree>
 80117cc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80117ce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80117d0:	9e07      	ldr	r6, [sp, #28]
 80117d2:	ea43 0102 	orr.w	r1, r3, r2
 80117d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80117d8:	4319      	orrs	r1, r3
 80117da:	d110      	bne.n	80117fe <_dtoa_r+0xa26>
 80117dc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80117e0:	d029      	beq.n	8011836 <_dtoa_r+0xa5e>
 80117e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	dd02      	ble.n	80117ee <_dtoa_r+0xa16>
 80117e8:	9b08      	ldr	r3, [sp, #32]
 80117ea:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80117ee:	9b02      	ldr	r3, [sp, #8]
 80117f0:	f883 8000 	strb.w	r8, [r3]
 80117f4:	e63b      	b.n	801146e <_dtoa_r+0x696>
 80117f6:	4628      	mov	r0, r5
 80117f8:	e7bb      	b.n	8011772 <_dtoa_r+0x99a>
 80117fa:	2201      	movs	r2, #1
 80117fc:	e7e1      	b.n	80117c2 <_dtoa_r+0x9ea>
 80117fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011800:	2b00      	cmp	r3, #0
 8011802:	db04      	blt.n	801180e <_dtoa_r+0xa36>
 8011804:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8011806:	430b      	orrs	r3, r1
 8011808:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801180a:	430b      	orrs	r3, r1
 801180c:	d120      	bne.n	8011850 <_dtoa_r+0xa78>
 801180e:	2a00      	cmp	r2, #0
 8011810:	dded      	ble.n	80117ee <_dtoa_r+0xa16>
 8011812:	4649      	mov	r1, r9
 8011814:	2201      	movs	r2, #1
 8011816:	4658      	mov	r0, fp
 8011818:	f000 ff4a 	bl	80126b0 <__lshift>
 801181c:	4621      	mov	r1, r4
 801181e:	4681      	mov	r9, r0
 8011820:	f000 ffb2 	bl	8012788 <__mcmp>
 8011824:	2800      	cmp	r0, #0
 8011826:	dc03      	bgt.n	8011830 <_dtoa_r+0xa58>
 8011828:	d1e1      	bne.n	80117ee <_dtoa_r+0xa16>
 801182a:	f018 0f01 	tst.w	r8, #1
 801182e:	d0de      	beq.n	80117ee <_dtoa_r+0xa16>
 8011830:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011834:	d1d8      	bne.n	80117e8 <_dtoa_r+0xa10>
 8011836:	9a02      	ldr	r2, [sp, #8]
 8011838:	2339      	movs	r3, #57	@ 0x39
 801183a:	7013      	strb	r3, [r2, #0]
 801183c:	4633      	mov	r3, r6
 801183e:	461e      	mov	r6, r3
 8011840:	3b01      	subs	r3, #1
 8011842:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011846:	2a39      	cmp	r2, #57	@ 0x39
 8011848:	d052      	beq.n	80118f0 <_dtoa_r+0xb18>
 801184a:	3201      	adds	r2, #1
 801184c:	701a      	strb	r2, [r3, #0]
 801184e:	e60e      	b.n	801146e <_dtoa_r+0x696>
 8011850:	2a00      	cmp	r2, #0
 8011852:	dd07      	ble.n	8011864 <_dtoa_r+0xa8c>
 8011854:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011858:	d0ed      	beq.n	8011836 <_dtoa_r+0xa5e>
 801185a:	9a02      	ldr	r2, [sp, #8]
 801185c:	f108 0301 	add.w	r3, r8, #1
 8011860:	7013      	strb	r3, [r2, #0]
 8011862:	e604      	b.n	801146e <_dtoa_r+0x696>
 8011864:	9b07      	ldr	r3, [sp, #28]
 8011866:	9a07      	ldr	r2, [sp, #28]
 8011868:	f803 8c01 	strb.w	r8, [r3, #-1]
 801186c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801186e:	4293      	cmp	r3, r2
 8011870:	d028      	beq.n	80118c4 <_dtoa_r+0xaec>
 8011872:	4649      	mov	r1, r9
 8011874:	2300      	movs	r3, #0
 8011876:	220a      	movs	r2, #10
 8011878:	4658      	mov	r0, fp
 801187a:	f000 fd23 	bl	80122c4 <__multadd>
 801187e:	42af      	cmp	r7, r5
 8011880:	4681      	mov	r9, r0
 8011882:	f04f 0300 	mov.w	r3, #0
 8011886:	f04f 020a 	mov.w	r2, #10
 801188a:	4639      	mov	r1, r7
 801188c:	4658      	mov	r0, fp
 801188e:	d107      	bne.n	80118a0 <_dtoa_r+0xac8>
 8011890:	f000 fd18 	bl	80122c4 <__multadd>
 8011894:	4607      	mov	r7, r0
 8011896:	4605      	mov	r5, r0
 8011898:	9b07      	ldr	r3, [sp, #28]
 801189a:	3301      	adds	r3, #1
 801189c:	9307      	str	r3, [sp, #28]
 801189e:	e774      	b.n	801178a <_dtoa_r+0x9b2>
 80118a0:	f000 fd10 	bl	80122c4 <__multadd>
 80118a4:	4629      	mov	r1, r5
 80118a6:	4607      	mov	r7, r0
 80118a8:	2300      	movs	r3, #0
 80118aa:	220a      	movs	r2, #10
 80118ac:	4658      	mov	r0, fp
 80118ae:	f000 fd09 	bl	80122c4 <__multadd>
 80118b2:	4605      	mov	r5, r0
 80118b4:	e7f0      	b.n	8011898 <_dtoa_r+0xac0>
 80118b6:	9b08      	ldr	r3, [sp, #32]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	bfcc      	ite	gt
 80118bc:	461e      	movgt	r6, r3
 80118be:	2601      	movle	r6, #1
 80118c0:	4456      	add	r6, sl
 80118c2:	2700      	movs	r7, #0
 80118c4:	4649      	mov	r1, r9
 80118c6:	2201      	movs	r2, #1
 80118c8:	4658      	mov	r0, fp
 80118ca:	f000 fef1 	bl	80126b0 <__lshift>
 80118ce:	4621      	mov	r1, r4
 80118d0:	4681      	mov	r9, r0
 80118d2:	f000 ff59 	bl	8012788 <__mcmp>
 80118d6:	2800      	cmp	r0, #0
 80118d8:	dcb0      	bgt.n	801183c <_dtoa_r+0xa64>
 80118da:	d102      	bne.n	80118e2 <_dtoa_r+0xb0a>
 80118dc:	f018 0f01 	tst.w	r8, #1
 80118e0:	d1ac      	bne.n	801183c <_dtoa_r+0xa64>
 80118e2:	4633      	mov	r3, r6
 80118e4:	461e      	mov	r6, r3
 80118e6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80118ea:	2a30      	cmp	r2, #48	@ 0x30
 80118ec:	d0fa      	beq.n	80118e4 <_dtoa_r+0xb0c>
 80118ee:	e5be      	b.n	801146e <_dtoa_r+0x696>
 80118f0:	459a      	cmp	sl, r3
 80118f2:	d1a4      	bne.n	801183e <_dtoa_r+0xa66>
 80118f4:	9b04      	ldr	r3, [sp, #16]
 80118f6:	3301      	adds	r3, #1
 80118f8:	9304      	str	r3, [sp, #16]
 80118fa:	2331      	movs	r3, #49	@ 0x31
 80118fc:	f88a 3000 	strb.w	r3, [sl]
 8011900:	e5b5      	b.n	801146e <_dtoa_r+0x696>
 8011902:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8011904:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8011964 <_dtoa_r+0xb8c>
 8011908:	b11b      	cbz	r3, 8011912 <_dtoa_r+0xb3a>
 801190a:	f10a 0308 	add.w	r3, sl, #8
 801190e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8011910:	6013      	str	r3, [r2, #0]
 8011912:	4650      	mov	r0, sl
 8011914:	b017      	add	sp, #92	@ 0x5c
 8011916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801191a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801191c:	2b01      	cmp	r3, #1
 801191e:	f77f ae3d 	ble.w	801159c <_dtoa_r+0x7c4>
 8011922:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011924:	930a      	str	r3, [sp, #40]	@ 0x28
 8011926:	2001      	movs	r0, #1
 8011928:	e65b      	b.n	80115e2 <_dtoa_r+0x80a>
 801192a:	9b08      	ldr	r3, [sp, #32]
 801192c:	2b00      	cmp	r3, #0
 801192e:	f77f aed6 	ble.w	80116de <_dtoa_r+0x906>
 8011932:	4656      	mov	r6, sl
 8011934:	4621      	mov	r1, r4
 8011936:	4648      	mov	r0, r9
 8011938:	f7ff f9c4 	bl	8010cc4 <quorem>
 801193c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011940:	f806 8b01 	strb.w	r8, [r6], #1
 8011944:	9b08      	ldr	r3, [sp, #32]
 8011946:	eba6 020a 	sub.w	r2, r6, sl
 801194a:	4293      	cmp	r3, r2
 801194c:	ddb3      	ble.n	80118b6 <_dtoa_r+0xade>
 801194e:	4649      	mov	r1, r9
 8011950:	2300      	movs	r3, #0
 8011952:	220a      	movs	r2, #10
 8011954:	4658      	mov	r0, fp
 8011956:	f000 fcb5 	bl	80122c4 <__multadd>
 801195a:	4681      	mov	r9, r0
 801195c:	e7ea      	b.n	8011934 <_dtoa_r+0xb5c>
 801195e:	bf00      	nop
 8011960:	08014cb3 	.word	0x08014cb3
 8011964:	08014c4e 	.word	0x08014c4e

08011968 <_free_r>:
 8011968:	b538      	push	{r3, r4, r5, lr}
 801196a:	4605      	mov	r5, r0
 801196c:	2900      	cmp	r1, #0
 801196e:	d041      	beq.n	80119f4 <_free_r+0x8c>
 8011970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011974:	1f0c      	subs	r4, r1, #4
 8011976:	2b00      	cmp	r3, #0
 8011978:	bfb8      	it	lt
 801197a:	18e4      	addlt	r4, r4, r3
 801197c:	f000 fc34 	bl	80121e8 <__malloc_lock>
 8011980:	4a1d      	ldr	r2, [pc, #116]	@ (80119f8 <_free_r+0x90>)
 8011982:	6813      	ldr	r3, [r2, #0]
 8011984:	b933      	cbnz	r3, 8011994 <_free_r+0x2c>
 8011986:	6063      	str	r3, [r4, #4]
 8011988:	6014      	str	r4, [r2, #0]
 801198a:	4628      	mov	r0, r5
 801198c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011990:	f000 bc30 	b.w	80121f4 <__malloc_unlock>
 8011994:	42a3      	cmp	r3, r4
 8011996:	d908      	bls.n	80119aa <_free_r+0x42>
 8011998:	6820      	ldr	r0, [r4, #0]
 801199a:	1821      	adds	r1, r4, r0
 801199c:	428b      	cmp	r3, r1
 801199e:	bf01      	itttt	eq
 80119a0:	6819      	ldreq	r1, [r3, #0]
 80119a2:	685b      	ldreq	r3, [r3, #4]
 80119a4:	1809      	addeq	r1, r1, r0
 80119a6:	6021      	streq	r1, [r4, #0]
 80119a8:	e7ed      	b.n	8011986 <_free_r+0x1e>
 80119aa:	461a      	mov	r2, r3
 80119ac:	685b      	ldr	r3, [r3, #4]
 80119ae:	b10b      	cbz	r3, 80119b4 <_free_r+0x4c>
 80119b0:	42a3      	cmp	r3, r4
 80119b2:	d9fa      	bls.n	80119aa <_free_r+0x42>
 80119b4:	6811      	ldr	r1, [r2, #0]
 80119b6:	1850      	adds	r0, r2, r1
 80119b8:	42a0      	cmp	r0, r4
 80119ba:	d10b      	bne.n	80119d4 <_free_r+0x6c>
 80119bc:	6820      	ldr	r0, [r4, #0]
 80119be:	4401      	add	r1, r0
 80119c0:	1850      	adds	r0, r2, r1
 80119c2:	4283      	cmp	r3, r0
 80119c4:	6011      	str	r1, [r2, #0]
 80119c6:	d1e0      	bne.n	801198a <_free_r+0x22>
 80119c8:	6818      	ldr	r0, [r3, #0]
 80119ca:	685b      	ldr	r3, [r3, #4]
 80119cc:	6053      	str	r3, [r2, #4]
 80119ce:	4408      	add	r0, r1
 80119d0:	6010      	str	r0, [r2, #0]
 80119d2:	e7da      	b.n	801198a <_free_r+0x22>
 80119d4:	d902      	bls.n	80119dc <_free_r+0x74>
 80119d6:	230c      	movs	r3, #12
 80119d8:	602b      	str	r3, [r5, #0]
 80119da:	e7d6      	b.n	801198a <_free_r+0x22>
 80119dc:	6820      	ldr	r0, [r4, #0]
 80119de:	1821      	adds	r1, r4, r0
 80119e0:	428b      	cmp	r3, r1
 80119e2:	bf04      	itt	eq
 80119e4:	6819      	ldreq	r1, [r3, #0]
 80119e6:	685b      	ldreq	r3, [r3, #4]
 80119e8:	6063      	str	r3, [r4, #4]
 80119ea:	bf04      	itt	eq
 80119ec:	1809      	addeq	r1, r1, r0
 80119ee:	6021      	streq	r1, [r4, #0]
 80119f0:	6054      	str	r4, [r2, #4]
 80119f2:	e7ca      	b.n	801198a <_free_r+0x22>
 80119f4:	bd38      	pop	{r3, r4, r5, pc}
 80119f6:	bf00      	nop
 80119f8:	20003cf8 	.word	0x20003cf8

080119fc <rshift>:
 80119fc:	6903      	ldr	r3, [r0, #16]
 80119fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011a02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011a06:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011a0a:	f100 0414 	add.w	r4, r0, #20
 8011a0e:	dd45      	ble.n	8011a9c <rshift+0xa0>
 8011a10:	f011 011f 	ands.w	r1, r1, #31
 8011a14:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011a18:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011a1c:	d10c      	bne.n	8011a38 <rshift+0x3c>
 8011a1e:	f100 0710 	add.w	r7, r0, #16
 8011a22:	4629      	mov	r1, r5
 8011a24:	42b1      	cmp	r1, r6
 8011a26:	d334      	bcc.n	8011a92 <rshift+0x96>
 8011a28:	1a9b      	subs	r3, r3, r2
 8011a2a:	009b      	lsls	r3, r3, #2
 8011a2c:	1eea      	subs	r2, r5, #3
 8011a2e:	4296      	cmp	r6, r2
 8011a30:	bf38      	it	cc
 8011a32:	2300      	movcc	r3, #0
 8011a34:	4423      	add	r3, r4
 8011a36:	e015      	b.n	8011a64 <rshift+0x68>
 8011a38:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011a3c:	f1c1 0820 	rsb	r8, r1, #32
 8011a40:	40cf      	lsrs	r7, r1
 8011a42:	f105 0e04 	add.w	lr, r5, #4
 8011a46:	46a1      	mov	r9, r4
 8011a48:	4576      	cmp	r6, lr
 8011a4a:	46f4      	mov	ip, lr
 8011a4c:	d815      	bhi.n	8011a7a <rshift+0x7e>
 8011a4e:	1a9a      	subs	r2, r3, r2
 8011a50:	0092      	lsls	r2, r2, #2
 8011a52:	3a04      	subs	r2, #4
 8011a54:	3501      	adds	r5, #1
 8011a56:	42ae      	cmp	r6, r5
 8011a58:	bf38      	it	cc
 8011a5a:	2200      	movcc	r2, #0
 8011a5c:	18a3      	adds	r3, r4, r2
 8011a5e:	50a7      	str	r7, [r4, r2]
 8011a60:	b107      	cbz	r7, 8011a64 <rshift+0x68>
 8011a62:	3304      	adds	r3, #4
 8011a64:	1b1a      	subs	r2, r3, r4
 8011a66:	42a3      	cmp	r3, r4
 8011a68:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011a6c:	bf08      	it	eq
 8011a6e:	2300      	moveq	r3, #0
 8011a70:	6102      	str	r2, [r0, #16]
 8011a72:	bf08      	it	eq
 8011a74:	6143      	streq	r3, [r0, #20]
 8011a76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a7a:	f8dc c000 	ldr.w	ip, [ip]
 8011a7e:	fa0c fc08 	lsl.w	ip, ip, r8
 8011a82:	ea4c 0707 	orr.w	r7, ip, r7
 8011a86:	f849 7b04 	str.w	r7, [r9], #4
 8011a8a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011a8e:	40cf      	lsrs	r7, r1
 8011a90:	e7da      	b.n	8011a48 <rshift+0x4c>
 8011a92:	f851 cb04 	ldr.w	ip, [r1], #4
 8011a96:	f847 cf04 	str.w	ip, [r7, #4]!
 8011a9a:	e7c3      	b.n	8011a24 <rshift+0x28>
 8011a9c:	4623      	mov	r3, r4
 8011a9e:	e7e1      	b.n	8011a64 <rshift+0x68>

08011aa0 <__hexdig_fun>:
 8011aa0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8011aa4:	2b09      	cmp	r3, #9
 8011aa6:	d802      	bhi.n	8011aae <__hexdig_fun+0xe>
 8011aa8:	3820      	subs	r0, #32
 8011aaa:	b2c0      	uxtb	r0, r0
 8011aac:	4770      	bx	lr
 8011aae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8011ab2:	2b05      	cmp	r3, #5
 8011ab4:	d801      	bhi.n	8011aba <__hexdig_fun+0x1a>
 8011ab6:	3847      	subs	r0, #71	@ 0x47
 8011ab8:	e7f7      	b.n	8011aaa <__hexdig_fun+0xa>
 8011aba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8011abe:	2b05      	cmp	r3, #5
 8011ac0:	d801      	bhi.n	8011ac6 <__hexdig_fun+0x26>
 8011ac2:	3827      	subs	r0, #39	@ 0x27
 8011ac4:	e7f1      	b.n	8011aaa <__hexdig_fun+0xa>
 8011ac6:	2000      	movs	r0, #0
 8011ac8:	4770      	bx	lr
	...

08011acc <__gethex>:
 8011acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ad0:	b085      	sub	sp, #20
 8011ad2:	468a      	mov	sl, r1
 8011ad4:	9302      	str	r3, [sp, #8]
 8011ad6:	680b      	ldr	r3, [r1, #0]
 8011ad8:	9001      	str	r0, [sp, #4]
 8011ada:	4690      	mov	r8, r2
 8011adc:	1c9c      	adds	r4, r3, #2
 8011ade:	46a1      	mov	r9, r4
 8011ae0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011ae4:	2830      	cmp	r0, #48	@ 0x30
 8011ae6:	d0fa      	beq.n	8011ade <__gethex+0x12>
 8011ae8:	eba9 0303 	sub.w	r3, r9, r3
 8011aec:	f1a3 0b02 	sub.w	fp, r3, #2
 8011af0:	f7ff ffd6 	bl	8011aa0 <__hexdig_fun>
 8011af4:	4605      	mov	r5, r0
 8011af6:	2800      	cmp	r0, #0
 8011af8:	d168      	bne.n	8011bcc <__gethex+0x100>
 8011afa:	49a0      	ldr	r1, [pc, #640]	@ (8011d7c <__gethex+0x2b0>)
 8011afc:	2201      	movs	r2, #1
 8011afe:	4648      	mov	r0, r9
 8011b00:	f7fe ffc3 	bl	8010a8a <strncmp>
 8011b04:	4607      	mov	r7, r0
 8011b06:	2800      	cmp	r0, #0
 8011b08:	d167      	bne.n	8011bda <__gethex+0x10e>
 8011b0a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8011b0e:	4626      	mov	r6, r4
 8011b10:	f7ff ffc6 	bl	8011aa0 <__hexdig_fun>
 8011b14:	2800      	cmp	r0, #0
 8011b16:	d062      	beq.n	8011bde <__gethex+0x112>
 8011b18:	4623      	mov	r3, r4
 8011b1a:	7818      	ldrb	r0, [r3, #0]
 8011b1c:	2830      	cmp	r0, #48	@ 0x30
 8011b1e:	4699      	mov	r9, r3
 8011b20:	f103 0301 	add.w	r3, r3, #1
 8011b24:	d0f9      	beq.n	8011b1a <__gethex+0x4e>
 8011b26:	f7ff ffbb 	bl	8011aa0 <__hexdig_fun>
 8011b2a:	fab0 f580 	clz	r5, r0
 8011b2e:	096d      	lsrs	r5, r5, #5
 8011b30:	f04f 0b01 	mov.w	fp, #1
 8011b34:	464a      	mov	r2, r9
 8011b36:	4616      	mov	r6, r2
 8011b38:	3201      	adds	r2, #1
 8011b3a:	7830      	ldrb	r0, [r6, #0]
 8011b3c:	f7ff ffb0 	bl	8011aa0 <__hexdig_fun>
 8011b40:	2800      	cmp	r0, #0
 8011b42:	d1f8      	bne.n	8011b36 <__gethex+0x6a>
 8011b44:	498d      	ldr	r1, [pc, #564]	@ (8011d7c <__gethex+0x2b0>)
 8011b46:	2201      	movs	r2, #1
 8011b48:	4630      	mov	r0, r6
 8011b4a:	f7fe ff9e 	bl	8010a8a <strncmp>
 8011b4e:	2800      	cmp	r0, #0
 8011b50:	d13f      	bne.n	8011bd2 <__gethex+0x106>
 8011b52:	b944      	cbnz	r4, 8011b66 <__gethex+0x9a>
 8011b54:	1c74      	adds	r4, r6, #1
 8011b56:	4622      	mov	r2, r4
 8011b58:	4616      	mov	r6, r2
 8011b5a:	3201      	adds	r2, #1
 8011b5c:	7830      	ldrb	r0, [r6, #0]
 8011b5e:	f7ff ff9f 	bl	8011aa0 <__hexdig_fun>
 8011b62:	2800      	cmp	r0, #0
 8011b64:	d1f8      	bne.n	8011b58 <__gethex+0x8c>
 8011b66:	1ba4      	subs	r4, r4, r6
 8011b68:	00a7      	lsls	r7, r4, #2
 8011b6a:	7833      	ldrb	r3, [r6, #0]
 8011b6c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011b70:	2b50      	cmp	r3, #80	@ 0x50
 8011b72:	d13e      	bne.n	8011bf2 <__gethex+0x126>
 8011b74:	7873      	ldrb	r3, [r6, #1]
 8011b76:	2b2b      	cmp	r3, #43	@ 0x2b
 8011b78:	d033      	beq.n	8011be2 <__gethex+0x116>
 8011b7a:	2b2d      	cmp	r3, #45	@ 0x2d
 8011b7c:	d034      	beq.n	8011be8 <__gethex+0x11c>
 8011b7e:	1c71      	adds	r1, r6, #1
 8011b80:	2400      	movs	r4, #0
 8011b82:	7808      	ldrb	r0, [r1, #0]
 8011b84:	f7ff ff8c 	bl	8011aa0 <__hexdig_fun>
 8011b88:	1e43      	subs	r3, r0, #1
 8011b8a:	b2db      	uxtb	r3, r3
 8011b8c:	2b18      	cmp	r3, #24
 8011b8e:	d830      	bhi.n	8011bf2 <__gethex+0x126>
 8011b90:	f1a0 0210 	sub.w	r2, r0, #16
 8011b94:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011b98:	f7ff ff82 	bl	8011aa0 <__hexdig_fun>
 8011b9c:	f100 3cff 	add.w	ip, r0, #4294967295
 8011ba0:	fa5f fc8c 	uxtb.w	ip, ip
 8011ba4:	f1bc 0f18 	cmp.w	ip, #24
 8011ba8:	f04f 030a 	mov.w	r3, #10
 8011bac:	d91e      	bls.n	8011bec <__gethex+0x120>
 8011bae:	b104      	cbz	r4, 8011bb2 <__gethex+0xe6>
 8011bb0:	4252      	negs	r2, r2
 8011bb2:	4417      	add	r7, r2
 8011bb4:	f8ca 1000 	str.w	r1, [sl]
 8011bb8:	b1ed      	cbz	r5, 8011bf6 <__gethex+0x12a>
 8011bba:	f1bb 0f00 	cmp.w	fp, #0
 8011bbe:	bf0c      	ite	eq
 8011bc0:	2506      	moveq	r5, #6
 8011bc2:	2500      	movne	r5, #0
 8011bc4:	4628      	mov	r0, r5
 8011bc6:	b005      	add	sp, #20
 8011bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bcc:	2500      	movs	r5, #0
 8011bce:	462c      	mov	r4, r5
 8011bd0:	e7b0      	b.n	8011b34 <__gethex+0x68>
 8011bd2:	2c00      	cmp	r4, #0
 8011bd4:	d1c7      	bne.n	8011b66 <__gethex+0x9a>
 8011bd6:	4627      	mov	r7, r4
 8011bd8:	e7c7      	b.n	8011b6a <__gethex+0x9e>
 8011bda:	464e      	mov	r6, r9
 8011bdc:	462f      	mov	r7, r5
 8011bde:	2501      	movs	r5, #1
 8011be0:	e7c3      	b.n	8011b6a <__gethex+0x9e>
 8011be2:	2400      	movs	r4, #0
 8011be4:	1cb1      	adds	r1, r6, #2
 8011be6:	e7cc      	b.n	8011b82 <__gethex+0xb6>
 8011be8:	2401      	movs	r4, #1
 8011bea:	e7fb      	b.n	8011be4 <__gethex+0x118>
 8011bec:	fb03 0002 	mla	r0, r3, r2, r0
 8011bf0:	e7ce      	b.n	8011b90 <__gethex+0xc4>
 8011bf2:	4631      	mov	r1, r6
 8011bf4:	e7de      	b.n	8011bb4 <__gethex+0xe8>
 8011bf6:	eba6 0309 	sub.w	r3, r6, r9
 8011bfa:	3b01      	subs	r3, #1
 8011bfc:	4629      	mov	r1, r5
 8011bfe:	2b07      	cmp	r3, #7
 8011c00:	dc0a      	bgt.n	8011c18 <__gethex+0x14c>
 8011c02:	9801      	ldr	r0, [sp, #4]
 8011c04:	f000 fafc 	bl	8012200 <_Balloc>
 8011c08:	4604      	mov	r4, r0
 8011c0a:	b940      	cbnz	r0, 8011c1e <__gethex+0x152>
 8011c0c:	4b5c      	ldr	r3, [pc, #368]	@ (8011d80 <__gethex+0x2b4>)
 8011c0e:	4602      	mov	r2, r0
 8011c10:	21e4      	movs	r1, #228	@ 0xe4
 8011c12:	485c      	ldr	r0, [pc, #368]	@ (8011d84 <__gethex+0x2b8>)
 8011c14:	f7ff f838 	bl	8010c88 <__assert_func>
 8011c18:	3101      	adds	r1, #1
 8011c1a:	105b      	asrs	r3, r3, #1
 8011c1c:	e7ef      	b.n	8011bfe <__gethex+0x132>
 8011c1e:	f100 0a14 	add.w	sl, r0, #20
 8011c22:	2300      	movs	r3, #0
 8011c24:	4655      	mov	r5, sl
 8011c26:	469b      	mov	fp, r3
 8011c28:	45b1      	cmp	r9, r6
 8011c2a:	d337      	bcc.n	8011c9c <__gethex+0x1d0>
 8011c2c:	f845 bb04 	str.w	fp, [r5], #4
 8011c30:	eba5 050a 	sub.w	r5, r5, sl
 8011c34:	10ad      	asrs	r5, r5, #2
 8011c36:	6125      	str	r5, [r4, #16]
 8011c38:	4658      	mov	r0, fp
 8011c3a:	f000 fbd3 	bl	80123e4 <__hi0bits>
 8011c3e:	016d      	lsls	r5, r5, #5
 8011c40:	f8d8 6000 	ldr.w	r6, [r8]
 8011c44:	1a2d      	subs	r5, r5, r0
 8011c46:	42b5      	cmp	r5, r6
 8011c48:	dd54      	ble.n	8011cf4 <__gethex+0x228>
 8011c4a:	1bad      	subs	r5, r5, r6
 8011c4c:	4629      	mov	r1, r5
 8011c4e:	4620      	mov	r0, r4
 8011c50:	f000 ff5d 	bl	8012b0e <__any_on>
 8011c54:	4681      	mov	r9, r0
 8011c56:	b178      	cbz	r0, 8011c78 <__gethex+0x1ac>
 8011c58:	1e6b      	subs	r3, r5, #1
 8011c5a:	1159      	asrs	r1, r3, #5
 8011c5c:	f003 021f 	and.w	r2, r3, #31
 8011c60:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011c64:	f04f 0901 	mov.w	r9, #1
 8011c68:	fa09 f202 	lsl.w	r2, r9, r2
 8011c6c:	420a      	tst	r2, r1
 8011c6e:	d003      	beq.n	8011c78 <__gethex+0x1ac>
 8011c70:	454b      	cmp	r3, r9
 8011c72:	dc36      	bgt.n	8011ce2 <__gethex+0x216>
 8011c74:	f04f 0902 	mov.w	r9, #2
 8011c78:	4629      	mov	r1, r5
 8011c7a:	4620      	mov	r0, r4
 8011c7c:	f7ff febe 	bl	80119fc <rshift>
 8011c80:	442f      	add	r7, r5
 8011c82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011c86:	42bb      	cmp	r3, r7
 8011c88:	da42      	bge.n	8011d10 <__gethex+0x244>
 8011c8a:	9801      	ldr	r0, [sp, #4]
 8011c8c:	4621      	mov	r1, r4
 8011c8e:	f000 faf7 	bl	8012280 <_Bfree>
 8011c92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011c94:	2300      	movs	r3, #0
 8011c96:	6013      	str	r3, [r2, #0]
 8011c98:	25a3      	movs	r5, #163	@ 0xa3
 8011c9a:	e793      	b.n	8011bc4 <__gethex+0xf8>
 8011c9c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011ca0:	2a2e      	cmp	r2, #46	@ 0x2e
 8011ca2:	d012      	beq.n	8011cca <__gethex+0x1fe>
 8011ca4:	2b20      	cmp	r3, #32
 8011ca6:	d104      	bne.n	8011cb2 <__gethex+0x1e6>
 8011ca8:	f845 bb04 	str.w	fp, [r5], #4
 8011cac:	f04f 0b00 	mov.w	fp, #0
 8011cb0:	465b      	mov	r3, fp
 8011cb2:	7830      	ldrb	r0, [r6, #0]
 8011cb4:	9303      	str	r3, [sp, #12]
 8011cb6:	f7ff fef3 	bl	8011aa0 <__hexdig_fun>
 8011cba:	9b03      	ldr	r3, [sp, #12]
 8011cbc:	f000 000f 	and.w	r0, r0, #15
 8011cc0:	4098      	lsls	r0, r3
 8011cc2:	ea4b 0b00 	orr.w	fp, fp, r0
 8011cc6:	3304      	adds	r3, #4
 8011cc8:	e7ae      	b.n	8011c28 <__gethex+0x15c>
 8011cca:	45b1      	cmp	r9, r6
 8011ccc:	d8ea      	bhi.n	8011ca4 <__gethex+0x1d8>
 8011cce:	492b      	ldr	r1, [pc, #172]	@ (8011d7c <__gethex+0x2b0>)
 8011cd0:	9303      	str	r3, [sp, #12]
 8011cd2:	2201      	movs	r2, #1
 8011cd4:	4630      	mov	r0, r6
 8011cd6:	f7fe fed8 	bl	8010a8a <strncmp>
 8011cda:	9b03      	ldr	r3, [sp, #12]
 8011cdc:	2800      	cmp	r0, #0
 8011cde:	d1e1      	bne.n	8011ca4 <__gethex+0x1d8>
 8011ce0:	e7a2      	b.n	8011c28 <__gethex+0x15c>
 8011ce2:	1ea9      	subs	r1, r5, #2
 8011ce4:	4620      	mov	r0, r4
 8011ce6:	f000 ff12 	bl	8012b0e <__any_on>
 8011cea:	2800      	cmp	r0, #0
 8011cec:	d0c2      	beq.n	8011c74 <__gethex+0x1a8>
 8011cee:	f04f 0903 	mov.w	r9, #3
 8011cf2:	e7c1      	b.n	8011c78 <__gethex+0x1ac>
 8011cf4:	da09      	bge.n	8011d0a <__gethex+0x23e>
 8011cf6:	1b75      	subs	r5, r6, r5
 8011cf8:	4621      	mov	r1, r4
 8011cfa:	9801      	ldr	r0, [sp, #4]
 8011cfc:	462a      	mov	r2, r5
 8011cfe:	f000 fcd7 	bl	80126b0 <__lshift>
 8011d02:	1b7f      	subs	r7, r7, r5
 8011d04:	4604      	mov	r4, r0
 8011d06:	f100 0a14 	add.w	sl, r0, #20
 8011d0a:	f04f 0900 	mov.w	r9, #0
 8011d0e:	e7b8      	b.n	8011c82 <__gethex+0x1b6>
 8011d10:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011d14:	42bd      	cmp	r5, r7
 8011d16:	dd6f      	ble.n	8011df8 <__gethex+0x32c>
 8011d18:	1bed      	subs	r5, r5, r7
 8011d1a:	42ae      	cmp	r6, r5
 8011d1c:	dc34      	bgt.n	8011d88 <__gethex+0x2bc>
 8011d1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011d22:	2b02      	cmp	r3, #2
 8011d24:	d022      	beq.n	8011d6c <__gethex+0x2a0>
 8011d26:	2b03      	cmp	r3, #3
 8011d28:	d024      	beq.n	8011d74 <__gethex+0x2a8>
 8011d2a:	2b01      	cmp	r3, #1
 8011d2c:	d115      	bne.n	8011d5a <__gethex+0x28e>
 8011d2e:	42ae      	cmp	r6, r5
 8011d30:	d113      	bne.n	8011d5a <__gethex+0x28e>
 8011d32:	2e01      	cmp	r6, #1
 8011d34:	d10b      	bne.n	8011d4e <__gethex+0x282>
 8011d36:	9a02      	ldr	r2, [sp, #8]
 8011d38:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011d3c:	6013      	str	r3, [r2, #0]
 8011d3e:	2301      	movs	r3, #1
 8011d40:	6123      	str	r3, [r4, #16]
 8011d42:	f8ca 3000 	str.w	r3, [sl]
 8011d46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011d48:	2562      	movs	r5, #98	@ 0x62
 8011d4a:	601c      	str	r4, [r3, #0]
 8011d4c:	e73a      	b.n	8011bc4 <__gethex+0xf8>
 8011d4e:	1e71      	subs	r1, r6, #1
 8011d50:	4620      	mov	r0, r4
 8011d52:	f000 fedc 	bl	8012b0e <__any_on>
 8011d56:	2800      	cmp	r0, #0
 8011d58:	d1ed      	bne.n	8011d36 <__gethex+0x26a>
 8011d5a:	9801      	ldr	r0, [sp, #4]
 8011d5c:	4621      	mov	r1, r4
 8011d5e:	f000 fa8f 	bl	8012280 <_Bfree>
 8011d62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011d64:	2300      	movs	r3, #0
 8011d66:	6013      	str	r3, [r2, #0]
 8011d68:	2550      	movs	r5, #80	@ 0x50
 8011d6a:	e72b      	b.n	8011bc4 <__gethex+0xf8>
 8011d6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d1f3      	bne.n	8011d5a <__gethex+0x28e>
 8011d72:	e7e0      	b.n	8011d36 <__gethex+0x26a>
 8011d74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d1dd      	bne.n	8011d36 <__gethex+0x26a>
 8011d7a:	e7ee      	b.n	8011d5a <__gethex+0x28e>
 8011d7c:	08014b0c 	.word	0x08014b0c
 8011d80:	08014cb3 	.word	0x08014cb3
 8011d84:	08014cc4 	.word	0x08014cc4
 8011d88:	1e6f      	subs	r7, r5, #1
 8011d8a:	f1b9 0f00 	cmp.w	r9, #0
 8011d8e:	d130      	bne.n	8011df2 <__gethex+0x326>
 8011d90:	b127      	cbz	r7, 8011d9c <__gethex+0x2d0>
 8011d92:	4639      	mov	r1, r7
 8011d94:	4620      	mov	r0, r4
 8011d96:	f000 feba 	bl	8012b0e <__any_on>
 8011d9a:	4681      	mov	r9, r0
 8011d9c:	117a      	asrs	r2, r7, #5
 8011d9e:	2301      	movs	r3, #1
 8011da0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011da4:	f007 071f 	and.w	r7, r7, #31
 8011da8:	40bb      	lsls	r3, r7
 8011daa:	4213      	tst	r3, r2
 8011dac:	4629      	mov	r1, r5
 8011dae:	4620      	mov	r0, r4
 8011db0:	bf18      	it	ne
 8011db2:	f049 0902 	orrne.w	r9, r9, #2
 8011db6:	f7ff fe21 	bl	80119fc <rshift>
 8011dba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8011dbe:	1b76      	subs	r6, r6, r5
 8011dc0:	2502      	movs	r5, #2
 8011dc2:	f1b9 0f00 	cmp.w	r9, #0
 8011dc6:	d047      	beq.n	8011e58 <__gethex+0x38c>
 8011dc8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011dcc:	2b02      	cmp	r3, #2
 8011dce:	d015      	beq.n	8011dfc <__gethex+0x330>
 8011dd0:	2b03      	cmp	r3, #3
 8011dd2:	d017      	beq.n	8011e04 <__gethex+0x338>
 8011dd4:	2b01      	cmp	r3, #1
 8011dd6:	d109      	bne.n	8011dec <__gethex+0x320>
 8011dd8:	f019 0f02 	tst.w	r9, #2
 8011ddc:	d006      	beq.n	8011dec <__gethex+0x320>
 8011dde:	f8da 3000 	ldr.w	r3, [sl]
 8011de2:	ea49 0903 	orr.w	r9, r9, r3
 8011de6:	f019 0f01 	tst.w	r9, #1
 8011dea:	d10e      	bne.n	8011e0a <__gethex+0x33e>
 8011dec:	f045 0510 	orr.w	r5, r5, #16
 8011df0:	e032      	b.n	8011e58 <__gethex+0x38c>
 8011df2:	f04f 0901 	mov.w	r9, #1
 8011df6:	e7d1      	b.n	8011d9c <__gethex+0x2d0>
 8011df8:	2501      	movs	r5, #1
 8011dfa:	e7e2      	b.n	8011dc2 <__gethex+0x2f6>
 8011dfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011dfe:	f1c3 0301 	rsb	r3, r3, #1
 8011e02:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011e04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d0f0      	beq.n	8011dec <__gethex+0x320>
 8011e0a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011e0e:	f104 0314 	add.w	r3, r4, #20
 8011e12:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011e16:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011e1a:	f04f 0c00 	mov.w	ip, #0
 8011e1e:	4618      	mov	r0, r3
 8011e20:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e24:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011e28:	d01b      	beq.n	8011e62 <__gethex+0x396>
 8011e2a:	3201      	adds	r2, #1
 8011e2c:	6002      	str	r2, [r0, #0]
 8011e2e:	2d02      	cmp	r5, #2
 8011e30:	f104 0314 	add.w	r3, r4, #20
 8011e34:	d13c      	bne.n	8011eb0 <__gethex+0x3e4>
 8011e36:	f8d8 2000 	ldr.w	r2, [r8]
 8011e3a:	3a01      	subs	r2, #1
 8011e3c:	42b2      	cmp	r2, r6
 8011e3e:	d109      	bne.n	8011e54 <__gethex+0x388>
 8011e40:	1171      	asrs	r1, r6, #5
 8011e42:	2201      	movs	r2, #1
 8011e44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011e48:	f006 061f 	and.w	r6, r6, #31
 8011e4c:	fa02 f606 	lsl.w	r6, r2, r6
 8011e50:	421e      	tst	r6, r3
 8011e52:	d13a      	bne.n	8011eca <__gethex+0x3fe>
 8011e54:	f045 0520 	orr.w	r5, r5, #32
 8011e58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011e5a:	601c      	str	r4, [r3, #0]
 8011e5c:	9b02      	ldr	r3, [sp, #8]
 8011e5e:	601f      	str	r7, [r3, #0]
 8011e60:	e6b0      	b.n	8011bc4 <__gethex+0xf8>
 8011e62:	4299      	cmp	r1, r3
 8011e64:	f843 cc04 	str.w	ip, [r3, #-4]
 8011e68:	d8d9      	bhi.n	8011e1e <__gethex+0x352>
 8011e6a:	68a3      	ldr	r3, [r4, #8]
 8011e6c:	459b      	cmp	fp, r3
 8011e6e:	db17      	blt.n	8011ea0 <__gethex+0x3d4>
 8011e70:	6861      	ldr	r1, [r4, #4]
 8011e72:	9801      	ldr	r0, [sp, #4]
 8011e74:	3101      	adds	r1, #1
 8011e76:	f000 f9c3 	bl	8012200 <_Balloc>
 8011e7a:	4681      	mov	r9, r0
 8011e7c:	b918      	cbnz	r0, 8011e86 <__gethex+0x3ba>
 8011e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8011ee8 <__gethex+0x41c>)
 8011e80:	4602      	mov	r2, r0
 8011e82:	2184      	movs	r1, #132	@ 0x84
 8011e84:	e6c5      	b.n	8011c12 <__gethex+0x146>
 8011e86:	6922      	ldr	r2, [r4, #16]
 8011e88:	3202      	adds	r2, #2
 8011e8a:	f104 010c 	add.w	r1, r4, #12
 8011e8e:	0092      	lsls	r2, r2, #2
 8011e90:	300c      	adds	r0, #12
 8011e92:	f7fe fee0 	bl	8010c56 <memcpy>
 8011e96:	4621      	mov	r1, r4
 8011e98:	9801      	ldr	r0, [sp, #4]
 8011e9a:	f000 f9f1 	bl	8012280 <_Bfree>
 8011e9e:	464c      	mov	r4, r9
 8011ea0:	6923      	ldr	r3, [r4, #16]
 8011ea2:	1c5a      	adds	r2, r3, #1
 8011ea4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011ea8:	6122      	str	r2, [r4, #16]
 8011eaa:	2201      	movs	r2, #1
 8011eac:	615a      	str	r2, [r3, #20]
 8011eae:	e7be      	b.n	8011e2e <__gethex+0x362>
 8011eb0:	6922      	ldr	r2, [r4, #16]
 8011eb2:	455a      	cmp	r2, fp
 8011eb4:	dd0b      	ble.n	8011ece <__gethex+0x402>
 8011eb6:	2101      	movs	r1, #1
 8011eb8:	4620      	mov	r0, r4
 8011eba:	f7ff fd9f 	bl	80119fc <rshift>
 8011ebe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011ec2:	3701      	adds	r7, #1
 8011ec4:	42bb      	cmp	r3, r7
 8011ec6:	f6ff aee0 	blt.w	8011c8a <__gethex+0x1be>
 8011eca:	2501      	movs	r5, #1
 8011ecc:	e7c2      	b.n	8011e54 <__gethex+0x388>
 8011ece:	f016 061f 	ands.w	r6, r6, #31
 8011ed2:	d0fa      	beq.n	8011eca <__gethex+0x3fe>
 8011ed4:	4453      	add	r3, sl
 8011ed6:	f1c6 0620 	rsb	r6, r6, #32
 8011eda:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011ede:	f000 fa81 	bl	80123e4 <__hi0bits>
 8011ee2:	42b0      	cmp	r0, r6
 8011ee4:	dbe7      	blt.n	8011eb6 <__gethex+0x3ea>
 8011ee6:	e7f0      	b.n	8011eca <__gethex+0x3fe>
 8011ee8:	08014cb3 	.word	0x08014cb3

08011eec <L_shift>:
 8011eec:	f1c2 0208 	rsb	r2, r2, #8
 8011ef0:	0092      	lsls	r2, r2, #2
 8011ef2:	b570      	push	{r4, r5, r6, lr}
 8011ef4:	f1c2 0620 	rsb	r6, r2, #32
 8011ef8:	6843      	ldr	r3, [r0, #4]
 8011efa:	6804      	ldr	r4, [r0, #0]
 8011efc:	fa03 f506 	lsl.w	r5, r3, r6
 8011f00:	432c      	orrs	r4, r5
 8011f02:	40d3      	lsrs	r3, r2
 8011f04:	6004      	str	r4, [r0, #0]
 8011f06:	f840 3f04 	str.w	r3, [r0, #4]!
 8011f0a:	4288      	cmp	r0, r1
 8011f0c:	d3f4      	bcc.n	8011ef8 <L_shift+0xc>
 8011f0e:	bd70      	pop	{r4, r5, r6, pc}

08011f10 <__match>:
 8011f10:	b530      	push	{r4, r5, lr}
 8011f12:	6803      	ldr	r3, [r0, #0]
 8011f14:	3301      	adds	r3, #1
 8011f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011f1a:	b914      	cbnz	r4, 8011f22 <__match+0x12>
 8011f1c:	6003      	str	r3, [r0, #0]
 8011f1e:	2001      	movs	r0, #1
 8011f20:	bd30      	pop	{r4, r5, pc}
 8011f22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f26:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011f2a:	2d19      	cmp	r5, #25
 8011f2c:	bf98      	it	ls
 8011f2e:	3220      	addls	r2, #32
 8011f30:	42a2      	cmp	r2, r4
 8011f32:	d0f0      	beq.n	8011f16 <__match+0x6>
 8011f34:	2000      	movs	r0, #0
 8011f36:	e7f3      	b.n	8011f20 <__match+0x10>

08011f38 <__hexnan>:
 8011f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f3c:	680b      	ldr	r3, [r1, #0]
 8011f3e:	6801      	ldr	r1, [r0, #0]
 8011f40:	115e      	asrs	r6, r3, #5
 8011f42:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011f46:	f013 031f 	ands.w	r3, r3, #31
 8011f4a:	b087      	sub	sp, #28
 8011f4c:	bf18      	it	ne
 8011f4e:	3604      	addne	r6, #4
 8011f50:	2500      	movs	r5, #0
 8011f52:	1f37      	subs	r7, r6, #4
 8011f54:	4682      	mov	sl, r0
 8011f56:	4690      	mov	r8, r2
 8011f58:	9301      	str	r3, [sp, #4]
 8011f5a:	f846 5c04 	str.w	r5, [r6, #-4]
 8011f5e:	46b9      	mov	r9, r7
 8011f60:	463c      	mov	r4, r7
 8011f62:	9502      	str	r5, [sp, #8]
 8011f64:	46ab      	mov	fp, r5
 8011f66:	784a      	ldrb	r2, [r1, #1]
 8011f68:	1c4b      	adds	r3, r1, #1
 8011f6a:	9303      	str	r3, [sp, #12]
 8011f6c:	b342      	cbz	r2, 8011fc0 <__hexnan+0x88>
 8011f6e:	4610      	mov	r0, r2
 8011f70:	9105      	str	r1, [sp, #20]
 8011f72:	9204      	str	r2, [sp, #16]
 8011f74:	f7ff fd94 	bl	8011aa0 <__hexdig_fun>
 8011f78:	2800      	cmp	r0, #0
 8011f7a:	d151      	bne.n	8012020 <__hexnan+0xe8>
 8011f7c:	9a04      	ldr	r2, [sp, #16]
 8011f7e:	9905      	ldr	r1, [sp, #20]
 8011f80:	2a20      	cmp	r2, #32
 8011f82:	d818      	bhi.n	8011fb6 <__hexnan+0x7e>
 8011f84:	9b02      	ldr	r3, [sp, #8]
 8011f86:	459b      	cmp	fp, r3
 8011f88:	dd13      	ble.n	8011fb2 <__hexnan+0x7a>
 8011f8a:	454c      	cmp	r4, r9
 8011f8c:	d206      	bcs.n	8011f9c <__hexnan+0x64>
 8011f8e:	2d07      	cmp	r5, #7
 8011f90:	dc04      	bgt.n	8011f9c <__hexnan+0x64>
 8011f92:	462a      	mov	r2, r5
 8011f94:	4649      	mov	r1, r9
 8011f96:	4620      	mov	r0, r4
 8011f98:	f7ff ffa8 	bl	8011eec <L_shift>
 8011f9c:	4544      	cmp	r4, r8
 8011f9e:	d952      	bls.n	8012046 <__hexnan+0x10e>
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	f1a4 0904 	sub.w	r9, r4, #4
 8011fa6:	f844 3c04 	str.w	r3, [r4, #-4]
 8011faa:	f8cd b008 	str.w	fp, [sp, #8]
 8011fae:	464c      	mov	r4, r9
 8011fb0:	461d      	mov	r5, r3
 8011fb2:	9903      	ldr	r1, [sp, #12]
 8011fb4:	e7d7      	b.n	8011f66 <__hexnan+0x2e>
 8011fb6:	2a29      	cmp	r2, #41	@ 0x29
 8011fb8:	d157      	bne.n	801206a <__hexnan+0x132>
 8011fba:	3102      	adds	r1, #2
 8011fbc:	f8ca 1000 	str.w	r1, [sl]
 8011fc0:	f1bb 0f00 	cmp.w	fp, #0
 8011fc4:	d051      	beq.n	801206a <__hexnan+0x132>
 8011fc6:	454c      	cmp	r4, r9
 8011fc8:	d206      	bcs.n	8011fd8 <__hexnan+0xa0>
 8011fca:	2d07      	cmp	r5, #7
 8011fcc:	dc04      	bgt.n	8011fd8 <__hexnan+0xa0>
 8011fce:	462a      	mov	r2, r5
 8011fd0:	4649      	mov	r1, r9
 8011fd2:	4620      	mov	r0, r4
 8011fd4:	f7ff ff8a 	bl	8011eec <L_shift>
 8011fd8:	4544      	cmp	r4, r8
 8011fda:	d936      	bls.n	801204a <__hexnan+0x112>
 8011fdc:	f1a8 0204 	sub.w	r2, r8, #4
 8011fe0:	4623      	mov	r3, r4
 8011fe2:	f853 1b04 	ldr.w	r1, [r3], #4
 8011fe6:	f842 1f04 	str.w	r1, [r2, #4]!
 8011fea:	429f      	cmp	r7, r3
 8011fec:	d2f9      	bcs.n	8011fe2 <__hexnan+0xaa>
 8011fee:	1b3b      	subs	r3, r7, r4
 8011ff0:	f023 0303 	bic.w	r3, r3, #3
 8011ff4:	3304      	adds	r3, #4
 8011ff6:	3401      	adds	r4, #1
 8011ff8:	3e03      	subs	r6, #3
 8011ffa:	42b4      	cmp	r4, r6
 8011ffc:	bf88      	it	hi
 8011ffe:	2304      	movhi	r3, #4
 8012000:	4443      	add	r3, r8
 8012002:	2200      	movs	r2, #0
 8012004:	f843 2b04 	str.w	r2, [r3], #4
 8012008:	429f      	cmp	r7, r3
 801200a:	d2fb      	bcs.n	8012004 <__hexnan+0xcc>
 801200c:	683b      	ldr	r3, [r7, #0]
 801200e:	b91b      	cbnz	r3, 8012018 <__hexnan+0xe0>
 8012010:	4547      	cmp	r7, r8
 8012012:	d128      	bne.n	8012066 <__hexnan+0x12e>
 8012014:	2301      	movs	r3, #1
 8012016:	603b      	str	r3, [r7, #0]
 8012018:	2005      	movs	r0, #5
 801201a:	b007      	add	sp, #28
 801201c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012020:	3501      	adds	r5, #1
 8012022:	2d08      	cmp	r5, #8
 8012024:	f10b 0b01 	add.w	fp, fp, #1
 8012028:	dd06      	ble.n	8012038 <__hexnan+0x100>
 801202a:	4544      	cmp	r4, r8
 801202c:	d9c1      	bls.n	8011fb2 <__hexnan+0x7a>
 801202e:	2300      	movs	r3, #0
 8012030:	f844 3c04 	str.w	r3, [r4, #-4]
 8012034:	2501      	movs	r5, #1
 8012036:	3c04      	subs	r4, #4
 8012038:	6822      	ldr	r2, [r4, #0]
 801203a:	f000 000f 	and.w	r0, r0, #15
 801203e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012042:	6020      	str	r0, [r4, #0]
 8012044:	e7b5      	b.n	8011fb2 <__hexnan+0x7a>
 8012046:	2508      	movs	r5, #8
 8012048:	e7b3      	b.n	8011fb2 <__hexnan+0x7a>
 801204a:	9b01      	ldr	r3, [sp, #4]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d0dd      	beq.n	801200c <__hexnan+0xd4>
 8012050:	f1c3 0320 	rsb	r3, r3, #32
 8012054:	f04f 32ff 	mov.w	r2, #4294967295
 8012058:	40da      	lsrs	r2, r3
 801205a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801205e:	4013      	ands	r3, r2
 8012060:	f846 3c04 	str.w	r3, [r6, #-4]
 8012064:	e7d2      	b.n	801200c <__hexnan+0xd4>
 8012066:	3f04      	subs	r7, #4
 8012068:	e7d0      	b.n	801200c <__hexnan+0xd4>
 801206a:	2004      	movs	r0, #4
 801206c:	e7d5      	b.n	801201a <__hexnan+0xe2>
	...

08012070 <malloc>:
 8012070:	4b02      	ldr	r3, [pc, #8]	@ (801207c <malloc+0xc>)
 8012072:	4601      	mov	r1, r0
 8012074:	6818      	ldr	r0, [r3, #0]
 8012076:	f000 b825 	b.w	80120c4 <_malloc_r>
 801207a:	bf00      	nop
 801207c:	20000198 	.word	0x20000198

08012080 <sbrk_aligned>:
 8012080:	b570      	push	{r4, r5, r6, lr}
 8012082:	4e0f      	ldr	r6, [pc, #60]	@ (80120c0 <sbrk_aligned+0x40>)
 8012084:	460c      	mov	r4, r1
 8012086:	6831      	ldr	r1, [r6, #0]
 8012088:	4605      	mov	r5, r0
 801208a:	b911      	cbnz	r1, 8012092 <sbrk_aligned+0x12>
 801208c:	f001 f814 	bl	80130b8 <_sbrk_r>
 8012090:	6030      	str	r0, [r6, #0]
 8012092:	4621      	mov	r1, r4
 8012094:	4628      	mov	r0, r5
 8012096:	f001 f80f 	bl	80130b8 <_sbrk_r>
 801209a:	1c43      	adds	r3, r0, #1
 801209c:	d103      	bne.n	80120a6 <sbrk_aligned+0x26>
 801209e:	f04f 34ff 	mov.w	r4, #4294967295
 80120a2:	4620      	mov	r0, r4
 80120a4:	bd70      	pop	{r4, r5, r6, pc}
 80120a6:	1cc4      	adds	r4, r0, #3
 80120a8:	f024 0403 	bic.w	r4, r4, #3
 80120ac:	42a0      	cmp	r0, r4
 80120ae:	d0f8      	beq.n	80120a2 <sbrk_aligned+0x22>
 80120b0:	1a21      	subs	r1, r4, r0
 80120b2:	4628      	mov	r0, r5
 80120b4:	f001 f800 	bl	80130b8 <_sbrk_r>
 80120b8:	3001      	adds	r0, #1
 80120ba:	d1f2      	bne.n	80120a2 <sbrk_aligned+0x22>
 80120bc:	e7ef      	b.n	801209e <sbrk_aligned+0x1e>
 80120be:	bf00      	nop
 80120c0:	20003cf4 	.word	0x20003cf4

080120c4 <_malloc_r>:
 80120c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120c8:	1ccd      	adds	r5, r1, #3
 80120ca:	f025 0503 	bic.w	r5, r5, #3
 80120ce:	3508      	adds	r5, #8
 80120d0:	2d0c      	cmp	r5, #12
 80120d2:	bf38      	it	cc
 80120d4:	250c      	movcc	r5, #12
 80120d6:	2d00      	cmp	r5, #0
 80120d8:	4606      	mov	r6, r0
 80120da:	db01      	blt.n	80120e0 <_malloc_r+0x1c>
 80120dc:	42a9      	cmp	r1, r5
 80120de:	d904      	bls.n	80120ea <_malloc_r+0x26>
 80120e0:	230c      	movs	r3, #12
 80120e2:	6033      	str	r3, [r6, #0]
 80120e4:	2000      	movs	r0, #0
 80120e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80121c0 <_malloc_r+0xfc>
 80120ee:	f000 f87b 	bl	80121e8 <__malloc_lock>
 80120f2:	f8d8 3000 	ldr.w	r3, [r8]
 80120f6:	461c      	mov	r4, r3
 80120f8:	bb44      	cbnz	r4, 801214c <_malloc_r+0x88>
 80120fa:	4629      	mov	r1, r5
 80120fc:	4630      	mov	r0, r6
 80120fe:	f7ff ffbf 	bl	8012080 <sbrk_aligned>
 8012102:	1c43      	adds	r3, r0, #1
 8012104:	4604      	mov	r4, r0
 8012106:	d158      	bne.n	80121ba <_malloc_r+0xf6>
 8012108:	f8d8 4000 	ldr.w	r4, [r8]
 801210c:	4627      	mov	r7, r4
 801210e:	2f00      	cmp	r7, #0
 8012110:	d143      	bne.n	801219a <_malloc_r+0xd6>
 8012112:	2c00      	cmp	r4, #0
 8012114:	d04b      	beq.n	80121ae <_malloc_r+0xea>
 8012116:	6823      	ldr	r3, [r4, #0]
 8012118:	4639      	mov	r1, r7
 801211a:	4630      	mov	r0, r6
 801211c:	eb04 0903 	add.w	r9, r4, r3
 8012120:	f000 ffca 	bl	80130b8 <_sbrk_r>
 8012124:	4581      	cmp	r9, r0
 8012126:	d142      	bne.n	80121ae <_malloc_r+0xea>
 8012128:	6821      	ldr	r1, [r4, #0]
 801212a:	1a6d      	subs	r5, r5, r1
 801212c:	4629      	mov	r1, r5
 801212e:	4630      	mov	r0, r6
 8012130:	f7ff ffa6 	bl	8012080 <sbrk_aligned>
 8012134:	3001      	adds	r0, #1
 8012136:	d03a      	beq.n	80121ae <_malloc_r+0xea>
 8012138:	6823      	ldr	r3, [r4, #0]
 801213a:	442b      	add	r3, r5
 801213c:	6023      	str	r3, [r4, #0]
 801213e:	f8d8 3000 	ldr.w	r3, [r8]
 8012142:	685a      	ldr	r2, [r3, #4]
 8012144:	bb62      	cbnz	r2, 80121a0 <_malloc_r+0xdc>
 8012146:	f8c8 7000 	str.w	r7, [r8]
 801214a:	e00f      	b.n	801216c <_malloc_r+0xa8>
 801214c:	6822      	ldr	r2, [r4, #0]
 801214e:	1b52      	subs	r2, r2, r5
 8012150:	d420      	bmi.n	8012194 <_malloc_r+0xd0>
 8012152:	2a0b      	cmp	r2, #11
 8012154:	d917      	bls.n	8012186 <_malloc_r+0xc2>
 8012156:	1961      	adds	r1, r4, r5
 8012158:	42a3      	cmp	r3, r4
 801215a:	6025      	str	r5, [r4, #0]
 801215c:	bf18      	it	ne
 801215e:	6059      	strne	r1, [r3, #4]
 8012160:	6863      	ldr	r3, [r4, #4]
 8012162:	bf08      	it	eq
 8012164:	f8c8 1000 	streq.w	r1, [r8]
 8012168:	5162      	str	r2, [r4, r5]
 801216a:	604b      	str	r3, [r1, #4]
 801216c:	4630      	mov	r0, r6
 801216e:	f000 f841 	bl	80121f4 <__malloc_unlock>
 8012172:	f104 000b 	add.w	r0, r4, #11
 8012176:	1d23      	adds	r3, r4, #4
 8012178:	f020 0007 	bic.w	r0, r0, #7
 801217c:	1ac2      	subs	r2, r0, r3
 801217e:	bf1c      	itt	ne
 8012180:	1a1b      	subne	r3, r3, r0
 8012182:	50a3      	strne	r3, [r4, r2]
 8012184:	e7af      	b.n	80120e6 <_malloc_r+0x22>
 8012186:	6862      	ldr	r2, [r4, #4]
 8012188:	42a3      	cmp	r3, r4
 801218a:	bf0c      	ite	eq
 801218c:	f8c8 2000 	streq.w	r2, [r8]
 8012190:	605a      	strne	r2, [r3, #4]
 8012192:	e7eb      	b.n	801216c <_malloc_r+0xa8>
 8012194:	4623      	mov	r3, r4
 8012196:	6864      	ldr	r4, [r4, #4]
 8012198:	e7ae      	b.n	80120f8 <_malloc_r+0x34>
 801219a:	463c      	mov	r4, r7
 801219c:	687f      	ldr	r7, [r7, #4]
 801219e:	e7b6      	b.n	801210e <_malloc_r+0x4a>
 80121a0:	461a      	mov	r2, r3
 80121a2:	685b      	ldr	r3, [r3, #4]
 80121a4:	42a3      	cmp	r3, r4
 80121a6:	d1fb      	bne.n	80121a0 <_malloc_r+0xdc>
 80121a8:	2300      	movs	r3, #0
 80121aa:	6053      	str	r3, [r2, #4]
 80121ac:	e7de      	b.n	801216c <_malloc_r+0xa8>
 80121ae:	230c      	movs	r3, #12
 80121b0:	6033      	str	r3, [r6, #0]
 80121b2:	4630      	mov	r0, r6
 80121b4:	f000 f81e 	bl	80121f4 <__malloc_unlock>
 80121b8:	e794      	b.n	80120e4 <_malloc_r+0x20>
 80121ba:	6005      	str	r5, [r0, #0]
 80121bc:	e7d6      	b.n	801216c <_malloc_r+0xa8>
 80121be:	bf00      	nop
 80121c0:	20003cf8 	.word	0x20003cf8

080121c4 <__ascii_mbtowc>:
 80121c4:	b082      	sub	sp, #8
 80121c6:	b901      	cbnz	r1, 80121ca <__ascii_mbtowc+0x6>
 80121c8:	a901      	add	r1, sp, #4
 80121ca:	b142      	cbz	r2, 80121de <__ascii_mbtowc+0x1a>
 80121cc:	b14b      	cbz	r3, 80121e2 <__ascii_mbtowc+0x1e>
 80121ce:	7813      	ldrb	r3, [r2, #0]
 80121d0:	600b      	str	r3, [r1, #0]
 80121d2:	7812      	ldrb	r2, [r2, #0]
 80121d4:	1e10      	subs	r0, r2, #0
 80121d6:	bf18      	it	ne
 80121d8:	2001      	movne	r0, #1
 80121da:	b002      	add	sp, #8
 80121dc:	4770      	bx	lr
 80121de:	4610      	mov	r0, r2
 80121e0:	e7fb      	b.n	80121da <__ascii_mbtowc+0x16>
 80121e2:	f06f 0001 	mvn.w	r0, #1
 80121e6:	e7f8      	b.n	80121da <__ascii_mbtowc+0x16>

080121e8 <__malloc_lock>:
 80121e8:	4801      	ldr	r0, [pc, #4]	@ (80121f0 <__malloc_lock+0x8>)
 80121ea:	f7fe bd32 	b.w	8010c52 <__retarget_lock_acquire_recursive>
 80121ee:	bf00      	nop
 80121f0:	20003cf0 	.word	0x20003cf0

080121f4 <__malloc_unlock>:
 80121f4:	4801      	ldr	r0, [pc, #4]	@ (80121fc <__malloc_unlock+0x8>)
 80121f6:	f7fe bd2d 	b.w	8010c54 <__retarget_lock_release_recursive>
 80121fa:	bf00      	nop
 80121fc:	20003cf0 	.word	0x20003cf0

08012200 <_Balloc>:
 8012200:	b570      	push	{r4, r5, r6, lr}
 8012202:	69c6      	ldr	r6, [r0, #28]
 8012204:	4604      	mov	r4, r0
 8012206:	460d      	mov	r5, r1
 8012208:	b976      	cbnz	r6, 8012228 <_Balloc+0x28>
 801220a:	2010      	movs	r0, #16
 801220c:	f7ff ff30 	bl	8012070 <malloc>
 8012210:	4602      	mov	r2, r0
 8012212:	61e0      	str	r0, [r4, #28]
 8012214:	b920      	cbnz	r0, 8012220 <_Balloc+0x20>
 8012216:	4b18      	ldr	r3, [pc, #96]	@ (8012278 <_Balloc+0x78>)
 8012218:	4818      	ldr	r0, [pc, #96]	@ (801227c <_Balloc+0x7c>)
 801221a:	216b      	movs	r1, #107	@ 0x6b
 801221c:	f7fe fd34 	bl	8010c88 <__assert_func>
 8012220:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012224:	6006      	str	r6, [r0, #0]
 8012226:	60c6      	str	r6, [r0, #12]
 8012228:	69e6      	ldr	r6, [r4, #28]
 801222a:	68f3      	ldr	r3, [r6, #12]
 801222c:	b183      	cbz	r3, 8012250 <_Balloc+0x50>
 801222e:	69e3      	ldr	r3, [r4, #28]
 8012230:	68db      	ldr	r3, [r3, #12]
 8012232:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012236:	b9b8      	cbnz	r0, 8012268 <_Balloc+0x68>
 8012238:	2101      	movs	r1, #1
 801223a:	fa01 f605 	lsl.w	r6, r1, r5
 801223e:	1d72      	adds	r2, r6, #5
 8012240:	0092      	lsls	r2, r2, #2
 8012242:	4620      	mov	r0, r4
 8012244:	f000 ff4f 	bl	80130e6 <_calloc_r>
 8012248:	b160      	cbz	r0, 8012264 <_Balloc+0x64>
 801224a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801224e:	e00e      	b.n	801226e <_Balloc+0x6e>
 8012250:	2221      	movs	r2, #33	@ 0x21
 8012252:	2104      	movs	r1, #4
 8012254:	4620      	mov	r0, r4
 8012256:	f000 ff46 	bl	80130e6 <_calloc_r>
 801225a:	69e3      	ldr	r3, [r4, #28]
 801225c:	60f0      	str	r0, [r6, #12]
 801225e:	68db      	ldr	r3, [r3, #12]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d1e4      	bne.n	801222e <_Balloc+0x2e>
 8012264:	2000      	movs	r0, #0
 8012266:	bd70      	pop	{r4, r5, r6, pc}
 8012268:	6802      	ldr	r2, [r0, #0]
 801226a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801226e:	2300      	movs	r3, #0
 8012270:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012274:	e7f7      	b.n	8012266 <_Balloc+0x66>
 8012276:	bf00      	nop
 8012278:	08014b99 	.word	0x08014b99
 801227c:	08014d24 	.word	0x08014d24

08012280 <_Bfree>:
 8012280:	b570      	push	{r4, r5, r6, lr}
 8012282:	69c6      	ldr	r6, [r0, #28]
 8012284:	4605      	mov	r5, r0
 8012286:	460c      	mov	r4, r1
 8012288:	b976      	cbnz	r6, 80122a8 <_Bfree+0x28>
 801228a:	2010      	movs	r0, #16
 801228c:	f7ff fef0 	bl	8012070 <malloc>
 8012290:	4602      	mov	r2, r0
 8012292:	61e8      	str	r0, [r5, #28]
 8012294:	b920      	cbnz	r0, 80122a0 <_Bfree+0x20>
 8012296:	4b09      	ldr	r3, [pc, #36]	@ (80122bc <_Bfree+0x3c>)
 8012298:	4809      	ldr	r0, [pc, #36]	@ (80122c0 <_Bfree+0x40>)
 801229a:	218f      	movs	r1, #143	@ 0x8f
 801229c:	f7fe fcf4 	bl	8010c88 <__assert_func>
 80122a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80122a4:	6006      	str	r6, [r0, #0]
 80122a6:	60c6      	str	r6, [r0, #12]
 80122a8:	b13c      	cbz	r4, 80122ba <_Bfree+0x3a>
 80122aa:	69eb      	ldr	r3, [r5, #28]
 80122ac:	6862      	ldr	r2, [r4, #4]
 80122ae:	68db      	ldr	r3, [r3, #12]
 80122b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80122b4:	6021      	str	r1, [r4, #0]
 80122b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80122ba:	bd70      	pop	{r4, r5, r6, pc}
 80122bc:	08014b99 	.word	0x08014b99
 80122c0:	08014d24 	.word	0x08014d24

080122c4 <__multadd>:
 80122c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122c8:	690d      	ldr	r5, [r1, #16]
 80122ca:	4607      	mov	r7, r0
 80122cc:	460c      	mov	r4, r1
 80122ce:	461e      	mov	r6, r3
 80122d0:	f101 0c14 	add.w	ip, r1, #20
 80122d4:	2000      	movs	r0, #0
 80122d6:	f8dc 3000 	ldr.w	r3, [ip]
 80122da:	b299      	uxth	r1, r3
 80122dc:	fb02 6101 	mla	r1, r2, r1, r6
 80122e0:	0c1e      	lsrs	r6, r3, #16
 80122e2:	0c0b      	lsrs	r3, r1, #16
 80122e4:	fb02 3306 	mla	r3, r2, r6, r3
 80122e8:	b289      	uxth	r1, r1
 80122ea:	3001      	adds	r0, #1
 80122ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80122f0:	4285      	cmp	r5, r0
 80122f2:	f84c 1b04 	str.w	r1, [ip], #4
 80122f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80122fa:	dcec      	bgt.n	80122d6 <__multadd+0x12>
 80122fc:	b30e      	cbz	r6, 8012342 <__multadd+0x7e>
 80122fe:	68a3      	ldr	r3, [r4, #8]
 8012300:	42ab      	cmp	r3, r5
 8012302:	dc19      	bgt.n	8012338 <__multadd+0x74>
 8012304:	6861      	ldr	r1, [r4, #4]
 8012306:	4638      	mov	r0, r7
 8012308:	3101      	adds	r1, #1
 801230a:	f7ff ff79 	bl	8012200 <_Balloc>
 801230e:	4680      	mov	r8, r0
 8012310:	b928      	cbnz	r0, 801231e <__multadd+0x5a>
 8012312:	4602      	mov	r2, r0
 8012314:	4b0c      	ldr	r3, [pc, #48]	@ (8012348 <__multadd+0x84>)
 8012316:	480d      	ldr	r0, [pc, #52]	@ (801234c <__multadd+0x88>)
 8012318:	21ba      	movs	r1, #186	@ 0xba
 801231a:	f7fe fcb5 	bl	8010c88 <__assert_func>
 801231e:	6922      	ldr	r2, [r4, #16]
 8012320:	3202      	adds	r2, #2
 8012322:	f104 010c 	add.w	r1, r4, #12
 8012326:	0092      	lsls	r2, r2, #2
 8012328:	300c      	adds	r0, #12
 801232a:	f7fe fc94 	bl	8010c56 <memcpy>
 801232e:	4621      	mov	r1, r4
 8012330:	4638      	mov	r0, r7
 8012332:	f7ff ffa5 	bl	8012280 <_Bfree>
 8012336:	4644      	mov	r4, r8
 8012338:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801233c:	3501      	adds	r5, #1
 801233e:	615e      	str	r6, [r3, #20]
 8012340:	6125      	str	r5, [r4, #16]
 8012342:	4620      	mov	r0, r4
 8012344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012348:	08014cb3 	.word	0x08014cb3
 801234c:	08014d24 	.word	0x08014d24

08012350 <__s2b>:
 8012350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012354:	460c      	mov	r4, r1
 8012356:	4615      	mov	r5, r2
 8012358:	461f      	mov	r7, r3
 801235a:	2209      	movs	r2, #9
 801235c:	3308      	adds	r3, #8
 801235e:	4606      	mov	r6, r0
 8012360:	fb93 f3f2 	sdiv	r3, r3, r2
 8012364:	2100      	movs	r1, #0
 8012366:	2201      	movs	r2, #1
 8012368:	429a      	cmp	r2, r3
 801236a:	db09      	blt.n	8012380 <__s2b+0x30>
 801236c:	4630      	mov	r0, r6
 801236e:	f7ff ff47 	bl	8012200 <_Balloc>
 8012372:	b940      	cbnz	r0, 8012386 <__s2b+0x36>
 8012374:	4602      	mov	r2, r0
 8012376:	4b19      	ldr	r3, [pc, #100]	@ (80123dc <__s2b+0x8c>)
 8012378:	4819      	ldr	r0, [pc, #100]	@ (80123e0 <__s2b+0x90>)
 801237a:	21d3      	movs	r1, #211	@ 0xd3
 801237c:	f7fe fc84 	bl	8010c88 <__assert_func>
 8012380:	0052      	lsls	r2, r2, #1
 8012382:	3101      	adds	r1, #1
 8012384:	e7f0      	b.n	8012368 <__s2b+0x18>
 8012386:	9b08      	ldr	r3, [sp, #32]
 8012388:	6143      	str	r3, [r0, #20]
 801238a:	2d09      	cmp	r5, #9
 801238c:	f04f 0301 	mov.w	r3, #1
 8012390:	6103      	str	r3, [r0, #16]
 8012392:	dd16      	ble.n	80123c2 <__s2b+0x72>
 8012394:	f104 0909 	add.w	r9, r4, #9
 8012398:	46c8      	mov	r8, r9
 801239a:	442c      	add	r4, r5
 801239c:	f818 3b01 	ldrb.w	r3, [r8], #1
 80123a0:	4601      	mov	r1, r0
 80123a2:	3b30      	subs	r3, #48	@ 0x30
 80123a4:	220a      	movs	r2, #10
 80123a6:	4630      	mov	r0, r6
 80123a8:	f7ff ff8c 	bl	80122c4 <__multadd>
 80123ac:	45a0      	cmp	r8, r4
 80123ae:	d1f5      	bne.n	801239c <__s2b+0x4c>
 80123b0:	f1a5 0408 	sub.w	r4, r5, #8
 80123b4:	444c      	add	r4, r9
 80123b6:	1b2d      	subs	r5, r5, r4
 80123b8:	1963      	adds	r3, r4, r5
 80123ba:	42bb      	cmp	r3, r7
 80123bc:	db04      	blt.n	80123c8 <__s2b+0x78>
 80123be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123c2:	340a      	adds	r4, #10
 80123c4:	2509      	movs	r5, #9
 80123c6:	e7f6      	b.n	80123b6 <__s2b+0x66>
 80123c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80123cc:	4601      	mov	r1, r0
 80123ce:	3b30      	subs	r3, #48	@ 0x30
 80123d0:	220a      	movs	r2, #10
 80123d2:	4630      	mov	r0, r6
 80123d4:	f7ff ff76 	bl	80122c4 <__multadd>
 80123d8:	e7ee      	b.n	80123b8 <__s2b+0x68>
 80123da:	bf00      	nop
 80123dc:	08014cb3 	.word	0x08014cb3
 80123e0:	08014d24 	.word	0x08014d24

080123e4 <__hi0bits>:
 80123e4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80123e8:	4603      	mov	r3, r0
 80123ea:	bf36      	itet	cc
 80123ec:	0403      	lslcc	r3, r0, #16
 80123ee:	2000      	movcs	r0, #0
 80123f0:	2010      	movcc	r0, #16
 80123f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80123f6:	bf3c      	itt	cc
 80123f8:	021b      	lslcc	r3, r3, #8
 80123fa:	3008      	addcc	r0, #8
 80123fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012400:	bf3c      	itt	cc
 8012402:	011b      	lslcc	r3, r3, #4
 8012404:	3004      	addcc	r0, #4
 8012406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801240a:	bf3c      	itt	cc
 801240c:	009b      	lslcc	r3, r3, #2
 801240e:	3002      	addcc	r0, #2
 8012410:	2b00      	cmp	r3, #0
 8012412:	db05      	blt.n	8012420 <__hi0bits+0x3c>
 8012414:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012418:	f100 0001 	add.w	r0, r0, #1
 801241c:	bf08      	it	eq
 801241e:	2020      	moveq	r0, #32
 8012420:	4770      	bx	lr

08012422 <__lo0bits>:
 8012422:	6803      	ldr	r3, [r0, #0]
 8012424:	4602      	mov	r2, r0
 8012426:	f013 0007 	ands.w	r0, r3, #7
 801242a:	d00b      	beq.n	8012444 <__lo0bits+0x22>
 801242c:	07d9      	lsls	r1, r3, #31
 801242e:	d421      	bmi.n	8012474 <__lo0bits+0x52>
 8012430:	0798      	lsls	r0, r3, #30
 8012432:	bf49      	itett	mi
 8012434:	085b      	lsrmi	r3, r3, #1
 8012436:	089b      	lsrpl	r3, r3, #2
 8012438:	2001      	movmi	r0, #1
 801243a:	6013      	strmi	r3, [r2, #0]
 801243c:	bf5c      	itt	pl
 801243e:	6013      	strpl	r3, [r2, #0]
 8012440:	2002      	movpl	r0, #2
 8012442:	4770      	bx	lr
 8012444:	b299      	uxth	r1, r3
 8012446:	b909      	cbnz	r1, 801244c <__lo0bits+0x2a>
 8012448:	0c1b      	lsrs	r3, r3, #16
 801244a:	2010      	movs	r0, #16
 801244c:	b2d9      	uxtb	r1, r3
 801244e:	b909      	cbnz	r1, 8012454 <__lo0bits+0x32>
 8012450:	3008      	adds	r0, #8
 8012452:	0a1b      	lsrs	r3, r3, #8
 8012454:	0719      	lsls	r1, r3, #28
 8012456:	bf04      	itt	eq
 8012458:	091b      	lsreq	r3, r3, #4
 801245a:	3004      	addeq	r0, #4
 801245c:	0799      	lsls	r1, r3, #30
 801245e:	bf04      	itt	eq
 8012460:	089b      	lsreq	r3, r3, #2
 8012462:	3002      	addeq	r0, #2
 8012464:	07d9      	lsls	r1, r3, #31
 8012466:	d403      	bmi.n	8012470 <__lo0bits+0x4e>
 8012468:	085b      	lsrs	r3, r3, #1
 801246a:	f100 0001 	add.w	r0, r0, #1
 801246e:	d003      	beq.n	8012478 <__lo0bits+0x56>
 8012470:	6013      	str	r3, [r2, #0]
 8012472:	4770      	bx	lr
 8012474:	2000      	movs	r0, #0
 8012476:	4770      	bx	lr
 8012478:	2020      	movs	r0, #32
 801247a:	4770      	bx	lr

0801247c <__i2b>:
 801247c:	b510      	push	{r4, lr}
 801247e:	460c      	mov	r4, r1
 8012480:	2101      	movs	r1, #1
 8012482:	f7ff febd 	bl	8012200 <_Balloc>
 8012486:	4602      	mov	r2, r0
 8012488:	b928      	cbnz	r0, 8012496 <__i2b+0x1a>
 801248a:	4b05      	ldr	r3, [pc, #20]	@ (80124a0 <__i2b+0x24>)
 801248c:	4805      	ldr	r0, [pc, #20]	@ (80124a4 <__i2b+0x28>)
 801248e:	f240 1145 	movw	r1, #325	@ 0x145
 8012492:	f7fe fbf9 	bl	8010c88 <__assert_func>
 8012496:	2301      	movs	r3, #1
 8012498:	6144      	str	r4, [r0, #20]
 801249a:	6103      	str	r3, [r0, #16]
 801249c:	bd10      	pop	{r4, pc}
 801249e:	bf00      	nop
 80124a0:	08014cb3 	.word	0x08014cb3
 80124a4:	08014d24 	.word	0x08014d24

080124a8 <__multiply>:
 80124a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124ac:	4614      	mov	r4, r2
 80124ae:	690a      	ldr	r2, [r1, #16]
 80124b0:	6923      	ldr	r3, [r4, #16]
 80124b2:	429a      	cmp	r2, r3
 80124b4:	bfa8      	it	ge
 80124b6:	4623      	movge	r3, r4
 80124b8:	460f      	mov	r7, r1
 80124ba:	bfa4      	itt	ge
 80124bc:	460c      	movge	r4, r1
 80124be:	461f      	movge	r7, r3
 80124c0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80124c4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80124c8:	68a3      	ldr	r3, [r4, #8]
 80124ca:	6861      	ldr	r1, [r4, #4]
 80124cc:	eb0a 0609 	add.w	r6, sl, r9
 80124d0:	42b3      	cmp	r3, r6
 80124d2:	b085      	sub	sp, #20
 80124d4:	bfb8      	it	lt
 80124d6:	3101      	addlt	r1, #1
 80124d8:	f7ff fe92 	bl	8012200 <_Balloc>
 80124dc:	b930      	cbnz	r0, 80124ec <__multiply+0x44>
 80124de:	4602      	mov	r2, r0
 80124e0:	4b44      	ldr	r3, [pc, #272]	@ (80125f4 <__multiply+0x14c>)
 80124e2:	4845      	ldr	r0, [pc, #276]	@ (80125f8 <__multiply+0x150>)
 80124e4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80124e8:	f7fe fbce 	bl	8010c88 <__assert_func>
 80124ec:	f100 0514 	add.w	r5, r0, #20
 80124f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80124f4:	462b      	mov	r3, r5
 80124f6:	2200      	movs	r2, #0
 80124f8:	4543      	cmp	r3, r8
 80124fa:	d321      	bcc.n	8012540 <__multiply+0x98>
 80124fc:	f107 0114 	add.w	r1, r7, #20
 8012500:	f104 0214 	add.w	r2, r4, #20
 8012504:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012508:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801250c:	9302      	str	r3, [sp, #8]
 801250e:	1b13      	subs	r3, r2, r4
 8012510:	3b15      	subs	r3, #21
 8012512:	f023 0303 	bic.w	r3, r3, #3
 8012516:	3304      	adds	r3, #4
 8012518:	f104 0715 	add.w	r7, r4, #21
 801251c:	42ba      	cmp	r2, r7
 801251e:	bf38      	it	cc
 8012520:	2304      	movcc	r3, #4
 8012522:	9301      	str	r3, [sp, #4]
 8012524:	9b02      	ldr	r3, [sp, #8]
 8012526:	9103      	str	r1, [sp, #12]
 8012528:	428b      	cmp	r3, r1
 801252a:	d80c      	bhi.n	8012546 <__multiply+0x9e>
 801252c:	2e00      	cmp	r6, #0
 801252e:	dd03      	ble.n	8012538 <__multiply+0x90>
 8012530:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012534:	2b00      	cmp	r3, #0
 8012536:	d05a      	beq.n	80125ee <__multiply+0x146>
 8012538:	6106      	str	r6, [r0, #16]
 801253a:	b005      	add	sp, #20
 801253c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012540:	f843 2b04 	str.w	r2, [r3], #4
 8012544:	e7d8      	b.n	80124f8 <__multiply+0x50>
 8012546:	f8b1 a000 	ldrh.w	sl, [r1]
 801254a:	f1ba 0f00 	cmp.w	sl, #0
 801254e:	d023      	beq.n	8012598 <__multiply+0xf0>
 8012550:	f104 0e14 	add.w	lr, r4, #20
 8012554:	46a9      	mov	r9, r5
 8012556:	f04f 0c00 	mov.w	ip, #0
 801255a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801255e:	f8d9 3000 	ldr.w	r3, [r9]
 8012562:	fa1f fb87 	uxth.w	fp, r7
 8012566:	b29b      	uxth	r3, r3
 8012568:	fb0a 330b 	mla	r3, sl, fp, r3
 801256c:	4463      	add	r3, ip
 801256e:	f8d9 c000 	ldr.w	ip, [r9]
 8012572:	0c3f      	lsrs	r7, r7, #16
 8012574:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8012578:	fb0a c707 	mla	r7, sl, r7, ip
 801257c:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012580:	b29b      	uxth	r3, r3
 8012582:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012586:	4572      	cmp	r2, lr
 8012588:	f849 3b04 	str.w	r3, [r9], #4
 801258c:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012590:	d8e3      	bhi.n	801255a <__multiply+0xb2>
 8012592:	9b01      	ldr	r3, [sp, #4]
 8012594:	f845 c003 	str.w	ip, [r5, r3]
 8012598:	9b03      	ldr	r3, [sp, #12]
 801259a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801259e:	3104      	adds	r1, #4
 80125a0:	f1b9 0f00 	cmp.w	r9, #0
 80125a4:	d021      	beq.n	80125ea <__multiply+0x142>
 80125a6:	682b      	ldr	r3, [r5, #0]
 80125a8:	f104 0c14 	add.w	ip, r4, #20
 80125ac:	46ae      	mov	lr, r5
 80125ae:	f04f 0a00 	mov.w	sl, #0
 80125b2:	f8bc b000 	ldrh.w	fp, [ip]
 80125b6:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80125ba:	fb09 770b 	mla	r7, r9, fp, r7
 80125be:	4457      	add	r7, sl
 80125c0:	b29b      	uxth	r3, r3
 80125c2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80125c6:	f84e 3b04 	str.w	r3, [lr], #4
 80125ca:	f85c 3b04 	ldr.w	r3, [ip], #4
 80125ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80125d2:	f8be 3000 	ldrh.w	r3, [lr]
 80125d6:	fb09 330a 	mla	r3, r9, sl, r3
 80125da:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80125de:	4562      	cmp	r2, ip
 80125e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80125e4:	d8e5      	bhi.n	80125b2 <__multiply+0x10a>
 80125e6:	9f01      	ldr	r7, [sp, #4]
 80125e8:	51eb      	str	r3, [r5, r7]
 80125ea:	3504      	adds	r5, #4
 80125ec:	e79a      	b.n	8012524 <__multiply+0x7c>
 80125ee:	3e01      	subs	r6, #1
 80125f0:	e79c      	b.n	801252c <__multiply+0x84>
 80125f2:	bf00      	nop
 80125f4:	08014cb3 	.word	0x08014cb3
 80125f8:	08014d24 	.word	0x08014d24

080125fc <__pow5mult>:
 80125fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012600:	4615      	mov	r5, r2
 8012602:	f012 0203 	ands.w	r2, r2, #3
 8012606:	4607      	mov	r7, r0
 8012608:	460e      	mov	r6, r1
 801260a:	d007      	beq.n	801261c <__pow5mult+0x20>
 801260c:	4c25      	ldr	r4, [pc, #148]	@ (80126a4 <__pow5mult+0xa8>)
 801260e:	3a01      	subs	r2, #1
 8012610:	2300      	movs	r3, #0
 8012612:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012616:	f7ff fe55 	bl	80122c4 <__multadd>
 801261a:	4606      	mov	r6, r0
 801261c:	10ad      	asrs	r5, r5, #2
 801261e:	d03d      	beq.n	801269c <__pow5mult+0xa0>
 8012620:	69fc      	ldr	r4, [r7, #28]
 8012622:	b97c      	cbnz	r4, 8012644 <__pow5mult+0x48>
 8012624:	2010      	movs	r0, #16
 8012626:	f7ff fd23 	bl	8012070 <malloc>
 801262a:	4602      	mov	r2, r0
 801262c:	61f8      	str	r0, [r7, #28]
 801262e:	b928      	cbnz	r0, 801263c <__pow5mult+0x40>
 8012630:	4b1d      	ldr	r3, [pc, #116]	@ (80126a8 <__pow5mult+0xac>)
 8012632:	481e      	ldr	r0, [pc, #120]	@ (80126ac <__pow5mult+0xb0>)
 8012634:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012638:	f7fe fb26 	bl	8010c88 <__assert_func>
 801263c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012640:	6004      	str	r4, [r0, #0]
 8012642:	60c4      	str	r4, [r0, #12]
 8012644:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012648:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801264c:	b94c      	cbnz	r4, 8012662 <__pow5mult+0x66>
 801264e:	f240 2171 	movw	r1, #625	@ 0x271
 8012652:	4638      	mov	r0, r7
 8012654:	f7ff ff12 	bl	801247c <__i2b>
 8012658:	2300      	movs	r3, #0
 801265a:	f8c8 0008 	str.w	r0, [r8, #8]
 801265e:	4604      	mov	r4, r0
 8012660:	6003      	str	r3, [r0, #0]
 8012662:	f04f 0900 	mov.w	r9, #0
 8012666:	07eb      	lsls	r3, r5, #31
 8012668:	d50a      	bpl.n	8012680 <__pow5mult+0x84>
 801266a:	4631      	mov	r1, r6
 801266c:	4622      	mov	r2, r4
 801266e:	4638      	mov	r0, r7
 8012670:	f7ff ff1a 	bl	80124a8 <__multiply>
 8012674:	4631      	mov	r1, r6
 8012676:	4680      	mov	r8, r0
 8012678:	4638      	mov	r0, r7
 801267a:	f7ff fe01 	bl	8012280 <_Bfree>
 801267e:	4646      	mov	r6, r8
 8012680:	106d      	asrs	r5, r5, #1
 8012682:	d00b      	beq.n	801269c <__pow5mult+0xa0>
 8012684:	6820      	ldr	r0, [r4, #0]
 8012686:	b938      	cbnz	r0, 8012698 <__pow5mult+0x9c>
 8012688:	4622      	mov	r2, r4
 801268a:	4621      	mov	r1, r4
 801268c:	4638      	mov	r0, r7
 801268e:	f7ff ff0b 	bl	80124a8 <__multiply>
 8012692:	6020      	str	r0, [r4, #0]
 8012694:	f8c0 9000 	str.w	r9, [r0]
 8012698:	4604      	mov	r4, r0
 801269a:	e7e4      	b.n	8012666 <__pow5mult+0x6a>
 801269c:	4630      	mov	r0, r6
 801269e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126a2:	bf00      	nop
 80126a4:	08014d80 	.word	0x08014d80
 80126a8:	08014b99 	.word	0x08014b99
 80126ac:	08014d24 	.word	0x08014d24

080126b0 <__lshift>:
 80126b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126b4:	460c      	mov	r4, r1
 80126b6:	6849      	ldr	r1, [r1, #4]
 80126b8:	6923      	ldr	r3, [r4, #16]
 80126ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80126be:	68a3      	ldr	r3, [r4, #8]
 80126c0:	4607      	mov	r7, r0
 80126c2:	4691      	mov	r9, r2
 80126c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80126c8:	f108 0601 	add.w	r6, r8, #1
 80126cc:	42b3      	cmp	r3, r6
 80126ce:	db0b      	blt.n	80126e8 <__lshift+0x38>
 80126d0:	4638      	mov	r0, r7
 80126d2:	f7ff fd95 	bl	8012200 <_Balloc>
 80126d6:	4605      	mov	r5, r0
 80126d8:	b948      	cbnz	r0, 80126ee <__lshift+0x3e>
 80126da:	4602      	mov	r2, r0
 80126dc:	4b28      	ldr	r3, [pc, #160]	@ (8012780 <__lshift+0xd0>)
 80126de:	4829      	ldr	r0, [pc, #164]	@ (8012784 <__lshift+0xd4>)
 80126e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80126e4:	f7fe fad0 	bl	8010c88 <__assert_func>
 80126e8:	3101      	adds	r1, #1
 80126ea:	005b      	lsls	r3, r3, #1
 80126ec:	e7ee      	b.n	80126cc <__lshift+0x1c>
 80126ee:	2300      	movs	r3, #0
 80126f0:	f100 0114 	add.w	r1, r0, #20
 80126f4:	f100 0210 	add.w	r2, r0, #16
 80126f8:	4618      	mov	r0, r3
 80126fa:	4553      	cmp	r3, sl
 80126fc:	db33      	blt.n	8012766 <__lshift+0xb6>
 80126fe:	6920      	ldr	r0, [r4, #16]
 8012700:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012704:	f104 0314 	add.w	r3, r4, #20
 8012708:	f019 091f 	ands.w	r9, r9, #31
 801270c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012710:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012714:	d02b      	beq.n	801276e <__lshift+0xbe>
 8012716:	f1c9 0e20 	rsb	lr, r9, #32
 801271a:	468a      	mov	sl, r1
 801271c:	2200      	movs	r2, #0
 801271e:	6818      	ldr	r0, [r3, #0]
 8012720:	fa00 f009 	lsl.w	r0, r0, r9
 8012724:	4310      	orrs	r0, r2
 8012726:	f84a 0b04 	str.w	r0, [sl], #4
 801272a:	f853 2b04 	ldr.w	r2, [r3], #4
 801272e:	459c      	cmp	ip, r3
 8012730:	fa22 f20e 	lsr.w	r2, r2, lr
 8012734:	d8f3      	bhi.n	801271e <__lshift+0x6e>
 8012736:	ebac 0304 	sub.w	r3, ip, r4
 801273a:	3b15      	subs	r3, #21
 801273c:	f023 0303 	bic.w	r3, r3, #3
 8012740:	3304      	adds	r3, #4
 8012742:	f104 0015 	add.w	r0, r4, #21
 8012746:	4584      	cmp	ip, r0
 8012748:	bf38      	it	cc
 801274a:	2304      	movcc	r3, #4
 801274c:	50ca      	str	r2, [r1, r3]
 801274e:	b10a      	cbz	r2, 8012754 <__lshift+0xa4>
 8012750:	f108 0602 	add.w	r6, r8, #2
 8012754:	3e01      	subs	r6, #1
 8012756:	4638      	mov	r0, r7
 8012758:	612e      	str	r6, [r5, #16]
 801275a:	4621      	mov	r1, r4
 801275c:	f7ff fd90 	bl	8012280 <_Bfree>
 8012760:	4628      	mov	r0, r5
 8012762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012766:	f842 0f04 	str.w	r0, [r2, #4]!
 801276a:	3301      	adds	r3, #1
 801276c:	e7c5      	b.n	80126fa <__lshift+0x4a>
 801276e:	3904      	subs	r1, #4
 8012770:	f853 2b04 	ldr.w	r2, [r3], #4
 8012774:	f841 2f04 	str.w	r2, [r1, #4]!
 8012778:	459c      	cmp	ip, r3
 801277a:	d8f9      	bhi.n	8012770 <__lshift+0xc0>
 801277c:	e7ea      	b.n	8012754 <__lshift+0xa4>
 801277e:	bf00      	nop
 8012780:	08014cb3 	.word	0x08014cb3
 8012784:	08014d24 	.word	0x08014d24

08012788 <__mcmp>:
 8012788:	690a      	ldr	r2, [r1, #16]
 801278a:	4603      	mov	r3, r0
 801278c:	6900      	ldr	r0, [r0, #16]
 801278e:	1a80      	subs	r0, r0, r2
 8012790:	b530      	push	{r4, r5, lr}
 8012792:	d10e      	bne.n	80127b2 <__mcmp+0x2a>
 8012794:	3314      	adds	r3, #20
 8012796:	3114      	adds	r1, #20
 8012798:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801279c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80127a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80127a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80127a8:	4295      	cmp	r5, r2
 80127aa:	d003      	beq.n	80127b4 <__mcmp+0x2c>
 80127ac:	d205      	bcs.n	80127ba <__mcmp+0x32>
 80127ae:	f04f 30ff 	mov.w	r0, #4294967295
 80127b2:	bd30      	pop	{r4, r5, pc}
 80127b4:	42a3      	cmp	r3, r4
 80127b6:	d3f3      	bcc.n	80127a0 <__mcmp+0x18>
 80127b8:	e7fb      	b.n	80127b2 <__mcmp+0x2a>
 80127ba:	2001      	movs	r0, #1
 80127bc:	e7f9      	b.n	80127b2 <__mcmp+0x2a>
	...

080127c0 <__mdiff>:
 80127c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127c4:	4689      	mov	r9, r1
 80127c6:	4606      	mov	r6, r0
 80127c8:	4611      	mov	r1, r2
 80127ca:	4648      	mov	r0, r9
 80127cc:	4614      	mov	r4, r2
 80127ce:	f7ff ffdb 	bl	8012788 <__mcmp>
 80127d2:	1e05      	subs	r5, r0, #0
 80127d4:	d112      	bne.n	80127fc <__mdiff+0x3c>
 80127d6:	4629      	mov	r1, r5
 80127d8:	4630      	mov	r0, r6
 80127da:	f7ff fd11 	bl	8012200 <_Balloc>
 80127de:	4602      	mov	r2, r0
 80127e0:	b928      	cbnz	r0, 80127ee <__mdiff+0x2e>
 80127e2:	4b3e      	ldr	r3, [pc, #248]	@ (80128dc <__mdiff+0x11c>)
 80127e4:	f240 2137 	movw	r1, #567	@ 0x237
 80127e8:	483d      	ldr	r0, [pc, #244]	@ (80128e0 <__mdiff+0x120>)
 80127ea:	f7fe fa4d 	bl	8010c88 <__assert_func>
 80127ee:	2301      	movs	r3, #1
 80127f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80127f4:	4610      	mov	r0, r2
 80127f6:	b003      	add	sp, #12
 80127f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127fc:	bfbc      	itt	lt
 80127fe:	464b      	movlt	r3, r9
 8012800:	46a1      	movlt	r9, r4
 8012802:	4630      	mov	r0, r6
 8012804:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012808:	bfba      	itte	lt
 801280a:	461c      	movlt	r4, r3
 801280c:	2501      	movlt	r5, #1
 801280e:	2500      	movge	r5, #0
 8012810:	f7ff fcf6 	bl	8012200 <_Balloc>
 8012814:	4602      	mov	r2, r0
 8012816:	b918      	cbnz	r0, 8012820 <__mdiff+0x60>
 8012818:	4b30      	ldr	r3, [pc, #192]	@ (80128dc <__mdiff+0x11c>)
 801281a:	f240 2145 	movw	r1, #581	@ 0x245
 801281e:	e7e3      	b.n	80127e8 <__mdiff+0x28>
 8012820:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012824:	6926      	ldr	r6, [r4, #16]
 8012826:	60c5      	str	r5, [r0, #12]
 8012828:	f109 0310 	add.w	r3, r9, #16
 801282c:	f109 0514 	add.w	r5, r9, #20
 8012830:	f104 0e14 	add.w	lr, r4, #20
 8012834:	f100 0b14 	add.w	fp, r0, #20
 8012838:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801283c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012840:	9301      	str	r3, [sp, #4]
 8012842:	46d9      	mov	r9, fp
 8012844:	f04f 0c00 	mov.w	ip, #0
 8012848:	9b01      	ldr	r3, [sp, #4]
 801284a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801284e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012852:	9301      	str	r3, [sp, #4]
 8012854:	b281      	uxth	r1, r0
 8012856:	fa1f f38a 	uxth.w	r3, sl
 801285a:	1a5b      	subs	r3, r3, r1
 801285c:	0c00      	lsrs	r0, r0, #16
 801285e:	4463      	add	r3, ip
 8012860:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012864:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012868:	b29b      	uxth	r3, r3
 801286a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801286e:	4576      	cmp	r6, lr
 8012870:	f849 3b04 	str.w	r3, [r9], #4
 8012874:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012878:	d8e6      	bhi.n	8012848 <__mdiff+0x88>
 801287a:	1b33      	subs	r3, r6, r4
 801287c:	3b15      	subs	r3, #21
 801287e:	f023 0303 	bic.w	r3, r3, #3
 8012882:	3415      	adds	r4, #21
 8012884:	3304      	adds	r3, #4
 8012886:	42a6      	cmp	r6, r4
 8012888:	bf38      	it	cc
 801288a:	2304      	movcc	r3, #4
 801288c:	441d      	add	r5, r3
 801288e:	445b      	add	r3, fp
 8012890:	461e      	mov	r6, r3
 8012892:	462c      	mov	r4, r5
 8012894:	4544      	cmp	r4, r8
 8012896:	d30e      	bcc.n	80128b6 <__mdiff+0xf6>
 8012898:	f108 0103 	add.w	r1, r8, #3
 801289c:	1b49      	subs	r1, r1, r5
 801289e:	f021 0103 	bic.w	r1, r1, #3
 80128a2:	3d03      	subs	r5, #3
 80128a4:	45a8      	cmp	r8, r5
 80128a6:	bf38      	it	cc
 80128a8:	2100      	movcc	r1, #0
 80128aa:	440b      	add	r3, r1
 80128ac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80128b0:	b191      	cbz	r1, 80128d8 <__mdiff+0x118>
 80128b2:	6117      	str	r7, [r2, #16]
 80128b4:	e79e      	b.n	80127f4 <__mdiff+0x34>
 80128b6:	f854 1b04 	ldr.w	r1, [r4], #4
 80128ba:	46e6      	mov	lr, ip
 80128bc:	0c08      	lsrs	r0, r1, #16
 80128be:	fa1c fc81 	uxtah	ip, ip, r1
 80128c2:	4471      	add	r1, lr
 80128c4:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80128c8:	b289      	uxth	r1, r1
 80128ca:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80128ce:	f846 1b04 	str.w	r1, [r6], #4
 80128d2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80128d6:	e7dd      	b.n	8012894 <__mdiff+0xd4>
 80128d8:	3f01      	subs	r7, #1
 80128da:	e7e7      	b.n	80128ac <__mdiff+0xec>
 80128dc:	08014cb3 	.word	0x08014cb3
 80128e0:	08014d24 	.word	0x08014d24

080128e4 <__ulp>:
 80128e4:	4b0e      	ldr	r3, [pc, #56]	@ (8012920 <__ulp+0x3c>)
 80128e6:	400b      	ands	r3, r1
 80128e8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	dc08      	bgt.n	8012902 <__ulp+0x1e>
 80128f0:	425b      	negs	r3, r3
 80128f2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80128f6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80128fa:	da04      	bge.n	8012906 <__ulp+0x22>
 80128fc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8012900:	4113      	asrs	r3, r2
 8012902:	2200      	movs	r2, #0
 8012904:	e008      	b.n	8012918 <__ulp+0x34>
 8012906:	f1a2 0314 	sub.w	r3, r2, #20
 801290a:	2b1e      	cmp	r3, #30
 801290c:	bfda      	itte	le
 801290e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8012912:	40da      	lsrle	r2, r3
 8012914:	2201      	movgt	r2, #1
 8012916:	2300      	movs	r3, #0
 8012918:	4619      	mov	r1, r3
 801291a:	4610      	mov	r0, r2
 801291c:	4770      	bx	lr
 801291e:	bf00      	nop
 8012920:	7ff00000 	.word	0x7ff00000

08012924 <__b2d>:
 8012924:	6902      	ldr	r2, [r0, #16]
 8012926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012928:	f100 0614 	add.w	r6, r0, #20
 801292c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8012930:	4f20      	ldr	r7, [pc, #128]	@ (80129b4 <__b2d+0x90>)
 8012932:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8012936:	4620      	mov	r0, r4
 8012938:	f7ff fd54 	bl	80123e4 <__hi0bits>
 801293c:	4603      	mov	r3, r0
 801293e:	2b0a      	cmp	r3, #10
 8012940:	f1c0 0020 	rsb	r0, r0, #32
 8012944:	f1a2 0504 	sub.w	r5, r2, #4
 8012948:	6008      	str	r0, [r1, #0]
 801294a:	dc13      	bgt.n	8012974 <__b2d+0x50>
 801294c:	42ae      	cmp	r6, r5
 801294e:	bf38      	it	cc
 8012950:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8012954:	f1c3 0c0b 	rsb	ip, r3, #11
 8012958:	bf28      	it	cs
 801295a:	2200      	movcs	r2, #0
 801295c:	3315      	adds	r3, #21
 801295e:	fa24 fe0c 	lsr.w	lr, r4, ip
 8012962:	fa04 f303 	lsl.w	r3, r4, r3
 8012966:	fa22 f20c 	lsr.w	r2, r2, ip
 801296a:	ea4e 0107 	orr.w	r1, lr, r7
 801296e:	431a      	orrs	r2, r3
 8012970:	4610      	mov	r0, r2
 8012972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012974:	42ae      	cmp	r6, r5
 8012976:	bf36      	itet	cc
 8012978:	f1a2 0508 	subcc.w	r5, r2, #8
 801297c:	2200      	movcs	r2, #0
 801297e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8012982:	3b0b      	subs	r3, #11
 8012984:	d012      	beq.n	80129ac <__b2d+0x88>
 8012986:	f1c3 0720 	rsb	r7, r3, #32
 801298a:	fa22 f107 	lsr.w	r1, r2, r7
 801298e:	409c      	lsls	r4, r3
 8012990:	430c      	orrs	r4, r1
 8012992:	42b5      	cmp	r5, r6
 8012994:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8012998:	bf8c      	ite	hi
 801299a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 801299e:	2400      	movls	r4, #0
 80129a0:	409a      	lsls	r2, r3
 80129a2:	40fc      	lsrs	r4, r7
 80129a4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80129a8:	4322      	orrs	r2, r4
 80129aa:	e7e1      	b.n	8012970 <__b2d+0x4c>
 80129ac:	ea44 0107 	orr.w	r1, r4, r7
 80129b0:	e7de      	b.n	8012970 <__b2d+0x4c>
 80129b2:	bf00      	nop
 80129b4:	3ff00000 	.word	0x3ff00000

080129b8 <__d2b>:
 80129b8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80129bc:	2101      	movs	r1, #1
 80129be:	9e08      	ldr	r6, [sp, #32]
 80129c0:	4690      	mov	r8, r2
 80129c2:	4699      	mov	r9, r3
 80129c4:	f7ff fc1c 	bl	8012200 <_Balloc>
 80129c8:	4604      	mov	r4, r0
 80129ca:	b930      	cbnz	r0, 80129da <__d2b+0x22>
 80129cc:	4602      	mov	r2, r0
 80129ce:	4b24      	ldr	r3, [pc, #144]	@ (8012a60 <__d2b+0xa8>)
 80129d0:	4824      	ldr	r0, [pc, #144]	@ (8012a64 <__d2b+0xac>)
 80129d2:	f240 310f 	movw	r1, #783	@ 0x30f
 80129d6:	f7fe f957 	bl	8010c88 <__assert_func>
 80129da:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80129de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80129e2:	b10d      	cbz	r5, 80129e8 <__d2b+0x30>
 80129e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80129e8:	9301      	str	r3, [sp, #4]
 80129ea:	f1b8 0300 	subs.w	r3, r8, #0
 80129ee:	d024      	beq.n	8012a3a <__d2b+0x82>
 80129f0:	4668      	mov	r0, sp
 80129f2:	9300      	str	r3, [sp, #0]
 80129f4:	f7ff fd15 	bl	8012422 <__lo0bits>
 80129f8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80129fc:	b1d8      	cbz	r0, 8012a36 <__d2b+0x7e>
 80129fe:	f1c0 0320 	rsb	r3, r0, #32
 8012a02:	fa02 f303 	lsl.w	r3, r2, r3
 8012a06:	430b      	orrs	r3, r1
 8012a08:	40c2      	lsrs	r2, r0
 8012a0a:	6163      	str	r3, [r4, #20]
 8012a0c:	9201      	str	r2, [sp, #4]
 8012a0e:	9b01      	ldr	r3, [sp, #4]
 8012a10:	61a3      	str	r3, [r4, #24]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	bf0c      	ite	eq
 8012a16:	2201      	moveq	r2, #1
 8012a18:	2202      	movne	r2, #2
 8012a1a:	6122      	str	r2, [r4, #16]
 8012a1c:	b1ad      	cbz	r5, 8012a4a <__d2b+0x92>
 8012a1e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012a22:	4405      	add	r5, r0
 8012a24:	6035      	str	r5, [r6, #0]
 8012a26:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012a2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a2c:	6018      	str	r0, [r3, #0]
 8012a2e:	4620      	mov	r0, r4
 8012a30:	b002      	add	sp, #8
 8012a32:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8012a36:	6161      	str	r1, [r4, #20]
 8012a38:	e7e9      	b.n	8012a0e <__d2b+0x56>
 8012a3a:	a801      	add	r0, sp, #4
 8012a3c:	f7ff fcf1 	bl	8012422 <__lo0bits>
 8012a40:	9b01      	ldr	r3, [sp, #4]
 8012a42:	6163      	str	r3, [r4, #20]
 8012a44:	3020      	adds	r0, #32
 8012a46:	2201      	movs	r2, #1
 8012a48:	e7e7      	b.n	8012a1a <__d2b+0x62>
 8012a4a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012a4e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012a52:	6030      	str	r0, [r6, #0]
 8012a54:	6918      	ldr	r0, [r3, #16]
 8012a56:	f7ff fcc5 	bl	80123e4 <__hi0bits>
 8012a5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012a5e:	e7e4      	b.n	8012a2a <__d2b+0x72>
 8012a60:	08014cb3 	.word	0x08014cb3
 8012a64:	08014d24 	.word	0x08014d24

08012a68 <__ratio>:
 8012a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a6c:	b085      	sub	sp, #20
 8012a6e:	e9cd 1000 	strd	r1, r0, [sp]
 8012a72:	a902      	add	r1, sp, #8
 8012a74:	f7ff ff56 	bl	8012924 <__b2d>
 8012a78:	468b      	mov	fp, r1
 8012a7a:	4606      	mov	r6, r0
 8012a7c:	460f      	mov	r7, r1
 8012a7e:	9800      	ldr	r0, [sp, #0]
 8012a80:	a903      	add	r1, sp, #12
 8012a82:	f7ff ff4f 	bl	8012924 <__b2d>
 8012a86:	9b01      	ldr	r3, [sp, #4]
 8012a88:	4689      	mov	r9, r1
 8012a8a:	460d      	mov	r5, r1
 8012a8c:	6919      	ldr	r1, [r3, #16]
 8012a8e:	9b00      	ldr	r3, [sp, #0]
 8012a90:	691b      	ldr	r3, [r3, #16]
 8012a92:	1ac9      	subs	r1, r1, r3
 8012a94:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8012a98:	1a9b      	subs	r3, r3, r2
 8012a9a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	bfcd      	iteet	gt
 8012aa2:	463a      	movgt	r2, r7
 8012aa4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012aa8:	462a      	movle	r2, r5
 8012aaa:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8012aae:	bfd8      	it	le
 8012ab0:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8012ab4:	4604      	mov	r4, r0
 8012ab6:	4622      	mov	r2, r4
 8012ab8:	464b      	mov	r3, r9
 8012aba:	4630      	mov	r0, r6
 8012abc:	4659      	mov	r1, fp
 8012abe:	f7ed fee5 	bl	800088c <__aeabi_ddiv>
 8012ac2:	b005      	add	sp, #20
 8012ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012ac8 <__copybits>:
 8012ac8:	3901      	subs	r1, #1
 8012aca:	b570      	push	{r4, r5, r6, lr}
 8012acc:	1149      	asrs	r1, r1, #5
 8012ace:	6914      	ldr	r4, [r2, #16]
 8012ad0:	3101      	adds	r1, #1
 8012ad2:	f102 0314 	add.w	r3, r2, #20
 8012ad6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012ada:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012ade:	1f05      	subs	r5, r0, #4
 8012ae0:	42a3      	cmp	r3, r4
 8012ae2:	d30c      	bcc.n	8012afe <__copybits+0x36>
 8012ae4:	1aa3      	subs	r3, r4, r2
 8012ae6:	3b11      	subs	r3, #17
 8012ae8:	f023 0303 	bic.w	r3, r3, #3
 8012aec:	3211      	adds	r2, #17
 8012aee:	42a2      	cmp	r2, r4
 8012af0:	bf88      	it	hi
 8012af2:	2300      	movhi	r3, #0
 8012af4:	4418      	add	r0, r3
 8012af6:	2300      	movs	r3, #0
 8012af8:	4288      	cmp	r0, r1
 8012afa:	d305      	bcc.n	8012b08 <__copybits+0x40>
 8012afc:	bd70      	pop	{r4, r5, r6, pc}
 8012afe:	f853 6b04 	ldr.w	r6, [r3], #4
 8012b02:	f845 6f04 	str.w	r6, [r5, #4]!
 8012b06:	e7eb      	b.n	8012ae0 <__copybits+0x18>
 8012b08:	f840 3b04 	str.w	r3, [r0], #4
 8012b0c:	e7f4      	b.n	8012af8 <__copybits+0x30>

08012b0e <__any_on>:
 8012b0e:	f100 0214 	add.w	r2, r0, #20
 8012b12:	6900      	ldr	r0, [r0, #16]
 8012b14:	114b      	asrs	r3, r1, #5
 8012b16:	4298      	cmp	r0, r3
 8012b18:	b510      	push	{r4, lr}
 8012b1a:	db11      	blt.n	8012b40 <__any_on+0x32>
 8012b1c:	dd0a      	ble.n	8012b34 <__any_on+0x26>
 8012b1e:	f011 011f 	ands.w	r1, r1, #31
 8012b22:	d007      	beq.n	8012b34 <__any_on+0x26>
 8012b24:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012b28:	fa24 f001 	lsr.w	r0, r4, r1
 8012b2c:	fa00 f101 	lsl.w	r1, r0, r1
 8012b30:	428c      	cmp	r4, r1
 8012b32:	d10b      	bne.n	8012b4c <__any_on+0x3e>
 8012b34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012b38:	4293      	cmp	r3, r2
 8012b3a:	d803      	bhi.n	8012b44 <__any_on+0x36>
 8012b3c:	2000      	movs	r0, #0
 8012b3e:	bd10      	pop	{r4, pc}
 8012b40:	4603      	mov	r3, r0
 8012b42:	e7f7      	b.n	8012b34 <__any_on+0x26>
 8012b44:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012b48:	2900      	cmp	r1, #0
 8012b4a:	d0f5      	beq.n	8012b38 <__any_on+0x2a>
 8012b4c:	2001      	movs	r0, #1
 8012b4e:	e7f6      	b.n	8012b3e <__any_on+0x30>

08012b50 <_strtol_l.constprop.0>:
 8012b50:	2b24      	cmp	r3, #36	@ 0x24
 8012b52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b56:	4686      	mov	lr, r0
 8012b58:	4690      	mov	r8, r2
 8012b5a:	d801      	bhi.n	8012b60 <_strtol_l.constprop.0+0x10>
 8012b5c:	2b01      	cmp	r3, #1
 8012b5e:	d106      	bne.n	8012b6e <_strtol_l.constprop.0+0x1e>
 8012b60:	f7fe f84c 	bl	8010bfc <__errno>
 8012b64:	2316      	movs	r3, #22
 8012b66:	6003      	str	r3, [r0, #0]
 8012b68:	2000      	movs	r0, #0
 8012b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b6e:	4834      	ldr	r0, [pc, #208]	@ (8012c40 <_strtol_l.constprop.0+0xf0>)
 8012b70:	460d      	mov	r5, r1
 8012b72:	462a      	mov	r2, r5
 8012b74:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012b78:	5d06      	ldrb	r6, [r0, r4]
 8012b7a:	f016 0608 	ands.w	r6, r6, #8
 8012b7e:	d1f8      	bne.n	8012b72 <_strtol_l.constprop.0+0x22>
 8012b80:	2c2d      	cmp	r4, #45	@ 0x2d
 8012b82:	d12d      	bne.n	8012be0 <_strtol_l.constprop.0+0x90>
 8012b84:	782c      	ldrb	r4, [r5, #0]
 8012b86:	2601      	movs	r6, #1
 8012b88:	1c95      	adds	r5, r2, #2
 8012b8a:	f033 0210 	bics.w	r2, r3, #16
 8012b8e:	d109      	bne.n	8012ba4 <_strtol_l.constprop.0+0x54>
 8012b90:	2c30      	cmp	r4, #48	@ 0x30
 8012b92:	d12a      	bne.n	8012bea <_strtol_l.constprop.0+0x9a>
 8012b94:	782a      	ldrb	r2, [r5, #0]
 8012b96:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012b9a:	2a58      	cmp	r2, #88	@ 0x58
 8012b9c:	d125      	bne.n	8012bea <_strtol_l.constprop.0+0x9a>
 8012b9e:	786c      	ldrb	r4, [r5, #1]
 8012ba0:	2310      	movs	r3, #16
 8012ba2:	3502      	adds	r5, #2
 8012ba4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8012ba8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012bac:	2200      	movs	r2, #0
 8012bae:	fbbc f9f3 	udiv	r9, ip, r3
 8012bb2:	4610      	mov	r0, r2
 8012bb4:	fb03 ca19 	mls	sl, r3, r9, ip
 8012bb8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8012bbc:	2f09      	cmp	r7, #9
 8012bbe:	d81b      	bhi.n	8012bf8 <_strtol_l.constprop.0+0xa8>
 8012bc0:	463c      	mov	r4, r7
 8012bc2:	42a3      	cmp	r3, r4
 8012bc4:	dd27      	ble.n	8012c16 <_strtol_l.constprop.0+0xc6>
 8012bc6:	1c57      	adds	r7, r2, #1
 8012bc8:	d007      	beq.n	8012bda <_strtol_l.constprop.0+0x8a>
 8012bca:	4581      	cmp	r9, r0
 8012bcc:	d320      	bcc.n	8012c10 <_strtol_l.constprop.0+0xc0>
 8012bce:	d101      	bne.n	8012bd4 <_strtol_l.constprop.0+0x84>
 8012bd0:	45a2      	cmp	sl, r4
 8012bd2:	db1d      	blt.n	8012c10 <_strtol_l.constprop.0+0xc0>
 8012bd4:	fb00 4003 	mla	r0, r0, r3, r4
 8012bd8:	2201      	movs	r2, #1
 8012bda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012bde:	e7eb      	b.n	8012bb8 <_strtol_l.constprop.0+0x68>
 8012be0:	2c2b      	cmp	r4, #43	@ 0x2b
 8012be2:	bf04      	itt	eq
 8012be4:	782c      	ldrbeq	r4, [r5, #0]
 8012be6:	1c95      	addeq	r5, r2, #2
 8012be8:	e7cf      	b.n	8012b8a <_strtol_l.constprop.0+0x3a>
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d1da      	bne.n	8012ba4 <_strtol_l.constprop.0+0x54>
 8012bee:	2c30      	cmp	r4, #48	@ 0x30
 8012bf0:	bf0c      	ite	eq
 8012bf2:	2308      	moveq	r3, #8
 8012bf4:	230a      	movne	r3, #10
 8012bf6:	e7d5      	b.n	8012ba4 <_strtol_l.constprop.0+0x54>
 8012bf8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012bfc:	2f19      	cmp	r7, #25
 8012bfe:	d801      	bhi.n	8012c04 <_strtol_l.constprop.0+0xb4>
 8012c00:	3c37      	subs	r4, #55	@ 0x37
 8012c02:	e7de      	b.n	8012bc2 <_strtol_l.constprop.0+0x72>
 8012c04:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012c08:	2f19      	cmp	r7, #25
 8012c0a:	d804      	bhi.n	8012c16 <_strtol_l.constprop.0+0xc6>
 8012c0c:	3c57      	subs	r4, #87	@ 0x57
 8012c0e:	e7d8      	b.n	8012bc2 <_strtol_l.constprop.0+0x72>
 8012c10:	f04f 32ff 	mov.w	r2, #4294967295
 8012c14:	e7e1      	b.n	8012bda <_strtol_l.constprop.0+0x8a>
 8012c16:	1c53      	adds	r3, r2, #1
 8012c18:	d108      	bne.n	8012c2c <_strtol_l.constprop.0+0xdc>
 8012c1a:	2322      	movs	r3, #34	@ 0x22
 8012c1c:	f8ce 3000 	str.w	r3, [lr]
 8012c20:	4660      	mov	r0, ip
 8012c22:	f1b8 0f00 	cmp.w	r8, #0
 8012c26:	d0a0      	beq.n	8012b6a <_strtol_l.constprop.0+0x1a>
 8012c28:	1e69      	subs	r1, r5, #1
 8012c2a:	e006      	b.n	8012c3a <_strtol_l.constprop.0+0xea>
 8012c2c:	b106      	cbz	r6, 8012c30 <_strtol_l.constprop.0+0xe0>
 8012c2e:	4240      	negs	r0, r0
 8012c30:	f1b8 0f00 	cmp.w	r8, #0
 8012c34:	d099      	beq.n	8012b6a <_strtol_l.constprop.0+0x1a>
 8012c36:	2a00      	cmp	r2, #0
 8012c38:	d1f6      	bne.n	8012c28 <_strtol_l.constprop.0+0xd8>
 8012c3a:	f8c8 1000 	str.w	r1, [r8]
 8012c3e:	e794      	b.n	8012b6a <_strtol_l.constprop.0+0x1a>
 8012c40:	08014e81 	.word	0x08014e81

08012c44 <_strtol_r>:
 8012c44:	f7ff bf84 	b.w	8012b50 <_strtol_l.constprop.0>

08012c48 <__ascii_wctomb>:
 8012c48:	4603      	mov	r3, r0
 8012c4a:	4608      	mov	r0, r1
 8012c4c:	b141      	cbz	r1, 8012c60 <__ascii_wctomb+0x18>
 8012c4e:	2aff      	cmp	r2, #255	@ 0xff
 8012c50:	d904      	bls.n	8012c5c <__ascii_wctomb+0x14>
 8012c52:	228a      	movs	r2, #138	@ 0x8a
 8012c54:	601a      	str	r2, [r3, #0]
 8012c56:	f04f 30ff 	mov.w	r0, #4294967295
 8012c5a:	4770      	bx	lr
 8012c5c:	700a      	strb	r2, [r1, #0]
 8012c5e:	2001      	movs	r0, #1
 8012c60:	4770      	bx	lr

08012c62 <__ssputs_r>:
 8012c62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c66:	688e      	ldr	r6, [r1, #8]
 8012c68:	461f      	mov	r7, r3
 8012c6a:	42be      	cmp	r6, r7
 8012c6c:	680b      	ldr	r3, [r1, #0]
 8012c6e:	4682      	mov	sl, r0
 8012c70:	460c      	mov	r4, r1
 8012c72:	4690      	mov	r8, r2
 8012c74:	d82d      	bhi.n	8012cd2 <__ssputs_r+0x70>
 8012c76:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012c7a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012c7e:	d026      	beq.n	8012cce <__ssputs_r+0x6c>
 8012c80:	6965      	ldr	r5, [r4, #20]
 8012c82:	6909      	ldr	r1, [r1, #16]
 8012c84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012c88:	eba3 0901 	sub.w	r9, r3, r1
 8012c8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012c90:	1c7b      	adds	r3, r7, #1
 8012c92:	444b      	add	r3, r9
 8012c94:	106d      	asrs	r5, r5, #1
 8012c96:	429d      	cmp	r5, r3
 8012c98:	bf38      	it	cc
 8012c9a:	461d      	movcc	r5, r3
 8012c9c:	0553      	lsls	r3, r2, #21
 8012c9e:	d527      	bpl.n	8012cf0 <__ssputs_r+0x8e>
 8012ca0:	4629      	mov	r1, r5
 8012ca2:	f7ff fa0f 	bl	80120c4 <_malloc_r>
 8012ca6:	4606      	mov	r6, r0
 8012ca8:	b360      	cbz	r0, 8012d04 <__ssputs_r+0xa2>
 8012caa:	6921      	ldr	r1, [r4, #16]
 8012cac:	464a      	mov	r2, r9
 8012cae:	f7fd ffd2 	bl	8010c56 <memcpy>
 8012cb2:	89a3      	ldrh	r3, [r4, #12]
 8012cb4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012cb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012cbc:	81a3      	strh	r3, [r4, #12]
 8012cbe:	6126      	str	r6, [r4, #16]
 8012cc0:	6165      	str	r5, [r4, #20]
 8012cc2:	444e      	add	r6, r9
 8012cc4:	eba5 0509 	sub.w	r5, r5, r9
 8012cc8:	6026      	str	r6, [r4, #0]
 8012cca:	60a5      	str	r5, [r4, #8]
 8012ccc:	463e      	mov	r6, r7
 8012cce:	42be      	cmp	r6, r7
 8012cd0:	d900      	bls.n	8012cd4 <__ssputs_r+0x72>
 8012cd2:	463e      	mov	r6, r7
 8012cd4:	6820      	ldr	r0, [r4, #0]
 8012cd6:	4632      	mov	r2, r6
 8012cd8:	4641      	mov	r1, r8
 8012cda:	f000 f9d3 	bl	8013084 <memmove>
 8012cde:	68a3      	ldr	r3, [r4, #8]
 8012ce0:	1b9b      	subs	r3, r3, r6
 8012ce2:	60a3      	str	r3, [r4, #8]
 8012ce4:	6823      	ldr	r3, [r4, #0]
 8012ce6:	4433      	add	r3, r6
 8012ce8:	6023      	str	r3, [r4, #0]
 8012cea:	2000      	movs	r0, #0
 8012cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cf0:	462a      	mov	r2, r5
 8012cf2:	f000 fa0c 	bl	801310e <_realloc_r>
 8012cf6:	4606      	mov	r6, r0
 8012cf8:	2800      	cmp	r0, #0
 8012cfa:	d1e0      	bne.n	8012cbe <__ssputs_r+0x5c>
 8012cfc:	6921      	ldr	r1, [r4, #16]
 8012cfe:	4650      	mov	r0, sl
 8012d00:	f7fe fe32 	bl	8011968 <_free_r>
 8012d04:	230c      	movs	r3, #12
 8012d06:	f8ca 3000 	str.w	r3, [sl]
 8012d0a:	89a3      	ldrh	r3, [r4, #12]
 8012d0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012d10:	81a3      	strh	r3, [r4, #12]
 8012d12:	f04f 30ff 	mov.w	r0, #4294967295
 8012d16:	e7e9      	b.n	8012cec <__ssputs_r+0x8a>

08012d18 <_svfiprintf_r>:
 8012d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d1c:	4698      	mov	r8, r3
 8012d1e:	898b      	ldrh	r3, [r1, #12]
 8012d20:	061b      	lsls	r3, r3, #24
 8012d22:	b09d      	sub	sp, #116	@ 0x74
 8012d24:	4607      	mov	r7, r0
 8012d26:	460d      	mov	r5, r1
 8012d28:	4614      	mov	r4, r2
 8012d2a:	d510      	bpl.n	8012d4e <_svfiprintf_r+0x36>
 8012d2c:	690b      	ldr	r3, [r1, #16]
 8012d2e:	b973      	cbnz	r3, 8012d4e <_svfiprintf_r+0x36>
 8012d30:	2140      	movs	r1, #64	@ 0x40
 8012d32:	f7ff f9c7 	bl	80120c4 <_malloc_r>
 8012d36:	6028      	str	r0, [r5, #0]
 8012d38:	6128      	str	r0, [r5, #16]
 8012d3a:	b930      	cbnz	r0, 8012d4a <_svfiprintf_r+0x32>
 8012d3c:	230c      	movs	r3, #12
 8012d3e:	603b      	str	r3, [r7, #0]
 8012d40:	f04f 30ff 	mov.w	r0, #4294967295
 8012d44:	b01d      	add	sp, #116	@ 0x74
 8012d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d4a:	2340      	movs	r3, #64	@ 0x40
 8012d4c:	616b      	str	r3, [r5, #20]
 8012d4e:	2300      	movs	r3, #0
 8012d50:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d52:	2320      	movs	r3, #32
 8012d54:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012d58:	f8cd 800c 	str.w	r8, [sp, #12]
 8012d5c:	2330      	movs	r3, #48	@ 0x30
 8012d5e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012efc <_svfiprintf_r+0x1e4>
 8012d62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012d66:	f04f 0901 	mov.w	r9, #1
 8012d6a:	4623      	mov	r3, r4
 8012d6c:	469a      	mov	sl, r3
 8012d6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012d72:	b10a      	cbz	r2, 8012d78 <_svfiprintf_r+0x60>
 8012d74:	2a25      	cmp	r2, #37	@ 0x25
 8012d76:	d1f9      	bne.n	8012d6c <_svfiprintf_r+0x54>
 8012d78:	ebba 0b04 	subs.w	fp, sl, r4
 8012d7c:	d00b      	beq.n	8012d96 <_svfiprintf_r+0x7e>
 8012d7e:	465b      	mov	r3, fp
 8012d80:	4622      	mov	r2, r4
 8012d82:	4629      	mov	r1, r5
 8012d84:	4638      	mov	r0, r7
 8012d86:	f7ff ff6c 	bl	8012c62 <__ssputs_r>
 8012d8a:	3001      	adds	r0, #1
 8012d8c:	f000 80a7 	beq.w	8012ede <_svfiprintf_r+0x1c6>
 8012d90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012d92:	445a      	add	r2, fp
 8012d94:	9209      	str	r2, [sp, #36]	@ 0x24
 8012d96:	f89a 3000 	ldrb.w	r3, [sl]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	f000 809f 	beq.w	8012ede <_svfiprintf_r+0x1c6>
 8012da0:	2300      	movs	r3, #0
 8012da2:	f04f 32ff 	mov.w	r2, #4294967295
 8012da6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012daa:	f10a 0a01 	add.w	sl, sl, #1
 8012dae:	9304      	str	r3, [sp, #16]
 8012db0:	9307      	str	r3, [sp, #28]
 8012db2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012db6:	931a      	str	r3, [sp, #104]	@ 0x68
 8012db8:	4654      	mov	r4, sl
 8012dba:	2205      	movs	r2, #5
 8012dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012dc0:	484e      	ldr	r0, [pc, #312]	@ (8012efc <_svfiprintf_r+0x1e4>)
 8012dc2:	f7ed fa25 	bl	8000210 <memchr>
 8012dc6:	9a04      	ldr	r2, [sp, #16]
 8012dc8:	b9d8      	cbnz	r0, 8012e02 <_svfiprintf_r+0xea>
 8012dca:	06d0      	lsls	r0, r2, #27
 8012dcc:	bf44      	itt	mi
 8012dce:	2320      	movmi	r3, #32
 8012dd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012dd4:	0711      	lsls	r1, r2, #28
 8012dd6:	bf44      	itt	mi
 8012dd8:	232b      	movmi	r3, #43	@ 0x2b
 8012dda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012dde:	f89a 3000 	ldrb.w	r3, [sl]
 8012de2:	2b2a      	cmp	r3, #42	@ 0x2a
 8012de4:	d015      	beq.n	8012e12 <_svfiprintf_r+0xfa>
 8012de6:	9a07      	ldr	r2, [sp, #28]
 8012de8:	4654      	mov	r4, sl
 8012dea:	2000      	movs	r0, #0
 8012dec:	f04f 0c0a 	mov.w	ip, #10
 8012df0:	4621      	mov	r1, r4
 8012df2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012df6:	3b30      	subs	r3, #48	@ 0x30
 8012df8:	2b09      	cmp	r3, #9
 8012dfa:	d94b      	bls.n	8012e94 <_svfiprintf_r+0x17c>
 8012dfc:	b1b0      	cbz	r0, 8012e2c <_svfiprintf_r+0x114>
 8012dfe:	9207      	str	r2, [sp, #28]
 8012e00:	e014      	b.n	8012e2c <_svfiprintf_r+0x114>
 8012e02:	eba0 0308 	sub.w	r3, r0, r8
 8012e06:	fa09 f303 	lsl.w	r3, r9, r3
 8012e0a:	4313      	orrs	r3, r2
 8012e0c:	9304      	str	r3, [sp, #16]
 8012e0e:	46a2      	mov	sl, r4
 8012e10:	e7d2      	b.n	8012db8 <_svfiprintf_r+0xa0>
 8012e12:	9b03      	ldr	r3, [sp, #12]
 8012e14:	1d19      	adds	r1, r3, #4
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	9103      	str	r1, [sp, #12]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	bfbb      	ittet	lt
 8012e1e:	425b      	neglt	r3, r3
 8012e20:	f042 0202 	orrlt.w	r2, r2, #2
 8012e24:	9307      	strge	r3, [sp, #28]
 8012e26:	9307      	strlt	r3, [sp, #28]
 8012e28:	bfb8      	it	lt
 8012e2a:	9204      	strlt	r2, [sp, #16]
 8012e2c:	7823      	ldrb	r3, [r4, #0]
 8012e2e:	2b2e      	cmp	r3, #46	@ 0x2e
 8012e30:	d10a      	bne.n	8012e48 <_svfiprintf_r+0x130>
 8012e32:	7863      	ldrb	r3, [r4, #1]
 8012e34:	2b2a      	cmp	r3, #42	@ 0x2a
 8012e36:	d132      	bne.n	8012e9e <_svfiprintf_r+0x186>
 8012e38:	9b03      	ldr	r3, [sp, #12]
 8012e3a:	1d1a      	adds	r2, r3, #4
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	9203      	str	r2, [sp, #12]
 8012e40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012e44:	3402      	adds	r4, #2
 8012e46:	9305      	str	r3, [sp, #20]
 8012e48:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8012f00 <_svfiprintf_r+0x1e8>
 8012e4c:	7821      	ldrb	r1, [r4, #0]
 8012e4e:	2203      	movs	r2, #3
 8012e50:	4650      	mov	r0, sl
 8012e52:	f7ed f9dd 	bl	8000210 <memchr>
 8012e56:	b138      	cbz	r0, 8012e68 <_svfiprintf_r+0x150>
 8012e58:	9b04      	ldr	r3, [sp, #16]
 8012e5a:	eba0 000a 	sub.w	r0, r0, sl
 8012e5e:	2240      	movs	r2, #64	@ 0x40
 8012e60:	4082      	lsls	r2, r0
 8012e62:	4313      	orrs	r3, r2
 8012e64:	3401      	adds	r4, #1
 8012e66:	9304      	str	r3, [sp, #16]
 8012e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e6c:	4825      	ldr	r0, [pc, #148]	@ (8012f04 <_svfiprintf_r+0x1ec>)
 8012e6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012e72:	2206      	movs	r2, #6
 8012e74:	f7ed f9cc 	bl	8000210 <memchr>
 8012e78:	2800      	cmp	r0, #0
 8012e7a:	d036      	beq.n	8012eea <_svfiprintf_r+0x1d2>
 8012e7c:	4b22      	ldr	r3, [pc, #136]	@ (8012f08 <_svfiprintf_r+0x1f0>)
 8012e7e:	bb1b      	cbnz	r3, 8012ec8 <_svfiprintf_r+0x1b0>
 8012e80:	9b03      	ldr	r3, [sp, #12]
 8012e82:	3307      	adds	r3, #7
 8012e84:	f023 0307 	bic.w	r3, r3, #7
 8012e88:	3308      	adds	r3, #8
 8012e8a:	9303      	str	r3, [sp, #12]
 8012e8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e8e:	4433      	add	r3, r6
 8012e90:	9309      	str	r3, [sp, #36]	@ 0x24
 8012e92:	e76a      	b.n	8012d6a <_svfiprintf_r+0x52>
 8012e94:	fb0c 3202 	mla	r2, ip, r2, r3
 8012e98:	460c      	mov	r4, r1
 8012e9a:	2001      	movs	r0, #1
 8012e9c:	e7a8      	b.n	8012df0 <_svfiprintf_r+0xd8>
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	3401      	adds	r4, #1
 8012ea2:	9305      	str	r3, [sp, #20]
 8012ea4:	4619      	mov	r1, r3
 8012ea6:	f04f 0c0a 	mov.w	ip, #10
 8012eaa:	4620      	mov	r0, r4
 8012eac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012eb0:	3a30      	subs	r2, #48	@ 0x30
 8012eb2:	2a09      	cmp	r2, #9
 8012eb4:	d903      	bls.n	8012ebe <_svfiprintf_r+0x1a6>
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d0c6      	beq.n	8012e48 <_svfiprintf_r+0x130>
 8012eba:	9105      	str	r1, [sp, #20]
 8012ebc:	e7c4      	b.n	8012e48 <_svfiprintf_r+0x130>
 8012ebe:	fb0c 2101 	mla	r1, ip, r1, r2
 8012ec2:	4604      	mov	r4, r0
 8012ec4:	2301      	movs	r3, #1
 8012ec6:	e7f0      	b.n	8012eaa <_svfiprintf_r+0x192>
 8012ec8:	ab03      	add	r3, sp, #12
 8012eca:	9300      	str	r3, [sp, #0]
 8012ecc:	462a      	mov	r2, r5
 8012ece:	4b0f      	ldr	r3, [pc, #60]	@ (8012f0c <_svfiprintf_r+0x1f4>)
 8012ed0:	a904      	add	r1, sp, #16
 8012ed2:	4638      	mov	r0, r7
 8012ed4:	f7fc fee4 	bl	800fca0 <_printf_float>
 8012ed8:	1c42      	adds	r2, r0, #1
 8012eda:	4606      	mov	r6, r0
 8012edc:	d1d6      	bne.n	8012e8c <_svfiprintf_r+0x174>
 8012ede:	89ab      	ldrh	r3, [r5, #12]
 8012ee0:	065b      	lsls	r3, r3, #25
 8012ee2:	f53f af2d 	bmi.w	8012d40 <_svfiprintf_r+0x28>
 8012ee6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012ee8:	e72c      	b.n	8012d44 <_svfiprintf_r+0x2c>
 8012eea:	ab03      	add	r3, sp, #12
 8012eec:	9300      	str	r3, [sp, #0]
 8012eee:	462a      	mov	r2, r5
 8012ef0:	4b06      	ldr	r3, [pc, #24]	@ (8012f0c <_svfiprintf_r+0x1f4>)
 8012ef2:	a904      	add	r1, sp, #16
 8012ef4:	4638      	mov	r0, r7
 8012ef6:	f7fd f96d 	bl	80101d4 <_printf_i>
 8012efa:	e7ed      	b.n	8012ed8 <_svfiprintf_r+0x1c0>
 8012efc:	08014f81 	.word	0x08014f81
 8012f00:	08014f87 	.word	0x08014f87
 8012f04:	08014f8b 	.word	0x08014f8b
 8012f08:	0800fca1 	.word	0x0800fca1
 8012f0c:	08012c63 	.word	0x08012c63

08012f10 <__sflush_r>:
 8012f10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f16:	0716      	lsls	r6, r2, #28
 8012f18:	4605      	mov	r5, r0
 8012f1a:	460c      	mov	r4, r1
 8012f1c:	d454      	bmi.n	8012fc8 <__sflush_r+0xb8>
 8012f1e:	684b      	ldr	r3, [r1, #4]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	dc02      	bgt.n	8012f2a <__sflush_r+0x1a>
 8012f24:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	dd48      	ble.n	8012fbc <__sflush_r+0xac>
 8012f2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012f2c:	2e00      	cmp	r6, #0
 8012f2e:	d045      	beq.n	8012fbc <__sflush_r+0xac>
 8012f30:	2300      	movs	r3, #0
 8012f32:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012f36:	682f      	ldr	r7, [r5, #0]
 8012f38:	6a21      	ldr	r1, [r4, #32]
 8012f3a:	602b      	str	r3, [r5, #0]
 8012f3c:	d030      	beq.n	8012fa0 <__sflush_r+0x90>
 8012f3e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012f40:	89a3      	ldrh	r3, [r4, #12]
 8012f42:	0759      	lsls	r1, r3, #29
 8012f44:	d505      	bpl.n	8012f52 <__sflush_r+0x42>
 8012f46:	6863      	ldr	r3, [r4, #4]
 8012f48:	1ad2      	subs	r2, r2, r3
 8012f4a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012f4c:	b10b      	cbz	r3, 8012f52 <__sflush_r+0x42>
 8012f4e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012f50:	1ad2      	subs	r2, r2, r3
 8012f52:	2300      	movs	r3, #0
 8012f54:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012f56:	6a21      	ldr	r1, [r4, #32]
 8012f58:	4628      	mov	r0, r5
 8012f5a:	47b0      	blx	r6
 8012f5c:	1c43      	adds	r3, r0, #1
 8012f5e:	89a3      	ldrh	r3, [r4, #12]
 8012f60:	d106      	bne.n	8012f70 <__sflush_r+0x60>
 8012f62:	6829      	ldr	r1, [r5, #0]
 8012f64:	291d      	cmp	r1, #29
 8012f66:	d82b      	bhi.n	8012fc0 <__sflush_r+0xb0>
 8012f68:	4a28      	ldr	r2, [pc, #160]	@ (801300c <__sflush_r+0xfc>)
 8012f6a:	410a      	asrs	r2, r1
 8012f6c:	07d6      	lsls	r6, r2, #31
 8012f6e:	d427      	bmi.n	8012fc0 <__sflush_r+0xb0>
 8012f70:	2200      	movs	r2, #0
 8012f72:	6062      	str	r2, [r4, #4]
 8012f74:	04d9      	lsls	r1, r3, #19
 8012f76:	6922      	ldr	r2, [r4, #16]
 8012f78:	6022      	str	r2, [r4, #0]
 8012f7a:	d504      	bpl.n	8012f86 <__sflush_r+0x76>
 8012f7c:	1c42      	adds	r2, r0, #1
 8012f7e:	d101      	bne.n	8012f84 <__sflush_r+0x74>
 8012f80:	682b      	ldr	r3, [r5, #0]
 8012f82:	b903      	cbnz	r3, 8012f86 <__sflush_r+0x76>
 8012f84:	6560      	str	r0, [r4, #84]	@ 0x54
 8012f86:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012f88:	602f      	str	r7, [r5, #0]
 8012f8a:	b1b9      	cbz	r1, 8012fbc <__sflush_r+0xac>
 8012f8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012f90:	4299      	cmp	r1, r3
 8012f92:	d002      	beq.n	8012f9a <__sflush_r+0x8a>
 8012f94:	4628      	mov	r0, r5
 8012f96:	f7fe fce7 	bl	8011968 <_free_r>
 8012f9a:	2300      	movs	r3, #0
 8012f9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8012f9e:	e00d      	b.n	8012fbc <__sflush_r+0xac>
 8012fa0:	2301      	movs	r3, #1
 8012fa2:	4628      	mov	r0, r5
 8012fa4:	47b0      	blx	r6
 8012fa6:	4602      	mov	r2, r0
 8012fa8:	1c50      	adds	r0, r2, #1
 8012faa:	d1c9      	bne.n	8012f40 <__sflush_r+0x30>
 8012fac:	682b      	ldr	r3, [r5, #0]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d0c6      	beq.n	8012f40 <__sflush_r+0x30>
 8012fb2:	2b1d      	cmp	r3, #29
 8012fb4:	d001      	beq.n	8012fba <__sflush_r+0xaa>
 8012fb6:	2b16      	cmp	r3, #22
 8012fb8:	d11d      	bne.n	8012ff6 <__sflush_r+0xe6>
 8012fba:	602f      	str	r7, [r5, #0]
 8012fbc:	2000      	movs	r0, #0
 8012fbe:	e021      	b.n	8013004 <__sflush_r+0xf4>
 8012fc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012fc4:	b21b      	sxth	r3, r3
 8012fc6:	e01a      	b.n	8012ffe <__sflush_r+0xee>
 8012fc8:	690f      	ldr	r7, [r1, #16]
 8012fca:	2f00      	cmp	r7, #0
 8012fcc:	d0f6      	beq.n	8012fbc <__sflush_r+0xac>
 8012fce:	0793      	lsls	r3, r2, #30
 8012fd0:	680e      	ldr	r6, [r1, #0]
 8012fd2:	bf08      	it	eq
 8012fd4:	694b      	ldreq	r3, [r1, #20]
 8012fd6:	600f      	str	r7, [r1, #0]
 8012fd8:	bf18      	it	ne
 8012fda:	2300      	movne	r3, #0
 8012fdc:	1bf6      	subs	r6, r6, r7
 8012fde:	608b      	str	r3, [r1, #8]
 8012fe0:	2e00      	cmp	r6, #0
 8012fe2:	ddeb      	ble.n	8012fbc <__sflush_r+0xac>
 8012fe4:	6a21      	ldr	r1, [r4, #32]
 8012fe6:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8012fea:	4633      	mov	r3, r6
 8012fec:	463a      	mov	r2, r7
 8012fee:	4628      	mov	r0, r5
 8012ff0:	47e0      	blx	ip
 8012ff2:	2800      	cmp	r0, #0
 8012ff4:	dc07      	bgt.n	8013006 <__sflush_r+0xf6>
 8012ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ffa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012ffe:	81a3      	strh	r3, [r4, #12]
 8013000:	f04f 30ff 	mov.w	r0, #4294967295
 8013004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013006:	4407      	add	r7, r0
 8013008:	1a36      	subs	r6, r6, r0
 801300a:	e7e9      	b.n	8012fe0 <__sflush_r+0xd0>
 801300c:	dfbffffe 	.word	0xdfbffffe

08013010 <_fflush_r>:
 8013010:	b538      	push	{r3, r4, r5, lr}
 8013012:	690b      	ldr	r3, [r1, #16]
 8013014:	4605      	mov	r5, r0
 8013016:	460c      	mov	r4, r1
 8013018:	b913      	cbnz	r3, 8013020 <_fflush_r+0x10>
 801301a:	2500      	movs	r5, #0
 801301c:	4628      	mov	r0, r5
 801301e:	bd38      	pop	{r3, r4, r5, pc}
 8013020:	b118      	cbz	r0, 801302a <_fflush_r+0x1a>
 8013022:	6a03      	ldr	r3, [r0, #32]
 8013024:	b90b      	cbnz	r3, 801302a <_fflush_r+0x1a>
 8013026:	f7fd fc8f 	bl	8010948 <__sinit>
 801302a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d0f3      	beq.n	801301a <_fflush_r+0xa>
 8013032:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013034:	07d0      	lsls	r0, r2, #31
 8013036:	d404      	bmi.n	8013042 <_fflush_r+0x32>
 8013038:	0599      	lsls	r1, r3, #22
 801303a:	d402      	bmi.n	8013042 <_fflush_r+0x32>
 801303c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801303e:	f7fd fe08 	bl	8010c52 <__retarget_lock_acquire_recursive>
 8013042:	4628      	mov	r0, r5
 8013044:	4621      	mov	r1, r4
 8013046:	f7ff ff63 	bl	8012f10 <__sflush_r>
 801304a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801304c:	07da      	lsls	r2, r3, #31
 801304e:	4605      	mov	r5, r0
 8013050:	d4e4      	bmi.n	801301c <_fflush_r+0xc>
 8013052:	89a3      	ldrh	r3, [r4, #12]
 8013054:	059b      	lsls	r3, r3, #22
 8013056:	d4e1      	bmi.n	801301c <_fflush_r+0xc>
 8013058:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801305a:	f7fd fdfb 	bl	8010c54 <__retarget_lock_release_recursive>
 801305e:	e7dd      	b.n	801301c <_fflush_r+0xc>

08013060 <fiprintf>:
 8013060:	b40e      	push	{r1, r2, r3}
 8013062:	b503      	push	{r0, r1, lr}
 8013064:	4601      	mov	r1, r0
 8013066:	ab03      	add	r3, sp, #12
 8013068:	4805      	ldr	r0, [pc, #20]	@ (8013080 <fiprintf+0x20>)
 801306a:	f853 2b04 	ldr.w	r2, [r3], #4
 801306e:	6800      	ldr	r0, [r0, #0]
 8013070:	9301      	str	r3, [sp, #4]
 8013072:	f000 f8a1 	bl	80131b8 <_vfiprintf_r>
 8013076:	b002      	add	sp, #8
 8013078:	f85d eb04 	ldr.w	lr, [sp], #4
 801307c:	b003      	add	sp, #12
 801307e:	4770      	bx	lr
 8013080:	20000198 	.word	0x20000198

08013084 <memmove>:
 8013084:	4288      	cmp	r0, r1
 8013086:	b510      	push	{r4, lr}
 8013088:	eb01 0402 	add.w	r4, r1, r2
 801308c:	d902      	bls.n	8013094 <memmove+0x10>
 801308e:	4284      	cmp	r4, r0
 8013090:	4623      	mov	r3, r4
 8013092:	d807      	bhi.n	80130a4 <memmove+0x20>
 8013094:	1e43      	subs	r3, r0, #1
 8013096:	42a1      	cmp	r1, r4
 8013098:	d008      	beq.n	80130ac <memmove+0x28>
 801309a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801309e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80130a2:	e7f8      	b.n	8013096 <memmove+0x12>
 80130a4:	4402      	add	r2, r0
 80130a6:	4601      	mov	r1, r0
 80130a8:	428a      	cmp	r2, r1
 80130aa:	d100      	bne.n	80130ae <memmove+0x2a>
 80130ac:	bd10      	pop	{r4, pc}
 80130ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80130b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80130b6:	e7f7      	b.n	80130a8 <memmove+0x24>

080130b8 <_sbrk_r>:
 80130b8:	b538      	push	{r3, r4, r5, lr}
 80130ba:	4d06      	ldr	r5, [pc, #24]	@ (80130d4 <_sbrk_r+0x1c>)
 80130bc:	2300      	movs	r3, #0
 80130be:	4604      	mov	r4, r0
 80130c0:	4608      	mov	r0, r1
 80130c2:	602b      	str	r3, [r5, #0]
 80130c4:	f7f5 fd08 	bl	8008ad8 <_sbrk>
 80130c8:	1c43      	adds	r3, r0, #1
 80130ca:	d102      	bne.n	80130d2 <_sbrk_r+0x1a>
 80130cc:	682b      	ldr	r3, [r5, #0]
 80130ce:	b103      	cbz	r3, 80130d2 <_sbrk_r+0x1a>
 80130d0:	6023      	str	r3, [r4, #0]
 80130d2:	bd38      	pop	{r3, r4, r5, pc}
 80130d4:	20003cec 	.word	0x20003cec

080130d8 <abort>:
 80130d8:	b508      	push	{r3, lr}
 80130da:	2006      	movs	r0, #6
 80130dc:	f000 fa40 	bl	8013560 <raise>
 80130e0:	2001      	movs	r0, #1
 80130e2:	f7f5 fc84 	bl	80089ee <_exit>

080130e6 <_calloc_r>:
 80130e6:	b570      	push	{r4, r5, r6, lr}
 80130e8:	fba1 5402 	umull	r5, r4, r1, r2
 80130ec:	b93c      	cbnz	r4, 80130fe <_calloc_r+0x18>
 80130ee:	4629      	mov	r1, r5
 80130f0:	f7fe ffe8 	bl	80120c4 <_malloc_r>
 80130f4:	4606      	mov	r6, r0
 80130f6:	b928      	cbnz	r0, 8013104 <_calloc_r+0x1e>
 80130f8:	2600      	movs	r6, #0
 80130fa:	4630      	mov	r0, r6
 80130fc:	bd70      	pop	{r4, r5, r6, pc}
 80130fe:	220c      	movs	r2, #12
 8013100:	6002      	str	r2, [r0, #0]
 8013102:	e7f9      	b.n	80130f8 <_calloc_r+0x12>
 8013104:	462a      	mov	r2, r5
 8013106:	4621      	mov	r1, r4
 8013108:	f7fd fcb7 	bl	8010a7a <memset>
 801310c:	e7f5      	b.n	80130fa <_calloc_r+0x14>

0801310e <_realloc_r>:
 801310e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013112:	4680      	mov	r8, r0
 8013114:	4615      	mov	r5, r2
 8013116:	460c      	mov	r4, r1
 8013118:	b921      	cbnz	r1, 8013124 <_realloc_r+0x16>
 801311a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801311e:	4611      	mov	r1, r2
 8013120:	f7fe bfd0 	b.w	80120c4 <_malloc_r>
 8013124:	b92a      	cbnz	r2, 8013132 <_realloc_r+0x24>
 8013126:	f7fe fc1f 	bl	8011968 <_free_r>
 801312a:	2400      	movs	r4, #0
 801312c:	4620      	mov	r0, r4
 801312e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013132:	f000 fa31 	bl	8013598 <_malloc_usable_size_r>
 8013136:	4285      	cmp	r5, r0
 8013138:	4606      	mov	r6, r0
 801313a:	d802      	bhi.n	8013142 <_realloc_r+0x34>
 801313c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8013140:	d8f4      	bhi.n	801312c <_realloc_r+0x1e>
 8013142:	4629      	mov	r1, r5
 8013144:	4640      	mov	r0, r8
 8013146:	f7fe ffbd 	bl	80120c4 <_malloc_r>
 801314a:	4607      	mov	r7, r0
 801314c:	2800      	cmp	r0, #0
 801314e:	d0ec      	beq.n	801312a <_realloc_r+0x1c>
 8013150:	42b5      	cmp	r5, r6
 8013152:	462a      	mov	r2, r5
 8013154:	4621      	mov	r1, r4
 8013156:	bf28      	it	cs
 8013158:	4632      	movcs	r2, r6
 801315a:	f7fd fd7c 	bl	8010c56 <memcpy>
 801315e:	4621      	mov	r1, r4
 8013160:	4640      	mov	r0, r8
 8013162:	f7fe fc01 	bl	8011968 <_free_r>
 8013166:	463c      	mov	r4, r7
 8013168:	e7e0      	b.n	801312c <_realloc_r+0x1e>

0801316a <__sfputc_r>:
 801316a:	6893      	ldr	r3, [r2, #8]
 801316c:	3b01      	subs	r3, #1
 801316e:	2b00      	cmp	r3, #0
 8013170:	b410      	push	{r4}
 8013172:	6093      	str	r3, [r2, #8]
 8013174:	da07      	bge.n	8013186 <__sfputc_r+0x1c>
 8013176:	6994      	ldr	r4, [r2, #24]
 8013178:	42a3      	cmp	r3, r4
 801317a:	db01      	blt.n	8013180 <__sfputc_r+0x16>
 801317c:	290a      	cmp	r1, #10
 801317e:	d102      	bne.n	8013186 <__sfputc_r+0x1c>
 8013180:	bc10      	pop	{r4}
 8013182:	f000 b931 	b.w	80133e8 <__swbuf_r>
 8013186:	6813      	ldr	r3, [r2, #0]
 8013188:	1c58      	adds	r0, r3, #1
 801318a:	6010      	str	r0, [r2, #0]
 801318c:	7019      	strb	r1, [r3, #0]
 801318e:	4608      	mov	r0, r1
 8013190:	bc10      	pop	{r4}
 8013192:	4770      	bx	lr

08013194 <__sfputs_r>:
 8013194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013196:	4606      	mov	r6, r0
 8013198:	460f      	mov	r7, r1
 801319a:	4614      	mov	r4, r2
 801319c:	18d5      	adds	r5, r2, r3
 801319e:	42ac      	cmp	r4, r5
 80131a0:	d101      	bne.n	80131a6 <__sfputs_r+0x12>
 80131a2:	2000      	movs	r0, #0
 80131a4:	e007      	b.n	80131b6 <__sfputs_r+0x22>
 80131a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131aa:	463a      	mov	r2, r7
 80131ac:	4630      	mov	r0, r6
 80131ae:	f7ff ffdc 	bl	801316a <__sfputc_r>
 80131b2:	1c43      	adds	r3, r0, #1
 80131b4:	d1f3      	bne.n	801319e <__sfputs_r+0xa>
 80131b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080131b8 <_vfiprintf_r>:
 80131b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131bc:	460d      	mov	r5, r1
 80131be:	b09d      	sub	sp, #116	@ 0x74
 80131c0:	4614      	mov	r4, r2
 80131c2:	4698      	mov	r8, r3
 80131c4:	4606      	mov	r6, r0
 80131c6:	b118      	cbz	r0, 80131d0 <_vfiprintf_r+0x18>
 80131c8:	6a03      	ldr	r3, [r0, #32]
 80131ca:	b90b      	cbnz	r3, 80131d0 <_vfiprintf_r+0x18>
 80131cc:	f7fd fbbc 	bl	8010948 <__sinit>
 80131d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80131d2:	07d9      	lsls	r1, r3, #31
 80131d4:	d405      	bmi.n	80131e2 <_vfiprintf_r+0x2a>
 80131d6:	89ab      	ldrh	r3, [r5, #12]
 80131d8:	059a      	lsls	r2, r3, #22
 80131da:	d402      	bmi.n	80131e2 <_vfiprintf_r+0x2a>
 80131dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80131de:	f7fd fd38 	bl	8010c52 <__retarget_lock_acquire_recursive>
 80131e2:	89ab      	ldrh	r3, [r5, #12]
 80131e4:	071b      	lsls	r3, r3, #28
 80131e6:	d501      	bpl.n	80131ec <_vfiprintf_r+0x34>
 80131e8:	692b      	ldr	r3, [r5, #16]
 80131ea:	b99b      	cbnz	r3, 8013214 <_vfiprintf_r+0x5c>
 80131ec:	4629      	mov	r1, r5
 80131ee:	4630      	mov	r0, r6
 80131f0:	f000 f938 	bl	8013464 <__swsetup_r>
 80131f4:	b170      	cbz	r0, 8013214 <_vfiprintf_r+0x5c>
 80131f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80131f8:	07dc      	lsls	r4, r3, #31
 80131fa:	d504      	bpl.n	8013206 <_vfiprintf_r+0x4e>
 80131fc:	f04f 30ff 	mov.w	r0, #4294967295
 8013200:	b01d      	add	sp, #116	@ 0x74
 8013202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013206:	89ab      	ldrh	r3, [r5, #12]
 8013208:	0598      	lsls	r0, r3, #22
 801320a:	d4f7      	bmi.n	80131fc <_vfiprintf_r+0x44>
 801320c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801320e:	f7fd fd21 	bl	8010c54 <__retarget_lock_release_recursive>
 8013212:	e7f3      	b.n	80131fc <_vfiprintf_r+0x44>
 8013214:	2300      	movs	r3, #0
 8013216:	9309      	str	r3, [sp, #36]	@ 0x24
 8013218:	2320      	movs	r3, #32
 801321a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801321e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013222:	2330      	movs	r3, #48	@ 0x30
 8013224:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80133d4 <_vfiprintf_r+0x21c>
 8013228:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801322c:	f04f 0901 	mov.w	r9, #1
 8013230:	4623      	mov	r3, r4
 8013232:	469a      	mov	sl, r3
 8013234:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013238:	b10a      	cbz	r2, 801323e <_vfiprintf_r+0x86>
 801323a:	2a25      	cmp	r2, #37	@ 0x25
 801323c:	d1f9      	bne.n	8013232 <_vfiprintf_r+0x7a>
 801323e:	ebba 0b04 	subs.w	fp, sl, r4
 8013242:	d00b      	beq.n	801325c <_vfiprintf_r+0xa4>
 8013244:	465b      	mov	r3, fp
 8013246:	4622      	mov	r2, r4
 8013248:	4629      	mov	r1, r5
 801324a:	4630      	mov	r0, r6
 801324c:	f7ff ffa2 	bl	8013194 <__sfputs_r>
 8013250:	3001      	adds	r0, #1
 8013252:	f000 80a7 	beq.w	80133a4 <_vfiprintf_r+0x1ec>
 8013256:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013258:	445a      	add	r2, fp
 801325a:	9209      	str	r2, [sp, #36]	@ 0x24
 801325c:	f89a 3000 	ldrb.w	r3, [sl]
 8013260:	2b00      	cmp	r3, #0
 8013262:	f000 809f 	beq.w	80133a4 <_vfiprintf_r+0x1ec>
 8013266:	2300      	movs	r3, #0
 8013268:	f04f 32ff 	mov.w	r2, #4294967295
 801326c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013270:	f10a 0a01 	add.w	sl, sl, #1
 8013274:	9304      	str	r3, [sp, #16]
 8013276:	9307      	str	r3, [sp, #28]
 8013278:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801327c:	931a      	str	r3, [sp, #104]	@ 0x68
 801327e:	4654      	mov	r4, sl
 8013280:	2205      	movs	r2, #5
 8013282:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013286:	4853      	ldr	r0, [pc, #332]	@ (80133d4 <_vfiprintf_r+0x21c>)
 8013288:	f7ec ffc2 	bl	8000210 <memchr>
 801328c:	9a04      	ldr	r2, [sp, #16]
 801328e:	b9d8      	cbnz	r0, 80132c8 <_vfiprintf_r+0x110>
 8013290:	06d1      	lsls	r1, r2, #27
 8013292:	bf44      	itt	mi
 8013294:	2320      	movmi	r3, #32
 8013296:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801329a:	0713      	lsls	r3, r2, #28
 801329c:	bf44      	itt	mi
 801329e:	232b      	movmi	r3, #43	@ 0x2b
 80132a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80132a4:	f89a 3000 	ldrb.w	r3, [sl]
 80132a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80132aa:	d015      	beq.n	80132d8 <_vfiprintf_r+0x120>
 80132ac:	9a07      	ldr	r2, [sp, #28]
 80132ae:	4654      	mov	r4, sl
 80132b0:	2000      	movs	r0, #0
 80132b2:	f04f 0c0a 	mov.w	ip, #10
 80132b6:	4621      	mov	r1, r4
 80132b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80132bc:	3b30      	subs	r3, #48	@ 0x30
 80132be:	2b09      	cmp	r3, #9
 80132c0:	d94b      	bls.n	801335a <_vfiprintf_r+0x1a2>
 80132c2:	b1b0      	cbz	r0, 80132f2 <_vfiprintf_r+0x13a>
 80132c4:	9207      	str	r2, [sp, #28]
 80132c6:	e014      	b.n	80132f2 <_vfiprintf_r+0x13a>
 80132c8:	eba0 0308 	sub.w	r3, r0, r8
 80132cc:	fa09 f303 	lsl.w	r3, r9, r3
 80132d0:	4313      	orrs	r3, r2
 80132d2:	9304      	str	r3, [sp, #16]
 80132d4:	46a2      	mov	sl, r4
 80132d6:	e7d2      	b.n	801327e <_vfiprintf_r+0xc6>
 80132d8:	9b03      	ldr	r3, [sp, #12]
 80132da:	1d19      	adds	r1, r3, #4
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	9103      	str	r1, [sp, #12]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	bfbb      	ittet	lt
 80132e4:	425b      	neglt	r3, r3
 80132e6:	f042 0202 	orrlt.w	r2, r2, #2
 80132ea:	9307      	strge	r3, [sp, #28]
 80132ec:	9307      	strlt	r3, [sp, #28]
 80132ee:	bfb8      	it	lt
 80132f0:	9204      	strlt	r2, [sp, #16]
 80132f2:	7823      	ldrb	r3, [r4, #0]
 80132f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80132f6:	d10a      	bne.n	801330e <_vfiprintf_r+0x156>
 80132f8:	7863      	ldrb	r3, [r4, #1]
 80132fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80132fc:	d132      	bne.n	8013364 <_vfiprintf_r+0x1ac>
 80132fe:	9b03      	ldr	r3, [sp, #12]
 8013300:	1d1a      	adds	r2, r3, #4
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	9203      	str	r2, [sp, #12]
 8013306:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801330a:	3402      	adds	r4, #2
 801330c:	9305      	str	r3, [sp, #20]
 801330e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80133d8 <_vfiprintf_r+0x220>
 8013312:	7821      	ldrb	r1, [r4, #0]
 8013314:	2203      	movs	r2, #3
 8013316:	4650      	mov	r0, sl
 8013318:	f7ec ff7a 	bl	8000210 <memchr>
 801331c:	b138      	cbz	r0, 801332e <_vfiprintf_r+0x176>
 801331e:	9b04      	ldr	r3, [sp, #16]
 8013320:	eba0 000a 	sub.w	r0, r0, sl
 8013324:	2240      	movs	r2, #64	@ 0x40
 8013326:	4082      	lsls	r2, r0
 8013328:	4313      	orrs	r3, r2
 801332a:	3401      	adds	r4, #1
 801332c:	9304      	str	r3, [sp, #16]
 801332e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013332:	482a      	ldr	r0, [pc, #168]	@ (80133dc <_vfiprintf_r+0x224>)
 8013334:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013338:	2206      	movs	r2, #6
 801333a:	f7ec ff69 	bl	8000210 <memchr>
 801333e:	2800      	cmp	r0, #0
 8013340:	d03f      	beq.n	80133c2 <_vfiprintf_r+0x20a>
 8013342:	4b27      	ldr	r3, [pc, #156]	@ (80133e0 <_vfiprintf_r+0x228>)
 8013344:	bb1b      	cbnz	r3, 801338e <_vfiprintf_r+0x1d6>
 8013346:	9b03      	ldr	r3, [sp, #12]
 8013348:	3307      	adds	r3, #7
 801334a:	f023 0307 	bic.w	r3, r3, #7
 801334e:	3308      	adds	r3, #8
 8013350:	9303      	str	r3, [sp, #12]
 8013352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013354:	443b      	add	r3, r7
 8013356:	9309      	str	r3, [sp, #36]	@ 0x24
 8013358:	e76a      	b.n	8013230 <_vfiprintf_r+0x78>
 801335a:	fb0c 3202 	mla	r2, ip, r2, r3
 801335e:	460c      	mov	r4, r1
 8013360:	2001      	movs	r0, #1
 8013362:	e7a8      	b.n	80132b6 <_vfiprintf_r+0xfe>
 8013364:	2300      	movs	r3, #0
 8013366:	3401      	adds	r4, #1
 8013368:	9305      	str	r3, [sp, #20]
 801336a:	4619      	mov	r1, r3
 801336c:	f04f 0c0a 	mov.w	ip, #10
 8013370:	4620      	mov	r0, r4
 8013372:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013376:	3a30      	subs	r2, #48	@ 0x30
 8013378:	2a09      	cmp	r2, #9
 801337a:	d903      	bls.n	8013384 <_vfiprintf_r+0x1cc>
 801337c:	2b00      	cmp	r3, #0
 801337e:	d0c6      	beq.n	801330e <_vfiprintf_r+0x156>
 8013380:	9105      	str	r1, [sp, #20]
 8013382:	e7c4      	b.n	801330e <_vfiprintf_r+0x156>
 8013384:	fb0c 2101 	mla	r1, ip, r1, r2
 8013388:	4604      	mov	r4, r0
 801338a:	2301      	movs	r3, #1
 801338c:	e7f0      	b.n	8013370 <_vfiprintf_r+0x1b8>
 801338e:	ab03      	add	r3, sp, #12
 8013390:	9300      	str	r3, [sp, #0]
 8013392:	462a      	mov	r2, r5
 8013394:	4b13      	ldr	r3, [pc, #76]	@ (80133e4 <_vfiprintf_r+0x22c>)
 8013396:	a904      	add	r1, sp, #16
 8013398:	4630      	mov	r0, r6
 801339a:	f7fc fc81 	bl	800fca0 <_printf_float>
 801339e:	4607      	mov	r7, r0
 80133a0:	1c78      	adds	r0, r7, #1
 80133a2:	d1d6      	bne.n	8013352 <_vfiprintf_r+0x19a>
 80133a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80133a6:	07d9      	lsls	r1, r3, #31
 80133a8:	d405      	bmi.n	80133b6 <_vfiprintf_r+0x1fe>
 80133aa:	89ab      	ldrh	r3, [r5, #12]
 80133ac:	059a      	lsls	r2, r3, #22
 80133ae:	d402      	bmi.n	80133b6 <_vfiprintf_r+0x1fe>
 80133b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80133b2:	f7fd fc4f 	bl	8010c54 <__retarget_lock_release_recursive>
 80133b6:	89ab      	ldrh	r3, [r5, #12]
 80133b8:	065b      	lsls	r3, r3, #25
 80133ba:	f53f af1f 	bmi.w	80131fc <_vfiprintf_r+0x44>
 80133be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80133c0:	e71e      	b.n	8013200 <_vfiprintf_r+0x48>
 80133c2:	ab03      	add	r3, sp, #12
 80133c4:	9300      	str	r3, [sp, #0]
 80133c6:	462a      	mov	r2, r5
 80133c8:	4b06      	ldr	r3, [pc, #24]	@ (80133e4 <_vfiprintf_r+0x22c>)
 80133ca:	a904      	add	r1, sp, #16
 80133cc:	4630      	mov	r0, r6
 80133ce:	f7fc ff01 	bl	80101d4 <_printf_i>
 80133d2:	e7e4      	b.n	801339e <_vfiprintf_r+0x1e6>
 80133d4:	08014f81 	.word	0x08014f81
 80133d8:	08014f87 	.word	0x08014f87
 80133dc:	08014f8b 	.word	0x08014f8b
 80133e0:	0800fca1 	.word	0x0800fca1
 80133e4:	08013195 	.word	0x08013195

080133e8 <__swbuf_r>:
 80133e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133ea:	460e      	mov	r6, r1
 80133ec:	4614      	mov	r4, r2
 80133ee:	4605      	mov	r5, r0
 80133f0:	b118      	cbz	r0, 80133fa <__swbuf_r+0x12>
 80133f2:	6a03      	ldr	r3, [r0, #32]
 80133f4:	b90b      	cbnz	r3, 80133fa <__swbuf_r+0x12>
 80133f6:	f7fd faa7 	bl	8010948 <__sinit>
 80133fa:	69a3      	ldr	r3, [r4, #24]
 80133fc:	60a3      	str	r3, [r4, #8]
 80133fe:	89a3      	ldrh	r3, [r4, #12]
 8013400:	071a      	lsls	r2, r3, #28
 8013402:	d501      	bpl.n	8013408 <__swbuf_r+0x20>
 8013404:	6923      	ldr	r3, [r4, #16]
 8013406:	b943      	cbnz	r3, 801341a <__swbuf_r+0x32>
 8013408:	4621      	mov	r1, r4
 801340a:	4628      	mov	r0, r5
 801340c:	f000 f82a 	bl	8013464 <__swsetup_r>
 8013410:	b118      	cbz	r0, 801341a <__swbuf_r+0x32>
 8013412:	f04f 37ff 	mov.w	r7, #4294967295
 8013416:	4638      	mov	r0, r7
 8013418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801341a:	6823      	ldr	r3, [r4, #0]
 801341c:	6922      	ldr	r2, [r4, #16]
 801341e:	1a98      	subs	r0, r3, r2
 8013420:	6963      	ldr	r3, [r4, #20]
 8013422:	b2f6      	uxtb	r6, r6
 8013424:	4283      	cmp	r3, r0
 8013426:	4637      	mov	r7, r6
 8013428:	dc05      	bgt.n	8013436 <__swbuf_r+0x4e>
 801342a:	4621      	mov	r1, r4
 801342c:	4628      	mov	r0, r5
 801342e:	f7ff fdef 	bl	8013010 <_fflush_r>
 8013432:	2800      	cmp	r0, #0
 8013434:	d1ed      	bne.n	8013412 <__swbuf_r+0x2a>
 8013436:	68a3      	ldr	r3, [r4, #8]
 8013438:	3b01      	subs	r3, #1
 801343a:	60a3      	str	r3, [r4, #8]
 801343c:	6823      	ldr	r3, [r4, #0]
 801343e:	1c5a      	adds	r2, r3, #1
 8013440:	6022      	str	r2, [r4, #0]
 8013442:	701e      	strb	r6, [r3, #0]
 8013444:	6962      	ldr	r2, [r4, #20]
 8013446:	1c43      	adds	r3, r0, #1
 8013448:	429a      	cmp	r2, r3
 801344a:	d004      	beq.n	8013456 <__swbuf_r+0x6e>
 801344c:	89a3      	ldrh	r3, [r4, #12]
 801344e:	07db      	lsls	r3, r3, #31
 8013450:	d5e1      	bpl.n	8013416 <__swbuf_r+0x2e>
 8013452:	2e0a      	cmp	r6, #10
 8013454:	d1df      	bne.n	8013416 <__swbuf_r+0x2e>
 8013456:	4621      	mov	r1, r4
 8013458:	4628      	mov	r0, r5
 801345a:	f7ff fdd9 	bl	8013010 <_fflush_r>
 801345e:	2800      	cmp	r0, #0
 8013460:	d0d9      	beq.n	8013416 <__swbuf_r+0x2e>
 8013462:	e7d6      	b.n	8013412 <__swbuf_r+0x2a>

08013464 <__swsetup_r>:
 8013464:	b538      	push	{r3, r4, r5, lr}
 8013466:	4b29      	ldr	r3, [pc, #164]	@ (801350c <__swsetup_r+0xa8>)
 8013468:	4605      	mov	r5, r0
 801346a:	6818      	ldr	r0, [r3, #0]
 801346c:	460c      	mov	r4, r1
 801346e:	b118      	cbz	r0, 8013478 <__swsetup_r+0x14>
 8013470:	6a03      	ldr	r3, [r0, #32]
 8013472:	b90b      	cbnz	r3, 8013478 <__swsetup_r+0x14>
 8013474:	f7fd fa68 	bl	8010948 <__sinit>
 8013478:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801347c:	0719      	lsls	r1, r3, #28
 801347e:	d422      	bmi.n	80134c6 <__swsetup_r+0x62>
 8013480:	06da      	lsls	r2, r3, #27
 8013482:	d407      	bmi.n	8013494 <__swsetup_r+0x30>
 8013484:	2209      	movs	r2, #9
 8013486:	602a      	str	r2, [r5, #0]
 8013488:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801348c:	81a3      	strh	r3, [r4, #12]
 801348e:	f04f 30ff 	mov.w	r0, #4294967295
 8013492:	e033      	b.n	80134fc <__swsetup_r+0x98>
 8013494:	0758      	lsls	r0, r3, #29
 8013496:	d512      	bpl.n	80134be <__swsetup_r+0x5a>
 8013498:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801349a:	b141      	cbz	r1, 80134ae <__swsetup_r+0x4a>
 801349c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80134a0:	4299      	cmp	r1, r3
 80134a2:	d002      	beq.n	80134aa <__swsetup_r+0x46>
 80134a4:	4628      	mov	r0, r5
 80134a6:	f7fe fa5f 	bl	8011968 <_free_r>
 80134aa:	2300      	movs	r3, #0
 80134ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80134ae:	89a3      	ldrh	r3, [r4, #12]
 80134b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80134b4:	81a3      	strh	r3, [r4, #12]
 80134b6:	2300      	movs	r3, #0
 80134b8:	6063      	str	r3, [r4, #4]
 80134ba:	6923      	ldr	r3, [r4, #16]
 80134bc:	6023      	str	r3, [r4, #0]
 80134be:	89a3      	ldrh	r3, [r4, #12]
 80134c0:	f043 0308 	orr.w	r3, r3, #8
 80134c4:	81a3      	strh	r3, [r4, #12]
 80134c6:	6923      	ldr	r3, [r4, #16]
 80134c8:	b94b      	cbnz	r3, 80134de <__swsetup_r+0x7a>
 80134ca:	89a3      	ldrh	r3, [r4, #12]
 80134cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80134d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80134d4:	d003      	beq.n	80134de <__swsetup_r+0x7a>
 80134d6:	4621      	mov	r1, r4
 80134d8:	4628      	mov	r0, r5
 80134da:	f000 f88b 	bl	80135f4 <__smakebuf_r>
 80134de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80134e2:	f013 0201 	ands.w	r2, r3, #1
 80134e6:	d00a      	beq.n	80134fe <__swsetup_r+0x9a>
 80134e8:	2200      	movs	r2, #0
 80134ea:	60a2      	str	r2, [r4, #8]
 80134ec:	6962      	ldr	r2, [r4, #20]
 80134ee:	4252      	negs	r2, r2
 80134f0:	61a2      	str	r2, [r4, #24]
 80134f2:	6922      	ldr	r2, [r4, #16]
 80134f4:	b942      	cbnz	r2, 8013508 <__swsetup_r+0xa4>
 80134f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80134fa:	d1c5      	bne.n	8013488 <__swsetup_r+0x24>
 80134fc:	bd38      	pop	{r3, r4, r5, pc}
 80134fe:	0799      	lsls	r1, r3, #30
 8013500:	bf58      	it	pl
 8013502:	6962      	ldrpl	r2, [r4, #20]
 8013504:	60a2      	str	r2, [r4, #8]
 8013506:	e7f4      	b.n	80134f2 <__swsetup_r+0x8e>
 8013508:	2000      	movs	r0, #0
 801350a:	e7f7      	b.n	80134fc <__swsetup_r+0x98>
 801350c:	20000198 	.word	0x20000198

08013510 <_raise_r>:
 8013510:	291f      	cmp	r1, #31
 8013512:	b538      	push	{r3, r4, r5, lr}
 8013514:	4605      	mov	r5, r0
 8013516:	460c      	mov	r4, r1
 8013518:	d904      	bls.n	8013524 <_raise_r+0x14>
 801351a:	2316      	movs	r3, #22
 801351c:	6003      	str	r3, [r0, #0]
 801351e:	f04f 30ff 	mov.w	r0, #4294967295
 8013522:	bd38      	pop	{r3, r4, r5, pc}
 8013524:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013526:	b112      	cbz	r2, 801352e <_raise_r+0x1e>
 8013528:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801352c:	b94b      	cbnz	r3, 8013542 <_raise_r+0x32>
 801352e:	4628      	mov	r0, r5
 8013530:	f000 f830 	bl	8013594 <_getpid_r>
 8013534:	4622      	mov	r2, r4
 8013536:	4601      	mov	r1, r0
 8013538:	4628      	mov	r0, r5
 801353a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801353e:	f000 b817 	b.w	8013570 <_kill_r>
 8013542:	2b01      	cmp	r3, #1
 8013544:	d00a      	beq.n	801355c <_raise_r+0x4c>
 8013546:	1c59      	adds	r1, r3, #1
 8013548:	d103      	bne.n	8013552 <_raise_r+0x42>
 801354a:	2316      	movs	r3, #22
 801354c:	6003      	str	r3, [r0, #0]
 801354e:	2001      	movs	r0, #1
 8013550:	e7e7      	b.n	8013522 <_raise_r+0x12>
 8013552:	2100      	movs	r1, #0
 8013554:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013558:	4620      	mov	r0, r4
 801355a:	4798      	blx	r3
 801355c:	2000      	movs	r0, #0
 801355e:	e7e0      	b.n	8013522 <_raise_r+0x12>

08013560 <raise>:
 8013560:	4b02      	ldr	r3, [pc, #8]	@ (801356c <raise+0xc>)
 8013562:	4601      	mov	r1, r0
 8013564:	6818      	ldr	r0, [r3, #0]
 8013566:	f7ff bfd3 	b.w	8013510 <_raise_r>
 801356a:	bf00      	nop
 801356c:	20000198 	.word	0x20000198

08013570 <_kill_r>:
 8013570:	b538      	push	{r3, r4, r5, lr}
 8013572:	4d07      	ldr	r5, [pc, #28]	@ (8013590 <_kill_r+0x20>)
 8013574:	2300      	movs	r3, #0
 8013576:	4604      	mov	r4, r0
 8013578:	4608      	mov	r0, r1
 801357a:	4611      	mov	r1, r2
 801357c:	602b      	str	r3, [r5, #0]
 801357e:	f7f5 fa26 	bl	80089ce <_kill>
 8013582:	1c43      	adds	r3, r0, #1
 8013584:	d102      	bne.n	801358c <_kill_r+0x1c>
 8013586:	682b      	ldr	r3, [r5, #0]
 8013588:	b103      	cbz	r3, 801358c <_kill_r+0x1c>
 801358a:	6023      	str	r3, [r4, #0]
 801358c:	bd38      	pop	{r3, r4, r5, pc}
 801358e:	bf00      	nop
 8013590:	20003cec 	.word	0x20003cec

08013594 <_getpid_r>:
 8013594:	f7f5 ba14 	b.w	80089c0 <_getpid>

08013598 <_malloc_usable_size_r>:
 8013598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801359c:	1f18      	subs	r0, r3, #4
 801359e:	2b00      	cmp	r3, #0
 80135a0:	bfbc      	itt	lt
 80135a2:	580b      	ldrlt	r3, [r1, r0]
 80135a4:	18c0      	addlt	r0, r0, r3
 80135a6:	4770      	bx	lr

080135a8 <__swhatbuf_r>:
 80135a8:	b570      	push	{r4, r5, r6, lr}
 80135aa:	460c      	mov	r4, r1
 80135ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135b0:	2900      	cmp	r1, #0
 80135b2:	b096      	sub	sp, #88	@ 0x58
 80135b4:	4615      	mov	r5, r2
 80135b6:	461e      	mov	r6, r3
 80135b8:	da0d      	bge.n	80135d6 <__swhatbuf_r+0x2e>
 80135ba:	89a3      	ldrh	r3, [r4, #12]
 80135bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80135c0:	f04f 0100 	mov.w	r1, #0
 80135c4:	bf14      	ite	ne
 80135c6:	2340      	movne	r3, #64	@ 0x40
 80135c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80135cc:	2000      	movs	r0, #0
 80135ce:	6031      	str	r1, [r6, #0]
 80135d0:	602b      	str	r3, [r5, #0]
 80135d2:	b016      	add	sp, #88	@ 0x58
 80135d4:	bd70      	pop	{r4, r5, r6, pc}
 80135d6:	466a      	mov	r2, sp
 80135d8:	f000 f848 	bl	801366c <_fstat_r>
 80135dc:	2800      	cmp	r0, #0
 80135de:	dbec      	blt.n	80135ba <__swhatbuf_r+0x12>
 80135e0:	9901      	ldr	r1, [sp, #4]
 80135e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80135e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80135ea:	4259      	negs	r1, r3
 80135ec:	4159      	adcs	r1, r3
 80135ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80135f2:	e7eb      	b.n	80135cc <__swhatbuf_r+0x24>

080135f4 <__smakebuf_r>:
 80135f4:	898b      	ldrh	r3, [r1, #12]
 80135f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80135f8:	079d      	lsls	r5, r3, #30
 80135fa:	4606      	mov	r6, r0
 80135fc:	460c      	mov	r4, r1
 80135fe:	d507      	bpl.n	8013610 <__smakebuf_r+0x1c>
 8013600:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013604:	6023      	str	r3, [r4, #0]
 8013606:	6123      	str	r3, [r4, #16]
 8013608:	2301      	movs	r3, #1
 801360a:	6163      	str	r3, [r4, #20]
 801360c:	b003      	add	sp, #12
 801360e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013610:	ab01      	add	r3, sp, #4
 8013612:	466a      	mov	r2, sp
 8013614:	f7ff ffc8 	bl	80135a8 <__swhatbuf_r>
 8013618:	9f00      	ldr	r7, [sp, #0]
 801361a:	4605      	mov	r5, r0
 801361c:	4639      	mov	r1, r7
 801361e:	4630      	mov	r0, r6
 8013620:	f7fe fd50 	bl	80120c4 <_malloc_r>
 8013624:	b948      	cbnz	r0, 801363a <__smakebuf_r+0x46>
 8013626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801362a:	059a      	lsls	r2, r3, #22
 801362c:	d4ee      	bmi.n	801360c <__smakebuf_r+0x18>
 801362e:	f023 0303 	bic.w	r3, r3, #3
 8013632:	f043 0302 	orr.w	r3, r3, #2
 8013636:	81a3      	strh	r3, [r4, #12]
 8013638:	e7e2      	b.n	8013600 <__smakebuf_r+0xc>
 801363a:	89a3      	ldrh	r3, [r4, #12]
 801363c:	6020      	str	r0, [r4, #0]
 801363e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013642:	81a3      	strh	r3, [r4, #12]
 8013644:	9b01      	ldr	r3, [sp, #4]
 8013646:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801364a:	b15b      	cbz	r3, 8013664 <__smakebuf_r+0x70>
 801364c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013650:	4630      	mov	r0, r6
 8013652:	f000 f81d 	bl	8013690 <_isatty_r>
 8013656:	b128      	cbz	r0, 8013664 <__smakebuf_r+0x70>
 8013658:	89a3      	ldrh	r3, [r4, #12]
 801365a:	f023 0303 	bic.w	r3, r3, #3
 801365e:	f043 0301 	orr.w	r3, r3, #1
 8013662:	81a3      	strh	r3, [r4, #12]
 8013664:	89a3      	ldrh	r3, [r4, #12]
 8013666:	431d      	orrs	r5, r3
 8013668:	81a5      	strh	r5, [r4, #12]
 801366a:	e7cf      	b.n	801360c <__smakebuf_r+0x18>

0801366c <_fstat_r>:
 801366c:	b538      	push	{r3, r4, r5, lr}
 801366e:	4d07      	ldr	r5, [pc, #28]	@ (801368c <_fstat_r+0x20>)
 8013670:	2300      	movs	r3, #0
 8013672:	4604      	mov	r4, r0
 8013674:	4608      	mov	r0, r1
 8013676:	4611      	mov	r1, r2
 8013678:	602b      	str	r3, [r5, #0]
 801367a:	f7f5 fa07 	bl	8008a8c <_fstat>
 801367e:	1c43      	adds	r3, r0, #1
 8013680:	d102      	bne.n	8013688 <_fstat_r+0x1c>
 8013682:	682b      	ldr	r3, [r5, #0]
 8013684:	b103      	cbz	r3, 8013688 <_fstat_r+0x1c>
 8013686:	6023      	str	r3, [r4, #0]
 8013688:	bd38      	pop	{r3, r4, r5, pc}
 801368a:	bf00      	nop
 801368c:	20003cec 	.word	0x20003cec

08013690 <_isatty_r>:
 8013690:	b538      	push	{r3, r4, r5, lr}
 8013692:	4d06      	ldr	r5, [pc, #24]	@ (80136ac <_isatty_r+0x1c>)
 8013694:	2300      	movs	r3, #0
 8013696:	4604      	mov	r4, r0
 8013698:	4608      	mov	r0, r1
 801369a:	602b      	str	r3, [r5, #0]
 801369c:	f7f5 fa05 	bl	8008aaa <_isatty>
 80136a0:	1c43      	adds	r3, r0, #1
 80136a2:	d102      	bne.n	80136aa <_isatty_r+0x1a>
 80136a4:	682b      	ldr	r3, [r5, #0]
 80136a6:	b103      	cbz	r3, 80136aa <_isatty_r+0x1a>
 80136a8:	6023      	str	r3, [r4, #0]
 80136aa:	bd38      	pop	{r3, r4, r5, pc}
 80136ac:	20003cec 	.word	0x20003cec

080136b0 <sqrtf>:
 80136b0:	b538      	push	{r3, r4, r5, lr}
 80136b2:	4605      	mov	r5, r0
 80136b4:	f000 f998 	bl	80139e8 <__ieee754_sqrtf>
 80136b8:	4629      	mov	r1, r5
 80136ba:	4604      	mov	r4, r0
 80136bc:	4628      	mov	r0, r5
 80136be:	f7ed fdd7 	bl	8001270 <__aeabi_fcmpun>
 80136c2:	b968      	cbnz	r0, 80136e0 <sqrtf+0x30>
 80136c4:	2100      	movs	r1, #0
 80136c6:	4628      	mov	r0, r5
 80136c8:	f7ed fdaa 	bl	8001220 <__aeabi_fcmplt>
 80136cc:	b140      	cbz	r0, 80136e0 <sqrtf+0x30>
 80136ce:	f7fd fa95 	bl	8010bfc <__errno>
 80136d2:	2321      	movs	r3, #33	@ 0x21
 80136d4:	2100      	movs	r1, #0
 80136d6:	6003      	str	r3, [r0, #0]
 80136d8:	4608      	mov	r0, r1
 80136da:	f7ed fcb7 	bl	800104c <__aeabi_fdiv>
 80136de:	4604      	mov	r4, r0
 80136e0:	4620      	mov	r0, r4
 80136e2:	bd38      	pop	{r3, r4, r5, pc}

080136e4 <atanf>:
 80136e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136e8:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 80136ec:	f1b5 4fa1 	cmp.w	r5, #1350565888	@ 0x50800000
 80136f0:	4604      	mov	r4, r0
 80136f2:	4680      	mov	r8, r0
 80136f4:	d30e      	bcc.n	8013714 <atanf+0x30>
 80136f6:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80136fa:	d904      	bls.n	8013706 <atanf+0x22>
 80136fc:	4601      	mov	r1, r0
 80136fe:	f7ed fae9 	bl	8000cd4 <__addsf3>
 8013702:	4604      	mov	r4, r0
 8013704:	e003      	b.n	801370e <atanf+0x2a>
 8013706:	2800      	cmp	r0, #0
 8013708:	f340 80ce 	ble.w	80138a8 <atanf+0x1c4>
 801370c:	4c67      	ldr	r4, [pc, #412]	@ (80138ac <atanf+0x1c8>)
 801370e:	4620      	mov	r0, r4
 8013710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013714:	4b66      	ldr	r3, [pc, #408]	@ (80138b0 <atanf+0x1cc>)
 8013716:	429d      	cmp	r5, r3
 8013718:	d80e      	bhi.n	8013738 <atanf+0x54>
 801371a:	f1b5 5f44 	cmp.w	r5, #822083584	@ 0x31000000
 801371e:	d208      	bcs.n	8013732 <atanf+0x4e>
 8013720:	4964      	ldr	r1, [pc, #400]	@ (80138b4 <atanf+0x1d0>)
 8013722:	f7ed fad7 	bl	8000cd4 <__addsf3>
 8013726:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 801372a:	f7ed fd97 	bl	800125c <__aeabi_fcmpgt>
 801372e:	2800      	cmp	r0, #0
 8013730:	d1ed      	bne.n	801370e <atanf+0x2a>
 8013732:	f04f 36ff 	mov.w	r6, #4294967295
 8013736:	e01c      	b.n	8013772 <atanf+0x8e>
 8013738:	f000 f918 	bl	801396c <fabsf>
 801373c:	4b5e      	ldr	r3, [pc, #376]	@ (80138b8 <atanf+0x1d4>)
 801373e:	429d      	cmp	r5, r3
 8013740:	4604      	mov	r4, r0
 8013742:	d87c      	bhi.n	801383e <atanf+0x15a>
 8013744:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8013748:	429d      	cmp	r5, r3
 801374a:	d867      	bhi.n	801381c <atanf+0x138>
 801374c:	4601      	mov	r1, r0
 801374e:	f7ed fac1 	bl	8000cd4 <__addsf3>
 8013752:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8013756:	f7ed fabb 	bl	8000cd0 <__aeabi_fsub>
 801375a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 801375e:	4605      	mov	r5, r0
 8013760:	4620      	mov	r0, r4
 8013762:	f7ed fab7 	bl	8000cd4 <__addsf3>
 8013766:	4601      	mov	r1, r0
 8013768:	4628      	mov	r0, r5
 801376a:	f7ed fc6f 	bl	800104c <__aeabi_fdiv>
 801376e:	2600      	movs	r6, #0
 8013770:	4604      	mov	r4, r0
 8013772:	4621      	mov	r1, r4
 8013774:	4620      	mov	r0, r4
 8013776:	f7ed fbb5 	bl	8000ee4 <__aeabi_fmul>
 801377a:	4601      	mov	r1, r0
 801377c:	4607      	mov	r7, r0
 801377e:	f7ed fbb1 	bl	8000ee4 <__aeabi_fmul>
 8013782:	494e      	ldr	r1, [pc, #312]	@ (80138bc <atanf+0x1d8>)
 8013784:	4605      	mov	r5, r0
 8013786:	f7ed fbad 	bl	8000ee4 <__aeabi_fmul>
 801378a:	494d      	ldr	r1, [pc, #308]	@ (80138c0 <atanf+0x1dc>)
 801378c:	f7ed faa2 	bl	8000cd4 <__addsf3>
 8013790:	4629      	mov	r1, r5
 8013792:	f7ed fba7 	bl	8000ee4 <__aeabi_fmul>
 8013796:	494b      	ldr	r1, [pc, #300]	@ (80138c4 <atanf+0x1e0>)
 8013798:	f7ed fa9c 	bl	8000cd4 <__addsf3>
 801379c:	4629      	mov	r1, r5
 801379e:	f7ed fba1 	bl	8000ee4 <__aeabi_fmul>
 80137a2:	4949      	ldr	r1, [pc, #292]	@ (80138c8 <atanf+0x1e4>)
 80137a4:	f7ed fa96 	bl	8000cd4 <__addsf3>
 80137a8:	4629      	mov	r1, r5
 80137aa:	f7ed fb9b 	bl	8000ee4 <__aeabi_fmul>
 80137ae:	4947      	ldr	r1, [pc, #284]	@ (80138cc <atanf+0x1e8>)
 80137b0:	f7ed fa90 	bl	8000cd4 <__addsf3>
 80137b4:	4629      	mov	r1, r5
 80137b6:	f7ed fb95 	bl	8000ee4 <__aeabi_fmul>
 80137ba:	4945      	ldr	r1, [pc, #276]	@ (80138d0 <atanf+0x1ec>)
 80137bc:	f7ed fa8a 	bl	8000cd4 <__addsf3>
 80137c0:	4639      	mov	r1, r7
 80137c2:	f7ed fb8f 	bl	8000ee4 <__aeabi_fmul>
 80137c6:	4943      	ldr	r1, [pc, #268]	@ (80138d4 <atanf+0x1f0>)
 80137c8:	4607      	mov	r7, r0
 80137ca:	4628      	mov	r0, r5
 80137cc:	f7ed fb8a 	bl	8000ee4 <__aeabi_fmul>
 80137d0:	4941      	ldr	r1, [pc, #260]	@ (80138d8 <atanf+0x1f4>)
 80137d2:	f7ed fa7d 	bl	8000cd0 <__aeabi_fsub>
 80137d6:	4629      	mov	r1, r5
 80137d8:	f7ed fb84 	bl	8000ee4 <__aeabi_fmul>
 80137dc:	493f      	ldr	r1, [pc, #252]	@ (80138dc <atanf+0x1f8>)
 80137de:	f7ed fa77 	bl	8000cd0 <__aeabi_fsub>
 80137e2:	4629      	mov	r1, r5
 80137e4:	f7ed fb7e 	bl	8000ee4 <__aeabi_fmul>
 80137e8:	493d      	ldr	r1, [pc, #244]	@ (80138e0 <atanf+0x1fc>)
 80137ea:	f7ed fa71 	bl	8000cd0 <__aeabi_fsub>
 80137ee:	4629      	mov	r1, r5
 80137f0:	f7ed fb78 	bl	8000ee4 <__aeabi_fmul>
 80137f4:	493b      	ldr	r1, [pc, #236]	@ (80138e4 <atanf+0x200>)
 80137f6:	f7ed fa6b 	bl	8000cd0 <__aeabi_fsub>
 80137fa:	4629      	mov	r1, r5
 80137fc:	f7ed fb72 	bl	8000ee4 <__aeabi_fmul>
 8013800:	4601      	mov	r1, r0
 8013802:	4638      	mov	r0, r7
 8013804:	f7ed fa66 	bl	8000cd4 <__addsf3>
 8013808:	4621      	mov	r1, r4
 801380a:	f7ed fb6b 	bl	8000ee4 <__aeabi_fmul>
 801380e:	1c73      	adds	r3, r6, #1
 8013810:	4601      	mov	r1, r0
 8013812:	d133      	bne.n	801387c <atanf+0x198>
 8013814:	4620      	mov	r0, r4
 8013816:	f7ed fa5b 	bl	8000cd0 <__aeabi_fsub>
 801381a:	e772      	b.n	8013702 <atanf+0x1e>
 801381c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8013820:	f7ed fa56 	bl	8000cd0 <__aeabi_fsub>
 8013824:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8013828:	4605      	mov	r5, r0
 801382a:	4620      	mov	r0, r4
 801382c:	f7ed fa52 	bl	8000cd4 <__addsf3>
 8013830:	4601      	mov	r1, r0
 8013832:	4628      	mov	r0, r5
 8013834:	f7ed fc0a 	bl	800104c <__aeabi_fdiv>
 8013838:	2601      	movs	r6, #1
 801383a:	4604      	mov	r4, r0
 801383c:	e799      	b.n	8013772 <atanf+0x8e>
 801383e:	4b2a      	ldr	r3, [pc, #168]	@ (80138e8 <atanf+0x204>)
 8013840:	429d      	cmp	r5, r3
 8013842:	d814      	bhi.n	801386e <atanf+0x18a>
 8013844:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 8013848:	f7ed fa42 	bl	8000cd0 <__aeabi_fsub>
 801384c:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 8013850:	4605      	mov	r5, r0
 8013852:	4620      	mov	r0, r4
 8013854:	f7ed fb46 	bl	8000ee4 <__aeabi_fmul>
 8013858:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 801385c:	f7ed fa3a 	bl	8000cd4 <__addsf3>
 8013860:	4601      	mov	r1, r0
 8013862:	4628      	mov	r0, r5
 8013864:	f7ed fbf2 	bl	800104c <__aeabi_fdiv>
 8013868:	2602      	movs	r6, #2
 801386a:	4604      	mov	r4, r0
 801386c:	e781      	b.n	8013772 <atanf+0x8e>
 801386e:	4601      	mov	r1, r0
 8013870:	481e      	ldr	r0, [pc, #120]	@ (80138ec <atanf+0x208>)
 8013872:	f7ed fbeb 	bl	800104c <__aeabi_fdiv>
 8013876:	2603      	movs	r6, #3
 8013878:	4604      	mov	r4, r0
 801387a:	e77a      	b.n	8013772 <atanf+0x8e>
 801387c:	4b1c      	ldr	r3, [pc, #112]	@ (80138f0 <atanf+0x20c>)
 801387e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8013882:	f7ed fa25 	bl	8000cd0 <__aeabi_fsub>
 8013886:	4621      	mov	r1, r4
 8013888:	f7ed fa22 	bl	8000cd0 <__aeabi_fsub>
 801388c:	4b19      	ldr	r3, [pc, #100]	@ (80138f4 <atanf+0x210>)
 801388e:	4601      	mov	r1, r0
 8013890:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013894:	f7ed fa1c 	bl	8000cd0 <__aeabi_fsub>
 8013898:	f1b8 0f00 	cmp.w	r8, #0
 801389c:	4604      	mov	r4, r0
 801389e:	f6bf af36 	bge.w	801370e <atanf+0x2a>
 80138a2:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 80138a6:	e732      	b.n	801370e <atanf+0x2a>
 80138a8:	4c13      	ldr	r4, [pc, #76]	@ (80138f8 <atanf+0x214>)
 80138aa:	e730      	b.n	801370e <atanf+0x2a>
 80138ac:	3fc90fdb 	.word	0x3fc90fdb
 80138b0:	3edfffff 	.word	0x3edfffff
 80138b4:	7149f2ca 	.word	0x7149f2ca
 80138b8:	3f97ffff 	.word	0x3f97ffff
 80138bc:	3c8569d7 	.word	0x3c8569d7
 80138c0:	3d4bda59 	.word	0x3d4bda59
 80138c4:	3d886b35 	.word	0x3d886b35
 80138c8:	3dba2e6e 	.word	0x3dba2e6e
 80138cc:	3e124925 	.word	0x3e124925
 80138d0:	3eaaaaab 	.word	0x3eaaaaab
 80138d4:	bd15a221 	.word	0xbd15a221
 80138d8:	3d6ef16b 	.word	0x3d6ef16b
 80138dc:	3d9d8795 	.word	0x3d9d8795
 80138e0:	3de38e38 	.word	0x3de38e38
 80138e4:	3e4ccccd 	.word	0x3e4ccccd
 80138e8:	401bffff 	.word	0x401bffff
 80138ec:	bf800000 	.word	0xbf800000
 80138f0:	08014f94 	.word	0x08014f94
 80138f4:	08014fa4 	.word	0x08014fa4
 80138f8:	bfc90fdb 	.word	0xbfc90fdb

080138fc <cosf>:
 80138fc:	b507      	push	{r0, r1, r2, lr}
 80138fe:	4a1a      	ldr	r2, [pc, #104]	@ (8013968 <cosf+0x6c>)
 8013900:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8013904:	4293      	cmp	r3, r2
 8013906:	4601      	mov	r1, r0
 8013908:	d805      	bhi.n	8013916 <cosf+0x1a>
 801390a:	2100      	movs	r1, #0
 801390c:	b003      	add	sp, #12
 801390e:	f85d eb04 	ldr.w	lr, [sp], #4
 8013912:	f000 b8d9 	b.w	8013ac8 <__kernel_cosf>
 8013916:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801391a:	d304      	bcc.n	8013926 <cosf+0x2a>
 801391c:	f7ed f9d8 	bl	8000cd0 <__aeabi_fsub>
 8013920:	b003      	add	sp, #12
 8013922:	f85d fb04 	ldr.w	pc, [sp], #4
 8013926:	4669      	mov	r1, sp
 8013928:	f000 f9c4 	bl	8013cb4 <__ieee754_rem_pio2f>
 801392c:	f000 0203 	and.w	r2, r0, #3
 8013930:	2a01      	cmp	r2, #1
 8013932:	d007      	beq.n	8013944 <cosf+0x48>
 8013934:	2a02      	cmp	r2, #2
 8013936:	d00c      	beq.n	8013952 <cosf+0x56>
 8013938:	b982      	cbnz	r2, 801395c <cosf+0x60>
 801393a:	9901      	ldr	r1, [sp, #4]
 801393c:	9800      	ldr	r0, [sp, #0]
 801393e:	f000 f8c3 	bl	8013ac8 <__kernel_cosf>
 8013942:	e7ed      	b.n	8013920 <cosf+0x24>
 8013944:	9901      	ldr	r1, [sp, #4]
 8013946:	9800      	ldr	r0, [sp, #0]
 8013948:	f000 f93e 	bl	8013bc8 <__kernel_sinf>
 801394c:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8013950:	e7e6      	b.n	8013920 <cosf+0x24>
 8013952:	9901      	ldr	r1, [sp, #4]
 8013954:	9800      	ldr	r0, [sp, #0]
 8013956:	f000 f8b7 	bl	8013ac8 <__kernel_cosf>
 801395a:	e7f7      	b.n	801394c <cosf+0x50>
 801395c:	9901      	ldr	r1, [sp, #4]
 801395e:	9800      	ldr	r0, [sp, #0]
 8013960:	2201      	movs	r2, #1
 8013962:	f000 f931 	bl	8013bc8 <__kernel_sinf>
 8013966:	e7db      	b.n	8013920 <cosf+0x24>
 8013968:	3f490fd8 	.word	0x3f490fd8

0801396c <fabsf>:
 801396c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8013970:	4770      	bx	lr
	...

08013974 <sinf>:
 8013974:	b507      	push	{r0, r1, r2, lr}
 8013976:	4a1b      	ldr	r2, [pc, #108]	@ (80139e4 <sinf+0x70>)
 8013978:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 801397c:	4293      	cmp	r3, r2
 801397e:	4601      	mov	r1, r0
 8013980:	d806      	bhi.n	8013990 <sinf+0x1c>
 8013982:	2200      	movs	r2, #0
 8013984:	2100      	movs	r1, #0
 8013986:	b003      	add	sp, #12
 8013988:	f85d eb04 	ldr.w	lr, [sp], #4
 801398c:	f000 b91c 	b.w	8013bc8 <__kernel_sinf>
 8013990:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8013994:	d304      	bcc.n	80139a0 <sinf+0x2c>
 8013996:	f7ed f99b 	bl	8000cd0 <__aeabi_fsub>
 801399a:	b003      	add	sp, #12
 801399c:	f85d fb04 	ldr.w	pc, [sp], #4
 80139a0:	4669      	mov	r1, sp
 80139a2:	f000 f987 	bl	8013cb4 <__ieee754_rem_pio2f>
 80139a6:	f000 0003 	and.w	r0, r0, #3
 80139aa:	2801      	cmp	r0, #1
 80139ac:	d008      	beq.n	80139c0 <sinf+0x4c>
 80139ae:	2802      	cmp	r0, #2
 80139b0:	d00b      	beq.n	80139ca <sinf+0x56>
 80139b2:	b990      	cbnz	r0, 80139da <sinf+0x66>
 80139b4:	9901      	ldr	r1, [sp, #4]
 80139b6:	9800      	ldr	r0, [sp, #0]
 80139b8:	2201      	movs	r2, #1
 80139ba:	f000 f905 	bl	8013bc8 <__kernel_sinf>
 80139be:	e7ec      	b.n	801399a <sinf+0x26>
 80139c0:	9901      	ldr	r1, [sp, #4]
 80139c2:	9800      	ldr	r0, [sp, #0]
 80139c4:	f000 f880 	bl	8013ac8 <__kernel_cosf>
 80139c8:	e7e7      	b.n	801399a <sinf+0x26>
 80139ca:	9901      	ldr	r1, [sp, #4]
 80139cc:	9800      	ldr	r0, [sp, #0]
 80139ce:	2201      	movs	r2, #1
 80139d0:	f000 f8fa 	bl	8013bc8 <__kernel_sinf>
 80139d4:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80139d8:	e7df      	b.n	801399a <sinf+0x26>
 80139da:	9901      	ldr	r1, [sp, #4]
 80139dc:	9800      	ldr	r0, [sp, #0]
 80139de:	f000 f873 	bl	8013ac8 <__kernel_cosf>
 80139e2:	e7f7      	b.n	80139d4 <sinf+0x60>
 80139e4:	3f490fd8 	.word	0x3f490fd8

080139e8 <__ieee754_sqrtf>:
 80139e8:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 80139ec:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80139f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139f4:	4603      	mov	r3, r0
 80139f6:	4604      	mov	r4, r0
 80139f8:	d30a      	bcc.n	8013a10 <__ieee754_sqrtf+0x28>
 80139fa:	4601      	mov	r1, r0
 80139fc:	f7ed fa72 	bl	8000ee4 <__aeabi_fmul>
 8013a00:	4601      	mov	r1, r0
 8013a02:	4620      	mov	r0, r4
 8013a04:	f7ed f966 	bl	8000cd4 <__addsf3>
 8013a08:	4604      	mov	r4, r0
 8013a0a:	4620      	mov	r0, r4
 8013a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a10:	2a00      	cmp	r2, #0
 8013a12:	d0fa      	beq.n	8013a0a <__ieee754_sqrtf+0x22>
 8013a14:	2800      	cmp	r0, #0
 8013a16:	da06      	bge.n	8013a26 <__ieee754_sqrtf+0x3e>
 8013a18:	4601      	mov	r1, r0
 8013a1a:	f7ed f959 	bl	8000cd0 <__aeabi_fsub>
 8013a1e:	4601      	mov	r1, r0
 8013a20:	f7ed fb14 	bl	800104c <__aeabi_fdiv>
 8013a24:	e7f0      	b.n	8013a08 <__ieee754_sqrtf+0x20>
 8013a26:	f010 42ff 	ands.w	r2, r0, #2139095040	@ 0x7f800000
 8013a2a:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8013a2e:	d03d      	beq.n	8013aac <__ieee754_sqrtf+0xc4>
 8013a30:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013a34:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8013a38:	07ca      	lsls	r2, r1, #31
 8013a3a:	f1a1 057f 	sub.w	r5, r1, #127	@ 0x7f
 8013a3e:	bf58      	it	pl
 8013a40:	005b      	lslpl	r3, r3, #1
 8013a42:	2400      	movs	r4, #0
 8013a44:	106d      	asrs	r5, r5, #1
 8013a46:	005b      	lsls	r3, r3, #1
 8013a48:	2019      	movs	r0, #25
 8013a4a:	4626      	mov	r6, r4
 8013a4c:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8013a50:	1872      	adds	r2, r6, r1
 8013a52:	429a      	cmp	r2, r3
 8013a54:	bfdd      	ittte	le
 8013a56:	1856      	addle	r6, r2, r1
 8013a58:	1864      	addle	r4, r4, r1
 8013a5a:	1a9a      	suble	r2, r3, r2
 8013a5c:	461a      	movgt	r2, r3
 8013a5e:	3801      	subs	r0, #1
 8013a60:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8013a64:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8013a68:	d1f2      	bne.n	8013a50 <__ieee754_sqrtf+0x68>
 8013a6a:	b1ba      	cbz	r2, 8013a9c <__ieee754_sqrtf+0xb4>
 8013a6c:	4e14      	ldr	r6, [pc, #80]	@ (8013ac0 <__ieee754_sqrtf+0xd8>)
 8013a6e:	4f15      	ldr	r7, [pc, #84]	@ (8013ac4 <__ieee754_sqrtf+0xdc>)
 8013a70:	6830      	ldr	r0, [r6, #0]
 8013a72:	6839      	ldr	r1, [r7, #0]
 8013a74:	f8d6 8000 	ldr.w	r8, [r6]
 8013a78:	f7ed f92a 	bl	8000cd0 <__aeabi_fsub>
 8013a7c:	4601      	mov	r1, r0
 8013a7e:	4640      	mov	r0, r8
 8013a80:	f7ed fbd8 	bl	8001234 <__aeabi_fcmple>
 8013a84:	b150      	cbz	r0, 8013a9c <__ieee754_sqrtf+0xb4>
 8013a86:	6830      	ldr	r0, [r6, #0]
 8013a88:	6839      	ldr	r1, [r7, #0]
 8013a8a:	6836      	ldr	r6, [r6, #0]
 8013a8c:	f7ed f922 	bl	8000cd4 <__addsf3>
 8013a90:	4601      	mov	r1, r0
 8013a92:	4630      	mov	r0, r6
 8013a94:	f7ed fbc4 	bl	8001220 <__aeabi_fcmplt>
 8013a98:	b168      	cbz	r0, 8013ab6 <__ieee754_sqrtf+0xce>
 8013a9a:	3402      	adds	r4, #2
 8013a9c:	1064      	asrs	r4, r4, #1
 8013a9e:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8013aa2:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8013aa6:	e7b0      	b.n	8013a0a <__ieee754_sqrtf+0x22>
 8013aa8:	005b      	lsls	r3, r3, #1
 8013aaa:	3201      	adds	r2, #1
 8013aac:	0218      	lsls	r0, r3, #8
 8013aae:	d5fb      	bpl.n	8013aa8 <__ieee754_sqrtf+0xc0>
 8013ab0:	3a01      	subs	r2, #1
 8013ab2:	1a89      	subs	r1, r1, r2
 8013ab4:	e7bc      	b.n	8013a30 <__ieee754_sqrtf+0x48>
 8013ab6:	3401      	adds	r4, #1
 8013ab8:	f024 0401 	bic.w	r4, r4, #1
 8013abc:	e7ee      	b.n	8013a9c <__ieee754_sqrtf+0xb4>
 8013abe:	bf00      	nop
 8013ac0:	200001ec 	.word	0x200001ec
 8013ac4:	200001e8 	.word	0x200001e8

08013ac8 <__kernel_cosf>:
 8013ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013acc:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8013ad0:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 8013ad4:	4606      	mov	r6, r0
 8013ad6:	4688      	mov	r8, r1
 8013ad8:	d203      	bcs.n	8013ae2 <__kernel_cosf+0x1a>
 8013ada:	f7ed fbdf 	bl	800129c <__aeabi_f2iz>
 8013ade:	2800      	cmp	r0, #0
 8013ae0:	d05c      	beq.n	8013b9c <__kernel_cosf+0xd4>
 8013ae2:	4631      	mov	r1, r6
 8013ae4:	4630      	mov	r0, r6
 8013ae6:	f7ed f9fd 	bl	8000ee4 <__aeabi_fmul>
 8013aea:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8013aee:	4604      	mov	r4, r0
 8013af0:	f7ed f9f8 	bl	8000ee4 <__aeabi_fmul>
 8013af4:	492b      	ldr	r1, [pc, #172]	@ (8013ba4 <__kernel_cosf+0xdc>)
 8013af6:	4607      	mov	r7, r0
 8013af8:	4620      	mov	r0, r4
 8013afa:	f7ed f9f3 	bl	8000ee4 <__aeabi_fmul>
 8013afe:	492a      	ldr	r1, [pc, #168]	@ (8013ba8 <__kernel_cosf+0xe0>)
 8013b00:	f7ed f8e8 	bl	8000cd4 <__addsf3>
 8013b04:	4621      	mov	r1, r4
 8013b06:	f7ed f9ed 	bl	8000ee4 <__aeabi_fmul>
 8013b0a:	4928      	ldr	r1, [pc, #160]	@ (8013bac <__kernel_cosf+0xe4>)
 8013b0c:	f7ed f8e0 	bl	8000cd0 <__aeabi_fsub>
 8013b10:	4621      	mov	r1, r4
 8013b12:	f7ed f9e7 	bl	8000ee4 <__aeabi_fmul>
 8013b16:	4926      	ldr	r1, [pc, #152]	@ (8013bb0 <__kernel_cosf+0xe8>)
 8013b18:	f7ed f8dc 	bl	8000cd4 <__addsf3>
 8013b1c:	4621      	mov	r1, r4
 8013b1e:	f7ed f9e1 	bl	8000ee4 <__aeabi_fmul>
 8013b22:	4924      	ldr	r1, [pc, #144]	@ (8013bb4 <__kernel_cosf+0xec>)
 8013b24:	f7ed f8d4 	bl	8000cd0 <__aeabi_fsub>
 8013b28:	4621      	mov	r1, r4
 8013b2a:	f7ed f9db 	bl	8000ee4 <__aeabi_fmul>
 8013b2e:	4922      	ldr	r1, [pc, #136]	@ (8013bb8 <__kernel_cosf+0xf0>)
 8013b30:	f7ed f8d0 	bl	8000cd4 <__addsf3>
 8013b34:	4621      	mov	r1, r4
 8013b36:	f7ed f9d5 	bl	8000ee4 <__aeabi_fmul>
 8013b3a:	4621      	mov	r1, r4
 8013b3c:	f7ed f9d2 	bl	8000ee4 <__aeabi_fmul>
 8013b40:	4641      	mov	r1, r8
 8013b42:	4604      	mov	r4, r0
 8013b44:	4630      	mov	r0, r6
 8013b46:	f7ed f9cd 	bl	8000ee4 <__aeabi_fmul>
 8013b4a:	4601      	mov	r1, r0
 8013b4c:	4620      	mov	r0, r4
 8013b4e:	f7ed f8bf 	bl	8000cd0 <__aeabi_fsub>
 8013b52:	4b1a      	ldr	r3, [pc, #104]	@ (8013bbc <__kernel_cosf+0xf4>)
 8013b54:	429d      	cmp	r5, r3
 8013b56:	4604      	mov	r4, r0
 8013b58:	d80a      	bhi.n	8013b70 <__kernel_cosf+0xa8>
 8013b5a:	4601      	mov	r1, r0
 8013b5c:	4638      	mov	r0, r7
 8013b5e:	f7ed f8b7 	bl	8000cd0 <__aeabi_fsub>
 8013b62:	4601      	mov	r1, r0
 8013b64:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8013b68:	f7ed f8b2 	bl	8000cd0 <__aeabi_fsub>
 8013b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b70:	4b13      	ldr	r3, [pc, #76]	@ (8013bc0 <__kernel_cosf+0xf8>)
 8013b72:	429d      	cmp	r5, r3
 8013b74:	bf8c      	ite	hi
 8013b76:	4d13      	ldrhi	r5, [pc, #76]	@ (8013bc4 <__kernel_cosf+0xfc>)
 8013b78:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 8013b7c:	4629      	mov	r1, r5
 8013b7e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8013b82:	f7ed f8a5 	bl	8000cd0 <__aeabi_fsub>
 8013b86:	4629      	mov	r1, r5
 8013b88:	4606      	mov	r6, r0
 8013b8a:	4638      	mov	r0, r7
 8013b8c:	f7ed f8a0 	bl	8000cd0 <__aeabi_fsub>
 8013b90:	4621      	mov	r1, r4
 8013b92:	f7ed f89d 	bl	8000cd0 <__aeabi_fsub>
 8013b96:	4601      	mov	r1, r0
 8013b98:	4630      	mov	r0, r6
 8013b9a:	e7e5      	b.n	8013b68 <__kernel_cosf+0xa0>
 8013b9c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8013ba0:	e7e4      	b.n	8013b6c <__kernel_cosf+0xa4>
 8013ba2:	bf00      	nop
 8013ba4:	ad47d74e 	.word	0xad47d74e
 8013ba8:	310f74f6 	.word	0x310f74f6
 8013bac:	3493f27c 	.word	0x3493f27c
 8013bb0:	37d00d01 	.word	0x37d00d01
 8013bb4:	3ab60b61 	.word	0x3ab60b61
 8013bb8:	3d2aaaab 	.word	0x3d2aaaab
 8013bbc:	3e999999 	.word	0x3e999999
 8013bc0:	3f480000 	.word	0x3f480000
 8013bc4:	3e900000 	.word	0x3e900000

08013bc8 <__kernel_sinf>:
 8013bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013bcc:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8013bd0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8013bd4:	4604      	mov	r4, r0
 8013bd6:	460f      	mov	r7, r1
 8013bd8:	4691      	mov	r9, r2
 8013bda:	d203      	bcs.n	8013be4 <__kernel_sinf+0x1c>
 8013bdc:	f7ed fb5e 	bl	800129c <__aeabi_f2iz>
 8013be0:	2800      	cmp	r0, #0
 8013be2:	d035      	beq.n	8013c50 <__kernel_sinf+0x88>
 8013be4:	4621      	mov	r1, r4
 8013be6:	4620      	mov	r0, r4
 8013be8:	f7ed f97c 	bl	8000ee4 <__aeabi_fmul>
 8013bec:	4605      	mov	r5, r0
 8013bee:	4601      	mov	r1, r0
 8013bf0:	4620      	mov	r0, r4
 8013bf2:	f7ed f977 	bl	8000ee4 <__aeabi_fmul>
 8013bf6:	4929      	ldr	r1, [pc, #164]	@ (8013c9c <__kernel_sinf+0xd4>)
 8013bf8:	4606      	mov	r6, r0
 8013bfa:	4628      	mov	r0, r5
 8013bfc:	f7ed f972 	bl	8000ee4 <__aeabi_fmul>
 8013c00:	4927      	ldr	r1, [pc, #156]	@ (8013ca0 <__kernel_sinf+0xd8>)
 8013c02:	f7ed f865 	bl	8000cd0 <__aeabi_fsub>
 8013c06:	4629      	mov	r1, r5
 8013c08:	f7ed f96c 	bl	8000ee4 <__aeabi_fmul>
 8013c0c:	4925      	ldr	r1, [pc, #148]	@ (8013ca4 <__kernel_sinf+0xdc>)
 8013c0e:	f7ed f861 	bl	8000cd4 <__addsf3>
 8013c12:	4629      	mov	r1, r5
 8013c14:	f7ed f966 	bl	8000ee4 <__aeabi_fmul>
 8013c18:	4923      	ldr	r1, [pc, #140]	@ (8013ca8 <__kernel_sinf+0xe0>)
 8013c1a:	f7ed f859 	bl	8000cd0 <__aeabi_fsub>
 8013c1e:	4629      	mov	r1, r5
 8013c20:	f7ed f960 	bl	8000ee4 <__aeabi_fmul>
 8013c24:	4921      	ldr	r1, [pc, #132]	@ (8013cac <__kernel_sinf+0xe4>)
 8013c26:	f7ed f855 	bl	8000cd4 <__addsf3>
 8013c2a:	4680      	mov	r8, r0
 8013c2c:	f1b9 0f00 	cmp.w	r9, #0
 8013c30:	d111      	bne.n	8013c56 <__kernel_sinf+0x8e>
 8013c32:	4601      	mov	r1, r0
 8013c34:	4628      	mov	r0, r5
 8013c36:	f7ed f955 	bl	8000ee4 <__aeabi_fmul>
 8013c3a:	491d      	ldr	r1, [pc, #116]	@ (8013cb0 <__kernel_sinf+0xe8>)
 8013c3c:	f7ed f848 	bl	8000cd0 <__aeabi_fsub>
 8013c40:	4631      	mov	r1, r6
 8013c42:	f7ed f94f 	bl	8000ee4 <__aeabi_fmul>
 8013c46:	4601      	mov	r1, r0
 8013c48:	4620      	mov	r0, r4
 8013c4a:	f7ed f843 	bl	8000cd4 <__addsf3>
 8013c4e:	4604      	mov	r4, r0
 8013c50:	4620      	mov	r0, r4
 8013c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c56:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8013c5a:	4638      	mov	r0, r7
 8013c5c:	f7ed f942 	bl	8000ee4 <__aeabi_fmul>
 8013c60:	4641      	mov	r1, r8
 8013c62:	4681      	mov	r9, r0
 8013c64:	4630      	mov	r0, r6
 8013c66:	f7ed f93d 	bl	8000ee4 <__aeabi_fmul>
 8013c6a:	4601      	mov	r1, r0
 8013c6c:	4648      	mov	r0, r9
 8013c6e:	f7ed f82f 	bl	8000cd0 <__aeabi_fsub>
 8013c72:	4629      	mov	r1, r5
 8013c74:	f7ed f936 	bl	8000ee4 <__aeabi_fmul>
 8013c78:	4639      	mov	r1, r7
 8013c7a:	f7ed f829 	bl	8000cd0 <__aeabi_fsub>
 8013c7e:	490c      	ldr	r1, [pc, #48]	@ (8013cb0 <__kernel_sinf+0xe8>)
 8013c80:	4605      	mov	r5, r0
 8013c82:	4630      	mov	r0, r6
 8013c84:	f7ed f92e 	bl	8000ee4 <__aeabi_fmul>
 8013c88:	4601      	mov	r1, r0
 8013c8a:	4628      	mov	r0, r5
 8013c8c:	f7ed f822 	bl	8000cd4 <__addsf3>
 8013c90:	4601      	mov	r1, r0
 8013c92:	4620      	mov	r0, r4
 8013c94:	f7ed f81c 	bl	8000cd0 <__aeabi_fsub>
 8013c98:	e7d9      	b.n	8013c4e <__kernel_sinf+0x86>
 8013c9a:	bf00      	nop
 8013c9c:	2f2ec9d3 	.word	0x2f2ec9d3
 8013ca0:	32d72f34 	.word	0x32d72f34
 8013ca4:	3638ef1b 	.word	0x3638ef1b
 8013ca8:	39500d01 	.word	0x39500d01
 8013cac:	3c088889 	.word	0x3c088889
 8013cb0:	3e2aaaab 	.word	0x3e2aaaab

08013cb4 <__ieee754_rem_pio2f>:
 8013cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cb8:	4aa4      	ldr	r2, [pc, #656]	@ (8013f4c <__ieee754_rem_pio2f+0x298>)
 8013cba:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8013cbe:	4590      	cmp	r8, r2
 8013cc0:	b087      	sub	sp, #28
 8013cc2:	460c      	mov	r4, r1
 8013cc4:	4682      	mov	sl, r0
 8013cc6:	d804      	bhi.n	8013cd2 <__ieee754_rem_pio2f+0x1e>
 8013cc8:	2300      	movs	r3, #0
 8013cca:	6008      	str	r0, [r1, #0]
 8013ccc:	604b      	str	r3, [r1, #4]
 8013cce:	2500      	movs	r5, #0
 8013cd0:	e01d      	b.n	8013d0e <__ieee754_rem_pio2f+0x5a>
 8013cd2:	4a9f      	ldr	r2, [pc, #636]	@ (8013f50 <__ieee754_rem_pio2f+0x29c>)
 8013cd4:	4590      	cmp	r8, r2
 8013cd6:	d84f      	bhi.n	8013d78 <__ieee754_rem_pio2f+0xc4>
 8013cd8:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8013cdc:	2800      	cmp	r0, #0
 8013cde:	499d      	ldr	r1, [pc, #628]	@ (8013f54 <__ieee754_rem_pio2f+0x2a0>)
 8013ce0:	4f9d      	ldr	r7, [pc, #628]	@ (8013f58 <__ieee754_rem_pio2f+0x2a4>)
 8013ce2:	f025 050f 	bic.w	r5, r5, #15
 8013ce6:	dd24      	ble.n	8013d32 <__ieee754_rem_pio2f+0x7e>
 8013ce8:	f7ec fff2 	bl	8000cd0 <__aeabi_fsub>
 8013cec:	42bd      	cmp	r5, r7
 8013cee:	4606      	mov	r6, r0
 8013cf0:	d011      	beq.n	8013d16 <__ieee754_rem_pio2f+0x62>
 8013cf2:	499a      	ldr	r1, [pc, #616]	@ (8013f5c <__ieee754_rem_pio2f+0x2a8>)
 8013cf4:	f7ec ffec 	bl	8000cd0 <__aeabi_fsub>
 8013cf8:	4601      	mov	r1, r0
 8013cfa:	4605      	mov	r5, r0
 8013cfc:	4630      	mov	r0, r6
 8013cfe:	f7ec ffe7 	bl	8000cd0 <__aeabi_fsub>
 8013d02:	4996      	ldr	r1, [pc, #600]	@ (8013f5c <__ieee754_rem_pio2f+0x2a8>)
 8013d04:	f7ec ffe4 	bl	8000cd0 <__aeabi_fsub>
 8013d08:	6025      	str	r5, [r4, #0]
 8013d0a:	6060      	str	r0, [r4, #4]
 8013d0c:	2501      	movs	r5, #1
 8013d0e:	4628      	mov	r0, r5
 8013d10:	b007      	add	sp, #28
 8013d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d16:	4992      	ldr	r1, [pc, #584]	@ (8013f60 <__ieee754_rem_pio2f+0x2ac>)
 8013d18:	f7ec ffda 	bl	8000cd0 <__aeabi_fsub>
 8013d1c:	4991      	ldr	r1, [pc, #580]	@ (8013f64 <__ieee754_rem_pio2f+0x2b0>)
 8013d1e:	4606      	mov	r6, r0
 8013d20:	f7ec ffd6 	bl	8000cd0 <__aeabi_fsub>
 8013d24:	4601      	mov	r1, r0
 8013d26:	4605      	mov	r5, r0
 8013d28:	4630      	mov	r0, r6
 8013d2a:	f7ec ffd1 	bl	8000cd0 <__aeabi_fsub>
 8013d2e:	498d      	ldr	r1, [pc, #564]	@ (8013f64 <__ieee754_rem_pio2f+0x2b0>)
 8013d30:	e7e8      	b.n	8013d04 <__ieee754_rem_pio2f+0x50>
 8013d32:	f7ec ffcf 	bl	8000cd4 <__addsf3>
 8013d36:	42bd      	cmp	r5, r7
 8013d38:	4606      	mov	r6, r0
 8013d3a:	d00f      	beq.n	8013d5c <__ieee754_rem_pio2f+0xa8>
 8013d3c:	4987      	ldr	r1, [pc, #540]	@ (8013f5c <__ieee754_rem_pio2f+0x2a8>)
 8013d3e:	f7ec ffc9 	bl	8000cd4 <__addsf3>
 8013d42:	4601      	mov	r1, r0
 8013d44:	4605      	mov	r5, r0
 8013d46:	4630      	mov	r0, r6
 8013d48:	f7ec ffc2 	bl	8000cd0 <__aeabi_fsub>
 8013d4c:	4983      	ldr	r1, [pc, #524]	@ (8013f5c <__ieee754_rem_pio2f+0x2a8>)
 8013d4e:	f7ec ffc1 	bl	8000cd4 <__addsf3>
 8013d52:	6025      	str	r5, [r4, #0]
 8013d54:	6060      	str	r0, [r4, #4]
 8013d56:	f04f 35ff 	mov.w	r5, #4294967295
 8013d5a:	e7d8      	b.n	8013d0e <__ieee754_rem_pio2f+0x5a>
 8013d5c:	4980      	ldr	r1, [pc, #512]	@ (8013f60 <__ieee754_rem_pio2f+0x2ac>)
 8013d5e:	f7ec ffb9 	bl	8000cd4 <__addsf3>
 8013d62:	4980      	ldr	r1, [pc, #512]	@ (8013f64 <__ieee754_rem_pio2f+0x2b0>)
 8013d64:	4606      	mov	r6, r0
 8013d66:	f7ec ffb5 	bl	8000cd4 <__addsf3>
 8013d6a:	4601      	mov	r1, r0
 8013d6c:	4605      	mov	r5, r0
 8013d6e:	4630      	mov	r0, r6
 8013d70:	f7ec ffae 	bl	8000cd0 <__aeabi_fsub>
 8013d74:	497b      	ldr	r1, [pc, #492]	@ (8013f64 <__ieee754_rem_pio2f+0x2b0>)
 8013d76:	e7ea      	b.n	8013d4e <__ieee754_rem_pio2f+0x9a>
 8013d78:	4a7b      	ldr	r2, [pc, #492]	@ (8013f68 <__ieee754_rem_pio2f+0x2b4>)
 8013d7a:	4590      	cmp	r8, r2
 8013d7c:	f200 8095 	bhi.w	8013eaa <__ieee754_rem_pio2f+0x1f6>
 8013d80:	f7ff fdf4 	bl	801396c <fabsf>
 8013d84:	4979      	ldr	r1, [pc, #484]	@ (8013f6c <__ieee754_rem_pio2f+0x2b8>)
 8013d86:	4606      	mov	r6, r0
 8013d88:	f7ed f8ac 	bl	8000ee4 <__aeabi_fmul>
 8013d8c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8013d90:	f7ec ffa0 	bl	8000cd4 <__addsf3>
 8013d94:	f7ed fa82 	bl	800129c <__aeabi_f2iz>
 8013d98:	4605      	mov	r5, r0
 8013d9a:	f7ed f84f 	bl	8000e3c <__aeabi_i2f>
 8013d9e:	496d      	ldr	r1, [pc, #436]	@ (8013f54 <__ieee754_rem_pio2f+0x2a0>)
 8013da0:	4681      	mov	r9, r0
 8013da2:	f7ed f89f 	bl	8000ee4 <__aeabi_fmul>
 8013da6:	4601      	mov	r1, r0
 8013da8:	4630      	mov	r0, r6
 8013daa:	f7ec ff91 	bl	8000cd0 <__aeabi_fsub>
 8013dae:	496b      	ldr	r1, [pc, #428]	@ (8013f5c <__ieee754_rem_pio2f+0x2a8>)
 8013db0:	4607      	mov	r7, r0
 8013db2:	4648      	mov	r0, r9
 8013db4:	f7ed f896 	bl	8000ee4 <__aeabi_fmul>
 8013db8:	2d1f      	cmp	r5, #31
 8013dba:	4606      	mov	r6, r0
 8013dbc:	dc0e      	bgt.n	8013ddc <__ieee754_rem_pio2f+0x128>
 8013dbe:	4a6c      	ldr	r2, [pc, #432]	@ (8013f70 <__ieee754_rem_pio2f+0x2bc>)
 8013dc0:	1e69      	subs	r1, r5, #1
 8013dc2:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 8013dc6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8013dca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8013dce:	4293      	cmp	r3, r2
 8013dd0:	d004      	beq.n	8013ddc <__ieee754_rem_pio2f+0x128>
 8013dd2:	4631      	mov	r1, r6
 8013dd4:	4638      	mov	r0, r7
 8013dd6:	f7ec ff7b 	bl	8000cd0 <__aeabi_fsub>
 8013dda:	e00b      	b.n	8013df4 <__ieee754_rem_pio2f+0x140>
 8013ddc:	4631      	mov	r1, r6
 8013dde:	4638      	mov	r0, r7
 8013de0:	f7ec ff76 	bl	8000cd0 <__aeabi_fsub>
 8013de4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8013de8:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 8013dec:	2b08      	cmp	r3, #8
 8013dee:	ea4f 5be8 	mov.w	fp, r8, asr #23
 8013df2:	dc01      	bgt.n	8013df8 <__ieee754_rem_pio2f+0x144>
 8013df4:	6020      	str	r0, [r4, #0]
 8013df6:	e026      	b.n	8013e46 <__ieee754_rem_pio2f+0x192>
 8013df8:	4959      	ldr	r1, [pc, #356]	@ (8013f60 <__ieee754_rem_pio2f+0x2ac>)
 8013dfa:	4648      	mov	r0, r9
 8013dfc:	f7ed f872 	bl	8000ee4 <__aeabi_fmul>
 8013e00:	4606      	mov	r6, r0
 8013e02:	4601      	mov	r1, r0
 8013e04:	4638      	mov	r0, r7
 8013e06:	f7ec ff63 	bl	8000cd0 <__aeabi_fsub>
 8013e0a:	4601      	mov	r1, r0
 8013e0c:	4680      	mov	r8, r0
 8013e0e:	4638      	mov	r0, r7
 8013e10:	f7ec ff5e 	bl	8000cd0 <__aeabi_fsub>
 8013e14:	4631      	mov	r1, r6
 8013e16:	f7ec ff5b 	bl	8000cd0 <__aeabi_fsub>
 8013e1a:	4952      	ldr	r1, [pc, #328]	@ (8013f64 <__ieee754_rem_pio2f+0x2b0>)
 8013e1c:	4606      	mov	r6, r0
 8013e1e:	4648      	mov	r0, r9
 8013e20:	f7ed f860 	bl	8000ee4 <__aeabi_fmul>
 8013e24:	4631      	mov	r1, r6
 8013e26:	f7ec ff53 	bl	8000cd0 <__aeabi_fsub>
 8013e2a:	4601      	mov	r1, r0
 8013e2c:	4606      	mov	r6, r0
 8013e2e:	4640      	mov	r0, r8
 8013e30:	f7ec ff4e 	bl	8000cd0 <__aeabi_fsub>
 8013e34:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8013e38:	ebab 0b03 	sub.w	fp, fp, r3
 8013e3c:	f1bb 0f19 	cmp.w	fp, #25
 8013e40:	dc18      	bgt.n	8013e74 <__ieee754_rem_pio2f+0x1c0>
 8013e42:	6020      	str	r0, [r4, #0]
 8013e44:	4647      	mov	r7, r8
 8013e46:	f8d4 8000 	ldr.w	r8, [r4]
 8013e4a:	4638      	mov	r0, r7
 8013e4c:	4641      	mov	r1, r8
 8013e4e:	f7ec ff3f 	bl	8000cd0 <__aeabi_fsub>
 8013e52:	4631      	mov	r1, r6
 8013e54:	f7ec ff3c 	bl	8000cd0 <__aeabi_fsub>
 8013e58:	f1ba 0f00 	cmp.w	sl, #0
 8013e5c:	6060      	str	r0, [r4, #4]
 8013e5e:	f6bf af56 	bge.w	8013d0e <__ieee754_rem_pio2f+0x5a>
 8013e62:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 8013e66:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8013e6a:	f8c4 8000 	str.w	r8, [r4]
 8013e6e:	6060      	str	r0, [r4, #4]
 8013e70:	426d      	negs	r5, r5
 8013e72:	e74c      	b.n	8013d0e <__ieee754_rem_pio2f+0x5a>
 8013e74:	493f      	ldr	r1, [pc, #252]	@ (8013f74 <__ieee754_rem_pio2f+0x2c0>)
 8013e76:	4648      	mov	r0, r9
 8013e78:	f7ed f834 	bl	8000ee4 <__aeabi_fmul>
 8013e7c:	4606      	mov	r6, r0
 8013e7e:	4601      	mov	r1, r0
 8013e80:	4640      	mov	r0, r8
 8013e82:	f7ec ff25 	bl	8000cd0 <__aeabi_fsub>
 8013e86:	4601      	mov	r1, r0
 8013e88:	4607      	mov	r7, r0
 8013e8a:	4640      	mov	r0, r8
 8013e8c:	f7ec ff20 	bl	8000cd0 <__aeabi_fsub>
 8013e90:	4631      	mov	r1, r6
 8013e92:	f7ec ff1d 	bl	8000cd0 <__aeabi_fsub>
 8013e96:	4938      	ldr	r1, [pc, #224]	@ (8013f78 <__ieee754_rem_pio2f+0x2c4>)
 8013e98:	4606      	mov	r6, r0
 8013e9a:	4648      	mov	r0, r9
 8013e9c:	f7ed f822 	bl	8000ee4 <__aeabi_fmul>
 8013ea0:	4631      	mov	r1, r6
 8013ea2:	f7ec ff15 	bl	8000cd0 <__aeabi_fsub>
 8013ea6:	4606      	mov	r6, r0
 8013ea8:	e793      	b.n	8013dd2 <__ieee754_rem_pio2f+0x11e>
 8013eaa:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8013eae:	d305      	bcc.n	8013ebc <__ieee754_rem_pio2f+0x208>
 8013eb0:	4601      	mov	r1, r0
 8013eb2:	f7ec ff0d 	bl	8000cd0 <__aeabi_fsub>
 8013eb6:	6060      	str	r0, [r4, #4]
 8013eb8:	6020      	str	r0, [r4, #0]
 8013eba:	e708      	b.n	8013cce <__ieee754_rem_pio2f+0x1a>
 8013ebc:	ea4f 56e8 	mov.w	r6, r8, asr #23
 8013ec0:	3e86      	subs	r6, #134	@ 0x86
 8013ec2:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 8013ec6:	4640      	mov	r0, r8
 8013ec8:	f7ed f9e8 	bl	800129c <__aeabi_f2iz>
 8013ecc:	f7ec ffb6 	bl	8000e3c <__aeabi_i2f>
 8013ed0:	4601      	mov	r1, r0
 8013ed2:	9003      	str	r0, [sp, #12]
 8013ed4:	4640      	mov	r0, r8
 8013ed6:	f7ec fefb 	bl	8000cd0 <__aeabi_fsub>
 8013eda:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8013ede:	f7ed f801 	bl	8000ee4 <__aeabi_fmul>
 8013ee2:	4607      	mov	r7, r0
 8013ee4:	f7ed f9da 	bl	800129c <__aeabi_f2iz>
 8013ee8:	f7ec ffa8 	bl	8000e3c <__aeabi_i2f>
 8013eec:	4601      	mov	r1, r0
 8013eee:	9004      	str	r0, [sp, #16]
 8013ef0:	4605      	mov	r5, r0
 8013ef2:	4638      	mov	r0, r7
 8013ef4:	f7ec feec 	bl	8000cd0 <__aeabi_fsub>
 8013ef8:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8013efc:	f7ec fff2 	bl	8000ee4 <__aeabi_fmul>
 8013f00:	2100      	movs	r1, #0
 8013f02:	9005      	str	r0, [sp, #20]
 8013f04:	f7ed f982 	bl	800120c <__aeabi_fcmpeq>
 8013f08:	b1f0      	cbz	r0, 8013f48 <__ieee754_rem_pio2f+0x294>
 8013f0a:	2100      	movs	r1, #0
 8013f0c:	4628      	mov	r0, r5
 8013f0e:	f7ed f97d 	bl	800120c <__aeabi_fcmpeq>
 8013f12:	2800      	cmp	r0, #0
 8013f14:	bf14      	ite	ne
 8013f16:	2301      	movne	r3, #1
 8013f18:	2302      	moveq	r3, #2
 8013f1a:	4a18      	ldr	r2, [pc, #96]	@ (8013f7c <__ieee754_rem_pio2f+0x2c8>)
 8013f1c:	9201      	str	r2, [sp, #4]
 8013f1e:	2202      	movs	r2, #2
 8013f20:	9200      	str	r2, [sp, #0]
 8013f22:	4621      	mov	r1, r4
 8013f24:	4632      	mov	r2, r6
 8013f26:	a803      	add	r0, sp, #12
 8013f28:	f000 f82a 	bl	8013f80 <__kernel_rem_pio2f>
 8013f2c:	f1ba 0f00 	cmp.w	sl, #0
 8013f30:	4605      	mov	r5, r0
 8013f32:	f6bf aeec 	bge.w	8013d0e <__ieee754_rem_pio2f+0x5a>
 8013f36:	6823      	ldr	r3, [r4, #0]
 8013f38:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8013f3c:	6023      	str	r3, [r4, #0]
 8013f3e:	6863      	ldr	r3, [r4, #4]
 8013f40:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8013f44:	6063      	str	r3, [r4, #4]
 8013f46:	e793      	b.n	8013e70 <__ieee754_rem_pio2f+0x1bc>
 8013f48:	2303      	movs	r3, #3
 8013f4a:	e7e6      	b.n	8013f1a <__ieee754_rem_pio2f+0x266>
 8013f4c:	3f490fd8 	.word	0x3f490fd8
 8013f50:	4016cbe3 	.word	0x4016cbe3
 8013f54:	3fc90f80 	.word	0x3fc90f80
 8013f58:	3fc90fd0 	.word	0x3fc90fd0
 8013f5c:	37354443 	.word	0x37354443
 8013f60:	37354400 	.word	0x37354400
 8013f64:	2e85a308 	.word	0x2e85a308
 8013f68:	43490f80 	.word	0x43490f80
 8013f6c:	3f22f984 	.word	0x3f22f984
 8013f70:	08014fb4 	.word	0x08014fb4
 8013f74:	2e85a300 	.word	0x2e85a300
 8013f78:	248d3132 	.word	0x248d3132
 8013f7c:	08015034 	.word	0x08015034

08013f80 <__kernel_rem_pio2f>:
 8013f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f84:	b0db      	sub	sp, #364	@ 0x16c
 8013f86:	9202      	str	r2, [sp, #8]
 8013f88:	9304      	str	r3, [sp, #16]
 8013f8a:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8013f8c:	4bad      	ldr	r3, [pc, #692]	@ (8014244 <__kernel_rem_pio2f+0x2c4>)
 8013f8e:	9005      	str	r0, [sp, #20]
 8013f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f94:	9301      	str	r3, [sp, #4]
 8013f96:	9b04      	ldr	r3, [sp, #16]
 8013f98:	9100      	str	r1, [sp, #0]
 8013f9a:	3b01      	subs	r3, #1
 8013f9c:	9303      	str	r3, [sp, #12]
 8013f9e:	9b02      	ldr	r3, [sp, #8]
 8013fa0:	1d1a      	adds	r2, r3, #4
 8013fa2:	f2c0 8099 	blt.w	80140d8 <__kernel_rem_pio2f+0x158>
 8013fa6:	1edc      	subs	r4, r3, #3
 8013fa8:	bf48      	it	mi
 8013faa:	1d1c      	addmi	r4, r3, #4
 8013fac:	10e4      	asrs	r4, r4, #3
 8013fae:	1c67      	adds	r7, r4, #1
 8013fb0:	00fb      	lsls	r3, r7, #3
 8013fb2:	9306      	str	r3, [sp, #24]
 8013fb4:	9b02      	ldr	r3, [sp, #8]
 8013fb6:	9a03      	ldr	r2, [sp, #12]
 8013fb8:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8013fbc:	9b01      	ldr	r3, [sp, #4]
 8013fbe:	eb03 0902 	add.w	r9, r3, r2
 8013fc2:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8013fc4:	eba4 0802 	sub.w	r8, r4, r2
 8013fc8:	ae1e      	add	r6, sp, #120	@ 0x78
 8013fca:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8013fce:	2500      	movs	r5, #0
 8013fd0:	f04f 0b00 	mov.w	fp, #0
 8013fd4:	454d      	cmp	r5, r9
 8013fd6:	f340 8081 	ble.w	80140dc <__kernel_rem_pio2f+0x15c>
 8013fda:	9a04      	ldr	r2, [sp, #16]
 8013fdc:	ab1e      	add	r3, sp, #120	@ 0x78
 8013fde:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8013fe2:	f50d 7b8c 	add.w	fp, sp, #280	@ 0x118
 8013fe6:	f04f 0900 	mov.w	r9, #0
 8013fea:	2300      	movs	r3, #0
 8013fec:	9a01      	ldr	r2, [sp, #4]
 8013fee:	4591      	cmp	r9, r2
 8013ff0:	f340 809c 	ble.w	801412c <__kernel_rem_pio2f+0x1ac>
 8013ff4:	4613      	mov	r3, r2
 8013ff6:	aa0a      	add	r2, sp, #40	@ 0x28
 8013ff8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013ffc:	9308      	str	r3, [sp, #32]
 8013ffe:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8014000:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014004:	9c01      	ldr	r4, [sp, #4]
 8014006:	9307      	str	r3, [sp, #28]
 8014008:	ab5a      	add	r3, sp, #360	@ 0x168
 801400a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801400e:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8014012:	f853 bc50 	ldr.w	fp, [r3, #-80]
 8014016:	4646      	mov	r6, r8
 8014018:	4625      	mov	r5, r4
 801401a:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 801401e:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 8014022:	2d00      	cmp	r5, #0
 8014024:	f300 8087 	bgt.w	8014136 <__kernel_rem_pio2f+0x1b6>
 8014028:	4639      	mov	r1, r7
 801402a:	4658      	mov	r0, fp
 801402c:	f000 fa48 	bl	80144c0 <scalbnf>
 8014030:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8014034:	4605      	mov	r5, r0
 8014036:	f7ec ff55 	bl	8000ee4 <__aeabi_fmul>
 801403a:	f000 fa8d 	bl	8014558 <floorf>
 801403e:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8014042:	f7ec ff4f 	bl	8000ee4 <__aeabi_fmul>
 8014046:	4601      	mov	r1, r0
 8014048:	4628      	mov	r0, r5
 801404a:	f7ec fe41 	bl	8000cd0 <__aeabi_fsub>
 801404e:	4605      	mov	r5, r0
 8014050:	f7ed f924 	bl	800129c <__aeabi_f2iz>
 8014054:	4606      	mov	r6, r0
 8014056:	f7ec fef1 	bl	8000e3c <__aeabi_i2f>
 801405a:	4601      	mov	r1, r0
 801405c:	4628      	mov	r0, r5
 801405e:	f7ec fe37 	bl	8000cd0 <__aeabi_fsub>
 8014062:	2f00      	cmp	r7, #0
 8014064:	4681      	mov	r9, r0
 8014066:	f340 8083 	ble.w	8014170 <__kernel_rem_pio2f+0x1f0>
 801406a:	1e62      	subs	r2, r4, #1
 801406c:	ab0a      	add	r3, sp, #40	@ 0x28
 801406e:	f1c7 0108 	rsb	r1, r7, #8
 8014072:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8014076:	fa45 f301 	asr.w	r3, r5, r1
 801407a:	441e      	add	r6, r3
 801407c:	408b      	lsls	r3, r1
 801407e:	1aed      	subs	r5, r5, r3
 8014080:	ab0a      	add	r3, sp, #40	@ 0x28
 8014082:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8014086:	f1c7 0307 	rsb	r3, r7, #7
 801408a:	411d      	asrs	r5, r3
 801408c:	2d00      	cmp	r5, #0
 801408e:	dd7c      	ble.n	801418a <__kernel_rem_pio2f+0x20a>
 8014090:	2200      	movs	r2, #0
 8014092:	3601      	adds	r6, #1
 8014094:	4692      	mov	sl, r2
 8014096:	4294      	cmp	r4, r2
 8014098:	f300 80ac 	bgt.w	80141f4 <__kernel_rem_pio2f+0x274>
 801409c:	2f00      	cmp	r7, #0
 801409e:	dd05      	ble.n	80140ac <__kernel_rem_pio2f+0x12c>
 80140a0:	2f01      	cmp	r7, #1
 80140a2:	f000 80b8 	beq.w	8014216 <__kernel_rem_pio2f+0x296>
 80140a6:	2f02      	cmp	r7, #2
 80140a8:	f000 80bf 	beq.w	801422a <__kernel_rem_pio2f+0x2aa>
 80140ac:	2d02      	cmp	r5, #2
 80140ae:	d16c      	bne.n	801418a <__kernel_rem_pio2f+0x20a>
 80140b0:	4649      	mov	r1, r9
 80140b2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80140b6:	f7ec fe0b 	bl	8000cd0 <__aeabi_fsub>
 80140ba:	4681      	mov	r9, r0
 80140bc:	f1ba 0f00 	cmp.w	sl, #0
 80140c0:	d063      	beq.n	801418a <__kernel_rem_pio2f+0x20a>
 80140c2:	4639      	mov	r1, r7
 80140c4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80140c8:	f000 f9fa 	bl	80144c0 <scalbnf>
 80140cc:	4601      	mov	r1, r0
 80140ce:	4648      	mov	r0, r9
 80140d0:	f7ec fdfe 	bl	8000cd0 <__aeabi_fsub>
 80140d4:	4681      	mov	r9, r0
 80140d6:	e058      	b.n	801418a <__kernel_rem_pio2f+0x20a>
 80140d8:	2400      	movs	r4, #0
 80140da:	e768      	b.n	8013fae <__kernel_rem_pio2f+0x2e>
 80140dc:	eb18 0f05 	cmn.w	r8, r5
 80140e0:	d407      	bmi.n	80140f2 <__kernel_rem_pio2f+0x172>
 80140e2:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 80140e6:	f7ec fea9 	bl	8000e3c <__aeabi_i2f>
 80140ea:	f846 0b04 	str.w	r0, [r6], #4
 80140ee:	3501      	adds	r5, #1
 80140f0:	e770      	b.n	8013fd4 <__kernel_rem_pio2f+0x54>
 80140f2:	4658      	mov	r0, fp
 80140f4:	e7f9      	b.n	80140ea <__kernel_rem_pio2f+0x16a>
 80140f6:	9307      	str	r3, [sp, #28]
 80140f8:	9b05      	ldr	r3, [sp, #20]
 80140fa:	f8da 1000 	ldr.w	r1, [sl]
 80140fe:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8014102:	f7ec feef 	bl	8000ee4 <__aeabi_fmul>
 8014106:	4601      	mov	r1, r0
 8014108:	4630      	mov	r0, r6
 801410a:	f7ec fde3 	bl	8000cd4 <__addsf3>
 801410e:	9b07      	ldr	r3, [sp, #28]
 8014110:	4606      	mov	r6, r0
 8014112:	f108 0801 	add.w	r8, r8, #1
 8014116:	9a03      	ldr	r2, [sp, #12]
 8014118:	4590      	cmp	r8, r2
 801411a:	f1aa 0a04 	sub.w	sl, sl, #4
 801411e:	ddea      	ble.n	80140f6 <__kernel_rem_pio2f+0x176>
 8014120:	f84b 6b04 	str.w	r6, [fp], #4
 8014124:	f109 0901 	add.w	r9, r9, #1
 8014128:	3504      	adds	r5, #4
 801412a:	e75f      	b.n	8013fec <__kernel_rem_pio2f+0x6c>
 801412c:	46aa      	mov	sl, r5
 801412e:	461e      	mov	r6, r3
 8014130:	f04f 0800 	mov.w	r8, #0
 8014134:	e7ef      	b.n	8014116 <__kernel_rem_pio2f+0x196>
 8014136:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 801413a:	4658      	mov	r0, fp
 801413c:	f7ec fed2 	bl	8000ee4 <__aeabi_fmul>
 8014140:	f7ed f8ac 	bl	800129c <__aeabi_f2iz>
 8014144:	f7ec fe7a 	bl	8000e3c <__aeabi_i2f>
 8014148:	4649      	mov	r1, r9
 801414a:	9009      	str	r0, [sp, #36]	@ 0x24
 801414c:	f7ec feca 	bl	8000ee4 <__aeabi_fmul>
 8014150:	4601      	mov	r1, r0
 8014152:	4658      	mov	r0, fp
 8014154:	f7ec fdbc 	bl	8000cd0 <__aeabi_fsub>
 8014158:	f7ed f8a0 	bl	800129c <__aeabi_f2iz>
 801415c:	3d01      	subs	r5, #1
 801415e:	f846 0b04 	str.w	r0, [r6], #4
 8014162:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 8014166:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014168:	f7ec fdb4 	bl	8000cd4 <__addsf3>
 801416c:	4683      	mov	fp, r0
 801416e:	e758      	b.n	8014022 <__kernel_rem_pio2f+0xa2>
 8014170:	d105      	bne.n	801417e <__kernel_rem_pio2f+0x1fe>
 8014172:	1e63      	subs	r3, r4, #1
 8014174:	aa0a      	add	r2, sp, #40	@ 0x28
 8014176:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 801417a:	11ed      	asrs	r5, r5, #7
 801417c:	e786      	b.n	801408c <__kernel_rem_pio2f+0x10c>
 801417e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8014182:	f7ed f861 	bl	8001248 <__aeabi_fcmpge>
 8014186:	4605      	mov	r5, r0
 8014188:	bb90      	cbnz	r0, 80141f0 <__kernel_rem_pio2f+0x270>
 801418a:	2100      	movs	r1, #0
 801418c:	4648      	mov	r0, r9
 801418e:	f7ed f83d 	bl	800120c <__aeabi_fcmpeq>
 8014192:	2800      	cmp	r0, #0
 8014194:	f000 8090 	beq.w	80142b8 <__kernel_rem_pio2f+0x338>
 8014198:	1e63      	subs	r3, r4, #1
 801419a:	2200      	movs	r2, #0
 801419c:	9901      	ldr	r1, [sp, #4]
 801419e:	428b      	cmp	r3, r1
 80141a0:	da4a      	bge.n	8014238 <__kernel_rem_pio2f+0x2b8>
 80141a2:	2a00      	cmp	r2, #0
 80141a4:	d076      	beq.n	8014294 <__kernel_rem_pio2f+0x314>
 80141a6:	3c01      	subs	r4, #1
 80141a8:	ab0a      	add	r3, sp, #40	@ 0x28
 80141aa:	3f08      	subs	r7, #8
 80141ac:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d0f8      	beq.n	80141a6 <__kernel_rem_pio2f+0x226>
 80141b4:	4639      	mov	r1, r7
 80141b6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80141ba:	f000 f981 	bl	80144c0 <scalbnf>
 80141be:	46a2      	mov	sl, r4
 80141c0:	4607      	mov	r7, r0
 80141c2:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 80141c6:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 80141ca:	f1ba 0f00 	cmp.w	sl, #0
 80141ce:	f280 80a1 	bge.w	8014314 <__kernel_rem_pio2f+0x394>
 80141d2:	4627      	mov	r7, r4
 80141d4:	2200      	movs	r2, #0
 80141d6:	2f00      	cmp	r7, #0
 80141d8:	f2c0 80cb 	blt.w	8014372 <__kernel_rem_pio2f+0x3f2>
 80141dc:	a946      	add	r1, sp, #280	@ 0x118
 80141de:	4b1a      	ldr	r3, [pc, #104]	@ (8014248 <__kernel_rem_pio2f+0x2c8>)
 80141e0:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 80141e4:	4690      	mov	r8, r2
 80141e6:	f04f 0a00 	mov.w	sl, #0
 80141ea:	eba4 0907 	sub.w	r9, r4, r7
 80141ee:	e0b4      	b.n	801435a <__kernel_rem_pio2f+0x3da>
 80141f0:	2502      	movs	r5, #2
 80141f2:	e74d      	b.n	8014090 <__kernel_rem_pio2f+0x110>
 80141f4:	f858 3b04 	ldr.w	r3, [r8], #4
 80141f8:	f1ba 0f00 	cmp.w	sl, #0
 80141fc:	d108      	bne.n	8014210 <__kernel_rem_pio2f+0x290>
 80141fe:	b123      	cbz	r3, 801420a <__kernel_rem_pio2f+0x28a>
 8014200:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8014204:	f848 3c04 	str.w	r3, [r8, #-4]
 8014208:	2301      	movs	r3, #1
 801420a:	3201      	adds	r2, #1
 801420c:	469a      	mov	sl, r3
 801420e:	e742      	b.n	8014096 <__kernel_rem_pio2f+0x116>
 8014210:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8014214:	e7f6      	b.n	8014204 <__kernel_rem_pio2f+0x284>
 8014216:	1e62      	subs	r2, r4, #1
 8014218:	ab0a      	add	r3, sp, #40	@ 0x28
 801421a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801421e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014222:	a90a      	add	r1, sp, #40	@ 0x28
 8014224:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014228:	e740      	b.n	80140ac <__kernel_rem_pio2f+0x12c>
 801422a:	1e62      	subs	r2, r4, #1
 801422c:	ab0a      	add	r3, sp, #40	@ 0x28
 801422e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014232:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014236:	e7f4      	b.n	8014222 <__kernel_rem_pio2f+0x2a2>
 8014238:	a90a      	add	r1, sp, #40	@ 0x28
 801423a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801423e:	3b01      	subs	r3, #1
 8014240:	430a      	orrs	r2, r1
 8014242:	e7ab      	b.n	801419c <__kernel_rem_pio2f+0x21c>
 8014244:	08015378 	.word	0x08015378
 8014248:	0801534c 	.word	0x0801534c
 801424c:	3301      	adds	r3, #1
 801424e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8014252:	2900      	cmp	r1, #0
 8014254:	d0fa      	beq.n	801424c <__kernel_rem_pio2f+0x2cc>
 8014256:	9a04      	ldr	r2, [sp, #16]
 8014258:	a91e      	add	r1, sp, #120	@ 0x78
 801425a:	18a2      	adds	r2, r4, r2
 801425c:	1c66      	adds	r6, r4, #1
 801425e:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 8014262:	441c      	add	r4, r3
 8014264:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 8014268:	42b4      	cmp	r4, r6
 801426a:	f6ff aecd 	blt.w	8014008 <__kernel_rem_pio2f+0x88>
 801426e:	9b07      	ldr	r3, [sp, #28]
 8014270:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014274:	f7ec fde2 	bl	8000e3c <__aeabi_i2f>
 8014278:	46ab      	mov	fp, r5
 801427a:	6028      	str	r0, [r5, #0]
 801427c:	f04f 0a00 	mov.w	sl, #0
 8014280:	f04f 0800 	mov.w	r8, #0
 8014284:	9b03      	ldr	r3, [sp, #12]
 8014286:	459a      	cmp	sl, r3
 8014288:	dd07      	ble.n	801429a <__kernel_rem_pio2f+0x31a>
 801428a:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 801428e:	3504      	adds	r5, #4
 8014290:	3601      	adds	r6, #1
 8014292:	e7e9      	b.n	8014268 <__kernel_rem_pio2f+0x2e8>
 8014294:	9a08      	ldr	r2, [sp, #32]
 8014296:	2301      	movs	r3, #1
 8014298:	e7d9      	b.n	801424e <__kernel_rem_pio2f+0x2ce>
 801429a:	9b05      	ldr	r3, [sp, #20]
 801429c:	f85b 0904 	ldr.w	r0, [fp], #-4
 80142a0:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 80142a4:	f7ec fe1e 	bl	8000ee4 <__aeabi_fmul>
 80142a8:	4601      	mov	r1, r0
 80142aa:	4640      	mov	r0, r8
 80142ac:	f7ec fd12 	bl	8000cd4 <__addsf3>
 80142b0:	f10a 0a01 	add.w	sl, sl, #1
 80142b4:	4680      	mov	r8, r0
 80142b6:	e7e5      	b.n	8014284 <__kernel_rem_pio2f+0x304>
 80142b8:	9b06      	ldr	r3, [sp, #24]
 80142ba:	9a02      	ldr	r2, [sp, #8]
 80142bc:	4648      	mov	r0, r9
 80142be:	1a99      	subs	r1, r3, r2
 80142c0:	f000 f8fe 	bl	80144c0 <scalbnf>
 80142c4:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 80142c8:	4680      	mov	r8, r0
 80142ca:	f7ec ffbd 	bl	8001248 <__aeabi_fcmpge>
 80142ce:	b1f8      	cbz	r0, 8014310 <__kernel_rem_pio2f+0x390>
 80142d0:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 80142d4:	4640      	mov	r0, r8
 80142d6:	f7ec fe05 	bl	8000ee4 <__aeabi_fmul>
 80142da:	f7ec ffdf 	bl	800129c <__aeabi_f2iz>
 80142de:	f7ec fdad 	bl	8000e3c <__aeabi_i2f>
 80142e2:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 80142e6:	4681      	mov	r9, r0
 80142e8:	f7ec fdfc 	bl	8000ee4 <__aeabi_fmul>
 80142ec:	4601      	mov	r1, r0
 80142ee:	4640      	mov	r0, r8
 80142f0:	f7ec fcee 	bl	8000cd0 <__aeabi_fsub>
 80142f4:	f7ec ffd2 	bl	800129c <__aeabi_f2iz>
 80142f8:	ab0a      	add	r3, sp, #40	@ 0x28
 80142fa:	3708      	adds	r7, #8
 80142fc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014300:	3401      	adds	r4, #1
 8014302:	4648      	mov	r0, r9
 8014304:	f7ec ffca 	bl	800129c <__aeabi_f2iz>
 8014308:	ab0a      	add	r3, sp, #40	@ 0x28
 801430a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801430e:	e751      	b.n	80141b4 <__kernel_rem_pio2f+0x234>
 8014310:	4640      	mov	r0, r8
 8014312:	e7f7      	b.n	8014304 <__kernel_rem_pio2f+0x384>
 8014314:	ab0a      	add	r3, sp, #40	@ 0x28
 8014316:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 801431a:	f7ec fd8f 	bl	8000e3c <__aeabi_i2f>
 801431e:	4639      	mov	r1, r7
 8014320:	f7ec fde0 	bl	8000ee4 <__aeabi_fmul>
 8014324:	4649      	mov	r1, r9
 8014326:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 801432a:	4638      	mov	r0, r7
 801432c:	f7ec fdda 	bl	8000ee4 <__aeabi_fmul>
 8014330:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014334:	4607      	mov	r7, r0
 8014336:	e748      	b.n	80141ca <__kernel_rem_pio2f+0x24a>
 8014338:	f853 0b04 	ldr.w	r0, [r3], #4
 801433c:	f85b 1b04 	ldr.w	r1, [fp], #4
 8014340:	9203      	str	r2, [sp, #12]
 8014342:	9302      	str	r3, [sp, #8]
 8014344:	f7ec fdce 	bl	8000ee4 <__aeabi_fmul>
 8014348:	4601      	mov	r1, r0
 801434a:	4640      	mov	r0, r8
 801434c:	f7ec fcc2 	bl	8000cd4 <__addsf3>
 8014350:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8014354:	4680      	mov	r8, r0
 8014356:	f10a 0a01 	add.w	sl, sl, #1
 801435a:	9901      	ldr	r1, [sp, #4]
 801435c:	458a      	cmp	sl, r1
 801435e:	dc01      	bgt.n	8014364 <__kernel_rem_pio2f+0x3e4>
 8014360:	45d1      	cmp	r9, sl
 8014362:	dae9      	bge.n	8014338 <__kernel_rem_pio2f+0x3b8>
 8014364:	ab5a      	add	r3, sp, #360	@ 0x168
 8014366:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 801436a:	3f01      	subs	r7, #1
 801436c:	f849 8ca0 	str.w	r8, [r9, #-160]
 8014370:	e731      	b.n	80141d6 <__kernel_rem_pio2f+0x256>
 8014372:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8014374:	2b02      	cmp	r3, #2
 8014376:	dc07      	bgt.n	8014388 <__kernel_rem_pio2f+0x408>
 8014378:	2b00      	cmp	r3, #0
 801437a:	dc4e      	bgt.n	801441a <__kernel_rem_pio2f+0x49a>
 801437c:	d02e      	beq.n	80143dc <__kernel_rem_pio2f+0x45c>
 801437e:	f006 0007 	and.w	r0, r6, #7
 8014382:	b05b      	add	sp, #364	@ 0x16c
 8014384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014388:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801438a:	2b03      	cmp	r3, #3
 801438c:	d1f7      	bne.n	801437e <__kernel_rem_pio2f+0x3fe>
 801438e:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 8014392:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 8014396:	46b8      	mov	r8, r7
 8014398:	46a2      	mov	sl, r4
 801439a:	f1ba 0f00 	cmp.w	sl, #0
 801439e:	dc49      	bgt.n	8014434 <__kernel_rem_pio2f+0x4b4>
 80143a0:	46a1      	mov	r9, r4
 80143a2:	f1b9 0f01 	cmp.w	r9, #1
 80143a6:	dc60      	bgt.n	801446a <__kernel_rem_pio2f+0x4ea>
 80143a8:	2000      	movs	r0, #0
 80143aa:	2c01      	cmp	r4, #1
 80143ac:	dc76      	bgt.n	801449c <__kernel_rem_pio2f+0x51c>
 80143ae:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 80143b0:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 80143b2:	2d00      	cmp	r5, #0
 80143b4:	d178      	bne.n	80144a8 <__kernel_rem_pio2f+0x528>
 80143b6:	9900      	ldr	r1, [sp, #0]
 80143b8:	600a      	str	r2, [r1, #0]
 80143ba:	604b      	str	r3, [r1, #4]
 80143bc:	460a      	mov	r2, r1
 80143be:	6090      	str	r0, [r2, #8]
 80143c0:	e7dd      	b.n	801437e <__kernel_rem_pio2f+0x3fe>
 80143c2:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 80143c6:	f7ec fc85 	bl	8000cd4 <__addsf3>
 80143ca:	3c01      	subs	r4, #1
 80143cc:	2c00      	cmp	r4, #0
 80143ce:	daf8      	bge.n	80143c2 <__kernel_rem_pio2f+0x442>
 80143d0:	b10d      	cbz	r5, 80143d6 <__kernel_rem_pio2f+0x456>
 80143d2:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80143d6:	9b00      	ldr	r3, [sp, #0]
 80143d8:	6018      	str	r0, [r3, #0]
 80143da:	e7d0      	b.n	801437e <__kernel_rem_pio2f+0x3fe>
 80143dc:	2000      	movs	r0, #0
 80143de:	af32      	add	r7, sp, #200	@ 0xc8
 80143e0:	e7f4      	b.n	80143cc <__kernel_rem_pio2f+0x44c>
 80143e2:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 80143e6:	f7ec fc75 	bl	8000cd4 <__addsf3>
 80143ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80143ee:	f1b8 0f00 	cmp.w	r8, #0
 80143f2:	daf6      	bge.n	80143e2 <__kernel_rem_pio2f+0x462>
 80143f4:	b1ad      	cbz	r5, 8014422 <__kernel_rem_pio2f+0x4a2>
 80143f6:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 80143fa:	9a00      	ldr	r2, [sp, #0]
 80143fc:	4601      	mov	r1, r0
 80143fe:	6013      	str	r3, [r2, #0]
 8014400:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 8014402:	f7ec fc65 	bl	8000cd0 <__aeabi_fsub>
 8014406:	f04f 0801 	mov.w	r8, #1
 801440a:	4544      	cmp	r4, r8
 801440c:	da0b      	bge.n	8014426 <__kernel_rem_pio2f+0x4a6>
 801440e:	b10d      	cbz	r5, 8014414 <__kernel_rem_pio2f+0x494>
 8014410:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8014414:	9b00      	ldr	r3, [sp, #0]
 8014416:	6058      	str	r0, [r3, #4]
 8014418:	e7b1      	b.n	801437e <__kernel_rem_pio2f+0x3fe>
 801441a:	46a0      	mov	r8, r4
 801441c:	2000      	movs	r0, #0
 801441e:	af32      	add	r7, sp, #200	@ 0xc8
 8014420:	e7e5      	b.n	80143ee <__kernel_rem_pio2f+0x46e>
 8014422:	4603      	mov	r3, r0
 8014424:	e7e9      	b.n	80143fa <__kernel_rem_pio2f+0x47a>
 8014426:	f857 1f04 	ldr.w	r1, [r7, #4]!
 801442a:	f7ec fc53 	bl	8000cd4 <__addsf3>
 801442e:	f108 0801 	add.w	r8, r8, #1
 8014432:	e7ea      	b.n	801440a <__kernel_rem_pio2f+0x48a>
 8014434:	f8d8 3000 	ldr.w	r3, [r8]
 8014438:	f858 2c04 	ldr.w	r2, [r8, #-4]
 801443c:	9302      	str	r3, [sp, #8]
 801443e:	4619      	mov	r1, r3
 8014440:	4610      	mov	r0, r2
 8014442:	9201      	str	r2, [sp, #4]
 8014444:	f7ec fc46 	bl	8000cd4 <__addsf3>
 8014448:	9a01      	ldr	r2, [sp, #4]
 801444a:	4601      	mov	r1, r0
 801444c:	4681      	mov	r9, r0
 801444e:	4610      	mov	r0, r2
 8014450:	f7ec fc3e 	bl	8000cd0 <__aeabi_fsub>
 8014454:	9b02      	ldr	r3, [sp, #8]
 8014456:	4619      	mov	r1, r3
 8014458:	f7ec fc3c 	bl	8000cd4 <__addsf3>
 801445c:	f848 0904 	str.w	r0, [r8], #-4
 8014460:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014464:	f8c8 9000 	str.w	r9, [r8]
 8014468:	e797      	b.n	801439a <__kernel_rem_pio2f+0x41a>
 801446a:	f857 3c04 	ldr.w	r3, [r7, #-4]
 801446e:	f8d7 a000 	ldr.w	sl, [r7]
 8014472:	9301      	str	r3, [sp, #4]
 8014474:	4651      	mov	r1, sl
 8014476:	4618      	mov	r0, r3
 8014478:	f7ec fc2c 	bl	8000cd4 <__addsf3>
 801447c:	9b01      	ldr	r3, [sp, #4]
 801447e:	4601      	mov	r1, r0
 8014480:	4680      	mov	r8, r0
 8014482:	4618      	mov	r0, r3
 8014484:	f7ec fc24 	bl	8000cd0 <__aeabi_fsub>
 8014488:	4651      	mov	r1, sl
 801448a:	f7ec fc23 	bl	8000cd4 <__addsf3>
 801448e:	f847 0904 	str.w	r0, [r7], #-4
 8014492:	f109 39ff 	add.w	r9, r9, #4294967295
 8014496:	f8c7 8000 	str.w	r8, [r7]
 801449a:	e782      	b.n	80143a2 <__kernel_rem_pio2f+0x422>
 801449c:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 80144a0:	f7ec fc18 	bl	8000cd4 <__addsf3>
 80144a4:	3c01      	subs	r4, #1
 80144a6:	e780      	b.n	80143aa <__kernel_rem_pio2f+0x42a>
 80144a8:	9900      	ldr	r1, [sp, #0]
 80144aa:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 80144ae:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80144b2:	600a      	str	r2, [r1, #0]
 80144b4:	604b      	str	r3, [r1, #4]
 80144b6:	460a      	mov	r2, r1
 80144b8:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80144bc:	e77f      	b.n	80143be <__kernel_rem_pio2f+0x43e>
 80144be:	bf00      	nop

080144c0 <scalbnf>:
 80144c0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80144c4:	b538      	push	{r3, r4, r5, lr}
 80144c6:	4603      	mov	r3, r0
 80144c8:	460d      	mov	r5, r1
 80144ca:	4604      	mov	r4, r0
 80144cc:	d02e      	beq.n	801452c <scalbnf+0x6c>
 80144ce:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80144d2:	d304      	bcc.n	80144de <scalbnf+0x1e>
 80144d4:	4601      	mov	r1, r0
 80144d6:	f7ec fbfd 	bl	8000cd4 <__addsf3>
 80144da:	4603      	mov	r3, r0
 80144dc:	e026      	b.n	801452c <scalbnf+0x6c>
 80144de:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 80144e2:	d118      	bne.n	8014516 <scalbnf+0x56>
 80144e4:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 80144e8:	f7ec fcfc 	bl	8000ee4 <__aeabi_fmul>
 80144ec:	4a17      	ldr	r2, [pc, #92]	@ (801454c <scalbnf+0x8c>)
 80144ee:	4295      	cmp	r5, r2
 80144f0:	4603      	mov	r3, r0
 80144f2:	db0c      	blt.n	801450e <scalbnf+0x4e>
 80144f4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80144f8:	4604      	mov	r4, r0
 80144fa:	3a19      	subs	r2, #25
 80144fc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8014500:	428d      	cmp	r5, r1
 8014502:	dd0a      	ble.n	801451a <scalbnf+0x5a>
 8014504:	4912      	ldr	r1, [pc, #72]	@ (8014550 <scalbnf+0x90>)
 8014506:	4618      	mov	r0, r3
 8014508:	f361 001e 	bfi	r0, r1, #0, #31
 801450c:	e000      	b.n	8014510 <scalbnf+0x50>
 801450e:	4911      	ldr	r1, [pc, #68]	@ (8014554 <scalbnf+0x94>)
 8014510:	f7ec fce8 	bl	8000ee4 <__aeabi_fmul>
 8014514:	e7e1      	b.n	80144da <scalbnf+0x1a>
 8014516:	0dd2      	lsrs	r2, r2, #23
 8014518:	e7f0      	b.n	80144fc <scalbnf+0x3c>
 801451a:	1951      	adds	r1, r2, r5
 801451c:	29fe      	cmp	r1, #254	@ 0xfe
 801451e:	dcf1      	bgt.n	8014504 <scalbnf+0x44>
 8014520:	2900      	cmp	r1, #0
 8014522:	dd05      	ble.n	8014530 <scalbnf+0x70>
 8014524:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8014528:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 801452c:	4618      	mov	r0, r3
 801452e:	bd38      	pop	{r3, r4, r5, pc}
 8014530:	f111 0f16 	cmn.w	r1, #22
 8014534:	da01      	bge.n	801453a <scalbnf+0x7a>
 8014536:	4907      	ldr	r1, [pc, #28]	@ (8014554 <scalbnf+0x94>)
 8014538:	e7e5      	b.n	8014506 <scalbnf+0x46>
 801453a:	f101 0019 	add.w	r0, r1, #25
 801453e:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8014542:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 8014546:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 801454a:	e7e1      	b.n	8014510 <scalbnf+0x50>
 801454c:	ffff3cb0 	.word	0xffff3cb0
 8014550:	7149f2ca 	.word	0x7149f2ca
 8014554:	0da24260 	.word	0x0da24260

08014558 <floorf>:
 8014558:	b570      	push	{r4, r5, r6, lr}
 801455a:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 801455e:	3d7f      	subs	r5, #127	@ 0x7f
 8014560:	2d16      	cmp	r5, #22
 8014562:	4601      	mov	r1, r0
 8014564:	4604      	mov	r4, r0
 8014566:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 801456a:	dc26      	bgt.n	80145ba <floorf+0x62>
 801456c:	2d00      	cmp	r5, #0
 801456e:	da0f      	bge.n	8014590 <floorf+0x38>
 8014570:	4917      	ldr	r1, [pc, #92]	@ (80145d0 <floorf+0x78>)
 8014572:	f7ec fbaf 	bl	8000cd4 <__addsf3>
 8014576:	2100      	movs	r1, #0
 8014578:	f7ec fe70 	bl	800125c <__aeabi_fcmpgt>
 801457c:	b130      	cbz	r0, 801458c <floorf+0x34>
 801457e:	2c00      	cmp	r4, #0
 8014580:	da23      	bge.n	80145ca <floorf+0x72>
 8014582:	2e00      	cmp	r6, #0
 8014584:	4c13      	ldr	r4, [pc, #76]	@ (80145d4 <floorf+0x7c>)
 8014586:	bf08      	it	eq
 8014588:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801458c:	4621      	mov	r1, r4
 801458e:	e01a      	b.n	80145c6 <floorf+0x6e>
 8014590:	4e11      	ldr	r6, [pc, #68]	@ (80145d8 <floorf+0x80>)
 8014592:	412e      	asrs	r6, r5
 8014594:	4230      	tst	r0, r6
 8014596:	d016      	beq.n	80145c6 <floorf+0x6e>
 8014598:	490d      	ldr	r1, [pc, #52]	@ (80145d0 <floorf+0x78>)
 801459a:	f7ec fb9b 	bl	8000cd4 <__addsf3>
 801459e:	2100      	movs	r1, #0
 80145a0:	f7ec fe5c 	bl	800125c <__aeabi_fcmpgt>
 80145a4:	2800      	cmp	r0, #0
 80145a6:	d0f1      	beq.n	801458c <floorf+0x34>
 80145a8:	2c00      	cmp	r4, #0
 80145aa:	bfbe      	ittt	lt
 80145ac:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 80145b0:	412b      	asrlt	r3, r5
 80145b2:	18e4      	addlt	r4, r4, r3
 80145b4:	ea24 0406 	bic.w	r4, r4, r6
 80145b8:	e7e8      	b.n	801458c <floorf+0x34>
 80145ba:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 80145be:	d302      	bcc.n	80145c6 <floorf+0x6e>
 80145c0:	f7ec fb88 	bl	8000cd4 <__addsf3>
 80145c4:	4601      	mov	r1, r0
 80145c6:	4608      	mov	r0, r1
 80145c8:	bd70      	pop	{r4, r5, r6, pc}
 80145ca:	2400      	movs	r4, #0
 80145cc:	e7de      	b.n	801458c <floorf+0x34>
 80145ce:	bf00      	nop
 80145d0:	7149f2ca 	.word	0x7149f2ca
 80145d4:	bf800000 	.word	0xbf800000
 80145d8:	007fffff 	.word	0x007fffff

080145dc <_init>:
 80145dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145de:	bf00      	nop
 80145e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80145e2:	bc08      	pop	{r3}
 80145e4:	469e      	mov	lr, r3
 80145e6:	4770      	bx	lr

080145e8 <_fini>:
 80145e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145ea:	bf00      	nop
 80145ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80145ee:	bc08      	pop	{r3}
 80145f0:	469e      	mov	lr, r3
 80145f2:	4770      	bx	lr
