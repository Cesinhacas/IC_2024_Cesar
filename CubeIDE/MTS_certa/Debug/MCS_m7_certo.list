
MCS_m7_certo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dfc8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c4  0800e198  0800e198  0000f198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e75c  0800e75c  000101e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e75c  0800e75c  0000f75c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e764  0800e764  000101e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e764  0800e764  0000f764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e768  0800e768  0000f768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800e76c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003658  200001e8  0800e954  000101e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003840  0800e954  00010840  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa01  00000000  00000000  00010218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021d3  00000000  00000000  0001ac19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0001cdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000797  00000000  00000000  0001d828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027a1b  00000000  00000000  0001dfbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001157e  00000000  00000000  000459da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7023  00000000  00000000  00056f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013df7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d20  00000000  00000000  0013dfc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00141ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e180 	.word	0x0800e180

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800e180 	.word	0x0800e180

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <inverter_matriz>:
#include <math.h>
#include "calib.h"


void inverter_matriz(float matriz[N][N], float inversa[N][N])
{
 8001024:	b480      	push	{r7}
 8001026:	b08b      	sub	sp, #44	@ 0x2c
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
    // Inicializando a matriz identidade na matriz inversa
    for (int i = 0; i < N; i++) {
 800102e:	2300      	movs	r3, #0
 8001030:	627b      	str	r3, [r7, #36]	@ 0x24
 8001032:	e02c      	b.n	800108e <inverter_matriz+0x6a>
        for (int j = 0; j < N; j++) {
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
 8001038:	e023      	b.n	8001082 <inverter_matriz+0x5e>
            if (i == j) {
 800103a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800103c:	6a3b      	ldr	r3, [r7, #32]
 800103e:	429a      	cmp	r2, r3
 8001040:	d10e      	bne.n	8001060 <inverter_matriz+0x3c>
                inversa[i][j] = 1;
 8001042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001044:	4613      	mov	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	4413      	add	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	461a      	mov	r2, r3
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	441a      	add	r2, r3
 8001052:	6a3b      	ldr	r3, [r7, #32]
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4413      	add	r3, r2
 8001058:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	e00d      	b.n	800107c <inverter_matriz+0x58>
            } else {
                inversa[i][j] = 0;
 8001060:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001062:	4613      	mov	r3, r2
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	4413      	add	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	461a      	mov	r2, r3
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	441a      	add	r2, r3
 8001070:	6a3b      	ldr	r3, [r7, #32]
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	4413      	add	r3, r2
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < N; j++) {
 800107c:	6a3b      	ldr	r3, [r7, #32]
 800107e:	3301      	adds	r3, #1
 8001080:	623b      	str	r3, [r7, #32]
 8001082:	6a3b      	ldr	r3, [r7, #32]
 8001084:	2b08      	cmp	r3, #8
 8001086:	ddd8      	ble.n	800103a <inverter_matriz+0x16>
    for (int i = 0; i < N; i++) {
 8001088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800108a:	3301      	adds	r3, #1
 800108c:	627b      	str	r3, [r7, #36]	@ 0x24
 800108e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001090:	2b08      	cmp	r3, #8
 8001092:	ddcf      	ble.n	8001034 <inverter_matriz+0x10>
            }
        }
    }

    // Aplicando o método de Gauss-Jordan
    for (int i = 0; i < N; i++)
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]
 8001098:	e0d1      	b.n	800123e <inverter_matriz+0x21a>
    {
        float pivot = matriz[i][i];
 800109a:	69fa      	ldr	r2, [r7, #28]
 800109c:	4613      	mov	r3, r2
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	4413      	add	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	461a      	mov	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	441a      	add	r2, r3
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	60fb      	str	r3, [r7, #12]
        for (int j = 0; j < N; j++)
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]
 80010b8:	e03e      	b.n	8001138 <inverter_matriz+0x114>
        {
            matriz[i][j] /= pivot;
 80010ba:	69fa      	ldr	r2, [r7, #28]
 80010bc:	4613      	mov	r3, r2
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	4413      	add	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	461a      	mov	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	441a      	add	r2, r3
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	edd3 6a00 	vldr	s13, [r3]
 80010d4:	69fa      	ldr	r2, [r7, #28]
 80010d6:	4613      	mov	r3, r2
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	4413      	add	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	461a      	mov	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	441a      	add	r2, r3
 80010e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80010e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	4413      	add	r3, r2
 80010f2:	edc3 7a00 	vstr	s15, [r3]
            inversa[i][j] /= pivot;
 80010f6:	69fa      	ldr	r2, [r7, #28]
 80010f8:	4613      	mov	r3, r2
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	4413      	add	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	461a      	mov	r2, r3
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	441a      	add	r2, r3
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	edd3 6a00 	vldr	s13, [r3]
 8001110:	69fa      	ldr	r2, [r7, #28]
 8001112:	4613      	mov	r3, r2
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	4413      	add	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	461a      	mov	r2, r3
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	441a      	add	r2, r3
 8001120:	ed97 7a03 	vldr	s14, [r7, #12]
 8001124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4413      	add	r3, r2
 800112e:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < N; j++)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	3301      	adds	r3, #1
 8001136:	61bb      	str	r3, [r7, #24]
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	2b08      	cmp	r3, #8
 800113c:	ddbd      	ble.n	80010ba <inverter_matriz+0x96>
        }

        for (int k = 0; k < N; k++)
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	e076      	b.n	8001232 <inverter_matriz+0x20e>
        {
            if (k != i)
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	429a      	cmp	r2, r3
 800114a:	d06f      	beq.n	800122c <inverter_matriz+0x208>
            {
                float fator = matriz[k][i];
 800114c:	697a      	ldr	r2, [r7, #20]
 800114e:	4613      	mov	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	4413      	add	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	461a      	mov	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	441a      	add	r2, r3
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	60bb      	str	r3, [r7, #8]
                for (int j = 0; j < N; j++)
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	e05c      	b.n	8001226 <inverter_matriz+0x202>
                {
                    matriz[k][j] -= fator * matriz[i][j];
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	4613      	mov	r3, r2
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	4413      	add	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	461a      	mov	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	441a      	add	r2, r3
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	ed93 7a00 	vldr	s14, [r3]
 8001186:	69fa      	ldr	r2, [r7, #28]
 8001188:	4613      	mov	r3, r2
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	4413      	add	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	461a      	mov	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	441a      	add	r2, r3
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	edd3 6a00 	vldr	s13, [r3]
 80011a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80011a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	4613      	mov	r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	4413      	add	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	461a      	mov	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	441a      	add	r2, r3
 80011b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	edc3 7a00 	vstr	s15, [r3]
                    inversa[k][j] -= fator * inversa[i][j];
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	4613      	mov	r3, r2
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	4413      	add	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	461a      	mov	r2, r3
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	441a      	add	r2, r3
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	ed93 7a00 	vldr	s14, [r3]
 80011e0:	69fa      	ldr	r2, [r7, #28]
 80011e2:	4613      	mov	r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	4413      	add	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	461a      	mov	r2, r3
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	441a      	add	r2, r3
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	edd3 6a00 	vldr	s13, [r3]
 80011fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80011fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	4613      	mov	r3, r2
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	4413      	add	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	461a      	mov	r2, r3
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	441a      	add	r2, r3
 8001212:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	edc3 7a00 	vstr	s15, [r3]
                for (int j = 0; j < N; j++)
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	3301      	adds	r3, #1
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	2b08      	cmp	r3, #8
 800122a:	dd9f      	ble.n	800116c <inverter_matriz+0x148>
        for (int k = 0; k < N; k++)
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	3301      	adds	r3, #1
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	2b08      	cmp	r3, #8
 8001236:	dd85      	ble.n	8001144 <inverter_matriz+0x120>
    for (int i = 0; i < N; i++)
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	3301      	adds	r3, #1
 800123c:	61fb      	str	r3, [r7, #28]
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	2b08      	cmp	r3, #8
 8001242:	f77f af2a 	ble.w	800109a <inverter_matriz+0x76>
                }
            }
        }
    }
}
 8001246:	bf00      	nop
 8001248:	bf00      	nop
 800124a:	372c      	adds	r7, #44	@ 0x2c
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	0000      	movs	r0, r0
	...

08001258 <NLLS>:


uint8_t NLLS(float *mx, float *my, float *mz, float *p)
{
 8001258:	b5b0      	push	{r4, r5, r7, lr}
 800125a:	f5ad 3db7 	sub.w	sp, sp, #93696	@ 0x16e00
 800125e:	b0fc      	sub	sp, #496	@ 0x1f0
 8001260:	af00      	add	r7, sp, #0
 8001262:	f507 647f 	add.w	r4, r7, #4080	@ 0xff0
 8001266:	f6a4 74e4 	subw	r4, r4, #4068	@ 0xfe4
 800126a:	6020      	str	r0, [r4, #0]
 800126c:	f507 607f 	add.w	r0, r7, #4080	@ 0xff0
 8001270:	f6a0 70e8 	subw	r0, r0, #4072	@ 0xfe8
 8001274:	6001      	str	r1, [r0, #0]
 8001276:	f507 617f 	add.w	r1, r7, #4080	@ 0xff0
 800127a:	f6a1 71ec 	subw	r1, r1, #4076	@ 0xfec
 800127e:	600a      	str	r2, [r1, #0]
 8001280:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8001284:	f5a2 627f 	sub.w	r2, r2, #4080	@ 0xff0
 8001288:	6013      	str	r3, [r2, #0]
	uint8_t passo = 0, loop = 1;
 800128a:	2300      	movs	r3, #0
 800128c:	4a1b      	ldr	r2, [pc, #108]	@ (80012fc <NLLS+0xa4>)
 800128e:	443a      	add	r2, r7
 8001290:	7013      	strb	r3, [r2, #0]
 8001292:	2301      	movs	r3, #1
 8001294:	4a1a      	ldr	r2, [pc, #104]	@ (8001300 <NLLS+0xa8>)
 8001296:	443a      	add	r2, r7
 8001298:	7013      	strb	r3, [r2, #0]
	float sf = 1;
 800129a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800129e:	4a19      	ldr	r2, [pc, #100]	@ (8001304 <NLLS+0xac>)
 80012a0:	443a      	add	r2, r7
 80012a2:	6013      	str	r3, [r2, #0]
	float p0[9] = {1, 1, 1, 0, 0, 0, 0, 0, 0}, Be[tam], e[tam], f[tam], sx, sy, sz, bx, by, bz, rho, phi, lambida, error_ant, J, delta_J, mat_H[N][tam];
 80012a4:	4b18      	ldr	r3, [pc, #96]	@ (8001308 <NLLS+0xb0>)
 80012a6:	4c19      	ldr	r4, [pc, #100]	@ (800130c <NLLS+0xb4>)
 80012a8:	443c      	add	r4, r7
 80012aa:	461d      	mov	r5, r3
 80012ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b4:	682b      	ldr	r3, [r5, #0]
 80012b6:	6023      	str	r3, [r4, #0]
	float sin_phi, sin_rho, sin_lambda, cos_phi, cos_rho, cos_lambda;
	float Ht_H[N][N], Ht_e[N], inv[N][N], mul_mat[N][tam];

	for (int i=0; i < tam; i++)
 80012b8:	2300      	movs	r3, #0
 80012ba:	4a15      	ldr	r2, [pc, #84]	@ (8001310 <NLLS+0xb8>)
 80012bc:	443a      	add	r2, r7
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	e013      	b.n	80012ea <NLLS+0x92>
	{
		Be[i] = 1*sf;
 80012c2:	4b14      	ldr	r3, [pc, #80]	@ (8001314 <NLLS+0xbc>)
 80012c4:	443b      	add	r3, r7
 80012c6:	f5a3 7200 	sub.w	r2, r3, #512	@ 0x200
 80012ca:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <NLLS+0xb8>)
 80012cc:	443b      	add	r3, r7
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001304 <NLLS+0xac>)
 80012d6:	443a      	add	r2, r7
 80012d8:	6812      	ldr	r2, [r2, #0]
 80012da:	601a      	str	r2, [r3, #0]
	for (int i=0; i < tam; i++)
 80012dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <NLLS+0xb8>)
 80012de:	443b      	add	r3, r7
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	3301      	adds	r3, #1
 80012e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001310 <NLLS+0xb8>)
 80012e6:	443a      	add	r2, r7
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <NLLS+0xb8>)
 80012ec:	443b      	add	r3, r7
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f240 4256 	movw	r2, #1110	@ 0x456
 80012f4:	4293      	cmp	r3, r2
 80012f6:	dde4      	ble.n	80012c2 <NLLS+0x6a>
	}

	while(loop == 1)
 80012f8:	f003 ba9b 	b.w	8004832 <NLLS+0x35da>
 80012fc:	00016fef 	.word	0x00016fef
 8001300:	00016fee 	.word	0x00016fee
 8001304:	00016f8c 	.word	0x00016f8c
 8001308:	0800e198 	.word	0x0800e198
 800130c:	00016f4c 	.word	0x00016f4c
 8001310:	00016fbc 	.word	0x00016fbc
 8001314:	00015ff0 	.word	0x00015ff0
	{
		sx = p0[0];
 8001318:	4bb0      	ldr	r3, [pc, #704]	@ (80015dc <NLLS+0x384>)
 800131a:	443b      	add	r3, r7
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4ab0      	ldr	r2, [pc, #704]	@ (80015e0 <NLLS+0x388>)
 8001320:	443a      	add	r2, r7
 8001322:	6013      	str	r3, [r2, #0]
		sy = p0[1];
 8001324:	4baf      	ldr	r3, [pc, #700]	@ (80015e4 <NLLS+0x38c>)
 8001326:	443b      	add	r3, r7
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4aaf      	ldr	r2, [pc, #700]	@ (80015e8 <NLLS+0x390>)
 800132c:	443a      	add	r2, r7
 800132e:	6013      	str	r3, [r2, #0]
		sz = p0[2];
 8001330:	4bae      	ldr	r3, [pc, #696]	@ (80015ec <NLLS+0x394>)
 8001332:	443b      	add	r3, r7
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4aae      	ldr	r2, [pc, #696]	@ (80015f0 <NLLS+0x398>)
 8001338:	443a      	add	r2, r7
 800133a:	6013      	str	r3, [r2, #0]
		bx = p0[3];
 800133c:	4bad      	ldr	r3, [pc, #692]	@ (80015f4 <NLLS+0x39c>)
 800133e:	443b      	add	r3, r7
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4aad      	ldr	r2, [pc, #692]	@ (80015f8 <NLLS+0x3a0>)
 8001344:	443a      	add	r2, r7
 8001346:	6013      	str	r3, [r2, #0]
		by = p0[4];
 8001348:	4bac      	ldr	r3, [pc, #688]	@ (80015fc <NLLS+0x3a4>)
 800134a:	443b      	add	r3, r7
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4aac      	ldr	r2, [pc, #688]	@ (8001600 <NLLS+0x3a8>)
 8001350:	443a      	add	r2, r7
 8001352:	6013      	str	r3, [r2, #0]
		bz = p0[5];
 8001354:	4bab      	ldr	r3, [pc, #684]	@ (8001604 <NLLS+0x3ac>)
 8001356:	443b      	add	r3, r7
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4aab      	ldr	r2, [pc, #684]	@ (8001608 <NLLS+0x3b0>)
 800135c:	443a      	add	r2, r7
 800135e:	6013      	str	r3, [r2, #0]
		rho = p0[6];
 8001360:	4baa      	ldr	r3, [pc, #680]	@ (800160c <NLLS+0x3b4>)
 8001362:	443b      	add	r3, r7
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4aaa      	ldr	r2, [pc, #680]	@ (8001610 <NLLS+0x3b8>)
 8001368:	443a      	add	r2, r7
 800136a:	6013      	str	r3, [r2, #0]
		phi = p0[7];
 800136c:	4ba9      	ldr	r3, [pc, #676]	@ (8001614 <NLLS+0x3bc>)
 800136e:	443b      	add	r3, r7
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4aa9      	ldr	r2, [pc, #676]	@ (8001618 <NLLS+0x3c0>)
 8001374:	443a      	add	r2, r7
 8001376:	6013      	str	r3, [r2, #0]
		lambida = p0[8];
 8001378:	4ba8      	ldr	r3, [pc, #672]	@ (800161c <NLLS+0x3c4>)
 800137a:	443b      	add	r3, r7
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4aa8      	ldr	r2, [pc, #672]	@ (8001620 <NLLS+0x3c8>)
 8001380:	443a      	add	r2, r7
 8001382:	6013      	str	r3, [r2, #0]

		sin_phi = phi - (phi*phi*phi)/6 + (phi*phi*phi*phi*phi)/120;
 8001384:	4ba4      	ldr	r3, [pc, #656]	@ (8001618 <NLLS+0x3c0>)
 8001386:	443b      	add	r3, r7
 8001388:	edd3 7a00 	vldr	s15, [r3]
 800138c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001390:	4ba1      	ldr	r3, [pc, #644]	@ (8001618 <NLLS+0x3c0>)
 8001392:	443b      	add	r3, r7
 8001394:	edd3 7a00 	vldr	s15, [r3]
 8001398:	ee27 7a27 	vmul.f32	s14, s14, s15
 800139c:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 80013a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013a4:	4b9c      	ldr	r3, [pc, #624]	@ (8001618 <NLLS+0x3c0>)
 80013a6:	443b      	add	r3, r7
 80013a8:	ed93 7a00 	vldr	s14, [r3]
 80013ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013b0:	4b99      	ldr	r3, [pc, #612]	@ (8001618 <NLLS+0x3c0>)
 80013b2:	443b      	add	r3, r7
 80013b4:	edd3 7a00 	vldr	s15, [r3]
 80013b8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80013bc:	4b96      	ldr	r3, [pc, #600]	@ (8001618 <NLLS+0x3c0>)
 80013be:	443b      	add	r3, r7
 80013c0:	edd3 7a00 	vldr	s15, [r3]
 80013c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013c8:	4b93      	ldr	r3, [pc, #588]	@ (8001618 <NLLS+0x3c0>)
 80013ca:	443b      	add	r3, r7
 80013cc:	edd3 7a00 	vldr	s15, [r3]
 80013d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013d4:	4b90      	ldr	r3, [pc, #576]	@ (8001618 <NLLS+0x3c0>)
 80013d6:	443b      	add	r3, r7
 80013d8:	edd3 7a00 	vldr	s15, [r3]
 80013dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013e0:	ed9f 6a90 	vldr	s12, [pc, #576]	@ 8001624 <NLLS+0x3cc>
 80013e4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80013e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ec:	4b8e      	ldr	r3, [pc, #568]	@ (8001628 <NLLS+0x3d0>)
 80013ee:	443b      	add	r3, r7
 80013f0:	edc3 7a00 	vstr	s15, [r3]
		sin_rho = rho - (rho*rho*rho)/6 + (rho*rho*rho*rho*rho)/120;
 80013f4:	4b86      	ldr	r3, [pc, #536]	@ (8001610 <NLLS+0x3b8>)
 80013f6:	443b      	add	r3, r7
 80013f8:	edd3 7a00 	vldr	s15, [r3]
 80013fc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001400:	4b83      	ldr	r3, [pc, #524]	@ (8001610 <NLLS+0x3b8>)
 8001402:	443b      	add	r3, r7
 8001404:	edd3 7a00 	vldr	s15, [r3]
 8001408:	ee27 7a27 	vmul.f32	s14, s14, s15
 800140c:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 8001410:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001414:	4b7e      	ldr	r3, [pc, #504]	@ (8001610 <NLLS+0x3b8>)
 8001416:	443b      	add	r3, r7
 8001418:	ed93 7a00 	vldr	s14, [r3]
 800141c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001420:	4b7b      	ldr	r3, [pc, #492]	@ (8001610 <NLLS+0x3b8>)
 8001422:	443b      	add	r3, r7
 8001424:	edd3 7a00 	vldr	s15, [r3]
 8001428:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800142c:	4b78      	ldr	r3, [pc, #480]	@ (8001610 <NLLS+0x3b8>)
 800142e:	443b      	add	r3, r7
 8001430:	edd3 7a00 	vldr	s15, [r3]
 8001434:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001438:	4b75      	ldr	r3, [pc, #468]	@ (8001610 <NLLS+0x3b8>)
 800143a:	443b      	add	r3, r7
 800143c:	edd3 7a00 	vldr	s15, [r3]
 8001440:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001444:	4b72      	ldr	r3, [pc, #456]	@ (8001610 <NLLS+0x3b8>)
 8001446:	443b      	add	r3, r7
 8001448:	edd3 7a00 	vldr	s15, [r3]
 800144c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001450:	ed9f 6a74 	vldr	s12, [pc, #464]	@ 8001624 <NLLS+0x3cc>
 8001454:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800145c:	4b73      	ldr	r3, [pc, #460]	@ (800162c <NLLS+0x3d4>)
 800145e:	443b      	add	r3, r7
 8001460:	edc3 7a00 	vstr	s15, [r3]
		sin_lambda = lambida - (lambida*lambida*lambida)/6 + (lambida*lambida*lambida*lambida*lambida)/120;
 8001464:	4b6e      	ldr	r3, [pc, #440]	@ (8001620 <NLLS+0x3c8>)
 8001466:	443b      	add	r3, r7
 8001468:	edd3 7a00 	vldr	s15, [r3]
 800146c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001470:	4b6b      	ldr	r3, [pc, #428]	@ (8001620 <NLLS+0x3c8>)
 8001472:	443b      	add	r3, r7
 8001474:	edd3 7a00 	vldr	s15, [r3]
 8001478:	ee27 7a27 	vmul.f32	s14, s14, s15
 800147c:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 8001480:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001484:	4b66      	ldr	r3, [pc, #408]	@ (8001620 <NLLS+0x3c8>)
 8001486:	443b      	add	r3, r7
 8001488:	ed93 7a00 	vldr	s14, [r3]
 800148c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001490:	4b63      	ldr	r3, [pc, #396]	@ (8001620 <NLLS+0x3c8>)
 8001492:	443b      	add	r3, r7
 8001494:	edd3 7a00 	vldr	s15, [r3]
 8001498:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800149c:	4b60      	ldr	r3, [pc, #384]	@ (8001620 <NLLS+0x3c8>)
 800149e:	443b      	add	r3, r7
 80014a0:	edd3 7a00 	vldr	s15, [r3]
 80014a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014a8:	4b5d      	ldr	r3, [pc, #372]	@ (8001620 <NLLS+0x3c8>)
 80014aa:	443b      	add	r3, r7
 80014ac:	edd3 7a00 	vldr	s15, [r3]
 80014b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014b4:	4b5a      	ldr	r3, [pc, #360]	@ (8001620 <NLLS+0x3c8>)
 80014b6:	443b      	add	r3, r7
 80014b8:	edd3 7a00 	vldr	s15, [r3]
 80014bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014c0:	ed9f 6a58 	vldr	s12, [pc, #352]	@ 8001624 <NLLS+0x3cc>
 80014c4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80014c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014cc:	4b58      	ldr	r3, [pc, #352]	@ (8001630 <NLLS+0x3d8>)
 80014ce:	443b      	add	r3, r7
 80014d0:	edc3 7a00 	vstr	s15, [r3]
		cos_phi = 1 - (phi*phi)/2 + (phi*phi*phi*phi)/24;
 80014d4:	4b50      	ldr	r3, [pc, #320]	@ (8001618 <NLLS+0x3c0>)
 80014d6:	443b      	add	r3, r7
 80014d8:	edd3 7a00 	vldr	s15, [r3]
 80014dc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80014e0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80014e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80014ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014f0:	4b49      	ldr	r3, [pc, #292]	@ (8001618 <NLLS+0x3c0>)
 80014f2:	443b      	add	r3, r7
 80014f4:	edd3 7a00 	vldr	s15, [r3]
 80014f8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80014fc:	4b46      	ldr	r3, [pc, #280]	@ (8001618 <NLLS+0x3c0>)
 80014fe:	443b      	add	r3, r7
 8001500:	edd3 7a00 	vldr	s15, [r3]
 8001504:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001508:	4b43      	ldr	r3, [pc, #268]	@ (8001618 <NLLS+0x3c0>)
 800150a:	443b      	add	r3, r7
 800150c:	edd3 7a00 	vldr	s15, [r3]
 8001510:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001514:	eeb3 6a08 	vmov.f32	s12, #56	@ 0x41c00000  24.0
 8001518:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800151c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001520:	4b44      	ldr	r3, [pc, #272]	@ (8001634 <NLLS+0x3dc>)
 8001522:	443b      	add	r3, r7
 8001524:	edc3 7a00 	vstr	s15, [r3]
		cos_rho = 1 - (rho*rho)/2 + (rho*rho*rho*rho)/24;
 8001528:	4b39      	ldr	r3, [pc, #228]	@ (8001610 <NLLS+0x3b8>)
 800152a:	443b      	add	r3, r7
 800152c:	edd3 7a00 	vldr	s15, [r3]
 8001530:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001534:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001538:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800153c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001540:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001544:	4b32      	ldr	r3, [pc, #200]	@ (8001610 <NLLS+0x3b8>)
 8001546:	443b      	add	r3, r7
 8001548:	edd3 7a00 	vldr	s15, [r3]
 800154c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001550:	4b2f      	ldr	r3, [pc, #188]	@ (8001610 <NLLS+0x3b8>)
 8001552:	443b      	add	r3, r7
 8001554:	edd3 7a00 	vldr	s15, [r3]
 8001558:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800155c:	4b2c      	ldr	r3, [pc, #176]	@ (8001610 <NLLS+0x3b8>)
 800155e:	443b      	add	r3, r7
 8001560:	edd3 7a00 	vldr	s15, [r3]
 8001564:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001568:	eeb3 6a08 	vmov.f32	s12, #56	@ 0x41c00000  24.0
 800156c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001570:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001574:	4b30      	ldr	r3, [pc, #192]	@ (8001638 <NLLS+0x3e0>)
 8001576:	443b      	add	r3, r7
 8001578:	edc3 7a00 	vstr	s15, [r3]
		cos_lambda = 1 - (lambida*lambida)/2 + (lambida*lambida*lambida*lambida)/24;
 800157c:	4b28      	ldr	r3, [pc, #160]	@ (8001620 <NLLS+0x3c8>)
 800157e:	443b      	add	r3, r7
 8001580:	edd3 7a00 	vldr	s15, [r3]
 8001584:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001588:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800158c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001590:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001594:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001598:	4b21      	ldr	r3, [pc, #132]	@ (8001620 <NLLS+0x3c8>)
 800159a:	443b      	add	r3, r7
 800159c:	edd3 7a00 	vldr	s15, [r3]
 80015a0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80015a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001620 <NLLS+0x3c8>)
 80015a6:	443b      	add	r3, r7
 80015a8:	edd3 7a00 	vldr	s15, [r3]
 80015ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001620 <NLLS+0x3c8>)
 80015b2:	443b      	add	r3, r7
 80015b4:	edd3 7a00 	vldr	s15, [r3]
 80015b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015bc:	eeb3 6a08 	vmov.f32	s12, #56	@ 0x41c00000  24.0
 80015c0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80015c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c8:	4b1c      	ldr	r3, [pc, #112]	@ (800163c <NLLS+0x3e4>)
 80015ca:	443b      	add	r3, r7
 80015cc:	edc3 7a00 	vstr	s15, [r3]

		for(int i=0; i < tam; i++)
 80015d0:	2300      	movs	r3, #0
 80015d2:	4a1b      	ldr	r2, [pc, #108]	@ (8001640 <NLLS+0x3e8>)
 80015d4:	443a      	add	r2, r7
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	f002 be4e 	b.w	8004278 <NLLS+0x3020>
 80015dc:	00016f4c 	.word	0x00016f4c
 80015e0:	00016fe8 	.word	0x00016fe8
 80015e4:	00016f50 	.word	0x00016f50
 80015e8:	00016fe4 	.word	0x00016fe4
 80015ec:	00016f54 	.word	0x00016f54
 80015f0:	00016fe0 	.word	0x00016fe0
 80015f4:	00016f58 	.word	0x00016f58
 80015f8:	00016fdc 	.word	0x00016fdc
 80015fc:	00016f5c 	.word	0x00016f5c
 8001600:	00016fd8 	.word	0x00016fd8
 8001604:	00016f60 	.word	0x00016f60
 8001608:	00016fd4 	.word	0x00016fd4
 800160c:	00016f64 	.word	0x00016f64
 8001610:	00016fd0 	.word	0x00016fd0
 8001614:	00016f68 	.word	0x00016f68
 8001618:	00016fcc 	.word	0x00016fcc
 800161c:	00016f6c 	.word	0x00016f6c
 8001620:	00016fc8 	.word	0x00016fc8
 8001624:	42f00000 	.word	0x42f00000
 8001628:	00016f88 	.word	0x00016f88
 800162c:	00016f84 	.word	0x00016f84
 8001630:	00016f80 	.word	0x00016f80
 8001634:	00016f7c 	.word	0x00016f7c
 8001638:	00016f78 	.word	0x00016f78
 800163c:	00016f74 	.word	0x00016f74
 8001640:	00016fb8 	.word	0x00016fb8
		{
			f[i] = ((mx[i]-bx)*(mx[i]-bx))/(sx*sx) + ((sx*(my[i]-by) - sy*sin_rho*(mx[i]-bx))*((sx*(my[i]-by) - sy*sin_rho*(mx[i]-bx))))/((sx*sy*cos_rho)*(sx*sy*cos_rho)) + ((sx*sy*cos_rho*(mz[i]-bz) - sx*sz*sin_lambda*(my[i]-by) + sy*sz*(sin_lambda*sin_rho - cos_rho*sin_phi*cos_lambda)*(mx[i]-bx))*(sx*sy*cos_rho*(mz[i]-bz) - sx*sz*sin_lambda*(my[i]-by) + sy*sz*(sin_lambda*sin_rho - cos_rho*sin_phi*cos_lambda)*(mx[i]-bx)))/((sx*sy*sz*cos_rho*cos_phi*cos_lambda)*(sx*sy*sz*cos_rho*cos_phi*cos_lambda));
 8001644:	4bbf      	ldr	r3, [pc, #764]	@ (8001944 <NLLS+0x6ec>)
 8001646:	443b      	add	r3, r7
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8001650:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8001654:	6812      	ldr	r2, [r2, #0]
 8001656:	4413      	add	r3, r2
 8001658:	ed93 7a00 	vldr	s14, [r3]
 800165c:	4bba      	ldr	r3, [pc, #744]	@ (8001948 <NLLS+0x6f0>)
 800165e:	443b      	add	r3, r7
 8001660:	edd3 7a00 	vldr	s15, [r3]
 8001664:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001668:	4bb6      	ldr	r3, [pc, #728]	@ (8001944 <NLLS+0x6ec>)
 800166a:	443b      	add	r3, r7
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8001674:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8001678:	6812      	ldr	r2, [r2, #0]
 800167a:	4413      	add	r3, r2
 800167c:	edd3 6a00 	vldr	s13, [r3]
 8001680:	4bb1      	ldr	r3, [pc, #708]	@ (8001948 <NLLS+0x6f0>)
 8001682:	443b      	add	r3, r7
 8001684:	edd3 7a00 	vldr	s15, [r3]
 8001688:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800168c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001690:	4bae      	ldr	r3, [pc, #696]	@ (800194c <NLLS+0x6f4>)
 8001692:	443b      	add	r3, r7
 8001694:	edd3 7a00 	vldr	s15, [r3]
 8001698:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800169c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016a0:	4ba8      	ldr	r3, [pc, #672]	@ (8001944 <NLLS+0x6ec>)
 80016a2:	443b      	add	r3, r7
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 80016ac:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 80016b0:	6812      	ldr	r2, [r2, #0]
 80016b2:	4413      	add	r3, r2
 80016b4:	edd3 6a00 	vldr	s13, [r3]
 80016b8:	4ba5      	ldr	r3, [pc, #660]	@ (8001950 <NLLS+0x6f8>)
 80016ba:	443b      	add	r3, r7
 80016bc:	edd3 7a00 	vldr	s15, [r3]
 80016c0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80016c4:	4ba1      	ldr	r3, [pc, #644]	@ (800194c <NLLS+0x6f4>)
 80016c6:	443b      	add	r3, r7
 80016c8:	edd3 7a00 	vldr	s15, [r3]
 80016cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016d0:	4ba0      	ldr	r3, [pc, #640]	@ (8001954 <NLLS+0x6fc>)
 80016d2:	443b      	add	r3, r7
 80016d4:	ed93 6a00 	vldr	s12, [r3]
 80016d8:	4b9f      	ldr	r3, [pc, #636]	@ (8001958 <NLLS+0x700>)
 80016da:	443b      	add	r3, r7
 80016dc:	edd3 7a00 	vldr	s15, [r3]
 80016e0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80016e4:	4b97      	ldr	r3, [pc, #604]	@ (8001944 <NLLS+0x6ec>)
 80016e6:	443b      	add	r3, r7
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 80016f0:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 80016f4:	6812      	ldr	r2, [r2, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	edd3 5a00 	vldr	s11, [r3]
 80016fc:	4b92      	ldr	r3, [pc, #584]	@ (8001948 <NLLS+0x6f0>)
 80016fe:	443b      	add	r3, r7
 8001700:	edd3 7a00 	vldr	s15, [r3]
 8001704:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001708:	ee66 7a27 	vmul.f32	s15, s12, s15
 800170c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001710:	4b8c      	ldr	r3, [pc, #560]	@ (8001944 <NLLS+0x6ec>)
 8001712:	443b      	add	r3, r7
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 800171c:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 8001720:	6812      	ldr	r2, [r2, #0]
 8001722:	4413      	add	r3, r2
 8001724:	ed93 6a00 	vldr	s12, [r3]
 8001728:	4b89      	ldr	r3, [pc, #548]	@ (8001950 <NLLS+0x6f8>)
 800172a:	443b      	add	r3, r7
 800172c:	edd3 7a00 	vldr	s15, [r3]
 8001730:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001734:	4b85      	ldr	r3, [pc, #532]	@ (800194c <NLLS+0x6f4>)
 8001736:	443b      	add	r3, r7
 8001738:	edd3 7a00 	vldr	s15, [r3]
 800173c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001740:	4b84      	ldr	r3, [pc, #528]	@ (8001954 <NLLS+0x6fc>)
 8001742:	443b      	add	r3, r7
 8001744:	edd3 5a00 	vldr	s11, [r3]
 8001748:	4b83      	ldr	r3, [pc, #524]	@ (8001958 <NLLS+0x700>)
 800174a:	443b      	add	r3, r7
 800174c:	edd3 7a00 	vldr	s15, [r3]
 8001750:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001754:	4b7b      	ldr	r3, [pc, #492]	@ (8001944 <NLLS+0x6ec>)
 8001756:	443b      	add	r3, r7
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8001760:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8001764:	6812      	ldr	r2, [r2, #0]
 8001766:	4413      	add	r3, r2
 8001768:	ed93 5a00 	vldr	s10, [r3]
 800176c:	4b76      	ldr	r3, [pc, #472]	@ (8001948 <NLLS+0x6f0>)
 800176e:	443b      	add	r3, r7
 8001770:	edd3 7a00 	vldr	s15, [r3]
 8001774:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001778:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800177c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001780:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001784:	4b71      	ldr	r3, [pc, #452]	@ (800194c <NLLS+0x6f4>)
 8001786:	443b      	add	r3, r7
 8001788:	edd3 6a00 	vldr	s13, [r3]
 800178c:	4b71      	ldr	r3, [pc, #452]	@ (8001954 <NLLS+0x6fc>)
 800178e:	443b      	add	r3, r7
 8001790:	edd3 7a00 	vldr	s15, [r3]
 8001794:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001798:	4b70      	ldr	r3, [pc, #448]	@ (800195c <NLLS+0x704>)
 800179a:	443b      	add	r3, r7
 800179c:	edd3 7a00 	vldr	s15, [r3]
 80017a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017a4:	4b69      	ldr	r3, [pc, #420]	@ (800194c <NLLS+0x6f4>)
 80017a6:	443b      	add	r3, r7
 80017a8:	edd3 5a00 	vldr	s11, [r3]
 80017ac:	4b69      	ldr	r3, [pc, #420]	@ (8001954 <NLLS+0x6fc>)
 80017ae:	443b      	add	r3, r7
 80017b0:	edd3 7a00 	vldr	s15, [r3]
 80017b4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80017b8:	4b68      	ldr	r3, [pc, #416]	@ (800195c <NLLS+0x704>)
 80017ba:	443b      	add	r3, r7
 80017bc:	edd3 7a00 	vldr	s15, [r3]
 80017c0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80017c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017c8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80017cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017d0:	4b5e      	ldr	r3, [pc, #376]	@ (800194c <NLLS+0x6f4>)
 80017d2:	443b      	add	r3, r7
 80017d4:	edd3 6a00 	vldr	s13, [r3]
 80017d8:	4b5e      	ldr	r3, [pc, #376]	@ (8001954 <NLLS+0x6fc>)
 80017da:	443b      	add	r3, r7
 80017dc:	edd3 7a00 	vldr	s15, [r3]
 80017e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017e4:	4b5d      	ldr	r3, [pc, #372]	@ (800195c <NLLS+0x704>)
 80017e6:	443b      	add	r3, r7
 80017e8:	edd3 7a00 	vldr	s15, [r3]
 80017ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017f0:	4b54      	ldr	r3, [pc, #336]	@ (8001944 <NLLS+0x6ec>)
 80017f2:	443b      	add	r3, r7
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 80017fc:	f6a2 72ec 	subw	r2, r2, #4076	@ 0xfec
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	4413      	add	r3, r2
 8001804:	ed93 6a00 	vldr	s12, [r3]
 8001808:	4b55      	ldr	r3, [pc, #340]	@ (8001960 <NLLS+0x708>)
 800180a:	443b      	add	r3, r7
 800180c:	edd3 7a00 	vldr	s15, [r3]
 8001810:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001814:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001818:	4b4c      	ldr	r3, [pc, #304]	@ (800194c <NLLS+0x6f4>)
 800181a:	443b      	add	r3, r7
 800181c:	ed93 6a00 	vldr	s12, [r3]
 8001820:	4b50      	ldr	r3, [pc, #320]	@ (8001964 <NLLS+0x70c>)
 8001822:	443b      	add	r3, r7
 8001824:	edd3 7a00 	vldr	s15, [r3]
 8001828:	ee26 6a27 	vmul.f32	s12, s12, s15
 800182c:	4b4e      	ldr	r3, [pc, #312]	@ (8001968 <NLLS+0x710>)
 800182e:	443b      	add	r3, r7
 8001830:	edd3 7a00 	vldr	s15, [r3]
 8001834:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001838:	4b42      	ldr	r3, [pc, #264]	@ (8001944 <NLLS+0x6ec>)
 800183a:	443b      	add	r3, r7
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8001844:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 8001848:	6812      	ldr	r2, [r2, #0]
 800184a:	4413      	add	r3, r2
 800184c:	edd3 5a00 	vldr	s11, [r3]
 8001850:	4b3f      	ldr	r3, [pc, #252]	@ (8001950 <NLLS+0x6f8>)
 8001852:	443b      	add	r3, r7
 8001854:	edd3 7a00 	vldr	s15, [r3]
 8001858:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800185c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001860:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001864:	4b3b      	ldr	r3, [pc, #236]	@ (8001954 <NLLS+0x6fc>)
 8001866:	443b      	add	r3, r7
 8001868:	ed93 6a00 	vldr	s12, [r3]
 800186c:	4b3d      	ldr	r3, [pc, #244]	@ (8001964 <NLLS+0x70c>)
 800186e:	443b      	add	r3, r7
 8001870:	edd3 7a00 	vldr	s15, [r3]
 8001874:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001878:	4b3b      	ldr	r3, [pc, #236]	@ (8001968 <NLLS+0x710>)
 800187a:	443b      	add	r3, r7
 800187c:	edd3 5a00 	vldr	s11, [r3]
 8001880:	4b35      	ldr	r3, [pc, #212]	@ (8001958 <NLLS+0x700>)
 8001882:	443b      	add	r3, r7
 8001884:	edd3 7a00 	vldr	s15, [r3]
 8001888:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800188c:	4b33      	ldr	r3, [pc, #204]	@ (800195c <NLLS+0x704>)
 800188e:	443b      	add	r3, r7
 8001890:	ed93 5a00 	vldr	s10, [r3]
 8001894:	4b35      	ldr	r3, [pc, #212]	@ (800196c <NLLS+0x714>)
 8001896:	443b      	add	r3, r7
 8001898:	edd3 7a00 	vldr	s15, [r3]
 800189c:	ee25 5a27 	vmul.f32	s10, s10, s15
 80018a0:	4b33      	ldr	r3, [pc, #204]	@ (8001970 <NLLS+0x718>)
 80018a2:	443b      	add	r3, r7
 80018a4:	edd3 7a00 	vldr	s15, [r3]
 80018a8:	ee65 7a27 	vmul.f32	s15, s10, s15
 80018ac:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80018b0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80018b4:	4b23      	ldr	r3, [pc, #140]	@ (8001944 <NLLS+0x6ec>)
 80018b6:	443b      	add	r3, r7
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 80018c0:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 80018c4:	6812      	ldr	r2, [r2, #0]
 80018c6:	4413      	add	r3, r2
 80018c8:	edd3 5a00 	vldr	s11, [r3]
 80018cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001948 <NLLS+0x6f0>)
 80018ce:	443b      	add	r3, r7
 80018d0:	edd3 7a00 	vldr	s15, [r3]
 80018d4:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80018d8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018dc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80018e0:	4b1a      	ldr	r3, [pc, #104]	@ (800194c <NLLS+0x6f4>)
 80018e2:	443b      	add	r3, r7
 80018e4:	ed93 6a00 	vldr	s12, [r3]
 80018e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001954 <NLLS+0x6fc>)
 80018ea:	443b      	add	r3, r7
 80018ec:	edd3 7a00 	vldr	s15, [r3]
 80018f0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80018f4:	4b19      	ldr	r3, [pc, #100]	@ (800195c <NLLS+0x704>)
 80018f6:	443b      	add	r3, r7
 80018f8:	edd3 7a00 	vldr	s15, [r3]
 80018fc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001900:	4b10      	ldr	r3, [pc, #64]	@ (8001944 <NLLS+0x6ec>)
 8001902:	443b      	add	r3, r7
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 800190c:	f6a2 72ec 	subw	r2, r2, #4076	@ 0xfec
 8001910:	6812      	ldr	r2, [r2, #0]
 8001912:	4413      	add	r3, r2
 8001914:	edd3 5a00 	vldr	s11, [r3]
 8001918:	4b11      	ldr	r3, [pc, #68]	@ (8001960 <NLLS+0x708>)
 800191a:	443b      	add	r3, r7
 800191c:	edd3 7a00 	vldr	s15, [r3]
 8001920:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001924:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001928:	4b08      	ldr	r3, [pc, #32]	@ (800194c <NLLS+0x6f4>)
 800192a:	443b      	add	r3, r7
 800192c:	edd3 5a00 	vldr	s11, [r3]
 8001930:	4b0c      	ldr	r3, [pc, #48]	@ (8001964 <NLLS+0x70c>)
 8001932:	443b      	add	r3, r7
 8001934:	edd3 7a00 	vldr	s15, [r3]
 8001938:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800193c:	4b0a      	ldr	r3, [pc, #40]	@ (8001968 <NLLS+0x710>)
 800193e:	443b      	add	r3, r7
 8001940:	e018      	b.n	8001974 <NLLS+0x71c>
 8001942:	bf00      	nop
 8001944:	00016fb8 	.word	0x00016fb8
 8001948:	00016fdc 	.word	0x00016fdc
 800194c:	00016fe8 	.word	0x00016fe8
 8001950:	00016fd8 	.word	0x00016fd8
 8001954:	00016fe4 	.word	0x00016fe4
 8001958:	00016f84 	.word	0x00016f84
 800195c:	00016f78 	.word	0x00016f78
 8001960:	00016fd4 	.word	0x00016fd4
 8001964:	00016fe0 	.word	0x00016fe0
 8001968:	00016f80 	.word	0x00016f80
 800196c:	00016f88 	.word	0x00016f88
 8001970:	00016f74 	.word	0x00016f74
 8001974:	edd3 7a00 	vldr	s15, [r3]
 8001978:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800197c:	4bbd      	ldr	r3, [pc, #756]	@ (8001c74 <NLLS+0xa1c>)
 800197e:	443b      	add	r3, r7
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8001988:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 800198c:	6812      	ldr	r2, [r2, #0]
 800198e:	4413      	add	r3, r2
 8001990:	ed93 5a00 	vldr	s10, [r3]
 8001994:	4bb8      	ldr	r3, [pc, #736]	@ (8001c78 <NLLS+0xa20>)
 8001996:	443b      	add	r3, r7
 8001998:	edd3 7a00 	vldr	s15, [r3]
 800199c:	ee75 7a67 	vsub.f32	s15, s10, s15
 80019a0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80019a4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80019a8:	4bb4      	ldr	r3, [pc, #720]	@ (8001c7c <NLLS+0xa24>)
 80019aa:	443b      	add	r3, r7
 80019ac:	edd3 5a00 	vldr	s11, [r3]
 80019b0:	4bb3      	ldr	r3, [pc, #716]	@ (8001c80 <NLLS+0xa28>)
 80019b2:	443b      	add	r3, r7
 80019b4:	edd3 7a00 	vldr	s15, [r3]
 80019b8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80019bc:	4bb1      	ldr	r3, [pc, #708]	@ (8001c84 <NLLS+0xa2c>)
 80019be:	443b      	add	r3, r7
 80019c0:	ed93 5a00 	vldr	s10, [r3]
 80019c4:	4bb0      	ldr	r3, [pc, #704]	@ (8001c88 <NLLS+0xa30>)
 80019c6:	443b      	add	r3, r7
 80019c8:	edd3 7a00 	vldr	s15, [r3]
 80019cc:	ee25 5a27 	vmul.f32	s10, s10, s15
 80019d0:	4bae      	ldr	r3, [pc, #696]	@ (8001c8c <NLLS+0xa34>)
 80019d2:	443b      	add	r3, r7
 80019d4:	edd3 4a00 	vldr	s9, [r3]
 80019d8:	4bad      	ldr	r3, [pc, #692]	@ (8001c90 <NLLS+0xa38>)
 80019da:	443b      	add	r3, r7
 80019dc:	edd3 7a00 	vldr	s15, [r3]
 80019e0:	ee64 4aa7 	vmul.f32	s9, s9, s15
 80019e4:	4bab      	ldr	r3, [pc, #684]	@ (8001c94 <NLLS+0xa3c>)
 80019e6:	443b      	add	r3, r7
 80019e8:	edd3 7a00 	vldr	s15, [r3]
 80019ec:	ee64 7aa7 	vmul.f32	s15, s9, s15
 80019f0:	ee75 7a67 	vsub.f32	s15, s10, s15
 80019f4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80019f8:	4b9e      	ldr	r3, [pc, #632]	@ (8001c74 <NLLS+0xa1c>)
 80019fa:	443b      	add	r3, r7
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8001a04:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8001a08:	6812      	ldr	r2, [r2, #0]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	ed93 5a00 	vldr	s10, [r3]
 8001a10:	4ba1      	ldr	r3, [pc, #644]	@ (8001c98 <NLLS+0xa40>)
 8001a12:	443b      	add	r3, r7
 8001a14:	edd3 7a00 	vldr	s15, [r3]
 8001a18:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001a1c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a20:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001a24:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001a28:	4b9c      	ldr	r3, [pc, #624]	@ (8001c9c <NLLS+0xa44>)
 8001a2a:	443b      	add	r3, r7
 8001a2c:	edd3 6a00 	vldr	s13, [r3]
 8001a30:	4b92      	ldr	r3, [pc, #584]	@ (8001c7c <NLLS+0xa24>)
 8001a32:	443b      	add	r3, r7
 8001a34:	edd3 7a00 	vldr	s15, [r3]
 8001a38:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a3c:	4b90      	ldr	r3, [pc, #576]	@ (8001c80 <NLLS+0xa28>)
 8001a3e:	443b      	add	r3, r7
 8001a40:	edd3 7a00 	vldr	s15, [r3]
 8001a44:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a48:	4b90      	ldr	r3, [pc, #576]	@ (8001c8c <NLLS+0xa34>)
 8001a4a:	443b      	add	r3, r7
 8001a4c:	edd3 7a00 	vldr	s15, [r3]
 8001a50:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a54:	4b92      	ldr	r3, [pc, #584]	@ (8001ca0 <NLLS+0xa48>)
 8001a56:	443b      	add	r3, r7
 8001a58:	edd3 7a00 	vldr	s15, [r3]
 8001a5c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a60:	4b8c      	ldr	r3, [pc, #560]	@ (8001c94 <NLLS+0xa3c>)
 8001a62:	443b      	add	r3, r7
 8001a64:	edd3 7a00 	vldr	s15, [r3]
 8001a68:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a6c:	4b8b      	ldr	r3, [pc, #556]	@ (8001c9c <NLLS+0xa44>)
 8001a6e:	443b      	add	r3, r7
 8001a70:	edd3 5a00 	vldr	s11, [r3]
 8001a74:	4b81      	ldr	r3, [pc, #516]	@ (8001c7c <NLLS+0xa24>)
 8001a76:	443b      	add	r3, r7
 8001a78:	edd3 7a00 	vldr	s15, [r3]
 8001a7c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001a80:	4b7f      	ldr	r3, [pc, #508]	@ (8001c80 <NLLS+0xa28>)
 8001a82:	443b      	add	r3, r7
 8001a84:	edd3 7a00 	vldr	s15, [r3]
 8001a88:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001a8c:	4b7f      	ldr	r3, [pc, #508]	@ (8001c8c <NLLS+0xa34>)
 8001a8e:	443b      	add	r3, r7
 8001a90:	edd3 7a00 	vldr	s15, [r3]
 8001a94:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001a98:	4b81      	ldr	r3, [pc, #516]	@ (8001ca0 <NLLS+0xa48>)
 8001a9a:	443b      	add	r3, r7
 8001a9c:	edd3 7a00 	vldr	s15, [r3]
 8001aa0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001aa4:	4b7b      	ldr	r3, [pc, #492]	@ (8001c94 <NLLS+0xa3c>)
 8001aa6:	443b      	add	r3, r7
 8001aa8:	edd3 7a00 	vldr	s15, [r3]
 8001aac:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ab0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ab4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001ab8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001abc:	4b79      	ldr	r3, [pc, #484]	@ (8001ca4 <NLLS+0xa4c>)
 8001abe:	443b      	add	r3, r7
 8001ac0:	f5a3 6297 	sub.w	r2, r3, #1208	@ 0x4b8
 8001ac4:	4b6b      	ldr	r3, [pc, #428]	@ (8001c74 <NLLS+0xa1c>)
 8001ac6:	443b      	add	r3, r7
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	edc3 7a00 	vstr	s15, [r3]

			e[i] = (Be[i] * Be[i]) - f[i];
 8001ad2:	4b75      	ldr	r3, [pc, #468]	@ (8001ca8 <NLLS+0xa50>)
 8001ad4:	443b      	add	r3, r7
 8001ad6:	f5a3 7200 	sub.w	r2, r3, #512	@ 0x200
 8001ada:	4b66      	ldr	r3, [pc, #408]	@ (8001c74 <NLLS+0xa1c>)
 8001adc:	443b      	add	r3, r7
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	ed93 7a00 	vldr	s14, [r3]
 8001ae8:	4b6f      	ldr	r3, [pc, #444]	@ (8001ca8 <NLLS+0xa50>)
 8001aea:	443b      	add	r3, r7
 8001aec:	f5a3 7200 	sub.w	r2, r3, #512	@ 0x200
 8001af0:	4b60      	ldr	r3, [pc, #384]	@ (8001c74 <NLLS+0xa1c>)
 8001af2:	443b      	add	r3, r7
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	edd3 7a00 	vldr	s15, [r3]
 8001afe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b02:	4b68      	ldr	r3, [pc, #416]	@ (8001ca4 <NLLS+0xa4c>)
 8001b04:	443b      	add	r3, r7
 8001b06:	f5a3 6297 	sub.w	r2, r3, #1208	@ 0x4b8
 8001b0a:	4b5a      	ldr	r3, [pc, #360]	@ (8001c74 <NLLS+0xa1c>)
 8001b0c:	443b      	add	r3, r7
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	edd3 7a00 	vldr	s15, [r3]
 8001b18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b1c:	4b63      	ldr	r3, [pc, #396]	@ (8001cac <NLLS+0xa54>)
 8001b1e:	443b      	add	r3, r7
 8001b20:	f5a3 7257 	sub.w	r2, r3, #860	@ 0x35c
 8001b24:	4b53      	ldr	r3, [pc, #332]	@ (8001c74 <NLLS+0xa1c>)
 8001b26:	443b      	add	r3, r7
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	edc3 7a00 	vstr	s15, [r3]

			mat_H[0][i] = (2*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))*(by - my[i]))/(sx*sx*sy*sy*cos_rho*cos_rho) - (2*((sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))))/((sx*sx*sx)*sy*sy*cos_rho*cos_rho) - (2*((bx - mx[i])*(bx - mx[i])))/(sx*sx*sx) - (2*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])) * (sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/((sx*sx*sx)*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho) + (2*(sy*cos_rho*(bz - mz[i]) - sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8001b32:	4b50      	ldr	r3, [pc, #320]	@ (8001c74 <NLLS+0xa1c>)
 8001b34:	443b      	add	r3, r7
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8001b3e:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 8001b42:	6812      	ldr	r2, [r2, #0]
 8001b44:	4413      	add	r3, r2
 8001b46:	edd3 7a00 	vldr	s15, [r3]
 8001b4a:	4b4b      	ldr	r3, [pc, #300]	@ (8001c78 <NLLS+0xa20>)
 8001b4c:	443b      	add	r3, r7
 8001b4e:	ed93 7a00 	vldr	s14, [r3]
 8001b52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b56:	4b51      	ldr	r3, [pc, #324]	@ (8001c9c <NLLS+0xa44>)
 8001b58:	443b      	add	r3, r7
 8001b5a:	edd3 7a00 	vldr	s15, [r3]
 8001b5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b62:	4b46      	ldr	r3, [pc, #280]	@ (8001c7c <NLLS+0xa24>)
 8001b64:	443b      	add	r3, r7
 8001b66:	edd3 6a00 	vldr	s13, [r3]
 8001b6a:	4b47      	ldr	r3, [pc, #284]	@ (8001c88 <NLLS+0xa30>)
 8001b6c:	443b      	add	r3, r7
 8001b6e:	edd3 7a00 	vldr	s15, [r3]
 8001b72:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b76:	4b3f      	ldr	r3, [pc, #252]	@ (8001c74 <NLLS+0xa1c>)
 8001b78:	443b      	add	r3, r7
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8001b82:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8001b86:	6812      	ldr	r2, [r2, #0]
 8001b88:	4413      	add	r3, r2
 8001b8a:	edd3 7a00 	vldr	s15, [r3]
 8001b8e:	4b42      	ldr	r3, [pc, #264]	@ (8001c98 <NLLS+0xa40>)
 8001b90:	443b      	add	r3, r7
 8001b92:	ed93 6a00 	vldr	s12, [r3]
 8001b96:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ba2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001ba6:	4b33      	ldr	r3, [pc, #204]	@ (8001c74 <NLLS+0xa1c>)
 8001ba8:	443b      	add	r3, r7
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8001bb2:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 8001bb6:	6812      	ldr	r2, [r2, #0]
 8001bb8:	4413      	add	r3, r2
 8001bba:	edd3 7a00 	vldr	s15, [r3]
 8001bbe:	4b2e      	ldr	r3, [pc, #184]	@ (8001c78 <NLLS+0xa20>)
 8001bc0:	443b      	add	r3, r7
 8001bc2:	edd3 6a00 	vldr	s13, [r3]
 8001bc6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001bca:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001bce:	4b33      	ldr	r3, [pc, #204]	@ (8001c9c <NLLS+0xa44>)
 8001bd0:	443b      	add	r3, r7
 8001bd2:	edd3 7a00 	vldr	s15, [r3]
 8001bd6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001bda:	4b28      	ldr	r3, [pc, #160]	@ (8001c7c <NLLS+0xa24>)
 8001bdc:	443b      	add	r3, r7
 8001bde:	edd3 7a00 	vldr	s15, [r3]
 8001be2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001be6:	4b25      	ldr	r3, [pc, #148]	@ (8001c7c <NLLS+0xa24>)
 8001be8:	443b      	add	r3, r7
 8001bea:	edd3 7a00 	vldr	s15, [r3]
 8001bee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bf2:	4b26      	ldr	r3, [pc, #152]	@ (8001c8c <NLLS+0xa34>)
 8001bf4:	443b      	add	r3, r7
 8001bf6:	edd3 7a00 	vldr	s15, [r3]
 8001bfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bfe:	4b23      	ldr	r3, [pc, #140]	@ (8001c8c <NLLS+0xa34>)
 8001c00:	443b      	add	r3, r7
 8001c02:	edd3 7a00 	vldr	s15, [r3]
 8001c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c0e:	4b19      	ldr	r3, [pc, #100]	@ (8001c74 <NLLS+0xa1c>)
 8001c10:	443b      	add	r3, r7
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8001c1a:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 8001c1e:	6812      	ldr	r2, [r2, #0]
 8001c20:	4413      	add	r3, r2
 8001c22:	edd3 7a00 	vldr	s15, [r3]
 8001c26:	4b14      	ldr	r3, [pc, #80]	@ (8001c78 <NLLS+0xa20>)
 8001c28:	443b      	add	r3, r7
 8001c2a:	edd3 6a00 	vldr	s13, [r3]
 8001c2e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001c32:	4b1a      	ldr	r3, [pc, #104]	@ (8001c9c <NLLS+0xa44>)
 8001c34:	443b      	add	r3, r7
 8001c36:	edd3 7a00 	vldr	s15, [r3]
 8001c3a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c7c <NLLS+0xa24>)
 8001c40:	443b      	add	r3, r7
 8001c42:	ed93 6a00 	vldr	s12, [r3]
 8001c46:	4b10      	ldr	r3, [pc, #64]	@ (8001c88 <NLLS+0xa30>)
 8001c48:	443b      	add	r3, r7
 8001c4a:	edd3 7a00 	vldr	s15, [r3]
 8001c4e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c52:	4b08      	ldr	r3, [pc, #32]	@ (8001c74 <NLLS+0xa1c>)
 8001c54:	443b      	add	r3, r7
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8001c5e:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	4413      	add	r3, r2
 8001c66:	edd3 7a00 	vldr	s15, [r3]
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c98 <NLLS+0xa40>)
 8001c6c:	443b      	add	r3, r7
 8001c6e:	edd3 5a00 	vldr	s11, [r3]
 8001c72:	e01d      	b.n	8001cb0 <NLLS+0xa58>
 8001c74:	00016fb8 	.word	0x00016fb8
 8001c78:	00016fd8 	.word	0x00016fd8
 8001c7c:	00016fe4 	.word	0x00016fe4
 8001c80:	00016fe0 	.word	0x00016fe0
 8001c84:	00016f80 	.word	0x00016f80
 8001c88:	00016f84 	.word	0x00016f84
 8001c8c:	00016f78 	.word	0x00016f78
 8001c90:	00016f88 	.word	0x00016f88
 8001c94:	00016f74 	.word	0x00016f74
 8001c98:	00016fdc 	.word	0x00016fdc
 8001c9c:	00016fe8 	.word	0x00016fe8
 8001ca0:	00016f7c 	.word	0x00016f7c
 8001ca4:	00013ff0 	.word	0x00013ff0
 8001ca8:	00015ff0 	.word	0x00015ff0
 8001cac:	00014ff0 	.word	0x00014ff0
 8001cb0:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001cb4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cb8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001cbc:	4bc0      	ldr	r3, [pc, #768]	@ (8001fc0 <NLLS+0xd68>)
 8001cbe:	443b      	add	r3, r7
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8001cc8:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 8001ccc:	6812      	ldr	r2, [r2, #0]
 8001cce:	4413      	add	r3, r2
 8001cd0:	edd3 7a00 	vldr	s15, [r3]
 8001cd4:	4bbb      	ldr	r3, [pc, #748]	@ (8001fc4 <NLLS+0xd6c>)
 8001cd6:	443b      	add	r3, r7
 8001cd8:	ed93 6a00 	vldr	s12, [r3]
 8001cdc:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001ce0:	4bb9      	ldr	r3, [pc, #740]	@ (8001fc8 <NLLS+0xd70>)
 8001ce2:	443b      	add	r3, r7
 8001ce4:	edd3 7a00 	vldr	s15, [r3]
 8001ce8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001cec:	4bb7      	ldr	r3, [pc, #732]	@ (8001fcc <NLLS+0xd74>)
 8001cee:	443b      	add	r3, r7
 8001cf0:	edd3 5a00 	vldr	s11, [r3]
 8001cf4:	4bb6      	ldr	r3, [pc, #728]	@ (8001fd0 <NLLS+0xd78>)
 8001cf6:	443b      	add	r3, r7
 8001cf8:	edd3 7a00 	vldr	s15, [r3]
 8001cfc:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001d00:	4baf      	ldr	r3, [pc, #700]	@ (8001fc0 <NLLS+0xd68>)
 8001d02:	443b      	add	r3, r7
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8001d0c:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8001d10:	6812      	ldr	r2, [r2, #0]
 8001d12:	4413      	add	r3, r2
 8001d14:	edd3 7a00 	vldr	s15, [r3]
 8001d18:	4bae      	ldr	r3, [pc, #696]	@ (8001fd4 <NLLS+0xd7c>)
 8001d1a:	443b      	add	r3, r7
 8001d1c:	ed93 5a00 	vldr	s10, [r3]
 8001d20:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001d24:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001d28:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d30:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8001d34:	4ba4      	ldr	r3, [pc, #656]	@ (8001fc8 <NLLS+0xd70>)
 8001d36:	443b      	add	r3, r7
 8001d38:	edd3 7a00 	vldr	s15, [r3]
 8001d3c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001d40:	4ba1      	ldr	r3, [pc, #644]	@ (8001fc8 <NLLS+0xd70>)
 8001d42:	443b      	add	r3, r7
 8001d44:	edd3 7a00 	vldr	s15, [r3]
 8001d48:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d4c:	4b9f      	ldr	r3, [pc, #636]	@ (8001fcc <NLLS+0xd74>)
 8001d4e:	443b      	add	r3, r7
 8001d50:	edd3 7a00 	vldr	s15, [r3]
 8001d54:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d58:	4b9c      	ldr	r3, [pc, #624]	@ (8001fcc <NLLS+0xd74>)
 8001d5a:	443b      	add	r3, r7
 8001d5c:	edd3 7a00 	vldr	s15, [r3]
 8001d60:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d64:	4b9c      	ldr	r3, [pc, #624]	@ (8001fd8 <NLLS+0xd80>)
 8001d66:	443b      	add	r3, r7
 8001d68:	edd3 7a00 	vldr	s15, [r3]
 8001d6c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d70:	4b99      	ldr	r3, [pc, #612]	@ (8001fd8 <NLLS+0xd80>)
 8001d72:	443b      	add	r3, r7
 8001d74:	edd3 7a00 	vldr	s15, [r3]
 8001d78:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d7c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001d80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d84:	4b8e      	ldr	r3, [pc, #568]	@ (8001fc0 <NLLS+0xd68>)
 8001d86:	443b      	add	r3, r7
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8001d90:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8001d94:	6812      	ldr	r2, [r2, #0]
 8001d96:	4413      	add	r3, r2
 8001d98:	edd3 7a00 	vldr	s15, [r3]
 8001d9c:	4b8d      	ldr	r3, [pc, #564]	@ (8001fd4 <NLLS+0xd7c>)
 8001d9e:	443b      	add	r3, r7
 8001da0:	edd3 6a00 	vldr	s13, [r3]
 8001da4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001da8:	4b85      	ldr	r3, [pc, #532]	@ (8001fc0 <NLLS+0xd68>)
 8001daa:	443b      	add	r3, r7
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8001db4:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8001db8:	6812      	ldr	r2, [r2, #0]
 8001dba:	4413      	add	r3, r2
 8001dbc:	edd3 7a00 	vldr	s15, [r3]
 8001dc0:	4b84      	ldr	r3, [pc, #528]	@ (8001fd4 <NLLS+0xd7c>)
 8001dc2:	443b      	add	r3, r7
 8001dc4:	ed93 6a00 	vldr	s12, [r3]
 8001dc8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001dcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dd0:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8001dd4:	4b7c      	ldr	r3, [pc, #496]	@ (8001fc8 <NLLS+0xd70>)
 8001dd6:	443b      	add	r3, r7
 8001dd8:	edd3 7a00 	vldr	s15, [r3]
 8001ddc:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001de0:	4b79      	ldr	r3, [pc, #484]	@ (8001fc8 <NLLS+0xd70>)
 8001de2:	443b      	add	r3, r7
 8001de4:	edd3 7a00 	vldr	s15, [r3]
 8001de8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001dec:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001df0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001df4:	4b75      	ldr	r3, [pc, #468]	@ (8001fcc <NLLS+0xd74>)
 8001df6:	443b      	add	r3, r7
 8001df8:	edd3 6a00 	vldr	s13, [r3]
 8001dfc:	4b77      	ldr	r3, [pc, #476]	@ (8001fdc <NLLS+0xd84>)
 8001dfe:	443b      	add	r3, r7
 8001e00:	edd3 7a00 	vldr	s15, [r3]
 8001e04:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e08:	4b75      	ldr	r3, [pc, #468]	@ (8001fe0 <NLLS+0xd88>)
 8001e0a:	443b      	add	r3, r7
 8001e0c:	ed93 6a00 	vldr	s12, [r3]
 8001e10:	4b6f      	ldr	r3, [pc, #444]	@ (8001fd0 <NLLS+0xd78>)
 8001e12:	443b      	add	r3, r7
 8001e14:	edd3 7a00 	vldr	s15, [r3]
 8001e18:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e1c:	4b71      	ldr	r3, [pc, #452]	@ (8001fe4 <NLLS+0xd8c>)
 8001e1e:	443b      	add	r3, r7
 8001e20:	edd3 5a00 	vldr	s11, [r3]
 8001e24:	4b6c      	ldr	r3, [pc, #432]	@ (8001fd8 <NLLS+0xd80>)
 8001e26:	443b      	add	r3, r7
 8001e28:	edd3 7a00 	vldr	s15, [r3]
 8001e2c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001e30:	4b6d      	ldr	r3, [pc, #436]	@ (8001fe8 <NLLS+0xd90>)
 8001e32:	443b      	add	r3, r7
 8001e34:	edd3 7a00 	vldr	s15, [r3]
 8001e38:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e3c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e40:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e44:	4b5e      	ldr	r3, [pc, #376]	@ (8001fc0 <NLLS+0xd68>)
 8001e46:	443b      	add	r3, r7
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8001e50:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8001e54:	6812      	ldr	r2, [r2, #0]
 8001e56:	4413      	add	r3, r2
 8001e58:	edd3 7a00 	vldr	s15, [r3]
 8001e5c:	4b5d      	ldr	r3, [pc, #372]	@ (8001fd4 <NLLS+0xd7c>)
 8001e5e:	443b      	add	r3, r7
 8001e60:	ed93 6a00 	vldr	s12, [r3]
 8001e64:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e68:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e6c:	4b56      	ldr	r3, [pc, #344]	@ (8001fc8 <NLLS+0xd70>)
 8001e6e:	443b      	add	r3, r7
 8001e70:	ed93 6a00 	vldr	s12, [r3]
 8001e74:	4b55      	ldr	r3, [pc, #340]	@ (8001fcc <NLLS+0xd74>)
 8001e76:	443b      	add	r3, r7
 8001e78:	edd3 7a00 	vldr	s15, [r3]
 8001e7c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e80:	4b55      	ldr	r3, [pc, #340]	@ (8001fd8 <NLLS+0xd80>)
 8001e82:	443b      	add	r3, r7
 8001e84:	edd3 7a00 	vldr	s15, [r3]
 8001e88:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e8c:	4b4c      	ldr	r3, [pc, #304]	@ (8001fc0 <NLLS+0xd68>)
 8001e8e:	443b      	add	r3, r7
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8001e98:	f6a2 72ec 	subw	r2, r2, #4076	@ 0xfec
 8001e9c:	6812      	ldr	r2, [r2, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	edd3 7a00 	vldr	s15, [r3]
 8001ea4:	4b51      	ldr	r3, [pc, #324]	@ (8001fec <NLLS+0xd94>)
 8001ea6:	443b      	add	r3, r7
 8001ea8:	edd3 5a00 	vldr	s11, [r3]
 8001eac:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001eb0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001eb4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001eb8:	4b43      	ldr	r3, [pc, #268]	@ (8001fc8 <NLLS+0xd70>)
 8001eba:	443b      	add	r3, r7
 8001ebc:	ed93 6a00 	vldr	s12, [r3]
 8001ec0:	4b46      	ldr	r3, [pc, #280]	@ (8001fdc <NLLS+0xd84>)
 8001ec2:	443b      	add	r3, r7
 8001ec4:	edd3 7a00 	vldr	s15, [r3]
 8001ec8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ecc:	4b44      	ldr	r3, [pc, #272]	@ (8001fe0 <NLLS+0xd88>)
 8001ece:	443b      	add	r3, r7
 8001ed0:	edd3 7a00 	vldr	s15, [r3]
 8001ed4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ed8:	4b39      	ldr	r3, [pc, #228]	@ (8001fc0 <NLLS+0xd68>)
 8001eda:	443b      	add	r3, r7
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8001ee4:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 8001ee8:	6812      	ldr	r2, [r2, #0]
 8001eea:	4413      	add	r3, r2
 8001eec:	edd3 7a00 	vldr	s15, [r3]
 8001ef0:	4b34      	ldr	r3, [pc, #208]	@ (8001fc4 <NLLS+0xd6c>)
 8001ef2:	443b      	add	r3, r7
 8001ef4:	edd3 5a00 	vldr	s11, [r3]
 8001ef8:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001efc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f00:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001f04:	4b31      	ldr	r3, [pc, #196]	@ (8001fcc <NLLS+0xd74>)
 8001f06:	443b      	add	r3, r7
 8001f08:	ed93 6a00 	vldr	s12, [r3]
 8001f0c:	4b33      	ldr	r3, [pc, #204]	@ (8001fdc <NLLS+0xd84>)
 8001f0e:	443b      	add	r3, r7
 8001f10:	edd3 7a00 	vldr	s15, [r3]
 8001f14:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001f18:	4b31      	ldr	r3, [pc, #196]	@ (8001fe0 <NLLS+0xd88>)
 8001f1a:	443b      	add	r3, r7
 8001f1c:	edd3 5a00 	vldr	s11, [r3]
 8001f20:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd0 <NLLS+0xd78>)
 8001f22:	443b      	add	r3, r7
 8001f24:	edd3 7a00 	vldr	s15, [r3]
 8001f28:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001f2c:	4b2d      	ldr	r3, [pc, #180]	@ (8001fe4 <NLLS+0xd8c>)
 8001f2e:	443b      	add	r3, r7
 8001f30:	ed93 5a00 	vldr	s10, [r3]
 8001f34:	4b28      	ldr	r3, [pc, #160]	@ (8001fd8 <NLLS+0xd80>)
 8001f36:	443b      	add	r3, r7
 8001f38:	edd3 7a00 	vldr	s15, [r3]
 8001f3c:	ee25 5a27 	vmul.f32	s10, s10, s15
 8001f40:	4b29      	ldr	r3, [pc, #164]	@ (8001fe8 <NLLS+0xd90>)
 8001f42:	443b      	add	r3, r7
 8001f44:	edd3 7a00 	vldr	s15, [r3]
 8001f48:	ee65 7a27 	vmul.f32	s15, s10, s15
 8001f4c:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001f50:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001f54:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc0 <NLLS+0xd68>)
 8001f56:	443b      	add	r3, r7
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8001f60:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8001f64:	6812      	ldr	r2, [r2, #0]
 8001f66:	4413      	add	r3, r2
 8001f68:	edd3 7a00 	vldr	s15, [r3]
 8001f6c:	4b19      	ldr	r3, [pc, #100]	@ (8001fd4 <NLLS+0xd7c>)
 8001f6e:	443b      	add	r3, r7
 8001f70:	edd3 5a00 	vldr	s11, [r3]
 8001f74:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001f78:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001f7c:	4b12      	ldr	r3, [pc, #72]	@ (8001fc8 <NLLS+0xd70>)
 8001f7e:	443b      	add	r3, r7
 8001f80:	edd3 5a00 	vldr	s11, [r3]
 8001f84:	4b11      	ldr	r3, [pc, #68]	@ (8001fcc <NLLS+0xd74>)
 8001f86:	443b      	add	r3, r7
 8001f88:	edd3 7a00 	vldr	s15, [r3]
 8001f8c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001f90:	4b11      	ldr	r3, [pc, #68]	@ (8001fd8 <NLLS+0xd80>)
 8001f92:	443b      	add	r3, r7
 8001f94:	edd3 7a00 	vldr	s15, [r3]
 8001f98:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001f9c:	4b08      	ldr	r3, [pc, #32]	@ (8001fc0 <NLLS+0xd68>)
 8001f9e:	443b      	add	r3, r7
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8001fa8:	f6a2 72ec 	subw	r2, r2, #4076	@ 0xfec
 8001fac:	6812      	ldr	r2, [r2, #0]
 8001fae:	4413      	add	r3, r2
 8001fb0:	edd3 7a00 	vldr	s15, [r3]
 8001fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8001fec <NLLS+0xd94>)
 8001fb6:	443b      	add	r3, r7
 8001fb8:	ed93 5a00 	vldr	s10, [r3]
 8001fbc:	e018      	b.n	8001ff0 <NLLS+0xd98>
 8001fbe:	bf00      	nop
 8001fc0:	00016fb8 	.word	0x00016fb8
 8001fc4:	00016fd8 	.word	0x00016fd8
 8001fc8:	00016fe8 	.word	0x00016fe8
 8001fcc:	00016fe4 	.word	0x00016fe4
 8001fd0:	00016f84 	.word	0x00016f84
 8001fd4:	00016fdc 	.word	0x00016fdc
 8001fd8:	00016f78 	.word	0x00016f78
 8001fdc:	00016fe0 	.word	0x00016fe0
 8001fe0:	00016f80 	.word	0x00016f80
 8001fe4:	00016f74 	.word	0x00016f74
 8001fe8:	00016f88 	.word	0x00016f88
 8001fec:	00016fd4 	.word	0x00016fd4
 8001ff0:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001ff4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ff8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ffc:	4bc0      	ldr	r3, [pc, #768]	@ (8002300 <NLLS+0x10a8>)
 8001ffe:	443b      	add	r3, r7
 8002000:	edd3 5a00 	vldr	s11, [r3]
 8002004:	4bbf      	ldr	r3, [pc, #764]	@ (8002304 <NLLS+0x10ac>)
 8002006:	443b      	add	r3, r7
 8002008:	edd3 7a00 	vldr	s15, [r3]
 800200c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002010:	4bbd      	ldr	r3, [pc, #756]	@ (8002308 <NLLS+0x10b0>)
 8002012:	443b      	add	r3, r7
 8002014:	edd3 7a00 	vldr	s15, [r3]
 8002018:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800201c:	4bbb      	ldr	r3, [pc, #748]	@ (800230c <NLLS+0x10b4>)
 800201e:	443b      	add	r3, r7
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8002028:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 800202c:	6812      	ldr	r2, [r2, #0]
 800202e:	4413      	add	r3, r2
 8002030:	edd3 7a00 	vldr	s15, [r3]
 8002034:	4bb6      	ldr	r3, [pc, #728]	@ (8002310 <NLLS+0x10b8>)
 8002036:	443b      	add	r3, r7
 8002038:	ed93 5a00 	vldr	s10, [r3]
 800203c:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002040:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002044:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002048:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800204c:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8002050:	4bab      	ldr	r3, [pc, #684]	@ (8002300 <NLLS+0x10a8>)
 8002052:	443b      	add	r3, r7
 8002054:	edd3 7a00 	vldr	s15, [r3]
 8002058:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800205c:	4ba8      	ldr	r3, [pc, #672]	@ (8002300 <NLLS+0x10a8>)
 800205e:	443b      	add	r3, r7
 8002060:	edd3 7a00 	vldr	s15, [r3]
 8002064:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002068:	4baa      	ldr	r3, [pc, #680]	@ (8002314 <NLLS+0x10bc>)
 800206a:	443b      	add	r3, r7
 800206c:	edd3 7a00 	vldr	s15, [r3]
 8002070:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002074:	4ba7      	ldr	r3, [pc, #668]	@ (8002314 <NLLS+0x10bc>)
 8002076:	443b      	add	r3, r7
 8002078:	edd3 7a00 	vldr	s15, [r3]
 800207c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002080:	4ba0      	ldr	r3, [pc, #640]	@ (8002304 <NLLS+0x10ac>)
 8002082:	443b      	add	r3, r7
 8002084:	edd3 7a00 	vldr	s15, [r3]
 8002088:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800208c:	4b9d      	ldr	r3, [pc, #628]	@ (8002304 <NLLS+0x10ac>)
 800208e:	443b      	add	r3, r7
 8002090:	edd3 7a00 	vldr	s15, [r3]
 8002094:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002098:	4b9f      	ldr	r3, [pc, #636]	@ (8002318 <NLLS+0x10c0>)
 800209a:	443b      	add	r3, r7
 800209c:	edd3 7a00 	vldr	s15, [r3]
 80020a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020a4:	4b9c      	ldr	r3, [pc, #624]	@ (8002318 <NLLS+0x10c0>)
 80020a6:	443b      	add	r3, r7
 80020a8:	edd3 7a00 	vldr	s15, [r3]
 80020ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020b0:	4b9a      	ldr	r3, [pc, #616]	@ (800231c <NLLS+0x10c4>)
 80020b2:	443b      	add	r3, r7
 80020b4:	edd3 7a00 	vldr	s15, [r3]
 80020b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020bc:	4b97      	ldr	r3, [pc, #604]	@ (800231c <NLLS+0x10c4>)
 80020be:	443b      	add	r3, r7
 80020c0:	edd3 7a00 	vldr	s15, [r3]
 80020c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020c8:	4b95      	ldr	r3, [pc, #596]	@ (8002320 <NLLS+0x10c8>)
 80020ca:	443b      	add	r3, r7
 80020cc:	edd3 7a00 	vldr	s15, [r3]
 80020d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020d4:	4b92      	ldr	r3, [pc, #584]	@ (8002320 <NLLS+0x10c8>)
 80020d6:	443b      	add	r3, r7
 80020d8:	edd3 7a00 	vldr	s15, [r3]
 80020dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020e0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80020e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020e8:	4b8a      	ldr	r3, [pc, #552]	@ (8002314 <NLLS+0x10bc>)
 80020ea:	443b      	add	r3, r7
 80020ec:	edd3 6a00 	vldr	s13, [r3]
 80020f0:	4b8b      	ldr	r3, [pc, #556]	@ (8002320 <NLLS+0x10c8>)
 80020f2:	443b      	add	r3, r7
 80020f4:	edd3 7a00 	vldr	s15, [r3]
 80020f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020fc:	4b83      	ldr	r3, [pc, #524]	@ (800230c <NLLS+0x10b4>)
 80020fe:	443b      	add	r3, r7
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8002108:	f6a2 72ec 	subw	r2, r2, #4076	@ 0xfec
 800210c:	6812      	ldr	r2, [r2, #0]
 800210e:	4413      	add	r3, r2
 8002110:	edd3 7a00 	vldr	s15, [r3]
 8002114:	4b83      	ldr	r3, [pc, #524]	@ (8002324 <NLLS+0x10cc>)
 8002116:	443b      	add	r3, r7
 8002118:	ed93 6a00 	vldr	s12, [r3]
 800211c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002120:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002124:	4b77      	ldr	r3, [pc, #476]	@ (8002304 <NLLS+0x10ac>)
 8002126:	443b      	add	r3, r7
 8002128:	ed93 6a00 	vldr	s12, [r3]
 800212c:	4b76      	ldr	r3, [pc, #472]	@ (8002308 <NLLS+0x10b0>)
 800212e:	443b      	add	r3, r7
 8002130:	edd3 7a00 	vldr	s15, [r3]
 8002134:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002138:	4b74      	ldr	r3, [pc, #464]	@ (800230c <NLLS+0x10b4>)
 800213a:	443b      	add	r3, r7
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8002144:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 8002148:	6812      	ldr	r2, [r2, #0]
 800214a:	4413      	add	r3, r2
 800214c:	edd3 7a00 	vldr	s15, [r3]
 8002150:	4b6f      	ldr	r3, [pc, #444]	@ (8002310 <NLLS+0x10b8>)
 8002152:	443b      	add	r3, r7
 8002154:	edd3 5a00 	vldr	s11, [r3]
 8002158:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800215c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002160:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002164:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002168:	4b6a      	ldr	r3, [pc, #424]	@ (8002314 <NLLS+0x10bc>)
 800216a:	443b      	add	r3, r7
 800216c:	ed93 6a00 	vldr	s12, [r3]
 8002170:	4b64      	ldr	r3, [pc, #400]	@ (8002304 <NLLS+0x10ac>)
 8002172:	443b      	add	r3, r7
 8002174:	edd3 7a00 	vldr	s15, [r3]
 8002178:	ee26 6a27 	vmul.f32	s12, s12, s15
 800217c:	4b62      	ldr	r3, [pc, #392]	@ (8002308 <NLLS+0x10b0>)
 800217e:	443b      	add	r3, r7
 8002180:	edd3 5a00 	vldr	s11, [r3]
 8002184:	4b68      	ldr	r3, [pc, #416]	@ (8002328 <NLLS+0x10d0>)
 8002186:	443b      	add	r3, r7
 8002188:	edd3 7a00 	vldr	s15, [r3]
 800218c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002190:	4b61      	ldr	r3, [pc, #388]	@ (8002318 <NLLS+0x10c0>)
 8002192:	443b      	add	r3, r7
 8002194:	ed93 5a00 	vldr	s10, [r3]
 8002198:	4b61      	ldr	r3, [pc, #388]	@ (8002320 <NLLS+0x10c8>)
 800219a:	443b      	add	r3, r7
 800219c:	edd3 7a00 	vldr	s15, [r3]
 80021a0:	ee25 5a27 	vmul.f32	s10, s10, s15
 80021a4:	4b61      	ldr	r3, [pc, #388]	@ (800232c <NLLS+0x10d4>)
 80021a6:	443b      	add	r3, r7
 80021a8:	edd3 7a00 	vldr	s15, [r3]
 80021ac:	ee65 7a27 	vmul.f32	s15, s10, s15
 80021b0:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80021b4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80021b8:	4b54      	ldr	r3, [pc, #336]	@ (800230c <NLLS+0x10b4>)
 80021ba:	443b      	add	r3, r7
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 80021c4:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 80021c8:	6812      	ldr	r2, [r2, #0]
 80021ca:	4413      	add	r3, r2
 80021cc:	edd3 7a00 	vldr	s15, [r3]
 80021d0:	4b57      	ldr	r3, [pc, #348]	@ (8002330 <NLLS+0x10d8>)
 80021d2:	443b      	add	r3, r7
 80021d4:	edd3 5a00 	vldr	s11, [r3]
 80021d8:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80021dc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80021e0:	4b47      	ldr	r3, [pc, #284]	@ (8002300 <NLLS+0x10a8>)
 80021e2:	443b      	add	r3, r7
 80021e4:	edd3 5a00 	vldr	s11, [r3]
 80021e8:	4b4a      	ldr	r3, [pc, #296]	@ (8002314 <NLLS+0x10bc>)
 80021ea:	443b      	add	r3, r7
 80021ec:	edd3 7a00 	vldr	s15, [r3]
 80021f0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80021f4:	4b4a      	ldr	r3, [pc, #296]	@ (8002320 <NLLS+0x10c8>)
 80021f6:	443b      	add	r3, r7
 80021f8:	edd3 7a00 	vldr	s15, [r3]
 80021fc:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002200:	4b42      	ldr	r3, [pc, #264]	@ (800230c <NLLS+0x10b4>)
 8002202:	443b      	add	r3, r7
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 800220c:	f6a2 72ec 	subw	r2, r2, #4076	@ 0xfec
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	4413      	add	r3, r2
 8002214:	edd3 7a00 	vldr	s15, [r3]
 8002218:	4b42      	ldr	r3, [pc, #264]	@ (8002324 <NLLS+0x10cc>)
 800221a:	443b      	add	r3, r7
 800221c:	ed93 5a00 	vldr	s10, [r3]
 8002220:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002224:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002228:	ee36 6a27 	vadd.f32	s12, s12, s15
 800222c:	4b34      	ldr	r3, [pc, #208]	@ (8002300 <NLLS+0x10a8>)
 800222e:	443b      	add	r3, r7
 8002230:	edd3 5a00 	vldr	s11, [r3]
 8002234:	4b33      	ldr	r3, [pc, #204]	@ (8002304 <NLLS+0x10ac>)
 8002236:	443b      	add	r3, r7
 8002238:	edd3 7a00 	vldr	s15, [r3]
 800223c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002240:	4b31      	ldr	r3, [pc, #196]	@ (8002308 <NLLS+0x10b0>)
 8002242:	443b      	add	r3, r7
 8002244:	edd3 7a00 	vldr	s15, [r3]
 8002248:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800224c:	4b2f      	ldr	r3, [pc, #188]	@ (800230c <NLLS+0x10b4>)
 800224e:	443b      	add	r3, r7
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8002258:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 800225c:	6812      	ldr	r2, [r2, #0]
 800225e:	4413      	add	r3, r2
 8002260:	edd3 7a00 	vldr	s15, [r3]
 8002264:	4b2a      	ldr	r3, [pc, #168]	@ (8002310 <NLLS+0x10b8>)
 8002266:	443b      	add	r3, r7
 8002268:	ed93 5a00 	vldr	s10, [r3]
 800226c:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002270:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002274:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002278:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800227c:	4b20      	ldr	r3, [pc, #128]	@ (8002300 <NLLS+0x10a8>)
 800227e:	443b      	add	r3, r7
 8002280:	edd3 7a00 	vldr	s15, [r3]
 8002284:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002288:	4b22      	ldr	r3, [pc, #136]	@ (8002314 <NLLS+0x10bc>)
 800228a:	443b      	add	r3, r7
 800228c:	edd3 7a00 	vldr	s15, [r3]
 8002290:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002294:	4b1f      	ldr	r3, [pc, #124]	@ (8002314 <NLLS+0x10bc>)
 8002296:	443b      	add	r3, r7
 8002298:	edd3 7a00 	vldr	s15, [r3]
 800229c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022a0:	4b18      	ldr	r3, [pc, #96]	@ (8002304 <NLLS+0x10ac>)
 80022a2:	443b      	add	r3, r7
 80022a4:	edd3 7a00 	vldr	s15, [r3]
 80022a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022ac:	4b15      	ldr	r3, [pc, #84]	@ (8002304 <NLLS+0x10ac>)
 80022ae:	443b      	add	r3, r7
 80022b0:	edd3 7a00 	vldr	s15, [r3]
 80022b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022b8:	4b17      	ldr	r3, [pc, #92]	@ (8002318 <NLLS+0x10c0>)
 80022ba:	443b      	add	r3, r7
 80022bc:	edd3 7a00 	vldr	s15, [r3]
 80022c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022c4:	4b14      	ldr	r3, [pc, #80]	@ (8002318 <NLLS+0x10c0>)
 80022c6:	443b      	add	r3, r7
 80022c8:	edd3 7a00 	vldr	s15, [r3]
 80022cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022d0:	4b12      	ldr	r3, [pc, #72]	@ (800231c <NLLS+0x10c4>)
 80022d2:	443b      	add	r3, r7
 80022d4:	edd3 7a00 	vldr	s15, [r3]
 80022d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022dc:	4b0f      	ldr	r3, [pc, #60]	@ (800231c <NLLS+0x10c4>)
 80022de:	443b      	add	r3, r7
 80022e0:	edd3 7a00 	vldr	s15, [r3]
 80022e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002320 <NLLS+0x10c8>)
 80022ea:	443b      	add	r3, r7
 80022ec:	edd3 7a00 	vldr	s15, [r3]
 80022f0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002320 <NLLS+0x10c8>)
 80022f6:	443b      	add	r3, r7
 80022f8:	edd3 7a00 	vldr	s15, [r3]
 80022fc:	e01a      	b.n	8002334 <NLLS+0x10dc>
 80022fe:	bf00      	nop
 8002300:	00016fe8 	.word	0x00016fe8
 8002304:	00016fe0 	.word	0x00016fe0
 8002308:	00016f80 	.word	0x00016f80
 800230c:	00016fb8 	.word	0x00016fb8
 8002310:	00016fd8 	.word	0x00016fd8
 8002314:	00016fe4 	.word	0x00016fe4
 8002318:	00016f74 	.word	0x00016f74
 800231c:	00016f7c 	.word	0x00016f7c
 8002320:	00016f78 	.word	0x00016f78
 8002324:	00016fd4 	.word	0x00016fd4
 8002328:	00016f84 	.word	0x00016f84
 800232c:	00016f88 	.word	0x00016f88
 8002330:	00016fdc 	.word	0x00016fdc
 8002334:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002338:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800233c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002340:	f649 73f0 	movw	r3, #40944	@ 0x9ff0
 8002344:	443b      	add	r3, r7
 8002346:	461a      	mov	r2, r3
 8002348:	4bbe      	ldr	r3, [pc, #760]	@ (8002644 <NLLS+0x13ec>)
 800234a:	443b      	add	r3, r7
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	3bf4      	subs	r3, #244	@ 0xf4
 8002354:	edc3 7a00 	vstr	s15, [r3]

			mat_H[1][i] = -(2*(by - my[i])*(by*sx*sz*sin_lambda*sin_lambda - my[i]*sx*sz*sin_lambda*sin_lambda + by*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - my[i]*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - bz*sx*sy*cos_rho*sin_lambda + mz[i]*sx*sy*cos_rho*sin_lambda - bx*sy*sz*sin_lambda*sin_lambda*sin_rho + mx[i]*sy*sz*sin_lambda*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + mx[i]*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + bx*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi - mx[i]*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi))/(sx*(sy*sy*sy)*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8002358:	4bba      	ldr	r3, [pc, #744]	@ (8002644 <NLLS+0x13ec>)
 800235a:	443b      	add	r3, r7
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8002364:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 8002368:	6812      	ldr	r2, [r2, #0]
 800236a:	4413      	add	r3, r2
 800236c:	edd3 7a00 	vldr	s15, [r3]
 8002370:	4bb5      	ldr	r3, [pc, #724]	@ (8002648 <NLLS+0x13f0>)
 8002372:	443b      	add	r3, r7
 8002374:	ed93 7a00 	vldr	s14, [r3]
 8002378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800237c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002380:	4bb1      	ldr	r3, [pc, #708]	@ (8002648 <NLLS+0x13f0>)
 8002382:	443b      	add	r3, r7
 8002384:	edd3 6a00 	vldr	s13, [r3]
 8002388:	4bb0      	ldr	r3, [pc, #704]	@ (800264c <NLLS+0x13f4>)
 800238a:	443b      	add	r3, r7
 800238c:	edd3 7a00 	vldr	s15, [r3]
 8002390:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002394:	4bae      	ldr	r3, [pc, #696]	@ (8002650 <NLLS+0x13f8>)
 8002396:	443b      	add	r3, r7
 8002398:	edd3 7a00 	vldr	s15, [r3]
 800239c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80023a0:	4bac      	ldr	r3, [pc, #688]	@ (8002654 <NLLS+0x13fc>)
 80023a2:	443b      	add	r3, r7
 80023a4:	edd3 7a00 	vldr	s15, [r3]
 80023a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80023ac:	4ba9      	ldr	r3, [pc, #676]	@ (8002654 <NLLS+0x13fc>)
 80023ae:	443b      	add	r3, r7
 80023b0:	edd3 7a00 	vldr	s15, [r3]
 80023b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80023b8:	4ba2      	ldr	r3, [pc, #648]	@ (8002644 <NLLS+0x13ec>)
 80023ba:	443b      	add	r3, r7
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 80023c4:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 80023c8:	6812      	ldr	r2, [r2, #0]
 80023ca:	4413      	add	r3, r2
 80023cc:	ed93 6a00 	vldr	s12, [r3]
 80023d0:	4b9e      	ldr	r3, [pc, #632]	@ (800264c <NLLS+0x13f4>)
 80023d2:	443b      	add	r3, r7
 80023d4:	edd3 7a00 	vldr	s15, [r3]
 80023d8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023dc:	4b9c      	ldr	r3, [pc, #624]	@ (8002650 <NLLS+0x13f8>)
 80023de:	443b      	add	r3, r7
 80023e0:	edd3 7a00 	vldr	s15, [r3]
 80023e4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023e8:	4b9a      	ldr	r3, [pc, #616]	@ (8002654 <NLLS+0x13fc>)
 80023ea:	443b      	add	r3, r7
 80023ec:	edd3 7a00 	vldr	s15, [r3]
 80023f0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023f4:	4b97      	ldr	r3, [pc, #604]	@ (8002654 <NLLS+0x13fc>)
 80023f6:	443b      	add	r3, r7
 80023f8:	edd3 7a00 	vldr	s15, [r3]
 80023fc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002400:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002404:	4b90      	ldr	r3, [pc, #576]	@ (8002648 <NLLS+0x13f0>)
 8002406:	443b      	add	r3, r7
 8002408:	ed93 6a00 	vldr	s12, [r3]
 800240c:	4b8f      	ldr	r3, [pc, #572]	@ (800264c <NLLS+0x13f4>)
 800240e:	443b      	add	r3, r7
 8002410:	edd3 7a00 	vldr	s15, [r3]
 8002414:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002418:	4b8d      	ldr	r3, [pc, #564]	@ (8002650 <NLLS+0x13f8>)
 800241a:	443b      	add	r3, r7
 800241c:	edd3 7a00 	vldr	s15, [r3]
 8002420:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002424:	4b8c      	ldr	r3, [pc, #560]	@ (8002658 <NLLS+0x1400>)
 8002426:	443b      	add	r3, r7
 8002428:	edd3 7a00 	vldr	s15, [r3]
 800242c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002430:	4b89      	ldr	r3, [pc, #548]	@ (8002658 <NLLS+0x1400>)
 8002432:	443b      	add	r3, r7
 8002434:	edd3 7a00 	vldr	s15, [r3]
 8002438:	ee26 6a27 	vmul.f32	s12, s12, s15
 800243c:	4b87      	ldr	r3, [pc, #540]	@ (800265c <NLLS+0x1404>)
 800243e:	443b      	add	r3, r7
 8002440:	edd3 7a00 	vldr	s15, [r3]
 8002444:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002448:	4b84      	ldr	r3, [pc, #528]	@ (800265c <NLLS+0x1404>)
 800244a:	443b      	add	r3, r7
 800244c:	edd3 7a00 	vldr	s15, [r3]
 8002450:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002454:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002458:	4b7a      	ldr	r3, [pc, #488]	@ (8002644 <NLLS+0x13ec>)
 800245a:	443b      	add	r3, r7
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8002464:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 8002468:	6812      	ldr	r2, [r2, #0]
 800246a:	4413      	add	r3, r2
 800246c:	ed93 6a00 	vldr	s12, [r3]
 8002470:	4b76      	ldr	r3, [pc, #472]	@ (800264c <NLLS+0x13f4>)
 8002472:	443b      	add	r3, r7
 8002474:	edd3 7a00 	vldr	s15, [r3]
 8002478:	ee26 6a27 	vmul.f32	s12, s12, s15
 800247c:	4b74      	ldr	r3, [pc, #464]	@ (8002650 <NLLS+0x13f8>)
 800247e:	443b      	add	r3, r7
 8002480:	edd3 7a00 	vldr	s15, [r3]
 8002484:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002488:	4b73      	ldr	r3, [pc, #460]	@ (8002658 <NLLS+0x1400>)
 800248a:	443b      	add	r3, r7
 800248c:	edd3 7a00 	vldr	s15, [r3]
 8002490:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002494:	4b70      	ldr	r3, [pc, #448]	@ (8002658 <NLLS+0x1400>)
 8002496:	443b      	add	r3, r7
 8002498:	edd3 7a00 	vldr	s15, [r3]
 800249c:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024a0:	4b6e      	ldr	r3, [pc, #440]	@ (800265c <NLLS+0x1404>)
 80024a2:	443b      	add	r3, r7
 80024a4:	edd3 7a00 	vldr	s15, [r3]
 80024a8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024ac:	4b6b      	ldr	r3, [pc, #428]	@ (800265c <NLLS+0x1404>)
 80024ae:	443b      	add	r3, r7
 80024b0:	edd3 7a00 	vldr	s15, [r3]
 80024b4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80024b8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80024bc:	4b68      	ldr	r3, [pc, #416]	@ (8002660 <NLLS+0x1408>)
 80024be:	443b      	add	r3, r7
 80024c0:	ed93 6a00 	vldr	s12, [r3]
 80024c4:	4b61      	ldr	r3, [pc, #388]	@ (800264c <NLLS+0x13f4>)
 80024c6:	443b      	add	r3, r7
 80024c8:	edd3 7a00 	vldr	s15, [r3]
 80024cc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024d0:	4b64      	ldr	r3, [pc, #400]	@ (8002664 <NLLS+0x140c>)
 80024d2:	443b      	add	r3, r7
 80024d4:	edd3 7a00 	vldr	s15, [r3]
 80024d8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024dc:	4b62      	ldr	r3, [pc, #392]	@ (8002668 <NLLS+0x1410>)
 80024de:	443b      	add	r3, r7
 80024e0:	edd3 7a00 	vldr	s15, [r3]
 80024e4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024e8:	4b5a      	ldr	r3, [pc, #360]	@ (8002654 <NLLS+0x13fc>)
 80024ea:	443b      	add	r3, r7
 80024ec:	edd3 7a00 	vldr	s15, [r3]
 80024f0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80024f4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80024f8:	4b52      	ldr	r3, [pc, #328]	@ (8002644 <NLLS+0x13ec>)
 80024fa:	443b      	add	r3, r7
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8002504:	f6a2 72ec 	subw	r2, r2, #4076	@ 0xfec
 8002508:	6812      	ldr	r2, [r2, #0]
 800250a:	4413      	add	r3, r2
 800250c:	ed93 6a00 	vldr	s12, [r3]
 8002510:	4b4e      	ldr	r3, [pc, #312]	@ (800264c <NLLS+0x13f4>)
 8002512:	443b      	add	r3, r7
 8002514:	edd3 7a00 	vldr	s15, [r3]
 8002518:	ee26 6a27 	vmul.f32	s12, s12, s15
 800251c:	4b51      	ldr	r3, [pc, #324]	@ (8002664 <NLLS+0x140c>)
 800251e:	443b      	add	r3, r7
 8002520:	edd3 7a00 	vldr	s15, [r3]
 8002524:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002528:	4b4f      	ldr	r3, [pc, #316]	@ (8002668 <NLLS+0x1410>)
 800252a:	443b      	add	r3, r7
 800252c:	edd3 7a00 	vldr	s15, [r3]
 8002530:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002534:	4b47      	ldr	r3, [pc, #284]	@ (8002654 <NLLS+0x13fc>)
 8002536:	443b      	add	r3, r7
 8002538:	edd3 7a00 	vldr	s15, [r3]
 800253c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002540:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002544:	4b49      	ldr	r3, [pc, #292]	@ (800266c <NLLS+0x1414>)
 8002546:	443b      	add	r3, r7
 8002548:	ed93 6a00 	vldr	s12, [r3]
 800254c:	4b45      	ldr	r3, [pc, #276]	@ (8002664 <NLLS+0x140c>)
 800254e:	443b      	add	r3, r7
 8002550:	edd3 7a00 	vldr	s15, [r3]
 8002554:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002558:	4b3d      	ldr	r3, [pc, #244]	@ (8002650 <NLLS+0x13f8>)
 800255a:	443b      	add	r3, r7
 800255c:	edd3 7a00 	vldr	s15, [r3]
 8002560:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002564:	4b3b      	ldr	r3, [pc, #236]	@ (8002654 <NLLS+0x13fc>)
 8002566:	443b      	add	r3, r7
 8002568:	edd3 7a00 	vldr	s15, [r3]
 800256c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002570:	4b38      	ldr	r3, [pc, #224]	@ (8002654 <NLLS+0x13fc>)
 8002572:	443b      	add	r3, r7
 8002574:	edd3 7a00 	vldr	s15, [r3]
 8002578:	ee26 6a27 	vmul.f32	s12, s12, s15
 800257c:	4b3c      	ldr	r3, [pc, #240]	@ (8002670 <NLLS+0x1418>)
 800257e:	443b      	add	r3, r7
 8002580:	edd3 7a00 	vldr	s15, [r3]
 8002584:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002588:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800258c:	4b2d      	ldr	r3, [pc, #180]	@ (8002644 <NLLS+0x13ec>)
 800258e:	443b      	add	r3, r7
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8002598:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 800259c:	6812      	ldr	r2, [r2, #0]
 800259e:	4413      	add	r3, r2
 80025a0:	ed93 6a00 	vldr	s12, [r3]
 80025a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002664 <NLLS+0x140c>)
 80025a6:	443b      	add	r3, r7
 80025a8:	edd3 7a00 	vldr	s15, [r3]
 80025ac:	ee26 6a27 	vmul.f32	s12, s12, s15
 80025b0:	4b27      	ldr	r3, [pc, #156]	@ (8002650 <NLLS+0x13f8>)
 80025b2:	443b      	add	r3, r7
 80025b4:	edd3 7a00 	vldr	s15, [r3]
 80025b8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80025bc:	4b25      	ldr	r3, [pc, #148]	@ (8002654 <NLLS+0x13fc>)
 80025be:	443b      	add	r3, r7
 80025c0:	edd3 7a00 	vldr	s15, [r3]
 80025c4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80025c8:	4b22      	ldr	r3, [pc, #136]	@ (8002654 <NLLS+0x13fc>)
 80025ca:	443b      	add	r3, r7
 80025cc:	edd3 7a00 	vldr	s15, [r3]
 80025d0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80025d4:	4b26      	ldr	r3, [pc, #152]	@ (8002670 <NLLS+0x1418>)
 80025d6:	443b      	add	r3, r7
 80025d8:	edd3 7a00 	vldr	s15, [r3]
 80025dc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80025e0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80025e4:	4b21      	ldr	r3, [pc, #132]	@ (800266c <NLLS+0x1414>)
 80025e6:	443b      	add	r3, r7
 80025e8:	ed93 6a00 	vldr	s12, [r3]
 80025ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002664 <NLLS+0x140c>)
 80025ee:	443b      	add	r3, r7
 80025f0:	edd3 7a00 	vldr	s15, [r3]
 80025f4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80025f8:	4b15      	ldr	r3, [pc, #84]	@ (8002650 <NLLS+0x13f8>)
 80025fa:	443b      	add	r3, r7
 80025fc:	edd3 7a00 	vldr	s15, [r3]
 8002600:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002604:	4b14      	ldr	r3, [pc, #80]	@ (8002658 <NLLS+0x1400>)
 8002606:	443b      	add	r3, r7
 8002608:	edd3 7a00 	vldr	s15, [r3]
 800260c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002610:	4b11      	ldr	r3, [pc, #68]	@ (8002658 <NLLS+0x1400>)
 8002612:	443b      	add	r3, r7
 8002614:	edd3 7a00 	vldr	s15, [r3]
 8002618:	ee26 6a27 	vmul.f32	s12, s12, s15
 800261c:	4b0f      	ldr	r3, [pc, #60]	@ (800265c <NLLS+0x1404>)
 800261e:	443b      	add	r3, r7
 8002620:	edd3 7a00 	vldr	s15, [r3]
 8002624:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002628:	4b0c      	ldr	r3, [pc, #48]	@ (800265c <NLLS+0x1404>)
 800262a:	443b      	add	r3, r7
 800262c:	edd3 7a00 	vldr	s15, [r3]
 8002630:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002634:	4b0e      	ldr	r3, [pc, #56]	@ (8002670 <NLLS+0x1418>)
 8002636:	443b      	add	r3, r7
 8002638:	edd3 7a00 	vldr	s15, [r3]
 800263c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002640:	e018      	b.n	8002674 <NLLS+0x141c>
 8002642:	bf00      	nop
 8002644:	00016fb8 	.word	0x00016fb8
 8002648:	00016fd8 	.word	0x00016fd8
 800264c:	00016fe8 	.word	0x00016fe8
 8002650:	00016fe0 	.word	0x00016fe0
 8002654:	00016f80 	.word	0x00016f80
 8002658:	00016f74 	.word	0x00016f74
 800265c:	00016f7c 	.word	0x00016f7c
 8002660:	00016fd4 	.word	0x00016fd4
 8002664:	00016fe4 	.word	0x00016fe4
 8002668:	00016f78 	.word	0x00016f78
 800266c:	00016fdc 	.word	0x00016fdc
 8002670:	00016f84 	.word	0x00016f84
 8002674:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002678:	4bbf      	ldr	r3, [pc, #764]	@ (8002978 <NLLS+0x1720>)
 800267a:	443b      	add	r3, r7
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8002684:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	4413      	add	r3, r2
 800268c:	ed93 6a00 	vldr	s12, [r3]
 8002690:	4bba      	ldr	r3, [pc, #744]	@ (800297c <NLLS+0x1724>)
 8002692:	443b      	add	r3, r7
 8002694:	edd3 7a00 	vldr	s15, [r3]
 8002698:	ee26 6a27 	vmul.f32	s12, s12, s15
 800269c:	4bb8      	ldr	r3, [pc, #736]	@ (8002980 <NLLS+0x1728>)
 800269e:	443b      	add	r3, r7
 80026a0:	edd3 7a00 	vldr	s15, [r3]
 80026a4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80026a8:	4bb6      	ldr	r3, [pc, #728]	@ (8002984 <NLLS+0x172c>)
 80026aa:	443b      	add	r3, r7
 80026ac:	edd3 7a00 	vldr	s15, [r3]
 80026b0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80026b4:	4bb3      	ldr	r3, [pc, #716]	@ (8002984 <NLLS+0x172c>)
 80026b6:	443b      	add	r3, r7
 80026b8:	edd3 7a00 	vldr	s15, [r3]
 80026bc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80026c0:	4bb1      	ldr	r3, [pc, #708]	@ (8002988 <NLLS+0x1730>)
 80026c2:	443b      	add	r3, r7
 80026c4:	edd3 7a00 	vldr	s15, [r3]
 80026c8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80026cc:	4bae      	ldr	r3, [pc, #696]	@ (8002988 <NLLS+0x1730>)
 80026ce:	443b      	add	r3, r7
 80026d0:	edd3 7a00 	vldr	s15, [r3]
 80026d4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80026d8:	4bac      	ldr	r3, [pc, #688]	@ (800298c <NLLS+0x1734>)
 80026da:	443b      	add	r3, r7
 80026dc:	edd3 7a00 	vldr	s15, [r3]
 80026e0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80026e4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80026e8:	4ba9      	ldr	r3, [pc, #676]	@ (8002990 <NLLS+0x1738>)
 80026ea:	443b      	add	r3, r7
 80026ec:	ed93 6a00 	vldr	s12, [r3]
 80026f0:	4ba2      	ldr	r3, [pc, #648]	@ (800297c <NLLS+0x1724>)
 80026f2:	443b      	add	r3, r7
 80026f4:	edd3 7a00 	vldr	s15, [r3]
 80026f8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80026fc:	4ba0      	ldr	r3, [pc, #640]	@ (8002980 <NLLS+0x1728>)
 80026fe:	443b      	add	r3, r7
 8002700:	edd3 7a00 	vldr	s15, [r3]
 8002704:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002708:	4b9e      	ldr	r3, [pc, #632]	@ (8002984 <NLLS+0x172c>)
 800270a:	443b      	add	r3, r7
 800270c:	edd3 7a00 	vldr	s15, [r3]
 8002710:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002714:	4b9f      	ldr	r3, [pc, #636]	@ (8002994 <NLLS+0x173c>)
 8002716:	443b      	add	r3, r7
 8002718:	edd3 7a00 	vldr	s15, [r3]
 800271c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002720:	4b9d      	ldr	r3, [pc, #628]	@ (8002998 <NLLS+0x1740>)
 8002722:	443b      	add	r3, r7
 8002724:	edd3 7a00 	vldr	s15, [r3]
 8002728:	ee26 6a27 	vmul.f32	s12, s12, s15
 800272c:	4b9b      	ldr	r3, [pc, #620]	@ (800299c <NLLS+0x1744>)
 800272e:	443b      	add	r3, r7
 8002730:	edd3 7a00 	vldr	s15, [r3]
 8002734:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002738:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800273c:	4b8e      	ldr	r3, [pc, #568]	@ (8002978 <NLLS+0x1720>)
 800273e:	443b      	add	r3, r7
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8002748:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 800274c:	6812      	ldr	r2, [r2, #0]
 800274e:	4413      	add	r3, r2
 8002750:	ed93 6a00 	vldr	s12, [r3]
 8002754:	4b89      	ldr	r3, [pc, #548]	@ (800297c <NLLS+0x1724>)
 8002756:	443b      	add	r3, r7
 8002758:	edd3 7a00 	vldr	s15, [r3]
 800275c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002760:	4b87      	ldr	r3, [pc, #540]	@ (8002980 <NLLS+0x1728>)
 8002762:	443b      	add	r3, r7
 8002764:	edd3 7a00 	vldr	s15, [r3]
 8002768:	ee26 6a27 	vmul.f32	s12, s12, s15
 800276c:	4b85      	ldr	r3, [pc, #532]	@ (8002984 <NLLS+0x172c>)
 800276e:	443b      	add	r3, r7
 8002770:	edd3 7a00 	vldr	s15, [r3]
 8002774:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002778:	4b86      	ldr	r3, [pc, #536]	@ (8002994 <NLLS+0x173c>)
 800277a:	443b      	add	r3, r7
 800277c:	edd3 7a00 	vldr	s15, [r3]
 8002780:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002784:	4b84      	ldr	r3, [pc, #528]	@ (8002998 <NLLS+0x1740>)
 8002786:	443b      	add	r3, r7
 8002788:	edd3 7a00 	vldr	s15, [r3]
 800278c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002790:	4b82      	ldr	r3, [pc, #520]	@ (800299c <NLLS+0x1744>)
 8002792:	443b      	add	r3, r7
 8002794:	edd3 7a00 	vldr	s15, [r3]
 8002798:	ee66 7a27 	vmul.f32	s15, s12, s15
 800279c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80027a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a4:	eef1 6a67 	vneg.f32	s13, s15
 80027a8:	4b74      	ldr	r3, [pc, #464]	@ (800297c <NLLS+0x1724>)
 80027aa:	443b      	add	r3, r7
 80027ac:	edd3 7a00 	vldr	s15, [r3]
 80027b0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80027b4:	4b71      	ldr	r3, [pc, #452]	@ (800297c <NLLS+0x1724>)
 80027b6:	443b      	add	r3, r7
 80027b8:	edd3 7a00 	vldr	s15, [r3]
 80027bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027c0:	4b77      	ldr	r3, [pc, #476]	@ (80029a0 <NLLS+0x1748>)
 80027c2:	443b      	add	r3, r7
 80027c4:	edd3 7a00 	vldr	s15, [r3]
 80027c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027cc:	4b6c      	ldr	r3, [pc, #432]	@ (8002980 <NLLS+0x1728>)
 80027ce:	443b      	add	r3, r7
 80027d0:	edd3 7a00 	vldr	s15, [r3]
 80027d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027d8:	4b6a      	ldr	r3, [pc, #424]	@ (8002984 <NLLS+0x172c>)
 80027da:	443b      	add	r3, r7
 80027dc:	edd3 7a00 	vldr	s15, [r3]
 80027e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027e4:	4b67      	ldr	r3, [pc, #412]	@ (8002984 <NLLS+0x172c>)
 80027e6:	443b      	add	r3, r7
 80027e8:	edd3 7a00 	vldr	s15, [r3]
 80027ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027f0:	4b65      	ldr	r3, [pc, #404]	@ (8002988 <NLLS+0x1730>)
 80027f2:	443b      	add	r3, r7
 80027f4:	edd3 7a00 	vldr	s15, [r3]
 80027f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027fc:	4b62      	ldr	r3, [pc, #392]	@ (8002988 <NLLS+0x1730>)
 80027fe:	443b      	add	r3, r7
 8002800:	edd3 7a00 	vldr	s15, [r3]
 8002804:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002808:	4b62      	ldr	r3, [pc, #392]	@ (8002994 <NLLS+0x173c>)
 800280a:	443b      	add	r3, r7
 800280c:	edd3 7a00 	vldr	s15, [r3]
 8002810:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002814:	4b5f      	ldr	r3, [pc, #380]	@ (8002994 <NLLS+0x173c>)
 8002816:	443b      	add	r3, r7
 8002818:	edd3 7a00 	vldr	s15, [r3]
 800281c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002820:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002824:	f649 73f0 	movw	r3, #40944	@ 0x9ff0
 8002828:	443b      	add	r3, r7
 800282a:	461a      	mov	r2, r3
 800282c:	4b52      	ldr	r3, [pc, #328]	@ (8002978 <NLLS+0x1720>)
 800282e:	443b      	add	r3, r7
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f203 4357 	addw	r3, r3, #1111	@ 0x457
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	3bf4      	subs	r3, #244	@ 0xf4
 800283c:	edc3 7a00 	vstr	s15, [r3]

			mat_H[2][i] = -(2*(bz - mz[i])*(bz*sx*sy*cos_rho - by*sx*sz*sin_lambda - mz[i]*sx*sy*cos_rho + my[i]*sx*sz*sin_lambda + bx*sy*sz*sin_lambda*sin_rho - mx[i]*sy*sz*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_rho*sin_phi + mx[i]*sy*sz*cos_lambda*cos_rho*sin_phi))/(sx*sy*(sz*sz*sz)*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho);
 8002840:	4b4d      	ldr	r3, [pc, #308]	@ (8002978 <NLLS+0x1720>)
 8002842:	443b      	add	r3, r7
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 800284c:	f6a2 72ec 	subw	r2, r2, #4076	@ 0xfec
 8002850:	6812      	ldr	r2, [r2, #0]
 8002852:	4413      	add	r3, r2
 8002854:	edd3 7a00 	vldr	s15, [r3]
 8002858:	4b52      	ldr	r3, [pc, #328]	@ (80029a4 <NLLS+0x174c>)
 800285a:	443b      	add	r3, r7
 800285c:	ed93 7a00 	vldr	s14, [r3]
 8002860:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002864:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002868:	4b4e      	ldr	r3, [pc, #312]	@ (80029a4 <NLLS+0x174c>)
 800286a:	443b      	add	r3, r7
 800286c:	edd3 6a00 	vldr	s13, [r3]
 8002870:	4b4b      	ldr	r3, [pc, #300]	@ (80029a0 <NLLS+0x1748>)
 8002872:	443b      	add	r3, r7
 8002874:	edd3 7a00 	vldr	s15, [r3]
 8002878:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800287c:	4b3f      	ldr	r3, [pc, #252]	@ (800297c <NLLS+0x1724>)
 800287e:	443b      	add	r3, r7
 8002880:	edd3 7a00 	vldr	s15, [r3]
 8002884:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002888:	4b42      	ldr	r3, [pc, #264]	@ (8002994 <NLLS+0x173c>)
 800288a:	443b      	add	r3, r7
 800288c:	edd3 7a00 	vldr	s15, [r3]
 8002890:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002894:	4b44      	ldr	r3, [pc, #272]	@ (80029a8 <NLLS+0x1750>)
 8002896:	443b      	add	r3, r7
 8002898:	ed93 6a00 	vldr	s12, [r3]
 800289c:	4b40      	ldr	r3, [pc, #256]	@ (80029a0 <NLLS+0x1748>)
 800289e:	443b      	add	r3, r7
 80028a0:	edd3 7a00 	vldr	s15, [r3]
 80028a4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80028a8:	4b35      	ldr	r3, [pc, #212]	@ (8002980 <NLLS+0x1728>)
 80028aa:	443b      	add	r3, r7
 80028ac:	edd3 7a00 	vldr	s15, [r3]
 80028b0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80028b4:	4b38      	ldr	r3, [pc, #224]	@ (8002998 <NLLS+0x1740>)
 80028b6:	443b      	add	r3, r7
 80028b8:	edd3 7a00 	vldr	s15, [r3]
 80028bc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80028c0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80028c4:	4b2c      	ldr	r3, [pc, #176]	@ (8002978 <NLLS+0x1720>)
 80028c6:	443b      	add	r3, r7
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 80028d0:	f6a2 72ec 	subw	r2, r2, #4076	@ 0xfec
 80028d4:	6812      	ldr	r2, [r2, #0]
 80028d6:	4413      	add	r3, r2
 80028d8:	ed93 6a00 	vldr	s12, [r3]
 80028dc:	4b30      	ldr	r3, [pc, #192]	@ (80029a0 <NLLS+0x1748>)
 80028de:	443b      	add	r3, r7
 80028e0:	edd3 7a00 	vldr	s15, [r3]
 80028e4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80028e8:	4b24      	ldr	r3, [pc, #144]	@ (800297c <NLLS+0x1724>)
 80028ea:	443b      	add	r3, r7
 80028ec:	edd3 7a00 	vldr	s15, [r3]
 80028f0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80028f4:	4b27      	ldr	r3, [pc, #156]	@ (8002994 <NLLS+0x173c>)
 80028f6:	443b      	add	r3, r7
 80028f8:	edd3 7a00 	vldr	s15, [r3]
 80028fc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002900:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002904:	4b1c      	ldr	r3, [pc, #112]	@ (8002978 <NLLS+0x1720>)
 8002906:	443b      	add	r3, r7
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8002910:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 8002914:	6812      	ldr	r2, [r2, #0]
 8002916:	4413      	add	r3, r2
 8002918:	ed93 6a00 	vldr	s12, [r3]
 800291c:	4b20      	ldr	r3, [pc, #128]	@ (80029a0 <NLLS+0x1748>)
 800291e:	443b      	add	r3, r7
 8002920:	edd3 7a00 	vldr	s15, [r3]
 8002924:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002928:	4b15      	ldr	r3, [pc, #84]	@ (8002980 <NLLS+0x1728>)
 800292a:	443b      	add	r3, r7
 800292c:	edd3 7a00 	vldr	s15, [r3]
 8002930:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002934:	4b18      	ldr	r3, [pc, #96]	@ (8002998 <NLLS+0x1740>)
 8002936:	443b      	add	r3, r7
 8002938:	edd3 7a00 	vldr	s15, [r3]
 800293c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002940:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002944:	4b12      	ldr	r3, [pc, #72]	@ (8002990 <NLLS+0x1738>)
 8002946:	443b      	add	r3, r7
 8002948:	ed93 6a00 	vldr	s12, [r3]
 800294c:	4b0b      	ldr	r3, [pc, #44]	@ (800297c <NLLS+0x1724>)
 800294e:	443b      	add	r3, r7
 8002950:	edd3 7a00 	vldr	s15, [r3]
 8002954:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002958:	4b09      	ldr	r3, [pc, #36]	@ (8002980 <NLLS+0x1728>)
 800295a:	443b      	add	r3, r7
 800295c:	edd3 7a00 	vldr	s15, [r3]
 8002960:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002964:	4b0c      	ldr	r3, [pc, #48]	@ (8002998 <NLLS+0x1740>)
 8002966:	443b      	add	r3, r7
 8002968:	edd3 7a00 	vldr	s15, [r3]
 800296c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002970:	4b06      	ldr	r3, [pc, #24]	@ (800298c <NLLS+0x1734>)
 8002972:	443b      	add	r3, r7
 8002974:	e01a      	b.n	80029ac <NLLS+0x1754>
 8002976:	bf00      	nop
 8002978:	00016fb8 	.word	0x00016fb8
 800297c:	00016fe4 	.word	0x00016fe4
 8002980:	00016fe0 	.word	0x00016fe0
 8002984:	00016f74 	.word	0x00016f74
 8002988:	00016f7c 	.word	0x00016f7c
 800298c:	00016f84 	.word	0x00016f84
 8002990:	00016fdc 	.word	0x00016fdc
 8002994:	00016f78 	.word	0x00016f78
 8002998:	00016f80 	.word	0x00016f80
 800299c:	00016f88 	.word	0x00016f88
 80029a0:	00016fe8 	.word	0x00016fe8
 80029a4:	00016fd4 	.word	0x00016fd4
 80029a8:	00016fd8 	.word	0x00016fd8
 80029ac:	edd3 7a00 	vldr	s15, [r3]
 80029b0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80029b4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80029b8:	4bc0      	ldr	r3, [pc, #768]	@ (8002cbc <NLLS+0x1a64>)
 80029ba:	443b      	add	r3, r7
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 80029c4:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 80029c8:	6812      	ldr	r2, [r2, #0]
 80029ca:	4413      	add	r3, r2
 80029cc:	ed93 6a00 	vldr	s12, [r3]
 80029d0:	4bbb      	ldr	r3, [pc, #748]	@ (8002cc0 <NLLS+0x1a68>)
 80029d2:	443b      	add	r3, r7
 80029d4:	edd3 7a00 	vldr	s15, [r3]
 80029d8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80029dc:	4bb9      	ldr	r3, [pc, #740]	@ (8002cc4 <NLLS+0x1a6c>)
 80029de:	443b      	add	r3, r7
 80029e0:	edd3 7a00 	vldr	s15, [r3]
 80029e4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80029e8:	4bb7      	ldr	r3, [pc, #732]	@ (8002cc8 <NLLS+0x1a70>)
 80029ea:	443b      	add	r3, r7
 80029ec:	edd3 7a00 	vldr	s15, [r3]
 80029f0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80029f4:	4bb5      	ldr	r3, [pc, #724]	@ (8002ccc <NLLS+0x1a74>)
 80029f6:	443b      	add	r3, r7
 80029f8:	edd3 7a00 	vldr	s15, [r3]
 80029fc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002a00:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002a04:	4bb2      	ldr	r3, [pc, #712]	@ (8002cd0 <NLLS+0x1a78>)
 8002a06:	443b      	add	r3, r7
 8002a08:	ed93 6a00 	vldr	s12, [r3]
 8002a0c:	4bac      	ldr	r3, [pc, #688]	@ (8002cc0 <NLLS+0x1a68>)
 8002a0e:	443b      	add	r3, r7
 8002a10:	edd3 7a00 	vldr	s15, [r3]
 8002a14:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a18:	4baa      	ldr	r3, [pc, #680]	@ (8002cc4 <NLLS+0x1a6c>)
 8002a1a:	443b      	add	r3, r7
 8002a1c:	edd3 7a00 	vldr	s15, [r3]
 8002a20:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a24:	4bab      	ldr	r3, [pc, #684]	@ (8002cd4 <NLLS+0x1a7c>)
 8002a26:	443b      	add	r3, r7
 8002a28:	edd3 7a00 	vldr	s15, [r3]
 8002a2c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a30:	4ba9      	ldr	r3, [pc, #676]	@ (8002cd8 <NLLS+0x1a80>)
 8002a32:	443b      	add	r3, r7
 8002a34:	edd3 7a00 	vldr	s15, [r3]
 8002a38:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a3c:	4ba7      	ldr	r3, [pc, #668]	@ (8002cdc <NLLS+0x1a84>)
 8002a3e:	443b      	add	r3, r7
 8002a40:	edd3 7a00 	vldr	s15, [r3]
 8002a44:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002a48:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002a4c:	4b9b      	ldr	r3, [pc, #620]	@ (8002cbc <NLLS+0x1a64>)
 8002a4e:	443b      	add	r3, r7
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8002a58:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8002a5c:	6812      	ldr	r2, [r2, #0]
 8002a5e:	4413      	add	r3, r2
 8002a60:	ed93 6a00 	vldr	s12, [r3]
 8002a64:	4b96      	ldr	r3, [pc, #600]	@ (8002cc0 <NLLS+0x1a68>)
 8002a66:	443b      	add	r3, r7
 8002a68:	edd3 7a00 	vldr	s15, [r3]
 8002a6c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a70:	4b94      	ldr	r3, [pc, #592]	@ (8002cc4 <NLLS+0x1a6c>)
 8002a72:	443b      	add	r3, r7
 8002a74:	edd3 7a00 	vldr	s15, [r3]
 8002a78:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a7c:	4b95      	ldr	r3, [pc, #596]	@ (8002cd4 <NLLS+0x1a7c>)
 8002a7e:	443b      	add	r3, r7
 8002a80:	edd3 7a00 	vldr	s15, [r3]
 8002a84:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a88:	4b93      	ldr	r3, [pc, #588]	@ (8002cd8 <NLLS+0x1a80>)
 8002a8a:	443b      	add	r3, r7
 8002a8c:	edd3 7a00 	vldr	s15, [r3]
 8002a90:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a94:	4b91      	ldr	r3, [pc, #580]	@ (8002cdc <NLLS+0x1a84>)
 8002a96:	443b      	add	r3, r7
 8002a98:	edd3 7a00 	vldr	s15, [r3]
 8002a9c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002aa0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aa8:	eef1 6a67 	vneg.f32	s13, s15
 8002aac:	4b8c      	ldr	r3, [pc, #560]	@ (8002ce0 <NLLS+0x1a88>)
 8002aae:	443b      	add	r3, r7
 8002ab0:	ed93 7a00 	vldr	s14, [r3]
 8002ab4:	4b82      	ldr	r3, [pc, #520]	@ (8002cc0 <NLLS+0x1a68>)
 8002ab6:	443b      	add	r3, r7
 8002ab8:	edd3 7a00 	vldr	s15, [r3]
 8002abc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ac0:	4b80      	ldr	r3, [pc, #512]	@ (8002cc4 <NLLS+0x1a6c>)
 8002ac2:	443b      	add	r3, r7
 8002ac4:	edd3 7a00 	vldr	s15, [r3]
 8002ac8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8002acc:	4b7d      	ldr	r3, [pc, #500]	@ (8002cc4 <NLLS+0x1a6c>)
 8002ace:	443b      	add	r3, r7
 8002ad0:	edd3 7a00 	vldr	s15, [r3]
 8002ad4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002ad8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002adc:	4b7d      	ldr	r3, [pc, #500]	@ (8002cd4 <NLLS+0x1a7c>)
 8002ade:	443b      	add	r3, r7
 8002ae0:	edd3 7a00 	vldr	s15, [r3]
 8002ae4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ae8:	4b7a      	ldr	r3, [pc, #488]	@ (8002cd4 <NLLS+0x1a7c>)
 8002aea:	443b      	add	r3, r7
 8002aec:	edd3 7a00 	vldr	s15, [r3]
 8002af0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002af4:	4b7b      	ldr	r3, [pc, #492]	@ (8002ce4 <NLLS+0x1a8c>)
 8002af6:	443b      	add	r3, r7
 8002af8:	edd3 7a00 	vldr	s15, [r3]
 8002afc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b00:	4b78      	ldr	r3, [pc, #480]	@ (8002ce4 <NLLS+0x1a8c>)
 8002b02:	443b      	add	r3, r7
 8002b04:	edd3 7a00 	vldr	s15, [r3]
 8002b08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b0c:	4b72      	ldr	r3, [pc, #456]	@ (8002cd8 <NLLS+0x1a80>)
 8002b0e:	443b      	add	r3, r7
 8002b10:	edd3 7a00 	vldr	s15, [r3]
 8002b14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b1c:	f649 73f0 	movw	r3, #40944	@ 0x9ff0
 8002b20:	443b      	add	r3, r7
 8002b22:	461a      	mov	r2, r3
 8002b24:	4b65      	ldr	r3, [pc, #404]	@ (8002cbc <NLLS+0x1a64>)
 8002b26:	443b      	add	r3, r7
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f603 03ae 	addw	r3, r3, #2222	@ 0x8ae
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	3bf4      	subs	r3, #244	@ 0xf4
 8002b34:	edc3 7a00 	vstr	s15, [r3]

			mat_H[3][i] = (2*bx - 2*mx[i])/sx*sx - (2*sin_rho*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i])))/(sx*sx*sy*cos_rho*cos_rho) + (2*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sz*cos_lambda*cos_lambda*2*cos_phi*cos_phi*cos_rho*cos_rho);
 8002b38:	4b65      	ldr	r3, [pc, #404]	@ (8002cd0 <NLLS+0x1a78>)
 8002b3a:	443b      	add	r3, r7
 8002b3c:	edd3 7a00 	vldr	s15, [r3]
 8002b40:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002b44:	4b5d      	ldr	r3, [pc, #372]	@ (8002cbc <NLLS+0x1a64>)
 8002b46:	443b      	add	r3, r7
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8002b50:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8002b54:	6812      	ldr	r2, [r2, #0]
 8002b56:	4413      	add	r3, r2
 8002b58:	edd3 7a00 	vldr	s15, [r3]
 8002b5c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b60:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002b64:	4b5e      	ldr	r3, [pc, #376]	@ (8002ce0 <NLLS+0x1a88>)
 8002b66:	443b      	add	r3, r7
 8002b68:	edd3 7a00 	vldr	s15, [r3]
 8002b6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b70:	4b5b      	ldr	r3, [pc, #364]	@ (8002ce0 <NLLS+0x1a88>)
 8002b72:	443b      	add	r3, r7
 8002b74:	edd3 7a00 	vldr	s15, [r3]
 8002b78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b7c:	4b53      	ldr	r3, [pc, #332]	@ (8002ccc <NLLS+0x1a74>)
 8002b7e:	443b      	add	r3, r7
 8002b80:	edd3 7a00 	vldr	s15, [r3]
 8002b84:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002b88:	4b4c      	ldr	r3, [pc, #304]	@ (8002cbc <NLLS+0x1a64>)
 8002b8a:	443b      	add	r3, r7
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8002b94:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 8002b98:	6812      	ldr	r2, [r2, #0]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	edd3 7a00 	vldr	s15, [r3]
 8002ba0:	4b51      	ldr	r3, [pc, #324]	@ (8002ce8 <NLLS+0x1a90>)
 8002ba2:	443b      	add	r3, r7
 8002ba4:	ed93 6a00 	vldr	s12, [r3]
 8002ba8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002bac:	4b4c      	ldr	r3, [pc, #304]	@ (8002ce0 <NLLS+0x1a88>)
 8002bae:	443b      	add	r3, r7
 8002bb0:	edd3 7a00 	vldr	s15, [r3]
 8002bb4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002bb8:	4b41      	ldr	r3, [pc, #260]	@ (8002cc0 <NLLS+0x1a68>)
 8002bba:	443b      	add	r3, r7
 8002bbc:	edd3 5a00 	vldr	s11, [r3]
 8002bc0:	4b42      	ldr	r3, [pc, #264]	@ (8002ccc <NLLS+0x1a74>)
 8002bc2:	443b      	add	r3, r7
 8002bc4:	edd3 7a00 	vldr	s15, [r3]
 8002bc8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002bcc:	4b3b      	ldr	r3, [pc, #236]	@ (8002cbc <NLLS+0x1a64>)
 8002bce:	443b      	add	r3, r7
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8002bd8:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8002bdc:	6812      	ldr	r2, [r2, #0]
 8002bde:	4413      	add	r3, r2
 8002be0:	edd3 7a00 	vldr	s15, [r3]
 8002be4:	4b3a      	ldr	r3, [pc, #232]	@ (8002cd0 <NLLS+0x1a78>)
 8002be6:	443b      	add	r3, r7
 8002be8:	ed93 5a00 	vldr	s10, [r3]
 8002bec:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002bf0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002bf4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002bf8:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002bfc:	4b38      	ldr	r3, [pc, #224]	@ (8002ce0 <NLLS+0x1a88>)
 8002bfe:	443b      	add	r3, r7
 8002c00:	edd3 7a00 	vldr	s15, [r3]
 8002c04:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002c08:	4b2d      	ldr	r3, [pc, #180]	@ (8002cc0 <NLLS+0x1a68>)
 8002c0a:	443b      	add	r3, r7
 8002c0c:	edd3 7a00 	vldr	s15, [r3]
 8002c10:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c14:	4b30      	ldr	r3, [pc, #192]	@ (8002cd8 <NLLS+0x1a80>)
 8002c16:	443b      	add	r3, r7
 8002c18:	edd3 7a00 	vldr	s15, [r3]
 8002c1c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c20:	4b2d      	ldr	r3, [pc, #180]	@ (8002cd8 <NLLS+0x1a80>)
 8002c22:	443b      	add	r3, r7
 8002c24:	edd3 7a00 	vldr	s15, [r3]
 8002c28:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c2c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002c30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c34:	4b24      	ldr	r3, [pc, #144]	@ (8002cc8 <NLLS+0x1a70>)
 8002c36:	443b      	add	r3, r7
 8002c38:	edd3 6a00 	vldr	s13, [r3]
 8002c3c:	4b23      	ldr	r3, [pc, #140]	@ (8002ccc <NLLS+0x1a74>)
 8002c3e:	443b      	add	r3, r7
 8002c40:	edd3 7a00 	vldr	s15, [r3]
 8002c44:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c48:	4b22      	ldr	r3, [pc, #136]	@ (8002cd4 <NLLS+0x1a7c>)
 8002c4a:	443b      	add	r3, r7
 8002c4c:	ed93 6a00 	vldr	s12, [r3]
 8002c50:	4b21      	ldr	r3, [pc, #132]	@ (8002cd8 <NLLS+0x1a80>)
 8002c52:	443b      	add	r3, r7
 8002c54:	edd3 7a00 	vldr	s15, [r3]
 8002c58:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8002cdc <NLLS+0x1a84>)
 8002c5e:	443b      	add	r3, r7
 8002c60:	edd3 7a00 	vldr	s15, [r3]
 8002c64:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002c68:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002c6c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002c70:	4b13      	ldr	r3, [pc, #76]	@ (8002cc0 <NLLS+0x1a68>)
 8002c72:	443b      	add	r3, r7
 8002c74:	ed93 6a00 	vldr	s12, [r3]
 8002c78:	4b12      	ldr	r3, [pc, #72]	@ (8002cc4 <NLLS+0x1a6c>)
 8002c7a:	443b      	add	r3, r7
 8002c7c:	edd3 7a00 	vldr	s15, [r3]
 8002c80:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002c84:	4b10      	ldr	r3, [pc, #64]	@ (8002cc8 <NLLS+0x1a70>)
 8002c86:	443b      	add	r3, r7
 8002c88:	edd3 5a00 	vldr	s11, [r3]
 8002c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002ccc <NLLS+0x1a74>)
 8002c8e:	443b      	add	r3, r7
 8002c90:	edd3 7a00 	vldr	s15, [r3]
 8002c94:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002c98:	4b0e      	ldr	r3, [pc, #56]	@ (8002cd4 <NLLS+0x1a7c>)
 8002c9a:	443b      	add	r3, r7
 8002c9c:	ed93 5a00 	vldr	s10, [r3]
 8002ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8002cd8 <NLLS+0x1a80>)
 8002ca2:	443b      	add	r3, r7
 8002ca4:	edd3 7a00 	vldr	s15, [r3]
 8002ca8:	ee25 5a27 	vmul.f32	s10, s10, s15
 8002cac:	4b0b      	ldr	r3, [pc, #44]	@ (8002cdc <NLLS+0x1a84>)
 8002cae:	443b      	add	r3, r7
 8002cb0:	edd3 7a00 	vldr	s15, [r3]
 8002cb4:	ee65 7a27 	vmul.f32	s15, s10, s15
 8002cb8:	e018      	b.n	8002cec <NLLS+0x1a94>
 8002cba:	bf00      	nop
 8002cbc:	00016fb8 	.word	0x00016fb8
 8002cc0:	00016fe4 	.word	0x00016fe4
 8002cc4:	00016fe0 	.word	0x00016fe0
 8002cc8:	00016f80 	.word	0x00016f80
 8002ccc:	00016f84 	.word	0x00016f84
 8002cd0:	00016fdc 	.word	0x00016fdc
 8002cd4:	00016f74 	.word	0x00016f74
 8002cd8:	00016f78 	.word	0x00016f78
 8002cdc:	00016f88 	.word	0x00016f88
 8002ce0:	00016fe8 	.word	0x00016fe8
 8002ce4:	00016f7c 	.word	0x00016f7c
 8002ce8:	00016fd8 	.word	0x00016fd8
 8002cec:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8002cf0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002cf4:	4bbf      	ldr	r3, [pc, #764]	@ (8002ff4 <NLLS+0x1d9c>)
 8002cf6:	443b      	add	r3, r7
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8002d00:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8002d04:	6812      	ldr	r2, [r2, #0]
 8002d06:	4413      	add	r3, r2
 8002d08:	edd3 7a00 	vldr	s15, [r3]
 8002d0c:	4bba      	ldr	r3, [pc, #744]	@ (8002ff8 <NLLS+0x1da0>)
 8002d0e:	443b      	add	r3, r7
 8002d10:	edd3 5a00 	vldr	s11, [r3]
 8002d14:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8002d18:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002d1c:	4bb7      	ldr	r3, [pc, #732]	@ (8002ffc <NLLS+0x1da4>)
 8002d1e:	443b      	add	r3, r7
 8002d20:	edd3 5a00 	vldr	s11, [r3]
 8002d24:	4bb6      	ldr	r3, [pc, #728]	@ (8003000 <NLLS+0x1da8>)
 8002d26:	443b      	add	r3, r7
 8002d28:	edd3 7a00 	vldr	s15, [r3]
 8002d2c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002d30:	4bb4      	ldr	r3, [pc, #720]	@ (8003004 <NLLS+0x1dac>)
 8002d32:	443b      	add	r3, r7
 8002d34:	edd3 7a00 	vldr	s15, [r3]
 8002d38:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002d3c:	4bad      	ldr	r3, [pc, #692]	@ (8002ff4 <NLLS+0x1d9c>)
 8002d3e:	443b      	add	r3, r7
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8002d48:	f6a2 72ec 	subw	r2, r2, #4076	@ 0xfec
 8002d4c:	6812      	ldr	r2, [r2, #0]
 8002d4e:	4413      	add	r3, r2
 8002d50:	edd3 7a00 	vldr	s15, [r3]
 8002d54:	4bac      	ldr	r3, [pc, #688]	@ (8003008 <NLLS+0x1db0>)
 8002d56:	443b      	add	r3, r7
 8002d58:	ed93 5a00 	vldr	s10, [r3]
 8002d5c:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002d60:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002d64:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002d68:	4ba4      	ldr	r3, [pc, #656]	@ (8002ffc <NLLS+0x1da4>)
 8002d6a:	443b      	add	r3, r7
 8002d6c:	edd3 5a00 	vldr	s11, [r3]
 8002d70:	4ba6      	ldr	r3, [pc, #664]	@ (800300c <NLLS+0x1db4>)
 8002d72:	443b      	add	r3, r7
 8002d74:	edd3 7a00 	vldr	s15, [r3]
 8002d78:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002d7c:	4ba4      	ldr	r3, [pc, #656]	@ (8003010 <NLLS+0x1db8>)
 8002d7e:	443b      	add	r3, r7
 8002d80:	edd3 7a00 	vldr	s15, [r3]
 8002d84:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002d88:	4b9a      	ldr	r3, [pc, #616]	@ (8002ff4 <NLLS+0x1d9c>)
 8002d8a:	443b      	add	r3, r7
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8002d94:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 8002d98:	6812      	ldr	r2, [r2, #0]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	edd3 7a00 	vldr	s15, [r3]
 8002da0:	4b9c      	ldr	r3, [pc, #624]	@ (8003014 <NLLS+0x1dbc>)
 8002da2:	443b      	add	r3, r7
 8002da4:	ed93 5a00 	vldr	s10, [r3]
 8002da8:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002dac:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002db0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002db4:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002db8:	4b90      	ldr	r3, [pc, #576]	@ (8002ffc <NLLS+0x1da4>)
 8002dba:	443b      	add	r3, r7
 8002dbc:	edd3 7a00 	vldr	s15, [r3]
 8002dc0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002dc4:	4b8e      	ldr	r3, [pc, #568]	@ (8003000 <NLLS+0x1da8>)
 8002dc6:	443b      	add	r3, r7
 8002dc8:	edd3 7a00 	vldr	s15, [r3]
 8002dcc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002dd0:	4b8e      	ldr	r3, [pc, #568]	@ (800300c <NLLS+0x1db4>)
 8002dd2:	443b      	add	r3, r7
 8002dd4:	edd3 7a00 	vldr	s15, [r3]
 8002dd8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ddc:	4b8e      	ldr	r3, [pc, #568]	@ (8003018 <NLLS+0x1dc0>)
 8002dde:	443b      	add	r3, r7
 8002de0:	edd3 7a00 	vldr	s15, [r3]
 8002de4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002de8:	4b8b      	ldr	r3, [pc, #556]	@ (8003018 <NLLS+0x1dc0>)
 8002dea:	443b      	add	r3, r7
 8002dec:	edd3 7a00 	vldr	s15, [r3]
 8002df0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002df4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002df8:	4b88      	ldr	r3, [pc, #544]	@ (800301c <NLLS+0x1dc4>)
 8002dfa:	443b      	add	r3, r7
 8002dfc:	edd3 7a00 	vldr	s15, [r3]
 8002e00:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e04:	4b85      	ldr	r3, [pc, #532]	@ (800301c <NLLS+0x1dc4>)
 8002e06:	443b      	add	r3, r7
 8002e08:	edd3 7a00 	vldr	s15, [r3]
 8002e0c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e10:	4b7c      	ldr	r3, [pc, #496]	@ (8003004 <NLLS+0x1dac>)
 8002e12:	443b      	add	r3, r7
 8002e14:	edd3 7a00 	vldr	s15, [r3]
 8002e18:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e1c:	4b79      	ldr	r3, [pc, #484]	@ (8003004 <NLLS+0x1dac>)
 8002e1e:	443b      	add	r3, r7
 8002e20:	edd3 7a00 	vldr	s15, [r3]
 8002e24:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e28:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e30:	f649 73f0 	movw	r3, #40944	@ 0x9ff0
 8002e34:	443b      	add	r3, r7
 8002e36:	461a      	mov	r2, r3
 8002e38:	4b6e      	ldr	r3, [pc, #440]	@ (8002ff4 <NLLS+0x1d9c>)
 8002e3a:	443b      	add	r3, r7
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f603 5305 	addw	r3, r3, #3333	@ 0xd05
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	3bf4      	subs	r3, #244	@ 0xf4
 8002e48:	edc3 7a00 	vstr	s15, [r3]

			mat_H[4][i] = (2*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i])))/(sx*sy*sy*cos_rho*cos_rho) - (2*sin_lambda*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sy*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8002e4c:	4b69      	ldr	r3, [pc, #420]	@ (8002ff4 <NLLS+0x1d9c>)
 8002e4e:	443b      	add	r3, r7
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8002e58:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 8002e5c:	6812      	ldr	r2, [r2, #0]
 8002e5e:	4413      	add	r3, r2
 8002e60:	edd3 7a00 	vldr	s15, [r3]
 8002e64:	4b6b      	ldr	r3, [pc, #428]	@ (8003014 <NLLS+0x1dbc>)
 8002e66:	443b      	add	r3, r7
 8002e68:	ed93 7a00 	vldr	s14, [r3]
 8002e6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e70:	4b62      	ldr	r3, [pc, #392]	@ (8002ffc <NLLS+0x1da4>)
 8002e72:	443b      	add	r3, r7
 8002e74:	edd3 7a00 	vldr	s15, [r3]
 8002e78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e7c:	4b60      	ldr	r3, [pc, #384]	@ (8003000 <NLLS+0x1da8>)
 8002e7e:	443b      	add	r3, r7
 8002e80:	edd3 6a00 	vldr	s13, [r3]
 8002e84:	4b66      	ldr	r3, [pc, #408]	@ (8003020 <NLLS+0x1dc8>)
 8002e86:	443b      	add	r3, r7
 8002e88:	edd3 7a00 	vldr	s15, [r3]
 8002e8c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e90:	4b58      	ldr	r3, [pc, #352]	@ (8002ff4 <NLLS+0x1d9c>)
 8002e92:	443b      	add	r3, r7
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8002e9c:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8002ea0:	6812      	ldr	r2, [r2, #0]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	edd3 7a00 	vldr	s15, [r3]
 8002ea8:	4b53      	ldr	r3, [pc, #332]	@ (8002ff8 <NLLS+0x1da0>)
 8002eaa:	443b      	add	r3, r7
 8002eac:	ed93 6a00 	vldr	s12, [r3]
 8002eb0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002eb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002eb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ebc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002ec0:	4b4e      	ldr	r3, [pc, #312]	@ (8002ffc <NLLS+0x1da4>)
 8002ec2:	443b      	add	r3, r7
 8002ec4:	ed93 7a00 	vldr	s14, [r3]
 8002ec8:	4b4d      	ldr	r3, [pc, #308]	@ (8003000 <NLLS+0x1da8>)
 8002eca:	443b      	add	r3, r7
 8002ecc:	edd3 7a00 	vldr	s15, [r3]
 8002ed0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ed4:	4b4a      	ldr	r3, [pc, #296]	@ (8003000 <NLLS+0x1da8>)
 8002ed6:	443b      	add	r3, r7
 8002ed8:	edd3 7a00 	vldr	s15, [r3]
 8002edc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ee0:	4b48      	ldr	r3, [pc, #288]	@ (8003004 <NLLS+0x1dac>)
 8002ee2:	443b      	add	r3, r7
 8002ee4:	edd3 7a00 	vldr	s15, [r3]
 8002ee8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002eec:	4b45      	ldr	r3, [pc, #276]	@ (8003004 <NLLS+0x1dac>)
 8002eee:	443b      	add	r3, r7
 8002ef0:	edd3 7a00 	vldr	s15, [r3]
 8002ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ef8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002efc:	4b44      	ldr	r3, [pc, #272]	@ (8003010 <NLLS+0x1db8>)
 8002efe:	443b      	add	r3, r7
 8002f00:	edd3 7a00 	vldr	s15, [r3]
 8002f04:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002f08:	4b3d      	ldr	r3, [pc, #244]	@ (8003000 <NLLS+0x1da8>)
 8002f0a:	443b      	add	r3, r7
 8002f0c:	ed93 6a00 	vldr	s12, [r3]
 8002f10:	4b3e      	ldr	r3, [pc, #248]	@ (800300c <NLLS+0x1db4>)
 8002f12:	443b      	add	r3, r7
 8002f14:	edd3 7a00 	vldr	s15, [r3]
 8002f18:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002f1c:	4b3c      	ldr	r3, [pc, #240]	@ (8003010 <NLLS+0x1db8>)
 8002f1e:	443b      	add	r3, r7
 8002f20:	edd3 5a00 	vldr	s11, [r3]
 8002f24:	4b3e      	ldr	r3, [pc, #248]	@ (8003020 <NLLS+0x1dc8>)
 8002f26:	443b      	add	r3, r7
 8002f28:	edd3 7a00 	vldr	s15, [r3]
 8002f2c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002f30:	4b39      	ldr	r3, [pc, #228]	@ (8003018 <NLLS+0x1dc0>)
 8002f32:	443b      	add	r3, r7
 8002f34:	ed93 5a00 	vldr	s10, [r3]
 8002f38:	4b32      	ldr	r3, [pc, #200]	@ (8003004 <NLLS+0x1dac>)
 8002f3a:	443b      	add	r3, r7
 8002f3c:	edd3 7a00 	vldr	s15, [r3]
 8002f40:	ee25 5a27 	vmul.f32	s10, s10, s15
 8002f44:	4b37      	ldr	r3, [pc, #220]	@ (8003024 <NLLS+0x1dcc>)
 8002f46:	443b      	add	r3, r7
 8002f48:	edd3 7a00 	vldr	s15, [r3]
 8002f4c:	ee65 7a27 	vmul.f32	s15, s10, s15
 8002f50:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8002f54:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002f58:	4b26      	ldr	r3, [pc, #152]	@ (8002ff4 <NLLS+0x1d9c>)
 8002f5a:	443b      	add	r3, r7
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8002f64:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8002f68:	6812      	ldr	r2, [r2, #0]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	edd3 7a00 	vldr	s15, [r3]
 8002f70:	4b21      	ldr	r3, [pc, #132]	@ (8002ff8 <NLLS+0x1da0>)
 8002f72:	443b      	add	r3, r7
 8002f74:	edd3 5a00 	vldr	s11, [r3]
 8002f78:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8002f7c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002f80:	4b1e      	ldr	r3, [pc, #120]	@ (8002ffc <NLLS+0x1da4>)
 8002f82:	443b      	add	r3, r7
 8002f84:	edd3 5a00 	vldr	s11, [r3]
 8002f88:	4b1d      	ldr	r3, [pc, #116]	@ (8003000 <NLLS+0x1da8>)
 8002f8a:	443b      	add	r3, r7
 8002f8c:	edd3 7a00 	vldr	s15, [r3]
 8002f90:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002f94:	4b1b      	ldr	r3, [pc, #108]	@ (8003004 <NLLS+0x1dac>)
 8002f96:	443b      	add	r3, r7
 8002f98:	edd3 7a00 	vldr	s15, [r3]
 8002f9c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002fa0:	4b14      	ldr	r3, [pc, #80]	@ (8002ff4 <NLLS+0x1d9c>)
 8002fa2:	443b      	add	r3, r7
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8002fac:	f6a2 72ec 	subw	r2, r2, #4076	@ 0xfec
 8002fb0:	6812      	ldr	r2, [r2, #0]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	edd3 7a00 	vldr	s15, [r3]
 8002fb8:	4b13      	ldr	r3, [pc, #76]	@ (8003008 <NLLS+0x1db0>)
 8002fba:	443b      	add	r3, r7
 8002fbc:	ed93 5a00 	vldr	s10, [r3]
 8002fc0:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002fc4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002fc8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8002ffc <NLLS+0x1da4>)
 8002fce:	443b      	add	r3, r7
 8002fd0:	edd3 5a00 	vldr	s11, [r3]
 8002fd4:	4b0d      	ldr	r3, [pc, #52]	@ (800300c <NLLS+0x1db4>)
 8002fd6:	443b      	add	r3, r7
 8002fd8:	edd3 7a00 	vldr	s15, [r3]
 8002fdc:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8003010 <NLLS+0x1db8>)
 8002fe2:	443b      	add	r3, r7
 8002fe4:	edd3 7a00 	vldr	s15, [r3]
 8002fe8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002fec:	4b01      	ldr	r3, [pc, #4]	@ (8002ff4 <NLLS+0x1d9c>)
 8002fee:	443b      	add	r3, r7
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	e019      	b.n	8003028 <NLLS+0x1dd0>
 8002ff4:	00016fb8 	.word	0x00016fb8
 8002ff8:	00016fdc 	.word	0x00016fdc
 8002ffc:	00016fe8 	.word	0x00016fe8
 8003000:	00016fe4 	.word	0x00016fe4
 8003004:	00016f78 	.word	0x00016f78
 8003008:	00016fd4 	.word	0x00016fd4
 800300c:	00016fe0 	.word	0x00016fe0
 8003010:	00016f80 	.word	0x00016f80
 8003014:	00016fd8 	.word	0x00016fd8
 8003018:	00016f74 	.word	0x00016f74
 800301c:	00016f7c 	.word	0x00016f7c
 8003020:	00016f84 	.word	0x00016f84
 8003024:	00016f88 	.word	0x00016f88
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 800302e:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 8003032:	6812      	ldr	r2, [r2, #0]
 8003034:	4413      	add	r3, r2
 8003036:	edd3 7a00 	vldr	s15, [r3]
 800303a:	4bc0      	ldr	r3, [pc, #768]	@ (800333c <NLLS+0x20e4>)
 800303c:	443b      	add	r3, r7
 800303e:	ed93 5a00 	vldr	s10, [r3]
 8003042:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003046:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800304a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800304e:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8003052:	4bbb      	ldr	r3, [pc, #748]	@ (8003340 <NLLS+0x20e8>)
 8003054:	443b      	add	r3, r7
 8003056:	edd3 6a00 	vldr	s13, [r3]
 800305a:	4bba      	ldr	r3, [pc, #744]	@ (8003344 <NLLS+0x20ec>)
 800305c:	443b      	add	r3, r7
 800305e:	edd3 7a00 	vldr	s15, [r3]
 8003062:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003066:	4bb7      	ldr	r3, [pc, #732]	@ (8003344 <NLLS+0x20ec>)
 8003068:	443b      	add	r3, r7
 800306a:	edd3 7a00 	vldr	s15, [r3]
 800306e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003072:	4bb5      	ldr	r3, [pc, #724]	@ (8003348 <NLLS+0x20f0>)
 8003074:	443b      	add	r3, r7
 8003076:	edd3 7a00 	vldr	s15, [r3]
 800307a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800307e:	4bb3      	ldr	r3, [pc, #716]	@ (800334c <NLLS+0x20f4>)
 8003080:	443b      	add	r3, r7
 8003082:	edd3 7a00 	vldr	s15, [r3]
 8003086:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800308a:	4bb0      	ldr	r3, [pc, #704]	@ (800334c <NLLS+0x20f4>)
 800308c:	443b      	add	r3, r7
 800308e:	edd3 7a00 	vldr	s15, [r3]
 8003092:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003096:	4bae      	ldr	r3, [pc, #696]	@ (8003350 <NLLS+0x20f8>)
 8003098:	443b      	add	r3, r7
 800309a:	edd3 7a00 	vldr	s15, [r3]
 800309e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80030a2:	4bab      	ldr	r3, [pc, #684]	@ (8003350 <NLLS+0x20f8>)
 80030a4:	443b      	add	r3, r7
 80030a6:	edd3 7a00 	vldr	s15, [r3]
 80030aa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80030ae:	4ba9      	ldr	r3, [pc, #676]	@ (8003354 <NLLS+0x20fc>)
 80030b0:	443b      	add	r3, r7
 80030b2:	edd3 7a00 	vldr	s15, [r3]
 80030b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80030ba:	4ba6      	ldr	r3, [pc, #664]	@ (8003354 <NLLS+0x20fc>)
 80030bc:	443b      	add	r3, r7
 80030be:	edd3 7a00 	vldr	s15, [r3]
 80030c2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80030c6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80030ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030ce:	f649 73f0 	movw	r3, #40944	@ 0x9ff0
 80030d2:	443b      	add	r3, r7
 80030d4:	4619      	mov	r1, r3
 80030d6:	4ba0      	ldr	r3, [pc, #640]	@ (8003358 <NLLS+0x2100>)
 80030d8:	443b      	add	r3, r7
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	f241 135c 	movw	r3, #4444	@ 0x115c
 80030e0:	4413      	add	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	3bf4      	subs	r3, #244	@ 0xf4
 80030e8:	edc3 7a00 	vstr	s15, [r3]

			mat_H[5][i] = (2*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho);
 80030ec:	4b95      	ldr	r3, [pc, #596]	@ (8003344 <NLLS+0x20ec>)
 80030ee:	443b      	add	r3, r7
 80030f0:	ed93 7a00 	vldr	s14, [r3]
 80030f4:	4b94      	ldr	r3, [pc, #592]	@ (8003348 <NLLS+0x20f0>)
 80030f6:	443b      	add	r3, r7
 80030f8:	edd3 7a00 	vldr	s15, [r3]
 80030fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003100:	4b96      	ldr	r3, [pc, #600]	@ (800335c <NLLS+0x2104>)
 8003102:	443b      	add	r3, r7
 8003104:	edd3 6a00 	vldr	s13, [r3]
 8003108:	4b95      	ldr	r3, [pc, #596]	@ (8003360 <NLLS+0x2108>)
 800310a:	443b      	add	r3, r7
 800310c:	edd3 7a00 	vldr	s15, [r3]
 8003110:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003114:	4b8d      	ldr	r3, [pc, #564]	@ (800334c <NLLS+0x20f4>)
 8003116:	443b      	add	r3, r7
 8003118:	ed93 6a00 	vldr	s12, [r3]
 800311c:	4b8d      	ldr	r3, [pc, #564]	@ (8003354 <NLLS+0x20fc>)
 800311e:	443b      	add	r3, r7
 8003120:	edd3 7a00 	vldr	s15, [r3]
 8003124:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003128:	4b8e      	ldr	r3, [pc, #568]	@ (8003364 <NLLS+0x210c>)
 800312a:	443b      	add	r3, r7
 800312c:	edd3 7a00 	vldr	s15, [r3]
 8003130:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003134:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003138:	ee27 7a27 	vmul.f32	s14, s14, s15
 800313c:	4b86      	ldr	r3, [pc, #536]	@ (8003358 <NLLS+0x2100>)
 800313e:	443b      	add	r3, r7
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8003148:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 800314c:	6812      	ldr	r2, [r2, #0]
 800314e:	4413      	add	r3, r2
 8003150:	edd3 7a00 	vldr	s15, [r3]
 8003154:	4b84      	ldr	r3, [pc, #528]	@ (8003368 <NLLS+0x2110>)
 8003156:	443b      	add	r3, r7
 8003158:	edd3 6a00 	vldr	s13, [r3]
 800315c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003160:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003164:	4b76      	ldr	r3, [pc, #472]	@ (8003340 <NLLS+0x20e8>)
 8003166:	443b      	add	r3, r7
 8003168:	edd3 6a00 	vldr	s13, [r3]
 800316c:	4b75      	ldr	r3, [pc, #468]	@ (8003344 <NLLS+0x20ec>)
 800316e:	443b      	add	r3, r7
 8003170:	edd3 7a00 	vldr	s15, [r3]
 8003174:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003178:	4b76      	ldr	r3, [pc, #472]	@ (8003354 <NLLS+0x20fc>)
 800317a:	443b      	add	r3, r7
 800317c:	edd3 7a00 	vldr	s15, [r3]
 8003180:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003184:	4b74      	ldr	r3, [pc, #464]	@ (8003358 <NLLS+0x2100>)
 8003186:	443b      	add	r3, r7
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8003190:	f6a2 72ec 	subw	r2, r2, #4076	@ 0xfec
 8003194:	6812      	ldr	r2, [r2, #0]
 8003196:	4413      	add	r3, r2
 8003198:	edd3 7a00 	vldr	s15, [r3]
 800319c:	4b73      	ldr	r3, [pc, #460]	@ (800336c <NLLS+0x2114>)
 800319e:	443b      	add	r3, r7
 80031a0:	ed93 6a00 	vldr	s12, [r3]
 80031a4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80031a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031b0:	4b63      	ldr	r3, [pc, #396]	@ (8003340 <NLLS+0x20e8>)
 80031b2:	443b      	add	r3, r7
 80031b4:	edd3 6a00 	vldr	s13, [r3]
 80031b8:	4b63      	ldr	r3, [pc, #396]	@ (8003348 <NLLS+0x20f0>)
 80031ba:	443b      	add	r3, r7
 80031bc:	edd3 7a00 	vldr	s15, [r3]
 80031c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80031c4:	4b65      	ldr	r3, [pc, #404]	@ (800335c <NLLS+0x2104>)
 80031c6:	443b      	add	r3, r7
 80031c8:	edd3 7a00 	vldr	s15, [r3]
 80031cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80031d0:	4b61      	ldr	r3, [pc, #388]	@ (8003358 <NLLS+0x2100>)
 80031d2:	443b      	add	r3, r7
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 80031dc:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 80031e0:	6812      	ldr	r2, [r2, #0]
 80031e2:	4413      	add	r3, r2
 80031e4:	edd3 7a00 	vldr	s15, [r3]
 80031e8:	4b54      	ldr	r3, [pc, #336]	@ (800333c <NLLS+0x20e4>)
 80031ea:	443b      	add	r3, r7
 80031ec:	ed93 6a00 	vldr	s12, [r3]
 80031f0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80031f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031fc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003200:	4b4f      	ldr	r3, [pc, #316]	@ (8003340 <NLLS+0x20e8>)
 8003202:	443b      	add	r3, r7
 8003204:	ed93 7a00 	vldr	s14, [r3]
 8003208:	4b4e      	ldr	r3, [pc, #312]	@ (8003344 <NLLS+0x20ec>)
 800320a:	443b      	add	r3, r7
 800320c:	edd3 7a00 	vldr	s15, [r3]
 8003210:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003214:	4b4c      	ldr	r3, [pc, #304]	@ (8003348 <NLLS+0x20f0>)
 8003216:	443b      	add	r3, r7
 8003218:	edd3 7a00 	vldr	s15, [r3]
 800321c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003220:	4b49      	ldr	r3, [pc, #292]	@ (8003348 <NLLS+0x20f0>)
 8003222:	443b      	add	r3, r7
 8003224:	edd3 7a00 	vldr	s15, [r3]
 8003228:	ee27 7a27 	vmul.f32	s14, s14, s15
 800322c:	4b47      	ldr	r3, [pc, #284]	@ (800334c <NLLS+0x20f4>)
 800322e:	443b      	add	r3, r7
 8003230:	edd3 7a00 	vldr	s15, [r3]
 8003234:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003238:	4b44      	ldr	r3, [pc, #272]	@ (800334c <NLLS+0x20f4>)
 800323a:	443b      	add	r3, r7
 800323c:	edd3 7a00 	vldr	s15, [r3]
 8003240:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003244:	4b42      	ldr	r3, [pc, #264]	@ (8003350 <NLLS+0x20f8>)
 8003246:	443b      	add	r3, r7
 8003248:	edd3 7a00 	vldr	s15, [r3]
 800324c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003250:	4b3f      	ldr	r3, [pc, #252]	@ (8003350 <NLLS+0x20f8>)
 8003252:	443b      	add	r3, r7
 8003254:	edd3 7a00 	vldr	s15, [r3]
 8003258:	ee27 7a27 	vmul.f32	s14, s14, s15
 800325c:	4b3d      	ldr	r3, [pc, #244]	@ (8003354 <NLLS+0x20fc>)
 800325e:	443b      	add	r3, r7
 8003260:	edd3 7a00 	vldr	s15, [r3]
 8003264:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800326c:	f649 73f0 	movw	r3, #40944	@ 0x9ff0
 8003270:	443b      	add	r3, r7
 8003272:	4619      	mov	r1, r3
 8003274:	4b38      	ldr	r3, [pc, #224]	@ (8003358 <NLLS+0x2100>)
 8003276:	443b      	add	r3, r7
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 800327e:	4413      	add	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	440b      	add	r3, r1
 8003284:	3bf4      	subs	r3, #244	@ 0xf4
 8003286:	edc3 7a00 	vstr	s15, [r3]

			mat_H[6][i] = -(2*(bx*sy - mx[i]*sy - by*sx*sin_rho + my[i]*sx*sin_rho)*(by*sx*sz*sin_lambda*sin_lambda - my[i]*sx*sz*sin_lambda*sin_lambda + by*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - my[i]*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - bz*sx*sy*cos_rho*sin_lambda + mz[i]*sx*sy*cos_rho*sin_lambda - bx*sy*sz*sin_lambda*sin_lambda*sin_rho + mx[i]*sy*sz*sin_lambda*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + mx[i]*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + bx*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi - mx[i]*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi))/(sx*sx*sy*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*(cos_rho*cos_rho*cos_rho));
 800328a:	4b37      	ldr	r3, [pc, #220]	@ (8003368 <NLLS+0x2110>)
 800328c:	443b      	add	r3, r7
 800328e:	ed93 7a00 	vldr	s14, [r3]
 8003292:	4b2c      	ldr	r3, [pc, #176]	@ (8003344 <NLLS+0x20ec>)
 8003294:	443b      	add	r3, r7
 8003296:	edd3 7a00 	vldr	s15, [r3]
 800329a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800329e:	4b2e      	ldr	r3, [pc, #184]	@ (8003358 <NLLS+0x2100>)
 80032a0:	443b      	add	r3, r7
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 80032aa:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 80032ae:	6812      	ldr	r2, [r2, #0]
 80032b0:	4413      	add	r3, r2
 80032b2:	edd3 6a00 	vldr	s13, [r3]
 80032b6:	4b23      	ldr	r3, [pc, #140]	@ (8003344 <NLLS+0x20ec>)
 80032b8:	443b      	add	r3, r7
 80032ba:	edd3 7a00 	vldr	s15, [r3]
 80032be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032c6:	4b1d      	ldr	r3, [pc, #116]	@ (800333c <NLLS+0x20e4>)
 80032c8:	443b      	add	r3, r7
 80032ca:	edd3 6a00 	vldr	s13, [r3]
 80032ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003340 <NLLS+0x20e8>)
 80032d0:	443b      	add	r3, r7
 80032d2:	edd3 7a00 	vldr	s15, [r3]
 80032d6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80032da:	4b21      	ldr	r3, [pc, #132]	@ (8003360 <NLLS+0x2108>)
 80032dc:	443b      	add	r3, r7
 80032de:	edd3 7a00 	vldr	s15, [r3]
 80032e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003358 <NLLS+0x2100>)
 80032ec:	443b      	add	r3, r7
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 80032f6:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	4413      	add	r3, r2
 80032fe:	edd3 6a00 	vldr	s13, [r3]
 8003302:	4b0f      	ldr	r3, [pc, #60]	@ (8003340 <NLLS+0x20e8>)
 8003304:	443b      	add	r3, r7
 8003306:	edd3 7a00 	vldr	s15, [r3]
 800330a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800330e:	4b14      	ldr	r3, [pc, #80]	@ (8003360 <NLLS+0x2108>)
 8003310:	443b      	add	r3, r7
 8003312:	edd3 7a00 	vldr	s15, [r3]
 8003316:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800331a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800331e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003322:	4b06      	ldr	r3, [pc, #24]	@ (800333c <NLLS+0x20e4>)
 8003324:	443b      	add	r3, r7
 8003326:	edd3 6a00 	vldr	s13, [r3]
 800332a:	4b05      	ldr	r3, [pc, #20]	@ (8003340 <NLLS+0x20e8>)
 800332c:	443b      	add	r3, r7
 800332e:	edd3 7a00 	vldr	s15, [r3]
 8003332:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003336:	4b04      	ldr	r3, [pc, #16]	@ (8003348 <NLLS+0x20f0>)
 8003338:	443b      	add	r3, r7
 800333a:	e019      	b.n	8003370 <NLLS+0x2118>
 800333c:	00016fd8 	.word	0x00016fd8
 8003340:	00016fe8 	.word	0x00016fe8
 8003344:	00016fe4 	.word	0x00016fe4
 8003348:	00016fe0 	.word	0x00016fe0
 800334c:	00016f74 	.word	0x00016f74
 8003350:	00016f7c 	.word	0x00016f7c
 8003354:	00016f78 	.word	0x00016f78
 8003358:	00016fb8 	.word	0x00016fb8
 800335c:	00016f80 	.word	0x00016f80
 8003360:	00016f84 	.word	0x00016f84
 8003364:	00016f88 	.word	0x00016f88
 8003368:	00016fdc 	.word	0x00016fdc
 800336c:	00016fd4 	.word	0x00016fd4
 8003370:	edd3 7a00 	vldr	s15, [r3]
 8003374:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003378:	4bbe      	ldr	r3, [pc, #760]	@ (8003674 <NLLS+0x241c>)
 800337a:	443b      	add	r3, r7
 800337c:	edd3 7a00 	vldr	s15, [r3]
 8003380:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003384:	4bbb      	ldr	r3, [pc, #748]	@ (8003674 <NLLS+0x241c>)
 8003386:	443b      	add	r3, r7
 8003388:	edd3 7a00 	vldr	s15, [r3]
 800338c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003390:	4bb9      	ldr	r3, [pc, #740]	@ (8003678 <NLLS+0x2420>)
 8003392:	443b      	add	r3, r7
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 800339c:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 80033a0:	6812      	ldr	r2, [r2, #0]
 80033a2:	4413      	add	r3, r2
 80033a4:	ed93 6a00 	vldr	s12, [r3]
 80033a8:	4bb4      	ldr	r3, [pc, #720]	@ (800367c <NLLS+0x2424>)
 80033aa:	443b      	add	r3, r7
 80033ac:	edd3 7a00 	vldr	s15, [r3]
 80033b0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80033b4:	4bb2      	ldr	r3, [pc, #712]	@ (8003680 <NLLS+0x2428>)
 80033b6:	443b      	add	r3, r7
 80033b8:	edd3 7a00 	vldr	s15, [r3]
 80033bc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80033c0:	4bac      	ldr	r3, [pc, #688]	@ (8003674 <NLLS+0x241c>)
 80033c2:	443b      	add	r3, r7
 80033c4:	edd3 7a00 	vldr	s15, [r3]
 80033c8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80033cc:	4ba9      	ldr	r3, [pc, #676]	@ (8003674 <NLLS+0x241c>)
 80033ce:	443b      	add	r3, r7
 80033d0:	edd3 7a00 	vldr	s15, [r3]
 80033d4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80033d8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80033dc:	4ba9      	ldr	r3, [pc, #676]	@ (8003684 <NLLS+0x242c>)
 80033de:	443b      	add	r3, r7
 80033e0:	ed93 6a00 	vldr	s12, [r3]
 80033e4:	4ba5      	ldr	r3, [pc, #660]	@ (800367c <NLLS+0x2424>)
 80033e6:	443b      	add	r3, r7
 80033e8:	edd3 7a00 	vldr	s15, [r3]
 80033ec:	ee26 6a27 	vmul.f32	s12, s12, s15
 80033f0:	4ba3      	ldr	r3, [pc, #652]	@ (8003680 <NLLS+0x2428>)
 80033f2:	443b      	add	r3, r7
 80033f4:	edd3 7a00 	vldr	s15, [r3]
 80033f8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80033fc:	4ba2      	ldr	r3, [pc, #648]	@ (8003688 <NLLS+0x2430>)
 80033fe:	443b      	add	r3, r7
 8003400:	edd3 7a00 	vldr	s15, [r3]
 8003404:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003408:	4b9f      	ldr	r3, [pc, #636]	@ (8003688 <NLLS+0x2430>)
 800340a:	443b      	add	r3, r7
 800340c:	edd3 7a00 	vldr	s15, [r3]
 8003410:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003414:	4b9d      	ldr	r3, [pc, #628]	@ (800368c <NLLS+0x2434>)
 8003416:	443b      	add	r3, r7
 8003418:	edd3 7a00 	vldr	s15, [r3]
 800341c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003420:	4b9a      	ldr	r3, [pc, #616]	@ (800368c <NLLS+0x2434>)
 8003422:	443b      	add	r3, r7
 8003424:	edd3 7a00 	vldr	s15, [r3]
 8003428:	ee66 7a27 	vmul.f32	s15, s12, s15
 800342c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003430:	4b91      	ldr	r3, [pc, #580]	@ (8003678 <NLLS+0x2420>)
 8003432:	443b      	add	r3, r7
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 800343c:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 8003440:	6812      	ldr	r2, [r2, #0]
 8003442:	4413      	add	r3, r2
 8003444:	ed93 6a00 	vldr	s12, [r3]
 8003448:	4b8c      	ldr	r3, [pc, #560]	@ (800367c <NLLS+0x2424>)
 800344a:	443b      	add	r3, r7
 800344c:	edd3 7a00 	vldr	s15, [r3]
 8003450:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003454:	4b8a      	ldr	r3, [pc, #552]	@ (8003680 <NLLS+0x2428>)
 8003456:	443b      	add	r3, r7
 8003458:	edd3 7a00 	vldr	s15, [r3]
 800345c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003460:	4b89      	ldr	r3, [pc, #548]	@ (8003688 <NLLS+0x2430>)
 8003462:	443b      	add	r3, r7
 8003464:	edd3 7a00 	vldr	s15, [r3]
 8003468:	ee26 6a27 	vmul.f32	s12, s12, s15
 800346c:	4b86      	ldr	r3, [pc, #536]	@ (8003688 <NLLS+0x2430>)
 800346e:	443b      	add	r3, r7
 8003470:	edd3 7a00 	vldr	s15, [r3]
 8003474:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003478:	4b84      	ldr	r3, [pc, #528]	@ (800368c <NLLS+0x2434>)
 800347a:	443b      	add	r3, r7
 800347c:	edd3 7a00 	vldr	s15, [r3]
 8003480:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003484:	4b81      	ldr	r3, [pc, #516]	@ (800368c <NLLS+0x2434>)
 8003486:	443b      	add	r3, r7
 8003488:	edd3 7a00 	vldr	s15, [r3]
 800348c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003490:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003494:	4b7e      	ldr	r3, [pc, #504]	@ (8003690 <NLLS+0x2438>)
 8003496:	443b      	add	r3, r7
 8003498:	ed93 6a00 	vldr	s12, [r3]
 800349c:	4b77      	ldr	r3, [pc, #476]	@ (800367c <NLLS+0x2424>)
 800349e:	443b      	add	r3, r7
 80034a0:	edd3 7a00 	vldr	s15, [r3]
 80034a4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80034a8:	4b7a      	ldr	r3, [pc, #488]	@ (8003694 <NLLS+0x243c>)
 80034aa:	443b      	add	r3, r7
 80034ac:	edd3 7a00 	vldr	s15, [r3]
 80034b0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80034b4:	4b78      	ldr	r3, [pc, #480]	@ (8003698 <NLLS+0x2440>)
 80034b6:	443b      	add	r3, r7
 80034b8:	edd3 7a00 	vldr	s15, [r3]
 80034bc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80034c0:	4b6c      	ldr	r3, [pc, #432]	@ (8003674 <NLLS+0x241c>)
 80034c2:	443b      	add	r3, r7
 80034c4:	edd3 7a00 	vldr	s15, [r3]
 80034c8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80034cc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80034d0:	4b69      	ldr	r3, [pc, #420]	@ (8003678 <NLLS+0x2420>)
 80034d2:	443b      	add	r3, r7
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 80034dc:	f6a2 72ec 	subw	r2, r2, #4076	@ 0xfec
 80034e0:	6812      	ldr	r2, [r2, #0]
 80034e2:	4413      	add	r3, r2
 80034e4:	ed93 6a00 	vldr	s12, [r3]
 80034e8:	4b64      	ldr	r3, [pc, #400]	@ (800367c <NLLS+0x2424>)
 80034ea:	443b      	add	r3, r7
 80034ec:	edd3 7a00 	vldr	s15, [r3]
 80034f0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80034f4:	4b67      	ldr	r3, [pc, #412]	@ (8003694 <NLLS+0x243c>)
 80034f6:	443b      	add	r3, r7
 80034f8:	edd3 7a00 	vldr	s15, [r3]
 80034fc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003500:	4b65      	ldr	r3, [pc, #404]	@ (8003698 <NLLS+0x2440>)
 8003502:	443b      	add	r3, r7
 8003504:	edd3 7a00 	vldr	s15, [r3]
 8003508:	ee26 6a27 	vmul.f32	s12, s12, s15
 800350c:	4b59      	ldr	r3, [pc, #356]	@ (8003674 <NLLS+0x241c>)
 800350e:	443b      	add	r3, r7
 8003510:	edd3 7a00 	vldr	s15, [r3]
 8003514:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003518:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800351c:	4b5f      	ldr	r3, [pc, #380]	@ (800369c <NLLS+0x2444>)
 800351e:	443b      	add	r3, r7
 8003520:	ed93 6a00 	vldr	s12, [r3]
 8003524:	4b5b      	ldr	r3, [pc, #364]	@ (8003694 <NLLS+0x243c>)
 8003526:	443b      	add	r3, r7
 8003528:	edd3 7a00 	vldr	s15, [r3]
 800352c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003530:	4b53      	ldr	r3, [pc, #332]	@ (8003680 <NLLS+0x2428>)
 8003532:	443b      	add	r3, r7
 8003534:	edd3 7a00 	vldr	s15, [r3]
 8003538:	ee26 6a27 	vmul.f32	s12, s12, s15
 800353c:	4b4d      	ldr	r3, [pc, #308]	@ (8003674 <NLLS+0x241c>)
 800353e:	443b      	add	r3, r7
 8003540:	edd3 7a00 	vldr	s15, [r3]
 8003544:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003548:	4b4a      	ldr	r3, [pc, #296]	@ (8003674 <NLLS+0x241c>)
 800354a:	443b      	add	r3, r7
 800354c:	edd3 7a00 	vldr	s15, [r3]
 8003550:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003554:	4b52      	ldr	r3, [pc, #328]	@ (80036a0 <NLLS+0x2448>)
 8003556:	443b      	add	r3, r7
 8003558:	edd3 7a00 	vldr	s15, [r3]
 800355c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003560:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003564:	4b44      	ldr	r3, [pc, #272]	@ (8003678 <NLLS+0x2420>)
 8003566:	443b      	add	r3, r7
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8003570:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8003574:	6812      	ldr	r2, [r2, #0]
 8003576:	4413      	add	r3, r2
 8003578:	ed93 6a00 	vldr	s12, [r3]
 800357c:	4b45      	ldr	r3, [pc, #276]	@ (8003694 <NLLS+0x243c>)
 800357e:	443b      	add	r3, r7
 8003580:	edd3 7a00 	vldr	s15, [r3]
 8003584:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003588:	4b3d      	ldr	r3, [pc, #244]	@ (8003680 <NLLS+0x2428>)
 800358a:	443b      	add	r3, r7
 800358c:	edd3 7a00 	vldr	s15, [r3]
 8003590:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003594:	4b37      	ldr	r3, [pc, #220]	@ (8003674 <NLLS+0x241c>)
 8003596:	443b      	add	r3, r7
 8003598:	edd3 7a00 	vldr	s15, [r3]
 800359c:	ee26 6a27 	vmul.f32	s12, s12, s15
 80035a0:	4b34      	ldr	r3, [pc, #208]	@ (8003674 <NLLS+0x241c>)
 80035a2:	443b      	add	r3, r7
 80035a4:	edd3 7a00 	vldr	s15, [r3]
 80035a8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80035ac:	4b3c      	ldr	r3, [pc, #240]	@ (80036a0 <NLLS+0x2448>)
 80035ae:	443b      	add	r3, r7
 80035b0:	edd3 7a00 	vldr	s15, [r3]
 80035b4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80035b8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80035bc:	4b37      	ldr	r3, [pc, #220]	@ (800369c <NLLS+0x2444>)
 80035be:	443b      	add	r3, r7
 80035c0:	ed93 6a00 	vldr	s12, [r3]
 80035c4:	4b33      	ldr	r3, [pc, #204]	@ (8003694 <NLLS+0x243c>)
 80035c6:	443b      	add	r3, r7
 80035c8:	edd3 7a00 	vldr	s15, [r3]
 80035cc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80035d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003680 <NLLS+0x2428>)
 80035d2:	443b      	add	r3, r7
 80035d4:	edd3 7a00 	vldr	s15, [r3]
 80035d8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80035dc:	4b2a      	ldr	r3, [pc, #168]	@ (8003688 <NLLS+0x2430>)
 80035de:	443b      	add	r3, r7
 80035e0:	edd3 7a00 	vldr	s15, [r3]
 80035e4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80035e8:	4b27      	ldr	r3, [pc, #156]	@ (8003688 <NLLS+0x2430>)
 80035ea:	443b      	add	r3, r7
 80035ec:	edd3 7a00 	vldr	s15, [r3]
 80035f0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80035f4:	4b25      	ldr	r3, [pc, #148]	@ (800368c <NLLS+0x2434>)
 80035f6:	443b      	add	r3, r7
 80035f8:	edd3 7a00 	vldr	s15, [r3]
 80035fc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003600:	4b22      	ldr	r3, [pc, #136]	@ (800368c <NLLS+0x2434>)
 8003602:	443b      	add	r3, r7
 8003604:	edd3 7a00 	vldr	s15, [r3]
 8003608:	ee26 6a27 	vmul.f32	s12, s12, s15
 800360c:	4b24      	ldr	r3, [pc, #144]	@ (80036a0 <NLLS+0x2448>)
 800360e:	443b      	add	r3, r7
 8003610:	edd3 7a00 	vldr	s15, [r3]
 8003614:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003618:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800361c:	4b16      	ldr	r3, [pc, #88]	@ (8003678 <NLLS+0x2420>)
 800361e:	443b      	add	r3, r7
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8003628:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 800362c:	6812      	ldr	r2, [r2, #0]
 800362e:	4413      	add	r3, r2
 8003630:	ed93 6a00 	vldr	s12, [r3]
 8003634:	4b17      	ldr	r3, [pc, #92]	@ (8003694 <NLLS+0x243c>)
 8003636:	443b      	add	r3, r7
 8003638:	edd3 7a00 	vldr	s15, [r3]
 800363c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003640:	4b0f      	ldr	r3, [pc, #60]	@ (8003680 <NLLS+0x2428>)
 8003642:	443b      	add	r3, r7
 8003644:	edd3 7a00 	vldr	s15, [r3]
 8003648:	ee26 6a27 	vmul.f32	s12, s12, s15
 800364c:	4b0e      	ldr	r3, [pc, #56]	@ (8003688 <NLLS+0x2430>)
 800364e:	443b      	add	r3, r7
 8003650:	edd3 7a00 	vldr	s15, [r3]
 8003654:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003658:	4b0b      	ldr	r3, [pc, #44]	@ (8003688 <NLLS+0x2430>)
 800365a:	443b      	add	r3, r7
 800365c:	edd3 7a00 	vldr	s15, [r3]
 8003660:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003664:	4b09      	ldr	r3, [pc, #36]	@ (800368c <NLLS+0x2434>)
 8003666:	443b      	add	r3, r7
 8003668:	edd3 7a00 	vldr	s15, [r3]
 800366c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003670:	e018      	b.n	80036a4 <NLLS+0x244c>
 8003672:	bf00      	nop
 8003674:	00016f80 	.word	0x00016f80
 8003678:	00016fb8 	.word	0x00016fb8
 800367c:	00016fe8 	.word	0x00016fe8
 8003680:	00016fe0 	.word	0x00016fe0
 8003684:	00016fd8 	.word	0x00016fd8
 8003688:	00016f74 	.word	0x00016f74
 800368c:	00016f7c 	.word	0x00016f7c
 8003690:	00016fd4 	.word	0x00016fd4
 8003694:	00016fe4 	.word	0x00016fe4
 8003698:	00016f78 	.word	0x00016f78
 800369c:	00016fdc 	.word	0x00016fdc
 80036a0:	00016f84 	.word	0x00016f84
 80036a4:	4bbf      	ldr	r3, [pc, #764]	@ (80039a4 <NLLS+0x274c>)
 80036a6:	443b      	add	r3, r7
 80036a8:	edd3 7a00 	vldr	s15, [r3]
 80036ac:	ee26 6a27 	vmul.f32	s12, s12, s15
 80036b0:	4bbd      	ldr	r3, [pc, #756]	@ (80039a8 <NLLS+0x2750>)
 80036b2:	443b      	add	r3, r7
 80036b4:	edd3 7a00 	vldr	s15, [r3]
 80036b8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80036bc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80036c0:	4bba      	ldr	r3, [pc, #744]	@ (80039ac <NLLS+0x2754>)
 80036c2:	443b      	add	r3, r7
 80036c4:	ed93 6a00 	vldr	s12, [r3]
 80036c8:	4bb9      	ldr	r3, [pc, #740]	@ (80039b0 <NLLS+0x2758>)
 80036ca:	443b      	add	r3, r7
 80036cc:	edd3 7a00 	vldr	s15, [r3]
 80036d0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80036d4:	4bb7      	ldr	r3, [pc, #732]	@ (80039b4 <NLLS+0x275c>)
 80036d6:	443b      	add	r3, r7
 80036d8:	edd3 7a00 	vldr	s15, [r3]
 80036dc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80036e0:	4bb5      	ldr	r3, [pc, #724]	@ (80039b8 <NLLS+0x2760>)
 80036e2:	443b      	add	r3, r7
 80036e4:	edd3 7a00 	vldr	s15, [r3]
 80036e8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80036ec:	4bb3      	ldr	r3, [pc, #716]	@ (80039bc <NLLS+0x2764>)
 80036ee:	443b      	add	r3, r7
 80036f0:	edd3 7a00 	vldr	s15, [r3]
 80036f4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80036f8:	4bb1      	ldr	r3, [pc, #708]	@ (80039c0 <NLLS+0x2768>)
 80036fa:	443b      	add	r3, r7
 80036fc:	edd3 7a00 	vldr	s15, [r3]
 8003700:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003704:	4baf      	ldr	r3, [pc, #700]	@ (80039c4 <NLLS+0x276c>)
 8003706:	443b      	add	r3, r7
 8003708:	edd3 7a00 	vldr	s15, [r3]
 800370c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003710:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003714:	4bac      	ldr	r3, [pc, #688]	@ (80039c8 <NLLS+0x2770>)
 8003716:	443b      	add	r3, r7
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8003720:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8003724:	6812      	ldr	r2, [r2, #0]
 8003726:	4413      	add	r3, r2
 8003728:	ed93 6a00 	vldr	s12, [r3]
 800372c:	4ba0      	ldr	r3, [pc, #640]	@ (80039b0 <NLLS+0x2758>)
 800372e:	443b      	add	r3, r7
 8003730:	edd3 7a00 	vldr	s15, [r3]
 8003734:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003738:	4b9e      	ldr	r3, [pc, #632]	@ (80039b4 <NLLS+0x275c>)
 800373a:	443b      	add	r3, r7
 800373c:	edd3 7a00 	vldr	s15, [r3]
 8003740:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003744:	4b9c      	ldr	r3, [pc, #624]	@ (80039b8 <NLLS+0x2760>)
 8003746:	443b      	add	r3, r7
 8003748:	edd3 7a00 	vldr	s15, [r3]
 800374c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003750:	4b9a      	ldr	r3, [pc, #616]	@ (80039bc <NLLS+0x2764>)
 8003752:	443b      	add	r3, r7
 8003754:	edd3 7a00 	vldr	s15, [r3]
 8003758:	ee26 6a27 	vmul.f32	s12, s12, s15
 800375c:	4b98      	ldr	r3, [pc, #608]	@ (80039c0 <NLLS+0x2768>)
 800375e:	443b      	add	r3, r7
 8003760:	edd3 7a00 	vldr	s15, [r3]
 8003764:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003768:	4b96      	ldr	r3, [pc, #600]	@ (80039c4 <NLLS+0x276c>)
 800376a:	443b      	add	r3, r7
 800376c:	edd3 7a00 	vldr	s15, [r3]
 8003770:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003774:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800377c:	eef1 6a67 	vneg.f32	s13, s15
 8003780:	4b92      	ldr	r3, [pc, #584]	@ (80039cc <NLLS+0x2774>)
 8003782:	443b      	add	r3, r7
 8003784:	edd3 7a00 	vldr	s15, [r3]
 8003788:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800378c:	4b88      	ldr	r3, [pc, #544]	@ (80039b0 <NLLS+0x2758>)
 800378e:	443b      	add	r3, r7
 8003790:	edd3 7a00 	vldr	s15, [r3]
 8003794:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003798:	4b85      	ldr	r3, [pc, #532]	@ (80039b0 <NLLS+0x2758>)
 800379a:	443b      	add	r3, r7
 800379c:	edd3 7a00 	vldr	s15, [r3]
 80037a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037a4:	4b83      	ldr	r3, [pc, #524]	@ (80039b4 <NLLS+0x275c>)
 80037a6:	443b      	add	r3, r7
 80037a8:	edd3 7a00 	vldr	s15, [r3]
 80037ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037b0:	4b81      	ldr	r3, [pc, #516]	@ (80039b8 <NLLS+0x2760>)
 80037b2:	443b      	add	r3, r7
 80037b4:	edd3 7a00 	vldr	s15, [r3]
 80037b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037bc:	4b7e      	ldr	r3, [pc, #504]	@ (80039b8 <NLLS+0x2760>)
 80037be:	443b      	add	r3, r7
 80037c0:	edd3 7a00 	vldr	s15, [r3]
 80037c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037c8:	4b76      	ldr	r3, [pc, #472]	@ (80039a4 <NLLS+0x274c>)
 80037ca:	443b      	add	r3, r7
 80037cc:	edd3 7a00 	vldr	s15, [r3]
 80037d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037d4:	4b73      	ldr	r3, [pc, #460]	@ (80039a4 <NLLS+0x274c>)
 80037d6:	443b      	add	r3, r7
 80037d8:	edd3 7a00 	vldr	s15, [r3]
 80037dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037e0:	4b76      	ldr	r3, [pc, #472]	@ (80039bc <NLLS+0x2764>)
 80037e2:	443b      	add	r3, r7
 80037e4:	edd3 7a00 	vldr	s15, [r3]
 80037e8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80037ec:	4b73      	ldr	r3, [pc, #460]	@ (80039bc <NLLS+0x2764>)
 80037ee:	443b      	add	r3, r7
 80037f0:	edd3 7a00 	vldr	s15, [r3]
 80037f4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80037f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003800:	f649 73f0 	movw	r3, #40944	@ 0x9ff0
 8003804:	443b      	add	r3, r7
 8003806:	4619      	mov	r1, r3
 8003808:	4b6f      	ldr	r3, [pc, #444]	@ (80039c8 <NLLS+0x2770>)
 800380a:	443b      	add	r3, r7
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	f641 230a 	movw	r3, #6666	@ 0x1a0a
 8003812:	4413      	add	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	440b      	add	r3, r1
 8003818:	3bf4      	subs	r3, #244	@ 0xf4
 800381a:	edc3 7a00 	vstr	s15, [r3]

			mat_H[7][i] = (2*sin_phi*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*(cos_phi*cos_phi*cos_phi)*cos_rho*cos_rho) - (2*(bx - mx[i])*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sz*cos_lambda*cos_phi*cos_rho);
 800381e:	4b69      	ldr	r3, [pc, #420]	@ (80039c4 <NLLS+0x276c>)
 8003820:	443b      	add	r3, r7
 8003822:	edd3 7a00 	vldr	s15, [r3]
 8003826:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800382a:	4b61      	ldr	r3, [pc, #388]	@ (80039b0 <NLLS+0x2758>)
 800382c:	443b      	add	r3, r7
 800382e:	edd3 6a00 	vldr	s13, [r3]
 8003832:	4b60      	ldr	r3, [pc, #384]	@ (80039b4 <NLLS+0x275c>)
 8003834:	443b      	add	r3, r7
 8003836:	edd3 7a00 	vldr	s15, [r3]
 800383a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800383e:	4b60      	ldr	r3, [pc, #384]	@ (80039c0 <NLLS+0x2768>)
 8003840:	443b      	add	r3, r7
 8003842:	ed93 6a00 	vldr	s12, [r3]
 8003846:	4b58      	ldr	r3, [pc, #352]	@ (80039a8 <NLLS+0x2750>)
 8003848:	443b      	add	r3, r7
 800384a:	edd3 7a00 	vldr	s15, [r3]
 800384e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003852:	4b59      	ldr	r3, [pc, #356]	@ (80039b8 <NLLS+0x2760>)
 8003854:	443b      	add	r3, r7
 8003856:	edd3 5a00 	vldr	s11, [r3]
 800385a:	4b58      	ldr	r3, [pc, #352]	@ (80039bc <NLLS+0x2764>)
 800385c:	443b      	add	r3, r7
 800385e:	edd3 7a00 	vldr	s15, [r3]
 8003862:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003866:	4b57      	ldr	r3, [pc, #348]	@ (80039c4 <NLLS+0x276c>)
 8003868:	443b      	add	r3, r7
 800386a:	edd3 7a00 	vldr	s15, [r3]
 800386e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003872:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003876:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800387a:	4b53      	ldr	r3, [pc, #332]	@ (80039c8 <NLLS+0x2770>)
 800387c:	443b      	add	r3, r7
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8003886:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 800388a:	6812      	ldr	r2, [r2, #0]
 800388c:	4413      	add	r3, r2
 800388e:	edd3 7a00 	vldr	s15, [r3]
 8003892:	4b46      	ldr	r3, [pc, #280]	@ (80039ac <NLLS+0x2754>)
 8003894:	443b      	add	r3, r7
 8003896:	ed93 6a00 	vldr	s12, [r3]
 800389a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800389e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80038a2:	4b4a      	ldr	r3, [pc, #296]	@ (80039cc <NLLS+0x2774>)
 80038a4:	443b      	add	r3, r7
 80038a6:	ed93 6a00 	vldr	s12, [r3]
 80038aa:	4b41      	ldr	r3, [pc, #260]	@ (80039b0 <NLLS+0x2758>)
 80038ac:	443b      	add	r3, r7
 80038ae:	edd3 7a00 	vldr	s15, [r3]
 80038b2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80038b6:	4b41      	ldr	r3, [pc, #260]	@ (80039bc <NLLS+0x2764>)
 80038b8:	443b      	add	r3, r7
 80038ba:	edd3 7a00 	vldr	s15, [r3]
 80038be:	ee26 6a27 	vmul.f32	s12, s12, s15
 80038c2:	4b41      	ldr	r3, [pc, #260]	@ (80039c8 <NLLS+0x2770>)
 80038c4:	443b      	add	r3, r7
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 80038ce:	f6a2 72ec 	subw	r2, r2, #4076	@ 0xfec
 80038d2:	6812      	ldr	r2, [r2, #0]
 80038d4:	4413      	add	r3, r2
 80038d6:	edd3 7a00 	vldr	s15, [r3]
 80038da:	4b3d      	ldr	r3, [pc, #244]	@ (80039d0 <NLLS+0x2778>)
 80038dc:	443b      	add	r3, r7
 80038de:	edd3 5a00 	vldr	s11, [r3]
 80038e2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80038e6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80038ea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80038ee:	4b37      	ldr	r3, [pc, #220]	@ (80039cc <NLLS+0x2774>)
 80038f0:	443b      	add	r3, r7
 80038f2:	ed93 6a00 	vldr	s12, [r3]
 80038f6:	4b2f      	ldr	r3, [pc, #188]	@ (80039b4 <NLLS+0x275c>)
 80038f8:	443b      	add	r3, r7
 80038fa:	edd3 7a00 	vldr	s15, [r3]
 80038fe:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003902:	4b2f      	ldr	r3, [pc, #188]	@ (80039c0 <NLLS+0x2768>)
 8003904:	443b      	add	r3, r7
 8003906:	edd3 7a00 	vldr	s15, [r3]
 800390a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800390e:	4b2e      	ldr	r3, [pc, #184]	@ (80039c8 <NLLS+0x2770>)
 8003910:	443b      	add	r3, r7
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 800391a:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 800391e:	6812      	ldr	r2, [r2, #0]
 8003920:	4413      	add	r3, r2
 8003922:	edd3 7a00 	vldr	s15, [r3]
 8003926:	4b2b      	ldr	r3, [pc, #172]	@ (80039d4 <NLLS+0x277c>)
 8003928:	443b      	add	r3, r7
 800392a:	edd3 5a00 	vldr	s11, [r3]
 800392e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003932:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003936:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800393a:	4b1d      	ldr	r3, [pc, #116]	@ (80039b0 <NLLS+0x2758>)
 800393c:	443b      	add	r3, r7
 800393e:	ed93 6a00 	vldr	s12, [r3]
 8003942:	4b1c      	ldr	r3, [pc, #112]	@ (80039b4 <NLLS+0x275c>)
 8003944:	443b      	add	r3, r7
 8003946:	edd3 7a00 	vldr	s15, [r3]
 800394a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800394e:	4b1c      	ldr	r3, [pc, #112]	@ (80039c0 <NLLS+0x2768>)
 8003950:	443b      	add	r3, r7
 8003952:	edd3 5a00 	vldr	s11, [r3]
 8003956:	4b14      	ldr	r3, [pc, #80]	@ (80039a8 <NLLS+0x2750>)
 8003958:	443b      	add	r3, r7
 800395a:	edd3 7a00 	vldr	s15, [r3]
 800395e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003962:	4b15      	ldr	r3, [pc, #84]	@ (80039b8 <NLLS+0x2760>)
 8003964:	443b      	add	r3, r7
 8003966:	ed93 5a00 	vldr	s10, [r3]
 800396a:	4b14      	ldr	r3, [pc, #80]	@ (80039bc <NLLS+0x2764>)
 800396c:	443b      	add	r3, r7
 800396e:	edd3 7a00 	vldr	s15, [r3]
 8003972:	ee25 5a27 	vmul.f32	s10, s10, s15
 8003976:	4b13      	ldr	r3, [pc, #76]	@ (80039c4 <NLLS+0x276c>)
 8003978:	443b      	add	r3, r7
 800397a:	edd3 7a00 	vldr	s15, [r3]
 800397e:	ee65 7a27 	vmul.f32	s15, s10, s15
 8003982:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003986:	ee26 6a27 	vmul.f32	s12, s12, s15
 800398a:	4b0f      	ldr	r3, [pc, #60]	@ (80039c8 <NLLS+0x2770>)
 800398c:	443b      	add	r3, r7
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8003996:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 800399a:	6812      	ldr	r2, [r2, #0]
 800399c:	4413      	add	r3, r2
 800399e:	edd3 7a00 	vldr	s15, [r3]
 80039a2:	e019      	b.n	80039d8 <NLLS+0x2780>
 80039a4:	00016f7c 	.word	0x00016f7c
 80039a8:	00016f84 	.word	0x00016f84
 80039ac:	00016fdc 	.word	0x00016fdc
 80039b0:	00016fe4 	.word	0x00016fe4
 80039b4:	00016fe0 	.word	0x00016fe0
 80039b8:	00016f74 	.word	0x00016f74
 80039bc:	00016f78 	.word	0x00016f78
 80039c0:	00016f80 	.word	0x00016f80
 80039c4:	00016f88 	.word	0x00016f88
 80039c8:	00016fb8 	.word	0x00016fb8
 80039cc:	00016fe8 	.word	0x00016fe8
 80039d0:	00016fd4 	.word	0x00016fd4
 80039d4:	00016fd8 	.word	0x00016fd8
 80039d8:	4bc0      	ldr	r3, [pc, #768]	@ (8003cdc <NLLS+0x2a84>)
 80039da:	443b      	add	r3, r7
 80039dc:	edd3 5a00 	vldr	s11, [r3]
 80039e0:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80039e4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80039e8:	4bbd      	ldr	r3, [pc, #756]	@ (8003ce0 <NLLS+0x2a88>)
 80039ea:	443b      	add	r3, r7
 80039ec:	edd3 5a00 	vldr	s11, [r3]
 80039f0:	4bbc      	ldr	r3, [pc, #752]	@ (8003ce4 <NLLS+0x2a8c>)
 80039f2:	443b      	add	r3, r7
 80039f4:	edd3 7a00 	vldr	s15, [r3]
 80039f8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80039fc:	4bba      	ldr	r3, [pc, #744]	@ (8003ce8 <NLLS+0x2a90>)
 80039fe:	443b      	add	r3, r7
 8003a00:	edd3 7a00 	vldr	s15, [r3]
 8003a04:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003a08:	4bb8      	ldr	r3, [pc, #736]	@ (8003cec <NLLS+0x2a94>)
 8003a0a:	443b      	add	r3, r7
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8003a14:	f6a2 72ec 	subw	r2, r2, #4076	@ 0xfec
 8003a18:	6812      	ldr	r2, [r2, #0]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	edd3 7a00 	vldr	s15, [r3]
 8003a20:	4bb3      	ldr	r3, [pc, #716]	@ (8003cf0 <NLLS+0x2a98>)
 8003a22:	443b      	add	r3, r7
 8003a24:	ed93 5a00 	vldr	s10, [r3]
 8003a28:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003a2c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003a30:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003a34:	4baa      	ldr	r3, [pc, #680]	@ (8003ce0 <NLLS+0x2a88>)
 8003a36:	443b      	add	r3, r7
 8003a38:	edd3 5a00 	vldr	s11, [r3]
 8003a3c:	4bad      	ldr	r3, [pc, #692]	@ (8003cf4 <NLLS+0x2a9c>)
 8003a3e:	443b      	add	r3, r7
 8003a40:	edd3 7a00 	vldr	s15, [r3]
 8003a44:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003a48:	4bab      	ldr	r3, [pc, #684]	@ (8003cf8 <NLLS+0x2aa0>)
 8003a4a:	443b      	add	r3, r7
 8003a4c:	edd3 7a00 	vldr	s15, [r3]
 8003a50:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003a54:	4ba5      	ldr	r3, [pc, #660]	@ (8003cec <NLLS+0x2a94>)
 8003a56:	443b      	add	r3, r7
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8003a60:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 8003a64:	6812      	ldr	r2, [r2, #0]
 8003a66:	4413      	add	r3, r2
 8003a68:	edd3 7a00 	vldr	s15, [r3]
 8003a6c:	4ba3      	ldr	r3, [pc, #652]	@ (8003cfc <NLLS+0x2aa4>)
 8003a6e:	443b      	add	r3, r7
 8003a70:	ed93 5a00 	vldr	s10, [r3]
 8003a74:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003a78:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003a7c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003a80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a84:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003a88:	4b95      	ldr	r3, [pc, #596]	@ (8003ce0 <NLLS+0x2a88>)
 8003a8a:	443b      	add	r3, r7
 8003a8c:	edd3 7a00 	vldr	s15, [r3]
 8003a90:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003a94:	4b93      	ldr	r3, [pc, #588]	@ (8003ce4 <NLLS+0x2a8c>)
 8003a96:	443b      	add	r3, r7
 8003a98:	edd3 7a00 	vldr	s15, [r3]
 8003a9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003aa0:	4b90      	ldr	r3, [pc, #576]	@ (8003ce4 <NLLS+0x2a8c>)
 8003aa2:	443b      	add	r3, r7
 8003aa4:	edd3 7a00 	vldr	s15, [r3]
 8003aa8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003aac:	4b91      	ldr	r3, [pc, #580]	@ (8003cf4 <NLLS+0x2a9c>)
 8003aae:	443b      	add	r3, r7
 8003ab0:	edd3 7a00 	vldr	s15, [r3]
 8003ab4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ab8:	4b8e      	ldr	r3, [pc, #568]	@ (8003cf4 <NLLS+0x2a9c>)
 8003aba:	443b      	add	r3, r7
 8003abc:	edd3 7a00 	vldr	s15, [r3]
 8003ac0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ac4:	4b8e      	ldr	r3, [pc, #568]	@ (8003d00 <NLLS+0x2aa8>)
 8003ac6:	443b      	add	r3, r7
 8003ac8:	edd3 7a00 	vldr	s15, [r3]
 8003acc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ad0:	4b8b      	ldr	r3, [pc, #556]	@ (8003d00 <NLLS+0x2aa8>)
 8003ad2:	443b      	add	r3, r7
 8003ad4:	edd3 7a00 	vldr	s15, [r3]
 8003ad8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003adc:	4b89      	ldr	r3, [pc, #548]	@ (8003d04 <NLLS+0x2aac>)
 8003ade:	443b      	add	r3, r7
 8003ae0:	edd3 7a00 	vldr	s15, [r3]
 8003ae4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8003ae8:	4b86      	ldr	r3, [pc, #536]	@ (8003d04 <NLLS+0x2aac>)
 8003aea:	443b      	add	r3, r7
 8003aec:	edd3 7a00 	vldr	s15, [r3]
 8003af0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003af4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003af8:	4b7b      	ldr	r3, [pc, #492]	@ (8003ce8 <NLLS+0x2a90>)
 8003afa:	443b      	add	r3, r7
 8003afc:	edd3 7a00 	vldr	s15, [r3]
 8003b00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b04:	4b78      	ldr	r3, [pc, #480]	@ (8003ce8 <NLLS+0x2a90>)
 8003b06:	443b      	add	r3, r7
 8003b08:	edd3 7a00 	vldr	s15, [r3]
 8003b0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b14:	4b75      	ldr	r3, [pc, #468]	@ (8003cec <NLLS+0x2a94>)
 8003b16:	443b      	add	r3, r7
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8003b20:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8003b24:	6812      	ldr	r2, [r2, #0]
 8003b26:	4413      	add	r3, r2
 8003b28:	edd3 7a00 	vldr	s15, [r3]
 8003b2c:	4b6b      	ldr	r3, [pc, #428]	@ (8003cdc <NLLS+0x2a84>)
 8003b2e:	443b      	add	r3, r7
 8003b30:	edd3 6a00 	vldr	s13, [r3]
 8003b34:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003b38:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003b3c:	4b69      	ldr	r3, [pc, #420]	@ (8003ce4 <NLLS+0x2a8c>)
 8003b3e:	443b      	add	r3, r7
 8003b40:	ed93 6a00 	vldr	s12, [r3]
 8003b44:	4b6b      	ldr	r3, [pc, #428]	@ (8003cf4 <NLLS+0x2a9c>)
 8003b46:	443b      	add	r3, r7
 8003b48:	edd3 7a00 	vldr	s15, [r3]
 8003b4c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003b50:	4b69      	ldr	r3, [pc, #420]	@ (8003cf8 <NLLS+0x2aa0>)
 8003b52:	443b      	add	r3, r7
 8003b54:	edd3 5a00 	vldr	s11, [r3]
 8003b58:	4b6b      	ldr	r3, [pc, #428]	@ (8003d08 <NLLS+0x2ab0>)
 8003b5a:	443b      	add	r3, r7
 8003b5c:	edd3 7a00 	vldr	s15, [r3]
 8003b60:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003b64:	4b66      	ldr	r3, [pc, #408]	@ (8003d00 <NLLS+0x2aa8>)
 8003b66:	443b      	add	r3, r7
 8003b68:	ed93 5a00 	vldr	s10, [r3]
 8003b6c:	4b5e      	ldr	r3, [pc, #376]	@ (8003ce8 <NLLS+0x2a90>)
 8003b6e:	443b      	add	r3, r7
 8003b70:	edd3 7a00 	vldr	s15, [r3]
 8003b74:	ee25 5a27 	vmul.f32	s10, s10, s15
 8003b78:	4b64      	ldr	r3, [pc, #400]	@ (8003d0c <NLLS+0x2ab4>)
 8003b7a:	443b      	add	r3, r7
 8003b7c:	edd3 7a00 	vldr	s15, [r3]
 8003b80:	ee65 7a27 	vmul.f32	s15, s10, s15
 8003b84:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003b88:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003b8c:	4b57      	ldr	r3, [pc, #348]	@ (8003cec <NLLS+0x2a94>)
 8003b8e:	443b      	add	r3, r7
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8003b98:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8003b9c:	6812      	ldr	r2, [r2, #0]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	edd3 7a00 	vldr	s15, [r3]
 8003ba4:	4b4d      	ldr	r3, [pc, #308]	@ (8003cdc <NLLS+0x2a84>)
 8003ba6:	443b      	add	r3, r7
 8003ba8:	edd3 5a00 	vldr	s11, [r3]
 8003bac:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003bb0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003bb4:	4b4a      	ldr	r3, [pc, #296]	@ (8003ce0 <NLLS+0x2a88>)
 8003bb6:	443b      	add	r3, r7
 8003bb8:	edd3 5a00 	vldr	s11, [r3]
 8003bbc:	4b49      	ldr	r3, [pc, #292]	@ (8003ce4 <NLLS+0x2a8c>)
 8003bbe:	443b      	add	r3, r7
 8003bc0:	edd3 7a00 	vldr	s15, [r3]
 8003bc4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003bc8:	4b47      	ldr	r3, [pc, #284]	@ (8003ce8 <NLLS+0x2a90>)
 8003bca:	443b      	add	r3, r7
 8003bcc:	edd3 7a00 	vldr	s15, [r3]
 8003bd0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003bd4:	4b45      	ldr	r3, [pc, #276]	@ (8003cec <NLLS+0x2a94>)
 8003bd6:	443b      	add	r3, r7
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8003be0:	f6a2 72ec 	subw	r2, r2, #4076	@ 0xfec
 8003be4:	6812      	ldr	r2, [r2, #0]
 8003be6:	4413      	add	r3, r2
 8003be8:	edd3 7a00 	vldr	s15, [r3]
 8003bec:	4b40      	ldr	r3, [pc, #256]	@ (8003cf0 <NLLS+0x2a98>)
 8003bee:	443b      	add	r3, r7
 8003bf0:	ed93 5a00 	vldr	s10, [r3]
 8003bf4:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003bf8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003bfc:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003c00:	4b37      	ldr	r3, [pc, #220]	@ (8003ce0 <NLLS+0x2a88>)
 8003c02:	443b      	add	r3, r7
 8003c04:	edd3 5a00 	vldr	s11, [r3]
 8003c08:	4b3a      	ldr	r3, [pc, #232]	@ (8003cf4 <NLLS+0x2a9c>)
 8003c0a:	443b      	add	r3, r7
 8003c0c:	edd3 7a00 	vldr	s15, [r3]
 8003c10:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003c14:	4b38      	ldr	r3, [pc, #224]	@ (8003cf8 <NLLS+0x2aa0>)
 8003c16:	443b      	add	r3, r7
 8003c18:	edd3 7a00 	vldr	s15, [r3]
 8003c1c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003c20:	4b32      	ldr	r3, [pc, #200]	@ (8003cec <NLLS+0x2a94>)
 8003c22:	443b      	add	r3, r7
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8003c2c:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 8003c30:	6812      	ldr	r2, [r2, #0]
 8003c32:	4413      	add	r3, r2
 8003c34:	edd3 7a00 	vldr	s15, [r3]
 8003c38:	4b30      	ldr	r3, [pc, #192]	@ (8003cfc <NLLS+0x2aa4>)
 8003c3a:	443b      	add	r3, r7
 8003c3c:	ed93 5a00 	vldr	s10, [r3]
 8003c40:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003c44:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003c48:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003c4c:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8003c50:	4b23      	ldr	r3, [pc, #140]	@ (8003ce0 <NLLS+0x2a88>)
 8003c52:	443b      	add	r3, r7
 8003c54:	edd3 7a00 	vldr	s15, [r3]
 8003c58:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8003c5c:	4b21      	ldr	r3, [pc, #132]	@ (8003ce4 <NLLS+0x2a8c>)
 8003c5e:	443b      	add	r3, r7
 8003c60:	edd3 7a00 	vldr	s15, [r3]
 8003c64:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003c68:	4b22      	ldr	r3, [pc, #136]	@ (8003cf4 <NLLS+0x2a9c>)
 8003c6a:	443b      	add	r3, r7
 8003c6c:	edd3 7a00 	vldr	s15, [r3]
 8003c70:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003c74:	4b22      	ldr	r3, [pc, #136]	@ (8003d00 <NLLS+0x2aa8>)
 8003c76:	443b      	add	r3, r7
 8003c78:	edd3 7a00 	vldr	s15, [r3]
 8003c7c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003c80:	4b20      	ldr	r3, [pc, #128]	@ (8003d04 <NLLS+0x2aac>)
 8003c82:	443b      	add	r3, r7
 8003c84:	edd3 7a00 	vldr	s15, [r3]
 8003c88:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003c8c:	4b16      	ldr	r3, [pc, #88]	@ (8003ce8 <NLLS+0x2a90>)
 8003c8e:	443b      	add	r3, r7
 8003c90:	edd3 7a00 	vldr	s15, [r3]
 8003c94:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003c98:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003c9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ca0:	f649 73f0 	movw	r3, #40944	@ 0x9ff0
 8003ca4:	443b      	add	r3, r7
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4b10      	ldr	r3, [pc, #64]	@ (8003cec <NLLS+0x2a94>)
 8003caa:	443b      	add	r3, r7
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	f641 6361 	movw	r3, #7777	@ 0x1e61
 8003cb2:	4413      	add	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	440b      	add	r3, r1
 8003cb8:	3bf4      	subs	r3, #244	@ 0xf4
 8003cba:	edc3 7a00 	vstr	s15, [r3]

			mat_H[8][i] = (2*sin_lambda*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/(sx*sx*sy*sy*sz*sz*(cos_lambda*cos_lambda*cos_lambda)*cos_phi*cos_phi*(cos_rho*cos_rho)) + (2*(sy*sz*(cos_lambda*sin_rho + cos_rho*sin_lambda*sin_phi)*(bx - mx[i]) - sx*sz*cos_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8003cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8003cf8 <NLLS+0x2aa0>)
 8003cc0:	443b      	add	r3, r7
 8003cc2:	edd3 7a00 	vldr	s15, [r3]
 8003cc6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003cca:	4b06      	ldr	r3, [pc, #24]	@ (8003ce4 <NLLS+0x2a8c>)
 8003ccc:	443b      	add	r3, r7
 8003cce:	edd3 6a00 	vldr	s13, [r3]
 8003cd2:	4b08      	ldr	r3, [pc, #32]	@ (8003cf4 <NLLS+0x2a9c>)
 8003cd4:	443b      	add	r3, r7
 8003cd6:	edd3 7a00 	vldr	s15, [r3]
 8003cda:	e019      	b.n	8003d10 <NLLS+0x2ab8>
 8003cdc:	00016fdc 	.word	0x00016fdc
 8003ce0:	00016fe8 	.word	0x00016fe8
 8003ce4:	00016fe4 	.word	0x00016fe4
 8003ce8:	00016f78 	.word	0x00016f78
 8003cec:	00016fb8 	.word	0x00016fb8
 8003cf0:	00016fd4 	.word	0x00016fd4
 8003cf4:	00016fe0 	.word	0x00016fe0
 8003cf8:	00016f80 	.word	0x00016f80
 8003cfc:	00016fd8 	.word	0x00016fd8
 8003d00:	00016f74 	.word	0x00016f74
 8003d04:	00016f7c 	.word	0x00016f7c
 8003d08:	00016f84 	.word	0x00016f84
 8003d0c:	00016f88 	.word	0x00016f88
 8003d10:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003d14:	4bc0      	ldr	r3, [pc, #768]	@ (8004018 <NLLS+0x2dc0>)
 8003d16:	443b      	add	r3, r7
 8003d18:	ed93 6a00 	vldr	s12, [r3]
 8003d1c:	4bbf      	ldr	r3, [pc, #764]	@ (800401c <NLLS+0x2dc4>)
 8003d1e:	443b      	add	r3, r7
 8003d20:	edd3 7a00 	vldr	s15, [r3]
 8003d24:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003d28:	4bbd      	ldr	r3, [pc, #756]	@ (8004020 <NLLS+0x2dc8>)
 8003d2a:	443b      	add	r3, r7
 8003d2c:	edd3 5a00 	vldr	s11, [r3]
 8003d30:	4bbc      	ldr	r3, [pc, #752]	@ (8004024 <NLLS+0x2dcc>)
 8003d32:	443b      	add	r3, r7
 8003d34:	edd3 7a00 	vldr	s15, [r3]
 8003d38:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003d3c:	4bba      	ldr	r3, [pc, #744]	@ (8004028 <NLLS+0x2dd0>)
 8003d3e:	443b      	add	r3, r7
 8003d40:	edd3 7a00 	vldr	s15, [r3]
 8003d44:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003d48:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003d4c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003d50:	4bb6      	ldr	r3, [pc, #728]	@ (800402c <NLLS+0x2dd4>)
 8003d52:	443b      	add	r3, r7
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8003d5c:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8003d60:	6812      	ldr	r2, [r2, #0]
 8003d62:	4413      	add	r3, r2
 8003d64:	edd3 7a00 	vldr	s15, [r3]
 8003d68:	4bb1      	ldr	r3, [pc, #708]	@ (8004030 <NLLS+0x2dd8>)
 8003d6a:	443b      	add	r3, r7
 8003d6c:	ed93 6a00 	vldr	s12, [r3]
 8003d70:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003d74:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003d78:	4bae      	ldr	r3, [pc, #696]	@ (8004034 <NLLS+0x2ddc>)
 8003d7a:	443b      	add	r3, r7
 8003d7c:	ed93 6a00 	vldr	s12, [r3]
 8003d80:	4bad      	ldr	r3, [pc, #692]	@ (8004038 <NLLS+0x2de0>)
 8003d82:	443b      	add	r3, r7
 8003d84:	edd3 7a00 	vldr	s15, [r3]
 8003d88:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003d8c:	4ba5      	ldr	r3, [pc, #660]	@ (8004024 <NLLS+0x2dcc>)
 8003d8e:	443b      	add	r3, r7
 8003d90:	edd3 7a00 	vldr	s15, [r3]
 8003d94:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003d98:	4ba4      	ldr	r3, [pc, #656]	@ (800402c <NLLS+0x2dd4>)
 8003d9a:	443b      	add	r3, r7
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8003da4:	f6a2 72ec 	subw	r2, r2, #4076	@ 0xfec
 8003da8:	6812      	ldr	r2, [r2, #0]
 8003daa:	4413      	add	r3, r2
 8003dac:	edd3 7a00 	vldr	s15, [r3]
 8003db0:	4ba2      	ldr	r3, [pc, #648]	@ (800403c <NLLS+0x2de4>)
 8003db2:	443b      	add	r3, r7
 8003db4:	edd3 5a00 	vldr	s11, [r3]
 8003db8:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003dbc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003dc0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003dc4:	4b9b      	ldr	r3, [pc, #620]	@ (8004034 <NLLS+0x2ddc>)
 8003dc6:	443b      	add	r3, r7
 8003dc8:	ed93 6a00 	vldr	s12, [r3]
 8003dcc:	4b9c      	ldr	r3, [pc, #624]	@ (8004040 <NLLS+0x2de8>)
 8003dce:	443b      	add	r3, r7
 8003dd0:	edd3 7a00 	vldr	s15, [r3]
 8003dd4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003dd8:	4b8f      	ldr	r3, [pc, #572]	@ (8004018 <NLLS+0x2dc0>)
 8003dda:	443b      	add	r3, r7
 8003ddc:	edd3 7a00 	vldr	s15, [r3]
 8003de0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003de4:	4b91      	ldr	r3, [pc, #580]	@ (800402c <NLLS+0x2dd4>)
 8003de6:	443b      	add	r3, r7
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8003df0:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 8003df4:	6812      	ldr	r2, [r2, #0]
 8003df6:	4413      	add	r3, r2
 8003df8:	edd3 7a00 	vldr	s15, [r3]
 8003dfc:	4b91      	ldr	r3, [pc, #580]	@ (8004044 <NLLS+0x2dec>)
 8003dfe:	443b      	add	r3, r7
 8003e00:	edd3 5a00 	vldr	s11, [r3]
 8003e04:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003e08:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003e0c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003e10:	4b89      	ldr	r3, [pc, #548]	@ (8004038 <NLLS+0x2de0>)
 8003e12:	443b      	add	r3, r7
 8003e14:	ed93 6a00 	vldr	s12, [r3]
 8003e18:	4b89      	ldr	r3, [pc, #548]	@ (8004040 <NLLS+0x2de8>)
 8003e1a:	443b      	add	r3, r7
 8003e1c:	edd3 7a00 	vldr	s15, [r3]
 8003e20:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003e24:	4b7c      	ldr	r3, [pc, #496]	@ (8004018 <NLLS+0x2dc0>)
 8003e26:	443b      	add	r3, r7
 8003e28:	edd3 5a00 	vldr	s11, [r3]
 8003e2c:	4b7b      	ldr	r3, [pc, #492]	@ (800401c <NLLS+0x2dc4>)
 8003e2e:	443b      	add	r3, r7
 8003e30:	edd3 7a00 	vldr	s15, [r3]
 8003e34:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003e38:	4b79      	ldr	r3, [pc, #484]	@ (8004020 <NLLS+0x2dc8>)
 8003e3a:	443b      	add	r3, r7
 8003e3c:	ed93 5a00 	vldr	s10, [r3]
 8003e40:	4b78      	ldr	r3, [pc, #480]	@ (8004024 <NLLS+0x2dcc>)
 8003e42:	443b      	add	r3, r7
 8003e44:	edd3 7a00 	vldr	s15, [r3]
 8003e48:	ee25 5a27 	vmul.f32	s10, s10, s15
 8003e4c:	4b76      	ldr	r3, [pc, #472]	@ (8004028 <NLLS+0x2dd0>)
 8003e4e:	443b      	add	r3, r7
 8003e50:	edd3 7a00 	vldr	s15, [r3]
 8003e54:	ee65 7a27 	vmul.f32	s15, s10, s15
 8003e58:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003e5c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003e60:	4b72      	ldr	r3, [pc, #456]	@ (800402c <NLLS+0x2dd4>)
 8003e62:	443b      	add	r3, r7
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8003e6c:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8003e70:	6812      	ldr	r2, [r2, #0]
 8003e72:	4413      	add	r3, r2
 8003e74:	edd3 7a00 	vldr	s15, [r3]
 8003e78:	4b6d      	ldr	r3, [pc, #436]	@ (8004030 <NLLS+0x2dd8>)
 8003e7a:	443b      	add	r3, r7
 8003e7c:	edd3 5a00 	vldr	s11, [r3]
 8003e80:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003e84:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003e88:	4b6a      	ldr	r3, [pc, #424]	@ (8004034 <NLLS+0x2ddc>)
 8003e8a:	443b      	add	r3, r7
 8003e8c:	edd3 5a00 	vldr	s11, [r3]
 8003e90:	4b69      	ldr	r3, [pc, #420]	@ (8004038 <NLLS+0x2de0>)
 8003e92:	443b      	add	r3, r7
 8003e94:	edd3 7a00 	vldr	s15, [r3]
 8003e98:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003e9c:	4b61      	ldr	r3, [pc, #388]	@ (8004024 <NLLS+0x2dcc>)
 8003e9e:	443b      	add	r3, r7
 8003ea0:	edd3 7a00 	vldr	s15, [r3]
 8003ea4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003ea8:	4b60      	ldr	r3, [pc, #384]	@ (800402c <NLLS+0x2dd4>)
 8003eaa:	443b      	add	r3, r7
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8003eb4:	f6a2 72ec 	subw	r2, r2, #4076	@ 0xfec
 8003eb8:	6812      	ldr	r2, [r2, #0]
 8003eba:	4413      	add	r3, r2
 8003ebc:	edd3 7a00 	vldr	s15, [r3]
 8003ec0:	4b5e      	ldr	r3, [pc, #376]	@ (800403c <NLLS+0x2de4>)
 8003ec2:	443b      	add	r3, r7
 8003ec4:	ed93 5a00 	vldr	s10, [r3]
 8003ec8:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003ecc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003ed0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003ed4:	4b57      	ldr	r3, [pc, #348]	@ (8004034 <NLLS+0x2ddc>)
 8003ed6:	443b      	add	r3, r7
 8003ed8:	edd3 5a00 	vldr	s11, [r3]
 8003edc:	4b58      	ldr	r3, [pc, #352]	@ (8004040 <NLLS+0x2de8>)
 8003ede:	443b      	add	r3, r7
 8003ee0:	edd3 7a00 	vldr	s15, [r3]
 8003ee4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003ee8:	4b4b      	ldr	r3, [pc, #300]	@ (8004018 <NLLS+0x2dc0>)
 8003eea:	443b      	add	r3, r7
 8003eec:	edd3 7a00 	vldr	s15, [r3]
 8003ef0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003ef4:	4b4d      	ldr	r3, [pc, #308]	@ (800402c <NLLS+0x2dd4>)
 8003ef6:	443b      	add	r3, r7
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8003f00:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 8003f04:	6812      	ldr	r2, [r2, #0]
 8003f06:	4413      	add	r3, r2
 8003f08:	edd3 7a00 	vldr	s15, [r3]
 8003f0c:	4b4d      	ldr	r3, [pc, #308]	@ (8004044 <NLLS+0x2dec>)
 8003f0e:	443b      	add	r3, r7
 8003f10:	ed93 5a00 	vldr	s10, [r3]
 8003f14:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003f18:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003f1c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003f20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f24:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003f28:	4b42      	ldr	r3, [pc, #264]	@ (8004034 <NLLS+0x2ddc>)
 8003f2a:	443b      	add	r3, r7
 8003f2c:	edd3 7a00 	vldr	s15, [r3]
 8003f30:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003f34:	4b40      	ldr	r3, [pc, #256]	@ (8004038 <NLLS+0x2de0>)
 8003f36:	443b      	add	r3, r7
 8003f38:	edd3 7a00 	vldr	s15, [r3]
 8003f3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f40:	4b3d      	ldr	r3, [pc, #244]	@ (8004038 <NLLS+0x2de0>)
 8003f42:	443b      	add	r3, r7
 8003f44:	edd3 7a00 	vldr	s15, [r3]
 8003f48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f4c:	4b3c      	ldr	r3, [pc, #240]	@ (8004040 <NLLS+0x2de8>)
 8003f4e:	443b      	add	r3, r7
 8003f50:	edd3 7a00 	vldr	s15, [r3]
 8003f54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f58:	4b39      	ldr	r3, [pc, #228]	@ (8004040 <NLLS+0x2de8>)
 8003f5a:	443b      	add	r3, r7
 8003f5c:	edd3 7a00 	vldr	s15, [r3]
 8003f60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f64:	4b2e      	ldr	r3, [pc, #184]	@ (8004020 <NLLS+0x2dc8>)
 8003f66:	443b      	add	r3, r7
 8003f68:	edd3 7a00 	vldr	s15, [r3]
 8003f6c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8003f70:	4b2b      	ldr	r3, [pc, #172]	@ (8004020 <NLLS+0x2dc8>)
 8003f72:	443b      	add	r3, r7
 8003f74:	edd3 7a00 	vldr	s15, [r3]
 8003f78:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003f7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f80:	4b31      	ldr	r3, [pc, #196]	@ (8004048 <NLLS+0x2df0>)
 8003f82:	443b      	add	r3, r7
 8003f84:	edd3 7a00 	vldr	s15, [r3]
 8003f88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f8c:	4b2e      	ldr	r3, [pc, #184]	@ (8004048 <NLLS+0x2df0>)
 8003f8e:	443b      	add	r3, r7
 8003f90:	edd3 7a00 	vldr	s15, [r3]
 8003f94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f98:	4b22      	ldr	r3, [pc, #136]	@ (8004024 <NLLS+0x2dcc>)
 8003f9a:	443b      	add	r3, r7
 8003f9c:	edd3 7a00 	vldr	s15, [r3]
 8003fa0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fac:	4b22      	ldr	r3, [pc, #136]	@ (8004038 <NLLS+0x2de0>)
 8003fae:	443b      	add	r3, r7
 8003fb0:	edd3 6a00 	vldr	s13, [r3]
 8003fb4:	4b22      	ldr	r3, [pc, #136]	@ (8004040 <NLLS+0x2de8>)
 8003fb6:	443b      	add	r3, r7
 8003fb8:	edd3 7a00 	vldr	s15, [r3]
 8003fbc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003fc0:	4b17      	ldr	r3, [pc, #92]	@ (8004020 <NLLS+0x2dc8>)
 8003fc2:	443b      	add	r3, r7
 8003fc4:	ed93 6a00 	vldr	s12, [r3]
 8003fc8:	4b14      	ldr	r3, [pc, #80]	@ (800401c <NLLS+0x2dc4>)
 8003fca:	443b      	add	r3, r7
 8003fcc:	edd3 7a00 	vldr	s15, [r3]
 8003fd0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003fd4:	4b13      	ldr	r3, [pc, #76]	@ (8004024 <NLLS+0x2dcc>)
 8003fd6:	443b      	add	r3, r7
 8003fd8:	edd3 5a00 	vldr	s11, [r3]
 8003fdc:	4b0e      	ldr	r3, [pc, #56]	@ (8004018 <NLLS+0x2dc0>)
 8003fde:	443b      	add	r3, r7
 8003fe0:	edd3 7a00 	vldr	s15, [r3]
 8003fe4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8004028 <NLLS+0x2dd0>)
 8003fea:	443b      	add	r3, r7
 8003fec:	edd3 7a00 	vldr	s15, [r3]
 8003ff0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003ff4:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003ff8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800402c <NLLS+0x2dd4>)
 8003ffe:	443b      	add	r3, r7
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8004008:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 800400c:	6812      	ldr	r2, [r2, #0]
 800400e:	4413      	add	r3, r2
 8004010:	edd3 7a00 	vldr	s15, [r3]
 8004014:	e01a      	b.n	800404c <NLLS+0x2df4>
 8004016:	bf00      	nop
 8004018:	00016f80 	.word	0x00016f80
 800401c:	00016f84 	.word	0x00016f84
 8004020:	00016f74 	.word	0x00016f74
 8004024:	00016f78 	.word	0x00016f78
 8004028:	00016f88 	.word	0x00016f88
 800402c:	00016fb8 	.word	0x00016fb8
 8004030:	00016fdc 	.word	0x00016fdc
 8004034:	00016fe8 	.word	0x00016fe8
 8004038:	00016fe4 	.word	0x00016fe4
 800403c:	00016fd4 	.word	0x00016fd4
 8004040:	00016fe0 	.word	0x00016fe0
 8004044:	00016fd8 	.word	0x00016fd8
 8004048:	00016f7c 	.word	0x00016f7c
 800404c:	4bb3      	ldr	r3, [pc, #716]	@ (800431c <NLLS+0x30c4>)
 800404e:	443b      	add	r3, r7
 8004050:	ed93 6a00 	vldr	s12, [r3]
 8004054:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004058:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800405c:	4bb0      	ldr	r3, [pc, #704]	@ (8004320 <NLLS+0x30c8>)
 800405e:	443b      	add	r3, r7
 8004060:	ed93 6a00 	vldr	s12, [r3]
 8004064:	4baf      	ldr	r3, [pc, #700]	@ (8004324 <NLLS+0x30cc>)
 8004066:	443b      	add	r3, r7
 8004068:	edd3 7a00 	vldr	s15, [r3]
 800406c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004070:	4bad      	ldr	r3, [pc, #692]	@ (8004328 <NLLS+0x30d0>)
 8004072:	443b      	add	r3, r7
 8004074:	edd3 7a00 	vldr	s15, [r3]
 8004078:	ee26 6a27 	vmul.f32	s12, s12, s15
 800407c:	4bab      	ldr	r3, [pc, #684]	@ (800432c <NLLS+0x30d4>)
 800407e:	443b      	add	r3, r7
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8004088:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 800408c:	6812      	ldr	r2, [r2, #0]
 800408e:	4413      	add	r3, r2
 8004090:	edd3 7a00 	vldr	s15, [r3]
 8004094:	4ba6      	ldr	r3, [pc, #664]	@ (8004330 <NLLS+0x30d8>)
 8004096:	443b      	add	r3, r7
 8004098:	edd3 5a00 	vldr	s11, [r3]
 800409c:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80040a0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80040a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80040a8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80040ac:	4ba1      	ldr	r3, [pc, #644]	@ (8004334 <NLLS+0x30dc>)
 80040ae:	443b      	add	r3, r7
 80040b0:	ed93 6a00 	vldr	s12, [r3]
 80040b4:	4b9b      	ldr	r3, [pc, #620]	@ (8004324 <NLLS+0x30cc>)
 80040b6:	443b      	add	r3, r7
 80040b8:	edd3 7a00 	vldr	s15, [r3]
 80040bc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80040c0:	4b9d      	ldr	r3, [pc, #628]	@ (8004338 <NLLS+0x30e0>)
 80040c2:	443b      	add	r3, r7
 80040c4:	edd3 5a00 	vldr	s11, [r3]
 80040c8:	4b9c      	ldr	r3, [pc, #624]	@ (800433c <NLLS+0x30e4>)
 80040ca:	443b      	add	r3, r7
 80040cc:	edd3 7a00 	vldr	s15, [r3]
 80040d0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80040d4:	4b94      	ldr	r3, [pc, #592]	@ (8004328 <NLLS+0x30d0>)
 80040d6:	443b      	add	r3, r7
 80040d8:	ed93 5a00 	vldr	s10, [r3]
 80040dc:	4b98      	ldr	r3, [pc, #608]	@ (8004340 <NLLS+0x30e8>)
 80040de:	443b      	add	r3, r7
 80040e0:	edd3 7a00 	vldr	s15, [r3]
 80040e4:	ee25 5a27 	vmul.f32	s10, s10, s15
 80040e8:	4b96      	ldr	r3, [pc, #600]	@ (8004344 <NLLS+0x30ec>)
 80040ea:	443b      	add	r3, r7
 80040ec:	edd3 7a00 	vldr	s15, [r3]
 80040f0:	ee65 7a27 	vmul.f32	s15, s10, s15
 80040f4:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80040f8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80040fc:	4b8b      	ldr	r3, [pc, #556]	@ (800432c <NLLS+0x30d4>)
 80040fe:	443b      	add	r3, r7
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8004108:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 800410c:	6812      	ldr	r2, [r2, #0]
 800410e:	4413      	add	r3, r2
 8004110:	edd3 7a00 	vldr	s15, [r3]
 8004114:	4b81      	ldr	r3, [pc, #516]	@ (800431c <NLLS+0x30c4>)
 8004116:	443b      	add	r3, r7
 8004118:	edd3 5a00 	vldr	s11, [r3]
 800411c:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8004120:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004124:	4b7e      	ldr	r3, [pc, #504]	@ (8004320 <NLLS+0x30c8>)
 8004126:	443b      	add	r3, r7
 8004128:	edd3 5a00 	vldr	s11, [r3]
 800412c:	4b81      	ldr	r3, [pc, #516]	@ (8004334 <NLLS+0x30dc>)
 800412e:	443b      	add	r3, r7
 8004130:	edd3 7a00 	vldr	s15, [r3]
 8004134:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8004138:	4b81      	ldr	r3, [pc, #516]	@ (8004340 <NLLS+0x30e8>)
 800413a:	443b      	add	r3, r7
 800413c:	edd3 7a00 	vldr	s15, [r3]
 8004140:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8004144:	4b79      	ldr	r3, [pc, #484]	@ (800432c <NLLS+0x30d4>)
 8004146:	443b      	add	r3, r7
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 8004150:	f6a2 72ec 	subw	r2, r2, #4076	@ 0xfec
 8004154:	6812      	ldr	r2, [r2, #0]
 8004156:	4413      	add	r3, r2
 8004158:	edd3 7a00 	vldr	s15, [r3]
 800415c:	4b7a      	ldr	r3, [pc, #488]	@ (8004348 <NLLS+0x30f0>)
 800415e:	443b      	add	r3, r7
 8004160:	ed93 5a00 	vldr	s10, [r3]
 8004164:	ee75 7a67 	vsub.f32	s15, s10, s15
 8004168:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800416c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004170:	4b6b      	ldr	r3, [pc, #428]	@ (8004320 <NLLS+0x30c8>)
 8004172:	443b      	add	r3, r7
 8004174:	edd3 5a00 	vldr	s11, [r3]
 8004178:	4b6a      	ldr	r3, [pc, #424]	@ (8004324 <NLLS+0x30cc>)
 800417a:	443b      	add	r3, r7
 800417c:	edd3 7a00 	vldr	s15, [r3]
 8004180:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8004184:	4b6c      	ldr	r3, [pc, #432]	@ (8004338 <NLLS+0x30e0>)
 8004186:	443b      	add	r3, r7
 8004188:	edd3 7a00 	vldr	s15, [r3]
 800418c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8004190:	4b66      	ldr	r3, [pc, #408]	@ (800432c <NLLS+0x30d4>)
 8004192:	443b      	add	r3, r7
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	f507 627f 	add.w	r2, r7, #4080	@ 0xff0
 800419c:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 80041a0:	6812      	ldr	r2, [r2, #0]
 80041a2:	4413      	add	r3, r2
 80041a4:	edd3 7a00 	vldr	s15, [r3]
 80041a8:	4b61      	ldr	r3, [pc, #388]	@ (8004330 <NLLS+0x30d8>)
 80041aa:	443b      	add	r3, r7
 80041ac:	ed93 5a00 	vldr	s10, [r3]
 80041b0:	ee75 7a67 	vsub.f32	s15, s10, s15
 80041b4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80041b8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80041bc:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80041c0:	4b57      	ldr	r3, [pc, #348]	@ (8004320 <NLLS+0x30c8>)
 80041c2:	443b      	add	r3, r7
 80041c4:	edd3 7a00 	vldr	s15, [r3]
 80041c8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80041cc:	4b59      	ldr	r3, [pc, #356]	@ (8004334 <NLLS+0x30dc>)
 80041ce:	443b      	add	r3, r7
 80041d0:	edd3 7a00 	vldr	s15, [r3]
 80041d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80041d8:	4b56      	ldr	r3, [pc, #344]	@ (8004334 <NLLS+0x30dc>)
 80041da:	443b      	add	r3, r7
 80041dc:	edd3 7a00 	vldr	s15, [r3]
 80041e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80041e4:	4b4f      	ldr	r3, [pc, #316]	@ (8004324 <NLLS+0x30cc>)
 80041e6:	443b      	add	r3, r7
 80041e8:	edd3 7a00 	vldr	s15, [r3]
 80041ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80041f0:	4b4c      	ldr	r3, [pc, #304]	@ (8004324 <NLLS+0x30cc>)
 80041f2:	443b      	add	r3, r7
 80041f4:	edd3 7a00 	vldr	s15, [r3]
 80041f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80041fc:	4b4a      	ldr	r3, [pc, #296]	@ (8004328 <NLLS+0x30d0>)
 80041fe:	443b      	add	r3, r7
 8004200:	edd3 7a00 	vldr	s15, [r3]
 8004204:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004208:	4b47      	ldr	r3, [pc, #284]	@ (8004328 <NLLS+0x30d0>)
 800420a:	443b      	add	r3, r7
 800420c:	edd3 7a00 	vldr	s15, [r3]
 8004210:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004214:	4b4d      	ldr	r3, [pc, #308]	@ (800434c <NLLS+0x30f4>)
 8004216:	443b      	add	r3, r7
 8004218:	edd3 7a00 	vldr	s15, [r3]
 800421c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004220:	4b4a      	ldr	r3, [pc, #296]	@ (800434c <NLLS+0x30f4>)
 8004222:	443b      	add	r3, r7
 8004224:	edd3 7a00 	vldr	s15, [r3]
 8004228:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800422c:	4b44      	ldr	r3, [pc, #272]	@ (8004340 <NLLS+0x30e8>)
 800422e:	443b      	add	r3, r7
 8004230:	edd3 7a00 	vldr	s15, [r3]
 8004234:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004238:	4b41      	ldr	r3, [pc, #260]	@ (8004340 <NLLS+0x30e8>)
 800423a:	443b      	add	r3, r7
 800423c:	edd3 7a00 	vldr	s15, [r3]
 8004240:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004244:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004248:	ee77 7a27 	vadd.f32	s15, s14, s15
 800424c:	f649 73f0 	movw	r3, #40944	@ 0x9ff0
 8004250:	443b      	add	r3, r7
 8004252:	4619      	mov	r1, r3
 8004254:	4b35      	ldr	r3, [pc, #212]	@ (800432c <NLLS+0x30d4>)
 8004256:	443b      	add	r3, r7
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	f242 23b8 	movw	r3, #8888	@ 0x22b8
 800425e:	4413      	add	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	440b      	add	r3, r1
 8004264:	3bf4      	subs	r3, #244	@ 0xf4
 8004266:	edc3 7a00 	vstr	s15, [r3]
		for(int i=0; i < tam; i++)
 800426a:	4b30      	ldr	r3, [pc, #192]	@ (800432c <NLLS+0x30d4>)
 800426c:	443b      	add	r3, r7
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	3301      	adds	r3, #1
 8004272:	4a2e      	ldr	r2, [pc, #184]	@ (800432c <NLLS+0x30d4>)
 8004274:	443a      	add	r2, r7
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	4b2c      	ldr	r3, [pc, #176]	@ (800432c <NLLS+0x30d4>)
 800427a:	443b      	add	r3, r7
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f240 4256 	movw	r2, #1110	@ 0x456
 8004282:	4293      	cmp	r3, r2
 8004284:	f77d a9de 	ble.w	8001644 <NLLS+0x3ec>
		}

		J = 0;
 8004288:	f04f 0300 	mov.w	r3, #0
 800428c:	4a30      	ldr	r2, [pc, #192]	@ (8004350 <NLLS+0x30f8>)
 800428e:	443a      	add	r2, r7
 8004290:	6013      	str	r3, [r2, #0]

		for(int i=0; i < tam; i++)
 8004292:	2300      	movs	r3, #0
 8004294:	4a2f      	ldr	r2, [pc, #188]	@ (8004354 <NLLS+0x30fc>)
 8004296:	443a      	add	r2, r7
 8004298:	6013      	str	r3, [r2, #0]
 800429a:	e02c      	b.n	80042f6 <NLLS+0x309e>
		{
			J += (e[i] * e[i])/2;
 800429c:	4b2e      	ldr	r3, [pc, #184]	@ (8004358 <NLLS+0x3100>)
 800429e:	443b      	add	r3, r7
 80042a0:	f5a3 7257 	sub.w	r2, r3, #860	@ 0x35c
 80042a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004354 <NLLS+0x30fc>)
 80042a6:	443b      	add	r3, r7
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	ed93 7a00 	vldr	s14, [r3]
 80042b2:	4b29      	ldr	r3, [pc, #164]	@ (8004358 <NLLS+0x3100>)
 80042b4:	443b      	add	r3, r7
 80042b6:	f5a3 7257 	sub.w	r2, r3, #860	@ 0x35c
 80042ba:	4b26      	ldr	r3, [pc, #152]	@ (8004354 <NLLS+0x30fc>)
 80042bc:	443b      	add	r3, r7
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	edd3 7a00 	vldr	s15, [r3]
 80042c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042cc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80042d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042d4:	4b1e      	ldr	r3, [pc, #120]	@ (8004350 <NLLS+0x30f8>)
 80042d6:	443b      	add	r3, r7
 80042d8:	ed93 7a00 	vldr	s14, [r3]
 80042dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004350 <NLLS+0x30f8>)
 80042e2:	443b      	add	r3, r7
 80042e4:	edc3 7a00 	vstr	s15, [r3]
		for(int i=0; i < tam; i++)
 80042e8:	4b1a      	ldr	r3, [pc, #104]	@ (8004354 <NLLS+0x30fc>)
 80042ea:	443b      	add	r3, r7
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3301      	adds	r3, #1
 80042f0:	4a18      	ldr	r2, [pc, #96]	@ (8004354 <NLLS+0x30fc>)
 80042f2:	443a      	add	r2, r7
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	4b17      	ldr	r3, [pc, #92]	@ (8004354 <NLLS+0x30fc>)
 80042f8:	443b      	add	r3, r7
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f240 4256 	movw	r2, #1110	@ 0x456
 8004300:	4293      	cmp	r3, r2
 8004302:	ddcb      	ble.n	800429c <NLLS+0x3044>
		}

		if(passo < 2)
 8004304:	4b15      	ldr	r3, [pc, #84]	@ (800435c <NLLS+0x3104>)
 8004306:	443b      	add	r3, r7
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d82a      	bhi.n	8004364 <NLLS+0x310c>
		{
			error_ant = J;
 800430e:	4b10      	ldr	r3, [pc, #64]	@ (8004350 <NLLS+0x30f8>)
 8004310:	443b      	add	r3, r7
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a12      	ldr	r2, [pc, #72]	@ (8004360 <NLLS+0x3108>)
 8004316:	443a      	add	r2, r7
 8004318:	6013      	str	r3, [r2, #0]
 800431a:	e068      	b.n	80043ee <NLLS+0x3196>
 800431c:	00016fdc 	.word	0x00016fdc
 8004320:	00016fe8 	.word	0x00016fe8
 8004324:	00016fe0 	.word	0x00016fe0
 8004328:	00016f74 	.word	0x00016f74
 800432c:	00016fb8 	.word	0x00016fb8
 8004330:	00016fd8 	.word	0x00016fd8
 8004334:	00016fe4 	.word	0x00016fe4
 8004338:	00016f80 	.word	0x00016f80
 800433c:	00016f84 	.word	0x00016f84
 8004340:	00016f78 	.word	0x00016f78
 8004344:	00016f88 	.word	0x00016f88
 8004348:	00016fd4 	.word	0x00016fd4
 800434c:	00016f7c 	.word	0x00016f7c
 8004350:	00016fc0 	.word	0x00016fc0
 8004354:	00016fb4 	.word	0x00016fb4
 8004358:	00014ff0 	.word	0x00014ff0
 800435c:	00016fef 	.word	0x00016fef
 8004360:	00016fc4 	.word	0x00016fc4
		}
		else
		{
			delta_J = 100*fabs(J-error_ant)/J;
 8004364:	4b8c      	ldr	r3, [pc, #560]	@ (8004598 <NLLS+0x3340>)
 8004366:	443b      	add	r3, r7
 8004368:	ed93 7a00 	vldr	s14, [r3]
 800436c:	4b8b      	ldr	r3, [pc, #556]	@ (800459c <NLLS+0x3344>)
 800436e:	443b      	add	r3, r7
 8004370:	edd3 7a00 	vldr	s15, [r3]
 8004374:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004378:	eef0 7ae7 	vabs.f32	s15, s15
 800437c:	ee17 0a90 	vmov	r0, s15
 8004380:	f7fc f902 	bl	8000588 <__aeabi_f2d>
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	4b85      	ldr	r3, [pc, #532]	@ (80045a0 <NLLS+0x3348>)
 800438a:	f7fc f955 	bl	8000638 <__aeabi_dmul>
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	4614      	mov	r4, r2
 8004394:	461d      	mov	r5, r3
 8004396:	4b80      	ldr	r3, [pc, #512]	@ (8004598 <NLLS+0x3340>)
 8004398:	443b      	add	r3, r7
 800439a:	6818      	ldr	r0, [r3, #0]
 800439c:	f7fc f8f4 	bl	8000588 <__aeabi_f2d>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4620      	mov	r0, r4
 80043a6:	4629      	mov	r1, r5
 80043a8:	f7fc fa70 	bl	800088c <__aeabi_ddiv>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4610      	mov	r0, r2
 80043b2:	4619      	mov	r1, r3
 80043b4:	f7fc fc38 	bl	8000c28 <__aeabi_d2f>
 80043b8:	4603      	mov	r3, r0
 80043ba:	4a7a      	ldr	r2, [pc, #488]	@ (80045a4 <NLLS+0x334c>)
 80043bc:	443a      	add	r2, r7
 80043be:	6013      	str	r3, [r2, #0]
			if(delta_J < 0.05)
 80043c0:	4b78      	ldr	r3, [pc, #480]	@ (80045a4 <NLLS+0x334c>)
 80043c2:	443b      	add	r3, r7
 80043c4:	6818      	ldr	r0, [r3, #0]
 80043c6:	f7fc f8df 	bl	8000588 <__aeabi_f2d>
 80043ca:	a371      	add	r3, pc, #452	@ (adr r3, 8004590 <NLLS+0x3338>)
 80043cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d0:	f7fc fba4 	bl	8000b1c <__aeabi_dcmplt>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <NLLS+0x318a>
			{
				loop = 0;
 80043da:	2300      	movs	r3, #0
 80043dc:	4a72      	ldr	r2, [pc, #456]	@ (80045a8 <NLLS+0x3350>)
 80043de:	443a      	add	r2, r7
 80043e0:	7013      	strb	r3, [r2, #0]
			}
			error_ant = J;
 80043e2:	4b6d      	ldr	r3, [pc, #436]	@ (8004598 <NLLS+0x3340>)
 80043e4:	443b      	add	r3, r7
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a6c      	ldr	r2, [pc, #432]	@ (800459c <NLLS+0x3344>)
 80043ea:	443a      	add	r2, r7
 80043ec:	6013      	str	r3, [r2, #0]
		}

		for(int i = 0; i < N; i++)
 80043ee:	2300      	movs	r3, #0
 80043f0:	4a6e      	ldr	r2, [pc, #440]	@ (80045ac <NLLS+0x3354>)
 80043f2:	443a      	add	r2, r7
 80043f4:	6013      	str	r3, [r2, #0]
 80043f6:	e091      	b.n	800451c <NLLS+0x32c4>
		{
			for(int j = 0; j < N; j++)
 80043f8:	2300      	movs	r3, #0
 80043fa:	4a6d      	ldr	r2, [pc, #436]	@ (80045b0 <NLLS+0x3358>)
 80043fc:	443a      	add	r2, r7
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	e07f      	b.n	8004502 <NLLS+0x32aa>
			{
				Ht_H[i][j] = 0;
 8004402:	f649 73f0 	movw	r3, #40944	@ 0x9ff0
 8004406:	443b      	add	r3, r7
 8004408:	f5a3 710e 	sub.w	r1, r3, #568	@ 0x238
 800440c:	4b67      	ldr	r3, [pc, #412]	@ (80045ac <NLLS+0x3354>)
 800440e:	443b      	add	r3, r7
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	4613      	mov	r3, r2
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	4413      	add	r3, r2
 8004418:	4a65      	ldr	r2, [pc, #404]	@ (80045b0 <NLLS+0x3358>)
 800441a:	443a      	add	r2, r7
 800441c:	6812      	ldr	r2, [r2, #0]
 800441e:	4413      	add	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	440b      	add	r3, r1
 8004424:	f04f 0200 	mov.w	r2, #0
 8004428:	601a      	str	r2, [r3, #0]
				for(int k = 0; k < tam; k++)
 800442a:	2300      	movs	r3, #0
 800442c:	4a61      	ldr	r2, [pc, #388]	@ (80045b4 <NLLS+0x335c>)
 800442e:	443a      	add	r2, r7
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	e058      	b.n	80044e6 <NLLS+0x328e>
				{
					Ht_H[i][j] += mat_H[i][k]*mat_H[j][k];
 8004434:	f649 73f0 	movw	r3, #40944	@ 0x9ff0
 8004438:	443b      	add	r3, r7
 800443a:	f5a3 710e 	sub.w	r1, r3, #568	@ 0x238
 800443e:	4b5b      	ldr	r3, [pc, #364]	@ (80045ac <NLLS+0x3354>)
 8004440:	443b      	add	r3, r7
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	4613      	mov	r3, r2
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	4413      	add	r3, r2
 800444a:	4a59      	ldr	r2, [pc, #356]	@ (80045b0 <NLLS+0x3358>)
 800444c:	443a      	add	r2, r7
 800444e:	6812      	ldr	r2, [r2, #0]
 8004450:	4413      	add	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	440b      	add	r3, r1
 8004456:	ed93 7a00 	vldr	s14, [r3]
 800445a:	f649 73f0 	movw	r3, #40944	@ 0x9ff0
 800445e:	443b      	add	r3, r7
 8004460:	4619      	mov	r1, r3
 8004462:	4b52      	ldr	r3, [pc, #328]	@ (80045ac <NLLS+0x3354>)
 8004464:	443b      	add	r3, r7
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f240 4257 	movw	r2, #1111	@ 0x457
 800446c:	fb03 f202 	mul.w	r2, r3, r2
 8004470:	4b50      	ldr	r3, [pc, #320]	@ (80045b4 <NLLS+0x335c>)
 8004472:	443b      	add	r3, r7
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4413      	add	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	440b      	add	r3, r1
 800447c:	3bf4      	subs	r3, #244	@ 0xf4
 800447e:	edd3 6a00 	vldr	s13, [r3]
 8004482:	f649 73f0 	movw	r3, #40944	@ 0x9ff0
 8004486:	443b      	add	r3, r7
 8004488:	4619      	mov	r1, r3
 800448a:	4b49      	ldr	r3, [pc, #292]	@ (80045b0 <NLLS+0x3358>)
 800448c:	443b      	add	r3, r7
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f240 4257 	movw	r2, #1111	@ 0x457
 8004494:	fb03 f202 	mul.w	r2, r3, r2
 8004498:	4b46      	ldr	r3, [pc, #280]	@ (80045b4 <NLLS+0x335c>)
 800449a:	443b      	add	r3, r7
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4413      	add	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	440b      	add	r3, r1
 80044a4:	3bf4      	subs	r3, #244	@ 0xf4
 80044a6:	edd3 7a00 	vldr	s15, [r3]
 80044aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044b2:	f649 73f0 	movw	r3, #40944	@ 0x9ff0
 80044b6:	443b      	add	r3, r7
 80044b8:	f5a3 710e 	sub.w	r1, r3, #568	@ 0x238
 80044bc:	4b3b      	ldr	r3, [pc, #236]	@ (80045ac <NLLS+0x3354>)
 80044be:	443b      	add	r3, r7
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	4613      	mov	r3, r2
 80044c4:	00db      	lsls	r3, r3, #3
 80044c6:	4413      	add	r3, r2
 80044c8:	4a39      	ldr	r2, [pc, #228]	@ (80045b0 <NLLS+0x3358>)
 80044ca:	443a      	add	r2, r7
 80044cc:	6812      	ldr	r2, [r2, #0]
 80044ce:	4413      	add	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	440b      	add	r3, r1
 80044d4:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < tam; k++)
 80044d8:	4b36      	ldr	r3, [pc, #216]	@ (80045b4 <NLLS+0x335c>)
 80044da:	443b      	add	r3, r7
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	3301      	adds	r3, #1
 80044e0:	4a34      	ldr	r2, [pc, #208]	@ (80045b4 <NLLS+0x335c>)
 80044e2:	443a      	add	r2, r7
 80044e4:	6013      	str	r3, [r2, #0]
 80044e6:	4b33      	ldr	r3, [pc, #204]	@ (80045b4 <NLLS+0x335c>)
 80044e8:	443b      	add	r3, r7
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f240 4256 	movw	r2, #1110	@ 0x456
 80044f0:	4293      	cmp	r3, r2
 80044f2:	dd9f      	ble.n	8004434 <NLLS+0x31dc>
			for(int j = 0; j < N; j++)
 80044f4:	4b2e      	ldr	r3, [pc, #184]	@ (80045b0 <NLLS+0x3358>)
 80044f6:	443b      	add	r3, r7
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3301      	adds	r3, #1
 80044fc:	4a2c      	ldr	r2, [pc, #176]	@ (80045b0 <NLLS+0x3358>)
 80044fe:	443a      	add	r2, r7
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	4b2b      	ldr	r3, [pc, #172]	@ (80045b0 <NLLS+0x3358>)
 8004504:	443b      	add	r3, r7
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b08      	cmp	r3, #8
 800450a:	f77f af7a 	ble.w	8004402 <NLLS+0x31aa>
		for(int i = 0; i < N; i++)
 800450e:	4b27      	ldr	r3, [pc, #156]	@ (80045ac <NLLS+0x3354>)
 8004510:	443b      	add	r3, r7
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	3301      	adds	r3, #1
 8004516:	4a25      	ldr	r2, [pc, #148]	@ (80045ac <NLLS+0x3354>)
 8004518:	443a      	add	r2, r7
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	4b23      	ldr	r3, [pc, #140]	@ (80045ac <NLLS+0x3354>)
 800451e:	443b      	add	r3, r7
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b08      	cmp	r3, #8
 8004524:	f77f af68 	ble.w	80043f8 <NLLS+0x31a0>
				}
			}
		}

		inverter_matriz(Ht_H, inv);
 8004528:	4a23      	ldr	r2, [pc, #140]	@ (80045b8 <NLLS+0x3360>)
 800452a:	4b24      	ldr	r3, [pc, #144]	@ (80045bc <NLLS+0x3364>)
 800452c:	4413      	add	r3, r2
 800452e:	19da      	adds	r2, r3, r7
 8004530:	4b23      	ldr	r3, [pc, #140]	@ (80045c0 <NLLS+0x3368>)
 8004532:	f503 33b7 	add.w	r3, r3, #93696	@ 0x16e00
 8004536:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 800453a:	443b      	add	r3, r7
 800453c:	4611      	mov	r1, r2
 800453e:	4618      	mov	r0, r3
 8004540:	f7fc fd70 	bl	8001024 <inverter_matriz>

		for(int i = 0; i < N; i++)
 8004544:	2300      	movs	r3, #0
 8004546:	4a1f      	ldr	r2, [pc, #124]	@ (80045c4 <NLLS+0x336c>)
 8004548:	443a      	add	r2, r7
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	e0b3      	b.n	80046b6 <NLLS+0x345e>
		{
			for(int j = 0; j < tam; j++)
 800454e:	2300      	movs	r3, #0
 8004550:	4a1d      	ldr	r2, [pc, #116]	@ (80045c8 <NLLS+0x3370>)
 8004552:	443a      	add	r2, r7
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	e09f      	b.n	8004698 <NLLS+0x3440>
			{
				mul_mat[i][j] = 0;
 8004558:	f507 637f 	add.w	r3, r7, #4080	@ 0xff0
 800455c:	f6a3 72dc 	subw	r2, r3, #4060	@ 0xfdc
 8004560:	4b18      	ldr	r3, [pc, #96]	@ (80045c4 <NLLS+0x336c>)
 8004562:	443b      	add	r3, r7
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f240 4157 	movw	r1, #1111	@ 0x457
 800456a:	fb03 f101 	mul.w	r1, r3, r1
 800456e:	4b16      	ldr	r3, [pc, #88]	@ (80045c8 <NLLS+0x3370>)
 8004570:	443b      	add	r3, r7
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	440b      	add	r3, r1
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	601a      	str	r2, [r3, #0]
				for(int k = 0; k < N; k++)
 8004580:	2300      	movs	r3, #0
 8004582:	4a12      	ldr	r2, [pc, #72]	@ (80045cc <NLLS+0x3374>)
 8004584:	443a      	add	r2, r7
 8004586:	6013      	str	r3, [r2, #0]
 8004588:	e07a      	b.n	8004680 <NLLS+0x3428>
 800458a:	bf00      	nop
 800458c:	f3af 8000 	nop.w
 8004590:	9999999a 	.word	0x9999999a
 8004594:	3fa99999 	.word	0x3fa99999
 8004598:	00016fc0 	.word	0x00016fc0
 800459c:	00016fc4 	.word	0x00016fc4
 80045a0:	40590000 	.word	0x40590000
 80045a4:	00016f70 	.word	0x00016f70
 80045a8:	00016fee 	.word	0x00016fee
 80045ac:	00016fb0 	.word	0x00016fb0
 80045b0:	00016fac 	.word	0x00016fac
 80045b4:	00016fa8 	.word	0x00016fa8
 80045b8:	ffff2c60 	.word	0xffff2c60
 80045bc:	00016ff0 	.word	0x00016ff0
 80045c0:	ffff2dc8 	.word	0xffff2dc8
 80045c4:	00016fa4 	.word	0x00016fa4
 80045c8:	00016fa0 	.word	0x00016fa0
 80045cc:	00016f9c 	.word	0x00016f9c
				{
					mul_mat[i][j] += inv[i][k]*mat_H[k][j];
 80045d0:	f507 637f 	add.w	r3, r7, #4080	@ 0xff0
 80045d4:	f6a3 72dc 	subw	r2, r3, #4060	@ 0xfdc
 80045d8:	4b72      	ldr	r3, [pc, #456]	@ (80047a4 <NLLS+0x354c>)
 80045da:	443b      	add	r3, r7
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f240 4157 	movw	r1, #1111	@ 0x457
 80045e2:	fb03 f101 	mul.w	r1, r3, r1
 80045e6:	4b70      	ldr	r3, [pc, #448]	@ (80047a8 <NLLS+0x3550>)
 80045e8:	443b      	add	r3, r7
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	440b      	add	r3, r1
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	ed93 7a00 	vldr	s14, [r3]
 80045f6:	f649 73f0 	movw	r3, #40944	@ 0x9ff0
 80045fa:	443b      	add	r3, r7
 80045fc:	f5a3 7168 	sub.w	r1, r3, #928	@ 0x3a0
 8004600:	4b68      	ldr	r3, [pc, #416]	@ (80047a4 <NLLS+0x354c>)
 8004602:	443b      	add	r3, r7
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	4613      	mov	r3, r2
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	4413      	add	r3, r2
 800460c:	4a67      	ldr	r2, [pc, #412]	@ (80047ac <NLLS+0x3554>)
 800460e:	443a      	add	r2, r7
 8004610:	6812      	ldr	r2, [r2, #0]
 8004612:	4413      	add	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	440b      	add	r3, r1
 8004618:	edd3 6a00 	vldr	s13, [r3]
 800461c:	f649 73f0 	movw	r3, #40944	@ 0x9ff0
 8004620:	443b      	add	r3, r7
 8004622:	4619      	mov	r1, r3
 8004624:	4b61      	ldr	r3, [pc, #388]	@ (80047ac <NLLS+0x3554>)
 8004626:	443b      	add	r3, r7
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f240 4257 	movw	r2, #1111	@ 0x457
 800462e:	fb03 f202 	mul.w	r2, r3, r2
 8004632:	4b5d      	ldr	r3, [pc, #372]	@ (80047a8 <NLLS+0x3550>)
 8004634:	443b      	add	r3, r7
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4413      	add	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	440b      	add	r3, r1
 800463e:	3bf4      	subs	r3, #244	@ 0xf4
 8004640:	edd3 7a00 	vldr	s15, [r3]
 8004644:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004648:	ee77 7a27 	vadd.f32	s15, s14, s15
 800464c:	f507 637f 	add.w	r3, r7, #4080	@ 0xff0
 8004650:	f6a3 72dc 	subw	r2, r3, #4060	@ 0xfdc
 8004654:	4b53      	ldr	r3, [pc, #332]	@ (80047a4 <NLLS+0x354c>)
 8004656:	443b      	add	r3, r7
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f240 4157 	movw	r1, #1111	@ 0x457
 800465e:	fb03 f101 	mul.w	r1, r3, r1
 8004662:	4b51      	ldr	r3, [pc, #324]	@ (80047a8 <NLLS+0x3550>)
 8004664:	443b      	add	r3, r7
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	440b      	add	r3, r1
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < N; k++)
 8004672:	4b4e      	ldr	r3, [pc, #312]	@ (80047ac <NLLS+0x3554>)
 8004674:	443b      	add	r3, r7
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	3301      	adds	r3, #1
 800467a:	4a4c      	ldr	r2, [pc, #304]	@ (80047ac <NLLS+0x3554>)
 800467c:	443a      	add	r2, r7
 800467e:	6013      	str	r3, [r2, #0]
 8004680:	4b4a      	ldr	r3, [pc, #296]	@ (80047ac <NLLS+0x3554>)
 8004682:	443b      	add	r3, r7
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b08      	cmp	r3, #8
 8004688:	dda2      	ble.n	80045d0 <NLLS+0x3378>
			for(int j = 0; j < tam; j++)
 800468a:	4b47      	ldr	r3, [pc, #284]	@ (80047a8 <NLLS+0x3550>)
 800468c:	443b      	add	r3, r7
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	3301      	adds	r3, #1
 8004692:	4a45      	ldr	r2, [pc, #276]	@ (80047a8 <NLLS+0x3550>)
 8004694:	443a      	add	r2, r7
 8004696:	6013      	str	r3, [r2, #0]
 8004698:	4b43      	ldr	r3, [pc, #268]	@ (80047a8 <NLLS+0x3550>)
 800469a:	443b      	add	r3, r7
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f240 4256 	movw	r2, #1110	@ 0x456
 80046a2:	4293      	cmp	r3, r2
 80046a4:	f77f af58 	ble.w	8004558 <NLLS+0x3300>
		for(int i = 0; i < N; i++)
 80046a8:	4b3e      	ldr	r3, [pc, #248]	@ (80047a4 <NLLS+0x354c>)
 80046aa:	443b      	add	r3, r7
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3301      	adds	r3, #1
 80046b0:	4a3c      	ldr	r2, [pc, #240]	@ (80047a4 <NLLS+0x354c>)
 80046b2:	443a      	add	r2, r7
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	4b3b      	ldr	r3, [pc, #236]	@ (80047a4 <NLLS+0x354c>)
 80046b8:	443b      	add	r3, r7
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2b08      	cmp	r3, #8
 80046be:	f77f af46 	ble.w	800454e <NLLS+0x32f6>
				}
			}
		}

		for(int i = 0; i < N; i++)
 80046c2:	2300      	movs	r3, #0
 80046c4:	4a3a      	ldr	r2, [pc, #232]	@ (80047b0 <NLLS+0x3558>)
 80046c6:	443a      	add	r2, r7
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	e060      	b.n	800478e <NLLS+0x3536>
		{
			Ht_e[i] = 0;
 80046cc:	f649 73f0 	movw	r3, #40944	@ 0x9ff0
 80046d0:	443b      	add	r3, r7
 80046d2:	f5a3 7217 	sub.w	r2, r3, #604	@ 0x25c
 80046d6:	4b36      	ldr	r3, [pc, #216]	@ (80047b0 <NLLS+0x3558>)
 80046d8:	443b      	add	r3, r7
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	f04f 0200 	mov.w	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]
			for(int j = 0; j < tam; j++)
 80046e6:	2300      	movs	r3, #0
 80046e8:	4a32      	ldr	r2, [pc, #200]	@ (80047b4 <NLLS+0x355c>)
 80046ea:	443a      	add	r2, r7
 80046ec:	6013      	str	r3, [r2, #0]
 80046ee:	e040      	b.n	8004772 <NLLS+0x351a>
			{
				Ht_e[i] += mul_mat[i][j]*e[j];
 80046f0:	f649 73f0 	movw	r3, #40944	@ 0x9ff0
 80046f4:	443b      	add	r3, r7
 80046f6:	f5a3 7217 	sub.w	r2, r3, #604	@ 0x25c
 80046fa:	4b2d      	ldr	r3, [pc, #180]	@ (80047b0 <NLLS+0x3558>)
 80046fc:	443b      	add	r3, r7
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4413      	add	r3, r2
 8004704:	ed93 7a00 	vldr	s14, [r3]
 8004708:	f507 637f 	add.w	r3, r7, #4080	@ 0xff0
 800470c:	f6a3 72dc 	subw	r2, r3, #4060	@ 0xfdc
 8004710:	4b27      	ldr	r3, [pc, #156]	@ (80047b0 <NLLS+0x3558>)
 8004712:	443b      	add	r3, r7
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f240 4157 	movw	r1, #1111	@ 0x457
 800471a:	fb03 f101 	mul.w	r1, r3, r1
 800471e:	4b25      	ldr	r3, [pc, #148]	@ (80047b4 <NLLS+0x355c>)
 8004720:	443b      	add	r3, r7
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	440b      	add	r3, r1
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	edd3 6a00 	vldr	s13, [r3]
 800472e:	4b22      	ldr	r3, [pc, #136]	@ (80047b8 <NLLS+0x3560>)
 8004730:	443b      	add	r3, r7
 8004732:	f5a3 7257 	sub.w	r2, r3, #860	@ 0x35c
 8004736:	4b1f      	ldr	r3, [pc, #124]	@ (80047b4 <NLLS+0x355c>)
 8004738:	443b      	add	r3, r7
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	edd3 7a00 	vldr	s15, [r3]
 8004744:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004748:	ee77 7a27 	vadd.f32	s15, s14, s15
 800474c:	f649 73f0 	movw	r3, #40944	@ 0x9ff0
 8004750:	443b      	add	r3, r7
 8004752:	f5a3 7217 	sub.w	r2, r3, #604	@ 0x25c
 8004756:	4b16      	ldr	r3, [pc, #88]	@ (80047b0 <NLLS+0x3558>)
 8004758:	443b      	add	r3, r7
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	edc3 7a00 	vstr	s15, [r3]
			for(int j = 0; j < tam; j++)
 8004764:	4b13      	ldr	r3, [pc, #76]	@ (80047b4 <NLLS+0x355c>)
 8004766:	443b      	add	r3, r7
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	3301      	adds	r3, #1
 800476c:	4a11      	ldr	r2, [pc, #68]	@ (80047b4 <NLLS+0x355c>)
 800476e:	443a      	add	r2, r7
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	4b10      	ldr	r3, [pc, #64]	@ (80047b4 <NLLS+0x355c>)
 8004774:	443b      	add	r3, r7
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f240 4256 	movw	r2, #1110	@ 0x456
 800477c:	4293      	cmp	r3, r2
 800477e:	ddb7      	ble.n	80046f0 <NLLS+0x3498>
		for(int i = 0; i < N; i++)
 8004780:	4b0b      	ldr	r3, [pc, #44]	@ (80047b0 <NLLS+0x3558>)
 8004782:	443b      	add	r3, r7
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	3301      	adds	r3, #1
 8004788:	4a09      	ldr	r2, [pc, #36]	@ (80047b0 <NLLS+0x3558>)
 800478a:	443a      	add	r2, r7
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	4b08      	ldr	r3, [pc, #32]	@ (80047b0 <NLLS+0x3558>)
 8004790:	443b      	add	r3, r7
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b08      	cmp	r3, #8
 8004796:	dd99      	ble.n	80046cc <NLLS+0x3474>
			}
		}

		for(int i = 0; i < N; i++)
 8004798:	2300      	movs	r3, #0
 800479a:	4a08      	ldr	r2, [pc, #32]	@ (80047bc <NLLS+0x3564>)
 800479c:	443a      	add	r2, r7
 800479e:	6013      	str	r3, [r2, #0]
 80047a0:	e03b      	b.n	800481a <NLLS+0x35c2>
 80047a2:	bf00      	nop
 80047a4:	00016fa4 	.word	0x00016fa4
 80047a8:	00016fa0 	.word	0x00016fa0
 80047ac:	00016f9c 	.word	0x00016f9c
 80047b0:	00016f98 	.word	0x00016f98
 80047b4:	00016f94 	.word	0x00016f94
 80047b8:	00014ff0 	.word	0x00014ff0
 80047bc:	00016f90 	.word	0x00016f90
		{
			p0[i] += Ht_e[i];
 80047c0:	4b50      	ldr	r3, [pc, #320]	@ (8004904 <NLLS+0x36ac>)
 80047c2:	443b      	add	r3, r7
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	f503 33b7 	add.w	r3, r3, #93696	@ 0x16e00
 80047cc:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 80047d0:	443b      	add	r3, r7
 80047d2:	3ba4      	subs	r3, #164	@ 0xa4
 80047d4:	ed93 7a00 	vldr	s14, [r3]
 80047d8:	f649 73f0 	movw	r3, #40944	@ 0x9ff0
 80047dc:	443b      	add	r3, r7
 80047de:	f5a3 7217 	sub.w	r2, r3, #604	@ 0x25c
 80047e2:	4b48      	ldr	r3, [pc, #288]	@ (8004904 <NLLS+0x36ac>)
 80047e4:	443b      	add	r3, r7
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4413      	add	r3, r2
 80047ec:	edd3 7a00 	vldr	s15, [r3]
 80047f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047f4:	4b43      	ldr	r3, [pc, #268]	@ (8004904 <NLLS+0x36ac>)
 80047f6:	443b      	add	r3, r7
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	f503 33b7 	add.w	r3, r3, #93696	@ 0x16e00
 8004800:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8004804:	443b      	add	r3, r7
 8004806:	3ba4      	subs	r3, #164	@ 0xa4
 8004808:	edc3 7a00 	vstr	s15, [r3]
		for(int i = 0; i < N; i++)
 800480c:	4b3d      	ldr	r3, [pc, #244]	@ (8004904 <NLLS+0x36ac>)
 800480e:	443b      	add	r3, r7
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3301      	adds	r3, #1
 8004814:	4a3b      	ldr	r2, [pc, #236]	@ (8004904 <NLLS+0x36ac>)
 8004816:	443a      	add	r2, r7
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	4b3a      	ldr	r3, [pc, #232]	@ (8004904 <NLLS+0x36ac>)
 800481c:	443b      	add	r3, r7
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b08      	cmp	r3, #8
 8004822:	ddcd      	ble.n	80047c0 <NLLS+0x3568>
		}

		passo++;
 8004824:	4b38      	ldr	r3, [pc, #224]	@ (8004908 <NLLS+0x36b0>)
 8004826:	443b      	add	r3, r7
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	3301      	adds	r3, #1
 800482c:	4a36      	ldr	r2, [pc, #216]	@ (8004908 <NLLS+0x36b0>)
 800482e:	443a      	add	r2, r7
 8004830:	7013      	strb	r3, [r2, #0]
	while(loop == 1)
 8004832:	4b36      	ldr	r3, [pc, #216]	@ (800490c <NLLS+0x36b4>)
 8004834:	443b      	add	r3, r7
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	2b01      	cmp	r3, #1
 800483a:	f43c ad6d 	beq.w	8001318 <NLLS+0xc0>
	}
    p[0] = sx;
 800483e:	f507 637f 	add.w	r3, r7, #4080	@ 0xff0
 8004842:	f5a3 637f 	sub.w	r3, r3, #4080	@ 0xff0
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a31      	ldr	r2, [pc, #196]	@ (8004910 <NLLS+0x36b8>)
 800484a:	443a      	add	r2, r7
 800484c:	6812      	ldr	r2, [r2, #0]
 800484e:	601a      	str	r2, [r3, #0]
    p[1] = sy;
 8004850:	f507 637f 	add.w	r3, r7, #4080	@ 0xff0
 8004854:	f5a3 637f 	sub.w	r3, r3, #4080	@ 0xff0
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	3304      	adds	r3, #4
 800485c:	4a2d      	ldr	r2, [pc, #180]	@ (8004914 <NLLS+0x36bc>)
 800485e:	443a      	add	r2, r7
 8004860:	6812      	ldr	r2, [r2, #0]
 8004862:	601a      	str	r2, [r3, #0]
    p[2] = sz;
 8004864:	f507 637f 	add.w	r3, r7, #4080	@ 0xff0
 8004868:	f5a3 637f 	sub.w	r3, r3, #4080	@ 0xff0
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	3308      	adds	r3, #8
 8004870:	4a29      	ldr	r2, [pc, #164]	@ (8004918 <NLLS+0x36c0>)
 8004872:	443a      	add	r2, r7
 8004874:	6812      	ldr	r2, [r2, #0]
 8004876:	601a      	str	r2, [r3, #0]
    p[3] = bx;
 8004878:	f507 637f 	add.w	r3, r7, #4080	@ 0xff0
 800487c:	f5a3 637f 	sub.w	r3, r3, #4080	@ 0xff0
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	330c      	adds	r3, #12
 8004884:	4a25      	ldr	r2, [pc, #148]	@ (800491c <NLLS+0x36c4>)
 8004886:	443a      	add	r2, r7
 8004888:	6812      	ldr	r2, [r2, #0]
 800488a:	601a      	str	r2, [r3, #0]
    p[4] = by;
 800488c:	f507 637f 	add.w	r3, r7, #4080	@ 0xff0
 8004890:	f5a3 637f 	sub.w	r3, r3, #4080	@ 0xff0
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	3310      	adds	r3, #16
 8004898:	4a21      	ldr	r2, [pc, #132]	@ (8004920 <NLLS+0x36c8>)
 800489a:	443a      	add	r2, r7
 800489c:	6812      	ldr	r2, [r2, #0]
 800489e:	601a      	str	r2, [r3, #0]
    p[5] = bz;
 80048a0:	f507 637f 	add.w	r3, r7, #4080	@ 0xff0
 80048a4:	f5a3 637f 	sub.w	r3, r3, #4080	@ 0xff0
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	3314      	adds	r3, #20
 80048ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004924 <NLLS+0x36cc>)
 80048ae:	443a      	add	r2, r7
 80048b0:	6812      	ldr	r2, [r2, #0]
 80048b2:	601a      	str	r2, [r3, #0]
    p[6] = rho;
 80048b4:	f507 637f 	add.w	r3, r7, #4080	@ 0xff0
 80048b8:	f5a3 637f 	sub.w	r3, r3, #4080	@ 0xff0
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	3318      	adds	r3, #24
 80048c0:	4a19      	ldr	r2, [pc, #100]	@ (8004928 <NLLS+0x36d0>)
 80048c2:	443a      	add	r2, r7
 80048c4:	6812      	ldr	r2, [r2, #0]
 80048c6:	601a      	str	r2, [r3, #0]
    p[7] = phi;
 80048c8:	f507 637f 	add.w	r3, r7, #4080	@ 0xff0
 80048cc:	f5a3 637f 	sub.w	r3, r3, #4080	@ 0xff0
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	331c      	adds	r3, #28
 80048d4:	4a15      	ldr	r2, [pc, #84]	@ (800492c <NLLS+0x36d4>)
 80048d6:	443a      	add	r2, r7
 80048d8:	6812      	ldr	r2, [r2, #0]
 80048da:	601a      	str	r2, [r3, #0]
    p[8] = lambida;
 80048dc:	f507 637f 	add.w	r3, r7, #4080	@ 0xff0
 80048e0:	f5a3 637f 	sub.w	r3, r3, #4080	@ 0xff0
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	3320      	adds	r3, #32
 80048e8:	4a11      	ldr	r2, [pc, #68]	@ (8004930 <NLLS+0x36d8>)
 80048ea:	443a      	add	r2, r7
 80048ec:	6812      	ldr	r2, [r2, #0]
 80048ee:	601a      	str	r2, [r3, #0]

    return passo;
 80048f0:	4b05      	ldr	r3, [pc, #20]	@ (8004908 <NLLS+0x36b0>)
 80048f2:	443b      	add	r3, r7
 80048f4:	781b      	ldrb	r3, [r3, #0]
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	f507 37b7 	add.w	r7, r7, #93696	@ 0x16e00
 80048fc:	f507 77f8 	add.w	r7, r7, #496	@ 0x1f0
 8004900:	46bd      	mov	sp, r7
 8004902:	bdb0      	pop	{r4, r5, r7, pc}
 8004904:	00016f90 	.word	0x00016f90
 8004908:	00016fef 	.word	0x00016fef
 800490c:	00016fee 	.word	0x00016fee
 8004910:	00016fe8 	.word	0x00016fe8
 8004914:	00016fe4 	.word	0x00016fe4
 8004918:	00016fe0 	.word	0x00016fe0
 800491c:	00016fdc 	.word	0x00016fdc
 8004920:	00016fd8 	.word	0x00016fd8
 8004924:	00016fd4 	.word	0x00016fd4
 8004928:	00016fd0 	.word	0x00016fd0
 800492c:	00016fcc 	.word	0x00016fcc
 8004930:	00016fc8 	.word	0x00016fc8

08004934 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b08c      	sub	sp, #48	@ 0x30
 8004938:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800493a:	f107 031c 	add.w	r3, r7, #28
 800493e:	2200      	movs	r2, #0
 8004940:	601a      	str	r2, [r3, #0]
 8004942:	605a      	str	r2, [r3, #4]
 8004944:	609a      	str	r2, [r3, #8]
 8004946:	60da      	str	r2, [r3, #12]
 8004948:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800494a:	4b7f      	ldr	r3, [pc, #508]	@ (8004b48 <MX_GPIO_Init+0x214>)
 800494c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800494e:	4a7e      	ldr	r2, [pc, #504]	@ (8004b48 <MX_GPIO_Init+0x214>)
 8004950:	f043 0304 	orr.w	r3, r3, #4
 8004954:	6313      	str	r3, [r2, #48]	@ 0x30
 8004956:	4b7c      	ldr	r3, [pc, #496]	@ (8004b48 <MX_GPIO_Init+0x214>)
 8004958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800495a:	f003 0304 	and.w	r3, r3, #4
 800495e:	61bb      	str	r3, [r7, #24]
 8004960:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004962:	4b79      	ldr	r3, [pc, #484]	@ (8004b48 <MX_GPIO_Init+0x214>)
 8004964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004966:	4a78      	ldr	r2, [pc, #480]	@ (8004b48 <MX_GPIO_Init+0x214>)
 8004968:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800496c:	6313      	str	r3, [r2, #48]	@ 0x30
 800496e:	4b76      	ldr	r3, [pc, #472]	@ (8004b48 <MX_GPIO_Init+0x214>)
 8004970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004976:	617b      	str	r3, [r7, #20]
 8004978:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800497a:	4b73      	ldr	r3, [pc, #460]	@ (8004b48 <MX_GPIO_Init+0x214>)
 800497c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497e:	4a72      	ldr	r2, [pc, #456]	@ (8004b48 <MX_GPIO_Init+0x214>)
 8004980:	f043 0301 	orr.w	r3, r3, #1
 8004984:	6313      	str	r3, [r2, #48]	@ 0x30
 8004986:	4b70      	ldr	r3, [pc, #448]	@ (8004b48 <MX_GPIO_Init+0x214>)
 8004988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	613b      	str	r3, [r7, #16]
 8004990:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004992:	4b6d      	ldr	r3, [pc, #436]	@ (8004b48 <MX_GPIO_Init+0x214>)
 8004994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004996:	4a6c      	ldr	r2, [pc, #432]	@ (8004b48 <MX_GPIO_Init+0x214>)
 8004998:	f043 0302 	orr.w	r3, r3, #2
 800499c:	6313      	str	r3, [r2, #48]	@ 0x30
 800499e:	4b6a      	ldr	r3, [pc, #424]	@ (8004b48 <MX_GPIO_Init+0x214>)
 80049a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80049aa:	4b67      	ldr	r3, [pc, #412]	@ (8004b48 <MX_GPIO_Init+0x214>)
 80049ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ae:	4a66      	ldr	r2, [pc, #408]	@ (8004b48 <MX_GPIO_Init+0x214>)
 80049b0:	f043 0308 	orr.w	r3, r3, #8
 80049b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80049b6:	4b64      	ldr	r3, [pc, #400]	@ (8004b48 <MX_GPIO_Init+0x214>)
 80049b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ba:	f003 0308 	and.w	r3, r3, #8
 80049be:	60bb      	str	r3, [r7, #8]
 80049c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80049c2:	4b61      	ldr	r3, [pc, #388]	@ (8004b48 <MX_GPIO_Init+0x214>)
 80049c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c6:	4a60      	ldr	r2, [pc, #384]	@ (8004b48 <MX_GPIO_Init+0x214>)
 80049c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80049ce:	4b5e      	ldr	r3, [pc, #376]	@ (8004b48 <MX_GPIO_Init+0x214>)
 80049d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d6:	607b      	str	r3, [r7, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80049da:	2200      	movs	r2, #0
 80049dc:	f244 0181 	movw	r1, #16513	@ 0x4081
 80049e0:	485a      	ldr	r0, [pc, #360]	@ (8004b4c <MX_GPIO_Init+0x218>)
 80049e2:	f001 f9eb 	bl	8005dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80049e6:	2200      	movs	r2, #0
 80049e8:	2140      	movs	r1, #64	@ 0x40
 80049ea:	4859      	ldr	r0, [pc, #356]	@ (8004b50 <MX_GPIO_Init+0x21c>)
 80049ec:	f001 f9e6 	bl	8005dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80049f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80049f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80049f6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80049fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049fc:	2300      	movs	r3, #0
 80049fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8004a00:	f107 031c 	add.w	r3, r7, #28
 8004a04:	4619      	mov	r1, r3
 8004a06:	4853      	ldr	r0, [pc, #332]	@ (8004b54 <MX_GPIO_Init+0x220>)
 8004a08:	f001 f82c 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004a0c:	2332      	movs	r3, #50	@ 0x32
 8004a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a10:	2302      	movs	r3, #2
 8004a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a14:	2300      	movs	r3, #0
 8004a16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004a1c:	230b      	movs	r3, #11
 8004a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a20:	f107 031c 	add.w	r3, r7, #28
 8004a24:	4619      	mov	r1, r3
 8004a26:	484b      	ldr	r0, [pc, #300]	@ (8004b54 <MX_GPIO_Init+0x220>)
 8004a28:	f001 f81c 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004a2c:	2386      	movs	r3, #134	@ 0x86
 8004a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a30:	2302      	movs	r3, #2
 8004a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a34:	2300      	movs	r3, #0
 8004a36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004a3c:	230b      	movs	r3, #11
 8004a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a40:	f107 031c 	add.w	r3, r7, #28
 8004a44:	4619      	mov	r1, r3
 8004a46:	4844      	ldr	r0, [pc, #272]	@ (8004b58 <MX_GPIO_Init+0x224>)
 8004a48:	f001 f80c 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8004a4c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8004a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a52:	2301      	movs	r3, #1
 8004a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a56:	2300      	movs	r3, #0
 8004a58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a5e:	f107 031c 	add.w	r3, r7, #28
 8004a62:	4619      	mov	r1, r3
 8004a64:	4839      	ldr	r0, [pc, #228]	@ (8004b4c <MX_GPIO_Init+0x218>)
 8004a66:	f000 fffd 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004a6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a70:	2302      	movs	r3, #2
 8004a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a74:	2300      	movs	r3, #0
 8004a76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004a7c:	230b      	movs	r3, #11
 8004a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004a80:	f107 031c 	add.w	r3, r7, #28
 8004a84:	4619      	mov	r1, r3
 8004a86:	4831      	ldr	r0, [pc, #196]	@ (8004b4c <MX_GPIO_Init+0x218>)
 8004a88:	f000 ffec 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8004a8c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a92:	2302      	movs	r3, #2
 8004a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a96:	2300      	movs	r3, #0
 8004a98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004a9e:	2307      	movs	r3, #7
 8004aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004aa2:	f107 031c 	add.w	r3, r7, #28
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	482c      	ldr	r0, [pc, #176]	@ (8004b5c <MX_GPIO_Init+0x228>)
 8004aaa:	f000 ffdb 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8004aae:	2340      	movs	r3, #64	@ 0x40
 8004ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aba:	2300      	movs	r3, #0
 8004abc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004abe:	f107 031c 	add.w	r3, r7, #28
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	4822      	ldr	r0, [pc, #136]	@ (8004b50 <MX_GPIO_Init+0x21c>)
 8004ac6:	f000 ffcd 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8004aca:	2380      	movs	r3, #128	@ 0x80
 8004acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004ad6:	f107 031c 	add.w	r3, r7, #28
 8004ada:	4619      	mov	r1, r3
 8004adc:	481c      	ldr	r0, [pc, #112]	@ (8004b50 <MX_GPIO_Init+0x21c>)
 8004ade:	f000 ffc1 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8004ae2:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8004ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ae8:	2302      	movs	r3, #2
 8004aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aec:	2300      	movs	r3, #0
 8004aee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004af0:	2303      	movs	r3, #3
 8004af2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004af4:	230a      	movs	r3, #10
 8004af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004af8:	f107 031c 	add.w	r3, r7, #28
 8004afc:	4619      	mov	r1, r3
 8004afe:	4816      	ldr	r0, [pc, #88]	@ (8004b58 <MX_GPIO_Init+0x224>)
 8004b00:	f000 ffb0 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8004b04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004b12:	f107 031c 	add.w	r3, r7, #28
 8004b16:	4619      	mov	r1, r3
 8004b18:	480f      	ldr	r0, [pc, #60]	@ (8004b58 <MX_GPIO_Init+0x224>)
 8004b1a:	f000 ffa3 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004b1e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8004b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b24:	2302      	movs	r3, #2
 8004b26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004b30:	230b      	movs	r3, #11
 8004b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004b34:	f107 031c 	add.w	r3, r7, #28
 8004b38:	4619      	mov	r1, r3
 8004b3a:	4805      	ldr	r0, [pc, #20]	@ (8004b50 <MX_GPIO_Init+0x21c>)
 8004b3c:	f000 ff92 	bl	8005a64 <HAL_GPIO_Init>

}
 8004b40:	bf00      	nop
 8004b42:	3730      	adds	r7, #48	@ 0x30
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	40023800 	.word	0x40023800
 8004b4c:	40020400 	.word	0x40020400
 8004b50:	40021800 	.word	0x40021800
 8004b54:	40020800 	.word	0x40020800
 8004b58:	40020000 	.word	0x40020000
 8004b5c:	40020c00 	.word	0x40020c00

08004b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004b60:	b590      	push	{r4, r7, lr}
 8004b62:	f5ad 4dfa 	sub.w	sp, sp, #32000	@ 0x7d00
 8004b66:	b081      	sub	sp, #4
 8004b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  char file_read[25] = {0};
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	f647 42c4 	movw	r2, #31940	@ 0x7cc4
 8004b70:	443a      	add	r2, r7
 8004b72:	6013      	str	r3, [r2, #0]
 8004b74:	f647 43c8 	movw	r3, #31944	@ 0x7cc8
 8004b78:	443b      	add	r3, r7
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	605a      	str	r2, [r3, #4]
 8004b80:	609a      	str	r2, [r3, #8]
 8004b82:	60da      	str	r2, [r3, #12]
 8004b84:	611a      	str	r2, [r3, #16]
 8004b86:	751a      	strb	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004b88:	f000 fe05 	bl	8005796 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004b8c:	f000 fa00 	bl	8004f90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004b90:	f7ff fed0 	bl	8004934 <MX_GPIO_Init>
  MX_FATFS_Init();
 8004b94:	f002 fba4 	bl	80072e0 <MX_FATFS_Init>
  MX_SPI3_Init();
 8004b98:	f000 fbfc 	bl	8005394 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  uint32_t start_time = 0;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f647 42e4 	movw	r2, #31972	@ 0x7ce4
 8004ba2:	443a      	add	r2, r7
 8004ba4:	6013      	str	r3, [r2, #0]
  uint16_t file_cont = 1;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	f647 42fe 	movw	r2, #31998	@ 0x7cfe
 8004bac:	443a      	add	r2, r7
 8004bae:	8013      	strh	r3, [r2, #0]
  float NLLS_time = 0;//, NLLS_time = 0;
 8004bb0:	f04f 0300 	mov.w	r3, #0
 8004bb4:	f647 42e0 	movw	r2, #31968	@ 0x7ce0
 8004bb8:	443a      	add	r2, r7
 8004bba:	6013      	str	r3, [r2, #0]

  FATFS fs;
  FRESULT res;

  // Monta o sistema de arquivos na unidade lógica "0:"
  res = f_mount(&fs, "0:", 1);
 8004bbc:	f647 2394 	movw	r3, #31380	@ 0x7a94
 8004bc0:	443b      	add	r3, r7
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	49a6      	ldr	r1, [pc, #664]	@ (8004e60 <main+0x300>)
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f004 f8fc 	bl	8008dc4 <f_mount>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	f647 42df 	movw	r2, #31967	@ 0x7cdf
 8004bd2:	443a      	add	r2, r7
 8004bd4:	7013      	strb	r3, [r2, #0]
  if (res != FR_OK) {
 8004bd6:	f647 43df 	movw	r3, #31967	@ 0x7cdf
 8004bda:	443b      	add	r3, r7
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <main+0x86>
      //printf("Falha ao montar o sistema de arquivos: %d\n", res);
      Error_Handler(); // ou retorne um erro
 8004be2:	f000 fa3b 	bl	800505c <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(file_cont >= 3001)
 8004be6:	f647 43fe 	movw	r3, #31998	@ 0x7cfe
 8004bea:	443b      	add	r3, r7
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d901      	bls.n	8004bfa <main+0x9a>
	{
		return 1;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e1ba      	b.n	8004f70 <main+0x410>
	}

	sprintf(file_read, "0:/DATA1/run%d.txt", file_cont);  // Prefixo de volume (0:) é comum no FatFs
 8004bfa:	f647 43fe 	movw	r3, #31998	@ 0x7cfe
 8004bfe:	443b      	add	r3, r7
 8004c00:	881a      	ldrh	r2, [r3, #0]
 8004c02:	f647 43c4 	movw	r3, #31940	@ 0x7cc4
 8004c06:	443b      	add	r3, r7
 8004c08:	4996      	ldr	r1, [pc, #600]	@ (8004e64 <main+0x304>)
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f006 fc2c 	bl	800b468 <siprintf>

	FIL fil;
	FRESULT res;

	res = f_open(&fil, file_read, FA_READ);
 8004c10:	f647 41c4 	movw	r1, #31940	@ 0x7cc4
 8004c14:	4439      	add	r1, r7
 8004c16:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f004 f917 	bl	8008e50 <f_open>
 8004c22:	4603      	mov	r3, r0
 8004c24:	f647 42de 	movw	r2, #31966	@ 0x7cde
 8004c28:	443a      	add	r2, r7
 8004c2a:	7013      	strb	r3, [r2, #0]
	if (res != FR_OK)
 8004c2c:	f647 43de 	movw	r3, #31966	@ 0x7cde
 8004c30:	443b      	add	r3, r7
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d001      	beq.n	8004c3c <main+0xdc>
	{
		return 1;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e199      	b.n	8004f70 <main+0x410>
	}

	char line[30670];
	UINT br; // Bytes lidos

	float *linhas[] = {mx, my, mz};  // Vetor de ponteiros para facilitar o acesso
 8004c3c:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8004c40:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8004c44:	4a88      	ldr	r2, [pc, #544]	@ (8004e68 <main+0x308>)
 8004c46:	ca07      	ldmia	r2, {r0, r1, r2}
 8004c48:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	for (int i = 0; i < 3; i++)
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	f647 42f8 	movw	r2, #31992	@ 0x7cf8
 8004c52:	443a      	add	r2, r7
 8004c54:	6013      	str	r3, [r2, #0]
 8004c56:	e0af      	b.n	8004db8 <main+0x258>
	{
		// lê uma linha completa (até '\n' ou fim do buffer)
		int line_pos = 0;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	f647 42f4 	movw	r2, #31988	@ 0x7cf4
 8004c5e:	443a      	add	r2, r7
 8004c60:	6013      	str	r3, [r2, #0]
		char ch;
		do {
			res = f_read(&fil, &ch, 1, &br);
 8004c62:	f647 2390 	movw	r3, #31376	@ 0x7a90
 8004c66:	443b      	add	r3, r7
 8004c68:	f647 217f 	movw	r1, #31359	@ 0x7a7f
 8004c6c:	4439      	add	r1, r7
 8004c6e:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8004c72:	2201      	movs	r2, #1
 8004c74:	f004 faa6 	bl	80091c4 <f_read>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	f647 42de 	movw	r2, #31966	@ 0x7cde
 8004c7e:	443a      	add	r2, r7
 8004c80:	7013      	strb	r3, [r2, #0]
			if (res != FR_OK || br == 0) {
 8004c82:	f647 43de 	movw	r3, #31966	@ 0x7cde
 8004c86:	443b      	add	r3, r7
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d106      	bne.n	8004c9c <main+0x13c>
 8004c8e:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8004c92:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <main+0x140>
				return 1;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e167      	b.n	8004f70 <main+0x410>
			}
			line[line_pos++] = ch;
 8004ca0:	f647 43f4 	movw	r3, #31988	@ 0x7cf4
 8004ca4:	443b      	add	r3, r7
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	f647 41f4 	movw	r1, #31988	@ 0x7cf4
 8004cae:	4439      	add	r1, r7
 8004cb0:	600a      	str	r2, [r1, #0]
 8004cb2:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8004cb6:	f2a2 2281 	subw	r2, r2, #641	@ 0x281
 8004cba:	7811      	ldrb	r1, [r2, #0]
 8004cbc:	f507 6250 	add.w	r2, r7, #3328	@ 0xd00
 8004cc0:	f5a2 6225 	sub.w	r2, r2, #2640	@ 0xa50
 8004cc4:	54d1      	strb	r1, [r2, r3]
		} while (ch != '\n' && line_pos < sizeof(line)-1);
 8004cc6:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8004cca:	f2a3 2381 	subw	r3, r3, #641	@ 0x281
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	2b0a      	cmp	r3, #10
 8004cd2:	d007      	beq.n	8004ce4 <main+0x184>
 8004cd4:	f647 43f4 	movw	r3, #31988	@ 0x7cf4
 8004cd8:	443b      	add	r3, r7
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f247 72cc 	movw	r2, #30668	@ 0x77cc
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d9be      	bls.n	8004c62 <main+0x102>
		line[line_pos] = '\0';
 8004ce4:	f507 6350 	add.w	r3, r7, #3328	@ 0xd00
 8004ce8:	f5a3 6225 	sub.w	r2, r3, #2640	@ 0xa50
 8004cec:	f647 43f4 	movw	r3, #31988	@ 0x7cf4
 8004cf0:	443b      	add	r3, r7
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	701a      	strb	r2, [r3, #0]

		char *token = strtok(line, ",");
 8004cfa:	4b5c      	ldr	r3, [pc, #368]	@ (8004e6c <main+0x30c>)
 8004cfc:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 8004d00:	443b      	add	r3, r7
 8004d02:	495b      	ldr	r1, [pc, #364]	@ (8004e70 <main+0x310>)
 8004d04:	4618      	mov	r0, r3
 8004d06:	f006 fc2d 	bl	800b564 <strtok>
 8004d0a:	f647 43f0 	movw	r3, #31984	@ 0x7cf0
 8004d0e:	443b      	add	r3, r7
 8004d10:	6018      	str	r0, [r3, #0]
		int j = 0;
 8004d12:	2300      	movs	r3, #0
 8004d14:	f647 42ec 	movw	r2, #31980	@ 0x7cec
 8004d18:	443a      	add	r2, r7
 8004d1a:	6013      	str	r3, [r2, #0]

		while (token != NULL && j < tam)
 8004d1c:	e02b      	b.n	8004d76 <main+0x216>
		{
			linhas[i][j] = strtof(token, NULL);
 8004d1e:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8004d22:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8004d26:	f647 42f8 	movw	r2, #31992	@ 0x7cf8
 8004d2a:	443a      	add	r2, r7
 8004d2c:	6812      	ldr	r2, [r2, #0]
 8004d2e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004d32:	f647 43ec 	movw	r3, #31980	@ 0x7cec
 8004d36:	443b      	add	r3, r7
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	18d4      	adds	r4, r2, r3
 8004d3e:	2100      	movs	r1, #0
 8004d40:	f647 43f0 	movw	r3, #31984	@ 0x7cf0
 8004d44:	443b      	add	r3, r7
 8004d46:	6818      	ldr	r0, [r3, #0]
 8004d48:	f005 fbfc 	bl	800a544 <strtof>
 8004d4c:	eef0 7a40 	vmov.f32	s15, s0
 8004d50:	edc4 7a00 	vstr	s15, [r4]
			token = strtok(NULL, ",");
 8004d54:	4946      	ldr	r1, [pc, #280]	@ (8004e70 <main+0x310>)
 8004d56:	2000      	movs	r0, #0
 8004d58:	f006 fc04 	bl	800b564 <strtok>
 8004d5c:	f647 43f0 	movw	r3, #31984	@ 0x7cf0
 8004d60:	443b      	add	r3, r7
 8004d62:	6018      	str	r0, [r3, #0]
			j++;
 8004d64:	f647 43ec 	movw	r3, #31980	@ 0x7cec
 8004d68:	443b      	add	r3, r7
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	f647 42ec 	movw	r2, #31980	@ 0x7cec
 8004d72:	443a      	add	r2, r7
 8004d74:	6013      	str	r3, [r2, #0]
		while (token != NULL && j < tam)
 8004d76:	f647 43f0 	movw	r3, #31984	@ 0x7cf0
 8004d7a:	443b      	add	r3, r7
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d007      	beq.n	8004d92 <main+0x232>
 8004d82:	f647 43ec 	movw	r3, #31980	@ 0x7cec
 8004d86:	443b      	add	r3, r7
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f240 4256 	movw	r2, #1110	@ 0x456
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	ddc5      	ble.n	8004d1e <main+0x1be>
		}

		if (j != tam)
 8004d92:	f647 43ec 	movw	r3, #31980	@ 0x7cec
 8004d96:	443b      	add	r3, r7
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f240 4257 	movw	r2, #1111	@ 0x457
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d001      	beq.n	8004da6 <main+0x246>
		{
			return 1;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e0e4      	b.n	8004f70 <main+0x410>
	for (int i = 0; i < 3; i++)
 8004da6:	f647 43f8 	movw	r3, #31992	@ 0x7cf8
 8004daa:	443b      	add	r3, r7
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	3301      	adds	r3, #1
 8004db0:	f647 42f8 	movw	r2, #31992	@ 0x7cf8
 8004db4:	443a      	add	r2, r7
 8004db6:	6013      	str	r3, [r2, #0]
 8004db8:	f647 43f8 	movw	r3, #31992	@ 0x7cf8
 8004dbc:	443b      	add	r3, r7
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	f77f af49 	ble.w	8004c58 <main+0xf8>
		}
	}

	f_close(&fil);
 8004dc6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f004 fd2c 	bl	8009828 <f_close>

	/*start_time = HAL_GetTick();
	ETS(mx, my, mz, p1);
	ETS_time = HAL_GetTick() - start_time;*/

	start_time = HAL_GetTick();
 8004dd0:	f000 fd32 	bl	8005838 <HAL_GetTick>
 8004dd4:	f647 43e4 	movw	r3, #31972	@ 0x7ce4
 8004dd8:	443b      	add	r3, r7
 8004dda:	6018      	str	r0, [r3, #0]
	passos_NLLS = NLLS(mx, my, mz, p1);
 8004ddc:	4b25      	ldr	r3, [pc, #148]	@ (8004e74 <main+0x314>)
 8004dde:	4a26      	ldr	r2, [pc, #152]	@ (8004e78 <main+0x318>)
 8004de0:	4926      	ldr	r1, [pc, #152]	@ (8004e7c <main+0x31c>)
 8004de2:	4827      	ldr	r0, [pc, #156]	@ (8004e80 <main+0x320>)
 8004de4:	f7fc fa38 	bl	8001258 <NLLS>
 8004de8:	4603      	mov	r3, r0
 8004dea:	461a      	mov	r2, r3
 8004dec:	4b25      	ldr	r3, [pc, #148]	@ (8004e84 <main+0x324>)
 8004dee:	701a      	strb	r2, [r3, #0]
	NLLS_time = HAL_GetTick() - start_time;
 8004df0:	f000 fd22 	bl	8005838 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	f647 43e4 	movw	r3, #31972	@ 0x7ce4
 8004dfa:	443b      	add	r3, r7
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	ee07 3a90 	vmov	s15, r3
 8004e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e08:	f647 43e0 	movw	r3, #31968	@ 0x7ce0
 8004e0c:	443b      	add	r3, r7
 8004e0e:	edc3 7a00 	vstr	s15, [r3]


	sprintf(file_read, "0:/RES/run%d.txt", file_cont);
 8004e12:	f647 43fe 	movw	r3, #31998	@ 0x7cfe
 8004e16:	443b      	add	r3, r7
 8004e18:	881a      	ldrh	r2, [r3, #0]
 8004e1a:	f647 43c4 	movw	r3, #31940	@ 0x7cc4
 8004e1e:	443b      	add	r3, r7
 8004e20:	4919      	ldr	r1, [pc, #100]	@ (8004e88 <main+0x328>)
 8004e22:	4618      	mov	r0, r3
 8004e24:	f006 fb20 	bl	800b468 <siprintf>
	res = f_open(&fil, file_read, FA_WRITE | FA_CREATE_ALWAYS);
 8004e28:	f647 41c4 	movw	r1, #31940	@ 0x7cc4
 8004e2c:	4439      	add	r1, r7
 8004e2e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8004e32:	220a      	movs	r2, #10
 8004e34:	4618      	mov	r0, r3
 8004e36:	f004 f80b 	bl	8008e50 <f_open>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	f647 42de 	movw	r2, #31966	@ 0x7cde
 8004e40:	443a      	add	r2, r7
 8004e42:	7013      	strb	r3, [r2, #0]
	if (res != FR_OK)
 8004e44:	f647 43de 	movw	r3, #31966	@ 0x7cde
 8004e48:	443b      	add	r3, r7
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d001      	beq.n	8004e54 <main+0x2f4>
	{
		return 1;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e08d      	b.n	8004f70 <main+0x410>
	}

	char out_line[128];
	UINT bw;

	for (int i = 0; i < 9; i++) {
 8004e54:	2300      	movs	r3, #0
 8004e56:	f647 42e8 	movw	r2, #31976	@ 0x7ce8
 8004e5a:	443a      	add	r2, r7
 8004e5c:	6013      	str	r3, [r2, #0]
 8004e5e:	e03b      	b.n	8004ed8 <main+0x378>
 8004e60:	0800e1bc 	.word	0x0800e1bc
 8004e64:	0800e1c0 	.word	0x0800e1c0
 8004e68:	0800e1f4 	.word	0x0800e1f4
 8004e6c:	ffff85b0 	.word	0xffff85b0
 8004e70:	0800e1d4 	.word	0x0800e1d4
 8004e74:	20003624 	.word	0x20003624
 8004e78:	200024c4 	.word	0x200024c4
 8004e7c:	20001364 	.word	0x20001364
 8004e80:	20000204 	.word	0x20000204
 8004e84:	20003648 	.word	0x20003648
 8004e88:	0800e1d8 	.word	0x0800e1d8
		sprintf(out_line, "%f\n", p1[i]);
 8004e8c:	4a3b      	ldr	r2, [pc, #236]	@ (8004f7c <main+0x41c>)
 8004e8e:	f647 43e8 	movw	r3, #31976	@ 0x7ce8
 8004e92:	443b      	add	r3, r7
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7fb fb73 	bl	8000588 <__aeabi_f2d>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	4638      	mov	r0, r7
 8004ea8:	4935      	ldr	r1, [pc, #212]	@ (8004f80 <main+0x420>)
 8004eaa:	f006 fadd 	bl	800b468 <siprintf>
		f_write(&fil, out_line, strlen(out_line), &bw);
 8004eae:	463b      	mov	r3, r7
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7fb f9fd 	bl	80002b0 <strlen>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	f507 43f5 	add.w	r3, r7, #31360	@ 0x7a80
 8004ebc:	4639      	mov	r1, r7
 8004ebe:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8004ec2:	f004 fabe 	bl	8009442 <f_write>
	for (int i = 0; i < 9; i++) {
 8004ec6:	f647 43e8 	movw	r3, #31976	@ 0x7ce8
 8004eca:	443b      	add	r3, r7
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	f647 42e8 	movw	r2, #31976	@ 0x7ce8
 8004ed4:	443a      	add	r2, r7
 8004ed6:	6013      	str	r3, [r2, #0]
 8004ed8:	f647 43e8 	movw	r3, #31976	@ 0x7ce8
 8004edc:	443b      	add	r3, r7
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	ddd3      	ble.n	8004e8c <main+0x32c>
	}

	sprintf(out_line, "%f\n", NLLS_time);
 8004ee4:	f647 43e0 	movw	r3, #31968	@ 0x7ce0
 8004ee8:	443b      	add	r3, r7
 8004eea:	6818      	ldr	r0, [r3, #0]
 8004eec:	f7fb fb4c 	bl	8000588 <__aeabi_f2d>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4638      	mov	r0, r7
 8004ef6:	4922      	ldr	r1, [pc, #136]	@ (8004f80 <main+0x420>)
 8004ef8:	f006 fab6 	bl	800b468 <siprintf>
	f_write(&fil, out_line, strlen(out_line), &bw);
 8004efc:	463b      	mov	r3, r7
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fb f9d6 	bl	80002b0 <strlen>
 8004f04:	4602      	mov	r2, r0
 8004f06:	f507 43f5 	add.w	r3, r7, #31360	@ 0x7a80
 8004f0a:	4639      	mov	r1, r7
 8004f0c:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8004f10:	f004 fa97 	bl	8009442 <f_write>

	sprintf(out_line, "%u\n", passos_NLLS);
 8004f14:	4b1b      	ldr	r3, [pc, #108]	@ (8004f84 <main+0x424>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	461a      	mov	r2, r3
 8004f1a:	463b      	mov	r3, r7
 8004f1c:	491a      	ldr	r1, [pc, #104]	@ (8004f88 <main+0x428>)
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f006 faa2 	bl	800b468 <siprintf>
	f_write(&fil, out_line, strlen(out_line), &bw);
 8004f24:	463b      	mov	r3, r7
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fb f9c2 	bl	80002b0 <strlen>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	f507 43f5 	add.w	r3, r7, #31360	@ 0x7a80
 8004f32:	4639      	mov	r1, r7
 8004f34:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8004f38:	f004 fa83 	bl	8009442 <f_write>

	f_close(&fil);
 8004f3c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8004f40:	4618      	mov	r0, r3
 8004f42:	f004 fc71 	bl	8009828 <f_close>

	file_cont++;
 8004f46:	f647 43fe 	movw	r3, #31998	@ 0x7cfe
 8004f4a:	443b      	add	r3, r7
 8004f4c:	881b      	ldrh	r3, [r3, #0]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	f647 42fe 	movw	r2, #31998	@ 0x7cfe
 8004f54:	443a      	add	r2, r7
 8004f56:	8013      	strh	r3, [r2, #0]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8004f58:	2180      	movs	r1, #128	@ 0x80
 8004f5a:	480c      	ldr	r0, [pc, #48]	@ (8004f8c <main+0x42c>)
 8004f5c:	f000 ff47 	bl	8005dee <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8004f60:	2064      	movs	r0, #100	@ 0x64
 8004f62:	f000 fc75 	bl	8005850 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8004f66:	2180      	movs	r1, #128	@ 0x80
 8004f68:	4808      	ldr	r0, [pc, #32]	@ (8004f8c <main+0x42c>)
 8004f6a:	f000 ff40 	bl	8005dee <HAL_GPIO_TogglePin>
  {
 8004f6e:	e63a      	b.n	8004be6 <main+0x86>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	f507 47fa 	add.w	r7, r7, #32000	@ 0x7d00
 8004f76:	3704      	adds	r7, #4
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd90      	pop	{r4, r7, pc}
 8004f7c:	20003624 	.word	0x20003624
 8004f80:	0800e1ec 	.word	0x0800e1ec
 8004f84:	20003648 	.word	0x20003648
 8004f88:	0800e1f0 	.word	0x0800e1f0
 8004f8c:	40020400 	.word	0x40020400

08004f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b094      	sub	sp, #80	@ 0x50
 8004f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004f96:	f107 0320 	add.w	r3, r7, #32
 8004f9a:	2230      	movs	r2, #48	@ 0x30
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f006 fac5 	bl	800b52e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004fa4:	f107 030c 	add.w	r3, r7, #12
 8004fa8:	2200      	movs	r2, #0
 8004faa:	601a      	str	r2, [r3, #0]
 8004fac:	605a      	str	r2, [r3, #4]
 8004fae:	609a      	str	r2, [r3, #8]
 8004fb0:	60da      	str	r2, [r3, #12]
 8004fb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fb4:	4b27      	ldr	r3, [pc, #156]	@ (8005054 <SystemClock_Config+0xc4>)
 8004fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb8:	4a26      	ldr	r2, [pc, #152]	@ (8005054 <SystemClock_Config+0xc4>)
 8004fba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fc0:	4b24      	ldr	r3, [pc, #144]	@ (8005054 <SystemClock_Config+0xc4>)
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fc8:	60bb      	str	r3, [r7, #8]
 8004fca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004fcc:	4b22      	ldr	r3, [pc, #136]	@ (8005058 <SystemClock_Config+0xc8>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004fd4:	4a20      	ldr	r2, [pc, #128]	@ (8005058 <SystemClock_Config+0xc8>)
 8004fd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004fda:	6013      	str	r3, [r2, #0]
 8004fdc:	4b1e      	ldr	r3, [pc, #120]	@ (8005058 <SystemClock_Config+0xc8>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004fe4:	607b      	str	r3, [r7, #4]
 8004fe6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004fec:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8004ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004ff6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004ffc:	2304      	movs	r3, #4
 8004ffe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8005000:	2348      	movs	r3, #72	@ 0x48
 8005002:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005004:	2302      	movs	r3, #2
 8005006:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8005008:	2303      	movs	r3, #3
 800500a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800500c:	f107 0320 	add.w	r3, r7, #32
 8005010:	4618      	mov	r0, r3
 8005012:	f000 ff07 	bl	8005e24 <HAL_RCC_OscConfig>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800501c:	f000 f81e 	bl	800505c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005020:	230f      	movs	r3, #15
 8005022:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005024:	2302      	movs	r3, #2
 8005026:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005028:	2300      	movs	r3, #0
 800502a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800502c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005030:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005032:	2300      	movs	r3, #0
 8005034:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005036:	f107 030c 	add.w	r3, r7, #12
 800503a:	2102      	movs	r1, #2
 800503c:	4618      	mov	r0, r3
 800503e:	f001 f995 	bl	800636c <HAL_RCC_ClockConfig>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8005048:	f000 f808 	bl	800505c <Error_Handler>
  }
}
 800504c:	bf00      	nop
 800504e:	3750      	adds	r7, #80	@ 0x50
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	40023800 	.word	0x40023800
 8005058:	40007000 	.word	0x40007000

0800505c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800505c:	b480      	push	{r7}
 800505e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005060:	b672      	cpsid	i
}
 8005062:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005064:	bf00      	nop
 8005066:	e7fd      	b.n	8005064 <Error_Handler+0x8>

08005068 <SD_SendDummyClock>:
#define SD_CS_LOW()   HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET)
#define SD_CS_HIGH()  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET)

extern SPI_HandleTypeDef hspi3; // Use a instância correta do SPI

static void SD_SendDummyClock(void) {
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
    uint8_t dummy = 0xFF;
 800506e:	23ff      	movs	r3, #255	@ 0xff
 8005070:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < 10; i++)
 8005072:	2300      	movs	r3, #0
 8005074:	607b      	str	r3, [r7, #4]
 8005076:	e009      	b.n	800508c <SD_SendDummyClock+0x24>
        HAL_SPI_Transmit(&hspi3, &dummy, 1, HAL_MAX_DELAY);
 8005078:	1cf9      	adds	r1, r7, #3
 800507a:	f04f 33ff 	mov.w	r3, #4294967295
 800507e:	2201      	movs	r2, #1
 8005080:	4806      	ldr	r0, [pc, #24]	@ (800509c <SD_SendDummyClock+0x34>)
 8005082:	f001 fc10 	bl	80068a6 <HAL_SPI_Transmit>
    for (int i = 0; i < 10; i++)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	3301      	adds	r3, #1
 800508a:	607b      	str	r3, [r7, #4]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b09      	cmp	r3, #9
 8005090:	ddf2      	ble.n	8005078 <SD_SendDummyClock+0x10>
}
 8005092:	bf00      	nop
 8005094:	bf00      	nop
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	2000364c 	.word	0x2000364c

080050a0 <SD_TransmitByte>:

static uint8_t SD_TransmitByte(uint8_t data) {
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af02      	add	r7, sp, #8
 80050a6:	4603      	mov	r3, r0
 80050a8:	71fb      	strb	r3, [r7, #7]
    uint8_t received;
    HAL_SPI_TransmitReceive(&hspi3, &data, &received, 1, HAL_MAX_DELAY);
 80050aa:	f107 020f 	add.w	r2, r7, #15
 80050ae:	1df9      	adds	r1, r7, #7
 80050b0:	f04f 33ff 	mov.w	r3, #4294967295
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	2301      	movs	r3, #1
 80050b8:	4803      	ldr	r0, [pc, #12]	@ (80050c8 <SD_TransmitByte+0x28>)
 80050ba:	f001 fd6a 	bl	8006b92 <HAL_SPI_TransmitReceive>
    return received;
 80050be:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	2000364c 	.word	0x2000364c

080050cc <SD_ReceiveByte>:

static uint8_t SD_ReceiveByte(void) {
 80050cc:	b580      	push	{r7, lr}
 80050ce:	af00      	add	r7, sp, #0
    return SD_TransmitByte(0xFF);
 80050d0:	20ff      	movs	r0, #255	@ 0xff
 80050d2:	f7ff ffe5 	bl	80050a0 <SD_TransmitByte>
 80050d6:	4603      	mov	r3, r0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	bd80      	pop	{r7, pc}

080050dc <SD_WaitReady>:

static uint8_t SD_WaitReady(void) {
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
    uint8_t res;
    uint32_t timeout = HAL_GetTick();
 80050e2:	f000 fba9 	bl	8005838 <HAL_GetTick>
 80050e6:	6078      	str	r0, [r7, #4]
    do {
        res = SD_ReceiveByte();
 80050e8:	f7ff fff0 	bl	80050cc <SD_ReceiveByte>
 80050ec:	4603      	mov	r3, r0
 80050ee:	70fb      	strb	r3, [r7, #3]
        if (res == 0xFF) return 1;
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	2bff      	cmp	r3, #255	@ 0xff
 80050f4:	d101      	bne.n	80050fa <SD_WaitReady+0x1e>
 80050f6:	2301      	movs	r3, #1
 80050f8:	e008      	b.n	800510c <SD_WaitReady+0x30>
    } while ((HAL_GetTick() - timeout) < 500);
 80050fa:	f000 fb9d 	bl	8005838 <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005108:	d3ee      	bcc.n	80050e8 <SD_WaitReady+0xc>
    return 0;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <SD_Select>:

static void SD_Select(void) {
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
    SD_CS_LOW();
 8005118:	2200      	movs	r2, #0
 800511a:	2110      	movs	r1, #16
 800511c:	4803      	ldr	r0, [pc, #12]	@ (800512c <SD_Select+0x18>)
 800511e:	f000 fe4d 	bl	8005dbc <HAL_GPIO_WritePin>
    SD_ReceiveByte();
 8005122:	f7ff ffd3 	bl	80050cc <SD_ReceiveByte>
}
 8005126:	bf00      	nop
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	40020000 	.word	0x40020000

08005130 <SD_Deselect>:

static void SD_Deselect(void) {
 8005130:	b580      	push	{r7, lr}
 8005132:	af00      	add	r7, sp, #0
    SD_CS_HIGH();
 8005134:	2201      	movs	r2, #1
 8005136:	2110      	movs	r1, #16
 8005138:	4803      	ldr	r0, [pc, #12]	@ (8005148 <SD_Deselect+0x18>)
 800513a:	f000 fe3f 	bl	8005dbc <HAL_GPIO_WritePin>
    SD_ReceiveByte();
 800513e:	f7ff ffc5 	bl	80050cc <SD_ReceiveByte>
}
 8005142:	bf00      	nop
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	40020000 	.word	0x40020000

0800514c <SD_SendCommand>:

static uint8_t SD_SendCommand(uint8_t cmd, uint32_t arg, uint8_t crc) {
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af00      	add	r7, sp, #0
 8005152:	4603      	mov	r3, r0
 8005154:	6039      	str	r1, [r7, #0]
 8005156:	71fb      	strb	r3, [r7, #7]
 8005158:	4613      	mov	r3, r2
 800515a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[6];
    buf[0] = 0x40 | cmd;
 800515c:	79fb      	ldrb	r3, [r7, #7]
 800515e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005162:	b2db      	uxtb	r3, r3
 8005164:	723b      	strb	r3, [r7, #8]
    buf[1] = (arg >> 24) & 0xFF;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	0e1b      	lsrs	r3, r3, #24
 800516a:	b2db      	uxtb	r3, r3
 800516c:	727b      	strb	r3, [r7, #9]
    buf[2] = (arg >> 16) & 0xFF;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	0c1b      	lsrs	r3, r3, #16
 8005172:	b2db      	uxtb	r3, r3
 8005174:	72bb      	strb	r3, [r7, #10]
    buf[3] = (arg >> 8) & 0xFF;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	0a1b      	lsrs	r3, r3, #8
 800517a:	b2db      	uxtb	r3, r3
 800517c:	72fb      	strb	r3, [r7, #11]
    buf[4] = arg & 0xFF;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	b2db      	uxtb	r3, r3
 8005182:	733b      	strb	r3, [r7, #12]
    buf[5] = crc;
 8005184:	79bb      	ldrb	r3, [r7, #6]
 8005186:	737b      	strb	r3, [r7, #13]

    SD_Deselect();
 8005188:	f7ff ffd2 	bl	8005130 <SD_Deselect>
    SD_Select();
 800518c:	f7ff ffc2 	bl	8005114 <SD_Select>

    if (!SD_WaitReady()) {
 8005190:	f7ff ffa4 	bl	80050dc <SD_WaitReady>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d103      	bne.n	80051a2 <SD_SendCommand+0x56>
        SD_Deselect();
 800519a:	f7ff ffc9 	bl	8005130 <SD_Deselect>
        return 0xFF;
 800519e:	23ff      	movs	r3, #255	@ 0xff
 80051a0:	e024      	b.n	80051ec <SD_SendCommand+0xa0>
    }

    for (int i = 0; i < 6; i++)
 80051a2:	2300      	movs	r3, #0
 80051a4:	617b      	str	r3, [r7, #20]
 80051a6:	e00a      	b.n	80051be <SD_SendCommand+0x72>
        SD_TransmitByte(buf[i]);
 80051a8:	f107 0208 	add.w	r2, r7, #8
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	4413      	add	r3, r2
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7ff ff74 	bl	80050a0 <SD_TransmitByte>
    for (int i = 0; i < 6; i++)
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	3301      	adds	r3, #1
 80051bc:	617b      	str	r3, [r7, #20]
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	2b05      	cmp	r3, #5
 80051c2:	ddf1      	ble.n	80051a8 <SD_SendCommand+0x5c>

    // Aguarda resposta (bit 7 == 0)
    for (int i = 0; i < 10; i++) {
 80051c4:	2300      	movs	r3, #0
 80051c6:	613b      	str	r3, [r7, #16]
 80051c8:	e00c      	b.n	80051e4 <SD_SendCommand+0x98>
        uint8_t res = SD_ReceiveByte();
 80051ca:	f7ff ff7f 	bl	80050cc <SD_ReceiveByte>
 80051ce:	4603      	mov	r3, r0
 80051d0:	73fb      	strb	r3, [r7, #15]
        if ((res & 0x80) == 0)
 80051d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	db01      	blt.n	80051de <SD_SendCommand+0x92>
            return res;
 80051da:	7bfb      	ldrb	r3, [r7, #15]
 80051dc:	e006      	b.n	80051ec <SD_SendCommand+0xa0>
    for (int i = 0; i < 10; i++) {
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	3301      	adds	r3, #1
 80051e2:	613b      	str	r3, [r7, #16]
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	2b09      	cmp	r3, #9
 80051e8:	ddef      	ble.n	80051ca <SD_SendCommand+0x7e>
    }

    return 0xFF;
 80051ea:	23ff      	movs	r3, #255	@ 0xff
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3718      	adds	r7, #24
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <SD_Init>:

uint8_t SD_Init(void) {
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
    SD_CS_HIGH();
 80051fa:	2201      	movs	r2, #1
 80051fc:	2110      	movs	r1, #16
 80051fe:	4820      	ldr	r0, [pc, #128]	@ (8005280 <SD_Init+0x8c>)
 8005200:	f000 fddc 	bl	8005dbc <HAL_GPIO_WritePin>
    SD_SendDummyClock(); // 80 clocks
 8005204:	f7ff ff30 	bl	8005068 <SD_SendDummyClock>

    uint8_t res = SD_SendCommand(CMD0, 0, 0x95);
 8005208:	2295      	movs	r2, #149	@ 0x95
 800520a:	2100      	movs	r1, #0
 800520c:	2000      	movs	r0, #0
 800520e:	f7ff ff9d 	bl	800514c <SD_SendCommand>
 8005212:	4603      	mov	r3, r0
 8005214:	71fb      	strb	r3, [r7, #7]
    if (res != 0x01) return SD_ERROR;
 8005216:	79fb      	ldrb	r3, [r7, #7]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d001      	beq.n	8005220 <SD_Init+0x2c>
 800521c:	2301      	movs	r3, #1
 800521e:	e02b      	b.n	8005278 <SD_Init+0x84>

    res = SD_SendCommand(CMD8, 0x1AA, 0x87);
 8005220:	2287      	movs	r2, #135	@ 0x87
 8005222:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8005226:	2008      	movs	r0, #8
 8005228:	f7ff ff90 	bl	800514c <SD_SendCommand>
 800522c:	4603      	mov	r3, r0
 800522e:	71fb      	strb	r3, [r7, #7]
    if (res != 0x01) return SD_ERROR;
 8005230:	79fb      	ldrb	r3, [r7, #7]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d001      	beq.n	800523a <SD_Init+0x46>
 8005236:	2301      	movs	r3, #1
 8005238:	e01e      	b.n	8005278 <SD_Init+0x84>

    // Espera inicialização
    do {
        SD_SendCommand(CMD55, 0, 0x01);
 800523a:	2201      	movs	r2, #1
 800523c:	2100      	movs	r1, #0
 800523e:	2037      	movs	r0, #55	@ 0x37
 8005240:	f7ff ff84 	bl	800514c <SD_SendCommand>
        res = SD_SendCommand(ACMD41, 0x40000000, 0x01);
 8005244:	2201      	movs	r2, #1
 8005246:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800524a:	2029      	movs	r0, #41	@ 0x29
 800524c:	f7ff ff7e 	bl	800514c <SD_SendCommand>
 8005250:	4603      	mov	r3, r0
 8005252:	71fb      	strb	r3, [r7, #7]
    } while (res != 0x00);
 8005254:	79fb      	ldrb	r3, [r7, #7]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1ef      	bne.n	800523a <SD_Init+0x46>

    res = SD_SendCommand(CMD58, 0, 0x01);
 800525a:	2201      	movs	r2, #1
 800525c:	2100      	movs	r1, #0
 800525e:	203a      	movs	r0, #58	@ 0x3a
 8005260:	f7ff ff74 	bl	800514c <SD_SendCommand>
 8005264:	4603      	mov	r3, r0
 8005266:	71fb      	strb	r3, [r7, #7]
    SD_Deselect();
 8005268:	f7ff ff62 	bl	8005130 <SD_Deselect>
    return (res == 0x00) ? SD_OK : SD_ERROR;
 800526c:	79fb      	ldrb	r3, [r7, #7]
 800526e:	2b00      	cmp	r3, #0
 8005270:	bf14      	ite	ne
 8005272:	2301      	movne	r3, #1
 8005274:	2300      	moveq	r3, #0
 8005276:	b2db      	uxtb	r3, r3
}
 8005278:	4618      	mov	r0, r3
 800527a:	3708      	adds	r7, #8
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	40020000 	.word	0x40020000

08005284 <SD_ReadBlock>:

uint8_t SD_ReadBlock(uint32_t blockAddr, uint8_t* buff) {
 8005284:	b590      	push	{r4, r7, lr}
 8005286:	b087      	sub	sp, #28
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
    uint8_t token;

    if (SD_SendCommand(CMD17, blockAddr, 0x01) != 0x00)
 800528e:	2201      	movs	r2, #1
 8005290:	6879      	ldr	r1, [r7, #4]
 8005292:	2011      	movs	r0, #17
 8005294:	f7ff ff5a 	bl	800514c <SD_SendCommand>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <SD_ReadBlock+0x1e>
        return SD_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e030      	b.n	8005304 <SD_ReadBlock+0x80>

    // Espera token 0xFE (início do bloco)
    for (int i = 0; i < 10000; i++) {
 80052a2:	2300      	movs	r3, #0
 80052a4:	613b      	str	r3, [r7, #16]
 80052a6:	e009      	b.n	80052bc <SD_ReadBlock+0x38>
        token = SD_ReceiveByte();
 80052a8:	f7ff ff10 	bl	80050cc <SD_ReceiveByte>
 80052ac:	4603      	mov	r3, r0
 80052ae:	75fb      	strb	r3, [r7, #23]
        if (token == 0xFE) break;
 80052b0:	7dfb      	ldrb	r3, [r7, #23]
 80052b2:	2bfe      	cmp	r3, #254	@ 0xfe
 80052b4:	d008      	beq.n	80052c8 <SD_ReadBlock+0x44>
    for (int i = 0; i < 10000; i++) {
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	3301      	adds	r3, #1
 80052ba:	613b      	str	r3, [r7, #16]
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	f242 720f 	movw	r2, #9999	@ 0x270f
 80052c2:	4293      	cmp	r3, r2
 80052c4:	ddf0      	ble.n	80052a8 <SD_ReadBlock+0x24>
 80052c6:	e000      	b.n	80052ca <SD_ReadBlock+0x46>
        if (token == 0xFE) break;
 80052c8:	bf00      	nop
    }
    if (token != 0xFE) return SD_ERROR;
 80052ca:	7dfb      	ldrb	r3, [r7, #23]
 80052cc:	2bfe      	cmp	r3, #254	@ 0xfe
 80052ce:	d001      	beq.n	80052d4 <SD_ReadBlock+0x50>
 80052d0:	2301      	movs	r3, #1
 80052d2:	e017      	b.n	8005304 <SD_ReadBlock+0x80>

    for (int i = 0; i < 512; i++)
 80052d4:	2300      	movs	r3, #0
 80052d6:	60fb      	str	r3, [r7, #12]
 80052d8:	e009      	b.n	80052ee <SD_ReadBlock+0x6a>
        buff[i] = SD_ReceiveByte();
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	683a      	ldr	r2, [r7, #0]
 80052de:	18d4      	adds	r4, r2, r3
 80052e0:	f7ff fef4 	bl	80050cc <SD_ReceiveByte>
 80052e4:	4603      	mov	r3, r0
 80052e6:	7023      	strb	r3, [r4, #0]
    for (int i = 0; i < 512; i++)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	3301      	adds	r3, #1
 80052ec:	60fb      	str	r3, [r7, #12]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052f4:	dbf1      	blt.n	80052da <SD_ReadBlock+0x56>

    SD_ReceiveByte(); // Discard CRC
 80052f6:	f7ff fee9 	bl	80050cc <SD_ReceiveByte>
    SD_ReceiveByte();
 80052fa:	f7ff fee7 	bl	80050cc <SD_ReceiveByte>

    SD_Deselect();
 80052fe:	f7ff ff17 	bl	8005130 <SD_Deselect>
    return SD_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	371c      	adds	r7, #28
 8005308:	46bd      	mov	sp, r7
 800530a:	bd90      	pop	{r4, r7, pc}

0800530c <SD_WriteBlock>:

uint8_t SD_WriteBlock(uint32_t blockAddr, const uint8_t* buff) {
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
    if (SD_SendCommand(CMD24, blockAddr, 0x01) != 0x00)
 8005316:	2201      	movs	r2, #1
 8005318:	6879      	ldr	r1, [r7, #4]
 800531a:	2018      	movs	r0, #24
 800531c:	f7ff ff16 	bl	800514c <SD_SendCommand>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <SD_WriteBlock+0x1e>
        return SD_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e02f      	b.n	800538a <SD_WriteBlock+0x7e>

    SD_TransmitByte(0xFE); // Start token
 800532a:	20fe      	movs	r0, #254	@ 0xfe
 800532c:	f7ff feb8 	bl	80050a0 <SD_TransmitByte>

    for (int i = 0; i < 512; i++)
 8005330:	2300      	movs	r3, #0
 8005332:	60fb      	str	r3, [r7, #12]
 8005334:	e009      	b.n	800534a <SD_WriteBlock+0x3e>
        SD_TransmitByte(buff[i]);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	4413      	add	r3, r2
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	4618      	mov	r0, r3
 8005340:	f7ff feae 	bl	80050a0 <SD_TransmitByte>
    for (int i = 0; i < 512; i++)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	3301      	adds	r3, #1
 8005348:	60fb      	str	r3, [r7, #12]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005350:	dbf1      	blt.n	8005336 <SD_WriteBlock+0x2a>

    SD_TransmitByte(0xFF); // Dummy CRC
 8005352:	20ff      	movs	r0, #255	@ 0xff
 8005354:	f7ff fea4 	bl	80050a0 <SD_TransmitByte>
    SD_TransmitByte(0xFF);
 8005358:	20ff      	movs	r0, #255	@ 0xff
 800535a:	f7ff fea1 	bl	80050a0 <SD_TransmitByte>

    uint8_t resp = SD_ReceiveByte();
 800535e:	f7ff feb5 	bl	80050cc <SD_ReceiveByte>
 8005362:	4603      	mov	r3, r0
 8005364:	72fb      	strb	r3, [r7, #11]
    if ((resp & 0x1F) != 0x05) {
 8005366:	7afb      	ldrb	r3, [r7, #11]
 8005368:	f003 031f 	and.w	r3, r3, #31
 800536c:	2b05      	cmp	r3, #5
 800536e:	d003      	beq.n	8005378 <SD_WriteBlock+0x6c>
        SD_Deselect();
 8005370:	f7ff fede 	bl	8005130 <SD_Deselect>
        return SD_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e008      	b.n	800538a <SD_WriteBlock+0x7e>
    }

    while (!SD_ReceiveByte()); // Espera escrever
 8005378:	bf00      	nop
 800537a:	f7ff fea7 	bl	80050cc <SD_ReceiveByte>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d0fa      	beq.n	800537a <SD_WriteBlock+0x6e>

    SD_Deselect();
 8005384:	f7ff fed4 	bl	8005130 <SD_Deselect>
    return SD_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
	...

08005394 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8005398:	4b1b      	ldr	r3, [pc, #108]	@ (8005408 <MX_SPI3_Init+0x74>)
 800539a:	4a1c      	ldr	r2, [pc, #112]	@ (800540c <MX_SPI3_Init+0x78>)
 800539c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800539e:	4b1a      	ldr	r3, [pc, #104]	@ (8005408 <MX_SPI3_Init+0x74>)
 80053a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80053a4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80053a6:	4b18      	ldr	r3, [pc, #96]	@ (8005408 <MX_SPI3_Init+0x74>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80053ac:	4b16      	ldr	r3, [pc, #88]	@ (8005408 <MX_SPI3_Init+0x74>)
 80053ae:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80053b2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80053b4:	4b14      	ldr	r3, [pc, #80]	@ (8005408 <MX_SPI3_Init+0x74>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80053ba:	4b13      	ldr	r3, [pc, #76]	@ (8005408 <MX_SPI3_Init+0x74>)
 80053bc:	2200      	movs	r2, #0
 80053be:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80053c0:	4b11      	ldr	r3, [pc, #68]	@ (8005408 <MX_SPI3_Init+0x74>)
 80053c2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80053c6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053c8:	4b0f      	ldr	r3, [pc, #60]	@ (8005408 <MX_SPI3_Init+0x74>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80053ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005408 <MX_SPI3_Init+0x74>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80053d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005408 <MX_SPI3_Init+0x74>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053da:	4b0b      	ldr	r3, [pc, #44]	@ (8005408 <MX_SPI3_Init+0x74>)
 80053dc:	2200      	movs	r2, #0
 80053de:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80053e0:	4b09      	ldr	r3, [pc, #36]	@ (8005408 <MX_SPI3_Init+0x74>)
 80053e2:	2207      	movs	r2, #7
 80053e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80053e6:	4b08      	ldr	r3, [pc, #32]	@ (8005408 <MX_SPI3_Init+0x74>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80053ec:	4b06      	ldr	r3, [pc, #24]	@ (8005408 <MX_SPI3_Init+0x74>)
 80053ee:	2208      	movs	r2, #8
 80053f0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80053f2:	4805      	ldr	r0, [pc, #20]	@ (8005408 <MX_SPI3_Init+0x74>)
 80053f4:	f001 f9ac 	bl	8006750 <HAL_SPI_Init>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80053fe:	f7ff fe2d 	bl	800505c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8005402:	bf00      	nop
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	2000364c 	.word	0x2000364c
 800540c:	40003c00 	.word	0x40003c00

08005410 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b08a      	sub	sp, #40	@ 0x28
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005418:	f107 0314 	add.w	r3, r7, #20
 800541c:	2200      	movs	r2, #0
 800541e:	601a      	str	r2, [r3, #0]
 8005420:	605a      	str	r2, [r3, #4]
 8005422:	609a      	str	r2, [r3, #8]
 8005424:	60da      	str	r2, [r3, #12]
 8005426:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a25      	ldr	r2, [pc, #148]	@ (80054c4 <HAL_SPI_MspInit+0xb4>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d143      	bne.n	80054ba <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005432:	4b25      	ldr	r3, [pc, #148]	@ (80054c8 <HAL_SPI_MspInit+0xb8>)
 8005434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005436:	4a24      	ldr	r2, [pc, #144]	@ (80054c8 <HAL_SPI_MspInit+0xb8>)
 8005438:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800543c:	6413      	str	r3, [r2, #64]	@ 0x40
 800543e:	4b22      	ldr	r3, [pc, #136]	@ (80054c8 <HAL_SPI_MspInit+0xb8>)
 8005440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005442:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005446:	613b      	str	r3, [r7, #16]
 8005448:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800544a:	4b1f      	ldr	r3, [pc, #124]	@ (80054c8 <HAL_SPI_MspInit+0xb8>)
 800544c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800544e:	4a1e      	ldr	r2, [pc, #120]	@ (80054c8 <HAL_SPI_MspInit+0xb8>)
 8005450:	f043 0301 	orr.w	r3, r3, #1
 8005454:	6313      	str	r3, [r2, #48]	@ 0x30
 8005456:	4b1c      	ldr	r3, [pc, #112]	@ (80054c8 <HAL_SPI_MspInit+0xb8>)
 8005458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	60fb      	str	r3, [r7, #12]
 8005460:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005462:	4b19      	ldr	r3, [pc, #100]	@ (80054c8 <HAL_SPI_MspInit+0xb8>)
 8005464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005466:	4a18      	ldr	r2, [pc, #96]	@ (80054c8 <HAL_SPI_MspInit+0xb8>)
 8005468:	f043 0302 	orr.w	r3, r3, #2
 800546c:	6313      	str	r3, [r2, #48]	@ 0x30
 800546e:	4b16      	ldr	r3, [pc, #88]	@ (80054c8 <HAL_SPI_MspInit+0xb8>)
 8005470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	60bb      	str	r3, [r7, #8]
 8005478:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI3_NSS
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800547a:	2310      	movs	r3, #16
 800547c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800547e:	2302      	movs	r3, #2
 8005480:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005482:	2300      	movs	r3, #0
 8005484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005486:	2303      	movs	r3, #3
 8005488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800548a:	2306      	movs	r3, #6
 800548c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800548e:	f107 0314 	add.w	r3, r7, #20
 8005492:	4619      	mov	r1, r3
 8005494:	480d      	ldr	r0, [pc, #52]	@ (80054cc <HAL_SPI_MspInit+0xbc>)
 8005496:	f000 fae5 	bl	8005a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800549a:	2338      	movs	r3, #56	@ 0x38
 800549c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800549e:	2302      	movs	r3, #2
 80054a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054a2:	2300      	movs	r3, #0
 80054a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054a6:	2303      	movs	r3, #3
 80054a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80054aa:	2306      	movs	r3, #6
 80054ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054ae:	f107 0314 	add.w	r3, r7, #20
 80054b2:	4619      	mov	r1, r3
 80054b4:	4806      	ldr	r0, [pc, #24]	@ (80054d0 <HAL_SPI_MspInit+0xc0>)
 80054b6:	f000 fad5 	bl	8005a64 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80054ba:	bf00      	nop
 80054bc:	3728      	adds	r7, #40	@ 0x28
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	40003c00 	.word	0x40003c00
 80054c8:	40023800 	.word	0x40023800
 80054cc:	40020000 	.word	0x40020000
 80054d0:	40020400 	.word	0x40020400

080054d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80054da:	4b0f      	ldr	r3, [pc, #60]	@ (8005518 <HAL_MspInit+0x44>)
 80054dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054de:	4a0e      	ldr	r2, [pc, #56]	@ (8005518 <HAL_MspInit+0x44>)
 80054e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80054e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005518 <HAL_MspInit+0x44>)
 80054e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054ee:	607b      	str	r3, [r7, #4]
 80054f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054f2:	4b09      	ldr	r3, [pc, #36]	@ (8005518 <HAL_MspInit+0x44>)
 80054f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054f6:	4a08      	ldr	r2, [pc, #32]	@ (8005518 <HAL_MspInit+0x44>)
 80054f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80054fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80054fe:	4b06      	ldr	r3, [pc, #24]	@ (8005518 <HAL_MspInit+0x44>)
 8005500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005502:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005506:	603b      	str	r3, [r7, #0]
 8005508:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	40023800 	.word	0x40023800

0800551c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800551c:	b480      	push	{r7}
 800551e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005520:	bf00      	nop
 8005522:	e7fd      	b.n	8005520 <NMI_Handler+0x4>

08005524 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8005528:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800552c:	4804      	ldr	r0, [pc, #16]	@ (8005540 <HardFault_Handler+0x1c>)
 800552e:	f000 fc5e 	bl	8005dee <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8005532:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005536:	f000 f98b 	bl	8005850 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800553a:	bf00      	nop
 800553c:	e7f4      	b.n	8005528 <HardFault_Handler+0x4>
 800553e:	bf00      	nop
 8005540:	40020400 	.word	0x40020400

08005544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005548:	bf00      	nop
 800554a:	e7fd      	b.n	8005548 <MemManage_Handler+0x4>

0800554c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800554c:	b480      	push	{r7}
 800554e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005550:	bf00      	nop
 8005552:	e7fd      	b.n	8005550 <BusFault_Handler+0x4>

08005554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005558:	bf00      	nop
 800555a:	e7fd      	b.n	8005558 <UsageFault_Handler+0x4>

0800555c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800555c:	b480      	push	{r7}
 800555e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005560:	bf00      	nop
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800556a:	b480      	push	{r7}
 800556c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800556e:	bf00      	nop
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005578:	b480      	push	{r7}
 800557a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800557c:	bf00      	nop
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800558a:	f000 f941 	bl	8005810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800558e:	bf00      	nop
 8005590:	bd80      	pop	{r7, pc}

08005592 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005592:	b480      	push	{r7}
 8005594:	af00      	add	r7, sp, #0
  return 1;
 8005596:	2301      	movs	r3, #1
}
 8005598:	4618      	mov	r0, r3
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <_kill>:

int _kill(int pid, int sig)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b082      	sub	sp, #8
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
 80055aa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80055ac:	f006 f880 	bl	800b6b0 <__errno>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2216      	movs	r2, #22
 80055b4:	601a      	str	r2, [r3, #0]
  return -1;
 80055b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3708      	adds	r7, #8
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <_exit>:

void _exit (int status)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b082      	sub	sp, #8
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80055ca:	f04f 31ff 	mov.w	r1, #4294967295
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7ff ffe7 	bl	80055a2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80055d4:	bf00      	nop
 80055d6:	e7fd      	b.n	80055d4 <_exit+0x12>

080055d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055e4:	2300      	movs	r3, #0
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	e00a      	b.n	8005600 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80055ea:	f3af 8000 	nop.w
 80055ee:	4601      	mov	r1, r0
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	1c5a      	adds	r2, r3, #1
 80055f4:	60ba      	str	r2, [r7, #8]
 80055f6:	b2ca      	uxtb	r2, r1
 80055f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	3301      	adds	r3, #1
 80055fe:	617b      	str	r3, [r7, #20]
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	429a      	cmp	r2, r3
 8005606:	dbf0      	blt.n	80055ea <_read+0x12>
  }

  return len;
 8005608:	687b      	ldr	r3, [r7, #4]
}
 800560a:	4618      	mov	r0, r3
 800560c:	3718      	adds	r7, #24
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b086      	sub	sp, #24
 8005616:	af00      	add	r7, sp, #0
 8005618:	60f8      	str	r0, [r7, #12]
 800561a:	60b9      	str	r1, [r7, #8]
 800561c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800561e:	2300      	movs	r3, #0
 8005620:	617b      	str	r3, [r7, #20]
 8005622:	e009      	b.n	8005638 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	1c5a      	adds	r2, r3, #1
 8005628:	60ba      	str	r2, [r7, #8]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	4618      	mov	r0, r3
 800562e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	3301      	adds	r3, #1
 8005636:	617b      	str	r3, [r7, #20]
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	429a      	cmp	r2, r3
 800563e:	dbf1      	blt.n	8005624 <_write+0x12>
  }
  return len;
 8005640:	687b      	ldr	r3, [r7, #4]
}
 8005642:	4618      	mov	r0, r3
 8005644:	3718      	adds	r7, #24
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <_close>:

int _close(int file)
{
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005652:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005656:	4618      	mov	r0, r3
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005662:	b480      	push	{r7}
 8005664:	b083      	sub	sp, #12
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
 800566a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005672:	605a      	str	r2, [r3, #4]
  return 0;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <_isatty>:

int _isatty(int file)
{
 8005682:	b480      	push	{r7}
 8005684:	b083      	sub	sp, #12
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800568a:	2301      	movs	r3, #1
}
 800568c:	4618      	mov	r0, r3
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
	...

080056b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80056bc:	4a14      	ldr	r2, [pc, #80]	@ (8005710 <_sbrk+0x5c>)
 80056be:	4b15      	ldr	r3, [pc, #84]	@ (8005714 <_sbrk+0x60>)
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80056c8:	4b13      	ldr	r3, [pc, #76]	@ (8005718 <_sbrk+0x64>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d102      	bne.n	80056d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80056d0:	4b11      	ldr	r3, [pc, #68]	@ (8005718 <_sbrk+0x64>)
 80056d2:	4a12      	ldr	r2, [pc, #72]	@ (800571c <_sbrk+0x68>)
 80056d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80056d6:	4b10      	ldr	r3, [pc, #64]	@ (8005718 <_sbrk+0x64>)
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4413      	add	r3, r2
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d207      	bcs.n	80056f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80056e4:	f005 ffe4 	bl	800b6b0 <__errno>
 80056e8:	4603      	mov	r3, r0
 80056ea:	220c      	movs	r2, #12
 80056ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80056ee:	f04f 33ff 	mov.w	r3, #4294967295
 80056f2:	e009      	b.n	8005708 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80056f4:	4b08      	ldr	r3, [pc, #32]	@ (8005718 <_sbrk+0x64>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80056fa:	4b07      	ldr	r3, [pc, #28]	@ (8005718 <_sbrk+0x64>)
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4413      	add	r3, r2
 8005702:	4a05      	ldr	r2, [pc, #20]	@ (8005718 <_sbrk+0x64>)
 8005704:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005706:	68fb      	ldr	r3, [r7, #12]
}
 8005708:	4618      	mov	r0, r3
 800570a:	3718      	adds	r7, #24
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	20050000 	.word	0x20050000
 8005714:	00000400 	.word	0x00000400
 8005718:	200036b0 	.word	0x200036b0
 800571c:	20003840 	.word	0x20003840

08005720 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005720:	b480      	push	{r7}
 8005722:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005724:	4b06      	ldr	r3, [pc, #24]	@ (8005740 <SystemInit+0x20>)
 8005726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800572a:	4a05      	ldr	r2, [pc, #20]	@ (8005740 <SystemInit+0x20>)
 800572c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005730:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005734:	bf00      	nop
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	e000ed00 	.word	0xe000ed00

08005744 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005744:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800577c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005748:	f7ff ffea 	bl	8005720 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800574c:	480c      	ldr	r0, [pc, #48]	@ (8005780 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800574e:	490d      	ldr	r1, [pc, #52]	@ (8005784 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005750:	4a0d      	ldr	r2, [pc, #52]	@ (8005788 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005754:	e002      	b.n	800575c <LoopCopyDataInit>

08005756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800575a:	3304      	adds	r3, #4

0800575c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800575c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800575e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005760:	d3f9      	bcc.n	8005756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005762:	4a0a      	ldr	r2, [pc, #40]	@ (800578c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005764:	4c0a      	ldr	r4, [pc, #40]	@ (8005790 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005768:	e001      	b.n	800576e <LoopFillZerobss>

0800576a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800576a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800576c:	3204      	adds	r2, #4

0800576e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800576e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005770:	d3fb      	bcc.n	800576a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005772:	f005 ffa3 	bl	800b6bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005776:	f7ff f9f3 	bl	8004b60 <main>
  bx  lr    
 800577a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800577c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005784:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8005788:	0800e76c 	.word	0x0800e76c
  ldr r2, =_sbss
 800578c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8005790:	20003840 	.word	0x20003840

08005794 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005794:	e7fe      	b.n	8005794 <ADC_IRQHandler>

08005796 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800579a:	2003      	movs	r0, #3
 800579c:	f000 f92e 	bl	80059fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80057a0:	2000      	movs	r0, #0
 80057a2:	f000 f805 	bl	80057b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80057a6:	f7ff fe95 	bl	80054d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80057b8:	4b12      	ldr	r3, [pc, #72]	@ (8005804 <HAL_InitTick+0x54>)
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	4b12      	ldr	r3, [pc, #72]	@ (8005808 <HAL_InitTick+0x58>)
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	4619      	mov	r1, r3
 80057c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80057c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80057ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 f93b 	bl	8005a4a <HAL_SYSTICK_Config>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e00e      	b.n	80057fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2b0f      	cmp	r3, #15
 80057e2:	d80a      	bhi.n	80057fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80057e4:	2200      	movs	r2, #0
 80057e6:	6879      	ldr	r1, [r7, #4]
 80057e8:	f04f 30ff 	mov.w	r0, #4294967295
 80057ec:	f000 f911 	bl	8005a12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80057f0:	4a06      	ldr	r2, [pc, #24]	@ (800580c <HAL_InitTick+0x5c>)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
 80057f8:	e000      	b.n	80057fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3708      	adds	r7, #8
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	20000000 	.word	0x20000000
 8005808:	20000008 	.word	0x20000008
 800580c:	20000004 	.word	0x20000004

08005810 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005810:	b480      	push	{r7}
 8005812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005814:	4b06      	ldr	r3, [pc, #24]	@ (8005830 <HAL_IncTick+0x20>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	461a      	mov	r2, r3
 800581a:	4b06      	ldr	r3, [pc, #24]	@ (8005834 <HAL_IncTick+0x24>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4413      	add	r3, r2
 8005820:	4a04      	ldr	r2, [pc, #16]	@ (8005834 <HAL_IncTick+0x24>)
 8005822:	6013      	str	r3, [r2, #0]
}
 8005824:	bf00      	nop
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	20000008 	.word	0x20000008
 8005834:	200036b4 	.word	0x200036b4

08005838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0
  return uwTick;
 800583c:	4b03      	ldr	r3, [pc, #12]	@ (800584c <HAL_GetTick+0x14>)
 800583e:	681b      	ldr	r3, [r3, #0]
}
 8005840:	4618      	mov	r0, r3
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	200036b4 	.word	0x200036b4

08005850 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005858:	f7ff ffee 	bl	8005838 <HAL_GetTick>
 800585c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005868:	d005      	beq.n	8005876 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800586a:	4b0a      	ldr	r3, [pc, #40]	@ (8005894 <HAL_Delay+0x44>)
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	461a      	mov	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4413      	add	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005876:	bf00      	nop
 8005878:	f7ff ffde 	bl	8005838 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	429a      	cmp	r2, r3
 8005886:	d8f7      	bhi.n	8005878 <HAL_Delay+0x28>
  {
  }
}
 8005888:	bf00      	nop
 800588a:	bf00      	nop
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	20000008 	.word	0x20000008

08005898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f003 0307 	and.w	r3, r3, #7
 80058a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058a8:	4b0b      	ldr	r3, [pc, #44]	@ (80058d8 <__NVIC_SetPriorityGrouping+0x40>)
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058ae:	68ba      	ldr	r2, [r7, #8]
 80058b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80058b4:	4013      	ands	r3, r2
 80058b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80058c0:	4b06      	ldr	r3, [pc, #24]	@ (80058dc <__NVIC_SetPriorityGrouping+0x44>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058c6:	4a04      	ldr	r2, [pc, #16]	@ (80058d8 <__NVIC_SetPriorityGrouping+0x40>)
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	60d3      	str	r3, [r2, #12]
}
 80058cc:	bf00      	nop
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	e000ed00 	.word	0xe000ed00
 80058dc:	05fa0000 	.word	0x05fa0000

080058e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80058e0:	b480      	push	{r7}
 80058e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058e4:	4b04      	ldr	r3, [pc, #16]	@ (80058f8 <__NVIC_GetPriorityGrouping+0x18>)
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	0a1b      	lsrs	r3, r3, #8
 80058ea:	f003 0307 	and.w	r3, r3, #7
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	e000ed00 	.word	0xe000ed00

080058fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	4603      	mov	r3, r0
 8005904:	6039      	str	r1, [r7, #0]
 8005906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800590c:	2b00      	cmp	r3, #0
 800590e:	db0a      	blt.n	8005926 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	b2da      	uxtb	r2, r3
 8005914:	490c      	ldr	r1, [pc, #48]	@ (8005948 <__NVIC_SetPriority+0x4c>)
 8005916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800591a:	0112      	lsls	r2, r2, #4
 800591c:	b2d2      	uxtb	r2, r2
 800591e:	440b      	add	r3, r1
 8005920:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005924:	e00a      	b.n	800593c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	b2da      	uxtb	r2, r3
 800592a:	4908      	ldr	r1, [pc, #32]	@ (800594c <__NVIC_SetPriority+0x50>)
 800592c:	79fb      	ldrb	r3, [r7, #7]
 800592e:	f003 030f 	and.w	r3, r3, #15
 8005932:	3b04      	subs	r3, #4
 8005934:	0112      	lsls	r2, r2, #4
 8005936:	b2d2      	uxtb	r2, r2
 8005938:	440b      	add	r3, r1
 800593a:	761a      	strb	r2, [r3, #24]
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr
 8005948:	e000e100 	.word	0xe000e100
 800594c:	e000ed00 	.word	0xe000ed00

08005950 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005950:	b480      	push	{r7}
 8005952:	b089      	sub	sp, #36	@ 0x24
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f003 0307 	and.w	r3, r3, #7
 8005962:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	f1c3 0307 	rsb	r3, r3, #7
 800596a:	2b04      	cmp	r3, #4
 800596c:	bf28      	it	cs
 800596e:	2304      	movcs	r3, #4
 8005970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	3304      	adds	r3, #4
 8005976:	2b06      	cmp	r3, #6
 8005978:	d902      	bls.n	8005980 <NVIC_EncodePriority+0x30>
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	3b03      	subs	r3, #3
 800597e:	e000      	b.n	8005982 <NVIC_EncodePriority+0x32>
 8005980:	2300      	movs	r3, #0
 8005982:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005984:	f04f 32ff 	mov.w	r2, #4294967295
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	fa02 f303 	lsl.w	r3, r2, r3
 800598e:	43da      	mvns	r2, r3
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	401a      	ands	r2, r3
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005998:	f04f 31ff 	mov.w	r1, #4294967295
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	fa01 f303 	lsl.w	r3, r1, r3
 80059a2:	43d9      	mvns	r1, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059a8:	4313      	orrs	r3, r2
         );
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3724      	adds	r7, #36	@ 0x24
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
	...

080059b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	3b01      	subs	r3, #1
 80059c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80059c8:	d301      	bcc.n	80059ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80059ca:	2301      	movs	r3, #1
 80059cc:	e00f      	b.n	80059ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80059ce:	4a0a      	ldr	r2, [pc, #40]	@ (80059f8 <SysTick_Config+0x40>)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	3b01      	subs	r3, #1
 80059d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80059d6:	210f      	movs	r1, #15
 80059d8:	f04f 30ff 	mov.w	r0, #4294967295
 80059dc:	f7ff ff8e 	bl	80058fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80059e0:	4b05      	ldr	r3, [pc, #20]	@ (80059f8 <SysTick_Config+0x40>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059e6:	4b04      	ldr	r3, [pc, #16]	@ (80059f8 <SysTick_Config+0x40>)
 80059e8:	2207      	movs	r2, #7
 80059ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3708      	adds	r7, #8
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	e000e010 	.word	0xe000e010

080059fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f7ff ff47 	bl	8005898 <__NVIC_SetPriorityGrouping>
}
 8005a0a:	bf00      	nop
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b086      	sub	sp, #24
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	4603      	mov	r3, r0
 8005a1a:	60b9      	str	r1, [r7, #8]
 8005a1c:	607a      	str	r2, [r7, #4]
 8005a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005a20:	2300      	movs	r3, #0
 8005a22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005a24:	f7ff ff5c 	bl	80058e0 <__NVIC_GetPriorityGrouping>
 8005a28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	68b9      	ldr	r1, [r7, #8]
 8005a2e:	6978      	ldr	r0, [r7, #20]
 8005a30:	f7ff ff8e 	bl	8005950 <NVIC_EncodePriority>
 8005a34:	4602      	mov	r2, r0
 8005a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a3a:	4611      	mov	r1, r2
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7ff ff5d 	bl	80058fc <__NVIC_SetPriority>
}
 8005a42:	bf00      	nop
 8005a44:	3718      	adds	r7, #24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b082      	sub	sp, #8
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7ff ffb0 	bl	80059b8 <SysTick_Config>
 8005a58:	4603      	mov	r3, r0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3708      	adds	r7, #8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
	...

08005a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b089      	sub	sp, #36	@ 0x24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005a72:	2300      	movs	r3, #0
 8005a74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005a76:	2300      	movs	r3, #0
 8005a78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8005a7e:	2300      	movs	r3, #0
 8005a80:	61fb      	str	r3, [r7, #28]
 8005a82:	e175      	b.n	8005d70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005a84:	2201      	movs	r2, #1
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	4013      	ands	r3, r2
 8005a96:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	f040 8164 	bne.w	8005d6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f003 0303 	and.w	r3, r3, #3
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d005      	beq.n	8005aba <HAL_GPIO_Init+0x56>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f003 0303 	and.w	r3, r3, #3
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d130      	bne.n	8005b1c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	005b      	lsls	r3, r3, #1
 8005ac4:	2203      	movs	r2, #3
 8005ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aca:	43db      	mvns	r3, r3
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	4013      	ands	r3, r2
 8005ad0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	68da      	ldr	r2, [r3, #12]
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	005b      	lsls	r3, r3, #1
 8005ada:	fa02 f303 	lsl.w	r3, r2, r3
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005af0:	2201      	movs	r2, #1
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	fa02 f303 	lsl.w	r3, r2, r3
 8005af8:	43db      	mvns	r3, r3
 8005afa:	69ba      	ldr	r2, [r7, #24]
 8005afc:	4013      	ands	r3, r2
 8005afe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	091b      	lsrs	r3, r3, #4
 8005b06:	f003 0201 	and.w	r2, r3, #1
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	69ba      	ldr	r2, [r7, #24]
 8005b1a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f003 0303 	and.w	r3, r3, #3
 8005b24:	2b03      	cmp	r3, #3
 8005b26:	d017      	beq.n	8005b58 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	005b      	lsls	r3, r3, #1
 8005b32:	2203      	movs	r2, #3
 8005b34:	fa02 f303 	lsl.w	r3, r2, r3
 8005b38:	43db      	mvns	r3, r3
 8005b3a:	69ba      	ldr	r2, [r7, #24]
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	689a      	ldr	r2, [r3, #8]
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	005b      	lsls	r3, r3, #1
 8005b48:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f003 0303 	and.w	r3, r3, #3
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d123      	bne.n	8005bac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	08da      	lsrs	r2, r3, #3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3208      	adds	r2, #8
 8005b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	f003 0307 	and.w	r3, r3, #7
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	220f      	movs	r2, #15
 8005b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b80:	43db      	mvns	r3, r3
 8005b82:	69ba      	ldr	r2, [r7, #24]
 8005b84:	4013      	ands	r3, r2
 8005b86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	691a      	ldr	r2, [r3, #16]
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	f003 0307 	and.w	r3, r3, #7
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	fa02 f303 	lsl.w	r3, r2, r3
 8005b98:	69ba      	ldr	r2, [r7, #24]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	08da      	lsrs	r2, r3, #3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	3208      	adds	r2, #8
 8005ba6:	69b9      	ldr	r1, [r7, #24]
 8005ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	005b      	lsls	r3, r3, #1
 8005bb6:	2203      	movs	r2, #3
 8005bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbc:	43db      	mvns	r3, r3
 8005bbe:	69ba      	ldr	r2, [r7, #24]
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f003 0203 	and.w	r2, r3, #3
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	005b      	lsls	r3, r3, #1
 8005bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd4:	69ba      	ldr	r2, [r7, #24]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 80be 	beq.w	8005d6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bee:	4b66      	ldr	r3, [pc, #408]	@ (8005d88 <HAL_GPIO_Init+0x324>)
 8005bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bf2:	4a65      	ldr	r2, [pc, #404]	@ (8005d88 <HAL_GPIO_Init+0x324>)
 8005bf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005bf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8005bfa:	4b63      	ldr	r3, [pc, #396]	@ (8005d88 <HAL_GPIO_Init+0x324>)
 8005bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c02:	60fb      	str	r3, [r7, #12]
 8005c04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005c06:	4a61      	ldr	r2, [pc, #388]	@ (8005d8c <HAL_GPIO_Init+0x328>)
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	089b      	lsrs	r3, r3, #2
 8005c0c:	3302      	adds	r3, #2
 8005c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	f003 0303 	and.w	r3, r3, #3
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	220f      	movs	r2, #15
 8005c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c22:	43db      	mvns	r3, r3
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	4013      	ands	r3, r2
 8005c28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a58      	ldr	r2, [pc, #352]	@ (8005d90 <HAL_GPIO_Init+0x32c>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d037      	beq.n	8005ca2 <HAL_GPIO_Init+0x23e>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a57      	ldr	r2, [pc, #348]	@ (8005d94 <HAL_GPIO_Init+0x330>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d031      	beq.n	8005c9e <HAL_GPIO_Init+0x23a>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a56      	ldr	r2, [pc, #344]	@ (8005d98 <HAL_GPIO_Init+0x334>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d02b      	beq.n	8005c9a <HAL_GPIO_Init+0x236>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a55      	ldr	r2, [pc, #340]	@ (8005d9c <HAL_GPIO_Init+0x338>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d025      	beq.n	8005c96 <HAL_GPIO_Init+0x232>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a54      	ldr	r2, [pc, #336]	@ (8005da0 <HAL_GPIO_Init+0x33c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d01f      	beq.n	8005c92 <HAL_GPIO_Init+0x22e>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a53      	ldr	r2, [pc, #332]	@ (8005da4 <HAL_GPIO_Init+0x340>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d019      	beq.n	8005c8e <HAL_GPIO_Init+0x22a>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a52      	ldr	r2, [pc, #328]	@ (8005da8 <HAL_GPIO_Init+0x344>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d013      	beq.n	8005c8a <HAL_GPIO_Init+0x226>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a51      	ldr	r2, [pc, #324]	@ (8005dac <HAL_GPIO_Init+0x348>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d00d      	beq.n	8005c86 <HAL_GPIO_Init+0x222>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a50      	ldr	r2, [pc, #320]	@ (8005db0 <HAL_GPIO_Init+0x34c>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d007      	beq.n	8005c82 <HAL_GPIO_Init+0x21e>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a4f      	ldr	r2, [pc, #316]	@ (8005db4 <HAL_GPIO_Init+0x350>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d101      	bne.n	8005c7e <HAL_GPIO_Init+0x21a>
 8005c7a:	2309      	movs	r3, #9
 8005c7c:	e012      	b.n	8005ca4 <HAL_GPIO_Init+0x240>
 8005c7e:	230a      	movs	r3, #10
 8005c80:	e010      	b.n	8005ca4 <HAL_GPIO_Init+0x240>
 8005c82:	2308      	movs	r3, #8
 8005c84:	e00e      	b.n	8005ca4 <HAL_GPIO_Init+0x240>
 8005c86:	2307      	movs	r3, #7
 8005c88:	e00c      	b.n	8005ca4 <HAL_GPIO_Init+0x240>
 8005c8a:	2306      	movs	r3, #6
 8005c8c:	e00a      	b.n	8005ca4 <HAL_GPIO_Init+0x240>
 8005c8e:	2305      	movs	r3, #5
 8005c90:	e008      	b.n	8005ca4 <HAL_GPIO_Init+0x240>
 8005c92:	2304      	movs	r3, #4
 8005c94:	e006      	b.n	8005ca4 <HAL_GPIO_Init+0x240>
 8005c96:	2303      	movs	r3, #3
 8005c98:	e004      	b.n	8005ca4 <HAL_GPIO_Init+0x240>
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	e002      	b.n	8005ca4 <HAL_GPIO_Init+0x240>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e000      	b.n	8005ca4 <HAL_GPIO_Init+0x240>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	69fa      	ldr	r2, [r7, #28]
 8005ca6:	f002 0203 	and.w	r2, r2, #3
 8005caa:	0092      	lsls	r2, r2, #2
 8005cac:	4093      	lsls	r3, r2
 8005cae:	69ba      	ldr	r2, [r7, #24]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005cb4:	4935      	ldr	r1, [pc, #212]	@ (8005d8c <HAL_GPIO_Init+0x328>)
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	089b      	lsrs	r3, r3, #2
 8005cba:	3302      	adds	r3, #2
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005cc2:	4b3d      	ldr	r3, [pc, #244]	@ (8005db8 <HAL_GPIO_Init+0x354>)
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	43db      	mvns	r3, r3
 8005ccc:	69ba      	ldr	r2, [r7, #24]
 8005cce:	4013      	ands	r3, r2
 8005cd0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d003      	beq.n	8005ce6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005cde:	69ba      	ldr	r2, [r7, #24]
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005ce6:	4a34      	ldr	r2, [pc, #208]	@ (8005db8 <HAL_GPIO_Init+0x354>)
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005cec:	4b32      	ldr	r3, [pc, #200]	@ (8005db8 <HAL_GPIO_Init+0x354>)
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	43db      	mvns	r3, r3
 8005cf6:	69ba      	ldr	r2, [r7, #24]
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d003      	beq.n	8005d10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005d10:	4a29      	ldr	r2, [pc, #164]	@ (8005db8 <HAL_GPIO_Init+0x354>)
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005d16:	4b28      	ldr	r3, [pc, #160]	@ (8005db8 <HAL_GPIO_Init+0x354>)
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	43db      	mvns	r3, r3
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	4013      	ands	r3, r2
 8005d24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d003      	beq.n	8005d3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d3a:	4a1f      	ldr	r2, [pc, #124]	@ (8005db8 <HAL_GPIO_Init+0x354>)
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d40:	4b1d      	ldr	r3, [pc, #116]	@ (8005db8 <HAL_GPIO_Init+0x354>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	43db      	mvns	r3, r3
 8005d4a:	69ba      	ldr	r2, [r7, #24]
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d003      	beq.n	8005d64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d64:	4a14      	ldr	r2, [pc, #80]	@ (8005db8 <HAL_GPIO_Init+0x354>)
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	61fb      	str	r3, [r7, #28]
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	2b0f      	cmp	r3, #15
 8005d74:	f67f ae86 	bls.w	8005a84 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005d78:	bf00      	nop
 8005d7a:	bf00      	nop
 8005d7c:	3724      	adds	r7, #36	@ 0x24
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	40023800 	.word	0x40023800
 8005d8c:	40013800 	.word	0x40013800
 8005d90:	40020000 	.word	0x40020000
 8005d94:	40020400 	.word	0x40020400
 8005d98:	40020800 	.word	0x40020800
 8005d9c:	40020c00 	.word	0x40020c00
 8005da0:	40021000 	.word	0x40021000
 8005da4:	40021400 	.word	0x40021400
 8005da8:	40021800 	.word	0x40021800
 8005dac:	40021c00 	.word	0x40021c00
 8005db0:	40022000 	.word	0x40022000
 8005db4:	40022400 	.word	0x40022400
 8005db8:	40013c00 	.word	0x40013c00

08005dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	807b      	strh	r3, [r7, #2]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005dcc:	787b      	ldrb	r3, [r7, #1]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d003      	beq.n	8005dda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005dd2:	887a      	ldrh	r2, [r7, #2]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005dd8:	e003      	b.n	8005de2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005dda:	887b      	ldrh	r3, [r7, #2]
 8005ddc:	041a      	lsls	r2, r3, #16
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	619a      	str	r2, [r3, #24]
}
 8005de2:	bf00      	nop
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b085      	sub	sp, #20
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
 8005df6:	460b      	mov	r3, r1
 8005df8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005e00:	887a      	ldrh	r2, [r7, #2]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	4013      	ands	r3, r2
 8005e06:	041a      	lsls	r2, r3, #16
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	43d9      	mvns	r1, r3
 8005e0c:	887b      	ldrh	r3, [r7, #2]
 8005e0e:	400b      	ands	r3, r1
 8005e10:	431a      	orrs	r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	619a      	str	r2, [r3, #24]
}
 8005e16:	bf00      	nop
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
	...

08005e24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d101      	bne.n	8005e3a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e291      	b.n	800635e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f000 8087 	beq.w	8005f56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e48:	4b96      	ldr	r3, [pc, #600]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f003 030c 	and.w	r3, r3, #12
 8005e50:	2b04      	cmp	r3, #4
 8005e52:	d00c      	beq.n	8005e6e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e54:	4b93      	ldr	r3, [pc, #588]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f003 030c 	and.w	r3, r3, #12
 8005e5c:	2b08      	cmp	r3, #8
 8005e5e:	d112      	bne.n	8005e86 <HAL_RCC_OscConfig+0x62>
 8005e60:	4b90      	ldr	r3, [pc, #576]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e6c:	d10b      	bne.n	8005e86 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e6e:	4b8d      	ldr	r3, [pc, #564]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d06c      	beq.n	8005f54 <HAL_RCC_OscConfig+0x130>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d168      	bne.n	8005f54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e26b      	b.n	800635e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e8e:	d106      	bne.n	8005e9e <HAL_RCC_OscConfig+0x7a>
 8005e90:	4b84      	ldr	r3, [pc, #528]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a83      	ldr	r2, [pc, #524]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 8005e96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e9a:	6013      	str	r3, [r2, #0]
 8005e9c:	e02e      	b.n	8005efc <HAL_RCC_OscConfig+0xd8>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10c      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x9c>
 8005ea6:	4b7f      	ldr	r3, [pc, #508]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a7e      	ldr	r2, [pc, #504]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 8005eac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eb0:	6013      	str	r3, [r2, #0]
 8005eb2:	4b7c      	ldr	r3, [pc, #496]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a7b      	ldr	r2, [pc, #492]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 8005eb8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ebc:	6013      	str	r3, [r2, #0]
 8005ebe:	e01d      	b.n	8005efc <HAL_RCC_OscConfig+0xd8>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ec8:	d10c      	bne.n	8005ee4 <HAL_RCC_OscConfig+0xc0>
 8005eca:	4b76      	ldr	r3, [pc, #472]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a75      	ldr	r2, [pc, #468]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 8005ed0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ed4:	6013      	str	r3, [r2, #0]
 8005ed6:	4b73      	ldr	r3, [pc, #460]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a72      	ldr	r2, [pc, #456]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 8005edc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	e00b      	b.n	8005efc <HAL_RCC_OscConfig+0xd8>
 8005ee4:	4b6f      	ldr	r3, [pc, #444]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a6e      	ldr	r2, [pc, #440]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 8005eea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eee:	6013      	str	r3, [r2, #0]
 8005ef0:	4b6c      	ldr	r3, [pc, #432]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a6b      	ldr	r2, [pc, #428]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 8005ef6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d013      	beq.n	8005f2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f04:	f7ff fc98 	bl	8005838 <HAL_GetTick>
 8005f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f0a:	e008      	b.n	8005f1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f0c:	f7ff fc94 	bl	8005838 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	2b64      	cmp	r3, #100	@ 0x64
 8005f18:	d901      	bls.n	8005f1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e21f      	b.n	800635e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f1e:	4b61      	ldr	r3, [pc, #388]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d0f0      	beq.n	8005f0c <HAL_RCC_OscConfig+0xe8>
 8005f2a:	e014      	b.n	8005f56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f2c:	f7ff fc84 	bl	8005838 <HAL_GetTick>
 8005f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f32:	e008      	b.n	8005f46 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f34:	f7ff fc80 	bl	8005838 <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	2b64      	cmp	r3, #100	@ 0x64
 8005f40:	d901      	bls.n	8005f46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e20b      	b.n	800635e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f46:	4b57      	ldr	r3, [pc, #348]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1f0      	bne.n	8005f34 <HAL_RCC_OscConfig+0x110>
 8005f52:	e000      	b.n	8005f56 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d069      	beq.n	8006036 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f62:	4b50      	ldr	r3, [pc, #320]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f003 030c 	and.w	r3, r3, #12
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00b      	beq.n	8005f86 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f6e:	4b4d      	ldr	r3, [pc, #308]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f003 030c 	and.w	r3, r3, #12
 8005f76:	2b08      	cmp	r3, #8
 8005f78:	d11c      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x190>
 8005f7a:	4b4a      	ldr	r3, [pc, #296]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d116      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f86:	4b47      	ldr	r3, [pc, #284]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0302 	and.w	r3, r3, #2
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d005      	beq.n	8005f9e <HAL_RCC_OscConfig+0x17a>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d001      	beq.n	8005f9e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e1df      	b.n	800635e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f9e:	4b41      	ldr	r3, [pc, #260]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	00db      	lsls	r3, r3, #3
 8005fac:	493d      	ldr	r1, [pc, #244]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fb2:	e040      	b.n	8006036 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d023      	beq.n	8006004 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fbc:	4b39      	ldr	r3, [pc, #228]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a38      	ldr	r2, [pc, #224]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 8005fc2:	f043 0301 	orr.w	r3, r3, #1
 8005fc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc8:	f7ff fc36 	bl	8005838 <HAL_GetTick>
 8005fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fce:	e008      	b.n	8005fe2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fd0:	f7ff fc32 	bl	8005838 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d901      	bls.n	8005fe2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e1bd      	b.n	800635e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fe2:	4b30      	ldr	r3, [pc, #192]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0302 	and.w	r3, r3, #2
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d0f0      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fee:	4b2d      	ldr	r3, [pc, #180]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	00db      	lsls	r3, r3, #3
 8005ffc:	4929      	ldr	r1, [pc, #164]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	600b      	str	r3, [r1, #0]
 8006002:	e018      	b.n	8006036 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006004:	4b27      	ldr	r3, [pc, #156]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a26      	ldr	r2, [pc, #152]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 800600a:	f023 0301 	bic.w	r3, r3, #1
 800600e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006010:	f7ff fc12 	bl	8005838 <HAL_GetTick>
 8006014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006016:	e008      	b.n	800602a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006018:	f7ff fc0e 	bl	8005838 <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	2b02      	cmp	r3, #2
 8006024:	d901      	bls.n	800602a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e199      	b.n	800635e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800602a:	4b1e      	ldr	r3, [pc, #120]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1f0      	bne.n	8006018 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0308 	and.w	r3, r3, #8
 800603e:	2b00      	cmp	r3, #0
 8006040:	d038      	beq.n	80060b4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d019      	beq.n	800607e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800604a:	4b16      	ldr	r3, [pc, #88]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 800604c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800604e:	4a15      	ldr	r2, [pc, #84]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 8006050:	f043 0301 	orr.w	r3, r3, #1
 8006054:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006056:	f7ff fbef 	bl	8005838 <HAL_GetTick>
 800605a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800605c:	e008      	b.n	8006070 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800605e:	f7ff fbeb 	bl	8005838 <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	2b02      	cmp	r3, #2
 800606a:	d901      	bls.n	8006070 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e176      	b.n	800635e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006070:	4b0c      	ldr	r3, [pc, #48]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 8006072:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d0f0      	beq.n	800605e <HAL_RCC_OscConfig+0x23a>
 800607c:	e01a      	b.n	80060b4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800607e:	4b09      	ldr	r3, [pc, #36]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 8006080:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006082:	4a08      	ldr	r2, [pc, #32]	@ (80060a4 <HAL_RCC_OscConfig+0x280>)
 8006084:	f023 0301 	bic.w	r3, r3, #1
 8006088:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800608a:	f7ff fbd5 	bl	8005838 <HAL_GetTick>
 800608e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006090:	e00a      	b.n	80060a8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006092:	f7ff fbd1 	bl	8005838 <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	2b02      	cmp	r3, #2
 800609e:	d903      	bls.n	80060a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e15c      	b.n	800635e <HAL_RCC_OscConfig+0x53a>
 80060a4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060a8:	4b91      	ldr	r3, [pc, #580]	@ (80062f0 <HAL_RCC_OscConfig+0x4cc>)
 80060aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060ac:	f003 0302 	and.w	r3, r3, #2
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1ee      	bne.n	8006092 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0304 	and.w	r3, r3, #4
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f000 80a4 	beq.w	800620a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060c2:	4b8b      	ldr	r3, [pc, #556]	@ (80062f0 <HAL_RCC_OscConfig+0x4cc>)
 80060c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10d      	bne.n	80060ea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80060ce:	4b88      	ldr	r3, [pc, #544]	@ (80062f0 <HAL_RCC_OscConfig+0x4cc>)
 80060d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d2:	4a87      	ldr	r2, [pc, #540]	@ (80062f0 <HAL_RCC_OscConfig+0x4cc>)
 80060d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80060da:	4b85      	ldr	r3, [pc, #532]	@ (80062f0 <HAL_RCC_OscConfig+0x4cc>)
 80060dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060e2:	60bb      	str	r3, [r7, #8]
 80060e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060e6:	2301      	movs	r3, #1
 80060e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060ea:	4b82      	ldr	r3, [pc, #520]	@ (80062f4 <HAL_RCC_OscConfig+0x4d0>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d118      	bne.n	8006128 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80060f6:	4b7f      	ldr	r3, [pc, #508]	@ (80062f4 <HAL_RCC_OscConfig+0x4d0>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a7e      	ldr	r2, [pc, #504]	@ (80062f4 <HAL_RCC_OscConfig+0x4d0>)
 80060fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006100:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006102:	f7ff fb99 	bl	8005838 <HAL_GetTick>
 8006106:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006108:	e008      	b.n	800611c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800610a:	f7ff fb95 	bl	8005838 <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	2b64      	cmp	r3, #100	@ 0x64
 8006116:	d901      	bls.n	800611c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e120      	b.n	800635e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800611c:	4b75      	ldr	r3, [pc, #468]	@ (80062f4 <HAL_RCC_OscConfig+0x4d0>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006124:	2b00      	cmp	r3, #0
 8006126:	d0f0      	beq.n	800610a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	2b01      	cmp	r3, #1
 800612e:	d106      	bne.n	800613e <HAL_RCC_OscConfig+0x31a>
 8006130:	4b6f      	ldr	r3, [pc, #444]	@ (80062f0 <HAL_RCC_OscConfig+0x4cc>)
 8006132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006134:	4a6e      	ldr	r2, [pc, #440]	@ (80062f0 <HAL_RCC_OscConfig+0x4cc>)
 8006136:	f043 0301 	orr.w	r3, r3, #1
 800613a:	6713      	str	r3, [r2, #112]	@ 0x70
 800613c:	e02d      	b.n	800619a <HAL_RCC_OscConfig+0x376>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10c      	bne.n	8006160 <HAL_RCC_OscConfig+0x33c>
 8006146:	4b6a      	ldr	r3, [pc, #424]	@ (80062f0 <HAL_RCC_OscConfig+0x4cc>)
 8006148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800614a:	4a69      	ldr	r2, [pc, #420]	@ (80062f0 <HAL_RCC_OscConfig+0x4cc>)
 800614c:	f023 0301 	bic.w	r3, r3, #1
 8006150:	6713      	str	r3, [r2, #112]	@ 0x70
 8006152:	4b67      	ldr	r3, [pc, #412]	@ (80062f0 <HAL_RCC_OscConfig+0x4cc>)
 8006154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006156:	4a66      	ldr	r2, [pc, #408]	@ (80062f0 <HAL_RCC_OscConfig+0x4cc>)
 8006158:	f023 0304 	bic.w	r3, r3, #4
 800615c:	6713      	str	r3, [r2, #112]	@ 0x70
 800615e:	e01c      	b.n	800619a <HAL_RCC_OscConfig+0x376>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	2b05      	cmp	r3, #5
 8006166:	d10c      	bne.n	8006182 <HAL_RCC_OscConfig+0x35e>
 8006168:	4b61      	ldr	r3, [pc, #388]	@ (80062f0 <HAL_RCC_OscConfig+0x4cc>)
 800616a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800616c:	4a60      	ldr	r2, [pc, #384]	@ (80062f0 <HAL_RCC_OscConfig+0x4cc>)
 800616e:	f043 0304 	orr.w	r3, r3, #4
 8006172:	6713      	str	r3, [r2, #112]	@ 0x70
 8006174:	4b5e      	ldr	r3, [pc, #376]	@ (80062f0 <HAL_RCC_OscConfig+0x4cc>)
 8006176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006178:	4a5d      	ldr	r2, [pc, #372]	@ (80062f0 <HAL_RCC_OscConfig+0x4cc>)
 800617a:	f043 0301 	orr.w	r3, r3, #1
 800617e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006180:	e00b      	b.n	800619a <HAL_RCC_OscConfig+0x376>
 8006182:	4b5b      	ldr	r3, [pc, #364]	@ (80062f0 <HAL_RCC_OscConfig+0x4cc>)
 8006184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006186:	4a5a      	ldr	r2, [pc, #360]	@ (80062f0 <HAL_RCC_OscConfig+0x4cc>)
 8006188:	f023 0301 	bic.w	r3, r3, #1
 800618c:	6713      	str	r3, [r2, #112]	@ 0x70
 800618e:	4b58      	ldr	r3, [pc, #352]	@ (80062f0 <HAL_RCC_OscConfig+0x4cc>)
 8006190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006192:	4a57      	ldr	r2, [pc, #348]	@ (80062f0 <HAL_RCC_OscConfig+0x4cc>)
 8006194:	f023 0304 	bic.w	r3, r3, #4
 8006198:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d015      	beq.n	80061ce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061a2:	f7ff fb49 	bl	8005838 <HAL_GetTick>
 80061a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061a8:	e00a      	b.n	80061c0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061aa:	f7ff fb45 	bl	8005838 <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d901      	bls.n	80061c0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e0ce      	b.n	800635e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061c0:	4b4b      	ldr	r3, [pc, #300]	@ (80062f0 <HAL_RCC_OscConfig+0x4cc>)
 80061c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061c4:	f003 0302 	and.w	r3, r3, #2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d0ee      	beq.n	80061aa <HAL_RCC_OscConfig+0x386>
 80061cc:	e014      	b.n	80061f8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ce:	f7ff fb33 	bl	8005838 <HAL_GetTick>
 80061d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061d4:	e00a      	b.n	80061ec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061d6:	f7ff fb2f 	bl	8005838 <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d901      	bls.n	80061ec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e0b8      	b.n	800635e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061ec:	4b40      	ldr	r3, [pc, #256]	@ (80062f0 <HAL_RCC_OscConfig+0x4cc>)
 80061ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061f0:	f003 0302 	and.w	r3, r3, #2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1ee      	bne.n	80061d6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80061f8:	7dfb      	ldrb	r3, [r7, #23]
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d105      	bne.n	800620a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061fe:	4b3c      	ldr	r3, [pc, #240]	@ (80062f0 <HAL_RCC_OscConfig+0x4cc>)
 8006200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006202:	4a3b      	ldr	r2, [pc, #236]	@ (80062f0 <HAL_RCC_OscConfig+0x4cc>)
 8006204:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006208:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	2b00      	cmp	r3, #0
 8006210:	f000 80a4 	beq.w	800635c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006214:	4b36      	ldr	r3, [pc, #216]	@ (80062f0 <HAL_RCC_OscConfig+0x4cc>)
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	f003 030c 	and.w	r3, r3, #12
 800621c:	2b08      	cmp	r3, #8
 800621e:	d06b      	beq.n	80062f8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	2b02      	cmp	r3, #2
 8006226:	d149      	bne.n	80062bc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006228:	4b31      	ldr	r3, [pc, #196]	@ (80062f0 <HAL_RCC_OscConfig+0x4cc>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a30      	ldr	r2, [pc, #192]	@ (80062f0 <HAL_RCC_OscConfig+0x4cc>)
 800622e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006232:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006234:	f7ff fb00 	bl	8005838 <HAL_GetTick>
 8006238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800623a:	e008      	b.n	800624e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800623c:	f7ff fafc 	bl	8005838 <HAL_GetTick>
 8006240:	4602      	mov	r2, r0
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	2b02      	cmp	r3, #2
 8006248:	d901      	bls.n	800624e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e087      	b.n	800635e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800624e:	4b28      	ldr	r3, [pc, #160]	@ (80062f0 <HAL_RCC_OscConfig+0x4cc>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d1f0      	bne.n	800623c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	69da      	ldr	r2, [r3, #28]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	431a      	orrs	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006268:	019b      	lsls	r3, r3, #6
 800626a:	431a      	orrs	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006270:	085b      	lsrs	r3, r3, #1
 8006272:	3b01      	subs	r3, #1
 8006274:	041b      	lsls	r3, r3, #16
 8006276:	431a      	orrs	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800627c:	061b      	lsls	r3, r3, #24
 800627e:	4313      	orrs	r3, r2
 8006280:	4a1b      	ldr	r2, [pc, #108]	@ (80062f0 <HAL_RCC_OscConfig+0x4cc>)
 8006282:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006286:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006288:	4b19      	ldr	r3, [pc, #100]	@ (80062f0 <HAL_RCC_OscConfig+0x4cc>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a18      	ldr	r2, [pc, #96]	@ (80062f0 <HAL_RCC_OscConfig+0x4cc>)
 800628e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006292:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006294:	f7ff fad0 	bl	8005838 <HAL_GetTick>
 8006298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800629a:	e008      	b.n	80062ae <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800629c:	f7ff facc 	bl	8005838 <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d901      	bls.n	80062ae <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e057      	b.n	800635e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062ae:	4b10      	ldr	r3, [pc, #64]	@ (80062f0 <HAL_RCC_OscConfig+0x4cc>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d0f0      	beq.n	800629c <HAL_RCC_OscConfig+0x478>
 80062ba:	e04f      	b.n	800635c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062bc:	4b0c      	ldr	r3, [pc, #48]	@ (80062f0 <HAL_RCC_OscConfig+0x4cc>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a0b      	ldr	r2, [pc, #44]	@ (80062f0 <HAL_RCC_OscConfig+0x4cc>)
 80062c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c8:	f7ff fab6 	bl	8005838 <HAL_GetTick>
 80062cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062ce:	e008      	b.n	80062e2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062d0:	f7ff fab2 	bl	8005838 <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d901      	bls.n	80062e2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e03d      	b.n	800635e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062e2:	4b03      	ldr	r3, [pc, #12]	@ (80062f0 <HAL_RCC_OscConfig+0x4cc>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1f0      	bne.n	80062d0 <HAL_RCC_OscConfig+0x4ac>
 80062ee:	e035      	b.n	800635c <HAL_RCC_OscConfig+0x538>
 80062f0:	40023800 	.word	0x40023800
 80062f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80062f8:	4b1b      	ldr	r3, [pc, #108]	@ (8006368 <HAL_RCC_OscConfig+0x544>)
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d028      	beq.n	8006358 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006310:	429a      	cmp	r2, r3
 8006312:	d121      	bne.n	8006358 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800631e:	429a      	cmp	r2, r3
 8006320:	d11a      	bne.n	8006358 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006328:	4013      	ands	r3, r2
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800632e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006330:	4293      	cmp	r3, r2
 8006332:	d111      	bne.n	8006358 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800633e:	085b      	lsrs	r3, r3, #1
 8006340:	3b01      	subs	r3, #1
 8006342:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006344:	429a      	cmp	r2, r3
 8006346:	d107      	bne.n	8006358 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006352:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006354:	429a      	cmp	r2, r3
 8006356:	d001      	beq.n	800635c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e000      	b.n	800635e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3718      	adds	r7, #24
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	40023800 	.word	0x40023800

0800636c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006376:	2300      	movs	r3, #0
 8006378:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e0d0      	b.n	8006526 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006384:	4b6a      	ldr	r3, [pc, #424]	@ (8006530 <HAL_RCC_ClockConfig+0x1c4>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 030f 	and.w	r3, r3, #15
 800638c:	683a      	ldr	r2, [r7, #0]
 800638e:	429a      	cmp	r2, r3
 8006390:	d910      	bls.n	80063b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006392:	4b67      	ldr	r3, [pc, #412]	@ (8006530 <HAL_RCC_ClockConfig+0x1c4>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f023 020f 	bic.w	r2, r3, #15
 800639a:	4965      	ldr	r1, [pc, #404]	@ (8006530 <HAL_RCC_ClockConfig+0x1c4>)
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	4313      	orrs	r3, r2
 80063a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063a2:	4b63      	ldr	r3, [pc, #396]	@ (8006530 <HAL_RCC_ClockConfig+0x1c4>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 030f 	and.w	r3, r3, #15
 80063aa:	683a      	ldr	r2, [r7, #0]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d001      	beq.n	80063b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e0b8      	b.n	8006526 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0302 	and.w	r3, r3, #2
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d020      	beq.n	8006402 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0304 	and.w	r3, r3, #4
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d005      	beq.n	80063d8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063cc:	4b59      	ldr	r3, [pc, #356]	@ (8006534 <HAL_RCC_ClockConfig+0x1c8>)
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	4a58      	ldr	r2, [pc, #352]	@ (8006534 <HAL_RCC_ClockConfig+0x1c8>)
 80063d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80063d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0308 	and.w	r3, r3, #8
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d005      	beq.n	80063f0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063e4:	4b53      	ldr	r3, [pc, #332]	@ (8006534 <HAL_RCC_ClockConfig+0x1c8>)
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	4a52      	ldr	r2, [pc, #328]	@ (8006534 <HAL_RCC_ClockConfig+0x1c8>)
 80063ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80063ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063f0:	4b50      	ldr	r3, [pc, #320]	@ (8006534 <HAL_RCC_ClockConfig+0x1c8>)
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	494d      	ldr	r1, [pc, #308]	@ (8006534 <HAL_RCC_ClockConfig+0x1c8>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0301 	and.w	r3, r3, #1
 800640a:	2b00      	cmp	r3, #0
 800640c:	d040      	beq.n	8006490 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d107      	bne.n	8006426 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006416:	4b47      	ldr	r3, [pc, #284]	@ (8006534 <HAL_RCC_ClockConfig+0x1c8>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d115      	bne.n	800644e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e07f      	b.n	8006526 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	2b02      	cmp	r3, #2
 800642c:	d107      	bne.n	800643e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800642e:	4b41      	ldr	r3, [pc, #260]	@ (8006534 <HAL_RCC_ClockConfig+0x1c8>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d109      	bne.n	800644e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e073      	b.n	8006526 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800643e:	4b3d      	ldr	r3, [pc, #244]	@ (8006534 <HAL_RCC_ClockConfig+0x1c8>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e06b      	b.n	8006526 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800644e:	4b39      	ldr	r3, [pc, #228]	@ (8006534 <HAL_RCC_ClockConfig+0x1c8>)
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	f023 0203 	bic.w	r2, r3, #3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	4936      	ldr	r1, [pc, #216]	@ (8006534 <HAL_RCC_ClockConfig+0x1c8>)
 800645c:	4313      	orrs	r3, r2
 800645e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006460:	f7ff f9ea 	bl	8005838 <HAL_GetTick>
 8006464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006466:	e00a      	b.n	800647e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006468:	f7ff f9e6 	bl	8005838 <HAL_GetTick>
 800646c:	4602      	mov	r2, r0
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006476:	4293      	cmp	r3, r2
 8006478:	d901      	bls.n	800647e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e053      	b.n	8006526 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800647e:	4b2d      	ldr	r3, [pc, #180]	@ (8006534 <HAL_RCC_ClockConfig+0x1c8>)
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f003 020c 	and.w	r2, r3, #12
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	429a      	cmp	r2, r3
 800648e:	d1eb      	bne.n	8006468 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006490:	4b27      	ldr	r3, [pc, #156]	@ (8006530 <HAL_RCC_ClockConfig+0x1c4>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 030f 	and.w	r3, r3, #15
 8006498:	683a      	ldr	r2, [r7, #0]
 800649a:	429a      	cmp	r2, r3
 800649c:	d210      	bcs.n	80064c0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800649e:	4b24      	ldr	r3, [pc, #144]	@ (8006530 <HAL_RCC_ClockConfig+0x1c4>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f023 020f 	bic.w	r2, r3, #15
 80064a6:	4922      	ldr	r1, [pc, #136]	@ (8006530 <HAL_RCC_ClockConfig+0x1c4>)
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064ae:	4b20      	ldr	r3, [pc, #128]	@ (8006530 <HAL_RCC_ClockConfig+0x1c4>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 030f 	and.w	r3, r3, #15
 80064b6:	683a      	ldr	r2, [r7, #0]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d001      	beq.n	80064c0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e032      	b.n	8006526 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0304 	and.w	r3, r3, #4
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d008      	beq.n	80064de <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064cc:	4b19      	ldr	r3, [pc, #100]	@ (8006534 <HAL_RCC_ClockConfig+0x1c8>)
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	4916      	ldr	r1, [pc, #88]	@ (8006534 <HAL_RCC_ClockConfig+0x1c8>)
 80064da:	4313      	orrs	r3, r2
 80064dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0308 	and.w	r3, r3, #8
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d009      	beq.n	80064fe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80064ea:	4b12      	ldr	r3, [pc, #72]	@ (8006534 <HAL_RCC_ClockConfig+0x1c8>)
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	00db      	lsls	r3, r3, #3
 80064f8:	490e      	ldr	r1, [pc, #56]	@ (8006534 <HAL_RCC_ClockConfig+0x1c8>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80064fe:	f000 f821 	bl	8006544 <HAL_RCC_GetSysClockFreq>
 8006502:	4602      	mov	r2, r0
 8006504:	4b0b      	ldr	r3, [pc, #44]	@ (8006534 <HAL_RCC_ClockConfig+0x1c8>)
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	091b      	lsrs	r3, r3, #4
 800650a:	f003 030f 	and.w	r3, r3, #15
 800650e:	490a      	ldr	r1, [pc, #40]	@ (8006538 <HAL_RCC_ClockConfig+0x1cc>)
 8006510:	5ccb      	ldrb	r3, [r1, r3]
 8006512:	fa22 f303 	lsr.w	r3, r2, r3
 8006516:	4a09      	ldr	r2, [pc, #36]	@ (800653c <HAL_RCC_ClockConfig+0x1d0>)
 8006518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800651a:	4b09      	ldr	r3, [pc, #36]	@ (8006540 <HAL_RCC_ClockConfig+0x1d4>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4618      	mov	r0, r3
 8006520:	f7ff f946 	bl	80057b0 <HAL_InitTick>

  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	40023c00 	.word	0x40023c00
 8006534:	40023800 	.word	0x40023800
 8006538:	0800e244 	.word	0x0800e244
 800653c:	20000000 	.word	0x20000000
 8006540:	20000004 	.word	0x20000004

08006544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006548:	b094      	sub	sp, #80	@ 0x50
 800654a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800654c:	2300      	movs	r3, #0
 800654e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006550:	2300      	movs	r3, #0
 8006552:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006554:	2300      	movs	r3, #0
 8006556:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8006558:	2300      	movs	r3, #0
 800655a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800655c:	4b79      	ldr	r3, [pc, #484]	@ (8006744 <HAL_RCC_GetSysClockFreq+0x200>)
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f003 030c 	and.w	r3, r3, #12
 8006564:	2b08      	cmp	r3, #8
 8006566:	d00d      	beq.n	8006584 <HAL_RCC_GetSysClockFreq+0x40>
 8006568:	2b08      	cmp	r3, #8
 800656a:	f200 80e1 	bhi.w	8006730 <HAL_RCC_GetSysClockFreq+0x1ec>
 800656e:	2b00      	cmp	r3, #0
 8006570:	d002      	beq.n	8006578 <HAL_RCC_GetSysClockFreq+0x34>
 8006572:	2b04      	cmp	r3, #4
 8006574:	d003      	beq.n	800657e <HAL_RCC_GetSysClockFreq+0x3a>
 8006576:	e0db      	b.n	8006730 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006578:	4b73      	ldr	r3, [pc, #460]	@ (8006748 <HAL_RCC_GetSysClockFreq+0x204>)
 800657a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800657c:	e0db      	b.n	8006736 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800657e:	4b73      	ldr	r3, [pc, #460]	@ (800674c <HAL_RCC_GetSysClockFreq+0x208>)
 8006580:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006582:	e0d8      	b.n	8006736 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006584:	4b6f      	ldr	r3, [pc, #444]	@ (8006744 <HAL_RCC_GetSysClockFreq+0x200>)
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800658c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800658e:	4b6d      	ldr	r3, [pc, #436]	@ (8006744 <HAL_RCC_GetSysClockFreq+0x200>)
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d063      	beq.n	8006662 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800659a:	4b6a      	ldr	r3, [pc, #424]	@ (8006744 <HAL_RCC_GetSysClockFreq+0x200>)
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	099b      	lsrs	r3, r3, #6
 80065a0:	2200      	movs	r2, #0
 80065a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80065a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80065ae:	2300      	movs	r3, #0
 80065b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80065b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80065b6:	4622      	mov	r2, r4
 80065b8:	462b      	mov	r3, r5
 80065ba:	f04f 0000 	mov.w	r0, #0
 80065be:	f04f 0100 	mov.w	r1, #0
 80065c2:	0159      	lsls	r1, r3, #5
 80065c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065c8:	0150      	lsls	r0, r2, #5
 80065ca:	4602      	mov	r2, r0
 80065cc:	460b      	mov	r3, r1
 80065ce:	4621      	mov	r1, r4
 80065d0:	1a51      	subs	r1, r2, r1
 80065d2:	6139      	str	r1, [r7, #16]
 80065d4:	4629      	mov	r1, r5
 80065d6:	eb63 0301 	sbc.w	r3, r3, r1
 80065da:	617b      	str	r3, [r7, #20]
 80065dc:	f04f 0200 	mov.w	r2, #0
 80065e0:	f04f 0300 	mov.w	r3, #0
 80065e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065e8:	4659      	mov	r1, fp
 80065ea:	018b      	lsls	r3, r1, #6
 80065ec:	4651      	mov	r1, sl
 80065ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80065f2:	4651      	mov	r1, sl
 80065f4:	018a      	lsls	r2, r1, #6
 80065f6:	4651      	mov	r1, sl
 80065f8:	ebb2 0801 	subs.w	r8, r2, r1
 80065fc:	4659      	mov	r1, fp
 80065fe:	eb63 0901 	sbc.w	r9, r3, r1
 8006602:	f04f 0200 	mov.w	r2, #0
 8006606:	f04f 0300 	mov.w	r3, #0
 800660a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800660e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006612:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006616:	4690      	mov	r8, r2
 8006618:	4699      	mov	r9, r3
 800661a:	4623      	mov	r3, r4
 800661c:	eb18 0303 	adds.w	r3, r8, r3
 8006620:	60bb      	str	r3, [r7, #8]
 8006622:	462b      	mov	r3, r5
 8006624:	eb49 0303 	adc.w	r3, r9, r3
 8006628:	60fb      	str	r3, [r7, #12]
 800662a:	f04f 0200 	mov.w	r2, #0
 800662e:	f04f 0300 	mov.w	r3, #0
 8006632:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006636:	4629      	mov	r1, r5
 8006638:	024b      	lsls	r3, r1, #9
 800663a:	4621      	mov	r1, r4
 800663c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006640:	4621      	mov	r1, r4
 8006642:	024a      	lsls	r2, r1, #9
 8006644:	4610      	mov	r0, r2
 8006646:	4619      	mov	r1, r3
 8006648:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800664a:	2200      	movs	r2, #0
 800664c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800664e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006650:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006654:	f7fa fb38 	bl	8000cc8 <__aeabi_uldivmod>
 8006658:	4602      	mov	r2, r0
 800665a:	460b      	mov	r3, r1
 800665c:	4613      	mov	r3, r2
 800665e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006660:	e058      	b.n	8006714 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006662:	4b38      	ldr	r3, [pc, #224]	@ (8006744 <HAL_RCC_GetSysClockFreq+0x200>)
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	099b      	lsrs	r3, r3, #6
 8006668:	2200      	movs	r2, #0
 800666a:	4618      	mov	r0, r3
 800666c:	4611      	mov	r1, r2
 800666e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006672:	623b      	str	r3, [r7, #32]
 8006674:	2300      	movs	r3, #0
 8006676:	627b      	str	r3, [r7, #36]	@ 0x24
 8006678:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800667c:	4642      	mov	r2, r8
 800667e:	464b      	mov	r3, r9
 8006680:	f04f 0000 	mov.w	r0, #0
 8006684:	f04f 0100 	mov.w	r1, #0
 8006688:	0159      	lsls	r1, r3, #5
 800668a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800668e:	0150      	lsls	r0, r2, #5
 8006690:	4602      	mov	r2, r0
 8006692:	460b      	mov	r3, r1
 8006694:	4641      	mov	r1, r8
 8006696:	ebb2 0a01 	subs.w	sl, r2, r1
 800669a:	4649      	mov	r1, r9
 800669c:	eb63 0b01 	sbc.w	fp, r3, r1
 80066a0:	f04f 0200 	mov.w	r2, #0
 80066a4:	f04f 0300 	mov.w	r3, #0
 80066a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80066ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80066b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80066b4:	ebb2 040a 	subs.w	r4, r2, sl
 80066b8:	eb63 050b 	sbc.w	r5, r3, fp
 80066bc:	f04f 0200 	mov.w	r2, #0
 80066c0:	f04f 0300 	mov.w	r3, #0
 80066c4:	00eb      	lsls	r3, r5, #3
 80066c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066ca:	00e2      	lsls	r2, r4, #3
 80066cc:	4614      	mov	r4, r2
 80066ce:	461d      	mov	r5, r3
 80066d0:	4643      	mov	r3, r8
 80066d2:	18e3      	adds	r3, r4, r3
 80066d4:	603b      	str	r3, [r7, #0]
 80066d6:	464b      	mov	r3, r9
 80066d8:	eb45 0303 	adc.w	r3, r5, r3
 80066dc:	607b      	str	r3, [r7, #4]
 80066de:	f04f 0200 	mov.w	r2, #0
 80066e2:	f04f 0300 	mov.w	r3, #0
 80066e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80066ea:	4629      	mov	r1, r5
 80066ec:	028b      	lsls	r3, r1, #10
 80066ee:	4621      	mov	r1, r4
 80066f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80066f4:	4621      	mov	r1, r4
 80066f6:	028a      	lsls	r2, r1, #10
 80066f8:	4610      	mov	r0, r2
 80066fa:	4619      	mov	r1, r3
 80066fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066fe:	2200      	movs	r2, #0
 8006700:	61bb      	str	r3, [r7, #24]
 8006702:	61fa      	str	r2, [r7, #28]
 8006704:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006708:	f7fa fade 	bl	8000cc8 <__aeabi_uldivmod>
 800670c:	4602      	mov	r2, r0
 800670e:	460b      	mov	r3, r1
 8006710:	4613      	mov	r3, r2
 8006712:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006714:	4b0b      	ldr	r3, [pc, #44]	@ (8006744 <HAL_RCC_GetSysClockFreq+0x200>)
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	0c1b      	lsrs	r3, r3, #16
 800671a:	f003 0303 	and.w	r3, r3, #3
 800671e:	3301      	adds	r3, #1
 8006720:	005b      	lsls	r3, r3, #1
 8006722:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006724:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006726:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006728:	fbb2 f3f3 	udiv	r3, r2, r3
 800672c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800672e:	e002      	b.n	8006736 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006730:	4b05      	ldr	r3, [pc, #20]	@ (8006748 <HAL_RCC_GetSysClockFreq+0x204>)
 8006732:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006734:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006736:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006738:	4618      	mov	r0, r3
 800673a:	3750      	adds	r7, #80	@ 0x50
 800673c:	46bd      	mov	sp, r7
 800673e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006742:	bf00      	nop
 8006744:	40023800 	.word	0x40023800
 8006748:	00f42400 	.word	0x00f42400
 800674c:	007a1200 	.word	0x007a1200

08006750 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e09d      	b.n	800689e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006766:	2b00      	cmp	r3, #0
 8006768:	d108      	bne.n	800677c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006772:	d009      	beq.n	8006788 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	61da      	str	r2, [r3, #28]
 800677a:	e005      	b.n	8006788 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b00      	cmp	r3, #0
 8006798:	d106      	bne.n	80067a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f7fe fe34 	bl	8005410 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2202      	movs	r2, #2
 80067ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80067c8:	d902      	bls.n	80067d0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80067ca:	2300      	movs	r3, #0
 80067cc:	60fb      	str	r3, [r7, #12]
 80067ce:	e002      	b.n	80067d6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80067d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80067d4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80067de:	d007      	beq.n	80067f0 <HAL_SPI_Init+0xa0>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80067e8:	d002      	beq.n	80067f0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006800:	431a      	orrs	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	431a      	orrs	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	695b      	ldr	r3, [r3, #20]
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	431a      	orrs	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800681e:	431a      	orrs	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	69db      	ldr	r3, [r3, #28]
 8006824:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006828:	431a      	orrs	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006832:	ea42 0103 	orr.w	r1, r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800683a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	0c1b      	lsrs	r3, r3, #16
 800684c:	f003 0204 	and.w	r2, r3, #4
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006854:	f003 0310 	and.w	r3, r3, #16
 8006858:	431a      	orrs	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800685e:	f003 0308 	and.w	r3, r3, #8
 8006862:	431a      	orrs	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800686c:	ea42 0103 	orr.w	r1, r2, r3
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	430a      	orrs	r2, r1
 800687c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	69da      	ldr	r2, [r3, #28]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800688c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b088      	sub	sp, #32
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	60f8      	str	r0, [r7, #12]
 80068ae:	60b9      	str	r1, [r7, #8]
 80068b0:	603b      	str	r3, [r7, #0]
 80068b2:	4613      	mov	r3, r2
 80068b4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068b6:	f7fe ffbf 	bl	8005838 <HAL_GetTick>
 80068ba:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80068bc:	88fb      	ldrh	r3, [r7, #6]
 80068be:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d001      	beq.n	80068d0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80068cc:	2302      	movs	r3, #2
 80068ce:	e15c      	b.n	8006b8a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d002      	beq.n	80068dc <HAL_SPI_Transmit+0x36>
 80068d6:	88fb      	ldrh	r3, [r7, #6]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d101      	bne.n	80068e0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e154      	b.n	8006b8a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d101      	bne.n	80068ee <HAL_SPI_Transmit+0x48>
 80068ea:	2302      	movs	r3, #2
 80068ec:	e14d      	b.n	8006b8a <HAL_SPI_Transmit+0x2e4>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2201      	movs	r2, #1
 80068f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2203      	movs	r2, #3
 80068fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	68ba      	ldr	r2, [r7, #8]
 8006908:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	88fa      	ldrh	r2, [r7, #6]
 800690e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	88fa      	ldrh	r2, [r7, #6]
 8006914:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2200      	movs	r2, #0
 800691a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2200      	movs	r2, #0
 8006930:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006940:	d10f      	bne.n	8006962 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006950:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006960:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800696c:	2b40      	cmp	r3, #64	@ 0x40
 800696e:	d007      	beq.n	8006980 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800697e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006988:	d952      	bls.n	8006a30 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d002      	beq.n	8006998 <HAL_SPI_Transmit+0xf2>
 8006992:	8b7b      	ldrh	r3, [r7, #26]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d145      	bne.n	8006a24 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800699c:	881a      	ldrh	r2, [r3, #0]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069a8:	1c9a      	adds	r2, r3, #2
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	3b01      	subs	r3, #1
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80069bc:	e032      	b.n	8006a24 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	f003 0302 	and.w	r3, r3, #2
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d112      	bne.n	80069f2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069d0:	881a      	ldrh	r2, [r3, #0]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069dc:	1c9a      	adds	r2, r3, #2
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	3b01      	subs	r3, #1
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80069f0:	e018      	b.n	8006a24 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069f2:	f7fe ff21 	bl	8005838 <HAL_GetTick>
 80069f6:	4602      	mov	r2, r0
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	1ad3      	subs	r3, r2, r3
 80069fc:	683a      	ldr	r2, [r7, #0]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d803      	bhi.n	8006a0a <HAL_SPI_Transmit+0x164>
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a08:	d102      	bne.n	8006a10 <HAL_SPI_Transmit+0x16a>
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d109      	bne.n	8006a24 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e0b2      	b.n	8006b8a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1c7      	bne.n	80069be <HAL_SPI_Transmit+0x118>
 8006a2e:	e083      	b.n	8006b38 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d002      	beq.n	8006a3e <HAL_SPI_Transmit+0x198>
 8006a38:	8b7b      	ldrh	r3, [r7, #26]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d177      	bne.n	8006b2e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d912      	bls.n	8006a6e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a4c:	881a      	ldrh	r2, [r3, #0]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a58:	1c9a      	adds	r2, r3, #2
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	3b02      	subs	r3, #2
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006a6c:	e05f      	b.n	8006b2e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	330c      	adds	r3, #12
 8006a78:	7812      	ldrb	r2, [r2, #0]
 8006a7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a80:	1c5a      	adds	r2, r3, #1
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006a94:	e04b      	b.n	8006b2e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	f003 0302 	and.w	r3, r3, #2
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d12b      	bne.n	8006afc <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d912      	bls.n	8006ad4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab2:	881a      	ldrh	r2, [r3, #0]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006abe:	1c9a      	adds	r2, r3, #2
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	3b02      	subs	r3, #2
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006ad2:	e02c      	b.n	8006b2e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	330c      	adds	r3, #12
 8006ade:	7812      	ldrb	r2, [r2, #0]
 8006ae0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ae6:	1c5a      	adds	r2, r3, #1
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	3b01      	subs	r3, #1
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006afa:	e018      	b.n	8006b2e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006afc:	f7fe fe9c 	bl	8005838 <HAL_GetTick>
 8006b00:	4602      	mov	r2, r0
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	683a      	ldr	r2, [r7, #0]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d803      	bhi.n	8006b14 <HAL_SPI_Transmit+0x26e>
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b12:	d102      	bne.n	8006b1a <HAL_SPI_Transmit+0x274>
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d109      	bne.n	8006b2e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e02d      	b.n	8006b8a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1ae      	bne.n	8006a96 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b38:	69fa      	ldr	r2, [r7, #28]
 8006b3a:	6839      	ldr	r1, [r7, #0]
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f000 fb65 	bl	800720c <SPI_EndRxTxTransaction>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d002      	beq.n	8006b4e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10a      	bne.n	8006b6c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b56:	2300      	movs	r3, #0
 8006b58:	617b      	str	r3, [r7, #20]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	617b      	str	r3, [r7, #20]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	617b      	str	r3, [r7, #20]
 8006b6a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d001      	beq.n	8006b88 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e000      	b.n	8006b8a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8006b88:	2300      	movs	r3, #0
  }
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3720      	adds	r7, #32
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b08a      	sub	sp, #40	@ 0x28
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	60f8      	str	r0, [r7, #12]
 8006b9a:	60b9      	str	r1, [r7, #8]
 8006b9c:	607a      	str	r2, [r7, #4]
 8006b9e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ba4:	f7fe fe48 	bl	8005838 <HAL_GetTick>
 8006ba8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006bb0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006bb8:	887b      	ldrh	r3, [r7, #2]
 8006bba:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8006bbc:	887b      	ldrh	r3, [r7, #2]
 8006bbe:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006bc0:	7ffb      	ldrb	r3, [r7, #31]
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d00c      	beq.n	8006be0 <HAL_SPI_TransmitReceive+0x4e>
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006bcc:	d106      	bne.n	8006bdc <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d102      	bne.n	8006bdc <HAL_SPI_TransmitReceive+0x4a>
 8006bd6:	7ffb      	ldrb	r3, [r7, #31]
 8006bd8:	2b04      	cmp	r3, #4
 8006bda:	d001      	beq.n	8006be0 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006bdc:	2302      	movs	r3, #2
 8006bde:	e1f3      	b.n	8006fc8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d005      	beq.n	8006bf2 <HAL_SPI_TransmitReceive+0x60>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d002      	beq.n	8006bf2 <HAL_SPI_TransmitReceive+0x60>
 8006bec:	887b      	ldrh	r3, [r7, #2]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d101      	bne.n	8006bf6 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e1e8      	b.n	8006fc8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d101      	bne.n	8006c04 <HAL_SPI_TransmitReceive+0x72>
 8006c00:	2302      	movs	r3, #2
 8006c02:	e1e1      	b.n	8006fc8 <HAL_SPI_TransmitReceive+0x436>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b04      	cmp	r3, #4
 8006c16:	d003      	beq.n	8006c20 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2205      	movs	r2, #5
 8006c1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	887a      	ldrh	r2, [r7, #2]
 8006c30:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	887a      	ldrh	r2, [r7, #2]
 8006c38:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	68ba      	ldr	r2, [r7, #8]
 8006c40:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	887a      	ldrh	r2, [r7, #2]
 8006c46:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	887a      	ldrh	r2, [r7, #2]
 8006c4c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006c62:	d802      	bhi.n	8006c6a <HAL_SPI_TransmitReceive+0xd8>
 8006c64:	8abb      	ldrh	r3, [r7, #20]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d908      	bls.n	8006c7c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	685a      	ldr	r2, [r3, #4]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006c78:	605a      	str	r2, [r3, #4]
 8006c7a:	e007      	b.n	8006c8c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006c8a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c96:	2b40      	cmp	r3, #64	@ 0x40
 8006c98:	d007      	beq.n	8006caa <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ca8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006cb2:	f240 8083 	bls.w	8006dbc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d002      	beq.n	8006cc4 <HAL_SPI_TransmitReceive+0x132>
 8006cbe:	8afb      	ldrh	r3, [r7, #22]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d16f      	bne.n	8006da4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cc8:	881a      	ldrh	r2, [r3, #0]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd4:	1c9a      	adds	r2, r3, #2
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ce8:	e05c      	b.n	8006da4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f003 0302 	and.w	r3, r3, #2
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d11b      	bne.n	8006d30 <HAL_SPI_TransmitReceive+0x19e>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d016      	beq.n	8006d30 <HAL_SPI_TransmitReceive+0x19e>
 8006d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d113      	bne.n	8006d30 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d0c:	881a      	ldrh	r2, [r3, #0]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d18:	1c9a      	adds	r2, r3, #2
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	3b01      	subs	r3, #1
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f003 0301 	and.w	r3, r3, #1
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d11c      	bne.n	8006d78 <HAL_SPI_TransmitReceive+0x1e6>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d016      	beq.n	8006d78 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68da      	ldr	r2, [r3, #12]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d54:	b292      	uxth	r2, r2
 8006d56:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d5c:	1c9a      	adds	r2, r3, #2
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d74:	2301      	movs	r3, #1
 8006d76:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006d78:	f7fe fd5e 	bl	8005838 <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	6a3b      	ldr	r3, [r7, #32]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d80d      	bhi.n	8006da4 <HAL_SPI_TransmitReceive+0x212>
 8006d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d8e:	d009      	beq.n	8006da4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006da0:	2303      	movs	r3, #3
 8006da2:	e111      	b.n	8006fc8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d19d      	bne.n	8006cea <HAL_SPI_TransmitReceive+0x158>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d197      	bne.n	8006cea <HAL_SPI_TransmitReceive+0x158>
 8006dba:	e0e5      	b.n	8006f88 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d003      	beq.n	8006dcc <HAL_SPI_TransmitReceive+0x23a>
 8006dc4:	8afb      	ldrh	r3, [r7, #22]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	f040 80d1 	bne.w	8006f6e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d912      	bls.n	8006dfc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dda:	881a      	ldrh	r2, [r3, #0]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de6:	1c9a      	adds	r2, r3, #2
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	3b02      	subs	r3, #2
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006dfa:	e0b8      	b.n	8006f6e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	330c      	adds	r3, #12
 8006e06:	7812      	ldrb	r2, [r2, #0]
 8006e08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e0e:	1c5a      	adds	r2, r3, #1
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e22:	e0a4      	b.n	8006f6e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	f003 0302 	and.w	r3, r3, #2
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d134      	bne.n	8006e9c <HAL_SPI_TransmitReceive+0x30a>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d02f      	beq.n	8006e9c <HAL_SPI_TransmitReceive+0x30a>
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d12c      	bne.n	8006e9c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d912      	bls.n	8006e72 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e50:	881a      	ldrh	r2, [r3, #0]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e5c:	1c9a      	adds	r2, r3, #2
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	3b02      	subs	r3, #2
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006e70:	e012      	b.n	8006e98 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	330c      	adds	r3, #12
 8006e7c:	7812      	ldrb	r2, [r2, #0]
 8006e7e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e84:	1c5a      	adds	r2, r3, #1
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	3b01      	subs	r3, #1
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	f003 0301 	and.w	r3, r3, #1
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d148      	bne.n	8006f3c <HAL_SPI_TransmitReceive+0x3aa>
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d042      	beq.n	8006f3c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d923      	bls.n	8006f0a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68da      	ldr	r2, [r3, #12]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ecc:	b292      	uxth	r2, r2
 8006ece:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ed4:	1c9a      	adds	r2, r3, #2
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	3b02      	subs	r3, #2
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d81f      	bhi.n	8006f38 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006f06:	605a      	str	r2, [r3, #4]
 8006f08:	e016      	b.n	8006f38 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f103 020c 	add.w	r2, r3, #12
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f16:	7812      	ldrb	r2, [r2, #0]
 8006f18:	b2d2      	uxtb	r2, r2
 8006f1a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f20:	1c5a      	adds	r2, r3, #1
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006f3c:	f7fe fc7c 	bl	8005838 <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	6a3b      	ldr	r3, [r7, #32]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d803      	bhi.n	8006f54 <HAL_SPI_TransmitReceive+0x3c2>
 8006f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f52:	d102      	bne.n	8006f5a <HAL_SPI_TransmitReceive+0x3c8>
 8006f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d109      	bne.n	8006f6e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e02c      	b.n	8006fc8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f47f af55 	bne.w	8006e24 <HAL_SPI_TransmitReceive+0x292>
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f47f af4e 	bne.w	8006e24 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f88:	6a3a      	ldr	r2, [r7, #32]
 8006f8a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f000 f93d 	bl	800720c <SPI_EndRxTxTransaction>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d008      	beq.n	8006faa <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2220      	movs	r2, #32
 8006f9c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e00e      	b.n	8006fc8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d001      	beq.n	8006fc6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e000      	b.n	8006fc8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8006fc6:	2300      	movs	r3, #0
  }
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3728      	adds	r7, #40	@ 0x28
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b088      	sub	sp, #32
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	603b      	str	r3, [r7, #0]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006fe0:	f7fe fc2a 	bl	8005838 <HAL_GetTick>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe8:	1a9b      	subs	r3, r3, r2
 8006fea:	683a      	ldr	r2, [r7, #0]
 8006fec:	4413      	add	r3, r2
 8006fee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ff0:	f7fe fc22 	bl	8005838 <HAL_GetTick>
 8006ff4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ff6:	4b39      	ldr	r3, [pc, #228]	@ (80070dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	015b      	lsls	r3, r3, #5
 8006ffc:	0d1b      	lsrs	r3, r3, #20
 8006ffe:	69fa      	ldr	r2, [r7, #28]
 8007000:	fb02 f303 	mul.w	r3, r2, r3
 8007004:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007006:	e055      	b.n	80070b4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700e:	d051      	beq.n	80070b4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007010:	f7fe fc12 	bl	8005838 <HAL_GetTick>
 8007014:	4602      	mov	r2, r0
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	69fa      	ldr	r2, [r7, #28]
 800701c:	429a      	cmp	r2, r3
 800701e:	d902      	bls.n	8007026 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d13d      	bne.n	80070a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007034:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800703e:	d111      	bne.n	8007064 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007048:	d004      	beq.n	8007054 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007052:	d107      	bne.n	8007064 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007062:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007068:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800706c:	d10f      	bne.n	800708e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800707c:	601a      	str	r2, [r3, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800708c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e018      	b.n	80070d4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d102      	bne.n	80070ae <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80070a8:	2300      	movs	r3, #0
 80070aa:	61fb      	str	r3, [r7, #28]
 80070ac:	e002      	b.n	80070b4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	3b01      	subs	r3, #1
 80070b2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	689a      	ldr	r2, [r3, #8]
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	4013      	ands	r3, r2
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	bf0c      	ite	eq
 80070c4:	2301      	moveq	r3, #1
 80070c6:	2300      	movne	r3, #0
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	461a      	mov	r2, r3
 80070cc:	79fb      	ldrb	r3, [r7, #7]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d19a      	bne.n	8007008 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3720      	adds	r7, #32
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	20000000 	.word	0x20000000

080070e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b08a      	sub	sp, #40	@ 0x28
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
 80070ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80070ee:	2300      	movs	r3, #0
 80070f0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80070f2:	f7fe fba1 	bl	8005838 <HAL_GetTick>
 80070f6:	4602      	mov	r2, r0
 80070f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fa:	1a9b      	subs	r3, r3, r2
 80070fc:	683a      	ldr	r2, [r7, #0]
 80070fe:	4413      	add	r3, r2
 8007100:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007102:	f7fe fb99 	bl	8005838 <HAL_GetTick>
 8007106:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	330c      	adds	r3, #12
 800710e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007110:	4b3d      	ldr	r3, [pc, #244]	@ (8007208 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	4613      	mov	r3, r2
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4413      	add	r3, r2
 800711a:	00da      	lsls	r2, r3, #3
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	0d1b      	lsrs	r3, r3, #20
 8007120:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007122:	fb02 f303 	mul.w	r3, r2, r3
 8007126:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007128:	e061      	b.n	80071ee <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007130:	d107      	bne.n	8007142 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d104      	bne.n	8007142 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	b2db      	uxtb	r3, r3
 800713e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007140:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007148:	d051      	beq.n	80071ee <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800714a:	f7fe fb75 	bl	8005838 <HAL_GetTick>
 800714e:	4602      	mov	r2, r0
 8007150:	6a3b      	ldr	r3, [r7, #32]
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007156:	429a      	cmp	r2, r3
 8007158:	d902      	bls.n	8007160 <SPI_WaitFifoStateUntilTimeout+0x80>
 800715a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715c:	2b00      	cmp	r3, #0
 800715e:	d13d      	bne.n	80071dc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	685a      	ldr	r2, [r3, #4]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800716e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007178:	d111      	bne.n	800719e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007182:	d004      	beq.n	800718e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800718c:	d107      	bne.n	800719e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800719c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071a6:	d10f      	bne.n	80071c8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80071b6:	601a      	str	r2, [r3, #0]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80071c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80071d8:	2303      	movs	r3, #3
 80071da:	e011      	b.n	8007200 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d102      	bne.n	80071e8 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 80071e2:	2300      	movs	r3, #0
 80071e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80071e6:	e002      	b.n	80071ee <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	3b01      	subs	r3, #1
 80071ec:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	689a      	ldr	r2, [r3, #8]
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	4013      	ands	r3, r2
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d195      	bne.n	800712a <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3728      	adds	r7, #40	@ 0x28
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	20000000 	.word	0x20000000

0800720c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b088      	sub	sp, #32
 8007210:	af02      	add	r7, sp, #8
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	9300      	str	r3, [sp, #0]
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	2200      	movs	r2, #0
 8007220:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f7ff ff5b 	bl	80070e0 <SPI_WaitFifoStateUntilTimeout>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d007      	beq.n	8007240 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007234:	f043 0220 	orr.w	r2, r3, #32
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800723c:	2303      	movs	r3, #3
 800723e:	e046      	b.n	80072ce <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007240:	4b25      	ldr	r3, [pc, #148]	@ (80072d8 <SPI_EndRxTxTransaction+0xcc>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a25      	ldr	r2, [pc, #148]	@ (80072dc <SPI_EndRxTxTransaction+0xd0>)
 8007246:	fba2 2303 	umull	r2, r3, r2, r3
 800724a:	0d5b      	lsrs	r3, r3, #21
 800724c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007250:	fb02 f303 	mul.w	r3, r2, r3
 8007254:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800725e:	d112      	bne.n	8007286 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	2200      	movs	r2, #0
 8007268:	2180      	movs	r1, #128	@ 0x80
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f7ff feb0 	bl	8006fd0 <SPI_WaitFlagStateUntilTimeout>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d016      	beq.n	80072a4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800727a:	f043 0220 	orr.w	r2, r3, #32
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007282:	2303      	movs	r3, #3
 8007284:	e023      	b.n	80072ce <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00a      	beq.n	80072a2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	3b01      	subs	r3, #1
 8007290:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800729c:	2b80      	cmp	r3, #128	@ 0x80
 800729e:	d0f2      	beq.n	8007286 <SPI_EndRxTxTransaction+0x7a>
 80072a0:	e000      	b.n	80072a4 <SPI_EndRxTxTransaction+0x98>
        break;
 80072a2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f7ff ff15 	bl	80070e0 <SPI_WaitFifoStateUntilTimeout>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d007      	beq.n	80072cc <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072c0:	f043 0220 	orr.w	r2, r3, #32
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80072c8:	2303      	movs	r3, #3
 80072ca:	e000      	b.n	80072ce <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3718      	adds	r7, #24
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	20000000 	.word	0x20000000
 80072dc:	165e9f81 	.word	0x165e9f81

080072e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80072e4:	4904      	ldr	r1, [pc, #16]	@ (80072f8 <MX_FATFS_Init+0x18>)
 80072e6:	4805      	ldr	r0, [pc, #20]	@ (80072fc <MX_FATFS_Init+0x1c>)
 80072e8:	f002 fb14 	bl	8009914 <FATFS_LinkDriver>
 80072ec:	4603      	mov	r3, r0
 80072ee:	461a      	mov	r2, r3
 80072f0:	4b03      	ldr	r3, [pc, #12]	@ (8007300 <MX_FATFS_Init+0x20>)
 80072f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80072f4:	bf00      	nop
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	200036bc 	.word	0x200036bc
 80072fc:	2000000c 	.word	0x2000000c
 8007300:	200036b8 	.word	0x200036b8

08007304 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007304:	b480      	push	{r7}
 8007306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007308:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800730a:	4618      	mov	r0, r3
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <disk_status>:
    disk_ioctl
#endif
};


DSTATUS disk_status(BYTE pdrv) {
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	4603      	mov	r3, r0
 800731c:	71fb      	strb	r3, [r7, #7]
    if (pdrv == DEV_MMC) {
 800731e:	79fb      	ldrb	r3, [r7, #7]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d101      	bne.n	8007328 <disk_status+0x14>
        return 0;  // OK
 8007324:	2300      	movs	r3, #0
 8007326:	e000      	b.n	800732a <disk_status+0x16>
    }
    return STA_NOINIT;
 8007328:	2301      	movs	r3, #1
}
 800732a:	4618      	mov	r0, r3
 800732c:	370c      	adds	r7, #12
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <disk_initialize>:

DSTATUS disk_initialize(BYTE pdrv) {
 8007336:	b580      	push	{r7, lr}
 8007338:	b082      	sub	sp, #8
 800733a:	af00      	add	r7, sp, #0
 800733c:	4603      	mov	r3, r0
 800733e:	71fb      	strb	r3, [r7, #7]
    if (pdrv == DEV_MMC) {
 8007340:	79fb      	ldrb	r3, [r7, #7]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d108      	bne.n	8007358 <disk_initialize+0x22>
        return (SD_Init() == SD_OK) ? 0 : STA_NOINIT;
 8007346:	f7fd ff55 	bl	80051f4 <SD_Init>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	bf14      	ite	ne
 8007350:	2301      	movne	r3, #1
 8007352:	2300      	moveq	r3, #0
 8007354:	b2db      	uxtb	r3, r3
 8007356:	e000      	b.n	800735a <disk_initialize+0x24>
    }
    return STA_NOINIT;
 8007358:	2301      	movs	r3, #1
}
 800735a:	4618      	mov	r0, r3
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <disk_read>:

DRESULT disk_read(BYTE pdrv, BYTE* buff, LBA_t sector, UINT count) {
 8007362:	b580      	push	{r7, lr}
 8007364:	b086      	sub	sp, #24
 8007366:	af00      	add	r7, sp, #0
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	607a      	str	r2, [r7, #4]
 800736c:	603b      	str	r3, [r7, #0]
 800736e:	4603      	mov	r3, r0
 8007370:	73fb      	strb	r3, [r7, #15]
    if (pdrv != DEV_MMC || count == 0) return RES_PARERR;
 8007372:	7bfb      	ldrb	r3, [r7, #15]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d102      	bne.n	800737e <disk_read+0x1c>
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d101      	bne.n	8007382 <disk_read+0x20>
 800737e:	2304      	movs	r3, #4
 8007380:	e01a      	b.n	80073b8 <disk_read+0x56>

    for (UINT i = 0; i < count; i++) {
 8007382:	2300      	movs	r3, #0
 8007384:	617b      	str	r3, [r7, #20]
 8007386:	e012      	b.n	80073ae <disk_read+0x4c>
        if (SD_ReadBlock((sector + i) * 512, buff + (512 * i)) != SD_OK)
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	4413      	add	r3, r2
 800738e:	0258      	lsls	r0, r3, #9
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	025b      	lsls	r3, r3, #9
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	4413      	add	r3, r2
 8007398:	4619      	mov	r1, r3
 800739a:	f7fd ff73 	bl	8005284 <SD_ReadBlock>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d001      	beq.n	80073a8 <disk_read+0x46>
            return RES_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	e007      	b.n	80073b8 <disk_read+0x56>
    for (UINT i = 0; i < count; i++) {
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	3301      	adds	r3, #1
 80073ac:	617b      	str	r3, [r7, #20]
 80073ae:	697a      	ldr	r2, [r7, #20]
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d3e8      	bcc.n	8007388 <disk_read+0x26>
    }

    return RES_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3718      	adds	r7, #24
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <disk_write>:

DRESULT disk_write(BYTE pdrv, const BYTE* buff, LBA_t sector, UINT count) {
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60b9      	str	r1, [r7, #8]
 80073c8:	607a      	str	r2, [r7, #4]
 80073ca:	603b      	str	r3, [r7, #0]
 80073cc:	4603      	mov	r3, r0
 80073ce:	73fb      	strb	r3, [r7, #15]
#if FF_FS_READONLY
    return RES_WRPRT;
#else
    if (pdrv != DEV_MMC || count == 0) return RES_PARERR;
 80073d0:	7bfb      	ldrb	r3, [r7, #15]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d102      	bne.n	80073dc <disk_write+0x1c>
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d101      	bne.n	80073e0 <disk_write+0x20>
 80073dc:	2304      	movs	r3, #4
 80073de:	e01a      	b.n	8007416 <disk_write+0x56>

    for (UINT i = 0; i < count; i++) {
 80073e0:	2300      	movs	r3, #0
 80073e2:	617b      	str	r3, [r7, #20]
 80073e4:	e012      	b.n	800740c <disk_write+0x4c>
        if (SD_WriteBlock((sector + i) * 512, buff + (512 * i)) != SD_OK)
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	4413      	add	r3, r2
 80073ec:	0258      	lsls	r0, r3, #9
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	025b      	lsls	r3, r3, #9
 80073f2:	68ba      	ldr	r2, [r7, #8]
 80073f4:	4413      	add	r3, r2
 80073f6:	4619      	mov	r1, r3
 80073f8:	f7fd ff88 	bl	800530c <SD_WriteBlock>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d001      	beq.n	8007406 <disk_write+0x46>
            return RES_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e007      	b.n	8007416 <disk_write+0x56>
    for (UINT i = 0; i < count; i++) {
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	3301      	adds	r3, #1
 800740a:	617b      	str	r3, [r7, #20]
 800740c:	697a      	ldr	r2, [r7, #20]
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	429a      	cmp	r2, r3
 8007412:	d3e8      	bcc.n	80073e6 <disk_write+0x26>
    }

    return RES_OK;
 8007414:	2300      	movs	r3, #0
#endif
}
 8007416:	4618      	mov	r0, r3
 8007418:	3718      	adds	r7, #24
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
	...

08007420 <disk_ioctl>:

DRESULT disk_ioctl(BYTE pdrv, BYTE cmd, void* buff) {
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	4603      	mov	r3, r0
 8007428:	603a      	str	r2, [r7, #0]
 800742a:	71fb      	strb	r3, [r7, #7]
 800742c:	460b      	mov	r3, r1
 800742e:	71bb      	strb	r3, [r7, #6]
    if (pdrv != DEV_MMC) return RES_PARERR;
 8007430:	79fb      	ldrb	r3, [r7, #7]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d001      	beq.n	800743a <disk_ioctl+0x1a>
 8007436:	2304      	movs	r3, #4
 8007438:	e022      	b.n	8007480 <disk_ioctl+0x60>

    switch (cmd) {
 800743a:	79bb      	ldrb	r3, [r7, #6]
 800743c:	2b03      	cmp	r3, #3
 800743e:	d81e      	bhi.n	800747e <disk_ioctl+0x5e>
 8007440:	a201      	add	r2, pc, #4	@ (adr r2, 8007448 <disk_ioctl+0x28>)
 8007442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007446:	bf00      	nop
 8007448:	08007459 	.word	0x08007459
 800744c:	0800745d 	.word	0x0800745d
 8007450:	08007469 	.word	0x08007469
 8007454:	08007475 	.word	0x08007475
        case CTRL_SYNC:
            return RES_OK;
 8007458:	2300      	movs	r3, #0
 800745a:	e011      	b.n	8007480 <disk_ioctl+0x60>
        case GET_SECTOR_COUNT:
            *(DWORD*)buff = 32768;  // Exemplo: 16 MB
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8007462:	601a      	str	r2, [r3, #0]
            return RES_OK;
 8007464:	2300      	movs	r3, #0
 8007466:	e00b      	b.n	8007480 <disk_ioctl+0x60>
        case GET_SECTOR_SIZE:
            *(WORD*)buff = 512;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800746e:	801a      	strh	r2, [r3, #0]
            return RES_OK;
 8007470:	2300      	movs	r3, #0
 8007472:	e005      	b.n	8007480 <disk_ioctl+0x60>
        case GET_BLOCK_SIZE:
            *(DWORD*)buff = 1;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	2201      	movs	r2, #1
 8007478:	601a      	str	r2, [r3, #0]
            return RES_OK;
 800747a:	2300      	movs	r3, #0
 800747c:	e000      	b.n	8007480 <disk_ioctl+0x60>
    }

    return RES_PARERR;
 800747e:	2304      	movs	r3, #4
}
 8007480:	4618      	mov	r0, r3
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	3301      	adds	r3, #1
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800749c:	89fb      	ldrh	r3, [r7, #14]
 800749e:	021b      	lsls	r3, r3, #8
 80074a0:	b21a      	sxth	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	b21b      	sxth	r3, r3
 80074a8:	4313      	orrs	r3, r2
 80074aa:	b21b      	sxth	r3, r3
 80074ac:	81fb      	strh	r3, [r7, #14]
	return rv;
 80074ae:	89fb      	ldrh	r3, [r7, #14]
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3714      	adds	r7, #20
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	3303      	adds	r3, #3
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	021b      	lsls	r3, r3, #8
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	3202      	adds	r2, #2
 80074d4:	7812      	ldrb	r2, [r2, #0]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	021b      	lsls	r3, r3, #8
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	3201      	adds	r2, #1
 80074e2:	7812      	ldrb	r2, [r2, #0]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	021b      	lsls	r3, r3, #8
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	7812      	ldrb	r2, [r2, #0]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	60fb      	str	r3, [r7, #12]
	return rv;
 80074f4:	68fb      	ldr	r3, [r7, #12]
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3714      	adds	r7, #20
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr

08007502 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007502:	b480      	push	{r7}
 8007504:	b083      	sub	sp, #12
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
 800750a:	460b      	mov	r3, r1
 800750c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	1c5a      	adds	r2, r3, #1
 8007512:	607a      	str	r2, [r7, #4]
 8007514:	887a      	ldrh	r2, [r7, #2]
 8007516:	b2d2      	uxtb	r2, r2
 8007518:	701a      	strb	r2, [r3, #0]
 800751a:	887b      	ldrh	r3, [r7, #2]
 800751c:	0a1b      	lsrs	r3, r3, #8
 800751e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	1c5a      	adds	r2, r3, #1
 8007524:	607a      	str	r2, [r7, #4]
 8007526:	887a      	ldrh	r2, [r7, #2]
 8007528:	b2d2      	uxtb	r2, r2
 800752a:	701a      	strb	r2, [r3, #0]
}
 800752c:	bf00      	nop
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	1c5a      	adds	r2, r3, #1
 8007546:	607a      	str	r2, [r7, #4]
 8007548:	683a      	ldr	r2, [r7, #0]
 800754a:	b2d2      	uxtb	r2, r2
 800754c:	701a      	strb	r2, [r3, #0]
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	0a1b      	lsrs	r3, r3, #8
 8007552:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	1c5a      	adds	r2, r3, #1
 8007558:	607a      	str	r2, [r7, #4]
 800755a:	683a      	ldr	r2, [r7, #0]
 800755c:	b2d2      	uxtb	r2, r2
 800755e:	701a      	strb	r2, [r3, #0]
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	0a1b      	lsrs	r3, r3, #8
 8007564:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	1c5a      	adds	r2, r3, #1
 800756a:	607a      	str	r2, [r7, #4]
 800756c:	683a      	ldr	r2, [r7, #0]
 800756e:	b2d2      	uxtb	r2, r2
 8007570:	701a      	strb	r2, [r3, #0]
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	0a1b      	lsrs	r3, r3, #8
 8007576:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	1c5a      	adds	r2, r3, #1
 800757c:	607a      	str	r2, [r7, #4]
 800757e:	683a      	ldr	r2, [r7, #0]
 8007580:	b2d2      	uxtb	r2, r2
 8007582:	701a      	strb	r2, [r3, #0]
}
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007590:	b480      	push	{r7}
 8007592:	b087      	sub	sp, #28
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00d      	beq.n	80075c6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80075aa:	693a      	ldr	r2, [r7, #16]
 80075ac:	1c53      	adds	r3, r2, #1
 80075ae:	613b      	str	r3, [r7, #16]
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	1c59      	adds	r1, r3, #1
 80075b4:	6179      	str	r1, [r7, #20]
 80075b6:	7812      	ldrb	r2, [r2, #0]
 80075b8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	3b01      	subs	r3, #1
 80075be:	607b      	str	r3, [r7, #4]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1f1      	bne.n	80075aa <mem_cpy+0x1a>
	}
}
 80075c6:	bf00      	nop
 80075c8:	371c      	adds	r7, #28
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80075d2:	b480      	push	{r7}
 80075d4:	b087      	sub	sp, #28
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	60f8      	str	r0, [r7, #12]
 80075da:	60b9      	str	r1, [r7, #8]
 80075dc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	1c5a      	adds	r2, r3, #1
 80075e6:	617a      	str	r2, [r7, #20]
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	b2d2      	uxtb	r2, r2
 80075ec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	3b01      	subs	r3, #1
 80075f2:	607b      	str	r3, [r7, #4]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1f3      	bne.n	80075e2 <mem_set+0x10>
}
 80075fa:	bf00      	nop
 80075fc:	bf00      	nop
 80075fe:	371c      	adds	r7, #28
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007608:	b480      	push	{r7}
 800760a:	b089      	sub	sp, #36	@ 0x24
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	61fb      	str	r3, [r7, #28]
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800761c:	2300      	movs	r3, #0
 800761e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	1c5a      	adds	r2, r3, #1
 8007624:	61fa      	str	r2, [r7, #28]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	4619      	mov	r1, r3
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	61ba      	str	r2, [r7, #24]
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	1acb      	subs	r3, r1, r3
 8007634:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	3b01      	subs	r3, #1
 800763a:	607b      	str	r3, [r7, #4]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d002      	beq.n	8007648 <mem_cmp+0x40>
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d0eb      	beq.n	8007620 <mem_cmp+0x18>

	return r;
 8007648:	697b      	ldr	r3, [r7, #20]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3724      	adds	r7, #36	@ 0x24
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr

08007656 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007656:	b480      	push	{r7}
 8007658:	b083      	sub	sp, #12
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
 800765e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007660:	e002      	b.n	8007668 <chk_chr+0x12>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	3301      	adds	r3, #1
 8007666:	607b      	str	r3, [r7, #4]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d005      	beq.n	800767c <chk_chr+0x26>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	461a      	mov	r2, r3
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	4293      	cmp	r3, r2
 800767a:	d1f2      	bne.n	8007662 <chk_chr+0xc>
	return *str;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	781b      	ldrb	r3, [r3, #0]
}
 8007680:	4618      	mov	r0, r3
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800768c:	b480      	push	{r7}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007696:	2300      	movs	r3, #0
 8007698:	60bb      	str	r3, [r7, #8]
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	60fb      	str	r3, [r7, #12]
 800769e:	e029      	b.n	80076f4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80076a0:	4a27      	ldr	r2, [pc, #156]	@ (8007740 <chk_lock+0xb4>)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	011b      	lsls	r3, r3, #4
 80076a6:	4413      	add	r3, r2
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d01d      	beq.n	80076ea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80076ae:	4a24      	ldr	r2, [pc, #144]	@ (8007740 <chk_lock+0xb4>)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	011b      	lsls	r3, r3, #4
 80076b4:	4413      	add	r3, r2
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d116      	bne.n	80076ee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80076c0:	4a1f      	ldr	r2, [pc, #124]	@ (8007740 <chk_lock+0xb4>)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	011b      	lsls	r3, r3, #4
 80076c6:	4413      	add	r3, r2
 80076c8:	3304      	adds	r3, #4
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d10c      	bne.n	80076ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80076d4:	4a1a      	ldr	r2, [pc, #104]	@ (8007740 <chk_lock+0xb4>)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	011b      	lsls	r3, r3, #4
 80076da:	4413      	add	r3, r2
 80076dc:	3308      	adds	r3, #8
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d102      	bne.n	80076ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80076e8:	e007      	b.n	80076fa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80076ea:	2301      	movs	r3, #1
 80076ec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	3301      	adds	r3, #1
 80076f2:	60fb      	str	r3, [r7, #12]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d9d2      	bls.n	80076a0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d109      	bne.n	8007714 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d102      	bne.n	800770c <chk_lock+0x80>
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	2b02      	cmp	r3, #2
 800770a:	d101      	bne.n	8007710 <chk_lock+0x84>
 800770c:	2300      	movs	r3, #0
 800770e:	e010      	b.n	8007732 <chk_lock+0xa6>
 8007710:	2312      	movs	r3, #18
 8007712:	e00e      	b.n	8007732 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d108      	bne.n	800772c <chk_lock+0xa0>
 800771a:	4a09      	ldr	r2, [pc, #36]	@ (8007740 <chk_lock+0xb4>)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	011b      	lsls	r3, r3, #4
 8007720:	4413      	add	r3, r2
 8007722:	330c      	adds	r3, #12
 8007724:	881b      	ldrh	r3, [r3, #0]
 8007726:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800772a:	d101      	bne.n	8007730 <chk_lock+0xa4>
 800772c:	2310      	movs	r3, #16
 800772e:	e000      	b.n	8007732 <chk_lock+0xa6>
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3714      	adds	r7, #20
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
 800773e:	bf00      	nop
 8007740:	200036c8 	.word	0x200036c8

08007744 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800774a:	2300      	movs	r3, #0
 800774c:	607b      	str	r3, [r7, #4]
 800774e:	e002      	b.n	8007756 <enq_lock+0x12>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	3301      	adds	r3, #1
 8007754:	607b      	str	r3, [r7, #4]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d806      	bhi.n	800776a <enq_lock+0x26>
 800775c:	4a09      	ldr	r2, [pc, #36]	@ (8007784 <enq_lock+0x40>)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	011b      	lsls	r3, r3, #4
 8007762:	4413      	add	r3, r2
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1f2      	bne.n	8007750 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2b02      	cmp	r3, #2
 800776e:	bf14      	ite	ne
 8007770:	2301      	movne	r3, #1
 8007772:	2300      	moveq	r3, #0
 8007774:	b2db      	uxtb	r3, r3
}
 8007776:	4618      	mov	r0, r3
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	200036c8 	.word	0x200036c8

08007788 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007792:	2300      	movs	r3, #0
 8007794:	60fb      	str	r3, [r7, #12]
 8007796:	e01f      	b.n	80077d8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007798:	4a41      	ldr	r2, [pc, #260]	@ (80078a0 <inc_lock+0x118>)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	011b      	lsls	r3, r3, #4
 800779e:	4413      	add	r3, r2
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d113      	bne.n	80077d2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80077aa:	4a3d      	ldr	r2, [pc, #244]	@ (80078a0 <inc_lock+0x118>)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	011b      	lsls	r3, r3, #4
 80077b0:	4413      	add	r3, r2
 80077b2:	3304      	adds	r3, #4
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d109      	bne.n	80077d2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80077be:	4a38      	ldr	r2, [pc, #224]	@ (80078a0 <inc_lock+0x118>)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	011b      	lsls	r3, r3, #4
 80077c4:	4413      	add	r3, r2
 80077c6:	3308      	adds	r3, #8
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d006      	beq.n	80077e0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	3301      	adds	r3, #1
 80077d6:	60fb      	str	r3, [r7, #12]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d9dc      	bls.n	8007798 <inc_lock+0x10>
 80077de:	e000      	b.n	80077e2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80077e0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d132      	bne.n	800784e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80077e8:	2300      	movs	r3, #0
 80077ea:	60fb      	str	r3, [r7, #12]
 80077ec:	e002      	b.n	80077f4 <inc_lock+0x6c>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	3301      	adds	r3, #1
 80077f2:	60fb      	str	r3, [r7, #12]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d806      	bhi.n	8007808 <inc_lock+0x80>
 80077fa:	4a29      	ldr	r2, [pc, #164]	@ (80078a0 <inc_lock+0x118>)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	011b      	lsls	r3, r3, #4
 8007800:	4413      	add	r3, r2
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1f2      	bne.n	80077ee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2b02      	cmp	r3, #2
 800780c:	d101      	bne.n	8007812 <inc_lock+0x8a>
 800780e:	2300      	movs	r3, #0
 8007810:	e040      	b.n	8007894 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	4922      	ldr	r1, [pc, #136]	@ (80078a0 <inc_lock+0x118>)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	011b      	lsls	r3, r3, #4
 800781c:	440b      	add	r3, r1
 800781e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	689a      	ldr	r2, [r3, #8]
 8007824:	491e      	ldr	r1, [pc, #120]	@ (80078a0 <inc_lock+0x118>)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	011b      	lsls	r3, r3, #4
 800782a:	440b      	add	r3, r1
 800782c:	3304      	adds	r3, #4
 800782e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	695a      	ldr	r2, [r3, #20]
 8007834:	491a      	ldr	r1, [pc, #104]	@ (80078a0 <inc_lock+0x118>)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	011b      	lsls	r3, r3, #4
 800783a:	440b      	add	r3, r1
 800783c:	3308      	adds	r3, #8
 800783e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007840:	4a17      	ldr	r2, [pc, #92]	@ (80078a0 <inc_lock+0x118>)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	011b      	lsls	r3, r3, #4
 8007846:	4413      	add	r3, r2
 8007848:	330c      	adds	r3, #12
 800784a:	2200      	movs	r2, #0
 800784c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d009      	beq.n	8007868 <inc_lock+0xe0>
 8007854:	4a12      	ldr	r2, [pc, #72]	@ (80078a0 <inc_lock+0x118>)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	011b      	lsls	r3, r3, #4
 800785a:	4413      	add	r3, r2
 800785c:	330c      	adds	r3, #12
 800785e:	881b      	ldrh	r3, [r3, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d001      	beq.n	8007868 <inc_lock+0xe0>
 8007864:	2300      	movs	r3, #0
 8007866:	e015      	b.n	8007894 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d108      	bne.n	8007880 <inc_lock+0xf8>
 800786e:	4a0c      	ldr	r2, [pc, #48]	@ (80078a0 <inc_lock+0x118>)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	011b      	lsls	r3, r3, #4
 8007874:	4413      	add	r3, r2
 8007876:	330c      	adds	r3, #12
 8007878:	881b      	ldrh	r3, [r3, #0]
 800787a:	3301      	adds	r3, #1
 800787c:	b29a      	uxth	r2, r3
 800787e:	e001      	b.n	8007884 <inc_lock+0xfc>
 8007880:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007884:	4906      	ldr	r1, [pc, #24]	@ (80078a0 <inc_lock+0x118>)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	011b      	lsls	r3, r3, #4
 800788a:	440b      	add	r3, r1
 800788c:	330c      	adds	r3, #12
 800788e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	3301      	adds	r3, #1
}
 8007894:	4618      	mov	r0, r3
 8007896:	3714      	adds	r7, #20
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr
 80078a0:	200036c8 	.word	0x200036c8

080078a4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	3b01      	subs	r3, #1
 80078b0:	607b      	str	r3, [r7, #4]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d825      	bhi.n	8007904 <dec_lock+0x60>
		n = Files[i].ctr;
 80078b8:	4a17      	ldr	r2, [pc, #92]	@ (8007918 <dec_lock+0x74>)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	011b      	lsls	r3, r3, #4
 80078be:	4413      	add	r3, r2
 80078c0:	330c      	adds	r3, #12
 80078c2:	881b      	ldrh	r3, [r3, #0]
 80078c4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80078c6:	89fb      	ldrh	r3, [r7, #14]
 80078c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078cc:	d101      	bne.n	80078d2 <dec_lock+0x2e>
 80078ce:	2300      	movs	r3, #0
 80078d0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80078d2:	89fb      	ldrh	r3, [r7, #14]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d002      	beq.n	80078de <dec_lock+0x3a>
 80078d8:	89fb      	ldrh	r3, [r7, #14]
 80078da:	3b01      	subs	r3, #1
 80078dc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80078de:	4a0e      	ldr	r2, [pc, #56]	@ (8007918 <dec_lock+0x74>)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	011b      	lsls	r3, r3, #4
 80078e4:	4413      	add	r3, r2
 80078e6:	330c      	adds	r3, #12
 80078e8:	89fa      	ldrh	r2, [r7, #14]
 80078ea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80078ec:	89fb      	ldrh	r3, [r7, #14]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d105      	bne.n	80078fe <dec_lock+0x5a>
 80078f2:	4a09      	ldr	r2, [pc, #36]	@ (8007918 <dec_lock+0x74>)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	011b      	lsls	r3, r3, #4
 80078f8:	4413      	add	r3, r2
 80078fa:	2200      	movs	r2, #0
 80078fc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	737b      	strb	r3, [r7, #13]
 8007902:	e001      	b.n	8007908 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007904:	2302      	movs	r3, #2
 8007906:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007908:	7b7b      	ldrb	r3, [r7, #13]
}
 800790a:	4618      	mov	r0, r3
 800790c:	3714      	adds	r7, #20
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	200036c8 	.word	0x200036c8

0800791c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800791c:	b480      	push	{r7}
 800791e:	b085      	sub	sp, #20
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007924:	2300      	movs	r3, #0
 8007926:	60fb      	str	r3, [r7, #12]
 8007928:	e010      	b.n	800794c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800792a:	4a0d      	ldr	r2, [pc, #52]	@ (8007960 <clear_lock+0x44>)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	011b      	lsls	r3, r3, #4
 8007930:	4413      	add	r3, r2
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	429a      	cmp	r2, r3
 8007938:	d105      	bne.n	8007946 <clear_lock+0x2a>
 800793a:	4a09      	ldr	r2, [pc, #36]	@ (8007960 <clear_lock+0x44>)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	011b      	lsls	r3, r3, #4
 8007940:	4413      	add	r3, r2
 8007942:	2200      	movs	r2, #0
 8007944:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	3301      	adds	r3, #1
 800794a:	60fb      	str	r3, [r7, #12]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d9eb      	bls.n	800792a <clear_lock+0xe>
	}
}
 8007952:	bf00      	nop
 8007954:	bf00      	nop
 8007956:	3714      	adds	r7, #20
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr
 8007960:	200036c8 	.word	0x200036c8

08007964 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b086      	sub	sp, #24
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800796c:	2300      	movs	r3, #0
 800796e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	78db      	ldrb	r3, [r3, #3]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d034      	beq.n	80079e2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800797c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	7858      	ldrb	r0, [r3, #1]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007988:	2301      	movs	r3, #1
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	f7ff fd18 	bl	80073c0 <disk_write>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d002      	beq.n	800799c <sync_window+0x38>
			res = FR_DISK_ERR;
 8007996:	2301      	movs	r3, #1
 8007998:	73fb      	strb	r3, [r7, #15]
 800799a:	e022      	b.n	80079e2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a1b      	ldr	r3, [r3, #32]
 80079a6:	697a      	ldr	r2, [r7, #20]
 80079a8:	1ad2      	subs	r2, r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d217      	bcs.n	80079e2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	789b      	ldrb	r3, [r3, #2]
 80079b6:	613b      	str	r3, [r7, #16]
 80079b8:	e010      	b.n	80079dc <sync_window+0x78>
					wsect += fs->fsize;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	699b      	ldr	r3, [r3, #24]
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	4413      	add	r3, r2
 80079c2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	7858      	ldrb	r0, [r3, #1]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80079ce:	2301      	movs	r3, #1
 80079d0:	697a      	ldr	r2, [r7, #20]
 80079d2:	f7ff fcf5 	bl	80073c0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	3b01      	subs	r3, #1
 80079da:	613b      	str	r3, [r7, #16]
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d8eb      	bhi.n	80079ba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80079e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3718      	adds	r7, #24
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80079f6:	2300      	movs	r3, #0
 80079f8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079fe:	683a      	ldr	r2, [r7, #0]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d01b      	beq.n	8007a3c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f7ff ffad 	bl	8007964 <sync_window>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007a0e:	7bfb      	ldrb	r3, [r7, #15]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d113      	bne.n	8007a3c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	7858      	ldrb	r0, [r3, #1]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007a1e:	2301      	movs	r3, #1
 8007a20:	683a      	ldr	r2, [r7, #0]
 8007a22:	f7ff fc9e 	bl	8007362 <disk_read>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d004      	beq.n	8007a36 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8007a30:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	683a      	ldr	r2, [r7, #0]
 8007a3a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8007a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
	...

08007a48 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f7ff ff87 	bl	8007964 <sync_window>
 8007a56:	4603      	mov	r3, r0
 8007a58:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007a5a:	7bfb      	ldrb	r3, [r7, #15]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d158      	bne.n	8007b12 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	2b03      	cmp	r3, #3
 8007a66:	d148      	bne.n	8007afa <sync_fs+0xb2>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	791b      	ldrb	r3, [r3, #4]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d144      	bne.n	8007afa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	3330      	adds	r3, #48	@ 0x30
 8007a74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a78:	2100      	movs	r1, #0
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7ff fda9 	bl	80075d2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	3330      	adds	r3, #48	@ 0x30
 8007a84:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007a88:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7ff fd38 	bl	8007502 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	3330      	adds	r3, #48	@ 0x30
 8007a96:	4921      	ldr	r1, [pc, #132]	@ (8007b1c <sync_fs+0xd4>)
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7ff fd4d 	bl	8007538 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	3330      	adds	r3, #48	@ 0x30
 8007aa2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007aa6:	491e      	ldr	r1, [pc, #120]	@ (8007b20 <sync_fs+0xd8>)
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7ff fd45 	bl	8007538 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	3330      	adds	r3, #48	@ 0x30
 8007ab2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	4619      	mov	r1, r3
 8007abc:	4610      	mov	r0, r2
 8007abe:	f7ff fd3b 	bl	8007538 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	3330      	adds	r3, #48	@ 0x30
 8007ac6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	4619      	mov	r1, r3
 8007ad0:	4610      	mov	r0, r2
 8007ad2:	f7ff fd31 	bl	8007538 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	69db      	ldr	r3, [r3, #28]
 8007ada:	1c5a      	adds	r2, r3, #1
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	7858      	ldrb	r0, [r3, #1]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aee:	2301      	movs	r3, #1
 8007af0:	f7ff fc66 	bl	80073c0 <disk_write>
			fs->fsi_flag = 0;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	785b      	ldrb	r3, [r3, #1]
 8007afe:	2200      	movs	r2, #0
 8007b00:	2100      	movs	r1, #0
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7ff fc8c 	bl	8007420 <disk_ioctl>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d001      	beq.n	8007b12 <sync_fs+0xca>
 8007b0e:	2301      	movs	r3, #1
 8007b10:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	41615252 	.word	0x41615252
 8007b20:	61417272 	.word	0x61417272

08007b24 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	3b02      	subs	r3, #2
 8007b32:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	695b      	ldr	r3, [r3, #20]
 8007b38:	3b02      	subs	r3, #2
 8007b3a:	683a      	ldr	r2, [r7, #0]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d301      	bcc.n	8007b44 <clust2sect+0x20>
 8007b40:	2300      	movs	r3, #0
 8007b42:	e008      	b.n	8007b56 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	895b      	ldrh	r3, [r3, #10]
 8007b48:	461a      	mov	r2, r3
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	fb03 f202 	mul.w	r2, r3, r2
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b54:	4413      	add	r3, r2
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	370c      	adds	r7, #12
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr

08007b62 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b086      	sub	sp, #24
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
 8007b6a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d904      	bls.n	8007b82 <get_fat+0x20>
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	695b      	ldr	r3, [r3, #20]
 8007b7c:	683a      	ldr	r2, [r7, #0]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d302      	bcc.n	8007b88 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007b82:	2301      	movs	r3, #1
 8007b84:	617b      	str	r3, [r7, #20]
 8007b86:	e08e      	b.n	8007ca6 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007b88:	f04f 33ff 	mov.w	r3, #4294967295
 8007b8c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	2b03      	cmp	r3, #3
 8007b94:	d061      	beq.n	8007c5a <get_fat+0xf8>
 8007b96:	2b03      	cmp	r3, #3
 8007b98:	dc7b      	bgt.n	8007c92 <get_fat+0x130>
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d002      	beq.n	8007ba4 <get_fat+0x42>
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d041      	beq.n	8007c26 <get_fat+0xc4>
 8007ba2:	e076      	b.n	8007c92 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	60fb      	str	r3, [r7, #12]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	085b      	lsrs	r3, r3, #1
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	4413      	add	r3, r2
 8007bb0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	6a1a      	ldr	r2, [r3, #32]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	0a5b      	lsrs	r3, r3, #9
 8007bba:	4413      	add	r3, r2
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	6938      	ldr	r0, [r7, #16]
 8007bc0:	f7ff ff14 	bl	80079ec <move_window>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d166      	bne.n	8007c98 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	1c5a      	adds	r2, r3, #1
 8007bce:	60fa      	str	r2, [r7, #12]
 8007bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bd4:	693a      	ldr	r2, [r7, #16]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007bdc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	6a1a      	ldr	r2, [r3, #32]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	0a5b      	lsrs	r3, r3, #9
 8007be6:	4413      	add	r3, r2
 8007be8:	4619      	mov	r1, r3
 8007bea:	6938      	ldr	r0, [r7, #16]
 8007bec:	f7ff fefe 	bl	80079ec <move_window>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d152      	bne.n	8007c9c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bfc:	693a      	ldr	r2, [r7, #16]
 8007bfe:	4413      	add	r3, r2
 8007c00:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007c04:	021b      	lsls	r3, r3, #8
 8007c06:	68ba      	ldr	r2, [r7, #8]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d002      	beq.n	8007c1c <get_fat+0xba>
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	091b      	lsrs	r3, r3, #4
 8007c1a:	e002      	b.n	8007c22 <get_fat+0xc0>
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c22:	617b      	str	r3, [r7, #20]
			break;
 8007c24:	e03f      	b.n	8007ca6 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	6a1a      	ldr	r2, [r3, #32]
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	0a1b      	lsrs	r3, r3, #8
 8007c2e:	4413      	add	r3, r2
 8007c30:	4619      	mov	r1, r3
 8007c32:	6938      	ldr	r0, [r7, #16]
 8007c34:	f7ff feda 	bl	80079ec <move_window>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d130      	bne.n	8007ca0 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	005b      	lsls	r3, r3, #1
 8007c48:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007c4c:	4413      	add	r3, r2
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7ff fc1c 	bl	800748c <ld_word>
 8007c54:	4603      	mov	r3, r0
 8007c56:	617b      	str	r3, [r7, #20]
			break;
 8007c58:	e025      	b.n	8007ca6 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	6a1a      	ldr	r2, [r3, #32]
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	09db      	lsrs	r3, r3, #7
 8007c62:	4413      	add	r3, r2
 8007c64:	4619      	mov	r1, r3
 8007c66:	6938      	ldr	r0, [r7, #16]
 8007c68:	f7ff fec0 	bl	80079ec <move_window>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d118      	bne.n	8007ca4 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007c80:	4413      	add	r3, r2
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7ff fc1a 	bl	80074bc <ld_dword>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007c8e:	617b      	str	r3, [r7, #20]
			break;
 8007c90:	e009      	b.n	8007ca6 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007c92:	2301      	movs	r3, #1
 8007c94:	617b      	str	r3, [r7, #20]
 8007c96:	e006      	b.n	8007ca6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c98:	bf00      	nop
 8007c9a:	e004      	b.n	8007ca6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c9c:	bf00      	nop
 8007c9e:	e002      	b.n	8007ca6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007ca0:	bf00      	nop
 8007ca2:	e000      	b.n	8007ca6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007ca4:	bf00      	nop
		}
	}

	return val;
 8007ca6:	697b      	ldr	r3, [r7, #20]
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3718      	adds	r7, #24
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007cb0:	b590      	push	{r4, r7, lr}
 8007cb2:	b089      	sub	sp, #36	@ 0x24
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007cbc:	2302      	movs	r3, #2
 8007cbe:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	f240 80d9 	bls.w	8007e7a <put_fat+0x1ca>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	695b      	ldr	r3, [r3, #20]
 8007ccc:	68ba      	ldr	r2, [r7, #8]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	f080 80d3 	bcs.w	8007e7a <put_fat+0x1ca>
		switch (fs->fs_type) {
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	2b03      	cmp	r3, #3
 8007cda:	f000 8096 	beq.w	8007e0a <put_fat+0x15a>
 8007cde:	2b03      	cmp	r3, #3
 8007ce0:	f300 80cb 	bgt.w	8007e7a <put_fat+0x1ca>
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d002      	beq.n	8007cee <put_fat+0x3e>
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d06e      	beq.n	8007dca <put_fat+0x11a>
 8007cec:	e0c5      	b.n	8007e7a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	61bb      	str	r3, [r7, #24]
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	085b      	lsrs	r3, r3, #1
 8007cf6:	69ba      	ldr	r2, [r7, #24]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6a1a      	ldr	r2, [r3, #32]
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	0a5b      	lsrs	r3, r3, #9
 8007d04:	4413      	add	r3, r2
 8007d06:	4619      	mov	r1, r3
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f7ff fe6f 	bl	80079ec <move_window>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007d12:	7ffb      	ldrb	r3, [r7, #31]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f040 80a9 	bne.w	8007e6c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	1c59      	adds	r1, r3, #1
 8007d24:	61b9      	str	r1, [r7, #24]
 8007d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d2a:	4413      	add	r3, r2
 8007d2c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	f003 0301 	and.w	r3, r3, #1
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00d      	beq.n	8007d54 <put_fat+0xa4>
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	b25b      	sxtb	r3, r3
 8007d3e:	f003 030f 	and.w	r3, r3, #15
 8007d42:	b25a      	sxtb	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	011b      	lsls	r3, r3, #4
 8007d4a:	b25b      	sxtb	r3, r3
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	b25b      	sxtb	r3, r3
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	e001      	b.n	8007d58 <put_fat+0xa8>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	697a      	ldr	r2, [r7, #20]
 8007d5a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6a1a      	ldr	r2, [r3, #32]
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	0a5b      	lsrs	r3, r3, #9
 8007d6a:	4413      	add	r3, r2
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	f7ff fe3c 	bl	80079ec <move_window>
 8007d74:	4603      	mov	r3, r0
 8007d76:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007d78:	7ffb      	ldrb	r3, [r7, #31]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d178      	bne.n	8007e70 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d8a:	4413      	add	r3, r2
 8007d8c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	f003 0301 	and.w	r3, r3, #1
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d003      	beq.n	8007da0 <put_fat+0xf0>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	091b      	lsrs	r3, r3, #4
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	e00e      	b.n	8007dbe <put_fat+0x10e>
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	b25b      	sxtb	r3, r3
 8007da6:	f023 030f 	bic.w	r3, r3, #15
 8007daa:	b25a      	sxtb	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	0a1b      	lsrs	r3, r3, #8
 8007db0:	b25b      	sxtb	r3, r3
 8007db2:	f003 030f 	and.w	r3, r3, #15
 8007db6:	b25b      	sxtb	r3, r3
 8007db8:	4313      	orrs	r3, r2
 8007dba:	b25b      	sxtb	r3, r3
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	697a      	ldr	r2, [r7, #20]
 8007dc0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	70da      	strb	r2, [r3, #3]
			break;
 8007dc8:	e057      	b.n	8007e7a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6a1a      	ldr	r2, [r3, #32]
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	0a1b      	lsrs	r3, r3, #8
 8007dd2:	4413      	add	r3, r2
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	f7ff fe08 	bl	80079ec <move_window>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007de0:	7ffb      	ldrb	r3, [r7, #31]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d146      	bne.n	8007e74 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	005b      	lsls	r3, r3, #1
 8007df0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007df4:	4413      	add	r3, r2
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	b292      	uxth	r2, r2
 8007dfa:	4611      	mov	r1, r2
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f7ff fb80 	bl	8007502 <st_word>
			fs->wflag = 1;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2201      	movs	r2, #1
 8007e06:	70da      	strb	r2, [r3, #3]
			break;
 8007e08:	e037      	b.n	8007e7a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6a1a      	ldr	r2, [r3, #32]
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	09db      	lsrs	r3, r3, #7
 8007e12:	4413      	add	r3, r2
 8007e14:	4619      	mov	r1, r3
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f7ff fde8 	bl	80079ec <move_window>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007e20:	7ffb      	ldrb	r3, [r7, #31]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d128      	bne.n	8007e78 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007e3a:	4413      	add	r3, r2
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f7ff fb3d 	bl	80074bc <ld_dword>
 8007e42:	4603      	mov	r3, r0
 8007e44:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007e48:	4323      	orrs	r3, r4
 8007e4a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007e5a:	4413      	add	r3, r2
 8007e5c:	6879      	ldr	r1, [r7, #4]
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7ff fb6a 	bl	8007538 <st_dword>
			fs->wflag = 1;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2201      	movs	r2, #1
 8007e68:	70da      	strb	r2, [r3, #3]
			break;
 8007e6a:	e006      	b.n	8007e7a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007e6c:	bf00      	nop
 8007e6e:	e004      	b.n	8007e7a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007e70:	bf00      	nop
 8007e72:	e002      	b.n	8007e7a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007e74:	bf00      	nop
 8007e76:	e000      	b.n	8007e7a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007e78:	bf00      	nop
		}
	}
	return res;
 8007e7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3724      	adds	r7, #36	@ 0x24
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd90      	pop	{r4, r7, pc}

08007e84 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b088      	sub	sp, #32
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007e90:	2300      	movs	r3, #0
 8007e92:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d904      	bls.n	8007eaa <remove_chain+0x26>
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	695b      	ldr	r3, [r3, #20]
 8007ea4:	68ba      	ldr	r2, [r7, #8]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d301      	bcc.n	8007eae <remove_chain+0x2a>
 8007eaa:	2302      	movs	r3, #2
 8007eac:	e04b      	b.n	8007f46 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00c      	beq.n	8007ece <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8007eb8:	6879      	ldr	r1, [r7, #4]
 8007eba:	69b8      	ldr	r0, [r7, #24]
 8007ebc:	f7ff fef8 	bl	8007cb0 <put_fat>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007ec4:	7ffb      	ldrb	r3, [r7, #31]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d001      	beq.n	8007ece <remove_chain+0x4a>
 8007eca:	7ffb      	ldrb	r3, [r7, #31]
 8007ecc:	e03b      	b.n	8007f46 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007ece:	68b9      	ldr	r1, [r7, #8]
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f7ff fe46 	bl	8007b62 <get_fat>
 8007ed6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d031      	beq.n	8007f42 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d101      	bne.n	8007ee8 <remove_chain+0x64>
 8007ee4:	2302      	movs	r3, #2
 8007ee6:	e02e      	b.n	8007f46 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eee:	d101      	bne.n	8007ef4 <remove_chain+0x70>
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e028      	b.n	8007f46 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	68b9      	ldr	r1, [r7, #8]
 8007ef8:	69b8      	ldr	r0, [r7, #24]
 8007efa:	f7ff fed9 	bl	8007cb0 <put_fat>
 8007efe:	4603      	mov	r3, r0
 8007f00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007f02:	7ffb      	ldrb	r3, [r7, #31]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d001      	beq.n	8007f0c <remove_chain+0x88>
 8007f08:	7ffb      	ldrb	r3, [r7, #31]
 8007f0a:	e01c      	b.n	8007f46 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	691a      	ldr	r2, [r3, #16]
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	695b      	ldr	r3, [r3, #20]
 8007f14:	3b02      	subs	r3, #2
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d20b      	bcs.n	8007f32 <remove_chain+0xae>
			fs->free_clst++;
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	1c5a      	adds	r2, r3, #1
 8007f20:	69bb      	ldr	r3, [r7, #24]
 8007f22:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	791b      	ldrb	r3, [r3, #4]
 8007f28:	f043 0301 	orr.w	r3, r3, #1
 8007f2c:	b2da      	uxtb	r2, r3
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	695b      	ldr	r3, [r3, #20]
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d3c6      	bcc.n	8007ece <remove_chain+0x4a>
 8007f40:	e000      	b.n	8007f44 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007f42:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3720      	adds	r7, #32
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b088      	sub	sp, #32
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d10d      	bne.n	8007f80 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d004      	beq.n	8007f7a <create_chain+0x2c>
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	695b      	ldr	r3, [r3, #20]
 8007f74:	69ba      	ldr	r2, [r7, #24]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d31b      	bcc.n	8007fb2 <create_chain+0x64>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	61bb      	str	r3, [r7, #24]
 8007f7e:	e018      	b.n	8007fb2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007f80:	6839      	ldr	r1, [r7, #0]
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f7ff fded 	bl	8007b62 <get_fat>
 8007f88:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d801      	bhi.n	8007f94 <create_chain+0x46>
 8007f90:	2301      	movs	r3, #1
 8007f92:	e070      	b.n	8008076 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f9a:	d101      	bne.n	8007fa0 <create_chain+0x52>
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	e06a      	b.n	8008076 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	695b      	ldr	r3, [r3, #20]
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d201      	bcs.n	8007fae <create_chain+0x60>
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	e063      	b.n	8008076 <create_chain+0x128>
		scl = clst;
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	695b      	ldr	r3, [r3, #20]
 8007fc0:	69fa      	ldr	r2, [r7, #28]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d307      	bcc.n	8007fd6 <create_chain+0x88>
				ncl = 2;
 8007fc6:	2302      	movs	r3, #2
 8007fc8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007fca:	69fa      	ldr	r2, [r7, #28]
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d901      	bls.n	8007fd6 <create_chain+0x88>
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	e04f      	b.n	8008076 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007fd6:	69f9      	ldr	r1, [r7, #28]
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f7ff fdc2 	bl	8007b62 <get_fat>
 8007fde:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00e      	beq.n	8008004 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d003      	beq.n	8007ff4 <create_chain+0xa6>
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ff2:	d101      	bne.n	8007ff8 <create_chain+0xaa>
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	e03e      	b.n	8008076 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007ff8:	69fa      	ldr	r2, [r7, #28]
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d1da      	bne.n	8007fb6 <create_chain+0x68>
 8008000:	2300      	movs	r3, #0
 8008002:	e038      	b.n	8008076 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008004:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008006:	f04f 32ff 	mov.w	r2, #4294967295
 800800a:	69f9      	ldr	r1, [r7, #28]
 800800c:	6938      	ldr	r0, [r7, #16]
 800800e:	f7ff fe4f 	bl	8007cb0 <put_fat>
 8008012:	4603      	mov	r3, r0
 8008014:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008016:	7dfb      	ldrb	r3, [r7, #23]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d109      	bne.n	8008030 <create_chain+0xe2>
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d006      	beq.n	8008030 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008022:	69fa      	ldr	r2, [r7, #28]
 8008024:	6839      	ldr	r1, [r7, #0]
 8008026:	6938      	ldr	r0, [r7, #16]
 8008028:	f7ff fe42 	bl	8007cb0 <put_fat>
 800802c:	4603      	mov	r3, r0
 800802e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008030:	7dfb      	ldrb	r3, [r7, #23]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d116      	bne.n	8008064 <create_chain+0x116>
		fs->last_clst = ncl;
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	69fa      	ldr	r2, [r7, #28]
 800803a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	691a      	ldr	r2, [r3, #16]
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	695b      	ldr	r3, [r3, #20]
 8008044:	3b02      	subs	r3, #2
 8008046:	429a      	cmp	r2, r3
 8008048:	d804      	bhi.n	8008054 <create_chain+0x106>
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	1e5a      	subs	r2, r3, #1
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	791b      	ldrb	r3, [r3, #4]
 8008058:	f043 0301 	orr.w	r3, r3, #1
 800805c:	b2da      	uxtb	r2, r3
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	711a      	strb	r2, [r3, #4]
 8008062:	e007      	b.n	8008074 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008064:	7dfb      	ldrb	r3, [r7, #23]
 8008066:	2b01      	cmp	r3, #1
 8008068:	d102      	bne.n	8008070 <create_chain+0x122>
 800806a:	f04f 33ff 	mov.w	r3, #4294967295
 800806e:	e000      	b.n	8008072 <create_chain+0x124>
 8008070:	2301      	movs	r3, #1
 8008072:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008074:	69fb      	ldr	r3, [r7, #28]
}
 8008076:	4618      	mov	r0, r3
 8008078:	3720      	adds	r7, #32
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800807e:	b480      	push	{r7}
 8008080:	b087      	sub	sp, #28
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
 8008086:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008092:	3304      	adds	r3, #4
 8008094:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	0a5b      	lsrs	r3, r3, #9
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	8952      	ldrh	r2, [r2, #10]
 800809e:	fbb3 f3f2 	udiv	r3, r3, r2
 80080a2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	1d1a      	adds	r2, r3, #4
 80080a8:	613a      	str	r2, [r7, #16]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d101      	bne.n	80080b8 <clmt_clust+0x3a>
 80080b4:	2300      	movs	r3, #0
 80080b6:	e010      	b.n	80080da <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80080b8:	697a      	ldr	r2, [r7, #20]
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d307      	bcc.n	80080d0 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80080c0:	697a      	ldr	r2, [r7, #20]
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	1ad3      	subs	r3, r2, r3
 80080c6:	617b      	str	r3, [r7, #20]
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	3304      	adds	r3, #4
 80080cc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80080ce:	e7e9      	b.n	80080a4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80080d0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	4413      	add	r3, r2
}
 80080da:	4618      	mov	r0, r3
 80080dc:	371c      	adds	r7, #28
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr

080080e6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b086      	sub	sp, #24
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
 80080ee:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80080fc:	d204      	bcs.n	8008108 <dir_sdi+0x22>
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	f003 031f 	and.w	r3, r3, #31
 8008104:	2b00      	cmp	r3, #0
 8008106:	d001      	beq.n	800810c <dir_sdi+0x26>
		return FR_INT_ERR;
 8008108:	2302      	movs	r3, #2
 800810a:	e063      	b.n	80081d4 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	683a      	ldr	r2, [r7, #0]
 8008110:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d106      	bne.n	800812c <dir_sdi+0x46>
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	2b02      	cmp	r3, #2
 8008124:	d902      	bls.n	800812c <dir_sdi+0x46>
		clst = fs->dirbase;
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800812a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d10c      	bne.n	800814c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	095b      	lsrs	r3, r3, #5
 8008136:	693a      	ldr	r2, [r7, #16]
 8008138:	8912      	ldrh	r2, [r2, #8]
 800813a:	4293      	cmp	r3, r2
 800813c:	d301      	bcc.n	8008142 <dir_sdi+0x5c>
 800813e:	2302      	movs	r3, #2
 8008140:	e048      	b.n	80081d4 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	61da      	str	r2, [r3, #28]
 800814a:	e029      	b.n	80081a0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	895b      	ldrh	r3, [r3, #10]
 8008150:	025b      	lsls	r3, r3, #9
 8008152:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008154:	e019      	b.n	800818a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6979      	ldr	r1, [r7, #20]
 800815a:	4618      	mov	r0, r3
 800815c:	f7ff fd01 	bl	8007b62 <get_fat>
 8008160:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008168:	d101      	bne.n	800816e <dir_sdi+0x88>
 800816a:	2301      	movs	r3, #1
 800816c:	e032      	b.n	80081d4 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	2b01      	cmp	r3, #1
 8008172:	d904      	bls.n	800817e <dir_sdi+0x98>
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	695b      	ldr	r3, [r3, #20]
 8008178:	697a      	ldr	r2, [r7, #20]
 800817a:	429a      	cmp	r2, r3
 800817c:	d301      	bcc.n	8008182 <dir_sdi+0x9c>
 800817e:	2302      	movs	r3, #2
 8008180:	e028      	b.n	80081d4 <dir_sdi+0xee>
			ofs -= csz;
 8008182:	683a      	ldr	r2, [r7, #0]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	1ad3      	subs	r3, r2, r3
 8008188:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800818a:	683a      	ldr	r2, [r7, #0]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	429a      	cmp	r2, r3
 8008190:	d2e1      	bcs.n	8008156 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008192:	6979      	ldr	r1, [r7, #20]
 8008194:	6938      	ldr	r0, [r7, #16]
 8008196:	f7ff fcc5 	bl	8007b24 <clust2sect>
 800819a:	4602      	mov	r2, r0
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	69db      	ldr	r3, [r3, #28]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d101      	bne.n	80081b2 <dir_sdi+0xcc>
 80081ae:	2302      	movs	r3, #2
 80081b0:	e010      	b.n	80081d4 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	69da      	ldr	r2, [r3, #28]
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	0a5b      	lsrs	r3, r3, #9
 80081ba:	441a      	add	r2, r3
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081cc:	441a      	add	r2, r3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3718      	adds	r7, #24
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b086      	sub	sp, #24
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	695b      	ldr	r3, [r3, #20]
 80081f0:	3320      	adds	r3, #32
 80081f2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	69db      	ldr	r3, [r3, #28]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d003      	beq.n	8008204 <dir_next+0x28>
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008202:	d301      	bcc.n	8008208 <dir_next+0x2c>
 8008204:	2304      	movs	r3, #4
 8008206:	e0aa      	b.n	800835e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800820e:	2b00      	cmp	r3, #0
 8008210:	f040 8098 	bne.w	8008344 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	69db      	ldr	r3, [r3, #28]
 8008218:	1c5a      	adds	r2, r3, #1
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	699b      	ldr	r3, [r3, #24]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d10b      	bne.n	800823e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	095b      	lsrs	r3, r3, #5
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	8912      	ldrh	r2, [r2, #8]
 800822e:	4293      	cmp	r3, r2
 8008230:	f0c0 8088 	bcc.w	8008344 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	61da      	str	r2, [r3, #28]
 800823a:	2304      	movs	r3, #4
 800823c:	e08f      	b.n	800835e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	0a5b      	lsrs	r3, r3, #9
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	8952      	ldrh	r2, [r2, #10]
 8008246:	3a01      	subs	r2, #1
 8008248:	4013      	ands	r3, r2
 800824a:	2b00      	cmp	r3, #0
 800824c:	d17a      	bne.n	8008344 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	699b      	ldr	r3, [r3, #24]
 8008254:	4619      	mov	r1, r3
 8008256:	4610      	mov	r0, r2
 8008258:	f7ff fc83 	bl	8007b62 <get_fat>
 800825c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d801      	bhi.n	8008268 <dir_next+0x8c>
 8008264:	2302      	movs	r3, #2
 8008266:	e07a      	b.n	800835e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800826e:	d101      	bne.n	8008274 <dir_next+0x98>
 8008270:	2301      	movs	r3, #1
 8008272:	e074      	b.n	800835e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	695b      	ldr	r3, [r3, #20]
 8008278:	697a      	ldr	r2, [r7, #20]
 800827a:	429a      	cmp	r2, r3
 800827c:	d358      	bcc.n	8008330 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d104      	bne.n	800828e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	61da      	str	r2, [r3, #28]
 800828a:	2304      	movs	r3, #4
 800828c:	e067      	b.n	800835e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	699b      	ldr	r3, [r3, #24]
 8008294:	4619      	mov	r1, r3
 8008296:	4610      	mov	r0, r2
 8008298:	f7ff fe59 	bl	8007f4e <create_chain>
 800829c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d101      	bne.n	80082a8 <dir_next+0xcc>
 80082a4:	2307      	movs	r3, #7
 80082a6:	e05a      	b.n	800835e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d101      	bne.n	80082b2 <dir_next+0xd6>
 80082ae:	2302      	movs	r3, #2
 80082b0:	e055      	b.n	800835e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082b8:	d101      	bne.n	80082be <dir_next+0xe2>
 80082ba:	2301      	movs	r3, #1
 80082bc:	e04f      	b.n	800835e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80082be:	68f8      	ldr	r0, [r7, #12]
 80082c0:	f7ff fb50 	bl	8007964 <sync_window>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d001      	beq.n	80082ce <dir_next+0xf2>
 80082ca:	2301      	movs	r3, #1
 80082cc:	e047      	b.n	800835e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	3330      	adds	r3, #48	@ 0x30
 80082d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80082d6:	2100      	movs	r1, #0
 80082d8:	4618      	mov	r0, r3
 80082da:	f7ff f97a 	bl	80075d2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80082de:	2300      	movs	r3, #0
 80082e0:	613b      	str	r3, [r7, #16]
 80082e2:	6979      	ldr	r1, [r7, #20]
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f7ff fc1d 	bl	8007b24 <clust2sect>
 80082ea:	4602      	mov	r2, r0
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	62da      	str	r2, [r3, #44]	@ 0x2c
 80082f0:	e012      	b.n	8008318 <dir_next+0x13c>
						fs->wflag = 1;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2201      	movs	r2, #1
 80082f6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f7ff fb33 	bl	8007964 <sync_window>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d001      	beq.n	8008308 <dir_next+0x12c>
 8008304:	2301      	movs	r3, #1
 8008306:	e02a      	b.n	800835e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	3301      	adds	r3, #1
 800830c:	613b      	str	r3, [r7, #16]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008312:	1c5a      	adds	r2, r3, #1
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	895b      	ldrh	r3, [r3, #10]
 800831c:	461a      	mov	r2, r3
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	4293      	cmp	r3, r2
 8008322:	d3e6      	bcc.n	80082f2 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	1ad2      	subs	r2, r2, r3
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	697a      	ldr	r2, [r7, #20]
 8008334:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008336:	6979      	ldr	r1, [r7, #20]
 8008338:	68f8      	ldr	r0, [r7, #12]
 800833a:	f7ff fbf3 	bl	8007b24 <clust2sect>
 800833e:	4602      	mov	r2, r0
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	68ba      	ldr	r2, [r7, #8]
 8008348:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008356:	441a      	add	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3718      	adds	r7, #24
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b086      	sub	sp, #24
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
 800836e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008376:	2100      	movs	r1, #0
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f7ff feb4 	bl	80080e6 <dir_sdi>
 800837e:	4603      	mov	r3, r0
 8008380:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008382:	7dfb      	ldrb	r3, [r7, #23]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d12b      	bne.n	80083e0 <dir_alloc+0x7a>
		n = 0;
 8008388:	2300      	movs	r3, #0
 800838a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	69db      	ldr	r3, [r3, #28]
 8008390:	4619      	mov	r1, r3
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	f7ff fb2a 	bl	80079ec <move_window>
 8008398:	4603      	mov	r3, r0
 800839a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800839c:	7dfb      	ldrb	r3, [r7, #23]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d11d      	bne.n	80083de <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a1b      	ldr	r3, [r3, #32]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	2be5      	cmp	r3, #229	@ 0xe5
 80083aa:	d004      	beq.n	80083b6 <dir_alloc+0x50>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6a1b      	ldr	r3, [r3, #32]
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d107      	bne.n	80083c6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	3301      	adds	r3, #1
 80083ba:	613b      	str	r3, [r7, #16]
 80083bc:	693a      	ldr	r2, [r7, #16]
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d102      	bne.n	80083ca <dir_alloc+0x64>
 80083c4:	e00c      	b.n	80083e0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80083c6:	2300      	movs	r3, #0
 80083c8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80083ca:	2101      	movs	r1, #1
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f7ff ff05 	bl	80081dc <dir_next>
 80083d2:	4603      	mov	r3, r0
 80083d4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80083d6:	7dfb      	ldrb	r3, [r7, #23]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d0d7      	beq.n	800838c <dir_alloc+0x26>
 80083dc:	e000      	b.n	80083e0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80083de:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80083e0:	7dfb      	ldrb	r3, [r7, #23]
 80083e2:	2b04      	cmp	r3, #4
 80083e4:	d101      	bne.n	80083ea <dir_alloc+0x84>
 80083e6:	2307      	movs	r3, #7
 80083e8:	75fb      	strb	r3, [r7, #23]
	return res;
 80083ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3718      	adds	r7, #24
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	331a      	adds	r3, #26
 8008402:	4618      	mov	r0, r3
 8008404:	f7ff f842 	bl	800748c <ld_word>
 8008408:	4603      	mov	r3, r0
 800840a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	2b03      	cmp	r3, #3
 8008412:	d109      	bne.n	8008428 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	3314      	adds	r3, #20
 8008418:	4618      	mov	r0, r3
 800841a:	f7ff f837 	bl	800748c <ld_word>
 800841e:	4603      	mov	r3, r0
 8008420:	041b      	lsls	r3, r3, #16
 8008422:	68fa      	ldr	r2, [r7, #12]
 8008424:	4313      	orrs	r3, r2
 8008426:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008428:	68fb      	ldr	r3, [r7, #12]
}
 800842a:	4618      	mov	r0, r3
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b084      	sub	sp, #16
 8008436:	af00      	add	r7, sp, #0
 8008438:	60f8      	str	r0, [r7, #12]
 800843a:	60b9      	str	r1, [r7, #8]
 800843c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	331a      	adds	r3, #26
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	b292      	uxth	r2, r2
 8008446:	4611      	mov	r1, r2
 8008448:	4618      	mov	r0, r3
 800844a:	f7ff f85a 	bl	8007502 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	2b03      	cmp	r3, #3
 8008454:	d109      	bne.n	800846a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	f103 0214 	add.w	r2, r3, #20
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	0c1b      	lsrs	r3, r3, #16
 8008460:	b29b      	uxth	r3, r3
 8008462:	4619      	mov	r1, r3
 8008464:	4610      	mov	r0, r2
 8008466:	f7ff f84c 	bl	8007502 <st_word>
	}
}
 800846a:	bf00      	nop
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b086      	sub	sp, #24
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008480:	2100      	movs	r1, #0
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7ff fe2f 	bl	80080e6 <dir_sdi>
 8008488:	4603      	mov	r3, r0
 800848a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800848c:	7dfb      	ldrb	r3, [r7, #23]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d001      	beq.n	8008496 <dir_find+0x24>
 8008492:	7dfb      	ldrb	r3, [r7, #23]
 8008494:	e03e      	b.n	8008514 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	69db      	ldr	r3, [r3, #28]
 800849a:	4619      	mov	r1, r3
 800849c:	6938      	ldr	r0, [r7, #16]
 800849e:	f7ff faa5 	bl	80079ec <move_window>
 80084a2:	4603      	mov	r3, r0
 80084a4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80084a6:	7dfb      	ldrb	r3, [r7, #23]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d12f      	bne.n	800850c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6a1b      	ldr	r3, [r3, #32]
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80084b4:	7bfb      	ldrb	r3, [r7, #15]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d102      	bne.n	80084c0 <dir_find+0x4e>
 80084ba:	2304      	movs	r3, #4
 80084bc:	75fb      	strb	r3, [r7, #23]
 80084be:	e028      	b.n	8008512 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6a1b      	ldr	r3, [r3, #32]
 80084c4:	330b      	adds	r3, #11
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80084cc:	b2da      	uxtb	r2, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a1b      	ldr	r3, [r3, #32]
 80084d6:	330b      	adds	r3, #11
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	f003 0308 	and.w	r3, r3, #8
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d10a      	bne.n	80084f8 <dir_find+0x86>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a18      	ldr	r0, [r3, #32]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	3324      	adds	r3, #36	@ 0x24
 80084ea:	220b      	movs	r2, #11
 80084ec:	4619      	mov	r1, r3
 80084ee:	f7ff f88b 	bl	8007608 <mem_cmp>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d00b      	beq.n	8008510 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80084f8:	2100      	movs	r1, #0
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f7ff fe6e 	bl	80081dc <dir_next>
 8008500:	4603      	mov	r3, r0
 8008502:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008504:	7dfb      	ldrb	r3, [r7, #23]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d0c5      	beq.n	8008496 <dir_find+0x24>
 800850a:	e002      	b.n	8008512 <dir_find+0xa0>
		if (res != FR_OK) break;
 800850c:	bf00      	nop
 800850e:	e000      	b.n	8008512 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008510:	bf00      	nop

	return res;
 8008512:	7dfb      	ldrb	r3, [r7, #23]
}
 8008514:	4618      	mov	r0, r3
 8008516:	3718      	adds	r7, #24
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800852a:	2101      	movs	r1, #1
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f7ff ff1a 	bl	8008366 <dir_alloc>
 8008532:	4603      	mov	r3, r0
 8008534:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008536:	7bfb      	ldrb	r3, [r7, #15]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d11c      	bne.n	8008576 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	69db      	ldr	r3, [r3, #28]
 8008540:	4619      	mov	r1, r3
 8008542:	68b8      	ldr	r0, [r7, #8]
 8008544:	f7ff fa52 	bl	80079ec <move_window>
 8008548:	4603      	mov	r3, r0
 800854a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800854c:	7bfb      	ldrb	r3, [r7, #15]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d111      	bne.n	8008576 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a1b      	ldr	r3, [r3, #32]
 8008556:	2220      	movs	r2, #32
 8008558:	2100      	movs	r1, #0
 800855a:	4618      	mov	r0, r3
 800855c:	f7ff f839 	bl	80075d2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6a18      	ldr	r0, [r3, #32]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	3324      	adds	r3, #36	@ 0x24
 8008568:	220b      	movs	r2, #11
 800856a:	4619      	mov	r1, r3
 800856c:	f7ff f810 	bl	8007590 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	2201      	movs	r2, #1
 8008574:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008576:	7bfb      	ldrb	r3, [r7, #15]
}
 8008578:	4618      	mov	r0, r3
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b088      	sub	sp, #32
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	60fb      	str	r3, [r7, #12]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	3324      	adds	r3, #36	@ 0x24
 8008594:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008596:	220b      	movs	r2, #11
 8008598:	2120      	movs	r1, #32
 800859a:	68b8      	ldr	r0, [r7, #8]
 800859c:	f7ff f819 	bl	80075d2 <mem_set>
	si = i = 0; ni = 8;
 80085a0:	2300      	movs	r3, #0
 80085a2:	613b      	str	r3, [r7, #16]
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	61fb      	str	r3, [r7, #28]
 80085a8:	2308      	movs	r3, #8
 80085aa:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	1c5a      	adds	r2, r3, #1
 80085b0:	61fa      	str	r2, [r7, #28]
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	4413      	add	r3, r2
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80085ba:	7efb      	ldrb	r3, [r7, #27]
 80085bc:	2b20      	cmp	r3, #32
 80085be:	d94e      	bls.n	800865e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80085c0:	7efb      	ldrb	r3, [r7, #27]
 80085c2:	2b2f      	cmp	r3, #47	@ 0x2f
 80085c4:	d006      	beq.n	80085d4 <create_name+0x54>
 80085c6:	7efb      	ldrb	r3, [r7, #27]
 80085c8:	2b5c      	cmp	r3, #92	@ 0x5c
 80085ca:	d110      	bne.n	80085ee <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80085cc:	e002      	b.n	80085d4 <create_name+0x54>
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	3301      	adds	r3, #1
 80085d2:	61fb      	str	r3, [r7, #28]
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	4413      	add	r3, r2
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80085de:	d0f6      	beq.n	80085ce <create_name+0x4e>
 80085e0:	68fa      	ldr	r2, [r7, #12]
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	4413      	add	r3, r2
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	2b5c      	cmp	r3, #92	@ 0x5c
 80085ea:	d0f0      	beq.n	80085ce <create_name+0x4e>
			break;
 80085ec:	e038      	b.n	8008660 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80085ee:	7efb      	ldrb	r3, [r7, #27]
 80085f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80085f2:	d003      	beq.n	80085fc <create_name+0x7c>
 80085f4:	693a      	ldr	r2, [r7, #16]
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d30c      	bcc.n	8008616 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	2b0b      	cmp	r3, #11
 8008600:	d002      	beq.n	8008608 <create_name+0x88>
 8008602:	7efb      	ldrb	r3, [r7, #27]
 8008604:	2b2e      	cmp	r3, #46	@ 0x2e
 8008606:	d001      	beq.n	800860c <create_name+0x8c>
 8008608:	2306      	movs	r3, #6
 800860a:	e044      	b.n	8008696 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800860c:	2308      	movs	r3, #8
 800860e:	613b      	str	r3, [r7, #16]
 8008610:	230b      	movs	r3, #11
 8008612:	617b      	str	r3, [r7, #20]
			continue;
 8008614:	e022      	b.n	800865c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008616:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800861a:	2b00      	cmp	r3, #0
 800861c:	da04      	bge.n	8008628 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800861e:	7efb      	ldrb	r3, [r7, #27]
 8008620:	3b80      	subs	r3, #128	@ 0x80
 8008622:	4a1f      	ldr	r2, [pc, #124]	@ (80086a0 <create_name+0x120>)
 8008624:	5cd3      	ldrb	r3, [r2, r3]
 8008626:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008628:	7efb      	ldrb	r3, [r7, #27]
 800862a:	4619      	mov	r1, r3
 800862c:	481d      	ldr	r0, [pc, #116]	@ (80086a4 <create_name+0x124>)
 800862e:	f7ff f812 	bl	8007656 <chk_chr>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d001      	beq.n	800863c <create_name+0xbc>
 8008638:	2306      	movs	r3, #6
 800863a:	e02c      	b.n	8008696 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800863c:	7efb      	ldrb	r3, [r7, #27]
 800863e:	2b60      	cmp	r3, #96	@ 0x60
 8008640:	d905      	bls.n	800864e <create_name+0xce>
 8008642:	7efb      	ldrb	r3, [r7, #27]
 8008644:	2b7a      	cmp	r3, #122	@ 0x7a
 8008646:	d802      	bhi.n	800864e <create_name+0xce>
 8008648:	7efb      	ldrb	r3, [r7, #27]
 800864a:	3b20      	subs	r3, #32
 800864c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	1c5a      	adds	r2, r3, #1
 8008652:	613a      	str	r2, [r7, #16]
 8008654:	68ba      	ldr	r2, [r7, #8]
 8008656:	4413      	add	r3, r2
 8008658:	7efa      	ldrb	r2, [r7, #27]
 800865a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800865c:	e7a6      	b.n	80085ac <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800865e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	441a      	add	r2, r3
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d101      	bne.n	8008674 <create_name+0xf4>
 8008670:	2306      	movs	r3, #6
 8008672:	e010      	b.n	8008696 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	2be5      	cmp	r3, #229	@ 0xe5
 800867a:	d102      	bne.n	8008682 <create_name+0x102>
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	2205      	movs	r2, #5
 8008680:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008682:	7efb      	ldrb	r3, [r7, #27]
 8008684:	2b20      	cmp	r3, #32
 8008686:	d801      	bhi.n	800868c <create_name+0x10c>
 8008688:	2204      	movs	r2, #4
 800868a:	e000      	b.n	800868e <create_name+0x10e>
 800868c:	2200      	movs	r2, #0
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	330b      	adds	r3, #11
 8008692:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008694:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008696:	4618      	mov	r0, r3
 8008698:	3720      	adds	r7, #32
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	0800e254 	.word	0x0800e254
 80086a4:	0800e200 	.word	0x0800e200

080086a8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b086      	sub	sp, #24
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80086bc:	e002      	b.n	80086c4 <follow_path+0x1c>
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	3301      	adds	r3, #1
 80086c2:	603b      	str	r3, [r7, #0]
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	2b2f      	cmp	r3, #47	@ 0x2f
 80086ca:	d0f8      	beq.n	80086be <follow_path+0x16>
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	2b5c      	cmp	r3, #92	@ 0x5c
 80086d2:	d0f4      	beq.n	80086be <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	2200      	movs	r2, #0
 80086d8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	2b1f      	cmp	r3, #31
 80086e0:	d80a      	bhi.n	80086f8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2280      	movs	r2, #128	@ 0x80
 80086e6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80086ea:	2100      	movs	r1, #0
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f7ff fcfa 	bl	80080e6 <dir_sdi>
 80086f2:	4603      	mov	r3, r0
 80086f4:	75fb      	strb	r3, [r7, #23]
 80086f6:	e043      	b.n	8008780 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80086f8:	463b      	mov	r3, r7
 80086fa:	4619      	mov	r1, r3
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f7ff ff3f 	bl	8008580 <create_name>
 8008702:	4603      	mov	r3, r0
 8008704:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008706:	7dfb      	ldrb	r3, [r7, #23]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d134      	bne.n	8008776 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f7ff feb0 	bl	8008472 <dir_find>
 8008712:	4603      	mov	r3, r0
 8008714:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800871c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800871e:	7dfb      	ldrb	r3, [r7, #23]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d00a      	beq.n	800873a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008724:	7dfb      	ldrb	r3, [r7, #23]
 8008726:	2b04      	cmp	r3, #4
 8008728:	d127      	bne.n	800877a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800872a:	7afb      	ldrb	r3, [r7, #11]
 800872c:	f003 0304 	and.w	r3, r3, #4
 8008730:	2b00      	cmp	r3, #0
 8008732:	d122      	bne.n	800877a <follow_path+0xd2>
 8008734:	2305      	movs	r3, #5
 8008736:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008738:	e01f      	b.n	800877a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800873a:	7afb      	ldrb	r3, [r7, #11]
 800873c:	f003 0304 	and.w	r3, r3, #4
 8008740:	2b00      	cmp	r3, #0
 8008742:	d11c      	bne.n	800877e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	799b      	ldrb	r3, [r3, #6]
 8008748:	f003 0310 	and.w	r3, r3, #16
 800874c:	2b00      	cmp	r3, #0
 800874e:	d102      	bne.n	8008756 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008750:	2305      	movs	r3, #5
 8008752:	75fb      	strb	r3, [r7, #23]
 8008754:	e014      	b.n	8008780 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	695b      	ldr	r3, [r3, #20]
 8008760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008764:	4413      	add	r3, r2
 8008766:	4619      	mov	r1, r3
 8008768:	68f8      	ldr	r0, [r7, #12]
 800876a:	f7ff fe43 	bl	80083f4 <ld_clust>
 800876e:	4602      	mov	r2, r0
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008774:	e7c0      	b.n	80086f8 <follow_path+0x50>
			if (res != FR_OK) break;
 8008776:	bf00      	nop
 8008778:	e002      	b.n	8008780 <follow_path+0xd8>
				break;
 800877a:	bf00      	nop
 800877c:	e000      	b.n	8008780 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800877e:	bf00      	nop
			}
		}
	}

	return res;
 8008780:	7dfb      	ldrb	r3, [r7, #23]
}
 8008782:	4618      	mov	r0, r3
 8008784:	3718      	adds	r7, #24
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800878a:	b480      	push	{r7}
 800878c:	b087      	sub	sp, #28
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008792:	f04f 33ff 	mov.w	r3, #4294967295
 8008796:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d031      	beq.n	8008804 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	617b      	str	r3, [r7, #20]
 80087a6:	e002      	b.n	80087ae <get_ldnumber+0x24>
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	3301      	adds	r3, #1
 80087ac:	617b      	str	r3, [r7, #20]
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	2b20      	cmp	r3, #32
 80087b4:	d903      	bls.n	80087be <get_ldnumber+0x34>
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	2b3a      	cmp	r3, #58	@ 0x3a
 80087bc:	d1f4      	bne.n	80087a8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	2b3a      	cmp	r3, #58	@ 0x3a
 80087c4:	d11c      	bne.n	8008800 <get_ldnumber+0x76>
			tp = *path;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	1c5a      	adds	r2, r3, #1
 80087d0:	60fa      	str	r2, [r7, #12]
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	3b30      	subs	r3, #48	@ 0x30
 80087d6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	2b09      	cmp	r3, #9
 80087dc:	d80e      	bhi.n	80087fc <get_ldnumber+0x72>
 80087de:	68fa      	ldr	r2, [r7, #12]
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d10a      	bne.n	80087fc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d107      	bne.n	80087fc <get_ldnumber+0x72>
					vol = (int)i;
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	3301      	adds	r3, #1
 80087f4:	617b      	str	r3, [r7, #20]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	697a      	ldr	r2, [r7, #20]
 80087fa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	e002      	b.n	8008806 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008800:	2300      	movs	r3, #0
 8008802:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008804:	693b      	ldr	r3, [r7, #16]
}
 8008806:	4618      	mov	r0, r3
 8008808:	371c      	adds	r7, #28
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr
	...

08008814 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	70da      	strb	r2, [r3, #3]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f04f 32ff 	mov.w	r2, #4294967295
 800882a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800882c:	6839      	ldr	r1, [r7, #0]
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f7ff f8dc 	bl	80079ec <move_window>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d001      	beq.n	800883e <check_fs+0x2a>
 800883a:	2304      	movs	r3, #4
 800883c:	e038      	b.n	80088b0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	3330      	adds	r3, #48	@ 0x30
 8008842:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008846:	4618      	mov	r0, r3
 8008848:	f7fe fe20 	bl	800748c <ld_word>
 800884c:	4603      	mov	r3, r0
 800884e:	461a      	mov	r2, r3
 8008850:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008854:	429a      	cmp	r2, r3
 8008856:	d001      	beq.n	800885c <check_fs+0x48>
 8008858:	2303      	movs	r3, #3
 800885a:	e029      	b.n	80088b0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008862:	2be9      	cmp	r3, #233	@ 0xe9
 8008864:	d009      	beq.n	800887a <check_fs+0x66>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800886c:	2beb      	cmp	r3, #235	@ 0xeb
 800886e:	d11e      	bne.n	80088ae <check_fs+0x9a>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008876:	2b90      	cmp	r3, #144	@ 0x90
 8008878:	d119      	bne.n	80088ae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	3330      	adds	r3, #48	@ 0x30
 800887e:	3336      	adds	r3, #54	@ 0x36
 8008880:	4618      	mov	r0, r3
 8008882:	f7fe fe1b 	bl	80074bc <ld_dword>
 8008886:	4603      	mov	r3, r0
 8008888:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800888c:	4a0a      	ldr	r2, [pc, #40]	@ (80088b8 <check_fs+0xa4>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d101      	bne.n	8008896 <check_fs+0x82>
 8008892:	2300      	movs	r3, #0
 8008894:	e00c      	b.n	80088b0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	3330      	adds	r3, #48	@ 0x30
 800889a:	3352      	adds	r3, #82	@ 0x52
 800889c:	4618      	mov	r0, r3
 800889e:	f7fe fe0d 	bl	80074bc <ld_dword>
 80088a2:	4603      	mov	r3, r0
 80088a4:	4a05      	ldr	r2, [pc, #20]	@ (80088bc <check_fs+0xa8>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d101      	bne.n	80088ae <check_fs+0x9a>
 80088aa:	2300      	movs	r3, #0
 80088ac:	e000      	b.n	80088b0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80088ae:	2302      	movs	r3, #2
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3708      	adds	r7, #8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	00544146 	.word	0x00544146
 80088bc:	33544146 	.word	0x33544146

080088c0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b096      	sub	sp, #88	@ 0x58
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	4613      	mov	r3, r2
 80088cc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	2200      	movs	r2, #0
 80088d2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80088d4:	68f8      	ldr	r0, [r7, #12]
 80088d6:	f7ff ff58 	bl	800878a <get_ldnumber>
 80088da:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80088dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088de:	2b00      	cmp	r3, #0
 80088e0:	da01      	bge.n	80088e6 <find_volume+0x26>
 80088e2:	230b      	movs	r3, #11
 80088e4:	e22d      	b.n	8008d42 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80088e6:	4aa1      	ldr	r2, [pc, #644]	@ (8008b6c <find_volume+0x2ac>)
 80088e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088ee:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80088f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d101      	bne.n	80088fa <find_volume+0x3a>
 80088f6:	230c      	movs	r3, #12
 80088f8:	e223      	b.n	8008d42 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80088fe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008900:	79fb      	ldrb	r3, [r7, #7]
 8008902:	f023 0301 	bic.w	r3, r3, #1
 8008906:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d01a      	beq.n	8008946 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008912:	785b      	ldrb	r3, [r3, #1]
 8008914:	4618      	mov	r0, r3
 8008916:	f7fe fcfd 	bl	8007314 <disk_status>
 800891a:	4603      	mov	r3, r0
 800891c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008920:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008924:	f003 0301 	and.w	r3, r3, #1
 8008928:	2b00      	cmp	r3, #0
 800892a:	d10c      	bne.n	8008946 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800892c:	79fb      	ldrb	r3, [r7, #7]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d007      	beq.n	8008942 <find_volume+0x82>
 8008932:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008936:	f003 0304 	and.w	r3, r3, #4
 800893a:	2b00      	cmp	r3, #0
 800893c:	d001      	beq.n	8008942 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800893e:	230a      	movs	r3, #10
 8008940:	e1ff      	b.n	8008d42 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8008942:	2300      	movs	r3, #0
 8008944:	e1fd      	b.n	8008d42 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008948:	2200      	movs	r2, #0
 800894a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800894c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800894e:	b2da      	uxtb	r2, r3
 8008950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008952:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008956:	785b      	ldrb	r3, [r3, #1]
 8008958:	4618      	mov	r0, r3
 800895a:	f7fe fcec 	bl	8007336 <disk_initialize>
 800895e:	4603      	mov	r3, r0
 8008960:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008964:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008968:	f003 0301 	and.w	r3, r3, #1
 800896c:	2b00      	cmp	r3, #0
 800896e:	d001      	beq.n	8008974 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008970:	2303      	movs	r3, #3
 8008972:	e1e6      	b.n	8008d42 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008974:	79fb      	ldrb	r3, [r7, #7]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d007      	beq.n	800898a <find_volume+0xca>
 800897a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800897e:	f003 0304 	and.w	r3, r3, #4
 8008982:	2b00      	cmp	r3, #0
 8008984:	d001      	beq.n	800898a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008986:	230a      	movs	r3, #10
 8008988:	e1db      	b.n	8008d42 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800898a:	2300      	movs	r3, #0
 800898c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800898e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008990:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008992:	f7ff ff3f 	bl	8008814 <check_fs>
 8008996:	4603      	mov	r3, r0
 8008998:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800899c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	d149      	bne.n	8008a38 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80089a4:	2300      	movs	r3, #0
 80089a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80089a8:	e01e      	b.n	80089e8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80089aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80089b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089b2:	011b      	lsls	r3, r3, #4
 80089b4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80089b8:	4413      	add	r3, r2
 80089ba:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80089bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089be:	3304      	adds	r3, #4
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d006      	beq.n	80089d4 <find_volume+0x114>
 80089c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c8:	3308      	adds	r3, #8
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7fe fd76 	bl	80074bc <ld_dword>
 80089d0:	4602      	mov	r2, r0
 80089d2:	e000      	b.n	80089d6 <find_volume+0x116>
 80089d4:	2200      	movs	r2, #0
 80089d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	3358      	adds	r3, #88	@ 0x58
 80089dc:	443b      	add	r3, r7
 80089de:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80089e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089e4:	3301      	adds	r3, #1
 80089e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80089e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089ea:	2b03      	cmp	r3, #3
 80089ec:	d9dd      	bls.n	80089aa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80089ee:	2300      	movs	r3, #0
 80089f0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80089f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d002      	beq.n	80089fe <find_volume+0x13e>
 80089f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089fa:	3b01      	subs	r3, #1
 80089fc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80089fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	3358      	adds	r3, #88	@ 0x58
 8008a04:	443b      	add	r3, r7
 8008a06:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008a0a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008a0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d005      	beq.n	8008a1e <find_volume+0x15e>
 8008a12:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008a14:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008a16:	f7ff fefd 	bl	8008814 <check_fs>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	e000      	b.n	8008a20 <find_volume+0x160>
 8008a1e:	2303      	movs	r3, #3
 8008a20:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008a24:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d905      	bls.n	8008a38 <find_volume+0x178>
 8008a2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a2e:	3301      	adds	r3, #1
 8008a30:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a34:	2b03      	cmp	r3, #3
 8008a36:	d9e2      	bls.n	80089fe <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008a38:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008a3c:	2b04      	cmp	r3, #4
 8008a3e:	d101      	bne.n	8008a44 <find_volume+0x184>
 8008a40:	2301      	movs	r3, #1
 8008a42:	e17e      	b.n	8008d42 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008a44:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d901      	bls.n	8008a50 <find_volume+0x190>
 8008a4c:	230d      	movs	r3, #13
 8008a4e:	e178      	b.n	8008d42 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a52:	3330      	adds	r3, #48	@ 0x30
 8008a54:	330b      	adds	r3, #11
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7fe fd18 	bl	800748c <ld_word>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a62:	d001      	beq.n	8008a68 <find_volume+0x1a8>
 8008a64:	230d      	movs	r3, #13
 8008a66:	e16c      	b.n	8008d42 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a6a:	3330      	adds	r3, #48	@ 0x30
 8008a6c:	3316      	adds	r3, #22
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fe fd0c 	bl	800748c <ld_word>
 8008a74:	4603      	mov	r3, r0
 8008a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008a78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d106      	bne.n	8008a8c <find_volume+0x1cc>
 8008a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a80:	3330      	adds	r3, #48	@ 0x30
 8008a82:	3324      	adds	r3, #36	@ 0x24
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7fe fd19 	bl	80074bc <ld_dword>
 8008a8a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8008a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008a90:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a94:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8008a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a9a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a9e:	789b      	ldrb	r3, [r3, #2]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d005      	beq.n	8008ab0 <find_volume+0x1f0>
 8008aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa6:	789b      	ldrb	r3, [r3, #2]
 8008aa8:	2b02      	cmp	r3, #2
 8008aaa:	d001      	beq.n	8008ab0 <find_volume+0x1f0>
 8008aac:	230d      	movs	r3, #13
 8008aae:	e148      	b.n	8008d42 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab2:	789b      	ldrb	r3, [r3, #2]
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ab8:	fb02 f303 	mul.w	r3, r2, r3
 8008abc:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008acc:	895b      	ldrh	r3, [r3, #10]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d008      	beq.n	8008ae4 <find_volume+0x224>
 8008ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad4:	895b      	ldrh	r3, [r3, #10]
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ada:	895b      	ldrh	r3, [r3, #10]
 8008adc:	3b01      	subs	r3, #1
 8008ade:	4013      	ands	r3, r2
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d001      	beq.n	8008ae8 <find_volume+0x228>
 8008ae4:	230d      	movs	r3, #13
 8008ae6:	e12c      	b.n	8008d42 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aea:	3330      	adds	r3, #48	@ 0x30
 8008aec:	3311      	adds	r3, #17
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7fe fccc 	bl	800748c <ld_word>
 8008af4:	4603      	mov	r3, r0
 8008af6:	461a      	mov	r2, r3
 8008af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008afa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008afe:	891b      	ldrh	r3, [r3, #8]
 8008b00:	f003 030f 	and.w	r3, r3, #15
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d001      	beq.n	8008b0e <find_volume+0x24e>
 8008b0a:	230d      	movs	r3, #13
 8008b0c:	e119      	b.n	8008d42 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b10:	3330      	adds	r3, #48	@ 0x30
 8008b12:	3313      	adds	r3, #19
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7fe fcb9 	bl	800748c <ld_word>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008b1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d106      	bne.n	8008b32 <find_volume+0x272>
 8008b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b26:	3330      	adds	r3, #48	@ 0x30
 8008b28:	3320      	adds	r3, #32
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7fe fcc6 	bl	80074bc <ld_dword>
 8008b30:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b34:	3330      	adds	r3, #48	@ 0x30
 8008b36:	330e      	adds	r3, #14
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7fe fca7 	bl	800748c <ld_word>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008b42:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d101      	bne.n	8008b4c <find_volume+0x28c>
 8008b48:	230d      	movs	r3, #13
 8008b4a:	e0fa      	b.n	8008d42 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008b4c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008b4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b50:	4413      	add	r3, r2
 8008b52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008b54:	8912      	ldrh	r2, [r2, #8]
 8008b56:	0912      	lsrs	r2, r2, #4
 8008b58:	b292      	uxth	r2, r2
 8008b5a:	4413      	add	r3, r2
 8008b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008b5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d204      	bcs.n	8008b70 <find_volume+0x2b0>
 8008b66:	230d      	movs	r3, #13
 8008b68:	e0eb      	b.n	8008d42 <find_volume+0x482>
 8008b6a:	bf00      	nop
 8008b6c:	200036c0 	.word	0x200036c0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008b70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008b78:	8952      	ldrh	r2, [r2, #10]
 8008b7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b7e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d101      	bne.n	8008b8a <find_volume+0x2ca>
 8008b86:	230d      	movs	r3, #13
 8008b88:	e0db      	b.n	8008d42 <find_volume+0x482>
		fmt = FS_FAT32;
 8008b8a:	2303      	movs	r3, #3
 8008b8c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b92:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d802      	bhi.n	8008ba0 <find_volume+0x2e0>
 8008b9a:	2302      	movs	r3, #2
 8008b9c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d802      	bhi.n	8008bb0 <find_volume+0x2f0>
 8008baa:	2301      	movs	r3, #1
 8008bac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb2:	1c9a      	adds	r2, r3, #2
 8008bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008bbc:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008bbe:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008bc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bc2:	441a      	add	r2, r3
 8008bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008bc8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bcc:	441a      	add	r2, r3
 8008bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd0:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8008bd2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008bd6:	2b03      	cmp	r3, #3
 8008bd8:	d11e      	bne.n	8008c18 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bdc:	3330      	adds	r3, #48	@ 0x30
 8008bde:	332a      	adds	r3, #42	@ 0x2a
 8008be0:	4618      	mov	r0, r3
 8008be2:	f7fe fc53 	bl	800748c <ld_word>
 8008be6:	4603      	mov	r3, r0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d001      	beq.n	8008bf0 <find_volume+0x330>
 8008bec:	230d      	movs	r3, #13
 8008bee:	e0a8      	b.n	8008d42 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bf2:	891b      	ldrh	r3, [r3, #8]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d001      	beq.n	8008bfc <find_volume+0x33c>
 8008bf8:	230d      	movs	r3, #13
 8008bfa:	e0a2      	b.n	8008d42 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bfe:	3330      	adds	r3, #48	@ 0x30
 8008c00:	332c      	adds	r3, #44	@ 0x2c
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7fe fc5a 	bl	80074bc <ld_dword>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c0c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c10:	695b      	ldr	r3, [r3, #20]
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c16:	e01f      	b.n	8008c58 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c1a:	891b      	ldrh	r3, [r3, #8]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d101      	bne.n	8008c24 <find_volume+0x364>
 8008c20:	230d      	movs	r3, #13
 8008c22:	e08e      	b.n	8008d42 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c26:	6a1a      	ldr	r2, [r3, #32]
 8008c28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c2a:	441a      	add	r2, r3
 8008c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c2e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008c30:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008c34:	2b02      	cmp	r3, #2
 8008c36:	d103      	bne.n	8008c40 <find_volume+0x380>
 8008c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c3a:	695b      	ldr	r3, [r3, #20]
 8008c3c:	005b      	lsls	r3, r3, #1
 8008c3e:	e00a      	b.n	8008c56 <find_volume+0x396>
 8008c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c42:	695a      	ldr	r2, [r3, #20]
 8008c44:	4613      	mov	r3, r2
 8008c46:	005b      	lsls	r3, r3, #1
 8008c48:	4413      	add	r3, r2
 8008c4a:	085a      	lsrs	r2, r3, #1
 8008c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c4e:	695b      	ldr	r3, [r3, #20]
 8008c50:	f003 0301 	and.w	r3, r3, #1
 8008c54:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008c56:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c5a:	699a      	ldr	r2, [r3, #24]
 8008c5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c5e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8008c62:	0a5b      	lsrs	r3, r3, #9
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d201      	bcs.n	8008c6c <find_volume+0x3ac>
 8008c68:	230d      	movs	r3, #13
 8008c6a:	e06a      	b.n	8008d42 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c72:	611a      	str	r2, [r3, #16]
 8008c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c76:	691a      	ldr	r2, [r3, #16]
 8008c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c7a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c7e:	2280      	movs	r2, #128	@ 0x80
 8008c80:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008c82:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008c86:	2b03      	cmp	r3, #3
 8008c88:	d149      	bne.n	8008d1e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c8c:	3330      	adds	r3, #48	@ 0x30
 8008c8e:	3330      	adds	r3, #48	@ 0x30
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7fe fbfb 	bl	800748c <ld_word>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d140      	bne.n	8008d1e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008c9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008ca4:	f7fe fea2 	bl	80079ec <move_window>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d137      	bne.n	8008d1e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8008cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb6:	3330      	adds	r3, #48	@ 0x30
 8008cb8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7fe fbe5 	bl	800748c <ld_word>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d127      	bne.n	8008d1e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd0:	3330      	adds	r3, #48	@ 0x30
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7fe fbf2 	bl	80074bc <ld_dword>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	4a1c      	ldr	r2, [pc, #112]	@ (8008d4c <find_volume+0x48c>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d11e      	bne.n	8008d1e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce2:	3330      	adds	r3, #48	@ 0x30
 8008ce4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f7fe fbe7 	bl	80074bc <ld_dword>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	4a17      	ldr	r2, [pc, #92]	@ (8008d50 <find_volume+0x490>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d113      	bne.n	8008d1e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cf8:	3330      	adds	r3, #48	@ 0x30
 8008cfa:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7fe fbdc 	bl	80074bc <ld_dword>
 8008d04:	4602      	mov	r2, r0
 8008d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d08:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d0c:	3330      	adds	r3, #48	@ 0x30
 8008d0e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7fe fbd2 	bl	80074bc <ld_dword>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d1c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d20:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008d24:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008d26:	4b0b      	ldr	r3, [pc, #44]	@ (8008d54 <find_volume+0x494>)
 8008d28:	881b      	ldrh	r3, [r3, #0]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	b29a      	uxth	r2, r3
 8008d2e:	4b09      	ldr	r3, [pc, #36]	@ (8008d54 <find_volume+0x494>)
 8008d30:	801a      	strh	r2, [r3, #0]
 8008d32:	4b08      	ldr	r3, [pc, #32]	@ (8008d54 <find_volume+0x494>)
 8008d34:	881a      	ldrh	r2, [r3, #0]
 8008d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d38:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008d3a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008d3c:	f7fe fdee 	bl	800791c <clear_lock>
#endif
	return FR_OK;
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3758      	adds	r7, #88	@ 0x58
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	41615252 	.word	0x41615252
 8008d50:	61417272 	.word	0x61417272
 8008d54:	200036c4 	.word	0x200036c4

08008d58 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008d62:	2309      	movs	r3, #9
 8008d64:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d01c      	beq.n	8008da6 <validate+0x4e>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d018      	beq.n	8008da6 <validate+0x4e>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d013      	beq.n	8008da6 <validate+0x4e>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	889a      	ldrh	r2, [r3, #4]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	88db      	ldrh	r3, [r3, #6]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d10c      	bne.n	8008da6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	785b      	ldrb	r3, [r3, #1]
 8008d92:	4618      	mov	r0, r3
 8008d94:	f7fe fabe 	bl	8007314 <disk_status>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	f003 0301 	and.w	r3, r3, #1
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d101      	bne.n	8008da6 <validate+0x4e>
			res = FR_OK;
 8008da2:	2300      	movs	r3, #0
 8008da4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008da6:	7bfb      	ldrb	r3, [r7, #15]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d102      	bne.n	8008db2 <validate+0x5a>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	e000      	b.n	8008db4 <validate+0x5c>
 8008db2:	2300      	movs	r3, #0
 8008db4:	683a      	ldr	r2, [r7, #0]
 8008db6:	6013      	str	r3, [r2, #0]
	return res;
 8008db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
	...

08008dc4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b088      	sub	sp, #32
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	4613      	mov	r3, r2
 8008dd0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008dd6:	f107 0310 	add.w	r3, r7, #16
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7ff fcd5 	bl	800878a <get_ldnumber>
 8008de0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008de2:	69fb      	ldr	r3, [r7, #28]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	da01      	bge.n	8008dec <f_mount+0x28>
 8008de8:	230b      	movs	r3, #11
 8008dea:	e02b      	b.n	8008e44 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008dec:	4a17      	ldr	r2, [pc, #92]	@ (8008e4c <f_mount+0x88>)
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008df4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008df6:	69bb      	ldr	r3, [r7, #24]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d005      	beq.n	8008e08 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008dfc:	69b8      	ldr	r0, [r7, #24]
 8008dfe:	f7fe fd8d 	bl	800791c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	2200      	movs	r2, #0
 8008e06:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d002      	beq.n	8008e14 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2200      	movs	r2, #0
 8008e12:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	490d      	ldr	r1, [pc, #52]	@ (8008e4c <f_mount+0x88>)
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d002      	beq.n	8008e2a <f_mount+0x66>
 8008e24:	79fb      	ldrb	r3, [r7, #7]
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d001      	beq.n	8008e2e <f_mount+0x6a>
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	e00a      	b.n	8008e44 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008e2e:	f107 010c 	add.w	r1, r7, #12
 8008e32:	f107 0308 	add.w	r3, r7, #8
 8008e36:	2200      	movs	r2, #0
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f7ff fd41 	bl	80088c0 <find_volume>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3720      	adds	r7, #32
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	200036c0 	.word	0x200036c0

08008e50 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b098      	sub	sp, #96	@ 0x60
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d101      	bne.n	8008e68 <f_open+0x18>
 8008e64:	2309      	movs	r3, #9
 8008e66:	e1a9      	b.n	80091bc <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008e68:	79fb      	ldrb	r3, [r7, #7]
 8008e6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e6e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008e70:	79fa      	ldrb	r2, [r7, #7]
 8008e72:	f107 0110 	add.w	r1, r7, #16
 8008e76:	f107 0308 	add.w	r3, r7, #8
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7ff fd20 	bl	80088c0 <find_volume>
 8008e80:	4603      	mov	r3, r0
 8008e82:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8008e86:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	f040 818d 	bne.w	80091aa <f_open+0x35a>
		dj.obj.fs = fs;
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008e94:	68ba      	ldr	r2, [r7, #8]
 8008e96:	f107 0314 	add.w	r3, r7, #20
 8008e9a:	4611      	mov	r1, r2
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f7ff fc03 	bl	80086a8 <follow_path>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008ea8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d118      	bne.n	8008ee2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008eb0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008eb4:	b25b      	sxtb	r3, r3
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	da03      	bge.n	8008ec2 <f_open+0x72>
				res = FR_INVALID_NAME;
 8008eba:	2306      	movs	r3, #6
 8008ebc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008ec0:	e00f      	b.n	8008ee2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008ec2:	79fb      	ldrb	r3, [r7, #7]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	bf8c      	ite	hi
 8008ec8:	2301      	movhi	r3, #1
 8008eca:	2300      	movls	r3, #0
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	461a      	mov	r2, r3
 8008ed0:	f107 0314 	add.w	r3, r7, #20
 8008ed4:	4611      	mov	r1, r2
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7fe fbd8 	bl	800768c <chk_lock>
 8008edc:	4603      	mov	r3, r0
 8008ede:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008ee2:	79fb      	ldrb	r3, [r7, #7]
 8008ee4:	f003 031c 	and.w	r3, r3, #28
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d07f      	beq.n	8008fec <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8008eec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d017      	beq.n	8008f24 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008ef4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008ef8:	2b04      	cmp	r3, #4
 8008efa:	d10e      	bne.n	8008f1a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008efc:	f7fe fc22 	bl	8007744 <enq_lock>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d006      	beq.n	8008f14 <f_open+0xc4>
 8008f06:	f107 0314 	add.w	r3, r7, #20
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7ff fb06 	bl	800851c <dir_register>
 8008f10:	4603      	mov	r3, r0
 8008f12:	e000      	b.n	8008f16 <f_open+0xc6>
 8008f14:	2312      	movs	r3, #18
 8008f16:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008f1a:	79fb      	ldrb	r3, [r7, #7]
 8008f1c:	f043 0308 	orr.w	r3, r3, #8
 8008f20:	71fb      	strb	r3, [r7, #7]
 8008f22:	e010      	b.n	8008f46 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008f24:	7ebb      	ldrb	r3, [r7, #26]
 8008f26:	f003 0311 	and.w	r3, r3, #17
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d003      	beq.n	8008f36 <f_open+0xe6>
					res = FR_DENIED;
 8008f2e:	2307      	movs	r3, #7
 8008f30:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008f34:	e007      	b.n	8008f46 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008f36:	79fb      	ldrb	r3, [r7, #7]
 8008f38:	f003 0304 	and.w	r3, r3, #4
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d002      	beq.n	8008f46 <f_open+0xf6>
 8008f40:	2308      	movs	r3, #8
 8008f42:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008f46:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d168      	bne.n	8009020 <f_open+0x1d0>
 8008f4e:	79fb      	ldrb	r3, [r7, #7]
 8008f50:	f003 0308 	and.w	r3, r3, #8
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d063      	beq.n	8009020 <f_open+0x1d0>
				dw = GET_FATTIME();
 8008f58:	f7fe f9d4 	bl	8007304 <get_fattime>
 8008f5c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f60:	330e      	adds	r3, #14
 8008f62:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008f64:	4618      	mov	r0, r3
 8008f66:	f7fe fae7 	bl	8007538 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f6c:	3316      	adds	r3, #22
 8008f6e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7fe fae1 	bl	8007538 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f78:	330b      	adds	r3, #11
 8008f7a:	2220      	movs	r2, #32
 8008f7c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008f82:	4611      	mov	r1, r2
 8008f84:	4618      	mov	r0, r3
 8008f86:	f7ff fa35 	bl	80083f4 <ld_clust>
 8008f8a:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008f90:	2200      	movs	r2, #0
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7ff fa4d 	bl	8008432 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f9a:	331c      	adds	r3, #28
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7fe faca 	bl	8007538 <st_dword>
					fs->wflag = 1;
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008faa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d037      	beq.n	8009020 <f_open+0x1d0>
						dw = fs->winsect;
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb4:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008fb6:	f107 0314 	add.w	r3, r7, #20
 8008fba:	2200      	movs	r2, #0
 8008fbc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7fe ff60 	bl	8007e84 <remove_chain>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8008fca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d126      	bne.n	8009020 <f_open+0x1d0>
							res = move_window(fs, dw);
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7fe fd08 	bl	80079ec <move_window>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008fe6:	3a01      	subs	r2, #1
 8008fe8:	60da      	str	r2, [r3, #12]
 8008fea:	e019      	b.n	8009020 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008fec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d115      	bne.n	8009020 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008ff4:	7ebb      	ldrb	r3, [r7, #26]
 8008ff6:	f003 0310 	and.w	r3, r3, #16
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d003      	beq.n	8009006 <f_open+0x1b6>
					res = FR_NO_FILE;
 8008ffe:	2304      	movs	r3, #4
 8009000:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009004:	e00c      	b.n	8009020 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009006:	79fb      	ldrb	r3, [r7, #7]
 8009008:	f003 0302 	and.w	r3, r3, #2
 800900c:	2b00      	cmp	r3, #0
 800900e:	d007      	beq.n	8009020 <f_open+0x1d0>
 8009010:	7ebb      	ldrb	r3, [r7, #26]
 8009012:	f003 0301 	and.w	r3, r3, #1
 8009016:	2b00      	cmp	r3, #0
 8009018:	d002      	beq.n	8009020 <f_open+0x1d0>
						res = FR_DENIED;
 800901a:	2307      	movs	r3, #7
 800901c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009020:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009024:	2b00      	cmp	r3, #0
 8009026:	d126      	bne.n	8009076 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009028:	79fb      	ldrb	r3, [r7, #7]
 800902a:	f003 0308 	and.w	r3, r3, #8
 800902e:	2b00      	cmp	r3, #0
 8009030:	d003      	beq.n	800903a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8009032:	79fb      	ldrb	r3, [r7, #7]
 8009034:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009038:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8009042:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009048:	79fb      	ldrb	r3, [r7, #7]
 800904a:	2b01      	cmp	r3, #1
 800904c:	bf8c      	ite	hi
 800904e:	2301      	movhi	r3, #1
 8009050:	2300      	movls	r3, #0
 8009052:	b2db      	uxtb	r3, r3
 8009054:	461a      	mov	r2, r3
 8009056:	f107 0314 	add.w	r3, r7, #20
 800905a:	4611      	mov	r1, r2
 800905c:	4618      	mov	r0, r3
 800905e:	f7fe fb93 	bl	8007788 <inc_lock>
 8009062:	4602      	mov	r2, r0
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	691b      	ldr	r3, [r3, #16]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d102      	bne.n	8009076 <f_open+0x226>
 8009070:	2302      	movs	r3, #2
 8009072:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009076:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800907a:	2b00      	cmp	r3, #0
 800907c:	f040 8095 	bne.w	80091aa <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009084:	4611      	mov	r1, r2
 8009086:	4618      	mov	r0, r3
 8009088:	f7ff f9b4 	bl	80083f4 <ld_clust>
 800908c:	4602      	mov	r2, r0
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009094:	331c      	adds	r3, #28
 8009096:	4618      	mov	r0, r3
 8009098:	f7fe fa10 	bl	80074bc <ld_dword>
 800909c:	4602      	mov	r2, r0
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2200      	movs	r2, #0
 80090a6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80090a8:	693a      	ldr	r2, [r7, #16]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	88da      	ldrh	r2, [r3, #6]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	79fa      	ldrb	r2, [r7, #7]
 80090ba:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2200      	movs	r2, #0
 80090c0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2200      	movs	r2, #0
 80090c6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2200      	movs	r2, #0
 80090cc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	3330      	adds	r3, #48	@ 0x30
 80090d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80090d6:	2100      	movs	r1, #0
 80090d8:	4618      	mov	r0, r3
 80090da:	f7fe fa7a 	bl	80075d2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80090de:	79fb      	ldrb	r3, [r7, #7]
 80090e0:	f003 0320 	and.w	r3, r3, #32
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d060      	beq.n	80091aa <f_open+0x35a>
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d05c      	beq.n	80091aa <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	68da      	ldr	r2, [r3, #12]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	895b      	ldrh	r3, [r3, #10]
 80090fc:	025b      	lsls	r3, r3, #9
 80090fe:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	68db      	ldr	r3, [r3, #12]
 800910a:	657b      	str	r3, [r7, #84]	@ 0x54
 800910c:	e016      	b.n	800913c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009112:	4618      	mov	r0, r3
 8009114:	f7fe fd25 	bl	8007b62 <get_fat>
 8009118:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800911a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800911c:	2b01      	cmp	r3, #1
 800911e:	d802      	bhi.n	8009126 <f_open+0x2d6>
 8009120:	2302      	movs	r3, #2
 8009122:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009126:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800912c:	d102      	bne.n	8009134 <f_open+0x2e4>
 800912e:	2301      	movs	r3, #1
 8009130:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009134:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009136:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	657b      	str	r3, [r7, #84]	@ 0x54
 800913c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009140:	2b00      	cmp	r3, #0
 8009142:	d103      	bne.n	800914c <f_open+0x2fc>
 8009144:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009146:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009148:	429a      	cmp	r2, r3
 800914a:	d8e0      	bhi.n	800910e <f_open+0x2be>
				}
				fp->clust = clst;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009150:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009152:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009156:	2b00      	cmp	r3, #0
 8009158:	d127      	bne.n	80091aa <f_open+0x35a>
 800915a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800915c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009160:	2b00      	cmp	r3, #0
 8009162:	d022      	beq.n	80091aa <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009168:	4618      	mov	r0, r3
 800916a:	f7fe fcdb 	bl	8007b24 <clust2sect>
 800916e:	6478      	str	r0, [r7, #68]	@ 0x44
 8009170:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009172:	2b00      	cmp	r3, #0
 8009174:	d103      	bne.n	800917e <f_open+0x32e>
						res = FR_INT_ERR;
 8009176:	2302      	movs	r3, #2
 8009178:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800917c:	e015      	b.n	80091aa <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800917e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009180:	0a5a      	lsrs	r2, r3, #9
 8009182:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009184:	441a      	add	r2, r3
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	7858      	ldrb	r0, [r3, #1]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	6a1a      	ldr	r2, [r3, #32]
 8009198:	2301      	movs	r3, #1
 800919a:	f7fe f8e2 	bl	8007362 <disk_read>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d002      	beq.n	80091aa <f_open+0x35a>
 80091a4:	2301      	movs	r3, #1
 80091a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80091aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d002      	beq.n	80091b8 <f_open+0x368>
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2200      	movs	r2, #0
 80091b6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80091b8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3760      	adds	r7, #96	@ 0x60
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b08e      	sub	sp, #56	@ 0x38
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	607a      	str	r2, [r7, #4]
 80091d0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	2200      	movs	r2, #0
 80091da:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f107 0214 	add.w	r2, r7, #20
 80091e2:	4611      	mov	r1, r2
 80091e4:	4618      	mov	r0, r3
 80091e6:	f7ff fdb7 	bl	8008d58 <validate>
 80091ea:	4603      	mov	r3, r0
 80091ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80091f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d107      	bne.n	8009208 <f_read+0x44>
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	7d5b      	ldrb	r3, [r3, #21]
 80091fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009200:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009204:	2b00      	cmp	r3, #0
 8009206:	d002      	beq.n	800920e <f_read+0x4a>
 8009208:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800920c:	e115      	b.n	800943a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	7d1b      	ldrb	r3, [r3, #20]
 8009212:	f003 0301 	and.w	r3, r3, #1
 8009216:	2b00      	cmp	r3, #0
 8009218:	d101      	bne.n	800921e <f_read+0x5a>
 800921a:	2307      	movs	r3, #7
 800921c:	e10d      	b.n	800943a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	68da      	ldr	r2, [r3, #12]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	699b      	ldr	r3, [r3, #24]
 8009226:	1ad3      	subs	r3, r2, r3
 8009228:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	6a3b      	ldr	r3, [r7, #32]
 800922e:	429a      	cmp	r2, r3
 8009230:	f240 80fe 	bls.w	8009430 <f_read+0x26c>
 8009234:	6a3b      	ldr	r3, [r7, #32]
 8009236:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009238:	e0fa      	b.n	8009430 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	699b      	ldr	r3, [r3, #24]
 800923e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009242:	2b00      	cmp	r3, #0
 8009244:	f040 80c6 	bne.w	80093d4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	699b      	ldr	r3, [r3, #24]
 800924c:	0a5b      	lsrs	r3, r3, #9
 800924e:	697a      	ldr	r2, [r7, #20]
 8009250:	8952      	ldrh	r2, [r2, #10]
 8009252:	3a01      	subs	r2, #1
 8009254:	4013      	ands	r3, r2
 8009256:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d12f      	bne.n	80092be <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	699b      	ldr	r3, [r3, #24]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d103      	bne.n	800926e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	633b      	str	r3, [r7, #48]	@ 0x30
 800926c:	e013      	b.n	8009296 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009272:	2b00      	cmp	r3, #0
 8009274:	d007      	beq.n	8009286 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	699b      	ldr	r3, [r3, #24]
 800927a:	4619      	mov	r1, r3
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f7fe fefe 	bl	800807e <clmt_clust>
 8009282:	6338      	str	r0, [r7, #48]	@ 0x30
 8009284:	e007      	b.n	8009296 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009286:	68fa      	ldr	r2, [r7, #12]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	69db      	ldr	r3, [r3, #28]
 800928c:	4619      	mov	r1, r3
 800928e:	4610      	mov	r0, r2
 8009290:	f7fe fc67 	bl	8007b62 <get_fat>
 8009294:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009298:	2b01      	cmp	r3, #1
 800929a:	d804      	bhi.n	80092a6 <f_read+0xe2>
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2202      	movs	r2, #2
 80092a0:	755a      	strb	r2, [r3, #21]
 80092a2:	2302      	movs	r3, #2
 80092a4:	e0c9      	b.n	800943a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80092a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ac:	d104      	bne.n	80092b8 <f_read+0xf4>
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2201      	movs	r2, #1
 80092b2:	755a      	strb	r2, [r3, #21]
 80092b4:	2301      	movs	r3, #1
 80092b6:	e0c0      	b.n	800943a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092bc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80092be:	697a      	ldr	r2, [r7, #20]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	69db      	ldr	r3, [r3, #28]
 80092c4:	4619      	mov	r1, r3
 80092c6:	4610      	mov	r0, r2
 80092c8:	f7fe fc2c 	bl	8007b24 <clust2sect>
 80092cc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d104      	bne.n	80092de <f_read+0x11a>
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2202      	movs	r2, #2
 80092d8:	755a      	strb	r2, [r3, #21]
 80092da:	2302      	movs	r3, #2
 80092dc:	e0ad      	b.n	800943a <f_read+0x276>
			sect += csect;
 80092de:	69ba      	ldr	r2, [r7, #24]
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	4413      	add	r3, r2
 80092e4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	0a5b      	lsrs	r3, r3, #9
 80092ea:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80092ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d039      	beq.n	8009366 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80092f2:	69fa      	ldr	r2, [r7, #28]
 80092f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092f6:	4413      	add	r3, r2
 80092f8:	697a      	ldr	r2, [r7, #20]
 80092fa:	8952      	ldrh	r2, [r2, #10]
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d905      	bls.n	800930c <f_read+0x148>
					cc = fs->csize - csect;
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	895b      	ldrh	r3, [r3, #10]
 8009304:	461a      	mov	r2, r3
 8009306:	69fb      	ldr	r3, [r7, #28]
 8009308:	1ad3      	subs	r3, r2, r3
 800930a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	7858      	ldrb	r0, [r3, #1]
 8009310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009312:	69ba      	ldr	r2, [r7, #24]
 8009314:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009316:	f7fe f824 	bl	8007362 <disk_read>
 800931a:	4603      	mov	r3, r0
 800931c:	2b00      	cmp	r3, #0
 800931e:	d004      	beq.n	800932a <f_read+0x166>
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2201      	movs	r2, #1
 8009324:	755a      	strb	r2, [r3, #21]
 8009326:	2301      	movs	r3, #1
 8009328:	e087      	b.n	800943a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	7d1b      	ldrb	r3, [r3, #20]
 800932e:	b25b      	sxtb	r3, r3
 8009330:	2b00      	cmp	r3, #0
 8009332:	da14      	bge.n	800935e <f_read+0x19a>
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	6a1a      	ldr	r2, [r3, #32]
 8009338:	69bb      	ldr	r3, [r7, #24]
 800933a:	1ad3      	subs	r3, r2, r3
 800933c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800933e:	429a      	cmp	r2, r3
 8009340:	d90d      	bls.n	800935e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	6a1a      	ldr	r2, [r3, #32]
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	1ad3      	subs	r3, r2, r3
 800934a:	025b      	lsls	r3, r3, #9
 800934c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800934e:	18d0      	adds	r0, r2, r3
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	3330      	adds	r3, #48	@ 0x30
 8009354:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009358:	4619      	mov	r1, r3
 800935a:	f7fe f919 	bl	8007590 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800935e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009360:	025b      	lsls	r3, r3, #9
 8009362:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8009364:	e050      	b.n	8009408 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	6a1b      	ldr	r3, [r3, #32]
 800936a:	69ba      	ldr	r2, [r7, #24]
 800936c:	429a      	cmp	r2, r3
 800936e:	d02e      	beq.n	80093ce <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	7d1b      	ldrb	r3, [r3, #20]
 8009374:	b25b      	sxtb	r3, r3
 8009376:	2b00      	cmp	r3, #0
 8009378:	da18      	bge.n	80093ac <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	7858      	ldrb	r0, [r3, #1]
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	6a1a      	ldr	r2, [r3, #32]
 8009388:	2301      	movs	r3, #1
 800938a:	f7fe f819 	bl	80073c0 <disk_write>
 800938e:	4603      	mov	r3, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d004      	beq.n	800939e <f_read+0x1da>
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2201      	movs	r2, #1
 8009398:	755a      	strb	r2, [r3, #21]
 800939a:	2301      	movs	r3, #1
 800939c:	e04d      	b.n	800943a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	7d1b      	ldrb	r3, [r3, #20]
 80093a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093a6:	b2da      	uxtb	r2, r3
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	7858      	ldrb	r0, [r3, #1]
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80093b6:	2301      	movs	r3, #1
 80093b8:	69ba      	ldr	r2, [r7, #24]
 80093ba:	f7fd ffd2 	bl	8007362 <disk_read>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d004      	beq.n	80093ce <f_read+0x20a>
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2201      	movs	r2, #1
 80093c8:	755a      	strb	r2, [r3, #21]
 80093ca:	2301      	movs	r3, #1
 80093cc:	e035      	b.n	800943a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	69ba      	ldr	r2, [r7, #24]
 80093d2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	699b      	ldr	r3, [r3, #24]
 80093d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093dc:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80093e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80093e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d901      	bls.n	80093ee <f_read+0x22a>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	699b      	ldr	r3, [r3, #24]
 80093f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093fc:	4413      	add	r3, r2
 80093fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009400:	4619      	mov	r1, r3
 8009402:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009404:	f7fe f8c4 	bl	8007590 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800940a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800940c:	4413      	add	r3, r2
 800940e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	699a      	ldr	r2, [r3, #24]
 8009414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009416:	441a      	add	r2, r3
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	619a      	str	r2, [r3, #24]
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009422:	441a      	add	r2, r3
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	601a      	str	r2, [r3, #0]
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800942c:	1ad3      	subs	r3, r2, r3
 800942e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2b00      	cmp	r3, #0
 8009434:	f47f af01 	bne.w	800923a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009438:	2300      	movs	r3, #0
}
 800943a:	4618      	mov	r0, r3
 800943c:	3738      	adds	r7, #56	@ 0x38
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009442:	b580      	push	{r7, lr}
 8009444:	b08c      	sub	sp, #48	@ 0x30
 8009446:	af00      	add	r7, sp, #0
 8009448:	60f8      	str	r0, [r7, #12]
 800944a:	60b9      	str	r1, [r7, #8]
 800944c:	607a      	str	r2, [r7, #4]
 800944e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	2200      	movs	r2, #0
 8009458:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f107 0210 	add.w	r2, r7, #16
 8009460:	4611      	mov	r1, r2
 8009462:	4618      	mov	r0, r3
 8009464:	f7ff fc78 	bl	8008d58 <validate>
 8009468:	4603      	mov	r3, r0
 800946a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800946e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009472:	2b00      	cmp	r3, #0
 8009474:	d107      	bne.n	8009486 <f_write+0x44>
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	7d5b      	ldrb	r3, [r3, #21]
 800947a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800947e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009482:	2b00      	cmp	r3, #0
 8009484:	d002      	beq.n	800948c <f_write+0x4a>
 8009486:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800948a:	e14b      	b.n	8009724 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	7d1b      	ldrb	r3, [r3, #20]
 8009490:	f003 0302 	and.w	r3, r3, #2
 8009494:	2b00      	cmp	r3, #0
 8009496:	d101      	bne.n	800949c <f_write+0x5a>
 8009498:	2307      	movs	r3, #7
 800949a:	e143      	b.n	8009724 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	699a      	ldr	r2, [r3, #24]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	441a      	add	r2, r3
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	699b      	ldr	r3, [r3, #24]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	f080 812d 	bcs.w	8009708 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	699b      	ldr	r3, [r3, #24]
 80094b2:	43db      	mvns	r3, r3
 80094b4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80094b6:	e127      	b.n	8009708 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	699b      	ldr	r3, [r3, #24]
 80094bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	f040 80e3 	bne.w	800968c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	699b      	ldr	r3, [r3, #24]
 80094ca:	0a5b      	lsrs	r3, r3, #9
 80094cc:	693a      	ldr	r2, [r7, #16]
 80094ce:	8952      	ldrh	r2, [r2, #10]
 80094d0:	3a01      	subs	r2, #1
 80094d2:	4013      	ands	r3, r2
 80094d4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d143      	bne.n	8009564 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	699b      	ldr	r3, [r3, #24]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d10c      	bne.n	80094fe <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80094ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d11a      	bne.n	8009526 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2100      	movs	r1, #0
 80094f4:	4618      	mov	r0, r3
 80094f6:	f7fe fd2a 	bl	8007f4e <create_chain>
 80094fa:	62b8      	str	r0, [r7, #40]	@ 0x28
 80094fc:	e013      	b.n	8009526 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009502:	2b00      	cmp	r3, #0
 8009504:	d007      	beq.n	8009516 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	699b      	ldr	r3, [r3, #24]
 800950a:	4619      	mov	r1, r3
 800950c:	68f8      	ldr	r0, [r7, #12]
 800950e:	f7fe fdb6 	bl	800807e <clmt_clust>
 8009512:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009514:	e007      	b.n	8009526 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009516:	68fa      	ldr	r2, [r7, #12]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	69db      	ldr	r3, [r3, #28]
 800951c:	4619      	mov	r1, r3
 800951e:	4610      	mov	r0, r2
 8009520:	f7fe fd15 	bl	8007f4e <create_chain>
 8009524:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009528:	2b00      	cmp	r3, #0
 800952a:	f000 80f2 	beq.w	8009712 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800952e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009530:	2b01      	cmp	r3, #1
 8009532:	d104      	bne.n	800953e <f_write+0xfc>
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2202      	movs	r2, #2
 8009538:	755a      	strb	r2, [r3, #21]
 800953a:	2302      	movs	r3, #2
 800953c:	e0f2      	b.n	8009724 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800953e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009544:	d104      	bne.n	8009550 <f_write+0x10e>
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2201      	movs	r2, #1
 800954a:	755a      	strb	r2, [r3, #21]
 800954c:	2301      	movs	r3, #1
 800954e:	e0e9      	b.n	8009724 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009554:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d102      	bne.n	8009564 <f_write+0x122>
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009562:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	7d1b      	ldrb	r3, [r3, #20]
 8009568:	b25b      	sxtb	r3, r3
 800956a:	2b00      	cmp	r3, #0
 800956c:	da18      	bge.n	80095a0 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	7858      	ldrb	r0, [r3, #1]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	6a1a      	ldr	r2, [r3, #32]
 800957c:	2301      	movs	r3, #1
 800957e:	f7fd ff1f 	bl	80073c0 <disk_write>
 8009582:	4603      	mov	r3, r0
 8009584:	2b00      	cmp	r3, #0
 8009586:	d004      	beq.n	8009592 <f_write+0x150>
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2201      	movs	r2, #1
 800958c:	755a      	strb	r2, [r3, #21]
 800958e:	2301      	movs	r3, #1
 8009590:	e0c8      	b.n	8009724 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	7d1b      	ldrb	r3, [r3, #20]
 8009596:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800959a:	b2da      	uxtb	r2, r3
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80095a0:	693a      	ldr	r2, [r7, #16]
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	69db      	ldr	r3, [r3, #28]
 80095a6:	4619      	mov	r1, r3
 80095a8:	4610      	mov	r0, r2
 80095aa:	f7fe fabb 	bl	8007b24 <clust2sect>
 80095ae:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d104      	bne.n	80095c0 <f_write+0x17e>
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2202      	movs	r2, #2
 80095ba:	755a      	strb	r2, [r3, #21]
 80095bc:	2302      	movs	r3, #2
 80095be:	e0b1      	b.n	8009724 <f_write+0x2e2>
			sect += csect;
 80095c0:	697a      	ldr	r2, [r7, #20]
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	4413      	add	r3, r2
 80095c6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	0a5b      	lsrs	r3, r3, #9
 80095cc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80095ce:	6a3b      	ldr	r3, [r7, #32]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d03c      	beq.n	800964e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80095d4:	69ba      	ldr	r2, [r7, #24]
 80095d6:	6a3b      	ldr	r3, [r7, #32]
 80095d8:	4413      	add	r3, r2
 80095da:	693a      	ldr	r2, [r7, #16]
 80095dc:	8952      	ldrh	r2, [r2, #10]
 80095de:	4293      	cmp	r3, r2
 80095e0:	d905      	bls.n	80095ee <f_write+0x1ac>
					cc = fs->csize - csect;
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	895b      	ldrh	r3, [r3, #10]
 80095e6:	461a      	mov	r2, r3
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	1ad3      	subs	r3, r2, r3
 80095ec:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	7858      	ldrb	r0, [r3, #1]
 80095f2:	6a3b      	ldr	r3, [r7, #32]
 80095f4:	697a      	ldr	r2, [r7, #20]
 80095f6:	69f9      	ldr	r1, [r7, #28]
 80095f8:	f7fd fee2 	bl	80073c0 <disk_write>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d004      	beq.n	800960c <f_write+0x1ca>
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2201      	movs	r2, #1
 8009606:	755a      	strb	r2, [r3, #21]
 8009608:	2301      	movs	r3, #1
 800960a:	e08b      	b.n	8009724 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6a1a      	ldr	r2, [r3, #32]
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	1ad3      	subs	r3, r2, r3
 8009614:	6a3a      	ldr	r2, [r7, #32]
 8009616:	429a      	cmp	r2, r3
 8009618:	d915      	bls.n	8009646 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	6a1a      	ldr	r2, [r3, #32]
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	1ad3      	subs	r3, r2, r3
 8009628:	025b      	lsls	r3, r3, #9
 800962a:	69fa      	ldr	r2, [r7, #28]
 800962c:	4413      	add	r3, r2
 800962e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009632:	4619      	mov	r1, r3
 8009634:	f7fd ffac 	bl	8007590 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	7d1b      	ldrb	r3, [r3, #20]
 800963c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009640:	b2da      	uxtb	r2, r3
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009646:	6a3b      	ldr	r3, [r7, #32]
 8009648:	025b      	lsls	r3, r3, #9
 800964a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800964c:	e03f      	b.n	80096ce <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	6a1b      	ldr	r3, [r3, #32]
 8009652:	697a      	ldr	r2, [r7, #20]
 8009654:	429a      	cmp	r2, r3
 8009656:	d016      	beq.n	8009686 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	699a      	ldr	r2, [r3, #24]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009660:	429a      	cmp	r2, r3
 8009662:	d210      	bcs.n	8009686 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	7858      	ldrb	r0, [r3, #1]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800966e:	2301      	movs	r3, #1
 8009670:	697a      	ldr	r2, [r7, #20]
 8009672:	f7fd fe76 	bl	8007362 <disk_read>
 8009676:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009678:	2b00      	cmp	r3, #0
 800967a:	d004      	beq.n	8009686 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2201      	movs	r2, #1
 8009680:	755a      	strb	r2, [r3, #21]
 8009682:	2301      	movs	r3, #1
 8009684:	e04e      	b.n	8009724 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	697a      	ldr	r2, [r7, #20]
 800968a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	699b      	ldr	r3, [r3, #24]
 8009690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009694:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8009698:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800969a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	429a      	cmp	r2, r3
 80096a0:	d901      	bls.n	80096a6 <f_write+0x264>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	699b      	ldr	r3, [r3, #24]
 80096b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096b4:	4413      	add	r3, r2
 80096b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096b8:	69f9      	ldr	r1, [r7, #28]
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7fd ff68 	bl	8007590 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	7d1b      	ldrb	r3, [r3, #20]
 80096c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80096c8:	b2da      	uxtb	r2, r3
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80096ce:	69fa      	ldr	r2, [r7, #28]
 80096d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d2:	4413      	add	r3, r2
 80096d4:	61fb      	str	r3, [r7, #28]
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	699a      	ldr	r2, [r3, #24]
 80096da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096dc:	441a      	add	r2, r3
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	619a      	str	r2, [r3, #24]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	68da      	ldr	r2, [r3, #12]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	699b      	ldr	r3, [r3, #24]
 80096ea:	429a      	cmp	r2, r3
 80096ec:	bf38      	it	cc
 80096ee:	461a      	movcc	r2, r3
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	60da      	str	r2, [r3, #12]
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096fa:	441a      	add	r2, r3
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	601a      	str	r2, [r3, #0]
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009704:	1ad3      	subs	r3, r2, r3
 8009706:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2b00      	cmp	r3, #0
 800970c:	f47f aed4 	bne.w	80094b8 <f_write+0x76>
 8009710:	e000      	b.n	8009714 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009712:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	7d1b      	ldrb	r3, [r3, #20]
 8009718:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800971c:	b2da      	uxtb	r2, r3
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009722:	2300      	movs	r3, #0
}
 8009724:	4618      	mov	r0, r3
 8009726:	3730      	adds	r7, #48	@ 0x30
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b086      	sub	sp, #24
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f107 0208 	add.w	r2, r7, #8
 800973a:	4611      	mov	r1, r2
 800973c:	4618      	mov	r0, r3
 800973e:	f7ff fb0b 	bl	8008d58 <validate>
 8009742:	4603      	mov	r3, r0
 8009744:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009746:	7dfb      	ldrb	r3, [r7, #23]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d168      	bne.n	800981e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	7d1b      	ldrb	r3, [r3, #20]
 8009750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009754:	2b00      	cmp	r3, #0
 8009756:	d062      	beq.n	800981e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	7d1b      	ldrb	r3, [r3, #20]
 800975c:	b25b      	sxtb	r3, r3
 800975e:	2b00      	cmp	r3, #0
 8009760:	da15      	bge.n	800978e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	7858      	ldrb	r0, [r3, #1]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6a1a      	ldr	r2, [r3, #32]
 8009770:	2301      	movs	r3, #1
 8009772:	f7fd fe25 	bl	80073c0 <disk_write>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d001      	beq.n	8009780 <f_sync+0x54>
 800977c:	2301      	movs	r3, #1
 800977e:	e04f      	b.n	8009820 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	7d1b      	ldrb	r3, [r3, #20]
 8009784:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009788:	b2da      	uxtb	r2, r3
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800978e:	f7fd fdb9 	bl	8007304 <get_fattime>
 8009792:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009794:	68ba      	ldr	r2, [r7, #8]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800979a:	4619      	mov	r1, r3
 800979c:	4610      	mov	r0, r2
 800979e:	f7fe f925 	bl	80079ec <move_window>
 80097a2:	4603      	mov	r3, r0
 80097a4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80097a6:	7dfb      	ldrb	r3, [r7, #23]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d138      	bne.n	800981e <f_sync+0xf2>
					dir = fp->dir_ptr;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097b0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	330b      	adds	r3, #11
 80097b6:	781a      	ldrb	r2, [r3, #0]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	330b      	adds	r3, #11
 80097bc:	f042 0220 	orr.w	r2, r2, #32
 80097c0:	b2d2      	uxtb	r2, r2
 80097c2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6818      	ldr	r0, [r3, #0]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	461a      	mov	r2, r3
 80097ce:	68f9      	ldr	r1, [r7, #12]
 80097d0:	f7fe fe2f 	bl	8008432 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f103 021c 	add.w	r2, r3, #28
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	68db      	ldr	r3, [r3, #12]
 80097de:	4619      	mov	r1, r3
 80097e0:	4610      	mov	r0, r2
 80097e2:	f7fd fea9 	bl	8007538 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	3316      	adds	r3, #22
 80097ea:	6939      	ldr	r1, [r7, #16]
 80097ec:	4618      	mov	r0, r3
 80097ee:	f7fd fea3 	bl	8007538 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	3312      	adds	r3, #18
 80097f6:	2100      	movs	r1, #0
 80097f8:	4618      	mov	r0, r3
 80097fa:	f7fd fe82 	bl	8007502 <st_word>
					fs->wflag = 1;
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	2201      	movs	r2, #1
 8009802:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	4618      	mov	r0, r3
 8009808:	f7fe f91e 	bl	8007a48 <sync_fs>
 800980c:	4603      	mov	r3, r0
 800980e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	7d1b      	ldrb	r3, [r3, #20]
 8009814:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009818:	b2da      	uxtb	r2, r3
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800981e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009820:	4618      	mov	r0, r3
 8009822:	3718      	adds	r7, #24
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f7ff ff7b 	bl	800972c <f_sync>
 8009836:	4603      	mov	r3, r0
 8009838:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800983a:	7bfb      	ldrb	r3, [r7, #15]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d118      	bne.n	8009872 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f107 0208 	add.w	r2, r7, #8
 8009846:	4611      	mov	r1, r2
 8009848:	4618      	mov	r0, r3
 800984a:	f7ff fa85 	bl	8008d58 <validate>
 800984e:	4603      	mov	r3, r0
 8009850:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009852:	7bfb      	ldrb	r3, [r7, #15]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d10c      	bne.n	8009872 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	691b      	ldr	r3, [r3, #16]
 800985c:	4618      	mov	r0, r3
 800985e:	f7fe f821 	bl	80078a4 <dec_lock>
 8009862:	4603      	mov	r3, r0
 8009864:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009866:	7bfb      	ldrb	r3, [r7, #15]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d102      	bne.n	8009872 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009872:	7bfb      	ldrb	r3, [r7, #15]
}
 8009874:	4618      	mov	r0, r3
 8009876:	3710      	adds	r7, #16
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800987c:	b480      	push	{r7}
 800987e:	b087      	sub	sp, #28
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	4613      	mov	r3, r2
 8009888:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800988a:	2301      	movs	r3, #1
 800988c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800988e:	2300      	movs	r3, #0
 8009890:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009892:	4b1f      	ldr	r3, [pc, #124]	@ (8009910 <FATFS_LinkDriverEx+0x94>)
 8009894:	7a5b      	ldrb	r3, [r3, #9]
 8009896:	b2db      	uxtb	r3, r3
 8009898:	2b00      	cmp	r3, #0
 800989a:	d131      	bne.n	8009900 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800989c:	4b1c      	ldr	r3, [pc, #112]	@ (8009910 <FATFS_LinkDriverEx+0x94>)
 800989e:	7a5b      	ldrb	r3, [r3, #9]
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	461a      	mov	r2, r3
 80098a4:	4b1a      	ldr	r3, [pc, #104]	@ (8009910 <FATFS_LinkDriverEx+0x94>)
 80098a6:	2100      	movs	r1, #0
 80098a8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80098aa:	4b19      	ldr	r3, [pc, #100]	@ (8009910 <FATFS_LinkDriverEx+0x94>)
 80098ac:	7a5b      	ldrb	r3, [r3, #9]
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	4a17      	ldr	r2, [pc, #92]	@ (8009910 <FATFS_LinkDriverEx+0x94>)
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	4413      	add	r3, r2
 80098b6:	68fa      	ldr	r2, [r7, #12]
 80098b8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80098ba:	4b15      	ldr	r3, [pc, #84]	@ (8009910 <FATFS_LinkDriverEx+0x94>)
 80098bc:	7a5b      	ldrb	r3, [r3, #9]
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	461a      	mov	r2, r3
 80098c2:	4b13      	ldr	r3, [pc, #76]	@ (8009910 <FATFS_LinkDriverEx+0x94>)
 80098c4:	4413      	add	r3, r2
 80098c6:	79fa      	ldrb	r2, [r7, #7]
 80098c8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80098ca:	4b11      	ldr	r3, [pc, #68]	@ (8009910 <FATFS_LinkDriverEx+0x94>)
 80098cc:	7a5b      	ldrb	r3, [r3, #9]
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	1c5a      	adds	r2, r3, #1
 80098d2:	b2d1      	uxtb	r1, r2
 80098d4:	4a0e      	ldr	r2, [pc, #56]	@ (8009910 <FATFS_LinkDriverEx+0x94>)
 80098d6:	7251      	strb	r1, [r2, #9]
 80098d8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80098da:	7dbb      	ldrb	r3, [r7, #22]
 80098dc:	3330      	adds	r3, #48	@ 0x30
 80098de:	b2da      	uxtb	r2, r3
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	3301      	adds	r3, #1
 80098e8:	223a      	movs	r2, #58	@ 0x3a
 80098ea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	3302      	adds	r3, #2
 80098f0:	222f      	movs	r2, #47	@ 0x2f
 80098f2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	3303      	adds	r3, #3
 80098f8:	2200      	movs	r2, #0
 80098fa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80098fc:	2300      	movs	r3, #0
 80098fe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009900:	7dfb      	ldrb	r3, [r7, #23]
}
 8009902:	4618      	mov	r0, r3
 8009904:	371c      	adds	r7, #28
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr
 800990e:	bf00      	nop
 8009910:	200036e8 	.word	0x200036e8

08009914 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800991e:	2200      	movs	r2, #0
 8009920:	6839      	ldr	r1, [r7, #0]
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f7ff ffaa 	bl	800987c <FATFS_LinkDriverEx>
 8009928:	4603      	mov	r3, r0
}
 800992a:	4618      	mov	r0, r3
 800992c:	3708      	adds	r7, #8
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}

08009932 <sulp>:
 8009932:	b570      	push	{r4, r5, r6, lr}
 8009934:	4604      	mov	r4, r0
 8009936:	460d      	mov	r5, r1
 8009938:	ec45 4b10 	vmov	d0, r4, r5
 800993c:	4616      	mov	r6, r2
 800993e:	f003 fd2b 	bl	800d398 <__ulp>
 8009942:	ec51 0b10 	vmov	r0, r1, d0
 8009946:	b17e      	cbz	r6, 8009968 <sulp+0x36>
 8009948:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800994c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009950:	2b00      	cmp	r3, #0
 8009952:	dd09      	ble.n	8009968 <sulp+0x36>
 8009954:	051b      	lsls	r3, r3, #20
 8009956:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800995a:	2400      	movs	r4, #0
 800995c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009960:	4622      	mov	r2, r4
 8009962:	462b      	mov	r3, r5
 8009964:	f7f6 fe68 	bl	8000638 <__aeabi_dmul>
 8009968:	ec41 0b10 	vmov	d0, r0, r1
 800996c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009970 <_strtod_l>:
 8009970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009974:	b09f      	sub	sp, #124	@ 0x7c
 8009976:	460c      	mov	r4, r1
 8009978:	9217      	str	r2, [sp, #92]	@ 0x5c
 800997a:	2200      	movs	r2, #0
 800997c:	921a      	str	r2, [sp, #104]	@ 0x68
 800997e:	9005      	str	r0, [sp, #20]
 8009980:	f04f 0a00 	mov.w	sl, #0
 8009984:	f04f 0b00 	mov.w	fp, #0
 8009988:	460a      	mov	r2, r1
 800998a:	9219      	str	r2, [sp, #100]	@ 0x64
 800998c:	7811      	ldrb	r1, [r2, #0]
 800998e:	292b      	cmp	r1, #43	@ 0x2b
 8009990:	d04a      	beq.n	8009a28 <_strtod_l+0xb8>
 8009992:	d838      	bhi.n	8009a06 <_strtod_l+0x96>
 8009994:	290d      	cmp	r1, #13
 8009996:	d832      	bhi.n	80099fe <_strtod_l+0x8e>
 8009998:	2908      	cmp	r1, #8
 800999a:	d832      	bhi.n	8009a02 <_strtod_l+0x92>
 800999c:	2900      	cmp	r1, #0
 800999e:	d03b      	beq.n	8009a18 <_strtod_l+0xa8>
 80099a0:	2200      	movs	r2, #0
 80099a2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80099a4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80099a6:	782a      	ldrb	r2, [r5, #0]
 80099a8:	2a30      	cmp	r2, #48	@ 0x30
 80099aa:	f040 80b3 	bne.w	8009b14 <_strtod_l+0x1a4>
 80099ae:	786a      	ldrb	r2, [r5, #1]
 80099b0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80099b4:	2a58      	cmp	r2, #88	@ 0x58
 80099b6:	d16e      	bne.n	8009a96 <_strtod_l+0x126>
 80099b8:	9302      	str	r3, [sp, #8]
 80099ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099bc:	9301      	str	r3, [sp, #4]
 80099be:	ab1a      	add	r3, sp, #104	@ 0x68
 80099c0:	9300      	str	r3, [sp, #0]
 80099c2:	4a8e      	ldr	r2, [pc, #568]	@ (8009bfc <_strtod_l+0x28c>)
 80099c4:	9805      	ldr	r0, [sp, #20]
 80099c6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80099c8:	a919      	add	r1, sp, #100	@ 0x64
 80099ca:	f002 fdd7 	bl	800c57c <__gethex>
 80099ce:	f010 060f 	ands.w	r6, r0, #15
 80099d2:	4604      	mov	r4, r0
 80099d4:	d005      	beq.n	80099e2 <_strtod_l+0x72>
 80099d6:	2e06      	cmp	r6, #6
 80099d8:	d128      	bne.n	8009a2c <_strtod_l+0xbc>
 80099da:	3501      	adds	r5, #1
 80099dc:	2300      	movs	r3, #0
 80099de:	9519      	str	r5, [sp, #100]	@ 0x64
 80099e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80099e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	f040 858e 	bne.w	800a506 <_strtod_l+0xb96>
 80099ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099ec:	b1cb      	cbz	r3, 8009a22 <_strtod_l+0xb2>
 80099ee:	4652      	mov	r2, sl
 80099f0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80099f4:	ec43 2b10 	vmov	d0, r2, r3
 80099f8:	b01f      	add	sp, #124	@ 0x7c
 80099fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099fe:	2920      	cmp	r1, #32
 8009a00:	d1ce      	bne.n	80099a0 <_strtod_l+0x30>
 8009a02:	3201      	adds	r2, #1
 8009a04:	e7c1      	b.n	800998a <_strtod_l+0x1a>
 8009a06:	292d      	cmp	r1, #45	@ 0x2d
 8009a08:	d1ca      	bne.n	80099a0 <_strtod_l+0x30>
 8009a0a:	2101      	movs	r1, #1
 8009a0c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009a0e:	1c51      	adds	r1, r2, #1
 8009a10:	9119      	str	r1, [sp, #100]	@ 0x64
 8009a12:	7852      	ldrb	r2, [r2, #1]
 8009a14:	2a00      	cmp	r2, #0
 8009a16:	d1c5      	bne.n	80099a4 <_strtod_l+0x34>
 8009a18:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009a1a:	9419      	str	r4, [sp, #100]	@ 0x64
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	f040 8570 	bne.w	800a502 <_strtod_l+0xb92>
 8009a22:	4652      	mov	r2, sl
 8009a24:	465b      	mov	r3, fp
 8009a26:	e7e5      	b.n	80099f4 <_strtod_l+0x84>
 8009a28:	2100      	movs	r1, #0
 8009a2a:	e7ef      	b.n	8009a0c <_strtod_l+0x9c>
 8009a2c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009a2e:	b13a      	cbz	r2, 8009a40 <_strtod_l+0xd0>
 8009a30:	2135      	movs	r1, #53	@ 0x35
 8009a32:	a81c      	add	r0, sp, #112	@ 0x70
 8009a34:	f003 fdaa 	bl	800d58c <__copybits>
 8009a38:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a3a:	9805      	ldr	r0, [sp, #20]
 8009a3c:	f003 f978 	bl	800cd30 <_Bfree>
 8009a40:	3e01      	subs	r6, #1
 8009a42:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009a44:	2e04      	cmp	r6, #4
 8009a46:	d806      	bhi.n	8009a56 <_strtod_l+0xe6>
 8009a48:	e8df f006 	tbb	[pc, r6]
 8009a4c:	201d0314 	.word	0x201d0314
 8009a50:	14          	.byte	0x14
 8009a51:	00          	.byte	0x00
 8009a52:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009a56:	05e1      	lsls	r1, r4, #23
 8009a58:	bf48      	it	mi
 8009a5a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009a5e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009a62:	0d1b      	lsrs	r3, r3, #20
 8009a64:	051b      	lsls	r3, r3, #20
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d1bb      	bne.n	80099e2 <_strtod_l+0x72>
 8009a6a:	f001 fe21 	bl	800b6b0 <__errno>
 8009a6e:	2322      	movs	r3, #34	@ 0x22
 8009a70:	6003      	str	r3, [r0, #0]
 8009a72:	e7b6      	b.n	80099e2 <_strtod_l+0x72>
 8009a74:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009a78:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009a7c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009a80:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009a84:	e7e7      	b.n	8009a56 <_strtod_l+0xe6>
 8009a86:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009c04 <_strtod_l+0x294>
 8009a8a:	e7e4      	b.n	8009a56 <_strtod_l+0xe6>
 8009a8c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009a90:	f04f 3aff 	mov.w	sl, #4294967295
 8009a94:	e7df      	b.n	8009a56 <_strtod_l+0xe6>
 8009a96:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a98:	1c5a      	adds	r2, r3, #1
 8009a9a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009a9c:	785b      	ldrb	r3, [r3, #1]
 8009a9e:	2b30      	cmp	r3, #48	@ 0x30
 8009aa0:	d0f9      	beq.n	8009a96 <_strtod_l+0x126>
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d09d      	beq.n	80099e2 <_strtod_l+0x72>
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009aaa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009aac:	930c      	str	r3, [sp, #48]	@ 0x30
 8009aae:	2300      	movs	r3, #0
 8009ab0:	9308      	str	r3, [sp, #32]
 8009ab2:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ab4:	461f      	mov	r7, r3
 8009ab6:	220a      	movs	r2, #10
 8009ab8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009aba:	7805      	ldrb	r5, [r0, #0]
 8009abc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009ac0:	b2d9      	uxtb	r1, r3
 8009ac2:	2909      	cmp	r1, #9
 8009ac4:	d928      	bls.n	8009b18 <_strtod_l+0x1a8>
 8009ac6:	494e      	ldr	r1, [pc, #312]	@ (8009c00 <_strtod_l+0x290>)
 8009ac8:	2201      	movs	r2, #1
 8009aca:	f001 fd38 	bl	800b53e <strncmp>
 8009ace:	2800      	cmp	r0, #0
 8009ad0:	d032      	beq.n	8009b38 <_strtod_l+0x1c8>
 8009ad2:	2000      	movs	r0, #0
 8009ad4:	462a      	mov	r2, r5
 8009ad6:	4681      	mov	r9, r0
 8009ad8:	463d      	mov	r5, r7
 8009ada:	4603      	mov	r3, r0
 8009adc:	2a65      	cmp	r2, #101	@ 0x65
 8009ade:	d001      	beq.n	8009ae4 <_strtod_l+0x174>
 8009ae0:	2a45      	cmp	r2, #69	@ 0x45
 8009ae2:	d114      	bne.n	8009b0e <_strtod_l+0x19e>
 8009ae4:	b91d      	cbnz	r5, 8009aee <_strtod_l+0x17e>
 8009ae6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ae8:	4302      	orrs	r2, r0
 8009aea:	d095      	beq.n	8009a18 <_strtod_l+0xa8>
 8009aec:	2500      	movs	r5, #0
 8009aee:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009af0:	1c62      	adds	r2, r4, #1
 8009af2:	9219      	str	r2, [sp, #100]	@ 0x64
 8009af4:	7862      	ldrb	r2, [r4, #1]
 8009af6:	2a2b      	cmp	r2, #43	@ 0x2b
 8009af8:	d077      	beq.n	8009bea <_strtod_l+0x27a>
 8009afa:	2a2d      	cmp	r2, #45	@ 0x2d
 8009afc:	d07b      	beq.n	8009bf6 <_strtod_l+0x286>
 8009afe:	f04f 0c00 	mov.w	ip, #0
 8009b02:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009b06:	2909      	cmp	r1, #9
 8009b08:	f240 8082 	bls.w	8009c10 <_strtod_l+0x2a0>
 8009b0c:	9419      	str	r4, [sp, #100]	@ 0x64
 8009b0e:	f04f 0800 	mov.w	r8, #0
 8009b12:	e0a2      	b.n	8009c5a <_strtod_l+0x2ea>
 8009b14:	2300      	movs	r3, #0
 8009b16:	e7c7      	b.n	8009aa8 <_strtod_l+0x138>
 8009b18:	2f08      	cmp	r7, #8
 8009b1a:	bfd5      	itete	le
 8009b1c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009b1e:	9908      	ldrgt	r1, [sp, #32]
 8009b20:	fb02 3301 	mlale	r3, r2, r1, r3
 8009b24:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009b28:	f100 0001 	add.w	r0, r0, #1
 8009b2c:	bfd4      	ite	le
 8009b2e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009b30:	9308      	strgt	r3, [sp, #32]
 8009b32:	3701      	adds	r7, #1
 8009b34:	9019      	str	r0, [sp, #100]	@ 0x64
 8009b36:	e7bf      	b.n	8009ab8 <_strtod_l+0x148>
 8009b38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b3a:	1c5a      	adds	r2, r3, #1
 8009b3c:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b3e:	785a      	ldrb	r2, [r3, #1]
 8009b40:	b37f      	cbz	r7, 8009ba2 <_strtod_l+0x232>
 8009b42:	4681      	mov	r9, r0
 8009b44:	463d      	mov	r5, r7
 8009b46:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009b4a:	2b09      	cmp	r3, #9
 8009b4c:	d912      	bls.n	8009b74 <_strtod_l+0x204>
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e7c4      	b.n	8009adc <_strtod_l+0x16c>
 8009b52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b54:	1c5a      	adds	r2, r3, #1
 8009b56:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b58:	785a      	ldrb	r2, [r3, #1]
 8009b5a:	3001      	adds	r0, #1
 8009b5c:	2a30      	cmp	r2, #48	@ 0x30
 8009b5e:	d0f8      	beq.n	8009b52 <_strtod_l+0x1e2>
 8009b60:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009b64:	2b08      	cmp	r3, #8
 8009b66:	f200 84d3 	bhi.w	800a510 <_strtod_l+0xba0>
 8009b6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b6c:	930c      	str	r3, [sp, #48]	@ 0x30
 8009b6e:	4681      	mov	r9, r0
 8009b70:	2000      	movs	r0, #0
 8009b72:	4605      	mov	r5, r0
 8009b74:	3a30      	subs	r2, #48	@ 0x30
 8009b76:	f100 0301 	add.w	r3, r0, #1
 8009b7a:	d02a      	beq.n	8009bd2 <_strtod_l+0x262>
 8009b7c:	4499      	add	r9, r3
 8009b7e:	eb00 0c05 	add.w	ip, r0, r5
 8009b82:	462b      	mov	r3, r5
 8009b84:	210a      	movs	r1, #10
 8009b86:	4563      	cmp	r3, ip
 8009b88:	d10d      	bne.n	8009ba6 <_strtod_l+0x236>
 8009b8a:	1c69      	adds	r1, r5, #1
 8009b8c:	4401      	add	r1, r0
 8009b8e:	4428      	add	r0, r5
 8009b90:	2808      	cmp	r0, #8
 8009b92:	dc16      	bgt.n	8009bc2 <_strtod_l+0x252>
 8009b94:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009b96:	230a      	movs	r3, #10
 8009b98:	fb03 2300 	mla	r3, r3, r0, r2
 8009b9c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	e018      	b.n	8009bd4 <_strtod_l+0x264>
 8009ba2:	4638      	mov	r0, r7
 8009ba4:	e7da      	b.n	8009b5c <_strtod_l+0x1ec>
 8009ba6:	2b08      	cmp	r3, #8
 8009ba8:	f103 0301 	add.w	r3, r3, #1
 8009bac:	dc03      	bgt.n	8009bb6 <_strtod_l+0x246>
 8009bae:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009bb0:	434e      	muls	r6, r1
 8009bb2:	960a      	str	r6, [sp, #40]	@ 0x28
 8009bb4:	e7e7      	b.n	8009b86 <_strtod_l+0x216>
 8009bb6:	2b10      	cmp	r3, #16
 8009bb8:	bfde      	ittt	le
 8009bba:	9e08      	ldrle	r6, [sp, #32]
 8009bbc:	434e      	mulle	r6, r1
 8009bbe:	9608      	strle	r6, [sp, #32]
 8009bc0:	e7e1      	b.n	8009b86 <_strtod_l+0x216>
 8009bc2:	280f      	cmp	r0, #15
 8009bc4:	dceb      	bgt.n	8009b9e <_strtod_l+0x22e>
 8009bc6:	9808      	ldr	r0, [sp, #32]
 8009bc8:	230a      	movs	r3, #10
 8009bca:	fb03 2300 	mla	r3, r3, r0, r2
 8009bce:	9308      	str	r3, [sp, #32]
 8009bd0:	e7e5      	b.n	8009b9e <_strtod_l+0x22e>
 8009bd2:	4629      	mov	r1, r5
 8009bd4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009bd6:	1c50      	adds	r0, r2, #1
 8009bd8:	9019      	str	r0, [sp, #100]	@ 0x64
 8009bda:	7852      	ldrb	r2, [r2, #1]
 8009bdc:	4618      	mov	r0, r3
 8009bde:	460d      	mov	r5, r1
 8009be0:	e7b1      	b.n	8009b46 <_strtod_l+0x1d6>
 8009be2:	f04f 0900 	mov.w	r9, #0
 8009be6:	2301      	movs	r3, #1
 8009be8:	e77d      	b.n	8009ae6 <_strtod_l+0x176>
 8009bea:	f04f 0c00 	mov.w	ip, #0
 8009bee:	1ca2      	adds	r2, r4, #2
 8009bf0:	9219      	str	r2, [sp, #100]	@ 0x64
 8009bf2:	78a2      	ldrb	r2, [r4, #2]
 8009bf4:	e785      	b.n	8009b02 <_strtod_l+0x192>
 8009bf6:	f04f 0c01 	mov.w	ip, #1
 8009bfa:	e7f8      	b.n	8009bee <_strtod_l+0x27e>
 8009bfc:	0800e2ec 	.word	0x0800e2ec
 8009c00:	0800e2d4 	.word	0x0800e2d4
 8009c04:	7ff00000 	.word	0x7ff00000
 8009c08:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009c0a:	1c51      	adds	r1, r2, #1
 8009c0c:	9119      	str	r1, [sp, #100]	@ 0x64
 8009c0e:	7852      	ldrb	r2, [r2, #1]
 8009c10:	2a30      	cmp	r2, #48	@ 0x30
 8009c12:	d0f9      	beq.n	8009c08 <_strtod_l+0x298>
 8009c14:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009c18:	2908      	cmp	r1, #8
 8009c1a:	f63f af78 	bhi.w	8009b0e <_strtod_l+0x19e>
 8009c1e:	3a30      	subs	r2, #48	@ 0x30
 8009c20:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c22:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009c24:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009c26:	f04f 080a 	mov.w	r8, #10
 8009c2a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009c2c:	1c56      	adds	r6, r2, #1
 8009c2e:	9619      	str	r6, [sp, #100]	@ 0x64
 8009c30:	7852      	ldrb	r2, [r2, #1]
 8009c32:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009c36:	f1be 0f09 	cmp.w	lr, #9
 8009c3a:	d939      	bls.n	8009cb0 <_strtod_l+0x340>
 8009c3c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009c3e:	1a76      	subs	r6, r6, r1
 8009c40:	2e08      	cmp	r6, #8
 8009c42:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009c46:	dc03      	bgt.n	8009c50 <_strtod_l+0x2e0>
 8009c48:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009c4a:	4588      	cmp	r8, r1
 8009c4c:	bfa8      	it	ge
 8009c4e:	4688      	movge	r8, r1
 8009c50:	f1bc 0f00 	cmp.w	ip, #0
 8009c54:	d001      	beq.n	8009c5a <_strtod_l+0x2ea>
 8009c56:	f1c8 0800 	rsb	r8, r8, #0
 8009c5a:	2d00      	cmp	r5, #0
 8009c5c:	d14e      	bne.n	8009cfc <_strtod_l+0x38c>
 8009c5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009c60:	4308      	orrs	r0, r1
 8009c62:	f47f aebe 	bne.w	80099e2 <_strtod_l+0x72>
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	f47f aed6 	bne.w	8009a18 <_strtod_l+0xa8>
 8009c6c:	2a69      	cmp	r2, #105	@ 0x69
 8009c6e:	d028      	beq.n	8009cc2 <_strtod_l+0x352>
 8009c70:	dc25      	bgt.n	8009cbe <_strtod_l+0x34e>
 8009c72:	2a49      	cmp	r2, #73	@ 0x49
 8009c74:	d025      	beq.n	8009cc2 <_strtod_l+0x352>
 8009c76:	2a4e      	cmp	r2, #78	@ 0x4e
 8009c78:	f47f aece 	bne.w	8009a18 <_strtod_l+0xa8>
 8009c7c:	499b      	ldr	r1, [pc, #620]	@ (8009eec <_strtod_l+0x57c>)
 8009c7e:	a819      	add	r0, sp, #100	@ 0x64
 8009c80:	f002 fe9e 	bl	800c9c0 <__match>
 8009c84:	2800      	cmp	r0, #0
 8009c86:	f43f aec7 	beq.w	8009a18 <_strtod_l+0xa8>
 8009c8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	2b28      	cmp	r3, #40	@ 0x28
 8009c90:	d12e      	bne.n	8009cf0 <_strtod_l+0x380>
 8009c92:	4997      	ldr	r1, [pc, #604]	@ (8009ef0 <_strtod_l+0x580>)
 8009c94:	aa1c      	add	r2, sp, #112	@ 0x70
 8009c96:	a819      	add	r0, sp, #100	@ 0x64
 8009c98:	f002 fea6 	bl	800c9e8 <__hexnan>
 8009c9c:	2805      	cmp	r0, #5
 8009c9e:	d127      	bne.n	8009cf0 <_strtod_l+0x380>
 8009ca0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009ca2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009ca6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009caa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009cae:	e698      	b.n	80099e2 <_strtod_l+0x72>
 8009cb0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009cb2:	fb08 2101 	mla	r1, r8, r1, r2
 8009cb6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009cba:	920e      	str	r2, [sp, #56]	@ 0x38
 8009cbc:	e7b5      	b.n	8009c2a <_strtod_l+0x2ba>
 8009cbe:	2a6e      	cmp	r2, #110	@ 0x6e
 8009cc0:	e7da      	b.n	8009c78 <_strtod_l+0x308>
 8009cc2:	498c      	ldr	r1, [pc, #560]	@ (8009ef4 <_strtod_l+0x584>)
 8009cc4:	a819      	add	r0, sp, #100	@ 0x64
 8009cc6:	f002 fe7b 	bl	800c9c0 <__match>
 8009cca:	2800      	cmp	r0, #0
 8009ccc:	f43f aea4 	beq.w	8009a18 <_strtod_l+0xa8>
 8009cd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009cd2:	4989      	ldr	r1, [pc, #548]	@ (8009ef8 <_strtod_l+0x588>)
 8009cd4:	3b01      	subs	r3, #1
 8009cd6:	a819      	add	r0, sp, #100	@ 0x64
 8009cd8:	9319      	str	r3, [sp, #100]	@ 0x64
 8009cda:	f002 fe71 	bl	800c9c0 <__match>
 8009cde:	b910      	cbnz	r0, 8009ce6 <_strtod_l+0x376>
 8009ce0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	9319      	str	r3, [sp, #100]	@ 0x64
 8009ce6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009f08 <_strtod_l+0x598>
 8009cea:	f04f 0a00 	mov.w	sl, #0
 8009cee:	e678      	b.n	80099e2 <_strtod_l+0x72>
 8009cf0:	4882      	ldr	r0, [pc, #520]	@ (8009efc <_strtod_l+0x58c>)
 8009cf2:	f001 fd19 	bl	800b728 <nan>
 8009cf6:	ec5b ab10 	vmov	sl, fp, d0
 8009cfa:	e672      	b.n	80099e2 <_strtod_l+0x72>
 8009cfc:	eba8 0309 	sub.w	r3, r8, r9
 8009d00:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009d02:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d04:	2f00      	cmp	r7, #0
 8009d06:	bf08      	it	eq
 8009d08:	462f      	moveq	r7, r5
 8009d0a:	2d10      	cmp	r5, #16
 8009d0c:	462c      	mov	r4, r5
 8009d0e:	bfa8      	it	ge
 8009d10:	2410      	movge	r4, #16
 8009d12:	f7f6 fc17 	bl	8000544 <__aeabi_ui2d>
 8009d16:	2d09      	cmp	r5, #9
 8009d18:	4682      	mov	sl, r0
 8009d1a:	468b      	mov	fp, r1
 8009d1c:	dc13      	bgt.n	8009d46 <_strtod_l+0x3d6>
 8009d1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	f43f ae5e 	beq.w	80099e2 <_strtod_l+0x72>
 8009d26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d28:	dd78      	ble.n	8009e1c <_strtod_l+0x4ac>
 8009d2a:	2b16      	cmp	r3, #22
 8009d2c:	dc5f      	bgt.n	8009dee <_strtod_l+0x47e>
 8009d2e:	4974      	ldr	r1, [pc, #464]	@ (8009f00 <_strtod_l+0x590>)
 8009d30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009d34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d38:	4652      	mov	r2, sl
 8009d3a:	465b      	mov	r3, fp
 8009d3c:	f7f6 fc7c 	bl	8000638 <__aeabi_dmul>
 8009d40:	4682      	mov	sl, r0
 8009d42:	468b      	mov	fp, r1
 8009d44:	e64d      	b.n	80099e2 <_strtod_l+0x72>
 8009d46:	4b6e      	ldr	r3, [pc, #440]	@ (8009f00 <_strtod_l+0x590>)
 8009d48:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009d4c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009d50:	f7f6 fc72 	bl	8000638 <__aeabi_dmul>
 8009d54:	4682      	mov	sl, r0
 8009d56:	9808      	ldr	r0, [sp, #32]
 8009d58:	468b      	mov	fp, r1
 8009d5a:	f7f6 fbf3 	bl	8000544 <__aeabi_ui2d>
 8009d5e:	4602      	mov	r2, r0
 8009d60:	460b      	mov	r3, r1
 8009d62:	4650      	mov	r0, sl
 8009d64:	4659      	mov	r1, fp
 8009d66:	f7f6 fab1 	bl	80002cc <__adddf3>
 8009d6a:	2d0f      	cmp	r5, #15
 8009d6c:	4682      	mov	sl, r0
 8009d6e:	468b      	mov	fp, r1
 8009d70:	ddd5      	ble.n	8009d1e <_strtod_l+0x3ae>
 8009d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d74:	1b2c      	subs	r4, r5, r4
 8009d76:	441c      	add	r4, r3
 8009d78:	2c00      	cmp	r4, #0
 8009d7a:	f340 8096 	ble.w	8009eaa <_strtod_l+0x53a>
 8009d7e:	f014 030f 	ands.w	r3, r4, #15
 8009d82:	d00a      	beq.n	8009d9a <_strtod_l+0x42a>
 8009d84:	495e      	ldr	r1, [pc, #376]	@ (8009f00 <_strtod_l+0x590>)
 8009d86:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009d8a:	4652      	mov	r2, sl
 8009d8c:	465b      	mov	r3, fp
 8009d8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d92:	f7f6 fc51 	bl	8000638 <__aeabi_dmul>
 8009d96:	4682      	mov	sl, r0
 8009d98:	468b      	mov	fp, r1
 8009d9a:	f034 040f 	bics.w	r4, r4, #15
 8009d9e:	d073      	beq.n	8009e88 <_strtod_l+0x518>
 8009da0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009da4:	dd48      	ble.n	8009e38 <_strtod_l+0x4c8>
 8009da6:	2400      	movs	r4, #0
 8009da8:	46a0      	mov	r8, r4
 8009daa:	940a      	str	r4, [sp, #40]	@ 0x28
 8009dac:	46a1      	mov	r9, r4
 8009dae:	9a05      	ldr	r2, [sp, #20]
 8009db0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009f08 <_strtod_l+0x598>
 8009db4:	2322      	movs	r3, #34	@ 0x22
 8009db6:	6013      	str	r3, [r2, #0]
 8009db8:	f04f 0a00 	mov.w	sl, #0
 8009dbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	f43f ae0f 	beq.w	80099e2 <_strtod_l+0x72>
 8009dc4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009dc6:	9805      	ldr	r0, [sp, #20]
 8009dc8:	f002 ffb2 	bl	800cd30 <_Bfree>
 8009dcc:	9805      	ldr	r0, [sp, #20]
 8009dce:	4649      	mov	r1, r9
 8009dd0:	f002 ffae 	bl	800cd30 <_Bfree>
 8009dd4:	9805      	ldr	r0, [sp, #20]
 8009dd6:	4641      	mov	r1, r8
 8009dd8:	f002 ffaa 	bl	800cd30 <_Bfree>
 8009ddc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009dde:	9805      	ldr	r0, [sp, #20]
 8009de0:	f002 ffa6 	bl	800cd30 <_Bfree>
 8009de4:	9805      	ldr	r0, [sp, #20]
 8009de6:	4621      	mov	r1, r4
 8009de8:	f002 ffa2 	bl	800cd30 <_Bfree>
 8009dec:	e5f9      	b.n	80099e2 <_strtod_l+0x72>
 8009dee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009df0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009df4:	4293      	cmp	r3, r2
 8009df6:	dbbc      	blt.n	8009d72 <_strtod_l+0x402>
 8009df8:	4c41      	ldr	r4, [pc, #260]	@ (8009f00 <_strtod_l+0x590>)
 8009dfa:	f1c5 050f 	rsb	r5, r5, #15
 8009dfe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009e02:	4652      	mov	r2, sl
 8009e04:	465b      	mov	r3, fp
 8009e06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e0a:	f7f6 fc15 	bl	8000638 <__aeabi_dmul>
 8009e0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e10:	1b5d      	subs	r5, r3, r5
 8009e12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009e16:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009e1a:	e78f      	b.n	8009d3c <_strtod_l+0x3cc>
 8009e1c:	3316      	adds	r3, #22
 8009e1e:	dba8      	blt.n	8009d72 <_strtod_l+0x402>
 8009e20:	4b37      	ldr	r3, [pc, #220]	@ (8009f00 <_strtod_l+0x590>)
 8009e22:	eba9 0808 	sub.w	r8, r9, r8
 8009e26:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009e2a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009e2e:	4650      	mov	r0, sl
 8009e30:	4659      	mov	r1, fp
 8009e32:	f7f6 fd2b 	bl	800088c <__aeabi_ddiv>
 8009e36:	e783      	b.n	8009d40 <_strtod_l+0x3d0>
 8009e38:	4b32      	ldr	r3, [pc, #200]	@ (8009f04 <_strtod_l+0x594>)
 8009e3a:	9308      	str	r3, [sp, #32]
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	1124      	asrs	r4, r4, #4
 8009e40:	4650      	mov	r0, sl
 8009e42:	4659      	mov	r1, fp
 8009e44:	461e      	mov	r6, r3
 8009e46:	2c01      	cmp	r4, #1
 8009e48:	dc21      	bgt.n	8009e8e <_strtod_l+0x51e>
 8009e4a:	b10b      	cbz	r3, 8009e50 <_strtod_l+0x4e0>
 8009e4c:	4682      	mov	sl, r0
 8009e4e:	468b      	mov	fp, r1
 8009e50:	492c      	ldr	r1, [pc, #176]	@ (8009f04 <_strtod_l+0x594>)
 8009e52:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009e56:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009e5a:	4652      	mov	r2, sl
 8009e5c:	465b      	mov	r3, fp
 8009e5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e62:	f7f6 fbe9 	bl	8000638 <__aeabi_dmul>
 8009e66:	4b28      	ldr	r3, [pc, #160]	@ (8009f08 <_strtod_l+0x598>)
 8009e68:	460a      	mov	r2, r1
 8009e6a:	400b      	ands	r3, r1
 8009e6c:	4927      	ldr	r1, [pc, #156]	@ (8009f0c <_strtod_l+0x59c>)
 8009e6e:	428b      	cmp	r3, r1
 8009e70:	4682      	mov	sl, r0
 8009e72:	d898      	bhi.n	8009da6 <_strtod_l+0x436>
 8009e74:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009e78:	428b      	cmp	r3, r1
 8009e7a:	bf86      	itte	hi
 8009e7c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009f10 <_strtod_l+0x5a0>
 8009e80:	f04f 3aff 	movhi.w	sl, #4294967295
 8009e84:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009e88:	2300      	movs	r3, #0
 8009e8a:	9308      	str	r3, [sp, #32]
 8009e8c:	e07a      	b.n	8009f84 <_strtod_l+0x614>
 8009e8e:	07e2      	lsls	r2, r4, #31
 8009e90:	d505      	bpl.n	8009e9e <_strtod_l+0x52e>
 8009e92:	9b08      	ldr	r3, [sp, #32]
 8009e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e98:	f7f6 fbce 	bl	8000638 <__aeabi_dmul>
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	9a08      	ldr	r2, [sp, #32]
 8009ea0:	3208      	adds	r2, #8
 8009ea2:	3601      	adds	r6, #1
 8009ea4:	1064      	asrs	r4, r4, #1
 8009ea6:	9208      	str	r2, [sp, #32]
 8009ea8:	e7cd      	b.n	8009e46 <_strtod_l+0x4d6>
 8009eaa:	d0ed      	beq.n	8009e88 <_strtod_l+0x518>
 8009eac:	4264      	negs	r4, r4
 8009eae:	f014 020f 	ands.w	r2, r4, #15
 8009eb2:	d00a      	beq.n	8009eca <_strtod_l+0x55a>
 8009eb4:	4b12      	ldr	r3, [pc, #72]	@ (8009f00 <_strtod_l+0x590>)
 8009eb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009eba:	4650      	mov	r0, sl
 8009ebc:	4659      	mov	r1, fp
 8009ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec2:	f7f6 fce3 	bl	800088c <__aeabi_ddiv>
 8009ec6:	4682      	mov	sl, r0
 8009ec8:	468b      	mov	fp, r1
 8009eca:	1124      	asrs	r4, r4, #4
 8009ecc:	d0dc      	beq.n	8009e88 <_strtod_l+0x518>
 8009ece:	2c1f      	cmp	r4, #31
 8009ed0:	dd20      	ble.n	8009f14 <_strtod_l+0x5a4>
 8009ed2:	2400      	movs	r4, #0
 8009ed4:	46a0      	mov	r8, r4
 8009ed6:	940a      	str	r4, [sp, #40]	@ 0x28
 8009ed8:	46a1      	mov	r9, r4
 8009eda:	9a05      	ldr	r2, [sp, #20]
 8009edc:	2322      	movs	r3, #34	@ 0x22
 8009ede:	f04f 0a00 	mov.w	sl, #0
 8009ee2:	f04f 0b00 	mov.w	fp, #0
 8009ee6:	6013      	str	r3, [r2, #0]
 8009ee8:	e768      	b.n	8009dbc <_strtod_l+0x44c>
 8009eea:	bf00      	nop
 8009eec:	0800e335 	.word	0x0800e335
 8009ef0:	0800e2d8 	.word	0x0800e2d8
 8009ef4:	0800e32d 	.word	0x0800e32d
 8009ef8:	0800e419 	.word	0x0800e419
 8009efc:	0800e415 	.word	0x0800e415
 8009f00:	0800e580 	.word	0x0800e580
 8009f04:	0800e558 	.word	0x0800e558
 8009f08:	7ff00000 	.word	0x7ff00000
 8009f0c:	7ca00000 	.word	0x7ca00000
 8009f10:	7fefffff 	.word	0x7fefffff
 8009f14:	f014 0310 	ands.w	r3, r4, #16
 8009f18:	bf18      	it	ne
 8009f1a:	236a      	movne	r3, #106	@ 0x6a
 8009f1c:	4ea9      	ldr	r6, [pc, #676]	@ (800a1c4 <_strtod_l+0x854>)
 8009f1e:	9308      	str	r3, [sp, #32]
 8009f20:	4650      	mov	r0, sl
 8009f22:	4659      	mov	r1, fp
 8009f24:	2300      	movs	r3, #0
 8009f26:	07e2      	lsls	r2, r4, #31
 8009f28:	d504      	bpl.n	8009f34 <_strtod_l+0x5c4>
 8009f2a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009f2e:	f7f6 fb83 	bl	8000638 <__aeabi_dmul>
 8009f32:	2301      	movs	r3, #1
 8009f34:	1064      	asrs	r4, r4, #1
 8009f36:	f106 0608 	add.w	r6, r6, #8
 8009f3a:	d1f4      	bne.n	8009f26 <_strtod_l+0x5b6>
 8009f3c:	b10b      	cbz	r3, 8009f42 <_strtod_l+0x5d2>
 8009f3e:	4682      	mov	sl, r0
 8009f40:	468b      	mov	fp, r1
 8009f42:	9b08      	ldr	r3, [sp, #32]
 8009f44:	b1b3      	cbz	r3, 8009f74 <_strtod_l+0x604>
 8009f46:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009f4a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	4659      	mov	r1, fp
 8009f52:	dd0f      	ble.n	8009f74 <_strtod_l+0x604>
 8009f54:	2b1f      	cmp	r3, #31
 8009f56:	dd55      	ble.n	800a004 <_strtod_l+0x694>
 8009f58:	2b34      	cmp	r3, #52	@ 0x34
 8009f5a:	bfde      	ittt	le
 8009f5c:	f04f 33ff 	movle.w	r3, #4294967295
 8009f60:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009f64:	4093      	lslle	r3, r2
 8009f66:	f04f 0a00 	mov.w	sl, #0
 8009f6a:	bfcc      	ite	gt
 8009f6c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009f70:	ea03 0b01 	andle.w	fp, r3, r1
 8009f74:	2200      	movs	r2, #0
 8009f76:	2300      	movs	r3, #0
 8009f78:	4650      	mov	r0, sl
 8009f7a:	4659      	mov	r1, fp
 8009f7c:	f7f6 fdc4 	bl	8000b08 <__aeabi_dcmpeq>
 8009f80:	2800      	cmp	r0, #0
 8009f82:	d1a6      	bne.n	8009ed2 <_strtod_l+0x562>
 8009f84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f86:	9300      	str	r3, [sp, #0]
 8009f88:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009f8a:	9805      	ldr	r0, [sp, #20]
 8009f8c:	462b      	mov	r3, r5
 8009f8e:	463a      	mov	r2, r7
 8009f90:	f002 ff36 	bl	800ce00 <__s2b>
 8009f94:	900a      	str	r0, [sp, #40]	@ 0x28
 8009f96:	2800      	cmp	r0, #0
 8009f98:	f43f af05 	beq.w	8009da6 <_strtod_l+0x436>
 8009f9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f9e:	2a00      	cmp	r2, #0
 8009fa0:	eba9 0308 	sub.w	r3, r9, r8
 8009fa4:	bfa8      	it	ge
 8009fa6:	2300      	movge	r3, #0
 8009fa8:	9312      	str	r3, [sp, #72]	@ 0x48
 8009faa:	2400      	movs	r4, #0
 8009fac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009fb0:	9316      	str	r3, [sp, #88]	@ 0x58
 8009fb2:	46a0      	mov	r8, r4
 8009fb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fb6:	9805      	ldr	r0, [sp, #20]
 8009fb8:	6859      	ldr	r1, [r3, #4]
 8009fba:	f002 fe79 	bl	800ccb0 <_Balloc>
 8009fbe:	4681      	mov	r9, r0
 8009fc0:	2800      	cmp	r0, #0
 8009fc2:	f43f aef4 	beq.w	8009dae <_strtod_l+0x43e>
 8009fc6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fc8:	691a      	ldr	r2, [r3, #16]
 8009fca:	3202      	adds	r2, #2
 8009fcc:	f103 010c 	add.w	r1, r3, #12
 8009fd0:	0092      	lsls	r2, r2, #2
 8009fd2:	300c      	adds	r0, #12
 8009fd4:	f001 fb99 	bl	800b70a <memcpy>
 8009fd8:	ec4b ab10 	vmov	d0, sl, fp
 8009fdc:	9805      	ldr	r0, [sp, #20]
 8009fde:	aa1c      	add	r2, sp, #112	@ 0x70
 8009fe0:	a91b      	add	r1, sp, #108	@ 0x6c
 8009fe2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009fe6:	f003 fa47 	bl	800d478 <__d2b>
 8009fea:	901a      	str	r0, [sp, #104]	@ 0x68
 8009fec:	2800      	cmp	r0, #0
 8009fee:	f43f aede 	beq.w	8009dae <_strtod_l+0x43e>
 8009ff2:	9805      	ldr	r0, [sp, #20]
 8009ff4:	2101      	movs	r1, #1
 8009ff6:	f002 ff99 	bl	800cf2c <__i2b>
 8009ffa:	4680      	mov	r8, r0
 8009ffc:	b948      	cbnz	r0, 800a012 <_strtod_l+0x6a2>
 8009ffe:	f04f 0800 	mov.w	r8, #0
 800a002:	e6d4      	b.n	8009dae <_strtod_l+0x43e>
 800a004:	f04f 32ff 	mov.w	r2, #4294967295
 800a008:	fa02 f303 	lsl.w	r3, r2, r3
 800a00c:	ea03 0a0a 	and.w	sl, r3, sl
 800a010:	e7b0      	b.n	8009f74 <_strtod_l+0x604>
 800a012:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a014:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a016:	2d00      	cmp	r5, #0
 800a018:	bfab      	itete	ge
 800a01a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a01c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a01e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a020:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a022:	bfac      	ite	ge
 800a024:	18ef      	addge	r7, r5, r3
 800a026:	1b5e      	sublt	r6, r3, r5
 800a028:	9b08      	ldr	r3, [sp, #32]
 800a02a:	1aed      	subs	r5, r5, r3
 800a02c:	4415      	add	r5, r2
 800a02e:	4b66      	ldr	r3, [pc, #408]	@ (800a1c8 <_strtod_l+0x858>)
 800a030:	3d01      	subs	r5, #1
 800a032:	429d      	cmp	r5, r3
 800a034:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a038:	da50      	bge.n	800a0dc <_strtod_l+0x76c>
 800a03a:	1b5b      	subs	r3, r3, r5
 800a03c:	2b1f      	cmp	r3, #31
 800a03e:	eba2 0203 	sub.w	r2, r2, r3
 800a042:	f04f 0101 	mov.w	r1, #1
 800a046:	dc3d      	bgt.n	800a0c4 <_strtod_l+0x754>
 800a048:	fa01 f303 	lsl.w	r3, r1, r3
 800a04c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a04e:	2300      	movs	r3, #0
 800a050:	9310      	str	r3, [sp, #64]	@ 0x40
 800a052:	18bd      	adds	r5, r7, r2
 800a054:	9b08      	ldr	r3, [sp, #32]
 800a056:	42af      	cmp	r7, r5
 800a058:	4416      	add	r6, r2
 800a05a:	441e      	add	r6, r3
 800a05c:	463b      	mov	r3, r7
 800a05e:	bfa8      	it	ge
 800a060:	462b      	movge	r3, r5
 800a062:	42b3      	cmp	r3, r6
 800a064:	bfa8      	it	ge
 800a066:	4633      	movge	r3, r6
 800a068:	2b00      	cmp	r3, #0
 800a06a:	bfc2      	ittt	gt
 800a06c:	1aed      	subgt	r5, r5, r3
 800a06e:	1af6      	subgt	r6, r6, r3
 800a070:	1aff      	subgt	r7, r7, r3
 800a072:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a074:	2b00      	cmp	r3, #0
 800a076:	dd16      	ble.n	800a0a6 <_strtod_l+0x736>
 800a078:	4641      	mov	r1, r8
 800a07a:	9805      	ldr	r0, [sp, #20]
 800a07c:	461a      	mov	r2, r3
 800a07e:	f003 f815 	bl	800d0ac <__pow5mult>
 800a082:	4680      	mov	r8, r0
 800a084:	2800      	cmp	r0, #0
 800a086:	d0ba      	beq.n	8009ffe <_strtod_l+0x68e>
 800a088:	4601      	mov	r1, r0
 800a08a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a08c:	9805      	ldr	r0, [sp, #20]
 800a08e:	f002 ff63 	bl	800cf58 <__multiply>
 800a092:	900e      	str	r0, [sp, #56]	@ 0x38
 800a094:	2800      	cmp	r0, #0
 800a096:	f43f ae8a 	beq.w	8009dae <_strtod_l+0x43e>
 800a09a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a09c:	9805      	ldr	r0, [sp, #20]
 800a09e:	f002 fe47 	bl	800cd30 <_Bfree>
 800a0a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0a4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a0a6:	2d00      	cmp	r5, #0
 800a0a8:	dc1d      	bgt.n	800a0e6 <_strtod_l+0x776>
 800a0aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	dd23      	ble.n	800a0f8 <_strtod_l+0x788>
 800a0b0:	4649      	mov	r1, r9
 800a0b2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a0b4:	9805      	ldr	r0, [sp, #20]
 800a0b6:	f002 fff9 	bl	800d0ac <__pow5mult>
 800a0ba:	4681      	mov	r9, r0
 800a0bc:	b9e0      	cbnz	r0, 800a0f8 <_strtod_l+0x788>
 800a0be:	f04f 0900 	mov.w	r9, #0
 800a0c2:	e674      	b.n	8009dae <_strtod_l+0x43e>
 800a0c4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a0c8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a0cc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a0d0:	35e2      	adds	r5, #226	@ 0xe2
 800a0d2:	fa01 f305 	lsl.w	r3, r1, r5
 800a0d6:	9310      	str	r3, [sp, #64]	@ 0x40
 800a0d8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a0da:	e7ba      	b.n	800a052 <_strtod_l+0x6e2>
 800a0dc:	2300      	movs	r3, #0
 800a0de:	9310      	str	r3, [sp, #64]	@ 0x40
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a0e4:	e7b5      	b.n	800a052 <_strtod_l+0x6e2>
 800a0e6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a0e8:	9805      	ldr	r0, [sp, #20]
 800a0ea:	462a      	mov	r2, r5
 800a0ec:	f003 f838 	bl	800d160 <__lshift>
 800a0f0:	901a      	str	r0, [sp, #104]	@ 0x68
 800a0f2:	2800      	cmp	r0, #0
 800a0f4:	d1d9      	bne.n	800a0aa <_strtod_l+0x73a>
 800a0f6:	e65a      	b.n	8009dae <_strtod_l+0x43e>
 800a0f8:	2e00      	cmp	r6, #0
 800a0fa:	dd07      	ble.n	800a10c <_strtod_l+0x79c>
 800a0fc:	4649      	mov	r1, r9
 800a0fe:	9805      	ldr	r0, [sp, #20]
 800a100:	4632      	mov	r2, r6
 800a102:	f003 f82d 	bl	800d160 <__lshift>
 800a106:	4681      	mov	r9, r0
 800a108:	2800      	cmp	r0, #0
 800a10a:	d0d8      	beq.n	800a0be <_strtod_l+0x74e>
 800a10c:	2f00      	cmp	r7, #0
 800a10e:	dd08      	ble.n	800a122 <_strtod_l+0x7b2>
 800a110:	4641      	mov	r1, r8
 800a112:	9805      	ldr	r0, [sp, #20]
 800a114:	463a      	mov	r2, r7
 800a116:	f003 f823 	bl	800d160 <__lshift>
 800a11a:	4680      	mov	r8, r0
 800a11c:	2800      	cmp	r0, #0
 800a11e:	f43f ae46 	beq.w	8009dae <_strtod_l+0x43e>
 800a122:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a124:	9805      	ldr	r0, [sp, #20]
 800a126:	464a      	mov	r2, r9
 800a128:	f003 f8a2 	bl	800d270 <__mdiff>
 800a12c:	4604      	mov	r4, r0
 800a12e:	2800      	cmp	r0, #0
 800a130:	f43f ae3d 	beq.w	8009dae <_strtod_l+0x43e>
 800a134:	68c3      	ldr	r3, [r0, #12]
 800a136:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a138:	2300      	movs	r3, #0
 800a13a:	60c3      	str	r3, [r0, #12]
 800a13c:	4641      	mov	r1, r8
 800a13e:	f003 f87b 	bl	800d238 <__mcmp>
 800a142:	2800      	cmp	r0, #0
 800a144:	da46      	bge.n	800a1d4 <_strtod_l+0x864>
 800a146:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a148:	ea53 030a 	orrs.w	r3, r3, sl
 800a14c:	d16c      	bne.n	800a228 <_strtod_l+0x8b8>
 800a14e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a152:	2b00      	cmp	r3, #0
 800a154:	d168      	bne.n	800a228 <_strtod_l+0x8b8>
 800a156:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a15a:	0d1b      	lsrs	r3, r3, #20
 800a15c:	051b      	lsls	r3, r3, #20
 800a15e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a162:	d961      	bls.n	800a228 <_strtod_l+0x8b8>
 800a164:	6963      	ldr	r3, [r4, #20]
 800a166:	b913      	cbnz	r3, 800a16e <_strtod_l+0x7fe>
 800a168:	6923      	ldr	r3, [r4, #16]
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	dd5c      	ble.n	800a228 <_strtod_l+0x8b8>
 800a16e:	4621      	mov	r1, r4
 800a170:	2201      	movs	r2, #1
 800a172:	9805      	ldr	r0, [sp, #20]
 800a174:	f002 fff4 	bl	800d160 <__lshift>
 800a178:	4641      	mov	r1, r8
 800a17a:	4604      	mov	r4, r0
 800a17c:	f003 f85c 	bl	800d238 <__mcmp>
 800a180:	2800      	cmp	r0, #0
 800a182:	dd51      	ble.n	800a228 <_strtod_l+0x8b8>
 800a184:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a188:	9a08      	ldr	r2, [sp, #32]
 800a18a:	0d1b      	lsrs	r3, r3, #20
 800a18c:	051b      	lsls	r3, r3, #20
 800a18e:	2a00      	cmp	r2, #0
 800a190:	d06b      	beq.n	800a26a <_strtod_l+0x8fa>
 800a192:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a196:	d868      	bhi.n	800a26a <_strtod_l+0x8fa>
 800a198:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a19c:	f67f ae9d 	bls.w	8009eda <_strtod_l+0x56a>
 800a1a0:	4b0a      	ldr	r3, [pc, #40]	@ (800a1cc <_strtod_l+0x85c>)
 800a1a2:	4650      	mov	r0, sl
 800a1a4:	4659      	mov	r1, fp
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	f7f6 fa46 	bl	8000638 <__aeabi_dmul>
 800a1ac:	4b08      	ldr	r3, [pc, #32]	@ (800a1d0 <_strtod_l+0x860>)
 800a1ae:	400b      	ands	r3, r1
 800a1b0:	4682      	mov	sl, r0
 800a1b2:	468b      	mov	fp, r1
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	f47f ae05 	bne.w	8009dc4 <_strtod_l+0x454>
 800a1ba:	9a05      	ldr	r2, [sp, #20]
 800a1bc:	2322      	movs	r3, #34	@ 0x22
 800a1be:	6013      	str	r3, [r2, #0]
 800a1c0:	e600      	b.n	8009dc4 <_strtod_l+0x454>
 800a1c2:	bf00      	nop
 800a1c4:	0800e300 	.word	0x0800e300
 800a1c8:	fffffc02 	.word	0xfffffc02
 800a1cc:	39500000 	.word	0x39500000
 800a1d0:	7ff00000 	.word	0x7ff00000
 800a1d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a1d8:	d165      	bne.n	800a2a6 <_strtod_l+0x936>
 800a1da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a1dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a1e0:	b35a      	cbz	r2, 800a23a <_strtod_l+0x8ca>
 800a1e2:	4a9f      	ldr	r2, [pc, #636]	@ (800a460 <_strtod_l+0xaf0>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d12b      	bne.n	800a240 <_strtod_l+0x8d0>
 800a1e8:	9b08      	ldr	r3, [sp, #32]
 800a1ea:	4651      	mov	r1, sl
 800a1ec:	b303      	cbz	r3, 800a230 <_strtod_l+0x8c0>
 800a1ee:	4b9d      	ldr	r3, [pc, #628]	@ (800a464 <_strtod_l+0xaf4>)
 800a1f0:	465a      	mov	r2, fp
 800a1f2:	4013      	ands	r3, r2
 800a1f4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a1f8:	f04f 32ff 	mov.w	r2, #4294967295
 800a1fc:	d81b      	bhi.n	800a236 <_strtod_l+0x8c6>
 800a1fe:	0d1b      	lsrs	r3, r3, #20
 800a200:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a204:	fa02 f303 	lsl.w	r3, r2, r3
 800a208:	4299      	cmp	r1, r3
 800a20a:	d119      	bne.n	800a240 <_strtod_l+0x8d0>
 800a20c:	4b96      	ldr	r3, [pc, #600]	@ (800a468 <_strtod_l+0xaf8>)
 800a20e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a210:	429a      	cmp	r2, r3
 800a212:	d102      	bne.n	800a21a <_strtod_l+0x8aa>
 800a214:	3101      	adds	r1, #1
 800a216:	f43f adca 	beq.w	8009dae <_strtod_l+0x43e>
 800a21a:	4b92      	ldr	r3, [pc, #584]	@ (800a464 <_strtod_l+0xaf4>)
 800a21c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a21e:	401a      	ands	r2, r3
 800a220:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a224:	f04f 0a00 	mov.w	sl, #0
 800a228:	9b08      	ldr	r3, [sp, #32]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d1b8      	bne.n	800a1a0 <_strtod_l+0x830>
 800a22e:	e5c9      	b.n	8009dc4 <_strtod_l+0x454>
 800a230:	f04f 33ff 	mov.w	r3, #4294967295
 800a234:	e7e8      	b.n	800a208 <_strtod_l+0x898>
 800a236:	4613      	mov	r3, r2
 800a238:	e7e6      	b.n	800a208 <_strtod_l+0x898>
 800a23a:	ea53 030a 	orrs.w	r3, r3, sl
 800a23e:	d0a1      	beq.n	800a184 <_strtod_l+0x814>
 800a240:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a242:	b1db      	cbz	r3, 800a27c <_strtod_l+0x90c>
 800a244:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a246:	4213      	tst	r3, r2
 800a248:	d0ee      	beq.n	800a228 <_strtod_l+0x8b8>
 800a24a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a24c:	9a08      	ldr	r2, [sp, #32]
 800a24e:	4650      	mov	r0, sl
 800a250:	4659      	mov	r1, fp
 800a252:	b1bb      	cbz	r3, 800a284 <_strtod_l+0x914>
 800a254:	f7ff fb6d 	bl	8009932 <sulp>
 800a258:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a25c:	ec53 2b10 	vmov	r2, r3, d0
 800a260:	f7f6 f834 	bl	80002cc <__adddf3>
 800a264:	4682      	mov	sl, r0
 800a266:	468b      	mov	fp, r1
 800a268:	e7de      	b.n	800a228 <_strtod_l+0x8b8>
 800a26a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a26e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a272:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a276:	f04f 3aff 	mov.w	sl, #4294967295
 800a27a:	e7d5      	b.n	800a228 <_strtod_l+0x8b8>
 800a27c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a27e:	ea13 0f0a 	tst.w	r3, sl
 800a282:	e7e1      	b.n	800a248 <_strtod_l+0x8d8>
 800a284:	f7ff fb55 	bl	8009932 <sulp>
 800a288:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a28c:	ec53 2b10 	vmov	r2, r3, d0
 800a290:	f7f6 f81a 	bl	80002c8 <__aeabi_dsub>
 800a294:	2200      	movs	r2, #0
 800a296:	2300      	movs	r3, #0
 800a298:	4682      	mov	sl, r0
 800a29a:	468b      	mov	fp, r1
 800a29c:	f7f6 fc34 	bl	8000b08 <__aeabi_dcmpeq>
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	d0c1      	beq.n	800a228 <_strtod_l+0x8b8>
 800a2a4:	e619      	b.n	8009eda <_strtod_l+0x56a>
 800a2a6:	4641      	mov	r1, r8
 800a2a8:	4620      	mov	r0, r4
 800a2aa:	f003 f93d 	bl	800d528 <__ratio>
 800a2ae:	ec57 6b10 	vmov	r6, r7, d0
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a2b8:	4630      	mov	r0, r6
 800a2ba:	4639      	mov	r1, r7
 800a2bc:	f7f6 fc38 	bl	8000b30 <__aeabi_dcmple>
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	d06f      	beq.n	800a3a4 <_strtod_l+0xa34>
 800a2c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d17a      	bne.n	800a3c0 <_strtod_l+0xa50>
 800a2ca:	f1ba 0f00 	cmp.w	sl, #0
 800a2ce:	d158      	bne.n	800a382 <_strtod_l+0xa12>
 800a2d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d15a      	bne.n	800a390 <_strtod_l+0xa20>
 800a2da:	4b64      	ldr	r3, [pc, #400]	@ (800a46c <_strtod_l+0xafc>)
 800a2dc:	2200      	movs	r2, #0
 800a2de:	4630      	mov	r0, r6
 800a2e0:	4639      	mov	r1, r7
 800a2e2:	f7f6 fc1b 	bl	8000b1c <__aeabi_dcmplt>
 800a2e6:	2800      	cmp	r0, #0
 800a2e8:	d159      	bne.n	800a39e <_strtod_l+0xa2e>
 800a2ea:	4630      	mov	r0, r6
 800a2ec:	4639      	mov	r1, r7
 800a2ee:	4b60      	ldr	r3, [pc, #384]	@ (800a470 <_strtod_l+0xb00>)
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f7f6 f9a1 	bl	8000638 <__aeabi_dmul>
 800a2f6:	4606      	mov	r6, r0
 800a2f8:	460f      	mov	r7, r1
 800a2fa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a2fe:	9606      	str	r6, [sp, #24]
 800a300:	9307      	str	r3, [sp, #28]
 800a302:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a306:	4d57      	ldr	r5, [pc, #348]	@ (800a464 <_strtod_l+0xaf4>)
 800a308:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a30c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a30e:	401d      	ands	r5, r3
 800a310:	4b58      	ldr	r3, [pc, #352]	@ (800a474 <_strtod_l+0xb04>)
 800a312:	429d      	cmp	r5, r3
 800a314:	f040 80b2 	bne.w	800a47c <_strtod_l+0xb0c>
 800a318:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a31a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a31e:	ec4b ab10 	vmov	d0, sl, fp
 800a322:	f003 f839 	bl	800d398 <__ulp>
 800a326:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a32a:	ec51 0b10 	vmov	r0, r1, d0
 800a32e:	f7f6 f983 	bl	8000638 <__aeabi_dmul>
 800a332:	4652      	mov	r2, sl
 800a334:	465b      	mov	r3, fp
 800a336:	f7f5 ffc9 	bl	80002cc <__adddf3>
 800a33a:	460b      	mov	r3, r1
 800a33c:	4949      	ldr	r1, [pc, #292]	@ (800a464 <_strtod_l+0xaf4>)
 800a33e:	4a4e      	ldr	r2, [pc, #312]	@ (800a478 <_strtod_l+0xb08>)
 800a340:	4019      	ands	r1, r3
 800a342:	4291      	cmp	r1, r2
 800a344:	4682      	mov	sl, r0
 800a346:	d942      	bls.n	800a3ce <_strtod_l+0xa5e>
 800a348:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a34a:	4b47      	ldr	r3, [pc, #284]	@ (800a468 <_strtod_l+0xaf8>)
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d103      	bne.n	800a358 <_strtod_l+0x9e8>
 800a350:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a352:	3301      	adds	r3, #1
 800a354:	f43f ad2b 	beq.w	8009dae <_strtod_l+0x43e>
 800a358:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a468 <_strtod_l+0xaf8>
 800a35c:	f04f 3aff 	mov.w	sl, #4294967295
 800a360:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a362:	9805      	ldr	r0, [sp, #20]
 800a364:	f002 fce4 	bl	800cd30 <_Bfree>
 800a368:	9805      	ldr	r0, [sp, #20]
 800a36a:	4649      	mov	r1, r9
 800a36c:	f002 fce0 	bl	800cd30 <_Bfree>
 800a370:	9805      	ldr	r0, [sp, #20]
 800a372:	4641      	mov	r1, r8
 800a374:	f002 fcdc 	bl	800cd30 <_Bfree>
 800a378:	9805      	ldr	r0, [sp, #20]
 800a37a:	4621      	mov	r1, r4
 800a37c:	f002 fcd8 	bl	800cd30 <_Bfree>
 800a380:	e618      	b.n	8009fb4 <_strtod_l+0x644>
 800a382:	f1ba 0f01 	cmp.w	sl, #1
 800a386:	d103      	bne.n	800a390 <_strtod_l+0xa20>
 800a388:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	f43f ada5 	beq.w	8009eda <_strtod_l+0x56a>
 800a390:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a440 <_strtod_l+0xad0>
 800a394:	4f35      	ldr	r7, [pc, #212]	@ (800a46c <_strtod_l+0xafc>)
 800a396:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a39a:	2600      	movs	r6, #0
 800a39c:	e7b1      	b.n	800a302 <_strtod_l+0x992>
 800a39e:	4f34      	ldr	r7, [pc, #208]	@ (800a470 <_strtod_l+0xb00>)
 800a3a0:	2600      	movs	r6, #0
 800a3a2:	e7aa      	b.n	800a2fa <_strtod_l+0x98a>
 800a3a4:	4b32      	ldr	r3, [pc, #200]	@ (800a470 <_strtod_l+0xb00>)
 800a3a6:	4630      	mov	r0, r6
 800a3a8:	4639      	mov	r1, r7
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f7f6 f944 	bl	8000638 <__aeabi_dmul>
 800a3b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3b2:	4606      	mov	r6, r0
 800a3b4:	460f      	mov	r7, r1
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d09f      	beq.n	800a2fa <_strtod_l+0x98a>
 800a3ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a3be:	e7a0      	b.n	800a302 <_strtod_l+0x992>
 800a3c0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a448 <_strtod_l+0xad8>
 800a3c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a3c8:	ec57 6b17 	vmov	r6, r7, d7
 800a3cc:	e799      	b.n	800a302 <_strtod_l+0x992>
 800a3ce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a3d2:	9b08      	ldr	r3, [sp, #32]
 800a3d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d1c1      	bne.n	800a360 <_strtod_l+0x9f0>
 800a3dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a3e0:	0d1b      	lsrs	r3, r3, #20
 800a3e2:	051b      	lsls	r3, r3, #20
 800a3e4:	429d      	cmp	r5, r3
 800a3e6:	d1bb      	bne.n	800a360 <_strtod_l+0x9f0>
 800a3e8:	4630      	mov	r0, r6
 800a3ea:	4639      	mov	r1, r7
 800a3ec:	f7f6 fc84 	bl	8000cf8 <__aeabi_d2lz>
 800a3f0:	f7f6 f8f4 	bl	80005dc <__aeabi_l2d>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	4630      	mov	r0, r6
 800a3fa:	4639      	mov	r1, r7
 800a3fc:	f7f5 ff64 	bl	80002c8 <__aeabi_dsub>
 800a400:	460b      	mov	r3, r1
 800a402:	4602      	mov	r2, r0
 800a404:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a408:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a40c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a40e:	ea46 060a 	orr.w	r6, r6, sl
 800a412:	431e      	orrs	r6, r3
 800a414:	d06f      	beq.n	800a4f6 <_strtod_l+0xb86>
 800a416:	a30e      	add	r3, pc, #56	@ (adr r3, 800a450 <_strtod_l+0xae0>)
 800a418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41c:	f7f6 fb7e 	bl	8000b1c <__aeabi_dcmplt>
 800a420:	2800      	cmp	r0, #0
 800a422:	f47f accf 	bne.w	8009dc4 <_strtod_l+0x454>
 800a426:	a30c      	add	r3, pc, #48	@ (adr r3, 800a458 <_strtod_l+0xae8>)
 800a428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a430:	f7f6 fb92 	bl	8000b58 <__aeabi_dcmpgt>
 800a434:	2800      	cmp	r0, #0
 800a436:	d093      	beq.n	800a360 <_strtod_l+0x9f0>
 800a438:	e4c4      	b.n	8009dc4 <_strtod_l+0x454>
 800a43a:	bf00      	nop
 800a43c:	f3af 8000 	nop.w
 800a440:	00000000 	.word	0x00000000
 800a444:	bff00000 	.word	0xbff00000
 800a448:	00000000 	.word	0x00000000
 800a44c:	3ff00000 	.word	0x3ff00000
 800a450:	94a03595 	.word	0x94a03595
 800a454:	3fdfffff 	.word	0x3fdfffff
 800a458:	35afe535 	.word	0x35afe535
 800a45c:	3fe00000 	.word	0x3fe00000
 800a460:	000fffff 	.word	0x000fffff
 800a464:	7ff00000 	.word	0x7ff00000
 800a468:	7fefffff 	.word	0x7fefffff
 800a46c:	3ff00000 	.word	0x3ff00000
 800a470:	3fe00000 	.word	0x3fe00000
 800a474:	7fe00000 	.word	0x7fe00000
 800a478:	7c9fffff 	.word	0x7c9fffff
 800a47c:	9b08      	ldr	r3, [sp, #32]
 800a47e:	b323      	cbz	r3, 800a4ca <_strtod_l+0xb5a>
 800a480:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a484:	d821      	bhi.n	800a4ca <_strtod_l+0xb5a>
 800a486:	a328      	add	r3, pc, #160	@ (adr r3, 800a528 <_strtod_l+0xbb8>)
 800a488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a48c:	4630      	mov	r0, r6
 800a48e:	4639      	mov	r1, r7
 800a490:	f7f6 fb4e 	bl	8000b30 <__aeabi_dcmple>
 800a494:	b1a0      	cbz	r0, 800a4c0 <_strtod_l+0xb50>
 800a496:	4639      	mov	r1, r7
 800a498:	4630      	mov	r0, r6
 800a49a:	f7f6 fba5 	bl	8000be8 <__aeabi_d2uiz>
 800a49e:	2801      	cmp	r0, #1
 800a4a0:	bf38      	it	cc
 800a4a2:	2001      	movcc	r0, #1
 800a4a4:	f7f6 f84e 	bl	8000544 <__aeabi_ui2d>
 800a4a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4aa:	4606      	mov	r6, r0
 800a4ac:	460f      	mov	r7, r1
 800a4ae:	b9fb      	cbnz	r3, 800a4f0 <_strtod_l+0xb80>
 800a4b0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a4b4:	9014      	str	r0, [sp, #80]	@ 0x50
 800a4b6:	9315      	str	r3, [sp, #84]	@ 0x54
 800a4b8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a4bc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a4c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a4c2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a4c6:	1b5b      	subs	r3, r3, r5
 800a4c8:	9311      	str	r3, [sp, #68]	@ 0x44
 800a4ca:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a4ce:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a4d2:	f002 ff61 	bl	800d398 <__ulp>
 800a4d6:	4650      	mov	r0, sl
 800a4d8:	ec53 2b10 	vmov	r2, r3, d0
 800a4dc:	4659      	mov	r1, fp
 800a4de:	f7f6 f8ab 	bl	8000638 <__aeabi_dmul>
 800a4e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a4e6:	f7f5 fef1 	bl	80002cc <__adddf3>
 800a4ea:	4682      	mov	sl, r0
 800a4ec:	468b      	mov	fp, r1
 800a4ee:	e770      	b.n	800a3d2 <_strtod_l+0xa62>
 800a4f0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a4f4:	e7e0      	b.n	800a4b8 <_strtod_l+0xb48>
 800a4f6:	a30e      	add	r3, pc, #56	@ (adr r3, 800a530 <_strtod_l+0xbc0>)
 800a4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fc:	f7f6 fb0e 	bl	8000b1c <__aeabi_dcmplt>
 800a500:	e798      	b.n	800a434 <_strtod_l+0xac4>
 800a502:	2300      	movs	r3, #0
 800a504:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a506:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a508:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a50a:	6013      	str	r3, [r2, #0]
 800a50c:	f7ff ba6d 	b.w	80099ea <_strtod_l+0x7a>
 800a510:	2a65      	cmp	r2, #101	@ 0x65
 800a512:	f43f ab66 	beq.w	8009be2 <_strtod_l+0x272>
 800a516:	2a45      	cmp	r2, #69	@ 0x45
 800a518:	f43f ab63 	beq.w	8009be2 <_strtod_l+0x272>
 800a51c:	2301      	movs	r3, #1
 800a51e:	f7ff bb9e 	b.w	8009c5e <_strtod_l+0x2ee>
 800a522:	bf00      	nop
 800a524:	f3af 8000 	nop.w
 800a528:	ffc00000 	.word	0xffc00000
 800a52c:	41dfffff 	.word	0x41dfffff
 800a530:	94a03595 	.word	0x94a03595
 800a534:	3fcfffff 	.word	0x3fcfffff

0800a538 <_strtod_r>:
 800a538:	4b01      	ldr	r3, [pc, #4]	@ (800a540 <_strtod_r+0x8>)
 800a53a:	f7ff ba19 	b.w	8009970 <_strtod_l>
 800a53e:	bf00      	nop
 800a540:	2000002c 	.word	0x2000002c

0800a544 <strtof>:
 800a544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a548:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800a608 <strtof+0xc4>
 800a54c:	4b29      	ldr	r3, [pc, #164]	@ (800a5f4 <strtof+0xb0>)
 800a54e:	460a      	mov	r2, r1
 800a550:	ed2d 8b02 	vpush	{d8}
 800a554:	4601      	mov	r1, r0
 800a556:	f8d8 0000 	ldr.w	r0, [r8]
 800a55a:	f7ff fa09 	bl	8009970 <_strtod_l>
 800a55e:	ec55 4b10 	vmov	r4, r5, d0
 800a562:	4622      	mov	r2, r4
 800a564:	462b      	mov	r3, r5
 800a566:	4620      	mov	r0, r4
 800a568:	4629      	mov	r1, r5
 800a56a:	f7f6 faff 	bl	8000b6c <__aeabi_dcmpun>
 800a56e:	b190      	cbz	r0, 800a596 <strtof+0x52>
 800a570:	2d00      	cmp	r5, #0
 800a572:	4821      	ldr	r0, [pc, #132]	@ (800a5f8 <strtof+0xb4>)
 800a574:	da09      	bge.n	800a58a <strtof+0x46>
 800a576:	f001 f8df 	bl	800b738 <nanf>
 800a57a:	eeb1 8a40 	vneg.f32	s16, s0
 800a57e:	eeb0 0a48 	vmov.f32	s0, s16
 800a582:	ecbd 8b02 	vpop	{d8}
 800a586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a58a:	ecbd 8b02 	vpop	{d8}
 800a58e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a592:	f001 b8d1 	b.w	800b738 <nanf>
 800a596:	4620      	mov	r0, r4
 800a598:	4629      	mov	r1, r5
 800a59a:	f7f6 fb45 	bl	8000c28 <__aeabi_d2f>
 800a59e:	ee08 0a10 	vmov	s16, r0
 800a5a2:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800a5fc <strtof+0xb8>
 800a5a6:	eeb0 7ac8 	vabs.f32	s14, s16
 800a5aa:	eeb4 7a67 	vcmp.f32	s14, s15
 800a5ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5b2:	dd11      	ble.n	800a5d8 <strtof+0x94>
 800a5b4:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800a5b8:	4b11      	ldr	r3, [pc, #68]	@ (800a600 <strtof+0xbc>)
 800a5ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a5be:	4620      	mov	r0, r4
 800a5c0:	4639      	mov	r1, r7
 800a5c2:	f7f6 fad3 	bl	8000b6c <__aeabi_dcmpun>
 800a5c6:	b980      	cbnz	r0, 800a5ea <strtof+0xa6>
 800a5c8:	4b0d      	ldr	r3, [pc, #52]	@ (800a600 <strtof+0xbc>)
 800a5ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	4639      	mov	r1, r7
 800a5d2:	f7f6 faad 	bl	8000b30 <__aeabi_dcmple>
 800a5d6:	b940      	cbnz	r0, 800a5ea <strtof+0xa6>
 800a5d8:	ee18 3a10 	vmov	r3, s16
 800a5dc:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800a5e0:	d1cd      	bne.n	800a57e <strtof+0x3a>
 800a5e2:	4b08      	ldr	r3, [pc, #32]	@ (800a604 <strtof+0xc0>)
 800a5e4:	402b      	ands	r3, r5
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d0c9      	beq.n	800a57e <strtof+0x3a>
 800a5ea:	f8d8 3000 	ldr.w	r3, [r8]
 800a5ee:	2222      	movs	r2, #34	@ 0x22
 800a5f0:	601a      	str	r2, [r3, #0]
 800a5f2:	e7c4      	b.n	800a57e <strtof+0x3a>
 800a5f4:	2000002c 	.word	0x2000002c
 800a5f8:	0800e415 	.word	0x0800e415
 800a5fc:	7f7fffff 	.word	0x7f7fffff
 800a600:	7fefffff 	.word	0x7fefffff
 800a604:	7ff00000 	.word	0x7ff00000
 800a608:	20000198 	.word	0x20000198

0800a60c <__cvt>:
 800a60c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a610:	ec57 6b10 	vmov	r6, r7, d0
 800a614:	2f00      	cmp	r7, #0
 800a616:	460c      	mov	r4, r1
 800a618:	4619      	mov	r1, r3
 800a61a:	463b      	mov	r3, r7
 800a61c:	bfbb      	ittet	lt
 800a61e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a622:	461f      	movlt	r7, r3
 800a624:	2300      	movge	r3, #0
 800a626:	232d      	movlt	r3, #45	@ 0x2d
 800a628:	700b      	strb	r3, [r1, #0]
 800a62a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a62c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a630:	4691      	mov	r9, r2
 800a632:	f023 0820 	bic.w	r8, r3, #32
 800a636:	bfbc      	itt	lt
 800a638:	4632      	movlt	r2, r6
 800a63a:	4616      	movlt	r6, r2
 800a63c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a640:	d005      	beq.n	800a64e <__cvt+0x42>
 800a642:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a646:	d100      	bne.n	800a64a <__cvt+0x3e>
 800a648:	3401      	adds	r4, #1
 800a64a:	2102      	movs	r1, #2
 800a64c:	e000      	b.n	800a650 <__cvt+0x44>
 800a64e:	2103      	movs	r1, #3
 800a650:	ab03      	add	r3, sp, #12
 800a652:	9301      	str	r3, [sp, #4]
 800a654:	ab02      	add	r3, sp, #8
 800a656:	9300      	str	r3, [sp, #0]
 800a658:	ec47 6b10 	vmov	d0, r6, r7
 800a65c:	4653      	mov	r3, sl
 800a65e:	4622      	mov	r2, r4
 800a660:	f001 f916 	bl	800b890 <_dtoa_r>
 800a664:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a668:	4605      	mov	r5, r0
 800a66a:	d119      	bne.n	800a6a0 <__cvt+0x94>
 800a66c:	f019 0f01 	tst.w	r9, #1
 800a670:	d00e      	beq.n	800a690 <__cvt+0x84>
 800a672:	eb00 0904 	add.w	r9, r0, r4
 800a676:	2200      	movs	r2, #0
 800a678:	2300      	movs	r3, #0
 800a67a:	4630      	mov	r0, r6
 800a67c:	4639      	mov	r1, r7
 800a67e:	f7f6 fa43 	bl	8000b08 <__aeabi_dcmpeq>
 800a682:	b108      	cbz	r0, 800a688 <__cvt+0x7c>
 800a684:	f8cd 900c 	str.w	r9, [sp, #12]
 800a688:	2230      	movs	r2, #48	@ 0x30
 800a68a:	9b03      	ldr	r3, [sp, #12]
 800a68c:	454b      	cmp	r3, r9
 800a68e:	d31e      	bcc.n	800a6ce <__cvt+0xc2>
 800a690:	9b03      	ldr	r3, [sp, #12]
 800a692:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a694:	1b5b      	subs	r3, r3, r5
 800a696:	4628      	mov	r0, r5
 800a698:	6013      	str	r3, [r2, #0]
 800a69a:	b004      	add	sp, #16
 800a69c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a6a4:	eb00 0904 	add.w	r9, r0, r4
 800a6a8:	d1e5      	bne.n	800a676 <__cvt+0x6a>
 800a6aa:	7803      	ldrb	r3, [r0, #0]
 800a6ac:	2b30      	cmp	r3, #48	@ 0x30
 800a6ae:	d10a      	bne.n	800a6c6 <__cvt+0xba>
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	4630      	mov	r0, r6
 800a6b6:	4639      	mov	r1, r7
 800a6b8:	f7f6 fa26 	bl	8000b08 <__aeabi_dcmpeq>
 800a6bc:	b918      	cbnz	r0, 800a6c6 <__cvt+0xba>
 800a6be:	f1c4 0401 	rsb	r4, r4, #1
 800a6c2:	f8ca 4000 	str.w	r4, [sl]
 800a6c6:	f8da 3000 	ldr.w	r3, [sl]
 800a6ca:	4499      	add	r9, r3
 800a6cc:	e7d3      	b.n	800a676 <__cvt+0x6a>
 800a6ce:	1c59      	adds	r1, r3, #1
 800a6d0:	9103      	str	r1, [sp, #12]
 800a6d2:	701a      	strb	r2, [r3, #0]
 800a6d4:	e7d9      	b.n	800a68a <__cvt+0x7e>

0800a6d6 <__exponent>:
 800a6d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6d8:	2900      	cmp	r1, #0
 800a6da:	bfba      	itte	lt
 800a6dc:	4249      	neglt	r1, r1
 800a6de:	232d      	movlt	r3, #45	@ 0x2d
 800a6e0:	232b      	movge	r3, #43	@ 0x2b
 800a6e2:	2909      	cmp	r1, #9
 800a6e4:	7002      	strb	r2, [r0, #0]
 800a6e6:	7043      	strb	r3, [r0, #1]
 800a6e8:	dd29      	ble.n	800a73e <__exponent+0x68>
 800a6ea:	f10d 0307 	add.w	r3, sp, #7
 800a6ee:	461d      	mov	r5, r3
 800a6f0:	270a      	movs	r7, #10
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	fbb1 f6f7 	udiv	r6, r1, r7
 800a6f8:	fb07 1416 	mls	r4, r7, r6, r1
 800a6fc:	3430      	adds	r4, #48	@ 0x30
 800a6fe:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a702:	460c      	mov	r4, r1
 800a704:	2c63      	cmp	r4, #99	@ 0x63
 800a706:	f103 33ff 	add.w	r3, r3, #4294967295
 800a70a:	4631      	mov	r1, r6
 800a70c:	dcf1      	bgt.n	800a6f2 <__exponent+0x1c>
 800a70e:	3130      	adds	r1, #48	@ 0x30
 800a710:	1e94      	subs	r4, r2, #2
 800a712:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a716:	1c41      	adds	r1, r0, #1
 800a718:	4623      	mov	r3, r4
 800a71a:	42ab      	cmp	r3, r5
 800a71c:	d30a      	bcc.n	800a734 <__exponent+0x5e>
 800a71e:	f10d 0309 	add.w	r3, sp, #9
 800a722:	1a9b      	subs	r3, r3, r2
 800a724:	42ac      	cmp	r4, r5
 800a726:	bf88      	it	hi
 800a728:	2300      	movhi	r3, #0
 800a72a:	3302      	adds	r3, #2
 800a72c:	4403      	add	r3, r0
 800a72e:	1a18      	subs	r0, r3, r0
 800a730:	b003      	add	sp, #12
 800a732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a734:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a738:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a73c:	e7ed      	b.n	800a71a <__exponent+0x44>
 800a73e:	2330      	movs	r3, #48	@ 0x30
 800a740:	3130      	adds	r1, #48	@ 0x30
 800a742:	7083      	strb	r3, [r0, #2]
 800a744:	70c1      	strb	r1, [r0, #3]
 800a746:	1d03      	adds	r3, r0, #4
 800a748:	e7f1      	b.n	800a72e <__exponent+0x58>
	...

0800a74c <_printf_float>:
 800a74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a750:	b08d      	sub	sp, #52	@ 0x34
 800a752:	460c      	mov	r4, r1
 800a754:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a758:	4616      	mov	r6, r2
 800a75a:	461f      	mov	r7, r3
 800a75c:	4605      	mov	r5, r0
 800a75e:	f000 ff5d 	bl	800b61c <_localeconv_r>
 800a762:	6803      	ldr	r3, [r0, #0]
 800a764:	9304      	str	r3, [sp, #16]
 800a766:	4618      	mov	r0, r3
 800a768:	f7f5 fda2 	bl	80002b0 <strlen>
 800a76c:	2300      	movs	r3, #0
 800a76e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a770:	f8d8 3000 	ldr.w	r3, [r8]
 800a774:	9005      	str	r0, [sp, #20]
 800a776:	3307      	adds	r3, #7
 800a778:	f023 0307 	bic.w	r3, r3, #7
 800a77c:	f103 0208 	add.w	r2, r3, #8
 800a780:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a784:	f8d4 b000 	ldr.w	fp, [r4]
 800a788:	f8c8 2000 	str.w	r2, [r8]
 800a78c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a790:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a794:	9307      	str	r3, [sp, #28]
 800a796:	f8cd 8018 	str.w	r8, [sp, #24]
 800a79a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a79e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7a2:	4b9c      	ldr	r3, [pc, #624]	@ (800aa14 <_printf_float+0x2c8>)
 800a7a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a7a8:	f7f6 f9e0 	bl	8000b6c <__aeabi_dcmpun>
 800a7ac:	bb70      	cbnz	r0, 800a80c <_printf_float+0xc0>
 800a7ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7b2:	4b98      	ldr	r3, [pc, #608]	@ (800aa14 <_printf_float+0x2c8>)
 800a7b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a7b8:	f7f6 f9ba 	bl	8000b30 <__aeabi_dcmple>
 800a7bc:	bb30      	cbnz	r0, 800a80c <_printf_float+0xc0>
 800a7be:	2200      	movs	r2, #0
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	4640      	mov	r0, r8
 800a7c4:	4649      	mov	r1, r9
 800a7c6:	f7f6 f9a9 	bl	8000b1c <__aeabi_dcmplt>
 800a7ca:	b110      	cbz	r0, 800a7d2 <_printf_float+0x86>
 800a7cc:	232d      	movs	r3, #45	@ 0x2d
 800a7ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7d2:	4a91      	ldr	r2, [pc, #580]	@ (800aa18 <_printf_float+0x2cc>)
 800a7d4:	4b91      	ldr	r3, [pc, #580]	@ (800aa1c <_printf_float+0x2d0>)
 800a7d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a7da:	bf94      	ite	ls
 800a7dc:	4690      	movls	r8, r2
 800a7de:	4698      	movhi	r8, r3
 800a7e0:	2303      	movs	r3, #3
 800a7e2:	6123      	str	r3, [r4, #16]
 800a7e4:	f02b 0304 	bic.w	r3, fp, #4
 800a7e8:	6023      	str	r3, [r4, #0]
 800a7ea:	f04f 0900 	mov.w	r9, #0
 800a7ee:	9700      	str	r7, [sp, #0]
 800a7f0:	4633      	mov	r3, r6
 800a7f2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a7f4:	4621      	mov	r1, r4
 800a7f6:	4628      	mov	r0, r5
 800a7f8:	f000 f9d2 	bl	800aba0 <_printf_common>
 800a7fc:	3001      	adds	r0, #1
 800a7fe:	f040 808d 	bne.w	800a91c <_printf_float+0x1d0>
 800a802:	f04f 30ff 	mov.w	r0, #4294967295
 800a806:	b00d      	add	sp, #52	@ 0x34
 800a808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a80c:	4642      	mov	r2, r8
 800a80e:	464b      	mov	r3, r9
 800a810:	4640      	mov	r0, r8
 800a812:	4649      	mov	r1, r9
 800a814:	f7f6 f9aa 	bl	8000b6c <__aeabi_dcmpun>
 800a818:	b140      	cbz	r0, 800a82c <_printf_float+0xe0>
 800a81a:	464b      	mov	r3, r9
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	bfbc      	itt	lt
 800a820:	232d      	movlt	r3, #45	@ 0x2d
 800a822:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a826:	4a7e      	ldr	r2, [pc, #504]	@ (800aa20 <_printf_float+0x2d4>)
 800a828:	4b7e      	ldr	r3, [pc, #504]	@ (800aa24 <_printf_float+0x2d8>)
 800a82a:	e7d4      	b.n	800a7d6 <_printf_float+0x8a>
 800a82c:	6863      	ldr	r3, [r4, #4]
 800a82e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a832:	9206      	str	r2, [sp, #24]
 800a834:	1c5a      	adds	r2, r3, #1
 800a836:	d13b      	bne.n	800a8b0 <_printf_float+0x164>
 800a838:	2306      	movs	r3, #6
 800a83a:	6063      	str	r3, [r4, #4]
 800a83c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a840:	2300      	movs	r3, #0
 800a842:	6022      	str	r2, [r4, #0]
 800a844:	9303      	str	r3, [sp, #12]
 800a846:	ab0a      	add	r3, sp, #40	@ 0x28
 800a848:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a84c:	ab09      	add	r3, sp, #36	@ 0x24
 800a84e:	9300      	str	r3, [sp, #0]
 800a850:	6861      	ldr	r1, [r4, #4]
 800a852:	ec49 8b10 	vmov	d0, r8, r9
 800a856:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a85a:	4628      	mov	r0, r5
 800a85c:	f7ff fed6 	bl	800a60c <__cvt>
 800a860:	9b06      	ldr	r3, [sp, #24]
 800a862:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a864:	2b47      	cmp	r3, #71	@ 0x47
 800a866:	4680      	mov	r8, r0
 800a868:	d129      	bne.n	800a8be <_printf_float+0x172>
 800a86a:	1cc8      	adds	r0, r1, #3
 800a86c:	db02      	blt.n	800a874 <_printf_float+0x128>
 800a86e:	6863      	ldr	r3, [r4, #4]
 800a870:	4299      	cmp	r1, r3
 800a872:	dd41      	ble.n	800a8f8 <_printf_float+0x1ac>
 800a874:	f1aa 0a02 	sub.w	sl, sl, #2
 800a878:	fa5f fa8a 	uxtb.w	sl, sl
 800a87c:	3901      	subs	r1, #1
 800a87e:	4652      	mov	r2, sl
 800a880:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a884:	9109      	str	r1, [sp, #36]	@ 0x24
 800a886:	f7ff ff26 	bl	800a6d6 <__exponent>
 800a88a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a88c:	1813      	adds	r3, r2, r0
 800a88e:	2a01      	cmp	r2, #1
 800a890:	4681      	mov	r9, r0
 800a892:	6123      	str	r3, [r4, #16]
 800a894:	dc02      	bgt.n	800a89c <_printf_float+0x150>
 800a896:	6822      	ldr	r2, [r4, #0]
 800a898:	07d2      	lsls	r2, r2, #31
 800a89a:	d501      	bpl.n	800a8a0 <_printf_float+0x154>
 800a89c:	3301      	adds	r3, #1
 800a89e:	6123      	str	r3, [r4, #16]
 800a8a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d0a2      	beq.n	800a7ee <_printf_float+0xa2>
 800a8a8:	232d      	movs	r3, #45	@ 0x2d
 800a8aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a8ae:	e79e      	b.n	800a7ee <_printf_float+0xa2>
 800a8b0:	9a06      	ldr	r2, [sp, #24]
 800a8b2:	2a47      	cmp	r2, #71	@ 0x47
 800a8b4:	d1c2      	bne.n	800a83c <_printf_float+0xf0>
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d1c0      	bne.n	800a83c <_printf_float+0xf0>
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	e7bd      	b.n	800a83a <_printf_float+0xee>
 800a8be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a8c2:	d9db      	bls.n	800a87c <_printf_float+0x130>
 800a8c4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a8c8:	d118      	bne.n	800a8fc <_printf_float+0x1b0>
 800a8ca:	2900      	cmp	r1, #0
 800a8cc:	6863      	ldr	r3, [r4, #4]
 800a8ce:	dd0b      	ble.n	800a8e8 <_printf_float+0x19c>
 800a8d0:	6121      	str	r1, [r4, #16]
 800a8d2:	b913      	cbnz	r3, 800a8da <_printf_float+0x18e>
 800a8d4:	6822      	ldr	r2, [r4, #0]
 800a8d6:	07d0      	lsls	r0, r2, #31
 800a8d8:	d502      	bpl.n	800a8e0 <_printf_float+0x194>
 800a8da:	3301      	adds	r3, #1
 800a8dc:	440b      	add	r3, r1
 800a8de:	6123      	str	r3, [r4, #16]
 800a8e0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a8e2:	f04f 0900 	mov.w	r9, #0
 800a8e6:	e7db      	b.n	800a8a0 <_printf_float+0x154>
 800a8e8:	b913      	cbnz	r3, 800a8f0 <_printf_float+0x1a4>
 800a8ea:	6822      	ldr	r2, [r4, #0]
 800a8ec:	07d2      	lsls	r2, r2, #31
 800a8ee:	d501      	bpl.n	800a8f4 <_printf_float+0x1a8>
 800a8f0:	3302      	adds	r3, #2
 800a8f2:	e7f4      	b.n	800a8de <_printf_float+0x192>
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	e7f2      	b.n	800a8de <_printf_float+0x192>
 800a8f8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a8fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8fe:	4299      	cmp	r1, r3
 800a900:	db05      	blt.n	800a90e <_printf_float+0x1c2>
 800a902:	6823      	ldr	r3, [r4, #0]
 800a904:	6121      	str	r1, [r4, #16]
 800a906:	07d8      	lsls	r0, r3, #31
 800a908:	d5ea      	bpl.n	800a8e0 <_printf_float+0x194>
 800a90a:	1c4b      	adds	r3, r1, #1
 800a90c:	e7e7      	b.n	800a8de <_printf_float+0x192>
 800a90e:	2900      	cmp	r1, #0
 800a910:	bfd4      	ite	le
 800a912:	f1c1 0202 	rsble	r2, r1, #2
 800a916:	2201      	movgt	r2, #1
 800a918:	4413      	add	r3, r2
 800a91a:	e7e0      	b.n	800a8de <_printf_float+0x192>
 800a91c:	6823      	ldr	r3, [r4, #0]
 800a91e:	055a      	lsls	r2, r3, #21
 800a920:	d407      	bmi.n	800a932 <_printf_float+0x1e6>
 800a922:	6923      	ldr	r3, [r4, #16]
 800a924:	4642      	mov	r2, r8
 800a926:	4631      	mov	r1, r6
 800a928:	4628      	mov	r0, r5
 800a92a:	47b8      	blx	r7
 800a92c:	3001      	adds	r0, #1
 800a92e:	d12b      	bne.n	800a988 <_printf_float+0x23c>
 800a930:	e767      	b.n	800a802 <_printf_float+0xb6>
 800a932:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a936:	f240 80dd 	bls.w	800aaf4 <_printf_float+0x3a8>
 800a93a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a93e:	2200      	movs	r2, #0
 800a940:	2300      	movs	r3, #0
 800a942:	f7f6 f8e1 	bl	8000b08 <__aeabi_dcmpeq>
 800a946:	2800      	cmp	r0, #0
 800a948:	d033      	beq.n	800a9b2 <_printf_float+0x266>
 800a94a:	4a37      	ldr	r2, [pc, #220]	@ (800aa28 <_printf_float+0x2dc>)
 800a94c:	2301      	movs	r3, #1
 800a94e:	4631      	mov	r1, r6
 800a950:	4628      	mov	r0, r5
 800a952:	47b8      	blx	r7
 800a954:	3001      	adds	r0, #1
 800a956:	f43f af54 	beq.w	800a802 <_printf_float+0xb6>
 800a95a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a95e:	4543      	cmp	r3, r8
 800a960:	db02      	blt.n	800a968 <_printf_float+0x21c>
 800a962:	6823      	ldr	r3, [r4, #0]
 800a964:	07d8      	lsls	r0, r3, #31
 800a966:	d50f      	bpl.n	800a988 <_printf_float+0x23c>
 800a968:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a96c:	4631      	mov	r1, r6
 800a96e:	4628      	mov	r0, r5
 800a970:	47b8      	blx	r7
 800a972:	3001      	adds	r0, #1
 800a974:	f43f af45 	beq.w	800a802 <_printf_float+0xb6>
 800a978:	f04f 0900 	mov.w	r9, #0
 800a97c:	f108 38ff 	add.w	r8, r8, #4294967295
 800a980:	f104 0a1a 	add.w	sl, r4, #26
 800a984:	45c8      	cmp	r8, r9
 800a986:	dc09      	bgt.n	800a99c <_printf_float+0x250>
 800a988:	6823      	ldr	r3, [r4, #0]
 800a98a:	079b      	lsls	r3, r3, #30
 800a98c:	f100 8103 	bmi.w	800ab96 <_printf_float+0x44a>
 800a990:	68e0      	ldr	r0, [r4, #12]
 800a992:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a994:	4298      	cmp	r0, r3
 800a996:	bfb8      	it	lt
 800a998:	4618      	movlt	r0, r3
 800a99a:	e734      	b.n	800a806 <_printf_float+0xba>
 800a99c:	2301      	movs	r3, #1
 800a99e:	4652      	mov	r2, sl
 800a9a0:	4631      	mov	r1, r6
 800a9a2:	4628      	mov	r0, r5
 800a9a4:	47b8      	blx	r7
 800a9a6:	3001      	adds	r0, #1
 800a9a8:	f43f af2b 	beq.w	800a802 <_printf_float+0xb6>
 800a9ac:	f109 0901 	add.w	r9, r9, #1
 800a9b0:	e7e8      	b.n	800a984 <_printf_float+0x238>
 800a9b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	dc39      	bgt.n	800aa2c <_printf_float+0x2e0>
 800a9b8:	4a1b      	ldr	r2, [pc, #108]	@ (800aa28 <_printf_float+0x2dc>)
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	4631      	mov	r1, r6
 800a9be:	4628      	mov	r0, r5
 800a9c0:	47b8      	blx	r7
 800a9c2:	3001      	adds	r0, #1
 800a9c4:	f43f af1d 	beq.w	800a802 <_printf_float+0xb6>
 800a9c8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a9cc:	ea59 0303 	orrs.w	r3, r9, r3
 800a9d0:	d102      	bne.n	800a9d8 <_printf_float+0x28c>
 800a9d2:	6823      	ldr	r3, [r4, #0]
 800a9d4:	07d9      	lsls	r1, r3, #31
 800a9d6:	d5d7      	bpl.n	800a988 <_printf_float+0x23c>
 800a9d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9dc:	4631      	mov	r1, r6
 800a9de:	4628      	mov	r0, r5
 800a9e0:	47b8      	blx	r7
 800a9e2:	3001      	adds	r0, #1
 800a9e4:	f43f af0d 	beq.w	800a802 <_printf_float+0xb6>
 800a9e8:	f04f 0a00 	mov.w	sl, #0
 800a9ec:	f104 0b1a 	add.w	fp, r4, #26
 800a9f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9f2:	425b      	negs	r3, r3
 800a9f4:	4553      	cmp	r3, sl
 800a9f6:	dc01      	bgt.n	800a9fc <_printf_float+0x2b0>
 800a9f8:	464b      	mov	r3, r9
 800a9fa:	e793      	b.n	800a924 <_printf_float+0x1d8>
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	465a      	mov	r2, fp
 800aa00:	4631      	mov	r1, r6
 800aa02:	4628      	mov	r0, r5
 800aa04:	47b8      	blx	r7
 800aa06:	3001      	adds	r0, #1
 800aa08:	f43f aefb 	beq.w	800a802 <_printf_float+0xb6>
 800aa0c:	f10a 0a01 	add.w	sl, sl, #1
 800aa10:	e7ee      	b.n	800a9f0 <_printf_float+0x2a4>
 800aa12:	bf00      	nop
 800aa14:	7fefffff 	.word	0x7fefffff
 800aa18:	0800e328 	.word	0x0800e328
 800aa1c:	0800e32c 	.word	0x0800e32c
 800aa20:	0800e330 	.word	0x0800e330
 800aa24:	0800e334 	.word	0x0800e334
 800aa28:	0800e338 	.word	0x0800e338
 800aa2c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aa2e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aa32:	4553      	cmp	r3, sl
 800aa34:	bfa8      	it	ge
 800aa36:	4653      	movge	r3, sl
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	4699      	mov	r9, r3
 800aa3c:	dc36      	bgt.n	800aaac <_printf_float+0x360>
 800aa3e:	f04f 0b00 	mov.w	fp, #0
 800aa42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa46:	f104 021a 	add.w	r2, r4, #26
 800aa4a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aa4c:	9306      	str	r3, [sp, #24]
 800aa4e:	eba3 0309 	sub.w	r3, r3, r9
 800aa52:	455b      	cmp	r3, fp
 800aa54:	dc31      	bgt.n	800aaba <_printf_float+0x36e>
 800aa56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa58:	459a      	cmp	sl, r3
 800aa5a:	dc3a      	bgt.n	800aad2 <_printf_float+0x386>
 800aa5c:	6823      	ldr	r3, [r4, #0]
 800aa5e:	07da      	lsls	r2, r3, #31
 800aa60:	d437      	bmi.n	800aad2 <_printf_float+0x386>
 800aa62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa64:	ebaa 0903 	sub.w	r9, sl, r3
 800aa68:	9b06      	ldr	r3, [sp, #24]
 800aa6a:	ebaa 0303 	sub.w	r3, sl, r3
 800aa6e:	4599      	cmp	r9, r3
 800aa70:	bfa8      	it	ge
 800aa72:	4699      	movge	r9, r3
 800aa74:	f1b9 0f00 	cmp.w	r9, #0
 800aa78:	dc33      	bgt.n	800aae2 <_printf_float+0x396>
 800aa7a:	f04f 0800 	mov.w	r8, #0
 800aa7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa82:	f104 0b1a 	add.w	fp, r4, #26
 800aa86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa88:	ebaa 0303 	sub.w	r3, sl, r3
 800aa8c:	eba3 0309 	sub.w	r3, r3, r9
 800aa90:	4543      	cmp	r3, r8
 800aa92:	f77f af79 	ble.w	800a988 <_printf_float+0x23c>
 800aa96:	2301      	movs	r3, #1
 800aa98:	465a      	mov	r2, fp
 800aa9a:	4631      	mov	r1, r6
 800aa9c:	4628      	mov	r0, r5
 800aa9e:	47b8      	blx	r7
 800aaa0:	3001      	adds	r0, #1
 800aaa2:	f43f aeae 	beq.w	800a802 <_printf_float+0xb6>
 800aaa6:	f108 0801 	add.w	r8, r8, #1
 800aaaa:	e7ec      	b.n	800aa86 <_printf_float+0x33a>
 800aaac:	4642      	mov	r2, r8
 800aaae:	4631      	mov	r1, r6
 800aab0:	4628      	mov	r0, r5
 800aab2:	47b8      	blx	r7
 800aab4:	3001      	adds	r0, #1
 800aab6:	d1c2      	bne.n	800aa3e <_printf_float+0x2f2>
 800aab8:	e6a3      	b.n	800a802 <_printf_float+0xb6>
 800aaba:	2301      	movs	r3, #1
 800aabc:	4631      	mov	r1, r6
 800aabe:	4628      	mov	r0, r5
 800aac0:	9206      	str	r2, [sp, #24]
 800aac2:	47b8      	blx	r7
 800aac4:	3001      	adds	r0, #1
 800aac6:	f43f ae9c 	beq.w	800a802 <_printf_float+0xb6>
 800aaca:	9a06      	ldr	r2, [sp, #24]
 800aacc:	f10b 0b01 	add.w	fp, fp, #1
 800aad0:	e7bb      	b.n	800aa4a <_printf_float+0x2fe>
 800aad2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aad6:	4631      	mov	r1, r6
 800aad8:	4628      	mov	r0, r5
 800aada:	47b8      	blx	r7
 800aadc:	3001      	adds	r0, #1
 800aade:	d1c0      	bne.n	800aa62 <_printf_float+0x316>
 800aae0:	e68f      	b.n	800a802 <_printf_float+0xb6>
 800aae2:	9a06      	ldr	r2, [sp, #24]
 800aae4:	464b      	mov	r3, r9
 800aae6:	4442      	add	r2, r8
 800aae8:	4631      	mov	r1, r6
 800aaea:	4628      	mov	r0, r5
 800aaec:	47b8      	blx	r7
 800aaee:	3001      	adds	r0, #1
 800aaf0:	d1c3      	bne.n	800aa7a <_printf_float+0x32e>
 800aaf2:	e686      	b.n	800a802 <_printf_float+0xb6>
 800aaf4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aaf8:	f1ba 0f01 	cmp.w	sl, #1
 800aafc:	dc01      	bgt.n	800ab02 <_printf_float+0x3b6>
 800aafe:	07db      	lsls	r3, r3, #31
 800ab00:	d536      	bpl.n	800ab70 <_printf_float+0x424>
 800ab02:	2301      	movs	r3, #1
 800ab04:	4642      	mov	r2, r8
 800ab06:	4631      	mov	r1, r6
 800ab08:	4628      	mov	r0, r5
 800ab0a:	47b8      	blx	r7
 800ab0c:	3001      	adds	r0, #1
 800ab0e:	f43f ae78 	beq.w	800a802 <_printf_float+0xb6>
 800ab12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab16:	4631      	mov	r1, r6
 800ab18:	4628      	mov	r0, r5
 800ab1a:	47b8      	blx	r7
 800ab1c:	3001      	adds	r0, #1
 800ab1e:	f43f ae70 	beq.w	800a802 <_printf_float+0xb6>
 800ab22:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ab26:	2200      	movs	r2, #0
 800ab28:	2300      	movs	r3, #0
 800ab2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab2e:	f7f5 ffeb 	bl	8000b08 <__aeabi_dcmpeq>
 800ab32:	b9c0      	cbnz	r0, 800ab66 <_printf_float+0x41a>
 800ab34:	4653      	mov	r3, sl
 800ab36:	f108 0201 	add.w	r2, r8, #1
 800ab3a:	4631      	mov	r1, r6
 800ab3c:	4628      	mov	r0, r5
 800ab3e:	47b8      	blx	r7
 800ab40:	3001      	adds	r0, #1
 800ab42:	d10c      	bne.n	800ab5e <_printf_float+0x412>
 800ab44:	e65d      	b.n	800a802 <_printf_float+0xb6>
 800ab46:	2301      	movs	r3, #1
 800ab48:	465a      	mov	r2, fp
 800ab4a:	4631      	mov	r1, r6
 800ab4c:	4628      	mov	r0, r5
 800ab4e:	47b8      	blx	r7
 800ab50:	3001      	adds	r0, #1
 800ab52:	f43f ae56 	beq.w	800a802 <_printf_float+0xb6>
 800ab56:	f108 0801 	add.w	r8, r8, #1
 800ab5a:	45d0      	cmp	r8, sl
 800ab5c:	dbf3      	blt.n	800ab46 <_printf_float+0x3fa>
 800ab5e:	464b      	mov	r3, r9
 800ab60:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ab64:	e6df      	b.n	800a926 <_printf_float+0x1da>
 800ab66:	f04f 0800 	mov.w	r8, #0
 800ab6a:	f104 0b1a 	add.w	fp, r4, #26
 800ab6e:	e7f4      	b.n	800ab5a <_printf_float+0x40e>
 800ab70:	2301      	movs	r3, #1
 800ab72:	4642      	mov	r2, r8
 800ab74:	e7e1      	b.n	800ab3a <_printf_float+0x3ee>
 800ab76:	2301      	movs	r3, #1
 800ab78:	464a      	mov	r2, r9
 800ab7a:	4631      	mov	r1, r6
 800ab7c:	4628      	mov	r0, r5
 800ab7e:	47b8      	blx	r7
 800ab80:	3001      	adds	r0, #1
 800ab82:	f43f ae3e 	beq.w	800a802 <_printf_float+0xb6>
 800ab86:	f108 0801 	add.w	r8, r8, #1
 800ab8a:	68e3      	ldr	r3, [r4, #12]
 800ab8c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ab8e:	1a5b      	subs	r3, r3, r1
 800ab90:	4543      	cmp	r3, r8
 800ab92:	dcf0      	bgt.n	800ab76 <_printf_float+0x42a>
 800ab94:	e6fc      	b.n	800a990 <_printf_float+0x244>
 800ab96:	f04f 0800 	mov.w	r8, #0
 800ab9a:	f104 0919 	add.w	r9, r4, #25
 800ab9e:	e7f4      	b.n	800ab8a <_printf_float+0x43e>

0800aba0 <_printf_common>:
 800aba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aba4:	4616      	mov	r6, r2
 800aba6:	4698      	mov	r8, r3
 800aba8:	688a      	ldr	r2, [r1, #8]
 800abaa:	690b      	ldr	r3, [r1, #16]
 800abac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800abb0:	4293      	cmp	r3, r2
 800abb2:	bfb8      	it	lt
 800abb4:	4613      	movlt	r3, r2
 800abb6:	6033      	str	r3, [r6, #0]
 800abb8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800abbc:	4607      	mov	r7, r0
 800abbe:	460c      	mov	r4, r1
 800abc0:	b10a      	cbz	r2, 800abc6 <_printf_common+0x26>
 800abc2:	3301      	adds	r3, #1
 800abc4:	6033      	str	r3, [r6, #0]
 800abc6:	6823      	ldr	r3, [r4, #0]
 800abc8:	0699      	lsls	r1, r3, #26
 800abca:	bf42      	ittt	mi
 800abcc:	6833      	ldrmi	r3, [r6, #0]
 800abce:	3302      	addmi	r3, #2
 800abd0:	6033      	strmi	r3, [r6, #0]
 800abd2:	6825      	ldr	r5, [r4, #0]
 800abd4:	f015 0506 	ands.w	r5, r5, #6
 800abd8:	d106      	bne.n	800abe8 <_printf_common+0x48>
 800abda:	f104 0a19 	add.w	sl, r4, #25
 800abde:	68e3      	ldr	r3, [r4, #12]
 800abe0:	6832      	ldr	r2, [r6, #0]
 800abe2:	1a9b      	subs	r3, r3, r2
 800abe4:	42ab      	cmp	r3, r5
 800abe6:	dc26      	bgt.n	800ac36 <_printf_common+0x96>
 800abe8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800abec:	6822      	ldr	r2, [r4, #0]
 800abee:	3b00      	subs	r3, #0
 800abf0:	bf18      	it	ne
 800abf2:	2301      	movne	r3, #1
 800abf4:	0692      	lsls	r2, r2, #26
 800abf6:	d42b      	bmi.n	800ac50 <_printf_common+0xb0>
 800abf8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800abfc:	4641      	mov	r1, r8
 800abfe:	4638      	mov	r0, r7
 800ac00:	47c8      	blx	r9
 800ac02:	3001      	adds	r0, #1
 800ac04:	d01e      	beq.n	800ac44 <_printf_common+0xa4>
 800ac06:	6823      	ldr	r3, [r4, #0]
 800ac08:	6922      	ldr	r2, [r4, #16]
 800ac0a:	f003 0306 	and.w	r3, r3, #6
 800ac0e:	2b04      	cmp	r3, #4
 800ac10:	bf02      	ittt	eq
 800ac12:	68e5      	ldreq	r5, [r4, #12]
 800ac14:	6833      	ldreq	r3, [r6, #0]
 800ac16:	1aed      	subeq	r5, r5, r3
 800ac18:	68a3      	ldr	r3, [r4, #8]
 800ac1a:	bf0c      	ite	eq
 800ac1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac20:	2500      	movne	r5, #0
 800ac22:	4293      	cmp	r3, r2
 800ac24:	bfc4      	itt	gt
 800ac26:	1a9b      	subgt	r3, r3, r2
 800ac28:	18ed      	addgt	r5, r5, r3
 800ac2a:	2600      	movs	r6, #0
 800ac2c:	341a      	adds	r4, #26
 800ac2e:	42b5      	cmp	r5, r6
 800ac30:	d11a      	bne.n	800ac68 <_printf_common+0xc8>
 800ac32:	2000      	movs	r0, #0
 800ac34:	e008      	b.n	800ac48 <_printf_common+0xa8>
 800ac36:	2301      	movs	r3, #1
 800ac38:	4652      	mov	r2, sl
 800ac3a:	4641      	mov	r1, r8
 800ac3c:	4638      	mov	r0, r7
 800ac3e:	47c8      	blx	r9
 800ac40:	3001      	adds	r0, #1
 800ac42:	d103      	bne.n	800ac4c <_printf_common+0xac>
 800ac44:	f04f 30ff 	mov.w	r0, #4294967295
 800ac48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac4c:	3501      	adds	r5, #1
 800ac4e:	e7c6      	b.n	800abde <_printf_common+0x3e>
 800ac50:	18e1      	adds	r1, r4, r3
 800ac52:	1c5a      	adds	r2, r3, #1
 800ac54:	2030      	movs	r0, #48	@ 0x30
 800ac56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ac5a:	4422      	add	r2, r4
 800ac5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ac60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ac64:	3302      	adds	r3, #2
 800ac66:	e7c7      	b.n	800abf8 <_printf_common+0x58>
 800ac68:	2301      	movs	r3, #1
 800ac6a:	4622      	mov	r2, r4
 800ac6c:	4641      	mov	r1, r8
 800ac6e:	4638      	mov	r0, r7
 800ac70:	47c8      	blx	r9
 800ac72:	3001      	adds	r0, #1
 800ac74:	d0e6      	beq.n	800ac44 <_printf_common+0xa4>
 800ac76:	3601      	adds	r6, #1
 800ac78:	e7d9      	b.n	800ac2e <_printf_common+0x8e>
	...

0800ac7c <_printf_i>:
 800ac7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac80:	7e0f      	ldrb	r7, [r1, #24]
 800ac82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ac84:	2f78      	cmp	r7, #120	@ 0x78
 800ac86:	4691      	mov	r9, r2
 800ac88:	4680      	mov	r8, r0
 800ac8a:	460c      	mov	r4, r1
 800ac8c:	469a      	mov	sl, r3
 800ac8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ac92:	d807      	bhi.n	800aca4 <_printf_i+0x28>
 800ac94:	2f62      	cmp	r7, #98	@ 0x62
 800ac96:	d80a      	bhi.n	800acae <_printf_i+0x32>
 800ac98:	2f00      	cmp	r7, #0
 800ac9a:	f000 80d2 	beq.w	800ae42 <_printf_i+0x1c6>
 800ac9e:	2f58      	cmp	r7, #88	@ 0x58
 800aca0:	f000 80b9 	beq.w	800ae16 <_printf_i+0x19a>
 800aca4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aca8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800acac:	e03a      	b.n	800ad24 <_printf_i+0xa8>
 800acae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800acb2:	2b15      	cmp	r3, #21
 800acb4:	d8f6      	bhi.n	800aca4 <_printf_i+0x28>
 800acb6:	a101      	add	r1, pc, #4	@ (adr r1, 800acbc <_printf_i+0x40>)
 800acb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800acbc:	0800ad15 	.word	0x0800ad15
 800acc0:	0800ad29 	.word	0x0800ad29
 800acc4:	0800aca5 	.word	0x0800aca5
 800acc8:	0800aca5 	.word	0x0800aca5
 800accc:	0800aca5 	.word	0x0800aca5
 800acd0:	0800aca5 	.word	0x0800aca5
 800acd4:	0800ad29 	.word	0x0800ad29
 800acd8:	0800aca5 	.word	0x0800aca5
 800acdc:	0800aca5 	.word	0x0800aca5
 800ace0:	0800aca5 	.word	0x0800aca5
 800ace4:	0800aca5 	.word	0x0800aca5
 800ace8:	0800ae29 	.word	0x0800ae29
 800acec:	0800ad53 	.word	0x0800ad53
 800acf0:	0800ade3 	.word	0x0800ade3
 800acf4:	0800aca5 	.word	0x0800aca5
 800acf8:	0800aca5 	.word	0x0800aca5
 800acfc:	0800ae4b 	.word	0x0800ae4b
 800ad00:	0800aca5 	.word	0x0800aca5
 800ad04:	0800ad53 	.word	0x0800ad53
 800ad08:	0800aca5 	.word	0x0800aca5
 800ad0c:	0800aca5 	.word	0x0800aca5
 800ad10:	0800adeb 	.word	0x0800adeb
 800ad14:	6833      	ldr	r3, [r6, #0]
 800ad16:	1d1a      	adds	r2, r3, #4
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	6032      	str	r2, [r6, #0]
 800ad1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ad24:	2301      	movs	r3, #1
 800ad26:	e09d      	b.n	800ae64 <_printf_i+0x1e8>
 800ad28:	6833      	ldr	r3, [r6, #0]
 800ad2a:	6820      	ldr	r0, [r4, #0]
 800ad2c:	1d19      	adds	r1, r3, #4
 800ad2e:	6031      	str	r1, [r6, #0]
 800ad30:	0606      	lsls	r6, r0, #24
 800ad32:	d501      	bpl.n	800ad38 <_printf_i+0xbc>
 800ad34:	681d      	ldr	r5, [r3, #0]
 800ad36:	e003      	b.n	800ad40 <_printf_i+0xc4>
 800ad38:	0645      	lsls	r5, r0, #25
 800ad3a:	d5fb      	bpl.n	800ad34 <_printf_i+0xb8>
 800ad3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ad40:	2d00      	cmp	r5, #0
 800ad42:	da03      	bge.n	800ad4c <_printf_i+0xd0>
 800ad44:	232d      	movs	r3, #45	@ 0x2d
 800ad46:	426d      	negs	r5, r5
 800ad48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad4c:	4859      	ldr	r0, [pc, #356]	@ (800aeb4 <_printf_i+0x238>)
 800ad4e:	230a      	movs	r3, #10
 800ad50:	e011      	b.n	800ad76 <_printf_i+0xfa>
 800ad52:	6821      	ldr	r1, [r4, #0]
 800ad54:	6833      	ldr	r3, [r6, #0]
 800ad56:	0608      	lsls	r0, r1, #24
 800ad58:	f853 5b04 	ldr.w	r5, [r3], #4
 800ad5c:	d402      	bmi.n	800ad64 <_printf_i+0xe8>
 800ad5e:	0649      	lsls	r1, r1, #25
 800ad60:	bf48      	it	mi
 800ad62:	b2ad      	uxthmi	r5, r5
 800ad64:	2f6f      	cmp	r7, #111	@ 0x6f
 800ad66:	4853      	ldr	r0, [pc, #332]	@ (800aeb4 <_printf_i+0x238>)
 800ad68:	6033      	str	r3, [r6, #0]
 800ad6a:	bf14      	ite	ne
 800ad6c:	230a      	movne	r3, #10
 800ad6e:	2308      	moveq	r3, #8
 800ad70:	2100      	movs	r1, #0
 800ad72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ad76:	6866      	ldr	r6, [r4, #4]
 800ad78:	60a6      	str	r6, [r4, #8]
 800ad7a:	2e00      	cmp	r6, #0
 800ad7c:	bfa2      	ittt	ge
 800ad7e:	6821      	ldrge	r1, [r4, #0]
 800ad80:	f021 0104 	bicge.w	r1, r1, #4
 800ad84:	6021      	strge	r1, [r4, #0]
 800ad86:	b90d      	cbnz	r5, 800ad8c <_printf_i+0x110>
 800ad88:	2e00      	cmp	r6, #0
 800ad8a:	d04b      	beq.n	800ae24 <_printf_i+0x1a8>
 800ad8c:	4616      	mov	r6, r2
 800ad8e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad92:	fb03 5711 	mls	r7, r3, r1, r5
 800ad96:	5dc7      	ldrb	r7, [r0, r7]
 800ad98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad9c:	462f      	mov	r7, r5
 800ad9e:	42bb      	cmp	r3, r7
 800ada0:	460d      	mov	r5, r1
 800ada2:	d9f4      	bls.n	800ad8e <_printf_i+0x112>
 800ada4:	2b08      	cmp	r3, #8
 800ada6:	d10b      	bne.n	800adc0 <_printf_i+0x144>
 800ada8:	6823      	ldr	r3, [r4, #0]
 800adaa:	07df      	lsls	r7, r3, #31
 800adac:	d508      	bpl.n	800adc0 <_printf_i+0x144>
 800adae:	6923      	ldr	r3, [r4, #16]
 800adb0:	6861      	ldr	r1, [r4, #4]
 800adb2:	4299      	cmp	r1, r3
 800adb4:	bfde      	ittt	le
 800adb6:	2330      	movle	r3, #48	@ 0x30
 800adb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800adbc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800adc0:	1b92      	subs	r2, r2, r6
 800adc2:	6122      	str	r2, [r4, #16]
 800adc4:	f8cd a000 	str.w	sl, [sp]
 800adc8:	464b      	mov	r3, r9
 800adca:	aa03      	add	r2, sp, #12
 800adcc:	4621      	mov	r1, r4
 800adce:	4640      	mov	r0, r8
 800add0:	f7ff fee6 	bl	800aba0 <_printf_common>
 800add4:	3001      	adds	r0, #1
 800add6:	d14a      	bne.n	800ae6e <_printf_i+0x1f2>
 800add8:	f04f 30ff 	mov.w	r0, #4294967295
 800addc:	b004      	add	sp, #16
 800adde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ade2:	6823      	ldr	r3, [r4, #0]
 800ade4:	f043 0320 	orr.w	r3, r3, #32
 800ade8:	6023      	str	r3, [r4, #0]
 800adea:	4833      	ldr	r0, [pc, #204]	@ (800aeb8 <_printf_i+0x23c>)
 800adec:	2778      	movs	r7, #120	@ 0x78
 800adee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800adf2:	6823      	ldr	r3, [r4, #0]
 800adf4:	6831      	ldr	r1, [r6, #0]
 800adf6:	061f      	lsls	r7, r3, #24
 800adf8:	f851 5b04 	ldr.w	r5, [r1], #4
 800adfc:	d402      	bmi.n	800ae04 <_printf_i+0x188>
 800adfe:	065f      	lsls	r7, r3, #25
 800ae00:	bf48      	it	mi
 800ae02:	b2ad      	uxthmi	r5, r5
 800ae04:	6031      	str	r1, [r6, #0]
 800ae06:	07d9      	lsls	r1, r3, #31
 800ae08:	bf44      	itt	mi
 800ae0a:	f043 0320 	orrmi.w	r3, r3, #32
 800ae0e:	6023      	strmi	r3, [r4, #0]
 800ae10:	b11d      	cbz	r5, 800ae1a <_printf_i+0x19e>
 800ae12:	2310      	movs	r3, #16
 800ae14:	e7ac      	b.n	800ad70 <_printf_i+0xf4>
 800ae16:	4827      	ldr	r0, [pc, #156]	@ (800aeb4 <_printf_i+0x238>)
 800ae18:	e7e9      	b.n	800adee <_printf_i+0x172>
 800ae1a:	6823      	ldr	r3, [r4, #0]
 800ae1c:	f023 0320 	bic.w	r3, r3, #32
 800ae20:	6023      	str	r3, [r4, #0]
 800ae22:	e7f6      	b.n	800ae12 <_printf_i+0x196>
 800ae24:	4616      	mov	r6, r2
 800ae26:	e7bd      	b.n	800ada4 <_printf_i+0x128>
 800ae28:	6833      	ldr	r3, [r6, #0]
 800ae2a:	6825      	ldr	r5, [r4, #0]
 800ae2c:	6961      	ldr	r1, [r4, #20]
 800ae2e:	1d18      	adds	r0, r3, #4
 800ae30:	6030      	str	r0, [r6, #0]
 800ae32:	062e      	lsls	r6, r5, #24
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	d501      	bpl.n	800ae3c <_printf_i+0x1c0>
 800ae38:	6019      	str	r1, [r3, #0]
 800ae3a:	e002      	b.n	800ae42 <_printf_i+0x1c6>
 800ae3c:	0668      	lsls	r0, r5, #25
 800ae3e:	d5fb      	bpl.n	800ae38 <_printf_i+0x1bc>
 800ae40:	8019      	strh	r1, [r3, #0]
 800ae42:	2300      	movs	r3, #0
 800ae44:	6123      	str	r3, [r4, #16]
 800ae46:	4616      	mov	r6, r2
 800ae48:	e7bc      	b.n	800adc4 <_printf_i+0x148>
 800ae4a:	6833      	ldr	r3, [r6, #0]
 800ae4c:	1d1a      	adds	r2, r3, #4
 800ae4e:	6032      	str	r2, [r6, #0]
 800ae50:	681e      	ldr	r6, [r3, #0]
 800ae52:	6862      	ldr	r2, [r4, #4]
 800ae54:	2100      	movs	r1, #0
 800ae56:	4630      	mov	r0, r6
 800ae58:	f7f5 f9da 	bl	8000210 <memchr>
 800ae5c:	b108      	cbz	r0, 800ae62 <_printf_i+0x1e6>
 800ae5e:	1b80      	subs	r0, r0, r6
 800ae60:	6060      	str	r0, [r4, #4]
 800ae62:	6863      	ldr	r3, [r4, #4]
 800ae64:	6123      	str	r3, [r4, #16]
 800ae66:	2300      	movs	r3, #0
 800ae68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae6c:	e7aa      	b.n	800adc4 <_printf_i+0x148>
 800ae6e:	6923      	ldr	r3, [r4, #16]
 800ae70:	4632      	mov	r2, r6
 800ae72:	4649      	mov	r1, r9
 800ae74:	4640      	mov	r0, r8
 800ae76:	47d0      	blx	sl
 800ae78:	3001      	adds	r0, #1
 800ae7a:	d0ad      	beq.n	800add8 <_printf_i+0x15c>
 800ae7c:	6823      	ldr	r3, [r4, #0]
 800ae7e:	079b      	lsls	r3, r3, #30
 800ae80:	d413      	bmi.n	800aeaa <_printf_i+0x22e>
 800ae82:	68e0      	ldr	r0, [r4, #12]
 800ae84:	9b03      	ldr	r3, [sp, #12]
 800ae86:	4298      	cmp	r0, r3
 800ae88:	bfb8      	it	lt
 800ae8a:	4618      	movlt	r0, r3
 800ae8c:	e7a6      	b.n	800addc <_printf_i+0x160>
 800ae8e:	2301      	movs	r3, #1
 800ae90:	4632      	mov	r2, r6
 800ae92:	4649      	mov	r1, r9
 800ae94:	4640      	mov	r0, r8
 800ae96:	47d0      	blx	sl
 800ae98:	3001      	adds	r0, #1
 800ae9a:	d09d      	beq.n	800add8 <_printf_i+0x15c>
 800ae9c:	3501      	adds	r5, #1
 800ae9e:	68e3      	ldr	r3, [r4, #12]
 800aea0:	9903      	ldr	r1, [sp, #12]
 800aea2:	1a5b      	subs	r3, r3, r1
 800aea4:	42ab      	cmp	r3, r5
 800aea6:	dcf2      	bgt.n	800ae8e <_printf_i+0x212>
 800aea8:	e7eb      	b.n	800ae82 <_printf_i+0x206>
 800aeaa:	2500      	movs	r5, #0
 800aeac:	f104 0619 	add.w	r6, r4, #25
 800aeb0:	e7f5      	b.n	800ae9e <_printf_i+0x222>
 800aeb2:	bf00      	nop
 800aeb4:	0800e33a 	.word	0x0800e33a
 800aeb8:	0800e34b 	.word	0x0800e34b

0800aebc <_scanf_float>:
 800aebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec0:	b087      	sub	sp, #28
 800aec2:	4617      	mov	r7, r2
 800aec4:	9303      	str	r3, [sp, #12]
 800aec6:	688b      	ldr	r3, [r1, #8]
 800aec8:	1e5a      	subs	r2, r3, #1
 800aeca:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800aece:	bf81      	itttt	hi
 800aed0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800aed4:	eb03 0b05 	addhi.w	fp, r3, r5
 800aed8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800aedc:	608b      	strhi	r3, [r1, #8]
 800aede:	680b      	ldr	r3, [r1, #0]
 800aee0:	460a      	mov	r2, r1
 800aee2:	f04f 0500 	mov.w	r5, #0
 800aee6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800aeea:	f842 3b1c 	str.w	r3, [r2], #28
 800aeee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800aef2:	4680      	mov	r8, r0
 800aef4:	460c      	mov	r4, r1
 800aef6:	bf98      	it	ls
 800aef8:	f04f 0b00 	movls.w	fp, #0
 800aefc:	9201      	str	r2, [sp, #4]
 800aefe:	4616      	mov	r6, r2
 800af00:	46aa      	mov	sl, r5
 800af02:	46a9      	mov	r9, r5
 800af04:	9502      	str	r5, [sp, #8]
 800af06:	68a2      	ldr	r2, [r4, #8]
 800af08:	b152      	cbz	r2, 800af20 <_scanf_float+0x64>
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	2b4e      	cmp	r3, #78	@ 0x4e
 800af10:	d864      	bhi.n	800afdc <_scanf_float+0x120>
 800af12:	2b40      	cmp	r3, #64	@ 0x40
 800af14:	d83c      	bhi.n	800af90 <_scanf_float+0xd4>
 800af16:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800af1a:	b2c8      	uxtb	r0, r1
 800af1c:	280e      	cmp	r0, #14
 800af1e:	d93a      	bls.n	800af96 <_scanf_float+0xda>
 800af20:	f1b9 0f00 	cmp.w	r9, #0
 800af24:	d003      	beq.n	800af2e <_scanf_float+0x72>
 800af26:	6823      	ldr	r3, [r4, #0]
 800af28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800af2c:	6023      	str	r3, [r4, #0]
 800af2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af32:	f1ba 0f01 	cmp.w	sl, #1
 800af36:	f200 8117 	bhi.w	800b168 <_scanf_float+0x2ac>
 800af3a:	9b01      	ldr	r3, [sp, #4]
 800af3c:	429e      	cmp	r6, r3
 800af3e:	f200 8108 	bhi.w	800b152 <_scanf_float+0x296>
 800af42:	2001      	movs	r0, #1
 800af44:	b007      	add	sp, #28
 800af46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af4a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800af4e:	2a0d      	cmp	r2, #13
 800af50:	d8e6      	bhi.n	800af20 <_scanf_float+0x64>
 800af52:	a101      	add	r1, pc, #4	@ (adr r1, 800af58 <_scanf_float+0x9c>)
 800af54:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800af58:	0800b09f 	.word	0x0800b09f
 800af5c:	0800af21 	.word	0x0800af21
 800af60:	0800af21 	.word	0x0800af21
 800af64:	0800af21 	.word	0x0800af21
 800af68:	0800b0ff 	.word	0x0800b0ff
 800af6c:	0800b0d7 	.word	0x0800b0d7
 800af70:	0800af21 	.word	0x0800af21
 800af74:	0800af21 	.word	0x0800af21
 800af78:	0800b0ad 	.word	0x0800b0ad
 800af7c:	0800af21 	.word	0x0800af21
 800af80:	0800af21 	.word	0x0800af21
 800af84:	0800af21 	.word	0x0800af21
 800af88:	0800af21 	.word	0x0800af21
 800af8c:	0800b065 	.word	0x0800b065
 800af90:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800af94:	e7db      	b.n	800af4e <_scanf_float+0x92>
 800af96:	290e      	cmp	r1, #14
 800af98:	d8c2      	bhi.n	800af20 <_scanf_float+0x64>
 800af9a:	a001      	add	r0, pc, #4	@ (adr r0, 800afa0 <_scanf_float+0xe4>)
 800af9c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800afa0:	0800b055 	.word	0x0800b055
 800afa4:	0800af21 	.word	0x0800af21
 800afa8:	0800b055 	.word	0x0800b055
 800afac:	0800b0eb 	.word	0x0800b0eb
 800afb0:	0800af21 	.word	0x0800af21
 800afb4:	0800affd 	.word	0x0800affd
 800afb8:	0800b03b 	.word	0x0800b03b
 800afbc:	0800b03b 	.word	0x0800b03b
 800afc0:	0800b03b 	.word	0x0800b03b
 800afc4:	0800b03b 	.word	0x0800b03b
 800afc8:	0800b03b 	.word	0x0800b03b
 800afcc:	0800b03b 	.word	0x0800b03b
 800afd0:	0800b03b 	.word	0x0800b03b
 800afd4:	0800b03b 	.word	0x0800b03b
 800afd8:	0800b03b 	.word	0x0800b03b
 800afdc:	2b6e      	cmp	r3, #110	@ 0x6e
 800afde:	d809      	bhi.n	800aff4 <_scanf_float+0x138>
 800afe0:	2b60      	cmp	r3, #96	@ 0x60
 800afe2:	d8b2      	bhi.n	800af4a <_scanf_float+0x8e>
 800afe4:	2b54      	cmp	r3, #84	@ 0x54
 800afe6:	d07b      	beq.n	800b0e0 <_scanf_float+0x224>
 800afe8:	2b59      	cmp	r3, #89	@ 0x59
 800afea:	d199      	bne.n	800af20 <_scanf_float+0x64>
 800afec:	2d07      	cmp	r5, #7
 800afee:	d197      	bne.n	800af20 <_scanf_float+0x64>
 800aff0:	2508      	movs	r5, #8
 800aff2:	e02c      	b.n	800b04e <_scanf_float+0x192>
 800aff4:	2b74      	cmp	r3, #116	@ 0x74
 800aff6:	d073      	beq.n	800b0e0 <_scanf_float+0x224>
 800aff8:	2b79      	cmp	r3, #121	@ 0x79
 800affa:	e7f6      	b.n	800afea <_scanf_float+0x12e>
 800affc:	6821      	ldr	r1, [r4, #0]
 800affe:	05c8      	lsls	r0, r1, #23
 800b000:	d51b      	bpl.n	800b03a <_scanf_float+0x17e>
 800b002:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b006:	6021      	str	r1, [r4, #0]
 800b008:	f109 0901 	add.w	r9, r9, #1
 800b00c:	f1bb 0f00 	cmp.w	fp, #0
 800b010:	d003      	beq.n	800b01a <_scanf_float+0x15e>
 800b012:	3201      	adds	r2, #1
 800b014:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b018:	60a2      	str	r2, [r4, #8]
 800b01a:	68a3      	ldr	r3, [r4, #8]
 800b01c:	3b01      	subs	r3, #1
 800b01e:	60a3      	str	r3, [r4, #8]
 800b020:	6923      	ldr	r3, [r4, #16]
 800b022:	3301      	adds	r3, #1
 800b024:	6123      	str	r3, [r4, #16]
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	3b01      	subs	r3, #1
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	607b      	str	r3, [r7, #4]
 800b02e:	f340 8087 	ble.w	800b140 <_scanf_float+0x284>
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	3301      	adds	r3, #1
 800b036:	603b      	str	r3, [r7, #0]
 800b038:	e765      	b.n	800af06 <_scanf_float+0x4a>
 800b03a:	eb1a 0105 	adds.w	r1, sl, r5
 800b03e:	f47f af6f 	bne.w	800af20 <_scanf_float+0x64>
 800b042:	6822      	ldr	r2, [r4, #0]
 800b044:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b048:	6022      	str	r2, [r4, #0]
 800b04a:	460d      	mov	r5, r1
 800b04c:	468a      	mov	sl, r1
 800b04e:	f806 3b01 	strb.w	r3, [r6], #1
 800b052:	e7e2      	b.n	800b01a <_scanf_float+0x15e>
 800b054:	6822      	ldr	r2, [r4, #0]
 800b056:	0610      	lsls	r0, r2, #24
 800b058:	f57f af62 	bpl.w	800af20 <_scanf_float+0x64>
 800b05c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b060:	6022      	str	r2, [r4, #0]
 800b062:	e7f4      	b.n	800b04e <_scanf_float+0x192>
 800b064:	f1ba 0f00 	cmp.w	sl, #0
 800b068:	d10e      	bne.n	800b088 <_scanf_float+0x1cc>
 800b06a:	f1b9 0f00 	cmp.w	r9, #0
 800b06e:	d10e      	bne.n	800b08e <_scanf_float+0x1d2>
 800b070:	6822      	ldr	r2, [r4, #0]
 800b072:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b076:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b07a:	d108      	bne.n	800b08e <_scanf_float+0x1d2>
 800b07c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b080:	6022      	str	r2, [r4, #0]
 800b082:	f04f 0a01 	mov.w	sl, #1
 800b086:	e7e2      	b.n	800b04e <_scanf_float+0x192>
 800b088:	f1ba 0f02 	cmp.w	sl, #2
 800b08c:	d055      	beq.n	800b13a <_scanf_float+0x27e>
 800b08e:	2d01      	cmp	r5, #1
 800b090:	d002      	beq.n	800b098 <_scanf_float+0x1dc>
 800b092:	2d04      	cmp	r5, #4
 800b094:	f47f af44 	bne.w	800af20 <_scanf_float+0x64>
 800b098:	3501      	adds	r5, #1
 800b09a:	b2ed      	uxtb	r5, r5
 800b09c:	e7d7      	b.n	800b04e <_scanf_float+0x192>
 800b09e:	f1ba 0f01 	cmp.w	sl, #1
 800b0a2:	f47f af3d 	bne.w	800af20 <_scanf_float+0x64>
 800b0a6:	f04f 0a02 	mov.w	sl, #2
 800b0aa:	e7d0      	b.n	800b04e <_scanf_float+0x192>
 800b0ac:	b97d      	cbnz	r5, 800b0ce <_scanf_float+0x212>
 800b0ae:	f1b9 0f00 	cmp.w	r9, #0
 800b0b2:	f47f af38 	bne.w	800af26 <_scanf_float+0x6a>
 800b0b6:	6822      	ldr	r2, [r4, #0]
 800b0b8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b0bc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b0c0:	f040 8108 	bne.w	800b2d4 <_scanf_float+0x418>
 800b0c4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b0c8:	6022      	str	r2, [r4, #0]
 800b0ca:	2501      	movs	r5, #1
 800b0cc:	e7bf      	b.n	800b04e <_scanf_float+0x192>
 800b0ce:	2d03      	cmp	r5, #3
 800b0d0:	d0e2      	beq.n	800b098 <_scanf_float+0x1dc>
 800b0d2:	2d05      	cmp	r5, #5
 800b0d4:	e7de      	b.n	800b094 <_scanf_float+0x1d8>
 800b0d6:	2d02      	cmp	r5, #2
 800b0d8:	f47f af22 	bne.w	800af20 <_scanf_float+0x64>
 800b0dc:	2503      	movs	r5, #3
 800b0de:	e7b6      	b.n	800b04e <_scanf_float+0x192>
 800b0e0:	2d06      	cmp	r5, #6
 800b0e2:	f47f af1d 	bne.w	800af20 <_scanf_float+0x64>
 800b0e6:	2507      	movs	r5, #7
 800b0e8:	e7b1      	b.n	800b04e <_scanf_float+0x192>
 800b0ea:	6822      	ldr	r2, [r4, #0]
 800b0ec:	0591      	lsls	r1, r2, #22
 800b0ee:	f57f af17 	bpl.w	800af20 <_scanf_float+0x64>
 800b0f2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b0f6:	6022      	str	r2, [r4, #0]
 800b0f8:	f8cd 9008 	str.w	r9, [sp, #8]
 800b0fc:	e7a7      	b.n	800b04e <_scanf_float+0x192>
 800b0fe:	6822      	ldr	r2, [r4, #0]
 800b100:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b104:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b108:	d006      	beq.n	800b118 <_scanf_float+0x25c>
 800b10a:	0550      	lsls	r0, r2, #21
 800b10c:	f57f af08 	bpl.w	800af20 <_scanf_float+0x64>
 800b110:	f1b9 0f00 	cmp.w	r9, #0
 800b114:	f000 80de 	beq.w	800b2d4 <_scanf_float+0x418>
 800b118:	0591      	lsls	r1, r2, #22
 800b11a:	bf58      	it	pl
 800b11c:	9902      	ldrpl	r1, [sp, #8]
 800b11e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b122:	bf58      	it	pl
 800b124:	eba9 0101 	subpl.w	r1, r9, r1
 800b128:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b12c:	bf58      	it	pl
 800b12e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b132:	6022      	str	r2, [r4, #0]
 800b134:	f04f 0900 	mov.w	r9, #0
 800b138:	e789      	b.n	800b04e <_scanf_float+0x192>
 800b13a:	f04f 0a03 	mov.w	sl, #3
 800b13e:	e786      	b.n	800b04e <_scanf_float+0x192>
 800b140:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b144:	4639      	mov	r1, r7
 800b146:	4640      	mov	r0, r8
 800b148:	4798      	blx	r3
 800b14a:	2800      	cmp	r0, #0
 800b14c:	f43f aedb 	beq.w	800af06 <_scanf_float+0x4a>
 800b150:	e6e6      	b.n	800af20 <_scanf_float+0x64>
 800b152:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b156:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b15a:	463a      	mov	r2, r7
 800b15c:	4640      	mov	r0, r8
 800b15e:	4798      	blx	r3
 800b160:	6923      	ldr	r3, [r4, #16]
 800b162:	3b01      	subs	r3, #1
 800b164:	6123      	str	r3, [r4, #16]
 800b166:	e6e8      	b.n	800af3a <_scanf_float+0x7e>
 800b168:	1e6b      	subs	r3, r5, #1
 800b16a:	2b06      	cmp	r3, #6
 800b16c:	d824      	bhi.n	800b1b8 <_scanf_float+0x2fc>
 800b16e:	2d02      	cmp	r5, #2
 800b170:	d836      	bhi.n	800b1e0 <_scanf_float+0x324>
 800b172:	9b01      	ldr	r3, [sp, #4]
 800b174:	429e      	cmp	r6, r3
 800b176:	f67f aee4 	bls.w	800af42 <_scanf_float+0x86>
 800b17a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b17e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b182:	463a      	mov	r2, r7
 800b184:	4640      	mov	r0, r8
 800b186:	4798      	blx	r3
 800b188:	6923      	ldr	r3, [r4, #16]
 800b18a:	3b01      	subs	r3, #1
 800b18c:	6123      	str	r3, [r4, #16]
 800b18e:	e7f0      	b.n	800b172 <_scanf_float+0x2b6>
 800b190:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b194:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b198:	463a      	mov	r2, r7
 800b19a:	4640      	mov	r0, r8
 800b19c:	4798      	blx	r3
 800b19e:	6923      	ldr	r3, [r4, #16]
 800b1a0:	3b01      	subs	r3, #1
 800b1a2:	6123      	str	r3, [r4, #16]
 800b1a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b1a8:	fa5f fa8a 	uxtb.w	sl, sl
 800b1ac:	f1ba 0f02 	cmp.w	sl, #2
 800b1b0:	d1ee      	bne.n	800b190 <_scanf_float+0x2d4>
 800b1b2:	3d03      	subs	r5, #3
 800b1b4:	b2ed      	uxtb	r5, r5
 800b1b6:	1b76      	subs	r6, r6, r5
 800b1b8:	6823      	ldr	r3, [r4, #0]
 800b1ba:	05da      	lsls	r2, r3, #23
 800b1bc:	d530      	bpl.n	800b220 <_scanf_float+0x364>
 800b1be:	055b      	lsls	r3, r3, #21
 800b1c0:	d511      	bpl.n	800b1e6 <_scanf_float+0x32a>
 800b1c2:	9b01      	ldr	r3, [sp, #4]
 800b1c4:	429e      	cmp	r6, r3
 800b1c6:	f67f aebc 	bls.w	800af42 <_scanf_float+0x86>
 800b1ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b1ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b1d2:	463a      	mov	r2, r7
 800b1d4:	4640      	mov	r0, r8
 800b1d6:	4798      	blx	r3
 800b1d8:	6923      	ldr	r3, [r4, #16]
 800b1da:	3b01      	subs	r3, #1
 800b1dc:	6123      	str	r3, [r4, #16]
 800b1de:	e7f0      	b.n	800b1c2 <_scanf_float+0x306>
 800b1e0:	46aa      	mov	sl, r5
 800b1e2:	46b3      	mov	fp, r6
 800b1e4:	e7de      	b.n	800b1a4 <_scanf_float+0x2e8>
 800b1e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b1ea:	6923      	ldr	r3, [r4, #16]
 800b1ec:	2965      	cmp	r1, #101	@ 0x65
 800b1ee:	f103 33ff 	add.w	r3, r3, #4294967295
 800b1f2:	f106 35ff 	add.w	r5, r6, #4294967295
 800b1f6:	6123      	str	r3, [r4, #16]
 800b1f8:	d00c      	beq.n	800b214 <_scanf_float+0x358>
 800b1fa:	2945      	cmp	r1, #69	@ 0x45
 800b1fc:	d00a      	beq.n	800b214 <_scanf_float+0x358>
 800b1fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b202:	463a      	mov	r2, r7
 800b204:	4640      	mov	r0, r8
 800b206:	4798      	blx	r3
 800b208:	6923      	ldr	r3, [r4, #16]
 800b20a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b20e:	3b01      	subs	r3, #1
 800b210:	1eb5      	subs	r5, r6, #2
 800b212:	6123      	str	r3, [r4, #16]
 800b214:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b218:	463a      	mov	r2, r7
 800b21a:	4640      	mov	r0, r8
 800b21c:	4798      	blx	r3
 800b21e:	462e      	mov	r6, r5
 800b220:	6822      	ldr	r2, [r4, #0]
 800b222:	f012 0210 	ands.w	r2, r2, #16
 800b226:	d001      	beq.n	800b22c <_scanf_float+0x370>
 800b228:	2000      	movs	r0, #0
 800b22a:	e68b      	b.n	800af44 <_scanf_float+0x88>
 800b22c:	7032      	strb	r2, [r6, #0]
 800b22e:	6823      	ldr	r3, [r4, #0]
 800b230:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b234:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b238:	d11c      	bne.n	800b274 <_scanf_float+0x3b8>
 800b23a:	9b02      	ldr	r3, [sp, #8]
 800b23c:	454b      	cmp	r3, r9
 800b23e:	eba3 0209 	sub.w	r2, r3, r9
 800b242:	d123      	bne.n	800b28c <_scanf_float+0x3d0>
 800b244:	9901      	ldr	r1, [sp, #4]
 800b246:	2200      	movs	r2, #0
 800b248:	4640      	mov	r0, r8
 800b24a:	f7ff f975 	bl	800a538 <_strtod_r>
 800b24e:	9b03      	ldr	r3, [sp, #12]
 800b250:	6821      	ldr	r1, [r4, #0]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f011 0f02 	tst.w	r1, #2
 800b258:	ec57 6b10 	vmov	r6, r7, d0
 800b25c:	f103 0204 	add.w	r2, r3, #4
 800b260:	d01f      	beq.n	800b2a2 <_scanf_float+0x3e6>
 800b262:	9903      	ldr	r1, [sp, #12]
 800b264:	600a      	str	r2, [r1, #0]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	e9c3 6700 	strd	r6, r7, [r3]
 800b26c:	68e3      	ldr	r3, [r4, #12]
 800b26e:	3301      	adds	r3, #1
 800b270:	60e3      	str	r3, [r4, #12]
 800b272:	e7d9      	b.n	800b228 <_scanf_float+0x36c>
 800b274:	9b04      	ldr	r3, [sp, #16]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d0e4      	beq.n	800b244 <_scanf_float+0x388>
 800b27a:	9905      	ldr	r1, [sp, #20]
 800b27c:	230a      	movs	r3, #10
 800b27e:	3101      	adds	r1, #1
 800b280:	4640      	mov	r0, r8
 800b282:	f002 fa41 	bl	800d708 <_strtol_r>
 800b286:	9b04      	ldr	r3, [sp, #16]
 800b288:	9e05      	ldr	r6, [sp, #20]
 800b28a:	1ac2      	subs	r2, r0, r3
 800b28c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b290:	429e      	cmp	r6, r3
 800b292:	bf28      	it	cs
 800b294:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b298:	4910      	ldr	r1, [pc, #64]	@ (800b2dc <_scanf_float+0x420>)
 800b29a:	4630      	mov	r0, r6
 800b29c:	f000 f8e4 	bl	800b468 <siprintf>
 800b2a0:	e7d0      	b.n	800b244 <_scanf_float+0x388>
 800b2a2:	f011 0f04 	tst.w	r1, #4
 800b2a6:	9903      	ldr	r1, [sp, #12]
 800b2a8:	600a      	str	r2, [r1, #0]
 800b2aa:	d1dc      	bne.n	800b266 <_scanf_float+0x3aa>
 800b2ac:	681d      	ldr	r5, [r3, #0]
 800b2ae:	4632      	mov	r2, r6
 800b2b0:	463b      	mov	r3, r7
 800b2b2:	4630      	mov	r0, r6
 800b2b4:	4639      	mov	r1, r7
 800b2b6:	f7f5 fc59 	bl	8000b6c <__aeabi_dcmpun>
 800b2ba:	b128      	cbz	r0, 800b2c8 <_scanf_float+0x40c>
 800b2bc:	4808      	ldr	r0, [pc, #32]	@ (800b2e0 <_scanf_float+0x424>)
 800b2be:	f000 fa3b 	bl	800b738 <nanf>
 800b2c2:	ed85 0a00 	vstr	s0, [r5]
 800b2c6:	e7d1      	b.n	800b26c <_scanf_float+0x3b0>
 800b2c8:	4630      	mov	r0, r6
 800b2ca:	4639      	mov	r1, r7
 800b2cc:	f7f5 fcac 	bl	8000c28 <__aeabi_d2f>
 800b2d0:	6028      	str	r0, [r5, #0]
 800b2d2:	e7cb      	b.n	800b26c <_scanf_float+0x3b0>
 800b2d4:	f04f 0900 	mov.w	r9, #0
 800b2d8:	e629      	b.n	800af2e <_scanf_float+0x72>
 800b2da:	bf00      	nop
 800b2dc:	0800e35c 	.word	0x0800e35c
 800b2e0:	0800e415 	.word	0x0800e415

0800b2e4 <std>:
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	b510      	push	{r4, lr}
 800b2e8:	4604      	mov	r4, r0
 800b2ea:	e9c0 3300 	strd	r3, r3, [r0]
 800b2ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b2f2:	6083      	str	r3, [r0, #8]
 800b2f4:	8181      	strh	r1, [r0, #12]
 800b2f6:	6643      	str	r3, [r0, #100]	@ 0x64
 800b2f8:	81c2      	strh	r2, [r0, #14]
 800b2fa:	6183      	str	r3, [r0, #24]
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	2208      	movs	r2, #8
 800b300:	305c      	adds	r0, #92	@ 0x5c
 800b302:	f000 f914 	bl	800b52e <memset>
 800b306:	4b0d      	ldr	r3, [pc, #52]	@ (800b33c <std+0x58>)
 800b308:	6263      	str	r3, [r4, #36]	@ 0x24
 800b30a:	4b0d      	ldr	r3, [pc, #52]	@ (800b340 <std+0x5c>)
 800b30c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b30e:	4b0d      	ldr	r3, [pc, #52]	@ (800b344 <std+0x60>)
 800b310:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b312:	4b0d      	ldr	r3, [pc, #52]	@ (800b348 <std+0x64>)
 800b314:	6323      	str	r3, [r4, #48]	@ 0x30
 800b316:	4b0d      	ldr	r3, [pc, #52]	@ (800b34c <std+0x68>)
 800b318:	6224      	str	r4, [r4, #32]
 800b31a:	429c      	cmp	r4, r3
 800b31c:	d006      	beq.n	800b32c <std+0x48>
 800b31e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b322:	4294      	cmp	r4, r2
 800b324:	d002      	beq.n	800b32c <std+0x48>
 800b326:	33d0      	adds	r3, #208	@ 0xd0
 800b328:	429c      	cmp	r4, r3
 800b32a:	d105      	bne.n	800b338 <std+0x54>
 800b32c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b334:	f000 b9e6 	b.w	800b704 <__retarget_lock_init_recursive>
 800b338:	bd10      	pop	{r4, pc}
 800b33a:	bf00      	nop
 800b33c:	0800b4a9 	.word	0x0800b4a9
 800b340:	0800b4cb 	.word	0x0800b4cb
 800b344:	0800b503 	.word	0x0800b503
 800b348:	0800b527 	.word	0x0800b527
 800b34c:	200036f4 	.word	0x200036f4

0800b350 <stdio_exit_handler>:
 800b350:	4a02      	ldr	r2, [pc, #8]	@ (800b35c <stdio_exit_handler+0xc>)
 800b352:	4903      	ldr	r1, [pc, #12]	@ (800b360 <stdio_exit_handler+0x10>)
 800b354:	4803      	ldr	r0, [pc, #12]	@ (800b364 <stdio_exit_handler+0x14>)
 800b356:	f000 b869 	b.w	800b42c <_fwalk_sglue>
 800b35a:	bf00      	nop
 800b35c:	20000020 	.word	0x20000020
 800b360:	0800dadd 	.word	0x0800dadd
 800b364:	2000019c 	.word	0x2000019c

0800b368 <cleanup_stdio>:
 800b368:	6841      	ldr	r1, [r0, #4]
 800b36a:	4b0c      	ldr	r3, [pc, #48]	@ (800b39c <cleanup_stdio+0x34>)
 800b36c:	4299      	cmp	r1, r3
 800b36e:	b510      	push	{r4, lr}
 800b370:	4604      	mov	r4, r0
 800b372:	d001      	beq.n	800b378 <cleanup_stdio+0x10>
 800b374:	f002 fbb2 	bl	800dadc <_fflush_r>
 800b378:	68a1      	ldr	r1, [r4, #8]
 800b37a:	4b09      	ldr	r3, [pc, #36]	@ (800b3a0 <cleanup_stdio+0x38>)
 800b37c:	4299      	cmp	r1, r3
 800b37e:	d002      	beq.n	800b386 <cleanup_stdio+0x1e>
 800b380:	4620      	mov	r0, r4
 800b382:	f002 fbab 	bl	800dadc <_fflush_r>
 800b386:	68e1      	ldr	r1, [r4, #12]
 800b388:	4b06      	ldr	r3, [pc, #24]	@ (800b3a4 <cleanup_stdio+0x3c>)
 800b38a:	4299      	cmp	r1, r3
 800b38c:	d004      	beq.n	800b398 <cleanup_stdio+0x30>
 800b38e:	4620      	mov	r0, r4
 800b390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b394:	f002 bba2 	b.w	800dadc <_fflush_r>
 800b398:	bd10      	pop	{r4, pc}
 800b39a:	bf00      	nop
 800b39c:	200036f4 	.word	0x200036f4
 800b3a0:	2000375c 	.word	0x2000375c
 800b3a4:	200037c4 	.word	0x200037c4

0800b3a8 <global_stdio_init.part.0>:
 800b3a8:	b510      	push	{r4, lr}
 800b3aa:	4b0b      	ldr	r3, [pc, #44]	@ (800b3d8 <global_stdio_init.part.0+0x30>)
 800b3ac:	4c0b      	ldr	r4, [pc, #44]	@ (800b3dc <global_stdio_init.part.0+0x34>)
 800b3ae:	4a0c      	ldr	r2, [pc, #48]	@ (800b3e0 <global_stdio_init.part.0+0x38>)
 800b3b0:	601a      	str	r2, [r3, #0]
 800b3b2:	4620      	mov	r0, r4
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	2104      	movs	r1, #4
 800b3b8:	f7ff ff94 	bl	800b2e4 <std>
 800b3bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	2109      	movs	r1, #9
 800b3c4:	f7ff ff8e 	bl	800b2e4 <std>
 800b3c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b3cc:	2202      	movs	r2, #2
 800b3ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3d2:	2112      	movs	r1, #18
 800b3d4:	f7ff bf86 	b.w	800b2e4 <std>
 800b3d8:	2000382c 	.word	0x2000382c
 800b3dc:	200036f4 	.word	0x200036f4
 800b3e0:	0800b351 	.word	0x0800b351

0800b3e4 <__sfp_lock_acquire>:
 800b3e4:	4801      	ldr	r0, [pc, #4]	@ (800b3ec <__sfp_lock_acquire+0x8>)
 800b3e6:	f000 b98e 	b.w	800b706 <__retarget_lock_acquire_recursive>
 800b3ea:	bf00      	nop
 800b3ec:	20003835 	.word	0x20003835

0800b3f0 <__sfp_lock_release>:
 800b3f0:	4801      	ldr	r0, [pc, #4]	@ (800b3f8 <__sfp_lock_release+0x8>)
 800b3f2:	f000 b989 	b.w	800b708 <__retarget_lock_release_recursive>
 800b3f6:	bf00      	nop
 800b3f8:	20003835 	.word	0x20003835

0800b3fc <__sinit>:
 800b3fc:	b510      	push	{r4, lr}
 800b3fe:	4604      	mov	r4, r0
 800b400:	f7ff fff0 	bl	800b3e4 <__sfp_lock_acquire>
 800b404:	6a23      	ldr	r3, [r4, #32]
 800b406:	b11b      	cbz	r3, 800b410 <__sinit+0x14>
 800b408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b40c:	f7ff bff0 	b.w	800b3f0 <__sfp_lock_release>
 800b410:	4b04      	ldr	r3, [pc, #16]	@ (800b424 <__sinit+0x28>)
 800b412:	6223      	str	r3, [r4, #32]
 800b414:	4b04      	ldr	r3, [pc, #16]	@ (800b428 <__sinit+0x2c>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d1f5      	bne.n	800b408 <__sinit+0xc>
 800b41c:	f7ff ffc4 	bl	800b3a8 <global_stdio_init.part.0>
 800b420:	e7f2      	b.n	800b408 <__sinit+0xc>
 800b422:	bf00      	nop
 800b424:	0800b369 	.word	0x0800b369
 800b428:	2000382c 	.word	0x2000382c

0800b42c <_fwalk_sglue>:
 800b42c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b430:	4607      	mov	r7, r0
 800b432:	4688      	mov	r8, r1
 800b434:	4614      	mov	r4, r2
 800b436:	2600      	movs	r6, #0
 800b438:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b43c:	f1b9 0901 	subs.w	r9, r9, #1
 800b440:	d505      	bpl.n	800b44e <_fwalk_sglue+0x22>
 800b442:	6824      	ldr	r4, [r4, #0]
 800b444:	2c00      	cmp	r4, #0
 800b446:	d1f7      	bne.n	800b438 <_fwalk_sglue+0xc>
 800b448:	4630      	mov	r0, r6
 800b44a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b44e:	89ab      	ldrh	r3, [r5, #12]
 800b450:	2b01      	cmp	r3, #1
 800b452:	d907      	bls.n	800b464 <_fwalk_sglue+0x38>
 800b454:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b458:	3301      	adds	r3, #1
 800b45a:	d003      	beq.n	800b464 <_fwalk_sglue+0x38>
 800b45c:	4629      	mov	r1, r5
 800b45e:	4638      	mov	r0, r7
 800b460:	47c0      	blx	r8
 800b462:	4306      	orrs	r6, r0
 800b464:	3568      	adds	r5, #104	@ 0x68
 800b466:	e7e9      	b.n	800b43c <_fwalk_sglue+0x10>

0800b468 <siprintf>:
 800b468:	b40e      	push	{r1, r2, r3}
 800b46a:	b500      	push	{lr}
 800b46c:	b09c      	sub	sp, #112	@ 0x70
 800b46e:	ab1d      	add	r3, sp, #116	@ 0x74
 800b470:	9002      	str	r0, [sp, #8]
 800b472:	9006      	str	r0, [sp, #24]
 800b474:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b478:	4809      	ldr	r0, [pc, #36]	@ (800b4a0 <siprintf+0x38>)
 800b47a:	9107      	str	r1, [sp, #28]
 800b47c:	9104      	str	r1, [sp, #16]
 800b47e:	4909      	ldr	r1, [pc, #36]	@ (800b4a4 <siprintf+0x3c>)
 800b480:	f853 2b04 	ldr.w	r2, [r3], #4
 800b484:	9105      	str	r1, [sp, #20]
 800b486:	6800      	ldr	r0, [r0, #0]
 800b488:	9301      	str	r3, [sp, #4]
 800b48a:	a902      	add	r1, sp, #8
 800b48c:	f002 f9a6 	bl	800d7dc <_svfiprintf_r>
 800b490:	9b02      	ldr	r3, [sp, #8]
 800b492:	2200      	movs	r2, #0
 800b494:	701a      	strb	r2, [r3, #0]
 800b496:	b01c      	add	sp, #112	@ 0x70
 800b498:	f85d eb04 	ldr.w	lr, [sp], #4
 800b49c:	b003      	add	sp, #12
 800b49e:	4770      	bx	lr
 800b4a0:	20000198 	.word	0x20000198
 800b4a4:	ffff0208 	.word	0xffff0208

0800b4a8 <__sread>:
 800b4a8:	b510      	push	{r4, lr}
 800b4aa:	460c      	mov	r4, r1
 800b4ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4b0:	f000 f8da 	bl	800b668 <_read_r>
 800b4b4:	2800      	cmp	r0, #0
 800b4b6:	bfab      	itete	ge
 800b4b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b4ba:	89a3      	ldrhlt	r3, [r4, #12]
 800b4bc:	181b      	addge	r3, r3, r0
 800b4be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b4c2:	bfac      	ite	ge
 800b4c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b4c6:	81a3      	strhlt	r3, [r4, #12]
 800b4c8:	bd10      	pop	{r4, pc}

0800b4ca <__swrite>:
 800b4ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ce:	461f      	mov	r7, r3
 800b4d0:	898b      	ldrh	r3, [r1, #12]
 800b4d2:	05db      	lsls	r3, r3, #23
 800b4d4:	4605      	mov	r5, r0
 800b4d6:	460c      	mov	r4, r1
 800b4d8:	4616      	mov	r6, r2
 800b4da:	d505      	bpl.n	800b4e8 <__swrite+0x1e>
 800b4dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4e0:	2302      	movs	r3, #2
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	f000 f8ae 	bl	800b644 <_lseek_r>
 800b4e8:	89a3      	ldrh	r3, [r4, #12]
 800b4ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b4f2:	81a3      	strh	r3, [r4, #12]
 800b4f4:	4632      	mov	r2, r6
 800b4f6:	463b      	mov	r3, r7
 800b4f8:	4628      	mov	r0, r5
 800b4fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4fe:	f000 b8c5 	b.w	800b68c <_write_r>

0800b502 <__sseek>:
 800b502:	b510      	push	{r4, lr}
 800b504:	460c      	mov	r4, r1
 800b506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b50a:	f000 f89b 	bl	800b644 <_lseek_r>
 800b50e:	1c43      	adds	r3, r0, #1
 800b510:	89a3      	ldrh	r3, [r4, #12]
 800b512:	bf15      	itete	ne
 800b514:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b516:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b51a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b51e:	81a3      	strheq	r3, [r4, #12]
 800b520:	bf18      	it	ne
 800b522:	81a3      	strhne	r3, [r4, #12]
 800b524:	bd10      	pop	{r4, pc}

0800b526 <__sclose>:
 800b526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b52a:	f000 b87b 	b.w	800b624 <_close_r>

0800b52e <memset>:
 800b52e:	4402      	add	r2, r0
 800b530:	4603      	mov	r3, r0
 800b532:	4293      	cmp	r3, r2
 800b534:	d100      	bne.n	800b538 <memset+0xa>
 800b536:	4770      	bx	lr
 800b538:	f803 1b01 	strb.w	r1, [r3], #1
 800b53c:	e7f9      	b.n	800b532 <memset+0x4>

0800b53e <strncmp>:
 800b53e:	b510      	push	{r4, lr}
 800b540:	b16a      	cbz	r2, 800b55e <strncmp+0x20>
 800b542:	3901      	subs	r1, #1
 800b544:	1884      	adds	r4, r0, r2
 800b546:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b54a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b54e:	429a      	cmp	r2, r3
 800b550:	d103      	bne.n	800b55a <strncmp+0x1c>
 800b552:	42a0      	cmp	r0, r4
 800b554:	d001      	beq.n	800b55a <strncmp+0x1c>
 800b556:	2a00      	cmp	r2, #0
 800b558:	d1f5      	bne.n	800b546 <strncmp+0x8>
 800b55a:	1ad0      	subs	r0, r2, r3
 800b55c:	bd10      	pop	{r4, pc}
 800b55e:	4610      	mov	r0, r2
 800b560:	e7fc      	b.n	800b55c <strncmp+0x1e>
	...

0800b564 <strtok>:
 800b564:	4b16      	ldr	r3, [pc, #88]	@ (800b5c0 <strtok+0x5c>)
 800b566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b56a:	681f      	ldr	r7, [r3, #0]
 800b56c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800b56e:	4605      	mov	r5, r0
 800b570:	460e      	mov	r6, r1
 800b572:	b9ec      	cbnz	r4, 800b5b0 <strtok+0x4c>
 800b574:	2050      	movs	r0, #80	@ 0x50
 800b576:	f001 fad3 	bl	800cb20 <malloc>
 800b57a:	4602      	mov	r2, r0
 800b57c:	6478      	str	r0, [r7, #68]	@ 0x44
 800b57e:	b920      	cbnz	r0, 800b58a <strtok+0x26>
 800b580:	4b10      	ldr	r3, [pc, #64]	@ (800b5c4 <strtok+0x60>)
 800b582:	4811      	ldr	r0, [pc, #68]	@ (800b5c8 <strtok+0x64>)
 800b584:	215b      	movs	r1, #91	@ 0x5b
 800b586:	f000 f8dd 	bl	800b744 <__assert_func>
 800b58a:	e9c0 4400 	strd	r4, r4, [r0]
 800b58e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b592:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b596:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800b59a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800b59e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800b5a2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800b5a6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800b5aa:	6184      	str	r4, [r0, #24]
 800b5ac:	7704      	strb	r4, [r0, #28]
 800b5ae:	6244      	str	r4, [r0, #36]	@ 0x24
 800b5b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b5b2:	4631      	mov	r1, r6
 800b5b4:	4628      	mov	r0, r5
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5bc:	f000 b806 	b.w	800b5cc <__strtok_r>
 800b5c0:	20000198 	.word	0x20000198
 800b5c4:	0800e361 	.word	0x0800e361
 800b5c8:	0800e378 	.word	0x0800e378

0800b5cc <__strtok_r>:
 800b5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5ce:	4604      	mov	r4, r0
 800b5d0:	b908      	cbnz	r0, 800b5d6 <__strtok_r+0xa>
 800b5d2:	6814      	ldr	r4, [r2, #0]
 800b5d4:	b144      	cbz	r4, 800b5e8 <__strtok_r+0x1c>
 800b5d6:	4620      	mov	r0, r4
 800b5d8:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b5dc:	460f      	mov	r7, r1
 800b5de:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b5e2:	b91e      	cbnz	r6, 800b5ec <__strtok_r+0x20>
 800b5e4:	b965      	cbnz	r5, 800b600 <__strtok_r+0x34>
 800b5e6:	6015      	str	r5, [r2, #0]
 800b5e8:	2000      	movs	r0, #0
 800b5ea:	e005      	b.n	800b5f8 <__strtok_r+0x2c>
 800b5ec:	42b5      	cmp	r5, r6
 800b5ee:	d1f6      	bne.n	800b5de <__strtok_r+0x12>
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d1f0      	bne.n	800b5d6 <__strtok_r+0xa>
 800b5f4:	6014      	str	r4, [r2, #0]
 800b5f6:	7003      	strb	r3, [r0, #0]
 800b5f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5fa:	461c      	mov	r4, r3
 800b5fc:	e00c      	b.n	800b618 <__strtok_r+0x4c>
 800b5fe:	b915      	cbnz	r5, 800b606 <__strtok_r+0x3a>
 800b600:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b604:	460e      	mov	r6, r1
 800b606:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b60a:	42ab      	cmp	r3, r5
 800b60c:	d1f7      	bne.n	800b5fe <__strtok_r+0x32>
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d0f3      	beq.n	800b5fa <__strtok_r+0x2e>
 800b612:	2300      	movs	r3, #0
 800b614:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b618:	6014      	str	r4, [r2, #0]
 800b61a:	e7ed      	b.n	800b5f8 <__strtok_r+0x2c>

0800b61c <_localeconv_r>:
 800b61c:	4800      	ldr	r0, [pc, #0]	@ (800b620 <_localeconv_r+0x4>)
 800b61e:	4770      	bx	lr
 800b620:	2000011c 	.word	0x2000011c

0800b624 <_close_r>:
 800b624:	b538      	push	{r3, r4, r5, lr}
 800b626:	4d06      	ldr	r5, [pc, #24]	@ (800b640 <_close_r+0x1c>)
 800b628:	2300      	movs	r3, #0
 800b62a:	4604      	mov	r4, r0
 800b62c:	4608      	mov	r0, r1
 800b62e:	602b      	str	r3, [r5, #0]
 800b630:	f7fa f80b 	bl	800564a <_close>
 800b634:	1c43      	adds	r3, r0, #1
 800b636:	d102      	bne.n	800b63e <_close_r+0x1a>
 800b638:	682b      	ldr	r3, [r5, #0]
 800b63a:	b103      	cbz	r3, 800b63e <_close_r+0x1a>
 800b63c:	6023      	str	r3, [r4, #0]
 800b63e:	bd38      	pop	{r3, r4, r5, pc}
 800b640:	20003830 	.word	0x20003830

0800b644 <_lseek_r>:
 800b644:	b538      	push	{r3, r4, r5, lr}
 800b646:	4d07      	ldr	r5, [pc, #28]	@ (800b664 <_lseek_r+0x20>)
 800b648:	4604      	mov	r4, r0
 800b64a:	4608      	mov	r0, r1
 800b64c:	4611      	mov	r1, r2
 800b64e:	2200      	movs	r2, #0
 800b650:	602a      	str	r2, [r5, #0]
 800b652:	461a      	mov	r2, r3
 800b654:	f7fa f820 	bl	8005698 <_lseek>
 800b658:	1c43      	adds	r3, r0, #1
 800b65a:	d102      	bne.n	800b662 <_lseek_r+0x1e>
 800b65c:	682b      	ldr	r3, [r5, #0]
 800b65e:	b103      	cbz	r3, 800b662 <_lseek_r+0x1e>
 800b660:	6023      	str	r3, [r4, #0]
 800b662:	bd38      	pop	{r3, r4, r5, pc}
 800b664:	20003830 	.word	0x20003830

0800b668 <_read_r>:
 800b668:	b538      	push	{r3, r4, r5, lr}
 800b66a:	4d07      	ldr	r5, [pc, #28]	@ (800b688 <_read_r+0x20>)
 800b66c:	4604      	mov	r4, r0
 800b66e:	4608      	mov	r0, r1
 800b670:	4611      	mov	r1, r2
 800b672:	2200      	movs	r2, #0
 800b674:	602a      	str	r2, [r5, #0]
 800b676:	461a      	mov	r2, r3
 800b678:	f7f9 ffae 	bl	80055d8 <_read>
 800b67c:	1c43      	adds	r3, r0, #1
 800b67e:	d102      	bne.n	800b686 <_read_r+0x1e>
 800b680:	682b      	ldr	r3, [r5, #0]
 800b682:	b103      	cbz	r3, 800b686 <_read_r+0x1e>
 800b684:	6023      	str	r3, [r4, #0]
 800b686:	bd38      	pop	{r3, r4, r5, pc}
 800b688:	20003830 	.word	0x20003830

0800b68c <_write_r>:
 800b68c:	b538      	push	{r3, r4, r5, lr}
 800b68e:	4d07      	ldr	r5, [pc, #28]	@ (800b6ac <_write_r+0x20>)
 800b690:	4604      	mov	r4, r0
 800b692:	4608      	mov	r0, r1
 800b694:	4611      	mov	r1, r2
 800b696:	2200      	movs	r2, #0
 800b698:	602a      	str	r2, [r5, #0]
 800b69a:	461a      	mov	r2, r3
 800b69c:	f7f9 ffb9 	bl	8005612 <_write>
 800b6a0:	1c43      	adds	r3, r0, #1
 800b6a2:	d102      	bne.n	800b6aa <_write_r+0x1e>
 800b6a4:	682b      	ldr	r3, [r5, #0]
 800b6a6:	b103      	cbz	r3, 800b6aa <_write_r+0x1e>
 800b6a8:	6023      	str	r3, [r4, #0]
 800b6aa:	bd38      	pop	{r3, r4, r5, pc}
 800b6ac:	20003830 	.word	0x20003830

0800b6b0 <__errno>:
 800b6b0:	4b01      	ldr	r3, [pc, #4]	@ (800b6b8 <__errno+0x8>)
 800b6b2:	6818      	ldr	r0, [r3, #0]
 800b6b4:	4770      	bx	lr
 800b6b6:	bf00      	nop
 800b6b8:	20000198 	.word	0x20000198

0800b6bc <__libc_init_array>:
 800b6bc:	b570      	push	{r4, r5, r6, lr}
 800b6be:	4d0d      	ldr	r5, [pc, #52]	@ (800b6f4 <__libc_init_array+0x38>)
 800b6c0:	4c0d      	ldr	r4, [pc, #52]	@ (800b6f8 <__libc_init_array+0x3c>)
 800b6c2:	1b64      	subs	r4, r4, r5
 800b6c4:	10a4      	asrs	r4, r4, #2
 800b6c6:	2600      	movs	r6, #0
 800b6c8:	42a6      	cmp	r6, r4
 800b6ca:	d109      	bne.n	800b6e0 <__libc_init_array+0x24>
 800b6cc:	4d0b      	ldr	r5, [pc, #44]	@ (800b6fc <__libc_init_array+0x40>)
 800b6ce:	4c0c      	ldr	r4, [pc, #48]	@ (800b700 <__libc_init_array+0x44>)
 800b6d0:	f002 fd56 	bl	800e180 <_init>
 800b6d4:	1b64      	subs	r4, r4, r5
 800b6d6:	10a4      	asrs	r4, r4, #2
 800b6d8:	2600      	movs	r6, #0
 800b6da:	42a6      	cmp	r6, r4
 800b6dc:	d105      	bne.n	800b6ea <__libc_init_array+0x2e>
 800b6de:	bd70      	pop	{r4, r5, r6, pc}
 800b6e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6e4:	4798      	blx	r3
 800b6e6:	3601      	adds	r6, #1
 800b6e8:	e7ee      	b.n	800b6c8 <__libc_init_array+0xc>
 800b6ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6ee:	4798      	blx	r3
 800b6f0:	3601      	adds	r6, #1
 800b6f2:	e7f2      	b.n	800b6da <__libc_init_array+0x1e>
 800b6f4:	0800e764 	.word	0x0800e764
 800b6f8:	0800e764 	.word	0x0800e764
 800b6fc:	0800e764 	.word	0x0800e764
 800b700:	0800e768 	.word	0x0800e768

0800b704 <__retarget_lock_init_recursive>:
 800b704:	4770      	bx	lr

0800b706 <__retarget_lock_acquire_recursive>:
 800b706:	4770      	bx	lr

0800b708 <__retarget_lock_release_recursive>:
 800b708:	4770      	bx	lr

0800b70a <memcpy>:
 800b70a:	440a      	add	r2, r1
 800b70c:	4291      	cmp	r1, r2
 800b70e:	f100 33ff 	add.w	r3, r0, #4294967295
 800b712:	d100      	bne.n	800b716 <memcpy+0xc>
 800b714:	4770      	bx	lr
 800b716:	b510      	push	{r4, lr}
 800b718:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b71c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b720:	4291      	cmp	r1, r2
 800b722:	d1f9      	bne.n	800b718 <memcpy+0xe>
 800b724:	bd10      	pop	{r4, pc}
	...

0800b728 <nan>:
 800b728:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b730 <nan+0x8>
 800b72c:	4770      	bx	lr
 800b72e:	bf00      	nop
 800b730:	00000000 	.word	0x00000000
 800b734:	7ff80000 	.word	0x7ff80000

0800b738 <nanf>:
 800b738:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b740 <nanf+0x8>
 800b73c:	4770      	bx	lr
 800b73e:	bf00      	nop
 800b740:	7fc00000 	.word	0x7fc00000

0800b744 <__assert_func>:
 800b744:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b746:	4614      	mov	r4, r2
 800b748:	461a      	mov	r2, r3
 800b74a:	4b09      	ldr	r3, [pc, #36]	@ (800b770 <__assert_func+0x2c>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	4605      	mov	r5, r0
 800b750:	68d8      	ldr	r0, [r3, #12]
 800b752:	b954      	cbnz	r4, 800b76a <__assert_func+0x26>
 800b754:	4b07      	ldr	r3, [pc, #28]	@ (800b774 <__assert_func+0x30>)
 800b756:	461c      	mov	r4, r3
 800b758:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b75c:	9100      	str	r1, [sp, #0]
 800b75e:	462b      	mov	r3, r5
 800b760:	4905      	ldr	r1, [pc, #20]	@ (800b778 <__assert_func+0x34>)
 800b762:	f002 f9e3 	bl	800db2c <fiprintf>
 800b766:	f002 fa1d 	bl	800dba4 <abort>
 800b76a:	4b04      	ldr	r3, [pc, #16]	@ (800b77c <__assert_func+0x38>)
 800b76c:	e7f4      	b.n	800b758 <__assert_func+0x14>
 800b76e:	bf00      	nop
 800b770:	20000198 	.word	0x20000198
 800b774:	0800e415 	.word	0x0800e415
 800b778:	0800e3e7 	.word	0x0800e3e7
 800b77c:	0800e3da 	.word	0x0800e3da

0800b780 <quorem>:
 800b780:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b784:	6903      	ldr	r3, [r0, #16]
 800b786:	690c      	ldr	r4, [r1, #16]
 800b788:	42a3      	cmp	r3, r4
 800b78a:	4607      	mov	r7, r0
 800b78c:	db7e      	blt.n	800b88c <quorem+0x10c>
 800b78e:	3c01      	subs	r4, #1
 800b790:	f101 0814 	add.w	r8, r1, #20
 800b794:	00a3      	lsls	r3, r4, #2
 800b796:	f100 0514 	add.w	r5, r0, #20
 800b79a:	9300      	str	r3, [sp, #0]
 800b79c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7a0:	9301      	str	r3, [sp, #4]
 800b7a2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b7a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b7b2:	fbb2 f6f3 	udiv	r6, r2, r3
 800b7b6:	d32e      	bcc.n	800b816 <quorem+0x96>
 800b7b8:	f04f 0a00 	mov.w	sl, #0
 800b7bc:	46c4      	mov	ip, r8
 800b7be:	46ae      	mov	lr, r5
 800b7c0:	46d3      	mov	fp, sl
 800b7c2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b7c6:	b298      	uxth	r0, r3
 800b7c8:	fb06 a000 	mla	r0, r6, r0, sl
 800b7cc:	0c02      	lsrs	r2, r0, #16
 800b7ce:	0c1b      	lsrs	r3, r3, #16
 800b7d0:	fb06 2303 	mla	r3, r6, r3, r2
 800b7d4:	f8de 2000 	ldr.w	r2, [lr]
 800b7d8:	b280      	uxth	r0, r0
 800b7da:	b292      	uxth	r2, r2
 800b7dc:	1a12      	subs	r2, r2, r0
 800b7de:	445a      	add	r2, fp
 800b7e0:	f8de 0000 	ldr.w	r0, [lr]
 800b7e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b7ee:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b7f2:	b292      	uxth	r2, r2
 800b7f4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b7f8:	45e1      	cmp	r9, ip
 800b7fa:	f84e 2b04 	str.w	r2, [lr], #4
 800b7fe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b802:	d2de      	bcs.n	800b7c2 <quorem+0x42>
 800b804:	9b00      	ldr	r3, [sp, #0]
 800b806:	58eb      	ldr	r3, [r5, r3]
 800b808:	b92b      	cbnz	r3, 800b816 <quorem+0x96>
 800b80a:	9b01      	ldr	r3, [sp, #4]
 800b80c:	3b04      	subs	r3, #4
 800b80e:	429d      	cmp	r5, r3
 800b810:	461a      	mov	r2, r3
 800b812:	d32f      	bcc.n	800b874 <quorem+0xf4>
 800b814:	613c      	str	r4, [r7, #16]
 800b816:	4638      	mov	r0, r7
 800b818:	f001 fd0e 	bl	800d238 <__mcmp>
 800b81c:	2800      	cmp	r0, #0
 800b81e:	db25      	blt.n	800b86c <quorem+0xec>
 800b820:	4629      	mov	r1, r5
 800b822:	2000      	movs	r0, #0
 800b824:	f858 2b04 	ldr.w	r2, [r8], #4
 800b828:	f8d1 c000 	ldr.w	ip, [r1]
 800b82c:	fa1f fe82 	uxth.w	lr, r2
 800b830:	fa1f f38c 	uxth.w	r3, ip
 800b834:	eba3 030e 	sub.w	r3, r3, lr
 800b838:	4403      	add	r3, r0
 800b83a:	0c12      	lsrs	r2, r2, #16
 800b83c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b840:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b844:	b29b      	uxth	r3, r3
 800b846:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b84a:	45c1      	cmp	r9, r8
 800b84c:	f841 3b04 	str.w	r3, [r1], #4
 800b850:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b854:	d2e6      	bcs.n	800b824 <quorem+0xa4>
 800b856:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b85a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b85e:	b922      	cbnz	r2, 800b86a <quorem+0xea>
 800b860:	3b04      	subs	r3, #4
 800b862:	429d      	cmp	r5, r3
 800b864:	461a      	mov	r2, r3
 800b866:	d30b      	bcc.n	800b880 <quorem+0x100>
 800b868:	613c      	str	r4, [r7, #16]
 800b86a:	3601      	adds	r6, #1
 800b86c:	4630      	mov	r0, r6
 800b86e:	b003      	add	sp, #12
 800b870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b874:	6812      	ldr	r2, [r2, #0]
 800b876:	3b04      	subs	r3, #4
 800b878:	2a00      	cmp	r2, #0
 800b87a:	d1cb      	bne.n	800b814 <quorem+0x94>
 800b87c:	3c01      	subs	r4, #1
 800b87e:	e7c6      	b.n	800b80e <quorem+0x8e>
 800b880:	6812      	ldr	r2, [r2, #0]
 800b882:	3b04      	subs	r3, #4
 800b884:	2a00      	cmp	r2, #0
 800b886:	d1ef      	bne.n	800b868 <quorem+0xe8>
 800b888:	3c01      	subs	r4, #1
 800b88a:	e7ea      	b.n	800b862 <quorem+0xe2>
 800b88c:	2000      	movs	r0, #0
 800b88e:	e7ee      	b.n	800b86e <quorem+0xee>

0800b890 <_dtoa_r>:
 800b890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b894:	69c7      	ldr	r7, [r0, #28]
 800b896:	b099      	sub	sp, #100	@ 0x64
 800b898:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b89c:	ec55 4b10 	vmov	r4, r5, d0
 800b8a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b8a2:	9109      	str	r1, [sp, #36]	@ 0x24
 800b8a4:	4683      	mov	fp, r0
 800b8a6:	920e      	str	r2, [sp, #56]	@ 0x38
 800b8a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b8aa:	b97f      	cbnz	r7, 800b8cc <_dtoa_r+0x3c>
 800b8ac:	2010      	movs	r0, #16
 800b8ae:	f001 f937 	bl	800cb20 <malloc>
 800b8b2:	4602      	mov	r2, r0
 800b8b4:	f8cb 001c 	str.w	r0, [fp, #28]
 800b8b8:	b920      	cbnz	r0, 800b8c4 <_dtoa_r+0x34>
 800b8ba:	4ba7      	ldr	r3, [pc, #668]	@ (800bb58 <_dtoa_r+0x2c8>)
 800b8bc:	21ef      	movs	r1, #239	@ 0xef
 800b8be:	48a7      	ldr	r0, [pc, #668]	@ (800bb5c <_dtoa_r+0x2cc>)
 800b8c0:	f7ff ff40 	bl	800b744 <__assert_func>
 800b8c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b8c8:	6007      	str	r7, [r0, #0]
 800b8ca:	60c7      	str	r7, [r0, #12]
 800b8cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b8d0:	6819      	ldr	r1, [r3, #0]
 800b8d2:	b159      	cbz	r1, 800b8ec <_dtoa_r+0x5c>
 800b8d4:	685a      	ldr	r2, [r3, #4]
 800b8d6:	604a      	str	r2, [r1, #4]
 800b8d8:	2301      	movs	r3, #1
 800b8da:	4093      	lsls	r3, r2
 800b8dc:	608b      	str	r3, [r1, #8]
 800b8de:	4658      	mov	r0, fp
 800b8e0:	f001 fa26 	bl	800cd30 <_Bfree>
 800b8e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	601a      	str	r2, [r3, #0]
 800b8ec:	1e2b      	subs	r3, r5, #0
 800b8ee:	bfb9      	ittee	lt
 800b8f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b8f4:	9303      	strlt	r3, [sp, #12]
 800b8f6:	2300      	movge	r3, #0
 800b8f8:	6033      	strge	r3, [r6, #0]
 800b8fa:	9f03      	ldr	r7, [sp, #12]
 800b8fc:	4b98      	ldr	r3, [pc, #608]	@ (800bb60 <_dtoa_r+0x2d0>)
 800b8fe:	bfbc      	itt	lt
 800b900:	2201      	movlt	r2, #1
 800b902:	6032      	strlt	r2, [r6, #0]
 800b904:	43bb      	bics	r3, r7
 800b906:	d112      	bne.n	800b92e <_dtoa_r+0x9e>
 800b908:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b90a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b90e:	6013      	str	r3, [r2, #0]
 800b910:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b914:	4323      	orrs	r3, r4
 800b916:	f000 854d 	beq.w	800c3b4 <_dtoa_r+0xb24>
 800b91a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b91c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bb74 <_dtoa_r+0x2e4>
 800b920:	2b00      	cmp	r3, #0
 800b922:	f000 854f 	beq.w	800c3c4 <_dtoa_r+0xb34>
 800b926:	f10a 0303 	add.w	r3, sl, #3
 800b92a:	f000 bd49 	b.w	800c3c0 <_dtoa_r+0xb30>
 800b92e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b932:	2200      	movs	r2, #0
 800b934:	ec51 0b17 	vmov	r0, r1, d7
 800b938:	2300      	movs	r3, #0
 800b93a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b93e:	f7f5 f8e3 	bl	8000b08 <__aeabi_dcmpeq>
 800b942:	4680      	mov	r8, r0
 800b944:	b158      	cbz	r0, 800b95e <_dtoa_r+0xce>
 800b946:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b948:	2301      	movs	r3, #1
 800b94a:	6013      	str	r3, [r2, #0]
 800b94c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b94e:	b113      	cbz	r3, 800b956 <_dtoa_r+0xc6>
 800b950:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b952:	4b84      	ldr	r3, [pc, #528]	@ (800bb64 <_dtoa_r+0x2d4>)
 800b954:	6013      	str	r3, [r2, #0]
 800b956:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bb78 <_dtoa_r+0x2e8>
 800b95a:	f000 bd33 	b.w	800c3c4 <_dtoa_r+0xb34>
 800b95e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b962:	aa16      	add	r2, sp, #88	@ 0x58
 800b964:	a917      	add	r1, sp, #92	@ 0x5c
 800b966:	4658      	mov	r0, fp
 800b968:	f001 fd86 	bl	800d478 <__d2b>
 800b96c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b970:	4681      	mov	r9, r0
 800b972:	2e00      	cmp	r6, #0
 800b974:	d077      	beq.n	800ba66 <_dtoa_r+0x1d6>
 800b976:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b978:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b97c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b980:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b984:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b988:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b98c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b990:	4619      	mov	r1, r3
 800b992:	2200      	movs	r2, #0
 800b994:	4b74      	ldr	r3, [pc, #464]	@ (800bb68 <_dtoa_r+0x2d8>)
 800b996:	f7f4 fc97 	bl	80002c8 <__aeabi_dsub>
 800b99a:	a369      	add	r3, pc, #420	@ (adr r3, 800bb40 <_dtoa_r+0x2b0>)
 800b99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a0:	f7f4 fe4a 	bl	8000638 <__aeabi_dmul>
 800b9a4:	a368      	add	r3, pc, #416	@ (adr r3, 800bb48 <_dtoa_r+0x2b8>)
 800b9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9aa:	f7f4 fc8f 	bl	80002cc <__adddf3>
 800b9ae:	4604      	mov	r4, r0
 800b9b0:	4630      	mov	r0, r6
 800b9b2:	460d      	mov	r5, r1
 800b9b4:	f7f4 fdd6 	bl	8000564 <__aeabi_i2d>
 800b9b8:	a365      	add	r3, pc, #404	@ (adr r3, 800bb50 <_dtoa_r+0x2c0>)
 800b9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9be:	f7f4 fe3b 	bl	8000638 <__aeabi_dmul>
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	4620      	mov	r0, r4
 800b9c8:	4629      	mov	r1, r5
 800b9ca:	f7f4 fc7f 	bl	80002cc <__adddf3>
 800b9ce:	4604      	mov	r4, r0
 800b9d0:	460d      	mov	r5, r1
 800b9d2:	f7f5 f8e1 	bl	8000b98 <__aeabi_d2iz>
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	4607      	mov	r7, r0
 800b9da:	2300      	movs	r3, #0
 800b9dc:	4620      	mov	r0, r4
 800b9de:	4629      	mov	r1, r5
 800b9e0:	f7f5 f89c 	bl	8000b1c <__aeabi_dcmplt>
 800b9e4:	b140      	cbz	r0, 800b9f8 <_dtoa_r+0x168>
 800b9e6:	4638      	mov	r0, r7
 800b9e8:	f7f4 fdbc 	bl	8000564 <__aeabi_i2d>
 800b9ec:	4622      	mov	r2, r4
 800b9ee:	462b      	mov	r3, r5
 800b9f0:	f7f5 f88a 	bl	8000b08 <__aeabi_dcmpeq>
 800b9f4:	b900      	cbnz	r0, 800b9f8 <_dtoa_r+0x168>
 800b9f6:	3f01      	subs	r7, #1
 800b9f8:	2f16      	cmp	r7, #22
 800b9fa:	d851      	bhi.n	800baa0 <_dtoa_r+0x210>
 800b9fc:	4b5b      	ldr	r3, [pc, #364]	@ (800bb6c <_dtoa_r+0x2dc>)
 800b9fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ba02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba0a:	f7f5 f887 	bl	8000b1c <__aeabi_dcmplt>
 800ba0e:	2800      	cmp	r0, #0
 800ba10:	d048      	beq.n	800baa4 <_dtoa_r+0x214>
 800ba12:	3f01      	subs	r7, #1
 800ba14:	2300      	movs	r3, #0
 800ba16:	9312      	str	r3, [sp, #72]	@ 0x48
 800ba18:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ba1a:	1b9b      	subs	r3, r3, r6
 800ba1c:	1e5a      	subs	r2, r3, #1
 800ba1e:	bf44      	itt	mi
 800ba20:	f1c3 0801 	rsbmi	r8, r3, #1
 800ba24:	2300      	movmi	r3, #0
 800ba26:	9208      	str	r2, [sp, #32]
 800ba28:	bf54      	ite	pl
 800ba2a:	f04f 0800 	movpl.w	r8, #0
 800ba2e:	9308      	strmi	r3, [sp, #32]
 800ba30:	2f00      	cmp	r7, #0
 800ba32:	db39      	blt.n	800baa8 <_dtoa_r+0x218>
 800ba34:	9b08      	ldr	r3, [sp, #32]
 800ba36:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ba38:	443b      	add	r3, r7
 800ba3a:	9308      	str	r3, [sp, #32]
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba42:	2b09      	cmp	r3, #9
 800ba44:	d864      	bhi.n	800bb10 <_dtoa_r+0x280>
 800ba46:	2b05      	cmp	r3, #5
 800ba48:	bfc4      	itt	gt
 800ba4a:	3b04      	subgt	r3, #4
 800ba4c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ba4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba50:	f1a3 0302 	sub.w	r3, r3, #2
 800ba54:	bfcc      	ite	gt
 800ba56:	2400      	movgt	r4, #0
 800ba58:	2401      	movle	r4, #1
 800ba5a:	2b03      	cmp	r3, #3
 800ba5c:	d863      	bhi.n	800bb26 <_dtoa_r+0x296>
 800ba5e:	e8df f003 	tbb	[pc, r3]
 800ba62:	372a      	.short	0x372a
 800ba64:	5535      	.short	0x5535
 800ba66:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ba6a:	441e      	add	r6, r3
 800ba6c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ba70:	2b20      	cmp	r3, #32
 800ba72:	bfc1      	itttt	gt
 800ba74:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ba78:	409f      	lslgt	r7, r3
 800ba7a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ba7e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ba82:	bfd6      	itet	le
 800ba84:	f1c3 0320 	rsble	r3, r3, #32
 800ba88:	ea47 0003 	orrgt.w	r0, r7, r3
 800ba8c:	fa04 f003 	lslle.w	r0, r4, r3
 800ba90:	f7f4 fd58 	bl	8000544 <__aeabi_ui2d>
 800ba94:	2201      	movs	r2, #1
 800ba96:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ba9a:	3e01      	subs	r6, #1
 800ba9c:	9214      	str	r2, [sp, #80]	@ 0x50
 800ba9e:	e777      	b.n	800b990 <_dtoa_r+0x100>
 800baa0:	2301      	movs	r3, #1
 800baa2:	e7b8      	b.n	800ba16 <_dtoa_r+0x186>
 800baa4:	9012      	str	r0, [sp, #72]	@ 0x48
 800baa6:	e7b7      	b.n	800ba18 <_dtoa_r+0x188>
 800baa8:	427b      	negs	r3, r7
 800baaa:	930a      	str	r3, [sp, #40]	@ 0x28
 800baac:	2300      	movs	r3, #0
 800baae:	eba8 0807 	sub.w	r8, r8, r7
 800bab2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bab4:	e7c4      	b.n	800ba40 <_dtoa_r+0x1b0>
 800bab6:	2300      	movs	r3, #0
 800bab8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800baba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800babc:	2b00      	cmp	r3, #0
 800babe:	dc35      	bgt.n	800bb2c <_dtoa_r+0x29c>
 800bac0:	2301      	movs	r3, #1
 800bac2:	9300      	str	r3, [sp, #0]
 800bac4:	9307      	str	r3, [sp, #28]
 800bac6:	461a      	mov	r2, r3
 800bac8:	920e      	str	r2, [sp, #56]	@ 0x38
 800baca:	e00b      	b.n	800bae4 <_dtoa_r+0x254>
 800bacc:	2301      	movs	r3, #1
 800bace:	e7f3      	b.n	800bab8 <_dtoa_r+0x228>
 800bad0:	2300      	movs	r3, #0
 800bad2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bad4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bad6:	18fb      	adds	r3, r7, r3
 800bad8:	9300      	str	r3, [sp, #0]
 800bada:	3301      	adds	r3, #1
 800badc:	2b01      	cmp	r3, #1
 800bade:	9307      	str	r3, [sp, #28]
 800bae0:	bfb8      	it	lt
 800bae2:	2301      	movlt	r3, #1
 800bae4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bae8:	2100      	movs	r1, #0
 800baea:	2204      	movs	r2, #4
 800baec:	f102 0514 	add.w	r5, r2, #20
 800baf0:	429d      	cmp	r5, r3
 800baf2:	d91f      	bls.n	800bb34 <_dtoa_r+0x2a4>
 800baf4:	6041      	str	r1, [r0, #4]
 800baf6:	4658      	mov	r0, fp
 800baf8:	f001 f8da 	bl	800ccb0 <_Balloc>
 800bafc:	4682      	mov	sl, r0
 800bafe:	2800      	cmp	r0, #0
 800bb00:	d13c      	bne.n	800bb7c <_dtoa_r+0x2ec>
 800bb02:	4b1b      	ldr	r3, [pc, #108]	@ (800bb70 <_dtoa_r+0x2e0>)
 800bb04:	4602      	mov	r2, r0
 800bb06:	f240 11af 	movw	r1, #431	@ 0x1af
 800bb0a:	e6d8      	b.n	800b8be <_dtoa_r+0x2e>
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	e7e0      	b.n	800bad2 <_dtoa_r+0x242>
 800bb10:	2401      	movs	r4, #1
 800bb12:	2300      	movs	r3, #0
 800bb14:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb16:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bb18:	f04f 33ff 	mov.w	r3, #4294967295
 800bb1c:	9300      	str	r3, [sp, #0]
 800bb1e:	9307      	str	r3, [sp, #28]
 800bb20:	2200      	movs	r2, #0
 800bb22:	2312      	movs	r3, #18
 800bb24:	e7d0      	b.n	800bac8 <_dtoa_r+0x238>
 800bb26:	2301      	movs	r3, #1
 800bb28:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb2a:	e7f5      	b.n	800bb18 <_dtoa_r+0x288>
 800bb2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb2e:	9300      	str	r3, [sp, #0]
 800bb30:	9307      	str	r3, [sp, #28]
 800bb32:	e7d7      	b.n	800bae4 <_dtoa_r+0x254>
 800bb34:	3101      	adds	r1, #1
 800bb36:	0052      	lsls	r2, r2, #1
 800bb38:	e7d8      	b.n	800baec <_dtoa_r+0x25c>
 800bb3a:	bf00      	nop
 800bb3c:	f3af 8000 	nop.w
 800bb40:	636f4361 	.word	0x636f4361
 800bb44:	3fd287a7 	.word	0x3fd287a7
 800bb48:	8b60c8b3 	.word	0x8b60c8b3
 800bb4c:	3fc68a28 	.word	0x3fc68a28
 800bb50:	509f79fb 	.word	0x509f79fb
 800bb54:	3fd34413 	.word	0x3fd34413
 800bb58:	0800e361 	.word	0x0800e361
 800bb5c:	0800e423 	.word	0x0800e423
 800bb60:	7ff00000 	.word	0x7ff00000
 800bb64:	0800e339 	.word	0x0800e339
 800bb68:	3ff80000 	.word	0x3ff80000
 800bb6c:	0800e580 	.word	0x0800e580
 800bb70:	0800e47b 	.word	0x0800e47b
 800bb74:	0800e41f 	.word	0x0800e41f
 800bb78:	0800e338 	.word	0x0800e338
 800bb7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bb80:	6018      	str	r0, [r3, #0]
 800bb82:	9b07      	ldr	r3, [sp, #28]
 800bb84:	2b0e      	cmp	r3, #14
 800bb86:	f200 80a4 	bhi.w	800bcd2 <_dtoa_r+0x442>
 800bb8a:	2c00      	cmp	r4, #0
 800bb8c:	f000 80a1 	beq.w	800bcd2 <_dtoa_r+0x442>
 800bb90:	2f00      	cmp	r7, #0
 800bb92:	dd33      	ble.n	800bbfc <_dtoa_r+0x36c>
 800bb94:	4bad      	ldr	r3, [pc, #692]	@ (800be4c <_dtoa_r+0x5bc>)
 800bb96:	f007 020f 	and.w	r2, r7, #15
 800bb9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb9e:	ed93 7b00 	vldr	d7, [r3]
 800bba2:	05f8      	lsls	r0, r7, #23
 800bba4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bba8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bbac:	d516      	bpl.n	800bbdc <_dtoa_r+0x34c>
 800bbae:	4ba8      	ldr	r3, [pc, #672]	@ (800be50 <_dtoa_r+0x5c0>)
 800bbb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bbb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bbb8:	f7f4 fe68 	bl	800088c <__aeabi_ddiv>
 800bbbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbc0:	f004 040f 	and.w	r4, r4, #15
 800bbc4:	2603      	movs	r6, #3
 800bbc6:	4da2      	ldr	r5, [pc, #648]	@ (800be50 <_dtoa_r+0x5c0>)
 800bbc8:	b954      	cbnz	r4, 800bbe0 <_dtoa_r+0x350>
 800bbca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbd2:	f7f4 fe5b 	bl	800088c <__aeabi_ddiv>
 800bbd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbda:	e028      	b.n	800bc2e <_dtoa_r+0x39e>
 800bbdc:	2602      	movs	r6, #2
 800bbde:	e7f2      	b.n	800bbc6 <_dtoa_r+0x336>
 800bbe0:	07e1      	lsls	r1, r4, #31
 800bbe2:	d508      	bpl.n	800bbf6 <_dtoa_r+0x366>
 800bbe4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bbe8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bbec:	f7f4 fd24 	bl	8000638 <__aeabi_dmul>
 800bbf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bbf4:	3601      	adds	r6, #1
 800bbf6:	1064      	asrs	r4, r4, #1
 800bbf8:	3508      	adds	r5, #8
 800bbfa:	e7e5      	b.n	800bbc8 <_dtoa_r+0x338>
 800bbfc:	f000 80d2 	beq.w	800bda4 <_dtoa_r+0x514>
 800bc00:	427c      	negs	r4, r7
 800bc02:	4b92      	ldr	r3, [pc, #584]	@ (800be4c <_dtoa_r+0x5bc>)
 800bc04:	4d92      	ldr	r5, [pc, #584]	@ (800be50 <_dtoa_r+0x5c0>)
 800bc06:	f004 020f 	and.w	r2, r4, #15
 800bc0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc16:	f7f4 fd0f 	bl	8000638 <__aeabi_dmul>
 800bc1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc1e:	1124      	asrs	r4, r4, #4
 800bc20:	2300      	movs	r3, #0
 800bc22:	2602      	movs	r6, #2
 800bc24:	2c00      	cmp	r4, #0
 800bc26:	f040 80b2 	bne.w	800bd8e <_dtoa_r+0x4fe>
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d1d3      	bne.n	800bbd6 <_dtoa_r+0x346>
 800bc2e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bc30:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	f000 80b7 	beq.w	800bda8 <_dtoa_r+0x518>
 800bc3a:	4b86      	ldr	r3, [pc, #536]	@ (800be54 <_dtoa_r+0x5c4>)
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	4620      	mov	r0, r4
 800bc40:	4629      	mov	r1, r5
 800bc42:	f7f4 ff6b 	bl	8000b1c <__aeabi_dcmplt>
 800bc46:	2800      	cmp	r0, #0
 800bc48:	f000 80ae 	beq.w	800bda8 <_dtoa_r+0x518>
 800bc4c:	9b07      	ldr	r3, [sp, #28]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	f000 80aa 	beq.w	800bda8 <_dtoa_r+0x518>
 800bc54:	9b00      	ldr	r3, [sp, #0]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	dd37      	ble.n	800bcca <_dtoa_r+0x43a>
 800bc5a:	1e7b      	subs	r3, r7, #1
 800bc5c:	9304      	str	r3, [sp, #16]
 800bc5e:	4620      	mov	r0, r4
 800bc60:	4b7d      	ldr	r3, [pc, #500]	@ (800be58 <_dtoa_r+0x5c8>)
 800bc62:	2200      	movs	r2, #0
 800bc64:	4629      	mov	r1, r5
 800bc66:	f7f4 fce7 	bl	8000638 <__aeabi_dmul>
 800bc6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc6e:	9c00      	ldr	r4, [sp, #0]
 800bc70:	3601      	adds	r6, #1
 800bc72:	4630      	mov	r0, r6
 800bc74:	f7f4 fc76 	bl	8000564 <__aeabi_i2d>
 800bc78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc7c:	f7f4 fcdc 	bl	8000638 <__aeabi_dmul>
 800bc80:	4b76      	ldr	r3, [pc, #472]	@ (800be5c <_dtoa_r+0x5cc>)
 800bc82:	2200      	movs	r2, #0
 800bc84:	f7f4 fb22 	bl	80002cc <__adddf3>
 800bc88:	4605      	mov	r5, r0
 800bc8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bc8e:	2c00      	cmp	r4, #0
 800bc90:	f040 808d 	bne.w	800bdae <_dtoa_r+0x51e>
 800bc94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc98:	4b71      	ldr	r3, [pc, #452]	@ (800be60 <_dtoa_r+0x5d0>)
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	f7f4 fb14 	bl	80002c8 <__aeabi_dsub>
 800bca0:	4602      	mov	r2, r0
 800bca2:	460b      	mov	r3, r1
 800bca4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bca8:	462a      	mov	r2, r5
 800bcaa:	4633      	mov	r3, r6
 800bcac:	f7f4 ff54 	bl	8000b58 <__aeabi_dcmpgt>
 800bcb0:	2800      	cmp	r0, #0
 800bcb2:	f040 828b 	bne.w	800c1cc <_dtoa_r+0x93c>
 800bcb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcba:	462a      	mov	r2, r5
 800bcbc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bcc0:	f7f4 ff2c 	bl	8000b1c <__aeabi_dcmplt>
 800bcc4:	2800      	cmp	r0, #0
 800bcc6:	f040 8128 	bne.w	800bf1a <_dtoa_r+0x68a>
 800bcca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bcce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bcd2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	f2c0 815a 	blt.w	800bf8e <_dtoa_r+0x6fe>
 800bcda:	2f0e      	cmp	r7, #14
 800bcdc:	f300 8157 	bgt.w	800bf8e <_dtoa_r+0x6fe>
 800bce0:	4b5a      	ldr	r3, [pc, #360]	@ (800be4c <_dtoa_r+0x5bc>)
 800bce2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bce6:	ed93 7b00 	vldr	d7, [r3]
 800bcea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	ed8d 7b00 	vstr	d7, [sp]
 800bcf2:	da03      	bge.n	800bcfc <_dtoa_r+0x46c>
 800bcf4:	9b07      	ldr	r3, [sp, #28]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	f340 8101 	ble.w	800befe <_dtoa_r+0x66e>
 800bcfc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bd00:	4656      	mov	r6, sl
 800bd02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd06:	4620      	mov	r0, r4
 800bd08:	4629      	mov	r1, r5
 800bd0a:	f7f4 fdbf 	bl	800088c <__aeabi_ddiv>
 800bd0e:	f7f4 ff43 	bl	8000b98 <__aeabi_d2iz>
 800bd12:	4680      	mov	r8, r0
 800bd14:	f7f4 fc26 	bl	8000564 <__aeabi_i2d>
 800bd18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd1c:	f7f4 fc8c 	bl	8000638 <__aeabi_dmul>
 800bd20:	4602      	mov	r2, r0
 800bd22:	460b      	mov	r3, r1
 800bd24:	4620      	mov	r0, r4
 800bd26:	4629      	mov	r1, r5
 800bd28:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bd2c:	f7f4 facc 	bl	80002c8 <__aeabi_dsub>
 800bd30:	f806 4b01 	strb.w	r4, [r6], #1
 800bd34:	9d07      	ldr	r5, [sp, #28]
 800bd36:	eba6 040a 	sub.w	r4, r6, sl
 800bd3a:	42a5      	cmp	r5, r4
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	460b      	mov	r3, r1
 800bd40:	f040 8117 	bne.w	800bf72 <_dtoa_r+0x6e2>
 800bd44:	f7f4 fac2 	bl	80002cc <__adddf3>
 800bd48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd4c:	4604      	mov	r4, r0
 800bd4e:	460d      	mov	r5, r1
 800bd50:	f7f4 ff02 	bl	8000b58 <__aeabi_dcmpgt>
 800bd54:	2800      	cmp	r0, #0
 800bd56:	f040 80f9 	bne.w	800bf4c <_dtoa_r+0x6bc>
 800bd5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd5e:	4620      	mov	r0, r4
 800bd60:	4629      	mov	r1, r5
 800bd62:	f7f4 fed1 	bl	8000b08 <__aeabi_dcmpeq>
 800bd66:	b118      	cbz	r0, 800bd70 <_dtoa_r+0x4e0>
 800bd68:	f018 0f01 	tst.w	r8, #1
 800bd6c:	f040 80ee 	bne.w	800bf4c <_dtoa_r+0x6bc>
 800bd70:	4649      	mov	r1, r9
 800bd72:	4658      	mov	r0, fp
 800bd74:	f000 ffdc 	bl	800cd30 <_Bfree>
 800bd78:	2300      	movs	r3, #0
 800bd7a:	7033      	strb	r3, [r6, #0]
 800bd7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bd7e:	3701      	adds	r7, #1
 800bd80:	601f      	str	r7, [r3, #0]
 800bd82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	f000 831d 	beq.w	800c3c4 <_dtoa_r+0xb34>
 800bd8a:	601e      	str	r6, [r3, #0]
 800bd8c:	e31a      	b.n	800c3c4 <_dtoa_r+0xb34>
 800bd8e:	07e2      	lsls	r2, r4, #31
 800bd90:	d505      	bpl.n	800bd9e <_dtoa_r+0x50e>
 800bd92:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bd96:	f7f4 fc4f 	bl	8000638 <__aeabi_dmul>
 800bd9a:	3601      	adds	r6, #1
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	1064      	asrs	r4, r4, #1
 800bda0:	3508      	adds	r5, #8
 800bda2:	e73f      	b.n	800bc24 <_dtoa_r+0x394>
 800bda4:	2602      	movs	r6, #2
 800bda6:	e742      	b.n	800bc2e <_dtoa_r+0x39e>
 800bda8:	9c07      	ldr	r4, [sp, #28]
 800bdaa:	9704      	str	r7, [sp, #16]
 800bdac:	e761      	b.n	800bc72 <_dtoa_r+0x3e2>
 800bdae:	4b27      	ldr	r3, [pc, #156]	@ (800be4c <_dtoa_r+0x5bc>)
 800bdb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bdb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bdb6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bdba:	4454      	add	r4, sl
 800bdbc:	2900      	cmp	r1, #0
 800bdbe:	d053      	beq.n	800be68 <_dtoa_r+0x5d8>
 800bdc0:	4928      	ldr	r1, [pc, #160]	@ (800be64 <_dtoa_r+0x5d4>)
 800bdc2:	2000      	movs	r0, #0
 800bdc4:	f7f4 fd62 	bl	800088c <__aeabi_ddiv>
 800bdc8:	4633      	mov	r3, r6
 800bdca:	462a      	mov	r2, r5
 800bdcc:	f7f4 fa7c 	bl	80002c8 <__aeabi_dsub>
 800bdd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bdd4:	4656      	mov	r6, sl
 800bdd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdda:	f7f4 fedd 	bl	8000b98 <__aeabi_d2iz>
 800bdde:	4605      	mov	r5, r0
 800bde0:	f7f4 fbc0 	bl	8000564 <__aeabi_i2d>
 800bde4:	4602      	mov	r2, r0
 800bde6:	460b      	mov	r3, r1
 800bde8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdec:	f7f4 fa6c 	bl	80002c8 <__aeabi_dsub>
 800bdf0:	3530      	adds	r5, #48	@ 0x30
 800bdf2:	4602      	mov	r2, r0
 800bdf4:	460b      	mov	r3, r1
 800bdf6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bdfa:	f806 5b01 	strb.w	r5, [r6], #1
 800bdfe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800be02:	f7f4 fe8b 	bl	8000b1c <__aeabi_dcmplt>
 800be06:	2800      	cmp	r0, #0
 800be08:	d171      	bne.n	800beee <_dtoa_r+0x65e>
 800be0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be0e:	4911      	ldr	r1, [pc, #68]	@ (800be54 <_dtoa_r+0x5c4>)
 800be10:	2000      	movs	r0, #0
 800be12:	f7f4 fa59 	bl	80002c8 <__aeabi_dsub>
 800be16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800be1a:	f7f4 fe7f 	bl	8000b1c <__aeabi_dcmplt>
 800be1e:	2800      	cmp	r0, #0
 800be20:	f040 8095 	bne.w	800bf4e <_dtoa_r+0x6be>
 800be24:	42a6      	cmp	r6, r4
 800be26:	f43f af50 	beq.w	800bcca <_dtoa_r+0x43a>
 800be2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800be2e:	4b0a      	ldr	r3, [pc, #40]	@ (800be58 <_dtoa_r+0x5c8>)
 800be30:	2200      	movs	r2, #0
 800be32:	f7f4 fc01 	bl	8000638 <__aeabi_dmul>
 800be36:	4b08      	ldr	r3, [pc, #32]	@ (800be58 <_dtoa_r+0x5c8>)
 800be38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800be3c:	2200      	movs	r2, #0
 800be3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be42:	f7f4 fbf9 	bl	8000638 <__aeabi_dmul>
 800be46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be4a:	e7c4      	b.n	800bdd6 <_dtoa_r+0x546>
 800be4c:	0800e580 	.word	0x0800e580
 800be50:	0800e558 	.word	0x0800e558
 800be54:	3ff00000 	.word	0x3ff00000
 800be58:	40240000 	.word	0x40240000
 800be5c:	401c0000 	.word	0x401c0000
 800be60:	40140000 	.word	0x40140000
 800be64:	3fe00000 	.word	0x3fe00000
 800be68:	4631      	mov	r1, r6
 800be6a:	4628      	mov	r0, r5
 800be6c:	f7f4 fbe4 	bl	8000638 <__aeabi_dmul>
 800be70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800be74:	9415      	str	r4, [sp, #84]	@ 0x54
 800be76:	4656      	mov	r6, sl
 800be78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be7c:	f7f4 fe8c 	bl	8000b98 <__aeabi_d2iz>
 800be80:	4605      	mov	r5, r0
 800be82:	f7f4 fb6f 	bl	8000564 <__aeabi_i2d>
 800be86:	4602      	mov	r2, r0
 800be88:	460b      	mov	r3, r1
 800be8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be8e:	f7f4 fa1b 	bl	80002c8 <__aeabi_dsub>
 800be92:	3530      	adds	r5, #48	@ 0x30
 800be94:	f806 5b01 	strb.w	r5, [r6], #1
 800be98:	4602      	mov	r2, r0
 800be9a:	460b      	mov	r3, r1
 800be9c:	42a6      	cmp	r6, r4
 800be9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bea2:	f04f 0200 	mov.w	r2, #0
 800bea6:	d124      	bne.n	800bef2 <_dtoa_r+0x662>
 800bea8:	4bac      	ldr	r3, [pc, #688]	@ (800c15c <_dtoa_r+0x8cc>)
 800beaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800beae:	f7f4 fa0d 	bl	80002cc <__adddf3>
 800beb2:	4602      	mov	r2, r0
 800beb4:	460b      	mov	r3, r1
 800beb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800beba:	f7f4 fe4d 	bl	8000b58 <__aeabi_dcmpgt>
 800bebe:	2800      	cmp	r0, #0
 800bec0:	d145      	bne.n	800bf4e <_dtoa_r+0x6be>
 800bec2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bec6:	49a5      	ldr	r1, [pc, #660]	@ (800c15c <_dtoa_r+0x8cc>)
 800bec8:	2000      	movs	r0, #0
 800beca:	f7f4 f9fd 	bl	80002c8 <__aeabi_dsub>
 800bece:	4602      	mov	r2, r0
 800bed0:	460b      	mov	r3, r1
 800bed2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bed6:	f7f4 fe21 	bl	8000b1c <__aeabi_dcmplt>
 800beda:	2800      	cmp	r0, #0
 800bedc:	f43f aef5 	beq.w	800bcca <_dtoa_r+0x43a>
 800bee0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800bee2:	1e73      	subs	r3, r6, #1
 800bee4:	9315      	str	r3, [sp, #84]	@ 0x54
 800bee6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800beea:	2b30      	cmp	r3, #48	@ 0x30
 800beec:	d0f8      	beq.n	800bee0 <_dtoa_r+0x650>
 800beee:	9f04      	ldr	r7, [sp, #16]
 800bef0:	e73e      	b.n	800bd70 <_dtoa_r+0x4e0>
 800bef2:	4b9b      	ldr	r3, [pc, #620]	@ (800c160 <_dtoa_r+0x8d0>)
 800bef4:	f7f4 fba0 	bl	8000638 <__aeabi_dmul>
 800bef8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800befc:	e7bc      	b.n	800be78 <_dtoa_r+0x5e8>
 800befe:	d10c      	bne.n	800bf1a <_dtoa_r+0x68a>
 800bf00:	4b98      	ldr	r3, [pc, #608]	@ (800c164 <_dtoa_r+0x8d4>)
 800bf02:	2200      	movs	r2, #0
 800bf04:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf08:	f7f4 fb96 	bl	8000638 <__aeabi_dmul>
 800bf0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf10:	f7f4 fe18 	bl	8000b44 <__aeabi_dcmpge>
 800bf14:	2800      	cmp	r0, #0
 800bf16:	f000 8157 	beq.w	800c1c8 <_dtoa_r+0x938>
 800bf1a:	2400      	movs	r4, #0
 800bf1c:	4625      	mov	r5, r4
 800bf1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf20:	43db      	mvns	r3, r3
 800bf22:	9304      	str	r3, [sp, #16]
 800bf24:	4656      	mov	r6, sl
 800bf26:	2700      	movs	r7, #0
 800bf28:	4621      	mov	r1, r4
 800bf2a:	4658      	mov	r0, fp
 800bf2c:	f000 ff00 	bl	800cd30 <_Bfree>
 800bf30:	2d00      	cmp	r5, #0
 800bf32:	d0dc      	beq.n	800beee <_dtoa_r+0x65e>
 800bf34:	b12f      	cbz	r7, 800bf42 <_dtoa_r+0x6b2>
 800bf36:	42af      	cmp	r7, r5
 800bf38:	d003      	beq.n	800bf42 <_dtoa_r+0x6b2>
 800bf3a:	4639      	mov	r1, r7
 800bf3c:	4658      	mov	r0, fp
 800bf3e:	f000 fef7 	bl	800cd30 <_Bfree>
 800bf42:	4629      	mov	r1, r5
 800bf44:	4658      	mov	r0, fp
 800bf46:	f000 fef3 	bl	800cd30 <_Bfree>
 800bf4a:	e7d0      	b.n	800beee <_dtoa_r+0x65e>
 800bf4c:	9704      	str	r7, [sp, #16]
 800bf4e:	4633      	mov	r3, r6
 800bf50:	461e      	mov	r6, r3
 800bf52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf56:	2a39      	cmp	r2, #57	@ 0x39
 800bf58:	d107      	bne.n	800bf6a <_dtoa_r+0x6da>
 800bf5a:	459a      	cmp	sl, r3
 800bf5c:	d1f8      	bne.n	800bf50 <_dtoa_r+0x6c0>
 800bf5e:	9a04      	ldr	r2, [sp, #16]
 800bf60:	3201      	adds	r2, #1
 800bf62:	9204      	str	r2, [sp, #16]
 800bf64:	2230      	movs	r2, #48	@ 0x30
 800bf66:	f88a 2000 	strb.w	r2, [sl]
 800bf6a:	781a      	ldrb	r2, [r3, #0]
 800bf6c:	3201      	adds	r2, #1
 800bf6e:	701a      	strb	r2, [r3, #0]
 800bf70:	e7bd      	b.n	800beee <_dtoa_r+0x65e>
 800bf72:	4b7b      	ldr	r3, [pc, #492]	@ (800c160 <_dtoa_r+0x8d0>)
 800bf74:	2200      	movs	r2, #0
 800bf76:	f7f4 fb5f 	bl	8000638 <__aeabi_dmul>
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	4604      	mov	r4, r0
 800bf80:	460d      	mov	r5, r1
 800bf82:	f7f4 fdc1 	bl	8000b08 <__aeabi_dcmpeq>
 800bf86:	2800      	cmp	r0, #0
 800bf88:	f43f aebb 	beq.w	800bd02 <_dtoa_r+0x472>
 800bf8c:	e6f0      	b.n	800bd70 <_dtoa_r+0x4e0>
 800bf8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bf90:	2a00      	cmp	r2, #0
 800bf92:	f000 80db 	beq.w	800c14c <_dtoa_r+0x8bc>
 800bf96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf98:	2a01      	cmp	r2, #1
 800bf9a:	f300 80bf 	bgt.w	800c11c <_dtoa_r+0x88c>
 800bf9e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bfa0:	2a00      	cmp	r2, #0
 800bfa2:	f000 80b7 	beq.w	800c114 <_dtoa_r+0x884>
 800bfa6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bfaa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bfac:	4646      	mov	r6, r8
 800bfae:	9a08      	ldr	r2, [sp, #32]
 800bfb0:	2101      	movs	r1, #1
 800bfb2:	441a      	add	r2, r3
 800bfb4:	4658      	mov	r0, fp
 800bfb6:	4498      	add	r8, r3
 800bfb8:	9208      	str	r2, [sp, #32]
 800bfba:	f000 ffb7 	bl	800cf2c <__i2b>
 800bfbe:	4605      	mov	r5, r0
 800bfc0:	b15e      	cbz	r6, 800bfda <_dtoa_r+0x74a>
 800bfc2:	9b08      	ldr	r3, [sp, #32]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	dd08      	ble.n	800bfda <_dtoa_r+0x74a>
 800bfc8:	42b3      	cmp	r3, r6
 800bfca:	9a08      	ldr	r2, [sp, #32]
 800bfcc:	bfa8      	it	ge
 800bfce:	4633      	movge	r3, r6
 800bfd0:	eba8 0803 	sub.w	r8, r8, r3
 800bfd4:	1af6      	subs	r6, r6, r3
 800bfd6:	1ad3      	subs	r3, r2, r3
 800bfd8:	9308      	str	r3, [sp, #32]
 800bfda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfdc:	b1f3      	cbz	r3, 800c01c <_dtoa_r+0x78c>
 800bfde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	f000 80b7 	beq.w	800c154 <_dtoa_r+0x8c4>
 800bfe6:	b18c      	cbz	r4, 800c00c <_dtoa_r+0x77c>
 800bfe8:	4629      	mov	r1, r5
 800bfea:	4622      	mov	r2, r4
 800bfec:	4658      	mov	r0, fp
 800bfee:	f001 f85d 	bl	800d0ac <__pow5mult>
 800bff2:	464a      	mov	r2, r9
 800bff4:	4601      	mov	r1, r0
 800bff6:	4605      	mov	r5, r0
 800bff8:	4658      	mov	r0, fp
 800bffa:	f000 ffad 	bl	800cf58 <__multiply>
 800bffe:	4649      	mov	r1, r9
 800c000:	9004      	str	r0, [sp, #16]
 800c002:	4658      	mov	r0, fp
 800c004:	f000 fe94 	bl	800cd30 <_Bfree>
 800c008:	9b04      	ldr	r3, [sp, #16]
 800c00a:	4699      	mov	r9, r3
 800c00c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c00e:	1b1a      	subs	r2, r3, r4
 800c010:	d004      	beq.n	800c01c <_dtoa_r+0x78c>
 800c012:	4649      	mov	r1, r9
 800c014:	4658      	mov	r0, fp
 800c016:	f001 f849 	bl	800d0ac <__pow5mult>
 800c01a:	4681      	mov	r9, r0
 800c01c:	2101      	movs	r1, #1
 800c01e:	4658      	mov	r0, fp
 800c020:	f000 ff84 	bl	800cf2c <__i2b>
 800c024:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c026:	4604      	mov	r4, r0
 800c028:	2b00      	cmp	r3, #0
 800c02a:	f000 81cf 	beq.w	800c3cc <_dtoa_r+0xb3c>
 800c02e:	461a      	mov	r2, r3
 800c030:	4601      	mov	r1, r0
 800c032:	4658      	mov	r0, fp
 800c034:	f001 f83a 	bl	800d0ac <__pow5mult>
 800c038:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c03a:	2b01      	cmp	r3, #1
 800c03c:	4604      	mov	r4, r0
 800c03e:	f300 8095 	bgt.w	800c16c <_dtoa_r+0x8dc>
 800c042:	9b02      	ldr	r3, [sp, #8]
 800c044:	2b00      	cmp	r3, #0
 800c046:	f040 8087 	bne.w	800c158 <_dtoa_r+0x8c8>
 800c04a:	9b03      	ldr	r3, [sp, #12]
 800c04c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c050:	2b00      	cmp	r3, #0
 800c052:	f040 8089 	bne.w	800c168 <_dtoa_r+0x8d8>
 800c056:	9b03      	ldr	r3, [sp, #12]
 800c058:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c05c:	0d1b      	lsrs	r3, r3, #20
 800c05e:	051b      	lsls	r3, r3, #20
 800c060:	b12b      	cbz	r3, 800c06e <_dtoa_r+0x7de>
 800c062:	9b08      	ldr	r3, [sp, #32]
 800c064:	3301      	adds	r3, #1
 800c066:	9308      	str	r3, [sp, #32]
 800c068:	f108 0801 	add.w	r8, r8, #1
 800c06c:	2301      	movs	r3, #1
 800c06e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c070:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c072:	2b00      	cmp	r3, #0
 800c074:	f000 81b0 	beq.w	800c3d8 <_dtoa_r+0xb48>
 800c078:	6923      	ldr	r3, [r4, #16]
 800c07a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c07e:	6918      	ldr	r0, [r3, #16]
 800c080:	f000 ff08 	bl	800ce94 <__hi0bits>
 800c084:	f1c0 0020 	rsb	r0, r0, #32
 800c088:	9b08      	ldr	r3, [sp, #32]
 800c08a:	4418      	add	r0, r3
 800c08c:	f010 001f 	ands.w	r0, r0, #31
 800c090:	d077      	beq.n	800c182 <_dtoa_r+0x8f2>
 800c092:	f1c0 0320 	rsb	r3, r0, #32
 800c096:	2b04      	cmp	r3, #4
 800c098:	dd6b      	ble.n	800c172 <_dtoa_r+0x8e2>
 800c09a:	9b08      	ldr	r3, [sp, #32]
 800c09c:	f1c0 001c 	rsb	r0, r0, #28
 800c0a0:	4403      	add	r3, r0
 800c0a2:	4480      	add	r8, r0
 800c0a4:	4406      	add	r6, r0
 800c0a6:	9308      	str	r3, [sp, #32]
 800c0a8:	f1b8 0f00 	cmp.w	r8, #0
 800c0ac:	dd05      	ble.n	800c0ba <_dtoa_r+0x82a>
 800c0ae:	4649      	mov	r1, r9
 800c0b0:	4642      	mov	r2, r8
 800c0b2:	4658      	mov	r0, fp
 800c0b4:	f001 f854 	bl	800d160 <__lshift>
 800c0b8:	4681      	mov	r9, r0
 800c0ba:	9b08      	ldr	r3, [sp, #32]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	dd05      	ble.n	800c0cc <_dtoa_r+0x83c>
 800c0c0:	4621      	mov	r1, r4
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	4658      	mov	r0, fp
 800c0c6:	f001 f84b 	bl	800d160 <__lshift>
 800c0ca:	4604      	mov	r4, r0
 800c0cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d059      	beq.n	800c186 <_dtoa_r+0x8f6>
 800c0d2:	4621      	mov	r1, r4
 800c0d4:	4648      	mov	r0, r9
 800c0d6:	f001 f8af 	bl	800d238 <__mcmp>
 800c0da:	2800      	cmp	r0, #0
 800c0dc:	da53      	bge.n	800c186 <_dtoa_r+0x8f6>
 800c0de:	1e7b      	subs	r3, r7, #1
 800c0e0:	9304      	str	r3, [sp, #16]
 800c0e2:	4649      	mov	r1, r9
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	220a      	movs	r2, #10
 800c0e8:	4658      	mov	r0, fp
 800c0ea:	f000 fe43 	bl	800cd74 <__multadd>
 800c0ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0f0:	4681      	mov	r9, r0
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	f000 8172 	beq.w	800c3dc <_dtoa_r+0xb4c>
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	4629      	mov	r1, r5
 800c0fc:	220a      	movs	r2, #10
 800c0fe:	4658      	mov	r0, fp
 800c100:	f000 fe38 	bl	800cd74 <__multadd>
 800c104:	9b00      	ldr	r3, [sp, #0]
 800c106:	2b00      	cmp	r3, #0
 800c108:	4605      	mov	r5, r0
 800c10a:	dc67      	bgt.n	800c1dc <_dtoa_r+0x94c>
 800c10c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c10e:	2b02      	cmp	r3, #2
 800c110:	dc41      	bgt.n	800c196 <_dtoa_r+0x906>
 800c112:	e063      	b.n	800c1dc <_dtoa_r+0x94c>
 800c114:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c116:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c11a:	e746      	b.n	800bfaa <_dtoa_r+0x71a>
 800c11c:	9b07      	ldr	r3, [sp, #28]
 800c11e:	1e5c      	subs	r4, r3, #1
 800c120:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c122:	42a3      	cmp	r3, r4
 800c124:	bfbf      	itttt	lt
 800c126:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c128:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c12a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c12c:	1ae3      	sublt	r3, r4, r3
 800c12e:	bfb4      	ite	lt
 800c130:	18d2      	addlt	r2, r2, r3
 800c132:	1b1c      	subge	r4, r3, r4
 800c134:	9b07      	ldr	r3, [sp, #28]
 800c136:	bfbc      	itt	lt
 800c138:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c13a:	2400      	movlt	r4, #0
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	bfb5      	itete	lt
 800c140:	eba8 0603 	sublt.w	r6, r8, r3
 800c144:	9b07      	ldrge	r3, [sp, #28]
 800c146:	2300      	movlt	r3, #0
 800c148:	4646      	movge	r6, r8
 800c14a:	e730      	b.n	800bfae <_dtoa_r+0x71e>
 800c14c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c14e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c150:	4646      	mov	r6, r8
 800c152:	e735      	b.n	800bfc0 <_dtoa_r+0x730>
 800c154:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c156:	e75c      	b.n	800c012 <_dtoa_r+0x782>
 800c158:	2300      	movs	r3, #0
 800c15a:	e788      	b.n	800c06e <_dtoa_r+0x7de>
 800c15c:	3fe00000 	.word	0x3fe00000
 800c160:	40240000 	.word	0x40240000
 800c164:	40140000 	.word	0x40140000
 800c168:	9b02      	ldr	r3, [sp, #8]
 800c16a:	e780      	b.n	800c06e <_dtoa_r+0x7de>
 800c16c:	2300      	movs	r3, #0
 800c16e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c170:	e782      	b.n	800c078 <_dtoa_r+0x7e8>
 800c172:	d099      	beq.n	800c0a8 <_dtoa_r+0x818>
 800c174:	9a08      	ldr	r2, [sp, #32]
 800c176:	331c      	adds	r3, #28
 800c178:	441a      	add	r2, r3
 800c17a:	4498      	add	r8, r3
 800c17c:	441e      	add	r6, r3
 800c17e:	9208      	str	r2, [sp, #32]
 800c180:	e792      	b.n	800c0a8 <_dtoa_r+0x818>
 800c182:	4603      	mov	r3, r0
 800c184:	e7f6      	b.n	800c174 <_dtoa_r+0x8e4>
 800c186:	9b07      	ldr	r3, [sp, #28]
 800c188:	9704      	str	r7, [sp, #16]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	dc20      	bgt.n	800c1d0 <_dtoa_r+0x940>
 800c18e:	9300      	str	r3, [sp, #0]
 800c190:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c192:	2b02      	cmp	r3, #2
 800c194:	dd1e      	ble.n	800c1d4 <_dtoa_r+0x944>
 800c196:	9b00      	ldr	r3, [sp, #0]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	f47f aec0 	bne.w	800bf1e <_dtoa_r+0x68e>
 800c19e:	4621      	mov	r1, r4
 800c1a0:	2205      	movs	r2, #5
 800c1a2:	4658      	mov	r0, fp
 800c1a4:	f000 fde6 	bl	800cd74 <__multadd>
 800c1a8:	4601      	mov	r1, r0
 800c1aa:	4604      	mov	r4, r0
 800c1ac:	4648      	mov	r0, r9
 800c1ae:	f001 f843 	bl	800d238 <__mcmp>
 800c1b2:	2800      	cmp	r0, #0
 800c1b4:	f77f aeb3 	ble.w	800bf1e <_dtoa_r+0x68e>
 800c1b8:	4656      	mov	r6, sl
 800c1ba:	2331      	movs	r3, #49	@ 0x31
 800c1bc:	f806 3b01 	strb.w	r3, [r6], #1
 800c1c0:	9b04      	ldr	r3, [sp, #16]
 800c1c2:	3301      	adds	r3, #1
 800c1c4:	9304      	str	r3, [sp, #16]
 800c1c6:	e6ae      	b.n	800bf26 <_dtoa_r+0x696>
 800c1c8:	9c07      	ldr	r4, [sp, #28]
 800c1ca:	9704      	str	r7, [sp, #16]
 800c1cc:	4625      	mov	r5, r4
 800c1ce:	e7f3      	b.n	800c1b8 <_dtoa_r+0x928>
 800c1d0:	9b07      	ldr	r3, [sp, #28]
 800c1d2:	9300      	str	r3, [sp, #0]
 800c1d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	f000 8104 	beq.w	800c3e4 <_dtoa_r+0xb54>
 800c1dc:	2e00      	cmp	r6, #0
 800c1de:	dd05      	ble.n	800c1ec <_dtoa_r+0x95c>
 800c1e0:	4629      	mov	r1, r5
 800c1e2:	4632      	mov	r2, r6
 800c1e4:	4658      	mov	r0, fp
 800c1e6:	f000 ffbb 	bl	800d160 <__lshift>
 800c1ea:	4605      	mov	r5, r0
 800c1ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d05a      	beq.n	800c2a8 <_dtoa_r+0xa18>
 800c1f2:	6869      	ldr	r1, [r5, #4]
 800c1f4:	4658      	mov	r0, fp
 800c1f6:	f000 fd5b 	bl	800ccb0 <_Balloc>
 800c1fa:	4606      	mov	r6, r0
 800c1fc:	b928      	cbnz	r0, 800c20a <_dtoa_r+0x97a>
 800c1fe:	4b84      	ldr	r3, [pc, #528]	@ (800c410 <_dtoa_r+0xb80>)
 800c200:	4602      	mov	r2, r0
 800c202:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c206:	f7ff bb5a 	b.w	800b8be <_dtoa_r+0x2e>
 800c20a:	692a      	ldr	r2, [r5, #16]
 800c20c:	3202      	adds	r2, #2
 800c20e:	0092      	lsls	r2, r2, #2
 800c210:	f105 010c 	add.w	r1, r5, #12
 800c214:	300c      	adds	r0, #12
 800c216:	f7ff fa78 	bl	800b70a <memcpy>
 800c21a:	2201      	movs	r2, #1
 800c21c:	4631      	mov	r1, r6
 800c21e:	4658      	mov	r0, fp
 800c220:	f000 ff9e 	bl	800d160 <__lshift>
 800c224:	f10a 0301 	add.w	r3, sl, #1
 800c228:	9307      	str	r3, [sp, #28]
 800c22a:	9b00      	ldr	r3, [sp, #0]
 800c22c:	4453      	add	r3, sl
 800c22e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c230:	9b02      	ldr	r3, [sp, #8]
 800c232:	f003 0301 	and.w	r3, r3, #1
 800c236:	462f      	mov	r7, r5
 800c238:	930a      	str	r3, [sp, #40]	@ 0x28
 800c23a:	4605      	mov	r5, r0
 800c23c:	9b07      	ldr	r3, [sp, #28]
 800c23e:	4621      	mov	r1, r4
 800c240:	3b01      	subs	r3, #1
 800c242:	4648      	mov	r0, r9
 800c244:	9300      	str	r3, [sp, #0]
 800c246:	f7ff fa9b 	bl	800b780 <quorem>
 800c24a:	4639      	mov	r1, r7
 800c24c:	9002      	str	r0, [sp, #8]
 800c24e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c252:	4648      	mov	r0, r9
 800c254:	f000 fff0 	bl	800d238 <__mcmp>
 800c258:	462a      	mov	r2, r5
 800c25a:	9008      	str	r0, [sp, #32]
 800c25c:	4621      	mov	r1, r4
 800c25e:	4658      	mov	r0, fp
 800c260:	f001 f806 	bl	800d270 <__mdiff>
 800c264:	68c2      	ldr	r2, [r0, #12]
 800c266:	4606      	mov	r6, r0
 800c268:	bb02      	cbnz	r2, 800c2ac <_dtoa_r+0xa1c>
 800c26a:	4601      	mov	r1, r0
 800c26c:	4648      	mov	r0, r9
 800c26e:	f000 ffe3 	bl	800d238 <__mcmp>
 800c272:	4602      	mov	r2, r0
 800c274:	4631      	mov	r1, r6
 800c276:	4658      	mov	r0, fp
 800c278:	920e      	str	r2, [sp, #56]	@ 0x38
 800c27a:	f000 fd59 	bl	800cd30 <_Bfree>
 800c27e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c280:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c282:	9e07      	ldr	r6, [sp, #28]
 800c284:	ea43 0102 	orr.w	r1, r3, r2
 800c288:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c28a:	4319      	orrs	r1, r3
 800c28c:	d110      	bne.n	800c2b0 <_dtoa_r+0xa20>
 800c28e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c292:	d029      	beq.n	800c2e8 <_dtoa_r+0xa58>
 800c294:	9b08      	ldr	r3, [sp, #32]
 800c296:	2b00      	cmp	r3, #0
 800c298:	dd02      	ble.n	800c2a0 <_dtoa_r+0xa10>
 800c29a:	9b02      	ldr	r3, [sp, #8]
 800c29c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c2a0:	9b00      	ldr	r3, [sp, #0]
 800c2a2:	f883 8000 	strb.w	r8, [r3]
 800c2a6:	e63f      	b.n	800bf28 <_dtoa_r+0x698>
 800c2a8:	4628      	mov	r0, r5
 800c2aa:	e7bb      	b.n	800c224 <_dtoa_r+0x994>
 800c2ac:	2201      	movs	r2, #1
 800c2ae:	e7e1      	b.n	800c274 <_dtoa_r+0x9e4>
 800c2b0:	9b08      	ldr	r3, [sp, #32]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	db04      	blt.n	800c2c0 <_dtoa_r+0xa30>
 800c2b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c2b8:	430b      	orrs	r3, r1
 800c2ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c2bc:	430b      	orrs	r3, r1
 800c2be:	d120      	bne.n	800c302 <_dtoa_r+0xa72>
 800c2c0:	2a00      	cmp	r2, #0
 800c2c2:	dded      	ble.n	800c2a0 <_dtoa_r+0xa10>
 800c2c4:	4649      	mov	r1, r9
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	4658      	mov	r0, fp
 800c2ca:	f000 ff49 	bl	800d160 <__lshift>
 800c2ce:	4621      	mov	r1, r4
 800c2d0:	4681      	mov	r9, r0
 800c2d2:	f000 ffb1 	bl	800d238 <__mcmp>
 800c2d6:	2800      	cmp	r0, #0
 800c2d8:	dc03      	bgt.n	800c2e2 <_dtoa_r+0xa52>
 800c2da:	d1e1      	bne.n	800c2a0 <_dtoa_r+0xa10>
 800c2dc:	f018 0f01 	tst.w	r8, #1
 800c2e0:	d0de      	beq.n	800c2a0 <_dtoa_r+0xa10>
 800c2e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c2e6:	d1d8      	bne.n	800c29a <_dtoa_r+0xa0a>
 800c2e8:	9a00      	ldr	r2, [sp, #0]
 800c2ea:	2339      	movs	r3, #57	@ 0x39
 800c2ec:	7013      	strb	r3, [r2, #0]
 800c2ee:	4633      	mov	r3, r6
 800c2f0:	461e      	mov	r6, r3
 800c2f2:	3b01      	subs	r3, #1
 800c2f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c2f8:	2a39      	cmp	r2, #57	@ 0x39
 800c2fa:	d052      	beq.n	800c3a2 <_dtoa_r+0xb12>
 800c2fc:	3201      	adds	r2, #1
 800c2fe:	701a      	strb	r2, [r3, #0]
 800c300:	e612      	b.n	800bf28 <_dtoa_r+0x698>
 800c302:	2a00      	cmp	r2, #0
 800c304:	dd07      	ble.n	800c316 <_dtoa_r+0xa86>
 800c306:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c30a:	d0ed      	beq.n	800c2e8 <_dtoa_r+0xa58>
 800c30c:	9a00      	ldr	r2, [sp, #0]
 800c30e:	f108 0301 	add.w	r3, r8, #1
 800c312:	7013      	strb	r3, [r2, #0]
 800c314:	e608      	b.n	800bf28 <_dtoa_r+0x698>
 800c316:	9b07      	ldr	r3, [sp, #28]
 800c318:	9a07      	ldr	r2, [sp, #28]
 800c31a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c31e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c320:	4293      	cmp	r3, r2
 800c322:	d028      	beq.n	800c376 <_dtoa_r+0xae6>
 800c324:	4649      	mov	r1, r9
 800c326:	2300      	movs	r3, #0
 800c328:	220a      	movs	r2, #10
 800c32a:	4658      	mov	r0, fp
 800c32c:	f000 fd22 	bl	800cd74 <__multadd>
 800c330:	42af      	cmp	r7, r5
 800c332:	4681      	mov	r9, r0
 800c334:	f04f 0300 	mov.w	r3, #0
 800c338:	f04f 020a 	mov.w	r2, #10
 800c33c:	4639      	mov	r1, r7
 800c33e:	4658      	mov	r0, fp
 800c340:	d107      	bne.n	800c352 <_dtoa_r+0xac2>
 800c342:	f000 fd17 	bl	800cd74 <__multadd>
 800c346:	4607      	mov	r7, r0
 800c348:	4605      	mov	r5, r0
 800c34a:	9b07      	ldr	r3, [sp, #28]
 800c34c:	3301      	adds	r3, #1
 800c34e:	9307      	str	r3, [sp, #28]
 800c350:	e774      	b.n	800c23c <_dtoa_r+0x9ac>
 800c352:	f000 fd0f 	bl	800cd74 <__multadd>
 800c356:	4629      	mov	r1, r5
 800c358:	4607      	mov	r7, r0
 800c35a:	2300      	movs	r3, #0
 800c35c:	220a      	movs	r2, #10
 800c35e:	4658      	mov	r0, fp
 800c360:	f000 fd08 	bl	800cd74 <__multadd>
 800c364:	4605      	mov	r5, r0
 800c366:	e7f0      	b.n	800c34a <_dtoa_r+0xaba>
 800c368:	9b00      	ldr	r3, [sp, #0]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	bfcc      	ite	gt
 800c36e:	461e      	movgt	r6, r3
 800c370:	2601      	movle	r6, #1
 800c372:	4456      	add	r6, sl
 800c374:	2700      	movs	r7, #0
 800c376:	4649      	mov	r1, r9
 800c378:	2201      	movs	r2, #1
 800c37a:	4658      	mov	r0, fp
 800c37c:	f000 fef0 	bl	800d160 <__lshift>
 800c380:	4621      	mov	r1, r4
 800c382:	4681      	mov	r9, r0
 800c384:	f000 ff58 	bl	800d238 <__mcmp>
 800c388:	2800      	cmp	r0, #0
 800c38a:	dcb0      	bgt.n	800c2ee <_dtoa_r+0xa5e>
 800c38c:	d102      	bne.n	800c394 <_dtoa_r+0xb04>
 800c38e:	f018 0f01 	tst.w	r8, #1
 800c392:	d1ac      	bne.n	800c2ee <_dtoa_r+0xa5e>
 800c394:	4633      	mov	r3, r6
 800c396:	461e      	mov	r6, r3
 800c398:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c39c:	2a30      	cmp	r2, #48	@ 0x30
 800c39e:	d0fa      	beq.n	800c396 <_dtoa_r+0xb06>
 800c3a0:	e5c2      	b.n	800bf28 <_dtoa_r+0x698>
 800c3a2:	459a      	cmp	sl, r3
 800c3a4:	d1a4      	bne.n	800c2f0 <_dtoa_r+0xa60>
 800c3a6:	9b04      	ldr	r3, [sp, #16]
 800c3a8:	3301      	adds	r3, #1
 800c3aa:	9304      	str	r3, [sp, #16]
 800c3ac:	2331      	movs	r3, #49	@ 0x31
 800c3ae:	f88a 3000 	strb.w	r3, [sl]
 800c3b2:	e5b9      	b.n	800bf28 <_dtoa_r+0x698>
 800c3b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c3b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c414 <_dtoa_r+0xb84>
 800c3ba:	b11b      	cbz	r3, 800c3c4 <_dtoa_r+0xb34>
 800c3bc:	f10a 0308 	add.w	r3, sl, #8
 800c3c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c3c2:	6013      	str	r3, [r2, #0]
 800c3c4:	4650      	mov	r0, sl
 800c3c6:	b019      	add	sp, #100	@ 0x64
 800c3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3ce:	2b01      	cmp	r3, #1
 800c3d0:	f77f ae37 	ble.w	800c042 <_dtoa_r+0x7b2>
 800c3d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c3d8:	2001      	movs	r0, #1
 800c3da:	e655      	b.n	800c088 <_dtoa_r+0x7f8>
 800c3dc:	9b00      	ldr	r3, [sp, #0]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	f77f aed6 	ble.w	800c190 <_dtoa_r+0x900>
 800c3e4:	4656      	mov	r6, sl
 800c3e6:	4621      	mov	r1, r4
 800c3e8:	4648      	mov	r0, r9
 800c3ea:	f7ff f9c9 	bl	800b780 <quorem>
 800c3ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c3f2:	f806 8b01 	strb.w	r8, [r6], #1
 800c3f6:	9b00      	ldr	r3, [sp, #0]
 800c3f8:	eba6 020a 	sub.w	r2, r6, sl
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	ddb3      	ble.n	800c368 <_dtoa_r+0xad8>
 800c400:	4649      	mov	r1, r9
 800c402:	2300      	movs	r3, #0
 800c404:	220a      	movs	r2, #10
 800c406:	4658      	mov	r0, fp
 800c408:	f000 fcb4 	bl	800cd74 <__multadd>
 800c40c:	4681      	mov	r9, r0
 800c40e:	e7ea      	b.n	800c3e6 <_dtoa_r+0xb56>
 800c410:	0800e47b 	.word	0x0800e47b
 800c414:	0800e416 	.word	0x0800e416

0800c418 <_free_r>:
 800c418:	b538      	push	{r3, r4, r5, lr}
 800c41a:	4605      	mov	r5, r0
 800c41c:	2900      	cmp	r1, #0
 800c41e:	d041      	beq.n	800c4a4 <_free_r+0x8c>
 800c420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c424:	1f0c      	subs	r4, r1, #4
 800c426:	2b00      	cmp	r3, #0
 800c428:	bfb8      	it	lt
 800c42a:	18e4      	addlt	r4, r4, r3
 800c42c:	f000 fc34 	bl	800cc98 <__malloc_lock>
 800c430:	4a1d      	ldr	r2, [pc, #116]	@ (800c4a8 <_free_r+0x90>)
 800c432:	6813      	ldr	r3, [r2, #0]
 800c434:	b933      	cbnz	r3, 800c444 <_free_r+0x2c>
 800c436:	6063      	str	r3, [r4, #4]
 800c438:	6014      	str	r4, [r2, #0]
 800c43a:	4628      	mov	r0, r5
 800c43c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c440:	f000 bc30 	b.w	800cca4 <__malloc_unlock>
 800c444:	42a3      	cmp	r3, r4
 800c446:	d908      	bls.n	800c45a <_free_r+0x42>
 800c448:	6820      	ldr	r0, [r4, #0]
 800c44a:	1821      	adds	r1, r4, r0
 800c44c:	428b      	cmp	r3, r1
 800c44e:	bf01      	itttt	eq
 800c450:	6819      	ldreq	r1, [r3, #0]
 800c452:	685b      	ldreq	r3, [r3, #4]
 800c454:	1809      	addeq	r1, r1, r0
 800c456:	6021      	streq	r1, [r4, #0]
 800c458:	e7ed      	b.n	800c436 <_free_r+0x1e>
 800c45a:	461a      	mov	r2, r3
 800c45c:	685b      	ldr	r3, [r3, #4]
 800c45e:	b10b      	cbz	r3, 800c464 <_free_r+0x4c>
 800c460:	42a3      	cmp	r3, r4
 800c462:	d9fa      	bls.n	800c45a <_free_r+0x42>
 800c464:	6811      	ldr	r1, [r2, #0]
 800c466:	1850      	adds	r0, r2, r1
 800c468:	42a0      	cmp	r0, r4
 800c46a:	d10b      	bne.n	800c484 <_free_r+0x6c>
 800c46c:	6820      	ldr	r0, [r4, #0]
 800c46e:	4401      	add	r1, r0
 800c470:	1850      	adds	r0, r2, r1
 800c472:	4283      	cmp	r3, r0
 800c474:	6011      	str	r1, [r2, #0]
 800c476:	d1e0      	bne.n	800c43a <_free_r+0x22>
 800c478:	6818      	ldr	r0, [r3, #0]
 800c47a:	685b      	ldr	r3, [r3, #4]
 800c47c:	6053      	str	r3, [r2, #4]
 800c47e:	4408      	add	r0, r1
 800c480:	6010      	str	r0, [r2, #0]
 800c482:	e7da      	b.n	800c43a <_free_r+0x22>
 800c484:	d902      	bls.n	800c48c <_free_r+0x74>
 800c486:	230c      	movs	r3, #12
 800c488:	602b      	str	r3, [r5, #0]
 800c48a:	e7d6      	b.n	800c43a <_free_r+0x22>
 800c48c:	6820      	ldr	r0, [r4, #0]
 800c48e:	1821      	adds	r1, r4, r0
 800c490:	428b      	cmp	r3, r1
 800c492:	bf04      	itt	eq
 800c494:	6819      	ldreq	r1, [r3, #0]
 800c496:	685b      	ldreq	r3, [r3, #4]
 800c498:	6063      	str	r3, [r4, #4]
 800c49a:	bf04      	itt	eq
 800c49c:	1809      	addeq	r1, r1, r0
 800c49e:	6021      	streq	r1, [r4, #0]
 800c4a0:	6054      	str	r4, [r2, #4]
 800c4a2:	e7ca      	b.n	800c43a <_free_r+0x22>
 800c4a4:	bd38      	pop	{r3, r4, r5, pc}
 800c4a6:	bf00      	nop
 800c4a8:	2000383c 	.word	0x2000383c

0800c4ac <rshift>:
 800c4ac:	6903      	ldr	r3, [r0, #16]
 800c4ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c4b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c4b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c4ba:	f100 0414 	add.w	r4, r0, #20
 800c4be:	dd45      	ble.n	800c54c <rshift+0xa0>
 800c4c0:	f011 011f 	ands.w	r1, r1, #31
 800c4c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c4c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c4cc:	d10c      	bne.n	800c4e8 <rshift+0x3c>
 800c4ce:	f100 0710 	add.w	r7, r0, #16
 800c4d2:	4629      	mov	r1, r5
 800c4d4:	42b1      	cmp	r1, r6
 800c4d6:	d334      	bcc.n	800c542 <rshift+0x96>
 800c4d8:	1a9b      	subs	r3, r3, r2
 800c4da:	009b      	lsls	r3, r3, #2
 800c4dc:	1eea      	subs	r2, r5, #3
 800c4de:	4296      	cmp	r6, r2
 800c4e0:	bf38      	it	cc
 800c4e2:	2300      	movcc	r3, #0
 800c4e4:	4423      	add	r3, r4
 800c4e6:	e015      	b.n	800c514 <rshift+0x68>
 800c4e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c4ec:	f1c1 0820 	rsb	r8, r1, #32
 800c4f0:	40cf      	lsrs	r7, r1
 800c4f2:	f105 0e04 	add.w	lr, r5, #4
 800c4f6:	46a1      	mov	r9, r4
 800c4f8:	4576      	cmp	r6, lr
 800c4fa:	46f4      	mov	ip, lr
 800c4fc:	d815      	bhi.n	800c52a <rshift+0x7e>
 800c4fe:	1a9a      	subs	r2, r3, r2
 800c500:	0092      	lsls	r2, r2, #2
 800c502:	3a04      	subs	r2, #4
 800c504:	3501      	adds	r5, #1
 800c506:	42ae      	cmp	r6, r5
 800c508:	bf38      	it	cc
 800c50a:	2200      	movcc	r2, #0
 800c50c:	18a3      	adds	r3, r4, r2
 800c50e:	50a7      	str	r7, [r4, r2]
 800c510:	b107      	cbz	r7, 800c514 <rshift+0x68>
 800c512:	3304      	adds	r3, #4
 800c514:	1b1a      	subs	r2, r3, r4
 800c516:	42a3      	cmp	r3, r4
 800c518:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c51c:	bf08      	it	eq
 800c51e:	2300      	moveq	r3, #0
 800c520:	6102      	str	r2, [r0, #16]
 800c522:	bf08      	it	eq
 800c524:	6143      	streq	r3, [r0, #20]
 800c526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c52a:	f8dc c000 	ldr.w	ip, [ip]
 800c52e:	fa0c fc08 	lsl.w	ip, ip, r8
 800c532:	ea4c 0707 	orr.w	r7, ip, r7
 800c536:	f849 7b04 	str.w	r7, [r9], #4
 800c53a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c53e:	40cf      	lsrs	r7, r1
 800c540:	e7da      	b.n	800c4f8 <rshift+0x4c>
 800c542:	f851 cb04 	ldr.w	ip, [r1], #4
 800c546:	f847 cf04 	str.w	ip, [r7, #4]!
 800c54a:	e7c3      	b.n	800c4d4 <rshift+0x28>
 800c54c:	4623      	mov	r3, r4
 800c54e:	e7e1      	b.n	800c514 <rshift+0x68>

0800c550 <__hexdig_fun>:
 800c550:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c554:	2b09      	cmp	r3, #9
 800c556:	d802      	bhi.n	800c55e <__hexdig_fun+0xe>
 800c558:	3820      	subs	r0, #32
 800c55a:	b2c0      	uxtb	r0, r0
 800c55c:	4770      	bx	lr
 800c55e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c562:	2b05      	cmp	r3, #5
 800c564:	d801      	bhi.n	800c56a <__hexdig_fun+0x1a>
 800c566:	3847      	subs	r0, #71	@ 0x47
 800c568:	e7f7      	b.n	800c55a <__hexdig_fun+0xa>
 800c56a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c56e:	2b05      	cmp	r3, #5
 800c570:	d801      	bhi.n	800c576 <__hexdig_fun+0x26>
 800c572:	3827      	subs	r0, #39	@ 0x27
 800c574:	e7f1      	b.n	800c55a <__hexdig_fun+0xa>
 800c576:	2000      	movs	r0, #0
 800c578:	4770      	bx	lr
	...

0800c57c <__gethex>:
 800c57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c580:	b085      	sub	sp, #20
 800c582:	468a      	mov	sl, r1
 800c584:	9302      	str	r3, [sp, #8]
 800c586:	680b      	ldr	r3, [r1, #0]
 800c588:	9001      	str	r0, [sp, #4]
 800c58a:	4690      	mov	r8, r2
 800c58c:	1c9c      	adds	r4, r3, #2
 800c58e:	46a1      	mov	r9, r4
 800c590:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c594:	2830      	cmp	r0, #48	@ 0x30
 800c596:	d0fa      	beq.n	800c58e <__gethex+0x12>
 800c598:	eba9 0303 	sub.w	r3, r9, r3
 800c59c:	f1a3 0b02 	sub.w	fp, r3, #2
 800c5a0:	f7ff ffd6 	bl	800c550 <__hexdig_fun>
 800c5a4:	4605      	mov	r5, r0
 800c5a6:	2800      	cmp	r0, #0
 800c5a8:	d168      	bne.n	800c67c <__gethex+0x100>
 800c5aa:	49a0      	ldr	r1, [pc, #640]	@ (800c82c <__gethex+0x2b0>)
 800c5ac:	2201      	movs	r2, #1
 800c5ae:	4648      	mov	r0, r9
 800c5b0:	f7fe ffc5 	bl	800b53e <strncmp>
 800c5b4:	4607      	mov	r7, r0
 800c5b6:	2800      	cmp	r0, #0
 800c5b8:	d167      	bne.n	800c68a <__gethex+0x10e>
 800c5ba:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c5be:	4626      	mov	r6, r4
 800c5c0:	f7ff ffc6 	bl	800c550 <__hexdig_fun>
 800c5c4:	2800      	cmp	r0, #0
 800c5c6:	d062      	beq.n	800c68e <__gethex+0x112>
 800c5c8:	4623      	mov	r3, r4
 800c5ca:	7818      	ldrb	r0, [r3, #0]
 800c5cc:	2830      	cmp	r0, #48	@ 0x30
 800c5ce:	4699      	mov	r9, r3
 800c5d0:	f103 0301 	add.w	r3, r3, #1
 800c5d4:	d0f9      	beq.n	800c5ca <__gethex+0x4e>
 800c5d6:	f7ff ffbb 	bl	800c550 <__hexdig_fun>
 800c5da:	fab0 f580 	clz	r5, r0
 800c5de:	096d      	lsrs	r5, r5, #5
 800c5e0:	f04f 0b01 	mov.w	fp, #1
 800c5e4:	464a      	mov	r2, r9
 800c5e6:	4616      	mov	r6, r2
 800c5e8:	3201      	adds	r2, #1
 800c5ea:	7830      	ldrb	r0, [r6, #0]
 800c5ec:	f7ff ffb0 	bl	800c550 <__hexdig_fun>
 800c5f0:	2800      	cmp	r0, #0
 800c5f2:	d1f8      	bne.n	800c5e6 <__gethex+0x6a>
 800c5f4:	498d      	ldr	r1, [pc, #564]	@ (800c82c <__gethex+0x2b0>)
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	4630      	mov	r0, r6
 800c5fa:	f7fe ffa0 	bl	800b53e <strncmp>
 800c5fe:	2800      	cmp	r0, #0
 800c600:	d13f      	bne.n	800c682 <__gethex+0x106>
 800c602:	b944      	cbnz	r4, 800c616 <__gethex+0x9a>
 800c604:	1c74      	adds	r4, r6, #1
 800c606:	4622      	mov	r2, r4
 800c608:	4616      	mov	r6, r2
 800c60a:	3201      	adds	r2, #1
 800c60c:	7830      	ldrb	r0, [r6, #0]
 800c60e:	f7ff ff9f 	bl	800c550 <__hexdig_fun>
 800c612:	2800      	cmp	r0, #0
 800c614:	d1f8      	bne.n	800c608 <__gethex+0x8c>
 800c616:	1ba4      	subs	r4, r4, r6
 800c618:	00a7      	lsls	r7, r4, #2
 800c61a:	7833      	ldrb	r3, [r6, #0]
 800c61c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c620:	2b50      	cmp	r3, #80	@ 0x50
 800c622:	d13e      	bne.n	800c6a2 <__gethex+0x126>
 800c624:	7873      	ldrb	r3, [r6, #1]
 800c626:	2b2b      	cmp	r3, #43	@ 0x2b
 800c628:	d033      	beq.n	800c692 <__gethex+0x116>
 800c62a:	2b2d      	cmp	r3, #45	@ 0x2d
 800c62c:	d034      	beq.n	800c698 <__gethex+0x11c>
 800c62e:	1c71      	adds	r1, r6, #1
 800c630:	2400      	movs	r4, #0
 800c632:	7808      	ldrb	r0, [r1, #0]
 800c634:	f7ff ff8c 	bl	800c550 <__hexdig_fun>
 800c638:	1e43      	subs	r3, r0, #1
 800c63a:	b2db      	uxtb	r3, r3
 800c63c:	2b18      	cmp	r3, #24
 800c63e:	d830      	bhi.n	800c6a2 <__gethex+0x126>
 800c640:	f1a0 0210 	sub.w	r2, r0, #16
 800c644:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c648:	f7ff ff82 	bl	800c550 <__hexdig_fun>
 800c64c:	f100 3cff 	add.w	ip, r0, #4294967295
 800c650:	fa5f fc8c 	uxtb.w	ip, ip
 800c654:	f1bc 0f18 	cmp.w	ip, #24
 800c658:	f04f 030a 	mov.w	r3, #10
 800c65c:	d91e      	bls.n	800c69c <__gethex+0x120>
 800c65e:	b104      	cbz	r4, 800c662 <__gethex+0xe6>
 800c660:	4252      	negs	r2, r2
 800c662:	4417      	add	r7, r2
 800c664:	f8ca 1000 	str.w	r1, [sl]
 800c668:	b1ed      	cbz	r5, 800c6a6 <__gethex+0x12a>
 800c66a:	f1bb 0f00 	cmp.w	fp, #0
 800c66e:	bf0c      	ite	eq
 800c670:	2506      	moveq	r5, #6
 800c672:	2500      	movne	r5, #0
 800c674:	4628      	mov	r0, r5
 800c676:	b005      	add	sp, #20
 800c678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c67c:	2500      	movs	r5, #0
 800c67e:	462c      	mov	r4, r5
 800c680:	e7b0      	b.n	800c5e4 <__gethex+0x68>
 800c682:	2c00      	cmp	r4, #0
 800c684:	d1c7      	bne.n	800c616 <__gethex+0x9a>
 800c686:	4627      	mov	r7, r4
 800c688:	e7c7      	b.n	800c61a <__gethex+0x9e>
 800c68a:	464e      	mov	r6, r9
 800c68c:	462f      	mov	r7, r5
 800c68e:	2501      	movs	r5, #1
 800c690:	e7c3      	b.n	800c61a <__gethex+0x9e>
 800c692:	2400      	movs	r4, #0
 800c694:	1cb1      	adds	r1, r6, #2
 800c696:	e7cc      	b.n	800c632 <__gethex+0xb6>
 800c698:	2401      	movs	r4, #1
 800c69a:	e7fb      	b.n	800c694 <__gethex+0x118>
 800c69c:	fb03 0002 	mla	r0, r3, r2, r0
 800c6a0:	e7ce      	b.n	800c640 <__gethex+0xc4>
 800c6a2:	4631      	mov	r1, r6
 800c6a4:	e7de      	b.n	800c664 <__gethex+0xe8>
 800c6a6:	eba6 0309 	sub.w	r3, r6, r9
 800c6aa:	3b01      	subs	r3, #1
 800c6ac:	4629      	mov	r1, r5
 800c6ae:	2b07      	cmp	r3, #7
 800c6b0:	dc0a      	bgt.n	800c6c8 <__gethex+0x14c>
 800c6b2:	9801      	ldr	r0, [sp, #4]
 800c6b4:	f000 fafc 	bl	800ccb0 <_Balloc>
 800c6b8:	4604      	mov	r4, r0
 800c6ba:	b940      	cbnz	r0, 800c6ce <__gethex+0x152>
 800c6bc:	4b5c      	ldr	r3, [pc, #368]	@ (800c830 <__gethex+0x2b4>)
 800c6be:	4602      	mov	r2, r0
 800c6c0:	21e4      	movs	r1, #228	@ 0xe4
 800c6c2:	485c      	ldr	r0, [pc, #368]	@ (800c834 <__gethex+0x2b8>)
 800c6c4:	f7ff f83e 	bl	800b744 <__assert_func>
 800c6c8:	3101      	adds	r1, #1
 800c6ca:	105b      	asrs	r3, r3, #1
 800c6cc:	e7ef      	b.n	800c6ae <__gethex+0x132>
 800c6ce:	f100 0a14 	add.w	sl, r0, #20
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	4655      	mov	r5, sl
 800c6d6:	469b      	mov	fp, r3
 800c6d8:	45b1      	cmp	r9, r6
 800c6da:	d337      	bcc.n	800c74c <__gethex+0x1d0>
 800c6dc:	f845 bb04 	str.w	fp, [r5], #4
 800c6e0:	eba5 050a 	sub.w	r5, r5, sl
 800c6e4:	10ad      	asrs	r5, r5, #2
 800c6e6:	6125      	str	r5, [r4, #16]
 800c6e8:	4658      	mov	r0, fp
 800c6ea:	f000 fbd3 	bl	800ce94 <__hi0bits>
 800c6ee:	016d      	lsls	r5, r5, #5
 800c6f0:	f8d8 6000 	ldr.w	r6, [r8]
 800c6f4:	1a2d      	subs	r5, r5, r0
 800c6f6:	42b5      	cmp	r5, r6
 800c6f8:	dd54      	ble.n	800c7a4 <__gethex+0x228>
 800c6fa:	1bad      	subs	r5, r5, r6
 800c6fc:	4629      	mov	r1, r5
 800c6fe:	4620      	mov	r0, r4
 800c700:	f000 ff67 	bl	800d5d2 <__any_on>
 800c704:	4681      	mov	r9, r0
 800c706:	b178      	cbz	r0, 800c728 <__gethex+0x1ac>
 800c708:	1e6b      	subs	r3, r5, #1
 800c70a:	1159      	asrs	r1, r3, #5
 800c70c:	f003 021f 	and.w	r2, r3, #31
 800c710:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c714:	f04f 0901 	mov.w	r9, #1
 800c718:	fa09 f202 	lsl.w	r2, r9, r2
 800c71c:	420a      	tst	r2, r1
 800c71e:	d003      	beq.n	800c728 <__gethex+0x1ac>
 800c720:	454b      	cmp	r3, r9
 800c722:	dc36      	bgt.n	800c792 <__gethex+0x216>
 800c724:	f04f 0902 	mov.w	r9, #2
 800c728:	4629      	mov	r1, r5
 800c72a:	4620      	mov	r0, r4
 800c72c:	f7ff febe 	bl	800c4ac <rshift>
 800c730:	442f      	add	r7, r5
 800c732:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c736:	42bb      	cmp	r3, r7
 800c738:	da42      	bge.n	800c7c0 <__gethex+0x244>
 800c73a:	9801      	ldr	r0, [sp, #4]
 800c73c:	4621      	mov	r1, r4
 800c73e:	f000 faf7 	bl	800cd30 <_Bfree>
 800c742:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c744:	2300      	movs	r3, #0
 800c746:	6013      	str	r3, [r2, #0]
 800c748:	25a3      	movs	r5, #163	@ 0xa3
 800c74a:	e793      	b.n	800c674 <__gethex+0xf8>
 800c74c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c750:	2a2e      	cmp	r2, #46	@ 0x2e
 800c752:	d012      	beq.n	800c77a <__gethex+0x1fe>
 800c754:	2b20      	cmp	r3, #32
 800c756:	d104      	bne.n	800c762 <__gethex+0x1e6>
 800c758:	f845 bb04 	str.w	fp, [r5], #4
 800c75c:	f04f 0b00 	mov.w	fp, #0
 800c760:	465b      	mov	r3, fp
 800c762:	7830      	ldrb	r0, [r6, #0]
 800c764:	9303      	str	r3, [sp, #12]
 800c766:	f7ff fef3 	bl	800c550 <__hexdig_fun>
 800c76a:	9b03      	ldr	r3, [sp, #12]
 800c76c:	f000 000f 	and.w	r0, r0, #15
 800c770:	4098      	lsls	r0, r3
 800c772:	ea4b 0b00 	orr.w	fp, fp, r0
 800c776:	3304      	adds	r3, #4
 800c778:	e7ae      	b.n	800c6d8 <__gethex+0x15c>
 800c77a:	45b1      	cmp	r9, r6
 800c77c:	d8ea      	bhi.n	800c754 <__gethex+0x1d8>
 800c77e:	492b      	ldr	r1, [pc, #172]	@ (800c82c <__gethex+0x2b0>)
 800c780:	9303      	str	r3, [sp, #12]
 800c782:	2201      	movs	r2, #1
 800c784:	4630      	mov	r0, r6
 800c786:	f7fe feda 	bl	800b53e <strncmp>
 800c78a:	9b03      	ldr	r3, [sp, #12]
 800c78c:	2800      	cmp	r0, #0
 800c78e:	d1e1      	bne.n	800c754 <__gethex+0x1d8>
 800c790:	e7a2      	b.n	800c6d8 <__gethex+0x15c>
 800c792:	1ea9      	subs	r1, r5, #2
 800c794:	4620      	mov	r0, r4
 800c796:	f000 ff1c 	bl	800d5d2 <__any_on>
 800c79a:	2800      	cmp	r0, #0
 800c79c:	d0c2      	beq.n	800c724 <__gethex+0x1a8>
 800c79e:	f04f 0903 	mov.w	r9, #3
 800c7a2:	e7c1      	b.n	800c728 <__gethex+0x1ac>
 800c7a4:	da09      	bge.n	800c7ba <__gethex+0x23e>
 800c7a6:	1b75      	subs	r5, r6, r5
 800c7a8:	4621      	mov	r1, r4
 800c7aa:	9801      	ldr	r0, [sp, #4]
 800c7ac:	462a      	mov	r2, r5
 800c7ae:	f000 fcd7 	bl	800d160 <__lshift>
 800c7b2:	1b7f      	subs	r7, r7, r5
 800c7b4:	4604      	mov	r4, r0
 800c7b6:	f100 0a14 	add.w	sl, r0, #20
 800c7ba:	f04f 0900 	mov.w	r9, #0
 800c7be:	e7b8      	b.n	800c732 <__gethex+0x1b6>
 800c7c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c7c4:	42bd      	cmp	r5, r7
 800c7c6:	dd6f      	ble.n	800c8a8 <__gethex+0x32c>
 800c7c8:	1bed      	subs	r5, r5, r7
 800c7ca:	42ae      	cmp	r6, r5
 800c7cc:	dc34      	bgt.n	800c838 <__gethex+0x2bc>
 800c7ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c7d2:	2b02      	cmp	r3, #2
 800c7d4:	d022      	beq.n	800c81c <__gethex+0x2a0>
 800c7d6:	2b03      	cmp	r3, #3
 800c7d8:	d024      	beq.n	800c824 <__gethex+0x2a8>
 800c7da:	2b01      	cmp	r3, #1
 800c7dc:	d115      	bne.n	800c80a <__gethex+0x28e>
 800c7de:	42ae      	cmp	r6, r5
 800c7e0:	d113      	bne.n	800c80a <__gethex+0x28e>
 800c7e2:	2e01      	cmp	r6, #1
 800c7e4:	d10b      	bne.n	800c7fe <__gethex+0x282>
 800c7e6:	9a02      	ldr	r2, [sp, #8]
 800c7e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c7ec:	6013      	str	r3, [r2, #0]
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	6123      	str	r3, [r4, #16]
 800c7f2:	f8ca 3000 	str.w	r3, [sl]
 800c7f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c7f8:	2562      	movs	r5, #98	@ 0x62
 800c7fa:	601c      	str	r4, [r3, #0]
 800c7fc:	e73a      	b.n	800c674 <__gethex+0xf8>
 800c7fe:	1e71      	subs	r1, r6, #1
 800c800:	4620      	mov	r0, r4
 800c802:	f000 fee6 	bl	800d5d2 <__any_on>
 800c806:	2800      	cmp	r0, #0
 800c808:	d1ed      	bne.n	800c7e6 <__gethex+0x26a>
 800c80a:	9801      	ldr	r0, [sp, #4]
 800c80c:	4621      	mov	r1, r4
 800c80e:	f000 fa8f 	bl	800cd30 <_Bfree>
 800c812:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c814:	2300      	movs	r3, #0
 800c816:	6013      	str	r3, [r2, #0]
 800c818:	2550      	movs	r5, #80	@ 0x50
 800c81a:	e72b      	b.n	800c674 <__gethex+0xf8>
 800c81c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d1f3      	bne.n	800c80a <__gethex+0x28e>
 800c822:	e7e0      	b.n	800c7e6 <__gethex+0x26a>
 800c824:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c826:	2b00      	cmp	r3, #0
 800c828:	d1dd      	bne.n	800c7e6 <__gethex+0x26a>
 800c82a:	e7ee      	b.n	800c80a <__gethex+0x28e>
 800c82c:	0800e2d4 	.word	0x0800e2d4
 800c830:	0800e47b 	.word	0x0800e47b
 800c834:	0800e48c 	.word	0x0800e48c
 800c838:	1e6f      	subs	r7, r5, #1
 800c83a:	f1b9 0f00 	cmp.w	r9, #0
 800c83e:	d130      	bne.n	800c8a2 <__gethex+0x326>
 800c840:	b127      	cbz	r7, 800c84c <__gethex+0x2d0>
 800c842:	4639      	mov	r1, r7
 800c844:	4620      	mov	r0, r4
 800c846:	f000 fec4 	bl	800d5d2 <__any_on>
 800c84a:	4681      	mov	r9, r0
 800c84c:	117a      	asrs	r2, r7, #5
 800c84e:	2301      	movs	r3, #1
 800c850:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c854:	f007 071f 	and.w	r7, r7, #31
 800c858:	40bb      	lsls	r3, r7
 800c85a:	4213      	tst	r3, r2
 800c85c:	4629      	mov	r1, r5
 800c85e:	4620      	mov	r0, r4
 800c860:	bf18      	it	ne
 800c862:	f049 0902 	orrne.w	r9, r9, #2
 800c866:	f7ff fe21 	bl	800c4ac <rshift>
 800c86a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c86e:	1b76      	subs	r6, r6, r5
 800c870:	2502      	movs	r5, #2
 800c872:	f1b9 0f00 	cmp.w	r9, #0
 800c876:	d047      	beq.n	800c908 <__gethex+0x38c>
 800c878:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c87c:	2b02      	cmp	r3, #2
 800c87e:	d015      	beq.n	800c8ac <__gethex+0x330>
 800c880:	2b03      	cmp	r3, #3
 800c882:	d017      	beq.n	800c8b4 <__gethex+0x338>
 800c884:	2b01      	cmp	r3, #1
 800c886:	d109      	bne.n	800c89c <__gethex+0x320>
 800c888:	f019 0f02 	tst.w	r9, #2
 800c88c:	d006      	beq.n	800c89c <__gethex+0x320>
 800c88e:	f8da 3000 	ldr.w	r3, [sl]
 800c892:	ea49 0903 	orr.w	r9, r9, r3
 800c896:	f019 0f01 	tst.w	r9, #1
 800c89a:	d10e      	bne.n	800c8ba <__gethex+0x33e>
 800c89c:	f045 0510 	orr.w	r5, r5, #16
 800c8a0:	e032      	b.n	800c908 <__gethex+0x38c>
 800c8a2:	f04f 0901 	mov.w	r9, #1
 800c8a6:	e7d1      	b.n	800c84c <__gethex+0x2d0>
 800c8a8:	2501      	movs	r5, #1
 800c8aa:	e7e2      	b.n	800c872 <__gethex+0x2f6>
 800c8ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8ae:	f1c3 0301 	rsb	r3, r3, #1
 800c8b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c8b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d0f0      	beq.n	800c89c <__gethex+0x320>
 800c8ba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c8be:	f104 0314 	add.w	r3, r4, #20
 800c8c2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c8c6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c8ca:	f04f 0c00 	mov.w	ip, #0
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8d4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c8d8:	d01b      	beq.n	800c912 <__gethex+0x396>
 800c8da:	3201      	adds	r2, #1
 800c8dc:	6002      	str	r2, [r0, #0]
 800c8de:	2d02      	cmp	r5, #2
 800c8e0:	f104 0314 	add.w	r3, r4, #20
 800c8e4:	d13c      	bne.n	800c960 <__gethex+0x3e4>
 800c8e6:	f8d8 2000 	ldr.w	r2, [r8]
 800c8ea:	3a01      	subs	r2, #1
 800c8ec:	42b2      	cmp	r2, r6
 800c8ee:	d109      	bne.n	800c904 <__gethex+0x388>
 800c8f0:	1171      	asrs	r1, r6, #5
 800c8f2:	2201      	movs	r2, #1
 800c8f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c8f8:	f006 061f 	and.w	r6, r6, #31
 800c8fc:	fa02 f606 	lsl.w	r6, r2, r6
 800c900:	421e      	tst	r6, r3
 800c902:	d13a      	bne.n	800c97a <__gethex+0x3fe>
 800c904:	f045 0520 	orr.w	r5, r5, #32
 800c908:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c90a:	601c      	str	r4, [r3, #0]
 800c90c:	9b02      	ldr	r3, [sp, #8]
 800c90e:	601f      	str	r7, [r3, #0]
 800c910:	e6b0      	b.n	800c674 <__gethex+0xf8>
 800c912:	4299      	cmp	r1, r3
 800c914:	f843 cc04 	str.w	ip, [r3, #-4]
 800c918:	d8d9      	bhi.n	800c8ce <__gethex+0x352>
 800c91a:	68a3      	ldr	r3, [r4, #8]
 800c91c:	459b      	cmp	fp, r3
 800c91e:	db17      	blt.n	800c950 <__gethex+0x3d4>
 800c920:	6861      	ldr	r1, [r4, #4]
 800c922:	9801      	ldr	r0, [sp, #4]
 800c924:	3101      	adds	r1, #1
 800c926:	f000 f9c3 	bl	800ccb0 <_Balloc>
 800c92a:	4681      	mov	r9, r0
 800c92c:	b918      	cbnz	r0, 800c936 <__gethex+0x3ba>
 800c92e:	4b1a      	ldr	r3, [pc, #104]	@ (800c998 <__gethex+0x41c>)
 800c930:	4602      	mov	r2, r0
 800c932:	2184      	movs	r1, #132	@ 0x84
 800c934:	e6c5      	b.n	800c6c2 <__gethex+0x146>
 800c936:	6922      	ldr	r2, [r4, #16]
 800c938:	3202      	adds	r2, #2
 800c93a:	f104 010c 	add.w	r1, r4, #12
 800c93e:	0092      	lsls	r2, r2, #2
 800c940:	300c      	adds	r0, #12
 800c942:	f7fe fee2 	bl	800b70a <memcpy>
 800c946:	4621      	mov	r1, r4
 800c948:	9801      	ldr	r0, [sp, #4]
 800c94a:	f000 f9f1 	bl	800cd30 <_Bfree>
 800c94e:	464c      	mov	r4, r9
 800c950:	6923      	ldr	r3, [r4, #16]
 800c952:	1c5a      	adds	r2, r3, #1
 800c954:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c958:	6122      	str	r2, [r4, #16]
 800c95a:	2201      	movs	r2, #1
 800c95c:	615a      	str	r2, [r3, #20]
 800c95e:	e7be      	b.n	800c8de <__gethex+0x362>
 800c960:	6922      	ldr	r2, [r4, #16]
 800c962:	455a      	cmp	r2, fp
 800c964:	dd0b      	ble.n	800c97e <__gethex+0x402>
 800c966:	2101      	movs	r1, #1
 800c968:	4620      	mov	r0, r4
 800c96a:	f7ff fd9f 	bl	800c4ac <rshift>
 800c96e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c972:	3701      	adds	r7, #1
 800c974:	42bb      	cmp	r3, r7
 800c976:	f6ff aee0 	blt.w	800c73a <__gethex+0x1be>
 800c97a:	2501      	movs	r5, #1
 800c97c:	e7c2      	b.n	800c904 <__gethex+0x388>
 800c97e:	f016 061f 	ands.w	r6, r6, #31
 800c982:	d0fa      	beq.n	800c97a <__gethex+0x3fe>
 800c984:	4453      	add	r3, sl
 800c986:	f1c6 0620 	rsb	r6, r6, #32
 800c98a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c98e:	f000 fa81 	bl	800ce94 <__hi0bits>
 800c992:	42b0      	cmp	r0, r6
 800c994:	dbe7      	blt.n	800c966 <__gethex+0x3ea>
 800c996:	e7f0      	b.n	800c97a <__gethex+0x3fe>
 800c998:	0800e47b 	.word	0x0800e47b

0800c99c <L_shift>:
 800c99c:	f1c2 0208 	rsb	r2, r2, #8
 800c9a0:	0092      	lsls	r2, r2, #2
 800c9a2:	b570      	push	{r4, r5, r6, lr}
 800c9a4:	f1c2 0620 	rsb	r6, r2, #32
 800c9a8:	6843      	ldr	r3, [r0, #4]
 800c9aa:	6804      	ldr	r4, [r0, #0]
 800c9ac:	fa03 f506 	lsl.w	r5, r3, r6
 800c9b0:	432c      	orrs	r4, r5
 800c9b2:	40d3      	lsrs	r3, r2
 800c9b4:	6004      	str	r4, [r0, #0]
 800c9b6:	f840 3f04 	str.w	r3, [r0, #4]!
 800c9ba:	4288      	cmp	r0, r1
 800c9bc:	d3f4      	bcc.n	800c9a8 <L_shift+0xc>
 800c9be:	bd70      	pop	{r4, r5, r6, pc}

0800c9c0 <__match>:
 800c9c0:	b530      	push	{r4, r5, lr}
 800c9c2:	6803      	ldr	r3, [r0, #0]
 800c9c4:	3301      	adds	r3, #1
 800c9c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9ca:	b914      	cbnz	r4, 800c9d2 <__match+0x12>
 800c9cc:	6003      	str	r3, [r0, #0]
 800c9ce:	2001      	movs	r0, #1
 800c9d0:	bd30      	pop	{r4, r5, pc}
 800c9d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9d6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c9da:	2d19      	cmp	r5, #25
 800c9dc:	bf98      	it	ls
 800c9de:	3220      	addls	r2, #32
 800c9e0:	42a2      	cmp	r2, r4
 800c9e2:	d0f0      	beq.n	800c9c6 <__match+0x6>
 800c9e4:	2000      	movs	r0, #0
 800c9e6:	e7f3      	b.n	800c9d0 <__match+0x10>

0800c9e8 <__hexnan>:
 800c9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ec:	680b      	ldr	r3, [r1, #0]
 800c9ee:	6801      	ldr	r1, [r0, #0]
 800c9f0:	115e      	asrs	r6, r3, #5
 800c9f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c9f6:	f013 031f 	ands.w	r3, r3, #31
 800c9fa:	b087      	sub	sp, #28
 800c9fc:	bf18      	it	ne
 800c9fe:	3604      	addne	r6, #4
 800ca00:	2500      	movs	r5, #0
 800ca02:	1f37      	subs	r7, r6, #4
 800ca04:	4682      	mov	sl, r0
 800ca06:	4690      	mov	r8, r2
 800ca08:	9301      	str	r3, [sp, #4]
 800ca0a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ca0e:	46b9      	mov	r9, r7
 800ca10:	463c      	mov	r4, r7
 800ca12:	9502      	str	r5, [sp, #8]
 800ca14:	46ab      	mov	fp, r5
 800ca16:	784a      	ldrb	r2, [r1, #1]
 800ca18:	1c4b      	adds	r3, r1, #1
 800ca1a:	9303      	str	r3, [sp, #12]
 800ca1c:	b342      	cbz	r2, 800ca70 <__hexnan+0x88>
 800ca1e:	4610      	mov	r0, r2
 800ca20:	9105      	str	r1, [sp, #20]
 800ca22:	9204      	str	r2, [sp, #16]
 800ca24:	f7ff fd94 	bl	800c550 <__hexdig_fun>
 800ca28:	2800      	cmp	r0, #0
 800ca2a:	d151      	bne.n	800cad0 <__hexnan+0xe8>
 800ca2c:	9a04      	ldr	r2, [sp, #16]
 800ca2e:	9905      	ldr	r1, [sp, #20]
 800ca30:	2a20      	cmp	r2, #32
 800ca32:	d818      	bhi.n	800ca66 <__hexnan+0x7e>
 800ca34:	9b02      	ldr	r3, [sp, #8]
 800ca36:	459b      	cmp	fp, r3
 800ca38:	dd13      	ble.n	800ca62 <__hexnan+0x7a>
 800ca3a:	454c      	cmp	r4, r9
 800ca3c:	d206      	bcs.n	800ca4c <__hexnan+0x64>
 800ca3e:	2d07      	cmp	r5, #7
 800ca40:	dc04      	bgt.n	800ca4c <__hexnan+0x64>
 800ca42:	462a      	mov	r2, r5
 800ca44:	4649      	mov	r1, r9
 800ca46:	4620      	mov	r0, r4
 800ca48:	f7ff ffa8 	bl	800c99c <L_shift>
 800ca4c:	4544      	cmp	r4, r8
 800ca4e:	d952      	bls.n	800caf6 <__hexnan+0x10e>
 800ca50:	2300      	movs	r3, #0
 800ca52:	f1a4 0904 	sub.w	r9, r4, #4
 800ca56:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca5a:	f8cd b008 	str.w	fp, [sp, #8]
 800ca5e:	464c      	mov	r4, r9
 800ca60:	461d      	mov	r5, r3
 800ca62:	9903      	ldr	r1, [sp, #12]
 800ca64:	e7d7      	b.n	800ca16 <__hexnan+0x2e>
 800ca66:	2a29      	cmp	r2, #41	@ 0x29
 800ca68:	d157      	bne.n	800cb1a <__hexnan+0x132>
 800ca6a:	3102      	adds	r1, #2
 800ca6c:	f8ca 1000 	str.w	r1, [sl]
 800ca70:	f1bb 0f00 	cmp.w	fp, #0
 800ca74:	d051      	beq.n	800cb1a <__hexnan+0x132>
 800ca76:	454c      	cmp	r4, r9
 800ca78:	d206      	bcs.n	800ca88 <__hexnan+0xa0>
 800ca7a:	2d07      	cmp	r5, #7
 800ca7c:	dc04      	bgt.n	800ca88 <__hexnan+0xa0>
 800ca7e:	462a      	mov	r2, r5
 800ca80:	4649      	mov	r1, r9
 800ca82:	4620      	mov	r0, r4
 800ca84:	f7ff ff8a 	bl	800c99c <L_shift>
 800ca88:	4544      	cmp	r4, r8
 800ca8a:	d936      	bls.n	800cafa <__hexnan+0x112>
 800ca8c:	f1a8 0204 	sub.w	r2, r8, #4
 800ca90:	4623      	mov	r3, r4
 800ca92:	f853 1b04 	ldr.w	r1, [r3], #4
 800ca96:	f842 1f04 	str.w	r1, [r2, #4]!
 800ca9a:	429f      	cmp	r7, r3
 800ca9c:	d2f9      	bcs.n	800ca92 <__hexnan+0xaa>
 800ca9e:	1b3b      	subs	r3, r7, r4
 800caa0:	f023 0303 	bic.w	r3, r3, #3
 800caa4:	3304      	adds	r3, #4
 800caa6:	3401      	adds	r4, #1
 800caa8:	3e03      	subs	r6, #3
 800caaa:	42b4      	cmp	r4, r6
 800caac:	bf88      	it	hi
 800caae:	2304      	movhi	r3, #4
 800cab0:	4443      	add	r3, r8
 800cab2:	2200      	movs	r2, #0
 800cab4:	f843 2b04 	str.w	r2, [r3], #4
 800cab8:	429f      	cmp	r7, r3
 800caba:	d2fb      	bcs.n	800cab4 <__hexnan+0xcc>
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	b91b      	cbnz	r3, 800cac8 <__hexnan+0xe0>
 800cac0:	4547      	cmp	r7, r8
 800cac2:	d128      	bne.n	800cb16 <__hexnan+0x12e>
 800cac4:	2301      	movs	r3, #1
 800cac6:	603b      	str	r3, [r7, #0]
 800cac8:	2005      	movs	r0, #5
 800caca:	b007      	add	sp, #28
 800cacc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cad0:	3501      	adds	r5, #1
 800cad2:	2d08      	cmp	r5, #8
 800cad4:	f10b 0b01 	add.w	fp, fp, #1
 800cad8:	dd06      	ble.n	800cae8 <__hexnan+0x100>
 800cada:	4544      	cmp	r4, r8
 800cadc:	d9c1      	bls.n	800ca62 <__hexnan+0x7a>
 800cade:	2300      	movs	r3, #0
 800cae0:	f844 3c04 	str.w	r3, [r4, #-4]
 800cae4:	2501      	movs	r5, #1
 800cae6:	3c04      	subs	r4, #4
 800cae8:	6822      	ldr	r2, [r4, #0]
 800caea:	f000 000f 	and.w	r0, r0, #15
 800caee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800caf2:	6020      	str	r0, [r4, #0]
 800caf4:	e7b5      	b.n	800ca62 <__hexnan+0x7a>
 800caf6:	2508      	movs	r5, #8
 800caf8:	e7b3      	b.n	800ca62 <__hexnan+0x7a>
 800cafa:	9b01      	ldr	r3, [sp, #4]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d0dd      	beq.n	800cabc <__hexnan+0xd4>
 800cb00:	f1c3 0320 	rsb	r3, r3, #32
 800cb04:	f04f 32ff 	mov.w	r2, #4294967295
 800cb08:	40da      	lsrs	r2, r3
 800cb0a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cb0e:	4013      	ands	r3, r2
 800cb10:	f846 3c04 	str.w	r3, [r6, #-4]
 800cb14:	e7d2      	b.n	800cabc <__hexnan+0xd4>
 800cb16:	3f04      	subs	r7, #4
 800cb18:	e7d0      	b.n	800cabc <__hexnan+0xd4>
 800cb1a:	2004      	movs	r0, #4
 800cb1c:	e7d5      	b.n	800caca <__hexnan+0xe2>
	...

0800cb20 <malloc>:
 800cb20:	4b02      	ldr	r3, [pc, #8]	@ (800cb2c <malloc+0xc>)
 800cb22:	4601      	mov	r1, r0
 800cb24:	6818      	ldr	r0, [r3, #0]
 800cb26:	f000 b825 	b.w	800cb74 <_malloc_r>
 800cb2a:	bf00      	nop
 800cb2c:	20000198 	.word	0x20000198

0800cb30 <sbrk_aligned>:
 800cb30:	b570      	push	{r4, r5, r6, lr}
 800cb32:	4e0f      	ldr	r6, [pc, #60]	@ (800cb70 <sbrk_aligned+0x40>)
 800cb34:	460c      	mov	r4, r1
 800cb36:	6831      	ldr	r1, [r6, #0]
 800cb38:	4605      	mov	r5, r0
 800cb3a:	b911      	cbnz	r1, 800cb42 <sbrk_aligned+0x12>
 800cb3c:	f001 f822 	bl	800db84 <_sbrk_r>
 800cb40:	6030      	str	r0, [r6, #0]
 800cb42:	4621      	mov	r1, r4
 800cb44:	4628      	mov	r0, r5
 800cb46:	f001 f81d 	bl	800db84 <_sbrk_r>
 800cb4a:	1c43      	adds	r3, r0, #1
 800cb4c:	d103      	bne.n	800cb56 <sbrk_aligned+0x26>
 800cb4e:	f04f 34ff 	mov.w	r4, #4294967295
 800cb52:	4620      	mov	r0, r4
 800cb54:	bd70      	pop	{r4, r5, r6, pc}
 800cb56:	1cc4      	adds	r4, r0, #3
 800cb58:	f024 0403 	bic.w	r4, r4, #3
 800cb5c:	42a0      	cmp	r0, r4
 800cb5e:	d0f8      	beq.n	800cb52 <sbrk_aligned+0x22>
 800cb60:	1a21      	subs	r1, r4, r0
 800cb62:	4628      	mov	r0, r5
 800cb64:	f001 f80e 	bl	800db84 <_sbrk_r>
 800cb68:	3001      	adds	r0, #1
 800cb6a:	d1f2      	bne.n	800cb52 <sbrk_aligned+0x22>
 800cb6c:	e7ef      	b.n	800cb4e <sbrk_aligned+0x1e>
 800cb6e:	bf00      	nop
 800cb70:	20003838 	.word	0x20003838

0800cb74 <_malloc_r>:
 800cb74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb78:	1ccd      	adds	r5, r1, #3
 800cb7a:	f025 0503 	bic.w	r5, r5, #3
 800cb7e:	3508      	adds	r5, #8
 800cb80:	2d0c      	cmp	r5, #12
 800cb82:	bf38      	it	cc
 800cb84:	250c      	movcc	r5, #12
 800cb86:	2d00      	cmp	r5, #0
 800cb88:	4606      	mov	r6, r0
 800cb8a:	db01      	blt.n	800cb90 <_malloc_r+0x1c>
 800cb8c:	42a9      	cmp	r1, r5
 800cb8e:	d904      	bls.n	800cb9a <_malloc_r+0x26>
 800cb90:	230c      	movs	r3, #12
 800cb92:	6033      	str	r3, [r6, #0]
 800cb94:	2000      	movs	r0, #0
 800cb96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cc70 <_malloc_r+0xfc>
 800cb9e:	f000 f87b 	bl	800cc98 <__malloc_lock>
 800cba2:	f8d8 3000 	ldr.w	r3, [r8]
 800cba6:	461c      	mov	r4, r3
 800cba8:	bb44      	cbnz	r4, 800cbfc <_malloc_r+0x88>
 800cbaa:	4629      	mov	r1, r5
 800cbac:	4630      	mov	r0, r6
 800cbae:	f7ff ffbf 	bl	800cb30 <sbrk_aligned>
 800cbb2:	1c43      	adds	r3, r0, #1
 800cbb4:	4604      	mov	r4, r0
 800cbb6:	d158      	bne.n	800cc6a <_malloc_r+0xf6>
 800cbb8:	f8d8 4000 	ldr.w	r4, [r8]
 800cbbc:	4627      	mov	r7, r4
 800cbbe:	2f00      	cmp	r7, #0
 800cbc0:	d143      	bne.n	800cc4a <_malloc_r+0xd6>
 800cbc2:	2c00      	cmp	r4, #0
 800cbc4:	d04b      	beq.n	800cc5e <_malloc_r+0xea>
 800cbc6:	6823      	ldr	r3, [r4, #0]
 800cbc8:	4639      	mov	r1, r7
 800cbca:	4630      	mov	r0, r6
 800cbcc:	eb04 0903 	add.w	r9, r4, r3
 800cbd0:	f000 ffd8 	bl	800db84 <_sbrk_r>
 800cbd4:	4581      	cmp	r9, r0
 800cbd6:	d142      	bne.n	800cc5e <_malloc_r+0xea>
 800cbd8:	6821      	ldr	r1, [r4, #0]
 800cbda:	1a6d      	subs	r5, r5, r1
 800cbdc:	4629      	mov	r1, r5
 800cbde:	4630      	mov	r0, r6
 800cbe0:	f7ff ffa6 	bl	800cb30 <sbrk_aligned>
 800cbe4:	3001      	adds	r0, #1
 800cbe6:	d03a      	beq.n	800cc5e <_malloc_r+0xea>
 800cbe8:	6823      	ldr	r3, [r4, #0]
 800cbea:	442b      	add	r3, r5
 800cbec:	6023      	str	r3, [r4, #0]
 800cbee:	f8d8 3000 	ldr.w	r3, [r8]
 800cbf2:	685a      	ldr	r2, [r3, #4]
 800cbf4:	bb62      	cbnz	r2, 800cc50 <_malloc_r+0xdc>
 800cbf6:	f8c8 7000 	str.w	r7, [r8]
 800cbfa:	e00f      	b.n	800cc1c <_malloc_r+0xa8>
 800cbfc:	6822      	ldr	r2, [r4, #0]
 800cbfe:	1b52      	subs	r2, r2, r5
 800cc00:	d420      	bmi.n	800cc44 <_malloc_r+0xd0>
 800cc02:	2a0b      	cmp	r2, #11
 800cc04:	d917      	bls.n	800cc36 <_malloc_r+0xc2>
 800cc06:	1961      	adds	r1, r4, r5
 800cc08:	42a3      	cmp	r3, r4
 800cc0a:	6025      	str	r5, [r4, #0]
 800cc0c:	bf18      	it	ne
 800cc0e:	6059      	strne	r1, [r3, #4]
 800cc10:	6863      	ldr	r3, [r4, #4]
 800cc12:	bf08      	it	eq
 800cc14:	f8c8 1000 	streq.w	r1, [r8]
 800cc18:	5162      	str	r2, [r4, r5]
 800cc1a:	604b      	str	r3, [r1, #4]
 800cc1c:	4630      	mov	r0, r6
 800cc1e:	f000 f841 	bl	800cca4 <__malloc_unlock>
 800cc22:	f104 000b 	add.w	r0, r4, #11
 800cc26:	1d23      	adds	r3, r4, #4
 800cc28:	f020 0007 	bic.w	r0, r0, #7
 800cc2c:	1ac2      	subs	r2, r0, r3
 800cc2e:	bf1c      	itt	ne
 800cc30:	1a1b      	subne	r3, r3, r0
 800cc32:	50a3      	strne	r3, [r4, r2]
 800cc34:	e7af      	b.n	800cb96 <_malloc_r+0x22>
 800cc36:	6862      	ldr	r2, [r4, #4]
 800cc38:	42a3      	cmp	r3, r4
 800cc3a:	bf0c      	ite	eq
 800cc3c:	f8c8 2000 	streq.w	r2, [r8]
 800cc40:	605a      	strne	r2, [r3, #4]
 800cc42:	e7eb      	b.n	800cc1c <_malloc_r+0xa8>
 800cc44:	4623      	mov	r3, r4
 800cc46:	6864      	ldr	r4, [r4, #4]
 800cc48:	e7ae      	b.n	800cba8 <_malloc_r+0x34>
 800cc4a:	463c      	mov	r4, r7
 800cc4c:	687f      	ldr	r7, [r7, #4]
 800cc4e:	e7b6      	b.n	800cbbe <_malloc_r+0x4a>
 800cc50:	461a      	mov	r2, r3
 800cc52:	685b      	ldr	r3, [r3, #4]
 800cc54:	42a3      	cmp	r3, r4
 800cc56:	d1fb      	bne.n	800cc50 <_malloc_r+0xdc>
 800cc58:	2300      	movs	r3, #0
 800cc5a:	6053      	str	r3, [r2, #4]
 800cc5c:	e7de      	b.n	800cc1c <_malloc_r+0xa8>
 800cc5e:	230c      	movs	r3, #12
 800cc60:	6033      	str	r3, [r6, #0]
 800cc62:	4630      	mov	r0, r6
 800cc64:	f000 f81e 	bl	800cca4 <__malloc_unlock>
 800cc68:	e794      	b.n	800cb94 <_malloc_r+0x20>
 800cc6a:	6005      	str	r5, [r0, #0]
 800cc6c:	e7d6      	b.n	800cc1c <_malloc_r+0xa8>
 800cc6e:	bf00      	nop
 800cc70:	2000383c 	.word	0x2000383c

0800cc74 <__ascii_mbtowc>:
 800cc74:	b082      	sub	sp, #8
 800cc76:	b901      	cbnz	r1, 800cc7a <__ascii_mbtowc+0x6>
 800cc78:	a901      	add	r1, sp, #4
 800cc7a:	b142      	cbz	r2, 800cc8e <__ascii_mbtowc+0x1a>
 800cc7c:	b14b      	cbz	r3, 800cc92 <__ascii_mbtowc+0x1e>
 800cc7e:	7813      	ldrb	r3, [r2, #0]
 800cc80:	600b      	str	r3, [r1, #0]
 800cc82:	7812      	ldrb	r2, [r2, #0]
 800cc84:	1e10      	subs	r0, r2, #0
 800cc86:	bf18      	it	ne
 800cc88:	2001      	movne	r0, #1
 800cc8a:	b002      	add	sp, #8
 800cc8c:	4770      	bx	lr
 800cc8e:	4610      	mov	r0, r2
 800cc90:	e7fb      	b.n	800cc8a <__ascii_mbtowc+0x16>
 800cc92:	f06f 0001 	mvn.w	r0, #1
 800cc96:	e7f8      	b.n	800cc8a <__ascii_mbtowc+0x16>

0800cc98 <__malloc_lock>:
 800cc98:	4801      	ldr	r0, [pc, #4]	@ (800cca0 <__malloc_lock+0x8>)
 800cc9a:	f7fe bd34 	b.w	800b706 <__retarget_lock_acquire_recursive>
 800cc9e:	bf00      	nop
 800cca0:	20003834 	.word	0x20003834

0800cca4 <__malloc_unlock>:
 800cca4:	4801      	ldr	r0, [pc, #4]	@ (800ccac <__malloc_unlock+0x8>)
 800cca6:	f7fe bd2f 	b.w	800b708 <__retarget_lock_release_recursive>
 800ccaa:	bf00      	nop
 800ccac:	20003834 	.word	0x20003834

0800ccb0 <_Balloc>:
 800ccb0:	b570      	push	{r4, r5, r6, lr}
 800ccb2:	69c6      	ldr	r6, [r0, #28]
 800ccb4:	4604      	mov	r4, r0
 800ccb6:	460d      	mov	r5, r1
 800ccb8:	b976      	cbnz	r6, 800ccd8 <_Balloc+0x28>
 800ccba:	2010      	movs	r0, #16
 800ccbc:	f7ff ff30 	bl	800cb20 <malloc>
 800ccc0:	4602      	mov	r2, r0
 800ccc2:	61e0      	str	r0, [r4, #28]
 800ccc4:	b920      	cbnz	r0, 800ccd0 <_Balloc+0x20>
 800ccc6:	4b18      	ldr	r3, [pc, #96]	@ (800cd28 <_Balloc+0x78>)
 800ccc8:	4818      	ldr	r0, [pc, #96]	@ (800cd2c <_Balloc+0x7c>)
 800ccca:	216b      	movs	r1, #107	@ 0x6b
 800cccc:	f7fe fd3a 	bl	800b744 <__assert_func>
 800ccd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ccd4:	6006      	str	r6, [r0, #0]
 800ccd6:	60c6      	str	r6, [r0, #12]
 800ccd8:	69e6      	ldr	r6, [r4, #28]
 800ccda:	68f3      	ldr	r3, [r6, #12]
 800ccdc:	b183      	cbz	r3, 800cd00 <_Balloc+0x50>
 800ccde:	69e3      	ldr	r3, [r4, #28]
 800cce0:	68db      	ldr	r3, [r3, #12]
 800cce2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cce6:	b9b8      	cbnz	r0, 800cd18 <_Balloc+0x68>
 800cce8:	2101      	movs	r1, #1
 800ccea:	fa01 f605 	lsl.w	r6, r1, r5
 800ccee:	1d72      	adds	r2, r6, #5
 800ccf0:	0092      	lsls	r2, r2, #2
 800ccf2:	4620      	mov	r0, r4
 800ccf4:	f000 ff5d 	bl	800dbb2 <_calloc_r>
 800ccf8:	b160      	cbz	r0, 800cd14 <_Balloc+0x64>
 800ccfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ccfe:	e00e      	b.n	800cd1e <_Balloc+0x6e>
 800cd00:	2221      	movs	r2, #33	@ 0x21
 800cd02:	2104      	movs	r1, #4
 800cd04:	4620      	mov	r0, r4
 800cd06:	f000 ff54 	bl	800dbb2 <_calloc_r>
 800cd0a:	69e3      	ldr	r3, [r4, #28]
 800cd0c:	60f0      	str	r0, [r6, #12]
 800cd0e:	68db      	ldr	r3, [r3, #12]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d1e4      	bne.n	800ccde <_Balloc+0x2e>
 800cd14:	2000      	movs	r0, #0
 800cd16:	bd70      	pop	{r4, r5, r6, pc}
 800cd18:	6802      	ldr	r2, [r0, #0]
 800cd1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cd1e:	2300      	movs	r3, #0
 800cd20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cd24:	e7f7      	b.n	800cd16 <_Balloc+0x66>
 800cd26:	bf00      	nop
 800cd28:	0800e361 	.word	0x0800e361
 800cd2c:	0800e4ec 	.word	0x0800e4ec

0800cd30 <_Bfree>:
 800cd30:	b570      	push	{r4, r5, r6, lr}
 800cd32:	69c6      	ldr	r6, [r0, #28]
 800cd34:	4605      	mov	r5, r0
 800cd36:	460c      	mov	r4, r1
 800cd38:	b976      	cbnz	r6, 800cd58 <_Bfree+0x28>
 800cd3a:	2010      	movs	r0, #16
 800cd3c:	f7ff fef0 	bl	800cb20 <malloc>
 800cd40:	4602      	mov	r2, r0
 800cd42:	61e8      	str	r0, [r5, #28]
 800cd44:	b920      	cbnz	r0, 800cd50 <_Bfree+0x20>
 800cd46:	4b09      	ldr	r3, [pc, #36]	@ (800cd6c <_Bfree+0x3c>)
 800cd48:	4809      	ldr	r0, [pc, #36]	@ (800cd70 <_Bfree+0x40>)
 800cd4a:	218f      	movs	r1, #143	@ 0x8f
 800cd4c:	f7fe fcfa 	bl	800b744 <__assert_func>
 800cd50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd54:	6006      	str	r6, [r0, #0]
 800cd56:	60c6      	str	r6, [r0, #12]
 800cd58:	b13c      	cbz	r4, 800cd6a <_Bfree+0x3a>
 800cd5a:	69eb      	ldr	r3, [r5, #28]
 800cd5c:	6862      	ldr	r2, [r4, #4]
 800cd5e:	68db      	ldr	r3, [r3, #12]
 800cd60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cd64:	6021      	str	r1, [r4, #0]
 800cd66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cd6a:	bd70      	pop	{r4, r5, r6, pc}
 800cd6c:	0800e361 	.word	0x0800e361
 800cd70:	0800e4ec 	.word	0x0800e4ec

0800cd74 <__multadd>:
 800cd74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd78:	690d      	ldr	r5, [r1, #16]
 800cd7a:	4607      	mov	r7, r0
 800cd7c:	460c      	mov	r4, r1
 800cd7e:	461e      	mov	r6, r3
 800cd80:	f101 0c14 	add.w	ip, r1, #20
 800cd84:	2000      	movs	r0, #0
 800cd86:	f8dc 3000 	ldr.w	r3, [ip]
 800cd8a:	b299      	uxth	r1, r3
 800cd8c:	fb02 6101 	mla	r1, r2, r1, r6
 800cd90:	0c1e      	lsrs	r6, r3, #16
 800cd92:	0c0b      	lsrs	r3, r1, #16
 800cd94:	fb02 3306 	mla	r3, r2, r6, r3
 800cd98:	b289      	uxth	r1, r1
 800cd9a:	3001      	adds	r0, #1
 800cd9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cda0:	4285      	cmp	r5, r0
 800cda2:	f84c 1b04 	str.w	r1, [ip], #4
 800cda6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cdaa:	dcec      	bgt.n	800cd86 <__multadd+0x12>
 800cdac:	b30e      	cbz	r6, 800cdf2 <__multadd+0x7e>
 800cdae:	68a3      	ldr	r3, [r4, #8]
 800cdb0:	42ab      	cmp	r3, r5
 800cdb2:	dc19      	bgt.n	800cde8 <__multadd+0x74>
 800cdb4:	6861      	ldr	r1, [r4, #4]
 800cdb6:	4638      	mov	r0, r7
 800cdb8:	3101      	adds	r1, #1
 800cdba:	f7ff ff79 	bl	800ccb0 <_Balloc>
 800cdbe:	4680      	mov	r8, r0
 800cdc0:	b928      	cbnz	r0, 800cdce <__multadd+0x5a>
 800cdc2:	4602      	mov	r2, r0
 800cdc4:	4b0c      	ldr	r3, [pc, #48]	@ (800cdf8 <__multadd+0x84>)
 800cdc6:	480d      	ldr	r0, [pc, #52]	@ (800cdfc <__multadd+0x88>)
 800cdc8:	21ba      	movs	r1, #186	@ 0xba
 800cdca:	f7fe fcbb 	bl	800b744 <__assert_func>
 800cdce:	6922      	ldr	r2, [r4, #16]
 800cdd0:	3202      	adds	r2, #2
 800cdd2:	f104 010c 	add.w	r1, r4, #12
 800cdd6:	0092      	lsls	r2, r2, #2
 800cdd8:	300c      	adds	r0, #12
 800cdda:	f7fe fc96 	bl	800b70a <memcpy>
 800cdde:	4621      	mov	r1, r4
 800cde0:	4638      	mov	r0, r7
 800cde2:	f7ff ffa5 	bl	800cd30 <_Bfree>
 800cde6:	4644      	mov	r4, r8
 800cde8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cdec:	3501      	adds	r5, #1
 800cdee:	615e      	str	r6, [r3, #20]
 800cdf0:	6125      	str	r5, [r4, #16]
 800cdf2:	4620      	mov	r0, r4
 800cdf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdf8:	0800e47b 	.word	0x0800e47b
 800cdfc:	0800e4ec 	.word	0x0800e4ec

0800ce00 <__s2b>:
 800ce00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce04:	460c      	mov	r4, r1
 800ce06:	4615      	mov	r5, r2
 800ce08:	461f      	mov	r7, r3
 800ce0a:	2209      	movs	r2, #9
 800ce0c:	3308      	adds	r3, #8
 800ce0e:	4606      	mov	r6, r0
 800ce10:	fb93 f3f2 	sdiv	r3, r3, r2
 800ce14:	2100      	movs	r1, #0
 800ce16:	2201      	movs	r2, #1
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	db09      	blt.n	800ce30 <__s2b+0x30>
 800ce1c:	4630      	mov	r0, r6
 800ce1e:	f7ff ff47 	bl	800ccb0 <_Balloc>
 800ce22:	b940      	cbnz	r0, 800ce36 <__s2b+0x36>
 800ce24:	4602      	mov	r2, r0
 800ce26:	4b19      	ldr	r3, [pc, #100]	@ (800ce8c <__s2b+0x8c>)
 800ce28:	4819      	ldr	r0, [pc, #100]	@ (800ce90 <__s2b+0x90>)
 800ce2a:	21d3      	movs	r1, #211	@ 0xd3
 800ce2c:	f7fe fc8a 	bl	800b744 <__assert_func>
 800ce30:	0052      	lsls	r2, r2, #1
 800ce32:	3101      	adds	r1, #1
 800ce34:	e7f0      	b.n	800ce18 <__s2b+0x18>
 800ce36:	9b08      	ldr	r3, [sp, #32]
 800ce38:	6143      	str	r3, [r0, #20]
 800ce3a:	2d09      	cmp	r5, #9
 800ce3c:	f04f 0301 	mov.w	r3, #1
 800ce40:	6103      	str	r3, [r0, #16]
 800ce42:	dd16      	ble.n	800ce72 <__s2b+0x72>
 800ce44:	f104 0909 	add.w	r9, r4, #9
 800ce48:	46c8      	mov	r8, r9
 800ce4a:	442c      	add	r4, r5
 800ce4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ce50:	4601      	mov	r1, r0
 800ce52:	3b30      	subs	r3, #48	@ 0x30
 800ce54:	220a      	movs	r2, #10
 800ce56:	4630      	mov	r0, r6
 800ce58:	f7ff ff8c 	bl	800cd74 <__multadd>
 800ce5c:	45a0      	cmp	r8, r4
 800ce5e:	d1f5      	bne.n	800ce4c <__s2b+0x4c>
 800ce60:	f1a5 0408 	sub.w	r4, r5, #8
 800ce64:	444c      	add	r4, r9
 800ce66:	1b2d      	subs	r5, r5, r4
 800ce68:	1963      	adds	r3, r4, r5
 800ce6a:	42bb      	cmp	r3, r7
 800ce6c:	db04      	blt.n	800ce78 <__s2b+0x78>
 800ce6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce72:	340a      	adds	r4, #10
 800ce74:	2509      	movs	r5, #9
 800ce76:	e7f6      	b.n	800ce66 <__s2b+0x66>
 800ce78:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ce7c:	4601      	mov	r1, r0
 800ce7e:	3b30      	subs	r3, #48	@ 0x30
 800ce80:	220a      	movs	r2, #10
 800ce82:	4630      	mov	r0, r6
 800ce84:	f7ff ff76 	bl	800cd74 <__multadd>
 800ce88:	e7ee      	b.n	800ce68 <__s2b+0x68>
 800ce8a:	bf00      	nop
 800ce8c:	0800e47b 	.word	0x0800e47b
 800ce90:	0800e4ec 	.word	0x0800e4ec

0800ce94 <__hi0bits>:
 800ce94:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ce98:	4603      	mov	r3, r0
 800ce9a:	bf36      	itet	cc
 800ce9c:	0403      	lslcc	r3, r0, #16
 800ce9e:	2000      	movcs	r0, #0
 800cea0:	2010      	movcc	r0, #16
 800cea2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cea6:	bf3c      	itt	cc
 800cea8:	021b      	lslcc	r3, r3, #8
 800ceaa:	3008      	addcc	r0, #8
 800ceac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ceb0:	bf3c      	itt	cc
 800ceb2:	011b      	lslcc	r3, r3, #4
 800ceb4:	3004      	addcc	r0, #4
 800ceb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ceba:	bf3c      	itt	cc
 800cebc:	009b      	lslcc	r3, r3, #2
 800cebe:	3002      	addcc	r0, #2
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	db05      	blt.n	800ced0 <__hi0bits+0x3c>
 800cec4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cec8:	f100 0001 	add.w	r0, r0, #1
 800cecc:	bf08      	it	eq
 800cece:	2020      	moveq	r0, #32
 800ced0:	4770      	bx	lr

0800ced2 <__lo0bits>:
 800ced2:	6803      	ldr	r3, [r0, #0]
 800ced4:	4602      	mov	r2, r0
 800ced6:	f013 0007 	ands.w	r0, r3, #7
 800ceda:	d00b      	beq.n	800cef4 <__lo0bits+0x22>
 800cedc:	07d9      	lsls	r1, r3, #31
 800cede:	d421      	bmi.n	800cf24 <__lo0bits+0x52>
 800cee0:	0798      	lsls	r0, r3, #30
 800cee2:	bf49      	itett	mi
 800cee4:	085b      	lsrmi	r3, r3, #1
 800cee6:	089b      	lsrpl	r3, r3, #2
 800cee8:	2001      	movmi	r0, #1
 800ceea:	6013      	strmi	r3, [r2, #0]
 800ceec:	bf5c      	itt	pl
 800ceee:	6013      	strpl	r3, [r2, #0]
 800cef0:	2002      	movpl	r0, #2
 800cef2:	4770      	bx	lr
 800cef4:	b299      	uxth	r1, r3
 800cef6:	b909      	cbnz	r1, 800cefc <__lo0bits+0x2a>
 800cef8:	0c1b      	lsrs	r3, r3, #16
 800cefa:	2010      	movs	r0, #16
 800cefc:	b2d9      	uxtb	r1, r3
 800cefe:	b909      	cbnz	r1, 800cf04 <__lo0bits+0x32>
 800cf00:	3008      	adds	r0, #8
 800cf02:	0a1b      	lsrs	r3, r3, #8
 800cf04:	0719      	lsls	r1, r3, #28
 800cf06:	bf04      	itt	eq
 800cf08:	091b      	lsreq	r3, r3, #4
 800cf0a:	3004      	addeq	r0, #4
 800cf0c:	0799      	lsls	r1, r3, #30
 800cf0e:	bf04      	itt	eq
 800cf10:	089b      	lsreq	r3, r3, #2
 800cf12:	3002      	addeq	r0, #2
 800cf14:	07d9      	lsls	r1, r3, #31
 800cf16:	d403      	bmi.n	800cf20 <__lo0bits+0x4e>
 800cf18:	085b      	lsrs	r3, r3, #1
 800cf1a:	f100 0001 	add.w	r0, r0, #1
 800cf1e:	d003      	beq.n	800cf28 <__lo0bits+0x56>
 800cf20:	6013      	str	r3, [r2, #0]
 800cf22:	4770      	bx	lr
 800cf24:	2000      	movs	r0, #0
 800cf26:	4770      	bx	lr
 800cf28:	2020      	movs	r0, #32
 800cf2a:	4770      	bx	lr

0800cf2c <__i2b>:
 800cf2c:	b510      	push	{r4, lr}
 800cf2e:	460c      	mov	r4, r1
 800cf30:	2101      	movs	r1, #1
 800cf32:	f7ff febd 	bl	800ccb0 <_Balloc>
 800cf36:	4602      	mov	r2, r0
 800cf38:	b928      	cbnz	r0, 800cf46 <__i2b+0x1a>
 800cf3a:	4b05      	ldr	r3, [pc, #20]	@ (800cf50 <__i2b+0x24>)
 800cf3c:	4805      	ldr	r0, [pc, #20]	@ (800cf54 <__i2b+0x28>)
 800cf3e:	f240 1145 	movw	r1, #325	@ 0x145
 800cf42:	f7fe fbff 	bl	800b744 <__assert_func>
 800cf46:	2301      	movs	r3, #1
 800cf48:	6144      	str	r4, [r0, #20]
 800cf4a:	6103      	str	r3, [r0, #16]
 800cf4c:	bd10      	pop	{r4, pc}
 800cf4e:	bf00      	nop
 800cf50:	0800e47b 	.word	0x0800e47b
 800cf54:	0800e4ec 	.word	0x0800e4ec

0800cf58 <__multiply>:
 800cf58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf5c:	4614      	mov	r4, r2
 800cf5e:	690a      	ldr	r2, [r1, #16]
 800cf60:	6923      	ldr	r3, [r4, #16]
 800cf62:	429a      	cmp	r2, r3
 800cf64:	bfa8      	it	ge
 800cf66:	4623      	movge	r3, r4
 800cf68:	460f      	mov	r7, r1
 800cf6a:	bfa4      	itt	ge
 800cf6c:	460c      	movge	r4, r1
 800cf6e:	461f      	movge	r7, r3
 800cf70:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cf74:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cf78:	68a3      	ldr	r3, [r4, #8]
 800cf7a:	6861      	ldr	r1, [r4, #4]
 800cf7c:	eb0a 0609 	add.w	r6, sl, r9
 800cf80:	42b3      	cmp	r3, r6
 800cf82:	b085      	sub	sp, #20
 800cf84:	bfb8      	it	lt
 800cf86:	3101      	addlt	r1, #1
 800cf88:	f7ff fe92 	bl	800ccb0 <_Balloc>
 800cf8c:	b930      	cbnz	r0, 800cf9c <__multiply+0x44>
 800cf8e:	4602      	mov	r2, r0
 800cf90:	4b44      	ldr	r3, [pc, #272]	@ (800d0a4 <__multiply+0x14c>)
 800cf92:	4845      	ldr	r0, [pc, #276]	@ (800d0a8 <__multiply+0x150>)
 800cf94:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cf98:	f7fe fbd4 	bl	800b744 <__assert_func>
 800cf9c:	f100 0514 	add.w	r5, r0, #20
 800cfa0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cfa4:	462b      	mov	r3, r5
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	4543      	cmp	r3, r8
 800cfaa:	d321      	bcc.n	800cff0 <__multiply+0x98>
 800cfac:	f107 0114 	add.w	r1, r7, #20
 800cfb0:	f104 0214 	add.w	r2, r4, #20
 800cfb4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cfb8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cfbc:	9302      	str	r3, [sp, #8]
 800cfbe:	1b13      	subs	r3, r2, r4
 800cfc0:	3b15      	subs	r3, #21
 800cfc2:	f023 0303 	bic.w	r3, r3, #3
 800cfc6:	3304      	adds	r3, #4
 800cfc8:	f104 0715 	add.w	r7, r4, #21
 800cfcc:	42ba      	cmp	r2, r7
 800cfce:	bf38      	it	cc
 800cfd0:	2304      	movcc	r3, #4
 800cfd2:	9301      	str	r3, [sp, #4]
 800cfd4:	9b02      	ldr	r3, [sp, #8]
 800cfd6:	9103      	str	r1, [sp, #12]
 800cfd8:	428b      	cmp	r3, r1
 800cfda:	d80c      	bhi.n	800cff6 <__multiply+0x9e>
 800cfdc:	2e00      	cmp	r6, #0
 800cfde:	dd03      	ble.n	800cfe8 <__multiply+0x90>
 800cfe0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d05b      	beq.n	800d0a0 <__multiply+0x148>
 800cfe8:	6106      	str	r6, [r0, #16]
 800cfea:	b005      	add	sp, #20
 800cfec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cff0:	f843 2b04 	str.w	r2, [r3], #4
 800cff4:	e7d8      	b.n	800cfa8 <__multiply+0x50>
 800cff6:	f8b1 a000 	ldrh.w	sl, [r1]
 800cffa:	f1ba 0f00 	cmp.w	sl, #0
 800cffe:	d024      	beq.n	800d04a <__multiply+0xf2>
 800d000:	f104 0e14 	add.w	lr, r4, #20
 800d004:	46a9      	mov	r9, r5
 800d006:	f04f 0c00 	mov.w	ip, #0
 800d00a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d00e:	f8d9 3000 	ldr.w	r3, [r9]
 800d012:	fa1f fb87 	uxth.w	fp, r7
 800d016:	b29b      	uxth	r3, r3
 800d018:	fb0a 330b 	mla	r3, sl, fp, r3
 800d01c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d020:	f8d9 7000 	ldr.w	r7, [r9]
 800d024:	4463      	add	r3, ip
 800d026:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d02a:	fb0a c70b 	mla	r7, sl, fp, ip
 800d02e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d032:	b29b      	uxth	r3, r3
 800d034:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d038:	4572      	cmp	r2, lr
 800d03a:	f849 3b04 	str.w	r3, [r9], #4
 800d03e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d042:	d8e2      	bhi.n	800d00a <__multiply+0xb2>
 800d044:	9b01      	ldr	r3, [sp, #4]
 800d046:	f845 c003 	str.w	ip, [r5, r3]
 800d04a:	9b03      	ldr	r3, [sp, #12]
 800d04c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d050:	3104      	adds	r1, #4
 800d052:	f1b9 0f00 	cmp.w	r9, #0
 800d056:	d021      	beq.n	800d09c <__multiply+0x144>
 800d058:	682b      	ldr	r3, [r5, #0]
 800d05a:	f104 0c14 	add.w	ip, r4, #20
 800d05e:	46ae      	mov	lr, r5
 800d060:	f04f 0a00 	mov.w	sl, #0
 800d064:	f8bc b000 	ldrh.w	fp, [ip]
 800d068:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d06c:	fb09 770b 	mla	r7, r9, fp, r7
 800d070:	4457      	add	r7, sl
 800d072:	b29b      	uxth	r3, r3
 800d074:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d078:	f84e 3b04 	str.w	r3, [lr], #4
 800d07c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d080:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d084:	f8be 3000 	ldrh.w	r3, [lr]
 800d088:	fb09 330a 	mla	r3, r9, sl, r3
 800d08c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d090:	4562      	cmp	r2, ip
 800d092:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d096:	d8e5      	bhi.n	800d064 <__multiply+0x10c>
 800d098:	9f01      	ldr	r7, [sp, #4]
 800d09a:	51eb      	str	r3, [r5, r7]
 800d09c:	3504      	adds	r5, #4
 800d09e:	e799      	b.n	800cfd4 <__multiply+0x7c>
 800d0a0:	3e01      	subs	r6, #1
 800d0a2:	e79b      	b.n	800cfdc <__multiply+0x84>
 800d0a4:	0800e47b 	.word	0x0800e47b
 800d0a8:	0800e4ec 	.word	0x0800e4ec

0800d0ac <__pow5mult>:
 800d0ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0b0:	4615      	mov	r5, r2
 800d0b2:	f012 0203 	ands.w	r2, r2, #3
 800d0b6:	4607      	mov	r7, r0
 800d0b8:	460e      	mov	r6, r1
 800d0ba:	d007      	beq.n	800d0cc <__pow5mult+0x20>
 800d0bc:	4c25      	ldr	r4, [pc, #148]	@ (800d154 <__pow5mult+0xa8>)
 800d0be:	3a01      	subs	r2, #1
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d0c6:	f7ff fe55 	bl	800cd74 <__multadd>
 800d0ca:	4606      	mov	r6, r0
 800d0cc:	10ad      	asrs	r5, r5, #2
 800d0ce:	d03d      	beq.n	800d14c <__pow5mult+0xa0>
 800d0d0:	69fc      	ldr	r4, [r7, #28]
 800d0d2:	b97c      	cbnz	r4, 800d0f4 <__pow5mult+0x48>
 800d0d4:	2010      	movs	r0, #16
 800d0d6:	f7ff fd23 	bl	800cb20 <malloc>
 800d0da:	4602      	mov	r2, r0
 800d0dc:	61f8      	str	r0, [r7, #28]
 800d0de:	b928      	cbnz	r0, 800d0ec <__pow5mult+0x40>
 800d0e0:	4b1d      	ldr	r3, [pc, #116]	@ (800d158 <__pow5mult+0xac>)
 800d0e2:	481e      	ldr	r0, [pc, #120]	@ (800d15c <__pow5mult+0xb0>)
 800d0e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d0e8:	f7fe fb2c 	bl	800b744 <__assert_func>
 800d0ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d0f0:	6004      	str	r4, [r0, #0]
 800d0f2:	60c4      	str	r4, [r0, #12]
 800d0f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d0f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d0fc:	b94c      	cbnz	r4, 800d112 <__pow5mult+0x66>
 800d0fe:	f240 2171 	movw	r1, #625	@ 0x271
 800d102:	4638      	mov	r0, r7
 800d104:	f7ff ff12 	bl	800cf2c <__i2b>
 800d108:	2300      	movs	r3, #0
 800d10a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d10e:	4604      	mov	r4, r0
 800d110:	6003      	str	r3, [r0, #0]
 800d112:	f04f 0900 	mov.w	r9, #0
 800d116:	07eb      	lsls	r3, r5, #31
 800d118:	d50a      	bpl.n	800d130 <__pow5mult+0x84>
 800d11a:	4631      	mov	r1, r6
 800d11c:	4622      	mov	r2, r4
 800d11e:	4638      	mov	r0, r7
 800d120:	f7ff ff1a 	bl	800cf58 <__multiply>
 800d124:	4631      	mov	r1, r6
 800d126:	4680      	mov	r8, r0
 800d128:	4638      	mov	r0, r7
 800d12a:	f7ff fe01 	bl	800cd30 <_Bfree>
 800d12e:	4646      	mov	r6, r8
 800d130:	106d      	asrs	r5, r5, #1
 800d132:	d00b      	beq.n	800d14c <__pow5mult+0xa0>
 800d134:	6820      	ldr	r0, [r4, #0]
 800d136:	b938      	cbnz	r0, 800d148 <__pow5mult+0x9c>
 800d138:	4622      	mov	r2, r4
 800d13a:	4621      	mov	r1, r4
 800d13c:	4638      	mov	r0, r7
 800d13e:	f7ff ff0b 	bl	800cf58 <__multiply>
 800d142:	6020      	str	r0, [r4, #0]
 800d144:	f8c0 9000 	str.w	r9, [r0]
 800d148:	4604      	mov	r4, r0
 800d14a:	e7e4      	b.n	800d116 <__pow5mult+0x6a>
 800d14c:	4630      	mov	r0, r6
 800d14e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d152:	bf00      	nop
 800d154:	0800e548 	.word	0x0800e548
 800d158:	0800e361 	.word	0x0800e361
 800d15c:	0800e4ec 	.word	0x0800e4ec

0800d160 <__lshift>:
 800d160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d164:	460c      	mov	r4, r1
 800d166:	6849      	ldr	r1, [r1, #4]
 800d168:	6923      	ldr	r3, [r4, #16]
 800d16a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d16e:	68a3      	ldr	r3, [r4, #8]
 800d170:	4607      	mov	r7, r0
 800d172:	4691      	mov	r9, r2
 800d174:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d178:	f108 0601 	add.w	r6, r8, #1
 800d17c:	42b3      	cmp	r3, r6
 800d17e:	db0b      	blt.n	800d198 <__lshift+0x38>
 800d180:	4638      	mov	r0, r7
 800d182:	f7ff fd95 	bl	800ccb0 <_Balloc>
 800d186:	4605      	mov	r5, r0
 800d188:	b948      	cbnz	r0, 800d19e <__lshift+0x3e>
 800d18a:	4602      	mov	r2, r0
 800d18c:	4b28      	ldr	r3, [pc, #160]	@ (800d230 <__lshift+0xd0>)
 800d18e:	4829      	ldr	r0, [pc, #164]	@ (800d234 <__lshift+0xd4>)
 800d190:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d194:	f7fe fad6 	bl	800b744 <__assert_func>
 800d198:	3101      	adds	r1, #1
 800d19a:	005b      	lsls	r3, r3, #1
 800d19c:	e7ee      	b.n	800d17c <__lshift+0x1c>
 800d19e:	2300      	movs	r3, #0
 800d1a0:	f100 0114 	add.w	r1, r0, #20
 800d1a4:	f100 0210 	add.w	r2, r0, #16
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	4553      	cmp	r3, sl
 800d1ac:	db33      	blt.n	800d216 <__lshift+0xb6>
 800d1ae:	6920      	ldr	r0, [r4, #16]
 800d1b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d1b4:	f104 0314 	add.w	r3, r4, #20
 800d1b8:	f019 091f 	ands.w	r9, r9, #31
 800d1bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d1c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d1c4:	d02b      	beq.n	800d21e <__lshift+0xbe>
 800d1c6:	f1c9 0e20 	rsb	lr, r9, #32
 800d1ca:	468a      	mov	sl, r1
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	6818      	ldr	r0, [r3, #0]
 800d1d0:	fa00 f009 	lsl.w	r0, r0, r9
 800d1d4:	4310      	orrs	r0, r2
 800d1d6:	f84a 0b04 	str.w	r0, [sl], #4
 800d1da:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1de:	459c      	cmp	ip, r3
 800d1e0:	fa22 f20e 	lsr.w	r2, r2, lr
 800d1e4:	d8f3      	bhi.n	800d1ce <__lshift+0x6e>
 800d1e6:	ebac 0304 	sub.w	r3, ip, r4
 800d1ea:	3b15      	subs	r3, #21
 800d1ec:	f023 0303 	bic.w	r3, r3, #3
 800d1f0:	3304      	adds	r3, #4
 800d1f2:	f104 0015 	add.w	r0, r4, #21
 800d1f6:	4584      	cmp	ip, r0
 800d1f8:	bf38      	it	cc
 800d1fa:	2304      	movcc	r3, #4
 800d1fc:	50ca      	str	r2, [r1, r3]
 800d1fe:	b10a      	cbz	r2, 800d204 <__lshift+0xa4>
 800d200:	f108 0602 	add.w	r6, r8, #2
 800d204:	3e01      	subs	r6, #1
 800d206:	4638      	mov	r0, r7
 800d208:	612e      	str	r6, [r5, #16]
 800d20a:	4621      	mov	r1, r4
 800d20c:	f7ff fd90 	bl	800cd30 <_Bfree>
 800d210:	4628      	mov	r0, r5
 800d212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d216:	f842 0f04 	str.w	r0, [r2, #4]!
 800d21a:	3301      	adds	r3, #1
 800d21c:	e7c5      	b.n	800d1aa <__lshift+0x4a>
 800d21e:	3904      	subs	r1, #4
 800d220:	f853 2b04 	ldr.w	r2, [r3], #4
 800d224:	f841 2f04 	str.w	r2, [r1, #4]!
 800d228:	459c      	cmp	ip, r3
 800d22a:	d8f9      	bhi.n	800d220 <__lshift+0xc0>
 800d22c:	e7ea      	b.n	800d204 <__lshift+0xa4>
 800d22e:	bf00      	nop
 800d230:	0800e47b 	.word	0x0800e47b
 800d234:	0800e4ec 	.word	0x0800e4ec

0800d238 <__mcmp>:
 800d238:	690a      	ldr	r2, [r1, #16]
 800d23a:	4603      	mov	r3, r0
 800d23c:	6900      	ldr	r0, [r0, #16]
 800d23e:	1a80      	subs	r0, r0, r2
 800d240:	b530      	push	{r4, r5, lr}
 800d242:	d10e      	bne.n	800d262 <__mcmp+0x2a>
 800d244:	3314      	adds	r3, #20
 800d246:	3114      	adds	r1, #20
 800d248:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d24c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d250:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d254:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d258:	4295      	cmp	r5, r2
 800d25a:	d003      	beq.n	800d264 <__mcmp+0x2c>
 800d25c:	d205      	bcs.n	800d26a <__mcmp+0x32>
 800d25e:	f04f 30ff 	mov.w	r0, #4294967295
 800d262:	bd30      	pop	{r4, r5, pc}
 800d264:	42a3      	cmp	r3, r4
 800d266:	d3f3      	bcc.n	800d250 <__mcmp+0x18>
 800d268:	e7fb      	b.n	800d262 <__mcmp+0x2a>
 800d26a:	2001      	movs	r0, #1
 800d26c:	e7f9      	b.n	800d262 <__mcmp+0x2a>
	...

0800d270 <__mdiff>:
 800d270:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d274:	4689      	mov	r9, r1
 800d276:	4606      	mov	r6, r0
 800d278:	4611      	mov	r1, r2
 800d27a:	4648      	mov	r0, r9
 800d27c:	4614      	mov	r4, r2
 800d27e:	f7ff ffdb 	bl	800d238 <__mcmp>
 800d282:	1e05      	subs	r5, r0, #0
 800d284:	d112      	bne.n	800d2ac <__mdiff+0x3c>
 800d286:	4629      	mov	r1, r5
 800d288:	4630      	mov	r0, r6
 800d28a:	f7ff fd11 	bl	800ccb0 <_Balloc>
 800d28e:	4602      	mov	r2, r0
 800d290:	b928      	cbnz	r0, 800d29e <__mdiff+0x2e>
 800d292:	4b3f      	ldr	r3, [pc, #252]	@ (800d390 <__mdiff+0x120>)
 800d294:	f240 2137 	movw	r1, #567	@ 0x237
 800d298:	483e      	ldr	r0, [pc, #248]	@ (800d394 <__mdiff+0x124>)
 800d29a:	f7fe fa53 	bl	800b744 <__assert_func>
 800d29e:	2301      	movs	r3, #1
 800d2a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d2a4:	4610      	mov	r0, r2
 800d2a6:	b003      	add	sp, #12
 800d2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2ac:	bfbc      	itt	lt
 800d2ae:	464b      	movlt	r3, r9
 800d2b0:	46a1      	movlt	r9, r4
 800d2b2:	4630      	mov	r0, r6
 800d2b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d2b8:	bfba      	itte	lt
 800d2ba:	461c      	movlt	r4, r3
 800d2bc:	2501      	movlt	r5, #1
 800d2be:	2500      	movge	r5, #0
 800d2c0:	f7ff fcf6 	bl	800ccb0 <_Balloc>
 800d2c4:	4602      	mov	r2, r0
 800d2c6:	b918      	cbnz	r0, 800d2d0 <__mdiff+0x60>
 800d2c8:	4b31      	ldr	r3, [pc, #196]	@ (800d390 <__mdiff+0x120>)
 800d2ca:	f240 2145 	movw	r1, #581	@ 0x245
 800d2ce:	e7e3      	b.n	800d298 <__mdiff+0x28>
 800d2d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d2d4:	6926      	ldr	r6, [r4, #16]
 800d2d6:	60c5      	str	r5, [r0, #12]
 800d2d8:	f109 0310 	add.w	r3, r9, #16
 800d2dc:	f109 0514 	add.w	r5, r9, #20
 800d2e0:	f104 0e14 	add.w	lr, r4, #20
 800d2e4:	f100 0b14 	add.w	fp, r0, #20
 800d2e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d2ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d2f0:	9301      	str	r3, [sp, #4]
 800d2f2:	46d9      	mov	r9, fp
 800d2f4:	f04f 0c00 	mov.w	ip, #0
 800d2f8:	9b01      	ldr	r3, [sp, #4]
 800d2fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d2fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d302:	9301      	str	r3, [sp, #4]
 800d304:	fa1f f38a 	uxth.w	r3, sl
 800d308:	4619      	mov	r1, r3
 800d30a:	b283      	uxth	r3, r0
 800d30c:	1acb      	subs	r3, r1, r3
 800d30e:	0c00      	lsrs	r0, r0, #16
 800d310:	4463      	add	r3, ip
 800d312:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d316:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d31a:	b29b      	uxth	r3, r3
 800d31c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d320:	4576      	cmp	r6, lr
 800d322:	f849 3b04 	str.w	r3, [r9], #4
 800d326:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d32a:	d8e5      	bhi.n	800d2f8 <__mdiff+0x88>
 800d32c:	1b33      	subs	r3, r6, r4
 800d32e:	3b15      	subs	r3, #21
 800d330:	f023 0303 	bic.w	r3, r3, #3
 800d334:	3415      	adds	r4, #21
 800d336:	3304      	adds	r3, #4
 800d338:	42a6      	cmp	r6, r4
 800d33a:	bf38      	it	cc
 800d33c:	2304      	movcc	r3, #4
 800d33e:	441d      	add	r5, r3
 800d340:	445b      	add	r3, fp
 800d342:	461e      	mov	r6, r3
 800d344:	462c      	mov	r4, r5
 800d346:	4544      	cmp	r4, r8
 800d348:	d30e      	bcc.n	800d368 <__mdiff+0xf8>
 800d34a:	f108 0103 	add.w	r1, r8, #3
 800d34e:	1b49      	subs	r1, r1, r5
 800d350:	f021 0103 	bic.w	r1, r1, #3
 800d354:	3d03      	subs	r5, #3
 800d356:	45a8      	cmp	r8, r5
 800d358:	bf38      	it	cc
 800d35a:	2100      	movcc	r1, #0
 800d35c:	440b      	add	r3, r1
 800d35e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d362:	b191      	cbz	r1, 800d38a <__mdiff+0x11a>
 800d364:	6117      	str	r7, [r2, #16]
 800d366:	e79d      	b.n	800d2a4 <__mdiff+0x34>
 800d368:	f854 1b04 	ldr.w	r1, [r4], #4
 800d36c:	46e6      	mov	lr, ip
 800d36e:	0c08      	lsrs	r0, r1, #16
 800d370:	fa1c fc81 	uxtah	ip, ip, r1
 800d374:	4471      	add	r1, lr
 800d376:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d37a:	b289      	uxth	r1, r1
 800d37c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d380:	f846 1b04 	str.w	r1, [r6], #4
 800d384:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d388:	e7dd      	b.n	800d346 <__mdiff+0xd6>
 800d38a:	3f01      	subs	r7, #1
 800d38c:	e7e7      	b.n	800d35e <__mdiff+0xee>
 800d38e:	bf00      	nop
 800d390:	0800e47b 	.word	0x0800e47b
 800d394:	0800e4ec 	.word	0x0800e4ec

0800d398 <__ulp>:
 800d398:	b082      	sub	sp, #8
 800d39a:	ed8d 0b00 	vstr	d0, [sp]
 800d39e:	9a01      	ldr	r2, [sp, #4]
 800d3a0:	4b0f      	ldr	r3, [pc, #60]	@ (800d3e0 <__ulp+0x48>)
 800d3a2:	4013      	ands	r3, r2
 800d3a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	dc08      	bgt.n	800d3be <__ulp+0x26>
 800d3ac:	425b      	negs	r3, r3
 800d3ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d3b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d3b6:	da04      	bge.n	800d3c2 <__ulp+0x2a>
 800d3b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d3bc:	4113      	asrs	r3, r2
 800d3be:	2200      	movs	r2, #0
 800d3c0:	e008      	b.n	800d3d4 <__ulp+0x3c>
 800d3c2:	f1a2 0314 	sub.w	r3, r2, #20
 800d3c6:	2b1e      	cmp	r3, #30
 800d3c8:	bfda      	itte	le
 800d3ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d3ce:	40da      	lsrle	r2, r3
 800d3d0:	2201      	movgt	r2, #1
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	4619      	mov	r1, r3
 800d3d6:	4610      	mov	r0, r2
 800d3d8:	ec41 0b10 	vmov	d0, r0, r1
 800d3dc:	b002      	add	sp, #8
 800d3de:	4770      	bx	lr
 800d3e0:	7ff00000 	.word	0x7ff00000

0800d3e4 <__b2d>:
 800d3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3e8:	6906      	ldr	r6, [r0, #16]
 800d3ea:	f100 0814 	add.w	r8, r0, #20
 800d3ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d3f2:	1f37      	subs	r7, r6, #4
 800d3f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d3f8:	4610      	mov	r0, r2
 800d3fa:	f7ff fd4b 	bl	800ce94 <__hi0bits>
 800d3fe:	f1c0 0320 	rsb	r3, r0, #32
 800d402:	280a      	cmp	r0, #10
 800d404:	600b      	str	r3, [r1, #0]
 800d406:	491b      	ldr	r1, [pc, #108]	@ (800d474 <__b2d+0x90>)
 800d408:	dc15      	bgt.n	800d436 <__b2d+0x52>
 800d40a:	f1c0 0c0b 	rsb	ip, r0, #11
 800d40e:	fa22 f30c 	lsr.w	r3, r2, ip
 800d412:	45b8      	cmp	r8, r7
 800d414:	ea43 0501 	orr.w	r5, r3, r1
 800d418:	bf34      	ite	cc
 800d41a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d41e:	2300      	movcs	r3, #0
 800d420:	3015      	adds	r0, #21
 800d422:	fa02 f000 	lsl.w	r0, r2, r0
 800d426:	fa23 f30c 	lsr.w	r3, r3, ip
 800d42a:	4303      	orrs	r3, r0
 800d42c:	461c      	mov	r4, r3
 800d42e:	ec45 4b10 	vmov	d0, r4, r5
 800d432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d436:	45b8      	cmp	r8, r7
 800d438:	bf3a      	itte	cc
 800d43a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d43e:	f1a6 0708 	subcc.w	r7, r6, #8
 800d442:	2300      	movcs	r3, #0
 800d444:	380b      	subs	r0, #11
 800d446:	d012      	beq.n	800d46e <__b2d+0x8a>
 800d448:	f1c0 0120 	rsb	r1, r0, #32
 800d44c:	fa23 f401 	lsr.w	r4, r3, r1
 800d450:	4082      	lsls	r2, r0
 800d452:	4322      	orrs	r2, r4
 800d454:	4547      	cmp	r7, r8
 800d456:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d45a:	bf8c      	ite	hi
 800d45c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d460:	2200      	movls	r2, #0
 800d462:	4083      	lsls	r3, r0
 800d464:	40ca      	lsrs	r2, r1
 800d466:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d46a:	4313      	orrs	r3, r2
 800d46c:	e7de      	b.n	800d42c <__b2d+0x48>
 800d46e:	ea42 0501 	orr.w	r5, r2, r1
 800d472:	e7db      	b.n	800d42c <__b2d+0x48>
 800d474:	3ff00000 	.word	0x3ff00000

0800d478 <__d2b>:
 800d478:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d47c:	460f      	mov	r7, r1
 800d47e:	2101      	movs	r1, #1
 800d480:	ec59 8b10 	vmov	r8, r9, d0
 800d484:	4616      	mov	r6, r2
 800d486:	f7ff fc13 	bl	800ccb0 <_Balloc>
 800d48a:	4604      	mov	r4, r0
 800d48c:	b930      	cbnz	r0, 800d49c <__d2b+0x24>
 800d48e:	4602      	mov	r2, r0
 800d490:	4b23      	ldr	r3, [pc, #140]	@ (800d520 <__d2b+0xa8>)
 800d492:	4824      	ldr	r0, [pc, #144]	@ (800d524 <__d2b+0xac>)
 800d494:	f240 310f 	movw	r1, #783	@ 0x30f
 800d498:	f7fe f954 	bl	800b744 <__assert_func>
 800d49c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d4a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d4a4:	b10d      	cbz	r5, 800d4aa <__d2b+0x32>
 800d4a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d4aa:	9301      	str	r3, [sp, #4]
 800d4ac:	f1b8 0300 	subs.w	r3, r8, #0
 800d4b0:	d023      	beq.n	800d4fa <__d2b+0x82>
 800d4b2:	4668      	mov	r0, sp
 800d4b4:	9300      	str	r3, [sp, #0]
 800d4b6:	f7ff fd0c 	bl	800ced2 <__lo0bits>
 800d4ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d4be:	b1d0      	cbz	r0, 800d4f6 <__d2b+0x7e>
 800d4c0:	f1c0 0320 	rsb	r3, r0, #32
 800d4c4:	fa02 f303 	lsl.w	r3, r2, r3
 800d4c8:	430b      	orrs	r3, r1
 800d4ca:	40c2      	lsrs	r2, r0
 800d4cc:	6163      	str	r3, [r4, #20]
 800d4ce:	9201      	str	r2, [sp, #4]
 800d4d0:	9b01      	ldr	r3, [sp, #4]
 800d4d2:	61a3      	str	r3, [r4, #24]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	bf0c      	ite	eq
 800d4d8:	2201      	moveq	r2, #1
 800d4da:	2202      	movne	r2, #2
 800d4dc:	6122      	str	r2, [r4, #16]
 800d4de:	b1a5      	cbz	r5, 800d50a <__d2b+0x92>
 800d4e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d4e4:	4405      	add	r5, r0
 800d4e6:	603d      	str	r5, [r7, #0]
 800d4e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d4ec:	6030      	str	r0, [r6, #0]
 800d4ee:	4620      	mov	r0, r4
 800d4f0:	b003      	add	sp, #12
 800d4f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4f6:	6161      	str	r1, [r4, #20]
 800d4f8:	e7ea      	b.n	800d4d0 <__d2b+0x58>
 800d4fa:	a801      	add	r0, sp, #4
 800d4fc:	f7ff fce9 	bl	800ced2 <__lo0bits>
 800d500:	9b01      	ldr	r3, [sp, #4]
 800d502:	6163      	str	r3, [r4, #20]
 800d504:	3020      	adds	r0, #32
 800d506:	2201      	movs	r2, #1
 800d508:	e7e8      	b.n	800d4dc <__d2b+0x64>
 800d50a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d50e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d512:	6038      	str	r0, [r7, #0]
 800d514:	6918      	ldr	r0, [r3, #16]
 800d516:	f7ff fcbd 	bl	800ce94 <__hi0bits>
 800d51a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d51e:	e7e5      	b.n	800d4ec <__d2b+0x74>
 800d520:	0800e47b 	.word	0x0800e47b
 800d524:	0800e4ec 	.word	0x0800e4ec

0800d528 <__ratio>:
 800d528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d52c:	b085      	sub	sp, #20
 800d52e:	e9cd 1000 	strd	r1, r0, [sp]
 800d532:	a902      	add	r1, sp, #8
 800d534:	f7ff ff56 	bl	800d3e4 <__b2d>
 800d538:	9800      	ldr	r0, [sp, #0]
 800d53a:	a903      	add	r1, sp, #12
 800d53c:	ec55 4b10 	vmov	r4, r5, d0
 800d540:	f7ff ff50 	bl	800d3e4 <__b2d>
 800d544:	9b01      	ldr	r3, [sp, #4]
 800d546:	6919      	ldr	r1, [r3, #16]
 800d548:	9b00      	ldr	r3, [sp, #0]
 800d54a:	691b      	ldr	r3, [r3, #16]
 800d54c:	1ac9      	subs	r1, r1, r3
 800d54e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d552:	1a9b      	subs	r3, r3, r2
 800d554:	ec5b ab10 	vmov	sl, fp, d0
 800d558:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	bfce      	itee	gt
 800d560:	462a      	movgt	r2, r5
 800d562:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d566:	465a      	movle	r2, fp
 800d568:	462f      	mov	r7, r5
 800d56a:	46d9      	mov	r9, fp
 800d56c:	bfcc      	ite	gt
 800d56e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d572:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d576:	464b      	mov	r3, r9
 800d578:	4652      	mov	r2, sl
 800d57a:	4620      	mov	r0, r4
 800d57c:	4639      	mov	r1, r7
 800d57e:	f7f3 f985 	bl	800088c <__aeabi_ddiv>
 800d582:	ec41 0b10 	vmov	d0, r0, r1
 800d586:	b005      	add	sp, #20
 800d588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d58c <__copybits>:
 800d58c:	3901      	subs	r1, #1
 800d58e:	b570      	push	{r4, r5, r6, lr}
 800d590:	1149      	asrs	r1, r1, #5
 800d592:	6914      	ldr	r4, [r2, #16]
 800d594:	3101      	adds	r1, #1
 800d596:	f102 0314 	add.w	r3, r2, #20
 800d59a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d59e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d5a2:	1f05      	subs	r5, r0, #4
 800d5a4:	42a3      	cmp	r3, r4
 800d5a6:	d30c      	bcc.n	800d5c2 <__copybits+0x36>
 800d5a8:	1aa3      	subs	r3, r4, r2
 800d5aa:	3b11      	subs	r3, #17
 800d5ac:	f023 0303 	bic.w	r3, r3, #3
 800d5b0:	3211      	adds	r2, #17
 800d5b2:	42a2      	cmp	r2, r4
 800d5b4:	bf88      	it	hi
 800d5b6:	2300      	movhi	r3, #0
 800d5b8:	4418      	add	r0, r3
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	4288      	cmp	r0, r1
 800d5be:	d305      	bcc.n	800d5cc <__copybits+0x40>
 800d5c0:	bd70      	pop	{r4, r5, r6, pc}
 800d5c2:	f853 6b04 	ldr.w	r6, [r3], #4
 800d5c6:	f845 6f04 	str.w	r6, [r5, #4]!
 800d5ca:	e7eb      	b.n	800d5a4 <__copybits+0x18>
 800d5cc:	f840 3b04 	str.w	r3, [r0], #4
 800d5d0:	e7f4      	b.n	800d5bc <__copybits+0x30>

0800d5d2 <__any_on>:
 800d5d2:	f100 0214 	add.w	r2, r0, #20
 800d5d6:	6900      	ldr	r0, [r0, #16]
 800d5d8:	114b      	asrs	r3, r1, #5
 800d5da:	4298      	cmp	r0, r3
 800d5dc:	b510      	push	{r4, lr}
 800d5de:	db11      	blt.n	800d604 <__any_on+0x32>
 800d5e0:	dd0a      	ble.n	800d5f8 <__any_on+0x26>
 800d5e2:	f011 011f 	ands.w	r1, r1, #31
 800d5e6:	d007      	beq.n	800d5f8 <__any_on+0x26>
 800d5e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d5ec:	fa24 f001 	lsr.w	r0, r4, r1
 800d5f0:	fa00 f101 	lsl.w	r1, r0, r1
 800d5f4:	428c      	cmp	r4, r1
 800d5f6:	d10b      	bne.n	800d610 <__any_on+0x3e>
 800d5f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d5fc:	4293      	cmp	r3, r2
 800d5fe:	d803      	bhi.n	800d608 <__any_on+0x36>
 800d600:	2000      	movs	r0, #0
 800d602:	bd10      	pop	{r4, pc}
 800d604:	4603      	mov	r3, r0
 800d606:	e7f7      	b.n	800d5f8 <__any_on+0x26>
 800d608:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d60c:	2900      	cmp	r1, #0
 800d60e:	d0f5      	beq.n	800d5fc <__any_on+0x2a>
 800d610:	2001      	movs	r0, #1
 800d612:	e7f6      	b.n	800d602 <__any_on+0x30>

0800d614 <_strtol_l.constprop.0>:
 800d614:	2b24      	cmp	r3, #36	@ 0x24
 800d616:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d61a:	4686      	mov	lr, r0
 800d61c:	4690      	mov	r8, r2
 800d61e:	d801      	bhi.n	800d624 <_strtol_l.constprop.0+0x10>
 800d620:	2b01      	cmp	r3, #1
 800d622:	d106      	bne.n	800d632 <_strtol_l.constprop.0+0x1e>
 800d624:	f7fe f844 	bl	800b6b0 <__errno>
 800d628:	2316      	movs	r3, #22
 800d62a:	6003      	str	r3, [r0, #0]
 800d62c:	2000      	movs	r0, #0
 800d62e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d632:	4834      	ldr	r0, [pc, #208]	@ (800d704 <_strtol_l.constprop.0+0xf0>)
 800d634:	460d      	mov	r5, r1
 800d636:	462a      	mov	r2, r5
 800d638:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d63c:	5d06      	ldrb	r6, [r0, r4]
 800d63e:	f016 0608 	ands.w	r6, r6, #8
 800d642:	d1f8      	bne.n	800d636 <_strtol_l.constprop.0+0x22>
 800d644:	2c2d      	cmp	r4, #45	@ 0x2d
 800d646:	d12d      	bne.n	800d6a4 <_strtol_l.constprop.0+0x90>
 800d648:	782c      	ldrb	r4, [r5, #0]
 800d64a:	2601      	movs	r6, #1
 800d64c:	1c95      	adds	r5, r2, #2
 800d64e:	f033 0210 	bics.w	r2, r3, #16
 800d652:	d109      	bne.n	800d668 <_strtol_l.constprop.0+0x54>
 800d654:	2c30      	cmp	r4, #48	@ 0x30
 800d656:	d12a      	bne.n	800d6ae <_strtol_l.constprop.0+0x9a>
 800d658:	782a      	ldrb	r2, [r5, #0]
 800d65a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d65e:	2a58      	cmp	r2, #88	@ 0x58
 800d660:	d125      	bne.n	800d6ae <_strtol_l.constprop.0+0x9a>
 800d662:	786c      	ldrb	r4, [r5, #1]
 800d664:	2310      	movs	r3, #16
 800d666:	3502      	adds	r5, #2
 800d668:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d66c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d670:	2200      	movs	r2, #0
 800d672:	fbbc f9f3 	udiv	r9, ip, r3
 800d676:	4610      	mov	r0, r2
 800d678:	fb03 ca19 	mls	sl, r3, r9, ip
 800d67c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d680:	2f09      	cmp	r7, #9
 800d682:	d81b      	bhi.n	800d6bc <_strtol_l.constprop.0+0xa8>
 800d684:	463c      	mov	r4, r7
 800d686:	42a3      	cmp	r3, r4
 800d688:	dd27      	ble.n	800d6da <_strtol_l.constprop.0+0xc6>
 800d68a:	1c57      	adds	r7, r2, #1
 800d68c:	d007      	beq.n	800d69e <_strtol_l.constprop.0+0x8a>
 800d68e:	4581      	cmp	r9, r0
 800d690:	d320      	bcc.n	800d6d4 <_strtol_l.constprop.0+0xc0>
 800d692:	d101      	bne.n	800d698 <_strtol_l.constprop.0+0x84>
 800d694:	45a2      	cmp	sl, r4
 800d696:	db1d      	blt.n	800d6d4 <_strtol_l.constprop.0+0xc0>
 800d698:	fb00 4003 	mla	r0, r0, r3, r4
 800d69c:	2201      	movs	r2, #1
 800d69e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d6a2:	e7eb      	b.n	800d67c <_strtol_l.constprop.0+0x68>
 800d6a4:	2c2b      	cmp	r4, #43	@ 0x2b
 800d6a6:	bf04      	itt	eq
 800d6a8:	782c      	ldrbeq	r4, [r5, #0]
 800d6aa:	1c95      	addeq	r5, r2, #2
 800d6ac:	e7cf      	b.n	800d64e <_strtol_l.constprop.0+0x3a>
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d1da      	bne.n	800d668 <_strtol_l.constprop.0+0x54>
 800d6b2:	2c30      	cmp	r4, #48	@ 0x30
 800d6b4:	bf0c      	ite	eq
 800d6b6:	2308      	moveq	r3, #8
 800d6b8:	230a      	movne	r3, #10
 800d6ba:	e7d5      	b.n	800d668 <_strtol_l.constprop.0+0x54>
 800d6bc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d6c0:	2f19      	cmp	r7, #25
 800d6c2:	d801      	bhi.n	800d6c8 <_strtol_l.constprop.0+0xb4>
 800d6c4:	3c37      	subs	r4, #55	@ 0x37
 800d6c6:	e7de      	b.n	800d686 <_strtol_l.constprop.0+0x72>
 800d6c8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d6cc:	2f19      	cmp	r7, #25
 800d6ce:	d804      	bhi.n	800d6da <_strtol_l.constprop.0+0xc6>
 800d6d0:	3c57      	subs	r4, #87	@ 0x57
 800d6d2:	e7d8      	b.n	800d686 <_strtol_l.constprop.0+0x72>
 800d6d4:	f04f 32ff 	mov.w	r2, #4294967295
 800d6d8:	e7e1      	b.n	800d69e <_strtol_l.constprop.0+0x8a>
 800d6da:	1c53      	adds	r3, r2, #1
 800d6dc:	d108      	bne.n	800d6f0 <_strtol_l.constprop.0+0xdc>
 800d6de:	2322      	movs	r3, #34	@ 0x22
 800d6e0:	f8ce 3000 	str.w	r3, [lr]
 800d6e4:	4660      	mov	r0, ip
 800d6e6:	f1b8 0f00 	cmp.w	r8, #0
 800d6ea:	d0a0      	beq.n	800d62e <_strtol_l.constprop.0+0x1a>
 800d6ec:	1e69      	subs	r1, r5, #1
 800d6ee:	e006      	b.n	800d6fe <_strtol_l.constprop.0+0xea>
 800d6f0:	b106      	cbz	r6, 800d6f4 <_strtol_l.constprop.0+0xe0>
 800d6f2:	4240      	negs	r0, r0
 800d6f4:	f1b8 0f00 	cmp.w	r8, #0
 800d6f8:	d099      	beq.n	800d62e <_strtol_l.constprop.0+0x1a>
 800d6fa:	2a00      	cmp	r2, #0
 800d6fc:	d1f6      	bne.n	800d6ec <_strtol_l.constprop.0+0xd8>
 800d6fe:	f8c8 1000 	str.w	r1, [r8]
 800d702:	e794      	b.n	800d62e <_strtol_l.constprop.0+0x1a>
 800d704:	0800e649 	.word	0x0800e649

0800d708 <_strtol_r>:
 800d708:	f7ff bf84 	b.w	800d614 <_strtol_l.constprop.0>

0800d70c <__ascii_wctomb>:
 800d70c:	4603      	mov	r3, r0
 800d70e:	4608      	mov	r0, r1
 800d710:	b141      	cbz	r1, 800d724 <__ascii_wctomb+0x18>
 800d712:	2aff      	cmp	r2, #255	@ 0xff
 800d714:	d904      	bls.n	800d720 <__ascii_wctomb+0x14>
 800d716:	228a      	movs	r2, #138	@ 0x8a
 800d718:	601a      	str	r2, [r3, #0]
 800d71a:	f04f 30ff 	mov.w	r0, #4294967295
 800d71e:	4770      	bx	lr
 800d720:	700a      	strb	r2, [r1, #0]
 800d722:	2001      	movs	r0, #1
 800d724:	4770      	bx	lr

0800d726 <__ssputs_r>:
 800d726:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d72a:	688e      	ldr	r6, [r1, #8]
 800d72c:	461f      	mov	r7, r3
 800d72e:	42be      	cmp	r6, r7
 800d730:	680b      	ldr	r3, [r1, #0]
 800d732:	4682      	mov	sl, r0
 800d734:	460c      	mov	r4, r1
 800d736:	4690      	mov	r8, r2
 800d738:	d82d      	bhi.n	800d796 <__ssputs_r+0x70>
 800d73a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d73e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d742:	d026      	beq.n	800d792 <__ssputs_r+0x6c>
 800d744:	6965      	ldr	r5, [r4, #20]
 800d746:	6909      	ldr	r1, [r1, #16]
 800d748:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d74c:	eba3 0901 	sub.w	r9, r3, r1
 800d750:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d754:	1c7b      	adds	r3, r7, #1
 800d756:	444b      	add	r3, r9
 800d758:	106d      	asrs	r5, r5, #1
 800d75a:	429d      	cmp	r5, r3
 800d75c:	bf38      	it	cc
 800d75e:	461d      	movcc	r5, r3
 800d760:	0553      	lsls	r3, r2, #21
 800d762:	d527      	bpl.n	800d7b4 <__ssputs_r+0x8e>
 800d764:	4629      	mov	r1, r5
 800d766:	f7ff fa05 	bl	800cb74 <_malloc_r>
 800d76a:	4606      	mov	r6, r0
 800d76c:	b360      	cbz	r0, 800d7c8 <__ssputs_r+0xa2>
 800d76e:	6921      	ldr	r1, [r4, #16]
 800d770:	464a      	mov	r2, r9
 800d772:	f7fd ffca 	bl	800b70a <memcpy>
 800d776:	89a3      	ldrh	r3, [r4, #12]
 800d778:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d77c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d780:	81a3      	strh	r3, [r4, #12]
 800d782:	6126      	str	r6, [r4, #16]
 800d784:	6165      	str	r5, [r4, #20]
 800d786:	444e      	add	r6, r9
 800d788:	eba5 0509 	sub.w	r5, r5, r9
 800d78c:	6026      	str	r6, [r4, #0]
 800d78e:	60a5      	str	r5, [r4, #8]
 800d790:	463e      	mov	r6, r7
 800d792:	42be      	cmp	r6, r7
 800d794:	d900      	bls.n	800d798 <__ssputs_r+0x72>
 800d796:	463e      	mov	r6, r7
 800d798:	6820      	ldr	r0, [r4, #0]
 800d79a:	4632      	mov	r2, r6
 800d79c:	4641      	mov	r1, r8
 800d79e:	f000 f9d7 	bl	800db50 <memmove>
 800d7a2:	68a3      	ldr	r3, [r4, #8]
 800d7a4:	1b9b      	subs	r3, r3, r6
 800d7a6:	60a3      	str	r3, [r4, #8]
 800d7a8:	6823      	ldr	r3, [r4, #0]
 800d7aa:	4433      	add	r3, r6
 800d7ac:	6023      	str	r3, [r4, #0]
 800d7ae:	2000      	movs	r0, #0
 800d7b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7b4:	462a      	mov	r2, r5
 800d7b6:	f000 fa10 	bl	800dbda <_realloc_r>
 800d7ba:	4606      	mov	r6, r0
 800d7bc:	2800      	cmp	r0, #0
 800d7be:	d1e0      	bne.n	800d782 <__ssputs_r+0x5c>
 800d7c0:	6921      	ldr	r1, [r4, #16]
 800d7c2:	4650      	mov	r0, sl
 800d7c4:	f7fe fe28 	bl	800c418 <_free_r>
 800d7c8:	230c      	movs	r3, #12
 800d7ca:	f8ca 3000 	str.w	r3, [sl]
 800d7ce:	89a3      	ldrh	r3, [r4, #12]
 800d7d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7d4:	81a3      	strh	r3, [r4, #12]
 800d7d6:	f04f 30ff 	mov.w	r0, #4294967295
 800d7da:	e7e9      	b.n	800d7b0 <__ssputs_r+0x8a>

0800d7dc <_svfiprintf_r>:
 800d7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7e0:	4698      	mov	r8, r3
 800d7e2:	898b      	ldrh	r3, [r1, #12]
 800d7e4:	061b      	lsls	r3, r3, #24
 800d7e6:	b09d      	sub	sp, #116	@ 0x74
 800d7e8:	4607      	mov	r7, r0
 800d7ea:	460d      	mov	r5, r1
 800d7ec:	4614      	mov	r4, r2
 800d7ee:	d510      	bpl.n	800d812 <_svfiprintf_r+0x36>
 800d7f0:	690b      	ldr	r3, [r1, #16]
 800d7f2:	b973      	cbnz	r3, 800d812 <_svfiprintf_r+0x36>
 800d7f4:	2140      	movs	r1, #64	@ 0x40
 800d7f6:	f7ff f9bd 	bl	800cb74 <_malloc_r>
 800d7fa:	6028      	str	r0, [r5, #0]
 800d7fc:	6128      	str	r0, [r5, #16]
 800d7fe:	b930      	cbnz	r0, 800d80e <_svfiprintf_r+0x32>
 800d800:	230c      	movs	r3, #12
 800d802:	603b      	str	r3, [r7, #0]
 800d804:	f04f 30ff 	mov.w	r0, #4294967295
 800d808:	b01d      	add	sp, #116	@ 0x74
 800d80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d80e:	2340      	movs	r3, #64	@ 0x40
 800d810:	616b      	str	r3, [r5, #20]
 800d812:	2300      	movs	r3, #0
 800d814:	9309      	str	r3, [sp, #36]	@ 0x24
 800d816:	2320      	movs	r3, #32
 800d818:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d81c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d820:	2330      	movs	r3, #48	@ 0x30
 800d822:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d9c0 <_svfiprintf_r+0x1e4>
 800d826:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d82a:	f04f 0901 	mov.w	r9, #1
 800d82e:	4623      	mov	r3, r4
 800d830:	469a      	mov	sl, r3
 800d832:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d836:	b10a      	cbz	r2, 800d83c <_svfiprintf_r+0x60>
 800d838:	2a25      	cmp	r2, #37	@ 0x25
 800d83a:	d1f9      	bne.n	800d830 <_svfiprintf_r+0x54>
 800d83c:	ebba 0b04 	subs.w	fp, sl, r4
 800d840:	d00b      	beq.n	800d85a <_svfiprintf_r+0x7e>
 800d842:	465b      	mov	r3, fp
 800d844:	4622      	mov	r2, r4
 800d846:	4629      	mov	r1, r5
 800d848:	4638      	mov	r0, r7
 800d84a:	f7ff ff6c 	bl	800d726 <__ssputs_r>
 800d84e:	3001      	adds	r0, #1
 800d850:	f000 80a7 	beq.w	800d9a2 <_svfiprintf_r+0x1c6>
 800d854:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d856:	445a      	add	r2, fp
 800d858:	9209      	str	r2, [sp, #36]	@ 0x24
 800d85a:	f89a 3000 	ldrb.w	r3, [sl]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	f000 809f 	beq.w	800d9a2 <_svfiprintf_r+0x1c6>
 800d864:	2300      	movs	r3, #0
 800d866:	f04f 32ff 	mov.w	r2, #4294967295
 800d86a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d86e:	f10a 0a01 	add.w	sl, sl, #1
 800d872:	9304      	str	r3, [sp, #16]
 800d874:	9307      	str	r3, [sp, #28]
 800d876:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d87a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d87c:	4654      	mov	r4, sl
 800d87e:	2205      	movs	r2, #5
 800d880:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d884:	484e      	ldr	r0, [pc, #312]	@ (800d9c0 <_svfiprintf_r+0x1e4>)
 800d886:	f7f2 fcc3 	bl	8000210 <memchr>
 800d88a:	9a04      	ldr	r2, [sp, #16]
 800d88c:	b9d8      	cbnz	r0, 800d8c6 <_svfiprintf_r+0xea>
 800d88e:	06d0      	lsls	r0, r2, #27
 800d890:	bf44      	itt	mi
 800d892:	2320      	movmi	r3, #32
 800d894:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d898:	0711      	lsls	r1, r2, #28
 800d89a:	bf44      	itt	mi
 800d89c:	232b      	movmi	r3, #43	@ 0x2b
 800d89e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d8a2:	f89a 3000 	ldrb.w	r3, [sl]
 800d8a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8a8:	d015      	beq.n	800d8d6 <_svfiprintf_r+0xfa>
 800d8aa:	9a07      	ldr	r2, [sp, #28]
 800d8ac:	4654      	mov	r4, sl
 800d8ae:	2000      	movs	r0, #0
 800d8b0:	f04f 0c0a 	mov.w	ip, #10
 800d8b4:	4621      	mov	r1, r4
 800d8b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8ba:	3b30      	subs	r3, #48	@ 0x30
 800d8bc:	2b09      	cmp	r3, #9
 800d8be:	d94b      	bls.n	800d958 <_svfiprintf_r+0x17c>
 800d8c0:	b1b0      	cbz	r0, 800d8f0 <_svfiprintf_r+0x114>
 800d8c2:	9207      	str	r2, [sp, #28]
 800d8c4:	e014      	b.n	800d8f0 <_svfiprintf_r+0x114>
 800d8c6:	eba0 0308 	sub.w	r3, r0, r8
 800d8ca:	fa09 f303 	lsl.w	r3, r9, r3
 800d8ce:	4313      	orrs	r3, r2
 800d8d0:	9304      	str	r3, [sp, #16]
 800d8d2:	46a2      	mov	sl, r4
 800d8d4:	e7d2      	b.n	800d87c <_svfiprintf_r+0xa0>
 800d8d6:	9b03      	ldr	r3, [sp, #12]
 800d8d8:	1d19      	adds	r1, r3, #4
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	9103      	str	r1, [sp, #12]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	bfbb      	ittet	lt
 800d8e2:	425b      	neglt	r3, r3
 800d8e4:	f042 0202 	orrlt.w	r2, r2, #2
 800d8e8:	9307      	strge	r3, [sp, #28]
 800d8ea:	9307      	strlt	r3, [sp, #28]
 800d8ec:	bfb8      	it	lt
 800d8ee:	9204      	strlt	r2, [sp, #16]
 800d8f0:	7823      	ldrb	r3, [r4, #0]
 800d8f2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d8f4:	d10a      	bne.n	800d90c <_svfiprintf_r+0x130>
 800d8f6:	7863      	ldrb	r3, [r4, #1]
 800d8f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8fa:	d132      	bne.n	800d962 <_svfiprintf_r+0x186>
 800d8fc:	9b03      	ldr	r3, [sp, #12]
 800d8fe:	1d1a      	adds	r2, r3, #4
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	9203      	str	r2, [sp, #12]
 800d904:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d908:	3402      	adds	r4, #2
 800d90a:	9305      	str	r3, [sp, #20]
 800d90c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d9d0 <_svfiprintf_r+0x1f4>
 800d910:	7821      	ldrb	r1, [r4, #0]
 800d912:	2203      	movs	r2, #3
 800d914:	4650      	mov	r0, sl
 800d916:	f7f2 fc7b 	bl	8000210 <memchr>
 800d91a:	b138      	cbz	r0, 800d92c <_svfiprintf_r+0x150>
 800d91c:	9b04      	ldr	r3, [sp, #16]
 800d91e:	eba0 000a 	sub.w	r0, r0, sl
 800d922:	2240      	movs	r2, #64	@ 0x40
 800d924:	4082      	lsls	r2, r0
 800d926:	4313      	orrs	r3, r2
 800d928:	3401      	adds	r4, #1
 800d92a:	9304      	str	r3, [sp, #16]
 800d92c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d930:	4824      	ldr	r0, [pc, #144]	@ (800d9c4 <_svfiprintf_r+0x1e8>)
 800d932:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d936:	2206      	movs	r2, #6
 800d938:	f7f2 fc6a 	bl	8000210 <memchr>
 800d93c:	2800      	cmp	r0, #0
 800d93e:	d036      	beq.n	800d9ae <_svfiprintf_r+0x1d2>
 800d940:	4b21      	ldr	r3, [pc, #132]	@ (800d9c8 <_svfiprintf_r+0x1ec>)
 800d942:	bb1b      	cbnz	r3, 800d98c <_svfiprintf_r+0x1b0>
 800d944:	9b03      	ldr	r3, [sp, #12]
 800d946:	3307      	adds	r3, #7
 800d948:	f023 0307 	bic.w	r3, r3, #7
 800d94c:	3308      	adds	r3, #8
 800d94e:	9303      	str	r3, [sp, #12]
 800d950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d952:	4433      	add	r3, r6
 800d954:	9309      	str	r3, [sp, #36]	@ 0x24
 800d956:	e76a      	b.n	800d82e <_svfiprintf_r+0x52>
 800d958:	fb0c 3202 	mla	r2, ip, r2, r3
 800d95c:	460c      	mov	r4, r1
 800d95e:	2001      	movs	r0, #1
 800d960:	e7a8      	b.n	800d8b4 <_svfiprintf_r+0xd8>
 800d962:	2300      	movs	r3, #0
 800d964:	3401      	adds	r4, #1
 800d966:	9305      	str	r3, [sp, #20]
 800d968:	4619      	mov	r1, r3
 800d96a:	f04f 0c0a 	mov.w	ip, #10
 800d96e:	4620      	mov	r0, r4
 800d970:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d974:	3a30      	subs	r2, #48	@ 0x30
 800d976:	2a09      	cmp	r2, #9
 800d978:	d903      	bls.n	800d982 <_svfiprintf_r+0x1a6>
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d0c6      	beq.n	800d90c <_svfiprintf_r+0x130>
 800d97e:	9105      	str	r1, [sp, #20]
 800d980:	e7c4      	b.n	800d90c <_svfiprintf_r+0x130>
 800d982:	fb0c 2101 	mla	r1, ip, r1, r2
 800d986:	4604      	mov	r4, r0
 800d988:	2301      	movs	r3, #1
 800d98a:	e7f0      	b.n	800d96e <_svfiprintf_r+0x192>
 800d98c:	ab03      	add	r3, sp, #12
 800d98e:	9300      	str	r3, [sp, #0]
 800d990:	462a      	mov	r2, r5
 800d992:	4b0e      	ldr	r3, [pc, #56]	@ (800d9cc <_svfiprintf_r+0x1f0>)
 800d994:	a904      	add	r1, sp, #16
 800d996:	4638      	mov	r0, r7
 800d998:	f7fc fed8 	bl	800a74c <_printf_float>
 800d99c:	1c42      	adds	r2, r0, #1
 800d99e:	4606      	mov	r6, r0
 800d9a0:	d1d6      	bne.n	800d950 <_svfiprintf_r+0x174>
 800d9a2:	89ab      	ldrh	r3, [r5, #12]
 800d9a4:	065b      	lsls	r3, r3, #25
 800d9a6:	f53f af2d 	bmi.w	800d804 <_svfiprintf_r+0x28>
 800d9aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d9ac:	e72c      	b.n	800d808 <_svfiprintf_r+0x2c>
 800d9ae:	ab03      	add	r3, sp, #12
 800d9b0:	9300      	str	r3, [sp, #0]
 800d9b2:	462a      	mov	r2, r5
 800d9b4:	4b05      	ldr	r3, [pc, #20]	@ (800d9cc <_svfiprintf_r+0x1f0>)
 800d9b6:	a904      	add	r1, sp, #16
 800d9b8:	4638      	mov	r0, r7
 800d9ba:	f7fd f95f 	bl	800ac7c <_printf_i>
 800d9be:	e7ed      	b.n	800d99c <_svfiprintf_r+0x1c0>
 800d9c0:	0800e749 	.word	0x0800e749
 800d9c4:	0800e753 	.word	0x0800e753
 800d9c8:	0800a74d 	.word	0x0800a74d
 800d9cc:	0800d727 	.word	0x0800d727
 800d9d0:	0800e74f 	.word	0x0800e74f

0800d9d4 <__sflush_r>:
 800d9d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9dc:	0716      	lsls	r6, r2, #28
 800d9de:	4605      	mov	r5, r0
 800d9e0:	460c      	mov	r4, r1
 800d9e2:	d454      	bmi.n	800da8e <__sflush_r+0xba>
 800d9e4:	684b      	ldr	r3, [r1, #4]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	dc02      	bgt.n	800d9f0 <__sflush_r+0x1c>
 800d9ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	dd48      	ble.n	800da82 <__sflush_r+0xae>
 800d9f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d9f2:	2e00      	cmp	r6, #0
 800d9f4:	d045      	beq.n	800da82 <__sflush_r+0xae>
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d9fc:	682f      	ldr	r7, [r5, #0]
 800d9fe:	6a21      	ldr	r1, [r4, #32]
 800da00:	602b      	str	r3, [r5, #0]
 800da02:	d030      	beq.n	800da66 <__sflush_r+0x92>
 800da04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800da06:	89a3      	ldrh	r3, [r4, #12]
 800da08:	0759      	lsls	r1, r3, #29
 800da0a:	d505      	bpl.n	800da18 <__sflush_r+0x44>
 800da0c:	6863      	ldr	r3, [r4, #4]
 800da0e:	1ad2      	subs	r2, r2, r3
 800da10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800da12:	b10b      	cbz	r3, 800da18 <__sflush_r+0x44>
 800da14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800da16:	1ad2      	subs	r2, r2, r3
 800da18:	2300      	movs	r3, #0
 800da1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800da1c:	6a21      	ldr	r1, [r4, #32]
 800da1e:	4628      	mov	r0, r5
 800da20:	47b0      	blx	r6
 800da22:	1c43      	adds	r3, r0, #1
 800da24:	89a3      	ldrh	r3, [r4, #12]
 800da26:	d106      	bne.n	800da36 <__sflush_r+0x62>
 800da28:	6829      	ldr	r1, [r5, #0]
 800da2a:	291d      	cmp	r1, #29
 800da2c:	d82b      	bhi.n	800da86 <__sflush_r+0xb2>
 800da2e:	4a2a      	ldr	r2, [pc, #168]	@ (800dad8 <__sflush_r+0x104>)
 800da30:	410a      	asrs	r2, r1
 800da32:	07d6      	lsls	r6, r2, #31
 800da34:	d427      	bmi.n	800da86 <__sflush_r+0xb2>
 800da36:	2200      	movs	r2, #0
 800da38:	6062      	str	r2, [r4, #4]
 800da3a:	04d9      	lsls	r1, r3, #19
 800da3c:	6922      	ldr	r2, [r4, #16]
 800da3e:	6022      	str	r2, [r4, #0]
 800da40:	d504      	bpl.n	800da4c <__sflush_r+0x78>
 800da42:	1c42      	adds	r2, r0, #1
 800da44:	d101      	bne.n	800da4a <__sflush_r+0x76>
 800da46:	682b      	ldr	r3, [r5, #0]
 800da48:	b903      	cbnz	r3, 800da4c <__sflush_r+0x78>
 800da4a:	6560      	str	r0, [r4, #84]	@ 0x54
 800da4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da4e:	602f      	str	r7, [r5, #0]
 800da50:	b1b9      	cbz	r1, 800da82 <__sflush_r+0xae>
 800da52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da56:	4299      	cmp	r1, r3
 800da58:	d002      	beq.n	800da60 <__sflush_r+0x8c>
 800da5a:	4628      	mov	r0, r5
 800da5c:	f7fe fcdc 	bl	800c418 <_free_r>
 800da60:	2300      	movs	r3, #0
 800da62:	6363      	str	r3, [r4, #52]	@ 0x34
 800da64:	e00d      	b.n	800da82 <__sflush_r+0xae>
 800da66:	2301      	movs	r3, #1
 800da68:	4628      	mov	r0, r5
 800da6a:	47b0      	blx	r6
 800da6c:	4602      	mov	r2, r0
 800da6e:	1c50      	adds	r0, r2, #1
 800da70:	d1c9      	bne.n	800da06 <__sflush_r+0x32>
 800da72:	682b      	ldr	r3, [r5, #0]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d0c6      	beq.n	800da06 <__sflush_r+0x32>
 800da78:	2b1d      	cmp	r3, #29
 800da7a:	d001      	beq.n	800da80 <__sflush_r+0xac>
 800da7c:	2b16      	cmp	r3, #22
 800da7e:	d11e      	bne.n	800dabe <__sflush_r+0xea>
 800da80:	602f      	str	r7, [r5, #0]
 800da82:	2000      	movs	r0, #0
 800da84:	e022      	b.n	800dacc <__sflush_r+0xf8>
 800da86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da8a:	b21b      	sxth	r3, r3
 800da8c:	e01b      	b.n	800dac6 <__sflush_r+0xf2>
 800da8e:	690f      	ldr	r7, [r1, #16]
 800da90:	2f00      	cmp	r7, #0
 800da92:	d0f6      	beq.n	800da82 <__sflush_r+0xae>
 800da94:	0793      	lsls	r3, r2, #30
 800da96:	680e      	ldr	r6, [r1, #0]
 800da98:	bf08      	it	eq
 800da9a:	694b      	ldreq	r3, [r1, #20]
 800da9c:	600f      	str	r7, [r1, #0]
 800da9e:	bf18      	it	ne
 800daa0:	2300      	movne	r3, #0
 800daa2:	eba6 0807 	sub.w	r8, r6, r7
 800daa6:	608b      	str	r3, [r1, #8]
 800daa8:	f1b8 0f00 	cmp.w	r8, #0
 800daac:	dde9      	ble.n	800da82 <__sflush_r+0xae>
 800daae:	6a21      	ldr	r1, [r4, #32]
 800dab0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dab2:	4643      	mov	r3, r8
 800dab4:	463a      	mov	r2, r7
 800dab6:	4628      	mov	r0, r5
 800dab8:	47b0      	blx	r6
 800daba:	2800      	cmp	r0, #0
 800dabc:	dc08      	bgt.n	800dad0 <__sflush_r+0xfc>
 800dabe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dac2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dac6:	81a3      	strh	r3, [r4, #12]
 800dac8:	f04f 30ff 	mov.w	r0, #4294967295
 800dacc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dad0:	4407      	add	r7, r0
 800dad2:	eba8 0800 	sub.w	r8, r8, r0
 800dad6:	e7e7      	b.n	800daa8 <__sflush_r+0xd4>
 800dad8:	dfbffffe 	.word	0xdfbffffe

0800dadc <_fflush_r>:
 800dadc:	b538      	push	{r3, r4, r5, lr}
 800dade:	690b      	ldr	r3, [r1, #16]
 800dae0:	4605      	mov	r5, r0
 800dae2:	460c      	mov	r4, r1
 800dae4:	b913      	cbnz	r3, 800daec <_fflush_r+0x10>
 800dae6:	2500      	movs	r5, #0
 800dae8:	4628      	mov	r0, r5
 800daea:	bd38      	pop	{r3, r4, r5, pc}
 800daec:	b118      	cbz	r0, 800daf6 <_fflush_r+0x1a>
 800daee:	6a03      	ldr	r3, [r0, #32]
 800daf0:	b90b      	cbnz	r3, 800daf6 <_fflush_r+0x1a>
 800daf2:	f7fd fc83 	bl	800b3fc <__sinit>
 800daf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d0f3      	beq.n	800dae6 <_fflush_r+0xa>
 800dafe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800db00:	07d0      	lsls	r0, r2, #31
 800db02:	d404      	bmi.n	800db0e <_fflush_r+0x32>
 800db04:	0599      	lsls	r1, r3, #22
 800db06:	d402      	bmi.n	800db0e <_fflush_r+0x32>
 800db08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db0a:	f7fd fdfc 	bl	800b706 <__retarget_lock_acquire_recursive>
 800db0e:	4628      	mov	r0, r5
 800db10:	4621      	mov	r1, r4
 800db12:	f7ff ff5f 	bl	800d9d4 <__sflush_r>
 800db16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800db18:	07da      	lsls	r2, r3, #31
 800db1a:	4605      	mov	r5, r0
 800db1c:	d4e4      	bmi.n	800dae8 <_fflush_r+0xc>
 800db1e:	89a3      	ldrh	r3, [r4, #12]
 800db20:	059b      	lsls	r3, r3, #22
 800db22:	d4e1      	bmi.n	800dae8 <_fflush_r+0xc>
 800db24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db26:	f7fd fdef 	bl	800b708 <__retarget_lock_release_recursive>
 800db2a:	e7dd      	b.n	800dae8 <_fflush_r+0xc>

0800db2c <fiprintf>:
 800db2c:	b40e      	push	{r1, r2, r3}
 800db2e:	b503      	push	{r0, r1, lr}
 800db30:	4601      	mov	r1, r0
 800db32:	ab03      	add	r3, sp, #12
 800db34:	4805      	ldr	r0, [pc, #20]	@ (800db4c <fiprintf+0x20>)
 800db36:	f853 2b04 	ldr.w	r2, [r3], #4
 800db3a:	6800      	ldr	r0, [r0, #0]
 800db3c:	9301      	str	r3, [sp, #4]
 800db3e:	f000 f8a3 	bl	800dc88 <_vfiprintf_r>
 800db42:	b002      	add	sp, #8
 800db44:	f85d eb04 	ldr.w	lr, [sp], #4
 800db48:	b003      	add	sp, #12
 800db4a:	4770      	bx	lr
 800db4c:	20000198 	.word	0x20000198

0800db50 <memmove>:
 800db50:	4288      	cmp	r0, r1
 800db52:	b510      	push	{r4, lr}
 800db54:	eb01 0402 	add.w	r4, r1, r2
 800db58:	d902      	bls.n	800db60 <memmove+0x10>
 800db5a:	4284      	cmp	r4, r0
 800db5c:	4623      	mov	r3, r4
 800db5e:	d807      	bhi.n	800db70 <memmove+0x20>
 800db60:	1e43      	subs	r3, r0, #1
 800db62:	42a1      	cmp	r1, r4
 800db64:	d008      	beq.n	800db78 <memmove+0x28>
 800db66:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db6e:	e7f8      	b.n	800db62 <memmove+0x12>
 800db70:	4402      	add	r2, r0
 800db72:	4601      	mov	r1, r0
 800db74:	428a      	cmp	r2, r1
 800db76:	d100      	bne.n	800db7a <memmove+0x2a>
 800db78:	bd10      	pop	{r4, pc}
 800db7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db82:	e7f7      	b.n	800db74 <memmove+0x24>

0800db84 <_sbrk_r>:
 800db84:	b538      	push	{r3, r4, r5, lr}
 800db86:	4d06      	ldr	r5, [pc, #24]	@ (800dba0 <_sbrk_r+0x1c>)
 800db88:	2300      	movs	r3, #0
 800db8a:	4604      	mov	r4, r0
 800db8c:	4608      	mov	r0, r1
 800db8e:	602b      	str	r3, [r5, #0]
 800db90:	f7f7 fd90 	bl	80056b4 <_sbrk>
 800db94:	1c43      	adds	r3, r0, #1
 800db96:	d102      	bne.n	800db9e <_sbrk_r+0x1a>
 800db98:	682b      	ldr	r3, [r5, #0]
 800db9a:	b103      	cbz	r3, 800db9e <_sbrk_r+0x1a>
 800db9c:	6023      	str	r3, [r4, #0]
 800db9e:	bd38      	pop	{r3, r4, r5, pc}
 800dba0:	20003830 	.word	0x20003830

0800dba4 <abort>:
 800dba4:	b508      	push	{r3, lr}
 800dba6:	2006      	movs	r0, #6
 800dba8:	f000 fa42 	bl	800e030 <raise>
 800dbac:	2001      	movs	r0, #1
 800dbae:	f7f7 fd08 	bl	80055c2 <_exit>

0800dbb2 <_calloc_r>:
 800dbb2:	b570      	push	{r4, r5, r6, lr}
 800dbb4:	fba1 5402 	umull	r5, r4, r1, r2
 800dbb8:	b93c      	cbnz	r4, 800dbca <_calloc_r+0x18>
 800dbba:	4629      	mov	r1, r5
 800dbbc:	f7fe ffda 	bl	800cb74 <_malloc_r>
 800dbc0:	4606      	mov	r6, r0
 800dbc2:	b928      	cbnz	r0, 800dbd0 <_calloc_r+0x1e>
 800dbc4:	2600      	movs	r6, #0
 800dbc6:	4630      	mov	r0, r6
 800dbc8:	bd70      	pop	{r4, r5, r6, pc}
 800dbca:	220c      	movs	r2, #12
 800dbcc:	6002      	str	r2, [r0, #0]
 800dbce:	e7f9      	b.n	800dbc4 <_calloc_r+0x12>
 800dbd0:	462a      	mov	r2, r5
 800dbd2:	4621      	mov	r1, r4
 800dbd4:	f7fd fcab 	bl	800b52e <memset>
 800dbd8:	e7f5      	b.n	800dbc6 <_calloc_r+0x14>

0800dbda <_realloc_r>:
 800dbda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbde:	4680      	mov	r8, r0
 800dbe0:	4615      	mov	r5, r2
 800dbe2:	460c      	mov	r4, r1
 800dbe4:	b921      	cbnz	r1, 800dbf0 <_realloc_r+0x16>
 800dbe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbea:	4611      	mov	r1, r2
 800dbec:	f7fe bfc2 	b.w	800cb74 <_malloc_r>
 800dbf0:	b92a      	cbnz	r2, 800dbfe <_realloc_r+0x24>
 800dbf2:	f7fe fc11 	bl	800c418 <_free_r>
 800dbf6:	2400      	movs	r4, #0
 800dbf8:	4620      	mov	r0, r4
 800dbfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbfe:	f000 fa33 	bl	800e068 <_malloc_usable_size_r>
 800dc02:	4285      	cmp	r5, r0
 800dc04:	4606      	mov	r6, r0
 800dc06:	d802      	bhi.n	800dc0e <_realloc_r+0x34>
 800dc08:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dc0c:	d8f4      	bhi.n	800dbf8 <_realloc_r+0x1e>
 800dc0e:	4629      	mov	r1, r5
 800dc10:	4640      	mov	r0, r8
 800dc12:	f7fe ffaf 	bl	800cb74 <_malloc_r>
 800dc16:	4607      	mov	r7, r0
 800dc18:	2800      	cmp	r0, #0
 800dc1a:	d0ec      	beq.n	800dbf6 <_realloc_r+0x1c>
 800dc1c:	42b5      	cmp	r5, r6
 800dc1e:	462a      	mov	r2, r5
 800dc20:	4621      	mov	r1, r4
 800dc22:	bf28      	it	cs
 800dc24:	4632      	movcs	r2, r6
 800dc26:	f7fd fd70 	bl	800b70a <memcpy>
 800dc2a:	4621      	mov	r1, r4
 800dc2c:	4640      	mov	r0, r8
 800dc2e:	f7fe fbf3 	bl	800c418 <_free_r>
 800dc32:	463c      	mov	r4, r7
 800dc34:	e7e0      	b.n	800dbf8 <_realloc_r+0x1e>

0800dc36 <__sfputc_r>:
 800dc36:	6893      	ldr	r3, [r2, #8]
 800dc38:	3b01      	subs	r3, #1
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	b410      	push	{r4}
 800dc3e:	6093      	str	r3, [r2, #8]
 800dc40:	da08      	bge.n	800dc54 <__sfputc_r+0x1e>
 800dc42:	6994      	ldr	r4, [r2, #24]
 800dc44:	42a3      	cmp	r3, r4
 800dc46:	db01      	blt.n	800dc4c <__sfputc_r+0x16>
 800dc48:	290a      	cmp	r1, #10
 800dc4a:	d103      	bne.n	800dc54 <__sfputc_r+0x1e>
 800dc4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc50:	f000 b932 	b.w	800deb8 <__swbuf_r>
 800dc54:	6813      	ldr	r3, [r2, #0]
 800dc56:	1c58      	adds	r0, r3, #1
 800dc58:	6010      	str	r0, [r2, #0]
 800dc5a:	7019      	strb	r1, [r3, #0]
 800dc5c:	4608      	mov	r0, r1
 800dc5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc62:	4770      	bx	lr

0800dc64 <__sfputs_r>:
 800dc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc66:	4606      	mov	r6, r0
 800dc68:	460f      	mov	r7, r1
 800dc6a:	4614      	mov	r4, r2
 800dc6c:	18d5      	adds	r5, r2, r3
 800dc6e:	42ac      	cmp	r4, r5
 800dc70:	d101      	bne.n	800dc76 <__sfputs_r+0x12>
 800dc72:	2000      	movs	r0, #0
 800dc74:	e007      	b.n	800dc86 <__sfputs_r+0x22>
 800dc76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc7a:	463a      	mov	r2, r7
 800dc7c:	4630      	mov	r0, r6
 800dc7e:	f7ff ffda 	bl	800dc36 <__sfputc_r>
 800dc82:	1c43      	adds	r3, r0, #1
 800dc84:	d1f3      	bne.n	800dc6e <__sfputs_r+0xa>
 800dc86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dc88 <_vfiprintf_r>:
 800dc88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc8c:	460d      	mov	r5, r1
 800dc8e:	b09d      	sub	sp, #116	@ 0x74
 800dc90:	4614      	mov	r4, r2
 800dc92:	4698      	mov	r8, r3
 800dc94:	4606      	mov	r6, r0
 800dc96:	b118      	cbz	r0, 800dca0 <_vfiprintf_r+0x18>
 800dc98:	6a03      	ldr	r3, [r0, #32]
 800dc9a:	b90b      	cbnz	r3, 800dca0 <_vfiprintf_r+0x18>
 800dc9c:	f7fd fbae 	bl	800b3fc <__sinit>
 800dca0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dca2:	07d9      	lsls	r1, r3, #31
 800dca4:	d405      	bmi.n	800dcb2 <_vfiprintf_r+0x2a>
 800dca6:	89ab      	ldrh	r3, [r5, #12]
 800dca8:	059a      	lsls	r2, r3, #22
 800dcaa:	d402      	bmi.n	800dcb2 <_vfiprintf_r+0x2a>
 800dcac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dcae:	f7fd fd2a 	bl	800b706 <__retarget_lock_acquire_recursive>
 800dcb2:	89ab      	ldrh	r3, [r5, #12]
 800dcb4:	071b      	lsls	r3, r3, #28
 800dcb6:	d501      	bpl.n	800dcbc <_vfiprintf_r+0x34>
 800dcb8:	692b      	ldr	r3, [r5, #16]
 800dcba:	b99b      	cbnz	r3, 800dce4 <_vfiprintf_r+0x5c>
 800dcbc:	4629      	mov	r1, r5
 800dcbe:	4630      	mov	r0, r6
 800dcc0:	f000 f938 	bl	800df34 <__swsetup_r>
 800dcc4:	b170      	cbz	r0, 800dce4 <_vfiprintf_r+0x5c>
 800dcc6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dcc8:	07dc      	lsls	r4, r3, #31
 800dcca:	d504      	bpl.n	800dcd6 <_vfiprintf_r+0x4e>
 800dccc:	f04f 30ff 	mov.w	r0, #4294967295
 800dcd0:	b01d      	add	sp, #116	@ 0x74
 800dcd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcd6:	89ab      	ldrh	r3, [r5, #12]
 800dcd8:	0598      	lsls	r0, r3, #22
 800dcda:	d4f7      	bmi.n	800dccc <_vfiprintf_r+0x44>
 800dcdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dcde:	f7fd fd13 	bl	800b708 <__retarget_lock_release_recursive>
 800dce2:	e7f3      	b.n	800dccc <_vfiprintf_r+0x44>
 800dce4:	2300      	movs	r3, #0
 800dce6:	9309      	str	r3, [sp, #36]	@ 0x24
 800dce8:	2320      	movs	r3, #32
 800dcea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dcee:	f8cd 800c 	str.w	r8, [sp, #12]
 800dcf2:	2330      	movs	r3, #48	@ 0x30
 800dcf4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dea4 <_vfiprintf_r+0x21c>
 800dcf8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dcfc:	f04f 0901 	mov.w	r9, #1
 800dd00:	4623      	mov	r3, r4
 800dd02:	469a      	mov	sl, r3
 800dd04:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd08:	b10a      	cbz	r2, 800dd0e <_vfiprintf_r+0x86>
 800dd0a:	2a25      	cmp	r2, #37	@ 0x25
 800dd0c:	d1f9      	bne.n	800dd02 <_vfiprintf_r+0x7a>
 800dd0e:	ebba 0b04 	subs.w	fp, sl, r4
 800dd12:	d00b      	beq.n	800dd2c <_vfiprintf_r+0xa4>
 800dd14:	465b      	mov	r3, fp
 800dd16:	4622      	mov	r2, r4
 800dd18:	4629      	mov	r1, r5
 800dd1a:	4630      	mov	r0, r6
 800dd1c:	f7ff ffa2 	bl	800dc64 <__sfputs_r>
 800dd20:	3001      	adds	r0, #1
 800dd22:	f000 80a7 	beq.w	800de74 <_vfiprintf_r+0x1ec>
 800dd26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd28:	445a      	add	r2, fp
 800dd2a:	9209      	str	r2, [sp, #36]	@ 0x24
 800dd2c:	f89a 3000 	ldrb.w	r3, [sl]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	f000 809f 	beq.w	800de74 <_vfiprintf_r+0x1ec>
 800dd36:	2300      	movs	r3, #0
 800dd38:	f04f 32ff 	mov.w	r2, #4294967295
 800dd3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd40:	f10a 0a01 	add.w	sl, sl, #1
 800dd44:	9304      	str	r3, [sp, #16]
 800dd46:	9307      	str	r3, [sp, #28]
 800dd48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dd4c:	931a      	str	r3, [sp, #104]	@ 0x68
 800dd4e:	4654      	mov	r4, sl
 800dd50:	2205      	movs	r2, #5
 800dd52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd56:	4853      	ldr	r0, [pc, #332]	@ (800dea4 <_vfiprintf_r+0x21c>)
 800dd58:	f7f2 fa5a 	bl	8000210 <memchr>
 800dd5c:	9a04      	ldr	r2, [sp, #16]
 800dd5e:	b9d8      	cbnz	r0, 800dd98 <_vfiprintf_r+0x110>
 800dd60:	06d1      	lsls	r1, r2, #27
 800dd62:	bf44      	itt	mi
 800dd64:	2320      	movmi	r3, #32
 800dd66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd6a:	0713      	lsls	r3, r2, #28
 800dd6c:	bf44      	itt	mi
 800dd6e:	232b      	movmi	r3, #43	@ 0x2b
 800dd70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd74:	f89a 3000 	ldrb.w	r3, [sl]
 800dd78:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd7a:	d015      	beq.n	800dda8 <_vfiprintf_r+0x120>
 800dd7c:	9a07      	ldr	r2, [sp, #28]
 800dd7e:	4654      	mov	r4, sl
 800dd80:	2000      	movs	r0, #0
 800dd82:	f04f 0c0a 	mov.w	ip, #10
 800dd86:	4621      	mov	r1, r4
 800dd88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd8c:	3b30      	subs	r3, #48	@ 0x30
 800dd8e:	2b09      	cmp	r3, #9
 800dd90:	d94b      	bls.n	800de2a <_vfiprintf_r+0x1a2>
 800dd92:	b1b0      	cbz	r0, 800ddc2 <_vfiprintf_r+0x13a>
 800dd94:	9207      	str	r2, [sp, #28]
 800dd96:	e014      	b.n	800ddc2 <_vfiprintf_r+0x13a>
 800dd98:	eba0 0308 	sub.w	r3, r0, r8
 800dd9c:	fa09 f303 	lsl.w	r3, r9, r3
 800dda0:	4313      	orrs	r3, r2
 800dda2:	9304      	str	r3, [sp, #16]
 800dda4:	46a2      	mov	sl, r4
 800dda6:	e7d2      	b.n	800dd4e <_vfiprintf_r+0xc6>
 800dda8:	9b03      	ldr	r3, [sp, #12]
 800ddaa:	1d19      	adds	r1, r3, #4
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	9103      	str	r1, [sp, #12]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	bfbb      	ittet	lt
 800ddb4:	425b      	neglt	r3, r3
 800ddb6:	f042 0202 	orrlt.w	r2, r2, #2
 800ddba:	9307      	strge	r3, [sp, #28]
 800ddbc:	9307      	strlt	r3, [sp, #28]
 800ddbe:	bfb8      	it	lt
 800ddc0:	9204      	strlt	r2, [sp, #16]
 800ddc2:	7823      	ldrb	r3, [r4, #0]
 800ddc4:	2b2e      	cmp	r3, #46	@ 0x2e
 800ddc6:	d10a      	bne.n	800ddde <_vfiprintf_r+0x156>
 800ddc8:	7863      	ldrb	r3, [r4, #1]
 800ddca:	2b2a      	cmp	r3, #42	@ 0x2a
 800ddcc:	d132      	bne.n	800de34 <_vfiprintf_r+0x1ac>
 800ddce:	9b03      	ldr	r3, [sp, #12]
 800ddd0:	1d1a      	adds	r2, r3, #4
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	9203      	str	r2, [sp, #12]
 800ddd6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ddda:	3402      	adds	r4, #2
 800dddc:	9305      	str	r3, [sp, #20]
 800ddde:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800deb4 <_vfiprintf_r+0x22c>
 800dde2:	7821      	ldrb	r1, [r4, #0]
 800dde4:	2203      	movs	r2, #3
 800dde6:	4650      	mov	r0, sl
 800dde8:	f7f2 fa12 	bl	8000210 <memchr>
 800ddec:	b138      	cbz	r0, 800ddfe <_vfiprintf_r+0x176>
 800ddee:	9b04      	ldr	r3, [sp, #16]
 800ddf0:	eba0 000a 	sub.w	r0, r0, sl
 800ddf4:	2240      	movs	r2, #64	@ 0x40
 800ddf6:	4082      	lsls	r2, r0
 800ddf8:	4313      	orrs	r3, r2
 800ddfa:	3401      	adds	r4, #1
 800ddfc:	9304      	str	r3, [sp, #16]
 800ddfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de02:	4829      	ldr	r0, [pc, #164]	@ (800dea8 <_vfiprintf_r+0x220>)
 800de04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800de08:	2206      	movs	r2, #6
 800de0a:	f7f2 fa01 	bl	8000210 <memchr>
 800de0e:	2800      	cmp	r0, #0
 800de10:	d03f      	beq.n	800de92 <_vfiprintf_r+0x20a>
 800de12:	4b26      	ldr	r3, [pc, #152]	@ (800deac <_vfiprintf_r+0x224>)
 800de14:	bb1b      	cbnz	r3, 800de5e <_vfiprintf_r+0x1d6>
 800de16:	9b03      	ldr	r3, [sp, #12]
 800de18:	3307      	adds	r3, #7
 800de1a:	f023 0307 	bic.w	r3, r3, #7
 800de1e:	3308      	adds	r3, #8
 800de20:	9303      	str	r3, [sp, #12]
 800de22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de24:	443b      	add	r3, r7
 800de26:	9309      	str	r3, [sp, #36]	@ 0x24
 800de28:	e76a      	b.n	800dd00 <_vfiprintf_r+0x78>
 800de2a:	fb0c 3202 	mla	r2, ip, r2, r3
 800de2e:	460c      	mov	r4, r1
 800de30:	2001      	movs	r0, #1
 800de32:	e7a8      	b.n	800dd86 <_vfiprintf_r+0xfe>
 800de34:	2300      	movs	r3, #0
 800de36:	3401      	adds	r4, #1
 800de38:	9305      	str	r3, [sp, #20]
 800de3a:	4619      	mov	r1, r3
 800de3c:	f04f 0c0a 	mov.w	ip, #10
 800de40:	4620      	mov	r0, r4
 800de42:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de46:	3a30      	subs	r2, #48	@ 0x30
 800de48:	2a09      	cmp	r2, #9
 800de4a:	d903      	bls.n	800de54 <_vfiprintf_r+0x1cc>
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d0c6      	beq.n	800ddde <_vfiprintf_r+0x156>
 800de50:	9105      	str	r1, [sp, #20]
 800de52:	e7c4      	b.n	800ddde <_vfiprintf_r+0x156>
 800de54:	fb0c 2101 	mla	r1, ip, r1, r2
 800de58:	4604      	mov	r4, r0
 800de5a:	2301      	movs	r3, #1
 800de5c:	e7f0      	b.n	800de40 <_vfiprintf_r+0x1b8>
 800de5e:	ab03      	add	r3, sp, #12
 800de60:	9300      	str	r3, [sp, #0]
 800de62:	462a      	mov	r2, r5
 800de64:	4b12      	ldr	r3, [pc, #72]	@ (800deb0 <_vfiprintf_r+0x228>)
 800de66:	a904      	add	r1, sp, #16
 800de68:	4630      	mov	r0, r6
 800de6a:	f7fc fc6f 	bl	800a74c <_printf_float>
 800de6e:	4607      	mov	r7, r0
 800de70:	1c78      	adds	r0, r7, #1
 800de72:	d1d6      	bne.n	800de22 <_vfiprintf_r+0x19a>
 800de74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de76:	07d9      	lsls	r1, r3, #31
 800de78:	d405      	bmi.n	800de86 <_vfiprintf_r+0x1fe>
 800de7a:	89ab      	ldrh	r3, [r5, #12]
 800de7c:	059a      	lsls	r2, r3, #22
 800de7e:	d402      	bmi.n	800de86 <_vfiprintf_r+0x1fe>
 800de80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800de82:	f7fd fc41 	bl	800b708 <__retarget_lock_release_recursive>
 800de86:	89ab      	ldrh	r3, [r5, #12]
 800de88:	065b      	lsls	r3, r3, #25
 800de8a:	f53f af1f 	bmi.w	800dccc <_vfiprintf_r+0x44>
 800de8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800de90:	e71e      	b.n	800dcd0 <_vfiprintf_r+0x48>
 800de92:	ab03      	add	r3, sp, #12
 800de94:	9300      	str	r3, [sp, #0]
 800de96:	462a      	mov	r2, r5
 800de98:	4b05      	ldr	r3, [pc, #20]	@ (800deb0 <_vfiprintf_r+0x228>)
 800de9a:	a904      	add	r1, sp, #16
 800de9c:	4630      	mov	r0, r6
 800de9e:	f7fc feed 	bl	800ac7c <_printf_i>
 800dea2:	e7e4      	b.n	800de6e <_vfiprintf_r+0x1e6>
 800dea4:	0800e749 	.word	0x0800e749
 800dea8:	0800e753 	.word	0x0800e753
 800deac:	0800a74d 	.word	0x0800a74d
 800deb0:	0800dc65 	.word	0x0800dc65
 800deb4:	0800e74f 	.word	0x0800e74f

0800deb8 <__swbuf_r>:
 800deb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deba:	460e      	mov	r6, r1
 800debc:	4614      	mov	r4, r2
 800debe:	4605      	mov	r5, r0
 800dec0:	b118      	cbz	r0, 800deca <__swbuf_r+0x12>
 800dec2:	6a03      	ldr	r3, [r0, #32]
 800dec4:	b90b      	cbnz	r3, 800deca <__swbuf_r+0x12>
 800dec6:	f7fd fa99 	bl	800b3fc <__sinit>
 800deca:	69a3      	ldr	r3, [r4, #24]
 800decc:	60a3      	str	r3, [r4, #8]
 800dece:	89a3      	ldrh	r3, [r4, #12]
 800ded0:	071a      	lsls	r2, r3, #28
 800ded2:	d501      	bpl.n	800ded8 <__swbuf_r+0x20>
 800ded4:	6923      	ldr	r3, [r4, #16]
 800ded6:	b943      	cbnz	r3, 800deea <__swbuf_r+0x32>
 800ded8:	4621      	mov	r1, r4
 800deda:	4628      	mov	r0, r5
 800dedc:	f000 f82a 	bl	800df34 <__swsetup_r>
 800dee0:	b118      	cbz	r0, 800deea <__swbuf_r+0x32>
 800dee2:	f04f 37ff 	mov.w	r7, #4294967295
 800dee6:	4638      	mov	r0, r7
 800dee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800deea:	6823      	ldr	r3, [r4, #0]
 800deec:	6922      	ldr	r2, [r4, #16]
 800deee:	1a98      	subs	r0, r3, r2
 800def0:	6963      	ldr	r3, [r4, #20]
 800def2:	b2f6      	uxtb	r6, r6
 800def4:	4283      	cmp	r3, r0
 800def6:	4637      	mov	r7, r6
 800def8:	dc05      	bgt.n	800df06 <__swbuf_r+0x4e>
 800defa:	4621      	mov	r1, r4
 800defc:	4628      	mov	r0, r5
 800defe:	f7ff fded 	bl	800dadc <_fflush_r>
 800df02:	2800      	cmp	r0, #0
 800df04:	d1ed      	bne.n	800dee2 <__swbuf_r+0x2a>
 800df06:	68a3      	ldr	r3, [r4, #8]
 800df08:	3b01      	subs	r3, #1
 800df0a:	60a3      	str	r3, [r4, #8]
 800df0c:	6823      	ldr	r3, [r4, #0]
 800df0e:	1c5a      	adds	r2, r3, #1
 800df10:	6022      	str	r2, [r4, #0]
 800df12:	701e      	strb	r6, [r3, #0]
 800df14:	6962      	ldr	r2, [r4, #20]
 800df16:	1c43      	adds	r3, r0, #1
 800df18:	429a      	cmp	r2, r3
 800df1a:	d004      	beq.n	800df26 <__swbuf_r+0x6e>
 800df1c:	89a3      	ldrh	r3, [r4, #12]
 800df1e:	07db      	lsls	r3, r3, #31
 800df20:	d5e1      	bpl.n	800dee6 <__swbuf_r+0x2e>
 800df22:	2e0a      	cmp	r6, #10
 800df24:	d1df      	bne.n	800dee6 <__swbuf_r+0x2e>
 800df26:	4621      	mov	r1, r4
 800df28:	4628      	mov	r0, r5
 800df2a:	f7ff fdd7 	bl	800dadc <_fflush_r>
 800df2e:	2800      	cmp	r0, #0
 800df30:	d0d9      	beq.n	800dee6 <__swbuf_r+0x2e>
 800df32:	e7d6      	b.n	800dee2 <__swbuf_r+0x2a>

0800df34 <__swsetup_r>:
 800df34:	b538      	push	{r3, r4, r5, lr}
 800df36:	4b29      	ldr	r3, [pc, #164]	@ (800dfdc <__swsetup_r+0xa8>)
 800df38:	4605      	mov	r5, r0
 800df3a:	6818      	ldr	r0, [r3, #0]
 800df3c:	460c      	mov	r4, r1
 800df3e:	b118      	cbz	r0, 800df48 <__swsetup_r+0x14>
 800df40:	6a03      	ldr	r3, [r0, #32]
 800df42:	b90b      	cbnz	r3, 800df48 <__swsetup_r+0x14>
 800df44:	f7fd fa5a 	bl	800b3fc <__sinit>
 800df48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df4c:	0719      	lsls	r1, r3, #28
 800df4e:	d422      	bmi.n	800df96 <__swsetup_r+0x62>
 800df50:	06da      	lsls	r2, r3, #27
 800df52:	d407      	bmi.n	800df64 <__swsetup_r+0x30>
 800df54:	2209      	movs	r2, #9
 800df56:	602a      	str	r2, [r5, #0]
 800df58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df5c:	81a3      	strh	r3, [r4, #12]
 800df5e:	f04f 30ff 	mov.w	r0, #4294967295
 800df62:	e033      	b.n	800dfcc <__swsetup_r+0x98>
 800df64:	0758      	lsls	r0, r3, #29
 800df66:	d512      	bpl.n	800df8e <__swsetup_r+0x5a>
 800df68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800df6a:	b141      	cbz	r1, 800df7e <__swsetup_r+0x4a>
 800df6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800df70:	4299      	cmp	r1, r3
 800df72:	d002      	beq.n	800df7a <__swsetup_r+0x46>
 800df74:	4628      	mov	r0, r5
 800df76:	f7fe fa4f 	bl	800c418 <_free_r>
 800df7a:	2300      	movs	r3, #0
 800df7c:	6363      	str	r3, [r4, #52]	@ 0x34
 800df7e:	89a3      	ldrh	r3, [r4, #12]
 800df80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800df84:	81a3      	strh	r3, [r4, #12]
 800df86:	2300      	movs	r3, #0
 800df88:	6063      	str	r3, [r4, #4]
 800df8a:	6923      	ldr	r3, [r4, #16]
 800df8c:	6023      	str	r3, [r4, #0]
 800df8e:	89a3      	ldrh	r3, [r4, #12]
 800df90:	f043 0308 	orr.w	r3, r3, #8
 800df94:	81a3      	strh	r3, [r4, #12]
 800df96:	6923      	ldr	r3, [r4, #16]
 800df98:	b94b      	cbnz	r3, 800dfae <__swsetup_r+0x7a>
 800df9a:	89a3      	ldrh	r3, [r4, #12]
 800df9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dfa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dfa4:	d003      	beq.n	800dfae <__swsetup_r+0x7a>
 800dfa6:	4621      	mov	r1, r4
 800dfa8:	4628      	mov	r0, r5
 800dfaa:	f000 f88b 	bl	800e0c4 <__smakebuf_r>
 800dfae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfb2:	f013 0201 	ands.w	r2, r3, #1
 800dfb6:	d00a      	beq.n	800dfce <__swsetup_r+0x9a>
 800dfb8:	2200      	movs	r2, #0
 800dfba:	60a2      	str	r2, [r4, #8]
 800dfbc:	6962      	ldr	r2, [r4, #20]
 800dfbe:	4252      	negs	r2, r2
 800dfc0:	61a2      	str	r2, [r4, #24]
 800dfc2:	6922      	ldr	r2, [r4, #16]
 800dfc4:	b942      	cbnz	r2, 800dfd8 <__swsetup_r+0xa4>
 800dfc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dfca:	d1c5      	bne.n	800df58 <__swsetup_r+0x24>
 800dfcc:	bd38      	pop	{r3, r4, r5, pc}
 800dfce:	0799      	lsls	r1, r3, #30
 800dfd0:	bf58      	it	pl
 800dfd2:	6962      	ldrpl	r2, [r4, #20]
 800dfd4:	60a2      	str	r2, [r4, #8]
 800dfd6:	e7f4      	b.n	800dfc2 <__swsetup_r+0x8e>
 800dfd8:	2000      	movs	r0, #0
 800dfda:	e7f7      	b.n	800dfcc <__swsetup_r+0x98>
 800dfdc:	20000198 	.word	0x20000198

0800dfe0 <_raise_r>:
 800dfe0:	291f      	cmp	r1, #31
 800dfe2:	b538      	push	{r3, r4, r5, lr}
 800dfe4:	4605      	mov	r5, r0
 800dfe6:	460c      	mov	r4, r1
 800dfe8:	d904      	bls.n	800dff4 <_raise_r+0x14>
 800dfea:	2316      	movs	r3, #22
 800dfec:	6003      	str	r3, [r0, #0]
 800dfee:	f04f 30ff 	mov.w	r0, #4294967295
 800dff2:	bd38      	pop	{r3, r4, r5, pc}
 800dff4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dff6:	b112      	cbz	r2, 800dffe <_raise_r+0x1e>
 800dff8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dffc:	b94b      	cbnz	r3, 800e012 <_raise_r+0x32>
 800dffe:	4628      	mov	r0, r5
 800e000:	f000 f830 	bl	800e064 <_getpid_r>
 800e004:	4622      	mov	r2, r4
 800e006:	4601      	mov	r1, r0
 800e008:	4628      	mov	r0, r5
 800e00a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e00e:	f000 b817 	b.w	800e040 <_kill_r>
 800e012:	2b01      	cmp	r3, #1
 800e014:	d00a      	beq.n	800e02c <_raise_r+0x4c>
 800e016:	1c59      	adds	r1, r3, #1
 800e018:	d103      	bne.n	800e022 <_raise_r+0x42>
 800e01a:	2316      	movs	r3, #22
 800e01c:	6003      	str	r3, [r0, #0]
 800e01e:	2001      	movs	r0, #1
 800e020:	e7e7      	b.n	800dff2 <_raise_r+0x12>
 800e022:	2100      	movs	r1, #0
 800e024:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e028:	4620      	mov	r0, r4
 800e02a:	4798      	blx	r3
 800e02c:	2000      	movs	r0, #0
 800e02e:	e7e0      	b.n	800dff2 <_raise_r+0x12>

0800e030 <raise>:
 800e030:	4b02      	ldr	r3, [pc, #8]	@ (800e03c <raise+0xc>)
 800e032:	4601      	mov	r1, r0
 800e034:	6818      	ldr	r0, [r3, #0]
 800e036:	f7ff bfd3 	b.w	800dfe0 <_raise_r>
 800e03a:	bf00      	nop
 800e03c:	20000198 	.word	0x20000198

0800e040 <_kill_r>:
 800e040:	b538      	push	{r3, r4, r5, lr}
 800e042:	4d07      	ldr	r5, [pc, #28]	@ (800e060 <_kill_r+0x20>)
 800e044:	2300      	movs	r3, #0
 800e046:	4604      	mov	r4, r0
 800e048:	4608      	mov	r0, r1
 800e04a:	4611      	mov	r1, r2
 800e04c:	602b      	str	r3, [r5, #0]
 800e04e:	f7f7 faa8 	bl	80055a2 <_kill>
 800e052:	1c43      	adds	r3, r0, #1
 800e054:	d102      	bne.n	800e05c <_kill_r+0x1c>
 800e056:	682b      	ldr	r3, [r5, #0]
 800e058:	b103      	cbz	r3, 800e05c <_kill_r+0x1c>
 800e05a:	6023      	str	r3, [r4, #0]
 800e05c:	bd38      	pop	{r3, r4, r5, pc}
 800e05e:	bf00      	nop
 800e060:	20003830 	.word	0x20003830

0800e064 <_getpid_r>:
 800e064:	f7f7 ba95 	b.w	8005592 <_getpid>

0800e068 <_malloc_usable_size_r>:
 800e068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e06c:	1f18      	subs	r0, r3, #4
 800e06e:	2b00      	cmp	r3, #0
 800e070:	bfbc      	itt	lt
 800e072:	580b      	ldrlt	r3, [r1, r0]
 800e074:	18c0      	addlt	r0, r0, r3
 800e076:	4770      	bx	lr

0800e078 <__swhatbuf_r>:
 800e078:	b570      	push	{r4, r5, r6, lr}
 800e07a:	460c      	mov	r4, r1
 800e07c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e080:	2900      	cmp	r1, #0
 800e082:	b096      	sub	sp, #88	@ 0x58
 800e084:	4615      	mov	r5, r2
 800e086:	461e      	mov	r6, r3
 800e088:	da0d      	bge.n	800e0a6 <__swhatbuf_r+0x2e>
 800e08a:	89a3      	ldrh	r3, [r4, #12]
 800e08c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e090:	f04f 0100 	mov.w	r1, #0
 800e094:	bf14      	ite	ne
 800e096:	2340      	movne	r3, #64	@ 0x40
 800e098:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e09c:	2000      	movs	r0, #0
 800e09e:	6031      	str	r1, [r6, #0]
 800e0a0:	602b      	str	r3, [r5, #0]
 800e0a2:	b016      	add	sp, #88	@ 0x58
 800e0a4:	bd70      	pop	{r4, r5, r6, pc}
 800e0a6:	466a      	mov	r2, sp
 800e0a8:	f000 f848 	bl	800e13c <_fstat_r>
 800e0ac:	2800      	cmp	r0, #0
 800e0ae:	dbec      	blt.n	800e08a <__swhatbuf_r+0x12>
 800e0b0:	9901      	ldr	r1, [sp, #4]
 800e0b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e0b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e0ba:	4259      	negs	r1, r3
 800e0bc:	4159      	adcs	r1, r3
 800e0be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e0c2:	e7eb      	b.n	800e09c <__swhatbuf_r+0x24>

0800e0c4 <__smakebuf_r>:
 800e0c4:	898b      	ldrh	r3, [r1, #12]
 800e0c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e0c8:	079d      	lsls	r5, r3, #30
 800e0ca:	4606      	mov	r6, r0
 800e0cc:	460c      	mov	r4, r1
 800e0ce:	d507      	bpl.n	800e0e0 <__smakebuf_r+0x1c>
 800e0d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e0d4:	6023      	str	r3, [r4, #0]
 800e0d6:	6123      	str	r3, [r4, #16]
 800e0d8:	2301      	movs	r3, #1
 800e0da:	6163      	str	r3, [r4, #20]
 800e0dc:	b003      	add	sp, #12
 800e0de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0e0:	ab01      	add	r3, sp, #4
 800e0e2:	466a      	mov	r2, sp
 800e0e4:	f7ff ffc8 	bl	800e078 <__swhatbuf_r>
 800e0e8:	9f00      	ldr	r7, [sp, #0]
 800e0ea:	4605      	mov	r5, r0
 800e0ec:	4639      	mov	r1, r7
 800e0ee:	4630      	mov	r0, r6
 800e0f0:	f7fe fd40 	bl	800cb74 <_malloc_r>
 800e0f4:	b948      	cbnz	r0, 800e10a <__smakebuf_r+0x46>
 800e0f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0fa:	059a      	lsls	r2, r3, #22
 800e0fc:	d4ee      	bmi.n	800e0dc <__smakebuf_r+0x18>
 800e0fe:	f023 0303 	bic.w	r3, r3, #3
 800e102:	f043 0302 	orr.w	r3, r3, #2
 800e106:	81a3      	strh	r3, [r4, #12]
 800e108:	e7e2      	b.n	800e0d0 <__smakebuf_r+0xc>
 800e10a:	89a3      	ldrh	r3, [r4, #12]
 800e10c:	6020      	str	r0, [r4, #0]
 800e10e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e112:	81a3      	strh	r3, [r4, #12]
 800e114:	9b01      	ldr	r3, [sp, #4]
 800e116:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e11a:	b15b      	cbz	r3, 800e134 <__smakebuf_r+0x70>
 800e11c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e120:	4630      	mov	r0, r6
 800e122:	f000 f81d 	bl	800e160 <_isatty_r>
 800e126:	b128      	cbz	r0, 800e134 <__smakebuf_r+0x70>
 800e128:	89a3      	ldrh	r3, [r4, #12]
 800e12a:	f023 0303 	bic.w	r3, r3, #3
 800e12e:	f043 0301 	orr.w	r3, r3, #1
 800e132:	81a3      	strh	r3, [r4, #12]
 800e134:	89a3      	ldrh	r3, [r4, #12]
 800e136:	431d      	orrs	r5, r3
 800e138:	81a5      	strh	r5, [r4, #12]
 800e13a:	e7cf      	b.n	800e0dc <__smakebuf_r+0x18>

0800e13c <_fstat_r>:
 800e13c:	b538      	push	{r3, r4, r5, lr}
 800e13e:	4d07      	ldr	r5, [pc, #28]	@ (800e15c <_fstat_r+0x20>)
 800e140:	2300      	movs	r3, #0
 800e142:	4604      	mov	r4, r0
 800e144:	4608      	mov	r0, r1
 800e146:	4611      	mov	r1, r2
 800e148:	602b      	str	r3, [r5, #0]
 800e14a:	f7f7 fa8a 	bl	8005662 <_fstat>
 800e14e:	1c43      	adds	r3, r0, #1
 800e150:	d102      	bne.n	800e158 <_fstat_r+0x1c>
 800e152:	682b      	ldr	r3, [r5, #0]
 800e154:	b103      	cbz	r3, 800e158 <_fstat_r+0x1c>
 800e156:	6023      	str	r3, [r4, #0]
 800e158:	bd38      	pop	{r3, r4, r5, pc}
 800e15a:	bf00      	nop
 800e15c:	20003830 	.word	0x20003830

0800e160 <_isatty_r>:
 800e160:	b538      	push	{r3, r4, r5, lr}
 800e162:	4d06      	ldr	r5, [pc, #24]	@ (800e17c <_isatty_r+0x1c>)
 800e164:	2300      	movs	r3, #0
 800e166:	4604      	mov	r4, r0
 800e168:	4608      	mov	r0, r1
 800e16a:	602b      	str	r3, [r5, #0]
 800e16c:	f7f7 fa89 	bl	8005682 <_isatty>
 800e170:	1c43      	adds	r3, r0, #1
 800e172:	d102      	bne.n	800e17a <_isatty_r+0x1a>
 800e174:	682b      	ldr	r3, [r5, #0]
 800e176:	b103      	cbz	r3, 800e17a <_isatty_r+0x1a>
 800e178:	6023      	str	r3, [r4, #0]
 800e17a:	bd38      	pop	{r3, r4, r5, pc}
 800e17c:	20003830 	.word	0x20003830

0800e180 <_init>:
 800e180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e182:	bf00      	nop
 800e184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e186:	bc08      	pop	{r3}
 800e188:	469e      	mov	lr, r3
 800e18a:	4770      	bx	lr

0800e18c <_fini>:
 800e18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e18e:	bf00      	nop
 800e190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e192:	bc08      	pop	{r3}
 800e194:	469e      	mov	lr, r3
 800e196:	4770      	bx	lr
