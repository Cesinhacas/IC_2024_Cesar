
MCS_m7_certo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015f70  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000be0  08016140  08016140  00017140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016d20  08016d20  000181f8  2**0
                  CONTENTS
  4 .ARM          00000008  08016d20  08016d20  00017d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016d28  08016d28  000181f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016d28  08016d28  00017d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016d2c  08016d2c  00017d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  08016d30  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006f9c  200001f8  08016f28  000181f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20007194  08016f28  00019194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000181f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c53e  00000000  00000000  00018228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002508  00000000  00000000  00024766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  00026c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008bd  00000000  00000000  000277f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027ecf  00000000  00000000  000280b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f40  00000000  00000000  0004ff84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7422  00000000  00000000  00064ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014c2e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045a4  00000000  00000000  0014c32c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001508d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016128 	.word	0x08016128

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	08016128 	.word	0x08016128

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <inverter_matriz>:
#include <stdlib.h>
#include <math.h>
#include "calib.h"

void inverter_matriz(double matriz[N][N], double inversa[N][N])
{
 8001024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001026:	b08d      	sub	sp, #52	@ 0x34
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
    // Inicializando a matriz identidade na matriz inversa
    for (int i = 0; i < N; i++) {
 800102e:	2300      	movs	r3, #0
 8001030:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001032:	e031      	b.n	8001098 <inverter_matriz+0x74>
        for (int j = 0; j < N; j++) {
 8001034:	2300      	movs	r3, #0
 8001036:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001038:	e028      	b.n	800108c <inverter_matriz+0x68>
            if (i == j) {
 800103a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800103c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800103e:	429a      	cmp	r2, r3
 8001040:	d110      	bne.n	8001064 <inverter_matriz+0x40>
                inversa[i][j] = 1;
 8001042:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001044:	4613      	mov	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	4413      	add	r3, r2
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	461a      	mov	r2, r3
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	441a      	add	r2, r3
 8001052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	18d1      	adds	r1, r2, r3
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	4b8e      	ldr	r3, [pc, #568]	@ (8001298 <inverter_matriz+0x274>)
 800105e:	e9c1 2300 	strd	r2, r3, [r1]
 8001062:	e010      	b.n	8001086 <inverter_matriz+0x62>
            } else {
                inversa[i][j] = 0;
 8001064:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001066:	4613      	mov	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	4413      	add	r3, r2
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	461a      	mov	r2, r3
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	441a      	add	r2, r3
 8001074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	18d1      	adds	r1, r2, r3
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	f04f 0300 	mov.w	r3, #0
 8001082:	e9c1 2300 	strd	r2, r3, [r1]
        for (int j = 0; j < N; j++) {
 8001086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001088:	3301      	adds	r3, #1
 800108a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800108c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800108e:	2b08      	cmp	r3, #8
 8001090:	ddd3      	ble.n	800103a <inverter_matriz+0x16>
    for (int i = 0; i < N; i++) {
 8001092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001094:	3301      	adds	r3, #1
 8001096:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800109a:	2b08      	cmp	r3, #8
 800109c:	ddca      	ble.n	8001034 <inverter_matriz+0x10>
            }
        }
    }

    // Aplicando o método de Gauss-Jordan
    for (int i = 0; i < N; i++)
 800109e:	2300      	movs	r3, #0
 80010a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80010a2:	e0ef      	b.n	8001284 <inverter_matriz+0x260>
    {
        double pivot = matriz[i][i];
 80010a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010a6:	4613      	mov	r3, r2
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	4413      	add	r3, r2
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	461a      	mov	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	441a      	add	r2, r3
 80010b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	4413      	add	r3, r2
 80010ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010be:	e9c7 2304 	strd	r2, r3, [r7, #16]
        for (int j = 0; j < N; j++)
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
 80010c6:	e042      	b.n	800114e <inverter_matriz+0x12a>
        {
            matriz[i][j] /= pivot;
 80010c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010ca:	4613      	mov	r3, r2
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	4413      	add	r3, r2
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	461a      	mov	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	441a      	add	r2, r3
 80010d8:	6a3b      	ldr	r3, [r7, #32]
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	4413      	add	r3, r2
 80010de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010e4:	4613      	mov	r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	4413      	add	r3, r2
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	461a      	mov	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	189c      	adds	r4, r3, r2
 80010f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80010f6:	f7ff fbc9 	bl	800088c <__aeabi_ddiv>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	6a39      	ldr	r1, [r7, #32]
 8001100:	00c9      	lsls	r1, r1, #3
 8001102:	4421      	add	r1, r4
 8001104:	e9c1 2300 	strd	r2, r3, [r1]
            inversa[i][j] /= pivot;
 8001108:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800110a:	4613      	mov	r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	4413      	add	r3, r2
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	461a      	mov	r2, r3
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	441a      	add	r2, r3
 8001118:	6a3b      	ldr	r3, [r7, #32]
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	4413      	add	r3, r2
 800111e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001124:	4613      	mov	r3, r2
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	4413      	add	r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	461a      	mov	r2, r3
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	189c      	adds	r4, r3, r2
 8001132:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001136:	f7ff fba9 	bl	800088c <__aeabi_ddiv>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	6a39      	ldr	r1, [r7, #32]
 8001140:	00c9      	lsls	r1, r1, #3
 8001142:	4421      	add	r1, r4
 8001144:	e9c1 2300 	strd	r2, r3, [r1]
        for (int j = 0; j < N; j++)
 8001148:	6a3b      	ldr	r3, [r7, #32]
 800114a:	3301      	adds	r3, #1
 800114c:	623b      	str	r3, [r7, #32]
 800114e:	6a3b      	ldr	r3, [r7, #32]
 8001150:	2b08      	cmp	r3, #8
 8001152:	ddb9      	ble.n	80010c8 <inverter_matriz+0xa4>
        }

        for (int k = 0; k < N; k++)
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]
 8001158:	e08d      	b.n	8001276 <inverter_matriz+0x252>
        {
            if (k != i)
 800115a:	69fa      	ldr	r2, [r7, #28]
 800115c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115e:	429a      	cmp	r2, r3
 8001160:	f000 8086 	beq.w	8001270 <inverter_matriz+0x24c>
            {
                double fator = matriz[k][i];
 8001164:	69fa      	ldr	r2, [r7, #28]
 8001166:	4613      	mov	r3, r2
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	4413      	add	r3, r2
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	461a      	mov	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	441a      	add	r2, r3
 8001174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	4413      	add	r3, r2
 800117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117e:	e9c7 2302 	strd	r2, r3, [r7, #8]
                for (int j = 0; j < N; j++)
 8001182:	2300      	movs	r3, #0
 8001184:	61bb      	str	r3, [r7, #24]
 8001186:	e070      	b.n	800126a <inverter_matriz+0x246>
                {
                    matriz[k][j] -= fator * matriz[i][j];
 8001188:	69fa      	ldr	r2, [r7, #28]
 800118a:	4613      	mov	r3, r2
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	4413      	add	r3, r2
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	461a      	mov	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	441a      	add	r2, r3
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	4413      	add	r3, r2
 800119e:	e9d3 4500 	ldrd	r4, r5, [r3]
 80011a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011a4:	4613      	mov	r3, r2
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	4413      	add	r3, r2
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	461a      	mov	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	441a      	add	r2, r3
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	4413      	add	r3, r2
 80011b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011c0:	f7ff fa3a 	bl	8000638 <__aeabi_dmul>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	69fa      	ldr	r2, [r7, #28]
 80011ce:	4613      	mov	r3, r2
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	4413      	add	r3, r2
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	461a      	mov	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	189e      	adds	r6, r3, r2
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4620      	mov	r0, r4
 80011e2:	4629      	mov	r1, r5
 80011e4:	f7ff f870 	bl	80002c8 <__aeabi_dsub>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	69b9      	ldr	r1, [r7, #24]
 80011ee:	00c9      	lsls	r1, r1, #3
 80011f0:	4431      	add	r1, r6
 80011f2:	e9c1 2300 	strd	r2, r3, [r1]
                    inversa[k][j] -= fator * inversa[i][j];
 80011f6:	69fa      	ldr	r2, [r7, #28]
 80011f8:	4613      	mov	r3, r2
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	4413      	add	r3, r2
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	461a      	mov	r2, r3
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	441a      	add	r2, r3
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	4413      	add	r3, r2
 800120c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001210:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001212:	4613      	mov	r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	4413      	add	r3, r2
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	461a      	mov	r2, r3
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	441a      	add	r2, r3
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	4413      	add	r3, r2
 8001226:	e9d3 0100 	ldrd	r0, r1, [r3]
 800122a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800122e:	f7ff fa03 	bl	8000638 <__aeabi_dmul>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4610      	mov	r0, r2
 8001238:	4619      	mov	r1, r3
 800123a:	69fa      	ldr	r2, [r7, #28]
 800123c:	4613      	mov	r3, r2
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	4413      	add	r3, r2
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	461a      	mov	r2, r3
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	189e      	adds	r6, r3, r2
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4620      	mov	r0, r4
 8001250:	4629      	mov	r1, r5
 8001252:	f7ff f839 	bl	80002c8 <__aeabi_dsub>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	69b9      	ldr	r1, [r7, #24]
 800125c:	00c9      	lsls	r1, r1, #3
 800125e:	4431      	add	r1, r6
 8001260:	e9c1 2300 	strd	r2, r3, [r1]
                for (int j = 0; j < N; j++)
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	3301      	adds	r3, #1
 8001268:	61bb      	str	r3, [r7, #24]
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	2b08      	cmp	r3, #8
 800126e:	dd8b      	ble.n	8001188 <inverter_matriz+0x164>
        for (int k = 0; k < N; k++)
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	3301      	adds	r3, #1
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	2b08      	cmp	r3, #8
 800127a:	f77f af6e 	ble.w	800115a <inverter_matriz+0x136>
    for (int i = 0; i < N; i++)
 800127e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001280:	3301      	adds	r3, #1
 8001282:	627b      	str	r3, [r7, #36]	@ 0x24
 8001284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001286:	2b08      	cmp	r3, #8
 8001288:	f77f af0c 	ble.w	80010a4 <inverter_matriz+0x80>
                }
            }
        }
    }
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	3734      	adds	r7, #52	@ 0x34
 8001292:	46bd      	mov	sp, r7
 8001294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001296:	bf00      	nop
 8001298:	3ff00000 	.word	0x3ff00000
 800129c:	00000000 	.word	0x00000000

080012a0 <NLLS>:


uint8_t NLLS(double *mx, double *my, double *mz, double *p)
{
 80012a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012a4:	f5ad 3d38 	sub.w	sp, sp, #188416	@ 0x2e000
 80012a8:	b09d      	sub	sp, #116	@ 0x74
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 80012b0:	f844 0c34 	str.w	r0, [r4, #-52]
 80012b4:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 80012b8:	f840 1c38 	str.w	r1, [r0, #-56]
 80012bc:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80012c0:	f841 2c3c 	str.w	r2, [r1, #-60]
 80012c4:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80012c8:	f842 3c40 	str.w	r3, [r2, #-64]
	uint8_t passo = 0, loop = 1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	4a6c      	ldr	r2, [pc, #432]	@ (8001480 <NLLS+0x1e0>)
 80012d0:	443a      	add	r2, r7
 80012d2:	7013      	strb	r3, [r2, #0]
 80012d4:	2301      	movs	r3, #1
 80012d6:	4a6b      	ldr	r2, [pc, #428]	@ (8001484 <NLLS+0x1e4>)
 80012d8:	443a      	add	r2, r7
 80012da:	7013      	strb	r3, [r2, #0]
	double sf = 1;
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	4b69      	ldr	r3, [pc, #420]	@ (8001488 <NLLS+0x1e8>)
 80012e2:	496a      	ldr	r1, [pc, #424]	@ (800148c <NLLS+0x1ec>)
 80012e4:	4439      	add	r1, r7
 80012e6:	e9c1 2300 	strd	r2, r3, [r1]
	double p0[9] = {1, 1, 1, 0, 0, 0, 0, 0, 0}, Be[tam], e[tam], f[tam], sx, sy, sz, bx, by, bz, rho, phi, lambida, error_ant, J, delta_J, mat_H[N][tam];
 80012ea:	4b69      	ldr	r3, [pc, #420]	@ (8001490 <NLLS+0x1f0>)
 80012ec:	443b      	add	r3, r7
 80012ee:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80012f2:	4a68      	ldr	r2, [pc, #416]	@ (8001494 <NLLS+0x1f4>)
 80012f4:	4618      	mov	r0, r3
 80012f6:	4611      	mov	r1, r2
 80012f8:	2348      	movs	r3, #72	@ 0x48
 80012fa:	461a      	mov	r2, r3
 80012fc:	f010 feb5 	bl	801206a <memcpy>
	double sin_phi, sin_rho, sin_lambda, cos_phi, cos_rho, cos_lambda;
	double Ht_H[N][N], Ht_e[N], inv[N][N], mul_mat[N][tam];

	for (int i=0; i < tam; i++)
 8001300:	2300      	movs	r3, #0
 8001302:	4a65      	ldr	r2, [pc, #404]	@ (8001498 <NLLS+0x1f8>)
 8001304:	443a      	add	r2, r7
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	e015      	b.n	8001336 <NLLS+0x96>
	{
		Be[i] = 1*sf;
 800130a:	4b64      	ldr	r3, [pc, #400]	@ (800149c <NLLS+0x1fc>)
 800130c:	443b      	add	r3, r7
 800130e:	f5a3 7276 	sub.w	r2, r3, #984	@ 0x3d8
 8001312:	4b61      	ldr	r3, [pc, #388]	@ (8001498 <NLLS+0x1f8>)
 8001314:	443b      	add	r3, r7
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	18d1      	adds	r1, r2, r3
 800131c:	4b5b      	ldr	r3, [pc, #364]	@ (800148c <NLLS+0x1ec>)
 800131e:	443b      	add	r3, r7
 8001320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001324:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i=0; i < tam; i++)
 8001328:	4b5b      	ldr	r3, [pc, #364]	@ (8001498 <NLLS+0x1f8>)
 800132a:	443b      	add	r3, r7
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	3301      	adds	r3, #1
 8001330:	4a59      	ldr	r2, [pc, #356]	@ (8001498 <NLLS+0x1f8>)
 8001332:	443a      	add	r2, r7
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	4b58      	ldr	r3, [pc, #352]	@ (8001498 <NLLS+0x1f8>)
 8001338:	443b      	add	r3, r7
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8001340:	dbe3      	blt.n	800130a <NLLS+0x6a>
	}

	while(loop == 1)
 8001342:	f004 be7b 	b.w	800603c <NLLS+0x4d9c>
	{
		sx = p0[0];
 8001346:	4b52      	ldr	r3, [pc, #328]	@ (8001490 <NLLS+0x1f0>)
 8001348:	443b      	add	r3, r7
 800134a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001352:	4953      	ldr	r1, [pc, #332]	@ (80014a0 <NLLS+0x200>)
 8001354:	4439      	add	r1, r7
 8001356:	e9c1 2300 	strd	r2, r3, [r1]
		sy = p0[1];
 800135a:	4b4d      	ldr	r3, [pc, #308]	@ (8001490 <NLLS+0x1f0>)
 800135c:	443b      	add	r3, r7
 800135e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001362:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001366:	494f      	ldr	r1, [pc, #316]	@ (80014a4 <NLLS+0x204>)
 8001368:	4439      	add	r1, r7
 800136a:	e9c1 2300 	strd	r2, r3, [r1]
		sz = p0[2];
 800136e:	4b48      	ldr	r3, [pc, #288]	@ (8001490 <NLLS+0x1f0>)
 8001370:	443b      	add	r3, r7
 8001372:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001376:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800137a:	494b      	ldr	r1, [pc, #300]	@ (80014a8 <NLLS+0x208>)
 800137c:	4439      	add	r1, r7
 800137e:	e9c1 2300 	strd	r2, r3, [r1]
		bx = p0[3];
 8001382:	4b43      	ldr	r3, [pc, #268]	@ (8001490 <NLLS+0x1f0>)
 8001384:	443b      	add	r3, r7
 8001386:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800138a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800138e:	4947      	ldr	r1, [pc, #284]	@ (80014ac <NLLS+0x20c>)
 8001390:	4439      	add	r1, r7
 8001392:	e9c1 2300 	strd	r2, r3, [r1]
		by = p0[4];
 8001396:	4b3e      	ldr	r3, [pc, #248]	@ (8001490 <NLLS+0x1f0>)
 8001398:	443b      	add	r3, r7
 800139a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800139e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80013a2:	4943      	ldr	r1, [pc, #268]	@ (80014b0 <NLLS+0x210>)
 80013a4:	4439      	add	r1, r7
 80013a6:	e9c1 2300 	strd	r2, r3, [r1]
		bz = p0[5];
 80013aa:	4b39      	ldr	r3, [pc, #228]	@ (8001490 <NLLS+0x1f0>)
 80013ac:	443b      	add	r3, r7
 80013ae:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80013b2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80013b6:	493f      	ldr	r1, [pc, #252]	@ (80014b4 <NLLS+0x214>)
 80013b8:	4439      	add	r1, r7
 80013ba:	e9c1 2300 	strd	r2, r3, [r1]
		rho = p0[6];
 80013be:	4b34      	ldr	r3, [pc, #208]	@ (8001490 <NLLS+0x1f0>)
 80013c0:	443b      	add	r3, r7
 80013c2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80013c6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80013ca:	493b      	ldr	r1, [pc, #236]	@ (80014b8 <NLLS+0x218>)
 80013cc:	4439      	add	r1, r7
 80013ce:	e9c1 2300 	strd	r2, r3, [r1]
		phi = p0[7];
 80013d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001490 <NLLS+0x1f0>)
 80013d4:	443b      	add	r3, r7
 80013d6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80013da:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80013de:	4937      	ldr	r1, [pc, #220]	@ (80014bc <NLLS+0x21c>)
 80013e0:	4439      	add	r1, r7
 80013e2:	e9c1 2300 	strd	r2, r3, [r1]
		lambida = p0[8];
 80013e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001490 <NLLS+0x1f0>)
 80013e8:	443b      	add	r3, r7
 80013ea:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80013ee:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80013f2:	4933      	ldr	r1, [pc, #204]	@ (80014c0 <NLLS+0x220>)
 80013f4:	4439      	add	r1, r7
 80013f6:	e9c1 2300 	strd	r2, r3, [r1]

		sin_phi = sin(phi);//phi - (phi*phi*phi)/6;// + (phi*phi*phi*phi*phi)/120;
 80013fa:	4b30      	ldr	r3, [pc, #192]	@ (80014bc <NLLS+0x21c>)
 80013fc:	443b      	add	r3, r7
 80013fe:	ed93 0b00 	vldr	d0, [r3]
 8001402:	f013 fd8d 	bl	8014f20 <sin>
 8001406:	4b2f      	ldr	r3, [pc, #188]	@ (80014c4 <NLLS+0x224>)
 8001408:	443b      	add	r3, r7
 800140a:	ed83 0b00 	vstr	d0, [r3]
		sin_rho = sin(rho);//rho - (rho*rho*rho)/6;// + (rho*rho*rho*rho*rho)/120;
 800140e:	4b2a      	ldr	r3, [pc, #168]	@ (80014b8 <NLLS+0x218>)
 8001410:	443b      	add	r3, r7
 8001412:	ed93 0b00 	vldr	d0, [r3]
 8001416:	f013 fd83 	bl	8014f20 <sin>
 800141a:	4b2b      	ldr	r3, [pc, #172]	@ (80014c8 <NLLS+0x228>)
 800141c:	443b      	add	r3, r7
 800141e:	ed83 0b00 	vstr	d0, [r3]
		sin_lambda = sin(lambida);//lambida - (lambida*lambida*lambida)/6;// + (lambida*lambida*lambida*lambida*lambida)/120;
 8001422:	4b27      	ldr	r3, [pc, #156]	@ (80014c0 <NLLS+0x220>)
 8001424:	443b      	add	r3, r7
 8001426:	ed93 0b00 	vldr	d0, [r3]
 800142a:	f013 fd79 	bl	8014f20 <sin>
 800142e:	4b27      	ldr	r3, [pc, #156]	@ (80014cc <NLLS+0x22c>)
 8001430:	443b      	add	r3, r7
 8001432:	ed83 0b00 	vstr	d0, [r3]
		cos_phi = cos(phi);//1 - (phi*phi)/2;// + (phi*phi*phi*phi)/24;
 8001436:	4b21      	ldr	r3, [pc, #132]	@ (80014bc <NLLS+0x21c>)
 8001438:	443b      	add	r3, r7
 800143a:	ed93 0b00 	vldr	d0, [r3]
 800143e:	f013 fd13 	bl	8014e68 <cos>
 8001442:	4b23      	ldr	r3, [pc, #140]	@ (80014d0 <NLLS+0x230>)
 8001444:	443b      	add	r3, r7
 8001446:	ed83 0b00 	vstr	d0, [r3]
		cos_rho = cos(rho);///1 - (rho*rho)/2;// + (rho*rho*rho*rho)/24;
 800144a:	4b1b      	ldr	r3, [pc, #108]	@ (80014b8 <NLLS+0x218>)
 800144c:	443b      	add	r3, r7
 800144e:	ed93 0b00 	vldr	d0, [r3]
 8001452:	f013 fd09 	bl	8014e68 <cos>
 8001456:	4b1f      	ldr	r3, [pc, #124]	@ (80014d4 <NLLS+0x234>)
 8001458:	443b      	add	r3, r7
 800145a:	ed83 0b00 	vstr	d0, [r3]
		cos_lambda = cos(lambida);//1 - (lambida*lambida)/2;// + (lambida*lambida*lambida*lambida)/24;
 800145e:	4b18      	ldr	r3, [pc, #96]	@ (80014c0 <NLLS+0x220>)
 8001460:	443b      	add	r3, r7
 8001462:	ed93 0b00 	vldr	d0, [r3]
 8001466:	f013 fcff 	bl	8014e68 <cos>
 800146a:	4b1b      	ldr	r3, [pc, #108]	@ (80014d8 <NLLS+0x238>)
 800146c:	443b      	add	r3, r7
 800146e:	ed83 0b00 	vstr	d0, [r3]

		for(int i=0; i < tam; i++)
 8001472:	2300      	movs	r3, #0
 8001474:	4a19      	ldr	r2, [pc, #100]	@ (80014dc <NLLS+0x23c>)
 8001476:	443a      	add	r2, r7
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	f004 baec 	b.w	8005a56 <NLLS+0x47b6>
 800147e:	bf00      	nop
 8001480:	0002e06f 	.word	0x0002e06f
 8001484:	0002e06e 	.word	0x0002e06e
 8001488:	3ff00000 	.word	0x3ff00000
 800148c:	0002dfd8 	.word	0x0002dfd8
 8001490:	0002e070 	.word	0x0002e070
 8001494:	08016140 	.word	0x08016140
 8001498:	0002e00c 	.word	0x0002e00c
 800149c:	0002c070 	.word	0x0002c070
 80014a0:	0002e060 	.word	0x0002e060
 80014a4:	0002e058 	.word	0x0002e058
 80014a8:	0002e050 	.word	0x0002e050
 80014ac:	0002e048 	.word	0x0002e048
 80014b0:	0002e040 	.word	0x0002e040
 80014b4:	0002e038 	.word	0x0002e038
 80014b8:	0002e030 	.word	0x0002e030
 80014bc:	0002e028 	.word	0x0002e028
 80014c0:	0002e020 	.word	0x0002e020
 80014c4:	0002dfd0 	.word	0x0002dfd0
 80014c8:	0002dfc8 	.word	0x0002dfc8
 80014cc:	0002dfc0 	.word	0x0002dfc0
 80014d0:	0002dfb8 	.word	0x0002dfb8
 80014d4:	0002dfb0 	.word	0x0002dfb0
 80014d8:	0002dfa8 	.word	0x0002dfa8
 80014dc:	0002e008 	.word	0x0002e008
		{
			f[i] = ((mx[i]-bx)*(mx[i]-bx))/(sx*sx) + ((sx*(my[i]-by) - sy*sin_rho*(mx[i]-bx))*((sx*(my[i]-by) - sy*sin_rho*(mx[i]-bx))))/((sx*sy*cos_rho)*(sx*sy*cos_rho)) + ((sx*sy*cos_rho*(mz[i]-bz) - sx*sz*sin_lambda*(my[i]-by) + sy*sz*(sin_lambda*sin_rho - cos_rho*sin_phi*cos_lambda)*(mx[i]-bx))*(sx*sy*cos_rho*(mz[i]-bz) - sx*sz*sin_lambda*(my[i]-by) + sy*sz*(sin_lambda*sin_rho - cos_rho*sin_phi*cos_lambda)*(mx[i]-bx)))/((sx*sy*sz*cos_rho*cos_phi*cos_lambda)*(sx*sy*sz*cos_rho*cos_phi*cos_lambda));
 80014e0:	4bb4      	ldr	r3, [pc, #720]	@ (80017b4 <NLLS+0x514>)
 80014e2:	443b      	add	r3, r7
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80014ec:	f852 2c34 	ldr.w	r2, [r2, #-52]
 80014f0:	4413      	add	r3, r2
 80014f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014f6:	4bb0      	ldr	r3, [pc, #704]	@ (80017b8 <NLLS+0x518>)
 80014f8:	443b      	add	r3, r7
 80014fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fe:	f7fe fee3 	bl	80002c8 <__aeabi_dsub>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4614      	mov	r4, r2
 8001508:	461d      	mov	r5, r3
 800150a:	4baa      	ldr	r3, [pc, #680]	@ (80017b4 <NLLS+0x514>)
 800150c:	443b      	add	r3, r7
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8001516:	f852 2c34 	ldr.w	r2, [r2, #-52]
 800151a:	4413      	add	r3, r2
 800151c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001520:	4ba5      	ldr	r3, [pc, #660]	@ (80017b8 <NLLS+0x518>)
 8001522:	443b      	add	r3, r7
 8001524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001528:	f7fe fece 	bl	80002c8 <__aeabi_dsub>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4620      	mov	r0, r4
 8001532:	4629      	mov	r1, r5
 8001534:	f7ff f880 	bl	8000638 <__aeabi_dmul>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4614      	mov	r4, r2
 800153e:	461d      	mov	r5, r3
 8001540:	4b9e      	ldr	r3, [pc, #632]	@ (80017bc <NLLS+0x51c>)
 8001542:	443b      	add	r3, r7
 8001544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001548:	499c      	ldr	r1, [pc, #624]	@ (80017bc <NLLS+0x51c>)
 800154a:	4439      	add	r1, r7
 800154c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001550:	f7ff f872 	bl	8000638 <__aeabi_dmul>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4620      	mov	r0, r4
 800155a:	4629      	mov	r1, r5
 800155c:	f7ff f996 	bl	800088c <__aeabi_ddiv>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001568:	4b92      	ldr	r3, [pc, #584]	@ (80017b4 <NLLS+0x514>)
 800156a:	443b      	add	r3, r7
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8001574:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8001578:	4413      	add	r3, r2
 800157a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800157e:	4b90      	ldr	r3, [pc, #576]	@ (80017c0 <NLLS+0x520>)
 8001580:	443b      	add	r3, r7
 8001582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001586:	f7fe fe9f 	bl	80002c8 <__aeabi_dsub>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4610      	mov	r0, r2
 8001590:	4619      	mov	r1, r3
 8001592:	4b8a      	ldr	r3, [pc, #552]	@ (80017bc <NLLS+0x51c>)
 8001594:	443b      	add	r3, r7
 8001596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159a:	f7ff f84d 	bl	8000638 <__aeabi_dmul>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4690      	mov	r8, r2
 80015a4:	4699      	mov	r9, r3
 80015a6:	4b87      	ldr	r3, [pc, #540]	@ (80017c4 <NLLS+0x524>)
 80015a8:	443b      	add	r3, r7
 80015aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ae:	4986      	ldr	r1, [pc, #536]	@ (80017c8 <NLLS+0x528>)
 80015b0:	4439      	add	r1, r7
 80015b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015b6:	f7ff f83f 	bl	8000638 <__aeabi_dmul>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4614      	mov	r4, r2
 80015c0:	461d      	mov	r5, r3
 80015c2:	4b7c      	ldr	r3, [pc, #496]	@ (80017b4 <NLLS+0x514>)
 80015c4:	443b      	add	r3, r7
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	00da      	lsls	r2, r3, #3
 80015ca:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80015ce:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80015d2:	4413      	add	r3, r2
 80015d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015d8:	4b77      	ldr	r3, [pc, #476]	@ (80017b8 <NLLS+0x518>)
 80015da:	443b      	add	r3, r7
 80015dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e0:	f7fe fe72 	bl	80002c8 <__aeabi_dsub>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4620      	mov	r0, r4
 80015ea:	4629      	mov	r1, r5
 80015ec:	f7ff f824 	bl	8000638 <__aeabi_dmul>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4640      	mov	r0, r8
 80015f6:	4649      	mov	r1, r9
 80015f8:	f7fe fe66 	bl	80002c8 <__aeabi_dsub>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4692      	mov	sl, r2
 8001602:	469b      	mov	fp, r3
 8001604:	4b6b      	ldr	r3, [pc, #428]	@ (80017b4 <NLLS+0x514>)
 8001606:	443b      	add	r3, r7
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	00da      	lsls	r2, r3, #3
 800160c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001610:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8001614:	4413      	add	r3, r2
 8001616:	e9d3 0100 	ldrd	r0, r1, [r3]
 800161a:	4b69      	ldr	r3, [pc, #420]	@ (80017c0 <NLLS+0x520>)
 800161c:	443b      	add	r3, r7
 800161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001622:	f7fe fe51 	bl	80002c8 <__aeabi_dsub>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	4610      	mov	r0, r2
 800162c:	4619      	mov	r1, r3
 800162e:	4b63      	ldr	r3, [pc, #396]	@ (80017bc <NLLS+0x51c>)
 8001630:	443b      	add	r3, r7
 8001632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001636:	f7fe ffff 	bl	8000638 <__aeabi_dmul>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4690      	mov	r8, r2
 8001640:	4699      	mov	r9, r3
 8001642:	4b60      	ldr	r3, [pc, #384]	@ (80017c4 <NLLS+0x524>)
 8001644:	443b      	add	r3, r7
 8001646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164a:	495f      	ldr	r1, [pc, #380]	@ (80017c8 <NLLS+0x528>)
 800164c:	4439      	add	r1, r7
 800164e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001652:	f7fe fff1 	bl	8000638 <__aeabi_dmul>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4614      	mov	r4, r2
 800165c:	461d      	mov	r5, r3
 800165e:	4b55      	ldr	r3, [pc, #340]	@ (80017b4 <NLLS+0x514>)
 8001660:	443b      	add	r3, r7
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	00da      	lsls	r2, r3, #3
 8001666:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800166a:	f853 3c34 	ldr.w	r3, [r3, #-52]
 800166e:	4413      	add	r3, r2
 8001670:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001674:	4b50      	ldr	r3, [pc, #320]	@ (80017b8 <NLLS+0x518>)
 8001676:	443b      	add	r3, r7
 8001678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167c:	f7fe fe24 	bl	80002c8 <__aeabi_dsub>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4620      	mov	r0, r4
 8001686:	4629      	mov	r1, r5
 8001688:	f7fe ffd6 	bl	8000638 <__aeabi_dmul>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4640      	mov	r0, r8
 8001692:	4649      	mov	r1, r9
 8001694:	f7fe fe18 	bl	80002c8 <__aeabi_dsub>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4650      	mov	r0, sl
 800169e:	4659      	mov	r1, fp
 80016a0:	f7fe ffca 	bl	8000638 <__aeabi_dmul>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4690      	mov	r8, r2
 80016aa:	4699      	mov	r9, r3
 80016ac:	4b46      	ldr	r3, [pc, #280]	@ (80017c8 <NLLS+0x528>)
 80016ae:	443b      	add	r3, r7
 80016b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b4:	4941      	ldr	r1, [pc, #260]	@ (80017bc <NLLS+0x51c>)
 80016b6:	4439      	add	r1, r7
 80016b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016bc:	f7fe ffbc 	bl	8000638 <__aeabi_dmul>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4610      	mov	r0, r2
 80016c6:	4619      	mov	r1, r3
 80016c8:	4b40      	ldr	r3, [pc, #256]	@ (80017cc <NLLS+0x52c>)
 80016ca:	443b      	add	r3, r7
 80016cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d0:	f7fe ffb2 	bl	8000638 <__aeabi_dmul>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4614      	mov	r4, r2
 80016da:	461d      	mov	r5, r3
 80016dc:	4b3a      	ldr	r3, [pc, #232]	@ (80017c8 <NLLS+0x528>)
 80016de:	443b      	add	r3, r7
 80016e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e4:	4935      	ldr	r1, [pc, #212]	@ (80017bc <NLLS+0x51c>)
 80016e6:	4439      	add	r1, r7
 80016e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016ec:	f7fe ffa4 	bl	8000638 <__aeabi_dmul>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	4b34      	ldr	r3, [pc, #208]	@ (80017cc <NLLS+0x52c>)
 80016fa:	443b      	add	r3, r7
 80016fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001700:	f7fe ff9a 	bl	8000638 <__aeabi_dmul>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4620      	mov	r0, r4
 800170a:	4629      	mov	r1, r5
 800170c:	f7fe ff94 	bl	8000638 <__aeabi_dmul>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4640      	mov	r0, r8
 8001716:	4649      	mov	r1, r9
 8001718:	f7ff f8b8 	bl	800088c <__aeabi_ddiv>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001724:	f7fe fdd2 	bl	80002cc <__adddf3>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001730:	4b25      	ldr	r3, [pc, #148]	@ (80017c8 <NLLS+0x528>)
 8001732:	443b      	add	r3, r7
 8001734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001738:	4920      	ldr	r1, [pc, #128]	@ (80017bc <NLLS+0x51c>)
 800173a:	4439      	add	r1, r7
 800173c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001740:	f7fe ff7a 	bl	8000638 <__aeabi_dmul>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4610      	mov	r0, r2
 800174a:	4619      	mov	r1, r3
 800174c:	4b1f      	ldr	r3, [pc, #124]	@ (80017cc <NLLS+0x52c>)
 800174e:	443b      	add	r3, r7
 8001750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001754:	f7fe ff70 	bl	8000638 <__aeabi_dmul>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4614      	mov	r4, r2
 800175e:	461d      	mov	r5, r3
 8001760:	4b14      	ldr	r3, [pc, #80]	@ (80017b4 <NLLS+0x514>)
 8001762:	443b      	add	r3, r7
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	00da      	lsls	r2, r3, #3
 8001768:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800176c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001770:	4413      	add	r3, r2
 8001772:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001776:	4b16      	ldr	r3, [pc, #88]	@ (80017d0 <NLLS+0x530>)
 8001778:	443b      	add	r3, r7
 800177a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177e:	f7fe fda3 	bl	80002c8 <__aeabi_dsub>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4620      	mov	r0, r4
 8001788:	4629      	mov	r1, r5
 800178a:	f7fe ff55 	bl	8000638 <__aeabi_dmul>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4690      	mov	r8, r2
 8001794:	4699      	mov	r9, r3
 8001796:	4b0f      	ldr	r3, [pc, #60]	@ (80017d4 <NLLS+0x534>)
 8001798:	443b      	add	r3, r7
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	4907      	ldr	r1, [pc, #28]	@ (80017bc <NLLS+0x51c>)
 80017a0:	4439      	add	r1, r7
 80017a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017a6:	f7fe ff47 	bl	8000638 <__aeabi_dmul>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	e011      	b.n	80017d8 <NLLS+0x538>
 80017b4:	0002e008 	.word	0x0002e008
 80017b8:	0002e048 	.word	0x0002e048
 80017bc:	0002e060 	.word	0x0002e060
 80017c0:	0002e040 	.word	0x0002e040
 80017c4:	0002dfc8 	.word	0x0002dfc8
 80017c8:	0002e058 	.word	0x0002e058
 80017cc:	0002dfb0 	.word	0x0002dfb0
 80017d0:	0002e038 	.word	0x0002e038
 80017d4:	0002e050 	.word	0x0002e050
 80017d8:	4bb6      	ldr	r3, [pc, #728]	@ (8001ab4 <NLLS+0x814>)
 80017da:	443b      	add	r3, r7
 80017dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e0:	f7fe ff2a 	bl	8000638 <__aeabi_dmul>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4614      	mov	r4, r2
 80017ea:	461d      	mov	r5, r3
 80017ec:	4bb2      	ldr	r3, [pc, #712]	@ (8001ab8 <NLLS+0x818>)
 80017ee:	443b      	add	r3, r7
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	00da      	lsls	r2, r3, #3
 80017f4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80017f8:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80017fc:	4413      	add	r3, r2
 80017fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001802:	4bae      	ldr	r3, [pc, #696]	@ (8001abc <NLLS+0x81c>)
 8001804:	443b      	add	r3, r7
 8001806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180a:	f7fe fd5d 	bl	80002c8 <__aeabi_dsub>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4620      	mov	r0, r4
 8001814:	4629      	mov	r1, r5
 8001816:	f7fe ff0f 	bl	8000638 <__aeabi_dmul>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4640      	mov	r0, r8
 8001820:	4649      	mov	r1, r9
 8001822:	f7fe fd51 	bl	80002c8 <__aeabi_dsub>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4692      	mov	sl, r2
 800182c:	469b      	mov	fp, r3
 800182e:	4ba4      	ldr	r3, [pc, #656]	@ (8001ac0 <NLLS+0x820>)
 8001830:	443b      	add	r3, r7
 8001832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001836:	49a3      	ldr	r1, [pc, #652]	@ (8001ac4 <NLLS+0x824>)
 8001838:	4439      	add	r1, r7
 800183a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800183e:	f7fe fefb 	bl	8000638 <__aeabi_dmul>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4690      	mov	r8, r2
 8001848:	4699      	mov	r9, r3
 800184a:	4b9f      	ldr	r3, [pc, #636]	@ (8001ac8 <NLLS+0x828>)
 800184c:	443b      	add	r3, r7
 800184e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001852:	4998      	ldr	r1, [pc, #608]	@ (8001ab4 <NLLS+0x814>)
 8001854:	4439      	add	r1, r7
 8001856:	e9d1 0100 	ldrd	r0, r1, [r1]
 800185a:	f7fe feed 	bl	8000638 <__aeabi_dmul>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4614      	mov	r4, r2
 8001864:	461d      	mov	r5, r3
 8001866:	4b99      	ldr	r3, [pc, #612]	@ (8001acc <NLLS+0x82c>)
 8001868:	443b      	add	r3, r7
 800186a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186e:	4998      	ldr	r1, [pc, #608]	@ (8001ad0 <NLLS+0x830>)
 8001870:	4439      	add	r1, r7
 8001872:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001876:	f7fe fedf 	bl	8000638 <__aeabi_dmul>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4610      	mov	r0, r2
 8001880:	4619      	mov	r1, r3
 8001882:	4b94      	ldr	r3, [pc, #592]	@ (8001ad4 <NLLS+0x834>)
 8001884:	443b      	add	r3, r7
 8001886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188a:	f7fe fed5 	bl	8000638 <__aeabi_dmul>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4620      	mov	r0, r4
 8001894:	4629      	mov	r1, r5
 8001896:	f7fe fd17 	bl	80002c8 <__aeabi_dsub>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4640      	mov	r0, r8
 80018a0:	4649      	mov	r1, r9
 80018a2:	f7fe fec9 	bl	8000638 <__aeabi_dmul>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4614      	mov	r4, r2
 80018ac:	461d      	mov	r5, r3
 80018ae:	4b82      	ldr	r3, [pc, #520]	@ (8001ab8 <NLLS+0x818>)
 80018b0:	443b      	add	r3, r7
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	00da      	lsls	r2, r3, #3
 80018b6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80018ba:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80018be:	4413      	add	r3, r2
 80018c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018c4:	4b84      	ldr	r3, [pc, #528]	@ (8001ad8 <NLLS+0x838>)
 80018c6:	443b      	add	r3, r7
 80018c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018cc:	f7fe fcfc 	bl	80002c8 <__aeabi_dsub>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4620      	mov	r0, r4
 80018d6:	4629      	mov	r1, r5
 80018d8:	f7fe feae 	bl	8000638 <__aeabi_dmul>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4650      	mov	r0, sl
 80018e2:	4659      	mov	r1, fp
 80018e4:	f7fe fcf2 	bl	80002cc <__adddf3>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	e9c7 2300 	strd	r2, r3, [r7]
 80018f0:	4b74      	ldr	r3, [pc, #464]	@ (8001ac4 <NLLS+0x824>)
 80018f2:	443b      	add	r3, r7
 80018f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f8:	4978      	ldr	r1, [pc, #480]	@ (8001adc <NLLS+0x83c>)
 80018fa:	4439      	add	r1, r7
 80018fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001900:	f7fe fe9a 	bl	8000638 <__aeabi_dmul>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	4b70      	ldr	r3, [pc, #448]	@ (8001ad0 <NLLS+0x830>)
 800190e:	443b      	add	r3, r7
 8001910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001914:	f7fe fe90 	bl	8000638 <__aeabi_dmul>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4614      	mov	r4, r2
 800191e:	461d      	mov	r5, r3
 8001920:	4b65      	ldr	r3, [pc, #404]	@ (8001ab8 <NLLS+0x818>)
 8001922:	443b      	add	r3, r7
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	00da      	lsls	r2, r3, #3
 8001928:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800192c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001930:	4413      	add	r3, r2
 8001932:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001936:	4b6a      	ldr	r3, [pc, #424]	@ (8001ae0 <NLLS+0x840>)
 8001938:	443b      	add	r3, r7
 800193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193e:	f7fe fcc3 	bl	80002c8 <__aeabi_dsub>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4620      	mov	r0, r4
 8001948:	4629      	mov	r1, r5
 800194a:	f7fe fe75 	bl	8000638 <__aeabi_dmul>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4690      	mov	r8, r2
 8001954:	4699      	mov	r9, r3
 8001956:	4b5a      	ldr	r3, [pc, #360]	@ (8001ac0 <NLLS+0x820>)
 8001958:	443b      	add	r3, r7
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	495f      	ldr	r1, [pc, #380]	@ (8001adc <NLLS+0x83c>)
 8001960:	4439      	add	r1, r7
 8001962:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001966:	f7fe fe67 	bl	8000638 <__aeabi_dmul>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4610      	mov	r0, r2
 8001970:	4619      	mov	r1, r3
 8001972:	4b50      	ldr	r3, [pc, #320]	@ (8001ab4 <NLLS+0x814>)
 8001974:	443b      	add	r3, r7
 8001976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197a:	f7fe fe5d 	bl	8000638 <__aeabi_dmul>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4614      	mov	r4, r2
 8001984:	461d      	mov	r5, r3
 8001986:	4b4c      	ldr	r3, [pc, #304]	@ (8001ab8 <NLLS+0x818>)
 8001988:	443b      	add	r3, r7
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	00da      	lsls	r2, r3, #3
 800198e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001992:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8001996:	4413      	add	r3, r2
 8001998:	e9d3 0100 	ldrd	r0, r1, [r3]
 800199c:	4b47      	ldr	r3, [pc, #284]	@ (8001abc <NLLS+0x81c>)
 800199e:	443b      	add	r3, r7
 80019a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a4:	f7fe fc90 	bl	80002c8 <__aeabi_dsub>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4620      	mov	r0, r4
 80019ae:	4629      	mov	r1, r5
 80019b0:	f7fe fe42 	bl	8000638 <__aeabi_dmul>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4640      	mov	r0, r8
 80019ba:	4649      	mov	r1, r9
 80019bc:	f7fe fc84 	bl	80002c8 <__aeabi_dsub>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4692      	mov	sl, r2
 80019c6:	469b      	mov	fp, r3
 80019c8:	4b3d      	ldr	r3, [pc, #244]	@ (8001ac0 <NLLS+0x820>)
 80019ca:	443b      	add	r3, r7
 80019cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d0:	493c      	ldr	r1, [pc, #240]	@ (8001ac4 <NLLS+0x824>)
 80019d2:	4439      	add	r1, r7
 80019d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019d8:	f7fe fe2e 	bl	8000638 <__aeabi_dmul>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4690      	mov	r8, r2
 80019e2:	4699      	mov	r9, r3
 80019e4:	4b38      	ldr	r3, [pc, #224]	@ (8001ac8 <NLLS+0x828>)
 80019e6:	443b      	add	r3, r7
 80019e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ec:	4931      	ldr	r1, [pc, #196]	@ (8001ab4 <NLLS+0x814>)
 80019ee:	4439      	add	r1, r7
 80019f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019f4:	f7fe fe20 	bl	8000638 <__aeabi_dmul>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4614      	mov	r4, r2
 80019fe:	461d      	mov	r5, r3
 8001a00:	4b32      	ldr	r3, [pc, #200]	@ (8001acc <NLLS+0x82c>)
 8001a02:	443b      	add	r3, r7
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	4931      	ldr	r1, [pc, #196]	@ (8001ad0 <NLLS+0x830>)
 8001a0a:	4439      	add	r1, r7
 8001a0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a10:	f7fe fe12 	bl	8000638 <__aeabi_dmul>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ad4 <NLLS+0x834>)
 8001a1e:	443b      	add	r3, r7
 8001a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a24:	f7fe fe08 	bl	8000638 <__aeabi_dmul>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	4629      	mov	r1, r5
 8001a30:	f7fe fc4a 	bl	80002c8 <__aeabi_dsub>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4640      	mov	r0, r8
 8001a3a:	4649      	mov	r1, r9
 8001a3c:	f7fe fdfc 	bl	8000638 <__aeabi_dmul>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4614      	mov	r4, r2
 8001a46:	461d      	mov	r5, r3
 8001a48:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab8 <NLLS+0x818>)
 8001a4a:	443b      	add	r3, r7
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	00da      	lsls	r2, r3, #3
 8001a50:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001a54:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8001a58:	4413      	add	r3, r2
 8001a5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad8 <NLLS+0x838>)
 8001a60:	443b      	add	r3, r7
 8001a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a66:	f7fe fc2f 	bl	80002c8 <__aeabi_dsub>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4620      	mov	r0, r4
 8001a70:	4629      	mov	r1, r5
 8001a72:	f7fe fde1 	bl	8000638 <__aeabi_dmul>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4650      	mov	r0, sl
 8001a7c:	4659      	mov	r1, fp
 8001a7e:	f7fe fc25 	bl	80002cc <__adddf3>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a8a:	f7fe fdd5 	bl	8000638 <__aeabi_dmul>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	4690      	mov	r8, r2
 8001a94:	4699      	mov	r9, r3
 8001a96:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac4 <NLLS+0x824>)
 8001a98:	443b      	add	r3, r7
 8001a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9e:	490f      	ldr	r1, [pc, #60]	@ (8001adc <NLLS+0x83c>)
 8001aa0:	4439      	add	r1, r7
 8001aa2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001aa6:	f7fe fdc7 	bl	8000638 <__aeabi_dmul>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4610      	mov	r0, r2
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	e017      	b.n	8001ae4 <NLLS+0x844>
 8001ab4:	0002dfc0 	.word	0x0002dfc0
 8001ab8:	0002e008 	.word	0x0002e008
 8001abc:	0002e040 	.word	0x0002e040
 8001ac0:	0002e050 	.word	0x0002e050
 8001ac4:	0002e058 	.word	0x0002e058
 8001ac8:	0002dfc8 	.word	0x0002dfc8
 8001acc:	0002dfd0 	.word	0x0002dfd0
 8001ad0:	0002dfb0 	.word	0x0002dfb0
 8001ad4:	0002dfa8 	.word	0x0002dfa8
 8001ad8:	0002e048 	.word	0x0002e048
 8001adc:	0002e060 	.word	0x0002e060
 8001ae0:	0002e038 	.word	0x0002e038
 8001ae4:	4bb3      	ldr	r3, [pc, #716]	@ (8001db4 <NLLS+0xb14>)
 8001ae6:	443b      	add	r3, r7
 8001ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aec:	f7fe fda4 	bl	8000638 <__aeabi_dmul>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	4baf      	ldr	r3, [pc, #700]	@ (8001db8 <NLLS+0xb18>)
 8001afa:	443b      	add	r3, r7
 8001afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b00:	f7fe fd9a 	bl	8000638 <__aeabi_dmul>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4610      	mov	r0, r2
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4bab      	ldr	r3, [pc, #684]	@ (8001dbc <NLLS+0xb1c>)
 8001b0e:	443b      	add	r3, r7
 8001b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b14:	f7fe fd90 	bl	8000638 <__aeabi_dmul>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4ba7      	ldr	r3, [pc, #668]	@ (8001dc0 <NLLS+0xb20>)
 8001b22:	443b      	add	r3, r7
 8001b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b28:	f7fe fd86 	bl	8000638 <__aeabi_dmul>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4614      	mov	r4, r2
 8001b32:	461d      	mov	r5, r3
 8001b34:	4ba3      	ldr	r3, [pc, #652]	@ (8001dc4 <NLLS+0xb24>)
 8001b36:	443b      	add	r3, r7
 8001b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3c:	49a2      	ldr	r1, [pc, #648]	@ (8001dc8 <NLLS+0xb28>)
 8001b3e:	4439      	add	r1, r7
 8001b40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b44:	f7fe fd78 	bl	8000638 <__aeabi_dmul>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4b98      	ldr	r3, [pc, #608]	@ (8001db4 <NLLS+0xb14>)
 8001b52:	443b      	add	r3, r7
 8001b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b58:	f7fe fd6e 	bl	8000638 <__aeabi_dmul>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4610      	mov	r0, r2
 8001b62:	4619      	mov	r1, r3
 8001b64:	4b94      	ldr	r3, [pc, #592]	@ (8001db8 <NLLS+0xb18>)
 8001b66:	443b      	add	r3, r7
 8001b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6c:	f7fe fd64 	bl	8000638 <__aeabi_dmul>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	4b90      	ldr	r3, [pc, #576]	@ (8001dbc <NLLS+0xb1c>)
 8001b7a:	443b      	add	r3, r7
 8001b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b80:	f7fe fd5a 	bl	8000638 <__aeabi_dmul>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4610      	mov	r0, r2
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4b8c      	ldr	r3, [pc, #560]	@ (8001dc0 <NLLS+0xb20>)
 8001b8e:	443b      	add	r3, r7
 8001b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b94:	f7fe fd50 	bl	8000638 <__aeabi_dmul>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4620      	mov	r0, r4
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	f7fe fd4a 	bl	8000638 <__aeabi_dmul>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4640      	mov	r0, r8
 8001baa:	4649      	mov	r1, r9
 8001bac:	f7fe fe6e 	bl	800088c <__aeabi_ddiv>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bb8:	f7fe fb88 	bl	80002cc <__adddf3>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4982      	ldr	r1, [pc, #520]	@ (8001dcc <NLLS+0xb2c>)
 8001bc2:	4439      	add	r1, r7
 8001bc4:	f6a1 1058 	subw	r0, r1, #2392	@ 0x958
 8001bc8:	4981      	ldr	r1, [pc, #516]	@ (8001dd0 <NLLS+0xb30>)
 8001bca:	4439      	add	r1, r7
 8001bcc:	6809      	ldr	r1, [r1, #0]
 8001bce:	00c9      	lsls	r1, r1, #3
 8001bd0:	4401      	add	r1, r0
 8001bd2:	e9c1 2300 	strd	r2, r3, [r1]

			e[i] = (Be[i] * Be[i]) - f[i];
 8001bd6:	4b7f      	ldr	r3, [pc, #508]	@ (8001dd4 <NLLS+0xb34>)
 8001bd8:	443b      	add	r3, r7
 8001bda:	f5a3 7276 	sub.w	r2, r3, #984	@ 0x3d8
 8001bde:	4b7c      	ldr	r3, [pc, #496]	@ (8001dd0 <NLLS+0xb30>)
 8001be0:	443b      	add	r3, r7
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	4413      	add	r3, r2
 8001be8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bec:	4b79      	ldr	r3, [pc, #484]	@ (8001dd4 <NLLS+0xb34>)
 8001bee:	443b      	add	r3, r7
 8001bf0:	f5a3 7276 	sub.w	r2, r3, #984	@ 0x3d8
 8001bf4:	4b76      	ldr	r3, [pc, #472]	@ (8001dd0 <NLLS+0xb30>)
 8001bf6:	443b      	add	r3, r7
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	4413      	add	r3, r2
 8001bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c02:	f7fe fd19 	bl	8000638 <__aeabi_dmul>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4b6f      	ldr	r3, [pc, #444]	@ (8001dcc <NLLS+0xb2c>)
 8001c10:	443b      	add	r3, r7
 8001c12:	f6a3 1258 	subw	r2, r3, #2392	@ 0x958
 8001c16:	4b6e      	ldr	r3, [pc, #440]	@ (8001dd0 <NLLS+0xb30>)
 8001c18:	443b      	add	r3, r7
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	4413      	add	r3, r2
 8001c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c24:	f7fe fb50 	bl	80002c8 <__aeabi_dsub>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	496a      	ldr	r1, [pc, #424]	@ (8001dd8 <NLLS+0xb38>)
 8001c2e:	4439      	add	r1, r7
 8001c30:	f5a1 60d3 	sub.w	r0, r1, #1688	@ 0x698
 8001c34:	4966      	ldr	r1, [pc, #408]	@ (8001dd0 <NLLS+0xb30>)
 8001c36:	4439      	add	r1, r7
 8001c38:	6809      	ldr	r1, [r1, #0]
 8001c3a:	00c9      	lsls	r1, r1, #3
 8001c3c:	4401      	add	r1, r0
 8001c3e:	e9c1 2300 	strd	r2, r3, [r1]

			mat_H[0][i] = (2*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))*(by - my[i]))/(sx*sx*sy*sy*cos_rho*cos_rho) - (2*((sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))))/((sx*sx*sx)*sy*sy*cos_rho*cos_rho) - (2*((bx - mx[i])*(bx - mx[i])))/(sx*sx*sx) - (2*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])) * (sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/((sx*sx*sx)*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho) + (2*(sy*cos_rho*(bz - mz[i]) - sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8001c42:	4b63      	ldr	r3, [pc, #396]	@ (8001dd0 <NLLS+0xb30>)
 8001c44:	443b      	add	r3, r7
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8001c4e:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8001c52:	4413      	add	r3, r2
 8001c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c58:	4960      	ldr	r1, [pc, #384]	@ (8001ddc <NLLS+0xb3c>)
 8001c5a:	4439      	add	r1, r7
 8001c5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c60:	f7fe fb32 	bl	80002c8 <__aeabi_dsub>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4b56      	ldr	r3, [pc, #344]	@ (8001dc8 <NLLS+0xb28>)
 8001c6e:	443b      	add	r3, r7
 8001c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c74:	f7fe fce0 	bl	8000638 <__aeabi_dmul>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4690      	mov	r8, r2
 8001c7e:	4699      	mov	r9, r3
 8001c80:	4b57      	ldr	r3, [pc, #348]	@ (8001de0 <NLLS+0xb40>)
 8001c82:	443b      	add	r3, r7
 8001c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c88:	494e      	ldr	r1, [pc, #312]	@ (8001dc4 <NLLS+0xb24>)
 8001c8a:	4439      	add	r1, r7
 8001c8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c90:	f7fe fcd2 	bl	8000638 <__aeabi_dmul>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4614      	mov	r4, r2
 8001c9a:	461d      	mov	r5, r3
 8001c9c:	4b4c      	ldr	r3, [pc, #304]	@ (8001dd0 <NLLS+0xb30>)
 8001c9e:	443b      	add	r3, r7
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	00da      	lsls	r2, r3, #3
 8001ca4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001ca8:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8001cac:	4413      	add	r3, r2
 8001cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb2:	494c      	ldr	r1, [pc, #304]	@ (8001de4 <NLLS+0xb44>)
 8001cb4:	4439      	add	r1, r7
 8001cb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001cba:	f7fe fb05 	bl	80002c8 <__aeabi_dsub>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	4629      	mov	r1, r5
 8001cc6:	f7fe fcb7 	bl	8000638 <__aeabi_dmul>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4640      	mov	r0, r8
 8001cd0:	4649      	mov	r1, r9
 8001cd2:	f7fe faf9 	bl	80002c8 <__aeabi_dsub>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4610      	mov	r0, r2
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	f7fe faf3 	bl	80002cc <__adddf3>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	4614      	mov	r4, r2
 8001cec:	461d      	mov	r5, r3
 8001cee:	4b38      	ldr	r3, [pc, #224]	@ (8001dd0 <NLLS+0xb30>)
 8001cf0:	443b      	add	r3, r7
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8001cfa:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8001cfe:	4413      	add	r3, r2
 8001d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d04:	4935      	ldr	r1, [pc, #212]	@ (8001ddc <NLLS+0xb3c>)
 8001d06:	4439      	add	r1, r7
 8001d08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d0c:	f7fe fadc 	bl	80002c8 <__aeabi_dsub>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4620      	mov	r0, r4
 8001d16:	4629      	mov	r1, r5
 8001d18:	f7fe fc8e 	bl	8000638 <__aeabi_dmul>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4614      	mov	r4, r2
 8001d22:	461d      	mov	r5, r3
 8001d24:	4b28      	ldr	r3, [pc, #160]	@ (8001dc8 <NLLS+0xb28>)
 8001d26:	443b      	add	r3, r7
 8001d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2c:	4926      	ldr	r1, [pc, #152]	@ (8001dc8 <NLLS+0xb28>)
 8001d2e:	4439      	add	r1, r7
 8001d30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d34:	f7fe fc80 	bl	8000638 <__aeabi_dmul>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4b20      	ldr	r3, [pc, #128]	@ (8001dc4 <NLLS+0xb24>)
 8001d42:	443b      	add	r3, r7
 8001d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d48:	f7fe fc76 	bl	8000638 <__aeabi_dmul>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4610      	mov	r0, r2
 8001d52:	4619      	mov	r1, r3
 8001d54:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc4 <NLLS+0xb24>)
 8001d56:	443b      	add	r3, r7
 8001d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5c:	f7fe fc6c 	bl	8000638 <__aeabi_dmul>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
 8001d68:	4b13      	ldr	r3, [pc, #76]	@ (8001db8 <NLLS+0xb18>)
 8001d6a:	443b      	add	r3, r7
 8001d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d70:	f7fe fc62 	bl	8000638 <__aeabi_dmul>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4610      	mov	r0, r2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001db8 <NLLS+0xb18>)
 8001d7e:	443b      	add	r3, r7
 8001d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d84:	f7fe fc58 	bl	8000638 <__aeabi_dmul>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	4620      	mov	r0, r4
 8001d8e:	4629      	mov	r1, r5
 8001d90:	f7fe fd7c 	bl	800088c <__aeabi_ddiv>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd0 <NLLS+0xb30>)
 8001d9e:	443b      	add	r3, r7
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8001da8:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8001dac:	4413      	add	r3, r2
 8001dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db2:	e019      	b.n	8001de8 <NLLS+0xb48>
 8001db4:	0002e050 	.word	0x0002e050
 8001db8:	0002dfb0 	.word	0x0002dfb0
 8001dbc:	0002dfb8 	.word	0x0002dfb8
 8001dc0:	0002dfa8 	.word	0x0002dfa8
 8001dc4:	0002e058 	.word	0x0002e058
 8001dc8:	0002e060 	.word	0x0002e060
 8001dcc:	00028070 	.word	0x00028070
 8001dd0:	0002e008 	.word	0x0002e008
 8001dd4:	0002c070 	.word	0x0002c070
 8001dd8:	0002a070 	.word	0x0002a070
 8001ddc:	0002e040 	.word	0x0002e040
 8001de0:	0002dfc8 	.word	0x0002dfc8
 8001de4:	0002e048 	.word	0x0002e048
 8001de8:	49b6      	ldr	r1, [pc, #728]	@ (80020c4 <NLLS+0xe24>)
 8001dea:	4439      	add	r1, r7
 8001dec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001df0:	f7fe fa6a 	bl	80002c8 <__aeabi_dsub>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4610      	mov	r0, r2
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4bb2      	ldr	r3, [pc, #712]	@ (80020c8 <NLLS+0xe28>)
 8001dfe:	443b      	add	r3, r7
 8001e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e04:	f7fe fc18 	bl	8000638 <__aeabi_dmul>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4690      	mov	r8, r2
 8001e0e:	4699      	mov	r9, r3
 8001e10:	4bae      	ldr	r3, [pc, #696]	@ (80020cc <NLLS+0xe2c>)
 8001e12:	443b      	add	r3, r7
 8001e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e18:	49ad      	ldr	r1, [pc, #692]	@ (80020d0 <NLLS+0xe30>)
 8001e1a:	4439      	add	r1, r7
 8001e1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e20:	f7fe fc0a 	bl	8000638 <__aeabi_dmul>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4614      	mov	r4, r2
 8001e2a:	461d      	mov	r5, r3
 8001e2c:	4ba9      	ldr	r3, [pc, #676]	@ (80020d4 <NLLS+0xe34>)
 8001e2e:	443b      	add	r3, r7
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	00da      	lsls	r2, r3, #3
 8001e34:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001e38:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e42:	49a5      	ldr	r1, [pc, #660]	@ (80020d8 <NLLS+0xe38>)
 8001e44:	4439      	add	r1, r7
 8001e46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e4a:	f7fe fa3d 	bl	80002c8 <__aeabi_dsub>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4620      	mov	r0, r4
 8001e54:	4629      	mov	r1, r5
 8001e56:	f7fe fbef 	bl	8000638 <__aeabi_dmul>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4640      	mov	r0, r8
 8001e60:	4649      	mov	r1, r9
 8001e62:	f7fe fa31 	bl	80002c8 <__aeabi_dsub>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4692      	mov	sl, r2
 8001e6c:	469b      	mov	fp, r3
 8001e6e:	4b99      	ldr	r3, [pc, #612]	@ (80020d4 <NLLS+0xe34>)
 8001e70:	443b      	add	r3, r7
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	00da      	lsls	r2, r3, #3
 8001e76:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001e7a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8001e7e:	4413      	add	r3, r2
 8001e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e84:	498f      	ldr	r1, [pc, #572]	@ (80020c4 <NLLS+0xe24>)
 8001e86:	4439      	add	r1, r7
 8001e88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e8c:	f7fe fa1c 	bl	80002c8 <__aeabi_dsub>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4610      	mov	r0, r2
 8001e96:	4619      	mov	r1, r3
 8001e98:	4b8b      	ldr	r3, [pc, #556]	@ (80020c8 <NLLS+0xe28>)
 8001e9a:	443b      	add	r3, r7
 8001e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea0:	f7fe fbca 	bl	8000638 <__aeabi_dmul>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4690      	mov	r8, r2
 8001eaa:	4699      	mov	r9, r3
 8001eac:	4b87      	ldr	r3, [pc, #540]	@ (80020cc <NLLS+0xe2c>)
 8001eae:	443b      	add	r3, r7
 8001eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb4:	4986      	ldr	r1, [pc, #536]	@ (80020d0 <NLLS+0xe30>)
 8001eb6:	4439      	add	r1, r7
 8001eb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ebc:	f7fe fbbc 	bl	8000638 <__aeabi_dmul>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4614      	mov	r4, r2
 8001ec6:	461d      	mov	r5, r3
 8001ec8:	4b82      	ldr	r3, [pc, #520]	@ (80020d4 <NLLS+0xe34>)
 8001eca:	443b      	add	r3, r7
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	00da      	lsls	r2, r3, #3
 8001ed0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001ed4:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8001ed8:	4413      	add	r3, r2
 8001eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ede:	497e      	ldr	r1, [pc, #504]	@ (80020d8 <NLLS+0xe38>)
 8001ee0:	4439      	add	r1, r7
 8001ee2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ee6:	f7fe f9ef 	bl	80002c8 <__aeabi_dsub>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4620      	mov	r0, r4
 8001ef0:	4629      	mov	r1, r5
 8001ef2:	f7fe fba1 	bl	8000638 <__aeabi_dmul>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	4640      	mov	r0, r8
 8001efc:	4649      	mov	r1, r9
 8001efe:	f7fe f9e3 	bl	80002c8 <__aeabi_dsub>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	4650      	mov	r0, sl
 8001f08:	4659      	mov	r1, fp
 8001f0a:	f7fe fb95 	bl	8000638 <__aeabi_dmul>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4610      	mov	r0, r2
 8001f14:	4619      	mov	r1, r3
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	f7fe f9d7 	bl	80002cc <__adddf3>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	4614      	mov	r4, r2
 8001f24:	461d      	mov	r5, r3
 8001f26:	4b68      	ldr	r3, [pc, #416]	@ (80020c8 <NLLS+0xe28>)
 8001f28:	443b      	add	r3, r7
 8001f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2e:	4966      	ldr	r1, [pc, #408]	@ (80020c8 <NLLS+0xe28>)
 8001f30:	4439      	add	r1, r7
 8001f32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f36:	f7fe fb7f 	bl	8000638 <__aeabi_dmul>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4610      	mov	r0, r2
 8001f40:	4619      	mov	r1, r3
 8001f42:	4b61      	ldr	r3, [pc, #388]	@ (80020c8 <NLLS+0xe28>)
 8001f44:	443b      	add	r3, r7
 8001f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4a:	f7fe fb75 	bl	8000638 <__aeabi_dmul>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	4610      	mov	r0, r2
 8001f54:	4619      	mov	r1, r3
 8001f56:	4b5e      	ldr	r3, [pc, #376]	@ (80020d0 <NLLS+0xe30>)
 8001f58:	443b      	add	r3, r7
 8001f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5e:	f7fe fb6b 	bl	8000638 <__aeabi_dmul>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	4610      	mov	r0, r2
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4b59      	ldr	r3, [pc, #356]	@ (80020d0 <NLLS+0xe30>)
 8001f6c:	443b      	add	r3, r7
 8001f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f72:	f7fe fb61 	bl	8000638 <__aeabi_dmul>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4b57      	ldr	r3, [pc, #348]	@ (80020dc <NLLS+0xe3c>)
 8001f80:	443b      	add	r3, r7
 8001f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f86:	f7fe fb57 	bl	8000638 <__aeabi_dmul>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4610      	mov	r0, r2
 8001f90:	4619      	mov	r1, r3
 8001f92:	4b52      	ldr	r3, [pc, #328]	@ (80020dc <NLLS+0xe3c>)
 8001f94:	443b      	add	r3, r7
 8001f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9a:	f7fe fb4d 	bl	8000638 <__aeabi_dmul>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	4629      	mov	r1, r5
 8001fa6:	f7fe fc71 	bl	800088c <__aeabi_ddiv>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fb2:	f7fe f989 	bl	80002c8 <__aeabi_dsub>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4690      	mov	r8, r2
 8001fbc:	4699      	mov	r9, r3
 8001fbe:	4b45      	ldr	r3, [pc, #276]	@ (80020d4 <NLLS+0xe34>)
 8001fc0:	443b      	add	r3, r7
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8001fca:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8001fce:	4413      	add	r3, r2
 8001fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd4:	4940      	ldr	r1, [pc, #256]	@ (80020d8 <NLLS+0xe38>)
 8001fd6:	4439      	add	r1, r7
 8001fd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001fdc:	f7fe f974 	bl	80002c8 <__aeabi_dsub>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4614      	mov	r4, r2
 8001fe6:	461d      	mov	r5, r3
 8001fe8:	4b3a      	ldr	r3, [pc, #232]	@ (80020d4 <NLLS+0xe34>)
 8001fea:	443b      	add	r3, r7
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	00da      	lsls	r2, r3, #3
 8001ff0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001ff4:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffe:	4936      	ldr	r1, [pc, #216]	@ (80020d8 <NLLS+0xe38>)
 8002000:	4439      	add	r1, r7
 8002002:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002006:	f7fe f95f 	bl	80002c8 <__aeabi_dsub>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4620      	mov	r0, r4
 8002010:	4629      	mov	r1, r5
 8002012:	f7fe fb11 	bl	8000638 <__aeabi_dmul>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	4610      	mov	r0, r2
 800201c:	4619      	mov	r1, r3
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	f7fe f953 	bl	80002cc <__adddf3>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4614      	mov	r4, r2
 800202c:	461d      	mov	r5, r3
 800202e:	4b26      	ldr	r3, [pc, #152]	@ (80020c8 <NLLS+0xe28>)
 8002030:	443b      	add	r3, r7
 8002032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002036:	4924      	ldr	r1, [pc, #144]	@ (80020c8 <NLLS+0xe28>)
 8002038:	4439      	add	r1, r7
 800203a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800203e:	f7fe fafb 	bl	8000638 <__aeabi_dmul>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4610      	mov	r0, r2
 8002048:	4619      	mov	r1, r3
 800204a:	4b1f      	ldr	r3, [pc, #124]	@ (80020c8 <NLLS+0xe28>)
 800204c:	443b      	add	r3, r7
 800204e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002052:	f7fe faf1 	bl	8000638 <__aeabi_dmul>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4620      	mov	r0, r4
 800205c:	4629      	mov	r1, r5
 800205e:	f7fe fc15 	bl	800088c <__aeabi_ddiv>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	4640      	mov	r0, r8
 8002068:	4649      	mov	r1, r9
 800206a:	f7fe f92d 	bl	80002c8 <__aeabi_dsub>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002076:	4b1a      	ldr	r3, [pc, #104]	@ (80020e0 <NLLS+0xe40>)
 8002078:	443b      	add	r3, r7
 800207a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207e:	4914      	ldr	r1, [pc, #80]	@ (80020d0 <NLLS+0xe30>)
 8002080:	4439      	add	r1, r7
 8002082:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002086:	f7fe fad7 	bl	8000638 <__aeabi_dmul>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4690      	mov	r8, r2
 8002090:	4699      	mov	r9, r3
 8002092:	4b0e      	ldr	r3, [pc, #56]	@ (80020cc <NLLS+0xe2c>)
 8002094:	443b      	add	r3, r7
 8002096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209a:	4912      	ldr	r1, [pc, #72]	@ (80020e4 <NLLS+0xe44>)
 800209c:	4439      	add	r1, r7
 800209e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80020a2:	f7fe fac9 	bl	8000638 <__aeabi_dmul>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4614      	mov	r4, r2
 80020ac:	461d      	mov	r5, r3
 80020ae:	4b0b      	ldr	r3, [pc, #44]	@ (80020dc <NLLS+0xe3c>)
 80020b0:	443b      	add	r3, r7
 80020b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b6:	490c      	ldr	r1, [pc, #48]	@ (80020e8 <NLLS+0xe48>)
 80020b8:	4439      	add	r1, r7
 80020ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80020be:	f7fe fabb 	bl	8000638 <__aeabi_dmul>
 80020c2:	e013      	b.n	80020ec <NLLS+0xe4c>
 80020c4:	0002e040 	.word	0x0002e040
 80020c8:	0002e060 	.word	0x0002e060
 80020cc:	0002dfc8 	.word	0x0002dfc8
 80020d0:	0002e058 	.word	0x0002e058
 80020d4:	0002e008 	.word	0x0002e008
 80020d8:	0002e048 	.word	0x0002e048
 80020dc:	0002dfb0 	.word	0x0002dfb0
 80020e0:	0002e050 	.word	0x0002e050
 80020e4:	0002dfc0 	.word	0x0002dfc0
 80020e8:	0002dfa8 	.word	0x0002dfa8
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4610      	mov	r0, r2
 80020f2:	4619      	mov	r1, r3
 80020f4:	4bba      	ldr	r3, [pc, #744]	@ (80023e0 <NLLS+0x1140>)
 80020f6:	443b      	add	r3, r7
 80020f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fc:	f7fe fa9c 	bl	8000638 <__aeabi_dmul>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4620      	mov	r0, r4
 8002106:	4629      	mov	r1, r5
 8002108:	f7fe f8de 	bl	80002c8 <__aeabi_dsub>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4640      	mov	r0, r8
 8002112:	4649      	mov	r1, r9
 8002114:	f7fe fa90 	bl	8000638 <__aeabi_dmul>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4614      	mov	r4, r2
 800211e:	461d      	mov	r5, r3
 8002120:	4bb0      	ldr	r3, [pc, #704]	@ (80023e4 <NLLS+0x1144>)
 8002122:	443b      	add	r3, r7
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	00da      	lsls	r2, r3, #3
 8002128:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800212c:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8002130:	4413      	add	r3, r2
 8002132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002136:	49ac      	ldr	r1, [pc, #688]	@ (80023e8 <NLLS+0x1148>)
 8002138:	4439      	add	r1, r7
 800213a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800213e:	f7fe f8c3 	bl	80002c8 <__aeabi_dsub>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4620      	mov	r0, r4
 8002148:	4629      	mov	r1, r5
 800214a:	f7fe fa75 	bl	8000638 <__aeabi_dmul>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	4690      	mov	r8, r2
 8002154:	4699      	mov	r9, r3
 8002156:	4ba5      	ldr	r3, [pc, #660]	@ (80023ec <NLLS+0x114c>)
 8002158:	443b      	add	r3, r7
 800215a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800215e:	49a4      	ldr	r1, [pc, #656]	@ (80023f0 <NLLS+0x1150>)
 8002160:	4439      	add	r1, r7
 8002162:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002166:	f7fe fa67 	bl	8000638 <__aeabi_dmul>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	4610      	mov	r0, r2
 8002170:	4619      	mov	r1, r3
 8002172:	4ba0      	ldr	r3, [pc, #640]	@ (80023f4 <NLLS+0x1154>)
 8002174:	443b      	add	r3, r7
 8002176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217a:	f7fe fa5d 	bl	8000638 <__aeabi_dmul>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4614      	mov	r4, r2
 8002184:	461d      	mov	r5, r3
 8002186:	4b97      	ldr	r3, [pc, #604]	@ (80023e4 <NLLS+0x1144>)
 8002188:	443b      	add	r3, r7
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	00da      	lsls	r2, r3, #3
 800218e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002192:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002196:	4413      	add	r3, r2
 8002198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219c:	4996      	ldr	r1, [pc, #600]	@ (80023f8 <NLLS+0x1158>)
 800219e:	4439      	add	r1, r7
 80021a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021a4:	f7fe f890 	bl	80002c8 <__aeabi_dsub>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4620      	mov	r0, r4
 80021ae:	4629      	mov	r1, r5
 80021b0:	f7fe fa42 	bl	8000638 <__aeabi_dmul>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	4640      	mov	r0, r8
 80021ba:	4649      	mov	r1, r9
 80021bc:	f7fe f886 	bl	80002cc <__adddf3>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4690      	mov	r8, r2
 80021c6:	4699      	mov	r9, r3
 80021c8:	4b8c      	ldr	r3, [pc, #560]	@ (80023fc <NLLS+0x115c>)
 80021ca:	443b      	add	r3, r7
 80021cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d0:	4987      	ldr	r1, [pc, #540]	@ (80023f0 <NLLS+0x1150>)
 80021d2:	4439      	add	r1, r7
 80021d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021d8:	f7fe fa2e 	bl	8000638 <__aeabi_dmul>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	4b86      	ldr	r3, [pc, #536]	@ (8002400 <NLLS+0x1160>)
 80021e6:	443b      	add	r3, r7
 80021e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ec:	f7fe fa24 	bl	8000638 <__aeabi_dmul>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4614      	mov	r4, r2
 80021f6:	461d      	mov	r5, r3
 80021f8:	4b7a      	ldr	r3, [pc, #488]	@ (80023e4 <NLLS+0x1144>)
 80021fa:	443b      	add	r3, r7
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	00da      	lsls	r2, r3, #3
 8002200:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002204:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8002208:	4413      	add	r3, r2
 800220a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220e:	497d      	ldr	r1, [pc, #500]	@ (8002404 <NLLS+0x1164>)
 8002210:	4439      	add	r1, r7
 8002212:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002216:	f7fe f857 	bl	80002c8 <__aeabi_dsub>
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	4620      	mov	r0, r4
 8002220:	4629      	mov	r1, r5
 8002222:	f7fe fa09 	bl	8000638 <__aeabi_dmul>
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	4640      	mov	r0, r8
 800222c:	4649      	mov	r1, r9
 800222e:	f7fe f84b 	bl	80002c8 <__aeabi_dsub>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4692      	mov	sl, r2
 8002238:	469b      	mov	fp, r3
 800223a:	4b70      	ldr	r3, [pc, #448]	@ (80023fc <NLLS+0x115c>)
 800223c:	443b      	add	r3, r7
 800223e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002242:	496a      	ldr	r1, [pc, #424]	@ (80023ec <NLLS+0x114c>)
 8002244:	4439      	add	r1, r7
 8002246:	e9d1 0100 	ldrd	r0, r1, [r1]
 800224a:	f7fe f9f5 	bl	8000638 <__aeabi_dmul>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4690      	mov	r8, r2
 8002254:	4699      	mov	r9, r3
 8002256:	4b6c      	ldr	r3, [pc, #432]	@ (8002408 <NLLS+0x1168>)
 8002258:	443b      	add	r3, r7
 800225a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225e:	4968      	ldr	r1, [pc, #416]	@ (8002400 <NLLS+0x1160>)
 8002260:	4439      	add	r1, r7
 8002262:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002266:	f7fe f9e7 	bl	8000638 <__aeabi_dmul>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	4614      	mov	r4, r2
 8002270:	461d      	mov	r5, r3
 8002272:	4b60      	ldr	r3, [pc, #384]	@ (80023f4 <NLLS+0x1154>)
 8002274:	443b      	add	r3, r7
 8002276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227a:	4964      	ldr	r1, [pc, #400]	@ (800240c <NLLS+0x116c>)
 800227c:	4439      	add	r1, r7
 800227e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002282:	f7fe f9d9 	bl	8000638 <__aeabi_dmul>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4610      	mov	r0, r2
 800228c:	4619      	mov	r1, r3
 800228e:	4b54      	ldr	r3, [pc, #336]	@ (80023e0 <NLLS+0x1140>)
 8002290:	443b      	add	r3, r7
 8002292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002296:	f7fe f9cf 	bl	8000638 <__aeabi_dmul>
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	4620      	mov	r0, r4
 80022a0:	4629      	mov	r1, r5
 80022a2:	f7fe f811 	bl	80002c8 <__aeabi_dsub>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	4640      	mov	r0, r8
 80022ac:	4649      	mov	r1, r9
 80022ae:	f7fe f9c3 	bl	8000638 <__aeabi_dmul>
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	4614      	mov	r4, r2
 80022b8:	461d      	mov	r5, r3
 80022ba:	4b4a      	ldr	r3, [pc, #296]	@ (80023e4 <NLLS+0x1144>)
 80022bc:	443b      	add	r3, r7
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	00da      	lsls	r2, r3, #3
 80022c2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80022c6:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80022ca:	4413      	add	r3, r2
 80022cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d0:	4945      	ldr	r1, [pc, #276]	@ (80023e8 <NLLS+0x1148>)
 80022d2:	4439      	add	r1, r7
 80022d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022d8:	f7fd fff6 	bl	80002c8 <__aeabi_dsub>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4620      	mov	r0, r4
 80022e2:	4629      	mov	r1, r5
 80022e4:	f7fe f9a8 	bl	8000638 <__aeabi_dmul>
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	4690      	mov	r8, r2
 80022ee:	4699      	mov	r9, r3
 80022f0:	4b3e      	ldr	r3, [pc, #248]	@ (80023ec <NLLS+0x114c>)
 80022f2:	443b      	add	r3, r7
 80022f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f8:	493d      	ldr	r1, [pc, #244]	@ (80023f0 <NLLS+0x1150>)
 80022fa:	4439      	add	r1, r7
 80022fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002300:	f7fe f99a 	bl	8000638 <__aeabi_dmul>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4610      	mov	r0, r2
 800230a:	4619      	mov	r1, r3
 800230c:	4b39      	ldr	r3, [pc, #228]	@ (80023f4 <NLLS+0x1154>)
 800230e:	443b      	add	r3, r7
 8002310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002314:	f7fe f990 	bl	8000638 <__aeabi_dmul>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	4614      	mov	r4, r2
 800231e:	461d      	mov	r5, r3
 8002320:	4b30      	ldr	r3, [pc, #192]	@ (80023e4 <NLLS+0x1144>)
 8002322:	443b      	add	r3, r7
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	00da      	lsls	r2, r3, #3
 8002328:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800232c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002330:	4413      	add	r3, r2
 8002332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002336:	4930      	ldr	r1, [pc, #192]	@ (80023f8 <NLLS+0x1158>)
 8002338:	4439      	add	r1, r7
 800233a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800233e:	f7fd ffc3 	bl	80002c8 <__aeabi_dsub>
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	4620      	mov	r0, r4
 8002348:	4629      	mov	r1, r5
 800234a:	f7fe f975 	bl	8000638 <__aeabi_dmul>
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	4640      	mov	r0, r8
 8002354:	4649      	mov	r1, r9
 8002356:	f7fd ffb9 	bl	80002cc <__adddf3>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4690      	mov	r8, r2
 8002360:	4699      	mov	r9, r3
 8002362:	4b26      	ldr	r3, [pc, #152]	@ (80023fc <NLLS+0x115c>)
 8002364:	443b      	add	r3, r7
 8002366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800236a:	4921      	ldr	r1, [pc, #132]	@ (80023f0 <NLLS+0x1150>)
 800236c:	4439      	add	r1, r7
 800236e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002372:	f7fe f961 	bl	8000638 <__aeabi_dmul>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	4610      	mov	r0, r2
 800237c:	4619      	mov	r1, r3
 800237e:	4b20      	ldr	r3, [pc, #128]	@ (8002400 <NLLS+0x1160>)
 8002380:	443b      	add	r3, r7
 8002382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002386:	f7fe f957 	bl	8000638 <__aeabi_dmul>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	4614      	mov	r4, r2
 8002390:	461d      	mov	r5, r3
 8002392:	4b14      	ldr	r3, [pc, #80]	@ (80023e4 <NLLS+0x1144>)
 8002394:	443b      	add	r3, r7
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	00da      	lsls	r2, r3, #3
 800239a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800239e:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80023a2:	4413      	add	r3, r2
 80023a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a8:	4916      	ldr	r1, [pc, #88]	@ (8002404 <NLLS+0x1164>)
 80023aa:	4439      	add	r1, r7
 80023ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80023b0:	f7fd ff8a 	bl	80002c8 <__aeabi_dsub>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4620      	mov	r0, r4
 80023ba:	4629      	mov	r1, r5
 80023bc:	f7fe f93c 	bl	8000638 <__aeabi_dmul>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4640      	mov	r0, r8
 80023c6:	4649      	mov	r1, r9
 80023c8:	f7fd ff7e 	bl	80002c8 <__aeabi_dsub>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	4650      	mov	r0, sl
 80023d2:	4659      	mov	r1, fp
 80023d4:	f7fe f930 	bl	8000638 <__aeabi_dmul>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	e018      	b.n	8002410 <NLLS+0x1170>
 80023de:	bf00      	nop
 80023e0:	0002dfd0 	.word	0x0002dfd0
 80023e4:	0002e008 	.word	0x0002e008
 80023e8:	0002e048 	.word	0x0002e048
 80023ec:	0002e058 	.word	0x0002e058
 80023f0:	0002e060 	.word	0x0002e060
 80023f4:	0002dfb0 	.word	0x0002dfb0
 80023f8:	0002e038 	.word	0x0002e038
 80023fc:	0002e050 	.word	0x0002e050
 8002400:	0002dfc0 	.word	0x0002dfc0
 8002404:	0002e040 	.word	0x0002e040
 8002408:	0002dfc8 	.word	0x0002dfc8
 800240c:	0002dfa8 	.word	0x0002dfa8
 8002410:	4610      	mov	r0, r2
 8002412:	4619      	mov	r1, r3
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	f7fd ff58 	bl	80002cc <__adddf3>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	4614      	mov	r4, r2
 8002422:	461d      	mov	r5, r3
 8002424:	4bb4      	ldr	r3, [pc, #720]	@ (80026f8 <NLLS+0x1458>)
 8002426:	443b      	add	r3, r7
 8002428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242c:	49b2      	ldr	r1, [pc, #712]	@ (80026f8 <NLLS+0x1458>)
 800242e:	4439      	add	r1, r7
 8002430:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002434:	f7fe f900 	bl	8000638 <__aeabi_dmul>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4610      	mov	r0, r2
 800243e:	4619      	mov	r1, r3
 8002440:	4bad      	ldr	r3, [pc, #692]	@ (80026f8 <NLLS+0x1458>)
 8002442:	443b      	add	r3, r7
 8002444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002448:	f7fe f8f6 	bl	8000638 <__aeabi_dmul>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4610      	mov	r0, r2
 8002452:	4619      	mov	r1, r3
 8002454:	4ba9      	ldr	r3, [pc, #676]	@ (80026fc <NLLS+0x145c>)
 8002456:	443b      	add	r3, r7
 8002458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245c:	f7fe f8ec 	bl	8000638 <__aeabi_dmul>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4610      	mov	r0, r2
 8002466:	4619      	mov	r1, r3
 8002468:	4ba4      	ldr	r3, [pc, #656]	@ (80026fc <NLLS+0x145c>)
 800246a:	443b      	add	r3, r7
 800246c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002470:	f7fe f8e2 	bl	8000638 <__aeabi_dmul>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4610      	mov	r0, r2
 800247a:	4619      	mov	r1, r3
 800247c:	4ba0      	ldr	r3, [pc, #640]	@ (8002700 <NLLS+0x1460>)
 800247e:	443b      	add	r3, r7
 8002480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002484:	f7fe f8d8 	bl	8000638 <__aeabi_dmul>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4610      	mov	r0, r2
 800248e:	4619      	mov	r1, r3
 8002490:	4b9b      	ldr	r3, [pc, #620]	@ (8002700 <NLLS+0x1460>)
 8002492:	443b      	add	r3, r7
 8002494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002498:	f7fe f8ce 	bl	8000638 <__aeabi_dmul>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4610      	mov	r0, r2
 80024a2:	4619      	mov	r1, r3
 80024a4:	4b97      	ldr	r3, [pc, #604]	@ (8002704 <NLLS+0x1464>)
 80024a6:	443b      	add	r3, r7
 80024a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ac:	f7fe f8c4 	bl	8000638 <__aeabi_dmul>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	4610      	mov	r0, r2
 80024b6:	4619      	mov	r1, r3
 80024b8:	4b92      	ldr	r3, [pc, #584]	@ (8002704 <NLLS+0x1464>)
 80024ba:	443b      	add	r3, r7
 80024bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c0:	f7fe f8ba 	bl	8000638 <__aeabi_dmul>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	4610      	mov	r0, r2
 80024ca:	4619      	mov	r1, r3
 80024cc:	4b8e      	ldr	r3, [pc, #568]	@ (8002708 <NLLS+0x1468>)
 80024ce:	443b      	add	r3, r7
 80024d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d4:	f7fe f8b0 	bl	8000638 <__aeabi_dmul>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4610      	mov	r0, r2
 80024de:	4619      	mov	r1, r3
 80024e0:	4b89      	ldr	r3, [pc, #548]	@ (8002708 <NLLS+0x1468>)
 80024e2:	443b      	add	r3, r7
 80024e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e8:	f7fe f8a6 	bl	8000638 <__aeabi_dmul>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4610      	mov	r0, r2
 80024f2:	4619      	mov	r1, r3
 80024f4:	4b85      	ldr	r3, [pc, #532]	@ (800270c <NLLS+0x146c>)
 80024f6:	443b      	add	r3, r7
 80024f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fc:	f7fe f89c 	bl	8000638 <__aeabi_dmul>
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	4610      	mov	r0, r2
 8002506:	4619      	mov	r1, r3
 8002508:	4b80      	ldr	r3, [pc, #512]	@ (800270c <NLLS+0x146c>)
 800250a:	443b      	add	r3, r7
 800250c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002510:	f7fe f892 	bl	8000638 <__aeabi_dmul>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4620      	mov	r0, r4
 800251a:	4629      	mov	r1, r5
 800251c:	f7fe f9b6 	bl	800088c <__aeabi_ddiv>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002528:	f7fd fece 	bl	80002c8 <__aeabi_dsub>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002534:	4b75      	ldr	r3, [pc, #468]	@ (800270c <NLLS+0x146c>)
 8002536:	443b      	add	r3, r7
 8002538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253c:	496f      	ldr	r1, [pc, #444]	@ (80026fc <NLLS+0x145c>)
 800253e:	4439      	add	r1, r7
 8002540:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002544:	f7fe f878 	bl	8000638 <__aeabi_dmul>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4614      	mov	r4, r2
 800254e:	461d      	mov	r5, r3
 8002550:	4b6f      	ldr	r3, [pc, #444]	@ (8002710 <NLLS+0x1470>)
 8002552:	443b      	add	r3, r7
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	00da      	lsls	r2, r3, #3
 8002558:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800255c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002560:	4413      	add	r3, r2
 8002562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002566:	496b      	ldr	r1, [pc, #428]	@ (8002714 <NLLS+0x1474>)
 8002568:	4439      	add	r1, r7
 800256a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800256e:	f7fd feab 	bl	80002c8 <__aeabi_dsub>
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	4620      	mov	r0, r4
 8002578:	4629      	mov	r1, r5
 800257a:	f7fe f85d 	bl	8000638 <__aeabi_dmul>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	4690      	mov	r8, r2
 8002584:	4699      	mov	r9, r3
 8002586:	4b64      	ldr	r3, [pc, #400]	@ (8002718 <NLLS+0x1478>)
 8002588:	443b      	add	r3, r7
 800258a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258e:	495c      	ldr	r1, [pc, #368]	@ (8002700 <NLLS+0x1460>)
 8002590:	4439      	add	r1, r7
 8002592:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002596:	f7fe f84f 	bl	8000638 <__aeabi_dmul>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4614      	mov	r4, r2
 80025a0:	461d      	mov	r5, r3
 80025a2:	4b5b      	ldr	r3, [pc, #364]	@ (8002710 <NLLS+0x1470>)
 80025a4:	443b      	add	r3, r7
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	00da      	lsls	r2, r3, #3
 80025aa:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80025ae:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80025b2:	4413      	add	r3, r2
 80025b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b8:	4958      	ldr	r1, [pc, #352]	@ (800271c <NLLS+0x147c>)
 80025ba:	4439      	add	r1, r7
 80025bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025c0:	f7fd fe82 	bl	80002c8 <__aeabi_dsub>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	4620      	mov	r0, r4
 80025ca:	4629      	mov	r1, r5
 80025cc:	f7fe f834 	bl	8000638 <__aeabi_dmul>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4640      	mov	r0, r8
 80025d6:	4649      	mov	r1, r9
 80025d8:	f7fd fe76 	bl	80002c8 <__aeabi_dsub>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4610      	mov	r0, r2
 80025e2:	4619      	mov	r1, r3
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	f7fd fe70 	bl	80002cc <__adddf3>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	4692      	mov	sl, r2
 80025f2:	469b      	mov	fp, r3
 80025f4:	4b42      	ldr	r3, [pc, #264]	@ (8002700 <NLLS+0x1460>)
 80025f6:	443b      	add	r3, r7
 80025f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fc:	493f      	ldr	r1, [pc, #252]	@ (80026fc <NLLS+0x145c>)
 80025fe:	4439      	add	r1, r7
 8002600:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002604:	f7fe f818 	bl	8000638 <__aeabi_dmul>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4690      	mov	r8, r2
 800260e:	4699      	mov	r9, r3
 8002610:	4b43      	ldr	r3, [pc, #268]	@ (8002720 <NLLS+0x1480>)
 8002612:	443b      	add	r3, r7
 8002614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002618:	493f      	ldr	r1, [pc, #252]	@ (8002718 <NLLS+0x1478>)
 800261a:	4439      	add	r1, r7
 800261c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002620:	f7fe f80a 	bl	8000638 <__aeabi_dmul>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4614      	mov	r4, r2
 800262a:	461d      	mov	r5, r3
 800262c:	4b37      	ldr	r3, [pc, #220]	@ (800270c <NLLS+0x146c>)
 800262e:	443b      	add	r3, r7
 8002630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002634:	4933      	ldr	r1, [pc, #204]	@ (8002704 <NLLS+0x1464>)
 8002636:	4439      	add	r1, r7
 8002638:	e9d1 0100 	ldrd	r0, r1, [r1]
 800263c:	f7fd fffc 	bl	8000638 <__aeabi_dmul>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4610      	mov	r0, r2
 8002646:	4619      	mov	r1, r3
 8002648:	4b36      	ldr	r3, [pc, #216]	@ (8002724 <NLLS+0x1484>)
 800264a:	443b      	add	r3, r7
 800264c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002650:	f7fd fff2 	bl	8000638 <__aeabi_dmul>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4620      	mov	r0, r4
 800265a:	4629      	mov	r1, r5
 800265c:	f7fd fe34 	bl	80002c8 <__aeabi_dsub>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	4640      	mov	r0, r8
 8002666:	4649      	mov	r1, r9
 8002668:	f7fd ffe6 	bl	8000638 <__aeabi_dmul>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4614      	mov	r4, r2
 8002672:	461d      	mov	r5, r3
 8002674:	4b26      	ldr	r3, [pc, #152]	@ (8002710 <NLLS+0x1470>)
 8002676:	443b      	add	r3, r7
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	00da      	lsls	r2, r3, #3
 800267c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002680:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8002684:	4413      	add	r3, r2
 8002686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268a:	4927      	ldr	r1, [pc, #156]	@ (8002728 <NLLS+0x1488>)
 800268c:	4439      	add	r1, r7
 800268e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002692:	f7fd fe19 	bl	80002c8 <__aeabi_dsub>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	4620      	mov	r0, r4
 800269c:	4629      	mov	r1, r5
 800269e:	f7fd ffcb 	bl	8000638 <__aeabi_dmul>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	4690      	mov	r8, r2
 80026a8:	4699      	mov	r9, r3
 80026aa:	4b14      	ldr	r3, [pc, #80]	@ (80026fc <NLLS+0x145c>)
 80026ac:	443b      	add	r3, r7
 80026ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b2:	4911      	ldr	r1, [pc, #68]	@ (80026f8 <NLLS+0x1458>)
 80026b4:	4439      	add	r1, r7
 80026b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026ba:	f7fd ffbd 	bl	8000638 <__aeabi_dmul>
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	4610      	mov	r0, r2
 80026c4:	4619      	mov	r1, r3
 80026c6:	4b11      	ldr	r3, [pc, #68]	@ (800270c <NLLS+0x146c>)
 80026c8:	443b      	add	r3, r7
 80026ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ce:	f7fd ffb3 	bl	8000638 <__aeabi_dmul>
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	4614      	mov	r4, r2
 80026d8:	461d      	mov	r5, r3
 80026da:	4b0d      	ldr	r3, [pc, #52]	@ (8002710 <NLLS+0x1470>)
 80026dc:	443b      	add	r3, r7
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	00da      	lsls	r2, r3, #3
 80026e2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80026e6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80026ea:	4413      	add	r3, r2
 80026ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f0:	4908      	ldr	r1, [pc, #32]	@ (8002714 <NLLS+0x1474>)
 80026f2:	4439      	add	r1, r7
 80026f4:	e01a      	b.n	800272c <NLLS+0x148c>
 80026f6:	bf00      	nop
 80026f8:	0002e060 	.word	0x0002e060
 80026fc:	0002e058 	.word	0x0002e058
 8002700:	0002e050 	.word	0x0002e050
 8002704:	0002dfa8 	.word	0x0002dfa8
 8002708:	0002dfb8 	.word	0x0002dfb8
 800270c:	0002dfb0 	.word	0x0002dfb0
 8002710:	0002e008 	.word	0x0002e008
 8002714:	0002e038 	.word	0x0002e038
 8002718:	0002dfc0 	.word	0x0002dfc0
 800271c:	0002e040 	.word	0x0002e040
 8002720:	0002dfc8 	.word	0x0002dfc8
 8002724:	0002dfd0 	.word	0x0002dfd0
 8002728:	0002e048 	.word	0x0002e048
 800272c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002730:	f7fd fdca 	bl	80002c8 <__aeabi_dsub>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4620      	mov	r0, r4
 800273a:	4629      	mov	r1, r5
 800273c:	f7fd ff7c 	bl	8000638 <__aeabi_dmul>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4640      	mov	r0, r8
 8002746:	4649      	mov	r1, r9
 8002748:	f7fd fdc0 	bl	80002cc <__adddf3>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	4690      	mov	r8, r2
 8002752:	4699      	mov	r9, r3
 8002754:	4bb5      	ldr	r3, [pc, #724]	@ (8002a2c <NLLS+0x178c>)
 8002756:	443b      	add	r3, r7
 8002758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275c:	49b4      	ldr	r1, [pc, #720]	@ (8002a30 <NLLS+0x1790>)
 800275e:	4439      	add	r1, r7
 8002760:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002764:	f7fd ff68 	bl	8000638 <__aeabi_dmul>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4610      	mov	r0, r2
 800276e:	4619      	mov	r1, r3
 8002770:	4bb0      	ldr	r3, [pc, #704]	@ (8002a34 <NLLS+0x1794>)
 8002772:	443b      	add	r3, r7
 8002774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002778:	f7fd ff5e 	bl	8000638 <__aeabi_dmul>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4614      	mov	r4, r2
 8002782:	461d      	mov	r5, r3
 8002784:	4bac      	ldr	r3, [pc, #688]	@ (8002a38 <NLLS+0x1798>)
 8002786:	443b      	add	r3, r7
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	00da      	lsls	r2, r3, #3
 800278c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002790:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8002794:	4413      	add	r3, r2
 8002796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279a:	49a8      	ldr	r1, [pc, #672]	@ (8002a3c <NLLS+0x179c>)
 800279c:	4439      	add	r1, r7
 800279e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80027a2:	f7fd fd91 	bl	80002c8 <__aeabi_dsub>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	4620      	mov	r0, r4
 80027ac:	4629      	mov	r1, r5
 80027ae:	f7fd ff43 	bl	8000638 <__aeabi_dmul>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	4640      	mov	r0, r8
 80027b8:	4649      	mov	r1, r9
 80027ba:	f7fd fd85 	bl	80002c8 <__aeabi_dsub>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	4650      	mov	r0, sl
 80027c4:	4659      	mov	r1, fp
 80027c6:	f7fd ff37 	bl	8000638 <__aeabi_dmul>
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	4614      	mov	r4, r2
 80027d0:	461d      	mov	r5, r3
 80027d2:	4b97      	ldr	r3, [pc, #604]	@ (8002a30 <NLLS+0x1790>)
 80027d4:	443b      	add	r3, r7
 80027d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027da:	4995      	ldr	r1, [pc, #596]	@ (8002a30 <NLLS+0x1790>)
 80027dc:	4439      	add	r1, r7
 80027de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80027e2:	f7fd ff29 	bl	8000638 <__aeabi_dmul>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	4610      	mov	r0, r2
 80027ec:	4619      	mov	r1, r3
 80027ee:	4b94      	ldr	r3, [pc, #592]	@ (8002a40 <NLLS+0x17a0>)
 80027f0:	443b      	add	r3, r7
 80027f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f6:	f7fd ff1f 	bl	8000638 <__aeabi_dmul>
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	4610      	mov	r0, r2
 8002800:	4619      	mov	r1, r3
 8002802:	4b8f      	ldr	r3, [pc, #572]	@ (8002a40 <NLLS+0x17a0>)
 8002804:	443b      	add	r3, r7
 8002806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280a:	f7fd ff15 	bl	8000638 <__aeabi_dmul>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	4610      	mov	r0, r2
 8002814:	4619      	mov	r1, r3
 8002816:	4b85      	ldr	r3, [pc, #532]	@ (8002a2c <NLLS+0x178c>)
 8002818:	443b      	add	r3, r7
 800281a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281e:	f7fd ff0b 	bl	8000638 <__aeabi_dmul>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4610      	mov	r0, r2
 8002828:	4619      	mov	r1, r3
 800282a:	4b80      	ldr	r3, [pc, #512]	@ (8002a2c <NLLS+0x178c>)
 800282c:	443b      	add	r3, r7
 800282e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002832:	f7fd ff01 	bl	8000638 <__aeabi_dmul>
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	4610      	mov	r0, r2
 800283c:	4619      	mov	r1, r3
 800283e:	4b81      	ldr	r3, [pc, #516]	@ (8002a44 <NLLS+0x17a4>)
 8002840:	443b      	add	r3, r7
 8002842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002846:	f7fd fef7 	bl	8000638 <__aeabi_dmul>
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	4610      	mov	r0, r2
 8002850:	4619      	mov	r1, r3
 8002852:	4b7c      	ldr	r3, [pc, #496]	@ (8002a44 <NLLS+0x17a4>)
 8002854:	443b      	add	r3, r7
 8002856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285a:	f7fd feed 	bl	8000638 <__aeabi_dmul>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	4610      	mov	r0, r2
 8002864:	4619      	mov	r1, r3
 8002866:	4b78      	ldr	r3, [pc, #480]	@ (8002a48 <NLLS+0x17a8>)
 8002868:	443b      	add	r3, r7
 800286a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286e:	f7fd fee3 	bl	8000638 <__aeabi_dmul>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4610      	mov	r0, r2
 8002878:	4619      	mov	r1, r3
 800287a:	4b73      	ldr	r3, [pc, #460]	@ (8002a48 <NLLS+0x17a8>)
 800287c:	443b      	add	r3, r7
 800287e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002882:	f7fd fed9 	bl	8000638 <__aeabi_dmul>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	4610      	mov	r0, r2
 800288c:	4619      	mov	r1, r3
 800288e:	4b6f      	ldr	r3, [pc, #444]	@ (8002a4c <NLLS+0x17ac>)
 8002890:	443b      	add	r3, r7
 8002892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002896:	f7fd fecf 	bl	8000638 <__aeabi_dmul>
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	4610      	mov	r0, r2
 80028a0:	4619      	mov	r1, r3
 80028a2:	4b6a      	ldr	r3, [pc, #424]	@ (8002a4c <NLLS+0x17ac>)
 80028a4:	443b      	add	r3, r7
 80028a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028aa:	f7fd fec5 	bl	8000638 <__aeabi_dmul>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4620      	mov	r0, r4
 80028b4:	4629      	mov	r1, r5
 80028b6:	f7fd ffe9 	bl	800088c <__aeabi_ddiv>
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028c2:	f7fd fd03 	bl	80002cc <__adddf3>
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	4961      	ldr	r1, [pc, #388]	@ (8002a50 <NLLS+0x17b0>)
 80028cc:	4439      	add	r1, r7
 80028ce:	f5a1 7006 	sub.w	r0, r1, #536	@ 0x218
 80028d2:	4959      	ldr	r1, [pc, #356]	@ (8002a38 <NLLS+0x1798>)
 80028d4:	4439      	add	r1, r7
 80028d6:	6809      	ldr	r1, [r1, #0]
 80028d8:	00c9      	lsls	r1, r1, #3
 80028da:	4401      	add	r1, r0
 80028dc:	e9c1 2300 	strd	r2, r3, [r1]

			mat_H[1][i] = -(2*(by - my[i])*(by*sx*sz*sin_lambda*sin_lambda - my[i]*sx*sz*sin_lambda*sin_lambda + by*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - my[i]*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - bz*sx*sy*cos_rho*sin_lambda + mz[i]*sx*sy*cos_rho*sin_lambda - bx*sy*sz*sin_lambda*sin_lambda*sin_rho + mx[i]*sy*sz*sin_lambda*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + mx[i]*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + bx*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi - mx[i]*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi))/(sx*(sy*sy*sy)*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 80028e0:	4b55      	ldr	r3, [pc, #340]	@ (8002a38 <NLLS+0x1798>)
 80028e2:	443b      	add	r3, r7
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80028ec:	f852 2c38 	ldr.w	r2, [r2, #-56]
 80028f0:	4413      	add	r3, r2
 80028f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f6:	4951      	ldr	r1, [pc, #324]	@ (8002a3c <NLLS+0x179c>)
 80028f8:	4439      	add	r1, r7
 80028fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80028fe:	f7fd fce3 	bl	80002c8 <__aeabi_dsub>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	4610      	mov	r0, r2
 8002908:	4619      	mov	r1, r3
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	f7fd fcdd 	bl	80002cc <__adddf3>
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	4690      	mov	r8, r2
 8002918:	4699      	mov	r9, r3
 800291a:	4b45      	ldr	r3, [pc, #276]	@ (8002a30 <NLLS+0x1790>)
 800291c:	443b      	add	r3, r7
 800291e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002922:	4946      	ldr	r1, [pc, #280]	@ (8002a3c <NLLS+0x179c>)
 8002924:	4439      	add	r1, r7
 8002926:	e9d1 0100 	ldrd	r0, r1, [r1]
 800292a:	f7fd fe85 	bl	8000638 <__aeabi_dmul>
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	4610      	mov	r0, r2
 8002934:	4619      	mov	r1, r3
 8002936:	4b3d      	ldr	r3, [pc, #244]	@ (8002a2c <NLLS+0x178c>)
 8002938:	443b      	add	r3, r7
 800293a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293e:	f7fd fe7b 	bl	8000638 <__aeabi_dmul>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4610      	mov	r0, r2
 8002948:	4619      	mov	r1, r3
 800294a:	4b3a      	ldr	r3, [pc, #232]	@ (8002a34 <NLLS+0x1794>)
 800294c:	443b      	add	r3, r7
 800294e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002952:	f7fd fe71 	bl	8000638 <__aeabi_dmul>
 8002956:	4602      	mov	r2, r0
 8002958:	460b      	mov	r3, r1
 800295a:	4610      	mov	r0, r2
 800295c:	4619      	mov	r1, r3
 800295e:	4b35      	ldr	r3, [pc, #212]	@ (8002a34 <NLLS+0x1794>)
 8002960:	443b      	add	r3, r7
 8002962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002966:	f7fd fe67 	bl	8000638 <__aeabi_dmul>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	4614      	mov	r4, r2
 8002970:	461d      	mov	r5, r3
 8002972:	4b31      	ldr	r3, [pc, #196]	@ (8002a38 <NLLS+0x1798>)
 8002974:	443b      	add	r3, r7
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	00da      	lsls	r2, r3, #3
 800297a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800297e:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8002982:	4413      	add	r3, r2
 8002984:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002988:	4b29      	ldr	r3, [pc, #164]	@ (8002a30 <NLLS+0x1790>)
 800298a:	443b      	add	r3, r7
 800298c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002990:	f7fd fe52 	bl	8000638 <__aeabi_dmul>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4610      	mov	r0, r2
 800299a:	4619      	mov	r1, r3
 800299c:	4b23      	ldr	r3, [pc, #140]	@ (8002a2c <NLLS+0x178c>)
 800299e:	443b      	add	r3, r7
 80029a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a4:	f7fd fe48 	bl	8000638 <__aeabi_dmul>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4610      	mov	r0, r2
 80029ae:	4619      	mov	r1, r3
 80029b0:	4b20      	ldr	r3, [pc, #128]	@ (8002a34 <NLLS+0x1794>)
 80029b2:	443b      	add	r3, r7
 80029b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b8:	f7fd fe3e 	bl	8000638 <__aeabi_dmul>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4610      	mov	r0, r2
 80029c2:	4619      	mov	r1, r3
 80029c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a34 <NLLS+0x1794>)
 80029c6:	443b      	add	r3, r7
 80029c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029cc:	f7fd fe34 	bl	8000638 <__aeabi_dmul>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	4620      	mov	r0, r4
 80029d6:	4629      	mov	r1, r5
 80029d8:	f7fd fc76 	bl	80002c8 <__aeabi_dsub>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4614      	mov	r4, r2
 80029e2:	461d      	mov	r5, r3
 80029e4:	4b12      	ldr	r3, [pc, #72]	@ (8002a30 <NLLS+0x1790>)
 80029e6:	443b      	add	r3, r7
 80029e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ec:	4913      	ldr	r1, [pc, #76]	@ (8002a3c <NLLS+0x179c>)
 80029ee:	4439      	add	r1, r7
 80029f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029f4:	f7fd fe20 	bl	8000638 <__aeabi_dmul>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4610      	mov	r0, r2
 80029fe:	4619      	mov	r1, r3
 8002a00:	4b0a      	ldr	r3, [pc, #40]	@ (8002a2c <NLLS+0x178c>)
 8002a02:	443b      	add	r3, r7
 8002a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a08:	f7fd fe16 	bl	8000638 <__aeabi_dmul>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4610      	mov	r0, r2
 8002a12:	4619      	mov	r1, r3
 8002a14:	4b0b      	ldr	r3, [pc, #44]	@ (8002a44 <NLLS+0x17a4>)
 8002a16:	443b      	add	r3, r7
 8002a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1c:	f7fd fe0c 	bl	8000638 <__aeabi_dmul>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4610      	mov	r0, r2
 8002a26:	4619      	mov	r1, r3
 8002a28:	e014      	b.n	8002a54 <NLLS+0x17b4>
 8002a2a:	bf00      	nop
 8002a2c:	0002e050 	.word	0x0002e050
 8002a30:	0002e060 	.word	0x0002e060
 8002a34:	0002dfc0 	.word	0x0002dfc0
 8002a38:	0002e008 	.word	0x0002e008
 8002a3c:	0002e040 	.word	0x0002e040
 8002a40:	0002e058 	.word	0x0002e058
 8002a44:	0002dfa8 	.word	0x0002dfa8
 8002a48:	0002dfb8 	.word	0x0002dfb8
 8002a4c:	0002dfb0 	.word	0x0002dfb0
 8002a50:	00014070 	.word	0x00014070
 8002a54:	4bb5      	ldr	r3, [pc, #724]	@ (8002d2c <NLLS+0x1a8c>)
 8002a56:	443b      	add	r3, r7
 8002a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5c:	f7fd fdec 	bl	8000638 <__aeabi_dmul>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4610      	mov	r0, r2
 8002a66:	4619      	mov	r1, r3
 8002a68:	4bb1      	ldr	r3, [pc, #708]	@ (8002d30 <NLLS+0x1a90>)
 8002a6a:	443b      	add	r3, r7
 8002a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a70:	f7fd fde2 	bl	8000638 <__aeabi_dmul>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4610      	mov	r0, r2
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4bac      	ldr	r3, [pc, #688]	@ (8002d30 <NLLS+0x1a90>)
 8002a7e:	443b      	add	r3, r7
 8002a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a84:	f7fd fdd8 	bl	8000638 <__aeabi_dmul>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4620      	mov	r0, r4
 8002a8e:	4629      	mov	r1, r5
 8002a90:	f7fd fc1c 	bl	80002cc <__adddf3>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4614      	mov	r4, r2
 8002a9a:	461d      	mov	r5, r3
 8002a9c:	4ba5      	ldr	r3, [pc, #660]	@ (8002d34 <NLLS+0x1a94>)
 8002a9e:	443b      	add	r3, r7
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	00da      	lsls	r2, r3, #3
 8002aa4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002aa8:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8002aac:	4413      	add	r3, r2
 8002aae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ab2:	4ba1      	ldr	r3, [pc, #644]	@ (8002d38 <NLLS+0x1a98>)
 8002ab4:	443b      	add	r3, r7
 8002ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aba:	f7fd fdbd 	bl	8000638 <__aeabi_dmul>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4610      	mov	r0, r2
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4b9d      	ldr	r3, [pc, #628]	@ (8002d3c <NLLS+0x1a9c>)
 8002ac8:	443b      	add	r3, r7
 8002aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ace:	f7fd fdb3 	bl	8000638 <__aeabi_dmul>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4b94      	ldr	r3, [pc, #592]	@ (8002d2c <NLLS+0x1a8c>)
 8002adc:	443b      	add	r3, r7
 8002ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae2:	f7fd fda9 	bl	8000638 <__aeabi_dmul>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4610      	mov	r0, r2
 8002aec:	4619      	mov	r1, r3
 8002aee:	4b8f      	ldr	r3, [pc, #572]	@ (8002d2c <NLLS+0x1a8c>)
 8002af0:	443b      	add	r3, r7
 8002af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af6:	f7fd fd9f 	bl	8000638 <__aeabi_dmul>
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	4610      	mov	r0, r2
 8002b00:	4619      	mov	r1, r3
 8002b02:	4b8b      	ldr	r3, [pc, #556]	@ (8002d30 <NLLS+0x1a90>)
 8002b04:	443b      	add	r3, r7
 8002b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0a:	f7fd fd95 	bl	8000638 <__aeabi_dmul>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4610      	mov	r0, r2
 8002b14:	4619      	mov	r1, r3
 8002b16:	4b86      	ldr	r3, [pc, #536]	@ (8002d30 <NLLS+0x1a90>)
 8002b18:	443b      	add	r3, r7
 8002b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1e:	f7fd fd8b 	bl	8000638 <__aeabi_dmul>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4620      	mov	r0, r4
 8002b28:	4629      	mov	r1, r5
 8002b2a:	f7fd fbcd 	bl	80002c8 <__aeabi_dsub>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	4614      	mov	r4, r2
 8002b34:	461d      	mov	r5, r3
 8002b36:	4b80      	ldr	r3, [pc, #512]	@ (8002d38 <NLLS+0x1a98>)
 8002b38:	443b      	add	r3, r7
 8002b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3e:	4980      	ldr	r1, [pc, #512]	@ (8002d40 <NLLS+0x1aa0>)
 8002b40:	4439      	add	r1, r7
 8002b42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b46:	f7fd fd77 	bl	8000638 <__aeabi_dmul>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	4610      	mov	r0, r2
 8002b50:	4619      	mov	r1, r3
 8002b52:	4b7c      	ldr	r3, [pc, #496]	@ (8002d44 <NLLS+0x1aa4>)
 8002b54:	443b      	add	r3, r7
 8002b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b5a:	f7fd fd6d 	bl	8000638 <__aeabi_dmul>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	4610      	mov	r0, r2
 8002b64:	4619      	mov	r1, r3
 8002b66:	4b78      	ldr	r3, [pc, #480]	@ (8002d48 <NLLS+0x1aa8>)
 8002b68:	443b      	add	r3, r7
 8002b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6e:	f7fd fd63 	bl	8000638 <__aeabi_dmul>
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	4610      	mov	r0, r2
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4b74      	ldr	r3, [pc, #464]	@ (8002d4c <NLLS+0x1aac>)
 8002b7c:	443b      	add	r3, r7
 8002b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b82:	f7fd fd59 	bl	8000638 <__aeabi_dmul>
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	4629      	mov	r1, r5
 8002b8e:	f7fd fb9b 	bl	80002c8 <__aeabi_dsub>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	4614      	mov	r4, r2
 8002b98:	461d      	mov	r5, r3
 8002b9a:	4b66      	ldr	r3, [pc, #408]	@ (8002d34 <NLLS+0x1a94>)
 8002b9c:	443b      	add	r3, r7
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	00da      	lsls	r2, r3, #3
 8002ba2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002ba6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002baa:	4413      	add	r3, r2
 8002bac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bb0:	4b61      	ldr	r3, [pc, #388]	@ (8002d38 <NLLS+0x1a98>)
 8002bb2:	443b      	add	r3, r7
 8002bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb8:	f7fd fd3e 	bl	8000638 <__aeabi_dmul>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4610      	mov	r0, r2
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4b5f      	ldr	r3, [pc, #380]	@ (8002d44 <NLLS+0x1aa4>)
 8002bc6:	443b      	add	r3, r7
 8002bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bcc:	f7fd fd34 	bl	8000638 <__aeabi_dmul>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4b5b      	ldr	r3, [pc, #364]	@ (8002d48 <NLLS+0x1aa8>)
 8002bda:	443b      	add	r3, r7
 8002bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be0:	f7fd fd2a 	bl	8000638 <__aeabi_dmul>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	4610      	mov	r0, r2
 8002bea:	4619      	mov	r1, r3
 8002bec:	4b57      	ldr	r3, [pc, #348]	@ (8002d4c <NLLS+0x1aac>)
 8002bee:	443b      	add	r3, r7
 8002bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf4:	f7fd fd20 	bl	8000638 <__aeabi_dmul>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4620      	mov	r0, r4
 8002bfe:	4629      	mov	r1, r5
 8002c00:	f7fd fb64 	bl	80002cc <__adddf3>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4614      	mov	r4, r2
 8002c0a:	461d      	mov	r5, r3
 8002c0c:	4b4d      	ldr	r3, [pc, #308]	@ (8002d44 <NLLS+0x1aa4>)
 8002c0e:	443b      	add	r3, r7
 8002c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c14:	494e      	ldr	r1, [pc, #312]	@ (8002d50 <NLLS+0x1ab0>)
 8002c16:	4439      	add	r1, r7
 8002c18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c1c:	f7fd fd0c 	bl	8000638 <__aeabi_dmul>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4610      	mov	r0, r2
 8002c26:	4619      	mov	r1, r3
 8002c28:	4b44      	ldr	r3, [pc, #272]	@ (8002d3c <NLLS+0x1a9c>)
 8002c2a:	443b      	add	r3, r7
 8002c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c30:	f7fd fd02 	bl	8000638 <__aeabi_dmul>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4610      	mov	r0, r2
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4b43      	ldr	r3, [pc, #268]	@ (8002d4c <NLLS+0x1aac>)
 8002c3e:	443b      	add	r3, r7
 8002c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c44:	f7fd fcf8 	bl	8000638 <__aeabi_dmul>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4610      	mov	r0, r2
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4b3e      	ldr	r3, [pc, #248]	@ (8002d4c <NLLS+0x1aac>)
 8002c52:	443b      	add	r3, r7
 8002c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c58:	f7fd fcee 	bl	8000638 <__aeabi_dmul>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4610      	mov	r0, r2
 8002c62:	4619      	mov	r1, r3
 8002c64:	4b3b      	ldr	r3, [pc, #236]	@ (8002d54 <NLLS+0x1ab4>)
 8002c66:	443b      	add	r3, r7
 8002c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6c:	f7fd fce4 	bl	8000638 <__aeabi_dmul>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4620      	mov	r0, r4
 8002c76:	4629      	mov	r1, r5
 8002c78:	f7fd fb26 	bl	80002c8 <__aeabi_dsub>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4614      	mov	r4, r2
 8002c82:	461d      	mov	r5, r3
 8002c84:	4b2b      	ldr	r3, [pc, #172]	@ (8002d34 <NLLS+0x1a94>)
 8002c86:	443b      	add	r3, r7
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	00da      	lsls	r2, r3, #3
 8002c8c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002c90:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8002c94:	4413      	add	r3, r2
 8002c96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c9a:	4b2a      	ldr	r3, [pc, #168]	@ (8002d44 <NLLS+0x1aa4>)
 8002c9c:	443b      	add	r3, r7
 8002c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca2:	f7fd fcc9 	bl	8000638 <__aeabi_dmul>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	4610      	mov	r0, r2
 8002cac:	4619      	mov	r1, r3
 8002cae:	4b23      	ldr	r3, [pc, #140]	@ (8002d3c <NLLS+0x1a9c>)
 8002cb0:	443b      	add	r3, r7
 8002cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb6:	f7fd fcbf 	bl	8000638 <__aeabi_dmul>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4610      	mov	r0, r2
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4b22      	ldr	r3, [pc, #136]	@ (8002d4c <NLLS+0x1aac>)
 8002cc4:	443b      	add	r3, r7
 8002cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cca:	f7fd fcb5 	bl	8000638 <__aeabi_dmul>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8002d4c <NLLS+0x1aac>)
 8002cd8:	443b      	add	r3, r7
 8002cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cde:	f7fd fcab 	bl	8000638 <__aeabi_dmul>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	4610      	mov	r0, r2
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4b1a      	ldr	r3, [pc, #104]	@ (8002d54 <NLLS+0x1ab4>)
 8002cec:	443b      	add	r3, r7
 8002cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf2:	f7fd fca1 	bl	8000638 <__aeabi_dmul>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	4629      	mov	r1, r5
 8002cfe:	f7fd fae5 	bl	80002cc <__adddf3>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4614      	mov	r4, r2
 8002d08:	461d      	mov	r5, r3
 8002d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d44 <NLLS+0x1aa4>)
 8002d0c:	443b      	add	r3, r7
 8002d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d12:	490f      	ldr	r1, [pc, #60]	@ (8002d50 <NLLS+0x1ab0>)
 8002d14:	4439      	add	r1, r7
 8002d16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d1a:	f7fd fc8d 	bl	8000638 <__aeabi_dmul>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	4610      	mov	r0, r2
 8002d24:	4619      	mov	r1, r3
 8002d26:	4b05      	ldr	r3, [pc, #20]	@ (8002d3c <NLLS+0x1a9c>)
 8002d28:	443b      	add	r3, r7
 8002d2a:	e015      	b.n	8002d58 <NLLS+0x1ab8>
 8002d2c:	0002dfa8 	.word	0x0002dfa8
 8002d30:	0002dfb8 	.word	0x0002dfb8
 8002d34:	0002e008 	.word	0x0002e008
 8002d38:	0002e060 	.word	0x0002e060
 8002d3c:	0002e050 	.word	0x0002e050
 8002d40:	0002e038 	.word	0x0002e038
 8002d44:	0002e058 	.word	0x0002e058
 8002d48:	0002dfb0 	.word	0x0002dfb0
 8002d4c:	0002dfc0 	.word	0x0002dfc0
 8002d50:	0002e048 	.word	0x0002e048
 8002d54:	0002dfc8 	.word	0x0002dfc8
 8002d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5c:	f7fd fc6c 	bl	8000638 <__aeabi_dmul>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4610      	mov	r0, r2
 8002d66:	4619      	mov	r1, r3
 8002d68:	4bb6      	ldr	r3, [pc, #728]	@ (8003044 <NLLS+0x1da4>)
 8002d6a:	443b      	add	r3, r7
 8002d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d70:	f7fd fc62 	bl	8000638 <__aeabi_dmul>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4610      	mov	r0, r2
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4bb1      	ldr	r3, [pc, #708]	@ (8003044 <NLLS+0x1da4>)
 8002d7e:	443b      	add	r3, r7
 8002d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d84:	f7fd fc58 	bl	8000638 <__aeabi_dmul>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4bad      	ldr	r3, [pc, #692]	@ (8003048 <NLLS+0x1da8>)
 8002d92:	443b      	add	r3, r7
 8002d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d98:	f7fd fc4e 	bl	8000638 <__aeabi_dmul>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4610      	mov	r0, r2
 8002da2:	4619      	mov	r1, r3
 8002da4:	4ba8      	ldr	r3, [pc, #672]	@ (8003048 <NLLS+0x1da8>)
 8002da6:	443b      	add	r3, r7
 8002da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dac:	f7fd fc44 	bl	8000638 <__aeabi_dmul>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4610      	mov	r0, r2
 8002db6:	4619      	mov	r1, r3
 8002db8:	4ba4      	ldr	r3, [pc, #656]	@ (800304c <NLLS+0x1dac>)
 8002dba:	443b      	add	r3, r7
 8002dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc0:	f7fd fc3a 	bl	8000638 <__aeabi_dmul>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	4620      	mov	r0, r4
 8002dca:	4629      	mov	r1, r5
 8002dcc:	f7fd fa7c 	bl	80002c8 <__aeabi_dsub>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4614      	mov	r4, r2
 8002dd6:	461d      	mov	r5, r3
 8002dd8:	4b9d      	ldr	r3, [pc, #628]	@ (8003050 <NLLS+0x1db0>)
 8002dda:	443b      	add	r3, r7
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	00da      	lsls	r2, r3, #3
 8002de0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002de4:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8002de8:	4413      	add	r3, r2
 8002dea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dee:	4b99      	ldr	r3, [pc, #612]	@ (8003054 <NLLS+0x1db4>)
 8002df0:	443b      	add	r3, r7
 8002df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df6:	f7fd fc1f 	bl	8000638 <__aeabi_dmul>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	4610      	mov	r0, r2
 8002e00:	4619      	mov	r1, r3
 8002e02:	4b95      	ldr	r3, [pc, #596]	@ (8003058 <NLLS+0x1db8>)
 8002e04:	443b      	add	r3, r7
 8002e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0a:	f7fd fc15 	bl	8000638 <__aeabi_dmul>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4610      	mov	r0, r2
 8002e14:	4619      	mov	r1, r3
 8002e16:	4b8b      	ldr	r3, [pc, #556]	@ (8003044 <NLLS+0x1da4>)
 8002e18:	443b      	add	r3, r7
 8002e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1e:	f7fd fc0b 	bl	8000638 <__aeabi_dmul>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4610      	mov	r0, r2
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4b86      	ldr	r3, [pc, #536]	@ (8003044 <NLLS+0x1da4>)
 8002e2c:	443b      	add	r3, r7
 8002e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e32:	f7fd fc01 	bl	8000638 <__aeabi_dmul>
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4b82      	ldr	r3, [pc, #520]	@ (8003048 <NLLS+0x1da8>)
 8002e40:	443b      	add	r3, r7
 8002e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e46:	f7fd fbf7 	bl	8000638 <__aeabi_dmul>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4610      	mov	r0, r2
 8002e50:	4619      	mov	r1, r3
 8002e52:	4b7d      	ldr	r3, [pc, #500]	@ (8003048 <NLLS+0x1da8>)
 8002e54:	443b      	add	r3, r7
 8002e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5a:	f7fd fbed 	bl	8000638 <__aeabi_dmul>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4610      	mov	r0, r2
 8002e64:	4619      	mov	r1, r3
 8002e66:	4b79      	ldr	r3, [pc, #484]	@ (800304c <NLLS+0x1dac>)
 8002e68:	443b      	add	r3, r7
 8002e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6e:	f7fd fbe3 	bl	8000638 <__aeabi_dmul>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	4620      	mov	r0, r4
 8002e78:	4629      	mov	r1, r5
 8002e7a:	f7fd fa27 	bl	80002cc <__adddf3>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	4614      	mov	r4, r2
 8002e84:	461d      	mov	r5, r3
 8002e86:	4b73      	ldr	r3, [pc, #460]	@ (8003054 <NLLS+0x1db4>)
 8002e88:	443b      	add	r3, r7
 8002e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8e:	4973      	ldr	r1, [pc, #460]	@ (800305c <NLLS+0x1dbc>)
 8002e90:	4439      	add	r1, r7
 8002e92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002e96:	f7fd fbcf 	bl	8000638 <__aeabi_dmul>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	4610      	mov	r0, r2
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4b6d      	ldr	r3, [pc, #436]	@ (8003058 <NLLS+0x1db8>)
 8002ea4:	443b      	add	r3, r7
 8002ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eaa:	f7fd fbc5 	bl	8000638 <__aeabi_dmul>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4b63      	ldr	r3, [pc, #396]	@ (8003044 <NLLS+0x1da4>)
 8002eb8:	443b      	add	r3, r7
 8002eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebe:	f7fd fbbb 	bl	8000638 <__aeabi_dmul>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4610      	mov	r0, r2
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4b65      	ldr	r3, [pc, #404]	@ (8003060 <NLLS+0x1dc0>)
 8002ecc:	443b      	add	r3, r7
 8002ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed2:	f7fd fbb1 	bl	8000638 <__aeabi_dmul>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4610      	mov	r0, r2
 8002edc:	4619      	mov	r1, r3
 8002ede:	4b61      	ldr	r3, [pc, #388]	@ (8003064 <NLLS+0x1dc4>)
 8002ee0:	443b      	add	r3, r7
 8002ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee6:	f7fd fba7 	bl	8000638 <__aeabi_dmul>
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	4610      	mov	r0, r2
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4b5d      	ldr	r3, [pc, #372]	@ (8003068 <NLLS+0x1dc8>)
 8002ef4:	443b      	add	r3, r7
 8002ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efa:	f7fd fb9d 	bl	8000638 <__aeabi_dmul>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4620      	mov	r0, r4
 8002f04:	4629      	mov	r1, r5
 8002f06:	f7fd f9e1 	bl	80002cc <__adddf3>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	4614      	mov	r4, r2
 8002f10:	461d      	mov	r5, r3
 8002f12:	4b4f      	ldr	r3, [pc, #316]	@ (8003050 <NLLS+0x1db0>)
 8002f14:	443b      	add	r3, r7
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	00da      	lsls	r2, r3, #3
 8002f1a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002f1e:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8002f22:	4413      	add	r3, r2
 8002f24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f28:	4b4a      	ldr	r3, [pc, #296]	@ (8003054 <NLLS+0x1db4>)
 8002f2a:	443b      	add	r3, r7
 8002f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f30:	f7fd fb82 	bl	8000638 <__aeabi_dmul>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4610      	mov	r0, r2
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4b46      	ldr	r3, [pc, #280]	@ (8003058 <NLLS+0x1db8>)
 8002f3e:	443b      	add	r3, r7
 8002f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f44:	f7fd fb78 	bl	8000638 <__aeabi_dmul>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4610      	mov	r0, r2
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4b3c      	ldr	r3, [pc, #240]	@ (8003044 <NLLS+0x1da4>)
 8002f52:	443b      	add	r3, r7
 8002f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f58:	f7fd fb6e 	bl	8000638 <__aeabi_dmul>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4610      	mov	r0, r2
 8002f62:	4619      	mov	r1, r3
 8002f64:	4b3e      	ldr	r3, [pc, #248]	@ (8003060 <NLLS+0x1dc0>)
 8002f66:	443b      	add	r3, r7
 8002f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6c:	f7fd fb64 	bl	8000638 <__aeabi_dmul>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4610      	mov	r0, r2
 8002f76:	4619      	mov	r1, r3
 8002f78:	4b3a      	ldr	r3, [pc, #232]	@ (8003064 <NLLS+0x1dc4>)
 8002f7a:	443b      	add	r3, r7
 8002f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f80:	f7fd fb5a 	bl	8000638 <__aeabi_dmul>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4610      	mov	r0, r2
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4b36      	ldr	r3, [pc, #216]	@ (8003068 <NLLS+0x1dc8>)
 8002f8e:	443b      	add	r3, r7
 8002f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f94:	f7fd fb50 	bl	8000638 <__aeabi_dmul>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4620      	mov	r0, r4
 8002f9e:	4629      	mov	r1, r5
 8002fa0:	f7fd f992 	bl	80002c8 <__aeabi_dsub>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4640      	mov	r0, r8
 8002faa:	4649      	mov	r1, r9
 8002fac:	f7fd fb44 	bl	8000638 <__aeabi_dmul>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002fb6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fbc:	4b25      	ldr	r3, [pc, #148]	@ (8003054 <NLLS+0x1db4>)
 8002fbe:	443b      	add	r3, r7
 8002fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc4:	4923      	ldr	r1, [pc, #140]	@ (8003054 <NLLS+0x1db4>)
 8002fc6:	4439      	add	r1, r7
 8002fc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002fcc:	f7fd fb34 	bl	8000638 <__aeabi_dmul>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4b1e      	ldr	r3, [pc, #120]	@ (8003054 <NLLS+0x1db4>)
 8002fda:	443b      	add	r3, r7
 8002fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe0:	f7fd fb2a 	bl	8000638 <__aeabi_dmul>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4610      	mov	r0, r2
 8002fea:	4619      	mov	r1, r3
 8002fec:	4b1f      	ldr	r3, [pc, #124]	@ (800306c <NLLS+0x1dcc>)
 8002fee:	443b      	add	r3, r7
 8002ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff4:	f7fd fb20 	bl	8000638 <__aeabi_dmul>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	4619      	mov	r1, r3
 8003000:	4b15      	ldr	r3, [pc, #84]	@ (8003058 <NLLS+0x1db8>)
 8003002:	443b      	add	r3, r7
 8003004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003008:	f7fd fb16 	bl	8000638 <__aeabi_dmul>
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	4610      	mov	r0, r2
 8003012:	4619      	mov	r1, r3
 8003014:	4b0b      	ldr	r3, [pc, #44]	@ (8003044 <NLLS+0x1da4>)
 8003016:	443b      	add	r3, r7
 8003018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301c:	f7fd fb0c 	bl	8000638 <__aeabi_dmul>
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	4610      	mov	r0, r2
 8003026:	4619      	mov	r1, r3
 8003028:	4b06      	ldr	r3, [pc, #24]	@ (8003044 <NLLS+0x1da4>)
 800302a:	443b      	add	r3, r7
 800302c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003030:	f7fd fb02 	bl	8000638 <__aeabi_dmul>
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	4610      	mov	r0, r2
 800303a:	4619      	mov	r1, r3
 800303c:	4b02      	ldr	r3, [pc, #8]	@ (8003048 <NLLS+0x1da8>)
 800303e:	443b      	add	r3, r7
 8003040:	e016      	b.n	8003070 <NLLS+0x1dd0>
 8003042:	bf00      	nop
 8003044:	0002dfa8 	.word	0x0002dfa8
 8003048:	0002dfb8 	.word	0x0002dfb8
 800304c:	0002dfc8 	.word	0x0002dfc8
 8003050:	0002e008 	.word	0x0002e008
 8003054:	0002e058 	.word	0x0002e058
 8003058:	0002e050 	.word	0x0002e050
 800305c:	0002e048 	.word	0x0002e048
 8003060:	0002dfb0 	.word	0x0002dfb0
 8003064:	0002dfc0 	.word	0x0002dfc0
 8003068:	0002dfd0 	.word	0x0002dfd0
 800306c:	0002e060 	.word	0x0002e060
 8003070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003074:	f7fd fae0 	bl	8000638 <__aeabi_dmul>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4610      	mov	r0, r2
 800307e:	4619      	mov	r1, r3
 8003080:	4bb4      	ldr	r3, [pc, #720]	@ (8003354 <NLLS+0x20b4>)
 8003082:	443b      	add	r3, r7
 8003084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003088:	f7fd fad6 	bl	8000638 <__aeabi_dmul>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4610      	mov	r0, r2
 8003092:	4619      	mov	r1, r3
 8003094:	4bb0      	ldr	r3, [pc, #704]	@ (8003358 <NLLS+0x20b8>)
 8003096:	443b      	add	r3, r7
 8003098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309c:	f7fd facc 	bl	8000638 <__aeabi_dmul>
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	4610      	mov	r0, r2
 80030a6:	4619      	mov	r1, r3
 80030a8:	4bab      	ldr	r3, [pc, #684]	@ (8003358 <NLLS+0x20b8>)
 80030aa:	443b      	add	r3, r7
 80030ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b0:	f7fd fac2 	bl	8000638 <__aeabi_dmul>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80030bc:	f7fd fbe6 	bl	800088c <__aeabi_ddiv>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	49a5      	ldr	r1, [pc, #660]	@ (800335c <NLLS+0x20bc>)
 80030c6:	4439      	add	r1, r7
 80030c8:	f5a1 7006 	sub.w	r0, r1, #536	@ 0x218
 80030cc:	49a4      	ldr	r1, [pc, #656]	@ (8003360 <NLLS+0x20c0>)
 80030ce:	4439      	add	r1, r7
 80030d0:	6809      	ldr	r1, [r1, #0]
 80030d2:	f501 618b 	add.w	r1, r1, #1112	@ 0x458
 80030d6:	00c9      	lsls	r1, r1, #3
 80030d8:	4401      	add	r1, r0
 80030da:	e9c1 2300 	strd	r2, r3, [r1]

			mat_H[2][i] = -(2*(bz - mz[i])*(bz*sx*sy*cos_rho - by*sx*sz*sin_lambda - mz[i]*sx*sy*cos_rho + my[i]*sx*sz*sin_lambda + bx*sy*sz*sin_lambda*sin_rho - mx[i]*sy*sz*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_rho*sin_phi + mx[i]*sy*sz*cos_lambda*cos_rho*sin_phi))/(sx*sy*(sz*sz*sz)*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho);
 80030de:	4ba0      	ldr	r3, [pc, #640]	@ (8003360 <NLLS+0x20c0>)
 80030e0:	443b      	add	r3, r7
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80030ea:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 80030ee:	4413      	add	r3, r2
 80030f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f4:	499b      	ldr	r1, [pc, #620]	@ (8003364 <NLLS+0x20c4>)
 80030f6:	4439      	add	r1, r7
 80030f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030fc:	f7fd f8e4 	bl	80002c8 <__aeabi_dsub>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	4610      	mov	r0, r2
 8003106:	4619      	mov	r1, r3
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	f7fd f8de 	bl	80002cc <__adddf3>
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	4690      	mov	r8, r2
 8003116:	4699      	mov	r9, r3
 8003118:	4b93      	ldr	r3, [pc, #588]	@ (8003368 <NLLS+0x20c8>)
 800311a:	443b      	add	r3, r7
 800311c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003120:	4990      	ldr	r1, [pc, #576]	@ (8003364 <NLLS+0x20c4>)
 8003122:	4439      	add	r1, r7
 8003124:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003128:	f7fd fa86 	bl	8000638 <__aeabi_dmul>
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	4610      	mov	r0, r2
 8003132:	4619      	mov	r1, r3
 8003134:	4b8d      	ldr	r3, [pc, #564]	@ (800336c <NLLS+0x20cc>)
 8003136:	443b      	add	r3, r7
 8003138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313c:	f7fd fa7c 	bl	8000638 <__aeabi_dmul>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4610      	mov	r0, r2
 8003146:	4619      	mov	r1, r3
 8003148:	4b83      	ldr	r3, [pc, #524]	@ (8003358 <NLLS+0x20b8>)
 800314a:	443b      	add	r3, r7
 800314c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003150:	f7fd fa72 	bl	8000638 <__aeabi_dmul>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	4614      	mov	r4, r2
 800315a:	461d      	mov	r5, r3
 800315c:	4b82      	ldr	r3, [pc, #520]	@ (8003368 <NLLS+0x20c8>)
 800315e:	443b      	add	r3, r7
 8003160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003164:	4982      	ldr	r1, [pc, #520]	@ (8003370 <NLLS+0x20d0>)
 8003166:	4439      	add	r1, r7
 8003168:	e9d1 0100 	ldrd	r0, r1, [r1]
 800316c:	f7fd fa64 	bl	8000638 <__aeabi_dmul>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4610      	mov	r0, r2
 8003176:	4619      	mov	r1, r3
 8003178:	4b7e      	ldr	r3, [pc, #504]	@ (8003374 <NLLS+0x20d4>)
 800317a:	443b      	add	r3, r7
 800317c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003180:	f7fd fa5a 	bl	8000638 <__aeabi_dmul>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4610      	mov	r0, r2
 800318a:	4619      	mov	r1, r3
 800318c:	4b7a      	ldr	r3, [pc, #488]	@ (8003378 <NLLS+0x20d8>)
 800318e:	443b      	add	r3, r7
 8003190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003194:	f7fd fa50 	bl	8000638 <__aeabi_dmul>
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	4620      	mov	r0, r4
 800319e:	4629      	mov	r1, r5
 80031a0:	f7fd f892 	bl	80002c8 <__aeabi_dsub>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4614      	mov	r4, r2
 80031aa:	461d      	mov	r5, r3
 80031ac:	4b6c      	ldr	r3, [pc, #432]	@ (8003360 <NLLS+0x20c0>)
 80031ae:	443b      	add	r3, r7
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	00da      	lsls	r2, r3, #3
 80031b4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80031b8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80031bc:	4413      	add	r3, r2
 80031be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031c2:	4b69      	ldr	r3, [pc, #420]	@ (8003368 <NLLS+0x20c8>)
 80031c4:	443b      	add	r3, r7
 80031c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ca:	f7fd fa35 	bl	8000638 <__aeabi_dmul>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	4610      	mov	r0, r2
 80031d4:	4619      	mov	r1, r3
 80031d6:	4b65      	ldr	r3, [pc, #404]	@ (800336c <NLLS+0x20cc>)
 80031d8:	443b      	add	r3, r7
 80031da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031de:	f7fd fa2b 	bl	8000638 <__aeabi_dmul>
 80031e2:	4602      	mov	r2, r0
 80031e4:	460b      	mov	r3, r1
 80031e6:	4610      	mov	r0, r2
 80031e8:	4619      	mov	r1, r3
 80031ea:	4b5b      	ldr	r3, [pc, #364]	@ (8003358 <NLLS+0x20b8>)
 80031ec:	443b      	add	r3, r7
 80031ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f2:	f7fd fa21 	bl	8000638 <__aeabi_dmul>
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	4620      	mov	r0, r4
 80031fc:	4629      	mov	r1, r5
 80031fe:	f7fd f863 	bl	80002c8 <__aeabi_dsub>
 8003202:	4602      	mov	r2, r0
 8003204:	460b      	mov	r3, r1
 8003206:	4614      	mov	r4, r2
 8003208:	461d      	mov	r5, r3
 800320a:	4b55      	ldr	r3, [pc, #340]	@ (8003360 <NLLS+0x20c0>)
 800320c:	443b      	add	r3, r7
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	00da      	lsls	r2, r3, #3
 8003212:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003216:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800321a:	4413      	add	r3, r2
 800321c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003220:	4b51      	ldr	r3, [pc, #324]	@ (8003368 <NLLS+0x20c8>)
 8003222:	443b      	add	r3, r7
 8003224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003228:	f7fd fa06 	bl	8000638 <__aeabi_dmul>
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	4610      	mov	r0, r2
 8003232:	4619      	mov	r1, r3
 8003234:	4b4f      	ldr	r3, [pc, #316]	@ (8003374 <NLLS+0x20d4>)
 8003236:	443b      	add	r3, r7
 8003238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800323c:	f7fd f9fc 	bl	8000638 <__aeabi_dmul>
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	4610      	mov	r0, r2
 8003246:	4619      	mov	r1, r3
 8003248:	4b4b      	ldr	r3, [pc, #300]	@ (8003378 <NLLS+0x20d8>)
 800324a:	443b      	add	r3, r7
 800324c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003250:	f7fd f9f2 	bl	8000638 <__aeabi_dmul>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	4620      	mov	r0, r4
 800325a:	4629      	mov	r1, r5
 800325c:	f7fd f836 	bl	80002cc <__adddf3>
 8003260:	4602      	mov	r2, r0
 8003262:	460b      	mov	r3, r1
 8003264:	4614      	mov	r4, r2
 8003266:	461d      	mov	r5, r3
 8003268:	4b40      	ldr	r3, [pc, #256]	@ (800336c <NLLS+0x20cc>)
 800326a:	443b      	add	r3, r7
 800326c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003270:	4942      	ldr	r1, [pc, #264]	@ (800337c <NLLS+0x20dc>)
 8003272:	4439      	add	r1, r7
 8003274:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003278:	f7fd f9de 	bl	8000638 <__aeabi_dmul>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4610      	mov	r0, r2
 8003282:	4619      	mov	r1, r3
 8003284:	4b3b      	ldr	r3, [pc, #236]	@ (8003374 <NLLS+0x20d4>)
 8003286:	443b      	add	r3, r7
 8003288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328c:	f7fd f9d4 	bl	8000638 <__aeabi_dmul>
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	4610      	mov	r0, r2
 8003296:	4619      	mov	r1, r3
 8003298:	4b37      	ldr	r3, [pc, #220]	@ (8003378 <NLLS+0x20d8>)
 800329a:	443b      	add	r3, r7
 800329c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a0:	f7fd f9ca 	bl	8000638 <__aeabi_dmul>
 80032a4:	4602      	mov	r2, r0
 80032a6:	460b      	mov	r3, r1
 80032a8:	4610      	mov	r0, r2
 80032aa:	4619      	mov	r1, r3
 80032ac:	4b34      	ldr	r3, [pc, #208]	@ (8003380 <NLLS+0x20e0>)
 80032ae:	443b      	add	r3, r7
 80032b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b4:	f7fd f9c0 	bl	8000638 <__aeabi_dmul>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4620      	mov	r0, r4
 80032be:	4629      	mov	r1, r5
 80032c0:	f7fd f804 	bl	80002cc <__adddf3>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	4614      	mov	r4, r2
 80032ca:	461d      	mov	r5, r3
 80032cc:	4b24      	ldr	r3, [pc, #144]	@ (8003360 <NLLS+0x20c0>)
 80032ce:	443b      	add	r3, r7
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	00da      	lsls	r2, r3, #3
 80032d4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80032d8:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80032dc:	4413      	add	r3, r2
 80032de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032e2:	4b22      	ldr	r3, [pc, #136]	@ (800336c <NLLS+0x20cc>)
 80032e4:	443b      	add	r3, r7
 80032e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ea:	f7fd f9a5 	bl	8000638 <__aeabi_dmul>
 80032ee:	4602      	mov	r2, r0
 80032f0:	460b      	mov	r3, r1
 80032f2:	4610      	mov	r0, r2
 80032f4:	4619      	mov	r1, r3
 80032f6:	4b1f      	ldr	r3, [pc, #124]	@ (8003374 <NLLS+0x20d4>)
 80032f8:	443b      	add	r3, r7
 80032fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fe:	f7fd f99b 	bl	8000638 <__aeabi_dmul>
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	4610      	mov	r0, r2
 8003308:	4619      	mov	r1, r3
 800330a:	4b1b      	ldr	r3, [pc, #108]	@ (8003378 <NLLS+0x20d8>)
 800330c:	443b      	add	r3, r7
 800330e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003312:	f7fd f991 	bl	8000638 <__aeabi_dmul>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4610      	mov	r0, r2
 800331c:	4619      	mov	r1, r3
 800331e:	4b18      	ldr	r3, [pc, #96]	@ (8003380 <NLLS+0x20e0>)
 8003320:	443b      	add	r3, r7
 8003322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003326:	f7fd f987 	bl	8000638 <__aeabi_dmul>
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	4620      	mov	r0, r4
 8003330:	4629      	mov	r1, r5
 8003332:	f7fc ffc9 	bl	80002c8 <__aeabi_dsub>
 8003336:	4602      	mov	r2, r0
 8003338:	460b      	mov	r3, r1
 800333a:	4614      	mov	r4, r2
 800333c:	461d      	mov	r5, r3
 800333e:	4b0b      	ldr	r3, [pc, #44]	@ (800336c <NLLS+0x20cc>)
 8003340:	443b      	add	r3, r7
 8003342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003346:	490d      	ldr	r1, [pc, #52]	@ (800337c <NLLS+0x20dc>)
 8003348:	4439      	add	r1, r7
 800334a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800334e:	f7fd f973 	bl	8000638 <__aeabi_dmul>
 8003352:	e017      	b.n	8003384 <NLLS+0x20e4>
 8003354:	0002dfb8 	.word	0x0002dfb8
 8003358:	0002dfb0 	.word	0x0002dfb0
 800335c:	00014070 	.word	0x00014070
 8003360:	0002e008 	.word	0x0002e008
 8003364:	0002e038 	.word	0x0002e038
 8003368:	0002e060 	.word	0x0002e060
 800336c:	0002e058 	.word	0x0002e058
 8003370:	0002e040 	.word	0x0002e040
 8003374:	0002e050 	.word	0x0002e050
 8003378:	0002dfc0 	.word	0x0002dfc0
 800337c:	0002e048 	.word	0x0002e048
 8003380:	0002dfc8 	.word	0x0002dfc8
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4610      	mov	r0, r2
 800338a:	4619      	mov	r1, r3
 800338c:	4bb4      	ldr	r3, [pc, #720]	@ (8003660 <NLLS+0x23c0>)
 800338e:	443b      	add	r3, r7
 8003390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003394:	f7fd f950 	bl	8000638 <__aeabi_dmul>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4610      	mov	r0, r2
 800339e:	4619      	mov	r1, r3
 80033a0:	4bb0      	ldr	r3, [pc, #704]	@ (8003664 <NLLS+0x23c4>)
 80033a2:	443b      	add	r3, r7
 80033a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a8:	f7fd f946 	bl	8000638 <__aeabi_dmul>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	4610      	mov	r0, r2
 80033b2:	4619      	mov	r1, r3
 80033b4:	4bac      	ldr	r3, [pc, #688]	@ (8003668 <NLLS+0x23c8>)
 80033b6:	443b      	add	r3, r7
 80033b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033bc:	f7fd f93c 	bl	8000638 <__aeabi_dmul>
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	4610      	mov	r0, r2
 80033c6:	4619      	mov	r1, r3
 80033c8:	4ba8      	ldr	r3, [pc, #672]	@ (800366c <NLLS+0x23cc>)
 80033ca:	443b      	add	r3, r7
 80033cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d0:	f7fd f932 	bl	8000638 <__aeabi_dmul>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4620      	mov	r0, r4
 80033da:	4629      	mov	r1, r5
 80033dc:	f7fc ff74 	bl	80002c8 <__aeabi_dsub>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4614      	mov	r4, r2
 80033e6:	461d      	mov	r5, r3
 80033e8:	4ba1      	ldr	r3, [pc, #644]	@ (8003670 <NLLS+0x23d0>)
 80033ea:	443b      	add	r3, r7
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	00da      	lsls	r2, r3, #3
 80033f0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80033f4:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80033f8:	4413      	add	r3, r2
 80033fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033fe:	4b9d      	ldr	r3, [pc, #628]	@ (8003674 <NLLS+0x23d4>)
 8003400:	443b      	add	r3, r7
 8003402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003406:	f7fd f917 	bl	8000638 <__aeabi_dmul>
 800340a:	4602      	mov	r2, r0
 800340c:	460b      	mov	r3, r1
 800340e:	4610      	mov	r0, r2
 8003410:	4619      	mov	r1, r3
 8003412:	4b93      	ldr	r3, [pc, #588]	@ (8003660 <NLLS+0x23c0>)
 8003414:	443b      	add	r3, r7
 8003416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341a:	f7fd f90d 	bl	8000638 <__aeabi_dmul>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	4610      	mov	r0, r2
 8003424:	4619      	mov	r1, r3
 8003426:	4b8f      	ldr	r3, [pc, #572]	@ (8003664 <NLLS+0x23c4>)
 8003428:	443b      	add	r3, r7
 800342a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342e:	f7fd f903 	bl	8000638 <__aeabi_dmul>
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
 8003436:	4610      	mov	r0, r2
 8003438:	4619      	mov	r1, r3
 800343a:	4b8b      	ldr	r3, [pc, #556]	@ (8003668 <NLLS+0x23c8>)
 800343c:	443b      	add	r3, r7
 800343e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003442:	f7fd f8f9 	bl	8000638 <__aeabi_dmul>
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	4610      	mov	r0, r2
 800344c:	4619      	mov	r1, r3
 800344e:	4b87      	ldr	r3, [pc, #540]	@ (800366c <NLLS+0x23cc>)
 8003450:	443b      	add	r3, r7
 8003452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003456:	f7fd f8ef 	bl	8000638 <__aeabi_dmul>
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	4620      	mov	r0, r4
 8003460:	4629      	mov	r1, r5
 8003462:	f7fc ff33 	bl	80002cc <__adddf3>
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	4640      	mov	r0, r8
 800346c:	4649      	mov	r1, r9
 800346e:	f7fd f8e3 	bl	8000638 <__aeabi_dmul>
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	623a      	str	r2, [r7, #32]
 8003478:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800347c:	627b      	str	r3, [r7, #36]	@ 0x24
 800347e:	4b7d      	ldr	r3, [pc, #500]	@ (8003674 <NLLS+0x23d4>)
 8003480:	443b      	add	r3, r7
 8003482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003486:	497c      	ldr	r1, [pc, #496]	@ (8003678 <NLLS+0x23d8>)
 8003488:	4439      	add	r1, r7
 800348a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800348e:	f7fd f8d3 	bl	8000638 <__aeabi_dmul>
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	4614      	mov	r4, r2
 8003498:	461d      	mov	r5, r3
 800349a:	4b71      	ldr	r3, [pc, #452]	@ (8003660 <NLLS+0x23c0>)
 800349c:	443b      	add	r3, r7
 800349e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a2:	496f      	ldr	r1, [pc, #444]	@ (8003660 <NLLS+0x23c0>)
 80034a4:	4439      	add	r1, r7
 80034a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034aa:	f7fd f8c5 	bl	8000638 <__aeabi_dmul>
 80034ae:	4602      	mov	r2, r0
 80034b0:	460b      	mov	r3, r1
 80034b2:	4610      	mov	r0, r2
 80034b4:	4619      	mov	r1, r3
 80034b6:	4b6a      	ldr	r3, [pc, #424]	@ (8003660 <NLLS+0x23c0>)
 80034b8:	443b      	add	r3, r7
 80034ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034be:	f7fd f8bb 	bl	8000638 <__aeabi_dmul>
 80034c2:	4602      	mov	r2, r0
 80034c4:	460b      	mov	r3, r1
 80034c6:	4620      	mov	r0, r4
 80034c8:	4629      	mov	r1, r5
 80034ca:	f7fd f8b5 	bl	8000638 <__aeabi_dmul>
 80034ce:	4602      	mov	r2, r0
 80034d0:	460b      	mov	r3, r1
 80034d2:	4610      	mov	r0, r2
 80034d4:	4619      	mov	r1, r3
 80034d6:	4b63      	ldr	r3, [pc, #396]	@ (8003664 <NLLS+0x23c4>)
 80034d8:	443b      	add	r3, r7
 80034da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034de:	f7fd f8ab 	bl	8000638 <__aeabi_dmul>
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	4610      	mov	r0, r2
 80034e8:	4619      	mov	r1, r3
 80034ea:	4b5e      	ldr	r3, [pc, #376]	@ (8003664 <NLLS+0x23c4>)
 80034ec:	443b      	add	r3, r7
 80034ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f2:	f7fd f8a1 	bl	8000638 <__aeabi_dmul>
 80034f6:	4602      	mov	r2, r0
 80034f8:	460b      	mov	r3, r1
 80034fa:	4610      	mov	r0, r2
 80034fc:	4619      	mov	r1, r3
 80034fe:	4b5f      	ldr	r3, [pc, #380]	@ (800367c <NLLS+0x23dc>)
 8003500:	443b      	add	r3, r7
 8003502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003506:	f7fd f897 	bl	8000638 <__aeabi_dmul>
 800350a:	4602      	mov	r2, r0
 800350c:	460b      	mov	r3, r1
 800350e:	4610      	mov	r0, r2
 8003510:	4619      	mov	r1, r3
 8003512:	4b5a      	ldr	r3, [pc, #360]	@ (800367c <NLLS+0x23dc>)
 8003514:	443b      	add	r3, r7
 8003516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351a:	f7fd f88d 	bl	8000638 <__aeabi_dmul>
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4610      	mov	r0, r2
 8003524:	4619      	mov	r1, r3
 8003526:	4b50      	ldr	r3, [pc, #320]	@ (8003668 <NLLS+0x23c8>)
 8003528:	443b      	add	r3, r7
 800352a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352e:	f7fd f883 	bl	8000638 <__aeabi_dmul>
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800353a:	f7fd f9a7 	bl	800088c <__aeabi_ddiv>
 800353e:	4602      	mov	r2, r0
 8003540:	460b      	mov	r3, r1
 8003542:	494f      	ldr	r1, [pc, #316]	@ (8003680 <NLLS+0x23e0>)
 8003544:	4439      	add	r1, r7
 8003546:	f5a1 7006 	sub.w	r0, r1, #536	@ 0x218
 800354a:	4949      	ldr	r1, [pc, #292]	@ (8003670 <NLLS+0x23d0>)
 800354c:	4439      	add	r1, r7
 800354e:	6809      	ldr	r1, [r1, #0]
 8003550:	f501 610b 	add.w	r1, r1, #2224	@ 0x8b0
 8003554:	00c9      	lsls	r1, r1, #3
 8003556:	4401      	add	r1, r0
 8003558:	e9c1 2300 	strd	r2, r3, [r1]

			mat_H[3][i] = (2*bx - 2*mx[i])/sx*sx - (2*sin_rho*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i])))/(sx*sx*sy*cos_rho*cos_rho) + (2*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sz*cos_lambda*cos_lambda*2*cos_phi*cos_phi*cos_rho*cos_rho);
 800355c:	4b49      	ldr	r3, [pc, #292]	@ (8003684 <NLLS+0x23e4>)
 800355e:	443b      	add	r3, r7
 8003560:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	f7fc feb0 	bl	80002cc <__adddf3>
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	4614      	mov	r4, r2
 8003572:	461d      	mov	r5, r3
 8003574:	4b3e      	ldr	r3, [pc, #248]	@ (8003670 <NLLS+0x23d0>)
 8003576:	443b      	add	r3, r7
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8003580:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8003584:	4413      	add	r3, r2
 8003586:	e9d3 0100 	ldrd	r0, r1, [r3]
 800358a:	4602      	mov	r2, r0
 800358c:	460b      	mov	r3, r1
 800358e:	f7fc fe9d 	bl	80002cc <__adddf3>
 8003592:	4602      	mov	r2, r0
 8003594:	460b      	mov	r3, r1
 8003596:	4620      	mov	r0, r4
 8003598:	4629      	mov	r1, r5
 800359a:	f7fc fe95 	bl	80002c8 <__aeabi_dsub>
 800359e:	4602      	mov	r2, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	4610      	mov	r0, r2
 80035a4:	4619      	mov	r1, r3
 80035a6:	4b34      	ldr	r3, [pc, #208]	@ (8003678 <NLLS+0x23d8>)
 80035a8:	443b      	add	r3, r7
 80035aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ae:	f7fd f96d 	bl	800088c <__aeabi_ddiv>
 80035b2:	4602      	mov	r2, r0
 80035b4:	460b      	mov	r3, r1
 80035b6:	4610      	mov	r0, r2
 80035b8:	4619      	mov	r1, r3
 80035ba:	4b2f      	ldr	r3, [pc, #188]	@ (8003678 <NLLS+0x23d8>)
 80035bc:	443b      	add	r3, r7
 80035be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c2:	f7fd f839 	bl	8000638 <__aeabi_dmul>
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80035ce:	4b2e      	ldr	r3, [pc, #184]	@ (8003688 <NLLS+0x23e8>)
 80035d0:	443b      	add	r3, r7
 80035d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	f7fc fe77 	bl	80002cc <__adddf3>
 80035de:	4602      	mov	r2, r0
 80035e0:	460b      	mov	r3, r1
 80035e2:	4692      	mov	sl, r2
 80035e4:	469b      	mov	fp, r3
 80035e6:	4b22      	ldr	r3, [pc, #136]	@ (8003670 <NLLS+0x23d0>)
 80035e8:	443b      	add	r3, r7
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	00da      	lsls	r2, r3, #3
 80035ee:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80035f2:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80035f6:	4413      	add	r3, r2
 80035f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fc:	4923      	ldr	r1, [pc, #140]	@ (800368c <NLLS+0x23ec>)
 80035fe:	4439      	add	r1, r7
 8003600:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003604:	f7fc fe60 	bl	80002c8 <__aeabi_dsub>
 8003608:	4602      	mov	r2, r0
 800360a:	460b      	mov	r3, r1
 800360c:	4610      	mov	r0, r2
 800360e:	4619      	mov	r1, r3
 8003610:	4b19      	ldr	r3, [pc, #100]	@ (8003678 <NLLS+0x23d8>)
 8003612:	443b      	add	r3, r7
 8003614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003618:	f7fd f80e 	bl	8000638 <__aeabi_dmul>
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	4690      	mov	r8, r2
 8003622:	4699      	mov	r9, r3
 8003624:	4b18      	ldr	r3, [pc, #96]	@ (8003688 <NLLS+0x23e8>)
 8003626:	443b      	add	r3, r7
 8003628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362c:	4911      	ldr	r1, [pc, #68]	@ (8003674 <NLLS+0x23d4>)
 800362e:	4439      	add	r1, r7
 8003630:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003634:	f7fd f800 	bl	8000638 <__aeabi_dmul>
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	4614      	mov	r4, r2
 800363e:	461d      	mov	r5, r3
 8003640:	4b0b      	ldr	r3, [pc, #44]	@ (8003670 <NLLS+0x23d0>)
 8003642:	443b      	add	r3, r7
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	00da      	lsls	r2, r3, #3
 8003648:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800364c:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8003650:	4413      	add	r3, r2
 8003652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003656:	490b      	ldr	r1, [pc, #44]	@ (8003684 <NLLS+0x23e4>)
 8003658:	4439      	add	r1, r7
 800365a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800365e:	e017      	b.n	8003690 <NLLS+0x23f0>
 8003660:	0002e050 	.word	0x0002e050
 8003664:	0002dfa8 	.word	0x0002dfa8
 8003668:	0002dfb0 	.word	0x0002dfb0
 800366c:	0002dfd0 	.word	0x0002dfd0
 8003670:	0002e008 	.word	0x0002e008
 8003674:	0002e058 	.word	0x0002e058
 8003678:	0002e060 	.word	0x0002e060
 800367c:	0002dfb8 	.word	0x0002dfb8
 8003680:	00014070 	.word	0x00014070
 8003684:	0002e048 	.word	0x0002e048
 8003688:	0002dfc8 	.word	0x0002dfc8
 800368c:	0002e040 	.word	0x0002e040
 8003690:	f7fc fe1a 	bl	80002c8 <__aeabi_dsub>
 8003694:	4602      	mov	r2, r0
 8003696:	460b      	mov	r3, r1
 8003698:	4620      	mov	r0, r4
 800369a:	4629      	mov	r1, r5
 800369c:	f7fc ffcc 	bl	8000638 <__aeabi_dmul>
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4640      	mov	r0, r8
 80036a6:	4649      	mov	r1, r9
 80036a8:	f7fc fe0e 	bl	80002c8 <__aeabi_dsub>
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	4650      	mov	r0, sl
 80036b2:	4659      	mov	r1, fp
 80036b4:	f7fc ffc0 	bl	8000638 <__aeabi_dmul>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4614      	mov	r4, r2
 80036be:	461d      	mov	r5, r3
 80036c0:	4bb5      	ldr	r3, [pc, #724]	@ (8003998 <NLLS+0x26f8>)
 80036c2:	443b      	add	r3, r7
 80036c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c8:	49b3      	ldr	r1, [pc, #716]	@ (8003998 <NLLS+0x26f8>)
 80036ca:	4439      	add	r1, r7
 80036cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80036d0:	f7fc ffb2 	bl	8000638 <__aeabi_dmul>
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	4610      	mov	r0, r2
 80036da:	4619      	mov	r1, r3
 80036dc:	4baf      	ldr	r3, [pc, #700]	@ (800399c <NLLS+0x26fc>)
 80036de:	443b      	add	r3, r7
 80036e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e4:	f7fc ffa8 	bl	8000638 <__aeabi_dmul>
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	4610      	mov	r0, r2
 80036ee:	4619      	mov	r1, r3
 80036f0:	4bab      	ldr	r3, [pc, #684]	@ (80039a0 <NLLS+0x2700>)
 80036f2:	443b      	add	r3, r7
 80036f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f8:	f7fc ff9e 	bl	8000638 <__aeabi_dmul>
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	4610      	mov	r0, r2
 8003702:	4619      	mov	r1, r3
 8003704:	4ba6      	ldr	r3, [pc, #664]	@ (80039a0 <NLLS+0x2700>)
 8003706:	443b      	add	r3, r7
 8003708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370c:	f7fc ff94 	bl	8000638 <__aeabi_dmul>
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	4620      	mov	r0, r4
 8003716:	4629      	mov	r1, r5
 8003718:	f7fd f8b8 	bl	800088c <__aeabi_ddiv>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003724:	f7fc fdd0 	bl	80002c8 <__aeabi_dsub>
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8003730:	4b9c      	ldr	r3, [pc, #624]	@ (80039a4 <NLLS+0x2704>)
 8003732:	443b      	add	r3, r7
 8003734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003738:	499b      	ldr	r1, [pc, #620]	@ (80039a8 <NLLS+0x2708>)
 800373a:	4439      	add	r1, r7
 800373c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003740:	f7fc ff7a 	bl	8000638 <__aeabi_dmul>
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	4614      	mov	r4, r2
 800374a:	461d      	mov	r5, r3
 800374c:	4b94      	ldr	r3, [pc, #592]	@ (80039a0 <NLLS+0x2700>)
 800374e:	443b      	add	r3, r7
 8003750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003754:	4995      	ldr	r1, [pc, #596]	@ (80039ac <NLLS+0x270c>)
 8003756:	4439      	add	r1, r7
 8003758:	e9d1 0100 	ldrd	r0, r1, [r1]
 800375c:	f7fc ff6c 	bl	8000638 <__aeabi_dmul>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	4610      	mov	r0, r2
 8003766:	4619      	mov	r1, r3
 8003768:	4b91      	ldr	r3, [pc, #580]	@ (80039b0 <NLLS+0x2710>)
 800376a:	443b      	add	r3, r7
 800376c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003770:	f7fc ff62 	bl	8000638 <__aeabi_dmul>
 8003774:	4602      	mov	r2, r0
 8003776:	460b      	mov	r3, r1
 8003778:	4620      	mov	r0, r4
 800377a:	4629      	mov	r1, r5
 800377c:	f7fc fda4 	bl	80002c8 <__aeabi_dsub>
 8003780:	4602      	mov	r2, r0
 8003782:	460b      	mov	r3, r1
 8003784:	4610      	mov	r0, r2
 8003786:	4619      	mov	r1, r3
 8003788:	4602      	mov	r2, r0
 800378a:	460b      	mov	r3, r1
 800378c:	f7fc fd9e 	bl	80002cc <__adddf3>
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	4692      	mov	sl, r2
 8003796:	469b      	mov	fp, r3
 8003798:	4b86      	ldr	r3, [pc, #536]	@ (80039b4 <NLLS+0x2714>)
 800379a:	443b      	add	r3, r7
 800379c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a0:	497e      	ldr	r1, [pc, #504]	@ (800399c <NLLS+0x26fc>)
 80037a2:	4439      	add	r1, r7
 80037a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80037a8:	f7fc ff46 	bl	8000638 <__aeabi_dmul>
 80037ac:	4602      	mov	r2, r0
 80037ae:	460b      	mov	r3, r1
 80037b0:	4690      	mov	r8, r2
 80037b2:	4699      	mov	r9, r3
 80037b4:	4b7b      	ldr	r3, [pc, #492]	@ (80039a4 <NLLS+0x2704>)
 80037b6:	443b      	add	r3, r7
 80037b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037bc:	497a      	ldr	r1, [pc, #488]	@ (80039a8 <NLLS+0x2708>)
 80037be:	4439      	add	r1, r7
 80037c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80037c4:	f7fc ff38 	bl	8000638 <__aeabi_dmul>
 80037c8:	4602      	mov	r2, r0
 80037ca:	460b      	mov	r3, r1
 80037cc:	4614      	mov	r4, r2
 80037ce:	461d      	mov	r5, r3
 80037d0:	4b73      	ldr	r3, [pc, #460]	@ (80039a0 <NLLS+0x2700>)
 80037d2:	443b      	add	r3, r7
 80037d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d8:	4974      	ldr	r1, [pc, #464]	@ (80039ac <NLLS+0x270c>)
 80037da:	4439      	add	r1, r7
 80037dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80037e0:	f7fc ff2a 	bl	8000638 <__aeabi_dmul>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	4610      	mov	r0, r2
 80037ea:	4619      	mov	r1, r3
 80037ec:	4b70      	ldr	r3, [pc, #448]	@ (80039b0 <NLLS+0x2710>)
 80037ee:	443b      	add	r3, r7
 80037f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f4:	f7fc ff20 	bl	8000638 <__aeabi_dmul>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	4620      	mov	r0, r4
 80037fe:	4629      	mov	r1, r5
 8003800:	f7fc fd62 	bl	80002c8 <__aeabi_dsub>
 8003804:	4602      	mov	r2, r0
 8003806:	460b      	mov	r3, r1
 8003808:	4640      	mov	r0, r8
 800380a:	4649      	mov	r1, r9
 800380c:	f7fc ff14 	bl	8000638 <__aeabi_dmul>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4614      	mov	r4, r2
 8003816:	461d      	mov	r5, r3
 8003818:	4b67      	ldr	r3, [pc, #412]	@ (80039b8 <NLLS+0x2718>)
 800381a:	443b      	add	r3, r7
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	00da      	lsls	r2, r3, #3
 8003820:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003824:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8003828:	4413      	add	r3, r2
 800382a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382e:	4963      	ldr	r1, [pc, #396]	@ (80039bc <NLLS+0x271c>)
 8003830:	4439      	add	r1, r7
 8003832:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003836:	f7fc fd47 	bl	80002c8 <__aeabi_dsub>
 800383a:	4602      	mov	r2, r0
 800383c:	460b      	mov	r3, r1
 800383e:	4620      	mov	r0, r4
 8003840:	4629      	mov	r1, r5
 8003842:	f7fc fef9 	bl	8000638 <__aeabi_dmul>
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	4690      	mov	r8, r2
 800384c:	4699      	mov	r9, r3
 800384e:	4b53      	ldr	r3, [pc, #332]	@ (800399c <NLLS+0x26fc>)
 8003850:	443b      	add	r3, r7
 8003852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003856:	4950      	ldr	r1, [pc, #320]	@ (8003998 <NLLS+0x26f8>)
 8003858:	4439      	add	r1, r7
 800385a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800385e:	f7fc feeb 	bl	8000638 <__aeabi_dmul>
 8003862:	4602      	mov	r2, r0
 8003864:	460b      	mov	r3, r1
 8003866:	4610      	mov	r0, r2
 8003868:	4619      	mov	r1, r3
 800386a:	4b4d      	ldr	r3, [pc, #308]	@ (80039a0 <NLLS+0x2700>)
 800386c:	443b      	add	r3, r7
 800386e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003872:	f7fc fee1 	bl	8000638 <__aeabi_dmul>
 8003876:	4602      	mov	r2, r0
 8003878:	460b      	mov	r3, r1
 800387a:	4614      	mov	r4, r2
 800387c:	461d      	mov	r5, r3
 800387e:	4b4e      	ldr	r3, [pc, #312]	@ (80039b8 <NLLS+0x2718>)
 8003880:	443b      	add	r3, r7
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	00da      	lsls	r2, r3, #3
 8003886:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800388a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800388e:	4413      	add	r3, r2
 8003890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003894:	494a      	ldr	r1, [pc, #296]	@ (80039c0 <NLLS+0x2720>)
 8003896:	4439      	add	r1, r7
 8003898:	e9d1 0100 	ldrd	r0, r1, [r1]
 800389c:	f7fc fd14 	bl	80002c8 <__aeabi_dsub>
 80038a0:	4602      	mov	r2, r0
 80038a2:	460b      	mov	r3, r1
 80038a4:	4620      	mov	r0, r4
 80038a6:	4629      	mov	r1, r5
 80038a8:	f7fc fec6 	bl	8000638 <__aeabi_dmul>
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	4640      	mov	r0, r8
 80038b2:	4649      	mov	r1, r9
 80038b4:	f7fc fd0a 	bl	80002cc <__adddf3>
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	4690      	mov	r8, r2
 80038be:	4699      	mov	r9, r3
 80038c0:	4b3c      	ldr	r3, [pc, #240]	@ (80039b4 <NLLS+0x2714>)
 80038c2:	443b      	add	r3, r7
 80038c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c8:	4933      	ldr	r1, [pc, #204]	@ (8003998 <NLLS+0x26f8>)
 80038ca:	4439      	add	r1, r7
 80038cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80038d0:	f7fc feb2 	bl	8000638 <__aeabi_dmul>
 80038d4:	4602      	mov	r2, r0
 80038d6:	460b      	mov	r3, r1
 80038d8:	4610      	mov	r0, r2
 80038da:	4619      	mov	r1, r3
 80038dc:	4b32      	ldr	r3, [pc, #200]	@ (80039a8 <NLLS+0x2708>)
 80038de:	443b      	add	r3, r7
 80038e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e4:	f7fc fea8 	bl	8000638 <__aeabi_dmul>
 80038e8:	4602      	mov	r2, r0
 80038ea:	460b      	mov	r3, r1
 80038ec:	4614      	mov	r4, r2
 80038ee:	461d      	mov	r5, r3
 80038f0:	4b31      	ldr	r3, [pc, #196]	@ (80039b8 <NLLS+0x2718>)
 80038f2:	443b      	add	r3, r7
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	00da      	lsls	r2, r3, #3
 80038f8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80038fc:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8003900:	4413      	add	r3, r2
 8003902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003906:	492f      	ldr	r1, [pc, #188]	@ (80039c4 <NLLS+0x2724>)
 8003908:	4439      	add	r1, r7
 800390a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800390e:	f7fc fcdb 	bl	80002c8 <__aeabi_dsub>
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	4620      	mov	r0, r4
 8003918:	4629      	mov	r1, r5
 800391a:	f7fc fe8d 	bl	8000638 <__aeabi_dmul>
 800391e:	4602      	mov	r2, r0
 8003920:	460b      	mov	r3, r1
 8003922:	4640      	mov	r0, r8
 8003924:	4649      	mov	r1, r9
 8003926:	f7fc fccf 	bl	80002c8 <__aeabi_dsub>
 800392a:	4602      	mov	r2, r0
 800392c:	460b      	mov	r3, r1
 800392e:	4650      	mov	r0, sl
 8003930:	4659      	mov	r1, fp
 8003932:	f7fc fe81 	bl	8000638 <__aeabi_dmul>
 8003936:	4602      	mov	r2, r0
 8003938:	460b      	mov	r3, r1
 800393a:	4614      	mov	r4, r2
 800393c:	461d      	mov	r5, r3
 800393e:	4b16      	ldr	r3, [pc, #88]	@ (8003998 <NLLS+0x26f8>)
 8003940:	443b      	add	r3, r7
 8003942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003946:	4914      	ldr	r1, [pc, #80]	@ (8003998 <NLLS+0x26f8>)
 8003948:	4439      	add	r1, r7
 800394a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800394e:	f7fc fe73 	bl	8000638 <__aeabi_dmul>
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	4610      	mov	r0, r2
 8003958:	4619      	mov	r1, r3
 800395a:	4b10      	ldr	r3, [pc, #64]	@ (800399c <NLLS+0x26fc>)
 800395c:	443b      	add	r3, r7
 800395e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003962:	f7fc fe69 	bl	8000638 <__aeabi_dmul>
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	4610      	mov	r0, r2
 800396c:	4619      	mov	r1, r3
 800396e:	4b11      	ldr	r3, [pc, #68]	@ (80039b4 <NLLS+0x2714>)
 8003970:	443b      	add	r3, r7
 8003972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003976:	f7fc fe5f 	bl	8000638 <__aeabi_dmul>
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	4610      	mov	r0, r2
 8003980:	4619      	mov	r1, r3
 8003982:	4b0a      	ldr	r3, [pc, #40]	@ (80039ac <NLLS+0x270c>)
 8003984:	443b      	add	r3, r7
 8003986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398a:	f7fc fe55 	bl	8000638 <__aeabi_dmul>
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	4610      	mov	r0, r2
 8003994:	4619      	mov	r1, r3
 8003996:	e017      	b.n	80039c8 <NLLS+0x2728>
 8003998:	0002e060 	.word	0x0002e060
 800399c:	0002e058 	.word	0x0002e058
 80039a0:	0002dfb0 	.word	0x0002dfb0
 80039a4:	0002dfc8 	.word	0x0002dfc8
 80039a8:	0002dfc0 	.word	0x0002dfc0
 80039ac:	0002dfa8 	.word	0x0002dfa8
 80039b0:	0002dfd0 	.word	0x0002dfd0
 80039b4:	0002e050 	.word	0x0002e050
 80039b8:	0002e008 	.word	0x0002e008
 80039bc:	0002e048 	.word	0x0002e048
 80039c0:	0002e038 	.word	0x0002e038
 80039c4:	0002e040 	.word	0x0002e040
 80039c8:	4bb5      	ldr	r3, [pc, #724]	@ (8003ca0 <NLLS+0x2a00>)
 80039ca:	443b      	add	r3, r7
 80039cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d0:	f7fc fe32 	bl	8000638 <__aeabi_dmul>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4610      	mov	r0, r2
 80039da:	4619      	mov	r1, r3
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	f7fc fc74 	bl	80002cc <__adddf3>
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	4610      	mov	r0, r2
 80039ea:	4619      	mov	r1, r3
 80039ec:	4bad      	ldr	r3, [pc, #692]	@ (8003ca4 <NLLS+0x2a04>)
 80039ee:	443b      	add	r3, r7
 80039f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f4:	f7fc fe20 	bl	8000638 <__aeabi_dmul>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4610      	mov	r0, r2
 80039fe:	4619      	mov	r1, r3
 8003a00:	4ba8      	ldr	r3, [pc, #672]	@ (8003ca4 <NLLS+0x2a04>)
 8003a02:	443b      	add	r3, r7
 8003a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a08:	f7fc fe16 	bl	8000638 <__aeabi_dmul>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4610      	mov	r0, r2
 8003a12:	4619      	mov	r1, r3
 8003a14:	4ba4      	ldr	r3, [pc, #656]	@ (8003ca8 <NLLS+0x2a08>)
 8003a16:	443b      	add	r3, r7
 8003a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1c:	f7fc fe0c 	bl	8000638 <__aeabi_dmul>
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	4610      	mov	r0, r2
 8003a26:	4619      	mov	r1, r3
 8003a28:	4b9f      	ldr	r3, [pc, #636]	@ (8003ca8 <NLLS+0x2a08>)
 8003a2a:	443b      	add	r3, r7
 8003a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a30:	f7fc fe02 	bl	8000638 <__aeabi_dmul>
 8003a34:	4602      	mov	r2, r0
 8003a36:	460b      	mov	r3, r1
 8003a38:	4620      	mov	r0, r4
 8003a3a:	4629      	mov	r1, r5
 8003a3c:	f7fc ff26 	bl	800088c <__aeabi_ddiv>
 8003a40:	4602      	mov	r2, r0
 8003a42:	460b      	mov	r3, r1
 8003a44:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a48:	f7fc fc40 	bl	80002cc <__adddf3>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	460b      	mov	r3, r1
 8003a50:	4996      	ldr	r1, [pc, #600]	@ (8003cac <NLLS+0x2a0c>)
 8003a52:	4439      	add	r1, r7
 8003a54:	f5a1 7006 	sub.w	r0, r1, #536	@ 0x218
 8003a58:	4995      	ldr	r1, [pc, #596]	@ (8003cb0 <NLLS+0x2a10>)
 8003a5a:	4439      	add	r1, r7
 8003a5c:	6809      	ldr	r1, [r1, #0]
 8003a5e:	f601 5108 	addw	r1, r1, #3336	@ 0xd08
 8003a62:	00c9      	lsls	r1, r1, #3
 8003a64:	4401      	add	r1, r0
 8003a66:	e9c1 2300 	strd	r2, r3, [r1]

			mat_H[4][i] = (2*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i])))/(sx*sy*sy*cos_rho*cos_rho) - (2*sin_lambda*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sy*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8003a6a:	4b91      	ldr	r3, [pc, #580]	@ (8003cb0 <NLLS+0x2a10>)
 8003a6c:	443b      	add	r3, r7
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8003a76:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a80:	498c      	ldr	r1, [pc, #560]	@ (8003cb4 <NLLS+0x2a14>)
 8003a82:	4439      	add	r1, r7
 8003a84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a88:	f7fc fc1e 	bl	80002c8 <__aeabi_dsub>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4610      	mov	r0, r2
 8003a92:	4619      	mov	r1, r3
 8003a94:	4b88      	ldr	r3, [pc, #544]	@ (8003cb8 <NLLS+0x2a18>)
 8003a96:	443b      	add	r3, r7
 8003a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9c:	f7fc fdcc 	bl	8000638 <__aeabi_dmul>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	4690      	mov	r8, r2
 8003aa6:	4699      	mov	r9, r3
 8003aa8:	4b84      	ldr	r3, [pc, #528]	@ (8003cbc <NLLS+0x2a1c>)
 8003aaa:	443b      	add	r3, r7
 8003aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab0:	4983      	ldr	r1, [pc, #524]	@ (8003cc0 <NLLS+0x2a20>)
 8003ab2:	4439      	add	r1, r7
 8003ab4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ab8:	f7fc fdbe 	bl	8000638 <__aeabi_dmul>
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4614      	mov	r4, r2
 8003ac2:	461d      	mov	r5, r3
 8003ac4:	4b7a      	ldr	r3, [pc, #488]	@ (8003cb0 <NLLS+0x2a10>)
 8003ac6:	443b      	add	r3, r7
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	00da      	lsls	r2, r3, #3
 8003acc:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003ad0:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ada:	497a      	ldr	r1, [pc, #488]	@ (8003cc4 <NLLS+0x2a24>)
 8003adc:	4439      	add	r1, r7
 8003ade:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ae2:	f7fc fbf1 	bl	80002c8 <__aeabi_dsub>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	460b      	mov	r3, r1
 8003aea:	4620      	mov	r0, r4
 8003aec:	4629      	mov	r1, r5
 8003aee:	f7fc fda3 	bl	8000638 <__aeabi_dmul>
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	4640      	mov	r0, r8
 8003af8:	4649      	mov	r1, r9
 8003afa:	f7fc fbe5 	bl	80002c8 <__aeabi_dsub>
 8003afe:	4602      	mov	r2, r0
 8003b00:	460b      	mov	r3, r1
 8003b02:	4610      	mov	r0, r2
 8003b04:	4619      	mov	r1, r3
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	f7fc fbdf 	bl	80002cc <__adddf3>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	4614      	mov	r4, r2
 8003b14:	461d      	mov	r5, r3
 8003b16:	4b6a      	ldr	r3, [pc, #424]	@ (8003cc0 <NLLS+0x2a20>)
 8003b18:	443b      	add	r3, r7
 8003b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1e:	4966      	ldr	r1, [pc, #408]	@ (8003cb8 <NLLS+0x2a18>)
 8003b20:	4439      	add	r1, r7
 8003b22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b26:	f7fc fd87 	bl	8000638 <__aeabi_dmul>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	4610      	mov	r0, r2
 8003b30:	4619      	mov	r1, r3
 8003b32:	4b63      	ldr	r3, [pc, #396]	@ (8003cc0 <NLLS+0x2a20>)
 8003b34:	443b      	add	r3, r7
 8003b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3a:	f7fc fd7d 	bl	8000638 <__aeabi_dmul>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	4610      	mov	r0, r2
 8003b44:	4619      	mov	r1, r3
 8003b46:	4b58      	ldr	r3, [pc, #352]	@ (8003ca8 <NLLS+0x2a08>)
 8003b48:	443b      	add	r3, r7
 8003b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4e:	f7fc fd73 	bl	8000638 <__aeabi_dmul>
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	4610      	mov	r0, r2
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4b53      	ldr	r3, [pc, #332]	@ (8003ca8 <NLLS+0x2a08>)
 8003b5c:	443b      	add	r3, r7
 8003b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b62:	f7fc fd69 	bl	8000638 <__aeabi_dmul>
 8003b66:	4602      	mov	r2, r0
 8003b68:	460b      	mov	r3, r1
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	4629      	mov	r1, r5
 8003b6e:	f7fc fe8d 	bl	800088c <__aeabi_ddiv>
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8003b7a:	4b53      	ldr	r3, [pc, #332]	@ (8003cc8 <NLLS+0x2a28>)
 8003b7c:	443b      	add	r3, r7
 8003b7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	f7fc fba1 	bl	80002cc <__adddf3>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4692      	mov	sl, r2
 8003b90:	469b      	mov	fp, r3
 8003b92:	4b4e      	ldr	r3, [pc, #312]	@ (8003ccc <NLLS+0x2a2c>)
 8003b94:	443b      	add	r3, r7
 8003b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9a:	4949      	ldr	r1, [pc, #292]	@ (8003cc0 <NLLS+0x2a20>)
 8003b9c:	4439      	add	r1, r7
 8003b9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ba2:	f7fc fd49 	bl	8000638 <__aeabi_dmul>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	460b      	mov	r3, r1
 8003baa:	4690      	mov	r8, r2
 8003bac:	4699      	mov	r9, r3
 8003bae:	4b43      	ldr	r3, [pc, #268]	@ (8003cbc <NLLS+0x2a1c>)
 8003bb0:	443b      	add	r3, r7
 8003bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb6:	4944      	ldr	r1, [pc, #272]	@ (8003cc8 <NLLS+0x2a28>)
 8003bb8:	4439      	add	r1, r7
 8003bba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bbe:	f7fc fd3b 	bl	8000638 <__aeabi_dmul>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	4614      	mov	r4, r2
 8003bc8:	461d      	mov	r5, r3
 8003bca:	4b37      	ldr	r3, [pc, #220]	@ (8003ca8 <NLLS+0x2a08>)
 8003bcc:	443b      	add	r3, r7
 8003bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd2:	4933      	ldr	r1, [pc, #204]	@ (8003ca0 <NLLS+0x2a00>)
 8003bd4:	4439      	add	r1, r7
 8003bd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bda:	f7fc fd2d 	bl	8000638 <__aeabi_dmul>
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	4610      	mov	r0, r2
 8003be4:	4619      	mov	r1, r3
 8003be6:	4b3a      	ldr	r3, [pc, #232]	@ (8003cd0 <NLLS+0x2a30>)
 8003be8:	443b      	add	r3, r7
 8003bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bee:	f7fc fd23 	bl	8000638 <__aeabi_dmul>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	4629      	mov	r1, r5
 8003bfa:	f7fc fb65 	bl	80002c8 <__aeabi_dsub>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	460b      	mov	r3, r1
 8003c02:	4640      	mov	r0, r8
 8003c04:	4649      	mov	r1, r9
 8003c06:	f7fc fd17 	bl	8000638 <__aeabi_dmul>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	4614      	mov	r4, r2
 8003c10:	461d      	mov	r5, r3
 8003c12:	4b27      	ldr	r3, [pc, #156]	@ (8003cb0 <NLLS+0x2a10>)
 8003c14:	443b      	add	r3, r7
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	00da      	lsls	r2, r3, #3
 8003c1a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003c1e:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8003c22:	4413      	add	r3, r2
 8003c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c28:	4926      	ldr	r1, [pc, #152]	@ (8003cc4 <NLLS+0x2a24>)
 8003c2a:	4439      	add	r1, r7
 8003c2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c30:	f7fc fb4a 	bl	80002c8 <__aeabi_dsub>
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4620      	mov	r0, r4
 8003c3a:	4629      	mov	r1, r5
 8003c3c:	f7fc fcfc 	bl	8000638 <__aeabi_dmul>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4690      	mov	r8, r2
 8003c46:	4699      	mov	r9, r3
 8003c48:	4b1d      	ldr	r3, [pc, #116]	@ (8003cc0 <NLLS+0x2a20>)
 8003c4a:	443b      	add	r3, r7
 8003c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c50:	4919      	ldr	r1, [pc, #100]	@ (8003cb8 <NLLS+0x2a18>)
 8003c52:	4439      	add	r1, r7
 8003c54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c58:	f7fc fcee 	bl	8000638 <__aeabi_dmul>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4610      	mov	r0, r2
 8003c62:	4619      	mov	r1, r3
 8003c64:	4b10      	ldr	r3, [pc, #64]	@ (8003ca8 <NLLS+0x2a08>)
 8003c66:	443b      	add	r3, r7
 8003c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6c:	f7fc fce4 	bl	8000638 <__aeabi_dmul>
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4614      	mov	r4, r2
 8003c76:	461d      	mov	r5, r3
 8003c78:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb0 <NLLS+0x2a10>)
 8003c7a:	443b      	add	r3, r7
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	00da      	lsls	r2, r3, #3
 8003c80:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003c84:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003c88:	4413      	add	r3, r2
 8003c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8e:	4911      	ldr	r1, [pc, #68]	@ (8003cd4 <NLLS+0x2a34>)
 8003c90:	4439      	add	r1, r7
 8003c92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c96:	f7fc fb17 	bl	80002c8 <__aeabi_dsub>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	e01b      	b.n	8003cd8 <NLLS+0x2a38>
 8003ca0:	0002dfa8 	.word	0x0002dfa8
 8003ca4:	0002dfb8 	.word	0x0002dfb8
 8003ca8:	0002dfb0 	.word	0x0002dfb0
 8003cac:	00014070 	.word	0x00014070
 8003cb0:	0002e008 	.word	0x0002e008
 8003cb4:	0002e040 	.word	0x0002e040
 8003cb8:	0002e060 	.word	0x0002e060
 8003cbc:	0002dfc8 	.word	0x0002dfc8
 8003cc0:	0002e058 	.word	0x0002e058
 8003cc4:	0002e048 	.word	0x0002e048
 8003cc8:	0002dfc0 	.word	0x0002dfc0
 8003ccc:	0002e050 	.word	0x0002e050
 8003cd0:	0002dfd0 	.word	0x0002dfd0
 8003cd4:	0002e038 	.word	0x0002e038
 8003cd8:	4620      	mov	r0, r4
 8003cda:	4629      	mov	r1, r5
 8003cdc:	f7fc fcac 	bl	8000638 <__aeabi_dmul>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4640      	mov	r0, r8
 8003ce6:	4649      	mov	r1, r9
 8003ce8:	f7fc faf0 	bl	80002cc <__adddf3>
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4690      	mov	r8, r2
 8003cf2:	4699      	mov	r9, r3
 8003cf4:	4bb4      	ldr	r3, [pc, #720]	@ (8003fc8 <NLLS+0x2d28>)
 8003cf6:	443b      	add	r3, r7
 8003cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfc:	49b3      	ldr	r1, [pc, #716]	@ (8003fcc <NLLS+0x2d2c>)
 8003cfe:	4439      	add	r1, r7
 8003d00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d04:	f7fc fc98 	bl	8000638 <__aeabi_dmul>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	4619      	mov	r1, r3
 8003d10:	4baf      	ldr	r3, [pc, #700]	@ (8003fd0 <NLLS+0x2d30>)
 8003d12:	443b      	add	r3, r7
 8003d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d18:	f7fc fc8e 	bl	8000638 <__aeabi_dmul>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4614      	mov	r4, r2
 8003d22:	461d      	mov	r5, r3
 8003d24:	4bab      	ldr	r3, [pc, #684]	@ (8003fd4 <NLLS+0x2d34>)
 8003d26:	443b      	add	r3, r7
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	00da      	lsls	r2, r3, #3
 8003d2c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003d30:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8003d34:	4413      	add	r3, r2
 8003d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3a:	49a7      	ldr	r1, [pc, #668]	@ (8003fd8 <NLLS+0x2d38>)
 8003d3c:	4439      	add	r1, r7
 8003d3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d42:	f7fc fac1 	bl	80002c8 <__aeabi_dsub>
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	4620      	mov	r0, r4
 8003d4c:	4629      	mov	r1, r5
 8003d4e:	f7fc fc73 	bl	8000638 <__aeabi_dmul>
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	4640      	mov	r0, r8
 8003d58:	4649      	mov	r1, r9
 8003d5a:	f7fc fab5 	bl	80002c8 <__aeabi_dsub>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	460b      	mov	r3, r1
 8003d62:	4650      	mov	r0, sl
 8003d64:	4659      	mov	r1, fp
 8003d66:	f7fc fc67 	bl	8000638 <__aeabi_dmul>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	4614      	mov	r4, r2
 8003d70:	461d      	mov	r5, r3
 8003d72:	4b9a      	ldr	r3, [pc, #616]	@ (8003fdc <NLLS+0x2d3c>)
 8003d74:	443b      	add	r3, r7
 8003d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7a:	4994      	ldr	r1, [pc, #592]	@ (8003fcc <NLLS+0x2d2c>)
 8003d7c:	4439      	add	r1, r7
 8003d7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d82:	f7fc fc59 	bl	8000638 <__aeabi_dmul>
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4610      	mov	r0, r2
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4b93      	ldr	r3, [pc, #588]	@ (8003fdc <NLLS+0x2d3c>)
 8003d90:	443b      	add	r3, r7
 8003d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d96:	f7fc fc4f 	bl	8000638 <__aeabi_dmul>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	4610      	mov	r0, r2
 8003da0:	4619      	mov	r1, r3
 8003da2:	4b89      	ldr	r3, [pc, #548]	@ (8003fc8 <NLLS+0x2d28>)
 8003da4:	443b      	add	r3, r7
 8003da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003daa:	f7fc fc45 	bl	8000638 <__aeabi_dmul>
 8003dae:	4602      	mov	r2, r0
 8003db0:	460b      	mov	r3, r1
 8003db2:	4610      	mov	r0, r2
 8003db4:	4619      	mov	r1, r3
 8003db6:	4b8a      	ldr	r3, [pc, #552]	@ (8003fe0 <NLLS+0x2d40>)
 8003db8:	443b      	add	r3, r7
 8003dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dbe:	f7fc fc3b 	bl	8000638 <__aeabi_dmul>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4b85      	ldr	r3, [pc, #532]	@ (8003fe0 <NLLS+0x2d40>)
 8003dcc:	443b      	add	r3, r7
 8003dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd2:	f7fc fc31 	bl	8000638 <__aeabi_dmul>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4610      	mov	r0, r2
 8003ddc:	4619      	mov	r1, r3
 8003dde:	4b81      	ldr	r3, [pc, #516]	@ (8003fe4 <NLLS+0x2d44>)
 8003de0:	443b      	add	r3, r7
 8003de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de6:	f7fc fc27 	bl	8000638 <__aeabi_dmul>
 8003dea:	4602      	mov	r2, r0
 8003dec:	460b      	mov	r3, r1
 8003dee:	4610      	mov	r0, r2
 8003df0:	4619      	mov	r1, r3
 8003df2:	4b7c      	ldr	r3, [pc, #496]	@ (8003fe4 <NLLS+0x2d44>)
 8003df4:	443b      	add	r3, r7
 8003df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfa:	f7fc fc1d 	bl	8000638 <__aeabi_dmul>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	460b      	mov	r3, r1
 8003e02:	4610      	mov	r0, r2
 8003e04:	4619      	mov	r1, r3
 8003e06:	4b78      	ldr	r3, [pc, #480]	@ (8003fe8 <NLLS+0x2d48>)
 8003e08:	443b      	add	r3, r7
 8003e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0e:	f7fc fc13 	bl	8000638 <__aeabi_dmul>
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	4610      	mov	r0, r2
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4b73      	ldr	r3, [pc, #460]	@ (8003fe8 <NLLS+0x2d48>)
 8003e1c:	443b      	add	r3, r7
 8003e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e22:	f7fc fc09 	bl	8000638 <__aeabi_dmul>
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4620      	mov	r0, r4
 8003e2c:	4629      	mov	r1, r5
 8003e2e:	f7fc fd2d 	bl	800088c <__aeabi_ddiv>
 8003e32:	4602      	mov	r2, r0
 8003e34:	460b      	mov	r3, r1
 8003e36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e3a:	f7fc fa45 	bl	80002c8 <__aeabi_dsub>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	496a      	ldr	r1, [pc, #424]	@ (8003fec <NLLS+0x2d4c>)
 8003e44:	4439      	add	r1, r7
 8003e46:	f5a1 7006 	sub.w	r0, r1, #536	@ 0x218
 8003e4a:	4962      	ldr	r1, [pc, #392]	@ (8003fd4 <NLLS+0x2d34>)
 8003e4c:	4439      	add	r1, r7
 8003e4e:	6809      	ldr	r1, [r1, #0]
 8003e50:	f501 518b 	add.w	r1, r1, #4448	@ 0x1160
 8003e54:	00c9      	lsls	r1, r1, #3
 8003e56:	4401      	add	r1, r0
 8003e58:	e9c1 2300 	strd	r2, r3, [r1]

			mat_H[5][i] = (2*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho);
 8003e5c:	4b5a      	ldr	r3, [pc, #360]	@ (8003fc8 <NLLS+0x2d28>)
 8003e5e:	443b      	add	r3, r7
 8003e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e64:	495d      	ldr	r1, [pc, #372]	@ (8003fdc <NLLS+0x2d3c>)
 8003e66:	4439      	add	r1, r7
 8003e68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e6c:	f7fc fbe4 	bl	8000638 <__aeabi_dmul>
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
 8003e74:	4690      	mov	r8, r2
 8003e76:	4699      	mov	r9, r3
 8003e78:	4b5d      	ldr	r3, [pc, #372]	@ (8003ff0 <NLLS+0x2d50>)
 8003e7a:	443b      	add	r3, r7
 8003e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e80:	4953      	ldr	r1, [pc, #332]	@ (8003fd0 <NLLS+0x2d30>)
 8003e82:	4439      	add	r1, r7
 8003e84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e88:	f7fc fbd6 	bl	8000638 <__aeabi_dmul>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4614      	mov	r4, r2
 8003e92:	461d      	mov	r5, r3
 8003e94:	4b54      	ldr	r3, [pc, #336]	@ (8003fe8 <NLLS+0x2d48>)
 8003e96:	443b      	add	r3, r7
 8003e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9c:	4950      	ldr	r1, [pc, #320]	@ (8003fe0 <NLLS+0x2d40>)
 8003e9e:	4439      	add	r1, r7
 8003ea0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ea4:	f7fc fbc8 	bl	8000638 <__aeabi_dmul>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4610      	mov	r0, r2
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4b50      	ldr	r3, [pc, #320]	@ (8003ff4 <NLLS+0x2d54>)
 8003eb2:	443b      	add	r3, r7
 8003eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb8:	f7fc fbbe 	bl	8000638 <__aeabi_dmul>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4620      	mov	r0, r4
 8003ec2:	4629      	mov	r1, r5
 8003ec4:	f7fc fa00 	bl	80002c8 <__aeabi_dsub>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	460b      	mov	r3, r1
 8003ecc:	4640      	mov	r0, r8
 8003ece:	4649      	mov	r1, r9
 8003ed0:	f7fc fbb2 	bl	8000638 <__aeabi_dmul>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	4614      	mov	r4, r2
 8003eda:	461d      	mov	r5, r3
 8003edc:	4b3d      	ldr	r3, [pc, #244]	@ (8003fd4 <NLLS+0x2d34>)
 8003ede:	443b      	add	r3, r7
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8003ee8:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8003eec:	4413      	add	r3, r2
 8003eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef2:	4941      	ldr	r1, [pc, #260]	@ (8003ff8 <NLLS+0x2d58>)
 8003ef4:	4439      	add	r1, r7
 8003ef6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003efa:	f7fc f9e5 	bl	80002c8 <__aeabi_dsub>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4620      	mov	r0, r4
 8003f04:	4629      	mov	r1, r5
 8003f06:	f7fc fb97 	bl	8000638 <__aeabi_dmul>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	4690      	mov	r8, r2
 8003f10:	4699      	mov	r9, r3
 8003f12:	4b32      	ldr	r3, [pc, #200]	@ (8003fdc <NLLS+0x2d3c>)
 8003f14:	443b      	add	r3, r7
 8003f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1a:	492c      	ldr	r1, [pc, #176]	@ (8003fcc <NLLS+0x2d2c>)
 8003f1c:	4439      	add	r1, r7
 8003f1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f22:	f7fc fb89 	bl	8000638 <__aeabi_dmul>
 8003f26:	4602      	mov	r2, r0
 8003f28:	460b      	mov	r3, r1
 8003f2a:	4610      	mov	r0, r2
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4b2e      	ldr	r3, [pc, #184]	@ (8003fe8 <NLLS+0x2d48>)
 8003f30:	443b      	add	r3, r7
 8003f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f36:	f7fc fb7f 	bl	8000638 <__aeabi_dmul>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4614      	mov	r4, r2
 8003f40:	461d      	mov	r5, r3
 8003f42:	4b24      	ldr	r3, [pc, #144]	@ (8003fd4 <NLLS+0x2d34>)
 8003f44:	443b      	add	r3, r7
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	00da      	lsls	r2, r3, #3
 8003f4a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003f4e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003f52:	4413      	add	r3, r2
 8003f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f58:	4928      	ldr	r1, [pc, #160]	@ (8003ffc <NLLS+0x2d5c>)
 8003f5a:	4439      	add	r1, r7
 8003f5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f60:	f7fc f9b2 	bl	80002c8 <__aeabi_dsub>
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	4620      	mov	r0, r4
 8003f6a:	4629      	mov	r1, r5
 8003f6c:	f7fc fb64 	bl	8000638 <__aeabi_dmul>
 8003f70:	4602      	mov	r2, r0
 8003f72:	460b      	mov	r3, r1
 8003f74:	4640      	mov	r0, r8
 8003f76:	4649      	mov	r1, r9
 8003f78:	f7fc f9a8 	bl	80002cc <__adddf3>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	460b      	mov	r3, r1
 8003f80:	4690      	mov	r8, r2
 8003f82:	4699      	mov	r9, r3
 8003f84:	4b10      	ldr	r3, [pc, #64]	@ (8003fc8 <NLLS+0x2d28>)
 8003f86:	443b      	add	r3, r7
 8003f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8c:	490f      	ldr	r1, [pc, #60]	@ (8003fcc <NLLS+0x2d2c>)
 8003f8e:	4439      	add	r1, r7
 8003f90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f94:	f7fc fb50 	bl	8000638 <__aeabi_dmul>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd0 <NLLS+0x2d30>)
 8003fa2:	443b      	add	r3, r7
 8003fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa8:	f7fc fb46 	bl	8000638 <__aeabi_dmul>
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
 8003fb0:	4614      	mov	r4, r2
 8003fb2:	461d      	mov	r5, r3
 8003fb4:	4b07      	ldr	r3, [pc, #28]	@ (8003fd4 <NLLS+0x2d34>)
 8003fb6:	443b      	add	r3, r7
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	00da      	lsls	r2, r3, #3
 8003fbc:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003fc0:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	e01b      	b.n	8004000 <NLLS+0x2d60>
 8003fc8:	0002e050 	.word	0x0002e050
 8003fcc:	0002e060 	.word	0x0002e060
 8003fd0:	0002dfc0 	.word	0x0002dfc0
 8003fd4:	0002e008 	.word	0x0002e008
 8003fd8:	0002e040 	.word	0x0002e040
 8003fdc:	0002e058 	.word	0x0002e058
 8003fe0:	0002dfa8 	.word	0x0002dfa8
 8003fe4:	0002dfb8 	.word	0x0002dfb8
 8003fe8:	0002dfb0 	.word	0x0002dfb0
 8003fec:	00014070 	.word	0x00014070
 8003ff0:	0002dfc8 	.word	0x0002dfc8
 8003ff4:	0002dfd0 	.word	0x0002dfd0
 8003ff8:	0002e048 	.word	0x0002e048
 8003ffc:	0002e038 	.word	0x0002e038
 8004000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004004:	49b6      	ldr	r1, [pc, #728]	@ (80042e0 <NLLS+0x3040>)
 8004006:	4439      	add	r1, r7
 8004008:	e9d1 0100 	ldrd	r0, r1, [r1]
 800400c:	f7fc f95c 	bl	80002c8 <__aeabi_dsub>
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	4620      	mov	r0, r4
 8004016:	4629      	mov	r1, r5
 8004018:	f7fc fb0e 	bl	8000638 <__aeabi_dmul>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	4640      	mov	r0, r8
 8004022:	4649      	mov	r1, r9
 8004024:	f7fc f950 	bl	80002c8 <__aeabi_dsub>
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	4610      	mov	r0, r2
 800402e:	4619      	mov	r1, r3
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	f7fc f94a 	bl	80002cc <__adddf3>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	4614      	mov	r4, r2
 800403e:	461d      	mov	r5, r3
 8004040:	4ba8      	ldr	r3, [pc, #672]	@ (80042e4 <NLLS+0x3044>)
 8004042:	443b      	add	r3, r7
 8004044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004048:	49a7      	ldr	r1, [pc, #668]	@ (80042e8 <NLLS+0x3048>)
 800404a:	4439      	add	r1, r7
 800404c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004050:	f7fc faf2 	bl	8000638 <__aeabi_dmul>
 8004054:	4602      	mov	r2, r0
 8004056:	460b      	mov	r3, r1
 8004058:	4610      	mov	r0, r2
 800405a:	4619      	mov	r1, r3
 800405c:	4ba3      	ldr	r3, [pc, #652]	@ (80042ec <NLLS+0x304c>)
 800405e:	443b      	add	r3, r7
 8004060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004064:	f7fc fae8 	bl	8000638 <__aeabi_dmul>
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	4610      	mov	r0, r2
 800406e:	4619      	mov	r1, r3
 8004070:	4b9e      	ldr	r3, [pc, #632]	@ (80042ec <NLLS+0x304c>)
 8004072:	443b      	add	r3, r7
 8004074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004078:	f7fc fade 	bl	8000638 <__aeabi_dmul>
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	4610      	mov	r0, r2
 8004082:	4619      	mov	r1, r3
 8004084:	4b9a      	ldr	r3, [pc, #616]	@ (80042f0 <NLLS+0x3050>)
 8004086:	443b      	add	r3, r7
 8004088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408c:	f7fc fad4 	bl	8000638 <__aeabi_dmul>
 8004090:	4602      	mov	r2, r0
 8004092:	460b      	mov	r3, r1
 8004094:	4610      	mov	r0, r2
 8004096:	4619      	mov	r1, r3
 8004098:	4b95      	ldr	r3, [pc, #596]	@ (80042f0 <NLLS+0x3050>)
 800409a:	443b      	add	r3, r7
 800409c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a0:	f7fc faca 	bl	8000638 <__aeabi_dmul>
 80040a4:	4602      	mov	r2, r0
 80040a6:	460b      	mov	r3, r1
 80040a8:	4610      	mov	r0, r2
 80040aa:	4619      	mov	r1, r3
 80040ac:	4b91      	ldr	r3, [pc, #580]	@ (80042f4 <NLLS+0x3054>)
 80040ae:	443b      	add	r3, r7
 80040b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b4:	f7fc fac0 	bl	8000638 <__aeabi_dmul>
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	4610      	mov	r0, r2
 80040be:	4619      	mov	r1, r3
 80040c0:	4b8c      	ldr	r3, [pc, #560]	@ (80042f4 <NLLS+0x3054>)
 80040c2:	443b      	add	r3, r7
 80040c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c8:	f7fc fab6 	bl	8000638 <__aeabi_dmul>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4610      	mov	r0, r2
 80040d2:	4619      	mov	r1, r3
 80040d4:	4b88      	ldr	r3, [pc, #544]	@ (80042f8 <NLLS+0x3058>)
 80040d6:	443b      	add	r3, r7
 80040d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040dc:	f7fc faac 	bl	8000638 <__aeabi_dmul>
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	4620      	mov	r0, r4
 80040e6:	4629      	mov	r1, r5
 80040e8:	f7fc fbd0 	bl	800088c <__aeabi_ddiv>
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4610      	mov	r0, r2
 80040f2:	4619      	mov	r1, r3
 80040f4:	4b81      	ldr	r3, [pc, #516]	@ (80042fc <NLLS+0x305c>)
 80040f6:	443b      	add	r3, r7
 80040f8:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 80040fc:	4b80      	ldr	r3, [pc, #512]	@ (8004300 <NLLS+0x3060>)
 80040fe:	443b      	add	r3, r7
 8004100:	681c      	ldr	r4, [r3, #0]
 8004102:	f241 53b8 	movw	r3, #5560	@ 0x15b8
 8004106:	4423      	add	r3, r4
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	4413      	add	r3, r2
 800410c:	e9c3 0100 	strd	r0, r1, [r3]

			mat_H[6][i] = -(2*(bx*sy - mx[i]*sy - by*sx*sin_rho + my[i]*sx*sin_rho)*(by*sx*sz*sin_lambda*sin_lambda - my[i]*sx*sz*sin_lambda*sin_lambda + by*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - my[i]*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - bz*sx*sy*cos_rho*sin_lambda + mz[i]*sx*sy*cos_rho*sin_lambda - bx*sy*sz*sin_lambda*sin_lambda*sin_rho + mx[i]*sy*sz*sin_lambda*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + mx[i]*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + bx*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi - mx[i]*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi))/(sx*sx*sy*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*(cos_rho*cos_rho*cos_rho));
 8004110:	4b74      	ldr	r3, [pc, #464]	@ (80042e4 <NLLS+0x3044>)
 8004112:	443b      	add	r3, r7
 8004114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004118:	497a      	ldr	r1, [pc, #488]	@ (8004304 <NLLS+0x3064>)
 800411a:	4439      	add	r1, r7
 800411c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004120:	f7fc fa8a 	bl	8000638 <__aeabi_dmul>
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	4614      	mov	r4, r2
 800412a:	461d      	mov	r5, r3
 800412c:	4b74      	ldr	r3, [pc, #464]	@ (8004300 <NLLS+0x3060>)
 800412e:	443b      	add	r3, r7
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8004138:	f852 2c34 	ldr.w	r2, [r2, #-52]
 800413c:	4413      	add	r3, r2
 800413e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004142:	4b68      	ldr	r3, [pc, #416]	@ (80042e4 <NLLS+0x3044>)
 8004144:	443b      	add	r3, r7
 8004146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414a:	f7fc fa75 	bl	8000638 <__aeabi_dmul>
 800414e:	4602      	mov	r2, r0
 8004150:	460b      	mov	r3, r1
 8004152:	4620      	mov	r0, r4
 8004154:	4629      	mov	r1, r5
 8004156:	f7fc f8b7 	bl	80002c8 <__aeabi_dsub>
 800415a:	4602      	mov	r2, r0
 800415c:	460b      	mov	r3, r1
 800415e:	4614      	mov	r4, r2
 8004160:	461d      	mov	r5, r3
 8004162:	4b61      	ldr	r3, [pc, #388]	@ (80042e8 <NLLS+0x3048>)
 8004164:	443b      	add	r3, r7
 8004166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416a:	495d      	ldr	r1, [pc, #372]	@ (80042e0 <NLLS+0x3040>)
 800416c:	4439      	add	r1, r7
 800416e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004172:	f7fc fa61 	bl	8000638 <__aeabi_dmul>
 8004176:	4602      	mov	r2, r0
 8004178:	460b      	mov	r3, r1
 800417a:	4610      	mov	r0, r2
 800417c:	4619      	mov	r1, r3
 800417e:	4b62      	ldr	r3, [pc, #392]	@ (8004308 <NLLS+0x3068>)
 8004180:	443b      	add	r3, r7
 8004182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004186:	f7fc fa57 	bl	8000638 <__aeabi_dmul>
 800418a:	4602      	mov	r2, r0
 800418c:	460b      	mov	r3, r1
 800418e:	4620      	mov	r0, r4
 8004190:	4629      	mov	r1, r5
 8004192:	f7fc f899 	bl	80002c8 <__aeabi_dsub>
 8004196:	4602      	mov	r2, r0
 8004198:	460b      	mov	r3, r1
 800419a:	4614      	mov	r4, r2
 800419c:	461d      	mov	r5, r3
 800419e:	4b58      	ldr	r3, [pc, #352]	@ (8004300 <NLLS+0x3060>)
 80041a0:	443b      	add	r3, r7
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80041aa:	f852 2c38 	ldr.w	r2, [r2, #-56]
 80041ae:	4413      	add	r3, r2
 80041b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041b4:	4b4c      	ldr	r3, [pc, #304]	@ (80042e8 <NLLS+0x3048>)
 80041b6:	443b      	add	r3, r7
 80041b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041bc:	f7fc fa3c 	bl	8000638 <__aeabi_dmul>
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	4610      	mov	r0, r2
 80041c6:	4619      	mov	r1, r3
 80041c8:	4b4f      	ldr	r3, [pc, #316]	@ (8004308 <NLLS+0x3068>)
 80041ca:	443b      	add	r3, r7
 80041cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d0:	f7fc fa32 	bl	8000638 <__aeabi_dmul>
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	4620      	mov	r0, r4
 80041da:	4629      	mov	r1, r5
 80041dc:	f7fc f876 	bl	80002cc <__adddf3>
 80041e0:	4602      	mov	r2, r0
 80041e2:	460b      	mov	r3, r1
 80041e4:	4610      	mov	r0, r2
 80041e6:	4619      	mov	r1, r3
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	f7fc f86e 	bl	80002cc <__adddf3>
 80041f0:	4602      	mov	r2, r0
 80041f2:	460b      	mov	r3, r1
 80041f4:	4690      	mov	r8, r2
 80041f6:	4699      	mov	r9, r3
 80041f8:	4b3b      	ldr	r3, [pc, #236]	@ (80042e8 <NLLS+0x3048>)
 80041fa:	443b      	add	r3, r7
 80041fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004200:	4937      	ldr	r1, [pc, #220]	@ (80042e0 <NLLS+0x3040>)
 8004202:	4439      	add	r1, r7
 8004204:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004208:	f7fc fa16 	bl	8000638 <__aeabi_dmul>
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
 8004210:	4610      	mov	r0, r2
 8004212:	4619      	mov	r1, r3
 8004214:	4b35      	ldr	r3, [pc, #212]	@ (80042ec <NLLS+0x304c>)
 8004216:	443b      	add	r3, r7
 8004218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421c:	f7fc fa0c 	bl	8000638 <__aeabi_dmul>
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	4610      	mov	r0, r2
 8004226:	4619      	mov	r1, r3
 8004228:	4b38      	ldr	r3, [pc, #224]	@ (800430c <NLLS+0x306c>)
 800422a:	443b      	add	r3, r7
 800422c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004230:	f7fc fa02 	bl	8000638 <__aeabi_dmul>
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	4610      	mov	r0, r2
 800423a:	4619      	mov	r1, r3
 800423c:	4b33      	ldr	r3, [pc, #204]	@ (800430c <NLLS+0x306c>)
 800423e:	443b      	add	r3, r7
 8004240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004244:	f7fc f9f8 	bl	8000638 <__aeabi_dmul>
 8004248:	4602      	mov	r2, r0
 800424a:	460b      	mov	r3, r1
 800424c:	4614      	mov	r4, r2
 800424e:	461d      	mov	r5, r3
 8004250:	4b2b      	ldr	r3, [pc, #172]	@ (8004300 <NLLS+0x3060>)
 8004252:	443b      	add	r3, r7
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	00da      	lsls	r2, r3, #3
 8004258:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800425c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8004260:	4413      	add	r3, r2
 8004262:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004266:	4b20      	ldr	r3, [pc, #128]	@ (80042e8 <NLLS+0x3048>)
 8004268:	443b      	add	r3, r7
 800426a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426e:	f7fc f9e3 	bl	8000638 <__aeabi_dmul>
 8004272:	4602      	mov	r2, r0
 8004274:	460b      	mov	r3, r1
 8004276:	4610      	mov	r0, r2
 8004278:	4619      	mov	r1, r3
 800427a:	4b1c      	ldr	r3, [pc, #112]	@ (80042ec <NLLS+0x304c>)
 800427c:	443b      	add	r3, r7
 800427e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004282:	f7fc f9d9 	bl	8000638 <__aeabi_dmul>
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	4610      	mov	r0, r2
 800428c:	4619      	mov	r1, r3
 800428e:	4b1f      	ldr	r3, [pc, #124]	@ (800430c <NLLS+0x306c>)
 8004290:	443b      	add	r3, r7
 8004292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004296:	f7fc f9cf 	bl	8000638 <__aeabi_dmul>
 800429a:	4602      	mov	r2, r0
 800429c:	460b      	mov	r3, r1
 800429e:	4610      	mov	r0, r2
 80042a0:	4619      	mov	r1, r3
 80042a2:	4b1a      	ldr	r3, [pc, #104]	@ (800430c <NLLS+0x306c>)
 80042a4:	443b      	add	r3, r7
 80042a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042aa:	f7fc f9c5 	bl	8000638 <__aeabi_dmul>
 80042ae:	4602      	mov	r2, r0
 80042b0:	460b      	mov	r3, r1
 80042b2:	4620      	mov	r0, r4
 80042b4:	4629      	mov	r1, r5
 80042b6:	f7fc f807 	bl	80002c8 <__aeabi_dsub>
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	4614      	mov	r4, r2
 80042c0:	461d      	mov	r5, r3
 80042c2:	4b09      	ldr	r3, [pc, #36]	@ (80042e8 <NLLS+0x3048>)
 80042c4:	443b      	add	r3, r7
 80042c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ca:	4905      	ldr	r1, [pc, #20]	@ (80042e0 <NLLS+0x3040>)
 80042cc:	4439      	add	r1, r7
 80042ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042d2:	f7fc f9b1 	bl	8000638 <__aeabi_dmul>
 80042d6:	4602      	mov	r2, r0
 80042d8:	460b      	mov	r3, r1
 80042da:	4610      	mov	r0, r2
 80042dc:	4619      	mov	r1, r3
 80042de:	e017      	b.n	8004310 <NLLS+0x3070>
 80042e0:	0002e040 	.word	0x0002e040
 80042e4:	0002e058 	.word	0x0002e058
 80042e8:	0002e060 	.word	0x0002e060
 80042ec:	0002e050 	.word	0x0002e050
 80042f0:	0002dfa8 	.word	0x0002dfa8
 80042f4:	0002dfb8 	.word	0x0002dfb8
 80042f8:	0002dfb0 	.word	0x0002dfb0
 80042fc:	00014070 	.word	0x00014070
 8004300:	0002e008 	.word	0x0002e008
 8004304:	0002e048 	.word	0x0002e048
 8004308:	0002dfc8 	.word	0x0002dfc8
 800430c:	0002dfc0 	.word	0x0002dfc0
 8004310:	4bb7      	ldr	r3, [pc, #732]	@ (80045f0 <NLLS+0x3350>)
 8004312:	443b      	add	r3, r7
 8004314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004318:	f7fc f98e 	bl	8000638 <__aeabi_dmul>
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	4610      	mov	r0, r2
 8004322:	4619      	mov	r1, r3
 8004324:	4bb3      	ldr	r3, [pc, #716]	@ (80045f4 <NLLS+0x3354>)
 8004326:	443b      	add	r3, r7
 8004328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432c:	f7fc f984 	bl	8000638 <__aeabi_dmul>
 8004330:	4602      	mov	r2, r0
 8004332:	460b      	mov	r3, r1
 8004334:	4610      	mov	r0, r2
 8004336:	4619      	mov	r1, r3
 8004338:	4bae      	ldr	r3, [pc, #696]	@ (80045f4 <NLLS+0x3354>)
 800433a:	443b      	add	r3, r7
 800433c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004340:	f7fc f97a 	bl	8000638 <__aeabi_dmul>
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	4610      	mov	r0, r2
 800434a:	4619      	mov	r1, r3
 800434c:	4baa      	ldr	r3, [pc, #680]	@ (80045f8 <NLLS+0x3358>)
 800434e:	443b      	add	r3, r7
 8004350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004354:	f7fc f970 	bl	8000638 <__aeabi_dmul>
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	4610      	mov	r0, r2
 800435e:	4619      	mov	r1, r3
 8004360:	4ba5      	ldr	r3, [pc, #660]	@ (80045f8 <NLLS+0x3358>)
 8004362:	443b      	add	r3, r7
 8004364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004368:	f7fc f966 	bl	8000638 <__aeabi_dmul>
 800436c:	4602      	mov	r2, r0
 800436e:	460b      	mov	r3, r1
 8004370:	4620      	mov	r0, r4
 8004372:	4629      	mov	r1, r5
 8004374:	f7fb ffaa 	bl	80002cc <__adddf3>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4614      	mov	r4, r2
 800437e:	461d      	mov	r5, r3
 8004380:	4b9e      	ldr	r3, [pc, #632]	@ (80045fc <NLLS+0x335c>)
 8004382:	443b      	add	r3, r7
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	00da      	lsls	r2, r3, #3
 8004388:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800438c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8004390:	4413      	add	r3, r2
 8004392:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004396:	4b9a      	ldr	r3, [pc, #616]	@ (8004600 <NLLS+0x3360>)
 8004398:	443b      	add	r3, r7
 800439a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439e:	f7fc f94b 	bl	8000638 <__aeabi_dmul>
 80043a2:	4602      	mov	r2, r0
 80043a4:	460b      	mov	r3, r1
 80043a6:	4610      	mov	r0, r2
 80043a8:	4619      	mov	r1, r3
 80043aa:	4b91      	ldr	r3, [pc, #580]	@ (80045f0 <NLLS+0x3350>)
 80043ac:	443b      	add	r3, r7
 80043ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b2:	f7fc f941 	bl	8000638 <__aeabi_dmul>
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	4610      	mov	r0, r2
 80043bc:	4619      	mov	r1, r3
 80043be:	4b8d      	ldr	r3, [pc, #564]	@ (80045f4 <NLLS+0x3354>)
 80043c0:	443b      	add	r3, r7
 80043c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c6:	f7fc f937 	bl	8000638 <__aeabi_dmul>
 80043ca:	4602      	mov	r2, r0
 80043cc:	460b      	mov	r3, r1
 80043ce:	4610      	mov	r0, r2
 80043d0:	4619      	mov	r1, r3
 80043d2:	4b88      	ldr	r3, [pc, #544]	@ (80045f4 <NLLS+0x3354>)
 80043d4:	443b      	add	r3, r7
 80043d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043da:	f7fc f92d 	bl	8000638 <__aeabi_dmul>
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4610      	mov	r0, r2
 80043e4:	4619      	mov	r1, r3
 80043e6:	4b84      	ldr	r3, [pc, #528]	@ (80045f8 <NLLS+0x3358>)
 80043e8:	443b      	add	r3, r7
 80043ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ee:	f7fc f923 	bl	8000638 <__aeabi_dmul>
 80043f2:	4602      	mov	r2, r0
 80043f4:	460b      	mov	r3, r1
 80043f6:	4610      	mov	r0, r2
 80043f8:	4619      	mov	r1, r3
 80043fa:	4b7f      	ldr	r3, [pc, #508]	@ (80045f8 <NLLS+0x3358>)
 80043fc:	443b      	add	r3, r7
 80043fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004402:	f7fc f919 	bl	8000638 <__aeabi_dmul>
 8004406:	4602      	mov	r2, r0
 8004408:	460b      	mov	r3, r1
 800440a:	4620      	mov	r0, r4
 800440c:	4629      	mov	r1, r5
 800440e:	f7fb ff5b 	bl	80002c8 <__aeabi_dsub>
 8004412:	4602      	mov	r2, r0
 8004414:	460b      	mov	r3, r1
 8004416:	4614      	mov	r4, r2
 8004418:	461d      	mov	r5, r3
 800441a:	4b79      	ldr	r3, [pc, #484]	@ (8004600 <NLLS+0x3360>)
 800441c:	443b      	add	r3, r7
 800441e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004422:	4978      	ldr	r1, [pc, #480]	@ (8004604 <NLLS+0x3364>)
 8004424:	4439      	add	r1, r7
 8004426:	e9d1 0100 	ldrd	r0, r1, [r1]
 800442a:	f7fc f905 	bl	8000638 <__aeabi_dmul>
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	4610      	mov	r0, r2
 8004434:	4619      	mov	r1, r3
 8004436:	4b74      	ldr	r3, [pc, #464]	@ (8004608 <NLLS+0x3368>)
 8004438:	443b      	add	r3, r7
 800443a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443e:	f7fc f8fb 	bl	8000638 <__aeabi_dmul>
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	4610      	mov	r0, r2
 8004448:	4619      	mov	r1, r3
 800444a:	4b70      	ldr	r3, [pc, #448]	@ (800460c <NLLS+0x336c>)
 800444c:	443b      	add	r3, r7
 800444e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004452:	f7fc f8f1 	bl	8000638 <__aeabi_dmul>
 8004456:	4602      	mov	r2, r0
 8004458:	460b      	mov	r3, r1
 800445a:	4610      	mov	r0, r2
 800445c:	4619      	mov	r1, r3
 800445e:	4b6c      	ldr	r3, [pc, #432]	@ (8004610 <NLLS+0x3370>)
 8004460:	443b      	add	r3, r7
 8004462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004466:	f7fc f8e7 	bl	8000638 <__aeabi_dmul>
 800446a:	4602      	mov	r2, r0
 800446c:	460b      	mov	r3, r1
 800446e:	4620      	mov	r0, r4
 8004470:	4629      	mov	r1, r5
 8004472:	f7fb ff29 	bl	80002c8 <__aeabi_dsub>
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	4614      	mov	r4, r2
 800447c:	461d      	mov	r5, r3
 800447e:	4b5f      	ldr	r3, [pc, #380]	@ (80045fc <NLLS+0x335c>)
 8004480:	443b      	add	r3, r7
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	00da      	lsls	r2, r3, #3
 8004486:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800448a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800448e:	4413      	add	r3, r2
 8004490:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004494:	4b5a      	ldr	r3, [pc, #360]	@ (8004600 <NLLS+0x3360>)
 8004496:	443b      	add	r3, r7
 8004498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449c:	f7fc f8cc 	bl	8000638 <__aeabi_dmul>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4610      	mov	r0, r2
 80044a6:	4619      	mov	r1, r3
 80044a8:	4b57      	ldr	r3, [pc, #348]	@ (8004608 <NLLS+0x3368>)
 80044aa:	443b      	add	r3, r7
 80044ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b0:	f7fc f8c2 	bl	8000638 <__aeabi_dmul>
 80044b4:	4602      	mov	r2, r0
 80044b6:	460b      	mov	r3, r1
 80044b8:	4610      	mov	r0, r2
 80044ba:	4619      	mov	r1, r3
 80044bc:	4b53      	ldr	r3, [pc, #332]	@ (800460c <NLLS+0x336c>)
 80044be:	443b      	add	r3, r7
 80044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c4:	f7fc f8b8 	bl	8000638 <__aeabi_dmul>
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	4610      	mov	r0, r2
 80044ce:	4619      	mov	r1, r3
 80044d0:	4b4f      	ldr	r3, [pc, #316]	@ (8004610 <NLLS+0x3370>)
 80044d2:	443b      	add	r3, r7
 80044d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d8:	f7fc f8ae 	bl	8000638 <__aeabi_dmul>
 80044dc:	4602      	mov	r2, r0
 80044de:	460b      	mov	r3, r1
 80044e0:	4620      	mov	r0, r4
 80044e2:	4629      	mov	r1, r5
 80044e4:	f7fb fef2 	bl	80002cc <__adddf3>
 80044e8:	4602      	mov	r2, r0
 80044ea:	460b      	mov	r3, r1
 80044ec:	4614      	mov	r4, r2
 80044ee:	461d      	mov	r5, r3
 80044f0:	4b45      	ldr	r3, [pc, #276]	@ (8004608 <NLLS+0x3368>)
 80044f2:	443b      	add	r3, r7
 80044f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f8:	4946      	ldr	r1, [pc, #280]	@ (8004614 <NLLS+0x3374>)
 80044fa:	4439      	add	r1, r7
 80044fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004500:	f7fc f89a 	bl	8000638 <__aeabi_dmul>
 8004504:	4602      	mov	r2, r0
 8004506:	460b      	mov	r3, r1
 8004508:	4610      	mov	r0, r2
 800450a:	4619      	mov	r1, r3
 800450c:	4b38      	ldr	r3, [pc, #224]	@ (80045f0 <NLLS+0x3350>)
 800450e:	443b      	add	r3, r7
 8004510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004514:	f7fc f890 	bl	8000638 <__aeabi_dmul>
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	4610      	mov	r0, r2
 800451e:	4619      	mov	r1, r3
 8004520:	4b3b      	ldr	r3, [pc, #236]	@ (8004610 <NLLS+0x3370>)
 8004522:	443b      	add	r3, r7
 8004524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004528:	f7fc f886 	bl	8000638 <__aeabi_dmul>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	4610      	mov	r0, r2
 8004532:	4619      	mov	r1, r3
 8004534:	4b36      	ldr	r3, [pc, #216]	@ (8004610 <NLLS+0x3370>)
 8004536:	443b      	add	r3, r7
 8004538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453c:	f7fc f87c 	bl	8000638 <__aeabi_dmul>
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	4610      	mov	r0, r2
 8004546:	4619      	mov	r1, r3
 8004548:	4b33      	ldr	r3, [pc, #204]	@ (8004618 <NLLS+0x3378>)
 800454a:	443b      	add	r3, r7
 800454c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004550:	f7fc f872 	bl	8000638 <__aeabi_dmul>
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	4620      	mov	r0, r4
 800455a:	4629      	mov	r1, r5
 800455c:	f7fb feb4 	bl	80002c8 <__aeabi_dsub>
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	4614      	mov	r4, r2
 8004566:	461d      	mov	r5, r3
 8004568:	4b24      	ldr	r3, [pc, #144]	@ (80045fc <NLLS+0x335c>)
 800456a:	443b      	add	r3, r7
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	00da      	lsls	r2, r3, #3
 8004570:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8004574:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8004578:	4413      	add	r3, r2
 800457a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800457e:	4b22      	ldr	r3, [pc, #136]	@ (8004608 <NLLS+0x3368>)
 8004580:	443b      	add	r3, r7
 8004582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004586:	f7fc f857 	bl	8000638 <__aeabi_dmul>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	4610      	mov	r0, r2
 8004590:	4619      	mov	r1, r3
 8004592:	4b17      	ldr	r3, [pc, #92]	@ (80045f0 <NLLS+0x3350>)
 8004594:	443b      	add	r3, r7
 8004596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459a:	f7fc f84d 	bl	8000638 <__aeabi_dmul>
 800459e:	4602      	mov	r2, r0
 80045a0:	460b      	mov	r3, r1
 80045a2:	4610      	mov	r0, r2
 80045a4:	4619      	mov	r1, r3
 80045a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004610 <NLLS+0x3370>)
 80045a8:	443b      	add	r3, r7
 80045aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ae:	f7fc f843 	bl	8000638 <__aeabi_dmul>
 80045b2:	4602      	mov	r2, r0
 80045b4:	460b      	mov	r3, r1
 80045b6:	4610      	mov	r0, r2
 80045b8:	4619      	mov	r1, r3
 80045ba:	4b15      	ldr	r3, [pc, #84]	@ (8004610 <NLLS+0x3370>)
 80045bc:	443b      	add	r3, r7
 80045be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c2:	f7fc f839 	bl	8000638 <__aeabi_dmul>
 80045c6:	4602      	mov	r2, r0
 80045c8:	460b      	mov	r3, r1
 80045ca:	4610      	mov	r0, r2
 80045cc:	4619      	mov	r1, r3
 80045ce:	4b12      	ldr	r3, [pc, #72]	@ (8004618 <NLLS+0x3378>)
 80045d0:	443b      	add	r3, r7
 80045d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d6:	f7fc f82f 	bl	8000638 <__aeabi_dmul>
 80045da:	4602      	mov	r2, r0
 80045dc:	460b      	mov	r3, r1
 80045de:	4620      	mov	r0, r4
 80045e0:	4629      	mov	r1, r5
 80045e2:	f7fb fe73 	bl	80002cc <__adddf3>
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	4614      	mov	r4, r2
 80045ec:	461d      	mov	r5, r3
 80045ee:	e015      	b.n	800461c <NLLS+0x337c>
 80045f0:	0002e050 	.word	0x0002e050
 80045f4:	0002dfa8 	.word	0x0002dfa8
 80045f8:	0002dfb8 	.word	0x0002dfb8
 80045fc:	0002e008 	.word	0x0002e008
 8004600:	0002e060 	.word	0x0002e060
 8004604:	0002e038 	.word	0x0002e038
 8004608:	0002e058 	.word	0x0002e058
 800460c:	0002dfb0 	.word	0x0002dfb0
 8004610:	0002dfc0 	.word	0x0002dfc0
 8004614:	0002e048 	.word	0x0002e048
 8004618:	0002dfc8 	.word	0x0002dfc8
 800461c:	4bb5      	ldr	r3, [pc, #724]	@ (80048f4 <NLLS+0x3654>)
 800461e:	443b      	add	r3, r7
 8004620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004624:	49b4      	ldr	r1, [pc, #720]	@ (80048f8 <NLLS+0x3658>)
 8004626:	4439      	add	r1, r7
 8004628:	e9d1 0100 	ldrd	r0, r1, [r1]
 800462c:	f7fc f804 	bl	8000638 <__aeabi_dmul>
 8004630:	4602      	mov	r2, r0
 8004632:	460b      	mov	r3, r1
 8004634:	4610      	mov	r0, r2
 8004636:	4619      	mov	r1, r3
 8004638:	4bb0      	ldr	r3, [pc, #704]	@ (80048fc <NLLS+0x365c>)
 800463a:	443b      	add	r3, r7
 800463c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004640:	f7fb fffa 	bl	8000638 <__aeabi_dmul>
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	4610      	mov	r0, r2
 800464a:	4619      	mov	r1, r3
 800464c:	4bac      	ldr	r3, [pc, #688]	@ (8004900 <NLLS+0x3660>)
 800464e:	443b      	add	r3, r7
 8004650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004654:	f7fb fff0 	bl	8000638 <__aeabi_dmul>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4610      	mov	r0, r2
 800465e:	4619      	mov	r1, r3
 8004660:	4ba7      	ldr	r3, [pc, #668]	@ (8004900 <NLLS+0x3660>)
 8004662:	443b      	add	r3, r7
 8004664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004668:	f7fb ffe6 	bl	8000638 <__aeabi_dmul>
 800466c:	4602      	mov	r2, r0
 800466e:	460b      	mov	r3, r1
 8004670:	4610      	mov	r0, r2
 8004672:	4619      	mov	r1, r3
 8004674:	4ba3      	ldr	r3, [pc, #652]	@ (8004904 <NLLS+0x3664>)
 8004676:	443b      	add	r3, r7
 8004678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467c:	f7fb ffdc 	bl	8000638 <__aeabi_dmul>
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	4610      	mov	r0, r2
 8004686:	4619      	mov	r1, r3
 8004688:	4b9e      	ldr	r3, [pc, #632]	@ (8004904 <NLLS+0x3664>)
 800468a:	443b      	add	r3, r7
 800468c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004690:	f7fb ffd2 	bl	8000638 <__aeabi_dmul>
 8004694:	4602      	mov	r2, r0
 8004696:	460b      	mov	r3, r1
 8004698:	4610      	mov	r0, r2
 800469a:	4619      	mov	r1, r3
 800469c:	4b9a      	ldr	r3, [pc, #616]	@ (8004908 <NLLS+0x3668>)
 800469e:	443b      	add	r3, r7
 80046a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a4:	f7fb ffc8 	bl	8000638 <__aeabi_dmul>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4620      	mov	r0, r4
 80046ae:	4629      	mov	r1, r5
 80046b0:	f7fb fe0a 	bl	80002c8 <__aeabi_dsub>
 80046b4:	4602      	mov	r2, r0
 80046b6:	460b      	mov	r3, r1
 80046b8:	4614      	mov	r4, r2
 80046ba:	461d      	mov	r5, r3
 80046bc:	4b93      	ldr	r3, [pc, #588]	@ (800490c <NLLS+0x366c>)
 80046be:	443b      	add	r3, r7
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	00da      	lsls	r2, r3, #3
 80046c4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80046c8:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80046cc:	4413      	add	r3, r2
 80046ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046d2:	4b88      	ldr	r3, [pc, #544]	@ (80048f4 <NLLS+0x3654>)
 80046d4:	443b      	add	r3, r7
 80046d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046da:	f7fb ffad 	bl	8000638 <__aeabi_dmul>
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	4610      	mov	r0, r2
 80046e4:	4619      	mov	r1, r3
 80046e6:	4b85      	ldr	r3, [pc, #532]	@ (80048fc <NLLS+0x365c>)
 80046e8:	443b      	add	r3, r7
 80046ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ee:	f7fb ffa3 	bl	8000638 <__aeabi_dmul>
 80046f2:	4602      	mov	r2, r0
 80046f4:	460b      	mov	r3, r1
 80046f6:	4610      	mov	r0, r2
 80046f8:	4619      	mov	r1, r3
 80046fa:	4b81      	ldr	r3, [pc, #516]	@ (8004900 <NLLS+0x3660>)
 80046fc:	443b      	add	r3, r7
 80046fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004702:	f7fb ff99 	bl	8000638 <__aeabi_dmul>
 8004706:	4602      	mov	r2, r0
 8004708:	460b      	mov	r3, r1
 800470a:	4610      	mov	r0, r2
 800470c:	4619      	mov	r1, r3
 800470e:	4b7c      	ldr	r3, [pc, #496]	@ (8004900 <NLLS+0x3660>)
 8004710:	443b      	add	r3, r7
 8004712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004716:	f7fb ff8f 	bl	8000638 <__aeabi_dmul>
 800471a:	4602      	mov	r2, r0
 800471c:	460b      	mov	r3, r1
 800471e:	4610      	mov	r0, r2
 8004720:	4619      	mov	r1, r3
 8004722:	4b78      	ldr	r3, [pc, #480]	@ (8004904 <NLLS+0x3664>)
 8004724:	443b      	add	r3, r7
 8004726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472a:	f7fb ff85 	bl	8000638 <__aeabi_dmul>
 800472e:	4602      	mov	r2, r0
 8004730:	460b      	mov	r3, r1
 8004732:	4610      	mov	r0, r2
 8004734:	4619      	mov	r1, r3
 8004736:	4b73      	ldr	r3, [pc, #460]	@ (8004904 <NLLS+0x3664>)
 8004738:	443b      	add	r3, r7
 800473a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473e:	f7fb ff7b 	bl	8000638 <__aeabi_dmul>
 8004742:	4602      	mov	r2, r0
 8004744:	460b      	mov	r3, r1
 8004746:	4610      	mov	r0, r2
 8004748:	4619      	mov	r1, r3
 800474a:	4b6f      	ldr	r3, [pc, #444]	@ (8004908 <NLLS+0x3668>)
 800474c:	443b      	add	r3, r7
 800474e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004752:	f7fb ff71 	bl	8000638 <__aeabi_dmul>
 8004756:	4602      	mov	r2, r0
 8004758:	460b      	mov	r3, r1
 800475a:	4620      	mov	r0, r4
 800475c:	4629      	mov	r1, r5
 800475e:	f7fb fdb5 	bl	80002cc <__adddf3>
 8004762:	4602      	mov	r2, r0
 8004764:	460b      	mov	r3, r1
 8004766:	4614      	mov	r4, r2
 8004768:	461d      	mov	r5, r3
 800476a:	4b62      	ldr	r3, [pc, #392]	@ (80048f4 <NLLS+0x3654>)
 800476c:	443b      	add	r3, r7
 800476e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004772:	4961      	ldr	r1, [pc, #388]	@ (80048f8 <NLLS+0x3658>)
 8004774:	4439      	add	r1, r7
 8004776:	e9d1 0100 	ldrd	r0, r1, [r1]
 800477a:	f7fb ff5d 	bl	8000638 <__aeabi_dmul>
 800477e:	4602      	mov	r2, r0
 8004780:	460b      	mov	r3, r1
 8004782:	4610      	mov	r0, r2
 8004784:	4619      	mov	r1, r3
 8004786:	4b5d      	ldr	r3, [pc, #372]	@ (80048fc <NLLS+0x365c>)
 8004788:	443b      	add	r3, r7
 800478a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478e:	f7fb ff53 	bl	8000638 <__aeabi_dmul>
 8004792:	4602      	mov	r2, r0
 8004794:	460b      	mov	r3, r1
 8004796:	4610      	mov	r0, r2
 8004798:	4619      	mov	r1, r3
 800479a:	4b59      	ldr	r3, [pc, #356]	@ (8004900 <NLLS+0x3660>)
 800479c:	443b      	add	r3, r7
 800479e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a2:	f7fb ff49 	bl	8000638 <__aeabi_dmul>
 80047a6:	4602      	mov	r2, r0
 80047a8:	460b      	mov	r3, r1
 80047aa:	4610      	mov	r0, r2
 80047ac:	4619      	mov	r1, r3
 80047ae:	4b58      	ldr	r3, [pc, #352]	@ (8004910 <NLLS+0x3670>)
 80047b0:	443b      	add	r3, r7
 80047b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b6:	f7fb ff3f 	bl	8000638 <__aeabi_dmul>
 80047ba:	4602      	mov	r2, r0
 80047bc:	460b      	mov	r3, r1
 80047be:	4610      	mov	r0, r2
 80047c0:	4619      	mov	r1, r3
 80047c2:	4b54      	ldr	r3, [pc, #336]	@ (8004914 <NLLS+0x3674>)
 80047c4:	443b      	add	r3, r7
 80047c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ca:	f7fb ff35 	bl	8000638 <__aeabi_dmul>
 80047ce:	4602      	mov	r2, r0
 80047d0:	460b      	mov	r3, r1
 80047d2:	4610      	mov	r0, r2
 80047d4:	4619      	mov	r1, r3
 80047d6:	4b50      	ldr	r3, [pc, #320]	@ (8004918 <NLLS+0x3678>)
 80047d8:	443b      	add	r3, r7
 80047da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047de:	f7fb ff2b 	bl	8000638 <__aeabi_dmul>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	4620      	mov	r0, r4
 80047e8:	4629      	mov	r1, r5
 80047ea:	f7fb fd6f 	bl	80002cc <__adddf3>
 80047ee:	4602      	mov	r2, r0
 80047f0:	460b      	mov	r3, r1
 80047f2:	4614      	mov	r4, r2
 80047f4:	461d      	mov	r5, r3
 80047f6:	4b45      	ldr	r3, [pc, #276]	@ (800490c <NLLS+0x366c>)
 80047f8:	443b      	add	r3, r7
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	00da      	lsls	r2, r3, #3
 80047fe:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8004802:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8004806:	4413      	add	r3, r2
 8004808:	e9d3 0100 	ldrd	r0, r1, [r3]
 800480c:	4b39      	ldr	r3, [pc, #228]	@ (80048f4 <NLLS+0x3654>)
 800480e:	443b      	add	r3, r7
 8004810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004814:	f7fb ff10 	bl	8000638 <__aeabi_dmul>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	4610      	mov	r0, r2
 800481e:	4619      	mov	r1, r3
 8004820:	4b36      	ldr	r3, [pc, #216]	@ (80048fc <NLLS+0x365c>)
 8004822:	443b      	add	r3, r7
 8004824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004828:	f7fb ff06 	bl	8000638 <__aeabi_dmul>
 800482c:	4602      	mov	r2, r0
 800482e:	460b      	mov	r3, r1
 8004830:	4610      	mov	r0, r2
 8004832:	4619      	mov	r1, r3
 8004834:	4b32      	ldr	r3, [pc, #200]	@ (8004900 <NLLS+0x3660>)
 8004836:	443b      	add	r3, r7
 8004838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483c:	f7fb fefc 	bl	8000638 <__aeabi_dmul>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4610      	mov	r0, r2
 8004846:	4619      	mov	r1, r3
 8004848:	4b31      	ldr	r3, [pc, #196]	@ (8004910 <NLLS+0x3670>)
 800484a:	443b      	add	r3, r7
 800484c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004850:	f7fb fef2 	bl	8000638 <__aeabi_dmul>
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	4610      	mov	r0, r2
 800485a:	4619      	mov	r1, r3
 800485c:	4b2d      	ldr	r3, [pc, #180]	@ (8004914 <NLLS+0x3674>)
 800485e:	443b      	add	r3, r7
 8004860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004864:	f7fb fee8 	bl	8000638 <__aeabi_dmul>
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	4610      	mov	r0, r2
 800486e:	4619      	mov	r1, r3
 8004870:	4b29      	ldr	r3, [pc, #164]	@ (8004918 <NLLS+0x3678>)
 8004872:	443b      	add	r3, r7
 8004874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004878:	f7fb fede 	bl	8000638 <__aeabi_dmul>
 800487c:	4602      	mov	r2, r0
 800487e:	460b      	mov	r3, r1
 8004880:	4620      	mov	r0, r4
 8004882:	4629      	mov	r1, r5
 8004884:	f7fb fd20 	bl	80002c8 <__aeabi_dsub>
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	4640      	mov	r0, r8
 800488e:	4649      	mov	r1, r9
 8004890:	f7fb fed2 	bl	8000638 <__aeabi_dmul>
 8004894:	4602      	mov	r2, r0
 8004896:	460b      	mov	r3, r1
 8004898:	61ba      	str	r2, [r7, #24]
 800489a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800489e:	61fb      	str	r3, [r7, #28]
 80048a0:	4b1e      	ldr	r3, [pc, #120]	@ (800491c <NLLS+0x367c>)
 80048a2:	443b      	add	r3, r7
 80048a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a8:	491c      	ldr	r1, [pc, #112]	@ (800491c <NLLS+0x367c>)
 80048aa:	4439      	add	r1, r7
 80048ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048b0:	f7fb fec2 	bl	8000638 <__aeabi_dmul>
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	4610      	mov	r0, r2
 80048ba:	4619      	mov	r1, r3
 80048bc:	4b0d      	ldr	r3, [pc, #52]	@ (80048f4 <NLLS+0x3654>)
 80048be:	443b      	add	r3, r7
 80048c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c4:	f7fb feb8 	bl	8000638 <__aeabi_dmul>
 80048c8:	4602      	mov	r2, r0
 80048ca:	460b      	mov	r3, r1
 80048cc:	4610      	mov	r0, r2
 80048ce:	4619      	mov	r1, r3
 80048d0:	4b08      	ldr	r3, [pc, #32]	@ (80048f4 <NLLS+0x3654>)
 80048d2:	443b      	add	r3, r7
 80048d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d8:	f7fb feae 	bl	8000638 <__aeabi_dmul>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4610      	mov	r0, r2
 80048e2:	4619      	mov	r1, r3
 80048e4:	4b05      	ldr	r3, [pc, #20]	@ (80048fc <NLLS+0x365c>)
 80048e6:	443b      	add	r3, r7
 80048e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ec:	f7fb fea4 	bl	8000638 <__aeabi_dmul>
 80048f0:	e016      	b.n	8004920 <NLLS+0x3680>
 80048f2:	bf00      	nop
 80048f4:	0002e058 	.word	0x0002e058
 80048f8:	0002e048 	.word	0x0002e048
 80048fc:	0002e050 	.word	0x0002e050
 8004900:	0002dfa8 	.word	0x0002dfa8
 8004904:	0002dfb8 	.word	0x0002dfb8
 8004908:	0002dfc8 	.word	0x0002dfc8
 800490c:	0002e008 	.word	0x0002e008
 8004910:	0002dfb0 	.word	0x0002dfb0
 8004914:	0002dfc0 	.word	0x0002dfc0
 8004918:	0002dfd0 	.word	0x0002dfd0
 800491c:	0002e060 	.word	0x0002e060
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	4610      	mov	r0, r2
 8004926:	4619      	mov	r1, r3
 8004928:	4bb2      	ldr	r3, [pc, #712]	@ (8004bf4 <NLLS+0x3954>)
 800492a:	443b      	add	r3, r7
 800492c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004930:	f7fb fe82 	bl	8000638 <__aeabi_dmul>
 8004934:	4602      	mov	r2, r0
 8004936:	460b      	mov	r3, r1
 8004938:	4610      	mov	r0, r2
 800493a:	4619      	mov	r1, r3
 800493c:	4bad      	ldr	r3, [pc, #692]	@ (8004bf4 <NLLS+0x3954>)
 800493e:	443b      	add	r3, r7
 8004940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004944:	f7fb fe78 	bl	8000638 <__aeabi_dmul>
 8004948:	4602      	mov	r2, r0
 800494a:	460b      	mov	r3, r1
 800494c:	4610      	mov	r0, r2
 800494e:	4619      	mov	r1, r3
 8004950:	4ba9      	ldr	r3, [pc, #676]	@ (8004bf8 <NLLS+0x3958>)
 8004952:	443b      	add	r3, r7
 8004954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004958:	f7fb fe6e 	bl	8000638 <__aeabi_dmul>
 800495c:	4602      	mov	r2, r0
 800495e:	460b      	mov	r3, r1
 8004960:	4610      	mov	r0, r2
 8004962:	4619      	mov	r1, r3
 8004964:	4ba4      	ldr	r3, [pc, #656]	@ (8004bf8 <NLLS+0x3958>)
 8004966:	443b      	add	r3, r7
 8004968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496c:	f7fb fe64 	bl	8000638 <__aeabi_dmul>
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	4614      	mov	r4, r2
 8004976:	461d      	mov	r5, r3
 8004978:	4ba0      	ldr	r3, [pc, #640]	@ (8004bfc <NLLS+0x395c>)
 800497a:	443b      	add	r3, r7
 800497c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004980:	499e      	ldr	r1, [pc, #632]	@ (8004bfc <NLLS+0x395c>)
 8004982:	4439      	add	r1, r7
 8004984:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004988:	f7fb fe56 	bl	8000638 <__aeabi_dmul>
 800498c:	4602      	mov	r2, r0
 800498e:	460b      	mov	r3, r1
 8004990:	4610      	mov	r0, r2
 8004992:	4619      	mov	r1, r3
 8004994:	4b99      	ldr	r3, [pc, #612]	@ (8004bfc <NLLS+0x395c>)
 8004996:	443b      	add	r3, r7
 8004998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499c:	f7fb fe4c 	bl	8000638 <__aeabi_dmul>
 80049a0:	4602      	mov	r2, r0
 80049a2:	460b      	mov	r3, r1
 80049a4:	4620      	mov	r0, r4
 80049a6:	4629      	mov	r1, r5
 80049a8:	f7fb fe46 	bl	8000638 <__aeabi_dmul>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80049b4:	f7fb ff6a 	bl	800088c <__aeabi_ddiv>
 80049b8:	4602      	mov	r2, r0
 80049ba:	460b      	mov	r3, r1
 80049bc:	4610      	mov	r0, r2
 80049be:	4619      	mov	r1, r3
 80049c0:	4b8f      	ldr	r3, [pc, #572]	@ (8004c00 <NLLS+0x3960>)
 80049c2:	443b      	add	r3, r7
 80049c4:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 80049c8:	4b8e      	ldr	r3, [pc, #568]	@ (8004c04 <NLLS+0x3964>)
 80049ca:	443b      	add	r3, r7
 80049cc:	681c      	ldr	r4, [r3, #0]
 80049ce:	f641 2310 	movw	r3, #6672	@ 0x1a10
 80049d2:	4423      	add	r3, r4
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	4413      	add	r3, r2
 80049d8:	e9c3 0100 	strd	r0, r1, [r3]

			mat_H[7][i] = (2*sin_phi*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*(cos_phi*cos_phi*cos_phi)*cos_rho*cos_rho) - (2*(bx - mx[i])*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sz*cos_lambda*cos_phi*cos_rho);
 80049dc:	4b8a      	ldr	r3, [pc, #552]	@ (8004c08 <NLLS+0x3968>)
 80049de:	443b      	add	r3, r7
 80049e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049e4:	4602      	mov	r2, r0
 80049e6:	460b      	mov	r3, r1
 80049e8:	f7fb fc70 	bl	80002cc <__adddf3>
 80049ec:	4602      	mov	r2, r0
 80049ee:	460b      	mov	r3, r1
 80049f0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80049f4:	4b85      	ldr	r3, [pc, #532]	@ (8004c0c <NLLS+0x396c>)
 80049f6:	443b      	add	r3, r7
 80049f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fc:	4984      	ldr	r1, [pc, #528]	@ (8004c10 <NLLS+0x3970>)
 80049fe:	4439      	add	r1, r7
 8004a00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a04:	f7fb fe18 	bl	8000638 <__aeabi_dmul>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4690      	mov	r8, r2
 8004a0e:	4699      	mov	r9, r3
 8004a10:	4b80      	ldr	r3, [pc, #512]	@ (8004c14 <NLLS+0x3974>)
 8004a12:	443b      	add	r3, r7
 8004a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a18:	497f      	ldr	r1, [pc, #508]	@ (8004c18 <NLLS+0x3978>)
 8004a1a:	4439      	add	r1, r7
 8004a1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a20:	f7fb fe0a 	bl	8000638 <__aeabi_dmul>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4614      	mov	r4, r2
 8004a2a:	461d      	mov	r5, r3
 8004a2c:	4b73      	ldr	r3, [pc, #460]	@ (8004bfc <NLLS+0x395c>)
 8004a2e:	443b      	add	r3, r7
 8004a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a34:	496f      	ldr	r1, [pc, #444]	@ (8004bf4 <NLLS+0x3954>)
 8004a36:	4439      	add	r1, r7
 8004a38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a3c:	f7fb fdfc 	bl	8000638 <__aeabi_dmul>
 8004a40:	4602      	mov	r2, r0
 8004a42:	460b      	mov	r3, r1
 8004a44:	4610      	mov	r0, r2
 8004a46:	4619      	mov	r1, r3
 8004a48:	4b6f      	ldr	r3, [pc, #444]	@ (8004c08 <NLLS+0x3968>)
 8004a4a:	443b      	add	r3, r7
 8004a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a50:	f7fb fdf2 	bl	8000638 <__aeabi_dmul>
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	4620      	mov	r0, r4
 8004a5a:	4629      	mov	r1, r5
 8004a5c:	f7fb fc34 	bl	80002c8 <__aeabi_dsub>
 8004a60:	4602      	mov	r2, r0
 8004a62:	460b      	mov	r3, r1
 8004a64:	4640      	mov	r0, r8
 8004a66:	4649      	mov	r1, r9
 8004a68:	f7fb fde6 	bl	8000638 <__aeabi_dmul>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4614      	mov	r4, r2
 8004a72:	461d      	mov	r5, r3
 8004a74:	4b63      	ldr	r3, [pc, #396]	@ (8004c04 <NLLS+0x3964>)
 8004a76:	443b      	add	r3, r7
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	00da      	lsls	r2, r3, #3
 8004a7c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8004a80:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8004a84:	4413      	add	r3, r2
 8004a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8a:	4964      	ldr	r1, [pc, #400]	@ (8004c1c <NLLS+0x397c>)
 8004a8c:	4439      	add	r1, r7
 8004a8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a92:	f7fb fc19 	bl	80002c8 <__aeabi_dsub>
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4620      	mov	r0, r4
 8004a9c:	4629      	mov	r1, r5
 8004a9e:	f7fb fdcb 	bl	8000638 <__aeabi_dmul>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	4690      	mov	r8, r2
 8004aa8:	4699      	mov	r9, r3
 8004aaa:	4b59      	ldr	r3, [pc, #356]	@ (8004c10 <NLLS+0x3970>)
 8004aac:	443b      	add	r3, r7
 8004aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab2:	495b      	ldr	r1, [pc, #364]	@ (8004c20 <NLLS+0x3980>)
 8004ab4:	4439      	add	r1, r7
 8004ab6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004aba:	f7fb fdbd 	bl	8000638 <__aeabi_dmul>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	4610      	mov	r0, r2
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4b4d      	ldr	r3, [pc, #308]	@ (8004bfc <NLLS+0x395c>)
 8004ac8:	443b      	add	r3, r7
 8004aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ace:	f7fb fdb3 	bl	8000638 <__aeabi_dmul>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	4614      	mov	r4, r2
 8004ad8:	461d      	mov	r5, r3
 8004ada:	4b4a      	ldr	r3, [pc, #296]	@ (8004c04 <NLLS+0x3964>)
 8004adc:	443b      	add	r3, r7
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	00da      	lsls	r2, r3, #3
 8004ae2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8004ae6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004aea:	4413      	add	r3, r2
 8004aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af0:	494c      	ldr	r1, [pc, #304]	@ (8004c24 <NLLS+0x3984>)
 8004af2:	4439      	add	r1, r7
 8004af4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004af8:	f7fb fbe6 	bl	80002c8 <__aeabi_dsub>
 8004afc:	4602      	mov	r2, r0
 8004afe:	460b      	mov	r3, r1
 8004b00:	4620      	mov	r0, r4
 8004b02:	4629      	mov	r1, r5
 8004b04:	f7fb fd98 	bl	8000638 <__aeabi_dmul>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4640      	mov	r0, r8
 8004b0e:	4649      	mov	r1, r9
 8004b10:	f7fb fbdc 	bl	80002cc <__adddf3>
 8004b14:	4602      	mov	r2, r0
 8004b16:	460b      	mov	r3, r1
 8004b18:	4690      	mov	r8, r2
 8004b1a:	4699      	mov	r9, r3
 8004b1c:	4b3b      	ldr	r3, [pc, #236]	@ (8004c0c <NLLS+0x396c>)
 8004b1e:	443b      	add	r3, r7
 8004b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b24:	493e      	ldr	r1, [pc, #248]	@ (8004c20 <NLLS+0x3980>)
 8004b26:	4439      	add	r1, r7
 8004b28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b2c:	f7fb fd84 	bl	8000638 <__aeabi_dmul>
 8004b30:	4602      	mov	r2, r0
 8004b32:	460b      	mov	r3, r1
 8004b34:	4610      	mov	r0, r2
 8004b36:	4619      	mov	r1, r3
 8004b38:	4b37      	ldr	r3, [pc, #220]	@ (8004c18 <NLLS+0x3978>)
 8004b3a:	443b      	add	r3, r7
 8004b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b40:	f7fb fd7a 	bl	8000638 <__aeabi_dmul>
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	4614      	mov	r4, r2
 8004b4a:	461d      	mov	r5, r3
 8004b4c:	4b2d      	ldr	r3, [pc, #180]	@ (8004c04 <NLLS+0x3964>)
 8004b4e:	443b      	add	r3, r7
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	00da      	lsls	r2, r3, #3
 8004b54:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8004b58:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b62:	4931      	ldr	r1, [pc, #196]	@ (8004c28 <NLLS+0x3988>)
 8004b64:	4439      	add	r1, r7
 8004b66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b6a:	f7fb fbad 	bl	80002c8 <__aeabi_dsub>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	460b      	mov	r3, r1
 8004b72:	4620      	mov	r0, r4
 8004b74:	4629      	mov	r1, r5
 8004b76:	f7fb fd5f 	bl	8000638 <__aeabi_dmul>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	4640      	mov	r0, r8
 8004b80:	4649      	mov	r1, r9
 8004b82:	f7fb fba1 	bl	80002c8 <__aeabi_dsub>
 8004b86:	4602      	mov	r2, r0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	4692      	mov	sl, r2
 8004b8c:	469b      	mov	fp, r3
 8004b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8004c0c <NLLS+0x396c>)
 8004b90:	443b      	add	r3, r7
 8004b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b96:	491e      	ldr	r1, [pc, #120]	@ (8004c10 <NLLS+0x3970>)
 8004b98:	4439      	add	r1, r7
 8004b9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b9e:	f7fb fd4b 	bl	8000638 <__aeabi_dmul>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	4690      	mov	r8, r2
 8004ba8:	4699      	mov	r9, r3
 8004baa:	4b1a      	ldr	r3, [pc, #104]	@ (8004c14 <NLLS+0x3974>)
 8004bac:	443b      	add	r3, r7
 8004bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb2:	4919      	ldr	r1, [pc, #100]	@ (8004c18 <NLLS+0x3978>)
 8004bb4:	4439      	add	r1, r7
 8004bb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bba:	f7fb fd3d 	bl	8000638 <__aeabi_dmul>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	4614      	mov	r4, r2
 8004bc4:	461d      	mov	r5, r3
 8004bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8004bfc <NLLS+0x395c>)
 8004bc8:	443b      	add	r3, r7
 8004bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bce:	4909      	ldr	r1, [pc, #36]	@ (8004bf4 <NLLS+0x3954>)
 8004bd0:	4439      	add	r1, r7
 8004bd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bd6:	f7fb fd2f 	bl	8000638 <__aeabi_dmul>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	4610      	mov	r0, r2
 8004be0:	4619      	mov	r1, r3
 8004be2:	4b09      	ldr	r3, [pc, #36]	@ (8004c08 <NLLS+0x3968>)
 8004be4:	443b      	add	r3, r7
 8004be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bea:	f7fb fd25 	bl	8000638 <__aeabi_dmul>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	e01c      	b.n	8004c2c <NLLS+0x398c>
 8004bf2:	bf00      	nop
 8004bf4:	0002dfa8 	.word	0x0002dfa8
 8004bf8:	0002dfb8 	.word	0x0002dfb8
 8004bfc:	0002dfb0 	.word	0x0002dfb0
 8004c00:	00014070 	.word	0x00014070
 8004c04:	0002e008 	.word	0x0002e008
 8004c08:	0002dfd0 	.word	0x0002dfd0
 8004c0c:	0002e050 	.word	0x0002e050
 8004c10:	0002e058 	.word	0x0002e058
 8004c14:	0002dfc8 	.word	0x0002dfc8
 8004c18:	0002dfc0 	.word	0x0002dfc0
 8004c1c:	0002e048 	.word	0x0002e048
 8004c20:	0002e060 	.word	0x0002e060
 8004c24:	0002e038 	.word	0x0002e038
 8004c28:	0002e040 	.word	0x0002e040
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	4620      	mov	r0, r4
 8004c30:	4629      	mov	r1, r5
 8004c32:	f7fb fb49 	bl	80002c8 <__aeabi_dsub>
 8004c36:	4602      	mov	r2, r0
 8004c38:	460b      	mov	r3, r1
 8004c3a:	4640      	mov	r0, r8
 8004c3c:	4649      	mov	r1, r9
 8004c3e:	f7fb fcfb 	bl	8000638 <__aeabi_dmul>
 8004c42:	4602      	mov	r2, r0
 8004c44:	460b      	mov	r3, r1
 8004c46:	4614      	mov	r4, r2
 8004c48:	461d      	mov	r5, r3
 8004c4a:	4bb5      	ldr	r3, [pc, #724]	@ (8004f20 <NLLS+0x3c80>)
 8004c4c:	443b      	add	r3, r7
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	00da      	lsls	r2, r3, #3
 8004c52:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8004c56:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c60:	49b0      	ldr	r1, [pc, #704]	@ (8004f24 <NLLS+0x3c84>)
 8004c62:	4439      	add	r1, r7
 8004c64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c68:	f7fb fb2e 	bl	80002c8 <__aeabi_dsub>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	460b      	mov	r3, r1
 8004c70:	4620      	mov	r0, r4
 8004c72:	4629      	mov	r1, r5
 8004c74:	f7fb fce0 	bl	8000638 <__aeabi_dmul>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4690      	mov	r8, r2
 8004c7e:	4699      	mov	r9, r3
 8004c80:	4ba9      	ldr	r3, [pc, #676]	@ (8004f28 <NLLS+0x3c88>)
 8004c82:	443b      	add	r3, r7
 8004c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c88:	49a8      	ldr	r1, [pc, #672]	@ (8004f2c <NLLS+0x3c8c>)
 8004c8a:	4439      	add	r1, r7
 8004c8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c90:	f7fb fcd2 	bl	8000638 <__aeabi_dmul>
 8004c94:	4602      	mov	r2, r0
 8004c96:	460b      	mov	r3, r1
 8004c98:	4610      	mov	r0, r2
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	4ba4      	ldr	r3, [pc, #656]	@ (8004f30 <NLLS+0x3c90>)
 8004c9e:	443b      	add	r3, r7
 8004ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca4:	f7fb fcc8 	bl	8000638 <__aeabi_dmul>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	460b      	mov	r3, r1
 8004cac:	4614      	mov	r4, r2
 8004cae:	461d      	mov	r5, r3
 8004cb0:	4b9b      	ldr	r3, [pc, #620]	@ (8004f20 <NLLS+0x3c80>)
 8004cb2:	443b      	add	r3, r7
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	00da      	lsls	r2, r3, #3
 8004cb8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8004cbc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc6:	499b      	ldr	r1, [pc, #620]	@ (8004f34 <NLLS+0x3c94>)
 8004cc8:	4439      	add	r1, r7
 8004cca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cce:	f7fb fafb 	bl	80002c8 <__aeabi_dsub>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	4620      	mov	r0, r4
 8004cd8:	4629      	mov	r1, r5
 8004cda:	f7fb fcad 	bl	8000638 <__aeabi_dmul>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	4640      	mov	r0, r8
 8004ce4:	4649      	mov	r1, r9
 8004ce6:	f7fb faf1 	bl	80002cc <__adddf3>
 8004cea:	4602      	mov	r2, r0
 8004cec:	460b      	mov	r3, r1
 8004cee:	4690      	mov	r8, r2
 8004cf0:	4699      	mov	r9, r3
 8004cf2:	4b91      	ldr	r3, [pc, #580]	@ (8004f38 <NLLS+0x3c98>)
 8004cf4:	443b      	add	r3, r7
 8004cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfa:	498c      	ldr	r1, [pc, #560]	@ (8004f2c <NLLS+0x3c8c>)
 8004cfc:	4439      	add	r1, r7
 8004cfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d02:	f7fb fc99 	bl	8000638 <__aeabi_dmul>
 8004d06:	4602      	mov	r2, r0
 8004d08:	460b      	mov	r3, r1
 8004d0a:	4610      	mov	r0, r2
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	4b8b      	ldr	r3, [pc, #556]	@ (8004f3c <NLLS+0x3c9c>)
 8004d10:	443b      	add	r3, r7
 8004d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d16:	f7fb fc8f 	bl	8000638 <__aeabi_dmul>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	4614      	mov	r4, r2
 8004d20:	461d      	mov	r5, r3
 8004d22:	4b7f      	ldr	r3, [pc, #508]	@ (8004f20 <NLLS+0x3c80>)
 8004d24:	443b      	add	r3, r7
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	00da      	lsls	r2, r3, #3
 8004d2a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8004d2e:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8004d32:	4413      	add	r3, r2
 8004d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d38:	4981      	ldr	r1, [pc, #516]	@ (8004f40 <NLLS+0x3ca0>)
 8004d3a:	4439      	add	r1, r7
 8004d3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d40:	f7fb fac2 	bl	80002c8 <__aeabi_dsub>
 8004d44:	4602      	mov	r2, r0
 8004d46:	460b      	mov	r3, r1
 8004d48:	4620      	mov	r0, r4
 8004d4a:	4629      	mov	r1, r5
 8004d4c:	f7fb fc74 	bl	8000638 <__aeabi_dmul>
 8004d50:	4602      	mov	r2, r0
 8004d52:	460b      	mov	r3, r1
 8004d54:	4640      	mov	r0, r8
 8004d56:	4649      	mov	r1, r9
 8004d58:	f7fb fab6 	bl	80002c8 <__aeabi_dsub>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	460b      	mov	r3, r1
 8004d60:	4650      	mov	r0, sl
 8004d62:	4659      	mov	r1, fp
 8004d64:	f7fb fc68 	bl	8000638 <__aeabi_dmul>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d70:	f7fb fc62 	bl	8000638 <__aeabi_dmul>
 8004d74:	4602      	mov	r2, r0
 8004d76:	460b      	mov	r3, r1
 8004d78:	4690      	mov	r8, r2
 8004d7a:	4699      	mov	r9, r3
 8004d7c:	4b6b      	ldr	r3, [pc, #428]	@ (8004f2c <NLLS+0x3c8c>)
 8004d7e:	443b      	add	r3, r7
 8004d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d84:	4969      	ldr	r1, [pc, #420]	@ (8004f2c <NLLS+0x3c8c>)
 8004d86:	4439      	add	r1, r7
 8004d88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d8c:	f7fb fc54 	bl	8000638 <__aeabi_dmul>
 8004d90:	4602      	mov	r2, r0
 8004d92:	460b      	mov	r3, r1
 8004d94:	4610      	mov	r0, r2
 8004d96:	4619      	mov	r1, r3
 8004d98:	4b63      	ldr	r3, [pc, #396]	@ (8004f28 <NLLS+0x3c88>)
 8004d9a:	443b      	add	r3, r7
 8004d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da0:	f7fb fc4a 	bl	8000638 <__aeabi_dmul>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	4610      	mov	r0, r2
 8004daa:	4619      	mov	r1, r3
 8004dac:	4b5e      	ldr	r3, [pc, #376]	@ (8004f28 <NLLS+0x3c88>)
 8004dae:	443b      	add	r3, r7
 8004db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db4:	f7fb fc40 	bl	8000638 <__aeabi_dmul>
 8004db8:	4602      	mov	r2, r0
 8004dba:	460b      	mov	r3, r1
 8004dbc:	4610      	mov	r0, r2
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	4b5d      	ldr	r3, [pc, #372]	@ (8004f38 <NLLS+0x3c98>)
 8004dc2:	443b      	add	r3, r7
 8004dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc8:	f7fb fc36 	bl	8000638 <__aeabi_dmul>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	460b      	mov	r3, r1
 8004dd0:	4610      	mov	r0, r2
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	4b58      	ldr	r3, [pc, #352]	@ (8004f38 <NLLS+0x3c98>)
 8004dd6:	443b      	add	r3, r7
 8004dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ddc:	f7fb fc2c 	bl	8000638 <__aeabi_dmul>
 8004de0:	4602      	mov	r2, r0
 8004de2:	460b      	mov	r3, r1
 8004de4:	4610      	mov	r0, r2
 8004de6:	4619      	mov	r1, r3
 8004de8:	4b56      	ldr	r3, [pc, #344]	@ (8004f44 <NLLS+0x3ca4>)
 8004dea:	443b      	add	r3, r7
 8004dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df0:	f7fb fc22 	bl	8000638 <__aeabi_dmul>
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	4610      	mov	r0, r2
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	4b51      	ldr	r3, [pc, #324]	@ (8004f44 <NLLS+0x3ca4>)
 8004dfe:	443b      	add	r3, r7
 8004e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e04:	f7fb fc18 	bl	8000638 <__aeabi_dmul>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	4614      	mov	r4, r2
 8004e0e:	461d      	mov	r5, r3
 8004e10:	4b4d      	ldr	r3, [pc, #308]	@ (8004f48 <NLLS+0x3ca8>)
 8004e12:	443b      	add	r3, r7
 8004e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e18:	494b      	ldr	r1, [pc, #300]	@ (8004f48 <NLLS+0x3ca8>)
 8004e1a:	4439      	add	r1, r7
 8004e1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e20:	f7fb fc0a 	bl	8000638 <__aeabi_dmul>
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4610      	mov	r0, r2
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	4b46      	ldr	r3, [pc, #280]	@ (8004f48 <NLLS+0x3ca8>)
 8004e2e:	443b      	add	r3, r7
 8004e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e34:	f7fb fc00 	bl	8000638 <__aeabi_dmul>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	4629      	mov	r1, r5
 8004e40:	f7fb fbfa 	bl	8000638 <__aeabi_dmul>
 8004e44:	4602      	mov	r2, r0
 8004e46:	460b      	mov	r3, r1
 8004e48:	4610      	mov	r0, r2
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	4b38      	ldr	r3, [pc, #224]	@ (8004f30 <NLLS+0x3c90>)
 8004e4e:	443b      	add	r3, r7
 8004e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e54:	f7fb fbf0 	bl	8000638 <__aeabi_dmul>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	4610      	mov	r0, r2
 8004e5e:	4619      	mov	r1, r3
 8004e60:	4b33      	ldr	r3, [pc, #204]	@ (8004f30 <NLLS+0x3c90>)
 8004e62:	443b      	add	r3, r7
 8004e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e68:	f7fb fbe6 	bl	8000638 <__aeabi_dmul>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4640      	mov	r0, r8
 8004e72:	4649      	mov	r1, r9
 8004e74:	f7fb fd0a 	bl	800088c <__aeabi_ddiv>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8004e80:	4b27      	ldr	r3, [pc, #156]	@ (8004f20 <NLLS+0x3c80>)
 8004e82:	443b      	add	r3, r7
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	00db      	lsls	r3, r3, #3
 8004e88:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8004e8c:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8004e90:	4413      	add	r3, r2
 8004e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e96:	4923      	ldr	r1, [pc, #140]	@ (8004f24 <NLLS+0x3c84>)
 8004e98:	4439      	add	r1, r7
 8004e9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e9e:	f7fb fa13 	bl	80002c8 <__aeabi_dsub>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	4610      	mov	r0, r2
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4602      	mov	r2, r0
 8004eac:	460b      	mov	r3, r1
 8004eae:	f7fb fa0d 	bl	80002cc <__adddf3>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	4692      	mov	sl, r2
 8004eb8:	469b      	mov	fp, r3
 8004eba:	4b1f      	ldr	r3, [pc, #124]	@ (8004f38 <NLLS+0x3c98>)
 8004ebc:	443b      	add	r3, r7
 8004ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec2:	4919      	ldr	r1, [pc, #100]	@ (8004f28 <NLLS+0x3c88>)
 8004ec4:	4439      	add	r1, r7
 8004ec6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004eca:	f7fb fbb5 	bl	8000638 <__aeabi_dmul>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	4690      	mov	r8, r2
 8004ed4:	4699      	mov	r9, r3
 8004ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8004f4c <NLLS+0x3cac>)
 8004ed8:	443b      	add	r3, r7
 8004eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ede:	4917      	ldr	r1, [pc, #92]	@ (8004f3c <NLLS+0x3c9c>)
 8004ee0:	4439      	add	r1, r7
 8004ee2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ee6:	f7fb fba7 	bl	8000638 <__aeabi_dmul>
 8004eea:	4602      	mov	r2, r0
 8004eec:	460b      	mov	r3, r1
 8004eee:	4614      	mov	r4, r2
 8004ef0:	461d      	mov	r5, r3
 8004ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8004f30 <NLLS+0x3c90>)
 8004ef4:	443b      	add	r3, r7
 8004ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efa:	4912      	ldr	r1, [pc, #72]	@ (8004f44 <NLLS+0x3ca4>)
 8004efc:	4439      	add	r1, r7
 8004efe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f02:	f7fb fb99 	bl	8000638 <__aeabi_dmul>
 8004f06:	4602      	mov	r2, r0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	4610      	mov	r0, r2
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4b10      	ldr	r3, [pc, #64]	@ (8004f50 <NLLS+0x3cb0>)
 8004f10:	443b      	add	r3, r7
 8004f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f16:	f7fb fb8f 	bl	8000638 <__aeabi_dmul>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	e019      	b.n	8004f54 <NLLS+0x3cb4>
 8004f20:	0002e008 	.word	0x0002e008
 8004f24:	0002e048 	.word	0x0002e048
 8004f28:	0002e058 	.word	0x0002e058
 8004f2c:	0002e060 	.word	0x0002e060
 8004f30:	0002dfb0 	.word	0x0002dfb0
 8004f34:	0002e038 	.word	0x0002e038
 8004f38:	0002e050 	.word	0x0002e050
 8004f3c:	0002dfc0 	.word	0x0002dfc0
 8004f40:	0002e040 	.word	0x0002e040
 8004f44:	0002dfa8 	.word	0x0002dfa8
 8004f48:	0002dfb8 	.word	0x0002dfb8
 8004f4c:	0002dfc8 	.word	0x0002dfc8
 8004f50:	0002dfd0 	.word	0x0002dfd0
 8004f54:	4620      	mov	r0, r4
 8004f56:	4629      	mov	r1, r5
 8004f58:	f7fb f9b6 	bl	80002c8 <__aeabi_dsub>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	460b      	mov	r3, r1
 8004f60:	4640      	mov	r0, r8
 8004f62:	4649      	mov	r1, r9
 8004f64:	f7fb fb68 	bl	8000638 <__aeabi_dmul>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	4614      	mov	r4, r2
 8004f6e:	461d      	mov	r5, r3
 8004f70:	4bb5      	ldr	r3, [pc, #724]	@ (8005248 <NLLS+0x3fa8>)
 8004f72:	443b      	add	r3, r7
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	00da      	lsls	r2, r3, #3
 8004f78:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8004f7c:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8004f80:	4413      	add	r3, r2
 8004f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f86:	49b1      	ldr	r1, [pc, #708]	@ (800524c <NLLS+0x3fac>)
 8004f88:	4439      	add	r1, r7
 8004f8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f8e:	f7fb f99b 	bl	80002c8 <__aeabi_dsub>
 8004f92:	4602      	mov	r2, r0
 8004f94:	460b      	mov	r3, r1
 8004f96:	4620      	mov	r0, r4
 8004f98:	4629      	mov	r1, r5
 8004f9a:	f7fb fb4d 	bl	8000638 <__aeabi_dmul>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	4690      	mov	r8, r2
 8004fa4:	4699      	mov	r9, r3
 8004fa6:	4baa      	ldr	r3, [pc, #680]	@ (8005250 <NLLS+0x3fb0>)
 8004fa8:	443b      	add	r3, r7
 8004faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fae:	49a9      	ldr	r1, [pc, #676]	@ (8005254 <NLLS+0x3fb4>)
 8004fb0:	4439      	add	r1, r7
 8004fb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004fb6:	f7fb fb3f 	bl	8000638 <__aeabi_dmul>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	4610      	mov	r0, r2
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4ba5      	ldr	r3, [pc, #660]	@ (8005258 <NLLS+0x3fb8>)
 8004fc4:	443b      	add	r3, r7
 8004fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fca:	f7fb fb35 	bl	8000638 <__aeabi_dmul>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	4614      	mov	r4, r2
 8004fd4:	461d      	mov	r5, r3
 8004fd6:	4b9c      	ldr	r3, [pc, #624]	@ (8005248 <NLLS+0x3fa8>)
 8004fd8:	443b      	add	r3, r7
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	00da      	lsls	r2, r3, #3
 8004fde:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8004fe2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fec:	499b      	ldr	r1, [pc, #620]	@ (800525c <NLLS+0x3fbc>)
 8004fee:	4439      	add	r1, r7
 8004ff0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ff4:	f7fb f968 	bl	80002c8 <__aeabi_dsub>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	4620      	mov	r0, r4
 8004ffe:	4629      	mov	r1, r5
 8005000:	f7fb fb1a 	bl	8000638 <__aeabi_dmul>
 8005004:	4602      	mov	r2, r0
 8005006:	460b      	mov	r3, r1
 8005008:	4640      	mov	r0, r8
 800500a:	4649      	mov	r1, r9
 800500c:	f7fb f95e 	bl	80002cc <__adddf3>
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	4690      	mov	r8, r2
 8005016:	4699      	mov	r9, r3
 8005018:	4b91      	ldr	r3, [pc, #580]	@ (8005260 <NLLS+0x3fc0>)
 800501a:	443b      	add	r3, r7
 800501c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005020:	498c      	ldr	r1, [pc, #560]	@ (8005254 <NLLS+0x3fb4>)
 8005022:	4439      	add	r1, r7
 8005024:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005028:	f7fb fb06 	bl	8000638 <__aeabi_dmul>
 800502c:	4602      	mov	r2, r0
 800502e:	460b      	mov	r3, r1
 8005030:	4610      	mov	r0, r2
 8005032:	4619      	mov	r1, r3
 8005034:	4b8b      	ldr	r3, [pc, #556]	@ (8005264 <NLLS+0x3fc4>)
 8005036:	443b      	add	r3, r7
 8005038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503c:	f7fb fafc 	bl	8000638 <__aeabi_dmul>
 8005040:	4602      	mov	r2, r0
 8005042:	460b      	mov	r3, r1
 8005044:	4614      	mov	r4, r2
 8005046:	461d      	mov	r5, r3
 8005048:	4b7f      	ldr	r3, [pc, #508]	@ (8005248 <NLLS+0x3fa8>)
 800504a:	443b      	add	r3, r7
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	00da      	lsls	r2, r3, #3
 8005050:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8005054:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8005058:	4413      	add	r3, r2
 800505a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505e:	4982      	ldr	r1, [pc, #520]	@ (8005268 <NLLS+0x3fc8>)
 8005060:	4439      	add	r1, r7
 8005062:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005066:	f7fb f92f 	bl	80002c8 <__aeabi_dsub>
 800506a:	4602      	mov	r2, r0
 800506c:	460b      	mov	r3, r1
 800506e:	4620      	mov	r0, r4
 8005070:	4629      	mov	r1, r5
 8005072:	f7fb fae1 	bl	8000638 <__aeabi_dmul>
 8005076:	4602      	mov	r2, r0
 8005078:	460b      	mov	r3, r1
 800507a:	4640      	mov	r0, r8
 800507c:	4649      	mov	r1, r9
 800507e:	f7fb f923 	bl	80002c8 <__aeabi_dsub>
 8005082:	4602      	mov	r2, r0
 8005084:	460b      	mov	r3, r1
 8005086:	4650      	mov	r0, sl
 8005088:	4659      	mov	r1, fp
 800508a:	f7fb fad5 	bl	8000638 <__aeabi_dmul>
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	4614      	mov	r4, r2
 8005094:	461d      	mov	r5, r3
 8005096:	4b6f      	ldr	r3, [pc, #444]	@ (8005254 <NLLS+0x3fb4>)
 8005098:	443b      	add	r3, r7
 800509a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509e:	496d      	ldr	r1, [pc, #436]	@ (8005254 <NLLS+0x3fb4>)
 80050a0:	4439      	add	r1, r7
 80050a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050a6:	f7fb fac7 	bl	8000638 <__aeabi_dmul>
 80050aa:	4602      	mov	r2, r0
 80050ac:	460b      	mov	r3, r1
 80050ae:	4610      	mov	r0, r2
 80050b0:	4619      	mov	r1, r3
 80050b2:	4b67      	ldr	r3, [pc, #412]	@ (8005250 <NLLS+0x3fb0>)
 80050b4:	443b      	add	r3, r7
 80050b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ba:	f7fb fabd 	bl	8000638 <__aeabi_dmul>
 80050be:	4602      	mov	r2, r0
 80050c0:	460b      	mov	r3, r1
 80050c2:	4610      	mov	r0, r2
 80050c4:	4619      	mov	r1, r3
 80050c6:	4b66      	ldr	r3, [pc, #408]	@ (8005260 <NLLS+0x3fc0>)
 80050c8:	443b      	add	r3, r7
 80050ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ce:	f7fb fab3 	bl	8000638 <__aeabi_dmul>
 80050d2:	4602      	mov	r2, r0
 80050d4:	460b      	mov	r3, r1
 80050d6:	4610      	mov	r0, r2
 80050d8:	4619      	mov	r1, r3
 80050da:	4b64      	ldr	r3, [pc, #400]	@ (800526c <NLLS+0x3fcc>)
 80050dc:	443b      	add	r3, r7
 80050de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e2:	f7fb faa9 	bl	8000638 <__aeabi_dmul>
 80050e6:	4602      	mov	r2, r0
 80050e8:	460b      	mov	r3, r1
 80050ea:	4610      	mov	r0, r2
 80050ec:	4619      	mov	r1, r3
 80050ee:	4b60      	ldr	r3, [pc, #384]	@ (8005270 <NLLS+0x3fd0>)
 80050f0:	443b      	add	r3, r7
 80050f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f6:	f7fb fa9f 	bl	8000638 <__aeabi_dmul>
 80050fa:	4602      	mov	r2, r0
 80050fc:	460b      	mov	r3, r1
 80050fe:	4610      	mov	r0, r2
 8005100:	4619      	mov	r1, r3
 8005102:	4b55      	ldr	r3, [pc, #340]	@ (8005258 <NLLS+0x3fb8>)
 8005104:	443b      	add	r3, r7
 8005106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510a:	f7fb fa95 	bl	8000638 <__aeabi_dmul>
 800510e:	4602      	mov	r2, r0
 8005110:	460b      	mov	r3, r1
 8005112:	4620      	mov	r0, r4
 8005114:	4629      	mov	r1, r5
 8005116:	f7fb fbb9 	bl	800088c <__aeabi_ddiv>
 800511a:	4602      	mov	r2, r0
 800511c:	460b      	mov	r3, r1
 800511e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005122:	f7fb f8d1 	bl	80002c8 <__aeabi_dsub>
 8005126:	4602      	mov	r2, r0
 8005128:	460b      	mov	r3, r1
 800512a:	4610      	mov	r0, r2
 800512c:	4619      	mov	r1, r3
 800512e:	4b51      	ldr	r3, [pc, #324]	@ (8005274 <NLLS+0x3fd4>)
 8005130:	443b      	add	r3, r7
 8005132:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 8005136:	4b44      	ldr	r3, [pc, #272]	@ (8005248 <NLLS+0x3fa8>)
 8005138:	443b      	add	r3, r7
 800513a:	681c      	ldr	r4, [r3, #0]
 800513c:	f641 6368 	movw	r3, #7784	@ 0x1e68
 8005140:	4423      	add	r3, r4
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	4413      	add	r3, r2
 8005146:	e9c3 0100 	strd	r0, r1, [r3]

			mat_H[8][i] = (2*sin_lambda*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/(sx*sx*sy*sy*sz*sz*(cos_lambda*cos_lambda*cos_lambda)*cos_phi*cos_phi*(cos_rho*cos_rho)) + (2*(sy*sz*(cos_lambda*sin_rho + cos_rho*sin_lambda*sin_phi)*(bx - mx[i]) - sx*sz*cos_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 800514a:	4b46      	ldr	r3, [pc, #280]	@ (8005264 <NLLS+0x3fc4>)
 800514c:	443b      	add	r3, r7
 800514e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005152:	4602      	mov	r2, r0
 8005154:	460b      	mov	r3, r1
 8005156:	f7fb f8b9 	bl	80002cc <__adddf3>
 800515a:	4602      	mov	r2, r0
 800515c:	460b      	mov	r3, r1
 800515e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8005162:	4b3f      	ldr	r3, [pc, #252]	@ (8005260 <NLLS+0x3fc0>)
 8005164:	443b      	add	r3, r7
 8005166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516a:	4939      	ldr	r1, [pc, #228]	@ (8005250 <NLLS+0x3fb0>)
 800516c:	4439      	add	r1, r7
 800516e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005172:	f7fb fa61 	bl	8000638 <__aeabi_dmul>
 8005176:	4602      	mov	r2, r0
 8005178:	460b      	mov	r3, r1
 800517a:	4690      	mov	r8, r2
 800517c:	4699      	mov	r9, r3
 800517e:	4b3e      	ldr	r3, [pc, #248]	@ (8005278 <NLLS+0x3fd8>)
 8005180:	443b      	add	r3, r7
 8005182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005186:	4937      	ldr	r1, [pc, #220]	@ (8005264 <NLLS+0x3fc4>)
 8005188:	4439      	add	r1, r7
 800518a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800518e:	f7fb fa53 	bl	8000638 <__aeabi_dmul>
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	4614      	mov	r4, r2
 8005198:	461d      	mov	r5, r3
 800519a:	4b2f      	ldr	r3, [pc, #188]	@ (8005258 <NLLS+0x3fb8>)
 800519c:	443b      	add	r3, r7
 800519e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a2:	4932      	ldr	r1, [pc, #200]	@ (800526c <NLLS+0x3fcc>)
 80051a4:	4439      	add	r1, r7
 80051a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051aa:	f7fb fa45 	bl	8000638 <__aeabi_dmul>
 80051ae:	4602      	mov	r2, r0
 80051b0:	460b      	mov	r3, r1
 80051b2:	4610      	mov	r0, r2
 80051b4:	4619      	mov	r1, r3
 80051b6:	4b31      	ldr	r3, [pc, #196]	@ (800527c <NLLS+0x3fdc>)
 80051b8:	443b      	add	r3, r7
 80051ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051be:	f7fb fa3b 	bl	8000638 <__aeabi_dmul>
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
 80051c6:	4620      	mov	r0, r4
 80051c8:	4629      	mov	r1, r5
 80051ca:	f7fb f87d 	bl	80002c8 <__aeabi_dsub>
 80051ce:	4602      	mov	r2, r0
 80051d0:	460b      	mov	r3, r1
 80051d2:	4640      	mov	r0, r8
 80051d4:	4649      	mov	r1, r9
 80051d6:	f7fb fa2f 	bl	8000638 <__aeabi_dmul>
 80051da:	4602      	mov	r2, r0
 80051dc:	460b      	mov	r3, r1
 80051de:	4614      	mov	r4, r2
 80051e0:	461d      	mov	r5, r3
 80051e2:	4b19      	ldr	r3, [pc, #100]	@ (8005248 <NLLS+0x3fa8>)
 80051e4:	443b      	add	r3, r7
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	00da      	lsls	r2, r3, #3
 80051ea:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80051ee:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80051f2:	4413      	add	r3, r2
 80051f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f8:	4914      	ldr	r1, [pc, #80]	@ (800524c <NLLS+0x3fac>)
 80051fa:	4439      	add	r1, r7
 80051fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005200:	f7fb f862 	bl	80002c8 <__aeabi_dsub>
 8005204:	4602      	mov	r2, r0
 8005206:	460b      	mov	r3, r1
 8005208:	4620      	mov	r0, r4
 800520a:	4629      	mov	r1, r5
 800520c:	f7fb fa14 	bl	8000638 <__aeabi_dmul>
 8005210:	4602      	mov	r2, r0
 8005212:	460b      	mov	r3, r1
 8005214:	4690      	mov	r8, r2
 8005216:	4699      	mov	r9, r3
 8005218:	4b0d      	ldr	r3, [pc, #52]	@ (8005250 <NLLS+0x3fb0>)
 800521a:	443b      	add	r3, r7
 800521c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005220:	490c      	ldr	r1, [pc, #48]	@ (8005254 <NLLS+0x3fb4>)
 8005222:	4439      	add	r1, r7
 8005224:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005228:	f7fb fa06 	bl	8000638 <__aeabi_dmul>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	4610      	mov	r0, r2
 8005232:	4619      	mov	r1, r3
 8005234:	4b08      	ldr	r3, [pc, #32]	@ (8005258 <NLLS+0x3fb8>)
 8005236:	443b      	add	r3, r7
 8005238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523c:	f7fb f9fc 	bl	8000638 <__aeabi_dmul>
 8005240:	4602      	mov	r2, r0
 8005242:	460b      	mov	r3, r1
 8005244:	4614      	mov	r4, r2
 8005246:	e01b      	b.n	8005280 <NLLS+0x3fe0>
 8005248:	0002e008 	.word	0x0002e008
 800524c:	0002e048 	.word	0x0002e048
 8005250:	0002e058 	.word	0x0002e058
 8005254:	0002e060 	.word	0x0002e060
 8005258:	0002dfb0 	.word	0x0002dfb0
 800525c:	0002e038 	.word	0x0002e038
 8005260:	0002e050 	.word	0x0002e050
 8005264:	0002dfc0 	.word	0x0002dfc0
 8005268:	0002e040 	.word	0x0002e040
 800526c:	0002dfa8 	.word	0x0002dfa8
 8005270:	0002dfb8 	.word	0x0002dfb8
 8005274:	00014070 	.word	0x00014070
 8005278:	0002dfc8 	.word	0x0002dfc8
 800527c:	0002dfd0 	.word	0x0002dfd0
 8005280:	461d      	mov	r5, r3
 8005282:	4bb7      	ldr	r3, [pc, #732]	@ (8005560 <NLLS+0x42c0>)
 8005284:	443b      	add	r3, r7
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	00da      	lsls	r2, r3, #3
 800528a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800528e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005292:	4413      	add	r3, r2
 8005294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005298:	49b2      	ldr	r1, [pc, #712]	@ (8005564 <NLLS+0x42c4>)
 800529a:	4439      	add	r1, r7
 800529c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052a0:	f7fb f812 	bl	80002c8 <__aeabi_dsub>
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	4620      	mov	r0, r4
 80052aa:	4629      	mov	r1, r5
 80052ac:	f7fb f9c4 	bl	8000638 <__aeabi_dmul>
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	4640      	mov	r0, r8
 80052b6:	4649      	mov	r1, r9
 80052b8:	f7fb f808 	bl	80002cc <__adddf3>
 80052bc:	4602      	mov	r2, r0
 80052be:	460b      	mov	r3, r1
 80052c0:	4690      	mov	r8, r2
 80052c2:	4699      	mov	r9, r3
 80052c4:	4ba8      	ldr	r3, [pc, #672]	@ (8005568 <NLLS+0x42c8>)
 80052c6:	443b      	add	r3, r7
 80052c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052cc:	49a7      	ldr	r1, [pc, #668]	@ (800556c <NLLS+0x42cc>)
 80052ce:	4439      	add	r1, r7
 80052d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052d4:	f7fb f9b0 	bl	8000638 <__aeabi_dmul>
 80052d8:	4602      	mov	r2, r0
 80052da:	460b      	mov	r3, r1
 80052dc:	4610      	mov	r0, r2
 80052de:	4619      	mov	r1, r3
 80052e0:	4ba3      	ldr	r3, [pc, #652]	@ (8005570 <NLLS+0x42d0>)
 80052e2:	443b      	add	r3, r7
 80052e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e8:	f7fb f9a6 	bl	8000638 <__aeabi_dmul>
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	4614      	mov	r4, r2
 80052f2:	461d      	mov	r5, r3
 80052f4:	4b9a      	ldr	r3, [pc, #616]	@ (8005560 <NLLS+0x42c0>)
 80052f6:	443b      	add	r3, r7
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	00da      	lsls	r2, r3, #3
 80052fc:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8005300:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8005304:	4413      	add	r3, r2
 8005306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530a:	499a      	ldr	r1, [pc, #616]	@ (8005574 <NLLS+0x42d4>)
 800530c:	4439      	add	r1, r7
 800530e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005312:	f7fa ffd9 	bl	80002c8 <__aeabi_dsub>
 8005316:	4602      	mov	r2, r0
 8005318:	460b      	mov	r3, r1
 800531a:	4620      	mov	r0, r4
 800531c:	4629      	mov	r1, r5
 800531e:	f7fb f98b 	bl	8000638 <__aeabi_dmul>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	4640      	mov	r0, r8
 8005328:	4649      	mov	r1, r9
 800532a:	f7fa ffcd 	bl	80002c8 <__aeabi_dsub>
 800532e:	4602      	mov	r2, r0
 8005330:	460b      	mov	r3, r1
 8005332:	4692      	mov	sl, r2
 8005334:	469b      	mov	fp, r3
 8005336:	4b8c      	ldr	r3, [pc, #560]	@ (8005568 <NLLS+0x42c8>)
 8005338:	443b      	add	r3, r7
 800533a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533e:	498e      	ldr	r1, [pc, #568]	@ (8005578 <NLLS+0x42d8>)
 8005340:	4439      	add	r1, r7
 8005342:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005346:	f7fb f977 	bl	8000638 <__aeabi_dmul>
 800534a:	4602      	mov	r2, r0
 800534c:	460b      	mov	r3, r1
 800534e:	4690      	mov	r8, r2
 8005350:	4699      	mov	r9, r3
 8005352:	4b8a      	ldr	r3, [pc, #552]	@ (800557c <NLLS+0x42dc>)
 8005354:	443b      	add	r3, r7
 8005356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535a:	4985      	ldr	r1, [pc, #532]	@ (8005570 <NLLS+0x42d0>)
 800535c:	4439      	add	r1, r7
 800535e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005362:	f7fb f969 	bl	8000638 <__aeabi_dmul>
 8005366:	4602      	mov	r2, r0
 8005368:	460b      	mov	r3, r1
 800536a:	4614      	mov	r4, r2
 800536c:	461d      	mov	r5, r3
 800536e:	4b84      	ldr	r3, [pc, #528]	@ (8005580 <NLLS+0x42e0>)
 8005370:	443b      	add	r3, r7
 8005372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005376:	4983      	ldr	r1, [pc, #524]	@ (8005584 <NLLS+0x42e4>)
 8005378:	4439      	add	r1, r7
 800537a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800537e:	f7fb f95b 	bl	8000638 <__aeabi_dmul>
 8005382:	4602      	mov	r2, r0
 8005384:	460b      	mov	r3, r1
 8005386:	4610      	mov	r0, r2
 8005388:	4619      	mov	r1, r3
 800538a:	4b7f      	ldr	r3, [pc, #508]	@ (8005588 <NLLS+0x42e8>)
 800538c:	443b      	add	r3, r7
 800538e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005392:	f7fb f951 	bl	8000638 <__aeabi_dmul>
 8005396:	4602      	mov	r2, r0
 8005398:	460b      	mov	r3, r1
 800539a:	4620      	mov	r0, r4
 800539c:	4629      	mov	r1, r5
 800539e:	f7fa ff93 	bl	80002c8 <__aeabi_dsub>
 80053a2:	4602      	mov	r2, r0
 80053a4:	460b      	mov	r3, r1
 80053a6:	4640      	mov	r0, r8
 80053a8:	4649      	mov	r1, r9
 80053aa:	f7fb f945 	bl	8000638 <__aeabi_dmul>
 80053ae:	4602      	mov	r2, r0
 80053b0:	460b      	mov	r3, r1
 80053b2:	4614      	mov	r4, r2
 80053b4:	461d      	mov	r5, r3
 80053b6:	4b6a      	ldr	r3, [pc, #424]	@ (8005560 <NLLS+0x42c0>)
 80053b8:	443b      	add	r3, r7
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	00da      	lsls	r2, r3, #3
 80053be:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80053c2:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80053c6:	4413      	add	r3, r2
 80053c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053cc:	496f      	ldr	r1, [pc, #444]	@ (800558c <NLLS+0x42ec>)
 80053ce:	4439      	add	r1, r7
 80053d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053d4:	f7fa ff78 	bl	80002c8 <__aeabi_dsub>
 80053d8:	4602      	mov	r2, r0
 80053da:	460b      	mov	r3, r1
 80053dc:	4620      	mov	r0, r4
 80053de:	4629      	mov	r1, r5
 80053e0:	f7fb f92a 	bl	8000638 <__aeabi_dmul>
 80053e4:	4602      	mov	r2, r0
 80053e6:	460b      	mov	r3, r1
 80053e8:	4690      	mov	r8, r2
 80053ea:	4699      	mov	r9, r3
 80053ec:	4b62      	ldr	r3, [pc, #392]	@ (8005578 <NLLS+0x42d8>)
 80053ee:	443b      	add	r3, r7
 80053f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f4:	495d      	ldr	r1, [pc, #372]	@ (800556c <NLLS+0x42cc>)
 80053f6:	4439      	add	r1, r7
 80053f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053fc:	f7fb f91c 	bl	8000638 <__aeabi_dmul>
 8005400:	4602      	mov	r2, r0
 8005402:	460b      	mov	r3, r1
 8005404:	4610      	mov	r0, r2
 8005406:	4619      	mov	r1, r3
 8005408:	4b5d      	ldr	r3, [pc, #372]	@ (8005580 <NLLS+0x42e0>)
 800540a:	443b      	add	r3, r7
 800540c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005410:	f7fb f912 	bl	8000638 <__aeabi_dmul>
 8005414:	4602      	mov	r2, r0
 8005416:	460b      	mov	r3, r1
 8005418:	4614      	mov	r4, r2
 800541a:	461d      	mov	r5, r3
 800541c:	4b50      	ldr	r3, [pc, #320]	@ (8005560 <NLLS+0x42c0>)
 800541e:	443b      	add	r3, r7
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	00da      	lsls	r2, r3, #3
 8005424:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8005428:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800542c:	4413      	add	r3, r2
 800542e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005432:	494c      	ldr	r1, [pc, #304]	@ (8005564 <NLLS+0x42c4>)
 8005434:	4439      	add	r1, r7
 8005436:	e9d1 0100 	ldrd	r0, r1, [r1]
 800543a:	f7fa ff45 	bl	80002c8 <__aeabi_dsub>
 800543e:	4602      	mov	r2, r0
 8005440:	460b      	mov	r3, r1
 8005442:	4620      	mov	r0, r4
 8005444:	4629      	mov	r1, r5
 8005446:	f7fb f8f7 	bl	8000638 <__aeabi_dmul>
 800544a:	4602      	mov	r2, r0
 800544c:	460b      	mov	r3, r1
 800544e:	4640      	mov	r0, r8
 8005450:	4649      	mov	r1, r9
 8005452:	f7fa ff3b 	bl	80002cc <__adddf3>
 8005456:	4602      	mov	r2, r0
 8005458:	460b      	mov	r3, r1
 800545a:	4690      	mov	r8, r2
 800545c:	4699      	mov	r9, r3
 800545e:	4b42      	ldr	r3, [pc, #264]	@ (8005568 <NLLS+0x42c8>)
 8005460:	443b      	add	r3, r7
 8005462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005466:	4941      	ldr	r1, [pc, #260]	@ (800556c <NLLS+0x42cc>)
 8005468:	4439      	add	r1, r7
 800546a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800546e:	f7fb f8e3 	bl	8000638 <__aeabi_dmul>
 8005472:	4602      	mov	r2, r0
 8005474:	460b      	mov	r3, r1
 8005476:	4610      	mov	r0, r2
 8005478:	4619      	mov	r1, r3
 800547a:	4b3d      	ldr	r3, [pc, #244]	@ (8005570 <NLLS+0x42d0>)
 800547c:	443b      	add	r3, r7
 800547e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005482:	f7fb f8d9 	bl	8000638 <__aeabi_dmul>
 8005486:	4602      	mov	r2, r0
 8005488:	460b      	mov	r3, r1
 800548a:	4614      	mov	r4, r2
 800548c:	461d      	mov	r5, r3
 800548e:	4b34      	ldr	r3, [pc, #208]	@ (8005560 <NLLS+0x42c0>)
 8005490:	443b      	add	r3, r7
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	00da      	lsls	r2, r3, #3
 8005496:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800549a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800549e:	4413      	add	r3, r2
 80054a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a4:	4933      	ldr	r1, [pc, #204]	@ (8005574 <NLLS+0x42d4>)
 80054a6:	4439      	add	r1, r7
 80054a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054ac:	f7fa ff0c 	bl	80002c8 <__aeabi_dsub>
 80054b0:	4602      	mov	r2, r0
 80054b2:	460b      	mov	r3, r1
 80054b4:	4620      	mov	r0, r4
 80054b6:	4629      	mov	r1, r5
 80054b8:	f7fb f8be 	bl	8000638 <__aeabi_dmul>
 80054bc:	4602      	mov	r2, r0
 80054be:	460b      	mov	r3, r1
 80054c0:	4640      	mov	r0, r8
 80054c2:	4649      	mov	r1, r9
 80054c4:	f7fa ff00 	bl	80002c8 <__aeabi_dsub>
 80054c8:	4602      	mov	r2, r0
 80054ca:	460b      	mov	r3, r1
 80054cc:	4650      	mov	r0, sl
 80054ce:	4659      	mov	r1, fp
 80054d0:	f7fb f8b2 	bl	8000638 <__aeabi_dmul>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80054dc:	f7fb f8ac 	bl	8000638 <__aeabi_dmul>
 80054e0:	4602      	mov	r2, r0
 80054e2:	460b      	mov	r3, r1
 80054e4:	4690      	mov	r8, r2
 80054e6:	4699      	mov	r9, r3
 80054e8:	4b20      	ldr	r3, [pc, #128]	@ (800556c <NLLS+0x42cc>)
 80054ea:	443b      	add	r3, r7
 80054ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f0:	491e      	ldr	r1, [pc, #120]	@ (800556c <NLLS+0x42cc>)
 80054f2:	4439      	add	r1, r7
 80054f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054f8:	f7fb f89e 	bl	8000638 <__aeabi_dmul>
 80054fc:	4602      	mov	r2, r0
 80054fe:	460b      	mov	r3, r1
 8005500:	4610      	mov	r0, r2
 8005502:	4619      	mov	r1, r3
 8005504:	4b1c      	ldr	r3, [pc, #112]	@ (8005578 <NLLS+0x42d8>)
 8005506:	443b      	add	r3, r7
 8005508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550c:	f7fb f894 	bl	8000638 <__aeabi_dmul>
 8005510:	4602      	mov	r2, r0
 8005512:	460b      	mov	r3, r1
 8005514:	4610      	mov	r0, r2
 8005516:	4619      	mov	r1, r3
 8005518:	4b17      	ldr	r3, [pc, #92]	@ (8005578 <NLLS+0x42d8>)
 800551a:	443b      	add	r3, r7
 800551c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005520:	f7fb f88a 	bl	8000638 <__aeabi_dmul>
 8005524:	4602      	mov	r2, r0
 8005526:	460b      	mov	r3, r1
 8005528:	4610      	mov	r0, r2
 800552a:	4619      	mov	r1, r3
 800552c:	4b0e      	ldr	r3, [pc, #56]	@ (8005568 <NLLS+0x42c8>)
 800552e:	443b      	add	r3, r7
 8005530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005534:	f7fb f880 	bl	8000638 <__aeabi_dmul>
 8005538:	4602      	mov	r2, r0
 800553a:	460b      	mov	r3, r1
 800553c:	4610      	mov	r0, r2
 800553e:	4619      	mov	r1, r3
 8005540:	4b09      	ldr	r3, [pc, #36]	@ (8005568 <NLLS+0x42c8>)
 8005542:	443b      	add	r3, r7
 8005544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005548:	f7fb f876 	bl	8000638 <__aeabi_dmul>
 800554c:	4602      	mov	r2, r0
 800554e:	460b      	mov	r3, r1
 8005550:	4614      	mov	r4, r2
 8005552:	461d      	mov	r5, r3
 8005554:	4b0b      	ldr	r3, [pc, #44]	@ (8005584 <NLLS+0x42e4>)
 8005556:	443b      	add	r3, r7
 8005558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555c:	e018      	b.n	8005590 <NLLS+0x42f0>
 800555e:	bf00      	nop
 8005560:	0002e008 	.word	0x0002e008
 8005564:	0002e038 	.word	0x0002e038
 8005568:	0002e050 	.word	0x0002e050
 800556c:	0002e060 	.word	0x0002e060
 8005570:	0002dfc0 	.word	0x0002dfc0
 8005574:	0002e040 	.word	0x0002e040
 8005578:	0002e058 	.word	0x0002e058
 800557c:	0002dfc8 	.word	0x0002dfc8
 8005580:	0002dfb0 	.word	0x0002dfb0
 8005584:	0002dfa8 	.word	0x0002dfa8
 8005588:	0002dfd0 	.word	0x0002dfd0
 800558c:	0002e048 	.word	0x0002e048
 8005590:	49b6      	ldr	r1, [pc, #728]	@ (800586c <NLLS+0x45cc>)
 8005592:	4439      	add	r1, r7
 8005594:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005598:	f7fb f84e 	bl	8000638 <__aeabi_dmul>
 800559c:	4602      	mov	r2, r0
 800559e:	460b      	mov	r3, r1
 80055a0:	4610      	mov	r0, r2
 80055a2:	4619      	mov	r1, r3
 80055a4:	4bb1      	ldr	r3, [pc, #708]	@ (800586c <NLLS+0x45cc>)
 80055a6:	443b      	add	r3, r7
 80055a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ac:	f7fb f844 	bl	8000638 <__aeabi_dmul>
 80055b0:	4602      	mov	r2, r0
 80055b2:	460b      	mov	r3, r1
 80055b4:	4620      	mov	r0, r4
 80055b6:	4629      	mov	r1, r5
 80055b8:	f7fb f83e 	bl	8000638 <__aeabi_dmul>
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	4610      	mov	r0, r2
 80055c2:	4619      	mov	r1, r3
 80055c4:	4baa      	ldr	r3, [pc, #680]	@ (8005870 <NLLS+0x45d0>)
 80055c6:	443b      	add	r3, r7
 80055c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055cc:	f7fb f834 	bl	8000638 <__aeabi_dmul>
 80055d0:	4602      	mov	r2, r0
 80055d2:	460b      	mov	r3, r1
 80055d4:	4610      	mov	r0, r2
 80055d6:	4619      	mov	r1, r3
 80055d8:	4ba5      	ldr	r3, [pc, #660]	@ (8005870 <NLLS+0x45d0>)
 80055da:	443b      	add	r3, r7
 80055dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e0:	f7fb f82a 	bl	8000638 <__aeabi_dmul>
 80055e4:	4602      	mov	r2, r0
 80055e6:	460b      	mov	r3, r1
 80055e8:	4614      	mov	r4, r2
 80055ea:	461d      	mov	r5, r3
 80055ec:	4ba1      	ldr	r3, [pc, #644]	@ (8005874 <NLLS+0x45d4>)
 80055ee:	443b      	add	r3, r7
 80055f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f4:	499f      	ldr	r1, [pc, #636]	@ (8005874 <NLLS+0x45d4>)
 80055f6:	4439      	add	r1, r7
 80055f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055fc:	f7fb f81c 	bl	8000638 <__aeabi_dmul>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	4620      	mov	r0, r4
 8005606:	4629      	mov	r1, r5
 8005608:	f7fb f816 	bl	8000638 <__aeabi_dmul>
 800560c:	4602      	mov	r2, r0
 800560e:	460b      	mov	r3, r1
 8005610:	4640      	mov	r0, r8
 8005612:	4649      	mov	r1, r9
 8005614:	f7fb f93a 	bl	800088c <__aeabi_ddiv>
 8005618:	4602      	mov	r2, r0
 800561a:	460b      	mov	r3, r1
 800561c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8005620:	4b95      	ldr	r3, [pc, #596]	@ (8005878 <NLLS+0x45d8>)
 8005622:	443b      	add	r3, r7
 8005624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005628:	4994      	ldr	r1, [pc, #592]	@ (800587c <NLLS+0x45dc>)
 800562a:	4439      	add	r1, r7
 800562c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005630:	f7fb f802 	bl	8000638 <__aeabi_dmul>
 8005634:	4602      	mov	r2, r0
 8005636:	460b      	mov	r3, r1
 8005638:	4690      	mov	r8, r2
 800563a:	4699      	mov	r9, r3
 800563c:	4b90      	ldr	r3, [pc, #576]	@ (8005880 <NLLS+0x45e0>)
 800563e:	443b      	add	r3, r7
 8005640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005644:	4989      	ldr	r1, [pc, #548]	@ (800586c <NLLS+0x45cc>)
 8005646:	4439      	add	r1, r7
 8005648:	e9d1 0100 	ldrd	r0, r1, [r1]
 800564c:	f7fa fff4 	bl	8000638 <__aeabi_dmul>
 8005650:	4602      	mov	r2, r0
 8005652:	460b      	mov	r3, r1
 8005654:	4614      	mov	r4, r2
 8005656:	461d      	mov	r5, r3
 8005658:	4b8a      	ldr	r3, [pc, #552]	@ (8005884 <NLLS+0x45e4>)
 800565a:	443b      	add	r3, r7
 800565c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005660:	4984      	ldr	r1, [pc, #528]	@ (8005874 <NLLS+0x45d4>)
 8005662:	4439      	add	r1, r7
 8005664:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005668:	f7fa ffe6 	bl	8000638 <__aeabi_dmul>
 800566c:	4602      	mov	r2, r0
 800566e:	460b      	mov	r3, r1
 8005670:	4610      	mov	r0, r2
 8005672:	4619      	mov	r1, r3
 8005674:	4b84      	ldr	r3, [pc, #528]	@ (8005888 <NLLS+0x45e8>)
 8005676:	443b      	add	r3, r7
 8005678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567c:	f7fa ffdc 	bl	8000638 <__aeabi_dmul>
 8005680:	4602      	mov	r2, r0
 8005682:	460b      	mov	r3, r1
 8005684:	4620      	mov	r0, r4
 8005686:	4629      	mov	r1, r5
 8005688:	f7fa fe20 	bl	80002cc <__adddf3>
 800568c:	4602      	mov	r2, r0
 800568e:	460b      	mov	r3, r1
 8005690:	4640      	mov	r0, r8
 8005692:	4649      	mov	r1, r9
 8005694:	f7fa ffd0 	bl	8000638 <__aeabi_dmul>
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	4614      	mov	r4, r2
 800569e:	461d      	mov	r5, r3
 80056a0:	4b7a      	ldr	r3, [pc, #488]	@ (800588c <NLLS+0x45ec>)
 80056a2:	443b      	add	r3, r7
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	00da      	lsls	r2, r3, #3
 80056a8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80056ac:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80056b0:	4413      	add	r3, r2
 80056b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b6:	4976      	ldr	r1, [pc, #472]	@ (8005890 <NLLS+0x45f0>)
 80056b8:	4439      	add	r1, r7
 80056ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056be:	f7fa fe03 	bl	80002c8 <__aeabi_dsub>
 80056c2:	4602      	mov	r2, r0
 80056c4:	460b      	mov	r3, r1
 80056c6:	4620      	mov	r0, r4
 80056c8:	4629      	mov	r1, r5
 80056ca:	f7fa ffb5 	bl	8000638 <__aeabi_dmul>
 80056ce:	4602      	mov	r2, r0
 80056d0:	460b      	mov	r3, r1
 80056d2:	4690      	mov	r8, r2
 80056d4:	4699      	mov	r9, r3
 80056d6:	4b68      	ldr	r3, [pc, #416]	@ (8005878 <NLLS+0x45d8>)
 80056d8:	443b      	add	r3, r7
 80056da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056de:	496d      	ldr	r1, [pc, #436]	@ (8005894 <NLLS+0x45f4>)
 80056e0:	4439      	add	r1, r7
 80056e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056e6:	f7fa ffa7 	bl	8000638 <__aeabi_dmul>
 80056ea:	4602      	mov	r2, r0
 80056ec:	460b      	mov	r3, r1
 80056ee:	4610      	mov	r0, r2
 80056f0:	4619      	mov	r1, r3
 80056f2:	4b5e      	ldr	r3, [pc, #376]	@ (800586c <NLLS+0x45cc>)
 80056f4:	443b      	add	r3, r7
 80056f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fa:	f7fa ff9d 	bl	8000638 <__aeabi_dmul>
 80056fe:	4602      	mov	r2, r0
 8005700:	460b      	mov	r3, r1
 8005702:	4614      	mov	r4, r2
 8005704:	461d      	mov	r5, r3
 8005706:	4b61      	ldr	r3, [pc, #388]	@ (800588c <NLLS+0x45ec>)
 8005708:	443b      	add	r3, r7
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	00da      	lsls	r2, r3, #3
 800570e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8005712:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8005716:	4413      	add	r3, r2
 8005718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571c:	495e      	ldr	r1, [pc, #376]	@ (8005898 <NLLS+0x45f8>)
 800571e:	4439      	add	r1, r7
 8005720:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005724:	f7fa fdd0 	bl	80002c8 <__aeabi_dsub>
 8005728:	4602      	mov	r2, r0
 800572a:	460b      	mov	r3, r1
 800572c:	4620      	mov	r0, r4
 800572e:	4629      	mov	r1, r5
 8005730:	f7fa ff82 	bl	8000638 <__aeabi_dmul>
 8005734:	4602      	mov	r2, r0
 8005736:	460b      	mov	r3, r1
 8005738:	4640      	mov	r0, r8
 800573a:	4649      	mov	r1, r9
 800573c:	f7fa fdc4 	bl	80002c8 <__aeabi_dsub>
 8005740:	4602      	mov	r2, r0
 8005742:	460b      	mov	r3, r1
 8005744:	4610      	mov	r0, r2
 8005746:	4619      	mov	r1, r3
 8005748:	4602      	mov	r2, r0
 800574a:	460b      	mov	r3, r1
 800574c:	f7fa fdbe 	bl	80002cc <__adddf3>
 8005750:	4602      	mov	r2, r0
 8005752:	460b      	mov	r3, r1
 8005754:	4692      	mov	sl, r2
 8005756:	469b      	mov	fp, r3
 8005758:	4b47      	ldr	r3, [pc, #284]	@ (8005878 <NLLS+0x45d8>)
 800575a:	443b      	add	r3, r7
 800575c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005760:	4946      	ldr	r1, [pc, #280]	@ (800587c <NLLS+0x45dc>)
 8005762:	4439      	add	r1, r7
 8005764:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005768:	f7fa ff66 	bl	8000638 <__aeabi_dmul>
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	4690      	mov	r8, r2
 8005772:	4699      	mov	r9, r3
 8005774:	4b42      	ldr	r3, [pc, #264]	@ (8005880 <NLLS+0x45e0>)
 8005776:	443b      	add	r3, r7
 8005778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577c:	4941      	ldr	r1, [pc, #260]	@ (8005884 <NLLS+0x45e4>)
 800577e:	4439      	add	r1, r7
 8005780:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005784:	f7fa ff58 	bl	8000638 <__aeabi_dmul>
 8005788:	4602      	mov	r2, r0
 800578a:	460b      	mov	r3, r1
 800578c:	4614      	mov	r4, r2
 800578e:	461d      	mov	r5, r3
 8005790:	4b38      	ldr	r3, [pc, #224]	@ (8005874 <NLLS+0x45d4>)
 8005792:	443b      	add	r3, r7
 8005794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005798:	4934      	ldr	r1, [pc, #208]	@ (800586c <NLLS+0x45cc>)
 800579a:	4439      	add	r1, r7
 800579c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057a0:	f7fa ff4a 	bl	8000638 <__aeabi_dmul>
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	4610      	mov	r0, r2
 80057aa:	4619      	mov	r1, r3
 80057ac:	4b36      	ldr	r3, [pc, #216]	@ (8005888 <NLLS+0x45e8>)
 80057ae:	443b      	add	r3, r7
 80057b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b4:	f7fa ff40 	bl	8000638 <__aeabi_dmul>
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	4620      	mov	r0, r4
 80057be:	4629      	mov	r1, r5
 80057c0:	f7fa fd82 	bl	80002c8 <__aeabi_dsub>
 80057c4:	4602      	mov	r2, r0
 80057c6:	460b      	mov	r3, r1
 80057c8:	4640      	mov	r0, r8
 80057ca:	4649      	mov	r1, r9
 80057cc:	f7fa ff34 	bl	8000638 <__aeabi_dmul>
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	4614      	mov	r4, r2
 80057d6:	461d      	mov	r5, r3
 80057d8:	4b2c      	ldr	r3, [pc, #176]	@ (800588c <NLLS+0x45ec>)
 80057da:	443b      	add	r3, r7
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	00da      	lsls	r2, r3, #3
 80057e0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80057e4:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80057e8:	4413      	add	r3, r2
 80057ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ee:	4928      	ldr	r1, [pc, #160]	@ (8005890 <NLLS+0x45f0>)
 80057f0:	4439      	add	r1, r7
 80057f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057f6:	f7fa fd67 	bl	80002c8 <__aeabi_dsub>
 80057fa:	4602      	mov	r2, r0
 80057fc:	460b      	mov	r3, r1
 80057fe:	4620      	mov	r0, r4
 8005800:	4629      	mov	r1, r5
 8005802:	f7fa ff19 	bl	8000638 <__aeabi_dmul>
 8005806:	4602      	mov	r2, r0
 8005808:	460b      	mov	r3, r1
 800580a:	4690      	mov	r8, r2
 800580c:	4699      	mov	r9, r3
 800580e:	4b1b      	ldr	r3, [pc, #108]	@ (800587c <NLLS+0x45dc>)
 8005810:	443b      	add	r3, r7
 8005812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005816:	491f      	ldr	r1, [pc, #124]	@ (8005894 <NLLS+0x45f4>)
 8005818:	4439      	add	r1, r7
 800581a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800581e:	f7fa ff0b 	bl	8000638 <__aeabi_dmul>
 8005822:	4602      	mov	r2, r0
 8005824:	460b      	mov	r3, r1
 8005826:	4610      	mov	r0, r2
 8005828:	4619      	mov	r1, r3
 800582a:	4b12      	ldr	r3, [pc, #72]	@ (8005874 <NLLS+0x45d4>)
 800582c:	443b      	add	r3, r7
 800582e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005832:	f7fa ff01 	bl	8000638 <__aeabi_dmul>
 8005836:	4602      	mov	r2, r0
 8005838:	460b      	mov	r3, r1
 800583a:	4614      	mov	r4, r2
 800583c:	461d      	mov	r5, r3
 800583e:	4b13      	ldr	r3, [pc, #76]	@ (800588c <NLLS+0x45ec>)
 8005840:	443b      	add	r3, r7
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	00da      	lsls	r2, r3, #3
 8005846:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800584a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800584e:	4413      	add	r3, r2
 8005850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005854:	4911      	ldr	r1, [pc, #68]	@ (800589c <NLLS+0x45fc>)
 8005856:	4439      	add	r1, r7
 8005858:	e9d1 0100 	ldrd	r0, r1, [r1]
 800585c:	f7fa fd34 	bl	80002c8 <__aeabi_dsub>
 8005860:	4602      	mov	r2, r0
 8005862:	460b      	mov	r3, r1
 8005864:	4620      	mov	r0, r4
 8005866:	4629      	mov	r1, r5
 8005868:	e01a      	b.n	80058a0 <NLLS+0x4600>
 800586a:	bf00      	nop
 800586c:	0002dfa8 	.word	0x0002dfa8
 8005870:	0002dfb8 	.word	0x0002dfb8
 8005874:	0002dfb0 	.word	0x0002dfb0
 8005878:	0002e050 	.word	0x0002e050
 800587c:	0002e058 	.word	0x0002e058
 8005880:	0002dfc8 	.word	0x0002dfc8
 8005884:	0002dfc0 	.word	0x0002dfc0
 8005888:	0002dfd0 	.word	0x0002dfd0
 800588c:	0002e008 	.word	0x0002e008
 8005890:	0002e048 	.word	0x0002e048
 8005894:	0002e060 	.word	0x0002e060
 8005898:	0002e040 	.word	0x0002e040
 800589c:	0002e038 	.word	0x0002e038
 80058a0:	f7fa feca 	bl	8000638 <__aeabi_dmul>
 80058a4:	4602      	mov	r2, r0
 80058a6:	460b      	mov	r3, r1
 80058a8:	4640      	mov	r0, r8
 80058aa:	4649      	mov	r1, r9
 80058ac:	f7fa fd0e 	bl	80002cc <__adddf3>
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	4690      	mov	r8, r2
 80058b6:	4699      	mov	r9, r3
 80058b8:	4b96      	ldr	r3, [pc, #600]	@ (8005b14 <NLLS+0x4874>)
 80058ba:	443b      	add	r3, r7
 80058bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c0:	4995      	ldr	r1, [pc, #596]	@ (8005b18 <NLLS+0x4878>)
 80058c2:	4439      	add	r1, r7
 80058c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058c8:	f7fa feb6 	bl	8000638 <__aeabi_dmul>
 80058cc:	4602      	mov	r2, r0
 80058ce:	460b      	mov	r3, r1
 80058d0:	4610      	mov	r0, r2
 80058d2:	4619      	mov	r1, r3
 80058d4:	4b91      	ldr	r3, [pc, #580]	@ (8005b1c <NLLS+0x487c>)
 80058d6:	443b      	add	r3, r7
 80058d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058dc:	f7fa feac 	bl	8000638 <__aeabi_dmul>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	4614      	mov	r4, r2
 80058e6:	461d      	mov	r5, r3
 80058e8:	4b8d      	ldr	r3, [pc, #564]	@ (8005b20 <NLLS+0x4880>)
 80058ea:	443b      	add	r3, r7
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	00da      	lsls	r2, r3, #3
 80058f0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80058f4:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80058f8:	4413      	add	r3, r2
 80058fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fe:	4989      	ldr	r1, [pc, #548]	@ (8005b24 <NLLS+0x4884>)
 8005900:	4439      	add	r1, r7
 8005902:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005906:	f7fa fcdf 	bl	80002c8 <__aeabi_dsub>
 800590a:	4602      	mov	r2, r0
 800590c:	460b      	mov	r3, r1
 800590e:	4620      	mov	r0, r4
 8005910:	4629      	mov	r1, r5
 8005912:	f7fa fe91 	bl	8000638 <__aeabi_dmul>
 8005916:	4602      	mov	r2, r0
 8005918:	460b      	mov	r3, r1
 800591a:	4640      	mov	r0, r8
 800591c:	4649      	mov	r1, r9
 800591e:	f7fa fcd3 	bl	80002c8 <__aeabi_dsub>
 8005922:	4602      	mov	r2, r0
 8005924:	460b      	mov	r3, r1
 8005926:	4650      	mov	r0, sl
 8005928:	4659      	mov	r1, fp
 800592a:	f7fa fe85 	bl	8000638 <__aeabi_dmul>
 800592e:	4602      	mov	r2, r0
 8005930:	460b      	mov	r3, r1
 8005932:	4614      	mov	r4, r2
 8005934:	461d      	mov	r5, r3
 8005936:	4b78      	ldr	r3, [pc, #480]	@ (8005b18 <NLLS+0x4878>)
 8005938:	443b      	add	r3, r7
 800593a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593e:	4976      	ldr	r1, [pc, #472]	@ (8005b18 <NLLS+0x4878>)
 8005940:	4439      	add	r1, r7
 8005942:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005946:	f7fa fe77 	bl	8000638 <__aeabi_dmul>
 800594a:	4602      	mov	r2, r0
 800594c:	460b      	mov	r3, r1
 800594e:	4610      	mov	r0, r2
 8005950:	4619      	mov	r1, r3
 8005952:	4b75      	ldr	r3, [pc, #468]	@ (8005b28 <NLLS+0x4888>)
 8005954:	443b      	add	r3, r7
 8005956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595a:	f7fa fe6d 	bl	8000638 <__aeabi_dmul>
 800595e:	4602      	mov	r2, r0
 8005960:	460b      	mov	r3, r1
 8005962:	4610      	mov	r0, r2
 8005964:	4619      	mov	r1, r3
 8005966:	4b70      	ldr	r3, [pc, #448]	@ (8005b28 <NLLS+0x4888>)
 8005968:	443b      	add	r3, r7
 800596a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596e:	f7fa fe63 	bl	8000638 <__aeabi_dmul>
 8005972:	4602      	mov	r2, r0
 8005974:	460b      	mov	r3, r1
 8005976:	4610      	mov	r0, r2
 8005978:	4619      	mov	r1, r3
 800597a:	4b66      	ldr	r3, [pc, #408]	@ (8005b14 <NLLS+0x4874>)
 800597c:	443b      	add	r3, r7
 800597e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005982:	f7fa fe59 	bl	8000638 <__aeabi_dmul>
 8005986:	4602      	mov	r2, r0
 8005988:	460b      	mov	r3, r1
 800598a:	4610      	mov	r0, r2
 800598c:	4619      	mov	r1, r3
 800598e:	4b61      	ldr	r3, [pc, #388]	@ (8005b14 <NLLS+0x4874>)
 8005990:	443b      	add	r3, r7
 8005992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005996:	f7fa fe4f 	bl	8000638 <__aeabi_dmul>
 800599a:	4602      	mov	r2, r0
 800599c:	460b      	mov	r3, r1
 800599e:	4610      	mov	r0, r2
 80059a0:	4619      	mov	r1, r3
 80059a2:	4b62      	ldr	r3, [pc, #392]	@ (8005b2c <NLLS+0x488c>)
 80059a4:	443b      	add	r3, r7
 80059a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059aa:	f7fa fe45 	bl	8000638 <__aeabi_dmul>
 80059ae:	4602      	mov	r2, r0
 80059b0:	460b      	mov	r3, r1
 80059b2:	4610      	mov	r0, r2
 80059b4:	4619      	mov	r1, r3
 80059b6:	4b5d      	ldr	r3, [pc, #372]	@ (8005b2c <NLLS+0x488c>)
 80059b8:	443b      	add	r3, r7
 80059ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059be:	f7fa fe3b 	bl	8000638 <__aeabi_dmul>
 80059c2:	4602      	mov	r2, r0
 80059c4:	460b      	mov	r3, r1
 80059c6:	4610      	mov	r0, r2
 80059c8:	4619      	mov	r1, r3
 80059ca:	4b59      	ldr	r3, [pc, #356]	@ (8005b30 <NLLS+0x4890>)
 80059cc:	443b      	add	r3, r7
 80059ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d2:	f7fa fe31 	bl	8000638 <__aeabi_dmul>
 80059d6:	4602      	mov	r2, r0
 80059d8:	460b      	mov	r3, r1
 80059da:	4610      	mov	r0, r2
 80059dc:	4619      	mov	r1, r3
 80059de:	4b54      	ldr	r3, [pc, #336]	@ (8005b30 <NLLS+0x4890>)
 80059e0:	443b      	add	r3, r7
 80059e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e6:	f7fa fe27 	bl	8000638 <__aeabi_dmul>
 80059ea:	4602      	mov	r2, r0
 80059ec:	460b      	mov	r3, r1
 80059ee:	4610      	mov	r0, r2
 80059f0:	4619      	mov	r1, r3
 80059f2:	4b50      	ldr	r3, [pc, #320]	@ (8005b34 <NLLS+0x4894>)
 80059f4:	443b      	add	r3, r7
 80059f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fa:	f7fa fe1d 	bl	8000638 <__aeabi_dmul>
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	4610      	mov	r0, r2
 8005a04:	4619      	mov	r1, r3
 8005a06:	4b4b      	ldr	r3, [pc, #300]	@ (8005b34 <NLLS+0x4894>)
 8005a08:	443b      	add	r3, r7
 8005a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0e:	f7fa fe13 	bl	8000638 <__aeabi_dmul>
 8005a12:	4602      	mov	r2, r0
 8005a14:	460b      	mov	r3, r1
 8005a16:	4620      	mov	r0, r4
 8005a18:	4629      	mov	r1, r5
 8005a1a:	f7fa ff37 	bl	800088c <__aeabi_ddiv>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	460b      	mov	r3, r1
 8005a22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a26:	f7fa fc51 	bl	80002cc <__adddf3>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	4942      	ldr	r1, [pc, #264]	@ (8005b38 <NLLS+0x4898>)
 8005a30:	4439      	add	r1, r7
 8005a32:	f5a1 7006 	sub.w	r0, r1, #536	@ 0x218
 8005a36:	493a      	ldr	r1, [pc, #232]	@ (8005b20 <NLLS+0x4880>)
 8005a38:	4439      	add	r1, r7
 8005a3a:	6809      	ldr	r1, [r1, #0]
 8005a3c:	f501 510b 	add.w	r1, r1, #8896	@ 0x22c0
 8005a40:	00c9      	lsls	r1, r1, #3
 8005a42:	4401      	add	r1, r0
 8005a44:	e9c1 2300 	strd	r2, r3, [r1]
		for(int i=0; i < tam; i++)
 8005a48:	4b35      	ldr	r3, [pc, #212]	@ (8005b20 <NLLS+0x4880>)
 8005a4a:	443b      	add	r3, r7
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	4a33      	ldr	r2, [pc, #204]	@ (8005b20 <NLLS+0x4880>)
 8005a52:	443a      	add	r2, r7
 8005a54:	6013      	str	r3, [r2, #0]
 8005a56:	4b32      	ldr	r3, [pc, #200]	@ (8005b20 <NLLS+0x4880>)
 8005a58:	443b      	add	r3, r7
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8005a60:	f6fb ad3e 	blt.w	80014e0 <NLLS+0x240>
		}

		J = 0;
 8005a64:	f04f 0200 	mov.w	r2, #0
 8005a68:	f04f 0300 	mov.w	r3, #0
 8005a6c:	4933      	ldr	r1, [pc, #204]	@ (8005b3c <NLLS+0x489c>)
 8005a6e:	4439      	add	r1, r7
 8005a70:	e9c1 2300 	strd	r2, r3, [r1]

		for(int i=0; i < tam; i++)
 8005a74:	2300      	movs	r3, #0
 8005a76:	4a32      	ldr	r2, [pc, #200]	@ (8005b40 <NLLS+0x48a0>)
 8005a78:	443a      	add	r2, r7
 8005a7a:	6013      	str	r3, [r2, #0]
 8005a7c:	e036      	b.n	8005aec <NLLS+0x484c>
		{
			J += (e[i] * e[i])/2;
 8005a7e:	4b31      	ldr	r3, [pc, #196]	@ (8005b44 <NLLS+0x48a4>)
 8005a80:	443b      	add	r3, r7
 8005a82:	f5a3 62d3 	sub.w	r2, r3, #1688	@ 0x698
 8005a86:	4b2e      	ldr	r3, [pc, #184]	@ (8005b40 <NLLS+0x48a0>)
 8005a88:	443b      	add	r3, r7
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	00db      	lsls	r3, r3, #3
 8005a8e:	4413      	add	r3, r2
 8005a90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a94:	4b2b      	ldr	r3, [pc, #172]	@ (8005b44 <NLLS+0x48a4>)
 8005a96:	443b      	add	r3, r7
 8005a98:	f5a3 62d3 	sub.w	r2, r3, #1688	@ 0x698
 8005a9c:	4b28      	ldr	r3, [pc, #160]	@ (8005b40 <NLLS+0x48a0>)
 8005a9e:	443b      	add	r3, r7
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	4413      	add	r3, r2
 8005aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aaa:	f7fa fdc5 	bl	8000638 <__aeabi_dmul>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	4610      	mov	r0, r2
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	f04f 0200 	mov.w	r2, #0
 8005aba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005abe:	f7fa fee5 	bl	800088c <__aeabi_ddiv>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	491d      	ldr	r1, [pc, #116]	@ (8005b3c <NLLS+0x489c>)
 8005ac8:	4439      	add	r1, r7
 8005aca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ace:	f7fa fbfd 	bl	80002cc <__adddf3>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	4919      	ldr	r1, [pc, #100]	@ (8005b3c <NLLS+0x489c>)
 8005ad8:	4439      	add	r1, r7
 8005ada:	e9c1 2300 	strd	r2, r3, [r1]
		for(int i=0; i < tam; i++)
 8005ade:	4b18      	ldr	r3, [pc, #96]	@ (8005b40 <NLLS+0x48a0>)
 8005ae0:	443b      	add	r3, r7
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	4a16      	ldr	r2, [pc, #88]	@ (8005b40 <NLLS+0x48a0>)
 8005ae8:	443a      	add	r2, r7
 8005aea:	6013      	str	r3, [r2, #0]
 8005aec:	4b14      	ldr	r3, [pc, #80]	@ (8005b40 <NLLS+0x48a0>)
 8005aee:	443b      	add	r3, r7
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8005af6:	dbc2      	blt.n	8005a7e <NLLS+0x47de>
		}

		if(passo < 2)
 8005af8:	4b13      	ldr	r3, [pc, #76]	@ (8005b48 <NLLS+0x48a8>)
 8005afa:	443b      	add	r3, r7
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d826      	bhi.n	8005b50 <NLLS+0x48b0>
		{
			error_ant = J;
 8005b02:	4b0e      	ldr	r3, [pc, #56]	@ (8005b3c <NLLS+0x489c>)
 8005b04:	443b      	add	r3, r7
 8005b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0a:	4910      	ldr	r1, [pc, #64]	@ (8005b4c <NLLS+0x48ac>)
 8005b0c:	4439      	add	r1, r7
 8005b0e:	e9c1 2300 	strd	r2, r3, [r1]
 8005b12:	e05c      	b.n	8005bce <NLLS+0x492e>
 8005b14:	0002e050 	.word	0x0002e050
 8005b18:	0002e060 	.word	0x0002e060
 8005b1c:	0002dfc0 	.word	0x0002dfc0
 8005b20:	0002e008 	.word	0x0002e008
 8005b24:	0002e040 	.word	0x0002e040
 8005b28:	0002e058 	.word	0x0002e058
 8005b2c:	0002dfa8 	.word	0x0002dfa8
 8005b30:	0002dfb8 	.word	0x0002dfb8
 8005b34:	0002dfb0 	.word	0x0002dfb0
 8005b38:	00014070 	.word	0x00014070
 8005b3c:	0002e010 	.word	0x0002e010
 8005b40:	0002e004 	.word	0x0002e004
 8005b44:	0002a070 	.word	0x0002a070
 8005b48:	0002e06f 	.word	0x0002e06f
 8005b4c:	0002e018 	.word	0x0002e018
		}
		else
		{
			delta_J = 100*fabs(J-error_ant)/J;
 8005b50:	4b8f      	ldr	r3, [pc, #572]	@ (8005d90 <NLLS+0x4af0>)
 8005b52:	443b      	add	r3, r7
 8005b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b58:	498e      	ldr	r1, [pc, #568]	@ (8005d94 <NLLS+0x4af4>)
 8005b5a:	4439      	add	r1, r7
 8005b5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b60:	f7fa fbb2 	bl	80002c8 <__aeabi_dsub>
 8005b64:	4602      	mov	r2, r0
 8005b66:	460b      	mov	r3, r1
 8005b68:	613a      	str	r2, [r7, #16]
 8005b6a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005b6e:	617b      	str	r3, [r7, #20]
 8005b70:	f04f 0200 	mov.w	r2, #0
 8005b74:	4b88      	ldr	r3, [pc, #544]	@ (8005d98 <NLLS+0x4af8>)
 8005b76:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005b7a:	f7fa fd5d 	bl	8000638 <__aeabi_dmul>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	460b      	mov	r3, r1
 8005b82:	4610      	mov	r0, r2
 8005b84:	4619      	mov	r1, r3
 8005b86:	4b83      	ldr	r3, [pc, #524]	@ (8005d94 <NLLS+0x4af4>)
 8005b88:	443b      	add	r3, r7
 8005b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8e:	f7fa fe7d 	bl	800088c <__aeabi_ddiv>
 8005b92:	4602      	mov	r2, r0
 8005b94:	460b      	mov	r3, r1
 8005b96:	4981      	ldr	r1, [pc, #516]	@ (8005d9c <NLLS+0x4afc>)
 8005b98:	4439      	add	r1, r7
 8005b9a:	e9c1 2300 	strd	r2, r3, [r1]
			if(delta_J < 0.05)
 8005b9e:	a37a      	add	r3, pc, #488	@ (adr r3, 8005d88 <NLLS+0x4ae8>)
 8005ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba4:	497d      	ldr	r1, [pc, #500]	@ (8005d9c <NLLS+0x4afc>)
 8005ba6:	4439      	add	r1, r7
 8005ba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005bac:	f7fa ffb6 	bl	8000b1c <__aeabi_dcmplt>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <NLLS+0x491e>
			{
				loop = 0;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	4a79      	ldr	r2, [pc, #484]	@ (8005da0 <NLLS+0x4b00>)
 8005bba:	443a      	add	r2, r7
 8005bbc:	7013      	strb	r3, [r2, #0]
			}
			error_ant = J;
 8005bbe:	4b75      	ldr	r3, [pc, #468]	@ (8005d94 <NLLS+0x4af4>)
 8005bc0:	443b      	add	r3, r7
 8005bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc6:	4972      	ldr	r1, [pc, #456]	@ (8005d90 <NLLS+0x4af0>)
 8005bc8:	4439      	add	r1, r7
 8005bca:	e9c1 2300 	strd	r2, r3, [r1]
		}

		for(int i = 0; i < N; i++)
 8005bce:	2300      	movs	r3, #0
 8005bd0:	f507 3238 	add.w	r2, r7, #188416	@ 0x2e000
 8005bd4:	6013      	str	r3, [r2, #0]
 8005bd6:	e096      	b.n	8005d06 <NLLS+0x4a66>
		{
			for(int j = 0; j < N; j++)
 8005bd8:	2300      	movs	r3, #0
 8005bda:	4a72      	ldr	r2, [pc, #456]	@ (8005da4 <NLLS+0x4b04>)
 8005bdc:	443a      	add	r2, r7
 8005bde:	6013      	str	r3, [r2, #0]
 8005be0:	e084      	b.n	8005cec <NLLS+0x4a4c>
			{
				Ht_H[i][j] = 0;
 8005be2:	4b71      	ldr	r3, [pc, #452]	@ (8005da8 <NLLS+0x4b08>)
 8005be4:	443b      	add	r3, r7
 8005be6:	f5a3 6194 	sub.w	r1, r3, #1184	@ 0x4a0
 8005bea:	f507 3338 	add.w	r3, r7, #188416	@ 0x2e000
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	4413      	add	r3, r2
 8005bf6:	4a6b      	ldr	r2, [pc, #428]	@ (8005da4 <NLLS+0x4b04>)
 8005bf8:	443a      	add	r2, r7
 8005bfa:	6812      	ldr	r2, [r2, #0]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	4419      	add	r1, r3
 8005c02:	f04f 0200 	mov.w	r2, #0
 8005c06:	f04f 0300 	mov.w	r3, #0
 8005c0a:	e9c1 2300 	strd	r2, r3, [r1]
				for(int k = 0; k < tam; k++)
 8005c0e:	2300      	movs	r3, #0
 8005c10:	4a66      	ldr	r2, [pc, #408]	@ (8005dac <NLLS+0x4b0c>)
 8005c12:	443a      	add	r2, r7
 8005c14:	6013      	str	r3, [r2, #0]
 8005c16:	e05c      	b.n	8005cd2 <NLLS+0x4a32>
				{
					Ht_H[i][j] += mat_H[i][k]*mat_H[j][k];
 8005c18:	4b63      	ldr	r3, [pc, #396]	@ (8005da8 <NLLS+0x4b08>)
 8005c1a:	443b      	add	r3, r7
 8005c1c:	f5a3 6194 	sub.w	r1, r3, #1184	@ 0x4a0
 8005c20:	f507 3338 	add.w	r3, r7, #188416	@ 0x2e000
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	4613      	mov	r3, r2
 8005c28:	00db      	lsls	r3, r3, #3
 8005c2a:	4413      	add	r3, r2
 8005c2c:	4a5d      	ldr	r2, [pc, #372]	@ (8005da4 <NLLS+0x4b04>)
 8005c2e:	443a      	add	r2, r7
 8005c30:	6812      	ldr	r2, [r2, #0]
 8005c32:	4413      	add	r3, r2
 8005c34:	00db      	lsls	r3, r3, #3
 8005c36:	440b      	add	r3, r1
 8005c38:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005c3c:	4b5a      	ldr	r3, [pc, #360]	@ (8005da8 <NLLS+0x4b08>)
 8005c3e:	443b      	add	r3, r7
 8005c40:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 8005c44:	f507 3338 	add.w	r3, r7, #188416	@ 0x2e000
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f44f 618b 	mov.w	r1, #1112	@ 0x458
 8005c4e:	fb03 f101 	mul.w	r1, r3, r1
 8005c52:	4b56      	ldr	r3, [pc, #344]	@ (8005dac <NLLS+0x4b0c>)
 8005c54:	443b      	add	r3, r7
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	440b      	add	r3, r1
 8005c5a:	00db      	lsls	r3, r3, #3
 8005c5c:	4413      	add	r3, r2
 8005c5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c62:	4b51      	ldr	r3, [pc, #324]	@ (8005da8 <NLLS+0x4b08>)
 8005c64:	443b      	add	r3, r7
 8005c66:	f5a3 7606 	sub.w	r6, r3, #536	@ 0x218
 8005c6a:	4b4e      	ldr	r3, [pc, #312]	@ (8005da4 <NLLS+0x4b04>)
 8005c6c:	443b      	add	r3, r7
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	f44f 638b 	mov.w	r3, #1112	@ 0x458
 8005c74:	fb03 f202 	mul.w	r2, r3, r2
 8005c78:	4b4c      	ldr	r3, [pc, #304]	@ (8005dac <NLLS+0x4b0c>)
 8005c7a:	443b      	add	r3, r7
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4413      	add	r3, r2
 8005c80:	00db      	lsls	r3, r3, #3
 8005c82:	4433      	add	r3, r6
 8005c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c88:	f7fa fcd6 	bl	8000638 <__aeabi_dmul>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4620      	mov	r0, r4
 8005c92:	4629      	mov	r1, r5
 8005c94:	f7fa fb1a 	bl	80002cc <__adddf3>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4610      	mov	r0, r2
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	4b41      	ldr	r3, [pc, #260]	@ (8005da8 <NLLS+0x4b08>)
 8005ca2:	443b      	add	r3, r7
 8005ca4:	f5a3 6494 	sub.w	r4, r3, #1184	@ 0x4a0
 8005ca8:	f507 3338 	add.w	r3, r7, #188416	@ 0x2e000
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	00db      	lsls	r3, r3, #3
 8005cb2:	4413      	add	r3, r2
 8005cb4:	4a3b      	ldr	r2, [pc, #236]	@ (8005da4 <NLLS+0x4b04>)
 8005cb6:	443a      	add	r2, r7
 8005cb8:	6812      	ldr	r2, [r2, #0]
 8005cba:	4413      	add	r3, r2
 8005cbc:	00db      	lsls	r3, r3, #3
 8005cbe:	4423      	add	r3, r4
 8005cc0:	e9c3 0100 	strd	r0, r1, [r3]
				for(int k = 0; k < tam; k++)
 8005cc4:	4b39      	ldr	r3, [pc, #228]	@ (8005dac <NLLS+0x4b0c>)
 8005cc6:	443b      	add	r3, r7
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	4a37      	ldr	r2, [pc, #220]	@ (8005dac <NLLS+0x4b0c>)
 8005cce:	443a      	add	r2, r7
 8005cd0:	6013      	str	r3, [r2, #0]
 8005cd2:	4b36      	ldr	r3, [pc, #216]	@ (8005dac <NLLS+0x4b0c>)
 8005cd4:	443b      	add	r3, r7
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8005cdc:	db9c      	blt.n	8005c18 <NLLS+0x4978>
			for(int j = 0; j < N; j++)
 8005cde:	4b31      	ldr	r3, [pc, #196]	@ (8005da4 <NLLS+0x4b04>)
 8005ce0:	443b      	add	r3, r7
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	4a2f      	ldr	r2, [pc, #188]	@ (8005da4 <NLLS+0x4b04>)
 8005ce8:	443a      	add	r2, r7
 8005cea:	6013      	str	r3, [r2, #0]
 8005cec:	4b2d      	ldr	r3, [pc, #180]	@ (8005da4 <NLLS+0x4b04>)
 8005cee:	443b      	add	r3, r7
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b08      	cmp	r3, #8
 8005cf4:	f77f af75 	ble.w	8005be2 <NLLS+0x4942>
		for(int i = 0; i < N; i++)
 8005cf8:	f507 3338 	add.w	r3, r7, #188416	@ 0x2e000
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	3301      	adds	r3, #1
 8005d00:	f507 3238 	add.w	r2, r7, #188416	@ 0x2e000
 8005d04:	6013      	str	r3, [r2, #0]
 8005d06:	f507 3338 	add.w	r3, r7, #188416	@ 0x2e000
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2b08      	cmp	r3, #8
 8005d0e:	f77f af63 	ble.w	8005bd8 <NLLS+0x4938>
				}
			}
		}

		inverter_matriz(Ht_H, inv);
 8005d12:	4a27      	ldr	r2, [pc, #156]	@ (8005db0 <NLLS+0x4b10>)
 8005d14:	4b27      	ldr	r3, [pc, #156]	@ (8005db4 <NLLS+0x4b14>)
 8005d16:	4413      	add	r3, r2
 8005d18:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8005d1c:	189a      	adds	r2, r3, r2
 8005d1e:	4b26      	ldr	r3, [pc, #152]	@ (8005db8 <NLLS+0x4b18>)
 8005d20:	f503 3338 	add.w	r3, r3, #188416	@ 0x2e000
 8005d24:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8005d28:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8005d2c:	440b      	add	r3, r1
 8005d2e:	4611      	mov	r1, r2
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7fb f977 	bl	8001024 <inverter_matriz>

		for(int i = 0; i < N; i++)
 8005d36:	2300      	movs	r3, #0
 8005d38:	4a20      	ldr	r2, [pc, #128]	@ (8005dbc <NLLS+0x4b1c>)
 8005d3a:	443a      	add	r2, r7
 8005d3c:	6013      	str	r3, [r2, #0]
 8005d3e:	e0b9      	b.n	8005eb4 <NLLS+0x4c14>
		{
			for(int j = 0; j < tam; j++)
 8005d40:	2300      	movs	r3, #0
 8005d42:	4a1f      	ldr	r2, [pc, #124]	@ (8005dc0 <NLLS+0x4b20>)
 8005d44:	443a      	add	r2, r7
 8005d46:	6013      	str	r3, [r2, #0]
 8005d48:	e0a6      	b.n	8005e98 <NLLS+0x4bf8>
			{
				mul_mat[i][j] = 0;
 8005d4a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8005d4e:	4619      	mov	r1, r3
 8005d50:	4b1a      	ldr	r3, [pc, #104]	@ (8005dbc <NLLS+0x4b1c>)
 8005d52:	443b      	add	r3, r7
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f44f 628b 	mov.w	r2, #1112	@ 0x458
 8005d5a:	fb03 f202 	mul.w	r2, r3, r2
 8005d5e:	4b18      	ldr	r3, [pc, #96]	@ (8005dc0 <NLLS+0x4b20>)
 8005d60:	443b      	add	r3, r7
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4413      	add	r3, r2
 8005d66:	00db      	lsls	r3, r3, #3
 8005d68:	440b      	add	r3, r1
 8005d6a:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8005d6e:	f04f 0200 	mov.w	r2, #0
 8005d72:	f04f 0300 	mov.w	r3, #0
 8005d76:	e9c1 2300 	strd	r2, r3, [r1]
				for(int k = 0; k < N; k++)
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	4a11      	ldr	r2, [pc, #68]	@ (8005dc4 <NLLS+0x4b24>)
 8005d7e:	443a      	add	r2, r7
 8005d80:	6013      	str	r3, [r2, #0]
 8005d82:	e07d      	b.n	8005e80 <NLLS+0x4be0>
 8005d84:	f3af 8000 	nop.w
 8005d88:	9999999a 	.word	0x9999999a
 8005d8c:	3fa99999 	.word	0x3fa99999
 8005d90:	0002e018 	.word	0x0002e018
 8005d94:	0002e010 	.word	0x0002e010
 8005d98:	40590000 	.word	0x40590000
 8005d9c:	0002dfa0 	.word	0x0002dfa0
 8005da0:	0002e06e 	.word	0x0002e06e
 8005da4:	0002dffc 	.word	0x0002dffc
 8005da8:	00014070 	.word	0x00014070
 8005dac:	0002dff8 	.word	0x0002dff8
 8005db0:	fffe5890 	.word	0xfffe5890
 8005db4:	0002e040 	.word	0x0002e040
 8005db8:	fffe5b60 	.word	0xfffe5b60
 8005dbc:	0002dff4 	.word	0x0002dff4
 8005dc0:	0002dff0 	.word	0x0002dff0
 8005dc4:	0002dfec 	.word	0x0002dfec
				{
					mul_mat[i][j] += inv[i][k]*mat_H[k][j];
 8005dc8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8005dcc:	4619      	mov	r1, r3
 8005dce:	4b77      	ldr	r3, [pc, #476]	@ (8005fac <NLLS+0x4d0c>)
 8005dd0:	443b      	add	r3, r7
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f44f 628b 	mov.w	r2, #1112	@ 0x458
 8005dd8:	fb03 f202 	mul.w	r2, r3, r2
 8005ddc:	4b74      	ldr	r3, [pc, #464]	@ (8005fb0 <NLLS+0x4d10>)
 8005dde:	443b      	add	r3, r7
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4413      	add	r3, r2
 8005de4:	00db      	lsls	r3, r3, #3
 8005de6:	440b      	add	r3, r1
 8005de8:	3b30      	subs	r3, #48	@ 0x30
 8005dea:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005dee:	4b71      	ldr	r3, [pc, #452]	@ (8005fb4 <NLLS+0x4d14>)
 8005df0:	443b      	add	r3, r7
 8005df2:	f5a3 61ee 	sub.w	r1, r3, #1904	@ 0x770
 8005df6:	4b6d      	ldr	r3, [pc, #436]	@ (8005fac <NLLS+0x4d0c>)
 8005df8:	443b      	add	r3, r7
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	00db      	lsls	r3, r3, #3
 8005e00:	4413      	add	r3, r2
 8005e02:	4a6d      	ldr	r2, [pc, #436]	@ (8005fb8 <NLLS+0x4d18>)
 8005e04:	443a      	add	r2, r7
 8005e06:	6812      	ldr	r2, [r2, #0]
 8005e08:	4413      	add	r3, r2
 8005e0a:	00db      	lsls	r3, r3, #3
 8005e0c:	440b      	add	r3, r1
 8005e0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e12:	4b68      	ldr	r3, [pc, #416]	@ (8005fb4 <NLLS+0x4d14>)
 8005e14:	443b      	add	r3, r7
 8005e16:	f5a3 7606 	sub.w	r6, r3, #536	@ 0x218
 8005e1a:	4b67      	ldr	r3, [pc, #412]	@ (8005fb8 <NLLS+0x4d18>)
 8005e1c:	443b      	add	r3, r7
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	f44f 638b 	mov.w	r3, #1112	@ 0x458
 8005e24:	fb03 f202 	mul.w	r2, r3, r2
 8005e28:	4b61      	ldr	r3, [pc, #388]	@ (8005fb0 <NLLS+0x4d10>)
 8005e2a:	443b      	add	r3, r7
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4413      	add	r3, r2
 8005e30:	00db      	lsls	r3, r3, #3
 8005e32:	4433      	add	r3, r6
 8005e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e38:	f7fa fbfe 	bl	8000638 <__aeabi_dmul>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	460b      	mov	r3, r1
 8005e40:	4620      	mov	r0, r4
 8005e42:	4629      	mov	r1, r5
 8005e44:	f7fa fa42 	bl	80002cc <__adddf3>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8005e50:	460c      	mov	r4, r1
 8005e52:	4956      	ldr	r1, [pc, #344]	@ (8005fac <NLLS+0x4d0c>)
 8005e54:	4439      	add	r1, r7
 8005e56:	6809      	ldr	r1, [r1, #0]
 8005e58:	f44f 608b 	mov.w	r0, #1112	@ 0x458
 8005e5c:	fb01 f000 	mul.w	r0, r1, r0
 8005e60:	4953      	ldr	r1, [pc, #332]	@ (8005fb0 <NLLS+0x4d10>)
 8005e62:	4439      	add	r1, r7
 8005e64:	6809      	ldr	r1, [r1, #0]
 8005e66:	4401      	add	r1, r0
 8005e68:	00c9      	lsls	r1, r1, #3
 8005e6a:	4421      	add	r1, r4
 8005e6c:	3930      	subs	r1, #48	@ 0x30
 8005e6e:	e9c1 2300 	strd	r2, r3, [r1]
				for(int k = 0; k < N; k++)
 8005e72:	4b51      	ldr	r3, [pc, #324]	@ (8005fb8 <NLLS+0x4d18>)
 8005e74:	443b      	add	r3, r7
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	4a4f      	ldr	r2, [pc, #316]	@ (8005fb8 <NLLS+0x4d18>)
 8005e7c:	443a      	add	r2, r7
 8005e7e:	6013      	str	r3, [r2, #0]
 8005e80:	4b4d      	ldr	r3, [pc, #308]	@ (8005fb8 <NLLS+0x4d18>)
 8005e82:	443b      	add	r3, r7
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b08      	cmp	r3, #8
 8005e88:	dd9e      	ble.n	8005dc8 <NLLS+0x4b28>
			for(int j = 0; j < tam; j++)
 8005e8a:	4b49      	ldr	r3, [pc, #292]	@ (8005fb0 <NLLS+0x4d10>)
 8005e8c:	443b      	add	r3, r7
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	3301      	adds	r3, #1
 8005e92:	4a47      	ldr	r2, [pc, #284]	@ (8005fb0 <NLLS+0x4d10>)
 8005e94:	443a      	add	r2, r7
 8005e96:	6013      	str	r3, [r2, #0]
 8005e98:	4b45      	ldr	r3, [pc, #276]	@ (8005fb0 <NLLS+0x4d10>)
 8005e9a:	443b      	add	r3, r7
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8005ea2:	f6ff af52 	blt.w	8005d4a <NLLS+0x4aaa>
		for(int i = 0; i < N; i++)
 8005ea6:	4b41      	ldr	r3, [pc, #260]	@ (8005fac <NLLS+0x4d0c>)
 8005ea8:	443b      	add	r3, r7
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	3301      	adds	r3, #1
 8005eae:	4a3f      	ldr	r2, [pc, #252]	@ (8005fac <NLLS+0x4d0c>)
 8005eb0:	443a      	add	r2, r7
 8005eb2:	6013      	str	r3, [r2, #0]
 8005eb4:	4b3d      	ldr	r3, [pc, #244]	@ (8005fac <NLLS+0x4d0c>)
 8005eb6:	443b      	add	r3, r7
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b08      	cmp	r3, #8
 8005ebc:	f77f af40 	ble.w	8005d40 <NLLS+0x4aa0>
				}
			}
		}

		for(int i = 0; i < N; i++)
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	4a3e      	ldr	r2, [pc, #248]	@ (8005fbc <NLLS+0x4d1c>)
 8005ec4:	443a      	add	r2, r7
 8005ec6:	6013      	str	r3, [r2, #0]
 8005ec8:	e065      	b.n	8005f96 <NLLS+0x4cf6>
		{
			Ht_e[i] = 0;
 8005eca:	4b3a      	ldr	r3, [pc, #232]	@ (8005fb4 <NLLS+0x4d14>)
 8005ecc:	443b      	add	r3, r7
 8005ece:	f5a3 629d 	sub.w	r2, r3, #1256	@ 0x4e8
 8005ed2:	4b3a      	ldr	r3, [pc, #232]	@ (8005fbc <NLLS+0x4d1c>)
 8005ed4:	443b      	add	r3, r7
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	18d1      	adds	r1, r2, r3
 8005edc:	f04f 0200 	mov.w	r2, #0
 8005ee0:	f04f 0300 	mov.w	r3, #0
 8005ee4:	e9c1 2300 	strd	r2, r3, [r1]
			for(int j = 0; j < tam; j++)
 8005ee8:	2300      	movs	r3, #0
 8005eea:	4a35      	ldr	r2, [pc, #212]	@ (8005fc0 <NLLS+0x4d20>)
 8005eec:	443a      	add	r2, r7
 8005eee:	6013      	str	r3, [r2, #0]
 8005ef0:	e044      	b.n	8005f7c <NLLS+0x4cdc>
			{
				Ht_e[i] += mul_mat[i][j]*e[j];
 8005ef2:	4b30      	ldr	r3, [pc, #192]	@ (8005fb4 <NLLS+0x4d14>)
 8005ef4:	443b      	add	r3, r7
 8005ef6:	f5a3 629d 	sub.w	r2, r3, #1256	@ 0x4e8
 8005efa:	4b30      	ldr	r3, [pc, #192]	@ (8005fbc <NLLS+0x4d1c>)
 8005efc:	443b      	add	r3, r7
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	00db      	lsls	r3, r3, #3
 8005f02:	4413      	add	r3, r2
 8005f04:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005f08:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	4b2b      	ldr	r3, [pc, #172]	@ (8005fbc <NLLS+0x4d1c>)
 8005f10:	443b      	add	r3, r7
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f44f 628b 	mov.w	r2, #1112	@ 0x458
 8005f18:	fb03 f202 	mul.w	r2, r3, r2
 8005f1c:	4b28      	ldr	r3, [pc, #160]	@ (8005fc0 <NLLS+0x4d20>)
 8005f1e:	443b      	add	r3, r7
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4413      	add	r3, r2
 8005f24:	00db      	lsls	r3, r3, #3
 8005f26:	440b      	add	r3, r1
 8005f28:	3b30      	subs	r3, #48	@ 0x30
 8005f2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f2e:	4b25      	ldr	r3, [pc, #148]	@ (8005fc4 <NLLS+0x4d24>)
 8005f30:	443b      	add	r3, r7
 8005f32:	f5a3 62d3 	sub.w	r2, r3, #1688	@ 0x698
 8005f36:	4b22      	ldr	r3, [pc, #136]	@ (8005fc0 <NLLS+0x4d20>)
 8005f38:	443b      	add	r3, r7
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	00db      	lsls	r3, r3, #3
 8005f3e:	4413      	add	r3, r2
 8005f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f44:	f7fa fb78 	bl	8000638 <__aeabi_dmul>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	4629      	mov	r1, r5
 8005f50:	f7fa f9bc 	bl	80002cc <__adddf3>
 8005f54:	4602      	mov	r2, r0
 8005f56:	460b      	mov	r3, r1
 8005f58:	4916      	ldr	r1, [pc, #88]	@ (8005fb4 <NLLS+0x4d14>)
 8005f5a:	4439      	add	r1, r7
 8005f5c:	f5a1 609d 	sub.w	r0, r1, #1256	@ 0x4e8
 8005f60:	4916      	ldr	r1, [pc, #88]	@ (8005fbc <NLLS+0x4d1c>)
 8005f62:	4439      	add	r1, r7
 8005f64:	6809      	ldr	r1, [r1, #0]
 8005f66:	00c9      	lsls	r1, r1, #3
 8005f68:	4401      	add	r1, r0
 8005f6a:	e9c1 2300 	strd	r2, r3, [r1]
			for(int j = 0; j < tam; j++)
 8005f6e:	4b14      	ldr	r3, [pc, #80]	@ (8005fc0 <NLLS+0x4d20>)
 8005f70:	443b      	add	r3, r7
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	3301      	adds	r3, #1
 8005f76:	4a12      	ldr	r2, [pc, #72]	@ (8005fc0 <NLLS+0x4d20>)
 8005f78:	443a      	add	r2, r7
 8005f7a:	6013      	str	r3, [r2, #0]
 8005f7c:	4b10      	ldr	r3, [pc, #64]	@ (8005fc0 <NLLS+0x4d20>)
 8005f7e:	443b      	add	r3, r7
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8005f86:	dbb4      	blt.n	8005ef2 <NLLS+0x4c52>
		for(int i = 0; i < N; i++)
 8005f88:	4b0c      	ldr	r3, [pc, #48]	@ (8005fbc <NLLS+0x4d1c>)
 8005f8a:	443b      	add	r3, r7
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	4a0a      	ldr	r2, [pc, #40]	@ (8005fbc <NLLS+0x4d1c>)
 8005f92:	443a      	add	r2, r7
 8005f94:	6013      	str	r3, [r2, #0]
 8005f96:	4b09      	ldr	r3, [pc, #36]	@ (8005fbc <NLLS+0x4d1c>)
 8005f98:	443b      	add	r3, r7
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2b08      	cmp	r3, #8
 8005f9e:	dd94      	ble.n	8005eca <NLLS+0x4c2a>
			}
		}

		for(int i = 0; i < N; i++)
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	4a09      	ldr	r2, [pc, #36]	@ (8005fc8 <NLLS+0x4d28>)
 8005fa4:	443a      	add	r2, r7
 8005fa6:	6013      	str	r3, [r2, #0]
 8005fa8:	e03c      	b.n	8006024 <NLLS+0x4d84>
 8005faa:	bf00      	nop
 8005fac:	0002dff4 	.word	0x0002dff4
 8005fb0:	0002dff0 	.word	0x0002dff0
 8005fb4:	00014070 	.word	0x00014070
 8005fb8:	0002dfec 	.word	0x0002dfec
 8005fbc:	0002dfe8 	.word	0x0002dfe8
 8005fc0:	0002dfe4 	.word	0x0002dfe4
 8005fc4:	0002a070 	.word	0x0002a070
 8005fc8:	0002dfe0 	.word	0x0002dfe0
		{
			p0[i] += Ht_e[i];
 8005fcc:	4b58      	ldr	r3, [pc, #352]	@ (8006130 <NLLS+0x4e90>)
 8005fce:	443b      	add	r3, r7
 8005fd0:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8005fd4:	4b57      	ldr	r3, [pc, #348]	@ (8006134 <NLLS+0x4e94>)
 8005fd6:	443b      	add	r3, r7
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	00db      	lsls	r3, r3, #3
 8005fdc:	4413      	add	r3, r2
 8005fde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005fe2:	4b55      	ldr	r3, [pc, #340]	@ (8006138 <NLLS+0x4e98>)
 8005fe4:	443b      	add	r3, r7
 8005fe6:	f5a3 629d 	sub.w	r2, r3, #1256	@ 0x4e8
 8005fea:	4b52      	ldr	r3, [pc, #328]	@ (8006134 <NLLS+0x4e94>)
 8005fec:	443b      	add	r3, r7
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	00db      	lsls	r3, r3, #3
 8005ff2:	4413      	add	r3, r2
 8005ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff8:	f7fa f968 	bl	80002cc <__adddf3>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	460b      	mov	r3, r1
 8006000:	494b      	ldr	r1, [pc, #300]	@ (8006130 <NLLS+0x4e90>)
 8006002:	4439      	add	r1, r7
 8006004:	f5a1 708c 	sub.w	r0, r1, #280	@ 0x118
 8006008:	494a      	ldr	r1, [pc, #296]	@ (8006134 <NLLS+0x4e94>)
 800600a:	4439      	add	r1, r7
 800600c:	6809      	ldr	r1, [r1, #0]
 800600e:	00c9      	lsls	r1, r1, #3
 8006010:	4401      	add	r1, r0
 8006012:	e9c1 2300 	strd	r2, r3, [r1]
		for(int i = 0; i < N; i++)
 8006016:	4b47      	ldr	r3, [pc, #284]	@ (8006134 <NLLS+0x4e94>)
 8006018:	443b      	add	r3, r7
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	3301      	adds	r3, #1
 800601e:	4a45      	ldr	r2, [pc, #276]	@ (8006134 <NLLS+0x4e94>)
 8006020:	443a      	add	r2, r7
 8006022:	6013      	str	r3, [r2, #0]
 8006024:	4b43      	ldr	r3, [pc, #268]	@ (8006134 <NLLS+0x4e94>)
 8006026:	443b      	add	r3, r7
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2b08      	cmp	r3, #8
 800602c:	ddce      	ble.n	8005fcc <NLLS+0x4d2c>
		}

		passo++;
 800602e:	4b43      	ldr	r3, [pc, #268]	@ (800613c <NLLS+0x4e9c>)
 8006030:	443b      	add	r3, r7
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	3301      	adds	r3, #1
 8006036:	4a41      	ldr	r2, [pc, #260]	@ (800613c <NLLS+0x4e9c>)
 8006038:	443a      	add	r2, r7
 800603a:	7013      	strb	r3, [r2, #0]
	while(loop == 1)
 800603c:	4b40      	ldr	r3, [pc, #256]	@ (8006140 <NLLS+0x4ea0>)
 800603e:	443b      	add	r3, r7
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	2b01      	cmp	r3, #1
 8006044:	f43b a97f 	beq.w	8001346 <NLLS+0xa6>
	}
    p[0] = sx;
 8006048:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800604c:	f853 1c40 	ldr.w	r1, [r3, #-64]
 8006050:	4b3c      	ldr	r3, [pc, #240]	@ (8006144 <NLLS+0x4ea4>)
 8006052:	443b      	add	r3, r7
 8006054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006058:	e9c1 2300 	strd	r2, r3, [r1]
    p[1] = sy;
 800605c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8006060:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8006064:	f103 0108 	add.w	r1, r3, #8
 8006068:	4b37      	ldr	r3, [pc, #220]	@ (8006148 <NLLS+0x4ea8>)
 800606a:	443b      	add	r3, r7
 800606c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006070:	e9c1 2300 	strd	r2, r3, [r1]
    p[2] = sz;
 8006074:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8006078:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800607c:	f103 0110 	add.w	r1, r3, #16
 8006080:	4b32      	ldr	r3, [pc, #200]	@ (800614c <NLLS+0x4eac>)
 8006082:	443b      	add	r3, r7
 8006084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006088:	e9c1 2300 	strd	r2, r3, [r1]
    p[3] = bx;
 800608c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8006090:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8006094:	f103 0118 	add.w	r1, r3, #24
 8006098:	4b2d      	ldr	r3, [pc, #180]	@ (8006150 <NLLS+0x4eb0>)
 800609a:	443b      	add	r3, r7
 800609c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a0:	e9c1 2300 	strd	r2, r3, [r1]
    p[4] = by;
 80060a4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80060a8:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80060ac:	f103 0120 	add.w	r1, r3, #32
 80060b0:	4b28      	ldr	r3, [pc, #160]	@ (8006154 <NLLS+0x4eb4>)
 80060b2:	443b      	add	r3, r7
 80060b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b8:	e9c1 2300 	strd	r2, r3, [r1]
    p[5] = bz;
 80060bc:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80060c0:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80060c4:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80060c8:	4b23      	ldr	r3, [pc, #140]	@ (8006158 <NLLS+0x4eb8>)
 80060ca:	443b      	add	r3, r7
 80060cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d0:	e9c1 2300 	strd	r2, r3, [r1]
    p[6] = rho;
 80060d4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80060d8:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80060dc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80060e0:	4b1e      	ldr	r3, [pc, #120]	@ (800615c <NLLS+0x4ebc>)
 80060e2:	443b      	add	r3, r7
 80060e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e8:	e9c1 2300 	strd	r2, r3, [r1]
    p[7] = phi;
 80060ec:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80060f0:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80060f4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80060f8:	4b19      	ldr	r3, [pc, #100]	@ (8006160 <NLLS+0x4ec0>)
 80060fa:	443b      	add	r3, r7
 80060fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006100:	e9c1 2300 	strd	r2, r3, [r1]
    p[8] = lambida;
 8006104:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8006108:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800610c:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8006110:	4b14      	ldr	r3, [pc, #80]	@ (8006164 <NLLS+0x4ec4>)
 8006112:	443b      	add	r3, r7
 8006114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006118:	e9c1 2300 	strd	r2, r3, [r1]

    return passo;
 800611c:	4b07      	ldr	r3, [pc, #28]	@ (800613c <NLLS+0x4e9c>)
 800611e:	443b      	add	r3, r7
 8006120:	781b      	ldrb	r3, [r3, #0]
}
 8006122:	4618      	mov	r0, r3
 8006124:	f507 3738 	add.w	r7, r7, #188416	@ 0x2e000
 8006128:	3774      	adds	r7, #116	@ 0x74
 800612a:	46bd      	mov	sp, r7
 800612c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006130:	0002e070 	.word	0x0002e070
 8006134:	0002dfe0 	.word	0x0002dfe0
 8006138:	00014070 	.word	0x00014070
 800613c:	0002e06f 	.word	0x0002e06f
 8006140:	0002e06e 	.word	0x0002e06e
 8006144:	0002e060 	.word	0x0002e060
 8006148:	0002e058 	.word	0x0002e058
 800614c:	0002e050 	.word	0x0002e050
 8006150:	0002e048 	.word	0x0002e048
 8006154:	0002e040 	.word	0x0002e040
 8006158:	0002e038 	.word	0x0002e038
 800615c:	0002e030 	.word	0x0002e030
 8006160:	0002e028 	.word	0x0002e028
 8006164:	0002e020 	.word	0x0002e020

08006168 <ETS>:

void ETS(double *mx, double *my, double *mz, double *p)
{
 8006168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800616c:	f5ad 3d26 	sub.w	sp, sp, #169984	@ 0x29800
 8006170:	f5ad 7d46 	sub.w	sp, sp, #792	@ 0x318
 8006174:	af00      	add	r7, sp, #0
 8006176:	f607 3418 	addw	r4, r7, #2840	@ 0xb18
 800617a:	f6a4 248c 	subw	r4, r4, #2700	@ 0xa8c
 800617e:	6020      	str	r0, [r4, #0]
 8006180:	f607 3018 	addw	r0, r7, #2840	@ 0xb18
 8006184:	f5a0 6029 	sub.w	r0, r0, #2704	@ 0xa90
 8006188:	6001      	str	r1, [r0, #0]
 800618a:	f607 3118 	addw	r1, r7, #2840	@ 0xb18
 800618e:	f6a1 2194 	subw	r1, r1, #2708	@ 0xa94
 8006192:	600a      	str	r2, [r1, #0]
 8006194:	f607 3218 	addw	r2, r7, #2840	@ 0xb18
 8006198:	f6a2 2298 	subw	r2, r2, #2712	@ 0xa98
 800619c:	6013      	str	r3, [r2, #0]
    //Cria a matriz H
    double mat_H[N][tam], my_2[tam];
    double H_Ht[N][N], inv[N][N];
    double mul_mat[N][tam];
    double X[N];
    double psi7 = 0, psi8 = 0, divs = 0, n1 = 0, n2 = 0, n3 = 0, n4 = 0, n5 = 0, n6 = 0, bx = 0, by = 0, bz = 0, sx = 0, sy = 0, sz = 0, rho = 0, phi = 0, lambida = 0;
 800619e:	f04f 0200 	mov.w	r2, #0
 80061a2:	f04f 0300 	mov.w	r3, #0
 80061a6:	4964      	ldr	r1, [pc, #400]	@ (8006338 <ETS+0x1d0>)
 80061a8:	4439      	add	r1, r7
 80061aa:	e9c1 2300 	strd	r2, r3, [r1]
 80061ae:	f04f 0200 	mov.w	r2, #0
 80061b2:	f04f 0300 	mov.w	r3, #0
 80061b6:	4961      	ldr	r1, [pc, #388]	@ (800633c <ETS+0x1d4>)
 80061b8:	4439      	add	r1, r7
 80061ba:	e9c1 2300 	strd	r2, r3, [r1]
 80061be:	f04f 0200 	mov.w	r2, #0
 80061c2:	f04f 0300 	mov.w	r3, #0
 80061c6:	495e      	ldr	r1, [pc, #376]	@ (8006340 <ETS+0x1d8>)
 80061c8:	4439      	add	r1, r7
 80061ca:	e9c1 2300 	strd	r2, r3, [r1]
 80061ce:	f04f 0200 	mov.w	r2, #0
 80061d2:	f04f 0300 	mov.w	r3, #0
 80061d6:	495b      	ldr	r1, [pc, #364]	@ (8006344 <ETS+0x1dc>)
 80061d8:	4439      	add	r1, r7
 80061da:	e9c1 2300 	strd	r2, r3, [r1]
 80061de:	f04f 0200 	mov.w	r2, #0
 80061e2:	f04f 0300 	mov.w	r3, #0
 80061e6:	4958      	ldr	r1, [pc, #352]	@ (8006348 <ETS+0x1e0>)
 80061e8:	4439      	add	r1, r7
 80061ea:	e9c1 2300 	strd	r2, r3, [r1]
 80061ee:	f04f 0200 	mov.w	r2, #0
 80061f2:	f04f 0300 	mov.w	r3, #0
 80061f6:	4955      	ldr	r1, [pc, #340]	@ (800634c <ETS+0x1e4>)
 80061f8:	4439      	add	r1, r7
 80061fa:	e9c1 2300 	strd	r2, r3, [r1]
 80061fe:	f04f 0200 	mov.w	r2, #0
 8006202:	f04f 0300 	mov.w	r3, #0
 8006206:	4952      	ldr	r1, [pc, #328]	@ (8006350 <ETS+0x1e8>)
 8006208:	4439      	add	r1, r7
 800620a:	e9c1 2300 	strd	r2, r3, [r1]
 800620e:	f04f 0200 	mov.w	r2, #0
 8006212:	f04f 0300 	mov.w	r3, #0
 8006216:	494f      	ldr	r1, [pc, #316]	@ (8006354 <ETS+0x1ec>)
 8006218:	4439      	add	r1, r7
 800621a:	e9c1 2300 	strd	r2, r3, [r1]
 800621e:	f04f 0200 	mov.w	r2, #0
 8006222:	f04f 0300 	mov.w	r3, #0
 8006226:	494c      	ldr	r1, [pc, #304]	@ (8006358 <ETS+0x1f0>)
 8006228:	4439      	add	r1, r7
 800622a:	e9c1 2300 	strd	r2, r3, [r1]
 800622e:	f04f 0200 	mov.w	r2, #0
 8006232:	f04f 0300 	mov.w	r3, #0
 8006236:	4949      	ldr	r1, [pc, #292]	@ (800635c <ETS+0x1f4>)
 8006238:	4439      	add	r1, r7
 800623a:	e9c1 2300 	strd	r2, r3, [r1]
 800623e:	f04f 0200 	mov.w	r2, #0
 8006242:	f04f 0300 	mov.w	r3, #0
 8006246:	4946      	ldr	r1, [pc, #280]	@ (8006360 <ETS+0x1f8>)
 8006248:	4439      	add	r1, r7
 800624a:	e9c1 2300 	strd	r2, r3, [r1]
 800624e:	f04f 0200 	mov.w	r2, #0
 8006252:	f04f 0300 	mov.w	r3, #0
 8006256:	4943      	ldr	r1, [pc, #268]	@ (8006364 <ETS+0x1fc>)
 8006258:	4439      	add	r1, r7
 800625a:	e9c1 2300 	strd	r2, r3, [r1]
 800625e:	f04f 0200 	mov.w	r2, #0
 8006262:	f04f 0300 	mov.w	r3, #0
 8006266:	4940      	ldr	r1, [pc, #256]	@ (8006368 <ETS+0x200>)
 8006268:	4439      	add	r1, r7
 800626a:	e9c1 2300 	strd	r2, r3, [r1]
 800626e:	f04f 0200 	mov.w	r2, #0
 8006272:	f04f 0300 	mov.w	r3, #0
 8006276:	493d      	ldr	r1, [pc, #244]	@ (800636c <ETS+0x204>)
 8006278:	4439      	add	r1, r7
 800627a:	e9c1 2300 	strd	r2, r3, [r1]
 800627e:	f04f 0200 	mov.w	r2, #0
 8006282:	f04f 0300 	mov.w	r3, #0
 8006286:	493a      	ldr	r1, [pc, #232]	@ (8006370 <ETS+0x208>)
 8006288:	4439      	add	r1, r7
 800628a:	e9c1 2300 	strd	r2, r3, [r1]
 800628e:	f04f 0200 	mov.w	r2, #0
 8006292:	f04f 0300 	mov.w	r3, #0
 8006296:	4937      	ldr	r1, [pc, #220]	@ (8006374 <ETS+0x20c>)
 8006298:	4439      	add	r1, r7
 800629a:	e9c1 2300 	strd	r2, r3, [r1]
 800629e:	f04f 0200 	mov.w	r2, #0
 80062a2:	f04f 0300 	mov.w	r3, #0
 80062a6:	4934      	ldr	r1, [pc, #208]	@ (8006378 <ETS+0x210>)
 80062a8:	4439      	add	r1, r7
 80062aa:	e9c1 2300 	strd	r2, r3, [r1]
 80062ae:	f04f 0200 	mov.w	r2, #0
 80062b2:	f04f 0300 	mov.w	r3, #0
 80062b6:	4931      	ldr	r1, [pc, #196]	@ (800637c <ETS+0x214>)
 80062b8:	4439      	add	r1, r7
 80062ba:	e9c1 2300 	strd	r2, r3, [r1]
    double X1_2 = 0, X2_2 = 0, X3_2 = 0, X4_2 = 0, X5_2 = 0, X6_2 = 0, X7_2 = 0;
 80062be:	f04f 0200 	mov.w	r2, #0
 80062c2:	f04f 0300 	mov.w	r3, #0
 80062c6:	492e      	ldr	r1, [pc, #184]	@ (8006380 <ETS+0x218>)
 80062c8:	4439      	add	r1, r7
 80062ca:	e9c1 2300 	strd	r2, r3, [r1]
 80062ce:	f04f 0200 	mov.w	r2, #0
 80062d2:	f04f 0300 	mov.w	r3, #0
 80062d6:	492b      	ldr	r1, [pc, #172]	@ (8006384 <ETS+0x21c>)
 80062d8:	4439      	add	r1, r7
 80062da:	e9c1 2300 	strd	r2, r3, [r1]
 80062de:	f04f 0200 	mov.w	r2, #0
 80062e2:	f04f 0300 	mov.w	r3, #0
 80062e6:	4928      	ldr	r1, [pc, #160]	@ (8006388 <ETS+0x220>)
 80062e8:	4439      	add	r1, r7
 80062ea:	e9c1 2300 	strd	r2, r3, [r1]
 80062ee:	f04f 0200 	mov.w	r2, #0
 80062f2:	f04f 0300 	mov.w	r3, #0
 80062f6:	4925      	ldr	r1, [pc, #148]	@ (800638c <ETS+0x224>)
 80062f8:	4439      	add	r1, r7
 80062fa:	e9c1 2300 	strd	r2, r3, [r1]
 80062fe:	f04f 0200 	mov.w	r2, #0
 8006302:	f04f 0300 	mov.w	r3, #0
 8006306:	4922      	ldr	r1, [pc, #136]	@ (8006390 <ETS+0x228>)
 8006308:	4439      	add	r1, r7
 800630a:	e9c1 2300 	strd	r2, r3, [r1]
 800630e:	f04f 0200 	mov.w	r2, #0
 8006312:	f04f 0300 	mov.w	r3, #0
 8006316:	491f      	ldr	r1, [pc, #124]	@ (8006394 <ETS+0x22c>)
 8006318:	4439      	add	r1, r7
 800631a:	e9c1 2300 	strd	r2, r3, [r1]
 800631e:	f04f 0200 	mov.w	r2, #0
 8006322:	f04f 0300 	mov.w	r3, #0
 8006326:	491c      	ldr	r1, [pc, #112]	@ (8006398 <ETS+0x230>)
 8006328:	4439      	add	r1, r7
 800632a:	e9c1 2300 	strd	r2, r3, [r1]
    for(int i=0; i < tam; i++)
 800632e:	2300      	movs	r3, #0
 8006330:	4a1a      	ldr	r2, [pc, #104]	@ (800639c <ETS+0x234>)
 8006332:	443a      	add	r2, r7
 8006334:	6013      	str	r3, [r2, #0]
 8006336:	e1a0      	b.n	800667a <ETS+0x512>
 8006338:	00029ae8 	.word	0x00029ae8
 800633c:	00029ae0 	.word	0x00029ae0
 8006340:	00029ad8 	.word	0x00029ad8
 8006344:	00029ad0 	.word	0x00029ad0
 8006348:	00029ac8 	.word	0x00029ac8
 800634c:	00029ac0 	.word	0x00029ac0
 8006350:	00029ab8 	.word	0x00029ab8
 8006354:	00029ab0 	.word	0x00029ab0
 8006358:	00029aa8 	.word	0x00029aa8
 800635c:	00029aa0 	.word	0x00029aa0
 8006360:	00029a98 	.word	0x00029a98
 8006364:	00029a90 	.word	0x00029a90
 8006368:	00029a88 	.word	0x00029a88
 800636c:	00029a80 	.word	0x00029a80
 8006370:	00029a78 	.word	0x00029a78
 8006374:	00029a70 	.word	0x00029a70
 8006378:	00029a68 	.word	0x00029a68
 800637c:	00029a60 	.word	0x00029a60
 8006380:	00029a58 	.word	0x00029a58
 8006384:	00029a50 	.word	0x00029a50
 8006388:	00029a48 	.word	0x00029a48
 800638c:	00029a40 	.word	0x00029a40
 8006390:	00029a38 	.word	0x00029a38
 8006394:	00029a30 	.word	0x00029a30
 8006398:	00029a28 	.word	0x00029a28
 800639c:	00029b14 	.word	0x00029b14
    {
        mat_H[0][i] = mx[i]*mx[i];
 80063a0:	4bad      	ldr	r3, [pc, #692]	@ (8006658 <ETS+0x4f0>)
 80063a2:	443b      	add	r3, r7
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	00da      	lsls	r2, r3, #3
 80063a8:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80063ac:	f6a3 238c 	subw	r3, r3, #2700	@ 0xa8c
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4413      	add	r3, r2
 80063b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80063b8:	4ba7      	ldr	r3, [pc, #668]	@ (8006658 <ETS+0x4f0>)
 80063ba:	443b      	add	r3, r7
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	00da      	lsls	r2, r3, #3
 80063c0:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80063c4:	f6a3 238c 	subw	r3, r3, #2700	@ 0xa8c
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4413      	add	r3, r2
 80063cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d0:	f7fa f932 	bl	8000638 <__aeabi_dmul>
 80063d4:	4602      	mov	r2, r0
 80063d6:	460b      	mov	r3, r1
 80063d8:	4610      	mov	r0, r2
 80063da:	4619      	mov	r1, r3
 80063dc:	4b9f      	ldr	r3, [pc, #636]	@ (800665c <ETS+0x4f4>)
 80063de:	443b      	add	r3, r7
 80063e0:	f5a3 621b 	sub.w	r2, r3, #2480	@ 0x9b0
 80063e4:	4b9c      	ldr	r3, [pc, #624]	@ (8006658 <ETS+0x4f0>)
 80063e6:	443b      	add	r3, r7
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	00db      	lsls	r3, r3, #3
 80063ec:	4413      	add	r3, r2
 80063ee:	e9c3 0100 	strd	r0, r1, [r3]
        mat_H[1][i] = mx[i]*my[i];
 80063f2:	4b99      	ldr	r3, [pc, #612]	@ (8006658 <ETS+0x4f0>)
 80063f4:	443b      	add	r3, r7
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	00da      	lsls	r2, r3, #3
 80063fa:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80063fe:	f6a3 238c 	subw	r3, r3, #2700	@ 0xa8c
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4413      	add	r3, r2
 8006406:	e9d3 0100 	ldrd	r0, r1, [r3]
 800640a:	4b93      	ldr	r3, [pc, #588]	@ (8006658 <ETS+0x4f0>)
 800640c:	443b      	add	r3, r7
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	00da      	lsls	r2, r3, #3
 8006412:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006416:	f5a3 6329 	sub.w	r3, r3, #2704	@ 0xa90
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4413      	add	r3, r2
 800641e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006422:	f7fa f909 	bl	8000638 <__aeabi_dmul>
 8006426:	4602      	mov	r2, r0
 8006428:	460b      	mov	r3, r1
 800642a:	4610      	mov	r0, r2
 800642c:	4619      	mov	r1, r3
 800642e:	4b8b      	ldr	r3, [pc, #556]	@ (800665c <ETS+0x4f4>)
 8006430:	443b      	add	r3, r7
 8006432:	f5a3 621b 	sub.w	r2, r3, #2480	@ 0x9b0
 8006436:	4b88      	ldr	r3, [pc, #544]	@ (8006658 <ETS+0x4f0>)
 8006438:	443b      	add	r3, r7
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f503 638b 	add.w	r3, r3, #1112	@ 0x458
 8006440:	00db      	lsls	r3, r3, #3
 8006442:	4413      	add	r3, r2
 8006444:	e9c3 0100 	strd	r0, r1, [r3]
        mat_H[2][i] = mx[i]*mz[i];
 8006448:	4b83      	ldr	r3, [pc, #524]	@ (8006658 <ETS+0x4f0>)
 800644a:	443b      	add	r3, r7
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	00da      	lsls	r2, r3, #3
 8006450:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006454:	f6a3 238c 	subw	r3, r3, #2700	@ 0xa8c
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4413      	add	r3, r2
 800645c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006460:	4b7d      	ldr	r3, [pc, #500]	@ (8006658 <ETS+0x4f0>)
 8006462:	443b      	add	r3, r7
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	00da      	lsls	r2, r3, #3
 8006468:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800646c:	f6a3 2394 	subw	r3, r3, #2708	@ 0xa94
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4413      	add	r3, r2
 8006474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006478:	f7fa f8de 	bl	8000638 <__aeabi_dmul>
 800647c:	4602      	mov	r2, r0
 800647e:	460b      	mov	r3, r1
 8006480:	4610      	mov	r0, r2
 8006482:	4619      	mov	r1, r3
 8006484:	4b75      	ldr	r3, [pc, #468]	@ (800665c <ETS+0x4f4>)
 8006486:	443b      	add	r3, r7
 8006488:	f5a3 621b 	sub.w	r2, r3, #2480	@ 0x9b0
 800648c:	4b72      	ldr	r3, [pc, #456]	@ (8006658 <ETS+0x4f0>)
 800648e:	443b      	add	r3, r7
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 8006496:	00db      	lsls	r3, r3, #3
 8006498:	4413      	add	r3, r2
 800649a:	e9c3 0100 	strd	r0, r1, [r3]
        mat_H[3][i] = my[i]*mz[i];
 800649e:	4b6e      	ldr	r3, [pc, #440]	@ (8006658 <ETS+0x4f0>)
 80064a0:	443b      	add	r3, r7
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	00da      	lsls	r2, r3, #3
 80064a6:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80064aa:	f5a3 6329 	sub.w	r3, r3, #2704	@ 0xa90
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4413      	add	r3, r2
 80064b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80064b6:	4b68      	ldr	r3, [pc, #416]	@ (8006658 <ETS+0x4f0>)
 80064b8:	443b      	add	r3, r7
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	00da      	lsls	r2, r3, #3
 80064be:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80064c2:	f6a3 2394 	subw	r3, r3, #2708	@ 0xa94
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4413      	add	r3, r2
 80064ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ce:	f7fa f8b3 	bl	8000638 <__aeabi_dmul>
 80064d2:	4602      	mov	r2, r0
 80064d4:	460b      	mov	r3, r1
 80064d6:	4610      	mov	r0, r2
 80064d8:	4619      	mov	r1, r3
 80064da:	4b60      	ldr	r3, [pc, #384]	@ (800665c <ETS+0x4f4>)
 80064dc:	443b      	add	r3, r7
 80064de:	f5a3 621b 	sub.w	r2, r3, #2480	@ 0x9b0
 80064e2:	4b5d      	ldr	r3, [pc, #372]	@ (8006658 <ETS+0x4f0>)
 80064e4:	443b      	add	r3, r7
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f603 5308 	addw	r3, r3, #3336	@ 0xd08
 80064ec:	00db      	lsls	r3, r3, #3
 80064ee:	4413      	add	r3, r2
 80064f0:	e9c3 0100 	strd	r0, r1, [r3]
        mat_H[4][i] = mz[i]*mz[i];
 80064f4:	4b58      	ldr	r3, [pc, #352]	@ (8006658 <ETS+0x4f0>)
 80064f6:	443b      	add	r3, r7
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	00da      	lsls	r2, r3, #3
 80064fc:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006500:	f6a3 2394 	subw	r3, r3, #2708	@ 0xa94
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4413      	add	r3, r2
 8006508:	e9d3 0100 	ldrd	r0, r1, [r3]
 800650c:	4b52      	ldr	r3, [pc, #328]	@ (8006658 <ETS+0x4f0>)
 800650e:	443b      	add	r3, r7
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	00da      	lsls	r2, r3, #3
 8006514:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006518:	f6a3 2394 	subw	r3, r3, #2708	@ 0xa94
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4413      	add	r3, r2
 8006520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006524:	f7fa f888 	bl	8000638 <__aeabi_dmul>
 8006528:	4602      	mov	r2, r0
 800652a:	460b      	mov	r3, r1
 800652c:	4610      	mov	r0, r2
 800652e:	4619      	mov	r1, r3
 8006530:	4b4a      	ldr	r3, [pc, #296]	@ (800665c <ETS+0x4f4>)
 8006532:	443b      	add	r3, r7
 8006534:	f5a3 621b 	sub.w	r2, r3, #2480	@ 0x9b0
 8006538:	4b47      	ldr	r3, [pc, #284]	@ (8006658 <ETS+0x4f0>)
 800653a:	443b      	add	r3, r7
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f503 538b 	add.w	r3, r3, #4448	@ 0x1160
 8006542:	00db      	lsls	r3, r3, #3
 8006544:	4413      	add	r3, r2
 8006546:	e9c3 0100 	strd	r0, r1, [r3]
        mat_H[5][i] = mx[i];
 800654a:	4b43      	ldr	r3, [pc, #268]	@ (8006658 <ETS+0x4f0>)
 800654c:	443b      	add	r3, r7
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	00da      	lsls	r2, r3, #3
 8006552:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006556:	f6a3 238c 	subw	r3, r3, #2700	@ 0xa8c
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4413      	add	r3, r2
 800655e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006562:	4b3e      	ldr	r3, [pc, #248]	@ (800665c <ETS+0x4f4>)
 8006564:	443b      	add	r3, r7
 8006566:	f5a3 641b 	sub.w	r4, r3, #2480	@ 0x9b0
 800656a:	4b3b      	ldr	r3, [pc, #236]	@ (8006658 <ETS+0x4f0>)
 800656c:	443b      	add	r3, r7
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	f241 53b8 	movw	r3, #5560	@ 0x15b8
 8006574:	4413      	add	r3, r2
 8006576:	00db      	lsls	r3, r3, #3
 8006578:	4423      	add	r3, r4
 800657a:	e9c3 0100 	strd	r0, r1, [r3]
        mat_H[6][i] = my[i];
 800657e:	4b36      	ldr	r3, [pc, #216]	@ (8006658 <ETS+0x4f0>)
 8006580:	443b      	add	r3, r7
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	00da      	lsls	r2, r3, #3
 8006586:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800658a:	f5a3 6329 	sub.w	r3, r3, #2704	@ 0xa90
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4413      	add	r3, r2
 8006592:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006596:	4b31      	ldr	r3, [pc, #196]	@ (800665c <ETS+0x4f4>)
 8006598:	443b      	add	r3, r7
 800659a:	f5a3 641b 	sub.w	r4, r3, #2480	@ 0x9b0
 800659e:	4b2e      	ldr	r3, [pc, #184]	@ (8006658 <ETS+0x4f0>)
 80065a0:	443b      	add	r3, r7
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	f641 2310 	movw	r3, #6672	@ 0x1a10
 80065a8:	4413      	add	r3, r2
 80065aa:	00db      	lsls	r3, r3, #3
 80065ac:	4423      	add	r3, r4
 80065ae:	e9c3 0100 	strd	r0, r1, [r3]
        mat_H[7][i] = mz[i];
 80065b2:	4b29      	ldr	r3, [pc, #164]	@ (8006658 <ETS+0x4f0>)
 80065b4:	443b      	add	r3, r7
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	00da      	lsls	r2, r3, #3
 80065ba:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80065be:	f6a3 2394 	subw	r3, r3, #2708	@ 0xa94
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4413      	add	r3, r2
 80065c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80065ca:	4b24      	ldr	r3, [pc, #144]	@ (800665c <ETS+0x4f4>)
 80065cc:	443b      	add	r3, r7
 80065ce:	f5a3 641b 	sub.w	r4, r3, #2480	@ 0x9b0
 80065d2:	4b21      	ldr	r3, [pc, #132]	@ (8006658 <ETS+0x4f0>)
 80065d4:	443b      	add	r3, r7
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	f641 6368 	movw	r3, #7784	@ 0x1e68
 80065dc:	4413      	add	r3, r2
 80065de:	00db      	lsls	r3, r3, #3
 80065e0:	4423      	add	r3, r4
 80065e2:	e9c3 0100 	strd	r0, r1, [r3]
        mat_H[8][i] = 1;
 80065e6:	4b1d      	ldr	r3, [pc, #116]	@ (800665c <ETS+0x4f4>)
 80065e8:	443b      	add	r3, r7
 80065ea:	f5a3 621b 	sub.w	r2, r3, #2480	@ 0x9b0
 80065ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006658 <ETS+0x4f0>)
 80065f0:	443b      	add	r3, r7
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f503 530b 	add.w	r3, r3, #8896	@ 0x22c0
 80065f8:	00db      	lsls	r3, r3, #3
 80065fa:	18d1      	adds	r1, r2, r3
 80065fc:	f04f 0200 	mov.w	r2, #0
 8006600:	4b17      	ldr	r3, [pc, #92]	@ (8006660 <ETS+0x4f8>)
 8006602:	e9c1 2300 	strd	r2, r3, [r1]
        my_2[i] = -(my[i]*my[i]);
 8006606:	4b14      	ldr	r3, [pc, #80]	@ (8006658 <ETS+0x4f0>)
 8006608:	443b      	add	r3, r7
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	00da      	lsls	r2, r3, #3
 800660e:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006612:	f5a3 6329 	sub.w	r3, r3, #2704	@ 0xa90
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4413      	add	r3, r2
 800661a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800661e:	4b0e      	ldr	r3, [pc, #56]	@ (8006658 <ETS+0x4f0>)
 8006620:	443b      	add	r3, r7
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	00da      	lsls	r2, r3, #3
 8006626:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800662a:	f5a3 6329 	sub.w	r3, r3, #2704	@ 0xa90
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4413      	add	r3, r2
 8006632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006636:	f7f9 ffff 	bl	8000638 <__aeabi_dmul>
 800663a:	4602      	mov	r2, r0
 800663c:	460b      	mov	r3, r1
 800663e:	4690      	mov	r8, r2
 8006640:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8006644:	4b07      	ldr	r3, [pc, #28]	@ (8006664 <ETS+0x4fc>)
 8006646:	443b      	add	r3, r7
 8006648:	f5a3 6247 	sub.w	r2, r3, #3184	@ 0xc70
 800664c:	4b02      	ldr	r3, [pc, #8]	@ (8006658 <ETS+0x4f0>)
 800664e:	443b      	add	r3, r7
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	00db      	lsls	r3, r3, #3
 8006654:	4413      	add	r3, r2
 8006656:	e007      	b.n	8006668 <ETS+0x500>
 8006658:	00029b14 	.word	0x00029b14
 800665c:	00016b18 	.word	0x00016b18
 8006660:	3ff00000 	.word	0x3ff00000
 8006664:	00014b18 	.word	0x00014b18
 8006668:	e9c3 8900 	strd	r8, r9, [r3]
    for(int i=0; i < tam; i++)
 800666c:	4b74      	ldr	r3, [pc, #464]	@ (8006840 <ETS+0x6d8>)
 800666e:	443b      	add	r3, r7
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	3301      	adds	r3, #1
 8006674:	4a72      	ldr	r2, [pc, #456]	@ (8006840 <ETS+0x6d8>)
 8006676:	443a      	add	r2, r7
 8006678:	6013      	str	r3, [r2, #0]
 800667a:	4b71      	ldr	r3, [pc, #452]	@ (8006840 <ETS+0x6d8>)
 800667c:	443b      	add	r3, r7
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8006684:	f6ff ae8c 	blt.w	80063a0 <ETS+0x238>
    }

    //Multiplicação da matriz H por sua transposta
    for(int i=0; i < N; i++)
 8006688:	2300      	movs	r3, #0
 800668a:	4a6e      	ldr	r2, [pc, #440]	@ (8006844 <ETS+0x6dc>)
 800668c:	443a      	add	r2, r7
 800668e:	6013      	str	r3, [r2, #0]
 8006690:	e098      	b.n	80067c4 <ETS+0x65c>
    {
        for(int j=0; j < N; j++)
 8006692:	2300      	movs	r3, #0
 8006694:	4a6c      	ldr	r2, [pc, #432]	@ (8006848 <ETS+0x6e0>)
 8006696:	443a      	add	r2, r7
 8006698:	6013      	str	r3, [r2, #0]
 800669a:	e086      	b.n	80067aa <ETS+0x642>
        {
            H_Ht[i][j] = 0;
 800669c:	4b6b      	ldr	r3, [pc, #428]	@ (800684c <ETS+0x6e4>)
 800669e:	443b      	add	r3, r7
 80066a0:	f6a3 61f8 	subw	r1, r3, #3832	@ 0xef8
 80066a4:	4b67      	ldr	r3, [pc, #412]	@ (8006844 <ETS+0x6dc>)
 80066a6:	443b      	add	r3, r7
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	461a      	mov	r2, r3
 80066ac:	00d2      	lsls	r2, r2, #3
 80066ae:	441a      	add	r2, r3
 80066b0:	4b65      	ldr	r3, [pc, #404]	@ (8006848 <ETS+0x6e0>)
 80066b2:	443b      	add	r3, r7
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4413      	add	r3, r2
 80066b8:	00db      	lsls	r3, r3, #3
 80066ba:	4419      	add	r1, r3
 80066bc:	f04f 0200 	mov.w	r2, #0
 80066c0:	f04f 0300 	mov.w	r3, #0
 80066c4:	e9c1 2300 	strd	r2, r3, [r1]
            for(int k = 0; k < tam; k++)
 80066c8:	2300      	movs	r3, #0
 80066ca:	4a61      	ldr	r2, [pc, #388]	@ (8006850 <ETS+0x6e8>)
 80066cc:	443a      	add	r2, r7
 80066ce:	6013      	str	r3, [r2, #0]
 80066d0:	e05e      	b.n	8006790 <ETS+0x628>
            {
                H_Ht[i][j] += mat_H[i][k]*mat_H[j][k];
 80066d2:	4b5e      	ldr	r3, [pc, #376]	@ (800684c <ETS+0x6e4>)
 80066d4:	443b      	add	r3, r7
 80066d6:	f6a3 61f8 	subw	r1, r3, #3832	@ 0xef8
 80066da:	4b5a      	ldr	r3, [pc, #360]	@ (8006844 <ETS+0x6dc>)
 80066dc:	443b      	add	r3, r7
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	461a      	mov	r2, r3
 80066e2:	00d2      	lsls	r2, r2, #3
 80066e4:	441a      	add	r2, r3
 80066e6:	4b58      	ldr	r3, [pc, #352]	@ (8006848 <ETS+0x6e0>)
 80066e8:	443b      	add	r3, r7
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4413      	add	r3, r2
 80066ee:	00db      	lsls	r3, r3, #3
 80066f0:	440b      	add	r3, r1
 80066f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066f6:	4b57      	ldr	r3, [pc, #348]	@ (8006854 <ETS+0x6ec>)
 80066f8:	443b      	add	r3, r7
 80066fa:	f5a3 611b 	sub.w	r1, r3, #2480	@ 0x9b0
 80066fe:	4b51      	ldr	r3, [pc, #324]	@ (8006844 <ETS+0x6dc>)
 8006700:	443b      	add	r3, r7
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	f44f 638b 	mov.w	r3, #1112	@ 0x458
 8006708:	fb03 f202 	mul.w	r2, r3, r2
 800670c:	4b50      	ldr	r3, [pc, #320]	@ (8006850 <ETS+0x6e8>)
 800670e:	443b      	add	r3, r7
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4413      	add	r3, r2
 8006714:	00db      	lsls	r3, r3, #3
 8006716:	440b      	add	r3, r1
 8006718:	e9d3 4500 	ldrd	r4, r5, [r3]
 800671c:	4b4d      	ldr	r3, [pc, #308]	@ (8006854 <ETS+0x6ec>)
 800671e:	443b      	add	r3, r7
 8006720:	f5a3 611b 	sub.w	r1, r3, #2480	@ 0x9b0
 8006724:	4b48      	ldr	r3, [pc, #288]	@ (8006848 <ETS+0x6e0>)
 8006726:	443b      	add	r3, r7
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	f44f 638b 	mov.w	r3, #1112	@ 0x458
 800672e:	fb03 f202 	mul.w	r2, r3, r2
 8006732:	4b47      	ldr	r3, [pc, #284]	@ (8006850 <ETS+0x6e8>)
 8006734:	443b      	add	r3, r7
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4413      	add	r3, r2
 800673a:	00db      	lsls	r3, r3, #3
 800673c:	440b      	add	r3, r1
 800673e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006742:	4620      	mov	r0, r4
 8006744:	4629      	mov	r1, r5
 8006746:	f7f9 ff77 	bl	8000638 <__aeabi_dmul>
 800674a:	4602      	mov	r2, r0
 800674c:	460b      	mov	r3, r1
 800674e:	4640      	mov	r0, r8
 8006750:	4649      	mov	r1, r9
 8006752:	f7f9 fdbb 	bl	80002cc <__adddf3>
 8006756:	4602      	mov	r2, r0
 8006758:	460b      	mov	r3, r1
 800675a:	4614      	mov	r4, r2
 800675c:	461d      	mov	r5, r3
 800675e:	4b3b      	ldr	r3, [pc, #236]	@ (800684c <ETS+0x6e4>)
 8006760:	443b      	add	r3, r7
 8006762:	f6a3 61f8 	subw	r1, r3, #3832	@ 0xef8
 8006766:	4b37      	ldr	r3, [pc, #220]	@ (8006844 <ETS+0x6dc>)
 8006768:	443b      	add	r3, r7
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	461a      	mov	r2, r3
 800676e:	00d2      	lsls	r2, r2, #3
 8006770:	441a      	add	r2, r3
 8006772:	4b35      	ldr	r3, [pc, #212]	@ (8006848 <ETS+0x6e0>)
 8006774:	443b      	add	r3, r7
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4413      	add	r3, r2
 800677a:	00db      	lsls	r3, r3, #3
 800677c:	440b      	add	r3, r1
 800677e:	e9c3 4500 	strd	r4, r5, [r3]
            for(int k = 0; k < tam; k++)
 8006782:	4b33      	ldr	r3, [pc, #204]	@ (8006850 <ETS+0x6e8>)
 8006784:	443b      	add	r3, r7
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	3301      	adds	r3, #1
 800678a:	4a31      	ldr	r2, [pc, #196]	@ (8006850 <ETS+0x6e8>)
 800678c:	443a      	add	r2, r7
 800678e:	6013      	str	r3, [r2, #0]
 8006790:	4b2f      	ldr	r3, [pc, #188]	@ (8006850 <ETS+0x6e8>)
 8006792:	443b      	add	r3, r7
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 800679a:	db9a      	blt.n	80066d2 <ETS+0x56a>
        for(int j=0; j < N; j++)
 800679c:	4b2a      	ldr	r3, [pc, #168]	@ (8006848 <ETS+0x6e0>)
 800679e:	443b      	add	r3, r7
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	3301      	adds	r3, #1
 80067a4:	4a28      	ldr	r2, [pc, #160]	@ (8006848 <ETS+0x6e0>)
 80067a6:	443a      	add	r2, r7
 80067a8:	6013      	str	r3, [r2, #0]
 80067aa:	4b27      	ldr	r3, [pc, #156]	@ (8006848 <ETS+0x6e0>)
 80067ac:	443b      	add	r3, r7
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2b08      	cmp	r3, #8
 80067b2:	f77f af73 	ble.w	800669c <ETS+0x534>
    for(int i=0; i < N; i++)
 80067b6:	4b23      	ldr	r3, [pc, #140]	@ (8006844 <ETS+0x6dc>)
 80067b8:	443b      	add	r3, r7
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	3301      	adds	r3, #1
 80067be:	4a21      	ldr	r2, [pc, #132]	@ (8006844 <ETS+0x6dc>)
 80067c0:	443a      	add	r2, r7
 80067c2:	6013      	str	r3, [r2, #0]
 80067c4:	4b1f      	ldr	r3, [pc, #124]	@ (8006844 <ETS+0x6dc>)
 80067c6:	443b      	add	r3, r7
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2b08      	cmp	r3, #8
 80067cc:	f77f af61 	ble.w	8006692 <ETS+0x52a>
            }
        }
    }

    inverter_matriz(H_Ht, inv);
 80067d0:	4a21      	ldr	r2, [pc, #132]	@ (8006858 <ETS+0x6f0>)
 80067d2:	4b22      	ldr	r3, [pc, #136]	@ (800685c <ETS+0x6f4>)
 80067d4:	4413      	add	r3, r2
 80067d6:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 80067da:	189a      	adds	r2, r3, r2
 80067dc:	4b20      	ldr	r3, [pc, #128]	@ (8006860 <ETS+0x6f8>)
 80067de:	f503 3326 	add.w	r3, r3, #169984	@ 0x29800
 80067e2:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80067e6:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 80067ea:	440b      	add	r3, r1
 80067ec:	4611      	mov	r1, r2
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fa fc18 	bl	8001024 <inverter_matriz>

    //Multiplica a inversa por H transposta
    for(int i=0; i < N; i++)
 80067f4:	2300      	movs	r3, #0
 80067f6:	4a1b      	ldr	r2, [pc, #108]	@ (8006864 <ETS+0x6fc>)
 80067f8:	443a      	add	r2, r7
 80067fa:	6013      	str	r3, [r2, #0]
 80067fc:	e0b2      	b.n	8006964 <ETS+0x7fc>
    {
        for(int j=0; j < tam; j++)
 80067fe:	2300      	movs	r3, #0
 8006800:	4a19      	ldr	r2, [pc, #100]	@ (8006868 <ETS+0x700>)
 8006802:	443a      	add	r2, r7
 8006804:	6013      	str	r3, [r2, #0]
 8006806:	e09f      	b.n	8006948 <ETS+0x7e0>
        {
            mul_mat[i][j] = 0;
 8006808:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800680c:	f5a3 6124 	sub.w	r1, r3, #2624	@ 0xa40
 8006810:	4b14      	ldr	r3, [pc, #80]	@ (8006864 <ETS+0x6fc>)
 8006812:	443b      	add	r3, r7
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	f44f 638b 	mov.w	r3, #1112	@ 0x458
 800681a:	fb03 f202 	mul.w	r2, r3, r2
 800681e:	4b12      	ldr	r3, [pc, #72]	@ (8006868 <ETS+0x700>)
 8006820:	443b      	add	r3, r7
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4413      	add	r3, r2
 8006826:	00db      	lsls	r3, r3, #3
 8006828:	4419      	add	r1, r3
 800682a:	f04f 0200 	mov.w	r2, #0
 800682e:	f04f 0300 	mov.w	r3, #0
 8006832:	e9c1 2300 	strd	r2, r3, [r1]
            for(int k=0; k < N; k++)
 8006836:	2300      	movs	r3, #0
 8006838:	4a0c      	ldr	r2, [pc, #48]	@ (800686c <ETS+0x704>)
 800683a:	443a      	add	r2, r7
 800683c:	6013      	str	r3, [r2, #0]
 800683e:	e077      	b.n	8006930 <ETS+0x7c8>
 8006840:	00029b14 	.word	0x00029b14
 8006844:	00029b10 	.word	0x00029b10
 8006848:	00029b0c 	.word	0x00029b0c
 800684c:	00014b18 	.word	0x00014b18
 8006850:	00029b08 	.word	0x00029b08
 8006854:	00016b18 	.word	0x00016b18
 8006858:	fffe9e80 	.word	0xfffe9e80
 800685c:	00029a98 	.word	0x00029a98
 8006860:	fffea108 	.word	0xfffea108
 8006864:	00029b04 	.word	0x00029b04
 8006868:	00029b00 	.word	0x00029b00
 800686c:	00029afc 	.word	0x00029afc
            {
                mul_mat[i][j] += inv[i][k]*mat_H[k][j];
 8006870:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006874:	f5a3 6124 	sub.w	r1, r3, #2624	@ 0xa40
 8006878:	4b4a      	ldr	r3, [pc, #296]	@ (80069a4 <ETS+0x83c>)
 800687a:	443b      	add	r3, r7
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	f44f 638b 	mov.w	r3, #1112	@ 0x458
 8006882:	fb03 f202 	mul.w	r2, r3, r2
 8006886:	4b48      	ldr	r3, [pc, #288]	@ (80069a8 <ETS+0x840>)
 8006888:	443b      	add	r3, r7
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4413      	add	r3, r2
 800688e:	00db      	lsls	r3, r3, #3
 8006890:	440b      	add	r3, r1
 8006892:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006896:	4b45      	ldr	r3, [pc, #276]	@ (80069ac <ETS+0x844>)
 8006898:	443b      	add	r3, r7
 800689a:	f5a3 71c0 	sub.w	r1, r3, #384	@ 0x180
 800689e:	4b41      	ldr	r3, [pc, #260]	@ (80069a4 <ETS+0x83c>)
 80068a0:	443b      	add	r3, r7
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	461a      	mov	r2, r3
 80068a6:	00d2      	lsls	r2, r2, #3
 80068a8:	441a      	add	r2, r3
 80068aa:	4b41      	ldr	r3, [pc, #260]	@ (80069b0 <ETS+0x848>)
 80068ac:	443b      	add	r3, r7
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4413      	add	r3, r2
 80068b2:	00db      	lsls	r3, r3, #3
 80068b4:	440b      	add	r3, r1
 80068b6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80068ba:	4b3e      	ldr	r3, [pc, #248]	@ (80069b4 <ETS+0x84c>)
 80068bc:	443b      	add	r3, r7
 80068be:	f5a3 611b 	sub.w	r1, r3, #2480	@ 0x9b0
 80068c2:	4b3b      	ldr	r3, [pc, #236]	@ (80069b0 <ETS+0x848>)
 80068c4:	443b      	add	r3, r7
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	f44f 638b 	mov.w	r3, #1112	@ 0x458
 80068cc:	fb03 f202 	mul.w	r2, r3, r2
 80068d0:	4b35      	ldr	r3, [pc, #212]	@ (80069a8 <ETS+0x840>)
 80068d2:	443b      	add	r3, r7
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4413      	add	r3, r2
 80068d8:	00db      	lsls	r3, r3, #3
 80068da:	440b      	add	r3, r1
 80068dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e0:	4620      	mov	r0, r4
 80068e2:	4629      	mov	r1, r5
 80068e4:	f7f9 fea8 	bl	8000638 <__aeabi_dmul>
 80068e8:	4602      	mov	r2, r0
 80068ea:	460b      	mov	r3, r1
 80068ec:	4640      	mov	r0, r8
 80068ee:	4649      	mov	r1, r9
 80068f0:	f7f9 fcec 	bl	80002cc <__adddf3>
 80068f4:	4602      	mov	r2, r0
 80068f6:	460b      	mov	r3, r1
 80068f8:	4614      	mov	r4, r2
 80068fa:	461d      	mov	r5, r3
 80068fc:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006900:	f5a3 6124 	sub.w	r1, r3, #2624	@ 0xa40
 8006904:	4b27      	ldr	r3, [pc, #156]	@ (80069a4 <ETS+0x83c>)
 8006906:	443b      	add	r3, r7
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	f44f 638b 	mov.w	r3, #1112	@ 0x458
 800690e:	fb03 f202 	mul.w	r2, r3, r2
 8006912:	4b25      	ldr	r3, [pc, #148]	@ (80069a8 <ETS+0x840>)
 8006914:	443b      	add	r3, r7
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4413      	add	r3, r2
 800691a:	00db      	lsls	r3, r3, #3
 800691c:	440b      	add	r3, r1
 800691e:	e9c3 4500 	strd	r4, r5, [r3]
            for(int k=0; k < N; k++)
 8006922:	4b23      	ldr	r3, [pc, #140]	@ (80069b0 <ETS+0x848>)
 8006924:	443b      	add	r3, r7
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	3301      	adds	r3, #1
 800692a:	4a21      	ldr	r2, [pc, #132]	@ (80069b0 <ETS+0x848>)
 800692c:	443a      	add	r2, r7
 800692e:	6013      	str	r3, [r2, #0]
 8006930:	4b1f      	ldr	r3, [pc, #124]	@ (80069b0 <ETS+0x848>)
 8006932:	443b      	add	r3, r7
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b08      	cmp	r3, #8
 8006938:	dd9a      	ble.n	8006870 <ETS+0x708>
        for(int j=0; j < tam; j++)
 800693a:	4b1b      	ldr	r3, [pc, #108]	@ (80069a8 <ETS+0x840>)
 800693c:	443b      	add	r3, r7
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	3301      	adds	r3, #1
 8006942:	4a19      	ldr	r2, [pc, #100]	@ (80069a8 <ETS+0x840>)
 8006944:	443a      	add	r2, r7
 8006946:	6013      	str	r3, [r2, #0]
 8006948:	4b17      	ldr	r3, [pc, #92]	@ (80069a8 <ETS+0x840>)
 800694a:	443b      	add	r3, r7
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8006952:	f6ff af59 	blt.w	8006808 <ETS+0x6a0>
    for(int i=0; i < N; i++)
 8006956:	4b13      	ldr	r3, [pc, #76]	@ (80069a4 <ETS+0x83c>)
 8006958:	443b      	add	r3, r7
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	3301      	adds	r3, #1
 800695e:	4a11      	ldr	r2, [pc, #68]	@ (80069a4 <ETS+0x83c>)
 8006960:	443a      	add	r2, r7
 8006962:	6013      	str	r3, [r2, #0]
 8006964:	4b0f      	ldr	r3, [pc, #60]	@ (80069a4 <ETS+0x83c>)
 8006966:	443b      	add	r3, r7
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2b08      	cmp	r3, #8
 800696c:	f77f af47 	ble.w	80067fe <ETS+0x696>
            }
        }
    }

    //Resultado da psedo-inversa
    for(int i=0; i < N; i++)
 8006970:	2300      	movs	r3, #0
 8006972:	4a11      	ldr	r2, [pc, #68]	@ (80069b8 <ETS+0x850>)
 8006974:	443a      	add	r2, r7
 8006976:	6013      	str	r3, [r2, #0]
 8006978:	e076      	b.n	8006a68 <ETS+0x900>
    {
        X[i] = 0;
 800697a:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800697e:	f6a3 2288 	subw	r2, r3, #2696	@ 0xa88
 8006982:	4b0d      	ldr	r3, [pc, #52]	@ (80069b8 <ETS+0x850>)
 8006984:	443b      	add	r3, r7
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	00db      	lsls	r3, r3, #3
 800698a:	18d1      	adds	r1, r2, r3
 800698c:	f04f 0200 	mov.w	r2, #0
 8006990:	f04f 0300 	mov.w	r3, #0
 8006994:	e9c1 2300 	strd	r2, r3, [r1]
        for(int j=0; j < tam; j++)
 8006998:	2300      	movs	r3, #0
 800699a:	4a08      	ldr	r2, [pc, #32]	@ (80069bc <ETS+0x854>)
 800699c:	443a      	add	r2, r7
 800699e:	6013      	str	r3, [r2, #0]
 80069a0:	e055      	b.n	8006a4e <ETS+0x8e6>
 80069a2:	bf00      	nop
 80069a4:	00029b04 	.word	0x00029b04
 80069a8:	00029b00 	.word	0x00029b00
 80069ac:	00013b18 	.word	0x00013b18
 80069b0:	00029afc 	.word	0x00029afc
 80069b4:	00016b18 	.word	0x00016b18
 80069b8:	00029af8 	.word	0x00029af8
 80069bc:	00029af4 	.word	0x00029af4
        {
            X[i] += mul_mat[i][j]*my_2[j];
 80069c0:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80069c4:	f6a3 2288 	subw	r2, r3, #2696	@ 0xa88
 80069c8:	4bb8      	ldr	r3, [pc, #736]	@ (8006cac <ETS+0xb44>)
 80069ca:	443b      	add	r3, r7
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	00db      	lsls	r3, r3, #3
 80069d0:	4413      	add	r3, r2
 80069d2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80069d6:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80069da:	f5a3 6124 	sub.w	r1, r3, #2624	@ 0xa40
 80069de:	4bb3      	ldr	r3, [pc, #716]	@ (8006cac <ETS+0xb44>)
 80069e0:	443b      	add	r3, r7
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	f44f 638b 	mov.w	r3, #1112	@ 0x458
 80069e8:	fb03 f202 	mul.w	r2, r3, r2
 80069ec:	4bb0      	ldr	r3, [pc, #704]	@ (8006cb0 <ETS+0xb48>)
 80069ee:	443b      	add	r3, r7
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4413      	add	r3, r2
 80069f4:	00db      	lsls	r3, r3, #3
 80069f6:	440b      	add	r3, r1
 80069f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80069fc:	4bad      	ldr	r3, [pc, #692]	@ (8006cb4 <ETS+0xb4c>)
 80069fe:	443b      	add	r3, r7
 8006a00:	f5a3 6247 	sub.w	r2, r3, #3184	@ 0xc70
 8006a04:	4baa      	ldr	r3, [pc, #680]	@ (8006cb0 <ETS+0xb48>)
 8006a06:	443b      	add	r3, r7
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	00db      	lsls	r3, r3, #3
 8006a0c:	4413      	add	r3, r2
 8006a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a12:	f7f9 fe11 	bl	8000638 <__aeabi_dmul>
 8006a16:	4602      	mov	r2, r0
 8006a18:	460b      	mov	r3, r1
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	4629      	mov	r1, r5
 8006a1e:	f7f9 fc55 	bl	80002cc <__adddf3>
 8006a22:	4602      	mov	r2, r0
 8006a24:	460b      	mov	r3, r1
 8006a26:	4610      	mov	r0, r2
 8006a28:	4619      	mov	r1, r3
 8006a2a:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006a2e:	f6a3 2288 	subw	r2, r3, #2696	@ 0xa88
 8006a32:	4b9e      	ldr	r3, [pc, #632]	@ (8006cac <ETS+0xb44>)
 8006a34:	443b      	add	r3, r7
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	00db      	lsls	r3, r3, #3
 8006a3a:	4413      	add	r3, r2
 8006a3c:	e9c3 0100 	strd	r0, r1, [r3]
        for(int j=0; j < tam; j++)
 8006a40:	4b9b      	ldr	r3, [pc, #620]	@ (8006cb0 <ETS+0xb48>)
 8006a42:	443b      	add	r3, r7
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	3301      	adds	r3, #1
 8006a48:	4a99      	ldr	r2, [pc, #612]	@ (8006cb0 <ETS+0xb48>)
 8006a4a:	443a      	add	r2, r7
 8006a4c:	6013      	str	r3, [r2, #0]
 8006a4e:	4b98      	ldr	r3, [pc, #608]	@ (8006cb0 <ETS+0xb48>)
 8006a50:	443b      	add	r3, r7
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8006a58:	dbb2      	blt.n	80069c0 <ETS+0x858>
    for(int i=0; i < N; i++)
 8006a5a:	4b94      	ldr	r3, [pc, #592]	@ (8006cac <ETS+0xb44>)
 8006a5c:	443b      	add	r3, r7
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	3301      	adds	r3, #1
 8006a62:	4a92      	ldr	r2, [pc, #584]	@ (8006cac <ETS+0xb44>)
 8006a64:	443a      	add	r2, r7
 8006a66:	6013      	str	r3, [r2, #0]
 8006a68:	4b90      	ldr	r3, [pc, #576]	@ (8006cac <ETS+0xb44>)
 8006a6a:	443b      	add	r3, r7
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2b08      	cmp	r3, #8
 8006a70:	dd83      	ble.n	800697a <ETS+0x812>
        }
    }


    // Segundo passo, encontrando os parâmetros
    X1_2 = X[1]*X[1];
 8006a72:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006a76:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006a7a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006a7e:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006a82:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006a86:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006a8a:	f7f9 fdd5 	bl	8000638 <__aeabi_dmul>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	460b      	mov	r3, r1
 8006a92:	4989      	ldr	r1, [pc, #548]	@ (8006cb8 <ETS+0xb50>)
 8006a94:	4439      	add	r1, r7
 8006a96:	e9c1 2300 	strd	r2, r3, [r1]
    X2_2 = X[2]*X[2];
 8006a9a:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006a9e:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006aa2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006aa6:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006aaa:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006aae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006ab2:	f7f9 fdc1 	bl	8000638 <__aeabi_dmul>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	460b      	mov	r3, r1
 8006aba:	4980      	ldr	r1, [pc, #512]	@ (8006cbc <ETS+0xb54>)
 8006abc:	4439      	add	r1, r7
 8006abe:	e9c1 2300 	strd	r2, r3, [r1]
    X3_2 = X[3]*X[3];
 8006ac2:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006ac6:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006aca:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8006ace:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006ad2:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006ad6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006ada:	f7f9 fdad 	bl	8000638 <__aeabi_dmul>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	4977      	ldr	r1, [pc, #476]	@ (8006cc0 <ETS+0xb58>)
 8006ae4:	4439      	add	r1, r7
 8006ae6:	e9c1 2300 	strd	r2, r3, [r1]
    X4_2 = X[4]*X[4];
 8006aea:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006aee:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006af2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8006af6:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006afa:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006afe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006b02:	f7f9 fd99 	bl	8000638 <__aeabi_dmul>
 8006b06:	4602      	mov	r2, r0
 8006b08:	460b      	mov	r3, r1
 8006b0a:	496e      	ldr	r1, [pc, #440]	@ (8006cc4 <ETS+0xb5c>)
 8006b0c:	4439      	add	r1, r7
 8006b0e:	e9c1 2300 	strd	r2, r3, [r1]
    X5_2 = X[5]*X[5];
 8006b12:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006b16:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006b1a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8006b1e:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006b22:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006b26:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8006b2a:	f7f9 fd85 	bl	8000638 <__aeabi_dmul>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	460b      	mov	r3, r1
 8006b32:	4965      	ldr	r1, [pc, #404]	@ (8006cc8 <ETS+0xb60>)
 8006b34:	4439      	add	r1, r7
 8006b36:	e9c1 2300 	strd	r2, r3, [r1]
    X6_2 = X[6]*X[6];
 8006b3a:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006b3e:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006b42:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8006b46:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006b4a:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006b4e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006b52:	f7f9 fd71 	bl	8000638 <__aeabi_dmul>
 8006b56:	4602      	mov	r2, r0
 8006b58:	460b      	mov	r3, r1
 8006b5a:	495c      	ldr	r1, [pc, #368]	@ (8006ccc <ETS+0xb64>)
 8006b5c:	4439      	add	r1, r7
 8006b5e:	e9c1 2300 	strd	r2, r3, [r1]
    X7_2 = X[7]*X[7];
 8006b62:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006b66:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006b6a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8006b6e:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006b72:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006b76:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006b7a:	f7f9 fd5d 	bl	8000638 <__aeabi_dmul>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	460b      	mov	r3, r1
 8006b82:	4953      	ldr	r1, [pc, #332]	@ (8006cd0 <ETS+0xb68>)
 8006b84:	4439      	add	r1, r7
 8006b86:	e9c1 2300 	strd	r2, r3, [r1]

    psi7 = 2*(X[4]*X1_2 - X[1]*X[2]*X[3] + X2_2 + X[0]*X3_2 - 4*X[0]*X[4]);
 8006b8a:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006b8e:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006b92:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8006b96:	4b48      	ldr	r3, [pc, #288]	@ (8006cb8 <ETS+0xb50>)
 8006b98:	443b      	add	r3, r7
 8006b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9e:	f7f9 fd4b 	bl	8000638 <__aeabi_dmul>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	4614      	mov	r4, r2
 8006ba8:	461d      	mov	r5, r3
 8006baa:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006bae:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006bb2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006bb6:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006bba:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006bbe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006bc2:	f7f9 fd39 	bl	8000638 <__aeabi_dmul>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	460b      	mov	r3, r1
 8006bca:	4610      	mov	r0, r2
 8006bcc:	4619      	mov	r1, r3
 8006bce:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006bd2:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006bd6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006bda:	f7f9 fd2d 	bl	8000638 <__aeabi_dmul>
 8006bde:	4602      	mov	r2, r0
 8006be0:	460b      	mov	r3, r1
 8006be2:	4620      	mov	r0, r4
 8006be4:	4629      	mov	r1, r5
 8006be6:	f7f9 fb6f 	bl	80002c8 <__aeabi_dsub>
 8006bea:	4602      	mov	r2, r0
 8006bec:	460b      	mov	r3, r1
 8006bee:	4610      	mov	r0, r2
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	4b32      	ldr	r3, [pc, #200]	@ (8006cbc <ETS+0xb54>)
 8006bf4:	443b      	add	r3, r7
 8006bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfa:	f7f9 fb67 	bl	80002cc <__adddf3>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	460b      	mov	r3, r1
 8006c02:	4614      	mov	r4, r2
 8006c04:	461d      	mov	r5, r3
 8006c06:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006c0a:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006c0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006c12:	4b2b      	ldr	r3, [pc, #172]	@ (8006cc0 <ETS+0xb58>)
 8006c14:	443b      	add	r3, r7
 8006c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1a:	f7f9 fd0d 	bl	8000638 <__aeabi_dmul>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	460b      	mov	r3, r1
 8006c22:	4620      	mov	r0, r4
 8006c24:	4629      	mov	r1, r5
 8006c26:	f7f9 fb51 	bl	80002cc <__adddf3>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	4614      	mov	r4, r2
 8006c30:	461d      	mov	r5, r3
 8006c32:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006c36:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006c3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006c3e:	f04f 0200 	mov.w	r2, #0
 8006c42:	4b24      	ldr	r3, [pc, #144]	@ (8006cd4 <ETS+0xb6c>)
 8006c44:	f7f9 fcf8 	bl	8000638 <__aeabi_dmul>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	4610      	mov	r0, r2
 8006c4e:	4619      	mov	r1, r3
 8006c50:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006c54:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006c58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c5c:	f7f9 fcec 	bl	8000638 <__aeabi_dmul>
 8006c60:	4602      	mov	r2, r0
 8006c62:	460b      	mov	r3, r1
 8006c64:	4620      	mov	r0, r4
 8006c66:	4629      	mov	r1, r5
 8006c68:	f7f9 fb2e 	bl	80002c8 <__aeabi_dsub>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	460b      	mov	r3, r1
 8006c70:	4610      	mov	r0, r2
 8006c72:	4619      	mov	r1, r3
 8006c74:	4602      	mov	r2, r0
 8006c76:	460b      	mov	r3, r1
 8006c78:	f7f9 fb28 	bl	80002cc <__adddf3>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	460b      	mov	r3, r1
 8006c80:	4915      	ldr	r1, [pc, #84]	@ (8006cd8 <ETS+0xb70>)
 8006c82:	4439      	add	r1, r7
 8006c84:	e9c1 2300 	strd	r2, r3, [r1]
    bx = -(X3_2 * X[5] + 2*X[2]*X[7] - 4*X[4]*X[5] - X[1]*X[3]*X[7] + 2*X[1]*X[4]*X[6] - X[2]*X[3]*X[6]) / psi7;
 8006c88:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006c8c:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006c90:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8006c94:	4b0a      	ldr	r3, [pc, #40]	@ (8006cc0 <ETS+0xb58>)
 8006c96:	443b      	add	r3, r7
 8006c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9c:	f7f9 fccc 	bl	8000638 <__aeabi_dmul>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	4614      	mov	r4, r2
 8006ca6:	461d      	mov	r5, r3
 8006ca8:	e018      	b.n	8006cdc <ETS+0xb74>
 8006caa:	bf00      	nop
 8006cac:	00029af8 	.word	0x00029af8
 8006cb0:	00029af4 	.word	0x00029af4
 8006cb4:	00014b18 	.word	0x00014b18
 8006cb8:	00029a58 	.word	0x00029a58
 8006cbc:	00029a50 	.word	0x00029a50
 8006cc0:	00029a48 	.word	0x00029a48
 8006cc4:	00029a40 	.word	0x00029a40
 8006cc8:	00029a38 	.word	0x00029a38
 8006ccc:	00029a30 	.word	0x00029a30
 8006cd0:	00029a28 	.word	0x00029a28
 8006cd4:	40100000 	.word	0x40100000
 8006cd8:	00029ae8 	.word	0x00029ae8
 8006cdc:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006ce0:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006ce4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006ce8:	4602      	mov	r2, r0
 8006cea:	460b      	mov	r3, r1
 8006cec:	f7f9 faee 	bl	80002cc <__adddf3>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	4610      	mov	r0, r2
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006cfc:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006d00:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006d04:	f7f9 fc98 	bl	8000638 <__aeabi_dmul>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	4629      	mov	r1, r5
 8006d10:	f7f9 fadc 	bl	80002cc <__adddf3>
 8006d14:	4602      	mov	r2, r0
 8006d16:	460b      	mov	r3, r1
 8006d18:	4614      	mov	r4, r2
 8006d1a:	461d      	mov	r5, r3
 8006d1c:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006d20:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006d24:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8006d28:	f04f 0200 	mov.w	r2, #0
 8006d2c:	4bd1      	ldr	r3, [pc, #836]	@ (8007074 <ETS+0xf0c>)
 8006d2e:	f7f9 fc83 	bl	8000638 <__aeabi_dmul>
 8006d32:	4602      	mov	r2, r0
 8006d34:	460b      	mov	r3, r1
 8006d36:	4610      	mov	r0, r2
 8006d38:	4619      	mov	r1, r3
 8006d3a:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006d3e:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006d42:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8006d46:	f7f9 fc77 	bl	8000638 <__aeabi_dmul>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	4620      	mov	r0, r4
 8006d50:	4629      	mov	r1, r5
 8006d52:	f7f9 fab9 	bl	80002c8 <__aeabi_dsub>
 8006d56:	4602      	mov	r2, r0
 8006d58:	460b      	mov	r3, r1
 8006d5a:	4614      	mov	r4, r2
 8006d5c:	461d      	mov	r5, r3
 8006d5e:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006d62:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006d66:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006d6a:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006d6e:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006d72:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006d76:	f7f9 fc5f 	bl	8000638 <__aeabi_dmul>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	4610      	mov	r0, r2
 8006d80:	4619      	mov	r1, r3
 8006d82:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006d86:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006d8a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006d8e:	f7f9 fc53 	bl	8000638 <__aeabi_dmul>
 8006d92:	4602      	mov	r2, r0
 8006d94:	460b      	mov	r3, r1
 8006d96:	4620      	mov	r0, r4
 8006d98:	4629      	mov	r1, r5
 8006d9a:	f7f9 fa95 	bl	80002c8 <__aeabi_dsub>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	460b      	mov	r3, r1
 8006da2:	4614      	mov	r4, r2
 8006da4:	461d      	mov	r5, r3
 8006da6:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006daa:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006dae:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006db2:	4602      	mov	r2, r0
 8006db4:	460b      	mov	r3, r1
 8006db6:	f7f9 fa89 	bl	80002cc <__adddf3>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	4610      	mov	r0, r2
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006dc6:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006dca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006dce:	f7f9 fc33 	bl	8000638 <__aeabi_dmul>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	4610      	mov	r0, r2
 8006dd8:	4619      	mov	r1, r3
 8006dda:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006dde:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006de2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006de6:	f7f9 fc27 	bl	8000638 <__aeabi_dmul>
 8006dea:	4602      	mov	r2, r0
 8006dec:	460b      	mov	r3, r1
 8006dee:	4620      	mov	r0, r4
 8006df0:	4629      	mov	r1, r5
 8006df2:	f7f9 fa6b 	bl	80002cc <__adddf3>
 8006df6:	4602      	mov	r2, r0
 8006df8:	460b      	mov	r3, r1
 8006dfa:	4614      	mov	r4, r2
 8006dfc:	461d      	mov	r5, r3
 8006dfe:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006e02:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006e06:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006e0a:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006e0e:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006e12:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006e16:	f7f9 fc0f 	bl	8000638 <__aeabi_dmul>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	4610      	mov	r0, r2
 8006e20:	4619      	mov	r1, r3
 8006e22:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006e26:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006e2a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006e2e:	f7f9 fc03 	bl	8000638 <__aeabi_dmul>
 8006e32:	4602      	mov	r2, r0
 8006e34:	460b      	mov	r3, r1
 8006e36:	4620      	mov	r0, r4
 8006e38:	4629      	mov	r1, r5
 8006e3a:	f7f9 fa45 	bl	80002c8 <__aeabi_dsub>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	460b      	mov	r3, r1
 8006e42:	67ba      	str	r2, [r7, #120]	@ 0x78
 8006e44:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8006e48:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e4a:	4b8b      	ldr	r3, [pc, #556]	@ (8007078 <ETS+0xf10>)
 8006e4c:	443b      	add	r3, r7
 8006e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e52:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8006e56:	f7f9 fd19 	bl	800088c <__aeabi_ddiv>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	4987      	ldr	r1, [pc, #540]	@ (800707c <ETS+0xf14>)
 8006e60:	4439      	add	r1, r7
 8006e62:	e9c1 2300 	strd	r2, r3, [r1]
    by = -(X2_2 * X[6] + 2*X[0]*X[3]*X[7] - 4*X[0]*X[4]*X[6] - X[1]*X[2]*X[7] + 2*X[1]*X[4]*X[5] - X[2]*X[3]*X[5]) / psi7;
 8006e66:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006e6a:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006e6e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8006e72:	4b83      	ldr	r3, [pc, #524]	@ (8007080 <ETS+0xf18>)
 8006e74:	443b      	add	r3, r7
 8006e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7a:	f7f9 fbdd 	bl	8000638 <__aeabi_dmul>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	460b      	mov	r3, r1
 8006e82:	4614      	mov	r4, r2
 8006e84:	461d      	mov	r5, r3
 8006e86:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006e8a:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006e8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006e92:	4602      	mov	r2, r0
 8006e94:	460b      	mov	r3, r1
 8006e96:	f7f9 fa19 	bl	80002cc <__adddf3>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	4610      	mov	r0, r2
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006ea6:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006eaa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006eae:	f7f9 fbc3 	bl	8000638 <__aeabi_dmul>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	4610      	mov	r0, r2
 8006eb8:	4619      	mov	r1, r3
 8006eba:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006ebe:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006ec2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006ec6:	f7f9 fbb7 	bl	8000638 <__aeabi_dmul>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	460b      	mov	r3, r1
 8006ece:	4620      	mov	r0, r4
 8006ed0:	4629      	mov	r1, r5
 8006ed2:	f7f9 f9fb 	bl	80002cc <__adddf3>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	460b      	mov	r3, r1
 8006eda:	4614      	mov	r4, r2
 8006edc:	461d      	mov	r5, r3
 8006ede:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006ee2:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006ee6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006eea:	f04f 0200 	mov.w	r2, #0
 8006eee:	4b61      	ldr	r3, [pc, #388]	@ (8007074 <ETS+0xf0c>)
 8006ef0:	f7f9 fba2 	bl	8000638 <__aeabi_dmul>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	4610      	mov	r0, r2
 8006efa:	4619      	mov	r1, r3
 8006efc:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006f00:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006f04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f08:	f7f9 fb96 	bl	8000638 <__aeabi_dmul>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	460b      	mov	r3, r1
 8006f10:	4610      	mov	r0, r2
 8006f12:	4619      	mov	r1, r3
 8006f14:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006f18:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006f1c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8006f20:	f7f9 fb8a 	bl	8000638 <__aeabi_dmul>
 8006f24:	4602      	mov	r2, r0
 8006f26:	460b      	mov	r3, r1
 8006f28:	4620      	mov	r0, r4
 8006f2a:	4629      	mov	r1, r5
 8006f2c:	f7f9 f9cc 	bl	80002c8 <__aeabi_dsub>
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	4614      	mov	r4, r2
 8006f36:	461d      	mov	r5, r3
 8006f38:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006f3c:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006f40:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006f44:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006f48:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006f4c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006f50:	f7f9 fb72 	bl	8000638 <__aeabi_dmul>
 8006f54:	4602      	mov	r2, r0
 8006f56:	460b      	mov	r3, r1
 8006f58:	4610      	mov	r0, r2
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006f60:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006f64:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006f68:	f7f9 fb66 	bl	8000638 <__aeabi_dmul>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	460b      	mov	r3, r1
 8006f70:	4620      	mov	r0, r4
 8006f72:	4629      	mov	r1, r5
 8006f74:	f7f9 f9a8 	bl	80002c8 <__aeabi_dsub>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	4614      	mov	r4, r2
 8006f7e:	461d      	mov	r5, r3
 8006f80:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006f84:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006f88:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	f7f9 f99c 	bl	80002cc <__adddf3>
 8006f94:	4602      	mov	r2, r0
 8006f96:	460b      	mov	r3, r1
 8006f98:	4610      	mov	r0, r2
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006fa0:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006fa4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006fa8:	f7f9 fb46 	bl	8000638 <__aeabi_dmul>
 8006fac:	4602      	mov	r2, r0
 8006fae:	460b      	mov	r3, r1
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006fb8:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006fbc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8006fc0:	f7f9 fb3a 	bl	8000638 <__aeabi_dmul>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	4620      	mov	r0, r4
 8006fca:	4629      	mov	r1, r5
 8006fcc:	f7f9 f97e 	bl	80002cc <__adddf3>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	4614      	mov	r4, r2
 8006fd6:	461d      	mov	r5, r3
 8006fd8:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006fdc:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006fe0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006fe4:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8006fe8:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8006fec:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006ff0:	f7f9 fb22 	bl	8000638 <__aeabi_dmul>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	4610      	mov	r0, r2
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007000:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007004:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8007008:	f7f9 fb16 	bl	8000638 <__aeabi_dmul>
 800700c:	4602      	mov	r2, r0
 800700e:	460b      	mov	r3, r1
 8007010:	4620      	mov	r0, r4
 8007012:	4629      	mov	r1, r5
 8007014:	f7f9 f958 	bl	80002c8 <__aeabi_dsub>
 8007018:	4602      	mov	r2, r0
 800701a:	460b      	mov	r3, r1
 800701c:	673a      	str	r2, [r7, #112]	@ 0x70
 800701e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007022:	677b      	str	r3, [r7, #116]	@ 0x74
 8007024:	4b14      	ldr	r3, [pc, #80]	@ (8007078 <ETS+0xf10>)
 8007026:	443b      	add	r3, r7
 8007028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8007030:	f7f9 fc2c 	bl	800088c <__aeabi_ddiv>
 8007034:	4602      	mov	r2, r0
 8007036:	460b      	mov	r3, r1
 8007038:	4912      	ldr	r1, [pc, #72]	@ (8007084 <ETS+0xf1c>)
 800703a:	4439      	add	r1, r7
 800703c:	e9c1 2300 	strd	r2, r3, [r1]
    bz = -(X1_2*X[7] - 4*X[0]*X[7] + 2*X[2]*X[5] + 2*X[0]*X[3]*X[6] - X[1]*X[2]*X[6] - X[1]*X[3]*X[5]) / psi7;
 8007040:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007044:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007048:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800704c:	4b0e      	ldr	r3, [pc, #56]	@ (8007088 <ETS+0xf20>)
 800704e:	443b      	add	r3, r7
 8007050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007054:	f7f9 faf0 	bl	8000638 <__aeabi_dmul>
 8007058:	4602      	mov	r2, r0
 800705a:	460b      	mov	r3, r1
 800705c:	4614      	mov	r4, r2
 800705e:	461d      	mov	r5, r3
 8007060:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007064:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007068:	e9d3 0100 	ldrd	r0, r1, [r3]
 800706c:	f04f 0200 	mov.w	r2, #0
 8007070:	e00c      	b.n	800708c <ETS+0xf24>
 8007072:	bf00      	nop
 8007074:	40100000 	.word	0x40100000
 8007078:	00029ae8 	.word	0x00029ae8
 800707c:	00029aa0 	.word	0x00029aa0
 8007080:	00029a50 	.word	0x00029a50
 8007084:	00029a98 	.word	0x00029a98
 8007088:	00029a58 	.word	0x00029a58
 800708c:	4bd3      	ldr	r3, [pc, #844]	@ (80073dc <ETS+0x1274>)
 800708e:	f7f9 fad3 	bl	8000638 <__aeabi_dmul>
 8007092:	4602      	mov	r2, r0
 8007094:	460b      	mov	r3, r1
 8007096:	4610      	mov	r0, r2
 8007098:	4619      	mov	r1, r3
 800709a:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800709e:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80070a2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80070a6:	f7f9 fac7 	bl	8000638 <__aeabi_dmul>
 80070aa:	4602      	mov	r2, r0
 80070ac:	460b      	mov	r3, r1
 80070ae:	4620      	mov	r0, r4
 80070b0:	4629      	mov	r1, r5
 80070b2:	f7f9 f909 	bl	80002c8 <__aeabi_dsub>
 80070b6:	4602      	mov	r2, r0
 80070b8:	460b      	mov	r3, r1
 80070ba:	4614      	mov	r4, r2
 80070bc:	461d      	mov	r5, r3
 80070be:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80070c2:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80070c6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80070ca:	4602      	mov	r2, r0
 80070cc:	460b      	mov	r3, r1
 80070ce:	f7f9 f8fd 	bl	80002cc <__adddf3>
 80070d2:	4602      	mov	r2, r0
 80070d4:	460b      	mov	r3, r1
 80070d6:	4610      	mov	r0, r2
 80070d8:	4619      	mov	r1, r3
 80070da:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80070de:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80070e2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80070e6:	f7f9 faa7 	bl	8000638 <__aeabi_dmul>
 80070ea:	4602      	mov	r2, r0
 80070ec:	460b      	mov	r3, r1
 80070ee:	4620      	mov	r0, r4
 80070f0:	4629      	mov	r1, r5
 80070f2:	f7f9 f8eb 	bl	80002cc <__adddf3>
 80070f6:	4602      	mov	r2, r0
 80070f8:	460b      	mov	r3, r1
 80070fa:	4614      	mov	r4, r2
 80070fc:	461d      	mov	r5, r3
 80070fe:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007102:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007106:	e9d3 0100 	ldrd	r0, r1, [r3]
 800710a:	4602      	mov	r2, r0
 800710c:	460b      	mov	r3, r1
 800710e:	f7f9 f8dd 	bl	80002cc <__adddf3>
 8007112:	4602      	mov	r2, r0
 8007114:	460b      	mov	r3, r1
 8007116:	4610      	mov	r0, r2
 8007118:	4619      	mov	r1, r3
 800711a:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800711e:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007122:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007126:	f7f9 fa87 	bl	8000638 <__aeabi_dmul>
 800712a:	4602      	mov	r2, r0
 800712c:	460b      	mov	r3, r1
 800712e:	4610      	mov	r0, r2
 8007130:	4619      	mov	r1, r3
 8007132:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007136:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 800713a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800713e:	f7f9 fa7b 	bl	8000638 <__aeabi_dmul>
 8007142:	4602      	mov	r2, r0
 8007144:	460b      	mov	r3, r1
 8007146:	4620      	mov	r0, r4
 8007148:	4629      	mov	r1, r5
 800714a:	f7f9 f8bf 	bl	80002cc <__adddf3>
 800714e:	4602      	mov	r2, r0
 8007150:	460b      	mov	r3, r1
 8007152:	4614      	mov	r4, r2
 8007154:	461d      	mov	r5, r3
 8007156:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800715a:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 800715e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007162:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007166:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 800716a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800716e:	f7f9 fa63 	bl	8000638 <__aeabi_dmul>
 8007172:	4602      	mov	r2, r0
 8007174:	460b      	mov	r3, r1
 8007176:	4610      	mov	r0, r2
 8007178:	4619      	mov	r1, r3
 800717a:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800717e:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007182:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8007186:	f7f9 fa57 	bl	8000638 <__aeabi_dmul>
 800718a:	4602      	mov	r2, r0
 800718c:	460b      	mov	r3, r1
 800718e:	4620      	mov	r0, r4
 8007190:	4629      	mov	r1, r5
 8007192:	f7f9 f899 	bl	80002c8 <__aeabi_dsub>
 8007196:	4602      	mov	r2, r0
 8007198:	460b      	mov	r3, r1
 800719a:	4614      	mov	r4, r2
 800719c:	461d      	mov	r5, r3
 800719e:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80071a2:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80071a6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80071aa:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80071ae:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80071b2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80071b6:	f7f9 fa3f 	bl	8000638 <__aeabi_dmul>
 80071ba:	4602      	mov	r2, r0
 80071bc:	460b      	mov	r3, r1
 80071be:	4610      	mov	r0, r2
 80071c0:	4619      	mov	r1, r3
 80071c2:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80071c6:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80071ca:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80071ce:	f7f9 fa33 	bl	8000638 <__aeabi_dmul>
 80071d2:	4602      	mov	r2, r0
 80071d4:	460b      	mov	r3, r1
 80071d6:	4620      	mov	r0, r4
 80071d8:	4629      	mov	r1, r5
 80071da:	f7f9 f875 	bl	80002c8 <__aeabi_dsub>
 80071de:	4602      	mov	r2, r0
 80071e0:	460b      	mov	r3, r1
 80071e2:	66ba      	str	r2, [r7, #104]	@ 0x68
 80071e4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80071e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80071ea:	4b7d      	ldr	r3, [pc, #500]	@ (80073e0 <ETS+0x1278>)
 80071ec:	443b      	add	r3, r7
 80071ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80071f6:	f7f9 fb49 	bl	800088c <__aeabi_ddiv>
 80071fa:	4602      	mov	r2, r0
 80071fc:	460b      	mov	r3, r1
 80071fe:	4979      	ldr	r1, [pc, #484]	@ (80073e4 <ETS+0x127c>)
 8007200:	4439      	add	r1, r7
 8007202:	e9c1 2300 	strd	r2, r3, [r1]

    psi8 = -X1_2*X7_2 + 4*X[4]*X[8]*X1_2 - 4*X[8]*X[1]*X[2]*X[3] + 2*X[1]*X[2]*X[6]*X[7] + 2*X[1]*X[3]*X[5]*X[7] - 4*X[4]*X[1]*X[5]*X[6] - X2_2*X6_2 + 4*X[8]*X2_2 + 2*X[2]*X[3]*X[5]*X[6] - 4*X[2]*X[5]*X[7] - X3_2*X5_2 + 4*X[0]*X[8]*X3_2 + 4*X[4]*X5_2 + 4*X[0]*X[4]*X6_2 + 4*X[0]*X7_2 - 16*X[0]*X[4]*X[8] - 4*X[0]*X[3]*X[6]*X[7];
 8007206:	4b78      	ldr	r3, [pc, #480]	@ (80073e8 <ETS+0x1280>)
 8007208:	443b      	add	r3, r7
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	663b      	str	r3, [r7, #96]	@ 0x60
 800720e:	4b77      	ldr	r3, [pc, #476]	@ (80073ec <ETS+0x1284>)
 8007210:	443b      	add	r3, r7
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007218:	667b      	str	r3, [r7, #100]	@ 0x64
 800721a:	4b75      	ldr	r3, [pc, #468]	@ (80073f0 <ETS+0x1288>)
 800721c:	443b      	add	r3, r7
 800721e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007222:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8007226:	f7f9 fa07 	bl	8000638 <__aeabi_dmul>
 800722a:	4602      	mov	r2, r0
 800722c:	460b      	mov	r3, r1
 800722e:	4614      	mov	r4, r2
 8007230:	461d      	mov	r5, r3
 8007232:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007236:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 800723a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800723e:	f04f 0200 	mov.w	r2, #0
 8007242:	4b66      	ldr	r3, [pc, #408]	@ (80073dc <ETS+0x1274>)
 8007244:	f7f9 f9f8 	bl	8000638 <__aeabi_dmul>
 8007248:	4602      	mov	r2, r0
 800724a:	460b      	mov	r3, r1
 800724c:	4610      	mov	r0, r2
 800724e:	4619      	mov	r1, r3
 8007250:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007254:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007258:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800725c:	f7f9 f9ec 	bl	8000638 <__aeabi_dmul>
 8007260:	4602      	mov	r2, r0
 8007262:	460b      	mov	r3, r1
 8007264:	4610      	mov	r0, r2
 8007266:	4619      	mov	r1, r3
 8007268:	4b5f      	ldr	r3, [pc, #380]	@ (80073e8 <ETS+0x1280>)
 800726a:	443b      	add	r3, r7
 800726c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007270:	f7f9 f9e2 	bl	8000638 <__aeabi_dmul>
 8007274:	4602      	mov	r2, r0
 8007276:	460b      	mov	r3, r1
 8007278:	4620      	mov	r0, r4
 800727a:	4629      	mov	r1, r5
 800727c:	f7f9 f826 	bl	80002cc <__adddf3>
 8007280:	4602      	mov	r2, r0
 8007282:	460b      	mov	r3, r1
 8007284:	4614      	mov	r4, r2
 8007286:	461d      	mov	r5, r3
 8007288:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800728c:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007290:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8007294:	f04f 0200 	mov.w	r2, #0
 8007298:	4b50      	ldr	r3, [pc, #320]	@ (80073dc <ETS+0x1274>)
 800729a:	f7f9 f9cd 	bl	8000638 <__aeabi_dmul>
 800729e:	4602      	mov	r2, r0
 80072a0:	460b      	mov	r3, r1
 80072a2:	4610      	mov	r0, r2
 80072a4:	4619      	mov	r1, r3
 80072a6:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80072aa:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80072ae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80072b2:	f7f9 f9c1 	bl	8000638 <__aeabi_dmul>
 80072b6:	4602      	mov	r2, r0
 80072b8:	460b      	mov	r3, r1
 80072ba:	4610      	mov	r0, r2
 80072bc:	4619      	mov	r1, r3
 80072be:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80072c2:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80072c6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80072ca:	f7f9 f9b5 	bl	8000638 <__aeabi_dmul>
 80072ce:	4602      	mov	r2, r0
 80072d0:	460b      	mov	r3, r1
 80072d2:	4610      	mov	r0, r2
 80072d4:	4619      	mov	r1, r3
 80072d6:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80072da:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80072de:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80072e2:	f7f9 f9a9 	bl	8000638 <__aeabi_dmul>
 80072e6:	4602      	mov	r2, r0
 80072e8:	460b      	mov	r3, r1
 80072ea:	4620      	mov	r0, r4
 80072ec:	4629      	mov	r1, r5
 80072ee:	f7f8 ffeb 	bl	80002c8 <__aeabi_dsub>
 80072f2:	4602      	mov	r2, r0
 80072f4:	460b      	mov	r3, r1
 80072f6:	4614      	mov	r4, r2
 80072f8:	461d      	mov	r5, r3
 80072fa:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80072fe:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007302:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007306:	4602      	mov	r2, r0
 8007308:	460b      	mov	r3, r1
 800730a:	f7f8 ffdf 	bl	80002cc <__adddf3>
 800730e:	4602      	mov	r2, r0
 8007310:	460b      	mov	r3, r1
 8007312:	4610      	mov	r0, r2
 8007314:	4619      	mov	r1, r3
 8007316:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800731a:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 800731e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007322:	f7f9 f989 	bl	8000638 <__aeabi_dmul>
 8007326:	4602      	mov	r2, r0
 8007328:	460b      	mov	r3, r1
 800732a:	4610      	mov	r0, r2
 800732c:	4619      	mov	r1, r3
 800732e:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007332:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007336:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800733a:	f7f9 f97d 	bl	8000638 <__aeabi_dmul>
 800733e:	4602      	mov	r2, r0
 8007340:	460b      	mov	r3, r1
 8007342:	4610      	mov	r0, r2
 8007344:	4619      	mov	r1, r3
 8007346:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800734a:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 800734e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007352:	f7f9 f971 	bl	8000638 <__aeabi_dmul>
 8007356:	4602      	mov	r2, r0
 8007358:	460b      	mov	r3, r1
 800735a:	4620      	mov	r0, r4
 800735c:	4629      	mov	r1, r5
 800735e:	f7f8 ffb5 	bl	80002cc <__adddf3>
 8007362:	4602      	mov	r2, r0
 8007364:	460b      	mov	r3, r1
 8007366:	4614      	mov	r4, r2
 8007368:	461d      	mov	r5, r3
 800736a:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800736e:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007372:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007376:	4602      	mov	r2, r0
 8007378:	460b      	mov	r3, r1
 800737a:	f7f8 ffa7 	bl	80002cc <__adddf3>
 800737e:	4602      	mov	r2, r0
 8007380:	460b      	mov	r3, r1
 8007382:	4610      	mov	r0, r2
 8007384:	4619      	mov	r1, r3
 8007386:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800738a:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 800738e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007392:	f7f9 f951 	bl	8000638 <__aeabi_dmul>
 8007396:	4602      	mov	r2, r0
 8007398:	460b      	mov	r3, r1
 800739a:	4610      	mov	r0, r2
 800739c:	4619      	mov	r1, r3
 800739e:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80073a2:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80073a6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80073aa:	f7f9 f945 	bl	8000638 <__aeabi_dmul>
 80073ae:	4602      	mov	r2, r0
 80073b0:	460b      	mov	r3, r1
 80073b2:	4610      	mov	r0, r2
 80073b4:	4619      	mov	r1, r3
 80073b6:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80073ba:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80073be:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80073c2:	f7f9 f939 	bl	8000638 <__aeabi_dmul>
 80073c6:	4602      	mov	r2, r0
 80073c8:	460b      	mov	r3, r1
 80073ca:	4620      	mov	r0, r4
 80073cc:	4629      	mov	r1, r5
 80073ce:	f7f8 ff7d 	bl	80002cc <__adddf3>
 80073d2:	4602      	mov	r2, r0
 80073d4:	460b      	mov	r3, r1
 80073d6:	4614      	mov	r4, r2
 80073d8:	461d      	mov	r5, r3
 80073da:	e00b      	b.n	80073f4 <ETS+0x128c>
 80073dc:	40100000 	.word	0x40100000
 80073e0:	00029ae8 	.word	0x00029ae8
 80073e4:	00029a90 	.word	0x00029a90
 80073e8:	00029a58 	.word	0x00029a58
 80073ec:	00029a5c 	.word	0x00029a5c
 80073f0:	00029a28 	.word	0x00029a28
 80073f4:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80073f8:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80073fc:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007400:	f04f 0200 	mov.w	r2, #0
 8007404:	4bd3      	ldr	r3, [pc, #844]	@ (8007754 <ETS+0x15ec>)
 8007406:	f7f9 f917 	bl	8000638 <__aeabi_dmul>
 800740a:	4602      	mov	r2, r0
 800740c:	460b      	mov	r3, r1
 800740e:	4610      	mov	r0, r2
 8007410:	4619      	mov	r1, r3
 8007412:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007416:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 800741a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800741e:	f7f9 f90b 	bl	8000638 <__aeabi_dmul>
 8007422:	4602      	mov	r2, r0
 8007424:	460b      	mov	r3, r1
 8007426:	4610      	mov	r0, r2
 8007428:	4619      	mov	r1, r3
 800742a:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800742e:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007432:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8007436:	f7f9 f8ff 	bl	8000638 <__aeabi_dmul>
 800743a:	4602      	mov	r2, r0
 800743c:	460b      	mov	r3, r1
 800743e:	4610      	mov	r0, r2
 8007440:	4619      	mov	r1, r3
 8007442:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007446:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 800744a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800744e:	f7f9 f8f3 	bl	8000638 <__aeabi_dmul>
 8007452:	4602      	mov	r2, r0
 8007454:	460b      	mov	r3, r1
 8007456:	4620      	mov	r0, r4
 8007458:	4629      	mov	r1, r5
 800745a:	f7f8 ff35 	bl	80002c8 <__aeabi_dsub>
 800745e:	4602      	mov	r2, r0
 8007460:	460b      	mov	r3, r1
 8007462:	4614      	mov	r4, r2
 8007464:	461d      	mov	r5, r3
 8007466:	4bbc      	ldr	r3, [pc, #752]	@ (8007758 <ETS+0x15f0>)
 8007468:	443b      	add	r3, r7
 800746a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746e:	49bb      	ldr	r1, [pc, #748]	@ (800775c <ETS+0x15f4>)
 8007470:	4439      	add	r1, r7
 8007472:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007476:	f7f9 f8df 	bl	8000638 <__aeabi_dmul>
 800747a:	4602      	mov	r2, r0
 800747c:	460b      	mov	r3, r1
 800747e:	4620      	mov	r0, r4
 8007480:	4629      	mov	r1, r5
 8007482:	f7f8 ff21 	bl	80002c8 <__aeabi_dsub>
 8007486:	4602      	mov	r2, r0
 8007488:	460b      	mov	r3, r1
 800748a:	4614      	mov	r4, r2
 800748c:	461d      	mov	r5, r3
 800748e:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007492:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007496:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800749a:	f04f 0200 	mov.w	r2, #0
 800749e:	4bad      	ldr	r3, [pc, #692]	@ (8007754 <ETS+0x15ec>)
 80074a0:	f7f9 f8ca 	bl	8000638 <__aeabi_dmul>
 80074a4:	4602      	mov	r2, r0
 80074a6:	460b      	mov	r3, r1
 80074a8:	4610      	mov	r0, r2
 80074aa:	4619      	mov	r1, r3
 80074ac:	4bab      	ldr	r3, [pc, #684]	@ (800775c <ETS+0x15f4>)
 80074ae:	443b      	add	r3, r7
 80074b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b4:	f7f9 f8c0 	bl	8000638 <__aeabi_dmul>
 80074b8:	4602      	mov	r2, r0
 80074ba:	460b      	mov	r3, r1
 80074bc:	4620      	mov	r0, r4
 80074be:	4629      	mov	r1, r5
 80074c0:	f7f8 ff04 	bl	80002cc <__adddf3>
 80074c4:	4602      	mov	r2, r0
 80074c6:	460b      	mov	r3, r1
 80074c8:	4614      	mov	r4, r2
 80074ca:	461d      	mov	r5, r3
 80074cc:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80074d0:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80074d4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80074d8:	4602      	mov	r2, r0
 80074da:	460b      	mov	r3, r1
 80074dc:	f7f8 fef6 	bl	80002cc <__adddf3>
 80074e0:	4602      	mov	r2, r0
 80074e2:	460b      	mov	r3, r1
 80074e4:	4610      	mov	r0, r2
 80074e6:	4619      	mov	r1, r3
 80074e8:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80074ec:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80074f0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80074f4:	f7f9 f8a0 	bl	8000638 <__aeabi_dmul>
 80074f8:	4602      	mov	r2, r0
 80074fa:	460b      	mov	r3, r1
 80074fc:	4610      	mov	r0, r2
 80074fe:	4619      	mov	r1, r3
 8007500:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007504:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007508:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800750c:	f7f9 f894 	bl	8000638 <__aeabi_dmul>
 8007510:	4602      	mov	r2, r0
 8007512:	460b      	mov	r3, r1
 8007514:	4610      	mov	r0, r2
 8007516:	4619      	mov	r1, r3
 8007518:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800751c:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007520:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8007524:	f7f9 f888 	bl	8000638 <__aeabi_dmul>
 8007528:	4602      	mov	r2, r0
 800752a:	460b      	mov	r3, r1
 800752c:	4620      	mov	r0, r4
 800752e:	4629      	mov	r1, r5
 8007530:	f7f8 fecc 	bl	80002cc <__adddf3>
 8007534:	4602      	mov	r2, r0
 8007536:	460b      	mov	r3, r1
 8007538:	4614      	mov	r4, r2
 800753a:	461d      	mov	r5, r3
 800753c:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007540:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007544:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007548:	f04f 0200 	mov.w	r2, #0
 800754c:	4b81      	ldr	r3, [pc, #516]	@ (8007754 <ETS+0x15ec>)
 800754e:	f7f9 f873 	bl	8000638 <__aeabi_dmul>
 8007552:	4602      	mov	r2, r0
 8007554:	460b      	mov	r3, r1
 8007556:	4610      	mov	r0, r2
 8007558:	4619      	mov	r1, r3
 800755a:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800755e:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007562:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8007566:	f7f9 f867 	bl	8000638 <__aeabi_dmul>
 800756a:	4602      	mov	r2, r0
 800756c:	460b      	mov	r3, r1
 800756e:	4610      	mov	r0, r2
 8007570:	4619      	mov	r1, r3
 8007572:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007576:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 800757a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800757e:	f7f9 f85b 	bl	8000638 <__aeabi_dmul>
 8007582:	4602      	mov	r2, r0
 8007584:	460b      	mov	r3, r1
 8007586:	4620      	mov	r0, r4
 8007588:	4629      	mov	r1, r5
 800758a:	f7f8 fe9d 	bl	80002c8 <__aeabi_dsub>
 800758e:	4602      	mov	r2, r0
 8007590:	460b      	mov	r3, r1
 8007592:	4614      	mov	r4, r2
 8007594:	461d      	mov	r5, r3
 8007596:	4b72      	ldr	r3, [pc, #456]	@ (8007760 <ETS+0x15f8>)
 8007598:	443b      	add	r3, r7
 800759a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759e:	4971      	ldr	r1, [pc, #452]	@ (8007764 <ETS+0x15fc>)
 80075a0:	4439      	add	r1, r7
 80075a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075a6:	f7f9 f847 	bl	8000638 <__aeabi_dmul>
 80075aa:	4602      	mov	r2, r0
 80075ac:	460b      	mov	r3, r1
 80075ae:	4620      	mov	r0, r4
 80075b0:	4629      	mov	r1, r5
 80075b2:	f7f8 fe89 	bl	80002c8 <__aeabi_dsub>
 80075b6:	4602      	mov	r2, r0
 80075b8:	460b      	mov	r3, r1
 80075ba:	4614      	mov	r4, r2
 80075bc:	461d      	mov	r5, r3
 80075be:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80075c2:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80075c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80075ca:	f04f 0200 	mov.w	r2, #0
 80075ce:	4b61      	ldr	r3, [pc, #388]	@ (8007754 <ETS+0x15ec>)
 80075d0:	f7f9 f832 	bl	8000638 <__aeabi_dmul>
 80075d4:	4602      	mov	r2, r0
 80075d6:	460b      	mov	r3, r1
 80075d8:	4610      	mov	r0, r2
 80075da:	4619      	mov	r1, r3
 80075dc:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80075e0:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80075e4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80075e8:	f7f9 f826 	bl	8000638 <__aeabi_dmul>
 80075ec:	4602      	mov	r2, r0
 80075ee:	460b      	mov	r3, r1
 80075f0:	4610      	mov	r0, r2
 80075f2:	4619      	mov	r1, r3
 80075f4:	4b5b      	ldr	r3, [pc, #364]	@ (8007764 <ETS+0x15fc>)
 80075f6:	443b      	add	r3, r7
 80075f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fc:	f7f9 f81c 	bl	8000638 <__aeabi_dmul>
 8007600:	4602      	mov	r2, r0
 8007602:	460b      	mov	r3, r1
 8007604:	4620      	mov	r0, r4
 8007606:	4629      	mov	r1, r5
 8007608:	f7f8 fe60 	bl	80002cc <__adddf3>
 800760c:	4602      	mov	r2, r0
 800760e:	460b      	mov	r3, r1
 8007610:	4614      	mov	r4, r2
 8007612:	461d      	mov	r5, r3
 8007614:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007618:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 800761c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007620:	f04f 0200 	mov.w	r2, #0
 8007624:	4b4b      	ldr	r3, [pc, #300]	@ (8007754 <ETS+0x15ec>)
 8007626:	f7f9 f807 	bl	8000638 <__aeabi_dmul>
 800762a:	4602      	mov	r2, r0
 800762c:	460b      	mov	r3, r1
 800762e:	4610      	mov	r0, r2
 8007630:	4619      	mov	r1, r3
 8007632:	4b4b      	ldr	r3, [pc, #300]	@ (8007760 <ETS+0x15f8>)
 8007634:	443b      	add	r3, r7
 8007636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763a:	f7f8 fffd 	bl	8000638 <__aeabi_dmul>
 800763e:	4602      	mov	r2, r0
 8007640:	460b      	mov	r3, r1
 8007642:	4620      	mov	r0, r4
 8007644:	4629      	mov	r1, r5
 8007646:	f7f8 fe41 	bl	80002cc <__adddf3>
 800764a:	4602      	mov	r2, r0
 800764c:	460b      	mov	r3, r1
 800764e:	4614      	mov	r4, r2
 8007650:	461d      	mov	r5, r3
 8007652:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007656:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 800765a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800765e:	f04f 0200 	mov.w	r2, #0
 8007662:	4b3c      	ldr	r3, [pc, #240]	@ (8007754 <ETS+0x15ec>)
 8007664:	f7f8 ffe8 	bl	8000638 <__aeabi_dmul>
 8007668:	4602      	mov	r2, r0
 800766a:	460b      	mov	r3, r1
 800766c:	4610      	mov	r0, r2
 800766e:	4619      	mov	r1, r3
 8007670:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007674:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007678:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800767c:	f7f8 ffdc 	bl	8000638 <__aeabi_dmul>
 8007680:	4602      	mov	r2, r0
 8007682:	460b      	mov	r3, r1
 8007684:	4610      	mov	r0, r2
 8007686:	4619      	mov	r1, r3
 8007688:	4b33      	ldr	r3, [pc, #204]	@ (8007758 <ETS+0x15f0>)
 800768a:	443b      	add	r3, r7
 800768c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007690:	f7f8 ffd2 	bl	8000638 <__aeabi_dmul>
 8007694:	4602      	mov	r2, r0
 8007696:	460b      	mov	r3, r1
 8007698:	4620      	mov	r0, r4
 800769a:	4629      	mov	r1, r5
 800769c:	f7f8 fe16 	bl	80002cc <__adddf3>
 80076a0:	4602      	mov	r2, r0
 80076a2:	460b      	mov	r3, r1
 80076a4:	4614      	mov	r4, r2
 80076a6:	461d      	mov	r5, r3
 80076a8:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80076ac:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80076b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80076b4:	f04f 0200 	mov.w	r2, #0
 80076b8:	4b26      	ldr	r3, [pc, #152]	@ (8007754 <ETS+0x15ec>)
 80076ba:	f7f8 ffbd 	bl	8000638 <__aeabi_dmul>
 80076be:	4602      	mov	r2, r0
 80076c0:	460b      	mov	r3, r1
 80076c2:	4610      	mov	r0, r2
 80076c4:	4619      	mov	r1, r3
 80076c6:	4b28      	ldr	r3, [pc, #160]	@ (8007768 <ETS+0x1600>)
 80076c8:	443b      	add	r3, r7
 80076ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ce:	f7f8 ffb3 	bl	8000638 <__aeabi_dmul>
 80076d2:	4602      	mov	r2, r0
 80076d4:	460b      	mov	r3, r1
 80076d6:	4620      	mov	r0, r4
 80076d8:	4629      	mov	r1, r5
 80076da:	f7f8 fdf7 	bl	80002cc <__adddf3>
 80076de:	4602      	mov	r2, r0
 80076e0:	460b      	mov	r3, r1
 80076e2:	4614      	mov	r4, r2
 80076e4:	461d      	mov	r5, r3
 80076e6:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80076ea:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80076ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80076f2:	f04f 0200 	mov.w	r2, #0
 80076f6:	4b1d      	ldr	r3, [pc, #116]	@ (800776c <ETS+0x1604>)
 80076f8:	f7f8 ff9e 	bl	8000638 <__aeabi_dmul>
 80076fc:	4602      	mov	r2, r0
 80076fe:	460b      	mov	r3, r1
 8007700:	4610      	mov	r0, r2
 8007702:	4619      	mov	r1, r3
 8007704:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007708:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 800770c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007710:	f7f8 ff92 	bl	8000638 <__aeabi_dmul>
 8007714:	4602      	mov	r2, r0
 8007716:	460b      	mov	r3, r1
 8007718:	4610      	mov	r0, r2
 800771a:	4619      	mov	r1, r3
 800771c:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007720:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007724:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8007728:	f7f8 ff86 	bl	8000638 <__aeabi_dmul>
 800772c:	4602      	mov	r2, r0
 800772e:	460b      	mov	r3, r1
 8007730:	4620      	mov	r0, r4
 8007732:	4629      	mov	r1, r5
 8007734:	f7f8 fdc8 	bl	80002c8 <__aeabi_dsub>
 8007738:	4602      	mov	r2, r0
 800773a:	460b      	mov	r3, r1
 800773c:	4614      	mov	r4, r2
 800773e:	461d      	mov	r5, r3
 8007740:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007744:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007748:	e9d3 0100 	ldrd	r0, r1, [r3]
 800774c:	f04f 0200 	mov.w	r2, #0
 8007750:	e00e      	b.n	8007770 <ETS+0x1608>
 8007752:	bf00      	nop
 8007754:	40100000 	.word	0x40100000
 8007758:	00029a30 	.word	0x00029a30
 800775c:	00029a50 	.word	0x00029a50
 8007760:	00029a38 	.word	0x00029a38
 8007764:	00029a48 	.word	0x00029a48
 8007768:	00029a28 	.word	0x00029a28
 800776c:	40300000 	.word	0x40300000
 8007770:	4bc5      	ldr	r3, [pc, #788]	@ (8007a88 <ETS+0x1920>)
 8007772:	f7f8 ff61 	bl	8000638 <__aeabi_dmul>
 8007776:	4602      	mov	r2, r0
 8007778:	460b      	mov	r3, r1
 800777a:	4610      	mov	r0, r2
 800777c:	4619      	mov	r1, r3
 800777e:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007782:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007786:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800778a:	f7f8 ff55 	bl	8000638 <__aeabi_dmul>
 800778e:	4602      	mov	r2, r0
 8007790:	460b      	mov	r3, r1
 8007792:	4610      	mov	r0, r2
 8007794:	4619      	mov	r1, r3
 8007796:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800779a:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 800779e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80077a2:	f7f8 ff49 	bl	8000638 <__aeabi_dmul>
 80077a6:	4602      	mov	r2, r0
 80077a8:	460b      	mov	r3, r1
 80077aa:	4610      	mov	r0, r2
 80077ac:	4619      	mov	r1, r3
 80077ae:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80077b2:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80077b6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80077ba:	f7f8 ff3d 	bl	8000638 <__aeabi_dmul>
 80077be:	4602      	mov	r2, r0
 80077c0:	460b      	mov	r3, r1
 80077c2:	4620      	mov	r0, r4
 80077c4:	4629      	mov	r1, r5
 80077c6:	f7f8 fd7f 	bl	80002c8 <__aeabi_dsub>
 80077ca:	4602      	mov	r2, r0
 80077cc:	460b      	mov	r3, r1
 80077ce:	49af      	ldr	r1, [pc, #700]	@ (8007a8c <ETS+0x1924>)
 80077d0:	4439      	add	r1, r7
 80077d2:	e9c1 2300 	strd	r2, r3, [r1]

    divs =  2 * fabs(X[4])*fabs(X[4])*fabs(X[4]) * (X[4] * X1_2 - X[1] * X[2] * X[3] + X2_2 + X[0] * X3_2 - 4 * X[0] * X[4]);
 80077d6:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80077da:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80077de:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80077e2:	4692      	mov	sl, r2
 80077e4:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 80077e8:	4652      	mov	r2, sl
 80077ea:	465b      	mov	r3, fp
 80077ec:	4650      	mov	r0, sl
 80077ee:	4659      	mov	r1, fp
 80077f0:	f7f8 fd6c 	bl	80002cc <__adddf3>
 80077f4:	4602      	mov	r2, r0
 80077f6:	460b      	mov	r3, r1
 80077f8:	4610      	mov	r0, r2
 80077fa:	4619      	mov	r1, r3
 80077fc:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007800:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007804:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007808:	65ba      	str	r2, [r7, #88]	@ 0x58
 800780a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800780e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007810:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007814:	f7f8 ff10 	bl	8000638 <__aeabi_dmul>
 8007818:	4602      	mov	r2, r0
 800781a:	460b      	mov	r3, r1
 800781c:	4610      	mov	r0, r2
 800781e:	4619      	mov	r1, r3
 8007820:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007824:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007828:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800782c:	653a      	str	r2, [r7, #80]	@ 0x50
 800782e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007832:	657b      	str	r3, [r7, #84]	@ 0x54
 8007834:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007838:	f7f8 fefe 	bl	8000638 <__aeabi_dmul>
 800783c:	4602      	mov	r2, r0
 800783e:	460b      	mov	r3, r1
 8007840:	4690      	mov	r8, r2
 8007842:	4699      	mov	r9, r3
 8007844:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007848:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 800784c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007850:	4b8f      	ldr	r3, [pc, #572]	@ (8007a90 <ETS+0x1928>)
 8007852:	443b      	add	r3, r7
 8007854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007858:	f7f8 feee 	bl	8000638 <__aeabi_dmul>
 800785c:	4602      	mov	r2, r0
 800785e:	460b      	mov	r3, r1
 8007860:	4614      	mov	r4, r2
 8007862:	461d      	mov	r5, r3
 8007864:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007868:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 800786c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007870:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007874:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007878:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800787c:	f7f8 fedc 	bl	8000638 <__aeabi_dmul>
 8007880:	4602      	mov	r2, r0
 8007882:	460b      	mov	r3, r1
 8007884:	4610      	mov	r0, r2
 8007886:	4619      	mov	r1, r3
 8007888:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800788c:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007890:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007894:	f7f8 fed0 	bl	8000638 <__aeabi_dmul>
 8007898:	4602      	mov	r2, r0
 800789a:	460b      	mov	r3, r1
 800789c:	4620      	mov	r0, r4
 800789e:	4629      	mov	r1, r5
 80078a0:	f7f8 fd12 	bl	80002c8 <__aeabi_dsub>
 80078a4:	4602      	mov	r2, r0
 80078a6:	460b      	mov	r3, r1
 80078a8:	4610      	mov	r0, r2
 80078aa:	4619      	mov	r1, r3
 80078ac:	4b79      	ldr	r3, [pc, #484]	@ (8007a94 <ETS+0x192c>)
 80078ae:	443b      	add	r3, r7
 80078b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b4:	f7f8 fd0a 	bl	80002cc <__adddf3>
 80078b8:	4602      	mov	r2, r0
 80078ba:	460b      	mov	r3, r1
 80078bc:	4614      	mov	r4, r2
 80078be:	461d      	mov	r5, r3
 80078c0:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80078c4:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80078c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80078cc:	4b72      	ldr	r3, [pc, #456]	@ (8007a98 <ETS+0x1930>)
 80078ce:	443b      	add	r3, r7
 80078d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d4:	f7f8 feb0 	bl	8000638 <__aeabi_dmul>
 80078d8:	4602      	mov	r2, r0
 80078da:	460b      	mov	r3, r1
 80078dc:	4620      	mov	r0, r4
 80078de:	4629      	mov	r1, r5
 80078e0:	f7f8 fcf4 	bl	80002cc <__adddf3>
 80078e4:	4602      	mov	r2, r0
 80078e6:	460b      	mov	r3, r1
 80078e8:	4614      	mov	r4, r2
 80078ea:	461d      	mov	r5, r3
 80078ec:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80078f0:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80078f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80078f8:	f04f 0200 	mov.w	r2, #0
 80078fc:	4b62      	ldr	r3, [pc, #392]	@ (8007a88 <ETS+0x1920>)
 80078fe:	f7f8 fe9b 	bl	8000638 <__aeabi_dmul>
 8007902:	4602      	mov	r2, r0
 8007904:	460b      	mov	r3, r1
 8007906:	4610      	mov	r0, r2
 8007908:	4619      	mov	r1, r3
 800790a:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800790e:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007912:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007916:	f7f8 fe8f 	bl	8000638 <__aeabi_dmul>
 800791a:	4602      	mov	r2, r0
 800791c:	460b      	mov	r3, r1
 800791e:	4620      	mov	r0, r4
 8007920:	4629      	mov	r1, r5
 8007922:	f7f8 fcd1 	bl	80002c8 <__aeabi_dsub>
 8007926:	4602      	mov	r2, r0
 8007928:	460b      	mov	r3, r1
 800792a:	4640      	mov	r0, r8
 800792c:	4649      	mov	r1, r9
 800792e:	f7f8 fe83 	bl	8000638 <__aeabi_dmul>
 8007932:	4602      	mov	r2, r0
 8007934:	460b      	mov	r3, r1
 8007936:	4959      	ldr	r1, [pc, #356]	@ (8007a9c <ETS+0x1934>)
 8007938:	4439      	add	r1, r7
 800793a:	e9c1 2300 	strd	r2, r3, [r1]

    sx = -X4_2*X[4] * sqrt(psi8 * (-X3_2 + 4*X[4])) / (divs);
 800793e:	4b58      	ldr	r3, [pc, #352]	@ (8007aa0 <ETS+0x1938>)
 8007940:	443b      	add	r3, r7
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007946:	4b57      	ldr	r3, [pc, #348]	@ (8007aa4 <ETS+0x193c>)
 8007948:	443b      	add	r3, r7
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007950:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007952:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007956:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 800795a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800795e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8007962:	f7f8 fe69 	bl	8000638 <__aeabi_dmul>
 8007966:	4602      	mov	r2, r0
 8007968:	460b      	mov	r3, r1
 800796a:	4614      	mov	r4, r2
 800796c:	461d      	mov	r5, r3
 800796e:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007972:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007976:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800797a:	f04f 0200 	mov.w	r2, #0
 800797e:	4b42      	ldr	r3, [pc, #264]	@ (8007a88 <ETS+0x1920>)
 8007980:	f7f8 fe5a 	bl	8000638 <__aeabi_dmul>
 8007984:	4602      	mov	r2, r0
 8007986:	460b      	mov	r3, r1
 8007988:	4610      	mov	r0, r2
 800798a:	4619      	mov	r1, r3
 800798c:	4b42      	ldr	r3, [pc, #264]	@ (8007a98 <ETS+0x1930>)
 800798e:	443b      	add	r3, r7
 8007990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007994:	f7f8 fc98 	bl	80002c8 <__aeabi_dsub>
 8007998:	4602      	mov	r2, r0
 800799a:	460b      	mov	r3, r1
 800799c:	4610      	mov	r0, r2
 800799e:	4619      	mov	r1, r3
 80079a0:	4b3a      	ldr	r3, [pc, #232]	@ (8007a8c <ETS+0x1924>)
 80079a2:	443b      	add	r3, r7
 80079a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a8:	f7f8 fe46 	bl	8000638 <__aeabi_dmul>
 80079ac:	4602      	mov	r2, r0
 80079ae:	460b      	mov	r3, r1
 80079b0:	ec43 2b17 	vmov	d7, r2, r3
 80079b4:	eeb0 0a47 	vmov.f32	s0, s14
 80079b8:	eef0 0a67 	vmov.f32	s1, s15
 80079bc:	f00d f890 	bl	8014ae0 <sqrt>
 80079c0:	ec53 2b10 	vmov	r2, r3, d0
 80079c4:	4620      	mov	r0, r4
 80079c6:	4629      	mov	r1, r5
 80079c8:	f7f8 fe36 	bl	8000638 <__aeabi_dmul>
 80079cc:	4602      	mov	r2, r0
 80079ce:	460b      	mov	r3, r1
 80079d0:	4610      	mov	r0, r2
 80079d2:	4619      	mov	r1, r3
 80079d4:	4b31      	ldr	r3, [pc, #196]	@ (8007a9c <ETS+0x1934>)
 80079d6:	443b      	add	r3, r7
 80079d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079dc:	f7f8 ff56 	bl	800088c <__aeabi_ddiv>
 80079e0:	4602      	mov	r2, r0
 80079e2:	460b      	mov	r3, r1
 80079e4:	4930      	ldr	r1, [pc, #192]	@ (8007aa8 <ETS+0x1940>)
 80079e6:	4439      	add	r1, r7
 80079e8:	e9c1 2300 	strd	r2, r3, [r1]
    sy = -X4_2*X[4] * sqrt(psi8 * (-X2_2 + 4*X[0]*X[4])) / (divs);
 80079ec:	4b2c      	ldr	r3, [pc, #176]	@ (8007aa0 <ETS+0x1938>)
 80079ee:	443b      	add	r3, r7
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80079f4:	4b2b      	ldr	r3, [pc, #172]	@ (8007aa4 <ETS+0x193c>)
 80079f6:	443b      	add	r3, r7
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80079fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a00:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007a04:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007a08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a0c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8007a10:	f7f8 fe12 	bl	8000638 <__aeabi_dmul>
 8007a14:	4602      	mov	r2, r0
 8007a16:	460b      	mov	r3, r1
 8007a18:	4614      	mov	r4, r2
 8007a1a:	461d      	mov	r5, r3
 8007a1c:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007a20:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007a24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a28:	f04f 0200 	mov.w	r2, #0
 8007a2c:	4b16      	ldr	r3, [pc, #88]	@ (8007a88 <ETS+0x1920>)
 8007a2e:	f7f8 fe03 	bl	8000638 <__aeabi_dmul>
 8007a32:	4602      	mov	r2, r0
 8007a34:	460b      	mov	r3, r1
 8007a36:	4610      	mov	r0, r2
 8007a38:	4619      	mov	r1, r3
 8007a3a:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007a3e:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007a42:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a46:	f7f8 fdf7 	bl	8000638 <__aeabi_dmul>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	4610      	mov	r0, r2
 8007a50:	4619      	mov	r1, r3
 8007a52:	4b10      	ldr	r3, [pc, #64]	@ (8007a94 <ETS+0x192c>)
 8007a54:	443b      	add	r3, r7
 8007a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5a:	f7f8 fc35 	bl	80002c8 <__aeabi_dsub>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	460b      	mov	r3, r1
 8007a62:	4610      	mov	r0, r2
 8007a64:	4619      	mov	r1, r3
 8007a66:	4b09      	ldr	r3, [pc, #36]	@ (8007a8c <ETS+0x1924>)
 8007a68:	443b      	add	r3, r7
 8007a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6e:	f7f8 fde3 	bl	8000638 <__aeabi_dmul>
 8007a72:	4602      	mov	r2, r0
 8007a74:	460b      	mov	r3, r1
 8007a76:	ec43 2b17 	vmov	d7, r2, r3
 8007a7a:	eeb0 0a47 	vmov.f32	s0, s14
 8007a7e:	eef0 0a67 	vmov.f32	s1, s15
 8007a82:	f00d f82d 	bl	8014ae0 <sqrt>
 8007a86:	e011      	b.n	8007aac <ETS+0x1944>
 8007a88:	40100000 	.word	0x40100000
 8007a8c:	00029ae0 	.word	0x00029ae0
 8007a90:	00029a58 	.word	0x00029a58
 8007a94:	00029a50 	.word	0x00029a50
 8007a98:	00029a48 	.word	0x00029a48
 8007a9c:	00029ad8 	.word	0x00029ad8
 8007aa0:	00029a40 	.word	0x00029a40
 8007aa4:	00029a44 	.word	0x00029a44
 8007aa8:	00029a88 	.word	0x00029a88
 8007aac:	ec53 2b10 	vmov	r2, r3, d0
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	4629      	mov	r1, r5
 8007ab4:	f7f8 fdc0 	bl	8000638 <__aeabi_dmul>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	460b      	mov	r3, r1
 8007abc:	4610      	mov	r0, r2
 8007abe:	4619      	mov	r1, r3
 8007ac0:	4bc5      	ldr	r3, [pc, #788]	@ (8007dd8 <ETS+0x1c70>)
 8007ac2:	443b      	add	r3, r7
 8007ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac8:	f7f8 fee0 	bl	800088c <__aeabi_ddiv>
 8007acc:	4602      	mov	r2, r0
 8007ace:	460b      	mov	r3, r1
 8007ad0:	49c2      	ldr	r1, [pc, #776]	@ (8007ddc <ETS+0x1c74>)
 8007ad2:	4439      	add	r1, r7
 8007ad4:	e9c1 2300 	strd	r2, r3, [r1]
    sz = -X4_2*X[4] * sqrt(psi8 * (-X1_2 + 4*X[0])) / (divs);
 8007ad8:	4bc1      	ldr	r3, [pc, #772]	@ (8007de0 <ETS+0x1c78>)
 8007ada:	443b      	add	r3, r7
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ae0:	4bc0      	ldr	r3, [pc, #768]	@ (8007de4 <ETS+0x1c7c>)
 8007ae2:	443b      	add	r3, r7
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007aec:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007af0:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007af4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007af8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8007afc:	f7f8 fd9c 	bl	8000638 <__aeabi_dmul>
 8007b00:	4602      	mov	r2, r0
 8007b02:	460b      	mov	r3, r1
 8007b04:	4614      	mov	r4, r2
 8007b06:	461d      	mov	r5, r3
 8007b08:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007b0c:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007b10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b14:	f04f 0200 	mov.w	r2, #0
 8007b18:	4bb3      	ldr	r3, [pc, #716]	@ (8007de8 <ETS+0x1c80>)
 8007b1a:	f7f8 fd8d 	bl	8000638 <__aeabi_dmul>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	460b      	mov	r3, r1
 8007b22:	4610      	mov	r0, r2
 8007b24:	4619      	mov	r1, r3
 8007b26:	4bb1      	ldr	r3, [pc, #708]	@ (8007dec <ETS+0x1c84>)
 8007b28:	443b      	add	r3, r7
 8007b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2e:	f7f8 fbcb 	bl	80002c8 <__aeabi_dsub>
 8007b32:	4602      	mov	r2, r0
 8007b34:	460b      	mov	r3, r1
 8007b36:	4610      	mov	r0, r2
 8007b38:	4619      	mov	r1, r3
 8007b3a:	4bad      	ldr	r3, [pc, #692]	@ (8007df0 <ETS+0x1c88>)
 8007b3c:	443b      	add	r3, r7
 8007b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b42:	f7f8 fd79 	bl	8000638 <__aeabi_dmul>
 8007b46:	4602      	mov	r2, r0
 8007b48:	460b      	mov	r3, r1
 8007b4a:	ec43 2b17 	vmov	d7, r2, r3
 8007b4e:	eeb0 0a47 	vmov.f32	s0, s14
 8007b52:	eef0 0a67 	vmov.f32	s1, s15
 8007b56:	f00c ffc3 	bl	8014ae0 <sqrt>
 8007b5a:	ec53 2b10 	vmov	r2, r3, d0
 8007b5e:	4620      	mov	r0, r4
 8007b60:	4629      	mov	r1, r5
 8007b62:	f7f8 fd69 	bl	8000638 <__aeabi_dmul>
 8007b66:	4602      	mov	r2, r0
 8007b68:	460b      	mov	r3, r1
 8007b6a:	4610      	mov	r0, r2
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	4b9a      	ldr	r3, [pc, #616]	@ (8007dd8 <ETS+0x1c70>)
 8007b70:	443b      	add	r3, r7
 8007b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b76:	f7f8 fe89 	bl	800088c <__aeabi_ddiv>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	499d      	ldr	r1, [pc, #628]	@ (8007df4 <ETS+0x1c8c>)
 8007b80:	4439      	add	r1, r7
 8007b82:	e9c1 2300 	strd	r2, r3, [r1]

    rho = (2 * X[1]*X[4] - X[2]*X[3]) / (2*X4_2 * sqrt(-(X[4]*X1_2 - X[1]*X[2]*X[3] + X2_2 + X[0]*X3_2 - 4*X[0]*X[4]) / (X4_2*X[4])));
 8007b86:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007b8a:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007b8e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007b92:	4602      	mov	r2, r0
 8007b94:	460b      	mov	r3, r1
 8007b96:	f7f8 fb99 	bl	80002cc <__adddf3>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	4610      	mov	r0, r2
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007ba6:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007baa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007bae:	f7f8 fd43 	bl	8000638 <__aeabi_dmul>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	4614      	mov	r4, r2
 8007bb8:	461d      	mov	r5, r3
 8007bba:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007bbe:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007bc2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007bc6:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007bca:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007bce:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007bd2:	f7f8 fd31 	bl	8000638 <__aeabi_dmul>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	460b      	mov	r3, r1
 8007bda:	4620      	mov	r0, r4
 8007bdc:	4629      	mov	r1, r5
 8007bde:	f7f8 fb73 	bl	80002c8 <__aeabi_dsub>
 8007be2:	4602      	mov	r2, r0
 8007be4:	460b      	mov	r3, r1
 8007be6:	4692      	mov	sl, r2
 8007be8:	469b      	mov	fp, r3
 8007bea:	4b7d      	ldr	r3, [pc, #500]	@ (8007de0 <ETS+0x1c78>)
 8007bec:	443b      	add	r3, r7
 8007bee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	f7f8 fb69 	bl	80002cc <__adddf3>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	4690      	mov	r8, r2
 8007c00:	4699      	mov	r9, r3
 8007c02:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007c06:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007c0a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007c0e:	4b77      	ldr	r3, [pc, #476]	@ (8007dec <ETS+0x1c84>)
 8007c10:	443b      	add	r3, r7
 8007c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c16:	f7f8 fd0f 	bl	8000638 <__aeabi_dmul>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	4614      	mov	r4, r2
 8007c20:	461d      	mov	r5, r3
 8007c22:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007c26:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007c2a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007c2e:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007c32:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007c36:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007c3a:	f7f8 fcfd 	bl	8000638 <__aeabi_dmul>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	460b      	mov	r3, r1
 8007c42:	4610      	mov	r0, r2
 8007c44:	4619      	mov	r1, r3
 8007c46:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007c4a:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007c4e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007c52:	f7f8 fcf1 	bl	8000638 <__aeabi_dmul>
 8007c56:	4602      	mov	r2, r0
 8007c58:	460b      	mov	r3, r1
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	4629      	mov	r1, r5
 8007c5e:	f7f8 fb33 	bl	80002c8 <__aeabi_dsub>
 8007c62:	4602      	mov	r2, r0
 8007c64:	460b      	mov	r3, r1
 8007c66:	4610      	mov	r0, r2
 8007c68:	4619      	mov	r1, r3
 8007c6a:	4b63      	ldr	r3, [pc, #396]	@ (8007df8 <ETS+0x1c90>)
 8007c6c:	443b      	add	r3, r7
 8007c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c72:	f7f8 fb2b 	bl	80002cc <__adddf3>
 8007c76:	4602      	mov	r2, r0
 8007c78:	460b      	mov	r3, r1
 8007c7a:	4614      	mov	r4, r2
 8007c7c:	461d      	mov	r5, r3
 8007c7e:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007c82:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007c86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c8a:	4b5c      	ldr	r3, [pc, #368]	@ (8007dfc <ETS+0x1c94>)
 8007c8c:	443b      	add	r3, r7
 8007c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c92:	f7f8 fcd1 	bl	8000638 <__aeabi_dmul>
 8007c96:	4602      	mov	r2, r0
 8007c98:	460b      	mov	r3, r1
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	4629      	mov	r1, r5
 8007c9e:	f7f8 fb15 	bl	80002cc <__adddf3>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	4614      	mov	r4, r2
 8007ca8:	461d      	mov	r5, r3
 8007caa:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007cae:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007cb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007cb6:	f04f 0200 	mov.w	r2, #0
 8007cba:	4b4b      	ldr	r3, [pc, #300]	@ (8007de8 <ETS+0x1c80>)
 8007cbc:	f7f8 fcbc 	bl	8000638 <__aeabi_dmul>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	4610      	mov	r0, r2
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007ccc:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007cd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007cd4:	f7f8 fcb0 	bl	8000638 <__aeabi_dmul>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	460b      	mov	r3, r1
 8007cdc:	4620      	mov	r0, r4
 8007cde:	4629      	mov	r1, r5
 8007ce0:	f7f8 faf2 	bl	80002c8 <__aeabi_dsub>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	633a      	str	r2, [r7, #48]	@ 0x30
 8007cea:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007cee:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cf0:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007cf4:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007cf8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007cfc:	4b38      	ldr	r3, [pc, #224]	@ (8007de0 <ETS+0x1c78>)
 8007cfe:	443b      	add	r3, r7
 8007d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d04:	f7f8 fc98 	bl	8000638 <__aeabi_dmul>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8007d10:	f7f8 fdbc 	bl	800088c <__aeabi_ddiv>
 8007d14:	4602      	mov	r2, r0
 8007d16:	460b      	mov	r3, r1
 8007d18:	ec43 2b17 	vmov	d7, r2, r3
 8007d1c:	eeb0 0a47 	vmov.f32	s0, s14
 8007d20:	eef0 0a67 	vmov.f32	s1, s15
 8007d24:	f00c fedc 	bl	8014ae0 <sqrt>
 8007d28:	ec53 2b10 	vmov	r2, r3, d0
 8007d2c:	4640      	mov	r0, r8
 8007d2e:	4649      	mov	r1, r9
 8007d30:	f7f8 fc82 	bl	8000638 <__aeabi_dmul>
 8007d34:	4602      	mov	r2, r0
 8007d36:	460b      	mov	r3, r1
 8007d38:	4650      	mov	r0, sl
 8007d3a:	4659      	mov	r1, fp
 8007d3c:	f7f8 fda6 	bl	800088c <__aeabi_ddiv>
 8007d40:	4602      	mov	r2, r0
 8007d42:	460b      	mov	r3, r1
 8007d44:	492e      	ldr	r1, [pc, #184]	@ (8007e00 <ETS+0x1c98>)
 8007d46:	4439      	add	r1, r7
 8007d48:	e9c1 2300 	strd	r2, r3, [r1]
    rho = -atan(rho);
 8007d4c:	4b2c      	ldr	r3, [pc, #176]	@ (8007e00 <ETS+0x1c98>)
 8007d4e:	443b      	add	r3, r7
 8007d50:	ed93 0b00 	vldr	d0, [r3]
 8007d54:	f00c fef0 	bl	8014b38 <atan>
 8007d58:	ec51 0b10 	vmov	r0, r1, d0
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	4a28      	ldr	r2, [pc, #160]	@ (8007e00 <ETS+0x1c98>)
 8007d60:	443a      	add	r2, r7
 8007d62:	6013      	str	r3, [r2, #0]
 8007d64:	f081 4300 	eor.w	r3, r1, #2147483648	@ 0x80000000
 8007d68:	4a26      	ldr	r2, [pc, #152]	@ (8007e04 <ETS+0x1c9c>)
 8007d6a:	443a      	add	r2, r7
 8007d6c:	6013      	str	r3, [r2, #0]
    lambida = -atan((X[3] / X[4]) * sqrt(-(X4_2 * (X[4]*X1_2 - X[1]*X[2]*X[3] + X2_2 - 4*X[0]*X[4]) / (2*X1_2*X3_2*X[4] - 4* X1_2 * X4_2 - 4*X1_2 * X4_2 - X[1]*X[2]*X3_2*X[3] + X2_2 * X3_2 + X[0]* X3_2*X3_2 - 8*X[0]*X3_2*X[4] + 16*X[0]*X4_2))));
 8007d6e:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007d72:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007d76:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007d7a:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007d7e:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007d82:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d86:	f7f8 fd81 	bl	800088c <__aeabi_ddiv>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	4692      	mov	sl, r2
 8007d90:	469b      	mov	fp, r3
 8007d92:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007d96:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007d9a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007d9e:	4b13      	ldr	r3, [pc, #76]	@ (8007dec <ETS+0x1c84>)
 8007da0:	443b      	add	r3, r7
 8007da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da6:	f7f8 fc47 	bl	8000638 <__aeabi_dmul>
 8007daa:	4602      	mov	r2, r0
 8007dac:	460b      	mov	r3, r1
 8007dae:	4614      	mov	r4, r2
 8007db0:	461d      	mov	r5, r3
 8007db2:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007db6:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007dba:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007dbe:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007dc2:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007dc6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007dca:	f7f8 fc35 	bl	8000638 <__aeabi_dmul>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	4610      	mov	r0, r2
 8007dd4:	e018      	b.n	8007e08 <ETS+0x1ca0>
 8007dd6:	bf00      	nop
 8007dd8:	00029ad8 	.word	0x00029ad8
 8007ddc:	00029a80 	.word	0x00029a80
 8007de0:	00029a40 	.word	0x00029a40
 8007de4:	00029a44 	.word	0x00029a44
 8007de8:	40100000 	.word	0x40100000
 8007dec:	00029a58 	.word	0x00029a58
 8007df0:	00029ae0 	.word	0x00029ae0
 8007df4:	00029a78 	.word	0x00029a78
 8007df8:	00029a50 	.word	0x00029a50
 8007dfc:	00029a48 	.word	0x00029a48
 8007e00:	00029a70 	.word	0x00029a70
 8007e04:	00029a74 	.word	0x00029a74
 8007e08:	4619      	mov	r1, r3
 8007e0a:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007e0e:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007e12:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007e16:	f7f8 fc0f 	bl	8000638 <__aeabi_dmul>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	4620      	mov	r0, r4
 8007e20:	4629      	mov	r1, r5
 8007e22:	f7f8 fa51 	bl	80002c8 <__aeabi_dsub>
 8007e26:	4602      	mov	r2, r0
 8007e28:	460b      	mov	r3, r1
 8007e2a:	4610      	mov	r0, r2
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	4bc6      	ldr	r3, [pc, #792]	@ (8008148 <ETS+0x1fe0>)
 8007e30:	443b      	add	r3, r7
 8007e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e36:	f7f8 fa49 	bl	80002cc <__adddf3>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	4614      	mov	r4, r2
 8007e40:	461d      	mov	r5, r3
 8007e42:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007e46:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007e4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007e4e:	f04f 0200 	mov.w	r2, #0
 8007e52:	4bbe      	ldr	r3, [pc, #760]	@ (800814c <ETS+0x1fe4>)
 8007e54:	f7f8 fbf0 	bl	8000638 <__aeabi_dmul>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	4610      	mov	r0, r2
 8007e5e:	4619      	mov	r1, r3
 8007e60:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007e64:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007e68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e6c:	f7f8 fbe4 	bl	8000638 <__aeabi_dmul>
 8007e70:	4602      	mov	r2, r0
 8007e72:	460b      	mov	r3, r1
 8007e74:	4620      	mov	r0, r4
 8007e76:	4629      	mov	r1, r5
 8007e78:	f7f8 fa26 	bl	80002c8 <__aeabi_dsub>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	460b      	mov	r3, r1
 8007e80:	4610      	mov	r0, r2
 8007e82:	4619      	mov	r1, r3
 8007e84:	4bb2      	ldr	r3, [pc, #712]	@ (8008150 <ETS+0x1fe8>)
 8007e86:	443b      	add	r3, r7
 8007e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8c:	f7f8 fbd4 	bl	8000638 <__aeabi_dmul>
 8007e90:	4602      	mov	r2, r0
 8007e92:	460b      	mov	r3, r1
 8007e94:	4690      	mov	r8, r2
 8007e96:	4699      	mov	r9, r3
 8007e98:	4bae      	ldr	r3, [pc, #696]	@ (8008154 <ETS+0x1fec>)
 8007e9a:	443b      	add	r3, r7
 8007e9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	f7f8 fa12 	bl	80002cc <__adddf3>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	460b      	mov	r3, r1
 8007eac:	4610      	mov	r0, r2
 8007eae:	4619      	mov	r1, r3
 8007eb0:	4ba9      	ldr	r3, [pc, #676]	@ (8008158 <ETS+0x1ff0>)
 8007eb2:	443b      	add	r3, r7
 8007eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb8:	f7f8 fbbe 	bl	8000638 <__aeabi_dmul>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	4610      	mov	r0, r2
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007ec8:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007ecc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ed0:	f7f8 fbb2 	bl	8000638 <__aeabi_dmul>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	4614      	mov	r4, r2
 8007eda:	461d      	mov	r5, r3
 8007edc:	f04f 0200 	mov.w	r2, #0
 8007ee0:	4b9a      	ldr	r3, [pc, #616]	@ (800814c <ETS+0x1fe4>)
 8007ee2:	499c      	ldr	r1, [pc, #624]	@ (8008154 <ETS+0x1fec>)
 8007ee4:	4439      	add	r1, r7
 8007ee6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007eea:	f7f8 fba5 	bl	8000638 <__aeabi_dmul>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	4610      	mov	r0, r2
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	4b96      	ldr	r3, [pc, #600]	@ (8008150 <ETS+0x1fe8>)
 8007ef8:	443b      	add	r3, r7
 8007efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efe:	f7f8 fb9b 	bl	8000638 <__aeabi_dmul>
 8007f02:	4602      	mov	r2, r0
 8007f04:	460b      	mov	r3, r1
 8007f06:	4620      	mov	r0, r4
 8007f08:	4629      	mov	r1, r5
 8007f0a:	f7f8 f9dd 	bl	80002c8 <__aeabi_dsub>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	460b      	mov	r3, r1
 8007f12:	4614      	mov	r4, r2
 8007f14:	461d      	mov	r5, r3
 8007f16:	f04f 0200 	mov.w	r2, #0
 8007f1a:	4b8c      	ldr	r3, [pc, #560]	@ (800814c <ETS+0x1fe4>)
 8007f1c:	498d      	ldr	r1, [pc, #564]	@ (8008154 <ETS+0x1fec>)
 8007f1e:	4439      	add	r1, r7
 8007f20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f24:	f7f8 fb88 	bl	8000638 <__aeabi_dmul>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	4619      	mov	r1, r3
 8007f30:	4b87      	ldr	r3, [pc, #540]	@ (8008150 <ETS+0x1fe8>)
 8007f32:	443b      	add	r3, r7
 8007f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f38:	f7f8 fb7e 	bl	8000638 <__aeabi_dmul>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	460b      	mov	r3, r1
 8007f40:	4620      	mov	r0, r4
 8007f42:	4629      	mov	r1, r5
 8007f44:	f7f8 f9c0 	bl	80002c8 <__aeabi_dsub>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	4614      	mov	r4, r2
 8007f4e:	461d      	mov	r5, r3
 8007f50:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007f54:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007f58:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007f5c:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007f60:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007f64:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007f68:	f7f8 fb66 	bl	8000638 <__aeabi_dmul>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	460b      	mov	r3, r1
 8007f70:	4610      	mov	r0, r2
 8007f72:	4619      	mov	r1, r3
 8007f74:	4b78      	ldr	r3, [pc, #480]	@ (8008158 <ETS+0x1ff0>)
 8007f76:	443b      	add	r3, r7
 8007f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7c:	f7f8 fb5c 	bl	8000638 <__aeabi_dmul>
 8007f80:	4602      	mov	r2, r0
 8007f82:	460b      	mov	r3, r1
 8007f84:	4610      	mov	r0, r2
 8007f86:	4619      	mov	r1, r3
 8007f88:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007f8c:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007f90:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007f94:	f7f8 fb50 	bl	8000638 <__aeabi_dmul>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	4629      	mov	r1, r5
 8007fa0:	f7f8 f992 	bl	80002c8 <__aeabi_dsub>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	4614      	mov	r4, r2
 8007faa:	461d      	mov	r5, r3
 8007fac:	4b6a      	ldr	r3, [pc, #424]	@ (8008158 <ETS+0x1ff0>)
 8007fae:	443b      	add	r3, r7
 8007fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb4:	4964      	ldr	r1, [pc, #400]	@ (8008148 <ETS+0x1fe0>)
 8007fb6:	4439      	add	r1, r7
 8007fb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fbc:	f7f8 fb3c 	bl	8000638 <__aeabi_dmul>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	4629      	mov	r1, r5
 8007fc8:	f7f8 f980 	bl	80002cc <__adddf3>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	4614      	mov	r4, r2
 8007fd2:	461d      	mov	r5, r3
 8007fd4:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8007fd8:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8007fdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007fe0:	4b5d      	ldr	r3, [pc, #372]	@ (8008158 <ETS+0x1ff0>)
 8007fe2:	443b      	add	r3, r7
 8007fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe8:	f7f8 fb26 	bl	8000638 <__aeabi_dmul>
 8007fec:	4602      	mov	r2, r0
 8007fee:	460b      	mov	r3, r1
 8007ff0:	4610      	mov	r0, r2
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	4b58      	ldr	r3, [pc, #352]	@ (8008158 <ETS+0x1ff0>)
 8007ff6:	443b      	add	r3, r7
 8007ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffc:	f7f8 fb1c 	bl	8000638 <__aeabi_dmul>
 8008000:	4602      	mov	r2, r0
 8008002:	460b      	mov	r3, r1
 8008004:	4620      	mov	r0, r4
 8008006:	4629      	mov	r1, r5
 8008008:	f7f8 f960 	bl	80002cc <__adddf3>
 800800c:	4602      	mov	r2, r0
 800800e:	460b      	mov	r3, r1
 8008010:	4614      	mov	r4, r2
 8008012:	461d      	mov	r5, r3
 8008014:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008018:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 800801c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008020:	f04f 0200 	mov.w	r2, #0
 8008024:	4b4d      	ldr	r3, [pc, #308]	@ (800815c <ETS+0x1ff4>)
 8008026:	f7f8 fb07 	bl	8000638 <__aeabi_dmul>
 800802a:	4602      	mov	r2, r0
 800802c:	460b      	mov	r3, r1
 800802e:	4610      	mov	r0, r2
 8008030:	4619      	mov	r1, r3
 8008032:	4b49      	ldr	r3, [pc, #292]	@ (8008158 <ETS+0x1ff0>)
 8008034:	443b      	add	r3, r7
 8008036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803a:	f7f8 fafd 	bl	8000638 <__aeabi_dmul>
 800803e:	4602      	mov	r2, r0
 8008040:	460b      	mov	r3, r1
 8008042:	4610      	mov	r0, r2
 8008044:	4619      	mov	r1, r3
 8008046:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800804a:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 800804e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008052:	f7f8 faf1 	bl	8000638 <__aeabi_dmul>
 8008056:	4602      	mov	r2, r0
 8008058:	460b      	mov	r3, r1
 800805a:	4620      	mov	r0, r4
 800805c:	4629      	mov	r1, r5
 800805e:	f7f8 f933 	bl	80002c8 <__aeabi_dsub>
 8008062:	4602      	mov	r2, r0
 8008064:	460b      	mov	r3, r1
 8008066:	4614      	mov	r4, r2
 8008068:	461d      	mov	r5, r3
 800806a:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800806e:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8008072:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008076:	f04f 0200 	mov.w	r2, #0
 800807a:	4b39      	ldr	r3, [pc, #228]	@ (8008160 <ETS+0x1ff8>)
 800807c:	f7f8 fadc 	bl	8000638 <__aeabi_dmul>
 8008080:	4602      	mov	r2, r0
 8008082:	460b      	mov	r3, r1
 8008084:	4610      	mov	r0, r2
 8008086:	4619      	mov	r1, r3
 8008088:	4b31      	ldr	r3, [pc, #196]	@ (8008150 <ETS+0x1fe8>)
 800808a:	443b      	add	r3, r7
 800808c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008090:	f7f8 fad2 	bl	8000638 <__aeabi_dmul>
 8008094:	4602      	mov	r2, r0
 8008096:	460b      	mov	r3, r1
 8008098:	4620      	mov	r0, r4
 800809a:	4629      	mov	r1, r5
 800809c:	f7f8 f916 	bl	80002cc <__adddf3>
 80080a0:	4602      	mov	r2, r0
 80080a2:	460b      	mov	r3, r1
 80080a4:	4640      	mov	r0, r8
 80080a6:	4649      	mov	r1, r9
 80080a8:	f7f8 fbf0 	bl	800088c <__aeabi_ddiv>
 80080ac:	4602      	mov	r2, r0
 80080ae:	460b      	mov	r3, r1
 80080b0:	62ba      	str	r2, [r7, #40]	@ 0x28
 80080b2:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80080b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80080b8:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 80080bc:	f00c fd10 	bl	8014ae0 <sqrt>
 80080c0:	ec53 2b10 	vmov	r2, r3, d0
 80080c4:	4650      	mov	r0, sl
 80080c6:	4659      	mov	r1, fp
 80080c8:	f7f8 fab6 	bl	8000638 <__aeabi_dmul>
 80080cc:	4602      	mov	r2, r0
 80080ce:	460b      	mov	r3, r1
 80080d0:	ec43 2b17 	vmov	d7, r2, r3
 80080d4:	eeb0 0a47 	vmov.f32	s0, s14
 80080d8:	eef0 0a67 	vmov.f32	s1, s15
 80080dc:	f00c fd2c 	bl	8014b38 <atan>
 80080e0:	ec53 2b10 	vmov	r2, r3, d0
 80080e4:	4611      	mov	r1, r2
 80080e6:	481f      	ldr	r0, [pc, #124]	@ (8008164 <ETS+0x1ffc>)
 80080e8:	4438      	add	r0, r7
 80080ea:	6001      	str	r1, [r0, #0]
 80080ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80080f0:	4a1d      	ldr	r2, [pc, #116]	@ (8008168 <ETS+0x2000>)
 80080f2:	443a      	add	r2, r7
 80080f4:	6013      	str	r3, [r2, #0]

    n1 = -X1_2*X7_2 + 4*X1_2*X[4]*X[8] - 4*X[1]*X[2]*X[3]*X[8] + 2*X[1]*X[2]*X[6]*X[7] + 2*X[1]*X[3]*X[5]*X[7] - 4*X[1]*X[4]*X[5]*X[6] - X2_2*X6_2 + 2*X[2]*X[3]*X[5]*X[6] + 4*X2_2*X[8] - 4*X[2]*X[5]*X[7] - X3_2*X5_2 + 4*X[1]*X3_2*X[8] - 4*X[0]*X[3]*X[6]*X[7] + 4*X[4]*X5_2 + 4*X[0]*X[4]*X6_2 + 4*X[0]*X7_2 - 16*X[0]*X[4]*X[8];
 80080f6:	4b17      	ldr	r3, [pc, #92]	@ (8008154 <ETS+0x1fec>)
 80080f8:	443b      	add	r3, r7
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	623b      	str	r3, [r7, #32]
 80080fe:	4b1b      	ldr	r3, [pc, #108]	@ (800816c <ETS+0x2004>)
 8008100:	443b      	add	r3, r7
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8008108:	627b      	str	r3, [r7, #36]	@ 0x24
 800810a:	4b19      	ldr	r3, [pc, #100]	@ (8008170 <ETS+0x2008>)
 800810c:	443b      	add	r3, r7
 800810e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008112:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008116:	f7f8 fa8f 	bl	8000638 <__aeabi_dmul>
 800811a:	4602      	mov	r2, r0
 800811c:	460b      	mov	r3, r1
 800811e:	4614      	mov	r4, r2
 8008120:	461d      	mov	r5, r3
 8008122:	f04f 0200 	mov.w	r2, #0
 8008126:	4b09      	ldr	r3, [pc, #36]	@ (800814c <ETS+0x1fe4>)
 8008128:	490a      	ldr	r1, [pc, #40]	@ (8008154 <ETS+0x1fec>)
 800812a:	4439      	add	r1, r7
 800812c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008130:	f7f8 fa82 	bl	8000638 <__aeabi_dmul>
 8008134:	4602      	mov	r2, r0
 8008136:	460b      	mov	r3, r1
 8008138:	4610      	mov	r0, r2
 800813a:	4619      	mov	r1, r3
 800813c:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008140:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8008144:	e016      	b.n	8008174 <ETS+0x200c>
 8008146:	bf00      	nop
 8008148:	00029a50 	.word	0x00029a50
 800814c:	40100000 	.word	0x40100000
 8008150:	00029a40 	.word	0x00029a40
 8008154:	00029a58 	.word	0x00029a58
 8008158:	00029a48 	.word	0x00029a48
 800815c:	40200000 	.word	0x40200000
 8008160:	40300000 	.word	0x40300000
 8008164:	00029a60 	.word	0x00029a60
 8008168:	00029a64 	.word	0x00029a64
 800816c:	00029a5c 	.word	0x00029a5c
 8008170:	00029a28 	.word	0x00029a28
 8008174:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008178:	f7f8 fa5e 	bl	8000638 <__aeabi_dmul>
 800817c:	4602      	mov	r2, r0
 800817e:	460b      	mov	r3, r1
 8008180:	4610      	mov	r0, r2
 8008182:	4619      	mov	r1, r3
 8008184:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008188:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 800818c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008190:	f7f8 fa52 	bl	8000638 <__aeabi_dmul>
 8008194:	4602      	mov	r2, r0
 8008196:	460b      	mov	r3, r1
 8008198:	4620      	mov	r0, r4
 800819a:	4629      	mov	r1, r5
 800819c:	f7f8 f896 	bl	80002cc <__adddf3>
 80081a0:	4602      	mov	r2, r0
 80081a2:	460b      	mov	r3, r1
 80081a4:	4614      	mov	r4, r2
 80081a6:	461d      	mov	r5, r3
 80081a8:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80081ac:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80081b0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80081b4:	f04f 0200 	mov.w	r2, #0
 80081b8:	4bd6      	ldr	r3, [pc, #856]	@ (8008514 <ETS+0x23ac>)
 80081ba:	f7f8 fa3d 	bl	8000638 <__aeabi_dmul>
 80081be:	4602      	mov	r2, r0
 80081c0:	460b      	mov	r3, r1
 80081c2:	4610      	mov	r0, r2
 80081c4:	4619      	mov	r1, r3
 80081c6:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80081ca:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80081ce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80081d2:	f7f8 fa31 	bl	8000638 <__aeabi_dmul>
 80081d6:	4602      	mov	r2, r0
 80081d8:	460b      	mov	r3, r1
 80081da:	4610      	mov	r0, r2
 80081dc:	4619      	mov	r1, r3
 80081de:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80081e2:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80081e6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80081ea:	f7f8 fa25 	bl	8000638 <__aeabi_dmul>
 80081ee:	4602      	mov	r2, r0
 80081f0:	460b      	mov	r3, r1
 80081f2:	4610      	mov	r0, r2
 80081f4:	4619      	mov	r1, r3
 80081f6:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80081fa:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80081fe:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008202:	f7f8 fa19 	bl	8000638 <__aeabi_dmul>
 8008206:	4602      	mov	r2, r0
 8008208:	460b      	mov	r3, r1
 800820a:	4620      	mov	r0, r4
 800820c:	4629      	mov	r1, r5
 800820e:	f7f8 f85b 	bl	80002c8 <__aeabi_dsub>
 8008212:	4602      	mov	r2, r0
 8008214:	460b      	mov	r3, r1
 8008216:	4614      	mov	r4, r2
 8008218:	461d      	mov	r5, r3
 800821a:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800821e:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8008222:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008226:	4602      	mov	r2, r0
 8008228:	460b      	mov	r3, r1
 800822a:	f7f8 f84f 	bl	80002cc <__adddf3>
 800822e:	4602      	mov	r2, r0
 8008230:	460b      	mov	r3, r1
 8008232:	4610      	mov	r0, r2
 8008234:	4619      	mov	r1, r3
 8008236:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800823a:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 800823e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008242:	f7f8 f9f9 	bl	8000638 <__aeabi_dmul>
 8008246:	4602      	mov	r2, r0
 8008248:	460b      	mov	r3, r1
 800824a:	4610      	mov	r0, r2
 800824c:	4619      	mov	r1, r3
 800824e:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008252:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8008256:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800825a:	f7f8 f9ed 	bl	8000638 <__aeabi_dmul>
 800825e:	4602      	mov	r2, r0
 8008260:	460b      	mov	r3, r1
 8008262:	4610      	mov	r0, r2
 8008264:	4619      	mov	r1, r3
 8008266:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800826a:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 800826e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008272:	f7f8 f9e1 	bl	8000638 <__aeabi_dmul>
 8008276:	4602      	mov	r2, r0
 8008278:	460b      	mov	r3, r1
 800827a:	4620      	mov	r0, r4
 800827c:	4629      	mov	r1, r5
 800827e:	f7f8 f825 	bl	80002cc <__adddf3>
 8008282:	4602      	mov	r2, r0
 8008284:	460b      	mov	r3, r1
 8008286:	4614      	mov	r4, r2
 8008288:	461d      	mov	r5, r3
 800828a:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800828e:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8008292:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008296:	4602      	mov	r2, r0
 8008298:	460b      	mov	r3, r1
 800829a:	f7f8 f817 	bl	80002cc <__adddf3>
 800829e:	4602      	mov	r2, r0
 80082a0:	460b      	mov	r3, r1
 80082a2:	4610      	mov	r0, r2
 80082a4:	4619      	mov	r1, r3
 80082a6:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80082aa:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80082ae:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80082b2:	f7f8 f9c1 	bl	8000638 <__aeabi_dmul>
 80082b6:	4602      	mov	r2, r0
 80082b8:	460b      	mov	r3, r1
 80082ba:	4610      	mov	r0, r2
 80082bc:	4619      	mov	r1, r3
 80082be:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80082c2:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80082c6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80082ca:	f7f8 f9b5 	bl	8000638 <__aeabi_dmul>
 80082ce:	4602      	mov	r2, r0
 80082d0:	460b      	mov	r3, r1
 80082d2:	4610      	mov	r0, r2
 80082d4:	4619      	mov	r1, r3
 80082d6:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80082da:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80082de:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80082e2:	f7f8 f9a9 	bl	8000638 <__aeabi_dmul>
 80082e6:	4602      	mov	r2, r0
 80082e8:	460b      	mov	r3, r1
 80082ea:	4620      	mov	r0, r4
 80082ec:	4629      	mov	r1, r5
 80082ee:	f7f7 ffed 	bl	80002cc <__adddf3>
 80082f2:	4602      	mov	r2, r0
 80082f4:	460b      	mov	r3, r1
 80082f6:	4614      	mov	r4, r2
 80082f8:	461d      	mov	r5, r3
 80082fa:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80082fe:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8008302:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008306:	f04f 0200 	mov.w	r2, #0
 800830a:	4b82      	ldr	r3, [pc, #520]	@ (8008514 <ETS+0x23ac>)
 800830c:	f7f8 f994 	bl	8000638 <__aeabi_dmul>
 8008310:	4602      	mov	r2, r0
 8008312:	460b      	mov	r3, r1
 8008314:	4610      	mov	r0, r2
 8008316:	4619      	mov	r1, r3
 8008318:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800831c:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8008320:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008324:	f7f8 f988 	bl	8000638 <__aeabi_dmul>
 8008328:	4602      	mov	r2, r0
 800832a:	460b      	mov	r3, r1
 800832c:	4610      	mov	r0, r2
 800832e:	4619      	mov	r1, r3
 8008330:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008334:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8008338:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800833c:	f7f8 f97c 	bl	8000638 <__aeabi_dmul>
 8008340:	4602      	mov	r2, r0
 8008342:	460b      	mov	r3, r1
 8008344:	4610      	mov	r0, r2
 8008346:	4619      	mov	r1, r3
 8008348:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800834c:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8008350:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8008354:	f7f8 f970 	bl	8000638 <__aeabi_dmul>
 8008358:	4602      	mov	r2, r0
 800835a:	460b      	mov	r3, r1
 800835c:	4620      	mov	r0, r4
 800835e:	4629      	mov	r1, r5
 8008360:	f7f7 ffb2 	bl	80002c8 <__aeabi_dsub>
 8008364:	4602      	mov	r2, r0
 8008366:	460b      	mov	r3, r1
 8008368:	4614      	mov	r4, r2
 800836a:	461d      	mov	r5, r3
 800836c:	4b6a      	ldr	r3, [pc, #424]	@ (8008518 <ETS+0x23b0>)
 800836e:	443b      	add	r3, r7
 8008370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008374:	4969      	ldr	r1, [pc, #420]	@ (800851c <ETS+0x23b4>)
 8008376:	4439      	add	r1, r7
 8008378:	e9d1 0100 	ldrd	r0, r1, [r1]
 800837c:	f7f8 f95c 	bl	8000638 <__aeabi_dmul>
 8008380:	4602      	mov	r2, r0
 8008382:	460b      	mov	r3, r1
 8008384:	4620      	mov	r0, r4
 8008386:	4629      	mov	r1, r5
 8008388:	f7f7 ff9e 	bl	80002c8 <__aeabi_dsub>
 800838c:	4602      	mov	r2, r0
 800838e:	460b      	mov	r3, r1
 8008390:	4614      	mov	r4, r2
 8008392:	461d      	mov	r5, r3
 8008394:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008398:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 800839c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80083a0:	4602      	mov	r2, r0
 80083a2:	460b      	mov	r3, r1
 80083a4:	f7f7 ff92 	bl	80002cc <__adddf3>
 80083a8:	4602      	mov	r2, r0
 80083aa:	460b      	mov	r3, r1
 80083ac:	4610      	mov	r0, r2
 80083ae:	4619      	mov	r1, r3
 80083b0:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80083b4:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80083b8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80083bc:	f7f8 f93c 	bl	8000638 <__aeabi_dmul>
 80083c0:	4602      	mov	r2, r0
 80083c2:	460b      	mov	r3, r1
 80083c4:	4610      	mov	r0, r2
 80083c6:	4619      	mov	r1, r3
 80083c8:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80083cc:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80083d0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80083d4:	f7f8 f930 	bl	8000638 <__aeabi_dmul>
 80083d8:	4602      	mov	r2, r0
 80083da:	460b      	mov	r3, r1
 80083dc:	4610      	mov	r0, r2
 80083de:	4619      	mov	r1, r3
 80083e0:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80083e4:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80083e8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80083ec:	f7f8 f924 	bl	8000638 <__aeabi_dmul>
 80083f0:	4602      	mov	r2, r0
 80083f2:	460b      	mov	r3, r1
 80083f4:	4620      	mov	r0, r4
 80083f6:	4629      	mov	r1, r5
 80083f8:	f7f7 ff68 	bl	80002cc <__adddf3>
 80083fc:	4602      	mov	r2, r0
 80083fe:	460b      	mov	r3, r1
 8008400:	4614      	mov	r4, r2
 8008402:	461d      	mov	r5, r3
 8008404:	f04f 0200 	mov.w	r2, #0
 8008408:	4b42      	ldr	r3, [pc, #264]	@ (8008514 <ETS+0x23ac>)
 800840a:	4944      	ldr	r1, [pc, #272]	@ (800851c <ETS+0x23b4>)
 800840c:	4439      	add	r1, r7
 800840e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008412:	f7f8 f911 	bl	8000638 <__aeabi_dmul>
 8008416:	4602      	mov	r2, r0
 8008418:	460b      	mov	r3, r1
 800841a:	4610      	mov	r0, r2
 800841c:	4619      	mov	r1, r3
 800841e:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008422:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8008426:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800842a:	f7f8 f905 	bl	8000638 <__aeabi_dmul>
 800842e:	4602      	mov	r2, r0
 8008430:	460b      	mov	r3, r1
 8008432:	4620      	mov	r0, r4
 8008434:	4629      	mov	r1, r5
 8008436:	f7f7 ff49 	bl	80002cc <__adddf3>
 800843a:	4602      	mov	r2, r0
 800843c:	460b      	mov	r3, r1
 800843e:	4614      	mov	r4, r2
 8008440:	461d      	mov	r5, r3
 8008442:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008446:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 800844a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800844e:	f04f 0200 	mov.w	r2, #0
 8008452:	4b30      	ldr	r3, [pc, #192]	@ (8008514 <ETS+0x23ac>)
 8008454:	f7f8 f8f0 	bl	8000638 <__aeabi_dmul>
 8008458:	4602      	mov	r2, r0
 800845a:	460b      	mov	r3, r1
 800845c:	4610      	mov	r0, r2
 800845e:	4619      	mov	r1, r3
 8008460:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008464:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8008468:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800846c:	f7f8 f8e4 	bl	8000638 <__aeabi_dmul>
 8008470:	4602      	mov	r2, r0
 8008472:	460b      	mov	r3, r1
 8008474:	4610      	mov	r0, r2
 8008476:	4619      	mov	r1, r3
 8008478:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800847c:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8008480:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008484:	f7f8 f8d8 	bl	8000638 <__aeabi_dmul>
 8008488:	4602      	mov	r2, r0
 800848a:	460b      	mov	r3, r1
 800848c:	4620      	mov	r0, r4
 800848e:	4629      	mov	r1, r5
 8008490:	f7f7 ff1a 	bl	80002c8 <__aeabi_dsub>
 8008494:	4602      	mov	r2, r0
 8008496:	460b      	mov	r3, r1
 8008498:	4614      	mov	r4, r2
 800849a:	461d      	mov	r5, r3
 800849c:	4b20      	ldr	r3, [pc, #128]	@ (8008520 <ETS+0x23b8>)
 800849e:	443b      	add	r3, r7
 80084a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a4:	491f      	ldr	r1, [pc, #124]	@ (8008524 <ETS+0x23bc>)
 80084a6:	4439      	add	r1, r7
 80084a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084ac:	f7f8 f8c4 	bl	8000638 <__aeabi_dmul>
 80084b0:	4602      	mov	r2, r0
 80084b2:	460b      	mov	r3, r1
 80084b4:	4620      	mov	r0, r4
 80084b6:	4629      	mov	r1, r5
 80084b8:	f7f7 ff06 	bl	80002c8 <__aeabi_dsub>
 80084bc:	4602      	mov	r2, r0
 80084be:	460b      	mov	r3, r1
 80084c0:	4614      	mov	r4, r2
 80084c2:	461d      	mov	r5, r3
 80084c4:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80084c8:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80084cc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80084d0:	f04f 0200 	mov.w	r2, #0
 80084d4:	4b0f      	ldr	r3, [pc, #60]	@ (8008514 <ETS+0x23ac>)
 80084d6:	f7f8 f8af 	bl	8000638 <__aeabi_dmul>
 80084da:	4602      	mov	r2, r0
 80084dc:	460b      	mov	r3, r1
 80084de:	4610      	mov	r0, r2
 80084e0:	4619      	mov	r1, r3
 80084e2:	4b10      	ldr	r3, [pc, #64]	@ (8008524 <ETS+0x23bc>)
 80084e4:	443b      	add	r3, r7
 80084e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ea:	f7f8 f8a5 	bl	8000638 <__aeabi_dmul>
 80084ee:	4602      	mov	r2, r0
 80084f0:	460b      	mov	r3, r1
 80084f2:	4610      	mov	r0, r2
 80084f4:	4619      	mov	r1, r3
 80084f6:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80084fa:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80084fe:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008502:	f7f8 f899 	bl	8000638 <__aeabi_dmul>
 8008506:	4602      	mov	r2, r0
 8008508:	460b      	mov	r3, r1
 800850a:	4620      	mov	r0, r4
 800850c:	4629      	mov	r1, r5
 800850e:	f7f7 fedd 	bl	80002cc <__adddf3>
 8008512:	e009      	b.n	8008528 <ETS+0x23c0>
 8008514:	40100000 	.word	0x40100000
 8008518:	00029a30 	.word	0x00029a30
 800851c:	00029a50 	.word	0x00029a50
 8008520:	00029a38 	.word	0x00029a38
 8008524:	00029a48 	.word	0x00029a48
 8008528:	4602      	mov	r2, r0
 800852a:	460b      	mov	r3, r1
 800852c:	4614      	mov	r4, r2
 800852e:	461d      	mov	r5, r3
 8008530:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008534:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8008538:	e9d3 0100 	ldrd	r0, r1, [r3]
 800853c:	f04f 0200 	mov.w	r2, #0
 8008540:	4bcc      	ldr	r3, [pc, #816]	@ (8008874 <ETS+0x270c>)
 8008542:	f7f8 f879 	bl	8000638 <__aeabi_dmul>
 8008546:	4602      	mov	r2, r0
 8008548:	460b      	mov	r3, r1
 800854a:	4610      	mov	r0, r2
 800854c:	4619      	mov	r1, r3
 800854e:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008552:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8008556:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800855a:	f7f8 f86d 	bl	8000638 <__aeabi_dmul>
 800855e:	4602      	mov	r2, r0
 8008560:	460b      	mov	r3, r1
 8008562:	4610      	mov	r0, r2
 8008564:	4619      	mov	r1, r3
 8008566:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800856a:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 800856e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8008572:	f7f8 f861 	bl	8000638 <__aeabi_dmul>
 8008576:	4602      	mov	r2, r0
 8008578:	460b      	mov	r3, r1
 800857a:	4610      	mov	r0, r2
 800857c:	4619      	mov	r1, r3
 800857e:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008582:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8008586:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800858a:	f7f8 f855 	bl	8000638 <__aeabi_dmul>
 800858e:	4602      	mov	r2, r0
 8008590:	460b      	mov	r3, r1
 8008592:	4620      	mov	r0, r4
 8008594:	4629      	mov	r1, r5
 8008596:	f7f7 fe97 	bl	80002c8 <__aeabi_dsub>
 800859a:	4602      	mov	r2, r0
 800859c:	460b      	mov	r3, r1
 800859e:	4614      	mov	r4, r2
 80085a0:	461d      	mov	r5, r3
 80085a2:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80085a6:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80085aa:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80085ae:	f04f 0200 	mov.w	r2, #0
 80085b2:	4bb0      	ldr	r3, [pc, #704]	@ (8008874 <ETS+0x270c>)
 80085b4:	f7f8 f840 	bl	8000638 <__aeabi_dmul>
 80085b8:	4602      	mov	r2, r0
 80085ba:	460b      	mov	r3, r1
 80085bc:	4610      	mov	r0, r2
 80085be:	4619      	mov	r1, r3
 80085c0:	4bad      	ldr	r3, [pc, #692]	@ (8008878 <ETS+0x2710>)
 80085c2:	443b      	add	r3, r7
 80085c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c8:	f7f8 f836 	bl	8000638 <__aeabi_dmul>
 80085cc:	4602      	mov	r2, r0
 80085ce:	460b      	mov	r3, r1
 80085d0:	4620      	mov	r0, r4
 80085d2:	4629      	mov	r1, r5
 80085d4:	f7f7 fe7a 	bl	80002cc <__adddf3>
 80085d8:	4602      	mov	r2, r0
 80085da:	460b      	mov	r3, r1
 80085dc:	4614      	mov	r4, r2
 80085de:	461d      	mov	r5, r3
 80085e0:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80085e4:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80085e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80085ec:	f04f 0200 	mov.w	r2, #0
 80085f0:	4ba0      	ldr	r3, [pc, #640]	@ (8008874 <ETS+0x270c>)
 80085f2:	f7f8 f821 	bl	8000638 <__aeabi_dmul>
 80085f6:	4602      	mov	r2, r0
 80085f8:	460b      	mov	r3, r1
 80085fa:	4610      	mov	r0, r2
 80085fc:	4619      	mov	r1, r3
 80085fe:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008602:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8008606:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800860a:	f7f8 f815 	bl	8000638 <__aeabi_dmul>
 800860e:	4602      	mov	r2, r0
 8008610:	460b      	mov	r3, r1
 8008612:	4610      	mov	r0, r2
 8008614:	4619      	mov	r1, r3
 8008616:	4b99      	ldr	r3, [pc, #612]	@ (800887c <ETS+0x2714>)
 8008618:	443b      	add	r3, r7
 800861a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861e:	f7f8 f80b 	bl	8000638 <__aeabi_dmul>
 8008622:	4602      	mov	r2, r0
 8008624:	460b      	mov	r3, r1
 8008626:	4620      	mov	r0, r4
 8008628:	4629      	mov	r1, r5
 800862a:	f7f7 fe4f 	bl	80002cc <__adddf3>
 800862e:	4602      	mov	r2, r0
 8008630:	460b      	mov	r3, r1
 8008632:	4614      	mov	r4, r2
 8008634:	461d      	mov	r5, r3
 8008636:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800863a:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 800863e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008642:	f04f 0200 	mov.w	r2, #0
 8008646:	4b8b      	ldr	r3, [pc, #556]	@ (8008874 <ETS+0x270c>)
 8008648:	f7f7 fff6 	bl	8000638 <__aeabi_dmul>
 800864c:	4602      	mov	r2, r0
 800864e:	460b      	mov	r3, r1
 8008650:	4610      	mov	r0, r2
 8008652:	4619      	mov	r1, r3
 8008654:	4b8a      	ldr	r3, [pc, #552]	@ (8008880 <ETS+0x2718>)
 8008656:	443b      	add	r3, r7
 8008658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865c:	f7f7 ffec 	bl	8000638 <__aeabi_dmul>
 8008660:	4602      	mov	r2, r0
 8008662:	460b      	mov	r3, r1
 8008664:	4620      	mov	r0, r4
 8008666:	4629      	mov	r1, r5
 8008668:	f7f7 fe30 	bl	80002cc <__adddf3>
 800866c:	4602      	mov	r2, r0
 800866e:	460b      	mov	r3, r1
 8008670:	4614      	mov	r4, r2
 8008672:	461d      	mov	r5, r3
 8008674:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008678:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 800867c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008680:	f04f 0200 	mov.w	r2, #0
 8008684:	4b7f      	ldr	r3, [pc, #508]	@ (8008884 <ETS+0x271c>)
 8008686:	f7f7 ffd7 	bl	8000638 <__aeabi_dmul>
 800868a:	4602      	mov	r2, r0
 800868c:	460b      	mov	r3, r1
 800868e:	4610      	mov	r0, r2
 8008690:	4619      	mov	r1, r3
 8008692:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008696:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 800869a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800869e:	f7f7 ffcb 	bl	8000638 <__aeabi_dmul>
 80086a2:	4602      	mov	r2, r0
 80086a4:	460b      	mov	r3, r1
 80086a6:	4610      	mov	r0, r2
 80086a8:	4619      	mov	r1, r3
 80086aa:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80086ae:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80086b2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80086b6:	f7f7 ffbf 	bl	8000638 <__aeabi_dmul>
 80086ba:	4602      	mov	r2, r0
 80086bc:	460b      	mov	r3, r1
 80086be:	4620      	mov	r0, r4
 80086c0:	4629      	mov	r1, r5
 80086c2:	f7f7 fe01 	bl	80002c8 <__aeabi_dsub>
 80086c6:	4602      	mov	r2, r0
 80086c8:	460b      	mov	r3, r1
 80086ca:	496f      	ldr	r1, [pc, #444]	@ (8008888 <ETS+0x2720>)
 80086cc:	4439      	add	r1, r7
 80086ce:	e9c1 2300 	strd	r2, r3, [r1]
    n2 = X1_2*X[4] - X[1]*X[2]*X[3] + X2_2 + X[0]*X3_2 - 4*X[0]*X[4];
 80086d2:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80086d6:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80086da:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80086de:	4b6b      	ldr	r3, [pc, #428]	@ (800888c <ETS+0x2724>)
 80086e0:	443b      	add	r3, r7
 80086e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e6:	f7f7 ffa7 	bl	8000638 <__aeabi_dmul>
 80086ea:	4602      	mov	r2, r0
 80086ec:	460b      	mov	r3, r1
 80086ee:	4614      	mov	r4, r2
 80086f0:	461d      	mov	r5, r3
 80086f2:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80086f6:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80086fa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80086fe:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008702:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8008706:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800870a:	f7f7 ff95 	bl	8000638 <__aeabi_dmul>
 800870e:	4602      	mov	r2, r0
 8008710:	460b      	mov	r3, r1
 8008712:	4610      	mov	r0, r2
 8008714:	4619      	mov	r1, r3
 8008716:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800871a:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 800871e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8008722:	f7f7 ff89 	bl	8000638 <__aeabi_dmul>
 8008726:	4602      	mov	r2, r0
 8008728:	460b      	mov	r3, r1
 800872a:	4620      	mov	r0, r4
 800872c:	4629      	mov	r1, r5
 800872e:	f7f7 fdcb 	bl	80002c8 <__aeabi_dsub>
 8008732:	4602      	mov	r2, r0
 8008734:	460b      	mov	r3, r1
 8008736:	4610      	mov	r0, r2
 8008738:	4619      	mov	r1, r3
 800873a:	4b55      	ldr	r3, [pc, #340]	@ (8008890 <ETS+0x2728>)
 800873c:	443b      	add	r3, r7
 800873e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008742:	f7f7 fdc3 	bl	80002cc <__adddf3>
 8008746:	4602      	mov	r2, r0
 8008748:	460b      	mov	r3, r1
 800874a:	4614      	mov	r4, r2
 800874c:	461d      	mov	r5, r3
 800874e:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008752:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8008756:	e9d3 0100 	ldrd	r0, r1, [r3]
 800875a:	4b4e      	ldr	r3, [pc, #312]	@ (8008894 <ETS+0x272c>)
 800875c:	443b      	add	r3, r7
 800875e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008762:	f7f7 ff69 	bl	8000638 <__aeabi_dmul>
 8008766:	4602      	mov	r2, r0
 8008768:	460b      	mov	r3, r1
 800876a:	4620      	mov	r0, r4
 800876c:	4629      	mov	r1, r5
 800876e:	f7f7 fdad 	bl	80002cc <__adddf3>
 8008772:	4602      	mov	r2, r0
 8008774:	460b      	mov	r3, r1
 8008776:	4614      	mov	r4, r2
 8008778:	461d      	mov	r5, r3
 800877a:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800877e:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8008782:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008786:	f04f 0200 	mov.w	r2, #0
 800878a:	4b3a      	ldr	r3, [pc, #232]	@ (8008874 <ETS+0x270c>)
 800878c:	f7f7 ff54 	bl	8000638 <__aeabi_dmul>
 8008790:	4602      	mov	r2, r0
 8008792:	460b      	mov	r3, r1
 8008794:	4610      	mov	r0, r2
 8008796:	4619      	mov	r1, r3
 8008798:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800879c:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80087a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80087a4:	f7f7 ff48 	bl	8000638 <__aeabi_dmul>
 80087a8:	4602      	mov	r2, r0
 80087aa:	460b      	mov	r3, r1
 80087ac:	4620      	mov	r0, r4
 80087ae:	4629      	mov	r1, r5
 80087b0:	f7f7 fd8a 	bl	80002c8 <__aeabi_dsub>
 80087b4:	4602      	mov	r2, r0
 80087b6:	460b      	mov	r3, r1
 80087b8:	4937      	ldr	r1, [pc, #220]	@ (8008898 <ETS+0x2730>)
 80087ba:	4439      	add	r1, r7
 80087bc:	e9c1 2300 	strd	r2, r3, [r1]
    n3 = 2*X1_2*X3_2*X[4] - 4*X1_2*X4_2 - X[1]*X[2]*X3_2*X[3] + X2_2*X3_2 + X[0]*X3_2 - 8*X[0]*X3_2*X[4] + 16*X[0]*X4_2;
 80087c0:	4b32      	ldr	r3, [pc, #200]	@ (800888c <ETS+0x2724>)
 80087c2:	443b      	add	r3, r7
 80087c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80087c8:	4602      	mov	r2, r0
 80087ca:	460b      	mov	r3, r1
 80087cc:	f7f7 fd7e 	bl	80002cc <__adddf3>
 80087d0:	4602      	mov	r2, r0
 80087d2:	460b      	mov	r3, r1
 80087d4:	4610      	mov	r0, r2
 80087d6:	4619      	mov	r1, r3
 80087d8:	4b2e      	ldr	r3, [pc, #184]	@ (8008894 <ETS+0x272c>)
 80087da:	443b      	add	r3, r7
 80087dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e0:	f7f7 ff2a 	bl	8000638 <__aeabi_dmul>
 80087e4:	4602      	mov	r2, r0
 80087e6:	460b      	mov	r3, r1
 80087e8:	4610      	mov	r0, r2
 80087ea:	4619      	mov	r1, r3
 80087ec:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80087f0:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80087f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80087f8:	f7f7 ff1e 	bl	8000638 <__aeabi_dmul>
 80087fc:	4602      	mov	r2, r0
 80087fe:	460b      	mov	r3, r1
 8008800:	4614      	mov	r4, r2
 8008802:	461d      	mov	r5, r3
 8008804:	f04f 0200 	mov.w	r2, #0
 8008808:	4b1a      	ldr	r3, [pc, #104]	@ (8008874 <ETS+0x270c>)
 800880a:	4920      	ldr	r1, [pc, #128]	@ (800888c <ETS+0x2724>)
 800880c:	4439      	add	r1, r7
 800880e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008812:	f7f7 ff11 	bl	8000638 <__aeabi_dmul>
 8008816:	4602      	mov	r2, r0
 8008818:	460b      	mov	r3, r1
 800881a:	4610      	mov	r0, r2
 800881c:	4619      	mov	r1, r3
 800881e:	4b1f      	ldr	r3, [pc, #124]	@ (800889c <ETS+0x2734>)
 8008820:	443b      	add	r3, r7
 8008822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008826:	f7f7 ff07 	bl	8000638 <__aeabi_dmul>
 800882a:	4602      	mov	r2, r0
 800882c:	460b      	mov	r3, r1
 800882e:	4620      	mov	r0, r4
 8008830:	4629      	mov	r1, r5
 8008832:	f7f7 fd49 	bl	80002c8 <__aeabi_dsub>
 8008836:	4602      	mov	r2, r0
 8008838:	460b      	mov	r3, r1
 800883a:	4614      	mov	r4, r2
 800883c:	461d      	mov	r5, r3
 800883e:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008842:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8008846:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800884a:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800884e:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8008852:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008856:	f7f7 feef 	bl	8000638 <__aeabi_dmul>
 800885a:	4602      	mov	r2, r0
 800885c:	460b      	mov	r3, r1
 800885e:	4610      	mov	r0, r2
 8008860:	4619      	mov	r1, r3
 8008862:	4b0c      	ldr	r3, [pc, #48]	@ (8008894 <ETS+0x272c>)
 8008864:	443b      	add	r3, r7
 8008866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886a:	f7f7 fee5 	bl	8000638 <__aeabi_dmul>
 800886e:	4602      	mov	r2, r0
 8008870:	460b      	mov	r3, r1
 8008872:	e015      	b.n	80088a0 <ETS+0x2738>
 8008874:	40100000 	.word	0x40100000
 8008878:	00029a38 	.word	0x00029a38
 800887c:	00029a30 	.word	0x00029a30
 8008880:	00029a28 	.word	0x00029a28
 8008884:	40300000 	.word	0x40300000
 8008888:	00029ad0 	.word	0x00029ad0
 800888c:	00029a58 	.word	0x00029a58
 8008890:	00029a50 	.word	0x00029a50
 8008894:	00029a48 	.word	0x00029a48
 8008898:	00029ac8 	.word	0x00029ac8
 800889c:	00029a40 	.word	0x00029a40
 80088a0:	4610      	mov	r0, r2
 80088a2:	4619      	mov	r1, r3
 80088a4:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80088a8:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80088ac:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80088b0:	f7f7 fec2 	bl	8000638 <__aeabi_dmul>
 80088b4:	4602      	mov	r2, r0
 80088b6:	460b      	mov	r3, r1
 80088b8:	4620      	mov	r0, r4
 80088ba:	4629      	mov	r1, r5
 80088bc:	f7f7 fd04 	bl	80002c8 <__aeabi_dsub>
 80088c0:	4602      	mov	r2, r0
 80088c2:	460b      	mov	r3, r1
 80088c4:	4614      	mov	r4, r2
 80088c6:	461d      	mov	r5, r3
 80088c8:	4bc2      	ldr	r3, [pc, #776]	@ (8008bd4 <ETS+0x2a6c>)
 80088ca:	443b      	add	r3, r7
 80088cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d0:	49c1      	ldr	r1, [pc, #772]	@ (8008bd8 <ETS+0x2a70>)
 80088d2:	4439      	add	r1, r7
 80088d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088d8:	f7f7 feae 	bl	8000638 <__aeabi_dmul>
 80088dc:	4602      	mov	r2, r0
 80088de:	460b      	mov	r3, r1
 80088e0:	4620      	mov	r0, r4
 80088e2:	4629      	mov	r1, r5
 80088e4:	f7f7 fcf2 	bl	80002cc <__adddf3>
 80088e8:	4602      	mov	r2, r0
 80088ea:	460b      	mov	r3, r1
 80088ec:	4614      	mov	r4, r2
 80088ee:	461d      	mov	r5, r3
 80088f0:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80088f4:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80088f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80088fc:	4bb5      	ldr	r3, [pc, #724]	@ (8008bd4 <ETS+0x2a6c>)
 80088fe:	443b      	add	r3, r7
 8008900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008904:	f7f7 fe98 	bl	8000638 <__aeabi_dmul>
 8008908:	4602      	mov	r2, r0
 800890a:	460b      	mov	r3, r1
 800890c:	4620      	mov	r0, r4
 800890e:	4629      	mov	r1, r5
 8008910:	f7f7 fcdc 	bl	80002cc <__adddf3>
 8008914:	4602      	mov	r2, r0
 8008916:	460b      	mov	r3, r1
 8008918:	4614      	mov	r4, r2
 800891a:	461d      	mov	r5, r3
 800891c:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008920:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8008924:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008928:	f04f 0200 	mov.w	r2, #0
 800892c:	4bab      	ldr	r3, [pc, #684]	@ (8008bdc <ETS+0x2a74>)
 800892e:	f7f7 fe83 	bl	8000638 <__aeabi_dmul>
 8008932:	4602      	mov	r2, r0
 8008934:	460b      	mov	r3, r1
 8008936:	4610      	mov	r0, r2
 8008938:	4619      	mov	r1, r3
 800893a:	4ba6      	ldr	r3, [pc, #664]	@ (8008bd4 <ETS+0x2a6c>)
 800893c:	443b      	add	r3, r7
 800893e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008942:	f7f7 fe79 	bl	8000638 <__aeabi_dmul>
 8008946:	4602      	mov	r2, r0
 8008948:	460b      	mov	r3, r1
 800894a:	4610      	mov	r0, r2
 800894c:	4619      	mov	r1, r3
 800894e:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008952:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8008956:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800895a:	f7f7 fe6d 	bl	8000638 <__aeabi_dmul>
 800895e:	4602      	mov	r2, r0
 8008960:	460b      	mov	r3, r1
 8008962:	4620      	mov	r0, r4
 8008964:	4629      	mov	r1, r5
 8008966:	f7f7 fcaf 	bl	80002c8 <__aeabi_dsub>
 800896a:	4602      	mov	r2, r0
 800896c:	460b      	mov	r3, r1
 800896e:	4614      	mov	r4, r2
 8008970:	461d      	mov	r5, r3
 8008972:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008976:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 800897a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800897e:	f04f 0200 	mov.w	r2, #0
 8008982:	4b97      	ldr	r3, [pc, #604]	@ (8008be0 <ETS+0x2a78>)
 8008984:	f7f7 fe58 	bl	8000638 <__aeabi_dmul>
 8008988:	4602      	mov	r2, r0
 800898a:	460b      	mov	r3, r1
 800898c:	4610      	mov	r0, r2
 800898e:	4619      	mov	r1, r3
 8008990:	4b94      	ldr	r3, [pc, #592]	@ (8008be4 <ETS+0x2a7c>)
 8008992:	443b      	add	r3, r7
 8008994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008998:	f7f7 fe4e 	bl	8000638 <__aeabi_dmul>
 800899c:	4602      	mov	r2, r0
 800899e:	460b      	mov	r3, r1
 80089a0:	4620      	mov	r0, r4
 80089a2:	4629      	mov	r1, r5
 80089a4:	f7f7 fc92 	bl	80002cc <__adddf3>
 80089a8:	4602      	mov	r2, r0
 80089aa:	460b      	mov	r3, r1
 80089ac:	498e      	ldr	r1, [pc, #568]	@ (8008be8 <ETS+0x2a80>)
 80089ae:	4439      	add	r1, r7
 80089b0:	e9c1 2300 	strd	r2, r3, [r1]
    n4 = 4*X[4] - X3_2;
 80089b4:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80089b8:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80089bc:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80089c0:	f04f 0200 	mov.w	r2, #0
 80089c4:	4b89      	ldr	r3, [pc, #548]	@ (8008bec <ETS+0x2a84>)
 80089c6:	f7f7 fe37 	bl	8000638 <__aeabi_dmul>
 80089ca:	4602      	mov	r2, r0
 80089cc:	460b      	mov	r3, r1
 80089ce:	4610      	mov	r0, r2
 80089d0:	4619      	mov	r1, r3
 80089d2:	4b80      	ldr	r3, [pc, #512]	@ (8008bd4 <ETS+0x2a6c>)
 80089d4:	443b      	add	r3, r7
 80089d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089da:	f7f7 fc75 	bl	80002c8 <__aeabi_dsub>
 80089de:	4602      	mov	r2, r0
 80089e0:	460b      	mov	r3, r1
 80089e2:	4983      	ldr	r1, [pc, #524]	@ (8008bf0 <ETS+0x2a88>)
 80089e4:	4439      	add	r1, r7
 80089e6:	e9c1 2300 	strd	r2, r3, [r1]
    n5 = 4*X[0]*X[4] - X2_2;
 80089ea:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80089ee:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 80089f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80089f6:	f04f 0200 	mov.w	r2, #0
 80089fa:	4b7c      	ldr	r3, [pc, #496]	@ (8008bec <ETS+0x2a84>)
 80089fc:	f7f7 fe1c 	bl	8000638 <__aeabi_dmul>
 8008a00:	4602      	mov	r2, r0
 8008a02:	460b      	mov	r3, r1
 8008a04:	4610      	mov	r0, r2
 8008a06:	4619      	mov	r1, r3
 8008a08:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008a0c:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8008a10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a14:	f7f7 fe10 	bl	8000638 <__aeabi_dmul>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	4610      	mov	r0, r2
 8008a1e:	4619      	mov	r1, r3
 8008a20:	4b6d      	ldr	r3, [pc, #436]	@ (8008bd8 <ETS+0x2a70>)
 8008a22:	443b      	add	r3, r7
 8008a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a28:	f7f7 fc4e 	bl	80002c8 <__aeabi_dsub>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	460b      	mov	r3, r1
 8008a30:	4970      	ldr	r1, [pc, #448]	@ (8008bf4 <ETS+0x2a8c>)
 8008a32:	4439      	add	r1, r7
 8008a34:	e9c1 2300 	strd	r2, r3, [r1]
    n6 = 4*X[0] - X1_2;
 8008a38:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008a3c:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8008a40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008a44:	f04f 0200 	mov.w	r2, #0
 8008a48:	4b68      	ldr	r3, [pc, #416]	@ (8008bec <ETS+0x2a84>)
 8008a4a:	f7f7 fdf5 	bl	8000638 <__aeabi_dmul>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	460b      	mov	r3, r1
 8008a52:	4610      	mov	r0, r2
 8008a54:	4619      	mov	r1, r3
 8008a56:	4b68      	ldr	r3, [pc, #416]	@ (8008bf8 <ETS+0x2a90>)
 8008a58:	443b      	add	r3, r7
 8008a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5e:	f7f7 fc33 	bl	80002c8 <__aeabi_dsub>
 8008a62:	4602      	mov	r2, r0
 8008a64:	460b      	mov	r3, r1
 8008a66:	4965      	ldr	r1, [pc, #404]	@ (8008bfc <ETS+0x2a94>)
 8008a68:	4439      	add	r1, r7
 8008a6a:	e9c1 2300 	strd	r2, r3, [r1]

    phi = -atan((fabs(X[4])*sqrt(n1*n5) * (2*X[2] - X[1]*X[3]) * sqrt((X[4]*n4*n6) / n3)) / (X4_2 * sqrt(-n2 / X[4]) * sqrt(n1*n6) * sqrt(-(n2 * n4) / n3) * sqrt(-(n4*n5) / (X[4]*n2))));
 8008a6e:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008a72:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8008a76:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a7a:	61ba      	str	r2, [r7, #24]
 8008a7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008a80:	61fb      	str	r3, [r7, #28]
 8008a82:	4b5c      	ldr	r3, [pc, #368]	@ (8008bf4 <ETS+0x2a8c>)
 8008a84:	443b      	add	r3, r7
 8008a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8a:	495d      	ldr	r1, [pc, #372]	@ (8008c00 <ETS+0x2a98>)
 8008a8c:	4439      	add	r1, r7
 8008a8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a92:	f7f7 fdd1 	bl	8000638 <__aeabi_dmul>
 8008a96:	4602      	mov	r2, r0
 8008a98:	460b      	mov	r3, r1
 8008a9a:	ec43 2b17 	vmov	d7, r2, r3
 8008a9e:	eeb0 0a47 	vmov.f32	s0, s14
 8008aa2:	eef0 0a67 	vmov.f32	s1, s15
 8008aa6:	f00c f81b 	bl	8014ae0 <sqrt>
 8008aaa:	ec53 2b10 	vmov	r2, r3, d0
 8008aae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008ab2:	f7f7 fdc1 	bl	8000638 <__aeabi_dmul>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	460b      	mov	r3, r1
 8008aba:	4690      	mov	r8, r2
 8008abc:	4699      	mov	r9, r3
 8008abe:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008ac2:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8008ac6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8008aca:	4602      	mov	r2, r0
 8008acc:	460b      	mov	r3, r1
 8008ace:	f7f7 fbfd 	bl	80002cc <__adddf3>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	4614      	mov	r4, r2
 8008ad8:	461d      	mov	r5, r3
 8008ada:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008ade:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8008ae2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008ae6:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008aea:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8008aee:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8008af2:	f7f7 fda1 	bl	8000638 <__aeabi_dmul>
 8008af6:	4602      	mov	r2, r0
 8008af8:	460b      	mov	r3, r1
 8008afa:	4620      	mov	r0, r4
 8008afc:	4629      	mov	r1, r5
 8008afe:	f7f7 fbe3 	bl	80002c8 <__aeabi_dsub>
 8008b02:	4602      	mov	r2, r0
 8008b04:	460b      	mov	r3, r1
 8008b06:	4640      	mov	r0, r8
 8008b08:	4649      	mov	r1, r9
 8008b0a:	f7f7 fd95 	bl	8000638 <__aeabi_dmul>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	460b      	mov	r3, r1
 8008b12:	4614      	mov	r4, r2
 8008b14:	461d      	mov	r5, r3
 8008b16:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008b1a:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8008b1e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8008b22:	4b33      	ldr	r3, [pc, #204]	@ (8008bf0 <ETS+0x2a88>)
 8008b24:	443b      	add	r3, r7
 8008b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2a:	f7f7 fd85 	bl	8000638 <__aeabi_dmul>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	460b      	mov	r3, r1
 8008b32:	4610      	mov	r0, r2
 8008b34:	4619      	mov	r1, r3
 8008b36:	4b31      	ldr	r3, [pc, #196]	@ (8008bfc <ETS+0x2a94>)
 8008b38:	443b      	add	r3, r7
 8008b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3e:	f7f7 fd7b 	bl	8000638 <__aeabi_dmul>
 8008b42:	4602      	mov	r2, r0
 8008b44:	460b      	mov	r3, r1
 8008b46:	4610      	mov	r0, r2
 8008b48:	4619      	mov	r1, r3
 8008b4a:	4b27      	ldr	r3, [pc, #156]	@ (8008be8 <ETS+0x2a80>)
 8008b4c:	443b      	add	r3, r7
 8008b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b52:	f7f7 fe9b 	bl	800088c <__aeabi_ddiv>
 8008b56:	4602      	mov	r2, r0
 8008b58:	460b      	mov	r3, r1
 8008b5a:	ec43 2b17 	vmov	d7, r2, r3
 8008b5e:	eeb0 0a47 	vmov.f32	s0, s14
 8008b62:	eef0 0a67 	vmov.f32	s1, s15
 8008b66:	f00b ffbb 	bl	8014ae0 <sqrt>
 8008b6a:	ec53 2b10 	vmov	r2, r3, d0
 8008b6e:	4620      	mov	r0, r4
 8008b70:	4629      	mov	r1, r5
 8008b72:	f7f7 fd61 	bl	8000638 <__aeabi_dmul>
 8008b76:	4602      	mov	r2, r0
 8008b78:	460b      	mov	r3, r1
 8008b7a:	4690      	mov	r8, r2
 8008b7c:	4699      	mov	r9, r3
 8008b7e:	4b21      	ldr	r3, [pc, #132]	@ (8008c04 <ETS+0x2a9c>)
 8008b80:	443b      	add	r3, r7
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	613b      	str	r3, [r7, #16]
 8008b86:	4b20      	ldr	r3, [pc, #128]	@ (8008c08 <ETS+0x2aa0>)
 8008b88:	443b      	add	r3, r7
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8008b90:	617b      	str	r3, [r7, #20]
 8008b92:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008b96:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8008b9a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b9e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008ba2:	f7f7 fe73 	bl	800088c <__aeabi_ddiv>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	460b      	mov	r3, r1
 8008baa:	ec43 2b17 	vmov	d7, r2, r3
 8008bae:	eeb0 0a47 	vmov.f32	s0, s14
 8008bb2:	eef0 0a67 	vmov.f32	s1, s15
 8008bb6:	f00b ff93 	bl	8014ae0 <sqrt>
 8008bba:	ec51 0b10 	vmov	r0, r1, d0
 8008bbe:	4b09      	ldr	r3, [pc, #36]	@ (8008be4 <ETS+0x2a7c>)
 8008bc0:	443b      	add	r3, r7
 8008bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc6:	f7f7 fd37 	bl	8000638 <__aeabi_dmul>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	460b      	mov	r3, r1
 8008bce:	4614      	mov	r4, r2
 8008bd0:	461d      	mov	r5, r3
 8008bd2:	e01b      	b.n	8008c0c <ETS+0x2aa4>
 8008bd4:	00029a48 	.word	0x00029a48
 8008bd8:	00029a50 	.word	0x00029a50
 8008bdc:	40200000 	.word	0x40200000
 8008be0:	40300000 	.word	0x40300000
 8008be4:	00029a40 	.word	0x00029a40
 8008be8:	00029ac0 	.word	0x00029ac0
 8008bec:	40100000 	.word	0x40100000
 8008bf0:	00029ab8 	.word	0x00029ab8
 8008bf4:	00029ab0 	.word	0x00029ab0
 8008bf8:	00029a58 	.word	0x00029a58
 8008bfc:	00029aa8 	.word	0x00029aa8
 8008c00:	00029ad0 	.word	0x00029ad0
 8008c04:	00029ac8 	.word	0x00029ac8
 8008c08:	00029acc 	.word	0x00029acc
 8008c0c:	4b88      	ldr	r3, [pc, #544]	@ (8008e30 <ETS+0x2cc8>)
 8008c0e:	443b      	add	r3, r7
 8008c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c14:	4987      	ldr	r1, [pc, #540]	@ (8008e34 <ETS+0x2ccc>)
 8008c16:	4439      	add	r1, r7
 8008c18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c1c:	f7f7 fd0c 	bl	8000638 <__aeabi_dmul>
 8008c20:	4602      	mov	r2, r0
 8008c22:	460b      	mov	r3, r1
 8008c24:	ec43 2b17 	vmov	d7, r2, r3
 8008c28:	eeb0 0a47 	vmov.f32	s0, s14
 8008c2c:	eef0 0a67 	vmov.f32	s1, s15
 8008c30:	f00b ff56 	bl	8014ae0 <sqrt>
 8008c34:	ec53 2b10 	vmov	r2, r3, d0
 8008c38:	4620      	mov	r0, r4
 8008c3a:	4629      	mov	r1, r5
 8008c3c:	f7f7 fcfc 	bl	8000638 <__aeabi_dmul>
 8008c40:	4602      	mov	r2, r0
 8008c42:	460b      	mov	r3, r1
 8008c44:	4614      	mov	r4, r2
 8008c46:	461d      	mov	r5, r3
 8008c48:	4b7b      	ldr	r3, [pc, #492]	@ (8008e38 <ETS+0x2cd0>)
 8008c4a:	443b      	add	r3, r7
 8008c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c50:	497a      	ldr	r1, [pc, #488]	@ (8008e3c <ETS+0x2cd4>)
 8008c52:	4439      	add	r1, r7
 8008c54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c58:	f7f7 fcee 	bl	8000638 <__aeabi_dmul>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	460b      	mov	r3, r1
 8008c60:	60ba      	str	r2, [r7, #8]
 8008c62:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8008c66:	60fb      	str	r3, [r7, #12]
 8008c68:	4b75      	ldr	r3, [pc, #468]	@ (8008e40 <ETS+0x2cd8>)
 8008c6a:	443b      	add	r3, r7
 8008c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c70:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008c74:	f7f7 fe0a 	bl	800088c <__aeabi_ddiv>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	ec43 2b17 	vmov	d7, r2, r3
 8008c80:	eeb0 0a47 	vmov.f32	s0, s14
 8008c84:	eef0 0a67 	vmov.f32	s1, s15
 8008c88:	f00b ff2a 	bl	8014ae0 <sqrt>
 8008c8c:	ec53 2b10 	vmov	r2, r3, d0
 8008c90:	4620      	mov	r0, r4
 8008c92:	4629      	mov	r1, r5
 8008c94:	f7f7 fcd0 	bl	8000638 <__aeabi_dmul>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	4614      	mov	r4, r2
 8008c9e:	461d      	mov	r5, r3
 8008ca0:	4b68      	ldr	r3, [pc, #416]	@ (8008e44 <ETS+0x2cdc>)
 8008ca2:	443b      	add	r3, r7
 8008ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca8:	4963      	ldr	r1, [pc, #396]	@ (8008e38 <ETS+0x2cd0>)
 8008caa:	4439      	add	r1, r7
 8008cac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cb0:	f7f7 fcc2 	bl	8000638 <__aeabi_dmul>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	603a      	str	r2, [r7, #0]
 8008cba:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8008cbe:	607b      	str	r3, [r7, #4]
 8008cc0:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008cc4:	f6a3 2388 	subw	r3, r3, #2696	@ 0xa88
 8008cc8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8008ccc:	4b5b      	ldr	r3, [pc, #364]	@ (8008e3c <ETS+0x2cd4>)
 8008cce:	443b      	add	r3, r7
 8008cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd4:	f7f7 fcb0 	bl	8000638 <__aeabi_dmul>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	460b      	mov	r3, r1
 8008cdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ce0:	f7f7 fdd4 	bl	800088c <__aeabi_ddiv>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	ec43 2b17 	vmov	d7, r2, r3
 8008cec:	eeb0 0a47 	vmov.f32	s0, s14
 8008cf0:	eef0 0a67 	vmov.f32	s1, s15
 8008cf4:	f00b fef4 	bl	8014ae0 <sqrt>
 8008cf8:	ec53 2b10 	vmov	r2, r3, d0
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	4629      	mov	r1, r5
 8008d00:	f7f7 fc9a 	bl	8000638 <__aeabi_dmul>
 8008d04:	4602      	mov	r2, r0
 8008d06:	460b      	mov	r3, r1
 8008d08:	4640      	mov	r0, r8
 8008d0a:	4649      	mov	r1, r9
 8008d0c:	f7f7 fdbe 	bl	800088c <__aeabi_ddiv>
 8008d10:	4602      	mov	r2, r0
 8008d12:	460b      	mov	r3, r1
 8008d14:	ec43 2b17 	vmov	d7, r2, r3
 8008d18:	eeb0 0a47 	vmov.f32	s0, s14
 8008d1c:	eef0 0a67 	vmov.f32	s1, s15
 8008d20:	f00b ff0a 	bl	8014b38 <atan>
 8008d24:	ec53 2b10 	vmov	r2, r3, d0
 8008d28:	4611      	mov	r1, r2
 8008d2a:	4847      	ldr	r0, [pc, #284]	@ (8008e48 <ETS+0x2ce0>)
 8008d2c:	4438      	add	r0, r7
 8008d2e:	6001      	str	r1, [r0, #0]
 8008d30:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8008d34:	4a45      	ldr	r2, [pc, #276]	@ (8008e4c <ETS+0x2ce4>)
 8008d36:	443a      	add	r2, r7
 8008d38:	6013      	str	r3, [r2, #0]

    p[0] = sx;
 8008d3a:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008d3e:	f6a3 2398 	subw	r3, r3, #2712	@ 0xa98
 8008d42:	6819      	ldr	r1, [r3, #0]
 8008d44:	4b42      	ldr	r3, [pc, #264]	@ (8008e50 <ETS+0x2ce8>)
 8008d46:	443b      	add	r3, r7
 8008d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4c:	e9c1 2300 	strd	r2, r3, [r1]
    p[1] = sy;
 8008d50:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008d54:	f6a3 2398 	subw	r3, r3, #2712	@ 0xa98
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f103 0108 	add.w	r1, r3, #8
 8008d5e:	4b3d      	ldr	r3, [pc, #244]	@ (8008e54 <ETS+0x2cec>)
 8008d60:	443b      	add	r3, r7
 8008d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d66:	e9c1 2300 	strd	r2, r3, [r1]
    p[2] = sz;
 8008d6a:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008d6e:	f6a3 2398 	subw	r3, r3, #2712	@ 0xa98
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f103 0110 	add.w	r1, r3, #16
 8008d78:	4b37      	ldr	r3, [pc, #220]	@ (8008e58 <ETS+0x2cf0>)
 8008d7a:	443b      	add	r3, r7
 8008d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d80:	e9c1 2300 	strd	r2, r3, [r1]
    p[3] = bx;
 8008d84:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008d88:	f6a3 2398 	subw	r3, r3, #2712	@ 0xa98
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f103 0118 	add.w	r1, r3, #24
 8008d92:	4b32      	ldr	r3, [pc, #200]	@ (8008e5c <ETS+0x2cf4>)
 8008d94:	443b      	add	r3, r7
 8008d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9a:	e9c1 2300 	strd	r2, r3, [r1]
    p[4] = by;
 8008d9e:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008da2:	f6a3 2398 	subw	r3, r3, #2712	@ 0xa98
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f103 0120 	add.w	r1, r3, #32
 8008dac:	4b2c      	ldr	r3, [pc, #176]	@ (8008e60 <ETS+0x2cf8>)
 8008dae:	443b      	add	r3, r7
 8008db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db4:	e9c1 2300 	strd	r2, r3, [r1]
    p[5] = bz;
 8008db8:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008dbc:	f6a3 2398 	subw	r3, r3, #2712	@ 0xa98
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8008dc6:	4b27      	ldr	r3, [pc, #156]	@ (8008e64 <ETS+0x2cfc>)
 8008dc8:	443b      	add	r3, r7
 8008dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dce:	e9c1 2300 	strd	r2, r3, [r1]
    p[6] = rho;
 8008dd2:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008dd6:	f6a3 2398 	subw	r3, r3, #2712	@ 0xa98
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008de0:	4b21      	ldr	r3, [pc, #132]	@ (8008e68 <ETS+0x2d00>)
 8008de2:	443b      	add	r3, r7
 8008de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de8:	e9c1 2300 	strd	r2, r3, [r1]
    p[7] = phi;
 8008dec:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008df0:	f6a3 2398 	subw	r3, r3, #2712	@ 0xa98
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008dfa:	4b13      	ldr	r3, [pc, #76]	@ (8008e48 <ETS+0x2ce0>)
 8008dfc:	443b      	add	r3, r7
 8008dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e02:	e9c1 2300 	strd	r2, r3, [r1]
    p[8] = lambida;
 8008e06:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8008e0a:	f6a3 2398 	subw	r3, r3, #2712	@ 0xa98
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8008e14:	4b15      	ldr	r3, [pc, #84]	@ (8008e6c <ETS+0x2d04>)
 8008e16:	443b      	add	r3, r7
 8008e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8008e20:	bf00      	nop
 8008e22:	f507 3726 	add.w	r7, r7, #169984	@ 0x29800
 8008e26:	f507 7746 	add.w	r7, r7, #792	@ 0x318
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e30:	00029aa8 	.word	0x00029aa8
 8008e34:	00029ad0 	.word	0x00029ad0
 8008e38:	00029ab8 	.word	0x00029ab8
 8008e3c:	00029ac8 	.word	0x00029ac8
 8008e40:	00029ac0 	.word	0x00029ac0
 8008e44:	00029ab0 	.word	0x00029ab0
 8008e48:	00029a68 	.word	0x00029a68
 8008e4c:	00029a6c 	.word	0x00029a6c
 8008e50:	00029a88 	.word	0x00029a88
 8008e54:	00029a80 	.word	0x00029a80
 8008e58:	00029a78 	.word	0x00029a78
 8008e5c:	00029aa0 	.word	0x00029aa0
 8008e60:	00029a98 	.word	0x00029a98
 8008e64:	00029a90 	.word	0x00029a90
 8008e68:	00029a70 	.word	0x00029a70
 8008e6c:	00029a60 	.word	0x00029a60

08008e70 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b08c      	sub	sp, #48	@ 0x30
 8008e74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e76:	f107 031c 	add.w	r3, r7, #28
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	601a      	str	r2, [r3, #0]
 8008e7e:	605a      	str	r2, [r3, #4]
 8008e80:	609a      	str	r2, [r3, #8]
 8008e82:	60da      	str	r2, [r3, #12]
 8008e84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008e86:	4b8f      	ldr	r3, [pc, #572]	@ (80090c4 <MX_GPIO_Init+0x254>)
 8008e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e8a:	4a8e      	ldr	r2, [pc, #568]	@ (80090c4 <MX_GPIO_Init+0x254>)
 8008e8c:	f043 0304 	orr.w	r3, r3, #4
 8008e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8008e92:	4b8c      	ldr	r3, [pc, #560]	@ (80090c4 <MX_GPIO_Init+0x254>)
 8008e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e96:	f003 0304 	and.w	r3, r3, #4
 8008e9a:	61bb      	str	r3, [r7, #24]
 8008e9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008e9e:	4b89      	ldr	r3, [pc, #548]	@ (80090c4 <MX_GPIO_Init+0x254>)
 8008ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ea2:	4a88      	ldr	r2, [pc, #544]	@ (80090c4 <MX_GPIO_Init+0x254>)
 8008ea4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8008eaa:	4b86      	ldr	r3, [pc, #536]	@ (80090c4 <MX_GPIO_Init+0x254>)
 8008eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008eb2:	617b      	str	r3, [r7, #20]
 8008eb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008eb6:	4b83      	ldr	r3, [pc, #524]	@ (80090c4 <MX_GPIO_Init+0x254>)
 8008eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eba:	4a82      	ldr	r2, [pc, #520]	@ (80090c4 <MX_GPIO_Init+0x254>)
 8008ebc:	f043 0301 	orr.w	r3, r3, #1
 8008ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8008ec2:	4b80      	ldr	r3, [pc, #512]	@ (80090c4 <MX_GPIO_Init+0x254>)
 8008ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ec6:	f003 0301 	and.w	r3, r3, #1
 8008eca:	613b      	str	r3, [r7, #16]
 8008ecc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ece:	4b7d      	ldr	r3, [pc, #500]	@ (80090c4 <MX_GPIO_Init+0x254>)
 8008ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ed2:	4a7c      	ldr	r2, [pc, #496]	@ (80090c4 <MX_GPIO_Init+0x254>)
 8008ed4:	f043 0302 	orr.w	r3, r3, #2
 8008ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8008eda:	4b7a      	ldr	r3, [pc, #488]	@ (80090c4 <MX_GPIO_Init+0x254>)
 8008edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ede:	f003 0302 	and.w	r3, r3, #2
 8008ee2:	60fb      	str	r3, [r7, #12]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008ee6:	4b77      	ldr	r3, [pc, #476]	@ (80090c4 <MX_GPIO_Init+0x254>)
 8008ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eea:	4a76      	ldr	r2, [pc, #472]	@ (80090c4 <MX_GPIO_Init+0x254>)
 8008eec:	f043 0308 	orr.w	r3, r3, #8
 8008ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8008ef2:	4b74      	ldr	r3, [pc, #464]	@ (80090c4 <MX_GPIO_Init+0x254>)
 8008ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ef6:	f003 0308 	and.w	r3, r3, #8
 8008efa:	60bb      	str	r3, [r7, #8]
 8008efc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008efe:	4b71      	ldr	r3, [pc, #452]	@ (80090c4 <MX_GPIO_Init+0x254>)
 8008f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f02:	4a70      	ldr	r2, [pc, #448]	@ (80090c4 <MX_GPIO_Init+0x254>)
 8008f04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8008f0a:	4b6e      	ldr	r3, [pc, #440]	@ (80090c4 <MX_GPIO_Init+0x254>)
 8008f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f12:	607b      	str	r3, [r7, #4]
 8008f14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SINC_master_GPIO_Port, SINC_master_Pin, GPIO_PIN_RESET);
 8008f16:	2200      	movs	r2, #0
 8008f18:	2108      	movs	r1, #8
 8008f1a:	486b      	ldr	r0, [pc, #428]	@ (80090c8 <MX_GPIO_Init+0x258>)
 8008f1c:	f001 fb1e 	bl	800a55c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8008f20:	2200      	movs	r2, #0
 8008f22:	f244 0181 	movw	r1, #16513	@ 0x4081
 8008f26:	4869      	ldr	r0, [pc, #420]	@ (80090cc <MX_GPIO_Init+0x25c>)
 8008f28:	f001 fb18 	bl	800a55c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	2140      	movs	r1, #64	@ 0x40
 8008f30:	4867      	ldr	r0, [pc, #412]	@ (80090d0 <MX_GPIO_Init+0x260>)
 8008f32:	f001 fb13 	bl	800a55c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8008f36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008f3c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8008f40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f42:	2300      	movs	r3, #0
 8008f44:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8008f46:	f107 031c 	add.w	r3, r7, #28
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	4861      	ldr	r0, [pc, #388]	@ (80090d4 <MX_GPIO_Init+0x264>)
 8008f4e:	f001 f959 	bl	800a204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SINC_slave_Pin;
 8008f52:	2301      	movs	r3, #1
 8008f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f56:	2300      	movs	r3, #0
 8008f58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SINC_slave_GPIO_Port, &GPIO_InitStruct);
 8008f5e:	f107 031c 	add.w	r3, r7, #28
 8008f62:	4619      	mov	r1, r3
 8008f64:	485b      	ldr	r0, [pc, #364]	@ (80090d4 <MX_GPIO_Init+0x264>)
 8008f66:	f001 f94d 	bl	800a204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin;
 8008f6a:	2302      	movs	r3, #2
 8008f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f6e:	2302      	movs	r3, #2
 8008f70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f72:	2300      	movs	r3, #0
 8008f74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f76:	2303      	movs	r3, #3
 8008f78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008f7a:	230b      	movs	r3, #11
 8008f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_MDC_GPIO_Port, &GPIO_InitStruct);
 8008f7e:	f107 031c 	add.w	r3, r7, #28
 8008f82:	4619      	mov	r1, r3
 8008f84:	4853      	ldr	r0, [pc, #332]	@ (80090d4 <MX_GPIO_Init+0x264>)
 8008f86:	f001 f93d 	bl	800a204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8008f8a:	2306      	movs	r3, #6
 8008f8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f8e:	2302      	movs	r3, #2
 8008f90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f92:	2300      	movs	r3, #0
 8008f94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f96:	2303      	movs	r3, #3
 8008f98:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008f9a:	230b      	movs	r3, #11
 8008f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f9e:	f107 031c 	add.w	r3, r7, #28
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	4848      	ldr	r0, [pc, #288]	@ (80090c8 <MX_GPIO_Init+0x258>)
 8008fa6:	f001 f92d 	bl	800a204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SINC_master_Pin;
 8008faa:	2308      	movs	r3, #8
 8008fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SINC_master_GPIO_Port, &GPIO_InitStruct);
 8008fba:	f107 031c 	add.w	r3, r7, #28
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	4841      	ldr	r0, [pc, #260]	@ (80090c8 <MX_GPIO_Init+0x258>)
 8008fc2:	f001 f91f 	bl	800a204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8008fc6:	f244 0381 	movw	r3, #16513	@ 0x4081
 8008fca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008fd8:	f107 031c 	add.w	r3, r7, #28
 8008fdc:	4619      	mov	r1, r3
 8008fde:	483b      	ldr	r0, [pc, #236]	@ (80090cc <MX_GPIO_Init+0x25c>)
 8008fe0:	f001 f910 	bl	800a204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8008fe4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008fe8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fea:	2302      	movs	r3, #2
 8008fec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ff2:	2303      	movs	r3, #3
 8008ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008ff6:	230b      	movs	r3, #11
 8008ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8008ffa:	f107 031c 	add.w	r3, r7, #28
 8008ffe:	4619      	mov	r1, r3
 8009000:	4832      	ldr	r0, [pc, #200]	@ (80090cc <MX_GPIO_Init+0x25c>)
 8009002:	f001 f8ff 	bl	800a204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8009006:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800900a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800900c:	2302      	movs	r3, #2
 800900e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009010:	2300      	movs	r3, #0
 8009012:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009014:	2303      	movs	r3, #3
 8009016:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8009018:	2307      	movs	r3, #7
 800901a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800901c:	f107 031c 	add.w	r3, r7, #28
 8009020:	4619      	mov	r1, r3
 8009022:	482d      	ldr	r0, [pc, #180]	@ (80090d8 <MX_GPIO_Init+0x268>)
 8009024:	f001 f8ee 	bl	800a204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8009028:	2340      	movs	r3, #64	@ 0x40
 800902a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800902c:	2301      	movs	r3, #1
 800902e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009030:	2300      	movs	r3, #0
 8009032:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009034:	2300      	movs	r3, #0
 8009036:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8009038:	f107 031c 	add.w	r3, r7, #28
 800903c:	4619      	mov	r1, r3
 800903e:	4824      	ldr	r0, [pc, #144]	@ (80090d0 <MX_GPIO_Init+0x260>)
 8009040:	f001 f8e0 	bl	800a204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8009044:	2380      	movs	r3, #128	@ 0x80
 8009046:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009048:	2300      	movs	r3, #0
 800904a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800904c:	2300      	movs	r3, #0
 800904e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8009050:	f107 031c 	add.w	r3, r7, #28
 8009054:	4619      	mov	r1, r3
 8009056:	481e      	ldr	r0, [pc, #120]	@ (80090d0 <MX_GPIO_Init+0x260>)
 8009058:	f001 f8d4 	bl	800a204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800905c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8009060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009062:	2302      	movs	r3, #2
 8009064:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009066:	2300      	movs	r3, #0
 8009068:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800906a:	2303      	movs	r3, #3
 800906c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800906e:	230a      	movs	r3, #10
 8009070:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009072:	f107 031c 	add.w	r3, r7, #28
 8009076:	4619      	mov	r1, r3
 8009078:	4813      	ldr	r0, [pc, #76]	@ (80090c8 <MX_GPIO_Init+0x258>)
 800907a:	f001 f8c3 	bl	800a204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800907e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009082:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009084:	2300      	movs	r3, #0
 8009086:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009088:	2300      	movs	r3, #0
 800908a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800908c:	f107 031c 	add.w	r3, r7, #28
 8009090:	4619      	mov	r1, r3
 8009092:	480d      	ldr	r0, [pc, #52]	@ (80090c8 <MX_GPIO_Init+0x258>)
 8009094:	f001 f8b6 	bl	800a204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8009098:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800909c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800909e:	2302      	movs	r3, #2
 80090a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090a2:	2300      	movs	r3, #0
 80090a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090a6:	2303      	movs	r3, #3
 80090a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80090aa:	230b      	movs	r3, #11
 80090ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80090ae:	f107 031c 	add.w	r3, r7, #28
 80090b2:	4619      	mov	r1, r3
 80090b4:	4806      	ldr	r0, [pc, #24]	@ (80090d0 <MX_GPIO_Init+0x260>)
 80090b6:	f001 f8a5 	bl	800a204 <HAL_GPIO_Init>

}
 80090ba:	bf00      	nop
 80090bc:	3730      	adds	r7, #48	@ 0x30
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	40023800 	.word	0x40023800
 80090c8:	40020000 	.word	0x40020000
 80090cc:	40020400 	.word	0x40020400
 80090d0:	40021800 	.word	0x40021800
 80090d4:	40020800 	.word	0x40020800
 80090d8:	40020c00 	.word	0x40020c00

080090dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80090dc:	b5b0      	push	{r4, r5, r7, lr}
 80090de:	f5ad 4dfa 	sub.w	sp, sp, #32000	@ 0x7d00
 80090e2:	b090      	sub	sp, #64	@ 0x40
 80090e4:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
  char file_read[25] = {0};
 80090e6:	2300      	movs	r3, #0
 80090e8:	f647 42f8 	movw	r2, #31992	@ 0x7cf8
 80090ec:	443a      	add	r2, r7
 80090ee:	6013      	str	r3, [r2, #0]
 80090f0:	f647 43fc 	movw	r3, #31996	@ 0x7cfc
 80090f4:	443b      	add	r3, r7
 80090f6:	2200      	movs	r2, #0
 80090f8:	601a      	str	r2, [r3, #0]
 80090fa:	605a      	str	r2, [r3, #4]
 80090fc:	609a      	str	r2, [r3, #8]
 80090fe:	60da      	str	r2, [r3, #12]
 8009100:	611a      	str	r2, [r3, #16]
 8009102:	751a      	strb	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009104:	f000 ff17 	bl	8009f36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009108:	f000 fa96 	bl	8009638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800910c:	f7ff feb0 	bl	8008e70 <MX_GPIO_Init>
  MX_SPI3_Init();
 8009110:	f000 fce0 	bl	8009ad4 <MX_SPI3_Init>
  MX_FATFS_Init();
 8009114:	f002 fd04 	bl	800bb20 <MX_FATFS_Init>
  MX_SPI1_Init();
 8009118:	f000 fc9e 	bl	8009a58 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  uint32_t start_time = 0;
 800911c:	2300      	movs	r3, #0
 800911e:	f647 521c 	movw	r2, #32028	@ 0x7d1c
 8009122:	443a      	add	r2, r7
 8009124:	6013      	str	r3, [r2, #0]
  uint16_t file_cont = 1;
 8009126:	2301      	movs	r3, #1
 8009128:	f647 5236 	movw	r2, #32054	@ 0x7d36
 800912c:	443a      	add	r2, r7
 800912e:	8013      	strh	r3, [r2, #0]
  //union calib_t param1[9], param2[9];
  //float p1[9];
  //uint8_t time1[4], time2[4];
  float NLLS_time = 0, ETS_time = 0;
 8009130:	f04f 0300 	mov.w	r3, #0
 8009134:	f647 5218 	movw	r2, #32024	@ 0x7d18
 8009138:	443a      	add	r2, r7
 800913a:	6013      	str	r3, [r2, #0]
 800913c:	f04f 0300 	mov.w	r3, #0
 8009140:	f647 5214 	movw	r2, #32020	@ 0x7d14
 8009144:	443a      	add	r2, r7
 8009146:	6013      	str	r3, [r2, #0]

  FATFS fs;
  FRESULT res;

  // Monta o sistema de arquivos na unidade lógica "0:"
  res = f_mount(&fs, "0:", 1);
 8009148:	f647 23c0 	movw	r3, #31424	@ 0x7ac0
 800914c:	443b      	add	r3, r7
 800914e:	2201      	movs	r2, #1
 8009150:	4980      	ldr	r1, [pc, #512]	@ (8009354 <main+0x278>)
 8009152:	4618      	mov	r0, r3
 8009154:	f006 f804 	bl	800f160 <f_mount>
 8009158:	4603      	mov	r3, r0
 800915a:	f647 5213 	movw	r2, #32019	@ 0x7d13
 800915e:	443a      	add	r2, r7
 8009160:	7013      	strb	r3, [r2, #0]
  if (res != FR_OK) {
 8009162:	f647 5313 	movw	r3, #32019	@ 0x7d13
 8009166:	443b      	add	r3, r7
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d001      	beq.n	8009172 <main+0x96>
      //printf("Falha ao montar o sistema de arquivos: %d\n", res);
      Error_Handler(); // ou retorne um erro
 800916e:	f000 facf 	bl	8009710 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(file_cont >= 3001)
 8009172:	f647 5336 	movw	r3, #32054	@ 0x7d36
 8009176:	443b      	add	r3, r7
 8009178:	881b      	ldrh	r3, [r3, #0]
 800917a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800917e:	4293      	cmp	r3, r2
 8009180:	d901      	bls.n	8009186 <main+0xaa>
	{
		return 1;
 8009182:	2301      	movs	r3, #1
 8009184:	e239      	b.n	80095fa <main+0x51e>
	}

	sprintf(file_read, "0:/DATA1/run%d.txt", file_cont);  // Prefixo de volume (0:) é comum no FatFs
 8009186:	f647 5336 	movw	r3, #32054	@ 0x7d36
 800918a:	443b      	add	r3, r7
 800918c:	881a      	ldrh	r2, [r3, #0]
 800918e:	f647 43f8 	movw	r3, #31992	@ 0x7cf8
 8009192:	443b      	add	r3, r7
 8009194:	4970      	ldr	r1, [pc, #448]	@ (8009358 <main+0x27c>)
 8009196:	4618      	mov	r0, r3
 8009198:	f008 fe16 	bl	8011dc8 <siprintf>

	FIL fil;
	FRESULT res;

	res = f_open(&fil, file_read, FA_READ);
 800919c:	f647 41f8 	movw	r1, #31992	@ 0x7cf8
 80091a0:	4439      	add	r1, r7
 80091a2:	4b6e      	ldr	r3, [pc, #440]	@ (800935c <main+0x280>)
 80091a4:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 80091a8:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80091ac:	443b      	add	r3, r7
 80091ae:	2201      	movs	r2, #1
 80091b0:	4618      	mov	r0, r3
 80091b2:	f006 f81b 	bl	800f1ec <f_open>
 80091b6:	4603      	mov	r3, r0
 80091b8:	f647 5212 	movw	r2, #32018	@ 0x7d12
 80091bc:	443a      	add	r2, r7
 80091be:	7013      	strb	r3, [r2, #0]
	if (res != FR_OK)
 80091c0:	f647 5312 	movw	r3, #32018	@ 0x7d12
 80091c4:	443b      	add	r3, r7
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d001      	beq.n	80091d0 <main+0xf4>
	{
		return 1;
 80091cc:	2301      	movs	r3, #1
 80091ce:	e214      	b.n	80095fa <main+0x51e>
	}

	char line[30670];
	UINT br; // Bytes lidos

	double *linhas[] = {mx, my, mz};  // Vetor de ponteiros para facilitar o acesso
 80091d0:	f647 5338 	movw	r3, #32056	@ 0x7d38
 80091d4:	443b      	add	r3, r7
 80091d6:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 80091da:	4a61      	ldr	r2, [pc, #388]	@ (8009360 <main+0x284>)
 80091dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80091de:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	for (int i = 0; i < 3; i++)
 80091e2:	2300      	movs	r3, #0
 80091e4:	f647 5230 	movw	r2, #32048	@ 0x7d30
 80091e8:	443a      	add	r2, r7
 80091ea:	6013      	str	r3, [r2, #0]
 80091ec:	e0c7      	b.n	800937e <main+0x2a2>
	{
		// lê uma linha completa (até '\n' ou fim do buffer)
		int line_pos = 0;
 80091ee:	2300      	movs	r3, #0
 80091f0:	f647 522c 	movw	r2, #32044	@ 0x7d2c
 80091f4:	443a      	add	r2, r7
 80091f6:	6013      	str	r3, [r2, #0]
		char ch;
		do {
			res = f_read(&fil, &ch, 1, &br);
 80091f8:	f647 23bc 	movw	r3, #31420	@ 0x7abc
 80091fc:	443b      	add	r3, r7
 80091fe:	f647 21ab 	movw	r1, #31403	@ 0x7aab
 8009202:	4439      	add	r1, r7
 8009204:	4855      	ldr	r0, [pc, #340]	@ (800935c <main+0x280>)
 8009206:	f647 5238 	movw	r2, #32056	@ 0x7d38
 800920a:	4402      	add	r2, r0
 800920c:	19d0      	adds	r0, r2, r7
 800920e:	2201      	movs	r2, #1
 8009210:	f006 faa9 	bl	800f766 <f_read>
 8009214:	4603      	mov	r3, r0
 8009216:	f647 5212 	movw	r2, #32018	@ 0x7d12
 800921a:	443a      	add	r2, r7
 800921c:	7013      	strb	r3, [r2, #0]
			if (res != FR_OK || br == 0) {
 800921e:	f647 5312 	movw	r3, #32018	@ 0x7d12
 8009222:	443b      	add	r3, r7
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d107      	bne.n	800923a <main+0x15e>
 800922a:	f647 5338 	movw	r3, #32056	@ 0x7d38
 800922e:	443b      	add	r3, r7
 8009230:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d101      	bne.n	800923e <main+0x162>
				return 1;
 800923a:	2301      	movs	r3, #1
 800923c:	e1dd      	b.n	80095fa <main+0x51e>
			}
			line[line_pos++] = ch;
 800923e:	f647 532c 	movw	r3, #32044	@ 0x7d2c
 8009242:	443b      	add	r3, r7
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	1c5a      	adds	r2, r3, #1
 8009248:	f647 512c 	movw	r1, #32044	@ 0x7d2c
 800924c:	4439      	add	r1, r7
 800924e:	600a      	str	r2, [r1, #0]
 8009250:	f647 5238 	movw	r2, #32056	@ 0x7d38
 8009254:	443a      	add	r2, r7
 8009256:	f2a2 228d 	subw	r2, r2, #653	@ 0x28d
 800925a:	7811      	ldrb	r1, [r2, #0]
 800925c:	f607 5238 	addw	r2, r7, #3384	@ 0xd38
 8009260:	f6a2 225c 	subw	r2, r2, #2652	@ 0xa5c
 8009264:	54d1      	strb	r1, [r2, r3]
		} while (ch != '\n' && line_pos < sizeof(line)-1);
 8009266:	f647 5338 	movw	r3, #32056	@ 0x7d38
 800926a:	443b      	add	r3, r7
 800926c:	f2a3 238d 	subw	r3, r3, #653	@ 0x28d
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	2b0a      	cmp	r3, #10
 8009274:	d007      	beq.n	8009286 <main+0x1aa>
 8009276:	f647 532c 	movw	r3, #32044	@ 0x7d2c
 800927a:	443b      	add	r3, r7
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f247 72cc 	movw	r2, #30668	@ 0x77cc
 8009282:	4293      	cmp	r3, r2
 8009284:	d9b8      	bls.n	80091f8 <main+0x11c>
		line[line_pos] = '\0';
 8009286:	f607 5338 	addw	r3, r7, #3384	@ 0xd38
 800928a:	f6a3 225c 	subw	r2, r3, #2652	@ 0xa5c
 800928e:	f647 532c 	movw	r3, #32044	@ 0x7d2c
 8009292:	443b      	add	r3, r7
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4413      	add	r3, r2
 8009298:	2200      	movs	r2, #0
 800929a:	701a      	strb	r2, [r3, #0]

		char *token = strtok(line, ",");
 800929c:	4b31      	ldr	r3, [pc, #196]	@ (8009364 <main+0x288>)
 800929e:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 80092a2:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80092a6:	443b      	add	r3, r7
 80092a8:	492f      	ldr	r1, [pc, #188]	@ (8009368 <main+0x28c>)
 80092aa:	4618      	mov	r0, r3
 80092ac:	f008 fe0a 	bl	8011ec4 <strtok>
 80092b0:	f647 5328 	movw	r3, #32040	@ 0x7d28
 80092b4:	443b      	add	r3, r7
 80092b6:	6018      	str	r0, [r3, #0]
		int j = 0;
 80092b8:	2300      	movs	r3, #0
 80092ba:	f647 5224 	movw	r2, #32036	@ 0x7d24
 80092be:	443a      	add	r2, r7
 80092c0:	6013      	str	r3, [r2, #0]

		while (token != NULL && j < tam)
 80092c2:	e031      	b.n	8009328 <main+0x24c>
		{
			linhas[i][j] = strtof(token, NULL);
 80092c4:	2100      	movs	r1, #0
 80092c6:	f647 5328 	movw	r3, #32040	@ 0x7d28
 80092ca:	443b      	add	r3, r7
 80092cc:	6818      	ldr	r0, [r3, #0]
 80092ce:	f007 fde9 	bl	8010ea4 <strtof>
 80092d2:	ee10 1a10 	vmov	r1, s0
 80092d6:	f647 5338 	movw	r3, #32056	@ 0x7d38
 80092da:	443b      	add	r3, r7
 80092dc:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 80092e0:	f647 5230 	movw	r2, #32048	@ 0x7d30
 80092e4:	443a      	add	r2, r7
 80092e6:	6812      	ldr	r2, [r2, #0]
 80092e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80092ec:	f647 5324 	movw	r3, #32036	@ 0x7d24
 80092f0:	443b      	add	r3, r7
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	00db      	lsls	r3, r3, #3
 80092f6:	18d4      	adds	r4, r2, r3
 80092f8:	4608      	mov	r0, r1
 80092fa:	f7f7 f945 	bl	8000588 <__aeabi_f2d>
 80092fe:	4602      	mov	r2, r0
 8009300:	460b      	mov	r3, r1
 8009302:	e9c4 2300 	strd	r2, r3, [r4]
			token = strtok(NULL, ",");
 8009306:	4918      	ldr	r1, [pc, #96]	@ (8009368 <main+0x28c>)
 8009308:	2000      	movs	r0, #0
 800930a:	f008 fddb 	bl	8011ec4 <strtok>
 800930e:	f647 5328 	movw	r3, #32040	@ 0x7d28
 8009312:	443b      	add	r3, r7
 8009314:	6018      	str	r0, [r3, #0]
			j++;
 8009316:	f647 5324 	movw	r3, #32036	@ 0x7d24
 800931a:	443b      	add	r3, r7
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	3301      	adds	r3, #1
 8009320:	f647 5224 	movw	r2, #32036	@ 0x7d24
 8009324:	443a      	add	r2, r7
 8009326:	6013      	str	r3, [r2, #0]
		while (token != NULL && j < tam)
 8009328:	f647 5328 	movw	r3, #32040	@ 0x7d28
 800932c:	443b      	add	r3, r7
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d006      	beq.n	8009342 <main+0x266>
 8009334:	f647 5324 	movw	r3, #32036	@ 0x7d24
 8009338:	443b      	add	r3, r7
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8009340:	dbc0      	blt.n	80092c4 <main+0x1e8>
		}

		if (j != tam)
 8009342:	f647 5324 	movw	r3, #32036	@ 0x7d24
 8009346:	443b      	add	r3, r7
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 800934e:	d00d      	beq.n	800936c <main+0x290>
		{
			return 1;
 8009350:	2301      	movs	r3, #1
 8009352:	e152      	b.n	80095fa <main+0x51e>
 8009354:	08016188 	.word	0x08016188
 8009358:	0801618c 	.word	0x0801618c
 800935c:	ffff8348 	.word	0xffff8348
 8009360:	080161c8 	.word	0x080161c8
 8009364:	ffff85a4 	.word	0xffff85a4
 8009368:	080161a0 	.word	0x080161a0
	for (int i = 0; i < 3; i++)
 800936c:	f647 5330 	movw	r3, #32048	@ 0x7d30
 8009370:	443b      	add	r3, r7
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	3301      	adds	r3, #1
 8009376:	f647 5230 	movw	r2, #32048	@ 0x7d30
 800937a:	443a      	add	r2, r7
 800937c:	6013      	str	r3, [r2, #0]
 800937e:	f647 5330 	movw	r3, #32048	@ 0x7d30
 8009382:	443b      	add	r3, r7
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	2b02      	cmp	r3, #2
 8009388:	f77f af31 	ble.w	80091ee <main+0x112>
		}
	}

	f_close(&fil);
 800938c:	4b9e      	ldr	r3, [pc, #632]	@ (8009608 <main+0x52c>)
 800938e:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 8009392:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8009396:	443b      	add	r3, r7
 8009398:	4618      	mov	r0, r3
 800939a:	f006 fe2e 	bl	800fffa <f_close>
		mx_[i].flutuante = mx[i];
		my_[i].flutuante = my[i];
		mz_[i].flutuante = mz[i];
	}*/

	start_time = HAL_GetTick();
 800939e:	f000 fe1b 	bl	8009fd8 <HAL_GetTick>
 80093a2:	f647 531c 	movw	r3, #32028	@ 0x7d1c
 80093a6:	443b      	add	r3, r7
 80093a8:	6018      	str	r0, [r3, #0]
	ETS(mx, my, mz, p0);
 80093aa:	4b98      	ldr	r3, [pc, #608]	@ (800960c <main+0x530>)
 80093ac:	4a98      	ldr	r2, [pc, #608]	@ (8009610 <main+0x534>)
 80093ae:	4999      	ldr	r1, [pc, #612]	@ (8009614 <main+0x538>)
 80093b0:	4899      	ldr	r0, [pc, #612]	@ (8009618 <main+0x53c>)
 80093b2:	f7fc fed9 	bl	8006168 <ETS>
	ETS_time = HAL_GetTick() - start_time;
 80093b6:	f000 fe0f 	bl	8009fd8 <HAL_GetTick>
 80093ba:	4602      	mov	r2, r0
 80093bc:	f647 531c 	movw	r3, #32028	@ 0x7d1c
 80093c0:	443b      	add	r3, r7
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	1ad3      	subs	r3, r2, r3
 80093c6:	ee07 3a90 	vmov	s15, r3
 80093ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ce:	f647 5314 	movw	r3, #32020	@ 0x7d14
 80093d2:	443b      	add	r3, r7
 80093d4:	edc3 7a00 	vstr	s15, [r3]

	start_time = HAL_GetTick();
 80093d8:	f000 fdfe 	bl	8009fd8 <HAL_GetTick>
 80093dc:	f647 531c 	movw	r3, #32028	@ 0x7d1c
 80093e0:	443b      	add	r3, r7
 80093e2:	6018      	str	r0, [r3, #0]
	passos_NLLS = NLLS(mx, my, mz, p1);
 80093e4:	4b8d      	ldr	r3, [pc, #564]	@ (800961c <main+0x540>)
 80093e6:	4a8a      	ldr	r2, [pc, #552]	@ (8009610 <main+0x534>)
 80093e8:	498a      	ldr	r1, [pc, #552]	@ (8009614 <main+0x538>)
 80093ea:	488b      	ldr	r0, [pc, #556]	@ (8009618 <main+0x53c>)
 80093ec:	f7f7 ff58 	bl	80012a0 <NLLS>
 80093f0:	4603      	mov	r3, r0
 80093f2:	461a      	mov	r2, r3
 80093f4:	4b8a      	ldr	r3, [pc, #552]	@ (8009620 <main+0x544>)
 80093f6:	701a      	strb	r2, [r3, #0]
	NLLS_time = HAL_GetTick() - start_time;
 80093f8:	f000 fdee 	bl	8009fd8 <HAL_GetTick>
 80093fc:	4602      	mov	r2, r0
 80093fe:	f647 531c 	movw	r3, #32028	@ 0x7d1c
 8009402:	443b      	add	r3, r7
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	1ad3      	subs	r3, r2, r3
 8009408:	ee07 3a90 	vmov	s15, r3
 800940c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009410:	f647 5318 	movw	r3, #32024	@ 0x7d18
 8009414:	443b      	add	r3, r7
 8009416:	edc3 7a00 	vstr	s15, [r3]





	sprintf(file_read, "0:/RES/run%d.txt", file_cont);
 800941a:	f647 5336 	movw	r3, #32054	@ 0x7d36
 800941e:	443b      	add	r3, r7
 8009420:	881a      	ldrh	r2, [r3, #0]
 8009422:	f647 43f8 	movw	r3, #31992	@ 0x7cf8
 8009426:	443b      	add	r3, r7
 8009428:	497e      	ldr	r1, [pc, #504]	@ (8009624 <main+0x548>)
 800942a:	4618      	mov	r0, r3
 800942c:	f008 fccc 	bl	8011dc8 <siprintf>
	res = f_open(&fil, file_read, FA_WRITE | FA_CREATE_ALWAYS);
 8009430:	f647 41f8 	movw	r1, #31992	@ 0x7cf8
 8009434:	4439      	add	r1, r7
 8009436:	4b74      	ldr	r3, [pc, #464]	@ (8009608 <main+0x52c>)
 8009438:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 800943c:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8009440:	443b      	add	r3, r7
 8009442:	220a      	movs	r2, #10
 8009444:	4618      	mov	r0, r3
 8009446:	f005 fed1 	bl	800f1ec <f_open>
 800944a:	4603      	mov	r3, r0
 800944c:	f647 5212 	movw	r2, #32018	@ 0x7d12
 8009450:	443a      	add	r2, r7
 8009452:	7013      	strb	r3, [r2, #0]
	if (res != FR_OK)
 8009454:	f647 5312 	movw	r3, #32018	@ 0x7d12
 8009458:	443b      	add	r3, r7
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d001      	beq.n	8009464 <main+0x388>
	{
		return 1;
 8009460:	2301      	movs	r3, #1
 8009462:	e0ca      	b.n	80095fa <main+0x51e>
	}

	char out_line[128];
	UINT bw;

	for (int i = 0; i < 9; i++) {
 8009464:	2300      	movs	r3, #0
 8009466:	f647 5220 	movw	r2, #32032	@ 0x7d20
 800946a:	443a      	add	r2, r7
 800946c:	6013      	str	r3, [r2, #0]
 800946e:	e041      	b.n	80094f4 <main+0x418>
		sprintf(out_line, "%f, %f\n", p0[i], p1[i]);
 8009470:	4a66      	ldr	r2, [pc, #408]	@ (800960c <main+0x530>)
 8009472:	f647 5320 	movw	r3, #32032	@ 0x7d20
 8009476:	443b      	add	r3, r7
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	00db      	lsls	r3, r3, #3
 800947c:	4413      	add	r3, r2
 800947e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009482:	4a66      	ldr	r2, [pc, #408]	@ (800961c <main+0x540>)
 8009484:	f647 5320 	movw	r3, #32032	@ 0x7d20
 8009488:	443b      	add	r3, r7
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	00db      	lsls	r3, r3, #3
 800948e:	4413      	add	r3, r2
 8009490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009494:	4864      	ldr	r0, [pc, #400]	@ (8009628 <main+0x54c>)
 8009496:	f647 5138 	movw	r1, #32056	@ 0x7d38
 800949a:	4401      	add	r1, r0
 800949c:	19c8      	adds	r0, r1, r7
 800949e:	e9cd 2300 	strd	r2, r3, [sp]
 80094a2:	4622      	mov	r2, r4
 80094a4:	462b      	mov	r3, r5
 80094a6:	4961      	ldr	r1, [pc, #388]	@ (800962c <main+0x550>)
 80094a8:	f008 fc8e 	bl	8011dc8 <siprintf>
		f_write(&fil, out_line, strlen(out_line), &bw);
 80094ac:	4b5e      	ldr	r3, [pc, #376]	@ (8009628 <main+0x54c>)
 80094ae:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 80094b2:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80094b6:	443b      	add	r3, r7
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7f6 fef9 	bl	80002b0 <strlen>
 80094be:	4602      	mov	r2, r0
 80094c0:	f647 23ac 	movw	r3, #31404	@ 0x7aac
 80094c4:	443b      	add	r3, r7
 80094c6:	4958      	ldr	r1, [pc, #352]	@ (8009628 <main+0x54c>)
 80094c8:	f501 41fa 	add.w	r1, r1, #32000	@ 0x7d00
 80094cc:	f101 0138 	add.w	r1, r1, #56	@ 0x38
 80094d0:	4439      	add	r1, r7
 80094d2:	484d      	ldr	r0, [pc, #308]	@ (8009608 <main+0x52c>)
 80094d4:	f500 40fa 	add.w	r0, r0, #32000	@ 0x7d00
 80094d8:	f100 0038 	add.w	r0, r0, #56	@ 0x38
 80094dc:	4438      	add	r0, r7
 80094de:	f006 faba 	bl	800fa56 <f_write>
	for (int i = 0; i < 9; i++) {
 80094e2:	f647 5320 	movw	r3, #32032	@ 0x7d20
 80094e6:	443b      	add	r3, r7
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	3301      	adds	r3, #1
 80094ec:	f647 5220 	movw	r2, #32032	@ 0x7d20
 80094f0:	443a      	add	r2, r7
 80094f2:	6013      	str	r3, [r2, #0]
 80094f4:	f647 5320 	movw	r3, #32032	@ 0x7d20
 80094f8:	443b      	add	r3, r7
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2b08      	cmp	r3, #8
 80094fe:	ddb7      	ble.n	8009470 <main+0x394>
	}

	sprintf(out_line, "%f, %f\n", ETS_time, NLLS_time);
 8009500:	f647 5314 	movw	r3, #32020	@ 0x7d14
 8009504:	443b      	add	r3, r7
 8009506:	6818      	ldr	r0, [r3, #0]
 8009508:	f7f7 f83e 	bl	8000588 <__aeabi_f2d>
 800950c:	4604      	mov	r4, r0
 800950e:	460d      	mov	r5, r1
 8009510:	f647 5318 	movw	r3, #32024	@ 0x7d18
 8009514:	443b      	add	r3, r7
 8009516:	6818      	ldr	r0, [r3, #0]
 8009518:	f7f7 f836 	bl	8000588 <__aeabi_f2d>
 800951c:	4602      	mov	r2, r0
 800951e:	460b      	mov	r3, r1
 8009520:	4841      	ldr	r0, [pc, #260]	@ (8009628 <main+0x54c>)
 8009522:	f647 5138 	movw	r1, #32056	@ 0x7d38
 8009526:	4401      	add	r1, r0
 8009528:	19c8      	adds	r0, r1, r7
 800952a:	e9cd 2300 	strd	r2, r3, [sp]
 800952e:	4622      	mov	r2, r4
 8009530:	462b      	mov	r3, r5
 8009532:	493e      	ldr	r1, [pc, #248]	@ (800962c <main+0x550>)
 8009534:	f008 fc48 	bl	8011dc8 <siprintf>
	f_write(&fil, out_line, strlen(out_line), &bw);
 8009538:	4b3b      	ldr	r3, [pc, #236]	@ (8009628 <main+0x54c>)
 800953a:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 800953e:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8009542:	443b      	add	r3, r7
 8009544:	4618      	mov	r0, r3
 8009546:	f7f6 feb3 	bl	80002b0 <strlen>
 800954a:	4602      	mov	r2, r0
 800954c:	f647 23ac 	movw	r3, #31404	@ 0x7aac
 8009550:	443b      	add	r3, r7
 8009552:	4935      	ldr	r1, [pc, #212]	@ (8009628 <main+0x54c>)
 8009554:	f501 41fa 	add.w	r1, r1, #32000	@ 0x7d00
 8009558:	f101 0138 	add.w	r1, r1, #56	@ 0x38
 800955c:	4439      	add	r1, r7
 800955e:	482a      	ldr	r0, [pc, #168]	@ (8009608 <main+0x52c>)
 8009560:	f500 40fa 	add.w	r0, r0, #32000	@ 0x7d00
 8009564:	f100 0038 	add.w	r0, r0, #56	@ 0x38
 8009568:	4438      	add	r0, r7
 800956a:	f006 fa74 	bl	800fa56 <f_write>

	sprintf(out_line, "0, %u\n", passos_NLLS);
 800956e:	4b2c      	ldr	r3, [pc, #176]	@ (8009620 <main+0x544>)
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	461a      	mov	r2, r3
 8009574:	4b2c      	ldr	r3, [pc, #176]	@ (8009628 <main+0x54c>)
 8009576:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 800957a:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800957e:	443b      	add	r3, r7
 8009580:	492b      	ldr	r1, [pc, #172]	@ (8009630 <main+0x554>)
 8009582:	4618      	mov	r0, r3
 8009584:	f008 fc20 	bl	8011dc8 <siprintf>
	f_write(&fil, out_line, strlen(out_line), &bw);
 8009588:	4b27      	ldr	r3, [pc, #156]	@ (8009628 <main+0x54c>)
 800958a:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 800958e:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8009592:	443b      	add	r3, r7
 8009594:	4618      	mov	r0, r3
 8009596:	f7f6 fe8b 	bl	80002b0 <strlen>
 800959a:	4602      	mov	r2, r0
 800959c:	f647 23ac 	movw	r3, #31404	@ 0x7aac
 80095a0:	443b      	add	r3, r7
 80095a2:	4921      	ldr	r1, [pc, #132]	@ (8009628 <main+0x54c>)
 80095a4:	f501 41fa 	add.w	r1, r1, #32000	@ 0x7d00
 80095a8:	f101 0138 	add.w	r1, r1, #56	@ 0x38
 80095ac:	4439      	add	r1, r7
 80095ae:	4816      	ldr	r0, [pc, #88]	@ (8009608 <main+0x52c>)
 80095b0:	f500 40fa 	add.w	r0, r0, #32000	@ 0x7d00
 80095b4:	f100 0038 	add.w	r0, r0, #56	@ 0x38
 80095b8:	4438      	add	r0, r7
 80095ba:	f006 fa4c 	bl	800fa56 <f_write>

	f_close(&fil);
 80095be:	4b12      	ldr	r3, [pc, #72]	@ (8009608 <main+0x52c>)
 80095c0:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 80095c4:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80095c8:	443b      	add	r3, r7
 80095ca:	4618      	mov	r0, r3
 80095cc:	f006 fd15 	bl	800fffa <f_close>

	file_cont++;
 80095d0:	f647 5336 	movw	r3, #32054	@ 0x7d36
 80095d4:	443b      	add	r3, r7
 80095d6:	881b      	ldrh	r3, [r3, #0]
 80095d8:	3301      	adds	r3, #1
 80095da:	f647 5236 	movw	r2, #32054	@ 0x7d36
 80095de:	443a      	add	r2, r7
 80095e0:	8013      	strh	r3, [r2, #0]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80095e2:	2180      	movs	r1, #128	@ 0x80
 80095e4:	4813      	ldr	r0, [pc, #76]	@ (8009634 <main+0x558>)
 80095e6:	f000 ffd2 	bl	800a58e <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80095ea:	2064      	movs	r0, #100	@ 0x64
 80095ec:	f000 fd00 	bl	8009ff0 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80095f0:	2180      	movs	r1, #128	@ 0x80
 80095f2:	4810      	ldr	r0, [pc, #64]	@ (8009634 <main+0x558>)
 80095f4:	f000 ffcb 	bl	800a58e <HAL_GPIO_TogglePin>
  {
 80095f8:	e5bb      	b.n	8009172 <main+0x96>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	f507 47fa 	add.w	r7, r7, #32000	@ 0x7d00
 8009600:	3738      	adds	r7, #56	@ 0x38
 8009602:	46bd      	mov	sp, r7
 8009604:	bdb0      	pop	{r4, r5, r7, pc}
 8009606:	bf00      	nop
 8009608:	ffff8348 	.word	0xffff8348
 800960c:	20006aa0 	.word	0x20006aa0
 8009610:	20004798 	.word	0x20004798
 8009614:	200024d8 	.word	0x200024d8
 8009618:	20000218 	.word	0x20000218
 800961c:	20006a58 	.word	0x20006a58
 8009620:	20006ae8 	.word	0x20006ae8
 8009624:	080161a4 	.word	0x080161a4
 8009628:	ffff82c8 	.word	0xffff82c8
 800962c:	080161b8 	.word	0x080161b8
 8009630:	080161c0 	.word	0x080161c0
 8009634:	40020400 	.word	0x40020400

08009638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b094      	sub	sp, #80	@ 0x50
 800963c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800963e:	f107 0320 	add.w	r3, r7, #32
 8009642:	2230      	movs	r2, #48	@ 0x30
 8009644:	2100      	movs	r1, #0
 8009646:	4618      	mov	r0, r3
 8009648:	f008 fc21 	bl	8011e8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800964c:	f107 030c 	add.w	r3, r7, #12
 8009650:	2200      	movs	r2, #0
 8009652:	601a      	str	r2, [r3, #0]
 8009654:	605a      	str	r2, [r3, #4]
 8009656:	609a      	str	r2, [r3, #8]
 8009658:	60da      	str	r2, [r3, #12]
 800965a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800965c:	4b2a      	ldr	r3, [pc, #168]	@ (8009708 <SystemClock_Config+0xd0>)
 800965e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009660:	4a29      	ldr	r2, [pc, #164]	@ (8009708 <SystemClock_Config+0xd0>)
 8009662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009666:	6413      	str	r3, [r2, #64]	@ 0x40
 8009668:	4b27      	ldr	r3, [pc, #156]	@ (8009708 <SystemClock_Config+0xd0>)
 800966a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800966c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009670:	60bb      	str	r3, [r7, #8]
 8009672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009674:	4b25      	ldr	r3, [pc, #148]	@ (800970c <SystemClock_Config+0xd4>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a24      	ldr	r2, [pc, #144]	@ (800970c <SystemClock_Config+0xd4>)
 800967a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800967e:	6013      	str	r3, [r2, #0]
 8009680:	4b22      	ldr	r3, [pc, #136]	@ (800970c <SystemClock_Config+0xd4>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009688:	607b      	str	r3, [r7, #4]
 800968a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800968c:	2302      	movs	r3, #2
 800968e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009690:	2301      	movs	r3, #1
 8009692:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009694:	2310      	movs	r3, #16
 8009696:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009698:	2302      	movs	r3, #2
 800969a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800969c:	2300      	movs	r3, #0
 800969e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80096a0:	2308      	movs	r3, #8
 80096a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80096a4:	23d8      	movs	r3, #216	@ 0xd8
 80096a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80096a8:	2302      	movs	r3, #2
 80096aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80096ac:	2302      	movs	r3, #2
 80096ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80096b0:	f107 0320 	add.w	r3, r7, #32
 80096b4:	4618      	mov	r0, r3
 80096b6:	f000 ffd5 	bl	800a664 <HAL_RCC_OscConfig>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d001      	beq.n	80096c4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80096c0:	f000 f826 	bl	8009710 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80096c4:	f000 ff7e 	bl	800a5c4 <HAL_PWREx_EnableOverDrive>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d001      	beq.n	80096d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80096ce:	f000 f81f 	bl	8009710 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80096d2:	230f      	movs	r3, #15
 80096d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80096d6:	2302      	movs	r3, #2
 80096d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80096da:	2300      	movs	r3, #0
 80096dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80096de:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80096e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80096e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80096e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80096ea:	f107 030c 	add.w	r3, r7, #12
 80096ee:	2107      	movs	r1, #7
 80096f0:	4618      	mov	r0, r3
 80096f2:	f001 fa5b 	bl	800abac <HAL_RCC_ClockConfig>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d001      	beq.n	8009700 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80096fc:	f000 f808 	bl	8009710 <Error_Handler>
  }
}
 8009700:	bf00      	nop
 8009702:	3750      	adds	r7, #80	@ 0x50
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}
 8009708:	40023800 	.word	0x40023800
 800970c:	40007000 	.word	0x40007000

08009710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009714:	b672      	cpsid	i
}
 8009716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 8009718:	2201      	movs	r2, #1
 800971a:	2101      	movs	r1, #1
 800971c:	4802      	ldr	r0, [pc, #8]	@ (8009728 <Error_Handler+0x18>)
 800971e:	f000 ff1d 	bl	800a55c <HAL_GPIO_WritePin>
  while (1)
 8009722:	bf00      	nop
 8009724:	e7fd      	b.n	8009722 <Error_Handler+0x12>
 8009726:	bf00      	nop
 8009728:	40020400 	.word	0x40020400

0800972c <SD_SendDummyClock>:
#define SD_CS_LOW()   HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET)
#define SD_CS_HIGH()  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET)

extern SPI_HandleTypeDef hspi3; // Use a instância correta do SPI

static void SD_SendDummyClock(void) {
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
    uint8_t dummy = 0xFF;
 8009732:	23ff      	movs	r3, #255	@ 0xff
 8009734:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < 10; i++)
 8009736:	2300      	movs	r3, #0
 8009738:	607b      	str	r3, [r7, #4]
 800973a:	e009      	b.n	8009750 <SD_SendDummyClock+0x24>
        HAL_SPI_Transmit(&hspi3, &dummy, 1, HAL_MAX_DELAY);
 800973c:	1cf9      	adds	r1, r7, #3
 800973e:	f04f 33ff 	mov.w	r3, #4294967295
 8009742:	2201      	movs	r2, #1
 8009744:	4806      	ldr	r0, [pc, #24]	@ (8009760 <SD_SendDummyClock+0x34>)
 8009746:	f001 fcce 	bl	800b0e6 <HAL_SPI_Transmit>
    for (int i = 0; i < 10; i++)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	3301      	adds	r3, #1
 800974e:	607b      	str	r3, [r7, #4]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2b09      	cmp	r3, #9
 8009754:	ddf2      	ble.n	800973c <SD_SendDummyClock+0x10>
}
 8009756:	bf00      	nop
 8009758:	bf00      	nop
 800975a:	3708      	adds	r7, #8
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	20006b50 	.word	0x20006b50

08009764 <SD_TransmitByte>:

static uint8_t SD_TransmitByte(uint8_t data) {
 8009764:	b580      	push	{r7, lr}
 8009766:	b086      	sub	sp, #24
 8009768:	af02      	add	r7, sp, #8
 800976a:	4603      	mov	r3, r0
 800976c:	71fb      	strb	r3, [r7, #7]
    uint8_t received;
    HAL_SPI_TransmitReceive(&hspi3, &data, &received, 1, HAL_MAX_DELAY);
 800976e:	f107 020f 	add.w	r2, r7, #15
 8009772:	1df9      	adds	r1, r7, #7
 8009774:	f04f 33ff 	mov.w	r3, #4294967295
 8009778:	9300      	str	r3, [sp, #0]
 800977a:	2301      	movs	r3, #1
 800977c:	4803      	ldr	r0, [pc, #12]	@ (800978c <SD_TransmitByte+0x28>)
 800977e:	f001 fe28 	bl	800b3d2 <HAL_SPI_TransmitReceive>
    return received;
 8009782:	7bfb      	ldrb	r3, [r7, #15]
}
 8009784:	4618      	mov	r0, r3
 8009786:	3710      	adds	r7, #16
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	20006b50 	.word	0x20006b50

08009790 <SD_ReceiveByte>:

static uint8_t SD_ReceiveByte(void) {
 8009790:	b580      	push	{r7, lr}
 8009792:	af00      	add	r7, sp, #0
    return SD_TransmitByte(0xFF);
 8009794:	20ff      	movs	r0, #255	@ 0xff
 8009796:	f7ff ffe5 	bl	8009764 <SD_TransmitByte>
 800979a:	4603      	mov	r3, r0
}
 800979c:	4618      	mov	r0, r3
 800979e:	bd80      	pop	{r7, pc}

080097a0 <SD_WaitReady>:

static uint8_t SD_WaitReady(void) {
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
    uint8_t res;
    uint32_t timeout = HAL_GetTick();
 80097a6:	f000 fc17 	bl	8009fd8 <HAL_GetTick>
 80097aa:	6078      	str	r0, [r7, #4]
    do {
        res = SD_ReceiveByte();
 80097ac:	f7ff fff0 	bl	8009790 <SD_ReceiveByte>
 80097b0:	4603      	mov	r3, r0
 80097b2:	70fb      	strb	r3, [r7, #3]
        if (res == 0xFF) return 1;
 80097b4:	78fb      	ldrb	r3, [r7, #3]
 80097b6:	2bff      	cmp	r3, #255	@ 0xff
 80097b8:	d101      	bne.n	80097be <SD_WaitReady+0x1e>
 80097ba:	2301      	movs	r3, #1
 80097bc:	e008      	b.n	80097d0 <SD_WaitReady+0x30>
    } while ((HAL_GetTick() - timeout) < 500);
 80097be:	f000 fc0b 	bl	8009fd8 <HAL_GetTick>
 80097c2:	4602      	mov	r2, r0
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	1ad3      	subs	r3, r2, r3
 80097c8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80097cc:	d3ee      	bcc.n	80097ac <SD_WaitReady+0xc>
    return 0;
 80097ce:	2300      	movs	r3, #0
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3708      	adds	r7, #8
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <SD_Select>:

static void SD_Select(void) {
 80097d8:	b580      	push	{r7, lr}
 80097da:	af00      	add	r7, sp, #0
    SD_CS_LOW();
 80097dc:	2200      	movs	r2, #0
 80097de:	2110      	movs	r1, #16
 80097e0:	4803      	ldr	r0, [pc, #12]	@ (80097f0 <SD_Select+0x18>)
 80097e2:	f000 febb 	bl	800a55c <HAL_GPIO_WritePin>
    SD_ReceiveByte();
 80097e6:	f7ff ffd3 	bl	8009790 <SD_ReceiveByte>
}
 80097ea:	bf00      	nop
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	40020000 	.word	0x40020000

080097f4 <SD_Deselect>:

static void SD_Deselect(void) {
 80097f4:	b580      	push	{r7, lr}
 80097f6:	af00      	add	r7, sp, #0
    SD_CS_HIGH();
 80097f8:	2201      	movs	r2, #1
 80097fa:	2110      	movs	r1, #16
 80097fc:	4803      	ldr	r0, [pc, #12]	@ (800980c <SD_Deselect+0x18>)
 80097fe:	f000 fead 	bl	800a55c <HAL_GPIO_WritePin>
    SD_ReceiveByte();
 8009802:	f7ff ffc5 	bl	8009790 <SD_ReceiveByte>
}
 8009806:	bf00      	nop
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	40020000 	.word	0x40020000

08009810 <SD_SendCommand>:

static uint8_t SD_SendCommand(uint8_t cmd, uint32_t arg, uint8_t crc) {
 8009810:	b580      	push	{r7, lr}
 8009812:	b086      	sub	sp, #24
 8009814:	af00      	add	r7, sp, #0
 8009816:	4603      	mov	r3, r0
 8009818:	6039      	str	r1, [r7, #0]
 800981a:	71fb      	strb	r3, [r7, #7]
 800981c:	4613      	mov	r3, r2
 800981e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[6];
    buf[0] = 0x40 | cmd;
 8009820:	79fb      	ldrb	r3, [r7, #7]
 8009822:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009826:	b2db      	uxtb	r3, r3
 8009828:	723b      	strb	r3, [r7, #8]
    buf[1] = (arg >> 24) & 0xFF;
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	0e1b      	lsrs	r3, r3, #24
 800982e:	b2db      	uxtb	r3, r3
 8009830:	727b      	strb	r3, [r7, #9]
    buf[2] = (arg >> 16) & 0xFF;
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	0c1b      	lsrs	r3, r3, #16
 8009836:	b2db      	uxtb	r3, r3
 8009838:	72bb      	strb	r3, [r7, #10]
    buf[3] = (arg >> 8) & 0xFF;
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	0a1b      	lsrs	r3, r3, #8
 800983e:	b2db      	uxtb	r3, r3
 8009840:	72fb      	strb	r3, [r7, #11]
    buf[4] = arg & 0xFF;
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	b2db      	uxtb	r3, r3
 8009846:	733b      	strb	r3, [r7, #12]
    buf[5] = crc;
 8009848:	79bb      	ldrb	r3, [r7, #6]
 800984a:	737b      	strb	r3, [r7, #13]

    SD_Deselect();
 800984c:	f7ff ffd2 	bl	80097f4 <SD_Deselect>
    SD_Select();
 8009850:	f7ff ffc2 	bl	80097d8 <SD_Select>

    if (!SD_WaitReady()) {
 8009854:	f7ff ffa4 	bl	80097a0 <SD_WaitReady>
 8009858:	4603      	mov	r3, r0
 800985a:	2b00      	cmp	r3, #0
 800985c:	d103      	bne.n	8009866 <SD_SendCommand+0x56>
        SD_Deselect();
 800985e:	f7ff ffc9 	bl	80097f4 <SD_Deselect>
        return 0xFF;
 8009862:	23ff      	movs	r3, #255	@ 0xff
 8009864:	e024      	b.n	80098b0 <SD_SendCommand+0xa0>
    }

    for (int i = 0; i < 6; i++)
 8009866:	2300      	movs	r3, #0
 8009868:	617b      	str	r3, [r7, #20]
 800986a:	e00a      	b.n	8009882 <SD_SendCommand+0x72>
        SD_TransmitByte(buf[i]);
 800986c:	f107 0208 	add.w	r2, r7, #8
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	4413      	add	r3, r2
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	4618      	mov	r0, r3
 8009878:	f7ff ff74 	bl	8009764 <SD_TransmitByte>
    for (int i = 0; i < 6; i++)
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	3301      	adds	r3, #1
 8009880:	617b      	str	r3, [r7, #20]
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	2b05      	cmp	r3, #5
 8009886:	ddf1      	ble.n	800986c <SD_SendCommand+0x5c>

    // Aguarda resposta (bit 7 == 0)
    for (int i = 0; i < 10; i++) {
 8009888:	2300      	movs	r3, #0
 800988a:	613b      	str	r3, [r7, #16]
 800988c:	e00c      	b.n	80098a8 <SD_SendCommand+0x98>
        uint8_t res = SD_ReceiveByte();
 800988e:	f7ff ff7f 	bl	8009790 <SD_ReceiveByte>
 8009892:	4603      	mov	r3, r0
 8009894:	73fb      	strb	r3, [r7, #15]
        if ((res & 0x80) == 0)
 8009896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800989a:	2b00      	cmp	r3, #0
 800989c:	db01      	blt.n	80098a2 <SD_SendCommand+0x92>
            return res;
 800989e:	7bfb      	ldrb	r3, [r7, #15]
 80098a0:	e006      	b.n	80098b0 <SD_SendCommand+0xa0>
    for (int i = 0; i < 10; i++) {
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	3301      	adds	r3, #1
 80098a6:	613b      	str	r3, [r7, #16]
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	2b09      	cmp	r3, #9
 80098ac:	ddef      	ble.n	800988e <SD_SendCommand+0x7e>
    }

    return 0xFF;
 80098ae:	23ff      	movs	r3, #255	@ 0xff
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3718      	adds	r7, #24
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <SD_Init>:

uint8_t SD_Init(void) {
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
    SD_CS_HIGH();
 80098be:	2201      	movs	r2, #1
 80098c0:	2110      	movs	r1, #16
 80098c2:	4820      	ldr	r0, [pc, #128]	@ (8009944 <SD_Init+0x8c>)
 80098c4:	f000 fe4a 	bl	800a55c <HAL_GPIO_WritePin>
    SD_SendDummyClock(); // 80 clocks
 80098c8:	f7ff ff30 	bl	800972c <SD_SendDummyClock>

    uint8_t res = SD_SendCommand(CMD0, 0, 0x95);
 80098cc:	2295      	movs	r2, #149	@ 0x95
 80098ce:	2100      	movs	r1, #0
 80098d0:	2000      	movs	r0, #0
 80098d2:	f7ff ff9d 	bl	8009810 <SD_SendCommand>
 80098d6:	4603      	mov	r3, r0
 80098d8:	71fb      	strb	r3, [r7, #7]
    if (res != 0x01) return SD_ERROR;
 80098da:	79fb      	ldrb	r3, [r7, #7]
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d001      	beq.n	80098e4 <SD_Init+0x2c>
 80098e0:	2301      	movs	r3, #1
 80098e2:	e02b      	b.n	800993c <SD_Init+0x84>

    res = SD_SendCommand(CMD8, 0x1AA, 0x87);
 80098e4:	2287      	movs	r2, #135	@ 0x87
 80098e6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80098ea:	2008      	movs	r0, #8
 80098ec:	f7ff ff90 	bl	8009810 <SD_SendCommand>
 80098f0:	4603      	mov	r3, r0
 80098f2:	71fb      	strb	r3, [r7, #7]
    if (res != 0x01) return SD_ERROR;
 80098f4:	79fb      	ldrb	r3, [r7, #7]
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d001      	beq.n	80098fe <SD_Init+0x46>
 80098fa:	2301      	movs	r3, #1
 80098fc:	e01e      	b.n	800993c <SD_Init+0x84>

    // Espera inicialização
    do {
        SD_SendCommand(CMD55, 0, 0x01);
 80098fe:	2201      	movs	r2, #1
 8009900:	2100      	movs	r1, #0
 8009902:	2037      	movs	r0, #55	@ 0x37
 8009904:	f7ff ff84 	bl	8009810 <SD_SendCommand>
        res = SD_SendCommand(ACMD41, 0x40000000, 0x01);
 8009908:	2201      	movs	r2, #1
 800990a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800990e:	2029      	movs	r0, #41	@ 0x29
 8009910:	f7ff ff7e 	bl	8009810 <SD_SendCommand>
 8009914:	4603      	mov	r3, r0
 8009916:	71fb      	strb	r3, [r7, #7]
    } while (res != 0x00);
 8009918:	79fb      	ldrb	r3, [r7, #7]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d1ef      	bne.n	80098fe <SD_Init+0x46>

    res = SD_SendCommand(CMD58, 0, 0x01);
 800991e:	2201      	movs	r2, #1
 8009920:	2100      	movs	r1, #0
 8009922:	203a      	movs	r0, #58	@ 0x3a
 8009924:	f7ff ff74 	bl	8009810 <SD_SendCommand>
 8009928:	4603      	mov	r3, r0
 800992a:	71fb      	strb	r3, [r7, #7]
    SD_Deselect();
 800992c:	f7ff ff62 	bl	80097f4 <SD_Deselect>
    return (res == 0x00) ? SD_OK : SD_ERROR;
 8009930:	79fb      	ldrb	r3, [r7, #7]
 8009932:	2b00      	cmp	r3, #0
 8009934:	bf14      	ite	ne
 8009936:	2301      	movne	r3, #1
 8009938:	2300      	moveq	r3, #0
 800993a:	b2db      	uxtb	r3, r3
}
 800993c:	4618      	mov	r0, r3
 800993e:	3708      	adds	r7, #8
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}
 8009944:	40020000 	.word	0x40020000

08009948 <SD_ReadBlock>:

uint8_t SD_ReadBlock(uint32_t blockAddr, uint8_t* buff) {
 8009948:	b590      	push	{r4, r7, lr}
 800994a:	b087      	sub	sp, #28
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	6039      	str	r1, [r7, #0]
    uint8_t token;

    if (SD_SendCommand(CMD17, blockAddr, 0x01) != 0x00)
 8009952:	2201      	movs	r2, #1
 8009954:	6879      	ldr	r1, [r7, #4]
 8009956:	2011      	movs	r0, #17
 8009958:	f7ff ff5a 	bl	8009810 <SD_SendCommand>
 800995c:	4603      	mov	r3, r0
 800995e:	2b00      	cmp	r3, #0
 8009960:	d001      	beq.n	8009966 <SD_ReadBlock+0x1e>
        return SD_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	e030      	b.n	80099c8 <SD_ReadBlock+0x80>

    // Espera token 0xFE (início do bloco)
    for (int i = 0; i < 10000; i++) {
 8009966:	2300      	movs	r3, #0
 8009968:	613b      	str	r3, [r7, #16]
 800996a:	e009      	b.n	8009980 <SD_ReadBlock+0x38>
        token = SD_ReceiveByte();
 800996c:	f7ff ff10 	bl	8009790 <SD_ReceiveByte>
 8009970:	4603      	mov	r3, r0
 8009972:	75fb      	strb	r3, [r7, #23]
        if (token == 0xFE) break;
 8009974:	7dfb      	ldrb	r3, [r7, #23]
 8009976:	2bfe      	cmp	r3, #254	@ 0xfe
 8009978:	d008      	beq.n	800998c <SD_ReadBlock+0x44>
    for (int i = 0; i < 10000; i++) {
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	3301      	adds	r3, #1
 800997e:	613b      	str	r3, [r7, #16]
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	f242 720f 	movw	r2, #9999	@ 0x270f
 8009986:	4293      	cmp	r3, r2
 8009988:	ddf0      	ble.n	800996c <SD_ReadBlock+0x24>
 800998a:	e000      	b.n	800998e <SD_ReadBlock+0x46>
        if (token == 0xFE) break;
 800998c:	bf00      	nop
    }
    if (token != 0xFE) return SD_ERROR;
 800998e:	7dfb      	ldrb	r3, [r7, #23]
 8009990:	2bfe      	cmp	r3, #254	@ 0xfe
 8009992:	d001      	beq.n	8009998 <SD_ReadBlock+0x50>
 8009994:	2301      	movs	r3, #1
 8009996:	e017      	b.n	80099c8 <SD_ReadBlock+0x80>

    for (int i = 0; i < 512; i++)
 8009998:	2300      	movs	r3, #0
 800999a:	60fb      	str	r3, [r7, #12]
 800999c:	e009      	b.n	80099b2 <SD_ReadBlock+0x6a>
        buff[i] = SD_ReceiveByte();
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	683a      	ldr	r2, [r7, #0]
 80099a2:	18d4      	adds	r4, r2, r3
 80099a4:	f7ff fef4 	bl	8009790 <SD_ReceiveByte>
 80099a8:	4603      	mov	r3, r0
 80099aa:	7023      	strb	r3, [r4, #0]
    for (int i = 0; i < 512; i++)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	3301      	adds	r3, #1
 80099b0:	60fb      	str	r3, [r7, #12]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099b8:	dbf1      	blt.n	800999e <SD_ReadBlock+0x56>

    SD_ReceiveByte(); // Discard CRC
 80099ba:	f7ff fee9 	bl	8009790 <SD_ReceiveByte>
    SD_ReceiveByte();
 80099be:	f7ff fee7 	bl	8009790 <SD_ReceiveByte>

    SD_Deselect();
 80099c2:	f7ff ff17 	bl	80097f4 <SD_Deselect>
    return SD_OK;
 80099c6:	2300      	movs	r3, #0
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	371c      	adds	r7, #28
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd90      	pop	{r4, r7, pc}

080099d0 <SD_WriteBlock>:

uint8_t SD_WriteBlock(uint32_t blockAddr, const uint8_t* buff) {
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
    if (SD_SendCommand(CMD24, blockAddr, 0x01) != 0x00)
 80099da:	2201      	movs	r2, #1
 80099dc:	6879      	ldr	r1, [r7, #4]
 80099de:	2018      	movs	r0, #24
 80099e0:	f7ff ff16 	bl	8009810 <SD_SendCommand>
 80099e4:	4603      	mov	r3, r0
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d001      	beq.n	80099ee <SD_WriteBlock+0x1e>
        return SD_ERROR;
 80099ea:	2301      	movs	r3, #1
 80099ec:	e02f      	b.n	8009a4e <SD_WriteBlock+0x7e>

    SD_TransmitByte(0xFE); // Start token
 80099ee:	20fe      	movs	r0, #254	@ 0xfe
 80099f0:	f7ff feb8 	bl	8009764 <SD_TransmitByte>

    for (int i = 0; i < 512; i++)
 80099f4:	2300      	movs	r3, #0
 80099f6:	60fb      	str	r3, [r7, #12]
 80099f8:	e009      	b.n	8009a0e <SD_WriteBlock+0x3e>
        SD_TransmitByte(buff[i]);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	683a      	ldr	r2, [r7, #0]
 80099fe:	4413      	add	r3, r2
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7ff feae 	bl	8009764 <SD_TransmitByte>
    for (int i = 0; i < 512; i++)
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	60fb      	str	r3, [r7, #12]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a14:	dbf1      	blt.n	80099fa <SD_WriteBlock+0x2a>

    SD_TransmitByte(0xFF); // Dummy CRC
 8009a16:	20ff      	movs	r0, #255	@ 0xff
 8009a18:	f7ff fea4 	bl	8009764 <SD_TransmitByte>
    SD_TransmitByte(0xFF);
 8009a1c:	20ff      	movs	r0, #255	@ 0xff
 8009a1e:	f7ff fea1 	bl	8009764 <SD_TransmitByte>

    uint8_t resp = SD_ReceiveByte();
 8009a22:	f7ff feb5 	bl	8009790 <SD_ReceiveByte>
 8009a26:	4603      	mov	r3, r0
 8009a28:	72fb      	strb	r3, [r7, #11]
    if ((resp & 0x1F) != 0x05) {
 8009a2a:	7afb      	ldrb	r3, [r7, #11]
 8009a2c:	f003 031f 	and.w	r3, r3, #31
 8009a30:	2b05      	cmp	r3, #5
 8009a32:	d003      	beq.n	8009a3c <SD_WriteBlock+0x6c>
        SD_Deselect();
 8009a34:	f7ff fede 	bl	80097f4 <SD_Deselect>
        return SD_ERROR;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	e008      	b.n	8009a4e <SD_WriteBlock+0x7e>
    }

    while (!SD_ReceiveByte()); // Espera escrever
 8009a3c:	bf00      	nop
 8009a3e:	f7ff fea7 	bl	8009790 <SD_ReceiveByte>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d0fa      	beq.n	8009a3e <SD_WriteBlock+0x6e>

    SD_Deselect();
 8009a48:	f7ff fed4 	bl	80097f4 <SD_Deselect>
    return SD_OK;
 8009a4c:	2300      	movs	r3, #0
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3710      	adds	r7, #16
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
	...

08009a58 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8009a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8009acc <MX_SPI1_Init+0x74>)
 8009a5e:	4a1c      	ldr	r2, [pc, #112]	@ (8009ad0 <MX_SPI1_Init+0x78>)
 8009a60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009a62:	4b1a      	ldr	r3, [pc, #104]	@ (8009acc <MX_SPI1_Init+0x74>)
 8009a64:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8009a68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8009a6a:	4b18      	ldr	r3, [pc, #96]	@ (8009acc <MX_SPI1_Init+0x74>)
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009a70:	4b16      	ldr	r3, [pc, #88]	@ (8009acc <MX_SPI1_Init+0x74>)
 8009a72:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8009a76:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009a78:	4b14      	ldr	r3, [pc, #80]	@ (8009acc <MX_SPI1_Init+0x74>)
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009a7e:	4b13      	ldr	r3, [pc, #76]	@ (8009acc <MX_SPI1_Init+0x74>)
 8009a80:	2200      	movs	r2, #0
 8009a82:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8009a84:	4b11      	ldr	r3, [pc, #68]	@ (8009acc <MX_SPI1_Init+0x74>)
 8009a86:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8009a8a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8009a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8009acc <MX_SPI1_Init+0x74>)
 8009a8e:	2210      	movs	r2, #16
 8009a90:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009a92:	4b0e      	ldr	r3, [pc, #56]	@ (8009acc <MX_SPI1_Init+0x74>)
 8009a94:	2200      	movs	r2, #0
 8009a96:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8009a98:	4b0c      	ldr	r3, [pc, #48]	@ (8009acc <MX_SPI1_Init+0x74>)
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8009acc <MX_SPI1_Init+0x74>)
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8009aa4:	4b09      	ldr	r3, [pc, #36]	@ (8009acc <MX_SPI1_Init+0x74>)
 8009aa6:	2207      	movs	r2, #7
 8009aa8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009aaa:	4b08      	ldr	r3, [pc, #32]	@ (8009acc <MX_SPI1_Init+0x74>)
 8009aac:	2200      	movs	r2, #0
 8009aae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8009ab0:	4b06      	ldr	r3, [pc, #24]	@ (8009acc <MX_SPI1_Init+0x74>)
 8009ab2:	2208      	movs	r2, #8
 8009ab4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009ab6:	4805      	ldr	r0, [pc, #20]	@ (8009acc <MX_SPI1_Init+0x74>)
 8009ab8:	f001 fa6a 	bl	800af90 <HAL_SPI_Init>
 8009abc:	4603      	mov	r3, r0
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d001      	beq.n	8009ac6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8009ac2:	f7ff fe25 	bl	8009710 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8009ac6:	bf00      	nop
 8009ac8:	bd80      	pop	{r7, pc}
 8009aca:	bf00      	nop
 8009acc:	20006aec 	.word	0x20006aec
 8009ad0:	40013000 	.word	0x40013000

08009ad4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8009ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8009b48 <MX_SPI3_Init+0x74>)
 8009ada:	4a1c      	ldr	r2, [pc, #112]	@ (8009b4c <MX_SPI3_Init+0x78>)
 8009adc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8009ade:	4b1a      	ldr	r3, [pc, #104]	@ (8009b48 <MX_SPI3_Init+0x74>)
 8009ae0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8009ae4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8009ae6:	4b18      	ldr	r3, [pc, #96]	@ (8009b48 <MX_SPI3_Init+0x74>)
 8009ae8:	2200      	movs	r2, #0
 8009aea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8009aec:	4b16      	ldr	r3, [pc, #88]	@ (8009b48 <MX_SPI3_Init+0x74>)
 8009aee:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8009af2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009af4:	4b14      	ldr	r3, [pc, #80]	@ (8009b48 <MX_SPI3_Init+0x74>)
 8009af6:	2200      	movs	r2, #0
 8009af8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009afa:	4b13      	ldr	r3, [pc, #76]	@ (8009b48 <MX_SPI3_Init+0x74>)
 8009afc:	2200      	movs	r2, #0
 8009afe:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8009b00:	4b11      	ldr	r3, [pc, #68]	@ (8009b48 <MX_SPI3_Init+0x74>)
 8009b02:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8009b06:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009b08:	4b0f      	ldr	r3, [pc, #60]	@ (8009b48 <MX_SPI3_Init+0x74>)
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8009b48 <MX_SPI3_Init+0x74>)
 8009b10:	2200      	movs	r2, #0
 8009b12:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8009b14:	4b0c      	ldr	r3, [pc, #48]	@ (8009b48 <MX_SPI3_Init+0x74>)
 8009b16:	2200      	movs	r2, #0
 8009b18:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8009b48 <MX_SPI3_Init+0x74>)
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8009b20:	4b09      	ldr	r3, [pc, #36]	@ (8009b48 <MX_SPI3_Init+0x74>)
 8009b22:	2207      	movs	r2, #7
 8009b24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009b26:	4b08      	ldr	r3, [pc, #32]	@ (8009b48 <MX_SPI3_Init+0x74>)
 8009b28:	2200      	movs	r2, #0
 8009b2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8009b2c:	4b06      	ldr	r3, [pc, #24]	@ (8009b48 <MX_SPI3_Init+0x74>)
 8009b2e:	2208      	movs	r2, #8
 8009b30:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8009b32:	4805      	ldr	r0, [pc, #20]	@ (8009b48 <MX_SPI3_Init+0x74>)
 8009b34:	f001 fa2c 	bl	800af90 <HAL_SPI_Init>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d001      	beq.n	8009b42 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8009b3e:	f7ff fde7 	bl	8009710 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8009b42:	bf00      	nop
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	20006b50 	.word	0x20006b50
 8009b4c:	40003c00 	.word	0x40003c00

08009b50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b08c      	sub	sp, #48	@ 0x30
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b58:	f107 031c 	add.w	r3, r7, #28
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	601a      	str	r2, [r3, #0]
 8009b60:	605a      	str	r2, [r3, #4]
 8009b62:	609a      	str	r2, [r3, #8]
 8009b64:	60da      	str	r2, [r3, #12]
 8009b66:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a3c      	ldr	r2, [pc, #240]	@ (8009c60 <HAL_SPI_MspInit+0x110>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d129      	bne.n	8009bc6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009b72:	4b3c      	ldr	r3, [pc, #240]	@ (8009c64 <HAL_SPI_MspInit+0x114>)
 8009b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b76:	4a3b      	ldr	r2, [pc, #236]	@ (8009c64 <HAL_SPI_MspInit+0x114>)
 8009b78:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009b7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8009b7e:	4b39      	ldr	r3, [pc, #228]	@ (8009c64 <HAL_SPI_MspInit+0x114>)
 8009b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009b86:	61bb      	str	r3, [r7, #24]
 8009b88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b8a:	4b36      	ldr	r3, [pc, #216]	@ (8009c64 <HAL_SPI_MspInit+0x114>)
 8009b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b8e:	4a35      	ldr	r2, [pc, #212]	@ (8009c64 <HAL_SPI_MspInit+0x114>)
 8009b90:	f043 0301 	orr.w	r3, r3, #1
 8009b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8009b96:	4b33      	ldr	r3, [pc, #204]	@ (8009c64 <HAL_SPI_MspInit+0x114>)
 8009b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b9a:	f003 0301 	and.w	r3, r3, #1
 8009b9e:	617b      	str	r3, [r7, #20]
 8009ba0:	697b      	ldr	r3, [r7, #20]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 8009ba2:	f248 03e0 	movw	r3, #32992	@ 0x80e0
 8009ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ba8:	2302      	movs	r3, #2
 8009baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bac:	2300      	movs	r3, #0
 8009bae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009bb0:	2303      	movs	r3, #3
 8009bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009bb4:	2305      	movs	r3, #5
 8009bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009bb8:	f107 031c 	add.w	r3, r7, #28
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	482a      	ldr	r0, [pc, #168]	@ (8009c68 <HAL_SPI_MspInit+0x118>)
 8009bc0:	f000 fb20 	bl	800a204 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8009bc4:	e048      	b.n	8009c58 <HAL_SPI_MspInit+0x108>
  else if(spiHandle->Instance==SPI3)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a28      	ldr	r2, [pc, #160]	@ (8009c6c <HAL_SPI_MspInit+0x11c>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d143      	bne.n	8009c58 <HAL_SPI_MspInit+0x108>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8009bd0:	4b24      	ldr	r3, [pc, #144]	@ (8009c64 <HAL_SPI_MspInit+0x114>)
 8009bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bd4:	4a23      	ldr	r2, [pc, #140]	@ (8009c64 <HAL_SPI_MspInit+0x114>)
 8009bd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bda:	6413      	str	r3, [r2, #64]	@ 0x40
 8009bdc:	4b21      	ldr	r3, [pc, #132]	@ (8009c64 <HAL_SPI_MspInit+0x114>)
 8009bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009be0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009be4:	613b      	str	r3, [r7, #16]
 8009be6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009be8:	4b1e      	ldr	r3, [pc, #120]	@ (8009c64 <HAL_SPI_MspInit+0x114>)
 8009bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bec:	4a1d      	ldr	r2, [pc, #116]	@ (8009c64 <HAL_SPI_MspInit+0x114>)
 8009bee:	f043 0301 	orr.w	r3, r3, #1
 8009bf2:	6313      	str	r3, [r2, #48]	@ 0x30
 8009bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8009c64 <HAL_SPI_MspInit+0x114>)
 8009bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bf8:	f003 0301 	and.w	r3, r3, #1
 8009bfc:	60fb      	str	r3, [r7, #12]
 8009bfe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009c00:	4b18      	ldr	r3, [pc, #96]	@ (8009c64 <HAL_SPI_MspInit+0x114>)
 8009c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c04:	4a17      	ldr	r2, [pc, #92]	@ (8009c64 <HAL_SPI_MspInit+0x114>)
 8009c06:	f043 0302 	orr.w	r3, r3, #2
 8009c0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8009c0c:	4b15      	ldr	r3, [pc, #84]	@ (8009c64 <HAL_SPI_MspInit+0x114>)
 8009c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c10:	f003 0302 	and.w	r3, r3, #2
 8009c14:	60bb      	str	r3, [r7, #8]
 8009c16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8009c18:	2310      	movs	r3, #16
 8009c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c1c:	2302      	movs	r3, #2
 8009c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c20:	2300      	movs	r3, #0
 8009c22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c24:	2303      	movs	r3, #3
 8009c26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8009c28:	2306      	movs	r3, #6
 8009c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c2c:	f107 031c 	add.w	r3, r7, #28
 8009c30:	4619      	mov	r1, r3
 8009c32:	480d      	ldr	r0, [pc, #52]	@ (8009c68 <HAL_SPI_MspInit+0x118>)
 8009c34:	f000 fae6 	bl	800a204 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8009c38:	2338      	movs	r3, #56	@ 0x38
 8009c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c3c:	2302      	movs	r3, #2
 8009c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c40:	2300      	movs	r3, #0
 8009c42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c44:	2303      	movs	r3, #3
 8009c46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8009c48:	2306      	movs	r3, #6
 8009c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009c4c:	f107 031c 	add.w	r3, r7, #28
 8009c50:	4619      	mov	r1, r3
 8009c52:	4807      	ldr	r0, [pc, #28]	@ (8009c70 <HAL_SPI_MspInit+0x120>)
 8009c54:	f000 fad6 	bl	800a204 <HAL_GPIO_Init>
}
 8009c58:	bf00      	nop
 8009c5a:	3730      	adds	r7, #48	@ 0x30
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	40013000 	.word	0x40013000
 8009c64:	40023800 	.word	0x40023800
 8009c68:	40020000 	.word	0x40020000
 8009c6c:	40003c00 	.word	0x40003c00
 8009c70:	40020400 	.word	0x40020400

08009c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b083      	sub	sp, #12
 8009c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8009c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8009cb8 <HAL_MspInit+0x44>)
 8009c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c7e:	4a0e      	ldr	r2, [pc, #56]	@ (8009cb8 <HAL_MspInit+0x44>)
 8009c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c84:	6413      	str	r3, [r2, #64]	@ 0x40
 8009c86:	4b0c      	ldr	r3, [pc, #48]	@ (8009cb8 <HAL_MspInit+0x44>)
 8009c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c8e:	607b      	str	r3, [r7, #4]
 8009c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009c92:	4b09      	ldr	r3, [pc, #36]	@ (8009cb8 <HAL_MspInit+0x44>)
 8009c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c96:	4a08      	ldr	r2, [pc, #32]	@ (8009cb8 <HAL_MspInit+0x44>)
 8009c98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009c9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8009c9e:	4b06      	ldr	r3, [pc, #24]	@ (8009cb8 <HAL_MspInit+0x44>)
 8009ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ca2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009ca6:	603b      	str	r3, [r7, #0]
 8009ca8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009caa:	bf00      	nop
 8009cac:	370c      	adds	r7, #12
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr
 8009cb6:	bf00      	nop
 8009cb8:	40023800 	.word	0x40023800

08009cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009cc0:	bf00      	nop
 8009cc2:	e7fd      	b.n	8009cc0 <NMI_Handler+0x4>

08009cc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8009cc8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009ccc:	4804      	ldr	r0, [pc, #16]	@ (8009ce0 <HardFault_Handler+0x1c>)
 8009cce:	f000 fc5e 	bl	800a58e <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8009cd2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009cd6:	f000 f98b 	bl	8009ff0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8009cda:	bf00      	nop
 8009cdc:	e7f4      	b.n	8009cc8 <HardFault_Handler+0x4>
 8009cde:	bf00      	nop
 8009ce0:	40020400 	.word	0x40020400

08009ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009ce8:	bf00      	nop
 8009cea:	e7fd      	b.n	8009ce8 <MemManage_Handler+0x4>

08009cec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009cec:	b480      	push	{r7}
 8009cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009cf0:	bf00      	nop
 8009cf2:	e7fd      	b.n	8009cf0 <BusFault_Handler+0x4>

08009cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009cf8:	bf00      	nop
 8009cfa:	e7fd      	b.n	8009cf8 <UsageFault_Handler+0x4>

08009cfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009d00:	bf00      	nop
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr

08009d0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009d0a:	b480      	push	{r7}
 8009d0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009d0e:	bf00      	nop
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr

08009d18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009d1c:	bf00      	nop
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr

08009d26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009d26:	b580      	push	{r7, lr}
 8009d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009d2a:	f000 f941 	bl	8009fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009d2e:	bf00      	nop
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009d32:	b480      	push	{r7}
 8009d34:	af00      	add	r7, sp, #0
  return 1;
 8009d36:	2301      	movs	r3, #1
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr

08009d42 <_kill>:

int _kill(int pid, int sig)
{
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b082      	sub	sp, #8
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
 8009d4a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8009d4c:	f008 f960 	bl	8012010 <__errno>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2216      	movs	r2, #22
 8009d54:	601a      	str	r2, [r3, #0]
  return -1;
 8009d56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3708      	adds	r7, #8
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <_exit>:

void _exit (int status)
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b082      	sub	sp, #8
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8009d6a:	f04f 31ff 	mov.w	r1, #4294967295
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f7ff ffe7 	bl	8009d42 <_kill>
  while (1) {}    /* Make sure we hang here */
 8009d74:	bf00      	nop
 8009d76:	e7fd      	b.n	8009d74 <_exit+0x12>

08009d78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b086      	sub	sp, #24
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	60b9      	str	r1, [r7, #8]
 8009d82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009d84:	2300      	movs	r3, #0
 8009d86:	617b      	str	r3, [r7, #20]
 8009d88:	e00a      	b.n	8009da0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8009d8a:	f3af 8000 	nop.w
 8009d8e:	4601      	mov	r1, r0
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	1c5a      	adds	r2, r3, #1
 8009d94:	60ba      	str	r2, [r7, #8]
 8009d96:	b2ca      	uxtb	r2, r1
 8009d98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	617b      	str	r3, [r7, #20]
 8009da0:	697a      	ldr	r2, [r7, #20]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	429a      	cmp	r2, r3
 8009da6:	dbf0      	blt.n	8009d8a <_read+0x12>
  }

  return len;
 8009da8:	687b      	ldr	r3, [r7, #4]
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3718      	adds	r7, #24
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b086      	sub	sp, #24
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	60f8      	str	r0, [r7, #12]
 8009dba:	60b9      	str	r1, [r7, #8]
 8009dbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	617b      	str	r3, [r7, #20]
 8009dc2:	e009      	b.n	8009dd8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	1c5a      	adds	r2, r3, #1
 8009dc8:	60ba      	str	r2, [r7, #8]
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	617b      	str	r3, [r7, #20]
 8009dd8:	697a      	ldr	r2, [r7, #20]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	dbf1      	blt.n	8009dc4 <_write+0x12>
  }
  return len;
 8009de0:	687b      	ldr	r3, [r7, #4]
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3718      	adds	r7, #24
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}

08009dea <_close>:

int _close(int file)
{
 8009dea:	b480      	push	{r7}
 8009dec:	b083      	sub	sp, #12
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8009df2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	370c      	adds	r7, #12
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr

08009e02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009e02:	b480      	push	{r7}
 8009e04:	b083      	sub	sp, #12
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
 8009e0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009e12:	605a      	str	r2, [r3, #4]
  return 0;
 8009e14:	2300      	movs	r3, #0
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	370c      	adds	r7, #12
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr

08009e22 <_isatty>:

int _isatty(int file)
{
 8009e22:	b480      	push	{r7}
 8009e24:	b083      	sub	sp, #12
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8009e2a:	2301      	movs	r3, #1
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	370c      	adds	r7, #12
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr

08009e38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8009e44:	2300      	movs	r3, #0
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3714      	adds	r7, #20
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr
	...

08009e54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b086      	sub	sp, #24
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009e5c:	4a14      	ldr	r2, [pc, #80]	@ (8009eb0 <_sbrk+0x5c>)
 8009e5e:	4b15      	ldr	r3, [pc, #84]	@ (8009eb4 <_sbrk+0x60>)
 8009e60:	1ad3      	subs	r3, r2, r3
 8009e62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009e68:	4b13      	ldr	r3, [pc, #76]	@ (8009eb8 <_sbrk+0x64>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d102      	bne.n	8009e76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009e70:	4b11      	ldr	r3, [pc, #68]	@ (8009eb8 <_sbrk+0x64>)
 8009e72:	4a12      	ldr	r2, [pc, #72]	@ (8009ebc <_sbrk+0x68>)
 8009e74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009e76:	4b10      	ldr	r3, [pc, #64]	@ (8009eb8 <_sbrk+0x64>)
 8009e78:	681a      	ldr	r2, [r3, #0]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	693a      	ldr	r2, [r7, #16]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d207      	bcs.n	8009e94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009e84:	f008 f8c4 	bl	8012010 <__errno>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	220c      	movs	r2, #12
 8009e8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e92:	e009      	b.n	8009ea8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009e94:	4b08      	ldr	r3, [pc, #32]	@ (8009eb8 <_sbrk+0x64>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009e9a:	4b07      	ldr	r3, [pc, #28]	@ (8009eb8 <_sbrk+0x64>)
 8009e9c:	681a      	ldr	r2, [r3, #0]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	4413      	add	r3, r2
 8009ea2:	4a05      	ldr	r2, [pc, #20]	@ (8009eb8 <_sbrk+0x64>)
 8009ea4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3718      	adds	r7, #24
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}
 8009eb0:	20050000 	.word	0x20050000
 8009eb4:	00000400 	.word	0x00000400
 8009eb8:	20006bb4 	.word	0x20006bb4
 8009ebc:	20007198 	.word	0x20007198

08009ec0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009ec4:	4b06      	ldr	r3, [pc, #24]	@ (8009ee0 <SystemInit+0x20>)
 8009ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009eca:	4a05      	ldr	r2, [pc, #20]	@ (8009ee0 <SystemInit+0x20>)
 8009ecc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009ed0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009ed4:	bf00      	nop
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr
 8009ede:	bf00      	nop
 8009ee0:	e000ed00 	.word	0xe000ed00

08009ee4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009ee4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8009f1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8009ee8:	f7ff ffea 	bl	8009ec0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8009eec:	480c      	ldr	r0, [pc, #48]	@ (8009f20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009eee:	490d      	ldr	r1, [pc, #52]	@ (8009f24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8009f28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009ef4:	e002      	b.n	8009efc <LoopCopyDataInit>

08009ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009efa:	3304      	adds	r3, #4

08009efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009f00:	d3f9      	bcc.n	8009ef6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009f02:	4a0a      	ldr	r2, [pc, #40]	@ (8009f2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009f04:	4c0a      	ldr	r4, [pc, #40]	@ (8009f30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009f08:	e001      	b.n	8009f0e <LoopFillZerobss>

08009f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009f0c:	3204      	adds	r2, #4

08009f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009f10:	d3fb      	bcc.n	8009f0a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8009f12:	f008 f883 	bl	801201c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009f16:	f7ff f8e1 	bl	80090dc <main>
  bx  lr    
 8009f1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009f1c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8009f20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009f24:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8009f28:	08016d30 	.word	0x08016d30
  ldr r2, =_sbss
 8009f2c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8009f30:	20007194 	.word	0x20007194

08009f34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009f34:	e7fe      	b.n	8009f34 <ADC_IRQHandler>

08009f36 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009f3a:	2003      	movs	r0, #3
 8009f3c:	f000 f92e 	bl	800a19c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009f40:	2000      	movs	r0, #0
 8009f42:	f000 f805 	bl	8009f50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009f46:	f7ff fe95 	bl	8009c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009f4a:	2300      	movs	r3, #0
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009f58:	4b12      	ldr	r3, [pc, #72]	@ (8009fa4 <HAL_InitTick+0x54>)
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	4b12      	ldr	r3, [pc, #72]	@ (8009fa8 <HAL_InitTick+0x58>)
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	4619      	mov	r1, r3
 8009f62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f000 f93b 	bl	800a1ea <HAL_SYSTICK_Config>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d001      	beq.n	8009f7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	e00e      	b.n	8009f9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2b0f      	cmp	r3, #15
 8009f82:	d80a      	bhi.n	8009f9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009f84:	2200      	movs	r2, #0
 8009f86:	6879      	ldr	r1, [r7, #4]
 8009f88:	f04f 30ff 	mov.w	r0, #4294967295
 8009f8c:	f000 f911 	bl	800a1b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009f90:	4a06      	ldr	r2, [pc, #24]	@ (8009fac <HAL_InitTick+0x5c>)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009f96:	2300      	movs	r3, #0
 8009f98:	e000      	b.n	8009f9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009f9a:	2301      	movs	r3, #1
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3708      	adds	r7, #8
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	20000000 	.word	0x20000000
 8009fa8:	20000008 	.word	0x20000008
 8009fac:	20000004 	.word	0x20000004

08009fb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009fb4:	4b06      	ldr	r3, [pc, #24]	@ (8009fd0 <HAL_IncTick+0x20>)
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	461a      	mov	r2, r3
 8009fba:	4b06      	ldr	r3, [pc, #24]	@ (8009fd4 <HAL_IncTick+0x24>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4413      	add	r3, r2
 8009fc0:	4a04      	ldr	r2, [pc, #16]	@ (8009fd4 <HAL_IncTick+0x24>)
 8009fc2:	6013      	str	r3, [r2, #0]
}
 8009fc4:	bf00      	nop
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr
 8009fce:	bf00      	nop
 8009fd0:	20000008 	.word	0x20000008
 8009fd4:	20006bb8 	.word	0x20006bb8

08009fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	af00      	add	r7, sp, #0
  return uwTick;
 8009fdc:	4b03      	ldr	r3, [pc, #12]	@ (8009fec <HAL_GetTick+0x14>)
 8009fde:	681b      	ldr	r3, [r3, #0]
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop
 8009fec:	20006bb8 	.word	0x20006bb8

08009ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009ff8:	f7ff ffee 	bl	8009fd8 <HAL_GetTick>
 8009ffc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a008:	d005      	beq.n	800a016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a00a:	4b0a      	ldr	r3, [pc, #40]	@ (800a034 <HAL_Delay+0x44>)
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	461a      	mov	r2, r3
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	4413      	add	r3, r2
 800a014:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a016:	bf00      	nop
 800a018:	f7ff ffde 	bl	8009fd8 <HAL_GetTick>
 800a01c:	4602      	mov	r2, r0
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	68fa      	ldr	r2, [r7, #12]
 800a024:	429a      	cmp	r2, r3
 800a026:	d8f7      	bhi.n	800a018 <HAL_Delay+0x28>
  {
  }
}
 800a028:	bf00      	nop
 800a02a:	bf00      	nop
 800a02c:	3710      	adds	r7, #16
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	20000008 	.word	0x20000008

0800a038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a038:	b480      	push	{r7}
 800a03a:	b085      	sub	sp, #20
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f003 0307 	and.w	r3, r3, #7
 800a046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a048:	4b0b      	ldr	r3, [pc, #44]	@ (800a078 <__NVIC_SetPriorityGrouping+0x40>)
 800a04a:	68db      	ldr	r3, [r3, #12]
 800a04c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a04e:	68ba      	ldr	r2, [r7, #8]
 800a050:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a054:	4013      	ands	r3, r2
 800a056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800a060:	4b06      	ldr	r3, [pc, #24]	@ (800a07c <__NVIC_SetPriorityGrouping+0x44>)
 800a062:	4313      	orrs	r3, r2
 800a064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a066:	4a04      	ldr	r2, [pc, #16]	@ (800a078 <__NVIC_SetPriorityGrouping+0x40>)
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	60d3      	str	r3, [r2, #12]
}
 800a06c:	bf00      	nop
 800a06e:	3714      	adds	r7, #20
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr
 800a078:	e000ed00 	.word	0xe000ed00
 800a07c:	05fa0000 	.word	0x05fa0000

0800a080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a080:	b480      	push	{r7}
 800a082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a084:	4b04      	ldr	r3, [pc, #16]	@ (800a098 <__NVIC_GetPriorityGrouping+0x18>)
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	0a1b      	lsrs	r3, r3, #8
 800a08a:	f003 0307 	and.w	r3, r3, #7
}
 800a08e:	4618      	mov	r0, r3
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr
 800a098:	e000ed00 	.word	0xe000ed00

0800a09c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b083      	sub	sp, #12
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	6039      	str	r1, [r7, #0]
 800a0a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a0a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	db0a      	blt.n	800a0c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	b2da      	uxtb	r2, r3
 800a0b4:	490c      	ldr	r1, [pc, #48]	@ (800a0e8 <__NVIC_SetPriority+0x4c>)
 800a0b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0ba:	0112      	lsls	r2, r2, #4
 800a0bc:	b2d2      	uxtb	r2, r2
 800a0be:	440b      	add	r3, r1
 800a0c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a0c4:	e00a      	b.n	800a0dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	b2da      	uxtb	r2, r3
 800a0ca:	4908      	ldr	r1, [pc, #32]	@ (800a0ec <__NVIC_SetPriority+0x50>)
 800a0cc:	79fb      	ldrb	r3, [r7, #7]
 800a0ce:	f003 030f 	and.w	r3, r3, #15
 800a0d2:	3b04      	subs	r3, #4
 800a0d4:	0112      	lsls	r2, r2, #4
 800a0d6:	b2d2      	uxtb	r2, r2
 800a0d8:	440b      	add	r3, r1
 800a0da:	761a      	strb	r2, [r3, #24]
}
 800a0dc:	bf00      	nop
 800a0de:	370c      	adds	r7, #12
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr
 800a0e8:	e000e100 	.word	0xe000e100
 800a0ec:	e000ed00 	.word	0xe000ed00

0800a0f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b089      	sub	sp, #36	@ 0x24
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	60f8      	str	r0, [r7, #12]
 800a0f8:	60b9      	str	r1, [r7, #8]
 800a0fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f003 0307 	and.w	r3, r3, #7
 800a102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a104:	69fb      	ldr	r3, [r7, #28]
 800a106:	f1c3 0307 	rsb	r3, r3, #7
 800a10a:	2b04      	cmp	r3, #4
 800a10c:	bf28      	it	cs
 800a10e:	2304      	movcs	r3, #4
 800a110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	3304      	adds	r3, #4
 800a116:	2b06      	cmp	r3, #6
 800a118:	d902      	bls.n	800a120 <NVIC_EncodePriority+0x30>
 800a11a:	69fb      	ldr	r3, [r7, #28]
 800a11c:	3b03      	subs	r3, #3
 800a11e:	e000      	b.n	800a122 <NVIC_EncodePriority+0x32>
 800a120:	2300      	movs	r3, #0
 800a122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a124:	f04f 32ff 	mov.w	r2, #4294967295
 800a128:	69bb      	ldr	r3, [r7, #24]
 800a12a:	fa02 f303 	lsl.w	r3, r2, r3
 800a12e:	43da      	mvns	r2, r3
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	401a      	ands	r2, r3
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a138:	f04f 31ff 	mov.w	r1, #4294967295
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	fa01 f303 	lsl.w	r3, r1, r3
 800a142:	43d9      	mvns	r1, r3
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a148:	4313      	orrs	r3, r2
         );
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3724      	adds	r7, #36	@ 0x24
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr
	...

0800a158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	3b01      	subs	r3, #1
 800a164:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a168:	d301      	bcc.n	800a16e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a16a:	2301      	movs	r3, #1
 800a16c:	e00f      	b.n	800a18e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a16e:	4a0a      	ldr	r2, [pc, #40]	@ (800a198 <SysTick_Config+0x40>)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	3b01      	subs	r3, #1
 800a174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a176:	210f      	movs	r1, #15
 800a178:	f04f 30ff 	mov.w	r0, #4294967295
 800a17c:	f7ff ff8e 	bl	800a09c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a180:	4b05      	ldr	r3, [pc, #20]	@ (800a198 <SysTick_Config+0x40>)
 800a182:	2200      	movs	r2, #0
 800a184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a186:	4b04      	ldr	r3, [pc, #16]	@ (800a198 <SysTick_Config+0x40>)
 800a188:	2207      	movs	r2, #7
 800a18a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a18c:	2300      	movs	r3, #0
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3708      	adds	r7, #8
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	e000e010 	.word	0xe000e010

0800a19c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f7ff ff47 	bl	800a038 <__NVIC_SetPriorityGrouping>
}
 800a1aa:	bf00      	nop
 800a1ac:	3708      	adds	r7, #8
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}

0800a1b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a1b2:	b580      	push	{r7, lr}
 800a1b4:	b086      	sub	sp, #24
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	60b9      	str	r1, [r7, #8]
 800a1bc:	607a      	str	r2, [r7, #4]
 800a1be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a1c4:	f7ff ff5c 	bl	800a080 <__NVIC_GetPriorityGrouping>
 800a1c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	68b9      	ldr	r1, [r7, #8]
 800a1ce:	6978      	ldr	r0, [r7, #20]
 800a1d0:	f7ff ff8e 	bl	800a0f0 <NVIC_EncodePriority>
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1da:	4611      	mov	r1, r2
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7ff ff5d 	bl	800a09c <__NVIC_SetPriority>
}
 800a1e2:	bf00      	nop
 800a1e4:	3718      	adds	r7, #24
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}

0800a1ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a1ea:	b580      	push	{r7, lr}
 800a1ec:	b082      	sub	sp, #8
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f7ff ffb0 	bl	800a158 <SysTick_Config>
 800a1f8:	4603      	mov	r3, r0
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3708      	adds	r7, #8
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
	...

0800a204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a204:	b480      	push	{r7}
 800a206:	b089      	sub	sp, #36	@ 0x24
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800a20e:	2300      	movs	r3, #0
 800a210:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800a212:	2300      	movs	r3, #0
 800a214:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800a216:	2300      	movs	r3, #0
 800a218:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800a21a:	2300      	movs	r3, #0
 800a21c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800a21e:	2300      	movs	r3, #0
 800a220:	61fb      	str	r3, [r7, #28]
 800a222:	e175      	b.n	800a510 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800a224:	2201      	movs	r2, #1
 800a226:	69fb      	ldr	r3, [r7, #28]
 800a228:	fa02 f303 	lsl.w	r3, r2, r3
 800a22c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	697a      	ldr	r2, [r7, #20]
 800a234:	4013      	ands	r3, r2
 800a236:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800a238:	693a      	ldr	r2, [r7, #16]
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	429a      	cmp	r2, r3
 800a23e:	f040 8164 	bne.w	800a50a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	f003 0303 	and.w	r3, r3, #3
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d005      	beq.n	800a25a <HAL_GPIO_Init+0x56>
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	f003 0303 	and.w	r3, r3, #3
 800a256:	2b02      	cmp	r3, #2
 800a258:	d130      	bne.n	800a2bc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	689b      	ldr	r3, [r3, #8]
 800a25e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800a260:	69fb      	ldr	r3, [r7, #28]
 800a262:	005b      	lsls	r3, r3, #1
 800a264:	2203      	movs	r2, #3
 800a266:	fa02 f303 	lsl.w	r3, r2, r3
 800a26a:	43db      	mvns	r3, r3
 800a26c:	69ba      	ldr	r2, [r7, #24]
 800a26e:	4013      	ands	r3, r2
 800a270:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	68da      	ldr	r2, [r3, #12]
 800a276:	69fb      	ldr	r3, [r7, #28]
 800a278:	005b      	lsls	r3, r3, #1
 800a27a:	fa02 f303 	lsl.w	r3, r2, r3
 800a27e:	69ba      	ldr	r2, [r7, #24]
 800a280:	4313      	orrs	r3, r2
 800a282:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	69ba      	ldr	r2, [r7, #24]
 800a288:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a290:	2201      	movs	r2, #1
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	fa02 f303 	lsl.w	r3, r2, r3
 800a298:	43db      	mvns	r3, r3
 800a29a:	69ba      	ldr	r2, [r7, #24]
 800a29c:	4013      	ands	r3, r2
 800a29e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	091b      	lsrs	r3, r3, #4
 800a2a6:	f003 0201 	and.w	r2, r3, #1
 800a2aa:	69fb      	ldr	r3, [r7, #28]
 800a2ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a2b0:	69ba      	ldr	r2, [r7, #24]
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	69ba      	ldr	r2, [r7, #24]
 800a2ba:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	f003 0303 	and.w	r3, r3, #3
 800a2c4:	2b03      	cmp	r3, #3
 800a2c6:	d017      	beq.n	800a2f8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	68db      	ldr	r3, [r3, #12]
 800a2cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	005b      	lsls	r3, r3, #1
 800a2d2:	2203      	movs	r2, #3
 800a2d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a2d8:	43db      	mvns	r3, r3
 800a2da:	69ba      	ldr	r2, [r7, #24]
 800a2dc:	4013      	ands	r3, r2
 800a2de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	689a      	ldr	r2, [r3, #8]
 800a2e4:	69fb      	ldr	r3, [r7, #28]
 800a2e6:	005b      	lsls	r3, r3, #1
 800a2e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ec:	69ba      	ldr	r2, [r7, #24]
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	69ba      	ldr	r2, [r7, #24]
 800a2f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	f003 0303 	and.w	r3, r3, #3
 800a300:	2b02      	cmp	r3, #2
 800a302:	d123      	bne.n	800a34c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	08da      	lsrs	r2, r3, #3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	3208      	adds	r2, #8
 800a30c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a312:	69fb      	ldr	r3, [r7, #28]
 800a314:	f003 0307 	and.w	r3, r3, #7
 800a318:	009b      	lsls	r3, r3, #2
 800a31a:	220f      	movs	r2, #15
 800a31c:	fa02 f303 	lsl.w	r3, r2, r3
 800a320:	43db      	mvns	r3, r3
 800a322:	69ba      	ldr	r2, [r7, #24]
 800a324:	4013      	ands	r3, r2
 800a326:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	691a      	ldr	r2, [r3, #16]
 800a32c:	69fb      	ldr	r3, [r7, #28]
 800a32e:	f003 0307 	and.w	r3, r3, #7
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	fa02 f303 	lsl.w	r3, r2, r3
 800a338:	69ba      	ldr	r2, [r7, #24]
 800a33a:	4313      	orrs	r3, r2
 800a33c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800a33e:	69fb      	ldr	r3, [r7, #28]
 800a340:	08da      	lsrs	r2, r3, #3
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	3208      	adds	r2, #8
 800a346:	69b9      	ldr	r1, [r7, #24]
 800a348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	005b      	lsls	r3, r3, #1
 800a356:	2203      	movs	r2, #3
 800a358:	fa02 f303 	lsl.w	r3, r2, r3
 800a35c:	43db      	mvns	r3, r3
 800a35e:	69ba      	ldr	r2, [r7, #24]
 800a360:	4013      	ands	r3, r2
 800a362:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	f003 0203 	and.w	r2, r3, #3
 800a36c:	69fb      	ldr	r3, [r7, #28]
 800a36e:	005b      	lsls	r3, r3, #1
 800a370:	fa02 f303 	lsl.w	r3, r2, r3
 800a374:	69ba      	ldr	r2, [r7, #24]
 800a376:	4313      	orrs	r3, r2
 800a378:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	69ba      	ldr	r2, [r7, #24]
 800a37e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a388:	2b00      	cmp	r3, #0
 800a38a:	f000 80be 	beq.w	800a50a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a38e:	4b66      	ldr	r3, [pc, #408]	@ (800a528 <HAL_GPIO_Init+0x324>)
 800a390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a392:	4a65      	ldr	r2, [pc, #404]	@ (800a528 <HAL_GPIO_Init+0x324>)
 800a394:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a398:	6453      	str	r3, [r2, #68]	@ 0x44
 800a39a:	4b63      	ldr	r3, [pc, #396]	@ (800a528 <HAL_GPIO_Init+0x324>)
 800a39c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a39e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a3a2:	60fb      	str	r3, [r7, #12]
 800a3a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800a3a6:	4a61      	ldr	r2, [pc, #388]	@ (800a52c <HAL_GPIO_Init+0x328>)
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	089b      	lsrs	r3, r3, #2
 800a3ac:	3302      	adds	r3, #2
 800a3ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800a3b4:	69fb      	ldr	r3, [r7, #28]
 800a3b6:	f003 0303 	and.w	r3, r3, #3
 800a3ba:	009b      	lsls	r3, r3, #2
 800a3bc:	220f      	movs	r2, #15
 800a3be:	fa02 f303 	lsl.w	r3, r2, r3
 800a3c2:	43db      	mvns	r3, r3
 800a3c4:	69ba      	ldr	r2, [r7, #24]
 800a3c6:	4013      	ands	r3, r2
 800a3c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	4a58      	ldr	r2, [pc, #352]	@ (800a530 <HAL_GPIO_Init+0x32c>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d037      	beq.n	800a442 <HAL_GPIO_Init+0x23e>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	4a57      	ldr	r2, [pc, #348]	@ (800a534 <HAL_GPIO_Init+0x330>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d031      	beq.n	800a43e <HAL_GPIO_Init+0x23a>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	4a56      	ldr	r2, [pc, #344]	@ (800a538 <HAL_GPIO_Init+0x334>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d02b      	beq.n	800a43a <HAL_GPIO_Init+0x236>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	4a55      	ldr	r2, [pc, #340]	@ (800a53c <HAL_GPIO_Init+0x338>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d025      	beq.n	800a436 <HAL_GPIO_Init+0x232>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	4a54      	ldr	r2, [pc, #336]	@ (800a540 <HAL_GPIO_Init+0x33c>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d01f      	beq.n	800a432 <HAL_GPIO_Init+0x22e>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	4a53      	ldr	r2, [pc, #332]	@ (800a544 <HAL_GPIO_Init+0x340>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d019      	beq.n	800a42e <HAL_GPIO_Init+0x22a>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	4a52      	ldr	r2, [pc, #328]	@ (800a548 <HAL_GPIO_Init+0x344>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d013      	beq.n	800a42a <HAL_GPIO_Init+0x226>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	4a51      	ldr	r2, [pc, #324]	@ (800a54c <HAL_GPIO_Init+0x348>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d00d      	beq.n	800a426 <HAL_GPIO_Init+0x222>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	4a50      	ldr	r2, [pc, #320]	@ (800a550 <HAL_GPIO_Init+0x34c>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d007      	beq.n	800a422 <HAL_GPIO_Init+0x21e>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	4a4f      	ldr	r2, [pc, #316]	@ (800a554 <HAL_GPIO_Init+0x350>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d101      	bne.n	800a41e <HAL_GPIO_Init+0x21a>
 800a41a:	2309      	movs	r3, #9
 800a41c:	e012      	b.n	800a444 <HAL_GPIO_Init+0x240>
 800a41e:	230a      	movs	r3, #10
 800a420:	e010      	b.n	800a444 <HAL_GPIO_Init+0x240>
 800a422:	2308      	movs	r3, #8
 800a424:	e00e      	b.n	800a444 <HAL_GPIO_Init+0x240>
 800a426:	2307      	movs	r3, #7
 800a428:	e00c      	b.n	800a444 <HAL_GPIO_Init+0x240>
 800a42a:	2306      	movs	r3, #6
 800a42c:	e00a      	b.n	800a444 <HAL_GPIO_Init+0x240>
 800a42e:	2305      	movs	r3, #5
 800a430:	e008      	b.n	800a444 <HAL_GPIO_Init+0x240>
 800a432:	2304      	movs	r3, #4
 800a434:	e006      	b.n	800a444 <HAL_GPIO_Init+0x240>
 800a436:	2303      	movs	r3, #3
 800a438:	e004      	b.n	800a444 <HAL_GPIO_Init+0x240>
 800a43a:	2302      	movs	r3, #2
 800a43c:	e002      	b.n	800a444 <HAL_GPIO_Init+0x240>
 800a43e:	2301      	movs	r3, #1
 800a440:	e000      	b.n	800a444 <HAL_GPIO_Init+0x240>
 800a442:	2300      	movs	r3, #0
 800a444:	69fa      	ldr	r2, [r7, #28]
 800a446:	f002 0203 	and.w	r2, r2, #3
 800a44a:	0092      	lsls	r2, r2, #2
 800a44c:	4093      	lsls	r3, r2
 800a44e:	69ba      	ldr	r2, [r7, #24]
 800a450:	4313      	orrs	r3, r2
 800a452:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800a454:	4935      	ldr	r1, [pc, #212]	@ (800a52c <HAL_GPIO_Init+0x328>)
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	089b      	lsrs	r3, r3, #2
 800a45a:	3302      	adds	r3, #2
 800a45c:	69ba      	ldr	r2, [r7, #24]
 800a45e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a462:	4b3d      	ldr	r3, [pc, #244]	@ (800a558 <HAL_GPIO_Init+0x354>)
 800a464:	689b      	ldr	r3, [r3, #8]
 800a466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	43db      	mvns	r3, r3
 800a46c:	69ba      	ldr	r2, [r7, #24]
 800a46e:	4013      	ands	r3, r2
 800a470:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d003      	beq.n	800a486 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800a47e:	69ba      	ldr	r2, [r7, #24]
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	4313      	orrs	r3, r2
 800a484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a486:	4a34      	ldr	r2, [pc, #208]	@ (800a558 <HAL_GPIO_Init+0x354>)
 800a488:	69bb      	ldr	r3, [r7, #24]
 800a48a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a48c:	4b32      	ldr	r3, [pc, #200]	@ (800a558 <HAL_GPIO_Init+0x354>)
 800a48e:	68db      	ldr	r3, [r3, #12]
 800a490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	43db      	mvns	r3, r3
 800a496:	69ba      	ldr	r2, [r7, #24]
 800a498:	4013      	ands	r3, r2
 800a49a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d003      	beq.n	800a4b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800a4a8:	69ba      	ldr	r2, [r7, #24]
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a4b0:	4a29      	ldr	r2, [pc, #164]	@ (800a558 <HAL_GPIO_Init+0x354>)
 800a4b2:	69bb      	ldr	r3, [r7, #24]
 800a4b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800a4b6:	4b28      	ldr	r3, [pc, #160]	@ (800a558 <HAL_GPIO_Init+0x354>)
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	43db      	mvns	r3, r3
 800a4c0:	69ba      	ldr	r2, [r7, #24]
 800a4c2:	4013      	ands	r3, r2
 800a4c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d003      	beq.n	800a4da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800a4d2:	69ba      	ldr	r2, [r7, #24]
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a4da:	4a1f      	ldr	r2, [pc, #124]	@ (800a558 <HAL_GPIO_Init+0x354>)
 800a4dc:	69bb      	ldr	r3, [r7, #24]
 800a4de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a4e0:	4b1d      	ldr	r3, [pc, #116]	@ (800a558 <HAL_GPIO_Init+0x354>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	43db      	mvns	r3, r3
 800a4ea:	69ba      	ldr	r2, [r7, #24]
 800a4ec:	4013      	ands	r3, r2
 800a4ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d003      	beq.n	800a504 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800a4fc:	69ba      	ldr	r2, [r7, #24]
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	4313      	orrs	r3, r2
 800a502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a504:	4a14      	ldr	r2, [pc, #80]	@ (800a558 <HAL_GPIO_Init+0x354>)
 800a506:	69bb      	ldr	r3, [r7, #24]
 800a508:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800a50a:	69fb      	ldr	r3, [r7, #28]
 800a50c:	3301      	adds	r3, #1
 800a50e:	61fb      	str	r3, [r7, #28]
 800a510:	69fb      	ldr	r3, [r7, #28]
 800a512:	2b0f      	cmp	r3, #15
 800a514:	f67f ae86 	bls.w	800a224 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800a518:	bf00      	nop
 800a51a:	bf00      	nop
 800a51c:	3724      	adds	r7, #36	@ 0x24
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr
 800a526:	bf00      	nop
 800a528:	40023800 	.word	0x40023800
 800a52c:	40013800 	.word	0x40013800
 800a530:	40020000 	.word	0x40020000
 800a534:	40020400 	.word	0x40020400
 800a538:	40020800 	.word	0x40020800
 800a53c:	40020c00 	.word	0x40020c00
 800a540:	40021000 	.word	0x40021000
 800a544:	40021400 	.word	0x40021400
 800a548:	40021800 	.word	0x40021800
 800a54c:	40021c00 	.word	0x40021c00
 800a550:	40022000 	.word	0x40022000
 800a554:	40022400 	.word	0x40022400
 800a558:	40013c00 	.word	0x40013c00

0800a55c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	460b      	mov	r3, r1
 800a566:	807b      	strh	r3, [r7, #2]
 800a568:	4613      	mov	r3, r2
 800a56a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a56c:	787b      	ldrb	r3, [r7, #1]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d003      	beq.n	800a57a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a572:	887a      	ldrh	r2, [r7, #2]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800a578:	e003      	b.n	800a582 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800a57a:	887b      	ldrh	r3, [r7, #2]
 800a57c:	041a      	lsls	r2, r3, #16
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	619a      	str	r2, [r3, #24]
}
 800a582:	bf00      	nop
 800a584:	370c      	adds	r7, #12
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr

0800a58e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a58e:	b480      	push	{r7}
 800a590:	b085      	sub	sp, #20
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
 800a596:	460b      	mov	r3, r1
 800a598:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	695b      	ldr	r3, [r3, #20]
 800a59e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a5a0:	887a      	ldrh	r2, [r7, #2]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	4013      	ands	r3, r2
 800a5a6:	041a      	lsls	r2, r3, #16
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	43d9      	mvns	r1, r3
 800a5ac:	887b      	ldrh	r3, [r7, #2]
 800a5ae:	400b      	ands	r3, r1
 800a5b0:	431a      	orrs	r2, r3
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	619a      	str	r2, [r3, #24]
}
 800a5b6:	bf00      	nop
 800a5b8:	3714      	adds	r7, #20
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr
	...

0800a5c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a5ce:	4b23      	ldr	r3, [pc, #140]	@ (800a65c <HAL_PWREx_EnableOverDrive+0x98>)
 800a5d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5d2:	4a22      	ldr	r2, [pc, #136]	@ (800a65c <HAL_PWREx_EnableOverDrive+0x98>)
 800a5d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a5d8:	6413      	str	r3, [r2, #64]	@ 0x40
 800a5da:	4b20      	ldr	r3, [pc, #128]	@ (800a65c <HAL_PWREx_EnableOverDrive+0x98>)
 800a5dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a5e2:	603b      	str	r3, [r7, #0]
 800a5e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a5e6:	4b1e      	ldr	r3, [pc, #120]	@ (800a660 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a1d      	ldr	r2, [pc, #116]	@ (800a660 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a5ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a5f0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a5f2:	f7ff fcf1 	bl	8009fd8 <HAL_GetTick>
 800a5f6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a5f8:	e009      	b.n	800a60e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a5fa:	f7ff fced 	bl	8009fd8 <HAL_GetTick>
 800a5fe:	4602      	mov	r2, r0
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	1ad3      	subs	r3, r2, r3
 800a604:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a608:	d901      	bls.n	800a60e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800a60a:	2303      	movs	r3, #3
 800a60c:	e022      	b.n	800a654 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a60e:	4b14      	ldr	r3, [pc, #80]	@ (800a660 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a610:	685b      	ldr	r3, [r3, #4]
 800a612:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a616:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a61a:	d1ee      	bne.n	800a5fa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a61c:	4b10      	ldr	r3, [pc, #64]	@ (800a660 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	4a0f      	ldr	r2, [pc, #60]	@ (800a660 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a622:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a626:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a628:	f7ff fcd6 	bl	8009fd8 <HAL_GetTick>
 800a62c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a62e:	e009      	b.n	800a644 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a630:	f7ff fcd2 	bl	8009fd8 <HAL_GetTick>
 800a634:	4602      	mov	r2, r0
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	1ad3      	subs	r3, r2, r3
 800a63a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a63e:	d901      	bls.n	800a644 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800a640:	2303      	movs	r3, #3
 800a642:	e007      	b.n	800a654 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a644:	4b06      	ldr	r3, [pc, #24]	@ (800a660 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a64c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a650:	d1ee      	bne.n	800a630 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800a652:	2300      	movs	r3, #0
}
 800a654:	4618      	mov	r0, r3
 800a656:	3708      	adds	r7, #8
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}
 800a65c:	40023800 	.word	0x40023800
 800a660:	40007000 	.word	0x40007000

0800a664 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b086      	sub	sp, #24
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800a66c:	2300      	movs	r3, #0
 800a66e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d101      	bne.n	800a67a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800a676:	2301      	movs	r3, #1
 800a678:	e291      	b.n	800ab9e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f003 0301 	and.w	r3, r3, #1
 800a682:	2b00      	cmp	r3, #0
 800a684:	f000 8087 	beq.w	800a796 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a688:	4b96      	ldr	r3, [pc, #600]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a68a:	689b      	ldr	r3, [r3, #8]
 800a68c:	f003 030c 	and.w	r3, r3, #12
 800a690:	2b04      	cmp	r3, #4
 800a692:	d00c      	beq.n	800a6ae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a694:	4b93      	ldr	r3, [pc, #588]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	f003 030c 	and.w	r3, r3, #12
 800a69c:	2b08      	cmp	r3, #8
 800a69e:	d112      	bne.n	800a6c6 <HAL_RCC_OscConfig+0x62>
 800a6a0:	4b90      	ldr	r3, [pc, #576]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a6a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a6ac:	d10b      	bne.n	800a6c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a6ae:	4b8d      	ldr	r3, [pc, #564]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d06c      	beq.n	800a794 <HAL_RCC_OscConfig+0x130>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d168      	bne.n	800a794 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e26b      	b.n	800ab9e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6ce:	d106      	bne.n	800a6de <HAL_RCC_OscConfig+0x7a>
 800a6d0:	4b84      	ldr	r3, [pc, #528]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4a83      	ldr	r2, [pc, #524]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a6d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a6da:	6013      	str	r3, [r2, #0]
 800a6dc:	e02e      	b.n	800a73c <HAL_RCC_OscConfig+0xd8>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d10c      	bne.n	800a700 <HAL_RCC_OscConfig+0x9c>
 800a6e6:	4b7f      	ldr	r3, [pc, #508]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a7e      	ldr	r2, [pc, #504]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a6ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a6f0:	6013      	str	r3, [r2, #0]
 800a6f2:	4b7c      	ldr	r3, [pc, #496]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4a7b      	ldr	r2, [pc, #492]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a6f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a6fc:	6013      	str	r3, [r2, #0]
 800a6fe:	e01d      	b.n	800a73c <HAL_RCC_OscConfig+0xd8>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a708:	d10c      	bne.n	800a724 <HAL_RCC_OscConfig+0xc0>
 800a70a:	4b76      	ldr	r3, [pc, #472]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4a75      	ldr	r2, [pc, #468]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a710:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a714:	6013      	str	r3, [r2, #0]
 800a716:	4b73      	ldr	r3, [pc, #460]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a72      	ldr	r2, [pc, #456]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a71c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a720:	6013      	str	r3, [r2, #0]
 800a722:	e00b      	b.n	800a73c <HAL_RCC_OscConfig+0xd8>
 800a724:	4b6f      	ldr	r3, [pc, #444]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4a6e      	ldr	r2, [pc, #440]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a72a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a72e:	6013      	str	r3, [r2, #0]
 800a730:	4b6c      	ldr	r3, [pc, #432]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4a6b      	ldr	r2, [pc, #428]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a736:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a73a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d013      	beq.n	800a76c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a744:	f7ff fc48 	bl	8009fd8 <HAL_GetTick>
 800a748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a74a:	e008      	b.n	800a75e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a74c:	f7ff fc44 	bl	8009fd8 <HAL_GetTick>
 800a750:	4602      	mov	r2, r0
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	1ad3      	subs	r3, r2, r3
 800a756:	2b64      	cmp	r3, #100	@ 0x64
 800a758:	d901      	bls.n	800a75e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a75a:	2303      	movs	r3, #3
 800a75c:	e21f      	b.n	800ab9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a75e:	4b61      	ldr	r3, [pc, #388]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a766:	2b00      	cmp	r3, #0
 800a768:	d0f0      	beq.n	800a74c <HAL_RCC_OscConfig+0xe8>
 800a76a:	e014      	b.n	800a796 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a76c:	f7ff fc34 	bl	8009fd8 <HAL_GetTick>
 800a770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a772:	e008      	b.n	800a786 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a774:	f7ff fc30 	bl	8009fd8 <HAL_GetTick>
 800a778:	4602      	mov	r2, r0
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	1ad3      	subs	r3, r2, r3
 800a77e:	2b64      	cmp	r3, #100	@ 0x64
 800a780:	d901      	bls.n	800a786 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a782:	2303      	movs	r3, #3
 800a784:	e20b      	b.n	800ab9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a786:	4b57      	ldr	r3, [pc, #348]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d1f0      	bne.n	800a774 <HAL_RCC_OscConfig+0x110>
 800a792:	e000      	b.n	800a796 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f003 0302 	and.w	r3, r3, #2
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d069      	beq.n	800a876 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a7a2:	4b50      	ldr	r3, [pc, #320]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	f003 030c 	and.w	r3, r3, #12
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d00b      	beq.n	800a7c6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a7ae:	4b4d      	ldr	r3, [pc, #308]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a7b0:	689b      	ldr	r3, [r3, #8]
 800a7b2:	f003 030c 	and.w	r3, r3, #12
 800a7b6:	2b08      	cmp	r3, #8
 800a7b8:	d11c      	bne.n	800a7f4 <HAL_RCC_OscConfig+0x190>
 800a7ba:	4b4a      	ldr	r3, [pc, #296]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d116      	bne.n	800a7f4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a7c6:	4b47      	ldr	r3, [pc, #284]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f003 0302 	and.w	r3, r3, #2
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d005      	beq.n	800a7de <HAL_RCC_OscConfig+0x17a>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	68db      	ldr	r3, [r3, #12]
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d001      	beq.n	800a7de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a7da:	2301      	movs	r3, #1
 800a7dc:	e1df      	b.n	800ab9e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a7de:	4b41      	ldr	r3, [pc, #260]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	691b      	ldr	r3, [r3, #16]
 800a7ea:	00db      	lsls	r3, r3, #3
 800a7ec:	493d      	ldr	r1, [pc, #244]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a7f2:	e040      	b.n	800a876 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d023      	beq.n	800a844 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a7fc:	4b39      	ldr	r3, [pc, #228]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a38      	ldr	r2, [pc, #224]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a802:	f043 0301 	orr.w	r3, r3, #1
 800a806:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a808:	f7ff fbe6 	bl	8009fd8 <HAL_GetTick>
 800a80c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a80e:	e008      	b.n	800a822 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a810:	f7ff fbe2 	bl	8009fd8 <HAL_GetTick>
 800a814:	4602      	mov	r2, r0
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	1ad3      	subs	r3, r2, r3
 800a81a:	2b02      	cmp	r3, #2
 800a81c:	d901      	bls.n	800a822 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800a81e:	2303      	movs	r3, #3
 800a820:	e1bd      	b.n	800ab9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a822:	4b30      	ldr	r3, [pc, #192]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f003 0302 	and.w	r3, r3, #2
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d0f0      	beq.n	800a810 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a82e:	4b2d      	ldr	r3, [pc, #180]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	691b      	ldr	r3, [r3, #16]
 800a83a:	00db      	lsls	r3, r3, #3
 800a83c:	4929      	ldr	r1, [pc, #164]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a83e:	4313      	orrs	r3, r2
 800a840:	600b      	str	r3, [r1, #0]
 800a842:	e018      	b.n	800a876 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a844:	4b27      	ldr	r3, [pc, #156]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a26      	ldr	r2, [pc, #152]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a84a:	f023 0301 	bic.w	r3, r3, #1
 800a84e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a850:	f7ff fbc2 	bl	8009fd8 <HAL_GetTick>
 800a854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a856:	e008      	b.n	800a86a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a858:	f7ff fbbe 	bl	8009fd8 <HAL_GetTick>
 800a85c:	4602      	mov	r2, r0
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	1ad3      	subs	r3, r2, r3
 800a862:	2b02      	cmp	r3, #2
 800a864:	d901      	bls.n	800a86a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a866:	2303      	movs	r3, #3
 800a868:	e199      	b.n	800ab9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a86a:	4b1e      	ldr	r3, [pc, #120]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f003 0302 	and.w	r3, r3, #2
 800a872:	2b00      	cmp	r3, #0
 800a874:	d1f0      	bne.n	800a858 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f003 0308 	and.w	r3, r3, #8
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d038      	beq.n	800a8f4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	695b      	ldr	r3, [r3, #20]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d019      	beq.n	800a8be <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a88a:	4b16      	ldr	r3, [pc, #88]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a88c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a88e:	4a15      	ldr	r2, [pc, #84]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a890:	f043 0301 	orr.w	r3, r3, #1
 800a894:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a896:	f7ff fb9f 	bl	8009fd8 <HAL_GetTick>
 800a89a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a89c:	e008      	b.n	800a8b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a89e:	f7ff fb9b 	bl	8009fd8 <HAL_GetTick>
 800a8a2:	4602      	mov	r2, r0
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	1ad3      	subs	r3, r2, r3
 800a8a8:	2b02      	cmp	r3, #2
 800a8aa:	d901      	bls.n	800a8b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a8ac:	2303      	movs	r3, #3
 800a8ae:	e176      	b.n	800ab9e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a8b0:	4b0c      	ldr	r3, [pc, #48]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a8b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8b4:	f003 0302 	and.w	r3, r3, #2
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d0f0      	beq.n	800a89e <HAL_RCC_OscConfig+0x23a>
 800a8bc:	e01a      	b.n	800a8f4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a8be:	4b09      	ldr	r3, [pc, #36]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a8c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8c2:	4a08      	ldr	r2, [pc, #32]	@ (800a8e4 <HAL_RCC_OscConfig+0x280>)
 800a8c4:	f023 0301 	bic.w	r3, r3, #1
 800a8c8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8ca:	f7ff fb85 	bl	8009fd8 <HAL_GetTick>
 800a8ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a8d0:	e00a      	b.n	800a8e8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a8d2:	f7ff fb81 	bl	8009fd8 <HAL_GetTick>
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	1ad3      	subs	r3, r2, r3
 800a8dc:	2b02      	cmp	r3, #2
 800a8de:	d903      	bls.n	800a8e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a8e0:	2303      	movs	r3, #3
 800a8e2:	e15c      	b.n	800ab9e <HAL_RCC_OscConfig+0x53a>
 800a8e4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a8e8:	4b91      	ldr	r3, [pc, #580]	@ (800ab30 <HAL_RCC_OscConfig+0x4cc>)
 800a8ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8ec:	f003 0302 	and.w	r3, r3, #2
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d1ee      	bne.n	800a8d2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f003 0304 	and.w	r3, r3, #4
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	f000 80a4 	beq.w	800aa4a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a902:	4b8b      	ldr	r3, [pc, #556]	@ (800ab30 <HAL_RCC_OscConfig+0x4cc>)
 800a904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d10d      	bne.n	800a92a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a90e:	4b88      	ldr	r3, [pc, #544]	@ (800ab30 <HAL_RCC_OscConfig+0x4cc>)
 800a910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a912:	4a87      	ldr	r2, [pc, #540]	@ (800ab30 <HAL_RCC_OscConfig+0x4cc>)
 800a914:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a918:	6413      	str	r3, [r2, #64]	@ 0x40
 800a91a:	4b85      	ldr	r3, [pc, #532]	@ (800ab30 <HAL_RCC_OscConfig+0x4cc>)
 800a91c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a91e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a922:	60bb      	str	r3, [r7, #8]
 800a924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a926:	2301      	movs	r3, #1
 800a928:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a92a:	4b82      	ldr	r3, [pc, #520]	@ (800ab34 <HAL_RCC_OscConfig+0x4d0>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a932:	2b00      	cmp	r3, #0
 800a934:	d118      	bne.n	800a968 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800a936:	4b7f      	ldr	r3, [pc, #508]	@ (800ab34 <HAL_RCC_OscConfig+0x4d0>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4a7e      	ldr	r2, [pc, #504]	@ (800ab34 <HAL_RCC_OscConfig+0x4d0>)
 800a93c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a940:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a942:	f7ff fb49 	bl	8009fd8 <HAL_GetTick>
 800a946:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a948:	e008      	b.n	800a95c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a94a:	f7ff fb45 	bl	8009fd8 <HAL_GetTick>
 800a94e:	4602      	mov	r2, r0
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	1ad3      	subs	r3, r2, r3
 800a954:	2b64      	cmp	r3, #100	@ 0x64
 800a956:	d901      	bls.n	800a95c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800a958:	2303      	movs	r3, #3
 800a95a:	e120      	b.n	800ab9e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a95c:	4b75      	ldr	r3, [pc, #468]	@ (800ab34 <HAL_RCC_OscConfig+0x4d0>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a964:	2b00      	cmp	r3, #0
 800a966:	d0f0      	beq.n	800a94a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	689b      	ldr	r3, [r3, #8]
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d106      	bne.n	800a97e <HAL_RCC_OscConfig+0x31a>
 800a970:	4b6f      	ldr	r3, [pc, #444]	@ (800ab30 <HAL_RCC_OscConfig+0x4cc>)
 800a972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a974:	4a6e      	ldr	r2, [pc, #440]	@ (800ab30 <HAL_RCC_OscConfig+0x4cc>)
 800a976:	f043 0301 	orr.w	r3, r3, #1
 800a97a:	6713      	str	r3, [r2, #112]	@ 0x70
 800a97c:	e02d      	b.n	800a9da <HAL_RCC_OscConfig+0x376>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	689b      	ldr	r3, [r3, #8]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d10c      	bne.n	800a9a0 <HAL_RCC_OscConfig+0x33c>
 800a986:	4b6a      	ldr	r3, [pc, #424]	@ (800ab30 <HAL_RCC_OscConfig+0x4cc>)
 800a988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a98a:	4a69      	ldr	r2, [pc, #420]	@ (800ab30 <HAL_RCC_OscConfig+0x4cc>)
 800a98c:	f023 0301 	bic.w	r3, r3, #1
 800a990:	6713      	str	r3, [r2, #112]	@ 0x70
 800a992:	4b67      	ldr	r3, [pc, #412]	@ (800ab30 <HAL_RCC_OscConfig+0x4cc>)
 800a994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a996:	4a66      	ldr	r2, [pc, #408]	@ (800ab30 <HAL_RCC_OscConfig+0x4cc>)
 800a998:	f023 0304 	bic.w	r3, r3, #4
 800a99c:	6713      	str	r3, [r2, #112]	@ 0x70
 800a99e:	e01c      	b.n	800a9da <HAL_RCC_OscConfig+0x376>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	689b      	ldr	r3, [r3, #8]
 800a9a4:	2b05      	cmp	r3, #5
 800a9a6:	d10c      	bne.n	800a9c2 <HAL_RCC_OscConfig+0x35e>
 800a9a8:	4b61      	ldr	r3, [pc, #388]	@ (800ab30 <HAL_RCC_OscConfig+0x4cc>)
 800a9aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9ac:	4a60      	ldr	r2, [pc, #384]	@ (800ab30 <HAL_RCC_OscConfig+0x4cc>)
 800a9ae:	f043 0304 	orr.w	r3, r3, #4
 800a9b2:	6713      	str	r3, [r2, #112]	@ 0x70
 800a9b4:	4b5e      	ldr	r3, [pc, #376]	@ (800ab30 <HAL_RCC_OscConfig+0x4cc>)
 800a9b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9b8:	4a5d      	ldr	r2, [pc, #372]	@ (800ab30 <HAL_RCC_OscConfig+0x4cc>)
 800a9ba:	f043 0301 	orr.w	r3, r3, #1
 800a9be:	6713      	str	r3, [r2, #112]	@ 0x70
 800a9c0:	e00b      	b.n	800a9da <HAL_RCC_OscConfig+0x376>
 800a9c2:	4b5b      	ldr	r3, [pc, #364]	@ (800ab30 <HAL_RCC_OscConfig+0x4cc>)
 800a9c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9c6:	4a5a      	ldr	r2, [pc, #360]	@ (800ab30 <HAL_RCC_OscConfig+0x4cc>)
 800a9c8:	f023 0301 	bic.w	r3, r3, #1
 800a9cc:	6713      	str	r3, [r2, #112]	@ 0x70
 800a9ce:	4b58      	ldr	r3, [pc, #352]	@ (800ab30 <HAL_RCC_OscConfig+0x4cc>)
 800a9d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9d2:	4a57      	ldr	r2, [pc, #348]	@ (800ab30 <HAL_RCC_OscConfig+0x4cc>)
 800a9d4:	f023 0304 	bic.w	r3, r3, #4
 800a9d8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	689b      	ldr	r3, [r3, #8]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d015      	beq.n	800aa0e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9e2:	f7ff faf9 	bl	8009fd8 <HAL_GetTick>
 800a9e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a9e8:	e00a      	b.n	800aa00 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a9ea:	f7ff faf5 	bl	8009fd8 <HAL_GetTick>
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	1ad3      	subs	r3, r2, r3
 800a9f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d901      	bls.n	800aa00 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800a9fc:	2303      	movs	r3, #3
 800a9fe:	e0ce      	b.n	800ab9e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa00:	4b4b      	ldr	r3, [pc, #300]	@ (800ab30 <HAL_RCC_OscConfig+0x4cc>)
 800aa02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa04:	f003 0302 	and.w	r3, r3, #2
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d0ee      	beq.n	800a9ea <HAL_RCC_OscConfig+0x386>
 800aa0c:	e014      	b.n	800aa38 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa0e:	f7ff fae3 	bl	8009fd8 <HAL_GetTick>
 800aa12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aa14:	e00a      	b.n	800aa2c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa16:	f7ff fadf 	bl	8009fd8 <HAL_GetTick>
 800aa1a:	4602      	mov	r2, r0
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	1ad3      	subs	r3, r2, r3
 800aa20:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d901      	bls.n	800aa2c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800aa28:	2303      	movs	r3, #3
 800aa2a:	e0b8      	b.n	800ab9e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aa2c:	4b40      	ldr	r3, [pc, #256]	@ (800ab30 <HAL_RCC_OscConfig+0x4cc>)
 800aa2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa30:	f003 0302 	and.w	r3, r3, #2
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d1ee      	bne.n	800aa16 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800aa38:	7dfb      	ldrb	r3, [r7, #23]
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	d105      	bne.n	800aa4a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa3e:	4b3c      	ldr	r3, [pc, #240]	@ (800ab30 <HAL_RCC_OscConfig+0x4cc>)
 800aa40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa42:	4a3b      	ldr	r2, [pc, #236]	@ (800ab30 <HAL_RCC_OscConfig+0x4cc>)
 800aa44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aa48:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	699b      	ldr	r3, [r3, #24]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	f000 80a4 	beq.w	800ab9c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aa54:	4b36      	ldr	r3, [pc, #216]	@ (800ab30 <HAL_RCC_OscConfig+0x4cc>)
 800aa56:	689b      	ldr	r3, [r3, #8]
 800aa58:	f003 030c 	and.w	r3, r3, #12
 800aa5c:	2b08      	cmp	r3, #8
 800aa5e:	d06b      	beq.n	800ab38 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	699b      	ldr	r3, [r3, #24]
 800aa64:	2b02      	cmp	r3, #2
 800aa66:	d149      	bne.n	800aafc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa68:	4b31      	ldr	r3, [pc, #196]	@ (800ab30 <HAL_RCC_OscConfig+0x4cc>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a30      	ldr	r2, [pc, #192]	@ (800ab30 <HAL_RCC_OscConfig+0x4cc>)
 800aa6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aa72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa74:	f7ff fab0 	bl	8009fd8 <HAL_GetTick>
 800aa78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aa7a:	e008      	b.n	800aa8e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa7c:	f7ff faac 	bl	8009fd8 <HAL_GetTick>
 800aa80:	4602      	mov	r2, r0
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	1ad3      	subs	r3, r2, r3
 800aa86:	2b02      	cmp	r3, #2
 800aa88:	d901      	bls.n	800aa8e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800aa8a:	2303      	movs	r3, #3
 800aa8c:	e087      	b.n	800ab9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aa8e:	4b28      	ldr	r3, [pc, #160]	@ (800ab30 <HAL_RCC_OscConfig+0x4cc>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d1f0      	bne.n	800aa7c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	69da      	ldr	r2, [r3, #28]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6a1b      	ldr	r3, [r3, #32]
 800aaa2:	431a      	orrs	r2, r3
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaa8:	019b      	lsls	r3, r3, #6
 800aaaa:	431a      	orrs	r2, r3
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aab0:	085b      	lsrs	r3, r3, #1
 800aab2:	3b01      	subs	r3, #1
 800aab4:	041b      	lsls	r3, r3, #16
 800aab6:	431a      	orrs	r2, r3
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aabc:	061b      	lsls	r3, r3, #24
 800aabe:	4313      	orrs	r3, r2
 800aac0:	4a1b      	ldr	r2, [pc, #108]	@ (800ab30 <HAL_RCC_OscConfig+0x4cc>)
 800aac2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800aac6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aac8:	4b19      	ldr	r3, [pc, #100]	@ (800ab30 <HAL_RCC_OscConfig+0x4cc>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4a18      	ldr	r2, [pc, #96]	@ (800ab30 <HAL_RCC_OscConfig+0x4cc>)
 800aace:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aad2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aad4:	f7ff fa80 	bl	8009fd8 <HAL_GetTick>
 800aad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aada:	e008      	b.n	800aaee <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aadc:	f7ff fa7c 	bl	8009fd8 <HAL_GetTick>
 800aae0:	4602      	mov	r2, r0
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	1ad3      	subs	r3, r2, r3
 800aae6:	2b02      	cmp	r3, #2
 800aae8:	d901      	bls.n	800aaee <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800aaea:	2303      	movs	r3, #3
 800aaec:	e057      	b.n	800ab9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aaee:	4b10      	ldr	r3, [pc, #64]	@ (800ab30 <HAL_RCC_OscConfig+0x4cc>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d0f0      	beq.n	800aadc <HAL_RCC_OscConfig+0x478>
 800aafa:	e04f      	b.n	800ab9c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aafc:	4b0c      	ldr	r3, [pc, #48]	@ (800ab30 <HAL_RCC_OscConfig+0x4cc>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4a0b      	ldr	r2, [pc, #44]	@ (800ab30 <HAL_RCC_OscConfig+0x4cc>)
 800ab02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ab06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab08:	f7ff fa66 	bl	8009fd8 <HAL_GetTick>
 800ab0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ab0e:	e008      	b.n	800ab22 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab10:	f7ff fa62 	bl	8009fd8 <HAL_GetTick>
 800ab14:	4602      	mov	r2, r0
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	1ad3      	subs	r3, r2, r3
 800ab1a:	2b02      	cmp	r3, #2
 800ab1c:	d901      	bls.n	800ab22 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800ab1e:	2303      	movs	r3, #3
 800ab20:	e03d      	b.n	800ab9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ab22:	4b03      	ldr	r3, [pc, #12]	@ (800ab30 <HAL_RCC_OscConfig+0x4cc>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d1f0      	bne.n	800ab10 <HAL_RCC_OscConfig+0x4ac>
 800ab2e:	e035      	b.n	800ab9c <HAL_RCC_OscConfig+0x538>
 800ab30:	40023800 	.word	0x40023800
 800ab34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800ab38:	4b1b      	ldr	r3, [pc, #108]	@ (800aba8 <HAL_RCC_OscConfig+0x544>)
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	699b      	ldr	r3, [r3, #24]
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d028      	beq.n	800ab98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d121      	bne.n	800ab98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	d11a      	bne.n	800ab98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ab62:	68fa      	ldr	r2, [r7, #12]
 800ab64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800ab68:	4013      	ands	r3, r2
 800ab6a:	687a      	ldr	r2, [r7, #4]
 800ab6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ab6e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d111      	bne.n	800ab98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab7e:	085b      	lsrs	r3, r3, #1
 800ab80:	3b01      	subs	r3, #1
 800ab82:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d107      	bne.n	800ab98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab92:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d001      	beq.n	800ab9c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800ab98:	2301      	movs	r3, #1
 800ab9a:	e000      	b.n	800ab9e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800ab9c:	2300      	movs	r3, #0
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3718      	adds	r7, #24
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop
 800aba8:	40023800 	.word	0x40023800

0800abac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800abb6:	2300      	movs	r3, #0
 800abb8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d101      	bne.n	800abc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800abc0:	2301      	movs	r3, #1
 800abc2:	e0d0      	b.n	800ad66 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800abc4:	4b6a      	ldr	r3, [pc, #424]	@ (800ad70 <HAL_RCC_ClockConfig+0x1c4>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f003 030f 	and.w	r3, r3, #15
 800abcc:	683a      	ldr	r2, [r7, #0]
 800abce:	429a      	cmp	r2, r3
 800abd0:	d910      	bls.n	800abf4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800abd2:	4b67      	ldr	r3, [pc, #412]	@ (800ad70 <HAL_RCC_ClockConfig+0x1c4>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f023 020f 	bic.w	r2, r3, #15
 800abda:	4965      	ldr	r1, [pc, #404]	@ (800ad70 <HAL_RCC_ClockConfig+0x1c4>)
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	4313      	orrs	r3, r2
 800abe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800abe2:	4b63      	ldr	r3, [pc, #396]	@ (800ad70 <HAL_RCC_ClockConfig+0x1c4>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f003 030f 	and.w	r3, r3, #15
 800abea:	683a      	ldr	r2, [r7, #0]
 800abec:	429a      	cmp	r2, r3
 800abee:	d001      	beq.n	800abf4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800abf0:	2301      	movs	r3, #1
 800abf2:	e0b8      	b.n	800ad66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f003 0302 	and.w	r3, r3, #2
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d020      	beq.n	800ac42 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f003 0304 	and.w	r3, r3, #4
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d005      	beq.n	800ac18 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ac0c:	4b59      	ldr	r3, [pc, #356]	@ (800ad74 <HAL_RCC_ClockConfig+0x1c8>)
 800ac0e:	689b      	ldr	r3, [r3, #8]
 800ac10:	4a58      	ldr	r2, [pc, #352]	@ (800ad74 <HAL_RCC_ClockConfig+0x1c8>)
 800ac12:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800ac16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f003 0308 	and.w	r3, r3, #8
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d005      	beq.n	800ac30 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ac24:	4b53      	ldr	r3, [pc, #332]	@ (800ad74 <HAL_RCC_ClockConfig+0x1c8>)
 800ac26:	689b      	ldr	r3, [r3, #8]
 800ac28:	4a52      	ldr	r2, [pc, #328]	@ (800ad74 <HAL_RCC_ClockConfig+0x1c8>)
 800ac2a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800ac2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ac30:	4b50      	ldr	r3, [pc, #320]	@ (800ad74 <HAL_RCC_ClockConfig+0x1c8>)
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	689b      	ldr	r3, [r3, #8]
 800ac3c:	494d      	ldr	r1, [pc, #308]	@ (800ad74 <HAL_RCC_ClockConfig+0x1c8>)
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f003 0301 	and.w	r3, r3, #1
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d040      	beq.n	800acd0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	d107      	bne.n	800ac66 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ac56:	4b47      	ldr	r3, [pc, #284]	@ (800ad74 <HAL_RCC_ClockConfig+0x1c8>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d115      	bne.n	800ac8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ac62:	2301      	movs	r3, #1
 800ac64:	e07f      	b.n	800ad66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	2b02      	cmp	r3, #2
 800ac6c:	d107      	bne.n	800ac7e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ac6e:	4b41      	ldr	r3, [pc, #260]	@ (800ad74 <HAL_RCC_ClockConfig+0x1c8>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d109      	bne.n	800ac8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	e073      	b.n	800ad66 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac7e:	4b3d      	ldr	r3, [pc, #244]	@ (800ad74 <HAL_RCC_ClockConfig+0x1c8>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f003 0302 	and.w	r3, r3, #2
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d101      	bne.n	800ac8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	e06b      	b.n	800ad66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ac8e:	4b39      	ldr	r3, [pc, #228]	@ (800ad74 <HAL_RCC_ClockConfig+0x1c8>)
 800ac90:	689b      	ldr	r3, [r3, #8]
 800ac92:	f023 0203 	bic.w	r2, r3, #3
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	4936      	ldr	r1, [pc, #216]	@ (800ad74 <HAL_RCC_ClockConfig+0x1c8>)
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aca0:	f7ff f99a 	bl	8009fd8 <HAL_GetTick>
 800aca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aca6:	e00a      	b.n	800acbe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aca8:	f7ff f996 	bl	8009fd8 <HAL_GetTick>
 800acac:	4602      	mov	r2, r0
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	1ad3      	subs	r3, r2, r3
 800acb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d901      	bls.n	800acbe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800acba:	2303      	movs	r3, #3
 800acbc:	e053      	b.n	800ad66 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800acbe:	4b2d      	ldr	r3, [pc, #180]	@ (800ad74 <HAL_RCC_ClockConfig+0x1c8>)
 800acc0:	689b      	ldr	r3, [r3, #8]
 800acc2:	f003 020c 	and.w	r2, r3, #12
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	429a      	cmp	r2, r3
 800acce:	d1eb      	bne.n	800aca8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800acd0:	4b27      	ldr	r3, [pc, #156]	@ (800ad70 <HAL_RCC_ClockConfig+0x1c4>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f003 030f 	and.w	r3, r3, #15
 800acd8:	683a      	ldr	r2, [r7, #0]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d210      	bcs.n	800ad00 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800acde:	4b24      	ldr	r3, [pc, #144]	@ (800ad70 <HAL_RCC_ClockConfig+0x1c4>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f023 020f 	bic.w	r2, r3, #15
 800ace6:	4922      	ldr	r1, [pc, #136]	@ (800ad70 <HAL_RCC_ClockConfig+0x1c4>)
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	4313      	orrs	r3, r2
 800acec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800acee:	4b20      	ldr	r3, [pc, #128]	@ (800ad70 <HAL_RCC_ClockConfig+0x1c4>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f003 030f 	and.w	r3, r3, #15
 800acf6:	683a      	ldr	r2, [r7, #0]
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d001      	beq.n	800ad00 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800acfc:	2301      	movs	r3, #1
 800acfe:	e032      	b.n	800ad66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f003 0304 	and.w	r3, r3, #4
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d008      	beq.n	800ad1e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ad0c:	4b19      	ldr	r3, [pc, #100]	@ (800ad74 <HAL_RCC_ClockConfig+0x1c8>)
 800ad0e:	689b      	ldr	r3, [r3, #8]
 800ad10:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	68db      	ldr	r3, [r3, #12]
 800ad18:	4916      	ldr	r1, [pc, #88]	@ (800ad74 <HAL_RCC_ClockConfig+0x1c8>)
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f003 0308 	and.w	r3, r3, #8
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d009      	beq.n	800ad3e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ad2a:	4b12      	ldr	r3, [pc, #72]	@ (800ad74 <HAL_RCC_ClockConfig+0x1c8>)
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	691b      	ldr	r3, [r3, #16]
 800ad36:	00db      	lsls	r3, r3, #3
 800ad38:	490e      	ldr	r1, [pc, #56]	@ (800ad74 <HAL_RCC_ClockConfig+0x1c8>)
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ad3e:	f000 f821 	bl	800ad84 <HAL_RCC_GetSysClockFreq>
 800ad42:	4602      	mov	r2, r0
 800ad44:	4b0b      	ldr	r3, [pc, #44]	@ (800ad74 <HAL_RCC_ClockConfig+0x1c8>)
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	091b      	lsrs	r3, r3, #4
 800ad4a:	f003 030f 	and.w	r3, r3, #15
 800ad4e:	490a      	ldr	r1, [pc, #40]	@ (800ad78 <HAL_RCC_ClockConfig+0x1cc>)
 800ad50:	5ccb      	ldrb	r3, [r1, r3]
 800ad52:	fa22 f303 	lsr.w	r3, r2, r3
 800ad56:	4a09      	ldr	r2, [pc, #36]	@ (800ad7c <HAL_RCC_ClockConfig+0x1d0>)
 800ad58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ad5a:	4b09      	ldr	r3, [pc, #36]	@ (800ad80 <HAL_RCC_ClockConfig+0x1d4>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7ff f8f6 	bl	8009f50 <HAL_InitTick>

  return HAL_OK;
 800ad64:	2300      	movs	r3, #0
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3710      	adds	r7, #16
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	bf00      	nop
 800ad70:	40023c00 	.word	0x40023c00
 800ad74:	40023800 	.word	0x40023800
 800ad78:	08016228 	.word	0x08016228
 800ad7c:	20000000 	.word	0x20000000
 800ad80:	20000004 	.word	0x20000004

0800ad84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ad84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad88:	b094      	sub	sp, #80	@ 0x50
 800ad8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad90:	2300      	movs	r3, #0
 800ad92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad94:	2300      	movs	r3, #0
 800ad96:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ad9c:	4b79      	ldr	r3, [pc, #484]	@ (800af84 <HAL_RCC_GetSysClockFreq+0x200>)
 800ad9e:	689b      	ldr	r3, [r3, #8]
 800ada0:	f003 030c 	and.w	r3, r3, #12
 800ada4:	2b08      	cmp	r3, #8
 800ada6:	d00d      	beq.n	800adc4 <HAL_RCC_GetSysClockFreq+0x40>
 800ada8:	2b08      	cmp	r3, #8
 800adaa:	f200 80e1 	bhi.w	800af70 <HAL_RCC_GetSysClockFreq+0x1ec>
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d002      	beq.n	800adb8 <HAL_RCC_GetSysClockFreq+0x34>
 800adb2:	2b04      	cmp	r3, #4
 800adb4:	d003      	beq.n	800adbe <HAL_RCC_GetSysClockFreq+0x3a>
 800adb6:	e0db      	b.n	800af70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800adb8:	4b73      	ldr	r3, [pc, #460]	@ (800af88 <HAL_RCC_GetSysClockFreq+0x204>)
 800adba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800adbc:	e0db      	b.n	800af76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800adbe:	4b73      	ldr	r3, [pc, #460]	@ (800af8c <HAL_RCC_GetSysClockFreq+0x208>)
 800adc0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800adc2:	e0d8      	b.n	800af76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800adc4:	4b6f      	ldr	r3, [pc, #444]	@ (800af84 <HAL_RCC_GetSysClockFreq+0x200>)
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800adcc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800adce:	4b6d      	ldr	r3, [pc, #436]	@ (800af84 <HAL_RCC_GetSysClockFreq+0x200>)
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800add6:	2b00      	cmp	r3, #0
 800add8:	d063      	beq.n	800aea2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800adda:	4b6a      	ldr	r3, [pc, #424]	@ (800af84 <HAL_RCC_GetSysClockFreq+0x200>)
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	099b      	lsrs	r3, r3, #6
 800ade0:	2200      	movs	r2, #0
 800ade2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ade4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800ade6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ade8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adec:	633b      	str	r3, [r7, #48]	@ 0x30
 800adee:	2300      	movs	r3, #0
 800adf0:	637b      	str	r3, [r7, #52]	@ 0x34
 800adf2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800adf6:	4622      	mov	r2, r4
 800adf8:	462b      	mov	r3, r5
 800adfa:	f04f 0000 	mov.w	r0, #0
 800adfe:	f04f 0100 	mov.w	r1, #0
 800ae02:	0159      	lsls	r1, r3, #5
 800ae04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ae08:	0150      	lsls	r0, r2, #5
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	460b      	mov	r3, r1
 800ae0e:	4621      	mov	r1, r4
 800ae10:	1a51      	subs	r1, r2, r1
 800ae12:	6139      	str	r1, [r7, #16]
 800ae14:	4629      	mov	r1, r5
 800ae16:	eb63 0301 	sbc.w	r3, r3, r1
 800ae1a:	617b      	str	r3, [r7, #20]
 800ae1c:	f04f 0200 	mov.w	r2, #0
 800ae20:	f04f 0300 	mov.w	r3, #0
 800ae24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ae28:	4659      	mov	r1, fp
 800ae2a:	018b      	lsls	r3, r1, #6
 800ae2c:	4651      	mov	r1, sl
 800ae2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ae32:	4651      	mov	r1, sl
 800ae34:	018a      	lsls	r2, r1, #6
 800ae36:	4651      	mov	r1, sl
 800ae38:	ebb2 0801 	subs.w	r8, r2, r1
 800ae3c:	4659      	mov	r1, fp
 800ae3e:	eb63 0901 	sbc.w	r9, r3, r1
 800ae42:	f04f 0200 	mov.w	r2, #0
 800ae46:	f04f 0300 	mov.w	r3, #0
 800ae4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ae4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ae52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ae56:	4690      	mov	r8, r2
 800ae58:	4699      	mov	r9, r3
 800ae5a:	4623      	mov	r3, r4
 800ae5c:	eb18 0303 	adds.w	r3, r8, r3
 800ae60:	60bb      	str	r3, [r7, #8]
 800ae62:	462b      	mov	r3, r5
 800ae64:	eb49 0303 	adc.w	r3, r9, r3
 800ae68:	60fb      	str	r3, [r7, #12]
 800ae6a:	f04f 0200 	mov.w	r2, #0
 800ae6e:	f04f 0300 	mov.w	r3, #0
 800ae72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800ae76:	4629      	mov	r1, r5
 800ae78:	024b      	lsls	r3, r1, #9
 800ae7a:	4621      	mov	r1, r4
 800ae7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800ae80:	4621      	mov	r1, r4
 800ae82:	024a      	lsls	r2, r1, #9
 800ae84:	4610      	mov	r0, r2
 800ae86:	4619      	mov	r1, r3
 800ae88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ae8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ae90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ae94:	f7f5 ff18 	bl	8000cc8 <__aeabi_uldivmod>
 800ae98:	4602      	mov	r2, r0
 800ae9a:	460b      	mov	r3, r1
 800ae9c:	4613      	mov	r3, r2
 800ae9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aea0:	e058      	b.n	800af54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aea2:	4b38      	ldr	r3, [pc, #224]	@ (800af84 <HAL_RCC_GetSysClockFreq+0x200>)
 800aea4:	685b      	ldr	r3, [r3, #4]
 800aea6:	099b      	lsrs	r3, r3, #6
 800aea8:	2200      	movs	r2, #0
 800aeaa:	4618      	mov	r0, r3
 800aeac:	4611      	mov	r1, r2
 800aeae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800aeb2:	623b      	str	r3, [r7, #32]
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	627b      	str	r3, [r7, #36]	@ 0x24
 800aeb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800aebc:	4642      	mov	r2, r8
 800aebe:	464b      	mov	r3, r9
 800aec0:	f04f 0000 	mov.w	r0, #0
 800aec4:	f04f 0100 	mov.w	r1, #0
 800aec8:	0159      	lsls	r1, r3, #5
 800aeca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800aece:	0150      	lsls	r0, r2, #5
 800aed0:	4602      	mov	r2, r0
 800aed2:	460b      	mov	r3, r1
 800aed4:	4641      	mov	r1, r8
 800aed6:	ebb2 0a01 	subs.w	sl, r2, r1
 800aeda:	4649      	mov	r1, r9
 800aedc:	eb63 0b01 	sbc.w	fp, r3, r1
 800aee0:	f04f 0200 	mov.w	r2, #0
 800aee4:	f04f 0300 	mov.w	r3, #0
 800aee8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800aeec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800aef0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800aef4:	ebb2 040a 	subs.w	r4, r2, sl
 800aef8:	eb63 050b 	sbc.w	r5, r3, fp
 800aefc:	f04f 0200 	mov.w	r2, #0
 800af00:	f04f 0300 	mov.w	r3, #0
 800af04:	00eb      	lsls	r3, r5, #3
 800af06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800af0a:	00e2      	lsls	r2, r4, #3
 800af0c:	4614      	mov	r4, r2
 800af0e:	461d      	mov	r5, r3
 800af10:	4643      	mov	r3, r8
 800af12:	18e3      	adds	r3, r4, r3
 800af14:	603b      	str	r3, [r7, #0]
 800af16:	464b      	mov	r3, r9
 800af18:	eb45 0303 	adc.w	r3, r5, r3
 800af1c:	607b      	str	r3, [r7, #4]
 800af1e:	f04f 0200 	mov.w	r2, #0
 800af22:	f04f 0300 	mov.w	r3, #0
 800af26:	e9d7 4500 	ldrd	r4, r5, [r7]
 800af2a:	4629      	mov	r1, r5
 800af2c:	028b      	lsls	r3, r1, #10
 800af2e:	4621      	mov	r1, r4
 800af30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800af34:	4621      	mov	r1, r4
 800af36:	028a      	lsls	r2, r1, #10
 800af38:	4610      	mov	r0, r2
 800af3a:	4619      	mov	r1, r3
 800af3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af3e:	2200      	movs	r2, #0
 800af40:	61bb      	str	r3, [r7, #24]
 800af42:	61fa      	str	r2, [r7, #28]
 800af44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800af48:	f7f5 febe 	bl	8000cc8 <__aeabi_uldivmod>
 800af4c:	4602      	mov	r2, r0
 800af4e:	460b      	mov	r3, r1
 800af50:	4613      	mov	r3, r2
 800af52:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800af54:	4b0b      	ldr	r3, [pc, #44]	@ (800af84 <HAL_RCC_GetSysClockFreq+0x200>)
 800af56:	685b      	ldr	r3, [r3, #4]
 800af58:	0c1b      	lsrs	r3, r3, #16
 800af5a:	f003 0303 	and.w	r3, r3, #3
 800af5e:	3301      	adds	r3, #1
 800af60:	005b      	lsls	r3, r3, #1
 800af62:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800af64:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800af66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af68:	fbb2 f3f3 	udiv	r3, r2, r3
 800af6c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800af6e:	e002      	b.n	800af76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800af70:	4b05      	ldr	r3, [pc, #20]	@ (800af88 <HAL_RCC_GetSysClockFreq+0x204>)
 800af72:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800af74:	bf00      	nop
    }
  }
  return sysclockfreq;
 800af76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3750      	adds	r7, #80	@ 0x50
 800af7c:	46bd      	mov	sp, r7
 800af7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800af82:	bf00      	nop
 800af84:	40023800 	.word	0x40023800
 800af88:	00f42400 	.word	0x00f42400
 800af8c:	007a1200 	.word	0x007a1200

0800af90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d101      	bne.n	800afa2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800af9e:	2301      	movs	r3, #1
 800afa0:	e09d      	b.n	800b0de <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d108      	bne.n	800afbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800afb2:	d009      	beq.n	800afc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2200      	movs	r2, #0
 800afb8:	61da      	str	r2, [r3, #28]
 800afba:	e005      	b.n	800afc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2200      	movs	r2, #0
 800afc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2200      	movs	r2, #0
 800afc6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2200      	movs	r2, #0
 800afcc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800afd4:	b2db      	uxtb	r3, r3
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d106      	bne.n	800afe8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2200      	movs	r2, #0
 800afde:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f7fe fdb4 	bl	8009b50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2202      	movs	r2, #2
 800afec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	681a      	ldr	r2, [r3, #0]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800affe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	68db      	ldr	r3, [r3, #12]
 800b004:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800b008:	d902      	bls.n	800b010 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b00a:	2300      	movs	r3, #0
 800b00c:	60fb      	str	r3, [r7, #12]
 800b00e:	e002      	b.n	800b016 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b010:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b014:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	68db      	ldr	r3, [r3, #12]
 800b01a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800b01e:	d007      	beq.n	800b030 <HAL_SPI_Init+0xa0>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	68db      	ldr	r3, [r3, #12]
 800b024:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800b028:	d002      	beq.n	800b030 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2200      	movs	r2, #0
 800b02e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800b040:	431a      	orrs	r2, r3
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	691b      	ldr	r3, [r3, #16]
 800b046:	f003 0302 	and.w	r3, r3, #2
 800b04a:	431a      	orrs	r2, r3
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	695b      	ldr	r3, [r3, #20]
 800b050:	f003 0301 	and.w	r3, r3, #1
 800b054:	431a      	orrs	r2, r3
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	699b      	ldr	r3, [r3, #24]
 800b05a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b05e:	431a      	orrs	r2, r3
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	69db      	ldr	r3, [r3, #28]
 800b064:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b068:	431a      	orrs	r2, r3
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6a1b      	ldr	r3, [r3, #32]
 800b06e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b072:	ea42 0103 	orr.w	r1, r2, r3
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b07a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	430a      	orrs	r2, r1
 800b084:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	699b      	ldr	r3, [r3, #24]
 800b08a:	0c1b      	lsrs	r3, r3, #16
 800b08c:	f003 0204 	and.w	r2, r3, #4
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b094:	f003 0310 	and.w	r3, r3, #16
 800b098:	431a      	orrs	r2, r3
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b09e:	f003 0308 	and.w	r3, r3, #8
 800b0a2:	431a      	orrs	r2, r3
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	68db      	ldr	r3, [r3, #12]
 800b0a8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800b0ac:	ea42 0103 	orr.w	r1, r2, r3
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	430a      	orrs	r2, r1
 800b0bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	69da      	ldr	r2, [r3, #28]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b0cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800b0dc:	2300      	movs	r3, #0
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3710      	adds	r7, #16
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b088      	sub	sp, #32
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	60f8      	str	r0, [r7, #12]
 800b0ee:	60b9      	str	r1, [r7, #8]
 800b0f0:	603b      	str	r3, [r7, #0]
 800b0f2:	4613      	mov	r3, r2
 800b0f4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b0f6:	f7fe ff6f 	bl	8009fd8 <HAL_GetTick>
 800b0fa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800b0fc:	88fb      	ldrh	r3, [r7, #6]
 800b0fe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800b106:	b2db      	uxtb	r3, r3
 800b108:	2b01      	cmp	r3, #1
 800b10a:	d001      	beq.n	800b110 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800b10c:	2302      	movs	r3, #2
 800b10e:	e15c      	b.n	800b3ca <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d002      	beq.n	800b11c <HAL_SPI_Transmit+0x36>
 800b116:	88fb      	ldrh	r3, [r7, #6]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d101      	bne.n	800b120 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800b11c:	2301      	movs	r3, #1
 800b11e:	e154      	b.n	800b3ca <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b126:	2b01      	cmp	r3, #1
 800b128:	d101      	bne.n	800b12e <HAL_SPI_Transmit+0x48>
 800b12a:	2302      	movs	r3, #2
 800b12c:	e14d      	b.n	800b3ca <HAL_SPI_Transmit+0x2e4>
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2201      	movs	r2, #1
 800b132:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2203      	movs	r2, #3
 800b13a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2200      	movs	r2, #0
 800b142:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	68ba      	ldr	r2, [r7, #8]
 800b148:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	88fa      	ldrh	r2, [r7, #6]
 800b14e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	88fa      	ldrh	r2, [r7, #6]
 800b154:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	2200      	movs	r2, #0
 800b15a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2200      	movs	r2, #0
 800b160:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	2200      	movs	r2, #0
 800b168:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2200      	movs	r2, #0
 800b170:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	2200      	movs	r2, #0
 800b176:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	689b      	ldr	r3, [r3, #8]
 800b17c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b180:	d10f      	bne.n	800b1a2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	681a      	ldr	r2, [r3, #0]
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b190:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b1a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1ac:	2b40      	cmp	r3, #64	@ 0x40
 800b1ae:	d007      	beq.n	800b1c0 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	681a      	ldr	r2, [r3, #0]
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b1be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	68db      	ldr	r3, [r3, #12]
 800b1c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800b1c8:	d952      	bls.n	800b270 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d002      	beq.n	800b1d8 <HAL_SPI_Transmit+0xf2>
 800b1d2:	8b7b      	ldrh	r3, [r7, #26]
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d145      	bne.n	800b264 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1dc:	881a      	ldrh	r2, [r3, #0]
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1e8:	1c9a      	adds	r2, r3, #2
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b1f2:	b29b      	uxth	r3, r3
 800b1f4:	3b01      	subs	r3, #1
 800b1f6:	b29a      	uxth	r2, r3
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b1fc:	e032      	b.n	800b264 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	689b      	ldr	r3, [r3, #8]
 800b204:	f003 0302 	and.w	r3, r3, #2
 800b208:	2b02      	cmp	r3, #2
 800b20a:	d112      	bne.n	800b232 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b210:	881a      	ldrh	r2, [r3, #0]
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b21c:	1c9a      	adds	r2, r3, #2
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b226:	b29b      	uxth	r3, r3
 800b228:	3b01      	subs	r3, #1
 800b22a:	b29a      	uxth	r2, r3
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b230:	e018      	b.n	800b264 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b232:	f7fe fed1 	bl	8009fd8 <HAL_GetTick>
 800b236:	4602      	mov	r2, r0
 800b238:	69fb      	ldr	r3, [r7, #28]
 800b23a:	1ad3      	subs	r3, r2, r3
 800b23c:	683a      	ldr	r2, [r7, #0]
 800b23e:	429a      	cmp	r2, r3
 800b240:	d803      	bhi.n	800b24a <HAL_SPI_Transmit+0x164>
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b248:	d102      	bne.n	800b250 <HAL_SPI_Transmit+0x16a>
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d109      	bne.n	800b264 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2201      	movs	r2, #1
 800b254:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2200      	movs	r2, #0
 800b25c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800b260:	2303      	movs	r3, #3
 800b262:	e0b2      	b.n	800b3ca <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b268:	b29b      	uxth	r3, r3
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d1c7      	bne.n	800b1fe <HAL_SPI_Transmit+0x118>
 800b26e:	e083      	b.n	800b378 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d002      	beq.n	800b27e <HAL_SPI_Transmit+0x198>
 800b278:	8b7b      	ldrh	r3, [r7, #26]
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	d177      	bne.n	800b36e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b282:	b29b      	uxth	r3, r3
 800b284:	2b01      	cmp	r3, #1
 800b286:	d912      	bls.n	800b2ae <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b28c:	881a      	ldrh	r2, [r3, #0]
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b298:	1c9a      	adds	r2, r3, #2
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b2a2:	b29b      	uxth	r3, r3
 800b2a4:	3b02      	subs	r3, #2
 800b2a6:	b29a      	uxth	r2, r3
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b2ac:	e05f      	b.n	800b36e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	330c      	adds	r3, #12
 800b2b8:	7812      	ldrb	r2, [r2, #0]
 800b2ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2c0:	1c5a      	adds	r2, r3, #1
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b2ca:	b29b      	uxth	r3, r3
 800b2cc:	3b01      	subs	r3, #1
 800b2ce:	b29a      	uxth	r2, r3
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800b2d4:	e04b      	b.n	800b36e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	689b      	ldr	r3, [r3, #8]
 800b2dc:	f003 0302 	and.w	r3, r3, #2
 800b2e0:	2b02      	cmp	r3, #2
 800b2e2:	d12b      	bne.n	800b33c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b2e8:	b29b      	uxth	r3, r3
 800b2ea:	2b01      	cmp	r3, #1
 800b2ec:	d912      	bls.n	800b314 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2f2:	881a      	ldrh	r2, [r3, #0]
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2fe:	1c9a      	adds	r2, r3, #2
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b308:	b29b      	uxth	r3, r3
 800b30a:	3b02      	subs	r3, #2
 800b30c:	b29a      	uxth	r2, r3
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b312:	e02c      	b.n	800b36e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	330c      	adds	r3, #12
 800b31e:	7812      	ldrb	r2, [r2, #0]
 800b320:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b326:	1c5a      	adds	r2, r3, #1
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b330:	b29b      	uxth	r3, r3
 800b332:	3b01      	subs	r3, #1
 800b334:	b29a      	uxth	r2, r3
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b33a:	e018      	b.n	800b36e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b33c:	f7fe fe4c 	bl	8009fd8 <HAL_GetTick>
 800b340:	4602      	mov	r2, r0
 800b342:	69fb      	ldr	r3, [r7, #28]
 800b344:	1ad3      	subs	r3, r2, r3
 800b346:	683a      	ldr	r2, [r7, #0]
 800b348:	429a      	cmp	r2, r3
 800b34a:	d803      	bhi.n	800b354 <HAL_SPI_Transmit+0x26e>
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b352:	d102      	bne.n	800b35a <HAL_SPI_Transmit+0x274>
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d109      	bne.n	800b36e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2201      	movs	r2, #1
 800b35e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	2200      	movs	r2, #0
 800b366:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800b36a:	2303      	movs	r3, #3
 800b36c:	e02d      	b.n	800b3ca <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b372:	b29b      	uxth	r3, r3
 800b374:	2b00      	cmp	r3, #0
 800b376:	d1ae      	bne.n	800b2d6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b378:	69fa      	ldr	r2, [r7, #28]
 800b37a:	6839      	ldr	r1, [r7, #0]
 800b37c:	68f8      	ldr	r0, [r7, #12]
 800b37e:	f000 fb65 	bl	800ba4c <SPI_EndRxTxTransaction>
 800b382:	4603      	mov	r3, r0
 800b384:	2b00      	cmp	r3, #0
 800b386:	d002      	beq.n	800b38e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	2220      	movs	r2, #32
 800b38c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	689b      	ldr	r3, [r3, #8]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d10a      	bne.n	800b3ac <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b396:	2300      	movs	r3, #0
 800b398:	617b      	str	r3, [r7, #20]
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	68db      	ldr	r3, [r3, #12]
 800b3a0:	617b      	str	r3, [r7, #20]
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	689b      	ldr	r3, [r3, #8]
 800b3a8:	617b      	str	r3, [r7, #20]
 800b3aa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d001      	beq.n	800b3c8 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	e000      	b.n	800b3ca <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800b3c8:	2300      	movs	r3, #0
  }
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3720      	adds	r7, #32
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}

0800b3d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800b3d2:	b580      	push	{r7, lr}
 800b3d4:	b08a      	sub	sp, #40	@ 0x28
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	60f8      	str	r0, [r7, #12]
 800b3da:	60b9      	str	r1, [r7, #8]
 800b3dc:	607a      	str	r2, [r7, #4]
 800b3de:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b3e4:	f7fe fdf8 	bl	8009fd8 <HAL_GetTick>
 800b3e8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800b3f0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	685b      	ldr	r3, [r3, #4]
 800b3f6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800b3f8:	887b      	ldrh	r3, [r7, #2]
 800b3fa:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800b3fc:	887b      	ldrh	r3, [r7, #2]
 800b3fe:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b400:	7ffb      	ldrb	r3, [r7, #31]
 800b402:	2b01      	cmp	r3, #1
 800b404:	d00c      	beq.n	800b420 <HAL_SPI_TransmitReceive+0x4e>
 800b406:	69bb      	ldr	r3, [r7, #24]
 800b408:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b40c:	d106      	bne.n	800b41c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	689b      	ldr	r3, [r3, #8]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d102      	bne.n	800b41c <HAL_SPI_TransmitReceive+0x4a>
 800b416:	7ffb      	ldrb	r3, [r7, #31]
 800b418:	2b04      	cmp	r3, #4
 800b41a:	d001      	beq.n	800b420 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800b41c:	2302      	movs	r3, #2
 800b41e:	e1f3      	b.n	800b808 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d005      	beq.n	800b432 <HAL_SPI_TransmitReceive+0x60>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d002      	beq.n	800b432 <HAL_SPI_TransmitReceive+0x60>
 800b42c:	887b      	ldrh	r3, [r7, #2]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d101      	bne.n	800b436 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800b432:	2301      	movs	r3, #1
 800b434:	e1e8      	b.n	800b808 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d101      	bne.n	800b444 <HAL_SPI_TransmitReceive+0x72>
 800b440:	2302      	movs	r3, #2
 800b442:	e1e1      	b.n	800b808 <HAL_SPI_TransmitReceive+0x436>
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	2201      	movs	r2, #1
 800b448:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800b452:	b2db      	uxtb	r3, r3
 800b454:	2b04      	cmp	r3, #4
 800b456:	d003      	beq.n	800b460 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2205      	movs	r2, #5
 800b45c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2200      	movs	r2, #0
 800b464:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	887a      	ldrh	r2, [r7, #2]
 800b470:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	887a      	ldrh	r2, [r7, #2]
 800b478:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	68ba      	ldr	r2, [r7, #8]
 800b480:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	887a      	ldrh	r2, [r7, #2]
 800b486:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	887a      	ldrh	r2, [r7, #2]
 800b48c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2200      	movs	r2, #0
 800b492:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2200      	movs	r2, #0
 800b498:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	68db      	ldr	r3, [r3, #12]
 800b49e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800b4a2:	d802      	bhi.n	800b4aa <HAL_SPI_TransmitReceive+0xd8>
 800b4a4:	8abb      	ldrh	r3, [r7, #20]
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	d908      	bls.n	800b4bc <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	685a      	ldr	r2, [r3, #4]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b4b8:	605a      	str	r2, [r3, #4]
 800b4ba:	e007      	b.n	800b4cc <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	685a      	ldr	r2, [r3, #4]
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b4ca:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4d6:	2b40      	cmp	r3, #64	@ 0x40
 800b4d8:	d007      	beq.n	800b4ea <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	681a      	ldr	r2, [r3, #0]
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b4e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	68db      	ldr	r3, [r3, #12]
 800b4ee:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800b4f2:	f240 8083 	bls.w	800b5fc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d002      	beq.n	800b504 <HAL_SPI_TransmitReceive+0x132>
 800b4fe:	8afb      	ldrh	r3, [r7, #22]
 800b500:	2b01      	cmp	r3, #1
 800b502:	d16f      	bne.n	800b5e4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b508:	881a      	ldrh	r2, [r3, #0]
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b514:	1c9a      	adds	r2, r3, #2
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b51e:	b29b      	uxth	r3, r3
 800b520:	3b01      	subs	r3, #1
 800b522:	b29a      	uxth	r2, r3
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b528:	e05c      	b.n	800b5e4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	689b      	ldr	r3, [r3, #8]
 800b530:	f003 0302 	and.w	r3, r3, #2
 800b534:	2b02      	cmp	r3, #2
 800b536:	d11b      	bne.n	800b570 <HAL_SPI_TransmitReceive+0x19e>
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d016      	beq.n	800b570 <HAL_SPI_TransmitReceive+0x19e>
 800b542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b544:	2b01      	cmp	r3, #1
 800b546:	d113      	bne.n	800b570 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b54c:	881a      	ldrh	r2, [r3, #0]
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b558:	1c9a      	adds	r2, r3, #2
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b562:	b29b      	uxth	r3, r3
 800b564:	3b01      	subs	r3, #1
 800b566:	b29a      	uxth	r2, r3
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b56c:	2300      	movs	r3, #0
 800b56e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	689b      	ldr	r3, [r3, #8]
 800b576:	f003 0301 	and.w	r3, r3, #1
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	d11c      	bne.n	800b5b8 <HAL_SPI_TransmitReceive+0x1e6>
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b584:	b29b      	uxth	r3, r3
 800b586:	2b00      	cmp	r3, #0
 800b588:	d016      	beq.n	800b5b8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	68da      	ldr	r2, [r3, #12]
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b594:	b292      	uxth	r2, r2
 800b596:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b59c:	1c9a      	adds	r2, r3, #2
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b5a8:	b29b      	uxth	r3, r3
 800b5aa:	3b01      	subs	r3, #1
 800b5ac:	b29a      	uxth	r2, r3
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b5b8:	f7fe fd0e 	bl	8009fd8 <HAL_GetTick>
 800b5bc:	4602      	mov	r2, r0
 800b5be:	6a3b      	ldr	r3, [r7, #32]
 800b5c0:	1ad3      	subs	r3, r2, r3
 800b5c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d80d      	bhi.n	800b5e4 <HAL_SPI_TransmitReceive+0x212>
 800b5c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ce:	d009      	beq.n	800b5e4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800b5e0:	2303      	movs	r3, #3
 800b5e2:	e111      	b.n	800b808 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b5e8:	b29b      	uxth	r3, r3
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d19d      	bne.n	800b52a <HAL_SPI_TransmitReceive+0x158>
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d197      	bne.n	800b52a <HAL_SPI_TransmitReceive+0x158>
 800b5fa:	e0e5      	b.n	800b7c8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d003      	beq.n	800b60c <HAL_SPI_TransmitReceive+0x23a>
 800b604:	8afb      	ldrh	r3, [r7, #22]
 800b606:	2b01      	cmp	r3, #1
 800b608:	f040 80d1 	bne.w	800b7ae <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b610:	b29b      	uxth	r3, r3
 800b612:	2b01      	cmp	r3, #1
 800b614:	d912      	bls.n	800b63c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b61a:	881a      	ldrh	r2, [r3, #0]
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b626:	1c9a      	adds	r2, r3, #2
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b630:	b29b      	uxth	r3, r3
 800b632:	3b02      	subs	r3, #2
 800b634:	b29a      	uxth	r2, r3
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b63a:	e0b8      	b.n	800b7ae <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	330c      	adds	r3, #12
 800b646:	7812      	ldrb	r2, [r2, #0]
 800b648:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b64e:	1c5a      	adds	r2, r3, #1
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b658:	b29b      	uxth	r3, r3
 800b65a:	3b01      	subs	r3, #1
 800b65c:	b29a      	uxth	r2, r3
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b662:	e0a4      	b.n	800b7ae <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	689b      	ldr	r3, [r3, #8]
 800b66a:	f003 0302 	and.w	r3, r3, #2
 800b66e:	2b02      	cmp	r3, #2
 800b670:	d134      	bne.n	800b6dc <HAL_SPI_TransmitReceive+0x30a>
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b676:	b29b      	uxth	r3, r3
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d02f      	beq.n	800b6dc <HAL_SPI_TransmitReceive+0x30a>
 800b67c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b67e:	2b01      	cmp	r3, #1
 800b680:	d12c      	bne.n	800b6dc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b686:	b29b      	uxth	r3, r3
 800b688:	2b01      	cmp	r3, #1
 800b68a:	d912      	bls.n	800b6b2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b690:	881a      	ldrh	r2, [r3, #0]
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b69c:	1c9a      	adds	r2, r3, #2
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b6a6:	b29b      	uxth	r3, r3
 800b6a8:	3b02      	subs	r3, #2
 800b6aa:	b29a      	uxth	r2, r3
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b6b0:	e012      	b.n	800b6d8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	330c      	adds	r3, #12
 800b6bc:	7812      	ldrb	r2, [r2, #0]
 800b6be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6c4:	1c5a      	adds	r2, r3, #1
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	3b01      	subs	r3, #1
 800b6d2:	b29a      	uxth	r2, r3
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	689b      	ldr	r3, [r3, #8]
 800b6e2:	f003 0301 	and.w	r3, r3, #1
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	d148      	bne.n	800b77c <HAL_SPI_TransmitReceive+0x3aa>
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b6f0:	b29b      	uxth	r3, r3
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d042      	beq.n	800b77c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b6fc:	b29b      	uxth	r3, r3
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	d923      	bls.n	800b74a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	68da      	ldr	r2, [r3, #12]
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b70c:	b292      	uxth	r2, r2
 800b70e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b714:	1c9a      	adds	r2, r3, #2
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b720:	b29b      	uxth	r3, r3
 800b722:	3b02      	subs	r3, #2
 800b724:	b29a      	uxth	r2, r3
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b732:	b29b      	uxth	r3, r3
 800b734:	2b01      	cmp	r3, #1
 800b736:	d81f      	bhi.n	800b778 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	685a      	ldr	r2, [r3, #4]
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b746:	605a      	str	r2, [r3, #4]
 800b748:	e016      	b.n	800b778 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f103 020c 	add.w	r2, r3, #12
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b756:	7812      	ldrb	r2, [r2, #0]
 800b758:	b2d2      	uxtb	r2, r2
 800b75a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b760:	1c5a      	adds	r2, r3, #1
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b76c:	b29b      	uxth	r3, r3
 800b76e:	3b01      	subs	r3, #1
 800b770:	b29a      	uxth	r2, r3
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b778:	2301      	movs	r3, #1
 800b77a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b77c:	f7fe fc2c 	bl	8009fd8 <HAL_GetTick>
 800b780:	4602      	mov	r2, r0
 800b782:	6a3b      	ldr	r3, [r7, #32]
 800b784:	1ad3      	subs	r3, r2, r3
 800b786:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b788:	429a      	cmp	r2, r3
 800b78a:	d803      	bhi.n	800b794 <HAL_SPI_TransmitReceive+0x3c2>
 800b78c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b78e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b792:	d102      	bne.n	800b79a <HAL_SPI_TransmitReceive+0x3c8>
 800b794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b796:	2b00      	cmp	r3, #0
 800b798:	d109      	bne.n	800b7ae <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2201      	movs	r2, #1
 800b79e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800b7aa:	2303      	movs	r3, #3
 800b7ac:	e02c      	b.n	800b808 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	f47f af55 	bne.w	800b664 <HAL_SPI_TransmitReceive+0x292>
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b7c0:	b29b      	uxth	r3, r3
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	f47f af4e 	bne.w	800b664 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b7c8:	6a3a      	ldr	r2, [r7, #32]
 800b7ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b7cc:	68f8      	ldr	r0, [r7, #12]
 800b7ce:	f000 f93d 	bl	800ba4c <SPI_EndRxTxTransaction>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d008      	beq.n	800b7ea <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	2220      	movs	r2, #32
 800b7dc:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e00e      	b.n	800b808 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d001      	beq.n	800b806 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800b802:	2301      	movs	r3, #1
 800b804:	e000      	b.n	800b808 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800b806:	2300      	movs	r3, #0
  }
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3728      	adds	r7, #40	@ 0x28
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b088      	sub	sp, #32
 800b814:	af00      	add	r7, sp, #0
 800b816:	60f8      	str	r0, [r7, #12]
 800b818:	60b9      	str	r1, [r7, #8]
 800b81a:	603b      	str	r3, [r7, #0]
 800b81c:	4613      	mov	r3, r2
 800b81e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b820:	f7fe fbda 	bl	8009fd8 <HAL_GetTick>
 800b824:	4602      	mov	r2, r0
 800b826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b828:	1a9b      	subs	r3, r3, r2
 800b82a:	683a      	ldr	r2, [r7, #0]
 800b82c:	4413      	add	r3, r2
 800b82e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b830:	f7fe fbd2 	bl	8009fd8 <HAL_GetTick>
 800b834:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b836:	4b39      	ldr	r3, [pc, #228]	@ (800b91c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	015b      	lsls	r3, r3, #5
 800b83c:	0d1b      	lsrs	r3, r3, #20
 800b83e:	69fa      	ldr	r2, [r7, #28]
 800b840:	fb02 f303 	mul.w	r3, r2, r3
 800b844:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b846:	e055      	b.n	800b8f4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b84e:	d051      	beq.n	800b8f4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b850:	f7fe fbc2 	bl	8009fd8 <HAL_GetTick>
 800b854:	4602      	mov	r2, r0
 800b856:	69bb      	ldr	r3, [r7, #24]
 800b858:	1ad3      	subs	r3, r2, r3
 800b85a:	69fa      	ldr	r2, [r7, #28]
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d902      	bls.n	800b866 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b860:	69fb      	ldr	r3, [r7, #28]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d13d      	bne.n	800b8e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	685a      	ldr	r2, [r3, #4]
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b874:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	685b      	ldr	r3, [r3, #4]
 800b87a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b87e:	d111      	bne.n	800b8a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	689b      	ldr	r3, [r3, #8]
 800b884:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b888:	d004      	beq.n	800b894 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	689b      	ldr	r3, [r3, #8]
 800b88e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b892:	d107      	bne.n	800b8a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	681a      	ldr	r2, [r3, #0]
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b8a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b8ac:	d10f      	bne.n	800b8ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	681a      	ldr	r2, [r3, #0]
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b8bc:	601a      	str	r2, [r3, #0]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	681a      	ldr	r2, [r3, #0]
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b8cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800b8de:	2303      	movs	r3, #3
 800b8e0:	e018      	b.n	800b914 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d102      	bne.n	800b8ee <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	61fb      	str	r3, [r7, #28]
 800b8ec:	e002      	b.n	800b8f4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	3b01      	subs	r3, #1
 800b8f2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	689a      	ldr	r2, [r3, #8]
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	4013      	ands	r3, r2
 800b8fe:	68ba      	ldr	r2, [r7, #8]
 800b900:	429a      	cmp	r2, r3
 800b902:	bf0c      	ite	eq
 800b904:	2301      	moveq	r3, #1
 800b906:	2300      	movne	r3, #0
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	461a      	mov	r2, r3
 800b90c:	79fb      	ldrb	r3, [r7, #7]
 800b90e:	429a      	cmp	r2, r3
 800b910:	d19a      	bne.n	800b848 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800b912:	2300      	movs	r3, #0
}
 800b914:	4618      	mov	r0, r3
 800b916:	3720      	adds	r7, #32
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}
 800b91c:	20000000 	.word	0x20000000

0800b920 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b08a      	sub	sp, #40	@ 0x28
 800b924:	af00      	add	r7, sp, #0
 800b926:	60f8      	str	r0, [r7, #12]
 800b928:	60b9      	str	r1, [r7, #8]
 800b92a:	607a      	str	r2, [r7, #4]
 800b92c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b92e:	2300      	movs	r3, #0
 800b930:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b932:	f7fe fb51 	bl	8009fd8 <HAL_GetTick>
 800b936:	4602      	mov	r2, r0
 800b938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b93a:	1a9b      	subs	r3, r3, r2
 800b93c:	683a      	ldr	r2, [r7, #0]
 800b93e:	4413      	add	r3, r2
 800b940:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800b942:	f7fe fb49 	bl	8009fd8 <HAL_GetTick>
 800b946:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	330c      	adds	r3, #12
 800b94e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b950:	4b3d      	ldr	r3, [pc, #244]	@ (800ba48 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800b952:	681a      	ldr	r2, [r3, #0]
 800b954:	4613      	mov	r3, r2
 800b956:	009b      	lsls	r3, r3, #2
 800b958:	4413      	add	r3, r2
 800b95a:	00da      	lsls	r2, r3, #3
 800b95c:	1ad3      	subs	r3, r2, r3
 800b95e:	0d1b      	lsrs	r3, r3, #20
 800b960:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b962:	fb02 f303 	mul.w	r3, r2, r3
 800b966:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b968:	e061      	b.n	800ba2e <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b970:	d107      	bne.n	800b982 <SPI_WaitFifoStateUntilTimeout+0x62>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d104      	bne.n	800b982 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b978:	69fb      	ldr	r3, [r7, #28]
 800b97a:	781b      	ldrb	r3, [r3, #0]
 800b97c:	b2db      	uxtb	r3, r3
 800b97e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b980:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b988:	d051      	beq.n	800ba2e <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b98a:	f7fe fb25 	bl	8009fd8 <HAL_GetTick>
 800b98e:	4602      	mov	r2, r0
 800b990:	6a3b      	ldr	r3, [r7, #32]
 800b992:	1ad3      	subs	r3, r2, r3
 800b994:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b996:	429a      	cmp	r2, r3
 800b998:	d902      	bls.n	800b9a0 <SPI_WaitFifoStateUntilTimeout+0x80>
 800b99a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d13d      	bne.n	800ba1c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	685a      	ldr	r2, [r3, #4]
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b9ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	685b      	ldr	r3, [r3, #4]
 800b9b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b9b8:	d111      	bne.n	800b9de <SPI_WaitFifoStateUntilTimeout+0xbe>
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	689b      	ldr	r3, [r3, #8]
 800b9be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b9c2:	d004      	beq.n	800b9ce <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	689b      	ldr	r3, [r3, #8]
 800b9c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b9cc:	d107      	bne.n	800b9de <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	681a      	ldr	r2, [r3, #0]
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b9dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b9e6:	d10f      	bne.n	800ba08 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	681a      	ldr	r2, [r3, #0]
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b9f6:	601a      	str	r2, [r3, #0]
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	681a      	ldr	r2, [r3, #0]
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ba06:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	2200      	movs	r2, #0
 800ba14:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800ba18:	2303      	movs	r3, #3
 800ba1a:	e011      	b.n	800ba40 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ba1c:	69bb      	ldr	r3, [r7, #24]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d102      	bne.n	800ba28 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 800ba22:	2300      	movs	r3, #0
 800ba24:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba26:	e002      	b.n	800ba2e <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 800ba28:	69bb      	ldr	r3, [r7, #24]
 800ba2a:	3b01      	subs	r3, #1
 800ba2c:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	689a      	ldr	r2, [r3, #8]
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	4013      	ands	r3, r2
 800ba38:	687a      	ldr	r2, [r7, #4]
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	d195      	bne.n	800b96a <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 800ba3e:	2300      	movs	r3, #0
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3728      	adds	r7, #40	@ 0x28
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}
 800ba48:	20000000 	.word	0x20000000

0800ba4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b088      	sub	sp, #32
 800ba50:	af02      	add	r7, sp, #8
 800ba52:	60f8      	str	r0, [r7, #12]
 800ba54:	60b9      	str	r1, [r7, #8]
 800ba56:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	9300      	str	r3, [sp, #0]
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800ba64:	68f8      	ldr	r0, [r7, #12]
 800ba66:	f7ff ff5b 	bl	800b920 <SPI_WaitFifoStateUntilTimeout>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d007      	beq.n	800ba80 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ba74:	f043 0220 	orr.w	r2, r3, #32
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ba7c:	2303      	movs	r3, #3
 800ba7e:	e046      	b.n	800bb0e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ba80:	4b25      	ldr	r3, [pc, #148]	@ (800bb18 <SPI_EndRxTxTransaction+0xcc>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4a25      	ldr	r2, [pc, #148]	@ (800bb1c <SPI_EndRxTxTransaction+0xd0>)
 800ba86:	fba2 2303 	umull	r2, r3, r2, r3
 800ba8a:	0d5b      	lsrs	r3, r3, #21
 800ba8c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ba90:	fb02 f303 	mul.w	r3, r2, r3
 800ba94:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ba9e:	d112      	bne.n	800bac6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	9300      	str	r3, [sp, #0]
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	2200      	movs	r2, #0
 800baa8:	2180      	movs	r1, #128	@ 0x80
 800baaa:	68f8      	ldr	r0, [r7, #12]
 800baac:	f7ff feb0 	bl	800b810 <SPI_WaitFlagStateUntilTimeout>
 800bab0:	4603      	mov	r3, r0
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d016      	beq.n	800bae4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800baba:	f043 0220 	orr.w	r2, r3, #32
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800bac2:	2303      	movs	r3, #3
 800bac4:	e023      	b.n	800bb0e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d00a      	beq.n	800bae2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	3b01      	subs	r3, #1
 800bad0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800badc:	2b80      	cmp	r3, #128	@ 0x80
 800bade:	d0f2      	beq.n	800bac6 <SPI_EndRxTxTransaction+0x7a>
 800bae0:	e000      	b.n	800bae4 <SPI_EndRxTxTransaction+0x98>
        break;
 800bae2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	9300      	str	r3, [sp, #0]
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	2200      	movs	r2, #0
 800baec:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800baf0:	68f8      	ldr	r0, [r7, #12]
 800baf2:	f7ff ff15 	bl	800b920 <SPI_WaitFifoStateUntilTimeout>
 800baf6:	4603      	mov	r3, r0
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d007      	beq.n	800bb0c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bb00:	f043 0220 	orr.w	r2, r3, #32
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800bb08:	2303      	movs	r3, #3
 800bb0a:	e000      	b.n	800bb0e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800bb0c:	2300      	movs	r3, #0
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3718      	adds	r7, #24
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
 800bb16:	bf00      	nop
 800bb18:	20000000 	.word	0x20000000
 800bb1c:	165e9f81 	.word	0x165e9f81

0800bb20 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800bb24:	4904      	ldr	r1, [pc, #16]	@ (800bb38 <MX_FATFS_Init+0x18>)
 800bb26:	4805      	ldr	r0, [pc, #20]	@ (800bb3c <MX_FATFS_Init+0x1c>)
 800bb28:	f004 fade 	bl	80100e8 <FATFS_LinkDriver>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	461a      	mov	r2, r3
 800bb30:	4b03      	ldr	r3, [pc, #12]	@ (800bb40 <MX_FATFS_Init+0x20>)
 800bb32:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bb34:	bf00      	nop
 800bb36:	bd80      	pop	{r7, pc}
 800bb38:	20006bc0 	.word	0x20006bc0
 800bb3c:	2000000c 	.word	0x2000000c
 800bb40:	20006bbc 	.word	0x20006bbc

0800bb44 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800bb44:	b480      	push	{r7}
 800bb46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800bb48:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr

0800bb54 <disk_status>:
    disk_ioctl
#endif
};


DSTATUS disk_status(BYTE pdrv) {
 800bb54:	b480      	push	{r7}
 800bb56:	b083      	sub	sp, #12
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	71fb      	strb	r3, [r7, #7]
    if (pdrv == DEV_MMC) {
 800bb5e:	79fb      	ldrb	r3, [r7, #7]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d101      	bne.n	800bb68 <disk_status+0x14>
        return 0;  // OK
 800bb64:	2300      	movs	r3, #0
 800bb66:	e000      	b.n	800bb6a <disk_status+0x16>
    }
    return STA_NOINIT;
 800bb68:	2301      	movs	r3, #1
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	370c      	adds	r7, #12
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb74:	4770      	bx	lr

0800bb76 <disk_initialize>:

DSTATUS disk_initialize(BYTE pdrv) {
 800bb76:	b580      	push	{r7, lr}
 800bb78:	b082      	sub	sp, #8
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	71fb      	strb	r3, [r7, #7]
    if (pdrv == DEV_MMC) {
 800bb80:	79fb      	ldrb	r3, [r7, #7]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d108      	bne.n	800bb98 <disk_initialize+0x22>
        return (SD_Init() == SD_OK) ? 0 : STA_NOINIT;
 800bb86:	f7fd fe97 	bl	80098b8 <SD_Init>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	bf14      	ite	ne
 800bb90:	2301      	movne	r3, #1
 800bb92:	2300      	moveq	r3, #0
 800bb94:	b2db      	uxtb	r3, r3
 800bb96:	e000      	b.n	800bb9a <disk_initialize+0x24>
    }
    return STA_NOINIT;
 800bb98:	2301      	movs	r3, #1
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3708      	adds	r7, #8
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}

0800bba2 <disk_read>:

DRESULT disk_read(BYTE pdrv, BYTE* buff, LBA_t sector, UINT count) {
 800bba2:	b580      	push	{r7, lr}
 800bba4:	b086      	sub	sp, #24
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	60b9      	str	r1, [r7, #8]
 800bbaa:	607a      	str	r2, [r7, #4]
 800bbac:	603b      	str	r3, [r7, #0]
 800bbae:	4603      	mov	r3, r0
 800bbb0:	73fb      	strb	r3, [r7, #15]
    if (pdrv != DEV_MMC || count == 0) return RES_PARERR;
 800bbb2:	7bfb      	ldrb	r3, [r7, #15]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d102      	bne.n	800bbbe <disk_read+0x1c>
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d101      	bne.n	800bbc2 <disk_read+0x20>
 800bbbe:	2304      	movs	r3, #4
 800bbc0:	e01a      	b.n	800bbf8 <disk_read+0x56>

    for (UINT i = 0; i < count; i++) {
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	617b      	str	r3, [r7, #20]
 800bbc6:	e012      	b.n	800bbee <disk_read+0x4c>
        if (SD_ReadBlock((sector + i) * 512, buff + (512 * i)) != SD_OK)
 800bbc8:	687a      	ldr	r2, [r7, #4]
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	4413      	add	r3, r2
 800bbce:	0258      	lsls	r0, r3, #9
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	025b      	lsls	r3, r3, #9
 800bbd4:	68ba      	ldr	r2, [r7, #8]
 800bbd6:	4413      	add	r3, r2
 800bbd8:	4619      	mov	r1, r3
 800bbda:	f7fd feb5 	bl	8009948 <SD_ReadBlock>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d001      	beq.n	800bbe8 <disk_read+0x46>
            return RES_ERROR;
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	e007      	b.n	800bbf8 <disk_read+0x56>
    for (UINT i = 0; i < count; i++) {
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	3301      	adds	r3, #1
 800bbec:	617b      	str	r3, [r7, #20]
 800bbee:	697a      	ldr	r2, [r7, #20]
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d3e8      	bcc.n	800bbc8 <disk_read+0x26>
    }

    return RES_OK;
 800bbf6:	2300      	movs	r3, #0
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3718      	adds	r7, #24
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <disk_write>:

DRESULT disk_write(BYTE pdrv, const BYTE* buff, LBA_t sector, UINT count) {
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b086      	sub	sp, #24
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	60b9      	str	r1, [r7, #8]
 800bc08:	607a      	str	r2, [r7, #4]
 800bc0a:	603b      	str	r3, [r7, #0]
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	73fb      	strb	r3, [r7, #15]
#if FF_FS_READONLY
    return RES_WRPRT;
#else
    if (pdrv != DEV_MMC || count == 0) return RES_PARERR;
 800bc10:	7bfb      	ldrb	r3, [r7, #15]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d102      	bne.n	800bc1c <disk_write+0x1c>
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d101      	bne.n	800bc20 <disk_write+0x20>
 800bc1c:	2304      	movs	r3, #4
 800bc1e:	e01a      	b.n	800bc56 <disk_write+0x56>

    for (UINT i = 0; i < count; i++) {
 800bc20:	2300      	movs	r3, #0
 800bc22:	617b      	str	r3, [r7, #20]
 800bc24:	e012      	b.n	800bc4c <disk_write+0x4c>
        if (SD_WriteBlock((sector + i) * 512, buff + (512 * i)) != SD_OK)
 800bc26:	687a      	ldr	r2, [r7, #4]
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	4413      	add	r3, r2
 800bc2c:	0258      	lsls	r0, r3, #9
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	025b      	lsls	r3, r3, #9
 800bc32:	68ba      	ldr	r2, [r7, #8]
 800bc34:	4413      	add	r3, r2
 800bc36:	4619      	mov	r1, r3
 800bc38:	f7fd feca 	bl	80099d0 <SD_WriteBlock>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d001      	beq.n	800bc46 <disk_write+0x46>
            return RES_ERROR;
 800bc42:	2301      	movs	r3, #1
 800bc44:	e007      	b.n	800bc56 <disk_write+0x56>
    for (UINT i = 0; i < count; i++) {
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	3301      	adds	r3, #1
 800bc4a:	617b      	str	r3, [r7, #20]
 800bc4c:	697a      	ldr	r2, [r7, #20]
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	429a      	cmp	r2, r3
 800bc52:	d3e8      	bcc.n	800bc26 <disk_write+0x26>
    }

    return RES_OK;
 800bc54:	2300      	movs	r3, #0
#endif
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3718      	adds	r7, #24
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
	...

0800bc60 <disk_ioctl>:

DRESULT disk_ioctl(BYTE pdrv, BYTE cmd, void* buff) {
 800bc60:	b480      	push	{r7}
 800bc62:	b083      	sub	sp, #12
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	4603      	mov	r3, r0
 800bc68:	603a      	str	r2, [r7, #0]
 800bc6a:	71fb      	strb	r3, [r7, #7]
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	71bb      	strb	r3, [r7, #6]
    if (pdrv != DEV_MMC) return RES_PARERR;
 800bc70:	79fb      	ldrb	r3, [r7, #7]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d001      	beq.n	800bc7a <disk_ioctl+0x1a>
 800bc76:	2304      	movs	r3, #4
 800bc78:	e022      	b.n	800bcc0 <disk_ioctl+0x60>

    switch (cmd) {
 800bc7a:	79bb      	ldrb	r3, [r7, #6]
 800bc7c:	2b03      	cmp	r3, #3
 800bc7e:	d81e      	bhi.n	800bcbe <disk_ioctl+0x5e>
 800bc80:	a201      	add	r2, pc, #4	@ (adr r2, 800bc88 <disk_ioctl+0x28>)
 800bc82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc86:	bf00      	nop
 800bc88:	0800bc99 	.word	0x0800bc99
 800bc8c:	0800bc9d 	.word	0x0800bc9d
 800bc90:	0800bca9 	.word	0x0800bca9
 800bc94:	0800bcb5 	.word	0x0800bcb5
        case CTRL_SYNC:
            return RES_OK;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	e011      	b.n	800bcc0 <disk_ioctl+0x60>
        case GET_SECTOR_COUNT:
            *(DWORD*)buff = 32768;  // Exemplo: 16 MB
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800bca2:	601a      	str	r2, [r3, #0]
            return RES_OK;
 800bca4:	2300      	movs	r3, #0
 800bca6:	e00b      	b.n	800bcc0 <disk_ioctl+0x60>
        case GET_SECTOR_SIZE:
            *(WORD*)buff = 512;
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bcae:	801a      	strh	r2, [r3, #0]
            return RES_OK;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	e005      	b.n	800bcc0 <disk_ioctl+0x60>
        case GET_BLOCK_SIZE:
            *(DWORD*)buff = 1;
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	2201      	movs	r2, #1
 800bcb8:	601a      	str	r2, [r3, #0]
            return RES_OK;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	e000      	b.n	800bcc0 <disk_ioctl+0x60>
    }

    return RES_PARERR;
 800bcbe:	2304      	movs	r3, #4
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	370c      	adds	r7, #12
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr

0800bccc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bccc:	b480      	push	{r7}
 800bcce:	b085      	sub	sp, #20
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	781b      	ldrb	r3, [r3, #0]
 800bcda:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bcdc:	89fb      	ldrh	r3, [r7, #14]
 800bcde:	021b      	lsls	r3, r3, #8
 800bce0:	b21a      	sxth	r2, r3
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	781b      	ldrb	r3, [r3, #0]
 800bce6:	b21b      	sxth	r3, r3
 800bce8:	4313      	orrs	r3, r2
 800bcea:	b21b      	sxth	r3, r3
 800bcec:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bcee:	89fb      	ldrh	r3, [r7, #14]
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3714      	adds	r7, #20
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr

0800bcfc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b085      	sub	sp, #20
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	3303      	adds	r3, #3
 800bd08:	781b      	ldrb	r3, [r3, #0]
 800bd0a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	021b      	lsls	r3, r3, #8
 800bd10:	687a      	ldr	r2, [r7, #4]
 800bd12:	3202      	adds	r2, #2
 800bd14:	7812      	ldrb	r2, [r2, #0]
 800bd16:	4313      	orrs	r3, r2
 800bd18:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	021b      	lsls	r3, r3, #8
 800bd1e:	687a      	ldr	r2, [r7, #4]
 800bd20:	3201      	adds	r2, #1
 800bd22:	7812      	ldrb	r2, [r2, #0]
 800bd24:	4313      	orrs	r3, r2
 800bd26:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	021b      	lsls	r3, r3, #8
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	7812      	ldrb	r2, [r2, #0]
 800bd30:	4313      	orrs	r3, r2
 800bd32:	60fb      	str	r3, [r7, #12]
	return rv;
 800bd34:	68fb      	ldr	r3, [r7, #12]
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3714      	adds	r7, #20
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd40:	4770      	bx	lr

0800bd42 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800bd42:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800bd46:	b09d      	sub	sp, #116	@ 0x74
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 800bd4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd4e:	3307      	adds	r3, #7
 800bd50:	781b      	ldrb	r3, [r3, #0]
 800bd52:	b2db      	uxtb	r3, r3
 800bd54:	2200      	movs	r2, #0
 800bd56:	469a      	mov	sl, r3
 800bd58:	4693      	mov	fp, r2
 800bd5a:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 800bd5e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800bd62:	f04f 0000 	mov.w	r0, #0
 800bd66:	f04f 0100 	mov.w	r1, #0
 800bd6a:	0219      	lsls	r1, r3, #8
 800bd6c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800bd70:	0210      	lsls	r0, r2, #8
 800bd72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd74:	3306      	adds	r3, #6
 800bd76:	781b      	ldrb	r3, [r3, #0]
 800bd78:	b2db      	uxtb	r3, r3
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	461c      	mov	r4, r3
 800bd7e:	4615      	mov	r5, r2
 800bd80:	ea40 0804 	orr.w	r8, r0, r4
 800bd84:	ea41 0905 	orr.w	r9, r1, r5
 800bd88:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 800bd8c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800bd90:	f04f 0000 	mov.w	r0, #0
 800bd94:	f04f 0100 	mov.w	r1, #0
 800bd98:	0219      	lsls	r1, r3, #8
 800bd9a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800bd9e:	0210      	lsls	r0, r2, #8
 800bda0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bda2:	3305      	adds	r3, #5
 800bda4:	781b      	ldrb	r3, [r3, #0]
 800bda6:	b2db      	uxtb	r3, r3
 800bda8:	2200      	movs	r2, #0
 800bdaa:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bdac:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800bdae:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800bdb2:	4623      	mov	r3, r4
 800bdb4:	4303      	orrs	r3, r0
 800bdb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bdb8:	462b      	mov	r3, r5
 800bdba:	430b      	orrs	r3, r1
 800bdbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bdbe:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800bdc2:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 800bdc6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800bdca:	f04f 0000 	mov.w	r0, #0
 800bdce:	f04f 0100 	mov.w	r1, #0
 800bdd2:	0219      	lsls	r1, r3, #8
 800bdd4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800bdd8:	0210      	lsls	r0, r2, #8
 800bdda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bddc:	3304      	adds	r3, #4
 800bdde:	781b      	ldrb	r3, [r3, #0]
 800bde0:	b2db      	uxtb	r3, r3
 800bde2:	2200      	movs	r2, #0
 800bde4:	653b      	str	r3, [r7, #80]	@ 0x50
 800bde6:	657a      	str	r2, [r7, #84]	@ 0x54
 800bde8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800bdec:	4623      	mov	r3, r4
 800bdee:	4303      	orrs	r3, r0
 800bdf0:	623b      	str	r3, [r7, #32]
 800bdf2:	462b      	mov	r3, r5
 800bdf4:	430b      	orrs	r3, r1
 800bdf6:	627b      	str	r3, [r7, #36]	@ 0x24
 800bdf8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800bdfc:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 800be00:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800be04:	f04f 0000 	mov.w	r0, #0
 800be08:	f04f 0100 	mov.w	r1, #0
 800be0c:	0219      	lsls	r1, r3, #8
 800be0e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800be12:	0210      	lsls	r0, r2, #8
 800be14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be16:	3303      	adds	r3, #3
 800be18:	781b      	ldrb	r3, [r3, #0]
 800be1a:	b2db      	uxtb	r3, r3
 800be1c:	2200      	movs	r2, #0
 800be1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be20:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800be22:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800be26:	4623      	mov	r3, r4
 800be28:	4303      	orrs	r3, r0
 800be2a:	61bb      	str	r3, [r7, #24]
 800be2c:	462b      	mov	r3, r5
 800be2e:	430b      	orrs	r3, r1
 800be30:	61fb      	str	r3, [r7, #28]
 800be32:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800be36:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 800be3a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800be3e:	f04f 0000 	mov.w	r0, #0
 800be42:	f04f 0100 	mov.w	r1, #0
 800be46:	0219      	lsls	r1, r3, #8
 800be48:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800be4c:	0210      	lsls	r0, r2, #8
 800be4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be50:	3302      	adds	r3, #2
 800be52:	781b      	ldrb	r3, [r3, #0]
 800be54:	b2db      	uxtb	r3, r3
 800be56:	2200      	movs	r2, #0
 800be58:	643b      	str	r3, [r7, #64]	@ 0x40
 800be5a:	647a      	str	r2, [r7, #68]	@ 0x44
 800be5c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800be60:	4623      	mov	r3, r4
 800be62:	4303      	orrs	r3, r0
 800be64:	613b      	str	r3, [r7, #16]
 800be66:	462b      	mov	r3, r5
 800be68:	430b      	orrs	r3, r1
 800be6a:	617b      	str	r3, [r7, #20]
 800be6c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800be70:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 800be74:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800be78:	f04f 0200 	mov.w	r2, #0
 800be7c:	f04f 0300 	mov.w	r3, #0
 800be80:	020b      	lsls	r3, r1, #8
 800be82:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800be86:	0202      	lsls	r2, r0, #8
 800be88:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800be8a:	3101      	adds	r1, #1
 800be8c:	7809      	ldrb	r1, [r1, #0]
 800be8e:	b2c9      	uxtb	r1, r1
 800be90:	2000      	movs	r0, #0
 800be92:	63b9      	str	r1, [r7, #56]	@ 0x38
 800be94:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800be96:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800be9a:	4621      	mov	r1, r4
 800be9c:	4311      	orrs	r1, r2
 800be9e:	60b9      	str	r1, [r7, #8]
 800bea0:	4629      	mov	r1, r5
 800bea2:	4319      	orrs	r1, r3
 800bea4:	60f9      	str	r1, [r7, #12]
 800bea6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800beaa:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 800beae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800beb2:	f04f 0200 	mov.w	r2, #0
 800beb6:	f04f 0300 	mov.w	r3, #0
 800beba:	020b      	lsls	r3, r1, #8
 800bebc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bec0:	0202      	lsls	r2, r0, #8
 800bec2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800bec4:	7809      	ldrb	r1, [r1, #0]
 800bec6:	b2c9      	uxtb	r1, r1
 800bec8:	2000      	movs	r0, #0
 800beca:	6339      	str	r1, [r7, #48]	@ 0x30
 800becc:	6378      	str	r0, [r7, #52]	@ 0x34
 800bece:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800bed2:	4621      	mov	r1, r4
 800bed4:	4311      	orrs	r1, r2
 800bed6:	6039      	str	r1, [r7, #0]
 800bed8:	4629      	mov	r1, r5
 800beda:	4319      	orrs	r1, r3
 800bedc:	6079      	str	r1, [r7, #4]
 800bede:	e9d7 3400 	ldrd	r3, r4, [r7]
 800bee2:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 800bee6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 800beea:	4610      	mov	r0, r2
 800beec:	4619      	mov	r1, r3
 800beee:	3774      	adds	r7, #116	@ 0x74
 800bef0:	46bd      	mov	sp, r7
 800bef2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800bef6:	4770      	bx	lr

0800bef8 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bef8:	b480      	push	{r7}
 800befa:	b083      	sub	sp, #12
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	460b      	mov	r3, r1
 800bf02:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	1c5a      	adds	r2, r3, #1
 800bf08:	607a      	str	r2, [r7, #4]
 800bf0a:	887a      	ldrh	r2, [r7, #2]
 800bf0c:	b2d2      	uxtb	r2, r2
 800bf0e:	701a      	strb	r2, [r3, #0]
 800bf10:	887b      	ldrh	r3, [r7, #2]
 800bf12:	0a1b      	lsrs	r3, r3, #8
 800bf14:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	1c5a      	adds	r2, r3, #1
 800bf1a:	607a      	str	r2, [r7, #4]
 800bf1c:	887a      	ldrh	r2, [r7, #2]
 800bf1e:	b2d2      	uxtb	r2, r2
 800bf20:	701a      	strb	r2, [r3, #0]
}
 800bf22:	bf00      	nop
 800bf24:	370c      	adds	r7, #12
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr

0800bf2e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bf2e:	b480      	push	{r7}
 800bf30:	b083      	sub	sp, #12
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]
 800bf36:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	1c5a      	adds	r2, r3, #1
 800bf3c:	607a      	str	r2, [r7, #4]
 800bf3e:	683a      	ldr	r2, [r7, #0]
 800bf40:	b2d2      	uxtb	r2, r2
 800bf42:	701a      	strb	r2, [r3, #0]
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	0a1b      	lsrs	r3, r3, #8
 800bf48:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	1c5a      	adds	r2, r3, #1
 800bf4e:	607a      	str	r2, [r7, #4]
 800bf50:	683a      	ldr	r2, [r7, #0]
 800bf52:	b2d2      	uxtb	r2, r2
 800bf54:	701a      	strb	r2, [r3, #0]
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	0a1b      	lsrs	r3, r3, #8
 800bf5a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	1c5a      	adds	r2, r3, #1
 800bf60:	607a      	str	r2, [r7, #4]
 800bf62:	683a      	ldr	r2, [r7, #0]
 800bf64:	b2d2      	uxtb	r2, r2
 800bf66:	701a      	strb	r2, [r3, #0]
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	0a1b      	lsrs	r3, r3, #8
 800bf6c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	1c5a      	adds	r2, r3, #1
 800bf72:	607a      	str	r2, [r7, #4]
 800bf74:	683a      	ldr	r2, [r7, #0]
 800bf76:	b2d2      	uxtb	r2, r2
 800bf78:	701a      	strb	r2, [r3, #0]
}
 800bf7a:	bf00      	nop
 800bf7c:	370c      	adds	r7, #12
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf84:	4770      	bx	lr

0800bf86 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800bf86:	b480      	push	{r7}
 800bf88:	b085      	sub	sp, #20
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	60f8      	str	r0, [r7, #12]
 800bf8e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	1c5a      	adds	r2, r3, #1
 800bf96:	60fa      	str	r2, [r7, #12]
 800bf98:	783a      	ldrb	r2, [r7, #0]
 800bf9a:	701a      	strb	r2, [r3, #0]
 800bf9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bfa0:	f04f 0200 	mov.w	r2, #0
 800bfa4:	f04f 0300 	mov.w	r3, #0
 800bfa8:	0a02      	lsrs	r2, r0, #8
 800bfaa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800bfae:	0a0b      	lsrs	r3, r1, #8
 800bfb0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	1c5a      	adds	r2, r3, #1
 800bfb8:	60fa      	str	r2, [r7, #12]
 800bfba:	783a      	ldrb	r2, [r7, #0]
 800bfbc:	701a      	strb	r2, [r3, #0]
 800bfbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bfc2:	f04f 0200 	mov.w	r2, #0
 800bfc6:	f04f 0300 	mov.w	r3, #0
 800bfca:	0a02      	lsrs	r2, r0, #8
 800bfcc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800bfd0:	0a0b      	lsrs	r3, r1, #8
 800bfd2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	1c5a      	adds	r2, r3, #1
 800bfda:	60fa      	str	r2, [r7, #12]
 800bfdc:	783a      	ldrb	r2, [r7, #0]
 800bfde:	701a      	strb	r2, [r3, #0]
 800bfe0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bfe4:	f04f 0200 	mov.w	r2, #0
 800bfe8:	f04f 0300 	mov.w	r3, #0
 800bfec:	0a02      	lsrs	r2, r0, #8
 800bfee:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800bff2:	0a0b      	lsrs	r3, r1, #8
 800bff4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	1c5a      	adds	r2, r3, #1
 800bffc:	60fa      	str	r2, [r7, #12]
 800bffe:	783a      	ldrb	r2, [r7, #0]
 800c000:	701a      	strb	r2, [r3, #0]
 800c002:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c006:	f04f 0200 	mov.w	r2, #0
 800c00a:	f04f 0300 	mov.w	r3, #0
 800c00e:	0a02      	lsrs	r2, r0, #8
 800c010:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c014:	0a0b      	lsrs	r3, r1, #8
 800c016:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	1c5a      	adds	r2, r3, #1
 800c01e:	60fa      	str	r2, [r7, #12]
 800c020:	783a      	ldrb	r2, [r7, #0]
 800c022:	701a      	strb	r2, [r3, #0]
 800c024:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c028:	f04f 0200 	mov.w	r2, #0
 800c02c:	f04f 0300 	mov.w	r3, #0
 800c030:	0a02      	lsrs	r2, r0, #8
 800c032:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c036:	0a0b      	lsrs	r3, r1, #8
 800c038:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	1c5a      	adds	r2, r3, #1
 800c040:	60fa      	str	r2, [r7, #12]
 800c042:	783a      	ldrb	r2, [r7, #0]
 800c044:	701a      	strb	r2, [r3, #0]
 800c046:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c04a:	f04f 0200 	mov.w	r2, #0
 800c04e:	f04f 0300 	mov.w	r3, #0
 800c052:	0a02      	lsrs	r2, r0, #8
 800c054:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c058:	0a0b      	lsrs	r3, r1, #8
 800c05a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	1c5a      	adds	r2, r3, #1
 800c062:	60fa      	str	r2, [r7, #12]
 800c064:	783a      	ldrb	r2, [r7, #0]
 800c066:	701a      	strb	r2, [r3, #0]
 800c068:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c06c:	f04f 0200 	mov.w	r2, #0
 800c070:	f04f 0300 	mov.w	r3, #0
 800c074:	0a02      	lsrs	r2, r0, #8
 800c076:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c07a:	0a0b      	lsrs	r3, r1, #8
 800c07c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	1c5a      	adds	r2, r3, #1
 800c084:	60fa      	str	r2, [r7, #12]
 800c086:	783a      	ldrb	r2, [r7, #0]
 800c088:	701a      	strb	r2, [r3, #0]
}
 800c08a:	bf00      	nop
 800c08c:	3714      	adds	r7, #20
 800c08e:	46bd      	mov	sp, r7
 800c090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c094:	4770      	bx	lr

0800c096 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c096:	b480      	push	{r7}
 800c098:	b087      	sub	sp, #28
 800c09a:	af00      	add	r7, sp, #0
 800c09c:	60f8      	str	r0, [r7, #12]
 800c09e:	60b9      	str	r1, [r7, #8]
 800c0a0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d00d      	beq.n	800c0cc <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c0b0:	693a      	ldr	r2, [r7, #16]
 800c0b2:	1c53      	adds	r3, r2, #1
 800c0b4:	613b      	str	r3, [r7, #16]
 800c0b6:	697b      	ldr	r3, [r7, #20]
 800c0b8:	1c59      	adds	r1, r3, #1
 800c0ba:	6179      	str	r1, [r7, #20]
 800c0bc:	7812      	ldrb	r2, [r2, #0]
 800c0be:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	3b01      	subs	r3, #1
 800c0c4:	607b      	str	r3, [r7, #4]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d1f1      	bne.n	800c0b0 <mem_cpy+0x1a>
	}
}
 800c0cc:	bf00      	nop
 800c0ce:	371c      	adds	r7, #28
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d6:	4770      	bx	lr

0800c0d8 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c0d8:	b480      	push	{r7}
 800c0da:	b087      	sub	sp, #28
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	60f8      	str	r0, [r7, #12]
 800c0e0:	60b9      	str	r1, [r7, #8]
 800c0e2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	1c5a      	adds	r2, r3, #1
 800c0ec:	617a      	str	r2, [r7, #20]
 800c0ee:	68ba      	ldr	r2, [r7, #8]
 800c0f0:	b2d2      	uxtb	r2, r2
 800c0f2:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	3b01      	subs	r3, #1
 800c0f8:	607b      	str	r3, [r7, #4]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d1f3      	bne.n	800c0e8 <mem_set+0x10>
}
 800c100:	bf00      	nop
 800c102:	bf00      	nop
 800c104:	371c      	adds	r7, #28
 800c106:	46bd      	mov	sp, r7
 800c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10c:	4770      	bx	lr

0800c10e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c10e:	b480      	push	{r7}
 800c110:	b089      	sub	sp, #36	@ 0x24
 800c112:	af00      	add	r7, sp, #0
 800c114:	60f8      	str	r0, [r7, #12]
 800c116:	60b9      	str	r1, [r7, #8]
 800c118:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	61fb      	str	r3, [r7, #28]
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c122:	2300      	movs	r3, #0
 800c124:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c126:	69fb      	ldr	r3, [r7, #28]
 800c128:	1c5a      	adds	r2, r3, #1
 800c12a:	61fa      	str	r2, [r7, #28]
 800c12c:	781b      	ldrb	r3, [r3, #0]
 800c12e:	4619      	mov	r1, r3
 800c130:	69bb      	ldr	r3, [r7, #24]
 800c132:	1c5a      	adds	r2, r3, #1
 800c134:	61ba      	str	r2, [r7, #24]
 800c136:	781b      	ldrb	r3, [r3, #0]
 800c138:	1acb      	subs	r3, r1, r3
 800c13a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	3b01      	subs	r3, #1
 800c140:	607b      	str	r3, [r7, #4]
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d002      	beq.n	800c14e <mem_cmp+0x40>
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d0eb      	beq.n	800c126 <mem_cmp+0x18>

	return r;
 800c14e:	697b      	ldr	r3, [r7, #20]
}
 800c150:	4618      	mov	r0, r3
 800c152:	3724      	adds	r7, #36	@ 0x24
 800c154:	46bd      	mov	sp, r7
 800c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15a:	4770      	bx	lr

0800c15c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c15c:	b480      	push	{r7}
 800c15e:	b083      	sub	sp, #12
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c166:	e002      	b.n	800c16e <chk_chr+0x12>
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	3301      	adds	r3, #1
 800c16c:	607b      	str	r3, [r7, #4]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	781b      	ldrb	r3, [r3, #0]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d005      	beq.n	800c182 <chk_chr+0x26>
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	461a      	mov	r2, r3
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	4293      	cmp	r3, r2
 800c180:	d1f2      	bne.n	800c168 <chk_chr+0xc>
	return *str;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	781b      	ldrb	r3, [r3, #0]
}
 800c186:	4618      	mov	r0, r3
 800c188:	370c      	adds	r7, #12
 800c18a:	46bd      	mov	sp, r7
 800c18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c190:	4770      	bx	lr
	...

0800c194 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c194:	b480      	push	{r7}
 800c196:	b085      	sub	sp, #20
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c19e:	2300      	movs	r3, #0
 800c1a0:	60bb      	str	r3, [r7, #8]
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	60fb      	str	r3, [r7, #12]
 800c1a6:	e029      	b.n	800c1fc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c1a8:	4a27      	ldr	r2, [pc, #156]	@ (800c248 <chk_lock+0xb4>)
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	011b      	lsls	r3, r3, #4
 800c1ae:	4413      	add	r3, r2
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d01d      	beq.n	800c1f2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c1b6:	4a24      	ldr	r2, [pc, #144]	@ (800c248 <chk_lock+0xb4>)
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	011b      	lsls	r3, r3, #4
 800c1bc:	4413      	add	r3, r2
 800c1be:	681a      	ldr	r2, [r3, #0]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	d116      	bne.n	800c1f6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c1c8:	4a1f      	ldr	r2, [pc, #124]	@ (800c248 <chk_lock+0xb4>)
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	011b      	lsls	r3, r3, #4
 800c1ce:	4413      	add	r3, r2
 800c1d0:	3304      	adds	r3, #4
 800c1d2:	681a      	ldr	r2, [r3, #0]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d10c      	bne.n	800c1f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c1dc:	4a1a      	ldr	r2, [pc, #104]	@ (800c248 <chk_lock+0xb4>)
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	011b      	lsls	r3, r3, #4
 800c1e2:	4413      	add	r3, r2
 800c1e4:	3308      	adds	r3, #8
 800c1e6:	681a      	ldr	r2, [r3, #0]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 800c1ec:	429a      	cmp	r2, r3
 800c1ee:	d102      	bne.n	800c1f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c1f0:	e007      	b.n	800c202 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	3301      	adds	r3, #1
 800c1fa:	60fb      	str	r3, [r7, #12]
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d0d2      	beq.n	800c1a8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2b01      	cmp	r3, #1
 800c206:	d109      	bne.n	800c21c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d102      	bne.n	800c214 <chk_lock+0x80>
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	2b02      	cmp	r3, #2
 800c212:	d101      	bne.n	800c218 <chk_lock+0x84>
 800c214:	2300      	movs	r3, #0
 800c216:	e010      	b.n	800c23a <chk_lock+0xa6>
 800c218:	2312      	movs	r3, #18
 800c21a:	e00e      	b.n	800c23a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d108      	bne.n	800c234 <chk_lock+0xa0>
 800c222:	4a09      	ldr	r2, [pc, #36]	@ (800c248 <chk_lock+0xb4>)
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	011b      	lsls	r3, r3, #4
 800c228:	4413      	add	r3, r2
 800c22a:	330c      	adds	r3, #12
 800c22c:	881b      	ldrh	r3, [r3, #0]
 800c22e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c232:	d101      	bne.n	800c238 <chk_lock+0xa4>
 800c234:	2310      	movs	r3, #16
 800c236:	e000      	b.n	800c23a <chk_lock+0xa6>
 800c238:	2300      	movs	r3, #0
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3714      	adds	r7, #20
 800c23e:	46bd      	mov	sp, r7
 800c240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c244:	4770      	bx	lr
 800c246:	bf00      	nop
 800c248:	20006bcc 	.word	0x20006bcc

0800c24c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c24c:	b480      	push	{r7}
 800c24e:	b083      	sub	sp, #12
 800c250:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c252:	2300      	movs	r3, #0
 800c254:	607b      	str	r3, [r7, #4]
 800c256:	e002      	b.n	800c25e <enq_lock+0x12>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	3301      	adds	r3, #1
 800c25c:	607b      	str	r3, [r7, #4]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d106      	bne.n	800c272 <enq_lock+0x26>
 800c264:	4a09      	ldr	r2, [pc, #36]	@ (800c28c <enq_lock+0x40>)
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	011b      	lsls	r3, r3, #4
 800c26a:	4413      	add	r3, r2
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d1f2      	bne.n	800c258 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2b01      	cmp	r3, #1
 800c276:	bf14      	ite	ne
 800c278:	2301      	movne	r3, #1
 800c27a:	2300      	moveq	r3, #0
 800c27c:	b2db      	uxtb	r3, r3
}
 800c27e:	4618      	mov	r0, r3
 800c280:	370c      	adds	r7, #12
 800c282:	46bd      	mov	sp, r7
 800c284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c288:	4770      	bx	lr
 800c28a:	bf00      	nop
 800c28c:	20006bcc 	.word	0x20006bcc

0800c290 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c290:	b480      	push	{r7}
 800c292:	b085      	sub	sp, #20
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c29a:	2300      	movs	r3, #0
 800c29c:	60fb      	str	r3, [r7, #12]
 800c29e:	e01f      	b.n	800c2e0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c2a0:	4a41      	ldr	r2, [pc, #260]	@ (800c3a8 <inc_lock+0x118>)
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	011b      	lsls	r3, r3, #4
 800c2a6:	4413      	add	r3, r2
 800c2a8:	681a      	ldr	r2, [r3, #0]
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	d113      	bne.n	800c2da <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c2b2:	4a3d      	ldr	r2, [pc, #244]	@ (800c3a8 <inc_lock+0x118>)
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	011b      	lsls	r3, r3, #4
 800c2b8:	4413      	add	r3, r2
 800c2ba:	3304      	adds	r3, #4
 800c2bc:	681a      	ldr	r2, [r3, #0]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d109      	bne.n	800c2da <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c2c6:	4a38      	ldr	r2, [pc, #224]	@ (800c3a8 <inc_lock+0x118>)
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	011b      	lsls	r3, r3, #4
 800c2cc:	4413      	add	r3, r2
 800c2ce:	3308      	adds	r3, #8
 800c2d0:	681a      	ldr	r2, [r3, #0]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			Files[i].clu == dp->obj.sclust &&
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	d006      	beq.n	800c2e8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	3301      	adds	r3, #1
 800c2de:	60fb      	str	r3, [r7, #12]
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d0dc      	beq.n	800c2a0 <inc_lock+0x10>
 800c2e6:	e000      	b.n	800c2ea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c2e8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	2b01      	cmp	r3, #1
 800c2ee:	d132      	bne.n	800c356 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	60fb      	str	r3, [r7, #12]
 800c2f4:	e002      	b.n	800c2fc <inc_lock+0x6c>
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	3301      	adds	r3, #1
 800c2fa:	60fb      	str	r3, [r7, #12]
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d106      	bne.n	800c310 <inc_lock+0x80>
 800c302:	4a29      	ldr	r2, [pc, #164]	@ (800c3a8 <inc_lock+0x118>)
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	011b      	lsls	r3, r3, #4
 800c308:	4413      	add	r3, r2
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d1f2      	bne.n	800c2f6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	2b01      	cmp	r3, #1
 800c314:	d101      	bne.n	800c31a <inc_lock+0x8a>
 800c316:	2300      	movs	r3, #0
 800c318:	e040      	b.n	800c39c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681a      	ldr	r2, [r3, #0]
 800c31e:	4922      	ldr	r1, [pc, #136]	@ (800c3a8 <inc_lock+0x118>)
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	011b      	lsls	r3, r3, #4
 800c324:	440b      	add	r3, r1
 800c326:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	689a      	ldr	r2, [r3, #8]
 800c32c:	491e      	ldr	r1, [pc, #120]	@ (800c3a8 <inc_lock+0x118>)
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	011b      	lsls	r3, r3, #4
 800c332:	440b      	add	r3, r1
 800c334:	3304      	adds	r3, #4
 800c336:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c33c:	491a      	ldr	r1, [pc, #104]	@ (800c3a8 <inc_lock+0x118>)
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	011b      	lsls	r3, r3, #4
 800c342:	440b      	add	r3, r1
 800c344:	3308      	adds	r3, #8
 800c346:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c348:	4a17      	ldr	r2, [pc, #92]	@ (800c3a8 <inc_lock+0x118>)
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	011b      	lsls	r3, r3, #4
 800c34e:	4413      	add	r3, r2
 800c350:	330c      	adds	r3, #12
 800c352:	2200      	movs	r2, #0
 800c354:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d009      	beq.n	800c370 <inc_lock+0xe0>
 800c35c:	4a12      	ldr	r2, [pc, #72]	@ (800c3a8 <inc_lock+0x118>)
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	011b      	lsls	r3, r3, #4
 800c362:	4413      	add	r3, r2
 800c364:	330c      	adds	r3, #12
 800c366:	881b      	ldrh	r3, [r3, #0]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d001      	beq.n	800c370 <inc_lock+0xe0>
 800c36c:	2300      	movs	r3, #0
 800c36e:	e015      	b.n	800c39c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d108      	bne.n	800c388 <inc_lock+0xf8>
 800c376:	4a0c      	ldr	r2, [pc, #48]	@ (800c3a8 <inc_lock+0x118>)
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	011b      	lsls	r3, r3, #4
 800c37c:	4413      	add	r3, r2
 800c37e:	330c      	adds	r3, #12
 800c380:	881b      	ldrh	r3, [r3, #0]
 800c382:	3301      	adds	r3, #1
 800c384:	b29a      	uxth	r2, r3
 800c386:	e001      	b.n	800c38c <inc_lock+0xfc>
 800c388:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c38c:	4906      	ldr	r1, [pc, #24]	@ (800c3a8 <inc_lock+0x118>)
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	011b      	lsls	r3, r3, #4
 800c392:	440b      	add	r3, r1
 800c394:	330c      	adds	r3, #12
 800c396:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	3301      	adds	r3, #1
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3714      	adds	r7, #20
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr
 800c3a8:	20006bcc 	.word	0x20006bcc

0800c3ac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b085      	sub	sp, #20
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	3b01      	subs	r3, #1
 800c3b8:	607b      	str	r3, [r7, #4]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d125      	bne.n	800c40c <dec_lock+0x60>
		n = Files[i].ctr;
 800c3c0:	4a17      	ldr	r2, [pc, #92]	@ (800c420 <dec_lock+0x74>)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	011b      	lsls	r3, r3, #4
 800c3c6:	4413      	add	r3, r2
 800c3c8:	330c      	adds	r3, #12
 800c3ca:	881b      	ldrh	r3, [r3, #0]
 800c3cc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c3ce:	89fb      	ldrh	r3, [r7, #14]
 800c3d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c3d4:	d101      	bne.n	800c3da <dec_lock+0x2e>
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c3da:	89fb      	ldrh	r3, [r7, #14]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d002      	beq.n	800c3e6 <dec_lock+0x3a>
 800c3e0:	89fb      	ldrh	r3, [r7, #14]
 800c3e2:	3b01      	subs	r3, #1
 800c3e4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c3e6:	4a0e      	ldr	r2, [pc, #56]	@ (800c420 <dec_lock+0x74>)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	011b      	lsls	r3, r3, #4
 800c3ec:	4413      	add	r3, r2
 800c3ee:	330c      	adds	r3, #12
 800c3f0:	89fa      	ldrh	r2, [r7, #14]
 800c3f2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c3f4:	89fb      	ldrh	r3, [r7, #14]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d105      	bne.n	800c406 <dec_lock+0x5a>
 800c3fa:	4a09      	ldr	r2, [pc, #36]	@ (800c420 <dec_lock+0x74>)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	011b      	lsls	r3, r3, #4
 800c400:	4413      	add	r3, r2
 800c402:	2200      	movs	r2, #0
 800c404:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c406:	2300      	movs	r3, #0
 800c408:	737b      	strb	r3, [r7, #13]
 800c40a:	e001      	b.n	800c410 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c40c:	2302      	movs	r3, #2
 800c40e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c410:	7b7b      	ldrb	r3, [r7, #13]
}
 800c412:	4618      	mov	r0, r3
 800c414:	3714      	adds	r7, #20
 800c416:	46bd      	mov	sp, r7
 800c418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41c:	4770      	bx	lr
 800c41e:	bf00      	nop
 800c420:	20006bcc 	.word	0x20006bcc

0800c424 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c424:	b480      	push	{r7}
 800c426:	b085      	sub	sp, #20
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c42c:	2300      	movs	r3, #0
 800c42e:	60fb      	str	r3, [r7, #12]
 800c430:	e010      	b.n	800c454 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c432:	4a0d      	ldr	r2, [pc, #52]	@ (800c468 <clear_lock+0x44>)
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	011b      	lsls	r3, r3, #4
 800c438:	4413      	add	r3, r2
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	429a      	cmp	r2, r3
 800c440:	d105      	bne.n	800c44e <clear_lock+0x2a>
 800c442:	4a09      	ldr	r2, [pc, #36]	@ (800c468 <clear_lock+0x44>)
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	011b      	lsls	r3, r3, #4
 800c448:	4413      	add	r3, r2
 800c44a:	2200      	movs	r2, #0
 800c44c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	3301      	adds	r3, #1
 800c452:	60fb      	str	r3, [r7, #12]
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d0eb      	beq.n	800c432 <clear_lock+0xe>
	}
}
 800c45a:	bf00      	nop
 800c45c:	bf00      	nop
 800c45e:	3714      	adds	r7, #20
 800c460:	46bd      	mov	sp, r7
 800c462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c466:	4770      	bx	lr
 800c468:	20006bcc 	.word	0x20006bcc

0800c46c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b086      	sub	sp, #24
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c474:	2300      	movs	r3, #0
 800c476:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	78db      	ldrb	r3, [r3, #3]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d034      	beq.n	800c4ea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c484:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	7858      	ldrb	r0, [r3, #1]
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c490:	2301      	movs	r3, #1
 800c492:	697a      	ldr	r2, [r7, #20]
 800c494:	f7ff fbb4 	bl	800bc00 <disk_write>
 800c498:	4603      	mov	r3, r0
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d002      	beq.n	800c4a4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c49e:	2301      	movs	r3, #1
 800c4a0:	73fb      	strb	r3, [r7, #15]
 800c4a2:	e022      	b.n	800c4ea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4ae:	697a      	ldr	r2, [r7, #20]
 800c4b0:	1ad2      	subs	r2, r2, r3
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6a1b      	ldr	r3, [r3, #32]
 800c4b6:	429a      	cmp	r2, r3
 800c4b8:	d217      	bcs.n	800c4ea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	789b      	ldrb	r3, [r3, #2]
 800c4be:	613b      	str	r3, [r7, #16]
 800c4c0:	e010      	b.n	800c4e4 <sync_window+0x78>
					wsect += fs->fsize;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6a1b      	ldr	r3, [r3, #32]
 800c4c6:	697a      	ldr	r2, [r7, #20]
 800c4c8:	4413      	add	r3, r2
 800c4ca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	7858      	ldrb	r0, [r3, #1]
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	697a      	ldr	r2, [r7, #20]
 800c4da:	f7ff fb91 	bl	800bc00 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	3b01      	subs	r3, #1
 800c4e2:	613b      	str	r3, [r7, #16]
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	2b01      	cmp	r3, #1
 800c4e8:	d8eb      	bhi.n	800c4c2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c4ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3718      	adds	r7, #24
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}

0800c4f4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b084      	sub	sp, #16
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c4fe:	2300      	movs	r3, #0
 800c500:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c506:	683a      	ldr	r2, [r7, #0]
 800c508:	429a      	cmp	r2, r3
 800c50a:	d01b      	beq.n	800c544 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f7ff ffad 	bl	800c46c <sync_window>
 800c512:	4603      	mov	r3, r0
 800c514:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c516:	7bfb      	ldrb	r3, [r7, #15]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d113      	bne.n	800c544 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	7858      	ldrb	r0, [r3, #1]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c526:	2301      	movs	r3, #1
 800c528:	683a      	ldr	r2, [r7, #0]
 800c52a:	f7ff fb3a 	bl	800bba2 <disk_read>
 800c52e:	4603      	mov	r3, r0
 800c530:	2b00      	cmp	r3, #0
 800c532:	d004      	beq.n	800c53e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c534:	f04f 33ff 	mov.w	r3, #4294967295
 800c538:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c53a:	2301      	movs	r3, #1
 800c53c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	683a      	ldr	r2, [r7, #0]
 800c542:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800c544:	7bfb      	ldrb	r3, [r7, #15]
}
 800c546:	4618      	mov	r0, r3
 800c548:	3710      	adds	r7, #16
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}
	...

0800c550 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f7ff ff87 	bl	800c46c <sync_window>
 800c55e:	4603      	mov	r3, r0
 800c560:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c562:	7bfb      	ldrb	r3, [r7, #15]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d158      	bne.n	800c61a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	781b      	ldrb	r3, [r3, #0]
 800c56c:	2b03      	cmp	r3, #3
 800c56e:	d148      	bne.n	800c602 <sync_fs+0xb2>
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	791b      	ldrb	r3, [r3, #4]
 800c574:	2b01      	cmp	r3, #1
 800c576:	d144      	bne.n	800c602 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	3338      	adds	r3, #56	@ 0x38
 800c57c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c580:	2100      	movs	r1, #0
 800c582:	4618      	mov	r0, r3
 800c584:	f7ff fda8 	bl	800c0d8 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	3338      	adds	r3, #56	@ 0x38
 800c58c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c590:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800c594:	4618      	mov	r0, r3
 800c596:	f7ff fcaf 	bl	800bef8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	3338      	adds	r3, #56	@ 0x38
 800c59e:	4921      	ldr	r1, [pc, #132]	@ (800c624 <sync_fs+0xd4>)
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f7ff fcc4 	bl	800bf2e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	3338      	adds	r3, #56	@ 0x38
 800c5aa:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c5ae:	491e      	ldr	r1, [pc, #120]	@ (800c628 <sync_fs+0xd8>)
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f7ff fcbc 	bl	800bf2e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	3338      	adds	r3, #56	@ 0x38
 800c5ba:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	699b      	ldr	r3, [r3, #24]
 800c5c2:	4619      	mov	r1, r3
 800c5c4:	4610      	mov	r0, r2
 800c5c6:	f7ff fcb2 	bl	800bf2e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	3338      	adds	r3, #56	@ 0x38
 800c5ce:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	695b      	ldr	r3, [r3, #20]
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	4610      	mov	r0, r2
 800c5da:	f7ff fca8 	bl	800bf2e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5e2:	1c5a      	adds	r2, r3, #1
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	7858      	ldrb	r0, [r3, #1]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	f7ff fb02 	bl	800bc00 <disk_write>
			fs->fsi_flag = 0;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2200      	movs	r2, #0
 800c600:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	785b      	ldrb	r3, [r3, #1]
 800c606:	2200      	movs	r2, #0
 800c608:	2100      	movs	r1, #0
 800c60a:	4618      	mov	r0, r3
 800c60c:	f7ff fb28 	bl	800bc60 <disk_ioctl>
 800c610:	4603      	mov	r3, r0
 800c612:	2b00      	cmp	r3, #0
 800c614:	d001      	beq.n	800c61a <sync_fs+0xca>
 800c616:	2301      	movs	r3, #1
 800c618:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c61a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3710      	adds	r7, #16
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}
 800c624:	41615252 	.word	0x41615252
 800c628:	61417272 	.word	0x61417272

0800c62c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c62c:	b480      	push	{r7}
 800c62e:	b083      	sub	sp, #12
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
 800c634:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	3b02      	subs	r3, #2
 800c63a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	69db      	ldr	r3, [r3, #28]
 800c640:	3b02      	subs	r3, #2
 800c642:	683a      	ldr	r2, [r7, #0]
 800c644:	429a      	cmp	r2, r3
 800c646:	d301      	bcc.n	800c64c <clust2sect+0x20>
 800c648:	2300      	movs	r3, #0
 800c64a:	e008      	b.n	800c65e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	895b      	ldrh	r3, [r3, #10]
 800c650:	461a      	mov	r2, r3
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	fb03 f202 	mul.w	r2, r3, r2
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c65c:	4413      	add	r3, r2
}
 800c65e:	4618      	mov	r0, r3
 800c660:	370c      	adds	r7, #12
 800c662:	46bd      	mov	sp, r7
 800c664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c668:	4770      	bx	lr
	...

0800c66c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b088      	sub	sp, #32
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c676:	6879      	ldr	r1, [r7, #4]
 800c678:	6809      	ldr	r1, [r1, #0]
 800c67a:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c67c:	6839      	ldr	r1, [r7, #0]
 800c67e:	2901      	cmp	r1, #1
 800c680:	d904      	bls.n	800c68c <get_fat+0x20>
 800c682:	69b9      	ldr	r1, [r7, #24]
 800c684:	69c9      	ldr	r1, [r1, #28]
 800c686:	6838      	ldr	r0, [r7, #0]
 800c688:	4288      	cmp	r0, r1
 800c68a:	d302      	bcc.n	800c692 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c68c:	2301      	movs	r3, #1
 800c68e:	61fb      	str	r3, [r7, #28]
 800c690:	e100      	b.n	800c894 <get_fat+0x228>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c692:	f04f 31ff 	mov.w	r1, #4294967295
 800c696:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 800c698:	69b9      	ldr	r1, [r7, #24]
 800c69a:	7809      	ldrb	r1, [r1, #0]
 800c69c:	3901      	subs	r1, #1
 800c69e:	2903      	cmp	r1, #3
 800c6a0:	f200 80ec 	bhi.w	800c87c <get_fat+0x210>
 800c6a4:	a001      	add	r0, pc, #4	@ (adr r0, 800c6ac <get_fat+0x40>)
 800c6a6:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c6aa:	bf00      	nop
 800c6ac:	0800c6bd 	.word	0x0800c6bd
 800c6b0:	0800c743 	.word	0x0800c743
 800c6b4:	0800c779 	.word	0x0800c779
 800c6b8:	0800c7b1 	.word	0x0800c7b1
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	60fb      	str	r3, [r7, #12]
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	085b      	lsrs	r3, r3, #1
 800c6c4:	68fa      	ldr	r2, [r7, #12]
 800c6c6:	4413      	add	r3, r2
 800c6c8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c6ca:	69bb      	ldr	r3, [r7, #24]
 800c6cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	0a5b      	lsrs	r3, r3, #9
 800c6d2:	4413      	add	r3, r2
 800c6d4:	4619      	mov	r1, r3
 800c6d6:	69b8      	ldr	r0, [r7, #24]
 800c6d8:	f7ff ff0c 	bl	800c4f4 <move_window>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	f040 80cf 	bne.w	800c882 <get_fat+0x216>
			wc = fs->win[bc++ % SS(fs)];
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	1c5a      	adds	r2, r3, #1
 800c6e8:	60fa      	str	r2, [r7, #12]
 800c6ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6ee:	69ba      	ldr	r2, [r7, #24]
 800c6f0:	4413      	add	r3, r2
 800c6f2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c6f6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c6f8:	69bb      	ldr	r3, [r7, #24]
 800c6fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	0a5b      	lsrs	r3, r3, #9
 800c700:	4413      	add	r3, r2
 800c702:	4619      	mov	r1, r3
 800c704:	69b8      	ldr	r0, [r7, #24]
 800c706:	f7ff fef5 	bl	800c4f4 <move_window>
 800c70a:	4603      	mov	r3, r0
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	f040 80ba 	bne.w	800c886 <get_fat+0x21a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c718:	69ba      	ldr	r2, [r7, #24]
 800c71a:	4413      	add	r3, r2
 800c71c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c720:	021b      	lsls	r3, r3, #8
 800c722:	68ba      	ldr	r2, [r7, #8]
 800c724:	4313      	orrs	r3, r2
 800c726:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	f003 0301 	and.w	r3, r3, #1
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d002      	beq.n	800c738 <get_fat+0xcc>
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	091b      	lsrs	r3, r3, #4
 800c736:	e002      	b.n	800c73e <get_fat+0xd2>
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c73e:	61fb      	str	r3, [r7, #28]
			break;
 800c740:	e0a8      	b.n	800c894 <get_fat+0x228>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c742:	69bb      	ldr	r3, [r7, #24]
 800c744:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	0a1b      	lsrs	r3, r3, #8
 800c74a:	4413      	add	r3, r2
 800c74c:	4619      	mov	r1, r3
 800c74e:	69b8      	ldr	r0, [r7, #24]
 800c750:	f7ff fed0 	bl	800c4f4 <move_window>
 800c754:	4603      	mov	r3, r0
 800c756:	2b00      	cmp	r3, #0
 800c758:	f040 8097 	bne.w	800c88a <get_fat+0x21e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c75c:	69bb      	ldr	r3, [r7, #24]
 800c75e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	005b      	lsls	r3, r3, #1
 800c766:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c76a:	4413      	add	r3, r2
 800c76c:	4618      	mov	r0, r3
 800c76e:	f7ff faad 	bl	800bccc <ld_word>
 800c772:	4603      	mov	r3, r0
 800c774:	61fb      	str	r3, [r7, #28]
			break;
 800c776:	e08d      	b.n	800c894 <get_fat+0x228>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c778:	69bb      	ldr	r3, [r7, #24]
 800c77a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	09db      	lsrs	r3, r3, #7
 800c780:	4413      	add	r3, r2
 800c782:	4619      	mov	r1, r3
 800c784:	69b8      	ldr	r0, [r7, #24]
 800c786:	f7ff feb5 	bl	800c4f4 <move_window>
 800c78a:	4603      	mov	r3, r0
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d17e      	bne.n	800c88e <get_fat+0x222>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c790:	69bb      	ldr	r3, [r7, #24]
 800c792:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	009b      	lsls	r3, r3, #2
 800c79a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c79e:	4413      	add	r3, r2
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f7ff faab 	bl	800bcfc <ld_dword>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800c7ac:	61fb      	str	r3, [r7, #28]
			break;
 800c7ae:	e071      	b.n	800c894 <get_fat+0x228>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800c7b0:	6879      	ldr	r1, [r7, #4]
 800c7b2:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800c7b6:	4301      	orrs	r1, r0
 800c7b8:	d060      	beq.n	800c87c <get_fat+0x210>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800c7ba:	6879      	ldr	r1, [r7, #4]
 800c7bc:	6889      	ldr	r1, [r1, #8]
 800c7be:	6838      	ldr	r0, [r7, #0]
 800c7c0:	1a41      	subs	r1, r0, r1
 800c7c2:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800c7c4:	6879      	ldr	r1, [r7, #4]
 800c7c6:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800c7ca:	1e42      	subs	r2, r0, #1
 800c7cc:	f141 33ff 	adc.w	r3, r1, #4294967295
 800c7d0:	f04f 0000 	mov.w	r0, #0
 800c7d4:	f04f 0100 	mov.w	r1, #0
 800c7d8:	0a50      	lsrs	r0, r2, #9
 800c7da:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800c7de:	0a59      	lsrs	r1, r3, #9
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	69bb      	ldr	r3, [r7, #24]
 800c7e4:	895b      	ldrh	r3, [r3, #10]
 800c7e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7ea:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	79db      	ldrb	r3, [r3, #7]
 800c7f0:	2b02      	cmp	r3, #2
 800c7f2:	d10e      	bne.n	800c812 <get_fat+0x1a6>
					if (cofs <= clen) {
 800c7f4:	697a      	ldr	r2, [r7, #20]
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	d80a      	bhi.n	800c812 <get_fat+0x1a6>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800c7fc:	697a      	ldr	r2, [r7, #20]
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	429a      	cmp	r2, r3
 800c802:	d002      	beq.n	800c80a <get_fat+0x19e>
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	3301      	adds	r3, #1
 800c808:	e001      	b.n	800c80e <get_fat+0x1a2>
 800c80a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800c80e:	61fb      	str	r3, [r7, #28]
						break;
 800c810:	e040      	b.n	800c894 <get_fat+0x228>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	79db      	ldrb	r3, [r3, #7]
 800c816:	2b03      	cmp	r3, #3
 800c818:	d108      	bne.n	800c82c <get_fat+0x1c0>
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	699b      	ldr	r3, [r3, #24]
 800c81e:	697a      	ldr	r2, [r7, #20]
 800c820:	429a      	cmp	r2, r3
 800c822:	d203      	bcs.n	800c82c <get_fat+0x1c0>
					val = clst + 1; 	/* Generate the value */
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	3301      	adds	r3, #1
 800c828:	61fb      	str	r3, [r7, #28]
					break;
 800c82a:	e033      	b.n	800c894 <get_fat+0x228>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	79db      	ldrb	r3, [r3, #7]
 800c830:	2b02      	cmp	r3, #2
 800c832:	d023      	beq.n	800c87c <get_fat+0x210>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	69db      	ldr	r3, [r3, #28]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d003      	beq.n	800c844 <get_fat+0x1d8>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800c83c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800c840:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800c842:	e027      	b.n	800c894 <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c844:	69bb      	ldr	r3, [r7, #24]
 800c846:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	09db      	lsrs	r3, r3, #7
 800c84c:	4413      	add	r3, r2
 800c84e:	4619      	mov	r1, r3
 800c850:	69b8      	ldr	r0, [r7, #24]
 800c852:	f7ff fe4f 	bl	800c4f4 <move_window>
 800c856:	4603      	mov	r3, r0
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d11a      	bne.n	800c892 <get_fat+0x226>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800c85c:	69bb      	ldr	r3, [r7, #24]
 800c85e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	009b      	lsls	r3, r3, #2
 800c866:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c86a:	4413      	add	r3, r2
 800c86c:	4618      	mov	r0, r3
 800c86e:	f7ff fa45 	bl	800bcfc <ld_dword>
 800c872:	4603      	mov	r3, r0
 800c874:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c878:	61fb      	str	r3, [r7, #28]
					break;
 800c87a:	e00b      	b.n	800c894 <get_fat+0x228>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c87c:	2301      	movs	r3, #1
 800c87e:	61fb      	str	r3, [r7, #28]
 800c880:	e008      	b.n	800c894 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c882:	bf00      	nop
 800c884:	e006      	b.n	800c894 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c886:	bf00      	nop
 800c888:	e004      	b.n	800c894 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c88a:	bf00      	nop
 800c88c:	e002      	b.n	800c894 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c88e:	bf00      	nop
 800c890:	e000      	b.n	800c894 <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c892:	bf00      	nop
		}
	}

	return val;
 800c894:	69fb      	ldr	r3, [r7, #28]
}
 800c896:	4618      	mov	r0, r3
 800c898:	3720      	adds	r7, #32
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}
 800c89e:	bf00      	nop

0800c8a0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c8a0:	b590      	push	{r4, r7, lr}
 800c8a2:	b089      	sub	sp, #36	@ 0x24
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	60f8      	str	r0, [r7, #12]
 800c8a8:	60b9      	str	r1, [r7, #8]
 800c8aa:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c8ac:	2302      	movs	r3, #2
 800c8ae:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	2b01      	cmp	r3, #1
 800c8b4:	f240 80dd 	bls.w	800ca72 <put_fat+0x1d2>
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	69db      	ldr	r3, [r3, #28]
 800c8bc:	68ba      	ldr	r2, [r7, #8]
 800c8be:	429a      	cmp	r2, r3
 800c8c0:	f080 80d7 	bcs.w	800ca72 <put_fat+0x1d2>
		switch (fs->fs_type) {
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	2b04      	cmp	r3, #4
 800c8ca:	f300 80d2 	bgt.w	800ca72 <put_fat+0x1d2>
 800c8ce:	2b03      	cmp	r3, #3
 800c8d0:	f280 8093 	bge.w	800c9fa <put_fat+0x15a>
 800c8d4:	2b01      	cmp	r3, #1
 800c8d6:	d002      	beq.n	800c8de <put_fat+0x3e>
 800c8d8:	2b02      	cmp	r3, #2
 800c8da:	d06e      	beq.n	800c9ba <put_fat+0x11a>
 800c8dc:	e0c9      	b.n	800ca72 <put_fat+0x1d2>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	61bb      	str	r3, [r7, #24]
 800c8e2:	69bb      	ldr	r3, [r7, #24]
 800c8e4:	085b      	lsrs	r3, r3, #1
 800c8e6:	69ba      	ldr	r2, [r7, #24]
 800c8e8:	4413      	add	r3, r2
 800c8ea:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c8f0:	69bb      	ldr	r3, [r7, #24]
 800c8f2:	0a5b      	lsrs	r3, r3, #9
 800c8f4:	4413      	add	r3, r2
 800c8f6:	4619      	mov	r1, r3
 800c8f8:	68f8      	ldr	r0, [r7, #12]
 800c8fa:	f7ff fdfb 	bl	800c4f4 <move_window>
 800c8fe:	4603      	mov	r3, r0
 800c900:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c902:	7ffb      	ldrb	r3, [r7, #31]
 800c904:	2b00      	cmp	r3, #0
 800c906:	f040 80ad 	bne.w	800ca64 <put_fat+0x1c4>
			p = fs->win + bc++ % SS(fs);
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800c910:	69bb      	ldr	r3, [r7, #24]
 800c912:	1c59      	adds	r1, r3, #1
 800c914:	61b9      	str	r1, [r7, #24]
 800c916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c91a:	4413      	add	r3, r2
 800c91c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	f003 0301 	and.w	r3, r3, #1
 800c924:	2b00      	cmp	r3, #0
 800c926:	d00d      	beq.n	800c944 <put_fat+0xa4>
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	781b      	ldrb	r3, [r3, #0]
 800c92c:	b25b      	sxtb	r3, r3
 800c92e:	f003 030f 	and.w	r3, r3, #15
 800c932:	b25a      	sxtb	r2, r3
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	b2db      	uxtb	r3, r3
 800c938:	011b      	lsls	r3, r3, #4
 800c93a:	b25b      	sxtb	r3, r3
 800c93c:	4313      	orrs	r3, r2
 800c93e:	b25b      	sxtb	r3, r3
 800c940:	b2db      	uxtb	r3, r3
 800c942:	e001      	b.n	800c948 <put_fat+0xa8>
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	b2db      	uxtb	r3, r3
 800c948:	697a      	ldr	r2, [r7, #20]
 800c94a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	2201      	movs	r2, #1
 800c950:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c956:	69bb      	ldr	r3, [r7, #24]
 800c958:	0a5b      	lsrs	r3, r3, #9
 800c95a:	4413      	add	r3, r2
 800c95c:	4619      	mov	r1, r3
 800c95e:	68f8      	ldr	r0, [r7, #12]
 800c960:	f7ff fdc8 	bl	800c4f4 <move_window>
 800c964:	4603      	mov	r3, r0
 800c966:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c968:	7ffb      	ldrb	r3, [r7, #31]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d17c      	bne.n	800ca68 <put_fat+0x1c8>
			p = fs->win + bc % SS(fs);
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800c974:	69bb      	ldr	r3, [r7, #24]
 800c976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c97a:	4413      	add	r3, r2
 800c97c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	f003 0301 	and.w	r3, r3, #1
 800c984:	2b00      	cmp	r3, #0
 800c986:	d003      	beq.n	800c990 <put_fat+0xf0>
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	091b      	lsrs	r3, r3, #4
 800c98c:	b2db      	uxtb	r3, r3
 800c98e:	e00e      	b.n	800c9ae <put_fat+0x10e>
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	781b      	ldrb	r3, [r3, #0]
 800c994:	b25b      	sxtb	r3, r3
 800c996:	f023 030f 	bic.w	r3, r3, #15
 800c99a:	b25a      	sxtb	r2, r3
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	0a1b      	lsrs	r3, r3, #8
 800c9a0:	b25b      	sxtb	r3, r3
 800c9a2:	f003 030f 	and.w	r3, r3, #15
 800c9a6:	b25b      	sxtb	r3, r3
 800c9a8:	4313      	orrs	r3, r2
 800c9aa:	b25b      	sxtb	r3, r3
 800c9ac:	b2db      	uxtb	r3, r3
 800c9ae:	697a      	ldr	r2, [r7, #20]
 800c9b0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	2201      	movs	r2, #1
 800c9b6:	70da      	strb	r2, [r3, #3]
			break;
 800c9b8:	e05b      	b.n	800ca72 <put_fat+0x1d2>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c9be:	68bb      	ldr	r3, [r7, #8]
 800c9c0:	0a1b      	lsrs	r3, r3, #8
 800c9c2:	4413      	add	r3, r2
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	68f8      	ldr	r0, [r7, #12]
 800c9c8:	f7ff fd94 	bl	800c4f4 <move_window>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c9d0:	7ffb      	ldrb	r3, [r7, #31]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d14a      	bne.n	800ca6c <put_fat+0x1cc>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	005b      	lsls	r3, r3, #1
 800c9e0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c9e4:	4413      	add	r3, r2
 800c9e6:	687a      	ldr	r2, [r7, #4]
 800c9e8:	b292      	uxth	r2, r2
 800c9ea:	4611      	mov	r1, r2
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f7ff fa83 	bl	800bef8 <st_word>
			fs->wflag = 1;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	2201      	movs	r2, #1
 800c9f6:	70da      	strb	r2, [r3, #3]
			break;
 800c9f8:	e03b      	b.n	800ca72 <put_fat+0x1d2>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	09db      	lsrs	r3, r3, #7
 800ca02:	4413      	add	r3, r2
 800ca04:	4619      	mov	r1, r3
 800ca06:	68f8      	ldr	r0, [r7, #12]
 800ca08:	f7ff fd74 	bl	800c4f4 <move_window>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ca10:	7ffb      	ldrb	r3, [r7, #31]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d12c      	bne.n	800ca70 <put_fat+0x1d0>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	2b04      	cmp	r3, #4
 800ca1c:	d012      	beq.n	800ca44 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	009b      	lsls	r3, r3, #2
 800ca2e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ca32:	4413      	add	r3, r2
 800ca34:	4618      	mov	r0, r3
 800ca36:	f7ff f961 	bl	800bcfc <ld_dword>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800ca40:	4323      	orrs	r3, r4
 800ca42:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	009b      	lsls	r3, r3, #2
 800ca4e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ca52:	4413      	add	r3, r2
 800ca54:	6879      	ldr	r1, [r7, #4]
 800ca56:	4618      	mov	r0, r3
 800ca58:	f7ff fa69 	bl	800bf2e <st_dword>
			fs->wflag = 1;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	2201      	movs	r2, #1
 800ca60:	70da      	strb	r2, [r3, #3]
			break;
 800ca62:	e006      	b.n	800ca72 <put_fat+0x1d2>
			if (res != FR_OK) break;
 800ca64:	bf00      	nop
 800ca66:	e004      	b.n	800ca72 <put_fat+0x1d2>
			if (res != FR_OK) break;
 800ca68:	bf00      	nop
 800ca6a:	e002      	b.n	800ca72 <put_fat+0x1d2>
			if (res != FR_OK) break;
 800ca6c:	bf00      	nop
 800ca6e:	e000      	b.n	800ca72 <put_fat+0x1d2>
			if (res != FR_OK) break;
 800ca70:	bf00      	nop
		}
	}
	return res;
 800ca72:	7ffb      	ldrb	r3, [r7, #31]
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3724      	adds	r7, #36	@ 0x24
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd90      	pop	{r4, r7, pc}

0800ca7c <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b08a      	sub	sp, #40	@ 0x28
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	60f8      	str	r0, [r7, #12]
 800ca84:	60b9      	str	r1, [r7, #8]
 800ca86:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	3b02      	subs	r3, #2
 800ca8c:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	69db      	ldr	r3, [r3, #28]
 800ca92:	3b02      	subs	r3, #2
 800ca94:	68ba      	ldr	r2, [r7, #8]
 800ca96:	429a      	cmp	r2, r3
 800ca98:	d301      	bcc.n	800ca9e <find_bitmap+0x22>
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	61fb      	str	r3, [r7, #28]
 800caa2:	69fb      	ldr	r3, [r7, #28]
 800caa4:	61bb      	str	r3, [r7, #24]
 800caa6:	2300      	movs	r3, #0
 800caa8:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800caae:	69fb      	ldr	r3, [r7, #28]
 800cab0:	0b1b      	lsrs	r3, r3, #12
 800cab2:	4413      	add	r3, r2
 800cab4:	4619      	mov	r1, r3
 800cab6:	68f8      	ldr	r0, [r7, #12]
 800cab8:	f7ff fd1c 	bl	800c4f4 <move_window>
 800cabc:	4603      	mov	r3, r0
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d002      	beq.n	800cac8 <find_bitmap+0x4c>
 800cac2:	f04f 33ff 	mov.w	r3, #4294967295
 800cac6:	e051      	b.n	800cb6c <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800cac8:	69fb      	ldr	r3, [r7, #28]
 800caca:	08db      	lsrs	r3, r3, #3
 800cacc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cad0:	623b      	str	r3, [r7, #32]
 800cad2:	69fb      	ldr	r3, [r7, #28]
 800cad4:	f003 0307 	and.w	r3, r3, #7
 800cad8:	2201      	movs	r2, #1
 800cada:	fa02 f303 	lsl.w	r3, r2, r3
 800cade:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800cae2:	68fa      	ldr	r2, [r7, #12]
 800cae4:	6a3b      	ldr	r3, [r7, #32]
 800cae6:	4413      	add	r3, r2
 800cae8:	3338      	adds	r3, #56	@ 0x38
 800caea:	781a      	ldrb	r2, [r3, #0]
 800caec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800caf0:	4013      	ands	r3, r2
 800caf2:	74fb      	strb	r3, [r7, #19]
 800caf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800caf8:	005b      	lsls	r3, r3, #1
 800cafa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800cafe:	69fb      	ldr	r3, [r7, #28]
 800cb00:	3301      	adds	r3, #1
 800cb02:	61fb      	str	r3, [r7, #28]
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	69db      	ldr	r3, [r3, #28]
 800cb08:	3b02      	subs	r3, #2
 800cb0a:	69fa      	ldr	r2, [r7, #28]
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d307      	bcc.n	800cb20 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 800cb10:	2300      	movs	r3, #0
 800cb12:	61fb      	str	r3, [r7, #28]
 800cb14:	2300      	movs	r3, #0
 800cb16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cb1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cb1e:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800cb20:	7cfb      	ldrb	r3, [r7, #19]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d109      	bne.n	800cb3a <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	3301      	adds	r3, #1
 800cb2a:	617b      	str	r3, [r7, #20]
 800cb2c:	697a      	ldr	r2, [r7, #20]
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d106      	bne.n	800cb42 <find_bitmap+0xc6>
 800cb34:	69bb      	ldr	r3, [r7, #24]
 800cb36:	3302      	adds	r3, #2
 800cb38:	e018      	b.n	800cb6c <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800cb3a:	69fb      	ldr	r3, [r7, #28]
 800cb3c:	61bb      	str	r3, [r7, #24]
 800cb3e:	2300      	movs	r3, #0
 800cb40:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800cb42:	69fa      	ldr	r2, [r7, #28]
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	429a      	cmp	r2, r3
 800cb48:	d101      	bne.n	800cb4e <find_bitmap+0xd2>
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	e00e      	b.n	800cb6c <find_bitmap+0xf0>
			} while (bm);
 800cb4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d1c5      	bne.n	800cae2 <find_bitmap+0x66>
			bm = 1;
 800cb56:	2301      	movs	r3, #1
 800cb58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 800cb5c:	6a3b      	ldr	r3, [r7, #32]
 800cb5e:	3301      	adds	r3, #1
 800cb60:	623b      	str	r3, [r7, #32]
 800cb62:	6a3b      	ldr	r3, [r7, #32]
 800cb64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb68:	d3bb      	bcc.n	800cae2 <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800cb6a:	e79e      	b.n	800caaa <find_bitmap+0x2e>
	}
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	3728      	adds	r7, #40	@ 0x28
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}

0800cb74 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b088      	sub	sp, #32
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	60f8      	str	r0, [r7, #12]
 800cb7c:	60b9      	str	r1, [r7, #8]
 800cb7e:	607a      	str	r2, [r7, #4]
 800cb80:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800cb82:	68bb      	ldr	r3, [r7, #8]
 800cb84:	3b02      	subs	r3, #2
 800cb86:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	0b1b      	lsrs	r3, r3, #12
 800cb90:	4413      	add	r3, r2
 800cb92:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	08db      	lsrs	r3, r3, #3
 800cb98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb9c:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	f003 0307 	and.w	r3, r3, #7
 800cba4:	2201      	movs	r2, #1
 800cba6:	fa02 f303 	lsl.w	r3, r2, r3
 800cbaa:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	1c5a      	adds	r2, r3, #1
 800cbb0:	617a      	str	r2, [r7, #20]
 800cbb2:	4619      	mov	r1, r3
 800cbb4:	68f8      	ldr	r0, [r7, #12]
 800cbb6:	f7ff fc9d 	bl	800c4f4 <move_window>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d001      	beq.n	800cbc4 <change_bitmap+0x50>
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	e03d      	b.n	800cc40 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800cbc4:	68fa      	ldr	r2, [r7, #12]
 800cbc6:	69bb      	ldr	r3, [r7, #24]
 800cbc8:	4413      	add	r3, r2
 800cbca:	3338      	adds	r3, #56	@ 0x38
 800cbcc:	781a      	ldrb	r2, [r3, #0]
 800cbce:	7ffb      	ldrb	r3, [r7, #31]
 800cbd0:	4013      	ands	r3, r2
 800cbd2:	b2db      	uxtb	r3, r3
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	bf14      	ite	ne
 800cbd8:	2301      	movne	r3, #1
 800cbda:	2300      	moveq	r3, #0
 800cbdc:	b2db      	uxtb	r3, r3
 800cbde:	461a      	mov	r2, r3
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	4293      	cmp	r3, r2
 800cbe4:	d101      	bne.n	800cbea <change_bitmap+0x76>
 800cbe6:	2302      	movs	r3, #2
 800cbe8:	e02a      	b.n	800cc40 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 800cbea:	68fa      	ldr	r2, [r7, #12]
 800cbec:	69bb      	ldr	r3, [r7, #24]
 800cbee:	4413      	add	r3, r2
 800cbf0:	3338      	adds	r3, #56	@ 0x38
 800cbf2:	781a      	ldrb	r2, [r3, #0]
 800cbf4:	7ffb      	ldrb	r3, [r7, #31]
 800cbf6:	4053      	eors	r3, r2
 800cbf8:	b2d9      	uxtb	r1, r3
 800cbfa:	68fa      	ldr	r2, [r7, #12]
 800cbfc:	69bb      	ldr	r3, [r7, #24]
 800cbfe:	4413      	add	r3, r2
 800cc00:	3338      	adds	r3, #56	@ 0x38
 800cc02:	460a      	mov	r2, r1
 800cc04:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	2201      	movs	r2, #1
 800cc0a:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	3b01      	subs	r3, #1
 800cc10:	607b      	str	r3, [r7, #4]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d101      	bne.n	800cc1c <change_bitmap+0xa8>
 800cc18:	2300      	movs	r3, #0
 800cc1a:	e011      	b.n	800cc40 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 800cc1c:	7ffb      	ldrb	r3, [r7, #31]
 800cc1e:	005b      	lsls	r3, r3, #1
 800cc20:	77fb      	strb	r3, [r7, #31]
 800cc22:	7ffb      	ldrb	r3, [r7, #31]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d1cd      	bne.n	800cbc4 <change_bitmap+0x50>
			bm = 1;
 800cc28:	2301      	movs	r3, #1
 800cc2a:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800cc2c:	69bb      	ldr	r3, [r7, #24]
 800cc2e:	3301      	adds	r3, #1
 800cc30:	61bb      	str	r3, [r7, #24]
 800cc32:	69bb      	ldr	r3, [r7, #24]
 800cc34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc38:	d3c4      	bcc.n	800cbc4 <change_bitmap+0x50>
		i = 0;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800cc3e:	e7b5      	b.n	800cbac <change_bitmap+0x38>
	}
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	3720      	adds	r7, #32
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}

0800cc48 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b086      	sub	sp, #24
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	79db      	ldrb	r3, [r3, #7]
 800cc54:	2b03      	cmp	r3, #3
 800cc56:	d121      	bne.n	800cc9c <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	689b      	ldr	r3, [r3, #8]
 800cc5c:	617b      	str	r3, [r7, #20]
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	699b      	ldr	r3, [r3, #24]
 800cc62:	613b      	str	r3, [r7, #16]
 800cc64:	e014      	b.n	800cc90 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6818      	ldr	r0, [r3, #0]
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	3301      	adds	r3, #1
 800cc6e:	461a      	mov	r2, r3
 800cc70:	6979      	ldr	r1, [r7, #20]
 800cc72:	f7ff fe15 	bl	800c8a0 <put_fat>
 800cc76:	4603      	mov	r3, r0
 800cc78:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800cc7a:	7bfb      	ldrb	r3, [r7, #15]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d001      	beq.n	800cc84 <fill_first_frag+0x3c>
 800cc80:	7bfb      	ldrb	r3, [r7, #15]
 800cc82:	e00c      	b.n	800cc9e <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	3301      	adds	r3, #1
 800cc88:	617b      	str	r3, [r7, #20]
 800cc8a:	693b      	ldr	r3, [r7, #16]
 800cc8c:	3b01      	subs	r3, #1
 800cc8e:	613b      	str	r3, [r7, #16]
 800cc90:	693b      	ldr	r3, [r7, #16]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d1e7      	bne.n	800cc66 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800cc9c:	2300      	movs	r3, #0
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3718      	adds	r7, #24
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}

0800cca6 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800cca6:	b580      	push	{r7, lr}
 800cca8:	b086      	sub	sp, #24
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	60f8      	str	r0, [r7, #12]
 800ccae:	60b9      	str	r1, [r7, #8]
 800ccb0:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800ccb2:	e020      	b.n	800ccf6 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	6818      	ldr	r0, [r3, #0]
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	69db      	ldr	r3, [r3, #28]
 800ccbc:	68ba      	ldr	r2, [r7, #8]
 800ccbe:	1ad3      	subs	r3, r2, r3
 800ccc0:	1c59      	adds	r1, r3, #1
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	69db      	ldr	r3, [r3, #28]
 800ccc6:	2b01      	cmp	r3, #1
 800ccc8:	d905      	bls.n	800ccd6 <fill_last_frag+0x30>
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	69db      	ldr	r3, [r3, #28]
 800ccce:	68ba      	ldr	r2, [r7, #8]
 800ccd0:	1ad3      	subs	r3, r2, r3
 800ccd2:	3302      	adds	r3, #2
 800ccd4:	e000      	b.n	800ccd8 <fill_last_frag+0x32>
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	461a      	mov	r2, r3
 800ccda:	f7ff fde1 	bl	800c8a0 <put_fat>
 800ccde:	4603      	mov	r3, r0
 800cce0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800cce2:	7dfb      	ldrb	r3, [r7, #23]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d001      	beq.n	800ccec <fill_last_frag+0x46>
 800cce8:	7dfb      	ldrb	r3, [r7, #23]
 800ccea:	e009      	b.n	800cd00 <fill_last_frag+0x5a>
		obj->n_frag--;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	69db      	ldr	r3, [r3, #28]
 800ccf0:	1e5a      	subs	r2, r3, #1
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	69db      	ldr	r3, [r3, #28]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d1da      	bne.n	800ccb4 <fill_last_frag+0xe>
	}
	return FR_OK;
 800ccfe:	2300      	movs	r3, #0
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3718      	adds	r7, #24
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}

0800cd08 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b08a      	sub	sp, #40	@ 0x28
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	60f8      	str	r0, [r7, #12]
 800cd10:	60b9      	str	r1, [r7, #8]
 800cd12:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800cd14:	2300      	movs	r3, #0
 800cd16:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	627b      	str	r3, [r7, #36]	@ 0x24
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	2b01      	cmp	r3, #1
 800cd2a:	d904      	bls.n	800cd36 <remove_chain+0x2e>
 800cd2c:	69bb      	ldr	r3, [r7, #24]
 800cd2e:	69db      	ldr	r3, [r3, #28]
 800cd30:	68ba      	ldr	r2, [r7, #8]
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d301      	bcc.n	800cd3a <remove_chain+0x32>
 800cd36:	2302      	movs	r3, #2
 800cd38:	e096      	b.n	800ce68 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d014      	beq.n	800cd6a <remove_chain+0x62>
 800cd40:	69bb      	ldr	r3, [r7, #24]
 800cd42:	781b      	ldrb	r3, [r3, #0]
 800cd44:	2b04      	cmp	r3, #4
 800cd46:	d103      	bne.n	800cd50 <remove_chain+0x48>
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	79db      	ldrb	r3, [r3, #7]
 800cd4c:	2b02      	cmp	r3, #2
 800cd4e:	d00c      	beq.n	800cd6a <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800cd50:	f04f 32ff 	mov.w	r2, #4294967295
 800cd54:	6879      	ldr	r1, [r7, #4]
 800cd56:	69b8      	ldr	r0, [r7, #24]
 800cd58:	f7ff fda2 	bl	800c8a0 <put_fat>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800cd60:	7ffb      	ldrb	r3, [r7, #31]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d001      	beq.n	800cd6a <remove_chain+0x62>
 800cd66:	7ffb      	ldrb	r3, [r7, #31]
 800cd68:	e07e      	b.n	800ce68 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800cd6a:	68b9      	ldr	r1, [r7, #8]
 800cd6c:	68f8      	ldr	r0, [r7, #12]
 800cd6e:	f7ff fc7d 	bl	800c66c <get_fat>
 800cd72:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d055      	beq.n	800ce26 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	2b01      	cmp	r3, #1
 800cd7e:	d101      	bne.n	800cd84 <remove_chain+0x7c>
 800cd80:	2302      	movs	r3, #2
 800cd82:	e071      	b.n	800ce68 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd8a:	d101      	bne.n	800cd90 <remove_chain+0x88>
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	e06b      	b.n	800ce68 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800cd90:	69bb      	ldr	r3, [r7, #24]
 800cd92:	781b      	ldrb	r3, [r3, #0]
 800cd94:	2b04      	cmp	r3, #4
 800cd96:	d00b      	beq.n	800cdb0 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cd98:	2200      	movs	r2, #0
 800cd9a:	68b9      	ldr	r1, [r7, #8]
 800cd9c:	69b8      	ldr	r0, [r7, #24]
 800cd9e:	f7ff fd7f 	bl	800c8a0 <put_fat>
 800cda2:	4603      	mov	r3, r0
 800cda4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800cda6:	7ffb      	ldrb	r3, [r7, #31]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d001      	beq.n	800cdb0 <remove_chain+0xa8>
 800cdac:	7ffb      	ldrb	r3, [r7, #31]
 800cdae:	e05b      	b.n	800ce68 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cdb0:	69bb      	ldr	r3, [r7, #24]
 800cdb2:	699a      	ldr	r2, [r3, #24]
 800cdb4:	69bb      	ldr	r3, [r7, #24]
 800cdb6:	69db      	ldr	r3, [r3, #28]
 800cdb8:	3b02      	subs	r3, #2
 800cdba:	429a      	cmp	r2, r3
 800cdbc:	d20b      	bcs.n	800cdd6 <remove_chain+0xce>
			fs->free_clst++;
 800cdbe:	69bb      	ldr	r3, [r7, #24]
 800cdc0:	699b      	ldr	r3, [r3, #24]
 800cdc2:	1c5a      	adds	r2, r3, #1
 800cdc4:	69bb      	ldr	r3, [r7, #24]
 800cdc6:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800cdc8:	69bb      	ldr	r3, [r7, #24]
 800cdca:	791b      	ldrb	r3, [r3, #4]
 800cdcc:	f043 0301 	orr.w	r3, r3, #1
 800cdd0:	b2da      	uxtb	r2, r3
 800cdd2:	69bb      	ldr	r3, [r7, #24]
 800cdd4:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800cdd6:	6a3b      	ldr	r3, [r7, #32]
 800cdd8:	3301      	adds	r3, #1
 800cdda:	697a      	ldr	r2, [r7, #20]
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d102      	bne.n	800cde6 <remove_chain+0xde>
			ecl = nxt;
 800cde0:	697b      	ldr	r3, [r7, #20]
 800cde2:	623b      	str	r3, [r7, #32]
 800cde4:	e017      	b.n	800ce16 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800cde6:	69bb      	ldr	r3, [r7, #24]
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	2b04      	cmp	r3, #4
 800cdec:	d10f      	bne.n	800ce0e <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800cdee:	6a3a      	ldr	r2, [r7, #32]
 800cdf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdf2:	1ad3      	subs	r3, r2, r3
 800cdf4:	1c5a      	adds	r2, r3, #1
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cdfa:	69b8      	ldr	r0, [r7, #24]
 800cdfc:	f7ff feba 	bl	800cb74 <change_bitmap>
 800ce00:	4603      	mov	r3, r0
 800ce02:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800ce04:	7ffb      	ldrb	r3, [r7, #31]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d001      	beq.n	800ce0e <remove_chain+0x106>
 800ce0a:	7ffb      	ldrb	r3, [r7, #31]
 800ce0c:	e02c      	b.n	800ce68 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	623b      	str	r3, [r7, #32]
 800ce12:	6a3b      	ldr	r3, [r7, #32]
 800ce14:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ce1a:	69bb      	ldr	r3, [r7, #24]
 800ce1c:	69db      	ldr	r3, [r3, #28]
 800ce1e:	68ba      	ldr	r2, [r7, #8]
 800ce20:	429a      	cmp	r2, r3
 800ce22:	d3a2      	bcc.n	800cd6a <remove_chain+0x62>
 800ce24:	e000      	b.n	800ce28 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800ce26:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800ce28:	69bb      	ldr	r3, [r7, #24]
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	2b04      	cmp	r3, #4
 800ce2e:	d11a      	bne.n	800ce66 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d103      	bne.n	800ce3e <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	71da      	strb	r2, [r3, #7]
 800ce3c:	e013      	b.n	800ce66 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	79db      	ldrb	r3, [r3, #7]
 800ce42:	2b03      	cmp	r3, #3
 800ce44:	d10f      	bne.n	800ce66 <remove_chain+0x15e>
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	689b      	ldr	r3, [r3, #8]
 800ce4a:	687a      	ldr	r2, [r7, #4]
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d30a      	bcc.n	800ce66 <remove_chain+0x15e>
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	689a      	ldr	r2, [r3, #8]
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	699b      	ldr	r3, [r3, #24]
 800ce58:	4413      	add	r3, r2
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d802      	bhi.n	800ce66 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	2202      	movs	r2, #2
 800ce64:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800ce66:	2300      	movs	r3, #0
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3728      	adds	r7, #40	@ 0x28
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}

0800ce70 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b088      	sub	sp, #32
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d10d      	bne.n	800cea2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ce86:	693b      	ldr	r3, [r7, #16]
 800ce88:	695b      	ldr	r3, [r3, #20]
 800ce8a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ce8c:	69bb      	ldr	r3, [r7, #24]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d004      	beq.n	800ce9c <create_chain+0x2c>
 800ce92:	693b      	ldr	r3, [r7, #16]
 800ce94:	69db      	ldr	r3, [r3, #28]
 800ce96:	69ba      	ldr	r2, [r7, #24]
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d31b      	bcc.n	800ced4 <create_chain+0x64>
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	61bb      	str	r3, [r7, #24]
 800cea0:	e018      	b.n	800ced4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cea2:	6839      	ldr	r1, [r7, #0]
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f7ff fbe1 	bl	800c66c <get_fat>
 800ceaa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	2b01      	cmp	r3, #1
 800ceb0:	d801      	bhi.n	800ceb6 <create_chain+0x46>
 800ceb2:	2301      	movs	r3, #1
 800ceb4:	e0d9      	b.n	800d06a <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cebc:	d101      	bne.n	800cec2 <create_chain+0x52>
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	e0d3      	b.n	800d06a <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cec2:	693b      	ldr	r3, [r7, #16]
 800cec4:	69db      	ldr	r3, [r3, #28]
 800cec6:	68fa      	ldr	r2, [r7, #12]
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d201      	bcs.n	800ced0 <create_chain+0x60>
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	e0cc      	b.n	800d06a <create_chain+0x1fa>
		scl = clst;
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	2b04      	cmp	r3, #4
 800ceda:	d164      	bne.n	800cfa6 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800cedc:	2201      	movs	r2, #1
 800cede:	69b9      	ldr	r1, [r7, #24]
 800cee0:	6938      	ldr	r0, [r7, #16]
 800cee2:	f7ff fdcb 	bl	800ca7c <find_bitmap>
 800cee6:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800cee8:	69fb      	ldr	r3, [r7, #28]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d003      	beq.n	800cef6 <create_chain+0x86>
 800ceee:	69fb      	ldr	r3, [r7, #28]
 800cef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cef4:	d101      	bne.n	800cefa <create_chain+0x8a>
 800cef6:	69fb      	ldr	r3, [r7, #28]
 800cef8:	e0b7      	b.n	800d06a <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800cefa:	2301      	movs	r3, #1
 800cefc:	2201      	movs	r2, #1
 800cefe:	69f9      	ldr	r1, [r7, #28]
 800cf00:	6938      	ldr	r0, [r7, #16]
 800cf02:	f7ff fe37 	bl	800cb74 <change_bitmap>
 800cf06:	4603      	mov	r3, r0
 800cf08:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800cf0a:	7dfb      	ldrb	r3, [r7, #23]
 800cf0c:	2b02      	cmp	r3, #2
 800cf0e:	d101      	bne.n	800cf14 <create_chain+0xa4>
 800cf10:	2301      	movs	r3, #1
 800cf12:	e0aa      	b.n	800d06a <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800cf14:	7dfb      	ldrb	r3, [r7, #23]
 800cf16:	2b01      	cmp	r3, #1
 800cf18:	d102      	bne.n	800cf20 <create_chain+0xb0>
 800cf1a:	f04f 33ff 	mov.w	r3, #4294967295
 800cf1e:	e0a4      	b.n	800d06a <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d103      	bne.n	800cf2e <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2202      	movs	r2, #2
 800cf2a:	71da      	strb	r2, [r3, #7]
 800cf2c:	e011      	b.n	800cf52 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	79db      	ldrb	r3, [r3, #7]
 800cf32:	2b02      	cmp	r3, #2
 800cf34:	d10d      	bne.n	800cf52 <create_chain+0xe2>
 800cf36:	69bb      	ldr	r3, [r7, #24]
 800cf38:	3301      	adds	r3, #1
 800cf3a:	69fa      	ldr	r2, [r7, #28]
 800cf3c:	429a      	cmp	r2, r3
 800cf3e:	d008      	beq.n	800cf52 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	689b      	ldr	r3, [r3, #8]
 800cf44:	69ba      	ldr	r2, [r7, #24]
 800cf46:	1ad2      	subs	r2, r2, r3
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2203      	movs	r2, #3
 800cf50:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	79db      	ldrb	r3, [r3, #7]
 800cf56:	2b02      	cmp	r3, #2
 800cf58:	d064      	beq.n	800d024 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	3301      	adds	r3, #1
 800cf5e:	69fa      	ldr	r2, [r7, #28]
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d10b      	bne.n	800cf7c <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	69db      	ldr	r3, [r3, #28]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d003      	beq.n	800cf74 <create_chain+0x104>
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	69db      	ldr	r3, [r3, #28]
 800cf70:	3301      	adds	r3, #1
 800cf72:	e000      	b.n	800cf76 <create_chain+0x106>
 800cf74:	2302      	movs	r3, #2
 800cf76:	687a      	ldr	r2, [r7, #4]
 800cf78:	61d3      	str	r3, [r2, #28]
 800cf7a:	e053      	b.n	800d024 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	69db      	ldr	r3, [r3, #28]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d102      	bne.n	800cf8a <create_chain+0x11a>
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2201      	movs	r2, #1
 800cf88:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800cf8a:	69fa      	ldr	r2, [r7, #28]
 800cf8c:	6839      	ldr	r1, [r7, #0]
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f7ff fe89 	bl	800cca6 <fill_last_frag>
 800cf94:	4603      	mov	r3, r0
 800cf96:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800cf98:	7dfb      	ldrb	r3, [r7, #23]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d142      	bne.n	800d024 <create_chain+0x1b4>
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2201      	movs	r2, #1
 800cfa2:	61da      	str	r2, [r3, #28]
 800cfa4:	e03e      	b.n	800d024 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800cfa6:	69bb      	ldr	r3, [r7, #24]
 800cfa8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800cfaa:	69fb      	ldr	r3, [r7, #28]
 800cfac:	3301      	adds	r3, #1
 800cfae:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	69db      	ldr	r3, [r3, #28]
 800cfb4:	69fa      	ldr	r2, [r7, #28]
 800cfb6:	429a      	cmp	r2, r3
 800cfb8:	d307      	bcc.n	800cfca <create_chain+0x15a>
				ncl = 2;
 800cfba:	2302      	movs	r3, #2
 800cfbc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800cfbe:	69fa      	ldr	r2, [r7, #28]
 800cfc0:	69bb      	ldr	r3, [r7, #24]
 800cfc2:	429a      	cmp	r2, r3
 800cfc4:	d901      	bls.n	800cfca <create_chain+0x15a>
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	e04f      	b.n	800d06a <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cfca:	69f9      	ldr	r1, [r7, #28]
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f7ff fb4d 	bl	800c66c <get_fat>
 800cfd2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d00e      	beq.n	800cff8 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	2b01      	cmp	r3, #1
 800cfde:	d003      	beq.n	800cfe8 <create_chain+0x178>
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfe6:	d101      	bne.n	800cfec <create_chain+0x17c>
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	e03e      	b.n	800d06a <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800cfec:	69fa      	ldr	r2, [r7, #28]
 800cfee:	69bb      	ldr	r3, [r7, #24]
 800cff0:	429a      	cmp	r2, r3
 800cff2:	d1da      	bne.n	800cfaa <create_chain+0x13a>
 800cff4:	2300      	movs	r3, #0
 800cff6:	e038      	b.n	800d06a <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800cff8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cffa:	f04f 32ff 	mov.w	r2, #4294967295
 800cffe:	69f9      	ldr	r1, [r7, #28]
 800d000:	6938      	ldr	r0, [r7, #16]
 800d002:	f7ff fc4d 	bl	800c8a0 <put_fat>
 800d006:	4603      	mov	r3, r0
 800d008:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d00a:	7dfb      	ldrb	r3, [r7, #23]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d109      	bne.n	800d024 <create_chain+0x1b4>
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d006      	beq.n	800d024 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d016:	69fa      	ldr	r2, [r7, #28]
 800d018:	6839      	ldr	r1, [r7, #0]
 800d01a:	6938      	ldr	r0, [r7, #16]
 800d01c:	f7ff fc40 	bl	800c8a0 <put_fat>
 800d020:	4603      	mov	r3, r0
 800d022:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d024:	7dfb      	ldrb	r3, [r7, #23]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d116      	bne.n	800d058 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	69fa      	ldr	r2, [r7, #28]
 800d02e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	699a      	ldr	r2, [r3, #24]
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	69db      	ldr	r3, [r3, #28]
 800d038:	3b02      	subs	r3, #2
 800d03a:	429a      	cmp	r2, r3
 800d03c:	d804      	bhi.n	800d048 <create_chain+0x1d8>
 800d03e:	693b      	ldr	r3, [r7, #16]
 800d040:	699b      	ldr	r3, [r3, #24]
 800d042:	1e5a      	subs	r2, r3, #1
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800d048:	693b      	ldr	r3, [r7, #16]
 800d04a:	791b      	ldrb	r3, [r3, #4]
 800d04c:	f043 0301 	orr.w	r3, r3, #1
 800d050:	b2da      	uxtb	r2, r3
 800d052:	693b      	ldr	r3, [r7, #16]
 800d054:	711a      	strb	r2, [r3, #4]
 800d056:	e007      	b.n	800d068 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d058:	7dfb      	ldrb	r3, [r7, #23]
 800d05a:	2b01      	cmp	r3, #1
 800d05c:	d102      	bne.n	800d064 <create_chain+0x1f4>
 800d05e:	f04f 33ff 	mov.w	r3, #4294967295
 800d062:	e000      	b.n	800d066 <create_chain+0x1f6>
 800d064:	2301      	movs	r3, #1
 800d066:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d068:	69fb      	ldr	r3, [r7, #28]
}
 800d06a:	4618      	mov	r0, r3
 800d06c:	3720      	adds	r7, #32
 800d06e:	46bd      	mov	sp, r7
 800d070:	bd80      	pop	{r7, pc}

0800d072 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d072:	b5b0      	push	{r4, r5, r7, lr}
 800d074:	b088      	sub	sp, #32
 800d076:	af00      	add	r7, sp, #0
 800d078:	60f8      	str	r0, [r7, #12]
 800d07a:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d088:	3304      	adds	r3, #4
 800d08a:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d08c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d090:	f04f 0000 	mov.w	r0, #0
 800d094:	f04f 0100 	mov.w	r1, #0
 800d098:	0a50      	lsrs	r0, r2, #9
 800d09a:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800d09e:	0a59      	lsrs	r1, r3, #9
 800d0a0:	697b      	ldr	r3, [r7, #20]
 800d0a2:	895b      	ldrh	r3, [r3, #10]
 800d0a4:	b29b      	uxth	r3, r3
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	461c      	mov	r4, r3
 800d0aa:	4615      	mov	r5, r2
 800d0ac:	4622      	mov	r2, r4
 800d0ae:	462b      	mov	r3, r5
 800d0b0:	f7f3 fe0a 	bl	8000cc8 <__aeabi_uldivmod>
 800d0b4:	4602      	mov	r2, r0
 800d0b6:	460b      	mov	r3, r1
 800d0b8:	4613      	mov	r3, r2
 800d0ba:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d0bc:	69bb      	ldr	r3, [r7, #24]
 800d0be:	1d1a      	adds	r2, r3, #4
 800d0c0:	61ba      	str	r2, [r7, #24]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d0c6:	693b      	ldr	r3, [r7, #16]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d101      	bne.n	800d0d0 <clmt_clust+0x5e>
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	e010      	b.n	800d0f2 <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 800d0d0:	69fa      	ldr	r2, [r7, #28]
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	429a      	cmp	r2, r3
 800d0d6:	d307      	bcc.n	800d0e8 <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 800d0d8:	69fa      	ldr	r2, [r7, #28]
 800d0da:	693b      	ldr	r3, [r7, #16]
 800d0dc:	1ad3      	subs	r3, r2, r3
 800d0de:	61fb      	str	r3, [r7, #28]
 800d0e0:	69bb      	ldr	r3, [r7, #24]
 800d0e2:	3304      	adds	r3, #4
 800d0e4:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d0e6:	e7e9      	b.n	800d0bc <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 800d0e8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d0ea:	69bb      	ldr	r3, [r7, #24]
 800d0ec:	681a      	ldr	r2, [r3, #0]
 800d0ee:	69fb      	ldr	r3, [r7, #28]
 800d0f0:	4413      	add	r3, r2
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3720      	adds	r7, #32
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bdb0      	pop	{r4, r5, r7, pc}

0800d0fa <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d0fa:	b580      	push	{r7, lr}
 800d0fc:	b086      	sub	sp, #24
 800d0fe:	af00      	add	r7, sp, #0
 800d100:	6078      	str	r0, [r7, #4]
 800d102:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	2b04      	cmp	r3, #4
 800d110:	d102      	bne.n	800d118 <dir_sdi+0x1e>
 800d112:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d116:	e001      	b.n	800d11c <dir_sdi+0x22>
 800d118:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	429a      	cmp	r2, r3
 800d120:	d904      	bls.n	800d12c <dir_sdi+0x32>
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	f003 031f 	and.w	r3, r3, #31
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d001      	beq.n	800d130 <dir_sdi+0x36>
		return FR_INT_ERR;
 800d12c:	2302      	movs	r3, #2
 800d12e:	e066      	b.n	800d1fe <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	683a      	ldr	r2, [r7, #0]
 800d134:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	689b      	ldr	r3, [r3, #8]
 800d13a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d109      	bne.n	800d156 <dir_sdi+0x5c>
 800d142:	693b      	ldr	r3, [r7, #16]
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	2b02      	cmp	r3, #2
 800d148:	d905      	bls.n	800d156 <dir_sdi+0x5c>
		clst = fs->dirbase;
 800d14a:	693b      	ldr	r3, [r7, #16]
 800d14c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d14e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2200      	movs	r2, #0
 800d154:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d10c      	bne.n	800d176 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	095b      	lsrs	r3, r3, #5
 800d160:	693a      	ldr	r2, [r7, #16]
 800d162:	8912      	ldrh	r2, [r2, #8]
 800d164:	4293      	cmp	r3, r2
 800d166:	d301      	bcc.n	800d16c <dir_sdi+0x72>
 800d168:	2302      	movs	r3, #2
 800d16a:	e048      	b.n	800d1fe <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 800d16c:	693b      	ldr	r3, [r7, #16]
 800d16e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	639a      	str	r2, [r3, #56]	@ 0x38
 800d174:	e029      	b.n	800d1ca <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	895b      	ldrh	r3, [r3, #10]
 800d17a:	025b      	lsls	r3, r3, #9
 800d17c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d17e:	e019      	b.n	800d1b4 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6979      	ldr	r1, [r7, #20]
 800d184:	4618      	mov	r0, r3
 800d186:	f7ff fa71 	bl	800c66c <get_fat>
 800d18a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d192:	d101      	bne.n	800d198 <dir_sdi+0x9e>
 800d194:	2301      	movs	r3, #1
 800d196:	e032      	b.n	800d1fe <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	2b01      	cmp	r3, #1
 800d19c:	d904      	bls.n	800d1a8 <dir_sdi+0xae>
 800d19e:	693b      	ldr	r3, [r7, #16]
 800d1a0:	69db      	ldr	r3, [r3, #28]
 800d1a2:	697a      	ldr	r2, [r7, #20]
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	d301      	bcc.n	800d1ac <dir_sdi+0xb2>
 800d1a8:	2302      	movs	r3, #2
 800d1aa:	e028      	b.n	800d1fe <dir_sdi+0x104>
			ofs -= csz;
 800d1ac:	683a      	ldr	r2, [r7, #0]
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	1ad3      	subs	r3, r2, r3
 800d1b2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d1b4:	683a      	ldr	r2, [r7, #0]
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	429a      	cmp	r2, r3
 800d1ba:	d2e1      	bcs.n	800d180 <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 800d1bc:	6979      	ldr	r1, [r7, #20]
 800d1be:	6938      	ldr	r0, [r7, #16]
 800d1c0:	f7ff fa34 	bl	800c62c <clust2sect>
 800d1c4:	4602      	mov	r2, r0
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	697a      	ldr	r2, [r7, #20]
 800d1ce:	635a      	str	r2, [r3, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d101      	bne.n	800d1dc <dir_sdi+0xe2>
 800d1d8:	2302      	movs	r3, #2
 800d1da:	e010      	b.n	800d1fe <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	0a5b      	lsrs	r3, r3, #9
 800d1e4:	441a      	add	r2, r3
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1f6:	441a      	add	r2, r3
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800d1fc:	2300      	movs	r3, #0
}
 800d1fe:	4618      	mov	r0, r3
 800d200:	3718      	adds	r7, #24
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}

0800d206 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d206:	b580      	push	{r7, lr}
 800d208:	b086      	sub	sp, #24
 800d20a:	af00      	add	r7, sp, #0
 800d20c:	6078      	str	r0, [r7, #4]
 800d20e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d21a:	3320      	adds	r3, #32
 800d21c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d222:	2b00      	cmp	r3, #0
 800d224:	d00b      	beq.n	800d23e <dir_next+0x38>
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	781b      	ldrb	r3, [r3, #0]
 800d22a:	2b04      	cmp	r3, #4
 800d22c:	d102      	bne.n	800d234 <dir_next+0x2e>
 800d22e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d232:	e001      	b.n	800d238 <dir_next+0x32>
 800d234:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800d238:	68bb      	ldr	r3, [r7, #8]
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d801      	bhi.n	800d242 <dir_next+0x3c>
 800d23e:	2304      	movs	r3, #4
 800d240:	e0b2      	b.n	800d3a8 <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d248:	2b00      	cmp	r3, #0
 800d24a:	f040 80a0 	bne.w	800d38e <dir_next+0x188>
		dp->sect++;				/* Next sector */
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d252:	1c5a      	adds	r2, r3, #1
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	639a      	str	r2, [r3, #56]	@ 0x38

		if (!dp->clust) {		/* Static table */
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d10b      	bne.n	800d278 <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d260:	68bb      	ldr	r3, [r7, #8]
 800d262:	095b      	lsrs	r3, r3, #5
 800d264:	68fa      	ldr	r2, [r7, #12]
 800d266:	8912      	ldrh	r2, [r2, #8]
 800d268:	4293      	cmp	r3, r2
 800d26a:	f0c0 8090 	bcc.w	800d38e <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2200      	movs	r2, #0
 800d272:	639a      	str	r2, [r3, #56]	@ 0x38
 800d274:	2304      	movs	r3, #4
 800d276:	e097      	b.n	800d3a8 <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	0a5b      	lsrs	r3, r3, #9
 800d27c:	68fa      	ldr	r2, [r7, #12]
 800d27e:	8952      	ldrh	r2, [r2, #10]
 800d280:	3a01      	subs	r2, #1
 800d282:	4013      	ands	r3, r2
 800d284:	2b00      	cmp	r3, #0
 800d286:	f040 8082 	bne.w	800d38e <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d28a:	687a      	ldr	r2, [r7, #4]
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d290:	4619      	mov	r1, r3
 800d292:	4610      	mov	r0, r2
 800d294:	f7ff f9ea 	bl	800c66c <get_fat>
 800d298:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	2b01      	cmp	r3, #1
 800d29e:	d801      	bhi.n	800d2a4 <dir_next+0x9e>
 800d2a0:	2302      	movs	r3, #2
 800d2a2:	e081      	b.n	800d3a8 <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2aa:	d101      	bne.n	800d2b0 <dir_next+0xaa>
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	e07b      	b.n	800d3a8 <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	69db      	ldr	r3, [r3, #28]
 800d2b4:	697a      	ldr	r2, [r7, #20]
 800d2b6:	429a      	cmp	r2, r3
 800d2b8:	d35f      	bcc.n	800d37a <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d104      	bne.n	800d2ca <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	639a      	str	r2, [r3, #56]	@ 0x38
 800d2c6:	2304      	movs	r3, #4
 800d2c8:	e06e      	b.n	800d3a8 <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d2ca:	687a      	ldr	r2, [r7, #4]
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2d0:	4619      	mov	r1, r3
 800d2d2:	4610      	mov	r0, r2
 800d2d4:	f7ff fdcc 	bl	800ce70 <create_chain>
 800d2d8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d101      	bne.n	800d2e4 <dir_next+0xde>
 800d2e0:	2307      	movs	r3, #7
 800d2e2:	e061      	b.n	800d3a8 <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	2b01      	cmp	r3, #1
 800d2e8:	d101      	bne.n	800d2ee <dir_next+0xe8>
 800d2ea:	2302      	movs	r3, #2
 800d2ec:	e05c      	b.n	800d3a8 <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d2ee:	697b      	ldr	r3, [r7, #20]
 800d2f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2f4:	d101      	bne.n	800d2fa <dir_next+0xf4>
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	e056      	b.n	800d3a8 <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	79db      	ldrb	r3, [r3, #7]
 800d2fe:	f043 0304 	orr.w	r3, r3, #4
 800d302:	b2da      	uxtb	r2, r3
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d308:	68f8      	ldr	r0, [r7, #12]
 800d30a:	f7ff f8af 	bl	800c46c <sync_window>
 800d30e:	4603      	mov	r3, r0
 800d310:	2b00      	cmp	r3, #0
 800d312:	d001      	beq.n	800d318 <dir_next+0x112>
 800d314:	2301      	movs	r3, #1
 800d316:	e047      	b.n	800d3a8 <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	3338      	adds	r3, #56	@ 0x38
 800d31c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d320:	2100      	movs	r1, #0
 800d322:	4618      	mov	r0, r3
 800d324:	f7fe fed8 	bl	800c0d8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d328:	2300      	movs	r3, #0
 800d32a:	613b      	str	r3, [r7, #16]
 800d32c:	6979      	ldr	r1, [r7, #20]
 800d32e:	68f8      	ldr	r0, [r7, #12]
 800d330:	f7ff f97c 	bl	800c62c <clust2sect>
 800d334:	4602      	mov	r2, r0
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	635a      	str	r2, [r3, #52]	@ 0x34
 800d33a:	e012      	b.n	800d362 <dir_next+0x15c>
						fs->wflag = 1;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	2201      	movs	r2, #1
 800d340:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d342:	68f8      	ldr	r0, [r7, #12]
 800d344:	f7ff f892 	bl	800c46c <sync_window>
 800d348:	4603      	mov	r3, r0
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d001      	beq.n	800d352 <dir_next+0x14c>
 800d34e:	2301      	movs	r3, #1
 800d350:	e02a      	b.n	800d3a8 <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d352:	693b      	ldr	r3, [r7, #16]
 800d354:	3301      	adds	r3, #1
 800d356:	613b      	str	r3, [r7, #16]
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d35c:	1c5a      	adds	r2, r3, #1
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	635a      	str	r2, [r3, #52]	@ 0x34
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	895b      	ldrh	r3, [r3, #10]
 800d366:	461a      	mov	r2, r3
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	4293      	cmp	r3, r2
 800d36c:	d3e6      	bcc.n	800d33c <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d372:	693b      	ldr	r3, [r7, #16]
 800d374:	1ad2      	subs	r2, r2, r3
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	697a      	ldr	r2, [r7, #20]
 800d37e:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 800d380:	6979      	ldr	r1, [r7, #20]
 800d382:	68f8      	ldr	r0, [r7, #12]
 800d384:	f7ff f952 	bl	800c62c <clust2sect>
 800d388:	4602      	mov	r2, r0
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	68ba      	ldr	r2, [r7, #8]
 800d392:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3a0:	441a      	add	r2, r3
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800d3a6:	2300      	movs	r3, #0
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3718      	adds	r7, #24
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}

0800d3b0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b086      	sub	sp, #24
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
 800d3b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d3c0:	2100      	movs	r1, #0
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f7ff fe99 	bl	800d0fa <dir_sdi>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d3cc:	7dfb      	ldrb	r3, [r7, #23]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d140      	bne.n	800d454 <dir_alloc+0xa4>
		n = 0;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3da:	4619      	mov	r1, r3
 800d3dc:	68f8      	ldr	r0, [r7, #12]
 800d3de:	f7ff f889 	bl	800c4f4 <move_window>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d3e6:	7dfb      	ldrb	r3, [r7, #23]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d132      	bne.n	800d452 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	781b      	ldrb	r3, [r3, #0]
 800d3f0:	2b04      	cmp	r3, #4
 800d3f2:	d108      	bne.n	800d406 <dir_alloc+0x56>
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3f8:	781b      	ldrb	r3, [r3, #0]
 800d3fa:	b25b      	sxtb	r3, r3
 800d3fc:	43db      	mvns	r3, r3
 800d3fe:	b2db      	uxtb	r3, r3
 800d400:	09db      	lsrs	r3, r3, #7
 800d402:	b2db      	uxtb	r3, r3
 800d404:	e00f      	b.n	800d426 <dir_alloc+0x76>
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	2be5      	cmp	r3, #229	@ 0xe5
 800d40e:	d004      	beq.n	800d41a <dir_alloc+0x6a>
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d101      	bne.n	800d41e <dir_alloc+0x6e>
 800d41a:	2301      	movs	r3, #1
 800d41c:	e000      	b.n	800d420 <dir_alloc+0x70>
 800d41e:	2300      	movs	r3, #0
 800d420:	f003 0301 	and.w	r3, r3, #1
 800d424:	b2db      	uxtb	r3, r3
 800d426:	2b00      	cmp	r3, #0
 800d428:	d007      	beq.n	800d43a <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	3301      	adds	r3, #1
 800d42e:	613b      	str	r3, [r7, #16]
 800d430:	693a      	ldr	r2, [r7, #16]
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	429a      	cmp	r2, r3
 800d436:	d102      	bne.n	800d43e <dir_alloc+0x8e>
 800d438:	e00c      	b.n	800d454 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d43a:	2300      	movs	r3, #0
 800d43c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d43e:	2101      	movs	r1, #1
 800d440:	6878      	ldr	r0, [r7, #4]
 800d442:	f7ff fee0 	bl	800d206 <dir_next>
 800d446:	4603      	mov	r3, r0
 800d448:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d44a:	7dfb      	ldrb	r3, [r7, #23]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d0c2      	beq.n	800d3d6 <dir_alloc+0x26>
 800d450:	e000      	b.n	800d454 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800d452:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d454:	7dfb      	ldrb	r3, [r7, #23]
 800d456:	2b04      	cmp	r3, #4
 800d458:	d101      	bne.n	800d45e <dir_alloc+0xae>
 800d45a:	2307      	movs	r3, #7
 800d45c:	75fb      	strb	r3, [r7, #23]
	return res;
 800d45e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d460:	4618      	mov	r0, r3
 800d462:	3718      	adds	r7, #24
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}

0800d468 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b084      	sub	sp, #16
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	331a      	adds	r3, #26
 800d476:	4618      	mov	r0, r3
 800d478:	f7fe fc28 	bl	800bccc <ld_word>
 800d47c:	4603      	mov	r3, r0
 800d47e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	781b      	ldrb	r3, [r3, #0]
 800d484:	2b03      	cmp	r3, #3
 800d486:	d109      	bne.n	800d49c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	3314      	adds	r3, #20
 800d48c:	4618      	mov	r0, r3
 800d48e:	f7fe fc1d 	bl	800bccc <ld_word>
 800d492:	4603      	mov	r3, r0
 800d494:	041b      	lsls	r3, r3, #16
 800d496:	68fa      	ldr	r2, [r7, #12]
 800d498:	4313      	orrs	r3, r2
 800d49a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d49c:	68fb      	ldr	r3, [r7, #12]
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3710      	adds	r7, #16
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}

0800d4a6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d4a6:	b580      	push	{r7, lr}
 800d4a8:	b084      	sub	sp, #16
 800d4aa:	af00      	add	r7, sp, #0
 800d4ac:	60f8      	str	r0, [r7, #12]
 800d4ae:	60b9      	str	r1, [r7, #8]
 800d4b0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	331a      	adds	r3, #26
 800d4b6:	687a      	ldr	r2, [r7, #4]
 800d4b8:	b292      	uxth	r2, r2
 800d4ba:	4611      	mov	r1, r2
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f7fe fd1b 	bl	800bef8 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	781b      	ldrb	r3, [r3, #0]
 800d4c6:	2b03      	cmp	r3, #3
 800d4c8:	d109      	bne.n	800d4de <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	f103 0214 	add.w	r2, r3, #20
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	0c1b      	lsrs	r3, r3, #16
 800d4d4:	b29b      	uxth	r3, r3
 800d4d6:	4619      	mov	r1, r3
 800d4d8:	4610      	mov	r0, r2
 800d4da:	f7fe fd0d 	bl	800bef8 <st_word>
	}
}
 800d4de:	bf00      	nop
 800d4e0:	3710      	adds	r7, #16
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd80      	pop	{r7, pc}
	...

0800d4e8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d4e8:	b590      	push	{r4, r7, lr}
 800d4ea:	b087      	sub	sp, #28
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
 800d4f0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	331a      	adds	r3, #26
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f7fe fbe8 	bl	800bccc <ld_word>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d001      	beq.n	800d506 <cmp_lfn+0x1e>
 800d502:	2300      	movs	r3, #0
 800d504:	e059      	b.n	800d5ba <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	781b      	ldrb	r3, [r3, #0]
 800d50a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d50e:	1e5a      	subs	r2, r3, #1
 800d510:	4613      	mov	r3, r2
 800d512:	005b      	lsls	r3, r3, #1
 800d514:	4413      	add	r3, r2
 800d516:	009b      	lsls	r3, r3, #2
 800d518:	4413      	add	r3, r2
 800d51a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d51c:	2301      	movs	r3, #1
 800d51e:	81fb      	strh	r3, [r7, #14]
 800d520:	2300      	movs	r3, #0
 800d522:	613b      	str	r3, [r7, #16]
 800d524:	e033      	b.n	800d58e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d526:	4a27      	ldr	r2, [pc, #156]	@ (800d5c4 <cmp_lfn+0xdc>)
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	4413      	add	r3, r2
 800d52c:	781b      	ldrb	r3, [r3, #0]
 800d52e:	461a      	mov	r2, r3
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	4413      	add	r3, r2
 800d534:	4618      	mov	r0, r3
 800d536:	f7fe fbc9 	bl	800bccc <ld_word>
 800d53a:	4603      	mov	r3, r0
 800d53c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d53e:	89fb      	ldrh	r3, [r7, #14]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d01a      	beq.n	800d57a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d544:	697b      	ldr	r3, [r7, #20]
 800d546:	2bfe      	cmp	r3, #254	@ 0xfe
 800d548:	d812      	bhi.n	800d570 <cmp_lfn+0x88>
 800d54a:	89bb      	ldrh	r3, [r7, #12]
 800d54c:	4618      	mov	r0, r3
 800d54e:	f002 fe17 	bl	8010180 <ff_wtoupper>
 800d552:	4603      	mov	r3, r0
 800d554:	461c      	mov	r4, r3
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	1c5a      	adds	r2, r3, #1
 800d55a:	617a      	str	r2, [r7, #20]
 800d55c:	005b      	lsls	r3, r3, #1
 800d55e:	687a      	ldr	r2, [r7, #4]
 800d560:	4413      	add	r3, r2
 800d562:	881b      	ldrh	r3, [r3, #0]
 800d564:	4618      	mov	r0, r3
 800d566:	f002 fe0b 	bl	8010180 <ff_wtoupper>
 800d56a:	4603      	mov	r3, r0
 800d56c:	429c      	cmp	r4, r3
 800d56e:	d001      	beq.n	800d574 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d570:	2300      	movs	r3, #0
 800d572:	e022      	b.n	800d5ba <cmp_lfn+0xd2>
			}
			wc = uc;
 800d574:	89bb      	ldrh	r3, [r7, #12]
 800d576:	81fb      	strh	r3, [r7, #14]
 800d578:	e006      	b.n	800d588 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d57a:	89bb      	ldrh	r3, [r7, #12]
 800d57c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d580:	4293      	cmp	r3, r2
 800d582:	d001      	beq.n	800d588 <cmp_lfn+0xa0>
 800d584:	2300      	movs	r3, #0
 800d586:	e018      	b.n	800d5ba <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d588:	693b      	ldr	r3, [r7, #16]
 800d58a:	3301      	adds	r3, #1
 800d58c:	613b      	str	r3, [r7, #16]
 800d58e:	693b      	ldr	r3, [r7, #16]
 800d590:	2b0c      	cmp	r3, #12
 800d592:	d9c8      	bls.n	800d526 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	781b      	ldrb	r3, [r3, #0]
 800d598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d00b      	beq.n	800d5b8 <cmp_lfn+0xd0>
 800d5a0:	89fb      	ldrh	r3, [r7, #14]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d008      	beq.n	800d5b8 <cmp_lfn+0xd0>
 800d5a6:	697b      	ldr	r3, [r7, #20]
 800d5a8:	005b      	lsls	r3, r3, #1
 800d5aa:	687a      	ldr	r2, [r7, #4]
 800d5ac:	4413      	add	r3, r2
 800d5ae:	881b      	ldrh	r3, [r3, #0]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d001      	beq.n	800d5b8 <cmp_lfn+0xd0>
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	e000      	b.n	800d5ba <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d5b8:	2301      	movs	r3, #1
}
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	371c      	adds	r7, #28
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd90      	pop	{r4, r7, pc}
 800d5c2:	bf00      	nop
 800d5c4:	080162b8 	.word	0x080162b8

0800d5c8 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b086      	sub	sp, #24
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	331a      	adds	r3, #26
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f7fe fb78 	bl	800bccc <ld_word>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d001      	beq.n	800d5e6 <pick_lfn+0x1e>
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	e04d      	b.n	800d682 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	781b      	ldrb	r3, [r3, #0]
 800d5ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d5ee:	1e5a      	subs	r2, r3, #1
 800d5f0:	4613      	mov	r3, r2
 800d5f2:	005b      	lsls	r3, r3, #1
 800d5f4:	4413      	add	r3, r2
 800d5f6:	009b      	lsls	r3, r3, #2
 800d5f8:	4413      	add	r3, r2
 800d5fa:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	81fb      	strh	r3, [r7, #14]
 800d600:	2300      	movs	r3, #0
 800d602:	613b      	str	r3, [r7, #16]
 800d604:	e028      	b.n	800d658 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d606:	4a21      	ldr	r2, [pc, #132]	@ (800d68c <pick_lfn+0xc4>)
 800d608:	693b      	ldr	r3, [r7, #16]
 800d60a:	4413      	add	r3, r2
 800d60c:	781b      	ldrb	r3, [r3, #0]
 800d60e:	461a      	mov	r2, r3
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	4413      	add	r3, r2
 800d614:	4618      	mov	r0, r3
 800d616:	f7fe fb59 	bl	800bccc <ld_word>
 800d61a:	4603      	mov	r3, r0
 800d61c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d61e:	89fb      	ldrh	r3, [r7, #14]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d00f      	beq.n	800d644 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	2bfe      	cmp	r3, #254	@ 0xfe
 800d628:	d901      	bls.n	800d62e <pick_lfn+0x66>
 800d62a:	2300      	movs	r3, #0
 800d62c:	e029      	b.n	800d682 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d62e:	89bb      	ldrh	r3, [r7, #12]
 800d630:	81fb      	strh	r3, [r7, #14]
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	1c5a      	adds	r2, r3, #1
 800d636:	617a      	str	r2, [r7, #20]
 800d638:	005b      	lsls	r3, r3, #1
 800d63a:	687a      	ldr	r2, [r7, #4]
 800d63c:	4413      	add	r3, r2
 800d63e:	89fa      	ldrh	r2, [r7, #14]
 800d640:	801a      	strh	r2, [r3, #0]
 800d642:	e006      	b.n	800d652 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d644:	89bb      	ldrh	r3, [r7, #12]
 800d646:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d64a:	4293      	cmp	r3, r2
 800d64c:	d001      	beq.n	800d652 <pick_lfn+0x8a>
 800d64e:	2300      	movs	r3, #0
 800d650:	e017      	b.n	800d682 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	3301      	adds	r3, #1
 800d656:	613b      	str	r3, [r7, #16]
 800d658:	693b      	ldr	r3, [r7, #16]
 800d65a:	2b0c      	cmp	r3, #12
 800d65c:	d9d3      	bls.n	800d606 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	781b      	ldrb	r3, [r3, #0]
 800d662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d666:	2b00      	cmp	r3, #0
 800d668:	d00a      	beq.n	800d680 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	2bfe      	cmp	r3, #254	@ 0xfe
 800d66e:	d901      	bls.n	800d674 <pick_lfn+0xac>
 800d670:	2300      	movs	r3, #0
 800d672:	e006      	b.n	800d682 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800d674:	697b      	ldr	r3, [r7, #20]
 800d676:	005b      	lsls	r3, r3, #1
 800d678:	687a      	ldr	r2, [r7, #4]
 800d67a:	4413      	add	r3, r2
 800d67c:	2200      	movs	r2, #0
 800d67e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800d680:	2301      	movs	r3, #1
}
 800d682:	4618      	mov	r0, r3
 800d684:	3718      	adds	r7, #24
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}
 800d68a:	bf00      	nop
 800d68c:	080162b8 	.word	0x080162b8

0800d690 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b088      	sub	sp, #32
 800d694:	af00      	add	r7, sp, #0
 800d696:	60f8      	str	r0, [r7, #12]
 800d698:	60b9      	str	r1, [r7, #8]
 800d69a:	4611      	mov	r1, r2
 800d69c:	461a      	mov	r2, r3
 800d69e:	460b      	mov	r3, r1
 800d6a0:	71fb      	strb	r3, [r7, #7]
 800d6a2:	4613      	mov	r3, r2
 800d6a4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d6a6:	68bb      	ldr	r3, [r7, #8]
 800d6a8:	330d      	adds	r3, #13
 800d6aa:	79ba      	ldrb	r2, [r7, #6]
 800d6ac:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	330b      	adds	r3, #11
 800d6b2:	220f      	movs	r2, #15
 800d6b4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	330c      	adds	r3, #12
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	331a      	adds	r3, #26
 800d6c2:	2100      	movs	r1, #0
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f7fe fc17 	bl	800bef8 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d6ca:	79fb      	ldrb	r3, [r7, #7]
 800d6cc:	1e5a      	subs	r2, r3, #1
 800d6ce:	4613      	mov	r3, r2
 800d6d0:	005b      	lsls	r3, r3, #1
 800d6d2:	4413      	add	r3, r2
 800d6d4:	009b      	lsls	r3, r3, #2
 800d6d6:	4413      	add	r3, r2
 800d6d8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	82fb      	strh	r3, [r7, #22]
 800d6de:	2300      	movs	r3, #0
 800d6e0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d6e2:	8afb      	ldrh	r3, [r7, #22]
 800d6e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d6e8:	4293      	cmp	r3, r2
 800d6ea:	d007      	beq.n	800d6fc <put_lfn+0x6c>
 800d6ec:	69fb      	ldr	r3, [r7, #28]
 800d6ee:	1c5a      	adds	r2, r3, #1
 800d6f0:	61fa      	str	r2, [r7, #28]
 800d6f2:	005b      	lsls	r3, r3, #1
 800d6f4:	68fa      	ldr	r2, [r7, #12]
 800d6f6:	4413      	add	r3, r2
 800d6f8:	881b      	ldrh	r3, [r3, #0]
 800d6fa:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d6fc:	4a17      	ldr	r2, [pc, #92]	@ (800d75c <put_lfn+0xcc>)
 800d6fe:	69bb      	ldr	r3, [r7, #24]
 800d700:	4413      	add	r3, r2
 800d702:	781b      	ldrb	r3, [r3, #0]
 800d704:	461a      	mov	r2, r3
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	4413      	add	r3, r2
 800d70a:	8afa      	ldrh	r2, [r7, #22]
 800d70c:	4611      	mov	r1, r2
 800d70e:	4618      	mov	r0, r3
 800d710:	f7fe fbf2 	bl	800bef8 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d714:	8afb      	ldrh	r3, [r7, #22]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d102      	bne.n	800d720 <put_lfn+0x90>
 800d71a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d71e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d720:	69bb      	ldr	r3, [r7, #24]
 800d722:	3301      	adds	r3, #1
 800d724:	61bb      	str	r3, [r7, #24]
 800d726:	69bb      	ldr	r3, [r7, #24]
 800d728:	2b0c      	cmp	r3, #12
 800d72a:	d9da      	bls.n	800d6e2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d72c:	8afb      	ldrh	r3, [r7, #22]
 800d72e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d732:	4293      	cmp	r3, r2
 800d734:	d006      	beq.n	800d744 <put_lfn+0xb4>
 800d736:	69fb      	ldr	r3, [r7, #28]
 800d738:	005b      	lsls	r3, r3, #1
 800d73a:	68fa      	ldr	r2, [r7, #12]
 800d73c:	4413      	add	r3, r2
 800d73e:	881b      	ldrh	r3, [r3, #0]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d103      	bne.n	800d74c <put_lfn+0xbc>
 800d744:	79fb      	ldrb	r3, [r7, #7]
 800d746:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d74a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	79fa      	ldrb	r2, [r7, #7]
 800d750:	701a      	strb	r2, [r3, #0]
}
 800d752:	bf00      	nop
 800d754:	3720      	adds	r7, #32
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}
 800d75a:	bf00      	nop
 800d75c:	080162b8 	.word	0x080162b8

0800d760 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b08c      	sub	sp, #48	@ 0x30
 800d764:	af00      	add	r7, sp, #0
 800d766:	60f8      	str	r0, [r7, #12]
 800d768:	60b9      	str	r1, [r7, #8]
 800d76a:	607a      	str	r2, [r7, #4]
 800d76c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d76e:	220b      	movs	r2, #11
 800d770:	68b9      	ldr	r1, [r7, #8]
 800d772:	68f8      	ldr	r0, [r7, #12]
 800d774:	f7fe fc8f 	bl	800c096 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	2b05      	cmp	r3, #5
 800d77c:	d929      	bls.n	800d7d2 <gen_numname+0x72>
		sr = seq;
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d782:	e020      	b.n	800d7c6 <gen_numname+0x66>
			wc = *lfn++;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	1c9a      	adds	r2, r3, #2
 800d788:	607a      	str	r2, [r7, #4]
 800d78a:	881b      	ldrh	r3, [r3, #0]
 800d78c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800d78e:	2300      	movs	r3, #0
 800d790:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d792:	e015      	b.n	800d7c0 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800d794:	69fb      	ldr	r3, [r7, #28]
 800d796:	005a      	lsls	r2, r3, #1
 800d798:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d79a:	f003 0301 	and.w	r3, r3, #1
 800d79e:	4413      	add	r3, r2
 800d7a0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d7a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d7a4:	085b      	lsrs	r3, r3, #1
 800d7a6:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d7a8:	69fb      	ldr	r3, [r7, #28]
 800d7aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d003      	beq.n	800d7ba <gen_numname+0x5a>
 800d7b2:	69fa      	ldr	r2, [r7, #28]
 800d7b4:	4b30      	ldr	r3, [pc, #192]	@ (800d878 <gen_numname+0x118>)
 800d7b6:	4053      	eors	r3, r2
 800d7b8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d7ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7bc:	3301      	adds	r3, #1
 800d7be:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d7c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7c2:	2b0f      	cmp	r3, #15
 800d7c4:	d9e6      	bls.n	800d794 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	881b      	ldrh	r3, [r3, #0]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d1da      	bne.n	800d784 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d7ce:	69fb      	ldr	r3, [r7, #28]
 800d7d0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d7d2:	2307      	movs	r3, #7
 800d7d4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	b2db      	uxtb	r3, r3
 800d7da:	f003 030f 	and.w	r3, r3, #15
 800d7de:	b2db      	uxtb	r3, r3
 800d7e0:	3330      	adds	r3, #48	@ 0x30
 800d7e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800d7e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d7ea:	2b39      	cmp	r3, #57	@ 0x39
 800d7ec:	d904      	bls.n	800d7f8 <gen_numname+0x98>
 800d7ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d7f2:	3307      	adds	r3, #7
 800d7f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800d7f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7fa:	1e5a      	subs	r2, r3, #1
 800d7fc:	62ba      	str	r2, [r7, #40]	@ 0x28
 800d7fe:	3330      	adds	r3, #48	@ 0x30
 800d800:	443b      	add	r3, r7
 800d802:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800d806:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	091b      	lsrs	r3, r3, #4
 800d80e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d1df      	bne.n	800d7d6 <gen_numname+0x76>
	ns[i] = '~';
 800d816:	f107 0214 	add.w	r2, r7, #20
 800d81a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d81c:	4413      	add	r3, r2
 800d81e:	227e      	movs	r2, #126	@ 0x7e
 800d820:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d822:	2300      	movs	r3, #0
 800d824:	627b      	str	r3, [r7, #36]	@ 0x24
 800d826:	e002      	b.n	800d82e <gen_numname+0xce>
 800d828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d82a:	3301      	adds	r3, #1
 800d82c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d82e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d832:	429a      	cmp	r2, r3
 800d834:	d205      	bcs.n	800d842 <gen_numname+0xe2>
 800d836:	68fa      	ldr	r2, [r7, #12]
 800d838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d83a:	4413      	add	r3, r2
 800d83c:	781b      	ldrb	r3, [r3, #0]
 800d83e:	2b20      	cmp	r3, #32
 800d840:	d1f2      	bne.n	800d828 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d844:	2b07      	cmp	r3, #7
 800d846:	d807      	bhi.n	800d858 <gen_numname+0xf8>
 800d848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d84a:	1c5a      	adds	r2, r3, #1
 800d84c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800d84e:	3330      	adds	r3, #48	@ 0x30
 800d850:	443b      	add	r3, r7
 800d852:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d856:	e000      	b.n	800d85a <gen_numname+0xfa>
 800d858:	2120      	movs	r1, #32
 800d85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d85c:	1c5a      	adds	r2, r3, #1
 800d85e:	627a      	str	r2, [r7, #36]	@ 0x24
 800d860:	68fa      	ldr	r2, [r7, #12]
 800d862:	4413      	add	r3, r2
 800d864:	460a      	mov	r2, r1
 800d866:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d86a:	2b07      	cmp	r3, #7
 800d86c:	d9e9      	bls.n	800d842 <gen_numname+0xe2>
}
 800d86e:	bf00      	nop
 800d870:	bf00      	nop
 800d872:	3730      	adds	r7, #48	@ 0x30
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}
 800d878:	00011021 	.word	0x00011021

0800d87c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d87c:	b480      	push	{r7}
 800d87e:	b085      	sub	sp, #20
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d884:	2300      	movs	r3, #0
 800d886:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d888:	230b      	movs	r3, #11
 800d88a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d88c:	7bfb      	ldrb	r3, [r7, #15]
 800d88e:	b2da      	uxtb	r2, r3
 800d890:	0852      	lsrs	r2, r2, #1
 800d892:	01db      	lsls	r3, r3, #7
 800d894:	4313      	orrs	r3, r2
 800d896:	b2da      	uxtb	r2, r3
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	1c59      	adds	r1, r3, #1
 800d89c:	6079      	str	r1, [r7, #4]
 800d89e:	781b      	ldrb	r3, [r3, #0]
 800d8a0:	4413      	add	r3, r2
 800d8a2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	3b01      	subs	r3, #1
 800d8a8:	60bb      	str	r3, [r7, #8]
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d1ed      	bne.n	800d88c <sum_sfn+0x10>
	return sum;
 800d8b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3714      	adds	r7, #20
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8bc:	4770      	bx	lr

0800d8be <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800d8be:	b480      	push	{r7}
 800d8c0:	b087      	sub	sp, #28
 800d8c2:	af00      	add	r7, sp, #0
 800d8c4:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	781b      	ldrb	r3, [r3, #0]
 800d8cc:	3301      	adds	r3, #1
 800d8ce:	015b      	lsls	r3, r3, #5
 800d8d0:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	827b      	strh	r3, [r7, #18]
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	617b      	str	r3, [r7, #20]
 800d8da:	e017      	b.n	800d90c <xdir_sum+0x4e>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800d8dc:	697b      	ldr	r3, [r7, #20]
 800d8de:	2b02      	cmp	r3, #2
 800d8e0:	d103      	bne.n	800d8ea <xdir_sum+0x2c>
			i++;
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	3301      	adds	r3, #1
 800d8e6:	617b      	str	r3, [r7, #20]
 800d8e8:	e00d      	b.n	800d906 <xdir_sum+0x48>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800d8ea:	8a7b      	ldrh	r3, [r7, #18]
 800d8ec:	03db      	lsls	r3, r3, #15
 800d8ee:	b29a      	uxth	r2, r3
 800d8f0:	8a7b      	ldrh	r3, [r7, #18]
 800d8f2:	085b      	lsrs	r3, r3, #1
 800d8f4:	b29b      	uxth	r3, r3
 800d8f6:	4413      	add	r3, r2
 800d8f8:	b29b      	uxth	r3, r3
 800d8fa:	6879      	ldr	r1, [r7, #4]
 800d8fc:	697a      	ldr	r2, [r7, #20]
 800d8fe:	440a      	add	r2, r1
 800d900:	7812      	ldrb	r2, [r2, #0]
 800d902:	4413      	add	r3, r2
 800d904:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	3301      	adds	r3, #1
 800d90a:	617b      	str	r3, [r7, #20]
 800d90c:	697a      	ldr	r2, [r7, #20]
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	429a      	cmp	r2, r3
 800d912:	d3e3      	bcc.n	800d8dc <xdir_sum+0x1e>
		}
	}
	return sum;
 800d914:	8a7b      	ldrh	r3, [r7, #18]
}
 800d916:	4618      	mov	r0, r3
 800d918:	371c      	adds	r7, #28
 800d91a:	46bd      	mov	sp, r7
 800d91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d920:	4770      	bx	lr

0800d922 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800d922:	b580      	push	{r7, lr}
 800d924:	b084      	sub	sp, #16
 800d926:	af00      	add	r7, sp, #0
 800d928:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800d92a:	2300      	movs	r3, #0
 800d92c:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800d92e:	e01f      	b.n	800d970 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800d930:	89bb      	ldrh	r3, [r7, #12]
 800d932:	4618      	mov	r0, r3
 800d934:	f002 fc24 	bl	8010180 <ff_wtoupper>
 800d938:	4603      	mov	r3, r0
 800d93a:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800d93c:	89fb      	ldrh	r3, [r7, #14]
 800d93e:	03db      	lsls	r3, r3, #15
 800d940:	b29a      	uxth	r2, r3
 800d942:	89fb      	ldrh	r3, [r7, #14]
 800d944:	085b      	lsrs	r3, r3, #1
 800d946:	b29b      	uxth	r3, r3
 800d948:	4413      	add	r3, r2
 800d94a:	b29a      	uxth	r2, r3
 800d94c:	89bb      	ldrh	r3, [r7, #12]
 800d94e:	b2db      	uxtb	r3, r3
 800d950:	b29b      	uxth	r3, r3
 800d952:	4413      	add	r3, r2
 800d954:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800d956:	89fb      	ldrh	r3, [r7, #14]
 800d958:	03db      	lsls	r3, r3, #15
 800d95a:	b29a      	uxth	r2, r3
 800d95c:	89fb      	ldrh	r3, [r7, #14]
 800d95e:	085b      	lsrs	r3, r3, #1
 800d960:	b29b      	uxth	r3, r3
 800d962:	4413      	add	r3, r2
 800d964:	b29a      	uxth	r2, r3
 800d966:	89bb      	ldrh	r3, [r7, #12]
 800d968:	0a1b      	lsrs	r3, r3, #8
 800d96a:	b29b      	uxth	r3, r3
 800d96c:	4413      	add	r3, r2
 800d96e:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	1c9a      	adds	r2, r3, #2
 800d974:	607a      	str	r2, [r7, #4]
 800d976:	881b      	ldrh	r3, [r3, #0]
 800d978:	81bb      	strh	r3, [r7, #12]
 800d97a:	89bb      	ldrh	r3, [r7, #12]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d1d7      	bne.n	800d930 <xname_sum+0xe>
	}
	return sum;
 800d980:	89fb      	ldrh	r3, [r7, #14]
}
 800d982:	4618      	mov	r0, r3
 800d984:	3710      	adds	r7, #16
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}
	...

0800d98c <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800d98c:	b590      	push	{r4, r7, lr}
 800d98e:	b087      	sub	sp, #28
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	691b      	ldr	r3, [r3, #16]
 800d99a:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681a      	ldr	r2, [r3, #0]
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9a4:	4619      	mov	r1, r3
 800d9a6:	4610      	mov	r0, r2
 800d9a8:	f7fe fda4 	bl	800c4f4 <move_window>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800d9b0:	7bfb      	ldrb	r3, [r7, #15]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d001      	beq.n	800d9ba <load_xdir+0x2e>
 800d9b6:	7bfb      	ldrb	r3, [r7, #15]
 800d9b8:	e09f      	b.n	800dafa <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d9be:	781b      	ldrb	r3, [r3, #0]
 800d9c0:	2b85      	cmp	r3, #133	@ 0x85
 800d9c2:	d001      	beq.n	800d9c8 <load_xdir+0x3c>
 800d9c4:	2302      	movs	r3, #2
 800d9c6:	e098      	b.n	800dafa <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d9cc:	2220      	movs	r2, #32
 800d9ce:	4619      	mov	r1, r3
 800d9d0:	6938      	ldr	r0, [r7, #16]
 800d9d2:	f7fe fb60 	bl	800c096 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800d9d6:	693b      	ldr	r3, [r7, #16]
 800d9d8:	3301      	adds	r3, #1
 800d9da:	781b      	ldrb	r3, [r3, #0]
 800d9dc:	3301      	adds	r3, #1
 800d9de:	015b      	lsls	r3, r3, #5
 800d9e0:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	2b5f      	cmp	r3, #95	@ 0x5f
 800d9e6:	d903      	bls.n	800d9f0 <load_xdir+0x64>
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800d9ee:	d901      	bls.n	800d9f4 <load_xdir+0x68>
 800d9f0:	2302      	movs	r3, #2
 800d9f2:	e082      	b.n	800dafa <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800d9f4:	2100      	movs	r1, #0
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f7ff fc05 	bl	800d206 <dir_next>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800da00:	7bfb      	ldrb	r3, [r7, #15]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d001      	beq.n	800da0a <load_xdir+0x7e>
 800da06:	7bfb      	ldrb	r3, [r7, #15]
 800da08:	e077      	b.n	800dafa <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681a      	ldr	r2, [r3, #0]
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da12:	4619      	mov	r1, r3
 800da14:	4610      	mov	r0, r2
 800da16:	f7fe fd6d 	bl	800c4f4 <move_window>
 800da1a:	4603      	mov	r3, r0
 800da1c:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800da1e:	7bfb      	ldrb	r3, [r7, #15]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d001      	beq.n	800da28 <load_xdir+0x9c>
 800da24:	7bfb      	ldrb	r3, [r7, #15]
 800da26:	e068      	b.n	800dafa <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da2c:	781b      	ldrb	r3, [r3, #0]
 800da2e:	2bc0      	cmp	r3, #192	@ 0xc0
 800da30:	d001      	beq.n	800da36 <load_xdir+0xaa>
 800da32:	2302      	movs	r3, #2
 800da34:	e061      	b.n	800dafa <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	f103 0020 	add.w	r0, r3, #32
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da40:	2220      	movs	r2, #32
 800da42:	4619      	mov	r1, r3
 800da44:	f7fe fb27 	bl	800c096 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	3323      	adds	r3, #35	@ 0x23
 800da4c:	781b      	ldrb	r3, [r3, #0]
 800da4e:	332c      	adds	r3, #44	@ 0x2c
 800da50:	4a2c      	ldr	r2, [pc, #176]	@ (800db04 <load_xdir+0x178>)
 800da52:	fba2 2303 	umull	r2, r3, r2, r3
 800da56:	08db      	lsrs	r3, r3, #3
 800da58:	015b      	lsls	r3, r3, #5
 800da5a:	68ba      	ldr	r2, [r7, #8]
 800da5c:	429a      	cmp	r2, r3
 800da5e:	d201      	bcs.n	800da64 <load_xdir+0xd8>
 800da60:	2302      	movs	r3, #2
 800da62:	e04a      	b.n	800dafa <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800da64:	2340      	movs	r3, #64	@ 0x40
 800da66:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800da68:	2100      	movs	r1, #0
 800da6a:	6878      	ldr	r0, [r7, #4]
 800da6c:	f7ff fbcb 	bl	800d206 <dir_next>
 800da70:	4603      	mov	r3, r0
 800da72:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800da74:	7bfb      	ldrb	r3, [r7, #15]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d001      	beq.n	800da7e <load_xdir+0xf2>
 800da7a:	7bfb      	ldrb	r3, [r7, #15]
 800da7c:	e03d      	b.n	800dafa <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681a      	ldr	r2, [r3, #0]
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da86:	4619      	mov	r1, r3
 800da88:	4610      	mov	r0, r2
 800da8a:	f7fe fd33 	bl	800c4f4 <move_window>
 800da8e:	4603      	mov	r3, r0
 800da90:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800da92:	7bfb      	ldrb	r3, [r7, #15]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d001      	beq.n	800da9c <load_xdir+0x110>
 800da98:	7bfb      	ldrb	r3, [r7, #15]
 800da9a:	e02e      	b.n	800dafa <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800daa0:	781b      	ldrb	r3, [r3, #0]
 800daa2:	2bc1      	cmp	r3, #193	@ 0xc1
 800daa4:	d001      	beq.n	800daaa <load_xdir+0x11e>
 800daa6:	2302      	movs	r3, #2
 800daa8:	e027      	b.n	800dafa <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800dab0:	d208      	bcs.n	800dac4 <load_xdir+0x138>
 800dab2:	693a      	ldr	r2, [r7, #16]
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	18d0      	adds	r0, r2, r3
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dabc:	2220      	movs	r2, #32
 800dabe:	4619      	mov	r1, r3
 800dac0:	f7fe fae9 	bl	800c096 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	3320      	adds	r3, #32
 800dac8:	617b      	str	r3, [r7, #20]
 800daca:	697a      	ldr	r2, [r7, #20]
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	429a      	cmp	r2, r3
 800dad0:	d3ca      	bcc.n	800da68 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800dad8:	d80e      	bhi.n	800daf8 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800dada:	6938      	ldr	r0, [r7, #16]
 800dadc:	f7ff feef 	bl	800d8be <xdir_sum>
 800dae0:	4603      	mov	r3, r0
 800dae2:	461c      	mov	r4, r3
 800dae4:	693b      	ldr	r3, [r7, #16]
 800dae6:	3302      	adds	r3, #2
 800dae8:	4618      	mov	r0, r3
 800daea:	f7fe f8ef 	bl	800bccc <ld_word>
 800daee:	4603      	mov	r3, r0
 800daf0:	429c      	cmp	r4, r3
 800daf2:	d001      	beq.n	800daf8 <load_xdir+0x16c>
 800daf4:	2302      	movs	r3, #2
 800daf6:	e000      	b.n	800dafa <load_xdir+0x16e>
	}
	return FR_OK;
 800daf8:	2300      	movs	r3, #0
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	371c      	adds	r7, #28
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd90      	pop	{r4, r7, pc}
 800db02:	bf00      	nop
 800db04:	88888889 	.word	0x88888889

0800db08 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800db08:	b5b0      	push	{r4, r5, r7, lr}
 800db0a:	b084      	sub	sp, #16
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
 800db10:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800db12:	6839      	ldr	r1, [r7, #0]
 800db14:	6808      	ldr	r0, [r1, #0]
 800db16:	6879      	ldr	r1, [r7, #4]
 800db18:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800db1a:	6839      	ldr	r1, [r7, #0]
 800db1c:	6a08      	ldr	r0, [r1, #32]
 800db1e:	6879      	ldr	r1, [r7, #4]
 800db20:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800db22:	6839      	ldr	r1, [r7, #0]
 800db24:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800db26:	b2c8      	uxtb	r0, r1
 800db28:	6879      	ldr	r1, [r7, #4]
 800db2a:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800db2c:	6839      	ldr	r1, [r7, #0]
 800db2e:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800db30:	2000      	movs	r0, #0
 800db32:	460c      	mov	r4, r1
 800db34:	4605      	mov	r5, r0
 800db36:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 800db3a:	2300      	movs	r3, #0
 800db3c:	6879      	ldr	r1, [r7, #4]
 800db3e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800db4e:	4619      	mov	r1, r3
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f7ff fad2 	bl	800d0fa <dir_sdi>
 800db56:	4603      	mov	r3, r0
 800db58:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800db5a:	7bfb      	ldrb	r3, [r7, #15]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d104      	bne.n	800db6a <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f7ff ff13 	bl	800d98c <load_xdir>
 800db66:	4603      	mov	r3, r0
 800db68:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800db6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800db6c:	4618      	mov	r0, r3
 800db6e:	3710      	adds	r7, #16
 800db70:	46bd      	mov	sp, r7
 800db72:	bdb0      	pop	{r4, r5, r7, pc}

0800db74 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800db74:	b590      	push	{r4, r7, lr}
 800db76:	b087      	sub	sp, #28
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	691b      	ldr	r3, [r3, #16]
 800db82:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	1c9c      	adds	r4, r3, #2
 800db88:	68f8      	ldr	r0, [r7, #12]
 800db8a:	f7ff fe98 	bl	800d8be <xdir_sum>
 800db8e:	4603      	mov	r3, r0
 800db90:	4619      	mov	r1, r3
 800db92:	4620      	mov	r0, r4
 800db94:	f7fe f9b0 	bl	800bef8 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	3301      	adds	r3, #1
 800db9c:	781b      	ldrb	r3, [r3, #0]
 800db9e:	3301      	adds	r3, #1
 800dba0:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dba6:	4619      	mov	r1, r3
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f7ff faa6 	bl	800d0fa <dir_sdi>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800dbb2:	e026      	b.n	800dc02 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681a      	ldr	r2, [r3, #0]
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbbc:	4619      	mov	r1, r3
 800dbbe:	4610      	mov	r0, r2
 800dbc0:	f7fe fc98 	bl	800c4f4 <move_window>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800dbc8:	7dfb      	ldrb	r3, [r7, #23]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d11d      	bne.n	800dc0a <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dbd2:	2220      	movs	r2, #32
 800dbd4:	68f9      	ldr	r1, [r7, #12]
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f7fe fa5d 	bl	800c096 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	2201      	movs	r2, #1
 800dbe2:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800dbe4:	693b      	ldr	r3, [r7, #16]
 800dbe6:	3b01      	subs	r3, #1
 800dbe8:	613b      	str	r3, [r7, #16]
 800dbea:	693b      	ldr	r3, [r7, #16]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d00e      	beq.n	800dc0e <store_xdir+0x9a>
		dirb += SZDIRE;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	3320      	adds	r3, #32
 800dbf4:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800dbf6:	2100      	movs	r1, #0
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f7ff fb04 	bl	800d206 <dir_next>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800dc02:	7dfb      	ldrb	r3, [r7, #23]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d0d5      	beq.n	800dbb4 <store_xdir+0x40>
 800dc08:	e002      	b.n	800dc10 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800dc0a:	bf00      	nop
 800dc0c:	e000      	b.n	800dc10 <store_xdir+0x9c>
		if (--nent == 0) break;
 800dc0e:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800dc10:	7dfb      	ldrb	r3, [r7, #23]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d002      	beq.n	800dc1c <store_xdir+0xa8>
 800dc16:	7dfb      	ldrb	r3, [r7, #23]
 800dc18:	2b01      	cmp	r3, #1
 800dc1a:	d101      	bne.n	800dc20 <store_xdir+0xac>
 800dc1c:	7dfb      	ldrb	r3, [r7, #23]
 800dc1e:	e000      	b.n	800dc22 <store_xdir+0xae>
 800dc20:	2302      	movs	r3, #2
}
 800dc22:	4618      	mov	r0, r3
 800dc24:	371c      	adds	r7, #28
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd90      	pop	{r4, r7, pc}

0800dc2a <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800dc2a:	b590      	push	{r4, r7, lr}
 800dc2c:	b085      	sub	sp, #20
 800dc2e:	af00      	add	r7, sp, #0
 800dc30:	6078      	str	r0, [r7, #4]
 800dc32:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800dc34:	2240      	movs	r2, #64	@ 0x40
 800dc36:	2100      	movs	r1, #0
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f7fe fa4d 	bl	800c0d8 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2285      	movs	r2, #133	@ 0x85
 800dc42:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	3320      	adds	r3, #32
 800dc48:	22c0      	movs	r2, #192	@ 0xc0
 800dc4a:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	72bb      	strb	r3, [r7, #10]
 800dc50:	2301      	movs	r3, #1
 800dc52:	72fb      	strb	r3, [r7, #11]
 800dc54:	2301      	movs	r3, #1
 800dc56:	813b      	strh	r3, [r7, #8]
 800dc58:	2340      	movs	r3, #64	@ 0x40
 800dc5a:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	1c5a      	adds	r2, r3, #1
 800dc60:	60fa      	str	r2, [r7, #12]
 800dc62:	687a      	ldr	r2, [r7, #4]
 800dc64:	4413      	add	r3, r2
 800dc66:	22c1      	movs	r2, #193	@ 0xc1
 800dc68:	701a      	strb	r2, [r3, #0]
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	1c5a      	adds	r2, r3, #1
 800dc6e:	60fa      	str	r2, [r7, #12]
 800dc70:	687a      	ldr	r2, [r7, #4]
 800dc72:	4413      	add	r3, r2
 800dc74:	2200      	movs	r2, #0
 800dc76:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800dc78:	893b      	ldrh	r3, [r7, #8]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d00b      	beq.n	800dc96 <create_xdir+0x6c>
 800dc7e:	7abb      	ldrb	r3, [r7, #10]
 800dc80:	005b      	lsls	r3, r3, #1
 800dc82:	683a      	ldr	r2, [r7, #0]
 800dc84:	4413      	add	r3, r2
 800dc86:	881b      	ldrh	r3, [r3, #0]
 800dc88:	813b      	strh	r3, [r7, #8]
 800dc8a:	893b      	ldrh	r3, [r7, #8]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d002      	beq.n	800dc96 <create_xdir+0x6c>
 800dc90:	7abb      	ldrb	r3, [r7, #10]
 800dc92:	3301      	adds	r3, #1
 800dc94:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800dc96:	687a      	ldr	r2, [r7, #4]
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	4413      	add	r3, r2
 800dc9c:	893a      	ldrh	r2, [r7, #8]
 800dc9e:	4611      	mov	r1, r2
 800dca0:	4618      	mov	r0, r3
 800dca2:	f7fe f929 	bl	800bef8 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	3302      	adds	r3, #2
 800dcaa:	60fb      	str	r3, [r7, #12]
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	f003 031f 	and.w	r3, r3, #31
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d1e0      	bne.n	800dc78 <create_xdir+0x4e>
		nb++;
 800dcb6:	7afb      	ldrb	r3, [r7, #11]
 800dcb8:	3301      	adds	r3, #1
 800dcba:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800dcbc:	7abb      	ldrb	r3, [r7, #10]
 800dcbe:	005b      	lsls	r3, r3, #1
 800dcc0:	683a      	ldr	r2, [r7, #0]
 800dcc2:	4413      	add	r3, r2
 800dcc4:	881b      	ldrh	r3, [r3, #0]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d1c8      	bne.n	800dc5c <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	3323      	adds	r3, #35	@ 0x23
 800dcce:	7aba      	ldrb	r2, [r7, #10]
 800dcd0:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	3301      	adds	r3, #1
 800dcd6:	7afa      	ldrb	r2, [r7, #11]
 800dcd8:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800dce0:	6838      	ldr	r0, [r7, #0]
 800dce2:	f7ff fe1e 	bl	800d922 <xname_sum>
 800dce6:	4603      	mov	r3, r0
 800dce8:	4619      	mov	r1, r3
 800dcea:	4620      	mov	r0, r4
 800dcec:	f7fe f904 	bl	800bef8 <st_word>
}
 800dcf0:	bf00      	nop
 800dcf2:	3714      	adds	r7, #20
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd90      	pop	{r4, r7, pc}

0800dcf8 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b086      	sub	sp, #24
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800dd02:	2304      	movs	r3, #4
 800dd04:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800dd0c:	23ff      	movs	r3, #255	@ 0xff
 800dd0e:	757b      	strb	r3, [r7, #21]
 800dd10:	23ff      	movs	r3, #255	@ 0xff
 800dd12:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800dd14:	e09f      	b.n	800de56 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd1a:	4619      	mov	r1, r3
 800dd1c:	6938      	ldr	r0, [r7, #16]
 800dd1e:	f7fe fbe9 	bl	800c4f4 <move_window>
 800dd22:	4603      	mov	r3, r0
 800dd24:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800dd26:	7dfb      	ldrb	r3, [r7, #23]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	f040 809a 	bne.w	800de62 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd32:	781b      	ldrb	r3, [r3, #0]
 800dd34:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800dd36:	7dbb      	ldrb	r3, [r7, #22]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d102      	bne.n	800dd42 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800dd3c:	2304      	movs	r3, #4
 800dd3e:	75fb      	strb	r3, [r7, #23]
 800dd40:	e096      	b.n	800de70 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	781b      	ldrb	r3, [r3, #0]
 800dd46:	2b04      	cmp	r3, #4
 800dd48:	d118      	bne.n	800dd7c <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800dd4a:	7dbb      	ldrb	r3, [r7, #22]
 800dd4c:	2b85      	cmp	r3, #133	@ 0x85
 800dd4e:	d179      	bne.n	800de44 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800dd58:	6878      	ldr	r0, [r7, #4]
 800dd5a:	f7ff fe17 	bl	800d98c <load_xdir>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800dd62:	7dfb      	ldrb	r3, [r7, #23]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d17e      	bne.n	800de66 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	691b      	ldr	r3, [r3, #16]
 800dd6c:	3304      	adds	r3, #4
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dd74:	b2da      	uxtb	r2, r3
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	719a      	strb	r2, [r3, #6]
					}
					break;
 800dd7a:	e074      	b.n	800de66 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd80:	330b      	adds	r3, #11
 800dd82:	781b      	ldrb	r3, [r3, #0]
 800dd84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dd88:	73fb      	strb	r3, [r7, #15]
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	7bfa      	ldrb	r2, [r7, #15]
 800dd8e:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800dd90:	7dbb      	ldrb	r3, [r7, #22]
 800dd92:	2be5      	cmp	r3, #229	@ 0xe5
 800dd94:	d00e      	beq.n	800ddb4 <dir_read+0xbc>
 800dd96:	7dbb      	ldrb	r3, [r7, #22]
 800dd98:	2b2e      	cmp	r3, #46	@ 0x2e
 800dd9a:	d00b      	beq.n	800ddb4 <dir_read+0xbc>
 800dd9c:	7bfb      	ldrb	r3, [r7, #15]
 800dd9e:	f023 0320 	bic.w	r3, r3, #32
 800dda2:	2b08      	cmp	r3, #8
 800dda4:	bf0c      	ite	eq
 800dda6:	2301      	moveq	r3, #1
 800dda8:	2300      	movne	r3, #0
 800ddaa:	b2db      	uxtb	r3, r3
 800ddac:	461a      	mov	r2, r3
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	4293      	cmp	r3, r2
 800ddb2:	d002      	beq.n	800ddba <dir_read+0xc2>
				ord = 0xFF;
 800ddb4:	23ff      	movs	r3, #255	@ 0xff
 800ddb6:	757b      	strb	r3, [r7, #21]
 800ddb8:	e044      	b.n	800de44 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800ddba:	7bfb      	ldrb	r3, [r7, #15]
 800ddbc:	2b0f      	cmp	r3, #15
 800ddbe:	d12f      	bne.n	800de20 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800ddc0:	7dbb      	ldrb	r3, [r7, #22]
 800ddc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d00d      	beq.n	800dde6 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ddce:	7b5b      	ldrb	r3, [r3, #13]
 800ddd0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800ddd2:	7dbb      	ldrb	r3, [r7, #22]
 800ddd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ddd8:	75bb      	strb	r3, [r7, #22]
 800ddda:	7dbb      	ldrb	r3, [r7, #22]
 800dddc:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800dde6:	7dba      	ldrb	r2, [r7, #22]
 800dde8:	7d7b      	ldrb	r3, [r7, #21]
 800ddea:	429a      	cmp	r2, r3
 800ddec:	d115      	bne.n	800de1a <dir_read+0x122>
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ddf2:	330d      	adds	r3, #13
 800ddf4:	781b      	ldrb	r3, [r3, #0]
 800ddf6:	7d3a      	ldrb	r2, [r7, #20]
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d10e      	bne.n	800de1a <dir_read+0x122>
 800ddfc:	693b      	ldr	r3, [r7, #16]
 800ddfe:	68da      	ldr	r2, [r3, #12]
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de04:	4619      	mov	r1, r3
 800de06:	4610      	mov	r0, r2
 800de08:	f7ff fbde 	bl	800d5c8 <pick_lfn>
 800de0c:	4603      	mov	r3, r0
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d003      	beq.n	800de1a <dir_read+0x122>
 800de12:	7d7b      	ldrb	r3, [r7, #21]
 800de14:	3b01      	subs	r3, #1
 800de16:	b2db      	uxtb	r3, r3
 800de18:	e000      	b.n	800de1c <dir_read+0x124>
 800de1a:	23ff      	movs	r3, #255	@ 0xff
 800de1c:	757b      	strb	r3, [r7, #21]
 800de1e:	e011      	b.n	800de44 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800de20:	7d7b      	ldrb	r3, [r7, #21]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d109      	bne.n	800de3a <dir_read+0x142>
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de2a:	4618      	mov	r0, r3
 800de2c:	f7ff fd26 	bl	800d87c <sum_sfn>
 800de30:	4603      	mov	r3, r0
 800de32:	461a      	mov	r2, r3
 800de34:	7d3b      	ldrb	r3, [r7, #20]
 800de36:	4293      	cmp	r3, r2
 800de38:	d017      	beq.n	800de6a <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	f04f 32ff 	mov.w	r2, #4294967295
 800de40:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 800de42:	e012      	b.n	800de6a <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800de44:	2100      	movs	r1, #0
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f7ff f9dd 	bl	800d206 <dir_next>
 800de4c:	4603      	mov	r3, r0
 800de4e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800de50:	7dfb      	ldrb	r3, [r7, #23]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d10b      	bne.n	800de6e <dir_read+0x176>
	while (dp->sect) {
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	f47f af5b 	bne.w	800dd16 <dir_read+0x1e>
 800de60:	e006      	b.n	800de70 <dir_read+0x178>
		if (res != FR_OK) break;
 800de62:	bf00      	nop
 800de64:	e004      	b.n	800de70 <dir_read+0x178>
					break;
 800de66:	bf00      	nop
 800de68:	e002      	b.n	800de70 <dir_read+0x178>
					break;
 800de6a:	bf00      	nop
 800de6c:	e000      	b.n	800de70 <dir_read+0x178>
		if (res != FR_OK) break;
 800de6e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800de70:	7dfb      	ldrb	r3, [r7, #23]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d002      	beq.n	800de7c <dir_read+0x184>
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	2200      	movs	r2, #0
 800de7a:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 800de7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800de7e:	4618      	mov	r0, r3
 800de80:	3718      	adds	r7, #24
 800de82:	46bd      	mov	sp, r7
 800de84:	bd80      	pop	{r7, pc}

0800de86 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800de86:	b590      	push	{r4, r7, lr}
 800de88:	b089      	sub	sp, #36	@ 0x24
 800de8a:	af00      	add	r7, sp, #0
 800de8c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800de94:	2100      	movs	r1, #0
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f7ff f92f 	bl	800d0fa <dir_sdi>
 800de9c:	4603      	mov	r3, r0
 800de9e:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800dea0:	7ffb      	ldrb	r3, [r7, #31]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d001      	beq.n	800deaa <dir_find+0x24>
 800dea6:	7ffb      	ldrb	r3, [r7, #31]
 800dea8:	e113      	b.n	800e0d2 <dir_find+0x24c>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	781b      	ldrb	r3, [r3, #0]
 800deae:	2b04      	cmp	r3, #4
 800deb0:	d165      	bne.n	800df7e <dir_find+0xf8>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	68db      	ldr	r3, [r3, #12]
 800deb6:	4618      	mov	r0, r3
 800deb8:	f7ff fd33 	bl	800d922 <xname_sum>
 800debc:	4603      	mov	r3, r0
 800debe:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800dec0:	e050      	b.n	800df64 <dir_find+0xde>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	691b      	ldr	r3, [r3, #16]
 800dec6:	3324      	adds	r3, #36	@ 0x24
 800dec8:	4618      	mov	r0, r3
 800deca:	f7fd feff 	bl	800bccc <ld_word>
 800dece:	4603      	mov	r3, r0
 800ded0:	461a      	mov	r2, r3
 800ded2:	893b      	ldrh	r3, [r7, #8]
 800ded4:	4293      	cmp	r3, r2
 800ded6:	d144      	bne.n	800df62 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	691b      	ldr	r3, [r3, #16]
 800dedc:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800dee0:	76fb      	strb	r3, [r7, #27]
 800dee2:	2340      	movs	r3, #64	@ 0x40
 800dee4:	617b      	str	r3, [r7, #20]
 800dee6:	2300      	movs	r3, #0
 800dee8:	613b      	str	r3, [r7, #16]
 800deea:	e029      	b.n	800df40 <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 800deec:	697b      	ldr	r3, [r7, #20]
 800deee:	f003 031f 	and.w	r3, r3, #31
 800def2:	2b00      	cmp	r3, #0
 800def4:	d102      	bne.n	800defc <dir_find+0x76>
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	3302      	adds	r3, #2
 800defa:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	691a      	ldr	r2, [r3, #16]
 800df00:	697b      	ldr	r3, [r7, #20]
 800df02:	4413      	add	r3, r2
 800df04:	4618      	mov	r0, r3
 800df06:	f7fd fee1 	bl	800bccc <ld_word>
 800df0a:	4603      	mov	r3, r0
 800df0c:	4618      	mov	r0, r3
 800df0e:	f002 f937 	bl	8010180 <ff_wtoupper>
 800df12:	4603      	mov	r3, r0
 800df14:	461c      	mov	r4, r3
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	68da      	ldr	r2, [r3, #12]
 800df1a:	693b      	ldr	r3, [r7, #16]
 800df1c:	005b      	lsls	r3, r3, #1
 800df1e:	4413      	add	r3, r2
 800df20:	881b      	ldrh	r3, [r3, #0]
 800df22:	4618      	mov	r0, r3
 800df24:	f002 f92c 	bl	8010180 <ff_wtoupper>
 800df28:	4603      	mov	r3, r0
 800df2a:	429c      	cmp	r4, r3
 800df2c:	d10c      	bne.n	800df48 <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800df2e:	7efb      	ldrb	r3, [r7, #27]
 800df30:	3b01      	subs	r3, #1
 800df32:	76fb      	strb	r3, [r7, #27]
 800df34:	697b      	ldr	r3, [r7, #20]
 800df36:	3302      	adds	r3, #2
 800df38:	617b      	str	r3, [r7, #20]
 800df3a:	693b      	ldr	r3, [r7, #16]
 800df3c:	3301      	adds	r3, #1
 800df3e:	613b      	str	r3, [r7, #16]
 800df40:	7efb      	ldrb	r3, [r7, #27]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d1d2      	bne.n	800deec <dir_find+0x66>
 800df46:	e000      	b.n	800df4a <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800df48:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800df4a:	7efb      	ldrb	r3, [r7, #27]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d109      	bne.n	800df64 <dir_find+0xde>
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	68da      	ldr	r2, [r3, #12]
 800df54:	693b      	ldr	r3, [r7, #16]
 800df56:	005b      	lsls	r3, r3, #1
 800df58:	4413      	add	r3, r2
 800df5a:	881b      	ldrh	r3, [r3, #0]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d00b      	beq.n	800df78 <dir_find+0xf2>
 800df60:	e000      	b.n	800df64 <dir_find+0xde>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800df62:	bf00      	nop
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800df64:	2100      	movs	r1, #0
 800df66:	6878      	ldr	r0, [r7, #4]
 800df68:	f7ff fec6 	bl	800dcf8 <dir_read>
 800df6c:	4603      	mov	r3, r0
 800df6e:	77fb      	strb	r3, [r7, #31]
 800df70:	7ffb      	ldrb	r3, [r7, #31]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d0a5      	beq.n	800dec2 <dir_find+0x3c>
 800df76:	e000      	b.n	800df7a <dir_find+0xf4>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800df78:	bf00      	nop
		}
		return res;
 800df7a:	7ffb      	ldrb	r3, [r7, #31]
 800df7c:	e0a9      	b.n	800e0d2 <dir_find+0x24c>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800df7e:	23ff      	movs	r3, #255	@ 0xff
 800df80:	773b      	strb	r3, [r7, #28]
 800df82:	7f3b      	ldrb	r3, [r7, #28]
 800df84:	777b      	strb	r3, [r7, #29]
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f04f 32ff 	mov.w	r2, #4294967295
 800df8c:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df92:	4619      	mov	r1, r3
 800df94:	68f8      	ldr	r0, [r7, #12]
 800df96:	f7fe faad 	bl	800c4f4 <move_window>
 800df9a:	4603      	mov	r3, r0
 800df9c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800df9e:	7ffb      	ldrb	r3, [r7, #31]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	f040 8090 	bne.w	800e0c6 <dir_find+0x240>
		c = dp->dir[DIR_Name];
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dfaa:	781b      	ldrb	r3, [r3, #0]
 800dfac:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800dfae:	7fbb      	ldrb	r3, [r7, #30]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d102      	bne.n	800dfba <dir_find+0x134>
 800dfb4:	2304      	movs	r3, #4
 800dfb6:	77fb      	strb	r3, [r7, #31]
 800dfb8:	e08a      	b.n	800e0d0 <dir_find+0x24a>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dfbe:	330b      	adds	r3, #11
 800dfc0:	781b      	ldrb	r3, [r3, #0]
 800dfc2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dfc6:	72fb      	strb	r3, [r7, #11]
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	7afa      	ldrb	r2, [r7, #11]
 800dfcc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800dfce:	7fbb      	ldrb	r3, [r7, #30]
 800dfd0:	2be5      	cmp	r3, #229	@ 0xe5
 800dfd2:	d007      	beq.n	800dfe4 <dir_find+0x15e>
 800dfd4:	7afb      	ldrb	r3, [r7, #11]
 800dfd6:	f003 0308 	and.w	r3, r3, #8
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d009      	beq.n	800dff2 <dir_find+0x16c>
 800dfde:	7afb      	ldrb	r3, [r7, #11]
 800dfe0:	2b0f      	cmp	r3, #15
 800dfe2:	d006      	beq.n	800dff2 <dir_find+0x16c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800dfe4:	23ff      	movs	r3, #255	@ 0xff
 800dfe6:	777b      	strb	r3, [r7, #29]
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f04f 32ff 	mov.w	r2, #4294967295
 800dfee:	64da      	str	r2, [r3, #76]	@ 0x4c
 800dff0:	e05e      	b.n	800e0b0 <dir_find+0x22a>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800dff2:	7afb      	ldrb	r3, [r7, #11]
 800dff4:	2b0f      	cmp	r3, #15
 800dff6:	d136      	bne.n	800e066 <dir_find+0x1e0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800dffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e002:	2b00      	cmp	r3, #0
 800e004:	d154      	bne.n	800e0b0 <dir_find+0x22a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e006:	7fbb      	ldrb	r3, [r7, #30]
 800e008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d00d      	beq.n	800e02c <dir_find+0x1a6>
						sum = dp->dir[LDIR_Chksum];
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e014:	7b5b      	ldrb	r3, [r3, #13]
 800e016:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e018:	7fbb      	ldrb	r3, [r7, #30]
 800e01a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e01e:	77bb      	strb	r3, [r7, #30]
 800e020:	7fbb      	ldrb	r3, [r7, #30]
 800e022:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e02c:	7fba      	ldrb	r2, [r7, #30]
 800e02e:	7f7b      	ldrb	r3, [r7, #29]
 800e030:	429a      	cmp	r2, r3
 800e032:	d115      	bne.n	800e060 <dir_find+0x1da>
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e038:	330d      	adds	r3, #13
 800e03a:	781b      	ldrb	r3, [r3, #0]
 800e03c:	7f3a      	ldrb	r2, [r7, #28]
 800e03e:	429a      	cmp	r2, r3
 800e040:	d10e      	bne.n	800e060 <dir_find+0x1da>
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	68da      	ldr	r2, [r3, #12]
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e04a:	4619      	mov	r1, r3
 800e04c:	4610      	mov	r0, r2
 800e04e:	f7ff fa4b 	bl	800d4e8 <cmp_lfn>
 800e052:	4603      	mov	r3, r0
 800e054:	2b00      	cmp	r3, #0
 800e056:	d003      	beq.n	800e060 <dir_find+0x1da>
 800e058:	7f7b      	ldrb	r3, [r7, #29]
 800e05a:	3b01      	subs	r3, #1
 800e05c:	b2db      	uxtb	r3, r3
 800e05e:	e000      	b.n	800e062 <dir_find+0x1dc>
 800e060:	23ff      	movs	r3, #255	@ 0xff
 800e062:	777b      	strb	r3, [r7, #29]
 800e064:	e024      	b.n	800e0b0 <dir_find+0x22a>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e066:	7f7b      	ldrb	r3, [r7, #29]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d109      	bne.n	800e080 <dir_find+0x1fa>
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e070:	4618      	mov	r0, r3
 800e072:	f7ff fc03 	bl	800d87c <sum_sfn>
 800e076:	4603      	mov	r3, r0
 800e078:	461a      	mov	r2, r3
 800e07a:	7f3b      	ldrb	r3, [r7, #28]
 800e07c:	4293      	cmp	r3, r2
 800e07e:	d024      	beq.n	800e0ca <dir_find+0x244>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800e086:	f003 0301 	and.w	r3, r3, #1
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d10a      	bne.n	800e0a4 <dir_find+0x21e>
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	3340      	adds	r3, #64	@ 0x40
 800e096:	220b      	movs	r2, #11
 800e098:	4619      	mov	r1, r3
 800e09a:	f7fe f838 	bl	800c10e <mem_cmp>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d014      	beq.n	800e0ce <dir_find+0x248>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e0a4:	23ff      	movs	r3, #255	@ 0xff
 800e0a6:	777b      	strb	r3, [r7, #29]
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f04f 32ff 	mov.w	r2, #4294967295
 800e0ae:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e0b0:	2100      	movs	r1, #0
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	f7ff f8a7 	bl	800d206 <dir_next>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800e0bc:	7ffb      	ldrb	r3, [r7, #31]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	f43f af65 	beq.w	800df8e <dir_find+0x108>
 800e0c4:	e004      	b.n	800e0d0 <dir_find+0x24a>
		if (res != FR_OK) break;
 800e0c6:	bf00      	nop
 800e0c8:	e002      	b.n	800e0d0 <dir_find+0x24a>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e0ca:	bf00      	nop
 800e0cc:	e000      	b.n	800e0d0 <dir_find+0x24a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e0ce:	bf00      	nop

	return res;
 800e0d0:	7ffb      	ldrb	r3, [r7, #31]
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3724      	adds	r7, #36	@ 0x24
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd90      	pop	{r4, r7, pc}
	...

0800e0dc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e0dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e0e0:	b0a0      	sub	sp, #128	@ 0x80
 800e0e2:	af00      	add	r7, sp, #0
 800e0e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800e0f2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d001      	beq.n	800e0fe <dir_register+0x22>
 800e0fa:	2306      	movs	r3, #6
 800e0fc:	e18e      	b.n	800e41c <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e0fe:	2300      	movs	r3, #0
 800e100:	677b      	str	r3, [r7, #116]	@ 0x74
 800e102:	e002      	b.n	800e10a <dir_register+0x2e>
 800e104:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e106:	3301      	adds	r3, #1
 800e108:	677b      	str	r3, [r7, #116]	@ 0x74
 800e10a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e10c:	68da      	ldr	r2, [r3, #12]
 800e10e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e110:	005b      	lsls	r3, r3, #1
 800e112:	4413      	add	r3, r2
 800e114:	881b      	ldrh	r3, [r3, #0]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d1f4      	bne.n	800e104 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e11a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e11c:	781b      	ldrb	r3, [r3, #0]
 800e11e:	2b04      	cmp	r3, #4
 800e120:	f040 809f 	bne.w	800e262 <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800e124:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e126:	330e      	adds	r3, #14
 800e128:	4aa2      	ldr	r2, [pc, #648]	@ (800e3b4 <dir_register+0x2d8>)
 800e12a:	fba2 2303 	umull	r2, r3, r2, r3
 800e12e:	08db      	lsrs	r3, r3, #3
 800e130:	3302      	adds	r3, #2
 800e132:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800e134:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	f7ff f93a 	bl	800d3b0 <dir_alloc>
 800e13c:	4603      	mov	r3, r0
 800e13e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 800e142:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e146:	2b00      	cmp	r3, #0
 800e148:	d002      	beq.n	800e150 <dir_register+0x74>
 800e14a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e14e:	e165      	b.n	800e41c <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e154:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e156:	3b01      	subs	r3, #1
 800e158:	015b      	lsls	r3, r3, #5
 800e15a:	1ad2      	subs	r2, r2, r3
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	689b      	ldr	r3, [r3, #8]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d072      	beq.n	800e24e <dir_register+0x172>
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	79db      	ldrb	r3, [r3, #7]
 800e16c:	f003 0304 	and.w	r3, r3, #4
 800e170:	2b00      	cmp	r3, #0
 800e172:	d06c      	beq.n	800e24e <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e17a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800e17c:	8949      	ldrh	r1, [r1, #10]
 800e17e:	0249      	lsls	r1, r1, #9
 800e180:	2000      	movs	r0, #0
 800e182:	460c      	mov	r4, r1
 800e184:	4605      	mov	r5, r0
 800e186:	eb12 0804 	adds.w	r8, r2, r4
 800e18a:	eb43 0905 	adc.w	r9, r3, r5
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	4618      	mov	r0, r3
 800e198:	f7fe fd56 	bl	800cc48 <fill_first_frag>
 800e19c:	4603      	mov	r3, r0
 800e19e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800e1a2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d002      	beq.n	800e1b0 <dir_register+0xd4>
 800e1aa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e1ae:	e135      	b.n	800e41c <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800e1b0:	6878      	ldr	r0, [r7, #4]
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1b6:	f04f 32ff 	mov.w	r2, #4294967295
 800e1ba:	4619      	mov	r1, r3
 800e1bc:	f7fe fd73 	bl	800cca6 <fill_last_frag>
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800e1c6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d002      	beq.n	800e1d4 <dir_register+0xf8>
 800e1ce:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e1d2:	e123      	b.n	800e41c <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800e1d4:	687a      	ldr	r2, [r7, #4]
 800e1d6:	f107 0308 	add.w	r3, r7, #8
 800e1da:	4611      	mov	r1, r2
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f7ff fc93 	bl	800db08 <load_obj_dir>
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800e1e8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d002      	beq.n	800e1f6 <dir_register+0x11a>
 800e1f0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e1f4:	e112      	b.n	800e41c <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800e1f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e1f8:	691b      	ldr	r3, [r3, #16]
 800e1fa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e204:	4608      	mov	r0, r1
 800e206:	f7fd febe 	bl	800bf86 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800e20a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e20c:	691b      	ldr	r3, [r3, #16]
 800e20e:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e218:	4608      	mov	r0, r1
 800e21a:	f7fd feb4 	bl	800bf86 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	79da      	ldrb	r2, [r3, #7]
 800e222:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e224:	691b      	ldr	r3, [r3, #16]
 800e226:	3321      	adds	r3, #33	@ 0x21
 800e228:	f042 0201 	orr.w	r2, r2, #1
 800e22c:	b2d2      	uxtb	r2, r2
 800e22e:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800e230:	f107 0308 	add.w	r3, r7, #8
 800e234:	4618      	mov	r0, r3
 800e236:	f7ff fc9d 	bl	800db74 <store_xdir>
 800e23a:	4603      	mov	r3, r0
 800e23c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800e240:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e244:	2b00      	cmp	r3, #0
 800e246:	d002      	beq.n	800e24e <dir_register+0x172>
 800e248:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e24c:	e0e6      	b.n	800e41c <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800e24e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e250:	691a      	ldr	r2, [r3, #16]
 800e252:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e254:	68db      	ldr	r3, [r3, #12]
 800e256:	4619      	mov	r1, r3
 800e258:	4610      	mov	r0, r2
 800e25a:	f7ff fce6 	bl	800dc2a <create_xdir>
		return FR_OK;
 800e25e:	2300      	movs	r3, #0
 800e260:	e0dc      	b.n	800e41c <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800e268:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800e26c:	220c      	movs	r2, #12
 800e26e:	4618      	mov	r0, r3
 800e270:	f7fd ff11 	bl	800c096 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e274:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e278:	f003 0301 	and.w	r3, r3, #1
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d033      	beq.n	800e2e8 <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	2240      	movs	r2, #64	@ 0x40
 800e284:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 800e288:	2301      	movs	r3, #1
 800e28a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e28c:	e016      	b.n	800e2bc <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800e294:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e296:	68da      	ldr	r2, [r3, #12]
 800e298:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800e29c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e29e:	f7ff fa5f 	bl	800d760 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f7ff fdef 	bl	800de86 <dir_find>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 800e2ae:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d106      	bne.n	800e2c4 <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 800e2b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e2b8:	3301      	adds	r3, #1
 800e2ba:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e2bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e2be:	2b63      	cmp	r3, #99	@ 0x63
 800e2c0:	d9e5      	bls.n	800e28e <dir_register+0x1b2>
 800e2c2:	e000      	b.n	800e2c6 <dir_register+0x1ea>
			if (res != FR_OK) break;
 800e2c4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e2c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e2c8:	2b64      	cmp	r3, #100	@ 0x64
 800e2ca:	d101      	bne.n	800e2d0 <dir_register+0x1f4>
 800e2cc:	2307      	movs	r3, #7
 800e2ce:	e0a5      	b.n	800e41c <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e2d0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e2d4:	2b04      	cmp	r3, #4
 800e2d6:	d002      	beq.n	800e2de <dir_register+0x202>
 800e2d8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e2dc:	e09e      	b.n	800e41c <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e2de:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e2e8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e2ec:	f003 0302 	and.w	r3, r3, #2
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d007      	beq.n	800e304 <dir_register+0x228>
 800e2f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e2f6:	330c      	adds	r3, #12
 800e2f8:	4a2f      	ldr	r2, [pc, #188]	@ (800e3b8 <dir_register+0x2dc>)
 800e2fa:	fba2 2303 	umull	r2, r3, r2, r3
 800e2fe:	089b      	lsrs	r3, r3, #2
 800e300:	3301      	adds	r3, #1
 800e302:	e000      	b.n	800e306 <dir_register+0x22a>
 800e304:	2301      	movs	r3, #1
 800e306:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e308:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f7ff f850 	bl	800d3b0 <dir_alloc>
 800e310:	4603      	mov	r3, r0
 800e312:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e316:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d14f      	bne.n	800e3be <dir_register+0x2e2>
 800e31e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e320:	3b01      	subs	r3, #1
 800e322:	673b      	str	r3, [r7, #112]	@ 0x70
 800e324:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e326:	2b00      	cmp	r3, #0
 800e328:	d049      	beq.n	800e3be <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e32e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e330:	015b      	lsls	r3, r3, #5
 800e332:	1ad3      	subs	r3, r2, r3
 800e334:	4619      	mov	r1, r3
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f7fe fedf 	bl	800d0fa <dir_sdi>
 800e33c:	4603      	mov	r3, r0
 800e33e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800e342:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e346:	2b00      	cmp	r3, #0
 800e348:	d139      	bne.n	800e3be <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	3340      	adds	r3, #64	@ 0x40
 800e34e:	4618      	mov	r0, r3
 800e350:	f7ff fa94 	bl	800d87c <sum_sfn>
 800e354:	4603      	mov	r3, r0
 800e356:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e35e:	4619      	mov	r1, r3
 800e360:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e362:	f7fe f8c7 	bl	800c4f4 <move_window>
 800e366:	4603      	mov	r3, r0
 800e368:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 800e36c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e370:	2b00      	cmp	r3, #0
 800e372:	d123      	bne.n	800e3bc <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e374:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e376:	68d8      	ldr	r0, [r3, #12]
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800e37c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e37e:	b2da      	uxtb	r2, r3
 800e380:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800e384:	f7ff f984 	bl	800d690 <put_lfn>
				fs->wflag = 1;
 800e388:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e38a:	2201      	movs	r2, #1
 800e38c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e38e:	2100      	movs	r1, #0
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f7fe ff38 	bl	800d206 <dir_next>
 800e396:	4603      	mov	r3, r0
 800e398:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --nent);
 800e39c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d10c      	bne.n	800e3be <dir_register+0x2e2>
 800e3a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e3a6:	3b01      	subs	r3, #1
 800e3a8:	673b      	str	r3, [r7, #112]	@ 0x70
 800e3aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d1d4      	bne.n	800e35a <dir_register+0x27e>
 800e3b0:	e005      	b.n	800e3be <dir_register+0x2e2>
 800e3b2:	bf00      	nop
 800e3b4:	88888889 	.word	0x88888889
 800e3b8:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800e3bc:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e3be:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d128      	bne.n	800e418 <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3ca:	4619      	mov	r1, r3
 800e3cc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e3ce:	f7fe f891 	bl	800c4f4 <move_window>
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800e3d8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d11b      	bne.n	800e418 <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e3e4:	2220      	movs	r2, #32
 800e3e6:	2100      	movs	r1, #0
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	f7fd fe75 	bl	800c0d8 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	3340      	adds	r3, #64	@ 0x40
 800e3f6:	220b      	movs	r2, #11
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	f7fd fe4c 	bl	800c096 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e408:	330c      	adds	r3, #12
 800e40a:	f002 0218 	and.w	r2, r2, #24
 800e40e:	b2d2      	uxtb	r2, r2
 800e410:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e412:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e414:	2201      	movs	r2, #1
 800e416:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e418:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	3780      	adds	r7, #128	@ 0x80
 800e420:	46bd      	mov	sp, r7
 800e422:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800e426:	bf00      	nop

0800e428 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b08a      	sub	sp, #40	@ 0x28
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
 800e430:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e432:	683b      	ldr	r3, [r7, #0]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	613b      	str	r3, [r7, #16]
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	68db      	ldr	r3, [r3, #12]
 800e43e:	60fb      	str	r3, [r7, #12]
 800e440:	2300      	movs	r3, #0
 800e442:	617b      	str	r3, [r7, #20]
 800e444:	697b      	ldr	r3, [r7, #20]
 800e446:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e448:	69bb      	ldr	r3, [r7, #24]
 800e44a:	1c5a      	adds	r2, r3, #1
 800e44c:	61ba      	str	r2, [r7, #24]
 800e44e:	693a      	ldr	r2, [r7, #16]
 800e450:	4413      	add	r3, r2
 800e452:	781b      	ldrb	r3, [r3, #0]
 800e454:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e456:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e458:	2b1f      	cmp	r3, #31
 800e45a:	d940      	bls.n	800e4de <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e45c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e45e:	2b2f      	cmp	r3, #47	@ 0x2f
 800e460:	d006      	beq.n	800e470 <create_name+0x48>
 800e462:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e464:	2b5c      	cmp	r3, #92	@ 0x5c
 800e466:	d110      	bne.n	800e48a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e468:	e002      	b.n	800e470 <create_name+0x48>
 800e46a:	69bb      	ldr	r3, [r7, #24]
 800e46c:	3301      	adds	r3, #1
 800e46e:	61bb      	str	r3, [r7, #24]
 800e470:	693a      	ldr	r2, [r7, #16]
 800e472:	69bb      	ldr	r3, [r7, #24]
 800e474:	4413      	add	r3, r2
 800e476:	781b      	ldrb	r3, [r3, #0]
 800e478:	2b2f      	cmp	r3, #47	@ 0x2f
 800e47a:	d0f6      	beq.n	800e46a <create_name+0x42>
 800e47c:	693a      	ldr	r2, [r7, #16]
 800e47e:	69bb      	ldr	r3, [r7, #24]
 800e480:	4413      	add	r3, r2
 800e482:	781b      	ldrb	r3, [r3, #0]
 800e484:	2b5c      	cmp	r3, #92	@ 0x5c
 800e486:	d0f0      	beq.n	800e46a <create_name+0x42>
			break;
 800e488:	e02a      	b.n	800e4e0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e48a:	697b      	ldr	r3, [r7, #20]
 800e48c:	2bfe      	cmp	r3, #254	@ 0xfe
 800e48e:	d901      	bls.n	800e494 <create_name+0x6c>
 800e490:	2306      	movs	r3, #6
 800e492:	e17d      	b.n	800e790 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e494:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e496:	b2db      	uxtb	r3, r3
 800e498:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e49a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e49c:	2101      	movs	r1, #1
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f001 fe32 	bl	8010108 <ff_convert>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e4a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d101      	bne.n	800e4b2 <create_name+0x8a>
 800e4ae:	2306      	movs	r3, #6
 800e4b0:	e16e      	b.n	800e790 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e4b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e4b4:	2b7f      	cmp	r3, #127	@ 0x7f
 800e4b6:	d809      	bhi.n	800e4cc <create_name+0xa4>
 800e4b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e4ba:	4619      	mov	r1, r3
 800e4bc:	488d      	ldr	r0, [pc, #564]	@ (800e6f4 <create_name+0x2cc>)
 800e4be:	f7fd fe4d 	bl	800c15c <chk_chr>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d001      	beq.n	800e4cc <create_name+0xa4>
 800e4c8:	2306      	movs	r3, #6
 800e4ca:	e161      	b.n	800e790 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800e4cc:	697b      	ldr	r3, [r7, #20]
 800e4ce:	1c5a      	adds	r2, r3, #1
 800e4d0:	617a      	str	r2, [r7, #20]
 800e4d2:	005b      	lsls	r3, r3, #1
 800e4d4:	68fa      	ldr	r2, [r7, #12]
 800e4d6:	4413      	add	r3, r2
 800e4d8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e4da:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e4dc:	e7b4      	b.n	800e448 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e4de:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e4e0:	693a      	ldr	r2, [r7, #16]
 800e4e2:	69bb      	ldr	r3, [r7, #24]
 800e4e4:	441a      	add	r2, r3
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e4ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e4ec:	2b1f      	cmp	r3, #31
 800e4ee:	d801      	bhi.n	800e4f4 <create_name+0xcc>
 800e4f0:	2304      	movs	r3, #4
 800e4f2:	e000      	b.n	800e4f6 <create_name+0xce>
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e4fa:	e011      	b.n	800e520 <create_name+0xf8>
		w = lfn[di - 1];
 800e4fc:	697a      	ldr	r2, [r7, #20]
 800e4fe:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e502:	4413      	add	r3, r2
 800e504:	005b      	lsls	r3, r3, #1
 800e506:	68fa      	ldr	r2, [r7, #12]
 800e508:	4413      	add	r3, r2
 800e50a:	881b      	ldrh	r3, [r3, #0]
 800e50c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800e50e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e510:	2b20      	cmp	r3, #32
 800e512:	d002      	beq.n	800e51a <create_name+0xf2>
 800e514:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e516:	2b2e      	cmp	r3, #46	@ 0x2e
 800e518:	d106      	bne.n	800e528 <create_name+0x100>
		di--;
 800e51a:	697b      	ldr	r3, [r7, #20]
 800e51c:	3b01      	subs	r3, #1
 800e51e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e520:	697b      	ldr	r3, [r7, #20]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d1ea      	bne.n	800e4fc <create_name+0xd4>
 800e526:	e000      	b.n	800e52a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800e528:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	005b      	lsls	r3, r3, #1
 800e52e:	68fa      	ldr	r2, [r7, #12]
 800e530:	4413      	add	r3, r2
 800e532:	2200      	movs	r2, #0
 800e534:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d101      	bne.n	800e540 <create_name+0x118>
 800e53c:	2306      	movs	r3, #6
 800e53e:	e127      	b.n	800e790 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	3340      	adds	r3, #64	@ 0x40
 800e544:	220b      	movs	r2, #11
 800e546:	2120      	movs	r1, #32
 800e548:	4618      	mov	r0, r3
 800e54a:	f7fd fdc5 	bl	800c0d8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e54e:	2300      	movs	r3, #0
 800e550:	61bb      	str	r3, [r7, #24]
 800e552:	e002      	b.n	800e55a <create_name+0x132>
 800e554:	69bb      	ldr	r3, [r7, #24]
 800e556:	3301      	adds	r3, #1
 800e558:	61bb      	str	r3, [r7, #24]
 800e55a:	69bb      	ldr	r3, [r7, #24]
 800e55c:	005b      	lsls	r3, r3, #1
 800e55e:	68fa      	ldr	r2, [r7, #12]
 800e560:	4413      	add	r3, r2
 800e562:	881b      	ldrh	r3, [r3, #0]
 800e564:	2b20      	cmp	r3, #32
 800e566:	d0f5      	beq.n	800e554 <create_name+0x12c>
 800e568:	69bb      	ldr	r3, [r7, #24]
 800e56a:	005b      	lsls	r3, r3, #1
 800e56c:	68fa      	ldr	r2, [r7, #12]
 800e56e:	4413      	add	r3, r2
 800e570:	881b      	ldrh	r3, [r3, #0]
 800e572:	2b2e      	cmp	r3, #46	@ 0x2e
 800e574:	d0ee      	beq.n	800e554 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e576:	69bb      	ldr	r3, [r7, #24]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d009      	beq.n	800e590 <create_name+0x168>
 800e57c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e580:	f043 0303 	orr.w	r3, r3, #3
 800e584:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e588:	e002      	b.n	800e590 <create_name+0x168>
 800e58a:	697b      	ldr	r3, [r7, #20]
 800e58c:	3b01      	subs	r3, #1
 800e58e:	617b      	str	r3, [r7, #20]
 800e590:	697b      	ldr	r3, [r7, #20]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d009      	beq.n	800e5aa <create_name+0x182>
 800e596:	697a      	ldr	r2, [r7, #20]
 800e598:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e59c:	4413      	add	r3, r2
 800e59e:	005b      	lsls	r3, r3, #1
 800e5a0:	68fa      	ldr	r2, [r7, #12]
 800e5a2:	4413      	add	r3, r2
 800e5a4:	881b      	ldrh	r3, [r3, #0]
 800e5a6:	2b2e      	cmp	r3, #46	@ 0x2e
 800e5a8:	d1ef      	bne.n	800e58a <create_name+0x162>

	i = b = 0; ni = 8;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	623b      	str	r3, [r7, #32]
 800e5b4:	2308      	movs	r3, #8
 800e5b6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e5b8:	69bb      	ldr	r3, [r7, #24]
 800e5ba:	1c5a      	adds	r2, r3, #1
 800e5bc:	61ba      	str	r2, [r7, #24]
 800e5be:	005b      	lsls	r3, r3, #1
 800e5c0:	68fa      	ldr	r2, [r7, #12]
 800e5c2:	4413      	add	r3, r2
 800e5c4:	881b      	ldrh	r3, [r3, #0]
 800e5c6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e5c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	f000 8090 	beq.w	800e6f0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e5d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e5d2:	2b20      	cmp	r3, #32
 800e5d4:	d006      	beq.n	800e5e4 <create_name+0x1bc>
 800e5d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e5d8:	2b2e      	cmp	r3, #46	@ 0x2e
 800e5da:	d10a      	bne.n	800e5f2 <create_name+0x1ca>
 800e5dc:	69ba      	ldr	r2, [r7, #24]
 800e5de:	697b      	ldr	r3, [r7, #20]
 800e5e0:	429a      	cmp	r2, r3
 800e5e2:	d006      	beq.n	800e5f2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e5e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e5e8:	f043 0303 	orr.w	r3, r3, #3
 800e5ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e5f0:	e07d      	b.n	800e6ee <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e5f2:	6a3a      	ldr	r2, [r7, #32]
 800e5f4:	69fb      	ldr	r3, [r7, #28]
 800e5f6:	429a      	cmp	r2, r3
 800e5f8:	d203      	bcs.n	800e602 <create_name+0x1da>
 800e5fa:	69ba      	ldr	r2, [r7, #24]
 800e5fc:	697b      	ldr	r3, [r7, #20]
 800e5fe:	429a      	cmp	r2, r3
 800e600:	d123      	bne.n	800e64a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e602:	69fb      	ldr	r3, [r7, #28]
 800e604:	2b0b      	cmp	r3, #11
 800e606:	d106      	bne.n	800e616 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800e608:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e60c:	f043 0303 	orr.w	r3, r3, #3
 800e610:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e614:	e075      	b.n	800e702 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e616:	69ba      	ldr	r2, [r7, #24]
 800e618:	697b      	ldr	r3, [r7, #20]
 800e61a:	429a      	cmp	r2, r3
 800e61c:	d005      	beq.n	800e62a <create_name+0x202>
 800e61e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e622:	f043 0303 	orr.w	r3, r3, #3
 800e626:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800e62a:	69ba      	ldr	r2, [r7, #24]
 800e62c:	697b      	ldr	r3, [r7, #20]
 800e62e:	429a      	cmp	r2, r3
 800e630:	d866      	bhi.n	800e700 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e632:	697b      	ldr	r3, [r7, #20]
 800e634:	61bb      	str	r3, [r7, #24]
 800e636:	2308      	movs	r3, #8
 800e638:	623b      	str	r3, [r7, #32]
 800e63a:	230b      	movs	r3, #11
 800e63c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e63e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e642:	009b      	lsls	r3, r3, #2
 800e644:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e648:	e051      	b.n	800e6ee <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e64a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e64c:	2b7f      	cmp	r3, #127	@ 0x7f
 800e64e:	d914      	bls.n	800e67a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e650:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e652:	2100      	movs	r1, #0
 800e654:	4618      	mov	r0, r3
 800e656:	f001 fd57 	bl	8010108 <ff_convert>
 800e65a:	4603      	mov	r3, r0
 800e65c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e65e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e660:	2b00      	cmp	r3, #0
 800e662:	d004      	beq.n	800e66e <create_name+0x246>
 800e664:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e666:	3b80      	subs	r3, #128	@ 0x80
 800e668:	4a23      	ldr	r2, [pc, #140]	@ (800e6f8 <create_name+0x2d0>)
 800e66a:	5cd3      	ldrb	r3, [r2, r3]
 800e66c:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e66e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e672:	f043 0302 	orr.w	r3, r3, #2
 800e676:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e67a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d007      	beq.n	800e690 <create_name+0x268>
 800e680:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e682:	4619      	mov	r1, r3
 800e684:	481d      	ldr	r0, [pc, #116]	@ (800e6fc <create_name+0x2d4>)
 800e686:	f7fd fd69 	bl	800c15c <chk_chr>
 800e68a:	4603      	mov	r3, r0
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d008      	beq.n	800e6a2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e690:	235f      	movs	r3, #95	@ 0x5f
 800e692:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800e694:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e698:	f043 0303 	orr.w	r3, r3, #3
 800e69c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e6a0:	e01b      	b.n	800e6da <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e6a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e6a4:	2b40      	cmp	r3, #64	@ 0x40
 800e6a6:	d909      	bls.n	800e6bc <create_name+0x294>
 800e6a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e6aa:	2b5a      	cmp	r3, #90	@ 0x5a
 800e6ac:	d806      	bhi.n	800e6bc <create_name+0x294>
					b |= 2;
 800e6ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e6b2:	f043 0302 	orr.w	r3, r3, #2
 800e6b6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e6ba:	e00e      	b.n	800e6da <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e6bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e6be:	2b60      	cmp	r3, #96	@ 0x60
 800e6c0:	d90b      	bls.n	800e6da <create_name+0x2b2>
 800e6c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e6c4:	2b7a      	cmp	r3, #122	@ 0x7a
 800e6c6:	d808      	bhi.n	800e6da <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800e6c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e6cc:	f043 0301 	orr.w	r3, r3, #1
 800e6d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e6d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e6d6:	3b20      	subs	r3, #32
 800e6d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e6da:	6a3b      	ldr	r3, [r7, #32]
 800e6dc:	1c5a      	adds	r2, r3, #1
 800e6de:	623a      	str	r2, [r7, #32]
 800e6e0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e6e2:	b2d1      	uxtb	r1, r2
 800e6e4:	687a      	ldr	r2, [r7, #4]
 800e6e6:	4413      	add	r3, r2
 800e6e8:	460a      	mov	r2, r1
 800e6ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		w = lfn[si++];					/* Get an LFN character */
 800e6ee:	e763      	b.n	800e5b8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800e6f0:	bf00      	nop
 800e6f2:	e006      	b.n	800e702 <create_name+0x2da>
 800e6f4:	080161d4 	.word	0x080161d4
 800e6f8:	08016238 	.word	0x08016238
 800e6fc:	080161e0 	.word	0x080161e0
			if (si > di) break;			/* No extension */
 800e700:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e708:	2be5      	cmp	r3, #229	@ 0xe5
 800e70a:	d103      	bne.n	800e714 <create_name+0x2ec>
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2205      	movs	r2, #5
 800e710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;
 800e714:	69fb      	ldr	r3, [r7, #28]
 800e716:	2b08      	cmp	r3, #8
 800e718:	d104      	bne.n	800e724 <create_name+0x2fc>
 800e71a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e71e:	009b      	lsls	r3, r3, #2
 800e720:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e724:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e728:	f003 030c 	and.w	r3, r3, #12
 800e72c:	2b0c      	cmp	r3, #12
 800e72e:	d005      	beq.n	800e73c <create_name+0x314>
 800e730:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e734:	f003 0303 	and.w	r3, r3, #3
 800e738:	2b03      	cmp	r3, #3
 800e73a:	d105      	bne.n	800e748 <create_name+0x320>
 800e73c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e740:	f043 0302 	orr.w	r3, r3, #2
 800e744:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e748:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e74c:	f003 0302 	and.w	r3, r3, #2
 800e750:	2b00      	cmp	r3, #0
 800e752:	d117      	bne.n	800e784 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e754:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e758:	f003 0303 	and.w	r3, r3, #3
 800e75c:	2b01      	cmp	r3, #1
 800e75e:	d105      	bne.n	800e76c <create_name+0x344>
 800e760:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e764:	f043 0310 	orr.w	r3, r3, #16
 800e768:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e76c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e770:	f003 030c 	and.w	r3, r3, #12
 800e774:	2b04      	cmp	r3, #4
 800e776:	d105      	bne.n	800e784 <create_name+0x35c>
 800e778:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e77c:	f043 0308 	orr.w	r3, r3, #8
 800e780:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800e78a:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 800e78e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800e790:	4618      	mov	r0, r3
 800e792:	3728      	adds	r7, #40	@ 0x28
 800e794:	46bd      	mov	sp, r7
 800e796:	bd80      	pop	{r7, pc}

0800e798 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b086      	sub	sp, #24
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
 800e7a0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e7a6:	693b      	ldr	r3, [r7, #16]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e7ac:	e002      	b.n	800e7b4 <follow_path+0x1c>
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	3301      	adds	r3, #1
 800e7b2:	603b      	str	r3, [r7, #0]
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	781b      	ldrb	r3, [r3, #0]
 800e7b8:	2b2f      	cmp	r3, #47	@ 0x2f
 800e7ba:	d0f8      	beq.n	800e7ae <follow_path+0x16>
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	781b      	ldrb	r3, [r3, #0]
 800e7c0:	2b5c      	cmp	r3, #92	@ 0x5c
 800e7c2:	d0f4      	beq.n	800e7ae <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e7c4:	693b      	ldr	r3, [r7, #16]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800e7ca:	693b      	ldr	r3, [r7, #16]
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	781b      	ldrb	r3, [r3, #0]
 800e7d4:	2b1f      	cmp	r3, #31
 800e7d6:	d80a      	bhi.n	800e7ee <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2280      	movs	r2, #128	@ 0x80
 800e7dc:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 800e7e0:	2100      	movs	r1, #0
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f7fe fc89 	bl	800d0fa <dir_sdi>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	75fb      	strb	r3, [r7, #23]
 800e7ec:	e078      	b.n	800e8e0 <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e7ee:	463b      	mov	r3, r7
 800e7f0:	4619      	mov	r1, r3
 800e7f2:	6878      	ldr	r0, [r7, #4]
 800e7f4:	f7ff fe18 	bl	800e428 <create_name>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e7fc:	7dfb      	ldrb	r3, [r7, #23]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d169      	bne.n	800e8d6 <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f7ff fb3f 	bl	800de86 <dir_find>
 800e808:	4603      	mov	r3, r0
 800e80a:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800e812:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e814:	7dfb      	ldrb	r3, [r7, #23]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d00a      	beq.n	800e830 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e81a:	7dfb      	ldrb	r3, [r7, #23]
 800e81c:	2b04      	cmp	r3, #4
 800e81e:	d15c      	bne.n	800e8da <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e820:	7afb      	ldrb	r3, [r7, #11]
 800e822:	f003 0304 	and.w	r3, r3, #4
 800e826:	2b00      	cmp	r3, #0
 800e828:	d157      	bne.n	800e8da <follow_path+0x142>
 800e82a:	2305      	movs	r3, #5
 800e82c:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e82e:	e054      	b.n	800e8da <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e830:	7afb      	ldrb	r3, [r7, #11]
 800e832:	f003 0304 	and.w	r3, r3, #4
 800e836:	2b00      	cmp	r3, #0
 800e838:	d151      	bne.n	800e8de <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e83a:	693b      	ldr	r3, [r7, #16]
 800e83c:	799b      	ldrb	r3, [r3, #6]
 800e83e:	f003 0310 	and.w	r3, r3, #16
 800e842:	2b00      	cmp	r3, #0
 800e844:	d102      	bne.n	800e84c <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800e846:	2305      	movs	r3, #5
 800e848:	75fb      	strb	r3, [r7, #23]
 800e84a:	e049      	b.n	800e8e0 <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	781b      	ldrb	r3, [r3, #0]
 800e850:	2b04      	cmp	r3, #4
 800e852:	d130      	bne.n	800e8b6 <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800e854:	693b      	ldr	r3, [r7, #16]
 800e856:	689a      	ldr	r2, [r3, #8]
 800e858:	693b      	ldr	r3, [r7, #16]
 800e85a:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800e85c:	693b      	ldr	r3, [r7, #16]
 800e85e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e862:	4613      	mov	r3, r2
 800e864:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e868:	693a      	ldr	r2, [r7, #16]
 800e86a:	79d2      	ldrb	r2, [r2, #7]
 800e86c:	431a      	orrs	r2, r3
 800e86e:	693b      	ldr	r3, [r7, #16]
 800e870:	625a      	str	r2, [r3, #36]	@ 0x24
				obj->c_ofs = dp->blk_ofs;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e876:	693b      	ldr	r3, [r7, #16]
 800e878:	629a      	str	r2, [r3, #40]	@ 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	691b      	ldr	r3, [r3, #16]
 800e87e:	3334      	adds	r3, #52	@ 0x34
 800e880:	4618      	mov	r0, r3
 800e882:	f7fd fa3b 	bl	800bcfc <ld_dword>
 800e886:	4602      	mov	r2, r0
 800e888:	693b      	ldr	r3, [r7, #16]
 800e88a:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	691b      	ldr	r3, [r3, #16]
 800e890:	3321      	adds	r3, #33	@ 0x21
 800e892:	781b      	ldrb	r3, [r3, #0]
 800e894:	f003 0302 	and.w	r3, r3, #2
 800e898:	b2da      	uxtb	r2, r3
 800e89a:	693b      	ldr	r3, [r7, #16]
 800e89c:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	691b      	ldr	r3, [r3, #16]
 800e8a2:	3338      	adds	r3, #56	@ 0x38
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f7fd fa4c 	bl	800bd42 <ld_qword>
 800e8aa:	4602      	mov	r2, r0
 800e8ac:	460b      	mov	r3, r1
 800e8ae:	6939      	ldr	r1, [r7, #16]
 800e8b0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800e8b4:	e79b      	b.n	800e7ee <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e8c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8c4:	4413      	add	r3, r2
 800e8c6:	4619      	mov	r1, r3
 800e8c8:	68f8      	ldr	r0, [r7, #12]
 800e8ca:	f7fe fdcd 	bl	800d468 <ld_clust>
 800e8ce:	4602      	mov	r2, r0
 800e8d0:	693b      	ldr	r3, [r7, #16]
 800e8d2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e8d4:	e78b      	b.n	800e7ee <follow_path+0x56>
			if (res != FR_OK) break;
 800e8d6:	bf00      	nop
 800e8d8:	e002      	b.n	800e8e0 <follow_path+0x148>
				break;
 800e8da:	bf00      	nop
 800e8dc:	e000      	b.n	800e8e0 <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e8de:	bf00      	nop
			}
		}
	}

	return res;
 800e8e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	3718      	adds	r7, #24
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}

0800e8ea <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e8ea:	b480      	push	{r7}
 800e8ec:	b087      	sub	sp, #28
 800e8ee:	af00      	add	r7, sp, #0
 800e8f0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e8f2:	f04f 33ff 	mov.w	r3, #4294967295
 800e8f6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d031      	beq.n	800e964 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	617b      	str	r3, [r7, #20]
 800e906:	e002      	b.n	800e90e <get_ldnumber+0x24>
 800e908:	697b      	ldr	r3, [r7, #20]
 800e90a:	3301      	adds	r3, #1
 800e90c:	617b      	str	r3, [r7, #20]
 800e90e:	697b      	ldr	r3, [r7, #20]
 800e910:	781b      	ldrb	r3, [r3, #0]
 800e912:	2b1f      	cmp	r3, #31
 800e914:	d903      	bls.n	800e91e <get_ldnumber+0x34>
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	781b      	ldrb	r3, [r3, #0]
 800e91a:	2b3a      	cmp	r3, #58	@ 0x3a
 800e91c:	d1f4      	bne.n	800e908 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e91e:	697b      	ldr	r3, [r7, #20]
 800e920:	781b      	ldrb	r3, [r3, #0]
 800e922:	2b3a      	cmp	r3, #58	@ 0x3a
 800e924:	d11c      	bne.n	800e960 <get_ldnumber+0x76>
			tp = *path;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	1c5a      	adds	r2, r3, #1
 800e930:	60fa      	str	r2, [r7, #12]
 800e932:	781b      	ldrb	r3, [r3, #0]
 800e934:	3b30      	subs	r3, #48	@ 0x30
 800e936:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	2b09      	cmp	r3, #9
 800e93c:	d80e      	bhi.n	800e95c <get_ldnumber+0x72>
 800e93e:	68fa      	ldr	r2, [r7, #12]
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	429a      	cmp	r2, r3
 800e944:	d10a      	bne.n	800e95c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e946:	68bb      	ldr	r3, [r7, #8]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d107      	bne.n	800e95c <get_ldnumber+0x72>
					vol = (int)i;
 800e94c:	68bb      	ldr	r3, [r7, #8]
 800e94e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e950:	697b      	ldr	r3, [r7, #20]
 800e952:	3301      	adds	r3, #1
 800e954:	617b      	str	r3, [r7, #20]
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	697a      	ldr	r2, [r7, #20]
 800e95a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e95c:	693b      	ldr	r3, [r7, #16]
 800e95e:	e002      	b.n	800e966 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e960:	2300      	movs	r3, #0
 800e962:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e964:	693b      	ldr	r3, [r7, #16]
}
 800e966:	4618      	mov	r0, r3
 800e968:	371c      	adds	r7, #28
 800e96a:	46bd      	mov	sp, r7
 800e96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e970:	4770      	bx	lr
	...

0800e974 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b082      	sub	sp, #8
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
 800e97c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2200      	movs	r2, #0
 800e982:	70da      	strb	r2, [r3, #3]
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f04f 32ff 	mov.w	r2, #4294967295
 800e98a:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e98c:	6839      	ldr	r1, [r7, #0]
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f7fd fdb0 	bl	800c4f4 <move_window>
 800e994:	4603      	mov	r3, r0
 800e996:	2b00      	cmp	r3, #0
 800e998:	d001      	beq.n	800e99e <check_fs+0x2a>
 800e99a:	2304      	movs	r3, #4
 800e99c:	e044      	b.n	800ea28 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	3338      	adds	r3, #56	@ 0x38
 800e9a2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f7fd f990 	bl	800bccc <ld_word>
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	461a      	mov	r2, r3
 800e9b0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d001      	beq.n	800e9bc <check_fs+0x48>
 800e9b8:	2303      	movs	r3, #3
 800e9ba:	e035      	b.n	800ea28 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e9c2:	2be9      	cmp	r3, #233	@ 0xe9
 800e9c4:	d009      	beq.n	800e9da <check_fs+0x66>
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e9cc:	2beb      	cmp	r3, #235	@ 0xeb
 800e9ce:	d11e      	bne.n	800ea0e <check_fs+0x9a>
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800e9d6:	2b90      	cmp	r3, #144	@ 0x90
 800e9d8:	d119      	bne.n	800ea0e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	3338      	adds	r3, #56	@ 0x38
 800e9de:	3336      	adds	r3, #54	@ 0x36
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	f7fd f98b 	bl	800bcfc <ld_dword>
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800e9ec:	4a10      	ldr	r2, [pc, #64]	@ (800ea30 <check_fs+0xbc>)
 800e9ee:	4293      	cmp	r3, r2
 800e9f0:	d101      	bne.n	800e9f6 <check_fs+0x82>
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	e018      	b.n	800ea28 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	3338      	adds	r3, #56	@ 0x38
 800e9fa:	3352      	adds	r3, #82	@ 0x52
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f7fd f97d 	bl	800bcfc <ld_dword>
 800ea02:	4603      	mov	r3, r0
 800ea04:	4a0b      	ldr	r2, [pc, #44]	@ (800ea34 <check_fs+0xc0>)
 800ea06:	4293      	cmp	r3, r2
 800ea08:	d101      	bne.n	800ea0e <check_fs+0x9a>
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	e00c      	b.n	800ea28 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	3338      	adds	r3, #56	@ 0x38
 800ea12:	220b      	movs	r2, #11
 800ea14:	4908      	ldr	r1, [pc, #32]	@ (800ea38 <check_fs+0xc4>)
 800ea16:	4618      	mov	r0, r3
 800ea18:	f7fd fb79 	bl	800c10e <mem_cmp>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d101      	bne.n	800ea26 <check_fs+0xb2>
 800ea22:	2301      	movs	r3, #1
 800ea24:	e000      	b.n	800ea28 <check_fs+0xb4>
#endif
	return 2;
 800ea26:	2302      	movs	r3, #2
}
 800ea28:	4618      	mov	r0, r3
 800ea2a:	3708      	adds	r7, #8
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}
 800ea30:	00544146 	.word	0x00544146
 800ea34:	33544146 	.word	0x33544146
 800ea38:	080161e8 	.word	0x080161e8

0800ea3c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ea3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ea40:	b09c      	sub	sp, #112	@ 0x70
 800ea42:	af00      	add	r7, sp, #0
 800ea44:	61f8      	str	r0, [r7, #28]
 800ea46:	61b9      	str	r1, [r7, #24]
 800ea48:	4613      	mov	r3, r2
 800ea4a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ea4c:	69bb      	ldr	r3, [r7, #24]
 800ea4e:	2200      	movs	r2, #0
 800ea50:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ea52:	69f8      	ldr	r0, [r7, #28]
 800ea54:	f7ff ff49 	bl	800e8ea <get_ldnumber>
 800ea58:	6578      	str	r0, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800ea5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	da01      	bge.n	800ea64 <find_volume+0x28>
 800ea60:	230b      	movs	r3, #11
 800ea62:	e337      	b.n	800f0d4 <find_volume+0x698>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ea64:	4a99      	ldr	r2, [pc, #612]	@ (800eccc <find_volume+0x290>)
 800ea66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea6c:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ea6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d101      	bne.n	800ea78 <find_volume+0x3c>
 800ea74:	230c      	movs	r3, #12
 800ea76:	e32d      	b.n	800f0d4 <find_volume+0x698>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ea78:	69bb      	ldr	r3, [r7, #24]
 800ea7a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ea7c:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ea7e:	7dfb      	ldrb	r3, [r7, #23]
 800ea80:	f023 0301 	bic.w	r3, r3, #1
 800ea84:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ea86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ea88:	781b      	ldrb	r3, [r3, #0]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d01a      	beq.n	800eac4 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800ea8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ea90:	785b      	ldrb	r3, [r3, #1]
 800ea92:	4618      	mov	r0, r3
 800ea94:	f7fd f85e 	bl	800bb54 <disk_status>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ea9e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800eaa2:	f003 0301 	and.w	r3, r3, #1
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d10c      	bne.n	800eac4 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800eaaa:	7dfb      	ldrb	r3, [r7, #23]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d007      	beq.n	800eac0 <find_volume+0x84>
 800eab0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800eab4:	f003 0304 	and.w	r3, r3, #4
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d001      	beq.n	800eac0 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800eabc:	230a      	movs	r3, #10
 800eabe:	e309      	b.n	800f0d4 <find_volume+0x698>
			}
			return FR_OK;				/* The file system object is valid */
 800eac0:	2300      	movs	r3, #0
 800eac2:	e307      	b.n	800f0d4 <find_volume+0x698>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800eac4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eac6:	2200      	movs	r2, #0
 800eac8:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800eaca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eacc:	b2da      	uxtb	r2, r3
 800eace:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ead0:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ead2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ead4:	785b      	ldrb	r3, [r3, #1]
 800ead6:	4618      	mov	r0, r3
 800ead8:	f7fd f84d 	bl	800bb76 <disk_initialize>
 800eadc:	4603      	mov	r3, r0
 800eade:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800eae2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800eae6:	f003 0301 	and.w	r3, r3, #1
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d001      	beq.n	800eaf2 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800eaee:	2303      	movs	r3, #3
 800eaf0:	e2f0      	b.n	800f0d4 <find_volume+0x698>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800eaf2:	7dfb      	ldrb	r3, [r7, #23]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d007      	beq.n	800eb08 <find_volume+0xcc>
 800eaf8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800eafc:	f003 0304 	and.w	r3, r3, #4
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d001      	beq.n	800eb08 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800eb04:	230a      	movs	r3, #10
 800eb06:	e2e5      	b.n	800f0d4 <find_volume+0x698>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800eb08:	2300      	movs	r3, #0
 800eb0a:	66bb      	str	r3, [r7, #104]	@ 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800eb0c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800eb0e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800eb10:	f7ff ff30 	bl	800e974 <check_fs>
 800eb14:	4603      	mov	r3, r0
 800eb16:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800eb1a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800eb1e:	2b02      	cmp	r3, #2
 800eb20:	d14d      	bne.n	800ebbe <find_volume+0x182>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800eb22:	2300      	movs	r3, #0
 800eb24:	65bb      	str	r3, [r7, #88]	@ 0x58
 800eb26:	e020      	b.n	800eb6a <find_volume+0x12e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800eb28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eb2a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800eb2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eb30:	011b      	lsls	r3, r3, #4
 800eb32:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800eb36:	4413      	add	r3, r2
 800eb38:	64bb      	str	r3, [r7, #72]	@ 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800eb3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eb3c:	3304      	adds	r3, #4
 800eb3e:	781b      	ldrb	r3, [r3, #0]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d006      	beq.n	800eb52 <find_volume+0x116>
 800eb44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eb46:	3308      	adds	r3, #8
 800eb48:	4618      	mov	r0, r3
 800eb4a:	f7fd f8d7 	bl	800bcfc <ld_dword>
 800eb4e:	4602      	mov	r2, r0
 800eb50:	e000      	b.n	800eb54 <find_volume+0x118>
 800eb52:	2200      	movs	r2, #0
 800eb54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eb56:	009b      	lsls	r3, r3, #2
 800eb58:	3360      	adds	r3, #96	@ 0x60
 800eb5a:	f107 0110 	add.w	r1, r7, #16
 800eb5e:	440b      	add	r3, r1
 800eb60:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800eb64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eb66:	3301      	adds	r3, #1
 800eb68:	65bb      	str	r3, [r7, #88]	@ 0x58
 800eb6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eb6c:	2b03      	cmp	r3, #3
 800eb6e:	d9db      	bls.n	800eb28 <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800eb70:	2300      	movs	r3, #0
 800eb72:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (i) i--;
 800eb74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d002      	beq.n	800eb80 <find_volume+0x144>
 800eb7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eb7c:	3b01      	subs	r3, #1
 800eb7e:	65bb      	str	r3, [r7, #88]	@ 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800eb80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eb82:	009b      	lsls	r3, r3, #2
 800eb84:	3360      	adds	r3, #96	@ 0x60
 800eb86:	f107 0210 	add.w	r2, r7, #16
 800eb8a:	4413      	add	r3, r2
 800eb8c:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800eb90:	66bb      	str	r3, [r7, #104]	@ 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800eb92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d005      	beq.n	800eba4 <find_volume+0x168>
 800eb98:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800eb9a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800eb9c:	f7ff feea 	bl	800e974 <check_fs>
 800eba0:	4603      	mov	r3, r0
 800eba2:	e000      	b.n	800eba6 <find_volume+0x16a>
 800eba4:	2303      	movs	r3, #3
 800eba6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ebaa:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ebae:	2b01      	cmp	r3, #1
 800ebb0:	d905      	bls.n	800ebbe <find_volume+0x182>
 800ebb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ebb4:	3301      	adds	r3, #1
 800ebb6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ebb8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ebba:	2b03      	cmp	r3, #3
 800ebbc:	d9e0      	bls.n	800eb80 <find_volume+0x144>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ebbe:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ebc2:	2b04      	cmp	r3, #4
 800ebc4:	d101      	bne.n	800ebca <find_volume+0x18e>
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	e284      	b.n	800f0d4 <find_volume+0x698>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ebca:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ebce:	2b01      	cmp	r3, #1
 800ebd0:	d901      	bls.n	800ebd6 <find_volume+0x19a>
 800ebd2:	230d      	movs	r3, #13
 800ebd4:	e27e      	b.n	800f0d4 <find_volume+0x698>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800ebd6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ebda:	2b01      	cmp	r3, #1
 800ebdc:	f040 80fa 	bne.w	800edd4 <find_volume+0x398>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800ebe0:	230b      	movs	r3, #11
 800ebe2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ebe4:	e002      	b.n	800ebec <find_volume+0x1b0>
 800ebe6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ebe8:	3301      	adds	r3, #1
 800ebea:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ebec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ebee:	2b3f      	cmp	r3, #63	@ 0x3f
 800ebf0:	d806      	bhi.n	800ec00 <find_volume+0x1c4>
 800ebf2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ebf4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ebf6:	4413      	add	r3, r2
 800ebf8:	3338      	adds	r3, #56	@ 0x38
 800ebfa:	781b      	ldrb	r3, [r3, #0]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d0f2      	beq.n	800ebe6 <find_volume+0x1aa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800ec00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ec02:	2b3f      	cmp	r3, #63	@ 0x3f
 800ec04:	d801      	bhi.n	800ec0a <find_volume+0x1ce>
 800ec06:	230d      	movs	r3, #13
 800ec08:	e264      	b.n	800f0d4 <find_volume+0x698>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800ec0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec0c:	3338      	adds	r3, #56	@ 0x38
 800ec0e:	3368      	adds	r3, #104	@ 0x68
 800ec10:	4618      	mov	r0, r3
 800ec12:	f7fd f85b 	bl	800bccc <ld_word>
 800ec16:	4603      	mov	r3, r0
 800ec18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ec1c:	d001      	beq.n	800ec22 <find_volume+0x1e6>
 800ec1e:	230d      	movs	r3, #13
 800ec20:	e258      	b.n	800f0d4 <find_volume+0x698>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800ec22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec24:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800ec28:	2b09      	cmp	r3, #9
 800ec2a:	d001      	beq.n	800ec30 <find_volume+0x1f4>
			return FR_NO_FILESYSTEM;
 800ec2c:	230d      	movs	r3, #13
 800ec2e:	e251      	b.n	800f0d4 <find_volume+0x698>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800ec30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec32:	3338      	adds	r3, #56	@ 0x38
 800ec34:	3348      	adds	r3, #72	@ 0x48
 800ec36:	4618      	mov	r0, r3
 800ec38:	f7fd f883 	bl	800bd42 <ld_qword>
 800ec3c:	4602      	mov	r2, r0
 800ec3e:	460b      	mov	r3, r1
 800ec40:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ec42:	2000      	movs	r0, #0
 800ec44:	60b9      	str	r1, [r7, #8]
 800ec46:	60f8      	str	r0, [r7, #12]
 800ec48:	68b9      	ldr	r1, [r7, #8]
 800ec4a:	1851      	adds	r1, r2, r1
 800ec4c:	6039      	str	r1, [r7, #0]
 800ec4e:	68f9      	ldr	r1, [r7, #12]
 800ec50:	eb43 0101 	adc.w	r1, r3, r1
 800ec54:	6079      	str	r1, [r7, #4]
 800ec56:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec5a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800ec5e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800ec62:	2b01      	cmp	r3, #1
 800ec64:	d301      	bcc.n	800ec6a <find_volume+0x22e>
 800ec66:	230d      	movs	r3, #13
 800ec68:	e234      	b.n	800f0d4 <find_volume+0x698>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800ec6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec6c:	3338      	adds	r3, #56	@ 0x38
 800ec6e:	3354      	adds	r3, #84	@ 0x54
 800ec70:	4618      	mov	r0, r3
 800ec72:	f7fd f843 	bl	800bcfc <ld_dword>
 800ec76:	4602      	mov	r2, r0
 800ec78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec7a:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800ec7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec7e:	f893 20a6 	ldrb.w	r2, [r3, #166]	@ 0xa6
 800ec82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec84:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800ec86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec88:	789b      	ldrb	r3, [r3, #2]
 800ec8a:	2b01      	cmp	r3, #1
 800ec8c:	d001      	beq.n	800ec92 <find_volume+0x256>
 800ec8e:	230d      	movs	r3, #13
 800ec90:	e220      	b.n	800f0d4 <find_volume+0x698>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800ec92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec94:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ec98:	461a      	mov	r2, r3
 800ec9a:	2301      	movs	r3, #1
 800ec9c:	4093      	lsls	r3, r2
 800ec9e:	b29a      	uxth	r2, r3
 800eca0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eca2:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800eca4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eca6:	895b      	ldrh	r3, [r3, #10]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d101      	bne.n	800ecb0 <find_volume+0x274>
 800ecac:	230d      	movs	r3, #13
 800ecae:	e211      	b.n	800f0d4 <find_volume+0x698>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800ecb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ecb2:	3338      	adds	r3, #56	@ 0x38
 800ecb4:	335c      	adds	r3, #92	@ 0x5c
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f7fd f820 	bl	800bcfc <ld_dword>
 800ecbc:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800ecbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ecc0:	4a03      	ldr	r2, [pc, #12]	@ (800ecd0 <find_volume+0x294>)
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d906      	bls.n	800ecd4 <find_volume+0x298>
 800ecc6:	230d      	movs	r3, #13
 800ecc8:	e204      	b.n	800f0d4 <find_volume+0x698>
 800ecca:	bf00      	nop
 800eccc:	20006bc4 	.word	0x20006bc4
 800ecd0:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800ecd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ecd6:	1c9a      	adds	r2, r3, #2
 800ecd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ecda:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800ecdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ecde:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ece0:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800ece2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ece4:	3338      	adds	r3, #56	@ 0x38
 800ece6:	3358      	adds	r3, #88	@ 0x58
 800ece8:	4618      	mov	r0, r3
 800ecea:	f7fd f807 	bl	800bcfc <ld_dword>
 800ecee:	4602      	mov	r2, r0
 800ecf0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ecf2:	441a      	add	r2, r3
 800ecf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ecf6:	631a      	str	r2, [r3, #48]	@ 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800ecf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ecfa:	3338      	adds	r3, #56	@ 0x38
 800ecfc:	3350      	adds	r3, #80	@ 0x50
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f7fc fffc 	bl	800bcfc <ld_dword>
 800ed04:	4602      	mov	r2, r0
 800ed06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ed08:	441a      	add	r2, r3
 800ed0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ed0c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800ed0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ed10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed12:	2200      	movs	r2, #0
 800ed14:	469a      	mov	sl, r3
 800ed16:	4693      	mov	fp, r2
 800ed18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ed1a:	895b      	ldrh	r3, [r3, #10]
 800ed1c:	461a      	mov	r2, r3
 800ed1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed20:	fb02 f303 	mul.w	r3, r2, r3
 800ed24:	2200      	movs	r2, #0
 800ed26:	4698      	mov	r8, r3
 800ed28:	4691      	mov	r9, r2
 800ed2a:	eb1a 0408 	adds.w	r4, sl, r8
 800ed2e:	eb4b 0509 	adc.w	r5, fp, r9
 800ed32:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800ed36:	42a2      	cmp	r2, r4
 800ed38:	41ab      	sbcs	r3, r5
 800ed3a:	d201      	bcs.n	800ed40 <find_volume+0x304>
 800ed3c:	230d      	movs	r3, #13
 800ed3e:	e1c9      	b.n	800f0d4 <find_volume+0x698>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800ed40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ed42:	3338      	adds	r3, #56	@ 0x38
 800ed44:	3360      	adds	r3, #96	@ 0x60
 800ed46:	4618      	mov	r0, r3
 800ed48:	f7fc ffd8 	bl	800bcfc <ld_dword>
 800ed4c:	4602      	mov	r2, r0
 800ed4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ed50:	62da      	str	r2, [r3, #44]	@ 0x2c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800ed52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ed54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed56:	4619      	mov	r1, r3
 800ed58:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ed5a:	f7fd fc67 	bl	800c62c <clust2sect>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	4619      	mov	r1, r3
 800ed62:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ed64:	f7fd fbc6 	bl	800c4f4 <move_window>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d001      	beq.n	800ed72 <find_volume+0x336>
 800ed6e:	2301      	movs	r3, #1
 800ed70:	e1b0      	b.n	800f0d4 <find_volume+0x698>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800ed72:	2300      	movs	r3, #0
 800ed74:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ed76:	e015      	b.n	800eda4 <find_volume+0x368>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800ed78:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ed7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ed7c:	4413      	add	r3, r2
 800ed7e:	3338      	adds	r3, #56	@ 0x38
 800ed80:	781b      	ldrb	r3, [r3, #0]
 800ed82:	2b81      	cmp	r3, #129	@ 0x81
 800ed84:	d10b      	bne.n	800ed9e <find_volume+0x362>
 800ed86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ed88:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800ed8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ed8e:	3314      	adds	r3, #20
 800ed90:	4413      	add	r3, r2
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7fc ffb2 	bl	800bcfc <ld_dword>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	2b02      	cmp	r3, #2
 800ed9c:	d007      	beq.n	800edae <find_volume+0x372>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800ed9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eda0:	3320      	adds	r3, #32
 800eda2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800eda4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eda6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800edaa:	d3e5      	bcc.n	800ed78 <find_volume+0x33c>
 800edac:	e000      	b.n	800edb0 <find_volume+0x374>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800edae:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800edb0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800edb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800edb6:	d101      	bne.n	800edbc <find_volume+0x380>
 800edb8:	230d      	movs	r3, #13
 800edba:	e18b      	b.n	800f0d4 <find_volume+0x698>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800edbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800edbe:	f04f 32ff 	mov.w	r2, #4294967295
 800edc2:	619a      	str	r2, [r3, #24]
 800edc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800edc6:	699a      	ldr	r2, [r3, #24]
 800edc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800edca:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800edcc:	2304      	movs	r3, #4
 800edce:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800edd2:	e167      	b.n	800f0a4 <find_volume+0x668>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800edd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800edd6:	3338      	adds	r3, #56	@ 0x38
 800edd8:	330b      	adds	r3, #11
 800edda:	4618      	mov	r0, r3
 800eddc:	f7fc ff76 	bl	800bccc <ld_word>
 800ede0:	4603      	mov	r3, r0
 800ede2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ede6:	d001      	beq.n	800edec <find_volume+0x3b0>
 800ede8:	230d      	movs	r3, #13
 800edea:	e173      	b.n	800f0d4 <find_volume+0x698>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800edec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800edee:	3338      	adds	r3, #56	@ 0x38
 800edf0:	3316      	adds	r3, #22
 800edf2:	4618      	mov	r0, r3
 800edf4:	f7fc ff6a 	bl	800bccc <ld_word>
 800edf8:	4603      	mov	r3, r0
 800edfa:	667b      	str	r3, [r7, #100]	@ 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800edfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d106      	bne.n	800ee10 <find_volume+0x3d4>
 800ee02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee04:	3338      	adds	r3, #56	@ 0x38
 800ee06:	3324      	adds	r3, #36	@ 0x24
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f7fc ff77 	bl	800bcfc <ld_dword>
 800ee0e:	6678      	str	r0, [r7, #100]	@ 0x64
		fs->fsize = fasize;
 800ee10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee12:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ee14:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ee16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee18:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800ee1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee1e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ee20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee22:	789b      	ldrb	r3, [r3, #2]
 800ee24:	2b01      	cmp	r3, #1
 800ee26:	d005      	beq.n	800ee34 <find_volume+0x3f8>
 800ee28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee2a:	789b      	ldrb	r3, [r3, #2]
 800ee2c:	2b02      	cmp	r3, #2
 800ee2e:	d001      	beq.n	800ee34 <find_volume+0x3f8>
 800ee30:	230d      	movs	r3, #13
 800ee32:	e14f      	b.n	800f0d4 <find_volume+0x698>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ee34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee36:	789b      	ldrb	r3, [r3, #2]
 800ee38:	461a      	mov	r2, r3
 800ee3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ee3c:	fb02 f303 	mul.w	r3, r2, r3
 800ee40:	667b      	str	r3, [r7, #100]	@ 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ee42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ee48:	461a      	mov	r2, r3
 800ee4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee4c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ee4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee50:	895b      	ldrh	r3, [r3, #10]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d008      	beq.n	800ee68 <find_volume+0x42c>
 800ee56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee58:	895b      	ldrh	r3, [r3, #10]
 800ee5a:	461a      	mov	r2, r3
 800ee5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee5e:	895b      	ldrh	r3, [r3, #10]
 800ee60:	3b01      	subs	r3, #1
 800ee62:	4013      	ands	r3, r2
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d001      	beq.n	800ee6c <find_volume+0x430>
 800ee68:	230d      	movs	r3, #13
 800ee6a:	e133      	b.n	800f0d4 <find_volume+0x698>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ee6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee6e:	3338      	adds	r3, #56	@ 0x38
 800ee70:	3311      	adds	r3, #17
 800ee72:	4618      	mov	r0, r3
 800ee74:	f7fc ff2a 	bl	800bccc <ld_word>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	461a      	mov	r2, r3
 800ee7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee7e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ee80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee82:	891b      	ldrh	r3, [r3, #8]
 800ee84:	f003 030f 	and.w	r3, r3, #15
 800ee88:	b29b      	uxth	r3, r3
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d001      	beq.n	800ee92 <find_volume+0x456>
 800ee8e:	230d      	movs	r3, #13
 800ee90:	e120      	b.n	800f0d4 <find_volume+0x698>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ee92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee94:	3338      	adds	r3, #56	@ 0x38
 800ee96:	3313      	adds	r3, #19
 800ee98:	4618      	mov	r0, r3
 800ee9a:	f7fc ff17 	bl	800bccc <ld_word>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	663b      	str	r3, [r7, #96]	@ 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800eea2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d106      	bne.n	800eeb6 <find_volume+0x47a>
 800eea8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eeaa:	3338      	adds	r3, #56	@ 0x38
 800eeac:	3320      	adds	r3, #32
 800eeae:	4618      	mov	r0, r3
 800eeb0:	f7fc ff24 	bl	800bcfc <ld_dword>
 800eeb4:	6638      	str	r0, [r7, #96]	@ 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800eeb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eeb8:	3338      	adds	r3, #56	@ 0x38
 800eeba:	330e      	adds	r3, #14
 800eebc:	4618      	mov	r0, r3
 800eebe:	f7fc ff05 	bl	800bccc <ld_word>
 800eec2:	4603      	mov	r3, r0
 800eec4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800eec8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d101      	bne.n	800eed4 <find_volume+0x498>
 800eed0:	230d      	movs	r3, #13
 800eed2:	e0ff      	b.n	800f0d4 <find_volume+0x698>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800eed4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800eed8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eeda:	4413      	add	r3, r2
 800eedc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800eede:	8912      	ldrh	r2, [r2, #8]
 800eee0:	0912      	lsrs	r2, r2, #4
 800eee2:	b292      	uxth	r2, r2
 800eee4:	4413      	add	r3, r2
 800eee6:	643b      	str	r3, [r7, #64]	@ 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800eee8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800eeea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eeec:	429a      	cmp	r2, r3
 800eeee:	d201      	bcs.n	800eef4 <find_volume+0x4b8>
 800eef0:	230d      	movs	r3, #13
 800eef2:	e0ef      	b.n	800f0d4 <find_volume+0x698>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800eef4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800eef6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eef8:	1ad3      	subs	r3, r2, r3
 800eefa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800eefc:	8952      	ldrh	r2, [r2, #10]
 800eefe:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef02:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ef04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d101      	bne.n	800ef0e <find_volume+0x4d2>
 800ef0a:	230d      	movs	r3, #13
 800ef0c:	e0e2      	b.n	800f0d4 <find_volume+0x698>
		fmt = FS_FAT32;
 800ef0e:	2303      	movs	r3, #3
 800ef10:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ef14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef16:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800ef1a:	4293      	cmp	r3, r2
 800ef1c:	d802      	bhi.n	800ef24 <find_volume+0x4e8>
 800ef1e:	2302      	movs	r3, #2
 800ef20:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ef24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef26:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800ef2a:	4293      	cmp	r3, r2
 800ef2c:	d802      	bhi.n	800ef34 <find_volume+0x4f8>
 800ef2e:	2301      	movs	r3, #1
 800ef30:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ef34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef36:	1c9a      	adds	r2, r3, #2
 800ef38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef3a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800ef3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef3e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ef40:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ef42:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800ef46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ef48:	441a      	add	r2, r3
 800ef4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef4c:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800ef4e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ef50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef52:	441a      	add	r2, r3
 800ef54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef56:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800ef58:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ef5c:	2b03      	cmp	r3, #3
 800ef5e:	d11e      	bne.n	800ef9e <find_volume+0x562>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ef60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef62:	3338      	adds	r3, #56	@ 0x38
 800ef64:	332a      	adds	r3, #42	@ 0x2a
 800ef66:	4618      	mov	r0, r3
 800ef68:	f7fc feb0 	bl	800bccc <ld_word>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d001      	beq.n	800ef76 <find_volume+0x53a>
 800ef72:	230d      	movs	r3, #13
 800ef74:	e0ae      	b.n	800f0d4 <find_volume+0x698>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ef76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef78:	891b      	ldrh	r3, [r3, #8]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d001      	beq.n	800ef82 <find_volume+0x546>
 800ef7e:	230d      	movs	r3, #13
 800ef80:	e0a8      	b.n	800f0d4 <find_volume+0x698>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ef82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef84:	3338      	adds	r3, #56	@ 0x38
 800ef86:	332c      	adds	r3, #44	@ 0x2c
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f7fc feb7 	bl	800bcfc <ld_dword>
 800ef8e:	4602      	mov	r2, r0
 800ef90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef92:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ef94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef96:	69db      	ldr	r3, [r3, #28]
 800ef98:	009b      	lsls	r3, r3, #2
 800ef9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ef9c:	e01f      	b.n	800efde <find_volume+0x5a2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ef9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800efa0:	891b      	ldrh	r3, [r3, #8]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d101      	bne.n	800efaa <find_volume+0x56e>
 800efa6:	230d      	movs	r3, #13
 800efa8:	e094      	b.n	800f0d4 <find_volume+0x698>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800efaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800efac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800efae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800efb0:	441a      	add	r2, r3
 800efb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800efb4:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800efb6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800efba:	2b02      	cmp	r3, #2
 800efbc:	d103      	bne.n	800efc6 <find_volume+0x58a>
 800efbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800efc0:	69db      	ldr	r3, [r3, #28]
 800efc2:	005b      	lsls	r3, r3, #1
 800efc4:	e00a      	b.n	800efdc <find_volume+0x5a0>
 800efc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800efc8:	69da      	ldr	r2, [r3, #28]
 800efca:	4613      	mov	r3, r2
 800efcc:	005b      	lsls	r3, r3, #1
 800efce:	4413      	add	r3, r2
 800efd0:	085a      	lsrs	r2, r3, #1
 800efd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800efd4:	69db      	ldr	r3, [r3, #28]
 800efd6:	f003 0301 	and.w	r3, r3, #1
 800efda:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800efdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800efde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800efe0:	6a1a      	ldr	r2, [r3, #32]
 800efe2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800efe4:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800efe8:	0a5b      	lsrs	r3, r3, #9
 800efea:	429a      	cmp	r2, r3
 800efec:	d201      	bcs.n	800eff2 <find_volume+0x5b6>
 800efee:	230d      	movs	r3, #13
 800eff0:	e070      	b.n	800f0d4 <find_volume+0x698>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800eff2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eff4:	f04f 32ff 	mov.w	r2, #4294967295
 800eff8:	619a      	str	r2, [r3, #24]
 800effa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800effc:	699a      	ldr	r2, [r3, #24]
 800effe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f000:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800f002:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f004:	2280      	movs	r2, #128	@ 0x80
 800f006:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f008:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800f00c:	2b03      	cmp	r3, #3
 800f00e:	d149      	bne.n	800f0a4 <find_volume+0x668>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f010:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f012:	3338      	adds	r3, #56	@ 0x38
 800f014:	3330      	adds	r3, #48	@ 0x30
 800f016:	4618      	mov	r0, r3
 800f018:	f7fc fe58 	bl	800bccc <ld_word>
 800f01c:	4603      	mov	r3, r0
 800f01e:	2b01      	cmp	r3, #1
 800f020:	d140      	bne.n	800f0a4 <find_volume+0x668>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f022:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f024:	3301      	adds	r3, #1
 800f026:	4619      	mov	r1, r3
 800f028:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800f02a:	f7fd fa63 	bl	800c4f4 <move_window>
 800f02e:	4603      	mov	r3, r0
 800f030:	2b00      	cmp	r3, #0
 800f032:	d137      	bne.n	800f0a4 <find_volume+0x668>
		{
			fs->fsi_flag = 0;
 800f034:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f036:	2200      	movs	r2, #0
 800f038:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f03a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f03c:	3338      	adds	r3, #56	@ 0x38
 800f03e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f042:	4618      	mov	r0, r3
 800f044:	f7fc fe42 	bl	800bccc <ld_word>
 800f048:	4603      	mov	r3, r0
 800f04a:	461a      	mov	r2, r3
 800f04c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f050:	429a      	cmp	r2, r3
 800f052:	d127      	bne.n	800f0a4 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f054:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f056:	3338      	adds	r3, #56	@ 0x38
 800f058:	4618      	mov	r0, r3
 800f05a:	f7fc fe4f 	bl	800bcfc <ld_dword>
 800f05e:	4603      	mov	r3, r0
 800f060:	4a1f      	ldr	r2, [pc, #124]	@ (800f0e0 <find_volume+0x6a4>)
 800f062:	4293      	cmp	r3, r2
 800f064:	d11e      	bne.n	800f0a4 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f066:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f068:	3338      	adds	r3, #56	@ 0x38
 800f06a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f06e:	4618      	mov	r0, r3
 800f070:	f7fc fe44 	bl	800bcfc <ld_dword>
 800f074:	4603      	mov	r3, r0
 800f076:	4a1b      	ldr	r2, [pc, #108]	@ (800f0e4 <find_volume+0x6a8>)
 800f078:	4293      	cmp	r3, r2
 800f07a:	d113      	bne.n	800f0a4 <find_volume+0x668>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f07c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f07e:	3338      	adds	r3, #56	@ 0x38
 800f080:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800f084:	4618      	mov	r0, r3
 800f086:	f7fc fe39 	bl	800bcfc <ld_dword>
 800f08a:	4602      	mov	r2, r0
 800f08c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f08e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f090:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f092:	3338      	adds	r3, #56	@ 0x38
 800f094:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800f098:	4618      	mov	r0, r3
 800f09a:	f7fc fe2f 	bl	800bcfc <ld_dword>
 800f09e:	4602      	mov	r2, r0
 800f0a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f0a2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f0a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f0a6:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800f0aa:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f0ac:	4b0e      	ldr	r3, [pc, #56]	@ (800f0e8 <find_volume+0x6ac>)
 800f0ae:	881b      	ldrh	r3, [r3, #0]
 800f0b0:	3301      	adds	r3, #1
 800f0b2:	b29a      	uxth	r2, r3
 800f0b4:	4b0c      	ldr	r3, [pc, #48]	@ (800f0e8 <find_volume+0x6ac>)
 800f0b6:	801a      	strh	r2, [r3, #0]
 800f0b8:	4b0b      	ldr	r3, [pc, #44]	@ (800f0e8 <find_volume+0x6ac>)
 800f0ba:	881a      	ldrh	r2, [r3, #0]
 800f0bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f0be:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800f0c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f0c2:	4a0a      	ldr	r2, [pc, #40]	@ (800f0ec <find_volume+0x6b0>)
 800f0c4:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800f0c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f0c8:	4a09      	ldr	r2, [pc, #36]	@ (800f0f0 <find_volume+0x6b4>)
 800f0ca:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f0cc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800f0ce:	f7fd f9a9 	bl	800c424 <clear_lock>
#endif
	return FR_OK;
 800f0d2:	2300      	movs	r3, #0
}
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	3770      	adds	r7, #112	@ 0x70
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f0de:	bf00      	nop
 800f0e0:	41615252 	.word	0x41615252
 800f0e4:	61417272 	.word	0x61417272
 800f0e8:	20006bc8 	.word	0x20006bc8
 800f0ec:	20006e3c 	.word	0x20006e3c
 800f0f0:	20006bdc 	.word	0x20006bdc

0800f0f4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b084      	sub	sp, #16
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
 800f0fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f0fe:	2309      	movs	r3, #9
 800f100:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d01c      	beq.n	800f142 <validate+0x4e>
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d018      	beq.n	800f142 <validate+0x4e>
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	781b      	ldrb	r3, [r3, #0]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d013      	beq.n	800f142 <validate+0x4e>
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	889a      	ldrh	r2, [r3, #4]
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	88db      	ldrh	r3, [r3, #6]
 800f124:	429a      	cmp	r2, r3
 800f126:	d10c      	bne.n	800f142 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	785b      	ldrb	r3, [r3, #1]
 800f12e:	4618      	mov	r0, r3
 800f130:	f7fc fd10 	bl	800bb54 <disk_status>
 800f134:	4603      	mov	r3, r0
 800f136:	f003 0301 	and.w	r3, r3, #1
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d101      	bne.n	800f142 <validate+0x4e>
			res = FR_OK;
 800f13e:	2300      	movs	r3, #0
 800f140:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f142:	7bfb      	ldrb	r3, [r7, #15]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d102      	bne.n	800f14e <validate+0x5a>
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	e000      	b.n	800f150 <validate+0x5c>
 800f14e:	2300      	movs	r3, #0
 800f150:	683a      	ldr	r2, [r7, #0]
 800f152:	6013      	str	r3, [r2, #0]
	return res;
 800f154:	7bfb      	ldrb	r3, [r7, #15]
}
 800f156:	4618      	mov	r0, r3
 800f158:	3710      	adds	r7, #16
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}
	...

0800f160 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b088      	sub	sp, #32
 800f164:	af00      	add	r7, sp, #0
 800f166:	60f8      	str	r0, [r7, #12]
 800f168:	60b9      	str	r1, [r7, #8]
 800f16a:	4613      	mov	r3, r2
 800f16c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f16e:	68bb      	ldr	r3, [r7, #8]
 800f170:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f172:	f107 0310 	add.w	r3, r7, #16
 800f176:	4618      	mov	r0, r3
 800f178:	f7ff fbb7 	bl	800e8ea <get_ldnumber>
 800f17c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f17e:	69fb      	ldr	r3, [r7, #28]
 800f180:	2b00      	cmp	r3, #0
 800f182:	da01      	bge.n	800f188 <f_mount+0x28>
 800f184:	230b      	movs	r3, #11
 800f186:	e02b      	b.n	800f1e0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f188:	4a17      	ldr	r2, [pc, #92]	@ (800f1e8 <f_mount+0x88>)
 800f18a:	69fb      	ldr	r3, [r7, #28]
 800f18c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f190:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f192:	69bb      	ldr	r3, [r7, #24]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d005      	beq.n	800f1a4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f198:	69b8      	ldr	r0, [r7, #24]
 800f19a:	f7fd f943 	bl	800c424 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f19e:	69bb      	ldr	r3, [r7, #24]
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d002      	beq.n	800f1b0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f1b0:	68fa      	ldr	r2, [r7, #12]
 800f1b2:	490d      	ldr	r1, [pc, #52]	@ (800f1e8 <f_mount+0x88>)
 800f1b4:	69fb      	ldr	r3, [r7, #28]
 800f1b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d002      	beq.n	800f1c6 <f_mount+0x66>
 800f1c0:	79fb      	ldrb	r3, [r7, #7]
 800f1c2:	2b01      	cmp	r3, #1
 800f1c4:	d001      	beq.n	800f1ca <f_mount+0x6a>
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	e00a      	b.n	800f1e0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f1ca:	f107 010c 	add.w	r1, r7, #12
 800f1ce:	f107 0308 	add.w	r3, r7, #8
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f7ff fc31 	bl	800ea3c <find_volume>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f1de:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	3720      	adds	r7, #32
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}
 800f1e8:	20006bc4 	.word	0x20006bc4

0800f1ec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f1ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f1f0:	b0a6      	sub	sp, #152	@ 0x98
 800f1f2:	af00      	add	r7, sp, #0
 800f1f4:	61f8      	str	r0, [r7, #28]
 800f1f6:	61b9      	str	r1, [r7, #24]
 800f1f8:	4613      	mov	r3, r2
 800f1fa:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f1fc:	69fb      	ldr	r3, [r7, #28]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d101      	bne.n	800f206 <f_open+0x1a>
 800f202:	2309      	movs	r3, #9
 800f204:	e2aa      	b.n	800f75c <f_open+0x570>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f206:	7dfb      	ldrb	r3, [r7, #23]
 800f208:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f20c:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 800f20e:	7dfa      	ldrb	r2, [r7, #23]
 800f210:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800f214:	f107 0318 	add.w	r3, r7, #24
 800f218:	4618      	mov	r0, r3
 800f21a:	f7ff fc0f 	bl	800ea3c <find_volume>
 800f21e:	4603      	mov	r3, r0
 800f220:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	if (res == FR_OK) {
 800f224:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800f228:	2b00      	cmp	r3, #0
 800f22a:	f040 828e 	bne.w	800f74a <f_open+0x55e>
		dj.obj.fs = fs;
 800f22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f230:	62bb      	str	r3, [r7, #40]	@ 0x28
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f232:	69ba      	ldr	r2, [r7, #24]
 800f234:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f238:	4611      	mov	r1, r2
 800f23a:	4618      	mov	r0, r3
 800f23c:	f7ff faac 	bl	800e798 <follow_path>
 800f240:	4603      	mov	r3, r0
 800f242:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f246:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d118      	bne.n	800f280 <f_open+0x94>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f24e:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800f252:	b25b      	sxtb	r3, r3
 800f254:	2b00      	cmp	r3, #0
 800f256:	da03      	bge.n	800f260 <f_open+0x74>
				res = FR_INVALID_NAME;
 800f258:	2306      	movs	r3, #6
 800f25a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800f25e:	e00f      	b.n	800f280 <f_open+0x94>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f260:	7dfb      	ldrb	r3, [r7, #23]
 800f262:	2b01      	cmp	r3, #1
 800f264:	bf8c      	ite	hi
 800f266:	2301      	movhi	r3, #1
 800f268:	2300      	movls	r3, #0
 800f26a:	b2db      	uxtb	r3, r3
 800f26c:	461a      	mov	r2, r3
 800f26e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f272:	4611      	mov	r1, r2
 800f274:	4618      	mov	r0, r3
 800f276:	f7fc ff8d 	bl	800c194 <chk_lock>
 800f27a:	4603      	mov	r3, r0
 800f27c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f280:	7dfb      	ldrb	r3, [r7, #23]
 800f282:	f003 031c 	and.w	r3, r3, #28
 800f286:	2b00      	cmp	r3, #0
 800f288:	f000 8115 	beq.w	800f4b6 <f_open+0x2ca>
			if (res != FR_OK) {					/* No file, create new */
 800f28c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800f290:	2b00      	cmp	r3, #0
 800f292:	d017      	beq.n	800f2c4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f294:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800f298:	2b04      	cmp	r3, #4
 800f29a:	d10e      	bne.n	800f2ba <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f29c:	f7fc ffd6 	bl	800c24c <enq_lock>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d006      	beq.n	800f2b4 <f_open+0xc8>
 800f2a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f7fe ff16 	bl	800e0dc <dir_register>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	e000      	b.n	800f2b6 <f_open+0xca>
 800f2b4:	2312      	movs	r3, #18
 800f2b6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f2ba:	7dfb      	ldrb	r3, [r7, #23]
 800f2bc:	f043 0308 	orr.w	r3, r3, #8
 800f2c0:	75fb      	strb	r3, [r7, #23]
 800f2c2:	e011      	b.n	800f2e8 <f_open+0xfc>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f2c4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f2c8:	f003 0311 	and.w	r3, r3, #17
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d003      	beq.n	800f2d8 <f_open+0xec>
					res = FR_DENIED;
 800f2d0:	2307      	movs	r3, #7
 800f2d2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800f2d6:	e007      	b.n	800f2e8 <f_open+0xfc>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f2d8:	7dfb      	ldrb	r3, [r7, #23]
 800f2da:	f003 0304 	and.w	r3, r3, #4
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d002      	beq.n	800f2e8 <f_open+0xfc>
 800f2e2:	2308      	movs	r3, #8
 800f2e4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f2e8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	f040 80fe 	bne.w	800f4ee <f_open+0x302>
 800f2f2:	7dfb      	ldrb	r3, [r7, #23]
 800f2f4:	f003 0308 	and.w	r3, r3, #8
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	f000 80f8 	beq.w	800f4ee <f_open+0x302>
				dw = GET_FATTIME();
 800f2fe:	f7fc fc21 	bl	800bb44 <get_fattime>
 800f302:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800f306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f308:	781b      	ldrb	r3, [r3, #0]
 800f30a:	2b04      	cmp	r3, #4
 800f30c:	f040 8084 	bne.w	800f418 <f_open+0x22c>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800f310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f312:	69fb      	ldr	r3, [r7, #28]
 800f314:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800f316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f318:	691b      	ldr	r3, [r3, #16]
 800f31a:	3334      	adds	r3, #52	@ 0x34
 800f31c:	4618      	mov	r0, r3
 800f31e:	f7fc fced 	bl	800bcfc <ld_dword>
 800f322:	4602      	mov	r2, r0
 800f324:	69fb      	ldr	r3, [r7, #28]
 800f326:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800f328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f32a:	691b      	ldr	r3, [r3, #16]
 800f32c:	3338      	adds	r3, #56	@ 0x38
 800f32e:	4618      	mov	r0, r3
 800f330:	f7fc fd07 	bl	800bd42 <ld_qword>
 800f334:	4602      	mov	r2, r0
 800f336:	460b      	mov	r3, r1
 800f338:	69f9      	ldr	r1, [r7, #28]
 800f33a:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800f33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f340:	691b      	ldr	r3, [r3, #16]
 800f342:	3321      	adds	r3, #33	@ 0x21
 800f344:	781b      	ldrb	r3, [r3, #0]
 800f346:	f003 0302 	and.w	r3, r3, #2
 800f34a:	b2da      	uxtb	r2, r3
 800f34c:	69fb      	ldr	r3, [r7, #28]
 800f34e:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800f350:	69fb      	ldr	r3, [r7, #28]
 800f352:	2200      	movs	r2, #0
 800f354:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800f356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f358:	691b      	ldr	r3, [r3, #16]
 800f35a:	3308      	adds	r3, #8
 800f35c:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800f360:	4618      	mov	r0, r3
 800f362:	f7fc fde4 	bl	800bf2e <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800f366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f368:	691b      	ldr	r3, [r3, #16]
 800f36a:	3314      	adds	r3, #20
 800f36c:	2200      	movs	r2, #0
 800f36e:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800f370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f372:	691b      	ldr	r3, [r3, #16]
 800f374:	330c      	adds	r3, #12
 800f376:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800f37a:	4618      	mov	r0, r3
 800f37c:	f7fc fdd7 	bl	800bf2e <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800f380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f382:	691b      	ldr	r3, [r3, #16]
 800f384:	3315      	adds	r3, #21
 800f386:	2200      	movs	r2, #0
 800f388:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800f38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f38c:	691b      	ldr	r3, [r3, #16]
 800f38e:	3304      	adds	r3, #4
 800f390:	2220      	movs	r2, #32
 800f392:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800f394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f396:	691b      	ldr	r3, [r3, #16]
 800f398:	3334      	adds	r3, #52	@ 0x34
 800f39a:	2100      	movs	r1, #0
 800f39c:	4618      	mov	r0, r3
 800f39e:	f7fc fdc6 	bl	800bf2e <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800f3a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3a4:	691b      	ldr	r3, [r3, #16]
 800f3a6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800f3aa:	f04f 0200 	mov.w	r2, #0
 800f3ae:	f04f 0300 	mov.w	r3, #0
 800f3b2:	4608      	mov	r0, r1
 800f3b4:	f7fc fde7 	bl	800bf86 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800f3b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3ba:	691b      	ldr	r3, [r3, #16]
 800f3bc:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800f3c0:	f04f 0200 	mov.w	r2, #0
 800f3c4:	f04f 0300 	mov.w	r3, #0
 800f3c8:	4608      	mov	r0, r1
 800f3ca:	f7fc fddc 	bl	800bf86 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800f3ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3d0:	691b      	ldr	r3, [r3, #16]
 800f3d2:	3321      	adds	r3, #33	@ 0x21
 800f3d4:	2201      	movs	r2, #1
 800f3d6:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800f3d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f3dc:	4618      	mov	r0, r3
 800f3de:	f7fe fbc9 	bl	800db74 <store_xdir>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800f3e8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d17e      	bne.n	800f4ee <f_open+0x302>
 800f3f0:	69fb      	ldr	r3, [r7, #28]
 800f3f2:	689b      	ldr	r3, [r3, #8]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d07a      	beq.n	800f4ee <f_open+0x302>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800f3f8:	69f8      	ldr	r0, [r7, #28]
 800f3fa:	69fb      	ldr	r3, [r7, #28]
 800f3fc:	689b      	ldr	r3, [r3, #8]
 800f3fe:	2200      	movs	r2, #0
 800f400:	4619      	mov	r1, r3
 800f402:	f7fd fc81 	bl	800cd08 <remove_chain>
 800f406:	4603      	mov	r3, r0
 800f408:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800f40c:	69fb      	ldr	r3, [r7, #28]
 800f40e:	689a      	ldr	r2, [r3, #8]
 800f410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f412:	3a01      	subs	r2, #1
 800f414:	615a      	str	r2, [r3, #20]
 800f416:	e06a      	b.n	800f4ee <f_open+0x302>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f418:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f41a:	330e      	adds	r3, #14
 800f41c:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800f420:	4618      	mov	r0, r3
 800f422:	f7fc fd84 	bl	800bf2e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f426:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f428:	3316      	adds	r3, #22
 800f42a:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800f42e:	4618      	mov	r0, r3
 800f430:	f7fc fd7d 	bl	800bf2e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f434:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f436:	330b      	adds	r3, #11
 800f438:	2220      	movs	r2, #32
 800f43a:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f43c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f43e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f440:	4611      	mov	r1, r2
 800f442:	4618      	mov	r0, r3
 800f444:	f7fe f810 	bl	800d468 <ld_clust>
 800f448:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f44c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f44e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800f450:	2200      	movs	r2, #0
 800f452:	4618      	mov	r0, r3
 800f454:	f7fe f827 	bl	800d4a6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f458:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f45a:	331c      	adds	r3, #28
 800f45c:	2100      	movs	r1, #0
 800f45e:	4618      	mov	r0, r3
 800f460:	f7fc fd65 	bl	800bf2e <st_dword>
					fs->wflag = 1;
 800f464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f466:	2201      	movs	r2, #1
 800f468:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f46a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d03d      	beq.n	800f4ee <f_open+0x302>
						dw = fs->winsect;
 800f472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f476:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
						res = remove_chain(&dj.obj, cl, 0);
 800f47a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f47e:	2200      	movs	r2, #0
 800f480:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800f484:	4618      	mov	r0, r3
 800f486:	f7fd fc3f 	bl	800cd08 <remove_chain>
 800f48a:	4603      	mov	r3, r0
 800f48c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
						if (res == FR_OK) {
 800f490:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800f494:	2b00      	cmp	r3, #0
 800f496:	d12a      	bne.n	800f4ee <f_open+0x302>
							res = move_window(fs, dw);
 800f498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f49a:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f7fd f828 	bl	800c4f4 <move_window>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f4b0:	3a01      	subs	r2, #1
 800f4b2:	615a      	str	r2, [r3, #20]
 800f4b4:	e01b      	b.n	800f4ee <f_open+0x302>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f4b6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d117      	bne.n	800f4ee <f_open+0x302>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f4be:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f4c2:	f003 0310 	and.w	r3, r3, #16
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d003      	beq.n	800f4d2 <f_open+0x2e6>
					res = FR_NO_FILE;
 800f4ca:	2304      	movs	r3, #4
 800f4cc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800f4d0:	e00d      	b.n	800f4ee <f_open+0x302>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f4d2:	7dfb      	ldrb	r3, [r7, #23]
 800f4d4:	f003 0302 	and.w	r3, r3, #2
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d008      	beq.n	800f4ee <f_open+0x302>
 800f4dc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f4e0:	f003 0301 	and.w	r3, r3, #1
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d002      	beq.n	800f4ee <f_open+0x302>
						res = FR_DENIED;
 800f4e8:	2307      	movs	r3, #7
 800f4ea:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					}
				}
			}
		}
		if (res == FR_OK) {
 800f4ee:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d126      	bne.n	800f544 <f_open+0x358>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f4f6:	7dfb      	ldrb	r3, [r7, #23]
 800f4f8:	f003 0308 	and.w	r3, r3, #8
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d003      	beq.n	800f508 <f_open+0x31c>
				mode |= FA_MODIFIED;
 800f500:	7dfb      	ldrb	r3, [r7, #23]
 800f502:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f506:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f50a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f50c:	69fb      	ldr	r3, [r7, #28]
 800f50e:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 800f510:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f512:	69fb      	ldr	r3, [r7, #28]
 800f514:	64da      	str	r2, [r3, #76]	@ 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f516:	7dfb      	ldrb	r3, [r7, #23]
 800f518:	2b01      	cmp	r3, #1
 800f51a:	bf8c      	ite	hi
 800f51c:	2301      	movhi	r3, #1
 800f51e:	2300      	movls	r3, #0
 800f520:	b2db      	uxtb	r3, r3
 800f522:	461a      	mov	r2, r3
 800f524:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f528:	4611      	mov	r1, r2
 800f52a:	4618      	mov	r0, r3
 800f52c:	f7fc feb0 	bl	800c290 <inc_lock>
 800f530:	4602      	mov	r2, r0
 800f532:	69fb      	ldr	r3, [r7, #28]
 800f534:	62da      	str	r2, [r3, #44]	@ 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f536:	69fb      	ldr	r3, [r7, #28]
 800f538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d102      	bne.n	800f544 <f_open+0x358>
 800f53e:	2302      	movs	r3, #2
 800f540:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f544:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800f548:	2b00      	cmp	r3, #0
 800f54a:	f040 80fe 	bne.w	800f74a <f_open+0x55e>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800f54e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f550:	781b      	ldrb	r3, [r3, #0]
 800f552:	2b04      	cmp	r3, #4
 800f554:	d12d      	bne.n	800f5b2 <f_open+0x3c6>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800f556:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f558:	69fb      	ldr	r3, [r7, #28]
 800f55a:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800f55c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800f560:	4613      	mov	r3, r2
 800f562:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800f566:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800f56a:	431a      	orrs	r2, r3
 800f56c:	69fb      	ldr	r3, [r7, #28]
 800f56e:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800f570:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800f572:	69fb      	ldr	r3, [r7, #28]
 800f574:	629a      	str	r2, [r3, #40]	@ 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800f576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f578:	691b      	ldr	r3, [r3, #16]
 800f57a:	3334      	adds	r3, #52	@ 0x34
 800f57c:	4618      	mov	r0, r3
 800f57e:	f7fc fbbd 	bl	800bcfc <ld_dword>
 800f582:	4602      	mov	r2, r0
 800f584:	69fb      	ldr	r3, [r7, #28]
 800f586:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800f588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f58a:	691b      	ldr	r3, [r3, #16]
 800f58c:	3338      	adds	r3, #56	@ 0x38
 800f58e:	4618      	mov	r0, r3
 800f590:	f7fc fbd7 	bl	800bd42 <ld_qword>
 800f594:	4602      	mov	r2, r0
 800f596:	460b      	mov	r3, r1
 800f598:	69f9      	ldr	r1, [r7, #28]
 800f59a:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800f59e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5a0:	691b      	ldr	r3, [r3, #16]
 800f5a2:	3321      	adds	r3, #33	@ 0x21
 800f5a4:	781b      	ldrb	r3, [r3, #0]
 800f5a6:	f003 0302 	and.w	r3, r3, #2
 800f5aa:	b2da      	uxtb	r2, r3
 800f5ac:	69fb      	ldr	r3, [r7, #28]
 800f5ae:	71da      	strb	r2, [r3, #7]
 800f5b0:	e016      	b.n	800f5e0 <f_open+0x3f4>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5b4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f5b6:	4611      	mov	r1, r2
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f7fd ff55 	bl	800d468 <ld_clust>
 800f5be:	4602      	mov	r2, r0
 800f5c0:	69fb      	ldr	r3, [r7, #28]
 800f5c2:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f5c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f5c6:	331c      	adds	r3, #28
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	f7fc fb97 	bl	800bcfc <ld_dword>
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	60bb      	str	r3, [r7, #8]
 800f5d4:	60fa      	str	r2, [r7, #12]
 800f5d6:	69fb      	ldr	r3, [r7, #28]
 800f5d8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f5dc:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f5e0:	69fb      	ldr	r3, [r7, #28]
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f5e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f5e8:	69fb      	ldr	r3, [r7, #28]
 800f5ea:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5ee:	88da      	ldrh	r2, [r3, #6]
 800f5f0:	69fb      	ldr	r3, [r7, #28]
 800f5f2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f5f4:	69fb      	ldr	r3, [r7, #28]
 800f5f6:	7dfa      	ldrb	r2, [r7, #23]
 800f5f8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;			/* Clear error flag */
 800f5fc:	69fb      	ldr	r3, [r7, #28]
 800f5fe:	2200      	movs	r2, #0
 800f600:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800f604:	69fb      	ldr	r3, [r7, #28]
 800f606:	2200      	movs	r2, #0
 800f608:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f60a:	69f9      	ldr	r1, [r7, #28]
 800f60c:	f04f 0200 	mov.w	r2, #0
 800f610:	f04f 0300 	mov.w	r3, #0
 800f614:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f618:	69fb      	ldr	r3, [r7, #28]
 800f61a:	3354      	adds	r3, #84	@ 0x54
 800f61c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f620:	2100      	movs	r1, #0
 800f622:	4618      	mov	r0, r3
 800f624:	f7fc fd58 	bl	800c0d8 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f628:	7dfb      	ldrb	r3, [r7, #23]
 800f62a:	f003 0320 	and.w	r3, r3, #32
 800f62e:	2b00      	cmp	r3, #0
 800f630:	f000 808b 	beq.w	800f74a <f_open+0x55e>
 800f634:	69fb      	ldr	r3, [r7, #28]
 800f636:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f63a:	4313      	orrs	r3, r2
 800f63c:	f000 8085 	beq.w	800f74a <f_open+0x55e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f640:	69fb      	ldr	r3, [r7, #28]
 800f642:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f646:	69f9      	ldr	r1, [r7, #28]
 800f648:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f64e:	895b      	ldrh	r3, [r3, #10]
 800f650:	025b      	lsls	r3, r3, #9
 800f652:	67fb      	str	r3, [r7, #124]	@ 0x7c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f654:	69fb      	ldr	r3, [r7, #28]
 800f656:	689b      	ldr	r3, [r3, #8]
 800f658:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f65c:	69fb      	ldr	r3, [r7, #28]
 800f65e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f662:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
 800f666:	e026      	b.n	800f6b6 <f_open+0x4ca>
					clst = get_fat(&fp->obj, clst);
 800f668:	69fb      	ldr	r3, [r7, #28]
 800f66a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f66e:	4618      	mov	r0, r3
 800f670:	f7fc fffc 	bl	800c66c <get_fat>
 800f674:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
					if (clst <= 1) res = FR_INT_ERR;
 800f678:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f67c:	2b01      	cmp	r3, #1
 800f67e:	d802      	bhi.n	800f686 <f_open+0x49a>
 800f680:	2302      	movs	r3, #2
 800f682:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f686:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f68e:	d102      	bne.n	800f696 <f_open+0x4aa>
 800f690:	2301      	movs	r3, #1
 800f692:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f696:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f698:	2200      	movs	r2, #0
 800f69a:	469a      	mov	sl, r3
 800f69c:	4693      	mov	fp, r2
 800f69e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800f6a2:	ebb2 010a 	subs.w	r1, r2, sl
 800f6a6:	6039      	str	r1, [r7, #0]
 800f6a8:	eb63 030b 	sbc.w	r3, r3, fp
 800f6ac:	607b      	str	r3, [r7, #4]
 800f6ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6b2:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
 800f6b6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d109      	bne.n	800f6d2 <f_open+0x4e6>
 800f6be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	4698      	mov	r8, r3
 800f6c4:	4691      	mov	r9, r2
 800f6c6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800f6ca:	4590      	cmp	r8, r2
 800f6cc:	eb79 0303 	sbcs.w	r3, r9, r3
 800f6d0:	d3ca      	bcc.n	800f668 <f_open+0x47c>
				}
				fp->clust = clst;
 800f6d2:	69fb      	ldr	r3, [r7, #28]
 800f6d4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800f6d8:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f6da:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d133      	bne.n	800f74a <f_open+0x55e>
 800f6e2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800f6e6:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800f6ea:	2500      	movs	r5, #0
 800f6ec:	ea54 0305 	orrs.w	r3, r4, r5
 800f6f0:	d02b      	beq.n	800f74a <f_open+0x55e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f6f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f7fc ff97 	bl	800c62c <clust2sect>
 800f6fe:	67b8      	str	r0, [r7, #120]	@ 0x78
 800f700:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f702:	2b00      	cmp	r3, #0
 800f704:	d103      	bne.n	800f70e <f_open+0x522>
						res = FR_INT_ERR;
 800f706:	2302      	movs	r3, #2
 800f708:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800f70c:	e01d      	b.n	800f74a <f_open+0x55e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f70e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800f712:	f04f 0200 	mov.w	r2, #0
 800f716:	f04f 0300 	mov.w	r3, #0
 800f71a:	0a42      	lsrs	r2, r0, #9
 800f71c:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800f720:	0a4b      	lsrs	r3, r1, #9
 800f722:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f724:	441a      	add	r2, r3
 800f726:	69fb      	ldr	r3, [r7, #28]
 800f728:	645a      	str	r2, [r3, #68]	@ 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f72c:	7858      	ldrb	r0, [r3, #1]
 800f72e:	69fb      	ldr	r3, [r7, #28]
 800f730:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800f734:	69fb      	ldr	r3, [r7, #28]
 800f736:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f738:	2301      	movs	r3, #1
 800f73a:	f7fc fa32 	bl	800bba2 <disk_read>
 800f73e:	4603      	mov	r3, r0
 800f740:	2b00      	cmp	r3, #0
 800f742:	d002      	beq.n	800f74a <f_open+0x55e>
 800f744:	2301      	movs	r3, #1
 800f746:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f74a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d002      	beq.n	800f758 <f_open+0x56c>
 800f752:	69fb      	ldr	r3, [r7, #28]
 800f754:	2200      	movs	r2, #0
 800f756:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f758:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800f75c:	4618      	mov	r0, r3
 800f75e:	3798      	adds	r7, #152	@ 0x98
 800f760:	46bd      	mov	sp, r7
 800f762:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f766 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800f766:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f76a:	b095      	sub	sp, #84	@ 0x54
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	61f8      	str	r0, [r7, #28]
 800f770:	61b9      	str	r1, [r7, #24]
 800f772:	617a      	str	r2, [r7, #20]
 800f774:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800f776:	69bb      	ldr	r3, [r7, #24]
 800f778:	63fb      	str	r3, [r7, #60]	@ 0x3c


	*br = 0;	/* Clear read byte counter */
 800f77a:	693b      	ldr	r3, [r7, #16]
 800f77c:	2200      	movs	r2, #0
 800f77e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800f780:	69fb      	ldr	r3, [r7, #28]
 800f782:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800f786:	4611      	mov	r1, r2
 800f788:	4618      	mov	r0, r3
 800f78a:	f7ff fcb3 	bl	800f0f4 <validate>
 800f78e:	4603      	mov	r3, r0
 800f790:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f794:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d108      	bne.n	800f7ae <f_read+0x48>
 800f79c:	69fb      	ldr	r3, [r7, #28]
 800f79e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800f7a2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800f7a6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d002      	beq.n	800f7b4 <f_read+0x4e>
 800f7ae:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f7b2:	e14b      	b.n	800fa4c <f_read+0x2e6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800f7b4:	69fb      	ldr	r3, [r7, #28]
 800f7b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f7ba:	f003 0301 	and.w	r3, r3, #1
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d101      	bne.n	800f7c6 <f_read+0x60>
 800f7c2:	2307      	movs	r3, #7
 800f7c4:	e142      	b.n	800fa4c <f_read+0x2e6>
	remain = fp->obj.objsize - fp->fptr;
 800f7c6:	69fb      	ldr	r3, [r7, #28]
 800f7c8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800f7cc:	69fb      	ldr	r3, [r7, #28]
 800f7ce:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f7d2:	1a86      	subs	r6, r0, r2
 800f7d4:	603e      	str	r6, [r7, #0]
 800f7d6:	eb61 0303 	sbc.w	r3, r1, r3
 800f7da:	607b      	str	r3, [r7, #4]
 800f7dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f7e0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800f7e4:	697b      	ldr	r3, [r7, #20]
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	469a      	mov	sl, r3
 800f7ea:	4693      	mov	fp, r2
 800f7ec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800f7f0:	4552      	cmp	r2, sl
 800f7f2:	eb73 030b 	sbcs.w	r3, r3, fp
 800f7f6:	f080 8124 	bcs.w	800fa42 <f_read+0x2dc>
 800f7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7fc:	617b      	str	r3, [r7, #20]

	for ( ;  btr;								/* Repeat until all data read */
 800f7fe:	e120      	b.n	800fa42 <f_read+0x2dc>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800f800:	69fb      	ldr	r3, [r7, #28]
 800f802:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f806:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800f80a:	2500      	movs	r5, #0
 800f80c:	ea54 0305 	orrs.w	r3, r4, r5
 800f810:	f040 80d9 	bne.w	800f9c6 <f_read+0x260>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800f814:	69fb      	ldr	r3, [r7, #28]
 800f816:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800f81a:	f04f 0200 	mov.w	r2, #0
 800f81e:	f04f 0300 	mov.w	r3, #0
 800f822:	0a42      	lsrs	r2, r0, #9
 800f824:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800f828:	0a4b      	lsrs	r3, r1, #9
 800f82a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f82c:	895b      	ldrh	r3, [r3, #10]
 800f82e:	3b01      	subs	r3, #1
 800f830:	4013      	ands	r3, r2
 800f832:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (csect == 0) {					/* On the cluster boundary? */
 800f834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f836:	2b00      	cmp	r3, #0
 800f838:	d132      	bne.n	800f8a0 <f_read+0x13a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800f83a:	69fb      	ldr	r3, [r7, #28]
 800f83c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f840:	4313      	orrs	r3, r2
 800f842:	d103      	bne.n	800f84c <f_read+0xe6>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800f844:	69fb      	ldr	r3, [r7, #28]
 800f846:	689b      	ldr	r3, [r3, #8]
 800f848:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f84a:	e013      	b.n	800f874 <f_read+0x10e>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f84c:	69fb      	ldr	r3, [r7, #28]
 800f84e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f850:	2b00      	cmp	r3, #0
 800f852:	d007      	beq.n	800f864 <f_read+0xfe>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f854:	69fb      	ldr	r3, [r7, #28]
 800f856:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f85a:	69f8      	ldr	r0, [r7, #28]
 800f85c:	f7fd fc09 	bl	800d072 <clmt_clust>
 800f860:	64b8      	str	r0, [r7, #72]	@ 0x48
 800f862:	e007      	b.n	800f874 <f_read+0x10e>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f864:	69fa      	ldr	r2, [r7, #28]
 800f866:	69fb      	ldr	r3, [r7, #28]
 800f868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f86a:	4619      	mov	r1, r3
 800f86c:	4610      	mov	r0, r2
 800f86e:	f7fc fefd 	bl	800c66c <get_fat>
 800f872:	64b8      	str	r0, [r7, #72]	@ 0x48
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f874:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f876:	2b01      	cmp	r3, #1
 800f878:	d805      	bhi.n	800f886 <f_read+0x120>
 800f87a:	69fb      	ldr	r3, [r7, #28]
 800f87c:	2202      	movs	r2, #2
 800f87e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f882:	2302      	movs	r3, #2
 800f884:	e0e2      	b.n	800fa4c <f_read+0x2e6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f886:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f88c:	d105      	bne.n	800f89a <f_read+0x134>
 800f88e:	69fb      	ldr	r3, [r7, #28]
 800f890:	2201      	movs	r2, #1
 800f892:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f896:	2301      	movs	r3, #1
 800f898:	e0d8      	b.n	800fa4c <f_read+0x2e6>
				fp->clust = clst;				/* Update current cluster */
 800f89a:	69fb      	ldr	r3, [r7, #28]
 800f89c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f89e:	641a      	str	r2, [r3, #64]	@ 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f8a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8a2:	69fb      	ldr	r3, [r7, #28]
 800f8a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8a6:	4619      	mov	r1, r3
 800f8a8:	4610      	mov	r0, r2
 800f8aa:	f7fc febf 	bl	800c62c <clust2sect>
 800f8ae:	62b8      	str	r0, [r7, #40]	@ 0x28
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f8b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d105      	bne.n	800f8c2 <f_read+0x15c>
 800f8b6:	69fb      	ldr	r3, [r7, #28]
 800f8b8:	2202      	movs	r2, #2
 800f8ba:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f8be:	2302      	movs	r3, #2
 800f8c0:	e0c4      	b.n	800fa4c <f_read+0x2e6>
			sect += csect;
 800f8c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f8c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8c6:	4413      	add	r3, r2
 800f8c8:	62bb      	str	r3, [r7, #40]	@ 0x28
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800f8ca:	697b      	ldr	r3, [r7, #20]
 800f8cc:	0a5b      	lsrs	r3, r3, #9
 800f8ce:	643b      	str	r3, [r7, #64]	@ 0x40
			if (cc) {							/* Read maximum contiguous sectors directly */
 800f8d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d03b      	beq.n	800f94e <f_read+0x1e8>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f8d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f8d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f8da:	4413      	add	r3, r2
 800f8dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8de:	8952      	ldrh	r2, [r2, #10]
 800f8e0:	4293      	cmp	r3, r2
 800f8e2:	d905      	bls.n	800f8f0 <f_read+0x18a>
					cc = fs->csize - csect;
 800f8e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8e6:	895b      	ldrh	r3, [r3, #10]
 800f8e8:	461a      	mov	r2, r3
 800f8ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8ec:	1ad3      	subs	r3, r2, r3
 800f8ee:	643b      	str	r3, [r7, #64]	@ 0x40
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8f2:	7858      	ldrb	r0, [r3, #1]
 800f8f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f8f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f8f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f8fa:	f7fc f952 	bl	800bba2 <disk_read>
 800f8fe:	4603      	mov	r3, r0
 800f900:	2b00      	cmp	r3, #0
 800f902:	d005      	beq.n	800f910 <f_read+0x1aa>
 800f904:	69fb      	ldr	r3, [r7, #28]
 800f906:	2201      	movs	r2, #1
 800f908:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f90c:	2301      	movs	r3, #1
 800f90e:	e09d      	b.n	800fa4c <f_read+0x2e6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f910:	69fb      	ldr	r3, [r7, #28]
 800f912:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f916:	b25b      	sxtb	r3, r3
 800f918:	2b00      	cmp	r3, #0
 800f91a:	da14      	bge.n	800f946 <f_read+0x1e0>
 800f91c:	69fb      	ldr	r3, [r7, #28]
 800f91e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f922:	1ad3      	subs	r3, r2, r3
 800f924:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f926:	429a      	cmp	r2, r3
 800f928:	d90d      	bls.n	800f946 <f_read+0x1e0>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f92a:	69fb      	ldr	r3, [r7, #28]
 800f92c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f92e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f930:	1ad3      	subs	r3, r2, r3
 800f932:	025b      	lsls	r3, r3, #9
 800f934:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f936:	18d0      	adds	r0, r2, r3
 800f938:	69fb      	ldr	r3, [r7, #28]
 800f93a:	3354      	adds	r3, #84	@ 0x54
 800f93c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f940:	4619      	mov	r1, r3
 800f942:	f7fc fba8 	bl	800c096 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800f946:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f948:	025b      	lsls	r3, r3, #9
 800f94a:	647b      	str	r3, [r7, #68]	@ 0x44
				continue;
 800f94c:	e059      	b.n	800fa02 <f_read+0x29c>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f94e:	69fb      	ldr	r3, [r7, #28]
 800f950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f952:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f954:	429a      	cmp	r2, r3
 800f956:	d033      	beq.n	800f9c0 <f_read+0x25a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f958:	69fb      	ldr	r3, [r7, #28]
 800f95a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f95e:	b25b      	sxtb	r3, r3
 800f960:	2b00      	cmp	r3, #0
 800f962:	da1b      	bge.n	800f99c <f_read+0x236>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f966:	7858      	ldrb	r0, [r3, #1]
 800f968:	69fb      	ldr	r3, [r7, #28]
 800f96a:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800f96e:	69fb      	ldr	r3, [r7, #28]
 800f970:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f972:	2301      	movs	r3, #1
 800f974:	f7fc f944 	bl	800bc00 <disk_write>
 800f978:	4603      	mov	r3, r0
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d005      	beq.n	800f98a <f_read+0x224>
 800f97e:	69fb      	ldr	r3, [r7, #28]
 800f980:	2201      	movs	r2, #1
 800f982:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f986:	2301      	movs	r3, #1
 800f988:	e060      	b.n	800fa4c <f_read+0x2e6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f98a:	69fb      	ldr	r3, [r7, #28]
 800f98c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f990:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f994:	b2da      	uxtb	r2, r3
 800f996:	69fb      	ldr	r3, [r7, #28]
 800f998:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f99c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f99e:	7858      	ldrb	r0, [r3, #1]
 800f9a0:	69fb      	ldr	r3, [r7, #28]
 800f9a2:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800f9a6:	2301      	movs	r3, #1
 800f9a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f9aa:	f7fc f8fa 	bl	800bba2 <disk_read>
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d005      	beq.n	800f9c0 <f_read+0x25a>
 800f9b4:	69fb      	ldr	r3, [r7, #28]
 800f9b6:	2201      	movs	r2, #1
 800f9b8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f9bc:	2301      	movs	r3, #1
 800f9be:	e045      	b.n	800fa4c <f_read+0x2e6>
			}
#endif
			fp->sect = sect;
 800f9c0:	69fb      	ldr	r3, [r7, #28]
 800f9c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f9c4:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f9c6:	69fb      	ldr	r3, [r7, #28]
 800f9c8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f9cc:	4613      	mov	r3, r2
 800f9ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9d2:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800f9d6:	647b      	str	r3, [r7, #68]	@ 0x44
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800f9d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f9da:	697b      	ldr	r3, [r7, #20]
 800f9dc:	429a      	cmp	r2, r3
 800f9de:	d901      	bls.n	800f9e4 <f_read+0x27e>
 800f9e0:	697b      	ldr	r3, [r7, #20]
 800f9e2:	647b      	str	r3, [r7, #68]	@ 0x44
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800f9e4:	69fb      	ldr	r3, [r7, #28]
 800f9e6:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800f9ea:	69fb      	ldr	r3, [r7, #28]
 800f9ec:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f9f0:	4613      	mov	r3, r2
 800f9f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9f6:	440b      	add	r3, r1
 800f9f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f9fa:	4619      	mov	r1, r3
 800f9fc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f9fe:	f7fc fb4a 	bl	800c096 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800fa02:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fa04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fa06:	4413      	add	r3, r2
 800fa08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fa0a:	69fb      	ldr	r3, [r7, #28]
 800fa0c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800fa10:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fa12:	2000      	movs	r0, #0
 800fa14:	4688      	mov	r8, r1
 800fa16:	4681      	mov	r9, r0
 800fa18:	eb12 0108 	adds.w	r1, r2, r8
 800fa1c:	60b9      	str	r1, [r7, #8]
 800fa1e:	eb43 0309 	adc.w	r3, r3, r9
 800fa22:	60fb      	str	r3, [r7, #12]
 800fa24:	69fb      	ldr	r3, [r7, #28]
 800fa26:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800fa2a:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
 800fa2e:	693b      	ldr	r3, [r7, #16]
 800fa30:	681a      	ldr	r2, [r3, #0]
 800fa32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fa34:	441a      	add	r2, r3
 800fa36:	693b      	ldr	r3, [r7, #16]
 800fa38:	601a      	str	r2, [r3, #0]
 800fa3a:	697a      	ldr	r2, [r7, #20]
 800fa3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fa3e:	1ad3      	subs	r3, r2, r3
 800fa40:	617b      	str	r3, [r7, #20]
	for ( ;  btr;								/* Repeat until all data read */
 800fa42:	697b      	ldr	r3, [r7, #20]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	f47f aedb 	bne.w	800f800 <f_read+0x9a>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800fa4a:	2300      	movs	r3, #0
}
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	3754      	adds	r7, #84	@ 0x54
 800fa50:	46bd      	mov	sp, r7
 800fa52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fa56 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800fa56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa5a:	b08d      	sub	sp, #52	@ 0x34
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	60f8      	str	r0, [r7, #12]
 800fa60:	60b9      	str	r1, [r7, #8]
 800fa62:	607a      	str	r2, [r7, #4]
 800fa64:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800fa66:	68bb      	ldr	r3, [r7, #8]
 800fa68:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800fa6a:	683b      	ldr	r3, [r7, #0]
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	f107 0210 	add.w	r2, r7, #16
 800fa76:	4611      	mov	r1, r2
 800fa78:	4618      	mov	r0, r3
 800fa7a:	f7ff fb3b 	bl	800f0f4 <validate>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fa84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d108      	bne.n	800fa9e <f_write+0x48>
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800fa92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800fa96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d002      	beq.n	800faa4 <f_write+0x4e>
 800fa9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800faa2:	e187      	b.n	800fdb4 <f_write+0x35e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800faaa:	f003 0302 	and.w	r3, r3, #2
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d101      	bne.n	800fab6 <f_write+0x60>
 800fab2:	2307      	movs	r3, #7
 800fab4:	e17e      	b.n	800fdb4 <f_write+0x35e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800fab6:	693b      	ldr	r3, [r7, #16]
 800fab8:	781b      	ldrb	r3, [r3, #0]
 800faba:	2b04      	cmp	r3, #4
 800fabc:	f000 816a 	beq.w	800fd94 <f_write+0x33e>
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	18d1      	adds	r1, r2, r3
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800fad0:	4613      	mov	r3, r2
 800fad2:	4299      	cmp	r1, r3
 800fad4:	f080 815e 	bcs.w	800fd94 <f_write+0x33e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800fade:	4613      	mov	r3, r2
 800fae0:	43db      	mvns	r3, r3
 800fae2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800fae4:	e156      	b.n	800fd94 <f_write+0x33e>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800faec:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800faf0:	2500      	movs	r5, #0
 800faf2:	ea54 0305 	orrs.w	r3, r4, r5
 800faf6:	f040 80fb 	bne.w	800fcf0 <f_write+0x29a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800fb00:	f04f 0200 	mov.w	r2, #0
 800fb04:	f04f 0300 	mov.w	r3, #0
 800fb08:	0a42      	lsrs	r2, r0, #9
 800fb0a:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800fb0e:	0a4b      	lsrs	r3, r1, #9
 800fb10:	693b      	ldr	r3, [r7, #16]
 800fb12:	895b      	ldrh	r3, [r3, #10]
 800fb14:	3b01      	subs	r3, #1
 800fb16:	4013      	ands	r3, r2
 800fb18:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800fb1a:	69bb      	ldr	r3, [r7, #24]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d146      	bne.n	800fbae <f_write+0x158>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800fb26:	4313      	orrs	r3, r2
 800fb28:	d10c      	bne.n	800fb44 <f_write+0xee>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	689b      	ldr	r3, [r3, #8]
 800fb2e:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800fb30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d11a      	bne.n	800fb6c <f_write+0x116>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	2100      	movs	r1, #0
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f7fd f998 	bl	800ce70 <create_chain>
 800fb40:	62b8      	str	r0, [r7, #40]	@ 0x28
 800fb42:	e013      	b.n	800fb6c <f_write+0x116>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d007      	beq.n	800fb5c <f_write+0x106>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800fb52:	68f8      	ldr	r0, [r7, #12]
 800fb54:	f7fd fa8d 	bl	800d072 <clmt_clust>
 800fb58:	62b8      	str	r0, [r7, #40]	@ 0x28
 800fb5a:	e007      	b.n	800fb6c <f_write+0x116>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800fb5c:	68fa      	ldr	r2, [r7, #12]
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb62:	4619      	mov	r1, r3
 800fb64:	4610      	mov	r0, r2
 800fb66:	f7fd f983 	bl	800ce70 <create_chain>
 800fb6a:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fb6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	f000 8115 	beq.w	800fd9e <f_write+0x348>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fb74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb76:	2b01      	cmp	r3, #1
 800fb78:	d105      	bne.n	800fb86 <f_write+0x130>
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	2202      	movs	r2, #2
 800fb7e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800fb82:	2302      	movs	r3, #2
 800fb84:	e116      	b.n	800fdb4 <f_write+0x35e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fb86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb8c:	d105      	bne.n	800fb9a <f_write+0x144>
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	2201      	movs	r2, #1
 800fb92:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800fb96:	2301      	movs	r3, #1
 800fb98:	e10c      	b.n	800fdb4 <f_write+0x35e>
				fp->clust = clst;			/* Update current cluster */
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fb9e:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	689b      	ldr	r3, [r3, #8]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d102      	bne.n	800fbae <f_write+0x158>
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fbac:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fbb4:	b25b      	sxtb	r3, r3
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	da1b      	bge.n	800fbf2 <f_write+0x19c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fbba:	693b      	ldr	r3, [r7, #16]
 800fbbc:	7858      	ldrb	r0, [r3, #1]
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fbc8:	2301      	movs	r3, #1
 800fbca:	f7fc f819 	bl	800bc00 <disk_write>
 800fbce:	4603      	mov	r3, r0
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d005      	beq.n	800fbe0 <f_write+0x18a>
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	2201      	movs	r2, #1
 800fbd8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800fbdc:	2301      	movs	r3, #1
 800fbde:	e0e9      	b.n	800fdb4 <f_write+0x35e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fbe6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fbea:	b2da      	uxtb	r2, r3
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fbf2:	693a      	ldr	r2, [r7, #16]
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fbf8:	4619      	mov	r1, r3
 800fbfa:	4610      	mov	r0, r2
 800fbfc:	f7fc fd16 	bl	800c62c <clust2sect>
 800fc00:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d105      	bne.n	800fc14 <f_write+0x1be>
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	2202      	movs	r2, #2
 800fc0c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800fc10:	2302      	movs	r3, #2
 800fc12:	e0cf      	b.n	800fdb4 <f_write+0x35e>
			sect += csect;
 800fc14:	697a      	ldr	r2, [r7, #20]
 800fc16:	69bb      	ldr	r3, [r7, #24]
 800fc18:	4413      	add	r3, r2
 800fc1a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	0a5b      	lsrs	r3, r3, #9
 800fc20:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800fc22:	6a3b      	ldr	r3, [r7, #32]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d03f      	beq.n	800fca8 <f_write+0x252>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fc28:	69ba      	ldr	r2, [r7, #24]
 800fc2a:	6a3b      	ldr	r3, [r7, #32]
 800fc2c:	4413      	add	r3, r2
 800fc2e:	693a      	ldr	r2, [r7, #16]
 800fc30:	8952      	ldrh	r2, [r2, #10]
 800fc32:	4293      	cmp	r3, r2
 800fc34:	d905      	bls.n	800fc42 <f_write+0x1ec>
					cc = fs->csize - csect;
 800fc36:	693b      	ldr	r3, [r7, #16]
 800fc38:	895b      	ldrh	r3, [r3, #10]
 800fc3a:	461a      	mov	r2, r3
 800fc3c:	69bb      	ldr	r3, [r7, #24]
 800fc3e:	1ad3      	subs	r3, r2, r3
 800fc40:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fc42:	693b      	ldr	r3, [r7, #16]
 800fc44:	7858      	ldrb	r0, [r3, #1]
 800fc46:	6a3b      	ldr	r3, [r7, #32]
 800fc48:	697a      	ldr	r2, [r7, #20]
 800fc4a:	69f9      	ldr	r1, [r7, #28]
 800fc4c:	f7fb ffd8 	bl	800bc00 <disk_write>
 800fc50:	4603      	mov	r3, r0
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d005      	beq.n	800fc62 <f_write+0x20c>
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	2201      	movs	r2, #1
 800fc5a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800fc5e:	2301      	movs	r3, #1
 800fc60:	e0a8      	b.n	800fdb4 <f_write+0x35e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	1ad3      	subs	r3, r2, r3
 800fc6a:	6a3a      	ldr	r2, [r7, #32]
 800fc6c:	429a      	cmp	r2, r3
 800fc6e:	d917      	bls.n	800fca0 <f_write+0x24a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fc7a:	697b      	ldr	r3, [r7, #20]
 800fc7c:	1ad3      	subs	r3, r2, r3
 800fc7e:	025b      	lsls	r3, r3, #9
 800fc80:	69fa      	ldr	r2, [r7, #28]
 800fc82:	4413      	add	r3, r2
 800fc84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fc88:	4619      	mov	r1, r3
 800fc8a:	f7fc fa04 	bl	800c096 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fc94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fc98:	b2da      	uxtb	r2, r3
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800fca0:	6a3b      	ldr	r3, [r7, #32]
 800fca2:	025b      	lsls	r3, r3, #9
 800fca4:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800fca6:	e04a      	b.n	800fd3e <f_write+0x2e8>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fcac:	697a      	ldr	r2, [r7, #20]
 800fcae:	429a      	cmp	r2, r3
 800fcb0:	d01b      	beq.n	800fcea <f_write+0x294>
				fp->fptr < fp->obj.objsize &&
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fcbe:	4290      	cmp	r0, r2
 800fcc0:	eb71 0303 	sbcs.w	r3, r1, r3
 800fcc4:	d211      	bcs.n	800fcea <f_write+0x294>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800fcc6:	693b      	ldr	r3, [r7, #16]
 800fcc8:	7858      	ldrb	r0, [r3, #1]
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800fcd0:	2301      	movs	r3, #1
 800fcd2:	697a      	ldr	r2, [r7, #20]
 800fcd4:	f7fb ff65 	bl	800bba2 <disk_read>
 800fcd8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d005      	beq.n	800fcea <f_write+0x294>
					ABORT(fs, FR_DISK_ERR);
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	2201      	movs	r2, #1
 800fce2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800fce6:	2301      	movs	r3, #1
 800fce8:	e064      	b.n	800fdb4 <f_write+0x35e>
			}
#endif
			fp->sect = sect;
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	697a      	ldr	r2, [r7, #20]
 800fcee:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800fcf6:	4613      	mov	r3, r2
 800fcf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fcfc:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800fd00:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800fd02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	429a      	cmp	r2, r3
 800fd08:	d901      	bls.n	800fd0e <f_write+0x2b8>
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800fd1a:	4613      	mov	r3, r2
 800fd1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd20:	440b      	add	r3, r1
 800fd22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fd24:	69f9      	ldr	r1, [r7, #28]
 800fd26:	4618      	mov	r0, r3
 800fd28:	f7fc f9b5 	bl	800c096 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fd32:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800fd36:	b2da      	uxtb	r2, r3
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800fd3e:	69fa      	ldr	r2, [r7, #28]
 800fd40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd42:	4413      	add	r3, r2
 800fd44:	61fb      	str	r3, [r7, #28]
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800fd4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fd4e:	2000      	movs	r0, #0
 800fd50:	4688      	mov	r8, r1
 800fd52:	4681      	mov	r9, r0
 800fd54:	eb12 0a08 	adds.w	sl, r2, r8
 800fd58:	eb43 0b09 	adc.w	fp, r3, r9
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800fd68:	68f9      	ldr	r1, [r7, #12]
 800fd6a:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	@ 0x38
 800fd6e:	4282      	cmp	r2, r0
 800fd70:	eb73 0601 	sbcs.w	r6, r3, r1
 800fd74:	d201      	bcs.n	800fd7a <f_write+0x324>
 800fd76:	4602      	mov	r2, r0
 800fd78:	460b      	mov	r3, r1
 800fd7a:	68f9      	ldr	r1, [r7, #12]
 800fd7c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800fd80:	683b      	ldr	r3, [r7, #0]
 800fd82:	681a      	ldr	r2, [r3, #0]
 800fd84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd86:	441a      	add	r2, r3
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	601a      	str	r2, [r3, #0]
 800fd8c:	687a      	ldr	r2, [r7, #4]
 800fd8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd90:	1ad3      	subs	r3, r2, r3
 800fd92:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	f47f aea5 	bne.w	800fae6 <f_write+0x90>
 800fd9c:	e000      	b.n	800fda0 <f_write+0x34a>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fd9e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fda6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fdaa:	b2da      	uxtb	r2, r3
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 800fdb2:	2300      	movs	r3, #0
}
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	3734      	adds	r7, #52	@ 0x34
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fdbe <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800fdbe:	b580      	push	{r7, lr}
 800fdc0:	b09a      	sub	sp, #104	@ 0x68
 800fdc2:	af00      	add	r7, sp, #0
 800fdc4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800fdcc:	4611      	mov	r1, r2
 800fdce:	4618      	mov	r0, r3
 800fdd0:	f7ff f990 	bl	800f0f4 <validate>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800fdda:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	f040 8105 	bne.w	800ffee <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fdea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	f000 80fd 	beq.w	800ffee <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fdfa:	b25b      	sxtb	r3, r3
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	da17      	bge.n	800fe30 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800fe00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fe02:	7858      	ldrb	r0, [r3, #1]
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fe0e:	2301      	movs	r3, #1
 800fe10:	f7fb fef6 	bl	800bc00 <disk_write>
 800fe14:	4603      	mov	r3, r0
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d001      	beq.n	800fe1e <f_sync+0x60>
 800fe1a:	2301      	movs	r3, #1
 800fe1c:	e0e9      	b.n	800fff2 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fe24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe28:	b2da      	uxtb	r2, r3
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800fe30:	f7fb fe88 	bl	800bb44 <get_fattime>
 800fe34:	6638      	str	r0, [r7, #96]	@ 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800fe36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fe38:	781b      	ldrb	r3, [r3, #0]
 800fe3a:	2b04      	cmp	r3, #4
 800fe3c:	f040 808c 	bne.w	800ff58 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	4618      	mov	r0, r3
 800fe44:	f7fc ff00 	bl	800cc48 <fill_first_frag>
 800fe48:	4603      	mov	r3, r0
 800fe4a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res == FR_OK) {
 800fe4e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d10a      	bne.n	800fe6c <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800fe56:	6878      	ldr	r0, [r7, #4]
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe5c:	f04f 32ff 	mov.w	r2, #4294967295
 800fe60:	4619      	mov	r1, r3
 800fe62:	f7fc ff20 	bl	800cca6 <fill_last_frag>
 800fe66:	4603      	mov	r3, r0
 800fe68:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
				if (res == FR_OK) {
 800fe6c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	f040 80bc 	bne.w	800ffee <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800fe76:	687a      	ldr	r2, [r7, #4]
 800fe78:	f107 0308 	add.w	r3, r7, #8
 800fe7c:	4611      	mov	r1, r2
 800fe7e:	4618      	mov	r0, r3
 800fe80:	f7fd fe42 	bl	800db08 <load_obj_dir>
 800fe84:	4603      	mov	r3, r0
 800fe86:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (res == FR_OK) {
 800fe8a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	f040 80ad 	bne.w	800ffee <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800fe94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fe96:	691b      	ldr	r3, [r3, #16]
 800fe98:	3304      	adds	r3, #4
 800fe9a:	781a      	ldrb	r2, [r3, #0]
 800fe9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fe9e:	691b      	ldr	r3, [r3, #16]
 800fea0:	3304      	adds	r3, #4
 800fea2:	f042 0220 	orr.w	r2, r2, #32
 800fea6:	b2d2      	uxtb	r2, r2
 800fea8:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	79da      	ldrb	r2, [r3, #7]
 800feae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800feb0:	691b      	ldr	r3, [r3, #16]
 800feb2:	3321      	adds	r3, #33	@ 0x21
 800feb4:	f042 0201 	orr.w	r2, r2, #1
 800feb8:	b2d2      	uxtb	r2, r2
 800feba:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800febc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800febe:	691b      	ldr	r3, [r3, #16]
 800fec0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	689b      	ldr	r3, [r3, #8]
 800fec8:	4619      	mov	r1, r3
 800feca:	4610      	mov	r0, r2
 800fecc:	f7fc f82f 	bl	800bf2e <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800fed0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fed2:	691b      	ldr	r3, [r3, #16]
 800fed4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800fede:	4608      	mov	r0, r1
 800fee0:	f7fc f851 	bl	800bf86 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800fee4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fee6:	691b      	ldr	r3, [r3, #16]
 800fee8:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800fef2:	4608      	mov	r0, r1
 800fef4:	f7fc f847 	bl	800bf86 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800fef8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fefa:	691b      	ldr	r3, [r3, #16]
 800fefc:	330c      	adds	r3, #12
 800fefe:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800ff00:	4618      	mov	r0, r3
 800ff02:	f7fc f814 	bl	800bf2e <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800ff06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ff08:	691b      	ldr	r3, [r3, #16]
 800ff0a:	3315      	adds	r3, #21
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800ff10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ff12:	691b      	ldr	r3, [r3, #16]
 800ff14:	3310      	adds	r3, #16
 800ff16:	2100      	movs	r1, #0
 800ff18:	4618      	mov	r0, r3
 800ff1a:	f7fc f808 	bl	800bf2e <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800ff1e:	f107 0308 	add.w	r3, r7, #8
 800ff22:	4618      	mov	r0, r3
 800ff24:	f7fd fe26 	bl	800db74 <store_xdir>
 800ff28:	4603      	mov	r3, r0
 800ff2a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800ff2e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d15b      	bne.n	800ffee <f_sync+0x230>
							res = sync_fs(fs);
 800ff36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ff38:	4618      	mov	r0, r3
 800ff3a:	f7fc fb09 	bl	800c550 <sync_fs>
 800ff3e:	4603      	mov	r3, r0
 800ff40:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ff4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ff4e:	b2da      	uxtb	r2, r3
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 800ff56:	e04a      	b.n	800ffee <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ff58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ff5e:	4619      	mov	r1, r3
 800ff60:	4610      	mov	r0, r2
 800ff62:	f7fc fac7 	bl	800c4f4 <move_window>
 800ff66:	4603      	mov	r3, r0
 800ff68:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res == FR_OK) {
 800ff6c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d13c      	bne.n	800ffee <f_sync+0x230>
					dir = fp->dir_ptr;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ff78:	65fb      	str	r3, [r7, #92]	@ 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ff7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ff7c:	330b      	adds	r3, #11
 800ff7e:	781a      	ldrb	r2, [r3, #0]
 800ff80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ff82:	330b      	adds	r3, #11
 800ff84:	f042 0220 	orr.w	r2, r2, #32
 800ff88:	b2d2      	uxtb	r2, r2
 800ff8a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	6818      	ldr	r0, [r3, #0]
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	689b      	ldr	r3, [r3, #8]
 800ff94:	461a      	mov	r2, r3
 800ff96:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800ff98:	f7fd fa85 	bl	800d4a6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ff9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ff9e:	f103 001c 	add.w	r0, r3, #28
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ffa8:	4613      	mov	r3, r2
 800ffaa:	4619      	mov	r1, r3
 800ffac:	f7fb ffbf 	bl	800bf2e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ffb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ffb2:	3316      	adds	r3, #22
 800ffb4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	f7fb ffb9 	bl	800bf2e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ffbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ffbe:	3312      	adds	r3, #18
 800ffc0:	2100      	movs	r1, #0
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f7fb ff98 	bl	800bef8 <st_word>
					fs->wflag = 1;
 800ffc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ffca:	2201      	movs	r2, #1
 800ffcc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ffce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f7fc fabd 	bl	800c550 <sync_fs>
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ffe2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ffe6:	b2da      	uxtb	r2, r3
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ffee:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800fff2:	4618      	mov	r0, r3
 800fff4:	3768      	adds	r7, #104	@ 0x68
 800fff6:	46bd      	mov	sp, r7
 800fff8:	bd80      	pop	{r7, pc}

0800fffa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800fffa:	b580      	push	{r7, lr}
 800fffc:	b084      	sub	sp, #16
 800fffe:	af00      	add	r7, sp, #0
 8010000:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010002:	6878      	ldr	r0, [r7, #4]
 8010004:	f7ff fedb 	bl	800fdbe <f_sync>
 8010008:	4603      	mov	r3, r0
 801000a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801000c:	7bfb      	ldrb	r3, [r7, #15]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d118      	bne.n	8010044 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	f107 0208 	add.w	r2, r7, #8
 8010018:	4611      	mov	r1, r2
 801001a:	4618      	mov	r0, r3
 801001c:	f7ff f86a 	bl	800f0f4 <validate>
 8010020:	4603      	mov	r3, r0
 8010022:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010024:	7bfb      	ldrb	r3, [r7, #15]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d10c      	bne.n	8010044 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801002e:	4618      	mov	r0, r3
 8010030:	f7fc f9bc 	bl	800c3ac <dec_lock>
 8010034:	4603      	mov	r3, r0
 8010036:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010038:	7bfb      	ldrb	r3, [r7, #15]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d102      	bne.n	8010044 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	2200      	movs	r2, #0
 8010042:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010044:	7bfb      	ldrb	r3, [r7, #15]
}
 8010046:	4618      	mov	r0, r3
 8010048:	3710      	adds	r7, #16
 801004a:	46bd      	mov	sp, r7
 801004c:	bd80      	pop	{r7, pc}
	...

08010050 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010050:	b480      	push	{r7}
 8010052:	b087      	sub	sp, #28
 8010054:	af00      	add	r7, sp, #0
 8010056:	60f8      	str	r0, [r7, #12]
 8010058:	60b9      	str	r1, [r7, #8]
 801005a:	4613      	mov	r3, r2
 801005c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801005e:	2301      	movs	r3, #1
 8010060:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010062:	2300      	movs	r3, #0
 8010064:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010066:	4b1f      	ldr	r3, [pc, #124]	@ (80100e4 <FATFS_LinkDriverEx+0x94>)
 8010068:	7a5b      	ldrb	r3, [r3, #9]
 801006a:	b2db      	uxtb	r3, r3
 801006c:	2b00      	cmp	r3, #0
 801006e:	d131      	bne.n	80100d4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010070:	4b1c      	ldr	r3, [pc, #112]	@ (80100e4 <FATFS_LinkDriverEx+0x94>)
 8010072:	7a5b      	ldrb	r3, [r3, #9]
 8010074:	b2db      	uxtb	r3, r3
 8010076:	461a      	mov	r2, r3
 8010078:	4b1a      	ldr	r3, [pc, #104]	@ (80100e4 <FATFS_LinkDriverEx+0x94>)
 801007a:	2100      	movs	r1, #0
 801007c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801007e:	4b19      	ldr	r3, [pc, #100]	@ (80100e4 <FATFS_LinkDriverEx+0x94>)
 8010080:	7a5b      	ldrb	r3, [r3, #9]
 8010082:	b2db      	uxtb	r3, r3
 8010084:	4a17      	ldr	r2, [pc, #92]	@ (80100e4 <FATFS_LinkDriverEx+0x94>)
 8010086:	009b      	lsls	r3, r3, #2
 8010088:	4413      	add	r3, r2
 801008a:	68fa      	ldr	r2, [r7, #12]
 801008c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801008e:	4b15      	ldr	r3, [pc, #84]	@ (80100e4 <FATFS_LinkDriverEx+0x94>)
 8010090:	7a5b      	ldrb	r3, [r3, #9]
 8010092:	b2db      	uxtb	r3, r3
 8010094:	461a      	mov	r2, r3
 8010096:	4b13      	ldr	r3, [pc, #76]	@ (80100e4 <FATFS_LinkDriverEx+0x94>)
 8010098:	4413      	add	r3, r2
 801009a:	79fa      	ldrb	r2, [r7, #7]
 801009c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801009e:	4b11      	ldr	r3, [pc, #68]	@ (80100e4 <FATFS_LinkDriverEx+0x94>)
 80100a0:	7a5b      	ldrb	r3, [r3, #9]
 80100a2:	b2db      	uxtb	r3, r3
 80100a4:	1c5a      	adds	r2, r3, #1
 80100a6:	b2d1      	uxtb	r1, r2
 80100a8:	4a0e      	ldr	r2, [pc, #56]	@ (80100e4 <FATFS_LinkDriverEx+0x94>)
 80100aa:	7251      	strb	r1, [r2, #9]
 80100ac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80100ae:	7dbb      	ldrb	r3, [r7, #22]
 80100b0:	3330      	adds	r3, #48	@ 0x30
 80100b2:	b2da      	uxtb	r2, r3
 80100b4:	68bb      	ldr	r3, [r7, #8]
 80100b6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80100b8:	68bb      	ldr	r3, [r7, #8]
 80100ba:	3301      	adds	r3, #1
 80100bc:	223a      	movs	r2, #58	@ 0x3a
 80100be:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80100c0:	68bb      	ldr	r3, [r7, #8]
 80100c2:	3302      	adds	r3, #2
 80100c4:	222f      	movs	r2, #47	@ 0x2f
 80100c6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80100c8:	68bb      	ldr	r3, [r7, #8]
 80100ca:	3303      	adds	r3, #3
 80100cc:	2200      	movs	r2, #0
 80100ce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80100d0:	2300      	movs	r3, #0
 80100d2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80100d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	371c      	adds	r7, #28
 80100da:	46bd      	mov	sp, r7
 80100dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e0:	4770      	bx	lr
 80100e2:	bf00      	nop
 80100e4:	2000703c 	.word	0x2000703c

080100e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b082      	sub	sp, #8
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
 80100f0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80100f2:	2200      	movs	r2, #0
 80100f4:	6839      	ldr	r1, [r7, #0]
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	f7ff ffaa 	bl	8010050 <FATFS_LinkDriverEx>
 80100fc:	4603      	mov	r3, r0
}
 80100fe:	4618      	mov	r0, r3
 8010100:	3708      	adds	r7, #8
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}
	...

08010108 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010108:	b480      	push	{r7}
 801010a:	b085      	sub	sp, #20
 801010c:	af00      	add	r7, sp, #0
 801010e:	4603      	mov	r3, r0
 8010110:	6039      	str	r1, [r7, #0]
 8010112:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010114:	88fb      	ldrh	r3, [r7, #6]
 8010116:	2b7f      	cmp	r3, #127	@ 0x7f
 8010118:	d802      	bhi.n	8010120 <ff_convert+0x18>
		c = chr;
 801011a:	88fb      	ldrh	r3, [r7, #6]
 801011c:	81fb      	strh	r3, [r7, #14]
 801011e:	e025      	b.n	801016c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010120:	683b      	ldr	r3, [r7, #0]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d00b      	beq.n	801013e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8010126:	88fb      	ldrh	r3, [r7, #6]
 8010128:	2bff      	cmp	r3, #255	@ 0xff
 801012a:	d805      	bhi.n	8010138 <ff_convert+0x30>
 801012c:	88fb      	ldrh	r3, [r7, #6]
 801012e:	3b80      	subs	r3, #128	@ 0x80
 8010130:	4a12      	ldr	r2, [pc, #72]	@ (801017c <ff_convert+0x74>)
 8010132:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010136:	e000      	b.n	801013a <ff_convert+0x32>
 8010138:	2300      	movs	r3, #0
 801013a:	81fb      	strh	r3, [r7, #14]
 801013c:	e016      	b.n	801016c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801013e:	2300      	movs	r3, #0
 8010140:	81fb      	strh	r3, [r7, #14]
 8010142:	e009      	b.n	8010158 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010144:	89fb      	ldrh	r3, [r7, #14]
 8010146:	4a0d      	ldr	r2, [pc, #52]	@ (801017c <ff_convert+0x74>)
 8010148:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801014c:	88fa      	ldrh	r2, [r7, #6]
 801014e:	429a      	cmp	r2, r3
 8010150:	d006      	beq.n	8010160 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010152:	89fb      	ldrh	r3, [r7, #14]
 8010154:	3301      	adds	r3, #1
 8010156:	81fb      	strh	r3, [r7, #14]
 8010158:	89fb      	ldrh	r3, [r7, #14]
 801015a:	2b7f      	cmp	r3, #127	@ 0x7f
 801015c:	d9f2      	bls.n	8010144 <ff_convert+0x3c>
 801015e:	e000      	b.n	8010162 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010160:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010162:	89fb      	ldrh	r3, [r7, #14]
 8010164:	3380      	adds	r3, #128	@ 0x80
 8010166:	b29b      	uxth	r3, r3
 8010168:	b2db      	uxtb	r3, r3
 801016a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801016c:	89fb      	ldrh	r3, [r7, #14]
}
 801016e:	4618      	mov	r0, r3
 8010170:	3714      	adds	r7, #20
 8010172:	46bd      	mov	sp, r7
 8010174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010178:	4770      	bx	lr
 801017a:	bf00      	nop
 801017c:	080162c8 	.word	0x080162c8

08010180 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010180:	b480      	push	{r7}
 8010182:	b087      	sub	sp, #28
 8010184:	af00      	add	r7, sp, #0
 8010186:	4603      	mov	r3, r0
 8010188:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801018a:	88fb      	ldrh	r3, [r7, #6]
 801018c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010190:	d201      	bcs.n	8010196 <ff_wtoupper+0x16>
 8010192:	4b3e      	ldr	r3, [pc, #248]	@ (801028c <ff_wtoupper+0x10c>)
 8010194:	e000      	b.n	8010198 <ff_wtoupper+0x18>
 8010196:	4b3e      	ldr	r3, [pc, #248]	@ (8010290 <ff_wtoupper+0x110>)
 8010198:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801019a:	697b      	ldr	r3, [r7, #20]
 801019c:	1c9a      	adds	r2, r3, #2
 801019e:	617a      	str	r2, [r7, #20]
 80101a0:	881b      	ldrh	r3, [r3, #0]
 80101a2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80101a4:	8a7b      	ldrh	r3, [r7, #18]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d068      	beq.n	801027c <ff_wtoupper+0xfc>
 80101aa:	88fa      	ldrh	r2, [r7, #6]
 80101ac:	8a7b      	ldrh	r3, [r7, #18]
 80101ae:	429a      	cmp	r2, r3
 80101b0:	d364      	bcc.n	801027c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80101b2:	697b      	ldr	r3, [r7, #20]
 80101b4:	1c9a      	adds	r2, r3, #2
 80101b6:	617a      	str	r2, [r7, #20]
 80101b8:	881b      	ldrh	r3, [r3, #0]
 80101ba:	823b      	strh	r3, [r7, #16]
 80101bc:	8a3b      	ldrh	r3, [r7, #16]
 80101be:	0a1b      	lsrs	r3, r3, #8
 80101c0:	81fb      	strh	r3, [r7, #14]
 80101c2:	8a3b      	ldrh	r3, [r7, #16]
 80101c4:	b2db      	uxtb	r3, r3
 80101c6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80101c8:	88fa      	ldrh	r2, [r7, #6]
 80101ca:	8a79      	ldrh	r1, [r7, #18]
 80101cc:	8a3b      	ldrh	r3, [r7, #16]
 80101ce:	440b      	add	r3, r1
 80101d0:	429a      	cmp	r2, r3
 80101d2:	da49      	bge.n	8010268 <ff_wtoupper+0xe8>
			switch (cmd) {
 80101d4:	89fb      	ldrh	r3, [r7, #14]
 80101d6:	2b08      	cmp	r3, #8
 80101d8:	d84f      	bhi.n	801027a <ff_wtoupper+0xfa>
 80101da:	a201      	add	r2, pc, #4	@ (adr r2, 80101e0 <ff_wtoupper+0x60>)
 80101dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101e0:	08010205 	.word	0x08010205
 80101e4:	08010217 	.word	0x08010217
 80101e8:	0801022d 	.word	0x0801022d
 80101ec:	08010235 	.word	0x08010235
 80101f0:	0801023d 	.word	0x0801023d
 80101f4:	08010245 	.word	0x08010245
 80101f8:	0801024d 	.word	0x0801024d
 80101fc:	08010255 	.word	0x08010255
 8010200:	0801025d 	.word	0x0801025d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010204:	88fa      	ldrh	r2, [r7, #6]
 8010206:	8a7b      	ldrh	r3, [r7, #18]
 8010208:	1ad3      	subs	r3, r2, r3
 801020a:	005b      	lsls	r3, r3, #1
 801020c:	697a      	ldr	r2, [r7, #20]
 801020e:	4413      	add	r3, r2
 8010210:	881b      	ldrh	r3, [r3, #0]
 8010212:	80fb      	strh	r3, [r7, #6]
 8010214:	e027      	b.n	8010266 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8010216:	88fa      	ldrh	r2, [r7, #6]
 8010218:	8a7b      	ldrh	r3, [r7, #18]
 801021a:	1ad3      	subs	r3, r2, r3
 801021c:	b29b      	uxth	r3, r3
 801021e:	f003 0301 	and.w	r3, r3, #1
 8010222:	b29b      	uxth	r3, r3
 8010224:	88fa      	ldrh	r2, [r7, #6]
 8010226:	1ad3      	subs	r3, r2, r3
 8010228:	80fb      	strh	r3, [r7, #6]
 801022a:	e01c      	b.n	8010266 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801022c:	88fb      	ldrh	r3, [r7, #6]
 801022e:	3b10      	subs	r3, #16
 8010230:	80fb      	strh	r3, [r7, #6]
 8010232:	e018      	b.n	8010266 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010234:	88fb      	ldrh	r3, [r7, #6]
 8010236:	3b20      	subs	r3, #32
 8010238:	80fb      	strh	r3, [r7, #6]
 801023a:	e014      	b.n	8010266 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801023c:	88fb      	ldrh	r3, [r7, #6]
 801023e:	3b30      	subs	r3, #48	@ 0x30
 8010240:	80fb      	strh	r3, [r7, #6]
 8010242:	e010      	b.n	8010266 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010244:	88fb      	ldrh	r3, [r7, #6]
 8010246:	3b1a      	subs	r3, #26
 8010248:	80fb      	strh	r3, [r7, #6]
 801024a:	e00c      	b.n	8010266 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801024c:	88fb      	ldrh	r3, [r7, #6]
 801024e:	3308      	adds	r3, #8
 8010250:	80fb      	strh	r3, [r7, #6]
 8010252:	e008      	b.n	8010266 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010254:	88fb      	ldrh	r3, [r7, #6]
 8010256:	3b50      	subs	r3, #80	@ 0x50
 8010258:	80fb      	strh	r3, [r7, #6]
 801025a:	e004      	b.n	8010266 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801025c:	88fb      	ldrh	r3, [r7, #6]
 801025e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8010262:	80fb      	strh	r3, [r7, #6]
 8010264:	bf00      	nop
			}
			break;
 8010266:	e008      	b.n	801027a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010268:	89fb      	ldrh	r3, [r7, #14]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d195      	bne.n	801019a <ff_wtoupper+0x1a>
 801026e:	8a3b      	ldrh	r3, [r7, #16]
 8010270:	005b      	lsls	r3, r3, #1
 8010272:	697a      	ldr	r2, [r7, #20]
 8010274:	4413      	add	r3, r2
 8010276:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010278:	e78f      	b.n	801019a <ff_wtoupper+0x1a>
			break;
 801027a:	bf00      	nop
	}

	return chr;
 801027c:	88fb      	ldrh	r3, [r7, #6]
}
 801027e:	4618      	mov	r0, r3
 8010280:	371c      	adds	r7, #28
 8010282:	46bd      	mov	sp, r7
 8010284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010288:	4770      	bx	lr
 801028a:	bf00      	nop
 801028c:	080163c8 	.word	0x080163c8
 8010290:	080165bc 	.word	0x080165bc

08010294 <sulp>:
 8010294:	b570      	push	{r4, r5, r6, lr}
 8010296:	4604      	mov	r4, r0
 8010298:	460d      	mov	r5, r1
 801029a:	ec45 4b10 	vmov	d0, r4, r5
 801029e:	4616      	mov	r6, r2
 80102a0:	f003 fd2a 	bl	8013cf8 <__ulp>
 80102a4:	ec51 0b10 	vmov	r0, r1, d0
 80102a8:	b17e      	cbz	r6, 80102ca <sulp+0x36>
 80102aa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80102ae:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	dd09      	ble.n	80102ca <sulp+0x36>
 80102b6:	051b      	lsls	r3, r3, #20
 80102b8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80102bc:	2400      	movs	r4, #0
 80102be:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80102c2:	4622      	mov	r2, r4
 80102c4:	462b      	mov	r3, r5
 80102c6:	f7f0 f9b7 	bl	8000638 <__aeabi_dmul>
 80102ca:	ec41 0b10 	vmov	d0, r0, r1
 80102ce:	bd70      	pop	{r4, r5, r6, pc}

080102d0 <_strtod_l>:
 80102d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102d4:	b09f      	sub	sp, #124	@ 0x7c
 80102d6:	460c      	mov	r4, r1
 80102d8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80102da:	2200      	movs	r2, #0
 80102dc:	921a      	str	r2, [sp, #104]	@ 0x68
 80102de:	9005      	str	r0, [sp, #20]
 80102e0:	f04f 0a00 	mov.w	sl, #0
 80102e4:	f04f 0b00 	mov.w	fp, #0
 80102e8:	460a      	mov	r2, r1
 80102ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80102ec:	7811      	ldrb	r1, [r2, #0]
 80102ee:	292b      	cmp	r1, #43	@ 0x2b
 80102f0:	d04a      	beq.n	8010388 <_strtod_l+0xb8>
 80102f2:	d838      	bhi.n	8010366 <_strtod_l+0x96>
 80102f4:	290d      	cmp	r1, #13
 80102f6:	d832      	bhi.n	801035e <_strtod_l+0x8e>
 80102f8:	2908      	cmp	r1, #8
 80102fa:	d832      	bhi.n	8010362 <_strtod_l+0x92>
 80102fc:	2900      	cmp	r1, #0
 80102fe:	d03b      	beq.n	8010378 <_strtod_l+0xa8>
 8010300:	2200      	movs	r2, #0
 8010302:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010304:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8010306:	782a      	ldrb	r2, [r5, #0]
 8010308:	2a30      	cmp	r2, #48	@ 0x30
 801030a:	f040 80b3 	bne.w	8010474 <_strtod_l+0x1a4>
 801030e:	786a      	ldrb	r2, [r5, #1]
 8010310:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010314:	2a58      	cmp	r2, #88	@ 0x58
 8010316:	d16e      	bne.n	80103f6 <_strtod_l+0x126>
 8010318:	9302      	str	r3, [sp, #8]
 801031a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801031c:	9301      	str	r3, [sp, #4]
 801031e:	ab1a      	add	r3, sp, #104	@ 0x68
 8010320:	9300      	str	r3, [sp, #0]
 8010322:	4a8e      	ldr	r2, [pc, #568]	@ (801055c <_strtod_l+0x28c>)
 8010324:	9805      	ldr	r0, [sp, #20]
 8010326:	ab1b      	add	r3, sp, #108	@ 0x6c
 8010328:	a919      	add	r1, sp, #100	@ 0x64
 801032a:	f002 fdd7 	bl	8012edc <__gethex>
 801032e:	f010 060f 	ands.w	r6, r0, #15
 8010332:	4604      	mov	r4, r0
 8010334:	d005      	beq.n	8010342 <_strtod_l+0x72>
 8010336:	2e06      	cmp	r6, #6
 8010338:	d128      	bne.n	801038c <_strtod_l+0xbc>
 801033a:	3501      	adds	r5, #1
 801033c:	2300      	movs	r3, #0
 801033e:	9519      	str	r5, [sp, #100]	@ 0x64
 8010340:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010342:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010344:	2b00      	cmp	r3, #0
 8010346:	f040 858e 	bne.w	8010e66 <_strtod_l+0xb96>
 801034a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801034c:	b1cb      	cbz	r3, 8010382 <_strtod_l+0xb2>
 801034e:	4652      	mov	r2, sl
 8010350:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8010354:	ec43 2b10 	vmov	d0, r2, r3
 8010358:	b01f      	add	sp, #124	@ 0x7c
 801035a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801035e:	2920      	cmp	r1, #32
 8010360:	d1ce      	bne.n	8010300 <_strtod_l+0x30>
 8010362:	3201      	adds	r2, #1
 8010364:	e7c1      	b.n	80102ea <_strtod_l+0x1a>
 8010366:	292d      	cmp	r1, #45	@ 0x2d
 8010368:	d1ca      	bne.n	8010300 <_strtod_l+0x30>
 801036a:	2101      	movs	r1, #1
 801036c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801036e:	1c51      	adds	r1, r2, #1
 8010370:	9119      	str	r1, [sp, #100]	@ 0x64
 8010372:	7852      	ldrb	r2, [r2, #1]
 8010374:	2a00      	cmp	r2, #0
 8010376:	d1c5      	bne.n	8010304 <_strtod_l+0x34>
 8010378:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801037a:	9419      	str	r4, [sp, #100]	@ 0x64
 801037c:	2b00      	cmp	r3, #0
 801037e:	f040 8570 	bne.w	8010e62 <_strtod_l+0xb92>
 8010382:	4652      	mov	r2, sl
 8010384:	465b      	mov	r3, fp
 8010386:	e7e5      	b.n	8010354 <_strtod_l+0x84>
 8010388:	2100      	movs	r1, #0
 801038a:	e7ef      	b.n	801036c <_strtod_l+0x9c>
 801038c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801038e:	b13a      	cbz	r2, 80103a0 <_strtod_l+0xd0>
 8010390:	2135      	movs	r1, #53	@ 0x35
 8010392:	a81c      	add	r0, sp, #112	@ 0x70
 8010394:	f003 fdaa 	bl	8013eec <__copybits>
 8010398:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801039a:	9805      	ldr	r0, [sp, #20]
 801039c:	f003 f978 	bl	8013690 <_Bfree>
 80103a0:	3e01      	subs	r6, #1
 80103a2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80103a4:	2e04      	cmp	r6, #4
 80103a6:	d806      	bhi.n	80103b6 <_strtod_l+0xe6>
 80103a8:	e8df f006 	tbb	[pc, r6]
 80103ac:	201d0314 	.word	0x201d0314
 80103b0:	14          	.byte	0x14
 80103b1:	00          	.byte	0x00
 80103b2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80103b6:	05e1      	lsls	r1, r4, #23
 80103b8:	bf48      	it	mi
 80103ba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80103be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80103c2:	0d1b      	lsrs	r3, r3, #20
 80103c4:	051b      	lsls	r3, r3, #20
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d1bb      	bne.n	8010342 <_strtod_l+0x72>
 80103ca:	f001 fe21 	bl	8012010 <__errno>
 80103ce:	2322      	movs	r3, #34	@ 0x22
 80103d0:	6003      	str	r3, [r0, #0]
 80103d2:	e7b6      	b.n	8010342 <_strtod_l+0x72>
 80103d4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80103d8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80103dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80103e0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80103e4:	e7e7      	b.n	80103b6 <_strtod_l+0xe6>
 80103e6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8010564 <_strtod_l+0x294>
 80103ea:	e7e4      	b.n	80103b6 <_strtod_l+0xe6>
 80103ec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80103f0:	f04f 3aff 	mov.w	sl, #4294967295
 80103f4:	e7df      	b.n	80103b6 <_strtod_l+0xe6>
 80103f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80103f8:	1c5a      	adds	r2, r3, #1
 80103fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80103fc:	785b      	ldrb	r3, [r3, #1]
 80103fe:	2b30      	cmp	r3, #48	@ 0x30
 8010400:	d0f9      	beq.n	80103f6 <_strtod_l+0x126>
 8010402:	2b00      	cmp	r3, #0
 8010404:	d09d      	beq.n	8010342 <_strtod_l+0x72>
 8010406:	2301      	movs	r3, #1
 8010408:	9309      	str	r3, [sp, #36]	@ 0x24
 801040a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801040c:	930c      	str	r3, [sp, #48]	@ 0x30
 801040e:	2300      	movs	r3, #0
 8010410:	9308      	str	r3, [sp, #32]
 8010412:	930a      	str	r3, [sp, #40]	@ 0x28
 8010414:	461f      	mov	r7, r3
 8010416:	220a      	movs	r2, #10
 8010418:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801041a:	7805      	ldrb	r5, [r0, #0]
 801041c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8010420:	b2d9      	uxtb	r1, r3
 8010422:	2909      	cmp	r1, #9
 8010424:	d928      	bls.n	8010478 <_strtod_l+0x1a8>
 8010426:	494e      	ldr	r1, [pc, #312]	@ (8010560 <_strtod_l+0x290>)
 8010428:	2201      	movs	r2, #1
 801042a:	f001 fd38 	bl	8011e9e <strncmp>
 801042e:	2800      	cmp	r0, #0
 8010430:	d032      	beq.n	8010498 <_strtod_l+0x1c8>
 8010432:	2000      	movs	r0, #0
 8010434:	462a      	mov	r2, r5
 8010436:	4681      	mov	r9, r0
 8010438:	463d      	mov	r5, r7
 801043a:	4603      	mov	r3, r0
 801043c:	2a65      	cmp	r2, #101	@ 0x65
 801043e:	d001      	beq.n	8010444 <_strtod_l+0x174>
 8010440:	2a45      	cmp	r2, #69	@ 0x45
 8010442:	d114      	bne.n	801046e <_strtod_l+0x19e>
 8010444:	b91d      	cbnz	r5, 801044e <_strtod_l+0x17e>
 8010446:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010448:	4302      	orrs	r2, r0
 801044a:	d095      	beq.n	8010378 <_strtod_l+0xa8>
 801044c:	2500      	movs	r5, #0
 801044e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8010450:	1c62      	adds	r2, r4, #1
 8010452:	9219      	str	r2, [sp, #100]	@ 0x64
 8010454:	7862      	ldrb	r2, [r4, #1]
 8010456:	2a2b      	cmp	r2, #43	@ 0x2b
 8010458:	d077      	beq.n	801054a <_strtod_l+0x27a>
 801045a:	2a2d      	cmp	r2, #45	@ 0x2d
 801045c:	d07b      	beq.n	8010556 <_strtod_l+0x286>
 801045e:	f04f 0c00 	mov.w	ip, #0
 8010462:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8010466:	2909      	cmp	r1, #9
 8010468:	f240 8082 	bls.w	8010570 <_strtod_l+0x2a0>
 801046c:	9419      	str	r4, [sp, #100]	@ 0x64
 801046e:	f04f 0800 	mov.w	r8, #0
 8010472:	e0a2      	b.n	80105ba <_strtod_l+0x2ea>
 8010474:	2300      	movs	r3, #0
 8010476:	e7c7      	b.n	8010408 <_strtod_l+0x138>
 8010478:	2f08      	cmp	r7, #8
 801047a:	bfd5      	itete	le
 801047c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801047e:	9908      	ldrgt	r1, [sp, #32]
 8010480:	fb02 3301 	mlale	r3, r2, r1, r3
 8010484:	fb02 3301 	mlagt	r3, r2, r1, r3
 8010488:	f100 0001 	add.w	r0, r0, #1
 801048c:	bfd4      	ite	le
 801048e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8010490:	9308      	strgt	r3, [sp, #32]
 8010492:	3701      	adds	r7, #1
 8010494:	9019      	str	r0, [sp, #100]	@ 0x64
 8010496:	e7bf      	b.n	8010418 <_strtod_l+0x148>
 8010498:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801049a:	1c5a      	adds	r2, r3, #1
 801049c:	9219      	str	r2, [sp, #100]	@ 0x64
 801049e:	785a      	ldrb	r2, [r3, #1]
 80104a0:	b37f      	cbz	r7, 8010502 <_strtod_l+0x232>
 80104a2:	4681      	mov	r9, r0
 80104a4:	463d      	mov	r5, r7
 80104a6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80104aa:	2b09      	cmp	r3, #9
 80104ac:	d912      	bls.n	80104d4 <_strtod_l+0x204>
 80104ae:	2301      	movs	r3, #1
 80104b0:	e7c4      	b.n	801043c <_strtod_l+0x16c>
 80104b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80104b4:	1c5a      	adds	r2, r3, #1
 80104b6:	9219      	str	r2, [sp, #100]	@ 0x64
 80104b8:	785a      	ldrb	r2, [r3, #1]
 80104ba:	3001      	adds	r0, #1
 80104bc:	2a30      	cmp	r2, #48	@ 0x30
 80104be:	d0f8      	beq.n	80104b2 <_strtod_l+0x1e2>
 80104c0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80104c4:	2b08      	cmp	r3, #8
 80104c6:	f200 84d3 	bhi.w	8010e70 <_strtod_l+0xba0>
 80104ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80104cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80104ce:	4681      	mov	r9, r0
 80104d0:	2000      	movs	r0, #0
 80104d2:	4605      	mov	r5, r0
 80104d4:	3a30      	subs	r2, #48	@ 0x30
 80104d6:	f100 0301 	add.w	r3, r0, #1
 80104da:	d02a      	beq.n	8010532 <_strtod_l+0x262>
 80104dc:	4499      	add	r9, r3
 80104de:	eb00 0c05 	add.w	ip, r0, r5
 80104e2:	462b      	mov	r3, r5
 80104e4:	210a      	movs	r1, #10
 80104e6:	4563      	cmp	r3, ip
 80104e8:	d10d      	bne.n	8010506 <_strtod_l+0x236>
 80104ea:	1c69      	adds	r1, r5, #1
 80104ec:	4401      	add	r1, r0
 80104ee:	4428      	add	r0, r5
 80104f0:	2808      	cmp	r0, #8
 80104f2:	dc16      	bgt.n	8010522 <_strtod_l+0x252>
 80104f4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80104f6:	230a      	movs	r3, #10
 80104f8:	fb03 2300 	mla	r3, r3, r0, r2
 80104fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80104fe:	2300      	movs	r3, #0
 8010500:	e018      	b.n	8010534 <_strtod_l+0x264>
 8010502:	4638      	mov	r0, r7
 8010504:	e7da      	b.n	80104bc <_strtod_l+0x1ec>
 8010506:	2b08      	cmp	r3, #8
 8010508:	f103 0301 	add.w	r3, r3, #1
 801050c:	dc03      	bgt.n	8010516 <_strtod_l+0x246>
 801050e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010510:	434e      	muls	r6, r1
 8010512:	960a      	str	r6, [sp, #40]	@ 0x28
 8010514:	e7e7      	b.n	80104e6 <_strtod_l+0x216>
 8010516:	2b10      	cmp	r3, #16
 8010518:	bfde      	ittt	le
 801051a:	9e08      	ldrle	r6, [sp, #32]
 801051c:	434e      	mulle	r6, r1
 801051e:	9608      	strle	r6, [sp, #32]
 8010520:	e7e1      	b.n	80104e6 <_strtod_l+0x216>
 8010522:	280f      	cmp	r0, #15
 8010524:	dceb      	bgt.n	80104fe <_strtod_l+0x22e>
 8010526:	9808      	ldr	r0, [sp, #32]
 8010528:	230a      	movs	r3, #10
 801052a:	fb03 2300 	mla	r3, r3, r0, r2
 801052e:	9308      	str	r3, [sp, #32]
 8010530:	e7e5      	b.n	80104fe <_strtod_l+0x22e>
 8010532:	4629      	mov	r1, r5
 8010534:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010536:	1c50      	adds	r0, r2, #1
 8010538:	9019      	str	r0, [sp, #100]	@ 0x64
 801053a:	7852      	ldrb	r2, [r2, #1]
 801053c:	4618      	mov	r0, r3
 801053e:	460d      	mov	r5, r1
 8010540:	e7b1      	b.n	80104a6 <_strtod_l+0x1d6>
 8010542:	f04f 0900 	mov.w	r9, #0
 8010546:	2301      	movs	r3, #1
 8010548:	e77d      	b.n	8010446 <_strtod_l+0x176>
 801054a:	f04f 0c00 	mov.w	ip, #0
 801054e:	1ca2      	adds	r2, r4, #2
 8010550:	9219      	str	r2, [sp, #100]	@ 0x64
 8010552:	78a2      	ldrb	r2, [r4, #2]
 8010554:	e785      	b.n	8010462 <_strtod_l+0x192>
 8010556:	f04f 0c01 	mov.w	ip, #1
 801055a:	e7f8      	b.n	801054e <_strtod_l+0x27e>
 801055c:	08016690 	.word	0x08016690
 8010560:	08016678 	.word	0x08016678
 8010564:	7ff00000 	.word	0x7ff00000
 8010568:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801056a:	1c51      	adds	r1, r2, #1
 801056c:	9119      	str	r1, [sp, #100]	@ 0x64
 801056e:	7852      	ldrb	r2, [r2, #1]
 8010570:	2a30      	cmp	r2, #48	@ 0x30
 8010572:	d0f9      	beq.n	8010568 <_strtod_l+0x298>
 8010574:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8010578:	2908      	cmp	r1, #8
 801057a:	f63f af78 	bhi.w	801046e <_strtod_l+0x19e>
 801057e:	3a30      	subs	r2, #48	@ 0x30
 8010580:	920e      	str	r2, [sp, #56]	@ 0x38
 8010582:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010584:	920f      	str	r2, [sp, #60]	@ 0x3c
 8010586:	f04f 080a 	mov.w	r8, #10
 801058a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801058c:	1c56      	adds	r6, r2, #1
 801058e:	9619      	str	r6, [sp, #100]	@ 0x64
 8010590:	7852      	ldrb	r2, [r2, #1]
 8010592:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8010596:	f1be 0f09 	cmp.w	lr, #9
 801059a:	d939      	bls.n	8010610 <_strtod_l+0x340>
 801059c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801059e:	1a76      	subs	r6, r6, r1
 80105a0:	2e08      	cmp	r6, #8
 80105a2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80105a6:	dc03      	bgt.n	80105b0 <_strtod_l+0x2e0>
 80105a8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80105aa:	4588      	cmp	r8, r1
 80105ac:	bfa8      	it	ge
 80105ae:	4688      	movge	r8, r1
 80105b0:	f1bc 0f00 	cmp.w	ip, #0
 80105b4:	d001      	beq.n	80105ba <_strtod_l+0x2ea>
 80105b6:	f1c8 0800 	rsb	r8, r8, #0
 80105ba:	2d00      	cmp	r5, #0
 80105bc:	d14e      	bne.n	801065c <_strtod_l+0x38c>
 80105be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80105c0:	4308      	orrs	r0, r1
 80105c2:	f47f aebe 	bne.w	8010342 <_strtod_l+0x72>
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	f47f aed6 	bne.w	8010378 <_strtod_l+0xa8>
 80105cc:	2a69      	cmp	r2, #105	@ 0x69
 80105ce:	d028      	beq.n	8010622 <_strtod_l+0x352>
 80105d0:	dc25      	bgt.n	801061e <_strtod_l+0x34e>
 80105d2:	2a49      	cmp	r2, #73	@ 0x49
 80105d4:	d025      	beq.n	8010622 <_strtod_l+0x352>
 80105d6:	2a4e      	cmp	r2, #78	@ 0x4e
 80105d8:	f47f aece 	bne.w	8010378 <_strtod_l+0xa8>
 80105dc:	499b      	ldr	r1, [pc, #620]	@ (801084c <_strtod_l+0x57c>)
 80105de:	a819      	add	r0, sp, #100	@ 0x64
 80105e0:	f002 fe9e 	bl	8013320 <__match>
 80105e4:	2800      	cmp	r0, #0
 80105e6:	f43f aec7 	beq.w	8010378 <_strtod_l+0xa8>
 80105ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80105ec:	781b      	ldrb	r3, [r3, #0]
 80105ee:	2b28      	cmp	r3, #40	@ 0x28
 80105f0:	d12e      	bne.n	8010650 <_strtod_l+0x380>
 80105f2:	4997      	ldr	r1, [pc, #604]	@ (8010850 <_strtod_l+0x580>)
 80105f4:	aa1c      	add	r2, sp, #112	@ 0x70
 80105f6:	a819      	add	r0, sp, #100	@ 0x64
 80105f8:	f002 fea6 	bl	8013348 <__hexnan>
 80105fc:	2805      	cmp	r0, #5
 80105fe:	d127      	bne.n	8010650 <_strtod_l+0x380>
 8010600:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010602:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8010606:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801060a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801060e:	e698      	b.n	8010342 <_strtod_l+0x72>
 8010610:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010612:	fb08 2101 	mla	r1, r8, r1, r2
 8010616:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801061a:	920e      	str	r2, [sp, #56]	@ 0x38
 801061c:	e7b5      	b.n	801058a <_strtod_l+0x2ba>
 801061e:	2a6e      	cmp	r2, #110	@ 0x6e
 8010620:	e7da      	b.n	80105d8 <_strtod_l+0x308>
 8010622:	498c      	ldr	r1, [pc, #560]	@ (8010854 <_strtod_l+0x584>)
 8010624:	a819      	add	r0, sp, #100	@ 0x64
 8010626:	f002 fe7b 	bl	8013320 <__match>
 801062a:	2800      	cmp	r0, #0
 801062c:	f43f aea4 	beq.w	8010378 <_strtod_l+0xa8>
 8010630:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010632:	4989      	ldr	r1, [pc, #548]	@ (8010858 <_strtod_l+0x588>)
 8010634:	3b01      	subs	r3, #1
 8010636:	a819      	add	r0, sp, #100	@ 0x64
 8010638:	9319      	str	r3, [sp, #100]	@ 0x64
 801063a:	f002 fe71 	bl	8013320 <__match>
 801063e:	b910      	cbnz	r0, 8010646 <_strtod_l+0x376>
 8010640:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010642:	3301      	adds	r3, #1
 8010644:	9319      	str	r3, [sp, #100]	@ 0x64
 8010646:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8010868 <_strtod_l+0x598>
 801064a:	f04f 0a00 	mov.w	sl, #0
 801064e:	e678      	b.n	8010342 <_strtod_l+0x72>
 8010650:	4882      	ldr	r0, [pc, #520]	@ (801085c <_strtod_l+0x58c>)
 8010652:	f001 fd19 	bl	8012088 <nan>
 8010656:	ec5b ab10 	vmov	sl, fp, d0
 801065a:	e672      	b.n	8010342 <_strtod_l+0x72>
 801065c:	eba8 0309 	sub.w	r3, r8, r9
 8010660:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010662:	9309      	str	r3, [sp, #36]	@ 0x24
 8010664:	2f00      	cmp	r7, #0
 8010666:	bf08      	it	eq
 8010668:	462f      	moveq	r7, r5
 801066a:	2d10      	cmp	r5, #16
 801066c:	462c      	mov	r4, r5
 801066e:	bfa8      	it	ge
 8010670:	2410      	movge	r4, #16
 8010672:	f7ef ff67 	bl	8000544 <__aeabi_ui2d>
 8010676:	2d09      	cmp	r5, #9
 8010678:	4682      	mov	sl, r0
 801067a:	468b      	mov	fp, r1
 801067c:	dc13      	bgt.n	80106a6 <_strtod_l+0x3d6>
 801067e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010680:	2b00      	cmp	r3, #0
 8010682:	f43f ae5e 	beq.w	8010342 <_strtod_l+0x72>
 8010686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010688:	dd78      	ble.n	801077c <_strtod_l+0x4ac>
 801068a:	2b16      	cmp	r3, #22
 801068c:	dc5f      	bgt.n	801074e <_strtod_l+0x47e>
 801068e:	4974      	ldr	r1, [pc, #464]	@ (8010860 <_strtod_l+0x590>)
 8010690:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010694:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010698:	4652      	mov	r2, sl
 801069a:	465b      	mov	r3, fp
 801069c:	f7ef ffcc 	bl	8000638 <__aeabi_dmul>
 80106a0:	4682      	mov	sl, r0
 80106a2:	468b      	mov	fp, r1
 80106a4:	e64d      	b.n	8010342 <_strtod_l+0x72>
 80106a6:	4b6e      	ldr	r3, [pc, #440]	@ (8010860 <_strtod_l+0x590>)
 80106a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80106ac:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80106b0:	f7ef ffc2 	bl	8000638 <__aeabi_dmul>
 80106b4:	4682      	mov	sl, r0
 80106b6:	9808      	ldr	r0, [sp, #32]
 80106b8:	468b      	mov	fp, r1
 80106ba:	f7ef ff43 	bl	8000544 <__aeabi_ui2d>
 80106be:	4602      	mov	r2, r0
 80106c0:	460b      	mov	r3, r1
 80106c2:	4650      	mov	r0, sl
 80106c4:	4659      	mov	r1, fp
 80106c6:	f7ef fe01 	bl	80002cc <__adddf3>
 80106ca:	2d0f      	cmp	r5, #15
 80106cc:	4682      	mov	sl, r0
 80106ce:	468b      	mov	fp, r1
 80106d0:	ddd5      	ble.n	801067e <_strtod_l+0x3ae>
 80106d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106d4:	1b2c      	subs	r4, r5, r4
 80106d6:	441c      	add	r4, r3
 80106d8:	2c00      	cmp	r4, #0
 80106da:	f340 8096 	ble.w	801080a <_strtod_l+0x53a>
 80106de:	f014 030f 	ands.w	r3, r4, #15
 80106e2:	d00a      	beq.n	80106fa <_strtod_l+0x42a>
 80106e4:	495e      	ldr	r1, [pc, #376]	@ (8010860 <_strtod_l+0x590>)
 80106e6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80106ea:	4652      	mov	r2, sl
 80106ec:	465b      	mov	r3, fp
 80106ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80106f2:	f7ef ffa1 	bl	8000638 <__aeabi_dmul>
 80106f6:	4682      	mov	sl, r0
 80106f8:	468b      	mov	fp, r1
 80106fa:	f034 040f 	bics.w	r4, r4, #15
 80106fe:	d073      	beq.n	80107e8 <_strtod_l+0x518>
 8010700:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8010704:	dd48      	ble.n	8010798 <_strtod_l+0x4c8>
 8010706:	2400      	movs	r4, #0
 8010708:	46a0      	mov	r8, r4
 801070a:	940a      	str	r4, [sp, #40]	@ 0x28
 801070c:	46a1      	mov	r9, r4
 801070e:	9a05      	ldr	r2, [sp, #20]
 8010710:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8010868 <_strtod_l+0x598>
 8010714:	2322      	movs	r3, #34	@ 0x22
 8010716:	6013      	str	r3, [r2, #0]
 8010718:	f04f 0a00 	mov.w	sl, #0
 801071c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801071e:	2b00      	cmp	r3, #0
 8010720:	f43f ae0f 	beq.w	8010342 <_strtod_l+0x72>
 8010724:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010726:	9805      	ldr	r0, [sp, #20]
 8010728:	f002 ffb2 	bl	8013690 <_Bfree>
 801072c:	9805      	ldr	r0, [sp, #20]
 801072e:	4649      	mov	r1, r9
 8010730:	f002 ffae 	bl	8013690 <_Bfree>
 8010734:	9805      	ldr	r0, [sp, #20]
 8010736:	4641      	mov	r1, r8
 8010738:	f002 ffaa 	bl	8013690 <_Bfree>
 801073c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801073e:	9805      	ldr	r0, [sp, #20]
 8010740:	f002 ffa6 	bl	8013690 <_Bfree>
 8010744:	9805      	ldr	r0, [sp, #20]
 8010746:	4621      	mov	r1, r4
 8010748:	f002 ffa2 	bl	8013690 <_Bfree>
 801074c:	e5f9      	b.n	8010342 <_strtod_l+0x72>
 801074e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010750:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8010754:	4293      	cmp	r3, r2
 8010756:	dbbc      	blt.n	80106d2 <_strtod_l+0x402>
 8010758:	4c41      	ldr	r4, [pc, #260]	@ (8010860 <_strtod_l+0x590>)
 801075a:	f1c5 050f 	rsb	r5, r5, #15
 801075e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010762:	4652      	mov	r2, sl
 8010764:	465b      	mov	r3, fp
 8010766:	e9d1 0100 	ldrd	r0, r1, [r1]
 801076a:	f7ef ff65 	bl	8000638 <__aeabi_dmul>
 801076e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010770:	1b5d      	subs	r5, r3, r5
 8010772:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010776:	e9d4 2300 	ldrd	r2, r3, [r4]
 801077a:	e78f      	b.n	801069c <_strtod_l+0x3cc>
 801077c:	3316      	adds	r3, #22
 801077e:	dba8      	blt.n	80106d2 <_strtod_l+0x402>
 8010780:	4b37      	ldr	r3, [pc, #220]	@ (8010860 <_strtod_l+0x590>)
 8010782:	eba9 0808 	sub.w	r8, r9, r8
 8010786:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801078a:	e9d8 2300 	ldrd	r2, r3, [r8]
 801078e:	4650      	mov	r0, sl
 8010790:	4659      	mov	r1, fp
 8010792:	f7f0 f87b 	bl	800088c <__aeabi_ddiv>
 8010796:	e783      	b.n	80106a0 <_strtod_l+0x3d0>
 8010798:	4b32      	ldr	r3, [pc, #200]	@ (8010864 <_strtod_l+0x594>)
 801079a:	9308      	str	r3, [sp, #32]
 801079c:	2300      	movs	r3, #0
 801079e:	1124      	asrs	r4, r4, #4
 80107a0:	4650      	mov	r0, sl
 80107a2:	4659      	mov	r1, fp
 80107a4:	461e      	mov	r6, r3
 80107a6:	2c01      	cmp	r4, #1
 80107a8:	dc21      	bgt.n	80107ee <_strtod_l+0x51e>
 80107aa:	b10b      	cbz	r3, 80107b0 <_strtod_l+0x4e0>
 80107ac:	4682      	mov	sl, r0
 80107ae:	468b      	mov	fp, r1
 80107b0:	492c      	ldr	r1, [pc, #176]	@ (8010864 <_strtod_l+0x594>)
 80107b2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80107b6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80107ba:	4652      	mov	r2, sl
 80107bc:	465b      	mov	r3, fp
 80107be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80107c2:	f7ef ff39 	bl	8000638 <__aeabi_dmul>
 80107c6:	4b28      	ldr	r3, [pc, #160]	@ (8010868 <_strtod_l+0x598>)
 80107c8:	460a      	mov	r2, r1
 80107ca:	400b      	ands	r3, r1
 80107cc:	4927      	ldr	r1, [pc, #156]	@ (801086c <_strtod_l+0x59c>)
 80107ce:	428b      	cmp	r3, r1
 80107d0:	4682      	mov	sl, r0
 80107d2:	d898      	bhi.n	8010706 <_strtod_l+0x436>
 80107d4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80107d8:	428b      	cmp	r3, r1
 80107da:	bf86      	itte	hi
 80107dc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8010870 <_strtod_l+0x5a0>
 80107e0:	f04f 3aff 	movhi.w	sl, #4294967295
 80107e4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80107e8:	2300      	movs	r3, #0
 80107ea:	9308      	str	r3, [sp, #32]
 80107ec:	e07a      	b.n	80108e4 <_strtod_l+0x614>
 80107ee:	07e2      	lsls	r2, r4, #31
 80107f0:	d505      	bpl.n	80107fe <_strtod_l+0x52e>
 80107f2:	9b08      	ldr	r3, [sp, #32]
 80107f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f8:	f7ef ff1e 	bl	8000638 <__aeabi_dmul>
 80107fc:	2301      	movs	r3, #1
 80107fe:	9a08      	ldr	r2, [sp, #32]
 8010800:	3208      	adds	r2, #8
 8010802:	3601      	adds	r6, #1
 8010804:	1064      	asrs	r4, r4, #1
 8010806:	9208      	str	r2, [sp, #32]
 8010808:	e7cd      	b.n	80107a6 <_strtod_l+0x4d6>
 801080a:	d0ed      	beq.n	80107e8 <_strtod_l+0x518>
 801080c:	4264      	negs	r4, r4
 801080e:	f014 020f 	ands.w	r2, r4, #15
 8010812:	d00a      	beq.n	801082a <_strtod_l+0x55a>
 8010814:	4b12      	ldr	r3, [pc, #72]	@ (8010860 <_strtod_l+0x590>)
 8010816:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801081a:	4650      	mov	r0, sl
 801081c:	4659      	mov	r1, fp
 801081e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010822:	f7f0 f833 	bl	800088c <__aeabi_ddiv>
 8010826:	4682      	mov	sl, r0
 8010828:	468b      	mov	fp, r1
 801082a:	1124      	asrs	r4, r4, #4
 801082c:	d0dc      	beq.n	80107e8 <_strtod_l+0x518>
 801082e:	2c1f      	cmp	r4, #31
 8010830:	dd20      	ble.n	8010874 <_strtod_l+0x5a4>
 8010832:	2400      	movs	r4, #0
 8010834:	46a0      	mov	r8, r4
 8010836:	940a      	str	r4, [sp, #40]	@ 0x28
 8010838:	46a1      	mov	r9, r4
 801083a:	9a05      	ldr	r2, [sp, #20]
 801083c:	2322      	movs	r3, #34	@ 0x22
 801083e:	f04f 0a00 	mov.w	sl, #0
 8010842:	f04f 0b00 	mov.w	fp, #0
 8010846:	6013      	str	r3, [r2, #0]
 8010848:	e768      	b.n	801071c <_strtod_l+0x44c>
 801084a:	bf00      	nop
 801084c:	080166dd 	.word	0x080166dd
 8010850:	0801667c 	.word	0x0801667c
 8010854:	080166d5 	.word	0x080166d5
 8010858:	080167c1 	.word	0x080167c1
 801085c:	080167bd 	.word	0x080167bd
 8010860:	08016928 	.word	0x08016928
 8010864:	08016900 	.word	0x08016900
 8010868:	7ff00000 	.word	0x7ff00000
 801086c:	7ca00000 	.word	0x7ca00000
 8010870:	7fefffff 	.word	0x7fefffff
 8010874:	f014 0310 	ands.w	r3, r4, #16
 8010878:	bf18      	it	ne
 801087a:	236a      	movne	r3, #106	@ 0x6a
 801087c:	4ea9      	ldr	r6, [pc, #676]	@ (8010b24 <_strtod_l+0x854>)
 801087e:	9308      	str	r3, [sp, #32]
 8010880:	4650      	mov	r0, sl
 8010882:	4659      	mov	r1, fp
 8010884:	2300      	movs	r3, #0
 8010886:	07e2      	lsls	r2, r4, #31
 8010888:	d504      	bpl.n	8010894 <_strtod_l+0x5c4>
 801088a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801088e:	f7ef fed3 	bl	8000638 <__aeabi_dmul>
 8010892:	2301      	movs	r3, #1
 8010894:	1064      	asrs	r4, r4, #1
 8010896:	f106 0608 	add.w	r6, r6, #8
 801089a:	d1f4      	bne.n	8010886 <_strtod_l+0x5b6>
 801089c:	b10b      	cbz	r3, 80108a2 <_strtod_l+0x5d2>
 801089e:	4682      	mov	sl, r0
 80108a0:	468b      	mov	fp, r1
 80108a2:	9b08      	ldr	r3, [sp, #32]
 80108a4:	b1b3      	cbz	r3, 80108d4 <_strtod_l+0x604>
 80108a6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80108aa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	4659      	mov	r1, fp
 80108b2:	dd0f      	ble.n	80108d4 <_strtod_l+0x604>
 80108b4:	2b1f      	cmp	r3, #31
 80108b6:	dd55      	ble.n	8010964 <_strtod_l+0x694>
 80108b8:	2b34      	cmp	r3, #52	@ 0x34
 80108ba:	bfde      	ittt	le
 80108bc:	f04f 33ff 	movle.w	r3, #4294967295
 80108c0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80108c4:	4093      	lslle	r3, r2
 80108c6:	f04f 0a00 	mov.w	sl, #0
 80108ca:	bfcc      	ite	gt
 80108cc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80108d0:	ea03 0b01 	andle.w	fp, r3, r1
 80108d4:	2200      	movs	r2, #0
 80108d6:	2300      	movs	r3, #0
 80108d8:	4650      	mov	r0, sl
 80108da:	4659      	mov	r1, fp
 80108dc:	f7f0 f914 	bl	8000b08 <__aeabi_dcmpeq>
 80108e0:	2800      	cmp	r0, #0
 80108e2:	d1a6      	bne.n	8010832 <_strtod_l+0x562>
 80108e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80108e6:	9300      	str	r3, [sp, #0]
 80108e8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80108ea:	9805      	ldr	r0, [sp, #20]
 80108ec:	462b      	mov	r3, r5
 80108ee:	463a      	mov	r2, r7
 80108f0:	f002 ff36 	bl	8013760 <__s2b>
 80108f4:	900a      	str	r0, [sp, #40]	@ 0x28
 80108f6:	2800      	cmp	r0, #0
 80108f8:	f43f af05 	beq.w	8010706 <_strtod_l+0x436>
 80108fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80108fe:	2a00      	cmp	r2, #0
 8010900:	eba9 0308 	sub.w	r3, r9, r8
 8010904:	bfa8      	it	ge
 8010906:	2300      	movge	r3, #0
 8010908:	9312      	str	r3, [sp, #72]	@ 0x48
 801090a:	2400      	movs	r4, #0
 801090c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8010910:	9316      	str	r3, [sp, #88]	@ 0x58
 8010912:	46a0      	mov	r8, r4
 8010914:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010916:	9805      	ldr	r0, [sp, #20]
 8010918:	6859      	ldr	r1, [r3, #4]
 801091a:	f002 fe79 	bl	8013610 <_Balloc>
 801091e:	4681      	mov	r9, r0
 8010920:	2800      	cmp	r0, #0
 8010922:	f43f aef4 	beq.w	801070e <_strtod_l+0x43e>
 8010926:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010928:	691a      	ldr	r2, [r3, #16]
 801092a:	3202      	adds	r2, #2
 801092c:	f103 010c 	add.w	r1, r3, #12
 8010930:	0092      	lsls	r2, r2, #2
 8010932:	300c      	adds	r0, #12
 8010934:	f001 fb99 	bl	801206a <memcpy>
 8010938:	ec4b ab10 	vmov	d0, sl, fp
 801093c:	9805      	ldr	r0, [sp, #20]
 801093e:	aa1c      	add	r2, sp, #112	@ 0x70
 8010940:	a91b      	add	r1, sp, #108	@ 0x6c
 8010942:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8010946:	f003 fa47 	bl	8013dd8 <__d2b>
 801094a:	901a      	str	r0, [sp, #104]	@ 0x68
 801094c:	2800      	cmp	r0, #0
 801094e:	f43f aede 	beq.w	801070e <_strtod_l+0x43e>
 8010952:	9805      	ldr	r0, [sp, #20]
 8010954:	2101      	movs	r1, #1
 8010956:	f002 ff99 	bl	801388c <__i2b>
 801095a:	4680      	mov	r8, r0
 801095c:	b948      	cbnz	r0, 8010972 <_strtod_l+0x6a2>
 801095e:	f04f 0800 	mov.w	r8, #0
 8010962:	e6d4      	b.n	801070e <_strtod_l+0x43e>
 8010964:	f04f 32ff 	mov.w	r2, #4294967295
 8010968:	fa02 f303 	lsl.w	r3, r2, r3
 801096c:	ea03 0a0a 	and.w	sl, r3, sl
 8010970:	e7b0      	b.n	80108d4 <_strtod_l+0x604>
 8010972:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8010974:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010976:	2d00      	cmp	r5, #0
 8010978:	bfab      	itete	ge
 801097a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801097c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801097e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8010980:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8010982:	bfac      	ite	ge
 8010984:	18ef      	addge	r7, r5, r3
 8010986:	1b5e      	sublt	r6, r3, r5
 8010988:	9b08      	ldr	r3, [sp, #32]
 801098a:	1aed      	subs	r5, r5, r3
 801098c:	4415      	add	r5, r2
 801098e:	4b66      	ldr	r3, [pc, #408]	@ (8010b28 <_strtod_l+0x858>)
 8010990:	3d01      	subs	r5, #1
 8010992:	429d      	cmp	r5, r3
 8010994:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010998:	da50      	bge.n	8010a3c <_strtod_l+0x76c>
 801099a:	1b5b      	subs	r3, r3, r5
 801099c:	2b1f      	cmp	r3, #31
 801099e:	eba2 0203 	sub.w	r2, r2, r3
 80109a2:	f04f 0101 	mov.w	r1, #1
 80109a6:	dc3d      	bgt.n	8010a24 <_strtod_l+0x754>
 80109a8:	fa01 f303 	lsl.w	r3, r1, r3
 80109ac:	9313      	str	r3, [sp, #76]	@ 0x4c
 80109ae:	2300      	movs	r3, #0
 80109b0:	9310      	str	r3, [sp, #64]	@ 0x40
 80109b2:	18bd      	adds	r5, r7, r2
 80109b4:	9b08      	ldr	r3, [sp, #32]
 80109b6:	42af      	cmp	r7, r5
 80109b8:	4416      	add	r6, r2
 80109ba:	441e      	add	r6, r3
 80109bc:	463b      	mov	r3, r7
 80109be:	bfa8      	it	ge
 80109c0:	462b      	movge	r3, r5
 80109c2:	42b3      	cmp	r3, r6
 80109c4:	bfa8      	it	ge
 80109c6:	4633      	movge	r3, r6
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	bfc2      	ittt	gt
 80109cc:	1aed      	subgt	r5, r5, r3
 80109ce:	1af6      	subgt	r6, r6, r3
 80109d0:	1aff      	subgt	r7, r7, r3
 80109d2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	dd16      	ble.n	8010a06 <_strtod_l+0x736>
 80109d8:	4641      	mov	r1, r8
 80109da:	9805      	ldr	r0, [sp, #20]
 80109dc:	461a      	mov	r2, r3
 80109de:	f003 f815 	bl	8013a0c <__pow5mult>
 80109e2:	4680      	mov	r8, r0
 80109e4:	2800      	cmp	r0, #0
 80109e6:	d0ba      	beq.n	801095e <_strtod_l+0x68e>
 80109e8:	4601      	mov	r1, r0
 80109ea:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80109ec:	9805      	ldr	r0, [sp, #20]
 80109ee:	f002 ff63 	bl	80138b8 <__multiply>
 80109f2:	900e      	str	r0, [sp, #56]	@ 0x38
 80109f4:	2800      	cmp	r0, #0
 80109f6:	f43f ae8a 	beq.w	801070e <_strtod_l+0x43e>
 80109fa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80109fc:	9805      	ldr	r0, [sp, #20]
 80109fe:	f002 fe47 	bl	8013690 <_Bfree>
 8010a02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a04:	931a      	str	r3, [sp, #104]	@ 0x68
 8010a06:	2d00      	cmp	r5, #0
 8010a08:	dc1d      	bgt.n	8010a46 <_strtod_l+0x776>
 8010a0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	dd23      	ble.n	8010a58 <_strtod_l+0x788>
 8010a10:	4649      	mov	r1, r9
 8010a12:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8010a14:	9805      	ldr	r0, [sp, #20]
 8010a16:	f002 fff9 	bl	8013a0c <__pow5mult>
 8010a1a:	4681      	mov	r9, r0
 8010a1c:	b9e0      	cbnz	r0, 8010a58 <_strtod_l+0x788>
 8010a1e:	f04f 0900 	mov.w	r9, #0
 8010a22:	e674      	b.n	801070e <_strtod_l+0x43e>
 8010a24:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8010a28:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8010a2c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8010a30:	35e2      	adds	r5, #226	@ 0xe2
 8010a32:	fa01 f305 	lsl.w	r3, r1, r5
 8010a36:	9310      	str	r3, [sp, #64]	@ 0x40
 8010a38:	9113      	str	r1, [sp, #76]	@ 0x4c
 8010a3a:	e7ba      	b.n	80109b2 <_strtod_l+0x6e2>
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	9310      	str	r3, [sp, #64]	@ 0x40
 8010a40:	2301      	movs	r3, #1
 8010a42:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010a44:	e7b5      	b.n	80109b2 <_strtod_l+0x6e2>
 8010a46:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010a48:	9805      	ldr	r0, [sp, #20]
 8010a4a:	462a      	mov	r2, r5
 8010a4c:	f003 f838 	bl	8013ac0 <__lshift>
 8010a50:	901a      	str	r0, [sp, #104]	@ 0x68
 8010a52:	2800      	cmp	r0, #0
 8010a54:	d1d9      	bne.n	8010a0a <_strtod_l+0x73a>
 8010a56:	e65a      	b.n	801070e <_strtod_l+0x43e>
 8010a58:	2e00      	cmp	r6, #0
 8010a5a:	dd07      	ble.n	8010a6c <_strtod_l+0x79c>
 8010a5c:	4649      	mov	r1, r9
 8010a5e:	9805      	ldr	r0, [sp, #20]
 8010a60:	4632      	mov	r2, r6
 8010a62:	f003 f82d 	bl	8013ac0 <__lshift>
 8010a66:	4681      	mov	r9, r0
 8010a68:	2800      	cmp	r0, #0
 8010a6a:	d0d8      	beq.n	8010a1e <_strtod_l+0x74e>
 8010a6c:	2f00      	cmp	r7, #0
 8010a6e:	dd08      	ble.n	8010a82 <_strtod_l+0x7b2>
 8010a70:	4641      	mov	r1, r8
 8010a72:	9805      	ldr	r0, [sp, #20]
 8010a74:	463a      	mov	r2, r7
 8010a76:	f003 f823 	bl	8013ac0 <__lshift>
 8010a7a:	4680      	mov	r8, r0
 8010a7c:	2800      	cmp	r0, #0
 8010a7e:	f43f ae46 	beq.w	801070e <_strtod_l+0x43e>
 8010a82:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010a84:	9805      	ldr	r0, [sp, #20]
 8010a86:	464a      	mov	r2, r9
 8010a88:	f003 f8a2 	bl	8013bd0 <__mdiff>
 8010a8c:	4604      	mov	r4, r0
 8010a8e:	2800      	cmp	r0, #0
 8010a90:	f43f ae3d 	beq.w	801070e <_strtod_l+0x43e>
 8010a94:	68c3      	ldr	r3, [r0, #12]
 8010a96:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010a98:	2300      	movs	r3, #0
 8010a9a:	60c3      	str	r3, [r0, #12]
 8010a9c:	4641      	mov	r1, r8
 8010a9e:	f003 f87b 	bl	8013b98 <__mcmp>
 8010aa2:	2800      	cmp	r0, #0
 8010aa4:	da46      	bge.n	8010b34 <_strtod_l+0x864>
 8010aa6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010aa8:	ea53 030a 	orrs.w	r3, r3, sl
 8010aac:	d16c      	bne.n	8010b88 <_strtod_l+0x8b8>
 8010aae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d168      	bne.n	8010b88 <_strtod_l+0x8b8>
 8010ab6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010aba:	0d1b      	lsrs	r3, r3, #20
 8010abc:	051b      	lsls	r3, r3, #20
 8010abe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010ac2:	d961      	bls.n	8010b88 <_strtod_l+0x8b8>
 8010ac4:	6963      	ldr	r3, [r4, #20]
 8010ac6:	b913      	cbnz	r3, 8010ace <_strtod_l+0x7fe>
 8010ac8:	6923      	ldr	r3, [r4, #16]
 8010aca:	2b01      	cmp	r3, #1
 8010acc:	dd5c      	ble.n	8010b88 <_strtod_l+0x8b8>
 8010ace:	4621      	mov	r1, r4
 8010ad0:	2201      	movs	r2, #1
 8010ad2:	9805      	ldr	r0, [sp, #20]
 8010ad4:	f002 fff4 	bl	8013ac0 <__lshift>
 8010ad8:	4641      	mov	r1, r8
 8010ada:	4604      	mov	r4, r0
 8010adc:	f003 f85c 	bl	8013b98 <__mcmp>
 8010ae0:	2800      	cmp	r0, #0
 8010ae2:	dd51      	ble.n	8010b88 <_strtod_l+0x8b8>
 8010ae4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010ae8:	9a08      	ldr	r2, [sp, #32]
 8010aea:	0d1b      	lsrs	r3, r3, #20
 8010aec:	051b      	lsls	r3, r3, #20
 8010aee:	2a00      	cmp	r2, #0
 8010af0:	d06b      	beq.n	8010bca <_strtod_l+0x8fa>
 8010af2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010af6:	d868      	bhi.n	8010bca <_strtod_l+0x8fa>
 8010af8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8010afc:	f67f ae9d 	bls.w	801083a <_strtod_l+0x56a>
 8010b00:	4b0a      	ldr	r3, [pc, #40]	@ (8010b2c <_strtod_l+0x85c>)
 8010b02:	4650      	mov	r0, sl
 8010b04:	4659      	mov	r1, fp
 8010b06:	2200      	movs	r2, #0
 8010b08:	f7ef fd96 	bl	8000638 <__aeabi_dmul>
 8010b0c:	4b08      	ldr	r3, [pc, #32]	@ (8010b30 <_strtod_l+0x860>)
 8010b0e:	400b      	ands	r3, r1
 8010b10:	4682      	mov	sl, r0
 8010b12:	468b      	mov	fp, r1
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	f47f ae05 	bne.w	8010724 <_strtod_l+0x454>
 8010b1a:	9a05      	ldr	r2, [sp, #20]
 8010b1c:	2322      	movs	r3, #34	@ 0x22
 8010b1e:	6013      	str	r3, [r2, #0]
 8010b20:	e600      	b.n	8010724 <_strtod_l+0x454>
 8010b22:	bf00      	nop
 8010b24:	080166a8 	.word	0x080166a8
 8010b28:	fffffc02 	.word	0xfffffc02
 8010b2c:	39500000 	.word	0x39500000
 8010b30:	7ff00000 	.word	0x7ff00000
 8010b34:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010b38:	d165      	bne.n	8010c06 <_strtod_l+0x936>
 8010b3a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010b3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010b40:	b35a      	cbz	r2, 8010b9a <_strtod_l+0x8ca>
 8010b42:	4a9f      	ldr	r2, [pc, #636]	@ (8010dc0 <_strtod_l+0xaf0>)
 8010b44:	4293      	cmp	r3, r2
 8010b46:	d12b      	bne.n	8010ba0 <_strtod_l+0x8d0>
 8010b48:	9b08      	ldr	r3, [sp, #32]
 8010b4a:	4651      	mov	r1, sl
 8010b4c:	b303      	cbz	r3, 8010b90 <_strtod_l+0x8c0>
 8010b4e:	4b9d      	ldr	r3, [pc, #628]	@ (8010dc4 <_strtod_l+0xaf4>)
 8010b50:	465a      	mov	r2, fp
 8010b52:	4013      	ands	r3, r2
 8010b54:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010b58:	f04f 32ff 	mov.w	r2, #4294967295
 8010b5c:	d81b      	bhi.n	8010b96 <_strtod_l+0x8c6>
 8010b5e:	0d1b      	lsrs	r3, r3, #20
 8010b60:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010b64:	fa02 f303 	lsl.w	r3, r2, r3
 8010b68:	4299      	cmp	r1, r3
 8010b6a:	d119      	bne.n	8010ba0 <_strtod_l+0x8d0>
 8010b6c:	4b96      	ldr	r3, [pc, #600]	@ (8010dc8 <_strtod_l+0xaf8>)
 8010b6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010b70:	429a      	cmp	r2, r3
 8010b72:	d102      	bne.n	8010b7a <_strtod_l+0x8aa>
 8010b74:	3101      	adds	r1, #1
 8010b76:	f43f adca 	beq.w	801070e <_strtod_l+0x43e>
 8010b7a:	4b92      	ldr	r3, [pc, #584]	@ (8010dc4 <_strtod_l+0xaf4>)
 8010b7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010b7e:	401a      	ands	r2, r3
 8010b80:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8010b84:	f04f 0a00 	mov.w	sl, #0
 8010b88:	9b08      	ldr	r3, [sp, #32]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d1b8      	bne.n	8010b00 <_strtod_l+0x830>
 8010b8e:	e5c9      	b.n	8010724 <_strtod_l+0x454>
 8010b90:	f04f 33ff 	mov.w	r3, #4294967295
 8010b94:	e7e8      	b.n	8010b68 <_strtod_l+0x898>
 8010b96:	4613      	mov	r3, r2
 8010b98:	e7e6      	b.n	8010b68 <_strtod_l+0x898>
 8010b9a:	ea53 030a 	orrs.w	r3, r3, sl
 8010b9e:	d0a1      	beq.n	8010ae4 <_strtod_l+0x814>
 8010ba0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010ba2:	b1db      	cbz	r3, 8010bdc <_strtod_l+0x90c>
 8010ba4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010ba6:	4213      	tst	r3, r2
 8010ba8:	d0ee      	beq.n	8010b88 <_strtod_l+0x8b8>
 8010baa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010bac:	9a08      	ldr	r2, [sp, #32]
 8010bae:	4650      	mov	r0, sl
 8010bb0:	4659      	mov	r1, fp
 8010bb2:	b1bb      	cbz	r3, 8010be4 <_strtod_l+0x914>
 8010bb4:	f7ff fb6e 	bl	8010294 <sulp>
 8010bb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010bbc:	ec53 2b10 	vmov	r2, r3, d0
 8010bc0:	f7ef fb84 	bl	80002cc <__adddf3>
 8010bc4:	4682      	mov	sl, r0
 8010bc6:	468b      	mov	fp, r1
 8010bc8:	e7de      	b.n	8010b88 <_strtod_l+0x8b8>
 8010bca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8010bce:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010bd2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010bd6:	f04f 3aff 	mov.w	sl, #4294967295
 8010bda:	e7d5      	b.n	8010b88 <_strtod_l+0x8b8>
 8010bdc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010bde:	ea13 0f0a 	tst.w	r3, sl
 8010be2:	e7e1      	b.n	8010ba8 <_strtod_l+0x8d8>
 8010be4:	f7ff fb56 	bl	8010294 <sulp>
 8010be8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010bec:	ec53 2b10 	vmov	r2, r3, d0
 8010bf0:	f7ef fb6a 	bl	80002c8 <__aeabi_dsub>
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	4682      	mov	sl, r0
 8010bfa:	468b      	mov	fp, r1
 8010bfc:	f7ef ff84 	bl	8000b08 <__aeabi_dcmpeq>
 8010c00:	2800      	cmp	r0, #0
 8010c02:	d0c1      	beq.n	8010b88 <_strtod_l+0x8b8>
 8010c04:	e619      	b.n	801083a <_strtod_l+0x56a>
 8010c06:	4641      	mov	r1, r8
 8010c08:	4620      	mov	r0, r4
 8010c0a:	f003 f93d 	bl	8013e88 <__ratio>
 8010c0e:	ec57 6b10 	vmov	r6, r7, d0
 8010c12:	2200      	movs	r2, #0
 8010c14:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010c18:	4630      	mov	r0, r6
 8010c1a:	4639      	mov	r1, r7
 8010c1c:	f7ef ff88 	bl	8000b30 <__aeabi_dcmple>
 8010c20:	2800      	cmp	r0, #0
 8010c22:	d06f      	beq.n	8010d04 <_strtod_l+0xa34>
 8010c24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d17a      	bne.n	8010d20 <_strtod_l+0xa50>
 8010c2a:	f1ba 0f00 	cmp.w	sl, #0
 8010c2e:	d158      	bne.n	8010ce2 <_strtod_l+0xa12>
 8010c30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010c32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d15a      	bne.n	8010cf0 <_strtod_l+0xa20>
 8010c3a:	4b64      	ldr	r3, [pc, #400]	@ (8010dcc <_strtod_l+0xafc>)
 8010c3c:	2200      	movs	r2, #0
 8010c3e:	4630      	mov	r0, r6
 8010c40:	4639      	mov	r1, r7
 8010c42:	f7ef ff6b 	bl	8000b1c <__aeabi_dcmplt>
 8010c46:	2800      	cmp	r0, #0
 8010c48:	d159      	bne.n	8010cfe <_strtod_l+0xa2e>
 8010c4a:	4630      	mov	r0, r6
 8010c4c:	4639      	mov	r1, r7
 8010c4e:	4b60      	ldr	r3, [pc, #384]	@ (8010dd0 <_strtod_l+0xb00>)
 8010c50:	2200      	movs	r2, #0
 8010c52:	f7ef fcf1 	bl	8000638 <__aeabi_dmul>
 8010c56:	4606      	mov	r6, r0
 8010c58:	460f      	mov	r7, r1
 8010c5a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8010c5e:	9606      	str	r6, [sp, #24]
 8010c60:	9307      	str	r3, [sp, #28]
 8010c62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010c66:	4d57      	ldr	r5, [pc, #348]	@ (8010dc4 <_strtod_l+0xaf4>)
 8010c68:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010c6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010c6e:	401d      	ands	r5, r3
 8010c70:	4b58      	ldr	r3, [pc, #352]	@ (8010dd4 <_strtod_l+0xb04>)
 8010c72:	429d      	cmp	r5, r3
 8010c74:	f040 80b2 	bne.w	8010ddc <_strtod_l+0xb0c>
 8010c78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010c7a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8010c7e:	ec4b ab10 	vmov	d0, sl, fp
 8010c82:	f003 f839 	bl	8013cf8 <__ulp>
 8010c86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010c8a:	ec51 0b10 	vmov	r0, r1, d0
 8010c8e:	f7ef fcd3 	bl	8000638 <__aeabi_dmul>
 8010c92:	4652      	mov	r2, sl
 8010c94:	465b      	mov	r3, fp
 8010c96:	f7ef fb19 	bl	80002cc <__adddf3>
 8010c9a:	460b      	mov	r3, r1
 8010c9c:	4949      	ldr	r1, [pc, #292]	@ (8010dc4 <_strtod_l+0xaf4>)
 8010c9e:	4a4e      	ldr	r2, [pc, #312]	@ (8010dd8 <_strtod_l+0xb08>)
 8010ca0:	4019      	ands	r1, r3
 8010ca2:	4291      	cmp	r1, r2
 8010ca4:	4682      	mov	sl, r0
 8010ca6:	d942      	bls.n	8010d2e <_strtod_l+0xa5e>
 8010ca8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010caa:	4b47      	ldr	r3, [pc, #284]	@ (8010dc8 <_strtod_l+0xaf8>)
 8010cac:	429a      	cmp	r2, r3
 8010cae:	d103      	bne.n	8010cb8 <_strtod_l+0x9e8>
 8010cb0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010cb2:	3301      	adds	r3, #1
 8010cb4:	f43f ad2b 	beq.w	801070e <_strtod_l+0x43e>
 8010cb8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8010dc8 <_strtod_l+0xaf8>
 8010cbc:	f04f 3aff 	mov.w	sl, #4294967295
 8010cc0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010cc2:	9805      	ldr	r0, [sp, #20]
 8010cc4:	f002 fce4 	bl	8013690 <_Bfree>
 8010cc8:	9805      	ldr	r0, [sp, #20]
 8010cca:	4649      	mov	r1, r9
 8010ccc:	f002 fce0 	bl	8013690 <_Bfree>
 8010cd0:	9805      	ldr	r0, [sp, #20]
 8010cd2:	4641      	mov	r1, r8
 8010cd4:	f002 fcdc 	bl	8013690 <_Bfree>
 8010cd8:	9805      	ldr	r0, [sp, #20]
 8010cda:	4621      	mov	r1, r4
 8010cdc:	f002 fcd8 	bl	8013690 <_Bfree>
 8010ce0:	e618      	b.n	8010914 <_strtod_l+0x644>
 8010ce2:	f1ba 0f01 	cmp.w	sl, #1
 8010ce6:	d103      	bne.n	8010cf0 <_strtod_l+0xa20>
 8010ce8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	f43f ada5 	beq.w	801083a <_strtod_l+0x56a>
 8010cf0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8010da0 <_strtod_l+0xad0>
 8010cf4:	4f35      	ldr	r7, [pc, #212]	@ (8010dcc <_strtod_l+0xafc>)
 8010cf6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010cfa:	2600      	movs	r6, #0
 8010cfc:	e7b1      	b.n	8010c62 <_strtod_l+0x992>
 8010cfe:	4f34      	ldr	r7, [pc, #208]	@ (8010dd0 <_strtod_l+0xb00>)
 8010d00:	2600      	movs	r6, #0
 8010d02:	e7aa      	b.n	8010c5a <_strtod_l+0x98a>
 8010d04:	4b32      	ldr	r3, [pc, #200]	@ (8010dd0 <_strtod_l+0xb00>)
 8010d06:	4630      	mov	r0, r6
 8010d08:	4639      	mov	r1, r7
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	f7ef fc94 	bl	8000638 <__aeabi_dmul>
 8010d10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d12:	4606      	mov	r6, r0
 8010d14:	460f      	mov	r7, r1
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d09f      	beq.n	8010c5a <_strtod_l+0x98a>
 8010d1a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8010d1e:	e7a0      	b.n	8010c62 <_strtod_l+0x992>
 8010d20:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8010da8 <_strtod_l+0xad8>
 8010d24:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010d28:	ec57 6b17 	vmov	r6, r7, d7
 8010d2c:	e799      	b.n	8010c62 <_strtod_l+0x992>
 8010d2e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8010d32:	9b08      	ldr	r3, [sp, #32]
 8010d34:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d1c1      	bne.n	8010cc0 <_strtod_l+0x9f0>
 8010d3c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010d40:	0d1b      	lsrs	r3, r3, #20
 8010d42:	051b      	lsls	r3, r3, #20
 8010d44:	429d      	cmp	r5, r3
 8010d46:	d1bb      	bne.n	8010cc0 <_strtod_l+0x9f0>
 8010d48:	4630      	mov	r0, r6
 8010d4a:	4639      	mov	r1, r7
 8010d4c:	f7ef ffd4 	bl	8000cf8 <__aeabi_d2lz>
 8010d50:	f7ef fc44 	bl	80005dc <__aeabi_l2d>
 8010d54:	4602      	mov	r2, r0
 8010d56:	460b      	mov	r3, r1
 8010d58:	4630      	mov	r0, r6
 8010d5a:	4639      	mov	r1, r7
 8010d5c:	f7ef fab4 	bl	80002c8 <__aeabi_dsub>
 8010d60:	460b      	mov	r3, r1
 8010d62:	4602      	mov	r2, r0
 8010d64:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8010d68:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8010d6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d6e:	ea46 060a 	orr.w	r6, r6, sl
 8010d72:	431e      	orrs	r6, r3
 8010d74:	d06f      	beq.n	8010e56 <_strtod_l+0xb86>
 8010d76:	a30e      	add	r3, pc, #56	@ (adr r3, 8010db0 <_strtod_l+0xae0>)
 8010d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d7c:	f7ef fece 	bl	8000b1c <__aeabi_dcmplt>
 8010d80:	2800      	cmp	r0, #0
 8010d82:	f47f accf 	bne.w	8010724 <_strtod_l+0x454>
 8010d86:	a30c      	add	r3, pc, #48	@ (adr r3, 8010db8 <_strtod_l+0xae8>)
 8010d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010d90:	f7ef fee2 	bl	8000b58 <__aeabi_dcmpgt>
 8010d94:	2800      	cmp	r0, #0
 8010d96:	d093      	beq.n	8010cc0 <_strtod_l+0x9f0>
 8010d98:	e4c4      	b.n	8010724 <_strtod_l+0x454>
 8010d9a:	bf00      	nop
 8010d9c:	f3af 8000 	nop.w
 8010da0:	00000000 	.word	0x00000000
 8010da4:	bff00000 	.word	0xbff00000
 8010da8:	00000000 	.word	0x00000000
 8010dac:	3ff00000 	.word	0x3ff00000
 8010db0:	94a03595 	.word	0x94a03595
 8010db4:	3fdfffff 	.word	0x3fdfffff
 8010db8:	35afe535 	.word	0x35afe535
 8010dbc:	3fe00000 	.word	0x3fe00000
 8010dc0:	000fffff 	.word	0x000fffff
 8010dc4:	7ff00000 	.word	0x7ff00000
 8010dc8:	7fefffff 	.word	0x7fefffff
 8010dcc:	3ff00000 	.word	0x3ff00000
 8010dd0:	3fe00000 	.word	0x3fe00000
 8010dd4:	7fe00000 	.word	0x7fe00000
 8010dd8:	7c9fffff 	.word	0x7c9fffff
 8010ddc:	9b08      	ldr	r3, [sp, #32]
 8010dde:	b323      	cbz	r3, 8010e2a <_strtod_l+0xb5a>
 8010de0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8010de4:	d821      	bhi.n	8010e2a <_strtod_l+0xb5a>
 8010de6:	a328      	add	r3, pc, #160	@ (adr r3, 8010e88 <_strtod_l+0xbb8>)
 8010de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dec:	4630      	mov	r0, r6
 8010dee:	4639      	mov	r1, r7
 8010df0:	f7ef fe9e 	bl	8000b30 <__aeabi_dcmple>
 8010df4:	b1a0      	cbz	r0, 8010e20 <_strtod_l+0xb50>
 8010df6:	4639      	mov	r1, r7
 8010df8:	4630      	mov	r0, r6
 8010dfa:	f7ef fef5 	bl	8000be8 <__aeabi_d2uiz>
 8010dfe:	2801      	cmp	r0, #1
 8010e00:	bf38      	it	cc
 8010e02:	2001      	movcc	r0, #1
 8010e04:	f7ef fb9e 	bl	8000544 <__aeabi_ui2d>
 8010e08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e0a:	4606      	mov	r6, r0
 8010e0c:	460f      	mov	r7, r1
 8010e0e:	b9fb      	cbnz	r3, 8010e50 <_strtod_l+0xb80>
 8010e10:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010e14:	9014      	str	r0, [sp, #80]	@ 0x50
 8010e16:	9315      	str	r3, [sp, #84]	@ 0x54
 8010e18:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8010e1c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010e20:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010e22:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8010e26:	1b5b      	subs	r3, r3, r5
 8010e28:	9311      	str	r3, [sp, #68]	@ 0x44
 8010e2a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010e2e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8010e32:	f002 ff61 	bl	8013cf8 <__ulp>
 8010e36:	4650      	mov	r0, sl
 8010e38:	ec53 2b10 	vmov	r2, r3, d0
 8010e3c:	4659      	mov	r1, fp
 8010e3e:	f7ef fbfb 	bl	8000638 <__aeabi_dmul>
 8010e42:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8010e46:	f7ef fa41 	bl	80002cc <__adddf3>
 8010e4a:	4682      	mov	sl, r0
 8010e4c:	468b      	mov	fp, r1
 8010e4e:	e770      	b.n	8010d32 <_strtod_l+0xa62>
 8010e50:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8010e54:	e7e0      	b.n	8010e18 <_strtod_l+0xb48>
 8010e56:	a30e      	add	r3, pc, #56	@ (adr r3, 8010e90 <_strtod_l+0xbc0>)
 8010e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e5c:	f7ef fe5e 	bl	8000b1c <__aeabi_dcmplt>
 8010e60:	e798      	b.n	8010d94 <_strtod_l+0xac4>
 8010e62:	2300      	movs	r3, #0
 8010e64:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010e66:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8010e68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010e6a:	6013      	str	r3, [r2, #0]
 8010e6c:	f7ff ba6d 	b.w	801034a <_strtod_l+0x7a>
 8010e70:	2a65      	cmp	r2, #101	@ 0x65
 8010e72:	f43f ab66 	beq.w	8010542 <_strtod_l+0x272>
 8010e76:	2a45      	cmp	r2, #69	@ 0x45
 8010e78:	f43f ab63 	beq.w	8010542 <_strtod_l+0x272>
 8010e7c:	2301      	movs	r3, #1
 8010e7e:	f7ff bb9e 	b.w	80105be <_strtod_l+0x2ee>
 8010e82:	bf00      	nop
 8010e84:	f3af 8000 	nop.w
 8010e88:	ffc00000 	.word	0xffc00000
 8010e8c:	41dfffff 	.word	0x41dfffff
 8010e90:	94a03595 	.word	0x94a03595
 8010e94:	3fcfffff 	.word	0x3fcfffff

08010e98 <_strtod_r>:
 8010e98:	4b01      	ldr	r3, [pc, #4]	@ (8010ea0 <_strtod_r+0x8>)
 8010e9a:	f7ff ba19 	b.w	80102d0 <_strtod_l>
 8010e9e:	bf00      	nop
 8010ea0:	2000002c 	.word	0x2000002c

08010ea4 <strtof>:
 8010ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ea8:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 8010f68 <strtof+0xc4>
 8010eac:	4b29      	ldr	r3, [pc, #164]	@ (8010f54 <strtof+0xb0>)
 8010eae:	460a      	mov	r2, r1
 8010eb0:	ed2d 8b02 	vpush	{d8}
 8010eb4:	4601      	mov	r1, r0
 8010eb6:	f8d8 0000 	ldr.w	r0, [r8]
 8010eba:	f7ff fa09 	bl	80102d0 <_strtod_l>
 8010ebe:	ec55 4b10 	vmov	r4, r5, d0
 8010ec2:	4622      	mov	r2, r4
 8010ec4:	462b      	mov	r3, r5
 8010ec6:	4620      	mov	r0, r4
 8010ec8:	4629      	mov	r1, r5
 8010eca:	f7ef fe4f 	bl	8000b6c <__aeabi_dcmpun>
 8010ece:	b190      	cbz	r0, 8010ef6 <strtof+0x52>
 8010ed0:	2d00      	cmp	r5, #0
 8010ed2:	4821      	ldr	r0, [pc, #132]	@ (8010f58 <strtof+0xb4>)
 8010ed4:	da09      	bge.n	8010eea <strtof+0x46>
 8010ed6:	f001 f8df 	bl	8012098 <nanf>
 8010eda:	eeb1 8a40 	vneg.f32	s16, s0
 8010ede:	eeb0 0a48 	vmov.f32	s0, s16
 8010ee2:	ecbd 8b02 	vpop	{d8}
 8010ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010eea:	ecbd 8b02 	vpop	{d8}
 8010eee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ef2:	f001 b8d1 	b.w	8012098 <nanf>
 8010ef6:	4620      	mov	r0, r4
 8010ef8:	4629      	mov	r1, r5
 8010efa:	f7ef fe95 	bl	8000c28 <__aeabi_d2f>
 8010efe:	ee08 0a10 	vmov	s16, r0
 8010f02:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8010f5c <strtof+0xb8>
 8010f06:	eeb0 7ac8 	vabs.f32	s14, s16
 8010f0a:	eeb4 7a67 	vcmp.f32	s14, s15
 8010f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f12:	dd11      	ble.n	8010f38 <strtof+0x94>
 8010f14:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8010f18:	4b11      	ldr	r3, [pc, #68]	@ (8010f60 <strtof+0xbc>)
 8010f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8010f1e:	4620      	mov	r0, r4
 8010f20:	4639      	mov	r1, r7
 8010f22:	f7ef fe23 	bl	8000b6c <__aeabi_dcmpun>
 8010f26:	b980      	cbnz	r0, 8010f4a <strtof+0xa6>
 8010f28:	4b0d      	ldr	r3, [pc, #52]	@ (8010f60 <strtof+0xbc>)
 8010f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8010f2e:	4620      	mov	r0, r4
 8010f30:	4639      	mov	r1, r7
 8010f32:	f7ef fdfd 	bl	8000b30 <__aeabi_dcmple>
 8010f36:	b940      	cbnz	r0, 8010f4a <strtof+0xa6>
 8010f38:	ee18 3a10 	vmov	r3, s16
 8010f3c:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8010f40:	d1cd      	bne.n	8010ede <strtof+0x3a>
 8010f42:	4b08      	ldr	r3, [pc, #32]	@ (8010f64 <strtof+0xc0>)
 8010f44:	402b      	ands	r3, r5
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d0c9      	beq.n	8010ede <strtof+0x3a>
 8010f4a:	f8d8 3000 	ldr.w	r3, [r8]
 8010f4e:	2222      	movs	r2, #34	@ 0x22
 8010f50:	601a      	str	r2, [r3, #0]
 8010f52:	e7c4      	b.n	8010ede <strtof+0x3a>
 8010f54:	2000002c 	.word	0x2000002c
 8010f58:	080167bd 	.word	0x080167bd
 8010f5c:	7f7fffff 	.word	0x7f7fffff
 8010f60:	7fefffff 	.word	0x7fefffff
 8010f64:	7ff00000 	.word	0x7ff00000
 8010f68:	20000198 	.word	0x20000198

08010f6c <__cvt>:
 8010f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010f70:	ec57 6b10 	vmov	r6, r7, d0
 8010f74:	2f00      	cmp	r7, #0
 8010f76:	460c      	mov	r4, r1
 8010f78:	4619      	mov	r1, r3
 8010f7a:	463b      	mov	r3, r7
 8010f7c:	bfbb      	ittet	lt
 8010f7e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8010f82:	461f      	movlt	r7, r3
 8010f84:	2300      	movge	r3, #0
 8010f86:	232d      	movlt	r3, #45	@ 0x2d
 8010f88:	700b      	strb	r3, [r1, #0]
 8010f8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010f8c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010f90:	4691      	mov	r9, r2
 8010f92:	f023 0820 	bic.w	r8, r3, #32
 8010f96:	bfbc      	itt	lt
 8010f98:	4632      	movlt	r2, r6
 8010f9a:	4616      	movlt	r6, r2
 8010f9c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010fa0:	d005      	beq.n	8010fae <__cvt+0x42>
 8010fa2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8010fa6:	d100      	bne.n	8010faa <__cvt+0x3e>
 8010fa8:	3401      	adds	r4, #1
 8010faa:	2102      	movs	r1, #2
 8010fac:	e000      	b.n	8010fb0 <__cvt+0x44>
 8010fae:	2103      	movs	r1, #3
 8010fb0:	ab03      	add	r3, sp, #12
 8010fb2:	9301      	str	r3, [sp, #4]
 8010fb4:	ab02      	add	r3, sp, #8
 8010fb6:	9300      	str	r3, [sp, #0]
 8010fb8:	ec47 6b10 	vmov	d0, r6, r7
 8010fbc:	4653      	mov	r3, sl
 8010fbe:	4622      	mov	r2, r4
 8010fc0:	f001 f916 	bl	80121f0 <_dtoa_r>
 8010fc4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8010fc8:	4605      	mov	r5, r0
 8010fca:	d119      	bne.n	8011000 <__cvt+0x94>
 8010fcc:	f019 0f01 	tst.w	r9, #1
 8010fd0:	d00e      	beq.n	8010ff0 <__cvt+0x84>
 8010fd2:	eb00 0904 	add.w	r9, r0, r4
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	2300      	movs	r3, #0
 8010fda:	4630      	mov	r0, r6
 8010fdc:	4639      	mov	r1, r7
 8010fde:	f7ef fd93 	bl	8000b08 <__aeabi_dcmpeq>
 8010fe2:	b108      	cbz	r0, 8010fe8 <__cvt+0x7c>
 8010fe4:	f8cd 900c 	str.w	r9, [sp, #12]
 8010fe8:	2230      	movs	r2, #48	@ 0x30
 8010fea:	9b03      	ldr	r3, [sp, #12]
 8010fec:	454b      	cmp	r3, r9
 8010fee:	d31e      	bcc.n	801102e <__cvt+0xc2>
 8010ff0:	9b03      	ldr	r3, [sp, #12]
 8010ff2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010ff4:	1b5b      	subs	r3, r3, r5
 8010ff6:	4628      	mov	r0, r5
 8010ff8:	6013      	str	r3, [r2, #0]
 8010ffa:	b004      	add	sp, #16
 8010ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011000:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011004:	eb00 0904 	add.w	r9, r0, r4
 8011008:	d1e5      	bne.n	8010fd6 <__cvt+0x6a>
 801100a:	7803      	ldrb	r3, [r0, #0]
 801100c:	2b30      	cmp	r3, #48	@ 0x30
 801100e:	d10a      	bne.n	8011026 <__cvt+0xba>
 8011010:	2200      	movs	r2, #0
 8011012:	2300      	movs	r3, #0
 8011014:	4630      	mov	r0, r6
 8011016:	4639      	mov	r1, r7
 8011018:	f7ef fd76 	bl	8000b08 <__aeabi_dcmpeq>
 801101c:	b918      	cbnz	r0, 8011026 <__cvt+0xba>
 801101e:	f1c4 0401 	rsb	r4, r4, #1
 8011022:	f8ca 4000 	str.w	r4, [sl]
 8011026:	f8da 3000 	ldr.w	r3, [sl]
 801102a:	4499      	add	r9, r3
 801102c:	e7d3      	b.n	8010fd6 <__cvt+0x6a>
 801102e:	1c59      	adds	r1, r3, #1
 8011030:	9103      	str	r1, [sp, #12]
 8011032:	701a      	strb	r2, [r3, #0]
 8011034:	e7d9      	b.n	8010fea <__cvt+0x7e>

08011036 <__exponent>:
 8011036:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011038:	2900      	cmp	r1, #0
 801103a:	bfba      	itte	lt
 801103c:	4249      	neglt	r1, r1
 801103e:	232d      	movlt	r3, #45	@ 0x2d
 8011040:	232b      	movge	r3, #43	@ 0x2b
 8011042:	2909      	cmp	r1, #9
 8011044:	7002      	strb	r2, [r0, #0]
 8011046:	7043      	strb	r3, [r0, #1]
 8011048:	dd29      	ble.n	801109e <__exponent+0x68>
 801104a:	f10d 0307 	add.w	r3, sp, #7
 801104e:	461d      	mov	r5, r3
 8011050:	270a      	movs	r7, #10
 8011052:	461a      	mov	r2, r3
 8011054:	fbb1 f6f7 	udiv	r6, r1, r7
 8011058:	fb07 1416 	mls	r4, r7, r6, r1
 801105c:	3430      	adds	r4, #48	@ 0x30
 801105e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011062:	460c      	mov	r4, r1
 8011064:	2c63      	cmp	r4, #99	@ 0x63
 8011066:	f103 33ff 	add.w	r3, r3, #4294967295
 801106a:	4631      	mov	r1, r6
 801106c:	dcf1      	bgt.n	8011052 <__exponent+0x1c>
 801106e:	3130      	adds	r1, #48	@ 0x30
 8011070:	1e94      	subs	r4, r2, #2
 8011072:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011076:	1c41      	adds	r1, r0, #1
 8011078:	4623      	mov	r3, r4
 801107a:	42ab      	cmp	r3, r5
 801107c:	d30a      	bcc.n	8011094 <__exponent+0x5e>
 801107e:	f10d 0309 	add.w	r3, sp, #9
 8011082:	1a9b      	subs	r3, r3, r2
 8011084:	42ac      	cmp	r4, r5
 8011086:	bf88      	it	hi
 8011088:	2300      	movhi	r3, #0
 801108a:	3302      	adds	r3, #2
 801108c:	4403      	add	r3, r0
 801108e:	1a18      	subs	r0, r3, r0
 8011090:	b003      	add	sp, #12
 8011092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011094:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011098:	f801 6f01 	strb.w	r6, [r1, #1]!
 801109c:	e7ed      	b.n	801107a <__exponent+0x44>
 801109e:	2330      	movs	r3, #48	@ 0x30
 80110a0:	3130      	adds	r1, #48	@ 0x30
 80110a2:	7083      	strb	r3, [r0, #2]
 80110a4:	70c1      	strb	r1, [r0, #3]
 80110a6:	1d03      	adds	r3, r0, #4
 80110a8:	e7f1      	b.n	801108e <__exponent+0x58>
	...

080110ac <_printf_float>:
 80110ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110b0:	b08d      	sub	sp, #52	@ 0x34
 80110b2:	460c      	mov	r4, r1
 80110b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80110b8:	4616      	mov	r6, r2
 80110ba:	461f      	mov	r7, r3
 80110bc:	4605      	mov	r5, r0
 80110be:	f000 ff5d 	bl	8011f7c <_localeconv_r>
 80110c2:	6803      	ldr	r3, [r0, #0]
 80110c4:	9304      	str	r3, [sp, #16]
 80110c6:	4618      	mov	r0, r3
 80110c8:	f7ef f8f2 	bl	80002b0 <strlen>
 80110cc:	2300      	movs	r3, #0
 80110ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80110d0:	f8d8 3000 	ldr.w	r3, [r8]
 80110d4:	9005      	str	r0, [sp, #20]
 80110d6:	3307      	adds	r3, #7
 80110d8:	f023 0307 	bic.w	r3, r3, #7
 80110dc:	f103 0208 	add.w	r2, r3, #8
 80110e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80110e4:	f8d4 b000 	ldr.w	fp, [r4]
 80110e8:	f8c8 2000 	str.w	r2, [r8]
 80110ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80110f0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80110f4:	9307      	str	r3, [sp, #28]
 80110f6:	f8cd 8018 	str.w	r8, [sp, #24]
 80110fa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80110fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011102:	4b9c      	ldr	r3, [pc, #624]	@ (8011374 <_printf_float+0x2c8>)
 8011104:	f04f 32ff 	mov.w	r2, #4294967295
 8011108:	f7ef fd30 	bl	8000b6c <__aeabi_dcmpun>
 801110c:	bb70      	cbnz	r0, 801116c <_printf_float+0xc0>
 801110e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011112:	4b98      	ldr	r3, [pc, #608]	@ (8011374 <_printf_float+0x2c8>)
 8011114:	f04f 32ff 	mov.w	r2, #4294967295
 8011118:	f7ef fd0a 	bl	8000b30 <__aeabi_dcmple>
 801111c:	bb30      	cbnz	r0, 801116c <_printf_float+0xc0>
 801111e:	2200      	movs	r2, #0
 8011120:	2300      	movs	r3, #0
 8011122:	4640      	mov	r0, r8
 8011124:	4649      	mov	r1, r9
 8011126:	f7ef fcf9 	bl	8000b1c <__aeabi_dcmplt>
 801112a:	b110      	cbz	r0, 8011132 <_printf_float+0x86>
 801112c:	232d      	movs	r3, #45	@ 0x2d
 801112e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011132:	4a91      	ldr	r2, [pc, #580]	@ (8011378 <_printf_float+0x2cc>)
 8011134:	4b91      	ldr	r3, [pc, #580]	@ (801137c <_printf_float+0x2d0>)
 8011136:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801113a:	bf94      	ite	ls
 801113c:	4690      	movls	r8, r2
 801113e:	4698      	movhi	r8, r3
 8011140:	2303      	movs	r3, #3
 8011142:	6123      	str	r3, [r4, #16]
 8011144:	f02b 0304 	bic.w	r3, fp, #4
 8011148:	6023      	str	r3, [r4, #0]
 801114a:	f04f 0900 	mov.w	r9, #0
 801114e:	9700      	str	r7, [sp, #0]
 8011150:	4633      	mov	r3, r6
 8011152:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011154:	4621      	mov	r1, r4
 8011156:	4628      	mov	r0, r5
 8011158:	f000 f9d2 	bl	8011500 <_printf_common>
 801115c:	3001      	adds	r0, #1
 801115e:	f040 808d 	bne.w	801127c <_printf_float+0x1d0>
 8011162:	f04f 30ff 	mov.w	r0, #4294967295
 8011166:	b00d      	add	sp, #52	@ 0x34
 8011168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801116c:	4642      	mov	r2, r8
 801116e:	464b      	mov	r3, r9
 8011170:	4640      	mov	r0, r8
 8011172:	4649      	mov	r1, r9
 8011174:	f7ef fcfa 	bl	8000b6c <__aeabi_dcmpun>
 8011178:	b140      	cbz	r0, 801118c <_printf_float+0xe0>
 801117a:	464b      	mov	r3, r9
 801117c:	2b00      	cmp	r3, #0
 801117e:	bfbc      	itt	lt
 8011180:	232d      	movlt	r3, #45	@ 0x2d
 8011182:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011186:	4a7e      	ldr	r2, [pc, #504]	@ (8011380 <_printf_float+0x2d4>)
 8011188:	4b7e      	ldr	r3, [pc, #504]	@ (8011384 <_printf_float+0x2d8>)
 801118a:	e7d4      	b.n	8011136 <_printf_float+0x8a>
 801118c:	6863      	ldr	r3, [r4, #4]
 801118e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8011192:	9206      	str	r2, [sp, #24]
 8011194:	1c5a      	adds	r2, r3, #1
 8011196:	d13b      	bne.n	8011210 <_printf_float+0x164>
 8011198:	2306      	movs	r3, #6
 801119a:	6063      	str	r3, [r4, #4]
 801119c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80111a0:	2300      	movs	r3, #0
 80111a2:	6022      	str	r2, [r4, #0]
 80111a4:	9303      	str	r3, [sp, #12]
 80111a6:	ab0a      	add	r3, sp, #40	@ 0x28
 80111a8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80111ac:	ab09      	add	r3, sp, #36	@ 0x24
 80111ae:	9300      	str	r3, [sp, #0]
 80111b0:	6861      	ldr	r1, [r4, #4]
 80111b2:	ec49 8b10 	vmov	d0, r8, r9
 80111b6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80111ba:	4628      	mov	r0, r5
 80111bc:	f7ff fed6 	bl	8010f6c <__cvt>
 80111c0:	9b06      	ldr	r3, [sp, #24]
 80111c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80111c4:	2b47      	cmp	r3, #71	@ 0x47
 80111c6:	4680      	mov	r8, r0
 80111c8:	d129      	bne.n	801121e <_printf_float+0x172>
 80111ca:	1cc8      	adds	r0, r1, #3
 80111cc:	db02      	blt.n	80111d4 <_printf_float+0x128>
 80111ce:	6863      	ldr	r3, [r4, #4]
 80111d0:	4299      	cmp	r1, r3
 80111d2:	dd41      	ble.n	8011258 <_printf_float+0x1ac>
 80111d4:	f1aa 0a02 	sub.w	sl, sl, #2
 80111d8:	fa5f fa8a 	uxtb.w	sl, sl
 80111dc:	3901      	subs	r1, #1
 80111de:	4652      	mov	r2, sl
 80111e0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80111e4:	9109      	str	r1, [sp, #36]	@ 0x24
 80111e6:	f7ff ff26 	bl	8011036 <__exponent>
 80111ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80111ec:	1813      	adds	r3, r2, r0
 80111ee:	2a01      	cmp	r2, #1
 80111f0:	4681      	mov	r9, r0
 80111f2:	6123      	str	r3, [r4, #16]
 80111f4:	dc02      	bgt.n	80111fc <_printf_float+0x150>
 80111f6:	6822      	ldr	r2, [r4, #0]
 80111f8:	07d2      	lsls	r2, r2, #31
 80111fa:	d501      	bpl.n	8011200 <_printf_float+0x154>
 80111fc:	3301      	adds	r3, #1
 80111fe:	6123      	str	r3, [r4, #16]
 8011200:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011204:	2b00      	cmp	r3, #0
 8011206:	d0a2      	beq.n	801114e <_printf_float+0xa2>
 8011208:	232d      	movs	r3, #45	@ 0x2d
 801120a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801120e:	e79e      	b.n	801114e <_printf_float+0xa2>
 8011210:	9a06      	ldr	r2, [sp, #24]
 8011212:	2a47      	cmp	r2, #71	@ 0x47
 8011214:	d1c2      	bne.n	801119c <_printf_float+0xf0>
 8011216:	2b00      	cmp	r3, #0
 8011218:	d1c0      	bne.n	801119c <_printf_float+0xf0>
 801121a:	2301      	movs	r3, #1
 801121c:	e7bd      	b.n	801119a <_printf_float+0xee>
 801121e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011222:	d9db      	bls.n	80111dc <_printf_float+0x130>
 8011224:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8011228:	d118      	bne.n	801125c <_printf_float+0x1b0>
 801122a:	2900      	cmp	r1, #0
 801122c:	6863      	ldr	r3, [r4, #4]
 801122e:	dd0b      	ble.n	8011248 <_printf_float+0x19c>
 8011230:	6121      	str	r1, [r4, #16]
 8011232:	b913      	cbnz	r3, 801123a <_printf_float+0x18e>
 8011234:	6822      	ldr	r2, [r4, #0]
 8011236:	07d0      	lsls	r0, r2, #31
 8011238:	d502      	bpl.n	8011240 <_printf_float+0x194>
 801123a:	3301      	adds	r3, #1
 801123c:	440b      	add	r3, r1
 801123e:	6123      	str	r3, [r4, #16]
 8011240:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011242:	f04f 0900 	mov.w	r9, #0
 8011246:	e7db      	b.n	8011200 <_printf_float+0x154>
 8011248:	b913      	cbnz	r3, 8011250 <_printf_float+0x1a4>
 801124a:	6822      	ldr	r2, [r4, #0]
 801124c:	07d2      	lsls	r2, r2, #31
 801124e:	d501      	bpl.n	8011254 <_printf_float+0x1a8>
 8011250:	3302      	adds	r3, #2
 8011252:	e7f4      	b.n	801123e <_printf_float+0x192>
 8011254:	2301      	movs	r3, #1
 8011256:	e7f2      	b.n	801123e <_printf_float+0x192>
 8011258:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801125c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801125e:	4299      	cmp	r1, r3
 8011260:	db05      	blt.n	801126e <_printf_float+0x1c2>
 8011262:	6823      	ldr	r3, [r4, #0]
 8011264:	6121      	str	r1, [r4, #16]
 8011266:	07d8      	lsls	r0, r3, #31
 8011268:	d5ea      	bpl.n	8011240 <_printf_float+0x194>
 801126a:	1c4b      	adds	r3, r1, #1
 801126c:	e7e7      	b.n	801123e <_printf_float+0x192>
 801126e:	2900      	cmp	r1, #0
 8011270:	bfd4      	ite	le
 8011272:	f1c1 0202 	rsble	r2, r1, #2
 8011276:	2201      	movgt	r2, #1
 8011278:	4413      	add	r3, r2
 801127a:	e7e0      	b.n	801123e <_printf_float+0x192>
 801127c:	6823      	ldr	r3, [r4, #0]
 801127e:	055a      	lsls	r2, r3, #21
 8011280:	d407      	bmi.n	8011292 <_printf_float+0x1e6>
 8011282:	6923      	ldr	r3, [r4, #16]
 8011284:	4642      	mov	r2, r8
 8011286:	4631      	mov	r1, r6
 8011288:	4628      	mov	r0, r5
 801128a:	47b8      	blx	r7
 801128c:	3001      	adds	r0, #1
 801128e:	d12b      	bne.n	80112e8 <_printf_float+0x23c>
 8011290:	e767      	b.n	8011162 <_printf_float+0xb6>
 8011292:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011296:	f240 80dd 	bls.w	8011454 <_printf_float+0x3a8>
 801129a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801129e:	2200      	movs	r2, #0
 80112a0:	2300      	movs	r3, #0
 80112a2:	f7ef fc31 	bl	8000b08 <__aeabi_dcmpeq>
 80112a6:	2800      	cmp	r0, #0
 80112a8:	d033      	beq.n	8011312 <_printf_float+0x266>
 80112aa:	4a37      	ldr	r2, [pc, #220]	@ (8011388 <_printf_float+0x2dc>)
 80112ac:	2301      	movs	r3, #1
 80112ae:	4631      	mov	r1, r6
 80112b0:	4628      	mov	r0, r5
 80112b2:	47b8      	blx	r7
 80112b4:	3001      	adds	r0, #1
 80112b6:	f43f af54 	beq.w	8011162 <_printf_float+0xb6>
 80112ba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80112be:	4543      	cmp	r3, r8
 80112c0:	db02      	blt.n	80112c8 <_printf_float+0x21c>
 80112c2:	6823      	ldr	r3, [r4, #0]
 80112c4:	07d8      	lsls	r0, r3, #31
 80112c6:	d50f      	bpl.n	80112e8 <_printf_float+0x23c>
 80112c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80112cc:	4631      	mov	r1, r6
 80112ce:	4628      	mov	r0, r5
 80112d0:	47b8      	blx	r7
 80112d2:	3001      	adds	r0, #1
 80112d4:	f43f af45 	beq.w	8011162 <_printf_float+0xb6>
 80112d8:	f04f 0900 	mov.w	r9, #0
 80112dc:	f108 38ff 	add.w	r8, r8, #4294967295
 80112e0:	f104 0a1a 	add.w	sl, r4, #26
 80112e4:	45c8      	cmp	r8, r9
 80112e6:	dc09      	bgt.n	80112fc <_printf_float+0x250>
 80112e8:	6823      	ldr	r3, [r4, #0]
 80112ea:	079b      	lsls	r3, r3, #30
 80112ec:	f100 8103 	bmi.w	80114f6 <_printf_float+0x44a>
 80112f0:	68e0      	ldr	r0, [r4, #12]
 80112f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80112f4:	4298      	cmp	r0, r3
 80112f6:	bfb8      	it	lt
 80112f8:	4618      	movlt	r0, r3
 80112fa:	e734      	b.n	8011166 <_printf_float+0xba>
 80112fc:	2301      	movs	r3, #1
 80112fe:	4652      	mov	r2, sl
 8011300:	4631      	mov	r1, r6
 8011302:	4628      	mov	r0, r5
 8011304:	47b8      	blx	r7
 8011306:	3001      	adds	r0, #1
 8011308:	f43f af2b 	beq.w	8011162 <_printf_float+0xb6>
 801130c:	f109 0901 	add.w	r9, r9, #1
 8011310:	e7e8      	b.n	80112e4 <_printf_float+0x238>
 8011312:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011314:	2b00      	cmp	r3, #0
 8011316:	dc39      	bgt.n	801138c <_printf_float+0x2e0>
 8011318:	4a1b      	ldr	r2, [pc, #108]	@ (8011388 <_printf_float+0x2dc>)
 801131a:	2301      	movs	r3, #1
 801131c:	4631      	mov	r1, r6
 801131e:	4628      	mov	r0, r5
 8011320:	47b8      	blx	r7
 8011322:	3001      	adds	r0, #1
 8011324:	f43f af1d 	beq.w	8011162 <_printf_float+0xb6>
 8011328:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801132c:	ea59 0303 	orrs.w	r3, r9, r3
 8011330:	d102      	bne.n	8011338 <_printf_float+0x28c>
 8011332:	6823      	ldr	r3, [r4, #0]
 8011334:	07d9      	lsls	r1, r3, #31
 8011336:	d5d7      	bpl.n	80112e8 <_printf_float+0x23c>
 8011338:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801133c:	4631      	mov	r1, r6
 801133e:	4628      	mov	r0, r5
 8011340:	47b8      	blx	r7
 8011342:	3001      	adds	r0, #1
 8011344:	f43f af0d 	beq.w	8011162 <_printf_float+0xb6>
 8011348:	f04f 0a00 	mov.w	sl, #0
 801134c:	f104 0b1a 	add.w	fp, r4, #26
 8011350:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011352:	425b      	negs	r3, r3
 8011354:	4553      	cmp	r3, sl
 8011356:	dc01      	bgt.n	801135c <_printf_float+0x2b0>
 8011358:	464b      	mov	r3, r9
 801135a:	e793      	b.n	8011284 <_printf_float+0x1d8>
 801135c:	2301      	movs	r3, #1
 801135e:	465a      	mov	r2, fp
 8011360:	4631      	mov	r1, r6
 8011362:	4628      	mov	r0, r5
 8011364:	47b8      	blx	r7
 8011366:	3001      	adds	r0, #1
 8011368:	f43f aefb 	beq.w	8011162 <_printf_float+0xb6>
 801136c:	f10a 0a01 	add.w	sl, sl, #1
 8011370:	e7ee      	b.n	8011350 <_printf_float+0x2a4>
 8011372:	bf00      	nop
 8011374:	7fefffff 	.word	0x7fefffff
 8011378:	080166d0 	.word	0x080166d0
 801137c:	080166d4 	.word	0x080166d4
 8011380:	080166d8 	.word	0x080166d8
 8011384:	080166dc 	.word	0x080166dc
 8011388:	080166e0 	.word	0x080166e0
 801138c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801138e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011392:	4553      	cmp	r3, sl
 8011394:	bfa8      	it	ge
 8011396:	4653      	movge	r3, sl
 8011398:	2b00      	cmp	r3, #0
 801139a:	4699      	mov	r9, r3
 801139c:	dc36      	bgt.n	801140c <_printf_float+0x360>
 801139e:	f04f 0b00 	mov.w	fp, #0
 80113a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80113a6:	f104 021a 	add.w	r2, r4, #26
 80113aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80113ac:	9306      	str	r3, [sp, #24]
 80113ae:	eba3 0309 	sub.w	r3, r3, r9
 80113b2:	455b      	cmp	r3, fp
 80113b4:	dc31      	bgt.n	801141a <_printf_float+0x36e>
 80113b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113b8:	459a      	cmp	sl, r3
 80113ba:	dc3a      	bgt.n	8011432 <_printf_float+0x386>
 80113bc:	6823      	ldr	r3, [r4, #0]
 80113be:	07da      	lsls	r2, r3, #31
 80113c0:	d437      	bmi.n	8011432 <_printf_float+0x386>
 80113c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113c4:	ebaa 0903 	sub.w	r9, sl, r3
 80113c8:	9b06      	ldr	r3, [sp, #24]
 80113ca:	ebaa 0303 	sub.w	r3, sl, r3
 80113ce:	4599      	cmp	r9, r3
 80113d0:	bfa8      	it	ge
 80113d2:	4699      	movge	r9, r3
 80113d4:	f1b9 0f00 	cmp.w	r9, #0
 80113d8:	dc33      	bgt.n	8011442 <_printf_float+0x396>
 80113da:	f04f 0800 	mov.w	r8, #0
 80113de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80113e2:	f104 0b1a 	add.w	fp, r4, #26
 80113e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113e8:	ebaa 0303 	sub.w	r3, sl, r3
 80113ec:	eba3 0309 	sub.w	r3, r3, r9
 80113f0:	4543      	cmp	r3, r8
 80113f2:	f77f af79 	ble.w	80112e8 <_printf_float+0x23c>
 80113f6:	2301      	movs	r3, #1
 80113f8:	465a      	mov	r2, fp
 80113fa:	4631      	mov	r1, r6
 80113fc:	4628      	mov	r0, r5
 80113fe:	47b8      	blx	r7
 8011400:	3001      	adds	r0, #1
 8011402:	f43f aeae 	beq.w	8011162 <_printf_float+0xb6>
 8011406:	f108 0801 	add.w	r8, r8, #1
 801140a:	e7ec      	b.n	80113e6 <_printf_float+0x33a>
 801140c:	4642      	mov	r2, r8
 801140e:	4631      	mov	r1, r6
 8011410:	4628      	mov	r0, r5
 8011412:	47b8      	blx	r7
 8011414:	3001      	adds	r0, #1
 8011416:	d1c2      	bne.n	801139e <_printf_float+0x2f2>
 8011418:	e6a3      	b.n	8011162 <_printf_float+0xb6>
 801141a:	2301      	movs	r3, #1
 801141c:	4631      	mov	r1, r6
 801141e:	4628      	mov	r0, r5
 8011420:	9206      	str	r2, [sp, #24]
 8011422:	47b8      	blx	r7
 8011424:	3001      	adds	r0, #1
 8011426:	f43f ae9c 	beq.w	8011162 <_printf_float+0xb6>
 801142a:	9a06      	ldr	r2, [sp, #24]
 801142c:	f10b 0b01 	add.w	fp, fp, #1
 8011430:	e7bb      	b.n	80113aa <_printf_float+0x2fe>
 8011432:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011436:	4631      	mov	r1, r6
 8011438:	4628      	mov	r0, r5
 801143a:	47b8      	blx	r7
 801143c:	3001      	adds	r0, #1
 801143e:	d1c0      	bne.n	80113c2 <_printf_float+0x316>
 8011440:	e68f      	b.n	8011162 <_printf_float+0xb6>
 8011442:	9a06      	ldr	r2, [sp, #24]
 8011444:	464b      	mov	r3, r9
 8011446:	4442      	add	r2, r8
 8011448:	4631      	mov	r1, r6
 801144a:	4628      	mov	r0, r5
 801144c:	47b8      	blx	r7
 801144e:	3001      	adds	r0, #1
 8011450:	d1c3      	bne.n	80113da <_printf_float+0x32e>
 8011452:	e686      	b.n	8011162 <_printf_float+0xb6>
 8011454:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011458:	f1ba 0f01 	cmp.w	sl, #1
 801145c:	dc01      	bgt.n	8011462 <_printf_float+0x3b6>
 801145e:	07db      	lsls	r3, r3, #31
 8011460:	d536      	bpl.n	80114d0 <_printf_float+0x424>
 8011462:	2301      	movs	r3, #1
 8011464:	4642      	mov	r2, r8
 8011466:	4631      	mov	r1, r6
 8011468:	4628      	mov	r0, r5
 801146a:	47b8      	blx	r7
 801146c:	3001      	adds	r0, #1
 801146e:	f43f ae78 	beq.w	8011162 <_printf_float+0xb6>
 8011472:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011476:	4631      	mov	r1, r6
 8011478:	4628      	mov	r0, r5
 801147a:	47b8      	blx	r7
 801147c:	3001      	adds	r0, #1
 801147e:	f43f ae70 	beq.w	8011162 <_printf_float+0xb6>
 8011482:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011486:	2200      	movs	r2, #0
 8011488:	2300      	movs	r3, #0
 801148a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801148e:	f7ef fb3b 	bl	8000b08 <__aeabi_dcmpeq>
 8011492:	b9c0      	cbnz	r0, 80114c6 <_printf_float+0x41a>
 8011494:	4653      	mov	r3, sl
 8011496:	f108 0201 	add.w	r2, r8, #1
 801149a:	4631      	mov	r1, r6
 801149c:	4628      	mov	r0, r5
 801149e:	47b8      	blx	r7
 80114a0:	3001      	adds	r0, #1
 80114a2:	d10c      	bne.n	80114be <_printf_float+0x412>
 80114a4:	e65d      	b.n	8011162 <_printf_float+0xb6>
 80114a6:	2301      	movs	r3, #1
 80114a8:	465a      	mov	r2, fp
 80114aa:	4631      	mov	r1, r6
 80114ac:	4628      	mov	r0, r5
 80114ae:	47b8      	blx	r7
 80114b0:	3001      	adds	r0, #1
 80114b2:	f43f ae56 	beq.w	8011162 <_printf_float+0xb6>
 80114b6:	f108 0801 	add.w	r8, r8, #1
 80114ba:	45d0      	cmp	r8, sl
 80114bc:	dbf3      	blt.n	80114a6 <_printf_float+0x3fa>
 80114be:	464b      	mov	r3, r9
 80114c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80114c4:	e6df      	b.n	8011286 <_printf_float+0x1da>
 80114c6:	f04f 0800 	mov.w	r8, #0
 80114ca:	f104 0b1a 	add.w	fp, r4, #26
 80114ce:	e7f4      	b.n	80114ba <_printf_float+0x40e>
 80114d0:	2301      	movs	r3, #1
 80114d2:	4642      	mov	r2, r8
 80114d4:	e7e1      	b.n	801149a <_printf_float+0x3ee>
 80114d6:	2301      	movs	r3, #1
 80114d8:	464a      	mov	r2, r9
 80114da:	4631      	mov	r1, r6
 80114dc:	4628      	mov	r0, r5
 80114de:	47b8      	blx	r7
 80114e0:	3001      	adds	r0, #1
 80114e2:	f43f ae3e 	beq.w	8011162 <_printf_float+0xb6>
 80114e6:	f108 0801 	add.w	r8, r8, #1
 80114ea:	68e3      	ldr	r3, [r4, #12]
 80114ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80114ee:	1a5b      	subs	r3, r3, r1
 80114f0:	4543      	cmp	r3, r8
 80114f2:	dcf0      	bgt.n	80114d6 <_printf_float+0x42a>
 80114f4:	e6fc      	b.n	80112f0 <_printf_float+0x244>
 80114f6:	f04f 0800 	mov.w	r8, #0
 80114fa:	f104 0919 	add.w	r9, r4, #25
 80114fe:	e7f4      	b.n	80114ea <_printf_float+0x43e>

08011500 <_printf_common>:
 8011500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011504:	4616      	mov	r6, r2
 8011506:	4698      	mov	r8, r3
 8011508:	688a      	ldr	r2, [r1, #8]
 801150a:	690b      	ldr	r3, [r1, #16]
 801150c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011510:	4293      	cmp	r3, r2
 8011512:	bfb8      	it	lt
 8011514:	4613      	movlt	r3, r2
 8011516:	6033      	str	r3, [r6, #0]
 8011518:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801151c:	4607      	mov	r7, r0
 801151e:	460c      	mov	r4, r1
 8011520:	b10a      	cbz	r2, 8011526 <_printf_common+0x26>
 8011522:	3301      	adds	r3, #1
 8011524:	6033      	str	r3, [r6, #0]
 8011526:	6823      	ldr	r3, [r4, #0]
 8011528:	0699      	lsls	r1, r3, #26
 801152a:	bf42      	ittt	mi
 801152c:	6833      	ldrmi	r3, [r6, #0]
 801152e:	3302      	addmi	r3, #2
 8011530:	6033      	strmi	r3, [r6, #0]
 8011532:	6825      	ldr	r5, [r4, #0]
 8011534:	f015 0506 	ands.w	r5, r5, #6
 8011538:	d106      	bne.n	8011548 <_printf_common+0x48>
 801153a:	f104 0a19 	add.w	sl, r4, #25
 801153e:	68e3      	ldr	r3, [r4, #12]
 8011540:	6832      	ldr	r2, [r6, #0]
 8011542:	1a9b      	subs	r3, r3, r2
 8011544:	42ab      	cmp	r3, r5
 8011546:	dc26      	bgt.n	8011596 <_printf_common+0x96>
 8011548:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801154c:	6822      	ldr	r2, [r4, #0]
 801154e:	3b00      	subs	r3, #0
 8011550:	bf18      	it	ne
 8011552:	2301      	movne	r3, #1
 8011554:	0692      	lsls	r2, r2, #26
 8011556:	d42b      	bmi.n	80115b0 <_printf_common+0xb0>
 8011558:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801155c:	4641      	mov	r1, r8
 801155e:	4638      	mov	r0, r7
 8011560:	47c8      	blx	r9
 8011562:	3001      	adds	r0, #1
 8011564:	d01e      	beq.n	80115a4 <_printf_common+0xa4>
 8011566:	6823      	ldr	r3, [r4, #0]
 8011568:	6922      	ldr	r2, [r4, #16]
 801156a:	f003 0306 	and.w	r3, r3, #6
 801156e:	2b04      	cmp	r3, #4
 8011570:	bf02      	ittt	eq
 8011572:	68e5      	ldreq	r5, [r4, #12]
 8011574:	6833      	ldreq	r3, [r6, #0]
 8011576:	1aed      	subeq	r5, r5, r3
 8011578:	68a3      	ldr	r3, [r4, #8]
 801157a:	bf0c      	ite	eq
 801157c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011580:	2500      	movne	r5, #0
 8011582:	4293      	cmp	r3, r2
 8011584:	bfc4      	itt	gt
 8011586:	1a9b      	subgt	r3, r3, r2
 8011588:	18ed      	addgt	r5, r5, r3
 801158a:	2600      	movs	r6, #0
 801158c:	341a      	adds	r4, #26
 801158e:	42b5      	cmp	r5, r6
 8011590:	d11a      	bne.n	80115c8 <_printf_common+0xc8>
 8011592:	2000      	movs	r0, #0
 8011594:	e008      	b.n	80115a8 <_printf_common+0xa8>
 8011596:	2301      	movs	r3, #1
 8011598:	4652      	mov	r2, sl
 801159a:	4641      	mov	r1, r8
 801159c:	4638      	mov	r0, r7
 801159e:	47c8      	blx	r9
 80115a0:	3001      	adds	r0, #1
 80115a2:	d103      	bne.n	80115ac <_printf_common+0xac>
 80115a4:	f04f 30ff 	mov.w	r0, #4294967295
 80115a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115ac:	3501      	adds	r5, #1
 80115ae:	e7c6      	b.n	801153e <_printf_common+0x3e>
 80115b0:	18e1      	adds	r1, r4, r3
 80115b2:	1c5a      	adds	r2, r3, #1
 80115b4:	2030      	movs	r0, #48	@ 0x30
 80115b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80115ba:	4422      	add	r2, r4
 80115bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80115c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80115c4:	3302      	adds	r3, #2
 80115c6:	e7c7      	b.n	8011558 <_printf_common+0x58>
 80115c8:	2301      	movs	r3, #1
 80115ca:	4622      	mov	r2, r4
 80115cc:	4641      	mov	r1, r8
 80115ce:	4638      	mov	r0, r7
 80115d0:	47c8      	blx	r9
 80115d2:	3001      	adds	r0, #1
 80115d4:	d0e6      	beq.n	80115a4 <_printf_common+0xa4>
 80115d6:	3601      	adds	r6, #1
 80115d8:	e7d9      	b.n	801158e <_printf_common+0x8e>
	...

080115dc <_printf_i>:
 80115dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80115e0:	7e0f      	ldrb	r7, [r1, #24]
 80115e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80115e4:	2f78      	cmp	r7, #120	@ 0x78
 80115e6:	4691      	mov	r9, r2
 80115e8:	4680      	mov	r8, r0
 80115ea:	460c      	mov	r4, r1
 80115ec:	469a      	mov	sl, r3
 80115ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80115f2:	d807      	bhi.n	8011604 <_printf_i+0x28>
 80115f4:	2f62      	cmp	r7, #98	@ 0x62
 80115f6:	d80a      	bhi.n	801160e <_printf_i+0x32>
 80115f8:	2f00      	cmp	r7, #0
 80115fa:	f000 80d2 	beq.w	80117a2 <_printf_i+0x1c6>
 80115fe:	2f58      	cmp	r7, #88	@ 0x58
 8011600:	f000 80b9 	beq.w	8011776 <_printf_i+0x19a>
 8011604:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011608:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801160c:	e03a      	b.n	8011684 <_printf_i+0xa8>
 801160e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011612:	2b15      	cmp	r3, #21
 8011614:	d8f6      	bhi.n	8011604 <_printf_i+0x28>
 8011616:	a101      	add	r1, pc, #4	@ (adr r1, 801161c <_printf_i+0x40>)
 8011618:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801161c:	08011675 	.word	0x08011675
 8011620:	08011689 	.word	0x08011689
 8011624:	08011605 	.word	0x08011605
 8011628:	08011605 	.word	0x08011605
 801162c:	08011605 	.word	0x08011605
 8011630:	08011605 	.word	0x08011605
 8011634:	08011689 	.word	0x08011689
 8011638:	08011605 	.word	0x08011605
 801163c:	08011605 	.word	0x08011605
 8011640:	08011605 	.word	0x08011605
 8011644:	08011605 	.word	0x08011605
 8011648:	08011789 	.word	0x08011789
 801164c:	080116b3 	.word	0x080116b3
 8011650:	08011743 	.word	0x08011743
 8011654:	08011605 	.word	0x08011605
 8011658:	08011605 	.word	0x08011605
 801165c:	080117ab 	.word	0x080117ab
 8011660:	08011605 	.word	0x08011605
 8011664:	080116b3 	.word	0x080116b3
 8011668:	08011605 	.word	0x08011605
 801166c:	08011605 	.word	0x08011605
 8011670:	0801174b 	.word	0x0801174b
 8011674:	6833      	ldr	r3, [r6, #0]
 8011676:	1d1a      	adds	r2, r3, #4
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	6032      	str	r2, [r6, #0]
 801167c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011680:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011684:	2301      	movs	r3, #1
 8011686:	e09d      	b.n	80117c4 <_printf_i+0x1e8>
 8011688:	6833      	ldr	r3, [r6, #0]
 801168a:	6820      	ldr	r0, [r4, #0]
 801168c:	1d19      	adds	r1, r3, #4
 801168e:	6031      	str	r1, [r6, #0]
 8011690:	0606      	lsls	r6, r0, #24
 8011692:	d501      	bpl.n	8011698 <_printf_i+0xbc>
 8011694:	681d      	ldr	r5, [r3, #0]
 8011696:	e003      	b.n	80116a0 <_printf_i+0xc4>
 8011698:	0645      	lsls	r5, r0, #25
 801169a:	d5fb      	bpl.n	8011694 <_printf_i+0xb8>
 801169c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80116a0:	2d00      	cmp	r5, #0
 80116a2:	da03      	bge.n	80116ac <_printf_i+0xd0>
 80116a4:	232d      	movs	r3, #45	@ 0x2d
 80116a6:	426d      	negs	r5, r5
 80116a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80116ac:	4859      	ldr	r0, [pc, #356]	@ (8011814 <_printf_i+0x238>)
 80116ae:	230a      	movs	r3, #10
 80116b0:	e011      	b.n	80116d6 <_printf_i+0xfa>
 80116b2:	6821      	ldr	r1, [r4, #0]
 80116b4:	6833      	ldr	r3, [r6, #0]
 80116b6:	0608      	lsls	r0, r1, #24
 80116b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80116bc:	d402      	bmi.n	80116c4 <_printf_i+0xe8>
 80116be:	0649      	lsls	r1, r1, #25
 80116c0:	bf48      	it	mi
 80116c2:	b2ad      	uxthmi	r5, r5
 80116c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80116c6:	4853      	ldr	r0, [pc, #332]	@ (8011814 <_printf_i+0x238>)
 80116c8:	6033      	str	r3, [r6, #0]
 80116ca:	bf14      	ite	ne
 80116cc:	230a      	movne	r3, #10
 80116ce:	2308      	moveq	r3, #8
 80116d0:	2100      	movs	r1, #0
 80116d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80116d6:	6866      	ldr	r6, [r4, #4]
 80116d8:	60a6      	str	r6, [r4, #8]
 80116da:	2e00      	cmp	r6, #0
 80116dc:	bfa2      	ittt	ge
 80116de:	6821      	ldrge	r1, [r4, #0]
 80116e0:	f021 0104 	bicge.w	r1, r1, #4
 80116e4:	6021      	strge	r1, [r4, #0]
 80116e6:	b90d      	cbnz	r5, 80116ec <_printf_i+0x110>
 80116e8:	2e00      	cmp	r6, #0
 80116ea:	d04b      	beq.n	8011784 <_printf_i+0x1a8>
 80116ec:	4616      	mov	r6, r2
 80116ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80116f2:	fb03 5711 	mls	r7, r3, r1, r5
 80116f6:	5dc7      	ldrb	r7, [r0, r7]
 80116f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80116fc:	462f      	mov	r7, r5
 80116fe:	42bb      	cmp	r3, r7
 8011700:	460d      	mov	r5, r1
 8011702:	d9f4      	bls.n	80116ee <_printf_i+0x112>
 8011704:	2b08      	cmp	r3, #8
 8011706:	d10b      	bne.n	8011720 <_printf_i+0x144>
 8011708:	6823      	ldr	r3, [r4, #0]
 801170a:	07df      	lsls	r7, r3, #31
 801170c:	d508      	bpl.n	8011720 <_printf_i+0x144>
 801170e:	6923      	ldr	r3, [r4, #16]
 8011710:	6861      	ldr	r1, [r4, #4]
 8011712:	4299      	cmp	r1, r3
 8011714:	bfde      	ittt	le
 8011716:	2330      	movle	r3, #48	@ 0x30
 8011718:	f806 3c01 	strble.w	r3, [r6, #-1]
 801171c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011720:	1b92      	subs	r2, r2, r6
 8011722:	6122      	str	r2, [r4, #16]
 8011724:	f8cd a000 	str.w	sl, [sp]
 8011728:	464b      	mov	r3, r9
 801172a:	aa03      	add	r2, sp, #12
 801172c:	4621      	mov	r1, r4
 801172e:	4640      	mov	r0, r8
 8011730:	f7ff fee6 	bl	8011500 <_printf_common>
 8011734:	3001      	adds	r0, #1
 8011736:	d14a      	bne.n	80117ce <_printf_i+0x1f2>
 8011738:	f04f 30ff 	mov.w	r0, #4294967295
 801173c:	b004      	add	sp, #16
 801173e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011742:	6823      	ldr	r3, [r4, #0]
 8011744:	f043 0320 	orr.w	r3, r3, #32
 8011748:	6023      	str	r3, [r4, #0]
 801174a:	4833      	ldr	r0, [pc, #204]	@ (8011818 <_printf_i+0x23c>)
 801174c:	2778      	movs	r7, #120	@ 0x78
 801174e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011752:	6823      	ldr	r3, [r4, #0]
 8011754:	6831      	ldr	r1, [r6, #0]
 8011756:	061f      	lsls	r7, r3, #24
 8011758:	f851 5b04 	ldr.w	r5, [r1], #4
 801175c:	d402      	bmi.n	8011764 <_printf_i+0x188>
 801175e:	065f      	lsls	r7, r3, #25
 8011760:	bf48      	it	mi
 8011762:	b2ad      	uxthmi	r5, r5
 8011764:	6031      	str	r1, [r6, #0]
 8011766:	07d9      	lsls	r1, r3, #31
 8011768:	bf44      	itt	mi
 801176a:	f043 0320 	orrmi.w	r3, r3, #32
 801176e:	6023      	strmi	r3, [r4, #0]
 8011770:	b11d      	cbz	r5, 801177a <_printf_i+0x19e>
 8011772:	2310      	movs	r3, #16
 8011774:	e7ac      	b.n	80116d0 <_printf_i+0xf4>
 8011776:	4827      	ldr	r0, [pc, #156]	@ (8011814 <_printf_i+0x238>)
 8011778:	e7e9      	b.n	801174e <_printf_i+0x172>
 801177a:	6823      	ldr	r3, [r4, #0]
 801177c:	f023 0320 	bic.w	r3, r3, #32
 8011780:	6023      	str	r3, [r4, #0]
 8011782:	e7f6      	b.n	8011772 <_printf_i+0x196>
 8011784:	4616      	mov	r6, r2
 8011786:	e7bd      	b.n	8011704 <_printf_i+0x128>
 8011788:	6833      	ldr	r3, [r6, #0]
 801178a:	6825      	ldr	r5, [r4, #0]
 801178c:	6961      	ldr	r1, [r4, #20]
 801178e:	1d18      	adds	r0, r3, #4
 8011790:	6030      	str	r0, [r6, #0]
 8011792:	062e      	lsls	r6, r5, #24
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	d501      	bpl.n	801179c <_printf_i+0x1c0>
 8011798:	6019      	str	r1, [r3, #0]
 801179a:	e002      	b.n	80117a2 <_printf_i+0x1c6>
 801179c:	0668      	lsls	r0, r5, #25
 801179e:	d5fb      	bpl.n	8011798 <_printf_i+0x1bc>
 80117a0:	8019      	strh	r1, [r3, #0]
 80117a2:	2300      	movs	r3, #0
 80117a4:	6123      	str	r3, [r4, #16]
 80117a6:	4616      	mov	r6, r2
 80117a8:	e7bc      	b.n	8011724 <_printf_i+0x148>
 80117aa:	6833      	ldr	r3, [r6, #0]
 80117ac:	1d1a      	adds	r2, r3, #4
 80117ae:	6032      	str	r2, [r6, #0]
 80117b0:	681e      	ldr	r6, [r3, #0]
 80117b2:	6862      	ldr	r2, [r4, #4]
 80117b4:	2100      	movs	r1, #0
 80117b6:	4630      	mov	r0, r6
 80117b8:	f7ee fd2a 	bl	8000210 <memchr>
 80117bc:	b108      	cbz	r0, 80117c2 <_printf_i+0x1e6>
 80117be:	1b80      	subs	r0, r0, r6
 80117c0:	6060      	str	r0, [r4, #4]
 80117c2:	6863      	ldr	r3, [r4, #4]
 80117c4:	6123      	str	r3, [r4, #16]
 80117c6:	2300      	movs	r3, #0
 80117c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80117cc:	e7aa      	b.n	8011724 <_printf_i+0x148>
 80117ce:	6923      	ldr	r3, [r4, #16]
 80117d0:	4632      	mov	r2, r6
 80117d2:	4649      	mov	r1, r9
 80117d4:	4640      	mov	r0, r8
 80117d6:	47d0      	blx	sl
 80117d8:	3001      	adds	r0, #1
 80117da:	d0ad      	beq.n	8011738 <_printf_i+0x15c>
 80117dc:	6823      	ldr	r3, [r4, #0]
 80117de:	079b      	lsls	r3, r3, #30
 80117e0:	d413      	bmi.n	801180a <_printf_i+0x22e>
 80117e2:	68e0      	ldr	r0, [r4, #12]
 80117e4:	9b03      	ldr	r3, [sp, #12]
 80117e6:	4298      	cmp	r0, r3
 80117e8:	bfb8      	it	lt
 80117ea:	4618      	movlt	r0, r3
 80117ec:	e7a6      	b.n	801173c <_printf_i+0x160>
 80117ee:	2301      	movs	r3, #1
 80117f0:	4632      	mov	r2, r6
 80117f2:	4649      	mov	r1, r9
 80117f4:	4640      	mov	r0, r8
 80117f6:	47d0      	blx	sl
 80117f8:	3001      	adds	r0, #1
 80117fa:	d09d      	beq.n	8011738 <_printf_i+0x15c>
 80117fc:	3501      	adds	r5, #1
 80117fe:	68e3      	ldr	r3, [r4, #12]
 8011800:	9903      	ldr	r1, [sp, #12]
 8011802:	1a5b      	subs	r3, r3, r1
 8011804:	42ab      	cmp	r3, r5
 8011806:	dcf2      	bgt.n	80117ee <_printf_i+0x212>
 8011808:	e7eb      	b.n	80117e2 <_printf_i+0x206>
 801180a:	2500      	movs	r5, #0
 801180c:	f104 0619 	add.w	r6, r4, #25
 8011810:	e7f5      	b.n	80117fe <_printf_i+0x222>
 8011812:	bf00      	nop
 8011814:	080166e2 	.word	0x080166e2
 8011818:	080166f3 	.word	0x080166f3

0801181c <_scanf_float>:
 801181c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011820:	b087      	sub	sp, #28
 8011822:	4617      	mov	r7, r2
 8011824:	9303      	str	r3, [sp, #12]
 8011826:	688b      	ldr	r3, [r1, #8]
 8011828:	1e5a      	subs	r2, r3, #1
 801182a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801182e:	bf81      	itttt	hi
 8011830:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8011834:	eb03 0b05 	addhi.w	fp, r3, r5
 8011838:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801183c:	608b      	strhi	r3, [r1, #8]
 801183e:	680b      	ldr	r3, [r1, #0]
 8011840:	460a      	mov	r2, r1
 8011842:	f04f 0500 	mov.w	r5, #0
 8011846:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801184a:	f842 3b1c 	str.w	r3, [r2], #28
 801184e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011852:	4680      	mov	r8, r0
 8011854:	460c      	mov	r4, r1
 8011856:	bf98      	it	ls
 8011858:	f04f 0b00 	movls.w	fp, #0
 801185c:	9201      	str	r2, [sp, #4]
 801185e:	4616      	mov	r6, r2
 8011860:	46aa      	mov	sl, r5
 8011862:	46a9      	mov	r9, r5
 8011864:	9502      	str	r5, [sp, #8]
 8011866:	68a2      	ldr	r2, [r4, #8]
 8011868:	b152      	cbz	r2, 8011880 <_scanf_float+0x64>
 801186a:	683b      	ldr	r3, [r7, #0]
 801186c:	781b      	ldrb	r3, [r3, #0]
 801186e:	2b4e      	cmp	r3, #78	@ 0x4e
 8011870:	d864      	bhi.n	801193c <_scanf_float+0x120>
 8011872:	2b40      	cmp	r3, #64	@ 0x40
 8011874:	d83c      	bhi.n	80118f0 <_scanf_float+0xd4>
 8011876:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801187a:	b2c8      	uxtb	r0, r1
 801187c:	280e      	cmp	r0, #14
 801187e:	d93a      	bls.n	80118f6 <_scanf_float+0xda>
 8011880:	f1b9 0f00 	cmp.w	r9, #0
 8011884:	d003      	beq.n	801188e <_scanf_float+0x72>
 8011886:	6823      	ldr	r3, [r4, #0]
 8011888:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801188c:	6023      	str	r3, [r4, #0]
 801188e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011892:	f1ba 0f01 	cmp.w	sl, #1
 8011896:	f200 8117 	bhi.w	8011ac8 <_scanf_float+0x2ac>
 801189a:	9b01      	ldr	r3, [sp, #4]
 801189c:	429e      	cmp	r6, r3
 801189e:	f200 8108 	bhi.w	8011ab2 <_scanf_float+0x296>
 80118a2:	2001      	movs	r0, #1
 80118a4:	b007      	add	sp, #28
 80118a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118aa:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80118ae:	2a0d      	cmp	r2, #13
 80118b0:	d8e6      	bhi.n	8011880 <_scanf_float+0x64>
 80118b2:	a101      	add	r1, pc, #4	@ (adr r1, 80118b8 <_scanf_float+0x9c>)
 80118b4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80118b8:	080119ff 	.word	0x080119ff
 80118bc:	08011881 	.word	0x08011881
 80118c0:	08011881 	.word	0x08011881
 80118c4:	08011881 	.word	0x08011881
 80118c8:	08011a5f 	.word	0x08011a5f
 80118cc:	08011a37 	.word	0x08011a37
 80118d0:	08011881 	.word	0x08011881
 80118d4:	08011881 	.word	0x08011881
 80118d8:	08011a0d 	.word	0x08011a0d
 80118dc:	08011881 	.word	0x08011881
 80118e0:	08011881 	.word	0x08011881
 80118e4:	08011881 	.word	0x08011881
 80118e8:	08011881 	.word	0x08011881
 80118ec:	080119c5 	.word	0x080119c5
 80118f0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80118f4:	e7db      	b.n	80118ae <_scanf_float+0x92>
 80118f6:	290e      	cmp	r1, #14
 80118f8:	d8c2      	bhi.n	8011880 <_scanf_float+0x64>
 80118fa:	a001      	add	r0, pc, #4	@ (adr r0, 8011900 <_scanf_float+0xe4>)
 80118fc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011900:	080119b5 	.word	0x080119b5
 8011904:	08011881 	.word	0x08011881
 8011908:	080119b5 	.word	0x080119b5
 801190c:	08011a4b 	.word	0x08011a4b
 8011910:	08011881 	.word	0x08011881
 8011914:	0801195d 	.word	0x0801195d
 8011918:	0801199b 	.word	0x0801199b
 801191c:	0801199b 	.word	0x0801199b
 8011920:	0801199b 	.word	0x0801199b
 8011924:	0801199b 	.word	0x0801199b
 8011928:	0801199b 	.word	0x0801199b
 801192c:	0801199b 	.word	0x0801199b
 8011930:	0801199b 	.word	0x0801199b
 8011934:	0801199b 	.word	0x0801199b
 8011938:	0801199b 	.word	0x0801199b
 801193c:	2b6e      	cmp	r3, #110	@ 0x6e
 801193e:	d809      	bhi.n	8011954 <_scanf_float+0x138>
 8011940:	2b60      	cmp	r3, #96	@ 0x60
 8011942:	d8b2      	bhi.n	80118aa <_scanf_float+0x8e>
 8011944:	2b54      	cmp	r3, #84	@ 0x54
 8011946:	d07b      	beq.n	8011a40 <_scanf_float+0x224>
 8011948:	2b59      	cmp	r3, #89	@ 0x59
 801194a:	d199      	bne.n	8011880 <_scanf_float+0x64>
 801194c:	2d07      	cmp	r5, #7
 801194e:	d197      	bne.n	8011880 <_scanf_float+0x64>
 8011950:	2508      	movs	r5, #8
 8011952:	e02c      	b.n	80119ae <_scanf_float+0x192>
 8011954:	2b74      	cmp	r3, #116	@ 0x74
 8011956:	d073      	beq.n	8011a40 <_scanf_float+0x224>
 8011958:	2b79      	cmp	r3, #121	@ 0x79
 801195a:	e7f6      	b.n	801194a <_scanf_float+0x12e>
 801195c:	6821      	ldr	r1, [r4, #0]
 801195e:	05c8      	lsls	r0, r1, #23
 8011960:	d51b      	bpl.n	801199a <_scanf_float+0x17e>
 8011962:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8011966:	6021      	str	r1, [r4, #0]
 8011968:	f109 0901 	add.w	r9, r9, #1
 801196c:	f1bb 0f00 	cmp.w	fp, #0
 8011970:	d003      	beq.n	801197a <_scanf_float+0x15e>
 8011972:	3201      	adds	r2, #1
 8011974:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011978:	60a2      	str	r2, [r4, #8]
 801197a:	68a3      	ldr	r3, [r4, #8]
 801197c:	3b01      	subs	r3, #1
 801197e:	60a3      	str	r3, [r4, #8]
 8011980:	6923      	ldr	r3, [r4, #16]
 8011982:	3301      	adds	r3, #1
 8011984:	6123      	str	r3, [r4, #16]
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	3b01      	subs	r3, #1
 801198a:	2b00      	cmp	r3, #0
 801198c:	607b      	str	r3, [r7, #4]
 801198e:	f340 8087 	ble.w	8011aa0 <_scanf_float+0x284>
 8011992:	683b      	ldr	r3, [r7, #0]
 8011994:	3301      	adds	r3, #1
 8011996:	603b      	str	r3, [r7, #0]
 8011998:	e765      	b.n	8011866 <_scanf_float+0x4a>
 801199a:	eb1a 0105 	adds.w	r1, sl, r5
 801199e:	f47f af6f 	bne.w	8011880 <_scanf_float+0x64>
 80119a2:	6822      	ldr	r2, [r4, #0]
 80119a4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80119a8:	6022      	str	r2, [r4, #0]
 80119aa:	460d      	mov	r5, r1
 80119ac:	468a      	mov	sl, r1
 80119ae:	f806 3b01 	strb.w	r3, [r6], #1
 80119b2:	e7e2      	b.n	801197a <_scanf_float+0x15e>
 80119b4:	6822      	ldr	r2, [r4, #0]
 80119b6:	0610      	lsls	r0, r2, #24
 80119b8:	f57f af62 	bpl.w	8011880 <_scanf_float+0x64>
 80119bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80119c0:	6022      	str	r2, [r4, #0]
 80119c2:	e7f4      	b.n	80119ae <_scanf_float+0x192>
 80119c4:	f1ba 0f00 	cmp.w	sl, #0
 80119c8:	d10e      	bne.n	80119e8 <_scanf_float+0x1cc>
 80119ca:	f1b9 0f00 	cmp.w	r9, #0
 80119ce:	d10e      	bne.n	80119ee <_scanf_float+0x1d2>
 80119d0:	6822      	ldr	r2, [r4, #0]
 80119d2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80119d6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80119da:	d108      	bne.n	80119ee <_scanf_float+0x1d2>
 80119dc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80119e0:	6022      	str	r2, [r4, #0]
 80119e2:	f04f 0a01 	mov.w	sl, #1
 80119e6:	e7e2      	b.n	80119ae <_scanf_float+0x192>
 80119e8:	f1ba 0f02 	cmp.w	sl, #2
 80119ec:	d055      	beq.n	8011a9a <_scanf_float+0x27e>
 80119ee:	2d01      	cmp	r5, #1
 80119f0:	d002      	beq.n	80119f8 <_scanf_float+0x1dc>
 80119f2:	2d04      	cmp	r5, #4
 80119f4:	f47f af44 	bne.w	8011880 <_scanf_float+0x64>
 80119f8:	3501      	adds	r5, #1
 80119fa:	b2ed      	uxtb	r5, r5
 80119fc:	e7d7      	b.n	80119ae <_scanf_float+0x192>
 80119fe:	f1ba 0f01 	cmp.w	sl, #1
 8011a02:	f47f af3d 	bne.w	8011880 <_scanf_float+0x64>
 8011a06:	f04f 0a02 	mov.w	sl, #2
 8011a0a:	e7d0      	b.n	80119ae <_scanf_float+0x192>
 8011a0c:	b97d      	cbnz	r5, 8011a2e <_scanf_float+0x212>
 8011a0e:	f1b9 0f00 	cmp.w	r9, #0
 8011a12:	f47f af38 	bne.w	8011886 <_scanf_float+0x6a>
 8011a16:	6822      	ldr	r2, [r4, #0]
 8011a18:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8011a1c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8011a20:	f040 8108 	bne.w	8011c34 <_scanf_float+0x418>
 8011a24:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011a28:	6022      	str	r2, [r4, #0]
 8011a2a:	2501      	movs	r5, #1
 8011a2c:	e7bf      	b.n	80119ae <_scanf_float+0x192>
 8011a2e:	2d03      	cmp	r5, #3
 8011a30:	d0e2      	beq.n	80119f8 <_scanf_float+0x1dc>
 8011a32:	2d05      	cmp	r5, #5
 8011a34:	e7de      	b.n	80119f4 <_scanf_float+0x1d8>
 8011a36:	2d02      	cmp	r5, #2
 8011a38:	f47f af22 	bne.w	8011880 <_scanf_float+0x64>
 8011a3c:	2503      	movs	r5, #3
 8011a3e:	e7b6      	b.n	80119ae <_scanf_float+0x192>
 8011a40:	2d06      	cmp	r5, #6
 8011a42:	f47f af1d 	bne.w	8011880 <_scanf_float+0x64>
 8011a46:	2507      	movs	r5, #7
 8011a48:	e7b1      	b.n	80119ae <_scanf_float+0x192>
 8011a4a:	6822      	ldr	r2, [r4, #0]
 8011a4c:	0591      	lsls	r1, r2, #22
 8011a4e:	f57f af17 	bpl.w	8011880 <_scanf_float+0x64>
 8011a52:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8011a56:	6022      	str	r2, [r4, #0]
 8011a58:	f8cd 9008 	str.w	r9, [sp, #8]
 8011a5c:	e7a7      	b.n	80119ae <_scanf_float+0x192>
 8011a5e:	6822      	ldr	r2, [r4, #0]
 8011a60:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8011a64:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8011a68:	d006      	beq.n	8011a78 <_scanf_float+0x25c>
 8011a6a:	0550      	lsls	r0, r2, #21
 8011a6c:	f57f af08 	bpl.w	8011880 <_scanf_float+0x64>
 8011a70:	f1b9 0f00 	cmp.w	r9, #0
 8011a74:	f000 80de 	beq.w	8011c34 <_scanf_float+0x418>
 8011a78:	0591      	lsls	r1, r2, #22
 8011a7a:	bf58      	it	pl
 8011a7c:	9902      	ldrpl	r1, [sp, #8]
 8011a7e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011a82:	bf58      	it	pl
 8011a84:	eba9 0101 	subpl.w	r1, r9, r1
 8011a88:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8011a8c:	bf58      	it	pl
 8011a8e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8011a92:	6022      	str	r2, [r4, #0]
 8011a94:	f04f 0900 	mov.w	r9, #0
 8011a98:	e789      	b.n	80119ae <_scanf_float+0x192>
 8011a9a:	f04f 0a03 	mov.w	sl, #3
 8011a9e:	e786      	b.n	80119ae <_scanf_float+0x192>
 8011aa0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011aa4:	4639      	mov	r1, r7
 8011aa6:	4640      	mov	r0, r8
 8011aa8:	4798      	blx	r3
 8011aaa:	2800      	cmp	r0, #0
 8011aac:	f43f aedb 	beq.w	8011866 <_scanf_float+0x4a>
 8011ab0:	e6e6      	b.n	8011880 <_scanf_float+0x64>
 8011ab2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011ab6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011aba:	463a      	mov	r2, r7
 8011abc:	4640      	mov	r0, r8
 8011abe:	4798      	blx	r3
 8011ac0:	6923      	ldr	r3, [r4, #16]
 8011ac2:	3b01      	subs	r3, #1
 8011ac4:	6123      	str	r3, [r4, #16]
 8011ac6:	e6e8      	b.n	801189a <_scanf_float+0x7e>
 8011ac8:	1e6b      	subs	r3, r5, #1
 8011aca:	2b06      	cmp	r3, #6
 8011acc:	d824      	bhi.n	8011b18 <_scanf_float+0x2fc>
 8011ace:	2d02      	cmp	r5, #2
 8011ad0:	d836      	bhi.n	8011b40 <_scanf_float+0x324>
 8011ad2:	9b01      	ldr	r3, [sp, #4]
 8011ad4:	429e      	cmp	r6, r3
 8011ad6:	f67f aee4 	bls.w	80118a2 <_scanf_float+0x86>
 8011ada:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011ade:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011ae2:	463a      	mov	r2, r7
 8011ae4:	4640      	mov	r0, r8
 8011ae6:	4798      	blx	r3
 8011ae8:	6923      	ldr	r3, [r4, #16]
 8011aea:	3b01      	subs	r3, #1
 8011aec:	6123      	str	r3, [r4, #16]
 8011aee:	e7f0      	b.n	8011ad2 <_scanf_float+0x2b6>
 8011af0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011af4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8011af8:	463a      	mov	r2, r7
 8011afa:	4640      	mov	r0, r8
 8011afc:	4798      	blx	r3
 8011afe:	6923      	ldr	r3, [r4, #16]
 8011b00:	3b01      	subs	r3, #1
 8011b02:	6123      	str	r3, [r4, #16]
 8011b04:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011b08:	fa5f fa8a 	uxtb.w	sl, sl
 8011b0c:	f1ba 0f02 	cmp.w	sl, #2
 8011b10:	d1ee      	bne.n	8011af0 <_scanf_float+0x2d4>
 8011b12:	3d03      	subs	r5, #3
 8011b14:	b2ed      	uxtb	r5, r5
 8011b16:	1b76      	subs	r6, r6, r5
 8011b18:	6823      	ldr	r3, [r4, #0]
 8011b1a:	05da      	lsls	r2, r3, #23
 8011b1c:	d530      	bpl.n	8011b80 <_scanf_float+0x364>
 8011b1e:	055b      	lsls	r3, r3, #21
 8011b20:	d511      	bpl.n	8011b46 <_scanf_float+0x32a>
 8011b22:	9b01      	ldr	r3, [sp, #4]
 8011b24:	429e      	cmp	r6, r3
 8011b26:	f67f aebc 	bls.w	80118a2 <_scanf_float+0x86>
 8011b2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011b2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011b32:	463a      	mov	r2, r7
 8011b34:	4640      	mov	r0, r8
 8011b36:	4798      	blx	r3
 8011b38:	6923      	ldr	r3, [r4, #16]
 8011b3a:	3b01      	subs	r3, #1
 8011b3c:	6123      	str	r3, [r4, #16]
 8011b3e:	e7f0      	b.n	8011b22 <_scanf_float+0x306>
 8011b40:	46aa      	mov	sl, r5
 8011b42:	46b3      	mov	fp, r6
 8011b44:	e7de      	b.n	8011b04 <_scanf_float+0x2e8>
 8011b46:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011b4a:	6923      	ldr	r3, [r4, #16]
 8011b4c:	2965      	cmp	r1, #101	@ 0x65
 8011b4e:	f103 33ff 	add.w	r3, r3, #4294967295
 8011b52:	f106 35ff 	add.w	r5, r6, #4294967295
 8011b56:	6123      	str	r3, [r4, #16]
 8011b58:	d00c      	beq.n	8011b74 <_scanf_float+0x358>
 8011b5a:	2945      	cmp	r1, #69	@ 0x45
 8011b5c:	d00a      	beq.n	8011b74 <_scanf_float+0x358>
 8011b5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011b62:	463a      	mov	r2, r7
 8011b64:	4640      	mov	r0, r8
 8011b66:	4798      	blx	r3
 8011b68:	6923      	ldr	r3, [r4, #16]
 8011b6a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011b6e:	3b01      	subs	r3, #1
 8011b70:	1eb5      	subs	r5, r6, #2
 8011b72:	6123      	str	r3, [r4, #16]
 8011b74:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011b78:	463a      	mov	r2, r7
 8011b7a:	4640      	mov	r0, r8
 8011b7c:	4798      	blx	r3
 8011b7e:	462e      	mov	r6, r5
 8011b80:	6822      	ldr	r2, [r4, #0]
 8011b82:	f012 0210 	ands.w	r2, r2, #16
 8011b86:	d001      	beq.n	8011b8c <_scanf_float+0x370>
 8011b88:	2000      	movs	r0, #0
 8011b8a:	e68b      	b.n	80118a4 <_scanf_float+0x88>
 8011b8c:	7032      	strb	r2, [r6, #0]
 8011b8e:	6823      	ldr	r3, [r4, #0]
 8011b90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8011b94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011b98:	d11c      	bne.n	8011bd4 <_scanf_float+0x3b8>
 8011b9a:	9b02      	ldr	r3, [sp, #8]
 8011b9c:	454b      	cmp	r3, r9
 8011b9e:	eba3 0209 	sub.w	r2, r3, r9
 8011ba2:	d123      	bne.n	8011bec <_scanf_float+0x3d0>
 8011ba4:	9901      	ldr	r1, [sp, #4]
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	4640      	mov	r0, r8
 8011baa:	f7ff f975 	bl	8010e98 <_strtod_r>
 8011bae:	9b03      	ldr	r3, [sp, #12]
 8011bb0:	6821      	ldr	r1, [r4, #0]
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	f011 0f02 	tst.w	r1, #2
 8011bb8:	ec57 6b10 	vmov	r6, r7, d0
 8011bbc:	f103 0204 	add.w	r2, r3, #4
 8011bc0:	d01f      	beq.n	8011c02 <_scanf_float+0x3e6>
 8011bc2:	9903      	ldr	r1, [sp, #12]
 8011bc4:	600a      	str	r2, [r1, #0]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	e9c3 6700 	strd	r6, r7, [r3]
 8011bcc:	68e3      	ldr	r3, [r4, #12]
 8011bce:	3301      	adds	r3, #1
 8011bd0:	60e3      	str	r3, [r4, #12]
 8011bd2:	e7d9      	b.n	8011b88 <_scanf_float+0x36c>
 8011bd4:	9b04      	ldr	r3, [sp, #16]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d0e4      	beq.n	8011ba4 <_scanf_float+0x388>
 8011bda:	9905      	ldr	r1, [sp, #20]
 8011bdc:	230a      	movs	r3, #10
 8011bde:	3101      	adds	r1, #1
 8011be0:	4640      	mov	r0, r8
 8011be2:	f002 fa41 	bl	8014068 <_strtol_r>
 8011be6:	9b04      	ldr	r3, [sp, #16]
 8011be8:	9e05      	ldr	r6, [sp, #20]
 8011bea:	1ac2      	subs	r2, r0, r3
 8011bec:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8011bf0:	429e      	cmp	r6, r3
 8011bf2:	bf28      	it	cs
 8011bf4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8011bf8:	4910      	ldr	r1, [pc, #64]	@ (8011c3c <_scanf_float+0x420>)
 8011bfa:	4630      	mov	r0, r6
 8011bfc:	f000 f8e4 	bl	8011dc8 <siprintf>
 8011c00:	e7d0      	b.n	8011ba4 <_scanf_float+0x388>
 8011c02:	f011 0f04 	tst.w	r1, #4
 8011c06:	9903      	ldr	r1, [sp, #12]
 8011c08:	600a      	str	r2, [r1, #0]
 8011c0a:	d1dc      	bne.n	8011bc6 <_scanf_float+0x3aa>
 8011c0c:	681d      	ldr	r5, [r3, #0]
 8011c0e:	4632      	mov	r2, r6
 8011c10:	463b      	mov	r3, r7
 8011c12:	4630      	mov	r0, r6
 8011c14:	4639      	mov	r1, r7
 8011c16:	f7ee ffa9 	bl	8000b6c <__aeabi_dcmpun>
 8011c1a:	b128      	cbz	r0, 8011c28 <_scanf_float+0x40c>
 8011c1c:	4808      	ldr	r0, [pc, #32]	@ (8011c40 <_scanf_float+0x424>)
 8011c1e:	f000 fa3b 	bl	8012098 <nanf>
 8011c22:	ed85 0a00 	vstr	s0, [r5]
 8011c26:	e7d1      	b.n	8011bcc <_scanf_float+0x3b0>
 8011c28:	4630      	mov	r0, r6
 8011c2a:	4639      	mov	r1, r7
 8011c2c:	f7ee fffc 	bl	8000c28 <__aeabi_d2f>
 8011c30:	6028      	str	r0, [r5, #0]
 8011c32:	e7cb      	b.n	8011bcc <_scanf_float+0x3b0>
 8011c34:	f04f 0900 	mov.w	r9, #0
 8011c38:	e629      	b.n	801188e <_scanf_float+0x72>
 8011c3a:	bf00      	nop
 8011c3c:	08016704 	.word	0x08016704
 8011c40:	080167bd 	.word	0x080167bd

08011c44 <std>:
 8011c44:	2300      	movs	r3, #0
 8011c46:	b510      	push	{r4, lr}
 8011c48:	4604      	mov	r4, r0
 8011c4a:	e9c0 3300 	strd	r3, r3, [r0]
 8011c4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011c52:	6083      	str	r3, [r0, #8]
 8011c54:	8181      	strh	r1, [r0, #12]
 8011c56:	6643      	str	r3, [r0, #100]	@ 0x64
 8011c58:	81c2      	strh	r2, [r0, #14]
 8011c5a:	6183      	str	r3, [r0, #24]
 8011c5c:	4619      	mov	r1, r3
 8011c5e:	2208      	movs	r2, #8
 8011c60:	305c      	adds	r0, #92	@ 0x5c
 8011c62:	f000 f914 	bl	8011e8e <memset>
 8011c66:	4b0d      	ldr	r3, [pc, #52]	@ (8011c9c <std+0x58>)
 8011c68:	6263      	str	r3, [r4, #36]	@ 0x24
 8011c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8011ca0 <std+0x5c>)
 8011c6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8011ca4 <std+0x60>)
 8011c70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011c72:	4b0d      	ldr	r3, [pc, #52]	@ (8011ca8 <std+0x64>)
 8011c74:	6323      	str	r3, [r4, #48]	@ 0x30
 8011c76:	4b0d      	ldr	r3, [pc, #52]	@ (8011cac <std+0x68>)
 8011c78:	6224      	str	r4, [r4, #32]
 8011c7a:	429c      	cmp	r4, r3
 8011c7c:	d006      	beq.n	8011c8c <std+0x48>
 8011c7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011c82:	4294      	cmp	r4, r2
 8011c84:	d002      	beq.n	8011c8c <std+0x48>
 8011c86:	33d0      	adds	r3, #208	@ 0xd0
 8011c88:	429c      	cmp	r4, r3
 8011c8a:	d105      	bne.n	8011c98 <std+0x54>
 8011c8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c94:	f000 b9e6 	b.w	8012064 <__retarget_lock_init_recursive>
 8011c98:	bd10      	pop	{r4, pc}
 8011c9a:	bf00      	nop
 8011c9c:	08011e09 	.word	0x08011e09
 8011ca0:	08011e2b 	.word	0x08011e2b
 8011ca4:	08011e63 	.word	0x08011e63
 8011ca8:	08011e87 	.word	0x08011e87
 8011cac:	20007048 	.word	0x20007048

08011cb0 <stdio_exit_handler>:
 8011cb0:	4a02      	ldr	r2, [pc, #8]	@ (8011cbc <stdio_exit_handler+0xc>)
 8011cb2:	4903      	ldr	r1, [pc, #12]	@ (8011cc0 <stdio_exit_handler+0x10>)
 8011cb4:	4803      	ldr	r0, [pc, #12]	@ (8011cc4 <stdio_exit_handler+0x14>)
 8011cb6:	f000 b869 	b.w	8011d8c <_fwalk_sglue>
 8011cba:	bf00      	nop
 8011cbc:	20000020 	.word	0x20000020
 8011cc0:	0801443d 	.word	0x0801443d
 8011cc4:	2000019c 	.word	0x2000019c

08011cc8 <cleanup_stdio>:
 8011cc8:	6841      	ldr	r1, [r0, #4]
 8011cca:	4b0c      	ldr	r3, [pc, #48]	@ (8011cfc <cleanup_stdio+0x34>)
 8011ccc:	4299      	cmp	r1, r3
 8011cce:	b510      	push	{r4, lr}
 8011cd0:	4604      	mov	r4, r0
 8011cd2:	d001      	beq.n	8011cd8 <cleanup_stdio+0x10>
 8011cd4:	f002 fbb2 	bl	801443c <_fflush_r>
 8011cd8:	68a1      	ldr	r1, [r4, #8]
 8011cda:	4b09      	ldr	r3, [pc, #36]	@ (8011d00 <cleanup_stdio+0x38>)
 8011cdc:	4299      	cmp	r1, r3
 8011cde:	d002      	beq.n	8011ce6 <cleanup_stdio+0x1e>
 8011ce0:	4620      	mov	r0, r4
 8011ce2:	f002 fbab 	bl	801443c <_fflush_r>
 8011ce6:	68e1      	ldr	r1, [r4, #12]
 8011ce8:	4b06      	ldr	r3, [pc, #24]	@ (8011d04 <cleanup_stdio+0x3c>)
 8011cea:	4299      	cmp	r1, r3
 8011cec:	d004      	beq.n	8011cf8 <cleanup_stdio+0x30>
 8011cee:	4620      	mov	r0, r4
 8011cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011cf4:	f002 bba2 	b.w	801443c <_fflush_r>
 8011cf8:	bd10      	pop	{r4, pc}
 8011cfa:	bf00      	nop
 8011cfc:	20007048 	.word	0x20007048
 8011d00:	200070b0 	.word	0x200070b0
 8011d04:	20007118 	.word	0x20007118

08011d08 <global_stdio_init.part.0>:
 8011d08:	b510      	push	{r4, lr}
 8011d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8011d38 <global_stdio_init.part.0+0x30>)
 8011d0c:	4c0b      	ldr	r4, [pc, #44]	@ (8011d3c <global_stdio_init.part.0+0x34>)
 8011d0e:	4a0c      	ldr	r2, [pc, #48]	@ (8011d40 <global_stdio_init.part.0+0x38>)
 8011d10:	601a      	str	r2, [r3, #0]
 8011d12:	4620      	mov	r0, r4
 8011d14:	2200      	movs	r2, #0
 8011d16:	2104      	movs	r1, #4
 8011d18:	f7ff ff94 	bl	8011c44 <std>
 8011d1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011d20:	2201      	movs	r2, #1
 8011d22:	2109      	movs	r1, #9
 8011d24:	f7ff ff8e 	bl	8011c44 <std>
 8011d28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011d2c:	2202      	movs	r2, #2
 8011d2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d32:	2112      	movs	r1, #18
 8011d34:	f7ff bf86 	b.w	8011c44 <std>
 8011d38:	20007180 	.word	0x20007180
 8011d3c:	20007048 	.word	0x20007048
 8011d40:	08011cb1 	.word	0x08011cb1

08011d44 <__sfp_lock_acquire>:
 8011d44:	4801      	ldr	r0, [pc, #4]	@ (8011d4c <__sfp_lock_acquire+0x8>)
 8011d46:	f000 b98e 	b.w	8012066 <__retarget_lock_acquire_recursive>
 8011d4a:	bf00      	nop
 8011d4c:	20007189 	.word	0x20007189

08011d50 <__sfp_lock_release>:
 8011d50:	4801      	ldr	r0, [pc, #4]	@ (8011d58 <__sfp_lock_release+0x8>)
 8011d52:	f000 b989 	b.w	8012068 <__retarget_lock_release_recursive>
 8011d56:	bf00      	nop
 8011d58:	20007189 	.word	0x20007189

08011d5c <__sinit>:
 8011d5c:	b510      	push	{r4, lr}
 8011d5e:	4604      	mov	r4, r0
 8011d60:	f7ff fff0 	bl	8011d44 <__sfp_lock_acquire>
 8011d64:	6a23      	ldr	r3, [r4, #32]
 8011d66:	b11b      	cbz	r3, 8011d70 <__sinit+0x14>
 8011d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d6c:	f7ff bff0 	b.w	8011d50 <__sfp_lock_release>
 8011d70:	4b04      	ldr	r3, [pc, #16]	@ (8011d84 <__sinit+0x28>)
 8011d72:	6223      	str	r3, [r4, #32]
 8011d74:	4b04      	ldr	r3, [pc, #16]	@ (8011d88 <__sinit+0x2c>)
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d1f5      	bne.n	8011d68 <__sinit+0xc>
 8011d7c:	f7ff ffc4 	bl	8011d08 <global_stdio_init.part.0>
 8011d80:	e7f2      	b.n	8011d68 <__sinit+0xc>
 8011d82:	bf00      	nop
 8011d84:	08011cc9 	.word	0x08011cc9
 8011d88:	20007180 	.word	0x20007180

08011d8c <_fwalk_sglue>:
 8011d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d90:	4607      	mov	r7, r0
 8011d92:	4688      	mov	r8, r1
 8011d94:	4614      	mov	r4, r2
 8011d96:	2600      	movs	r6, #0
 8011d98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011d9c:	f1b9 0901 	subs.w	r9, r9, #1
 8011da0:	d505      	bpl.n	8011dae <_fwalk_sglue+0x22>
 8011da2:	6824      	ldr	r4, [r4, #0]
 8011da4:	2c00      	cmp	r4, #0
 8011da6:	d1f7      	bne.n	8011d98 <_fwalk_sglue+0xc>
 8011da8:	4630      	mov	r0, r6
 8011daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011dae:	89ab      	ldrh	r3, [r5, #12]
 8011db0:	2b01      	cmp	r3, #1
 8011db2:	d907      	bls.n	8011dc4 <_fwalk_sglue+0x38>
 8011db4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011db8:	3301      	adds	r3, #1
 8011dba:	d003      	beq.n	8011dc4 <_fwalk_sglue+0x38>
 8011dbc:	4629      	mov	r1, r5
 8011dbe:	4638      	mov	r0, r7
 8011dc0:	47c0      	blx	r8
 8011dc2:	4306      	orrs	r6, r0
 8011dc4:	3568      	adds	r5, #104	@ 0x68
 8011dc6:	e7e9      	b.n	8011d9c <_fwalk_sglue+0x10>

08011dc8 <siprintf>:
 8011dc8:	b40e      	push	{r1, r2, r3}
 8011dca:	b500      	push	{lr}
 8011dcc:	b09c      	sub	sp, #112	@ 0x70
 8011dce:	ab1d      	add	r3, sp, #116	@ 0x74
 8011dd0:	9002      	str	r0, [sp, #8]
 8011dd2:	9006      	str	r0, [sp, #24]
 8011dd4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011dd8:	4809      	ldr	r0, [pc, #36]	@ (8011e00 <siprintf+0x38>)
 8011dda:	9107      	str	r1, [sp, #28]
 8011ddc:	9104      	str	r1, [sp, #16]
 8011dde:	4909      	ldr	r1, [pc, #36]	@ (8011e04 <siprintf+0x3c>)
 8011de0:	f853 2b04 	ldr.w	r2, [r3], #4
 8011de4:	9105      	str	r1, [sp, #20]
 8011de6:	6800      	ldr	r0, [r0, #0]
 8011de8:	9301      	str	r3, [sp, #4]
 8011dea:	a902      	add	r1, sp, #8
 8011dec:	f002 f9a6 	bl	801413c <_svfiprintf_r>
 8011df0:	9b02      	ldr	r3, [sp, #8]
 8011df2:	2200      	movs	r2, #0
 8011df4:	701a      	strb	r2, [r3, #0]
 8011df6:	b01c      	add	sp, #112	@ 0x70
 8011df8:	f85d eb04 	ldr.w	lr, [sp], #4
 8011dfc:	b003      	add	sp, #12
 8011dfe:	4770      	bx	lr
 8011e00:	20000198 	.word	0x20000198
 8011e04:	ffff0208 	.word	0xffff0208

08011e08 <__sread>:
 8011e08:	b510      	push	{r4, lr}
 8011e0a:	460c      	mov	r4, r1
 8011e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e10:	f000 f8da 	bl	8011fc8 <_read_r>
 8011e14:	2800      	cmp	r0, #0
 8011e16:	bfab      	itete	ge
 8011e18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011e1a:	89a3      	ldrhlt	r3, [r4, #12]
 8011e1c:	181b      	addge	r3, r3, r0
 8011e1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011e22:	bfac      	ite	ge
 8011e24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011e26:	81a3      	strhlt	r3, [r4, #12]
 8011e28:	bd10      	pop	{r4, pc}

08011e2a <__swrite>:
 8011e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e2e:	461f      	mov	r7, r3
 8011e30:	898b      	ldrh	r3, [r1, #12]
 8011e32:	05db      	lsls	r3, r3, #23
 8011e34:	4605      	mov	r5, r0
 8011e36:	460c      	mov	r4, r1
 8011e38:	4616      	mov	r6, r2
 8011e3a:	d505      	bpl.n	8011e48 <__swrite+0x1e>
 8011e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e40:	2302      	movs	r3, #2
 8011e42:	2200      	movs	r2, #0
 8011e44:	f000 f8ae 	bl	8011fa4 <_lseek_r>
 8011e48:	89a3      	ldrh	r3, [r4, #12]
 8011e4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011e52:	81a3      	strh	r3, [r4, #12]
 8011e54:	4632      	mov	r2, r6
 8011e56:	463b      	mov	r3, r7
 8011e58:	4628      	mov	r0, r5
 8011e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e5e:	f000 b8c5 	b.w	8011fec <_write_r>

08011e62 <__sseek>:
 8011e62:	b510      	push	{r4, lr}
 8011e64:	460c      	mov	r4, r1
 8011e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e6a:	f000 f89b 	bl	8011fa4 <_lseek_r>
 8011e6e:	1c43      	adds	r3, r0, #1
 8011e70:	89a3      	ldrh	r3, [r4, #12]
 8011e72:	bf15      	itete	ne
 8011e74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011e76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011e7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011e7e:	81a3      	strheq	r3, [r4, #12]
 8011e80:	bf18      	it	ne
 8011e82:	81a3      	strhne	r3, [r4, #12]
 8011e84:	bd10      	pop	{r4, pc}

08011e86 <__sclose>:
 8011e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e8a:	f000 b87b 	b.w	8011f84 <_close_r>

08011e8e <memset>:
 8011e8e:	4402      	add	r2, r0
 8011e90:	4603      	mov	r3, r0
 8011e92:	4293      	cmp	r3, r2
 8011e94:	d100      	bne.n	8011e98 <memset+0xa>
 8011e96:	4770      	bx	lr
 8011e98:	f803 1b01 	strb.w	r1, [r3], #1
 8011e9c:	e7f9      	b.n	8011e92 <memset+0x4>

08011e9e <strncmp>:
 8011e9e:	b510      	push	{r4, lr}
 8011ea0:	b16a      	cbz	r2, 8011ebe <strncmp+0x20>
 8011ea2:	3901      	subs	r1, #1
 8011ea4:	1884      	adds	r4, r0, r2
 8011ea6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011eaa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011eae:	429a      	cmp	r2, r3
 8011eb0:	d103      	bne.n	8011eba <strncmp+0x1c>
 8011eb2:	42a0      	cmp	r0, r4
 8011eb4:	d001      	beq.n	8011eba <strncmp+0x1c>
 8011eb6:	2a00      	cmp	r2, #0
 8011eb8:	d1f5      	bne.n	8011ea6 <strncmp+0x8>
 8011eba:	1ad0      	subs	r0, r2, r3
 8011ebc:	bd10      	pop	{r4, pc}
 8011ebe:	4610      	mov	r0, r2
 8011ec0:	e7fc      	b.n	8011ebc <strncmp+0x1e>
	...

08011ec4 <strtok>:
 8011ec4:	4b16      	ldr	r3, [pc, #88]	@ (8011f20 <strtok+0x5c>)
 8011ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011eca:	681f      	ldr	r7, [r3, #0]
 8011ecc:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8011ece:	4605      	mov	r5, r0
 8011ed0:	460e      	mov	r6, r1
 8011ed2:	b9ec      	cbnz	r4, 8011f10 <strtok+0x4c>
 8011ed4:	2050      	movs	r0, #80	@ 0x50
 8011ed6:	f001 fad3 	bl	8013480 <malloc>
 8011eda:	4602      	mov	r2, r0
 8011edc:	6478      	str	r0, [r7, #68]	@ 0x44
 8011ede:	b920      	cbnz	r0, 8011eea <strtok+0x26>
 8011ee0:	4b10      	ldr	r3, [pc, #64]	@ (8011f24 <strtok+0x60>)
 8011ee2:	4811      	ldr	r0, [pc, #68]	@ (8011f28 <strtok+0x64>)
 8011ee4:	215b      	movs	r1, #91	@ 0x5b
 8011ee6:	f000 f8dd 	bl	80120a4 <__assert_func>
 8011eea:	e9c0 4400 	strd	r4, r4, [r0]
 8011eee:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8011ef2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8011ef6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8011efa:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8011efe:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8011f02:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8011f06:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8011f0a:	6184      	str	r4, [r0, #24]
 8011f0c:	7704      	strb	r4, [r0, #28]
 8011f0e:	6244      	str	r4, [r0, #36]	@ 0x24
 8011f10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011f12:	4631      	mov	r1, r6
 8011f14:	4628      	mov	r0, r5
 8011f16:	2301      	movs	r3, #1
 8011f18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f1c:	f000 b806 	b.w	8011f2c <__strtok_r>
 8011f20:	20000198 	.word	0x20000198
 8011f24:	08016709 	.word	0x08016709
 8011f28:	08016720 	.word	0x08016720

08011f2c <__strtok_r>:
 8011f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f2e:	4604      	mov	r4, r0
 8011f30:	b908      	cbnz	r0, 8011f36 <__strtok_r+0xa>
 8011f32:	6814      	ldr	r4, [r2, #0]
 8011f34:	b144      	cbz	r4, 8011f48 <__strtok_r+0x1c>
 8011f36:	4620      	mov	r0, r4
 8011f38:	f814 5b01 	ldrb.w	r5, [r4], #1
 8011f3c:	460f      	mov	r7, r1
 8011f3e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8011f42:	b91e      	cbnz	r6, 8011f4c <__strtok_r+0x20>
 8011f44:	b965      	cbnz	r5, 8011f60 <__strtok_r+0x34>
 8011f46:	6015      	str	r5, [r2, #0]
 8011f48:	2000      	movs	r0, #0
 8011f4a:	e005      	b.n	8011f58 <__strtok_r+0x2c>
 8011f4c:	42b5      	cmp	r5, r6
 8011f4e:	d1f6      	bne.n	8011f3e <__strtok_r+0x12>
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d1f0      	bne.n	8011f36 <__strtok_r+0xa>
 8011f54:	6014      	str	r4, [r2, #0]
 8011f56:	7003      	strb	r3, [r0, #0]
 8011f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f5a:	461c      	mov	r4, r3
 8011f5c:	e00c      	b.n	8011f78 <__strtok_r+0x4c>
 8011f5e:	b915      	cbnz	r5, 8011f66 <__strtok_r+0x3a>
 8011f60:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011f64:	460e      	mov	r6, r1
 8011f66:	f816 5b01 	ldrb.w	r5, [r6], #1
 8011f6a:	42ab      	cmp	r3, r5
 8011f6c:	d1f7      	bne.n	8011f5e <__strtok_r+0x32>
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d0f3      	beq.n	8011f5a <__strtok_r+0x2e>
 8011f72:	2300      	movs	r3, #0
 8011f74:	f804 3c01 	strb.w	r3, [r4, #-1]
 8011f78:	6014      	str	r4, [r2, #0]
 8011f7a:	e7ed      	b.n	8011f58 <__strtok_r+0x2c>

08011f7c <_localeconv_r>:
 8011f7c:	4800      	ldr	r0, [pc, #0]	@ (8011f80 <_localeconv_r+0x4>)
 8011f7e:	4770      	bx	lr
 8011f80:	2000011c 	.word	0x2000011c

08011f84 <_close_r>:
 8011f84:	b538      	push	{r3, r4, r5, lr}
 8011f86:	4d06      	ldr	r5, [pc, #24]	@ (8011fa0 <_close_r+0x1c>)
 8011f88:	2300      	movs	r3, #0
 8011f8a:	4604      	mov	r4, r0
 8011f8c:	4608      	mov	r0, r1
 8011f8e:	602b      	str	r3, [r5, #0]
 8011f90:	f7f7 ff2b 	bl	8009dea <_close>
 8011f94:	1c43      	adds	r3, r0, #1
 8011f96:	d102      	bne.n	8011f9e <_close_r+0x1a>
 8011f98:	682b      	ldr	r3, [r5, #0]
 8011f9a:	b103      	cbz	r3, 8011f9e <_close_r+0x1a>
 8011f9c:	6023      	str	r3, [r4, #0]
 8011f9e:	bd38      	pop	{r3, r4, r5, pc}
 8011fa0:	20007184 	.word	0x20007184

08011fa4 <_lseek_r>:
 8011fa4:	b538      	push	{r3, r4, r5, lr}
 8011fa6:	4d07      	ldr	r5, [pc, #28]	@ (8011fc4 <_lseek_r+0x20>)
 8011fa8:	4604      	mov	r4, r0
 8011faa:	4608      	mov	r0, r1
 8011fac:	4611      	mov	r1, r2
 8011fae:	2200      	movs	r2, #0
 8011fb0:	602a      	str	r2, [r5, #0]
 8011fb2:	461a      	mov	r2, r3
 8011fb4:	f7f7 ff40 	bl	8009e38 <_lseek>
 8011fb8:	1c43      	adds	r3, r0, #1
 8011fba:	d102      	bne.n	8011fc2 <_lseek_r+0x1e>
 8011fbc:	682b      	ldr	r3, [r5, #0]
 8011fbe:	b103      	cbz	r3, 8011fc2 <_lseek_r+0x1e>
 8011fc0:	6023      	str	r3, [r4, #0]
 8011fc2:	bd38      	pop	{r3, r4, r5, pc}
 8011fc4:	20007184 	.word	0x20007184

08011fc8 <_read_r>:
 8011fc8:	b538      	push	{r3, r4, r5, lr}
 8011fca:	4d07      	ldr	r5, [pc, #28]	@ (8011fe8 <_read_r+0x20>)
 8011fcc:	4604      	mov	r4, r0
 8011fce:	4608      	mov	r0, r1
 8011fd0:	4611      	mov	r1, r2
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	602a      	str	r2, [r5, #0]
 8011fd6:	461a      	mov	r2, r3
 8011fd8:	f7f7 fece 	bl	8009d78 <_read>
 8011fdc:	1c43      	adds	r3, r0, #1
 8011fde:	d102      	bne.n	8011fe6 <_read_r+0x1e>
 8011fe0:	682b      	ldr	r3, [r5, #0]
 8011fe2:	b103      	cbz	r3, 8011fe6 <_read_r+0x1e>
 8011fe4:	6023      	str	r3, [r4, #0]
 8011fe6:	bd38      	pop	{r3, r4, r5, pc}
 8011fe8:	20007184 	.word	0x20007184

08011fec <_write_r>:
 8011fec:	b538      	push	{r3, r4, r5, lr}
 8011fee:	4d07      	ldr	r5, [pc, #28]	@ (801200c <_write_r+0x20>)
 8011ff0:	4604      	mov	r4, r0
 8011ff2:	4608      	mov	r0, r1
 8011ff4:	4611      	mov	r1, r2
 8011ff6:	2200      	movs	r2, #0
 8011ff8:	602a      	str	r2, [r5, #0]
 8011ffa:	461a      	mov	r2, r3
 8011ffc:	f7f7 fed9 	bl	8009db2 <_write>
 8012000:	1c43      	adds	r3, r0, #1
 8012002:	d102      	bne.n	801200a <_write_r+0x1e>
 8012004:	682b      	ldr	r3, [r5, #0]
 8012006:	b103      	cbz	r3, 801200a <_write_r+0x1e>
 8012008:	6023      	str	r3, [r4, #0]
 801200a:	bd38      	pop	{r3, r4, r5, pc}
 801200c:	20007184 	.word	0x20007184

08012010 <__errno>:
 8012010:	4b01      	ldr	r3, [pc, #4]	@ (8012018 <__errno+0x8>)
 8012012:	6818      	ldr	r0, [r3, #0]
 8012014:	4770      	bx	lr
 8012016:	bf00      	nop
 8012018:	20000198 	.word	0x20000198

0801201c <__libc_init_array>:
 801201c:	b570      	push	{r4, r5, r6, lr}
 801201e:	4d0d      	ldr	r5, [pc, #52]	@ (8012054 <__libc_init_array+0x38>)
 8012020:	4c0d      	ldr	r4, [pc, #52]	@ (8012058 <__libc_init_array+0x3c>)
 8012022:	1b64      	subs	r4, r4, r5
 8012024:	10a4      	asrs	r4, r4, #2
 8012026:	2600      	movs	r6, #0
 8012028:	42a6      	cmp	r6, r4
 801202a:	d109      	bne.n	8012040 <__libc_init_array+0x24>
 801202c:	4d0b      	ldr	r5, [pc, #44]	@ (801205c <__libc_init_array+0x40>)
 801202e:	4c0c      	ldr	r4, [pc, #48]	@ (8012060 <__libc_init_array+0x44>)
 8012030:	f004 f87a 	bl	8016128 <_init>
 8012034:	1b64      	subs	r4, r4, r5
 8012036:	10a4      	asrs	r4, r4, #2
 8012038:	2600      	movs	r6, #0
 801203a:	42a6      	cmp	r6, r4
 801203c:	d105      	bne.n	801204a <__libc_init_array+0x2e>
 801203e:	bd70      	pop	{r4, r5, r6, pc}
 8012040:	f855 3b04 	ldr.w	r3, [r5], #4
 8012044:	4798      	blx	r3
 8012046:	3601      	adds	r6, #1
 8012048:	e7ee      	b.n	8012028 <__libc_init_array+0xc>
 801204a:	f855 3b04 	ldr.w	r3, [r5], #4
 801204e:	4798      	blx	r3
 8012050:	3601      	adds	r6, #1
 8012052:	e7f2      	b.n	801203a <__libc_init_array+0x1e>
 8012054:	08016d28 	.word	0x08016d28
 8012058:	08016d28 	.word	0x08016d28
 801205c:	08016d28 	.word	0x08016d28
 8012060:	08016d2c 	.word	0x08016d2c

08012064 <__retarget_lock_init_recursive>:
 8012064:	4770      	bx	lr

08012066 <__retarget_lock_acquire_recursive>:
 8012066:	4770      	bx	lr

08012068 <__retarget_lock_release_recursive>:
 8012068:	4770      	bx	lr

0801206a <memcpy>:
 801206a:	440a      	add	r2, r1
 801206c:	4291      	cmp	r1, r2
 801206e:	f100 33ff 	add.w	r3, r0, #4294967295
 8012072:	d100      	bne.n	8012076 <memcpy+0xc>
 8012074:	4770      	bx	lr
 8012076:	b510      	push	{r4, lr}
 8012078:	f811 4b01 	ldrb.w	r4, [r1], #1
 801207c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012080:	4291      	cmp	r1, r2
 8012082:	d1f9      	bne.n	8012078 <memcpy+0xe>
 8012084:	bd10      	pop	{r4, pc}
	...

08012088 <nan>:
 8012088:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012090 <nan+0x8>
 801208c:	4770      	bx	lr
 801208e:	bf00      	nop
 8012090:	00000000 	.word	0x00000000
 8012094:	7ff80000 	.word	0x7ff80000

08012098 <nanf>:
 8012098:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80120a0 <nanf+0x8>
 801209c:	4770      	bx	lr
 801209e:	bf00      	nop
 80120a0:	7fc00000 	.word	0x7fc00000

080120a4 <__assert_func>:
 80120a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80120a6:	4614      	mov	r4, r2
 80120a8:	461a      	mov	r2, r3
 80120aa:	4b09      	ldr	r3, [pc, #36]	@ (80120d0 <__assert_func+0x2c>)
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	4605      	mov	r5, r0
 80120b0:	68d8      	ldr	r0, [r3, #12]
 80120b2:	b954      	cbnz	r4, 80120ca <__assert_func+0x26>
 80120b4:	4b07      	ldr	r3, [pc, #28]	@ (80120d4 <__assert_func+0x30>)
 80120b6:	461c      	mov	r4, r3
 80120b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80120bc:	9100      	str	r1, [sp, #0]
 80120be:	462b      	mov	r3, r5
 80120c0:	4905      	ldr	r1, [pc, #20]	@ (80120d8 <__assert_func+0x34>)
 80120c2:	f002 f9e3 	bl	801448c <fiprintf>
 80120c6:	f002 fa1d 	bl	8014504 <abort>
 80120ca:	4b04      	ldr	r3, [pc, #16]	@ (80120dc <__assert_func+0x38>)
 80120cc:	e7f4      	b.n	80120b8 <__assert_func+0x14>
 80120ce:	bf00      	nop
 80120d0:	20000198 	.word	0x20000198
 80120d4:	080167bd 	.word	0x080167bd
 80120d8:	0801678f 	.word	0x0801678f
 80120dc:	08016782 	.word	0x08016782

080120e0 <quorem>:
 80120e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120e4:	6903      	ldr	r3, [r0, #16]
 80120e6:	690c      	ldr	r4, [r1, #16]
 80120e8:	42a3      	cmp	r3, r4
 80120ea:	4607      	mov	r7, r0
 80120ec:	db7e      	blt.n	80121ec <quorem+0x10c>
 80120ee:	3c01      	subs	r4, #1
 80120f0:	f101 0814 	add.w	r8, r1, #20
 80120f4:	00a3      	lsls	r3, r4, #2
 80120f6:	f100 0514 	add.w	r5, r0, #20
 80120fa:	9300      	str	r3, [sp, #0]
 80120fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012100:	9301      	str	r3, [sp, #4]
 8012102:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012106:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801210a:	3301      	adds	r3, #1
 801210c:	429a      	cmp	r2, r3
 801210e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012112:	fbb2 f6f3 	udiv	r6, r2, r3
 8012116:	d32e      	bcc.n	8012176 <quorem+0x96>
 8012118:	f04f 0a00 	mov.w	sl, #0
 801211c:	46c4      	mov	ip, r8
 801211e:	46ae      	mov	lr, r5
 8012120:	46d3      	mov	fp, sl
 8012122:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012126:	b298      	uxth	r0, r3
 8012128:	fb06 a000 	mla	r0, r6, r0, sl
 801212c:	0c02      	lsrs	r2, r0, #16
 801212e:	0c1b      	lsrs	r3, r3, #16
 8012130:	fb06 2303 	mla	r3, r6, r3, r2
 8012134:	f8de 2000 	ldr.w	r2, [lr]
 8012138:	b280      	uxth	r0, r0
 801213a:	b292      	uxth	r2, r2
 801213c:	1a12      	subs	r2, r2, r0
 801213e:	445a      	add	r2, fp
 8012140:	f8de 0000 	ldr.w	r0, [lr]
 8012144:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012148:	b29b      	uxth	r3, r3
 801214a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801214e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012152:	b292      	uxth	r2, r2
 8012154:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012158:	45e1      	cmp	r9, ip
 801215a:	f84e 2b04 	str.w	r2, [lr], #4
 801215e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012162:	d2de      	bcs.n	8012122 <quorem+0x42>
 8012164:	9b00      	ldr	r3, [sp, #0]
 8012166:	58eb      	ldr	r3, [r5, r3]
 8012168:	b92b      	cbnz	r3, 8012176 <quorem+0x96>
 801216a:	9b01      	ldr	r3, [sp, #4]
 801216c:	3b04      	subs	r3, #4
 801216e:	429d      	cmp	r5, r3
 8012170:	461a      	mov	r2, r3
 8012172:	d32f      	bcc.n	80121d4 <quorem+0xf4>
 8012174:	613c      	str	r4, [r7, #16]
 8012176:	4638      	mov	r0, r7
 8012178:	f001 fd0e 	bl	8013b98 <__mcmp>
 801217c:	2800      	cmp	r0, #0
 801217e:	db25      	blt.n	80121cc <quorem+0xec>
 8012180:	4629      	mov	r1, r5
 8012182:	2000      	movs	r0, #0
 8012184:	f858 2b04 	ldr.w	r2, [r8], #4
 8012188:	f8d1 c000 	ldr.w	ip, [r1]
 801218c:	fa1f fe82 	uxth.w	lr, r2
 8012190:	fa1f f38c 	uxth.w	r3, ip
 8012194:	eba3 030e 	sub.w	r3, r3, lr
 8012198:	4403      	add	r3, r0
 801219a:	0c12      	lsrs	r2, r2, #16
 801219c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80121a0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80121a4:	b29b      	uxth	r3, r3
 80121a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80121aa:	45c1      	cmp	r9, r8
 80121ac:	f841 3b04 	str.w	r3, [r1], #4
 80121b0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80121b4:	d2e6      	bcs.n	8012184 <quorem+0xa4>
 80121b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80121ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80121be:	b922      	cbnz	r2, 80121ca <quorem+0xea>
 80121c0:	3b04      	subs	r3, #4
 80121c2:	429d      	cmp	r5, r3
 80121c4:	461a      	mov	r2, r3
 80121c6:	d30b      	bcc.n	80121e0 <quorem+0x100>
 80121c8:	613c      	str	r4, [r7, #16]
 80121ca:	3601      	adds	r6, #1
 80121cc:	4630      	mov	r0, r6
 80121ce:	b003      	add	sp, #12
 80121d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121d4:	6812      	ldr	r2, [r2, #0]
 80121d6:	3b04      	subs	r3, #4
 80121d8:	2a00      	cmp	r2, #0
 80121da:	d1cb      	bne.n	8012174 <quorem+0x94>
 80121dc:	3c01      	subs	r4, #1
 80121de:	e7c6      	b.n	801216e <quorem+0x8e>
 80121e0:	6812      	ldr	r2, [r2, #0]
 80121e2:	3b04      	subs	r3, #4
 80121e4:	2a00      	cmp	r2, #0
 80121e6:	d1ef      	bne.n	80121c8 <quorem+0xe8>
 80121e8:	3c01      	subs	r4, #1
 80121ea:	e7ea      	b.n	80121c2 <quorem+0xe2>
 80121ec:	2000      	movs	r0, #0
 80121ee:	e7ee      	b.n	80121ce <quorem+0xee>

080121f0 <_dtoa_r>:
 80121f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121f4:	69c7      	ldr	r7, [r0, #28]
 80121f6:	b099      	sub	sp, #100	@ 0x64
 80121f8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80121fc:	ec55 4b10 	vmov	r4, r5, d0
 8012200:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8012202:	9109      	str	r1, [sp, #36]	@ 0x24
 8012204:	4683      	mov	fp, r0
 8012206:	920e      	str	r2, [sp, #56]	@ 0x38
 8012208:	9313      	str	r3, [sp, #76]	@ 0x4c
 801220a:	b97f      	cbnz	r7, 801222c <_dtoa_r+0x3c>
 801220c:	2010      	movs	r0, #16
 801220e:	f001 f937 	bl	8013480 <malloc>
 8012212:	4602      	mov	r2, r0
 8012214:	f8cb 001c 	str.w	r0, [fp, #28]
 8012218:	b920      	cbnz	r0, 8012224 <_dtoa_r+0x34>
 801221a:	4ba7      	ldr	r3, [pc, #668]	@ (80124b8 <_dtoa_r+0x2c8>)
 801221c:	21ef      	movs	r1, #239	@ 0xef
 801221e:	48a7      	ldr	r0, [pc, #668]	@ (80124bc <_dtoa_r+0x2cc>)
 8012220:	f7ff ff40 	bl	80120a4 <__assert_func>
 8012224:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012228:	6007      	str	r7, [r0, #0]
 801222a:	60c7      	str	r7, [r0, #12]
 801222c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012230:	6819      	ldr	r1, [r3, #0]
 8012232:	b159      	cbz	r1, 801224c <_dtoa_r+0x5c>
 8012234:	685a      	ldr	r2, [r3, #4]
 8012236:	604a      	str	r2, [r1, #4]
 8012238:	2301      	movs	r3, #1
 801223a:	4093      	lsls	r3, r2
 801223c:	608b      	str	r3, [r1, #8]
 801223e:	4658      	mov	r0, fp
 8012240:	f001 fa26 	bl	8013690 <_Bfree>
 8012244:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012248:	2200      	movs	r2, #0
 801224a:	601a      	str	r2, [r3, #0]
 801224c:	1e2b      	subs	r3, r5, #0
 801224e:	bfb9      	ittee	lt
 8012250:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012254:	9303      	strlt	r3, [sp, #12]
 8012256:	2300      	movge	r3, #0
 8012258:	6033      	strge	r3, [r6, #0]
 801225a:	9f03      	ldr	r7, [sp, #12]
 801225c:	4b98      	ldr	r3, [pc, #608]	@ (80124c0 <_dtoa_r+0x2d0>)
 801225e:	bfbc      	itt	lt
 8012260:	2201      	movlt	r2, #1
 8012262:	6032      	strlt	r2, [r6, #0]
 8012264:	43bb      	bics	r3, r7
 8012266:	d112      	bne.n	801228e <_dtoa_r+0x9e>
 8012268:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801226a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801226e:	6013      	str	r3, [r2, #0]
 8012270:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012274:	4323      	orrs	r3, r4
 8012276:	f000 854d 	beq.w	8012d14 <_dtoa_r+0xb24>
 801227a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801227c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80124d4 <_dtoa_r+0x2e4>
 8012280:	2b00      	cmp	r3, #0
 8012282:	f000 854f 	beq.w	8012d24 <_dtoa_r+0xb34>
 8012286:	f10a 0303 	add.w	r3, sl, #3
 801228a:	f000 bd49 	b.w	8012d20 <_dtoa_r+0xb30>
 801228e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012292:	2200      	movs	r2, #0
 8012294:	ec51 0b17 	vmov	r0, r1, d7
 8012298:	2300      	movs	r3, #0
 801229a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801229e:	f7ee fc33 	bl	8000b08 <__aeabi_dcmpeq>
 80122a2:	4680      	mov	r8, r0
 80122a4:	b158      	cbz	r0, 80122be <_dtoa_r+0xce>
 80122a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80122a8:	2301      	movs	r3, #1
 80122aa:	6013      	str	r3, [r2, #0]
 80122ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80122ae:	b113      	cbz	r3, 80122b6 <_dtoa_r+0xc6>
 80122b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80122b2:	4b84      	ldr	r3, [pc, #528]	@ (80124c4 <_dtoa_r+0x2d4>)
 80122b4:	6013      	str	r3, [r2, #0]
 80122b6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80124d8 <_dtoa_r+0x2e8>
 80122ba:	f000 bd33 	b.w	8012d24 <_dtoa_r+0xb34>
 80122be:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80122c2:	aa16      	add	r2, sp, #88	@ 0x58
 80122c4:	a917      	add	r1, sp, #92	@ 0x5c
 80122c6:	4658      	mov	r0, fp
 80122c8:	f001 fd86 	bl	8013dd8 <__d2b>
 80122cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80122d0:	4681      	mov	r9, r0
 80122d2:	2e00      	cmp	r6, #0
 80122d4:	d077      	beq.n	80123c6 <_dtoa_r+0x1d6>
 80122d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80122d8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80122dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80122e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80122e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80122e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80122ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80122f0:	4619      	mov	r1, r3
 80122f2:	2200      	movs	r2, #0
 80122f4:	4b74      	ldr	r3, [pc, #464]	@ (80124c8 <_dtoa_r+0x2d8>)
 80122f6:	f7ed ffe7 	bl	80002c8 <__aeabi_dsub>
 80122fa:	a369      	add	r3, pc, #420	@ (adr r3, 80124a0 <_dtoa_r+0x2b0>)
 80122fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012300:	f7ee f99a 	bl	8000638 <__aeabi_dmul>
 8012304:	a368      	add	r3, pc, #416	@ (adr r3, 80124a8 <_dtoa_r+0x2b8>)
 8012306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801230a:	f7ed ffdf 	bl	80002cc <__adddf3>
 801230e:	4604      	mov	r4, r0
 8012310:	4630      	mov	r0, r6
 8012312:	460d      	mov	r5, r1
 8012314:	f7ee f926 	bl	8000564 <__aeabi_i2d>
 8012318:	a365      	add	r3, pc, #404	@ (adr r3, 80124b0 <_dtoa_r+0x2c0>)
 801231a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801231e:	f7ee f98b 	bl	8000638 <__aeabi_dmul>
 8012322:	4602      	mov	r2, r0
 8012324:	460b      	mov	r3, r1
 8012326:	4620      	mov	r0, r4
 8012328:	4629      	mov	r1, r5
 801232a:	f7ed ffcf 	bl	80002cc <__adddf3>
 801232e:	4604      	mov	r4, r0
 8012330:	460d      	mov	r5, r1
 8012332:	f7ee fc31 	bl	8000b98 <__aeabi_d2iz>
 8012336:	2200      	movs	r2, #0
 8012338:	4607      	mov	r7, r0
 801233a:	2300      	movs	r3, #0
 801233c:	4620      	mov	r0, r4
 801233e:	4629      	mov	r1, r5
 8012340:	f7ee fbec 	bl	8000b1c <__aeabi_dcmplt>
 8012344:	b140      	cbz	r0, 8012358 <_dtoa_r+0x168>
 8012346:	4638      	mov	r0, r7
 8012348:	f7ee f90c 	bl	8000564 <__aeabi_i2d>
 801234c:	4622      	mov	r2, r4
 801234e:	462b      	mov	r3, r5
 8012350:	f7ee fbda 	bl	8000b08 <__aeabi_dcmpeq>
 8012354:	b900      	cbnz	r0, 8012358 <_dtoa_r+0x168>
 8012356:	3f01      	subs	r7, #1
 8012358:	2f16      	cmp	r7, #22
 801235a:	d851      	bhi.n	8012400 <_dtoa_r+0x210>
 801235c:	4b5b      	ldr	r3, [pc, #364]	@ (80124cc <_dtoa_r+0x2dc>)
 801235e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012366:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801236a:	f7ee fbd7 	bl	8000b1c <__aeabi_dcmplt>
 801236e:	2800      	cmp	r0, #0
 8012370:	d048      	beq.n	8012404 <_dtoa_r+0x214>
 8012372:	3f01      	subs	r7, #1
 8012374:	2300      	movs	r3, #0
 8012376:	9312      	str	r3, [sp, #72]	@ 0x48
 8012378:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801237a:	1b9b      	subs	r3, r3, r6
 801237c:	1e5a      	subs	r2, r3, #1
 801237e:	bf44      	itt	mi
 8012380:	f1c3 0801 	rsbmi	r8, r3, #1
 8012384:	2300      	movmi	r3, #0
 8012386:	9208      	str	r2, [sp, #32]
 8012388:	bf54      	ite	pl
 801238a:	f04f 0800 	movpl.w	r8, #0
 801238e:	9308      	strmi	r3, [sp, #32]
 8012390:	2f00      	cmp	r7, #0
 8012392:	db39      	blt.n	8012408 <_dtoa_r+0x218>
 8012394:	9b08      	ldr	r3, [sp, #32]
 8012396:	970f      	str	r7, [sp, #60]	@ 0x3c
 8012398:	443b      	add	r3, r7
 801239a:	9308      	str	r3, [sp, #32]
 801239c:	2300      	movs	r3, #0
 801239e:	930a      	str	r3, [sp, #40]	@ 0x28
 80123a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80123a2:	2b09      	cmp	r3, #9
 80123a4:	d864      	bhi.n	8012470 <_dtoa_r+0x280>
 80123a6:	2b05      	cmp	r3, #5
 80123a8:	bfc4      	itt	gt
 80123aa:	3b04      	subgt	r3, #4
 80123ac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80123ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80123b0:	f1a3 0302 	sub.w	r3, r3, #2
 80123b4:	bfcc      	ite	gt
 80123b6:	2400      	movgt	r4, #0
 80123b8:	2401      	movle	r4, #1
 80123ba:	2b03      	cmp	r3, #3
 80123bc:	d863      	bhi.n	8012486 <_dtoa_r+0x296>
 80123be:	e8df f003 	tbb	[pc, r3]
 80123c2:	372a      	.short	0x372a
 80123c4:	5535      	.short	0x5535
 80123c6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80123ca:	441e      	add	r6, r3
 80123cc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80123d0:	2b20      	cmp	r3, #32
 80123d2:	bfc1      	itttt	gt
 80123d4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80123d8:	409f      	lslgt	r7, r3
 80123da:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80123de:	fa24 f303 	lsrgt.w	r3, r4, r3
 80123e2:	bfd6      	itet	le
 80123e4:	f1c3 0320 	rsble	r3, r3, #32
 80123e8:	ea47 0003 	orrgt.w	r0, r7, r3
 80123ec:	fa04 f003 	lslle.w	r0, r4, r3
 80123f0:	f7ee f8a8 	bl	8000544 <__aeabi_ui2d>
 80123f4:	2201      	movs	r2, #1
 80123f6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80123fa:	3e01      	subs	r6, #1
 80123fc:	9214      	str	r2, [sp, #80]	@ 0x50
 80123fe:	e777      	b.n	80122f0 <_dtoa_r+0x100>
 8012400:	2301      	movs	r3, #1
 8012402:	e7b8      	b.n	8012376 <_dtoa_r+0x186>
 8012404:	9012      	str	r0, [sp, #72]	@ 0x48
 8012406:	e7b7      	b.n	8012378 <_dtoa_r+0x188>
 8012408:	427b      	negs	r3, r7
 801240a:	930a      	str	r3, [sp, #40]	@ 0x28
 801240c:	2300      	movs	r3, #0
 801240e:	eba8 0807 	sub.w	r8, r8, r7
 8012412:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012414:	e7c4      	b.n	80123a0 <_dtoa_r+0x1b0>
 8012416:	2300      	movs	r3, #0
 8012418:	930b      	str	r3, [sp, #44]	@ 0x2c
 801241a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801241c:	2b00      	cmp	r3, #0
 801241e:	dc35      	bgt.n	801248c <_dtoa_r+0x29c>
 8012420:	2301      	movs	r3, #1
 8012422:	9300      	str	r3, [sp, #0]
 8012424:	9307      	str	r3, [sp, #28]
 8012426:	461a      	mov	r2, r3
 8012428:	920e      	str	r2, [sp, #56]	@ 0x38
 801242a:	e00b      	b.n	8012444 <_dtoa_r+0x254>
 801242c:	2301      	movs	r3, #1
 801242e:	e7f3      	b.n	8012418 <_dtoa_r+0x228>
 8012430:	2300      	movs	r3, #0
 8012432:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012434:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012436:	18fb      	adds	r3, r7, r3
 8012438:	9300      	str	r3, [sp, #0]
 801243a:	3301      	adds	r3, #1
 801243c:	2b01      	cmp	r3, #1
 801243e:	9307      	str	r3, [sp, #28]
 8012440:	bfb8      	it	lt
 8012442:	2301      	movlt	r3, #1
 8012444:	f8db 001c 	ldr.w	r0, [fp, #28]
 8012448:	2100      	movs	r1, #0
 801244a:	2204      	movs	r2, #4
 801244c:	f102 0514 	add.w	r5, r2, #20
 8012450:	429d      	cmp	r5, r3
 8012452:	d91f      	bls.n	8012494 <_dtoa_r+0x2a4>
 8012454:	6041      	str	r1, [r0, #4]
 8012456:	4658      	mov	r0, fp
 8012458:	f001 f8da 	bl	8013610 <_Balloc>
 801245c:	4682      	mov	sl, r0
 801245e:	2800      	cmp	r0, #0
 8012460:	d13c      	bne.n	80124dc <_dtoa_r+0x2ec>
 8012462:	4b1b      	ldr	r3, [pc, #108]	@ (80124d0 <_dtoa_r+0x2e0>)
 8012464:	4602      	mov	r2, r0
 8012466:	f240 11af 	movw	r1, #431	@ 0x1af
 801246a:	e6d8      	b.n	801221e <_dtoa_r+0x2e>
 801246c:	2301      	movs	r3, #1
 801246e:	e7e0      	b.n	8012432 <_dtoa_r+0x242>
 8012470:	2401      	movs	r4, #1
 8012472:	2300      	movs	r3, #0
 8012474:	9309      	str	r3, [sp, #36]	@ 0x24
 8012476:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012478:	f04f 33ff 	mov.w	r3, #4294967295
 801247c:	9300      	str	r3, [sp, #0]
 801247e:	9307      	str	r3, [sp, #28]
 8012480:	2200      	movs	r2, #0
 8012482:	2312      	movs	r3, #18
 8012484:	e7d0      	b.n	8012428 <_dtoa_r+0x238>
 8012486:	2301      	movs	r3, #1
 8012488:	930b      	str	r3, [sp, #44]	@ 0x2c
 801248a:	e7f5      	b.n	8012478 <_dtoa_r+0x288>
 801248c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801248e:	9300      	str	r3, [sp, #0]
 8012490:	9307      	str	r3, [sp, #28]
 8012492:	e7d7      	b.n	8012444 <_dtoa_r+0x254>
 8012494:	3101      	adds	r1, #1
 8012496:	0052      	lsls	r2, r2, #1
 8012498:	e7d8      	b.n	801244c <_dtoa_r+0x25c>
 801249a:	bf00      	nop
 801249c:	f3af 8000 	nop.w
 80124a0:	636f4361 	.word	0x636f4361
 80124a4:	3fd287a7 	.word	0x3fd287a7
 80124a8:	8b60c8b3 	.word	0x8b60c8b3
 80124ac:	3fc68a28 	.word	0x3fc68a28
 80124b0:	509f79fb 	.word	0x509f79fb
 80124b4:	3fd34413 	.word	0x3fd34413
 80124b8:	08016709 	.word	0x08016709
 80124bc:	080167cb 	.word	0x080167cb
 80124c0:	7ff00000 	.word	0x7ff00000
 80124c4:	080166e1 	.word	0x080166e1
 80124c8:	3ff80000 	.word	0x3ff80000
 80124cc:	08016928 	.word	0x08016928
 80124d0:	08016823 	.word	0x08016823
 80124d4:	080167c7 	.word	0x080167c7
 80124d8:	080166e0 	.word	0x080166e0
 80124dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80124e0:	6018      	str	r0, [r3, #0]
 80124e2:	9b07      	ldr	r3, [sp, #28]
 80124e4:	2b0e      	cmp	r3, #14
 80124e6:	f200 80a4 	bhi.w	8012632 <_dtoa_r+0x442>
 80124ea:	2c00      	cmp	r4, #0
 80124ec:	f000 80a1 	beq.w	8012632 <_dtoa_r+0x442>
 80124f0:	2f00      	cmp	r7, #0
 80124f2:	dd33      	ble.n	801255c <_dtoa_r+0x36c>
 80124f4:	4bad      	ldr	r3, [pc, #692]	@ (80127ac <_dtoa_r+0x5bc>)
 80124f6:	f007 020f 	and.w	r2, r7, #15
 80124fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80124fe:	ed93 7b00 	vldr	d7, [r3]
 8012502:	05f8      	lsls	r0, r7, #23
 8012504:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012508:	ea4f 1427 	mov.w	r4, r7, asr #4
 801250c:	d516      	bpl.n	801253c <_dtoa_r+0x34c>
 801250e:	4ba8      	ldr	r3, [pc, #672]	@ (80127b0 <_dtoa_r+0x5c0>)
 8012510:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012514:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012518:	f7ee f9b8 	bl	800088c <__aeabi_ddiv>
 801251c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012520:	f004 040f 	and.w	r4, r4, #15
 8012524:	2603      	movs	r6, #3
 8012526:	4da2      	ldr	r5, [pc, #648]	@ (80127b0 <_dtoa_r+0x5c0>)
 8012528:	b954      	cbnz	r4, 8012540 <_dtoa_r+0x350>
 801252a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801252e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012532:	f7ee f9ab 	bl	800088c <__aeabi_ddiv>
 8012536:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801253a:	e028      	b.n	801258e <_dtoa_r+0x39e>
 801253c:	2602      	movs	r6, #2
 801253e:	e7f2      	b.n	8012526 <_dtoa_r+0x336>
 8012540:	07e1      	lsls	r1, r4, #31
 8012542:	d508      	bpl.n	8012556 <_dtoa_r+0x366>
 8012544:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012548:	e9d5 2300 	ldrd	r2, r3, [r5]
 801254c:	f7ee f874 	bl	8000638 <__aeabi_dmul>
 8012550:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012554:	3601      	adds	r6, #1
 8012556:	1064      	asrs	r4, r4, #1
 8012558:	3508      	adds	r5, #8
 801255a:	e7e5      	b.n	8012528 <_dtoa_r+0x338>
 801255c:	f000 80d2 	beq.w	8012704 <_dtoa_r+0x514>
 8012560:	427c      	negs	r4, r7
 8012562:	4b92      	ldr	r3, [pc, #584]	@ (80127ac <_dtoa_r+0x5bc>)
 8012564:	4d92      	ldr	r5, [pc, #584]	@ (80127b0 <_dtoa_r+0x5c0>)
 8012566:	f004 020f 	and.w	r2, r4, #15
 801256a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801256e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012572:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012576:	f7ee f85f 	bl	8000638 <__aeabi_dmul>
 801257a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801257e:	1124      	asrs	r4, r4, #4
 8012580:	2300      	movs	r3, #0
 8012582:	2602      	movs	r6, #2
 8012584:	2c00      	cmp	r4, #0
 8012586:	f040 80b2 	bne.w	80126ee <_dtoa_r+0x4fe>
 801258a:	2b00      	cmp	r3, #0
 801258c:	d1d3      	bne.n	8012536 <_dtoa_r+0x346>
 801258e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012590:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012594:	2b00      	cmp	r3, #0
 8012596:	f000 80b7 	beq.w	8012708 <_dtoa_r+0x518>
 801259a:	4b86      	ldr	r3, [pc, #536]	@ (80127b4 <_dtoa_r+0x5c4>)
 801259c:	2200      	movs	r2, #0
 801259e:	4620      	mov	r0, r4
 80125a0:	4629      	mov	r1, r5
 80125a2:	f7ee fabb 	bl	8000b1c <__aeabi_dcmplt>
 80125a6:	2800      	cmp	r0, #0
 80125a8:	f000 80ae 	beq.w	8012708 <_dtoa_r+0x518>
 80125ac:	9b07      	ldr	r3, [sp, #28]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	f000 80aa 	beq.w	8012708 <_dtoa_r+0x518>
 80125b4:	9b00      	ldr	r3, [sp, #0]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	dd37      	ble.n	801262a <_dtoa_r+0x43a>
 80125ba:	1e7b      	subs	r3, r7, #1
 80125bc:	9304      	str	r3, [sp, #16]
 80125be:	4620      	mov	r0, r4
 80125c0:	4b7d      	ldr	r3, [pc, #500]	@ (80127b8 <_dtoa_r+0x5c8>)
 80125c2:	2200      	movs	r2, #0
 80125c4:	4629      	mov	r1, r5
 80125c6:	f7ee f837 	bl	8000638 <__aeabi_dmul>
 80125ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80125ce:	9c00      	ldr	r4, [sp, #0]
 80125d0:	3601      	adds	r6, #1
 80125d2:	4630      	mov	r0, r6
 80125d4:	f7ed ffc6 	bl	8000564 <__aeabi_i2d>
 80125d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80125dc:	f7ee f82c 	bl	8000638 <__aeabi_dmul>
 80125e0:	4b76      	ldr	r3, [pc, #472]	@ (80127bc <_dtoa_r+0x5cc>)
 80125e2:	2200      	movs	r2, #0
 80125e4:	f7ed fe72 	bl	80002cc <__adddf3>
 80125e8:	4605      	mov	r5, r0
 80125ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80125ee:	2c00      	cmp	r4, #0
 80125f0:	f040 808d 	bne.w	801270e <_dtoa_r+0x51e>
 80125f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125f8:	4b71      	ldr	r3, [pc, #452]	@ (80127c0 <_dtoa_r+0x5d0>)
 80125fa:	2200      	movs	r2, #0
 80125fc:	f7ed fe64 	bl	80002c8 <__aeabi_dsub>
 8012600:	4602      	mov	r2, r0
 8012602:	460b      	mov	r3, r1
 8012604:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012608:	462a      	mov	r2, r5
 801260a:	4633      	mov	r3, r6
 801260c:	f7ee faa4 	bl	8000b58 <__aeabi_dcmpgt>
 8012610:	2800      	cmp	r0, #0
 8012612:	f040 828b 	bne.w	8012b2c <_dtoa_r+0x93c>
 8012616:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801261a:	462a      	mov	r2, r5
 801261c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012620:	f7ee fa7c 	bl	8000b1c <__aeabi_dcmplt>
 8012624:	2800      	cmp	r0, #0
 8012626:	f040 8128 	bne.w	801287a <_dtoa_r+0x68a>
 801262a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801262e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012632:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012634:	2b00      	cmp	r3, #0
 8012636:	f2c0 815a 	blt.w	80128ee <_dtoa_r+0x6fe>
 801263a:	2f0e      	cmp	r7, #14
 801263c:	f300 8157 	bgt.w	80128ee <_dtoa_r+0x6fe>
 8012640:	4b5a      	ldr	r3, [pc, #360]	@ (80127ac <_dtoa_r+0x5bc>)
 8012642:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012646:	ed93 7b00 	vldr	d7, [r3]
 801264a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801264c:	2b00      	cmp	r3, #0
 801264e:	ed8d 7b00 	vstr	d7, [sp]
 8012652:	da03      	bge.n	801265c <_dtoa_r+0x46c>
 8012654:	9b07      	ldr	r3, [sp, #28]
 8012656:	2b00      	cmp	r3, #0
 8012658:	f340 8101 	ble.w	801285e <_dtoa_r+0x66e>
 801265c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012660:	4656      	mov	r6, sl
 8012662:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012666:	4620      	mov	r0, r4
 8012668:	4629      	mov	r1, r5
 801266a:	f7ee f90f 	bl	800088c <__aeabi_ddiv>
 801266e:	f7ee fa93 	bl	8000b98 <__aeabi_d2iz>
 8012672:	4680      	mov	r8, r0
 8012674:	f7ed ff76 	bl	8000564 <__aeabi_i2d>
 8012678:	e9dd 2300 	ldrd	r2, r3, [sp]
 801267c:	f7ed ffdc 	bl	8000638 <__aeabi_dmul>
 8012680:	4602      	mov	r2, r0
 8012682:	460b      	mov	r3, r1
 8012684:	4620      	mov	r0, r4
 8012686:	4629      	mov	r1, r5
 8012688:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801268c:	f7ed fe1c 	bl	80002c8 <__aeabi_dsub>
 8012690:	f806 4b01 	strb.w	r4, [r6], #1
 8012694:	9d07      	ldr	r5, [sp, #28]
 8012696:	eba6 040a 	sub.w	r4, r6, sl
 801269a:	42a5      	cmp	r5, r4
 801269c:	4602      	mov	r2, r0
 801269e:	460b      	mov	r3, r1
 80126a0:	f040 8117 	bne.w	80128d2 <_dtoa_r+0x6e2>
 80126a4:	f7ed fe12 	bl	80002cc <__adddf3>
 80126a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80126ac:	4604      	mov	r4, r0
 80126ae:	460d      	mov	r5, r1
 80126b0:	f7ee fa52 	bl	8000b58 <__aeabi_dcmpgt>
 80126b4:	2800      	cmp	r0, #0
 80126b6:	f040 80f9 	bne.w	80128ac <_dtoa_r+0x6bc>
 80126ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80126be:	4620      	mov	r0, r4
 80126c0:	4629      	mov	r1, r5
 80126c2:	f7ee fa21 	bl	8000b08 <__aeabi_dcmpeq>
 80126c6:	b118      	cbz	r0, 80126d0 <_dtoa_r+0x4e0>
 80126c8:	f018 0f01 	tst.w	r8, #1
 80126cc:	f040 80ee 	bne.w	80128ac <_dtoa_r+0x6bc>
 80126d0:	4649      	mov	r1, r9
 80126d2:	4658      	mov	r0, fp
 80126d4:	f000 ffdc 	bl	8013690 <_Bfree>
 80126d8:	2300      	movs	r3, #0
 80126da:	7033      	strb	r3, [r6, #0]
 80126dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80126de:	3701      	adds	r7, #1
 80126e0:	601f      	str	r7, [r3, #0]
 80126e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	f000 831d 	beq.w	8012d24 <_dtoa_r+0xb34>
 80126ea:	601e      	str	r6, [r3, #0]
 80126ec:	e31a      	b.n	8012d24 <_dtoa_r+0xb34>
 80126ee:	07e2      	lsls	r2, r4, #31
 80126f0:	d505      	bpl.n	80126fe <_dtoa_r+0x50e>
 80126f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80126f6:	f7ed ff9f 	bl	8000638 <__aeabi_dmul>
 80126fa:	3601      	adds	r6, #1
 80126fc:	2301      	movs	r3, #1
 80126fe:	1064      	asrs	r4, r4, #1
 8012700:	3508      	adds	r5, #8
 8012702:	e73f      	b.n	8012584 <_dtoa_r+0x394>
 8012704:	2602      	movs	r6, #2
 8012706:	e742      	b.n	801258e <_dtoa_r+0x39e>
 8012708:	9c07      	ldr	r4, [sp, #28]
 801270a:	9704      	str	r7, [sp, #16]
 801270c:	e761      	b.n	80125d2 <_dtoa_r+0x3e2>
 801270e:	4b27      	ldr	r3, [pc, #156]	@ (80127ac <_dtoa_r+0x5bc>)
 8012710:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012712:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012716:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801271a:	4454      	add	r4, sl
 801271c:	2900      	cmp	r1, #0
 801271e:	d053      	beq.n	80127c8 <_dtoa_r+0x5d8>
 8012720:	4928      	ldr	r1, [pc, #160]	@ (80127c4 <_dtoa_r+0x5d4>)
 8012722:	2000      	movs	r0, #0
 8012724:	f7ee f8b2 	bl	800088c <__aeabi_ddiv>
 8012728:	4633      	mov	r3, r6
 801272a:	462a      	mov	r2, r5
 801272c:	f7ed fdcc 	bl	80002c8 <__aeabi_dsub>
 8012730:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012734:	4656      	mov	r6, sl
 8012736:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801273a:	f7ee fa2d 	bl	8000b98 <__aeabi_d2iz>
 801273e:	4605      	mov	r5, r0
 8012740:	f7ed ff10 	bl	8000564 <__aeabi_i2d>
 8012744:	4602      	mov	r2, r0
 8012746:	460b      	mov	r3, r1
 8012748:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801274c:	f7ed fdbc 	bl	80002c8 <__aeabi_dsub>
 8012750:	3530      	adds	r5, #48	@ 0x30
 8012752:	4602      	mov	r2, r0
 8012754:	460b      	mov	r3, r1
 8012756:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801275a:	f806 5b01 	strb.w	r5, [r6], #1
 801275e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012762:	f7ee f9db 	bl	8000b1c <__aeabi_dcmplt>
 8012766:	2800      	cmp	r0, #0
 8012768:	d171      	bne.n	801284e <_dtoa_r+0x65e>
 801276a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801276e:	4911      	ldr	r1, [pc, #68]	@ (80127b4 <_dtoa_r+0x5c4>)
 8012770:	2000      	movs	r0, #0
 8012772:	f7ed fda9 	bl	80002c8 <__aeabi_dsub>
 8012776:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801277a:	f7ee f9cf 	bl	8000b1c <__aeabi_dcmplt>
 801277e:	2800      	cmp	r0, #0
 8012780:	f040 8095 	bne.w	80128ae <_dtoa_r+0x6be>
 8012784:	42a6      	cmp	r6, r4
 8012786:	f43f af50 	beq.w	801262a <_dtoa_r+0x43a>
 801278a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801278e:	4b0a      	ldr	r3, [pc, #40]	@ (80127b8 <_dtoa_r+0x5c8>)
 8012790:	2200      	movs	r2, #0
 8012792:	f7ed ff51 	bl	8000638 <__aeabi_dmul>
 8012796:	4b08      	ldr	r3, [pc, #32]	@ (80127b8 <_dtoa_r+0x5c8>)
 8012798:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801279c:	2200      	movs	r2, #0
 801279e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80127a2:	f7ed ff49 	bl	8000638 <__aeabi_dmul>
 80127a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80127aa:	e7c4      	b.n	8012736 <_dtoa_r+0x546>
 80127ac:	08016928 	.word	0x08016928
 80127b0:	08016900 	.word	0x08016900
 80127b4:	3ff00000 	.word	0x3ff00000
 80127b8:	40240000 	.word	0x40240000
 80127bc:	401c0000 	.word	0x401c0000
 80127c0:	40140000 	.word	0x40140000
 80127c4:	3fe00000 	.word	0x3fe00000
 80127c8:	4631      	mov	r1, r6
 80127ca:	4628      	mov	r0, r5
 80127cc:	f7ed ff34 	bl	8000638 <__aeabi_dmul>
 80127d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80127d4:	9415      	str	r4, [sp, #84]	@ 0x54
 80127d6:	4656      	mov	r6, sl
 80127d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80127dc:	f7ee f9dc 	bl	8000b98 <__aeabi_d2iz>
 80127e0:	4605      	mov	r5, r0
 80127e2:	f7ed febf 	bl	8000564 <__aeabi_i2d>
 80127e6:	4602      	mov	r2, r0
 80127e8:	460b      	mov	r3, r1
 80127ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80127ee:	f7ed fd6b 	bl	80002c8 <__aeabi_dsub>
 80127f2:	3530      	adds	r5, #48	@ 0x30
 80127f4:	f806 5b01 	strb.w	r5, [r6], #1
 80127f8:	4602      	mov	r2, r0
 80127fa:	460b      	mov	r3, r1
 80127fc:	42a6      	cmp	r6, r4
 80127fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012802:	f04f 0200 	mov.w	r2, #0
 8012806:	d124      	bne.n	8012852 <_dtoa_r+0x662>
 8012808:	4bac      	ldr	r3, [pc, #688]	@ (8012abc <_dtoa_r+0x8cc>)
 801280a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801280e:	f7ed fd5d 	bl	80002cc <__adddf3>
 8012812:	4602      	mov	r2, r0
 8012814:	460b      	mov	r3, r1
 8012816:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801281a:	f7ee f99d 	bl	8000b58 <__aeabi_dcmpgt>
 801281e:	2800      	cmp	r0, #0
 8012820:	d145      	bne.n	80128ae <_dtoa_r+0x6be>
 8012822:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012826:	49a5      	ldr	r1, [pc, #660]	@ (8012abc <_dtoa_r+0x8cc>)
 8012828:	2000      	movs	r0, #0
 801282a:	f7ed fd4d 	bl	80002c8 <__aeabi_dsub>
 801282e:	4602      	mov	r2, r0
 8012830:	460b      	mov	r3, r1
 8012832:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012836:	f7ee f971 	bl	8000b1c <__aeabi_dcmplt>
 801283a:	2800      	cmp	r0, #0
 801283c:	f43f aef5 	beq.w	801262a <_dtoa_r+0x43a>
 8012840:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8012842:	1e73      	subs	r3, r6, #1
 8012844:	9315      	str	r3, [sp, #84]	@ 0x54
 8012846:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801284a:	2b30      	cmp	r3, #48	@ 0x30
 801284c:	d0f8      	beq.n	8012840 <_dtoa_r+0x650>
 801284e:	9f04      	ldr	r7, [sp, #16]
 8012850:	e73e      	b.n	80126d0 <_dtoa_r+0x4e0>
 8012852:	4b9b      	ldr	r3, [pc, #620]	@ (8012ac0 <_dtoa_r+0x8d0>)
 8012854:	f7ed fef0 	bl	8000638 <__aeabi_dmul>
 8012858:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801285c:	e7bc      	b.n	80127d8 <_dtoa_r+0x5e8>
 801285e:	d10c      	bne.n	801287a <_dtoa_r+0x68a>
 8012860:	4b98      	ldr	r3, [pc, #608]	@ (8012ac4 <_dtoa_r+0x8d4>)
 8012862:	2200      	movs	r2, #0
 8012864:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012868:	f7ed fee6 	bl	8000638 <__aeabi_dmul>
 801286c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012870:	f7ee f968 	bl	8000b44 <__aeabi_dcmpge>
 8012874:	2800      	cmp	r0, #0
 8012876:	f000 8157 	beq.w	8012b28 <_dtoa_r+0x938>
 801287a:	2400      	movs	r4, #0
 801287c:	4625      	mov	r5, r4
 801287e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012880:	43db      	mvns	r3, r3
 8012882:	9304      	str	r3, [sp, #16]
 8012884:	4656      	mov	r6, sl
 8012886:	2700      	movs	r7, #0
 8012888:	4621      	mov	r1, r4
 801288a:	4658      	mov	r0, fp
 801288c:	f000 ff00 	bl	8013690 <_Bfree>
 8012890:	2d00      	cmp	r5, #0
 8012892:	d0dc      	beq.n	801284e <_dtoa_r+0x65e>
 8012894:	b12f      	cbz	r7, 80128a2 <_dtoa_r+0x6b2>
 8012896:	42af      	cmp	r7, r5
 8012898:	d003      	beq.n	80128a2 <_dtoa_r+0x6b2>
 801289a:	4639      	mov	r1, r7
 801289c:	4658      	mov	r0, fp
 801289e:	f000 fef7 	bl	8013690 <_Bfree>
 80128a2:	4629      	mov	r1, r5
 80128a4:	4658      	mov	r0, fp
 80128a6:	f000 fef3 	bl	8013690 <_Bfree>
 80128aa:	e7d0      	b.n	801284e <_dtoa_r+0x65e>
 80128ac:	9704      	str	r7, [sp, #16]
 80128ae:	4633      	mov	r3, r6
 80128b0:	461e      	mov	r6, r3
 80128b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80128b6:	2a39      	cmp	r2, #57	@ 0x39
 80128b8:	d107      	bne.n	80128ca <_dtoa_r+0x6da>
 80128ba:	459a      	cmp	sl, r3
 80128bc:	d1f8      	bne.n	80128b0 <_dtoa_r+0x6c0>
 80128be:	9a04      	ldr	r2, [sp, #16]
 80128c0:	3201      	adds	r2, #1
 80128c2:	9204      	str	r2, [sp, #16]
 80128c4:	2230      	movs	r2, #48	@ 0x30
 80128c6:	f88a 2000 	strb.w	r2, [sl]
 80128ca:	781a      	ldrb	r2, [r3, #0]
 80128cc:	3201      	adds	r2, #1
 80128ce:	701a      	strb	r2, [r3, #0]
 80128d0:	e7bd      	b.n	801284e <_dtoa_r+0x65e>
 80128d2:	4b7b      	ldr	r3, [pc, #492]	@ (8012ac0 <_dtoa_r+0x8d0>)
 80128d4:	2200      	movs	r2, #0
 80128d6:	f7ed feaf 	bl	8000638 <__aeabi_dmul>
 80128da:	2200      	movs	r2, #0
 80128dc:	2300      	movs	r3, #0
 80128de:	4604      	mov	r4, r0
 80128e0:	460d      	mov	r5, r1
 80128e2:	f7ee f911 	bl	8000b08 <__aeabi_dcmpeq>
 80128e6:	2800      	cmp	r0, #0
 80128e8:	f43f aebb 	beq.w	8012662 <_dtoa_r+0x472>
 80128ec:	e6f0      	b.n	80126d0 <_dtoa_r+0x4e0>
 80128ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80128f0:	2a00      	cmp	r2, #0
 80128f2:	f000 80db 	beq.w	8012aac <_dtoa_r+0x8bc>
 80128f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80128f8:	2a01      	cmp	r2, #1
 80128fa:	f300 80bf 	bgt.w	8012a7c <_dtoa_r+0x88c>
 80128fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012900:	2a00      	cmp	r2, #0
 8012902:	f000 80b7 	beq.w	8012a74 <_dtoa_r+0x884>
 8012906:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801290a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801290c:	4646      	mov	r6, r8
 801290e:	9a08      	ldr	r2, [sp, #32]
 8012910:	2101      	movs	r1, #1
 8012912:	441a      	add	r2, r3
 8012914:	4658      	mov	r0, fp
 8012916:	4498      	add	r8, r3
 8012918:	9208      	str	r2, [sp, #32]
 801291a:	f000 ffb7 	bl	801388c <__i2b>
 801291e:	4605      	mov	r5, r0
 8012920:	b15e      	cbz	r6, 801293a <_dtoa_r+0x74a>
 8012922:	9b08      	ldr	r3, [sp, #32]
 8012924:	2b00      	cmp	r3, #0
 8012926:	dd08      	ble.n	801293a <_dtoa_r+0x74a>
 8012928:	42b3      	cmp	r3, r6
 801292a:	9a08      	ldr	r2, [sp, #32]
 801292c:	bfa8      	it	ge
 801292e:	4633      	movge	r3, r6
 8012930:	eba8 0803 	sub.w	r8, r8, r3
 8012934:	1af6      	subs	r6, r6, r3
 8012936:	1ad3      	subs	r3, r2, r3
 8012938:	9308      	str	r3, [sp, #32]
 801293a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801293c:	b1f3      	cbz	r3, 801297c <_dtoa_r+0x78c>
 801293e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012940:	2b00      	cmp	r3, #0
 8012942:	f000 80b7 	beq.w	8012ab4 <_dtoa_r+0x8c4>
 8012946:	b18c      	cbz	r4, 801296c <_dtoa_r+0x77c>
 8012948:	4629      	mov	r1, r5
 801294a:	4622      	mov	r2, r4
 801294c:	4658      	mov	r0, fp
 801294e:	f001 f85d 	bl	8013a0c <__pow5mult>
 8012952:	464a      	mov	r2, r9
 8012954:	4601      	mov	r1, r0
 8012956:	4605      	mov	r5, r0
 8012958:	4658      	mov	r0, fp
 801295a:	f000 ffad 	bl	80138b8 <__multiply>
 801295e:	4649      	mov	r1, r9
 8012960:	9004      	str	r0, [sp, #16]
 8012962:	4658      	mov	r0, fp
 8012964:	f000 fe94 	bl	8013690 <_Bfree>
 8012968:	9b04      	ldr	r3, [sp, #16]
 801296a:	4699      	mov	r9, r3
 801296c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801296e:	1b1a      	subs	r2, r3, r4
 8012970:	d004      	beq.n	801297c <_dtoa_r+0x78c>
 8012972:	4649      	mov	r1, r9
 8012974:	4658      	mov	r0, fp
 8012976:	f001 f849 	bl	8013a0c <__pow5mult>
 801297a:	4681      	mov	r9, r0
 801297c:	2101      	movs	r1, #1
 801297e:	4658      	mov	r0, fp
 8012980:	f000 ff84 	bl	801388c <__i2b>
 8012984:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012986:	4604      	mov	r4, r0
 8012988:	2b00      	cmp	r3, #0
 801298a:	f000 81cf 	beq.w	8012d2c <_dtoa_r+0xb3c>
 801298e:	461a      	mov	r2, r3
 8012990:	4601      	mov	r1, r0
 8012992:	4658      	mov	r0, fp
 8012994:	f001 f83a 	bl	8013a0c <__pow5mult>
 8012998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801299a:	2b01      	cmp	r3, #1
 801299c:	4604      	mov	r4, r0
 801299e:	f300 8095 	bgt.w	8012acc <_dtoa_r+0x8dc>
 80129a2:	9b02      	ldr	r3, [sp, #8]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	f040 8087 	bne.w	8012ab8 <_dtoa_r+0x8c8>
 80129aa:	9b03      	ldr	r3, [sp, #12]
 80129ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	f040 8089 	bne.w	8012ac8 <_dtoa_r+0x8d8>
 80129b6:	9b03      	ldr	r3, [sp, #12]
 80129b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80129bc:	0d1b      	lsrs	r3, r3, #20
 80129be:	051b      	lsls	r3, r3, #20
 80129c0:	b12b      	cbz	r3, 80129ce <_dtoa_r+0x7de>
 80129c2:	9b08      	ldr	r3, [sp, #32]
 80129c4:	3301      	adds	r3, #1
 80129c6:	9308      	str	r3, [sp, #32]
 80129c8:	f108 0801 	add.w	r8, r8, #1
 80129cc:	2301      	movs	r3, #1
 80129ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80129d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	f000 81b0 	beq.w	8012d38 <_dtoa_r+0xb48>
 80129d8:	6923      	ldr	r3, [r4, #16]
 80129da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80129de:	6918      	ldr	r0, [r3, #16]
 80129e0:	f000 ff08 	bl	80137f4 <__hi0bits>
 80129e4:	f1c0 0020 	rsb	r0, r0, #32
 80129e8:	9b08      	ldr	r3, [sp, #32]
 80129ea:	4418      	add	r0, r3
 80129ec:	f010 001f 	ands.w	r0, r0, #31
 80129f0:	d077      	beq.n	8012ae2 <_dtoa_r+0x8f2>
 80129f2:	f1c0 0320 	rsb	r3, r0, #32
 80129f6:	2b04      	cmp	r3, #4
 80129f8:	dd6b      	ble.n	8012ad2 <_dtoa_r+0x8e2>
 80129fa:	9b08      	ldr	r3, [sp, #32]
 80129fc:	f1c0 001c 	rsb	r0, r0, #28
 8012a00:	4403      	add	r3, r0
 8012a02:	4480      	add	r8, r0
 8012a04:	4406      	add	r6, r0
 8012a06:	9308      	str	r3, [sp, #32]
 8012a08:	f1b8 0f00 	cmp.w	r8, #0
 8012a0c:	dd05      	ble.n	8012a1a <_dtoa_r+0x82a>
 8012a0e:	4649      	mov	r1, r9
 8012a10:	4642      	mov	r2, r8
 8012a12:	4658      	mov	r0, fp
 8012a14:	f001 f854 	bl	8013ac0 <__lshift>
 8012a18:	4681      	mov	r9, r0
 8012a1a:	9b08      	ldr	r3, [sp, #32]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	dd05      	ble.n	8012a2c <_dtoa_r+0x83c>
 8012a20:	4621      	mov	r1, r4
 8012a22:	461a      	mov	r2, r3
 8012a24:	4658      	mov	r0, fp
 8012a26:	f001 f84b 	bl	8013ac0 <__lshift>
 8012a2a:	4604      	mov	r4, r0
 8012a2c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d059      	beq.n	8012ae6 <_dtoa_r+0x8f6>
 8012a32:	4621      	mov	r1, r4
 8012a34:	4648      	mov	r0, r9
 8012a36:	f001 f8af 	bl	8013b98 <__mcmp>
 8012a3a:	2800      	cmp	r0, #0
 8012a3c:	da53      	bge.n	8012ae6 <_dtoa_r+0x8f6>
 8012a3e:	1e7b      	subs	r3, r7, #1
 8012a40:	9304      	str	r3, [sp, #16]
 8012a42:	4649      	mov	r1, r9
 8012a44:	2300      	movs	r3, #0
 8012a46:	220a      	movs	r2, #10
 8012a48:	4658      	mov	r0, fp
 8012a4a:	f000 fe43 	bl	80136d4 <__multadd>
 8012a4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012a50:	4681      	mov	r9, r0
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	f000 8172 	beq.w	8012d3c <_dtoa_r+0xb4c>
 8012a58:	2300      	movs	r3, #0
 8012a5a:	4629      	mov	r1, r5
 8012a5c:	220a      	movs	r2, #10
 8012a5e:	4658      	mov	r0, fp
 8012a60:	f000 fe38 	bl	80136d4 <__multadd>
 8012a64:	9b00      	ldr	r3, [sp, #0]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	4605      	mov	r5, r0
 8012a6a:	dc67      	bgt.n	8012b3c <_dtoa_r+0x94c>
 8012a6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a6e:	2b02      	cmp	r3, #2
 8012a70:	dc41      	bgt.n	8012af6 <_dtoa_r+0x906>
 8012a72:	e063      	b.n	8012b3c <_dtoa_r+0x94c>
 8012a74:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012a76:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8012a7a:	e746      	b.n	801290a <_dtoa_r+0x71a>
 8012a7c:	9b07      	ldr	r3, [sp, #28]
 8012a7e:	1e5c      	subs	r4, r3, #1
 8012a80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012a82:	42a3      	cmp	r3, r4
 8012a84:	bfbf      	itttt	lt
 8012a86:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8012a88:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8012a8a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8012a8c:	1ae3      	sublt	r3, r4, r3
 8012a8e:	bfb4      	ite	lt
 8012a90:	18d2      	addlt	r2, r2, r3
 8012a92:	1b1c      	subge	r4, r3, r4
 8012a94:	9b07      	ldr	r3, [sp, #28]
 8012a96:	bfbc      	itt	lt
 8012a98:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8012a9a:	2400      	movlt	r4, #0
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	bfb5      	itete	lt
 8012aa0:	eba8 0603 	sublt.w	r6, r8, r3
 8012aa4:	9b07      	ldrge	r3, [sp, #28]
 8012aa6:	2300      	movlt	r3, #0
 8012aa8:	4646      	movge	r6, r8
 8012aaa:	e730      	b.n	801290e <_dtoa_r+0x71e>
 8012aac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012aae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8012ab0:	4646      	mov	r6, r8
 8012ab2:	e735      	b.n	8012920 <_dtoa_r+0x730>
 8012ab4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012ab6:	e75c      	b.n	8012972 <_dtoa_r+0x782>
 8012ab8:	2300      	movs	r3, #0
 8012aba:	e788      	b.n	80129ce <_dtoa_r+0x7de>
 8012abc:	3fe00000 	.word	0x3fe00000
 8012ac0:	40240000 	.word	0x40240000
 8012ac4:	40140000 	.word	0x40140000
 8012ac8:	9b02      	ldr	r3, [sp, #8]
 8012aca:	e780      	b.n	80129ce <_dtoa_r+0x7de>
 8012acc:	2300      	movs	r3, #0
 8012ace:	930a      	str	r3, [sp, #40]	@ 0x28
 8012ad0:	e782      	b.n	80129d8 <_dtoa_r+0x7e8>
 8012ad2:	d099      	beq.n	8012a08 <_dtoa_r+0x818>
 8012ad4:	9a08      	ldr	r2, [sp, #32]
 8012ad6:	331c      	adds	r3, #28
 8012ad8:	441a      	add	r2, r3
 8012ada:	4498      	add	r8, r3
 8012adc:	441e      	add	r6, r3
 8012ade:	9208      	str	r2, [sp, #32]
 8012ae0:	e792      	b.n	8012a08 <_dtoa_r+0x818>
 8012ae2:	4603      	mov	r3, r0
 8012ae4:	e7f6      	b.n	8012ad4 <_dtoa_r+0x8e4>
 8012ae6:	9b07      	ldr	r3, [sp, #28]
 8012ae8:	9704      	str	r7, [sp, #16]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	dc20      	bgt.n	8012b30 <_dtoa_r+0x940>
 8012aee:	9300      	str	r3, [sp, #0]
 8012af0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012af2:	2b02      	cmp	r3, #2
 8012af4:	dd1e      	ble.n	8012b34 <_dtoa_r+0x944>
 8012af6:	9b00      	ldr	r3, [sp, #0]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	f47f aec0 	bne.w	801287e <_dtoa_r+0x68e>
 8012afe:	4621      	mov	r1, r4
 8012b00:	2205      	movs	r2, #5
 8012b02:	4658      	mov	r0, fp
 8012b04:	f000 fde6 	bl	80136d4 <__multadd>
 8012b08:	4601      	mov	r1, r0
 8012b0a:	4604      	mov	r4, r0
 8012b0c:	4648      	mov	r0, r9
 8012b0e:	f001 f843 	bl	8013b98 <__mcmp>
 8012b12:	2800      	cmp	r0, #0
 8012b14:	f77f aeb3 	ble.w	801287e <_dtoa_r+0x68e>
 8012b18:	4656      	mov	r6, sl
 8012b1a:	2331      	movs	r3, #49	@ 0x31
 8012b1c:	f806 3b01 	strb.w	r3, [r6], #1
 8012b20:	9b04      	ldr	r3, [sp, #16]
 8012b22:	3301      	adds	r3, #1
 8012b24:	9304      	str	r3, [sp, #16]
 8012b26:	e6ae      	b.n	8012886 <_dtoa_r+0x696>
 8012b28:	9c07      	ldr	r4, [sp, #28]
 8012b2a:	9704      	str	r7, [sp, #16]
 8012b2c:	4625      	mov	r5, r4
 8012b2e:	e7f3      	b.n	8012b18 <_dtoa_r+0x928>
 8012b30:	9b07      	ldr	r3, [sp, #28]
 8012b32:	9300      	str	r3, [sp, #0]
 8012b34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	f000 8104 	beq.w	8012d44 <_dtoa_r+0xb54>
 8012b3c:	2e00      	cmp	r6, #0
 8012b3e:	dd05      	ble.n	8012b4c <_dtoa_r+0x95c>
 8012b40:	4629      	mov	r1, r5
 8012b42:	4632      	mov	r2, r6
 8012b44:	4658      	mov	r0, fp
 8012b46:	f000 ffbb 	bl	8013ac0 <__lshift>
 8012b4a:	4605      	mov	r5, r0
 8012b4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d05a      	beq.n	8012c08 <_dtoa_r+0xa18>
 8012b52:	6869      	ldr	r1, [r5, #4]
 8012b54:	4658      	mov	r0, fp
 8012b56:	f000 fd5b 	bl	8013610 <_Balloc>
 8012b5a:	4606      	mov	r6, r0
 8012b5c:	b928      	cbnz	r0, 8012b6a <_dtoa_r+0x97a>
 8012b5e:	4b84      	ldr	r3, [pc, #528]	@ (8012d70 <_dtoa_r+0xb80>)
 8012b60:	4602      	mov	r2, r0
 8012b62:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012b66:	f7ff bb5a 	b.w	801221e <_dtoa_r+0x2e>
 8012b6a:	692a      	ldr	r2, [r5, #16]
 8012b6c:	3202      	adds	r2, #2
 8012b6e:	0092      	lsls	r2, r2, #2
 8012b70:	f105 010c 	add.w	r1, r5, #12
 8012b74:	300c      	adds	r0, #12
 8012b76:	f7ff fa78 	bl	801206a <memcpy>
 8012b7a:	2201      	movs	r2, #1
 8012b7c:	4631      	mov	r1, r6
 8012b7e:	4658      	mov	r0, fp
 8012b80:	f000 ff9e 	bl	8013ac0 <__lshift>
 8012b84:	f10a 0301 	add.w	r3, sl, #1
 8012b88:	9307      	str	r3, [sp, #28]
 8012b8a:	9b00      	ldr	r3, [sp, #0]
 8012b8c:	4453      	add	r3, sl
 8012b8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012b90:	9b02      	ldr	r3, [sp, #8]
 8012b92:	f003 0301 	and.w	r3, r3, #1
 8012b96:	462f      	mov	r7, r5
 8012b98:	930a      	str	r3, [sp, #40]	@ 0x28
 8012b9a:	4605      	mov	r5, r0
 8012b9c:	9b07      	ldr	r3, [sp, #28]
 8012b9e:	4621      	mov	r1, r4
 8012ba0:	3b01      	subs	r3, #1
 8012ba2:	4648      	mov	r0, r9
 8012ba4:	9300      	str	r3, [sp, #0]
 8012ba6:	f7ff fa9b 	bl	80120e0 <quorem>
 8012baa:	4639      	mov	r1, r7
 8012bac:	9002      	str	r0, [sp, #8]
 8012bae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012bb2:	4648      	mov	r0, r9
 8012bb4:	f000 fff0 	bl	8013b98 <__mcmp>
 8012bb8:	462a      	mov	r2, r5
 8012bba:	9008      	str	r0, [sp, #32]
 8012bbc:	4621      	mov	r1, r4
 8012bbe:	4658      	mov	r0, fp
 8012bc0:	f001 f806 	bl	8013bd0 <__mdiff>
 8012bc4:	68c2      	ldr	r2, [r0, #12]
 8012bc6:	4606      	mov	r6, r0
 8012bc8:	bb02      	cbnz	r2, 8012c0c <_dtoa_r+0xa1c>
 8012bca:	4601      	mov	r1, r0
 8012bcc:	4648      	mov	r0, r9
 8012bce:	f000 ffe3 	bl	8013b98 <__mcmp>
 8012bd2:	4602      	mov	r2, r0
 8012bd4:	4631      	mov	r1, r6
 8012bd6:	4658      	mov	r0, fp
 8012bd8:	920e      	str	r2, [sp, #56]	@ 0x38
 8012bda:	f000 fd59 	bl	8013690 <_Bfree>
 8012bde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012be0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012be2:	9e07      	ldr	r6, [sp, #28]
 8012be4:	ea43 0102 	orr.w	r1, r3, r2
 8012be8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012bea:	4319      	orrs	r1, r3
 8012bec:	d110      	bne.n	8012c10 <_dtoa_r+0xa20>
 8012bee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012bf2:	d029      	beq.n	8012c48 <_dtoa_r+0xa58>
 8012bf4:	9b08      	ldr	r3, [sp, #32]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	dd02      	ble.n	8012c00 <_dtoa_r+0xa10>
 8012bfa:	9b02      	ldr	r3, [sp, #8]
 8012bfc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8012c00:	9b00      	ldr	r3, [sp, #0]
 8012c02:	f883 8000 	strb.w	r8, [r3]
 8012c06:	e63f      	b.n	8012888 <_dtoa_r+0x698>
 8012c08:	4628      	mov	r0, r5
 8012c0a:	e7bb      	b.n	8012b84 <_dtoa_r+0x994>
 8012c0c:	2201      	movs	r2, #1
 8012c0e:	e7e1      	b.n	8012bd4 <_dtoa_r+0x9e4>
 8012c10:	9b08      	ldr	r3, [sp, #32]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	db04      	blt.n	8012c20 <_dtoa_r+0xa30>
 8012c16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012c18:	430b      	orrs	r3, r1
 8012c1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012c1c:	430b      	orrs	r3, r1
 8012c1e:	d120      	bne.n	8012c62 <_dtoa_r+0xa72>
 8012c20:	2a00      	cmp	r2, #0
 8012c22:	dded      	ble.n	8012c00 <_dtoa_r+0xa10>
 8012c24:	4649      	mov	r1, r9
 8012c26:	2201      	movs	r2, #1
 8012c28:	4658      	mov	r0, fp
 8012c2a:	f000 ff49 	bl	8013ac0 <__lshift>
 8012c2e:	4621      	mov	r1, r4
 8012c30:	4681      	mov	r9, r0
 8012c32:	f000 ffb1 	bl	8013b98 <__mcmp>
 8012c36:	2800      	cmp	r0, #0
 8012c38:	dc03      	bgt.n	8012c42 <_dtoa_r+0xa52>
 8012c3a:	d1e1      	bne.n	8012c00 <_dtoa_r+0xa10>
 8012c3c:	f018 0f01 	tst.w	r8, #1
 8012c40:	d0de      	beq.n	8012c00 <_dtoa_r+0xa10>
 8012c42:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012c46:	d1d8      	bne.n	8012bfa <_dtoa_r+0xa0a>
 8012c48:	9a00      	ldr	r2, [sp, #0]
 8012c4a:	2339      	movs	r3, #57	@ 0x39
 8012c4c:	7013      	strb	r3, [r2, #0]
 8012c4e:	4633      	mov	r3, r6
 8012c50:	461e      	mov	r6, r3
 8012c52:	3b01      	subs	r3, #1
 8012c54:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012c58:	2a39      	cmp	r2, #57	@ 0x39
 8012c5a:	d052      	beq.n	8012d02 <_dtoa_r+0xb12>
 8012c5c:	3201      	adds	r2, #1
 8012c5e:	701a      	strb	r2, [r3, #0]
 8012c60:	e612      	b.n	8012888 <_dtoa_r+0x698>
 8012c62:	2a00      	cmp	r2, #0
 8012c64:	dd07      	ble.n	8012c76 <_dtoa_r+0xa86>
 8012c66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012c6a:	d0ed      	beq.n	8012c48 <_dtoa_r+0xa58>
 8012c6c:	9a00      	ldr	r2, [sp, #0]
 8012c6e:	f108 0301 	add.w	r3, r8, #1
 8012c72:	7013      	strb	r3, [r2, #0]
 8012c74:	e608      	b.n	8012888 <_dtoa_r+0x698>
 8012c76:	9b07      	ldr	r3, [sp, #28]
 8012c78:	9a07      	ldr	r2, [sp, #28]
 8012c7a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8012c7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012c80:	4293      	cmp	r3, r2
 8012c82:	d028      	beq.n	8012cd6 <_dtoa_r+0xae6>
 8012c84:	4649      	mov	r1, r9
 8012c86:	2300      	movs	r3, #0
 8012c88:	220a      	movs	r2, #10
 8012c8a:	4658      	mov	r0, fp
 8012c8c:	f000 fd22 	bl	80136d4 <__multadd>
 8012c90:	42af      	cmp	r7, r5
 8012c92:	4681      	mov	r9, r0
 8012c94:	f04f 0300 	mov.w	r3, #0
 8012c98:	f04f 020a 	mov.w	r2, #10
 8012c9c:	4639      	mov	r1, r7
 8012c9e:	4658      	mov	r0, fp
 8012ca0:	d107      	bne.n	8012cb2 <_dtoa_r+0xac2>
 8012ca2:	f000 fd17 	bl	80136d4 <__multadd>
 8012ca6:	4607      	mov	r7, r0
 8012ca8:	4605      	mov	r5, r0
 8012caa:	9b07      	ldr	r3, [sp, #28]
 8012cac:	3301      	adds	r3, #1
 8012cae:	9307      	str	r3, [sp, #28]
 8012cb0:	e774      	b.n	8012b9c <_dtoa_r+0x9ac>
 8012cb2:	f000 fd0f 	bl	80136d4 <__multadd>
 8012cb6:	4629      	mov	r1, r5
 8012cb8:	4607      	mov	r7, r0
 8012cba:	2300      	movs	r3, #0
 8012cbc:	220a      	movs	r2, #10
 8012cbe:	4658      	mov	r0, fp
 8012cc0:	f000 fd08 	bl	80136d4 <__multadd>
 8012cc4:	4605      	mov	r5, r0
 8012cc6:	e7f0      	b.n	8012caa <_dtoa_r+0xaba>
 8012cc8:	9b00      	ldr	r3, [sp, #0]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	bfcc      	ite	gt
 8012cce:	461e      	movgt	r6, r3
 8012cd0:	2601      	movle	r6, #1
 8012cd2:	4456      	add	r6, sl
 8012cd4:	2700      	movs	r7, #0
 8012cd6:	4649      	mov	r1, r9
 8012cd8:	2201      	movs	r2, #1
 8012cda:	4658      	mov	r0, fp
 8012cdc:	f000 fef0 	bl	8013ac0 <__lshift>
 8012ce0:	4621      	mov	r1, r4
 8012ce2:	4681      	mov	r9, r0
 8012ce4:	f000 ff58 	bl	8013b98 <__mcmp>
 8012ce8:	2800      	cmp	r0, #0
 8012cea:	dcb0      	bgt.n	8012c4e <_dtoa_r+0xa5e>
 8012cec:	d102      	bne.n	8012cf4 <_dtoa_r+0xb04>
 8012cee:	f018 0f01 	tst.w	r8, #1
 8012cf2:	d1ac      	bne.n	8012c4e <_dtoa_r+0xa5e>
 8012cf4:	4633      	mov	r3, r6
 8012cf6:	461e      	mov	r6, r3
 8012cf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012cfc:	2a30      	cmp	r2, #48	@ 0x30
 8012cfe:	d0fa      	beq.n	8012cf6 <_dtoa_r+0xb06>
 8012d00:	e5c2      	b.n	8012888 <_dtoa_r+0x698>
 8012d02:	459a      	cmp	sl, r3
 8012d04:	d1a4      	bne.n	8012c50 <_dtoa_r+0xa60>
 8012d06:	9b04      	ldr	r3, [sp, #16]
 8012d08:	3301      	adds	r3, #1
 8012d0a:	9304      	str	r3, [sp, #16]
 8012d0c:	2331      	movs	r3, #49	@ 0x31
 8012d0e:	f88a 3000 	strb.w	r3, [sl]
 8012d12:	e5b9      	b.n	8012888 <_dtoa_r+0x698>
 8012d14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012d16:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8012d74 <_dtoa_r+0xb84>
 8012d1a:	b11b      	cbz	r3, 8012d24 <_dtoa_r+0xb34>
 8012d1c:	f10a 0308 	add.w	r3, sl, #8
 8012d20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012d22:	6013      	str	r3, [r2, #0]
 8012d24:	4650      	mov	r0, sl
 8012d26:	b019      	add	sp, #100	@ 0x64
 8012d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d2e:	2b01      	cmp	r3, #1
 8012d30:	f77f ae37 	ble.w	80129a2 <_dtoa_r+0x7b2>
 8012d34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012d36:	930a      	str	r3, [sp, #40]	@ 0x28
 8012d38:	2001      	movs	r0, #1
 8012d3a:	e655      	b.n	80129e8 <_dtoa_r+0x7f8>
 8012d3c:	9b00      	ldr	r3, [sp, #0]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	f77f aed6 	ble.w	8012af0 <_dtoa_r+0x900>
 8012d44:	4656      	mov	r6, sl
 8012d46:	4621      	mov	r1, r4
 8012d48:	4648      	mov	r0, r9
 8012d4a:	f7ff f9c9 	bl	80120e0 <quorem>
 8012d4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012d52:	f806 8b01 	strb.w	r8, [r6], #1
 8012d56:	9b00      	ldr	r3, [sp, #0]
 8012d58:	eba6 020a 	sub.w	r2, r6, sl
 8012d5c:	4293      	cmp	r3, r2
 8012d5e:	ddb3      	ble.n	8012cc8 <_dtoa_r+0xad8>
 8012d60:	4649      	mov	r1, r9
 8012d62:	2300      	movs	r3, #0
 8012d64:	220a      	movs	r2, #10
 8012d66:	4658      	mov	r0, fp
 8012d68:	f000 fcb4 	bl	80136d4 <__multadd>
 8012d6c:	4681      	mov	r9, r0
 8012d6e:	e7ea      	b.n	8012d46 <_dtoa_r+0xb56>
 8012d70:	08016823 	.word	0x08016823
 8012d74:	080167be 	.word	0x080167be

08012d78 <_free_r>:
 8012d78:	b538      	push	{r3, r4, r5, lr}
 8012d7a:	4605      	mov	r5, r0
 8012d7c:	2900      	cmp	r1, #0
 8012d7e:	d041      	beq.n	8012e04 <_free_r+0x8c>
 8012d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012d84:	1f0c      	subs	r4, r1, #4
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	bfb8      	it	lt
 8012d8a:	18e4      	addlt	r4, r4, r3
 8012d8c:	f000 fc34 	bl	80135f8 <__malloc_lock>
 8012d90:	4a1d      	ldr	r2, [pc, #116]	@ (8012e08 <_free_r+0x90>)
 8012d92:	6813      	ldr	r3, [r2, #0]
 8012d94:	b933      	cbnz	r3, 8012da4 <_free_r+0x2c>
 8012d96:	6063      	str	r3, [r4, #4]
 8012d98:	6014      	str	r4, [r2, #0]
 8012d9a:	4628      	mov	r0, r5
 8012d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012da0:	f000 bc30 	b.w	8013604 <__malloc_unlock>
 8012da4:	42a3      	cmp	r3, r4
 8012da6:	d908      	bls.n	8012dba <_free_r+0x42>
 8012da8:	6820      	ldr	r0, [r4, #0]
 8012daa:	1821      	adds	r1, r4, r0
 8012dac:	428b      	cmp	r3, r1
 8012dae:	bf01      	itttt	eq
 8012db0:	6819      	ldreq	r1, [r3, #0]
 8012db2:	685b      	ldreq	r3, [r3, #4]
 8012db4:	1809      	addeq	r1, r1, r0
 8012db6:	6021      	streq	r1, [r4, #0]
 8012db8:	e7ed      	b.n	8012d96 <_free_r+0x1e>
 8012dba:	461a      	mov	r2, r3
 8012dbc:	685b      	ldr	r3, [r3, #4]
 8012dbe:	b10b      	cbz	r3, 8012dc4 <_free_r+0x4c>
 8012dc0:	42a3      	cmp	r3, r4
 8012dc2:	d9fa      	bls.n	8012dba <_free_r+0x42>
 8012dc4:	6811      	ldr	r1, [r2, #0]
 8012dc6:	1850      	adds	r0, r2, r1
 8012dc8:	42a0      	cmp	r0, r4
 8012dca:	d10b      	bne.n	8012de4 <_free_r+0x6c>
 8012dcc:	6820      	ldr	r0, [r4, #0]
 8012dce:	4401      	add	r1, r0
 8012dd0:	1850      	adds	r0, r2, r1
 8012dd2:	4283      	cmp	r3, r0
 8012dd4:	6011      	str	r1, [r2, #0]
 8012dd6:	d1e0      	bne.n	8012d9a <_free_r+0x22>
 8012dd8:	6818      	ldr	r0, [r3, #0]
 8012dda:	685b      	ldr	r3, [r3, #4]
 8012ddc:	6053      	str	r3, [r2, #4]
 8012dde:	4408      	add	r0, r1
 8012de0:	6010      	str	r0, [r2, #0]
 8012de2:	e7da      	b.n	8012d9a <_free_r+0x22>
 8012de4:	d902      	bls.n	8012dec <_free_r+0x74>
 8012de6:	230c      	movs	r3, #12
 8012de8:	602b      	str	r3, [r5, #0]
 8012dea:	e7d6      	b.n	8012d9a <_free_r+0x22>
 8012dec:	6820      	ldr	r0, [r4, #0]
 8012dee:	1821      	adds	r1, r4, r0
 8012df0:	428b      	cmp	r3, r1
 8012df2:	bf04      	itt	eq
 8012df4:	6819      	ldreq	r1, [r3, #0]
 8012df6:	685b      	ldreq	r3, [r3, #4]
 8012df8:	6063      	str	r3, [r4, #4]
 8012dfa:	bf04      	itt	eq
 8012dfc:	1809      	addeq	r1, r1, r0
 8012dfe:	6021      	streq	r1, [r4, #0]
 8012e00:	6054      	str	r4, [r2, #4]
 8012e02:	e7ca      	b.n	8012d9a <_free_r+0x22>
 8012e04:	bd38      	pop	{r3, r4, r5, pc}
 8012e06:	bf00      	nop
 8012e08:	20007190 	.word	0x20007190

08012e0c <rshift>:
 8012e0c:	6903      	ldr	r3, [r0, #16]
 8012e0e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012e12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012e16:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012e1a:	f100 0414 	add.w	r4, r0, #20
 8012e1e:	dd45      	ble.n	8012eac <rshift+0xa0>
 8012e20:	f011 011f 	ands.w	r1, r1, #31
 8012e24:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012e28:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012e2c:	d10c      	bne.n	8012e48 <rshift+0x3c>
 8012e2e:	f100 0710 	add.w	r7, r0, #16
 8012e32:	4629      	mov	r1, r5
 8012e34:	42b1      	cmp	r1, r6
 8012e36:	d334      	bcc.n	8012ea2 <rshift+0x96>
 8012e38:	1a9b      	subs	r3, r3, r2
 8012e3a:	009b      	lsls	r3, r3, #2
 8012e3c:	1eea      	subs	r2, r5, #3
 8012e3e:	4296      	cmp	r6, r2
 8012e40:	bf38      	it	cc
 8012e42:	2300      	movcc	r3, #0
 8012e44:	4423      	add	r3, r4
 8012e46:	e015      	b.n	8012e74 <rshift+0x68>
 8012e48:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012e4c:	f1c1 0820 	rsb	r8, r1, #32
 8012e50:	40cf      	lsrs	r7, r1
 8012e52:	f105 0e04 	add.w	lr, r5, #4
 8012e56:	46a1      	mov	r9, r4
 8012e58:	4576      	cmp	r6, lr
 8012e5a:	46f4      	mov	ip, lr
 8012e5c:	d815      	bhi.n	8012e8a <rshift+0x7e>
 8012e5e:	1a9a      	subs	r2, r3, r2
 8012e60:	0092      	lsls	r2, r2, #2
 8012e62:	3a04      	subs	r2, #4
 8012e64:	3501      	adds	r5, #1
 8012e66:	42ae      	cmp	r6, r5
 8012e68:	bf38      	it	cc
 8012e6a:	2200      	movcc	r2, #0
 8012e6c:	18a3      	adds	r3, r4, r2
 8012e6e:	50a7      	str	r7, [r4, r2]
 8012e70:	b107      	cbz	r7, 8012e74 <rshift+0x68>
 8012e72:	3304      	adds	r3, #4
 8012e74:	1b1a      	subs	r2, r3, r4
 8012e76:	42a3      	cmp	r3, r4
 8012e78:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012e7c:	bf08      	it	eq
 8012e7e:	2300      	moveq	r3, #0
 8012e80:	6102      	str	r2, [r0, #16]
 8012e82:	bf08      	it	eq
 8012e84:	6143      	streq	r3, [r0, #20]
 8012e86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012e8a:	f8dc c000 	ldr.w	ip, [ip]
 8012e8e:	fa0c fc08 	lsl.w	ip, ip, r8
 8012e92:	ea4c 0707 	orr.w	r7, ip, r7
 8012e96:	f849 7b04 	str.w	r7, [r9], #4
 8012e9a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012e9e:	40cf      	lsrs	r7, r1
 8012ea0:	e7da      	b.n	8012e58 <rshift+0x4c>
 8012ea2:	f851 cb04 	ldr.w	ip, [r1], #4
 8012ea6:	f847 cf04 	str.w	ip, [r7, #4]!
 8012eaa:	e7c3      	b.n	8012e34 <rshift+0x28>
 8012eac:	4623      	mov	r3, r4
 8012eae:	e7e1      	b.n	8012e74 <rshift+0x68>

08012eb0 <__hexdig_fun>:
 8012eb0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8012eb4:	2b09      	cmp	r3, #9
 8012eb6:	d802      	bhi.n	8012ebe <__hexdig_fun+0xe>
 8012eb8:	3820      	subs	r0, #32
 8012eba:	b2c0      	uxtb	r0, r0
 8012ebc:	4770      	bx	lr
 8012ebe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8012ec2:	2b05      	cmp	r3, #5
 8012ec4:	d801      	bhi.n	8012eca <__hexdig_fun+0x1a>
 8012ec6:	3847      	subs	r0, #71	@ 0x47
 8012ec8:	e7f7      	b.n	8012eba <__hexdig_fun+0xa>
 8012eca:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8012ece:	2b05      	cmp	r3, #5
 8012ed0:	d801      	bhi.n	8012ed6 <__hexdig_fun+0x26>
 8012ed2:	3827      	subs	r0, #39	@ 0x27
 8012ed4:	e7f1      	b.n	8012eba <__hexdig_fun+0xa>
 8012ed6:	2000      	movs	r0, #0
 8012ed8:	4770      	bx	lr
	...

08012edc <__gethex>:
 8012edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ee0:	b085      	sub	sp, #20
 8012ee2:	468a      	mov	sl, r1
 8012ee4:	9302      	str	r3, [sp, #8]
 8012ee6:	680b      	ldr	r3, [r1, #0]
 8012ee8:	9001      	str	r0, [sp, #4]
 8012eea:	4690      	mov	r8, r2
 8012eec:	1c9c      	adds	r4, r3, #2
 8012eee:	46a1      	mov	r9, r4
 8012ef0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8012ef4:	2830      	cmp	r0, #48	@ 0x30
 8012ef6:	d0fa      	beq.n	8012eee <__gethex+0x12>
 8012ef8:	eba9 0303 	sub.w	r3, r9, r3
 8012efc:	f1a3 0b02 	sub.w	fp, r3, #2
 8012f00:	f7ff ffd6 	bl	8012eb0 <__hexdig_fun>
 8012f04:	4605      	mov	r5, r0
 8012f06:	2800      	cmp	r0, #0
 8012f08:	d168      	bne.n	8012fdc <__gethex+0x100>
 8012f0a:	49a0      	ldr	r1, [pc, #640]	@ (801318c <__gethex+0x2b0>)
 8012f0c:	2201      	movs	r2, #1
 8012f0e:	4648      	mov	r0, r9
 8012f10:	f7fe ffc5 	bl	8011e9e <strncmp>
 8012f14:	4607      	mov	r7, r0
 8012f16:	2800      	cmp	r0, #0
 8012f18:	d167      	bne.n	8012fea <__gethex+0x10e>
 8012f1a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8012f1e:	4626      	mov	r6, r4
 8012f20:	f7ff ffc6 	bl	8012eb0 <__hexdig_fun>
 8012f24:	2800      	cmp	r0, #0
 8012f26:	d062      	beq.n	8012fee <__gethex+0x112>
 8012f28:	4623      	mov	r3, r4
 8012f2a:	7818      	ldrb	r0, [r3, #0]
 8012f2c:	2830      	cmp	r0, #48	@ 0x30
 8012f2e:	4699      	mov	r9, r3
 8012f30:	f103 0301 	add.w	r3, r3, #1
 8012f34:	d0f9      	beq.n	8012f2a <__gethex+0x4e>
 8012f36:	f7ff ffbb 	bl	8012eb0 <__hexdig_fun>
 8012f3a:	fab0 f580 	clz	r5, r0
 8012f3e:	096d      	lsrs	r5, r5, #5
 8012f40:	f04f 0b01 	mov.w	fp, #1
 8012f44:	464a      	mov	r2, r9
 8012f46:	4616      	mov	r6, r2
 8012f48:	3201      	adds	r2, #1
 8012f4a:	7830      	ldrb	r0, [r6, #0]
 8012f4c:	f7ff ffb0 	bl	8012eb0 <__hexdig_fun>
 8012f50:	2800      	cmp	r0, #0
 8012f52:	d1f8      	bne.n	8012f46 <__gethex+0x6a>
 8012f54:	498d      	ldr	r1, [pc, #564]	@ (801318c <__gethex+0x2b0>)
 8012f56:	2201      	movs	r2, #1
 8012f58:	4630      	mov	r0, r6
 8012f5a:	f7fe ffa0 	bl	8011e9e <strncmp>
 8012f5e:	2800      	cmp	r0, #0
 8012f60:	d13f      	bne.n	8012fe2 <__gethex+0x106>
 8012f62:	b944      	cbnz	r4, 8012f76 <__gethex+0x9a>
 8012f64:	1c74      	adds	r4, r6, #1
 8012f66:	4622      	mov	r2, r4
 8012f68:	4616      	mov	r6, r2
 8012f6a:	3201      	adds	r2, #1
 8012f6c:	7830      	ldrb	r0, [r6, #0]
 8012f6e:	f7ff ff9f 	bl	8012eb0 <__hexdig_fun>
 8012f72:	2800      	cmp	r0, #0
 8012f74:	d1f8      	bne.n	8012f68 <__gethex+0x8c>
 8012f76:	1ba4      	subs	r4, r4, r6
 8012f78:	00a7      	lsls	r7, r4, #2
 8012f7a:	7833      	ldrb	r3, [r6, #0]
 8012f7c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8012f80:	2b50      	cmp	r3, #80	@ 0x50
 8012f82:	d13e      	bne.n	8013002 <__gethex+0x126>
 8012f84:	7873      	ldrb	r3, [r6, #1]
 8012f86:	2b2b      	cmp	r3, #43	@ 0x2b
 8012f88:	d033      	beq.n	8012ff2 <__gethex+0x116>
 8012f8a:	2b2d      	cmp	r3, #45	@ 0x2d
 8012f8c:	d034      	beq.n	8012ff8 <__gethex+0x11c>
 8012f8e:	1c71      	adds	r1, r6, #1
 8012f90:	2400      	movs	r4, #0
 8012f92:	7808      	ldrb	r0, [r1, #0]
 8012f94:	f7ff ff8c 	bl	8012eb0 <__hexdig_fun>
 8012f98:	1e43      	subs	r3, r0, #1
 8012f9a:	b2db      	uxtb	r3, r3
 8012f9c:	2b18      	cmp	r3, #24
 8012f9e:	d830      	bhi.n	8013002 <__gethex+0x126>
 8012fa0:	f1a0 0210 	sub.w	r2, r0, #16
 8012fa4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012fa8:	f7ff ff82 	bl	8012eb0 <__hexdig_fun>
 8012fac:	f100 3cff 	add.w	ip, r0, #4294967295
 8012fb0:	fa5f fc8c 	uxtb.w	ip, ip
 8012fb4:	f1bc 0f18 	cmp.w	ip, #24
 8012fb8:	f04f 030a 	mov.w	r3, #10
 8012fbc:	d91e      	bls.n	8012ffc <__gethex+0x120>
 8012fbe:	b104      	cbz	r4, 8012fc2 <__gethex+0xe6>
 8012fc0:	4252      	negs	r2, r2
 8012fc2:	4417      	add	r7, r2
 8012fc4:	f8ca 1000 	str.w	r1, [sl]
 8012fc8:	b1ed      	cbz	r5, 8013006 <__gethex+0x12a>
 8012fca:	f1bb 0f00 	cmp.w	fp, #0
 8012fce:	bf0c      	ite	eq
 8012fd0:	2506      	moveq	r5, #6
 8012fd2:	2500      	movne	r5, #0
 8012fd4:	4628      	mov	r0, r5
 8012fd6:	b005      	add	sp, #20
 8012fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fdc:	2500      	movs	r5, #0
 8012fde:	462c      	mov	r4, r5
 8012fe0:	e7b0      	b.n	8012f44 <__gethex+0x68>
 8012fe2:	2c00      	cmp	r4, #0
 8012fe4:	d1c7      	bne.n	8012f76 <__gethex+0x9a>
 8012fe6:	4627      	mov	r7, r4
 8012fe8:	e7c7      	b.n	8012f7a <__gethex+0x9e>
 8012fea:	464e      	mov	r6, r9
 8012fec:	462f      	mov	r7, r5
 8012fee:	2501      	movs	r5, #1
 8012ff0:	e7c3      	b.n	8012f7a <__gethex+0x9e>
 8012ff2:	2400      	movs	r4, #0
 8012ff4:	1cb1      	adds	r1, r6, #2
 8012ff6:	e7cc      	b.n	8012f92 <__gethex+0xb6>
 8012ff8:	2401      	movs	r4, #1
 8012ffa:	e7fb      	b.n	8012ff4 <__gethex+0x118>
 8012ffc:	fb03 0002 	mla	r0, r3, r2, r0
 8013000:	e7ce      	b.n	8012fa0 <__gethex+0xc4>
 8013002:	4631      	mov	r1, r6
 8013004:	e7de      	b.n	8012fc4 <__gethex+0xe8>
 8013006:	eba6 0309 	sub.w	r3, r6, r9
 801300a:	3b01      	subs	r3, #1
 801300c:	4629      	mov	r1, r5
 801300e:	2b07      	cmp	r3, #7
 8013010:	dc0a      	bgt.n	8013028 <__gethex+0x14c>
 8013012:	9801      	ldr	r0, [sp, #4]
 8013014:	f000 fafc 	bl	8013610 <_Balloc>
 8013018:	4604      	mov	r4, r0
 801301a:	b940      	cbnz	r0, 801302e <__gethex+0x152>
 801301c:	4b5c      	ldr	r3, [pc, #368]	@ (8013190 <__gethex+0x2b4>)
 801301e:	4602      	mov	r2, r0
 8013020:	21e4      	movs	r1, #228	@ 0xe4
 8013022:	485c      	ldr	r0, [pc, #368]	@ (8013194 <__gethex+0x2b8>)
 8013024:	f7ff f83e 	bl	80120a4 <__assert_func>
 8013028:	3101      	adds	r1, #1
 801302a:	105b      	asrs	r3, r3, #1
 801302c:	e7ef      	b.n	801300e <__gethex+0x132>
 801302e:	f100 0a14 	add.w	sl, r0, #20
 8013032:	2300      	movs	r3, #0
 8013034:	4655      	mov	r5, sl
 8013036:	469b      	mov	fp, r3
 8013038:	45b1      	cmp	r9, r6
 801303a:	d337      	bcc.n	80130ac <__gethex+0x1d0>
 801303c:	f845 bb04 	str.w	fp, [r5], #4
 8013040:	eba5 050a 	sub.w	r5, r5, sl
 8013044:	10ad      	asrs	r5, r5, #2
 8013046:	6125      	str	r5, [r4, #16]
 8013048:	4658      	mov	r0, fp
 801304a:	f000 fbd3 	bl	80137f4 <__hi0bits>
 801304e:	016d      	lsls	r5, r5, #5
 8013050:	f8d8 6000 	ldr.w	r6, [r8]
 8013054:	1a2d      	subs	r5, r5, r0
 8013056:	42b5      	cmp	r5, r6
 8013058:	dd54      	ble.n	8013104 <__gethex+0x228>
 801305a:	1bad      	subs	r5, r5, r6
 801305c:	4629      	mov	r1, r5
 801305e:	4620      	mov	r0, r4
 8013060:	f000 ff67 	bl	8013f32 <__any_on>
 8013064:	4681      	mov	r9, r0
 8013066:	b178      	cbz	r0, 8013088 <__gethex+0x1ac>
 8013068:	1e6b      	subs	r3, r5, #1
 801306a:	1159      	asrs	r1, r3, #5
 801306c:	f003 021f 	and.w	r2, r3, #31
 8013070:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8013074:	f04f 0901 	mov.w	r9, #1
 8013078:	fa09 f202 	lsl.w	r2, r9, r2
 801307c:	420a      	tst	r2, r1
 801307e:	d003      	beq.n	8013088 <__gethex+0x1ac>
 8013080:	454b      	cmp	r3, r9
 8013082:	dc36      	bgt.n	80130f2 <__gethex+0x216>
 8013084:	f04f 0902 	mov.w	r9, #2
 8013088:	4629      	mov	r1, r5
 801308a:	4620      	mov	r0, r4
 801308c:	f7ff febe 	bl	8012e0c <rshift>
 8013090:	442f      	add	r7, r5
 8013092:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013096:	42bb      	cmp	r3, r7
 8013098:	da42      	bge.n	8013120 <__gethex+0x244>
 801309a:	9801      	ldr	r0, [sp, #4]
 801309c:	4621      	mov	r1, r4
 801309e:	f000 faf7 	bl	8013690 <_Bfree>
 80130a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80130a4:	2300      	movs	r3, #0
 80130a6:	6013      	str	r3, [r2, #0]
 80130a8:	25a3      	movs	r5, #163	@ 0xa3
 80130aa:	e793      	b.n	8012fd4 <__gethex+0xf8>
 80130ac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80130b0:	2a2e      	cmp	r2, #46	@ 0x2e
 80130b2:	d012      	beq.n	80130da <__gethex+0x1fe>
 80130b4:	2b20      	cmp	r3, #32
 80130b6:	d104      	bne.n	80130c2 <__gethex+0x1e6>
 80130b8:	f845 bb04 	str.w	fp, [r5], #4
 80130bc:	f04f 0b00 	mov.w	fp, #0
 80130c0:	465b      	mov	r3, fp
 80130c2:	7830      	ldrb	r0, [r6, #0]
 80130c4:	9303      	str	r3, [sp, #12]
 80130c6:	f7ff fef3 	bl	8012eb0 <__hexdig_fun>
 80130ca:	9b03      	ldr	r3, [sp, #12]
 80130cc:	f000 000f 	and.w	r0, r0, #15
 80130d0:	4098      	lsls	r0, r3
 80130d2:	ea4b 0b00 	orr.w	fp, fp, r0
 80130d6:	3304      	adds	r3, #4
 80130d8:	e7ae      	b.n	8013038 <__gethex+0x15c>
 80130da:	45b1      	cmp	r9, r6
 80130dc:	d8ea      	bhi.n	80130b4 <__gethex+0x1d8>
 80130de:	492b      	ldr	r1, [pc, #172]	@ (801318c <__gethex+0x2b0>)
 80130e0:	9303      	str	r3, [sp, #12]
 80130e2:	2201      	movs	r2, #1
 80130e4:	4630      	mov	r0, r6
 80130e6:	f7fe feda 	bl	8011e9e <strncmp>
 80130ea:	9b03      	ldr	r3, [sp, #12]
 80130ec:	2800      	cmp	r0, #0
 80130ee:	d1e1      	bne.n	80130b4 <__gethex+0x1d8>
 80130f0:	e7a2      	b.n	8013038 <__gethex+0x15c>
 80130f2:	1ea9      	subs	r1, r5, #2
 80130f4:	4620      	mov	r0, r4
 80130f6:	f000 ff1c 	bl	8013f32 <__any_on>
 80130fa:	2800      	cmp	r0, #0
 80130fc:	d0c2      	beq.n	8013084 <__gethex+0x1a8>
 80130fe:	f04f 0903 	mov.w	r9, #3
 8013102:	e7c1      	b.n	8013088 <__gethex+0x1ac>
 8013104:	da09      	bge.n	801311a <__gethex+0x23e>
 8013106:	1b75      	subs	r5, r6, r5
 8013108:	4621      	mov	r1, r4
 801310a:	9801      	ldr	r0, [sp, #4]
 801310c:	462a      	mov	r2, r5
 801310e:	f000 fcd7 	bl	8013ac0 <__lshift>
 8013112:	1b7f      	subs	r7, r7, r5
 8013114:	4604      	mov	r4, r0
 8013116:	f100 0a14 	add.w	sl, r0, #20
 801311a:	f04f 0900 	mov.w	r9, #0
 801311e:	e7b8      	b.n	8013092 <__gethex+0x1b6>
 8013120:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013124:	42bd      	cmp	r5, r7
 8013126:	dd6f      	ble.n	8013208 <__gethex+0x32c>
 8013128:	1bed      	subs	r5, r5, r7
 801312a:	42ae      	cmp	r6, r5
 801312c:	dc34      	bgt.n	8013198 <__gethex+0x2bc>
 801312e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013132:	2b02      	cmp	r3, #2
 8013134:	d022      	beq.n	801317c <__gethex+0x2a0>
 8013136:	2b03      	cmp	r3, #3
 8013138:	d024      	beq.n	8013184 <__gethex+0x2a8>
 801313a:	2b01      	cmp	r3, #1
 801313c:	d115      	bne.n	801316a <__gethex+0x28e>
 801313e:	42ae      	cmp	r6, r5
 8013140:	d113      	bne.n	801316a <__gethex+0x28e>
 8013142:	2e01      	cmp	r6, #1
 8013144:	d10b      	bne.n	801315e <__gethex+0x282>
 8013146:	9a02      	ldr	r2, [sp, #8]
 8013148:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801314c:	6013      	str	r3, [r2, #0]
 801314e:	2301      	movs	r3, #1
 8013150:	6123      	str	r3, [r4, #16]
 8013152:	f8ca 3000 	str.w	r3, [sl]
 8013156:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013158:	2562      	movs	r5, #98	@ 0x62
 801315a:	601c      	str	r4, [r3, #0]
 801315c:	e73a      	b.n	8012fd4 <__gethex+0xf8>
 801315e:	1e71      	subs	r1, r6, #1
 8013160:	4620      	mov	r0, r4
 8013162:	f000 fee6 	bl	8013f32 <__any_on>
 8013166:	2800      	cmp	r0, #0
 8013168:	d1ed      	bne.n	8013146 <__gethex+0x26a>
 801316a:	9801      	ldr	r0, [sp, #4]
 801316c:	4621      	mov	r1, r4
 801316e:	f000 fa8f 	bl	8013690 <_Bfree>
 8013172:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013174:	2300      	movs	r3, #0
 8013176:	6013      	str	r3, [r2, #0]
 8013178:	2550      	movs	r5, #80	@ 0x50
 801317a:	e72b      	b.n	8012fd4 <__gethex+0xf8>
 801317c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801317e:	2b00      	cmp	r3, #0
 8013180:	d1f3      	bne.n	801316a <__gethex+0x28e>
 8013182:	e7e0      	b.n	8013146 <__gethex+0x26a>
 8013184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013186:	2b00      	cmp	r3, #0
 8013188:	d1dd      	bne.n	8013146 <__gethex+0x26a>
 801318a:	e7ee      	b.n	801316a <__gethex+0x28e>
 801318c:	08016678 	.word	0x08016678
 8013190:	08016823 	.word	0x08016823
 8013194:	08016834 	.word	0x08016834
 8013198:	1e6f      	subs	r7, r5, #1
 801319a:	f1b9 0f00 	cmp.w	r9, #0
 801319e:	d130      	bne.n	8013202 <__gethex+0x326>
 80131a0:	b127      	cbz	r7, 80131ac <__gethex+0x2d0>
 80131a2:	4639      	mov	r1, r7
 80131a4:	4620      	mov	r0, r4
 80131a6:	f000 fec4 	bl	8013f32 <__any_on>
 80131aa:	4681      	mov	r9, r0
 80131ac:	117a      	asrs	r2, r7, #5
 80131ae:	2301      	movs	r3, #1
 80131b0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80131b4:	f007 071f 	and.w	r7, r7, #31
 80131b8:	40bb      	lsls	r3, r7
 80131ba:	4213      	tst	r3, r2
 80131bc:	4629      	mov	r1, r5
 80131be:	4620      	mov	r0, r4
 80131c0:	bf18      	it	ne
 80131c2:	f049 0902 	orrne.w	r9, r9, #2
 80131c6:	f7ff fe21 	bl	8012e0c <rshift>
 80131ca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80131ce:	1b76      	subs	r6, r6, r5
 80131d0:	2502      	movs	r5, #2
 80131d2:	f1b9 0f00 	cmp.w	r9, #0
 80131d6:	d047      	beq.n	8013268 <__gethex+0x38c>
 80131d8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80131dc:	2b02      	cmp	r3, #2
 80131de:	d015      	beq.n	801320c <__gethex+0x330>
 80131e0:	2b03      	cmp	r3, #3
 80131e2:	d017      	beq.n	8013214 <__gethex+0x338>
 80131e4:	2b01      	cmp	r3, #1
 80131e6:	d109      	bne.n	80131fc <__gethex+0x320>
 80131e8:	f019 0f02 	tst.w	r9, #2
 80131ec:	d006      	beq.n	80131fc <__gethex+0x320>
 80131ee:	f8da 3000 	ldr.w	r3, [sl]
 80131f2:	ea49 0903 	orr.w	r9, r9, r3
 80131f6:	f019 0f01 	tst.w	r9, #1
 80131fa:	d10e      	bne.n	801321a <__gethex+0x33e>
 80131fc:	f045 0510 	orr.w	r5, r5, #16
 8013200:	e032      	b.n	8013268 <__gethex+0x38c>
 8013202:	f04f 0901 	mov.w	r9, #1
 8013206:	e7d1      	b.n	80131ac <__gethex+0x2d0>
 8013208:	2501      	movs	r5, #1
 801320a:	e7e2      	b.n	80131d2 <__gethex+0x2f6>
 801320c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801320e:	f1c3 0301 	rsb	r3, r3, #1
 8013212:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013216:	2b00      	cmp	r3, #0
 8013218:	d0f0      	beq.n	80131fc <__gethex+0x320>
 801321a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801321e:	f104 0314 	add.w	r3, r4, #20
 8013222:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013226:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801322a:	f04f 0c00 	mov.w	ip, #0
 801322e:	4618      	mov	r0, r3
 8013230:	f853 2b04 	ldr.w	r2, [r3], #4
 8013234:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013238:	d01b      	beq.n	8013272 <__gethex+0x396>
 801323a:	3201      	adds	r2, #1
 801323c:	6002      	str	r2, [r0, #0]
 801323e:	2d02      	cmp	r5, #2
 8013240:	f104 0314 	add.w	r3, r4, #20
 8013244:	d13c      	bne.n	80132c0 <__gethex+0x3e4>
 8013246:	f8d8 2000 	ldr.w	r2, [r8]
 801324a:	3a01      	subs	r2, #1
 801324c:	42b2      	cmp	r2, r6
 801324e:	d109      	bne.n	8013264 <__gethex+0x388>
 8013250:	1171      	asrs	r1, r6, #5
 8013252:	2201      	movs	r2, #1
 8013254:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013258:	f006 061f 	and.w	r6, r6, #31
 801325c:	fa02 f606 	lsl.w	r6, r2, r6
 8013260:	421e      	tst	r6, r3
 8013262:	d13a      	bne.n	80132da <__gethex+0x3fe>
 8013264:	f045 0520 	orr.w	r5, r5, #32
 8013268:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801326a:	601c      	str	r4, [r3, #0]
 801326c:	9b02      	ldr	r3, [sp, #8]
 801326e:	601f      	str	r7, [r3, #0]
 8013270:	e6b0      	b.n	8012fd4 <__gethex+0xf8>
 8013272:	4299      	cmp	r1, r3
 8013274:	f843 cc04 	str.w	ip, [r3, #-4]
 8013278:	d8d9      	bhi.n	801322e <__gethex+0x352>
 801327a:	68a3      	ldr	r3, [r4, #8]
 801327c:	459b      	cmp	fp, r3
 801327e:	db17      	blt.n	80132b0 <__gethex+0x3d4>
 8013280:	6861      	ldr	r1, [r4, #4]
 8013282:	9801      	ldr	r0, [sp, #4]
 8013284:	3101      	adds	r1, #1
 8013286:	f000 f9c3 	bl	8013610 <_Balloc>
 801328a:	4681      	mov	r9, r0
 801328c:	b918      	cbnz	r0, 8013296 <__gethex+0x3ba>
 801328e:	4b1a      	ldr	r3, [pc, #104]	@ (80132f8 <__gethex+0x41c>)
 8013290:	4602      	mov	r2, r0
 8013292:	2184      	movs	r1, #132	@ 0x84
 8013294:	e6c5      	b.n	8013022 <__gethex+0x146>
 8013296:	6922      	ldr	r2, [r4, #16]
 8013298:	3202      	adds	r2, #2
 801329a:	f104 010c 	add.w	r1, r4, #12
 801329e:	0092      	lsls	r2, r2, #2
 80132a0:	300c      	adds	r0, #12
 80132a2:	f7fe fee2 	bl	801206a <memcpy>
 80132a6:	4621      	mov	r1, r4
 80132a8:	9801      	ldr	r0, [sp, #4]
 80132aa:	f000 f9f1 	bl	8013690 <_Bfree>
 80132ae:	464c      	mov	r4, r9
 80132b0:	6923      	ldr	r3, [r4, #16]
 80132b2:	1c5a      	adds	r2, r3, #1
 80132b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80132b8:	6122      	str	r2, [r4, #16]
 80132ba:	2201      	movs	r2, #1
 80132bc:	615a      	str	r2, [r3, #20]
 80132be:	e7be      	b.n	801323e <__gethex+0x362>
 80132c0:	6922      	ldr	r2, [r4, #16]
 80132c2:	455a      	cmp	r2, fp
 80132c4:	dd0b      	ble.n	80132de <__gethex+0x402>
 80132c6:	2101      	movs	r1, #1
 80132c8:	4620      	mov	r0, r4
 80132ca:	f7ff fd9f 	bl	8012e0c <rshift>
 80132ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80132d2:	3701      	adds	r7, #1
 80132d4:	42bb      	cmp	r3, r7
 80132d6:	f6ff aee0 	blt.w	801309a <__gethex+0x1be>
 80132da:	2501      	movs	r5, #1
 80132dc:	e7c2      	b.n	8013264 <__gethex+0x388>
 80132de:	f016 061f 	ands.w	r6, r6, #31
 80132e2:	d0fa      	beq.n	80132da <__gethex+0x3fe>
 80132e4:	4453      	add	r3, sl
 80132e6:	f1c6 0620 	rsb	r6, r6, #32
 80132ea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80132ee:	f000 fa81 	bl	80137f4 <__hi0bits>
 80132f2:	42b0      	cmp	r0, r6
 80132f4:	dbe7      	blt.n	80132c6 <__gethex+0x3ea>
 80132f6:	e7f0      	b.n	80132da <__gethex+0x3fe>
 80132f8:	08016823 	.word	0x08016823

080132fc <L_shift>:
 80132fc:	f1c2 0208 	rsb	r2, r2, #8
 8013300:	0092      	lsls	r2, r2, #2
 8013302:	b570      	push	{r4, r5, r6, lr}
 8013304:	f1c2 0620 	rsb	r6, r2, #32
 8013308:	6843      	ldr	r3, [r0, #4]
 801330a:	6804      	ldr	r4, [r0, #0]
 801330c:	fa03 f506 	lsl.w	r5, r3, r6
 8013310:	432c      	orrs	r4, r5
 8013312:	40d3      	lsrs	r3, r2
 8013314:	6004      	str	r4, [r0, #0]
 8013316:	f840 3f04 	str.w	r3, [r0, #4]!
 801331a:	4288      	cmp	r0, r1
 801331c:	d3f4      	bcc.n	8013308 <L_shift+0xc>
 801331e:	bd70      	pop	{r4, r5, r6, pc}

08013320 <__match>:
 8013320:	b530      	push	{r4, r5, lr}
 8013322:	6803      	ldr	r3, [r0, #0]
 8013324:	3301      	adds	r3, #1
 8013326:	f811 4b01 	ldrb.w	r4, [r1], #1
 801332a:	b914      	cbnz	r4, 8013332 <__match+0x12>
 801332c:	6003      	str	r3, [r0, #0]
 801332e:	2001      	movs	r0, #1
 8013330:	bd30      	pop	{r4, r5, pc}
 8013332:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013336:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801333a:	2d19      	cmp	r5, #25
 801333c:	bf98      	it	ls
 801333e:	3220      	addls	r2, #32
 8013340:	42a2      	cmp	r2, r4
 8013342:	d0f0      	beq.n	8013326 <__match+0x6>
 8013344:	2000      	movs	r0, #0
 8013346:	e7f3      	b.n	8013330 <__match+0x10>

08013348 <__hexnan>:
 8013348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801334c:	680b      	ldr	r3, [r1, #0]
 801334e:	6801      	ldr	r1, [r0, #0]
 8013350:	115e      	asrs	r6, r3, #5
 8013352:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013356:	f013 031f 	ands.w	r3, r3, #31
 801335a:	b087      	sub	sp, #28
 801335c:	bf18      	it	ne
 801335e:	3604      	addne	r6, #4
 8013360:	2500      	movs	r5, #0
 8013362:	1f37      	subs	r7, r6, #4
 8013364:	4682      	mov	sl, r0
 8013366:	4690      	mov	r8, r2
 8013368:	9301      	str	r3, [sp, #4]
 801336a:	f846 5c04 	str.w	r5, [r6, #-4]
 801336e:	46b9      	mov	r9, r7
 8013370:	463c      	mov	r4, r7
 8013372:	9502      	str	r5, [sp, #8]
 8013374:	46ab      	mov	fp, r5
 8013376:	784a      	ldrb	r2, [r1, #1]
 8013378:	1c4b      	adds	r3, r1, #1
 801337a:	9303      	str	r3, [sp, #12]
 801337c:	b342      	cbz	r2, 80133d0 <__hexnan+0x88>
 801337e:	4610      	mov	r0, r2
 8013380:	9105      	str	r1, [sp, #20]
 8013382:	9204      	str	r2, [sp, #16]
 8013384:	f7ff fd94 	bl	8012eb0 <__hexdig_fun>
 8013388:	2800      	cmp	r0, #0
 801338a:	d151      	bne.n	8013430 <__hexnan+0xe8>
 801338c:	9a04      	ldr	r2, [sp, #16]
 801338e:	9905      	ldr	r1, [sp, #20]
 8013390:	2a20      	cmp	r2, #32
 8013392:	d818      	bhi.n	80133c6 <__hexnan+0x7e>
 8013394:	9b02      	ldr	r3, [sp, #8]
 8013396:	459b      	cmp	fp, r3
 8013398:	dd13      	ble.n	80133c2 <__hexnan+0x7a>
 801339a:	454c      	cmp	r4, r9
 801339c:	d206      	bcs.n	80133ac <__hexnan+0x64>
 801339e:	2d07      	cmp	r5, #7
 80133a0:	dc04      	bgt.n	80133ac <__hexnan+0x64>
 80133a2:	462a      	mov	r2, r5
 80133a4:	4649      	mov	r1, r9
 80133a6:	4620      	mov	r0, r4
 80133a8:	f7ff ffa8 	bl	80132fc <L_shift>
 80133ac:	4544      	cmp	r4, r8
 80133ae:	d952      	bls.n	8013456 <__hexnan+0x10e>
 80133b0:	2300      	movs	r3, #0
 80133b2:	f1a4 0904 	sub.w	r9, r4, #4
 80133b6:	f844 3c04 	str.w	r3, [r4, #-4]
 80133ba:	f8cd b008 	str.w	fp, [sp, #8]
 80133be:	464c      	mov	r4, r9
 80133c0:	461d      	mov	r5, r3
 80133c2:	9903      	ldr	r1, [sp, #12]
 80133c4:	e7d7      	b.n	8013376 <__hexnan+0x2e>
 80133c6:	2a29      	cmp	r2, #41	@ 0x29
 80133c8:	d157      	bne.n	801347a <__hexnan+0x132>
 80133ca:	3102      	adds	r1, #2
 80133cc:	f8ca 1000 	str.w	r1, [sl]
 80133d0:	f1bb 0f00 	cmp.w	fp, #0
 80133d4:	d051      	beq.n	801347a <__hexnan+0x132>
 80133d6:	454c      	cmp	r4, r9
 80133d8:	d206      	bcs.n	80133e8 <__hexnan+0xa0>
 80133da:	2d07      	cmp	r5, #7
 80133dc:	dc04      	bgt.n	80133e8 <__hexnan+0xa0>
 80133de:	462a      	mov	r2, r5
 80133e0:	4649      	mov	r1, r9
 80133e2:	4620      	mov	r0, r4
 80133e4:	f7ff ff8a 	bl	80132fc <L_shift>
 80133e8:	4544      	cmp	r4, r8
 80133ea:	d936      	bls.n	801345a <__hexnan+0x112>
 80133ec:	f1a8 0204 	sub.w	r2, r8, #4
 80133f0:	4623      	mov	r3, r4
 80133f2:	f853 1b04 	ldr.w	r1, [r3], #4
 80133f6:	f842 1f04 	str.w	r1, [r2, #4]!
 80133fa:	429f      	cmp	r7, r3
 80133fc:	d2f9      	bcs.n	80133f2 <__hexnan+0xaa>
 80133fe:	1b3b      	subs	r3, r7, r4
 8013400:	f023 0303 	bic.w	r3, r3, #3
 8013404:	3304      	adds	r3, #4
 8013406:	3401      	adds	r4, #1
 8013408:	3e03      	subs	r6, #3
 801340a:	42b4      	cmp	r4, r6
 801340c:	bf88      	it	hi
 801340e:	2304      	movhi	r3, #4
 8013410:	4443      	add	r3, r8
 8013412:	2200      	movs	r2, #0
 8013414:	f843 2b04 	str.w	r2, [r3], #4
 8013418:	429f      	cmp	r7, r3
 801341a:	d2fb      	bcs.n	8013414 <__hexnan+0xcc>
 801341c:	683b      	ldr	r3, [r7, #0]
 801341e:	b91b      	cbnz	r3, 8013428 <__hexnan+0xe0>
 8013420:	4547      	cmp	r7, r8
 8013422:	d128      	bne.n	8013476 <__hexnan+0x12e>
 8013424:	2301      	movs	r3, #1
 8013426:	603b      	str	r3, [r7, #0]
 8013428:	2005      	movs	r0, #5
 801342a:	b007      	add	sp, #28
 801342c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013430:	3501      	adds	r5, #1
 8013432:	2d08      	cmp	r5, #8
 8013434:	f10b 0b01 	add.w	fp, fp, #1
 8013438:	dd06      	ble.n	8013448 <__hexnan+0x100>
 801343a:	4544      	cmp	r4, r8
 801343c:	d9c1      	bls.n	80133c2 <__hexnan+0x7a>
 801343e:	2300      	movs	r3, #0
 8013440:	f844 3c04 	str.w	r3, [r4, #-4]
 8013444:	2501      	movs	r5, #1
 8013446:	3c04      	subs	r4, #4
 8013448:	6822      	ldr	r2, [r4, #0]
 801344a:	f000 000f 	and.w	r0, r0, #15
 801344e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013452:	6020      	str	r0, [r4, #0]
 8013454:	e7b5      	b.n	80133c2 <__hexnan+0x7a>
 8013456:	2508      	movs	r5, #8
 8013458:	e7b3      	b.n	80133c2 <__hexnan+0x7a>
 801345a:	9b01      	ldr	r3, [sp, #4]
 801345c:	2b00      	cmp	r3, #0
 801345e:	d0dd      	beq.n	801341c <__hexnan+0xd4>
 8013460:	f1c3 0320 	rsb	r3, r3, #32
 8013464:	f04f 32ff 	mov.w	r2, #4294967295
 8013468:	40da      	lsrs	r2, r3
 801346a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801346e:	4013      	ands	r3, r2
 8013470:	f846 3c04 	str.w	r3, [r6, #-4]
 8013474:	e7d2      	b.n	801341c <__hexnan+0xd4>
 8013476:	3f04      	subs	r7, #4
 8013478:	e7d0      	b.n	801341c <__hexnan+0xd4>
 801347a:	2004      	movs	r0, #4
 801347c:	e7d5      	b.n	801342a <__hexnan+0xe2>
	...

08013480 <malloc>:
 8013480:	4b02      	ldr	r3, [pc, #8]	@ (801348c <malloc+0xc>)
 8013482:	4601      	mov	r1, r0
 8013484:	6818      	ldr	r0, [r3, #0]
 8013486:	f000 b825 	b.w	80134d4 <_malloc_r>
 801348a:	bf00      	nop
 801348c:	20000198 	.word	0x20000198

08013490 <sbrk_aligned>:
 8013490:	b570      	push	{r4, r5, r6, lr}
 8013492:	4e0f      	ldr	r6, [pc, #60]	@ (80134d0 <sbrk_aligned+0x40>)
 8013494:	460c      	mov	r4, r1
 8013496:	6831      	ldr	r1, [r6, #0]
 8013498:	4605      	mov	r5, r0
 801349a:	b911      	cbnz	r1, 80134a2 <sbrk_aligned+0x12>
 801349c:	f001 f822 	bl	80144e4 <_sbrk_r>
 80134a0:	6030      	str	r0, [r6, #0]
 80134a2:	4621      	mov	r1, r4
 80134a4:	4628      	mov	r0, r5
 80134a6:	f001 f81d 	bl	80144e4 <_sbrk_r>
 80134aa:	1c43      	adds	r3, r0, #1
 80134ac:	d103      	bne.n	80134b6 <sbrk_aligned+0x26>
 80134ae:	f04f 34ff 	mov.w	r4, #4294967295
 80134b2:	4620      	mov	r0, r4
 80134b4:	bd70      	pop	{r4, r5, r6, pc}
 80134b6:	1cc4      	adds	r4, r0, #3
 80134b8:	f024 0403 	bic.w	r4, r4, #3
 80134bc:	42a0      	cmp	r0, r4
 80134be:	d0f8      	beq.n	80134b2 <sbrk_aligned+0x22>
 80134c0:	1a21      	subs	r1, r4, r0
 80134c2:	4628      	mov	r0, r5
 80134c4:	f001 f80e 	bl	80144e4 <_sbrk_r>
 80134c8:	3001      	adds	r0, #1
 80134ca:	d1f2      	bne.n	80134b2 <sbrk_aligned+0x22>
 80134cc:	e7ef      	b.n	80134ae <sbrk_aligned+0x1e>
 80134ce:	bf00      	nop
 80134d0:	2000718c 	.word	0x2000718c

080134d4 <_malloc_r>:
 80134d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80134d8:	1ccd      	adds	r5, r1, #3
 80134da:	f025 0503 	bic.w	r5, r5, #3
 80134de:	3508      	adds	r5, #8
 80134e0:	2d0c      	cmp	r5, #12
 80134e2:	bf38      	it	cc
 80134e4:	250c      	movcc	r5, #12
 80134e6:	2d00      	cmp	r5, #0
 80134e8:	4606      	mov	r6, r0
 80134ea:	db01      	blt.n	80134f0 <_malloc_r+0x1c>
 80134ec:	42a9      	cmp	r1, r5
 80134ee:	d904      	bls.n	80134fa <_malloc_r+0x26>
 80134f0:	230c      	movs	r3, #12
 80134f2:	6033      	str	r3, [r6, #0]
 80134f4:	2000      	movs	r0, #0
 80134f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80135d0 <_malloc_r+0xfc>
 80134fe:	f000 f87b 	bl	80135f8 <__malloc_lock>
 8013502:	f8d8 3000 	ldr.w	r3, [r8]
 8013506:	461c      	mov	r4, r3
 8013508:	bb44      	cbnz	r4, 801355c <_malloc_r+0x88>
 801350a:	4629      	mov	r1, r5
 801350c:	4630      	mov	r0, r6
 801350e:	f7ff ffbf 	bl	8013490 <sbrk_aligned>
 8013512:	1c43      	adds	r3, r0, #1
 8013514:	4604      	mov	r4, r0
 8013516:	d158      	bne.n	80135ca <_malloc_r+0xf6>
 8013518:	f8d8 4000 	ldr.w	r4, [r8]
 801351c:	4627      	mov	r7, r4
 801351e:	2f00      	cmp	r7, #0
 8013520:	d143      	bne.n	80135aa <_malloc_r+0xd6>
 8013522:	2c00      	cmp	r4, #0
 8013524:	d04b      	beq.n	80135be <_malloc_r+0xea>
 8013526:	6823      	ldr	r3, [r4, #0]
 8013528:	4639      	mov	r1, r7
 801352a:	4630      	mov	r0, r6
 801352c:	eb04 0903 	add.w	r9, r4, r3
 8013530:	f000 ffd8 	bl	80144e4 <_sbrk_r>
 8013534:	4581      	cmp	r9, r0
 8013536:	d142      	bne.n	80135be <_malloc_r+0xea>
 8013538:	6821      	ldr	r1, [r4, #0]
 801353a:	1a6d      	subs	r5, r5, r1
 801353c:	4629      	mov	r1, r5
 801353e:	4630      	mov	r0, r6
 8013540:	f7ff ffa6 	bl	8013490 <sbrk_aligned>
 8013544:	3001      	adds	r0, #1
 8013546:	d03a      	beq.n	80135be <_malloc_r+0xea>
 8013548:	6823      	ldr	r3, [r4, #0]
 801354a:	442b      	add	r3, r5
 801354c:	6023      	str	r3, [r4, #0]
 801354e:	f8d8 3000 	ldr.w	r3, [r8]
 8013552:	685a      	ldr	r2, [r3, #4]
 8013554:	bb62      	cbnz	r2, 80135b0 <_malloc_r+0xdc>
 8013556:	f8c8 7000 	str.w	r7, [r8]
 801355a:	e00f      	b.n	801357c <_malloc_r+0xa8>
 801355c:	6822      	ldr	r2, [r4, #0]
 801355e:	1b52      	subs	r2, r2, r5
 8013560:	d420      	bmi.n	80135a4 <_malloc_r+0xd0>
 8013562:	2a0b      	cmp	r2, #11
 8013564:	d917      	bls.n	8013596 <_malloc_r+0xc2>
 8013566:	1961      	adds	r1, r4, r5
 8013568:	42a3      	cmp	r3, r4
 801356a:	6025      	str	r5, [r4, #0]
 801356c:	bf18      	it	ne
 801356e:	6059      	strne	r1, [r3, #4]
 8013570:	6863      	ldr	r3, [r4, #4]
 8013572:	bf08      	it	eq
 8013574:	f8c8 1000 	streq.w	r1, [r8]
 8013578:	5162      	str	r2, [r4, r5]
 801357a:	604b      	str	r3, [r1, #4]
 801357c:	4630      	mov	r0, r6
 801357e:	f000 f841 	bl	8013604 <__malloc_unlock>
 8013582:	f104 000b 	add.w	r0, r4, #11
 8013586:	1d23      	adds	r3, r4, #4
 8013588:	f020 0007 	bic.w	r0, r0, #7
 801358c:	1ac2      	subs	r2, r0, r3
 801358e:	bf1c      	itt	ne
 8013590:	1a1b      	subne	r3, r3, r0
 8013592:	50a3      	strne	r3, [r4, r2]
 8013594:	e7af      	b.n	80134f6 <_malloc_r+0x22>
 8013596:	6862      	ldr	r2, [r4, #4]
 8013598:	42a3      	cmp	r3, r4
 801359a:	bf0c      	ite	eq
 801359c:	f8c8 2000 	streq.w	r2, [r8]
 80135a0:	605a      	strne	r2, [r3, #4]
 80135a2:	e7eb      	b.n	801357c <_malloc_r+0xa8>
 80135a4:	4623      	mov	r3, r4
 80135a6:	6864      	ldr	r4, [r4, #4]
 80135a8:	e7ae      	b.n	8013508 <_malloc_r+0x34>
 80135aa:	463c      	mov	r4, r7
 80135ac:	687f      	ldr	r7, [r7, #4]
 80135ae:	e7b6      	b.n	801351e <_malloc_r+0x4a>
 80135b0:	461a      	mov	r2, r3
 80135b2:	685b      	ldr	r3, [r3, #4]
 80135b4:	42a3      	cmp	r3, r4
 80135b6:	d1fb      	bne.n	80135b0 <_malloc_r+0xdc>
 80135b8:	2300      	movs	r3, #0
 80135ba:	6053      	str	r3, [r2, #4]
 80135bc:	e7de      	b.n	801357c <_malloc_r+0xa8>
 80135be:	230c      	movs	r3, #12
 80135c0:	6033      	str	r3, [r6, #0]
 80135c2:	4630      	mov	r0, r6
 80135c4:	f000 f81e 	bl	8013604 <__malloc_unlock>
 80135c8:	e794      	b.n	80134f4 <_malloc_r+0x20>
 80135ca:	6005      	str	r5, [r0, #0]
 80135cc:	e7d6      	b.n	801357c <_malloc_r+0xa8>
 80135ce:	bf00      	nop
 80135d0:	20007190 	.word	0x20007190

080135d4 <__ascii_mbtowc>:
 80135d4:	b082      	sub	sp, #8
 80135d6:	b901      	cbnz	r1, 80135da <__ascii_mbtowc+0x6>
 80135d8:	a901      	add	r1, sp, #4
 80135da:	b142      	cbz	r2, 80135ee <__ascii_mbtowc+0x1a>
 80135dc:	b14b      	cbz	r3, 80135f2 <__ascii_mbtowc+0x1e>
 80135de:	7813      	ldrb	r3, [r2, #0]
 80135e0:	600b      	str	r3, [r1, #0]
 80135e2:	7812      	ldrb	r2, [r2, #0]
 80135e4:	1e10      	subs	r0, r2, #0
 80135e6:	bf18      	it	ne
 80135e8:	2001      	movne	r0, #1
 80135ea:	b002      	add	sp, #8
 80135ec:	4770      	bx	lr
 80135ee:	4610      	mov	r0, r2
 80135f0:	e7fb      	b.n	80135ea <__ascii_mbtowc+0x16>
 80135f2:	f06f 0001 	mvn.w	r0, #1
 80135f6:	e7f8      	b.n	80135ea <__ascii_mbtowc+0x16>

080135f8 <__malloc_lock>:
 80135f8:	4801      	ldr	r0, [pc, #4]	@ (8013600 <__malloc_lock+0x8>)
 80135fa:	f7fe bd34 	b.w	8012066 <__retarget_lock_acquire_recursive>
 80135fe:	bf00      	nop
 8013600:	20007188 	.word	0x20007188

08013604 <__malloc_unlock>:
 8013604:	4801      	ldr	r0, [pc, #4]	@ (801360c <__malloc_unlock+0x8>)
 8013606:	f7fe bd2f 	b.w	8012068 <__retarget_lock_release_recursive>
 801360a:	bf00      	nop
 801360c:	20007188 	.word	0x20007188

08013610 <_Balloc>:
 8013610:	b570      	push	{r4, r5, r6, lr}
 8013612:	69c6      	ldr	r6, [r0, #28]
 8013614:	4604      	mov	r4, r0
 8013616:	460d      	mov	r5, r1
 8013618:	b976      	cbnz	r6, 8013638 <_Balloc+0x28>
 801361a:	2010      	movs	r0, #16
 801361c:	f7ff ff30 	bl	8013480 <malloc>
 8013620:	4602      	mov	r2, r0
 8013622:	61e0      	str	r0, [r4, #28]
 8013624:	b920      	cbnz	r0, 8013630 <_Balloc+0x20>
 8013626:	4b18      	ldr	r3, [pc, #96]	@ (8013688 <_Balloc+0x78>)
 8013628:	4818      	ldr	r0, [pc, #96]	@ (801368c <_Balloc+0x7c>)
 801362a:	216b      	movs	r1, #107	@ 0x6b
 801362c:	f7fe fd3a 	bl	80120a4 <__assert_func>
 8013630:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013634:	6006      	str	r6, [r0, #0]
 8013636:	60c6      	str	r6, [r0, #12]
 8013638:	69e6      	ldr	r6, [r4, #28]
 801363a:	68f3      	ldr	r3, [r6, #12]
 801363c:	b183      	cbz	r3, 8013660 <_Balloc+0x50>
 801363e:	69e3      	ldr	r3, [r4, #28]
 8013640:	68db      	ldr	r3, [r3, #12]
 8013642:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013646:	b9b8      	cbnz	r0, 8013678 <_Balloc+0x68>
 8013648:	2101      	movs	r1, #1
 801364a:	fa01 f605 	lsl.w	r6, r1, r5
 801364e:	1d72      	adds	r2, r6, #5
 8013650:	0092      	lsls	r2, r2, #2
 8013652:	4620      	mov	r0, r4
 8013654:	f000 ff5d 	bl	8014512 <_calloc_r>
 8013658:	b160      	cbz	r0, 8013674 <_Balloc+0x64>
 801365a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801365e:	e00e      	b.n	801367e <_Balloc+0x6e>
 8013660:	2221      	movs	r2, #33	@ 0x21
 8013662:	2104      	movs	r1, #4
 8013664:	4620      	mov	r0, r4
 8013666:	f000 ff54 	bl	8014512 <_calloc_r>
 801366a:	69e3      	ldr	r3, [r4, #28]
 801366c:	60f0      	str	r0, [r6, #12]
 801366e:	68db      	ldr	r3, [r3, #12]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d1e4      	bne.n	801363e <_Balloc+0x2e>
 8013674:	2000      	movs	r0, #0
 8013676:	bd70      	pop	{r4, r5, r6, pc}
 8013678:	6802      	ldr	r2, [r0, #0]
 801367a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801367e:	2300      	movs	r3, #0
 8013680:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013684:	e7f7      	b.n	8013676 <_Balloc+0x66>
 8013686:	bf00      	nop
 8013688:	08016709 	.word	0x08016709
 801368c:	08016894 	.word	0x08016894

08013690 <_Bfree>:
 8013690:	b570      	push	{r4, r5, r6, lr}
 8013692:	69c6      	ldr	r6, [r0, #28]
 8013694:	4605      	mov	r5, r0
 8013696:	460c      	mov	r4, r1
 8013698:	b976      	cbnz	r6, 80136b8 <_Bfree+0x28>
 801369a:	2010      	movs	r0, #16
 801369c:	f7ff fef0 	bl	8013480 <malloc>
 80136a0:	4602      	mov	r2, r0
 80136a2:	61e8      	str	r0, [r5, #28]
 80136a4:	b920      	cbnz	r0, 80136b0 <_Bfree+0x20>
 80136a6:	4b09      	ldr	r3, [pc, #36]	@ (80136cc <_Bfree+0x3c>)
 80136a8:	4809      	ldr	r0, [pc, #36]	@ (80136d0 <_Bfree+0x40>)
 80136aa:	218f      	movs	r1, #143	@ 0x8f
 80136ac:	f7fe fcfa 	bl	80120a4 <__assert_func>
 80136b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80136b4:	6006      	str	r6, [r0, #0]
 80136b6:	60c6      	str	r6, [r0, #12]
 80136b8:	b13c      	cbz	r4, 80136ca <_Bfree+0x3a>
 80136ba:	69eb      	ldr	r3, [r5, #28]
 80136bc:	6862      	ldr	r2, [r4, #4]
 80136be:	68db      	ldr	r3, [r3, #12]
 80136c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80136c4:	6021      	str	r1, [r4, #0]
 80136c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80136ca:	bd70      	pop	{r4, r5, r6, pc}
 80136cc:	08016709 	.word	0x08016709
 80136d0:	08016894 	.word	0x08016894

080136d4 <__multadd>:
 80136d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136d8:	690d      	ldr	r5, [r1, #16]
 80136da:	4607      	mov	r7, r0
 80136dc:	460c      	mov	r4, r1
 80136de:	461e      	mov	r6, r3
 80136e0:	f101 0c14 	add.w	ip, r1, #20
 80136e4:	2000      	movs	r0, #0
 80136e6:	f8dc 3000 	ldr.w	r3, [ip]
 80136ea:	b299      	uxth	r1, r3
 80136ec:	fb02 6101 	mla	r1, r2, r1, r6
 80136f0:	0c1e      	lsrs	r6, r3, #16
 80136f2:	0c0b      	lsrs	r3, r1, #16
 80136f4:	fb02 3306 	mla	r3, r2, r6, r3
 80136f8:	b289      	uxth	r1, r1
 80136fa:	3001      	adds	r0, #1
 80136fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013700:	4285      	cmp	r5, r0
 8013702:	f84c 1b04 	str.w	r1, [ip], #4
 8013706:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801370a:	dcec      	bgt.n	80136e6 <__multadd+0x12>
 801370c:	b30e      	cbz	r6, 8013752 <__multadd+0x7e>
 801370e:	68a3      	ldr	r3, [r4, #8]
 8013710:	42ab      	cmp	r3, r5
 8013712:	dc19      	bgt.n	8013748 <__multadd+0x74>
 8013714:	6861      	ldr	r1, [r4, #4]
 8013716:	4638      	mov	r0, r7
 8013718:	3101      	adds	r1, #1
 801371a:	f7ff ff79 	bl	8013610 <_Balloc>
 801371e:	4680      	mov	r8, r0
 8013720:	b928      	cbnz	r0, 801372e <__multadd+0x5a>
 8013722:	4602      	mov	r2, r0
 8013724:	4b0c      	ldr	r3, [pc, #48]	@ (8013758 <__multadd+0x84>)
 8013726:	480d      	ldr	r0, [pc, #52]	@ (801375c <__multadd+0x88>)
 8013728:	21ba      	movs	r1, #186	@ 0xba
 801372a:	f7fe fcbb 	bl	80120a4 <__assert_func>
 801372e:	6922      	ldr	r2, [r4, #16]
 8013730:	3202      	adds	r2, #2
 8013732:	f104 010c 	add.w	r1, r4, #12
 8013736:	0092      	lsls	r2, r2, #2
 8013738:	300c      	adds	r0, #12
 801373a:	f7fe fc96 	bl	801206a <memcpy>
 801373e:	4621      	mov	r1, r4
 8013740:	4638      	mov	r0, r7
 8013742:	f7ff ffa5 	bl	8013690 <_Bfree>
 8013746:	4644      	mov	r4, r8
 8013748:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801374c:	3501      	adds	r5, #1
 801374e:	615e      	str	r6, [r3, #20]
 8013750:	6125      	str	r5, [r4, #16]
 8013752:	4620      	mov	r0, r4
 8013754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013758:	08016823 	.word	0x08016823
 801375c:	08016894 	.word	0x08016894

08013760 <__s2b>:
 8013760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013764:	460c      	mov	r4, r1
 8013766:	4615      	mov	r5, r2
 8013768:	461f      	mov	r7, r3
 801376a:	2209      	movs	r2, #9
 801376c:	3308      	adds	r3, #8
 801376e:	4606      	mov	r6, r0
 8013770:	fb93 f3f2 	sdiv	r3, r3, r2
 8013774:	2100      	movs	r1, #0
 8013776:	2201      	movs	r2, #1
 8013778:	429a      	cmp	r2, r3
 801377a:	db09      	blt.n	8013790 <__s2b+0x30>
 801377c:	4630      	mov	r0, r6
 801377e:	f7ff ff47 	bl	8013610 <_Balloc>
 8013782:	b940      	cbnz	r0, 8013796 <__s2b+0x36>
 8013784:	4602      	mov	r2, r0
 8013786:	4b19      	ldr	r3, [pc, #100]	@ (80137ec <__s2b+0x8c>)
 8013788:	4819      	ldr	r0, [pc, #100]	@ (80137f0 <__s2b+0x90>)
 801378a:	21d3      	movs	r1, #211	@ 0xd3
 801378c:	f7fe fc8a 	bl	80120a4 <__assert_func>
 8013790:	0052      	lsls	r2, r2, #1
 8013792:	3101      	adds	r1, #1
 8013794:	e7f0      	b.n	8013778 <__s2b+0x18>
 8013796:	9b08      	ldr	r3, [sp, #32]
 8013798:	6143      	str	r3, [r0, #20]
 801379a:	2d09      	cmp	r5, #9
 801379c:	f04f 0301 	mov.w	r3, #1
 80137a0:	6103      	str	r3, [r0, #16]
 80137a2:	dd16      	ble.n	80137d2 <__s2b+0x72>
 80137a4:	f104 0909 	add.w	r9, r4, #9
 80137a8:	46c8      	mov	r8, r9
 80137aa:	442c      	add	r4, r5
 80137ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 80137b0:	4601      	mov	r1, r0
 80137b2:	3b30      	subs	r3, #48	@ 0x30
 80137b4:	220a      	movs	r2, #10
 80137b6:	4630      	mov	r0, r6
 80137b8:	f7ff ff8c 	bl	80136d4 <__multadd>
 80137bc:	45a0      	cmp	r8, r4
 80137be:	d1f5      	bne.n	80137ac <__s2b+0x4c>
 80137c0:	f1a5 0408 	sub.w	r4, r5, #8
 80137c4:	444c      	add	r4, r9
 80137c6:	1b2d      	subs	r5, r5, r4
 80137c8:	1963      	adds	r3, r4, r5
 80137ca:	42bb      	cmp	r3, r7
 80137cc:	db04      	blt.n	80137d8 <__s2b+0x78>
 80137ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137d2:	340a      	adds	r4, #10
 80137d4:	2509      	movs	r5, #9
 80137d6:	e7f6      	b.n	80137c6 <__s2b+0x66>
 80137d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80137dc:	4601      	mov	r1, r0
 80137de:	3b30      	subs	r3, #48	@ 0x30
 80137e0:	220a      	movs	r2, #10
 80137e2:	4630      	mov	r0, r6
 80137e4:	f7ff ff76 	bl	80136d4 <__multadd>
 80137e8:	e7ee      	b.n	80137c8 <__s2b+0x68>
 80137ea:	bf00      	nop
 80137ec:	08016823 	.word	0x08016823
 80137f0:	08016894 	.word	0x08016894

080137f4 <__hi0bits>:
 80137f4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80137f8:	4603      	mov	r3, r0
 80137fa:	bf36      	itet	cc
 80137fc:	0403      	lslcc	r3, r0, #16
 80137fe:	2000      	movcs	r0, #0
 8013800:	2010      	movcc	r0, #16
 8013802:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013806:	bf3c      	itt	cc
 8013808:	021b      	lslcc	r3, r3, #8
 801380a:	3008      	addcc	r0, #8
 801380c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013810:	bf3c      	itt	cc
 8013812:	011b      	lslcc	r3, r3, #4
 8013814:	3004      	addcc	r0, #4
 8013816:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801381a:	bf3c      	itt	cc
 801381c:	009b      	lslcc	r3, r3, #2
 801381e:	3002      	addcc	r0, #2
 8013820:	2b00      	cmp	r3, #0
 8013822:	db05      	blt.n	8013830 <__hi0bits+0x3c>
 8013824:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013828:	f100 0001 	add.w	r0, r0, #1
 801382c:	bf08      	it	eq
 801382e:	2020      	moveq	r0, #32
 8013830:	4770      	bx	lr

08013832 <__lo0bits>:
 8013832:	6803      	ldr	r3, [r0, #0]
 8013834:	4602      	mov	r2, r0
 8013836:	f013 0007 	ands.w	r0, r3, #7
 801383a:	d00b      	beq.n	8013854 <__lo0bits+0x22>
 801383c:	07d9      	lsls	r1, r3, #31
 801383e:	d421      	bmi.n	8013884 <__lo0bits+0x52>
 8013840:	0798      	lsls	r0, r3, #30
 8013842:	bf49      	itett	mi
 8013844:	085b      	lsrmi	r3, r3, #1
 8013846:	089b      	lsrpl	r3, r3, #2
 8013848:	2001      	movmi	r0, #1
 801384a:	6013      	strmi	r3, [r2, #0]
 801384c:	bf5c      	itt	pl
 801384e:	6013      	strpl	r3, [r2, #0]
 8013850:	2002      	movpl	r0, #2
 8013852:	4770      	bx	lr
 8013854:	b299      	uxth	r1, r3
 8013856:	b909      	cbnz	r1, 801385c <__lo0bits+0x2a>
 8013858:	0c1b      	lsrs	r3, r3, #16
 801385a:	2010      	movs	r0, #16
 801385c:	b2d9      	uxtb	r1, r3
 801385e:	b909      	cbnz	r1, 8013864 <__lo0bits+0x32>
 8013860:	3008      	adds	r0, #8
 8013862:	0a1b      	lsrs	r3, r3, #8
 8013864:	0719      	lsls	r1, r3, #28
 8013866:	bf04      	itt	eq
 8013868:	091b      	lsreq	r3, r3, #4
 801386a:	3004      	addeq	r0, #4
 801386c:	0799      	lsls	r1, r3, #30
 801386e:	bf04      	itt	eq
 8013870:	089b      	lsreq	r3, r3, #2
 8013872:	3002      	addeq	r0, #2
 8013874:	07d9      	lsls	r1, r3, #31
 8013876:	d403      	bmi.n	8013880 <__lo0bits+0x4e>
 8013878:	085b      	lsrs	r3, r3, #1
 801387a:	f100 0001 	add.w	r0, r0, #1
 801387e:	d003      	beq.n	8013888 <__lo0bits+0x56>
 8013880:	6013      	str	r3, [r2, #0]
 8013882:	4770      	bx	lr
 8013884:	2000      	movs	r0, #0
 8013886:	4770      	bx	lr
 8013888:	2020      	movs	r0, #32
 801388a:	4770      	bx	lr

0801388c <__i2b>:
 801388c:	b510      	push	{r4, lr}
 801388e:	460c      	mov	r4, r1
 8013890:	2101      	movs	r1, #1
 8013892:	f7ff febd 	bl	8013610 <_Balloc>
 8013896:	4602      	mov	r2, r0
 8013898:	b928      	cbnz	r0, 80138a6 <__i2b+0x1a>
 801389a:	4b05      	ldr	r3, [pc, #20]	@ (80138b0 <__i2b+0x24>)
 801389c:	4805      	ldr	r0, [pc, #20]	@ (80138b4 <__i2b+0x28>)
 801389e:	f240 1145 	movw	r1, #325	@ 0x145
 80138a2:	f7fe fbff 	bl	80120a4 <__assert_func>
 80138a6:	2301      	movs	r3, #1
 80138a8:	6144      	str	r4, [r0, #20]
 80138aa:	6103      	str	r3, [r0, #16]
 80138ac:	bd10      	pop	{r4, pc}
 80138ae:	bf00      	nop
 80138b0:	08016823 	.word	0x08016823
 80138b4:	08016894 	.word	0x08016894

080138b8 <__multiply>:
 80138b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138bc:	4614      	mov	r4, r2
 80138be:	690a      	ldr	r2, [r1, #16]
 80138c0:	6923      	ldr	r3, [r4, #16]
 80138c2:	429a      	cmp	r2, r3
 80138c4:	bfa8      	it	ge
 80138c6:	4623      	movge	r3, r4
 80138c8:	460f      	mov	r7, r1
 80138ca:	bfa4      	itt	ge
 80138cc:	460c      	movge	r4, r1
 80138ce:	461f      	movge	r7, r3
 80138d0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80138d4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80138d8:	68a3      	ldr	r3, [r4, #8]
 80138da:	6861      	ldr	r1, [r4, #4]
 80138dc:	eb0a 0609 	add.w	r6, sl, r9
 80138e0:	42b3      	cmp	r3, r6
 80138e2:	b085      	sub	sp, #20
 80138e4:	bfb8      	it	lt
 80138e6:	3101      	addlt	r1, #1
 80138e8:	f7ff fe92 	bl	8013610 <_Balloc>
 80138ec:	b930      	cbnz	r0, 80138fc <__multiply+0x44>
 80138ee:	4602      	mov	r2, r0
 80138f0:	4b44      	ldr	r3, [pc, #272]	@ (8013a04 <__multiply+0x14c>)
 80138f2:	4845      	ldr	r0, [pc, #276]	@ (8013a08 <__multiply+0x150>)
 80138f4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80138f8:	f7fe fbd4 	bl	80120a4 <__assert_func>
 80138fc:	f100 0514 	add.w	r5, r0, #20
 8013900:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013904:	462b      	mov	r3, r5
 8013906:	2200      	movs	r2, #0
 8013908:	4543      	cmp	r3, r8
 801390a:	d321      	bcc.n	8013950 <__multiply+0x98>
 801390c:	f107 0114 	add.w	r1, r7, #20
 8013910:	f104 0214 	add.w	r2, r4, #20
 8013914:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013918:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801391c:	9302      	str	r3, [sp, #8]
 801391e:	1b13      	subs	r3, r2, r4
 8013920:	3b15      	subs	r3, #21
 8013922:	f023 0303 	bic.w	r3, r3, #3
 8013926:	3304      	adds	r3, #4
 8013928:	f104 0715 	add.w	r7, r4, #21
 801392c:	42ba      	cmp	r2, r7
 801392e:	bf38      	it	cc
 8013930:	2304      	movcc	r3, #4
 8013932:	9301      	str	r3, [sp, #4]
 8013934:	9b02      	ldr	r3, [sp, #8]
 8013936:	9103      	str	r1, [sp, #12]
 8013938:	428b      	cmp	r3, r1
 801393a:	d80c      	bhi.n	8013956 <__multiply+0x9e>
 801393c:	2e00      	cmp	r6, #0
 801393e:	dd03      	ble.n	8013948 <__multiply+0x90>
 8013940:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013944:	2b00      	cmp	r3, #0
 8013946:	d05b      	beq.n	8013a00 <__multiply+0x148>
 8013948:	6106      	str	r6, [r0, #16]
 801394a:	b005      	add	sp, #20
 801394c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013950:	f843 2b04 	str.w	r2, [r3], #4
 8013954:	e7d8      	b.n	8013908 <__multiply+0x50>
 8013956:	f8b1 a000 	ldrh.w	sl, [r1]
 801395a:	f1ba 0f00 	cmp.w	sl, #0
 801395e:	d024      	beq.n	80139aa <__multiply+0xf2>
 8013960:	f104 0e14 	add.w	lr, r4, #20
 8013964:	46a9      	mov	r9, r5
 8013966:	f04f 0c00 	mov.w	ip, #0
 801396a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801396e:	f8d9 3000 	ldr.w	r3, [r9]
 8013972:	fa1f fb87 	uxth.w	fp, r7
 8013976:	b29b      	uxth	r3, r3
 8013978:	fb0a 330b 	mla	r3, sl, fp, r3
 801397c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013980:	f8d9 7000 	ldr.w	r7, [r9]
 8013984:	4463      	add	r3, ip
 8013986:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801398a:	fb0a c70b 	mla	r7, sl, fp, ip
 801398e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013992:	b29b      	uxth	r3, r3
 8013994:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013998:	4572      	cmp	r2, lr
 801399a:	f849 3b04 	str.w	r3, [r9], #4
 801399e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80139a2:	d8e2      	bhi.n	801396a <__multiply+0xb2>
 80139a4:	9b01      	ldr	r3, [sp, #4]
 80139a6:	f845 c003 	str.w	ip, [r5, r3]
 80139aa:	9b03      	ldr	r3, [sp, #12]
 80139ac:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80139b0:	3104      	adds	r1, #4
 80139b2:	f1b9 0f00 	cmp.w	r9, #0
 80139b6:	d021      	beq.n	80139fc <__multiply+0x144>
 80139b8:	682b      	ldr	r3, [r5, #0]
 80139ba:	f104 0c14 	add.w	ip, r4, #20
 80139be:	46ae      	mov	lr, r5
 80139c0:	f04f 0a00 	mov.w	sl, #0
 80139c4:	f8bc b000 	ldrh.w	fp, [ip]
 80139c8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80139cc:	fb09 770b 	mla	r7, r9, fp, r7
 80139d0:	4457      	add	r7, sl
 80139d2:	b29b      	uxth	r3, r3
 80139d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80139d8:	f84e 3b04 	str.w	r3, [lr], #4
 80139dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80139e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80139e4:	f8be 3000 	ldrh.w	r3, [lr]
 80139e8:	fb09 330a 	mla	r3, r9, sl, r3
 80139ec:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80139f0:	4562      	cmp	r2, ip
 80139f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80139f6:	d8e5      	bhi.n	80139c4 <__multiply+0x10c>
 80139f8:	9f01      	ldr	r7, [sp, #4]
 80139fa:	51eb      	str	r3, [r5, r7]
 80139fc:	3504      	adds	r5, #4
 80139fe:	e799      	b.n	8013934 <__multiply+0x7c>
 8013a00:	3e01      	subs	r6, #1
 8013a02:	e79b      	b.n	801393c <__multiply+0x84>
 8013a04:	08016823 	.word	0x08016823
 8013a08:	08016894 	.word	0x08016894

08013a0c <__pow5mult>:
 8013a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a10:	4615      	mov	r5, r2
 8013a12:	f012 0203 	ands.w	r2, r2, #3
 8013a16:	4607      	mov	r7, r0
 8013a18:	460e      	mov	r6, r1
 8013a1a:	d007      	beq.n	8013a2c <__pow5mult+0x20>
 8013a1c:	4c25      	ldr	r4, [pc, #148]	@ (8013ab4 <__pow5mult+0xa8>)
 8013a1e:	3a01      	subs	r2, #1
 8013a20:	2300      	movs	r3, #0
 8013a22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013a26:	f7ff fe55 	bl	80136d4 <__multadd>
 8013a2a:	4606      	mov	r6, r0
 8013a2c:	10ad      	asrs	r5, r5, #2
 8013a2e:	d03d      	beq.n	8013aac <__pow5mult+0xa0>
 8013a30:	69fc      	ldr	r4, [r7, #28]
 8013a32:	b97c      	cbnz	r4, 8013a54 <__pow5mult+0x48>
 8013a34:	2010      	movs	r0, #16
 8013a36:	f7ff fd23 	bl	8013480 <malloc>
 8013a3a:	4602      	mov	r2, r0
 8013a3c:	61f8      	str	r0, [r7, #28]
 8013a3e:	b928      	cbnz	r0, 8013a4c <__pow5mult+0x40>
 8013a40:	4b1d      	ldr	r3, [pc, #116]	@ (8013ab8 <__pow5mult+0xac>)
 8013a42:	481e      	ldr	r0, [pc, #120]	@ (8013abc <__pow5mult+0xb0>)
 8013a44:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013a48:	f7fe fb2c 	bl	80120a4 <__assert_func>
 8013a4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013a50:	6004      	str	r4, [r0, #0]
 8013a52:	60c4      	str	r4, [r0, #12]
 8013a54:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013a58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013a5c:	b94c      	cbnz	r4, 8013a72 <__pow5mult+0x66>
 8013a5e:	f240 2171 	movw	r1, #625	@ 0x271
 8013a62:	4638      	mov	r0, r7
 8013a64:	f7ff ff12 	bl	801388c <__i2b>
 8013a68:	2300      	movs	r3, #0
 8013a6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8013a6e:	4604      	mov	r4, r0
 8013a70:	6003      	str	r3, [r0, #0]
 8013a72:	f04f 0900 	mov.w	r9, #0
 8013a76:	07eb      	lsls	r3, r5, #31
 8013a78:	d50a      	bpl.n	8013a90 <__pow5mult+0x84>
 8013a7a:	4631      	mov	r1, r6
 8013a7c:	4622      	mov	r2, r4
 8013a7e:	4638      	mov	r0, r7
 8013a80:	f7ff ff1a 	bl	80138b8 <__multiply>
 8013a84:	4631      	mov	r1, r6
 8013a86:	4680      	mov	r8, r0
 8013a88:	4638      	mov	r0, r7
 8013a8a:	f7ff fe01 	bl	8013690 <_Bfree>
 8013a8e:	4646      	mov	r6, r8
 8013a90:	106d      	asrs	r5, r5, #1
 8013a92:	d00b      	beq.n	8013aac <__pow5mult+0xa0>
 8013a94:	6820      	ldr	r0, [r4, #0]
 8013a96:	b938      	cbnz	r0, 8013aa8 <__pow5mult+0x9c>
 8013a98:	4622      	mov	r2, r4
 8013a9a:	4621      	mov	r1, r4
 8013a9c:	4638      	mov	r0, r7
 8013a9e:	f7ff ff0b 	bl	80138b8 <__multiply>
 8013aa2:	6020      	str	r0, [r4, #0]
 8013aa4:	f8c0 9000 	str.w	r9, [r0]
 8013aa8:	4604      	mov	r4, r0
 8013aaa:	e7e4      	b.n	8013a76 <__pow5mult+0x6a>
 8013aac:	4630      	mov	r0, r6
 8013aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ab2:	bf00      	nop
 8013ab4:	080168f0 	.word	0x080168f0
 8013ab8:	08016709 	.word	0x08016709
 8013abc:	08016894 	.word	0x08016894

08013ac0 <__lshift>:
 8013ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ac4:	460c      	mov	r4, r1
 8013ac6:	6849      	ldr	r1, [r1, #4]
 8013ac8:	6923      	ldr	r3, [r4, #16]
 8013aca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013ace:	68a3      	ldr	r3, [r4, #8]
 8013ad0:	4607      	mov	r7, r0
 8013ad2:	4691      	mov	r9, r2
 8013ad4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013ad8:	f108 0601 	add.w	r6, r8, #1
 8013adc:	42b3      	cmp	r3, r6
 8013ade:	db0b      	blt.n	8013af8 <__lshift+0x38>
 8013ae0:	4638      	mov	r0, r7
 8013ae2:	f7ff fd95 	bl	8013610 <_Balloc>
 8013ae6:	4605      	mov	r5, r0
 8013ae8:	b948      	cbnz	r0, 8013afe <__lshift+0x3e>
 8013aea:	4602      	mov	r2, r0
 8013aec:	4b28      	ldr	r3, [pc, #160]	@ (8013b90 <__lshift+0xd0>)
 8013aee:	4829      	ldr	r0, [pc, #164]	@ (8013b94 <__lshift+0xd4>)
 8013af0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013af4:	f7fe fad6 	bl	80120a4 <__assert_func>
 8013af8:	3101      	adds	r1, #1
 8013afa:	005b      	lsls	r3, r3, #1
 8013afc:	e7ee      	b.n	8013adc <__lshift+0x1c>
 8013afe:	2300      	movs	r3, #0
 8013b00:	f100 0114 	add.w	r1, r0, #20
 8013b04:	f100 0210 	add.w	r2, r0, #16
 8013b08:	4618      	mov	r0, r3
 8013b0a:	4553      	cmp	r3, sl
 8013b0c:	db33      	blt.n	8013b76 <__lshift+0xb6>
 8013b0e:	6920      	ldr	r0, [r4, #16]
 8013b10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013b14:	f104 0314 	add.w	r3, r4, #20
 8013b18:	f019 091f 	ands.w	r9, r9, #31
 8013b1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013b20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013b24:	d02b      	beq.n	8013b7e <__lshift+0xbe>
 8013b26:	f1c9 0e20 	rsb	lr, r9, #32
 8013b2a:	468a      	mov	sl, r1
 8013b2c:	2200      	movs	r2, #0
 8013b2e:	6818      	ldr	r0, [r3, #0]
 8013b30:	fa00 f009 	lsl.w	r0, r0, r9
 8013b34:	4310      	orrs	r0, r2
 8013b36:	f84a 0b04 	str.w	r0, [sl], #4
 8013b3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b3e:	459c      	cmp	ip, r3
 8013b40:	fa22 f20e 	lsr.w	r2, r2, lr
 8013b44:	d8f3      	bhi.n	8013b2e <__lshift+0x6e>
 8013b46:	ebac 0304 	sub.w	r3, ip, r4
 8013b4a:	3b15      	subs	r3, #21
 8013b4c:	f023 0303 	bic.w	r3, r3, #3
 8013b50:	3304      	adds	r3, #4
 8013b52:	f104 0015 	add.w	r0, r4, #21
 8013b56:	4584      	cmp	ip, r0
 8013b58:	bf38      	it	cc
 8013b5a:	2304      	movcc	r3, #4
 8013b5c:	50ca      	str	r2, [r1, r3]
 8013b5e:	b10a      	cbz	r2, 8013b64 <__lshift+0xa4>
 8013b60:	f108 0602 	add.w	r6, r8, #2
 8013b64:	3e01      	subs	r6, #1
 8013b66:	4638      	mov	r0, r7
 8013b68:	612e      	str	r6, [r5, #16]
 8013b6a:	4621      	mov	r1, r4
 8013b6c:	f7ff fd90 	bl	8013690 <_Bfree>
 8013b70:	4628      	mov	r0, r5
 8013b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b76:	f842 0f04 	str.w	r0, [r2, #4]!
 8013b7a:	3301      	adds	r3, #1
 8013b7c:	e7c5      	b.n	8013b0a <__lshift+0x4a>
 8013b7e:	3904      	subs	r1, #4
 8013b80:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b84:	f841 2f04 	str.w	r2, [r1, #4]!
 8013b88:	459c      	cmp	ip, r3
 8013b8a:	d8f9      	bhi.n	8013b80 <__lshift+0xc0>
 8013b8c:	e7ea      	b.n	8013b64 <__lshift+0xa4>
 8013b8e:	bf00      	nop
 8013b90:	08016823 	.word	0x08016823
 8013b94:	08016894 	.word	0x08016894

08013b98 <__mcmp>:
 8013b98:	690a      	ldr	r2, [r1, #16]
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	6900      	ldr	r0, [r0, #16]
 8013b9e:	1a80      	subs	r0, r0, r2
 8013ba0:	b530      	push	{r4, r5, lr}
 8013ba2:	d10e      	bne.n	8013bc2 <__mcmp+0x2a>
 8013ba4:	3314      	adds	r3, #20
 8013ba6:	3114      	adds	r1, #20
 8013ba8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013bac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013bb0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013bb4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013bb8:	4295      	cmp	r5, r2
 8013bba:	d003      	beq.n	8013bc4 <__mcmp+0x2c>
 8013bbc:	d205      	bcs.n	8013bca <__mcmp+0x32>
 8013bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8013bc2:	bd30      	pop	{r4, r5, pc}
 8013bc4:	42a3      	cmp	r3, r4
 8013bc6:	d3f3      	bcc.n	8013bb0 <__mcmp+0x18>
 8013bc8:	e7fb      	b.n	8013bc2 <__mcmp+0x2a>
 8013bca:	2001      	movs	r0, #1
 8013bcc:	e7f9      	b.n	8013bc2 <__mcmp+0x2a>
	...

08013bd0 <__mdiff>:
 8013bd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bd4:	4689      	mov	r9, r1
 8013bd6:	4606      	mov	r6, r0
 8013bd8:	4611      	mov	r1, r2
 8013bda:	4648      	mov	r0, r9
 8013bdc:	4614      	mov	r4, r2
 8013bde:	f7ff ffdb 	bl	8013b98 <__mcmp>
 8013be2:	1e05      	subs	r5, r0, #0
 8013be4:	d112      	bne.n	8013c0c <__mdiff+0x3c>
 8013be6:	4629      	mov	r1, r5
 8013be8:	4630      	mov	r0, r6
 8013bea:	f7ff fd11 	bl	8013610 <_Balloc>
 8013bee:	4602      	mov	r2, r0
 8013bf0:	b928      	cbnz	r0, 8013bfe <__mdiff+0x2e>
 8013bf2:	4b3f      	ldr	r3, [pc, #252]	@ (8013cf0 <__mdiff+0x120>)
 8013bf4:	f240 2137 	movw	r1, #567	@ 0x237
 8013bf8:	483e      	ldr	r0, [pc, #248]	@ (8013cf4 <__mdiff+0x124>)
 8013bfa:	f7fe fa53 	bl	80120a4 <__assert_func>
 8013bfe:	2301      	movs	r3, #1
 8013c00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013c04:	4610      	mov	r0, r2
 8013c06:	b003      	add	sp, #12
 8013c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c0c:	bfbc      	itt	lt
 8013c0e:	464b      	movlt	r3, r9
 8013c10:	46a1      	movlt	r9, r4
 8013c12:	4630      	mov	r0, r6
 8013c14:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013c18:	bfba      	itte	lt
 8013c1a:	461c      	movlt	r4, r3
 8013c1c:	2501      	movlt	r5, #1
 8013c1e:	2500      	movge	r5, #0
 8013c20:	f7ff fcf6 	bl	8013610 <_Balloc>
 8013c24:	4602      	mov	r2, r0
 8013c26:	b918      	cbnz	r0, 8013c30 <__mdiff+0x60>
 8013c28:	4b31      	ldr	r3, [pc, #196]	@ (8013cf0 <__mdiff+0x120>)
 8013c2a:	f240 2145 	movw	r1, #581	@ 0x245
 8013c2e:	e7e3      	b.n	8013bf8 <__mdiff+0x28>
 8013c30:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013c34:	6926      	ldr	r6, [r4, #16]
 8013c36:	60c5      	str	r5, [r0, #12]
 8013c38:	f109 0310 	add.w	r3, r9, #16
 8013c3c:	f109 0514 	add.w	r5, r9, #20
 8013c40:	f104 0e14 	add.w	lr, r4, #20
 8013c44:	f100 0b14 	add.w	fp, r0, #20
 8013c48:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013c4c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013c50:	9301      	str	r3, [sp, #4]
 8013c52:	46d9      	mov	r9, fp
 8013c54:	f04f 0c00 	mov.w	ip, #0
 8013c58:	9b01      	ldr	r3, [sp, #4]
 8013c5a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013c5e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013c62:	9301      	str	r3, [sp, #4]
 8013c64:	fa1f f38a 	uxth.w	r3, sl
 8013c68:	4619      	mov	r1, r3
 8013c6a:	b283      	uxth	r3, r0
 8013c6c:	1acb      	subs	r3, r1, r3
 8013c6e:	0c00      	lsrs	r0, r0, #16
 8013c70:	4463      	add	r3, ip
 8013c72:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013c76:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013c7a:	b29b      	uxth	r3, r3
 8013c7c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013c80:	4576      	cmp	r6, lr
 8013c82:	f849 3b04 	str.w	r3, [r9], #4
 8013c86:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013c8a:	d8e5      	bhi.n	8013c58 <__mdiff+0x88>
 8013c8c:	1b33      	subs	r3, r6, r4
 8013c8e:	3b15      	subs	r3, #21
 8013c90:	f023 0303 	bic.w	r3, r3, #3
 8013c94:	3415      	adds	r4, #21
 8013c96:	3304      	adds	r3, #4
 8013c98:	42a6      	cmp	r6, r4
 8013c9a:	bf38      	it	cc
 8013c9c:	2304      	movcc	r3, #4
 8013c9e:	441d      	add	r5, r3
 8013ca0:	445b      	add	r3, fp
 8013ca2:	461e      	mov	r6, r3
 8013ca4:	462c      	mov	r4, r5
 8013ca6:	4544      	cmp	r4, r8
 8013ca8:	d30e      	bcc.n	8013cc8 <__mdiff+0xf8>
 8013caa:	f108 0103 	add.w	r1, r8, #3
 8013cae:	1b49      	subs	r1, r1, r5
 8013cb0:	f021 0103 	bic.w	r1, r1, #3
 8013cb4:	3d03      	subs	r5, #3
 8013cb6:	45a8      	cmp	r8, r5
 8013cb8:	bf38      	it	cc
 8013cba:	2100      	movcc	r1, #0
 8013cbc:	440b      	add	r3, r1
 8013cbe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013cc2:	b191      	cbz	r1, 8013cea <__mdiff+0x11a>
 8013cc4:	6117      	str	r7, [r2, #16]
 8013cc6:	e79d      	b.n	8013c04 <__mdiff+0x34>
 8013cc8:	f854 1b04 	ldr.w	r1, [r4], #4
 8013ccc:	46e6      	mov	lr, ip
 8013cce:	0c08      	lsrs	r0, r1, #16
 8013cd0:	fa1c fc81 	uxtah	ip, ip, r1
 8013cd4:	4471      	add	r1, lr
 8013cd6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013cda:	b289      	uxth	r1, r1
 8013cdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013ce0:	f846 1b04 	str.w	r1, [r6], #4
 8013ce4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013ce8:	e7dd      	b.n	8013ca6 <__mdiff+0xd6>
 8013cea:	3f01      	subs	r7, #1
 8013cec:	e7e7      	b.n	8013cbe <__mdiff+0xee>
 8013cee:	bf00      	nop
 8013cf0:	08016823 	.word	0x08016823
 8013cf4:	08016894 	.word	0x08016894

08013cf8 <__ulp>:
 8013cf8:	b082      	sub	sp, #8
 8013cfa:	ed8d 0b00 	vstr	d0, [sp]
 8013cfe:	9a01      	ldr	r2, [sp, #4]
 8013d00:	4b0f      	ldr	r3, [pc, #60]	@ (8013d40 <__ulp+0x48>)
 8013d02:	4013      	ands	r3, r2
 8013d04:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	dc08      	bgt.n	8013d1e <__ulp+0x26>
 8013d0c:	425b      	negs	r3, r3
 8013d0e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8013d12:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013d16:	da04      	bge.n	8013d22 <__ulp+0x2a>
 8013d18:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8013d1c:	4113      	asrs	r3, r2
 8013d1e:	2200      	movs	r2, #0
 8013d20:	e008      	b.n	8013d34 <__ulp+0x3c>
 8013d22:	f1a2 0314 	sub.w	r3, r2, #20
 8013d26:	2b1e      	cmp	r3, #30
 8013d28:	bfda      	itte	le
 8013d2a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8013d2e:	40da      	lsrle	r2, r3
 8013d30:	2201      	movgt	r2, #1
 8013d32:	2300      	movs	r3, #0
 8013d34:	4619      	mov	r1, r3
 8013d36:	4610      	mov	r0, r2
 8013d38:	ec41 0b10 	vmov	d0, r0, r1
 8013d3c:	b002      	add	sp, #8
 8013d3e:	4770      	bx	lr
 8013d40:	7ff00000 	.word	0x7ff00000

08013d44 <__b2d>:
 8013d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d48:	6906      	ldr	r6, [r0, #16]
 8013d4a:	f100 0814 	add.w	r8, r0, #20
 8013d4e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8013d52:	1f37      	subs	r7, r6, #4
 8013d54:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013d58:	4610      	mov	r0, r2
 8013d5a:	f7ff fd4b 	bl	80137f4 <__hi0bits>
 8013d5e:	f1c0 0320 	rsb	r3, r0, #32
 8013d62:	280a      	cmp	r0, #10
 8013d64:	600b      	str	r3, [r1, #0]
 8013d66:	491b      	ldr	r1, [pc, #108]	@ (8013dd4 <__b2d+0x90>)
 8013d68:	dc15      	bgt.n	8013d96 <__b2d+0x52>
 8013d6a:	f1c0 0c0b 	rsb	ip, r0, #11
 8013d6e:	fa22 f30c 	lsr.w	r3, r2, ip
 8013d72:	45b8      	cmp	r8, r7
 8013d74:	ea43 0501 	orr.w	r5, r3, r1
 8013d78:	bf34      	ite	cc
 8013d7a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013d7e:	2300      	movcs	r3, #0
 8013d80:	3015      	adds	r0, #21
 8013d82:	fa02 f000 	lsl.w	r0, r2, r0
 8013d86:	fa23 f30c 	lsr.w	r3, r3, ip
 8013d8a:	4303      	orrs	r3, r0
 8013d8c:	461c      	mov	r4, r3
 8013d8e:	ec45 4b10 	vmov	d0, r4, r5
 8013d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d96:	45b8      	cmp	r8, r7
 8013d98:	bf3a      	itte	cc
 8013d9a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013d9e:	f1a6 0708 	subcc.w	r7, r6, #8
 8013da2:	2300      	movcs	r3, #0
 8013da4:	380b      	subs	r0, #11
 8013da6:	d012      	beq.n	8013dce <__b2d+0x8a>
 8013da8:	f1c0 0120 	rsb	r1, r0, #32
 8013dac:	fa23 f401 	lsr.w	r4, r3, r1
 8013db0:	4082      	lsls	r2, r0
 8013db2:	4322      	orrs	r2, r4
 8013db4:	4547      	cmp	r7, r8
 8013db6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8013dba:	bf8c      	ite	hi
 8013dbc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8013dc0:	2200      	movls	r2, #0
 8013dc2:	4083      	lsls	r3, r0
 8013dc4:	40ca      	lsrs	r2, r1
 8013dc6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8013dca:	4313      	orrs	r3, r2
 8013dcc:	e7de      	b.n	8013d8c <__b2d+0x48>
 8013dce:	ea42 0501 	orr.w	r5, r2, r1
 8013dd2:	e7db      	b.n	8013d8c <__b2d+0x48>
 8013dd4:	3ff00000 	.word	0x3ff00000

08013dd8 <__d2b>:
 8013dd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013ddc:	460f      	mov	r7, r1
 8013dde:	2101      	movs	r1, #1
 8013de0:	ec59 8b10 	vmov	r8, r9, d0
 8013de4:	4616      	mov	r6, r2
 8013de6:	f7ff fc13 	bl	8013610 <_Balloc>
 8013dea:	4604      	mov	r4, r0
 8013dec:	b930      	cbnz	r0, 8013dfc <__d2b+0x24>
 8013dee:	4602      	mov	r2, r0
 8013df0:	4b23      	ldr	r3, [pc, #140]	@ (8013e80 <__d2b+0xa8>)
 8013df2:	4824      	ldr	r0, [pc, #144]	@ (8013e84 <__d2b+0xac>)
 8013df4:	f240 310f 	movw	r1, #783	@ 0x30f
 8013df8:	f7fe f954 	bl	80120a4 <__assert_func>
 8013dfc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013e00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013e04:	b10d      	cbz	r5, 8013e0a <__d2b+0x32>
 8013e06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013e0a:	9301      	str	r3, [sp, #4]
 8013e0c:	f1b8 0300 	subs.w	r3, r8, #0
 8013e10:	d023      	beq.n	8013e5a <__d2b+0x82>
 8013e12:	4668      	mov	r0, sp
 8013e14:	9300      	str	r3, [sp, #0]
 8013e16:	f7ff fd0c 	bl	8013832 <__lo0bits>
 8013e1a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013e1e:	b1d0      	cbz	r0, 8013e56 <__d2b+0x7e>
 8013e20:	f1c0 0320 	rsb	r3, r0, #32
 8013e24:	fa02 f303 	lsl.w	r3, r2, r3
 8013e28:	430b      	orrs	r3, r1
 8013e2a:	40c2      	lsrs	r2, r0
 8013e2c:	6163      	str	r3, [r4, #20]
 8013e2e:	9201      	str	r2, [sp, #4]
 8013e30:	9b01      	ldr	r3, [sp, #4]
 8013e32:	61a3      	str	r3, [r4, #24]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	bf0c      	ite	eq
 8013e38:	2201      	moveq	r2, #1
 8013e3a:	2202      	movne	r2, #2
 8013e3c:	6122      	str	r2, [r4, #16]
 8013e3e:	b1a5      	cbz	r5, 8013e6a <__d2b+0x92>
 8013e40:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013e44:	4405      	add	r5, r0
 8013e46:	603d      	str	r5, [r7, #0]
 8013e48:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013e4c:	6030      	str	r0, [r6, #0]
 8013e4e:	4620      	mov	r0, r4
 8013e50:	b003      	add	sp, #12
 8013e52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e56:	6161      	str	r1, [r4, #20]
 8013e58:	e7ea      	b.n	8013e30 <__d2b+0x58>
 8013e5a:	a801      	add	r0, sp, #4
 8013e5c:	f7ff fce9 	bl	8013832 <__lo0bits>
 8013e60:	9b01      	ldr	r3, [sp, #4]
 8013e62:	6163      	str	r3, [r4, #20]
 8013e64:	3020      	adds	r0, #32
 8013e66:	2201      	movs	r2, #1
 8013e68:	e7e8      	b.n	8013e3c <__d2b+0x64>
 8013e6a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013e6e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013e72:	6038      	str	r0, [r7, #0]
 8013e74:	6918      	ldr	r0, [r3, #16]
 8013e76:	f7ff fcbd 	bl	80137f4 <__hi0bits>
 8013e7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013e7e:	e7e5      	b.n	8013e4c <__d2b+0x74>
 8013e80:	08016823 	.word	0x08016823
 8013e84:	08016894 	.word	0x08016894

08013e88 <__ratio>:
 8013e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e8c:	b085      	sub	sp, #20
 8013e8e:	e9cd 1000 	strd	r1, r0, [sp]
 8013e92:	a902      	add	r1, sp, #8
 8013e94:	f7ff ff56 	bl	8013d44 <__b2d>
 8013e98:	9800      	ldr	r0, [sp, #0]
 8013e9a:	a903      	add	r1, sp, #12
 8013e9c:	ec55 4b10 	vmov	r4, r5, d0
 8013ea0:	f7ff ff50 	bl	8013d44 <__b2d>
 8013ea4:	9b01      	ldr	r3, [sp, #4]
 8013ea6:	6919      	ldr	r1, [r3, #16]
 8013ea8:	9b00      	ldr	r3, [sp, #0]
 8013eaa:	691b      	ldr	r3, [r3, #16]
 8013eac:	1ac9      	subs	r1, r1, r3
 8013eae:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8013eb2:	1a9b      	subs	r3, r3, r2
 8013eb4:	ec5b ab10 	vmov	sl, fp, d0
 8013eb8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	bfce      	itee	gt
 8013ec0:	462a      	movgt	r2, r5
 8013ec2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013ec6:	465a      	movle	r2, fp
 8013ec8:	462f      	mov	r7, r5
 8013eca:	46d9      	mov	r9, fp
 8013ecc:	bfcc      	ite	gt
 8013ece:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8013ed2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8013ed6:	464b      	mov	r3, r9
 8013ed8:	4652      	mov	r2, sl
 8013eda:	4620      	mov	r0, r4
 8013edc:	4639      	mov	r1, r7
 8013ede:	f7ec fcd5 	bl	800088c <__aeabi_ddiv>
 8013ee2:	ec41 0b10 	vmov	d0, r0, r1
 8013ee6:	b005      	add	sp, #20
 8013ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013eec <__copybits>:
 8013eec:	3901      	subs	r1, #1
 8013eee:	b570      	push	{r4, r5, r6, lr}
 8013ef0:	1149      	asrs	r1, r1, #5
 8013ef2:	6914      	ldr	r4, [r2, #16]
 8013ef4:	3101      	adds	r1, #1
 8013ef6:	f102 0314 	add.w	r3, r2, #20
 8013efa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013efe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013f02:	1f05      	subs	r5, r0, #4
 8013f04:	42a3      	cmp	r3, r4
 8013f06:	d30c      	bcc.n	8013f22 <__copybits+0x36>
 8013f08:	1aa3      	subs	r3, r4, r2
 8013f0a:	3b11      	subs	r3, #17
 8013f0c:	f023 0303 	bic.w	r3, r3, #3
 8013f10:	3211      	adds	r2, #17
 8013f12:	42a2      	cmp	r2, r4
 8013f14:	bf88      	it	hi
 8013f16:	2300      	movhi	r3, #0
 8013f18:	4418      	add	r0, r3
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	4288      	cmp	r0, r1
 8013f1e:	d305      	bcc.n	8013f2c <__copybits+0x40>
 8013f20:	bd70      	pop	{r4, r5, r6, pc}
 8013f22:	f853 6b04 	ldr.w	r6, [r3], #4
 8013f26:	f845 6f04 	str.w	r6, [r5, #4]!
 8013f2a:	e7eb      	b.n	8013f04 <__copybits+0x18>
 8013f2c:	f840 3b04 	str.w	r3, [r0], #4
 8013f30:	e7f4      	b.n	8013f1c <__copybits+0x30>

08013f32 <__any_on>:
 8013f32:	f100 0214 	add.w	r2, r0, #20
 8013f36:	6900      	ldr	r0, [r0, #16]
 8013f38:	114b      	asrs	r3, r1, #5
 8013f3a:	4298      	cmp	r0, r3
 8013f3c:	b510      	push	{r4, lr}
 8013f3e:	db11      	blt.n	8013f64 <__any_on+0x32>
 8013f40:	dd0a      	ble.n	8013f58 <__any_on+0x26>
 8013f42:	f011 011f 	ands.w	r1, r1, #31
 8013f46:	d007      	beq.n	8013f58 <__any_on+0x26>
 8013f48:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013f4c:	fa24 f001 	lsr.w	r0, r4, r1
 8013f50:	fa00 f101 	lsl.w	r1, r0, r1
 8013f54:	428c      	cmp	r4, r1
 8013f56:	d10b      	bne.n	8013f70 <__any_on+0x3e>
 8013f58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013f5c:	4293      	cmp	r3, r2
 8013f5e:	d803      	bhi.n	8013f68 <__any_on+0x36>
 8013f60:	2000      	movs	r0, #0
 8013f62:	bd10      	pop	{r4, pc}
 8013f64:	4603      	mov	r3, r0
 8013f66:	e7f7      	b.n	8013f58 <__any_on+0x26>
 8013f68:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013f6c:	2900      	cmp	r1, #0
 8013f6e:	d0f5      	beq.n	8013f5c <__any_on+0x2a>
 8013f70:	2001      	movs	r0, #1
 8013f72:	e7f6      	b.n	8013f62 <__any_on+0x30>

08013f74 <_strtol_l.constprop.0>:
 8013f74:	2b24      	cmp	r3, #36	@ 0x24
 8013f76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f7a:	4686      	mov	lr, r0
 8013f7c:	4690      	mov	r8, r2
 8013f7e:	d801      	bhi.n	8013f84 <_strtol_l.constprop.0+0x10>
 8013f80:	2b01      	cmp	r3, #1
 8013f82:	d106      	bne.n	8013f92 <_strtol_l.constprop.0+0x1e>
 8013f84:	f7fe f844 	bl	8012010 <__errno>
 8013f88:	2316      	movs	r3, #22
 8013f8a:	6003      	str	r3, [r0, #0]
 8013f8c:	2000      	movs	r0, #0
 8013f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f92:	4834      	ldr	r0, [pc, #208]	@ (8014064 <_strtol_l.constprop.0+0xf0>)
 8013f94:	460d      	mov	r5, r1
 8013f96:	462a      	mov	r2, r5
 8013f98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013f9c:	5d06      	ldrb	r6, [r0, r4]
 8013f9e:	f016 0608 	ands.w	r6, r6, #8
 8013fa2:	d1f8      	bne.n	8013f96 <_strtol_l.constprop.0+0x22>
 8013fa4:	2c2d      	cmp	r4, #45	@ 0x2d
 8013fa6:	d12d      	bne.n	8014004 <_strtol_l.constprop.0+0x90>
 8013fa8:	782c      	ldrb	r4, [r5, #0]
 8013faa:	2601      	movs	r6, #1
 8013fac:	1c95      	adds	r5, r2, #2
 8013fae:	f033 0210 	bics.w	r2, r3, #16
 8013fb2:	d109      	bne.n	8013fc8 <_strtol_l.constprop.0+0x54>
 8013fb4:	2c30      	cmp	r4, #48	@ 0x30
 8013fb6:	d12a      	bne.n	801400e <_strtol_l.constprop.0+0x9a>
 8013fb8:	782a      	ldrb	r2, [r5, #0]
 8013fba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013fbe:	2a58      	cmp	r2, #88	@ 0x58
 8013fc0:	d125      	bne.n	801400e <_strtol_l.constprop.0+0x9a>
 8013fc2:	786c      	ldrb	r4, [r5, #1]
 8013fc4:	2310      	movs	r3, #16
 8013fc6:	3502      	adds	r5, #2
 8013fc8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8013fcc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013fd0:	2200      	movs	r2, #0
 8013fd2:	fbbc f9f3 	udiv	r9, ip, r3
 8013fd6:	4610      	mov	r0, r2
 8013fd8:	fb03 ca19 	mls	sl, r3, r9, ip
 8013fdc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8013fe0:	2f09      	cmp	r7, #9
 8013fe2:	d81b      	bhi.n	801401c <_strtol_l.constprop.0+0xa8>
 8013fe4:	463c      	mov	r4, r7
 8013fe6:	42a3      	cmp	r3, r4
 8013fe8:	dd27      	ble.n	801403a <_strtol_l.constprop.0+0xc6>
 8013fea:	1c57      	adds	r7, r2, #1
 8013fec:	d007      	beq.n	8013ffe <_strtol_l.constprop.0+0x8a>
 8013fee:	4581      	cmp	r9, r0
 8013ff0:	d320      	bcc.n	8014034 <_strtol_l.constprop.0+0xc0>
 8013ff2:	d101      	bne.n	8013ff8 <_strtol_l.constprop.0+0x84>
 8013ff4:	45a2      	cmp	sl, r4
 8013ff6:	db1d      	blt.n	8014034 <_strtol_l.constprop.0+0xc0>
 8013ff8:	fb00 4003 	mla	r0, r0, r3, r4
 8013ffc:	2201      	movs	r2, #1
 8013ffe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014002:	e7eb      	b.n	8013fdc <_strtol_l.constprop.0+0x68>
 8014004:	2c2b      	cmp	r4, #43	@ 0x2b
 8014006:	bf04      	itt	eq
 8014008:	782c      	ldrbeq	r4, [r5, #0]
 801400a:	1c95      	addeq	r5, r2, #2
 801400c:	e7cf      	b.n	8013fae <_strtol_l.constprop.0+0x3a>
 801400e:	2b00      	cmp	r3, #0
 8014010:	d1da      	bne.n	8013fc8 <_strtol_l.constprop.0+0x54>
 8014012:	2c30      	cmp	r4, #48	@ 0x30
 8014014:	bf0c      	ite	eq
 8014016:	2308      	moveq	r3, #8
 8014018:	230a      	movne	r3, #10
 801401a:	e7d5      	b.n	8013fc8 <_strtol_l.constprop.0+0x54>
 801401c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8014020:	2f19      	cmp	r7, #25
 8014022:	d801      	bhi.n	8014028 <_strtol_l.constprop.0+0xb4>
 8014024:	3c37      	subs	r4, #55	@ 0x37
 8014026:	e7de      	b.n	8013fe6 <_strtol_l.constprop.0+0x72>
 8014028:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801402c:	2f19      	cmp	r7, #25
 801402e:	d804      	bhi.n	801403a <_strtol_l.constprop.0+0xc6>
 8014030:	3c57      	subs	r4, #87	@ 0x57
 8014032:	e7d8      	b.n	8013fe6 <_strtol_l.constprop.0+0x72>
 8014034:	f04f 32ff 	mov.w	r2, #4294967295
 8014038:	e7e1      	b.n	8013ffe <_strtol_l.constprop.0+0x8a>
 801403a:	1c53      	adds	r3, r2, #1
 801403c:	d108      	bne.n	8014050 <_strtol_l.constprop.0+0xdc>
 801403e:	2322      	movs	r3, #34	@ 0x22
 8014040:	f8ce 3000 	str.w	r3, [lr]
 8014044:	4660      	mov	r0, ip
 8014046:	f1b8 0f00 	cmp.w	r8, #0
 801404a:	d0a0      	beq.n	8013f8e <_strtol_l.constprop.0+0x1a>
 801404c:	1e69      	subs	r1, r5, #1
 801404e:	e006      	b.n	801405e <_strtol_l.constprop.0+0xea>
 8014050:	b106      	cbz	r6, 8014054 <_strtol_l.constprop.0+0xe0>
 8014052:	4240      	negs	r0, r0
 8014054:	f1b8 0f00 	cmp.w	r8, #0
 8014058:	d099      	beq.n	8013f8e <_strtol_l.constprop.0+0x1a>
 801405a:	2a00      	cmp	r2, #0
 801405c:	d1f6      	bne.n	801404c <_strtol_l.constprop.0+0xd8>
 801405e:	f8c8 1000 	str.w	r1, [r8]
 8014062:	e794      	b.n	8013f8e <_strtol_l.constprop.0+0x1a>
 8014064:	080169f1 	.word	0x080169f1

08014068 <_strtol_r>:
 8014068:	f7ff bf84 	b.w	8013f74 <_strtol_l.constprop.0>

0801406c <__ascii_wctomb>:
 801406c:	4603      	mov	r3, r0
 801406e:	4608      	mov	r0, r1
 8014070:	b141      	cbz	r1, 8014084 <__ascii_wctomb+0x18>
 8014072:	2aff      	cmp	r2, #255	@ 0xff
 8014074:	d904      	bls.n	8014080 <__ascii_wctomb+0x14>
 8014076:	228a      	movs	r2, #138	@ 0x8a
 8014078:	601a      	str	r2, [r3, #0]
 801407a:	f04f 30ff 	mov.w	r0, #4294967295
 801407e:	4770      	bx	lr
 8014080:	700a      	strb	r2, [r1, #0]
 8014082:	2001      	movs	r0, #1
 8014084:	4770      	bx	lr

08014086 <__ssputs_r>:
 8014086:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801408a:	688e      	ldr	r6, [r1, #8]
 801408c:	461f      	mov	r7, r3
 801408e:	42be      	cmp	r6, r7
 8014090:	680b      	ldr	r3, [r1, #0]
 8014092:	4682      	mov	sl, r0
 8014094:	460c      	mov	r4, r1
 8014096:	4690      	mov	r8, r2
 8014098:	d82d      	bhi.n	80140f6 <__ssputs_r+0x70>
 801409a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801409e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80140a2:	d026      	beq.n	80140f2 <__ssputs_r+0x6c>
 80140a4:	6965      	ldr	r5, [r4, #20]
 80140a6:	6909      	ldr	r1, [r1, #16]
 80140a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80140ac:	eba3 0901 	sub.w	r9, r3, r1
 80140b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80140b4:	1c7b      	adds	r3, r7, #1
 80140b6:	444b      	add	r3, r9
 80140b8:	106d      	asrs	r5, r5, #1
 80140ba:	429d      	cmp	r5, r3
 80140bc:	bf38      	it	cc
 80140be:	461d      	movcc	r5, r3
 80140c0:	0553      	lsls	r3, r2, #21
 80140c2:	d527      	bpl.n	8014114 <__ssputs_r+0x8e>
 80140c4:	4629      	mov	r1, r5
 80140c6:	f7ff fa05 	bl	80134d4 <_malloc_r>
 80140ca:	4606      	mov	r6, r0
 80140cc:	b360      	cbz	r0, 8014128 <__ssputs_r+0xa2>
 80140ce:	6921      	ldr	r1, [r4, #16]
 80140d0:	464a      	mov	r2, r9
 80140d2:	f7fd ffca 	bl	801206a <memcpy>
 80140d6:	89a3      	ldrh	r3, [r4, #12]
 80140d8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80140dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80140e0:	81a3      	strh	r3, [r4, #12]
 80140e2:	6126      	str	r6, [r4, #16]
 80140e4:	6165      	str	r5, [r4, #20]
 80140e6:	444e      	add	r6, r9
 80140e8:	eba5 0509 	sub.w	r5, r5, r9
 80140ec:	6026      	str	r6, [r4, #0]
 80140ee:	60a5      	str	r5, [r4, #8]
 80140f0:	463e      	mov	r6, r7
 80140f2:	42be      	cmp	r6, r7
 80140f4:	d900      	bls.n	80140f8 <__ssputs_r+0x72>
 80140f6:	463e      	mov	r6, r7
 80140f8:	6820      	ldr	r0, [r4, #0]
 80140fa:	4632      	mov	r2, r6
 80140fc:	4641      	mov	r1, r8
 80140fe:	f000 f9d7 	bl	80144b0 <memmove>
 8014102:	68a3      	ldr	r3, [r4, #8]
 8014104:	1b9b      	subs	r3, r3, r6
 8014106:	60a3      	str	r3, [r4, #8]
 8014108:	6823      	ldr	r3, [r4, #0]
 801410a:	4433      	add	r3, r6
 801410c:	6023      	str	r3, [r4, #0]
 801410e:	2000      	movs	r0, #0
 8014110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014114:	462a      	mov	r2, r5
 8014116:	f000 fa10 	bl	801453a <_realloc_r>
 801411a:	4606      	mov	r6, r0
 801411c:	2800      	cmp	r0, #0
 801411e:	d1e0      	bne.n	80140e2 <__ssputs_r+0x5c>
 8014120:	6921      	ldr	r1, [r4, #16]
 8014122:	4650      	mov	r0, sl
 8014124:	f7fe fe28 	bl	8012d78 <_free_r>
 8014128:	230c      	movs	r3, #12
 801412a:	f8ca 3000 	str.w	r3, [sl]
 801412e:	89a3      	ldrh	r3, [r4, #12]
 8014130:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014134:	81a3      	strh	r3, [r4, #12]
 8014136:	f04f 30ff 	mov.w	r0, #4294967295
 801413a:	e7e9      	b.n	8014110 <__ssputs_r+0x8a>

0801413c <_svfiprintf_r>:
 801413c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014140:	4698      	mov	r8, r3
 8014142:	898b      	ldrh	r3, [r1, #12]
 8014144:	061b      	lsls	r3, r3, #24
 8014146:	b09d      	sub	sp, #116	@ 0x74
 8014148:	4607      	mov	r7, r0
 801414a:	460d      	mov	r5, r1
 801414c:	4614      	mov	r4, r2
 801414e:	d510      	bpl.n	8014172 <_svfiprintf_r+0x36>
 8014150:	690b      	ldr	r3, [r1, #16]
 8014152:	b973      	cbnz	r3, 8014172 <_svfiprintf_r+0x36>
 8014154:	2140      	movs	r1, #64	@ 0x40
 8014156:	f7ff f9bd 	bl	80134d4 <_malloc_r>
 801415a:	6028      	str	r0, [r5, #0]
 801415c:	6128      	str	r0, [r5, #16]
 801415e:	b930      	cbnz	r0, 801416e <_svfiprintf_r+0x32>
 8014160:	230c      	movs	r3, #12
 8014162:	603b      	str	r3, [r7, #0]
 8014164:	f04f 30ff 	mov.w	r0, #4294967295
 8014168:	b01d      	add	sp, #116	@ 0x74
 801416a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801416e:	2340      	movs	r3, #64	@ 0x40
 8014170:	616b      	str	r3, [r5, #20]
 8014172:	2300      	movs	r3, #0
 8014174:	9309      	str	r3, [sp, #36]	@ 0x24
 8014176:	2320      	movs	r3, #32
 8014178:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801417c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014180:	2330      	movs	r3, #48	@ 0x30
 8014182:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014320 <_svfiprintf_r+0x1e4>
 8014186:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801418a:	f04f 0901 	mov.w	r9, #1
 801418e:	4623      	mov	r3, r4
 8014190:	469a      	mov	sl, r3
 8014192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014196:	b10a      	cbz	r2, 801419c <_svfiprintf_r+0x60>
 8014198:	2a25      	cmp	r2, #37	@ 0x25
 801419a:	d1f9      	bne.n	8014190 <_svfiprintf_r+0x54>
 801419c:	ebba 0b04 	subs.w	fp, sl, r4
 80141a0:	d00b      	beq.n	80141ba <_svfiprintf_r+0x7e>
 80141a2:	465b      	mov	r3, fp
 80141a4:	4622      	mov	r2, r4
 80141a6:	4629      	mov	r1, r5
 80141a8:	4638      	mov	r0, r7
 80141aa:	f7ff ff6c 	bl	8014086 <__ssputs_r>
 80141ae:	3001      	adds	r0, #1
 80141b0:	f000 80a7 	beq.w	8014302 <_svfiprintf_r+0x1c6>
 80141b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80141b6:	445a      	add	r2, fp
 80141b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80141ba:	f89a 3000 	ldrb.w	r3, [sl]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	f000 809f 	beq.w	8014302 <_svfiprintf_r+0x1c6>
 80141c4:	2300      	movs	r3, #0
 80141c6:	f04f 32ff 	mov.w	r2, #4294967295
 80141ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80141ce:	f10a 0a01 	add.w	sl, sl, #1
 80141d2:	9304      	str	r3, [sp, #16]
 80141d4:	9307      	str	r3, [sp, #28]
 80141d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80141da:	931a      	str	r3, [sp, #104]	@ 0x68
 80141dc:	4654      	mov	r4, sl
 80141de:	2205      	movs	r2, #5
 80141e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80141e4:	484e      	ldr	r0, [pc, #312]	@ (8014320 <_svfiprintf_r+0x1e4>)
 80141e6:	f7ec f813 	bl	8000210 <memchr>
 80141ea:	9a04      	ldr	r2, [sp, #16]
 80141ec:	b9d8      	cbnz	r0, 8014226 <_svfiprintf_r+0xea>
 80141ee:	06d0      	lsls	r0, r2, #27
 80141f0:	bf44      	itt	mi
 80141f2:	2320      	movmi	r3, #32
 80141f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80141f8:	0711      	lsls	r1, r2, #28
 80141fa:	bf44      	itt	mi
 80141fc:	232b      	movmi	r3, #43	@ 0x2b
 80141fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014202:	f89a 3000 	ldrb.w	r3, [sl]
 8014206:	2b2a      	cmp	r3, #42	@ 0x2a
 8014208:	d015      	beq.n	8014236 <_svfiprintf_r+0xfa>
 801420a:	9a07      	ldr	r2, [sp, #28]
 801420c:	4654      	mov	r4, sl
 801420e:	2000      	movs	r0, #0
 8014210:	f04f 0c0a 	mov.w	ip, #10
 8014214:	4621      	mov	r1, r4
 8014216:	f811 3b01 	ldrb.w	r3, [r1], #1
 801421a:	3b30      	subs	r3, #48	@ 0x30
 801421c:	2b09      	cmp	r3, #9
 801421e:	d94b      	bls.n	80142b8 <_svfiprintf_r+0x17c>
 8014220:	b1b0      	cbz	r0, 8014250 <_svfiprintf_r+0x114>
 8014222:	9207      	str	r2, [sp, #28]
 8014224:	e014      	b.n	8014250 <_svfiprintf_r+0x114>
 8014226:	eba0 0308 	sub.w	r3, r0, r8
 801422a:	fa09 f303 	lsl.w	r3, r9, r3
 801422e:	4313      	orrs	r3, r2
 8014230:	9304      	str	r3, [sp, #16]
 8014232:	46a2      	mov	sl, r4
 8014234:	e7d2      	b.n	80141dc <_svfiprintf_r+0xa0>
 8014236:	9b03      	ldr	r3, [sp, #12]
 8014238:	1d19      	adds	r1, r3, #4
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	9103      	str	r1, [sp, #12]
 801423e:	2b00      	cmp	r3, #0
 8014240:	bfbb      	ittet	lt
 8014242:	425b      	neglt	r3, r3
 8014244:	f042 0202 	orrlt.w	r2, r2, #2
 8014248:	9307      	strge	r3, [sp, #28]
 801424a:	9307      	strlt	r3, [sp, #28]
 801424c:	bfb8      	it	lt
 801424e:	9204      	strlt	r2, [sp, #16]
 8014250:	7823      	ldrb	r3, [r4, #0]
 8014252:	2b2e      	cmp	r3, #46	@ 0x2e
 8014254:	d10a      	bne.n	801426c <_svfiprintf_r+0x130>
 8014256:	7863      	ldrb	r3, [r4, #1]
 8014258:	2b2a      	cmp	r3, #42	@ 0x2a
 801425a:	d132      	bne.n	80142c2 <_svfiprintf_r+0x186>
 801425c:	9b03      	ldr	r3, [sp, #12]
 801425e:	1d1a      	adds	r2, r3, #4
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	9203      	str	r2, [sp, #12]
 8014264:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014268:	3402      	adds	r4, #2
 801426a:	9305      	str	r3, [sp, #20]
 801426c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014330 <_svfiprintf_r+0x1f4>
 8014270:	7821      	ldrb	r1, [r4, #0]
 8014272:	2203      	movs	r2, #3
 8014274:	4650      	mov	r0, sl
 8014276:	f7eb ffcb 	bl	8000210 <memchr>
 801427a:	b138      	cbz	r0, 801428c <_svfiprintf_r+0x150>
 801427c:	9b04      	ldr	r3, [sp, #16]
 801427e:	eba0 000a 	sub.w	r0, r0, sl
 8014282:	2240      	movs	r2, #64	@ 0x40
 8014284:	4082      	lsls	r2, r0
 8014286:	4313      	orrs	r3, r2
 8014288:	3401      	adds	r4, #1
 801428a:	9304      	str	r3, [sp, #16]
 801428c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014290:	4824      	ldr	r0, [pc, #144]	@ (8014324 <_svfiprintf_r+0x1e8>)
 8014292:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014296:	2206      	movs	r2, #6
 8014298:	f7eb ffba 	bl	8000210 <memchr>
 801429c:	2800      	cmp	r0, #0
 801429e:	d036      	beq.n	801430e <_svfiprintf_r+0x1d2>
 80142a0:	4b21      	ldr	r3, [pc, #132]	@ (8014328 <_svfiprintf_r+0x1ec>)
 80142a2:	bb1b      	cbnz	r3, 80142ec <_svfiprintf_r+0x1b0>
 80142a4:	9b03      	ldr	r3, [sp, #12]
 80142a6:	3307      	adds	r3, #7
 80142a8:	f023 0307 	bic.w	r3, r3, #7
 80142ac:	3308      	adds	r3, #8
 80142ae:	9303      	str	r3, [sp, #12]
 80142b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80142b2:	4433      	add	r3, r6
 80142b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80142b6:	e76a      	b.n	801418e <_svfiprintf_r+0x52>
 80142b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80142bc:	460c      	mov	r4, r1
 80142be:	2001      	movs	r0, #1
 80142c0:	e7a8      	b.n	8014214 <_svfiprintf_r+0xd8>
 80142c2:	2300      	movs	r3, #0
 80142c4:	3401      	adds	r4, #1
 80142c6:	9305      	str	r3, [sp, #20]
 80142c8:	4619      	mov	r1, r3
 80142ca:	f04f 0c0a 	mov.w	ip, #10
 80142ce:	4620      	mov	r0, r4
 80142d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80142d4:	3a30      	subs	r2, #48	@ 0x30
 80142d6:	2a09      	cmp	r2, #9
 80142d8:	d903      	bls.n	80142e2 <_svfiprintf_r+0x1a6>
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d0c6      	beq.n	801426c <_svfiprintf_r+0x130>
 80142de:	9105      	str	r1, [sp, #20]
 80142e0:	e7c4      	b.n	801426c <_svfiprintf_r+0x130>
 80142e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80142e6:	4604      	mov	r4, r0
 80142e8:	2301      	movs	r3, #1
 80142ea:	e7f0      	b.n	80142ce <_svfiprintf_r+0x192>
 80142ec:	ab03      	add	r3, sp, #12
 80142ee:	9300      	str	r3, [sp, #0]
 80142f0:	462a      	mov	r2, r5
 80142f2:	4b0e      	ldr	r3, [pc, #56]	@ (801432c <_svfiprintf_r+0x1f0>)
 80142f4:	a904      	add	r1, sp, #16
 80142f6:	4638      	mov	r0, r7
 80142f8:	f7fc fed8 	bl	80110ac <_printf_float>
 80142fc:	1c42      	adds	r2, r0, #1
 80142fe:	4606      	mov	r6, r0
 8014300:	d1d6      	bne.n	80142b0 <_svfiprintf_r+0x174>
 8014302:	89ab      	ldrh	r3, [r5, #12]
 8014304:	065b      	lsls	r3, r3, #25
 8014306:	f53f af2d 	bmi.w	8014164 <_svfiprintf_r+0x28>
 801430a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801430c:	e72c      	b.n	8014168 <_svfiprintf_r+0x2c>
 801430e:	ab03      	add	r3, sp, #12
 8014310:	9300      	str	r3, [sp, #0]
 8014312:	462a      	mov	r2, r5
 8014314:	4b05      	ldr	r3, [pc, #20]	@ (801432c <_svfiprintf_r+0x1f0>)
 8014316:	a904      	add	r1, sp, #16
 8014318:	4638      	mov	r0, r7
 801431a:	f7fd f95f 	bl	80115dc <_printf_i>
 801431e:	e7ed      	b.n	80142fc <_svfiprintf_r+0x1c0>
 8014320:	08016af1 	.word	0x08016af1
 8014324:	08016afb 	.word	0x08016afb
 8014328:	080110ad 	.word	0x080110ad
 801432c:	08014087 	.word	0x08014087
 8014330:	08016af7 	.word	0x08016af7

08014334 <__sflush_r>:
 8014334:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801433c:	0716      	lsls	r6, r2, #28
 801433e:	4605      	mov	r5, r0
 8014340:	460c      	mov	r4, r1
 8014342:	d454      	bmi.n	80143ee <__sflush_r+0xba>
 8014344:	684b      	ldr	r3, [r1, #4]
 8014346:	2b00      	cmp	r3, #0
 8014348:	dc02      	bgt.n	8014350 <__sflush_r+0x1c>
 801434a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801434c:	2b00      	cmp	r3, #0
 801434e:	dd48      	ble.n	80143e2 <__sflush_r+0xae>
 8014350:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014352:	2e00      	cmp	r6, #0
 8014354:	d045      	beq.n	80143e2 <__sflush_r+0xae>
 8014356:	2300      	movs	r3, #0
 8014358:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801435c:	682f      	ldr	r7, [r5, #0]
 801435e:	6a21      	ldr	r1, [r4, #32]
 8014360:	602b      	str	r3, [r5, #0]
 8014362:	d030      	beq.n	80143c6 <__sflush_r+0x92>
 8014364:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014366:	89a3      	ldrh	r3, [r4, #12]
 8014368:	0759      	lsls	r1, r3, #29
 801436a:	d505      	bpl.n	8014378 <__sflush_r+0x44>
 801436c:	6863      	ldr	r3, [r4, #4]
 801436e:	1ad2      	subs	r2, r2, r3
 8014370:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014372:	b10b      	cbz	r3, 8014378 <__sflush_r+0x44>
 8014374:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014376:	1ad2      	subs	r2, r2, r3
 8014378:	2300      	movs	r3, #0
 801437a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801437c:	6a21      	ldr	r1, [r4, #32]
 801437e:	4628      	mov	r0, r5
 8014380:	47b0      	blx	r6
 8014382:	1c43      	adds	r3, r0, #1
 8014384:	89a3      	ldrh	r3, [r4, #12]
 8014386:	d106      	bne.n	8014396 <__sflush_r+0x62>
 8014388:	6829      	ldr	r1, [r5, #0]
 801438a:	291d      	cmp	r1, #29
 801438c:	d82b      	bhi.n	80143e6 <__sflush_r+0xb2>
 801438e:	4a2a      	ldr	r2, [pc, #168]	@ (8014438 <__sflush_r+0x104>)
 8014390:	410a      	asrs	r2, r1
 8014392:	07d6      	lsls	r6, r2, #31
 8014394:	d427      	bmi.n	80143e6 <__sflush_r+0xb2>
 8014396:	2200      	movs	r2, #0
 8014398:	6062      	str	r2, [r4, #4]
 801439a:	04d9      	lsls	r1, r3, #19
 801439c:	6922      	ldr	r2, [r4, #16]
 801439e:	6022      	str	r2, [r4, #0]
 80143a0:	d504      	bpl.n	80143ac <__sflush_r+0x78>
 80143a2:	1c42      	adds	r2, r0, #1
 80143a4:	d101      	bne.n	80143aa <__sflush_r+0x76>
 80143a6:	682b      	ldr	r3, [r5, #0]
 80143a8:	b903      	cbnz	r3, 80143ac <__sflush_r+0x78>
 80143aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80143ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80143ae:	602f      	str	r7, [r5, #0]
 80143b0:	b1b9      	cbz	r1, 80143e2 <__sflush_r+0xae>
 80143b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80143b6:	4299      	cmp	r1, r3
 80143b8:	d002      	beq.n	80143c0 <__sflush_r+0x8c>
 80143ba:	4628      	mov	r0, r5
 80143bc:	f7fe fcdc 	bl	8012d78 <_free_r>
 80143c0:	2300      	movs	r3, #0
 80143c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80143c4:	e00d      	b.n	80143e2 <__sflush_r+0xae>
 80143c6:	2301      	movs	r3, #1
 80143c8:	4628      	mov	r0, r5
 80143ca:	47b0      	blx	r6
 80143cc:	4602      	mov	r2, r0
 80143ce:	1c50      	adds	r0, r2, #1
 80143d0:	d1c9      	bne.n	8014366 <__sflush_r+0x32>
 80143d2:	682b      	ldr	r3, [r5, #0]
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d0c6      	beq.n	8014366 <__sflush_r+0x32>
 80143d8:	2b1d      	cmp	r3, #29
 80143da:	d001      	beq.n	80143e0 <__sflush_r+0xac>
 80143dc:	2b16      	cmp	r3, #22
 80143de:	d11e      	bne.n	801441e <__sflush_r+0xea>
 80143e0:	602f      	str	r7, [r5, #0]
 80143e2:	2000      	movs	r0, #0
 80143e4:	e022      	b.n	801442c <__sflush_r+0xf8>
 80143e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80143ea:	b21b      	sxth	r3, r3
 80143ec:	e01b      	b.n	8014426 <__sflush_r+0xf2>
 80143ee:	690f      	ldr	r7, [r1, #16]
 80143f0:	2f00      	cmp	r7, #0
 80143f2:	d0f6      	beq.n	80143e2 <__sflush_r+0xae>
 80143f4:	0793      	lsls	r3, r2, #30
 80143f6:	680e      	ldr	r6, [r1, #0]
 80143f8:	bf08      	it	eq
 80143fa:	694b      	ldreq	r3, [r1, #20]
 80143fc:	600f      	str	r7, [r1, #0]
 80143fe:	bf18      	it	ne
 8014400:	2300      	movne	r3, #0
 8014402:	eba6 0807 	sub.w	r8, r6, r7
 8014406:	608b      	str	r3, [r1, #8]
 8014408:	f1b8 0f00 	cmp.w	r8, #0
 801440c:	dde9      	ble.n	80143e2 <__sflush_r+0xae>
 801440e:	6a21      	ldr	r1, [r4, #32]
 8014410:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014412:	4643      	mov	r3, r8
 8014414:	463a      	mov	r2, r7
 8014416:	4628      	mov	r0, r5
 8014418:	47b0      	blx	r6
 801441a:	2800      	cmp	r0, #0
 801441c:	dc08      	bgt.n	8014430 <__sflush_r+0xfc>
 801441e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014422:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014426:	81a3      	strh	r3, [r4, #12]
 8014428:	f04f 30ff 	mov.w	r0, #4294967295
 801442c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014430:	4407      	add	r7, r0
 8014432:	eba8 0800 	sub.w	r8, r8, r0
 8014436:	e7e7      	b.n	8014408 <__sflush_r+0xd4>
 8014438:	dfbffffe 	.word	0xdfbffffe

0801443c <_fflush_r>:
 801443c:	b538      	push	{r3, r4, r5, lr}
 801443e:	690b      	ldr	r3, [r1, #16]
 8014440:	4605      	mov	r5, r0
 8014442:	460c      	mov	r4, r1
 8014444:	b913      	cbnz	r3, 801444c <_fflush_r+0x10>
 8014446:	2500      	movs	r5, #0
 8014448:	4628      	mov	r0, r5
 801444a:	bd38      	pop	{r3, r4, r5, pc}
 801444c:	b118      	cbz	r0, 8014456 <_fflush_r+0x1a>
 801444e:	6a03      	ldr	r3, [r0, #32]
 8014450:	b90b      	cbnz	r3, 8014456 <_fflush_r+0x1a>
 8014452:	f7fd fc83 	bl	8011d5c <__sinit>
 8014456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801445a:	2b00      	cmp	r3, #0
 801445c:	d0f3      	beq.n	8014446 <_fflush_r+0xa>
 801445e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014460:	07d0      	lsls	r0, r2, #31
 8014462:	d404      	bmi.n	801446e <_fflush_r+0x32>
 8014464:	0599      	lsls	r1, r3, #22
 8014466:	d402      	bmi.n	801446e <_fflush_r+0x32>
 8014468:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801446a:	f7fd fdfc 	bl	8012066 <__retarget_lock_acquire_recursive>
 801446e:	4628      	mov	r0, r5
 8014470:	4621      	mov	r1, r4
 8014472:	f7ff ff5f 	bl	8014334 <__sflush_r>
 8014476:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014478:	07da      	lsls	r2, r3, #31
 801447a:	4605      	mov	r5, r0
 801447c:	d4e4      	bmi.n	8014448 <_fflush_r+0xc>
 801447e:	89a3      	ldrh	r3, [r4, #12]
 8014480:	059b      	lsls	r3, r3, #22
 8014482:	d4e1      	bmi.n	8014448 <_fflush_r+0xc>
 8014484:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014486:	f7fd fdef 	bl	8012068 <__retarget_lock_release_recursive>
 801448a:	e7dd      	b.n	8014448 <_fflush_r+0xc>

0801448c <fiprintf>:
 801448c:	b40e      	push	{r1, r2, r3}
 801448e:	b503      	push	{r0, r1, lr}
 8014490:	4601      	mov	r1, r0
 8014492:	ab03      	add	r3, sp, #12
 8014494:	4805      	ldr	r0, [pc, #20]	@ (80144ac <fiprintf+0x20>)
 8014496:	f853 2b04 	ldr.w	r2, [r3], #4
 801449a:	6800      	ldr	r0, [r0, #0]
 801449c:	9301      	str	r3, [sp, #4]
 801449e:	f000 f8a3 	bl	80145e8 <_vfiprintf_r>
 80144a2:	b002      	add	sp, #8
 80144a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80144a8:	b003      	add	sp, #12
 80144aa:	4770      	bx	lr
 80144ac:	20000198 	.word	0x20000198

080144b0 <memmove>:
 80144b0:	4288      	cmp	r0, r1
 80144b2:	b510      	push	{r4, lr}
 80144b4:	eb01 0402 	add.w	r4, r1, r2
 80144b8:	d902      	bls.n	80144c0 <memmove+0x10>
 80144ba:	4284      	cmp	r4, r0
 80144bc:	4623      	mov	r3, r4
 80144be:	d807      	bhi.n	80144d0 <memmove+0x20>
 80144c0:	1e43      	subs	r3, r0, #1
 80144c2:	42a1      	cmp	r1, r4
 80144c4:	d008      	beq.n	80144d8 <memmove+0x28>
 80144c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80144ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80144ce:	e7f8      	b.n	80144c2 <memmove+0x12>
 80144d0:	4402      	add	r2, r0
 80144d2:	4601      	mov	r1, r0
 80144d4:	428a      	cmp	r2, r1
 80144d6:	d100      	bne.n	80144da <memmove+0x2a>
 80144d8:	bd10      	pop	{r4, pc}
 80144da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80144de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80144e2:	e7f7      	b.n	80144d4 <memmove+0x24>

080144e4 <_sbrk_r>:
 80144e4:	b538      	push	{r3, r4, r5, lr}
 80144e6:	4d06      	ldr	r5, [pc, #24]	@ (8014500 <_sbrk_r+0x1c>)
 80144e8:	2300      	movs	r3, #0
 80144ea:	4604      	mov	r4, r0
 80144ec:	4608      	mov	r0, r1
 80144ee:	602b      	str	r3, [r5, #0]
 80144f0:	f7f5 fcb0 	bl	8009e54 <_sbrk>
 80144f4:	1c43      	adds	r3, r0, #1
 80144f6:	d102      	bne.n	80144fe <_sbrk_r+0x1a>
 80144f8:	682b      	ldr	r3, [r5, #0]
 80144fa:	b103      	cbz	r3, 80144fe <_sbrk_r+0x1a>
 80144fc:	6023      	str	r3, [r4, #0]
 80144fe:	bd38      	pop	{r3, r4, r5, pc}
 8014500:	20007184 	.word	0x20007184

08014504 <abort>:
 8014504:	b508      	push	{r3, lr}
 8014506:	2006      	movs	r0, #6
 8014508:	f000 fa42 	bl	8014990 <raise>
 801450c:	2001      	movs	r0, #1
 801450e:	f7f5 fc28 	bl	8009d62 <_exit>

08014512 <_calloc_r>:
 8014512:	b570      	push	{r4, r5, r6, lr}
 8014514:	fba1 5402 	umull	r5, r4, r1, r2
 8014518:	b93c      	cbnz	r4, 801452a <_calloc_r+0x18>
 801451a:	4629      	mov	r1, r5
 801451c:	f7fe ffda 	bl	80134d4 <_malloc_r>
 8014520:	4606      	mov	r6, r0
 8014522:	b928      	cbnz	r0, 8014530 <_calloc_r+0x1e>
 8014524:	2600      	movs	r6, #0
 8014526:	4630      	mov	r0, r6
 8014528:	bd70      	pop	{r4, r5, r6, pc}
 801452a:	220c      	movs	r2, #12
 801452c:	6002      	str	r2, [r0, #0]
 801452e:	e7f9      	b.n	8014524 <_calloc_r+0x12>
 8014530:	462a      	mov	r2, r5
 8014532:	4621      	mov	r1, r4
 8014534:	f7fd fcab 	bl	8011e8e <memset>
 8014538:	e7f5      	b.n	8014526 <_calloc_r+0x14>

0801453a <_realloc_r>:
 801453a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801453e:	4680      	mov	r8, r0
 8014540:	4615      	mov	r5, r2
 8014542:	460c      	mov	r4, r1
 8014544:	b921      	cbnz	r1, 8014550 <_realloc_r+0x16>
 8014546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801454a:	4611      	mov	r1, r2
 801454c:	f7fe bfc2 	b.w	80134d4 <_malloc_r>
 8014550:	b92a      	cbnz	r2, 801455e <_realloc_r+0x24>
 8014552:	f7fe fc11 	bl	8012d78 <_free_r>
 8014556:	2400      	movs	r4, #0
 8014558:	4620      	mov	r0, r4
 801455a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801455e:	f000 fa33 	bl	80149c8 <_malloc_usable_size_r>
 8014562:	4285      	cmp	r5, r0
 8014564:	4606      	mov	r6, r0
 8014566:	d802      	bhi.n	801456e <_realloc_r+0x34>
 8014568:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801456c:	d8f4      	bhi.n	8014558 <_realloc_r+0x1e>
 801456e:	4629      	mov	r1, r5
 8014570:	4640      	mov	r0, r8
 8014572:	f7fe ffaf 	bl	80134d4 <_malloc_r>
 8014576:	4607      	mov	r7, r0
 8014578:	2800      	cmp	r0, #0
 801457a:	d0ec      	beq.n	8014556 <_realloc_r+0x1c>
 801457c:	42b5      	cmp	r5, r6
 801457e:	462a      	mov	r2, r5
 8014580:	4621      	mov	r1, r4
 8014582:	bf28      	it	cs
 8014584:	4632      	movcs	r2, r6
 8014586:	f7fd fd70 	bl	801206a <memcpy>
 801458a:	4621      	mov	r1, r4
 801458c:	4640      	mov	r0, r8
 801458e:	f7fe fbf3 	bl	8012d78 <_free_r>
 8014592:	463c      	mov	r4, r7
 8014594:	e7e0      	b.n	8014558 <_realloc_r+0x1e>

08014596 <__sfputc_r>:
 8014596:	6893      	ldr	r3, [r2, #8]
 8014598:	3b01      	subs	r3, #1
 801459a:	2b00      	cmp	r3, #0
 801459c:	b410      	push	{r4}
 801459e:	6093      	str	r3, [r2, #8]
 80145a0:	da08      	bge.n	80145b4 <__sfputc_r+0x1e>
 80145a2:	6994      	ldr	r4, [r2, #24]
 80145a4:	42a3      	cmp	r3, r4
 80145a6:	db01      	blt.n	80145ac <__sfputc_r+0x16>
 80145a8:	290a      	cmp	r1, #10
 80145aa:	d103      	bne.n	80145b4 <__sfputc_r+0x1e>
 80145ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80145b0:	f000 b932 	b.w	8014818 <__swbuf_r>
 80145b4:	6813      	ldr	r3, [r2, #0]
 80145b6:	1c58      	adds	r0, r3, #1
 80145b8:	6010      	str	r0, [r2, #0]
 80145ba:	7019      	strb	r1, [r3, #0]
 80145bc:	4608      	mov	r0, r1
 80145be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80145c2:	4770      	bx	lr

080145c4 <__sfputs_r>:
 80145c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145c6:	4606      	mov	r6, r0
 80145c8:	460f      	mov	r7, r1
 80145ca:	4614      	mov	r4, r2
 80145cc:	18d5      	adds	r5, r2, r3
 80145ce:	42ac      	cmp	r4, r5
 80145d0:	d101      	bne.n	80145d6 <__sfputs_r+0x12>
 80145d2:	2000      	movs	r0, #0
 80145d4:	e007      	b.n	80145e6 <__sfputs_r+0x22>
 80145d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80145da:	463a      	mov	r2, r7
 80145dc:	4630      	mov	r0, r6
 80145de:	f7ff ffda 	bl	8014596 <__sfputc_r>
 80145e2:	1c43      	adds	r3, r0, #1
 80145e4:	d1f3      	bne.n	80145ce <__sfputs_r+0xa>
 80145e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080145e8 <_vfiprintf_r>:
 80145e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145ec:	460d      	mov	r5, r1
 80145ee:	b09d      	sub	sp, #116	@ 0x74
 80145f0:	4614      	mov	r4, r2
 80145f2:	4698      	mov	r8, r3
 80145f4:	4606      	mov	r6, r0
 80145f6:	b118      	cbz	r0, 8014600 <_vfiprintf_r+0x18>
 80145f8:	6a03      	ldr	r3, [r0, #32]
 80145fa:	b90b      	cbnz	r3, 8014600 <_vfiprintf_r+0x18>
 80145fc:	f7fd fbae 	bl	8011d5c <__sinit>
 8014600:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014602:	07d9      	lsls	r1, r3, #31
 8014604:	d405      	bmi.n	8014612 <_vfiprintf_r+0x2a>
 8014606:	89ab      	ldrh	r3, [r5, #12]
 8014608:	059a      	lsls	r2, r3, #22
 801460a:	d402      	bmi.n	8014612 <_vfiprintf_r+0x2a>
 801460c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801460e:	f7fd fd2a 	bl	8012066 <__retarget_lock_acquire_recursive>
 8014612:	89ab      	ldrh	r3, [r5, #12]
 8014614:	071b      	lsls	r3, r3, #28
 8014616:	d501      	bpl.n	801461c <_vfiprintf_r+0x34>
 8014618:	692b      	ldr	r3, [r5, #16]
 801461a:	b99b      	cbnz	r3, 8014644 <_vfiprintf_r+0x5c>
 801461c:	4629      	mov	r1, r5
 801461e:	4630      	mov	r0, r6
 8014620:	f000 f938 	bl	8014894 <__swsetup_r>
 8014624:	b170      	cbz	r0, 8014644 <_vfiprintf_r+0x5c>
 8014626:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014628:	07dc      	lsls	r4, r3, #31
 801462a:	d504      	bpl.n	8014636 <_vfiprintf_r+0x4e>
 801462c:	f04f 30ff 	mov.w	r0, #4294967295
 8014630:	b01d      	add	sp, #116	@ 0x74
 8014632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014636:	89ab      	ldrh	r3, [r5, #12]
 8014638:	0598      	lsls	r0, r3, #22
 801463a:	d4f7      	bmi.n	801462c <_vfiprintf_r+0x44>
 801463c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801463e:	f7fd fd13 	bl	8012068 <__retarget_lock_release_recursive>
 8014642:	e7f3      	b.n	801462c <_vfiprintf_r+0x44>
 8014644:	2300      	movs	r3, #0
 8014646:	9309      	str	r3, [sp, #36]	@ 0x24
 8014648:	2320      	movs	r3, #32
 801464a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801464e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014652:	2330      	movs	r3, #48	@ 0x30
 8014654:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014804 <_vfiprintf_r+0x21c>
 8014658:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801465c:	f04f 0901 	mov.w	r9, #1
 8014660:	4623      	mov	r3, r4
 8014662:	469a      	mov	sl, r3
 8014664:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014668:	b10a      	cbz	r2, 801466e <_vfiprintf_r+0x86>
 801466a:	2a25      	cmp	r2, #37	@ 0x25
 801466c:	d1f9      	bne.n	8014662 <_vfiprintf_r+0x7a>
 801466e:	ebba 0b04 	subs.w	fp, sl, r4
 8014672:	d00b      	beq.n	801468c <_vfiprintf_r+0xa4>
 8014674:	465b      	mov	r3, fp
 8014676:	4622      	mov	r2, r4
 8014678:	4629      	mov	r1, r5
 801467a:	4630      	mov	r0, r6
 801467c:	f7ff ffa2 	bl	80145c4 <__sfputs_r>
 8014680:	3001      	adds	r0, #1
 8014682:	f000 80a7 	beq.w	80147d4 <_vfiprintf_r+0x1ec>
 8014686:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014688:	445a      	add	r2, fp
 801468a:	9209      	str	r2, [sp, #36]	@ 0x24
 801468c:	f89a 3000 	ldrb.w	r3, [sl]
 8014690:	2b00      	cmp	r3, #0
 8014692:	f000 809f 	beq.w	80147d4 <_vfiprintf_r+0x1ec>
 8014696:	2300      	movs	r3, #0
 8014698:	f04f 32ff 	mov.w	r2, #4294967295
 801469c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80146a0:	f10a 0a01 	add.w	sl, sl, #1
 80146a4:	9304      	str	r3, [sp, #16]
 80146a6:	9307      	str	r3, [sp, #28]
 80146a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80146ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80146ae:	4654      	mov	r4, sl
 80146b0:	2205      	movs	r2, #5
 80146b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80146b6:	4853      	ldr	r0, [pc, #332]	@ (8014804 <_vfiprintf_r+0x21c>)
 80146b8:	f7eb fdaa 	bl	8000210 <memchr>
 80146bc:	9a04      	ldr	r2, [sp, #16]
 80146be:	b9d8      	cbnz	r0, 80146f8 <_vfiprintf_r+0x110>
 80146c0:	06d1      	lsls	r1, r2, #27
 80146c2:	bf44      	itt	mi
 80146c4:	2320      	movmi	r3, #32
 80146c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80146ca:	0713      	lsls	r3, r2, #28
 80146cc:	bf44      	itt	mi
 80146ce:	232b      	movmi	r3, #43	@ 0x2b
 80146d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80146d4:	f89a 3000 	ldrb.w	r3, [sl]
 80146d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80146da:	d015      	beq.n	8014708 <_vfiprintf_r+0x120>
 80146dc:	9a07      	ldr	r2, [sp, #28]
 80146de:	4654      	mov	r4, sl
 80146e0:	2000      	movs	r0, #0
 80146e2:	f04f 0c0a 	mov.w	ip, #10
 80146e6:	4621      	mov	r1, r4
 80146e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80146ec:	3b30      	subs	r3, #48	@ 0x30
 80146ee:	2b09      	cmp	r3, #9
 80146f0:	d94b      	bls.n	801478a <_vfiprintf_r+0x1a2>
 80146f2:	b1b0      	cbz	r0, 8014722 <_vfiprintf_r+0x13a>
 80146f4:	9207      	str	r2, [sp, #28]
 80146f6:	e014      	b.n	8014722 <_vfiprintf_r+0x13a>
 80146f8:	eba0 0308 	sub.w	r3, r0, r8
 80146fc:	fa09 f303 	lsl.w	r3, r9, r3
 8014700:	4313      	orrs	r3, r2
 8014702:	9304      	str	r3, [sp, #16]
 8014704:	46a2      	mov	sl, r4
 8014706:	e7d2      	b.n	80146ae <_vfiprintf_r+0xc6>
 8014708:	9b03      	ldr	r3, [sp, #12]
 801470a:	1d19      	adds	r1, r3, #4
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	9103      	str	r1, [sp, #12]
 8014710:	2b00      	cmp	r3, #0
 8014712:	bfbb      	ittet	lt
 8014714:	425b      	neglt	r3, r3
 8014716:	f042 0202 	orrlt.w	r2, r2, #2
 801471a:	9307      	strge	r3, [sp, #28]
 801471c:	9307      	strlt	r3, [sp, #28]
 801471e:	bfb8      	it	lt
 8014720:	9204      	strlt	r2, [sp, #16]
 8014722:	7823      	ldrb	r3, [r4, #0]
 8014724:	2b2e      	cmp	r3, #46	@ 0x2e
 8014726:	d10a      	bne.n	801473e <_vfiprintf_r+0x156>
 8014728:	7863      	ldrb	r3, [r4, #1]
 801472a:	2b2a      	cmp	r3, #42	@ 0x2a
 801472c:	d132      	bne.n	8014794 <_vfiprintf_r+0x1ac>
 801472e:	9b03      	ldr	r3, [sp, #12]
 8014730:	1d1a      	adds	r2, r3, #4
 8014732:	681b      	ldr	r3, [r3, #0]
 8014734:	9203      	str	r2, [sp, #12]
 8014736:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801473a:	3402      	adds	r4, #2
 801473c:	9305      	str	r3, [sp, #20]
 801473e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014814 <_vfiprintf_r+0x22c>
 8014742:	7821      	ldrb	r1, [r4, #0]
 8014744:	2203      	movs	r2, #3
 8014746:	4650      	mov	r0, sl
 8014748:	f7eb fd62 	bl	8000210 <memchr>
 801474c:	b138      	cbz	r0, 801475e <_vfiprintf_r+0x176>
 801474e:	9b04      	ldr	r3, [sp, #16]
 8014750:	eba0 000a 	sub.w	r0, r0, sl
 8014754:	2240      	movs	r2, #64	@ 0x40
 8014756:	4082      	lsls	r2, r0
 8014758:	4313      	orrs	r3, r2
 801475a:	3401      	adds	r4, #1
 801475c:	9304      	str	r3, [sp, #16]
 801475e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014762:	4829      	ldr	r0, [pc, #164]	@ (8014808 <_vfiprintf_r+0x220>)
 8014764:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014768:	2206      	movs	r2, #6
 801476a:	f7eb fd51 	bl	8000210 <memchr>
 801476e:	2800      	cmp	r0, #0
 8014770:	d03f      	beq.n	80147f2 <_vfiprintf_r+0x20a>
 8014772:	4b26      	ldr	r3, [pc, #152]	@ (801480c <_vfiprintf_r+0x224>)
 8014774:	bb1b      	cbnz	r3, 80147be <_vfiprintf_r+0x1d6>
 8014776:	9b03      	ldr	r3, [sp, #12]
 8014778:	3307      	adds	r3, #7
 801477a:	f023 0307 	bic.w	r3, r3, #7
 801477e:	3308      	adds	r3, #8
 8014780:	9303      	str	r3, [sp, #12]
 8014782:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014784:	443b      	add	r3, r7
 8014786:	9309      	str	r3, [sp, #36]	@ 0x24
 8014788:	e76a      	b.n	8014660 <_vfiprintf_r+0x78>
 801478a:	fb0c 3202 	mla	r2, ip, r2, r3
 801478e:	460c      	mov	r4, r1
 8014790:	2001      	movs	r0, #1
 8014792:	e7a8      	b.n	80146e6 <_vfiprintf_r+0xfe>
 8014794:	2300      	movs	r3, #0
 8014796:	3401      	adds	r4, #1
 8014798:	9305      	str	r3, [sp, #20]
 801479a:	4619      	mov	r1, r3
 801479c:	f04f 0c0a 	mov.w	ip, #10
 80147a0:	4620      	mov	r0, r4
 80147a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80147a6:	3a30      	subs	r2, #48	@ 0x30
 80147a8:	2a09      	cmp	r2, #9
 80147aa:	d903      	bls.n	80147b4 <_vfiprintf_r+0x1cc>
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d0c6      	beq.n	801473e <_vfiprintf_r+0x156>
 80147b0:	9105      	str	r1, [sp, #20]
 80147b2:	e7c4      	b.n	801473e <_vfiprintf_r+0x156>
 80147b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80147b8:	4604      	mov	r4, r0
 80147ba:	2301      	movs	r3, #1
 80147bc:	e7f0      	b.n	80147a0 <_vfiprintf_r+0x1b8>
 80147be:	ab03      	add	r3, sp, #12
 80147c0:	9300      	str	r3, [sp, #0]
 80147c2:	462a      	mov	r2, r5
 80147c4:	4b12      	ldr	r3, [pc, #72]	@ (8014810 <_vfiprintf_r+0x228>)
 80147c6:	a904      	add	r1, sp, #16
 80147c8:	4630      	mov	r0, r6
 80147ca:	f7fc fc6f 	bl	80110ac <_printf_float>
 80147ce:	4607      	mov	r7, r0
 80147d0:	1c78      	adds	r0, r7, #1
 80147d2:	d1d6      	bne.n	8014782 <_vfiprintf_r+0x19a>
 80147d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80147d6:	07d9      	lsls	r1, r3, #31
 80147d8:	d405      	bmi.n	80147e6 <_vfiprintf_r+0x1fe>
 80147da:	89ab      	ldrh	r3, [r5, #12]
 80147dc:	059a      	lsls	r2, r3, #22
 80147de:	d402      	bmi.n	80147e6 <_vfiprintf_r+0x1fe>
 80147e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80147e2:	f7fd fc41 	bl	8012068 <__retarget_lock_release_recursive>
 80147e6:	89ab      	ldrh	r3, [r5, #12]
 80147e8:	065b      	lsls	r3, r3, #25
 80147ea:	f53f af1f 	bmi.w	801462c <_vfiprintf_r+0x44>
 80147ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80147f0:	e71e      	b.n	8014630 <_vfiprintf_r+0x48>
 80147f2:	ab03      	add	r3, sp, #12
 80147f4:	9300      	str	r3, [sp, #0]
 80147f6:	462a      	mov	r2, r5
 80147f8:	4b05      	ldr	r3, [pc, #20]	@ (8014810 <_vfiprintf_r+0x228>)
 80147fa:	a904      	add	r1, sp, #16
 80147fc:	4630      	mov	r0, r6
 80147fe:	f7fc feed 	bl	80115dc <_printf_i>
 8014802:	e7e4      	b.n	80147ce <_vfiprintf_r+0x1e6>
 8014804:	08016af1 	.word	0x08016af1
 8014808:	08016afb 	.word	0x08016afb
 801480c:	080110ad 	.word	0x080110ad
 8014810:	080145c5 	.word	0x080145c5
 8014814:	08016af7 	.word	0x08016af7

08014818 <__swbuf_r>:
 8014818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801481a:	460e      	mov	r6, r1
 801481c:	4614      	mov	r4, r2
 801481e:	4605      	mov	r5, r0
 8014820:	b118      	cbz	r0, 801482a <__swbuf_r+0x12>
 8014822:	6a03      	ldr	r3, [r0, #32]
 8014824:	b90b      	cbnz	r3, 801482a <__swbuf_r+0x12>
 8014826:	f7fd fa99 	bl	8011d5c <__sinit>
 801482a:	69a3      	ldr	r3, [r4, #24]
 801482c:	60a3      	str	r3, [r4, #8]
 801482e:	89a3      	ldrh	r3, [r4, #12]
 8014830:	071a      	lsls	r2, r3, #28
 8014832:	d501      	bpl.n	8014838 <__swbuf_r+0x20>
 8014834:	6923      	ldr	r3, [r4, #16]
 8014836:	b943      	cbnz	r3, 801484a <__swbuf_r+0x32>
 8014838:	4621      	mov	r1, r4
 801483a:	4628      	mov	r0, r5
 801483c:	f000 f82a 	bl	8014894 <__swsetup_r>
 8014840:	b118      	cbz	r0, 801484a <__swbuf_r+0x32>
 8014842:	f04f 37ff 	mov.w	r7, #4294967295
 8014846:	4638      	mov	r0, r7
 8014848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801484a:	6823      	ldr	r3, [r4, #0]
 801484c:	6922      	ldr	r2, [r4, #16]
 801484e:	1a98      	subs	r0, r3, r2
 8014850:	6963      	ldr	r3, [r4, #20]
 8014852:	b2f6      	uxtb	r6, r6
 8014854:	4283      	cmp	r3, r0
 8014856:	4637      	mov	r7, r6
 8014858:	dc05      	bgt.n	8014866 <__swbuf_r+0x4e>
 801485a:	4621      	mov	r1, r4
 801485c:	4628      	mov	r0, r5
 801485e:	f7ff fded 	bl	801443c <_fflush_r>
 8014862:	2800      	cmp	r0, #0
 8014864:	d1ed      	bne.n	8014842 <__swbuf_r+0x2a>
 8014866:	68a3      	ldr	r3, [r4, #8]
 8014868:	3b01      	subs	r3, #1
 801486a:	60a3      	str	r3, [r4, #8]
 801486c:	6823      	ldr	r3, [r4, #0]
 801486e:	1c5a      	adds	r2, r3, #1
 8014870:	6022      	str	r2, [r4, #0]
 8014872:	701e      	strb	r6, [r3, #0]
 8014874:	6962      	ldr	r2, [r4, #20]
 8014876:	1c43      	adds	r3, r0, #1
 8014878:	429a      	cmp	r2, r3
 801487a:	d004      	beq.n	8014886 <__swbuf_r+0x6e>
 801487c:	89a3      	ldrh	r3, [r4, #12]
 801487e:	07db      	lsls	r3, r3, #31
 8014880:	d5e1      	bpl.n	8014846 <__swbuf_r+0x2e>
 8014882:	2e0a      	cmp	r6, #10
 8014884:	d1df      	bne.n	8014846 <__swbuf_r+0x2e>
 8014886:	4621      	mov	r1, r4
 8014888:	4628      	mov	r0, r5
 801488a:	f7ff fdd7 	bl	801443c <_fflush_r>
 801488e:	2800      	cmp	r0, #0
 8014890:	d0d9      	beq.n	8014846 <__swbuf_r+0x2e>
 8014892:	e7d6      	b.n	8014842 <__swbuf_r+0x2a>

08014894 <__swsetup_r>:
 8014894:	b538      	push	{r3, r4, r5, lr}
 8014896:	4b29      	ldr	r3, [pc, #164]	@ (801493c <__swsetup_r+0xa8>)
 8014898:	4605      	mov	r5, r0
 801489a:	6818      	ldr	r0, [r3, #0]
 801489c:	460c      	mov	r4, r1
 801489e:	b118      	cbz	r0, 80148a8 <__swsetup_r+0x14>
 80148a0:	6a03      	ldr	r3, [r0, #32]
 80148a2:	b90b      	cbnz	r3, 80148a8 <__swsetup_r+0x14>
 80148a4:	f7fd fa5a 	bl	8011d5c <__sinit>
 80148a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80148ac:	0719      	lsls	r1, r3, #28
 80148ae:	d422      	bmi.n	80148f6 <__swsetup_r+0x62>
 80148b0:	06da      	lsls	r2, r3, #27
 80148b2:	d407      	bmi.n	80148c4 <__swsetup_r+0x30>
 80148b4:	2209      	movs	r2, #9
 80148b6:	602a      	str	r2, [r5, #0]
 80148b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80148bc:	81a3      	strh	r3, [r4, #12]
 80148be:	f04f 30ff 	mov.w	r0, #4294967295
 80148c2:	e033      	b.n	801492c <__swsetup_r+0x98>
 80148c4:	0758      	lsls	r0, r3, #29
 80148c6:	d512      	bpl.n	80148ee <__swsetup_r+0x5a>
 80148c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80148ca:	b141      	cbz	r1, 80148de <__swsetup_r+0x4a>
 80148cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80148d0:	4299      	cmp	r1, r3
 80148d2:	d002      	beq.n	80148da <__swsetup_r+0x46>
 80148d4:	4628      	mov	r0, r5
 80148d6:	f7fe fa4f 	bl	8012d78 <_free_r>
 80148da:	2300      	movs	r3, #0
 80148dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80148de:	89a3      	ldrh	r3, [r4, #12]
 80148e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80148e4:	81a3      	strh	r3, [r4, #12]
 80148e6:	2300      	movs	r3, #0
 80148e8:	6063      	str	r3, [r4, #4]
 80148ea:	6923      	ldr	r3, [r4, #16]
 80148ec:	6023      	str	r3, [r4, #0]
 80148ee:	89a3      	ldrh	r3, [r4, #12]
 80148f0:	f043 0308 	orr.w	r3, r3, #8
 80148f4:	81a3      	strh	r3, [r4, #12]
 80148f6:	6923      	ldr	r3, [r4, #16]
 80148f8:	b94b      	cbnz	r3, 801490e <__swsetup_r+0x7a>
 80148fa:	89a3      	ldrh	r3, [r4, #12]
 80148fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014900:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014904:	d003      	beq.n	801490e <__swsetup_r+0x7a>
 8014906:	4621      	mov	r1, r4
 8014908:	4628      	mov	r0, r5
 801490a:	f000 f88b 	bl	8014a24 <__smakebuf_r>
 801490e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014912:	f013 0201 	ands.w	r2, r3, #1
 8014916:	d00a      	beq.n	801492e <__swsetup_r+0x9a>
 8014918:	2200      	movs	r2, #0
 801491a:	60a2      	str	r2, [r4, #8]
 801491c:	6962      	ldr	r2, [r4, #20]
 801491e:	4252      	negs	r2, r2
 8014920:	61a2      	str	r2, [r4, #24]
 8014922:	6922      	ldr	r2, [r4, #16]
 8014924:	b942      	cbnz	r2, 8014938 <__swsetup_r+0xa4>
 8014926:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801492a:	d1c5      	bne.n	80148b8 <__swsetup_r+0x24>
 801492c:	bd38      	pop	{r3, r4, r5, pc}
 801492e:	0799      	lsls	r1, r3, #30
 8014930:	bf58      	it	pl
 8014932:	6962      	ldrpl	r2, [r4, #20]
 8014934:	60a2      	str	r2, [r4, #8]
 8014936:	e7f4      	b.n	8014922 <__swsetup_r+0x8e>
 8014938:	2000      	movs	r0, #0
 801493a:	e7f7      	b.n	801492c <__swsetup_r+0x98>
 801493c:	20000198 	.word	0x20000198

08014940 <_raise_r>:
 8014940:	291f      	cmp	r1, #31
 8014942:	b538      	push	{r3, r4, r5, lr}
 8014944:	4605      	mov	r5, r0
 8014946:	460c      	mov	r4, r1
 8014948:	d904      	bls.n	8014954 <_raise_r+0x14>
 801494a:	2316      	movs	r3, #22
 801494c:	6003      	str	r3, [r0, #0]
 801494e:	f04f 30ff 	mov.w	r0, #4294967295
 8014952:	bd38      	pop	{r3, r4, r5, pc}
 8014954:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014956:	b112      	cbz	r2, 801495e <_raise_r+0x1e>
 8014958:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801495c:	b94b      	cbnz	r3, 8014972 <_raise_r+0x32>
 801495e:	4628      	mov	r0, r5
 8014960:	f000 f830 	bl	80149c4 <_getpid_r>
 8014964:	4622      	mov	r2, r4
 8014966:	4601      	mov	r1, r0
 8014968:	4628      	mov	r0, r5
 801496a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801496e:	f000 b817 	b.w	80149a0 <_kill_r>
 8014972:	2b01      	cmp	r3, #1
 8014974:	d00a      	beq.n	801498c <_raise_r+0x4c>
 8014976:	1c59      	adds	r1, r3, #1
 8014978:	d103      	bne.n	8014982 <_raise_r+0x42>
 801497a:	2316      	movs	r3, #22
 801497c:	6003      	str	r3, [r0, #0]
 801497e:	2001      	movs	r0, #1
 8014980:	e7e7      	b.n	8014952 <_raise_r+0x12>
 8014982:	2100      	movs	r1, #0
 8014984:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014988:	4620      	mov	r0, r4
 801498a:	4798      	blx	r3
 801498c:	2000      	movs	r0, #0
 801498e:	e7e0      	b.n	8014952 <_raise_r+0x12>

08014990 <raise>:
 8014990:	4b02      	ldr	r3, [pc, #8]	@ (801499c <raise+0xc>)
 8014992:	4601      	mov	r1, r0
 8014994:	6818      	ldr	r0, [r3, #0]
 8014996:	f7ff bfd3 	b.w	8014940 <_raise_r>
 801499a:	bf00      	nop
 801499c:	20000198 	.word	0x20000198

080149a0 <_kill_r>:
 80149a0:	b538      	push	{r3, r4, r5, lr}
 80149a2:	4d07      	ldr	r5, [pc, #28]	@ (80149c0 <_kill_r+0x20>)
 80149a4:	2300      	movs	r3, #0
 80149a6:	4604      	mov	r4, r0
 80149a8:	4608      	mov	r0, r1
 80149aa:	4611      	mov	r1, r2
 80149ac:	602b      	str	r3, [r5, #0]
 80149ae:	f7f5 f9c8 	bl	8009d42 <_kill>
 80149b2:	1c43      	adds	r3, r0, #1
 80149b4:	d102      	bne.n	80149bc <_kill_r+0x1c>
 80149b6:	682b      	ldr	r3, [r5, #0]
 80149b8:	b103      	cbz	r3, 80149bc <_kill_r+0x1c>
 80149ba:	6023      	str	r3, [r4, #0]
 80149bc:	bd38      	pop	{r3, r4, r5, pc}
 80149be:	bf00      	nop
 80149c0:	20007184 	.word	0x20007184

080149c4 <_getpid_r>:
 80149c4:	f7f5 b9b5 	b.w	8009d32 <_getpid>

080149c8 <_malloc_usable_size_r>:
 80149c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80149cc:	1f18      	subs	r0, r3, #4
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	bfbc      	itt	lt
 80149d2:	580b      	ldrlt	r3, [r1, r0]
 80149d4:	18c0      	addlt	r0, r0, r3
 80149d6:	4770      	bx	lr

080149d8 <__swhatbuf_r>:
 80149d8:	b570      	push	{r4, r5, r6, lr}
 80149da:	460c      	mov	r4, r1
 80149dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149e0:	2900      	cmp	r1, #0
 80149e2:	b096      	sub	sp, #88	@ 0x58
 80149e4:	4615      	mov	r5, r2
 80149e6:	461e      	mov	r6, r3
 80149e8:	da0d      	bge.n	8014a06 <__swhatbuf_r+0x2e>
 80149ea:	89a3      	ldrh	r3, [r4, #12]
 80149ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80149f0:	f04f 0100 	mov.w	r1, #0
 80149f4:	bf14      	ite	ne
 80149f6:	2340      	movne	r3, #64	@ 0x40
 80149f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80149fc:	2000      	movs	r0, #0
 80149fe:	6031      	str	r1, [r6, #0]
 8014a00:	602b      	str	r3, [r5, #0]
 8014a02:	b016      	add	sp, #88	@ 0x58
 8014a04:	bd70      	pop	{r4, r5, r6, pc}
 8014a06:	466a      	mov	r2, sp
 8014a08:	f000 f848 	bl	8014a9c <_fstat_r>
 8014a0c:	2800      	cmp	r0, #0
 8014a0e:	dbec      	blt.n	80149ea <__swhatbuf_r+0x12>
 8014a10:	9901      	ldr	r1, [sp, #4]
 8014a12:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014a16:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014a1a:	4259      	negs	r1, r3
 8014a1c:	4159      	adcs	r1, r3
 8014a1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014a22:	e7eb      	b.n	80149fc <__swhatbuf_r+0x24>

08014a24 <__smakebuf_r>:
 8014a24:	898b      	ldrh	r3, [r1, #12]
 8014a26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014a28:	079d      	lsls	r5, r3, #30
 8014a2a:	4606      	mov	r6, r0
 8014a2c:	460c      	mov	r4, r1
 8014a2e:	d507      	bpl.n	8014a40 <__smakebuf_r+0x1c>
 8014a30:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014a34:	6023      	str	r3, [r4, #0]
 8014a36:	6123      	str	r3, [r4, #16]
 8014a38:	2301      	movs	r3, #1
 8014a3a:	6163      	str	r3, [r4, #20]
 8014a3c:	b003      	add	sp, #12
 8014a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a40:	ab01      	add	r3, sp, #4
 8014a42:	466a      	mov	r2, sp
 8014a44:	f7ff ffc8 	bl	80149d8 <__swhatbuf_r>
 8014a48:	9f00      	ldr	r7, [sp, #0]
 8014a4a:	4605      	mov	r5, r0
 8014a4c:	4639      	mov	r1, r7
 8014a4e:	4630      	mov	r0, r6
 8014a50:	f7fe fd40 	bl	80134d4 <_malloc_r>
 8014a54:	b948      	cbnz	r0, 8014a6a <__smakebuf_r+0x46>
 8014a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a5a:	059a      	lsls	r2, r3, #22
 8014a5c:	d4ee      	bmi.n	8014a3c <__smakebuf_r+0x18>
 8014a5e:	f023 0303 	bic.w	r3, r3, #3
 8014a62:	f043 0302 	orr.w	r3, r3, #2
 8014a66:	81a3      	strh	r3, [r4, #12]
 8014a68:	e7e2      	b.n	8014a30 <__smakebuf_r+0xc>
 8014a6a:	89a3      	ldrh	r3, [r4, #12]
 8014a6c:	6020      	str	r0, [r4, #0]
 8014a6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014a72:	81a3      	strh	r3, [r4, #12]
 8014a74:	9b01      	ldr	r3, [sp, #4]
 8014a76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014a7a:	b15b      	cbz	r3, 8014a94 <__smakebuf_r+0x70>
 8014a7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014a80:	4630      	mov	r0, r6
 8014a82:	f000 f81d 	bl	8014ac0 <_isatty_r>
 8014a86:	b128      	cbz	r0, 8014a94 <__smakebuf_r+0x70>
 8014a88:	89a3      	ldrh	r3, [r4, #12]
 8014a8a:	f023 0303 	bic.w	r3, r3, #3
 8014a8e:	f043 0301 	orr.w	r3, r3, #1
 8014a92:	81a3      	strh	r3, [r4, #12]
 8014a94:	89a3      	ldrh	r3, [r4, #12]
 8014a96:	431d      	orrs	r5, r3
 8014a98:	81a5      	strh	r5, [r4, #12]
 8014a9a:	e7cf      	b.n	8014a3c <__smakebuf_r+0x18>

08014a9c <_fstat_r>:
 8014a9c:	b538      	push	{r3, r4, r5, lr}
 8014a9e:	4d07      	ldr	r5, [pc, #28]	@ (8014abc <_fstat_r+0x20>)
 8014aa0:	2300      	movs	r3, #0
 8014aa2:	4604      	mov	r4, r0
 8014aa4:	4608      	mov	r0, r1
 8014aa6:	4611      	mov	r1, r2
 8014aa8:	602b      	str	r3, [r5, #0]
 8014aaa:	f7f5 f9aa 	bl	8009e02 <_fstat>
 8014aae:	1c43      	adds	r3, r0, #1
 8014ab0:	d102      	bne.n	8014ab8 <_fstat_r+0x1c>
 8014ab2:	682b      	ldr	r3, [r5, #0]
 8014ab4:	b103      	cbz	r3, 8014ab8 <_fstat_r+0x1c>
 8014ab6:	6023      	str	r3, [r4, #0]
 8014ab8:	bd38      	pop	{r3, r4, r5, pc}
 8014aba:	bf00      	nop
 8014abc:	20007184 	.word	0x20007184

08014ac0 <_isatty_r>:
 8014ac0:	b538      	push	{r3, r4, r5, lr}
 8014ac2:	4d06      	ldr	r5, [pc, #24]	@ (8014adc <_isatty_r+0x1c>)
 8014ac4:	2300      	movs	r3, #0
 8014ac6:	4604      	mov	r4, r0
 8014ac8:	4608      	mov	r0, r1
 8014aca:	602b      	str	r3, [r5, #0]
 8014acc:	f7f5 f9a9 	bl	8009e22 <_isatty>
 8014ad0:	1c43      	adds	r3, r0, #1
 8014ad2:	d102      	bne.n	8014ada <_isatty_r+0x1a>
 8014ad4:	682b      	ldr	r3, [r5, #0]
 8014ad6:	b103      	cbz	r3, 8014ada <_isatty_r+0x1a>
 8014ad8:	6023      	str	r3, [r4, #0]
 8014ada:	bd38      	pop	{r3, r4, r5, pc}
 8014adc:	20007184 	.word	0x20007184

08014ae0 <sqrt>:
 8014ae0:	b538      	push	{r3, r4, r5, lr}
 8014ae2:	ed2d 8b02 	vpush	{d8}
 8014ae6:	ec55 4b10 	vmov	r4, r5, d0
 8014aea:	f000 fa6d 	bl	8014fc8 <__ieee754_sqrt>
 8014aee:	4622      	mov	r2, r4
 8014af0:	462b      	mov	r3, r5
 8014af2:	4620      	mov	r0, r4
 8014af4:	4629      	mov	r1, r5
 8014af6:	eeb0 8a40 	vmov.f32	s16, s0
 8014afa:	eef0 8a60 	vmov.f32	s17, s1
 8014afe:	f7ec f835 	bl	8000b6c <__aeabi_dcmpun>
 8014b02:	b990      	cbnz	r0, 8014b2a <sqrt+0x4a>
 8014b04:	2200      	movs	r2, #0
 8014b06:	2300      	movs	r3, #0
 8014b08:	4620      	mov	r0, r4
 8014b0a:	4629      	mov	r1, r5
 8014b0c:	f7ec f806 	bl	8000b1c <__aeabi_dcmplt>
 8014b10:	b158      	cbz	r0, 8014b2a <sqrt+0x4a>
 8014b12:	f7fd fa7d 	bl	8012010 <__errno>
 8014b16:	2321      	movs	r3, #33	@ 0x21
 8014b18:	6003      	str	r3, [r0, #0]
 8014b1a:	2200      	movs	r2, #0
 8014b1c:	2300      	movs	r3, #0
 8014b1e:	4610      	mov	r0, r2
 8014b20:	4619      	mov	r1, r3
 8014b22:	f7eb feb3 	bl	800088c <__aeabi_ddiv>
 8014b26:	ec41 0b18 	vmov	d8, r0, r1
 8014b2a:	eeb0 0a48 	vmov.f32	s0, s16
 8014b2e:	eef0 0a68 	vmov.f32	s1, s17
 8014b32:	ecbd 8b02 	vpop	{d8}
 8014b36:	bd38      	pop	{r3, r4, r5, pc}

08014b38 <atan>:
 8014b38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b3c:	ec55 4b10 	vmov	r4, r5, d0
 8014b40:	4bbf      	ldr	r3, [pc, #764]	@ (8014e40 <atan+0x308>)
 8014b42:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8014b46:	429e      	cmp	r6, r3
 8014b48:	46ab      	mov	fp, r5
 8014b4a:	d918      	bls.n	8014b7e <atan+0x46>
 8014b4c:	4bbd      	ldr	r3, [pc, #756]	@ (8014e44 <atan+0x30c>)
 8014b4e:	429e      	cmp	r6, r3
 8014b50:	d801      	bhi.n	8014b56 <atan+0x1e>
 8014b52:	d109      	bne.n	8014b68 <atan+0x30>
 8014b54:	b144      	cbz	r4, 8014b68 <atan+0x30>
 8014b56:	4622      	mov	r2, r4
 8014b58:	462b      	mov	r3, r5
 8014b5a:	4620      	mov	r0, r4
 8014b5c:	4629      	mov	r1, r5
 8014b5e:	f7eb fbb5 	bl	80002cc <__adddf3>
 8014b62:	4604      	mov	r4, r0
 8014b64:	460d      	mov	r5, r1
 8014b66:	e006      	b.n	8014b76 <atan+0x3e>
 8014b68:	f1bb 0f00 	cmp.w	fp, #0
 8014b6c:	f340 812b 	ble.w	8014dc6 <atan+0x28e>
 8014b70:	a597      	add	r5, pc, #604	@ (adr r5, 8014dd0 <atan+0x298>)
 8014b72:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014b76:	ec45 4b10 	vmov	d0, r4, r5
 8014b7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b7e:	4bb2      	ldr	r3, [pc, #712]	@ (8014e48 <atan+0x310>)
 8014b80:	429e      	cmp	r6, r3
 8014b82:	d813      	bhi.n	8014bac <atan+0x74>
 8014b84:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8014b88:	429e      	cmp	r6, r3
 8014b8a:	d80c      	bhi.n	8014ba6 <atan+0x6e>
 8014b8c:	a392      	add	r3, pc, #584	@ (adr r3, 8014dd8 <atan+0x2a0>)
 8014b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b92:	4620      	mov	r0, r4
 8014b94:	4629      	mov	r1, r5
 8014b96:	f7eb fb99 	bl	80002cc <__adddf3>
 8014b9a:	4bac      	ldr	r3, [pc, #688]	@ (8014e4c <atan+0x314>)
 8014b9c:	2200      	movs	r2, #0
 8014b9e:	f7eb ffdb 	bl	8000b58 <__aeabi_dcmpgt>
 8014ba2:	2800      	cmp	r0, #0
 8014ba4:	d1e7      	bne.n	8014b76 <atan+0x3e>
 8014ba6:	f04f 3aff 	mov.w	sl, #4294967295
 8014baa:	e029      	b.n	8014c00 <atan+0xc8>
 8014bac:	f000 f9b0 	bl	8014f10 <fabs>
 8014bb0:	4ba7      	ldr	r3, [pc, #668]	@ (8014e50 <atan+0x318>)
 8014bb2:	429e      	cmp	r6, r3
 8014bb4:	ec55 4b10 	vmov	r4, r5, d0
 8014bb8:	f200 80bc 	bhi.w	8014d34 <atan+0x1fc>
 8014bbc:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8014bc0:	429e      	cmp	r6, r3
 8014bc2:	f200 809e 	bhi.w	8014d02 <atan+0x1ca>
 8014bc6:	4622      	mov	r2, r4
 8014bc8:	462b      	mov	r3, r5
 8014bca:	4620      	mov	r0, r4
 8014bcc:	4629      	mov	r1, r5
 8014bce:	f7eb fb7d 	bl	80002cc <__adddf3>
 8014bd2:	4b9e      	ldr	r3, [pc, #632]	@ (8014e4c <atan+0x314>)
 8014bd4:	2200      	movs	r2, #0
 8014bd6:	f7eb fb77 	bl	80002c8 <__aeabi_dsub>
 8014bda:	2200      	movs	r2, #0
 8014bdc:	4606      	mov	r6, r0
 8014bde:	460f      	mov	r7, r1
 8014be0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8014be4:	4620      	mov	r0, r4
 8014be6:	4629      	mov	r1, r5
 8014be8:	f7eb fb70 	bl	80002cc <__adddf3>
 8014bec:	4602      	mov	r2, r0
 8014bee:	460b      	mov	r3, r1
 8014bf0:	4630      	mov	r0, r6
 8014bf2:	4639      	mov	r1, r7
 8014bf4:	f7eb fe4a 	bl	800088c <__aeabi_ddiv>
 8014bf8:	f04f 0a00 	mov.w	sl, #0
 8014bfc:	4604      	mov	r4, r0
 8014bfe:	460d      	mov	r5, r1
 8014c00:	4622      	mov	r2, r4
 8014c02:	462b      	mov	r3, r5
 8014c04:	4620      	mov	r0, r4
 8014c06:	4629      	mov	r1, r5
 8014c08:	f7eb fd16 	bl	8000638 <__aeabi_dmul>
 8014c0c:	4602      	mov	r2, r0
 8014c0e:	460b      	mov	r3, r1
 8014c10:	4680      	mov	r8, r0
 8014c12:	4689      	mov	r9, r1
 8014c14:	f7eb fd10 	bl	8000638 <__aeabi_dmul>
 8014c18:	a371      	add	r3, pc, #452	@ (adr r3, 8014de0 <atan+0x2a8>)
 8014c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c1e:	4606      	mov	r6, r0
 8014c20:	460f      	mov	r7, r1
 8014c22:	f7eb fd09 	bl	8000638 <__aeabi_dmul>
 8014c26:	a370      	add	r3, pc, #448	@ (adr r3, 8014de8 <atan+0x2b0>)
 8014c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c2c:	f7eb fb4e 	bl	80002cc <__adddf3>
 8014c30:	4632      	mov	r2, r6
 8014c32:	463b      	mov	r3, r7
 8014c34:	f7eb fd00 	bl	8000638 <__aeabi_dmul>
 8014c38:	a36d      	add	r3, pc, #436	@ (adr r3, 8014df0 <atan+0x2b8>)
 8014c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c3e:	f7eb fb45 	bl	80002cc <__adddf3>
 8014c42:	4632      	mov	r2, r6
 8014c44:	463b      	mov	r3, r7
 8014c46:	f7eb fcf7 	bl	8000638 <__aeabi_dmul>
 8014c4a:	a36b      	add	r3, pc, #428	@ (adr r3, 8014df8 <atan+0x2c0>)
 8014c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c50:	f7eb fb3c 	bl	80002cc <__adddf3>
 8014c54:	4632      	mov	r2, r6
 8014c56:	463b      	mov	r3, r7
 8014c58:	f7eb fcee 	bl	8000638 <__aeabi_dmul>
 8014c5c:	a368      	add	r3, pc, #416	@ (adr r3, 8014e00 <atan+0x2c8>)
 8014c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c62:	f7eb fb33 	bl	80002cc <__adddf3>
 8014c66:	4632      	mov	r2, r6
 8014c68:	463b      	mov	r3, r7
 8014c6a:	f7eb fce5 	bl	8000638 <__aeabi_dmul>
 8014c6e:	a366      	add	r3, pc, #408	@ (adr r3, 8014e08 <atan+0x2d0>)
 8014c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c74:	f7eb fb2a 	bl	80002cc <__adddf3>
 8014c78:	4642      	mov	r2, r8
 8014c7a:	464b      	mov	r3, r9
 8014c7c:	f7eb fcdc 	bl	8000638 <__aeabi_dmul>
 8014c80:	a363      	add	r3, pc, #396	@ (adr r3, 8014e10 <atan+0x2d8>)
 8014c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c86:	4680      	mov	r8, r0
 8014c88:	4689      	mov	r9, r1
 8014c8a:	4630      	mov	r0, r6
 8014c8c:	4639      	mov	r1, r7
 8014c8e:	f7eb fcd3 	bl	8000638 <__aeabi_dmul>
 8014c92:	a361      	add	r3, pc, #388	@ (adr r3, 8014e18 <atan+0x2e0>)
 8014c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c98:	f7eb fb16 	bl	80002c8 <__aeabi_dsub>
 8014c9c:	4632      	mov	r2, r6
 8014c9e:	463b      	mov	r3, r7
 8014ca0:	f7eb fcca 	bl	8000638 <__aeabi_dmul>
 8014ca4:	a35e      	add	r3, pc, #376	@ (adr r3, 8014e20 <atan+0x2e8>)
 8014ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014caa:	f7eb fb0d 	bl	80002c8 <__aeabi_dsub>
 8014cae:	4632      	mov	r2, r6
 8014cb0:	463b      	mov	r3, r7
 8014cb2:	f7eb fcc1 	bl	8000638 <__aeabi_dmul>
 8014cb6:	a35c      	add	r3, pc, #368	@ (adr r3, 8014e28 <atan+0x2f0>)
 8014cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cbc:	f7eb fb04 	bl	80002c8 <__aeabi_dsub>
 8014cc0:	4632      	mov	r2, r6
 8014cc2:	463b      	mov	r3, r7
 8014cc4:	f7eb fcb8 	bl	8000638 <__aeabi_dmul>
 8014cc8:	a359      	add	r3, pc, #356	@ (adr r3, 8014e30 <atan+0x2f8>)
 8014cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cce:	f7eb fafb 	bl	80002c8 <__aeabi_dsub>
 8014cd2:	4632      	mov	r2, r6
 8014cd4:	463b      	mov	r3, r7
 8014cd6:	f7eb fcaf 	bl	8000638 <__aeabi_dmul>
 8014cda:	4602      	mov	r2, r0
 8014cdc:	460b      	mov	r3, r1
 8014cde:	4640      	mov	r0, r8
 8014ce0:	4649      	mov	r1, r9
 8014ce2:	f7eb faf3 	bl	80002cc <__adddf3>
 8014ce6:	4622      	mov	r2, r4
 8014ce8:	462b      	mov	r3, r5
 8014cea:	f7eb fca5 	bl	8000638 <__aeabi_dmul>
 8014cee:	f1ba 3fff 	cmp.w	sl, #4294967295
 8014cf2:	4602      	mov	r2, r0
 8014cf4:	460b      	mov	r3, r1
 8014cf6:	d148      	bne.n	8014d8a <atan+0x252>
 8014cf8:	4620      	mov	r0, r4
 8014cfa:	4629      	mov	r1, r5
 8014cfc:	f7eb fae4 	bl	80002c8 <__aeabi_dsub>
 8014d00:	e72f      	b.n	8014b62 <atan+0x2a>
 8014d02:	4b52      	ldr	r3, [pc, #328]	@ (8014e4c <atan+0x314>)
 8014d04:	2200      	movs	r2, #0
 8014d06:	4620      	mov	r0, r4
 8014d08:	4629      	mov	r1, r5
 8014d0a:	f7eb fadd 	bl	80002c8 <__aeabi_dsub>
 8014d0e:	4b4f      	ldr	r3, [pc, #316]	@ (8014e4c <atan+0x314>)
 8014d10:	4606      	mov	r6, r0
 8014d12:	460f      	mov	r7, r1
 8014d14:	2200      	movs	r2, #0
 8014d16:	4620      	mov	r0, r4
 8014d18:	4629      	mov	r1, r5
 8014d1a:	f7eb fad7 	bl	80002cc <__adddf3>
 8014d1e:	4602      	mov	r2, r0
 8014d20:	460b      	mov	r3, r1
 8014d22:	4630      	mov	r0, r6
 8014d24:	4639      	mov	r1, r7
 8014d26:	f7eb fdb1 	bl	800088c <__aeabi_ddiv>
 8014d2a:	f04f 0a01 	mov.w	sl, #1
 8014d2e:	4604      	mov	r4, r0
 8014d30:	460d      	mov	r5, r1
 8014d32:	e765      	b.n	8014c00 <atan+0xc8>
 8014d34:	4b47      	ldr	r3, [pc, #284]	@ (8014e54 <atan+0x31c>)
 8014d36:	429e      	cmp	r6, r3
 8014d38:	d21c      	bcs.n	8014d74 <atan+0x23c>
 8014d3a:	4b47      	ldr	r3, [pc, #284]	@ (8014e58 <atan+0x320>)
 8014d3c:	2200      	movs	r2, #0
 8014d3e:	4620      	mov	r0, r4
 8014d40:	4629      	mov	r1, r5
 8014d42:	f7eb fac1 	bl	80002c8 <__aeabi_dsub>
 8014d46:	4b44      	ldr	r3, [pc, #272]	@ (8014e58 <atan+0x320>)
 8014d48:	4606      	mov	r6, r0
 8014d4a:	460f      	mov	r7, r1
 8014d4c:	2200      	movs	r2, #0
 8014d4e:	4620      	mov	r0, r4
 8014d50:	4629      	mov	r1, r5
 8014d52:	f7eb fc71 	bl	8000638 <__aeabi_dmul>
 8014d56:	4b3d      	ldr	r3, [pc, #244]	@ (8014e4c <atan+0x314>)
 8014d58:	2200      	movs	r2, #0
 8014d5a:	f7eb fab7 	bl	80002cc <__adddf3>
 8014d5e:	4602      	mov	r2, r0
 8014d60:	460b      	mov	r3, r1
 8014d62:	4630      	mov	r0, r6
 8014d64:	4639      	mov	r1, r7
 8014d66:	f7eb fd91 	bl	800088c <__aeabi_ddiv>
 8014d6a:	f04f 0a02 	mov.w	sl, #2
 8014d6e:	4604      	mov	r4, r0
 8014d70:	460d      	mov	r5, r1
 8014d72:	e745      	b.n	8014c00 <atan+0xc8>
 8014d74:	4622      	mov	r2, r4
 8014d76:	462b      	mov	r3, r5
 8014d78:	4938      	ldr	r1, [pc, #224]	@ (8014e5c <atan+0x324>)
 8014d7a:	2000      	movs	r0, #0
 8014d7c:	f7eb fd86 	bl	800088c <__aeabi_ddiv>
 8014d80:	f04f 0a03 	mov.w	sl, #3
 8014d84:	4604      	mov	r4, r0
 8014d86:	460d      	mov	r5, r1
 8014d88:	e73a      	b.n	8014c00 <atan+0xc8>
 8014d8a:	4b35      	ldr	r3, [pc, #212]	@ (8014e60 <atan+0x328>)
 8014d8c:	4e35      	ldr	r6, [pc, #212]	@ (8014e64 <atan+0x32c>)
 8014d8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d96:	f7eb fa97 	bl	80002c8 <__aeabi_dsub>
 8014d9a:	4622      	mov	r2, r4
 8014d9c:	462b      	mov	r3, r5
 8014d9e:	f7eb fa93 	bl	80002c8 <__aeabi_dsub>
 8014da2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8014da6:	4602      	mov	r2, r0
 8014da8:	460b      	mov	r3, r1
 8014daa:	e9d6 0100 	ldrd	r0, r1, [r6]
 8014dae:	f7eb fa8b 	bl	80002c8 <__aeabi_dsub>
 8014db2:	f1bb 0f00 	cmp.w	fp, #0
 8014db6:	4604      	mov	r4, r0
 8014db8:	460d      	mov	r5, r1
 8014dba:	f6bf aedc 	bge.w	8014b76 <atan+0x3e>
 8014dbe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014dc2:	461d      	mov	r5, r3
 8014dc4:	e6d7      	b.n	8014b76 <atan+0x3e>
 8014dc6:	a51c      	add	r5, pc, #112	@ (adr r5, 8014e38 <atan+0x300>)
 8014dc8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014dcc:	e6d3      	b.n	8014b76 <atan+0x3e>
 8014dce:	bf00      	nop
 8014dd0:	54442d18 	.word	0x54442d18
 8014dd4:	3ff921fb 	.word	0x3ff921fb
 8014dd8:	8800759c 	.word	0x8800759c
 8014ddc:	7e37e43c 	.word	0x7e37e43c
 8014de0:	e322da11 	.word	0xe322da11
 8014de4:	3f90ad3a 	.word	0x3f90ad3a
 8014de8:	24760deb 	.word	0x24760deb
 8014dec:	3fa97b4b 	.word	0x3fa97b4b
 8014df0:	a0d03d51 	.word	0xa0d03d51
 8014df4:	3fb10d66 	.word	0x3fb10d66
 8014df8:	c54c206e 	.word	0xc54c206e
 8014dfc:	3fb745cd 	.word	0x3fb745cd
 8014e00:	920083ff 	.word	0x920083ff
 8014e04:	3fc24924 	.word	0x3fc24924
 8014e08:	5555550d 	.word	0x5555550d
 8014e0c:	3fd55555 	.word	0x3fd55555
 8014e10:	2c6a6c2f 	.word	0x2c6a6c2f
 8014e14:	bfa2b444 	.word	0xbfa2b444
 8014e18:	52defd9a 	.word	0x52defd9a
 8014e1c:	3fadde2d 	.word	0x3fadde2d
 8014e20:	af749a6d 	.word	0xaf749a6d
 8014e24:	3fb3b0f2 	.word	0x3fb3b0f2
 8014e28:	fe231671 	.word	0xfe231671
 8014e2c:	3fbc71c6 	.word	0x3fbc71c6
 8014e30:	9998ebc4 	.word	0x9998ebc4
 8014e34:	3fc99999 	.word	0x3fc99999
 8014e38:	54442d18 	.word	0x54442d18
 8014e3c:	bff921fb 	.word	0xbff921fb
 8014e40:	440fffff 	.word	0x440fffff
 8014e44:	7ff00000 	.word	0x7ff00000
 8014e48:	3fdbffff 	.word	0x3fdbffff
 8014e4c:	3ff00000 	.word	0x3ff00000
 8014e50:	3ff2ffff 	.word	0x3ff2ffff
 8014e54:	40038000 	.word	0x40038000
 8014e58:	3ff80000 	.word	0x3ff80000
 8014e5c:	bff00000 	.word	0xbff00000
 8014e60:	08016b08 	.word	0x08016b08
 8014e64:	08016b28 	.word	0x08016b28

08014e68 <cos>:
 8014e68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014e6a:	ec53 2b10 	vmov	r2, r3, d0
 8014e6e:	4826      	ldr	r0, [pc, #152]	@ (8014f08 <cos+0xa0>)
 8014e70:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8014e74:	4281      	cmp	r1, r0
 8014e76:	d806      	bhi.n	8014e86 <cos+0x1e>
 8014e78:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8014f00 <cos+0x98>
 8014e7c:	b005      	add	sp, #20
 8014e7e:	f85d eb04 	ldr.w	lr, [sp], #4
 8014e82:	f000 b97d 	b.w	8015180 <__kernel_cos>
 8014e86:	4821      	ldr	r0, [pc, #132]	@ (8014f0c <cos+0xa4>)
 8014e88:	4281      	cmp	r1, r0
 8014e8a:	d908      	bls.n	8014e9e <cos+0x36>
 8014e8c:	4610      	mov	r0, r2
 8014e8e:	4619      	mov	r1, r3
 8014e90:	f7eb fa1a 	bl	80002c8 <__aeabi_dsub>
 8014e94:	ec41 0b10 	vmov	d0, r0, r1
 8014e98:	b005      	add	sp, #20
 8014e9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8014e9e:	4668      	mov	r0, sp
 8014ea0:	f000 faf2 	bl	8015488 <__ieee754_rem_pio2>
 8014ea4:	f000 0003 	and.w	r0, r0, #3
 8014ea8:	2801      	cmp	r0, #1
 8014eaa:	d00b      	beq.n	8014ec4 <cos+0x5c>
 8014eac:	2802      	cmp	r0, #2
 8014eae:	d015      	beq.n	8014edc <cos+0x74>
 8014eb0:	b9d8      	cbnz	r0, 8014eea <cos+0x82>
 8014eb2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014eb6:	ed9d 0b00 	vldr	d0, [sp]
 8014eba:	f000 f961 	bl	8015180 <__kernel_cos>
 8014ebe:	ec51 0b10 	vmov	r0, r1, d0
 8014ec2:	e7e7      	b.n	8014e94 <cos+0x2c>
 8014ec4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014ec8:	ed9d 0b00 	vldr	d0, [sp]
 8014ecc:	f000 fa20 	bl	8015310 <__kernel_sin>
 8014ed0:	ec53 2b10 	vmov	r2, r3, d0
 8014ed4:	4610      	mov	r0, r2
 8014ed6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8014eda:	e7db      	b.n	8014e94 <cos+0x2c>
 8014edc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014ee0:	ed9d 0b00 	vldr	d0, [sp]
 8014ee4:	f000 f94c 	bl	8015180 <__kernel_cos>
 8014ee8:	e7f2      	b.n	8014ed0 <cos+0x68>
 8014eea:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014eee:	ed9d 0b00 	vldr	d0, [sp]
 8014ef2:	2001      	movs	r0, #1
 8014ef4:	f000 fa0c 	bl	8015310 <__kernel_sin>
 8014ef8:	e7e1      	b.n	8014ebe <cos+0x56>
 8014efa:	bf00      	nop
 8014efc:	f3af 8000 	nop.w
	...
 8014f08:	3fe921fb 	.word	0x3fe921fb
 8014f0c:	7fefffff 	.word	0x7fefffff

08014f10 <fabs>:
 8014f10:	ec51 0b10 	vmov	r0, r1, d0
 8014f14:	4602      	mov	r2, r0
 8014f16:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8014f1a:	ec43 2b10 	vmov	d0, r2, r3
 8014f1e:	4770      	bx	lr

08014f20 <sin>:
 8014f20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014f22:	ec53 2b10 	vmov	r2, r3, d0
 8014f26:	4826      	ldr	r0, [pc, #152]	@ (8014fc0 <sin+0xa0>)
 8014f28:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8014f2c:	4281      	cmp	r1, r0
 8014f2e:	d807      	bhi.n	8014f40 <sin+0x20>
 8014f30:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8014fb8 <sin+0x98>
 8014f34:	2000      	movs	r0, #0
 8014f36:	b005      	add	sp, #20
 8014f38:	f85d eb04 	ldr.w	lr, [sp], #4
 8014f3c:	f000 b9e8 	b.w	8015310 <__kernel_sin>
 8014f40:	4820      	ldr	r0, [pc, #128]	@ (8014fc4 <sin+0xa4>)
 8014f42:	4281      	cmp	r1, r0
 8014f44:	d908      	bls.n	8014f58 <sin+0x38>
 8014f46:	4610      	mov	r0, r2
 8014f48:	4619      	mov	r1, r3
 8014f4a:	f7eb f9bd 	bl	80002c8 <__aeabi_dsub>
 8014f4e:	ec41 0b10 	vmov	d0, r0, r1
 8014f52:	b005      	add	sp, #20
 8014f54:	f85d fb04 	ldr.w	pc, [sp], #4
 8014f58:	4668      	mov	r0, sp
 8014f5a:	f000 fa95 	bl	8015488 <__ieee754_rem_pio2>
 8014f5e:	f000 0003 	and.w	r0, r0, #3
 8014f62:	2801      	cmp	r0, #1
 8014f64:	d00c      	beq.n	8014f80 <sin+0x60>
 8014f66:	2802      	cmp	r0, #2
 8014f68:	d011      	beq.n	8014f8e <sin+0x6e>
 8014f6a:	b9e8      	cbnz	r0, 8014fa8 <sin+0x88>
 8014f6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014f70:	ed9d 0b00 	vldr	d0, [sp]
 8014f74:	2001      	movs	r0, #1
 8014f76:	f000 f9cb 	bl	8015310 <__kernel_sin>
 8014f7a:	ec51 0b10 	vmov	r0, r1, d0
 8014f7e:	e7e6      	b.n	8014f4e <sin+0x2e>
 8014f80:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014f84:	ed9d 0b00 	vldr	d0, [sp]
 8014f88:	f000 f8fa 	bl	8015180 <__kernel_cos>
 8014f8c:	e7f5      	b.n	8014f7a <sin+0x5a>
 8014f8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014f92:	ed9d 0b00 	vldr	d0, [sp]
 8014f96:	2001      	movs	r0, #1
 8014f98:	f000 f9ba 	bl	8015310 <__kernel_sin>
 8014f9c:	ec53 2b10 	vmov	r2, r3, d0
 8014fa0:	4610      	mov	r0, r2
 8014fa2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8014fa6:	e7d2      	b.n	8014f4e <sin+0x2e>
 8014fa8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014fac:	ed9d 0b00 	vldr	d0, [sp]
 8014fb0:	f000 f8e6 	bl	8015180 <__kernel_cos>
 8014fb4:	e7f2      	b.n	8014f9c <sin+0x7c>
 8014fb6:	bf00      	nop
	...
 8014fc0:	3fe921fb 	.word	0x3fe921fb
 8014fc4:	7fefffff 	.word	0x7fefffff

08014fc8 <__ieee754_sqrt>:
 8014fc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fcc:	4a68      	ldr	r2, [pc, #416]	@ (8015170 <__ieee754_sqrt+0x1a8>)
 8014fce:	ec55 4b10 	vmov	r4, r5, d0
 8014fd2:	43aa      	bics	r2, r5
 8014fd4:	462b      	mov	r3, r5
 8014fd6:	4621      	mov	r1, r4
 8014fd8:	d110      	bne.n	8014ffc <__ieee754_sqrt+0x34>
 8014fda:	4622      	mov	r2, r4
 8014fdc:	4620      	mov	r0, r4
 8014fde:	4629      	mov	r1, r5
 8014fe0:	f7eb fb2a 	bl	8000638 <__aeabi_dmul>
 8014fe4:	4602      	mov	r2, r0
 8014fe6:	460b      	mov	r3, r1
 8014fe8:	4620      	mov	r0, r4
 8014fea:	4629      	mov	r1, r5
 8014fec:	f7eb f96e 	bl	80002cc <__adddf3>
 8014ff0:	4604      	mov	r4, r0
 8014ff2:	460d      	mov	r5, r1
 8014ff4:	ec45 4b10 	vmov	d0, r4, r5
 8014ff8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ffc:	2d00      	cmp	r5, #0
 8014ffe:	dc0e      	bgt.n	801501e <__ieee754_sqrt+0x56>
 8015000:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8015004:	4322      	orrs	r2, r4
 8015006:	d0f5      	beq.n	8014ff4 <__ieee754_sqrt+0x2c>
 8015008:	b19d      	cbz	r5, 8015032 <__ieee754_sqrt+0x6a>
 801500a:	4622      	mov	r2, r4
 801500c:	4620      	mov	r0, r4
 801500e:	4629      	mov	r1, r5
 8015010:	f7eb f95a 	bl	80002c8 <__aeabi_dsub>
 8015014:	4602      	mov	r2, r0
 8015016:	460b      	mov	r3, r1
 8015018:	f7eb fc38 	bl	800088c <__aeabi_ddiv>
 801501c:	e7e8      	b.n	8014ff0 <__ieee754_sqrt+0x28>
 801501e:	152a      	asrs	r2, r5, #20
 8015020:	d115      	bne.n	801504e <__ieee754_sqrt+0x86>
 8015022:	2000      	movs	r0, #0
 8015024:	e009      	b.n	801503a <__ieee754_sqrt+0x72>
 8015026:	0acb      	lsrs	r3, r1, #11
 8015028:	3a15      	subs	r2, #21
 801502a:	0549      	lsls	r1, r1, #21
 801502c:	2b00      	cmp	r3, #0
 801502e:	d0fa      	beq.n	8015026 <__ieee754_sqrt+0x5e>
 8015030:	e7f7      	b.n	8015022 <__ieee754_sqrt+0x5a>
 8015032:	462a      	mov	r2, r5
 8015034:	e7fa      	b.n	801502c <__ieee754_sqrt+0x64>
 8015036:	005b      	lsls	r3, r3, #1
 8015038:	3001      	adds	r0, #1
 801503a:	02dc      	lsls	r4, r3, #11
 801503c:	d5fb      	bpl.n	8015036 <__ieee754_sqrt+0x6e>
 801503e:	1e44      	subs	r4, r0, #1
 8015040:	1b12      	subs	r2, r2, r4
 8015042:	f1c0 0420 	rsb	r4, r0, #32
 8015046:	fa21 f404 	lsr.w	r4, r1, r4
 801504a:	4323      	orrs	r3, r4
 801504c:	4081      	lsls	r1, r0
 801504e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015052:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8015056:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801505a:	07d2      	lsls	r2, r2, #31
 801505c:	bf5c      	itt	pl
 801505e:	005b      	lslpl	r3, r3, #1
 8015060:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8015064:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015068:	bf58      	it	pl
 801506a:	0049      	lslpl	r1, r1, #1
 801506c:	2600      	movs	r6, #0
 801506e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8015072:	106d      	asrs	r5, r5, #1
 8015074:	0049      	lsls	r1, r1, #1
 8015076:	2016      	movs	r0, #22
 8015078:	4632      	mov	r2, r6
 801507a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801507e:	1917      	adds	r7, r2, r4
 8015080:	429f      	cmp	r7, r3
 8015082:	bfde      	ittt	le
 8015084:	193a      	addle	r2, r7, r4
 8015086:	1bdb      	suble	r3, r3, r7
 8015088:	1936      	addle	r6, r6, r4
 801508a:	0fcf      	lsrs	r7, r1, #31
 801508c:	3801      	subs	r0, #1
 801508e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8015092:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015096:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801509a:	d1f0      	bne.n	801507e <__ieee754_sqrt+0xb6>
 801509c:	4604      	mov	r4, r0
 801509e:	2720      	movs	r7, #32
 80150a0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80150a4:	429a      	cmp	r2, r3
 80150a6:	eb00 0e0c 	add.w	lr, r0, ip
 80150aa:	db02      	blt.n	80150b2 <__ieee754_sqrt+0xea>
 80150ac:	d113      	bne.n	80150d6 <__ieee754_sqrt+0x10e>
 80150ae:	458e      	cmp	lr, r1
 80150b0:	d811      	bhi.n	80150d6 <__ieee754_sqrt+0x10e>
 80150b2:	f1be 0f00 	cmp.w	lr, #0
 80150b6:	eb0e 000c 	add.w	r0, lr, ip
 80150ba:	da42      	bge.n	8015142 <__ieee754_sqrt+0x17a>
 80150bc:	2800      	cmp	r0, #0
 80150be:	db40      	blt.n	8015142 <__ieee754_sqrt+0x17a>
 80150c0:	f102 0801 	add.w	r8, r2, #1
 80150c4:	1a9b      	subs	r3, r3, r2
 80150c6:	458e      	cmp	lr, r1
 80150c8:	bf88      	it	hi
 80150ca:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80150ce:	eba1 010e 	sub.w	r1, r1, lr
 80150d2:	4464      	add	r4, ip
 80150d4:	4642      	mov	r2, r8
 80150d6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80150da:	3f01      	subs	r7, #1
 80150dc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80150e0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80150e4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80150e8:	d1dc      	bne.n	80150a4 <__ieee754_sqrt+0xdc>
 80150ea:	4319      	orrs	r1, r3
 80150ec:	d01b      	beq.n	8015126 <__ieee754_sqrt+0x15e>
 80150ee:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8015174 <__ieee754_sqrt+0x1ac>
 80150f2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8015178 <__ieee754_sqrt+0x1b0>
 80150f6:	e9da 0100 	ldrd	r0, r1, [sl]
 80150fa:	e9db 2300 	ldrd	r2, r3, [fp]
 80150fe:	f7eb f8e3 	bl	80002c8 <__aeabi_dsub>
 8015102:	e9da 8900 	ldrd	r8, r9, [sl]
 8015106:	4602      	mov	r2, r0
 8015108:	460b      	mov	r3, r1
 801510a:	4640      	mov	r0, r8
 801510c:	4649      	mov	r1, r9
 801510e:	f7eb fd0f 	bl	8000b30 <__aeabi_dcmple>
 8015112:	b140      	cbz	r0, 8015126 <__ieee754_sqrt+0x15e>
 8015114:	f1b4 3fff 	cmp.w	r4, #4294967295
 8015118:	e9da 0100 	ldrd	r0, r1, [sl]
 801511c:	e9db 2300 	ldrd	r2, r3, [fp]
 8015120:	d111      	bne.n	8015146 <__ieee754_sqrt+0x17e>
 8015122:	3601      	adds	r6, #1
 8015124:	463c      	mov	r4, r7
 8015126:	1072      	asrs	r2, r6, #1
 8015128:	0863      	lsrs	r3, r4, #1
 801512a:	07f1      	lsls	r1, r6, #31
 801512c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8015130:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8015134:	bf48      	it	mi
 8015136:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801513a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801513e:	4618      	mov	r0, r3
 8015140:	e756      	b.n	8014ff0 <__ieee754_sqrt+0x28>
 8015142:	4690      	mov	r8, r2
 8015144:	e7be      	b.n	80150c4 <__ieee754_sqrt+0xfc>
 8015146:	f7eb f8c1 	bl	80002cc <__adddf3>
 801514a:	e9da 8900 	ldrd	r8, r9, [sl]
 801514e:	4602      	mov	r2, r0
 8015150:	460b      	mov	r3, r1
 8015152:	4640      	mov	r0, r8
 8015154:	4649      	mov	r1, r9
 8015156:	f7eb fce1 	bl	8000b1c <__aeabi_dcmplt>
 801515a:	b120      	cbz	r0, 8015166 <__ieee754_sqrt+0x19e>
 801515c:	1ca0      	adds	r0, r4, #2
 801515e:	bf08      	it	eq
 8015160:	3601      	addeq	r6, #1
 8015162:	3402      	adds	r4, #2
 8015164:	e7df      	b.n	8015126 <__ieee754_sqrt+0x15e>
 8015166:	1c63      	adds	r3, r4, #1
 8015168:	f023 0401 	bic.w	r4, r3, #1
 801516c:	e7db      	b.n	8015126 <__ieee754_sqrt+0x15e>
 801516e:	bf00      	nop
 8015170:	7ff00000 	.word	0x7ff00000
 8015174:	200001f0 	.word	0x200001f0
 8015178:	200001e8 	.word	0x200001e8
 801517c:	00000000 	.word	0x00000000

08015180 <__kernel_cos>:
 8015180:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015184:	ec57 6b10 	vmov	r6, r7, d0
 8015188:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801518c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8015190:	ed8d 1b00 	vstr	d1, [sp]
 8015194:	d206      	bcs.n	80151a4 <__kernel_cos+0x24>
 8015196:	4630      	mov	r0, r6
 8015198:	4639      	mov	r1, r7
 801519a:	f7eb fcfd 	bl	8000b98 <__aeabi_d2iz>
 801519e:	2800      	cmp	r0, #0
 80151a0:	f000 8088 	beq.w	80152b4 <__kernel_cos+0x134>
 80151a4:	4632      	mov	r2, r6
 80151a6:	463b      	mov	r3, r7
 80151a8:	4630      	mov	r0, r6
 80151aa:	4639      	mov	r1, r7
 80151ac:	f7eb fa44 	bl	8000638 <__aeabi_dmul>
 80151b0:	4b51      	ldr	r3, [pc, #324]	@ (80152f8 <__kernel_cos+0x178>)
 80151b2:	2200      	movs	r2, #0
 80151b4:	4604      	mov	r4, r0
 80151b6:	460d      	mov	r5, r1
 80151b8:	f7eb fa3e 	bl	8000638 <__aeabi_dmul>
 80151bc:	a340      	add	r3, pc, #256	@ (adr r3, 80152c0 <__kernel_cos+0x140>)
 80151be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151c2:	4682      	mov	sl, r0
 80151c4:	468b      	mov	fp, r1
 80151c6:	4620      	mov	r0, r4
 80151c8:	4629      	mov	r1, r5
 80151ca:	f7eb fa35 	bl	8000638 <__aeabi_dmul>
 80151ce:	a33e      	add	r3, pc, #248	@ (adr r3, 80152c8 <__kernel_cos+0x148>)
 80151d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151d4:	f7eb f87a 	bl	80002cc <__adddf3>
 80151d8:	4622      	mov	r2, r4
 80151da:	462b      	mov	r3, r5
 80151dc:	f7eb fa2c 	bl	8000638 <__aeabi_dmul>
 80151e0:	a33b      	add	r3, pc, #236	@ (adr r3, 80152d0 <__kernel_cos+0x150>)
 80151e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151e6:	f7eb f86f 	bl	80002c8 <__aeabi_dsub>
 80151ea:	4622      	mov	r2, r4
 80151ec:	462b      	mov	r3, r5
 80151ee:	f7eb fa23 	bl	8000638 <__aeabi_dmul>
 80151f2:	a339      	add	r3, pc, #228	@ (adr r3, 80152d8 <__kernel_cos+0x158>)
 80151f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151f8:	f7eb f868 	bl	80002cc <__adddf3>
 80151fc:	4622      	mov	r2, r4
 80151fe:	462b      	mov	r3, r5
 8015200:	f7eb fa1a 	bl	8000638 <__aeabi_dmul>
 8015204:	a336      	add	r3, pc, #216	@ (adr r3, 80152e0 <__kernel_cos+0x160>)
 8015206:	e9d3 2300 	ldrd	r2, r3, [r3]
 801520a:	f7eb f85d 	bl	80002c8 <__aeabi_dsub>
 801520e:	4622      	mov	r2, r4
 8015210:	462b      	mov	r3, r5
 8015212:	f7eb fa11 	bl	8000638 <__aeabi_dmul>
 8015216:	a334      	add	r3, pc, #208	@ (adr r3, 80152e8 <__kernel_cos+0x168>)
 8015218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801521c:	f7eb f856 	bl	80002cc <__adddf3>
 8015220:	4622      	mov	r2, r4
 8015222:	462b      	mov	r3, r5
 8015224:	f7eb fa08 	bl	8000638 <__aeabi_dmul>
 8015228:	4622      	mov	r2, r4
 801522a:	462b      	mov	r3, r5
 801522c:	f7eb fa04 	bl	8000638 <__aeabi_dmul>
 8015230:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015234:	4604      	mov	r4, r0
 8015236:	460d      	mov	r5, r1
 8015238:	4630      	mov	r0, r6
 801523a:	4639      	mov	r1, r7
 801523c:	f7eb f9fc 	bl	8000638 <__aeabi_dmul>
 8015240:	460b      	mov	r3, r1
 8015242:	4602      	mov	r2, r0
 8015244:	4629      	mov	r1, r5
 8015246:	4620      	mov	r0, r4
 8015248:	f7eb f83e 	bl	80002c8 <__aeabi_dsub>
 801524c:	4b2b      	ldr	r3, [pc, #172]	@ (80152fc <__kernel_cos+0x17c>)
 801524e:	4598      	cmp	r8, r3
 8015250:	4606      	mov	r6, r0
 8015252:	460f      	mov	r7, r1
 8015254:	d810      	bhi.n	8015278 <__kernel_cos+0xf8>
 8015256:	4602      	mov	r2, r0
 8015258:	460b      	mov	r3, r1
 801525a:	4650      	mov	r0, sl
 801525c:	4659      	mov	r1, fp
 801525e:	f7eb f833 	bl	80002c8 <__aeabi_dsub>
 8015262:	460b      	mov	r3, r1
 8015264:	4926      	ldr	r1, [pc, #152]	@ (8015300 <__kernel_cos+0x180>)
 8015266:	4602      	mov	r2, r0
 8015268:	2000      	movs	r0, #0
 801526a:	f7eb f82d 	bl	80002c8 <__aeabi_dsub>
 801526e:	ec41 0b10 	vmov	d0, r0, r1
 8015272:	b003      	add	sp, #12
 8015274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015278:	4b22      	ldr	r3, [pc, #136]	@ (8015304 <__kernel_cos+0x184>)
 801527a:	4921      	ldr	r1, [pc, #132]	@ (8015300 <__kernel_cos+0x180>)
 801527c:	4598      	cmp	r8, r3
 801527e:	bf8c      	ite	hi
 8015280:	4d21      	ldrhi	r5, [pc, #132]	@ (8015308 <__kernel_cos+0x188>)
 8015282:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8015286:	2400      	movs	r4, #0
 8015288:	4622      	mov	r2, r4
 801528a:	462b      	mov	r3, r5
 801528c:	2000      	movs	r0, #0
 801528e:	f7eb f81b 	bl	80002c8 <__aeabi_dsub>
 8015292:	4622      	mov	r2, r4
 8015294:	4680      	mov	r8, r0
 8015296:	4689      	mov	r9, r1
 8015298:	462b      	mov	r3, r5
 801529a:	4650      	mov	r0, sl
 801529c:	4659      	mov	r1, fp
 801529e:	f7eb f813 	bl	80002c8 <__aeabi_dsub>
 80152a2:	4632      	mov	r2, r6
 80152a4:	463b      	mov	r3, r7
 80152a6:	f7eb f80f 	bl	80002c8 <__aeabi_dsub>
 80152aa:	4602      	mov	r2, r0
 80152ac:	460b      	mov	r3, r1
 80152ae:	4640      	mov	r0, r8
 80152b0:	4649      	mov	r1, r9
 80152b2:	e7da      	b.n	801526a <__kernel_cos+0xea>
 80152b4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80152f0 <__kernel_cos+0x170>
 80152b8:	e7db      	b.n	8015272 <__kernel_cos+0xf2>
 80152ba:	bf00      	nop
 80152bc:	f3af 8000 	nop.w
 80152c0:	be8838d4 	.word	0xbe8838d4
 80152c4:	bda8fae9 	.word	0xbda8fae9
 80152c8:	bdb4b1c4 	.word	0xbdb4b1c4
 80152cc:	3e21ee9e 	.word	0x3e21ee9e
 80152d0:	809c52ad 	.word	0x809c52ad
 80152d4:	3e927e4f 	.word	0x3e927e4f
 80152d8:	19cb1590 	.word	0x19cb1590
 80152dc:	3efa01a0 	.word	0x3efa01a0
 80152e0:	16c15177 	.word	0x16c15177
 80152e4:	3f56c16c 	.word	0x3f56c16c
 80152e8:	5555554c 	.word	0x5555554c
 80152ec:	3fa55555 	.word	0x3fa55555
 80152f0:	00000000 	.word	0x00000000
 80152f4:	3ff00000 	.word	0x3ff00000
 80152f8:	3fe00000 	.word	0x3fe00000
 80152fc:	3fd33332 	.word	0x3fd33332
 8015300:	3ff00000 	.word	0x3ff00000
 8015304:	3fe90000 	.word	0x3fe90000
 8015308:	3fd20000 	.word	0x3fd20000
 801530c:	00000000 	.word	0x00000000

08015310 <__kernel_sin>:
 8015310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015314:	ec55 4b10 	vmov	r4, r5, d0
 8015318:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801531c:	b085      	sub	sp, #20
 801531e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8015322:	ed8d 1b02 	vstr	d1, [sp, #8]
 8015326:	4680      	mov	r8, r0
 8015328:	d205      	bcs.n	8015336 <__kernel_sin+0x26>
 801532a:	4620      	mov	r0, r4
 801532c:	4629      	mov	r1, r5
 801532e:	f7eb fc33 	bl	8000b98 <__aeabi_d2iz>
 8015332:	2800      	cmp	r0, #0
 8015334:	d052      	beq.n	80153dc <__kernel_sin+0xcc>
 8015336:	4622      	mov	r2, r4
 8015338:	462b      	mov	r3, r5
 801533a:	4620      	mov	r0, r4
 801533c:	4629      	mov	r1, r5
 801533e:	f7eb f97b 	bl	8000638 <__aeabi_dmul>
 8015342:	4682      	mov	sl, r0
 8015344:	468b      	mov	fp, r1
 8015346:	4602      	mov	r2, r0
 8015348:	460b      	mov	r3, r1
 801534a:	4620      	mov	r0, r4
 801534c:	4629      	mov	r1, r5
 801534e:	f7eb f973 	bl	8000638 <__aeabi_dmul>
 8015352:	a342      	add	r3, pc, #264	@ (adr r3, 801545c <__kernel_sin+0x14c>)
 8015354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015358:	e9cd 0100 	strd	r0, r1, [sp]
 801535c:	4650      	mov	r0, sl
 801535e:	4659      	mov	r1, fp
 8015360:	f7eb f96a 	bl	8000638 <__aeabi_dmul>
 8015364:	a33f      	add	r3, pc, #252	@ (adr r3, 8015464 <__kernel_sin+0x154>)
 8015366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801536a:	f7ea ffad 	bl	80002c8 <__aeabi_dsub>
 801536e:	4652      	mov	r2, sl
 8015370:	465b      	mov	r3, fp
 8015372:	f7eb f961 	bl	8000638 <__aeabi_dmul>
 8015376:	a33d      	add	r3, pc, #244	@ (adr r3, 801546c <__kernel_sin+0x15c>)
 8015378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801537c:	f7ea ffa6 	bl	80002cc <__adddf3>
 8015380:	4652      	mov	r2, sl
 8015382:	465b      	mov	r3, fp
 8015384:	f7eb f958 	bl	8000638 <__aeabi_dmul>
 8015388:	a33a      	add	r3, pc, #232	@ (adr r3, 8015474 <__kernel_sin+0x164>)
 801538a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801538e:	f7ea ff9b 	bl	80002c8 <__aeabi_dsub>
 8015392:	4652      	mov	r2, sl
 8015394:	465b      	mov	r3, fp
 8015396:	f7eb f94f 	bl	8000638 <__aeabi_dmul>
 801539a:	a338      	add	r3, pc, #224	@ (adr r3, 801547c <__kernel_sin+0x16c>)
 801539c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153a0:	f7ea ff94 	bl	80002cc <__adddf3>
 80153a4:	4606      	mov	r6, r0
 80153a6:	460f      	mov	r7, r1
 80153a8:	f1b8 0f00 	cmp.w	r8, #0
 80153ac:	d11b      	bne.n	80153e6 <__kernel_sin+0xd6>
 80153ae:	4602      	mov	r2, r0
 80153b0:	460b      	mov	r3, r1
 80153b2:	4650      	mov	r0, sl
 80153b4:	4659      	mov	r1, fp
 80153b6:	f7eb f93f 	bl	8000638 <__aeabi_dmul>
 80153ba:	a325      	add	r3, pc, #148	@ (adr r3, 8015450 <__kernel_sin+0x140>)
 80153bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153c0:	f7ea ff82 	bl	80002c8 <__aeabi_dsub>
 80153c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80153c8:	f7eb f936 	bl	8000638 <__aeabi_dmul>
 80153cc:	4602      	mov	r2, r0
 80153ce:	460b      	mov	r3, r1
 80153d0:	4620      	mov	r0, r4
 80153d2:	4629      	mov	r1, r5
 80153d4:	f7ea ff7a 	bl	80002cc <__adddf3>
 80153d8:	4604      	mov	r4, r0
 80153da:	460d      	mov	r5, r1
 80153dc:	ec45 4b10 	vmov	d0, r4, r5
 80153e0:	b005      	add	sp, #20
 80153e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80153ea:	4b1b      	ldr	r3, [pc, #108]	@ (8015458 <__kernel_sin+0x148>)
 80153ec:	2200      	movs	r2, #0
 80153ee:	f7eb f923 	bl	8000638 <__aeabi_dmul>
 80153f2:	4632      	mov	r2, r6
 80153f4:	4680      	mov	r8, r0
 80153f6:	4689      	mov	r9, r1
 80153f8:	463b      	mov	r3, r7
 80153fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80153fe:	f7eb f91b 	bl	8000638 <__aeabi_dmul>
 8015402:	4602      	mov	r2, r0
 8015404:	460b      	mov	r3, r1
 8015406:	4640      	mov	r0, r8
 8015408:	4649      	mov	r1, r9
 801540a:	f7ea ff5d 	bl	80002c8 <__aeabi_dsub>
 801540e:	4652      	mov	r2, sl
 8015410:	465b      	mov	r3, fp
 8015412:	f7eb f911 	bl	8000638 <__aeabi_dmul>
 8015416:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801541a:	f7ea ff55 	bl	80002c8 <__aeabi_dsub>
 801541e:	a30c      	add	r3, pc, #48	@ (adr r3, 8015450 <__kernel_sin+0x140>)
 8015420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015424:	4606      	mov	r6, r0
 8015426:	460f      	mov	r7, r1
 8015428:	e9dd 0100 	ldrd	r0, r1, [sp]
 801542c:	f7eb f904 	bl	8000638 <__aeabi_dmul>
 8015430:	4602      	mov	r2, r0
 8015432:	460b      	mov	r3, r1
 8015434:	4630      	mov	r0, r6
 8015436:	4639      	mov	r1, r7
 8015438:	f7ea ff48 	bl	80002cc <__adddf3>
 801543c:	4602      	mov	r2, r0
 801543e:	460b      	mov	r3, r1
 8015440:	4620      	mov	r0, r4
 8015442:	4629      	mov	r1, r5
 8015444:	f7ea ff40 	bl	80002c8 <__aeabi_dsub>
 8015448:	e7c6      	b.n	80153d8 <__kernel_sin+0xc8>
 801544a:	bf00      	nop
 801544c:	f3af 8000 	nop.w
 8015450:	55555549 	.word	0x55555549
 8015454:	3fc55555 	.word	0x3fc55555
 8015458:	3fe00000 	.word	0x3fe00000
 801545c:	5acfd57c 	.word	0x5acfd57c
 8015460:	3de5d93a 	.word	0x3de5d93a
 8015464:	8a2b9ceb 	.word	0x8a2b9ceb
 8015468:	3e5ae5e6 	.word	0x3e5ae5e6
 801546c:	57b1fe7d 	.word	0x57b1fe7d
 8015470:	3ec71de3 	.word	0x3ec71de3
 8015474:	19c161d5 	.word	0x19c161d5
 8015478:	3f2a01a0 	.word	0x3f2a01a0
 801547c:	1110f8a6 	.word	0x1110f8a6
 8015480:	3f811111 	.word	0x3f811111
 8015484:	00000000 	.word	0x00000000

08015488 <__ieee754_rem_pio2>:
 8015488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801548c:	ec57 6b10 	vmov	r6, r7, d0
 8015490:	4bc5      	ldr	r3, [pc, #788]	@ (80157a8 <__ieee754_rem_pio2+0x320>)
 8015492:	b08d      	sub	sp, #52	@ 0x34
 8015494:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8015498:	4598      	cmp	r8, r3
 801549a:	4604      	mov	r4, r0
 801549c:	9704      	str	r7, [sp, #16]
 801549e:	d807      	bhi.n	80154b0 <__ieee754_rem_pio2+0x28>
 80154a0:	2200      	movs	r2, #0
 80154a2:	2300      	movs	r3, #0
 80154a4:	ed80 0b00 	vstr	d0, [r0]
 80154a8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80154ac:	2500      	movs	r5, #0
 80154ae:	e028      	b.n	8015502 <__ieee754_rem_pio2+0x7a>
 80154b0:	4bbe      	ldr	r3, [pc, #760]	@ (80157ac <__ieee754_rem_pio2+0x324>)
 80154b2:	4598      	cmp	r8, r3
 80154b4:	d878      	bhi.n	80155a8 <__ieee754_rem_pio2+0x120>
 80154b6:	9b04      	ldr	r3, [sp, #16]
 80154b8:	4dbd      	ldr	r5, [pc, #756]	@ (80157b0 <__ieee754_rem_pio2+0x328>)
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	4630      	mov	r0, r6
 80154be:	a3ac      	add	r3, pc, #688	@ (adr r3, 8015770 <__ieee754_rem_pio2+0x2e8>)
 80154c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154c4:	4639      	mov	r1, r7
 80154c6:	dd38      	ble.n	801553a <__ieee754_rem_pio2+0xb2>
 80154c8:	f7ea fefe 	bl	80002c8 <__aeabi_dsub>
 80154cc:	45a8      	cmp	r8, r5
 80154ce:	4606      	mov	r6, r0
 80154d0:	460f      	mov	r7, r1
 80154d2:	d01a      	beq.n	801550a <__ieee754_rem_pio2+0x82>
 80154d4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8015778 <__ieee754_rem_pio2+0x2f0>)
 80154d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154da:	f7ea fef5 	bl	80002c8 <__aeabi_dsub>
 80154de:	4602      	mov	r2, r0
 80154e0:	460b      	mov	r3, r1
 80154e2:	4680      	mov	r8, r0
 80154e4:	4689      	mov	r9, r1
 80154e6:	4630      	mov	r0, r6
 80154e8:	4639      	mov	r1, r7
 80154ea:	f7ea feed 	bl	80002c8 <__aeabi_dsub>
 80154ee:	a3a2      	add	r3, pc, #648	@ (adr r3, 8015778 <__ieee754_rem_pio2+0x2f0>)
 80154f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154f4:	f7ea fee8 	bl	80002c8 <__aeabi_dsub>
 80154f8:	e9c4 8900 	strd	r8, r9, [r4]
 80154fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8015500:	2501      	movs	r5, #1
 8015502:	4628      	mov	r0, r5
 8015504:	b00d      	add	sp, #52	@ 0x34
 8015506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801550a:	a39d      	add	r3, pc, #628	@ (adr r3, 8015780 <__ieee754_rem_pio2+0x2f8>)
 801550c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015510:	f7ea feda 	bl	80002c8 <__aeabi_dsub>
 8015514:	a39c      	add	r3, pc, #624	@ (adr r3, 8015788 <__ieee754_rem_pio2+0x300>)
 8015516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801551a:	4606      	mov	r6, r0
 801551c:	460f      	mov	r7, r1
 801551e:	f7ea fed3 	bl	80002c8 <__aeabi_dsub>
 8015522:	4602      	mov	r2, r0
 8015524:	460b      	mov	r3, r1
 8015526:	4680      	mov	r8, r0
 8015528:	4689      	mov	r9, r1
 801552a:	4630      	mov	r0, r6
 801552c:	4639      	mov	r1, r7
 801552e:	f7ea fecb 	bl	80002c8 <__aeabi_dsub>
 8015532:	a395      	add	r3, pc, #596	@ (adr r3, 8015788 <__ieee754_rem_pio2+0x300>)
 8015534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015538:	e7dc      	b.n	80154f4 <__ieee754_rem_pio2+0x6c>
 801553a:	f7ea fec7 	bl	80002cc <__adddf3>
 801553e:	45a8      	cmp	r8, r5
 8015540:	4606      	mov	r6, r0
 8015542:	460f      	mov	r7, r1
 8015544:	d018      	beq.n	8015578 <__ieee754_rem_pio2+0xf0>
 8015546:	a38c      	add	r3, pc, #560	@ (adr r3, 8015778 <__ieee754_rem_pio2+0x2f0>)
 8015548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801554c:	f7ea febe 	bl	80002cc <__adddf3>
 8015550:	4602      	mov	r2, r0
 8015552:	460b      	mov	r3, r1
 8015554:	4680      	mov	r8, r0
 8015556:	4689      	mov	r9, r1
 8015558:	4630      	mov	r0, r6
 801555a:	4639      	mov	r1, r7
 801555c:	f7ea feb4 	bl	80002c8 <__aeabi_dsub>
 8015560:	a385      	add	r3, pc, #532	@ (adr r3, 8015778 <__ieee754_rem_pio2+0x2f0>)
 8015562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015566:	f7ea feb1 	bl	80002cc <__adddf3>
 801556a:	f04f 35ff 	mov.w	r5, #4294967295
 801556e:	e9c4 8900 	strd	r8, r9, [r4]
 8015572:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8015576:	e7c4      	b.n	8015502 <__ieee754_rem_pio2+0x7a>
 8015578:	a381      	add	r3, pc, #516	@ (adr r3, 8015780 <__ieee754_rem_pio2+0x2f8>)
 801557a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801557e:	f7ea fea5 	bl	80002cc <__adddf3>
 8015582:	a381      	add	r3, pc, #516	@ (adr r3, 8015788 <__ieee754_rem_pio2+0x300>)
 8015584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015588:	4606      	mov	r6, r0
 801558a:	460f      	mov	r7, r1
 801558c:	f7ea fe9e 	bl	80002cc <__adddf3>
 8015590:	4602      	mov	r2, r0
 8015592:	460b      	mov	r3, r1
 8015594:	4680      	mov	r8, r0
 8015596:	4689      	mov	r9, r1
 8015598:	4630      	mov	r0, r6
 801559a:	4639      	mov	r1, r7
 801559c:	f7ea fe94 	bl	80002c8 <__aeabi_dsub>
 80155a0:	a379      	add	r3, pc, #484	@ (adr r3, 8015788 <__ieee754_rem_pio2+0x300>)
 80155a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155a6:	e7de      	b.n	8015566 <__ieee754_rem_pio2+0xde>
 80155a8:	4b82      	ldr	r3, [pc, #520]	@ (80157b4 <__ieee754_rem_pio2+0x32c>)
 80155aa:	4598      	cmp	r8, r3
 80155ac:	f200 80d1 	bhi.w	8015752 <__ieee754_rem_pio2+0x2ca>
 80155b0:	f7ff fcae 	bl	8014f10 <fabs>
 80155b4:	ec57 6b10 	vmov	r6, r7, d0
 80155b8:	a375      	add	r3, pc, #468	@ (adr r3, 8015790 <__ieee754_rem_pio2+0x308>)
 80155ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155be:	4630      	mov	r0, r6
 80155c0:	4639      	mov	r1, r7
 80155c2:	f7eb f839 	bl	8000638 <__aeabi_dmul>
 80155c6:	4b7c      	ldr	r3, [pc, #496]	@ (80157b8 <__ieee754_rem_pio2+0x330>)
 80155c8:	2200      	movs	r2, #0
 80155ca:	f7ea fe7f 	bl	80002cc <__adddf3>
 80155ce:	f7eb fae3 	bl	8000b98 <__aeabi_d2iz>
 80155d2:	4605      	mov	r5, r0
 80155d4:	f7ea ffc6 	bl	8000564 <__aeabi_i2d>
 80155d8:	4602      	mov	r2, r0
 80155da:	460b      	mov	r3, r1
 80155dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80155e0:	a363      	add	r3, pc, #396	@ (adr r3, 8015770 <__ieee754_rem_pio2+0x2e8>)
 80155e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155e6:	f7eb f827 	bl	8000638 <__aeabi_dmul>
 80155ea:	4602      	mov	r2, r0
 80155ec:	460b      	mov	r3, r1
 80155ee:	4630      	mov	r0, r6
 80155f0:	4639      	mov	r1, r7
 80155f2:	f7ea fe69 	bl	80002c8 <__aeabi_dsub>
 80155f6:	a360      	add	r3, pc, #384	@ (adr r3, 8015778 <__ieee754_rem_pio2+0x2f0>)
 80155f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155fc:	4682      	mov	sl, r0
 80155fe:	468b      	mov	fp, r1
 8015600:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015604:	f7eb f818 	bl	8000638 <__aeabi_dmul>
 8015608:	2d1f      	cmp	r5, #31
 801560a:	4606      	mov	r6, r0
 801560c:	460f      	mov	r7, r1
 801560e:	dc0c      	bgt.n	801562a <__ieee754_rem_pio2+0x1a2>
 8015610:	4b6a      	ldr	r3, [pc, #424]	@ (80157bc <__ieee754_rem_pio2+0x334>)
 8015612:	1e6a      	subs	r2, r5, #1
 8015614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015618:	4543      	cmp	r3, r8
 801561a:	d006      	beq.n	801562a <__ieee754_rem_pio2+0x1a2>
 801561c:	4632      	mov	r2, r6
 801561e:	463b      	mov	r3, r7
 8015620:	4650      	mov	r0, sl
 8015622:	4659      	mov	r1, fp
 8015624:	f7ea fe50 	bl	80002c8 <__aeabi_dsub>
 8015628:	e00e      	b.n	8015648 <__ieee754_rem_pio2+0x1c0>
 801562a:	463b      	mov	r3, r7
 801562c:	4632      	mov	r2, r6
 801562e:	4650      	mov	r0, sl
 8015630:	4659      	mov	r1, fp
 8015632:	f7ea fe49 	bl	80002c8 <__aeabi_dsub>
 8015636:	ea4f 5328 	mov.w	r3, r8, asr #20
 801563a:	9305      	str	r3, [sp, #20]
 801563c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8015640:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8015644:	2b10      	cmp	r3, #16
 8015646:	dc02      	bgt.n	801564e <__ieee754_rem_pio2+0x1c6>
 8015648:	e9c4 0100 	strd	r0, r1, [r4]
 801564c:	e039      	b.n	80156c2 <__ieee754_rem_pio2+0x23a>
 801564e:	a34c      	add	r3, pc, #304	@ (adr r3, 8015780 <__ieee754_rem_pio2+0x2f8>)
 8015650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015658:	f7ea ffee 	bl	8000638 <__aeabi_dmul>
 801565c:	4606      	mov	r6, r0
 801565e:	460f      	mov	r7, r1
 8015660:	4602      	mov	r2, r0
 8015662:	460b      	mov	r3, r1
 8015664:	4650      	mov	r0, sl
 8015666:	4659      	mov	r1, fp
 8015668:	f7ea fe2e 	bl	80002c8 <__aeabi_dsub>
 801566c:	4602      	mov	r2, r0
 801566e:	460b      	mov	r3, r1
 8015670:	4680      	mov	r8, r0
 8015672:	4689      	mov	r9, r1
 8015674:	4650      	mov	r0, sl
 8015676:	4659      	mov	r1, fp
 8015678:	f7ea fe26 	bl	80002c8 <__aeabi_dsub>
 801567c:	4632      	mov	r2, r6
 801567e:	463b      	mov	r3, r7
 8015680:	f7ea fe22 	bl	80002c8 <__aeabi_dsub>
 8015684:	a340      	add	r3, pc, #256	@ (adr r3, 8015788 <__ieee754_rem_pio2+0x300>)
 8015686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801568a:	4606      	mov	r6, r0
 801568c:	460f      	mov	r7, r1
 801568e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015692:	f7ea ffd1 	bl	8000638 <__aeabi_dmul>
 8015696:	4632      	mov	r2, r6
 8015698:	463b      	mov	r3, r7
 801569a:	f7ea fe15 	bl	80002c8 <__aeabi_dsub>
 801569e:	4602      	mov	r2, r0
 80156a0:	460b      	mov	r3, r1
 80156a2:	4606      	mov	r6, r0
 80156a4:	460f      	mov	r7, r1
 80156a6:	4640      	mov	r0, r8
 80156a8:	4649      	mov	r1, r9
 80156aa:	f7ea fe0d 	bl	80002c8 <__aeabi_dsub>
 80156ae:	9a05      	ldr	r2, [sp, #20]
 80156b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80156b4:	1ad3      	subs	r3, r2, r3
 80156b6:	2b31      	cmp	r3, #49	@ 0x31
 80156b8:	dc20      	bgt.n	80156fc <__ieee754_rem_pio2+0x274>
 80156ba:	e9c4 0100 	strd	r0, r1, [r4]
 80156be:	46c2      	mov	sl, r8
 80156c0:	46cb      	mov	fp, r9
 80156c2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80156c6:	4650      	mov	r0, sl
 80156c8:	4642      	mov	r2, r8
 80156ca:	464b      	mov	r3, r9
 80156cc:	4659      	mov	r1, fp
 80156ce:	f7ea fdfb 	bl	80002c8 <__aeabi_dsub>
 80156d2:	463b      	mov	r3, r7
 80156d4:	4632      	mov	r2, r6
 80156d6:	f7ea fdf7 	bl	80002c8 <__aeabi_dsub>
 80156da:	9b04      	ldr	r3, [sp, #16]
 80156dc:	2b00      	cmp	r3, #0
 80156de:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80156e2:	f6bf af0e 	bge.w	8015502 <__ieee754_rem_pio2+0x7a>
 80156e6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80156ea:	6063      	str	r3, [r4, #4]
 80156ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80156f0:	f8c4 8000 	str.w	r8, [r4]
 80156f4:	60a0      	str	r0, [r4, #8]
 80156f6:	60e3      	str	r3, [r4, #12]
 80156f8:	426d      	negs	r5, r5
 80156fa:	e702      	b.n	8015502 <__ieee754_rem_pio2+0x7a>
 80156fc:	a326      	add	r3, pc, #152	@ (adr r3, 8015798 <__ieee754_rem_pio2+0x310>)
 80156fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015702:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015706:	f7ea ff97 	bl	8000638 <__aeabi_dmul>
 801570a:	4606      	mov	r6, r0
 801570c:	460f      	mov	r7, r1
 801570e:	4602      	mov	r2, r0
 8015710:	460b      	mov	r3, r1
 8015712:	4640      	mov	r0, r8
 8015714:	4649      	mov	r1, r9
 8015716:	f7ea fdd7 	bl	80002c8 <__aeabi_dsub>
 801571a:	4602      	mov	r2, r0
 801571c:	460b      	mov	r3, r1
 801571e:	4682      	mov	sl, r0
 8015720:	468b      	mov	fp, r1
 8015722:	4640      	mov	r0, r8
 8015724:	4649      	mov	r1, r9
 8015726:	f7ea fdcf 	bl	80002c8 <__aeabi_dsub>
 801572a:	4632      	mov	r2, r6
 801572c:	463b      	mov	r3, r7
 801572e:	f7ea fdcb 	bl	80002c8 <__aeabi_dsub>
 8015732:	a31b      	add	r3, pc, #108	@ (adr r3, 80157a0 <__ieee754_rem_pio2+0x318>)
 8015734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015738:	4606      	mov	r6, r0
 801573a:	460f      	mov	r7, r1
 801573c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015740:	f7ea ff7a 	bl	8000638 <__aeabi_dmul>
 8015744:	4632      	mov	r2, r6
 8015746:	463b      	mov	r3, r7
 8015748:	f7ea fdbe 	bl	80002c8 <__aeabi_dsub>
 801574c:	4606      	mov	r6, r0
 801574e:	460f      	mov	r7, r1
 8015750:	e764      	b.n	801561c <__ieee754_rem_pio2+0x194>
 8015752:	4b1b      	ldr	r3, [pc, #108]	@ (80157c0 <__ieee754_rem_pio2+0x338>)
 8015754:	4598      	cmp	r8, r3
 8015756:	d935      	bls.n	80157c4 <__ieee754_rem_pio2+0x33c>
 8015758:	4632      	mov	r2, r6
 801575a:	463b      	mov	r3, r7
 801575c:	4630      	mov	r0, r6
 801575e:	4639      	mov	r1, r7
 8015760:	f7ea fdb2 	bl	80002c8 <__aeabi_dsub>
 8015764:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8015768:	e9c4 0100 	strd	r0, r1, [r4]
 801576c:	e69e      	b.n	80154ac <__ieee754_rem_pio2+0x24>
 801576e:	bf00      	nop
 8015770:	54400000 	.word	0x54400000
 8015774:	3ff921fb 	.word	0x3ff921fb
 8015778:	1a626331 	.word	0x1a626331
 801577c:	3dd0b461 	.word	0x3dd0b461
 8015780:	1a600000 	.word	0x1a600000
 8015784:	3dd0b461 	.word	0x3dd0b461
 8015788:	2e037073 	.word	0x2e037073
 801578c:	3ba3198a 	.word	0x3ba3198a
 8015790:	6dc9c883 	.word	0x6dc9c883
 8015794:	3fe45f30 	.word	0x3fe45f30
 8015798:	2e000000 	.word	0x2e000000
 801579c:	3ba3198a 	.word	0x3ba3198a
 80157a0:	252049c1 	.word	0x252049c1
 80157a4:	397b839a 	.word	0x397b839a
 80157a8:	3fe921fb 	.word	0x3fe921fb
 80157ac:	4002d97b 	.word	0x4002d97b
 80157b0:	3ff921fb 	.word	0x3ff921fb
 80157b4:	413921fb 	.word	0x413921fb
 80157b8:	3fe00000 	.word	0x3fe00000
 80157bc:	08016b48 	.word	0x08016b48
 80157c0:	7fefffff 	.word	0x7fefffff
 80157c4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80157c8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80157cc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80157d0:	4630      	mov	r0, r6
 80157d2:	460f      	mov	r7, r1
 80157d4:	f7eb f9e0 	bl	8000b98 <__aeabi_d2iz>
 80157d8:	f7ea fec4 	bl	8000564 <__aeabi_i2d>
 80157dc:	4602      	mov	r2, r0
 80157de:	460b      	mov	r3, r1
 80157e0:	4630      	mov	r0, r6
 80157e2:	4639      	mov	r1, r7
 80157e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80157e8:	f7ea fd6e 	bl	80002c8 <__aeabi_dsub>
 80157ec:	4b22      	ldr	r3, [pc, #136]	@ (8015878 <__ieee754_rem_pio2+0x3f0>)
 80157ee:	2200      	movs	r2, #0
 80157f0:	f7ea ff22 	bl	8000638 <__aeabi_dmul>
 80157f4:	460f      	mov	r7, r1
 80157f6:	4606      	mov	r6, r0
 80157f8:	f7eb f9ce 	bl	8000b98 <__aeabi_d2iz>
 80157fc:	f7ea feb2 	bl	8000564 <__aeabi_i2d>
 8015800:	4602      	mov	r2, r0
 8015802:	460b      	mov	r3, r1
 8015804:	4630      	mov	r0, r6
 8015806:	4639      	mov	r1, r7
 8015808:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801580c:	f7ea fd5c 	bl	80002c8 <__aeabi_dsub>
 8015810:	4b19      	ldr	r3, [pc, #100]	@ (8015878 <__ieee754_rem_pio2+0x3f0>)
 8015812:	2200      	movs	r2, #0
 8015814:	f7ea ff10 	bl	8000638 <__aeabi_dmul>
 8015818:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801581c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8015820:	f04f 0803 	mov.w	r8, #3
 8015824:	2600      	movs	r6, #0
 8015826:	2700      	movs	r7, #0
 8015828:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801582c:	4632      	mov	r2, r6
 801582e:	463b      	mov	r3, r7
 8015830:	46c2      	mov	sl, r8
 8015832:	f108 38ff 	add.w	r8, r8, #4294967295
 8015836:	f7eb f967 	bl	8000b08 <__aeabi_dcmpeq>
 801583a:	2800      	cmp	r0, #0
 801583c:	d1f4      	bne.n	8015828 <__ieee754_rem_pio2+0x3a0>
 801583e:	4b0f      	ldr	r3, [pc, #60]	@ (801587c <__ieee754_rem_pio2+0x3f4>)
 8015840:	9301      	str	r3, [sp, #4]
 8015842:	2302      	movs	r3, #2
 8015844:	9300      	str	r3, [sp, #0]
 8015846:	462a      	mov	r2, r5
 8015848:	4653      	mov	r3, sl
 801584a:	4621      	mov	r1, r4
 801584c:	a806      	add	r0, sp, #24
 801584e:	f000 f817 	bl	8015880 <__kernel_rem_pio2>
 8015852:	9b04      	ldr	r3, [sp, #16]
 8015854:	2b00      	cmp	r3, #0
 8015856:	4605      	mov	r5, r0
 8015858:	f6bf ae53 	bge.w	8015502 <__ieee754_rem_pio2+0x7a>
 801585c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8015860:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015864:	e9c4 2300 	strd	r2, r3, [r4]
 8015868:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801586c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015870:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8015874:	e740      	b.n	80156f8 <__ieee754_rem_pio2+0x270>
 8015876:	bf00      	nop
 8015878:	41700000 	.word	0x41700000
 801587c:	08016bc8 	.word	0x08016bc8

08015880 <__kernel_rem_pio2>:
 8015880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015884:	ed2d 8b02 	vpush	{d8}
 8015888:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 801588c:	f112 0f14 	cmn.w	r2, #20
 8015890:	9306      	str	r3, [sp, #24]
 8015892:	9104      	str	r1, [sp, #16]
 8015894:	4bbe      	ldr	r3, [pc, #760]	@ (8015b90 <__kernel_rem_pio2+0x310>)
 8015896:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8015898:	9008      	str	r0, [sp, #32]
 801589a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801589e:	9300      	str	r3, [sp, #0]
 80158a0:	9b06      	ldr	r3, [sp, #24]
 80158a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80158a6:	bfa8      	it	ge
 80158a8:	1ed4      	subge	r4, r2, #3
 80158aa:	9305      	str	r3, [sp, #20]
 80158ac:	bfb2      	itee	lt
 80158ae:	2400      	movlt	r4, #0
 80158b0:	2318      	movge	r3, #24
 80158b2:	fb94 f4f3 	sdivge	r4, r4, r3
 80158b6:	f06f 0317 	mvn.w	r3, #23
 80158ba:	fb04 3303 	mla	r3, r4, r3, r3
 80158be:	eb03 0b02 	add.w	fp, r3, r2
 80158c2:	9b00      	ldr	r3, [sp, #0]
 80158c4:	9a05      	ldr	r2, [sp, #20]
 80158c6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8015b80 <__kernel_rem_pio2+0x300>
 80158ca:	eb03 0802 	add.w	r8, r3, r2
 80158ce:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80158d0:	1aa7      	subs	r7, r4, r2
 80158d2:	ae20      	add	r6, sp, #128	@ 0x80
 80158d4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80158d8:	2500      	movs	r5, #0
 80158da:	4545      	cmp	r5, r8
 80158dc:	dd13      	ble.n	8015906 <__kernel_rem_pio2+0x86>
 80158de:	9b06      	ldr	r3, [sp, #24]
 80158e0:	aa20      	add	r2, sp, #128	@ 0x80
 80158e2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80158e6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80158ea:	f04f 0800 	mov.w	r8, #0
 80158ee:	9b00      	ldr	r3, [sp, #0]
 80158f0:	4598      	cmp	r8, r3
 80158f2:	dc31      	bgt.n	8015958 <__kernel_rem_pio2+0xd8>
 80158f4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8015b80 <__kernel_rem_pio2+0x300>
 80158f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80158fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015900:	462f      	mov	r7, r5
 8015902:	2600      	movs	r6, #0
 8015904:	e01b      	b.n	801593e <__kernel_rem_pio2+0xbe>
 8015906:	42ef      	cmn	r7, r5
 8015908:	d407      	bmi.n	801591a <__kernel_rem_pio2+0x9a>
 801590a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801590e:	f7ea fe29 	bl	8000564 <__aeabi_i2d>
 8015912:	e8e6 0102 	strd	r0, r1, [r6], #8
 8015916:	3501      	adds	r5, #1
 8015918:	e7df      	b.n	80158da <__kernel_rem_pio2+0x5a>
 801591a:	ec51 0b18 	vmov	r0, r1, d8
 801591e:	e7f8      	b.n	8015912 <__kernel_rem_pio2+0x92>
 8015920:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015924:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8015928:	f7ea fe86 	bl	8000638 <__aeabi_dmul>
 801592c:	4602      	mov	r2, r0
 801592e:	460b      	mov	r3, r1
 8015930:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015934:	f7ea fcca 	bl	80002cc <__adddf3>
 8015938:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801593c:	3601      	adds	r6, #1
 801593e:	9b05      	ldr	r3, [sp, #20]
 8015940:	429e      	cmp	r6, r3
 8015942:	f1a7 0708 	sub.w	r7, r7, #8
 8015946:	ddeb      	ble.n	8015920 <__kernel_rem_pio2+0xa0>
 8015948:	ed9d 7b02 	vldr	d7, [sp, #8]
 801594c:	f108 0801 	add.w	r8, r8, #1
 8015950:	ecaa 7b02 	vstmia	sl!, {d7}
 8015954:	3508      	adds	r5, #8
 8015956:	e7ca      	b.n	80158ee <__kernel_rem_pio2+0x6e>
 8015958:	9b00      	ldr	r3, [sp, #0]
 801595a:	f8dd 8000 	ldr.w	r8, [sp]
 801595e:	aa0c      	add	r2, sp, #48	@ 0x30
 8015960:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015964:	930a      	str	r3, [sp, #40]	@ 0x28
 8015966:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8015968:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801596c:	9309      	str	r3, [sp, #36]	@ 0x24
 801596e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8015972:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015974:	ab98      	add	r3, sp, #608	@ 0x260
 8015976:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801597a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801597e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015982:	ac0c      	add	r4, sp, #48	@ 0x30
 8015984:	ab70      	add	r3, sp, #448	@ 0x1c0
 8015986:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801598a:	46a1      	mov	r9, r4
 801598c:	46c2      	mov	sl, r8
 801598e:	f1ba 0f00 	cmp.w	sl, #0
 8015992:	f1a5 0508 	sub.w	r5, r5, #8
 8015996:	dc77      	bgt.n	8015a88 <__kernel_rem_pio2+0x208>
 8015998:	4658      	mov	r0, fp
 801599a:	ed9d 0b02 	vldr	d0, [sp, #8]
 801599e:	f000 fac7 	bl	8015f30 <scalbn>
 80159a2:	ec57 6b10 	vmov	r6, r7, d0
 80159a6:	2200      	movs	r2, #0
 80159a8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80159ac:	4630      	mov	r0, r6
 80159ae:	4639      	mov	r1, r7
 80159b0:	f7ea fe42 	bl	8000638 <__aeabi_dmul>
 80159b4:	ec41 0b10 	vmov	d0, r0, r1
 80159b8:	f000 fb3a 	bl	8016030 <floor>
 80159bc:	4b75      	ldr	r3, [pc, #468]	@ (8015b94 <__kernel_rem_pio2+0x314>)
 80159be:	ec51 0b10 	vmov	r0, r1, d0
 80159c2:	2200      	movs	r2, #0
 80159c4:	f7ea fe38 	bl	8000638 <__aeabi_dmul>
 80159c8:	4602      	mov	r2, r0
 80159ca:	460b      	mov	r3, r1
 80159cc:	4630      	mov	r0, r6
 80159ce:	4639      	mov	r1, r7
 80159d0:	f7ea fc7a 	bl	80002c8 <__aeabi_dsub>
 80159d4:	460f      	mov	r7, r1
 80159d6:	4606      	mov	r6, r0
 80159d8:	f7eb f8de 	bl	8000b98 <__aeabi_d2iz>
 80159dc:	9002      	str	r0, [sp, #8]
 80159de:	f7ea fdc1 	bl	8000564 <__aeabi_i2d>
 80159e2:	4602      	mov	r2, r0
 80159e4:	460b      	mov	r3, r1
 80159e6:	4630      	mov	r0, r6
 80159e8:	4639      	mov	r1, r7
 80159ea:	f7ea fc6d 	bl	80002c8 <__aeabi_dsub>
 80159ee:	f1bb 0f00 	cmp.w	fp, #0
 80159f2:	4606      	mov	r6, r0
 80159f4:	460f      	mov	r7, r1
 80159f6:	dd6c      	ble.n	8015ad2 <__kernel_rem_pio2+0x252>
 80159f8:	f108 31ff 	add.w	r1, r8, #4294967295
 80159fc:	ab0c      	add	r3, sp, #48	@ 0x30
 80159fe:	9d02      	ldr	r5, [sp, #8]
 8015a00:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015a04:	f1cb 0018 	rsb	r0, fp, #24
 8015a08:	fa43 f200 	asr.w	r2, r3, r0
 8015a0c:	4415      	add	r5, r2
 8015a0e:	4082      	lsls	r2, r0
 8015a10:	1a9b      	subs	r3, r3, r2
 8015a12:	aa0c      	add	r2, sp, #48	@ 0x30
 8015a14:	9502      	str	r5, [sp, #8]
 8015a16:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8015a1a:	f1cb 0217 	rsb	r2, fp, #23
 8015a1e:	fa43 f902 	asr.w	r9, r3, r2
 8015a22:	f1b9 0f00 	cmp.w	r9, #0
 8015a26:	dd64      	ble.n	8015af2 <__kernel_rem_pio2+0x272>
 8015a28:	9b02      	ldr	r3, [sp, #8]
 8015a2a:	2200      	movs	r2, #0
 8015a2c:	3301      	adds	r3, #1
 8015a2e:	9302      	str	r3, [sp, #8]
 8015a30:	4615      	mov	r5, r2
 8015a32:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8015a36:	4590      	cmp	r8, r2
 8015a38:	f300 80b8 	bgt.w	8015bac <__kernel_rem_pio2+0x32c>
 8015a3c:	f1bb 0f00 	cmp.w	fp, #0
 8015a40:	dd07      	ble.n	8015a52 <__kernel_rem_pio2+0x1d2>
 8015a42:	f1bb 0f01 	cmp.w	fp, #1
 8015a46:	f000 80bf 	beq.w	8015bc8 <__kernel_rem_pio2+0x348>
 8015a4a:	f1bb 0f02 	cmp.w	fp, #2
 8015a4e:	f000 80c6 	beq.w	8015bde <__kernel_rem_pio2+0x35e>
 8015a52:	f1b9 0f02 	cmp.w	r9, #2
 8015a56:	d14c      	bne.n	8015af2 <__kernel_rem_pio2+0x272>
 8015a58:	4632      	mov	r2, r6
 8015a5a:	463b      	mov	r3, r7
 8015a5c:	494e      	ldr	r1, [pc, #312]	@ (8015b98 <__kernel_rem_pio2+0x318>)
 8015a5e:	2000      	movs	r0, #0
 8015a60:	f7ea fc32 	bl	80002c8 <__aeabi_dsub>
 8015a64:	4606      	mov	r6, r0
 8015a66:	460f      	mov	r7, r1
 8015a68:	2d00      	cmp	r5, #0
 8015a6a:	d042      	beq.n	8015af2 <__kernel_rem_pio2+0x272>
 8015a6c:	4658      	mov	r0, fp
 8015a6e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8015b88 <__kernel_rem_pio2+0x308>
 8015a72:	f000 fa5d 	bl	8015f30 <scalbn>
 8015a76:	4630      	mov	r0, r6
 8015a78:	4639      	mov	r1, r7
 8015a7a:	ec53 2b10 	vmov	r2, r3, d0
 8015a7e:	f7ea fc23 	bl	80002c8 <__aeabi_dsub>
 8015a82:	4606      	mov	r6, r0
 8015a84:	460f      	mov	r7, r1
 8015a86:	e034      	b.n	8015af2 <__kernel_rem_pio2+0x272>
 8015a88:	4b44      	ldr	r3, [pc, #272]	@ (8015b9c <__kernel_rem_pio2+0x31c>)
 8015a8a:	2200      	movs	r2, #0
 8015a8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015a90:	f7ea fdd2 	bl	8000638 <__aeabi_dmul>
 8015a94:	f7eb f880 	bl	8000b98 <__aeabi_d2iz>
 8015a98:	f7ea fd64 	bl	8000564 <__aeabi_i2d>
 8015a9c:	4b40      	ldr	r3, [pc, #256]	@ (8015ba0 <__kernel_rem_pio2+0x320>)
 8015a9e:	2200      	movs	r2, #0
 8015aa0:	4606      	mov	r6, r0
 8015aa2:	460f      	mov	r7, r1
 8015aa4:	f7ea fdc8 	bl	8000638 <__aeabi_dmul>
 8015aa8:	4602      	mov	r2, r0
 8015aaa:	460b      	mov	r3, r1
 8015aac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015ab0:	f7ea fc0a 	bl	80002c8 <__aeabi_dsub>
 8015ab4:	f7eb f870 	bl	8000b98 <__aeabi_d2iz>
 8015ab8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015abc:	f849 0b04 	str.w	r0, [r9], #4
 8015ac0:	4639      	mov	r1, r7
 8015ac2:	4630      	mov	r0, r6
 8015ac4:	f7ea fc02 	bl	80002cc <__adddf3>
 8015ac8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015acc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015ad0:	e75d      	b.n	801598e <__kernel_rem_pio2+0x10e>
 8015ad2:	d107      	bne.n	8015ae4 <__kernel_rem_pio2+0x264>
 8015ad4:	f108 33ff 	add.w	r3, r8, #4294967295
 8015ad8:	aa0c      	add	r2, sp, #48	@ 0x30
 8015ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015ade:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8015ae2:	e79e      	b.n	8015a22 <__kernel_rem_pio2+0x1a2>
 8015ae4:	4b2f      	ldr	r3, [pc, #188]	@ (8015ba4 <__kernel_rem_pio2+0x324>)
 8015ae6:	2200      	movs	r2, #0
 8015ae8:	f7eb f82c 	bl	8000b44 <__aeabi_dcmpge>
 8015aec:	2800      	cmp	r0, #0
 8015aee:	d143      	bne.n	8015b78 <__kernel_rem_pio2+0x2f8>
 8015af0:	4681      	mov	r9, r0
 8015af2:	2200      	movs	r2, #0
 8015af4:	2300      	movs	r3, #0
 8015af6:	4630      	mov	r0, r6
 8015af8:	4639      	mov	r1, r7
 8015afa:	f7eb f805 	bl	8000b08 <__aeabi_dcmpeq>
 8015afe:	2800      	cmp	r0, #0
 8015b00:	f000 80bf 	beq.w	8015c82 <__kernel_rem_pio2+0x402>
 8015b04:	f108 33ff 	add.w	r3, r8, #4294967295
 8015b08:	2200      	movs	r2, #0
 8015b0a:	9900      	ldr	r1, [sp, #0]
 8015b0c:	428b      	cmp	r3, r1
 8015b0e:	da6e      	bge.n	8015bee <__kernel_rem_pio2+0x36e>
 8015b10:	2a00      	cmp	r2, #0
 8015b12:	f000 8089 	beq.w	8015c28 <__kernel_rem_pio2+0x3a8>
 8015b16:	f108 38ff 	add.w	r8, r8, #4294967295
 8015b1a:	ab0c      	add	r3, sp, #48	@ 0x30
 8015b1c:	f1ab 0b18 	sub.w	fp, fp, #24
 8015b20:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d0f6      	beq.n	8015b16 <__kernel_rem_pio2+0x296>
 8015b28:	4658      	mov	r0, fp
 8015b2a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8015b88 <__kernel_rem_pio2+0x308>
 8015b2e:	f000 f9ff 	bl	8015f30 <scalbn>
 8015b32:	f108 0301 	add.w	r3, r8, #1
 8015b36:	00da      	lsls	r2, r3, #3
 8015b38:	9205      	str	r2, [sp, #20]
 8015b3a:	ec55 4b10 	vmov	r4, r5, d0
 8015b3e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8015b40:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8015b9c <__kernel_rem_pio2+0x31c>
 8015b44:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8015b48:	4646      	mov	r6, r8
 8015b4a:	f04f 0a00 	mov.w	sl, #0
 8015b4e:	2e00      	cmp	r6, #0
 8015b50:	f280 80cf 	bge.w	8015cf2 <__kernel_rem_pio2+0x472>
 8015b54:	4644      	mov	r4, r8
 8015b56:	2c00      	cmp	r4, #0
 8015b58:	f2c0 80fd 	blt.w	8015d56 <__kernel_rem_pio2+0x4d6>
 8015b5c:	4b12      	ldr	r3, [pc, #72]	@ (8015ba8 <__kernel_rem_pio2+0x328>)
 8015b5e:	461f      	mov	r7, r3
 8015b60:	ab70      	add	r3, sp, #448	@ 0x1c0
 8015b62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015b66:	9306      	str	r3, [sp, #24]
 8015b68:	f04f 0a00 	mov.w	sl, #0
 8015b6c:	f04f 0b00 	mov.w	fp, #0
 8015b70:	2600      	movs	r6, #0
 8015b72:	eba8 0504 	sub.w	r5, r8, r4
 8015b76:	e0e2      	b.n	8015d3e <__kernel_rem_pio2+0x4be>
 8015b78:	f04f 0902 	mov.w	r9, #2
 8015b7c:	e754      	b.n	8015a28 <__kernel_rem_pio2+0x1a8>
 8015b7e:	bf00      	nop
	...
 8015b8c:	3ff00000 	.word	0x3ff00000
 8015b90:	08016d10 	.word	0x08016d10
 8015b94:	40200000 	.word	0x40200000
 8015b98:	3ff00000 	.word	0x3ff00000
 8015b9c:	3e700000 	.word	0x3e700000
 8015ba0:	41700000 	.word	0x41700000
 8015ba4:	3fe00000 	.word	0x3fe00000
 8015ba8:	08016cd0 	.word	0x08016cd0
 8015bac:	f854 3b04 	ldr.w	r3, [r4], #4
 8015bb0:	b945      	cbnz	r5, 8015bc4 <__kernel_rem_pio2+0x344>
 8015bb2:	b123      	cbz	r3, 8015bbe <__kernel_rem_pio2+0x33e>
 8015bb4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8015bb8:	f844 3c04 	str.w	r3, [r4, #-4]
 8015bbc:	2301      	movs	r3, #1
 8015bbe:	3201      	adds	r2, #1
 8015bc0:	461d      	mov	r5, r3
 8015bc2:	e738      	b.n	8015a36 <__kernel_rem_pio2+0x1b6>
 8015bc4:	1acb      	subs	r3, r1, r3
 8015bc6:	e7f7      	b.n	8015bb8 <__kernel_rem_pio2+0x338>
 8015bc8:	f108 32ff 	add.w	r2, r8, #4294967295
 8015bcc:	ab0c      	add	r3, sp, #48	@ 0x30
 8015bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015bd2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8015bd6:	a90c      	add	r1, sp, #48	@ 0x30
 8015bd8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8015bdc:	e739      	b.n	8015a52 <__kernel_rem_pio2+0x1d2>
 8015bde:	f108 32ff 	add.w	r2, r8, #4294967295
 8015be2:	ab0c      	add	r3, sp, #48	@ 0x30
 8015be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015be8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8015bec:	e7f3      	b.n	8015bd6 <__kernel_rem_pio2+0x356>
 8015bee:	a90c      	add	r1, sp, #48	@ 0x30
 8015bf0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8015bf4:	3b01      	subs	r3, #1
 8015bf6:	430a      	orrs	r2, r1
 8015bf8:	e787      	b.n	8015b0a <__kernel_rem_pio2+0x28a>
 8015bfa:	3401      	adds	r4, #1
 8015bfc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8015c00:	2a00      	cmp	r2, #0
 8015c02:	d0fa      	beq.n	8015bfa <__kernel_rem_pio2+0x37a>
 8015c04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015c06:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8015c0a:	eb0d 0503 	add.w	r5, sp, r3
 8015c0e:	9b06      	ldr	r3, [sp, #24]
 8015c10:	aa20      	add	r2, sp, #128	@ 0x80
 8015c12:	4443      	add	r3, r8
 8015c14:	f108 0701 	add.w	r7, r8, #1
 8015c18:	3d98      	subs	r5, #152	@ 0x98
 8015c1a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8015c1e:	4444      	add	r4, r8
 8015c20:	42bc      	cmp	r4, r7
 8015c22:	da04      	bge.n	8015c2e <__kernel_rem_pio2+0x3ae>
 8015c24:	46a0      	mov	r8, r4
 8015c26:	e6a2      	b.n	801596e <__kernel_rem_pio2+0xee>
 8015c28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015c2a:	2401      	movs	r4, #1
 8015c2c:	e7e6      	b.n	8015bfc <__kernel_rem_pio2+0x37c>
 8015c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015c30:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8015c34:	f7ea fc96 	bl	8000564 <__aeabi_i2d>
 8015c38:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8015f00 <__kernel_rem_pio2+0x680>
 8015c3c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8015c40:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015c44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015c48:	46b2      	mov	sl, r6
 8015c4a:	f04f 0800 	mov.w	r8, #0
 8015c4e:	9b05      	ldr	r3, [sp, #20]
 8015c50:	4598      	cmp	r8, r3
 8015c52:	dd05      	ble.n	8015c60 <__kernel_rem_pio2+0x3e0>
 8015c54:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015c58:	3701      	adds	r7, #1
 8015c5a:	eca5 7b02 	vstmia	r5!, {d7}
 8015c5e:	e7df      	b.n	8015c20 <__kernel_rem_pio2+0x3a0>
 8015c60:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8015c64:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8015c68:	f7ea fce6 	bl	8000638 <__aeabi_dmul>
 8015c6c:	4602      	mov	r2, r0
 8015c6e:	460b      	mov	r3, r1
 8015c70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015c74:	f7ea fb2a 	bl	80002cc <__adddf3>
 8015c78:	f108 0801 	add.w	r8, r8, #1
 8015c7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015c80:	e7e5      	b.n	8015c4e <__kernel_rem_pio2+0x3ce>
 8015c82:	f1cb 0000 	rsb	r0, fp, #0
 8015c86:	ec47 6b10 	vmov	d0, r6, r7
 8015c8a:	f000 f951 	bl	8015f30 <scalbn>
 8015c8e:	ec55 4b10 	vmov	r4, r5, d0
 8015c92:	4b9d      	ldr	r3, [pc, #628]	@ (8015f08 <__kernel_rem_pio2+0x688>)
 8015c94:	2200      	movs	r2, #0
 8015c96:	4620      	mov	r0, r4
 8015c98:	4629      	mov	r1, r5
 8015c9a:	f7ea ff53 	bl	8000b44 <__aeabi_dcmpge>
 8015c9e:	b300      	cbz	r0, 8015ce2 <__kernel_rem_pio2+0x462>
 8015ca0:	4b9a      	ldr	r3, [pc, #616]	@ (8015f0c <__kernel_rem_pio2+0x68c>)
 8015ca2:	2200      	movs	r2, #0
 8015ca4:	4620      	mov	r0, r4
 8015ca6:	4629      	mov	r1, r5
 8015ca8:	f7ea fcc6 	bl	8000638 <__aeabi_dmul>
 8015cac:	f7ea ff74 	bl	8000b98 <__aeabi_d2iz>
 8015cb0:	4606      	mov	r6, r0
 8015cb2:	f7ea fc57 	bl	8000564 <__aeabi_i2d>
 8015cb6:	4b94      	ldr	r3, [pc, #592]	@ (8015f08 <__kernel_rem_pio2+0x688>)
 8015cb8:	2200      	movs	r2, #0
 8015cba:	f7ea fcbd 	bl	8000638 <__aeabi_dmul>
 8015cbe:	460b      	mov	r3, r1
 8015cc0:	4602      	mov	r2, r0
 8015cc2:	4629      	mov	r1, r5
 8015cc4:	4620      	mov	r0, r4
 8015cc6:	f7ea faff 	bl	80002c8 <__aeabi_dsub>
 8015cca:	f7ea ff65 	bl	8000b98 <__aeabi_d2iz>
 8015cce:	ab0c      	add	r3, sp, #48	@ 0x30
 8015cd0:	f10b 0b18 	add.w	fp, fp, #24
 8015cd4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8015cd8:	f108 0801 	add.w	r8, r8, #1
 8015cdc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8015ce0:	e722      	b.n	8015b28 <__kernel_rem_pio2+0x2a8>
 8015ce2:	4620      	mov	r0, r4
 8015ce4:	4629      	mov	r1, r5
 8015ce6:	f7ea ff57 	bl	8000b98 <__aeabi_d2iz>
 8015cea:	ab0c      	add	r3, sp, #48	@ 0x30
 8015cec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8015cf0:	e71a      	b.n	8015b28 <__kernel_rem_pio2+0x2a8>
 8015cf2:	ab0c      	add	r3, sp, #48	@ 0x30
 8015cf4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015cf8:	f7ea fc34 	bl	8000564 <__aeabi_i2d>
 8015cfc:	4622      	mov	r2, r4
 8015cfe:	462b      	mov	r3, r5
 8015d00:	f7ea fc9a 	bl	8000638 <__aeabi_dmul>
 8015d04:	4652      	mov	r2, sl
 8015d06:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8015d0a:	465b      	mov	r3, fp
 8015d0c:	4620      	mov	r0, r4
 8015d0e:	4629      	mov	r1, r5
 8015d10:	f7ea fc92 	bl	8000638 <__aeabi_dmul>
 8015d14:	3e01      	subs	r6, #1
 8015d16:	4604      	mov	r4, r0
 8015d18:	460d      	mov	r5, r1
 8015d1a:	e718      	b.n	8015b4e <__kernel_rem_pio2+0x2ce>
 8015d1c:	9906      	ldr	r1, [sp, #24]
 8015d1e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8015d22:	9106      	str	r1, [sp, #24]
 8015d24:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8015d28:	f7ea fc86 	bl	8000638 <__aeabi_dmul>
 8015d2c:	4602      	mov	r2, r0
 8015d2e:	460b      	mov	r3, r1
 8015d30:	4650      	mov	r0, sl
 8015d32:	4659      	mov	r1, fp
 8015d34:	f7ea faca 	bl	80002cc <__adddf3>
 8015d38:	3601      	adds	r6, #1
 8015d3a:	4682      	mov	sl, r0
 8015d3c:	468b      	mov	fp, r1
 8015d3e:	9b00      	ldr	r3, [sp, #0]
 8015d40:	429e      	cmp	r6, r3
 8015d42:	dc01      	bgt.n	8015d48 <__kernel_rem_pio2+0x4c8>
 8015d44:	42b5      	cmp	r5, r6
 8015d46:	dae9      	bge.n	8015d1c <__kernel_rem_pio2+0x49c>
 8015d48:	ab48      	add	r3, sp, #288	@ 0x120
 8015d4a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8015d4e:	e9c5 ab00 	strd	sl, fp, [r5]
 8015d52:	3c01      	subs	r4, #1
 8015d54:	e6ff      	b.n	8015b56 <__kernel_rem_pio2+0x2d6>
 8015d56:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8015d58:	2b02      	cmp	r3, #2
 8015d5a:	dc0b      	bgt.n	8015d74 <__kernel_rem_pio2+0x4f4>
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	dc39      	bgt.n	8015dd4 <__kernel_rem_pio2+0x554>
 8015d60:	d05d      	beq.n	8015e1e <__kernel_rem_pio2+0x59e>
 8015d62:	9b02      	ldr	r3, [sp, #8]
 8015d64:	f003 0007 	and.w	r0, r3, #7
 8015d68:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8015d6c:	ecbd 8b02 	vpop	{d8}
 8015d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d74:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8015d76:	2b03      	cmp	r3, #3
 8015d78:	d1f3      	bne.n	8015d62 <__kernel_rem_pio2+0x4e2>
 8015d7a:	9b05      	ldr	r3, [sp, #20]
 8015d7c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8015d80:	eb0d 0403 	add.w	r4, sp, r3
 8015d84:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8015d88:	4625      	mov	r5, r4
 8015d8a:	46c2      	mov	sl, r8
 8015d8c:	f1ba 0f00 	cmp.w	sl, #0
 8015d90:	f1a5 0508 	sub.w	r5, r5, #8
 8015d94:	dc6b      	bgt.n	8015e6e <__kernel_rem_pio2+0x5ee>
 8015d96:	4645      	mov	r5, r8
 8015d98:	2d01      	cmp	r5, #1
 8015d9a:	f1a4 0408 	sub.w	r4, r4, #8
 8015d9e:	f300 8087 	bgt.w	8015eb0 <__kernel_rem_pio2+0x630>
 8015da2:	9c05      	ldr	r4, [sp, #20]
 8015da4:	ab48      	add	r3, sp, #288	@ 0x120
 8015da6:	441c      	add	r4, r3
 8015da8:	2000      	movs	r0, #0
 8015daa:	2100      	movs	r1, #0
 8015dac:	f1b8 0f01 	cmp.w	r8, #1
 8015db0:	f300 809c 	bgt.w	8015eec <__kernel_rem_pio2+0x66c>
 8015db4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8015db8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8015dbc:	f1b9 0f00 	cmp.w	r9, #0
 8015dc0:	f040 80a6 	bne.w	8015f10 <__kernel_rem_pio2+0x690>
 8015dc4:	9b04      	ldr	r3, [sp, #16]
 8015dc6:	e9c3 7800 	strd	r7, r8, [r3]
 8015dca:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8015dce:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8015dd2:	e7c6      	b.n	8015d62 <__kernel_rem_pio2+0x4e2>
 8015dd4:	9d05      	ldr	r5, [sp, #20]
 8015dd6:	ab48      	add	r3, sp, #288	@ 0x120
 8015dd8:	441d      	add	r5, r3
 8015dda:	4644      	mov	r4, r8
 8015ddc:	2000      	movs	r0, #0
 8015dde:	2100      	movs	r1, #0
 8015de0:	2c00      	cmp	r4, #0
 8015de2:	da35      	bge.n	8015e50 <__kernel_rem_pio2+0x5d0>
 8015de4:	f1b9 0f00 	cmp.w	r9, #0
 8015de8:	d038      	beq.n	8015e5c <__kernel_rem_pio2+0x5dc>
 8015dea:	4602      	mov	r2, r0
 8015dec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015df0:	9c04      	ldr	r4, [sp, #16]
 8015df2:	e9c4 2300 	strd	r2, r3, [r4]
 8015df6:	4602      	mov	r2, r0
 8015df8:	460b      	mov	r3, r1
 8015dfa:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8015dfe:	f7ea fa63 	bl	80002c8 <__aeabi_dsub>
 8015e02:	ad4a      	add	r5, sp, #296	@ 0x128
 8015e04:	2401      	movs	r4, #1
 8015e06:	45a0      	cmp	r8, r4
 8015e08:	da2b      	bge.n	8015e62 <__kernel_rem_pio2+0x5e2>
 8015e0a:	f1b9 0f00 	cmp.w	r9, #0
 8015e0e:	d002      	beq.n	8015e16 <__kernel_rem_pio2+0x596>
 8015e10:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015e14:	4619      	mov	r1, r3
 8015e16:	9b04      	ldr	r3, [sp, #16]
 8015e18:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8015e1c:	e7a1      	b.n	8015d62 <__kernel_rem_pio2+0x4e2>
 8015e1e:	9c05      	ldr	r4, [sp, #20]
 8015e20:	ab48      	add	r3, sp, #288	@ 0x120
 8015e22:	441c      	add	r4, r3
 8015e24:	2000      	movs	r0, #0
 8015e26:	2100      	movs	r1, #0
 8015e28:	f1b8 0f00 	cmp.w	r8, #0
 8015e2c:	da09      	bge.n	8015e42 <__kernel_rem_pio2+0x5c2>
 8015e2e:	f1b9 0f00 	cmp.w	r9, #0
 8015e32:	d002      	beq.n	8015e3a <__kernel_rem_pio2+0x5ba>
 8015e34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015e38:	4619      	mov	r1, r3
 8015e3a:	9b04      	ldr	r3, [sp, #16]
 8015e3c:	e9c3 0100 	strd	r0, r1, [r3]
 8015e40:	e78f      	b.n	8015d62 <__kernel_rem_pio2+0x4e2>
 8015e42:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015e46:	f7ea fa41 	bl	80002cc <__adddf3>
 8015e4a:	f108 38ff 	add.w	r8, r8, #4294967295
 8015e4e:	e7eb      	b.n	8015e28 <__kernel_rem_pio2+0x5a8>
 8015e50:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8015e54:	f7ea fa3a 	bl	80002cc <__adddf3>
 8015e58:	3c01      	subs	r4, #1
 8015e5a:	e7c1      	b.n	8015de0 <__kernel_rem_pio2+0x560>
 8015e5c:	4602      	mov	r2, r0
 8015e5e:	460b      	mov	r3, r1
 8015e60:	e7c6      	b.n	8015df0 <__kernel_rem_pio2+0x570>
 8015e62:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8015e66:	f7ea fa31 	bl	80002cc <__adddf3>
 8015e6a:	3401      	adds	r4, #1
 8015e6c:	e7cb      	b.n	8015e06 <__kernel_rem_pio2+0x586>
 8015e6e:	ed95 7b00 	vldr	d7, [r5]
 8015e72:	ed8d 7b00 	vstr	d7, [sp]
 8015e76:	ed95 7b02 	vldr	d7, [r5, #8]
 8015e7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015e7e:	ec53 2b17 	vmov	r2, r3, d7
 8015e82:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015e86:	f7ea fa21 	bl	80002cc <__adddf3>
 8015e8a:	4602      	mov	r2, r0
 8015e8c:	460b      	mov	r3, r1
 8015e8e:	4606      	mov	r6, r0
 8015e90:	460f      	mov	r7, r1
 8015e92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015e96:	f7ea fa17 	bl	80002c8 <__aeabi_dsub>
 8015e9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015e9e:	f7ea fa15 	bl	80002cc <__adddf3>
 8015ea2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015ea6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8015eaa:	e9c5 6700 	strd	r6, r7, [r5]
 8015eae:	e76d      	b.n	8015d8c <__kernel_rem_pio2+0x50c>
 8015eb0:	ed94 7b00 	vldr	d7, [r4]
 8015eb4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8015eb8:	ec51 0b17 	vmov	r0, r1, d7
 8015ebc:	4652      	mov	r2, sl
 8015ebe:	465b      	mov	r3, fp
 8015ec0:	ed8d 7b00 	vstr	d7, [sp]
 8015ec4:	f7ea fa02 	bl	80002cc <__adddf3>
 8015ec8:	4602      	mov	r2, r0
 8015eca:	460b      	mov	r3, r1
 8015ecc:	4606      	mov	r6, r0
 8015ece:	460f      	mov	r7, r1
 8015ed0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015ed4:	f7ea f9f8 	bl	80002c8 <__aeabi_dsub>
 8015ed8:	4652      	mov	r2, sl
 8015eda:	465b      	mov	r3, fp
 8015edc:	f7ea f9f6 	bl	80002cc <__adddf3>
 8015ee0:	3d01      	subs	r5, #1
 8015ee2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8015ee6:	e9c4 6700 	strd	r6, r7, [r4]
 8015eea:	e755      	b.n	8015d98 <__kernel_rem_pio2+0x518>
 8015eec:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015ef0:	f7ea f9ec 	bl	80002cc <__adddf3>
 8015ef4:	f108 38ff 	add.w	r8, r8, #4294967295
 8015ef8:	e758      	b.n	8015dac <__kernel_rem_pio2+0x52c>
 8015efa:	bf00      	nop
 8015efc:	f3af 8000 	nop.w
	...
 8015f08:	41700000 	.word	0x41700000
 8015f0c:	3e700000 	.word	0x3e700000
 8015f10:	9b04      	ldr	r3, [sp, #16]
 8015f12:	9a04      	ldr	r2, [sp, #16]
 8015f14:	601f      	str	r7, [r3, #0]
 8015f16:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8015f1a:	605c      	str	r4, [r3, #4]
 8015f1c:	609d      	str	r5, [r3, #8]
 8015f1e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8015f22:	60d3      	str	r3, [r2, #12]
 8015f24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015f28:	6110      	str	r0, [r2, #16]
 8015f2a:	6153      	str	r3, [r2, #20]
 8015f2c:	e719      	b.n	8015d62 <__kernel_rem_pio2+0x4e2>
 8015f2e:	bf00      	nop

08015f30 <scalbn>:
 8015f30:	b570      	push	{r4, r5, r6, lr}
 8015f32:	ec55 4b10 	vmov	r4, r5, d0
 8015f36:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8015f3a:	4606      	mov	r6, r0
 8015f3c:	462b      	mov	r3, r5
 8015f3e:	b991      	cbnz	r1, 8015f66 <scalbn+0x36>
 8015f40:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8015f44:	4323      	orrs	r3, r4
 8015f46:	d03d      	beq.n	8015fc4 <scalbn+0x94>
 8015f48:	4b35      	ldr	r3, [pc, #212]	@ (8016020 <scalbn+0xf0>)
 8015f4a:	4620      	mov	r0, r4
 8015f4c:	4629      	mov	r1, r5
 8015f4e:	2200      	movs	r2, #0
 8015f50:	f7ea fb72 	bl	8000638 <__aeabi_dmul>
 8015f54:	4b33      	ldr	r3, [pc, #204]	@ (8016024 <scalbn+0xf4>)
 8015f56:	429e      	cmp	r6, r3
 8015f58:	4604      	mov	r4, r0
 8015f5a:	460d      	mov	r5, r1
 8015f5c:	da0f      	bge.n	8015f7e <scalbn+0x4e>
 8015f5e:	a328      	add	r3, pc, #160	@ (adr r3, 8016000 <scalbn+0xd0>)
 8015f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f64:	e01e      	b.n	8015fa4 <scalbn+0x74>
 8015f66:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8015f6a:	4291      	cmp	r1, r2
 8015f6c:	d10b      	bne.n	8015f86 <scalbn+0x56>
 8015f6e:	4622      	mov	r2, r4
 8015f70:	4620      	mov	r0, r4
 8015f72:	4629      	mov	r1, r5
 8015f74:	f7ea f9aa 	bl	80002cc <__adddf3>
 8015f78:	4604      	mov	r4, r0
 8015f7a:	460d      	mov	r5, r1
 8015f7c:	e022      	b.n	8015fc4 <scalbn+0x94>
 8015f7e:	460b      	mov	r3, r1
 8015f80:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8015f84:	3936      	subs	r1, #54	@ 0x36
 8015f86:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8015f8a:	4296      	cmp	r6, r2
 8015f8c:	dd0d      	ble.n	8015faa <scalbn+0x7a>
 8015f8e:	2d00      	cmp	r5, #0
 8015f90:	a11d      	add	r1, pc, #116	@ (adr r1, 8016008 <scalbn+0xd8>)
 8015f92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015f96:	da02      	bge.n	8015f9e <scalbn+0x6e>
 8015f98:	a11d      	add	r1, pc, #116	@ (adr r1, 8016010 <scalbn+0xe0>)
 8015f9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015f9e:	a31a      	add	r3, pc, #104	@ (adr r3, 8016008 <scalbn+0xd8>)
 8015fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fa4:	f7ea fb48 	bl	8000638 <__aeabi_dmul>
 8015fa8:	e7e6      	b.n	8015f78 <scalbn+0x48>
 8015faa:	1872      	adds	r2, r6, r1
 8015fac:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8015fb0:	428a      	cmp	r2, r1
 8015fb2:	dcec      	bgt.n	8015f8e <scalbn+0x5e>
 8015fb4:	2a00      	cmp	r2, #0
 8015fb6:	dd08      	ble.n	8015fca <scalbn+0x9a>
 8015fb8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8015fbc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8015fc0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015fc4:	ec45 4b10 	vmov	d0, r4, r5
 8015fc8:	bd70      	pop	{r4, r5, r6, pc}
 8015fca:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8015fce:	da08      	bge.n	8015fe2 <scalbn+0xb2>
 8015fd0:	2d00      	cmp	r5, #0
 8015fd2:	a10b      	add	r1, pc, #44	@ (adr r1, 8016000 <scalbn+0xd0>)
 8015fd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015fd8:	dac1      	bge.n	8015f5e <scalbn+0x2e>
 8015fda:	a10f      	add	r1, pc, #60	@ (adr r1, 8016018 <scalbn+0xe8>)
 8015fdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015fe0:	e7bd      	b.n	8015f5e <scalbn+0x2e>
 8015fe2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8015fe6:	3236      	adds	r2, #54	@ 0x36
 8015fe8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8015fec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015ff0:	4620      	mov	r0, r4
 8015ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8016028 <scalbn+0xf8>)
 8015ff4:	4629      	mov	r1, r5
 8015ff6:	2200      	movs	r2, #0
 8015ff8:	e7d4      	b.n	8015fa4 <scalbn+0x74>
 8015ffa:	bf00      	nop
 8015ffc:	f3af 8000 	nop.w
 8016000:	c2f8f359 	.word	0xc2f8f359
 8016004:	01a56e1f 	.word	0x01a56e1f
 8016008:	8800759c 	.word	0x8800759c
 801600c:	7e37e43c 	.word	0x7e37e43c
 8016010:	8800759c 	.word	0x8800759c
 8016014:	fe37e43c 	.word	0xfe37e43c
 8016018:	c2f8f359 	.word	0xc2f8f359
 801601c:	81a56e1f 	.word	0x81a56e1f
 8016020:	43500000 	.word	0x43500000
 8016024:	ffff3cb0 	.word	0xffff3cb0
 8016028:	3c900000 	.word	0x3c900000
 801602c:	00000000 	.word	0x00000000

08016030 <floor>:
 8016030:	ec51 0b10 	vmov	r0, r1, d0
 8016034:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8016038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801603c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8016040:	2e13      	cmp	r6, #19
 8016042:	460c      	mov	r4, r1
 8016044:	4605      	mov	r5, r0
 8016046:	4680      	mov	r8, r0
 8016048:	dc34      	bgt.n	80160b4 <floor+0x84>
 801604a:	2e00      	cmp	r6, #0
 801604c:	da17      	bge.n	801607e <floor+0x4e>
 801604e:	a332      	add	r3, pc, #200	@ (adr r3, 8016118 <floor+0xe8>)
 8016050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016054:	f7ea f93a 	bl	80002cc <__adddf3>
 8016058:	2200      	movs	r2, #0
 801605a:	2300      	movs	r3, #0
 801605c:	f7ea fd7c 	bl	8000b58 <__aeabi_dcmpgt>
 8016060:	b150      	cbz	r0, 8016078 <floor+0x48>
 8016062:	2c00      	cmp	r4, #0
 8016064:	da55      	bge.n	8016112 <floor+0xe2>
 8016066:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801606a:	432c      	orrs	r4, r5
 801606c:	2500      	movs	r5, #0
 801606e:	42ac      	cmp	r4, r5
 8016070:	4c2b      	ldr	r4, [pc, #172]	@ (8016120 <floor+0xf0>)
 8016072:	bf08      	it	eq
 8016074:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8016078:	4621      	mov	r1, r4
 801607a:	4628      	mov	r0, r5
 801607c:	e023      	b.n	80160c6 <floor+0x96>
 801607e:	4f29      	ldr	r7, [pc, #164]	@ (8016124 <floor+0xf4>)
 8016080:	4137      	asrs	r7, r6
 8016082:	ea01 0307 	and.w	r3, r1, r7
 8016086:	4303      	orrs	r3, r0
 8016088:	d01d      	beq.n	80160c6 <floor+0x96>
 801608a:	a323      	add	r3, pc, #140	@ (adr r3, 8016118 <floor+0xe8>)
 801608c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016090:	f7ea f91c 	bl	80002cc <__adddf3>
 8016094:	2200      	movs	r2, #0
 8016096:	2300      	movs	r3, #0
 8016098:	f7ea fd5e 	bl	8000b58 <__aeabi_dcmpgt>
 801609c:	2800      	cmp	r0, #0
 801609e:	d0eb      	beq.n	8016078 <floor+0x48>
 80160a0:	2c00      	cmp	r4, #0
 80160a2:	bfbe      	ittt	lt
 80160a4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80160a8:	4133      	asrlt	r3, r6
 80160aa:	18e4      	addlt	r4, r4, r3
 80160ac:	ea24 0407 	bic.w	r4, r4, r7
 80160b0:	2500      	movs	r5, #0
 80160b2:	e7e1      	b.n	8016078 <floor+0x48>
 80160b4:	2e33      	cmp	r6, #51	@ 0x33
 80160b6:	dd0a      	ble.n	80160ce <floor+0x9e>
 80160b8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80160bc:	d103      	bne.n	80160c6 <floor+0x96>
 80160be:	4602      	mov	r2, r0
 80160c0:	460b      	mov	r3, r1
 80160c2:	f7ea f903 	bl	80002cc <__adddf3>
 80160c6:	ec41 0b10 	vmov	d0, r0, r1
 80160ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160ce:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80160d2:	f04f 37ff 	mov.w	r7, #4294967295
 80160d6:	40df      	lsrs	r7, r3
 80160d8:	4207      	tst	r7, r0
 80160da:	d0f4      	beq.n	80160c6 <floor+0x96>
 80160dc:	a30e      	add	r3, pc, #56	@ (adr r3, 8016118 <floor+0xe8>)
 80160de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160e2:	f7ea f8f3 	bl	80002cc <__adddf3>
 80160e6:	2200      	movs	r2, #0
 80160e8:	2300      	movs	r3, #0
 80160ea:	f7ea fd35 	bl	8000b58 <__aeabi_dcmpgt>
 80160ee:	2800      	cmp	r0, #0
 80160f0:	d0c2      	beq.n	8016078 <floor+0x48>
 80160f2:	2c00      	cmp	r4, #0
 80160f4:	da0a      	bge.n	801610c <floor+0xdc>
 80160f6:	2e14      	cmp	r6, #20
 80160f8:	d101      	bne.n	80160fe <floor+0xce>
 80160fa:	3401      	adds	r4, #1
 80160fc:	e006      	b.n	801610c <floor+0xdc>
 80160fe:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8016102:	2301      	movs	r3, #1
 8016104:	40b3      	lsls	r3, r6
 8016106:	441d      	add	r5, r3
 8016108:	4545      	cmp	r5, r8
 801610a:	d3f6      	bcc.n	80160fa <floor+0xca>
 801610c:	ea25 0507 	bic.w	r5, r5, r7
 8016110:	e7b2      	b.n	8016078 <floor+0x48>
 8016112:	2500      	movs	r5, #0
 8016114:	462c      	mov	r4, r5
 8016116:	e7af      	b.n	8016078 <floor+0x48>
 8016118:	8800759c 	.word	0x8800759c
 801611c:	7e37e43c 	.word	0x7e37e43c
 8016120:	bff00000 	.word	0xbff00000
 8016124:	000fffff 	.word	0x000fffff

08016128 <_init>:
 8016128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801612a:	bf00      	nop
 801612c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801612e:	bc08      	pop	{r3}
 8016130:	469e      	mov	lr, r3
 8016132:	4770      	bx	lr

08016134 <_fini>:
 8016134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016136:	bf00      	nop
 8016138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801613a:	bc08      	pop	{r3}
 801613c:	469e      	mov	lr, r3
 801613e:	4770      	bx	lr
